{
  "info": {
    "author": "Nikhil JSK",
    "author_email": "nikhiljsk98@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Preprocess NLP Text\n\n### Framework Description\nA simple and fast framework for \n* Preprocessing or Cleaning of text\n* Extracting top words or reduction of vocabulary \n* Feature Extraction\n* Word Vectorization\n\nUses parallel execution by leveraging the [multiprocessing library](https://docs.python.org/3.6/library/multiprocessing.html) in Python for cleaning of text, extracting top words and feature extraction modules. Contains both sequential and parallel ways (For less CPU intensive processes) for preprocessing text with an option of user-defined number of processes.\n\n> *PS: There is no multi-processing support for word vectorization*\n\n* `Cleaning Text` - Clean text with various defined stages implemented using standardized techniques in Natural Language Processing (NLP)\n* `Vocab Reduction` - Find the top words in the corpus, lets you choose a threshold to consider the words that can stay in the corpus and replaces the others\n* `Feature Extraction` - Extract features from corpus of text using SpaCy\n* `Word Vectorization` - Simple code to convert words to vectors (TFIDF, Word2Vec, GloVe) using [Scikit-learn](https://scikit-learn.org/) and [Gensim](https://radimrehurek.com/gensim/)\n\n---\n#### Preprocess/Cleaning Module\nUses [nltk](https://www.nltk.org/) for few of the stages defined below.\nVarious stages of cleaning include:\n\n| Stage                     | Description                                                                           |\n| ------------------------- |:-------------------------------------------------------------------------------------:|\n| remove_tags_nonascii      | Remove HTML tags, emails, URLs, non-ascii characters and converts accented characters |\n| lower_case                | Converts the text to lower_case                                                       |\n| expand_contractions       | Expands the word contractions                                                         |\n| remove_punctuation        | Remove punctuation from text, but sentences are seperated by ' . '                    |\n| remove_esacape_chars      | Remove escapse characters like \\n, \\t etc                                             |\n| remove_stopwords          | Remove stopwords using nltk python                                                    |\n| remove_numbers            | Remove all digits in the text                                                         |\n| lemmatize                 | Uses WordNetLemmatizer to lemmatize text                                              |\n| stemming                  | Uses SnowballStemmer for stemming of text                                             |\n| min_word_len              | Minimum word length to keep in text                                                   |\n\n\n#### Reduction of Vocabulary \nShortlists top words based on the percentage as input. Replaces the words not shortlisted and replaces them efficienctly. Also, supports parallel and sequential processing. \n\n\n\n#### Feature Extraction Module\nUses [Spacy Pipe](https://spacy.io/usage/processing-pipelines) module to avoid unnecessary parsing to increase speed.\nVarious stages of feature extraction include:\n| Stage                     | Description                                                                           |\n| ------------------------- |:-------------------------------------------------------------------------------------:|\n| nouns                     | Extract the list of Nouns from the given string                                       |\n| verbs                     | Extract the list of Verbs from the given string                                       |\n| adjs                      | Extract the list of Adjectives from the given string                                  |\n| noun_phrases              | Extract the list of Noun Phrases (Noun chunks) from the given string                  |\n| keywords                  | Uses [YAKE](https://github.com/LIAAD/yake) for extracting keywords from text          |\n| ner                       | Extracts Person, Location and Organization as named entities                          |\n| numbers                   | Extracts all digits in the text                                                       |\n\n#### Word Vectorization\nFunctions written in python to convert words to vectors using libraries like Scikit-Learn and Gensim. Contains four vectorization techniques like CountVectorizer (Bag of Words Model), TFIDF-Vectorizer, Word2Vec and GloVe. Also contains others features to get the top words according to IDF Scores, similar words with similarity scores and average sentence-wise vectors. \n\n---\n### Code - Components\nVarious Python files and their purposes are mentioned here:\n* [`preprocess_nlp.py`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/preprocess/preprocess_nlp.py) - Contains functions which are built around existing techniques for preprocessing or cleaning text. Defines both sequential and parallel ways of code execution for preprocessing.\n* [`Preprocessing_Example_Notebook.ipynb`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/preprocess/Preprocessing_Example_Notebook.ipynb)    - How-to-use example notebook for preprocessing or cleaning stages\n* [`requirements.txt`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/requirements.txt)                        - Required libraries to run the project\n* [`vocab_elimination_nlp.py`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/vocab_elimination/vocab_elimination_nlp.py) - Contains functions which are built around existing techniques for shortlisting top words and reducing vocab size\n* [`Vocab_Elimination_Example_Notebook.ipynb`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/vocab_elimination/Vocab_Elimination_Example_Notebook.ipynb) - How-to-use example notebook for vocabulary reduction/elimination or replacement.\n* [`vectorization_nlp.py`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/vectorization/vectorization_nlp.py) - Contains functions which are built around existing techniques for vectorizing words.\n* [`Vectorization_Example_Notebook.ipynb`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/vectorization/Vectorization_Example_Notebook.ipynb) - How-to-use example notebook for vectorization of words and additional functions or features. \n---\n### How to run\n1. pip install -r requirements.txt\n2. Import [`preprocess_nlp.py`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/preprocess/preprocess_nlp.py) and use the functions [`preprocess_nlp`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/preprocess/preprocess_nlp.py#L34)(for sequential) and [`asyn_call_preprocess`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/preprocess/preprocess_nlp.py#L149)(for parallel) as defined in notebook\n3. Import [`vocab_elimination_nlp.py`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/vocab_elimination/vocab_elimination_nlp.py) and use functions as defined in the notebook [`Vocab_Elimination_Example_Notebook.ipynb`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/vocab_elimination/Vocab_Elimination_Example_Notebook.ipynb)\n4. Import [`feature_extraction.py`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/feature_extraction/feature_extraction.py) and use functions as defined in notebook [`Feature_Extraction_Example_Notebook.ipynb`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/feature_extraction/Feature_Extraction_Example_Notebook.ipynb)\n5. Import [`vectorization_nlp.py`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/vectorization/vectorization_nlp.py) and use functions as defined in notebook [`Vectorization_Example_Notebook.ipynb`](https://github.com/nikhiljsk/preprocess_nlp/blob/master/vectorization/Vectorization_Example_Notebook.ipynb)\n---\n### Sequential & Parallel Processing\n1. Sequential   - Processes records in a sequential order, does not consume a lot of CPU Memory but is slower compared to Parallel processing\n2. Parallel     - Can create multiple processes (customizable/user-defined) to preprocess text parallelly, Memory intensive and faster\n---\n\n*Refer the code for Docstrings and other function related documentation.* \n<br>\nCheers :)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nikhiljsk/preprocess_nlp",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "preprocess-nlp",
    "package_url": "https://pypi.org/project/preprocess-nlp/",
    "platform": "",
    "project_url": "https://pypi.org/project/preprocess-nlp/",
    "project_urls": {
      "Homepage": "https://github.com/nikhiljsk/preprocess_nlp"
    },
    "release_url": "https://pypi.org/project/preprocess-nlp/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A fast framework for pre-processing  (Cleaning text, Reduction of vocabulary, Feature extraction and Vectorization). Implemented with parallel processing using custom number of processes.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7212639,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13979d36a09b528ff6b2257a7f10d04c9511164bd0f61e1fcb835e2f139d2a14",
          "md5": "235ee96491480fe6c13a6da3a39c267e",
          "sha256": "1756f9e48a879e223764774601b94b1778570db4ec69e3cabd1ec66ce6342bb7"
        },
        "downloads": -1,
        "filename": "preprocess_nlp-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "235ee96491480fe6c13a6da3a39c267e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3656,
        "upload_time": "2020-05-11T06:39:21",
        "upload_time_iso_8601": "2020-05-11T06:39:21.274205Z",
        "url": "https://files.pythonhosted.org/packages/13/97/9d36a09b528ff6b2257a7f10d04c9511164bd0f61e1fcb835e2f139d2a14/preprocess_nlp-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "13979d36a09b528ff6b2257a7f10d04c9511164bd0f61e1fcb835e2f139d2a14",
        "md5": "235ee96491480fe6c13a6da3a39c267e",
        "sha256": "1756f9e48a879e223764774601b94b1778570db4ec69e3cabd1ec66ce6342bb7"
      },
      "downloads": -1,
      "filename": "preprocess_nlp-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "235ee96491480fe6c13a6da3a39c267e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 3656,
      "upload_time": "2020-05-11T06:39:21",
      "upload_time_iso_8601": "2020-05-11T06:39:21.274205Z",
      "url": "https://files.pythonhosted.org/packages/13/97/9d36a09b528ff6b2257a7f10d04c9511164bd0f61e1fcb835e2f139d2a14/preprocess_nlp-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}