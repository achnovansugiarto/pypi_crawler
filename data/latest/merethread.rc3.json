{
  "info": {
    "author": "shx2",
    "author_email": "shx222@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "==================================\nMereThread\n==================================\n\nWhat is MereThread?\n=====================\n\nMereThreads are merely python threads (subclasses of ``threading.Thread``), plus various\nuseful features.\n\nThis package also includes thread classes suitable for common use cases\n(specifically, ``EventLoopThread`` and ``TaskThread``).\n\n\nWhat MereThread isn't?\n--------------------------\n\nThis isn't an ambitous new approach to multithreading.  Mere threads, plus added features.\nNo magic is involved.\n\nIf you're familiar with working with standard python threads (the ``threading.Thread`` class),\nthere's almost nothing new to learn before using MereThreads, and benefiting from the\nuseful features.\n\n\nFeatures\n==================\n\n- Added attributes:\n\n    - ``Thread.result``: the value \"returned\" by the thread (e.g. the result of a computation).\n    - ``Thread.exception``: the exception which caused the thread to abort.\n\n- ``Future``-interface: A ``concurrent.futures.Future`` interface, using the ``Thread.future`` attribute.\n\n    - Useful mainly for adding callbacks/errbacks to be called when the thread finishes.\n    - Also allows you to wait on multiple threads (using\n      ``concurrent.futures.wait()`` or ``concurrent.futures.as_completed()`` )\n\n- Clean stopping/cancelling: by calling ``DaemonThread.stop()``, or ``TaskThread.cancel()``.\n\n    - This depends on thread's `well-behaved-ness <#well-behaved-threads>`_.\n\n- Debugging and profiling threads\n\n    - Easily profile a thread.\n\n        - Enable profiling on the thread by passing ``profile=True``.\n        - Access profiler data and stats using the ``Thread.profiler`` attribute.\n\n    - Easily view the current (live) stack-trace of the thread, using the\n      ``Thread.get_current_stacktrace()`` method.\n\n    - Access thread execution start/end times, using the ``Thread.runtime`` attribute.\n\n- The ``Thread.join()`` method returns a bool indicating whether thread has finished\n\n    - This corrects an annoying inconvenience in the interface of the standard ``Thread`` class.\n\n\nThread Classes\n==================\n\nThis package includes definitions of **abstract thread classes**, suitable for common use cases.\n\nThese classes are subclasses of the ``merethread.Thread`` baseclass, and include all the features\nlisted above.\n\nThese are:\n\n- ``DaemonThread``: A thread which is meant to run for as long as the process is alive.\n\n    - Can be signaled to stop (cleanly) by calling its ``DaemonThread.stop()`` method.\n    - Exiting prematurely is considered an error, and an appropriate error handler is called, so\n      they don't disappear silently.\n\n- ``EventLoopThread``: A specialized ``DaemonThread``, customized for the common case of running\n  an `event-loop <https://en.wikipedia.org/wiki/Event_loop>`_.\n\n    - A concrete ``EventLoopThread`` subclass only needs to define how to read the next event, and how\n      to handle an event.\n\n- ``TaskThread``: A \"temporary\" thread which is meant to run a specific task (e.g. compute some value)\n  and exit.\n\n    - Can be cancelled (cleanly) by calling its ``TaskThread.cancel()`` method.\n\n- ``ExpiringTaskThread``: A thread which is meant to run for a predefined duration and exit.\n\n- ``FunctionThread``: A specialized ``TaskThread`` which runs a caller-provided ``target`` function\n  (similar to the standard ``Thread`` ``target`` arguemnt).\n\n    - This class is provided for convenience.  It is not a well-behaved thread.\n    - Cancelling a ``FunctionThread`` can only be done before it starts running.\n    - You should prefer subclassing ``TaskThread`` instead of using a ``FunctionThread`` when\n      possible.\n\n\nWell Behaved Threads\n======================\n\nIn order to support clean stopping/cancelling of threads, the concrete thread subclasses have to adhere\nto one basic rule: they have to\n\n    *check* **OFTEN** *if the thread has been signalled to stop/cancel.*\n\nThe frequency of the check defines thread's responsiveness to stopping/cancelling.\nIn other words, a check frequency of at most X seconds means it can take up to X seconds, from the time\nstop/cancel is requested, until the thread stops (or, more accurately, until it detects it should stop, and\nmoves on to its exiting-routine).\n\nHow often is **OFTEN**?  That depends on the application, but a good rule of thumb, for most applications,\nis that a frequency of 200 millis is often enough, and 2 seconds is not.\nCare should also be taken not to check too often (e.g. every 0.1 millis), because that would result in a\nbusy-wait loop, and wasted CPU time.\n\n\nInstallation\n==================\n\nInstall using ``pip``::\n\n    % pip install merethread\n\n\nOther locations\n==================\n\n- `MereThread's GitHub page <https://github.com/shx2/merethread>`_\n- `MereThread on PyPI <https://pypi.python.org/pypi?:action=display&name=merethread>`_",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shx2/merethread",
    "keywords": "thread,multithreading,profiler",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "merethread",
    "package_url": "https://pypi.org/project/merethread/",
    "platform": "",
    "project_url": "https://pypi.org/project/merethread/",
    "project_urls": {
      "Homepage": "https://github.com/shx2/merethread"
    },
    "release_url": "https://pypi.org/project/merethread/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Mere python threads, plus features",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7634713,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94281a0f4eefe18f8c6a3709ded43f4c30f47846a601c682f1fd44f0cdc22e8d",
          "md5": "d73e575bd5fa50f24ea740e8ee83a458",
          "sha256": "b380b4562cc316fecc688531da0029445b8a46ea70a73c32efbb346027593981"
        },
        "downloads": -1,
        "filename": "merethread-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d73e575bd5fa50f24ea740e8ee83a458",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14445,
        "upload_time": "2020-04-12T14:29:51",
        "upload_time_iso_8601": "2020-04-12T14:29:51.021771Z",
        "url": "https://files.pythonhosted.org/packages/94/28/1a0f4eefe18f8c6a3709ded43f4c30f47846a601c682f1fd44f0cdc22e8d/merethread-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ea4e9402b9d9ea8475a069a01c01d8f6ff9356a66d66c7bde5d2b01ac5d7f38",
          "md5": "e4d4f147e145566cdc24510357dbcb2a",
          "sha256": "d8d81ce4077f1d4b2a9a90609654d06a3cb36b6e5c1eb6baca83c4a3bc8d00b1"
        },
        "downloads": -1,
        "filename": "merethread-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e4d4f147e145566cdc24510357dbcb2a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15184,
        "upload_time": "2020-06-12T18:19:04",
        "upload_time_iso_8601": "2020-06-12T18:19:04.749858Z",
        "url": "https://files.pythonhosted.org/packages/5e/a4/e9402b9d9ea8475a069a01c01d8f6ff9356a66d66c7bde5d2b01ac5d7f38/merethread-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7693f976bcd2019bd069cdb8f621d4af02c8fb7ae9cbfca26dcede2f6b8341b",
          "md5": "a5bcfd3a67c8b9d61bdefb2395c92465",
          "sha256": "a18da8291f00e5960c4110f663ed7ba61176931a0ee5a0e3b8ec67d75e0ce1ba"
        },
        "downloads": -1,
        "filename": "merethread-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a5bcfd3a67c8b9d61bdefb2395c92465",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16856,
        "upload_time": "2020-07-05T19:25:57",
        "upload_time_iso_8601": "2020-07-05T19:25:57.595736Z",
        "url": "https://files.pythonhosted.org/packages/f7/69/3f976bcd2019bd069cdb8f621d4af02c8fb7ae9cbfca26dcede2f6b8341b/merethread-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7693f976bcd2019bd069cdb8f621d4af02c8fb7ae9cbfca26dcede2f6b8341b",
        "md5": "a5bcfd3a67c8b9d61bdefb2395c92465",
        "sha256": "a18da8291f00e5960c4110f663ed7ba61176931a0ee5a0e3b8ec67d75e0ce1ba"
      },
      "downloads": -1,
      "filename": "merethread-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a5bcfd3a67c8b9d61bdefb2395c92465",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16856,
      "upload_time": "2020-07-05T19:25:57",
      "upload_time_iso_8601": "2020-07-05T19:25:57.595736Z",
      "url": "https://files.pythonhosted.org/packages/f7/69/3f976bcd2019bd069cdb8f621d4af02c8fb7ae9cbfca26dcede2f6b8341b/merethread-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}