{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# python-blueprint\n\n[![GitHub Actions][github-actions-badge]](https://github.com/johnthagen/python-blueprint/actions)\n[![Code style: black][black-badge]](https://github.com/psf/black)\n[![Imports: isort][isort-badge]](https://pycqa.github.io/isort/)\n\n[github-actions-badge]: https://github.com/johnthagen/python-blueprint/workflows/python/badge.svg\n[black-badge]: https://img.shields.io/badge/code%20style-black-000000.svg\n[isort-badge]: https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336\n\nExample Python project that demonstrates how to create a tested Python package using the latest\nPython testing and linting tooling. The project contains a `fact` package that provides a simple\nimplementation of the [factorial algorithm](https://en.wikipedia.org/wiki/Factorial) (`fact.lib`)\nand a command line interface (`fact.cli`).\n\n## Requirements\n\nPython 3.6+.\n\n> **Note**\n>\n> Because [Python 2.7 support ended January 1, 2020](https://pythonclock.org/), new projects \n> should consider supporting Python 3 only, which is simpler than trying to support both. As a \n> result, support for Python 2.7 in this example project has been dropped.\n\n## Windows Support\n\nSummary: On Windows, use `py` instead of `python3` for many of the examples in this documentation.\n\nThis package fully supports Windows, along with Linux and macOS, but Python is\ntypically [installed differently on Windows](https://docs.python.org/3/using/windows.html). Windows\nusers typically access Python through the [py](https://www.python.org/dev/peps/pep-0397/) launcher\nrather than a `python3` link in their `PATH`. Within a virtual environment, all platforms operate\nthe same and use a `python` link to access the Python version used in that virtual environment.\n\n## Dependencies\n\nDependencies are defined in:\n\n- `requirements.in`\n- `requirements.txt`\n- `dev-requirements.in`\n- `dev-requirements.txt`\n\n### Virtual Environments\n\nIt is best practice during development to create an\nisolated [Python virtual environment](https://docs.python.org/3/library/venv.html) using the `venv`\nstandard library module. This will keep dependant Python packages from interfering with other\nPython projects on your system.\n\nOn *Nix:\n\n```bash\n# On Python 3.9+, add --upgrade-deps\n$ python3 -m venv venv\n$ source venv/bin/activate\n```\n\nOn Windows `cmd`:\n\n```bash\n> py -m venv venv\n> venv\\Scripts\\activate.bat\n```\n\nOnce activated, it is good practice to update core packaging tools (`pip`, `setuptools`,\nand `wheel`) to the latest versions.\n\n```bash\n(venv) $ python -m pip install --upgrade pip setuptools wheel\n```\n\n### (Applications Only) Locking Dependencies\n\nThis project uses [pip-tools](https://github.com/jazzband/pip-tools) to lock project dependencies\nand create reproducible virtual environments.\n\n**Note:** *Library* projects should not lock their `requirements.txt`. Since `python-blueprint`\nalso has a CLI application, this end-user application example is used to demonstrate how to lock\napplication dependencies.\n\nTo update dependencies:\n\n```bash\n(venv) $ python -m pip install pip-tools\n(venv) $ python -m piptools compile --upgrade requirements.in\n(venv) $ python -m piptools compile --upgrade dev-requirements.in\n```\n\nAfter upgrading dependencies, run the unit tests as described in the [Unit Testing](#unit-testing)\nsection to ensure that none of the updated packages caused incompatibilities in the current\nproject.\n\n### Syncing Virtual Environments\n\nTo cleanly install your dependencies into your virtual environment:\n\n```bash\n(venv) $ python -m piptools sync requirements.txt dev-requirements.txt\n```\n\n## Packaging\n\nThis project is designed as a Python package, meaning that it can be bundled up and redistributed\nas a single compressed file.\n\nPackaging is configured by:\n\n- `pyproject.toml`\n- `setup.py`\n- `MANIFEST.in`\n\nTo package the project as both a \n[source distribution](https://docs.python.org/3/distutils/sourcedist.html) and\na [wheel](https://wheel.readthedocs.io/en/stable/):\n\n```bash\n(venv) $ python setup.py sdist bdist_wheel\n```\n\nThis will generate `dist/fact-1.0.0.tar.gz` and `dist/fact-1.0.0-py3-none-any.whl`.\n\nRead more about the [advantages of wheels](https://pythonwheels.com/) to understand why generating\nwheel distributions are important.\n\n### Upload Distributions to PyPI\n\nSource and wheel redistributable packages can\nbe [uploaded to PyPI](https://packaging.python.org/tutorials/packaging-projects/) or installed\ndirectly from the filesystem using `pip`.\n\nTo upload to PyPI:\n\n```bash\n(venv) $ python -m pip install twine\n(venv) $ twine upload dist/*\n```\n\n## Testing\n\nAutomated testing is performed using [tox](https://tox.readthedocs.io/en/latest/index.html). tox\nwill automatically create virtual environments based on `tox.ini` for unit testing, PEP8 style\nguide checking, and documentation generation.\n\n```bash\n# Run all environments.\n#   To only run a single environment, specify it like: -e lint\n# Note: tox is installed into the virtual environment automatically by ``piptools sync``\n# command above.\n(venv) $ tox\n```\n\n### Unit Testing\n\nUnit testing is performed with [pytest](https://pytest.org/). pytest has become the defacto Python\nunit testing framework. Some key advantages over the built\nin [unittest](https://docs.python.org/3/library/unittest.html) module are:\n\n1. Significantly less boilerplate needed for tests.\n2. PEP8 compliant names (e.g. `pytest.raises()` instead of `self.assertRaises()`).\n3. Vibrant ecosystem of plugins.\n\npytest will automatically discover and run tests by recursively searching for folders and `.py`\nfiles prefixed with `test` for any functions prefixed by `test`.\n\nThe `tests` folder is created as a Python package (i.e. there is an `__init__.py` file within it)\nbecause this helps `pytest` uniquely namespace the test files. Without this, two test files cannot\nbe named the same, even if they are in different sub-directories.\n\nCode coverage is provided by the [pytest-cov](https://pytest-cov.readthedocs.io/en/latest/) plugin.\n\nWhen running a unit test tox environment (e.g. `tox -e py39`), an HTML report is generated in\nthe `htmlcov` folder showing each source file and which lines were executed during unit testing.\nOpen `htmlcov/index.html` in a web browser to view the report. Code coverage reports help identify\nareas of the project that are currently not tested.\n\nCode coverage is configured in `pyproject.toml`.\n\nTo pass arguments to `pytest` through `tox`:\n\n```bash\n(venv) $ tox -e py39 -- -k invalid_factorial\n```\n\n### Code Style Checking\n\n[PEP8](https://www.python.org/dev/peps/pep-0008/) is the universally accepted style guide for\nPython code. PEP8 code compliance is verified using [flake8](http://flake8.pycqa.org/). flake8 is\nconfigured in the `[flake8]` section of `tox.ini`. Extra flake8 plugins are also included:\n\n- `pep8-naming`: Ensure functions, classes, and variables are named with correct casing.\n\n### Automated Code Formatting\n\nCode is automatically formatted using [black](https://github.com/psf/black). Imports are\nautomatically sorted and grouped using [isort](https://github.com/PyCQA/isort/).\n\nThese tools are configured by:\n\n- `pyproject.toml`\n\nTo automatically format code, run:\n\n```bash\n(venv) $ tox -e fmt\n```\n\nTo verify code has been formatted, such as in a CI job:\n\n```bash\n(venv) $ tox -e fmt-check\n```\n\n### Generated API Documentation\n\nAPI Documentation for the `fact` Python project modules is automatically\ngenerated using a [Sphinx](http://sphinx-doc.org/) tox environment. Sphinx is a documentation\ngeneration tool that is the defacto tool for Python API documentation. Sphinx uses\nthe [RST](https://www.sphinx-doc.org/en/latest/usage/restructuredtext/basics.html) markup language.\n\nThis project uses\nthe [napoleon](http://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html) plugin for\nSphinx, which renders Google-style docstrings. Google-style docstrings provide a good mix of\neasy-to-read docstrings in code as well as nicely-rendered output.\n\n```python\n\"\"\"Computes the factorial through a recursive algorithm.\n\nArgs:\n    n: A positive input value.\n\nRaises:\n    InvalidFactorialError: If n is less than 0.\n\nReturns:\n    Computed factorial.\n\"\"\"\n```\n\nThe Sphinx project is configured in `docs/api/conf.py`.\n\nThis project uses the [furo](https://pradyunsg.me/furo/) Sphinx theme for its elegant, simple to\nuse, dark theme.\n\nBuild the docs using the `docs-api` tox environment (e.g. `tox` or `tox -e docs-api`). Once built,\nopen `docs/api/_build/index.html` in a web browser.\n\nTo configure Sphinx to automatically rebuild when it detects changes, run `tox -e docs-api-serve`\nand open <http://127.0.0.1:8000> in a browser.\n\n#### Generate a New Sphinx Project\n\nTo generate the Sphinx project shown in this project:\n\n```bash\n# Note: Sphinx is installed into the virtual environment automatically by ``piptools sync``\n# command above.\n(venv) $ mkdir -p docs/api\n(venv) $ cd docs/api\n(venv) $ sphinx-quickstart --no-makefile --no-batchfile --extensions sphinx.ext.napoleon\n# When prompted, select all defaults.\n```\n\nModify `conf.py` appropriately:\n\n```python\n# Add the project's Python package to the path so that autodoc can find it.\nimport os\nimport sys\nsys.path.insert(0, os.path.abspath(\"../../src\"))\n```\n\n### Generating a User Guide\n\n[Material for MkDocs](https://squidfunk.github.io/mkdocs-material/) is a powerful static site\ngenerator that combines easy-to-write Markdown, with a number of Markdown extensions that increase\nthe power of Markdown. This makes it a great fit for user guides and other technical documentation.\n\nThe example MkDocs project included in this project is configured to allow the built documentation\nto be hosted at any URL or viewed offline from the file system.\n\nTo build the user guide, run `tox -e docs-user-guide`. Open `docs/user_guide/site/index.html` using\na web browser.\n\nTo build and serve the user guide with automatic rebuilding as you change the contents,\nrun `tox -e docs-user-guide-serve` and open <http://127.0.0.1:8000> in a browser.\n\nEach time the `master` Git branch is updated, the `.github/workflows/pages.yml` GitHub Action will\nautomatically build the user guide and publish it to [GitHub Pages](https://pages.github.com/).\nThis is configured in the `docs-user-guide-github-pages` `tox` environment. This hosted user guide\ncan be viewed at <https://johnthagen.github.io/python-blueprint/>\n\n### Continuous Integration\n\nContinuous integration is provided by [GitHub Actions](https://github.com/features/actions). This\nruns all tests and lints for every commit and pull request to the repository.\n\nGitHub Actions is configured in `.github/workflows/python.yml` and `tox.ini` using\nthe [tox-gh-actions plugin](https://github.com/ymyzk/tox-gh-actions).\n\nProject Structure\n-----------------\n\nTraditionally, Python projects place the source for their packages in the root of the project\nstructure, like:\n\n``` {.sourceCode .}\nfact\n├── fact\n│   ├── __init__.py\n│   ├── cli.py\n│   └── lib.py\n├── tests\n│   ├── __init__.py\n│   └── test_fact.py\n├── tox.ini\n└── setup.py\n```\n\nHowever, this structure\nis [known](https://docs.pytest.org/en/latest/goodpractices.html#tests-outside-application-code) to\nhave bad interactions with `pytest` and `tox`, two standard tools maintaining Python projects. The\nfundamental issue is that tox creates an isolated virtual environment for testing. By installing\nthe distribution into the virtual environment, `tox` ensures that the tests pass even after the\ndistribution has been packaged and installed, thereby catching any errors in packaging and\ninstallation scripts, which are common. Having the Python packages in the project root subverts\nthis isolation for two reasons:\n\n1. Calling `python` in the project root (for example, `python -m pytest tests/`) \n   [causes Python to add the current working directory](https://docs.pytest.org/en/latest/pythonpath.html#invoking-pytest-versus-python-m-pytest) (\n   the project root) to `sys.path`, which Python uses to find modules. Because the source\n   package `fact` is in the project root, it shadows the `fact` package installed in the tox\n   environment.\n2. Calling `pytest` directly anywhere that it can find the tests will also add the project root\n   to `sys.path` if the `tests` folder is a a Python package (that is, it contains a `__init__.py`\n   file).\n   [pytest adds all folders containing packages](https://docs.pytest.org/en/latest/goodpractices.html#conventions-for-python-test-discovery)\n   to `sys.path` because it imports the tests like regular Python modules.\n\nIn order to properly test the project, the source packages must not be on the Python path. To\nprevent this, there are three possible solutions:\n\n1. Remove the `__init__.py` file from `tests` and run `pytest` directly as a tox command.\n2. Remove the `__init__.py` file from tests and change the working directory of `python -m pytest`\n   to `tests`.\n3. Move the source packages to a dedicated `src` folder.\n\nThe dedicated `src` directory is the \n[recommended solution](https://docs.pytest.org/en/latest/pythonpath.html#test-modules-conftest-py-files-inside-packages)\nby `pytest` when using tox and the solution this blueprint promotes because it is the least brittle\neven though it deviates from the traditional Python project structure. It results is a directory\nstructure like:\n\n``` {.sourceCode .}\nfact\n├── src\n│   └── fact\n│       ├── __init__.py\n│       ├── cli.py\n│       └── lib.py\n├── tests\n│   ├── __init__.py\n│   └── test_fact.py\n├── tox.ini\n└── setup.py\n```\n\nType Hinting\n------------\n\n[Type hinting](https://docs.python.org/3/library/typing.html) allows developers to include optional\nstatic typing information to Python source code. This allows static analyzers such\nas [PyCharm](https://www.jetbrains.com/pycharm/), [mypy](http://mypy-lang.org/),\nor [Pyre](https://pyre-check.org/) to check that functions are used with the correct\ntypes before runtime.\n\nFor [PyCharm in particular](https://www.jetbrains.com/help/pycharm/type-hinting-in-product.html),\nthe IDE is able to provide much richer auto-completion, refactoring, and type checking while the\nuser types, resulting in increased productivity and correctness.\n\nThis project uses the type hinting syntax introduced in Python 3:\n\n```python\ndef factorial(n: int) -> int:\n```\n\nType checking is performed by mypy via `tox -e type-check`. mypy is configured in `pyproject.toml`.\n\nSee also [awesome-python-typing](https://github.com/typeddjango/awesome-python-typing).\n\n### Distributing Type Hints\n\n[PEP 561](https://www.python.org/dev/peps/pep-0561/) defines how a Python package should\ncommunicate the presence of inline type hints to static type\ncheckers. [mypy's documentation](https://mypy.readthedocs.io/en/stable/installed_packages.html)\nprovides further examples on how to do this as well.\n\nMypy looks for the existence of a file named `py.typed` in the root of the installed package to\nindicate that inline type hints should be checked.\n\n## Licensing\n\nLicensing for the project is defined in:\n\n- `LICENSE.txt`\n- `setup.py`\n\nThis project uses a common permissive license, the MIT license.\n\nYou may also want to list the licenses of all of the packages that your Python project depends on.\nTo automatically list the licenses for all dependencies in `requirements.txt` (and their transitive\ndependencies) using [pip-licenses](https://github.com/raimon49/pip-licenses):\n\n```bash\n(venv) $ tox -e licenses\n...\n Name        Version  License\n colorama    0.4.3    BSD License\n exitstatus  1.3.0    MIT License\n```\n\n## Docker\n\n[Docker](https://www.docker.com/) is a tool that allows for software to be packaged into isolated\ncontainers. It is not necessary to use Docker in a Python project, but for the purposes of\npresenting best practice examples, a Docker configuration is provided in this project. The Docker\nconfiguration in this repository is optimized for small size and increased security, rather than\nsimplicity.\n\nDocker is configured in:\n\n- `Dockerfile`\n- `.dockerignore`\n\nTo build the Docker image:\n\n```bash\n$ docker build --tag fact .\n```\n\nTo run the image in a container:\n\n```bash\n# Example calculating the factorial of 5.\n$ docker run --rm --interactive --tty fact 5\n```\n\n## PyCharm Configuration\n\nTo configure PyCharm 2018.3 and newer to align to the code style used in this project:\n\n- Settings | Search \"Hard wrap at\"\n  - Editor | Code Style | General | Hard wrap at: 99\n\n- Settings | Search \"Optimize Imports\"\n  - Editor | Code Style | Python | Imports\n      - ☑ Sort import statements\n        - ☑ Sort imported names in \"from\" imports\n        - ☐ Sort plain and \"from\" imports separately within a group\n        - ☐ Sort case-insensitively\n      - Structure of \"from\" imports\n        - ◎ Leave as is\n        - ◉ Join imports with the same source\n        - ◎ Always split imports\n\n- Settings | Search \"Docstrings\"\n  - Tools | Python Integrated Tools | Docstrings | Docstring Format: Google\n\n- Settings | Search \"pytest\"\n  - Tools | Python Integrated Tools | Testing | Default test runner: pytest\n\n- Settings | Search \"Force parentheses\"\n  - Editor | Code Style | Python | Wrapping and Braces | \"From\" Import Statements\n    - ☑ Force parentheses if multiline\n\n### Integrate Code Formatters\n\nTo integrate automatic code formatters into PyCharm, reference the following instructions:\n\n- [black integration](https://black.readthedocs.io/en/stable/integrations/editors.html#pycharm-intellij-idea)\n  - The File Watchers method (step 6) is recommended. This will run `black` on every save.\n\n- [isort integration](https://github.com/timothycrosley/isort/wiki/isort-Plugins)\n    - The File Watchers method (option 1) is recommended. This will run `isort` on every save.\n\n> **Tip**\n>\n> These tools work best if you properly mark directories as excluded from the project that should \n> be, such as `.tox`. See \n> <https://www.jetbrains.com/help/pycharm/project-tool-window.html#content_pane_context_menu> on \n> how to Right Click | Mark Directory as | Excluded.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/johnthagen/python-blueprint",
    "keywords": "python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fact-test-001",
    "package_url": "https://pypi.org/project/fact-test-001/",
    "platform": "",
    "project_url": "https://pypi.org/project/fact-test-001/",
    "project_urls": {
      "Homepage": "https://github.com/johnthagen/python-blueprint"
    },
    "release_url": "https://pypi.org/project/fact-test-001/1.0.0/",
    "requires_dist": [
      "click (==7.1.2)",
      "colorama (==0.4.4)",
      "typer (==0.3.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "Example Python project",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11015945,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43805b3c6fa31d3840a8a5a9c6f52be81a737974c8f60be10f5d4b6c802adb03",
          "md5": "d4a63a320403092a6c83f4055027ecdf",
          "sha256": "feeefe63a05f32f575019c58a0d5840da45aea42f067b11c9b94fa34baed0281"
        },
        "downloads": -1,
        "filename": "fact_test_001-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4a63a320403092a6c83f4055027ecdf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10329,
        "upload_time": "2021-07-27T13:56:16",
        "upload_time_iso_8601": "2021-07-27T13:56:16.271724Z",
        "url": "https://files.pythonhosted.org/packages/43/80/5b3c6fa31d3840a8a5a9c6f52be81a737974c8f60be10f5d4b6c802adb03/fact_test_001-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4462c0f83ab826b9cf73c5c5f14c99f1295814ede48a18e7b6da8f59ca148d4d",
          "md5": "925eb3b9acfed306f6568701f485a744",
          "sha256": "28462c1eab6a485357c16a994a347b37ff55d9484c45c4cbdc362f4d78a89127"
        },
        "downloads": -1,
        "filename": "fact_test_001-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "925eb3b9acfed306f6568701f485a744",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18792,
        "upload_time": "2021-07-27T13:56:17",
        "upload_time_iso_8601": "2021-07-27T13:56:17.635583Z",
        "url": "https://files.pythonhosted.org/packages/44/62/c0f83ab826b9cf73c5c5f14c99f1295814ede48a18e7b6da8f59ca148d4d/fact_test_001-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "43805b3c6fa31d3840a8a5a9c6f52be81a737974c8f60be10f5d4b6c802adb03",
        "md5": "d4a63a320403092a6c83f4055027ecdf",
        "sha256": "feeefe63a05f32f575019c58a0d5840da45aea42f067b11c9b94fa34baed0281"
      },
      "downloads": -1,
      "filename": "fact_test_001-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d4a63a320403092a6c83f4055027ecdf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10329,
      "upload_time": "2021-07-27T13:56:16",
      "upload_time_iso_8601": "2021-07-27T13:56:16.271724Z",
      "url": "https://files.pythonhosted.org/packages/43/80/5b3c6fa31d3840a8a5a9c6f52be81a737974c8f60be10f5d4b6c802adb03/fact_test_001-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4462c0f83ab826b9cf73c5c5f14c99f1295814ede48a18e7b6da8f59ca148d4d",
        "md5": "925eb3b9acfed306f6568701f485a744",
        "sha256": "28462c1eab6a485357c16a994a347b37ff55d9484c45c4cbdc362f4d78a89127"
      },
      "downloads": -1,
      "filename": "fact_test_001-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "925eb3b9acfed306f6568701f485a744",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18792,
      "upload_time": "2021-07-27T13:56:17",
      "upload_time_iso_8601": "2021-07-27T13:56:17.635583Z",
      "url": "https://files.pythonhosted.org/packages/44/62/c0f83ab826b9cf73c5c5f14c99f1295814ede48a18e7b6da8f59ca148d4d/fact_test_001-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}