{
  "info": {
    "author": "Sterling Baird",
    "author_email": "sterling.baird@utah.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python"
    ],
    "description": "[![Project generated with PyScaffold](https://img.shields.io/badge/-PyScaffold-005CA0?logo=pyscaffold)](https://pyscaffold.org/)\n<!-- These are examples of badges you might also want to add to your README. Update the URLs accordingly.\n[![Built Status](https://api.cirrus-ci.com/github/<USER>/matsci-opt-benchmarks.svg?branch=main)](https://cirrus-ci.com/github/<USER>/matsci-opt-benchmarks)\n[![ReadTheDocs](https://readthedocs.org/projects/matsci-opt-benchmarks/badge/?version=latest)](https://matsci-opt-benchmarks.readthedocs.io/en/stable/)\n[![Coveralls](https://img.shields.io/coveralls/github/<USER>/matsci-opt-benchmarks/main.svg)](https://coveralls.io/r/<USER>/matsci-opt-benchmarks)\n[![PyPI-Server](https://img.shields.io/pypi/v/matsci-opt-benchmarks.svg)](https://pypi.org/project/matsci-opt-benchmarks/)\n[![Conda-Forge](https://img.shields.io/conda/vn/conda-forge/matsci-opt-benchmarks.svg)](https://anaconda.org/conda-forge/matsci-opt-benchmarks)\n[![Monthly Downloads](https://pepy.tech/badge/matsci-opt-benchmarks/month)](https://pepy.tech/project/matsci-opt-benchmarks)\n[![Twitter](https://img.shields.io/twitter/url/http/shields.io.svg?style=social&label=Twitter)](https://twitter.com/matsci-opt-benchmarks)\n-->\n\n# matsci-opt-benchmarks (WIP)\n\n> A collection of benchmarking problems and datasets for testing the performance of\n> advanced optimization algorithms in the field of materials science and chemistry for a\n> variety of \"hard\" problems involving one or several of: constraints, heteroskedasticity,\n> multiple objectives, multiple fidelities, and high-dimensionality.\n\nThere are already materials-science-specific resources related to datasets, surrogate models, and benchmarks out there:\n- [Matbench](https://github.com/materialsproject/matbench) focuses on materials property\nprediction using composition and/or crystal structure\n- [Olympus](https://github.com/aspuru-guzik-group/olympus) focuses on small datasets\ngenerated via experimental self-driving laboratories\n- [Foundry](https://github.com/MLMI2-CSSI/foundry) focuses on delivering ML-ready datasets in materials science and chemistry\n- [Matbench-genmetrics](https://github.com/sparks-baird/matbench-genmetrics) focuses on generative modeling for crystal\nstructure using metrics inspired by [guacamol](https://www.benevolent.com/guacamol) and\n[CDVAE](https://github.com/txie-93/cdvae)\n\nIn March 2021, [pymatgen](https://github.com/materialsproject/pymatgen) reorganized the\ncode into [namespace\npackages](https://packaging.python.org/en/latest/guides/packaging-namespace-packages/),\nwhich makes it easier to distribute a collection of related subpackages and modules\nunder an umbrella project. Tangent to that, [PyScaffold](https://pyscaffold.org/) is a project generator for high-quality Python\npackages, ready to be shared on PyPI and installable via pip; coincidentally,\nit also supports namespace package configurations. My plan for this\nrepository is to host\n`pip`-installable packages that allow for loading datasets, surrogate\nmodels, and benchmarks for recent manuscripts I've\nwritten. It is primarily intended as a convenience for me, with a secondary benefit of\nadding value to the community. I will look into hosting the datasets via Foundry and\nusing the surrogate model API via Olympus. I will likely do logging to a\n[MongoDB](https://www.mongodb.com/)\ndatabase via [Atlas](https://www.mongodb.com/cloud/atlas) and later take a snapshot of\nthe dataset for Foundry. Initially, I will probably use a basic [scikit-learn](https://scikit-learn.org/) model, such\nas\n[RandomForestRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html)\nor [GradientBoostingRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingRegressor.html),\nalong with cross-validated hyperparameter optimization via\n[RandomizedSearchCV](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.RandomizedSearchCV.html)\nor\n[HalvingRandomSearchCV](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.HalvingRandomSearchCV.html)\nfor the surrogate model.\n\nWhat will really differentiate the contribution of this\nrepository is *the modeling of heteroskedastic noise*, where the noise variance\ncan be a complex function of the input parameters. This is contrasted with\nhomoskedasticity, where the noise variance for a given parameter is fixed\n[[Wikipedia](https://en.wikipedia.org/wiki/Homoscedasticity_and_heteroscedasticity)].\n\nMy goal is to win a [\"Turing test\"](https://en.wikipedia.org/wiki/Turing_test)\nof sorts for the surrogate model, where the model is indistinguishable from the true,\nunderlying objective function.\n\nTo accomplish this, I plan to:\n- run ~10 repeats for every set of parameters and fit separate models for quantiles\n  of the noise distribution\n- Get a large enough quasi-random sampling of the search space to accurately model intricate interactions between parameters (i.e. the response surface)\n- Train a classification model that short-circuits the regression model: return NaN\n  values for inaccessible regions of objective functions and return the regression\n  model values for accessible regions\n\n\nMy plans for implementation include:\n- packing fraction of a random 3D packing of spheres as a function of the number of\n  spheres, 6 parameters that define three separate truncated log-normal\n  distributions, and 3 parameters that define the weight fractions\n  [[code](https://github.com/sparks-baird/bayes-opt-particle-packing)]\n  [[paper1](https://github.com/sparks-baird/bayes-opt-particle-packing/blob/main/paper/main.pdf)] [[paper2](https://doi.org/10.26434/chemrxiv-2023-fjjk7)] [[data ![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.7513019.svg)](https://doi.org/10.5281/zenodo.7513019)]\n- discrete intensity vs. wavelength spectra (measured experimentally via a\n  spectrophotometer) as a function of red, green, and blue LED powers and three sensor\n  settings: number of integration steps, integration time per step, and signal gain\n  [[code](https://github.com/sparks-baird/self-driving-lab-demo)]\n  [[paper](https://doi.org/10.1016/j.matt.2022.11.007)]\n- Two error metrics (RMSE and MAE) and two hardware performance metrics (runtime and\n  memory) of a [CrabNet](https://github.com/sparks-baird/CrabNet) regression model\n  trained on [the Matbench experimental band gap dataset](https://matbench.materialsproject.org/Leaderboards%20Per-Task/matbench_v0.1_matbench_expt_gap/)\n  as a function of 23 CrabNet hyperparameters\n  [[code](https://github.com/sparks-baird/crabnet-hyperparameter)]\n  [[paper](https://doi.org/10.1016/j.commatsci.2022.111505)]\n\n\n## Installation\n\nIn order to set up the necessary environment:\n\n1. review and uncomment what you need in `environment.yml` and create an environment `matsci-opt-benchmarks` with the help of [conda]:\n   ```\n   conda env create -f environment.yml\n   ```\n2. activate the new environment with:\n   ```\n   conda activate matsci-opt-benchmarks\n   ```\n\n> **_NOTE:_**  The conda environment will have matsci-opt-benchmarks installed in editable mode.\n> Some changes, e.g. in `setup.cfg`, might require you to run `pip install -e .` again.\n\n\nOptional and needed only once after `git clone`:\n\n3. install several [pre-commit] git hooks with:\n   ```bash\n   pre-commit install\n   # You might also want to run `pre-commit autoupdate`\n   ```\n   and checkout the configuration under `.pre-commit-config.yaml`.\n   The `-n, --no-verify` flag of `git commit` can be used to deactivate pre-commit hooks temporarily.\n\n4. install [nbstripout] git hooks to remove the output cells of committed notebooks with:\n   ```bash\n   nbstripout --install --attributes notebooks/.gitattributes\n   ```\n   This is useful to avoid large diffs due to plots in your notebooks.\n   A simple `nbstripout --uninstall` will revert these changes.\n\n\nThen take a look into the `scripts` and `notebooks` folders.\n\n## Dependency Management & Reproducibility\n\n1. Always keep your abstract (unpinned) dependencies updated in `environment.yml` and eventually\n   in `setup.cfg` if you want to ship and install your package via `pip` later on.\n2. Create concrete dependencies as `environment.lock.yml` for the exact reproduction of your\n   environment with:\n   ```bash\n   conda env export -n matsci-opt-benchmarks -f environment.lock.yml\n   ```\n   For multi-OS development, consider using `--no-builds` during the export.\n3. Update your current environment with respect to a new `environment.lock.yml` using:\n   ```bash\n   conda env update -f environment.lock.yml --prune\n   ```\n## Project Organization\n\n```\n├── AUTHORS.md              <- List of developers and maintainers.\n├── CHANGELOG.md            <- Changelog to keep track of new features and fixes.\n├── CONTRIBUTING.md         <- Guidelines for contributing to this project.\n├── Dockerfile              <- Build a docker container with `docker build .`.\n├── LICENSE.txt             <- License as chosen on the command-line.\n├── README.md               <- The top-level README for developers.\n├── configs                 <- Directory for configurations of model & application.\n├── data\n│   ├── external            <- Data from third party sources.\n│   ├── interim             <- Intermediate data that has been transformed.\n│   ├── processed           <- The final, canonical data sets for modeling.\n│   └── raw                 <- The original, immutable data dump.\n├── docs                    <- Directory for Sphinx documentation in rst or md.\n├── environment.yml         <- The conda environment file for reproducibility.\n├── models                  <- Trained and serialized models, model predictions,\n│                              or model summaries.\n├── notebooks               <- Jupyter notebooks. Naming convention is a number (for\n│                              ordering), the creator's initials and a description,\n│                              e.g. `1.0-fw-initial-data-exploration`.\n├── pyproject.toml          <- Build configuration. Don't change! Use `pip install -e .`\n│                              to install for development or to build `tox -e build`.\n├── references              <- Data dictionaries, manuals, and all other materials.\n├── reports                 <- Generated analysis as HTML, PDF, LaTeX, etc.\n│   └── figures             <- Generated plots and figures for reports.\n├── scripts                 <- Analysis and production scripts which import the\n│                              actual PYTHON_PKG, e.g. train_model.\n├── setup.cfg               <- Declarative configuration of your project.\n├── setup.py                <- [DEPRECATED] Use `python setup.py develop` to install for\n│                              development or `python setup.py bdist_wheel` to build.\n├── src\n│   └── particle_packing    <- Actual Python package where the main functionality goes.\n│   └── crabnet_hyperparameter <- Actual Python package where the main functionality goes.\n├── tests                   <- Unit tests which can be run with `pytest`.\n├── .coveragerc             <- Configuration for coverage reports of unit tests.\n├── .isort.cfg              <- Configuration for git hook that sorts imports.\n└── .pre-commit-config.yaml <- Configuration of pre-commit git hooks.\n```\n\n<!-- pyscaffold-notes -->\n\n## Note\n\nThis project has been set up using [PyScaffold] 4.3.1 and the [dsproject extension] 0.7.2.\n\n[conda]: https://docs.conda.io/\n[pre-commit]: https://pre-commit.com/\n[Jupyter]: https://jupyter.org/\n[nbstripout]: https://github.com/kynan/nbstripout\n[Google style]: http://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings\n[PyScaffold]: https://pyscaffold.org/\n[dsproject extension]: https://github.com/pyscaffold/pyscaffoldext-dsproject\n",
    "description_content_type": "text/markdown; charset=UTF-8; variant=GFM",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sparks-baird/matsci-opt-benchmarks",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matsci-opt-benchmarks",
    "package_url": "https://pypi.org/project/matsci-opt-benchmarks/",
    "platform": "any",
    "project_url": "https://pypi.org/project/matsci-opt-benchmarks/",
    "project_urls": {
      "Documentation": "https://matsci-opt-benchmarks.readthedocs.io",
      "Homepage": "https://github.com/sparks-baird/matsci-opt-benchmarks",
      "Source": "https://github.com/sparks-baird/matsci-opt-benchmarks"
    },
    "release_url": "https://pypi.org/project/matsci-opt-benchmarks/0.2.2/",
    "requires_dist": [
      "numpy",
      "pandas",
      "scipy",
      "cloudpickle",
      "requests",
      "crabnet (==2.0.8)",
      "matbench",
      "torch",
      "zenodo-client",
      "ray[tune]",
      "kaleido",
      "importlib-metadata ; python_version < \"3.8\"",
      "setuptools ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "A collection of benchmarking problems and datasets for testing the performance of advanced optimization algorithms in the field of materials science and chemistry.",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17149401,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6de25b3826cc904f804dbf70ada95249395401ca8041104272839e8f82780910",
          "md5": "f6441f2ed89173eafc4bc2136a52f289",
          "sha256": "f50eb58137486f81cdb07025429312d39d0d26d3deb58e4c7e3fce25d413d17f"
        },
        "downloads": -1,
        "filename": "matsci_opt_benchmarks-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6441f2ed89173eafc4bc2136a52f289",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 525472,
        "upload_time": "2023-03-01T05:30:09",
        "upload_time_iso_8601": "2023-03-01T05:30:09.074959Z",
        "url": "https://files.pythonhosted.org/packages/6d/e2/5b3826cc904f804dbf70ada95249395401ca8041104272839e8f82780910/matsci_opt_benchmarks-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5122fbdc110e078532ce5c4584bc7129edf055f28b7129e646d15f3d41cd8519",
          "md5": "5ddf15dcda8cbbda7159597d454257c8",
          "sha256": "ac843697ce27586004505a51fb3b1844dbad6f75fdc4c9a3e45899d21cddadfc"
        },
        "downloads": -1,
        "filename": "matsci-opt-benchmarks-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5ddf15dcda8cbbda7159597d454257c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35130448,
        "upload_time": "2023-03-01T05:30:13",
        "upload_time_iso_8601": "2023-03-01T05:30:13.124771Z",
        "url": "https://files.pythonhosted.org/packages/51/22/fbdc110e078532ce5c4584bc7129edf055f28b7129e646d15f3d41cd8519/matsci-opt-benchmarks-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "671b037631878692b6590cab74d9f2a7fd96a52e5cd74c731e89f9d3000a59fe",
          "md5": "68e273bc136568ab2818d18a63a23bfc",
          "sha256": "6afad4b7dccb467c82e1f2f38ad4da5b27effe90678c93a70aa0aa5787cbc8d3"
        },
        "downloads": -1,
        "filename": "matsci_opt_benchmarks-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68e273bc136568ab2818d18a63a23bfc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 525469,
        "upload_time": "2023-03-03T04:50:53",
        "upload_time_iso_8601": "2023-03-03T04:50:53.861477Z",
        "url": "https://files.pythonhosted.org/packages/67/1b/037631878692b6590cab74d9f2a7fd96a52e5cd74c731e89f9d3000a59fe/matsci_opt_benchmarks-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cc799c452488c4a424c00e8e010d4cead2ff3dcff05fe72176e59018ea5dc56",
          "md5": "d5b6e9a16e5319aa2c7926a5c964282c",
          "sha256": "a6eadbb7a5cf6dd18b6058285e7b4031b9e7f25f9ad01f2ef468fdc67876bd91"
        },
        "downloads": -1,
        "filename": "matsci-opt-benchmarks-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d5b6e9a16e5319aa2c7926a5c964282c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37809895,
        "upload_time": "2023-03-03T04:50:57",
        "upload_time_iso_8601": "2023-03-03T04:50:57.371799Z",
        "url": "https://files.pythonhosted.org/packages/2c/c7/99c452488c4a424c00e8e010d4cead2ff3dcff05fe72176e59018ea5dc56/matsci-opt-benchmarks-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94ddf6534bdbd87291ccd0dddd2e73575085584efe25a46aa79079208f2f18e3",
          "md5": "203318a58e1bba2d59da5c1d6a8b8d84",
          "sha256": "1c881a3fee7eb93b88d65dee258d28d7837ab3b757b7567cd5cfe6cbe09ea2ae"
        },
        "downloads": -1,
        "filename": "matsci_opt_benchmarks-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "203318a58e1bba2d59da5c1d6a8b8d84",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 525473,
        "upload_time": "2023-03-03T21:03:49",
        "upload_time_iso_8601": "2023-03-03T21:03:49.921683Z",
        "url": "https://files.pythonhosted.org/packages/94/dd/f6534bdbd87291ccd0dddd2e73575085584efe25a46aa79079208f2f18e3/matsci_opt_benchmarks-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c12c93eeaea0fc19cc23bda5d53d0a3b69e438e9ce3cd215da68cbe160e4a357",
          "md5": "7f027dd9210e09b9cd2a324cc893a154",
          "sha256": "8adbe31e1dcf6cfa53388c4bc549028d8011802234f4da64aa9d3373c0ff9f2b"
        },
        "downloads": -1,
        "filename": "matsci-opt-benchmarks-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7f027dd9210e09b9cd2a324cc893a154",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38696890,
        "upload_time": "2023-03-03T21:03:53",
        "upload_time_iso_8601": "2023-03-03T21:03:53.298143Z",
        "url": "https://files.pythonhosted.org/packages/c1/2c/93eeaea0fc19cc23bda5d53d0a3b69e438e9ce3cd215da68cbe160e4a357/matsci-opt-benchmarks-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94ddf6534bdbd87291ccd0dddd2e73575085584efe25a46aa79079208f2f18e3",
        "md5": "203318a58e1bba2d59da5c1d6a8b8d84",
        "sha256": "1c881a3fee7eb93b88d65dee258d28d7837ab3b757b7567cd5cfe6cbe09ea2ae"
      },
      "downloads": -1,
      "filename": "matsci_opt_benchmarks-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "203318a58e1bba2d59da5c1d6a8b8d84",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 525473,
      "upload_time": "2023-03-03T21:03:49",
      "upload_time_iso_8601": "2023-03-03T21:03:49.921683Z",
      "url": "https://files.pythonhosted.org/packages/94/dd/f6534bdbd87291ccd0dddd2e73575085584efe25a46aa79079208f2f18e3/matsci_opt_benchmarks-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c12c93eeaea0fc19cc23bda5d53d0a3b69e438e9ce3cd215da68cbe160e4a357",
        "md5": "7f027dd9210e09b9cd2a324cc893a154",
        "sha256": "8adbe31e1dcf6cfa53388c4bc549028d8011802234f4da64aa9d3373c0ff9f2b"
      },
      "downloads": -1,
      "filename": "matsci-opt-benchmarks-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7f027dd9210e09b9cd2a324cc893a154",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 38696890,
      "upload_time": "2023-03-03T21:03:53",
      "upload_time_iso_8601": "2023-03-03T21:03:53.298143Z",
      "url": "https://files.pythonhosted.org/packages/c1/2c/93eeaea0fc19cc23bda5d53d0a3b69e438e9ce3cd215da68cbe160e4a357/matsci-opt-benchmarks-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}