{
  "info": {
    "author": "Jin BENIYAMA",
    "author_email": "beniyama@ioa.s.u-tokyo.ac.jp",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# TriCCS Data Reduction (TDR)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n[developer mail](<mailto:beniyama@ioa.s.u-tokyo.ac.jp>)\n\n\n## Overview\nData reduction of data taken with Seimei/TriCCS could be done in this repository.  \nThough optimized for Seimei/TriCCS, \nyou can apply it for imaging data taken with other high-speed cameras\n(Tomo-e Gozen etc.).\n\n### Procedures\n1. Calibration (dark subtraction, flat-field correction)\n\n\n2. Stacking fits by mean, median, etc.\n\n\n3. Splitting fits\n(only for photometry using `Moving Object Photometry (movphot)` ([bitbucket](https://bitbucket.org/jin_beniyama/movphot/src/master/)) )\n\n4. Common ID search\n\n## Installing\n```\n# Install from PyPI\npip install tdr\n```\nor\n```\n# Install with `setup.py`\ngit clone https://jin_beniyama@bitbucket.org/jin_beniyama/triccs-data-reduction.git\npython setup.py install\n```\n\n\n## Usage\nHere g-band data taken with Seimei/TriCCS is considered.\nAll band data could be analyzed in the same way.\n\nFits data taken with TriCCS have a format like `TRCS00005180.fits`.\n\nFirst 4 characters `TRCS` means the instrument *TriCCS*,\nthe next 7 characters are the exposure ID \n\nand the last 1 character is band identical number \n(`0` for g-band, `1` for r-band and `2` for i/z-band).\n\nAfter each reduction stage, a prefix is added to the filename.\nHistory can be checked in fits header as well.\n\n\n### 1. Calibration\nHere, consider the situation:\nexposure time for an object frame is 10 s,\nfor a flat frame is 1 s,\nand for dark frames are 1s and 10s (all in g-band) \nlike below.\n\n1. object `TRCS00000010.fits` (10 s)\n2. dark for flat `TRCS00000020.fits` (1s)\n3. dark for object `TRCS00000030.fits` (10s)\n4. flat `TRCS00000040.fits` (1s)\n\nDark subtraction and flat-field correction are done as follows.\n\n\nFirst, create master dark frame, which has prefix `d` like `dTRCS00000020.fits`.\n\nThe maximum count frame is not used for stacking,\nwhich leads to avoiding cosmic rays or fast-moving object contamination.\n```\n[usage]\n# Create master dark\nmakedark (3-d dark)\n\n[example]\n# Create master dark for flat\nmakedark TRCS00000020.fits\n# Create master dark for object\nmakedark TRCS00000030.fits\n```\n\nNext, create a master normalized flat frame using master dark for a flat frame.\n, which has prefix `f` like `fTRCS00000040.fits`.\n\nThe maximum count frame is not used for stacking as well.\n\n```\n[usage]\n# Create master flat\nmakeflat --flat (3-d flat) --dark (2-d master dark)\n\n[example]\n# Create master flat\nmakeflat --flat TRCS00000040.fits --dark dTRCS00000020.fits\n```\n\nFinally, reduce an object frame using both master dark and flat frames. \n\nThe reduced object frame has prefix `r` like `rTRCS00000010.fits`.\n\n```\n[usage]\n# Do dark subtraction and flat-field correction\nreduce --obj (3-d object) --dark (2-d master dark) --flat (2-d master flat)\n\n[example]\n# Do dark subtraction and flat-field correction\nreduce --obj TRCS00000010.fits --dark dTRCS00000020.fits --flat fTRCS00000040.fits\n```\n\n### 2. Stacking\nOutput fits have format like \n`maxrTRCS00000010.fits` (max),\n`minrTRCS00000010.fits` (min),\n`meanrTRCS00000010.fits` (mean) and\n`medianrTRCS00000010.fits` (median).\n\n```\n[usage]\n# Maximum stacking\nstackfits (3-d reduced fits) max\n# Minimum stacking\nstackfits (3-d reduced fits) min\n# Mean stacking\nstackfits (3-d reduced fits) mean\n# Median stacking\nstackfits (3-d reduced fits) median\n\n[example]\n# Maximum stacking\nstackfits rTRCS00000010.fits  max\n# Minimum stacking\nstackfits rTRCS00000010.fits  min\n# Mean stacking\nstackfits rTRCS00000010.fits  mean\n# Median stacking\nstackfits rTRCS00000010.fits  median\n```\n\n### 3. Splitting [in preparation]\nIf you are going to use `Moving Object Photometry (movphot)`[(bitbucket)](https://bitbucket.org/jin_beniyama/movphot/src/master/) for photometry,\n3-d fits cube should be split into multiple 2-d fits.\n\n```\n[usage]\n# Mask pixels and split fits into multiple 2-d fits\nmask_split (3-d fits)\n\n[example]\n# Mask pixels and split fits to multiple 2-d fits\nmask_split rTRCS00000010.fits\n```\nOutput fits are as follows (when the number of frames is 3).\nThe masked and splitted frames hav suffix `ms` like `rTRCS00000010ms0001.fits`.\n\n\n### 4. Common ID search\nIf the wcs pasting failed for some fits,\nit is necessary to extract common ID fits.\n\n\n```\n[example]\n# Extract common fits ID from g,r,i bands list (glist.txt, rlist.txt, ilist.txt)\ncat glist.txt | awk '{print substr($0,17,3)}' > gID.txt\ncat rlist.txt | awk '{print substr($0,17,3)}' > rID.txt\ncat ilist.txt | awk '{print substr($0,17,3)}' > iID.txt\n# Create common ID list \ncommonIDsearch gID.txt rID.txt iID.txt --pre rTRCS00001260ce0 \n--post w.fits > glist_common.txt\n```\n\n## Dependencies\nThis library is depending on `NumPy`.\nScripts are developed on `Python 3.7.10` and `NumPy 1.19.2`.\n\n\n## LICENCE\nThis software is released under the MIT License.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/jin_beniyama/triccs-data-reduction/src/master/",
    "keywords": "",
    "license": "",
    "maintainer": "Jin BENIYAMA",
    "maintainer_email": "beniyama@ioa.s.u-tokyo.ac.jp",
    "name": "tdr",
    "package_url": "https://pypi.org/project/tdr/",
    "platform": "",
    "project_url": "https://pypi.org/project/tdr/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/jin_beniyama/triccs-data-reduction/src/master/"
    },
    "release_url": "https://pypi.org/project/tdr/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "TriCCS Data Reduction",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11058439,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa67aa675dc8187483499a082c6e56ace9abd2a13823c79fa9cfe81c661a54aa",
          "md5": "a218128ba0cc1af3df0890bfe81f788e",
          "sha256": "8943fd1535a884ceef75510191db1b7763c909f401d00852e06fb14aec4e575c"
        },
        "downloads": -1,
        "filename": "tdr-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a218128ba0cc1af3df0890bfe81f788e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11436,
        "upload_time": "2021-07-31T15:06:22",
        "upload_time_iso_8601": "2021-07-31T15:06:22.621595Z",
        "url": "https://files.pythonhosted.org/packages/aa/67/aa675dc8187483499a082c6e56ace9abd2a13823c79fa9cfe81c661a54aa/tdr-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa67aa675dc8187483499a082c6e56ace9abd2a13823c79fa9cfe81c661a54aa",
        "md5": "a218128ba0cc1af3df0890bfe81f788e",
        "sha256": "8943fd1535a884ceef75510191db1b7763c909f401d00852e06fb14aec4e575c"
      },
      "downloads": -1,
      "filename": "tdr-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a218128ba0cc1af3df0890bfe81f788e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11436,
      "upload_time": "2021-07-31T15:06:22",
      "upload_time_iso_8601": "2021-07-31T15:06:22.621595Z",
      "url": "https://files.pythonhosted.org/packages/aa/67/aa675dc8187483499a082c6e56ace9abd2a13823c79fa9cfe81c661a54aa/tdr-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}