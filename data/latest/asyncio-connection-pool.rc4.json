{
  "info": {
    "author": "Patrick Gingras <775.pg.12@gmail.com>",
    "author_email": "775.pg.12@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# asyncio-connection-pool\n\n[![GitHub Workflow Status (main)](https://img.shields.io/github/workflow/status/fellowinsights/asyncio-connection-pool/CI/main?style=plastic)][main CI]\n[![PyPI](https://img.shields.io/pypi/v/asyncio-connection-pool?style=plastic)][package]\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/asyncio-connection-pool?style=plastic)][package]\n\n[main CI]: https://github.com/fellowinsights/asyncio-connection-pool/actions?query=workflow%3ACI+branch%3Amain\n[package]: https://pypi.org/project/asyncio-connection-pool/\n\nThis is a generic, high-throughput, optionally-burstable pool for asyncio.\n\nSome cool features:\n\n- No locking[^1]; no `asyncio.Lock` or `asyncio.Condition` needs to be taken in\n  order to get a connection.\n- Available connections are retrieved without yielding to the event loop.\n- When `burst_limit` is specified, `max_size` acts as a \"soft\" limit; the pool\n  can go beyond this limit to handle increased load, and shrinks back down\n  after.\n- The contents of the pool can be anything; just implement a\n  `ConnectionStrategy`.\n\n[^1]: Theoretically, there is an implicit \"lock\" that is held while an asyncio\n      task is executing. No other task can execute until the current task\n      yields (since it's cooperative multitasking), so any operations during\n      that time are atomic.\n\n## Why?\n\nWe were using a different pool for handling our Redis connections, and noticed\nthat, under heavy load, we would spend a lot of time waiting for the lock, even\nwhen there were available connections in the pool.\n\nWe also thought it would be nice if we didn't need to keep many connections\nopen when they weren't needed, but still have the ability to make more when\nthey are required.\n\n\n## API\n\n\n### `asyncio_connection_pool.ConnectionPool`\n\nThis is the implementation of the pool. It is generic over a type of\nconnection, and all implementation-specific logic is contained within a\n[`ConnectionStrategy`](#asyncio_connection_poolconnectionstrategy).\n\nA pool is created as follows:\n\n```python\nfrom asyncio_connection_pool import ConnectionPool\n\npool = ConnectionPool(strategy=my_strategy, max_size=15)\n```\n\nThe constructor can optionally be passed an integer as `burst_limit`. This\nallows the pool to open more connections than `max_size` temporarily.\n\n\n#### `@asynccontextmanager async def get_connection(self) -> AsyncIterator[Conn]`\n\nThis method is the only way to get a connection from the pool. It is expected\nto be used as follows:\n\n```python\npool = ConnectionPool(...)\n\nasync with pool.get_connection() as conn:\n    # Use the connection\n    pass\n```\n\nWhen the `async with` block is entered, a connection is retrieved. If a\nconnection needs to be opened or if the pool is at capacity and no connections\nare available, the caller will yield to the event loop.\n\nWhen the block is exited, the connection will be returned to the pool.\n\n\n### `asyncio_connection_pool.ConnectionStrategy`\n\nThis is an abstract class that defines the interface of the object passed as\n`strategy`. A subclass _must_ implement the following methods:\n\n\n#### `async def create_connection(self) -> Awaitable[Conn]`\n\nThis method is called to create a new connection to the resource. This happens\nwhen a connection is requested and all connections are in use, as long as the\npool is not at capacity.\n\nThe result of a call to this method is what will be provided to a consumer of\nthe pool, and in most cases will be stored in the pool to be re-used later.\n\nIf this method raises an exception, it will bubble up to the frame where\n`ConnectionPool.get_connection()` was called.\n\n\n#### `def connection_is_closed(self, conn: Conn) -> bool`\n\nThis method is called to check if a connection is no longer able to be used.\nWhen the pool is retrieving a connection to give to a client, this method is\ncalled to make sure it is valid.\n\nThe return value should be `True` if the connection is _not_ valid.\n\nIf this method raises an exception, it is assumed that the connection is\ninvalid. The passed-in connection is dropped and a new one is retrieved. The\nexception is suppressed unless it is not a `BaseException`, like\n`asyncio.CancelledError`. It is the responsibility of the `ConnectionStrategy`\nimplementation to avoid leaking a connection in this case.\n\n\n#### `async def close_connection(self, conn: Conn)`\n\nThis method is called to close a connection. This occurs when the pool has\nexceeded `max_size` (i.e. it is bursting) and a connection is returned that is\nno longer needed (i.e. there are no more consumers waiting for a connection).\n\nIf this method raises an exception, the connection is assumed to be closed and\nthe exception bubbles to the caller of `ConnectionPool.get_connection().__aexit__`\n(usually an `async with` block).\n\n\n## Integrations  with 3rd-party libraries\n\nThis package includes support for [`ddtrace`][ddtrace]/[`datadog`][datadog] and\nfor [`aioredis`][aioredis] (<2.0.0).\n\n[ddtrace]: https://github.com/datadog/dd-trace-py\n[datadog]: https://github.com/datadog/datadogpy\n[aioredis]: https://github.com/aio-libs/aioredis\n\n### `asyncio_connection_pool.contrib.datadog.ConnectionPool`\n\nThis class subclasses the `ConnectionPool` in the root of the package, and adds\na bunch of tracing, gauges, and events. The constructor, in addition to the\narguments of the base class, supports:\n\n- Required `service_name` argument: A prefix to all of the metrics\n- Optional `extra_tags` argument: Additional tags to provide to all metrics\n  (strings in a `\"key:value\"` format)\n\n\n### `asyncio_connection_pool.contrib.aioredis.RedisConnectionStrategy`\n\nThis class implements the `ConnectionStrategy` abstract methods, using\n`aioredis.Redis` objects as connections. The constructor takes arbitrary\narguments and forwards them to `aioredis.create_redis`.\n\n\n## How is this safe without locks?\n\nI encourage you to read the [source](https://github.com/fellowinsights/asyncio-connection-pool/blob/master/asyncio_connection_pool/__init__.py)\nto find out (it is quite well-commented). If you notice any faults in the\nlogic, please feel free to file an issue.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fellowinsights/asyncio-connection-pool",
    "keywords": "asyncio",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asyncio-connection-pool",
    "package_url": "https://pypi.org/project/asyncio-connection-pool/",
    "platform": "",
    "project_url": "https://pypi.org/project/asyncio-connection-pool/",
    "project_urls": {
      "Homepage": "https://github.com/fellowinsights/asyncio-connection-pool"
    },
    "release_url": "https://pypi.org/project/asyncio-connection-pool/0.2.0/",
    "requires_dist": [
      "aioredis ; extra == 'aioredis'",
      "ddtrace ; extra == 'datadog'",
      "datadog ; extra == 'datadog'"
    ],
    "requires_python": ">=3.8",
    "summary": "A high-throughput, optionally-burstable pool free of explicit locking",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12365135,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ca9e42c1a8e60f978eb855f787314b1d2a793516e4d14476284a13782649f05",
          "md5": "2e7535d6fd9eeacaa6de5c8287882b56",
          "sha256": "d01b7e49fcd57ab777dedcfb72159702f96a890e452ea0f471a80768110418e0"
        },
        "downloads": -1,
        "filename": "asyncio_connection_pool-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e7535d6fd9eeacaa6de5c8287882b56",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 4115,
        "upload_time": "2020-12-08T03:05:50",
        "upload_time_iso_8601": "2020-12-08T03:05:50.664175Z",
        "url": "https://files.pythonhosted.org/packages/5c/a9/e42c1a8e60f978eb855f787314b1d2a793516e4d14476284a13782649f05/asyncio_connection_pool-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7768ae88fd73c1fdacf44a7f9519e780ca4f85627fdc1d4da1dd7c0719c4cdc8",
          "md5": "e4d5e413f6a2a2e4c9f49e1b9996bc59",
          "sha256": "39b851e17fe6534003b433d5fe7fc85d69239f62c5005ccb129e2e5bb54431fc"
        },
        "downloads": -1,
        "filename": "asyncio-connection-pool-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e4d5e413f6a2a2e4c9f49e1b9996bc59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 11940,
        "upload_time": "2020-12-08T03:05:51",
        "upload_time_iso_8601": "2020-12-08T03:05:51.785219Z",
        "url": "https://files.pythonhosted.org/packages/77/68/ae88fd73c1fdacf44a7f9519e780ca4f85627fdc1d4da1dd7c0719c4cdc8/asyncio-connection-pool-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22fc1826cded2a801a33264a128fc7530e1fffac145276e94ddfc2daf3a599ff",
          "md5": "7f64287791f81d9a6d3daac2f2dfdfc7",
          "sha256": "0bc3259d8f46bf6a3cfb6219ca72eaf0003b6c6fb45df276fbbf4b735397103a"
        },
        "downloads": -1,
        "filename": "asyncio_connection_pool-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f64287791f81d9a6d3daac2f2dfdfc7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 4647,
        "upload_time": "2020-12-08T03:46:41",
        "upload_time_iso_8601": "2020-12-08T03:46:41.966529Z",
        "url": "https://files.pythonhosted.org/packages/22/fc/1826cded2a801a33264a128fc7530e1fffac145276e94ddfc2daf3a599ff/asyncio_connection_pool-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddf10503a17f4df90fb02411a3b99e369bfaba40d815045657e9cc5f79e1879b",
          "md5": "c3fc30244e81158663c31ff16d6540be",
          "sha256": "134ad30dfbc82fd085196dce68012fb308bb720e37ea4c281cffcf1e50d7ae7b"
        },
        "downloads": -1,
        "filename": "asyncio-connection-pool-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c3fc30244e81158663c31ff16d6540be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14188,
        "upload_time": "2020-12-08T03:46:42",
        "upload_time_iso_8601": "2020-12-08T03:46:42.933144Z",
        "url": "https://files.pythonhosted.org/packages/dd/f1/0503a17f4df90fb02411a3b99e369bfaba40d815045657e9cc5f79e1879b/asyncio-connection-pool-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a39b72b4a93f697497d9f7f9717af7b0f37d3ac362e52b4fe360046a90c0454",
          "md5": "bae47b1ec994d8e7797d049472647754",
          "sha256": "9c4195aa7af4f184f97cdb8d7b495418c9286bd42dc7b1e3c458ac54549185d4"
        },
        "downloads": -1,
        "filename": "asyncio_connection_pool-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bae47b1ec994d8e7797d049472647754",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9410,
        "upload_time": "2020-12-08T15:32:58",
        "upload_time_iso_8601": "2020-12-08T15:32:58.622326Z",
        "url": "https://files.pythonhosted.org/packages/4a/39/b72b4a93f697497d9f7f9717af7b0f37d3ac362e52b4fe360046a90c0454/asyncio_connection_pool-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f8ca0988a2d5ba1a14defc8e144b8ab4b66e899632e2bdeeb88e653df9b823f",
          "md5": "37e29d877ecaf0e3a09b0e79e8c3a436",
          "sha256": "0ff73ace9a5c55a853257be4e98d3a87a9f5f377fb324dfce51efbbd057c0430"
        },
        "downloads": -1,
        "filename": "asyncio-connection-pool-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "37e29d877ecaf0e3a09b0e79e8c3a436",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14156,
        "upload_time": "2020-12-08T15:32:59",
        "upload_time_iso_8601": "2020-12-08T15:32:59.345183Z",
        "url": "https://files.pythonhosted.org/packages/7f/8c/a0988a2d5ba1a14defc8e144b8ab4b66e899632e2bdeeb88e653df9b823f/asyncio-connection-pool-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76fd6bb1eef4e37529810982b821d14b27b40bd5f310df32ec9307b4a98cb1e9",
          "md5": "8d6d5099e5d761105b2ef82cb5f3c4d4",
          "sha256": "185de223b2c3c0d0ebb84f39476e5448c8d0b6e67c83da5fbbd1e55e3a8171d0"
        },
        "downloads": -1,
        "filename": "asyncio_connection_pool-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d6d5099e5d761105b2ef82cb5f3c4d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9585,
        "upload_time": "2021-12-20T21:43:51",
        "upload_time_iso_8601": "2021-12-20T21:43:51.421990Z",
        "url": "https://files.pythonhosted.org/packages/76/fd/6bb1eef4e37529810982b821d14b27b40bd5f310df32ec9307b4a98cb1e9/asyncio_connection_pool-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c7221ed6d2f89f3261635c354116704db5beda4d3854a6738c69504efce77c8",
          "md5": "2d51bb0a111637deaced8265559fa21e",
          "sha256": "8609392ca60b0cd6784a52038386779f7bdda44b3a9d2c39016819368ea94065"
        },
        "downloads": -1,
        "filename": "asyncio-connection-pool-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2d51bb0a111637deaced8265559fa21e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14533,
        "upload_time": "2021-12-20T21:43:52",
        "upload_time_iso_8601": "2021-12-20T21:43:52.777786Z",
        "url": "https://files.pythonhosted.org/packages/3c/72/21ed6d2f89f3261635c354116704db5beda4d3854a6738c69504efce77c8/asyncio-connection-pool-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76fd6bb1eef4e37529810982b821d14b27b40bd5f310df32ec9307b4a98cb1e9",
        "md5": "8d6d5099e5d761105b2ef82cb5f3c4d4",
        "sha256": "185de223b2c3c0d0ebb84f39476e5448c8d0b6e67c83da5fbbd1e55e3a8171d0"
      },
      "downloads": -1,
      "filename": "asyncio_connection_pool-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8d6d5099e5d761105b2ef82cb5f3c4d4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 9585,
      "upload_time": "2021-12-20T21:43:51",
      "upload_time_iso_8601": "2021-12-20T21:43:51.421990Z",
      "url": "https://files.pythonhosted.org/packages/76/fd/6bb1eef4e37529810982b821d14b27b40bd5f310df32ec9307b4a98cb1e9/asyncio_connection_pool-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c7221ed6d2f89f3261635c354116704db5beda4d3854a6738c69504efce77c8",
        "md5": "2d51bb0a111637deaced8265559fa21e",
        "sha256": "8609392ca60b0cd6784a52038386779f7bdda44b3a9d2c39016819368ea94065"
      },
      "downloads": -1,
      "filename": "asyncio-connection-pool-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2d51bb0a111637deaced8265559fa21e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 14533,
      "upload_time": "2021-12-20T21:43:52",
      "upload_time_iso_8601": "2021-12-20T21:43:52.777786Z",
      "url": "https://files.pythonhosted.org/packages/3c/72/21ed6d2f89f3261635c354116704db5beda4d3854a6738c69504efce77c8/asyncio-connection-pool-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}