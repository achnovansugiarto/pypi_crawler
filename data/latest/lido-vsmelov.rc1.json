{
  "info": {
    "author": "Lido",
    "author_email": "info@lido.fi",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Lido\n\nThis library consolidates various functions to efficiently load network data for Lido, validate node operator keys and find key duplicates.\n\n## Installation\n\nThis library is available on PyPi:\n\n`pip install lido`\n\n## Main Features\n\n### Multicall Function Calls\n\nInstead of making network requests one-by-one, this library combines many requests into one RPC call. It uses [banteg/multicall.py](https://github.com/banteg/multicall.py), a Python wrapper for [makerdao/multicall](https://github.com/makerdao/multicall).\n\n### Multiprocess Signature Validations\n\nWhen using `validate_keys_multi()`, this library spreads processing of key signature validations to all system cores.\n\n### Automatic Testnet / Mainnet Switching\n\nDepending on the supplied WEB3_PROVIDER_URI, a correct network will be used. Even an appropriate ABI will be loaded for the chain automatically.\n\n## Helpers Provided\n\n- get_operators_data() -> operator_data - load node operator data\n\n- get_operators_keys(operator_data) -> operator_data - fetches and adds keys to operator_data\n- validate_keys_mono(operator_data) -> operator_data - validates keys in single process and adds validation results to operator_data\n- validate_keys_multi(operator_data) -> operator_data - validates keys in multiple processes and adds validation results to operator_data, requires a main function (see example)\n- validate_key([[key,depositSignature]]) -> Boolean - low-level validation function\n- find_duplicates(operator_data) -> operator_data - finds duplicate keys and adds results to operator_data\n\n- fetch_and_validate() -> operator_data - combines fetching operator data and running all validations on it - useful when you would be running all validations on data anyway\n\n- get_stats() -> stats - fetches various constants from Lido contract, but you can even pass a list of functions to fetch eg get_stats([isStopped])\n\nYou can mix and match these functions, but make sure to use get_operators_data() first.\n\n## Notes\n\n1. Signature validation will be skipped if its results are already present in operator_data. This way you can safely load validation results from cache and add `[\"valid_signature\"] = Boolean` to already checked keys.\n\n## How to Use\n\nUse a RPC provider url as an environment variable and run your script:\n\n`WEB3_PROVIDER_URI=https://eth-mainnet.provider.xx example.py`\n\nSee `example.py` for a complete example, make sure to use a main function and a script entry point check when using validate_keys_multi() or fetch_and_validate().\n\n## Options\n\nIf you are testing a new deployment of Lido, these environment variables can override addresses and ABIs:\n\n- LIDO_ADDRESS\n- REGISTRY_ADDRESS\n- LIDO_ABI (the file-path to the contract's ABI)\n- REGISTRY_ABI (the file-path to the contract's ABI)\n\n`WEB3_PROVIDER_URI=https://eth-mainnet.provider.xx LIDO_ADDRESS=XXX REGISTRY_ADDRESS=XXX LIDO_ABI=xxx.json REGISTRY_ABI=xxx.json example.py`",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lidofinance/lido-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Lido-vsmelov",
    "package_url": "https://pypi.org/project/Lido-vsmelov/",
    "platform": "",
    "project_url": "https://pypi.org/project/Lido-vsmelov/",
    "project_urls": {
      "Homepage": "https://github.com/lidofinance/lido-python"
    },
    "release_url": "https://pypi.org/project/Lido-vsmelov/0.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.0,<4",
    "summary": "Network helpers for Lido",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9322597,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7279ad35066cb4a33a40dbcf4e2166a6f264f655f048f14c2892d60600f567a1",
          "md5": "50332b95f2836eeac8a766891ef453fe",
          "sha256": "24901783e7444047a256245ed81ed536686981c8cd476058c4f949f8256ad0f8"
        },
        "downloads": -1,
        "filename": "Lido-vsmelov-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "50332b95f2836eeac8a766891ef453fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0,<4",
        "size": 20188,
        "upload_time": "2021-02-05T00:18:51",
        "upload_time_iso_8601": "2021-02-05T00:18:51.226814Z",
        "url": "https://files.pythonhosted.org/packages/72/79/ad35066cb4a33a40dbcf4e2166a6f264f655f048f14c2892d60600f567a1/Lido-vsmelov-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7279ad35066cb4a33a40dbcf4e2166a6f264f655f048f14c2892d60600f567a1",
        "md5": "50332b95f2836eeac8a766891ef453fe",
        "sha256": "24901783e7444047a256245ed81ed536686981c8cd476058c4f949f8256ad0f8"
      },
      "downloads": -1,
      "filename": "Lido-vsmelov-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "50332b95f2836eeac8a766891ef453fe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0,<4",
      "size": 20188,
      "upload_time": "2021-02-05T00:18:51",
      "upload_time_iso_8601": "2021-02-05T00:18:51.226814Z",
      "url": "https://files.pythonhosted.org/packages/72/79/ad35066cb4a33a40dbcf4e2166a6f264f655f048f14c2892d60600f567a1/Lido-vsmelov-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}