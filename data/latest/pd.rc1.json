{
  "info": {
    "author": "Michael Moser",
    "author_email": "moser.michael@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Topic :: Utilities"
    ],
    "description": "## visual stack trace for python\n\nutilities for debugging of python scripts. prints stack backtraces that look similar to gdb stacktrace (gdb commands bt and bt full); \ncan be used instead of traceback.\n\nWritten by Michael Moser (c) 2015\n\nthis project on pypi [link](https://test.pypi.org/project/pd/)\n\n\nFunctions\n\n```      \t \t\ndie(*msg)\n    receives a variable number of arguments; prints each argument (with pprint) to standard error stream, \n    shows a detailed stack trace (also to standard error, see print_stack_ex, does not follow objects (follow_objects = 0); \n    exit program with error (status 1)\n    this is similar to die built in function in perl\n\ndie2(*msg)\n    receives a variable number of arguments; prints each argument (with pprint) to standard error stream, \n    shows a detailed stack trace (also to standard error, see print_stack_ex, does follow objects (follow_objects = 1); \n    exit program with error (status 1)\n    this is similar to die built in function in perl\n\nprint_exception_ex(follow_objects=0, file=None)\n        prints an exception with more detailed stack trace, is used as follows:\n        the function is similar to traceback.print_exception , just with more detailed stack trace\n\n    import pd\n\n    try:\n       <python code>\n    except BaseException:           \n\tpd.print_exception_ex()\n\n\n\t    parameters:\n\n\t    follow_objects - if not 0 then representation of object values is printed \n\t    Please note that follow_objects=1 can generate a lot of output, and can take a lot of time. (default 0)\n\n\t    file -  print to file (default value None - print to standard error stream)\n\n\t    example stack trace:\n\n    Exception: got it\n\n    #1  def kuku2(self = {'a': 42, 'b': [1, 2, 3, 4]}, depth = 1) at test_pd.py:29\n    Calls next frame at:\n\t    raise Exception('got it') at: test_pd.py:29\n\n    #2  def kuku2(self = {'a': 42, 'b': [1, 2, 3, 4]}, depth = 2) at test_pd.py:28\n    Calls next frame at:\n\t    kuku2( depth - 1 ) at: test_pd.py:28\n\n    #3  def kuku2(self = {'a': 42, 'b': [1, 2, 3, 4]}, depth = 3) at test_pd.py:28\n    Calls next frame at:\n\t    kuku2( depth - 1 ) at: test_pd.py:28\n\n    #4  def kuku2(self = {'a': 42, 'b': [1, 2, 3, 4]}, depth = 4) at test_pd.py:28\n    Calls next frame at:\n\t    kuku2( depth - 1 ) at: test_pd.py:28\n\n    #5  def kuku2(self = {'a': 42, 'b': [1, 2, 3, 4]}, depth = 5) at test_pd.py:28\n    Calls next frame at:\n\t    kuku2( depth - 1 ) at: test_pd.py:28\n\n    #6  def kuku2(self = {'a': 42, 'b': [1, 2, 3, 4]}, depth = 6) at test_pd.py:28\n    Calls next frame at:\n\t    kuku2( depth - 1 ) at: test_pd.py:28\n\n    #7  def main() at test_pd.py:44\n    Local variables:\n    n = {'a': 42, 'b': [1, 2, 3, 4]}\n    Calls next frame at:\n\t    pd.print_exception_ex( follow_objects = 1 ) at: test_pd.py:44\n\n\nprint_stack_ex(skipframes=0, follow_objects=0, file=None, frame=None)\n\tprint stack trace from an arbitrary point in the program;\n        the function is similar to traceback.print_stack , just with more detailed stack trace\n\n        the stack trace includes function names, values of parameters and values of local variables. i find it easier to debug with this stack trace.\n\n        parameters:\n        skipframes - skip a number of frames if is not 0 (default 0)\n\n        follow_objects - if not 0 then representation of object values is printed \n        Please note that follow_objects=1 can generate a lot of output, and can take a lot of time. (default 0)\n\n        file -  print to file (default value None - print to standard error stream)\n\n        frame - specify a start frame (default None - show from calling function; deepest frame on top marked with #1)\n\n        this function is similar to traceback.print_stack , just with more detailed stack trace.\n\n        works for python 2.7, should work for other versions as well\n\n        example stack trace:\n\n    #1 def fact(n = 1) at test_pd.py:10\n    Local variables:\n    loc 2\n    loc2 [0]\n    Calls next frame at:\n\t    pd.print_stack_ex() at: test_pd.py:10\n\n    #2 def fact(n = 2) at test_pd.py:8\n    Local variables:\n    loc 4\n    loc2 [0, 1]\n    Calls next frame at:\n\t    return n * fact( n - 1 ) at: test_pd.py:8\n\n    #3 def fact(n = 3) at test_pd.py:8\n    Local variables:\n    loc 6\n    loc2 [0, 1, 2]\n    Calls next frame at:\n\t    return n * fact( n - 1 ) at: test_pd.py:8\n\n    #4 def fact(n = 4) at test_pd.py:8\n    Local variables:\n    loc 8\n    loc2 [0, 1, 2, 3]\n    Calls next frame at:\n\t    return n * fact( n - 1 ) at: test_pd.py:8\n\n    #5 def main() at test_pd.py:36\n    Local variables:\n    Calls next frame at:\n\t    print fact(4) at: test_pd.py:36\n\n    #6 def <module>() at test_pd.py:53\n    Calls next frame at:\n\t    main() at: test_pd.py:53\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MoserMichael/visual-python-strace",
    "keywords": "backtrace,debugging",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pd",
    "package_url": "https://pypi.org/project/pd/",
    "platform": "",
    "project_url": "https://pypi.org/project/pd/",
    "project_urls": {
      "Homepage": "https://github.com/MoserMichael/visual-python-strace"
    },
    "release_url": "https://pypi.org/project/pd/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "more detailed python backtraces (similar to backtrace module)",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11800155,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "595144e05bdb37666f2c003e4ee20f5032119b5b353b4148b56d14c2c0ee826b",
          "md5": "63321ef3bfb237c4a08232f37df8d84c",
          "sha256": "1658b04e2889abf7bb4590f6126ed618bdae474f5f9111872a446dbecd0543ef"
        },
        "downloads": -1,
        "filename": "pd-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63321ef3bfb237c4a08232f37df8d84c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6505,
        "upload_time": "2021-10-22T05:01:54",
        "upload_time_iso_8601": "2021-10-22T05:01:54.692116Z",
        "url": "https://files.pythonhosted.org/packages/59/51/44e05bdb37666f2c003e4ee20f5032119b5b353b4148b56d14c2c0ee826b/pd-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "064b8fffdc88c8f2d9e9b1727b99f1c6da7a10b9726f227fdb71270e7adc057c",
          "md5": "53a69935a01924d6c8953e91f5a25ea6",
          "sha256": "46f21dd5854ee7eb4397daa43191662f787ccf4cfe78e2472564bf9ce7e7614b"
        },
        "downloads": -1,
        "filename": "pd-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "53a69935a01924d6c8953e91f5a25ea6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5601,
        "upload_time": "2021-10-22T05:01:56",
        "upload_time_iso_8601": "2021-10-22T05:01:56.226134Z",
        "url": "https://files.pythonhosted.org/packages/06/4b/8fffdc88c8f2d9e9b1727b99f1c6da7a10b9726f227fdb71270e7adc057c/pd-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "595144e05bdb37666f2c003e4ee20f5032119b5b353b4148b56d14c2c0ee826b",
        "md5": "63321ef3bfb237c4a08232f37df8d84c",
        "sha256": "1658b04e2889abf7bb4590f6126ed618bdae474f5f9111872a446dbecd0543ef"
      },
      "downloads": -1,
      "filename": "pd-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "63321ef3bfb237c4a08232f37df8d84c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6505,
      "upload_time": "2021-10-22T05:01:54",
      "upload_time_iso_8601": "2021-10-22T05:01:54.692116Z",
      "url": "https://files.pythonhosted.org/packages/59/51/44e05bdb37666f2c003e4ee20f5032119b5b353b4148b56d14c2c0ee826b/pd-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "064b8fffdc88c8f2d9e9b1727b99f1c6da7a10b9726f227fdb71270e7adc057c",
        "md5": "53a69935a01924d6c8953e91f5a25ea6",
        "sha256": "46f21dd5854ee7eb4397daa43191662f787ccf4cfe78e2472564bf9ce7e7614b"
      },
      "downloads": -1,
      "filename": "pd-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "53a69935a01924d6c8953e91f5a25ea6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5601,
      "upload_time": "2021-10-22T05:01:56",
      "upload_time_iso_8601": "2021-10-22T05:01:56.226134Z",
      "url": "https://files.pythonhosted.org/packages/06/4b/8fffdc88c8f2d9e9b1727b99f1c6da7a10b9726f227fdb71270e7adc057c/pd-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}