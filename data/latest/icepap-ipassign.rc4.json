{
  "info": {
    "author": "Cyril Danilevski",
    "author_email": "cyril.danilevski@esrf.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Environment :: X11 Applications :: Qt",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# icepap-ipassign\n\nRemotely configure IcePAP network settings.\n\nIPAssign is a tool developed within ESRF's DEG (Detector and Electronics Group).\nIts aim is to provide an easy way to set-up network settings over UDP multicast,\nwithout the need for a complete DaNCE suite.\n\n![alt text](ipa_gui/action_shot.png \"Action shot\")\n\n## Installing\n\nThis package requires Python 3.7+, and is available on pypi:\n\n    pip install icepap-ipassign\n\n## Usage\n\nipassign is a graphical application.\nLaunch it so:\n\n    $ ipassign\n\nIn the main window, you will be given a list of discovered devices. Clicking on one\nwill show its configuration window.\n\nThe most common operation is the configuration of network setting from the hostname,\nand a simple window will pop up, if found in the DNS.  \nFor further configuration, hit `Advanced`.\n\nThe gui is further documented in [ipa_gui/gui.md](ipa_gui/gui.md)\n\n## Protocol\n\n### Messaging\n\nipassign uses UDP multicast on `225.0.0.37` port `12345`.  \n\nThere are three types of message: discovery, configurations, and acknowledgements.\n\nDiscovery messages are sent by ipassing to list all devices on the network.  \n\nConfigurations messages are either devices sending their configurations, or\nipassing sending a new configuration to a device.  \n\nAcknowledgements are sent by a device upon applying a new configuration.  \nThese are not sent if the device was requested to reboot.\n\n\nA typical exchange of information has the following format:\n\n    [ipassign] who's there? discovery packet\n    [icepap 1] me, my mac address is 00:... and my configuration is ...\n    [icepap 2] me, my mac address is 01:... and my configuration is ...\n    [ipassign] device with mac 01:... , please apply the following configuration: ...\n               and reboot/apply now dynamically/write to flash.\n    [icepap 2] okay, here's an ack message, with my status code following your request.\n    [ipassign] who's there? discovery packet\n\nFor demonstration purposes, a simple listener is available in `utils/listener.py` and can be invoked so:\n\n```bash\n$ ipassign-listener\n\nWaiting for messages...\n```\n\nMessages seen in the multicast group will then be displayed in human readable format.\n\n### Packet Format\n\nAn IPAssign packet has the following structure:\n\n    [header]      # 14 bytes\n    [destination] # 6 bytes, 6 x uint8\n    [payload]     # variable length, 0 to 1024 bytes\n    [checksum]    # 4 bytes, uint32, little endian\n\n- `[destination]` is the mac address of the target device. When broadcasting,\n                  this address is set to a single byte with value 0x00.\n- `[payload]` is the data sent to the target device.\n- `[checksum]` the crc32 of `[header][destination][payload]`, encoded in little\n               endian, then appended to the packet.\n- `[header]` has the following structure:\n\n        [source]        # 6 bytes, 6 x uint8\n        [target count]  # 2 byte, uint16\n        [packet number] # 2 bytes, uint16\n        [command]       # 2 bytes, uint16\n        [payload size]  # 2 bytes, uint16\n\n  - `[source]` is the mac address of the device emitting the packet.\n  - `[target count]` is set to 0 when broadcasting to the whole group,\n                     or 1 when targeting a specific device.\n  - `[packet number]` is the packet count sent by this device.\n  - `[command]` is one of the predefined commands, eg. set hostname, see\n                `ipassign.commands` for available commands.\n  - `[payload size]` describes the quantity of bytes in the payload to read.\n\n---\n\n`target count` is called so, to maintain consistency with other legacy code.  \nIt was originally envisioned that several devices could be targeted by a single\nmessage, hence its uint16 format.   \nIn practice, however, it is effectively used as a boolean: it should be\nunderstood as `is_not_broadcasting`. \n\n---\n\n\n### Discovery Messages\n\nHere is the anatomy of a discovery message:\n\n    0x78 0x45 0xC4 0xF7 0x8F 0x48   # mac\n    0x00 0x00                       # target count (broadcast to group)\n    0x00 0x01                       # packet number\n    0x00 0x02                       # command (request for parameters)\n    0x00 0x00                       # payload length\n    0x00                            # destination mac, truncated to 1 byte.\n    0x31 0x8F 0x64 0x48             # checksum\n\nIncidentally, for its lack of payload, it is the smallest message that can be sent.\n\n### Configuration Payload\n\nA configuration is either a device's current network configuration, or one it should apply.\nThe payload has the following structure:\n\n    [icepap id]    # 6 bytes, 6 x uint8\n    [ip address]   # 4 bytes, uint32, little endian\n    [broadcast]    # ditto\n    [netmask]      # ditto\n    [gateway]      # ditto\n    [mac address]  # 6 bytes, 6 x uint8\n    [flags]        # 2 bytes, uint32\n    [hostname]     # variable length, 24 bytes max, ascii string\n\n- `[icepap id]` is the mac address of the device providing or applying the config.\n- `[ip address]` is this configuration's address.\n- `[broadcast]` is this configuration's broadcast address.\n- `[netmask]` is this configuration's netmask.\n- `[gateway]` is this configuration's gateway address.\n- `[mac address]` is this configuration's mac address.\n- `[flags]` are the actions the device should do upon applying a new configuration.\n- `[hostname]` is this configuration's hostname.\n\nThe device can be asked to perform one of three actions upon applying a new\nconfiguration.\nThese are set in the `[flags]` field and are:\n\n- reboot (first bit set);\n- dynamically apply the changes (second bit set);\n- write them to flash (third bit set).\n\nHere is a configuration payload:\n\n    0x00 0x0C 0xC6 0x69 0x13 0x2D                 # icepap id, a mac address\n    0xAC 0x18 0x9B 0xDE 0xAC                      # IP address, 172.24.155.222\n    0xAC 0x18 0x9B 0xDE 0xFF                      # broadcast, 172.24.155.255\n    0xFF 0xFF 0xFF 0xFF 0x00                      # netmask, 255.255.255.0\n    0xAC 0x18 0x9B 0xDE 0x63                      # gateway, 172.24.155.99\n    0x00 0x0C 0xC6 0x69 0x13 0x2D                 # reprogrammable mac address\n    0x00 0x00                                     # flags, none\n    0X74 0X68 0X78 0X63 0X6F 0X72 0X6F 0X6E 0X61  # hostname\n\nThis message will be deserialised as follows:\n\n```python\nfrom ipassign import Message\nmsg  = b'\\x00\\x0c\\xc6\\x69\\x13\\x2d\\x01\\x00\\x00\\x00\\x03\\x00\\x38\\x00\\x00\\x22\\x19\\x06\\xbf\\x58\\x00\\x0c\\xc6\\x69\\x13\\x2d\\xac\\x18\\x9b\\xde\\xac\\x18\\x9b\\xff\\xff\\xff\\xff\\x00\\xac\\x18\\x9b\\x63\\x00\\x0c\\xc6\\x69\\x13\\x2d\\x00\\x00\\x00\\x00\\x69\\x63\\x65\\x65\\x75\\x34\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xb3\\x57\\x23\\x0d'\n\nm = Message.from_bytes(msg)\n\nprint(m)\n[header]\n    [source]      = 00:0c:c6:69:13:2d\n    [target id]   = 1\n    [packet no]   = 0\n    [command]     = SEND_CONFIG [0x3]\n    [payload len] = 56\n[destination] = 00:22:19:06:bf:58\n[payload] = [configuration]\n                [target id]   = 00:0c:c6:69:13:2d\n                [ip address]  = 172.24.155.222\n                [broadcast]   = 172.24.155.255\n                [netmask]     = 255.255.255.0\n                [gateway]     = 172.24.155.99\n                [mac address] = 00:0c:c6:69:13:2d\n                [flags]       =\n                [hostname]    = iceeu4\n[checksum] = 0xd2357b3\n```\n\n### Acknowledgment Payload\n\nWhilst a device will send an acknowledgement after applying a new configuration,\nif not told to reboot, it is up to the creator of said configuration to\nvalidate it.\n\nAn acknowledgment payload has the following structure:\n\n    [packet number] # 2 bytes, uint16\n    [error code]    # 2 bytes, uint16\n\n- `[packet number]` is the packet number referring to the acknowledge packet.\n                    If a configuration packet was sent with packet number 5,\n                    it is then possible to check that the settings match the ones\n                    in the packet of that packet.\n- `[error code]` is a status code of having applied the received settings.\n\nHere is an acknowledgement payload:\n```python\nfrom ipassign import acknowledgements, Acknowledgement\n\npayload = Acknowledgement(packno=5,\n                          code=acknowledgements.OK)\n```\n\nThis message would have the following hex representation:\n\n    0x05 0x00  # Reply to the configuration received in sender's packet no. 5\n    0x00 0x00  # Ok\n\nThis message would be represented as:\n\n    [acknowledgement]\n        [packet number] = 5\n        [code]          = OK [0x0]\n\nError codes are defined in `ipassign.acknowledgements`.\n\n## Testing and Development\n\nClone and download this repository, and install it with `pip`:\n\n    pip install -e .\n\nTesting this library done with `pytest`:\n\n    pytest -vv\n\nFor development, a mock IcePAP server can be found in `utils/mock_icepap`.\nThis mock server behaves like real hardware, and will send the appropriate\nreplies:\n\n```bash\n$ python ipa_utils/mock_icepap\nWorking with e3:cd:77:a0:18:30 and dvepklrlyq, no ack: False\n```\n\nThe script also accepts a mac address as argument:\n\n```bash\n$ python ipa_utils/mock_icepap 00:0B:AD:C0:FF:EE\nWorking with 00:0b:ad:c0:ff:ee and kqifwchhiz, no ack: False\n```\n\nIt's also possible to make the script not send acknowledgements:\n\n```bash\n$ python ipa_utils/mock_icepap --nack\nWorking with 53:2e:d2:f9:7b:af and kvdkkleuqc, no ack: True\n```\n\n\n\n## Embedded IcePAP Considerations\n\nThe `listener` process embedded in IcePAP devices expects well-formatted\npackets, and does not do any error handling.  \nAs such, it is up to the sender to ensure that the packet is correct.\n\nAny malformed message or nonsense bytes sent to an IcePAP will make\nthe `listener` crash.\n\nTo restart it, telnet as `root` in the IcePAP device, and execute\n`/usr/sbin/icepap_startup_local restart`:\n\n```bash\n$ telnet icepap\nicepap login: root\nPassword:\n\nroot@icepap > /usr/sbin/icepap_startup_local restart\nStopping ipassign listener......done\nStopping icepap communication...done\nRemoving icepap driver..........done\nRemoving blisspipe driver.......done\nLoading  icepap driver..........done\nLoading  blisspipe driver.......done\nStarting icepap communication...done\nStarting ipassign listener......done\n```\n\nThe device will then appear in `ipassign` upon doing a `Refresh`.\n\nSending a configuration without any command flags will do nothing.  \nFor a configuration to take effect, it should be applied dynamically and/or\nwritten to flash.\n\nWhilst the protocol contains a mac address field in its configuration payload,\nan IcePAP mac address is not reconfigurable. As such, the mac address should\nremain the same as the target mac in the header, which was obtained from a\n`SEND_CONFIG` message.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cydanil/icepap-ipassign",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "icepap-ipassign",
    "package_url": "https://pypi.org/project/icepap-ipassign/",
    "platform": "",
    "project_url": "https://pypi.org/project/icepap-ipassign/",
    "project_urls": {
      "Homepage": "https://github.com/cydanil/icepap-ipassign"
    },
    "release_url": "https://pypi.org/project/icepap-ipassign/2.3.0/",
    "requires_dist": [
      "PyQt5 (>=5.12.0)",
      "netifaces (>=0.10.9)"
    ],
    "requires_python": ">=3.7",
    "summary": "A tool to configure IcePAP network settings",
    "version": "2.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7075334,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "319c53589064fa049fdf870e3895f0fc288aced7b36d1d743800e818006f140f",
          "md5": "5c96a1c54f0ff0d18b3984f52d92eac2",
          "sha256": "f6bd33ddf6303f66a2718b326eae50eb5c256c181e88ad0906af35dc8681be42"
        },
        "downloads": -1,
        "filename": "icepap_ipassign-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c96a1c54f0ff0d18b3984f52d92eac2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11478,
        "upload_time": "2020-04-03T11:14:16",
        "upload_time_iso_8601": "2020-04-03T11:14:16.967863Z",
        "url": "https://files.pythonhosted.org/packages/31/9c/53589064fa049fdf870e3895f0fc288aced7b36d1d743800e818006f140f/icepap_ipassign-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59d247f1e1c3c30faf17f51e4e1807aa4cd7485e20dd12c5ebbbf4d9407b1460",
          "md5": "59997ba01e5af79de9ecc02ff111bd03",
          "sha256": "5a880910e94a82ae47f7fda21c074ca1e2a6591fca851b32c01c283d67510d4e"
        },
        "downloads": -1,
        "filename": "icepap-ipassign-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "59997ba01e5af79de9ecc02ff111bd03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9756,
        "upload_time": "2020-04-03T11:14:19",
        "upload_time_iso_8601": "2020-04-03T11:14:19.270453Z",
        "url": "https://files.pythonhosted.org/packages/59/d2/47f1e1c3c30faf17f51e4e1807aa4cd7485e20dd12c5ebbbf4d9407b1460/icepap-ipassign-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87b1b5ed3133e980321e942b5e5d492ed25f114d3d237be7ec0b31646a268967",
          "md5": "746fa68877b30c8076dedb90987c1a49",
          "sha256": "a6bb57298f6730c92f4f2accaf88f58ef9c661716c4e56f3ec6556664b65affe"
        },
        "downloads": -1,
        "filename": "icepap_ipassign-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "746fa68877b30c8076dedb90987c1a49",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 22141,
        "upload_time": "2020-04-03T13:14:16",
        "upload_time_iso_8601": "2020-04-03T13:14:16.640399Z",
        "url": "https://files.pythonhosted.org/packages/87/b1/b5ed3133e980321e942b5e5d492ed25f114d3d237be7ec0b31646a268967/icepap_ipassign-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "baacfc8edff28fb1944a5040cba2d95e6262abff79c7f8658b14f42720b9876c",
          "md5": "3066f1245247cca7efae127bf6fd1311",
          "sha256": "8c1ac84b0eb88c79ba5d3455f5f8b48f018485f0054a2fb13d6fd193cbcca33a"
        },
        "downloads": -1,
        "filename": "icepap-ipassign-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3066f1245247cca7efae127bf6fd1311",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18062,
        "upload_time": "2020-04-03T13:14:18",
        "upload_time_iso_8601": "2020-04-03T13:14:18.093971Z",
        "url": "https://files.pythonhosted.org/packages/ba/ac/fc8edff28fb1944a5040cba2d95e6262abff79c7f8658b14f42720b9876c/icepap-ipassign-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c10326b2283c23b4f64de1cf5c3bb64c3b290374d93555eeda6a13432abbb1a",
          "md5": "da7cc881266c2bb9b1c5f021b5d82b51",
          "sha256": "fbf61ef26e6033086508212330ab7f640d4177b16b0ef31278054cd98a3570d1"
        },
        "downloads": -1,
        "filename": "icepap_ipassign-2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da7cc881266c2bb9b1c5f021b5d82b51",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 22362,
        "upload_time": "2020-04-08T17:35:13",
        "upload_time_iso_8601": "2020-04-08T17:35:13.767540Z",
        "url": "https://files.pythonhosted.org/packages/1c/10/326b2283c23b4f64de1cf5c3bb64c3b290374d93555eeda6a13432abbb1a/icepap_ipassign-2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7f4d67b6cf98b87533b724ca82ffc3f95e2005991dae8bbecbadad520e1c13d",
          "md5": "4bc257a69969f9915fa21189a3c16b59",
          "sha256": "884eab90c7c0e558faf84098e3710cbf48df2352041b5eb75042e53d031a35b9"
        },
        "downloads": -1,
        "filename": "icepap-ipassign-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4bc257a69969f9915fa21189a3c16b59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18316,
        "upload_time": "2020-04-08T17:35:15",
        "upload_time_iso_8601": "2020-04-08T17:35:15.223601Z",
        "url": "https://files.pythonhosted.org/packages/a7/f4/d67b6cf98b87533b724ca82ffc3f95e2005991dae8bbecbadad520e1c13d/icepap-ipassign-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d972f99dc87220721fc0aae779929647f70f68a6af48f41ee139e8f924326bad",
          "md5": "c58c02eac980f88293a864c9fe46ad14",
          "sha256": "38b4bf3b6536adbfb0775c1111abd1039773a59b45db6e883d92ebf0fffdfff8"
        },
        "downloads": -1,
        "filename": "icepap_ipassign-2.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c58c02eac980f88293a864c9fe46ad14",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 22783,
        "upload_time": "2020-04-22T09:47:07",
        "upload_time_iso_8601": "2020-04-22T09:47:07.546268Z",
        "url": "https://files.pythonhosted.org/packages/d9/72/f99dc87220721fc0aae779929647f70f68a6af48f41ee139e8f924326bad/icepap_ipassign-2.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3d520eeaa1c11f83480d373f151a9a614300aa5611e18536cf0daab928b1ad3",
          "md5": "083dea4cbec8fd083972f6c395f0ca2a",
          "sha256": "25da7fb2b0c17d72fa6b93c942a0ce39cba9526aa50656d3a02d4732d5825270"
        },
        "downloads": -1,
        "filename": "icepap-ipassign-2.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "083dea4cbec8fd083972f6c395f0ca2a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18741,
        "upload_time": "2020-04-22T09:47:09",
        "upload_time_iso_8601": "2020-04-22T09:47:09.598740Z",
        "url": "https://files.pythonhosted.org/packages/b3/d5/20eeaa1c11f83480d373f151a9a614300aa5611e18536cf0daab928b1ad3/icepap-ipassign-2.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d972f99dc87220721fc0aae779929647f70f68a6af48f41ee139e8f924326bad",
        "md5": "c58c02eac980f88293a864c9fe46ad14",
        "sha256": "38b4bf3b6536adbfb0775c1111abd1039773a59b45db6e883d92ebf0fffdfff8"
      },
      "downloads": -1,
      "filename": "icepap_ipassign-2.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c58c02eac980f88293a864c9fe46ad14",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 22783,
      "upload_time": "2020-04-22T09:47:07",
      "upload_time_iso_8601": "2020-04-22T09:47:07.546268Z",
      "url": "https://files.pythonhosted.org/packages/d9/72/f99dc87220721fc0aae779929647f70f68a6af48f41ee139e8f924326bad/icepap_ipassign-2.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3d520eeaa1c11f83480d373f151a9a614300aa5611e18536cf0daab928b1ad3",
        "md5": "083dea4cbec8fd083972f6c395f0ca2a",
        "sha256": "25da7fb2b0c17d72fa6b93c942a0ce39cba9526aa50656d3a02d4732d5825270"
      },
      "downloads": -1,
      "filename": "icepap-ipassign-2.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "083dea4cbec8fd083972f6c395f0ca2a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 18741,
      "upload_time": "2020-04-22T09:47:09",
      "upload_time_iso_8601": "2020-04-22T09:47:09.598740Z",
      "url": "https://files.pythonhosted.org/packages/b3/d5/20eeaa1c11f83480d373f151a9a614300aa5611e18536cf0daab928b1ad3/icepap-ipassign-2.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}