{
  "info": {
    "author": "Virgile Daugé",
    "author_email": "virgile.dauge@loria.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "#+title: Utility lib for naps\n#+author: Virgile Daugé\n#+EMAIL:virgile.dauge@loria.fr\n\nParamètre d'export de code :\n#+begin_src emacs-lisp :tangle no :results silent\n(setq org-src-preserve-indentation t)\n#+end_src\n\n* Construction du Module\n\n#+begin_src python :tangle setup.py\n# -*- coding: utf-8 -*-\n\nfrom setuptools import setup, find_packages\n\nwith open('readme.org', 'r') as fh:\n    long_description = fh.read()\n\nsetup(\n    name='naps_utilities',\n    packages=find_packages(exclude=[\"examples/*\"]),\n    version='0.3.2',\n    description='Lib to handle ease of use of pointclouds ',\n    author=u'Virgile Daugé',\n    author_email='virgile.dauge@loria.fr',\n    url='https://github.com/virgileTN/naps_utilities',\n    keywords=['pointclouds', 'filtering'],\n    install_requires=['numpy',\n                      'numpy-quaternion'],\n    long_description=long_description,\n    long_description_content_type='text/plain',\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Environment :: Console',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: GNU General Public License (GPL)',\n        'Operating System :: MacOS :: MacOS X',\n        'Operating System :: POSIX',\n        'Programming Language :: Python :: 3.6',\n        ],\n)\n#+end_src\n\n#+begin_src bash :results value verbatim :exports both\nmkdir naps_utilities\ntouch naps_utilities/__init__.py\n#+end_src\n\n* Classe transform\n** Mise à dispo de la classe\n\n#+begin_src python :tangle naps_utilities/__init__.py\nfrom .transform import Transform\n#+end_src\n\n** Imports\n\n#+begin_src python :tangle naps_utilities/transform.py\nclass MultipleInputData(Exception):\n   \"\"\"Raised when data used to populate is not valid\"\"\"\n   pass\n#+end_src\n\n#+begin_src python :tangle naps_utilities/transform.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport os\nimport math\nimport quaternion\nimport numpy as np\n#+end_src\nCes modules ne sont nécessaires que dans la version dépendante de ROS\nuniquement, et ne doivent pas êtres chargés dans la version\n=. standalone .= (il ne seront pas présents sur une machine sans ROS).\n\nPour s'assurer de respecter ces contraintes, on va vérifier que ROS\ntourne sur la machine, en cherchant à récupérer la variable\nd'environnement 'ROS_DISTRO'. Si elle n'est pas définie, on considère\nqu'il faut utiliser la version =. standalone .=.\n\n#+begin_src python :tangle naps_utilities/tranform.py\nstandalone = True if os.getenv('ROS_DISTRO') is None else False\nif not standalone:\n    from geometry_msgs.msg import TransformStamped\n#+end_src\n#+end_src\n** Corps de la fonction\n#+begin_src python :tangle naps_utilities/transform.py\nclass Transform:\n    # self.matrix = None  # matrix de transfo\n\n    # Constructeur\n    def __init__(self, mat=None, quat=None, pos=None, ros_msg=None):\n        u\"\"\" Constructeur depuis une matrice OU un quaternion et une position.\"\"\"\n\n        # Ensure that only one populate method is selected:\n        conditions = [mat is not None, quat is not None and pos is not None, ros_msg is not None]\n        if sum(conditions) > 1:\n            raise MultipleInputData\n\n        if mat is not None:\n            self.matrix = np.copy(mat)\n\n        elif quat is not None and pos is not None:\n            self.from_quatpos(quat, pos)\n\n        elif ros_msg is not None:\n            self.from_msg(ros_msg)\n\n        else:\n            self.matrix = np.identity(4)\n\n#+end_src\n\n** Fonction de peuplement\n#+begin_src python :tangle naps_utilities/transform.py\n    def from_quatpos(self, quat, pos):\n        self.matrix = np.identity(4)\n        # (w, x, y, z)\n        quat = np.asarray(quat)\n        npquat = quaternion.quaternion(quat[0], quat[1],\n                                       quat[2], quat[3])\n        self.matrix[:3, :3] = quaternion.as_rotation_matrix(npquat)\n        self.matrix[:3, 3] = pos\n#+end_src\n\n#+begin_src python :tangle naps_utilities/transform.py\n    def from_msg(self, msg):\n        self.from_quatpos(pos=[\n            msg.transform.translation.x,\n            msg.transform.translation.y,\n            msg.transform.translation.z,\n        ], quat=[\n            msg.transform.rotation.w,\n            msg.transform.rotation.x,\n            msg.transform.rotation.y,\n            msg.transform.rotation.z,\n        ])\n#+end_src\n\n** Vers ROS msg\n#+begin_src python :tangle naps_utilities/transform.py\n    def to_msg(self, child_frame_id, frame_id='map'):\n        msg = TransformStamped()\n        quaternion = self.quaternion()\n        position = self.position()\n        msg.header.frame_id = frame_id\n        msg.child_frame_id = child_frame_id\n        msg.transform.translation.x = position[0]\n        msg.transform.translation.y = position[1]\n        msg.transform.translation.z = position[2]\n        msg.transform.rotation.x = quaternion.x\n        msg.transform.rotation.y = quaternion.y\n        msg.transform.rotation.z = quaternion.z\n        msg.transform.rotation.w = quaternion.w\n        return msg\n#+end_src\n\n** Fcontions internes\nFonctions d'affichage\n#+begin_src python :tangle naps_utilities/transform.py\n    def __str__(self):\n        u\"\"\"Affichage de la transformation.\"\"\"\n        return self.matrix.__str__()\n\n    def __repr__(self):\n        u\"\"\"Représentation interne de la classe.\"\"\"\n        return self.matrix.__repr__()\n\n#+end_src\n\nConversion quaternion vers matrice de rotation, ici on utilise le\nmodule numpy-quaternion.\n#+begin_src python :tangle naps_utilities/transform.py\n    def quat_2_mat(self, quat, pos):\n        u\"\"\"Conversion quaternion vers matrix.\"\"\"\n        self.matrix[:3, :3] = quaternion.as_rotation_matrix(quat)\n        self.matrix[:3, 3] = pos\n#+end_src\n\nOpérations sur la matrice de tranformation :\n#+begin_src python :tangle naps_utilities/transform.py\n    def inverse(self):\n        u\"\"\"Inverse de la transformation.\"\"\"\n        return Transform(np.linalg.inv(self.matrix))\n\n    def __invert__(self):\n        u\"\"\"Inverse de la transformation inplace.\"\"\"\n        return Transform(np.linalg.inv(self.matrix))\n\n    def __sub__(self, other):\n        u\"\"\"Renvoie la transformation dans self du repère à l'origine de la transformation other.\"\"\"\n        return self.composition(~other)\n\n    def __isub__(self, other):\n        u\"\"\"Version 'inplace' de sub.\"\"\"\n        self = self.composition(~other)\n        return self\n\n    def composition(self, tr):\n        u\"\"\"Composition de transformations.\"\"\"\n        return Transform(mat=np.dot(self.matrix, tr.matrix))\n\n    def __mul__(self, other):\n        u\"\"\"Composition de la transformation de other dans self.\"\"\"\n        return self.composition(other)\n\n    def __imul__(self, other):\n        u\"\"\"\"Version 'inplace' de mul.\"\"\"\n        self.matrix = self.matrix.dot(other.matrix)\n        return self\n\n    def relative_transform(self, other):\n        u\"\"\"Transformation de self dans le repère other.\"\"\"\n        return ~other.composition(self)\n\n    def projection(self, pt):\n        u\"\"\"Transformation d'un point.\"\"\"\n        if (len(pt) == 3):\n            return self.matrix.dot(pt + [1])\n        else:\n            return self.matrix.dot(pt)\n\n#+end_src\n\nAccès à la position et au quaternion indépendamment :\n#+begin_src python :tangle naps_utilities/transform.py\n    def position(self):\n        u\"\"\"Extraction de la position depuis matrix.\"\"\"\n        return self.matrix[:3, 3]\n\n    def quaternion(self):\n        u\"\"\"Extraction du quaternion depuis matrix.\"\"\"\n        return quaternion.from_rotation_matrix(self.matrix)\n#+end_src\n\n** Tests\n\n#+begin_src ipython :session testTransform :file  :exports both\nfrom naps_utilities import Transform\nt = Transform(pos=[1,2,3], quat=[1,0,0,0])\nt\n#+end_src\n\n#+RESULTS:\n: # Out[3]:\n: #+BEGIN_EXAMPLE\n:   array([[1., 0., 0., 1.],\n:   [0., 1., 0., 2.],\n:   [0., 0., 1., 3.],\n:   [0., 0., 0., 1.]])\n: #+END_EXAMPLE\n\n#+begin_src ipython :session testTransform :file  :exports both\nt.to_msg('truc')\n#+end_src\n\n#+RESULTS:\n: # Out[5]:\n: : geometry_msgs.msg.TransformStamped(header=std_msgs.msg.Header(stamp=builtin_interfaces.msg.Time(sec=0, nanosec=0), frame_id='map'), child_frame_id='truc', transform=geometry_msgs.msg.Transform(translation=geometry_msgs.msg.Vector3(x=1.0, y=2.0, z=3.0), rotation=geometry_msgs.msg.Quaternion(x=-0.0, y=-0.0, z=-0.0, w=1.0)))\n\n* Classe Pointcloud\n** Mise à dispo de la classe\n\n#+begin_src python :tangle naps_utilities/__init__.py\nfrom .pointcloud import Pointcloud\n#+end_src\n** Dependences\nIl faut pouvoir utiliser cette classe comme interface avec ROS, mais\négalement en =. standalone .=, sur une machine qui n'est pas équipée\nde ROS.\n\nCes modules sont nécessaires dans tous les cas.\n#+begin_src python :tangle naps_utilities/pointcloud.py\n# Nécessaires pour la lecture/écriture de fichiers\nimport os\nimport json\nimport pickle\n\n#Les données sont stockées sous forme de numpy ndarray\nimport numpy as np\n#+end_src\n\nCes modules ne sont nécessaires que dans la version dépendante de ROS\nuniquement, et ne doivent pas êtres chargés dans la version\n=. standalone .= (il ne seront pas présents sur une machine sans ROS).\n\nPour s'assurer de respecter ces contraintes, on va vérifier que ROS\ntourne sur la machine, en cherchant à récupérer la variable\nd'environnement 'ROS_DISTRO'. Si elle n'est pas définie, on considère\nqu'il faut utiliser la version =. standalone .=.\n\n#+begin_src python :tangle naps_utilities/pointcloud.py\nstandalone = True if os.getenv('ROS_DISTRO') is None else False\n#+end_src\n#+begin_src python :tangle naps_utilities/pointcloud.py\nif not standalone:\n    #Nécessaire pour la conversion vers/depuis ROS2\n    from builtin_interfaces.msg import Time\n    from sensor_msgs.msg import PointCloud2\n    from sensor_msgs.msg import PointField\n    from std_msgs.msg import Header\n    from array import array\n#+end_src\n\n#+begin_src python :tangle naps_utilities/pointcloud.py\nclass TransformWhileEmpty(Exception):\n   \"\"\"Raised when transform method is called and the poincloud is not yet\n   populated\"\"\"\n   pass\n#+end_src\n\n#+begin_src python :tangle naps_utilities/pointcloud.py\nclass InvalidInputData(Exception):\n   \"\"\"Raised when data used to populate is not valid\"\"\"\n   pass\n#+end_src\n\n#+begin_src python :tangle naps_utilities/pointcloud.py\nclass MultipleInputData(Exception):\n   \"\"\"Raised when data used to populate is not valid\"\"\"\n   pass\n#+end_src\n** Corps de la classe\n#+begin_src python :tangle naps_utilities/pointcloud.py\nclass Pointcloud():\n    def __init__(self, ros_msg=None, points=None, keep_ring=True,\n               matrix=None, procrastinate=False, inpath=None):\n        # PoinCloud Metadata\n        self.metadata = {'header': None,\n                         'height': None,\n                         'width': None,\n                         'fields': None,\n                         'is_bigendian': None,\n                         'point_step': None,\n                         'row_step': None,\n                         'is_dense': None,\n                         'keep_ring': None,\n                         'is_populated': False,\n                         'procrastinated': True,}\n        # Pointcloud DATA\n        self.points = None\n        self.rings = None\n        self.matrix = matrix\n\n        # Additionnal DATA\n        self.devices_matrices = None\n        self.devices_names = None\n\n        # Ensure that only one populate method is selected:\n        conditions = [ros_msg is not None, points is not None, inpath is not None]\n\n        if sum(conditions) > 1:\n            raise MultipleInputData\n\n        else:\n            if ros_msg is not None:\n                self.from_msg(ros_msg)\n\n            elif points is not None:\n                self.from_list(points)\n\n            elif inpath is not None:\n                self.load(inpath)\n\n            if self.metadata['is_populated']:\n                if not procrastinate:\n                    self.filter()\n                    if matrix is None:\n                        self.matrix = np.identity(4)\n                        self.metadata['procrastinated'] = False\n                    else:\n                        self.transform(matrix)\n#+end_src\n** Populate from list\n#+begin_src python :tangle naps_utilities/pointcloud.py\n    def from_list(self, data):\n        self.metadata['keep_ring'] = False\n\n        self.points = np.ascontiguousarray(data, dtype=np.float32)\n        if self.points.shape[1] != 3 and self.points.shape[1] != 4:\n            raise InvalidInputData\n\n        self.metadata['nb_points'] = len(self.points)\n        self.metadata['height'] = 1\n        self.metadata['width'] = self.metadata['nb_points']\n\n        self.metadata['is_bigendian'] = False\n        self.metadata['point_step'] = 3 * 4\n        self.metadata['row_step'] = self.metadata['point_step']\n\n        self.metadata['is_dense'] = False\n\n        self.metadata['is_populated'] = True\n#+end_src\n** populate from ROS msg\nUn certain nombre de données ne nécessitent pas de conversion :\n#+begin_src python :tangle naps_utilities/pointcloud.py\n    def from_msg(self, msg):\n        #Données conservées \"telles quelles\"\n\n        self.metadata['height'] = msg.height\n        self.metadata['width'] = msg.width\n\n        self.metadata['is_bigendian'] = msg.is_bigendian\n        self.metadata['point_step'] = msg.point_step\n        self.metadata['row_step'] = msg.row_step\n\n        self.metadata['is_dense'] = msg.is_dense\n#+end_src\nL'atribut Header est du type std_msgs/Header:\n#+begin_src python :tangle naps_utilities/pointcloud.py\n        def from_header(header):\n            return {'time': {'sec': header.stamp.sec, 'nanosec': header.stamp.nanosec},\n               'frame_id': header.frame_id}\n        self.metadata['header'] = from_header(msg.header)\n#+end_src\nL'attribut fields du msg ROS est une liste d'objets PointFields.  Il\nconvient également de supprimer le fields ring, si l'on choisit de ne\npas les garder.\n#+begin_src python :tangle naps_utilities/pointcloud.py\n        def from_pointfields(fields):\n            return [{'name': field.name,\n                'offset': field.offset,\n                'datatype': field.datatype,\n                'count': field.count}\n               for field in fields]\n\n        self.metadata['fields'] = from_pointfields(msg.fields)\n#+end_src\nAfin de préparer l'extraction, on initialise des numpy ndarray afin\nque tous les points soient dans un espace contigu de la mémoire. Ici\non sépare les points en un tableau de float32 (x, y, z) et un tableau\nde (ring). Cela pour faciliter l'encodage décodage (c'est plus\ndifficile avec des types différents imbriqués)\n\n#+begin_src python :tangle naps_utilities/pointcloud.py\n        # Données converties\n        self.metadata['nb_points'] = msg.height * msg.width\n\n        data = np.reshape(msg.data, (-1, self.metadata['point_step']))\n\n        self.points = np.ndarray(\n            (self.metadata['nb_points'], 4), dtype=np.float32,\n            buffer=np.ascontiguousarray(data[:, :16]))\n\n        if self.metadata['keep_ring']:\n            self.metadata['rings'] = np.zeros(\n                self.metadata['nb_points'], dtype=np.uint16)\n\n            pointcloud['rings'] = np.ndarray(\n                (self.metadata['nb_points']), dtype=np.uint16,\n                buffer=np.ascontiguousarray(data[:, 16:]))\n#+end_src\nMise à jour dé métadonnées si nécessaire :\n#+begin_src python :tangle naps_utilities/pointcloud.py\n        if not self.metadata['keep_ring']:\n            self.metadata['fields'] = [field for field in self.metadata['fields'] if field['name'] != 'ring']\n            self.metadata['point_step'] = 16\n            self.metadata['row_step'] = self.metadata['point_step'] * len(self.metadata['fields'])\n            self.metadata['is_populated'] = True\n#+end_src\n** convert to msg\nBeaucoup de symétrie avec la fonction précedante.\n#+begin_src python :tangle naps_utilities/pointcloud.py\n    def to_msg(self):\n        msg = PointCloud2()\n        #Données conservées \"telles quelles\"\n\n        msg.height = self.metadata['height']\n        msg.width = self.metadata['width']\n\n        msg.is_bigendian = self.metadata['is_bigendian']\n        msg.point_step = self.metadata['point_step']\n        msg.row_step = self.metadata['row_step']\n\n        msg.is_dense = self.metadata['is_dense']\n#+end_src\n\nConversion vers Header ROS:\n#+begin_src python :tangle naps_utilities/pointcloud.py\n        def to_header(header_data):\n            return Header(stamp=Time(\n                sec=header_data['time']['sec'],\n                nanosec=header_data['time']['nanosec']),\n                     frame_id=header_data['frame_id'])\n        msg.header = to_header(self.metadata['header'])\n#+end_src\nConversion vers Pointfield:\n#+begin_src python :tangle naps_utilities/pointcloud.py\n        def to_pointfields(pointfields_data):\n            return [PointField(name=field['name'],\n                          offset=field['offset'],\n                          datatype=field['datatype'],\n                          count=field['count']) for field in pointfields_data]\n        msg.fields = to_pointfields(self.metadata['fields'])\n#+end_src\nDeux cas, selon la valeur de 'keep_ring':\n\nSi on garde les rings, il faut concatener les deux tableaux et en\nfaire un array de uint8.\n#+begin_src python :tangle naps_utilities/pointcloud.py\n        if self.metadata['keep_ring']:\n            msg.data = array('B', np.concatenate(\n            (self.points.view(dtype=np.uint8),\n             self.rings.reshape((self.metadata['nb_points'], -1)).view(dtype=np.uint8)),\n            axis=1).ravel().tolist())\n#+end_src\nSinon, il suffi de créer une liste de uint8 à partir des points au\nniveau des données.\n#+begin_src python :tangle naps_utilities/pointcloud.py\n        else:\n            msg.data = array('B', self.points.view(dtype=np.uint8).ravel().tolist())\n        return msg\n#+end_src\n** filter pointcloud\n\nIl y a deux cas a traiter, si l'on garde les rings auquel cas il faut\nles filter aussi.\n#+begin_src python :tangle naps_utilities/pointcloud.py\n    def filter(self, threshold=10):\n        if self.metadata['keep_ring']:\n            concat = np.concatenate((self.points, self.rings.reshape((len(points), 1))), axis=1)\n            concat = concat[np.logical_and(\n                np.logical_not(np.isnan(concat).any(axis=1)),\n                concat[:,3]>=threshold)]\n            self.points = np.ascontiguousarray(concat[:,:4], dtype=np.float32)\n            self.rings = np.ascontiguousarray(concat[:,4:], dtype=np.uint16)\n#+end_src\nAprès avoir été filtré, le poincloud ne peut plus être structuré dans\nun tableau 2D.\n#+begin_src python :tangle naps_utilities/pointcloud.py\n        else:\n            self.points = self.points[np.logical_and(\n                np.logical_not(np.isnan(self.points).any(axis=1)),\n                self.points[:,3]>=threshold)]\n        self.metadata['nb_points'] = len(self.points)\n        self.metadata['height'] = 1\n        self.metadata['width'] = self.metadata['nb_points']\n#+end_src\n\n** transform pointcloud\n#+begin_src python :tangle naps_utilities/pointcloud.py\n    def transform(self, matrix):\n        if self.metadata['is_populated']:\n            self.points[:,:3] = np.transpose(\n                matrix @ np.concatenate((self.points[:,:3].transpose(),\n                                         np.ones((1, self.metadata['nb_points'])))))[:,:3]\n            self.matrix = matrix\n            self.metadata['procrastinated'] = False\n        else:\n            raise TransformWhileEmpty(\"Populate pointcloud before applying transform to it\")\n#+end_src\n** add points\n#+begin_src python :tangle naps_utilities/pointcloud.py\n    def update(self, pointcloud):\n        if self.metadata['keep_ring']:\n            if pointcloud.metadata['keep_ring']:\n                self.rings = np.ascontiguousarray(np.concatenate((self.rings, pointcloud.rings)))\n            else:\n                return False\n        self.points = np.ascontiguousarray(np.concatenate((self.points, pointcloud.points)))\n        self.metadata['nb_points'] = len(self.points)\n        self.metadata['height'] = 1\n        self.metadata['width'] = self.metadata['nb_points']\n        return True\n#+end_src\n\n** add areas to filter\n\nCette méthode permet d'ajouter des zones à filtrer ultérieurement. Il\ns'agit ici de stocker les zones qui correspondent aux différents\nrobots de notre système. En effet, on ne souhaite pas ajouter ces\nrobots dans la carte d'autant plus qu'ils sont mobiles.\n#+begin_src python :tangle naps_utilities/pointcloud.py\n    def set_devices(self, names, matrices):\n        self.devices_names = names\n        self.devices_matrices = np.asarray(matrices)\n#+end_src\n\n** Export/Import\n#+begin_src python :tangle naps_utilities/pointcloud.py\n    def save(self, path):\n        self.save_npz(path)\n#+end_src\n*** npz\n#+begin_src python :tangle naps_utilities/pointcloud.py\n    def save_npz(self, path):\n        save_path = os.path.expanduser(path)\n        # with open('{}_meta.json'.format(save_path), 'w') as outfile:\n        #     json.dump(self.metadata, outfile, indent=4)\n\n        np.savez_compressed('{}'.format(save_path),\n                            meta=[self.metadata],\n                            points=self.points,\n                            rings=self.rings,\n                            matrix=self.matrix,\n                            devices_names=self.devices_names,\n                            devices_matrices=self.devices_matrices)\n#+end_src\n\n#+begin_src python :tangle naps_utilities/pointcloud.py\n    def load(self, path):\n        load_path = os.path.expanduser(path)\n        # with open('{}_meta.json'.format(load_path), 'r') as infile:\n        #     self.metadata = json.load(infile)\n\n        with np.load(load_path, allow_pickle=True) as data:\n            self.metadata = data['meta'][0]\n            if 'matrix' in data:\n                self.matrix = data['matrix']\n            if 'points' in data:\n                self.points = data['points']\n            if 'rings' in data:\n                self.rings = data['rings']\n            if 'devices_names' in data:\n                self.devices_names = data['devices_names']\n            if 'devices_matrices' in data:\n                self.devices_matrices = data['devices_matrices']\n#+end_src\n*** xyz\n#+begin_src python :tangle naps_utilities/pointcloud.py\n    def save_xyz(self, path):\n        save_path = os.path.expanduser(path)\n        np.savetxt('{}.xyz'.format(save_path), self.points)\n        #with open('{}.xyz'.format(save_path), 'w') as outfile:\n        #     json.dump(self.metadata, outfile, indent=4)\n#+end_src\n\n* Conversions dépendantes de ROS\n\n** Mise à dispo:\n\n** Dependances\n#+begin_src python :tangle naps_utilities/conversion.py\n#Nécessaire pour la conversion vers/depuis ROS2\nfrom builtin_interfaces.msg import Time\nfrom sensor_msgs.msg import PointCloud2\nfrom sensor_msgs.msg import PointField\nfrom std_msgs.msg import Header\n\nfrom array import array\n#+end_src\n** to ros header\nConversion vers Header ROS:\n#+begin_src python :tangle naps_utilities/conversion.py\n  def to_ros_header(header_data):\n      return Header(stamp=Time(\n          sec=header_data['time']['sec'],\n          nanosec=header_data['time']['nanosec']),\n               frame_id=header_data['frame_id'])\n#+end_src\n** to ros Pointfield\nConversion vers Pointfield:\n#+begin_src python :tangle naps_utilities/conversion.py\n  def to_ros_pointfields(pointfields_data):\n      return [PointField(name=field['name'],\n                    offset=field['offset'],\n                    datatype=field['datatype'],\n                    count=field['count']) for field in pointfields_data]\n#+end_src\n** pointcloud to msg\nBeaucoup de symétrie avec la fonction précedante.\n#+begin_src python :tangle naps_utilities/conversion.py\n  def to_ros_PointCloud2(pc):\n      msg = PointCloud2()\n      #Données conservées \"telles quelles\"\n\n      msg.height = pc.metadata['height']\n      msg.width = pc.metadata['width']\n\n      msg.is_bigendian = pc.metadata['is_bigendian']\n      msg.point_step = pc.metadata['point_step']\n      msg.row_step = pc.metadata['row_step']\n\n      msg.is_dense = pc.metadata['is_dense']\n      msg.header = to_header(pc.metadata['header'])\n      msg.fields = to_pointfields(pc.metadata['fields'])\n#+end_src\n\nDeux cas, selon la valeur de 'keep_ring':\n\nSi on garde les rings, il faut concatener les deux tableaux et en\nfaire un array de uint8.\n#+begin_src python :tangle naps_utilities/conversion.py\n      if pc.metadata['keep_ring']:\n          msg.data = array('B', np.concatenate(\n              (pc.points.view(dtype=np.uint8),\n               pc.rings.reshape((pc.metadata['nb_points'], -1)).view(dtype=np.uint8)),\n              axis=1).ravel().tolist())\n#+end_src\nSinon, il suffi de créer une liste de uint8 à partir des points au\nniveau des données.\n#+begin_src python :tangle naps_utilities/conversion.py\n        else:\n            msg.data = array('B', self.points.view(dtype=np.uint8).ravel().tolist())\n        return msg\n#+end_src\n* Tests\n#+begin_src ipython :session session01 :file  :exports both\nimport numpy as np\nfrom naps_utilities import Pointcloud\npoints = [[0, 0, 0, 4],\n          [1, 0, 0, 5],\n          [0, 1, 0, 105],\n          [0, 0, 1, 452],]\np = Pointcloud(points=points)\n#+end_src\n\n#+RESULTS:\n: # Out[9]:\n\n#+begin_src ipython :session session01 :file  :exports both\np = Pointcloud(points=points)\n#+end_src\n* Build et distribution\n#+begin_src bash :results value verbatim :exports both\nrm -r build dist naps_utilities.egg-info\npython setup.py bdist_wheel sdist\n#+end_src\n\n#+RESULTS:\n#+begin_example\nrunning bdist_wheel\nrunning build\nrunning build_py\ncopying naps_utilities/conversion.py -> build/lib/naps_utilities\ncopying naps_utilities/pointcloud.py -> build/lib/naps_utilities\ncopying naps_utilities/transform.py -> build/lib/naps_utilities\ncopying naps_utilities/tranform.py -> build/lib/naps_utilities\ncopying naps_utilities/__init__.py -> build/lib/naps_utilities\ninstalling to build/bdist.linux-x86_64/wheel\nrunning install\nrunning install_lib\ncreating build/bdist.linux-x86_64/wheel\ncreating build/bdist.linux-x86_64/wheel/naps_utilities\ncopying build/lib/naps_utilities/conversion.py -> build/bdist.linux-x86_64/wheel/naps_utilities\ncopying build/lib/naps_utilities/pointcloud.py -> build/bdist.linux-x86_64/wheel/naps_utilities\ncopying build/lib/naps_utilities/transform.py -> build/bdist.linux-x86_64/wheel/naps_utilities\ncopying build/lib/naps_utilities/tranform.py -> build/bdist.linux-x86_64/wheel/naps_utilities\ncopying build/lib/naps_utilities/__init__.py -> build/bdist.linux-x86_64/wheel/naps_utilities\nrunning install_egg_info\nrunning egg_info\nwriting naps_utilities.egg-info/PKG-INFO\nwriting dependency_links to naps_utilities.egg-info/dependency_links.txt\nwriting requirements to naps_utilities.egg-info/requires.txt\nwriting top-level names to naps_utilities.egg-info/top_level.txt\nreading manifest file 'naps_utilities.egg-info/SOURCES.txt'\nwriting manifest file 'naps_utilities.egg-info/SOURCES.txt'\nCopying naps_utilities.egg-info to build/bdist.linux-x86_64/wheel/naps_utilities-0.3.2-py3.8.egg-info\nrunning install_scripts\ncreating build/bdist.linux-x86_64/wheel/naps_utilities-0.3.2.dist-info/WHEEL\ncreating 'dist/naps_utilities-0.3.2-py3-none-any.whl' and adding 'build/bdist.linux-x86_64/wheel' to it\nadding 'naps_utilities/__init__.py'\nadding 'naps_utilities/conversion.py'\nadding 'naps_utilities/pointcloud.py'\nadding 'naps_utilities/tranform.py'\nadding 'naps_utilities/transform.py'\nadding 'naps_utilities-0.3.2.dist-info/METADATA'\nadding 'naps_utilities-0.3.2.dist-info/WHEEL'\nadding 'naps_utilities-0.3.2.dist-info/top_level.txt'\nadding 'naps_utilities-0.3.2.dist-info/RECORD'\nremoving build/bdist.linux-x86_64/wheel\nrunning sdist\nrunning check\ncreating naps_utilities-0.3.2\ncreating naps_utilities-0.3.2/naps_utilities\ncreating naps_utilities-0.3.2/naps_utilities.egg-info\ncopying files to naps_utilities-0.3.2...\ncopying setup.py -> naps_utilities-0.3.2\ncopying naps_utilities/__init__.py -> naps_utilities-0.3.2/naps_utilities\ncopying naps_utilities/conversion.py -> naps_utilities-0.3.2/naps_utilities\ncopying naps_utilities/pointcloud.py -> naps_utilities-0.3.2/naps_utilities\ncopying naps_utilities/tranform.py -> naps_utilities-0.3.2/naps_utilities\ncopying naps_utilities/transform.py -> naps_utilities-0.3.2/naps_utilities\ncopying naps_utilities.egg-info/PKG-INFO -> naps_utilities-0.3.2/naps_utilities.egg-info\ncopying naps_utilities.egg-info/SOURCES.txt -> naps_utilities-0.3.2/naps_utilities.egg-info\ncopying naps_utilities.egg-info/dependency_links.txt -> naps_utilities-0.3.2/naps_utilities.egg-info\ncopying naps_utilities.egg-info/requires.txt -> naps_utilities-0.3.2/naps_utilities.egg-info\ncopying naps_utilities.egg-info/top_level.txt -> naps_utilities-0.3.2/naps_utilities.egg-info\nWriting naps_utilities-0.3.2/setup.cfg\nCreating tar archive\nremoving 'naps_utilities-0.3.2' (and everything under it)\n#+end_example\n\n\n#+begin_src bash :results value verbatim :exports both\ntwine upload dist/*\n#+end_src\n\n#+RESULTS:\n\n#+begin_src bash :results value verbatim :exports both\npip3 install -e .\n#+end_src\n\n#+RESULTS:\n#+begin_example\nObtaining file:///home/virgile/naps_utilities\nCollecting numpy (from naps-utilities==0.2.0)\n  Using cached https://files.pythonhosted.org/packages/62/20/4d43e141b5bc426ba38274933ef8e76e85c7adea2c321ecf9ebf7421cedf/numpy-1.18.1-cp36-cp36m-manylinux1_x86_64.whl\nCollecting numpy-quaternion (from naps-utilities==0.2.0)\nInstalling collected packages: numpy, numpy-quaternion, naps-utilities\n  Found existing installation: naps-utilities 0.2.0\n    Uninstalling naps-utilities-0.2.0:\n      Successfully uninstalled naps-utilities-0.2.0\n  Running setup.py develop for naps-utilities\nSuccessfully installed naps-utilities numpy-1.18.1 numpy-quaternion-2019.12.11.22.25.52\n#+end_example\n\n\n",
    "description_content_type": "text/plain",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/virgileTN/naps_utilities",
    "keywords": "pointclouds,filtering",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "naps-utilities",
    "package_url": "https://pypi.org/project/naps-utilities/",
    "platform": "",
    "project_url": "https://pypi.org/project/naps-utilities/",
    "project_urls": {
      "Homepage": "https://github.com/virgileTN/naps_utilities"
    },
    "release_url": "https://pypi.org/project/naps-utilities/0.3.2/",
    "requires_dist": [
      "numpy",
      "numpy-quaternion"
    ],
    "requires_python": "",
    "summary": "Lib to handle ease of use of pointclouds",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8587953,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "508895da8769a4949b684b3e61f70b30be3b1f4aaec8faee1faf6f267d0e2175",
          "md5": "1bbcaf1ac1e300090ad36c46d9f8ab84",
          "sha256": "7780e39d80ec0390906fb3ba2672f789605f7bbd114adf069650e304c8c83212"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1bbcaf1ac1e300090ad36c46d9f8ab84",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6736,
        "upload_time": "2020-02-26T10:35:45",
        "upload_time_iso_8601": "2020-02-26T10:35:45.355720Z",
        "url": "https://files.pythonhosted.org/packages/50/88/95da8769a4949b684b3e61f70b30be3b1f4aaec8faee1faf6f267d0e2175/naps_utilities-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9ae00f4151bc4ea2876401d03409067b6f4a0f7f5c3428a50940c35b5f205fd",
          "md5": "40ca0e61333d44aa10df0549610c2264",
          "sha256": "c815021ddafeb2232c403c97065c1606608d57cc76fd1c4dad41912ecc4dde28"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "40ca0e61333d44aa10df0549610c2264",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5201,
        "upload_time": "2020-02-26T10:35:47",
        "upload_time_iso_8601": "2020-02-26T10:35:47.429948Z",
        "url": "https://files.pythonhosted.org/packages/f9/ae/00f4151bc4ea2876401d03409067b6f4a0f7f5c3428a50940c35b5f205fd/naps_utilities-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1ffe258757385d0816c6c769524e1394411aa1ce80b4da3791541bd1ea5c9e3",
          "md5": "f86bf4227dcc43a0ebb37bf549ea0f4e",
          "sha256": "5ccbbaf3f94473311339ebfa65670d03352bdb5c92c037758b73c65f9f29fc5b"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f86bf4227dcc43a0ebb37bf549ea0f4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7951,
        "upload_time": "2020-02-26T15:24:18",
        "upload_time_iso_8601": "2020-02-26T15:24:18.587911Z",
        "url": "https://files.pythonhosted.org/packages/e1/ff/e258757385d0816c6c769524e1394411aa1ce80b4da3791541bd1ea5c9e3/naps_utilities-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8393b7796beb23d84a259235aa6263241152ef4e6b9a0a7750a1cdeec8d52ea0",
          "md5": "e1aa5e01072a7fe0e84b41f6a119d4df",
          "sha256": "2d31ed940049df87e42a4c567a1a5b9bf9900f2491d576be7ae01e43d2b58ec0"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e1aa5e01072a7fe0e84b41f6a119d4df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8448,
        "upload_time": "2020-02-26T15:24:19",
        "upload_time_iso_8601": "2020-02-26T15:24:19.894851Z",
        "url": "https://files.pythonhosted.org/packages/83/93/b7796beb23d84a259235aa6263241152ef4e6b9a0a7750a1cdeec8d52ea0/naps_utilities-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2316fb54a7649a5f3eca574f7edb4c0073f92b54f44076cb9df86a2f0968bb6",
          "md5": "7cf4f63c57c7998c1d297b010989e066",
          "sha256": "f6ef813999e8d0cf754cdc964669c5dbbbe5bc163d0958e038c155fb69f3b398"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7cf4f63c57c7998c1d297b010989e066",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10630,
        "upload_time": "2020-02-27T13:39:56",
        "upload_time_iso_8601": "2020-02-27T13:39:56.375338Z",
        "url": "https://files.pythonhosted.org/packages/f2/31/6fb54a7649a5f3eca574f7edb4c0073f92b54f44076cb9df86a2f0968bb6/naps_utilities-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b596885f3b4ea7556356eaff96cca83a6c76aee0f0c1a08219965d6a5c490366",
          "md5": "0d6570db001cec6f2de96e5f418bcf3c",
          "sha256": "db0ae96ebc81d757a6f622b43e6a03bfc418a20ca4990eb5f6971fd78f9b9904"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0d6570db001cec6f2de96e5f418bcf3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12079,
        "upload_time": "2020-02-27T13:39:58",
        "upload_time_iso_8601": "2020-02-27T13:39:58.028669Z",
        "url": "https://files.pythonhosted.org/packages/b5/96/885f3b4ea7556356eaff96cca83a6c76aee0f0c1a08219965d6a5c490366/naps_utilities-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a37912d438fd3d7585cd717120a83b9281820d7adcec6599cbdb932e885b70b",
          "md5": "abcc899cdea32cac7770b655707ede0b",
          "sha256": "1633b4ba752e00c50dc031b384ed5ae55a357d762b68ae28f3c2de52ea017722"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "abcc899cdea32cac7770b655707ede0b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12377,
        "upload_time": "2020-06-10T08:47:45",
        "upload_time_iso_8601": "2020-06-10T08:47:45.653057Z",
        "url": "https://files.pythonhosted.org/packages/8a/37/912d438fd3d7585cd717120a83b9281820d7adcec6599cbdb932e885b70b/naps_utilities-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7050151a919a63ac9e378b5ab8526aec81552dfdcbd8edaa64a15821db4ec0d6",
          "md5": "9bc36aae18dfaeb167ef3102b4104325",
          "sha256": "a45292ee1aa2f0cdaafdc869d026d2b5a021f0063fb62c48b1f3ace7b69aee14"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9bc36aae18dfaeb167ef3102b4104325",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14509,
        "upload_time": "2020-06-10T08:47:47",
        "upload_time_iso_8601": "2020-06-10T08:47:47.445901Z",
        "url": "https://files.pythonhosted.org/packages/70/50/151a919a63ac9e378b5ab8526aec81552dfdcbd8edaa64a15821db4ec0d6/naps_utilities-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66ecb907e9d603f0412b3e781d165edc5a333f3c77fe3609157a2de15316d9cf",
          "md5": "d17978c192a6cac3b421cde73bd4643b",
          "sha256": "bdfca900f143a568b5bcf905de6b2aacc4849b18a529d32f0b027b4b09783b2b"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d17978c192a6cac3b421cde73bd4643b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12677,
        "upload_time": "2020-06-10T09:19:15",
        "upload_time_iso_8601": "2020-06-10T09:19:15.886886Z",
        "url": "https://files.pythonhosted.org/packages/66/ec/b907e9d603f0412b3e781d165edc5a333f3c77fe3609157a2de15316d9cf/naps_utilities-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ede3755acb4fb5b64a04de1cecd8f257533f5a907f93aa90e9771c8ee71a51eb",
          "md5": "1e686fdab087b6ca84e0e17eb07b0383",
          "sha256": "8afc55874edc923fd9e3c6e1af5f98c7878e6b3fefbf8d90b0d4c0c816f0af79"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1e686fdab087b6ca84e0e17eb07b0383",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15116,
        "upload_time": "2020-06-10T09:19:17",
        "upload_time_iso_8601": "2020-06-10T09:19:17.534790Z",
        "url": "https://files.pythonhosted.org/packages/ed/e3/755acb4fb5b64a04de1cecd8f257533f5a907f93aa90e9771c8ee71a51eb/naps_utilities-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52d37edc7c56b72c6ad01779d203db682042f9beebc829c3cbf8b0693903755f",
          "md5": "2818bd8cf72bb66825eb973a54ee442d",
          "sha256": "b425a2a235d16a5f75dea338795c045385405faab523438ff87de1439297b761"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2818bd8cf72bb66825eb973a54ee442d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12703,
        "upload_time": "2020-06-10T13:38:34",
        "upload_time_iso_8601": "2020-06-10T13:38:34.715831Z",
        "url": "https://files.pythonhosted.org/packages/52/d3/7edc7c56b72c6ad01779d203db682042f9beebc829c3cbf8b0693903755f/naps_utilities-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "374dd9c92c32b243a37cc3d0be50686bee39e2b1ee6b570ba9998b24ee52a6a8",
          "md5": "65c6e5c4db0696e952b50350b031c247",
          "sha256": "28c7414662921f6451f482bc74f55a19d2568b429f917465ff542ecea1665f47"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "65c6e5c4db0696e952b50350b031c247",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16441,
        "upload_time": "2020-06-10T13:38:36",
        "upload_time_iso_8601": "2020-06-10T13:38:36.312736Z",
        "url": "https://files.pythonhosted.org/packages/37/4d/d9c92c32b243a37cc3d0be50686bee39e2b1ee6b570ba9998b24ee52a6a8/naps_utilities-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfa91f1df196acf78c10354e6713aca1b973c09e66c6550c9ae691af768dbe5c",
          "md5": "aa10103cb93c3d69ad1b219780211f7f",
          "sha256": "42f75f276c7cebf044293028ba6b9bdfb6088c4c6d347078c60f164a3fdd4798"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa10103cb93c3d69ad1b219780211f7f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12705,
        "upload_time": "2020-06-10T13:42:37",
        "upload_time_iso_8601": "2020-06-10T13:42:37.572511Z",
        "url": "https://files.pythonhosted.org/packages/bf/a9/1f1df196acf78c10354e6713aca1b973c09e66c6550c9ae691af768dbe5c/naps_utilities-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9988af687d626463e3bb22194335d8f4f53a4669796bd1ec2ddf71e159cb7aec",
          "md5": "0be007d016f98d235cbb2ae8ce0c228f",
          "sha256": "45be2908e26f8ea8a0991ddba2a7763812e8bf29cabe682294a7a0ca83f2d7ea"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0be007d016f98d235cbb2ae8ce0c228f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16431,
        "upload_time": "2020-06-10T13:42:39",
        "upload_time_iso_8601": "2020-06-10T13:42:39.080444Z",
        "url": "https://files.pythonhosted.org/packages/99/88/af687d626463e3bb22194335d8f4f53a4669796bd1ec2ddf71e159cb7aec/naps_utilities-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc9a1c14c8e8bdd0175410535b7b3ba5b232aedee18d432843e8bca4b4544cf7",
          "md5": "f3b9f0560628970ee80f2d0ee983d1b9",
          "sha256": "b6de8c2dd3003a63442ebb1c0759af519812f66280426f540e4b8a3a36076762"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f3b9f0560628970ee80f2d0ee983d1b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13006,
        "upload_time": "2020-06-10T13:47:34",
        "upload_time_iso_8601": "2020-06-10T13:47:34.292779Z",
        "url": "https://files.pythonhosted.org/packages/dc/9a/1c14c8e8bdd0175410535b7b3ba5b232aedee18d432843e8bca4b4544cf7/naps_utilities-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "847ed1d718e2b4254b9ee75030d3e77fe03bc6623beb5a99a0874b86473f542d",
          "md5": "10c740af7caded2cce769524fdb3d1d7",
          "sha256": "31a3cdf65830b156e612f5bfeeb68a449bcd5e39b264d42bdaa24fe3bbb9116c"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "10c740af7caded2cce769524fdb3d1d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16622,
        "upload_time": "2020-06-10T13:47:35",
        "upload_time_iso_8601": "2020-06-10T13:47:35.541708Z",
        "url": "https://files.pythonhosted.org/packages/84/7e/d1d718e2b4254b9ee75030d3e77fe03bc6623beb5a99a0874b86473f542d/naps_utilities-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54e740da026c0805fff7416bb6ef860f28ca36f5af7c183181428a823f0be6fc",
          "md5": "d3743b4b07adf871e766d2c91e561b23",
          "sha256": "bfea3a93b7a26ac43230b601bf1fc8f64efe5c98b9fc904c815b4a40101c1e0f"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3743b4b07adf871e766d2c91e561b23",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13008,
        "upload_time": "2020-06-10T13:51:22",
        "upload_time_iso_8601": "2020-06-10T13:51:22.383810Z",
        "url": "https://files.pythonhosted.org/packages/54/e7/40da026c0805fff7416bb6ef860f28ca36f5af7c183181428a823f0be6fc/naps_utilities-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "071ee20882f8c530c06c9b859fc040902cb6f44191dfc386c9d6e81bf55db6fc",
          "md5": "2d1603466b321e95dc29ba0b4a2e4c5f",
          "sha256": "5e824c0f67163a3b16c169a963a6cb774b42992e7bf9c0c098675a657fa4df1b"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2d1603466b321e95dc29ba0b4a2e4c5f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16634,
        "upload_time": "2020-06-10T13:51:23",
        "upload_time_iso_8601": "2020-06-10T13:51:23.883850Z",
        "url": "https://files.pythonhosted.org/packages/07/1e/e20882f8c530c06c9b859fc040902cb6f44191dfc386c9d6e81bf55db6fc/naps_utilities-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8456bb299283b65f763da7482ee26706cd53bd57f997e8b06c723452a65d860",
          "md5": "d1399a21547ff4abb5dbc9628e0b2552",
          "sha256": "696916bc3813b7a2fe54374220463a1d09df5a95b94161925b7f44d62100610b"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1399a21547ff4abb5dbc9628e0b2552",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13105,
        "upload_time": "2020-10-15T15:10:28",
        "upload_time_iso_8601": "2020-10-15T15:10:28.143775Z",
        "url": "https://files.pythonhosted.org/packages/f8/45/6bb299283b65f763da7482ee26706cd53bd57f997e8b06c723452a65d860/naps_utilities-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea63d108918978dd97cde290dc3528a4ce4a2fe42653d71fbd23653c04bcb3f2",
          "md5": "caabcd007709f3412e6cc86c3fa47b96",
          "sha256": "e5e129e512e9204a5aab4d740f50ae52695a06a53b3386e397c216e01faf9eb1"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "caabcd007709f3412e6cc86c3fa47b96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16939,
        "upload_time": "2020-10-15T15:10:30",
        "upload_time_iso_8601": "2020-10-15T15:10:30.063927Z",
        "url": "https://files.pythonhosted.org/packages/ea/63/d108918978dd97cde290dc3528a4ce4a2fe42653d71fbd23653c04bcb3f2/naps_utilities-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5aa6aabb103e7cf66090f5db6a98590b27b68e00fe8b9255d5d79949f1661f4",
          "md5": "e12f5e479809df6c93950fb0b49ad181",
          "sha256": "e80e0940fef32f62cd47140b3b2058e84f6fcd89e2cfbd52a00858e582be0914"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e12f5e479809df6c93950fb0b49ad181",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13115,
        "upload_time": "2020-10-29T09:54:11",
        "upload_time_iso_8601": "2020-10-29T09:54:11.480755Z",
        "url": "https://files.pythonhosted.org/packages/d5/aa/6aabb103e7cf66090f5db6a98590b27b68e00fe8b9255d5d79949f1661f4/naps_utilities-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a9d52289b179a0efea1a12e9f27d0bd4cb029660976576e41739e19a237e41d",
          "md5": "2c7074cfb28939cd5b46485c124bd941",
          "sha256": "9e09c0d4b5ee68aa8670b9c6a6156360d2ea8dce48cde4823bf221b398e772dc"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2c7074cfb28939cd5b46485c124bd941",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17030,
        "upload_time": "2020-10-29T09:54:13",
        "upload_time_iso_8601": "2020-10-29T09:54:13.221808Z",
        "url": "https://files.pythonhosted.org/packages/4a/9d/52289b179a0efea1a12e9f27d0bd4cb029660976576e41739e19a237e41d/naps_utilities-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1711d8249c6519f4e1bca209e25208c805f72949ff49fe7de652f9eed60374a5",
          "md5": "01588e7fe3f01150078aa26612adc20d",
          "sha256": "66ded614714997e292faf519e391bfce2a9dfed7da71b7c9db002a8b8b7fd3ea"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01588e7fe3f01150078aa26612adc20d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13128,
        "upload_time": "2020-11-05T13:43:18",
        "upload_time_iso_8601": "2020-11-05T13:43:18.090787Z",
        "url": "https://files.pythonhosted.org/packages/17/11/d8249c6519f4e1bca209e25208c805f72949ff49fe7de652f9eed60374a5/naps_utilities-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d89276d3e8200f73c57e2997a8000c8b8b3f18cbe0c008adda91e7809732155",
          "md5": "6d922c8022182797ab8a16cc82125c11",
          "sha256": "a8b6c51cfc69ea729c2a2098e34479899b88cb0aa123e6d4362160c8a2b7143d"
        },
        "downloads": -1,
        "filename": "naps_utilities-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6d922c8022182797ab8a16cc82125c11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16994,
        "upload_time": "2020-11-05T13:43:20",
        "upload_time_iso_8601": "2020-11-05T13:43:20.675010Z",
        "url": "https://files.pythonhosted.org/packages/6d/89/276d3e8200f73c57e2997a8000c8b8b3f18cbe0c008adda91e7809732155/naps_utilities-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1711d8249c6519f4e1bca209e25208c805f72949ff49fe7de652f9eed60374a5",
        "md5": "01588e7fe3f01150078aa26612adc20d",
        "sha256": "66ded614714997e292faf519e391bfce2a9dfed7da71b7c9db002a8b8b7fd3ea"
      },
      "downloads": -1,
      "filename": "naps_utilities-0.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "01588e7fe3f01150078aa26612adc20d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 13128,
      "upload_time": "2020-11-05T13:43:18",
      "upload_time_iso_8601": "2020-11-05T13:43:18.090787Z",
      "url": "https://files.pythonhosted.org/packages/17/11/d8249c6519f4e1bca209e25208c805f72949ff49fe7de652f9eed60374a5/naps_utilities-0.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6d89276d3e8200f73c57e2997a8000c8b8b3f18cbe0c008adda91e7809732155",
        "md5": "6d922c8022182797ab8a16cc82125c11",
        "sha256": "a8b6c51cfc69ea729c2a2098e34479899b88cb0aa123e6d4362160c8a2b7143d"
      },
      "downloads": -1,
      "filename": "naps_utilities-0.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6d922c8022182797ab8a16cc82125c11",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16994,
      "upload_time": "2020-11-05T13:43:20",
      "upload_time_iso_8601": "2020-11-05T13:43:20.675010Z",
      "url": "https://files.pythonhosted.org/packages/6d/89/276d3e8200f73c57e2997a8000c8b8b3f18cbe0c008adda91e7809732155/naps_utilities-0.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}