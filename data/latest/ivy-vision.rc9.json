{
  "info": {
    "author": "Ivy Team",
    "author_email": "ivydl.team@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License"
    ],
    "description": ".. image:: https://github.com/ivy-dl/vision/blob/master/docs/partial_source/logos/logo.png?raw=true\n   :width: 100%\n\n\n\n**3D Vision functions with end-to-end support for machine learning developers, written in Ivy.**\n\n\n\n.. image:: https://github.com/ivy-dl/ivy-dl.github.io/blob/master/img/externally_linked/logos/supported/frameworks.png?raw=true\n   :width: 100%\n\nContents\n--------\n\n* `Overview`_\n* `Run Through`_\n* `Interactive Demos`_\n* `Get Involed`_\n\nOverview\n--------\n\n.. _docs: https://ivy-dl.org/vision\n\n**What is Ivy Vision?**\n\nIvy vision focuses predominantly on 3D vision, with functions for camera geometry, image projections,\nco-ordinate frame transformations, forward warping, inverse warping, optical flow, depth triangulation, voxel grids,\npoint clouds, signed distance functions, and others.  Check out the docs_ for more info!\n\nThe library is built on top of the Ivy machine learning framework.\nThis means all functions simultaneously support:\nJax, Tensorflow, PyTorch, MXNet, and Numpy.\n\n**Ivy Libraries**\n\nThere are a host of derived libraries written in Ivy, in the areas of mechanics, 3D vision, robotics, gym environments,\nneural memory, pre-trained models + implementations, and builder tools with trainers, data loaders and more. Click on\nthe icons below to learn more!\n\n\n\n.. image:: https://github.com/ivy-dl/ivy-dl.github.io/blob/master/img/externally_linked/ivy_libraries.png?raw=true\n   :width: 100%\n\n\n\n\n\n\n\n\n\n\n\n\n\n**Quick Start**\n\nIvy vision can be installed like so: ``pip install ivy-vision``\n\n.. _demos: https://github.com/ivy-dl/vision/tree/master/ivy_vision_demos\n.. _interactive: https://github.com/ivy-dl/vision/tree/master/ivy_vision_demos/interactive\n\nTo quickly see the different aspects of the library, we suggest you check out the demos_!\nwe suggest you start by running the script ``run_through.py``,\nand read the \"Run Through\" section below which explains this script.\n\nFor more interactive demos, we suggest you run either\n``coords_to_voxel_grid.py`` or ``render_image.py`` in the interactive_ demos folder.\n\nRun Through\n-----------\n\nWe run through some of the different parts of the library via a simple ongoing example script.\nThe full script is available in the demos_ folder, as file ``run_through.py``.\nFirst, we select a random backend framework to use for the examples, from the options\n``ivy.jax``, ``ivy.tensorflow``, ``ivy.torch``, ``ivy.mxnet`` or ``ivy.numpy``,\nand use this to set the ivy backend framework.\n\n.. code-block:: python\n\n    import ivy\n    from ivy_demo_utils.framework_utils import choose_random_framework\n    ivy.set_framework(choose_random_framework())\n\n**Camera Geometry**\n\nTo get to grips with some of the basics, we next show how to construct ivy containers which represent camera geometry.\nThe camera intrinsic matrix, extrinsic matrix, full matrix, and all of their inverses are central to most of the\nfunctions in this library.\n\nAll of these matrices are contained within the Ivy camera geometry class.\n\n.. code-block:: python\n\n    # intrinsics\n\n    # common intrinsic params\n    img_dims = [512, 512]\n    pp_offsets = ivy.array([dim / 2 - 0.5 for dim in img_dims], 'float32')\n    cam_persp_angles = ivy.array([60 * np.pi / 180] * 2, 'float32')\n\n    # ivy cam intrinsics container\n    intrinsics = ivy_vision.persp_angles_and_pp_offsets_to_intrinsics_object(\n        cam_persp_angles, pp_offsets, img_dims)\n\n    # extrinsics\n\n    # 3 x 4\n    cam1_inv_ext_mat = ivy.array(np.load(data_dir + '/cam1_inv_ext_mat.npy'), 'float32')\n    cam2_inv_ext_mat = ivy.array(np.load(data_dir + '/cam2_inv_ext_mat.npy'), 'float32')\n\n    # full geometry\n\n    # ivy cam geometry container\n    cam1_geom = ivy_vision.inv_ext_mat_and_intrinsics_to_cam_geometry_object(\n        cam1_inv_ext_mat, intrinsics)\n    cam2_geom = ivy_vision.inv_ext_mat_and_intrinsics_to_cam_geometry_object(\n        cam2_inv_ext_mat, intrinsics)\n    cam_geoms = [cam1_geom, cam2_geom]\n\nThe geometries used in this quick start demo are based upon the scene presented below.\n\n.. image:: https://github.com/ivy-dl/vision/blob/master/docs/partial_source/images/scene.png?raw=true\n   :width: 100%\n\nThe code sample below demonstrates all of the attributes contained within the Ivy camera geometry class.\n\n.. code-block:: python\n\n    for cam_geom in cam_geoms:\n\n        assert cam_geom.intrinsics.focal_lengths.shape == (2,)\n        assert cam_geom.intrinsics.persp_angles.shape == (2,)\n        assert cam_geom.intrinsics.pp_offsets.shape == (2,)\n        assert cam_geom.intrinsics.calib_mats.shape == (3, 3)\n        assert cam_geom.intrinsics.inv_calib_mats.shape == (3, 3)\n\n        assert cam_geom.extrinsics.cam_centers.shape == (3, 1)\n        assert cam_geom.extrinsics.Rs.shape == (3, 3)\n        assert cam_geom.extrinsics.inv_Rs.shape == (3, 3)\n        assert cam_geom.extrinsics.ext_mats_homo.shape == (4, 4)\n        assert cam_geom.extrinsics.inv_ext_mats_homo.shape == (4, 4)\n\n        assert cam_geom.full_mats_homo.shape == (4, 4)\n        assert cam_geom.inv_full_mats_homo.shape == (4, 4)\n\n**Load Images**\n\nWe next load the color and depth images corresponding to the two camera frames.\nWe also construct the depth-scaled homogeneous pixel co-ordinates for each image,\nwhich is a central representation for the ivy_vision functions.\nThis representation simplifies projections between frames.\n\n.. code-block:: python\n\n    # load images\n\n    # h x w x 3\n    color1 = ivy.array(cv2.imread(data_dir + '/rgb1.png').astype(np.float32) / 255)\n    color2 = ivy.array(cv2.imread(data_dir + '/rgb2.png').astype(np.float32) / 255)\n\n    # h x w x 1\n    depth1 = ivy.array(np.reshape(np.frombuffer(cv2.imread(\n        data_dir + '/depth1.png', -1).tobytes(), np.float32), img_dims + [1]))\n    depth2 = ivy.array(np.reshape(np.frombuffer(cv2.imread(\n        data_dir + '/depth2.png', -1).tobytes(), np.float32), img_dims + [1]))\n\n    # depth scaled pixel coords\n\n    # h x w x 3\n    u_pix_coords = ivy_vision.create_uniform_pixel_coords_image(img_dims)\n    ds_pixel_coords1 = u_pix_coords * depth1\n    ds_pixel_coords2 = u_pix_coords * depth2\n\nThe rgb and depth images are presented below.\n\n.. image:: https://github.com/ivy-dl/vision/blob/master/docs/partial_source/images/rgb_and_depth.png?raw=true\n   :width: 100%\n\n**Optical Flow and Depth Triangulation**\n\nNow that we have two cameras, their geometries, and their images fully defined,\nwe can start to apply some of the more interesting vision functions.\nWe start with some optical flow and depth triangulation functions.\n\n.. code-block:: python\n\n    # required mat formats\n    cam1to2_full_mat_homo = ivy.matmul(cam2_geom.full_mats_homo, cam1_geom.inv_full_mats_homo)\n    cam1to2_full_mat = cam1to2_full_mat_homo[..., 0:3, :]\n    full_mats_homo = ivy.concatenate((ivy.expand_dims(cam1_geom.full_mats_homo, 0),\n                                      ivy.expand_dims(cam2_geom.full_mats_homo, 0)), 0)\n    full_mats = full_mats_homo[..., 0:3, :]\n\n    # flow\n    flow1to2 = ivy_vision.flow_from_depth_and_cam_mats(ds_pixel_coords1, cam1to2_full_mat)\n\n    # depth again\n    depth1_from_flow = ivy_vision.depth_from_flow_and_cam_mats(flow1to2, full_mats)\n\nVisualizations of these images are given below.\n\n.. image:: https://github.com/ivy-dl/vision/blob/master/docs/partial_source/images/flow_and_depth.png?raw=true\n   :width: 100%\n\n**Inverse and Forward Warping**\n\nMost of the vision functions, including the flow and depth functions above,\nmake use of image projections,\nwhereby an image of depth-scaled homogeneous pixel-coordinates is transformed into\ncartesian co-ordinates relative to the acquiring camera, the world, another camera,\nor transformed directly to pixel co-ordinates in another camera frame.\nThese projections also allow warping of the color values from one camera to another.\n\nFor inverse warping, we assume depth to be known for the target frame.\nWe can then determine the pixel projections into the source frame,\nand bilinearly interpolate these color values at the pixel projections,\nto infer the color image in the target frame.\n\nTreating frame 1 as our target frame,\nwe can use the previously calculated optical flow from frame 1 to 2, in order\nto inverse warp the color data from frame 2 to frame 1, as shown below.\n\n\n.. code-block:: python\n\n    # inverse warp rendering\n    warp = u_pix_coords[..., 0:2] + flow1to2\n    color2_warp_to_f1 = ivy.bilinear_resample(color2, warp)\n\n    # projected depth scaled pixel coords 2\n    ds_pixel_coords1_wrt_f2 = ivy_vision.ds_pixel_to_ds_pixel_coords(ds_pixel_coords1, cam1to2_full_mat)\n\n    # projected depth 2\n    depth1_wrt_f2 = ds_pixel_coords1_wrt_f2[..., -1:]\n\n    # inverse warp depth\n    depth2_warp_to_f1 = ivy.bilinear_resample(depth2, warp)\n\n    # depth validity\n    depth_validity = ivy.abs(depth1_wrt_f2 - depth2_warp_to_f1) < 0.01\n\n    # inverse warp rendering with mask\n    color2_warp_to_f1_masked = ivy.where(depth_validity, color2_warp_to_f1, ivy.zeros_like(color2_warp_to_f1))\n\nAgain, visualizations of these images are given below.\nThe images represent intermediate steps for the inverse warping of color from frame 2 to frame 1,\nwhich is shown in the bottom right corner.\n\n.. image:: https://github.com/ivy-dl/vision/blob/master/docs/partial_source/images/inverse_warped.png?raw=true\n   :width: 100%\n\nFor forward warping, we instead assume depth to be known in the source frame.\nA common approach is to construct a mesh, and then perform rasterization of the mesh.\n\nThe ivy method ``ivy_vision.render_pixel_coords`` instead takes a simpler approach,\nby determining the pixel projections into the target frame,\nquantizing these to integer pixel co-ordinates,\nand scattering the corresponding color values directly into these integer pixel co-ordinates.\n\nThis process in general leads to holes and duplicates in the resultant image,\nbut when compared to inverse warping,\nit has the beneft that the target frame does not need to correspond to a real camera with known depth.\nOnly the target camera geometry is required, which can be for any hypothetical camera.\n\nWe now consider the case of forward warping the color data from camera frame 2 to camera frame 1,\nand again render the new color image in target frame 1.\n\n.. code-block:: python\n\n    # forward warp rendering\n    ds_pixel_coords1_proj = ivy_vision.ds_pixel_to_ds_pixel_coords(\n        ds_pixel_coords2, ivy.inv(cam1to2_full_mat_homo)[..., 0:3, :])\n    depth1_proj = ds_pixel_coords1_proj[..., -1:]\n    ds_pixel_coords1_proj = ds_pixel_coords1_proj[..., 0:2] / depth1_proj\n    features_to_render = ivy.concatenate((depth1_proj, color2), -1)\n\n    # without depth buffer\n    f1_forward_warp_no_db, _, _ = ivy_vision.quantize_to_image(\n        ivy.reshape(ds_pixel_coords1_proj, (-1, 2)), img_dims, ivy.reshape(features_to_render, (-1, 4)),\n        ivy.zeros_like(features_to_render), with_db=False)\n\n    # with depth buffer\n    f1_forward_warp_w_db, _, _ = ivy_vision.quantize_to_image(\n        ivy.reshape(ds_pixel_coords1_proj, (-1, 2)), img_dims, ivy.reshape(features_to_render, (-1, 4)),\n        ivy.zeros_like(features_to_render), with_db=False if ivy.get_framework() == 'mxnet' else True)\n\nAgain, visualizations of these images are given below.\nThe images show the forward warping of both depth and color from frame 2 to frame 1,\nwhich are shown with and without depth buffers in the right-hand and central columns respectively.\n\n.. image:: https://github.com/ivy-dl/vision/blob/master/docs/partial_source/images/forward_warped.png?raw=true\n   :width: 100%\n\nInteractive Demos\n-----------------\n\nIn addition to the examples above, we provide two further demo scripts,\nwhich are more visual and interactive, and are each built around a particular function.\n\nRather than presenting the code here, we show visualizations of the demos.\nThe scripts for these demos can be found in the interactive_ demos folder.\n\n**Neural Rendering**\n\nThe first demo uses method ``ivy_vision.render_implicit_features_and_depth``\nto train a Neural Radiance Field (NeRF) model to encode a lego digger. The NeRF model can then be queried at new camera\nposes to render new images from poses unseen during training.\n\n\n\n.. image:: https://github.com/ivy-dl/ivy-dl.github.io/blob/master/img/externally_linked/ivy_vision/nerf_demo.png?raw=true\n   :width: 100%\n\n**Co-ordinates to Voxel Grid**\n\nThe second demo captures depth and color images from a set of cameras,\nconverts the depth to world-centric co-ordinartes,\nand uses the method ``ivy_vision.coords_to_voxel_grid`` to\nvoxelize the depth and color values into a grid, as shown below:\n\n\n\n.. image:: https://github.com/ivy-dl/ivy-dl.github.io/blob/master/img/externally_linked/ivy_vision/voxel_grid_demo.png?raw=true\n   :width: 100%\n\n**Point Rendering**\n\nThe final demo again captures depth and color images from a set of cameras,\nbut this time uses the method ``ivy_vision.quantize_to_image`` to\ndynamically forward warp and point render the images into a new target frame, as shown below.\nThe acquiring cameras all remain static, while the target frame for point rendering moves freely.\n\n\n\n.. image:: https://github.com/ivy-dl/ivy-dl.github.io/blob/master/img/externally_linked/ivy_vision/point_render_demo.png?raw=true\n   :width: 100%\n\nGet Involed\n-----------\n\nWe hope the functions in this library are useful to a wide range of machine learning developers.\nHowever, there are many more areas of 3D vision which could be covered by this library.\n\nIf there are any particular vision functions you feel are missing,\nand your needs are not met by the functions currently on offer,\nthen we are very happy to accept pull requests!\n\nWe look forward to working with the community on expanding and improving the Ivy vision library.\n\nCitation\n--------\n\n::\n\n    @article{lenton2021ivy,\n      title={Ivy: Unified Machine Learning for Inter-Framework Portability},\n      author={Lenton, Daniel and Pardo, Fabio and Falck, Fabian and James, Stephen and Clark, Ronald},\n      journal={arXiv preprint arXiv:2102.02886},\n      year={2021}\n    }\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://ivy-dl.org/vision",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ivy-vision",
    "package_url": "https://pypi.org/project/ivy-vision/",
    "platform": "",
    "project_url": "https://pypi.org/project/ivy-vision/",
    "project_urls": {
      "Docs": "https://ivy-dl.org/vision/",
      "Homepage": "https://ivy-dl.org/vision",
      "Source": "https://github.com/ivy-dl/vision"
    },
    "release_url": "https://pypi.org/project/ivy-vision/1.1.9/",
    "requires_dist": [
      "ivy-core",
      "ivy-mech"
    ],
    "requires_python": "",
    "summary": "3D Vision functions with end-to-end support for machine learning developers, written in Ivy.",
    "version": "1.1.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12178863,
  "releases": {
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7b3cdbe3b72503f961703f055e493692a94ac174f3ecc14b78aac66dd3efd2a",
          "md5": "b0f0857acf3c8ee73af424d2c24d7f27",
          "sha256": "1c6b56c2890e6ce8bb0d0bc5c37f2773ebf892d13047d195d5dcdbcfcb61dcee"
        },
        "downloads": -1,
        "filename": "ivy_vision-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0f0857acf3c8ee73af424d2c24d7f27",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34401,
        "upload_time": "2021-02-06T16:59:50",
        "upload_time_iso_8601": "2021-02-06T16:59:50.192779Z",
        "url": "https://files.pythonhosted.org/packages/b7/b3/cdbe3b72503f961703f055e493692a94ac174f3ecc14b78aac66dd3efd2a/ivy_vision-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f18002b99673227cd0fc9231745da732b8ca361ba0526bfc7235bedeebde858",
          "md5": "dbd2b281eeed22f88696364548a06d9a",
          "sha256": "af7b8e17bca2423dd61fc1024625cbc78ed2c6fd20edeee69678f59a49056d47"
        },
        "downloads": -1,
        "filename": "ivy-vision-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dbd2b281eeed22f88696364548a06d9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29724,
        "upload_time": "2021-02-06T16:59:50",
        "upload_time_iso_8601": "2021-02-06T16:59:50.930983Z",
        "url": "https://files.pythonhosted.org/packages/0f/18/002b99673227cd0fc9231745da732b8ca361ba0526bfc7235bedeebde858/ivy-vision-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a418900c0436542695846c70de751adf126d8f9c893d74666d6df315cdddad57",
          "md5": "b292fa3eec6016b98aaa692ea636ccbc",
          "sha256": "2c12b189ea61105db19cc161f8d903e1cc550bb8bc3e8c1f4388580f560e985d"
        },
        "downloads": -1,
        "filename": "ivy_vision-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b292fa3eec6016b98aaa692ea636ccbc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34409,
        "upload_time": "2021-03-03T10:25:40",
        "upload_time_iso_8601": "2021-03-03T10:25:40.007119Z",
        "url": "https://files.pythonhosted.org/packages/a4/18/900c0436542695846c70de751adf126d8f9c893d74666d6df315cdddad57/ivy_vision-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35e504273b09ea0902cdfdb580e4c350a015740b210aea39881e05e8fbf3b912",
          "md5": "f582249dafaa7a52adaace311bd8abdd",
          "sha256": "6e955cd0476f889399d9ff325d734e789c7e3c4a4fc0980d377f6235fc7707bb"
        },
        "downloads": -1,
        "filename": "ivy-vision-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f582249dafaa7a52adaace311bd8abdd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29896,
        "upload_time": "2021-03-03T10:25:40",
        "upload_time_iso_8601": "2021-03-03T10:25:40.970318Z",
        "url": "https://files.pythonhosted.org/packages/35/e5/04273b09ea0902cdfdb580e4c350a015740b210aea39881e05e8fbf3b912/ivy-vision-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5705b691c7e0e4c2179694536aa3e59d55805b1be749add218a6f76db1e91eae",
          "md5": "45c9a47bd33ce2e03ab7f172d7b4861e",
          "sha256": "6e2aa91214be81aaade114ed4e4fcd7873a31eb3756d32ff3bde262c5aa17926"
        },
        "downloads": -1,
        "filename": "ivy_vision-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45c9a47bd33ce2e03ab7f172d7b4861e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 33975,
        "upload_time": "2021-03-19T23:10:42",
        "upload_time_iso_8601": "2021-03-19T23:10:42.651952Z",
        "url": "https://files.pythonhosted.org/packages/57/05/b691c7e0e4c2179694536aa3e59d55805b1be749add218a6f76db1e91eae/ivy_vision-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ee15bc8687ad1f32eebc576c6788825e0083138579357377939e70af477ef2d",
          "md5": "5814b3607ea326e77436b11def097b74",
          "sha256": "470e9d96b55ba88f89746025fa12c95b617f3a63cd843422cb64e99dbb0efeef"
        },
        "downloads": -1,
        "filename": "ivy-vision-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5814b3607ea326e77436b11def097b74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30252,
        "upload_time": "2021-03-19T23:10:43",
        "upload_time_iso_8601": "2021-03-19T23:10:43.656716Z",
        "url": "https://files.pythonhosted.org/packages/0e/e1/5bc8687ad1f32eebc576c6788825e0083138579357377939e70af477ef2d/ivy-vision-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5838d03f8684325ff42d134c82474b2b344820a7365160f926a392c29fa79c16",
          "md5": "1a133115181e41fe4c0b91aff439378f",
          "sha256": "883cd0ed72f717a8adb4b34c3508de96dcf9abeba027c54011bae3b41e686014"
        },
        "downloads": -1,
        "filename": "ivy_vision-1.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a133115181e41fe4c0b91aff439378f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37859,
        "upload_time": "2021-04-12T14:53:47",
        "upload_time_iso_8601": "2021-04-12T14:53:47.852837Z",
        "url": "https://files.pythonhosted.org/packages/58/38/d03f8684325ff42d134c82474b2b344820a7365160f926a392c29fa79c16/ivy_vision-1.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78b1d59e7891a3489c00346e1d0dd4452cf4b79e30f0f194bb80bbc180500604",
          "md5": "2466e61cd9be8d5ae85ef46e09279616",
          "sha256": "e127c4047903446d230aea521574db5656ad3f1ce28517783fd0aca175fa8cb1"
        },
        "downloads": -1,
        "filename": "ivy-vision-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2466e61cd9be8d5ae85ef46e09279616",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32662,
        "upload_time": "2021-04-12T14:53:48",
        "upload_time_iso_8601": "2021-04-12T14:53:48.674105Z",
        "url": "https://files.pythonhosted.org/packages/78/b1/d59e7891a3489c00346e1d0dd4452cf4b79e30f0f194bb80bbc180500604/ivy-vision-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e74d2b0d21bc8716e93644458b206a47ad7809d0f2b736544e58edaade856cb3",
          "md5": "7df3fbf15603b37f77b4456087db5254",
          "sha256": "0cd4ab2826f59d9cd3127f1813df07fcf8b25442dea0facc1aca3d28b83f0c7a"
        },
        "downloads": -1,
        "filename": "ivy_vision-1.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7df3fbf15603b37f77b4456087db5254",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40962,
        "upload_time": "2021-07-26T23:48:54",
        "upload_time_iso_8601": "2021-07-26T23:48:54.987072Z",
        "url": "https://files.pythonhosted.org/packages/e7/4d/2b0d21bc8716e93644458b206a47ad7809d0f2b736544e58edaade856cb3/ivy_vision-1.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4a235913864ffe9eec76d1e3079b05780895c4861a2eb6c56aa580a96acb1a4",
          "md5": "de5d6feb34675f32c2958096e2355698",
          "sha256": "daf8819a1776d404b915ad3f0046a0223015adf864f8e4955d420f734a1a5d69"
        },
        "downloads": -1,
        "filename": "ivy-vision-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "de5d6feb34675f32c2958096e2355698",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35476,
        "upload_time": "2021-07-26T23:48:56",
        "upload_time_iso_8601": "2021-07-26T23:48:56.276707Z",
        "url": "https://files.pythonhosted.org/packages/b4/a2/35913864ffe9eec76d1e3079b05780895c4861a2eb6c56aa580a96acb1a4/ivy-vision-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d64bf50fd572ff0536c2bec224fa73b257fb6601d69121abd6202f6ff7ee6de",
          "md5": "a8163bd312703e6688549e0f18a4f3a5",
          "sha256": "3431328d51a0bb4caa90b9e1eb52717bd95194556f95600ad16291e6ae443ff3"
        },
        "downloads": -1,
        "filename": "ivy_vision-1.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8163bd312703e6688549e0f18a4f3a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 39678,
        "upload_time": "2021-11-29T21:41:17",
        "upload_time_iso_8601": "2021-11-29T21:41:17.758117Z",
        "url": "https://files.pythonhosted.org/packages/4d/64/bf50fd572ff0536c2bec224fa73b257fb6601d69121abd6202f6ff7ee6de/ivy_vision-1.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04aa6c95975ce9cfe7c47b919d9bd5c4cd30ab34822029f18af6af3defa15333",
          "md5": "ed4db222177b29f2ab5f593f609ab472",
          "sha256": "cc9e8664fcde91f82095a352986ebebcea854861650addb8f7f93538429c8c6f"
        },
        "downloads": -1,
        "filename": "ivy-vision-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "ed4db222177b29f2ab5f593f609ab472",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34267,
        "upload_time": "2021-11-29T21:41:19",
        "upload_time_iso_8601": "2021-11-29T21:41:19.174010Z",
        "url": "https://files.pythonhosted.org/packages/04/aa/6c95975ce9cfe7c47b919d9bd5c4cd30ab34822029f18af6af3defa15333/ivy-vision-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c954655627495ab4047c6db79f27dd8b396ab82ef28efb8048e8c644228f7813",
          "md5": "a4e33c2f427adefdbca353ca371b96e4",
          "sha256": "97a5c2d3bb3616d28c7b9014a5a9c57a5cfcd48aaf16d31fdd5999fdda1c8747"
        },
        "downloads": -1,
        "filename": "ivy-vision-1.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "a4e33c2f427adefdbca353ca371b96e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42306,
        "upload_time": "2021-11-30T19:54:54",
        "upload_time_iso_8601": "2021-11-30T19:54:54.337153Z",
        "url": "https://files.pythonhosted.org/packages/c9/54/655627495ab4047c6db79f27dd8b396ab82ef28efb8048e8c644228f7813/ivy-vision-1.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8506fa4f9242b2bc123f51a4f377448197cea1c5d284d37ced4e9bae52fffc9e",
          "md5": "d4ddd3057d6f55ed5841196e40a1cd9f",
          "sha256": "392aa5be8019961307ba0920f742e4eb2401bc9023afaa7463d4790de3233ded"
        },
        "downloads": -1,
        "filename": "ivy_vision-1.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4ddd3057d6f55ed5841196e40a1cd9f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43598,
        "upload_time": "2021-12-01T08:48:38",
        "upload_time_iso_8601": "2021-12-01T08:48:38.176813Z",
        "url": "https://files.pythonhosted.org/packages/85/06/fa4f9242b2bc123f51a4f377448197cea1c5d284d37ced4e9bae52fffc9e/ivy_vision-1.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5227254ed9521e85638dbe011c10082ef61ba50810291ef4a713a72b66e49d44",
          "md5": "235dd2d1c07257d3b664372e397f415f",
          "sha256": "8c5268e5fe1fff1535663c9c8a62e4c12eda14dccf9f2b81177a5d5856416600"
        },
        "downloads": -1,
        "filename": "ivy-vision-1.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "235dd2d1c07257d3b664372e397f415f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42440,
        "upload_time": "2021-12-01T08:48:39",
        "upload_time_iso_8601": "2021-12-01T08:48:39.491745Z",
        "url": "https://files.pythonhosted.org/packages/52/27/254ed9521e85638dbe011c10082ef61ba50810291ef4a713a72b66e49d44/ivy-vision-1.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf51acd2c339b560017332e795601b9561946857985d34428fc33d775da12166",
          "md5": "af43ba570bfc3fb90ac05a70faf7bdef",
          "sha256": "da1a672ed7ab248c3a8e8d2b5feed42cc0768464a55659362181d528863466ee"
        },
        "downloads": -1,
        "filename": "ivy_vision-1.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af43ba570bfc3fb90ac05a70faf7bdef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 43781,
        "upload_time": "2021-12-01T16:23:36",
        "upload_time_iso_8601": "2021-12-01T16:23:36.639049Z",
        "url": "https://files.pythonhosted.org/packages/cf/51/acd2c339b560017332e795601b9561946857985d34428fc33d775da12166/ivy_vision-1.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de546b0098c75a6f799e7458df16929f10727b906addf8db190aed1a6688c35e",
          "md5": "070f264eed84ac0c8414924297e6fc75",
          "sha256": "3ef078a34a7753fc520a513e7b26cad5c0e3fff9e387e130e4e575eb5022136d"
        },
        "downloads": -1,
        "filename": "ivy-vision-1.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "070f264eed84ac0c8414924297e6fc75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43114,
        "upload_time": "2021-12-01T16:23:38",
        "upload_time_iso_8601": "2021-12-01T16:23:38.301942Z",
        "url": "https://files.pythonhosted.org/packages/de/54/6b0098c75a6f799e7458df16929f10727b906addf8db190aed1a6688c35e/ivy-vision-1.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf51acd2c339b560017332e795601b9561946857985d34428fc33d775da12166",
        "md5": "af43ba570bfc3fb90ac05a70faf7bdef",
        "sha256": "da1a672ed7ab248c3a8e8d2b5feed42cc0768464a55659362181d528863466ee"
      },
      "downloads": -1,
      "filename": "ivy_vision-1.1.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "af43ba570bfc3fb90ac05a70faf7bdef",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 43781,
      "upload_time": "2021-12-01T16:23:36",
      "upload_time_iso_8601": "2021-12-01T16:23:36.639049Z",
      "url": "https://files.pythonhosted.org/packages/cf/51/acd2c339b560017332e795601b9561946857985d34428fc33d775da12166/ivy_vision-1.1.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de546b0098c75a6f799e7458df16929f10727b906addf8db190aed1a6688c35e",
        "md5": "070f264eed84ac0c8414924297e6fc75",
        "sha256": "3ef078a34a7753fc520a513e7b26cad5c0e3fff9e387e130e4e575eb5022136d"
      },
      "downloads": -1,
      "filename": "ivy-vision-1.1.9.tar.gz",
      "has_sig": false,
      "md5_digest": "070f264eed84ac0c8414924297e6fc75",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 43114,
      "upload_time": "2021-12-01T16:23:38",
      "upload_time_iso_8601": "2021-12-01T16:23:38.301942Z",
      "url": "https://files.pythonhosted.org/packages/de/54/6b0098c75a6f799e7458df16929f10727b906addf8db190aed1a6688c35e/ivy-vision-1.1.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}