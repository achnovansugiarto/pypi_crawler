{
  "info": {
    "author": "reddit",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: Apache Software License",
      "Topic :: Database",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "cqlmapper\n=========\n\nThis project is a fork of `cqlengine\n<https://github.com/datastax/python-driver/tree/master/cassandra/cqlengine>`__\nwith a number of changes to allow it to work in a `baseplate\n<https://github.com/reddit/baseplate>`__ application\n\nMajor changes:\n    - Remove support for polymorphic models\n    - Remove the query evaluator method of defining query constraints\n    - Switch from using a global connection object to passing a connection object\n      to methods that interact with the database\n    - Batch queries are handled by a Connection-like Batch object that is given\n      as the `conn` argument to functions rather than using the `Model.batch`\n      syntax of cqlengine\n\nExample usage::\n\n    import uuid\n\n    from cassandra.cluster import Cluster\n    from cqlmapper import columns, connection, models\n    from cqlmapper.batch import Batch\n    from cqlmapper.connection import Connection as CQLMapperConnection\n    from cqlmapper.management import sync_table\n\n    class MyFirstModel(Model):\n        id = columns.UUID(primary_key=True, default=uuid.uuid4)\n        body = colums.Text()\n\n    cluster = Cluster()\n    session = cluster.connect(\"example\")\n    conn = CQLMapperConnection(session)\n    sync_table(conn, MyFirstModel)\n    model_1 = MyFirstModel.create(conn, body=\"Hello World\")\n    model_2 = MyFirstModel.create(conn, body=\"Hola Mundo\")\n    # Batch queries can be used as a context manager where the batch query will\n    # be executed when exiting the context\n    with Batch(conn) as batch_conn:\n        MyFirstModel.create(batch_conn, body=\"Ciao mondo\")\n        MyFirstModel.create(batch_conn, body=\"Bonjour le monde\")\n    # Batch queries can also be created standalone in which case execute_batch\n    # can be called to execute the queries.  Calls to execute will add the\n    # query to the batch\n    batch_conn = Batch(conn)\n    MyFirstModel.create(batch_conn, body=\"Hallo Welt\")\n    MyFirstModel.create(batch_conn, body=\"Hei Verden\")\n    >>> MyFirstModel.objects.count(conn)\n    4\n    >>> batch_conn.execute_batch()\n    >>> MyFirstModel.objects.count(conn)\n    6\n    >>> MyFirstModel.get(conn, id=model_1.id).text == model_1.text\n    True\n    >>> MyFirstModel.get(conn, id=model_2.id).text == model_1.text\n    False\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/reddit/cqlmapper",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "reddit-cqlmapper",
    "package_url": "https://pypi.org/project/reddit-cqlmapper/",
    "platform": "",
    "project_url": "https://pypi.org/project/reddit-cqlmapper/",
    "project_urls": {
      "Homepage": "https://github.com/reddit/cqlmapper"
    },
    "release_url": "https://pypi.org/project/reddit-cqlmapper/0.3.0/",
    "requires_dist": [
      "cassandra-driver",
      "six (>=1.6)"
    ],
    "requires_python": "",
    "summary": "a fork of cqlengine modified to work in baseplate.py applications",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9355327,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ba318b258a817212c735734d1343e06b08fd15f5bf17153a6c3e7b6279c8efd",
          "md5": "bed67d4d97ddb652d1e1a4b4f7c5647b",
          "sha256": "cfa34183b07fb2761d86e7a1346007dd06efa4a33c98d6ef9ae7b1394eb992f0"
        },
        "downloads": -1,
        "filename": "reddit_cqlmapper-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bed67d4d97ddb652d1e1a4b4f7c5647b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 145012,
        "upload_time": "2021-02-08T19:46:17",
        "upload_time_iso_8601": "2021-02-08T19:46:17.308049Z",
        "url": "https://files.pythonhosted.org/packages/7b/a3/18b258a817212c735734d1343e06b08fd15f5bf17153a6c3e7b6279c8efd/reddit_cqlmapper-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "086d747a1656753b7c962b493d12f3f062806da3f544ae80b712148f2fd7cdba",
          "md5": "af27c2a3e598a4089a726ba184c31644",
          "sha256": "69722be61c257cf0e8c3da35a6ed811e4cd5f6a3f661b3abf2a486ad17d4cb81"
        },
        "downloads": -1,
        "filename": "reddit_cqlmapper-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "af27c2a3e598a4089a726ba184c31644",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 105873,
        "upload_time": "2021-02-08T19:46:18",
        "upload_time_iso_8601": "2021-02-08T19:46:18.410607Z",
        "url": "https://files.pythonhosted.org/packages/08/6d/747a1656753b7c962b493d12f3f062806da3f544ae80b712148f2fd7cdba/reddit_cqlmapper-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7ba318b258a817212c735734d1343e06b08fd15f5bf17153a6c3e7b6279c8efd",
        "md5": "bed67d4d97ddb652d1e1a4b4f7c5647b",
        "sha256": "cfa34183b07fb2761d86e7a1346007dd06efa4a33c98d6ef9ae7b1394eb992f0"
      },
      "downloads": -1,
      "filename": "reddit_cqlmapper-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bed67d4d97ddb652d1e1a4b4f7c5647b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 145012,
      "upload_time": "2021-02-08T19:46:17",
      "upload_time_iso_8601": "2021-02-08T19:46:17.308049Z",
      "url": "https://files.pythonhosted.org/packages/7b/a3/18b258a817212c735734d1343e06b08fd15f5bf17153a6c3e7b6279c8efd/reddit_cqlmapper-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "086d747a1656753b7c962b493d12f3f062806da3f544ae80b712148f2fd7cdba",
        "md5": "af27c2a3e598a4089a726ba184c31644",
        "sha256": "69722be61c257cf0e8c3da35a6ed811e4cd5f6a3f661b3abf2a486ad17d4cb81"
      },
      "downloads": -1,
      "filename": "reddit_cqlmapper-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "af27c2a3e598a4089a726ba184c31644",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 105873,
      "upload_time": "2021-02-08T19:46:18",
      "upload_time_iso_8601": "2021-02-08T19:46:18.410607Z",
      "url": "https://files.pythonhosted.org/packages/08/6d/747a1656753b7c962b493d12f3f062806da3f544ae80b712148f2fd7cdba/reddit_cqlmapper-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}