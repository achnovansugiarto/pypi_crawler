{
  "info": {
    "author": "aiden.li",
    "author_email": "1334435738@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# 前言\nPython开发的mysql链式操作，ABuilder告别繁琐的模型定义，节省开发时间，几乎没有任何要求，导入直接使用。与常规模型不同ABuilder不需要预先定义表字段、字段类型、字段长度等繁琐的设置，当然那样做有它的优点这里就不说了～，各具所长取舍看个人。ABuilder支持入直接使用，简单、快速、便捷\n\n# 快速开始\n- 安装 a-sqlbuilder\n```python\npip3 install a-sqlbuilder\n```\n- 设置数据配置文件（参照数据库配置文件说明）\n- 开始使用\n```python\nfrom ABuilder.ABuilder import ABuilder\n\nmodel = ABuilder()\ndata = model.table('tar_user').field(\"username,id\").where({\"username\": [\"like\", \"%M-萌%\"]}).limit(0, 1).query()\n```\n# 使用文档\n\n## 第三方库要求\n- pymysql\n- logging\n## 数据库配置文件\n我们需要开发者在项目更目录中加入`database.py` 数据库配置文件\n\n确保`from database import database`能获取到数据库配置项\n\n配置文件实例:\n```python\nclass Config(object):\n    pass\n\nclass Proconfig(Config):\n    pass\n\n\nclass Devconfig(Config):\n    debug = True\n    DATABASE_URI = 'mysql+pymysql://root:root@127.0.0.1:3306/target'\n    data_host = '127.0.0.1' \n    data_pass = 'root'\n    data_user = 'root'\n    database = 'target'\n    data_port = 3306\n    charset = 'utf8mb4'\n\n\ndatabase = Devconfig\n```\n## 支持函数\n目前项目只支持一些简单用法具体如下\n- table 查询表\n- where where条件\n- where_or 设置or条件\n- field 查询字段 \n- limit 查询条数\n- group 分组\n- order 排序\n- join 连表查询\n- first 查询单条\n- query 查询多条\n- pluck 查询单个字段\n- insert 插入\n- update 修改\n- delete 删除\n- select 执行原生查询\n- commit 事物提交\n- rollback 事物回滚\n- get_last_sql 获取执行sql\n- get_insert_id 获取插入id\n### table\n> 设置查询表\n```python\nfrom ABuilder.ABuilder import ABuilder\ndata = ABuilder().table('user').limit(0,1).query()\nprint(data)\n```\n### where\n> 设置where条件\n```python\nfrom Amo.ABuilder import ABuilder\nABuilder().table('user').where({\"id\":[\"=\",3]}).first()\n```\n多个where条件\n```python\nABuilder().table('user').where({\"id\":['<=',10],\"sex\":[\"=\",\"男\"]}).query()\n# 或则多个where拼接\nABuilder().table('user').where({\"id\":['<=',10]}).where({\"sex\":[\"=\",\"男\"]}).query()\n```\n比较符号支持 `=,<>,<,>,<=,>=,in,like`等\n### where_or\n> 设置or条件\n`where_or`使用方法与where大同小异\n```python\nfrom Amo.ABuilder import ABuilder\nABuilder().table('user').where_or({\"id\":[\"=\",3]}).query()\n```\n比较符号支持 `=,<>,<,>,<=,>=,in,like`等\n### field\n> 设置查询字段\n```python\nABuilder().table(\"user\").field(\"user_id,sex,user_name\").query()\n# 举例count使用\nABuilder().table(\"user\").field(\"count(*) as count\").query()\n```\n不设置field默认查询全部字段 `*`,查询字段使用`,`隔开,支持`count(),sum()`等\n\n注意：不支持类似`DATE_FORMAT(NOW(),'%m-%d-%Y')`这类带有`%`的函数\n### limit\n>查询数\n```python\nABuilder().table(\"user\").limit(0,10).query()\n```\n> `limit` 第一个参数为开始查询位置，第二个参数为获取多少条\n### group\n>分组\n```python\n# 按照性别分组\nABuilder().table(\"user\").field(\"count(*) as count\").group('sex').query()\n\n# 多个分组使用\nABuilder().table(\"user\").field(\"count(*) as count\").group('sex').group('age').query()\n# sql为：select count(*) as count from user group by sex,age\n```\n### order\n> 排序\n```python\nABuilder().table(\"user\").order(\"user_id\",\"desc\").query()\n\n# 多个排序值\nABuilder().table(\"user\").order(\"user_id\",\"desc\").order(\"sex\",'asc').query()\n# sql为：select * from tar_user order by user_id desc,sex asc\n```\n`order by`先后顺序：遵循从左到右\n### join\n> 连表查\n```python\nABuilder().table('user as u').field('u.id,b.name').join('book b', 'u.id=b.user_id','INNER').where({\"u.id\": ['=', 1]}).query()\n\n# sql为：select u.id,b.name from user as u INNER JOIN book b on u.id=b.user_id where u.id = 1\n```\njoin三个参数说明\n- 表名\n- 列表条件 支持 `and,or`\n- join类型：`INNER,LEFT,RIGHT,FULL` 默认INNER\n\n支持多个连表，拼接多个join即可。例如:`table('table as t').join('table1 t1','t1.user_id=t.id').join('table2 t2','t1.id=t2.book_id')`\n### first\n>查询单条记录\n```python\nfind = ABuilder().table('user').where({\"id\":[\"=\",3]}).first()\nprint(find)\n```\n### query\n>查询多条记录\n```python\ndata = ABuilder().table('user').where({\"id\":[\"in\",(1,2,3,4)]}).query()\nprint(data)\n```\n### pluck \n>查询单个字段\n```python\nuser_id = ABuilder().table('user').where({\"username\":[\"=\",'张三']}).pluck('id')\nprint(user_id)\n```\n### insert\n> 插入数据\n```python\nmodel = ABuilder()\nstate = model.table(\"user\").insert({\"username\":\"张三\",\"sex\":'男',\"age\":18})\nif state:\n    print(\"添加成功！自增id：%\" % model.get_insert_id)\nelse:\n    print(\"添加失败\")\n```\n### update\n> 修改记录\n```python\nstate = ABuilder().table(\"user\").where({\"username\":[\"=\",\"张三\"]}).update({\"age\":25})\nif state:\n    print('修改成功')\nelse:\n    print('修改失败')\n\n```\n### delete\n> 删除记录\n```python\nstate = ABuilder().table(\"user\").where({\"username\":[\"=\",\"张三\"]}).delete()\nif state:\n    print('删除成功')\nelse:\n    print('删除失败')\n```\n### select\n>执行原生sql\n```python\nmodel = ABuilder()\n# 第一种方式\nmodel.select(\"SELECT username,id FROM user where id=%s\", [1])\n# 第二种方式\nmodel.select(\"SELECT username,id FROM user where id=1\")\n```\n### commit，rollback\n> 事物操作\n```python\nmodel = ABuilder()\nstate = model.table(\"user\").insert({\"username\":\"张三\",\"sex\":'男',\"age\":18})\nif state:\n    state = model.table(\"book\").insert({\"book_name\":'书本昵称',\"user_id\":model.get_insert_id})\nif state:\n    # 成功则提交事物\n    model.commit()\nelse:\n    # 失败则回滚事物\n    model.rollback()\n```\n操作事物注意事项：请勿实例多个ABuilder否则一部分事物在回滚操作时回滚失败\n```python\ndef fun1():\n    model = ABuilder()\n    state = model.table(\"user\").insert({\"username\":\"张三\",\"sex\":'男',\"age\":18})\n    if state:\n        state = fun2()\n\n    if state:\n        model.commit()\n    else:\n        model.rollback()\n\ndef fun2():\n    model = ABuilder()\n    return  model.table(\"book\").insert({\"book_name\":'书本昵称',\"user_id\":model.get_insert_id})\n\nfun1()\n```\n这样如果`fun2()`返回失败的是失败状态回滚的只是`fun1()`执行的sql却无法回滚`fun2()`执行的sql，正确做法如下：\n```python\ndef fun1():\n    model = ABuilder()\n    state = model.table(\"user\").insert({\"username\":\"张三\",\"sex\":'男',\"age\":18})\n    if state:\n        state = fun2(model)\n\n    if state:\n        model.commit()\n    else:\n        model.rollback()\n\ndef fun2(model):\n    return  model.table(\"book\").insert({\"book_name\":'书本昵称',\"user_id\":model.get_insert_id})\n\nfun1()\n```\n### get_last_sql\n> 获取最后一条执行sql\n```python\n model = ABuilder()\n find = model.table('user').where({\"id\":[\"=\",3]}).first()\n print(model.get_last_sql)\n```\n获取sql注意事项：输出的sql对于字符串没有加上引号，导致拷贝到数据库管理工具里无法执行，处理办法：给予字符串加上单引号或双引号即可，后面维护会优化（抱歉）\n### get_insert_id\n> 获取插入自增id\n```python\nmodel = ABuilder()\nmodel.table(\"user\").insert({\"username\":\"张三\",\"sex\":'男',\"age\":18})\nprint(model.get_insert_id)\n```\n## class继承方式使用示例\n```python\nfrom ABuilder.ABuilder import ABuilder\nclass UserModel(ABuilder):\n\n    def __init__(self):\n        self.table_name = 'user'\n\n    def user_info(self,user_id):\n        info = self.table(self.table_name).field(\"user_id,user_name\").where({\"user_id\":user_id}).first()\n        print(self.get_last_sql)\n        return info\n\n    def login(self):\n        pass\n\nuserInfo = UserModel().user_info(user_id=1)\nprint(userInfo)\n```\n## 案例项目\n### 目标记账+\n!['目标记账+'](http://poto.adooe.com/target_logo.jpg)\n\n\n\n记账+。记账与目标结合，随时随地记录每一笔交易，人情来往，多人记账，每日记账实时统计与目标距离，即时了解资金概况资金流向\n## 感谢\n项目初期是非常第一个简单版本，如有问题，写法不规范的欢迎反馈，千言万语，你懂的，我就不说了\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lizhenggan/ABuilder",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "a-sqlbuilder",
    "package_url": "https://pypi.org/project/a-sqlbuilder/",
    "platform": "",
    "project_url": "https://pypi.org/project/a-sqlbuilder/",
    "project_urls": {
      "Homepage": "https://github.com/lizhenggan/ABuilder"
    },
    "release_url": "https://pypi.org/project/a-sqlbuilder/0.0.2/",
    "requires_dist": [
      "pymysql (>=0.9.3)"
    ],
    "requires_python": "",
    "summary": "MySQL chained operation of Python development",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5490839,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a17e5b1efd5df83dc843749021872c54ff59032882b2a554d7662d1d29beb562",
          "md5": "815d7432146171cbc4fd88c790b530f7",
          "sha256": "11f95f4fc7e4cb1b6f2775c6f2319f8337fa679d790fe79fcadecfec15f025dc"
        },
        "downloads": -1,
        "filename": "a_sqlbuilder-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "815d7432146171cbc4fd88c790b530f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9239,
        "upload_time": "2019-05-17T07:58:22",
        "upload_time_iso_8601": "2019-05-17T07:58:22.413762Z",
        "url": "https://files.pythonhosted.org/packages/a1/7e/5b1efd5df83dc843749021872c54ff59032882b2a554d7662d1d29beb562/a_sqlbuilder-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24dc9f056ae0ef2c66271caa279269a37f312b255e283fb3b5ebfc1bd2c90cc6",
          "md5": "cce39c4d48e20d154b662f4fed706c31",
          "sha256": "b13ecea1f61daed96b8d3ac71e8239db7dcb187ae08da2f700e8d7cac719794a"
        },
        "downloads": -1,
        "filename": "a-sqlbuilder-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cce39c4d48e20d154b662f4fed706c31",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7557,
        "upload_time": "2019-05-17T07:58:25",
        "upload_time_iso_8601": "2019-05-17T07:58:25.662121Z",
        "url": "https://files.pythonhosted.org/packages/24/dc/9f056ae0ef2c66271caa279269a37f312b255e283fb3b5ebfc1bd2c90cc6/a-sqlbuilder-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b64a65d0f9e998c5d25971c41fb95ea078a7d09d41d39048ae91a40a27fbbfd1",
          "md5": "f095b35a7454b3c7ce6fc753e31fb700",
          "sha256": "1695bf43f6b2e280eb78e0564412077b226d0369746a17ec25761a6e43bed764"
        },
        "downloads": -1,
        "filename": "a_sqlbuilder-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f095b35a7454b3c7ce6fc753e31fb700",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9563,
        "upload_time": "2019-07-05T10:56:53",
        "upload_time_iso_8601": "2019-07-05T10:56:53.102786Z",
        "url": "https://files.pythonhosted.org/packages/b6/4a/65d0f9e998c5d25971c41fb95ea078a7d09d41d39048ae91a40a27fbbfd1/a_sqlbuilder-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c948c4662f517554d2f522ad3aa786fe8cbfcd1d81c315b05287ff3f48b3f9a",
          "md5": "544ede5fb854e46f3a5e25a69c93f99f",
          "sha256": "3fa78b1ef0acace2ea4219754244e416ee24ad26c40f80e4e90aa9eec386fdbe"
        },
        "downloads": -1,
        "filename": "a-sqlbuilder-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "544ede5fb854e46f3a5e25a69c93f99f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7930,
        "upload_time": "2019-07-05T10:56:54",
        "upload_time_iso_8601": "2019-07-05T10:56:54.897699Z",
        "url": "https://files.pythonhosted.org/packages/5c/94/8c4662f517554d2f522ad3aa786fe8cbfcd1d81c315b05287ff3f48b3f9a/a-sqlbuilder-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b64a65d0f9e998c5d25971c41fb95ea078a7d09d41d39048ae91a40a27fbbfd1",
        "md5": "f095b35a7454b3c7ce6fc753e31fb700",
        "sha256": "1695bf43f6b2e280eb78e0564412077b226d0369746a17ec25761a6e43bed764"
      },
      "downloads": -1,
      "filename": "a_sqlbuilder-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f095b35a7454b3c7ce6fc753e31fb700",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9563,
      "upload_time": "2019-07-05T10:56:53",
      "upload_time_iso_8601": "2019-07-05T10:56:53.102786Z",
      "url": "https://files.pythonhosted.org/packages/b6/4a/65d0f9e998c5d25971c41fb95ea078a7d09d41d39048ae91a40a27fbbfd1/a_sqlbuilder-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5c948c4662f517554d2f522ad3aa786fe8cbfcd1d81c315b05287ff3f48b3f9a",
        "md5": "544ede5fb854e46f3a5e25a69c93f99f",
        "sha256": "3fa78b1ef0acace2ea4219754244e416ee24ad26c40f80e4e90aa9eec386fdbe"
      },
      "downloads": -1,
      "filename": "a-sqlbuilder-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "544ede5fb854e46f3a5e25a69c93f99f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7930,
      "upload_time": "2019-07-05T10:56:54",
      "upload_time_iso_8601": "2019-07-05T10:56:54.897699Z",
      "url": "https://files.pythonhosted.org/packages/5c/94/8c4662f517554d2f522ad3aa786fe8cbfcd1d81c315b05287ff3f48b3f9a/a-sqlbuilder-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}