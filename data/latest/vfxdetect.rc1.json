{
  "info": {
    "author": "Thomas Weckenmann",
    "author_email": "tweckenmann0711@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: Console :: Curses",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Multimedia :: Video",
      "Topic :: Multimedia :: Video :: Conversion",
      "Topic :: Multimedia :: Video :: Non-Linear Editor",
      "Topic :: Utilities"
    ],
    "description": "VFX Shot Detection Tool (detects VFX shot code burnins)\n----------------------------------------------------------\n\n[![PyPI Status](https://img.shields.io/pypi/status/vfxdetect.svg)](https://pypi.python.org/pypi/vfxdetect/)\n[![PyPI Version](https://img.shields.io/pypi/v/vfxdetect?color=blue)](https://pypi.python.org/pypi/vfxdetect/)\n\n### Latest Release: v0.6.3 (June 07, 2021)\n\n----------------------------------------------------------\n\n**Quick Install**: To install PyVfxShotDetect via `pip` with all dependencies:\n\n    pip install vfxdetect\n\nThis is an extended version of [PySceneDetect v0.5.5](https://github.com/Breakthrough/PySceneDetect).\nThe complete PySceneDetect manual can be found [here](https://pyscenedetect.readthedocs.io/en/latest/)\n\nTo enable video splitting support, you will also need to have `mkvmerge` or `ffmpeg` installed - see the pyscenedetect documentation on [Video Splitting Support](https://pyscenedetect.readthedocs.io/en/latest/examples/video-splitting/) for details.\n\nRequires Python modules `click`, `numpy`, OpenCV `cv2`, `pytesseract` and (optional) `tqdm` for displaying progress.  For details, see the [PySceneDetect dependencies ](https://pyscenedetect.readthedocs.io/en/latest/download/#dependencies).\n\n----------------------------------------------------------\n\n**Quick Start (Command Line)**:\n\nAnalyse a video (detect all cuts) and export an EDL:\n\n    vfxdetect -i video.mp4 detect-content export-edl\n\nAnalyse a video and export an EDL only containing VFX Shots (based on detected VFX shot code burnins).\nPrior to analysing the video, the video is played and the user is asked to define a boundary box\n(rectangle that encloses a VFX shot code burnin) which helps vfxdetect to find the VFX shots and extract the VFX shot codes)\nIn addition to the edl, a .bbox file (text file) containing the boundary box coordinates is stored next to the input video file:\n\n    vfxdetect -i video.mp4 detect-content export-vfx-edl\n\nAnalyse a video and export an EDL only containing VFX shots plus specifying a file containing boundary box coordinates:\n\n    vfxdetect -i video.mp4 detect-content export-vfx-edl -bb bbox-file.txt\n\nTo show a summary of all other options and commands:\n\n    vfxdetect help\n\nYou can find more examples [on the PySceneDetect website](https://pyscenedetect.readthedocs.io/en/latest/examples/usage-example/) or [in the PySceneDetect manual](https://pyscenedetect.readthedocs.io/projects/Manual/en/latest/cli/global_options.html).\n\nPython API: See [the PySceneDetect manual](https://pyscenedetect.readthedocs.io/projects/Manual/en/latest/api.html) for the full PySceneDetect API documentation.\n\n----------------------------------------------------------\n\nPyVfxShotDetect is a command-line tool and Python library, which uses OpenCV to analyze a video to find scene changes or cuts.  If `ffmpeg` or `mkvmerge` is installed, the video can also be split into scenes automatically.  A frame-by-frame analysis can also be generated for a video, to help with determining optimal threshold values or detecting patterns/other analysis methods for a particular video.  See [the PySceneDetect Usage documentation](https://pyscenedetect.readthedocs.io/en/latest/examples/usage/) for details.\n\nThere are two main detection methods PyVfxShotDetect uses: `detect-threshold` (comparing each frame to a set black level, useful for detecting cuts and fades to/from black), and `detect-content` (compares each frame sequentially looking for changes in content, useful for detecting fast cuts between video scenes, although slower to process).  Each mode has slightly different parameters, and is described in detail below.\n\nIn general, use `detect-threshold` mode if you want to detect scene boundaries using fades/cuts in/out to black.  If the video uses a lot of fast cuts between content, and has no well-defined scene boundaries, you should use the `detect-content` mode.  Once you know what detection mode to use, you can try the parameters recommended below, or generate a statistics file (using the `-s` / `--statsfile` flag) in order to determine the correct paramters - specifically, the proper threshold value.\n\nNote that PyVfxShotDetect is currently in beta; see Current Features & Roadmap below for details.  \nFor help or other issues, you can submit an issue/bug report [here on Github](https://github.com/ThomasWeckenmann/PyVfxShotDetect/issues).\n\n\nUsage\n----------------------------------------------------------\n\n## Global Options\n\n```md\nPyVfxShotDetect Option/Command List:\n----------------------------------------------------\n\nUsage: vfxdetect [OPTIONS] COMMAND1 [ARGS]... [COMMAND2 [ARGS]...]...\n\n  For example:\n\n  vfxdetect -i video.mp4 -s video.stats.csv detect-content list-scenes\n\n  Note that the following options represent [OPTIONS] above. To list the\n  optional [ARGS] for a particular COMMAND, type `vfxdetect help COMMAND`.\n  You can also combine commands (e.g. vfxdetect [...] detect-content save-\n  images --png split-video).\n\nOptions:\n  -i, --input VIDEO      [Required] Input video file. May be specified\n                         multiple times to concatenate several videos\n                         together. Also supports image sequences and URLs.\n  -o, --output DIR       Output directory for all files (stats file, output\n                         videos, images, log files, etc...).\n  -f, --framerate FPS    Force framerate, in frames/sec (e.g. -f 29.97).\n                         Disables check to ensure that all input videos have\n                         the same framerates.\n  -d, --downscale N      Integer factor to downscale frames by (e.g. 2, 3,\n                         4...), where the frame is scaled to width/N x\n                         height/N (thus -d 1 implies no downscaling). Each\n                         increment speeds up processing by a factor of 4 (e.g.\n                         -d 2 is 4 times quicker than -d 1). Higher values can\n                         be used for high definition content with minimal\n                         effect on accuracy. [default: 2 for SD, 4 for 720p, 6\n                         for 1080p, 12 for 4k]\n  -fs, --frame-skip N    Skips N frames during processing (-fs 1 skips every\n                         other frame, processing 50% of the video, -fs 2\n                         processes 33% of the frames, -fs 3 processes 25%,\n                         etc...). Reduces processing speed at expense of\n                         accuracy.  [default: 0]\n  -m, --min-scene-len TIMECODE\n                         Minimum size/length of any scene. TIMECODE can\n                         be specified as exact number of frames, a time\n                         in seconds followed by s, or a timecode in the\n                         format HH:MM:SS or HH:MM:SS.nnn [default: 0.6s]\n  --drop-short-scenes    Drop scenes shorter than `--min-scene-len`\n                         instead of combining them with neighbors\n  -s, --stats CSV        Path to stats file (.csv) for writing frame metrics\n                         to. If the file exists, any metrics will be\n                         processed, otherwise a new file will be created. Can\n                         be used to determine optimal values for various scene\n                         detector options, and to cache frame calculations in\n                         order to speed up multiple detection runs.\n  -v, --verbosity LEVEL  Level of debug/info/error information to show.\n                         Setting to none will suppress all output except that\n                         generated by actions (e.g. timecode list output).\n  -l, --logfile LOG      Path to log file for writing application logging\n                         information, mainly for debugging. Make sure to set\n                         \"-il debug\" as well if you are submitting a bug\n                         report.\n  -q, --quiet            Suppresses all output of PySceneDetect except for\n                         those from the specified commands. Equivalent to\n                         setting \"--info-level none\", and overrides the\n                         current info-level, even if --info-level/-il is\n                         specified.\n  -h, --help             Show this message and exit.\n\n```\n\n\n## Command List\n\n```md\nCommands:\n  about             Print license/copyright info.\n  detect-content    Perform content detection algorithm on input...\n  detect-threshold  Perform threshold detection algorithm on...\n  export-html       Exports scene list to a HTML file.\n  export-edl        Exports scene list to an EDL file.\n  export-vfx-edl    Exports scene list to an EDL file (VFX shots only).\n  help              Print help for command (help [command]).\n  list-scenes       Prints scene list and outputs to a CSV file.\n  save-images       Create images for each detected scene.\n  split-video       Split input video(s) using ffmpeg or...\n  time              Set start/end/duration of input video(s).\n  version           Print version of PySceneDetect.\n```\n\n\n## `time` Command\n\n```md\nPyVfxShotDetect time Command\n----------------------------------------------------\nUsage: vfxdetect time [OPTIONS]\n\n  Set start/end/duration of input video(s).\n\n  Time values can be specified as frames (NNNN), seconds (NNNN.NNs), or as a\n  timecode (HH:MM:SS.nnn). For example, to start scene detection at 1\n  minute, and stop after 100 seconds:\n\n  time --start 00:01:00 --duration 100s\n\n  Note that --end and --duration are mutually exclusive (i.e. only one of\n  the two can be set). Lastly, the following is an example using absolute\n  frame numbers to process frames 0 through 1000:\n\n  time --start 0 --end 1000\n\nOptions:\n  -s, --start TIMECODE     Time in video to begin detecting scenes. TIMECODE\n                           can be specified as exact number of frames (-s 100\n                           to start at frame 100), time in seconds followed by\n                           s (-s 100s to start at 100 seconds), or a timecode\n                           in the format HH:MM:SS or HH:MM:SS.nnn (-s 00:01:40\n                           to start at 1m40s).  [default: 0]\n  -d, --duration TIMECODE  Maximum time in video to process. TIMECODE format\n                           is the same as other arguments. Mutually exclusive\n                           with --end / -e.\n  -e, --end TIMECODE       Time in video to end detecting scenes. TIMECODE\n                           format is the same as other arguments. Mutually\n                           exclusive with --duration / -d.\n  -h, --help               Show this message and exit.\n```\n\n\n## `detect-content` Command\n\n```md\nPyVfxShotDetect detect-content Command\n----------------------------------------------------\nUsage: vfxdetect detect-content [OPTIONS]\n\n  Perform content detection algorithm on input video(s).\n\n  detect-content\n\n  detect-content --threshold 27.5\n\nOptions:\n  -t, --threshold VAL         Threshold value (float) that the delta_hsv frame\n                              metric must exceed to trigger a new scene.\n                              Refers to frame metric delta_hsv_avg in stats\n                              file.  [default: 30.0]\n  -h, --help                  Show this message and exit.\n```\n\n\n## `detect-threshold` Command\n\n```md\nPyVfxShotDetect detect-threshold Command\n----------------------------------------------------\nUsage: vfxdetect detect-threshold [OPTIONS]\n\n  Perform threshold detection algorithm on input video(s).\n\n  detect-threshold\n\n  detect-threshold --threshold 15\n\nOptions:\n  -t, --threshold VAL         Threshold value (integer) that the delta_rgb\n                              frame metric must exceed to trigger a new scene.\n                              Refers to frame metric delta_rgb in stats file.\n                              [default: 12]\n  -f, --fade-bias PERCENT     Percent (%) from -100 to 100 of timecode skew\n                              for where cuts should be placed. -100 indicates\n                              the start frame, +100 indicates the end frame,\n                              and 0 is the middle of both.  [default: 0]\n  -l, --add-last-scene        If set, if the video ends on a fade-out, an\n                              additional scene will be generated for the last\n                              fade out position.\n  -p, --min-percent PERCENT   Percent (%) from 0 to 100 of amount of pixels\n                              that must meet the threshold value in orderto\n                              trigger a scene change.  [default: 95]\n  -b, --block-size N          Number of rows in image to sum per iteration\n                              (can be tuned for performance in some cases).\n                              [default: 8]\n  -h, --help                  Show this message and exit.\n```\n\n\n## `list-scenes` Command\n\n```md\nPyVfxShotDetect list-scenes Command\n----------------------------------------------------\nUsage: vfxdetect list-scenes [OPTIONS]\n\n  Prints scene list and outputs to a CSV file. The default filename is\n  $VIDEO_NAME-Scenes.csv.\n\nOptions:\n  -o, --output DIR      Output directory to save videos to. Overrides global\n                        option -o/--output if set.\n  -f, --filename NAME   Filename format to use for the scene list CSV file.\n                        You can use the $VIDEO_NAME macro in the file name.\n                        Note that you may have to wrap the name using single\n                        quotes.  [default: $VIDEO_NAME-Scenes.csv]\n  -n, --no-output-file  Disable writing scene list CSV file to disk.  If set,\n                        -o/--output and -f/--filename are ignored.\n  -q, --quiet           Suppresses output of the table printed by the list-\n                        scenes command.\n  -s, --skip-cuts       Skips outputting the cutting list as the first row in\n                        the CSV file. Set this option if compliance with RFC\n                        4810 is required.\n```\n\n\n## `save-images` Command\n\n```md\nPyVfxShotDetect save-images Command\n----------------------------------------------------\nUsage: vfxdetect save-images [OPTIONS]\n\n  Create images for each detected scene.\n\nOptions:\n  -o, --output DIR      Output directory to save images to. Overrides global\n                        option -o/--output if set.\n  -f, --filename NAME   Filename format, *without* extension, to use when\n                        saving image files. You can use the $VIDEO_NAME,\n                        $SCENE_NUMBER, $IMAGE_NUMBER, and $FRAME_NUMBER macros in the file\n                        name. Note that you may have to wrap the format in\n                        single quotes.  [default: $VIDEO_NAME-\n                        Scene-$SCENE_NUMBER-$IMAGE_NUMBER]\n  -n, --num-images N    Number of images to generate. Will always include\n                        start/end frame, unless N = 1, in which case the image\n                        will be the frame at the mid-point in the scene.\n  -j, --jpeg            Set output format to JPEG. [default]\n  -w, --webp            Set output format to WebP.\n  -q, --quality Q       JPEG/WebP encoding quality, from 0-100 (higher\n                        indicates better quality). For WebP, 100 indicates\n                        lossless. [default: JPEG: 95, WebP: 100]  [0<=x<=100]\n  -p, --png             Set output format to PNG.\n  -c, --compression C   PNG compression rate, from 0-9. Higher values produce\n                        smaller files but result in longer compression time.\n                        This setting does not affect image quality, only file\n                        size. [default: 3]  [0<=x<=9]\n  -m, --frame-margin N  Number of frames to ignore at the beginning and end of\n                        scenes when saving images [default: 1]\n  -s  --scale S         Optional factor by which saved images are rescaled. A \n                        scaling factor of 1 would not result in rescaling. A \n                        value <1 results in a smaller saved image, while a \n                        value >1 results in an image larger than the original. \n                        This value is ignored if either the height, -h, or \n                        width, -w, values are specified.\n  -h  --height H        Optional value for the height of the saved images. \n                        Specifying both the height and width, -w, will resize \n                        images to an exact size, regardless of aspect ratio. \n                        Specifying only height will rescale the image to that \n                        number of pixels in height while preserving the aspect \n                        ratio.\n  -w  --width W         Optional value for the width of the saved images. \n                        Specifying both the width and height, -h, will resize \n                        images to an exact size, regardless of aspect ratio. \n                        Specifying only width will rescale the image to that \n                        number of pixels wide while preserving the aspect ratio.\n```\n\n\n## `split-video` Command\n\n```md\nPyVfxShotDetect split-video Command\n----------------------------------------------------\nUsage: vfxdetect split-video [OPTIONS]\n\n  Split input video(s) using ffmpeg or mkvmerge.\n\nOptions:\n  -o, --output DIR          Output directory to save videos to. Overrides\n                            global option -o/--output if set.\n  -f, --filename NAME       File name format, to use when saving image files.\n                            You can use the $VIDEO_NAME and $SCENE_NUMBER\n                            macros in the file name. Note that you may have\n                            to wrap the name using single quotes.\n                            [default: $VIDEO_NAME-Scene-$SCENE_NUMBER]\n  -h, --high-quality        Encode video with higher quality, overrides -f\n                            option if present. Equivalent to specifying\n                            --rate-factor 17 and --preset slow.\n  -a, --override-args ARGS  Override codec arguments/options passed to FFmpeg\n                            when splitting and re-encoding scenes. Use double\n                            quotes (\") around specified arguments. Must\n                            specify at least audio/video codec to use (e.g. -a\n                            \"-c:v [...] and -c:a [...]\"). [default: \"-c:v\n                            libx264 -preset veryfast -crf 22 -c:a copy\"]\n  -q, --quiet               Suppresses output from external video splitting\n                            tool.\n  -c, --copy                Copy instead of re-encode using mkvmerge instead\n                            of ffmpeg for splitting videos. All other\n                            arguments except -o/--output and -q/--quiet are\n                            ignored in this mode, and output files will be\n                            named $VIDEO_NAME-$SCENE_NUMBER.mkv. Significantly\n                            faster when splitting videos, however, output\n                            videos sometimes may not be split exactly,\n                            especially if the scenes are very short in length,\n                            or the input video is heavily compressed. This can\n                            lead to smaller scenes being merged with others,\n                            or scene boundaries being shifted in time - thus\n                            when using this option, the number of videos\n                            written may not match the number of scenes that\n                            was detected.\n  -crf, --rate-factor RATE  Video encoding quality (x264 constant rate\n                            factor), from 0-100, where lower values represent\n                            better quality, with 0 indicating lossless.\n                            [default: 22, if -h/--high-quality is set: 17]\n  -p, --preset LEVEL        Video compression quality preset (x264 preset).\n                            Can be one of: ultrafast, superfast, veryfast,\n                            faster, fast, medium, slow, slower, and veryslow.\n                            Faster modes take less time to run, but the output\n                            files may be larger. [default: veryfast, if\n                            -h/--high quality is set: slow]\n```\n\n\n## `export-html` Command\n\n```md\nPyVfxShotDetect export-html Command\n----------------------------------------------------\nUsage: vfxdetect.py export-html [OPTIONS]\n\n  Exports scene list to a HTML file. Requires save-images by default.\n\nOptions:\n  -f, --filename NAME        Filename format to use for the scene list HTML\n                             file. You can use the $VIDEO_NAME macro in the\n                             file name. Note that you may have to wrap the\n                             the format name using single quotes.\n                             [default: $VIDEO_NAME-Scenes.html]\n  --no-images                Export the scene list including or excluding the\n                             saved images.\n  -w, --image-width pixels   Width in pixels of the images in the resulting\n                             HTML table.\n  -h, --image-height pixels  Height in pixels of the images in the resulting\n                             HTML table.\n```\n\n\n## `export-edl` Command\n\n```md\nPyVfxShotDetect export-edl Command\n----------------------------------------------------\nUsage: vfxdetect.py export-edl [OPTIONS]\n\n  Exports scene list to an EDL file.\n\nOptions:\n  -f, --filename NAME        Filename format to use for the scene list EDL\n                             file. You can use the $VIDEO_NAME macro in the\n                             file name. Note that you may have to wrap the\n                             the format name using single quotes.\n                             [default: $VIDEO_NAME.edl]\n```\n\n\n## `export-vfx-edl` Command\n\n```md\nPyVfxShotDetect export-vfx-edl Command\n----------------------------------------------------\nUsage: vfxdetect.py export-vfx-edl [OPTIONS]\n\n  Exports scene list to an EDL file. EDL events are reduced to VFX Shots.\n  VFX Shots are detected by text detection. This requires a bounding box\n  specified in a text file with first line containing bbox data like\n  \"[55, 32, 227, 77]\". The bounding box is a list of coordinates which build a\n  rectangle arround VFX Shotcode burnin: [ul-x, ul-y, lr-x, lr-y].\n  If no .bbox file is specified a cv2 player will be shown and bbox can be\n  selected.\n\n\nOptions:\n  -bb, --bbox-filename NAME  Textfile containing bbox coordinates in this\n                             format: \"[55, 32, 227, 77]\".\n  -f, --filename NAME        Filename format to use for the scene list EDL\n                             file. You can use the $VIDEO_NAME macro in the\n                             file name. Note that you may have to wrap the\n                             the format name using single quotes.\n                             [default: $VIDEO_NAME.edl]\n----------------------------------------------------------\n```\n\nLicensed under BSD 3-Clause (see the `LICENSE` file for details).\n\nCopyright (C) 2021-2021 Thomas Weckenmann.\nAll rights reserved.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ThomasWeckenmann/PyVfxShotDetect",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vfxdetect",
    "package_url": "https://pypi.org/project/vfxdetect/",
    "platform": "",
    "project_url": "https://pypi.org/project/vfxdetect/",
    "project_urls": {
      "Homepage": "https://github.com/ThomasWeckenmann/PyVfxShotDetect"
    },
    "release_url": "https://pypi.org/project/vfxdetect/0.6.3/",
    "requires_dist": [
      "Click",
      "numpy",
      "tqdm",
      "opencv-python",
      "pytesseract"
    ],
    "requires_python": "",
    "summary": "A cross-platform, OpenCV-based VFX shot detection program and Python library.",
    "version": "0.6.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10564477,
  "releases": {
    "0.6.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5fd667cbb5d2d1d3867d15bf00f0370d3d8becea35cf0758debf3e5e8192c8d",
          "md5": "093127b6c07a0ffc76e46c6eee145b02",
          "sha256": "11a50f99218c8cdc06196052fc5152c9a4f2259ee4d3ff63a637de20ed0ffda9"
        },
        "downloads": -1,
        "filename": "vfxdetect-0.6.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "093127b6c07a0ffc76e46c6eee145b02",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 103948,
        "upload_time": "2021-06-05T09:17:10",
        "upload_time_iso_8601": "2021-06-05T09:17:10.547034Z",
        "url": "https://files.pythonhosted.org/packages/f5/fd/667cbb5d2d1d3867d15bf00f0370d3d8becea35cf0758debf3e5e8192c8d/vfxdetect-0.6.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24b614227353000cfcb124dc66184178795a4cdfa39fac5f907ea47e1a7b6472",
          "md5": "15512f642d6a6e638dd9852abb6217b7",
          "sha256": "9a56e0762262e4cd31abd0cb4048d5ff415b72601b9b2148b7bd36f27be8ce74"
        },
        "downloads": -1,
        "filename": "vfxdetect-0.6.3.tar.gz",
        "has_sig": false,
        "md5_digest": "15512f642d6a6e638dd9852abb6217b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2513776,
        "upload_time": "2021-06-05T09:17:19",
        "upload_time_iso_8601": "2021-06-05T09:17:19.640347Z",
        "url": "https://files.pythonhosted.org/packages/24/b6/14227353000cfcb124dc66184178795a4cdfa39fac5f907ea47e1a7b6472/vfxdetect-0.6.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5fd667cbb5d2d1d3867d15bf00f0370d3d8becea35cf0758debf3e5e8192c8d",
        "md5": "093127b6c07a0ffc76e46c6eee145b02",
        "sha256": "11a50f99218c8cdc06196052fc5152c9a4f2259ee4d3ff63a637de20ed0ffda9"
      },
      "downloads": -1,
      "filename": "vfxdetect-0.6.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "093127b6c07a0ffc76e46c6eee145b02",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 103948,
      "upload_time": "2021-06-05T09:17:10",
      "upload_time_iso_8601": "2021-06-05T09:17:10.547034Z",
      "url": "https://files.pythonhosted.org/packages/f5/fd/667cbb5d2d1d3867d15bf00f0370d3d8becea35cf0758debf3e5e8192c8d/vfxdetect-0.6.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "24b614227353000cfcb124dc66184178795a4cdfa39fac5f907ea47e1a7b6472",
        "md5": "15512f642d6a6e638dd9852abb6217b7",
        "sha256": "9a56e0762262e4cd31abd0cb4048d5ff415b72601b9b2148b7bd36f27be8ce74"
      },
      "downloads": -1,
      "filename": "vfxdetect-0.6.3.tar.gz",
      "has_sig": false,
      "md5_digest": "15512f642d6a6e638dd9852abb6217b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2513776,
      "upload_time": "2021-06-05T09:17:19",
      "upload_time_iso_8601": "2021-06-05T09:17:19.640347Z",
      "url": "https://files.pythonhosted.org/packages/24/b6/14227353000cfcb124dc66184178795a4cdfa39fac5f907ea47e1a7b6472/vfxdetect-0.6.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}