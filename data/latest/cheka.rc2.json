{
  "info": {
    "author": "Nicholas Car",
    "author_email": "nicholas.car@surroundaustralia.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "![](style/cheka.png)\n\n![](https://zenodo.org/badge/DOI/10.5281/zenodo.3676330.svg)  \n# CHEKA\nA profile hierarchy-based RDF graph validation tool written in Python\n\n\n1. [Installation](#installation)\n2. [Use](#use)\n3. [Testing](#testing)\n4. [License](#license)\n6. [Citation](#citation)\n5. [Contacts](#contacts)\n\n\nThis tool validates a data graph against a set of SHACL shape graphs that it extracts from a hierarchy of Profiles (Standards/Specifications and/or profiles of them). It uses conformance claims in the data graph to a Profile to collate and then use all the \n*validator* SHACL files within the hierarchy of other Profiles and Standards to which that Profile profiles.\n\nCheka uses [Profiles Vocabulary (PROF)](https://www.w3.org/TR/dx-prof/) descriptions of Profiles and Standards and both \ntraverses up a Profile hierarchy (following `prof:isProfileOf` properties) and across from `prof:Profiles`s to \n`prof:ResourceDescriptors` that describe the constraints implemented for them. These constraints are currently limited \nto [Shapes Constraint Language (SHACL)](https://www.w3.org/TR/shacl/) files and must have the `prof:Role` of \n`role:validation` to be recognised by Cheka. The [pySHACL](https://github.com/RDFLib/pySHACL) Python SHACL validator is \nused to perform SHACL validation.\n\n\n## Installation\n1. Ensure Python 3 in available on your system\n2. Clone this repo\n2. Install requirements in *requirements.txt*, e.g. `~$ pip3 install -r requirements.txt`\n3. Execute scripts as per *Use* below\n\n\n## Use\n### Input requirements\nTo use Cheka, you must supply it with both a data (an RDF graph) to be validated and a profiles hierarchy (another RDF graph). It will then use \none of several selected strategies to validate objects within the data using validating resources it locates using the \nprofiles hierarchy.\n\nYou *may* supply it with a couple of other flags too for other functions.\n\nThe command line arguments (Python & BASH) are:\n\n**Flag** | **Input values** | **Requirement** | **Notes**  \n--- | --- | --- | ---\n`-d` / `--data` | an RDF file's path | mandatory | Can be in most RDF formats with conventional file endings (e.g. `.ttl` for Turtle, `.jsonld` for JSON-LD)\n`-p` / `--profiles` | a profile file's path | mandatory | As above. Profiles description must be formulated according to [PROF](https://www.w3.org/TR/dx-prof/) \n`-s` / `--strategy` | 'shacl' or 'profile' | optional, 'shacl' default | Which strategy to use. See [Strategies](#strategies) description below\n`-u` / `--profile-uri` | the URI of a profile in the profile hierarchy | sometimes mandatory | If strategy 'profile' is selected, a profile URI must be give. The data is then validated using validators within that profile's hierarchy only\n`-r` / `--get-remotes` | none | optional, default False | If True, Cheka will pull in profile and validating SHACL artifacts referenced, but not described, in the profiles hierarchy, i.e. remote profiles online\n\n\n#### Data graph\nThis must be an RDF file with the part(s) to be validated indicating their conformance to a *profile* as per the \nProfiles Vocabulary.\n\nTypically this will look like this:\n\n```\n@prefix dct: <http://purl.org/dc/terms/> .\n\n<Object_X>\n    a <Class_Y> ;\n    dct:conformsTo <Profile_Z> ;\n    ...\n```\n\nThis says that `<Object_X>` is meant to conform to `<Profile_Z>`.\n\nSee the `tests/` folder for example data graphs.\n\n\n#### Profiles hierarchy\nThis must also be an RDF file that contains a hierarchy of `prof:Profile` objects (including `dct:Standard` objects) \nthat are related to one another via the `prof:isProfileOf` property and each of which has a validating resource \nindicated by relating it to a `prof:Profile` via a `prof:ResourceDescriptor` like this:\n\n```\n@prefix dct: <http://purl.org/dc/terms/> .\n@prefix prof: <http://www.w3.org/ns/dx/prof/> .\n@prefix role:  <http://www.w3.org/ns/dx/prof/role/> .\n\n\n<Standard_A>\n    a dct:Standard ;\n    prof:hasResource [\n        a prof:ResourceDescriptor ;\n        prof:hasRole role:validation ;\n        prof:hasArtifact <File_or_Uri_J> ;\n    ]\n.\n\n<Profile_B>\n    a prof:Profile ;\n    prof:isProfileOf <Standard_A> ;\n    prof:hasResource <Resource_Descriptor_P> ;\n.   \n\n<Resource_Descriptor_P>\n    a prof:ResourceDescriptor ;\n    prof:hasRole role:validation ;\n    prof:hasArtifact <File_or_Uri_K> ;\n.\n\n<Profile_C>\n    a prof:Profile ; \n    prof:isProfileOf <Profile_B> ;    \n    prof:hasResource [\n        a prof:ResourceDescriptor ;\n        prof:hasRole role:validation ;\n        prof:hasArtifact <File_or_Uri_L> ;\n    ] ;\n.\n```\n\nThis says `<Profile_C>` is a profile of `<Profile_B>` which is, in turn, a profile of `<Standard_A>`. The two profiles \nand the standard have resources `<File_or_Uri_J>`, `<File_or_Uri_K>` & `<File_or_Uri_L>` respectively which are \nindicated to be validators by the `prof:ResourceDescriptor` classes that associate them with their profiles/standard.\n\nSee the `tests/` folder for example profiles graphs.\n\n\n#### Strategies\nThe following different strategies may be selected for use.\n\n**Name** | **Description**\n--- | ---\n*shacl* | Standard SHACL validation: all the SHACL validators from all the profiles found in the profiles hierarchy are used to validate the the given data using the SHACL validators' targeting (usually per class)\n*profile* | Validates given data using the validators found linked to a profile and all the profiles in that profile's hierarchy. This is the \"main\" Cheka strategy, as opposed to *shacl* which is \"normal\" SHACL validation\n*claims* | *Not implemented yet, likely February 2021*\n\n***shacl*** is the default strategy\n\nNote that the strategy is applied using the `-s` flag. When using Cheka as a Python module, a different strategy may be applied per call to `Cheka.validate()`.\n\n\n### Running\nCheka uses the profiles graph to find all the SHACL validators it needs to validate a data graph. It returns a pySHACL \nresult with an additional element - the URI of the profile used for validation: [conforms, results_graph, results_text, profile_uri]. *conforms* is either True or False.\n\n#### As a Python module\nA Python program can import Cheka (`import cheka`) after installing it (`pip install cheka`). Then Cheka can be called in code like this:\n\n```python\nimport cheka\n\nc = cheka.Cheka(\"data.ttl\", \"profiles_hierarchy.ttl\")\n\n# to tell Cheka to pull in profiles/validators \n# referenced but not defined in the profiles_hierarchy.ttl\nc.get_remote_profiles = True  \n\n# a simple validation - basic, default, shacl-only (no use of profiles)\nc.validate()\n\n# profile-based vaidation, starting with the profile Profile_C \nc.validate(\n    strategy=\"profile\", \n    profile_uri=\"http://example.org/profile/Profile_C\"\n)\n```\n\n#### As a Python command line utility\n```\n~$ python3 cli.py -d DATA-GRAPH-FILE -p PROFILES-GRAPH-FILE\n```\n*(and potentially other optional args)*\n\nIf you make the cli.py script executable (`sudo chmod a+x cli.py`) then you can run it like this:\n\n```\n~$ ./cli.py -d DATA-GRAPH-FILE -p PROFILES-GRAPH-FILE\n```\n\n#### As a BASH script\nThe file `cheka` in the `bin/` directory is a BASH shell script that calls `cli.py`. Make it executable \n(`sudo chmod a+x cheka`) then you can run it like this:\n\n```\n~$ ./cheka -d DATA-GRAPH-FILE -p PROFILES-GRAPH-FILE\n```\n*(and potentially other optional args)*\n\n#### As a Windows executable\n*coming!*\n\n\n## Testing\nTests are included in the `tests/` directory. They use [pytest](https://docs.pytest.org/en/latest/) should be able to be run from the command line. They have \nno dependencies, other than pytest and Cheka itself.\n\nTests are annotated with what they are testing.\n\n### Test profile hierarchy\nThe profiles and validators used for the tests in this code are combined in the file [test-profile.hierarchy.ttl](cheka/test/test-profile.hierarchy.ttl). This hierarchy can be used in other applications as an example of a profile hierarchy.\n\n\n## License  \nThis code is licensed using the GPL v3 licence. See the [LICENSE file](LICENSE) for the deed. \n\nNote [Citation](#citation) below for attribution.\n\n\n## Citation\nTo cite this software, please use the following BibTex:\n\n```\n@software{10.5281/zenodo.3676330,\n  author = {{Nicholas J. Car}},\n  title = {Cheka: A profile hierarchy-based RDF graph validation tool written in Python},\n  version = {0.5},\n  date = {2020},\n  publisher = \"SURROUND Australia Pty. Ltd.\",\n  doi = {10.5281/zenodo.3676330},\n  url = {https://doi.org/10.5281/zenodo.3676330}\n}\n```\n\nOr the following RDF:\n\n```\n@prefix dcterms: <http://purl.org/dc/terms/> .\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\n@prefix sdo: <https://schema.org/> .\n@prefix wiki: <https://www.wikidata.org/wiki/> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n<https://doi.org/10.5281/zenodo.3676330>\n    a sdo:SoftwareSourceCode , owl:NamedIndividual ;\n    sdo:codeRepository <https://github.com/surroundaustralia/cheka> ;\n    dcterms:type wiki:Q7397 ; # \"software\"\n    dcterms:creator \"Nicholas J. Car\" ;\n    dcterms:date \"2020\"^^xsd:gYear ;\n    dcterms:title \"Cheka: A profile hierarchy-based RDF graph validation tool written in Python\" ;\n    sdo:version \"0.5\" ;\n    dcterms:publisher [\n        a sdo:Organization ;\n        sdo:name \"SURROUND Pty Ltd\" ;\n        sdo:url <https://surroundaustralia.com> ;\n    ]\n.\n```\n\n\n## Contacts\n\n*publisher:*  \n![](style/SURROUND-logo-100.png)  \n**SURROUND Australia Pty. Ltd.**  \n<https://surroundaustralia.com>  \n\n*creator:*  \n**Dr Nicholas J. Car**  \n*Data Systems Architect*  \nSURROUND Australia Pty. Ltd.  \n<nicholas.car@surroudaustralia.com>  \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/surroundaustralia/cheka/archive/0.7.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/surroundaustralia/cheka",
    "keywords": "Semantic Web,OWL,ontology,SHACL,validation,profiles",
    "license": "LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cheka",
    "package_url": "https://pypi.org/project/cheka/",
    "platform": "",
    "project_url": "https://pypi.org/project/cheka/",
    "project_urls": {
      "Bug Reports": "https://github.com/surroundaustralia/cheka/issues",
      "Download": "https://github.com/surroundaustralia/cheka/archive/0.7.tar.gz",
      "Homepage": "https://github.com/surroundaustralia/cheka",
      "Source": "https://github.com/surroundaustralia/cheka/"
    },
    "release_url": "https://pypi.org/project/cheka/0.7/",
    "requires_dist": [
      "rdflib (>=6.0.0)",
      "pyshacl",
      "requests",
      "pytest"
    ],
    "requires_python": "",
    "summary": "This tool validates a data graph against a set of SHACL shape graphs that it extracts from a hierarchy of Profiles (Standards/Specifications and/or profiles of them).",
    "version": "0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9055568,
  "releases": {
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "472df7e04e386adfed2e2e4b239a2419021c92fd518a7b66fc3b188adaf4182a",
          "md5": "4c81e112dfd715f16f1ff78568bed39d",
          "sha256": "14546183e1028185b6e14f12b22fb72995713f084ac29ad309afaca71069d797"
        },
        "downloads": -1,
        "filename": "cheka-0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c81e112dfd715f16f1ff78568bed39d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 22667,
        "upload_time": "2020-10-15T14:11:04",
        "upload_time_iso_8601": "2020-10-15T14:11:04.265308Z",
        "url": "https://files.pythonhosted.org/packages/47/2d/f7e04e386adfed2e2e4b239a2419021c92fd518a7b66fc3b188adaf4182a/cheka-0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3c7742ca49627ba9239c7482bb3038b86e7cf23dd33bd70670188e3e796308d",
          "md5": "40755fe8fb687bd461837a47ee2cf2f7",
          "sha256": "e5fb0f64c7d3f434d9a1080f084b96733e6da7cbb119281c229853dab766d14c"
        },
        "downloads": -1,
        "filename": "cheka-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "40755fe8fb687bd461837a47ee2cf2f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14029,
        "upload_time": "2020-10-15T14:11:07",
        "upload_time_iso_8601": "2020-10-15T14:11:07.166801Z",
        "url": "https://files.pythonhosted.org/packages/d3/c7/742ca49627ba9239c7482bb3038b86e7cf23dd33bd70670188e3e796308d/cheka-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "068f5a97450d77cc022e40326729660588d3ed806cdbf42f0659d506988651ad",
          "md5": "f2f1f77338c9a713d5cb4a4b11846c6a",
          "sha256": "71288a8bad3c31f11e09a40694e886832eddb15916592ef0365a7fa3a6c94b9c"
        },
        "downloads": -1,
        "filename": "cheka-0.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2f1f77338c9a713d5cb4a4b11846c6a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23569,
        "upload_time": "2021-01-05T08:42:44",
        "upload_time_iso_8601": "2021-01-05T08:42:44.582299Z",
        "url": "https://files.pythonhosted.org/packages/06/8f/5a97450d77cc022e40326729660588d3ed806cdbf42f0659d506988651ad/cheka-0.7-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e61f63b998bfcf974f127c983d253acd884159fe4bf93325631af5b2a235f43",
          "md5": "58b6c8a99aa13119a21d6894d470361a",
          "sha256": "9e5dc67c04ab148a0cecc9b331bb08a2255ef8acfae7d486696c948607e94c29"
        },
        "downloads": -1,
        "filename": "cheka-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "58b6c8a99aa13119a21d6894d470361a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15206,
        "upload_time": "2021-01-05T08:42:46",
        "upload_time_iso_8601": "2021-01-05T08:42:46.190703Z",
        "url": "https://files.pythonhosted.org/packages/7e/61/f63b998bfcf974f127c983d253acd884159fe4bf93325631af5b2a235f43/cheka-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "068f5a97450d77cc022e40326729660588d3ed806cdbf42f0659d506988651ad",
        "md5": "f2f1f77338c9a713d5cb4a4b11846c6a",
        "sha256": "71288a8bad3c31f11e09a40694e886832eddb15916592ef0365a7fa3a6c94b9c"
      },
      "downloads": -1,
      "filename": "cheka-0.7-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f2f1f77338c9a713d5cb4a4b11846c6a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 23569,
      "upload_time": "2021-01-05T08:42:44",
      "upload_time_iso_8601": "2021-01-05T08:42:44.582299Z",
      "url": "https://files.pythonhosted.org/packages/06/8f/5a97450d77cc022e40326729660588d3ed806cdbf42f0659d506988651ad/cheka-0.7-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7e61f63b998bfcf974f127c983d253acd884159fe4bf93325631af5b2a235f43",
        "md5": "58b6c8a99aa13119a21d6894d470361a",
        "sha256": "9e5dc67c04ab148a0cecc9b331bb08a2255ef8acfae7d486696c948607e94c29"
      },
      "downloads": -1,
      "filename": "cheka-0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "58b6c8a99aa13119a21d6894d470361a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15206,
      "upload_time": "2021-01-05T08:42:46",
      "upload_time_iso_8601": "2021-01-05T08:42:46.190703Z",
      "url": "https://files.pythonhosted.org/packages/7e/61/f63b998bfcf974f127c983d253acd884159fe4bf93325631af5b2a235f43/cheka-0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}