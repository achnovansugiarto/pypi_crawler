{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<div style=\"text-align:center\">\n\n# rin-jsonutils\n**rin-jsonutils** is a toolkit that adds custom JSON coders and provides functions to set/get the default JSON coders\n</div>\n\n# Links\n- [GitHub](https://github.com/susautw/rin-jsonutils)\n- [PyPI](https://pypi.org/project/rin-jsonutils/)\n\n## Installation\n```sh\npip install rin-jsonutils\n```\n\n## Getting Started\n\n### Use the advanced encoder\nThis package default provides an advanced encoder\n```python\nimport json\nimport numpy as np\nfrom datetime import datetime\nfrom rin import jsonutils\n\njsonutils.use_advanced_coders()  # switch to advanced encoder\n# jsonutils.use_basic_coders()  # switch back to original json coders \n\nassert json.dumps({1, 2, 3}) == '[1, 2, 3]'  # built-in set\nassert json.dumps(np.arange(6).reshape((2, 3))) == '[[0, 1, 2], [3, 4, 5]]'  # numpy array\n\nassert json.dumps(datetime.fromordinal(1)) == '\"0001-01-01T00:00:00\"' # datetime\n```\n\n### Context in the advanced encoder\nContext is a dict store some option for resolvers. \nFor example, setting the 'datetime.format' can affect the behavior when encoding datetime objects.\n```python\nimport json\nfrom rin import jsonutils\nfrom datetime import datetime\n\njsonutils.use_advanced_coders()\nencoder: jsonutils.AdvancedJSONEncoder = jsonutils.get_current_coder().encoder\n\nassert json.dumps(datetime.fromordinal(1)) == '\"0001-01-01T00:00:00\"' # default format is isoformat\n# change the format of the datetime resolver in the encoder \nencoder.context['datetime.format'] = \"%Y-%m-%d\"\nassert json.dumps(datetime.fromordinal(1)) == '\"0001-01-01\"'\n```\n\n### Add Custom resolver to the advanced encoder\nYou can write your own custom resolver to encode the object.\n\n\n[//]: # (TODO: )\n[//]: # (  - example of priority and initialize with numpy)\n[//]: # (  - compare the resolver and JSONSerializable)\n```python\nfrom typing import Dict, Any\nfrom rin import jsonutils\n\n\nclass MyObject:\n    def __init__(self, i: int):\n        self.i = i\n\n\nclass MyObjectResolver(jsonutils.IResolver):\n    def __init__(self, show_name: bool):\n        self.show_name = show_name\n\n    def get_priority(self) -> int:\n        return jsonutils.ResolverPriority.MEDIUM\n\n    def initialize(self) -> bool:\n        \"\"\"\n        :return: False if initialization failed\n        \"\"\"\n        return True\n\n    def resolve(self, o, context: Dict[str, Any]) -> jsonutils.JSONType:\n        \"\"\"\n        :raises ResolveError when cannot resolve the object.\n                 If you aren't resolves the object, you MUST raise this exception.\n        \"\"\"\n        show_name = context.get(\"my_object.show_name\", self.show_name)\n        if show_name:\n            return {\"name\": \"MyObject\", \"i\": o.i}\n        else:\n            return {\"i\": o.i}\n\n\nencoder = jsonutils.get_coder(\"advanced\").encoder\nencoder.add_resolver(\"my_object\", MyObjectResolver(True))  # register the resolver to the encoder\n\nassert encoder.encode(MyObject(1)) == '{\"name\": \"MyObject\", \"i\": 1}'\nencoder.context['my_object.show_name'] = False  # change context\nassert encoder.encode(MyObject(1)) == '{\"i\": 1}'\n```\n\n### Simpler way to make object JSON serializable\nYou can write method `__json__` for an object. Instead of create a resolver.\n```python\nfrom typing import Dict, Any\nfrom rin import jsonutils\n\n\nclass MyObject(jsonutils.JSONSerializable):  # inherit from JSONSerializable is optional.\n    show_name: bool = True\n\n    def __init__(self, i: int):\n        self.i = i\n\n    def __json__(self, context: Dict[str, Any]) -> jsonutils.JSONType:  # implement this method is required.\n        show_name = context.get(\"my_object.show_name\", self.show_name)\n        if show_name:\n            return {\"name\": \"MyObject\", \"i\": self.i}\n        else:\n            return {\"i\": self.i}\n\nencoder = jsonutils.get_coder(\"advanced\").encoder\nassert encoder.encode(MyObject(1)) == '{\"name\": \"MyObject\", \"i\": 1}'\nencoder.context['my_object.show_name'] = False\nassert encoder.encode(MyObject(1)) == '{\"i\": 1}'\n```\n\n\n### Register custom coders into code switch\n```python\nimport json\nfrom rin import jsonutils\n\n\nclass MyJSONEncoder(json.JSONEncoder):\n    ...\n\n\nclass MyJsonDecoder(json.JSONDecoder):\n    ...\n\n\njsonutils.register_coder(\"my_coder\", MyJSONEncoder(), MyJsonDecoder())\n...\njsonutils.use(\"my_coder\")\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "json,utils",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rin-jsonutils",
    "package_url": "https://pypi.org/project/rin-jsonutils/",
    "platform": null,
    "project_url": "https://pypi.org/project/rin-jsonutils/",
    "project_urls": {
      "GitHub": "https://github.com/susautw/rin-jsonutils"
    },
    "release_url": "https://pypi.org/project/rin-jsonutils/1.1.0/",
    "requires_dist": [
      "numpy ; extra == 'numpy'"
    ],
    "requires_python": ">=3.6",
    "summary": "Add custom JSON coders and provide functions to set and get the default json coders",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14791786,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b24409e5dc8a64192da4ae76bdf2c75f7a2b567ee6b361241c79e4c48ee88b4",
          "md5": "31868ca17c6882fdf76d2e92d9ff7853",
          "sha256": "95d79c596e724fb237d3efe473cdf72b28d96b70e8376f1d6461198839cba36d"
        },
        "downloads": -1,
        "filename": "rin_jsonutils-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31868ca17c6882fdf76d2e92d9ff7853",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7196,
        "upload_time": "2022-08-17T10:25:46",
        "upload_time_iso_8601": "2022-08-17T10:25:46.081199Z",
        "url": "https://files.pythonhosted.org/packages/3b/24/409e5dc8a64192da4ae76bdf2c75f7a2b567ee6b361241c79e4c48ee88b4/rin_jsonutils-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14e0cb8756e2d3ad9a16315a85753c759afa4ef75ecc50c1406add3a6165e61e",
          "md5": "ba3c3fd5cef21d50c30bf18af931231f",
          "sha256": "ed8a9382d362f904083ffc43182c03302472664bba6197a9988bc5a66fad1988"
        },
        "downloads": -1,
        "filename": "rin_jsonutils-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba3c3fd5cef21d50c30bf18af931231f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7278,
        "upload_time": "2022-08-17T10:40:30",
        "upload_time_iso_8601": "2022-08-17T10:40:30.220308Z",
        "url": "https://files.pythonhosted.org/packages/14/e0/cb8756e2d3ad9a16315a85753c759afa4ef75ecc50c1406add3a6165e61e/rin_jsonutils-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb5e9dc49924ef3d0af57759915c0fa12e8a8c2fbeabc154d89e691c2b0b0aa7",
          "md5": "915f00914757356489529bb65945f0ed",
          "sha256": "66dde6d01dcd25e75bf04c6dd3c8109e619038288466b3239376da81c8571eb8"
        },
        "downloads": -1,
        "filename": "rin_jsonutils-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "915f00914757356489529bb65945f0ed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7214,
        "upload_time": "2022-08-17T18:56:09",
        "upload_time_iso_8601": "2022-08-17T18:56:09.009976Z",
        "url": "https://files.pythonhosted.org/packages/bb/5e/9dc49924ef3d0af57759915c0fa12e8a8c2fbeabc154d89e691c2b0b0aa7/rin_jsonutils-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb5e9dc49924ef3d0af57759915c0fa12e8a8c2fbeabc154d89e691c2b0b0aa7",
        "md5": "915f00914757356489529bb65945f0ed",
        "sha256": "66dde6d01dcd25e75bf04c6dd3c8109e619038288466b3239376da81c8571eb8"
      },
      "downloads": -1,
      "filename": "rin_jsonutils-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "915f00914757356489529bb65945f0ed",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7214,
      "upload_time": "2022-08-17T18:56:09",
      "upload_time_iso_8601": "2022-08-17T18:56:09.009976Z",
      "url": "https://files.pythonhosted.org/packages/bb/5e/9dc49924ef3d0af57759915c0fa12e8a8c2fbeabc154d89e691c2b0b0aa7/rin_jsonutils-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}