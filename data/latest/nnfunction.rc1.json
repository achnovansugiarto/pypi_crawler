{
  "info": {
    "author": "Matthew Knight James",
    "author_email": "mattkjames7@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3"
    ],
    "description": "# NNFunction\nA simple package for modelling multidimensional non-linear functions using artificial neural networks.\n\n## Installation\n\nInstall from `pip3`:\n\n```bash\npip3 install --user NNFunction\n```\n\nOr by cloning this repository:\n\n```bash\n#clone the repo\ngit clone https://github.com/mattkjames7/NNFunction\ncd NNFunction\n\n#Either create a wheel and use pip: (X.X.X should be replaced with the current version)\npython3 setup.py bdist_wheel\npip3 install --user dists/NNFunction-X.X.X-py3-none-any.whl\n\n#Or by using setup.py directly\npython3 setup.py install --user\n```\n\n\n\n## Usage\n\nStart by training training a network:\n\n```python\nimport NNFunction as nnf\n\n#create the network, defining the activation functions and the number of nodes in each layer\nnet = nnf.NNFunction(s,AF='softplus',Output='linear')\n\n#note that s should be a list, where each element denotes the number of nodes in each layer\n\n#input training data\nnet.AddData(X,y)\n#Input matrix X should be of the shape (m,n) - where m is the number of samples and n is the number of input features\n#Output hypothesis matrix y should have the shape (m,k) - where k is the number of output nodes\n\n#optionally add validation and test data\nnet.AddValidationData(Xv,yv)\n#Note that validation data is ignored if kfolds > 1 during training\nnet.AddTestData(Xt,yt)\n\n#Train the network \nnet.Train(nEpoch,kfolds=k)\n#nEpoch is the number of training epochs\n#kfolds is the number of kfolds to do - if kfolds > 1 then the training data are split \n#into kfold sets, each of which has a turn at being the validation set. This results in\n#kfold networks being trained in total (net.model)\n#see docstring net.Train? to see more options\n\n```\n\nAfter training, the cost function may be plotted:\n\n```python\nnet.PlotCost(k=k)\n```\n\nWe can use the network on other data:\n\n```python\n#X in this case is a new matrix\ny = net.Predict(X)\n```\n\nThe networks can be saved and reloaded:\n\n```python\n#save\nnet.Save(fname='networkname.bin')\n\n#reload\nnet = nnf.LoadANN(fname='networkname.bin')\n```\n\nThe animation below demonstrates the training of a neural network used to reproduce four different functions simultaneously. It was produced using `NNFunction.TrainNN4`.\n\n![](nn.gif)\n\n\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mattkjames7/NNFunction",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "NNFunction",
    "package_url": "https://pypi.org/project/NNFunction/",
    "platform": "",
    "project_url": "https://pypi.org/project/NNFunction/",
    "project_urls": {
      "Homepage": "https://github.com/mattkjames7/NNFunction"
    },
    "release_url": "https://pypi.org/project/NNFunction/0.0.2/",
    "requires_dist": [
      "numpy",
      "PyFileIO",
      "matplotlib",
      "tensorflow",
      "scikit-learn"
    ],
    "requires_python": "",
    "summary": "A simple package for modelling multidimensional non-linear functions using artificial neural networks",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10209921,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88611588c7096ce09d6bc1042e65ed43a49217974cd97be39f5c00480b6d9386",
          "md5": "42b3ec6c81e2b1feba74f4ac8b501755",
          "sha256": "7173cacc5a23f5a6065e6e6da5f3db85a585521bd0c3396e0459066877c3d9b9"
        },
        "downloads": -1,
        "filename": "NNFunction-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "42b3ec6c81e2b1feba74f4ac8b501755",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10594,
        "upload_time": "2021-04-29T16:53:13",
        "upload_time_iso_8601": "2021-04-29T16:53:13.904907Z",
        "url": "https://files.pythonhosted.org/packages/88/61/1588c7096ce09d6bc1042e65ed43a49217974cd97be39f5c00480b6d9386/NNFunction-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "88611588c7096ce09d6bc1042e65ed43a49217974cd97be39f5c00480b6d9386",
        "md5": "42b3ec6c81e2b1feba74f4ac8b501755",
        "sha256": "7173cacc5a23f5a6065e6e6da5f3db85a585521bd0c3396e0459066877c3d9b9"
      },
      "downloads": -1,
      "filename": "NNFunction-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "42b3ec6c81e2b1feba74f4ac8b501755",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10594,
      "upload_time": "2021-04-29T16:53:13",
      "upload_time_iso_8601": "2021-04-29T16:53:13.904907Z",
      "url": "https://files.pythonhosted.org/packages/88/61/1588c7096ce09d6bc1042e65ed43a49217974cd97be39f5c00480b6d9386/NNFunction-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}