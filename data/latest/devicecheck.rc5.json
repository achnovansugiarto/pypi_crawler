{
  "info": {
    "author": "Sergey Akentev",
    "author_email": "\"S. Akentev\" <gh+sergey@akentev.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Apple DeviceCheck\n\n<!-- [![codecov](https://codecov.io/gh/Kylmakalle/devicecheck/branch/main/graph/badge.svg?token=2IKMSQUGH3)](https://codecov.io/gh/Kylmakalle/devicecheck) -->\n\n[Accessing and Modifying Per-Device Data](https://developer.apple.com/documentation/devicecheck/accessing_and_modifying_per-device_data)\n\nUse a token from your app to validate requests, query and modify two per-device binary digits stored on Apple servers.\n\n# Features\n\n- Prevent API & Content abuse with validating requests via Apple device token\n- Query and modify two bits of data to achieve up to **four remote states** saved on Apple servers\n- Easy to use configuration\n- [Examples](tests/integration)\n- Integrations with modern web frameworks\n\n# Prepare\n\nVisit https://developer.apple.com/account/resources/authkeys/list and create new **Key** with **DeviceCheck** permission\n\n# Install\n\n```\npip install devicecheck\n```\n\n# Usage (Python)\n\n### Setup\n\n```python\nfrom devicecheck import DeviceCheck\n\ndevice_check = DeviceCheck(\n    team_id=\"XX7AN23E0Z\",  # https://developer.apple.com/account/#/membership/\n    bundle_id=\"com.akentev.app\",\n    key_id=\"JSAD983ENA\",  # Generated at https://developer.apple.com/account/resources/authkeys/list\n    private_key=\"/path/to/AuthKey_JSAD983ENA.p8\",\n    # Generated file at https://developer.apple.com/account/resources/authkeys/list\n    dev_environment=True,  # True if using development Apple environment, False if using in production.\n    # Remember to set dev_environment=False in production!\n)\n```\n\n### Validate device\n\n```python\nresult = device_check.validate_device_token(device_token)\n\nif result.is_ok:\n    print('OK! Device is valid')\nelse:\n    print('Bad news. Unable to validate device')\n```\n\n### Update bits data\n\n```python\n# Can use both integers, strings and booleans. Will be converted with bool(value)\nresult = device_check.update_two_bits(device_token, bit_0=1, bit_1=False)\n\n# Can update bits separately\nresult = device_check.update_two_bits(device_token, bit_0=True)\n\nif result.is_ok:\n    print('Bits updated')\nelse:\n    print(f'Something went wrong. {result}')\n```\n\n### Query bits data\n\n```python\n# Can use both integers, strings and booleans\nresult = device_check.query_two_bits(device_token)\n\nif result.is_ok:\n    print(f'First bit {result.bit_0}')  # True\n    print(f'Second bit {result.bit_1}')  # False\n    print(f'Last update time {result.bits_last_update_time}')  # 2020-04\nelse:\n    print(f'Something went wrong. {result}')\n```\n\n# Web server decorators\n\nYou can easily integrate devicecheck to your webserver using a decorator. Specify a supported framework, or leave `None`\nto try universal parser.\n\n```python\nfrom devicecheck.decorators import validate_device  # for sync code\nfrom devicecheck.decorators import DCSupportedFrameworks\nfrom devicecheck import DeviceCheck\n\ndevice_check = DeviceCheck(...)\n\n# Set response that will be returned on invalid token\nINVALID_TOKEN_RESPONSE = ('Invalid device_token', 403)\n\n\n@app.route('/validate')\n@validate_device(device_check, framework=DCSupportedFrameworks.flask, on_invalid_token=INVALID_TOKEN_RESPONSE)\ndef endpoint():\n    return 'Content'\n```\n\n## Sync code\n\nUse sync decorator\n\n```python\nfrom devicecheck.decorators import validate_device\nfrom devicecheck.decorators import DCSupportedFrameworks\n```\n\n### Flask\n\n```python\nINVALID_TOKEN_RESPONSE = ('Invalid device_token', 403)\nframework = DCSupportedFrameworks.flask\n```\n<!-- \n### Django Rest Framework (DRF)\n\n```python\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\nINVALID_TOKEN_RESPONSE = Response('Invalid device_token', status=status.HTTP_403_FORBIDDEN)\nframework = DCSupportedFrameworks.drf\n```\n\n### Django\n\n```python\nfrom django.http import HttpResponse\n\nINVALID_TOKEN_RESPONSE = HttpResponse('Invalid device_token', status_code=403)\nframework = DCSupportedFrameworks.django\n```\n -->\n\n## Async code\n\nUse Async decorator\n\n```python\nfrom devicecheck.decorators import async_validate_device\nfrom devicecheck.decorators import DCSupportedAsyncFrameworks\n```\n\n### Sanic\n\n```python\nfrom sanic.response import text\n\nINVALID_TOKEN_RESPONSE = text('Invalid device_token', status=403)\nframework = DCSupportedAsyncFrameworks.sanic\n```\n\n### FastAPI\n\n```python\nfrom fastapi.responses import PlainTextResponse\n\nINVALID_TOKEN_RESPONSE = PlainTextResponse('Invalid device_token', status_code=403)\nframework = DCSupportedAsyncFrameworks.fastapi\n```\n\n# Tests & Mock\nWell, it's kinda hard to automate testing, because Devicecheck requires real device (Simulators won't work). In case you\nneed to disable decorators, pass `SKIP_DEVICE_CHECK_DECORATOR=True` environment variable.\n\nYou can also mock validation, pass `MOCK_DEVICE_CHECK_DECORATOR_TOKEN=XXXXXXXXXXXXX`, it will be a hardcoded valid token\nvalue.\n\n```bash\nMOCK_DEVICE_CHECK_DECORATOR_TOKEN=\"device-check-token\" python -m unittest tests/integrational/main.py\n```\n\nFor Debug logs, including requests body, pass a `DEBUG` environment variable.\n\n# Exceptions\n\nLibrary represents an `AppleException` class with attributes `status_code` and `description`\nRequires `raise_on_error=True` parameter for `DeviceCheck` instance.\n\n# Usage (Swift)\n\n### Generate device token\n\n```swift\nimport DeviceCheck\n\npublic func getDeviceToken(completion: @escaping (String?) -> ()) {\n    if #available(iOS 11.0, *) {\n        let currentDevice = DCDevice.current\n        if currentDevice.isSupported\n        {\n            currentDevice.generateToken(completionHandler: { (data, error) in\n                if let tokenData = data {\n                    let tokenString = tokenData.base64EncodedString()\n                    print(\"Received device token\")\n                    completion(tokenString)\n                } else{\n                    print(\"Error generating token: \\(error!.localizedDescription)\")\n                }\n            })\n        } else {\n            print(\"Device is not supported\") // Simulators or etc.\n        }\n    } else {\n        print(\"Device OS is lower than iOS 11\")\n    }\n}\n\n```\n\n### Pass device token in HTTP request\n\nHeader or Body\n\n```swift\ngetDeviceToken { deviceToken in\n    var request = URLRequest(url: \"...\")\n    request.httpMethod = \"POST\"\n    \n    // Header\n    request.setValue(deviceToken, forHTTPHeaderField: \"Device-Token\")\n    \n    // Body\n    request.setValue(\"application/json; charset=utf-8\", forHTTPHeaderField: \"Content-Type\")\n    let json = [\"device_token\": deviceToken] as [String : Any]\n    let jsonData = try! JSONSerialization.data(withJSONObject: json)\n    request.httpBody = jsonData as Data\n    \n    // Send it to server\n    let downloadTask = URLSession.shared.dataTask(with: request, completionHandler: { data, response, error in\n        ...\n    })\n}\n```\n\n# License\n\n[MIT](LICENSE)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kylmakalle/devicecheck",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "devicecheck",
    "package_url": "https://pypi.org/project/devicecheck/",
    "platform": null,
    "project_url": "https://pypi.org/project/devicecheck/",
    "project_urls": {
      "Homepage": "https://github.com/Kylmakalle/devicecheck",
      "Issue Tracker": "https://github.com/Kylmakalle/devicecheck/issues",
      "Repository": "https://github.com/Kylmakalle/devicecheck"
    },
    "release_url": "https://pypi.org/project/devicecheck/1.2.2/",
    "requires_dist": [
      "requests (>=2.20.0)",
      "pyjwt (>=2.0.0)",
      "cryptography (>=3.4.7)"
    ],
    "requires_python": ">=3.6",
    "summary": "Apple DeviceCheck API. Reduce fraudulent use of your services by managing device state and asserting app integrity.",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14126862,
  "releases": {
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "504cb7b28da3fe71154e45e503df15fca3fdb94e2a25f4ac32b9913e4f0b2d21",
          "md5": "e29678e55908f76b5bf015bbc9b66434",
          "sha256": "4f18eec40712e61a3a60e010bc80d51d6ce36548b7b64b7974cf709b349355a9"
        },
        "downloads": -1,
        "filename": "devicecheck-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e29678e55908f76b5bf015bbc9b66434",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9338,
        "upload_time": "2021-04-04T23:19:55",
        "upload_time_iso_8601": "2021-04-04T23:19:55.377576Z",
        "url": "https://files.pythonhosted.org/packages/50/4c/b7b28da3fe71154e45e503df15fca3fdb94e2a25f4ac32b9913e4f0b2d21/devicecheck-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59c81e50a0796408519f68c08e4f9d1ce83a05329c1f5af7bc6e116a71d50281",
          "md5": "d8f18107b432e6e79fc274b776351eca",
          "sha256": "935cb796e15be5751bb62df462d2fea2b289f4e2ccd8af8503aa038c8ad8dfd4"
        },
        "downloads": -1,
        "filename": "devicecheck-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d8f18107b432e6e79fc274b776351eca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7862,
        "upload_time": "2021-04-04T23:19:56",
        "upload_time_iso_8601": "2021-04-04T23:19:56.593139Z",
        "url": "https://files.pythonhosted.org/packages/59/c8/1e50a0796408519f68c08e4f9d1ce83a05329c1f5af7bc6e116a71d50281/devicecheck-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "229eb4099d48aa352a0c0b66b355eea9ab08e9c39cc2b20df7f962a3ca47e312",
          "md5": "5cac9a9be2a1a4ab1ac6cba6365cb4b0",
          "sha256": "6593a438e9378a55f3cfbb6845a147b29b122a850ff74df3b470e34b58ffbb6c"
        },
        "downloads": -1,
        "filename": "devicecheck-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cac9a9be2a1a4ab1ac6cba6365cb4b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9378,
        "upload_time": "2021-04-04T23:34:33",
        "upload_time_iso_8601": "2021-04-04T23:34:33.271904Z",
        "url": "https://files.pythonhosted.org/packages/22/9e/b4099d48aa352a0c0b66b355eea9ab08e9c39cc2b20df7f962a3ca47e312/devicecheck-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "287659ded2cb97970529349d1128a8ab88754e887c197cb660b059598bd8b7f9",
          "md5": "3d641b5c0fdb9cdbc969e9ffaf312c00",
          "sha256": "4969a6a765b03f4e4a704ea973e5c7a189c658841d786e53578e834794575a33"
        },
        "downloads": -1,
        "filename": "devicecheck-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3d641b5c0fdb9cdbc969e9ffaf312c00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7904,
        "upload_time": "2021-04-04T23:34:34",
        "upload_time_iso_8601": "2021-04-04T23:34:34.374735Z",
        "url": "https://files.pythonhosted.org/packages/28/76/59ded2cb97970529349d1128a8ab88754e887c197cb660b059598bd8b7f9/devicecheck-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1961bdcc785458a6e094db54b910636a69ff6dcbb1afdc6fbccd53b4b3ae07f0",
          "md5": "f1ff29b6603b954b75d8aab29f360dd0",
          "sha256": "0f734e554b1cbfb4e194dc891f1fef2a09d714d004ce1cb91b63dcc175739c50"
        },
        "downloads": -1,
        "filename": "devicecheck-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1ff29b6603b954b75d8aab29f360dd0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10969,
        "upload_time": "2021-04-05T22:44:24",
        "upload_time_iso_8601": "2021-04-05T22:44:24.124858Z",
        "url": "https://files.pythonhosted.org/packages/19/61/bdcc785458a6e094db54b910636a69ff6dcbb1afdc6fbccd53b4b3ae07f0/devicecheck-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed1826e9183e0e7c81f566f4e2273f0949316edaced242fa4cb0154517956b58",
          "md5": "bf10e1155e89af00dd36ec199b7287cd",
          "sha256": "03c6f94e65f31427b5c577b0ef2bdfe41af1c6daa277ddec209312b466f52154"
        },
        "downloads": -1,
        "filename": "devicecheck-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bf10e1155e89af00dd36ec199b7287cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9480,
        "upload_time": "2021-04-05T22:44:25",
        "upload_time_iso_8601": "2021-04-05T22:44:25.092829Z",
        "url": "https://files.pythonhosted.org/packages/ed/18/26e9183e0e7c81f566f4e2273f0949316edaced242fa4cb0154517956b58/devicecheck-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c0b85069cd9ee133918f2b79401aff958d362191bd1a9e85092b1fc4dd74aa0",
          "md5": "0355ba3d0a287d2c24ab95328450ab4a",
          "sha256": "0b6ec83efec3a199966480155988fac171bd1b1dc58471af982c4cc31bb7963e"
        },
        "downloads": -1,
        "filename": "devicecheck-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0355ba3d0a287d2c24ab95328450ab4a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10838,
        "upload_time": "2022-03-31T12:02:14",
        "upload_time_iso_8601": "2022-03-31T12:02:14.094574Z",
        "url": "https://files.pythonhosted.org/packages/7c/0b/85069cd9ee133918f2b79401aff958d362191bd1a9e85092b1fc4dd74aa0/devicecheck-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0dd939591e75036e70ebf70693bf68ce844f9b64eea1d2aac47d9fb52c1483e7",
          "md5": "e16e24e43e5f4d88be7fb2a6bdf8f880",
          "sha256": "a399d1d759a0c0be78c032c1195441fee8291b42adc755834ea662a5cd61f32d"
        },
        "downloads": -1,
        "filename": "devicecheck-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e16e24e43e5f4d88be7fb2a6bdf8f880",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12046,
        "upload_time": "2022-03-31T12:02:15",
        "upload_time_iso_8601": "2022-03-31T12:02:15.112094Z",
        "url": "https://files.pythonhosted.org/packages/0d/d9/39591e75036e70ebf70693bf68ce844f9b64eea1d2aac47d9fb52c1483e7/devicecheck-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe96f9c1446f818cc6eaa23c736c51fe793cdf4777ee99e2f9ee1f5a9001f588",
          "md5": "718662b2b0fedf3b3ce7bd739705a824",
          "sha256": "3c19515f88500fd245ba7b4059e77ac2d14a63a4c8b3ab38d131e381838bfebd"
        },
        "downloads": -1,
        "filename": "devicecheck-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "718662b2b0fedf3b3ce7bd739705a824",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10839,
        "upload_time": "2022-06-14T12:08:17",
        "upload_time_iso_8601": "2022-06-14T12:08:17.867155Z",
        "url": "https://files.pythonhosted.org/packages/fe/96/f9c1446f818cc6eaa23c736c51fe793cdf4777ee99e2f9ee1f5a9001f588/devicecheck-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "336334e183fe879268f9396c55ac17a25e2422533bab102520bc6e34250c986c",
          "md5": "3328a137968240c3fd3fd2e583435715",
          "sha256": "846f5185af940a414889641b4a6a23507d1433b040fd9f4f7a5801129056db48"
        },
        "downloads": -1,
        "filename": "devicecheck-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3328a137968240c3fd3fd2e583435715",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9828,
        "upload_time": "2022-06-14T12:08:19",
        "upload_time_iso_8601": "2022-06-14T12:08:19.270443Z",
        "url": "https://files.pythonhosted.org/packages/33/63/34e183fe879268f9396c55ac17a25e2422533bab102520bc6e34250c986c/devicecheck-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fe96f9c1446f818cc6eaa23c736c51fe793cdf4777ee99e2f9ee1f5a9001f588",
        "md5": "718662b2b0fedf3b3ce7bd739705a824",
        "sha256": "3c19515f88500fd245ba7b4059e77ac2d14a63a4c8b3ab38d131e381838bfebd"
      },
      "downloads": -1,
      "filename": "devicecheck-1.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "718662b2b0fedf3b3ce7bd739705a824",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10839,
      "upload_time": "2022-06-14T12:08:17",
      "upload_time_iso_8601": "2022-06-14T12:08:17.867155Z",
      "url": "https://files.pythonhosted.org/packages/fe/96/f9c1446f818cc6eaa23c736c51fe793cdf4777ee99e2f9ee1f5a9001f588/devicecheck-1.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "336334e183fe879268f9396c55ac17a25e2422533bab102520bc6e34250c986c",
        "md5": "3328a137968240c3fd3fd2e583435715",
        "sha256": "846f5185af940a414889641b4a6a23507d1433b040fd9f4f7a5801129056db48"
      },
      "downloads": -1,
      "filename": "devicecheck-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3328a137968240c3fd3fd2e583435715",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9828,
      "upload_time": "2022-06-14T12:08:19",
      "upload_time_iso_8601": "2022-06-14T12:08:19.270443Z",
      "url": "https://files.pythonhosted.org/packages/33/63/34e183fe879268f9396c55ac17a25e2422533bab102520bc6e34250c986c/devicecheck-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}