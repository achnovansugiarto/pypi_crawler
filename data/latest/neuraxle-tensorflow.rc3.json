{
  "info": {
    "author": "Neuraxio Inc.",
    "author_email": "guillaume.chevalier@neuraxio.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Healthcare Industry",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Manufacturing",
      "Intended Audience :: Science/Research",
      "Intended Audience :: System Administrators",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Adaptive Technologies",
      "Topic :: Office/Business",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Artificial Life",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Image Recognition",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Scientific/Engineering :: Medical Science Apps.",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Assemblers",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Pre-processors",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing",
      "Topic :: System",
      "Topic :: Text Processing",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: Linguistic",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# Neuraxle-TensorFlow\n\nTensorFlow steps, savers, and utilities for [Neuraxle](https://github.com/Neuraxio/Neuraxle).\n\nNeuraxle is a Machine Learning (ML) library for building neat pipelines, providing the right abstractions to both ease research, development, and deployment of your ML applications.\n\n## Usage example\n\n[See also a complete example](https://github.com/guillaume-chevalier/seq2seq-signal-prediction)\n\n### Tensorflow 1\n\nCreate a tensorflow 1 model step by giving it a graph, an optimizer, and a loss function. \n\n```python\ndef create_graph(step: TensorflowV1ModelStep, context: ExecutionContext):\n    tf.placeholder('float', name='data_inputs')\n    tf.placeholder('float', name='expected_outputs')\n\n    tf.Variable(np.random.rand(), name='weight')\n    tf.Variable(np.random.rand(), name='bias')\n    \n    return tf.add(tf.multiply(step['data_inputs'], step['weight']), step['bias'])\n    \n\"\"\"\n# Note: you can also return a tuple containing two elements : tensor for training (fit), tensor for inference (transform)\ndef create_graph(step: TensorflowV1ModelStep, context: ExecutionContext)\n    # ...\n    decoder_outputs_training = create_training_decoder(step, encoder_state, decoder_cell)\n    decoder_outputs_inference = create_inference_decoder(step, encoder_state, decoder_cell)\n\n    return decoder_outputs_training, decoder_outputs_inference\n\"\"\"\n\n\ndef create_loss(step: TensorflowV1ModelStep, context: ExecutionContext):\n    return tf.reduce_sum(tf.pow(step['output'] - step['expected_outputs'], 2)) / (2 * N_SAMPLES)\n\ndef create_optimizer(step: TensorflowV1ModelStep, context: ExecutionContext):\n    return tf.train.GradientDescentOptimizer(step.hyperparams['learning_rate'])\n\nmodel_step = TensorflowV1ModelStep(\n    create_grah=create_graph,\n    create_loss=create_loss,\n    create_optimizer=create_optimizer,\n    has_expected_outputs=True\n).set_hyperparams(HyperparameterSamples({\n    'learning_rate': 0.01\n})).set_hyperparams_space(HyperparameterSpace({\n    'learning_rate': LogUniform(0.0001, 0.01)\n}))\n```\n\n### Tensorflow 2\n\nCreate a tensorflow 2 model step by giving it a model, an optimizer, and a loss function. \n\n```python\ndef create_model(step: Tensorflow2ModelStep, context: ExecutionContext):\n    return LinearModel()\n\ndef create_optimizer(step: Tensorflow2ModelStep, context: ExecutionContext):\n    return tf.keras.optimizers.Adam(0.1)\n\ndef create_loss(step: Tensorflow2ModelStep, expected_outputs, predicted_outputs):\n    return tf.reduce_mean(tf.abs(predicted_outputs - expected_outputs))\n\nmodel_step = Tensorflow2ModelStep(\n    create_model=create_model,\n    create_optimizer=create_optimizer,\n    create_loss=create_loss,\n    tf_model_checkpoint_folder=os.path.join(tmpdir, 'tf_checkpoints')\n)\n```\n\n### Deep Learning Pipeline\n\n```python\nbatch_size = 100\nepochs = 3\nvalidation_size = 0.15\nmax_plotted_validation_predictions = 10\n\nseq2seq_pipeline_hyperparams = HyperparameterSamples({\n    'hidden_dim': 100,\n    'layers_stacked_count': 2,\n    'lambda_loss_amount': 0.0003,\n    'learning_rate': 0.006,\n    'window_size_future': sequence_length,\n    'output_dim': output_dim,\n    'input_dim': input_dim\n})\nfeature_0_metric = metric_3d_to_2d_wrapper(mean_squared_error)\nmetrics = {'mse': feature_0_metric}\n\nsignal_prediction_pipeline = Pipeline([\n    TrainOnly(DataShuffler()),\n    WindowTimeSeries(),\n    MeanStdNormalizer(),\n    MiniBatchSequentialPipeline([\n        Tensorflow2ModelStep(\n            create_model=create_model,\n            create_loss=create_loss,\n            create_optimizer=create_optimizer,\n            print_loss=True\n        ).set_hyperparams(seq2seq_pipeline_hyperparams)\n    ])\n])\n\npipeline, outputs = pipeline.fit_transform(data_inputs, expected_outputs)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Neuraxio/Neuraxle-Tensorflow/tarball/0.1.2",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Neuraxio/Neuraxle-Tensorflow",
    "keywords": "pipeline pipelines data science machine learning deep learning",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "neuraxle-tensorflow",
    "package_url": "https://pypi.org/project/neuraxle-tensorflow/",
    "platform": "",
    "project_url": "https://pypi.org/project/neuraxle-tensorflow/",
    "project_urls": {
      "Download": "https://github.com/Neuraxio/Neuraxle-Tensorflow/tarball/0.1.2",
      "Homepage": "https://github.com/Neuraxio/Neuraxle-Tensorflow"
    },
    "release_url": "https://pypi.org/project/neuraxle-tensorflow/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "TensorFlow steps, savers, and utilities for Neuraxle. Neuraxle is a Machine Learning (ML) library for building neat pipelines, providing the right abstractions to both ease research, development, and deployment of your ML applications.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10828876,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b285bd2a4f84c17bb4769ea67d7aca9adda25659fe4b98eee37d49ba83987e51",
          "md5": "8fdda04dbbff154ac894b77a2a3edec9",
          "sha256": "e639d75b892e377ebe8e36f747430aab68d86fb830ecc33bd741c020ee1b438e"
        },
        "downloads": -1,
        "filename": "neuraxle_tensorflow-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8fdda04dbbff154ac894b77a2a3edec9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13778,
        "upload_time": "2020-01-16T06:37:59",
        "upload_time_iso_8601": "2020-01-16T06:37:59.399860Z",
        "url": "https://files.pythonhosted.org/packages/b2/85/bd2a4f84c17bb4769ea67d7aca9adda25659fe4b98eee37d49ba83987e51/neuraxle_tensorflow-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea0bd3650c4bbb3f81c25cb4da330b08917bbbf1cb00d572b5e1bed0676a1b63",
          "md5": "753c95c481d8137946e39036b34c8377",
          "sha256": "8a87757481de9a9a5ed2e20dd4a5625119bf2438a882b83b3fea9cd6e6dfe0f3"
        },
        "downloads": -1,
        "filename": "neuraxle_tensorflow-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "753c95c481d8137946e39036b34c8377",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13005,
        "upload_time": "2020-02-17T04:14:06",
        "upload_time_iso_8601": "2020-02-17T04:14:06.020099Z",
        "url": "https://files.pythonhosted.org/packages/ea/0b/d3650c4bbb3f81c25cb4da330b08917bbbf1cb00d572b5e1bed0676a1b63/neuraxle_tensorflow-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41f42df17aadcae90feac23c9ccf278d6a3940d801726c0d2440bbf164efda29",
          "md5": "9334f44bc1320bfac04d322d83d33652",
          "sha256": "7baa55f6baa3af8e73802e8988cfcbc65d0ca62f07e2ac16c73c305323f5cee5"
        },
        "downloads": -1,
        "filename": "neuraxle_tensorflow-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9334f44bc1320bfac04d322d83d33652",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8535,
        "upload_time": "2020-02-17T04:14:07",
        "upload_time_iso_8601": "2020-02-17T04:14:07.525211Z",
        "url": "https://files.pythonhosted.org/packages/41/f4/2df17aadcae90feac23c9ccf278d6a3940d801726c0d2440bbf164efda29/neuraxle_tensorflow-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d947f123f87c57ffc20d1f02ef2733d6e6b0e54fb03c46eedb3839a5a8420e02",
          "md5": "4ecb8809e55b6761185b27fb700585d6",
          "sha256": "6c60a9e6aa4a4b3b5b5639b267d08cfac1f4425ff3998133605f96b2f80299ee"
        },
        "downloads": -1,
        "filename": "neuraxle_tensorflow-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4ecb8809e55b6761185b27fb700585d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8399,
        "upload_time": "2020-09-07T00:45:38",
        "upload_time_iso_8601": "2020-09-07T00:45:38.762373Z",
        "url": "https://files.pythonhosted.org/packages/d9/47/f123f87c57ffc20d1f02ef2733d6e6b0e54fb03c46eedb3839a5a8420e02/neuraxle_tensorflow-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d947f123f87c57ffc20d1f02ef2733d6e6b0e54fb03c46eedb3839a5a8420e02",
        "md5": "4ecb8809e55b6761185b27fb700585d6",
        "sha256": "6c60a9e6aa4a4b3b5b5639b267d08cfac1f4425ff3998133605f96b2f80299ee"
      },
      "downloads": -1,
      "filename": "neuraxle_tensorflow-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4ecb8809e55b6761185b27fb700585d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8399,
      "upload_time": "2020-09-07T00:45:38",
      "upload_time_iso_8601": "2020-09-07T00:45:38.762373Z",
      "url": "https://files.pythonhosted.org/packages/d9/47/f123f87c57ffc20d1f02ef2733d6e6b0e54fb03c46eedb3839a5a8420e02/neuraxle_tensorflow-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}