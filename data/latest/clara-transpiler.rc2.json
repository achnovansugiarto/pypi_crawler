{
  "info": {
    "author": "Sergio Branco | The Architech",
    "author_email": "asergio.branco@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Embedded Systems"
    ],
    "description": "# Clara\n\nCLARA is a tool designed to help Machine Learning developers to build their models using High-Level languages (Python), but easily implement them in C. The goal is not to convert the code, but to convert the trained model itself (the object). Therefore, this is not a code converter, but a **code transpiler**.\n\nThe following algorithms are available\n\n+ __Classification__\n  - MLP\n  - Decision Tree\n  - Support-Vector Machines (SVC & Nu)\n  - LinearSVM\n  - Gaussian Naive Bayes\n  - Complement Naive Bayes\n  - Multinomial Naive Bayes\n  - Categorical Naive Bayes\n  - Bernoulli Naive Bayes\n+ __Regression__\n  - MLP\n  - Support-Vector Machines\n+ __Decomposition__\n  - PCA\n+ __Preprocessing__\n  - StandardScaler\n  - KernelCenterer\n  - MaxAbsScaler\n  - MinMaxScaler\n  - RobustScaler\n\n\n## Transpiling Tools\n\n| Python Class | Clara Class |\n|:------------:|:-----------------:|\n| *Decomposition* |\n| [sklearn.decomposition.PCA](https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html) | clara.transpiler.pca.PCATranspiler |\n| *Neural Networks* ||\n| [sklearn.neural_network.MLPClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPClassifier.html) | clara.transpiler.mlp.MLPCTranspiler|\n| [sklearn.neural_network.MLPRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.neural_network.MLPRegressor.html) | clara.transpiler.mlp.MLPRTranspiler|\n| *Decision Tree* ||\n| [sklearn.tree.DecisionTreeClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html) | clara.transpiler.tree.DecisionTreeClassifierTranspiler|\n| *Support-Vector Machines* ||\n| [sklearn.svm.SVC](https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html) | clara.transpiler.svm.SVCTranspiler|\n| [sklearn.svm.NuSVC](https://scikit-learn.org/stable/modules/generated/sklearn.svm.NuSVC.html) | clara.transpiler.svm.SVCTranspiler|\n| [sklearn.svm.LinearSVM](https://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVM.html) | clara.transpiler.svm.LinearSVMTranspiler |\n| [sklearn.svm.SVR](https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html) | clara.transpiler.svm.SVRTranspiler |\n| *Naive Bayes* ||\n| [sklearn.naive_bayes.GaussianNB ](https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html) | clara.transpiler.naive_bayes.GaussianNBTranspiler |\n| [sklearn.naive_bayes.ComplementNB ](https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.ComplementNB.html) | clara.transpiler.naive_bayes.ComplementNBTranspiler |\n| [sklearn.naive_bayes.MultinomialNB](https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.MultinomialNB.html) | clara.transpiler.naive_bayes.MultinomialNBTranspiler |\n| [sklearn.naive_bayes.CategoricalNB](https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.CategoricalNB.html) | clara.transpiler.naive_bayes.CategoricalNBTranspiler |\n| [sklearn.naive_bayes.BernoulliNB](https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.BernoulliNB.html) | clara.transpiler.naive_bayes.BernoulliNBTranspiler |\n| *Preprocessing* |\n| [sklearn.preprocessing.StandardScaler](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html) | clara.transpiler.preprocessing.StandardScalerTranspiler |\n\n\n## Syntax\n\nBesides the multiple available algorithms, the syntax to use in any of them is the same and shown in the snippet bellow.\n\n\n```python\n\n#The ML Algorithm you want to use\nmodel = ScikitLearnClass()\n\n# TRAIN YOUR MODEL FIRST!!!\nmodel.fit()\n\n# The correspondent CLARA TRanspiler Class\ntranspiler = ClaraClassTranspiler(model) #The correspondent Clara Class\n\n\n# The C code to be exported to a .c file and compiled\n# The code is of the model trained, therefore no retraining is needed.\nc_code = transpiler.generate_code()\n\n\n```\n\n# PCA Transpiler\n\n### Python Exporting\n\n```python\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.datasets import load_wine\n\ndata = load_wine()\ndataset = np.column_stack((data.data, data.target))\nscale = StandardScaler()\n\npca = PCA(n_components=0.8)\n\nX = scale.fit_transform(dataset[::,:-1])\npca.fit(X)\n\nfrom clara.transpiler.pca import PCATranspiler\n\ntranspiler = PCATranspiler(pca)\n\ncode = transpiler.generate_code()\n\nwith open(\"pca.c\", \"w+\") as fp:\n  fp.write(code)\n\n```\n\n# Test code in C\n\nThe results may vary, but if they should be the same!!\n\n```c\nint main(int argc, const char * argv[]) {\n    // insert code here...\n    double sample[N_FEATURES] = { 1.51861254, -0.5622498 ,  0.23205254, -1.16959318,  1.91390522,\n        0.80899739,  1.03481896, -0.65956311,  1.22488398,  0.25171685,\n                                  0.36217728,  1.84791957,  1.01300893};\n    double scores[N_COMPONENTS] = {0};\n\n    double inverse_sample[N_FEATURES] = {0};\n\n    calculate_scores(sample, scores);\n\n    printf(\"\\nScores\\n\");\n\n\n    for(int i = 0; i < N_COMPONENTS; i++){\n        printf(\"%f\\t\", scores[i]);\n    }\n\n    printf(\"\\n\\nInverse Transform\\n\");\n\n    inverse(scores, inverse_sample);\n\n    for(int i = 0; i < N_FEATURES; i++){\n        printf(\"%f\\t\", inverse_sample[i]);\n    }\n\n    printf(\"\\n\\n\");\n\n    pca_dimensions_t val;\n\n    val = calculate_dimensions(sample);\n\n    printf(\"T2 = %f, Q-Residuals: %f\\n\\n\", val.hoteling2, val.q_residuals);\n\n\n\n}\n```\n\n# MLP Transpiler\n\nMulti-Layer Perceptron are the basis of Neural Networks and Deep Learning. Our tools provides a way to transpile MLPs for regression and classification problems.\n* **Note:** At the current time, binary classifications are not working... Sorry*\n\n## MLPClassifier\n\n```python\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.datasets import load_wine\nimport numpy as np\n\nfrom clara.transpiler.mlp import MLPCTranspiler\n\ndata = load_wine()\ndataset = np.column_stack((data.data, data.target))\n\nmlp = MLPClassifier(hidden_layer_sizes=(30, 10))\n\nmlp.fit(ddataset.data, dataset.target)\n\n\ntranspiler = MLPCTranspiler(mlp)\n\ncode = transpiler.generate_code()\n\nwith open(\"mlp.c\", \"w+\") as fp:\n  fp.write(code)\n\n```\n\n## MLPRegressor\n\n```python\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.datasets import load_boston\nimport numpy as np\n\nfrom clara.transpiler.mlp import MLPRTranspiler\n\ndata = load_boston()\ndataset = np.column_stack((data.data, data.target))\n\nmlp = MLPClassifier(hidden_layer_sizes=(30, 10))\n\nmlp.fit(dataset.data, dataset.target)\n\n\n\ntranspiler = MLPRTranspiler(mlp)\n\ncode = transpiler.generate_code()\n\nwith open(\"mlp.c\", \"w+\") as fp:\n  fp.write(code)\n\n```\n\n# Test code in C\n\n\n```c\nint main(){\n    double s[N_FEATURES] = {14.23, 1.71, 2.43, 15.6, 127.0, 2.8, 3.06, 0.28, 2.29, 5.64, 1.04, 3.92, 1065.0};\n    int class;\n    for(int i = 0; i<N_FEATURES; i++){\n      sample[i] = s[i];\n    }\n    class = predict(sample);\n    return 0;\n}\n\n```\n\n# Cite Us\n\nPlease, if you use our tool in any of your projects, cite us. This will help us improve and look at what people may need! Thanks!\n\nDOI: [10.5281/zenodo.3930335](https://doi.org/10.5281/zenodo.3930335)\n\n`Sérgio Branco. (2020, July 4). CLARA - Embedded ML Tools (Version v0.0.1). Zenodo. http://doi.org/10.5281/zenodo.3930336`\n\n```\n@software{sergio_branco_2020_3930336,\n  author       = {Sérgio Branco},\n  title        = {CLARA - Embedded ML Tools},\n  month        = jul,\n  year         = 2020,\n  publisher    = {Zenodo},\n  version      = {v0.0.1},\n  doi          = {10.5281/zenodo.3930336},\n  url          = {https://doi.org/10.5281/zenodo.3930336}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/asergiobranco/clara",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "clara-transpiler",
    "package_url": "https://pypi.org/project/clara-transpiler/",
    "platform": "",
    "project_url": "https://pypi.org/project/clara-transpiler/",
    "project_urls": {
      "Homepage": "https://github.com/asergiobranco/clara"
    },
    "release_url": "https://pypi.org/project/clara-transpiler/0.17.5/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "",
    "version": "0.17.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8218002,
  "releases": {
    "0.17.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da17da18d602bc9f85c46cbce6b248a33b17fbdc01c63ed52c2f0e8c775ab425",
          "md5": "d869b8f1f667105c20a662947edeb104",
          "sha256": "b82aeee57b41b396365f318df11c3f38edfbdabfd6e74af1c662603ed0f1029a"
        },
        "downloads": -1,
        "filename": "clara_transpiler-0.17.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d869b8f1f667105c20a662947edeb104",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 26138,
        "upload_time": "2020-09-09T21:28:25",
        "upload_time_iso_8601": "2020-09-09T21:28:25.624379Z",
        "url": "https://files.pythonhosted.org/packages/da/17/da18d602bc9f85c46cbce6b248a33b17fbdc01c63ed52c2f0e8c775ab425/clara_transpiler-0.17.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04c8814c2081bccc02caae9f3da635a3e256187d8b5bd6c97bb448e3bf6570fc",
          "md5": "bd74e9cee255c21439e104bca598fe0c",
          "sha256": "d5b89e37be9a423b98287465e9f719a0c4e20792fc85f9ff4442f1f167b7c172"
        },
        "downloads": -1,
        "filename": "clara_transpiler-0.17.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bd74e9cee255c21439e104bca598fe0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 13326,
        "upload_time": "2020-09-09T21:28:27",
        "upload_time_iso_8601": "2020-09-09T21:28:27.956407Z",
        "url": "https://files.pythonhosted.org/packages/04/c8/814c2081bccc02caae9f3da635a3e256187d8b5bd6c97bb448e3bf6570fc/clara_transpiler-0.17.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.17.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a83413b4dbf7e978e05e54ec70c079fbf8a5d152386798befbf19dcab998b68",
          "md5": "92c48a3213b0878abbed4dca653efc2e",
          "sha256": "c9a41c0dca9cd37dfd421b8dcaaeb41125355c2f359dea7fc3d8aa50dd1855aa"
        },
        "downloads": -1,
        "filename": "clara_transpiler-0.17.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "92c48a3213b0878abbed4dca653efc2e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 26393,
        "upload_time": "2020-09-18T15:16:09",
        "upload_time_iso_8601": "2020-09-18T15:16:09.782891Z",
        "url": "https://files.pythonhosted.org/packages/6a/83/413b4dbf7e978e05e54ec70c079fbf8a5d152386798befbf19dcab998b68/clara_transpiler-0.17.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3137ff8350fef798206d21bc6a5f327256769d9cbb755785b82502e0c48e6c79",
          "md5": "38a393ed4db2ab29c011417c0b3f737f",
          "sha256": "b1453d35b7ae5bc6c7e21b2dd8b3148bd6989945a54a8ad17c9421bbd9b89abd"
        },
        "downloads": -1,
        "filename": "clara_transpiler-0.17.5.tar.gz",
        "has_sig": false,
        "md5_digest": "38a393ed4db2ab29c011417c0b3f737f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 13682,
        "upload_time": "2020-09-18T15:16:11",
        "upload_time_iso_8601": "2020-09-18T15:16:11.047016Z",
        "url": "https://files.pythonhosted.org/packages/31/37/ff8350fef798206d21bc6a5f327256769d9cbb755785b82502e0c48e6c79/clara_transpiler-0.17.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a83413b4dbf7e978e05e54ec70c079fbf8a5d152386798befbf19dcab998b68",
        "md5": "92c48a3213b0878abbed4dca653efc2e",
        "sha256": "c9a41c0dca9cd37dfd421b8dcaaeb41125355c2f359dea7fc3d8aa50dd1855aa"
      },
      "downloads": -1,
      "filename": "clara_transpiler-0.17.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "92c48a3213b0878abbed4dca653efc2e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 26393,
      "upload_time": "2020-09-18T15:16:09",
      "upload_time_iso_8601": "2020-09-18T15:16:09.782891Z",
      "url": "https://files.pythonhosted.org/packages/6a/83/413b4dbf7e978e05e54ec70c079fbf8a5d152386798befbf19dcab998b68/clara_transpiler-0.17.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3137ff8350fef798206d21bc6a5f327256769d9cbb755785b82502e0c48e6c79",
        "md5": "38a393ed4db2ab29c011417c0b3f737f",
        "sha256": "b1453d35b7ae5bc6c7e21b2dd8b3148bd6989945a54a8ad17c9421bbd9b89abd"
      },
      "downloads": -1,
      "filename": "clara_transpiler-0.17.5.tar.gz",
      "has_sig": false,
      "md5_digest": "38a393ed4db2ab29c011417c0b3f737f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 13682,
      "upload_time": "2020-09-18T15:16:11",
      "upload_time_iso_8601": "2020-09-18T15:16:11.047016Z",
      "url": "https://files.pythonhosted.org/packages/31/37/ff8350fef798206d21bc6a5f327256769d9cbb755785b82502e0c48e6c79/clara_transpiler-0.17.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}