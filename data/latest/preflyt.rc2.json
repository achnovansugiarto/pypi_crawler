{
  "info": {
    "author": "Aru Sahni",
    "author_email": "aru@thehumangeo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Plugins",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Testing",
      "Topic :: System :: Monitoring"
    ],
    "description": ".. image:: ./res/logo.png\n\n*A lightweight application environment checker.*\n\n*Python 3 only. The future is now.*\n\n.. image:: https://travis-ci.org/humangeo/preflyt.svg\n   :target: https://travis-ci.org/humangeo/preflyt\n\n.. image:: https://coveralls.io/repos/github/humangeo/preflyt/badge.svg?branch=master\n   :target: https://coveralls.io/github/humangeo/preflyt?branch=master\n\nGetting started\n--------------------\n\nTo use Preflyt, install it :code:`pip install preflyt`, and then invoke it:\n\n.. code-block:: python\n\n    import preflyt\n\n    ok, results = preflyt.check([\n        # Assert the presence and value of the $APP_ENV environment variable\n        {\"checker\": \"env\", \"name\": \"APP_ENV\", \"value\": \"production\"},\n\n        # Assert that a file at the given path exists\n        {\"checker\": \"file\", \"path\": DATA_FILE},\n    ])\n\n    if ok:\n        print(\"Preflyt checks passed.\")\n        run()\n    else:\n        print(\"Preflyt checks failed!\")\n        for result in results:\n            if not result[\"success\"]:\n                print(\"{checker[checker]}: {message}\".format(**result))\n\n\nCheckers\n---------\n\nOut of the box, the following checkers are available.\n\n+--------+---------------------------+----------------------------------------------------------------------------------------------------+\n| Name   | Description               | Args                                                                                               |\n+========+===========================+====================================================================================================+\n| env    | Check environment state   | - **name**: Variable name.                                                                         |\n|        |                           | - **value**: (optional) Variable value.                                                            |\n+--------+---------------------------+----------------------------------------------------------------------------------------------------+\n| es     | Check Elasticsearch state | - **url**: The Elasticsearch endpoint URL.                                                         |\n|        |                           | - **colors**: (optional) A collection of acceptable cluster colors (aside from 'green').           |\n+--------+---------------------------+----------------------------------------------------------------------------------------------------+\n| dir    | Check directory state     | - **path**: Directory path.                                                                        |\n|        |                           | - **present**: (optional, default=True) False if the directory should be absent.                   |\n+--------+---------------------------+----------------------------------------------------------------------------------------------------+\n| file   | Check file state          | - **path**: File path.                                                                             |\n|        |                           | - **present**: (optional, default=True) False if the file should be absent.                        |\n+--------+---------------------------+----------------------------------------------------------------------------------------------------+\n| psql   | Check PostgreSQL state    | - **host**: (optional, default=localhost) Postgres hostname.                                       |\n|        |                           | - **port**: (optional, default=5432) Postgres server port.                                         |\n|        |                           | - **dbname**: (optional, default=None) The database name for which to test.                        |\n+--------+---------------------------+----------------------------------------------------------------------------------------------------+\n| sqlite | Check SQLite3 state       | - **path**: (optional, default=db.sqlite3) The path to the SQLite database.                        |\n+--------+---------------------------+----------------------------------------------------------------------------------------------------+\n| web    | Check web service state   | - **url**: The webservice URL                                                                      |\n|        |                           | - **statuses**: (optional, default=None) A collection of acceptable status codes (aside from 200). |\n+--------+---------------------------+----------------------------------------------------------------------------------------------------+\n\nFuture versions of Preflyt will add additional default checkers while allowing third parties to ship their own.\n\nPhilosophy\n-------------------------\n\nYou know what sucks? Kicking off a long running data ingestion/processing task only to discover, near the end, that an external dependency (e.g. webservice, binary) is missing or otherwise inaccessible. \"I know what I'll do!\" you, the frustrated programmer, exclaims. Choose your own adventure:\n\n* **\"I'm going to manually verify things are as they should be before I kick off the task.\"**\n\n  Congratulations, you just played yourself. Not only do you run the risk of forgetting a checklist item, but now you have to enforce this practice within your team.\n\n* **\"I'm going to programatically check things on script start.\"**\n\n  Getting warm! Hopefully your solution is configuration driven. Even then, what are the odds you wind up with this boilerplate across your scripts?\n\n  .. code-block:: python\n\n      # settings.py\n      if env_name == \"production\":\n          ES_HOST = \"http://example.com\"\n          POSTGRES_HOST = \"10.0.1.120\"\n          ENABLE_DATA_DIR_CHECK = True\n      else:\n          ES_HOST = \"localhost:9200\"\n          POSTGRES_HOST = \"localhost\"\n          ENABLE_DATA_DIR_CHECK = False\n      DATA_DIR = \"/mnt/data/dir\"\n      DATA_FILE = \"/mnt/data/dir/metadata.json\"\n      POSTGRES_PORT = 5432\n\n      # run.py\n      if not requests.get(settings.ES_HOST).status_ok: #Now you've got a requests dependency\n          print(\"Elasticsearch is unreachable.\")\n          sys.exit(1)\n      if settings.ENABLE_DATA_DIR_CHECK and not os.path.exists(settings.DATA_DIR): # Whoops, should have used `isdir`\n          print(\"Can't access: \", settings.DATA_DIR)\n          sys.exit(1)\n      if not os.path.exists(settings.DATA_FILE): # Whoops, should have used `isfile`\n          print(\"Can't access: \", settings.DATA_FILE)\n          sys.exit(1)\n      try:\n          postgres.connect(settings.POSTGRES_HOST, settings.POSTGRES_PORT)\n      except Exception as exe:\n          print(exe)\n          sys.exit(1)\n\n  And so forth. You've now got a crazy-long series of if statements in your code, and changing the checks is a code change, not a configuration change. Also, you've generated boilerplate that should be abstracted and reused.\n\n* **\"I'm going to programatically check things on script start... with Preflyt!\"**\n\n  Bingo. That ugly series of code above?\n\n  .. code-block:: python\n\n    # settings.py\n    CHECKS = [\n        {\"checker\": \"web\", \"url\": ES_HOST},\n        {\"checker\": \"psql\", \"host\": POSTGRES_HOST, \"port\": POSTGRES_PORT},\n        {\"checker\": \"file\", \"path\": DATA_FILE},\n    ]\n    if ENVNAME == \"production\":\n        CHECKS.append({\"checker\": \"dir\", \"path\": DATA_DIR})\n\n    # run.py\n    import preflyt\n    ok, results = preflyt.check(settings.CHECKS)\n    if not ok:\n        print([result in results if not result[\"success\"]])\n        sys.exit(1)\n\n  Now all the checks you're performing are defined in configuration, and no boilerplate!\n\nContributing\n--------------\n\nAdditional checkers are more than welcome! The goal is to keep this package free of dependencies, so cleverness is appreciated :-)\n\nPlease write tests for whatever checkers you wish to submit. Preflyt uses nose. Development packages can be installed via :code:`pip install -e .[test]`, and tests can be run via :code:`nosetests .`.\n\nLicense\n--------\n\nMIT, Copyright (c) 2016 The HumanGeo Group, LLC. See the LICENSE file for more information.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/humangeo/preflyt",
    "keywords": "runtime test test system environment check checker",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "preflyt",
    "package_url": "https://pypi.org/project/preflyt/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/preflyt/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/humangeo/preflyt"
    },
    "release_url": "https://pypi.org/project/preflyt/0.4.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A simple system state test utility",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2309880,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37be97b669297fb7ef8dca0753ba026f0f9f62773a0438d88704899443c7d359",
          "md5": "4b057f067fb5e115afe4b2073af753b1",
          "sha256": "bd6ccd039edbf3b764491de10f5cd6f3e94e3fa7cb95ddfb4507d6bb55b2a92d"
        },
        "downloads": -1,
        "filename": "preflyt-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b057f067fb5e115afe4b2073af753b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6208,
        "upload_time": "2016-06-14T18:41:04",
        "upload_time_iso_8601": "2016-06-14T18:41:04.171072Z",
        "url": "https://files.pythonhosted.org/packages/37/be/97b669297fb7ef8dca0753ba026f0f9f62773a0438d88704899443c7d359/preflyt-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28b510a2d6fc3a16f58ab6af43e95109e4f281055a0af60fb16a7bf08c8e75f6",
          "md5": "9e3ecafde33adb3c22de12c2069ed937",
          "sha256": "a41a035611e2bd18e9453fc6a4ce1efd76ad22396ede7c961ae6f90e29f0ad91"
        },
        "downloads": -1,
        "filename": "preflyt-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9e3ecafde33adb3c22de12c2069ed937",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7605,
        "upload_time": "2016-08-28T20:43:51",
        "upload_time_iso_8601": "2016-08-28T20:43:51.137901Z",
        "url": "https://files.pythonhosted.org/packages/28/b5/10a2d6fc3a16f58ab6af43e95109e4f281055a0af60fb16a7bf08c8e75f6/preflyt-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "28b510a2d6fc3a16f58ab6af43e95109e4f281055a0af60fb16a7bf08c8e75f6",
        "md5": "9e3ecafde33adb3c22de12c2069ed937",
        "sha256": "a41a035611e2bd18e9453fc6a4ce1efd76ad22396ede7c961ae6f90e29f0ad91"
      },
      "downloads": -1,
      "filename": "preflyt-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9e3ecafde33adb3c22de12c2069ed937",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7605,
      "upload_time": "2016-08-28T20:43:51",
      "upload_time_iso_8601": "2016-08-28T20:43:51.137901Z",
      "url": "https://files.pythonhosted.org/packages/28/b5/10a2d6fc3a16f58ab6af43e95109e4f281055a0af60fb16a7bf08c8e75f6/preflyt-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}