{
  "info": {
    "author": "",
    "author_email": "Etka Yapar <etka.yapar@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# bamrefine\n\n[![PyPI version](https://badge.fury.io/py/bamrefine.svg)](https://badge.fury.io/py/bamrefine)\n\nThis is a BAM filtering/masking program that  masks the positions from an\nalignment if that read carries a variant position that could be affected\nby post-mortem damage (PMD). e.g. If a read carries a C/\\* position at its\n5' end or it carries a G/\\* position at its 3' end. The regions treated as 5'\nor 3' \"end\" is not pre-defined and should be provided to the program with its\nargument (see `-l` or `--pmd-length-threshold` parameter)\n\nIt is designed to be an alternative to hard clipping first N bases \nof BAM reads with the suspicion of those regions containing \nnon-authentic (post mortem damage artifact) SNPs, or \nignoring transition SNPs alltogether. Thus, avoiding a substantial amount\nof data loss that is encountered when using mainstream pipelines.\n\nYou can install `bamrefine` from PyPI using `pip`. Upon installation of the package,\nthe command `bamrefine` should be available to you.\n\n## Masking strategy\n\nConsider the following example.\n\n![](https://github.com/etkayapar/bamRefine/blob/master/figs/healthyAlignment_scaled.jpg?raw=true)\n\nabove, in the left, you see the table of \na theoretical SNP catalog with the \nvariant positions and minor and major alleles\nobserved in a population. In the right,you see a theoretical alignment \nof three paired end reads to the reference (orange) region covering all\nthe variants listed on the left. Some reads match the reference, others\ncarry variants (green).\n\nBelow, a more realistic example for ancient DNA reads, in\naddition to the expected biological variation among the aligned\nreads, there is also unexpedted variants resulting from DNA damage\nat the ends of fragmented ancient DNA. \n\n![](https://github.com/etkayapar/bamRefine/blob/master/figs/damagedAlignment_scaled.jpg?raw=true)\n\nAt the 5' ends, these damages will occur as C-\\>T changes, and at the \n3' ends they will appear as G-\\>A changes. \n\n![](https://github.com/etkayapar/bamRefine/blob/master/figs/PMD_smiley.jpg?raw=true)\n\n\nTherefore, a C/\\* variant in the table becomes a possible PMD source\nif the read overlaps with it at the reads 5' end, and this is also\nthe case for a G/\\* variant if a read overlaps with it at the 3' end.\n\nBamrefine, first characterizes the input SNP collection into two tables\nas 5' end suspects and 3' end suspects:\n\n![](https://github.com/etkayapar/bamRefine/blob/master/figs/snpTables.jpg?raw=true) \n\nand then iterates over the reads in the BAM file searching for overlaps\nwith the two suspect tables at the appropriate ends of the reads (overlaps\nwith the 5' end of the read and the 5' table variants, 3' end of the reads \nand the 3' table variants). Then if a read carries a suspected/dangerous variant \nat the ends, the program masks those specific position in the read so that\nthey won't interfere with the SNP calling for the downstream steps:\n\n![](https://github.com/etkayapar/bamRefine/blob/master/figs/maskingExample.jpg?raw=true)\n\n\nAs you can see at the right hand side example of the above picture, \nthere is still one unexpected 'A' (in red), it stayed unmasked even \nthough it is within the 3' end lookup range (indicated with\ndouble-headed arrow). This is because, \n\n- there is no entry in the\n  SNP collection at that position of the genome. Meaning, since there\n  won't be any SNP calling concerning that specific locus, there is no\n  need to bother with unexpected variants like this.\n- `bamrefine` does not check the specific allele that a read\n  carries, rather does the masking based on the alignment overlap of the\n  reads ends and the \"dangerous\" positions in the SNP catalog. See the\n  5' end maskings at the  left part of above example: Even though the read\n  carries 'C' bases (not different from the reference), those 'C's are\n  still masked.\n\nThis therefore means:\n\n- reads that do not overlap with the problematic variant \n  positions at their ends will still provide information \n  regarding the allele pool\n- you disregard unreliable information from\n  the alignments while preserving anything\n  else. i.e. If there is more than one variant spanning\n  a single read and one is a possible PMD source, by \n  selectively masking the problematic position, you still\n  have the reliable information coming from the other \n  position.\n\n## Usage\n\n```bamrefine [parameters] [flags] <in.bam> <out.bam>```\n\n### Parameters:\n\n  * `-s, --snps`: SNP collection file. This can be either 4/5 column BED \n  (genomic position [with or without the `start` position column] + \n  Minor and Major allele) or SNP (that is used by EIGENSTRAT) formatted files. \n  Format distinction is done by checking the file extension so it is important \n  that the input file follows the format of the extension it has. See the \n  `sample_data` data directory in the installation path for examples of each of \n  the three supported file types. You can find the installation directory by running\n  `pip3 show bamrefine` or `pip show bamrefine`.\n  * `-p, --threads`: Threads to run the program in parallel.\n  * `-l, --pmd-length-threshold`: Either a single integer (e.g `-l 10`) or two integers \n  separated by a comma (e.g `-l 2,0`) representing different length values corresponding\n  5' and 3' ends , respectively. Positions that are up to and including this far in any read will \n  be evaluated and masked.\n  Also, it is recommended that you have PMD related statistics (e.g. up to which position there is a high \n  risk of seeing a PMD artifact) regarding your libraries before you run this program on the BAM files \n  because the `--pmd-length-threshold` parameter requires an user specified value for the program to run, \n  there is no default value. This can be achieved by using [PMDtools](https://github.com/pontussk/PMDtools)\n\n\n### Flags:\n\n  * `-v, --verbose`: verbose output of progress.\n  * `-t, --add-tags`: Add tags to reads in output BAM file related to masking statistics \n    using optional SAM fields in alignment records. e.g. `ZC:Z:2,1`  and `ZP:Z:0,5;-3` \n    would mean that the program masked n=2 5' and n=1 3' positions and they were at index \n    0,5 and -3 in the read sequence. 3' masking positions are represented with negative \n\tindices that start counting from the 3' end of the read and is compatible with python \n\tlist indices.\n  * `-k, --keep-tmp`: Don't remove the temprorary run directory. It will include \n    intermediate BAM files, cached SNPs, etc. this directory is under the same\n    directory with specified ouptut BAM, named as `.YYYY-MM-DD_HH-MM-SS_<out.bam>_tmp_bamrefine`\n\n  \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bamrefine",
    "package_url": "https://pypi.org/project/bamrefine/",
    "platform": null,
    "project_url": "https://pypi.org/project/bamrefine/",
    "project_urls": {
      "Bug Tracker": "https://github.com/etkayapar/bamRefine/issues",
      "Homepage": "https://github.com/etkayapar/bamRefine"
    },
    "release_url": "https://pypi.org/project/bamrefine/0.1.0/",
    "requires_dist": [
      "pysam (~=0.20.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "A small program to mask positions that could result in a PMD artifact from a BAM file using a predefined SNP catalog",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16358500,
  "releases": {
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ab568fcea2b27fde2285f0e8be82ce415f23a42cb8e0e4aae6556f0e5523c77",
          "md5": "7865cb05cb8e78ccc78c4b7a66b5107e",
          "sha256": "23a3a1593c2d8274670f4f52587e8648e29040c66049a984356d153df9e43275"
        },
        "downloads": -1,
        "filename": "bamrefine-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7865cb05cb8e78ccc78c4b7a66b5107e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14827,
        "upload_time": "2023-01-07T23:43:34",
        "upload_time_iso_8601": "2023-01-07T23:43:34.924499Z",
        "url": "https://files.pythonhosted.org/packages/0a/b5/68fcea2b27fde2285f0e8be82ce415f23a42cb8e0e4aae6556f0e5523c77/bamrefine-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0edad1e78b037f307630562ece41bcd398cf3008e921855cfee57690987629b4",
          "md5": "a3eeae8cd3d910bc7c5c10222f656079",
          "sha256": "8e8320d3f46847b63ee8bdef75b606ee5211b35b5b0ca1f522a88106678c571c"
        },
        "downloads": -1,
        "filename": "bamrefine-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "a3eeae8cd3d910bc7c5c10222f656079",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 889594,
        "upload_time": "2023-01-07T23:43:37",
        "upload_time_iso_8601": "2023-01-07T23:43:37.543464Z",
        "url": "https://files.pythonhosted.org/packages/0e/da/d1e78b037f307630562ece41bcd398cf3008e921855cfee57690987629b4/bamrefine-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4c63057bed8a0221955bdb8fcc919b7df8f4b4fb61baf6935e9ef5bbe91893d",
          "md5": "0930e31ed511bc643c3990a423e71fef",
          "sha256": "05afc4606c6e7bed65c3491fc2fa6dc4497c8c4b16407f7318d196852c203616"
        },
        "downloads": -1,
        "filename": "bamrefine-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0930e31ed511bc643c3990a423e71fef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14882,
        "upload_time": "2023-01-09T10:55:28",
        "upload_time_iso_8601": "2023-01-09T10:55:28.453294Z",
        "url": "https://files.pythonhosted.org/packages/b4/c6/3057bed8a0221955bdb8fcc919b7df8f4b4fb61baf6935e9ef5bbe91893d/bamrefine-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fefc03e0aade7d6ae24c28dcc3eeaea0e2a928bdc08004aabfa0aad8ebf053d6",
          "md5": "77394da1e3366bec5af8d4d87e43accd",
          "sha256": "850b1b3ff7656d5462723cc6be9ec86657bd39e363b6f25b01632b35a9a7c6a5"
        },
        "downloads": -1,
        "filename": "bamrefine-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "77394da1e3366bec5af8d4d87e43accd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 889636,
        "upload_time": "2023-01-09T10:55:30",
        "upload_time_iso_8601": "2023-01-09T10:55:30.559490Z",
        "url": "https://files.pythonhosted.org/packages/fe/fc/03e0aade7d6ae24c28dcc3eeaea0e2a928bdc08004aabfa0aad8ebf053d6/bamrefine-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4c63057bed8a0221955bdb8fcc919b7df8f4b4fb61baf6935e9ef5bbe91893d",
        "md5": "0930e31ed511bc643c3990a423e71fef",
        "sha256": "05afc4606c6e7bed65c3491fc2fa6dc4497c8c4b16407f7318d196852c203616"
      },
      "downloads": -1,
      "filename": "bamrefine-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0930e31ed511bc643c3990a423e71fef",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14882,
      "upload_time": "2023-01-09T10:55:28",
      "upload_time_iso_8601": "2023-01-09T10:55:28.453294Z",
      "url": "https://files.pythonhosted.org/packages/b4/c6/3057bed8a0221955bdb8fcc919b7df8f4b4fb61baf6935e9ef5bbe91893d/bamrefine-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fefc03e0aade7d6ae24c28dcc3eeaea0e2a928bdc08004aabfa0aad8ebf053d6",
        "md5": "77394da1e3366bec5af8d4d87e43accd",
        "sha256": "850b1b3ff7656d5462723cc6be9ec86657bd39e363b6f25b01632b35a9a7c6a5"
      },
      "downloads": -1,
      "filename": "bamrefine-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "77394da1e3366bec5af8d4d87e43accd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 889636,
      "upload_time": "2023-01-09T10:55:30",
      "upload_time_iso_8601": "2023-01-09T10:55:30.559490Z",
      "url": "https://files.pythonhosted.org/packages/fe/fc/03e0aade7d6ae24c28dcc3eeaea0e2a928bdc08004aabfa0aad8ebf053d6/bamrefine-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}