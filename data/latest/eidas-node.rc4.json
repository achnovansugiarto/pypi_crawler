{
  "info": {
    "author": "Jiří Janoušek",
    "author_email": "jiri.janousek@nic.cz",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)"
    ],
    "description": "eIDAS Specific Node\n===================\n\nDjango implementation of member specific **Connector** and **Proxy Service** for [CEF eIDAS Node](https://ec.europa.eu/cefdigital/wiki/display/CEFDIGITAL/eIDAS-Node+Integration+Package) version 2.4 and later.\n\nRequirements\n------------\n\n- [Django](https://docs.djangoproject.com) 2.2.x\n- [Django AppSettings](https://pypi.org/project/django-app-settings/) >= 0.5\n- [lxml](https://pypi.org/project/lxml/)\n- [xmlsec](https://pypi.org/project/xmlsec/)\n- [Apache Ignite Python client](https://pypi.org/project/pyignite/) (optional)\n\nChanges\n-------\n\nSee [CHANGELOG.md](./CHANGELOG.md) for changes.\n\nSpecific Proxy Service\n----------------------\n\nSample settings are provided in [`samples/proxy_service_settings.py`](samples/proxy_service_settings.py).\n\n### Usage\n\nTo use eIDAS Proxy Service, adjust Django settings:\n\n* Set up  Django template engine and static files.\n* Add `'eidas_node.proxy_service.apps.ProxyServiceConfig'` to `INSTALLED_APPS`.\n* Set `ROOT_URLCONF` to `'eidas_node.proxy_service.urls'` or include it in your URL configuration.\n* Provide mandatory configuration options `PROXY_SERVICE_REQUEST_TOKEN`, `PROXY_SERVICE_RESPONSE_TOKEN`, `PROXY_SERVICE_LIGHT_STORAGE`, and `PROXY_SERVICE_IDENTITY_PROVIDER` (see below).\n\n### Settings\n\n#### `PROXY_SERVICE_REQUEST_TOKEN`\n\nSettings of **a light token corresponding to an incoming light request**.\nA dictionary with following items:\n\n* `HASH_ALGORITHM` (optional, default `'sha256'`): A hash algorithm used for token digest.\n* `SECRET` (required): A token secret shared with eIDAS node.\n* `ISSUER` (required): An issuer of the light token.\n* `LIFETIME` (optional, default `10`): A lifetime of the light token in minutes until is its considered expired.\n   Set to `0` for unlimited lifetime.\n* `PARAMETER_NAME` (optional, default `'token'`): The name of the HTTP POST parameter to provide encoded light token.\n\n#### `PROXY_SERVICE_RESPONSE_TOKEN`\n\nSettings of **a light token corresponding to an outgoing light response**.\nA dictionary with following items:\n\n* `HASH_ALGORITHM` (optional, default `'sha256'`): A hash algorithm used for token digest.\n* `SECRET` (required): A token secret shared with eIDAS node.\n* `ISSUER` (required): An issuer of the light token.\n* `PARAMETER_NAME` (optional, default `'token'`): The name of the HTTP POST parameter to provide encoded light token.\n\n#### `PROXY_SERVICE_LIGHT_STORAGE`\n\nSettings for **a storage of light requests and responses**.\nA dictionary with following items:\n\n* `BACKEND` (optional, default `'eidas_node.storage.ignite.IgniteStorage'`): The backend class for communication with the light storage.\n* `OPTIONS` (required): A dictionary with configuration of the selected backend.\n  The `IgniteStorage` backend expects following options:\n  - `host`: Apache Ignite service host.\n  - `port`: Apache Ignite service port.\n  - `request_cache_name`: The cache to retrieve light requests (e.g., `nodeSpecificProxyserviceRequestCache`).\n  - `response_cache_name`: The cache to store light responses (e.g., `specificNodeProxyserviceResponseCache`).\n  - `timeout`: A timeout for socket operations.\n\n#### `PROXY_SERVICE_IDENTITY_PROVIDER`\n\nSettings for **the interaction with Identity Provider**.\nA dictionary with following items:\n\n* `ENDPOINT` (required): The URL where the Identity Provider expects authentication requests.\n* `REQUEST_ISSUER` (required): The issuer of the authentication request registered at Identity Provider.\n* `KEY_FILE` (optional, default `None`): The path of a key to decrypt Identity Provider's authentication response.\n* `CERT_FILE` (optional, default `None`): The path of a certificate to verify the signature of Identity Provider's authentication response.\n* `REQUEST_SIGNATURE` (dictionary, required, use `{}` to disable signing):\n  Options for signing SAML requests sent to Service Provider:\n  * `KEY_FILE` (required, string): The path to a signing key.\n  * `CERT_FILE`: (required, string): The path to the corresponding certificate.\n  * `SIGNATURE_METHOD` (optional, string, default `RSA_SHA512`): XML signature method.\n  * `DIGEST_METHOD` (optional, string, default `SHA512`): XML digest method.\n\n#### `PROXY_SERVICE_EIDAS_NODE`\n\nSettings for **the interaction with eIDAS Node**.\nA dictionary with following items:\n\n* `PROXY_SERVICE_RESPONSE_URL` (required): The URL where eIDAS Node expects authentication responses (e.g.,\n  `https://test.example.net/EidasNode/SpecificProxyServiceResponse`).\n* `RESPONSE_ISSUER` (required): The issuer for light responses specified in eIDAS Node configuration.\n\n#### `PROXY_SERVICE_TRANSIENT_NAME_ID_FALLBACK`\n\nOptional boolean, disabled by default.\nIf enabled, `PROXY_SERVICE_AUXILIARY_STORAGE` must be set too.\nIf *the transient name ID format* is requested in the request but a different format is provided in the response, a new random transient ID is generated instead of the provided ID.\n\n#### `PROXY_SERVICE_TRACK_COUNTRY_CODE`\n\nOptional boolean, disabled by default.\nIf enabled, `PROXY_SERVICE_AUXILIARY_STORAGE` must be set too.\nOnce enabled, the country code of the request is logged along with the status of the corresponding request.\n\n#### `PROXY_SERVICE_AUXILIARY_STORAGE`\n\nAn auxiliary storage to hold some response metadata needed during request processing.\nIt is required if `PROXY_SERVICE_TRACK_COUNTRY_CODE` or `PROXY_SERVICE_TRANSIENT_NAME_ID_FALLBACK` is enabled.\n\nA dictionary with following items:\n\n* `BACKEND` (optional, default `'eidas_node.storage.ignite.AuxiliaryIgniteStorage'`):\n  The backend class for communication with the light storage.\n* `OPTIONS` (required): A dictionary with configuration of the selected backend.\n  The `AuxiliaryIgniteStorage` backend expects following options:\n  - `host`: Apache Ignite service host.\n  - `port`: Apache Ignite service port.\n  - `cache_name`: The cache to store the data.\n  - `prefix`: The prefix for cache keys (optional).\n  - `timeout`: A timeout for socket operations.\n\n#### `PROXY_SERVICE_LEVELS_OF_ASSURANCE`\n\nAn optional mapping of *Authentication Context Classes* (`str`) to *Levels of Assurance* (`eidas_node.constants.LevelOfAssurance`).\nThe default mapping is empty so other classes than Levels of Assurance are unrecognized and propagated as an error. Example:\n\n```py\nfrom eidas_node.constants import LevelOfAssurance\nPROXY_SERVICE_LEVELS_OF_ASSURANCE = {\n    'urn:oasis:names:tc:SAML:2.0:ac:classes:Password': LevelOfAssurance.LOW,\n}\n```\n\n### Customization\n\nYou can customize the authorization flow by subclassing view classes in [`eidas_node.proxy_service.views`](eidas_node/proxy_service/views.py), overriding necessary methods and adjusting URL configuration.\n\n### CZ NIA\n\n[`eidas_node.proxy_service.cznia`](eidas_node/proxy_service/cznia) (`ROOT_URLCONF =\n'eidas_node.proxy_service.cznia.urls'`) contains modifications required for CZ NIA (the official identity provider of the Czech Republic) with following settings:\n\n* `PROXY_SERVICE_STRIP_PREFIX` (boolean, optional, default `False`): If the *Subject ID* starts with a `'CZ/CZ/'` prefix, it is stripped.\n\nSpecific Connector\n------------------\n\nSample settings are provided in [`samples/connector_settings.py`](samples/connector_settings.py).\n\n### Usage\n\nTo use eIDAS Connector, adjust Django settings:\n\n* Set up  Django template engine and static files.\n* Add `'eidas_node.connector.apps.ConnectorConfig'` to `INSTALLED_APPS`.\n* Set `ROOT_URLCONF` to `'eidas_node.connector.urls'` or include it in your URL configuration.\n* Provide mandatory configuration options `CONNECTOR_REQUEST_TOKEN`, `CONNECTOR_RESPONSE_TOKEN`, `CONNECTOR_LIGHT_STORAGE`, and `CONNECTOR_SERVICE_PROVIDER` (see below).\n\n### Views\n\nSetting `ROOT_URLCONF` to `eidas_node.connector.urls` will provide you with three main views:\n\n* `/CountrySelector`:\n  Accepts a *SAML Request* and *Relay State* from Service Provider and lets user select his/her *country* unless it has already been provided.\n  The SAML Request is then forwarded to `/ServiceProviderRequest` endpoint.\n  - Method: HTTP POST.\n  - POST Parameters:\n    - `SAMLRequest` (required): A SAML request to forward to eIDAS Network.\n    - `RelayState` (required): A relay state.\n    - `country` or the value set in `CONNECTOR_SERVICE_PROVIDER['COUNTRY_PARAMETER']` (optional): Citizen country code.\n\n* `/ServiceProviderRequest`:\n  Accepts a *SAML Request*, *Relay State* and *citizen country code* from Service Provider and forwards the request to eIDAS Network.\n  - Method: HTTP POST.\n  - POST Parameters:\n    - `SAMLRequest` (required): A SAML request to forward to eIDAS Network.\n    - `RelayState` (required): A relay state.\n    - `country` or the value set in `CONNECTOR_SERVICE_PROVIDER['COUNTRY_PARAMETER']` (required): Citizen country code.\n\n* `/ConnectorResponse`:\n  Accepts a light token from eIDAS Network and forwards corresponding light response to Service Provider.\n  - Method: HTTP POST.\n  - POST Parameters:\n    - `token` or the value set in `CONNECTOR_RESPONSE_TOKEN['PARAMETER_NAME']`(required): A light token corresponding to a light response.\n\nSetting `ROOT_URLCONF` to `eidas_node.connector.demo.urls` will provide you with two additional views:\n\n* `/DemoServiceProviderRequest`:\n  A demo service provider page for sending preset SAML requests to Specific Connector.\n* `/DemoServiceProviderResponse`:\n  A demo service provider page for displaying SAML responses from Specific Connector.\n\n### Settings\n\n#### `CONNECTOR_REQUEST_TOKEN`\n\nSettings of **a light token corresponding to an outgoing light request**.\nA dictionary with following items:\n\n* `HASH_ALGORITHM` (optional, default `'sha256'`): A hash algorithm used for token digest.\n* `SECRET` (required): A token secret shared with eIDAS node.\n* `ISSUER` (required): An issuer of the light token.\n* `PARAMETER_NAME` (optional, default `'token'`): The name of the HTTP POST parameter to provide encoded light token.\n\n#### `CONNECTOR_RESPONSE_TOKEN`\n\nSettings of **a light token corresponding to an incoming light response**.\nA dictionary with following items:\n\n* `HASH_ALGORITHM` (optional, default `'sha256'`): A hash algorithm used for token digest.\n* `SECRET` (required): A token secret shared with eIDAS node.\n* `ISSUER` (required): An issuer of the light token.\n* `PARAMETER_NAME` (optional, default `'token'`): The name of the HTTP POST parameter to provide encoded light token.\n* `LIFETIME` (optional, default `10`): A lifetime of the light token in minutes until is its considered expired.\n   Set to `0` for unlimited lifetime.\n\n#### `CONNECTOR_LIGHT_STORAGE`\n\nSettings for **a storage of light requests and responses**.\nA dictionary with following items:\n\n* `BACKEND` (optional, default `'eidas_node.storage.ignite.IgniteStorage'`): The backend class for communication with the light storage.\n* `OPTIONS` (required): A dictionary with configuration of the selected backend.\n  The `IgniteStorage` backend expects following options:\n  - `host`: Apache Ignite service host.\n  - `port`: Apache Ignite service port.\n  - `request_cache_name`: The cache to retrieve light requests (e.g., `specificNodeConnectorRequestCache`).\n  - `response_cache_name`: The cache to store light responses (e.g., `nodeSpecificConnectorResponseCache`).\n  - `timeout`: A timeout for socket operations in seconds.\n\n#### `CONNECTOR_SERVICE_PROVIDER`\n\nSettings for **the interaction with Service Provider**.\nA dictionary with following items:\n\n* `ENDPOINT` (required): The URL where the Service Provider expects authentication responses.\n* `CERT_FILE` (optional, default `None`): The path of a certificate to verify the signature of Service Provider's authentication requests.\n* `REQUEST_ISSUER` (required): The expected issuer of the Service Provider's authentication request.\n* `RESPONSE_ISSUER` (required): The issuer of the authentication response registered at Service Provider.\n* `COUNTRY_PARAMETER` (optional, default `country`): The name of a POST parameter containing citizen country code for `/CitizenCountrySelector` and `/ServiceProviderRequest` views.\n* `RESPONSE_SIGNATURE` (dictionary, required, use `{}` to disable signing):\n  Options for signing SAML responses returned to Service Provider:\n  * `KEY_FILE` (required, string): The path to a signing key.\n  * `CERT_FILE`: (required, string): The path to the corresponding certificate.\n  * `SIGNATURE_METHOD` (optional, string, default `RSA_SHA512`): XML signature method.\n  * `DIGEST_METHOD` (optional, string, default `SHA512`): XML digest method.\n* `RESPONSE_ENCRYPTION` (dictionary, required, use `{}` to disable encryption):\n  Options for encrypting SAML responses returned to Service Provider:\n  * `CERT_FILE`: (required, string): The path to the certificate to encrypt a generated encryption key.\n  * `ENCRYPTION_METHOD` (optional, string, default `AES256_GCM`):\n    [XML encryption method](https://www.w3.org/TR/xmlenc-core1/#sec-Alg-Block).\n    `AES256_GCM`, `AES192_GCM`, and `AES168_GCM` are available with libxmlsec1 >= 1.2.27.\n    `AES256_CBC`, `AES192_CBC`, `AES168_CBC`, and `TRIPLEDES_CBC` are supported by older libxmlsec1 but should not be used without consideration of possibly severe security risks.\n  * `KEY_TRANSPORT` (optional, string, default `RSA_OAEP_MGF1P`):\n    [XML key transport method](https://www.w3.org/TR/xmlenc-core1/#sec-Alg-KeyTransport).\n    `RSA` (RSA Version 1.5) and `RSA_OAEP_MGF1P` (RSA-OAEP with MGF1-SHA1 as a mask generation function) are supported.\n* `RESPONSE_VALIDITY` (int, optional, default 10): The validity of the SAML response in minutes.\n\n#### `CONNECTOR_EIDAS_NODE`\n\nSettings for **the interaction with eIDAS Node**.\nA dictionary with following items:\n\n* `CONNECTOR_REQUEST_URL` (required): The URL where eIDAS Node expects authentication requests (e.g., `https://test.example.net/EidasNode/SpecificConnectorRequest`).\n* `REQUEST_ISSUER` (required): The issuer for light requests specified in eIDAS Node configuration.\n\n#### `CONNECTOR_ALLOWED_ATTRIBUTES`\n\nA set containing URI names (strings, e.g. `'http://eidas.europa.eu/attributes/naturalperson/PersonIdentifier'`) of attributes that a service provider can request.\nOther attributes are dropped from the authentication request.\nAll eIDAS natural and legal person attributes are enabled by default.\nAn empty set disables the filter.\n\n#### `CONNECTOR_SELECTOR_COUNTRIES`\n\nA list of pairs with country code and name to be displayed in citizen country selector (`/CitizenCountrySelector`).\nDefault is all 28 countries of EU.\n\n#### `CONNECTOR_TRACK_COUNTRY_CODE`\n\nOptional boolean, disabled by default.\nIf enabled, `CONNECTOR_AUXILIARY_STORAGE` must be set too.\nOnce enabled, the country code of the request is logged along with the status of the corresponding request.\n\n#### `CONNECTOR_AUXILIARY_STORAGE`\n\nAn auxiliary storage to hold some response metadata needed during request processing.\nIt is required if `CONNECTOR_TRACK_COUNTRY_CODE` is enabled.\n\nA dictionary with following items:\n\n* `BACKEND` (optional, default `'eidas_node.storage.ignite.AuxiliaryIgniteStorage'`):\n  The backend class for communication with the light storage.\n* `OPTIONS` (required): A dictionary with configuration of the selected backend.\n  The `AuxiliaryIgniteStorage` backend expects following options:\n  - `host`: Apache Ignite service host.\n  - `port`: Apache Ignite service port.\n  - `cache_name`: The cache to store the data.\n  - `prefix`: The prefix for cache keys (optional).\n  - `timeout`: A timeout for socket operations.\n\n### Customization\n\nYou can customize the authorization flow by subclassing view classes in [`eidas_node.connector.views`](eidas_node/connector/views.py), overriding necessary methods and adjusting URL configuration.\n\nCopyright\n---------\n\n* The django-eidas-specific-node project:\n  * Copyright 2019 CZ.NIC, z. s. p. o.\n  * License: [GPL-3+](COPYRIGHT)\n* [Country flags](eidas_node/connector/static/eidas_node/connector/img/flags):\n  * Copyright 2013 Panayiotis Lipiridis\n  * License: [MIT](eidas_node/connector/static/eidas_node/connector/img/flags/LICENSE)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CZ-NIC/django-eidas-specific-node",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eidas-node",
    "package_url": "https://pypi.org/project/eidas-node/",
    "platform": "",
    "project_url": "https://pypi.org/project/eidas-node/",
    "project_urls": {
      "Homepage": "https://github.com/CZ-NIC/django-eidas-specific-node"
    },
    "release_url": "https://pypi.org/project/eidas-node/0.9.0/",
    "requires_dist": null,
    "requires_python": "~=3.5",
    "summary": "An implementation of eIDAS-Node 2.3.x Specific Connector and Proxy Service.",
    "version": "0.9.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12777654,
  "releases": {
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62fe08e4e78d291f12cf3294ecde561e70f4362465ecd9abe5aa5fba42f06465",
          "md5": "af62406f01d679a94e6d9b5c4a2f711e",
          "sha256": "cad8779b663cdd274477a976daf23133c3424719d0019999111a9f9e431734ce"
        },
        "downloads": -1,
        "filename": "eidas_node-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af62406f01d679a94e6d9b5c4a2f711e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.5",
        "size": 628997,
        "upload_time": "2020-07-08T10:18:08",
        "upload_time_iso_8601": "2020-07-08T10:18:08.573126Z",
        "url": "https://files.pythonhosted.org/packages/62/fe/08e4e78d291f12cf3294ecde561e70f4362465ecd9abe5aa5fba42f06465/eidas_node-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6a4871c7cb20fbefa69d28cfbf06b5a10ee8ec15248b80c7f9015a44fd4a3db",
          "md5": "b594728b1d55a3a073948c970872f7a6",
          "sha256": "988d6fddee326ea74edea3f30dbfa671d77f499c4df942dc00582b338e473da2"
        },
        "downloads": -1,
        "filename": "eidas_node-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b594728b1d55a3a073948c970872f7a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.5",
        "size": 401499,
        "upload_time": "2020-07-08T10:18:22",
        "upload_time_iso_8601": "2020-07-08T10:18:22.206382Z",
        "url": "https://files.pythonhosted.org/packages/c6/a4/871c7cb20fbefa69d28cfbf06b5a10ee8ec15248b80c7f9015a44fd4a3db/eidas_node-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da638b206089dbff3a9dea162215458b5dafcc3e2891772cb836e789f1b8c865",
          "md5": "15ab7f8944fde0fe0aeebb689226a8c7",
          "sha256": "6ee6290974522a7f12518c6c772aaee3eb9d480957c77c7d8d97bd40f50ee6ed"
        },
        "downloads": -1,
        "filename": "eidas_node-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15ab7f8944fde0fe0aeebb689226a8c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.5",
        "size": 270653,
        "upload_time": "2021-02-02T11:53:21",
        "upload_time_iso_8601": "2021-02-02T11:53:21.144534Z",
        "url": "https://files.pythonhosted.org/packages/da/63/8b206089dbff3a9dea162215458b5dafcc3e2891772cb836e789f1b8c865/eidas_node-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e7e87c973e766b9704162246ffb35eb1249986b440c9c2df9d5f4f5da643e12",
          "md5": "33deb2cc5d9d42f2688bf7fddad79f7f",
          "sha256": "84bd19232e4cef017e756f55ac4d1d119be3778a8ccc5ff315e0682d4cf51f5f"
        },
        "downloads": -1,
        "filename": "eidas_node-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "33deb2cc5d9d42f2688bf7fddad79f7f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.5",
        "size": 216505,
        "upload_time": "2021-02-02T11:53:03",
        "upload_time_iso_8601": "2021-02-02T11:53:03.009398Z",
        "url": "https://files.pythonhosted.org/packages/8e/7e/87c973e766b9704162246ffb35eb1249986b440c9c2df9d5f4f5da643e12/eidas_node-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c57ec18b2831a2c451d2351105348d1434643a8de32eb9c48c2b98f110d137f",
          "md5": "7b9271736c5e290ba92aab749ed3e851",
          "sha256": "0c9b4ebb6f8616cf4a52998b493b1fe3c03950eb42ba174dabdb12ec6646cfe1"
        },
        "downloads": -1,
        "filename": "eidas_node-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b9271736c5e290ba92aab749ed3e851",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.5",
        "size": 270767,
        "upload_time": "2021-05-10T09:38:43",
        "upload_time_iso_8601": "2021-05-10T09:38:43.142090Z",
        "url": "https://files.pythonhosted.org/packages/4c/57/ec18b2831a2c451d2351105348d1434643a8de32eb9c48c2b98f110d137f/eidas_node-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66baad688a038a0b6ee0fdd48a25e8daa90613c7b158a31d937b3f8f4cf17167",
          "md5": "87418f5d83a7bf80ec321b4bc6e6566a",
          "sha256": "83f750dc364d2017e9bac309872b5ce13fc85930fa580b18607a397fbd9d77c5"
        },
        "downloads": -1,
        "filename": "eidas_node-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "87418f5d83a7bf80ec321b4bc6e6566a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.5",
        "size": 216748,
        "upload_time": "2021-05-10T09:38:31",
        "upload_time_iso_8601": "2021-05-10T09:38:31.601016Z",
        "url": "https://files.pythonhosted.org/packages/66/ba/ad688a038a0b6ee0fdd48a25e8daa90613c7b158a31d937b3f8f4cf17167/eidas_node-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c282535dd4454031558bc4e3075c0912c97ebd5b6fadd7797e58cff6a320be82",
          "md5": "16069a6c34efd0abaee15c90ccc89e28",
          "sha256": "85ac987bcb5d9a531ffb24101fc3d4e6642004b4166f7acbf8868bd27a95b1cb"
        },
        "downloads": -1,
        "filename": "eidas_node-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16069a6c34efd0abaee15c90ccc89e28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.5",
        "size": 258861,
        "upload_time": "2022-02-03T15:46:03",
        "upload_time_iso_8601": "2022-02-03T15:46:03.775916Z",
        "url": "https://files.pythonhosted.org/packages/c2/82/535dd4454031558bc4e3075c0912c97ebd5b6fadd7797e58cff6a320be82/eidas_node-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c36cf69e9dd9e128e1ee098a7b1e2b0da49d53d9b19b8a5424cbc5bcb4e8859",
          "md5": "b9bcd612a77b9a222c4de168406fe65b",
          "sha256": "9bd6192ba28aa50a81bd7e319c4a8fc7498166613742a61585f525d275e73c2f"
        },
        "downloads": -1,
        "filename": "eidas_node-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b9bcd612a77b9a222c4de168406fe65b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.5",
        "size": 208914,
        "upload_time": "2022-02-03T15:45:50",
        "upload_time_iso_8601": "2022-02-03T15:45:50.370891Z",
        "url": "https://files.pythonhosted.org/packages/3c/36/cf69e9dd9e128e1ee098a7b1e2b0da49d53d9b19b8a5424cbc5bcb4e8859/eidas_node-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c282535dd4454031558bc4e3075c0912c97ebd5b6fadd7797e58cff6a320be82",
        "md5": "16069a6c34efd0abaee15c90ccc89e28",
        "sha256": "85ac987bcb5d9a531ffb24101fc3d4e6642004b4166f7acbf8868bd27a95b1cb"
      },
      "downloads": -1,
      "filename": "eidas_node-0.9.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "16069a6c34efd0abaee15c90ccc89e28",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.5",
      "size": 258861,
      "upload_time": "2022-02-03T15:46:03",
      "upload_time_iso_8601": "2022-02-03T15:46:03.775916Z",
      "url": "https://files.pythonhosted.org/packages/c2/82/535dd4454031558bc4e3075c0912c97ebd5b6fadd7797e58cff6a320be82/eidas_node-0.9.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c36cf69e9dd9e128e1ee098a7b1e2b0da49d53d9b19b8a5424cbc5bcb4e8859",
        "md5": "b9bcd612a77b9a222c4de168406fe65b",
        "sha256": "9bd6192ba28aa50a81bd7e319c4a8fc7498166613742a61585f525d275e73c2f"
      },
      "downloads": -1,
      "filename": "eidas_node-0.9.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b9bcd612a77b9a222c4de168406fe65b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.5",
      "size": 208914,
      "upload_time": "2022-02-03T15:45:50",
      "upload_time_iso_8601": "2022-02-03T15:45:50.370891Z",
      "url": "https://files.pythonhosted.org/packages/3c/36/cf69e9dd9e128e1ee098a7b1e2b0da49d53d9b19b8a5424cbc5bcb4e8859/eidas_node-0.9.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}