{
  "info": {
    "author": "Synapticon GmbH",
    "author_email": "hstroetgen@synapticon.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "SOMANET Test Suite\n==================\n\nAll modules to make successful and complete testing of SOMANET modules possible.\n\nEven though this suite is written for Linux, at least the Elektronik Automation Power Supply Driver also runs under Windows.\n\nInstallation\n------------\n\n1) Install non-python tools (only Linux)\n    ``sudo ./install.sh -a -m <MAC_OF_ETHERCAT_INTERFACE>``\n\n    This will install:\n        - IgH EtherCAT Master\n        - UDEV rules for power supplies\n        - LabJack driver and Kipling\n        - SOEM EtherCAT Master\n\n    If one of these tools are already installed, the script will skip the installation\n    and continue with the next tool.\n    Call \"-h\" to show the help text.\n\n2) Install python script\n    ``python setup.py install``\n\n\nUsage\n-----\n\n1. PSU\n^^^^^^\nImport module\n\"\"\"\"\"\"\"\"\"\"\"\"\"\n    ``import somanet_test_suite as sts``\n\nCreate object\n\"\"\"\"\"\"\"\"\"\"\"\"\"\nTo connect to a specific PSU, you can call\n\nLinux: ``psu = sts.PsuEA(comport='ttyACM0')`` or ``psu = sts.PsuEA(comport='usb-EA_Elektro-Automatik_PS_2042-10B_2815450332-if00')``\n\nWindows: ``psu = sts.PsuEA(comport='COM1')`` or as com port description: ``psu = sts.PsuEA(comport='PS 2000 B')``\n\nIf you added the device rule and you connected only one PSU, there is no need to provide a device name:\n\n    ``psu = sts.PsuEA()``\n\nAlso possible is:\n\n    ``psu = sts.PsuEA(comport='ea-ps-20xx-xx-0')``\n\n| If there is more then one PSU connected to the host, the script will connect to the first device found.\n| It is also possible to take the S/N written on the back of the PSU and call:\n\n    ``psu = sts.PsuEA(sn='0123456789')``\n\nor to use the device designator:\n\n    ``psu = sts.PsuEA(desi='PS 2142-10B')``\n\n\nDis/connect to power supply for controlling\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n    ``psu.remote_on()``\n\n    ``psu.remote_off()``\n\nFor multi output devices most functions provide an additional output argument:\n\n    ``psu.remote_on(output_num=0)``\n\n    ``psu.remote_on(output_num=1)``\n\n| It's only necessary to call ``remote_on()``, when you want to control the PSU.\n| If you just want to read device information, you don't need to.\n\nPower on and off output\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n    ``psu.output_on()``\n\n    ``psu.output_off()``\n\nor\n\n    ``psu.output_on(output_num=1)``\n\n    ``psu.output_off(output_num=1)``\n\nSet parameters\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nArguments can be int or float.\n\n    ``psu.set_voltage(24, output_num=0)``\n\n    ``psu.set_current(0.5, output_num=0)``\n\n    ``psu.set_ovp(30, output_num=0)``\n\n    ``psu.set_ocp(8, output_num=0)``\n\nThe script will always set the maximum possible values in dependency of the nominal power.\n\n| For example:\n| Nominal power = 160 W\n| When you set the voltage to 40 V, it's not possible to set a higher current than 4 A (=160W/40V),\n| regardless of the maximum current output of the device.\n| If you want to set a higher current, you must first reduce the voltage.\n\n| Also this script treats voltage with a higher priority.\n| It will decrease the current, if the maximum power is reached.\n| For example:\n| Nominal power = 160 W, set current = 10 A\n| When you set the voltage to 32 V, it'll results in a maximum current of 5 A.\n\n\nGet parameters\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nReturn argument: float.\n\n    ``psu.get_voltage(output_num: int)``\n\n    ``psu.get_current(output_num: int)``\n\n    ``psu.get_power(output_num: int)``\n\nMaximum sampling rate is ~10 Hz.\n\n\nNominal values:\n\nIf update is true, the value will be pulled directly from the device.\n\n    ``psu.get_nominal_voltage(output_num: int, update: bool)``\n\n    ``psu.get_nominal_current(output_num: int, update: bool)``\n\n    ``psu.get_nominal_power(output_num: int, update: bool)``\n\n\nReset error\n\"\"\"\"\"\"\"\"\"\"\"\"\"\nIf an overcurrent, overvoltage, overpower or overtemperature protection error happens,\nyou can reset the error with:\n\n    ``psu.reset_error(output_num: int)``\n\n\nTracking\n\"\"\"\"\"\"\"\"\"\"\"\"\"\n(Only 3-port devices).\nTracking disables the controlling of output 2. Output 1 controls then also output 2.\n\n    ``psu.tracking_on()``\n\n    ``psu.tracking_off()``\n\n\nGet status\n\"\"\"\"\"\"\"\"\"\"\"\"\"\nReturn argument: dictionary\n\n    ``psu.get_status(update: bool)``\n\nList of dictionary containing the following keys (index is output number):\n\n- 'output' (int)\n- 'remote on' (bool)\n- 'output on' (bool)\n- 'controller state' ('CV', 'CC')\n- 'tracking active' (bool)\n- 'OVP activ' (bool)\n- 'OCP activ' (bool)\n- 'OPP activ' (bool)\n- 'OTP activ' (bool)\n- 'act voltage' (float)\n- 'act current' (float)\n\n\nGet device description\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nReturn argument: tuple (name, SN)\n\n    ``psu.get_device_description(update : bool)``\n\n\nClose connection\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nTo close the connection, call:\n\n    ``psu.close()``\n\nThis will just stop the communication, the PSU outputs will remain in their current states.\n\n\n\n2. SANSSOUCI - So(manet) Se(nsor) Si(mulator)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA framework to simulate different sensors (Hall, QEI, ...).\nCurrently only velocity is supported for Hall and QEI.\n\nPreperation\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nWhat you need:\n - LabJack\n - SN75174 Differential Line Driver (for RS-422 communication and as level shifter 3.3V -> 5V)\n\nConnection\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nSee also: https://doc.synapticon.com/hardware/drive/drive_1000/d3/docs/index.html#encoder-port-1\n\n+--------------+------------------+\n| Pin SN75174  | Encoder/Labjack  |\n+==============+==================+\n| 1            | LJ: FIO0         |\n+--------------+------------------+\n| 2            | A+               |\n+--------------+------------------+\n| 3            | A-               |\n+--------------+------------------+\n| 4            | Connect with     |\n|              | 10kOhm to Vcc    |\n|              | or NC            |\n+--------------+------------------+\n| 5            | B-               |\n+--------------+------------------+\n| 6            | B+               |\n+--------------+------------------+\n| 7            | LJ: FIO01        |\n+--------------+------------------+\n| 8            | GND of LJ and    |\n|              | Encoder          |\n+--------------+------------------+\n| 9            | LJ: FIO2         |\n+--------------+------------------+\n| 10           | I+               |\n+--------------+------------------+\n| 11           | I-               |\n+--------------+------------------+\n| 12           | Connect with     |\n|              | 10kOhm to Vcc    |\n|              | or NC            |\n+--------------+------------------+\n| 13           | N.C.             |\n+--------------+------------------+\n| 14           | N.C.             |\n+--------------+------------------+\n| 15           | N.C.             |\n+--------------+------------------+\n| 16           | Vcc (5V)         |\n+--------------+------------------+\n\nUsage\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n**Hall**\n\n    ``sensor = Sanssouci(printer.write, 'HALL', pole_pairs=7)``\n\n    ``sensor.set_velocity(20)``\n\n**QEI**\n\n    ``sensor = Sanssouci(printer.write, 'QEI', resolution=100)``\n\n    ``sensor.set_velocity(20)``",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "power supply unit,psu,daq,Labjack,Elektronik-Automation,EtherCAT,IgH,Synapticon",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "somanet-test-suite",
    "package_url": "https://pypi.org/project/somanet-test-suite/",
    "platform": "",
    "project_url": "https://pypi.org/project/somanet-test-suite/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/somanet-test-suite/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A collection of different scripts and drivers (PSU, EtherCAT, Labjack,...)",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11961404,
  "releases": {
    "0.6.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b81fba44c980e621c1304ec3dcb81da0dd2b19257ad2ddaea5c956c863044a1",
          "md5": "379e98453262943871a3478d4e878099",
          "sha256": "daa201f9a00041803f4b775313209bd0807e80cc87253a72b66f53cca04ed991"
        },
        "downloads": -1,
        "filename": "somanet_test_suite-0.6.10-6.tar.gz",
        "has_sig": false,
        "md5_digest": "379e98453262943871a3478d4e878099",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32905,
        "upload_time": "2020-12-18T08:01:41",
        "upload_time_iso_8601": "2020-12-18T08:01:41.914800Z",
        "url": "https://files.pythonhosted.org/packages/8b/81/fba44c980e621c1304ec3dcb81da0dd2b19257ad2ddaea5c956c863044a1/somanet_test_suite-0.6.10-6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48cd859349c6fb8d24a6d973202812f25e08bd1e6505e9cd204b897b04ba9aff",
          "md5": "5be0aa3a105ea3fcd695051c7795d18e",
          "sha256": "36240062bd4dcf6c28c572b71642d92ffe95a82a2b0d626e6b0edc91ea3ddeac"
        },
        "downloads": -1,
        "filename": "somanet_test_suite-0.6.11-3.tar.gz",
        "has_sig": false,
        "md5_digest": "5be0aa3a105ea3fcd695051c7795d18e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34608,
        "upload_time": "2021-01-12T08:20:33",
        "upload_time_iso_8601": "2021-01-12T08:20:33.983168Z",
        "url": "https://files.pythonhosted.org/packages/48/cd/859349c6fb8d24a6d973202812f25e08bd1e6505e9cd204b897b04ba9aff/somanet_test_suite-0.6.11-3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.11rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "777c6c582cf4c5497bed28e832fb4884cc5b3eb2d71d69b368dafabe3a65a54a",
          "md5": "895e5776940ebc50fa70581737610d06",
          "sha256": "2b7c5962d88d3fbff50e32ac24b03d3a0beee48d5a34f7920f6435230e9a1932"
        },
        "downloads": -1,
        "filename": "somanet_test_suite-0.6.11rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "895e5776940ebc50fa70581737610d06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32887,
        "upload_time": "2021-01-22T16:53:18",
        "upload_time_iso_8601": "2021-01-22T16:53:18.936291Z",
        "url": "https://files.pythonhosted.org/packages/77/7c/6c582cf4c5497bed28e832fb4884cc5b3eb2d71d69b368dafabe3a65a54a/somanet_test_suite-0.6.11rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15f1228a79f7b58f190926ad295bb0cb4745f764b4c2146e374eddaeb9bdf22f",
          "md5": "525675e5bb6d285ba2abcec8a52911e2",
          "sha256": "001eea73b0741817edbf73a67e638b754fa2471964e37615b73d61e55b4e6ffd"
        },
        "downloads": -1,
        "filename": "somanet_test_suite-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "525675e5bb6d285ba2abcec8a52911e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42542,
        "upload_time": "2021-04-09T11:03:21",
        "upload_time_iso_8601": "2021-04-09T11:03:21.443251Z",
        "url": "https://files.pythonhosted.org/packages/15/f1/228a79f7b58f190926ad295bb0cb4745f764b4c2146e374eddaeb9bdf22f/somanet_test_suite-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd122a5516eceda87c5ab3a589d483c2ba755ce003ded040ba8ef299b5c3c3b3",
          "md5": "f51896cabc07ff4e130cd0d2d63608a8",
          "sha256": "a1830e412bddb62b970ac774b8ffce7c19fe0b0bf272ed9ee96cc0e4bc38250a"
        },
        "downloads": -1,
        "filename": "somanet_test_suite-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f51896cabc07ff4e130cd0d2d63608a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42673,
        "upload_time": "2021-11-08T15:18:16",
        "upload_time_iso_8601": "2021-11-08T15:18:16.746725Z",
        "url": "https://files.pythonhosted.org/packages/fd/12/2a5516eceda87c5ab3a589d483c2ba755ce003ded040ba8ef299b5c3c3b3/somanet_test_suite-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd122a5516eceda87c5ab3a589d483c2ba755ce003ded040ba8ef299b5c3c3b3",
        "md5": "f51896cabc07ff4e130cd0d2d63608a8",
        "sha256": "a1830e412bddb62b970ac774b8ffce7c19fe0b0bf272ed9ee96cc0e4bc38250a"
      },
      "downloads": -1,
      "filename": "somanet_test_suite-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f51896cabc07ff4e130cd0d2d63608a8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 42673,
      "upload_time": "2021-11-08T15:18:16",
      "upload_time_iso_8601": "2021-11-08T15:18:16.746725Z",
      "url": "https://files.pythonhosted.org/packages/fd/12/2a5516eceda87c5ab3a589d483c2ba755ce003ded040ba8ef299b5c3c3b3/somanet_test_suite-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}