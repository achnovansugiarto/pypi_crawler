{
  "info": {
    "author": "Vanessa Sochat",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Plugins",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Testing",
      "Topic :: Text Processing",
      "Topic :: Text Processing :: Markup :: Markdown"
    ],
    "description": "# Pytest GitHub Report\n\nThis is an example of how we can use [GitHub reports]() with [pytest](https://github.com/thombashi/pytest-md-report) to\ngenerate a nice markdown matrix of results. The [tests](tests) here are from the [pytest-md-report](https://github.com/thombashi/pytest-md-report)\nrepository.\n\n## Usage\n\n### Local\n\nFirst, install dependencies:\n\n```bash\n$ pip install -r requirements.txt\n```\n\nAnd then run tests to see the markdown output (that will get piped into GitHub):\n\n```bash\n$ pytest --github-report tests/\n```\n\nThis markdown output is provided via [pytest-md-report](https://github.com/thombashi/pytest-md-report)\nand you can see other ways to customize it there!\n\n### GitHub Actions\n\nTo make this work in GitHub actions, it's actually very simple! You can either\nrun the same command:\n\n```yaml\n  - name: Report via Command Line\n    run: pytest --github-report tests\n```\n\nOr export via the environment (e.g., good if you don't want to change your default\ntesting command but want it to work during GitHub actions).\n\n```yaml\n  - name: Report via Environment\n    env:\n      pytest_github_report: true\n    run: pytest tests\n```\n\n### Configuration\n\nAdvanced configuration can be done via the environment since we are scoping to GitHub\nactions.\n\n#### Enable\n\nIf you want to have the report work from the environment (ideal if you don't want to\nchange the command to run your tests) you can do:\n\n```bash\nexport pytest_github_report=true\n```\n\nIf that value is found with any none Null value (e.g., True or yes) a report\nwill be generated given this module is installed.\n\n#### Title\n\nTo set a particular title for your report:\n\n```yaml\n  - name: Report via Environment\n    env:\n      pytest_github_report: true\n      pytest_report_title: \"Formatting\"\n    run: pytest tests\n```\n\n#### Zeros\n\nBy default, we only show colored emojis to indicate a success or failure.\nTo use a count (value) instead:\n\n\n```yaml\n  - name: Report via Environment\n    env:\n      pytest_github_report: true\n      pytest_use_zeros: true\n    run: pytest tests\n```\n\n#### Blanks\n\nOr a blank value:\n\n```yaml\n  - name: Report via Environment\n    env:\n      pytest_github_report: true\n      pytest_use_blanks: true\n    run: pytest tests\n```\n\n#### Detail\n\nBy default, we output a simplified view, which is `pytest_verbosity: 0`. You actually have two options for verbosity:\nThis first is the default (0), which shows a summary by file:\n\n```yaml\n  - name: Report via Environment\n    env:\n      pytest_verbosity: 0\n    run: pytest --github-report tests\n```\nNotice below that although the table shows summary by file, the output section shows both failures\nwithin the file:\n\n![img/report-simple.png](img/report-simple.png)\n\nThe second shows per test results (adding the function name) and adds more detail to the matrix:\n\n```yaml\n  - name: Report via Environment\n    env:\n      pytest_verbosity: 2\n    run: pytest --github-report tests\n```\n\n![img/report-verbosity.png](img/report-verbosity.png)\n\nIn this case, the detail is on the level of the function.\nBut either way, detail is printed below the matrix, as you can see above!\n\n\n#### Emojis\n\nChoose the emijos (or characters) you want for your tests! A helpful\n[emoji guide is here](https://gist.github.com/rxaviers/7360908).\n\n```yaml\n  - name: Report via Environment\n    env:\n      pytest_github_report: true\n      pytest_report_title: \":unicorn: Report With Custom Emojis :unicorn:\"\n      pytest_passed_emoji: \":green_heart:\"\n      pytest_failed_emoji: \":heart:\"\n      pytest_xpassed_emoji: \":bangbang:\"\n      pytest_xfailed_emoji: \":bangbang:\"\n      pytest_skipped_emoji: \":shipit:\"\n    run: pytest tests\n```\n\nHere is an example with the custom emojis above!\n\n![img/report-custom-emojis.png](img/report-custom-emojis.png)\n\nYou can see the [GitHub workflow](.github/workflows/main.yml)\nfor these examples.\n\n\n## Thanks!\n\nThe markdown functionality here is based off of [thombashi/pytest-md-report](https://github.com/thombashi/pytest-md-report)\nwhich is released under an MIT license that we credit in [.github/LICENSE](.github/LICENSE).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/vsoch/pytest-github-report",
    "keywords": "github,report,markdown,CI",
    "license": "LICENSE",
    "maintainer": "Vanessa Sochat",
    "maintainer_email": "",
    "name": "pytest-github-report",
    "package_url": "https://pypi.org/project/pytest-github-report/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytest-github-report/",
    "project_urls": {
      "Homepage": "https://github.com/vsoch/pytest-github-report"
    },
    "release_url": "https://pypi.org/project/pytest-github-report/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Generate a GitHub report using pytest in GitHub Workflows",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14019047,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fdd48d3f50d024bef43767159bdc4b84fa931b2d42361647306b4596558be01",
          "md5": "b840a347b3cd6a8ec8fac58fdfe0a99c",
          "sha256": "5745c3d2ff4c06ca2ef5f043b9c924497d39dc9749e076aa2b5774afb74d8059"
        },
        "downloads": -1,
        "filename": "pytest-github-report-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b840a347b3cd6a8ec8fac58fdfe0a99c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11526,
        "upload_time": "2022-06-03T02:20:34",
        "upload_time_iso_8601": "2022-06-03T02:20:34.535601Z",
        "url": "https://files.pythonhosted.org/packages/4f/dd/48d3f50d024bef43767159bdc4b84fa931b2d42361647306b4596558be01/pytest-github-report-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4fdd48d3f50d024bef43767159bdc4b84fa931b2d42361647306b4596558be01",
        "md5": "b840a347b3cd6a8ec8fac58fdfe0a99c",
        "sha256": "5745c3d2ff4c06ca2ef5f043b9c924497d39dc9749e076aa2b5774afb74d8059"
      },
      "downloads": -1,
      "filename": "pytest-github-report-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b840a347b3cd6a8ec8fac58fdfe0a99c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11526,
      "upload_time": "2022-06-03T02:20:34",
      "upload_time_iso_8601": "2022-06-03T02:20:34.535601Z",
      "url": "https://files.pythonhosted.org/packages/4f/dd/48d3f50d024bef43767159bdc4b84fa931b2d42361647306b4596558be01/pytest-github-report-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}