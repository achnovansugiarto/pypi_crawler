{
  "info": {
    "author": "patrick oleary",
    "author_email": "techops@preftech.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Flask",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Text Processing"
    ],
    "description": "# Reconciliation \nReconciliation is a python flask framework that works with OpenRefine Reconcile Data capabilities.\nReconcile is the ability to match and enhance data from multiple sources over the web.\n\nThis framework provides the ability to create one of those sources without having to reimplement the underlying protocol.\nReconciliation will provide\n\n* Request parsing\n* Handler for Reconciliation JSON Protocol\n* Function decorators for\n  * Search\n    * Required\n    * Used to map incoming data to an entity id in your data\n  * Search in batch mode\n    * Required\n    * Same as search but used for batches for performance\n  * Extend \n    * Optional - but kind of useless without it\n    * Used to add additional columns / fields to end users data\n  * Preview\n    * Optional - really handy for users\n    * Used as a hover preview method, by creating an iframe in openrefine\n  * View\n    * Optional - really useful\n    * Used to show the entity in a browser\n\n## Why use Open Refines reconciliation\nOpenRefine provides a desktop/browser tool for data management and curation. This tool provides an excel like interface for cleaning, scripting abilities to augment data, enhancing data with the ability to fetch data over the internet and supliment the data you already have.\nDetails on how to use OpenRefine's Reconciliation interface are available https://docs.openrefine.org/manual/reconciling\nA list of known publically available services is available https://reconciliation-api.github.io/testbench/\n\nWith OpenRefine you have an out of the box you have a UI and tool that will allow individuals or teams to work without having to build a tool from scratch. \n![OpenRefine Screen Shot](https://raw.githubusercontent.com/preftech/reconciliation/main/docs/images/refine.png)\n\n\n# Installation\nInstall using pip\n```sh\npip install reconciliation\n```\n\n# Usage\nThis is a flask based app that allows you to control how you route, authenticate, log etc.. A full example exists in the app.py file\n\n```python\nfrom reconcililiation import EntityType, InvalidUsage, Property, ReconcileRequest, ReconcileService\n\n# Create a flask app\napp = Flask(__name__)\n\n# initialize a ReconcileService\nrs = ReconcileService(\"Movie Reconciliation\", \"0.1a\")\n\n# Create an entity you want to serve \net = EntityType(\"Movie\", \"/movie\")\net.properties.append(Property(\"imdb\", \"IMDB URL\"))\net.properties.append(Property(\"poster\", \"Poster URL\"))\n# Add the entity to the service\nrs.add_entity(et)\n\n# Set the entrypoint for your application\n# This lets you control the URLs and if you wish to put a URL key for authentication you can do so here\n@app.route(\"/reconcile/\", methods=['GET', 'POST'])\n@app.route(\"/reconcile/<path:path>\", methods=['GET', 'POST'])\n@app.route(\"/reconcile/<path:path>/<path:id>\", methods=['GET', 'POST'])\ndef handle(path=None, id=None) :\n    return rs.serve(path, id)\n\n```\n\nThe following decorators are used to handle incoming requests\n```python\n\n@rs.search\ndef my_search(reconcile: ReconcileRequest)\n    '''\n    Will be called with a single search query\n    reconcile.query will contain a string for the entity being searched for\n    expects a return of :\n        { \"result\" : [\n                        {\n                        \"id\": <unique id of entity>,\n                        \"name\": <name of entity>, \n                        \"score\": <int of a score>,\n                        \"match\": <True or False>, # Return True for exact match.\n                        \"type\":     [\n                                        { # EntityType, ideally as added to the rs above\n                                            \"id\": et.id,\n                                            \"name\": et.name\n                                        }\n                                    ]\n                        }              \n                    ]\n        }\n    '''\n\n@rs.search_batch\ndef my_search_batch(reconcile: ReconcileRequest):\n    '''\n    By Default OpenRefine will attempt to batch up queries\n    These will be available in reconcile.queries as a dictionary queries key off a query id\n    e.g. \n        {\n            <query_id_1> : {\"query\" : \"text to search for\"} ,\n            <query_id_2> : {\"query\" : \"something else to search for\"}\n            ......\n        }\n\n    The expected return is\n    {\"results\" : {\n                    <query_id_1> : { \"result\" : .... } # same as single search result\n                    <query_id_2> : { \"result\" : .....}\n                    ......\n                }\n    }\n    '''\n\n@rs.extend\n'''\ndef extend(reconcile: ReconcileRequest):\n\nThis is the request that handles performing \"Add column based on reconciled data\"\nA list of properties and a list of entity ids are passed in \nThe entity and the value of the propery are expected as results.\n\nreconcile.extend.ids contains the list of entity ids\nreconcile.extend.properties contains the list of properties expected\n\nReturn expected\n\n{\n    \"rows\" : {\n                <entity_id> : {\n                    \"<property_id>\" : [ { \"<str>\" : \"<property value>\"}],\n                    \"<property_id2>\" : [ { \"<str>\" : \"<property value>\"},{ \"<str>\" : \"<property other value>\"}]\n                    .....\n                    \n\n                },\n                 <entity_id2> : {\n                    \"<property_id>\" : [ { \"<str>\" : \"<property value>\"}],\n                    \"<property_id2>\" : [ { \"<str>\" : \"<property value>\"},{ \"<str>\" : \"<property other value>\"}]\n                    .....\n                    \n\n                },\n                .......\n\n    }\n}\n\n'''\n@rs.preview_wh(width, height) # in pixels\n'''\ndef preview_item(id):\n\nThis funtion is called when a matched results are hovered over in OpenRefine\nOpenrefine creates an iframe of size width x height where you can display summary data for the entity\nArg: \n    id - the entity id\n\nReturn : \n    HTML \n\n'''\n\n\n\n@rs.view\n'''\ndef view_item(id):\n\nThis function is called in openrefine when a user clicks a matched entity \nYou can return html, redirect, a file download, anything that is browser compatible \n\nArg: \n    id = the entity id\n\nReturn: \n    Browser compatible content \n\n'''\n\n```\n# Reconciliation Example\nStart by checking out openrefine at https://openrefine.org/ and downloading the latest version of the OpenRefine software\nThe example provided solves a simple problem, you have a spreadsheet of The Guardian's 2010 Greatest Movies of all time, \nhowever it's mising the movies posters. \nThis sample app will load a spreadsheet call movie_posters.xlsx which contains some of the movie posters.\n\n\nBelow I bring you through the steps of reconciling data in OpenRefine, this is not meant to be a tutorial on OpenRefine, there are way to many capabilities available in it and resources online that cover that. This is a very quick walk though on how to use this example with OpenRefine.\n\nFirst start this app, assume you've cloned the [reconciliation github repo](https://github.com/preftech/reconciliation), setup your [virtualenv](https://sourabhbajaj.com/mac-setup/Python/virtualenv.html) or [conda](https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html) for python\n\n\n### Step 1\n```\npip install -r requirements.txt\npython app.py\n```\nThis should start the reconciliation service at http://127.0.0.1:5000/reconcile/\n\n### Step 2\nNext launch OpenRefine and create a new project with the guardian_2010_greatest_films_of_all_time.csv\n![Create New Project](https://github.com/preftech/reconciliation/blob/main/docs/images/create_new.png?raw=true)\n\nSelect next > Create Project (defaults on this page are fine)\nYou should have a spreadsheet page with the list of movies\n\n### Step 3 Matching\nNext step lets reconcile the movie titles against our reconciliation service.\nClick the dropdown menu next to \"title\" > Reconcile > Start Reconciling\n![Start Reconciling](https://github.com/preftech/reconciliation/blob/main/docs/images/start_reconciling.png?raw=true)\n\nNext Add the reconcilation service, you will see an >Add Standard Service button on the bottom left\nType in http://127.0.0.1:5000/reconcile/ **Ensure you include the trailing slash**\n> Add Service\n\n![Add Service](https://github.com/preftech/reconciliation/blob/main/docs/images/add_service.png?raw=true)\n\nAgain the defaults should be fine here.\nUnder the covers this calls http://127.0.0.1:5000/reconcile/ and receives back a list of services you have enabled\nThis services are linked to the EntityType you added to ReconcileService and @rs.* decorators in your code.\n```\net = EntityType(\"Movie\", \"/movie\")\net.properties.append(Property(\"imdb\", \"IMDB URL\"))\net.properties.append(Property(\"poster\", \"Poster URL\"))\n```\n\n```\n@rs.view\n.....\n````\n\nAt this stage you will see your spreadsheet and a status toast showing you how much matching has occurred. \nOnce Complete you will see a set of Facet / Filters appear on the left handside and some additional data in the title column.\n![Matching Screen](https://github.com/preftech/reconciliation/blob/main/docs/images/matching.png?raw=true)\n\n\nAs you can see from the Facet / Filter we matched 36 movies this is the field \"match\" from our @rs.search/@rs.search_batch method.\nIn this example if we had single result from the data and name matched we declared it a match.\n\nYou can select either matched if you just want to work with fully matched data, or none if you want to work on data that isn't fully matched. \n\nLet's take look at \"Nosferatu\" on row 3\nThere are 2 possible movies in the results the 1922 original or a remake in 1986. Hovering over them calls the @rs.preview method. In out example we return html with the movie poster as an image. \nA reviewer can now select which movie is the correct one, if there are duplicates in the data, then it can be applied to all other cells with the same title.\n\nThe judgement score is a sliding filter based on the field \"score\" from @rs.search / @rs.search_batch\nIn our case we divided 100 / No. Matches so a score of 100 = 1 match, 50 = 2 matches, 3 = 33.3 and so on...\n\nBy default blanks; 0 matches are included, you can uncheck this box to exclude them, and use the slider to work through matching data and prioritizing it.\n\n### Step 4 Extend Data\nAt this stage we have data in OpenRefine reconciled / matched to the data in our service as best as we can, we have had humna judgement clean it up and now we want to add fields to the matched data. \n\nClick the dropdown menu next to title > Edit Column > Add Columns from Reconciled Values\n![Add Columns](https://github.com/preftech/reconciliation/blob/main/docs/images/add_columns.png?raw=true) \n\n\nThe next screen that pops up, will display the available properties that you have configured from the EntityType properties. \nIf haven't filtered the rows from the Facet/Filter panel, you may have 'non-reconciled' rows showing up here. If you don't want that hit escape and in judgement scores simply uncheck the \"blanks\" checkbox, and repeat this step.\n![Add Columns](https://github.com/preftech/reconciliation/blob/main/docs/images/add_columns.png?raw=true)\n\nYou can now select 1 or more properties to add to your data, and click ok.\nThis will now call the @rs.extend method of your code. \nOpenRefine will now fetch the properties you've requested and proceed to add them as columns to the entities that have **been matched**.\n\n\n\n## Attributions\nA thanks has to go out to the following for data used in the example \n* Babu Thomas (@babu-thomas)\n  * MovieLens project\n  * https://github.com/babu-thomas/movielens-posters\n* Owen Temples - https://www.linkedin.com/in/owentemple\n  * Guardian's 2010 Greatest Movies of all Time \n  * https://data.world/owentemple/greatest-films-of-all-time\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/preftech/reconciliation",
    "keywords": "reconcile,reconciliation,openrefine,cocoda",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "reconciliation",
    "package_url": "https://pypi.org/project/reconciliation/",
    "platform": "",
    "project_url": "https://pypi.org/project/reconciliation/",
    "project_urls": {
      "Homepage": "https://github.com/preftech/reconciliation"
    },
    "release_url": "https://pypi.org/project/reconciliation/0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An OpenRefine Reconciliation Framework for Python",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12259151,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e570e7a338317a8bdd8a3f236104440cfe166deacc0123c11165681ac3c1cad8",
          "md5": "bab1c302d50ecc48d0ff8239ff69ccaa",
          "sha256": "664c2b641239c0e3165073e40b43b43de1d790ae534ec32ee6f3ebf2dbe01e2e"
        },
        "downloads": -1,
        "filename": "reconciliation-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bab1c302d50ecc48d0ff8239ff69ccaa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12704,
        "upload_time": "2021-12-09T17:53:25",
        "upload_time_iso_8601": "2021-12-09T17:53:25.228084Z",
        "url": "https://files.pythonhosted.org/packages/e5/70/e7a338317a8bdd8a3f236104440cfe166deacc0123c11165681ac3c1cad8/reconciliation-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ace7a9d2e8204877e5300a4552e148305722ad81210c7c19dd636ac029d448a",
          "md5": "b1cb1fad7d49df8fee3d272c7fc0962d",
          "sha256": "47983665124a9539ccc8e5694e4ba3a633923e8023d8b634ecc2d3d39ef8a777"
        },
        "downloads": -1,
        "filename": "reconciliation-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b1cb1fad7d49df8fee3d272c7fc0962d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12780,
        "upload_time": "2021-12-09T19:12:57",
        "upload_time_iso_8601": "2021-12-09T19:12:57.527645Z",
        "url": "https://files.pythonhosted.org/packages/0a/ce/7a9d2e8204877e5300a4552e148305722ad81210c7c19dd636ac029d448a/reconciliation-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "914dfce25ecef8b1fcab6d13de10a3f5726d80fadb3c0936df6dddf7585e49d3",
          "md5": "bb1f533ce9817fc50dd4210ccf0cded1",
          "sha256": "dff957d969737dec09d025c15d2cbf4f0854cd2863e1736a9fd2919fa501501f"
        },
        "downloads": -1,
        "filename": "reconciliation-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bb1f533ce9817fc50dd4210ccf0cded1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12782,
        "upload_time": "2021-12-09T19:19:02",
        "upload_time_iso_8601": "2021-12-09T19:19:02.138458Z",
        "url": "https://files.pythonhosted.org/packages/91/4d/fce25ecef8b1fcab6d13de10a3f5726d80fadb3c0936df6dddf7585e49d3/reconciliation-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "914dfce25ecef8b1fcab6d13de10a3f5726d80fadb3c0936df6dddf7585e49d3",
        "md5": "bb1f533ce9817fc50dd4210ccf0cded1",
        "sha256": "dff957d969737dec09d025c15d2cbf4f0854cd2863e1736a9fd2919fa501501f"
      },
      "downloads": -1,
      "filename": "reconciliation-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "bb1f533ce9817fc50dd4210ccf0cded1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12782,
      "upload_time": "2021-12-09T19:19:02",
      "upload_time_iso_8601": "2021-12-09T19:19:02.138458Z",
      "url": "https://files.pythonhosted.org/packages/91/4d/fce25ecef8b1fcab6d13de10a3f5726d80fadb3c0936df6dddf7585e49d3/reconciliation-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}