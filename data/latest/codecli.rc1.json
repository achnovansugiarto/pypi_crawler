{
  "info": {
    "author": "Qiangning Hong",
    "author_email": "hongqn@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "===========================\nCommand Line Tools for CODE\n===========================\n\n.. image:: http://code.dapps.douban.com/codecli/raw/master/images/codecli-256.png\n\n这是一个方便使用 `code`_ 进行合作开发的工具。\n\n.. _code: http://code.dapps.douban.com\n\nInstall\n=======\n\n使用 virtualenv::\n\n  $ virtualenv codecli\n  $ codecli/bin/pip install -e git+http://code.dapps.douban.com/codecli.git#egg=codecli\n  $ ln -s `pwd`/codecli/bin/code $HOME/bin/\n  # make sure add $HOME/bin to your $PATH\n\nUsage\n=====\n\n创建本地clone\n~~~~~~~~~~~~~~\n\n如果你要向一个仓库贡献代码，先在 code 上从其 fork 一份（这部分目前只能手工操作\n，等code提供fork api后可自动进行），然后运行\n\n\n::\n\n    $ code fork {repo} {your_fork} {dir}\n    $ cd dir\n\n其中，repo 和 your_fork 只需要填写在 code 上的项目名即可，例如::\n\n    $ code fork codecli hongqn/codecli codecli\n\n``your_fork``和``dir``可以忽略，默认值分别为``{user_name}/{repo}``和``{repo}``，例如::\n\n    $ code fork codecli\n\n就等同于前一个例子(需要确保你在~/.codecli.conf里设置了user.email)\n\n\n如果你只是想管理自己的仓库，而不是向其他人的仓库贡献代码，可以用 ``code\nclone`` 命令::\n\n    $ code clone codecli\n\n\n``code fork`` 和 ``code clone`` 命令都会创建 ``origin`` 和 ``upstream`` 两个\nremote ，在 codecli 的其他命令中，会默认这两个 remote 均存在， ``origin`` 指向\n你自己的fork， ``upstream`` 指向上游仓库（即你希望贡献代码的仓库）。对于使用\n``code clone`` 的仓库而言， ``origin`` 和 ``upstream`` 均指向你自己的仓库。\n\n同时， codecli 还会设置 user.email 和 user.name ，并保存在 ~/.codecli.conf 中\n。之后每次使用 codecli 创建本地仓库时，都会自动从 ~/.codecli.conf 中读取之前保\n存的用户信息。\n\n\n开始一个分支\n~~~~~~~~~~~~\n\n任何时候，你想开发一个新的 feature 、修改一个 bug 、甚至只是修复一个 typo 时，\n都可以使用如下命令::\n\n    code start {branch-name}\n\n会自动从最新的upstream/master创建分支。相当于::\n\n    git fetch upstream\n    git checkout -b {branch} --no-track upstream/master\n\n不用担心创建了太多 branch 发送 pullreq 时选择麻烦， codecli 为你提供了快速提交\npullreq 的方法（见 `提交pull request`_ ）。\n\n与upstream/master同步\n~~~~~~~~~~~~~~~~~~~~~\n\n当你的分支开发了一段时间，希望和上游其他人已经提交的改动合并，以便可以确保你的\n改动在最新代码上也可正常工作时，你需要同步上游代码::\n\n    code sync\n\n相当于::\n\n    git fetch upstream\n    git merge upstream/master\n\n可以用 ``--rebase`` 参数（缩写为 ``-r`` ）指定执行 ``git rebase`` 而非 ``git\nmerge`` 。\n\n如果你的分支是从 ``code hotfix`` （见 `从非master分支进行hotfix`_ ） 创建的，\n不用担心， codecli 会正确处理，不会不小心把 master merge 进来弄得一团糟。\n\n提交pull request\n~~~~~~~~~~~~~~~~\n\n当你的新 feature 或者 bugfix 已经完成，准备提交 pullreq 时（当然建议你先用 ``git\nrebase -i`` 清理一下提交，squash 无意义的 oops 或者 tmpsav 之类的 commits 先）\n，在你的分支下执行如下命令::\n\n    code pr\n\n会自动 merge master ， push 到 origin ，然后打开浏览器直达创建 pull request 页\n面。相当于::\n\n    code sync\n    git push --set-upstream origin {branch}\n    open http://code.dapps.douban.com/{upstream}/newpull/new?head_ref={branch}&base_ref=master\n\n如果是 hotfix 分支， 也会设置正确的目标分支 （比如 ``release`` ）\n\n加 ``-t`` 参数可以给其他人的 fork 提交 pull request，比如::\n\n    code pr -t satoru\n\n此时，也可以用 ``user:branch`` 的形式，指定向其他人的指定 branch 提交 pull\nrequest，比如::\n\n    code pr -t satoru:zsh_completion\n\n\n从非master分支进行hotfix\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n不少对稳定性有要求的项目在线上部署的不是 master 分支，而是其他分支（常见的是\n``release`` 分支）。如果发现一个线上 bug 需要立刻修复，但此时 master 已经有了\n一些新的改动，如果在 master 上修复然后 merge 到 release 上的话，可能解决了此问\n题但又带来了新的问题。所以希望只上线针对紧急bug的改动。\n\n这时你需要 codecli 的 hotfix 功能::\n\n    code hotfix {release-branch-name} {hotfix-name}\n\n其中 {release-branch-name} 为线上 branch 名，例如::\n\n    code hotfix release ahbei-404\n\n会从 upstream/{release-branch-name} 创建分支，起名为hotfix-{release-branch-name}-{hotfix-name} 。相当于::\n\n    git fetch upstream\n    git checkout -b hotfix-release-ahbei-404 --no-track upstream/release\n\n当执行 ``code pr`` 时，会自动将目标分支指向 {release-branch-name} 。\n\n\ncheckout 到某个 pullreq\n~~~~~~~~~~~~~~~~~~~~~~~\n\n在 review 某个 pullreq 时，有时我们希望能够在本地 checkout 改动的代码，以便在\n本地执行单元测试、调试等工作。感谢 code 提供的 `使用refs拉取pr\n<http://code.dapps.douban.com/code/docs/pages/pr-refs-and-grunt.html>`_ 的功能\n，可以用如下命令::\n\n    code pr {pr_id}\n\n抓取指定 pullreq 并自动 checkout 到它的代码。 \n\n用 ``-t`` 参数可以 checkout 到某个用户的 fork 上的 pull request 。\n\n在 checkout 到 pullreq 后，如果此 pullreq 还有后续提交，可以使用::\n\n  code sync\n\n命令进行同步。并且还可以在本地编辑代码，提交。然后使用::\n\n  code pr\n\n命令向此 pullreq 的发起仓库的对应分支发起 pullreq 。当发起人 merge 了你的\npullreq 后，你提交的改动会自动出现在最初的 pullreq 中。\n\n\nfetch 其他人的 fork\n~~~~~~~~~~~~~~~~~~~\n\n当合作开发一个项目时，可能其他人也有对 upstream 项目的 fork，有时你需要\ncheckout 或者 merge 他的代码。手工用长长的 git url 加 remote 然后 fetch ？不用\n那么麻烦，用 ``code fetch`` 轻松搞定::\n\n    code fetch {username}\n\n即可自动创建一个新的 remote ，指向其他人的 fork ，并 fetch 之。相当于::\n\n    git remote add {username} http://code.dapps.douban.com/{username}/{repo}.git\n    git fetch {username}\n\n这要求其他人的 fork 遵循 code 的新的二级目录的结构（即 username/repo）。如果\norigin 也是一个 fork 的话，也需要遵循此结构。\n\nend 分支的开发\n~~~~~~~~~~~~~~~~~~~\n\n当结束一个功能的开发时, 你可以用 ``code end`` 来搞定::\n\n    code sync\n    code end {branchname}\n\n即可自动删除远程和本地的branch, 结束这个功能的开发。相当于::\n\n    git br -d {branchname}\n    git push origin :{branchname}\n\nbranchname 缺省值为当前 branch ，所以用 ``code end`` 会直接删除当前的 branch。\n\n如果需要同时删除多个 branch ，也可以用 ``code end br1 br2 br3`` 这种方式。\n\n\n将 upstream 的一个分支 merge 到另一个分支\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n如果你维护的项目采用如 release 这样的分支标记正式上线版本和开发版本，并且用\n``code hotfix`` 命令来给线上版本做 hotfix ，那么你可能会经常有这样两个需求：\n\n1. 把 master 分支中的 commits 合并到 release 分支，准备上线。\n2. 把做了 hotfix 的 release 分支中的改动合并到 master 分支中。\n\n这时，你可以用 ``code merge`` 命令来简化操作。对第一种情况，执行::\n\n    code merge master release\n\n会发起一个将 upstream 中的 master 分支合并到 release 分支的 pull request。对\n第二种情况，执行::\n\n    code merge release master\n\n则会发起一个从 release 到 master 的 pull request 。\n\n使用 ``--push`` 参数可以在本地创建一个分支执行 merge 操作，然后直接 push 到\nupstream （需要有 upstream 的 push 权限）。如果有冲突，可以在本地修复冲突后，\n重新用 ``--push`` 运行。\n\n\n定制 webbrowser 的行为\n~~~~~~~~~~~~~~~~~~~~~~\n\n在发送 pullreq 时，codecli 会使用默认浏览器打开 code 的提交界面。可以用以下命\n令来定制此行为：\n\n    code config webbrowser.name firefox\n\n指定使用 Firefox 来打开。此处可选择的值为 Python 的 webbrowser_ 模块中注册的名字。\n\n.. _webbrowser: http://docs.python.org/2.7/library/webbrowser.html\n\n    code config webbrowser.name /path/to/executable\n\n使用指定脚本打开，待打开的 URL 会作为参数传递给脚本。\n\n    code config webbrowser.name none\n\n不使用浏览器打开，仅在终端显示URL地址。\n\n    code config webbrowser.name --unset\n\n恢复成使用默认浏览器打开。\n\n\n让code与git命令结合更紧密\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n在使用codecli的时候，经常会出现一会使用code命令一会使用git命令的情况，为了让两个命令结合更紧密，你可以配置一下~/.gitconfig，参考配置如下::\n\n    [alias]\n    start = !code start\n    pr = !code pr\n    sync = !code sync\n    end = !code end\n\nzsh下的code命令补全\n~~~~~~~~~~~~~~~~~~~\n\n将 ``_code`` 复制到 ``$fpath`` 中的某个目录，重启 zsh 就可以。\n\n\nChangeLog\n=========\n\n2013-11-13\n\n* bugfix: 修复当 ``webbrowser.name`` 未设置或者设置为 script 时会抛异常的问题。\n  Thank xupeng!\n\n2013-11-08\n~~~~~~~~~~\n\n* feature: 增加 ``code config`` 命令，可以使用 ``code config webbrowser.name``\n  定制 webbrowser 行为。\n* feature: 允许 ``code clone`` 使用URL作为参数。 Thank satoru!\n* feature: ``code fork`` 时默认使用自己的fork仓库名。 Thank satoru!\n* feature: ``code fork`` 时默认 clone 到仓库同名目录。 Thank satoru!\n* feature: 支持 code ssh url。 Thank chenzheng and yaofeng!\n* feature: 允许 ``code end`` 结束多个 branches。  Thank satoru!\n* bugfix: 修正当仓库名中含有 ``g`` ``i`` ``t`` 字符时会出错的问题。 Thank anrs!\n* bugfix: 修复判断分支是否已经 push 到 remote 的方法，避免误判。  Thank satoru!\n* bugfix: 修复重复开启 pr-on-pr 会出错的问题。  Thank menghan!\n\n2013-07-11\n~~~~~~~~~~\n\n* 在首次发 pullreq 的 branch 上使用 rebase master 代替 merge master，减少无谓\n  的 merge commit\n\n2013-07-11\n~~~~~~~~~~\n\n* docfix: 修正了 ``code fork --help`` 帮助信息中的样例仓库名 (thank satoru)\n\n* bugfix: ``code merge --push`` 没有执行 ``git fetch upstream`` ，导致 merge\n  的数据不是最新的\n\n2013-06-26\n~~~~~~~~~~\n\n* ``code end`` 命令增加 ``-f`` 参数，可删除未 push 的分支 (thank guibog)\n\n2013-06-18\n~~~~~~~~~~\n\n* 允许 remote 为 \"用户名@\" 的形式的 URL (thank guibog)\n\n2013-06-13\n~~~~~~~~~~\n\n* bugfix: 在非 git repo 目录下运行 code 会出错\n\n2013-06-09\n~~~~~~~~~~\n\n* ``code end`` 命令默认关闭当前分支 (thank guibog)\n\n2013-06-04\n~~~~~~~~~~\n\n* 增加 ``code merge`` 命令，简化 release 分支的管理。\n\n2013-05-20\n~~~~~~~~~~\n\n* ``code pr -t`` 参数支持指定目标仓库的 branch。\n\n2013-04-01\n~~~~~~~~~~\n\n* ``code start`` 时如果目标 branch 已存在，会提示是要切换还是重建。\n\n2013-03-26\n~~~~~~~~~~\n\n* 不使用 ``commands.getoutput`` ，以支持windows",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": "",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "CodeCLI",
    "package_url": "https://pypi.org/project/CodeCLI/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/CodeCLI/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/CodeCLI/0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A command line tool for CODE",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5905408,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00192bc02567ac1be024ae6d35e395b106544f6d503cadfed210ddaf59d71d75",
          "md5": "490147544f403ab358b4e28e459bf0a5",
          "sha256": "57cab17386658012b15d6e360a02619527ddd0c4a8af4b60f1e91f460ce9d74a"
        },
        "downloads": -1,
        "filename": "CodeCLI-0.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "490147544f403ab358b4e28e459bf0a5",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "requires_python": null,
        "size": 24945,
        "upload_time": "2014-10-08T13:59:02",
        "upload_time_iso_8601": "2014-10-08T13:59:02.696534Z",
        "url": "https://files.pythonhosted.org/packages/00/19/2bc02567ac1be024ae6d35e395b106544f6d503cadfed210ddaf59d71d75/CodeCLI-0.1-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9069d93fd6d4555ff95c7e1722b89a4a4be17c14f59575b008968d3eb5609ff8",
          "md5": "3f1fd484198b87876374e6fe7c726204",
          "sha256": "78244d634d7d9985c612f4b8a7fbd3303d84f2af5f8a8ec9e72df8beff47e6eb"
        },
        "downloads": -1,
        "filename": "CodeCLI-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3f1fd484198b87876374e6fe7c726204",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15015,
        "upload_time": "2014-10-08T13:58:58",
        "upload_time_iso_8601": "2014-10-08T13:58:58.971738Z",
        "url": "https://files.pythonhosted.org/packages/90/69/d93fd6d4555ff95c7e1722b89a4a4be17c14f59575b008968d3eb5609ff8/CodeCLI-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "00192bc02567ac1be024ae6d35e395b106544f6d503cadfed210ddaf59d71d75",
        "md5": "490147544f403ab358b4e28e459bf0a5",
        "sha256": "57cab17386658012b15d6e360a02619527ddd0c4a8af4b60f1e91f460ce9d74a"
      },
      "downloads": -1,
      "filename": "CodeCLI-0.1-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "490147544f403ab358b4e28e459bf0a5",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 24945,
      "upload_time": "2014-10-08T13:59:02",
      "upload_time_iso_8601": "2014-10-08T13:59:02.696534Z",
      "url": "https://files.pythonhosted.org/packages/00/19/2bc02567ac1be024ae6d35e395b106544f6d503cadfed210ddaf59d71d75/CodeCLI-0.1-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9069d93fd6d4555ff95c7e1722b89a4a4be17c14f59575b008968d3eb5609ff8",
        "md5": "3f1fd484198b87876374e6fe7c726204",
        "sha256": "78244d634d7d9985c612f4b8a7fbd3303d84f2af5f8a8ec9e72df8beff47e6eb"
      },
      "downloads": -1,
      "filename": "CodeCLI-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3f1fd484198b87876374e6fe7c726204",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15015,
      "upload_time": "2014-10-08T13:58:58",
      "upload_time_iso_8601": "2014-10-08T13:58:58.971738Z",
      "url": "https://files.pythonhosted.org/packages/90/69/d93fd6d4555ff95c7e1722b89a4a4be17c14f59575b008968d3eb5609ff8/CodeCLI-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}