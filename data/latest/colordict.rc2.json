{
  "info": {
    "author": "aleferna",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# colordict\n\nA package to allow for easy maintenance of a color dictionary with palettes, so you can use the colors that you like in\nyour different projects.\n\n> Example of a built-in palette ![Imgur](https://i.imgur.com/h5NXB0T.jpg)\n\nA list and an image of all built-in palettes and colors are available at the end of this document, in the \"Palettes\"\nsection.\n\nThe aim of this project was to create a simple library to manage color names and color values. There are some colors\nwhich are so commonly used that the need to manually copy rgb or hex values becomes a burden. That's where ColorDict\ncomes in, as it allows for much easier organizing of your preferred colors in a simple dictionary!\n\nAnother feature of this package is the LinearGrad, which is used to work with transition of colors in a gradient.\n\nQuick example on how to use the library (more examples in the \"Examples of usage\" section):\n\n    from colordict import *\n    \n    colors = ColorDict()\n    red = colors['red']\n    red_hex_string = colors['red', 'hex']\n    rainbow_colors = colors.palettes['rainbow']\n    \n    rainbow_gradient = LinearGrad([colors[color] for color in rainbow_colors])\n\n## To install:\n\nRun:\n\n    python -m pip install colordict\n\n## Using ColorDict:\n\nThe ColorDict class is the main feature of this package. It is used to organize your colors in an easy and intuitive\nway.\n\nAll colors are saved as a json dictionary in the \"palettes\" directory of the package (or wherever you set to with\nthe `palettes_path` parameter).\n\nWhen you create an instance of `ColorDict`, these colors are loaded as keys, and can be accessed just as any python\ndictionary. Because of this, **there can be only one color value per key name**, and disrespecting this rule will lead\nto inconsistencies. Note, however, that **multiple keys can map to the same value**.\n\nIs fine:\n\n    value = (255, 0, 0)\n    colordict_instance.add('red', value)\n    colordict_instance.add('carmesim', value)\n\nIs dangerous:\n\n    name = 'red'\n    colordict_instance.add(name, (255, 0, 0))\n    colordict_instance.add(name, (128, 0, 0))\n\n### Initializing a ColorDict instance:\n\n    colordict_instance = ColorDict(norm=255, mode='rgb', palettes_path=\"\", is_grayscale=False, palettes='all')\n\n- `norm` represents the standard norm of the dictionary. Any value retrieved from a key will be normalized to that. Any\n  value set to a key should be in this norm\n- `mode` is the format in which values will be retrieved (see section on retrieving values for more on that)\n- `palettes_path` set the path from which the instance will load the palettes (and where they are going to be saved as\n  well)\n- If `is_grayscale=True`, values retrieved from keys will all be converted to shades of gray\n- You can load only some palettes by passing a list of palettes to the `palettes` argument. `palettes=all`, the default,\n  will load all palettes instead\n\n#### Examples:\n\n    norm_dict = ColorDict(norm=1)\n    hex_dict = ColorDict(mode='hex')\n    gray_dict = ColorDict(is_grayscale=True)\n    fluo_dict = ColorDict(palettes=['fluorescent'])\n    \n    print(norm_dict['red'])\n    print(hex_dict['red'])\n    print(gray_dict['red'])\n    print(fluo_dict['red'])\n\nWould print:\n\n    (1.0, 0.0, 0.0)\n    #ff0000\n    (76.5, 76.5, 76.5)\n\nAnd a `KeyError` would be raised for `fluo_dict`, as `red` is not a color of the \"fluorescent\" palette.\n\n#### Attributes of ColorDict:\n\n- `colordict_instance.palettes` is a dictionary containing every loaded palette and the name of the colors contained in\n  each of them\n- `colordict_instance.norm` represents the dictionary's current norm. It is read-only\n- `colordict_instance.mode` represents the dictionary's current mode ( 'rgb', 'rgba', 'hex', 'hls', 'hsv' or 'yiq')\n- `colordict_instance.is_grayscale` represents if the dictionary is grayscale or not\n- `colordict_instance.palettes_path` represents the path to the directory where palettes are stored\n\n### Retrieving color values from a ColorDictionary instance:\n\nColor values can be retrieved from a `ColorDict` by doing:\n\n\tcolordict_instance['color_name']\n\nYou can further specify a format in which the value will be returned by doing:\n\n\tcolordict_instance['color_name', 'mode']\n\nAs of right now, 'rgb', 'rgba', 'hex', 'hls', 'hsv' and 'yiq' modes are available. If you don't specify a mode, the\nattribute `colordict_instance.mode` will be used instead.\n\n> You can also use default methods from dictionaries, such as `keys()`, `values()` and `items()`, but note that any values\nreturned by these methods will be in rgba format.\n\n#### Examples:\n\n\tcolordict_instance['red', 'hex']\n\nWould return: `\"#ff0000\"`\n\n### Adding, changing and removing colors:\n\nThe add and remove methods are only intended to use when you want to add or remove colors to/from a specific palette or\nintend to save them permanently latter.\n\nIf you don't provide a palette name when using `add()`, colors will be stored in a palette called \"independent\". Palettes are automatically created when adding colors to them if necessary.\n\n\tcolor_instance.add('color_name', rgb_a, palette='independent', check=True)\n\tcolor_instance.remove('color_name', palette)\n\n> Note that the method `remove()` will only remove the color from a particular palette. You can use the\nmethod `remove_all('color_name')` if you wish to remove a color from all palettes and delete the dictionary key.\n\nIf you only wish to locally add colors to a ColorDict but don't want the `save()` method to save them, you can simply\ndo:\n\n\tcolordict_instance['color_name'] = rgb_a\n\nIf you want to change the color value associated with a particular color name, you can do:\n\n\tcolordict_instance['color_name'] = new_rgb_a\n\n> Note that whenever adding values, the format must be (r, g, b) or (r, g, b, a)\n\n#### Examples:\n\nAdding color 'strawberry' with value (200, 63, 73) to palette 'fruits':\n    \n    color_instance.add('strawberry', (200, 63, 73), 'fruits')\n    \nAdding color 'mango' with value (255, 130, 67) locally:\n\n    colordict_instance['mango'] = (255, 130, 67)\n    \nChanging the value of 'strawberry' to (255, 0, 0):\n\n    colordict_instance['strawberry'] = (255, 0, 0)\n    \nRemoving color 'lemon' from palette 'fruits':\n\n    color_intance.remove('lemon', 'fruits')\n    \nRemoving color 'orange' from all palettes:\n\n    colordict_instance.remove_all('orange')\n\n### Saving, doing backups and restoring backups:\n\nIf you want to save the current state of the ColorDict instance (this saves each palette individually as explained in the beginning of this section), you can simply do:\n\n    colordict_instance.save()\n\nTo create a backup of the current state of the `ColorDict` instance (in case you are afraid of messing things up), you\n  can do:\n\n    colordict_instance.backup()\n\nTo restore the ColorDict instance with the existing backup, you do:\n\n    colordict_instance.restore()\n\n> Note that neither backup nor restore functions automatically `save()`. If that's the intention, you must call it separately\n\n## General functions:\n\nThere are a few useful functions available in this package:\n\n### Conversion between color systems:\n\nThese functions return the color inputted in the specified output format.\n\nIf you want to convert rgb to hex (rgb norm must be 255):\n\n    rgb_to_hex(rgb)\n\nIf you want to convert hex to rgb:\n\n    hex_to_rgb('hex')\n\nYou can also freely convert between 'rgb' and 'hls', 'hsv' or 'yiq' (norm of input must be 1):\n\n    hls_to_rgb(hls)\n\n#### Example:\n\nConverting red around\n\n    rgb = hex_to_rgb('#ff0000')\n    hls = rgb_to_hls(rgb)\n    rgb2 = hls_to_rgb(hls)\n    yiq = rgb_to_yiq(rgb2)\n    print(yiq)\n\nWould print: `(76.5, 152.745, 54.315)`\n\n### Other:\n\nIf you want the gray equivalent of a color:\n\n    grayscale(rgb)\n\nIf you want to renorm a color value (let's say from (255, 255, 255) to (1, 1, 1)):\n\n    renorm(rgb_a, old, new)\n\n## Using gradients:\n\nAs of right now, the only available gradient is LinearGrad, which uses linear interpolation as the algorithm.\n\n### LinearGrad\n\nTo initialize a `LinearGrad` instance, you'll only need a set of rgb or rgb_a values:\n\n    grad = LinearGrad(list_of_rgbs)\n\nYou can then obtain the color in a certain percentage of the gradient by calling the instance itself with said\n  percentage as an argument:\n\n    color_at_percentage = grad(percentage)\n\nYou can also obtain a list of n color values equally interspaced:\n\n    color_list = grad.n_colors(n, stripped=True)\n\nThe returned list will never include the first and last color values of the list you used to create\nthe `LinearGrad` instance, unless you set `stripped=False`, in which case they will always be present.\n\n#### Attributes of LinearGrad:\n\n- `grad.colors` represents the color values loaded in the gradient originally\n\n#### Examples:\n\nCreating a linear gradient between red, green and blue:\n\n    grad = LinearGrad([(255, 0, 0), (0, 255, 0), (0, 0, 255)])\n    \nGetting a shade of yellow between red and green:\n\n    yellow = grad(0.33)\n    \nGetting 100 color values interspaced between all three colors:\n\n    rgbs = grad.n_colors(100)\n\n## Examples of usage:\n\nUsing tkinter to render a rainbow gradient, a few rainbow-colored lines and an \"aquamarine\" rectangle on the screen:\n\n    import tkinter as tk\n    import colordict as cd\n    \n    colors = cd.ColorDict(mode='hex')\n    master = tk.Tk()\n    \n    w = tk.Canvas(master, width=500, height=500)\n    w.pack()\n    \n    # Referencing the \"aquamarine\" color from \"colors\"\n    w.create_rectangle([10, 400, 50, 500], fill=colors['aquamarine'])\n    # Doing the same recursively for all color names in \"colors.palettes['rainbow']\"\n    for i, color in enumerate(colors.palettes['rainbow']):\n        w.create_line([0, 0, (i + 1) * 200, 500], fill=colors[color])\n    \n    gradient = cd.LinearGrad([colors[color, 'rgb'] for color in colors.palettes['rainbow']])\n    print(colors['aquamarine'])\n    for i, color in enumerate(gradient.n_colors(100)):\n        w.create_rectangle([i, 0, i +1, 10], fill=cd.rgb_to_hex(color), width=0)\n    \n    tk.mainloop()\n\n## Palettes and colors:\n\nA list of the names and image of the built-in palettes. Many of these palettes were released as Crayon color palettes\nand then adapted, others are personal selections. All of Pantone's color of the year are available as well.\n\n- CSS\n    - Contains all colors available in CSS\n    - Image not shown because it would be too big\n\n- mystic_forest\n    - ![Imgur](https://i.imgur.com/h5NXB0T.jpg)\n\n- world_flags\n    - ![Imgur](https://i.imgur.com/zWOlPdr.jpg)\n\n- rainbow\n    - ![Imgur](https://i.imgur.com/1XFZTmV.jpg)\n\n- pantone_years\n    - ![Imgur](https://i.imgur.com/RgFd0V0.jpg)\n\n- heads_n_tails\n    - ![Imgur](https://i.imgur.com/9FGljde.jpg)\n\n- magic_scent\n    - ![Imgur](https://i.imgur.com/65Tucjo.jpg)\n\n- gem_tones\n    - ![Imgur](https://i.imgur.com/VYTFqvL.jpg)\n\n- silly_scents\n    - ![Imgur](https://i.imgur.com/Lpl25Fg.jpg)\n\n- fluorescent\n    - ![Imgur](https://i.imgur.com/M5A2OOQ.jpg)\n\n- silver_swirls\n    - ![Imgur](https://i.imgur.com/V6wbRR0.jpg)\n\n- metallic_fx\n    - ![Imgur](https://i.imgur.com/4Ua6JUf.jpg)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aleferna12/colordict",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "colordict",
    "package_url": "https://pypi.org/project/colordict/",
    "platform": null,
    "project_url": "https://pypi.org/project/colordict/",
    "project_urls": {
      "Homepage": "https://github.com/aleferna12/colordict"
    },
    "release_url": "https://pypi.org/project/colordict/1.2.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A package to allow for easy maintenance of a color dictionary with palettes, so you can use the colors that you like in your different projects.",
    "version": "1.2.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13557838,
  "releases": {
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "358981d029bf467c11f94fbadccc5196f91357929a0daa73e428773e96681890",
          "md5": "68e61ed21e9118840cb846647bf150c9",
          "sha256": "e5f2b29b4d851f7acb543627350cb18e9853a8c08cfcb54fdb62fa8f6e250b34"
        },
        "downloads": -1,
        "filename": "colordict-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68e61ed21e9118840cb846647bf150c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19486,
        "upload_time": "2022-04-13T17:33:06",
        "upload_time_iso_8601": "2022-04-13T17:33:06.043834Z",
        "url": "https://files.pythonhosted.org/packages/35/89/81d029bf467c11f94fbadccc5196f91357929a0daa73e428773e96681890/colordict-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24ede47dbb6c620e848239af4d4d7e4cc577e0cd5ea7cc742a206fa0b807f7df",
          "md5": "27a8b346cba5636511e0e6fb0a0893e1",
          "sha256": "0108ca56132933b95d550e4ba7d4458bfcbf10dffffbc533fbdcaae06251c558"
        },
        "downloads": -1,
        "filename": "colordict-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "27a8b346cba5636511e0e6fb0a0893e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20801,
        "upload_time": "2022-04-13T17:33:07",
        "upload_time_iso_8601": "2022-04-13T17:33:07.725356Z",
        "url": "https://files.pythonhosted.org/packages/24/ed/e47dbb6c620e848239af4d4d7e4cc577e0cd5ea7cc742a206fa0b807f7df/colordict-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06a4e2f4d8aa78b510e0bbcc5199ba83f7234fc2fb2837d216b291bf0fba2d84",
          "md5": "fb9c1d8b321522494f27ad0376ea6a7f",
          "sha256": "0922f4858efedcd716f76a9ea1a4a95ef2e61f1828f0a4cd79d1ef56cda302e7"
        },
        "downloads": -1,
        "filename": "colordict-1.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb9c1d8b321522494f27ad0376ea6a7f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19485,
        "upload_time": "2022-04-19T15:05:20",
        "upload_time_iso_8601": "2022-04-19T15:05:20.941252Z",
        "url": "https://files.pythonhosted.org/packages/06/a4/e2f4d8aa78b510e0bbcc5199ba83f7234fc2fb2837d216b291bf0fba2d84/colordict-1.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "189e44e617979ffc8268540750aa39a44837e3fd0fa68a220b68e98aaae8a5e3",
          "md5": "4632c0396b6412d4eda5dea4af077ca9",
          "sha256": "75854912094196622c7395898c364d0954078f55b32a72d774da739696977dbc"
        },
        "downloads": -1,
        "filename": "colordict-1.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4632c0396b6412d4eda5dea4af077ca9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20796,
        "upload_time": "2022-04-19T15:05:22",
        "upload_time_iso_8601": "2022-04-19T15:05:22.576034Z",
        "url": "https://files.pythonhosted.org/packages/18/9e/44e617979ffc8268540750aa39a44837e3fd0fa68a220b68e98aaae8a5e3/colordict-1.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "06a4e2f4d8aa78b510e0bbcc5199ba83f7234fc2fb2837d216b291bf0fba2d84",
        "md5": "fb9c1d8b321522494f27ad0376ea6a7f",
        "sha256": "0922f4858efedcd716f76a9ea1a4a95ef2e61f1828f0a4cd79d1ef56cda302e7"
      },
      "downloads": -1,
      "filename": "colordict-1.2.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fb9c1d8b321522494f27ad0376ea6a7f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19485,
      "upload_time": "2022-04-19T15:05:20",
      "upload_time_iso_8601": "2022-04-19T15:05:20.941252Z",
      "url": "https://files.pythonhosted.org/packages/06/a4/e2f4d8aa78b510e0bbcc5199ba83f7234fc2fb2837d216b291bf0fba2d84/colordict-1.2.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "189e44e617979ffc8268540750aa39a44837e3fd0fa68a220b68e98aaae8a5e3",
        "md5": "4632c0396b6412d4eda5dea4af077ca9",
        "sha256": "75854912094196622c7395898c364d0954078f55b32a72d774da739696977dbc"
      },
      "downloads": -1,
      "filename": "colordict-1.2.6.tar.gz",
      "has_sig": false,
      "md5_digest": "4632c0396b6412d4eda5dea4af077ca9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20796,
      "upload_time": "2022-04-19T15:05:22",
      "upload_time_iso_8601": "2022-04-19T15:05:22.576034Z",
      "url": "https://files.pythonhosted.org/packages/18/9e/44e617979ffc8268540750aa39a44837e3fd0fa68a220b68e98aaae8a5e3/colordict-1.2.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}