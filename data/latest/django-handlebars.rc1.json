{
  "info": {
    "author": "Sergii Iavorskyi",
    "author_email": "yavorskiy.s@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: JavaScript",
      "Programming Language :: Python"
    ],
    "description": "=================\r\ndjango-handlebars\r\n=================\r\ndjango-handlebars integrates `Handlebars <http://handlebarsjs.com/>`_ JavaScript templating engine with `Django <https://www.djangoproject.com/>`_. It provides Python and JavaScript helpers for wrapping templates inclusion and loading routines. Optionaly django-handlebars provides ``manage.py`` commands facilitating compilation (requires ``python-spidermonkey``) and live templates assets synchronization as you developing (requires ``pyinotify``).\r\n\r\nHow to install\r\n==============\r\n1. Install package from PyPi ``pip install django-handlebars``. Or alternatively pull the repo and run ``python setup.py install``\r\n\r\n2. Add ``django_handlebars`` to project's ``settings.INSTALLED_APPS``\r\n\r\n3. Optionaly add ``HANDLEBARS_*`` configuration parameters to the ``settings.py``. See `django_handlebars.appsettings <https://github.com/yavorskiy/django-handlebars/blob/master/django_handlebars/appsettings.py>`_ for available options and explanations\r\n\r\n4. Run ``./manage.py test django_handlebars`` to check configuration and requirments.\r\n\r\n5. That should be it. Application is not providing any models or URLs.\r\n\r\nHow to use\r\n==========\r\ndjango-handlebars can work in two modes: compiling templates in browser and rendering templates pre-compiled on server side. In both scenarios templates might be loaded dynamically with AJAX request or included on page to prevent extra HTTP requests.\r\n\r\nFirst you have to drop in Handlebars scripts on page::\r\n\r\n  {% load handlebars_tags %}\r\n  <html>\r\n  <head>\r\n    {% handlebars_scripts %}\r\n  </head>\r\n  <body></body> \r\n  </html>\r\n\r\nWhich will add ``handlebars_config`` variable storing configuration, ``script`` tags for ``handlebars.js`` (or ``handlebars.runtime.js`` if ``settings.HANDLEBARS_COMPILED`` is ``True``) and handlebars.django.js. Django-handlebars provides template loading client (see handlebars.django.js) by extending Handlebars object with tpl() method.\r\n\r\nCompiling in browser\r\n--------------------\r\nThis mode is simpler and doesn't require optional dependencies to be satisfied. But it adds a little overhead. In this case Handlebars will parse  template every other page load and parser script has to be loaded in addition to renderer.\r\n\r\nAssuming you have configured application and your Handlebars ``*.html`` templates are accessiable from static URL, your typical usage pattern will look like this::\r\n\r\n  var data = {title: \"The title\", body: \"whatever\"}\r\n\r\n  Handlebars.tpl(\"your/template/spec\", {\r\n      success: function(renderer){\r\n          console.log(\"Rendered template:\", renderer(data));\r\n      },\r\n      error: function(xhr, err){\r\n          console.warn(\"Ooops, can't load template\", err);\r\n      }\r\n  });\r\n\r\n\r\nNotice that template path doesn't include dir URL and extension. Starting slash is tolerated. ``Handlebars.tpl`` is NOT returning template, having ``success`` callback is the only way to get it.\r\n\r\nBy default client attempts to use `jQuery <https://github.com/jquery/jquery>`_ if it's available, otherwise it will fall back to it's own simple crossbrowser XHR implementation. In case jQuery is available ``Handlebars.tpl()`` call would return jQuery.Deferred object, so chaining and other benefits may be used::\r\n\r\n  var df = Handlebars.tpl(\"your/template/spec\");\r\n\r\n  df.done(function(renderer){\r\n      console.log(\"Rendered template:\", renderer(data));\r\n  }).fail(function(xhr, err){\r\n      console.warn(\"Ooops, can't load template\", err);\r\n  });\r\n\r\n\r\nLoader appends .html extension and pulls file from ``settings.HANDLEBARS_TPL_URL``\r\n\r\nUsing pre-compiled templates\r\n----------------------------\r\nIn this mode your JavaScript code stays same, but client will attempt to pull .js file from ``settings.HANDLEBARS_TPL_URL``. Pre-compiled file contains JS function generated by ``Handlebars.precompile(str_template)``. You can run this command right in a browser console to see how it looks. Django-handlebars provides manage.py commands to build those files in a batch.\r\n\r\nEliminating extra requests\r\n--------------------------\r\nIn both cases described above HTTP request will be made, which lowers performance. To avoid that include you templates on page:::\r\n\r\n  {% handlebars_template \"your/template/spec\" %}\r\n\r\n\r\nThis will cache template by calling ``Handlebars.tpl(\"your/template/spec\", tpl)``. Described technique works for both regular and pre-compiled modes.\r\n\r\nHow to compile\r\n--------------\r\nRun ``./manage.py compilehandlebars --help``::\r\n\r\n  --clean               Remove all previously compiled templates\r\n  --watch               Watch for changes within appsettings.TPL_DIR and compile\r\n  --raw                 Do not format output\r\n  --quiet               Run with no output\r\n\r\n\r\nDjango-hadlebars compiles templates by running Handlebars script using `SpiderMonkey <https://developer.mozilla.org/en/SpiderMonkey>`_ and requires `python-spidermonkey <http://pypi.python.org/pypi/python-spidermonkey>`_ package to be installed.\r\n\r\nSo far ``--watch`` option is available on Linux platform only since it's using `pyinotify <https://github.com/seb-m/pyinotify>`_. Support for other platforms might be added in future.\r\n\r\nIf either of these two is not installed ``compilehandlebars`` will exit with appropriate error message.\r\n\r\nOn ``compilehandlebars`` start all template files with mtime newer than compiled file mtime will be re-compiled. If you run command without ``--watch`` compiler exits once all files compiled, otherwise it will hang until you press ``Ctl-C``.\r\n\r\nLicense\r\n-------\r\nCopyright 2012 Sergii Iavorskyi, Licensed new-style BSD. Contains `Handlebars.js <https://github.com/wycats/handlebars.js>`_ copyright 2011 Yehuda Katz. See LICENSE file for more information.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "https://github.com/yavorskiy/django-handlebars/downloads",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yavorskiy/django-handlebars",
    "keywords": "django handlebars",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-handlebars",
    "package_url": "https://pypi.org/project/django-handlebars/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-handlebars/",
    "project_urls": {
      "Download": "https://github.com/yavorskiy/django-handlebars/downloads",
      "Homepage": "https://github.com/yavorskiy/django-handlebars"
    },
    "release_url": "https://pypi.org/project/django-handlebars/0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Handlebars for Django",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 789788,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea9a316d009cd569ba2b09d7ec5e1695484d3d07091f7c8fd49490466d75d14e",
          "md5": "4bd51a15fa3ebcd35c36b1854dfb1f9a",
          "sha256": "95f7709cc1096fbcfbf8fc48fdcf4e4c5f347573b9392e9ea1d61f4b398c78f9"
        },
        "downloads": -1,
        "filename": "django-handlebars-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4bd51a15fa3ebcd35c36b1854dfb1f9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40205,
        "upload_time": "2012-03-15T12:53:34",
        "upload_time_iso_8601": "2012-03-15T12:53:34.065053Z",
        "url": "https://files.pythonhosted.org/packages/ea/9a/316d009cd569ba2b09d7ec5e1695484d3d07091f7c8fd49490466d75d14e/django-handlebars-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ea9a316d009cd569ba2b09d7ec5e1695484d3d07091f7c8fd49490466d75d14e",
        "md5": "4bd51a15fa3ebcd35c36b1854dfb1f9a",
        "sha256": "95f7709cc1096fbcfbf8fc48fdcf4e4c5f347573b9392e9ea1d61f4b398c78f9"
      },
      "downloads": -1,
      "filename": "django-handlebars-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4bd51a15fa3ebcd35c36b1854dfb1f9a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 40205,
      "upload_time": "2012-03-15T12:53:34",
      "upload_time_iso_8601": "2012-03-15T12:53:34.065053Z",
      "url": "https://files.pythonhosted.org/packages/ea/9a/316d009cd569ba2b09d7ec5e1695484d3d07091f7c8fd49490466d75d14e/django-handlebars-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}