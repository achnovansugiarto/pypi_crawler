{
  "info": {
    "author": "CZ.NIC z.s.p.o",
    "author_email": "karel.koci@nic.cz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "Python UCI (Unified Configuration Interface) bindings\n=====================================================\nBindings for OpenWRT configuration interface called UCI and specifically library\nlibuci.\n\nYou can use this library to access and set configuration from and to UCI.\n\nRequirements\n------------\n\n* Python3\n* libuci\n\nUsage\n-----\nThere are two primary packages in this project. There is `uci` and `euci`. In\nmost cases you want to use `euci` but because that is just a wrapper on top `uci`\nplease also read documentation for that as features you might be missing in `euci`\nmight be implemented there.\n\n### uci\nThis is Python3 module and real wrapper on top of libuci. Its API is designed to\nbe same as the official Lua bindings but given by differences between these two\nlanguages it is not completely same. Primarily some operations present in both are\nmore potent in pyuci.\n\nGeneral usage consist of initializing `Uci` handler, calling methods to modify or\nreceive configuration values and then committing it.\n```python\nfrom uci import Uci\nu = Uci()\nprint(u.get(\"network\"))\nu.set(\"network\", \"lan\", \"type\", \"bridge\")\nu.commit(\"network\")\n```\n\n`Uci` can also be used in Python `with` statement. This ensures that all changes\ndone to uci are committed on `with` statement context exit.\n```python\nwith uci.Uci() as u:\n\tu.set(\"network\", \"lan\", \"type\", \"bridge\")\n```\n\n#### uci.get(config, section, option)\nUse this method if you want to get configuration values. Arguments are identifying\nwhat you want to get. `config` is name of top level configuration file to read.\n`section` is name of section (be aware that that is not type of section but\nvalue). `option` is name of option or list. Only required argument is `config`.\n\nThis method returns different representations depending on number of provided\narguments.\n\nWhen only `config` is provided then returned type is dictionary of dictionaries\nwith structure where first level keys are section values and values are\ndictionaries with section content. The lower dictionary keys are then names of\noptions and lists. Value of option key is string and value of list key is tuple\ncontaining strings.\n```\n{'lan': {'ifname': ('lan0', 'lan1', 'lan2', 'lan3', 'lan4'),\n         'ipaddr': '192.168.1.1',\n         'netmask': '255.255.255.0',\n         'proto': 'static',\n         'type': 'bridge'},\n 'wan': {'ifname': 'eth2', 'proto': 'dhcp'}}\n```\nNote that Python3 ensures order in dictionaries and order in these are ensured to\nbe same as in configuration file. This is important for sections where order is\nused to specify priority between for example rules.\n\nWhen `section` and optionally also `option` are provided then only that specific\nvalue is returned. In case of no `option` then type of section is returned as\nstring. If `option` is provided then it depends if it refers to list or to option.\nIf it is option then returned value is of string type. If it is list then tuple of\nstring is returned instead.\n\nIf any requested config, section or option are not found then\n`UciExceptionNotFound` is thrown.\n\n#### uci.get_all(config, section, option)\nThis is almost same as `uci.get` with only one difference. That is if you provide\nonly `config` and `section` then instead of getting section type it returns lower\ndictionary same as if you provide only `config`. That is it returns dictionary\nwith all options and lists in that section.\n\n#### uci.set(config, section, option, value)\nSet given `value` to given option. Value has to be either string or table/tuple of\nstrings. If you provide string then value is set as option. If you provide\ntable/tuple then it is set as list. Note that it replaces previous value.\n\nNote that section has to exists otherwise UciException is thrown.\n\nThis also allows you to set name for section (to create named section or change\nname). Format of this function to be used for this is: `uci.set(config, section,\nvalue)`.\n\n#### uci.add(...)\nThis is suppose to add new anonymous section. This is currently not implemented\nand thus adding anonymous sections with pyuci is not supported.\n\n#### uci.delete(config, section, option)\nThis method allows you to remove sections and options from configuration. `config`\nand `section` are required. `option` is optional.\n\nNo error is reported if config, section or option does not exist.\n\nNote that `section` in reality can be left out as well but in such case UCI does\nnothing and no error is reported.\n\n#### uci.rename(config, section, option, name)\nThis method allows you to rename existing option, list or section to different\nname. `option` is optional and in such case section type is modified.\n\n#### uci.reorder(config, section, index)\nMove given section to different index in configuration file. All arguments are\nrequired and `index` starts with 0.\n\n#### uci.save(config, section, option)\nSave changes deltas to save location. This does not modify configuration if self\nbut stores changes to specific configuration location. Using such delta you can\noverlay configuration. See `uci.savedir()`, `uci.set_savedir()` and `uci`\ninitialization on how to set location for this delta save.\n\n#### uci.commit(config, section, option)\nWrite changes to configuration files. You have to specify at least `config` but\nyou can also optionally specify more precise specification of `section` and\n`option`. This ensures that anything outside of that specification is not written\nto configuration.\n\n#### uci.revert(config, section, option)\nDrops all changes done on specified configuration. `config` argument is required\nand `section` and `option` are optional and allows you to limit what is suppose to\nbe reverted.\n\n#### uci.list_configs()\nReturns list of all configs loaded and available to `Uci`.\n\n#### uci.confdir()\nReturns path to current configuration directory. This is directory where\nconfiguration files are stored. This is suppose to be on permanent storage.\n\nTo set it you can either call `uci.set_confdir()` or to pass keyword `confdir`\nargument to `Uci` initialization.\n\n#### uci.set_confdir(path)\nSets given `path` as to be used as configuration directory. That is directory\nthat is used to load configuration from and store it to.\n\nTo get current configuration directory you can call `uci.confdir()`.\n\n#### uci.savedir()\nReturns path to current save directory. This is directory where delta files are\nstored to. Those are changes done to configuration but not committed to\nconfiguration directory yet. To update content of this directory you can call\n`uci.save()`.\n\nTo set it you can either call `uci.set_savedir()` or to pass keyword `savedir`\nargument to `Uci` initialization.\n\n#### uci.set_savedir(path)\nSets given `path` as to be used as save directory. That is directory that is used\nto store delta files. Those are files with configuration changes that are not\nwritten to configuration files in configuration directory.\n\nTo get current save directory you can call `uci.savedir()`.\n\n### euci (extended uci)\nThis is Python only extension for `uci` module. It extends `Uci` to `EUci` and\nadds functionality like types to it.\n\nGeneral usage is same as in case of `Uci`. Every method you have in `Uci` you have\nalso access trough `EUci`. The only difference is that some methods are overloaded\nand provide additional behavior on top of `Uci`.\n\n`EUci` supports following types explicitly and any type that can be initialized\nfrom string without additional info (such as __int__ or __float__):\n* __str__: this is default and native UCI type.\n* __bool__: this is boolean type that has only two states: `True` or `False`.\n  UCI defines special strings that are suppose to be understood by all\n  applications as booleans. Those are `0`, `no`, `off`, `false` and `disabled`\n  for `False` and `1`, `yes`, `on`, `true`, `enabled` for `True`. Any other\n  value in configuration is considered as invalid. `EUci` uses `0` and `1` if it\n  sets this type.\n\n#### euci.bolean.VALUES\nThis is dictionary mapping boolean strings to `True` or `False`.\nUseful when getting whole config section and processing options individually.\n\n#### euci.get(config, section, option, dtype=str, convert=None, list=False, default=NoDefault)\nThis is overloaded `uci.get` method. Three initial positional arguments are same\nas in case of `uci.get` but behavior changes depending on additional keyword\narguments.\n\n`dtype` is type that can be initialized from string passed as a single argument.\nIt ensures that returned value is always of given type. For list of supported\ntypes please see previous section. The UciExceptionNotFound is raised if value\ncan't be converted to specified type.\n\n`convert` can be a function that is called to do custom conversion. You can use\nthis if simple dtype is not enough for you. The reason for using this is to\nconvert to custom type or to provide additional info such as base to integer.\nThe function should accept value to convert as argument and return result.\n\n`list` is bool specifying if `euci.get` should ensure that returned value is\nconsidered as UCI option or as list. This is effectively difference between\nreturning value of `dtype` or tuple of `dtype` values. If configuration contains\nUCI option with appropriate name but `list` is set to `True` then `euci.get`\nreturns tuple with value of that option. On the other hand if configuration\ncontains UCI list with appropriate name but `list` is set to `False` then\n`euci.get` returns always value of type `dtype`. It returns first one if\nmultiple UCI lists were provided. The default is `False` so you should always\nspecify it as `True` when you are working with lists. Note that this keyword\nhas no effect if `section` is not provided. Meaning that in such case\ndictionary is always returned.\n\n`default` keyword argument can be used to suppress exception\n`UciExceptionNotFound`. Instead of raising this exception `euci.get` returns\nprovided default. Note that default is never processed by conversion, so you\nhave to make sure that it is already of correct type or expect that it is might\nnot be. This has no effect if no `section` argument is provided. Meaning that\nreturned dictionary never contains anything else than strings as values.\n\n#### euci.set(config, section, option, value)\nThis is overloaded `uci.set` method. It is not changed in form of how it is\ncalled. You should not see any difference with exception of how it handles\n`value`. It detects provided type of `value` argument and if it is one of\nsupported types then it converts it correctly to appropriate string\nrepresentation. Any unsupported type is considered to be string and string\nconversion is performed.\n\n`value` can be both only single value or tuple/list same as in case of `uci.set`.\nIn case of tuple/list it is expected that all values are of same type. That is\nhandled in way that value at index zero is used to detect type and rest of the\nvalues are converted to that type.\n\n### Examples\nThese are examples of different usage of `uci` and `euci` on OpenWRT system.\n\n#### Getting configured host name\nHostname is in anonymous section of type `system`. We have to check all sections\nto get correct name for that section.\n```python\nfrom euci import EUci\nhostname = next(\n    u.get(\"system\", section, \"hostname\")\n    for section in u.get(\"system\")\n    if u.get(\"system\", section) == \"system\"))\n```\n\nTesting\n-------\nTo run tests you need, on top of requirements, pytest.\n\nYou can use Docker to get appropriate environment for running tests (with pytest\nand including libuci). Appropriate docker file can be found in this repository\nwith name `.Dockerfile`.\n\nRunning all tests is as easy as running: `python3 -m pytest tests`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.nic.cz/turris/pyuci",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyuci",
    "package_url": "https://pypi.org/project/pyuci/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyuci/",
    "project_urls": {
      "Homepage": "https://gitlab.nic.cz/turris/pyuci"
    },
    "release_url": "https://pypi.org/project/pyuci/0.9.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Python UCI bindings",
    "version": "0.9.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14611222,
  "releases": {
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5cb1131cf26f5dee4c64ab4157b480feac63edc76a3709bc895a552cc3f2c2b",
          "md5": "e0cf4ebc691c63c55cbc5b0292637e77",
          "sha256": "9287fe41b427dc5c167592d429be48c1e6cfe276225681b1bdefddfe90d7e941"
        },
        "downloads": -1,
        "filename": "pyuci-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e0cf4ebc691c63c55cbc5b0292637e77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32947,
        "upload_time": "2020-12-04T15:01:31",
        "upload_time_iso_8601": "2020-12-04T15:01:31.878599Z",
        "url": "https://files.pythonhosted.org/packages/c5/cb/1131cf26f5dee4c64ab4157b480feac63edc76a3709bc895a552cc3f2c2b/pyuci-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e848b9919bdbf3a8a579c2af1bf5ee412751f70e1ad0587551b8d9ecb38a703",
          "md5": "91b0f7972c120191c441dbdd9febfa8e",
          "sha256": "865a45d48fb5d363f1230e94fa2c5b01ae6487f02f2180b0a6f78193a70166e2"
        },
        "downloads": -1,
        "filename": "pyuci-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "91b0f7972c120191c441dbdd9febfa8e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33431,
        "upload_time": "2022-03-11T15:43:29",
        "upload_time_iso_8601": "2022-03-11T15:43:29.176918Z",
        "url": "https://files.pythonhosted.org/packages/3e/84/8b9919bdbf3a8a579c2af1bf5ee412751f70e1ad0587551b8d9ecb38a703/pyuci-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e848b9919bdbf3a8a579c2af1bf5ee412751f70e1ad0587551b8d9ecb38a703",
        "md5": "91b0f7972c120191c441dbdd9febfa8e",
        "sha256": "865a45d48fb5d363f1230e94fa2c5b01ae6487f02f2180b0a6f78193a70166e2"
      },
      "downloads": -1,
      "filename": "pyuci-0.9.0.tar.gz",
      "has_sig": false,
      "md5_digest": "91b0f7972c120191c441dbdd9febfa8e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 33431,
      "upload_time": "2022-03-11T15:43:29",
      "upload_time_iso_8601": "2022-03-11T15:43:29.176918Z",
      "url": "https://files.pythonhosted.org/packages/3e/84/8b9919bdbf3a8a579c2af1bf5ee412751f70e1ad0587551b8d9ecb38a703/pyuci-0.9.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}