{
  "info": {
    "author": "Nic Kroeker",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Testing",
      "Topic :: Software Development :: Testing :: Acceptance"
    ],
    "description": "e2e.pom - Page Object Modelling for End-to-End Testing\n======================================================\n\nUse ``e2e.pom`` to easily create reusable Page Object Models that offer\nfunctionality and error scenarios more naturally than Selenium can.\n\nExtend available locators with plugins like ``e2e.pom.extjs`` for\nExtJS/Sencha Locators, or write your own!\n\nEliminate iframe-handling in your tests — let the model take care of\nwhere your elements reside. In fact, all elements are guaranteed to be\nfound within their parent model so you can write unique selectors\nwithout specifying a long ancestry within the selector itself!\n\nAll actions are logged with human-friendly labels, with human-friendly\nexceptions indicating exactly where things went wrong.\n\nBeta Notice\n-----------\n``e2e.pom`` is still in **beta**, but the API is expected to be stable. The\nproject is very open to suggestions and feedback at this stage!\n\nThis project follows SemVer. It is expected that the first major release (1.x)\nwill **not** differ in API functionality much from the alpha/beta track\n(0.x).\n\nPython 3.6+ is currently required. No support for 2.x is ever planned since\nit is soon to be unsupported. Please feel free to file an issue if you need\nsupport for an earlier Python version and simply cannot upgrade.\n\n\nModelling Examples\n------------------\n\nPages and their components are easy to model on a class-member basis.\nYou do not need to pass around a driver, nor do you need to write\nproperties or methods. There is no need to override ``__init__``\nproperly either; just author your static model and be done with it!\n\n.. code:: py\n\n   class LoginForm(pom.Region):\n       username_field = pom.Element(\"Username\").by_css('.username')\n       password_field = pom.Element(\"Password\").by_css('.password')\n       login_button = pom.Element(\"Login btn\").by_css('#login-submit')\n\n   class LoginPage(pom.Page):\n       login_form = LoginForm(\"Login form\").by_css('.login')\n\n   # ...\n\n   login_pg = LoginPage(\"https://my-login-service.local:8443\", driver)\n   login_pg.login_form.wait_for_visible()\n   login_pg.login_form.username_field.set_text('Admin1')\n   login_pg.login_form.password_field.set_text('Sup3rS3cret!')\n   login_pg.login_form.login_button.click()\n\nIFrame Handling\n~~~~~~~~~~~~~~~\n\nHandling iframes with Selenium is incredibly annoying. ``e2e.pom``\nprovides a special component that you can use as a hidden parent so that\ntest authors do not need to be concerned about the iframe at all.\n\n.. code:: py\n\n   class LoginForm(pom.Region):\n       # Same as Example Model above\n\n   class LoginPage(pom.Page):\n       # Hide the iframe POM component so the test doesn't need to be aware by\n       # overriding the parent of the Form.\n       _login_service_iframe = pom.IFrame(\"LoginService iframe\").by_css('iframe#login-service')\n       login_form = LoginForm(\"Login form\").by_css('.login', parent=_login_service_iframe)\n\n   # Use exactly as before, like the iframe isn't even there!\n   login_pg.login_form.wait_for_visible()\n\nThe POM framework will then handle switching to the correct iframes.\nEven if a service *becomes* resident within an iframe that was otherwise\ninline before, you only need to change the *model* and not the test\ncode!\n\nIn addition, features like ``is_visible()`` are mindful of iframes. That\nis, unlike using Selenium directly, if the iframe is not displayed then\n``e2e.api`` counts all of its children as invisible.\n\nHidden Regions\n~~~~~~~~~~~~~~\n\nLike the above case for IFrames, you may want to hide a certain part of\nthe model but otherwise use it as a parent to other components. This is\noften useful for ensuring elements are found within a certain part of\nthe page, but would be too verbose to specify in every test.\n\n.. code:: py\n\n   class ServicePage(pom.Page):\n       _nav_bar = pom.Region(\"Navigation bar\").by_css('.upper-nav-container')\n       settings_button = pom.Element(\"Setting btn\").by_css('.gear-icon')\n\n   # You can now do this...\n   service_pg.settings_button.click()\n\n   # Instead of having to do this\n   service_pg.navigation_bar.settings_button.click()\n\nThis is especially useful when you have, like in the above example,\nmultiple elements that use ``.gear-icon`` but are obviously referring to\none particular instance of it. If it is beneficial to the clarity of\nyour model though, you may want to *not* hide the parent since the\nincreased verbosity may make your test’s actions more clear to others.\n\nInteracting with Elements\n-------------------------\n\nWhile some available methods are similar to Selenium’s API, they have\ndiffering requirements and behaviours.\n\nFor example, the concept of “visibility” is now more user-friendly.\nWhether an element is *visible* to the user depends not only on the\ndisplay info of the element, but whether the element exists at all. With\nSelenium, entirely different code is required to handle that difference!\nWith ``e2e.pom``, it is *just* the visiblility functions. This allows\nproduct developers to use techniques like DOM caching without needing to\nchange the test code. This way, ``e2e.pom`` is checking *user intent*\nrather than *implementation details*.\n\n.. code:: py\n\n   # Case 1: With Selenium, element not in DOM. Can also assert NoSuchElement was raised.\n   assert driver.find_elements_by_xpath(...) == []\n\n   # Case 2: With Selenium, element in DOM\n   assert driver.find_elements_by_xpath(...).is_displayed()\n\n   # With happy-path-only POM frameworks (not e2e.pom)\n   try:\n       assert modelled_element.is_displayed()\n   except NoSuchElementException:\n       pass\n\n   # With e2e.pom (works for both above cases)\n   assert modelled_element.is_visible()\n\n*Nothing* happens until you call a method on an element. This is to give\nclarity as to when the finding, attribute checking, and interaction\ntakes place within a test.\n\n.. code:: py\n\n   # Selenium: All of these do something with the driver, even the properties!\n   element = driver.find_element_by_css_selector(...)\n   element.text\n   element.is_displayed()\n   element.click()\n   element.clear() and element.send_keys(\"some text\")\n\n   # e2e.pom: Consistent API. Methods == driver actions.\n   element.get_text()\n   element.is_visible()\n   element.click()\n   element.set_text(\"some text\")\n\nAll user-like interaction methods require visibility of the element. If\nthe element is not visible, a user cannot interact with it. Exceptions\nwill be raised with the exact details (e.g. if it was because a parent\ncould not be located, the exception will state this).\n\nSets of Elements\n----------------\n\nSometimes you are intentionally referring to a group of similar\nelements, like rows of a particular type. You can’t use a\n``pom.Element`` for this because they require *uniquely* finding an\nelement. In this case, you can use ``pom.ElementCollection``.\n\nRich Visibility\n---------------\n\nTo-do.\n\nUsing Locators Provided by Third-Party Plugins\n----------------------------------------------\n\nIn certain projects, alternative locator methods may be available that\nare more deterministic of exact elements.\n\nA first-party example of this, ``e2e.pom.extjs``, provides locators for\npages built with ExtJS/Sencha.\n\nThis extensibility has a few drawbacks to be aware of:\n\n-  The generic ``by(...)`` must be used instead of something like\n   ``by_css(...)``\n-  Many setups will fail to type-check or auto-complete this correctly.\n\nUsing it is very easy though! Just ensure it is installed, then use the\nprovided ``Locator`` class directly in the ``by()`` construction.\n\n.. code:: py\n\n   from e2e import pom\n   from e2e.pom import extjs\n\n   class ServicePage(pom.Page):\n       alert_popup = pom.Element(\"Alert\").by(extjs.Locator('panel[title=Alert]'))\n\nDeveloping Locator Extensions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPlease use ``e2e.pom.extjs`` as an implementation guide.\n\nThe following are recommended:\n\n-  The extension locator class should be called ``Locator`` where\n   possible.\n-  ``find_within`` is the only method needing implementation. It will be\n   passed *either* a ``WebDriver`` or a ``WebElement``. For the\n   ``WebElement``, you *must* assure that anything returned by your\n   Locator is within the given ``WebElement``.\n-  Don’t forget to register the entrypoint!\n\nPytest Hooks & Fixtures (BETA)\n------------------------------\n\n*Note:* This feature is under development and *will* change. Feedback is\nmuch appreciated!\n\nA information-providing fixture is provided for dumping info useful in\ntest failure analysis.\n\nYou must register the drivers you use with this fixture. We recognize\nusers will have their own ways of managing drivers, so this is the best\nway currently.\n\n.. code:: py\n\n   def test_my_thing(e2e_pom_dumper: pom.fixtures.DumperFixture):\n       my_driver = ...  # However you get this\n       e2e_pom_dumper.register_driver(my_driver)\n       # Now you can use the driver!\n\nAfter that, the following features are provided:\n\n-  On test failure, two DOMs are dumped to HTML files:\n\n   -  The current frame/iframe at the time of failure (if not the root\n      frame)\n   -  The root frame\n\n-  A screenshot is taken at the outermost/root frame\n\nPerformance Considerations\n--------------------------\n\nCertain features like Collections as parents can result in a lot of\nSelenium requests being issued. If you test against a busy Selenium\nGrid, this can definitely slow things down!\n\nI do not normally recommend the below workarounds (because they bypass\nsome significant benefits of the framwork), but you may find them\nnecessary in your case.\n\n1. Avoid a ``pom.Collection`` parent if it represents many elements\n   (e.g. rows in a large table). Every found element for the collection\n   is searched for the next child.\n2. Reduce POM depth where possible. Since each child causes a Selenium\n   find request on interaction, reducing the size of that parentage can\n   speed things up.\n\nFor the first case, this can be easy to work around with a dynamic model\nif you are targeting a particular item.\n\n.. code:: py\n\n\n   class MyTable(pom.Container):\n\n       rows = pom.Collection('Rows').by_css('tr')\n\n       def row_by_title(self, title: str):\n           label = f'Row by title [{title}]'\n           xpath = f'.//td[text()=\"{title}]/ancestor::tr\"'\n           # Do this IF Selenium performance isn't critical to you (most cases)\n           return pom.Element(label).by_xpath(xpath, parent=rows)\n           # Do this IF and ONLY IF Selenium performance is very important to you\n           return pom.Element(label).by_xpath(xpath)\n\nNote how ``rows`` is on the model directly, but also used as a parent\noverride in the method. However, skipping ``rows`` as a parent means we\ncan forego some more detailed information on failure while making less\nSelenium calls.\n\nMaking Richer Models\n--------------------\n\nGeneric type information can be passed regarding the type of located\nelements.\n\nThis is especially useful for ``pom.ElementCollection``\\ s. For example,\nyou may want to have an ``icon`` property modelled on each dropdown item\nreturned from a collection. This is normally modelled by a Findable\ncomponent (e.g. ``pom.Container`` or ``pom.Element``), but these cannot\nbe used for *found* elements (those returned by\n``pom.ElementCollection.get()``). Enter, generics.\n\nOn construction of *any* findable POM type, you can specify the concrete\ntype returned by ``findable.get()`` or acted on via operations like\n``findable.click()``. By default, this is a\n``pom.dom.ElementReference``, but you may extend it to provide more\nfunctionality.\n\n# TODO: assert Reference parents actually work!\n\n.. code:: py\n\n   class Dropdown(pom.Container):\n\n       class IconItem(pom.dom.ElementReference):\n           icon = pom.Element(\"Icon\").by_css(\".option-icon\")\n\n       items = pom.ElementCollection(\"Dropdown items\", IconItem).by_css(\"option\")\n\n   first_item = ...dropdown.items.get()[0]\n   assert 'gear-icon' in first_item.icon.get_attribute('class')\n\nThe type of ``items`` is now a ``pom.ElementCollection<IconItem>``. If\nit was not specified, it would be a\n``pom.ElementCollection<dom.ElementReference>``.\n\nThis works because while an ElementReference is not “Findable”, it *is*\n“Parentable”. That is, it can be a parent, and thus contain other\nmodelled children.\n\nIn the future, a pom.HybridElement may exist that can be used to\nrepresent these items both as a Findable and a Found object to avoid\ncode duplication.\n\nBasically, a rich interface is what you write.\n\n\nChangelog for e2e.pom\n=====================\n\n0.1.8 (2023-01-04)\n------------------\n\n- Remove deprecated _find_within that was causes static analysis issues\n- Added wait methods from ElementReferences\n\n\n0.1.7 (2022-09-20)\n------------------\n\n- Allow ElementCollection to be a direct parent\n\n\n0.1.5 (2022-09-20)\n------------------\n\n- Better error reporting for issues while finding\n- Added DOM presence wait methods\n\n\n0.1.4 (2022-09-12)\n------------------\n\n- [Issue 2] Fix ElementReference naming and parent chain for logging\n\n\n0.1.3 (2022-08-24)\n------------------\n\n- Fix: Missing import\n\n\n0.1.2 (2022-08-22)\n------------------\n\n- Type-hint fixes at the module-level, and a couple method signature fixes\n- New way to wait for page transitions: `pom.Page.expect_transition`\n\n\n0.1.1 (2022-06-26)\n------------------\n\n- Packaging and requirements fixes\n- Added some left-behind critical missing functions!\n- Fixed typos on exception names\n\n\n0.1.0 (2022-05-09)\n------------------\n\n- Exported modelling core to e2e.common, imported and used here\n- Fixed some type-hints based on updated mypy versions\n- Fixed some issues mypy had detecting types in the package at all\n- Updated tags to support Python 3.9, 3.10\n\n\n0.0.1 (11-19-2020)\n------------------\n\n- Initial release! Elements, Collections, IFrames, and Pages.\n\nCopyright 2019-2022 Nicholas Kroeker\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nickroeker/e2e.pom",
    "keywords": "e2e,testing,framework,model,selenium,webdriver,pom,page,object",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "e2e.pom",
    "package_url": "https://pypi.org/project/e2e.pom/",
    "platform": null,
    "project_url": "https://pypi.org/project/e2e.pom/",
    "project_urls": {
      "Homepage": "https://github.com/nickroeker/e2e.pom"
    },
    "release_url": "https://pypi.org/project/e2e.pom/0.1.8/",
    "requires_dist": [
      "selenium (>=3.0.0)",
      "e2e.common",
      "typing-extensions",
      "waiter",
      "pep8-naming ; extra == 'dev'",
      "pylint ; extra == 'dev'",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "setuptools (>=40.6.0) ; extra == 'dev'",
      "wheel ; extra == 'dev'",
      "zest.releaser[recommended] ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Human-friendly rich class-based modeling for the Page Object Model pattern",
    "version": "0.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16306182,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f71ee11880525f66c5fad4f32cc2097eaff6cde65e47cf23485d5e029735c7c",
          "md5": "2607d440000efd07ba6bae9cc17bc647",
          "sha256": "94a5586d4a53249d0a3f75650e08fd0c3fbc6a0e4bb5a16acdc5a979f8fbdae6"
        },
        "downloads": -1,
        "filename": "e2e.pom-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2607d440000efd07ba6bae9cc17bc647",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15571,
        "upload_time": "2022-05-10T06:53:09",
        "upload_time_iso_8601": "2022-05-10T06:53:09.068073Z",
        "url": "https://files.pythonhosted.org/packages/3f/71/ee11880525f66c5fad4f32cc2097eaff6cde65e47cf23485d5e029735c7c/e2e.pom-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "524eb3d9e0266657a6bca12460a6f1a88cb3da4c4b9cd22bccb06491f5762749",
          "md5": "7072c0c11472fac0d42f57fce6a3b698",
          "sha256": "2adb2e16165b0e2ef25b2fef209b5837258c896f19ef58bef9505f0c49d4b778"
        },
        "downloads": -1,
        "filename": "e2e.pom-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7072c0c11472fac0d42f57fce6a3b698",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15864,
        "upload_time": "2022-06-27T02:30:28",
        "upload_time_iso_8601": "2022-06-27T02:30:28.931710Z",
        "url": "https://files.pythonhosted.org/packages/52/4e/b3d9e0266657a6bca12460a6f1a88cb3da4c4b9cd22bccb06491f5762749/e2e.pom-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "864881308ab4436fa117f6820373dccd5ef4e9fcc2f51f3aa05cb002ad69178e",
          "md5": "feacf1fe447920f5c675ef203fb81d42",
          "sha256": "e0401abf92bc4ad29a9e27af1f6182d3a58fc979c8c4d61691d1a88668af0053"
        },
        "downloads": -1,
        "filename": "e2e.pom-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "feacf1fe447920f5c675ef203fb81d42",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16591,
        "upload_time": "2022-08-23T00:10:42",
        "upload_time_iso_8601": "2022-08-23T00:10:42.970650Z",
        "url": "https://files.pythonhosted.org/packages/86/48/81308ab4436fa117f6820373dccd5ef4e9fcc2f51f3aa05cb002ad69178e/e2e.pom-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d87e0d9343821ed3841928cd1758eb0cebfe9f87bc3e02c9777e48d5f0d9d588",
          "md5": "571cb9d8c26e68686e6e5fc0e58df12b",
          "sha256": "5c07f8fb378409113c0f25c5271e3654b5db6bd87b1bc1534ca994872a379ee7"
        },
        "downloads": -1,
        "filename": "e2e.pom-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "571cb9d8c26e68686e6e5fc0e58df12b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16609,
        "upload_time": "2022-08-24T18:47:11",
        "upload_time_iso_8601": "2022-08-24T18:47:11.890176Z",
        "url": "https://files.pythonhosted.org/packages/d8/7e/0d9343821ed3841928cd1758eb0cebfe9f87bc3e02c9777e48d5f0d9d588/e2e.pom-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "523a05f0b5f099560462cc7a13817de571fc484a3f3f1938f1944ccdaa2c50a6",
          "md5": "c4c87cb4f17ab43146dfc192708ce23d",
          "sha256": "faab481d07ffedb239e117aaff834cf8352266557510a9e45f9d8404b778305f"
        },
        "downloads": -1,
        "filename": "e2e.pom-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4c87cb4f17ab43146dfc192708ce23d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16844,
        "upload_time": "2022-09-13T01:51:04",
        "upload_time_iso_8601": "2022-09-13T01:51:04.319670Z",
        "url": "https://files.pythonhosted.org/packages/52/3a/05f0b5f099560462cc7a13817de571fc484a3f3f1938f1944ccdaa2c50a6/e2e.pom-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bacb0fe07d54d11fe2db9e804c38d48ce90c1de01bc01749b01248c56535aea",
          "md5": "dceb48baef4bda33a867433d751f53c5",
          "sha256": "7535c914cb8f8bda904899d7f26e3eb8ed8b97f2d362f80a7ba2272bf3e5cdf4"
        },
        "downloads": -1,
        "filename": "e2e.pom-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dceb48baef4bda33a867433d751f53c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16970,
        "upload_time": "2022-09-20T21:32:34",
        "upload_time_iso_8601": "2022-09-20T21:32:34.851463Z",
        "url": "https://files.pythonhosted.org/packages/5b/ac/b0fe07d54d11fe2db9e804c38d48ce90c1de01bc01749b01248c56535aea/e2e.pom-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc98df1b558eefd46239c2a7badbf02353cc363ab0316deb777db423aa7c3202",
          "md5": "2beb0b9e33d0f775586342a043c4708a",
          "sha256": "c747a961837915c7a2b80b50ec1bfdfd7610599d31d3226be5e2e975924de69e"
        },
        "downloads": -1,
        "filename": "e2e.pom-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2beb0b9e33d0f775586342a043c4708a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16994,
        "upload_time": "2022-09-21T00:32:05",
        "upload_time_iso_8601": "2022-09-21T00:32:05.218880Z",
        "url": "https://files.pythonhosted.org/packages/fc/98/df1b558eefd46239c2a7badbf02353cc363ab0316deb777db423aa7c3202/e2e.pom-0.1.6-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Bug: ElementCollections as parents"
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "467ebd624b2e16205e1cde8d51e375e8962eeb6c1ce22e52eb212d696c840844",
          "md5": "450e748af536af6c1d9b1e73dea1df32",
          "sha256": "3d4b3fc048e141d9a08fcce599ca4456e062f7a5fd7a521ecc7dbcb1d370f2c5"
        },
        "downloads": -1,
        "filename": "e2e.pom-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "450e748af536af6c1d9b1e73dea1df32",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16993,
        "upload_time": "2022-09-21T00:37:27",
        "upload_time_iso_8601": "2022-09-21T00:37:27.101068Z",
        "url": "https://files.pythonhosted.org/packages/46/7e/bd624b2e16205e1cde8d51e375e8962eeb6c1ce22e52eb212d696c840844/e2e.pom-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce7cdfbcbf0a74d020b1dc2235f7c1930284e46648459d3b010de19d295059a2",
          "md5": "623c4517bfca10851d22bd10d3f29bac",
          "sha256": "36d1e0c511aa1460e401d9c4d30e94d3e43e118107f0f15e549630bd19ba8f46"
        },
        "downloads": -1,
        "filename": "e2e.pom-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "623c4517bfca10851d22bd10d3f29bac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17027,
        "upload_time": "2023-01-04T20:00:34",
        "upload_time_iso_8601": "2023-01-04T20:00:34.123722Z",
        "url": "https://files.pythonhosted.org/packages/ce/7c/dfbcbf0a74d020b1dc2235f7c1930284e46648459d3b010de19d295059a2/e2e.pom-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce7cdfbcbf0a74d020b1dc2235f7c1930284e46648459d3b010de19d295059a2",
        "md5": "623c4517bfca10851d22bd10d3f29bac",
        "sha256": "36d1e0c511aa1460e401d9c4d30e94d3e43e118107f0f15e549630bd19ba8f46"
      },
      "downloads": -1,
      "filename": "e2e.pom-0.1.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "623c4517bfca10851d22bd10d3f29bac",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17027,
      "upload_time": "2023-01-04T20:00:34",
      "upload_time_iso_8601": "2023-01-04T20:00:34.123722Z",
      "url": "https://files.pythonhosted.org/packages/ce/7c/dfbcbf0a74d020b1dc2235f7c1930284e46648459d3b010de19d295059a2/e2e.pom-0.1.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}