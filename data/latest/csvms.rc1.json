{
  "info": {
    "author": "Didone",
    "author_email": "tiago.didone@compasso.com.br",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# **C**omma-**S**eparated **V**alues **M**anagement **S**ystem\n\n\n[![PyPI](https://img.shields.io/pypi/v/csvms)](https://pypi.org/project/csvms/) \n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/csvms) \n![GitHub](https://img.shields.io/github/license/Didone/csvms)\n![GitHub Workflow Status](https://img.shields.io/github/workflow/status/Didone/csvms/Python%20package)\n\nPython module to manage [CSV](https://en.wikipedia.org/wiki/Comma-separated_values) data like a [DBMS](https://en.wikipedia.org/wiki/Database#Database_management_system) application with educational purposes\n\n![logo](https://raw.githubusercontent.com/Didone/csvms/main/img/logo.png)\n\n## Installation\n\n```bash\npip install csvms\n```\n\n## Usage\n\nThis is an simple example of use:\n\n```python\nfrom csvms.table import Table\n# Create table\nA = Table(\n    name=\"A\",\n    columns={\"c1\":int,\"c2\":str,\"c3\":float},\n    data=[(1,\"Hello\",0.1),(2,\"World\",1.0),])\n# Insert one row\nA.append(3,\"Some\",0.8)\n# Create a new table 'B' with extended 'A' result of (100 * c3) called c4, and then \n# select rows where c4 are greater then 50\nB = A.Π({'mul':[{'literal':100},'c3']},\"c4\").σ({\"gt\":['c4',50]})\n# Project columns c1, c2 and c4 and print table\nprint(B.π(['c1','c2','c4']))\n```\n\nthe expected result will be like this\n\n```log\n TABLE: default.(((AΠ)π)σ)\n +---+-----+-----+\n |c1 |c2   |c4   |\n +---+-----+-----+\n0|  2|World|100.0|\n1|  3| Some| 80.0|\n +---+-----+-----+\n```\n\n### Table\n\nThe `Table` object represents a CSV data file.\n\nYou can create a **sample** table like\n\n```python\nfrom csvms.table import Table\ntbl = Table(\n    name=\"sample\",\n    columns={\n        \"c1\":int,\n        \"c2\":str,\n        \"c3\":float\n    },\n    data=[\n        (1,\"Hello\",0.1),\n        (2,\"World\",1.0),\n    ]\n)\n```\n\nWithout spefify a database on **name** this table will be created under a default directory (`$CSVMS_DEFAULT_DB`). The **columns** is a dictionary composed by the name and type using [python primitive data types](https://www.w3schools.com/python/python_datatypes.asp) and the **data** need to be a list of tuples\n\nUsing `print` you can they see the object as a table representation\n\n```python\n>>> print(tbl)\n   TABLE: default.sample\n   +---+-----+---+\n   |c1 |c2   |c3 |\n   +---+-----+---+\n  0|  1|Hello|0.1|\n  1|  2|World|1.0|\n   +---+-----+---+\n```\n\nthe `save` function will write all data in a **CSV** format based on the table `location` property\n\n```python\ntbl.save()\n```\n\n```bash\ncat data/default/sample.csv\n1;Hello;0.1\n2;World;1.0\n```\n\n> For more informatios use `help(Table)`\n\n#### Data access\n\nIt's possible to access a row by your **index** value, like a simple python tuple\n\n```python\n>>> tbl[1]\n{'c1': 2, 'c2': 'World', 'c3': 1.0}\n```\n\nThe row will be return as an **dictionary**, so, with the column name (after the index) you can access the value associated\n\n```python\n>>> tbl[1][\"c2\"]\n'World'\n```\n\nIt's also possible iterate into all rows using a `for` loop\n\n```python\n>>> for row in tbl:\n...     print(row)\n... \n(1, 'Hello', 0.1)\n(2, 'World', 1.0)\n```\n\n#### Data manipulation\n\nYou can add a new row using the `append` function\n\n```python\n>>> tbl.append(3, \"Some\", 0)\n>>> print(tbl)\n   TABLE: default.sample\n   +---+-----+---+\n   |c1 |c2   |c3 |\n   +---+-----+---+\n  0|  1|Hello|0.1|\n  1|  2|World|1.0|\n  2|  3| Some|0.0|\n   +---+-----+---+\n```\n\nUpdate a specific row by your **index**\n\n```python\n>>> tbl[0] = (4, \"Value\", 3.3)\n>>> print(tbl)\n   TABLE: default.sample\n   +---+-----+---+\n   |c1 |c2   |c3 |\n   +---+-----+---+\n  0|  4|Value|3.3|\n  1|  2|World|1.0|\n  2|  3| Some|0.0|\n   +---+-----+---+\n```\n\nAnd also remove a row by the **index**\n\n```python\n>>> del tbl[1]\n>>> print(tbl)\n   TABLE: default.sample\n   +---+-----+---+\n   |c1 |c2   |c3 |\n   +---+-----+---+\n  0|  4|Value|3.3|\n  1|  3| Some|0.0|\n   +---+-----+---+\n```\n\n#### Relational algebra\n\nThe main purpose of the relational algebra is to define operators that transform one or more input relations to an output relation. Given that these operators accept relations as input and produce relations as output, they can be combined and used to express potentially complex queries that transform potentially many input relations (whose data are stored in the database) into a single output relation (the query results).\n\nThis are the current operations supported:\n\n|Simbolo|Oprador |Operação |Sintaxe|\n|---|--------|---------|-------|\n|**∪**|+|Union|A + B|\n|**∩**|%|Intersection|A % B|\n|**-**|-|Difference|A – B|\n|**×**|*|Product|A * B|\n|**π**|π|Project|A.π(`<attribute list>`)|\n|**σ**|σ|Select|A.σ([`<logic functions>`])|\n|**ρ**|ρ|Rename|A.ρ(`name`)|\n|**Π**|Π|Extend|A.Π(`<arithmetic functions>`)|\n|**⋈**|ᐅᐊ|Join|A.ᐅᐊ( B, `<logic functions>` )|\n\n### Database\n\nThis object represents a physical location on the file system with a set of [tables](#table)\n\n```python\nfrom csvms.schema import Database\ndb = Database(\"dbname\")\n```\n\nThis will create a new directory, if not exists, inside `$CSVMS_FILE_DIR` path\nIn most cases will not be necessary explicitly create this object because the Database is implicit created based on the [Table](#table) name using the notation `database.table_name`\n\n> For more informatios use `help(Database)`\n\n### Catalog\n\nWhen you instantiate an object the Catalog objet will save the [table](#table) definitions for future queries and save in [json format](https://www.w3schools.com/whatis/whatis_json.asp) on root directory.\n\n```python\nfrom csvms.catalog import Catalog\ncat = Catalog('file/system/location/path')\n```\n\nIn the path used to initialize the catalog contains the `$CSVMS CATALOG` *json* file with all table definitions\n\n```json\n{\n    \"default.sample\": {\n        \"name\": \"default.sample\",\n        \"columns\": {\n            \"c1\": \"integer\",\n            \"c2\": \"text\",\n            \"c3\": \"float\"\n        }\n    }\n}\n```\n\n**Important**: You don't need to explicit create the catalog. That will be automatic created when you initiate any table\n\n> For more informatios use `help(Catalog)`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://didone.github.io/csvms/",
    "keywords": "bootcamp,csv,dbms,database,relational-algebra",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "csvms",
    "package_url": "https://pypi.org/project/csvms/",
    "platform": null,
    "project_url": "https://pypi.org/project/csvms/",
    "project_urls": {
      "Homepage": "https://didone.github.io/csvms/",
      "Repository": "https://github.com/Didone/csvms.git"
    },
    "release_url": "https://pypi.org/project/csvms/0.2.14/",
    "requires_dist": [
      "ipykernel (>=6.15.0,<7.0.0); extra == \"bootcamp\"",
      "mo-sql-parsing (>=8.185.22160,<9.0.0); extra == \"bootcamp\"",
      "docopt (>=0.6.2,<0.7.0); extra == \"bootcamp\""
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Comma-separated values management system",
    "version": "0.2.14",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14470024,
  "releases": {
    "0.2.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "158e4961c41f5cd3c4c3f2a48f3a6506705a034fd091cf8c14ae189e0c89c6ef",
          "md5": "07331c3e4f01ab484a2ef0b984804dbf",
          "sha256": "c1f3dbc618a5baa929c4962b1bd899db7878693cb0803b1a9e458edb572f625c"
        },
        "downloads": -1,
        "filename": "csvms-0.2.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "07331c3e4f01ab484a2ef0b984804dbf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 15685,
        "upload_time": "2022-07-18T13:45:52",
        "upload_time_iso_8601": "2022-07-18T13:45:52.371392Z",
        "url": "https://files.pythonhosted.org/packages/15/8e/4961c41f5cd3c4c3f2a48f3a6506705a034fd091cf8c14ae189e0c89c6ef/csvms-0.2.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50579f98535d302066a841bdaa95db0fbf871a551ab3147a9e7b08e7cd062d9b",
          "md5": "921e88c7ea2d0c78b8ae620eedfe4ce8",
          "sha256": "4cf1da83a769a0f16e0ed2f5a5ba6d5018a4b504a8324c3e18f25322c5b67b6c"
        },
        "downloads": -1,
        "filename": "csvms-0.2.14.tar.gz",
        "has_sig": false,
        "md5_digest": "921e88c7ea2d0c78b8ae620eedfe4ce8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 16748,
        "upload_time": "2022-07-18T13:45:53",
        "upload_time_iso_8601": "2022-07-18T13:45:53.668511Z",
        "url": "https://files.pythonhosted.org/packages/50/57/9f98535d302066a841bdaa95db0fbf871a551ab3147a9e7b08e7cd062d9b/csvms-0.2.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "158e4961c41f5cd3c4c3f2a48f3a6506705a034fd091cf8c14ae189e0c89c6ef",
        "md5": "07331c3e4f01ab484a2ef0b984804dbf",
        "sha256": "c1f3dbc618a5baa929c4962b1bd899db7878693cb0803b1a9e458edb572f625c"
      },
      "downloads": -1,
      "filename": "csvms-0.2.14-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "07331c3e4f01ab484a2ef0b984804dbf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 15685,
      "upload_time": "2022-07-18T13:45:52",
      "upload_time_iso_8601": "2022-07-18T13:45:52.371392Z",
      "url": "https://files.pythonhosted.org/packages/15/8e/4961c41f5cd3c4c3f2a48f3a6506705a034fd091cf8c14ae189e0c89c6ef/csvms-0.2.14-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50579f98535d302066a841bdaa95db0fbf871a551ab3147a9e7b08e7cd062d9b",
        "md5": "921e88c7ea2d0c78b8ae620eedfe4ce8",
        "sha256": "4cf1da83a769a0f16e0ed2f5a5ba6d5018a4b504a8324c3e18f25322c5b67b6c"
      },
      "downloads": -1,
      "filename": "csvms-0.2.14.tar.gz",
      "has_sig": false,
      "md5_digest": "921e88c7ea2d0c78b8ae620eedfe4ce8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 16748,
      "upload_time": "2022-07-18T13:45:53",
      "upload_time_iso_8601": "2022-07-18T13:45:53.668511Z",
      "url": "https://files.pythonhosted.org/packages/50/57/9f98535d302066a841bdaa95db0fbf871a551ab3147a9e7b08e7cd062d9b/csvms-0.2.14.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}