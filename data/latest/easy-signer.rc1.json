{
  "info": {
    "author": "Paaksing",
    "author_email": "paaksingtech@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Easy Signer\n\nSimple package for cryptographic signing. Features:\n- String and Object signing.\n- Support for all `hashlib` algorithms.\n- Timestamp and ephemeral (expirable) signers.\n- Helper functions for string and key generation.\n\nThis package uses portions of Django's `django.core.signing` source. Notable differences:\n- Does not use django's secret key.\n- New signer `EphemeralSigner` for ttl signing.\n- Added support of object signing for `TimestampSigner`.\n- Uses `orjson` for faster serialization and removing byte encoding.\n\nSigner class constructors accepts these arguments:\n- `key`: The key used for signing and securing the signed data, it is vital you keep this secure, or attackers could use it to generate their own signed values. If no key is provided, uses the library default `get_default_key()`.\n- `sep`: Separator for the signed data and the signature. Defaults to `:`.\n- `salt`: Extra value that will seed the signing hash function with both the salt and the key, typically used for putting different signatures into different namespaces. Optional.\n- `algorithm`: The hashing algorithm used for the signing, currently supporting all `hashlib` algorithms. Defaults to `get_default_algorithm()`.\n\nSigners may raise these exceptions:\n\n- `BadSignature`: Signature is invalid or malformed.\n- `SignatureExpired`: Signature has expired or older than max age.\n- `InvalidAlgorithm`: Algorithm is invalid or cannot be found in `hashlib`.\n\n## Configuration\n\nLibrary import:\n```python\nimport easy_signer\n```\n\nLibrary defaults (optional) can be set using:\n\n```python\neasy_signer.set_default_key(\"YOUR_KEY\")\neasy_signer.set_default_algorithm(\"sha256\") # this is the default already\n```\n\nIf you don't have a key, you can get one by running this script:\n\n```python\nprint(easy_signer.get_random_key())\n```\n\n## Using Signer\n\nBasic signer.\n\n```python\n# Valid instantiations:\nsigner = easy_signer.Signer() # if default key is set.\nsigner = easy_signer.Signer(key=\"YOUR_KEY\") # provide key at runtime.\nsigner = easy_signer.Signer(salt=\"YOUR_SALT\") # provide a salt.\nsigner = easy_signer.Signer(algorithm=\"sha...\") # use a different algorithm.\n```\n\nTo sign a string:\n```python\nsigned_value = signer.sign(\"YOUR_STRING\")\n```\n\nTo sign an object:\n\n```python\nsigned_object = signer.sign_object({\"key\": \"value\", \"numbers\": [0, 1, 2]})\n```\n\nTo unsign a string:\n\n```python\nsigner.unsign(signed_value)\n```\n\nTo unsign an object:\n\n```python\nsigner.unsign_object(signed_object)\n```\n\n## Using TimestampSigner\n\nTimestamp signer. The current time when signing is added to the signature, can validate the signing age when unsigning.\n\n```python\n# Valid instantiations:\nsigner = easy_signer.TimestampSigner() # if default key is set.\nsigner = easy_signer.TimestampSigner(key=\"YOUR_KEY\") # provide key at runtime.\nsigner = easy_signer.TimestampSigner(salt=\"YOUR_SALT\") # provide a salt.\nsigner = easy_signer.TimestampSigner(algorithm=\"sha...\") # use a different algorithm.\n```\n\nTo sign a string:\n```python\nsigned_value = signer.sign(\"YOUR_STRING\")\n```\n\nTo sign an object:\n\n```python\nsigned_object = signer.sign_object({\"key\": \"value\", \"numbers\": [0, 1, 2]})\n```\n\nTo unsign a string:\n\n```python\nmax_age = 600 # 10 minutes\nsigner.unsign(signed_value, max_age)\n```\n\nTo unsign an object:\n\n```python\nmax_age = 600 # 10 minutes\nsigner.unsign_object(signed_object, max_age)\n```\n\n## Using EphemeralSigner\n\nEphemeral signer. The current time of signing plus a TTL is added to the signature, when unsigning it validates that the timestamp is still in the future (not expired).\n\n```python\n# Valid instantiations:\nsigner = easy_signer.EphemeralSigner() # if default key is set.\nsigner = easy_signer.EphemeralSigner(key=\"YOUR_KEY\") # provide key at runtime.\nsigner = easy_signer.EphemeralSigner(salt=\"YOUR_SALT\") # provide a salt.\nsigner = easy_signer.EphemeralSigner(algorithm=\"sha...\") # use a different algorithm.\n```\n\nTo sign a string:\n```python\nttl = 600 # 10 minutes\nsigned_value = signer.sign(\"YOUR_STRING\", ttl)\n```\n\nTo sign an object:\n\n```python\nttl = 600 # 10 minutes\nsigned_object = signer.sign_object({\"key\": \"value\", \"numbers\": [0, 1, 2]}, ttl)\n```\n\nTo unsign a string:\n\n```python\nsigner.unsign(signed_value)\n```\n\nTo unsign an object:\n\n```python\nsigner.unsign_object(signed_object)\n```\n\n## Benchmark\n\nUsing `sha256` algorithm, with `r=5000` and `n=10`. Benchmark script can be reviewed on `benchmark.py` or modified for local benchmarking.\n\nClass                     | Mean                      | Median                    | Min                       | Max\n------------------------- | ------------------------- | ------------------------- | ------------------------- | -------------------------\nSigner (~256b)                   |   0.00022985016200000011s |   0.00022285999999996917s |   0.00021266000000004227s |    0.0012860500000000386s\nSigner Object (~768b)            |    0.0005829096359999969s |    0.0005747900000001138s |    0.0005569999999998742s |    0.0010333499999997998s\nTimestamp Signer (~256b)         |   0.00024130014600000108s |   0.00023708000000013384s |   0.00022681000000019936s |    0.0006035599999997032s\nTimestamp Signer Object (~768b)  |    0.0005838345579999955s |    0.0005750949999999477s |    0.0005500100000006114s |    0.0010899600000001896s\nEphemeral Signer (~256b)         |   0.00024229529599998812s |   0.00023735000000044693s |   0.00022601000000008754s |     0.000627810000000295s\nEphemeral Signer Object (~768b)  |    0.0005835461620000055s |    0.0005760549999997977s |      0.00055435000000017s |    0.0010262900000000742s\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/paaksing/easy_signer",
    "keywords": "signing,cryptographic,security",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "easy-signer",
    "package_url": "https://pypi.org/project/easy-signer/",
    "platform": null,
    "project_url": "https://pypi.org/project/easy-signer/",
    "project_urls": {
      "Homepage": "https://github.com/paaksing/easy_signer"
    },
    "release_url": "https://pypi.org/project/easy-signer/0.1.0/",
    "requires_dist": [
      "orjson (>=3)"
    ],
    "requires_python": "",
    "summary": "Simple package for cryptographic signing",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15634916,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f917124c30a3a9660e3108db6910597e81a6be2fdbd3997572efb039d44c62e",
          "md5": "3d17784ee2baba43b748e53c1163ab6e",
          "sha256": "f011de9222ae03d829c4068c2167f6faadced1256d039787e2ba4f8451f0f824"
        },
        "downloads": -1,
        "filename": "easy_signer-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d17784ee2baba43b748e53c1163ab6e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10823,
        "upload_time": "2022-11-03T01:03:17",
        "upload_time_iso_8601": "2022-11-03T01:03:17.938536Z",
        "url": "https://files.pythonhosted.org/packages/3f/91/7124c30a3a9660e3108db6910597e81a6be2fdbd3997572efb039d44c62e/easy_signer-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f23f3e8c45229118d97f74fe17cd612a10031a2bb5495c5aea3c3200ad40a3a",
          "md5": "f6d73d3b0f033daf2d4480dea6f16d30",
          "sha256": "bdd281d4bbea9f75f96b69d836608d9840907dee17a807ec668718f3621d4d49"
        },
        "downloads": -1,
        "filename": "easy_signer-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f6d73d3b0f033daf2d4480dea6f16d30",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10799,
        "upload_time": "2022-11-03T01:03:19",
        "upload_time_iso_8601": "2022-11-03T01:03:19.823688Z",
        "url": "https://files.pythonhosted.org/packages/8f/23/f3e8c45229118d97f74fe17cd612a10031a2bb5495c5aea3c3200ad40a3a/easy_signer-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f917124c30a3a9660e3108db6910597e81a6be2fdbd3997572efb039d44c62e",
        "md5": "3d17784ee2baba43b748e53c1163ab6e",
        "sha256": "f011de9222ae03d829c4068c2167f6faadced1256d039787e2ba4f8451f0f824"
      },
      "downloads": -1,
      "filename": "easy_signer-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d17784ee2baba43b748e53c1163ab6e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10823,
      "upload_time": "2022-11-03T01:03:17",
      "upload_time_iso_8601": "2022-11-03T01:03:17.938536Z",
      "url": "https://files.pythonhosted.org/packages/3f/91/7124c30a3a9660e3108db6910597e81a6be2fdbd3997572efb039d44c62e/easy_signer-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f23f3e8c45229118d97f74fe17cd612a10031a2bb5495c5aea3c3200ad40a3a",
        "md5": "f6d73d3b0f033daf2d4480dea6f16d30",
        "sha256": "bdd281d4bbea9f75f96b69d836608d9840907dee17a807ec668718f3621d4d49"
      },
      "downloads": -1,
      "filename": "easy_signer-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f6d73d3b0f033daf2d4480dea6f16d30",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10799,
      "upload_time": "2022-11-03T01:03:19",
      "upload_time_iso_8601": "2022-11-03T01:03:19.823688Z",
      "url": "https://files.pythonhosted.org/packages/8f/23/f3e8c45229118d97f74fe17cd612a10031a2bb5495c5aea3c3200ad40a3a/easy_signer-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}