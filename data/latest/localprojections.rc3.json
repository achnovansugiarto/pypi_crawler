{
  "info": {
    "author": "",
    "author_email": "Jing Lian Suah <suahjinglian@bnm.gov.my>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# localprojections\nThis module implements the local projections models for single entity time series, and panel / longitudinal data settings, due to Jorda (2005), and based on codes available [here](https://sites.google.com/site/oscarjorda/home/local-projections).\n\n# Installation\n1. ```pip install localprojections```\n\n# Implementation\n## Panel Local Projections Model\n### Documentation\n```python\nlocalprojections.PanelLP(data, Y, response, horizon, lags, varcov, ci_width)\n```\n#### Parameters\ndata :  \n\tPandas MultiIndex dataframe with entity as the outer index, and time as the inner index.\n\nY :  \n\tList of column names in ```data``` to be used in the model estimation\n\nresponse :  \n\tList of column names in ```Y``` to be used as response variables when estimating the impulse response functions (IRFs)\n\nhorizon :  \n\tInteger indicating the estimation horizon of the IRFs\n\nlags :  \n\tInteger indicating the number of lags to be included in the model estimation\n\nvarcov :  \n\tVariance-covariance estimator to be used in estimating standard errors; refer to the [linearmodels package](https://bashtage.github.io/linearmodels/panel/panel/linearmodels.panel.model.PanelOLS.fit.html#linearmodels.panel.model.PanelOLS.fit).\n\nci_width :  \n\tFloat higher than 0 and less than 1, i.e., (0, 1), indicating the width of the confidence intervals of the IRFs; ```ci_width=0.95``` indicates a 95% confidence interval\n\n#### Output\nThis function returns a pandas dataframe of 6 columns: \n1. ```Shock``` indicates the shock variable\n2. ```Response``` indicates the response variable\n3. ```Horizon``` indicates the response horizon of the IRF\n4. ```Mean``` indicates the point estimate of the IRF\n5. ```LB``` indicates the lower bound of the confidence interval of the IRF\n6. ```LB``` indicates the upper bound of the confidence interval of the IRF\n\nFor instance, the estimates of the 6-period ahead IRF of y from a shock in x, can be found in the row with ```Shock=x```, ```Response=y```, and ```Horizon=6```\n\n### Example\n\n```python\nfrom statsmodels.datasets import grunfeld\nimport localprojections as lp\n\ndf = grunfeld.load_pandas().data # import the Grunfeld investment data set\ndf = df.set_index(['firm', 'year']) # set entity-year indices (as per requirements in bashtage's linearmodels)\n\nendog = ['invest', 'value', 'capital'] # cholesky ordering: invest --> value --> capital\nresponse = endog.copy() # estimate the responses of all variables to shocks from all variables\nirf_horizon = 8 # estimate IRFs up to 8 periods ahead\nopt_lags = 2 # include 2 lags in the local projections model\nopt_cov = 'robust' # HAC standard errors\nopt_ci = 0.95 # 95% confidence intervals\n\nirf = lp.PanelLP(data=df, # input dataframe\n                 Y=endog, # variables in the model\n                 response=response, # variables whose IRFs should be estimated\n                 horizon=irf_horizon, # estimation horizon of IRFs\n                 lags=opt_lags, # lags in the model\n                 varcov=opt_cov, # type of standard errors\n                 ci_width=opt_ci # width of confidence band\n                 )\nirfplot = lp.IRFPlot(irf=irf, # take output from the estimated model\n                     response=['invest'], # plot only response of invest ...\n                     shock=endog, # ... to shocks from all variables\n                     n_columns=2, # max 2 columns in the figure\n                     n_rows=2, # max 2 rows in the figure\n                     maintitle='Panel LP: IRFs of Investment', # self-defined title of the IRF plot\n                     show_fig=True, # display figure (from plotly)\n                     save_pic=False # don't save any figures on local drive\n                     )\n```\n\n## Single Entity Time Series Local Projections Model\n### Documentation\n```python\nlocalprojections.TimeSeriesLP(data, Y, response, horizon, lags, newey_lags, ci_width)\n```\n#### Parameters\ndata :  \n\tPandas dataframe\n\nY :  \n\tList of column names in ```data``` to be used in the model estimation\n\nresponse :  \n\tList of column names in ```Y``` to be used as response variables when estimating the impulse response functions (IRFs)\n\nhorizon :  \n\tInteger indicating the estimation horizon of the IRFs\n\nlags :  \n\tInteger indicating the number of lags to be included in the model estimation\n\nnewey_lags :  \n\tMaximum number of lags to be used when estimating the Newey-West standard errors\n\nci_width :  \n\tFloat higher than 0 and less than 1, i.e., (0, 1), indicating the width of the confidence intervals of the IRFs; ```ci_width=0.95``` indicates a 95% confidence interval\n\n#### Output\nThis function also returns a pandas dataframe of 6 columns: \n1. ```Shock``` indicates the shock variable\n2. ```Response``` indicates the response variable\n3. ```Horizon``` indicates the response horizon of the IRF\n4. ```Mean``` indicates the point estimate of the IRF\n5. ```LB``` indicates the lower bound of the confidence interval of the IRF\n6. ```LB``` indicates the upper bound of the confidence interval of the IRF\n\nFor instance, the estimates of the 6-period ahead IRF of y from a shock in x, can be found in the row with ```Shock=x```, ```Response=y```, and ```Horizon=6```\n\n### Example\n```python\nfrom statsmodels.datasets import grunfeld\nimport localprojections as lp\n\ndf = grunfeld.load_pandas().data # import the Grunfeld investment data set\ndf = df[df['firm'] == 'General Motors'] # keep only one entity (as an example of a single entity time series setting)\ndf = df.set_index(['year']) # set time variable as index\n\nendog = ['invest', 'value', 'capital'] # cholesky ordering: invest --> value --> capital\nresponse = endog.copy() # estimate the responses of all variables to shocks from all variables\nirf_horizon = 8 # estimate IRFs up to 8 periods ahead\nopt_lags = 2 # include 2 lags in the local projections model\nopt_cov = 'robust' # HAC standard errors\nopt_ci = 0.95 # 95% confidence intervals\n\n# Use TimeSeriesLP for the single entity case\nirf = lp.TimeSeriesLP(data=df, # input dataframe\n                      Y=endog, # variables in the model\n                      response=response, # variables whose IRFs should be estimated\n                      horizon=irf_horizon, # estimation horizon of IRFs\n                      lags=opt_lags, # lags in the model\n                      newey_lags=2, # maximum lags when estimating Newey-West standard errors\n                      ci_width=opt_ci # width of confidence band\n                      )\nirfplot = lp.IRFPlot(irf=irf, # take output from the estimated model\n                     response=['invest'], # plot only response of invest ...\n                     shock=endog, # ... to shocks from all variables\n                     n_columns=2, # max 2 columns in the figure\n                     n_rows=2, # max 2 rows in the figure\n                     maintitle='Single Entity Time Series LP: IRFs of Investment', # self-defined title of the IRF plot\n                     show_fig=True, # display figure (from plotly)\n                     save_pic=False # don't save any figures on local drive\n                     )\n\n```\n\n## Plotting Impulse Response Functions\n### Documentation\n```python\nlocalprojections.IRFPlot(irf, response, shock, n_columns, n_rows, maintitle, show_fig, save_pic, out_path, out_name)\n```\n#### Parameters\nirf :  \n\tOutput from ```PanelLP()```, or ```TimeSeriesLP()```\n\nresponse :  \n\tList of variables contained in ```irf```'s ```Response``` column whose IRFs is to be plotted \n\nshock :  \n\tList of variables contained in ```irf```'s ```Shock``` column whose IRFs is to be plotted \n\nn_columns :  \n\tInteger indicating the number of IRF figures per row in the overall figure\n\nn_rows :  \n\tInteger indicating the number of IRF figures per column in the overall figure\n\nmaintitle :  \n\tStrings to be used as the title of the overall figure; default is ```''Local Projections Model: Impulse Response Functions'```\n\nshow_fig :  \n\tBoolean indicating whether to render the overall figure\n\nsave_pic :  \n\tBoolean indicating whether to save the overall figure in the local directory; if ```True```, a ```html``` file and a ```png``` file will be saved\n\nout_path :  \n\tStrings indicating the directory at which the overall figure should be saved in; only used if ```save_pic``` is ```True```\n\nout_name :  \n\tStrings indicating the name of the file in which the overall figure should be saved as; only used if ```save_pic``` is ```True```, and default is ```IRFPlot```\n\n#### Output\nThis function returns a [plotly graph objects figure](https://plotly.com/python-api-reference/generated/plotly.graph_objects.Figure.html) with ```n_columns``` (columns) x ```n_rows``` (rows) subplots. Depending on arguments passed, the figure may be rendered during implementation and / or saved in the local directory.\n\n### Examples\nSee above.\n\n# Requirements\n## Python Packages\n- pandas>=1.4.3\n- numpy>=1.23.0\n- linearmodels>=4.27\n- plotly>=5.9.0\n- statsmodels>=0.13.2\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "Econometrics,Local Projections,Panel Data,Time Series",
    "license": "MIT License Copyright (c) 2022 Jing Lian Suah Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "localprojections",
    "package_url": "https://pypi.org/project/localprojections/",
    "platform": null,
    "project_url": "https://pypi.org/project/localprojections/",
    "project_urls": {
      "GitHub": "https://github.com/suahjl/localprojections/",
      "PyPI": "https://pypi.org/project/localprojections/"
    },
    "release_url": "https://pypi.org/project/localprojections/0.0.2/",
    "requires_dist": [
      "pandas (>=1.4.3)",
      "numpy (>=1.23.0)",
      "linearmodels (>=4.27)",
      "plotly (>=5.9.0)",
      "statsmodels (>=0.13.2)"
    ],
    "requires_python": ">=3.9",
    "summary": "This module implements the local projections models for single entity time series, and panel / longitudinal data settings, due to Jorda (2005).",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14726864,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50d7c10fe3a80f52a5822f9086382ed6f30b2f77006eac7ed91de7936634391a",
          "md5": "8103158a15254caa8fb2406dbe2b01a3",
          "sha256": "62147deb08402530e769fc8cc2fe015206c45d71f39de157b433e5b09d781dee"
        },
        "downloads": -1,
        "filename": "localprojections-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8103158a15254caa8fb2406dbe2b01a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 9378,
        "upload_time": "2022-07-08T07:30:15",
        "upload_time_iso_8601": "2022-07-08T07:30:15.568126Z",
        "url": "https://files.pythonhosted.org/packages/50/d7/c10fe3a80f52a5822f9086382ed6f30b2f77006eac7ed91de7936634391a/localprojections-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6e70af9a0322539b6920bea6d300ef2cdba4dea67f224a5745c5bd673ef4c95",
          "md5": "759f627299688f3e40188cdf1b59fd90",
          "sha256": "21f86b448df7d88151dd3c8cfa6c66ffa235338d2eb21ce045ff8bfcb3a3f652"
        },
        "downloads": -1,
        "filename": "localprojections-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "759f627299688f3e40188cdf1b59fd90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 10699,
        "upload_time": "2022-07-08T07:30:17",
        "upload_time_iso_8601": "2022-07-08T07:30:17.157380Z",
        "url": "https://files.pythonhosted.org/packages/a6/e7/0af9a0322539b6920bea6d300ef2cdba4dea67f224a5745c5bd673ef4c95/localprojections-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92c38e58fff30ad0f6b11c5c5c87a81cac0c5af437d909378a1f32e896b2e11a",
          "md5": "6f37884f4aed8381713e41c9fdab3b96",
          "sha256": "2b00876481882ea1433eb8e5cea937ab42402f254fc100b4fbd386a81059376a"
        },
        "downloads": -1,
        "filename": "localprojections-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f37884f4aed8381713e41c9fdab3b96",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 9266,
        "upload_time": "2022-08-11T04:15:42",
        "upload_time_iso_8601": "2022-08-11T04:15:42.368600Z",
        "url": "https://files.pythonhosted.org/packages/92/c3/8e58fff30ad0f6b11c5c5c87a81cac0c5af437d909378a1f32e896b2e11a/localprojections-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95cd3f920b2d3e234639a944d7c126e2ef3dbd0a180e4a7ca98a863d3dff93c7",
          "md5": "daba188191586ae05ab3653782510b2f",
          "sha256": "d8f52c66106a3bd7b9f3fbd1617379d3b10588456128fe6336663c12c6d40ef4"
        },
        "downloads": -1,
        "filename": "localprojections-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "daba188191586ae05ab3653782510b2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 8849,
        "upload_time": "2022-08-11T04:15:44",
        "upload_time_iso_8601": "2022-08-11T04:15:44.028920Z",
        "url": "https://files.pythonhosted.org/packages/95/cd/3f920b2d3e234639a944d7c126e2ef3dbd0a180e4a7ca98a863d3dff93c7/localprojections-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bb349871ca33fca5da53ed796034228eb643b6a1b8bbb44eca5d8a685526400",
          "md5": "20166685f21c7aab5b8c177e465d6085",
          "sha256": "260be5429da63b6bb843cdb6c7c7c0bb880b59c6304a23bafb2ada2254f641e3"
        },
        "downloads": -1,
        "filename": "localprojections-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20166685f21c7aab5b8c177e465d6085",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 9380,
        "upload_time": "2022-08-11T09:03:52",
        "upload_time_iso_8601": "2022-08-11T09:03:52.862270Z",
        "url": "https://files.pythonhosted.org/packages/5b/b3/49871ca33fca5da53ed796034228eb643b6a1b8bbb44eca5d8a685526400/localprojections-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "636a089bac52218a860bc9b9a37edbb58e2a6be70b9ca7caeb4b67a79035b21b",
          "md5": "28826a8e2993415835ec3036a21a0833",
          "sha256": "99cbd75372b1fe8befa5e90a0e6fff183a64a6c6e31be6bcf3e87905888aeaa5"
        },
        "downloads": -1,
        "filename": "localprojections-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "28826a8e2993415835ec3036a21a0833",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 10707,
        "upload_time": "2022-08-11T09:03:54",
        "upload_time_iso_8601": "2022-08-11T09:03:54.768224Z",
        "url": "https://files.pythonhosted.org/packages/63/6a/089bac52218a860bc9b9a37edbb58e2a6be70b9ca7caeb4b67a79035b21b/localprojections-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5bb349871ca33fca5da53ed796034228eb643b6a1b8bbb44eca5d8a685526400",
        "md5": "20166685f21c7aab5b8c177e465d6085",
        "sha256": "260be5429da63b6bb843cdb6c7c7c0bb880b59c6304a23bafb2ada2254f641e3"
      },
      "downloads": -1,
      "filename": "localprojections-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "20166685f21c7aab5b8c177e465d6085",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 9380,
      "upload_time": "2022-08-11T09:03:52",
      "upload_time_iso_8601": "2022-08-11T09:03:52.862270Z",
      "url": "https://files.pythonhosted.org/packages/5b/b3/49871ca33fca5da53ed796034228eb643b6a1b8bbb44eca5d8a685526400/localprojections-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "636a089bac52218a860bc9b9a37edbb58e2a6be70b9ca7caeb4b67a79035b21b",
        "md5": "28826a8e2993415835ec3036a21a0833",
        "sha256": "99cbd75372b1fe8befa5e90a0e6fff183a64a6c6e31be6bcf3e87905888aeaa5"
      },
      "downloads": -1,
      "filename": "localprojections-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "28826a8e2993415835ec3036a21a0833",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 10707,
      "upload_time": "2022-08-11T09:03:54",
      "upload_time_iso_8601": "2022-08-11T09:03:54.768224Z",
      "url": "https://files.pythonhosted.org/packages/63/6a/089bac52218a860bc9b9a37edbb58e2a6be70b9ca7caeb4b67a79035b21b/localprojections-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}