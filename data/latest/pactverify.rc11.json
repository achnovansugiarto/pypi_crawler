{
  "info": {
    "author": "liuhui",
    "author_email": "1318633361@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# 接口断言引入契约校验\n目录：  \n* 一.背景  \n* 二.校验原则  \n* 三.快速使用  \n  + 1、python类契约使用  \n  + 2、json契约使用\n  + 3、python类契约转json契约\n  + 4、根据响应结果自动生成json契约\n* 四.基本匹配规则\n  + 1、Matcher类 校验规则：值匹配\n  + 2、Like类 校验规则：类型匹配\n  + 3、EachLike类 校验规则：数组类型匹配\n  + 4、Term类校验规则：正则匹配\n  + 5、Enum类 校验规则：枚举匹配\n* 五.复杂数据结构匹配规则\n  + 1、{{}}格式\n  + 2、[[]]格式\n  + 3、{[]}格式\n* 六. 异常场景匹配\n  + 1、null匹配\n  + 2、{}匹配\n  + 3、json格式字符串匹配\n  + 4、key不存在匹配  \n  + 5、多类型匹配\n  + 6、非强制字段匹配  \n* 七.unittest+HTMLTestRunner+契约断言示例\n* 八.优点总结\n\n---\n## 一.背景\n公司前端吐槽后台接口有时会更改返回的数据结构，返回的字段名与字段类型与接口文档不一致，希望有一个快速检测接口返回数据的所有字段名与字段类型的方法  \n\n以下方数据为例，要校验data数组中dict结构中的字段名与字段类型，可以写脚本遍历数据，但是由于每个接口返回的数据结构可能不一致，可能需要针对每个接口做不同的逻辑，所以需要一个比较通用的校验方法\n```python\n{\n\t\"msg\": \"success\",\n\t\"code\": 0,\n\t\"data\": [{\n\t\t\t\"type_id\": 249,\n\t\t\t\"name\": \"王者荣耀\",\n\t\t\t\"order_index\": 1,\n\t\t\t\"status\": 1,\n\t\t\t\"subtitle\": \" \",\n\t\t\t\"game_name\": \"王者荣耀\"\n\t\t}, {\n\t\t\t\"type_id\": 250,\n\t\t\t\"name\": \"绝地求生\",\n\t\t\t\"order_index\": 2,\n\t\t\t\"status\": 1,\n\t\t\t\"subtitle\": \" \",\n\t\t\t\"game_name\": \"绝地求生\"\n\t\t}, {\n\t\t\t\"type_id\": 251,\n\t\t\t\"name\": \"刺激战场\",\n\t\t\t\"order_index\": 3,\n\t\t\t\"status\": 1,\n\t\t\t\"subtitle\": \" \",\n\t\t\t\"game_name\": \"刺激战场\"\n\t\t}\n\t]\n}\n\n```\n\n在研究了[契约测试](https://www.pact.net.cn/documentation/what_is_pact.html)后，抽取[pact-python](https://github.com/pact-foundation/pact-python)部分代码，实现：自定义接口返回数据格式(【契约定义】)-实际响应数据格式校验(【契约校验】)的功能\n\n备注：这里的【契约】等同于接口响应数据结构  \n\n-------------  \n## 二.校验原则\n\n>1.实际返回字段要**严格等于**或者**含契约定义字段**(根据不同匹配模式来确定)  \n>2.字段值可以值相等或类型相等  \n\n目标：对返回数据进行**全量(字段名-值/类型)** 校验   \n契约定义方式：支持python类契约和json契约\n-------------  \n\n## 三.基本使用 \n### 1.python类契约使用\n```python\nfrom pactverify.matchers import Matcher, Like, EachLike, Enum, Term, PactVerify\n\n# 定义契约格式\nexpect_format = Matcher({\n    'code': 0,  # code key存在,值相等,code==0\n    'msg': 'success',  # msg key存在,值相等,msg=='success'\n    # [{}]结构\n    'data': EachLike({\n        \"type_id\": 249,  # type_id key存在,值类型相等,type(type_id) == type(249)\n        \"name\": \"王者荣耀\",  # name key存在,值类型相等,type(name) == type(\"王者荣耀\")\n    }),\n    'type': Enum([11,22]),\n    'list': EachLike(11,minimum=2)\n})\n\n# 实际返回数据\nactual_data = {\n    \"msg\": \"success\",\n    \"code\": 1,\n    'type': 12,\n    \"data\": [{\n        # type_id类型不匹配\n        \"type_id\": '249',\n        \"name\": \"王者荣耀\"\n    }, {\n        # 缺少name\n        \"type_id\": 250,\n    }, {\n        # 比契约定义多index字段\n        \"type_id\": 251,\n        \"name\": \"刺激战场\",\n        \"index\": 111\n    }\n    ],\n    'list': [11]\n}\n# hard_mode默认为true,hard_mode = True时,实际返回key必须严格等于预期key;hard_mode = False时,实际返回key包含预期key即可\nmPactVerify = PactVerify(expect_format, hard_mode=True)\n# 校验实际返回数据\nmPactVerify.verify(actual_data)\n# 校验结果  False\nprint(mPactVerify.verify_result)\n''' 校验错误信息\n错误信息输出actual_key路径：root.data.0.name形式\nroot为根目录,dict类型拼接key,list类型拼接数组下标(从0开始)\n{   \n    # 实际key少于预期key错误\n\t'key_less_than_expect_error': ['root.data.1.name'],\n\t# 实际key多与预期key错误,只在hard_mode = True时才报该错误\n\t'key_more_than_expect_error': ['root.data.2.index'],\n\t# 值不匹配错误\n\t'value_not_match_error': [{\n\t\t\t'actual_key': 'root.code',\n\t\t\t'actual_value': 1,\n\t\t\t'expect_value': 0\n\t\t}\n\t],\n\t# 类型不匹配错误\n\t'type_not_match_error': [{\n\t\t\t'actual_key': 'root.data.0.type_id',\n\t\t\t'actual_vaule': '249',\n\t\t\t'expect_type': 'int'\n\t\t}\n\t],\n\t# 数组长度不匹配错误\n\t'list_len_not_match_error': [{\n\t\t\t'actual_key': 'root.list',\n\t\t\t'actual_len': 1,\n\t\t\t'min_len': 2\n\t\t}\n\t],\n\t# 元祖不匹配错误\n\t'enum_not_match_error': [{\n\t\t\t'actual_key': 'root.type',\n\t\t\t'actual_value': 12,\n\t\t\t'expect_enum': [11, 22]\n\t\t}\n\t]\n}\n\n'''\nprint(mPactVerify.verify_info)\n```\n\n### 2.json契约使用\n```python\nfrom pactverify.matchers import PactJsonVerify\n\n# 定义json契约格式\nexpect_format = {\n    '$Matcher': {\n        'code': 0,  # code key存在,值相等,code==0\n        'msg': 'success',  # msg key存在,值相等,msg=='success'\n        # [{}]结构\n        'data': {\n            '$EachLike': {\n                \"type_id\": 249,  # type_id key存在,值类型相等,type(type_id) == type(249)\n                \"name\": \"王者荣耀\",  # name key存在,值类型相等,type(name) == type(\"王者荣耀\")\n            }},\n        'type': {\n            '$Enum': [11, 22]\n        },\n        'list': {\n            '$EachLike': {\n                # $values,$params形式传递额外参数\n                '$values': 11,\n                '$params': {\n                    'minimum': 2\n                }\n            }\n        }\n    }\n}\n\n# 实际返回数据\nactual_data = {\n    \"msg\": \"success\",\n    \"code\": 1,\n    'type': 12,\n    \"data\": [{\n        # type_id类型不匹配\n        \"type_id\": '249',\n        \"name\": \"王者荣耀\"\n    }, {\n        # 缺少name\n        \"type_id\": 250,\n    }, {\n        # 比契约定义多index字段\n        \"type_id\": 251,\n        \"name\": \"刺激战场\",\n        \"index\": 111\n    }\n    ],\n    'list': [11]\n}\n# hard_mode默认为true,hard_mode = True时,实际返回key必须严格等于预期key;hard_mode = False时,实际返回key包含预期key即可\n# separator可自定义指定json关键字标识符，默认为$\nmPactJsonVerify = PactJsonVerify(expect_format, hard_mode=True, separator='$')\n# 校验实际返回数据\nmPactJsonVerify.verify(actual_data)\n# 校验结果  False\nprint(mPactJsonVerify.verify_result)\n''' 校验错误信息\n错误信息输出actual_key路径：root.data.0.name形式\nroot为根目录,dict类型拼接key,list类型拼接数组下标(从0开始)\n{   \n    # 实际key少于预期key错误\n\t'key_less_than_expect_error': ['root.data.1.name'],\n\t# 实际key多与预期key错误,只在hard_mode = True时才报该错误\n\t'key_more_than_expect_error': ['root.data.2.index'],\n\t# 值不匹配错误\n\t'value_not_match_error': [{\n\t\t\t'actual_key': 'root.code',\n\t\t\t'actual_value': 1,\n\t\t\t'expect_value': 0\n\t\t}\n\t],\n\t# 类型不匹配错误\n\t'type_not_match_error': [{\n\t\t\t'actual_key': 'root.data.0.type_id',\n\t\t\t'actual_vaule': '249',\n\t\t\t'expect_type': 'int'\n\t\t}\n\t],\n\t# 数组长度不匹配错误\n\t'list_len_not_match_error': [{\n\t\t\t'actual_key': 'root.list',\n\t\t\t'actual_len': 1,\n\t\t\t'min_len': 2\n\t\t}\n\t],\n\t# 元祖不匹配错误\n\t'enum_not_match_error': [{\n\t\t\t'actual_key': 'root.type',\n\t\t\t'actual_value': 12,\n\t\t\t'expect_enum': [11, 22]\n\t\t}\n\t]\n}\n'''\nprint(mPactJsonVerify.verify_info)\n```\n### 3.python类契约转json契约\n```python\n1、python类契约不带参数\n# python类契约\nexpect_format = Like({'k1': 'v1'})\n# json契约\nexpect_format_json = {\n    '$Like': {'k1': 'v1'}\n}\n\n2、python类契约带参数\n# python类契约\nexpect_format = Like({'k1': 'v1'}, nullable=True)\n# json契约\nexpect_format_json = {\n    '$Like': {\n        # $values为契约类目标参数\n        '$values': {'k1': 'v1'},\n        # $params为额外参数的json数据\n        '$params': {'nullable': True}\n    }\n}\n```  \n### 4.根据响应结果自动生成json契约\n```python\nfrom pactverify.utils import generate_pact_json_by_response\n\nif __name__ == '__main__':\n    response_json = {\n        \"msg\": \"success\",\n        \"code\": 0,\n        \"data\": [{\n            \"type_id\": 249,\n            \"name\": \"王者荣耀\",\n            \"order_index\": 1,\n            \"status\": 1,\n            \"subtitle\": \" \",\n            \"game_name\": \"王者荣耀\"\n        }, {\n            \"type_id\": 250,\n            \"name\": \"绝地求生\",\n            \"order_index\": 2,\n            \"status\": 1,\n            \"subtitle\": \" \",\n            \"game_name\": \"绝地求生\"\n        }, {\n            \"type_id\": 251,\n            \"name\": \"刺激战场\",\n            \"order_index\": 3,\n            \"status\": 1,\n            \"subtitle\": \" \",\n            \"game_name\": \"刺激战场\"\n        }\n        ]\n    }\n    # 参数说明：响应json数据,契约关键字标识符(默认$)\n    pact_json = generate_pact_json_by_response(response_json, separator='$')\n    print(pact_json)\n    '''\n    # 模板生成只会包含$EachLike、$Like,可以根据具体校验需求更改,数组取第一个元素为模板来生成\n    {\n        '$Like': {\n            'msg': 'success',\n            'code': 0,\n            'data': {\n                '$EachLike': {\n                    'type_id': 249,\n                    'name': '王者荣耀',\n                    'order_index': 1,\n                    'status': 1,\n                    'subtitle': ' ',\n                    'game_name': '王者荣耀'\n                }\n            }\n        }\n    }\n    '''\n```  \n##### 说明：\n>1. PactVerify与PactJsonVerify校验类只是契约数据不同，其他逻辑保持一致\n>2. PactJsonVerify关键字标志符可用PactJsonVerify(separator='$')自定义 \n-------  \n\n## 四.基本匹配规则\n### 1. Matcher类  \n#### 校验规则：值匹配\n```python\n# 预期11  python类契约格式\nexpect_format_1 = Matcher(11)\n# 预期11  json契约格式\nexpect_format_json_1 = {\n    '$Matcher': 11\n}\n\n# 预期1.0 python类契约格式\nexpect_format_2 = Matcher(1.0)\n# 预期1.0 json契约格式\nexpect_format_json_2 = {\n    '$Matcher': 1.0\n}\n\n# 预期'11' python类契约格式\nexpect_format_3 = Matcher('11')\n# 预期'11' json契约格式\nexpect_format_json_3 = {\n    '$Matcher': '11'\n}\n\n# 预期返回数据actual为dict结构,actual['k1'] == 'v1'   python类契约格式\nexpect_format_4 = Matcher({'k1': 'v1'})\n# 预期返回数据actual为dict结构,actual['k1'] == 'v1'   json契约格式\nexpect_format_json_4 = {\n    '$Matcher': {'k1': 'v1'}\n}\n```  \n### 2. Like类  \n#### 校验规则：类型匹配\n```python\n# 预期type(11)  python类契约\nexpect_format_1 = Like(11)\n# 预期type(11)  json契约\nexpect_format_json_1 = {\n    '$Like': 11\n}\n\n# 预期type(1.0)  python类契约\nexpect_format_2 = Like(1.0)\n# 预期type(1.0)  json契约\nexpect_format_json_2 = {\n    '$Like': 1.0\n}\n\n\n# 预期type('11')  python类契约\nexpect_format_3 = Like('11')\n# 预期type('11')  json契约\nexpect_format_json_3 = {\n    '$Like': '11'\n}\n\n# 预期返回数据actual为dict结构，actual['k1'] == type('v1')   python类契约\nexpect_format_4 = Like({'k1':'v1'})\n# 预期返回数据actual为dict结构，actual['k1'] == type('v1')   json契约\nexpect_format_json_4 =  {\n    '$Like': {'k1':'v1'}\n}\n```  \n### 3. EachLike类  \n#### 校验规则：数组类型匹配\n```python\n# 预期[type(11)]  python类契约\nexpect_format_1 = EachLike(11)\n# 预期[type(11)]  json契约\nexpect_format_json_1 = {\n    '$EachLike': 11\n}\n\n# 预期[type(1.0)]  python类契约\nexpect_format_2 = EachLike(1.0)\n# 预期[type(1.0)]  json契约\nexpect_format_json_2 = {\n    '$EachLike': 1.0\n}\n\n# 预期[type('11')]  python类契约\nexpect_format_3 = EachLike('11')\n# 预期[type('11')]  json契约\nexpect_format_json_3 = {\n    '$EachLike': '11'\n}\n\n# 预期[Like{'k1':'v1'}]  python类契约\nexpect_format_4 = EachLike({'k1': 'v1'})\n# 预期[Like{'k1':'v1'}]  json契约\nexpect_format_json_4 = {\n    '$EachLike': {'k1': 'v1'}\n}\n\n# 预期[Like{'k1':'v1'}]或[],minimum为数组最小长度,默认minimum=1   python类契约\nexpect_format_5 = EachLike({'k1': 'v1'}, minimum=0)\n# 预期[Like{'k1':'v1'}]或[],minimum为数组最小长度,默认minimum=1   json契约\nexpect_format_json_5 = {\n    '$EachLike': {\n        # $values,$params结构用于额外传参\n        '$values': {'k1': 'v1'},\n        '$params': {'minimum': 0}\n    }\n}\n\n```  \n\n### 4. Term类  \n#### 校验规则：正则匹配\n```python\n# 预期r'^\\d{2}$'，并且type(actual_data) == type(example)，example也用来测试正则表达式  python类契约\nexpect_format_1 = Term(r'^\\d{2}$', example=11)\n# 预期r'^\\d{2}$'，并且type(actual_data) == type(example)，example也用来测试正则表达式  json契约\nexpect_format_json_1 = {\n    '$Term': {\n        '$values': r'^\\d{2}$',\n        '$params': {'example': 11}\n    }\n}\n\n# 预期r'^\\d{2}$'，example用来测试正则表达式，type_strict = False时跳过对example参数类型校验   python类契约\nexpect_format_2 = Term(r'^\\d{2}$', example=\"11\", type_strict=False)\n# 预期r'^\\d{2}$'，example用来测试正则表达式，type_strict = False时跳过对example参数类型校验   json契约\nexpect_format_json_2 = {\n    '$Term': {\n        '$values': r'^\\d{2}$',\n        '$params': {'example': 11, 'type_strict': False}\n    }\n}\n```\n\n### 5. Enum类  \n#### 校验规则：枚举匹配\n```python\n# 预期11或22  python类契约\nexpected_format_1 = Enum([11, 22])\n# 预期11或22  json契约\nexpected_format_json_1 = {\n    '$Enum': [11, 22]\n}\n\n# iterate_list为true时，当目标数据为数组时，会遍历数组中每个元素是否in [11, 22]  python类契约\nexpected_format_2 = Enum([11, 22], iterate_list=True)\n# iterate_list为true时，当目标数据为数组时，会遍历数组中每个元素是否in [11, 22]  json契约\nexpected_format_json_2 = {\n    '$Enum': {\n        '$values': [11, 22],\n        '$params': {'iterate_list': True}\n    }\n}\n\n```  \n\n-------------\n\n## 四.复杂规则匹配\n### 1.{{}}格式\n```python\nactual_data = {\n    'code': 0,\n    'msg': 'success',\n    'data': {\n        \"id\": 1,\n        \"name\": 'lili'\n    }\n}\n\n# python类契约\nexpect_format = Like({\n    'code': 0,\n    'msg': 'success',\n    'data': Like({\n        \"id\": 1,\n        \"name\": 'lili'\n    })\n})\n\n# json契约\nexpect_format_json = {\n\t'$Like': {\n\t\t'code': 0,\n\t\t'msg': 'success',\n\t\t'data': {\n\t\t\t'$Like': {\n\t\t\t\t\"id\": 1,\n\t\t\t\t\"name\": 'lili'\n\t\t\t}\n\t\t}\n\t}\n}\n```\n### 2.[[]]格式\n```python\nactual_data = [[{\n    \"id\": 1,\n    \"name\": 'lili'\n}]]\n\n# python类契约\nexpect_format = EachLike(EachLike({\n    \"id\": 1,\n    \"name\": 'lili'\n}))\n\n# json契约\nexpect_format_json = {\n    '$EachLike': {\n        '$EachLike': {\n            \"id\": 1,\n            \"name\": 'lili'\n        }\n    }\n}\n```  \n### 3.{[]}格式\n```python\nactual_data = {\n    'code': 0,\n    'msg': 'success',\n    'data': [{\n        \"id\": 1,\n        \"name\": 'lili'\n    },{\n        \"id\": 2,\n        \"name\": 'lilei'\n    }]\n}\n\n# python类契约\nexpect_format = Like({\n    'code': 0,\n    'msg': 'success',\n    'data': EachLike({\n        \"id\": 1,\n        \"name\": 'lili'\n    })\n})\n\n# json契约\nexpect_format_json = {\n    '$Like': {\n        'code': 0,\n        'msg': 'success',\n        'data': {\n            '$EachLike': {\n                \"id\": 1,\n                \"name\": 'lili'\n            }\n        }\n    }\n}\n\n```  \n### 4.Like-Term嵌套\n```python\nactual_data = {\n    'code': 0,\n    'msg': 'success',\n    'data': {\n        \"id\": 1,\n        \"name\": 'lili'\n    }\n}\n\n# python类契约\nexpect_format = Like({\n    'code': 0,\n    'msg': 'success',\n    'data': Like({\n        \"id\": 1,\n        \"name\": Term(r'\\w*', example='lili')\n    })\n})\n\n# json契约\nexpect_format = {\n    '$Like': {\n        'code': 0,\n        'msg': 'success',\n        'data': {\n            '$Like': {\n                \"id\": 1,\n                \"name\": {\n                    '$Term': {\n                        '$values': r'\\w*',\n                        '$params': {\n                            'example': 'lili'\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```  \n### 5.Like-Matcher嵌套\n```python\nactual_data = {\n    'name': 'lilei',\n    'age': 12\n}\n\n# python类契约\nexpect_format = Like({\n    # name字段值类型匹配\n    'name': 'lilei',\n    # age字段值匹配\n    'age': Matcher(12),\n})\n\n# json契约\nexpect_format_json = {\n    '$Like': {\n        # name字段值类型匹配\n        'name': 'lilei',\n        # age字段值匹配\n        'age': {\n            '$Matcher': 12\n        },\n    }\n}\n```  \n#### 说明：\n>1. Matcher，Like和EachLike类可以不限层级嵌套，Term和Enum则不能嵌套其他规则\n>2. 匹配规则多层嵌套时，内层规则优先生效\n\n\n-------------\n\n## 五.异常场景匹配\n### 1.null匹配  \n```python\n# nullable为true时允许返回null，预期null和（actual为dict结构，actual['k1'] == 'v1' or null）形式   python类契约\nexpect_format = Matcher({'k1': 'v1'}, nullable=True)\n# nullable为true时允许返回null，预期null和（actual为dict结构，actual['k1'] == 'v1' or null）形式   json契约\nexpect_format_json = {\n    '$Matcher': {\n        '$values': {'k1': 'v1'},\n        '$params': {'nullable': True}\n    }\n}\n\n# nullable为true时允许返回null，预期null和（actual为dict结构，actual['k1'] == type('v1') or null）形式   python类契约\nexpect_format = Like({'k1': 'v1'}, nullable=True)\n# nullable为true时允许返回null，预期null和（actual为dict结构，actual['k1'] == type('v1') or null）形式   json契约\nexpect_format_json = {\n    '$Like': {\n        '$values': {'k1': 'v1'},\n        '$params': {'nullable': True}\n    }\n}\n\n# nullable为true时允许返回null，预期null和[null,{'k1':null}]形式   python类契约\nexpect_format = EachLike({'k1': 'v1'}, nullable=True)\n# nullable为true时允许返回null，预期null和[null,{'k1':null}]形式   json契约\nexpect_format_json = {\n    '$EachLike': {\n        '$values': {'k1': 'v1'},\n        '$params': {'nullable': True}\n    }\n}\n\n# nullable为true时允许返回null，预期null和11形式   python类契约\nexpect_format = Term(r'^\\d{2}$', example=11, nullable=True)\n# nullable为true时允许返回null，预期null和11形式   json契约\nexpect_format_json = {\n    '$Term': {\n        '$values': r'^\\d{2}$',\n        '$params': {'example': 11, 'nullable': True}\n    }\n}\n\n# nullable为true时允许返回null，预期null和11/22/33形式   python类契约\nexpect_format = Enum([11, 22, 33], nullable=True)\n# nullable为true时允许返回null，预期null和11/22/33形式   json契约\nexpect_format_json = {\n    '$Enum': {\n        '$values': [11, 22, 33],\n        '$params': {'nullable': True}\n    }\n}\n```  \n>**备注：nullable参数在hard_mode = True时也生效**  \n### 2.{}匹配  \n```python\n# dict_emptiable为true时，允许返回{}，预期{}和（actual为dict结构，actual['k1'] == 'v1'）形式   python类契约\nexpect_format = Matcher({'k1': 'v1'}, dict_emptiable=True)\n# dict_emptiable为true时，允许返回{}，预期{}和（actual为dict结构，actual['k1'] == 'v1'）形式   json契约\nexpect_format_json = {\n    '$Matcher': {\n        '$values': {'k1': 'v1'},\n        '$params': {'dict_emptiable': True}\n    }\n}\n\n# dict_emptiable为true时，允许返回{}，预期{}和（actual为dict结构，actual['k1'] == type('v1')）形式   python类契约\nexpect_format = Like({'k1': 'v1'}, dict_emptiable=True)\n# dict_emptiable为true时，允许返回{}，预期{}和（actual为dict结构，actual['k1'] == type('v1')）形式   json契约\nexpect_format_json = {\n    '$Like': {\n        '$values': {'k1': 'v1'},\n        '$params': {'dict_emptiable': True}\n    }\n}\n```  \n>**备注：dict_emptiable在hard_mode = True时也生效**  \n### 3.json格式字符串匹配  \n```python\n# actual为\"{\\\"k1\\\":\\\"v1\\\"}\"json字符串格式时，先进行json.loads再校验   python类契约\nexpect_format = Matcher({'k1': 'v1'}, jsonloads=True)\n# actual为\"{\\\"k1\\\":\\\"v1\\\"}\"json字符串格式时，先进行json.loads再校验   json契约\nexpect_format_json = {\n    '$Matcher': {\n        '$values': {'k1': 'v1'},\n        '$params': {'jsonloads': True}\n    }\n}\n\n# actual为\"{\\\"k1\\\":\\\"v1\\\"}\"json字符串格式时，先进行json.loads再校验   python类契约\nexpect_format = Like({'k1': 'v1'}, jsonloads=True)\n# actual为\"{\\\"k1\\\":\\\"v1\\\"}\"json字符串格式时，先进行json.loads再校验   json契约\nexpect_format_json = {\n    '$Like': {\n        '$values': {'k1': 'v1'},\n        '$params': {'jsonloads': True}\n    }\n}\n\n# actual为\"[{\\\"k1\\\":\\\"v1\\\"}]\"json字符串格式时，先进行json.loads再校验  python类契约\nexpect_format = EachLike({'k1': 'v1'}, jsonloads=True)\n# actual为\"[{\\\"k1\\\":\\\"v1\\\"}]\"json字符串格式时，先进行json.loads再校验  json契约\nexpect_format = {\n    '$EachLike': {\n        '$values': {'k1': 'v1'},\n        '$params': {'jsonloads': True}\n    }\n}\n\n# actual为\"[11,22]\"json字符串格式时，先进行json.loads再校验   python类契约\nexpected_format = Enum([11, 22], jsonloads=True)\n# actual为\"[11,22]\"json字符串格式时，先进行json.loads再校验   json契约\nexpected_format_json = {\n    '$Enum': {\n        '$values': {'k1': 'v1'},\n        '$params': {'jsonloads': True}\n    }\n}\n```  \n\n### 4.key不存在匹配  \n```python\n# key_missable为true时，允许key不存在，key存在时走正常校验；Matcher,Like,EachLike,Term和Enum类都可使用该属性   python类契约\nexpect_format = Matcher({\n    'code': Like(0, key_missable=True),\n    'msg': Matcher('success', key_missable=True),\n    'data': EachLike(11, key_missable=True),\n    'age': Term(r'^\\d{2}$', example=11, key_missable=True),\n    'num': Enum([11, 22, 33], key_missable=True)\n})\n# key_missable为true时，允许key不存在，key存在时走正常校验；Matcher,Like,EachLike,Term和Enum类都可使用该属性   json契约\nexpect_format_json = {\n    '$Matcher': {\n        'code': {\n            '$Like': {\n                '$values': 0,\n                '$params': {'key_missable': True}\n            }\n        },\n        'msg': {\n            '$Matcher': {\n                '$values': 'success',\n                '$params': {'key_missable': True}\n            }\n        },\n        'data': {\n            '$EachLike': {\n                '$values': 11,\n                '$params': {'key_missable': True}\n            }\n        },\n        'age': {\n            '$Term': {\n                '$values': r'^\\d{2}$',\n                '$params': {'example': 11, 'key_missable': True}\n            }\n        },\n        'num': {\n            '$Enum': {\n                '$values': [11, 22, 33],\n                '$params': {'key_missable': True}\n            }\n        },\n    }}\n\n# dict_key_missable为true时，允许dict结构中的key不存在，但key不能多(hard_mode=true时)，key存在时正常校验  python类契约\nexpected_format = Matcher({\n    'name': 'lilei',\n    'age': 12,\n    'sex': 'man'\n}, dict_key_missable=True)\n# dict_key_missable为true时，允许dict结构中的key不存在，但key不能多(hard_mode=true时)，key存在时正常校验  json契约\nexpected_format_json = {\n    '$Matcher': {\n        '$values': {\n            'name': 'lilei',\n            'age': 12,\n            'sex': 'man'\n        },\n        '$params': {'dict_key_missable': True}\n    }\n}\n\n# dict_key_missable为true时，允许dict结构中的key不存在，但key不能多(hard_mode=true时)，key存在时正常校验   python类契约\nexpected_format = Like({\n    'name': 'lilei',\n    'age': 12,\n    'sex': 'man'\n}, dict_key_missable=True)\n# dict_key_missable为true时，允许dict结构中的key不存在，但key不能多(hard_mode=true时)，key存在时正常校验   json契约\nexpected_format_json = {\n    '$Like': {\n        '$values': {\n            'name': 'lilei',\n            'age': 12,\n            'sex': 'man'\n        },\n        '$params': {'dict_key_missable': True}\n    }\n}\n\n# dict_key_missable为true时，允许dict结构中的key不存在，但key不能多(hard_mode=true时)，key存在时正常校验   python类契约\nexpected_format = EachLike({\n    'name': 'lilei',\n    'age': 12,\n    'sex': 'man'\n}, dict_key_missable=True)\n# dict_key_missable为true时，允许dict结构中的key不存在，但key不能多(hard_mode=true时)，key存在时正常校验   json契约\nexpected_format_json = {\n    '$EachLike': {\n        '$values': {\n            'name': 'lilei',\n            'age': 12,\n            'sex': 'man'\n        },\n        '$params': {'dict_key_missable': True}\n    }\n}\n```  \n\n### 5.多类型匹配  \n```python\n# actual数据为type(11)或type('11'),extra_types可以添加多个示例数据,对基础数据类型(int,float,boolean,str,None)示例有效,对list dict等类型无效  python类契约\nexpect_format = Like(11, extra_types=['11'])\n# actual数据为type(11)或type('11'),extra_types可以添加多个示例数据,对基础数据类型(int,float,boolean,str,None)示例有效,对list dict等类型无效  json契约\nexpect_format_json = {\n    '$Like': {\n        '$values': 11,\n        '$params': {'extra_types': ['11']}\n    }\n}\n\n# actual数据为[type(11)]或[type('11')],extra_types可以添加多个示例数据,对基础数据类型示例(int,float,boolean,str,None)有效,对list dict等类型无效  python类契约\nexpect_format = EachLike(11, extra_types=['11'])\n# actual数据为[type(11)]或[type('11')],extra_types可以添加多个示例数据,对基础数据类型示例(int,float,boolean,str,None)有效,对list dict等类型无效  json契约\nexpect_format_json = {\n    '$EachLike': {\n        '$values': 11,\n        '$params': {'extra_types': ['11']}\n    }\n}\n\n```  \n>**备注：**  \n>**1. key_missable在hard_mode = True时也生效**  \n>**2. key_missable针对actual_data本身的key，dict_key_missable针对actual_data字典中的key，可以同时生效**  \n\n#### 注意：异常匹配场景越多,代表接口数据格式越不规范\n\n-------------\n\n## 七.配合unittest+requests使用\n```python\nimport unittest, requests, HtmlTestRunner, os\nfrom pactverify.matchers import Matcher, Like, EachLike, Term, Enum, PactVerify\n\n\nclass PactTest(unittest.TestCase):\n\n    def test_config_2(self):\n        url = 'http://127.0.0.1:8080/configV2'\n        config_rsp = requests.get(url)\n        config_contract_format = Matcher({\n            \"msg\": \"success\",\n            \"code\": 200,\n            'name': Enum(['lili', 'xiaohei']),\n            'addr': Term(r'深圳*', example='深圳宝安'),\n            \"data\": EachLike({\n                \"type_id\": 249,\n                \"name\": \"王者荣耀\",\n                \"order_index\": 1,\n                \"status\": 1,\n                \"subtitle\": \" \",\n                \"game_name\": \"王者荣耀\"\n            }),\n            'data_2':\n                EachLike({\n                    \"type_id\": 249,\n                    \"name\": \"王者荣耀\",\n                    \"order_index\": 1,\n                    \"status\": 1,\n                    \"subtitle\": \" \",\n                    \"game_name\": \"王者荣耀\"\n                }, minimum=1)\n        })\n\n        mPactVerify = PactVerify(config_contract_format)\n\n        try:\n            actual_rsp_json = config_rsp.json()\n            mPactVerify.verify(actual_rsp_json)\n            assert mPactVerify.verify_result == True\n        except Exception:\n            # 自定义错误信息,输出到HTMLTestRunner中\n            err_msg = 'PactVerify_fail,verify_result:{},verify_info:{}'.format(mPactVerify.verify_result,\n                                                                               mPactVerify.verify_info)\n            self.fail(err_msg)\n\n\nif __name__ == '__main__':\n    current_path = os.path.abspath(__file__)\n    current_dir = os.path.abspath(os.path.dirname(current_path) + os.path.sep + \".\")\n    suite = unittest.defaultTestLoader.discover(current_dir, pattern=\"test_*.py\")\n    runner = HtmlTestRunner.HTMLTestRunner(combine_reports=True, report_name=\"MyReport\", add_timestamp=False)\n    runner.run(suite)\n```  \n-------------  \n\n## 八.优点总结  \n>1.显式定义接口断言格式，接口断言更加直观  \n>2.可复用接口实际响应数据来定义契约  \n>3.能根据响应数据生成json契约\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xglh/PactVerify_demo",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pactverify",
    "package_url": "https://pypi.org/project/pactverify/",
    "platform": "",
    "project_url": "https://pypi.org/project/pactverify/",
    "project_urls": {
      "Homepage": "https://github.com/xglh/PactVerify_demo"
    },
    "release_url": "https://pypi.org/project/pactverify/2.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "接口断言契约校验",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8621315,
  "releases": {
    "1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb1959a20faa600c3afa00b4cf3b6c49e6c9d5c63f7f3da75b8d658b04b9ab11",
          "md5": "1c9f923114785f8510ae8187822a653a",
          "sha256": "8e5dd351a12710a7748ac945241464df4edd38f71765fa7d7920407dc4fa332b"
        },
        "downloads": -1,
        "filename": "pactverify-1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c9f923114785f8510ae8187822a653a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10669,
        "upload_time": "2019-08-09T03:02:53",
        "upload_time_iso_8601": "2019-08-09T03:02:53.363004Z",
        "url": "https://files.pythonhosted.org/packages/bb/19/59a20faa600c3afa00b4cf3b6c49e6c9d5c63f7f3da75b8d658b04b9ab11/pactverify-1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff2f98f8d5b5975444f9f9cf06332b830d54997381ba1a3ad1b9d4436c59f077",
          "md5": "f4ead85a692a7149a1aa64aaf53eb767",
          "sha256": "b0fbcfa52df7b15c58d59281a5798293e187dfc0d1362e41efee58789fefd798"
        },
        "downloads": -1,
        "filename": "pactverify-1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "f4ead85a692a7149a1aa64aaf53eb767",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13479,
        "upload_time": "2019-08-09T03:02:55",
        "upload_time_iso_8601": "2019-08-09T03:02:55.083045Z",
        "url": "https://files.pythonhosted.org/packages/ff/2f/98f8d5b5975444f9f9cf06332b830d54997381ba1a3ad1b9d4436c59f077/pactverify-1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c32d3faafaf52a23554076ff407e165554cd7833bf3c1e4b1bf9ebc39667e5a",
          "md5": "cbad46be0e6a175b12e4ed1502c2a727",
          "sha256": "84e34a2bff14302885f85a5116b63377d251b9deb211d1a37a15b2052307c2af"
        },
        "downloads": -1,
        "filename": "pactverify-1.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cbad46be0e6a175b12e4ed1502c2a727",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10690,
        "upload_time": "2019-08-09T07:12:38",
        "upload_time_iso_8601": "2019-08-09T07:12:38.676531Z",
        "url": "https://files.pythonhosted.org/packages/7c/32/d3faafaf52a23554076ff407e165554cd7833bf3c1e4b1bf9ebc39667e5a/pactverify-1.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e7898c33ba640c9374ebab181762bca3ac44194c4e49ba904a903103f49b0c9",
          "md5": "71a12bd7773ab6167326a952a5aeed27",
          "sha256": "9fb761201c0e6758b64213856b34d2ee99cb2737e3b9e3c4a75681d6e1319a8e"
        },
        "downloads": -1,
        "filename": "pactverify-1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "71a12bd7773ab6167326a952a5aeed27",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13482,
        "upload_time": "2019-08-09T07:12:40",
        "upload_time_iso_8601": "2019-08-09T07:12:40.180545Z",
        "url": "https://files.pythonhosted.org/packages/5e/78/98c33ba640c9374ebab181762bca3ac44194c4e49ba904a903103f49b0c9/pactverify-1.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c196346d8a239026135ec66ac603c54d7efbc44a3f6e5ba3c31f8b75c61bc6d0",
          "md5": "71e2575a61ed5c4c633e98d752904a03",
          "sha256": "0a5a3d01a670db4bcf63e409f7cee670c2a4ba9d64fb50c2dbffb42a54350fdb"
        },
        "downloads": -1,
        "filename": "pactverify-1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71e2575a61ed5c4c633e98d752904a03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11496,
        "upload_time": "2019-08-12T15:38:41",
        "upload_time_iso_8601": "2019-08-12T15:38:41.659989Z",
        "url": "https://files.pythonhosted.org/packages/c1/96/346d8a239026135ec66ac603c54d7efbc44a3f6e5ba3c31f8b75c61bc6d0/pactverify-1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6489e945561e7bb89240b14ea3ed55664417b44347ebdce9f56fdb80c2d0641d",
          "md5": "bcfca9c8151a396ac47c375ffac01bc3",
          "sha256": "ec136dc070b2bd759a58f38fd5d55834a727abe4e020903c4bb30f9a2249bcd7"
        },
        "downloads": -1,
        "filename": "pactverify-1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "bcfca9c8151a396ac47c375ffac01bc3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14656,
        "upload_time": "2019-08-12T15:38:43",
        "upload_time_iso_8601": "2019-08-12T15:38:43.924062Z",
        "url": "https://files.pythonhosted.org/packages/64/89/e945561e7bb89240b14ea3ed55664417b44347ebdce9f56fdb80c2d0641d/pactverify-1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "629e192dc70d6dcb20c7c7ed7bcac1c9e69f8aab99cee87dede6ef16ecd8efba",
          "md5": "f54a2c2dfe4d6b08bccc91a92debb8eb",
          "sha256": "21268c0ea8b2e7685d66c696dcf9c284a577927cfcf03b19db853f60549a7815"
        },
        "downloads": -1,
        "filename": "pactverify-1.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f54a2c2dfe4d6b08bccc91a92debb8eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11542,
        "upload_time": "2019-08-16T07:50:52",
        "upload_time_iso_8601": "2019-08-16T07:50:52.296817Z",
        "url": "https://files.pythonhosted.org/packages/62/9e/192dc70d6dcb20c7c7ed7bcac1c9e69f8aab99cee87dede6ef16ecd8efba/pactverify-1.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bed4529beabcf1785144bb7c9b06ccb092993eba19b2dd25b823aa766a5acdc0",
          "md5": "205fde994f51341f73f388246c8ca6b5",
          "sha256": "2c1ecb8bb88eec21ddf76686befb5d07d7c6eef38ae9fe209d51ca220927ab9e"
        },
        "downloads": -1,
        "filename": "pactverify-1.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "205fde994f51341f73f388246c8ca6b5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14679,
        "upload_time": "2019-08-16T07:50:54",
        "upload_time_iso_8601": "2019-08-16T07:50:54.198458Z",
        "url": "https://files.pythonhosted.org/packages/be/d4/529beabcf1785144bb7c9b06ccb092993eba19b2dd25b823aa766a5acdc0/pactverify-1.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5de514d4371bf77d50beb42c4cd1991726eee2b36baebd6a154dfa0244e7748",
          "md5": "0b094b4e9b79845725bafc88dc27ecde",
          "sha256": "92c5bb6535935eb758f7a9fc041e2b667f309148ad5fefc2adaddd926210da16"
        },
        "downloads": -1,
        "filename": "pactverify-1.7.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b094b4e9b79845725bafc88dc27ecde",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11540,
        "upload_time": "2019-08-24T08:07:51",
        "upload_time_iso_8601": "2019-08-24T08:07:51.032686Z",
        "url": "https://files.pythonhosted.org/packages/f5/de/514d4371bf77d50beb42c4cd1991726eee2b36baebd6a154dfa0244e7748/pactverify-1.7.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8254c908f61f3b845ed26df92d14bfffb569127031dfb12a37d2664a140a3b3",
          "md5": "6a3ad9016a7c4d2f4ac836469c9473a1",
          "sha256": "b0e0289a142877ab4d8875bb3ef111c7dbaa83cd605720545197093d10f40548"
        },
        "downloads": -1,
        "filename": "pactverify-1.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6a3ad9016a7c4d2f4ac836469c9473a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14671,
        "upload_time": "2019-08-24T08:07:52",
        "upload_time_iso_8601": "2019-08-24T08:07:52.997320Z",
        "url": "https://files.pythonhosted.org/packages/e8/25/4c908f61f3b845ed26df92d14bfffb569127031dfb12a37d2664a140a3b3/pactverify-1.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2338fb107dcd55f5f28c4211ba276e350753834747988800c2fd4324852c1793",
          "md5": "8b9151c0d8dfcbf907cff23998c89136",
          "sha256": "f2321aeb7ec557fa420f67e444677cfdc16ff671d28e0568d980d528f4165570"
        },
        "downloads": -1,
        "filename": "pactverify-1.7.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b9151c0d8dfcbf907cff23998c89136",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11628,
        "upload_time": "2019-11-02T10:45:37",
        "upload_time_iso_8601": "2019-11-02T10:45:37.874146Z",
        "url": "https://files.pythonhosted.org/packages/23/38/fb107dcd55f5f28c4211ba276e350753834747988800c2fd4324852c1793/pactverify-1.7.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6dde6d145c58b63f1aca3eebe78b8229ea943a75d09ad8ec744c6e2e489ce62",
          "md5": "4a9d7368b5f9823fe8236186075785ef",
          "sha256": "841b5663570c512660577db455e3e8900b617815d8b02aa5cffed781e4cb725a"
        },
        "downloads": -1,
        "filename": "pactverify-1.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4a9d7368b5f9823fe8236186075785ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14800,
        "upload_time": "2019-11-02T10:45:40",
        "upload_time_iso_8601": "2019-11-02T10:45:40.543428Z",
        "url": "https://files.pythonhosted.org/packages/b6/dd/e6d145c58b63f1aca3eebe78b8229ea943a75d09ad8ec744c6e2e489ce62/pactverify-1.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb7de922655f97673359859bbac88ed4f8e2b8e5f3ce2a56f71426277109208e",
          "md5": "2ce8324f4de19d90b198e15b3c7285d6",
          "sha256": "d1c557884c1f698641bade02345c022f61c8a1e6c3bfba64c216597ef01f2c58"
        },
        "downloads": -1,
        "filename": "pactverify-1.7.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ce8324f4de19d90b198e15b3c7285d6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11909,
        "upload_time": "2019-11-06T02:33:50",
        "upload_time_iso_8601": "2019-11-06T02:33:50.639793Z",
        "url": "https://files.pythonhosted.org/packages/cb/7d/e922655f97673359859bbac88ed4f8e2b8e5f3ce2a56f71426277109208e/pactverify-1.7.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31193474b7a0e9078ae6af65cba34ff2fb8e5e1d1fc17092bdfbf1c1e675bb34",
          "md5": "74c787fa5685faedf1e7150c9fa9ce68",
          "sha256": "3db95d0c3645f8125c665e09b30723e6c43cc8d3cd2f99da7420acea24ede5fa"
        },
        "downloads": -1,
        "filename": "pactverify-1.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "74c787fa5685faedf1e7150c9fa9ce68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15261,
        "upload_time": "2019-11-06T02:33:55",
        "upload_time_iso_8601": "2019-11-06T02:33:55.995889Z",
        "url": "https://files.pythonhosted.org/packages/31/19/3474b7a0e9078ae6af65cba34ff2fb8e5e1d1fc17092bdfbf1c1e675bb34/pactverify-1.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1117a8da1f4dbc90e07ea443f2e0e825ae1c8cb54cea70576f82cf349a9fef42",
          "md5": "7d7b3989ca2720cf28aea6eb0d5a119c",
          "sha256": "74ca4b1c528342ac94db2b896330cd018c919b04be3e3646ff6823d960a863a2"
        },
        "downloads": -1,
        "filename": "pactverify-1.7.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d7b3989ca2720cf28aea6eb0d5a119c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11900,
        "upload_time": "2019-12-26T08:05:52",
        "upload_time_iso_8601": "2019-12-26T08:05:52.726780Z",
        "url": "https://files.pythonhosted.org/packages/11/17/a8da1f4dbc90e07ea443f2e0e825ae1c8cb54cea70576f82cf349a9fef42/pactverify-1.7.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3435257e56ada19b69615b3df54571e7671750b294a883acf1398f82c67a236",
          "md5": "d594ee0cf857767166ce5a76522e975a",
          "sha256": "dd4c856c9a4b25ff4e60d5c43531269a5c624c577d1e49cd20a9a0184c7d154f"
        },
        "downloads": -1,
        "filename": "pactverify-1.7.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d594ee0cf857767166ce5a76522e975a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15257,
        "upload_time": "2019-12-26T08:05:57",
        "upload_time_iso_8601": "2019-12-26T08:05:57.876041Z",
        "url": "https://files.pythonhosted.org/packages/e3/43/5257e56ada19b69615b3df54571e7671750b294a883acf1398f82c67a236/pactverify-1.7.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fffa46f8191b7a7d90a3ddb3758f12ee8863b79eda3910a5ac67b3d00cd7b302",
          "md5": "895e429a62a4aac82a133374da1fad09",
          "sha256": "e0d8517acd0a4dd921ab5bdef8afb9dfba2aed5b1cbfc187d12793b5cd60ba84"
        },
        "downloads": -1,
        "filename": "pactverify-1.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "895e429a62a4aac82a133374da1fad09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12332,
        "upload_time": "2020-09-07T02:45:18",
        "upload_time_iso_8601": "2020-09-07T02:45:18.189249Z",
        "url": "https://files.pythonhosted.org/packages/ff/fa/46f8191b7a7d90a3ddb3758f12ee8863b79eda3910a5ac67b3d00cd7b302/pactverify-1.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e95fff368047ad6bdcd78201df924a6a142e82a14fa8e11cd0093be33730e4a",
          "md5": "7a34902c688f271a8b1aa4af8d627cfe",
          "sha256": "7e1f21671a92dc1016be425feec76888aba22f956d50b89a610e916e1cb92cee"
        },
        "downloads": -1,
        "filename": "pactverify-1.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7a34902c688f271a8b1aa4af8d627cfe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15957,
        "upload_time": "2020-09-07T02:45:20",
        "upload_time_iso_8601": "2020-09-07T02:45:20.410883Z",
        "url": "https://files.pythonhosted.org/packages/8e/95/fff368047ad6bdcd78201df924a6a142e82a14fa8e11cd0093be33730e4a/pactverify-1.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa427eebec02176c4ae6d3747b395b9418f6b2b3e4dd32185af27a2e28898bd3",
          "md5": "a0f05fa214f864d974517c66d6ca0052",
          "sha256": "49c1503d4db02de462957920a71998a3f5dfd045f40b8e09d1eef8f91d113593"
        },
        "downloads": -1,
        "filename": "pactverify-1.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0f05fa214f864d974517c66d6ca0052",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12351,
        "upload_time": "2020-10-13T09:25:56",
        "upload_time_iso_8601": "2020-10-13T09:25:56.544376Z",
        "url": "https://files.pythonhosted.org/packages/aa/42/7eebec02176c4ae6d3747b395b9418f6b2b3e4dd32185af27a2e28898bd3/pactverify-1.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e4fbfa47454f1192bc0af97e98aec795614c5b4c974c600aa86ac30d5ee8370",
          "md5": "670b8896a94a85f0b3a12064c3480de0",
          "sha256": "1dadff20f861fb0697d06ba977d49024b0998abd0e20aa56aba47e247ef23879"
        },
        "downloads": -1,
        "filename": "pactverify-1.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "670b8896a94a85f0b3a12064c3480de0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15824,
        "upload_time": "2020-10-13T09:25:58",
        "upload_time_iso_8601": "2020-10-13T09:25:58.187510Z",
        "url": "https://files.pythonhosted.org/packages/5e/4f/bfa47454f1192bc0af97e98aec795614c5b4c974c600aa86ac30d5ee8370/pactverify-1.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "792c01fee221e3a75a833d6aae081d381558db0ccb4ce8db6463257c686b0232",
          "md5": "d8067697eaa19d6bf996cd4c487fb252",
          "sha256": "770324583670cced36d62829d191f7ed0a09673fa4a3cdd1ae7bdcda16fcbc99"
        },
        "downloads": -1,
        "filename": "pactverify-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8067697eaa19d6bf996cd4c487fb252",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16557,
        "upload_time": "2020-11-10T08:33:59",
        "upload_time_iso_8601": "2020-11-10T08:33:59.309004Z",
        "url": "https://files.pythonhosted.org/packages/79/2c/01fee221e3a75a833d6aae081d381558db0ccb4ce8db6463257c686b0232/pactverify-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3070f5596cac9b93e79d37541de28cc07e0e6f2af593d759f3d9f97026373dec",
          "md5": "2bd597b80749582ef0aa9b5ef323c16d",
          "sha256": "8c3d60ae76d54b8d61b9a70f74e62551fa5166cf9db0f3f78ea80e49e264848f"
        },
        "downloads": -1,
        "filename": "pactverify-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2bd597b80749582ef0aa9b5ef323c16d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24359,
        "upload_time": "2020-11-10T08:34:00",
        "upload_time_iso_8601": "2020-11-10T08:34:00.917024Z",
        "url": "https://files.pythonhosted.org/packages/30/70/f5596cac9b93e79d37541de28cc07e0e6f2af593d759f3d9f97026373dec/pactverify-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "792c01fee221e3a75a833d6aae081d381558db0ccb4ce8db6463257c686b0232",
        "md5": "d8067697eaa19d6bf996cd4c487fb252",
        "sha256": "770324583670cced36d62829d191f7ed0a09673fa4a3cdd1ae7bdcda16fcbc99"
      },
      "downloads": -1,
      "filename": "pactverify-2.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d8067697eaa19d6bf996cd4c487fb252",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16557,
      "upload_time": "2020-11-10T08:33:59",
      "upload_time_iso_8601": "2020-11-10T08:33:59.309004Z",
      "url": "https://files.pythonhosted.org/packages/79/2c/01fee221e3a75a833d6aae081d381558db0ccb4ce8db6463257c686b0232/pactverify-2.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3070f5596cac9b93e79d37541de28cc07e0e6f2af593d759f3d9f97026373dec",
        "md5": "2bd597b80749582ef0aa9b5ef323c16d",
        "sha256": "8c3d60ae76d54b8d61b9a70f74e62551fa5166cf9db0f3f78ea80e49e264848f"
      },
      "downloads": -1,
      "filename": "pactverify-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2bd597b80749582ef0aa9b5ef323c16d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24359,
      "upload_time": "2020-11-10T08:34:00",
      "upload_time_iso_8601": "2020-11-10T08:34:00.917024Z",
      "url": "https://files.pythonhosted.org/packages/30/70/f5596cac9b93e79d37541de28cc07e0e6f2af593d759f3d9f97026373dec/pactverify-2.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}