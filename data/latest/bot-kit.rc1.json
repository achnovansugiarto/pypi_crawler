{
  "info": {
    "author": "Alexander Nesterov",
    "author_email": "alex19pov31@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Bot kit\n\n#### Создание общего контекста без кнофигурационного файла:\n\n```python\nfrom bot_kit.kit import BotContext\nfrom bot_kit.db import DBManager\nfrom sqlalchemy.ext.declarative import declarative_base\n\ntoken: str = '123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11'\nBaseModel = declarative_base()  # базовый класс для моделей БД\ndb_manager = DBManager('sqlite:///mybase.db', BaseModel)\n\nbot_context = BotContext(token)\nbot_context.set_db_manager(db_manager)\n```\n\n#### Создание общего контекста через конфигурационный файл:\n\n```python\nfrom bot_kit.kit import BotContext\nfrom bot_kit.common import ConfigBot, INIConfig\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBaseModel = declarative_base()  # базовый класс для моделей БД\nconfig = ConfigBot(INIConfig('settings.ini'))\nbot_context = BotContext.init_form_config(config, BaseModel)\n```\n\n#### Создание простого меню:\n\nМеню создается как класс на основе MenuReplyKeyboard и может быть зарегистрировано\nчерез декоратор register_menu. При регистрации контекст для работы с ботом пробрасывается\nв команды завязанные на кнопки меню. Правила для показа меню моно указать в декораторе, по такому же принципу\nкак и в aiogram или же определить метод check.\n\n```python\nfrom bot_kit.kit import BotCommand, MenuReplyKeyboard, ReplyKeyboardButton, ShowMenuButton\nfrom bot_kit.db import DBManager, ModelManager\nfrom aiogram import types\n\nclass FirstCommand(BotCommand):\n    async def execute(self, tg_object: types.Message, *args, **kwargs):\n        \"\"\"\n        self.db_manager - управление моделями БД\n        self.bc - общий контекст\n        self.bot - объект бота\n        \"\"\"\n        user_manager: ModelManager = self.db_manager.manage(UserModel)\n        user_manager.one(chat_id=tg_object.from_user.id)\n        await tg_object.answer('first command is finished')\n\n\n@bot_context.register_menu(text='Меню настройки')\nclass ConfigMenu(MenuReplyKeyboard):\n    COMMAND1 = ReplyKeyboardButton('Команда 1', FirstCommand)\n\n    @classmethod\n    def check(cls, tg_object: types.Message) -> bool:\n        \"\"\"Альтернативный метод для проверки вывода меню (если логика довольно сложная для декоратора)\"\"\"\n        return tg_object.text == '/config'\n\n\n@bot_context.register_menu(text='Приветствую', commands=['start'])\nclass MainMenu(MenuReplyKeyboard):\n    FIRST_BUTTON = ReplyKeyboardButton('Команда 1', FirstCommand)\n    SECOND_BUTTON = ReplyKeyboardButton('Команда 2', FirstCommand)\n    SHOW_CONFIG_MENU = ShowMenuButton('Настройки', ConfigMenu)\n\n    @classmethod\n    async def before_show(cls, tg_object: types.Message, **kwargs):\n        \"\"\"\n        Метод выполняемый перед показом меню\n        cls.bc - общий контекст\n        \"\"\"\n        db_manager: DBManager = cls.bc.get_db_manager()\n        user_manager: ModelManager = db_manager.manage(UserModel)\n        user: UserModel = user_manager.one(chat_id=tg_object.from_user.id)\n        if not user:\n            user_manager.save(UserModel(\n                name=tg_object.from_user.first_name,\n                last_name=tg_object.from_user.last_name,\n                chat_id=tg_object.from_user.id,\n            ))\n```\n\n#### Создание Inline меню:\n\nInline меню создается по такому же принципу что и основное меню, но родителем в данном случае выступает\nкласс MenuInlineKeyboard.\n\n```python\nfrom bot_kit.kit import BotCommand, MenuInlineKeyboard, InlineButton\nfrom aiogram import types\n\n\nclass SomeInlineCommand(BotCommand):\n    async def execute(self, tg_object: types.CallbackQuery, *args, **kwargs):\n        pass\n\n\n@bot_context.register_menu(text='Что делаем?')\nclass ContextMenu(MenuInlineKeyboard):\n    FIRST_BUTTON = InlineButton('Кнопка 1', 'some_command_btn', SomeInlineCommand())\n\n    @classmethod\n    def check(cls, tg_object: types.Message) -> bool:\n        return True\n```\n\n#### Создание фоновой задачи выполняемой через определенный интервал:\n\nПериодические задачи можно оформлять как классы-наследники BotTask в этом случае внутри класса будет доступен\nконтекст бота. Или же как обычные функции завернутые в декоратор register_async_timer\n\n```python\n\nfrom bot_kit.kit import BotTask\n\n@bot_context.register_async_timer(60)   # регистрируем выполнение функции каждую минуту\nasync def one_more_task():\n    pass\n\nclass SimpleTask(BotTask):\n    async def execute(self, *args, **kwargs):\n        \"\"\"\n        self.db_manager - управление моделями БД\n        self.bc - общий контекст\n        self.bot - объект бота\n        \"\"\"\n        pass\n\nbot_context.add_task(SimpleTask(), 600) # запуск задачи раз в 10 минут\n```\n\n#### Запуск бота:\n\nНа текущий момент бота можно запускать только в режиме long polling.\n\n```python\nbot_context.start_polling()\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alex19pov31/bot-kit",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bot-kit",
    "package_url": "https://pypi.org/project/bot-kit/",
    "platform": "",
    "project_url": "https://pypi.org/project/bot-kit/",
    "project_urls": {
      "Homepage": "https://github.com/alex19pov31/bot-kit"
    },
    "release_url": "https://pypi.org/project/bot-kit/0.1/",
    "requires_dist": [
      "aiodns (>=2.0.0)",
      "aiogram (>=2.9.2)",
      "aiohttp (>=3.6.2)",
      "SQLAlchemy (>=1.3.18)"
    ],
    "requires_python": ">=3.6",
    "summary": "Telegram bot kit",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8413643,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8e9bb381d84931d89b04f0c2a2a41f613153686c7bb0be2e0dff863aa7fd18a",
          "md5": "46058760d1db6ba92144a4d5fa98ce18",
          "sha256": "ba190c3ca2ad4b1392f3f23cfbb5ee945dfcaa02ac2dbafec13aa03fa52c7982"
        },
        "downloads": -1,
        "filename": "bot_kit-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "46058760d1db6ba92144a4d5fa98ce18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9265,
        "upload_time": "2020-10-14T22:05:02",
        "upload_time_iso_8601": "2020-10-14T22:05:02.677750Z",
        "url": "https://files.pythonhosted.org/packages/b8/e9/bb381d84931d89b04f0c2a2a41f613153686c7bb0be2e0dff863aa7fd18a/bot_kit-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37f75f48550333bc4241b43236bc8234cf0de3ab0b1d48ad4b02ce4ae7f1a59c",
          "md5": "3421d8c67de63c04ba0ef246177202d7",
          "sha256": "10cee09136054171936ab97b20b6b40d53f46f229f7b926e14bddc45fb58b3ce"
        },
        "downloads": -1,
        "filename": "bot_kit-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3421d8c67de63c04ba0ef246177202d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9749,
        "upload_time": "2020-10-14T22:05:05",
        "upload_time_iso_8601": "2020-10-14T22:05:05.683465Z",
        "url": "https://files.pythonhosted.org/packages/37/f7/5f48550333bc4241b43236bc8234cf0de3ab0b1d48ad4b02ce4ae7f1a59c/bot_kit-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8e9bb381d84931d89b04f0c2a2a41f613153686c7bb0be2e0dff863aa7fd18a",
        "md5": "46058760d1db6ba92144a4d5fa98ce18",
        "sha256": "ba190c3ca2ad4b1392f3f23cfbb5ee945dfcaa02ac2dbafec13aa03fa52c7982"
      },
      "downloads": -1,
      "filename": "bot_kit-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "46058760d1db6ba92144a4d5fa98ce18",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9265,
      "upload_time": "2020-10-14T22:05:02",
      "upload_time_iso_8601": "2020-10-14T22:05:02.677750Z",
      "url": "https://files.pythonhosted.org/packages/b8/e9/bb381d84931d89b04f0c2a2a41f613153686c7bb0be2e0dff863aa7fd18a/bot_kit-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37f75f48550333bc4241b43236bc8234cf0de3ab0b1d48ad4b02ce4ae7f1a59c",
        "md5": "3421d8c67de63c04ba0ef246177202d7",
        "sha256": "10cee09136054171936ab97b20b6b40d53f46f229f7b926e14bddc45fb58b3ce"
      },
      "downloads": -1,
      "filename": "bot_kit-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3421d8c67de63c04ba0ef246177202d7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9749,
      "upload_time": "2020-10-14T22:05:05",
      "upload_time_iso_8601": "2020-10-14T22:05:05.683465Z",
      "url": "https://files.pythonhosted.org/packages/37/f7/5f48550333bc4241b43236bc8234cf0de3ab0b1d48ad4b02ce4ae7f1a59c/bot_kit-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}