{
  "info": {
    "author": "James Pic",
    "author_email": "jamespic@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# IoC for configuration of Starlette projects\n\nIoC stands for \"Inversion of Control\", it offers an alternate way to configure\nStarlette projects, in the fashion of Django's INSTALLED_APPS, but following an\ninjection model such as CakePHP (since 2019) and Django-GDAPS.\n\n## Install\n\nInstall with pip:\n\n    pip install starlette-apps\n\n## Purpose\n\nThe purpose is to split up imports and configurations from your starlette ASGI\ndeclaration script as such:\n\n```python\nimport apps\n\nproject = apps.Project(\n    TIMEZONE='Europe/Paris',\n    APPS=[\n        'your_db_config',\n        'your_app',\n    ],\n)\n\napp = project.starlette()\n```\n\nThen, your apps can inject routes, middlewares, startup code, and also run\nsetup code at import time.\n\nInitially, I made this for my own little framework experiment, and had a lot of\nspecific stuff in the Project class. After refactoring for a while, it turned\nout all dependencies could be extracted out into apps. And then, it became\nworth sharing. It's really not much code, but I think it would be nice if\nsomehow we could have an ecosystem of Starlette apps that are just pluggable.\nThis is a solution.\n\n## Apps\n\n### Instanciation\n\nInstanciating a Project will basically get the `.app` attribute of each modulle\nin `APPS`, which you may define for example as such:\n\n```python\nimport apps\n\napp = apps.App(\n    name='YourApp',\n    middlewares=[\n        Middleware(YourMiddleware)\n    ],\n    routes=[\n        Route('/pattern', YourView),\n    ],\n)\n```\n\n### Methods & Declarative\n\nYou may also define your App declaratively, for example if you want to override\nsome methods:\n\n```python\nclass YourApp(apps.App):\n    middlewares = [Middleware(YourMiddleware)]\n\n    def get_routes(self):\n        if self.project.mode == 'production':\n            return your_production_routes\n        elif self.project.mode in ('test', 'dev'):\n            return your_production_routes + your_debug_routes\n\n    def setup(self):\n        \"\"\"\n        Do something as soon as your app is imported.\n        Useful to setup things such as a database connection.\n        \"\"\"\n\n    def startup(self):\n        \"\"\"\n        This will be passed to starlette on_startup.\n        Useful to run migrations for example.\n        \"\"\"\n```\n\nNote that Project will not just build a list of `get_routes()` results, instead\nit will call `App.get_mount()` which in turn will return a `Mount` of the\nresult from `get_routes()`.\n\n## Project & IoC Flow\n\n### Project mode\n\nA `project.mode` dynamic property returns `production` by default, but if the\n`pytest` module is loaded it will return `test`, and if `--reload` is in\nsys.argv it will return `dev`. You may override this to your taste, it may help\nyour apps decide what kind of configuration is best to inject.\n\n### Instanciation of the project\n\nThis section describes the flow of the Project instanciation.\n\n#### 1. Setting project.config\n\nThen, the project will create a `self.config` instance of `starlette.Config`\nwith the settings that were passed in the constructor kwargs, and reading a\n`.env` file that would be in the current working directory.\n\nYou can then get settings through something like `project.config(\"TIMEZONE\")`.\nOf course, this means that you need to have the project instance from outside\nthe module, which you can do as such:\n\n#### 2. Setting Project.current()\n\n```python\nfrom apps import Project\n\nproject = Project.current()\n```\n\nThis is because the first thing that instanciating the Project class is setting\na class attribute with itself. But this also works from subshells because it\nwrites the `PROJECT` environment variable, ie. if you instanciate the project,\nrun a shell command which invokes Python: `Project.current()` will still work.\n\n#### 3. Apps setup\n\nFinally, it will import every app module one by one, as it does so it will:\n\n- get the ``app`` variable from the module,\n- set ``app.name`` to the module name if ``app.name`` set, to ensure all apps\n  have a name\n- add the app to ``project.apps[app.name]``,\n- set ``app.module`` to the module that it was imported from,\n- set ``app.project`` to the project instance,\n- call ``app.setup()``\n\nSo, if your first app is ``your_orm``, you can setup the database connection in\n``your_orm.app.setup()`` and it will be available to all subsequent apps.\n\n### Starlette generation\n\n`project.starlette(**kwargs)` returns a Starlette instance a such:\n\n- if `project.mode` is `test` or `dev`, then it will set `debug=True`,\n- it will add the result of each app's `get_middlewares()` to the `middlewares`\n  kwarg,\n- it will add its `project.startup()` callback to the `on_startup` kwarg, which\n  by default will execute each app's `startup()` method\n- it will add the Mount object returned by each app's `get_mount()` method to\n  the `routes` kwarg",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://yourlabs.io/oss/starlette-apps",
    "keywords": "django cli",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "starlette-apps",
    "package_url": "https://pypi.org/project/starlette-apps/",
    "platform": "",
    "project_url": "https://pypi.org/project/starlette-apps/",
    "project_urls": {
      "Homepage": "https://yourlabs.io/oss/starlette-apps"
    },
    "release_url": "https://pypi.org/project/starlette-apps/0.1.6/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "IoC for configuration of Starlette projects",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9339305,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5bfc7d5168562ae6a486a742f23d578dae59cce05a8f75c909062673704deec9",
          "md5": "b064de7fca3b17908eb09bafd1d41b83",
          "sha256": "df2944d492e52918d35d4687ef0971653160674ba4aecbc0945eabfd66060ec0"
        },
        "downloads": -1,
        "filename": "starlette-apps-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b064de7fca3b17908eb09bafd1d41b83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 2128,
        "upload_time": "2021-02-06T17:27:02",
        "upload_time_iso_8601": "2021-02-06T17:27:02.227548Z",
        "url": "https://files.pythonhosted.org/packages/5b/fc/7d5168562ae6a486a742f23d578dae59cce05a8f75c909062673704deec9/starlette-apps-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe80b7f192634174150197a97e9ca6213c3b1ffc92793aa4ab075a4b830b41a4",
          "md5": "3d5ea639670b8a6db85d44ca83e83f9d",
          "sha256": "31821cb6f1b20f13e0a9ab66304350098f8ae182e4a348dbb6b6f2ad09248740"
        },
        "downloads": -1,
        "filename": "starlette-apps-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3d5ea639670b8a6db85d44ca83e83f9d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 3649,
        "upload_time": "2021-02-06T18:02:49",
        "upload_time_iso_8601": "2021-02-06T18:02:49.069755Z",
        "url": "https://files.pythonhosted.org/packages/fe/80/b7f192634174150197a97e9ca6213c3b1ffc92793aa4ab075a4b830b41a4/starlette-apps-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "888897d380867eb4876266eeb04009782cedddf1539a407f3b0e74756eba918f",
          "md5": "f241cf509d05fa5e8ca6b8266204e630",
          "sha256": "9a5f2b8f4ef14c04f007e0d05c230f1ad0465e138a550415741776fd802efa53"
        },
        "downloads": -1,
        "filename": "starlette-apps-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f241cf509d05fa5e8ca6b8266204e630",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 3651,
        "upload_time": "2021-02-06T18:29:25",
        "upload_time_iso_8601": "2021-02-06T18:29:25.195929Z",
        "url": "https://files.pythonhosted.org/packages/88/88/97d380867eb4876266eeb04009782cedddf1539a407f3b0e74756eba918f/starlette-apps-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36876c6ace66c8f29d8d8157c59632f7495920aceb8daf8009be096a8593065a",
          "md5": "bd9fd62c82b9fd505ccd56639bd5da7a",
          "sha256": "db997702eba79220bbfad990970bcbcd50f52ef35047e79bb4839bd984f27e6f"
        },
        "downloads": -1,
        "filename": "starlette-apps-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "bd9fd62c82b9fd505ccd56639bd5da7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 3649,
        "upload_time": "2021-02-06T23:39:54",
        "upload_time_iso_8601": "2021-02-06T23:39:54.929705Z",
        "url": "https://files.pythonhosted.org/packages/36/87/6c6ace66c8f29d8d8157c59632f7495920aceb8daf8009be096a8593065a/starlette-apps-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db9801e22414db409a584ce1c1ffc98980fb297739fb138dde23118f6682b52b",
          "md5": "081a26595a24b43d2e43c9cb38565560",
          "sha256": "d64a5dc7fcd398e96d6fc6542f3510df5fba2960bd8a2e46aa14567d1f92baf3"
        },
        "downloads": -1,
        "filename": "starlette-apps-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "081a26595a24b43d2e43c9cb38565560",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 4866,
        "upload_time": "2021-02-07T00:03:09",
        "upload_time_iso_8601": "2021-02-07T00:03:09.348226Z",
        "url": "https://files.pythonhosted.org/packages/db/98/01e22414db409a584ce1c1ffc98980fb297739fb138dde23118f6682b52b/starlette-apps-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db9801e22414db409a584ce1c1ffc98980fb297739fb138dde23118f6682b52b",
        "md5": "081a26595a24b43d2e43c9cb38565560",
        "sha256": "d64a5dc7fcd398e96d6fc6542f3510df5fba2960bd8a2e46aa14567d1f92baf3"
      },
      "downloads": -1,
      "filename": "starlette-apps-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "081a26595a24b43d2e43c9cb38565560",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 4866,
      "upload_time": "2021-02-07T00:03:09",
      "upload_time_iso_8601": "2021-02-07T00:03:09.348226Z",
      "url": "https://files.pythonhosted.org/packages/db/98/01e22414db409a584ce1c1ffc98980fb297739fb138dde23118f6682b52b/starlette-apps-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}