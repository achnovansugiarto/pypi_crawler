{
  "info": {
    "author": "PyCytoData Developers",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# PyCytoData\n> An elegant data analysis tool for CyTOF.\n\nThis package is an all-in-one CyTOF data analysis package for your experiments. From loading datasets to DR and evaluation, you have a consistent interface and readable code every step along the way. There is also support for some of ``HDCytoData``'s benchmark datasets as originally implemented in R by Weber & Soneson (2019) in [this repository](https://github.com/lmweber/HDCytoData). Why wait? Start your PyCytoData journal right here, right now! \n\n## Installation\n\nYou can install ``PyCytoData`` easily from ``pip``:\n\n```\npip install PyCytoData\n```\n\nor from ``conda``:\n\n```\nconda install pycytodata -c kevin931 -c bioconda\n```\n\nIf you wish to use ``CytofDR`` along with PyCytoData, use can optionally install it as well:\n\n```\npip install CytofDR\n```\n\nFor more information on optional dependencies or installation details, look [here](https://pycytodata.readthedocs.io/en/latest/installation.html).\n\n## Install and Load Benchmark Datasets\n\nYou can load the data easily with the following python snippet:\n\n```python\n>>> from PyCytoData import DataLoader\n\n>>> exprs = DataLoader.load_dataset(dataset = \"levine13\")\n>>> exprs.expression_matrix # Expression matrix\n>>> exprs.cell_types # Cell types\n>>> exprs.sample_index # Sample index\n>>> exprs.features # The feature/marker names\n```\n\nThe resulting ``exprs`` is a ``PyCytoData`` object, which is easy to use. The expression matrix, cell types (if available), and sample index are directly accessible with attributes, and they are all stored as **numpy.array**. You can also access some metadata of the object with the following attributes:\n\n```python\n>>> exprs.n_cells\n>>> exprs.n_cell_types\n>>> exprs.n_samples\n>>> exprs.n_features\n```\n\nAll these metadata is automatically set, and there is protection in place for unintended changes. You can also add a sample with the following:\n\n```python\n>>> exprs.add_sample(expression_matrix, cell_types, sample_index) # All inputs should be ArrayLike\n```\n\n**Note**: The data are downloaded from a server instead of being shipped with this package. Each dataset only needs to be downloaded once, which is automatically managed. During the first-time download of the data, a command-line confirmation is needed.\n\n## Bring Your Own Dataset (BYOD)\n\nYes, you read it right! You can load your own datasets. Currently, we only support reading in plain text files with saved with delimiters. The data need to have cells as rows and features as columns. To do load them in as a ``PyCytoData`` object, you can simply do the following:\n\n```python\n>>> from PyCytoData import FileIO\n\n>>> FileIO.load_delim(files=\"/path\", # Path to file\n...                   col_names=True, # Whether the first row is feature (column) names \n...                   delim=\"\\t\" # Delimiter\n...                  ) \n```\n\nIf your experiment has multiple samples, you can simply import them together:\n\n```python\n>>> from PyCytoData import FileIO\n\n>>> expression_paths = [\"path1\", \"path2\", \"path3\"]\n>>> FileIO.load_delim(files=expression_paths, # Path to file\n...                   col_names=True, # Whether the first row is feature (column) names \n...                   delim=\"\\t\" # Delimiter\n...                  ) \n```\n\nIn this case, the expression matrices are concatenated automatically without any normalization. To access particular samples, you can access the ``sample_index`` of the attribute and use the standard ``numpy`` indexing techniques.\n\n**Note:** This technique does not automatically load cell types. In fact, it does **not** not mixed-datatype array, except for column names. You will need to read in cell types and set them using the ``cell_types`` attribute of the object. \n\n## Preprocessing\n\nCurrently, ``levine13``, ``levine32``, and ``samusik`` have all been mostly preprocessed. All you need to do is to perform ``aecsinh`` transformaion. You can simply do this:\n\n```python\n>>> from PyCytoData import DataLoader\n\n>>> exprs = DataLoader.load_dataset(dataset = \"levine13\", preprocess=True)\n```\n\nWhen you perform BYOD, you can have much more flexibility:\n\n```python\n>>> from PyCytoData import FileIO\n\n>>> byod = FileIO.load_delim(files=\"/path\", # Path to file\n...                          col_names=True, # Whether the first row is feature (column) names \n...                          delim=\"\\t\" # Delimiter\n...                         )\n>>> byod.lineage_channels = [\"CD4\", \"CD8\", \"FoxP3\", \"CD15\"]\n>>> byod.preprocess(arcsinh=True,\n...                 gate_debris_removal=True,\n...                 gate_intact_cells=True,\n...                 gate_live_cells=True,\n...                 gate_center_offset_residual=True,\n...                 bead_normalization=True)\n\nbyod.expression_matrix # This is preprocessed\n```\nAs the example shows, we support five unique preprocessing steps! And of course, you can use a subset of these to suit your own needs! By default, we automatically detect the necessary channels, such as \"Bead1\" or \"Center\". However, if your dataset is unconventionally named, our auto-detect algorithm may fail. Thus, we can perform a manual override:\n\n```python\n>>> byod.preprocess(arcsinh=True,\n...                 gate_debris_removal=True,\n...                 gate_intact_cells=True,\n...                 gate_live_cells=True,\n...                 gate_center_offset_residual=True,\n...                 bead_normalization=True,\n...                 bead_channels = [\"1bead\", \"2bead\"],\n...                 time_channel = [\"clock\"])\n```\n\n## Dimension Reduction\n\nIf you wish to run DR on your dataset, you can easily do so as well if you have ``CytofDR`` installed (assume you have loaded the dataset and preprocessed it accordingly):\n\n```python\n>>> exprs.run_dr_methods(methods = [\"PCA\", \"UMAP\", \"ICA\"])\nRunning PCA\nRunning ICA\nRunning UMAP\n>>> type(exprs.reductions)\n<class 'CytofDR.dr.Reductions'>\n```\nThe ``reductions`` attribute is a ``Reductions`` object from ``CytofDR``. You can perform all downstream DR workflows as usual.\n\n## Datasets Supported\n\nWe only support the following datasets as of now. The *Literal* is the string literal used in this package to refer to the datasets whereas the *Dataset Name* is what these datasets are more commonly known for.\n\n| Dataset Name | Literal |\n| --- | --- |\n| Levine-13dim | levine13 |\n| Levine-32dim | levine32 |\n| Samusik | samusik |\n\nMore datasets will be added in the future to be fully compatible with HDCytoData and to potentially incorporate other databases.\n\n## Documentation\n\nFor detailed documentation along with tutorials and API Reference, please visit our [Official Documentation](https://pycytodata.readthedocs.io/en/latest/). This is automatically updated with each update.\n\nIf you prefer to build documentation on your own, refer to [this guide](https://pycytodata.readthedocs.io/en/latest/change/build.html) for more details.\n\n## Latest Release: 0.1.0\n\nThis is the first official release of ``PyCytoData`` with LTS.\n\n### Bug Fixes\n\n- Fix the default cofactor of ``PyCytoData.preprocess``\n- Fix lineage channels for ``levine32`` and ``samusik``\n\n### Changes and New Features\n\n- ``PyCytoData.run_dr_methods`` now runs on lineage channels only\n- Add tutorials and references for documentation\n- Improve docstrings and general documentations\n- Add preprocessing options for loading benchmark datasets\n- Relax ``numpy`` dependency to >=1.20\n- Add descriptors for PyPI releases\n\n### Deprecations\n\n- Permanently remove ``FileIO.make_dir`` function for safety reasons\n\n\n## References\n\nIf you use ``PyCytoData`` to perform DR, citing the [our DR Review paper](https://doi.org/10.1101/2022.04.26.489549) is highly appreciated:\n\n```\n@article {Wang2022.04.26.489549,\n\tauthor = {Wang, Kaiwen and Yang, Yuqiu and Wu, Fangjiang and Song, Bing and Wang, Xinlei and Wang, Tao},\n\ttitle = {Comparative Analysis of Dimension Reduction Methods for Cytometry by Time-of-Flight Data},\n\telocation-id = {2022.04.26.489549},\n\tyear = {2022},\n\tdoi = {10.1101/2022.04.26.489549},\n\tpublisher = {Cold Spring Harbor Laboratory},\n\tURL = {https://www.biorxiv.org/content/early/2022/06/02/2022.04.26.489549},\n\teprint = {https://www.biorxiv.org/content/early/2022/06/02/2022.04.26.489549.full.pdf},\n\tjournal = {bioRxiv}\n}\n```\n\nIf you use ``Cytomulate`` with this package, [our paper](https://doi.org/10.1101/2022.06.14.496200) can be cited here:\n\n```\n@article {Yang2022.06.14.496200,\n\tauthor = {Yang, Yuqiu and Wang, Kaiwen and Lu, Zeyu and Wang, Tao and Wang, Xinlei},\n\ttitle = {Cytomulate: Accurate and Efficient Simulation of CyTOF data},\n\telocation-id = {2022.06.14.496200},\n\tyear = {2022},\n\tdoi = {10.1101/2022.06.14.496200},\n\tpublisher = {Cold Spring Harbor Laboratory},\n\tURL = {https://www.biorxiv.org/content/early/2022/06/16/2022.06.14.496200},\n\teprint = {https://www.biorxiv.org/content/early/2022/06/16/2022.06.14.496200.full.pdf},\n\tjournal = {bioRxiv}\n}\n```\n\nIf you use the builtin datasets, please visit our [Reference Page](https://pycytodata.readthedocs.io/en/latest/references.html) and cite the papers accordingly.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kevin931/PyCytoData",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyCytoData",
    "package_url": "https://pypi.org/project/PyCytoData/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyCytoData/",
    "project_urls": {
      "Homepage": "https://github.com/kevin931/PyCytoData"
    },
    "release_url": "https://pypi.org/project/PyCytoData/0.1.0/",
    "requires_dist": [
      "fcsparser",
      "pandas",
      "numpy (>=1.20)"
    ],
    "requires_python": ">=3.7",
    "summary": "An Elegant Data Analysis Tool for CyTOF",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14462445,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cdddf3a948a8dc1e1abf2414c2ede39c363c9428f13d73c88e2d02d9bb1f3c5",
          "md5": "31d7ecc1387ec2530415e67567556026",
          "sha256": "b6aad512f5b3e1542aa38e4acc223d14759182534b42fcad88c9fc99bde6234d"
        },
        "downloads": -1,
        "filename": "PyCytoData-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31d7ecc1387ec2530415e67567556026",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 21511,
        "upload_time": "2022-06-18T20:23:06",
        "upload_time_iso_8601": "2022-06-18T20:23:06.519198Z",
        "url": "https://files.pythonhosted.org/packages/7c/dd/df3a948a8dc1e1abf2414c2ede39c363c9428f13d73c88e2d02d9bb1f3c5/PyCytoData-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6c54e1498b32eb8f15ed623c492add5475708309853ff5ff89917c982c460d1",
          "md5": "f9a4820cd122b12dec19f411d1d123e2",
          "sha256": "8af8064b1a77e08947d8f12eb5757fdc1c25f88da28941be98d843add465c73a"
        },
        "downloads": -1,
        "filename": "PyCytoData-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f9a4820cd122b12dec19f411d1d123e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23109,
        "upload_time": "2022-06-18T20:23:08",
        "upload_time_iso_8601": "2022-06-18T20:23:08.681044Z",
        "url": "https://files.pythonhosted.org/packages/a6/c5/4e1498b32eb8f15ed623c492add5475708309853ff5ff89917c982c460d1/PyCytoData-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87aa2f1b87d2d565d0b0540eb5c550a7a1da41ad08a4c65593f0faf333d3b7a0",
          "md5": "ed55c89e4f54d0a71860327319724135",
          "sha256": "80218b592e6f2602fb0207ef8cd5c178f3ff3a4a6a381431f7646fb1fd487660"
        },
        "downloads": -1,
        "filename": "PyCytoData-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed55c89e4f54d0a71860327319724135",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 22116,
        "upload_time": "2022-07-17T19:55:47",
        "upload_time_iso_8601": "2022-07-17T19:55:47.525308Z",
        "url": "https://files.pythonhosted.org/packages/87/aa/2f1b87d2d565d0b0540eb5c550a7a1da41ad08a4c65593f0faf333d3b7a0/PyCytoData-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d82d0c90ec4708cd5efe1056d37d8f7db14ba53e78fd6a4a2090cc3d932666ae",
          "md5": "ea1bcb05b25ceb58506f6b8e24f5bfd6",
          "sha256": "91c1933836e8381a2ad7532f7d9639092d914745e43db14d27c3b7dd68af94b9"
        },
        "downloads": -1,
        "filename": "PyCytoData-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ea1bcb05b25ceb58506f6b8e24f5bfd6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24090,
        "upload_time": "2022-07-17T19:55:49",
        "upload_time_iso_8601": "2022-07-17T19:55:49.634521Z",
        "url": "https://files.pythonhosted.org/packages/d8/2d/0c90ec4708cd5efe1056d37d8f7db14ba53e78fd6a4a2090cc3d932666ae/PyCytoData-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87aa2f1b87d2d565d0b0540eb5c550a7a1da41ad08a4c65593f0faf333d3b7a0",
        "md5": "ed55c89e4f54d0a71860327319724135",
        "sha256": "80218b592e6f2602fb0207ef8cd5c178f3ff3a4a6a381431f7646fb1fd487660"
      },
      "downloads": -1,
      "filename": "PyCytoData-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ed55c89e4f54d0a71860327319724135",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 22116,
      "upload_time": "2022-07-17T19:55:47",
      "upload_time_iso_8601": "2022-07-17T19:55:47.525308Z",
      "url": "https://files.pythonhosted.org/packages/87/aa/2f1b87d2d565d0b0540eb5c550a7a1da41ad08a4c65593f0faf333d3b7a0/PyCytoData-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d82d0c90ec4708cd5efe1056d37d8f7db14ba53e78fd6a4a2090cc3d932666ae",
        "md5": "ea1bcb05b25ceb58506f6b8e24f5bfd6",
        "sha256": "91c1933836e8381a2ad7532f7d9639092d914745e43db14d27c3b7dd68af94b9"
      },
      "downloads": -1,
      "filename": "PyCytoData-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ea1bcb05b25ceb58506f6b8e24f5bfd6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 24090,
      "upload_time": "2022-07-17T19:55:49",
      "upload_time_iso_8601": "2022-07-17T19:55:49.634521Z",
      "url": "https://files.pythonhosted.org/packages/d8/2d/0c90ec4708cd5efe1056d37d8f7db14ba53e78fd6a4a2090cc3d932666ae/PyCytoData-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}