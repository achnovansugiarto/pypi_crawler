{
  "info": {
    "author": "Your Name",
    "author_email": "you@example.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "<h1 align=\"center\">\n  <b>toychain</b>\n</h1>\n\ntoychain is a very simplistic blockchain node modeling in Python.\nWhile the code is my own adaptation, the implementation is from the very good [tutorial][tutorial_link] by Daniel van Flymen.\nThis adaptation uses [`FastAPI`][fastapi_link] as a web framework, and [`uvicorn`][uvicorn_link] as ASGI server instead of the `Flask` app from van Flymen's tutorial.\n\n# Running\n\nThis repository uses `Poetry` as a build tool.\nGet a local copy through VCS and to set yourself up with `poetry install`.\n\nThe `poetry run node` command is predefined to start up a node, by default at `localhost:5000`.\nAdditionally, you can specify the host and port on which to run the node with the `--host` and `--port` flags.\nYou can then use the same command to spin up several nodes on different ports.\n\n## Docker\n\nIt is possible to run nodes as docker containers.\nTo do so, clone the repository then build the image with `docker build -t blockchain .`\n\nYou can then run the container by mapping the node's port to a desired one at `localhost` on your machine.\nTo map the node to port 5000, run:\n```bash\n$ docker run --init --rm -p 5000:5000 blockchain\n```\n\nTo emulate additional nodes, vary the public port number:\n```bash\n$ docker run --init --rm -p 5001:5000 blockchain\n$ docker run --init --rm -p 5002:5000 blockchain\n$ docker run --init --rm -p 5003:5000 blockchain\n```\n\nYou can then play around by POSTing to `/nodes/register` to add all your running instances to one another's networks, POSTing transactions, mining new blocks, and resolving the blockchain.\n\n# Functionality\n\n## The Chain\n\nThe blockchain is a simple list of blocks.\nA `block` in the chain consists of a dictionnary with the following keys:\n- the `index` at which it is located in the chain,\n- a `timestamp` of when the block was added to the chain,\n- the list of `transactions` recorded in the block,\n- the `proof` of validity for itself,\n- a `previous_hash` tag referencing the hash of the previous block in the chain, for immutability.\n\nA simple example block (with a single transaction) as a json payload would look like this:\n```json\nblock = {\n    \"index\": 1,\n    \"timestamp\": 1506057125.900785,\n    \"transactions\": [\n        {\n            \"sender\": \"8527147fe1f5426f9dd545de4b27ee00\",\n            \"recipient\": \"a77f5cdfa2934df3954a5c7c7da5df1f\",\n            \"amount\": 5,\n        }\n    ],\n    \"proof\": 324984774000,\n    \"previous_hash\": \"2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824\"\n}\n```\n\n## The Node Implementation\n\nThe blockchain functionality is provided by a single class, `BlockChain`, in the `toychain.blockchain` module.\nAn instance of the `BlockChain` class is used to run a node.\nEach node stores a full blockchain, the current transactions (not yet written in the chain), and the list of other nodes in the network.\nIt can:\n- Add a transaction to the list of current transactions,\n- Add a new (validated) block to the chain,\n- Run the proof of work algorithm (here simple, for the sake of computation time),\n- Validate the `proof` of a block,\n- Register other nodes on the network,\n- Infer an arbitrary node's blockchain's validity,\n- Resolve conflict through a consensus algorithm, checking all nodes' chains in the network and adopting the longest valid one.\n\nA node is ran as a REST API using the `FastAPI` web framework, and is attributed a `UUID` at startup.\nThe implementation is in the `toychain.node` module, and the available endpoints of a node are:\n- `GET` endpoint `/mine` to trigger the addition of a new block to the chain,\n- `POST` endpoint `/transactions/new` to add a transaction to the node's list,\n- `GET` endpoint `/chain` to pull the full chain,\n- `POST` endpoint `/nodes/register` to register other nodes' addresses as part of the network,\n- `GET` endpoint `/nodes/resolve`: to trigger a run of the consensus algorithm and resolve conflicts: the longest valid chain of all nodes in the network is used as reference, replacing the local one, and is returned.\n\nOnce the server is running (for instance with `python -m toychain`), an automatic documentation for those is served at the `/docs` and `/redoc` endpoints.\n\nLet's consider our node is running at `localhost:5000`.\nPOSTing a transaction to the node's `transactions/new` endpoint with cURL would be done as follows:\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\n \"sender\": \"d4ee26eee15148ee92c6cd394edd974e\",\n \"recipient\": \"someone-other-address\",\n \"amount\": 5\n}' \"http://localhost:5000/transactions/new\"\n```\n\nLet's now consider that we have started a second node at `localhost:5000`.\nPOSTing a payload to register this new node to the first one's network with cURL would be done as follows:\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\n \"nodes\": [\"http://127.0.0.1:5001\"]\n}' \"http://localhost:5000/nodes/register\"\n```\n\nIf you would rather use [`httpie`][httpie_link], those commands would be, respectively: \n```bash\necho '{ \"sender\": \"d4ee26eee15148ee92c6cd394edd974e\", \"recipient\": \"someone-other-address\", \"amount\": 5 }' | http POST http://localhost:5000/transactions/new\n```\n```bash\necho '{ \"nodes\": [\"http://127.0.0.1:5001\"] }' | http POST http://localhost:5000/nodes/register\n```\n\n[fastapi_link]: https://fastapi.tiangolo.com/\n[httpie_link]: https://httpie.org/\n[tutorial_link]: https://hackernoon.com/learn-blockchains-by-building-one-117428612f46\n[uvicorn_link]: https://www.uvicorn.org/",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fsoubelet/toychain",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "toychain",
    "package_url": "https://pypi.org/project/toychain/",
    "platform": "",
    "project_url": "https://pypi.org/project/toychain/",
    "project_urls": {
      "Homepage": "https://github.com/fsoubelet/toychain",
      "Repository": "https://github.com/fsoubelet/toychain"
    },
    "release_url": "https://pypi.org/project/toychain/0.2.0/",
    "requires_dist": [
      "loguru (>=0.4.1,<0.5.0)",
      "fastapi (>=0.55.1,<0.56.0)",
      "uvicorn (>=0.11.5,<0.12.0)",
      "requests (>=2.23.0,<3.0.0)"
    ],
    "requires_python": ">=3.6,<4.0",
    "summary": "A blockchain toy project, in Python",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7353537,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a02fd63856e30ed34ef4390dfc8bd4d916da937de8631d5544eef59f50acb5bf",
          "md5": "8bc16dc5e8bc09ae082ad7032b0d9251",
          "sha256": "95a584f69d319b57e16e0558d0e5db7006632c799e86daa0a44759fd9c7c1cad"
        },
        "downloads": -1,
        "filename": "toychain-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8bc16dc5e8bc09ae082ad7032b0d9251",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 8394,
        "upload_time": "2020-05-29T15:04:32",
        "upload_time_iso_8601": "2020-05-29T15:04:32.553185Z",
        "url": "https://files.pythonhosted.org/packages/a0/2f/d63856e30ed34ef4390dfc8bd4d916da937de8631d5544eef59f50acb5bf/toychain-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebb3da6ce069a67351910eac116a60727f16efc206c42c9aff31ed4d183610c6",
          "md5": "cc0acc11718d8ee43fba1436f3010f5c",
          "sha256": "373e0afd92fd9c04ae9ceecf9b265b1635c4b56f4996f73fb35dbc94854fc4d1"
        },
        "downloads": -1,
        "filename": "toychain-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cc0acc11718d8ee43fba1436f3010f5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 8277,
        "upload_time": "2020-05-29T15:04:34",
        "upload_time_iso_8601": "2020-05-29T15:04:34.783841Z",
        "url": "https://files.pythonhosted.org/packages/eb/b3/da6ce069a67351910eac116a60727f16efc206c42c9aff31ed4d183610c6/toychain-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a02fd63856e30ed34ef4390dfc8bd4d916da937de8631d5544eef59f50acb5bf",
        "md5": "8bc16dc5e8bc09ae082ad7032b0d9251",
        "sha256": "95a584f69d319b57e16e0558d0e5db7006632c799e86daa0a44759fd9c7c1cad"
      },
      "downloads": -1,
      "filename": "toychain-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8bc16dc5e8bc09ae082ad7032b0d9251",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6,<4.0",
      "size": 8394,
      "upload_time": "2020-05-29T15:04:32",
      "upload_time_iso_8601": "2020-05-29T15:04:32.553185Z",
      "url": "https://files.pythonhosted.org/packages/a0/2f/d63856e30ed34ef4390dfc8bd4d916da937de8631d5544eef59f50acb5bf/toychain-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ebb3da6ce069a67351910eac116a60727f16efc206c42c9aff31ed4d183610c6",
        "md5": "cc0acc11718d8ee43fba1436f3010f5c",
        "sha256": "373e0afd92fd9c04ae9ceecf9b265b1635c4b56f4996f73fb35dbc94854fc4d1"
      },
      "downloads": -1,
      "filename": "toychain-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cc0acc11718d8ee43fba1436f3010f5c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6,<4.0",
      "size": 8277,
      "upload_time": "2020-05-29T15:04:34",
      "upload_time_iso_8601": "2020-05-29T15:04:34.783841Z",
      "url": "https://files.pythonhosted.org/packages/eb/b3/da6ce069a67351910eac116a60727f16efc206c42c9aff31ed4d183610c6/toychain-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}