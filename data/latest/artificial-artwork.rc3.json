{
  "info": {
    "author": "Konstantinos Lampridis",
    "author_email": "k.lampridis@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Natural Language :: English",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Artistic Software",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Image Processing",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Neural Style Transfer - CLI\n===========================\n\nCreate artificial artwork by transfering the appearance of one image (eg a famous painting) to another\nuser-supplied image (eg your favourite photograph).\n\nUses a Neural Style Transfer algorithm to transfer the appearance, which you can run though a CLI program.\n\n`Neural Style Tranfer` (NST) is an algorithm that applies the `style` of an image to the `contents` of another and produces a `generated` image.\nThe idea is to find out how someone, with the `painting style` shown in one image, would depict the `contents` shown in another image.\n\nNST takes a `content` image (eg picture taken with your camera) and a `style` image (eg a picture of a Van Gogh painting) and produces the `generated` image.\n\nThis Python package runs a Neural Style Tranfer algorithm on input `content` and `style` images to produce `generated` images.\n\n\n.. start-badges\n\n.. list-table::\n    :stub-columns: 1\n\n    * - tests\n      - | |circleci| |codecov|\n\n    * - package\n      - | |pypi| |wheel| |py_versions| |commits_since|\n\n    * - containerization\n      - | |docker| |image_size|\n\n    * - code quality\n      - |better_code_hub| |codacy| |code_climate| |maintainability| |scrutinizer|\n\n\n\nOverview\n========\n\nThis package exposes a configurable NST algorithm via a convenient CLI program.\n\nKey features of the package:\n\n* Selection of style layers at runtime\n* Iterative Learning Algorithm using the VGG Deep Neural Network\n* Selection of iteration termination condition at runtime\n* Fast minimization of loss/cost function with parallel/multicore execution, using Tensorflow\n* Persisting of generated images\n\n\n\nInstallation\n------------\n| The Neural Style Transfer - CLI heavely depends on Tensorflow (tf) and therefore it is crucial that tf is installed correctly in your Python environment.\n\nSample commands to install the NST CLI from source, using a terminal:\n\n::\n\n    # Get the Code\n    git clone https://github.com/boromir674/neural-style-transfer.git\n    cd neural-style-transfer\n\n    # Activate a python virtual environment\n    virtualenv env --python=python3\n    source env/bin/activate\n\n    # Install dependencies\n    pip install -r requirements/dex.txt\n\n    # Install NST CLI (in virtual environment)\n    pip install -e .\n\n\nAlternative command to install the NST CLI by downloading the `artificial_artwork` python package from pypi:\n\n::\n\n    pip install artificial_artwork\n\n\nMake the cli available for your host system:\n\n::\n\n    # Setup a symbolic link (in your host system) in a location in your PATH\n    # Assuming ~/.local/bin is in your PATH\n    ln -s $PWD/env/bin/neural-style-transfer ~/.local/bin/neural-style-transfer\n\n    # Deactivate environment since the symbolic link is available in \"global scope\" by now\n    deactivate\n\n\nUsage\n-----\n\nDownload the Vgg-Verydeep-19 pretrained `model` from https://drive.protonmail.com/urls/7RXGN23ZRR#hsw4STil0Hgc.\n\nExctract the model (weights and layer architecture).\n\nFor example use `tar -xvf imagenet-vgg-verydeep-19.tar` to extract in the current directory.\n\nIndicate to the program where to find the model:\n\n::\n\n    export AA_VGG_19=$PWD/imagenet-vgg-verydeep-19.mat\n\nWe have included one 'content' and one 'style' image in the source repository, to facilitate testing.\nYou can use these images to quickly try running the program.\n\nFor example, you can get the code with `git clone git@github.com:boromir674/neural-style-transfer.git`,\nthen `cd neural-style-transfer`.\n\nAssuming you have installed using a symbolic link in your PATH (as shown above), or if you are still\noperating withing your virtual environment, then you can create artificial artwork with the following command.\n\nThe algorithm will apply the style to the content iteratively.\nIt will iterate 100 times. \n\n::\n\n    # Create a directory where to store the artificial artwork\n    mkdir nst_output\n\n    # Run a Neural Style Algorithm for 100 iterations and store output to nst_output directory\n    neural-style-transfer tests/data/canoe_water.jpg tests/data/blue-red-w400-h300.jpg --location nst_output\n\n\nNote we are using as 'content' and 'style' images jpg files included in the distribution (artificial-artwork package).\nWe are using a photo of a canoe on water and an abstract painting with prevalence of blue and red color shades.\n\nAlso note that to demonstrate quicker, both images have been already resized to just 400 pixels of width and 300 of height each.\n\nNavigating to `nst_output` you can find multiple image files generated from running the algorithm. Each file corresponds to the\nimage generated on a different iteration while running the algorithm. The bigger the iteration the more \"style\" has been applied.\n\nCheck out your artificial artwork!\n\n\nDocker image\n------------\n\nWe have included a docker file that we use to build an image where both the `artificial_artwork` package (source code)\nand the pretrained model are present. That way you can immediately start creating artwork!\n\n::\n\n    docker pull boromir674/neural-style-transfer\n\n    export NST_OUTPUT=/home/$USER/nst-output\n\n    CONTENT=/path/to/content-image.jpg\n    STYLE=/path/to/style-image.jpg\n\n    docker run -it --rm -v $NST_OUTPUT:/nst-output boromir674/neural-style-transfer $STYLE $CONTENT --iteratins 200 --location /nst-output\n\n\n\n\n.. |circleci|  image:: https://img.shields.io/circleci/build/github/boromir674/neural-style-transfer/master?logo=circleci\n    :alt: CircleCI\n    :target: https://circleci.com/gh/boromir674/neural-style-transfer/tree/master\n\n\n.. |codecov| image:: https://codecov.io/gh/boromir674/neural-style-transfer/branch/master/graph/badge.svg?token=3POTVNU0L4\n    :alt: Codecov\n    :target: https://app.codecov.io/gh/boromir674/neural-style-transfer/branch/master\n    \n\n\n.. |pypi| image:: https://img.shields.io/pypi/v/artificial-artwork?color=blue&label=pypi&logo=pypi&logoColor=%23849ed9\n    :alt: PyPI\n    :target: https://pypi.org/project/artificial-artwork/\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/artificial-artwork?logo=python&logoColor=%23849ed9\n    :alt: PyPI - Wheel\n    :target: https://pypi.org/project/artificial-artwork\n\n.. |py_versions| image:: https://img.shields.io/pypi/pyversions/artificial-artwork?color=blue&logo=python&logoColor=%23849ed9\n    :alt: PyPI - Python Version\n    :target: https://pypi.org/project/artificial-artwork\n\n.. |commits_since| image:: https://img.shields.io/github/commits-since/boromir674/neural-style-transfer/v0.6.1/master?color=blue&logo=Github\n    :alt: GitHub commits since tagged version (branch)\n    :target: https://github.com/boromir674/neural-style-transfer/compare/v0.6.1..master\n\n\n\n.. |better_code_hub| image:: https://bettercodehub.com/edge/badge/boromir674/neural-style-transfer?branch=master\n    :alt: Better Code Hub\n    :target: https://bettercodehub.com/\n\n.. |codacy| image:: https://app.codacy.com/project/badge/Grade/07b27ac547a94708aefc5e845d2b6d01\n    :alt: Codacy\n    :target: https://www.codacy.com/gh/boromir674/neural-style-transfer/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=boromir674/neural-style-transfer&amp;utm_campaign=Badge_Grade\n\n.. |code_climate| image:: https://api.codeclimate.com/v1/badges/2ea98633f88b75e87d1a/maintainability\n   :alt: Maintainability\n   :target: https://codeclimate.com/github/boromir674/neural-style-transfer/maintainability\n\n.. |maintainability| image:: https://img.shields.io/codeclimate/tech-debt/boromir674/neural-style-transfer?logo=CodeClimate\n    :alt: Technical Debt\n    :target: https://codeclimate.com/github/boromir674/neural-style-transfer/maintainability\n\n.. |scrutinizer| image:: https://img.shields.io/scrutinizer/quality/g/boromir674/neural-style-transfer/master?logo=scrutinizer-ci\n    :alt: Scrutinizer code quality\n    :target: https://scrutinizer-ci.com/g/boromir674/neural-style-transfer/?branch=master\n\n\n\n.. |version| image:: https://img.shields.io/pypi/v/topic-modeling-toolkit.svg\n    :alt: PyPI Package latest release\n    :target: https://pypi.org/project/topic-modeling-toolkit\n\n.. |python_versions| image:: https://img.shields.io/pypi/pyversions/artificial-artwork.svg\n    :alt: Supported versions\n    :target: https://pypi.org/project/artificial-artwork/\n\n\n\n.. |docker| image:: https://img.shields.io/docker/v/boromir674/neural-style-transfer/latest?logo=docker&logoColor=%23849ED9\n    :alt: Docker Image Version (tag latest semver)\n    :target: https://hub.docker.com/r/boromir674/neural-style-transfer\n\n.. |image_size| image:: https://img.shields.io/docker/image-size/boromir674/neural-style-transfer/latest?logo=docker&logoColor=%23849ED9\n    :alt: Docker Image Size (tag)\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "https://github.com/boromir674/neural-style-transfer/archive/v0.6.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/boromir674/neural-style-transfer",
    "keywords": "neural style transfer,deep learning,cli",
    "license": "AGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "artificial-artwork",
    "package_url": "https://pypi.org/project/artificial-artwork/",
    "platform": "All",
    "project_url": "https://pypi.org/project/artificial-artwork/",
    "project_urls": {
      "Bug Tracker": "https://github.com/boromir674/neural-style-transfer/issues",
      "Download": "https://github.com/boromir674/neural-style-transfer/archive/v0.6.1.tar.gz",
      "Homepage": "https://github.com/boromir674/neural-style-transfer",
      "Source Code": "https://github.com/boromir674/neural-style-transfer"
    },
    "release_url": "https://pypi.org/project/artificial-artwork/0.6.1/",
    "requires_dist": [
      "click (~=8.0.3)",
      "attrs (~=21.2)",
      "numpy (<1.22.0,>=1.21.0)",
      "imageio (==2.10.3)",
      "tensorflow (==2.2.0)"
    ],
    "requires_python": "",
    "summary": "Create artificial artwork by transfering the appearance of one image (eg a famous painting) to another user-supplied image (eg your favourite photograph).",
    "version": "0.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12177232,
  "releases": {
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0d515d7886fa4c628e32a85938db4b7b31e47b1b04e81c2cef4f1fc170b4a52",
          "md5": "d2450bd47bc9b3942eaa4c52a4932afd",
          "sha256": "e2a3f67e6f46e513cababbb77ac30cc0543381a35b1614d97e3f7608aef8e578"
        },
        "downloads": -1,
        "filename": "artificial_artwork-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d2450bd47bc9b3942eaa4c52a4932afd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28801,
        "upload_time": "2021-11-10T02:17:18",
        "upload_time_iso_8601": "2021-11-10T02:17:18.332890Z",
        "url": "https://files.pythonhosted.org/packages/c0/d5/15d7886fa4c628e32a85938db4b7b31e47b1b04e81c2cef4f1fc170b4a52/artificial_artwork-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad25718f11ed93881c835114988ba169a78f307dfb3101043961a696d5ffa233",
          "md5": "0bae1b1f3730f072217269ac1a76c7bb",
          "sha256": "d58f3f13244fced13b1115d3c9fe1e2fd68942ce950519e33738ed6f5fbf74a3"
        },
        "downloads": -1,
        "filename": "artificial_artwork-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0bae1b1f3730f072217269ac1a76c7bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 375480,
        "upload_time": "2021-11-10T02:17:20",
        "upload_time_iso_8601": "2021-11-10T02:17:20.943288Z",
        "url": "https://files.pythonhosted.org/packages/ad/25/718f11ed93881c835114988ba169a78f307dfb3101043961a696d5ffa233/artificial_artwork-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "144613c1b1f62238c018adc4623c0cce763c20fdf06a86e6e6c535efdb5ac0dc",
          "md5": "632fac7d31a84678a64599d2c57fe8dd",
          "sha256": "2013d1e478d6be6931c96d510f29f6559a6281cd9da4fcc4fbfeae75d84426a8"
        },
        "downloads": -1,
        "filename": "artificial_artwork-0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "632fac7d31a84678a64599d2c57fe8dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32487,
        "upload_time": "2021-11-18T01:53:18",
        "upload_time_iso_8601": "2021-11-18T01:53:18.093712Z",
        "url": "https://files.pythonhosted.org/packages/14/46/13c1b1f62238c018adc4623c0cce763c20fdf06a86e6e6c535efdb5ac0dc/artificial_artwork-0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52a5833660c3d82920ba75dfacfc6f49a8748a40840d153d9e172bb9cebd990e",
          "md5": "e0b7c6c96694b81180b8f0f8507a19f9",
          "sha256": "d382c3a7f97ed96dbffc9c48f378a493fc23a91186a58a7b4ddc065037791f85"
        },
        "downloads": -1,
        "filename": "artificial_artwork-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e0b7c6c96694b81180b8f0f8507a19f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 380284,
        "upload_time": "2021-11-18T01:53:20",
        "upload_time_iso_8601": "2021-11-18T01:53:20.898327Z",
        "url": "https://files.pythonhosted.org/packages/52/a5/833660c3d82920ba75dfacfc6f49a8748a40840d153d9e172bb9cebd990e/artificial_artwork-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "400394a70b821a6b0bd82dd1760ce9fbee2a054dca49621d036c54c73ecec419",
          "md5": "3d7225e87f9fb5d62e52366ab08a2cf5",
          "sha256": "25043308c62708951a7551e6850e58f3757b80e64fab07d8d9643c9f84961a9d"
        },
        "downloads": -1,
        "filename": "artificial_artwork-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d7225e87f9fb5d62e52366ab08a2cf5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41261,
        "upload_time": "2021-12-01T13:53:57",
        "upload_time_iso_8601": "2021-12-01T13:53:57.001202Z",
        "url": "https://files.pythonhosted.org/packages/40/03/94a70b821a6b0bd82dd1760ce9fbee2a054dca49621d036c54c73ecec419/artificial_artwork-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47200715f3e1dae2a8802bbee3e1a55ffdca8e3b603c9df20425028b54808613",
          "md5": "64d82b28fa6a62a239d0ea87ec77e3b4",
          "sha256": "7c8ea22139b3d3930efa22ec2785bc616069175ad12d37e147d48c4ad54481b3"
        },
        "downloads": -1,
        "filename": "artificial_artwork-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "64d82b28fa6a62a239d0ea87ec77e3b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 415425,
        "upload_time": "2021-12-01T13:54:00",
        "upload_time_iso_8601": "2021-12-01T13:54:00.483516Z",
        "url": "https://files.pythonhosted.org/packages/47/20/0715f3e1dae2a8802bbee3e1a55ffdca8e3b603c9df20425028b54808613/artificial_artwork-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "400394a70b821a6b0bd82dd1760ce9fbee2a054dca49621d036c54c73ecec419",
        "md5": "3d7225e87f9fb5d62e52366ab08a2cf5",
        "sha256": "25043308c62708951a7551e6850e58f3757b80e64fab07d8d9643c9f84961a9d"
      },
      "downloads": -1,
      "filename": "artificial_artwork-0.6.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d7225e87f9fb5d62e52366ab08a2cf5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 41261,
      "upload_time": "2021-12-01T13:53:57",
      "upload_time_iso_8601": "2021-12-01T13:53:57.001202Z",
      "url": "https://files.pythonhosted.org/packages/40/03/94a70b821a6b0bd82dd1760ce9fbee2a054dca49621d036c54c73ecec419/artificial_artwork-0.6.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47200715f3e1dae2a8802bbee3e1a55ffdca8e3b603c9df20425028b54808613",
        "md5": "64d82b28fa6a62a239d0ea87ec77e3b4",
        "sha256": "7c8ea22139b3d3930efa22ec2785bc616069175ad12d37e147d48c4ad54481b3"
      },
      "downloads": -1,
      "filename": "artificial_artwork-0.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "64d82b28fa6a62a239d0ea87ec77e3b4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 415425,
      "upload_time": "2021-12-01T13:54:00",
      "upload_time_iso_8601": "2021-12-01T13:54:00.483516Z",
      "url": "https://files.pythonhosted.org/packages/47/20/0715f3e1dae2a8802bbee3e1a55ffdca8e3b603c9df20425028b54808613/artificial_artwork-0.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}