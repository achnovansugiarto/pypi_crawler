{
  "info": {
    "author": "Antti Solonen",
    "author_email": "antti.solonen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# thetafit\n\nA simple python tool for Bayesian parameter estimation of nonlinear models, inspired by the [mcmcstat MATLAB package](https://github.com/mjlaine/mcmcstat).\n\nSupports MAP estimation (optimization) and MCMC sampling via the Adaptive Metropolis (AM) algorithm.\n\nThe user supplies the function for calculating ``-2*log(likelihood)``, which, for Gaussian likelihood, amounts to calculating the sum of squares misfit between data and model.\n\nA simple example is given below, for more examples see the [demos](https://github.com/solbes/thetafit/tree/main/demos) folder.\n\n## Example: MONOD model\n\nLet us fit the parameters ``theta = [a,b]`` of a simple model ``y = ax/(b+x) + N(0,sig2)``, describing bacterial growth.\n\n### 1) Define model and data\n\nFirst, we define the data and the sum of squares function. The function needs to be given in the form ``ssfun(theta,data)``, where ``theta`` is a dict of parameter name-value pairs, and ``data`` is an object of arbitrary form that contains typically the data and all other constants etc. that the function evaluation needs.\n\n```python\nimport numpy as np\nimport pandas as pd\nfrom thetafit import Parameter, optimize, sample\nfrom thetafit.utils import McmcOptions, jacob\nimport matplotlib.pyplot as plt\n\ndata = {\n    'x': np.array([28., 55., 83., 110., 138., 225., 375.]),\n    'y': np.array([0.053, 0.060, 0.112, 0.105, 0.099, 0.122, 0.125]),\n    'sig2': 1.0,\n}\n\nmodelfun = lambda theta, x: theta['a']*x/(theta['b']+x)\nssfun    = lambda theta, data: sum((data['y']-modelfun(theta, data['x']))**2/data['sig2'])\n```\n\n### 2) MAP estimation\n\nThen, let us first minimize the sum of squares to get the MAP estimate. The initial values (with optional bounds) for the parameters are given as a list of ``Parameter`` objects. Here, we use a helper function for constructing such a list from the ``theta`` dict. \n\nThe optimization is called as ``optimize(ssfun, data, pars, **kwargs)``, where ``**kwargs`` are optional optimization configs fed to ``scipy.optimize``, where one can choose the optimizer and its settings.\n\n```python\nth0 = {'a': 0.15, 'b': 100}\n\nparams = lambda theta: [\n    Parameter('a', init=theta['a'], target=True),\n    Parameter('b', init=theta['b'], target=True)\n]\n\nthopt, res = optimize(ssfun, data, params(th0))\nprint(thopt)\n```\n\nwhich outputs the parameter values (and some information about the optimization process in ``res``):\n\n```python\n{'a': 0.14541945253897567, 'b': 49.05274598150096}\n```\n\n### 3) MCMC\n\nLet us then do MCMC for the parameters, starting from the initial values obtained from the optimization. First, let us fix the error variance ``sig2`` to the mean squared error (MSE) estimate:\n\n```python\nmse = res.fun/(len(data['y'])-2)\ndata['sig2'] = mse\n```\n\nThen, we calculate the initial proposal covariance matrix via the Gauss-Newton Hessian approximation at the MAP estimate (note that a diagonal initial proposal covariance could be used as well, the adaptation will tune the proposal as the sampling proceeds).\n\n```python\nJ = jacob(modelfun, data['x'], params(thopt))\nqcov = np.linalg.inv(J.T.dot(J))*mse\n```\n\nThen we define the options for the MCMC run via the ``McmcOptions`` object and perform the sampling:\n\n```python\noptions = McmcOptions(nsimu=4000, qcov=qcov, adaptint=100, printint=500)\nres, chain, sschain = sample(ssfun, data, params(thopt), options)\n```\n\nwhich outputs the progress of the sampling:\n\n```\nSampling these parameters:\nname\tstart\t[min,max]\na\t0.14541945253897567\t[-inf,inf]\nb\t49.05274598150096\t[-inf,inf]\ni: 500, rejected: 60.8%, out of bounds: 0.0%\ni: 1000, rejected: 62.6%, out of bounds: 0.0%\ni: 1500, rejected: 63.8%, out of bounds: 0.0%\ni: 2000, rejected: 64.3%, out of bounds: 0.0%\ni: 2500, rejected: 64.9%, out of bounds: 0.0%\ni: 3000, rejected: 65.5%, out of bounds: 0.0%\ni: 3500, rejected: 65.8%, out of bounds: 0.0%\n```\n\nThen, let us visualize the results:\n\n```python\npd.plotting.scatter_matrix(chain)\n```\n![thetafit_params](https://user-images.githubusercontent.com/6495497/146729259-07466ecf-84ef-4ddf-9d9c-ac7e205cd0b1.png)\n\n```python\nxplot = np.linspace(0,400)\npreds = np.stack([modelfun(chain.loc[i], xplot) for i in range(2000,4000,10)])\n\nplt.figure(figsize=(7,4))\nplt.plot(xplot, preds.T, 'r-', lw=1, alpha=0.2)\nplt.plot(data['x'], data['y'], 'kx')\nplt.grid(True)\nplt.show()\n```\n\n![thetafit_preds](https://user-images.githubusercontent.com/6495497/146729611-5ffb38cc-676e-491f-a3aa-d577b7b894e0.png)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/solbes/thetafit/archive/refs/tags/0.0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/solbes/thetafit",
    "keywords": "bayes,nonlinear,parameter estimation",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "thetafit",
    "package_url": "https://pypi.org/project/thetafit/",
    "platform": "",
    "project_url": "https://pypi.org/project/thetafit/",
    "project_urls": {
      "Download": "https://github.com/solbes/thetafit/archive/refs/tags/0.0.1.tar.gz",
      "Homepage": "https://github.com/solbes/thetafit"
    },
    "release_url": "https://pypi.org/project/thetafit/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Parameter estimation for nonlinear models",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12368388,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc09d88ef10c2d522161065e45b6e353e0640316765a390908bc5ec91e590694",
          "md5": "2810aa35036f05ebc2c0d1824db7969d",
          "sha256": "4531af1ecd02120e164a95efa309e2a6627be8b6d89b63cd2982c4a59d181fd3"
        },
        "downloads": -1,
        "filename": "thetafit-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2810aa35036f05ebc2c0d1824db7969d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6060,
        "upload_time": "2021-12-21T07:10:55",
        "upload_time_iso_8601": "2021-12-21T07:10:55.947117Z",
        "url": "https://files.pythonhosted.org/packages/dc/09/d88ef10c2d522161065e45b6e353e0640316765a390908bc5ec91e590694/thetafit-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc09d88ef10c2d522161065e45b6e353e0640316765a390908bc5ec91e590694",
        "md5": "2810aa35036f05ebc2c0d1824db7969d",
        "sha256": "4531af1ecd02120e164a95efa309e2a6627be8b6d89b63cd2982c4a59d181fd3"
      },
      "downloads": -1,
      "filename": "thetafit-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2810aa35036f05ebc2c0d1824db7969d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6060,
      "upload_time": "2021-12-21T07:10:55",
      "upload_time_iso_8601": "2021-12-21T07:10:55.947117Z",
      "url": "https://files.pythonhosted.org/packages/dc/09/d88ef10c2d522161065e45b6e353e0640316765a390908bc5ec91e590694/thetafit-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}