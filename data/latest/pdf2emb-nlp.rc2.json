{
  "info": {
    "author": "AndreaSottana",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "[![Build Badge](https://github.com/andreasottana/pdf2emb_nlp/workflows/build/badge.svg)](https://github.com/AndreaSottana/pdf2emb_nlp/actions)\n[![PyPI version](https://img.shields.io/pypi/v/pdf2emb_nlp.svg)](https://pypi.org/project/pdf2emb-nlp/)\n[![Licence](https://img.shields.io/github/license/AndreaSottana/pdf2emb_nlp.svg)](https://github.com/AndreaSottana/pdf2emb_nlp/blob/master/LICENSE)\n[![Coverage Status](https://coveralls.io/repos/github/AndreaSottana/pdf2emb_nlp/badge.svg?branch=master)](https://coveralls.io/github/AndreaSottana/pdf2emb_nlp?branch=master)\n\nNLP tool for scraping text from a corpus of PDF files, embedding the sentences in the text and finding semantically similar sentences to a given search query\n====================================================================================================================================================================================\n\nThe code in this repository performs 3 main tasks.  \n- Scraping the text from a corpus of PDF files. The text is then cleaned, split into sentences, and saved into a pd.DataFrame, .csv or .parquet file containing 3 columns. One column contains the text of all the PDFs in the corpus (one sentence per row), the second column contains the title of the PDF where each sentence is taken from, and the third column contains the number of the page where each sentence is located within that PDF. This enables easy lookup.\n- Embedding all the scraped sentences in the corpus of PDFs using three different NLP models: Word2Vec (with the option to include Tf-Idf weights), ELMo and BERT. For each model, sentence-level embeddings are generated.\n- Corpus querying. This is in the form of a search tool, where the user can input a search query (one to a few words), and the tool will output the most similar sentences in the PDF corpus to the user query. This is done by comparing the embedding of the user query against all the embeddings of each sentence in the scraped corpus of PDFs. This effectively acts as a search engine. It is important that the model used to embed the user's search query matches the NLP model used to embed the PDF corpus. The default similarity metric is cosine similarity, although this can be changed by the user.\n\nProject Organization\n------------------------\n\n    ├── LICENSE            <- The full Licence text. This project is released under the MIT Licence.\n    ├── Makefile           <- Makefile with commands like `make data` or `make train`\n    ├── README.md          <- The top-level README for developers using this project.\n    ├── .envrc             <- The file containing the set up for environment variables (required if using the runner \n    │                         scripts). `$PWD` should correspond to the directory where you clone this repository.\n    ├── .gitignore         <- The files (including data) which are not uploaded to GitHub. Edit as required.\n    ├── data\n    │   ├── external       <- Data from third party sources.\n    │   ├── interim        <- Intermediate data that has been transformed.\n    │   ├── processed      <- The final, canonical data sets for modeling. This is where you cleaned datasets will be saved.\n    │   └── raw            <- The original, immutable data dump.\n    │       └── pdfs       <- Where your PDF files are stored.\n    │\n    ├── models             <- Trained and serialized models. This is where your NLP models will be saved. No models have \n    │                         been uploaded to GitHub.\n    │\n    ├── requirements.txt   <- The requirements file for reproducing the analysis environment.\n    │\n    ├── setup.py           <- Makes project pip installable (pip install -e .) so pdf2emb_nlp can be imported\n    │\n    ├── MANIFEST.in        <- Tells setup.py which package data to include and exclude.\n    │\n    ├── config             <- This folders stores configuration files (for example suggested filenames for saving \n    │   │                     specific objects) that are read in by some of the runner scripts. Edit as required.\n    │   ├── filenames.json            \n    │   └── words_to_replace.json\n    │\n    ├── scripts            <- Executable scripts are saved here. They should be run in the order listed below.\n    │   ├── data_processing_runner.py   \n    │   ├── embeddings_runner.py\n    │   ├── user_search_runner.py\n    │   └── tmp            <- The folder where the loggers are saved (for example, debug.log, info.log, warning.log)\n    │                         Logs have not been uploaded to GitHub.\n    │\n    ├── pdf2emb_nlp        <- Source code for use in this project. See description below for how to use the files.\n    │   ├── __init__.py    <- Makes pdf2emb_nlp a Python module\n    │   ├── arrange_text.py\n    │   ├── embedder.py\n    │   ├── json_creator.py\n    │   ├── logging.yaml\n    │   ├── process_user_queries.py\n    │   └── scraper.py\n    │\n    ├── tests              <- Unit tests for all functions and methods defined in all modules within the pdf2emb_nlp folder, to                \n    │   │                     be run using pytest. It also includes an end-to-end test. These should not be modified by\n    │   │                     the user.  \n    │   ├── conftest.py\n    │   ├── end_to_end_test.py\n    │   ├── test_arrange_text.py\n    │   ├── test_embedder.py\n    │   ├── test_process_user_queries.py\n    │   ├── test_scraper.py\n    │   └── fixtures       <- This folder contains all the pytest fixtures required to run the tests. These should not\n    │       │                 be modified by the user.                \n    │       ├── dummy_embeddings.npy\n    │       ├── dummy_sentences.csv\n    │       ├── dummy_sentences.parquet\n    │       ├── dummy_sentences.txt\n    │       ├── expected_bert_embeddings.npy\n    │       ├── expected_elmo_embeddings.npy\n    │       ├──  expected_tfidf_scores.json\n    │       ├── expected_w2v_embeddings_tfidf_false.npy\n    │       ├── expected_w2v_embeddings_tfidf_true.npy\n    │       ├── full_df_with_embeddings.parquet.gzip\n    │       ├── test_pdf_1.pdf\n    │       ├── test_pdf_2.pdf\n    │       ├── tfidf_vectorizer.pickle\n    │       ├── word2vec.pickle\n    │       ├── word2vec_tfidf.pickle\n    │       └── words_to_replace.json\n    │\n    ├── test_environment.py\n    └── tox.ini            <- tox file with settings for running tox; see tox.testrun.org\n\n\n--------\n\nClone this repository from GitHub, or install this project by running \n```\n$ pip install pdf2emb_nlp\n```\non the terminal command (or `pip3`, as appropriate). \nIf you have cloned it from GitHub, you can run a test to ensure your environment is properly set-up. This project has \nnot been tested on versions of Python older than 3.6, and some versions of the `numpy` library older than 1.17 are also known \nto cause issues. Please run the following line in your terminal\n```\n$ PYTHONHASHSEED=123 python3 -m pytest\n```\nThere should be 35 tests. If they all pass, you're good to start using this package. If some of the tests fail, please \ncheck your environment. This project has only been tested with the environment as described in the `requirements.txt` \nfile. Note that the environment variable \n`PYTHONHASHSEED` must be set to `\"123\"` while running the tests, to ensure deterministic reproducibility of the Word2Vec \nmodels. Two tests will fail if this is not set up correctly.\n\nEach module has been fully documented.  \nBefore you start, please configure your environment variables according to your own directory path. Please refer to\nthe `.envrc` file, where `$PWD` corresponds to the directory path where this repository has been cloned.\n\nIn order to scrape the text from a corpus of PDF files, you will need to save your PDFs in the folder (`~/data/raw/pdfs`). \nAlternatively to scraping files from local storage, this package also supports cloud storage on AWS S3 buckets only \n(other cloud storage solutions are not natively supported).\nYou can make use of the `data_processing_runner.py` script to scrape the PDFs, clean the text, split all the text into \nsentences,  and save this into a .csv file. The script imports the two modules `scraper` and `arrange_text`.\n```python\nimport os\nimport yaml\nimport logging.config\nfrom pdf2emb_nlp.scraper import DocumentScraper\nfrom pdf2emb_nlp.arrange_text import CorpusGenerator\n\n\nif __name__ == \"__main__\":\n    DATA_DIR = os.getenv('DATA_DIR')\n    CONFIG_DIR = os.getenv('CONFIG_DIR')\n    LOGGING_CONFIG = os.getenv('LOGGING_CONFIG')\n\n    with open(LOGGING_CONFIG, 'r') as f:\n        config = yaml.safe_load(f)\n    logging.config.dictConfig(config)\n\n    pdfs_folder = os.path.join(DATA_DIR, 'raw', 'pdfs')\n    json_path = os.path.join(CONFIG_DIR, 'words_to_replace.json')\n    scraper = DocumentScraper(pdfs_folder, json_path)\n    df_by_page = scraper.document_corpus_to_pandas_df()\n    generator = CorpusGenerator(df_by_page)\n    df_by_sentence = generator.df_by_page_to_df_by_sentence()\n\n    df_by_page.to_csv(os.path.join(DATA_DIR, 'processed', 'corpus_by_page.csv'))  # optional, for reference\n    df_by_sentence.to_csv(os.path.join(DATA_DIR, 'processed', 'corpus_by_sentence.csv'), index=False)\n\n```\nThe file `words_to_replace.json` in the `config` folder is used for ad-hoc text cleaning. \nIf using an AWS S3 bucket for storing PDFs, please set `from_s3_bucket=True`, so the `scraper` will be\n```python\nscraper = DocumentScraper(pdfs_folder, json_path, from_s3_bucket = True)\n```\nIf you choose this option, the `pdfs_folder` can either start with `\"s3://\"` or omit this prefix. Please ensure you already have the \ncorrect credentials for accessing the S3 bucket you are pointing to, and that the path is correct.  \nWhen running\n`scraper.document_corpus_to_pandas_df()`, the json is deserialised into a python dictionary, and the corpus text will be\ncleaned by replacing each key in this dictionary with its value. In order to modify and customize the content of this\njson file, run the script `pdf2emb_nlp/json_creator.py` and adapt it as necessary.\n\nOnce you have created a file `corpus_by_sentence.csv`, you can embed the sentences in this file using your model of choice out of \nWord2Vec (with the option to include Tf-Idf weights), ELMo and BERT. For each model, sentence-level embeddings are \ngenerated. Where the original model would generate word-level embeddings, sentence-level embeddings have been created by \naveraging all the word embeddings of the respective sentence. The `embeddings_runner.py` script is an example of how you \ncould run all 4 NLP models and save them separately. It imports the `embedder` module.\n\n```python\nimport os\nimport json\nimport yaml\nimport logging.config\nimport pandas as pd\nfrom pdf2emb_nlp.embedder import Embedder\n\n\nmodels_to_be_run = [\n    'Word2Vec_tfidf_weighted',  # comment out as needed\n    'Word2Vec',\n    'BERT',\n    'ELMo',\n]\n\n\nif __name__ == '__main__':\n    DATA_DIR = os.getenv('DATA_DIR')\n    MODELS_DIR = os.getenv('MODELS_DIR')\n    CONFIG_DIR = os.getenv('CONFIG_DIR')\n    LOGGING_CONFIG = os.getenv('LOGGING_CONFIG')\n\n    with open(LOGGING_CONFIG, 'r') as f:\n        config = yaml.safe_load(f)\n    logging.config.dictConfig(config)\n\n    with open(os.path.join(CONFIG_DIR, 'filenames.json'), 'r') as f:\n        file_names = json.load(f)\n\n    corpus_filename = \"corpus_by_sentence.csv\"\n    corpus_by_sentence = pd.read_csv(os.path.join(DATA_DIR, \"processed\", corpus_filename))\n    list_of_sentences = corpus_by_sentence['sentence'].values.tolist()\n    print(\"Instantiating Embedder class.\")\n    embedder = Embedder(list_of_sentences)\n\n    for model in models_to_be_run:\n        print(f\"Calculating {model} embeddings.\")\n        if model == 'Word2Vec_tfidf_weighted':\n            sentence_embeddings, model_obj, tfidf_vectorizer = embedder.compute_word2vec_embeddings(tfidf_weights=True)\n            embedder.save_model(tfidf_vectorizer, MODELS_DIR, file_names[model]['vectorizer_filename'])\n            # the line above is specific to Word2Vec with TfIdf vectorizer and cannot be generalized to other models\n        elif model == 'Word2Vec':\n            sentence_embeddings, model_obj, _ = embedder.compute_word2vec_embeddings(tfidf_weights=False)\n        elif model == 'BERT':\n            bert_model = 'bert-base-nli-stsb-mean-tokens'  # This line is specific to BERT\n            sentence_embeddings, model_obj = embedder.compute_bert_embeddings(bert_model)\n        elif model == 'ELMo':\n            sentence_embeddings, model_obj = embedder.compute_elmo_embeddings()\n        else:\n            raise KeyError(f'The model {model} is not recognized as input.')\n        print(f\"{model} embeddings calculated. Saving model.\")\n        embedder.save_embeddings(sentence_embeddings, MODELS_DIR, file_names[model]['embeddings_filename'])\n        embedder.save_model(model_obj, MODELS_DIR, file_names[model]['model_filename'])\n        print(f\"{model} model saved. Saving .parquet file.\")\n        df = embedder.add_embeddings_to_corpus_df(\n            os.path.join(DATA_DIR, \"processed\", corpus_filename), sentence_embeddings, file_names[model]['column_name']\n        )\n        embedder.df_to_parquet(df, os.path.join(DATA_DIR, \"processed\", file_names[model]['parquet_filename']))\n        print(f\"Parquet file saved. All steps done for the {model} model.\")\n\n```\nEach model has been saved as a `.pickle` file in the `models` folder, each model's embeddings as a `.npy` file in the \n`models` folder, and each pd.DataFrame as a `.parquet` file in the `data/processed` folder. Each `.parquet` file \ncontains the same data as the `corpus_by_sentence.csv` file previously saved, with an added column, representing the sentence embeddings for the \nchosen model. A separate `.parquet` has been saved for each model, although the user may modify the script above to save\nall models' embeddings in the same `.parquet` file. The file names of the `.pickle`, `.npy` and `.parquet` files are\nstored in the `filenames.json ` in the `config` folder. In order to modify and customize these names, run the script \n`pdf2emb_nlp/json_creator.py` and adapt it as necessary.\n\nFinally, in order to search through your corpus of PDF files given a *user search query* (which can be a single word or a \nfew words), run the `user_search_runner.py` script in the `scripts` folder, which imports the `process_user_queries` module:\n```python\nimport os\nimport yaml\nimport json\nimport logging.config\nfrom pdf2emb_nlp.process_user_queries import query_embeddings\n\n\nif __name__ == '__main__':\n    user_search_input = 'cell phone'\n    model_name = 'BERT'  # change as appropriate\n    DATA_DIR = os.getenv(\"DATA_DIR\")\n    CONFIG_DIR = os.getenv('CONFIG_DIR')\n    MODELS_DIR = os.getenv(\"MODELS_DIR\")\n    LOGGING_CONFIG = os.getenv(\"LOGGING_CONFIG\")\n    with open(LOGGING_CONFIG, 'r') as f:\n        config = yaml.safe_load(f)\n    logging.config.dictConfig(config)\n    with open(os.path.join(CONFIG_DIR, 'filenames.json'), 'r') as f:\n        file_names = json.load(f)\n\n    tfidf_vectorizer = os.path.join(MODELS_DIR, \"tfidf_vectorizer.pickle\")\n\n    model = os.path.join(MODELS_DIR, file_names[model_name][\"model_filename\"])  # this is optional for ELMo and BERT.\n    trained_df_path = os.path.join(DATA_DIR, 'processed', file_names[model_name][\"parquet_filename\"])\n    user_input_embedding, trained_df = query_embeddings(\n        user_search_input, trained_df_path, file_names[model_name][\"column_name\"], model_name, model,\n        distance_metric='cosine', tfidf_vectorizer=tfidf_vectorizer\n    )\n    # tfidf_vectorizer is not used (and optional) when model is not 'Word2Vec_TfIdf_weighted'\n    if user_input_embedding.size and not trained_df.empty:  # they must not be empty\n        print(trained_df.sort_values('metric_distance', ascending=True)[['sentence', 'metric_distance']].\n              reset_index(drop=True).head(10))\n```\n\nAt this point, the `user_input_embedding` is the embedding of the user search query, and `trained_df` is the \npd.DataFrame containing a column with the metric distance between the user embedding and each individual sentence \nembedding in the corpus (default metric: cosine similarity). If you want to visualise the most similar sentences to the\nuser search query, you can simply sort the pd.DataFrame by its `metric_distance` column.\n```python\nprint(trained_df.sort_values('metric_distance', ascending=True)[['sentence', 'metric_distance']].\n              reset_index(drop=True)\n```\n\n<p><small>Project description adapted from the <a target=\"_blank\" href=\"https://drivendata.github.io/cookiecutter-data-science/\">cookiecutter data science project template</a>. #cookiecutterdatascience</small></p>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.python.org/pypi/pdf2emb_nlp",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AndreaSottana/pdf2emb_nlp",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pdf2emb-nlp",
    "package_url": "https://pypi.org/project/pdf2emb-nlp/",
    "platform": "",
    "project_url": "https://pypi.org/project/pdf2emb-nlp/",
    "project_urls": {
      "Download": "https://pypi.python.org/pypi/pdf2emb_nlp",
      "Homepage": "https://github.com/AndreaSottana/pdf2emb_nlp"
    },
    "release_url": "https://pypi.org/project/pdf2emb-nlp/0.2.0/",
    "requires_dist": [
      "allennlp (~=0.9.0)",
      "boto3 (~=1.10.34)",
      "gensim (~=3.8.1)",
      "nltk (~=3.4.5)",
      "numpy (~=1.18.2)",
      "pandas (~=0.25.3)",
      "ply (~=3.11)",
      "pyarrow (~=0.16.0)",
      "pytest (~=5.4.1)",
      "s3fs (~=0.4.2)",
      "scikit-learn (~=0.22.1)",
      "scipy (~=1.4.1)",
      "sentence-transformers (~=0.2.5.1)",
      "slate3k (~=0.5.3)",
      "typing (~=3.7.4.1)",
      "tqdm (~=4.45.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "NLP tool for scraping text from a corpus of PDF files, embedding the sentences in the text and finding semantically similar sentences to a given search query",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7991572,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85041a42f131122dd0b4cd25d389a8718ebf59a0e79cd6e47a32fea4ada5ac40",
          "md5": "12c9d9acd40669a5a9a1ce935b19e869",
          "sha256": "5f43c889ce7dfea96fa5ae082af084de28841fa251c2296323ddb4e246c20a00"
        },
        "downloads": -1,
        "filename": "pdf2emb_nlp-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "12c9d9acd40669a5a9a1ce935b19e869",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18417,
        "upload_time": "2020-04-05T12:23:58",
        "upload_time_iso_8601": "2020-04-05T12:23:58.863023Z",
        "url": "https://files.pythonhosted.org/packages/85/04/1a42f131122dd0b4cd25d389a8718ebf59a0e79cd6e47a32fea4ada5ac40/pdf2emb_nlp-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58d27c9acfa13517f2bd11fb98e5437ad54666c14ea779b9b9f2c66471f0d0c7",
          "md5": "a471efa07b83a67ddaaf37fbaf5d72f0",
          "sha256": "18f10545f82ae3477d901bfa713d83798e0c3adef9b71212e99fba8e8219fb0a"
        },
        "downloads": -1,
        "filename": "pdf2emb_nlp-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a471efa07b83a67ddaaf37fbaf5d72f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17777,
        "upload_time": "2020-04-05T12:24:01",
        "upload_time_iso_8601": "2020-04-05T12:24:01.415803Z",
        "url": "https://files.pythonhosted.org/packages/58/d2/7c9acfa13517f2bd11fb98e5437ad54666c14ea779b9b9f2c66471f0d0c7/pdf2emb_nlp-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfda247b2d5aeba388797da05a96ef941e221ff5a410f2cd291821dd64a3299c",
          "md5": "0a5795ab0589f4a368fd222048489cb9",
          "sha256": "538c2657ba8c024c9ee9f84fa6a0011b892ee3f5ed96d3c61c921fc540f66765"
        },
        "downloads": -1,
        "filename": "pdf2emb_nlp-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a5795ab0589f4a368fd222048489cb9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 19330,
        "upload_time": "2020-08-18T21:11:42",
        "upload_time_iso_8601": "2020-08-18T21:11:42.579677Z",
        "url": "https://files.pythonhosted.org/packages/cf/da/247b2d5aeba388797da05a96ef941e221ff5a410f2cd291821dd64a3299c/pdf2emb_nlp-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a2baf091098fdd90e55518452b5a7e382e6bb8a39b5ff51baaf96194e987ca5",
          "md5": "15a49e5242a0e15793151497c7d5e08f",
          "sha256": "e76fa1022e7d50727916d19189a0e640ccc584550ff55fc73984481688647b5f"
        },
        "downloads": -1,
        "filename": "pdf2emb_nlp-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "15a49e5242a0e15793151497c7d5e08f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23686,
        "upload_time": "2020-08-18T21:11:44",
        "upload_time_iso_8601": "2020-08-18T21:11:44.456334Z",
        "url": "https://files.pythonhosted.org/packages/6a/2b/af091098fdd90e55518452b5a7e382e6bb8a39b5ff51baaf96194e987ca5/pdf2emb_nlp-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cfda247b2d5aeba388797da05a96ef941e221ff5a410f2cd291821dd64a3299c",
        "md5": "0a5795ab0589f4a368fd222048489cb9",
        "sha256": "538c2657ba8c024c9ee9f84fa6a0011b892ee3f5ed96d3c61c921fc540f66765"
      },
      "downloads": -1,
      "filename": "pdf2emb_nlp-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0a5795ab0589f4a368fd222048489cb9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 19330,
      "upload_time": "2020-08-18T21:11:42",
      "upload_time_iso_8601": "2020-08-18T21:11:42.579677Z",
      "url": "https://files.pythonhosted.org/packages/cf/da/247b2d5aeba388797da05a96ef941e221ff5a410f2cd291821dd64a3299c/pdf2emb_nlp-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a2baf091098fdd90e55518452b5a7e382e6bb8a39b5ff51baaf96194e987ca5",
        "md5": "15a49e5242a0e15793151497c7d5e08f",
        "sha256": "e76fa1022e7d50727916d19189a0e640ccc584550ff55fc73984481688647b5f"
      },
      "downloads": -1,
      "filename": "pdf2emb_nlp-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "15a49e5242a0e15793151497c7d5e08f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 23686,
      "upload_time": "2020-08-18T21:11:44",
      "upload_time_iso_8601": "2020-08-18T21:11:44.456334Z",
      "url": "https://files.pythonhosted.org/packages/6a/2b/af091098fdd90e55518452b5a7e382e6bb8a39b5ff51baaf96194e987ca5/pdf2emb_nlp-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}