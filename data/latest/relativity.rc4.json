{
  "info": {
    "author": "Kurt Rose",
    "author_email": "kurt@kurtrose.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "relativity\n==========\nmulti-index data structures\n\n\nMotivation\n----------\n\nWe're going to take a mental journey of discovery to see why\nrelativity was written, and how you can use it to simplify\nsome of the most difficult problems that come up regularly\nwhen programming.  Rather then leaping straight from programming\nwith python's standard data structures to programming with\nrelativistic data structures, we'll get a running start\nby programming in a version of python that is missing\nkey data structures.  Then, we will draw a line from this\ndeficient bad version of python to regular python, and\nthen extend that line on into relativity.\n\n\nDict to List\n''''''''''''\n\nImagine programming without hashmaps.  For example, let's say we have\na list of ``Restaurant`` objects and ``City`` objects, and we want to\nget how many ``Restaurants`` are in each ``City``.\n\nNormally this is simple:\n\n\n.. code-block:: python\n\n    restaurants_in_city = {}\n\n    for restaurant in restaurants:\n        city = restaurant.city\n        restaurants_in_city[city] = restaurants_in_city.get(city, 0) + 1\n\n    def get_restaurant_count(city):\n        return restaurants_in_city.get(city, 0)\n\n\nBut, imagine how you would approach the problem if the only available\ndata structure was a list.\n\n\n.. code-block:: python\n\n    cities = []\n    restaurants_in_city = []\n\n    for restaurant in restaurants:\n        missing = True\n        for idx, city in enumerate(cities):\n            if city == restaurant.city:\n                restaurants_in_city[idx] += 1\n                missing = False\n        if missing:\n            cities.append(restaurant.city)\n            restaurants_in_city.append(1)\n\n    def get_restaurant_count(city):\n        for idx, city2 in enumerate(cities):\n            if city == city2:\n                return restaurants_in_city[idx]\n        return 0\n\n\nComparing the two examples, there are a few key differences:\n\n- there are more low value local values (``idx``)\n- single data structures split into multiple, which must\n  then be kept in sync\n- the code is longer, therefore harder to read,\n  modify, and debug\n\nLet's leave this dystopian data structure wasteland behind\nfor now and go back to regular python.\n\n\nDict to M2M\n'''''''''''\n\nThe same differences that showed up when programming with\nand without hashmaps will come up again when comparing\nprogramming with single-index hashmaps to relativistic\nmulti-index hashmaps.\n\nReturning to the restaurants and cities example, what if\na restaurant can have multiple locations and we need to\nkeep track of which cities each restaurant is in,\nas well as which restaurants are in each city.\n\nNote that we allow a restaurant to have multiple\nlocations within the same city, so sets must be used\nto avoid double counting.\n\n\n.. code-block:: python\n\n    restaurants_in_city = {}\n    cities_of_restaurant = {}\n\n    for restaurant in restaurants:\n        for location in restaurant.locations:\n            restaurants_in_city.setdefault(location.city, set()).add(restaurant)\n            cities_of_restaurant.setdefault(restaurant, set()).add(location.city)\n\n    def get_restaurants_in_city(city):\n        return restaurants_in_city.get(city, set())\n\n    def get_cities_of_restaurant(restaurant):\n        return cities_of_restaurant.get(restaurant, set())\n\n\n\nRelativity's most basic data structure is a many-to-many\nmapping ``M2M``.  ``M2M`` is a systematic abstraction over\nassociating every key with a set of values, and every\nvalue with a set of keys.  See how ``M2M`` simplifies\nthe problem:\n\n\n.. code-block:: python\n\n    restaurant_city_m2m = M2M()\n\n    for restaurant in restaurants:\n        for location in restaurant.locations:\n            restaurant_city_m2m.add(restaurant, location.city)\n\n    get_restaurants_in_city = restaurant_city_m2m.inv.get\n    get_cities_of_restaurant = restaurant_city_m2m.get\n\n\nRecall that the advantages of having single-index hashmaps\nwere shorter code, with fewer long lived data structures\nand fewer local values.  ``M2M`` doesn't replace ``dict``\nany more than ``dict`` replaces ``list``.  Rather it is\na new layer of abstraction that can greatly simplify\na broad class of problems.\n\nIs it possible to go further?  Are there higher levels\nof abstraction that can represent more complex relationships\nin fewer data structures, and be manipulated with fewer\nlines of code and intermediate values?\n\n\nM2M to M2MGraph\n'''''''''''''''\n\nWhere relativity really shines is releiving the programmer\nof the burden of keeping data structures consistent with updates.\nLet's consider our restaurant example if we need to be able\nto add and remove locations one at a time and still be able\nto query.\n\nWith ``M2M`` objects, the problem is doable, but fiddly to\nimplement:\n\n\n.. code-block:: python\n\n    restaurant_location = M2M()\n    location_city = M2M()\n\n    def add_location(location):\n        restaurant_location.add(location.restaurant, location)\n        location_city.add(location, location.city)\n\n    def remove_location(location):\n        del location_city[location]\n        del restaurant_location.inv[location]\n\n    def restaurants_in_city(city):\n        restaurants = set()\n        for location in location_city.inv[city]:\n            for restaurant in restaurant_location.inv[location]:\n                restaurants.add(restaurant)\n        return restaurants\n\n    def cities_of_restaurant(restaurant):\n        cities = set()\n        for location in restaurant_location[restaurant]:\n            for city in location_city[location]:\n                cities.add(city)\n        return cities\n\n\nThis problem can be simplified by stepping up a level of\nabstraction.\nWhere ``M2M`` is a data structure of keys and values, ``M2MGraph``\nis a higher-level data structure of ``M2M`` s.\nWith ``M2MGraph``, this problem becomes simple and\nintuitive:\n\n\n.. code-block:: python\n\n    data = M2MGraph([('restaurant', 'location'), ('location', 'city')])\n\n    def add_location(location):\n        data['restaurant', 'location', 'city'].add(\n            location.restaurant, location, location.city)\n\n    def remove_location(location):\n        data.remove('location', location)\n\n    def restaurants_in_city(city):\n        return data.pairs('city', 'restaurant').get(city)\n\n    def cities_of_restaurant(restaurant):\n        return data.pairs('restaurant', 'city').get(restaurant)\n\n\nIntroducing Chain\n'''''''''''''''''\n\nGraphs are good for representing arbitrary sets of data, but they\nare awkward to query overy.  ``M2MChain``s sequences of ``M2M``s, where\nthe keys of ``M2M`` n are meant to be drawn from the same pool\nas the values of ``M2M`` n - 1.\n\nA simple way to construct a chain is with the ``chain`` helper function.\n\n.. code-block:: python\n\n    students2classes = M2M([\n        ('alice', 'math'),\n        ('alice', 'english'),\n        ('bob', 'english'),\n        ('carol', 'math'),\n        ('doug', 'chemistry')])\n\n    classmates = chain(students2clases, students2classes.inv)\n\n\nBy chaining the student:class map to itself, we can easily\nquery which students have classes together.\n\n\n.. code-block:: python\n\n    >>> classmates.only('alice')\n    M2MChain([M2M([('alice', 'math'), ('alice', 'english')]), M2M([('math', 'carol'), ('math', 'alice'), ('english', 'bob'), ('english', 'alice')])])\n\n    >>> classmates.only('alice').m2ms[1]\n    M2M([('math', 'carol'), ('math', 'alice'), ('english', 'bob'), ('english', 'alice')])\n\n    >>> classmates.only('alice').m2ms[1].inv.keys()\n    ['bob', 'carol', 'alice']\n\n\nRelativity and DataBases\n------------------------\n\nRelativity is excellent at representing many-to-many relationships\nfrom databases which are otherwise awkward to handle.\n\nM2M + ORM\n'''''''''\n\nLet's consider an example from Django to start.\n\n\n.. code-block:: python\n\n    from django.db import models\n\n    class Student(models.model):\n        name = models.StringField()\n\n    class Course(models.model):\n        name = models.StringField()\n        students = models.ManyToMany(Student)\n\n\nStudents take many courses, and each course has many students.\n\nConstruting an ``M2M`` over these relationships is very natural:\n\n\n.. code-block:: python\n\n    from relativity import M2M\n    StudentCourse = Course.students.through\n\n    enrollments = M2M(\n        StudentCourse.objects.all().values_list('student', 'course'))\n\n\n\n\nDesign Philosophy\n-----------------\n\n\nDB Feature Sets\n'''''''''''''''\n\nA typical SQL database, such as PostGres, MySQL, SQLServer, Oracle, or DB2\noffers many features which can be split into four categories:\n\n- relational data model and queries\n- network protocol and multiple concurrent connections\n- transactions, atomic updates, and MVCC_\n- persistent storage, backups, and read replicas\n\nLet's call these \"relational\", \"network\", \"transactional\",\nand \"persistence\" feature sets.\n\n.. _MVCC: https://en.wikipedia.org/wiki/Multiversion_concurrency_control\n\n\n\"Alternative\" Databases\n'''''''''''''''''''''''\n\nThe most widely used alternative is probably SQLite_.  SQLite\nhas relational, transactional, and persistence feature sets but does not have\na network protocol.  Instead it must be embedded_\nas a library inside another application.\n\nAnother example is the venerable ZODB_.  ZODB has\nnetwork, transactional, and persistence feature sets\nbut replaces the relational data model\nwith an object data model.\n\nAs an extreme example of how less can be more, memcached_ has\nonly network features.  Data is stored ephemerally in the form of opaque blobs without\nany data model.  There is no atomicity of updates: there is no way to ensure that\ntwo writes either both succeed or both fail.\n\nThe so-called \"NoSQL\" databases (cassandra_, couchdb_, mongodb_, etc)\ngenerally provide network and persistence features but lack a relational data model\nand transactionality.\n\n.. _embedded: https://docs.python.org/3/library/sqlite3.html\n.. _SQLite: https://www.sqlite.org/\n.. _ZODB: http://www.zodb.org/en/latest/\n.. _memcached: https://memcached.org/\n.. _cassandra: http://cassandra.apache.org/\n.. _couchdb: http://couchdb.apache.org/\n.. _mongodb: https://www.mongodb.com/\n\n\nRelativity: Relational à la carte\n'''''''''''''''''''''''''''''''''\n\nIn this design space, Relativity offers a relational feature set and nothing else.\nRelativity allows you to build in-memory data structures that represent relationships\namong arbitrary Python objects and then execute queries over those objects and\nrelationships via a very natural and pythonic API.\n\n\n=============  ====================\n  SQL            Relativity\n-------------  --------------------\nresult-set     sets and M2Ms\njoin           chain and attach\norder by       sort and sorted\nwhere-clause   list comprehension\n=============  ====================\n\n\nArchitecture\n------------\n\nThe fundamental unit of Relativity is the *relation*, in the form of\nthe ``M2M``.  All other data structures are\nvarious types of ``M2M`` containers.  An ``M2M`` is a very simple\ndata structure that can be represented as two dicts:\n\n.. code-block:: python\n\n    {key: set(vals)}\n    {val: set(keys)}\n\nThe main job of the ``M2M`` is to broadcast changes to the\nunderlying ``dict`` and ``set`` instances such that they are kept in\nsync, and to enumerate all of the key, val pairs.\n\nSimilarly, the higher order data structures --\n``M2MGraph``, ``M2MChain``, and ``M2MStar`` -- broadcast changes to\nunderlying ``M2M`` s and can return and enumerate them.\n\n``M2MChain`` and ``M2MStar``: rows of relations\n'''''''''''''''''''''''''''''''''''''''''''''''\n\n``M2MChain`` and ``M2MStar`` are implemented as thin wrappers over a ``list``\nof ``M2M``.  The main feature they bring provide \"row-iteration\".  The difference\nbetween them is how they defined a row.  ``M2MChain`` represents relationships\nthat connect end-to-end.  ``M2MStar`` represents relationships that all\npoint to the same base object, similar to a `star schema`_.\n\n.. _star schema: https://en.wikipedia.org/wiki/Star_schema\n\nShared ``M2M`` s\n''''''''''''''''\n\nAll of the higher order data structures are concerned with the structure\nbetween and among ``M2M`` s.  The contents within a particular ``M2M`` does\nnot need to maintain any invariants.  That is, if all of the ``M2M`` s within\none of the higher order data structures were scrambled up, the higher order\ndata structure would still be valid.\n\n(Contrast with, if you were to scramble\nthe key sets and val sets around within an ``M2M``, it would be totally\ninconsistent.)\n\nThis has important consequences, because it means that various instances\nof ``M2MGraph``, ``M2MChain``, and ``M2MStar`` may *share* their underlying\n``M2M`` s, and continue to update them.  This means that all of these higher\norder data structures can be treated as cheap and ephemeral.\n\nFor example, ``M2MGraph.chain(*cols)`` will construct and return a new\n``M2MChain`` over the ``M2M`` s linking the passed columns.  All that\nactually happens here is the ``M2MGraph`` is queried for the underlying\n``M2M`` s, then the list of ``M2M`` s is passed to the ``M2MChain``\nconstructor which simply holds a reference to them.\n\nAnother way to think of ``M2MGraph``, ``M2MChain`` and ``M2MStar`` is\nas cheap views over the underlying ``M2M`` s.  No matter how much data is in\nthe underlying ``M2M`` s, assembling one of these higher order data structures\nover top has a fixed, low cost.\n\n\nRelativity & Python Ecosystem\n-----------------------------\n\nPandas_\n'''''''\n\nBoth Relativity and Pandas enable clean extraction of data from a SQL database\nto an in-memory data structure which may be further processed.  Both libraries\nprovide data structures that can easily express queries over the in-memory\ndata-set that would otherwise be very difficult and tempt a developer to go\nback to the database multiple times.\n\nThis sounds like Relativity and Pandas should be in competition; but, in practice\nthey are complementary.  Whereas Pandas is excellent at representing tabular\ndata in rows and columns, Relativity excels at representing the foreign key\nrelationships that connect rows in different tables.  Pandas makes it easy\nto take a SQL result set and further refine it by filtering rows and addding\ncolumns.  Relativity makes it easy to extract the foreign key relationships\namong many tables and further refine them by filtering by connectedness and\nadding additional relationships.\n\n.. _Pandas: http://pandas.pydata.org/pandas-docs/stable/getting_started/overview.html\n\n\nWhen to Use\n\"\"\"\"\"\"\"\"\"\"\"\n\nUse Pandas_ for doing analysis of data within rows of a table; use\nRelativity for doing analysis of the relationships between rows of\ndifferent tables.\n\nComing back to the students-and-classes example:\n\n.. code-block:: python\n\n    class Enrollment(models.Model):\n         student = models.ForeignKey(Student)\n         class = models.ForeignKey(Class)\n         grade = models.FloatField()  # 0.0 - 5.0\n\n    # Pandas is great at determining each students GPA\n    enrollments_data_frame.group_by(['student']).mean()\n\n\nBetter Together\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nAt a low-level, a Pandas_ ``Series`` and a Relaitivity ``M2M`` can\nboth represent multiple values per key, so it is easy to convert\nbetween the two.\n\n.. code-block:: python\n\n    >>> import pandas\n    >>> import relativity\n    >>> s = pandas.Series(data=[1, 2, 2], index=['a', 'a', 'b'])\n    >>> s\n    a    1\n    a    2\n    b    2\n    dtype: int64\n    >>> m2m = relativity.M2M(s.items())\n    >>> m2m\n    M2M([('a', 1L), ('a', 2L), ('b', 2L)])\n    >>> keys, vals = zip(*m2m.iteritems())\n    >>> s2 = pandas.Series(data=vals, index=keys)\n    >>> s2\n    a    1\n    a    2\n    b    2\n    dtype: int64\n\n\nNetworkX_\n'''''''''\n\nNetworkX_ is the \"graph theory library\" of Python:\n\n\"NetworkX is a Python package for the creation, manipulation,\nand study of the structure, dynamics, and functions of complex networks.\"\n\nNetworkX_ is great at representing arbitrarily connections among a group\nof nodes.  Relativity has relationship-centric APIs and data-structures,\nwehere the ``M2M`` represents a single relationship, and ``M2MChain``,\n``M2MStar``, and ``M2MGraph`` build higher order connections.  \n\nUnderneath, both are backed by ``dict``.\n\n\n.. _NetworkX: https://networkx.github.io/\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kurtbrose/relativity",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "relativity",
    "package_url": "https://pypi.org/project/relativity/",
    "platform": "any",
    "project_url": "https://pypi.org/project/relativity/",
    "project_urls": {
      "Homepage": "https://github.com/kurtbrose/relativity"
    },
    "release_url": "https://pypi.org/project/relativity/20.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Relational object sets.",
    "version": "20.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6517204,
  "releases": {
    "0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38437afe64c4d0b107a46589b74f48534cc74029aeee60d91a4434e95c74e4b0",
          "md5": "f3c8c339c9f53e508869846cac0e7beb",
          "sha256": "fb0ae4f243fb61c03a601ae2c461507b02c02687c660b7a283f9e7487caf8830"
        },
        "downloads": -1,
        "filename": "relativity-0.1.dev0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "f3c8c339c9f53e508869846cac0e7beb",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 6838,
        "upload_time": "2019-02-02T07:27:06",
        "upload_time_iso_8601": "2019-02-02T07:27:06.066392Z",
        "url": "https://files.pythonhosted.org/packages/38/43/7afe64c4d0b107a46589b74f48534cc74029aeee60d91a4434e95c74e4b0/relativity-0.1.dev0-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72f04a685ebd4048c71c5e82d0b1f8f0033170b217b62e07f82ad1861538f945",
          "md5": "f36c77bbe8dca4d6b794cd0af09d69bb",
          "sha256": "397c2566f1060ff501fc6e41b93fa44798d5b2af4bef574c391cf0d29e65f9de"
        },
        "downloads": -1,
        "filename": "relativity-0.1.dev0.zip",
        "has_sig": false,
        "md5_digest": "f36c77bbe8dca4d6b794cd0af09d69bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7273,
        "upload_time": "2019-02-02T07:27:08",
        "upload_time_iso_8601": "2019-02-02T07:27:08.128786Z",
        "url": "https://files.pythonhosted.org/packages/72/f0/4a685ebd4048c71c5e82d0b1f8f0033170b217b62e07f82ad1861538f945/relativity-0.1.dev0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54a116d2d93571fa783a2038051b44fc6dd0ada00f73cdb81b6264ab71a4114f",
          "md5": "ed133527581f3fd054c7f441d0472acf",
          "sha256": "ca452c7271bdcb0d315e3bd39a85b641791c4b2a83135af5c48ebb5cbe9545bf"
        },
        "downloads": -1,
        "filename": "relativity-0.2.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed133527581f3fd054c7f441d0472acf",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 18754,
        "upload_time": "2020-01-25T01:55:09",
        "upload_time_iso_8601": "2020-01-25T01:55:09.774468Z",
        "url": "https://files.pythonhosted.org/packages/54/a1/16d2d93571fa783a2038051b44fc6dd0ada00f73cdb81b6264ab71a4114f/relativity-0.2.0-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "819345ccc38b885b9d90791f7c48ddbb822704d9d973a60d20e2906e10a3fc52",
          "md5": "8747bfca2502658f43278cec603b06a8",
          "sha256": "83da68bc2bdb4fc7fd0ce33636e05bda4fecfc1f4fd86fa5b568e67ad796cfbf"
        },
        "downloads": -1,
        "filename": "relativity-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8747bfca2502658f43278cec603b06a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32018,
        "upload_time": "2020-01-25T01:55:11",
        "upload_time_iso_8601": "2020-01-25T01:55:11.585578Z",
        "url": "https://files.pythonhosted.org/packages/81/93/45ccc38b885b9d90791f7c48ddbb822704d9d973a60d20e2906e10a3fc52/relativity-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "19.12.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b49c7083c8238985d405d381f9540e23ed432703f3870409711a4a3914a90fe9",
          "md5": "40127bdc435c6a237c9600f9ca92acb6",
          "sha256": "bfd663b5fbb8a3c6f5370297cf44fb615074756ebdbc34e007ad95677a68a1ab"
        },
        "downloads": -1,
        "filename": "relativity-19.12.1.tar.gz",
        "has_sig": false,
        "md5_digest": "40127bdc435c6a237c9600f9ca92acb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16648,
        "upload_time": "2019-12-03T17:20:08",
        "upload_time_iso_8601": "2019-12-03T17:20:08.067846Z",
        "url": "https://files.pythonhosted.org/packages/b4/9c/7083c8238985d405d381f9540e23ed432703f3870409711a4a3914a90fe9/relativity-19.12.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f66cb741394d71982881f087db7e96296811ab282e118688829e89140681eddd",
          "md5": "2e1350291a2de8d4182b69ac5f44c3af",
          "sha256": "0f527db5c2d6d23030460b4b8e941b1ad560fa55b7cfcb6e39b2472d1d592ba2"
        },
        "downloads": -1,
        "filename": "relativity-20.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e1350291a2de8d4182b69ac5f44c3af",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 18768,
        "upload_time": "2020-01-25T02:02:13",
        "upload_time_iso_8601": "2020-01-25T02:02:13.886959Z",
        "url": "https://files.pythonhosted.org/packages/f6/6c/b741394d71982881f087db7e96296811ab282e118688829e89140681eddd/relativity-20.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7812932a82c979e98d2ec501f8d58c20b652ae66238f9a212d781ec558cfdf49",
          "md5": "3d6ed0e490db6ad90fe24db8d4f49da1",
          "sha256": "0e9faa7ef15b96b591ef6258bac5d4067d893a3ddea420d1af75f238398c9541"
        },
        "downloads": -1,
        "filename": "relativity-20.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3d6ed0e490db6ad90fe24db8d4f49da1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32241,
        "upload_time": "2020-01-25T02:02:16",
        "upload_time_iso_8601": "2020-01-25T02:02:16.014671Z",
        "url": "https://files.pythonhosted.org/packages/78/12/932a82c979e98d2ec501f8d58c20b652ae66238f9a212d781ec558cfdf49/relativity-20.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f66cb741394d71982881f087db7e96296811ab282e118688829e89140681eddd",
        "md5": "2e1350291a2de8d4182b69ac5f44c3af",
        "sha256": "0f527db5c2d6d23030460b4b8e941b1ad560fa55b7cfcb6e39b2472d1d592ba2"
      },
      "downloads": -1,
      "filename": "relativity-20.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2e1350291a2de8d4182b69ac5f44c3af",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 18768,
      "upload_time": "2020-01-25T02:02:13",
      "upload_time_iso_8601": "2020-01-25T02:02:13.886959Z",
      "url": "https://files.pythonhosted.org/packages/f6/6c/b741394d71982881f087db7e96296811ab282e118688829e89140681eddd/relativity-20.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7812932a82c979e98d2ec501f8d58c20b652ae66238f9a212d781ec558cfdf49",
        "md5": "3d6ed0e490db6ad90fe24db8d4f49da1",
        "sha256": "0e9faa7ef15b96b591ef6258bac5d4067d893a3ddea420d1af75f238398c9541"
      },
      "downloads": -1,
      "filename": "relativity-20.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3d6ed0e490db6ad90fe24db8d4f49da1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32241,
      "upload_time": "2020-01-25T02:02:16",
      "upload_time_iso_8601": "2020-01-25T02:02:16.014671Z",
      "url": "https://files.pythonhosted.org/packages/78/12/932a82c979e98d2ec501f8d58c20b652ae66238f9a212d781ec558cfdf49/relativity-20.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}