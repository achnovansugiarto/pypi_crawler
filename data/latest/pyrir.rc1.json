{
  "info": {
    "author": "ludlows",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "# pyrir\nLite Package for Room Impulse Response\n\n# requirements\n\n```bash\nnumpy\nscipy\ncython\n```\n\n# install\n```bash\npip install pyrir\n```\nor\n```bash\npip install https://github.com/ludlows/pyrir/archive/master.zip\n```\n\n# example \n\nIt is supporting Omni, Dipole, Cardioid, Subcardioid and Hypercardioid Beam Patterns. \n\n## Microphone Array with 1 Speaker\n```python\nimport numpy as np \nfrom pyrir import Omni, Dipole, Cardioid, Subcardioid, Hypercardioid, Field, RIR, ReflectRoom, ReverbRoom\n\n# Acoustic Field\nfs = 48000 # sampling rate\nn_sample = 1024 # number of supports of RIR train\nfield = Field(fs, n_sample=n_sample)\n\n# Construct Room\nrt60 = 0.4 # second\nroom = ReverbRoom((5,5,3.2), rt60)\n\n# Microphon Array\nazimuth_degree = 0\nelevation_degree = 0\ndipole = Dipole((2,1.5,1.6), (azimuth_degree,elevation_degree))\nomni = Omni((2,1.5,1.6))\n\n# speaker\ndoa = 0    # degree \nradius = 1.5 # meter\nspeaker = dipole.generate_speaker(radius, doa)\n\n# setup speaker and mic array\nroom.setup_mic_speaker([dipole, omni], speaker)\n\n# RIR object tuple, whose length equals to the number of speakers\nrir_tuple = field.compute_rir(room)\nnp.save('RIR_Dipole_Omni.npy', rir_tuple[0].get_numpy())\n\n# Reverb numpy Array\nreverb_numpy_array = rir_tuple[0].apply2audio1D(clean_audio1D)\n\n# Reverb numpy Array List Supporting Multichannel Clean Audio (WAV format only for now) \nspeaker_audio_file  = 'speaker_clean_audio.wav'\nreverb_numpy_audio_list = rir_tuple[0].apply2audio_file(speaker_audio_file)\n\n# Reverb audio folder\nspeaker_audio_folder = 'speaker_audio_folder'\nrir_tuple[0].apply2audio_folder(speaker_audio_folder)\n```\n\n\n## Microphone Array with Multiple Speaker\n```python\nimport numpy as np \nfrom pyrir import Omni, Dipole, Cardioid, Subcardioid, Hypercardioid, Field, RIR, ReflectRoom, ReverbRoom\n\n# Acoustic Field\nfs = 48000 # sampling rate\nn_sample = 1024 # number of supports of RIR train\nfield = Field(fs, n_sample=n_sample)\n\n# Construct Room by Wall Reflection Coefficeints\nroom = ReflectRoom((5,5,3.2), (0.8, 0.8, 0.8, 0.8, 0.8, 0.8))\n\n# Microphon Array\nazimuth_degree = 0\nelevation_degree = 0\ndipole = Dipole((2,1.5,1.6), (azimuth_degree,elevation_degree))\nomni = Omni((2,1.5,1.6))\n\n# speaker1 and speaker2\ndoa = 0    # degree \nradius = 1.5 # meter\nspeaker1 = dipole.generate_speaker(radius, doa)\nspeaker2 = omni.generate_speaker(1, 90)\n\n# setup speaker and mic array\nroom.setup_mic_speaker([dipole, omni], [speaker1, speaker2])\n\n# RIR \nrir_spk1, rir_spk2 = field.compute_rir(room)\n\n# merge reverb voice from 2 speakers \n# (spk1.wav and spk2.wav should have same number of channels)\nmerged_channels = [\n    reverb1[:, :min(reverb1.shape[1], reverb2.shape[1])] + reverb2[:,:min(reverb1.shape[1], reverb2.shape[1])] for reverb1, reverb2 in zip(rir_spk1.apply2audio_file('spk1.wav'), rir_spk2.apply2audio_file('spk2.wav'))]\n```\n\n# Reference Code\nThe C Backend Code is from the project of Prof. EmanuÃ«l Habets.\nhttps://github.com/ehabets/RIR-Generator",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ludlows/pyrir",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyrir",
    "package_url": "https://pypi.org/project/pyrir/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyrir/",
    "project_urls": {
      "Homepage": "https://github.com/ludlows/pyrir"
    },
    "release_url": "https://pypi.org/project/pyrir/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Lite Package for Room Impulse Response",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6373208,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dc0a1bd34d6595460faa586318ac17265d825f0886328d61fe020f33c412ac4",
          "md5": "5543da1a25a71c541f01ae763ce567a1",
          "sha256": "859296662bcdc8e6e34ee21505dc6d1ae128edf5721c9acb0da8cb5182641e18"
        },
        "downloads": -1,
        "filename": "pyrir-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5543da1a25a71c541f01ae763ce567a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 59383,
        "upload_time": "2019-12-30T00:50:48",
        "upload_time_iso_8601": "2019-12-30T00:50:48.722595Z",
        "url": "https://files.pythonhosted.org/packages/1d/c0/a1bd34d6595460faa586318ac17265d825f0886328d61fe020f33c412ac4/pyrir-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1dc0a1bd34d6595460faa586318ac17265d825f0886328d61fe020f33c412ac4",
        "md5": "5543da1a25a71c541f01ae763ce567a1",
        "sha256": "859296662bcdc8e6e34ee21505dc6d1ae128edf5721c9acb0da8cb5182641e18"
      },
      "downloads": -1,
      "filename": "pyrir-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5543da1a25a71c541f01ae763ce567a1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 59383,
      "upload_time": "2019-12-30T00:50:48",
      "upload_time_iso_8601": "2019-12-30T00:50:48.722595Z",
      "url": "https://files.pythonhosted.org/packages/1d/c0/a1bd34d6595460faa586318ac17265d825f0886328d61fe020f33c412ac4/pyrir-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}