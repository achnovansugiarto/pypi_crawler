{
  "info": {
    "author": "",
    "author_email": "diego <caikaidi@caikaidi.cn>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# sciplot\nA scientific style plot tool based on matplotlib.\n\n![Style demonstration](./example/Figure_1.png)\n\n## Features\n\n- Plot figures for scientific articles painlessly, with right size, font, and others.\n- Quick preview, quick as hell.\n- Supporting three built in styles and custom style.\n  - (a) Color cycle, looks cleaner for online journals.\n  - (b) Color and marker cycle, support black-and-white view.\n  - (c) Line style and marker cycle, support up to 16 lines without repeat.\n  - (d) Custom style, easy to set and useful when you got several groups of curves.\n\n## Install\n\nInstall by pip:\n```shell\npip install diegoplot\n```\n\nImport the package:\n```python\nfrom diegoplot import diegoplot\ndiegoplot.DiegoPlot()\n```\n\nOr, you can copy the `diegoplot.py` file into the folder of your project and import it by:\n```python\nimport diegoplot\ndiegoplot.DiegoPlot()\n```\n## mini demo\n\nTo preview the figure comes from your data, the fast way is just `SciPlot(x, y)`. \nNo configurations needed, you'll get a pretty much finished figure. \nOptionally, label, legend, and tag could be given as keyword arguments.\n\n```python\n# This demo gives the figure (a) above.\nimport numpy as np\nfrom diegoplot import diegoplot\n\nx = np.linspace(0, 10, 100)\ny = np.array([(a + 1) * np.sin(x) for a in range(4)])\ndiegoplot.DiegoPlot(x, y,\n                    label=['x-axis', 'y-axis'],\n                    legend=['line {}'.format(n + 1) for n in range(4)],\n                    tag='(a)')\n```\n\nThe data, `x` and `y`, could be in different kinds of.\n\n- A single curve like `x = [x1, x2, ...]` and `y = [y1, y2, ...]` is fine.\n- Multiple curves with same `x` coordinates should be given like `x = [x1, x2, ...]` and\n  `y = [[curve1_y1, curve1_y2, ...], [curve2_y1, curve2_y2, ...], ...]`\n- Of course, multiple curves can have different `x` coordinates,\n  just give both `x` and `y` in the form of `[[...],[...],...]`.\n  And make sure they are within the same length.\n\n## Fine tuning\n\nA fine-tuning is needed to generate the final product.\nIn this case, you are supposed to use the `sciplot` in a detailed way.\nThere are up to 6 steps: load data, plot data, plot label, plot legend, plot tag, and show.\n\n```python\n# This demo gives the figure (b) above.\nimport numpy as np\nfrom diegoplot import diegoplot\n\nx = np.linspace(0, 10, 30)\ny = np.array([(a + 1) * np.sin(x) for a in range(4)])\ndp = diegoplot.DiegoPlot()\ndp.manual_load(x, y, ['x-axis', 'y-axis'], ['line {}'.format(n + 1) for n in range(4)])\ndp.plot_data(1)  # 1 for style 1. Currently, there are 3 built in styles, 0, 1, and 2. \n# Corresponding to figure (a), (b), and (c).\n\ndp.plot_label()  # Optionally, label can be given here as a parameter.\ndp.plot_legend()  # Optionally, legend can be given here as a parameter.\n\ndp.plot_tag('(b)')  # The position of the tag is configurable, see annotation of this function.\ndp.show()  # Comes with an auto-tight function. Pass through auto_tight=False to disable it.\n```\n\nApart those steps means you can write your own, customized ones. Or add some operations before `show()`.\nChange the range of axis is often used to make curves looks better, or avoid interfering with legend and tag.\nThis is change by `sp.ax`, which is exactly the axis object of `matplotlib`. \nYou should see the documentation of `matplotlib` for more, but I'll list some useful functions.\n\n```python\n# axis span range\ndp.ax.set_xlim([0, 1])\ndp.ax.set_ylim([0, 1])\n# where are the scale lines\ndp.ax.set_xticks([0, 0.5, 1])\ndp.ax.set_yticks([0, 0.5, 1])\n# plot text, lines, annotates\ndp.ax.text()\ndp.ax.hline()\ndp.ax.vline()\ndp.ax.annotate()\n# create another y-axis\nax2 = dp.ax.twinx()  \n```\n\n## Load data\n\nData can be load in different ways.\nThey can be load manually by `sp.manual_load()`, or load form `txt`, `npz`, and `csv` files.\nFor data generated by python, `npz` is strongly recommended.\n`sciplot` have three built-in functions to load these data: `load_npz()`, `load_txt()`, `load_csv()`.\nThese functions are coding for my use case. \nAnnotations are given about how the data are organized.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "diegoplot",
    "package_url": "https://pypi.org/project/diegoplot/",
    "platform": null,
    "project_url": "https://pypi.org/project/diegoplot/",
    "project_urls": {
      "Bug Tracker": "https://github.com/caikaidi/sciplot/issues",
      "Homepage": "https://github.com/caikaidi/sciplot"
    },
    "release_url": "https://pypi.org/project/diegoplot/1.2/",
    "requires_dist": [
      "cycler",
      "matplotlib",
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "A scientific style plot tool based on matplotlib.",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15895256,
  "releases": {
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37c3dfb212119c1bed161ad466637138164640028eeffa7637ea0c903f36d4ca",
          "md5": "653fbfaed3c64ae8de42f815cb1e6d9b",
          "sha256": "bcc853ab4768883792be99915deb2b3513f6dd5bb6b08badf9ad152e5654d0c9"
        },
        "downloads": -1,
        "filename": "diegoplot-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "653fbfaed3c64ae8de42f815cb1e6d9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6751,
        "upload_time": "2022-11-26T02:58:14",
        "upload_time_iso_8601": "2022-11-26T02:58:14.491200Z",
        "url": "https://files.pythonhosted.org/packages/37/c3/dfb212119c1bed161ad466637138164640028eeffa7637ea0c903f36d4ca/diegoplot-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42c6c143ba49f87897fdf625083d939ad56f3de0862cc976d8fd7ceca50b9c66",
          "md5": "881bd1c919d09399c823b08b7ea61da9",
          "sha256": "9de49bbaf84f2f8c339683fded201ec190294bf319b0c40ae790663a9d28f078"
        },
        "downloads": -1,
        "filename": "diegoplot-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "881bd1c919d09399c823b08b7ea61da9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 221225,
        "upload_time": "2022-11-26T02:58:23",
        "upload_time_iso_8601": "2022-11-26T02:58:23.129580Z",
        "url": "https://files.pythonhosted.org/packages/42/c6/c143ba49f87897fdf625083d939ad56f3de0862cc976d8fd7ceca50b9c66/diegoplot-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37c3dfb212119c1bed161ad466637138164640028eeffa7637ea0c903f36d4ca",
        "md5": "653fbfaed3c64ae8de42f815cb1e6d9b",
        "sha256": "bcc853ab4768883792be99915deb2b3513f6dd5bb6b08badf9ad152e5654d0c9"
      },
      "downloads": -1,
      "filename": "diegoplot-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "653fbfaed3c64ae8de42f815cb1e6d9b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6751,
      "upload_time": "2022-11-26T02:58:14",
      "upload_time_iso_8601": "2022-11-26T02:58:14.491200Z",
      "url": "https://files.pythonhosted.org/packages/37/c3/dfb212119c1bed161ad466637138164640028eeffa7637ea0c903f36d4ca/diegoplot-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "42c6c143ba49f87897fdf625083d939ad56f3de0862cc976d8fd7ceca50b9c66",
        "md5": "881bd1c919d09399c823b08b7ea61da9",
        "sha256": "9de49bbaf84f2f8c339683fded201ec190294bf319b0c40ae790663a9d28f078"
      },
      "downloads": -1,
      "filename": "diegoplot-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "881bd1c919d09399c823b08b7ea61da9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 221225,
      "upload_time": "2022-11-26T02:58:23",
      "upload_time_iso_8601": "2022-11-26T02:58:23.129580Z",
      "url": "https://files.pythonhosted.org/packages/42/c6/c143ba49f87897fdf625083d939ad56f3de0862cc976d8fd7ceca50b9c66/diegoplot-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}