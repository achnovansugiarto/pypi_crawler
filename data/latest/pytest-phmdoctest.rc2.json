{
  "info": {
    "author": "Mark Taylor",
    "author_email": "mark66547ta2@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Documentation",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# pytest-phmdoctest 1.0.0\n\n## Introduction\n\nPython syntax highlighted Markdown doctest pytest plugin.\n\nA [pytest][4] plugin based on the [phmdoctest][3] command line tool.\n\nIf you have Python syntax highlighted examples in Markdown\nlike this Python code...\n```python\nprint(\"Hello World!\")\n```\nplus expected output.\n```\nHello World!\n```\n\nThis [pytest][4] plugin will test them, as is, without edits.\nOn this file try the command ...\n```shell\npytest -v --phmdoctest README.md\n```\n\npytest console output ...\n```\nplugins: phmdoctest-1.0.0\ncollected 1 item\n\n::README.py::test_code_12_output_16 PASSED\n```\n\nThe plugin also tests Python interactive sessions\ndescribed by [doctest][1].\nSee [testing examples](#testing-python-interactive-sessions) below.\n\nThe `12` in the function name `test_code_12_output_16` is the\nline number of the first line\nof python code. `16` shows the line number of the expected\nterminal output.\n\n\n## Description\n\nThe plugin is based on the Python tool\n[phmdoctest][3] version >= 1.4.0\nIt generates a pytest test file from a Markdown file.\n\n- Reads these from Markdown fenced code blocks:\n  - Python source code and expected terminal output.\n  - Python interactive sessions described by [doctest][1].\n- Simple use case is possible with no Markdown edits.\n- More features selected by adding HTML comment directives\n  to the Markdown. See Directives in [phmdoctest Directives][5].\n- Run on pytest >= 5.4.3.\n\n### main branch status\n[![](https://img.shields.io/pypi/l/pytest-phmdoctest.svg)](https://github.com/tmarktaylor/pytest-phmdoctest/blob/main/LICENSE.txt)\n[![](https://img.shields.io/pypi/v/pytest-phmdoctest.svg)](https://pypi.python.org/pypi/pytest-phmdoctest)\n[![](https://img.shields.io/pypi/pyversions/pytest-phmdoctest.svg)](https://pypi.python.org/pypi/pytest-phmdoctest)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n[![CI Test](https://github.com/tmarktaylor/pytest-phmdoctest/actions/workflows/ci.yml/badge.svg)](https://github.com/tmarktaylor/pytest-phmdoctest/actions/workflows/ci.yml)\n[![Build status](https://ci.appveyor.com/api/projects/status/fa0frmueq4h94v23/branch/main?svg=true)](https://ci.appveyor.com/project/tmarktaylor/pytest-phmdoctest/branch/main)\n[![readthedocs](https://readthedocs.org/projects/pytest-phmdoctest/badge/?version=latest)](https://pytest-phmdoctest.readthedocs.io/en/latest/?badge=latest)\n[![codecov](https://codecov.io/gh/tmarktaylor/pytest-phmdoctest/branch/main/graph/badge.svg?token=j5uu3WJn6u)](https://codecov.io/gh/tmarktaylor/pytest-phmdoctest/branch/main)\n\n[Website](https://tmarktaylor.github.io/pytest-phmdoctest) |\n[Docs](https://pytest-phmdoctest.readthedocs.io/en/latest/) |\n[Repos](https://github.com/tmarktaylor/pytest-phmdoctest) |\n[pytest](https://ci.appveyor.com/project/tmarktaylor/pytest-phmdoctest/branch/main) |\n[Codecov](https://codecov.io/gh/tmarktaylor/pytest-phmdoctest/branch/main) |\n[License](https://github.com/tmarktaylor/pytest-phmdoctest/blob/main/LICENSE.txt)\n\n\n[Introduction](#introduction) |\n[Description](#description) |\n[Installation](#installation) |\n[Usage](#usage) |\n[Testing Python interactive sessions](#testing-python-interactive-sessions) |\n[Generate test files](#generate-test-files) |\n[Generate and collect test files](#generate-and-collect-test-files) |\n[Help](#help) |\n[Configure collection](#configure-collection) |\n[Hints](#hints) |\n[Related projects](#related-projects)\n\n\n[Changes](doc/recent_changes.md) |\n[Contributions](CONTRIBUTING.md)\n\n\n## Installation\nIt is advisable to install in a virtual environment.\n\n    python -m pip install pytest-phmdoctest\n\n## Usage\n\nConsider a project with the following files.\nNot all files are shown.\n\n```text\nREADME.md\ndoc/directive2.md\ndoc/nocode.md\ntests/test_example.py\n```\n\n<!--phmdoctest-label plugin-inactive-command-->\n```shell\npytest -v\n```\n\n<!--phmdoctest-label plugin-inactive-output-->\n```text\nplugins: phmdoctest-1.0.0\ncollected 1 item\n\ntests/test_example.py::test_example PASSED\n```\n\nUse `--phmdoctest` to also collect Markdown files.\n\n<!--phmdoctest-label phmdoctest-option-command-->\n```shell\npytest -v --phmdoctest\n```\n\n<!--phmdoctest-label phmdoctest-option-output-->\n```text\nplugins: phmdoctest-1.0.0\ncollected 6 items\n\n::README.py::test_code_10_output_17 PASSED\n::doc__directive2.py::test_code_25_output_32 PASSED\n::doc__directive2.py::test_code_42_output_47 PASSED\n::doc__directive2.py::test_code_52_output_56 PASSED\n::doc__project.py::test_code_12_output_19 PASSED\ntests/test_example.py::test_example PASSED\n```\n- The sample project above can be viewed on GitHub at `tests/sample`.\n- The doc__ indicates the Markdown file was collected from the\n  doc folder.\n- Markdown \".md\" files get discovered by pytest.\n  pytest finds them in the same way it finds Python test files.\n  For each Markdown file discovered, the plugin generates a pytest\n  test file.\n- A Markdown file that does not have any Python fenced code block examples\n  is not tested.\n- To avoid collecting .md files use pytest `--ignore` and `--ignore-glob`\n  on the command line or in the addopts part of the pytest ini file.\n  These commands work on .md files and use Unix shell-style wildcards.\n\nUse `--phmdoctest` in a pytest ini file instead of on the\ncommand line as shown below:\n```ini\n# pytest.ini and tox.ini\n[pytest]\naddopts = --phmdoctest\n```\n```toml\n# pyproject.toml\n[tool.pytest.ini_options]\naddopts = \"--phmdoctest\"\n```\n```ini\n# setup.cfg  Note: Use is discouraged by pytest docs.\n[tool:pytest]\naddopts = --phmdoctest\n```\n\n## Testing Python interactive sessions\n\nThe plugin also tests Python interactive sessions described by [doctest][1]\nlike this one:\n\n```python\n>>> import math\n>>> math.floor(9.1)\n9\n```\n\nUse the `--phmdoctest-docmod` option to collect both Python code/expected output\nand Python interactive sessions.\n\n<!--phmdoctest-label phmdoctest-docmod-command-->\n```shell\npytest -v --phmdoctest-docmod\n```\n\n<!--phmdoctest-label  phmdoctest-docmod-output-->\n```text\nplugins: phmdoctest-1.0.0\ncollected 10 items\n\n::README.py::README.session_00001_line_24 PASSED\n::README.py::test_code_10_output_17 PASSED\n::doc__directive2.py::test_code_25_output_32 PASSED\n::doc__directive2.py::test_code_42_output_47 PASSED\n::doc__directive2.py::test_code_52_output_56 PASSED\n::doc__project.py::doc__project.session_00001_line_31 PASSED\n::doc__project.py::doc__project.session_00002_line_46 PASSED\n::doc__project.py::doc__project.session_00003_line_55 PASSED\n::doc__project.py::test_code_12_output_19 PASSED\ntests/test_example.py::test_example PASSED\n```\n\n- The `--phmdoctest-docmod` option uses a non-public pytest class DoctestModule.\n  There is a slight chance a pytest future\n  major release changes the DoctestModule API.\n- DoctestModule works ok on pytest major releases 5, 6, and 7\n  as verified by tests in .github/workflows/ci.yml.\n- If  `--phmdoctest-docmod` doctest collection breaks,\n  the rest of the plugin `--phmdoctest` and `--phmdoctest-generate`\n  options still work. The test suite simulates such breaking\n  changes. See the test_readme and test_docmod.py test functions\n  that take the monkeypatch fixture.\n- The `line_24` in the function name `session_00001_line_24` is the\n  line number in tests/sample/README.md of the first line\n  of the interactive session. `00001` is a sequence number to\n  order the doctests.\n\nHere is simulated output captured when `--phmdoctest-docmod`\ndoctest collection breaks due to incompatible DoctestModule API.\n\n<!--phmdoctest-label phmdoctest-bad-api-command-->\n```shell\npytest -v --phmdoctest-docmod\n```\n\n<!--phmdoctest-label phmdoctest-bad-api-output-->\n```text\nplugins: phmdoctest-1.0.0\ncollected 8 items\n\n::README.py::test_code_10_output_17 PASSED\n::README.py::test_unable_to_collect_doctests FAILED\n::doc__directive2.py::test_code_25_output_32 PASSED\n::doc__directive2.py::test_code_42_output_47 PASSED\n::doc__directive2.py::test_code_52_output_56 PASSED\n::doc__project.py::test_code_12_output_19 PASSED\n::doc__project.py::test_unable_to_collect_doctests FAILED\ntests/test_example.py::test_example PASSED\n```\n- There is one FAILED test called for each Markdown file with\n  Python interactive sessions.\n- The Python code/expected output examples still run successfully.\n- The pytest test case in tests/test_example.py succeeds.\n\n## Generate test files\n\nSave generated test files to the file system. Do not collect them.\nThe plugin does not use the non-public DoctestModule when doing this.\n\n<!--phmdoctest-label phmdoctest-generate-command-->\n```shell\npytest -v --phmdoctest-generate .gendir\n```\n\n<!--phmdoctest-label phmdoctest-generate-output-->\n```text\nplugins: phmdoctest-1.0.0\ncollected 1 item\n\ntests/test_example.py::test_example PASSED\n```\n\n- Note that only test_example.py was collected.\n- With `--phmdoctest-generate` the test files\n  generated from Markdown do not get collected.\n- Run pytest again on the generated test files.\n- The generated test files become stale with time.\n- Test files should be regenerated after modifying the Markdown.\n- See below to generate and collect test files with\n  a single pytest command.\n- .gendir is cleaned of all *.py\n  files before writing new test files.\n  Pre-existing *.py files in the output directory get renamed. If\n  output_directory inadvertently gets pointed at a Python\n  source directory, the renamed files can be recovered by renaming them.\n  - The FILENAME.py files found in the output directory are renamed\n    to noFILENAME.sav.\n  - If a noFILENAME.sav already exists it is not modified.\n  - Files in target_dir with other extensions are not modified.\n  - A FILENAME.py pre-existing in target_dir is only renamed\n    and not deleted.\n- .gendir is cleaned of all *.md files as well.\n  Pre-existing FILENAME.md files in the output directory get renamed\n  to FILENAME_md.sav.\n- If .gendir was empty, it will now have these *.py files:\n\n<!--phmdoctest-label gendir-files-->\n```\ntest_doc__directive2.py\ntest_doc__project.py\ntest_README.py\n```\n\n## Generate and collect test files\n\nA single pytest command will generate test files and collect them.\nThe plugin does not use the non-public DoctestModule when doing this.\n\n<!--phmdoctest-label generate-collect-command-->\n```shell\npytest -v --phmdoctest-generate .gendir . .gendir --doctest-modules --ignore src\n```\n\n<!--phmdoctest-label generate-collect-output-->\n```text\nplugins: phmdoctest-1.0.0\ncollected 10 items\n\ntests/test_example.py::test_example PASSED\n.gendir/test_README.py::test_README.session_00001_line_24 PASSED\n.gendir/test_README.py::test_code_10_output_17 PASSED\n.gendir/test_doc__directive2.py::test_code_25_output_32 PASSED\n.gendir/test_doc__directive2.py::test_code_42_output_47 PASSED\n.gendir/test_doc__directive2.py::test_code_52_output_56 PASSED\n.gendir/test_doc__project.py::test_doc__project.session_00001_line_31 PASSED\n.gendir/test_doc__project.py::test_doc__project.session_00002_line_46 PASSED\n.gendir/test_doc__project.py::test_doc__project.session_00003_line_55 PASSED\n.gendir/test_doc__project.py::test_code_12_output_19 PASSED\n```\n\nHow it works:\n- The plugin writes the generated test files during\n  the pytest collection phase.\n- This happens while pytest is collecting from `\".\"`\n- pytest does not collect from `.gendir` until after discovering\n  and collecting files in `\".\"`.\n- The leading `\".\"` in `.gendir` prevents pytest from searching\n  there for test files while searching `\".\"`.\n  See norecursedirs default values in Pytest Documentation |\n  API reference | Configuration Options | norecursedirs.\n- The `--doctest-modules` option tells pytest to look for doctests in\n  docstrings of *.py files.\n- When doing `--doctest-modules`, the `--ignore src` option tells\n  pytest not to collect modules from the src folder. We only\n  want to collect doctests from .gendir.\n  This prevents pytest from importing modules\n  there to look for doctests.\n\nThese are the ini file settings:\n\n```ini\n# pytest.ini and tox.ini\n[pytest]\naddopts = --phmdoctest-generate=.gendir --doctest-modules --ignore src\n```\n```toml\n# pyproject.toml\n[tool.pytest.ini_options]\naddopts = \"--phmdoctest-generate=.gendir --doctest-modules --ignore src\"\n```\n```ini\n# setup.cfg  Note: Use is discouraged by pytest docs.\n[tool:pytest]\naddopts = --phmdoctest-generate=.gendir --doctest-modules --ignore src\n```\n\nHere is a demo that runs on a checked out copy of the repository.\n\n```\n# With a terminal in the tests/sample directory\n# The first line collects 5 items.\n# The second line collects 3 items.\n\npytest -v --phmdoctest-generate=.gendir \".\" .gendir --ignore README.md --ignore doc/directive2.md --doctest-modules --ignore src\npytest -v --phmdoctest-generate=.gendir \".\" .gendir  --ignore-glob */*.md --doctest-modules --ignore src\n```\n\n## Help\n\npytest `--help` contains a **phmdoctest:** group in the middle and\nan ini-option near the bottom.  The help contains:\n- `--phmdoctest`\n- `--phmdoctest-generate`\n- `--phmdoctest-docmod`\n- `phmdoctest-collect`\n\n## Configure collection\n\nAn optional `phmdoctest-collect = ` section can be placed in the pytest\nini file. It is a list of lines of the format\n\n    glob [options]\n\nConsider using the section to pass collection options described below.\nThe options have the same names and behave like the options\naccepted by [phmdoctest usage][6].\n\n- The Markdown file must match one of the globs.\n- The glob is processed by Path.glob() from the Python standard library pathlib.\n  Path.glob() offers a \"**\" recursive pattern that means\n  \"this directory and all subdirectories recursively.\"\n- The globs are checked from top to bottom. The first glob to match the Markdown\n  file determines the phmdoctest command line options.\n- If there is no match the file will **not** be collected.\n- A line can have just the glob and no options. The glob is required.\n- The options should look like and have the same spacing as the command line\n  options passed to the tool [phmdoctest usage][6].\n  - Use double quotes as needed in TEXT.\n  - The plugin does not support `\\\"` escaped double quote.\n  - Look for list of options in the next section.\n- If a line that does not parse is needed, the plugin collects\n  a special test file that contains a failing test case with\n  an embedded error message.\n\nExample\n```ini\n# pytest.ini\n[pytest]\naddopts = --phmdoctest-docmod\nphmdoctest-collect =\n    doc/project.md --skip greeting --skip enjoyment\n    **/*.md\n```\nThen run this pytest command on the project files from\nthe Usage section ...\n\n<!--phmdoctest-label collect-section-command-->\n```shell\npytest -v --ignore tests/test_example.py\n```\noutput\n<!--phmdoctest-label collect-section-output-->\n```text\nplugins: phmdoctest-1.0.0\ncollected 7 items\n\n::README.py::README.session_00001_line_24 PASSED\n::README.py::test_code_10_output_17 PASSED\n::doc__directive2.py::test_code_25_output_32 PASSED\n::doc__directive2.py::test_code_42_output_47 PASSED\n::doc__directive2.py::test_code_52_output_56 PASSED\n::doc__project.py::doc__project.session_00001_line_31 PASSED\n::doc__project.py::doc__project.session_00002_line_46 PASSED\n```\n\n- The example passes the options `--skip greeting` and `--skip enjoyment`\n  when testing doc/project.md. The `--skip greeting` and `--skip enjoyment`\n  options cause 2 examples to be skipped. These are the first and\n  last examples in the file.\n- The example tests the two Python interactive sessions in the midlle\n  of the file as the last two items above.\n- The \"**/*.md\" recursively matches other Markdown files.\n  There are no otions.\n- The ini file globs above only apply to .md files.\n  We ignore the Python pytest test file tests/test_example.py\n  by adding the `--ignore` option.\n- Look for more phmdoctest-collect examples on GitHub in\n  tests/test_collect_section.py.\n\n\n### phmdoctest-collect options\n\n#### `-s, --skip TEXT`\nDo not test blocks with substring TEXT. Allowed multiple times.\n\n#### `--fail-nocode`\nMarkdown file with no code blocks left after applying skips\ngenerates a failing test.\n\n#### `-u, --setup TEXT`\nRun block with substring TEXT at test module setup time.\n\n#### `-d, --teardown TEXT`\nRun block with substring TEXT at test module teardown time.\n\n#### `--setup-doctest`\nMake globals created by the `--setup` Python code block\nor setup directive visible to Python interactive session >>> blocks.\n**Caution:** The globals are set at pytest Session scope.\nThe globals are visible to all doctests in the test suite.\nThis includes doctests collected by the plugin\nand doctests collected from other files due to `--doctest-modules`.\n\n### Notes\n\n- Fenced code blocks are searched for the substring TEXT.\n- `--skip TEXT` can apply to more than one block.\n- Exactly one block can match `--setup` and `--teardown`.\n\n### Equivalent directives\n\nThe HTML directive comments below placed in the Markdown file\ncan be used instead of specifying options in the\nphmdoctest-collect section.\nDirectives select a single fenced code block.\nThere are 10 directives in [phmdoctest Directives][5].\nHere are the directives equivalent to the collect section options.\n\n```\n  collect-section          HTML Directive\n  option                   comment\n------------------------------------------------\n-s, --skip TEXT        <!--phmdoctest-skip-->\n-u, --setup TEXT       <!--phmdoctest-setup-->\n-d, --teardown TEXT    <!--phmdoctest-teardown-->\n```\n\n## Hints\n\n- When invoking pytest, cwd must be in the subpath of the files to be collected\n  to avoid this error from pathlib.py in relative_to():\n  ValueError: `<file to be collected>` is not in the subpath of `<working directory>`\n- Note the plugin does not accept single quoted phmdoctest args in the\n  phmdoctest-collect section. A failing test will be collected.\n- Use underscore in conftest.py for pytest_plugins:\n  `pytest_plugins = [\"pytest_phmdoctest\"]`\n- An ImportPathMismatchError indicates two test files have the same name.\n- If using `--phmdoctest-generate` add `.gendir` to .gitignore.\n- pytest -vv output shows the path to the plugin temporary directory.\n- The `--report` option of the phmdoctest command lists all\n  fenced code blocks in the Markdown file.\n- phmdoctest can generate test files for multiple Markdown files\n  with one call by specifying a configuration file.\n- phmdoctest offers pytest pytester fixtures (suitable for plugin development)\n  to generate and run tests for a single Markdown file.\n\n## Related projects\n\n- phmdoctest\n- rundoc\n- byexample\n- sphinx.ext.doctest\n- sybil\n- doxec\n- egtest\n- pytest-codeblocks\n\n[1]: https://docs.python.org/3/library/doctest.html\n[3]: https://tmarktaylor.github.io/phmdoctest\n[4]: https://docs.pytest.org/en/stable\n[5]: https://tmarktaylor.github.io/phmdoctest#directives\n[6]: https://tmarktaylor.github.io/phmdoctest#usage\n\nMIT License\n\nCopyright (c) 2021-2022 Mark Taylor\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://tmarktaylor.github.io/pytest-phmdoctest",
    "keywords": "documentation,doctest,markdown,testing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-phmdoctest",
    "package_url": "https://pypi.org/project/pytest-phmdoctest/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytest-phmdoctest/",
    "project_urls": {
      "Bug Reports": "https://github.com/tmarktaylor/pytest-phmdoctest/issues",
      "Homepage": "https://tmarktaylor.github.io/pytest-phmdoctest",
      "Source": "https://github.com/tmarktaylor/pytest-phmdoctest/"
    },
    "release_url": "https://pypi.org/project/pytest-phmdoctest/1.0.0/",
    "requires_dist": [
      "packaging",
      "py",
      "pytest (>=5.4.3)",
      "phmdoctest (>=1.4.0)",
      "commonmark (>=0.9.1)",
      "myst-parser (>=0.15.1) ; extra == 'docs'",
      "sphinx (>=4.1.0) ; extra == 'docs'",
      "sphinx-rtd-theme (>=1.0.0) ; extra == 'docs'",
      "docutils (<0.17) ; extra == 'docs'",
      "black ; extra == 'inspect'",
      "flake8 ; extra == 'inspect'",
      "pep8-naming ; extra == 'inspect'",
      "check-manifest ; extra == 'inspect'",
      "build ; extra == 'inspect'",
      "twine ; extra == 'inspect'",
      "coverage ; extra == 'test'",
      "pytest (>=6.2) ; extra == 'test'",
      "PyYAML (>=5.4.1) ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "pytest plugin to test Python examples in Markdown using phmdoctest.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13524535,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "652a0be5b03860218dbb1f1d951f68cdda8b0e4f982d44dbcc52013198abb208",
          "md5": "aeaff087f187ca78865cff61679041e8",
          "sha256": "b6cade533b9888800012cb47816c63bada2c1f6249e5df363aea38470847998c"
        },
        "downloads": -1,
        "filename": "pytest_phmdoctest-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aeaff087f187ca78865cff61679041e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11997,
        "upload_time": "2021-11-10T20:13:19",
        "upload_time_iso_8601": "2021-11-10T20:13:19.673008Z",
        "url": "https://files.pythonhosted.org/packages/65/2a/0be5b03860218dbb1f1d951f68cdda8b0e4f982d44dbcc52013198abb208/pytest_phmdoctest-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6ef1236178b2ca7aa9873360f6609582c2a7cb12530a00767401be5b4c1f3f8",
          "md5": "8c6c28cf1d90a5cacfa297894d8df2ef",
          "sha256": "4547ba7e47814ee1d523e94e07255bd28549e0fa7ecec80e57eafefca986da2c"
        },
        "downloads": -1,
        "filename": "pytest-phmdoctest-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8c6c28cf1d90a5cacfa297894d8df2ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 37490,
        "upload_time": "2021-11-10T20:13:20",
        "upload_time_iso_8601": "2021-11-10T20:13:20.965708Z",
        "url": "https://files.pythonhosted.org/packages/e6/ef/1236178b2ca7aa9873360f6609582c2a7cb12530a00767401be5b4c1f3f8/pytest-phmdoctest-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7c6813ae40427bd57c87c088d79936c093e271f471810fbe9674c63946e279d",
          "md5": "63873755a50198df164b5d82c93e7994",
          "sha256": "f68a44cb13ede2c118e246edf8b11c22a0f570c24c714880f1044ac4bd4b3de2"
        },
        "downloads": -1,
        "filename": "pytest_phmdoctest-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63873755a50198df164b5d82c93e7994",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18813,
        "upload_time": "2022-04-15T12:36:17",
        "upload_time_iso_8601": "2022-04-15T12:36:17.447811Z",
        "url": "https://files.pythonhosted.org/packages/f7/c6/813ae40427bd57c87c088d79936c093e271f471810fbe9674c63946e279d/pytest_phmdoctest-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "148e2ab88b676468ac90116bd71003672e676bec79eed8a5b910b369e48c1f25",
          "md5": "454119f1e710afcf20cd6166e18b26db",
          "sha256": "9d2a57bef59a2ef20101f707bcce946dd4e5cb03066125bec1fe2b2092269cff"
        },
        "downloads": -1,
        "filename": "pytest-phmdoctest-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "454119f1e710afcf20cd6166e18b26db",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 52193,
        "upload_time": "2022-04-15T12:36:19",
        "upload_time_iso_8601": "2022-04-15T12:36:19.123882Z",
        "url": "https://files.pythonhosted.org/packages/14/8e/2ab88b676468ac90116bd71003672e676bec79eed8a5b910b369e48c1f25/pytest-phmdoctest-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7c6813ae40427bd57c87c088d79936c093e271f471810fbe9674c63946e279d",
        "md5": "63873755a50198df164b5d82c93e7994",
        "sha256": "f68a44cb13ede2c118e246edf8b11c22a0f570c24c714880f1044ac4bd4b3de2"
      },
      "downloads": -1,
      "filename": "pytest_phmdoctest-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "63873755a50198df164b5d82c93e7994",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18813,
      "upload_time": "2022-04-15T12:36:17",
      "upload_time_iso_8601": "2022-04-15T12:36:17.447811Z",
      "url": "https://files.pythonhosted.org/packages/f7/c6/813ae40427bd57c87c088d79936c093e271f471810fbe9674c63946e279d/pytest_phmdoctest-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "148e2ab88b676468ac90116bd71003672e676bec79eed8a5b910b369e48c1f25",
        "md5": "454119f1e710afcf20cd6166e18b26db",
        "sha256": "9d2a57bef59a2ef20101f707bcce946dd4e5cb03066125bec1fe2b2092269cff"
      },
      "downloads": -1,
      "filename": "pytest-phmdoctest-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "454119f1e710afcf20cd6166e18b26db",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 52193,
      "upload_time": "2022-04-15T12:36:19",
      "upload_time_iso_8601": "2022-04-15T12:36:19.123882Z",
      "url": "https://files.pythonhosted.org/packages/14/8e/2ab88b676468ac90116bd71003672e676bec79eed8a5b910b369e48c1f25/pytest-phmdoctest-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}