{
  "info": {
    "author": "James Pulec",
    "author_email": "jpulec@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "=====\r\nLoggit\r\n=====\r\n\r\nLoggit is a django app to record that a certain event transpired. Perhaps a\r\ncustomer made a purchase. Maybe an email was sent, or an order was shipped.\r\nWhatever domain specific events exist, make a record of them. Loggit ships\r\nwith a couple of basic models and is easily extended.\r\n\r\nDetailed info is in the 'docs' directory.\r\n\r\nQuick Start\r\n-----------\r\n\r\n1. Add \"loggit\" to your INSTALLED_APPS setting like this::\r\n\r\n       INSTALLED_APPS = (\r\n         ...\r\n         'loggit',\r\n       )\r\n\r\n   And define::\r\n   \r\n       LOGGIT_LOGENTRY_MODEL = '<app_label>.<ModelName>'\r\n       LOGGIT_LOGEVENT_MODEL = '<app_label>.<ModelName>'\r\n    \r\n   i. Optionally install django-generic-m2m. Provided in django-loggit are two\r\n    mixins that will add support for adding a generic M2M relationship to a\r\n    log entry, where objects can be added with a particular label and then will\r\n    be coalesced into the context that can be used by the event's render method.\r\n    See https://github.com/coleifer/django-generic-m2m .\r\n\r\n2. IMPORTANT: Loggit uses swappable models for its models. This is done so that\r\n   either the LogEntry or the LogEvent model can be replaced with something that\r\n   implements the same interface. However...For projects on Django 1.7+, this\r\n   means that whichever models you use when you do Loggit's first migrations,\r\n   must be the models you use for the lifetime of that project (i.e. migrations).\r\n   Read about how migrations handle django.contrib.auth and its swappable\r\n   model for more information.\r\n\r\n3. Run `python manage.py migrate` to create the taggit models. Before runnning,\r\n   make sure LOGGIT_LOGENTRY_MODEL and LOGGIT_LOGEVENT_MODEL are set to the\r\n   models you would like them to be for the lifetime of the project.\r\n\r\n4. Start creating events based on your domain, and implement how you want them\r\n   to be rendered.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jpulec/django-loggit",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-loggit",
    "package_url": "https://pypi.org/project/django-loggit/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-loggit/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/jpulec/django-loggit"
    },
    "release_url": "https://pypi.org/project/django-loggit/0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Keep records of domain actions",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1327777,
  "releases": {
    "0.1": []
  },
  "urls": [],
  "vulnerabilities": []
}