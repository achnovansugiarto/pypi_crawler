{
  "info": {
    "author": "Joren Hammudoglu",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Classy Decorators\n\n[![PyPI version](https://badge.fury.io/py/classy-decorators.svg)](https://badge.fury.io/py/classy-decorators)\n\nHassle-free creation of decorators for functions and methods, OO-style.\n\n## Features\n\n - One decorator to rule them all; it works on functions, methods, \n classmethods and staticmethods.\n - Easily define parameters with a dataclass-like annotated attribute syntax.\n - Runtime type-checking of decorator paremeters.\n - For decorators with all-default or no parameters, parentheses are optional: \n `@spam() == @spam`\n - Inheritance is supported.\n - Any decorator parameters and instance attributes are accessible (as copies) \n in bound methods as well; no need to worry about those pesky descriptors.\n - MyPy compatible and 100% test coverage.\n\n\n\n## Dependencies\n\nPython 3.8 or 3.9.\n\n\n## Install\n\n```bash\npip install classy-decorators\n```\n\nfor better runtime type checking:\n\n```bash\npip install classy-decorators[typeguard]\n```\n\n\n## Usage \n\n*The following code can also be found in the \n[examples](https://github.com/jorenham/classy-decorators/tree/master/examples).*\n\nCreate a decorator by subclassing `classy_decorators.Decorator`. \nYou can override the the decorated function or method using the \n`__call_inner__` method (`__call__` is meant for internal use only and should \nnot be used for this).\n\n### Simple decorator\n\n```python\nfrom classy_decorators import Decorator\n\nclass Double(Decorator):\n    def __call_inner__(self, *args, **kwargs) -> float:\n        return super().__call_inner__(*args, **kwargs) * 2\n```\n\nTo see it in action, let's decorate a function:\n\n```python\n@Double\ndef add(a, b):\n    return a + b\n\nassert add(7, 14) == 42\n```\n\nYou can also decorate methods and classmethods:\n\n```python\nclass AddConstant:\n    default_constant = 319\n\n    def __init__(self, constant=default_constant):\n        self.constant = constant\n\n    @Double\n    def add_to(self, value):\n        return value + self.constant\n\n    @Double\n    @classmethod\n    def add_default(cls, value):\n        return value + cls.default_constant\n\nassert AddConstant(7).add_to(14) == 42\nassert AddConstant.add_default(14) == 666\n```\n\n### Decorator parameters\n\nOur `Double` decorator is pretty nice, but we can do better! So let's create a\ndecorator that is able to multiply results by any number instead of only by `2`:\n\n```python\nclass Multiply(Decorator):\n    factor: int\n\n    def __call_inner__(self, *args, **kwargs) -> float:\n        return super().__call_inner__(*args, **kwargs) * self.factor\n```\n\nBy simply setting the type-annotated `factor` attribute, we can use it as \ndecorator parameter. If you are familiar with \n[dataclasses](https://docs.python.org/3/library/dataclasses.html), you can see\nthat this is very similar to defining dataclass fields.\n\n\n```python\n@Multiply(2)\ndef add_and_double(a, b):\n    return a + b\n\n@Multiply(factor=3)\ndef add_and_triple(a, b):\n    return a + b\n\nassert add_and_double(8, 15) == 46\nassert add_and_triple(8, 15) == 69\n```\n\n\n### Default parameters and inheritance\n\nIt's classy to be DRY, so let's combine our `Double` and `Multiply` decorators \ninto one that multiplies by `2`, unless specified otherwise:\n\n```python\nclass DoubleOrMultiply(Multiply):\n    factor = 2\n\n@DoubleOrMultiply\ndef add_and_double(a, b):\n    return a + b\n\n@DoubleOrMultiply(factor=3)\ndef add_and_triple(a, b):\n    return a + b\n\nassert add_and_double(7, 14) == 42\nassert add_and_triple(8, 15) == 69\n```\n\n\n### Advanced dataclass methods \n\nThe `Decorator` base class provided, aside from `__call_inner__`, two other\ninterface methods you can override:\n\n- `Decorator.__decorate__(self, **params)`, which is called just after a \nfunction method is decorated, with all decorator parameter values or defaults as\nkeyword arguments, i.e. `DoubleOrMultiply.__decorate__(self, factor: int = 2)`.\n- `Decorator.__bind__(self, instance_or_class)`, which is called when a method \n(not for functions), is bound to an instance, or when a class/static method is \nbound to a class.\n\nAdditionally, these properties can be used for figuring out what's been \ndecorated:\n\n- `is_function`\n- `is_method`; either an instance, class- or static method\n- `is_instancemethod` \n- `is_classmethod`\n- `is_staticmethod`\n\nAnd for methods, `is_bound` and `is_unbound` are provided.\n\nIf you're looking for the original wrapped function, you can find it at \n`__func__`.\n\n---\n\n*Classy, eh?*\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jorenham/classy-decorators/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "classy-decorators",
    "package_url": "https://pypi.org/project/classy-decorators/",
    "platform": "",
    "project_url": "https://pypi.org/project/classy-decorators/",
    "project_urls": {
      "Homepage": "https://github.com/jorenham/classy-decorators/"
    },
    "release_url": "https://pypi.org/project/classy-decorators/1.2.0/",
    "requires_dist": [
      "typeguard ; extra == 'typeguard'"
    ],
    "requires_python": ">=3.8.0",
    "summary": "Hassle-free creation of decorators for functions and methods, OO-style.",
    "version": "1.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8756094,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83ffce132e2416729e93cd69bbd9b60db862e774bfeb61e5f23291179668c07d",
          "md5": "18c1846ac506d18e2ef01a0e34891e3e",
          "sha256": "e89a1c74bd7713cece9ab2572f4a696dae8b6b2e63a3f0b88545f007ff6ddaff"
        },
        "downloads": -1,
        "filename": "classy_decorators-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18c1846ac506d18e2ef01a0e34891e3e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17056,
        "upload_time": "2020-11-17T13:18:09",
        "upload_time_iso_8601": "2020-11-17T13:18:09.960822Z",
        "url": "https://files.pythonhosted.org/packages/83/ff/ce132e2416729e93cd69bbd9b60db862e774bfeb61e5f23291179668c07d/classy_decorators-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69c6036695c806f666df69ddcbd03740e329fc5e490840564362dd2a526a0176",
          "md5": "88db4d7112634fc1b097dceafe87036c",
          "sha256": "abd8d6cc173c75b83423fbfb9028cb2166983b418fe736b0c94c0f1e6d0d5678"
        },
        "downloads": -1,
        "filename": "classy-decorators-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "88db4d7112634fc1b097dceafe87036c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4813,
        "upload_time": "2020-11-17T13:18:10",
        "upload_time_iso_8601": "2020-11-17T13:18:10.966857Z",
        "url": "https://files.pythonhosted.org/packages/69/c6/036695c806f666df69ddcbd03740e329fc5e490840564362dd2a526a0176/classy-decorators-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "675c0743f2cf39e0e842fc5887fe9ecd67a627f459ae4c82155030726b4bfc41",
          "md5": "6033d30ad2480ac5672c35de772a4906",
          "sha256": "91e62cc5a2eaf6238416c834f20c46bf21f7fce4601494952486e555c7a9faa1"
        },
        "downloads": -1,
        "filename": "classy_decorators-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6033d30ad2480ac5672c35de772a4906",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 22548,
        "upload_time": "2020-11-19T22:09:40",
        "upload_time_iso_8601": "2020-11-19T22:09:40.679637Z",
        "url": "https://files.pythonhosted.org/packages/67/5c/0743f2cf39e0e842fc5887fe9ecd67a627f459ae4c82155030726b4bfc41/classy_decorators-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48cba68234891ed40d1632f92e8c3c71abb74a17e76645a715d0186db1a804d4",
          "md5": "a358fde841a3657a2bc8f6f68f0c8975",
          "sha256": "1cb7fa43ff6434220a102352d07b269cfeceebc8c4eee9084797e600ff1ea097"
        },
        "downloads": -1,
        "filename": "classy-decorators-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a358fde841a3657a2bc8f6f68f0c8975",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.0",
        "size": 10339,
        "upload_time": "2020-11-19T22:09:41",
        "upload_time_iso_8601": "2020-11-19T22:09:41.882519Z",
        "url": "https://files.pythonhosted.org/packages/48/cb/a68234891ed40d1632f92e8c3c71abb74a17e76645a715d0186db1a804d4/classy-decorators-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e127190d4734a767da0a1d77ffd991df612a9f12841c75ec80f7b8e21ad83fb8",
          "md5": "70405b959251eded5ffc1b2732a1f357",
          "sha256": "e4aec507d797f235bebcb7647832b212f23f48dcb8cecddc3f06f013b4f13a05"
        },
        "downloads": -1,
        "filename": "classy_decorators-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70405b959251eded5ffc1b2732a1f357",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 22153,
        "upload_time": "2020-11-26T14:53:23",
        "upload_time_iso_8601": "2020-11-26T14:53:23.508146Z",
        "url": "https://files.pythonhosted.org/packages/e1/27/190d4734a767da0a1d77ffd991df612a9f12841c75ec80f7b8e21ad83fb8/classy_decorators-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8da1bfbe06e36fbdc59966e95c6298df8cdab7e7a8fac5693eabcc983538ae5f",
          "md5": "43b1d36ab87f3a803c0aab82ea7e673f",
          "sha256": "dd9b76ec37ba39e10c94f350b33eaff84e22db734e6d4b07766368f06c40b328"
        },
        "downloads": -1,
        "filename": "classy-decorators-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "43b1d36ab87f3a803c0aab82ea7e673f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.0",
        "size": 11109,
        "upload_time": "2020-11-26T14:53:24",
        "upload_time_iso_8601": "2020-11-26T14:53:24.579995Z",
        "url": "https://files.pythonhosted.org/packages/8d/a1/bfbe06e36fbdc59966e95c6298df8cdab7e7a8fac5693eabcc983538ae5f/classy-decorators-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e127190d4734a767da0a1d77ffd991df612a9f12841c75ec80f7b8e21ad83fb8",
        "md5": "70405b959251eded5ffc1b2732a1f357",
        "sha256": "e4aec507d797f235bebcb7647832b212f23f48dcb8cecddc3f06f013b4f13a05"
      },
      "downloads": -1,
      "filename": "classy_decorators-1.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "70405b959251eded5ffc1b2732a1f357",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.0",
      "size": 22153,
      "upload_time": "2020-11-26T14:53:23",
      "upload_time_iso_8601": "2020-11-26T14:53:23.508146Z",
      "url": "https://files.pythonhosted.org/packages/e1/27/190d4734a767da0a1d77ffd991df612a9f12841c75ec80f7b8e21ad83fb8/classy_decorators-1.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8da1bfbe06e36fbdc59966e95c6298df8cdab7e7a8fac5693eabcc983538ae5f",
        "md5": "43b1d36ab87f3a803c0aab82ea7e673f",
        "sha256": "dd9b76ec37ba39e10c94f350b33eaff84e22db734e6d4b07766368f06c40b328"
      },
      "downloads": -1,
      "filename": "classy-decorators-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "43b1d36ab87f3a803c0aab82ea7e673f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.0",
      "size": 11109,
      "upload_time": "2020-11-26T14:53:24",
      "upload_time_iso_8601": "2020-11-26T14:53:24.579995Z",
      "url": "https://files.pythonhosted.org/packages/8d/a1/bfbe06e36fbdc59966e95c6298df8cdab7e7a8fac5693eabcc983538ae5f/classy-decorators-1.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}