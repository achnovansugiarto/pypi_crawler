{
  "info": {
    "author": "Chaoming Wang",
    "author_email": "adaduo@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": ".. image:: https://github.com/PKU-NIP-Lab/NumpyBrain/blob/master/docs/images/logo.png\n    :target: https://github.com/PKU-NIP-Lab/NumpyBrain\n    :align: center\n    :alt: logo\n\n.. image:: https://readthedocs.org/projects/numpybrain/badge/?version=latest\n    :target: https://numpybrain.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://anaconda.org/oujago/npbrain/badges/version.svg\n    :target: https://anaconda.org/oujago/npbrain\n\n.. image:: https://badge.fury.io/py/npbrain.svg\n    :target: https://badge.fury.io/py/npbrain\n\n\n\n**Note**: *BrainPy is a project under development.*\n*More features are coming soon. Contributions are welcome.*\n\n\nWhy to use BrainPy\n=====================\n\n``BrainPy`` is a microkernel framework for SNN (spiking neural network) simulation\npurely based on **native** python. It only relies on `NumPy <https://numpy.org/>`_.\nHowever, if you want to get faster performance,you can additionally\ninstall `Numba <http://numba.pydata.org/>`_. With `Numba`, the speed of C or FORTRAN can\nbe obtained in the simulation.\n\n``BrainPy`` wants to provide a highly flexible and efficient SNN simulation\nframework for Python users. It endows the users with the fully data/logic flow control.\nThe core of the framework is a micro-kernel, and it's easy to understand (see\n`How NumpyBrain works`_).\nBased on the kernel, the extension of the new models or the customization of the\ndata/logic flows are very simple for users. Ample examples (such as LIF neuron,\nHH neuron, or AMPA synapse, GABA synapse and GapJunction) are also provided.\nBesides the consideration of **flexibility**, for accelerating the running\n**speed** of NumPy codes, `Numba` is used. For most of the times,\nmodels running on `Numba` backend is very fast\n(see `examples/benchmark <https://github.com/PKU-NIP-Lab/NumpyBrain/tree/master/examples/benchmark>`_).\n\n.. figure:: https://github.com/PKU-NIP-Lab/NumpyBrain/blob/master/docs/images/speed_comparison.png\n    :alt: Speed comparison with brian2\n    :figclass: align-center\n    :width: 350px\n\nMore details about BrainPy please see our `document <https://numpybrain.readthedocs.io/en/latest/>`_.\n\n\nInstallation\n============\n\nInstall ``BrainPy`` using ``pip``::\n\n    $> pip install git+https://github.com/PKU-NIP-Lab/BrainPy\n\nInstall from source code::\n\n    $> python setup.py install\n\n\nThe following packages need to be installed to use ``BrainPy``:\n\n- Python >= 3.5\n- NumPy >= 1.13\n- Sympy >= 1.2\n- Matplotlib >= 2.0\n- autopep8\n\nPackages recommended to install:\n\n- Numba >= 0.40.0\n- JAX >= 0.1.0\n\n\nDefine a Hodgkin–Huxley neuron model\n====================================\n\n.. code-block:: python\n\n    import npbrain.numpy as np\n    import npbrain as nb\n\n    def HH(noise=0., E_Na=50., g_Na=120., E_K=-77., g_K=36.,\n           E_Leak=-54.387, g_Leak=0.03, C=1.0, Vth=20.):\n\n        ST = nb.types.NeuState(\n            {'V': -65., 'm': 0., 'h': 0., 'n': 0., 'sp': 0., 'inp': 0.},\n            help='Hodgkin–Huxley neuron state.\\n'\n                 '\"V\" denotes membrane potential.\\n'\n                 '\"n\" denotes potassium channel activation probability.\\n'\n                 '\"m\" denotes sodium channel activation probability.\\n'\n                 '\"h\" denotes sodium channel inactivation probability.\\n'\n                 '\"sp\" denotes spiking state.\\n'\n                 '\"inp\" denotes synaptic input.\\n'\n        )\n\n        @nb.integrate\n        def int_m(m, t, V):\n            alpha = 0.1 * (V + 40) / (1 - np.exp(-(V + 40) / 10))\n            beta = 4.0 * np.exp(-(V + 65) / 18)\n            return alpha * (1 - m) - beta * m\n\n        @nb.integrate\n        def int_h(h, t, V):\n            alpha = 0.07 * np.exp(-(V + 65) / 20.)\n            beta = 1 / (1 + np.exp(-(V + 35) / 10))\n            return alpha * (1 - h) - beta * h\n\n        @nb.integrate\n        def int_n(n, t, V):\n            alpha = 0.01 * (V + 55) / (1 - np.exp(-(V + 55) / 10))\n            beta = 0.125 * np.exp(-(V + 65) / 80)\n            return alpha * (1 - n) - beta * n\n\n        @nb.integrate(noise=noise / C)\n        def int_V(V, t, m, h, n, Isyn):\n            INa = g_Na * m ** 3 * h * (V - E_Na)\n            IK = g_K * n ** 4 * (V - E_K)\n            IL = g_Leak * (V - E_Leak)\n            dvdt = (- INa - IK - IL + Isyn) / C\n            return dvdt\n\n        def update(ST, _t_):\n            m = np.clip(int_m(ST['m'], _t_, ST['V']), 0., 1.)\n            h = np.clip(int_h(ST['h'], _t_, ST['V']), 0., 1.)\n            n = np.clip(int_n(ST['n'], _t_, ST['V']), 0., 1.)\n            V = int_V(ST['V'], _t_, m, h, n, ST['inp'])\n            sp = np.logical_and(ST['V'] < Vth, V >= Vth)\n            ST['sp'] = sp\n            ST['V'] = V\n            ST['m'] = m\n            ST['h'] = h\n            ST['n'] = n\n            ST['inp'] = 0.\n\n        return nb.NeuType(requires={\"ST\": ST}, steps=update, vector_based=True)\n\n\n\nDefine an AMPA synapse model\n============================\n\n.. code-block:: python\n\n    def AMPA(g_max=0.10, E=0., tau_decay=2.0):\n\n        requires = dict(\n            ST=nb.types.SynState(['s'], help='AMPA synapse state.'),\n            pre=nb.types.NeuState(['sp'], help='Pre-synaptic state must have \"sp\" item.'),\n            post=nb.types.NeuState(['V', 'inp'], help='Post-synaptic neuron must have \"V\" and \"inp\" items.')\n        )\n\n        @nb.integrate(method='euler')\n        def ints(s, t):\n            return - s / tau_decay\n\n        def update(ST, _t_, pre):\n            s = ints(ST['s'], _t_)\n            s += pre['sp']\n            ST['s'] = s\n\n        @nb.delayed\n        def output(ST, post):\n            post_val = - g_max * ST['s'] * (post['V'] - E)\n            post['inp'] += post_val\n\n        return nb.SynType(requires=requires, steps=(update, output), vector_based=False)\n\n\n\n.. _How NumpyBrain works: https://numpybrain.readthedocs.io/en/latest/guides/how_it_works.html",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PKU-NIP-Lab/BrainPy",
    "keywords": "computational neuroscience",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "NeuroDynamics",
    "package_url": "https://pypi.org/project/NeuroDynamics/",
    "platform": "",
    "project_url": "https://pypi.org/project/NeuroDynamics/",
    "project_urls": {
      "Homepage": "https://github.com/PKU-NIP-Lab/BrainPy"
    },
    "release_url": "https://pypi.org/project/NeuroDynamics/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "NeuroDynamics: A Just-In-Time compilation approach for neuronal dynamics simulation.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8488114,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d4bcdd5fa197e43e527b0285994b8667ebe6e20e0c066aacd4c29ca2075cdfd",
          "md5": "1f397d7a6ef30653948e768bc07c61d6",
          "sha256": "f1880dc416c25275d7634ae46ed74d10db2fc59c3f8ba8cab0faa5383034c1ad"
        },
        "downloads": -1,
        "filename": "NeuroDynamics-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1f397d7a6ef30653948e768bc07c61d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 112151,
        "upload_time": "2020-10-23T22:46:00",
        "upload_time_iso_8601": "2020-10-23T22:46:00.507032Z",
        "url": "https://files.pythonhosted.org/packages/1d/4b/cdd5fa197e43e527b0285994b8667ebe6e20e0c066aacd4c29ca2075cdfd/NeuroDynamics-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d4bcdd5fa197e43e527b0285994b8667ebe6e20e0c066aacd4c29ca2075cdfd",
        "md5": "1f397d7a6ef30653948e768bc07c61d6",
        "sha256": "f1880dc416c25275d7634ae46ed74d10db2fc59c3f8ba8cab0faa5383034c1ad"
      },
      "downloads": -1,
      "filename": "NeuroDynamics-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1f397d7a6ef30653948e768bc07c61d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 112151,
      "upload_time": "2020-10-23T22:46:00",
      "upload_time_iso_8601": "2020-10-23T22:46:00.507032Z",
      "url": "https://files.pythonhosted.org/packages/1d/4b/cdd5fa197e43e527b0285994b8667ebe6e20e0c066aacd4c29ca2075cdfd/NeuroDynamics-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}