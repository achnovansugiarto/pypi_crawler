{
  "info": {
    "author": "Sine Nomine Associates",
    "author_email": "sna-packager@sinenomine.net",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\nThis is FABS, the \"Flexible AFS Backup System\", a set of tools and daemons to\nhelp backup AFS cells. This file serves as a kind of \"quick start\" for setting\nup fabs, as well as a general overview of what it is. It does not document all\nof the functionality in fabs; see our manpages for more detailed info.\n\nInstall (RPM/Debian)\n====================\n\nA few prebuilt packages are available for each release on GitHub:\n<https://github.com/openafs-contrib/fabs/releases/>\n\nFor RHEL/CentOS and Fedora, you can also use the openafs-contrib yum repo\nprovided by Sine Nomine Associates:\n\n    $ yum install https://download.sinenomine.net/openafs/contrib/sna-openafs-contrib-release-latest.noarch.rpm\n\nSee <https://download.sinenomine.net/openafs/contrib/> for info about the repo.\n\nNote that the RPM packaging does not declare dependencies for the following:\n\n - OpenAFS itself\n - dumpscan\n\nThis just makes it easier to install fabs when those are not installed via RPM,\nwhich is pretty common. You must ensure yourself that OpenAFS and dumpscan are\nbuilt and installed somewhere. You can get dumpscan from the OpenAFS source\ntree, or you can build a standalone dumpscan from here:\n<https://github.com/openafs-contrib/cmu-dumpscan>.\n\nInstall (pip)\n=============\n\n    $ pip3 install --upgrade fabs\n\nInstall from source\n===================\n\nTo manually install from a git checkout, run something like the following:\n\n    $ python3 setup.py build\n    $ python3 setup.py install --skip-build\n\nHowever, by default, that will use paths in `/opt/fabs`. For more traditional\npaths, you can specify a few path variables like so:\n\n    $ export PREFIX=/usr\n    $ export LOCALSTATEDIR=/var\n    $ export SYSCONFDIR=/etc\n    $ python3 setup.py build && python3 setup.py install --skip-build\n\nThis will only install the fabs libraries and commands, though. There are some\nadditional man pages and other documentation in the `doc` dir. Ideally, just\nuse the RPM or other packaging to install fabs.\n\nBuilding Packages\n=================\n\nExample Debian packaging exists in the `debian` dir. Run the normal `debuild`\ncommand or similar to build a Debian package.\n\nRPM packaging is in the `rpm` dir. Run:\n\n    $ ./rpm/rules help\n\nTo see a list of targets to build.\n\nSetup\n=====\n\nAfter installing fabs, you must initialize a couple of things (the SQL db, and\nour dump blob storage). But before you can initialize those, you should check\nthe configuration to see if the db and dump blob storage are configured for\nwhere you want them to go.\n\nTo change the configuration, edit or add new files in /etc/fabs/fabs.yaml.d/.\nTo see what the built-in defaults are, run:\n\n    $ fabsys config --dump-all\n\nWhich can give you an idea for the configuration file format, and what options\nare available. For actual documentation on the configuration directives, see\nthe manpage for `fabsys_config(1)`.\n\nDB Setup\n========\n\nTo check the db connection url, run this:\n\n    $ fabsys config db/url\n\nThat will give you the currently-configured url fabs will use to connect to\nthe database. The built-in default is a sqlite database, which is fine unless\nyou want to use some other external database. (See the section about the\n`db/url` directive in `fabsys_config(1)` for more information about other\ndatabase types.)\n\nTo get the relevant SQL commands to initialize the db (create tables and such),\nrun this:\n\n    $ fabsys db-init --sql\n\nOf course, if you want to save that SQL to a file, just redirect the output:\n\n    $ fabsys db-init --sql > /tmp/fabs-db.sql\n\nOr, if you want fabs to run that SQL itself, and cause the tables to be\ncreated, you can do this:\n\n    $ fabsys db-init --exec\n\nOf course, in order to run that, you must have rights (via the `db/url`\nconnection url) to access the database and create tables, etc.\n\nSee the manpage for `fabsys_config(1)` for more information (look for the\nsection on `db/url`).\n\nStorage Setup\n=============\n\nTo check what directories fabs will use for storing volume blobs, run this:\n\n    $ fabsys config dump/storage_dirs\n\nThat will tell you what fabs will use as a directory to store volume blobs.\nBefore fabs will be willing to use that directory, though, you must initialize\nit, by running this command:\n\n    $ fabsys storage-init --all\n\nThat will create a few things in that directory to indicate that it is valid\nfor use as a fabs blob storage directory.\n\nAFS/krb5 Setup\n==============\n\nIn order for fabs to be able to dump volumes and do other privileged operations\nwith AFS, it needs some credentials to do. This can be provided by a krb5\nkeytab.\n\nYou can also use -localauth for authenticated AFS commands, but this is not\nrecommended for production use, since not all operations support -localauth. To\nuse this (perhaps for initial testing or debugging), enable the configuration\noption `afs/localauth`.\n\nFor non-localauth mode, you need a krb5 keytab to authenticate to AFS. By\ndefault, fabs looks for this keytab in /etc/fabs/afsadmin.keytab, but you can\nspecify a different path with the config option `afs/keytab`.\n\nYou must be able to authenticate to AFS using this keytab. Here is an example\nof how you can do so manually:\n\n    $ k5start -t -f /etc/fabs/afsadmin.keytab -U -- vos examine root.cell\n\nThat command will examine the root.cell volume in your cell after\nauthenticating to AFS using the afsadmin.keytab file via k5start. If you see\nany errors or warnings, something is probably wrong.\n\nFABS also makes use of some AFS `fs` commands, so make sure you have an AFS\nclient running and operational.\n\nServer Daemon\n=============\n\nfabs has a single server daemon that is used for orchestrating backup runs, as\nwell as checking for errors, sending reports, etc. You can run it manually like so:\n\n    $ fabsys server\n\nAnd it will run in the foreground until it receives a SIGINT or SIGTERM,\nlogging to the local syslog `daemon` facility.\n\nTo run it with debugging turned on, you can run it like so:\n\n    $ fabsys server -x log/level=debug\n\nBut be warned that that generates a _LOT_ of data when backup runs are actually\nrunning.\n\nWe do not provide an init script for `fabsys server`. Instead, it is intended\nthat you just run it under bosserver. See OpenAFS documentation for how to run\na command under bosserver.\n\nNote that the server process currently has no way to re-read configuration\nwhile running. You must restart the server process for it to notice any\nconfiguration changes.\n\nRunning Backups\n===============\n\nTo run a backup, run this:\n\n    $ fabsys backup-start --all\n\nHowever, by default, fabs will not backup any volumes. You have to give it a\npattern of volumes to match in the `dump/include/volumes` configuration option\n(to backup by volume name), or via `dump/include/fileservers` (to backup by\nfileserver). For example, specify a pattern of `app.*` to backup all volumes\nthat begin with `app.`.\n\nTo backup a specific volume, run this:\n\n    $ fabsys backup-start --volume app.foo\n\nWhich will only backup the volume `app.foo`.\n\nIt is also useful to be able to give a \"note\" to a backup run, like so:\n\n    $ fabsys backup-start --all --note \"Daily backup for Fri Jun 19\"\n\nOr something like that. That note will be associated with the backup run in the\ndatabase, and will be printed by status reporting tools and the like.\n\nAlso note that `fabsys backup-start` just schedules/starts the backup. The process\nthat actually runs the backup is the `fabsys server` process. The `fabsys server`\nprocess also only scans for scheduled backups ever minute or so, so you will\nneed to wait up to a minute for the dumps to actually start running.\n\nThere are also more options for including/excluding volumes and fileservers\nfrom backups. See the documentation for the `dump/include/*`, `dump/exclude/*`,\nand `dump/filter_cmd/*` options in `fabsys_config(1)`.\n\nNote that, at least currently, there is no mechanism for scheduling backups at\ncertain times. To run a backup every day or every week, etc, just run `fabs\nbackup-start` via cron.\n\nBackup Status\n=============\n\nTo view the status of a backup run while it is running, you can run this:\n\n    $ fabsys backup-status\n\nWhich shows some information about a backup run that is currently running. It\nalso shows information about the individual dumps that are spawned by the\nbackup run, but depending on the state, each dump is either just included in a\ncount (e.g. `56 job(s) in state CLONE_PENDING`), or details about the job are\nactually shown (such as, when the `vos dump` command is actually running).\n\nBy default this just shows some human-readable plain text. This information is\nalso available as machine-readable JSON by running this:\n\n    $ fabsys backup-status --format json\n\nWhich can be used to format the status output differently, or can be used for\nmore automated monitoring/alerts, or something similar.\n\nReporting\n=========\n\nfabs can generate reports when a backup run finishes, providing some\ninformation about failures, which volumes were unchanged, and other\ninformation. By default no report is generated, but if you specify a command in\nthe config options `report/txt/command` or `report/json/command`, that command\nwill be run with the report data on stdin when a backup run finishes.\n\nThe `report/txt/command` command is given a plain text human-readable report.\nThe `report/json/command` command is given JSON-formatted data instead, so you\ncan format your own reports. See the `fabsys_config(1)` manpage on those\ndirectives for more information.\n\nVolume Dump Blob Storage\n========================\n\nThe format of the volume dump blob storage directory is fairly simple. There\nare a few levels of directories just to reduce the number of directory entries\nper directory, but at the lowest level, there is just one dump blob per volume.\nRight now, the filenames are all formatted as such:\n\n    <volid>.<fabs_internal_id>.dump\n\nSo, for example:\n\n    536870915.324.dump\n\nSo, whenever a volume has changed and is dumped again, it gets a different (but\nvery similar) filename.\n\nCurrently, the general scheme in mind for limiting space in the blob storage\ndirectory is to keep only the most recent copy of a volume around, and delete\nall other copies from disk (but keeping them around on tape). The way that you\ncan achieve this is to periodically run `fabsys storage-trim`, which will give\nyou a list of path names that are redundant (that is, we have another dump file\nthat is the most recent for that volume).\n\nThe idea is that you run `fabsys storage-trim`, and examine each printed\nfilename to see if it has been backed up to tape or other long-term storage. If\nit has, then you can just delete the file from disk. If not, just skip the\nfile, or you can back it up to tape immediately.\n\nDisaster Recovery\n=================\n\nIn the event of losing everything on the fabs backup server, it's still\npossible to restore volume data relatively intuitively. We store volume blobs\nas described in the previous section, so manually looking for dump blobs for a\nspecific volume id is straightforward, and those blobs can be passed to `vos\nrestore` like any volume dump blob.\n\nYou may want to backup all fabs-related data, though, so in the event of data\nloss on the fabs backup server, you can easily restore all of the\nfabs-related data so all path data and other information is just as it was\nbefore. You can of course ensure that you've backed up everything needed for\nrunning fabs by backing up everything on the machine, but you may want to know\nwhat specific files are important to fabs.\n\nAll of the fabs-related data that is currently worth backing up is as follows:\n\n - The fabs configuration, typically in /etc/fabs.\n - The fabs database. Where this is located can be found by running `fabs\n   config db/url`. By default, our database is in a sqlite database in\n   /var/lib/fabs/fabs.sqlite.\n - The volume dump blob storage. The locations for this can be found by running\n   `fabsys config dump/storage_dirs`. By default, there is only one dir, which is\n   /var/lib/fabs/fabs-dumps.\n\nSo, by default, you can backup the whole fabs system by backing up all files\ninside /etc/fabs and /var/lib/fabs. Of course, this may change if you change\nthe paths in the fabs configuration, and future versions of fabs may add data\nin other locations. In general, though, you should be able to always backup\neverything needed for fabs by backing up two things:\n\n - The /etc/fabs directory.\n - All locations referenced by the configuration. You can see the entire\n   configuration by running `fabsys config --dump-all`.\n\nHow to actually backup this data is up to you; fabs does not currently have a\nmechanism for backing up itself.\n\nRestoring (CLI)\n===============\n\nTo restore a volume, first you must find which backup of it that you want to\nrestore. You can search for backups of a volume using the `fabsys dump-find`\ncommand, which can find backup dumps by volume name or by path. For examine:\n\n    $ fabsys dump-find --volume user.adeason --near 1438491600 --admin\n\nThat will search for backups of the volume `home.adeason` around the timestamp\n1438491600 (unix time). The --admin flag indicates this is being performed by\nan administrator, and so no access checks will be performed.\n\nSearching by path looks like this:\n\n    $ fabsys dump-find --path /afs/cell/user/adeason --near 1438491600 --admin\n\nTo search on behalf of a user (typically done via some scripting frontend or\nweb interface), you can run it like this:\n\n    $ fabsys dump-find --path /afs/cell/user/adeason --near 1438491600 --user adeason\n\nWhich checks that `adeason` has permission to restore that volume. That\nauthorization check is done by checking if `adeason` can write to the root\ndirectory of the volume (specifically, if they have rlidw rights).\n\nIn the output of those commands, they will show some info for each dump found,\nincluding the volume dump id. That volume dump id is what you use to actually\nrestore the volume, with the `fabsys restore-start` command:\n\n    $ fabsys restore-start --dump-id 6 --admin\n\nAgain, --admin bypasses authorization checks (and `--user <user>` says what\nuser to check authorization for).\n\nTo view status on a running restore, you can run:\n\n    $ fabsys restore-status\n\nOr to see restore requests from a specific user:\n\n    $ fabsys restore-status --user adeason\n\nWhen the data has been restored to a staging location, that location will be\nshown in the `fabsys restore-status` output, and the\n/etc/fabs/hooks/stage-notify script will be run. That script can, for example,\nsend an email to the user to let them know a restore has finished.\n\nAfter a certain amount of time (configurable via `stage/lifetime`, defaults to\n1 week), the staging data will be removed, and the restore request will be\nmarked as done.\n\nKilling/Retrying\n================\n\nBackup runs and restore requests can be forcibly killed with the two commands:\n\n    $ fabsys backup-kill <brun_id>\n    $ fabsys restore-kill <req_id>\n\nThis will cause the relevant job to be marked as \"failed\", just as if it\nencountered an error multiple times and gave up. Pass the --note option to\nprovide a reason as to why the job was killed (the note is free-form text,\nstored in the database with the relevant job).\n\nLater on, you can cause a failed job to be retried from the last known good\npoint by running:\n\n    $ fabsys backup-retry <brun_id>\n    $ fabsys restore-retry <req_id>\n\nThat can be done for jobs that have failed either because they were killed, or\nbecause they failed too many times. Of course, it is recommended that you fix\nwhatever problem was causing the job to fail, before issuing that command.\n\nUpgrades\n========\n\nIf you are upgrading from a previous version of fabs where the database schema\nwas different, you will need to upgrade the database with the\n`fabsys db-upgrade` command. This command can tell you if the db needs to be\nupgraded:\n\n    $ fabsys db-upgrade\n    \n    Database MUST be upgraded (version 3 -> 4)\n    \n    See the documentation for the --exec and --sql options to perform the\n    upgrade.  Please make a backup copy of the database before upgrading!\n\nOr if the db is already at the current version:\n\n    $ fabsys db-upgrade\n    \n    Database already at latest version 4\n\nTo perform the upgrade, you should make a backup of the database, and then run\n`fabsys db-upgrade --exec` or `fabsys db-upgrade --sql` to perform the upgrade.\nSee `fabsys_db-upgrade(1)` for details.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/openafs-contrib/fabs",
    "keywords": "",
    "license": "ISC",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fabs",
    "package_url": "https://pypi.org/project/fabs/",
    "platform": null,
    "project_url": "https://pypi.org/project/fabs/",
    "project_urls": {
      "Homepage": "https://github.com/openafs-contrib/fabs"
    },
    "release_url": "https://pypi.org/project/fabs/1.1/",
    "requires_dist": [
      "PyYAML (>=3.10)",
      "SQLAlchemy (>=0.8)",
      "python-dateutil",
      "Alembic (>=0.4) ; extra == 'alembic'"
    ],
    "requires_python": "",
    "summary": "A flexible backup suite for AFS cells",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14311135,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7535ec54d08c957d001f27f2074cf8508ff3d1737545971be8ebea9ed9b8892",
          "md5": "529d3c4ba53d2cca6b4c6f5d53d75cd9",
          "sha256": "ec7093f7a2ccfe3440cd964953fbc717f86bdd84552e448ea29148c12203eb60"
        },
        "downloads": -1,
        "filename": "fabs-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "529d3c4ba53d2cca6b4c6f5d53d75cd9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 199248,
        "upload_time": "2022-07-01T17:57:58",
        "upload_time_iso_8601": "2022-07-01T17:57:58.396338Z",
        "url": "https://files.pythonhosted.org/packages/a7/53/5ec54d08c957d001f27f2074cf8508ff3d1737545971be8ebea9ed9b8892/fabs-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31d780ae5b616b7035fa8f992d9592565ee487810d8c007ae7c883072a167629",
          "md5": "43f787d979fd7a7d8a50276521bbaa66",
          "sha256": "57663aac467b29f671628ac2cd607b791ba5fda6900afb7edab8c8dfb939d5d5"
        },
        "downloads": -1,
        "filename": "fabs-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "43f787d979fd7a7d8a50276521bbaa66",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 438646,
        "upload_time": "2022-07-01T17:58:00",
        "upload_time_iso_8601": "2022-07-01T17:58:00.156051Z",
        "url": "https://files.pythonhosted.org/packages/31/d7/80ae5b616b7035fa8f992d9592565ee487810d8c007ae7c883072a167629/fabs-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7535ec54d08c957d001f27f2074cf8508ff3d1737545971be8ebea9ed9b8892",
        "md5": "529d3c4ba53d2cca6b4c6f5d53d75cd9",
        "sha256": "ec7093f7a2ccfe3440cd964953fbc717f86bdd84552e448ea29148c12203eb60"
      },
      "downloads": -1,
      "filename": "fabs-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "529d3c4ba53d2cca6b4c6f5d53d75cd9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 199248,
      "upload_time": "2022-07-01T17:57:58",
      "upload_time_iso_8601": "2022-07-01T17:57:58.396338Z",
      "url": "https://files.pythonhosted.org/packages/a7/53/5ec54d08c957d001f27f2074cf8508ff3d1737545971be8ebea9ed9b8892/fabs-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "31d780ae5b616b7035fa8f992d9592565ee487810d8c007ae7c883072a167629",
        "md5": "43f787d979fd7a7d8a50276521bbaa66",
        "sha256": "57663aac467b29f671628ac2cd607b791ba5fda6900afb7edab8c8dfb939d5d5"
      },
      "downloads": -1,
      "filename": "fabs-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "43f787d979fd7a7d8a50276521bbaa66",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 438646,
      "upload_time": "2022-07-01T17:58:00",
      "upload_time_iso_8601": "2022-07-01T17:58:00.156051Z",
      "url": "https://files.pythonhosted.org/packages/31/d7/80ae5b616b7035fa8f992d9592565ee487810d8c007ae7c883072a167629/fabs-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}