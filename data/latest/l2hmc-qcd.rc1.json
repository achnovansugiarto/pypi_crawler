{
  "info": {
    "author": null,
    "author_email": "Sam Foreman <saforem2@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "<div align=\"center\">\n\n![l2hmc-qcd](assets/logo-small.svg)\n\n</div>\n\n<div align=\"center\">\n    <a href=\"https://hits.seeyoufarm.com\"><img alt=\"hits\" src=\"https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fsaforem2%2Fl2hmc-qcd&count_bg=%2300CCFF&title_bg=%23555555&icon=&icon_color=%23111111&title=ðŸ‘‹&edge_flat=false\"></a>    \n    <br>\n    <a href=\"https://github.com/saforem2/l2hmc-qcd/\"><img alt=\"l2hmc-qcd\" src=\"https://img.shields.io/badge/-l2hmc--qcd-252525?style=flat&logo=github&labelColor=gray\"></a> <a href=\"https://www.codefactor.io/repository/github/saforem2/l2hmc-qcd\"><img alt=\"codefactor\" src=\"https://www.codefactor.io/repository/github/saforem2/l2hmc-qcd/badge\"></a>\n\t<br>\n    <a href=\"https://arxiv.org/abs/2112.01582\"><img alt=\"arxiv\" src=\"http://img.shields.io/badge/arXiv-2112.01582-B31B1B.svg\"></a> <a href=\"https://arxiv.org/abs/2105.03418\"><img alt=\"arxiv\" src=\"http://img.shields.io/badge/arXiv-2105.03418-B31B1B.svg\"></a> \n    <br>\n    <a href=\"https://hydra.cc\"><img alt=\"hydra\" src=\"https://img.shields.io/badge/Config-Hydra-89b8cd\"></a> <a href=\"https://pytorch.org/get-started/locally/\"><img alt=\"pyTorch\" src=\"https://img.shields.io/badge/PyTorch-ee4c2c?logo=pytorch&logoColor=white\"></a> <a href=\"https://www.tensorflow.org\"><img alt=\"tensorflow\" src=\"https://img.shields.io/badge/TensorFlow-%23FF6F00.svg?&logo=TensorFlow&logoColor=white\"></a> \n</div>\n\n# Contents\n\n- [Overview](#overview)\n  * [Papers ðŸ“š, Slides ðŸ“Š, etc.](https://github.com/saforem2/l2hmc-qcd/#training--experimenting)\n  * [Background](#background)\n- [Installation](#installation)\n- [Training](#training)\n- [Details](#details)\n  * [L2HMC for LatticeQCD](#l2hmc-for-latticeqcd)\n  * [Organization](#organization)\n    + [Dynamics / Network](#dynamics---network)\n      - [Network Architecture](#network-architecture)\n    + [Lattice](#lattice)\n\n# Overview\n\n## Papers ðŸ“š, Slides ðŸ“Š, etc.\n- ðŸ“˜ [Example Notebook](./src/l2hmc/notebooks/experiment.ipynb) ([alternative link](https://nbviewer.org/github/saforem2/l2hmc-qcd/blob/dev/src/l2hmc/notebooks/experiment.ipynb) if github won't load)\n- [Accelerated Sampling Techniques for Lattice Gauge Theory](https://saforem2.github.io/l2hmc-dwq25/#/) @ [BNL & RBRC: DWQ @ 25](https://indico.bnl.gov/event/13576/) (12/2021)\n- [Training Topological Samplers for Lattice Gauge Theory](https://bit.ly/l2hmc-ect2021) from the [*ML for HEP, on and off the Lattice*](https://indico.ectstar.eu/event/77/) @ ECT$^{*}$ Trento (09/2021) (+ ðŸ“Š [slides](https://www.bit.ly/l2hmc-ect2021))\n- [Deep Learning Hamiltonian Monte Carlo](https://arxiv.org/abs/2105.03418) @ [Deep Learning for Simulation (SimDL) Workshop](https://simdl.github.io/overview/) **ICLR 2021**\n\t- ðŸ“š : [arXiv:2105.03418](https://arxiv.org/abs/2105.03418)  \n\t- ðŸ“Š : [poster](https://www.bit.ly/l2hmc_poster)\n\n\n## Background\nThe L2HMC algorithm aims to improve upon [HMC](https://en.wikipedia.org/wiki/Hamiltonian_Monte_Carlo) by optimizing a carefully chosen loss function which is designed to minimize autocorrelations within the Markov Chain, thereby improving the efficiency of the sampler.\n\nA detailed description of the original L2HMC algorithm can be found in the paper:\n\n[*Generalizing Hamiltonian Monte Carlo with Neural Network*](https://arxiv.org/abs/1711.09268)\n\nwith implementation available at [brain-research/l2hmc/](https://github.com/brain-research/l2hmc) by [Daniel Levy](http://ai.stanford.edu/~danilevy), [Matt D. Hoffman](http://matthewdhoffman.com/) and [Jascha Sohl-Dickstein](sohldickstein.com).\n\nBroadly, given an *analytically* described target distribution, Ï€(x), L2HMC provides a *statistically exact* sampler that:\n\n- Quickly converges to the target distribution (fast ***burn-in***).\n- Quickly produces uncorrelated samples (fast ***mixing***).\n- Is able to efficiently mix between energy levels.\n- Is capable of traversing low-density zones to mix between modes (often difficult for generic HMC).\n\n\n![---](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)\n\n# Installation\n\n- [`l2hmc`](https://pypi.org/project/l2hmc/) on PyPi:\n\n```bash\n$ python3 -m pip install l2hmc\n```\n\n# Training\n\nThis project uses [`hydra`](https://hydra.cc) for configuration management and supports both TensorFlow (+ Horovod) and PyTorch (+ DDP) training frameworks.\n\nThe [`l2hmc/conf/config.yaml`](./src/l2hmc/conf/config.yaml) contains a brief explanation of each of the various parameter options, and values can be overriden either by modifying the `config.yaml` file, or directly through the command line, e.g.\n\n```bash\npython3 main.py framework=tensorflow network.activation_fn=swish\n```\n\nfor more information on how this works I encourage you to read [Hydra's Documentation Page](https://hydra.cc).\n\n\n# Details\n## L2HMC for LatticeQCD\n\n**Goal:** Use L2HMC to **efficiently** generate _gauge configurations_ for calculating observables in lattice QCD.\n\nA detailed description of the (ongoing) work to apply this algorithm to simulations in lattice QCD (specifically, a 2D U(1) lattice gauge theory model) can be found in [`doc/main.pdf`](doc/main.pdf).\n\n<div align=\"center\">\n <img src=\"assets/l2hmc_poster.jpeg\" alt=\"l2hmc-qcd poster\"/>\n</div>\n\n<!--<details open>\n  <summary>  <b>Details</b> </summary>-->\n    \n## Organization\n\n### Dynamics / Network\n\nFor a given target distribution, Ï€(x), the `Dynamics` object ([`src/l2hmc/dynamics/`](src/l2hmc/dynamics)) implements methods for generating proposal configurations (x' ~ Ï€) using the generalized leapfrog update.\n\n\nThis generalized leapfrog update takes as input a buffer of lattice configurations `x` and generates a proposal configuration `x' = Dynamics(x)` by evolving the \n\n<!--The [`GaugeDynamics`](l2hmc-qcd/dynamics/gauge_dynamics.py) is a subclass of `BaseDynamics` containing modifications for the 2D U(1) pure gauge theory.-->\n\n<!--The network is defined in [` l2hmc-qcd/network/functional_net.py`](l2hmc-qcd/network/functional_net.py).-->\n\n\n#### Network Architecture\n\nAn illustration of the `leapfrog layer` updating `(x, v) --> (x', v')` can be seen below.\n\n<div align=\"center\">\n <img src=\"assets/lflayer.png\" alt=\"leapfrog layer\" width=800/>\n</div>\n<!---The network takes as input the position `x`, momentum `v` and and outputs the quantities `sx, tx, qx`, which are then used in the augmented Hamiltonian dynamics to update `x`.--->\n\n<!---Similarly, the network used for updating the momentum variable `v` has an identical architecture, taking as inputs the position `x`, the gradient of the potential, `dUdX`, and the same fictitious time `t`, and outputs the quantities `sv, tv, qv` which are then used to update `v`.--->\n\n<!---**Note:** In the image above, the quantities `x', v''` represent the outputs of a Dense layer followed by a `ReLu` nonlinearity.--->\n\n### Lattice\n\nLattice code can be found in [`lattice/`](./lattice/), specifically:\n\n\nspecifically the `GaugeLattice` object that provides the base structure on which our target distribution exists.\n\nAdditionally, the `GaugeLattice` object implements a variety of methods for calculating physical observables such as the average plaquette, É¸â‚š, and the topological charge Q,\n\n<!--### Training\n\nThe training loop is implemented in [`l2hmc-qcd/utils/training_utils.py `](l2hmc-qcd/utils/training_utils.py).\n\nTo train the sampler on a 2D U(1) gauge model using the parameters specified in [` bin/train_configs.json`](bin/train_configs.json):\n\n```bash\n$ python3 /path/to/l2hmc-qcd/l2hmc-qcd/train.py --json_file=/path/to/l2hmc-qcd/bin/train_configs.json\n```\n\nOr via the [` bin/train.sh `](bin/train.sh) script provided in [` bin/ `](bin/).\n\n## Features\n\n- **Distributed training**\n  (via [`horovod`](https://github.com/horovod/horovod)): If `horovod` is installed, the model can be trained across multiple GPUs (or CPUs) by:\n\n  ```bash\n  #!/bin/bash\n  \n  TRAINER=/path/to/l2hmc-qcd/l2hmc-qcd/train.py\n  JSON_FILE=/path/to/l2hmc-qcd/bin/train_configs.json\n  \n  horovodrun -np ${PROCS} python3 ${TRAINER} --json_file=${JSON_FILE}\n  ```\n-->\n    \n![---](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/rainbow.png)\n\n</details>\n    \n## Contact\n\n***Code author:*** Sam Foreman\n\n***Pull requests and issues should be directed to:*** [saforem2](http://github.com/saforem2)\n\n## Citation\n\nIf you use this code or found this work interesting, please cite our work along with the original paper:\n\n```bibtex\n@misc{foreman2021deep,\n      title={Deep Learning Hamiltonian Monte Carlo}, \n      author={Sam Foreman and Xiao-Yong Jin and James C. Osborn},\n      year={2021},\n      eprint={2105.03418},\n      archivePrefix={arXiv},\n      primaryClass={hep-lat}\n}\n```\n\n```bibtex\n@article{levy2017generalizing,\n  title={Generalizing Hamiltonian Monte Carlo with Neural Networks},\n  author={Levy, Daniel and Hoffman, Matthew D. and Sohl-Dickstein, Jascha},\n  journal={arXiv preprint arXiv:1711.09268},\n  year={2017}\n}\n```\n\n## Acknowledgement\n\n> This research used resources of the Argonne Leadership Computing Facility, which is a DOE Office of Science User Facility supported under contract DE_AC02-06CH11357. This work describes objective technical results and analysis. Any subjective views or opinions that might be expressed in the work do not necessarily represent the views of the U.S. DOE or the United States Government.\n\n<div align=\"center\">\n\n[![Stargazers over time](https://starchart.cc/saforem2/l2hmc-qcd.svg)](https://starchart.cc/saforem2/l2hmc-qcd)\n    \n</div>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "l2hmc-qcd",
    "package_url": "https://pypi.org/project/l2hmc-qcd/",
    "platform": null,
    "project_url": "https://pypi.org/project/l2hmc-qcd/",
    "project_urls": {
      "Documentation": "https://github.com/saforem2/l2hmc-qcd",
      "Issues": "https://github.com/saforem2/l2hmc-qcd/issues",
      "Source": "https://github.com/saforem2/l2hmc-qcd"
    },
    "release_url": "https://pypi.org/project/l2hmc-qcd/0.10.0/",
    "requires_dist": [
      "accelerate",
      "arviz",
      "bokeh",
      "celerite",
      "h5py",
      "horovod[pytorch,tensorflow]",
      "hydra-colorlog",
      "hydra-core",
      "ipython",
      "joblib",
      "matplotx",
      "mpi4py",
      "neovim",
      "nodejs",
      "ptipython",
      "pynvim",
      "pyright",
      "rich",
      "seaborn",
      "tensorflow",
      "torch",
      "tqdm",
      "wandb",
      "xarray"
    ],
    "requires_python": ">=3.8",
    "summary": "Framework for training MCMC samplers for Lattice QCD",
    "version": "0.10.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14688920,
  "releases": {
    "0.10.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "8f7b50497adab3ae8d04c7939cb86799c47fbb2287b0adc52fe752ab4650ecd3",
          "md5": "47e60665a91df414caf4c658a2fa0dae",
          "sha256": "72b0253f92eeee9279f17a98cc7a2cd28d48bed5f960d802f552d10bcac987b3"
        },
        "downloads": -1,
        "filename": "l2hmc_qcd-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47e60665a91df414caf4c658a2fa0dae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 59926754,
        "upload_time": "2022-08-08T13:17:00",
        "upload_time_iso_8601": "2022-08-08T13:17:00.054052Z",
        "url": "https://files.pythonhosted.org/packages/8f/7b/50497adab3ae8d04c7939cb86799c47fbb2287b0adc52fe752ab4650ecd3/l2hmc_qcd-0.10.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "8f7b50497adab3ae8d04c7939cb86799c47fbb2287b0adc52fe752ab4650ecd3",
        "md5": "47e60665a91df414caf4c658a2fa0dae",
        "sha256": "72b0253f92eeee9279f17a98cc7a2cd28d48bed5f960d802f552d10bcac987b3"
      },
      "downloads": -1,
      "filename": "l2hmc_qcd-0.10.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "47e60665a91df414caf4c658a2fa0dae",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 59926754,
      "upload_time": "2022-08-08T13:17:00",
      "upload_time_iso_8601": "2022-08-08T13:17:00.054052Z",
      "url": "https://files.pythonhosted.org/packages/8f/7b/50497adab3ae8d04c7939cb86799c47fbb2287b0adc52fe752ab4650ecd3/l2hmc_qcd-0.10.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}