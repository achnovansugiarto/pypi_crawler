{
  "info": {
    "author": "Furkan Kalkan",
    "author_email": "furkankalkan@mantis.com.tr",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Testing"
    ],
    "description": "\n# rabbitmq_pdfparser\n\nrabbitmq_pdfparser is asynchronous job library that consume RabbitMQ for PDF urls and publish pdf text back to RabbitMQ. It stops when queue is empty.\n\n## Installation\n\nYou can install this library easily with pip.\n`pip install rabbitmq-pdfparser` \n\n## Usage\n\nData must send to source queue should this format: \n\n`{\"id\": \"foo\", \"url\": \"http://example.com/foo/bar.pdf\"}`\n\n\n### As a library\n```py\nimport os\nimport asyncio\nfrom rabbitmq_pdfparser import consume\n\nif __name__ == '__main__':\n    logger = logging.getLogger(\"rabbitmq_pdfparser\")\n    logger.setLevel(os.environ.get('LOG_LEVEL', \"DEBUG\"))\n    handler = logging.StreamHandler()\n    handler.setFormatter(\n        logging.Formatter(\n            os.environ.get('LOG_FORMAT', \"%(asctime)s [%(levelname)s] %(name)s: %(message)s\")\n        )\n    )\n    logger.addHandler(handler)\n\n    config = {\n      \"mq_host\": os.environ.get('MQ_HOST'),\n      \"mq_port\": int(os.environ.get('MQ_PORT')), \n      \"mq_vhost\": os.environ.get('MQ_VHOST'),\n      \"mq_user\": os.environ.get('MQ_USER'),\n      \"mq_pass\": os.environ.get('MQ_PASS'),\n      \"mq_source_queue\": os.environ.get('MQ_SOURCE_QUEUE'),\n      \"mq_target_exchange\": os.environ.get('MQ_TARGET_EXCHANGE'),\n      \"mq_target_routing_key\": os.environ.get('MQ_TARGET_ROUTING_KEY')\n    }\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(\n        consume(\n          loop=loop,\n          consumer_pool_size=10,\n          config=config\n        )\n    )\n\nloop.close()\n```\n\nThis library uses [PyPDF2](https://pythonhosted.org/PyPDF2/),  [aio_pika](https://aio-pika.readthedocs.io/en/latest/) and [aiohttp](https://docs.aiohttp.org/en/stable/) packages.\n\n\n### Standalone\nYou can also call this library as standalone PDF parser job.  Just set required environment variables and run `rabbitmq_pdfparser`. This usecase perfectly fits when you need run it on cronjobs or kubernetes jobs. \n\n**Required environment variables:**\n- MQ_HOST\n- MQ_PORT (optional)\n- MQ_VHOST\n- MQ_USER\n- MQ_PASS\n- MQ_SOURCE_QUEUE (Queue that job consume urls)\n- MQ_TARGET_EXCHANGE (Exchange that job publish texts)\n- MQ_TARGET_ROUTING_KEY (Routing key that job publish texts)\n- MQ_QUEUE_DURABLE (optional, default value: True)\n- CONSUMER_POOL_SIZE (optional, default value: 10)\n- LOG_LEVEL (Logging level. See: [Python logging module docs](https://docs.python.org/3/library/logging.html#logging-levels))\n\n**Example Kubernetes job:** \n You can see it to [kube.yaml](kube.yaml)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rabbitmq-pdfparser",
    "package_url": "https://pypi.org/project/rabbitmq-pdfparser/",
    "platform": "all",
    "project_url": "https://pypi.org/project/rabbitmq-pdfparser/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/rabbitmq-pdfparser/1.0.1/",
    "requires_dist": [
      "aiohttp",
      "aio-pika",
      "PyPDF2"
    ],
    "requires_python": ">3.6.*, <4",
    "summary": "Asynchronous job library that consume RabbitMQ for PDF urls and publish pdf text back.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15470336,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be108ec098d46d8a1fc634723cb6e5daeac2d395a0de2174dfced1cff187122d",
          "md5": "7f9b0abc117c9c95a0d1f0fa42b8d716",
          "sha256": "5262a78903242d4ab224312c7fac2926b72da0bd244cf8da043bf60311d3747f"
        },
        "downloads": -1,
        "filename": "rabbitmq_pdfparser-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f9b0abc117c9c95a0d1f0fa42b8d716",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.6.*, <4",
        "size": 8724,
        "upload_time": "2021-09-02T14:19:47",
        "upload_time_iso_8601": "2021-09-02T14:19:47.473980Z",
        "url": "https://files.pythonhosted.org/packages/be/10/8ec098d46d8a1fc634723cb6e5daeac2d395a0de2174dfced1cff187122d/rabbitmq_pdfparser-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12f30e0728147c26f42b26b1bb7e53668b8c2c65d4941ad09ff44b158ed6ea33",
          "md5": "adf414f55d72fed58d2a90407325eb13",
          "sha256": "b4d3dc79b7608be10cbeac50620a004a8b4845eca386aabaaba2950f5d474497"
        },
        "downloads": -1,
        "filename": "rabbitmq_pdfparser-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "adf414f55d72fed58d2a90407325eb13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">3.6.*, <4",
        "size": 8725,
        "upload_time": "2022-10-20T07:32:16",
        "upload_time_iso_8601": "2022-10-20T07:32:16.180910Z",
        "url": "https://files.pythonhosted.org/packages/12/f3/0e0728147c26f42b26b1bb7e53668b8c2c65d4941ad09ff44b158ed6ea33/rabbitmq_pdfparser-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12f30e0728147c26f42b26b1bb7e53668b8c2c65d4941ad09ff44b158ed6ea33",
        "md5": "adf414f55d72fed58d2a90407325eb13",
        "sha256": "b4d3dc79b7608be10cbeac50620a004a8b4845eca386aabaaba2950f5d474497"
      },
      "downloads": -1,
      "filename": "rabbitmq_pdfparser-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "adf414f55d72fed58d2a90407325eb13",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">3.6.*, <4",
      "size": 8725,
      "upload_time": "2022-10-20T07:32:16",
      "upload_time_iso_8601": "2022-10-20T07:32:16.180910Z",
      "url": "https://files.pythonhosted.org/packages/12/f3/0e0728147c26f42b26b1bb7e53668b8c2c65d4941ad09ff44b158ed6ea33/rabbitmq_pdfparser-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}