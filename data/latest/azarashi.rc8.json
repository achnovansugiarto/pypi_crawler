{
  "info": {
    "author": "nbtk",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Downloads](https://static.pepy.tech/personalized-badge/azarashi?period=total&units=none&left_color=grey&right_color=blue&left_text=Downloads)](https://pepy.tech/project/azarashi)\n# Azarashi\nA QZSS DCR Decoder.\n## Description\nazarashi は準天頂衛星みちびきが送信する災危通報メッセージのデコーダーです。u-blox と Sony Spresense が出力するメッセージ形式に対応しています。災危通報(災害・危機管理通報サービス)とは、防災機関から発表される地震や津波発生時の災害情報などの危機管理情報を準天頂衛星みちびき経由で送信するサービスです。\n## Installation\n```shell\n$ pip install azarashi\n```\n## Preparation\nデバイスに災危通報メッセージを出力させるための設定例です。\n### u-blox M10S < UART > Raspberry Pi 4 + Ubuntu 22.04 + ubxtool (CLI)\nUARTを有効にするため、設定ファイルの末尾に `enable_uart=1` を追記します。\n```shell\n$ sudo vi /boot/firmware/config.txt\n```\n```shell\n[all]\n...\n\n# Enable the UART port\nenable_uart=1\n```\n再起動して、シリアルデバイスが認識されていることを確認します。\n```shell\n$ sudo reboot\n```\n`/dev/ttyS0` の状態を確認しましょう。\n```shell\n$ stat /dev/ttyS0 \n```\n```shell\n  File: /dev/ttyS0\n  Size: 0         \tBlocks: 0          IO Block: 4096   character special file\nDevice: 5h/5d\tInode: 602         Links: 1     Device type: 4,40\nAccess: (0660/crw-rw----)  Uid: (    0/    root)   Gid: (   20/ dialout)\n...\n```\nもし `/dev/ttyS0` が存在しない場合は dmsg コマンドで確認しましょう。ファイル名が異なるか UART ポートを有効化する設定が間違っているか、有効化に失敗していることが考えられます。\n```shell\n$ sudo dmesg | grep serial\n```\n```shell\n[    0.525432] bcm2835-aux-uart fe215040.serial: there is not valid maps for state default\n[    0.527303] fe215040.serial: ttyS0 at MMIO 0xfe215040 (irq = 21, base_baud = 62500000) is a 16550\n```\nシリアルデバイスに sudo コマンドを使わずに読み書きしたいときは、ユーザを `dialout` グループに追加します。\n```shell\n$ sudo usermod -a -G dialout $USER\n$ logout # then re-login to the machine\n```\nデータシートを参照して直接インストラクションを流し込むか、設定ツールをつかって SFRBX メッセージの出力を有効にしてください。設定ツール ubxtool は下記のようにインストールします。\n```shell\n$ sudo apt update\n$ sudo apt install gpsd gpsd-clients\n```\nSFRBX メッセージの出力に関連する設定コマンドの例です。\n```shell\n$ ubxtool -f /dev/ttyS0 -s 9600 -z CFG-MSGOUT-UBX_RXM_SFRBX_UART1,1,1 # sets 'enable'  to ram \n$ ubxtool -f /dev/ttyS0 -s 9600 -z CFG-MSGOUT-UBX_RXM_SFRBX_UART1,0,1 # sets 'disable' to ram \n$ ubxtool -f /dev/ttyS0 -s 9600 -z CFG-MSGOUT-UBX_RXM_SFRBX_UART1,1,2 # sets 'enable'  to bbr (battery-backed ram)\n$ ubxtool -f /dev/ttyS0 -s 9600 -z CFG-MSGOUT-UBX_RXM_SFRBX_UART1,0,2 # sets 'disable' to bbr (battery-backed ram)\n$ ubxtool -f /dev/ttyS0 -s 9600 -g CFG-MSGOUT-UBX_RXM_SFRBX_UART1 | grep -A3 UBX-CFG-VALGET # gets the state\n```\nデバイスに通電してから災危通報メッセージを出力し始めるまでしばらく時間がかかります。\n### u-blox F9P < USB > Windows + u-center (GUI)\n設定ツール [u-center](https://www.u-blox.com/en/product/u-center) をダウンロードし、インストールしてください。\n\nu-center で SFRBX メッセージを出力するように設定してください。下記は SFRBX メッセージを USB に出力するための参考設定手順です。\n```\nOpen u-center ->\n  View -> Configuration View ->\n    CFG (Configuration) -> Revert to default configuration -> Send\n    MSG (Messages) -> Messages -> 02-13 RXM-SFRBX ->\n      Check the \"USB\" box and type 1 in the \"on\" box -> Send\n    NMEA (NMEA Protocol) -> NMEA Version -> Select 4.11 -> Send\n    CFG (Configuration) -> Save current configuration -> Send\n```\nu-center で QZSS の L1S シグナル受信機能を有効にしてください。下記は GPS と QZSS のメッセージをすべて受信するための参考設定手順です。\n```\nOpen u-center ->\n  View -> Generation 9 Configuration View -> GNSS Configuration ->\n    Check All the \"GPS\" and \"QZSS\" boxes ->\n  　　  Check the \"RAM\" and \"Flash\" boxes in the \"Write to layer\" ->\n 　　　　   Send Configuration\n```\n設定は永続化され、他の機器に接続し直しても災危通報メッセージを出力します。デバイスに通電してから災危通報メッセージを出力し始めるまでしばらく時間がかかります。\n### Sony Spresense\n[QZSS 災危通報 (QZQSM) の NMEA センテンスを出力するように設定してください。](https://developer.sony.com/develop/spresense/docs/arduino_tutorials_ja.html#_qzss_災危通報を出力する)\n## CLI\nazarashi コマンドをつかうとプログラミングすることなく災危通報メッセージをデコードできます。\n```shell\n$ echo '$QZQSM,55,C6AF89A820000324000050400548C5E2C000000003DFF8001C00001185443FC*05' | azarashi nmea\n```\nオプションは下記のとおりです。\n```shell\nusage: azarashi [-h] [-f INPUT] [-s] [-u] [-v] {hex,nmea,ublox}\n\nazarashi CLI\n\npositional arguments:\n  {hex,nmea,ublox}      message type\n\noptions:\n  -h, --help            show this help message and exit\n  -f INPUT, --input INPUT\n                        input device (default: stdin)\n  -s, --source          output the source messages (default: False)\n  -u, --unique          supress duplicate messages (default: False)\n  -v, --verbose         verbose mode (default: False)\n```\n### u-blox\nstty コマンドでデバイスファイルを `raw` に設定し azarashi コマンドのメッセージタイプに `ublox` を指定します。デバイスファイルのパスは適宜変更してください。\n```shell\n$ stty -F /dev/ttyS0 raw\n```\nazarashi コマンドに ublox オプションを指定します。\n```shell\n$ azarashi ublox -f /dev/ttyS0\n```\nなお、デバイスファイルの読込権限が足りず sudo コマンドを使って python3 インタプリタを実行するとき azarashi モジュールも sudo で実行される python3 環境にインストールされている必要があることに注意してください。あるいは次のように実行しても動作は同じです。\n```shell\n$ sudo cat /dev/ttyS0 | azarashi ublox\n```\n### Sony Spresense\nazarashi コマンドに nmea オプションを指定します。\n```shell\n$ azarashi nmea -f /dev/ttyUSB0\n```\n### Hexadecimal\nazarashi コマンドのメッセージタイプに `hex` を指定してください。`hex` はヘッダ、チェックサムを含まない16進数文字列のメッセージ形式です。\n```shell\n$ echo C6AF89A820000324000050400548C5E2C000000003DFF8001C00001185443FC | azarashi hex\n```\n## API\n### decode()\n```python\nazarashi.decode(msg, msg_type='nmea')\n```\n- `msg`: メッセージを渡してください。メッセージは str 型または bytes 型です。\n- `msg_type`: デフォルトは `nmea` 、オプションとして `hex` または `ublox` を指定できます。`nmea` または `hex` を指定したときメッセージは str 型、`ublox` を指定したときメッセージは bytes 型です。\n#### Example\nデコードして得られたレポートオブジェクトを `print()` にわたすとヒューマンリーダブルな災害情報を返します。\n```python\n>>> import azarashi\n>>> msg = '$QZQSM,55,C6AF89A820000324000050400548C5E2C000000003DFF8001C00001185443FC*05'\n>>> report = azarashi.decode(msg, 'nmea')\n>>> print(report)\n```\n```\n防災気象情報(緊急地震速報)(発表)(訓練/試験)\n*** これは訓練です ***\n緊急地震速報\n強い揺れに警戒してください。\n\n発表時刻: 3月10日10時0分\n\n震央地名: 日向灘\n地震発生時刻: 10日10時0分\n深さ: 10km\nマグニチュード: 7.2\n震度(下限): 震度6弱\n震度(上限): 〜程度以上\n島根、岡山、広島、山口、香川、愛媛、高知、福岡、佐賀、長崎、熊本、大分、宮崎、鹿児島、中国、四国、九州\n```\nレポートオブジェクトからパラメータを取得するには `get_params()` メソッドを使います。\n```python\n>>> from pprint import pprint\n>>> pprint(report.get_params())\n```\n```python\n{'assumptive': False,\n 'depth_of_hypocenter': '10km',\n 'disaster_category': '緊急地震速報',\n 'disaster_category_en': 'Earthquake Early Warning',\n 'disaster_category_no': 1,\n 'eew_forecast_regions': ['島根', '岡山', '広島', '山口', '香川', '愛媛',\n                          '高知', '福岡', '佐賀', '長崎', '熊本', '大分',\n                          '宮崎', '鹿児島', '中国', '四国', '九州'],\n 'information_type': '発表',\n 'information_type_en': 'Issue',\n 'information_type_no': 0,\n 'magnitude': '7.2',\n 'message': b'\\xc6\\xaf\\x89\\xa8 \\x00\\x03$\\x00\\x00P@\\x05H\\xc5\\xe2\\xc0\\x00\\x00\\x00'\n            b'\\x03\\xdf\\xf8\\x00\\x1c\\x00\\x00\\x11\\x85D?\\xc0',\n 'message_header': '$QZQSM',\n 'message_type': 'DC Report (JMA)',\n 'nmea': '$QZQSM,55,C6AF89A820000324000050400548C5E2C000000003DFF8001C00001185443FC*05',\n 'notifications_on_disaster_prevention': ['強い揺れに警戒してください。'],\n 'occurrence_time_of_eathquake': datetime.datetime(2022, 3, 10, 1, 0),\n 'preamble': 'C',\n 'raw': b'\\xaf\\x89\\xa8 \\x00\\x03$\\x00\\x00P@\\x05H\\xc5\\xe2\\xc0\\x00\\x00\\x00\\x03'\n        b'\\xdf\\xf8\\x00\\x1c\\x00\\x00\\x10',\n 'report_classification': '訓練/試験',\n 'report_classification_en': 'Training/Test',\n 'report_classification_no': 7,\n 'report_time': datetime.datetime(2022, 3, 10, 1, 0),\n 'satellite_id': 55,\n 'satellite_prn': 183,\n 'seismic_epicenter': '日向灘',\n 'seismic_intensity_lower_limit': '震度6弱',\n 'seismic_intensity_upper_limit': '〜程度以上',\n 'sentence': '$QZQSM,55,C6AF89A820000324000050400548C5E2C000000003DFF8001C00001185443FC*05',\n 'timestamp': datetime.datetime(2022, 4, 8, 15, 8, 52, 930551)}\n```\n重複して受信した同一情報のメッセージかどうかは等価演算子で判別できます。\n```python\n>>> msg2 = '$QZQSM,55,9AAF89A820000324000050400548C5E2C000000003DFF8001C0000123FB3EB0*03'\n>>> report2 = azarashi.decode(msg2, 'nmea')\n>>> report == report2\n```\n```\nTrue\n```\n### decode_stream()\n```python\nazarashi.decode_stream(stream, msg_type='nmea', callback=None, callback_args=(), callback_kwargs={}, unique=False)\n```\n- `stream`: I/Oストリームを渡してください。デバイスファイルを `open()` して渡すときは、事前に stty コマンドで `ublox` なら `raw` モード、`nmea` ならデフォルト設定にしてください。pySerial つかうときは stty コマンドによる設定は不要です。\n- `msg_type`: デフォルトは `nmea` 、オプションとして `hex` または `ublox` を指定できます。\n- `callback`: メッセージをデコードしたあとに実行されるコールバック関数です。`None` の場合 `decode_stream()` はメッセージをデコードするたびに結果を返します。コールバック関数が与えられた場合 `decode_stream()` は例外が発生しない限り繰り返しメッセージをデコードし、そのたびにコールバック関数に結果を渡して実行します。下記はコールバック関数のインタフェースです。\n```python\ncallback(report, *callback_args, **callback_kwargs)\n```\n- `calback_args`: コールバック関数に渡される引数です。\n- `callback_kwargs`: コールバック関数に渡されるキーワード引数です。\n- `unique`: 重複したメッセージを無視したいときは `True` を指定してください。\n#### Example\n指定したデバイスファイルを読み込み、デコードしたレポートオブジェクトを `print()` に渡します。\n```python\n>>> import azarashi\n>>> f = open('/dev/ttyS0', mode='r')\n>>> azarashi.decode_stream(f, msg_type='ublox', callback=print)\n```\n### QzssDcrDecoderException\nこの例外クラスは何らかの理由でデコードに失敗したときに送出されます。エラーメッセージを表示すると問題解決の一助となるでしょう。\n### QzssDcrDecoderNotImplementedError\n`NotImplementedError` を継承した例外クラスです。実験的な配信など、デコーダが対応していないメッセージを受け取ったときに送出されます。配信がはじまると騒々しいのでデバッグ以外ではこの例外を握りつぶしたほうがよいかもしれません。\n## Examples\n### I/O Stream\n例外処理を加えた簡単なプログラムの例です。\n```python\nimport azarashi\nimport sys\n\ndef example():\n    with open('/dev/ttyS0', mode='r') as f:\n        while True:\n            try:\n                azarashi.decode_stream(f, msg_type='ublox', callback=print)\n            except azarashi.QzssDcrDecoderException as e:\n                print(f'# [{type(e).__name__}] {e}\\n', file=sys.stderr)\n            except azarashi.QzssDcrDecoderNotImplementedError as e:\n                print(f'# [{type(e).__name__}] {e}\\n', file=sys.stderr)\n            except EOFError as e:\n                print(f'{e}\\n', file=sys.stderr)\n                return 0\n            except Exception as e:\n                print(f'# [{type(e).__name__}] {e}\\n', file=sys.stderr)\n                return 1\n\nexit(example())\n```\n### pySerial\n[pySerial](https://pythonhosted.org/pyserial/) でシリアルポートを `open()` して `decode_stream()` に渡すこともできます。この方法では stty コマンドによる設定は不要です。\n```python\nimport azarashi\nimport sys\nimport serial\nimport pprint\n\ndef handler(report):\n    pprint.pprint(report.get_params())\n\ndef example():\n    with serial.Serial('/dev/ttyS0', 9600) as ser:\n        while True:\n            try:\n                azarashi.decode_stream(ser, 'ublox', handler, unique=True)\n            except azarashi.QzssDcrDecoderException as e:\n                print(f'# [{type(e).__name__}] {e}\\n', file=sys.stderr)\n            except azarashi.QzssDcrDecoderNotImplementedError as e:\n                print(f'# [{type(e).__name__}] {e}\\n', file=sys.stderr)\n            except EOFError as e:\n                print(f'{e}\\n', file=sys.stderr)\n                return 0\n            except Exception as e:\n                print(f'# [{type(e).__name__}] {e}\\n', file=sys.stderr)\n                return 1\n\nexit(example())\n```\n## Network\nGPS アンテナは屋外や窓際に設置する必要があるため、それが実際にデータを処理する装置の近くとは限りません。そこでデータを UDP パケットに載せて再送するスクリプトを書きました。IPv4/IPv6 両方に対応しています。簡単な実装なので、ソースを参考に改造するベースにもよいと思います。\n### Transmitter\n送信側のスクリプトです。デフォルトでは IPv6 リンクローカルマルチキャストアドレスにパケットを送信します。宛先アドレスを指定したい場合は -d オプションを使用してください。\n```shell\n$ python3 -m azarashi.network.transmitter -t ublox -f /dev/ttyS0\n```\nなお、デバイスファイルの読込権限が足りず sudo コマンドを使って python3 インタプリタを実行するとき azarashi モジュールも sudo で実行される python3 環境にインストールされている必要があることに注意してください。あるいは次のように実行しても動作は同じです。\n```shell\n$ sudo cat /dev/ttyS0 | python3 -m azarashi.network.transmitter -t ublox\n```\nオプションの下記のとおりです。\n```shell\nusage: transmitter.py [-h] [-d DST_HOST] [-p DST_PORT] [-t {hex,nmea,ublox}] [-f INPUT] [-u]\n\nazarashi network transmitter\n\noptions:\n  -h, --help            show this help message and exit\n  -d DST_HOST, --dst-host DST_HOST\n                        destination host (default: ff02::1)\n  -p DST_PORT, --dst-port DST_PORT\n                        destination port (default: 2112)\n  -t {hex,nmea,ublox}, --msg-type {hex,nmea,ublox}\n                        message type (default: ublox)\n  -f INPUT, --input INPUT\n                        input device (default: stdin)\n  -u, --unique          supress duplicate messages (default: False)\n```\n### Receiver\n受信側のスクリプトです。\n```shell\n$ python3 -m azarashi.network.receiver\n```\nオプションの下記のとおりです。\n```shell\nusage: receiver.py [-h] [-b BIND_ADDR] [-p BIND_PORT] [-i BIND_IFACE] [-v]\n\nazarashi network receiver\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -b BIND_ADDR, --bind-addr BIND_ADDR\n                        address to bind (default: ::)\n  -p BIND_PORT, --bind-port BIND_PORT\n                        port to bind (default: 2112)\n  -i BIND_IFACE, --bind-iface BIND_IFACE\n                        iface to bind (default: any)\n  -v, --verbose         verbose mode (default: False)\n```\n## Note\nIS-QZSS-DCR-010をサポートしています。\n## Feedback\nイシュー報告、プルリクエスト、コメント等、なんでもよいのでフィードバックお待ちしています。星をもらうと開発が活発になります。\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nbtk/azarashi",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "azarashi",
    "package_url": "https://pypi.org/project/azarashi/",
    "platform": null,
    "project_url": "https://pypi.org/project/azarashi/",
    "project_urls": {
      "Homepage": "https://github.com/nbtk/azarashi"
    },
    "release_url": "https://pypi.org/project/azarashi/0.7.3/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "QZSS DCR Decoder",
    "version": "0.7.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17300870,
  "releases": {
    "0.6.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a5469f138b295a37e3ccd24a5245cfbfc8305c13aca2936b43951c162bcdcc4",
          "md5": "e8d4325f56fd67b76dfb91efd146992e",
          "sha256": "443bbd99861fc04eec786eb9a1d18bdcdf712a224817abab0f9d238ebaf66b07"
        },
        "downloads": -1,
        "filename": "azarashi-0.6.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8d4325f56fd67b76dfb91efd146992e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 79132,
        "upload_time": "2023-02-22T08:57:55",
        "upload_time_iso_8601": "2023-02-22T08:57:55.406180Z",
        "url": "https://files.pythonhosted.org/packages/3a/54/69f138b295a37e3ccd24a5245cfbfc8305c13aca2936b43951c162bcdcc4/azarashi-0.6.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30480e2ac8badf1a9197e8316e3838ef038c8bc8fcd5208e6d251677eef9714f",
          "md5": "c6c9ef0c1109aba149fc2201a05f3511",
          "sha256": "eea3a54c193eb9180102a6d31b2ead9d75d76fcb230c76551545f4ab667150e3"
        },
        "downloads": -1,
        "filename": "azarashi-0.6.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6c9ef0c1109aba149fc2201a05f3511",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 77039,
        "upload_time": "2022-04-08T15:28:17",
        "upload_time_iso_8601": "2022-04-08T15:28:17.522488Z",
        "url": "https://files.pythonhosted.org/packages/30/48/0e2ac8badf1a9197e8316e3838ef038c8bc8fcd5208e6d251677eef9714f/azarashi-0.6.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "767644982f65160137b3b71ac23cd7b5da18b15cfab5253a04ebedcb0b4b1015",
          "md5": "629ba5aa263648361d7071da85485f92",
          "sha256": "462c2c7ab114a28354aa07e60e180a451e220847bb4933b871c9a181695c1f8f"
        },
        "downloads": -1,
        "filename": "azarashi-0.6.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "629ba5aa263648361d7071da85485f92",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 78992,
        "upload_time": "2022-06-22T12:18:24",
        "upload_time_iso_8601": "2022-06-22T12:18:24.599011Z",
        "url": "https://files.pythonhosted.org/packages/76/76/44982f65160137b3b71ac23cd7b5da18b15cfab5253a04ebedcb0b4b1015/azarashi-0.6.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c5bee27249d42250427b397134673c2cf1f8c05753d07d72b3d33e55839ea83",
          "md5": "1b5c05ac547719a1f27ee2e09625c72a",
          "sha256": "80d3f7e0bc82668f4e468ef145671da66016de48f659e1fa16eddf64fb393b9b"
        },
        "downloads": -1,
        "filename": "azarashi-0.6.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b5c05ac547719a1f27ee2e09625c72a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 79148,
        "upload_time": "2022-11-07T13:37:42",
        "upload_time_iso_8601": "2022-11-07T13:37:42.319669Z",
        "url": "https://files.pythonhosted.org/packages/8c/5b/ee27249d42250427b397134673c2cf1f8c05753d07d72b3d33e55839ea83/azarashi-0.6.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcdc1da44c3008a0a281d05f2ea5515bbf37b68d174e9831705dcf3ae206770e",
          "md5": "7f40d165f454f06f32569a17b94dcd79",
          "sha256": "3bdee866a8d09d46182044bfac56425d72fa1d4f153dc2227aa262b1da8e1e94"
        },
        "downloads": -1,
        "filename": "azarashi-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f40d165f454f06f32569a17b94dcd79",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 79894,
        "upload_time": "2023-02-22T09:05:17",
        "upload_time_iso_8601": "2023-02-22T09:05:17.885468Z",
        "url": "https://files.pythonhosted.org/packages/dc/dc/1da44c3008a0a281d05f2ea5515bbf37b68d174e9831705dcf3ae206770e/azarashi-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d11eb630e68b1bcc310468d7a479335a16357df21af23514b8f4038944c204d",
          "md5": "b27d66b2d340d9b473f72058122bf962",
          "sha256": "579b9da76e33736b058e4a87b935e84426707854fc93b01ef486784f26eacd58"
        },
        "downloads": -1,
        "filename": "azarashi-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b27d66b2d340d9b473f72058122bf962",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 85362,
        "upload_time": "2023-03-08T08:58:50",
        "upload_time_iso_8601": "2023-03-08T08:58:50.526129Z",
        "url": "https://files.pythonhosted.org/packages/2d/11/eb630e68b1bcc310468d7a479335a16357df21af23514b8f4038944c204d/azarashi-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4f99f77739c4f95fddb63c0b5d50b2f93ea1ea30d91595945f781c6ce67d099",
          "md5": "b43ab7db98369cc2997fcf7c994950e7",
          "sha256": "61e6373466c036aa46c3d9fb42ba117a909e10c45365119f6872362159dab4c7"
        },
        "downloads": -1,
        "filename": "azarashi-0.7.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b43ab7db98369cc2997fcf7c994950e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 86435,
        "upload_time": "2023-03-15T04:05:46",
        "upload_time_iso_8601": "2023-03-15T04:05:46.890367Z",
        "url": "https://files.pythonhosted.org/packages/e4/f9/9f77739c4f95fddb63c0b5d50b2f93ea1ea30d91595945f781c6ce67d099/azarashi-0.7.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05b3862192c90255d6a6b1c6a356ceffa3d6b8795f6ec2440dd2b3bcc22e540d",
          "md5": "65aa91b91ee07a5d2146444d340822d5",
          "sha256": "559f8371b55912de4ad4b5b22e529c8d4e34ccf8b59055f17caa329d3cb99667"
        },
        "downloads": -1,
        "filename": "azarashi-0.7.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65aa91b91ee07a5d2146444d340822d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 86382,
        "upload_time": "2023-03-15T09:01:56",
        "upload_time_iso_8601": "2023-03-15T09:01:56.873311Z",
        "url": "https://files.pythonhosted.org/packages/05/b3/862192c90255d6a6b1c6a356ceffa3d6b8795f6ec2440dd2b3bcc22e540d/azarashi-0.7.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "05b3862192c90255d6a6b1c6a356ceffa3d6b8795f6ec2440dd2b3bcc22e540d",
        "md5": "65aa91b91ee07a5d2146444d340822d5",
        "sha256": "559f8371b55912de4ad4b5b22e529c8d4e34ccf8b59055f17caa329d3cb99667"
      },
      "downloads": -1,
      "filename": "azarashi-0.7.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "65aa91b91ee07a5d2146444d340822d5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 86382,
      "upload_time": "2023-03-15T09:01:56",
      "upload_time_iso_8601": "2023-03-15T09:01:56.873311Z",
      "url": "https://files.pythonhosted.org/packages/05/b3/862192c90255d6a6b1c6a356ceffa3d6b8795f6ec2440dd2b3bcc22e540d/azarashi-0.7.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}