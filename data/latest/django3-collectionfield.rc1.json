{
  "info": {
    "author": "Pawel Scierski",
    "author_email": "escer@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "django3-collectionfield\n=======================\n\nA reusable Django model field to store collections. Ported for django 3 and python 3.\nYou can find the original here: https://github.com/escer/django-collectionfield\n\nFeatures\n--------\n\n- highly configurable **model field** (changing collection and item types, sorting, choices, item uniqueness and more)\n- **custom lookups** to simplify queries over collection items\n- **form fields** for working with collections\n- collection **item validators**\n- extended ``get_FIELD_display`` method for model fields with choices\n- works with database backends without native support for multi-value columns (like ArrayField for PostgreSQL)\n\nInstallation\n------------\n\n.. code-block:: python\n\n   pip install django3-collectionfield\n\n\nUsage\n-----\n\nModel field\n~~~~~~~~~~~\n\nDefine model with field that stores lists of strings:\n\n.. code-block:: python\n\n   # models.py\n   from django.db import models\n   from collectionfield.models import CollectionField\n\n   class MyModel(models.Model):\n       tags = CollectionField()\n\nPass values to model field:\n\n.. code-block:: python\n\n   my_model = MyModel.objects.create(tags=['test', 'values'])\n   my_model.values\n   ['test', 'values']\n\nMaking queries\n~~~~~~~~~~~~~~\n\nRetrieve model instances with particular value present in the collection:\n\n.. code-block:: python\n\n   MyModel.objects.filter(tags__has='test')\n\nRetrieve model instances with *ALL* values present in the collection (ignoring items' order):\n\n.. code-block:: python\n\n   MyModel.objects.filter(tags__hasall=['test', 'values'])\n\nRetrieve model instances with *ANY* of values present in the collection:\n\n.. code-block:: python\n\n   MyModel.objects.filter(tags__hasany=['test', 'values'])\n\n\nCustomizing collections\n~~~~~~~~~~~~~~~~~~~~~~~\n\nCustom collection and item type:\n\n.. code-block:: python\n\n   class IntegerSet(models.Model):\n       # This field will provide sets of integers \n       # instead of default lists of strings:\n       values = CollectionField(collection_type=set, item_type=int)\n\nSorting and uniqueness:\n\n.. code-block:: python\n\n   class SortedUniqueTextList(models.Model):\n       # Before saving, items will be sorted and duplicates dropped:\n       texts = CollectionField(sort=True, unique_items=True)\n\nChoices and collection size limit:\n\n.. code-block:: python\n\n   class TaggedModel(models.Model):\n       tags = CollectionField(\n           # Both choices and max_items limit are checked during model validation.\n           choices=(\n               ('action', \"Action\"),\n               ('comedy', \"Comedy\"),\n               ('horror', \"Horror\"),\n               # ...\n           ),\n           max_items=2\n       )\n\n``get_FIELD_display`` method can handle multiple choices and provide options to customize the display:\n\n.. code-block:: python\n\n   tagged_model = TaggedModel.objects.create(tags=['action', 'horror'])\n   tagged_model.get_tags_display()\n   \"Action, Horror\"\n\n   def li_mapper(value, label):\n       return \"<li>{0}</li>\".format(label)\n\n   def ul_wrapper(field_display):\n       return \"<ul>{0}</ul>\".format(field_display)\n\n   tagged_model.get_tags_display(delimiter='', mapper=li_mapper, wrapper=ul_wrapper)\n   '<ul><li>Action</li><li>Horror</li></ul>'\n\nDjango built-in validators work with entire field values. ``django3-collectionfield`` provide validation of single collection items:\n\n.. code-block:: python\n\n   from collectionfield.validators import (\n       ItemMinValueValidator, ItemMaxValueValidator\n   )\n\n   class IntegerList(models.Model):\n       values = CollectionField(\n           item_type=int,\n           # item validators check each item separately:\n           validators=[ItemMinValueValidator(1), ItemMaxValueValidator(5)]\n       )\n\nForm fields\n~~~~~~~~~~~\n\n``django-collectionfield`` comes with 2 form fields:\n\n.. code-block:: python\n\n   from collectionfield.forms import CollectionField, CollectionChoiceField\n\n   # ``collectionfield.forms.CollectionField`` converts comma-separated text\n   # into collection of values:\n\n   class MyForm(forms.Form):\n       values = CollectionField()\n\n   my_form = MyForm({'values': \"A, B, C\"})\n   my_form.is_valid()\n   True\n   my_form.cleaned_data['values']\n   ['A', 'B', 'C']\n\n   # ``collectionfield.forms.CollectionChoiceField`` behaves more like \n   # regular MultipleChoiceField:\n\n   class MyChoiceForm(forms.Form):\n      values = CollectionChoiceField(\n          choices=(\n              ('action', \"Action\"),\n              ('comedy', \"Comedy\"),\n              ('horror', \"Horror\"),\n              # ...\n          )\n      )\n\n   my_choice_form = MyChoiceForm({'values': ['action', 'comedy']})\n   my_choice_form.is_valid()\n   True\n   my_choice_form.cleaned_data['values']\n   ['action', 'comedy']\n\nBoth form fields support the same set of parameters as the model field:\n\n.. code-block:: python\n\n   from collectionfield.forms import CollectionField\n\n   class MyForm(forms.Form):\n       values = CollectionField(collection_type=set, item_type=int)\n\n   my_form = MyForm({'values': \"1, 2, 1, 3\"})\n   my_form.is_valid()\n   True\n   my_form.cleaned_data['values']\n   {1, 2, 3}\n\nRepresentation in database\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCollectionField converts its values into string of up to 1024 characters using the following format:\n\n.. code-block:: python\n\n   \"|item1|item2|item3|\"\n\nDefault delimiter ('|') and maximum length can be configured:\n\n.. code-block:: python\n\n   class MyModel(models.Model):\n       values = CollectionField(delimiter=\"$\", max_length=2000)\n\nRequirements\n------------\n\nPython: 3.5\n\nDjango: 3\n\n.. TODO: Changes\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/metalbass/django3-collectionfield",
    "keywords": "django models fields collections",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django3-collectionfield",
    "package_url": "https://pypi.org/project/django3-collectionfield/",
    "platform": "",
    "project_url": "https://pypi.org/project/django3-collectionfield/",
    "project_urls": {
      "Homepage": "https://github.com/metalbass/django3-collectionfield"
    },
    "release_url": "https://pypi.org/project/django3-collectionfield/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Custom Django model field to store multiple values.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6649775,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84de7558eaf31ea01580a3ed5bbc05c8bed14d500d8e48fdd069638f9c30af64",
          "md5": "55501bb8d5447d9b32ab1b87cfc619c6",
          "sha256": "7f833168d9f882f925bad9fed1b3ea9dc9b469064d12f32b40c3106cd76e2ed9"
        },
        "downloads": -1,
        "filename": "django3_collectionfield-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55501bb8d5447d9b32ab1b87cfc619c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18039,
        "upload_time": "2020-02-17T22:34:08",
        "upload_time_iso_8601": "2020-02-17T22:34:08.104412Z",
        "url": "https://files.pythonhosted.org/packages/84/de/7558eaf31ea01580a3ed5bbc05c8bed14d500d8e48fdd069638f9c30af64/django3_collectionfield-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e4bd847cae119dfa6bbe3ebc986e20744ddf7b4989f5611759193c8a061f2e9",
          "md5": "9bd17bb21b0f84a100ebd9724d4a748a",
          "sha256": "b2d6f00d377959501fb32edc8b609b4607e8c1f20748f63d12be4b482bda7a9d"
        },
        "downloads": -1,
        "filename": "django3-collectionfield-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9bd17bb21b0f84a100ebd9724d4a748a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17659,
        "upload_time": "2020-02-17T22:34:10",
        "upload_time_iso_8601": "2020-02-17T22:34:10.783196Z",
        "url": "https://files.pythonhosted.org/packages/0e/4b/d847cae119dfa6bbe3ebc986e20744ddf7b4989f5611759193c8a061f2e9/django3-collectionfield-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84de7558eaf31ea01580a3ed5bbc05c8bed14d500d8e48fdd069638f9c30af64",
        "md5": "55501bb8d5447d9b32ab1b87cfc619c6",
        "sha256": "7f833168d9f882f925bad9fed1b3ea9dc9b469064d12f32b40c3106cd76e2ed9"
      },
      "downloads": -1,
      "filename": "django3_collectionfield-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "55501bb8d5447d9b32ab1b87cfc619c6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18039,
      "upload_time": "2020-02-17T22:34:08",
      "upload_time_iso_8601": "2020-02-17T22:34:08.104412Z",
      "url": "https://files.pythonhosted.org/packages/84/de/7558eaf31ea01580a3ed5bbc05c8bed14d500d8e48fdd069638f9c30af64/django3_collectionfield-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0e4bd847cae119dfa6bbe3ebc986e20744ddf7b4989f5611759193c8a061f2e9",
        "md5": "9bd17bb21b0f84a100ebd9724d4a748a",
        "sha256": "b2d6f00d377959501fb32edc8b609b4607e8c1f20748f63d12be4b482bda7a9d"
      },
      "downloads": -1,
      "filename": "django3-collectionfield-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9bd17bb21b0f84a100ebd9724d4a748a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17659,
      "upload_time": "2020-02-17T22:34:10",
      "upload_time_iso_8601": "2020-02-17T22:34:10.783196Z",
      "url": "https://files.pythonhosted.org/packages/0e/4b/d847cae119dfa6bbe3ebc986e20744ddf7b4989f5611759193c8a061f2e9/django3-collectionfield-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}