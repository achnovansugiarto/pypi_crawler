{
  "info": {
    "author": "Matthias Erll",
    "author_email": "matthias@erll.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "PDF-Config\n==========\n\nA simple, easy-to-script tool for merging multiple PDF files into one\ndocument using a YAML configuration file.\n\nThe program is written in Python, using the\n`PyPDF4 <https://github.com/claird/PyPDF4>`__ library.\n\nPurpose\n-------\n\nThere are many good utilities for splitting and merging PDF files. For\ninstance, if you prefer one with a GUI, `PDF\nArranger <https://github.com/jeromerobert/pdfarranger>`__ is a good\nchoice. However, I had slightly different requirements: \\* Composing\nseveral documents from a similar set of files, but each time with slight\nmodifications. \\* Creating a structure of bookmarks, so that it is\neasier to navigate the larger document. \\* Original PDF features such as\nhyperlinks and the page orientation should remain intact.\n\nFeatures\n--------\n\n-  Simple YAML configuration file structure\n-  Adding PDF metadata\n-  Creating bookmarks, also with nested structures\n-  Checking the version of merged PDF files and setting the minimum in\n   the output PDF\n\nInstallation\n------------\n\nPrerequisites\n~~~~~~~~~~~~~\n\nThis program requires Python 3.6+.\n\nWindows\n^^^^^^^\n\nDownload and install from https://www.python.org/downloads/.\n\nMacOS X\n^^^^^^^\n\nThe best is to use `Homebrew <https://brew.sh/>`__ and install using\n\n.. code:: sh\n\n   brew install python\n\nLinux\n^^^^^\n\nInstall Python using your distribution’s package manager. Usually the\npackage is named ``python3``.\n\nVirtual environment\n~~~~~~~~~~~~~~~~~~~\n\nIt is not strictly required but strongly advised to create a *virtual\nenvironment* for installing Python packages for a specific purpose.\n\nCreate one in any preferred location using\n\n.. code:: sh\n\n   virtualenv -p python3 pdfconfig\n\nThe last argument can also be changed if preferred. Then activate the\nnew environment:\n\n.. code:: sh\n\n   source pdfconfig/bin/activate\n\nInstalling this tool\n~~~~~~~~~~~~~~~~~~~~\n\n.. code:: sh\n\n   pip install pdf-config\n\nUsage\n-----\n\nConfiguration file\n~~~~~~~~~~~~~~~~~~\n\nA configuration file is set up in `YAML\nsyntax <https://en.wikipedia.org/wiki/YAML#Syntax>`__ with the following\ncomponents:\n\n.. code:: yaml\n\n   metadata:  # Optional\n     title: My document title\n     author: ME\n     # Additionally supported:\n     # creator, keywords, producer, subject\n\n     # Hard-coded version to set in the header. Set to 'auto' or leave out\n     # entirely for using the maximum version of all input documents. \n     version: '1.6'\n\n   paths:  # Optional\n     # List of paths to look up any files that do not contain a path\n     # specification. The current directory is checked first, then the following\n     # directories are checked in that order.\n     - ~/my-pdfs  # User home directory can be referred to.\n     - $ADDITIONAL_PDF_PATH  # Environment variables are also supported.\n\n   contents:  # The only required element\n     # Each list entry can contain any of the following:\n     # bookmark: The bookmark title\n     # document: The name (and path) of the input file.\n     # contents: An additional list of contents. Any bookmarks in this sub-structure\n     #   are placed under this bookmark, if present.\n    \n     - bookmark: First  \n       document: first.pdf\n     - bookmark: Second\n       contents:\n         - bookmark: Second doc 1\n           document: sd1.pdf\n         - bookmark: Second doc 2\n           document: sd2.pdf\n     - bookmark: Third\n       document: ~/pdfpath/third.pdf  # Relative and absolute paths are supported.\n       contents:\n         - bookmark: Third doc 1\n           document: $PDF_T1  # Environment variables are also expanded.\n         - bookmark: Third doc 2\n           document: $PDF_T2\n\nThe order of ``metadata``, ``paths``, and ``contents`` above is not\nrelevant. The resulting PDF bookmark structure will be\n\n::\n\n   |-First\n   |\n   |-Second\n   | |-Second doc 1\n   | |-Second doc 2\n   |\n   |-Third\n     |-Third doc 1\n     |-Third doc 2\n\n``Second`` points to the same page as ``Second doc 1``, whereas\n``Third`` and ``Third doc 1`` point to different pages, since ``Third``\ninserts pages on its own.\n\nStart\n~~~~~\n\nWith the configuration stored in ``sample.yaml`` and the PDF files in\nplace, start the merging process by running\n\n.. code:: sh\n\n   pdfconfig sample.yaml\n\nThis will merge the listed PDF files into ``sample.pdf``. For changing\nthe output name, simply append it to the end of the line; e.g. run\n\n.. code:: sh\n\n   pdfconfig sample.yaml path/to/output.pdf\n\nIn Windows, use ``pdfconfig.exe``.\n\nFor more explanation, run\n\n.. code:: sh\n\n   pdfconfig -- --help",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/merll/pdf-config",
    "keywords": "pdf,yaml",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pdf-config",
    "package_url": "https://pypi.org/project/pdf-config/",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/pdf-config/",
    "project_urls": {
      "Homepage": "https://github.com/merll/pdf-config"
    },
    "release_url": "https://pypi.org/project/pdf-config/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Merges PDF files into one using a YAML configuration file.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6670623,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d17086af2db447b438d17de49305dbe18f3bb36093a6893fbbc65ddbba9a5e2c",
          "md5": "9a779020dbb3b0b610488ca94e12164f",
          "sha256": "0bba7f391e1a8eed3d639878bdaabd06d63cb1db6ac6b74633fec27977938f21"
        },
        "downloads": -1,
        "filename": "pdf-config-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9a779020dbb3b0b610488ca94e12164f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7559,
        "upload_time": "2020-02-20T21:04:00",
        "upload_time_iso_8601": "2020-02-20T21:04:00.638789Z",
        "url": "https://files.pythonhosted.org/packages/d1/70/86af2db447b438d17de49305dbe18f3bb36093a6893fbbc65ddbba9a5e2c/pdf-config-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d17086af2db447b438d17de49305dbe18f3bb36093a6893fbbc65ddbba9a5e2c",
        "md5": "9a779020dbb3b0b610488ca94e12164f",
        "sha256": "0bba7f391e1a8eed3d639878bdaabd06d63cb1db6ac6b74633fec27977938f21"
      },
      "downloads": -1,
      "filename": "pdf-config-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9a779020dbb3b0b610488ca94e12164f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7559,
      "upload_time": "2020-02-20T21:04:00",
      "upload_time_iso_8601": "2020-02-20T21:04:00.638789Z",
      "url": "https://files.pythonhosted.org/packages/d1/70/86af2db447b438d17de49305dbe18f3bb36093a6893fbbc65ddbba9a5e2c/pdf-config-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}