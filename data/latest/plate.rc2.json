{
  "info": {
    "author": "Dan",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development",
      "Topic :: Software Development :: Internationalization",
      "Topic :: Software Development :: Localization"
    ],
    "description": "# Plate\n\n<img src=\"https://i.imgur.com/hZcl3uS.png\" width=\"160\" align=\"right\">\n\n> Internationalization Library for Python\n\n**Plate** (**P**ython trans**late**) is an i18n library for Python that gives your application the ability to\nspeak many languages. It is designed to be simple and straightforward to use for **developers** and easy for\n**translators**.\n\n## Features\n\n- Translations based on JSON files\n- Interpolated translations\n- Pluralization\n- Emoji\n\n## Installing\n\n``` shell\n$ pip3 install plate\n```\n\n## Setup\n\nPlate is not going to perform any translation; what it does, instead, is simply providing a way to manage\nalready-translated phrases so that they can be easily accessed from your application code.\n\nThese translated phrases are kept in JSON files stored in a folder inside the application working directory and\norganized by their respective language codes. The JSON keys are in common to all translations and the values\nof each contain the translated phrases.\n\n1. Create a new `locales` folder in your working directory to store translation files.\n2. Put files named after their language codes: `en_US.json`, `it_IT.json`, and so on. All available language codes can\n   be found [here](plate/languages.py).\n3. Start adding new phrases and translations. Here's an example for `en_US.json` and `it_IT.json`\n    ``` json\n    {\n        \"hello\": \"Hello\", \n        \"morning\": \"Good morning, {name}\",\n        \"drink\": \"Let's drink :SAKE: together\",\n        \"apples\": \"No apples | One apple | {count} apples\"\n    }\n    ```\n    ``` json\n    {\n        \"hello\": \"Ciao\", \n        \"morning\": \"Buongiorno, {name}\",\n        \"drink\": \"Beviamo :SAKE: insieme\",\n        \"apples\": \"Nessuna mela | Una mela | {count} mele\"\n    }\n    ```\n \n## Usage\n \n### Instantiation\n\nFirst of all, create a new `Plate` instance. Plate will automatically look for files inside the `locales` folder\nor another custom folder you pass to the *root* parameter. The default and the fallback locale is `en_US`, by default.\n\n``` python\nfrom plate import Plate\n\nplate = Plate()\n```\n\n### Translation\n\nTranslate a phrase by simply passing a key and a language code of the destination locale.\n\n``` python\nplate(\"hello\", \"it_IT\")  # Ciao\n```\n\nYou can also set a new default locale to have all subsequent translations in that language.\n\n``` python\nplate.set_locale(\"it_IT\")\nplate(\"hello\")  # Ciao\n```\n\nOr, get a translator for a given locale instead, so that the default locale will be kept unchanged.\n\n``` python\nitalian = plate.get_translator(\"it_IT\")\nitalian(\"hello\")  # Ciao\n```\n\n**Note**: The examples below will assume `plate.set_locale(\"it_IT\")` for conciseness.\n\n### Interpolation\n\nPass named arguments to interpolate your translations.\n\n``` python\nplate(\"morning\", name=\"Dan\")  # Buongiorno, Dan\n```\n\n### Emoji\n\nEmoji can be added with `:EMOJI_NAME:` inside your sources and are automatically inserted with the actual values.\nAll available emoji can be found [here](plate/emojipedia.py). You can search for, visualize them and grab their\nnames at https://emojipedia.org/.\n\n``` python\nplate(\"drink\")  # Beviamo üç∂ insieme\n```\n\n### Pluralization\n\nPluralization is done by keeping all the plural cases separated by a pipe `|` (by default, customizable) and by using the special interpolation\nkey `{count}`. The following example shows how to translate and pluralize a phrase for count cases of zero, one and more.\n\n``` python\nplate(\"apples\", count=0)  # Nessuna mela\nplate(\"apples\", count=1)  # Una mela\nplate(\"apples\", count=7)  # 7 mele\n```\n\n## License\n\nMIT ¬© 2020 [Dan](https://github.com/delivrance)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/delivrance/plate",
    "keywords": "i18n internationalization l10n localization library python json interpolation pluralization emoji",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Plate",
    "package_url": "https://pypi.org/project/Plate/",
    "platform": null,
    "project_url": "https://pypi.org/project/Plate/",
    "project_urls": {
      "Homepage": "https://github.com/delivrance/plate",
      "Source": "https://github.com/delivrance/plate",
      "Tracker": "https://github.com/delivrance/plate/issues"
    },
    "release_url": "https://pypi.org/project/Plate/1.0.1/",
    "requires_dist": null,
    "requires_python": "~=3.7",
    "summary": "Internationalization Library for Python",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15371109,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c58a8658768297eb6d93fe5bc6bee62958a6521f48fc08fff8bc37becb75e099",
          "md5": "3a1f87b5a4007f547d36f879deb34fc7",
          "sha256": "18f0e769f1a9fa1b94ff93184e92e634f8206c6f1deba3f896805565ea1d84ed"
        },
        "downloads": -1,
        "filename": "Plate-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a1f87b5a4007f547d36f879deb34fc7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.5",
        "size": 36138,
        "upload_time": "2020-03-20T02:42:35",
        "upload_time_iso_8601": "2020-03-20T02:42:35.958415Z",
        "url": "https://files.pythonhosted.org/packages/c5/8a/8658768297eb6d93fe5bc6bee62958a6521f48fc08fff8bc37becb75e099/Plate-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0d913f35546551666a10dcb7bd5e2d7f354c39a9e46d21b38cf085308c9b186",
          "md5": "8cf2ea515931b8c80e98014301ea76e9",
          "sha256": "54bf5252f34de9cd183446528ff19fb86e5f0f62d4a63601360c6f84103452d3"
        },
        "downloads": -1,
        "filename": "Plate-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8cf2ea515931b8c80e98014301ea76e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.5",
        "size": 35589,
        "upload_time": "2020-03-20T02:42:36",
        "upload_time_iso_8601": "2020-03-20T02:42:36.984410Z",
        "url": "https://files.pythonhosted.org/packages/a0/d9/13f35546551666a10dcb7bd5e2d7f354c39a9e46d21b38cf085308c9b186/Plate-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a91e6eb7cde44038a40fed11c270aae099b9e949f75ea39abbcec11418d90027",
          "md5": "f0edaa459d1ca5cc32a38073db4c237c",
          "sha256": "b5ee257cbe11790f5c4b0426f05ea9c734ad14d4ae27187c3e52d1ccce2ad042"
        },
        "downloads": -1,
        "filename": "Plate-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f0edaa459d1ca5cc32a38073db4c237c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 38513,
        "upload_time": "2022-10-11T08:55:18",
        "upload_time_iso_8601": "2022-10-11T08:55:18.558743Z",
        "url": "https://files.pythonhosted.org/packages/a9/1e/6eb7cde44038a40fed11c270aae099b9e949f75ea39abbcec11418d90027/Plate-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc913a9236bded434ce8b223bf4e818ee811999f75afde3e5bd80b82acc00c45",
          "md5": "bcc40d1348cf813177367f050b27bd68",
          "sha256": "f2e3b7960c310379745c7ea1f4fce00b6e6c25041e1838cb81b1310c8af74dc0"
        },
        "downloads": -1,
        "filename": "Plate-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bcc40d1348cf813177367f050b27bd68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 37606,
        "upload_time": "2022-10-11T08:55:20",
        "upload_time_iso_8601": "2022-10-11T08:55:20.301289Z",
        "url": "https://files.pythonhosted.org/packages/fc/91/3a9236bded434ce8b223bf4e818ee811999f75afde3e5bd80b82acc00c45/Plate-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a91e6eb7cde44038a40fed11c270aae099b9e949f75ea39abbcec11418d90027",
        "md5": "f0edaa459d1ca5cc32a38073db4c237c",
        "sha256": "b5ee257cbe11790f5c4b0426f05ea9c734ad14d4ae27187c3e52d1ccce2ad042"
      },
      "downloads": -1,
      "filename": "Plate-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f0edaa459d1ca5cc32a38073db4c237c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.7",
      "size": 38513,
      "upload_time": "2022-10-11T08:55:18",
      "upload_time_iso_8601": "2022-10-11T08:55:18.558743Z",
      "url": "https://files.pythonhosted.org/packages/a9/1e/6eb7cde44038a40fed11c270aae099b9e949f75ea39abbcec11418d90027/Plate-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fc913a9236bded434ce8b223bf4e818ee811999f75afde3e5bd80b82acc00c45",
        "md5": "bcc40d1348cf813177367f050b27bd68",
        "sha256": "f2e3b7960c310379745c7ea1f4fce00b6e6c25041e1838cb81b1310c8af74dc0"
      },
      "downloads": -1,
      "filename": "Plate-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bcc40d1348cf813177367f050b27bd68",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.7",
      "size": 37606,
      "upload_time": "2022-10-11T08:55:20",
      "upload_time_iso_8601": "2022-10-11T08:55:20.301289Z",
      "url": "https://files.pythonhosted.org/packages/fc/91/3a9236bded434ce8b223bf4e818ee811999f75afde3e5bd80b82acc00c45/Plate-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}