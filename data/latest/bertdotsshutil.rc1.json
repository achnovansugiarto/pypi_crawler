{
  "info": {
    "author": "Engelbert Tejeda",
    "author_email": "berttejeda@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "<a name=\"top\"></a>\n<a name=\"overview\"></a>\n\n# Overview\n\nThis module was inspired by the [SFTP for Sublime Text](https://codexns.io/products/sftp_for_sublime) plugin.\n\nAs such, it facilitates interacting with remote hosts via ssh,<br />\nwith the added bonus of providing a means to mirror your local<br />\nworking directory to the specified path on the remote host in order<br />\nto facilitate local-edit/remote-build.\n\nWith this module you can:\n\n- Edit and manipulate your scripts locally and execute them remotely, <br />\n  with file synchronization capabilities\n- Map a local folder to a remote folder\n\n# Prerequisites:\n\n- Python 3.7+\n- paramiko\n- If working with git repos, the module requires that git be installed locally and remotely\n\n# Installation\n\n* From pypi: `pip3 install bertdotssh`\n* From this git repo: `pip3 install git+https://github.com/berttejeda/bert.sshutil.git`<br />\n  Note: To install a specific version of the library from this git repo, <br />\n  suffix the git URL in the above command with @{ tag name }, e.g.: <br />\n  git+https://github.com/berttejeda/bert.sshutil.git@1.0.0\n\n# Usage Examples\n\n## Get process status for a remote host via ssh\n\n```python\n\nfrom bertdotssh.provider import RemoteCLIProvider\n\nsettings = {\n  'host': 'myhost.example.local', \n  'remote_path': '/home/myusername',\n  'port': 22, \n  'ssh_key_file': '~/.ssh/id_rsa', \n  'user': 'myusername'\n}\n\nremote = RemoteCLIProvider(settings)\n\nremote.run('ps')\n```\n\n## Syncronize local files to remote and run a local script against the same host\n\nGiven:\n- Local working directory: /home/myusername/some/path\n- Local script: myscript.sh\n\n```python\n\nfrom bertdotssh.provider import RemoteCLIProvider\n\nsettings = {\n  'host': 'myhost.example.local', \n  'remote_path': '/home/myusername',\n  'port': 22, \n  'ssh_key_file': '~/.ssh/id_rsa', \n  'user': 'myusername',\n  'sync_no_clobber': True,\n  'sync_on': True  \n}\n\nremote = RemoteCLIProvider(settings)\n\nremote.run('myscript.sh')\n```\n\n## Syncronize local git repo to remote and run a local script against the same host\n\nGiven:\n- Local working directory (a git repo) at: /home/myusername/some/git/myrepo\n- Local script at: /home/myusername/some/git/myrepo/myscript.sh\n- Git repo on remote host at: /home/myusername/some/other/path/git/myrepo\n\n```python\n\nfrom bertdotssh.provider import RemoteCLIProvider\n\nsettings = {\n  'host': 'myhost.example.local', \n  'remote_path': '/home/myusername/some/other/path/git/myrepo',\n  'port': 22, \n  'ssh_key_file': '~/.ssh/id_rsa', \n  'user': 'myusername',\n  'sync_no_clobber': True,\n  'sync_on': True  \n}\n\nremote = RemoteCLIProvider(settings)\n\nremote.run('myscript.sh',\n  git_username='my_git_username', \n  git_password='my_git_password')\n```\n\n# File syncrhonization behavior\n\nThe above example scenarios exhibit the following programmatic behavior upon sync:\n\n1. Determine if local working directory is a git repo\n  - If True\n    - Determine the URL for the git remote via command `git config --get remote.origin.url`\n    - Determine the paths for any locally changed files via command `git diff-index HEAD --name-status`\n    - Determine the paths for any untracked files via command `git ls-files --others --exclude-standard`\n    - Produce of a list of files to sync by combining the output of the above two commands\n  - If False\n    - Produce of a list of files to sync that have changed within the last 5 minutes\n1. Determine if remote path exists\n  - If False\n    - If local is a git repo\n      - Perform a git clone of the git repo against the remote path\n      - Else, create the remote directory and synchronize the file list across the remote\n  - If True, determines if remote path is a git repo\n    - Determine set of files that have changed in the remote path\n    - If True & sync_no_clobber == True, synchronize locally changed <br />\n      files to remote path, skipping any files that have also changed on the remote\n    - If True & sync_no_clobber == False, synchronize locally changed <br />\n      files to remote path, overwriting any files that have also changed on the remote\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/berttejeda/bert.sshutil.git",
    "keywords": "ssh,command,python,invoke,remote,invocation",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bertdotsshutil",
    "package_url": "https://pypi.org/project/bertdotsshutil/",
    "platform": "",
    "project_url": "https://pypi.org/project/bertdotsshutil/",
    "project_urls": {
      "Homepage": "https://github.com/berttejeda/bert.sshutil.git"
    },
    "release_url": "https://pypi.org/project/bertdotsshutil/1.1.2/",
    "requires_dist": [
      "paramiko (==2.7.0)",
      "pytest ; extra == 'tests'",
      "pytest-cov ; extra == 'tests'",
      "coveralls ; extra == 'tests'",
      "flake8 ; extra == 'tests'",
      "mypy ; extra == 'tests'"
    ],
    "requires_python": ">=3.7",
    "summary": "Utility library for command invocation via ssh",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11141505,
  "releases": {
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "621bc49b3ca90357959c6335d532cddd13784cdddb5cef6e26ff0d2f25df05aa",
          "md5": "6018992785c9344424903f8712307dc0",
          "sha256": "9fceb3efd482ab32d568a67a6c16842cf34e3a41d02bd8103d4e08a86cea0f62"
        },
        "downloads": -1,
        "filename": "bertdotsshutil-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6018992785c9344424903f8712307dc0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 15675,
        "upload_time": "2021-08-10T17:37:51",
        "upload_time_iso_8601": "2021-08-10T17:37:51.946454Z",
        "url": "https://files.pythonhosted.org/packages/62/1b/c49b3ca90357959c6335d532cddd13784cdddb5cef6e26ff0d2f25df05aa/bertdotsshutil-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34a070d5114d92ecf40348440914f882218961b0a17ded93c52b266823f5128e",
          "md5": "2acd4185c673b8102f861eb5861161ce",
          "sha256": "978a589b41a639a4e411b11e8cb8797ea21d428d6f4561dd046a1531b5dffb8c"
        },
        "downloads": -1,
        "filename": "bertdotsshutil-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2acd4185c673b8102f861eb5861161ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 15503,
        "upload_time": "2021-08-10T17:37:53",
        "upload_time_iso_8601": "2021-08-10T17:37:53.818898Z",
        "url": "https://files.pythonhosted.org/packages/34/a0/70d5114d92ecf40348440914f882218961b0a17ded93c52b266823f5128e/bertdotsshutil-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "621bc49b3ca90357959c6335d532cddd13784cdddb5cef6e26ff0d2f25df05aa",
        "md5": "6018992785c9344424903f8712307dc0",
        "sha256": "9fceb3efd482ab32d568a67a6c16842cf34e3a41d02bd8103d4e08a86cea0f62"
      },
      "downloads": -1,
      "filename": "bertdotsshutil-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6018992785c9344424903f8712307dc0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 15675,
      "upload_time": "2021-08-10T17:37:51",
      "upload_time_iso_8601": "2021-08-10T17:37:51.946454Z",
      "url": "https://files.pythonhosted.org/packages/62/1b/c49b3ca90357959c6335d532cddd13784cdddb5cef6e26ff0d2f25df05aa/bertdotsshutil-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34a070d5114d92ecf40348440914f882218961b0a17ded93c52b266823f5128e",
        "md5": "2acd4185c673b8102f861eb5861161ce",
        "sha256": "978a589b41a639a4e411b11e8cb8797ea21d428d6f4561dd046a1531b5dffb8c"
      },
      "downloads": -1,
      "filename": "bertdotsshutil-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2acd4185c673b8102f861eb5861161ce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 15503,
      "upload_time": "2021-08-10T17:37:53",
      "upload_time_iso_8601": "2021-08-10T17:37:53.818898Z",
      "url": "https://files.pythonhosted.org/packages/34/a0/70d5114d92ecf40348440914f882218961b0a17ded93c52b266823f5128e/bertdotsshutil-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}