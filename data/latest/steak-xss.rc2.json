{
  "info": {
    "author": "LoveSteak",
    "author_email": "hiramscu@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Steak-XSS\n\n![SteakLogo](logo.jpg)\n\nSteak ——An advanced XSS exploitation tool\n\nSteak is an advanced XSS exploitation tool built for skilled professional penetration testers and red teams. With Steak, you can customize and automate every step of exploitation by building your own \"project script\" to perform several advanced attacks. \n\nWant to create a fake Flash update but don't want victims installed your trojan still see the pop-up window? A piece of cake! We can receive external events from Cobalt Strike or Metasploit to stop the attack at the right time!\n\nDoing pentest in a highly adversarial environment and don't want to be caught by analysts? Elementary!  We can detect users using proxy or incognito window and replace original malicious javascript into a normal harmless javascript file!\n\nMore over, our Steak-XSS framework is easy-to-extend to hack in the way you like. The only limit is your imagination.\n\nHaving an 0day exploit on a router and would like to triger it via CSRF? Pretty easy! Just build a module and fire to the victim! \n\nUsing your internal-use secret RAT other than MSF or CS but still want Steak to intereact with it? Not a problem! Implement an event handler to receive information from the RAT or any other tools you like!\n\n**This is a new project and it might not be perfect. We welcome your issues or pull requests to imporve Steak together.**\n\n# Install\n\nYou can use pip to install Steak easily. Using command below:\n\n```\npip install steak-xss\n```\n\nOr you can clone our code and run:\n\n```\npython setup.py install\n```\n\nIf you don't wanna install Steak into your Python `site-packages` folder, you can just download the `steak` folder and put your project file as below:\n\n```\n- run.py\n- Project.py\n- Steak\n\t- core\n\t...\n```\n\n# How to use\n\n## Basic Usage\n\nSteak needs at least two files to run. There are demo files in `examples` folder. You can read them and you will know how to use Steak easily.\n\n`run.py` contains Handler and Project loading code. You can load more than one project when you are starting a single Steak server. You also needs to load Handers you are about to use in this file.\n\n``DemoProject.py`` contains your own attack ways of a project. We identify clients from JavaScript url it requests. Different JavaScript url will lead to different Projects. In this file, you must inherit class ``Project`` to implement your own project. You just need to overwrite `attack_client` function to do your own job. In this function, you can load modules in Steak or wrriten by yourself. Then send payload to client to get result.\n\n## Moudles\n\n### Alert\n\nAlert Moudle can run `alert` command in client browser.\n\nDemo Usage:\n\n```python\nalert=self.load_module('Alert',content='Hello World')\n```\n\n> Parameters:\n>\n> Content: Alert Content\n\n### Consolelog\n\nConsolelog Moudle can run console.log command in client browser.\n\nDemo Usage:\n\n```python\nalert=self.load_module('Consolelog',content='Hello World')\n```\n\n> Parameters:\n>\n> Content: Consolelog Content\n\n### How to write your own modules?\n\nSteak will read modules in `steak/modules` folder. Each module has its own subfolder whose name is module name.This module name must be same with class name and python file name in this subfolder.\n\nYou must inherit `Modules` class when you are implementing your own module.\n\nYou need to return a `Payload` object in your own ``__init__`` function. You can also use  ``__init__`` function implemented by us. This function will use `command.js` in the same subfolder. It will replace Steak tag with information users input. For example, in Alert Module , our `command.js` is below:\n\n```\nalert('<steak>content</steak>');\nsendDataBack({'status':'done'},'<steak>taskid</steak>')\n```\n\nSpecially, you must use `sendDataBack` to send your running result in javascript. `sendDataBack` receives `taskid` as another parameter. This will be filled automatically when Steak send payload to client. You just need to use `<steak>taskid</steak>` to symbol it.\n\n## Handlers\n\nHandlers can be used to receive outside information such as online information from MSF.\n\nWe implemented two Handlers inside Steak.\n\n### MSF Handler\n\nYou can load it in `run.py` using code below:\n\n```python\nsteak.add_handler(\"MetasploitHandler\",password=\"demo\",port=55552,ssl=False)\n```\n\nThis handler is a wrap of `pymetasploit3`, you need to start your `msfrpc` service before using.\n\nWhen a new client is online in MSF, this handler will call `on_metasploithandler` of every project.\n\n### CS Handler\n\nYou can load it in `run.py` using code below:\n\n```python\nsteak.add_handler(\"CobaltStrikeHandler\",listenonpath='/cobaltstrikecallback',password='demo')\n```\n\nThis handler needs you to run a `cna` script in your CobalStrike teamserver. You can use `agscript` to run it.\n\nWe provided a `cobaltstrike.cna` file in `handler` folder. You need to modify callback path and password in it. These settings must be the same with setting you add this handler in Steak.\n\nWhen a new client is online in CS, `cna` script will request listenonpath opened in Steak server and this Handler will call `on_cobaltstrikehandler` of every project.\n\n### How to write your own handlers?\n\nSteak will read handlers in `steak/handlers` folder. Each handler has its own py file whose name is handler name. \n\nYou must inherit `Handlers` class when you are implementing your own handler.\n\nYou just need to overwrite `generate_event` function to implement your own communication functions in standard Python code. Steak will start a new thread to call this function. Importantly, this function should return only when an external event happened. If you have one or more parameters that you need to return to callback function, you can just use it as the return value of `generate_event` function. When you return, Steak will call `on_{your handler name}` function in every project if exists automatically.\n\nMoreover, you can also use Steak server as the source of your message. You need to use code below to register a path in Steak server. When there is a request in this path, Steak server will call callback function you give and pass you a Request object in Flask.\n\n```python\nself.steak.server.register_path(self.lisenonpath,self.callback_registedpath)\n```\n\n# To Do\n1. Add more moudles\n2. Optimize javascript script in Steak\n3. Add more documents\n4. Add graphical interface",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LoveSteak/Steak",
    "keywords": "steak,xss,steak-xss",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "steak-xss",
    "package_url": "https://pypi.org/project/steak-xss/",
    "platform": "any",
    "project_url": "https://pypi.org/project/steak-xss/",
    "project_urls": {
      "Homepage": "https://github.com/LoveSteak/Steak"
    },
    "release_url": "https://pypi.org/project/steak-xss/0.2.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An advanced XSS exploitation tool",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9684165,
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86e8709952ee04d8a14dcad907cd7005753f9f42c704c86df19828c8e18366c3",
          "md5": "89694d8591d99ce7d2e4d7155ec683c2",
          "sha256": "687909bc631c34e834c6c52e9dbcbff3cb89d5b8738164352b79cdaed0ecfb55"
        },
        "downloads": -1,
        "filename": "steak-xss-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "89694d8591d99ce7d2e4d7155ec683c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60005,
        "upload_time": "2021-03-06T13:28:37",
        "upload_time_iso_8601": "2021-03-06T13:28:37.570787Z",
        "url": "https://files.pythonhosted.org/packages/86/e8/709952ee04d8a14dcad907cd7005753f9f42c704c86df19828c8e18366c3/steak-xss-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f4f14ab47ec48634d7dac3757961480614b1635e6621f72859bd8b2d7e4d79b",
          "md5": "a8bba30d808cbca4af5f6573207ff0ae",
          "sha256": "0a244fbae276d765f8d2755d1f59f8b0fbf9ee539fa3015995f795cf0a2de1ce"
        },
        "downloads": -1,
        "filename": "steak-xss-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a8bba30d808cbca4af5f6573207ff0ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63054,
        "upload_time": "2021-03-06T13:48:55",
        "upload_time_iso_8601": "2021-03-06T13:48:55.527799Z",
        "url": "https://files.pythonhosted.org/packages/1f/4f/14ab47ec48634d7dac3757961480614b1635e6621f72859bd8b2d7e4d79b/steak-xss-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1f4f14ab47ec48634d7dac3757961480614b1635e6621f72859bd8b2d7e4d79b",
        "md5": "a8bba30d808cbca4af5f6573207ff0ae",
        "sha256": "0a244fbae276d765f8d2755d1f59f8b0fbf9ee539fa3015995f795cf0a2de1ce"
      },
      "downloads": -1,
      "filename": "steak-xss-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a8bba30d808cbca4af5f6573207ff0ae",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 63054,
      "upload_time": "2021-03-06T13:48:55",
      "upload_time_iso_8601": "2021-03-06T13:48:55.527799Z",
      "url": "https://files.pythonhosted.org/packages/1f/4f/14ab47ec48634d7dac3757961480614b1635e6621f72859bd8b2d7e4d79b/steak-xss-0.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}