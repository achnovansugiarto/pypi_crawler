{
  "info": {
    "author": "Samuel Prevost",
    "author_email": "samuel.prevost@pm.me",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Torch Pconv\n\n[![PyPI version](https://badge.fury.io/py/torch-pconv.svg)](https://badge.fury.io/py/torch-pconv)\n\nFaster and more memory efficient implementation of the Partial Convolution 2D layer in PyTorch equivalent to the\nstandard Nvidia implementation.\n\nThis implementation has numerous advantages:\n\n1. It is **strictly equivalent** in computation\n   to [the reference implementation by Nvidia](https://github.com/NVIDIA/partialconv/blob/610d373f35257887d45adae84c86d0ce7ad808ec/models/partialconv2d.py)\n   . I made unit tests to assess that all throughout development.\n2. It's commented and more readable\n3. It's faster and more memory efficient, which means you can use more layers on smaller GPUs. It's a good thing\n   considering today's GPU prices.\n4. It's a PyPI-published library. You can `pip` install it instead of copy/pasting source code, and get the benefit of (\n   free) bugfixes when someone notice a bug in the implementation.\n\n![Total memory cost (in bytes)](doc/2021-08-13_perfs.png?raw=true)\n\n## Getting started\n\n```sh\npip3 install torch_pconv\n```\n\n## Usage\n\n```python3\nimport torch\nfrom torch_pconv import PConv2d\n\nimages = torch.rand(32, 3, 256, 256)\nmasks = (torch.rand(32, 256, 256) > 0.5).to(torch.float32)\n\npconv = PConv2d(\n    in_channels=3,\n    out_channels=64,\n    kernel_size=7,\n    stride=1,\n    padding=2,\n    dilation=2,\n    bias=True\n)\n\noutput, shrunk_masks = pconv(images, masks)\n```\n\n## Performance improvement\n\n### Test\n\nYou can\nfind [the reference implementation by Nvidia here](https://github.com/NVIDIA/partialconv/blob/610d373f35257887d45adae84c86d0ce7ad808ec/models/partialconv2d.py)\n.\n\nI tested their implementation vs mine one the following configuration:\n<table>\n<tr><th>Parameter</th><th>Value</th></tr>\n<tr><td>in_channels</td><td>64</td></tr>\n<tr><td>out_channels</td><td>128</td></tr>\n<tr><td>kernel_size</td><td>9</td></tr>\n<tr><td>stride</td><td>1</td></tr>\n<tr><td>padding</td><td>3</td></tr>\n<tr><td>bias</td><td>True</td></tr>\n<tr><td>input height/width</td><td>256</td></tr>\n</table>\n\nThe goal here was to produce the most computationally expensive partial convolution operator so that the performance\ndifference is displayed better.\n\nI compute both the forward and the backward pass, in case one consumes more memory than the other.\n\n### Results\n\n![Total memory cost (in bytes)](doc/2021-08-13_perfs.png?raw=true)\n<table>\n<tr><th></th><th><pre>torch_pconv</pre></th><th>Nvidia® (Guilin)</th></tr>\n<tr><td>Forward only</td><td><b>813 466 624</b></td><td>4 228 120 576</td></tr>\n<tr><td>Backward only</td><td>1 588 201 480</td><td>1 588 201 480</td></tr>\n<tr><td>Forward + Backward</td><td>2 405 797 640</td><td>6 084 757 512</td></tr>\n</table>\n\n## Development\n\nTo install the latest version from Github, run:\n\n```\ngit clone git@github.com:DesignStripe/torch_pconv.git torch_pconv\ncd torch_pconv\npip3 install -U .\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DesignStripe/torch_pconv",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torch-pconv",
    "package_url": "https://pypi.org/project/torch-pconv/",
    "platform": "",
    "project_url": "https://pypi.org/project/torch-pconv/",
    "project_urls": {
      "Homepage": "https://github.com/DesignStripe/torch_pconv"
    },
    "release_url": "https://pypi.org/project/torch-pconv/0.1.1/",
    "requires_dist": [
      "torch",
      "tensor-type",
      "pshape"
    ],
    "requires_python": "",
    "summary": "Faster and more memory efficient implementation of the Partial Convolution 2D layer in PyTorch equivalent to the standard NVidia implem.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11189237,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1347106ceba8be52f0b749a8adc0d30d006f4669e9ef4e5a4eed75fad8a7fed",
          "md5": "dde7c740abd8f84ae862bbf18c3381b0",
          "sha256": "01adcaca3e432c09a4702c8212f72eebca0a9fed4c5d42000cd77dd46a67e678"
        },
        "downloads": -1,
        "filename": "torch_pconv-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dde7c740abd8f84ae862bbf18c3381b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6993,
        "upload_time": "2021-08-13T18:17:20",
        "upload_time_iso_8601": "2021-08-13T18:17:20.268000Z",
        "url": "https://files.pythonhosted.org/packages/a1/34/7106ceba8be52f0b749a8adc0d30d006f4669e9ef4e5a4eed75fad8a7fed/torch_pconv-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27fcd641662e28f12ed27aa08d2e900f0585210fa24538cbfbf2013ecb733203",
          "md5": "0b18ebd3843fde30a05146b5fbf52e5a",
          "sha256": "d7dfb61a26ef5f2ae5bf07b349fd3c53252443ab9e83df76366a824aa378a9c9"
        },
        "downloads": -1,
        "filename": "torch_pconv-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0b18ebd3843fde30a05146b5fbf52e5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6646,
        "upload_time": "2021-08-13T18:17:22",
        "upload_time_iso_8601": "2021-08-13T18:17:22.007955Z",
        "url": "https://files.pythonhosted.org/packages/27/fc/d641662e28f12ed27aa08d2e900f0585210fa24538cbfbf2013ecb733203/torch_pconv-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "459c4aa35963c54ab9021e18f39e4dc22f9286b532ab620a0dcbeddd1b59e221",
          "md5": "e08a5e20b3efb1aedc9db27c3eb967d2",
          "sha256": "c846d07e4ea34046f95ec50aeca505317118f7eb0f5eb3f13a362a94bbe0a596"
        },
        "downloads": -1,
        "filename": "torch_pconv-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e08a5e20b3efb1aedc9db27c3eb967d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6995,
        "upload_time": "2021-08-16T10:31:43",
        "upload_time_iso_8601": "2021-08-16T10:31:43.231595Z",
        "url": "https://files.pythonhosted.org/packages/45/9c/4aa35963c54ab9021e18f39e4dc22f9286b532ab620a0dcbeddd1b59e221/torch_pconv-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86c2fe2dfa3201d96ff378626b33c12c9572cf9d37602cce78238bd757fb1b41",
          "md5": "3e7f7746cf2c67e47e248701de598377",
          "sha256": "34ad9badad03bacceb02b8f0b4f825eedcead8f6cc17058716cd81deacdb5819"
        },
        "downloads": -1,
        "filename": "torch_pconv-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3e7f7746cf2c67e47e248701de598377",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6961,
        "upload_time": "2021-08-16T10:31:44",
        "upload_time_iso_8601": "2021-08-16T10:31:44.367386Z",
        "url": "https://files.pythonhosted.org/packages/86/c2/fe2dfa3201d96ff378626b33c12c9572cf9d37602cce78238bd757fb1b41/torch_pconv-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "459c4aa35963c54ab9021e18f39e4dc22f9286b532ab620a0dcbeddd1b59e221",
        "md5": "e08a5e20b3efb1aedc9db27c3eb967d2",
        "sha256": "c846d07e4ea34046f95ec50aeca505317118f7eb0f5eb3f13a362a94bbe0a596"
      },
      "downloads": -1,
      "filename": "torch_pconv-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e08a5e20b3efb1aedc9db27c3eb967d2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6995,
      "upload_time": "2021-08-16T10:31:43",
      "upload_time_iso_8601": "2021-08-16T10:31:43.231595Z",
      "url": "https://files.pythonhosted.org/packages/45/9c/4aa35963c54ab9021e18f39e4dc22f9286b532ab620a0dcbeddd1b59e221/torch_pconv-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86c2fe2dfa3201d96ff378626b33c12c9572cf9d37602cce78238bd757fb1b41",
        "md5": "3e7f7746cf2c67e47e248701de598377",
        "sha256": "34ad9badad03bacceb02b8f0b4f825eedcead8f6cc17058716cd81deacdb5819"
      },
      "downloads": -1,
      "filename": "torch_pconv-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3e7f7746cf2c67e47e248701de598377",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6961,
      "upload_time": "2021-08-16T10:31:44",
      "upload_time_iso_8601": "2021-08-16T10:31:44.367386Z",
      "url": "https://files.pythonhosted.org/packages/86/c2/fe2dfa3201d96ff378626b33c12c9572cf9d37602cce78238bd757fb1b41/torch_pconv-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}