{
  "info": {
    "author": "Jonatan Antoni",
    "author_email": "jonatan@familie-antoni.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "|build-badge| |test-badge| |cov-badge| |python-badge| |wheel-badge| |pypi-badge| |license-badge|\n\nMatrix Runner for Python\n========================\n\nAllows easy top level command line interface generation for matrix configurations.\n\nInstall\n-------\n\nInstallation using pip::\n\n    pip install python-matrix-runner\n\nThe appearance of matrix runner can be configured by placing a copy of the\n``default.conf`` into the users Python site base directory (user global\nconfiguration) or next to a build script (local configuration). Figuring out\nthe right locations is assisted by the following command::\n\n    $ python -m matrix_runner config -h\n\n\nPreferences\n~~~~~~~~~~~\n\nThe following preferences can be configured:\n\nglobal\n  Global settings.\n\n  loglevel\n    The default log level, one of:\n    DEBUG, INFO, WARNING, ERROR, CRITICAL\n\ncolors\n  Settings for colorized log output.\n\n  Colors can be one of: black, red, green, yellow, blue, purple, cyan, white\n\n  Style prefix can be one of: bold\\_, thin\\_\n\n  Background color prefix: bg\\_\n\n  DEBUG\n    Debug level log output.\n  INFO\n    Info level log output.\n  WARNING\n    Warning level log output.\n  ERROR\n    Error level log output.\n  CRITICAL\n    Critical level log output.\n  config\n    Matrix configuration column.\n  action\n    Action column.\n  summary_config\n    Summary table matrix configuration column.\n  summary_success\n    Summary table success cell.\n  summary_unstable\n    Summary table unstable cell, i.e. failing test cases.\n  summary_skip\n    Summary table skip cell.\n  summary_fail\n    Summary table fail cell.\n  summary_error\n    Summary table error cell.\n\nExample Usage\n-------------\n\nWriting the following to ``build.py``::\n\n    from enum import Enum\n    from matrix_runner import main, matrix_axis, matrix_action, matrix_command, matrix_filter\n\n    @matrix_axis(\"alpha\", \"a\", \"A configuration axis\")\n    class MyAlphaAxisValue(Enum):\n        Value1 = ('value1', 'v1')\n        Value2 = ('value2', 'v2')\n        Value3 = ('value3', 'v3')\n\n    @matrix_action\n    def dump(config):\n        \"\"\"Dump configuration to console\"\"\"\n        yield dump_config(config)\n\n    @matrix_command()\n    def dump_config(config):\n        return [\"sh\", \"-c\", f\"echo '{config}'\"]\n\n    if __name__ == \"__main__\":\n        main()\n\nCan be executed as::\n\n    $ ./build.py --help\n    usage: build.py [-h] [--silent | --verbose | --debug] [--pairwise] [--slice <HERE>/<TOTAL>]\n                    [--alpha ALPHA] action [action ...]\n\n    positional arguments:\n      action                Action(s) to run: dump\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --silent              Silent mode, only errors are shown.\n      --verbose             Verbose log output.\n      --debug               Debug log output.\n      --pairwise, -2        Reduce number of combinations using pairwise algorithm.\n      --slice <HERE>/<TOTAL>\n                            Cut set of combinations into <TOTAL> number of slices and run ony <HERE>th one.\n      --alpha ALPHA, -a ALPHA\n                            A configuration axis: value1|v1, value2|v2, value3|v3\n\n    $ ./build.py -a v[23] dump\n    [value2](dump:dump_config) /usr/bin/sh -c echo 'Config(alpha=<MyAlphaAxisValue.Value2: ('value2', 'v2')>)'\n    [value2](dump:dump_config) (Hello, World): Config(alpha=<MyAlphaAxisValue.Value2: (value2, v2)>)\n    [value2](dump:dump_config) /usr/bin/sh succeeded with exit code 0\n    [value3](dump:dump_config) /usr/bin/sh -c echo 'Config(alpha=<MyAlphaAxisValue.Value3: ('value3', 'v3')>)'\n    [value3](dump:dump_config) Config(alpha=<MyAlphaAxisValue.Value3: (value3, v3)>)\n    [value3](dump:dump_config) /usr/bin/sh succeeded with exit code 0\n\n    Matrix Summary\n    ==============\n\n    alpha    dump\n    -------  -------\n    value2   success\n    value3   success\n\nMatrix Runner automatically generates a comprehensive `command line`_ help.\nGiving at least one action the commands for all permutations of configured\nmatrix axes are automatically executed one by one. In this example the\nexecution is limited by a regex pattern ``v[23]``.\n\n\nDetailed Usage\n--------------\n\nThe Matrix Runner constructs what gets executed by defining these elements:\n\n- Axis_\n- Action_\n- Command_\n- Filter_\n\nAxis\n~~~~\n\nAxes build up the actual configuration matrix to be rolled out. Each degree\nof freedom in ones set of configuration can be mapped to a single axis by\nannotating an ``Enum`` with ``@matrix_axis``::\n\n    @matrix_axis(\"alpha\", abbrev=\"a\", desc=\"A configuration axis\")\n    class MyAlphaAxisValue(Enum):\n        Value1 = ('value1', 'v1')\n        Value2 = ('value2', 'v2')\n        Value3 = ('value3', 'v3')\n\nThis adds an axis named `alpha` to the current builds configuration matrix.\nThe optional argument ``abbrev`` can be used to specify a shortcut to be\nused from the command line, i.e. ``--alpha`` or ``-a``. And the optional\nargument ``desc`` enriches the argument parser with a help string.\n\nThe values in such an Enum can either be plain strings or tuples of strings.\nTuples can be used to provide multiple string representations for a single\nvalue. In the example one can provide ``Value2`` on the command line as\n``--alpha value2`` or just as ``-a v2``. Alternatively axis values can be\nselected by providing a `fnmatch.fnmatch`_ pattern, e.g. ``-a v[23]``. Be aware\nthat such a pattern selects all values which have at least one matching string\nrepresentation in its tuple.\n\nThe overall configuration matrix is calculated by permuting all values from all\nspecified axes. In a typical scenario it easily happens that some combinations\nare known to be inappropriate. These can be filtered by specifying Filter_'s.\n\n.. note:: Don't use the keywords ``help`` or ``pairwise`` as axis names. Same\n          applies to abbreviations ``h`` and ``2`` for those keywords. These\n          are already used for static `Command Line`_ arguments.\n\nAction\n~~~~~~\n\nActions are used to capture different workflow steps, such as `compile` and\n`run` for unit tests. A step is simply defined by decorating a function\nwith ``@matrix_action``::\n\n    @matrix_action\n    def dump(config: Config <, results: List[Result]>):\n        \"\"\"Dump configuration to console\"\"\"\n        pre_process()\n        yield dump_config(config, 'Hello', 'World')\n        post_process(<results>)\n\nThe function itself needs to return a ``Generator`` generating a list of\nCommand_'s. The function is called once in preparation for each matrix\nconfiguration.\n\nThe ``config`` argument gives access to the selected _Config permutation. It\ncan be used to generate the commands depending on the actual configuration.\n\nThe optional ``results`` argument can be used to gain access to the list of\nCommand_ results gathered so far, e.g. for adding post-processing.\n\nThe function needs to ``yield`` Command_'s, i.e. ``dump_config`` needs to be\nan annotated command function. Pre and post processing code can be added\naround.\n\nCommand\n~~~~~~~\n\nCommands are actual command lines to be executed while forwarding their\nstandard output and standard error streams. A command is defined by decorating\na function with ``@matrix_command``::\n\n    @matrix_command()\n    def dump_config(*args, **kwargs):\n        return [\"sh\", \"-c\", f\"echo '{args}: {kwargs}'\"]\n\nThe decorator takes optional keyword arguments to fine control how the returned\ncommand line should be executed through `subprocess.Popen`_:\n\n- ``exit_code: Union[int, Iterable[int], Callable[[int], bool]] = 0``\n    Specifies exit codes denoting successful execution of the command, this can\n    either be\n\n    - a specific integer exit code, by default ``0``, or\n    - a sequence of integer exit codes, e.g. a range, or\n    - a function that returns True for successful exit codes.\n\n- ``needs_shell: bool = False``\n    Set this to ``True`` if the command requires a shell environment.\n\n- ``encoding: str = 'utf-8'``\n    Set this to another character encoding if the command's output does not\n    use an UTF-8 compatible character set.\n\n- ``exclusive: bool = False``\n    Some command are known to be prone to concurrency issues. Setting this to\n    ``True`` will block concurrent invocations of the command, e.g. when using\n    Matrix Runner concurrently on the same machine.\n\n- ``timeout: Optional[float] = None``\n    Commands prone to hick-ups (i.e. getting stuck) can be automatically killed\n    when a specified time span has elapsed [in seconds].\n\n- ``retry: Optional[int] = 1``\n    Commands prone to occasional failures can be automatically repeated.\n    The result will reflect the latest return code. The output from all\n    tries is captured.\n\n- ``rest_period: Optional[float] = None``\n    Some commands are known to be prone to concurrency issues. Setting this to\n    a value larger than ``0`` adds a rest period (i.e. time.sleep_) before the\n    command actually gets executed.\n\n- ``test_report: Optional[ReportFilter] = None``\n    By default the result of a command only depends on the ``exit_code``. The\n    commands output is captured but not processed by Matrix Runner. By\n    specifying a \"recipe\" how to evaluate results the output can be post\n    processed into a detailed Report_.\n\nThe actual command function can take arbitrary arguments which can be provided\nduring the enclosing Action_. All arguments bound to a Command instance can\nbe inspected by reading the according object attribute, e.g.::\n\n    cmd = dump_config(*args, **kwargs)  # Retrieve the Command object with bound arguments\n    print(cmd.args, cmd.kwargs)         # Inspect the Command object's bound arguments\n\nCommand Result\n^^^^^^^^^^^^^^\n\nFor each single invocation of a Command_ the entire output is captured in a\n``CommandResult`` object. These objects can be used to inspect the details\nof the execution using the following properties:\n\n- ``command: Command``\n    A back-reference to the executed Command_ with bound arguments.\n- ``cmdline: List``\n    The actual command line returned from the command function.\n- ``exit_status: Optional[Union[int, TimeoutError]]``\n    The exit status returned by the command, or a TimeoutError exception if\n    occurred. A ``None`` indicates the command has run to completion, yet.\n- ``success: bool``\n    Indicator for an overall successful execution. This value is calculated\n    from the actual ``exit_status`` and the expected Command_'s ``exit_code``.\n- ``output: StringIO``\n    The captured ``stdout`` and ``stderr`` from the execution.\n- ``test_report: Optional[ReportFilter.Result]``\n    The generated `Report Result`_ from applying the Command_'s ``test_report``.\n- ``start_time: float``\n    The Unix Epoch the command was launched retrieved from ``time.time()``.\n- ``end_time: float``\n    The Unix Epoch the command was finished ``time.time()``.\n- ``start_perf_counter: float``\n    The value retrieved from ``time.perf_counter()`` before running the command.\n- ``end_perf_counter: float``\n    The value retrieved from ``time.perf_counter()`` after running the command.\n\nReport\n~~~~~~\n\nA report can capture and post process the output of a command after execution.\nThis can be used to gather a test report from the commands standard output\ninto a standardized format. Though, this feature is not limit to test reports.\n\nIn order to attach report generation to a Command_ assign a pipe chain of\nreport generators to ``test_report``. The available report generators are:\n\n- ``ConsoleReport()``\n    Captures the console output of the command.\n- ``CropReport(first: AnyStr, last: AnyStr)``\n    Crops a section out of the input. All lines between first and last\n    (inclusive) are kept, everything else is dropped.\n- ``TransformReport(xslt)``\n    Applies the provided XSLT script to the input.\n- ``JUnitReport(title)``\n    Treats the input as JUnit XML and provides a detailed summary. Set\n    ``title`` to a static string or a function\n    ``lambda(title: str <, result: CommandResult]>) -> str``\n    to update the test suite names.\n\nReport generators can be chained in pipe like manner::\n\n    ConsoleReport() |\n    CropReport(\"<report>\", \"</report>\") |\n    TransformReport(\"tojunit.xsl\") |\n    JUnitReport(title = lambda title, report: title)\n\nThis chain\n\n- Captures the console output of the command.\n- Crops all content between ``<report>`` and ``</report>``, inclusive.\n- Transforms the custom XML to JUnit.\n- Considers the JUnit results for summary.\n\nThe `Report Result`_ is appended to the Command_'s result ``test_report``\nproperty to be accessible, e.g. in Action_ functions.\n\nThe report can\nbe written to a file using its ``write(file: AnyStr)`` function.\n\nReport Result\n^^^^^^^^^^^^^\n\nThe ``ReportFilter.Result`` gives access to the final output of a Report_\nfilter chain applied to a specific Command_ result. The following properties\nand functions can be used to access the report:\n\n- ``stream -> StringIO``\n    Direct access to the text stream.\n- ``getvalue() -> str``\n    Final string output.\n- ``write(file: AnyStr)``\n    Write the output into a file.\n\nThe mixin ``ReportFilter.Summary`` adds a detailed summary output in addition\nto the default ``passed`` or ``failed`` one:\n\n- ``summary -> Tuple[int, int]`` returns a tuple of ``passed`` and ``executed``\n    test cases.\n\nCustom Reports\n^^^^^^^^^^^^^^\n\nCustom report generators can be added by subclassing ``ReportFilter``\noverwriting its inner class ``ReportFilter.Result`` and giving a custom\n``stream -> StringIO`` property. The preceding generator can be accessed\nthrough ``_other`` property. In case of an error while processing the report a\nRuntimeError should be raised::\n\n    class CustomReport(ReportFilter):\n        class Result(ReportFilter.Result):\n            @property\n            def stream(self) -> StringIO:\n                if not self._stream:\n                    try:\n                        self._stream = StringIO()\n                        input = self._other.stream\n                        args = self._report.args\n                        output = input              # add some modification\n                        self._stream.write(output)\n                    except SomeException as e:\n                        self._stream = e\n                if isinstance(self._stream, Exception):\n                    raise RuntimeError from self._stream\n                else:\n                    return self._stream\n\n        def __init__(self, *args):\n            super(CustomReport, self).__init__()\n            self.args = args\n\nAdditional report formats can be supported by mixing in ``ReportFilter.Summary``\nand providing a custom ``summary -> Tuple[int, int]`` property. The summary\nshall return a tuple with numbers test cases ``(passed, executed)``::\n\n    class CustomSummary(ReportFilter):\n        class Result(ReportFilter.Result, ReportFilter.Summary):\n            @property\n            def summary(self) -> Tuple[int, int]:\n                passed = ...   # calculate passed test cases\n                executed = ... # calculate executed test cases\n                return passed, executed\n\nFilter\n~~~~~~\n\nA filter can be used to remove inappropriate Config_'s from the configuration\nmatrix. This is achieved by defining a function annotated with\n``@matrix_filter`` returning ``True`` for configuration to be dropped::\n\n    @matrix_filter\n    def filter(config):\n        return config.alpha.match('value3')\n\nConfig\n~~~~~~\n\nA single matrix configuration with specific values for each matrix axis is\ndenoted by an ``Config`` object. The ``Config`` object contains a property\nfor each axis containing the value.\n\nIn order to check if an axis value matches a condition one can use the\n``match`` function providing a `fnmatch.fnmatch`_ pattern.\n\nCommand Line\n~~~~~~~~~~~~\n\nRunning one or more configurations from the command line using Matrix Runner is\ntrivial. The generated interface looks like this::\n\n    $ ./build.py --help\n    usage: build.py [-h] [--silent | --verbose | --debug] [--pairwise] [--slice <HERE>/<TOTAL>]\n                    [[--<axis> <AXIS>] ...] action [action ...]\n\nThe positional argument ``action`` can be one or multiple define Action_'s to\nbe executed in the given order, e.g. either ``build`` and ``run`` separately or\nboth in a sequence.\n\nThe optional arguments are a combination of static ones used to parametrize\nMatrix Runner itself and dynamic ones generated from the defined Axis_:\n\n- ``-h``, ``--help`` shows the help message\n- ``--silent`` Silent mode, only errors are shown.\n- ``--verbose`` Verbose log output.\n- ``--debug`` Debug log output.\n- ``-2``, ``--pairwise`` reduces number of combinations using pairwise\n  algorithm. This enables combinatorial `all-pairs testing`_ to reduce the\n  overall number of configuration in logarithmic manner while retaining a high\n  probability of detecting issues.\n- ``--slice <HERE>/<TOTAL>`` cuts the set of combinations into ``TOTAL`` number\n  of slices and executes only the ``HERE``'th one. This can be used to run the\n  overall set of combinations in parallel. Slicing is applied after\n  ``--pairwise`` reduction.\n- ``-<a> <AXIS>``, ``--<axis> <AXIS>`` reduce number of combinations to\n  selected ``AXIS`` values for ``axis`` Axis values can be given as one of\n  their string representations *or* an fnmatch.fnmatch_ pattern matching at\n  least one of these. In case of pattern matching *all* matching values are\n  selected. This argument can be given multiple time which adds the values in a\n  cumulative way.\n\nThe console output has two parts. While executing the actions the output from\nthe associated commands is forwarded like this::\n\n    [<AXIS>](<ACTION>) <pre processing log>\n    [<AXIS>](<ACTION>:<COMMAND>) <command line>\n    [<AXIS>](<ACTION>:<COMMAND>) <stdout/stderr from command>\n    [<AXIS>](<ACTION>) <post processing log>\n\nEach line of output is prefixed with a ``[<AXIS>]`` per axis giving the\nmatrix configuration values the output belongs to. Followed by a\n``(<ACTION>:<COMMAND>)`` tag denoting the action and command currently\nexecuted. On a color terminal there is a clear distinction between stdout\n(green) and stderr (red) output. Intermediate warning messages from Python\nare colored as yellow.\n\nAfter all actions have been executed for all selected configurations a\ncomprehensive summary is displayed like this::\n\n    Matrix Summary\n    ==============\n\n    <axis>   <ACTION>\n    -------  -------\n    <AXIS>   success\n    <AXIS>   FAILED\n    <AXIS>   (skip)\n    ...      ...\n\nThe Matrix Summary gives a table with a column per axis and action. Each line\ndenotes all actions result for a specific configuration:\n\n- ``success`` (green) denotes all commands have been executed successfully (i.e. with expected exit codes)\n- ``FAILED`` (red) denotes a command has returned a failure exit code and execution got stalled\n- ``(skip)`` (yellow) denotes that this action has not been performed for that configuration.\n    Skipping configuration happens due to Filter_'s.\n\n.. note:: By default Matrix Runner scripts are expected to be run from their\n          local directory. Calling a script from anywhere else will create a\n          warning and the execution is likely to fail.\n\n.. _subprocess.Popen: https://docs.python.org/3/library/subprocess.html#subprocess.Popen\n.. _time.sleep: https://docs.python.org/3/library/time.html?highlight=sleep#time.sleep\n.. _fnmatch.fnmatch: https://docs.python.org/3/library/fnmatch.html#fnmatch.fnmatch\n.. _all-pairs testing: https://en.wikipedia.org/wiki/All-pairs_testing\n\nUtilities\n---------\n\nInspector\n~~~~~~~~~\n\nThe command line utility ``matrix-runner-inspect`` can be used to inspect a\nMatrix Runner build::\n\n    $ matrix-runner-inspect -h\n    usage: matrix-runner-inspect [-h] script\n\nIt takes only a single positional argument denoting the script to be inspected,\nfor example::\n\n    $ matrix-runner-inspect -- example.py\n    {\n      \"axes\": {\n        \"alpha\": {\"abbrev\": \"a\", \"values\": [\"value1\", \"value2\", \"value3\"],\n                  \"desc\": \"A configuration axis\"}\n      },\n      \"matrix\": [{\"alpha\": \"value1\"}, {\"alpha\": \"value2\"}, {\"alpha\": \"value3\"}]\n    }\n\nThe output gives the axes definition and the actual configuration matrix. The\nscript take all the usual axis arguments as shown above. These can be used to\nreduce the matrix reported by inspect::\n\n    $ matrix-runner-inspect -- demo/example.py -a v[23]\n    {\n      \"axes\": {\"alpha\": {\"abbrev\": \"a\", \"values\": [\"value1\", \"value2\", \"value3\"],\n               \"desc\": \"A configuration axis\"}},\n      \"matrix\": [{\"alpha\": \"value2\"}, {\"alpha\": \"value3\"}]\n    }\n\n\n.. |build-badge| image:: https://img.shields.io/github/workflow/status/energy6/python-matrix-runner/Build/main?style=flat\n    :target: https://github.com/energy6/python-matrix-runner/actions/workflows/build.yml?query=event%3Apush+branch%3Amain+is%3Acompleted\n    :alt: GitHub main-branch Build Workflow Status\n.. |test-badge| image:: https://img.shields.io/testspace/tests/energy6/energy6:python-matrix-runner/main?compact_message\n    :target: https://energy6.testspace.com/spaces/156681\n    :alt: Unit tests results\n.. |cov-badge| image:: https://img.shields.io/codecov/c/github/energy6/python-matrix-runner?style=flat\n    :target: https://app.codecov.io/gh/energy6/python-matrix-runner/branch/main\n    :alt: Codecov coverage report\n.. |python-badge| image:: https://img.shields.io/pypi/pyversions/python-matrix-runner?style=flat\n    :target: https://pypi.org/project/python-matrix-runner/\n    :alt: PyPI - Python Version\n.. |wheel-badge| image:: https://img.shields.io/pypi/wheel/python-matrix-runner?style=flat\n    :target: https://pypi.org/project/python-matrix-runner/\n    :alt: PyPI - Wheel\n.. |pypi-badge| image:: https://img.shields.io/pypi/v/python-matrix-runner?style=flat\n    :target: https://pypi.org/project/python-matrix-runner/\n    :alt: PyPI\n.. |license-badge| image:: https://img.shields.io/pypi/l/python-matrix-runner?style=flat\n    :target: https://pypi.org/project/python-matrix-runner/\n    :alt: PyPI - License\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/energy6/python-matrix-runner",
    "keywords": "",
    "license": "BSD 3-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-matrix-runner",
    "package_url": "https://pypi.org/project/python-matrix-runner/",
    "platform": null,
    "project_url": "https://pypi.org/project/python-matrix-runner/",
    "project_urls": {
      "Homepage": "https://github.com/energy6/python-matrix-runner"
    },
    "release_url": "https://pypi.org/project/python-matrix-runner/1.1.0/",
    "requires_dist": [
      "allpairspy (~=2.5)",
      "ansicolors (~=1.1)",
      "colorama (~=0.4)",
      "colorlog (~=6.6)",
      "filelock (~=3.4)",
      "junitparser (~=2.2)",
      "lxml (~=4.6)",
      "parameterized (~=0.8)",
      "psutil (~=5.8)",
      "tabulate (~=0.8)",
      "coverage (~=6.2) ; extra == 'dev'",
      "pylint (~=2.11) ; extra == 'dev'",
      "restructuredtext-lint (~=1.3) ; extra == 'dev'",
      "setuptools (~=59.4) ; extra == 'dev'",
      "unittest-xml-reporting (~=3.0) ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "Helper to run command with matrix configurations",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13917912,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c0fc564c4e8edd9de1986243682f07b6f91b2e87fca5d6f5a85365054794d06",
          "md5": "e38c5fcffceb2afb075b7a965c09da97",
          "sha256": "7f5d944e6180b29afb34691b921b340cd4281add83905ecab6704864c1476072"
        },
        "downloads": -1,
        "filename": "python_matrix_runner-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e38c5fcffceb2afb075b7a965c09da97",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 27789,
        "upload_time": "2021-07-13T16:13:49",
        "upload_time_iso_8601": "2021-07-13T16:13:49.256937Z",
        "url": "https://files.pythonhosted.org/packages/4c/0f/c564c4e8edd9de1986243682f07b6f91b2e87fca5d6f5a85365054794d06/python_matrix_runner-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa45fc2f5e4e0ff4ab45caee1827e52676ed3349e876ab91e2102ab3dffd7dac",
          "md5": "bfaa7c5eb5c8102f44ebe3e6d52df61e",
          "sha256": "a01dab3bb9125e031e729f9f18056a090d3e4fa9124a31590dedbb7ddcd5562d"
        },
        "downloads": -1,
        "filename": "python-matrix-runner-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bfaa7c5eb5c8102f44ebe3e6d52df61e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 30667,
        "upload_time": "2021-07-13T16:13:50",
        "upload_time_iso_8601": "2021-07-13T16:13:50.614967Z",
        "url": "https://files.pythonhosted.org/packages/fa/45/fc2f5e4e0ff4ab45caee1827e52676ed3349e876ab91e2102ab3dffd7dac/python-matrix-runner-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "056cfc3107a8f9e4bff27810af5b350e0436660666cd0b421357edfcdffd9ed6",
          "md5": "6020d13bcc86cc40eda9e1fc1a6b3e85",
          "sha256": "63f1061167d7bc651d667fcc08c7c0df7198bbde10d0dab6f519aa3ccb4c68a1"
        },
        "downloads": -1,
        "filename": "python_matrix_runner-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6020d13bcc86cc40eda9e1fc1a6b3e85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 27811,
        "upload_time": "2021-11-29T13:32:05",
        "upload_time_iso_8601": "2021-11-29T13:32:05.613283Z",
        "url": "https://files.pythonhosted.org/packages/05/6c/fc3107a8f9e4bff27810af5b350e0436660666cd0b421357edfcdffd9ed6/python_matrix_runner-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5afdc929a1c8d85e6d8b58e72a39c726eba7aaf380cf3d5fe4190b7dbb594655",
          "md5": "1494a68422a7da466ddba99c59936e03",
          "sha256": "14ff9d1a6178c61d4b12d478f763bd8b1d38b98ebe33306932bb919fcea8b1fc"
        },
        "downloads": -1,
        "filename": "python-matrix-runner-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1494a68422a7da466ddba99c59936e03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 30689,
        "upload_time": "2021-11-29T13:32:06",
        "upload_time_iso_8601": "2021-11-29T13:32:06.895743Z",
        "url": "https://files.pythonhosted.org/packages/5a/fd/c929a1c8d85e6d8b58e72a39c726eba7aaf380cf3d5fe4190b7dbb594655/python-matrix-runner-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da6187fccef03b5465a29c8a601adb7868c69c2dfb062c23a2ad60c610a5fa84",
          "md5": "726c995caa369e01d5e0c860695360e4",
          "sha256": "524b752873db4cc9196e503e08176b310cbe382666016a454f80393f770f2be3"
        },
        "downloads": -1,
        "filename": "python_matrix_runner-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "726c995caa369e01d5e0c860695360e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 28523,
        "upload_time": "2021-12-01T14:57:46",
        "upload_time_iso_8601": "2021-12-01T14:57:46.814198Z",
        "url": "https://files.pythonhosted.org/packages/da/61/87fccef03b5465a29c8a601adb7868c69c2dfb062c23a2ad60c610a5fa84/python_matrix_runner-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3653081fe5011c8807ee70893e3700c835a7be32cfe7ad3c17ee3c2601ba7212",
          "md5": "49fbcfa5f0b783e485d783b2304d4a44",
          "sha256": "ad5ce19be12b9d3c9b4329cde8f73668dac329ae59bca4b591eb7354fab929d9"
        },
        "downloads": -1,
        "filename": "python-matrix-runner-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "49fbcfa5f0b783e485d783b2304d4a44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 31404,
        "upload_time": "2021-12-01T14:57:48",
        "upload_time_iso_8601": "2021-12-01T14:57:48.554852Z",
        "url": "https://files.pythonhosted.org/packages/36/53/081fe5011c8807ee70893e3700c835a7be32cfe7ad3c17ee3c2601ba7212/python-matrix-runner-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8e3728f1ce87e3db38b353168b06e6a7b5ba2edd0e14bab82da3361ba38d40d",
          "md5": "d78bd0ad77757601d37f18451d11b20e",
          "sha256": "81d9b4052cc66470ed6521d1292134059280f63abd92f74854a232174437efbb"
        },
        "downloads": -1,
        "filename": "python_matrix_runner-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d78bd0ad77757601d37f18451d11b20e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 29048,
        "upload_time": "2022-05-24T08:39:02",
        "upload_time_iso_8601": "2022-05-24T08:39:02.461259Z",
        "url": "https://files.pythonhosted.org/packages/a8/e3/728f1ce87e3db38b353168b06e6a7b5ba2edd0e14bab82da3361ba38d40d/python_matrix_runner-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3b0dbf29030092ba6161564aac7af9045a3109a356e643d334144c43f13676a",
          "md5": "6e0d450dd37d88db5f5e6241bcded4ff",
          "sha256": "c3370496aa73eb0a2ea93cf1c6d9dea080f282cf9816d33f86163c03bac025c4"
        },
        "downloads": -1,
        "filename": "python-matrix-runner-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6e0d450dd37d88db5f5e6241bcded4ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 32069,
        "upload_time": "2022-05-24T08:39:04",
        "upload_time_iso_8601": "2022-05-24T08:39:04.097222Z",
        "url": "https://files.pythonhosted.org/packages/f3/b0/dbf29030092ba6161564aac7af9045a3109a356e643d334144c43f13676a/python-matrix-runner-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8e3728f1ce87e3db38b353168b06e6a7b5ba2edd0e14bab82da3361ba38d40d",
        "md5": "d78bd0ad77757601d37f18451d11b20e",
        "sha256": "81d9b4052cc66470ed6521d1292134059280f63abd92f74854a232174437efbb"
      },
      "downloads": -1,
      "filename": "python_matrix_runner-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d78bd0ad77757601d37f18451d11b20e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 29048,
      "upload_time": "2022-05-24T08:39:02",
      "upload_time_iso_8601": "2022-05-24T08:39:02.461259Z",
      "url": "https://files.pythonhosted.org/packages/a8/e3/728f1ce87e3db38b353168b06e6a7b5ba2edd0e14bab82da3361ba38d40d/python_matrix_runner-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3b0dbf29030092ba6161564aac7af9045a3109a356e643d334144c43f13676a",
        "md5": "6e0d450dd37d88db5f5e6241bcded4ff",
        "sha256": "c3370496aa73eb0a2ea93cf1c6d9dea080f282cf9816d33f86163c03bac025c4"
      },
      "downloads": -1,
      "filename": "python-matrix-runner-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6e0d450dd37d88db5f5e6241bcded4ff",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 32069,
      "upload_time": "2022-05-24T08:39:04",
      "upload_time_iso_8601": "2022-05-24T08:39:04.097222Z",
      "url": "https://files.pythonhosted.org/packages/f3/b0/dbf29030092ba6161564aac7af9045a3109a356e643d334144c43f13676a/python-matrix-runner-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}