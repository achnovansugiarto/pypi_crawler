{
  "info": {
    "author": "Rainer Schwarzbach",
    "author_email": "rainer@blackstream.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# python-read-ad\n\nCOM-based readonly access for Active Directory in Python 3,\n_forked from Tim Golden's active\\_directory.py v0.6.7_\n\n## Module description\n\nInstallation: ```pip install read-ad```\n\nModule name: ```read_ad```\n\nDependencies: Python 3.x and the pywin32 module (https://pypi.org/project/pywin32/)\n\nGoals: minimum dependencies, maximum speed, easy usage.\n\nIn contrast to the original, this module provides read access only.\nFor full-featured Active Directory access, please refer to the latest\nversion of the original, hosted at https://github.com/tjguk/active_directory.\n\n\n## Module contents\n\n### Constants / Global Variables\n\n#### Constants for ADO/COM access ###\n\n##### ADO\\_COMMAND\n\n> ```'ADODB.Command'```\n\n##### ADO\\_CONNECTION\n\n> ```'ADODB.Connection'```\n\n##### CONNECTION\\_PROVIDER\n\n> ```'ADsDSOObject'```\n\n##### CONNECTION\\_TARGET\n\n> ```'Active Directory Provider'```\n\n#### Internal cache keywords ####\n\n##### CACHE\\_KEY\\_CONNECTION\n\n> ```'_Connection_'``` as the key for caching the connection object.\n\n##### CACHE\\_KEY\\_ROOT\n\n> ```'_ActiveDirectoryRoot_'``` as the key for caching the Active Directory root URL.\n\n#### Mappings ####\n\n##### GLOBAL\\_CACHE\n\n> A global cache of **LdapEntry** objects mapped to LDAP Urls,\n> plus the connection object and the Active Directory root URL.\n\n##### GROUP\\_TYPES\n\n> A **FlagsMapping()** with Active Directory group type bitmasks\n> (values are taken from https://github.com/tjguk/active_directory/blob/master/active_directory.py#L164)\n\n##### AUTHENTICATION\\_TYPES\n\n> A **FlagsMapping()** with Active Directory authentication type bitmasks\n> (values are taken from https://github.com/tjguk/active_directory/blob/master/active_directory.py#L172)\n\n##### SAM\\_ACCOUNT\\_TYPES\n\n> A **UnsignedIntegerMapping()** with Active Directory account type magic numbers\n> (values are taken from https://github.com/tjguk/active_directory/blob/master/active_directory.py#L187)\n\n##### USER\\_ACCOUNT\\_CONTROL\n\n> A **FlagsMapping()** with Active Directory user account state bitmasks\n> (values are taken from https://github.com/tjguk/active_directory/blob/master/active_directory.py#L202)\n\n##### SEARCH\\_FILTERS\n\n> A dict of **SearchFilter** instances mapped to the following keywords:\n> * ```'computer'``` for searching computers by ```cn```\n> * ```'group'``` for searching groups by ```cn```\n> * ```'ou'``` for searching organizational units by ```ou```\n> * ```'public_folder'``` for searching public folders by ```displayName```\n> * ```'userid'``` for searching users by ```sAMAccountName```\n\n\n### Classes\n\n#### UnsignedIntegerMapping(_\\*\\*kwargs_)\n\nA Mapping of unsigned integers to names with reverse lookup functionality.\nMember access using a name returns the associated number and vice versa.\n\n##### .get\\_name(_number_)\n\n> Explicitly returns the name associated with the given number.\n\n\n#### FlagsMapping(_\\*\\*kwargs_)\n\nAn **UnsignedIntegerMapping** subclass for bitmasks mapped to flag names\n\n##### .get\\_flag\\_names(_number_)\n\n> Returns a set of all flag names for the bitmasks matching the given number.\n\n\n#### Recordset(_record_)\n\nWrapper around an ADO recordset as documented at\nhttps://docs.microsoft.com/windows/win32/adsi/searching-with-activex-data-objects-ado\n\n##### .query(_query\\_string, \\*\\*kwargs_)\n\n> _Classmethod_ that executes an Active Directory query over a cached connection\n> (provided by the **connection()** helper function, see source code)\n> and returns an iterator over **RecordSet** instances for each found result.\n\n> The query may be parameterized using keyword arguments.\n> Underscores in the keywords will be replaced by spaces.\n\n> The following parameters are preset for the query but may be overridden:\n> * Asynchronous=True\n> * Timeout=1\n\n##### .dump\\_fields()\n\n> Returns an iterator over the recordset fields as (name, value) tuples\n\n\n#### PathComponent(_keyword, value_)\n\nInstances of this class represent a single component of an LDAP path, eg ```'cn=Users'```.\nThey are initialized with a keyword and a value, in this example: ```'cn'``` and ```'Users'```.\n\n##### .keyword\n\n> The keyword\n\n##### .value\n\n> The value\n\n##### .from\\_string(string)\n\n> _Constructor (class)method_, returns a **PathComponent** instance built from keyword and value determined by splitting _string_ at a non-escaped equals sign (```=```).\n\n\n#### LdapPath(_\\*parts_)\n\nInstances of this class represent an LDAP path.\nThey are initialized using the provided parts, which can be either strings or **PathComponent** instances.\n\n##### .components\n\n> The components of the path (a tuple of **PathComponent** instances)\n\n##### .rdn\n\n> The relative distinguished name of the LPAP path (the **.value** of the first component)\n\n##### .url\n\n> The LDAP URL of the path (the distinguished name prefixed with ```'LDAP://'```)\n\n##### .from\\_string(string)\n\n> _Constructor (class)method_, returns an **LdapPath** instance built from the provided _string_ splitted at all non-escaped commas (```,```).\n\n\n#### SearchFilter(_primary\\_key\\_name, \\*\\*fixed_parameters_)\n\nInstances of this class hold a primary key name and a mapping of fixed parameters for an LDAP search.\n\n##### .execute\\_query(_ldap\\_url, \\*args, \\*\\*kwargs_)\n\n> Return an interator from the result of an LDAP query\n> (using the **RecordSet.query()** class method)\n> starting at _ldap\\_url_ and using SQL syntax with the \n> ```WHERE``` clause genarated by the **.where\\_clause()** method.\n\n##### .where\\_clause(_\\*args, \\*\\*kwargs_)\n\n> Return a ```WHERE``` clause for an SQL-like LDAP query string,\n> built from the provided positional and keyword arguments,\n> all concatenated using ```AND```.  \n> The stored fixed parameters override the provided keyword arguments.\n> If a _\\_primary\\_key\\__ keyword was provided, its value is\n> built into the clause using the stored primary key name.\n\n\n#### LdapEntry(_com\\_object_)\n\nStores a subset of an LDAP entry's attributes.\nThe stored attributes can be accessed via item access using \\[_attribute\\_name_\\]\nor (in the case of suitable attribute names) via attribute access using ._attribute\\_name_\n\nNote: LDAP entry attribute names are case insensitive.\n\nAll **LdapPath** and subclasses instances should be instantiated \nby using the **produce\\_entry()** function below.\n\n##### .empty\\_attributes\n\n> A frozenset of the names of all attributes having the value None.\n\n##### .ldap\\_url\n\n> The LDAP URL of the entry.\n\n##### .child(_single\\_path\\_component_)\n\n> Returns an **LdapEntry** subclass instance for a relative child of this instance.\n> Its path is determined by prepending the _single\\_path\\_component_ to this instance's path. \n\n##### .stored\\_attributes\\_items()\n\n> Returns an items dictview of the internal mapping of stored attributes.\n> Please note that empty attributes are not contained here; only their names\n> are stored in the **.empty\\_attributes** frozenset.\n\n##### .print\\_dump()\n\n> Prints a case-sensitive (i.e. uppercase before lowercase) alphabetically sorted dump\n> of all non-empty attributes.\n\n\n#### User(_com\\_object_)\n\n**LdapEntry** subclass for Active Directory users\n\nInteresting attributes include:\n* ```sAMAccountName``` - the user ID\n* ```givenName``` - the first name\n* ```sn``` - the last name\n* ```title``` - eg a PhD\n* ```manager``` - the user's direct boss (distinguished name)\n* ```memberOf``` - all groups the user is a direct member of (a tuple of distinguished names)\n* ```userAccountControl``` - originally a number, but resolved to a set of flag names from **USER\\_ACCOUNT\\_CONTROL**\n\n##### .account\\_disabled\n\n> ```True``` if the account is disabled, ```False``` if it is active.  \n\n\n#### Group(_com\\_object_)\n\n**LdapEntry** subclass for Active Directory groups\n\nInteresting attributes include:\n* ```member``` - all direct members (users and groups, a tuple of distinguished names)\n* ```memberOf``` - all groups this group is a direct member of (a tuple of distinguished names)\n\n##### .walk()\n\n> Returns an iterator over tuples, each consisting of: _1._ the current **Group** instance,\n> _2._ a list of member **Group** instances and _3._ a list of member **User** instances.\n\n\n### Public interface functions\n\n#### produce\\_entry(_ldap\\_path, lazy=True_)\n\n> **LdapEntry** and subclasses factory function.\n\n> Determines the suitable class out of **LdapEntry**, **User** or **Group** from the\n> COM object found at the LDAP URL.\n> Generates an instance of this class from the COM object,\n> stores it in **GLOBAL\\_CACHE** (associated to the LDAP path URL),\n> and returns the Instance.\n\n> _ldap\\_path_ may be a string containing either a distinguished name or an LDAP URL\n> (which is basically a distinguished name prefixed with ```'LDAP://'```),\n> or an **LdapPath** instance.\n\n> if _lazy_ is set to ```True``` (the default), this function returns\n> the suitable cached entry if it exists, avoiding expensive lookups\n> and network traffic.\n\n#### root(_server=None_)\n\n> Returns the (cached) **LdapEntry** instance referring to the\n> root of the logged-on Active Directory tree.\n\n#### search(_\\*args, active=None, search\\_base=None, search\\_filter=None, \\*\\*kwargs_)\n\n> Returns an iterator over all found LDAP paths\n> from an LDAP search starting at the LDAP URL specified as _search\\_base_.\n> If _search\\_base_ is not given, the LDAP search starts at the LDAP URL of root().\n\n> If _active_ is set to ```True``` or ```False``` explicitly, the method returns only\n> the paths of active (or deactivated) matching entries. \n\n> If _search_filter_ is set to a SearchFilter instance,\n> this method uses that instance to search the Active Directory.\n> Else, if a keyword matching any of the **SEARCH\\_FILTERS** keys\n> was provided, that search filter is used with this keyword's value\n> specified as the _\\_primary\\_key\\__ keyword's value.  \n> In all other cases, an empty search filter\n> will be instantiated and used.\n\n> If positional arguments (_\\*args_) were provided and any of them\n> does not contain a valid condition for the query's ```WHERE``` clause,\n> the **RecordSet.query()** method execting the query will return a ValueError\n> and display the faulty query string.\n\n#### search\\_users(_\\*args, \\*\\*kwargs_)\n\n> Returns an iterator over all found LDAP paths like the **search()** function above,\n> but uses the user search filter (**SEARCH\\_FILTER\\[**```'userid'```**\\]**) unconditionally.\n\n> In contrary to plain **search()**, the first\n> positional argument - if any are provided - is treated differently from the rest:  \n> It is matched against each one of ```sAMAccountName```, ```displayName``` and ```cn```\n> by building suitable conditions joined by ```'OR'```.\n> The remaining positional arguments are treated normally.\n\n#### get\\_first\\_entry(_\\*args, \\*\\*kwargs_)\n\n> Returns an **LdapEntry** or subclass instance made from the first found LDAP entry\n> from an LDAP search using **search()**, or None if nothing was found.\n\n#### get\\_first\\_user(_\\*args, \\*\\*kwargs_)\n\n> Returns a **User** instance made from the first found LDAP entry\n> from an LDAP search using **search\\_users()**, or None if nothing was found.\n\n\n## Examples\n\n```python\nimport read_ad\n\n# read_ad.root() returns the cached Active Directory root entry\n\n# find your own user in active directory\nimport getpass\nmy_user = read_ad.get_first_user(getpass.getuser())\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/blackstream-x/python-read-ad",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "read-ad",
    "package_url": "https://pypi.org/project/read-ad/",
    "platform": "win32",
    "project_url": "https://pypi.org/project/read-ad/",
    "project_urls": {
      "Homepage": "https://github.com/blackstream-x/python-read-ad",
      "Source": "https://github.com/blackstream-x/python-read-ad",
      "Tracker": "https://github.com/blackstream-x/python-read-ad/issues"
    },
    "release_url": "https://pypi.org/project/read-ad/1.0.0/",
    "requires_dist": [
      "pywin32"
    ],
    "requires_python": ">=3.6",
    "summary": "COM-based readonly access for Active Directory in Python 3",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11067483,
  "releases": {
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79725448998ee285ede0954b471ed6355f8fe55b5a4a4615ec788ba0534e6c9a",
          "md5": "7239b1e24a4e9b3543988bcaa5d48aa1",
          "sha256": "48ade3460804e404ddd644be7a2e2f878e280a04215fc86a137c87ecbfc083b0"
        },
        "downloads": -1,
        "filename": "read_ad-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7239b1e24a4e9b3543988bcaa5d48aa1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14118,
        "upload_time": "2021-01-28T16:59:45",
        "upload_time_iso_8601": "2021-01-28T16:59:45.795384Z",
        "url": "https://files.pythonhosted.org/packages/79/72/5448998ee285ede0954b471ed6355f8fe55b5a4a4615ec788ba0534e6c9a/read_ad-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a25a1469b900cb86def79161c3486bfa9a8af9ac913ffa9f96ca7e49e908c48c",
          "md5": "ae7e42a1849b02d0695bd84176ed867d",
          "sha256": "8b632ff59fbcd34a30085094642c35a221f4bc5ffc654f48711cf16fd19ae6bd"
        },
        "downloads": -1,
        "filename": "read-ad-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ae7e42a1849b02d0695bd84176ed867d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16335,
        "upload_time": "2021-01-28T16:59:47",
        "upload_time_iso_8601": "2021-01-28T16:59:47.150928Z",
        "url": "https://files.pythonhosted.org/packages/a2/5a/1469b900cb86def79161c3486bfa9a8af9ac913ffa9f96ca7e49e908c48c/read-ad-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85935fa52e2b6670fc31bbf99caa7e3d4c09ec2ad6dcf37bc75f5b806ecd50d0",
          "md5": "3266ea3fae0b16fa334a7cc381e90dd1",
          "sha256": "359681d80770cf0353eb0d9dd1b929d5c066deb7f180184acf541ef091e345a9"
        },
        "downloads": -1,
        "filename": "read_ad-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3266ea3fae0b16fa334a7cc381e90dd1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14132,
        "upload_time": "2021-01-29T15:37:54",
        "upload_time_iso_8601": "2021-01-29T15:37:54.019585Z",
        "url": "https://files.pythonhosted.org/packages/85/93/5fa52e2b6670fc31bbf99caa7e3d4c09ec2ad6dcf37bc75f5b806ecd50d0/read_ad-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "711098a08f199443d7f3a08b668e8a91ebc2009fb412e83c670ddb3e1dc2645f",
          "md5": "84d5cc61f1b2b7638e43085252320a1b",
          "sha256": "edc1aece6080e98c2f5b4e1499e9e8b0244cc2491e1033ff3b2eba39d810583a"
        },
        "downloads": -1,
        "filename": "read-ad-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "84d5cc61f1b2b7638e43085252320a1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16421,
        "upload_time": "2021-01-29T15:37:55",
        "upload_time_iso_8601": "2021-01-29T15:37:55.204657Z",
        "url": "https://files.pythonhosted.org/packages/71/10/98a08f199443d7f3a08b668e8a91ebc2009fb412e83c670ddb3e1dc2645f/read-ad-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "612a09f5847e208ca02dc65b96e8d2f745a97909005d813f0f05b89cffef2e77",
          "md5": "1d264fda101f3ed111e5c53e6344ca8c",
          "sha256": "d6362546b7526180dfb53d7d388cf397c7e34f5c0a0cafc8a1a254a3090443c8"
        },
        "downloads": -1,
        "filename": "read_ad-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d264fda101f3ed111e5c53e6344ca8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13674,
        "upload_time": "2021-02-01T12:39:16",
        "upload_time_iso_8601": "2021-02-01T12:39:16.098996Z",
        "url": "https://files.pythonhosted.org/packages/61/2a/09f5847e208ca02dc65b96e8d2f745a97909005d813f0f05b89cffef2e77/read_ad-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f848694368e8fb41f013293c397ed240ad259da12ea5da4eaf77f1b08a5437e0",
          "md5": "86888ca185fe324d0a75f6f24946b325",
          "sha256": "0015ab2af7776c88aead2efe6f46316c0ff0f427ed1811e54fc6dfffabb1284c"
        },
        "downloads": -1,
        "filename": "read-ad-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "86888ca185fe324d0a75f6f24946b325",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15703,
        "upload_time": "2021-02-01T12:39:17",
        "upload_time_iso_8601": "2021-02-01T12:39:17.490163Z",
        "url": "https://files.pythonhosted.org/packages/f8/48/694368e8fb41f013293c397ed240ad259da12ea5da4eaf77f1b08a5437e0/read-ad-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8842cfabb1ef8168c3de110ae9d559cc86171920f38f3b1d53cc5f0f3d5042b",
          "md5": "124ca3def58a1236ad83afc58958e2a8",
          "sha256": "6434bb9f336ae5cb410ad381d8800379b51c73e68c8e8491f87d00726cb042fb"
        },
        "downloads": -1,
        "filename": "read_ad-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "124ca3def58a1236ad83afc58958e2a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13674,
        "upload_time": "2021-02-01T14:31:56",
        "upload_time_iso_8601": "2021-02-01T14:31:56.945993Z",
        "url": "https://files.pythonhosted.org/packages/c8/84/2cfabb1ef8168c3de110ae9d559cc86171920f38f3b1d53cc5f0f3d5042b/read_ad-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6a83bf0f659f7985eec7634d6184d178f19cf6ffcf5fab2efd1356e9611eaed",
          "md5": "ace8525348a17b6229b323773a322719",
          "sha256": "eb330d020146eaf27c0c176cd89a19e0c96dc2076d7940d7047d58b324bd1498"
        },
        "downloads": -1,
        "filename": "read-ad-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ace8525348a17b6229b323773a322719",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15702,
        "upload_time": "2021-02-01T14:31:58",
        "upload_time_iso_8601": "2021-02-01T14:31:58.216624Z",
        "url": "https://files.pythonhosted.org/packages/a6/a8/3bf0f659f7985eec7634d6184d178f19cf6ffcf5fab2efd1356e9611eaed/read-ad-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9089cef5a841f1d93785df1c9cfcf6e74b44b5e9b62af9a92eec3e85fbe16232",
          "md5": "c59e9f35705e077504eecdbfbbdd2771",
          "sha256": "5a22cb1433c7b0d23a78fbd3d43beef89c76de4ec46594262480bcb52ab18882"
        },
        "downloads": -1,
        "filename": "read_ad-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c59e9f35705e077504eecdbfbbdd2771",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13735,
        "upload_time": "2021-02-05T21:55:33",
        "upload_time_iso_8601": "2021-02-05T21:55:33.427177Z",
        "url": "https://files.pythonhosted.org/packages/90/89/cef5a841f1d93785df1c9cfcf6e74b44b5e9b62af9a92eec3e85fbe16232/read_ad-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2f22e1350e68c58014b1afe46b22797e95eba8ac4d76d9270aea865cb644589",
          "md5": "98aeb2cd3170441831da263da50bdadf",
          "sha256": "4d5c013e7d9e4bcf18a2065a701d8625b4bb32a914c7efd0116a3462c510c6a9"
        },
        "downloads": -1,
        "filename": "read-ad-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "98aeb2cd3170441831da263da50bdadf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15851,
        "upload_time": "2021-02-05T21:55:34",
        "upload_time_iso_8601": "2021-02-05T21:55:34.925568Z",
        "url": "https://files.pythonhosted.org/packages/d2/f2/2e1350e68c58014b1afe46b22797e95eba8ac4d76d9270aea865cb644589/read-ad-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32329a485fd866de10d76fda6661fc1a9f6c455491f44c0c22e3ae55d3b37daa",
          "md5": "f89c9a7f7953af145aead8606d6ee4c3",
          "sha256": "c9eaa2d6826edaa1959e75c99e265cb91b259bfb2f65e39447b1f3e7803e809f"
        },
        "downloads": -1,
        "filename": "read_ad-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f89c9a7f7953af145aead8606d6ee4c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13745,
        "upload_time": "2021-08-02T08:52:55",
        "upload_time_iso_8601": "2021-08-02T08:52:55.528799Z",
        "url": "https://files.pythonhosted.org/packages/32/32/9a485fd866de10d76fda6661fc1a9f6c455491f44c0c22e3ae55d3b37daa/read_ad-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cf8b9378ef06a533a59be8e596daf336f66b8787d654850c0818ed30e907336",
          "md5": "7a00fd0069bf79516d405be407d5a4a0",
          "sha256": "8e7486327966c1cf2a3896c70256ac7e4718b7917e139be4da225b701853a816"
        },
        "downloads": -1,
        "filename": "read-ad-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7a00fd0069bf79516d405be407d5a4a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15872,
        "upload_time": "2021-08-02T08:52:57",
        "upload_time_iso_8601": "2021-08-02T08:52:57.683033Z",
        "url": "https://files.pythonhosted.org/packages/4c/f8/b9378ef06a533a59be8e596daf336f66b8787d654850c0818ed30e907336/read-ad-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32329a485fd866de10d76fda6661fc1a9f6c455491f44c0c22e3ae55d3b37daa",
        "md5": "f89c9a7f7953af145aead8606d6ee4c3",
        "sha256": "c9eaa2d6826edaa1959e75c99e265cb91b259bfb2f65e39447b1f3e7803e809f"
      },
      "downloads": -1,
      "filename": "read_ad-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f89c9a7f7953af145aead8606d6ee4c3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13745,
      "upload_time": "2021-08-02T08:52:55",
      "upload_time_iso_8601": "2021-08-02T08:52:55.528799Z",
      "url": "https://files.pythonhosted.org/packages/32/32/9a485fd866de10d76fda6661fc1a9f6c455491f44c0c22e3ae55d3b37daa/read_ad-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4cf8b9378ef06a533a59be8e596daf336f66b8787d654850c0818ed30e907336",
        "md5": "7a00fd0069bf79516d405be407d5a4a0",
        "sha256": "8e7486327966c1cf2a3896c70256ac7e4718b7917e139be4da225b701853a816"
      },
      "downloads": -1,
      "filename": "read-ad-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7a00fd0069bf79516d405be407d5a4a0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15872,
      "upload_time": "2021-08-02T08:52:57",
      "upload_time_iso_8601": "2021-08-02T08:52:57.683033Z",
      "url": "https://files.pythonhosted.org/packages/4c/f8/b9378ef06a533a59be8e596daf336f66b8787d654850c0818ed30e907336/read-ad-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}