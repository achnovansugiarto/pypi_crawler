{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Operating System :: MacOS :: MacOS X",
      "Topic :: Home Automation",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Internet :: WWW/HTTP :: WSGI",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Networking"
    ],
    "description": "# Overview\n\nA JSON-RPC 2.0 implementation.\n\nFeatures:\n- Supports calling JSON-RCP 2.0 servers\n- Build a JSON-RPC server using WSGI and CGI\n- Optionally supports async client and server code\n- Use the JSON-RPC 2.0 with any transport layer by using building blocks\n- Battle tested code because it was alreay used ~10 years in varioius closed source projects\n- Unittests are written for new code and whenever a bug is fixed for older parts\n- Abstracts handling of datetime.datetime() over the RPC\n- Because this is a serious library a GPG signature is uploaded to PIP so the integrity of updates can be easily verified.\n- Plays nice with OpenRPC (https://open-rpc.org/)\n\nDrawbacks:\n- Depnends on libraries to support async and correctly convert Pythons datatime.datetime() to JSON and to ensure timezone information is not swallowed\n- This library is commited not to brake existing code so it can get bloated over time\n\nFeatures under construction:\n_Note: For features under construction it is open if they will arrive as a separate package or merged in to this one_\n- Experimental code for OpenRPC is already included and will get more major over time. Several closed source applications already rely on it.\n- A JSON-RPC 2.0 over MQTT is under consideration\n\n# Install\n\n`pip install jsonrpcx`\n\nA GPG signature is available at PIP that can be checked as well.\n\n# Build clients\n\n## Async\n\n_Note: `acall` does not support a session parameter because it could lead to hard to debug code.\nIf for example you have two paralel requests one is logging you in to the server and sets a cookie and the other is calling a method where it already needs to be logged in\nThen it can happen that sometimes it works while other times the login happens after the first request to a resource that requires a login thus withuot the login.\nIn the last case the server would return some kind of error message and the develper with a headage.\nIf you want to use async requests please only do so with stateless RPC servers or use the sync version instead._\nNote: There currenlty is code to support sessions for `acall` but that will be removed in a future version unless a way to circumvent the problem described above is found.\n\n```python\nfrom jsonrpcx import acall\nimport asyncio\n\nasync def main():\n    result1 = await acall(\"https://yourjsonrpc.online\", method=\"add\", params=[1, 2])\n    print(result1)\n\n    result2 = await acall(\"https://yourjsonrpc.online\", method=\"add\", params={a: 1, b: 2})\n    print(result2)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n```\n\nIf you don't want to write the URL over and over again you can do this trick\n```python\nfrom jsonrpcx import acall\nimport asyncio\nfrom functools import partial\n\nasync def main():\n    rpc = partial(acall \"https://yourjsonrpc.online\")\n    result = await rpc(\"add\", [2, 2])\n    print(result)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n\n## Sync\n\n### Call RPC via string\n\n```python\nfrom jsonrpcx import call\nimport https\n\nresult1 = call(\"https://yourjsonrpc.online\", method=\"add\", params=[1, 2])\nprint(result1)\n\nresult2 = call(\"https://yourjsonrpc.online\", method=\"add\", params={a: 1, b: 2})\nprint(result2)\n\n# Generally you should keep JSON-RPC 2.0 servers state less that means not rely on sessions for stuff like authentication\n# Sessions can be used here but should be threaded as an implementation detail and only used if absolutely necessary\n# because it will only work as long as httpx is used under the hood\n# If you do need a session you can do the following\nsession = httpx.Client()\nresult3 = call(\"https://yourjsonrpc.online\", method=\"add\", params=[1, 2], session=session)\nprint(result3)\n```\n\nIf you don't want to write the URL over and over again you can do this trick\n```python\nfrom jsonrpcx import call\nfrom functools import partial\n\nrpc = partial(call, \"https://yourjsonrpc.online\")\nresult = rpc(\"add\", [2, 2])\nprint(result)\n```\n\n### Call RPC via proxy object\n\nFor legacy reasons `ServiceProxy` exists and will automatically translate a method call on the ServiceProxy object to a method call on the RPC.\n_Because this looks like normal Python code but static code analysis or auto complete can not support the developer here this way of calling an RPC has not made it to the newer async version._\n\n```python\nimport jsonrpcx\n\n# The service proxy keeps track of HTTP sessions\nrpc = jsonrpcx.ServiceProxy(\"https://yourjsonrpc.online\")\nrpc.add(1, 2)\nrpc.add(a=1, b=2)\n\n# As a limitation of the JSON-RPC 2.0 protocol this is not possible and would usually trhow an Exception but is dependend on the implementation detail of the server\nrpc.add(1, b=2)\n```\n\n# Build Servers\n\n## ASGI\nASGI is the asyc version of WSGI.\n\nThis is being worked on and will be available in a future release.\n\n## WSGI\n_Note: WSGI does not support async. This is a limitation of WSGI itself not of this library._\n\n```python\nfrom typing import *\nfrom jsonrpcx import *\n\nclass Service(WSGIServer):\n    def ping(self) -> str:\n        return \"pong\"\n\n    def add(self, val1: int, val2: int) -> int:\n        return val1 + val2\n\n    def echo(self, var):\n        return var\n\n    def testReturnNone(self):\n        return None\n\n# You only need this if you want to overwrite the HTTP headers sent to the client\nclass Delegate(WSGIServerDelegate):\n    def HTMLHeaders(self) -> List[str]:\n        return [(\"Content-Type\", \"application/json\")]\n\ndef app(environment, start_response):\n    wsgiServer = Service(delegate=Delegate())\n    return wsgiServer.parseRequest(environment, start_response)\n```\n\n## CGI\nCGI is the perfect choice for hosting providers that do not support WSGI or ASGI.\n\nRecomended configuration using Apache .htaccess as an example a similar configuration should work for other webservers.\n\n```htaccess\n    # If the webserver retuns some error your JSON-RPC 2.0 clients won't break even if they don't understand HTTP error codes which some don't\n    ErrorDocument 500 '{\"jsonrpc\": \"2.0\", \"error\": {\"code\": -32603, \"message\": \"Internal error issued by webserver\"}, \"id\": null}'\n\n    # Security precaution\n    Options -Indexes\n\n    DirectoryIndex index.py\n\n    # Don't give hackes access to configuration secrets\n    <Files ~ \"\\.pyc$\">\n        Order allow,deny\n        Deny from all\n    </Files>\n\n    # Requied to make .py scripts executable\n    Options +ExecCGI\n    AddHandler cgi-script .py\n\n    # Only if you intend to use the RPC from a browser.\n    # Please check if you can use more strict CORS rules\n    Header set Access-Control-Allow-Origin \"*\"\n    Header set Access-Control-Allow-Headers \"Accept,Content-Type,Cookie,Origin,Referer,User-Agent\"\n    Header set Access-Control-Allow-Methods \"*\"\n    Header set Access-Control-Allow-Credentials true\n```\n\n### Async\n```python\nfrom jsonrpcx import *\nimport asyncio\n\nclass Service(AsyncCGIServer):\n    # Will work becasue its marked with the `async` keyword`\n    async def ping(self) -> str:\n        return \"pong\"\n    \n    # This will not work because it is missing the `async` keyword\n    def ping2(self) -> str:\n        return \"pong\"\n\n\n# You only need this if you want to overwrite the HTTP headers sent to the client\nclass Delegate(CGIServerDelegate):\n    def HTTPHeader(self):\n        return \"Content-Type: application/json\"\n\nif __name__ == \"__main__\":\n    service = Service(delegate=Delegate())\n    asyncio.run(service.processRequests())\n```\n\n### Sync\n\n```python\nfrom jsonrpcx import *\n\nclass Service(CGIServer):\n    def ping(self) -> str:\n        return \"pong\"\n\n# You only need this if you want to overwrite the HTTP headers sent to the client\nclass Delegate(CGIServerDelegate):\n    def HTTPHeader(self):\n        return \"Content-Type: application/json\"\n\nif __name__ == \"__main__\":\n    Service(delegate=Delegate())\n```\n\n# OpenRPC documentation\n_Note: If you want to use this with web based tooling you need to configure CORS headers in a way to allow that._\n\nThis library already provieds experimental support for https://open-rpc.org/ which means you can auto generate documenation.\nThis library uses Pythons typing support to figure out what input types a function has.\n\nIf you point a tool that can generate documentation form the OpenRPC spec to your JSON-RPC 2.0 server it will already be able to generate documentation for it.\nThe method to generate the OpenRPC json document is `rpc.discover` if you want to overwrite its behaviour then you can overrde the method `def rpcDiscover(self):` or `async rpcDiscover(self):` depending on if you choose a sync or async JSON-RPC 2.0 server.\n\nThe `info` and `server` parts of the documentation return a example information by default. If you want to add your own information you can do it like so:\n\n```python\nfrom typing import *\nfrom jsonrpcx import *\n\n# Make sure to inherit from the correct class here depending on how you deploy the server\nclass Delegate(CGIServerDelegate):\n    def experimentalOpenRPCInfo(self):\n        return {\n            \"version\": \"1.0.0\",\n            \"title\": \"Example Title\",\n            \"termsOfService\": \"https://example.eu/tos\",\n            \"contact\": {\n                \"name\": \"Support Contact Name\",\n                \"email\": \"support@example.eu\",\n                \"url\": \"https://example.eu\"\n            },\n            \"description\": \"This API uses JSON-RPC 2.0. For simplicity it does not support batch method calls.\"\n            }\n\n    def experimentalOpenRPCServers(self) -> Optional[List[Dict]]:\n        return [{\n                \"name\": \"Example endpoint\",\n                \"url\": \"http://localhost:8000\"\n            }]\n```\n\n# Setup development\n\nRun `pipenv install`\n\n# Testing\nRun `pipenv run pytest`\n\n# Running the Example server\n```gunicorn exampleserver:app --reload```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://codeberg.org/_laphilipa/jsonrpcx",
    "keywords": "JSON,jsonrpc,rpc",
    "license": "ISC",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jsonrpcx",
    "package_url": "https://pypi.org/project/jsonrpcx/",
    "platform": "",
    "project_url": "https://pypi.org/project/jsonrpcx/",
    "project_urls": {
      "Homepage": "https://codeberg.org/_laphilipa/jsonrpcx"
    },
    "release_url": "https://pypi.org/project/jsonrpcx/3.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A battle tested Python JSON-RPC2.0 library supporting client and server code in sync and async fashion.",
    "version": "3.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10819906,
  "releases": {
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2ab505fb65e840ed4eeee7023d99437f638e9e3b385fe9d9122b03f6240b80f",
          "md5": "d3b77bc711a78934f93d3dd5c446e368",
          "sha256": "c236c1bc51ec27f9bca52d1b891bc1a993c956629e04d077d3396da5ee03d25d"
        },
        "downloads": -1,
        "filename": "jsonrpcx-3.0.0.tar.gz",
        "has_sig": true,
        "md5_digest": "d3b77bc711a78934f93d3dd5c446e368",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11653,
        "upload_time": "2021-07-03T16:05:14",
        "upload_time_iso_8601": "2021-07-03T16:05:14.372146Z",
        "url": "https://files.pythonhosted.org/packages/c2/ab/505fb65e840ed4eeee7023d99437f638e9e3b385fe9d9122b03f6240b80f/jsonrpcx-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee15ef96a0161788643ba722c2779e2ef521b496d6251739cfb37a2718b34f2e",
          "md5": "e0650e3be6ae80601a12d69cd5275464",
          "sha256": "281a8832ff27ece4ddaf3416ca8d7c4a322be0e024b754534c4c3fec0c62fc8e"
        },
        "downloads": -1,
        "filename": "jsonrpcx-3.1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "e0650e3be6ae80601a12d69cd5275464",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15053,
        "upload_time": "2021-07-04T14:43:47",
        "upload_time_iso_8601": "2021-07-04T14:43:47.910718Z",
        "url": "https://files.pythonhosted.org/packages/ee/15/ef96a0161788643ba722c2779e2ef521b496d6251739cfb37a2718b34f2e/jsonrpcx-3.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee15ef96a0161788643ba722c2779e2ef521b496d6251739cfb37a2718b34f2e",
        "md5": "e0650e3be6ae80601a12d69cd5275464",
        "sha256": "281a8832ff27ece4ddaf3416ca8d7c4a322be0e024b754534c4c3fec0c62fc8e"
      },
      "downloads": -1,
      "filename": "jsonrpcx-3.1.0.tar.gz",
      "has_sig": true,
      "md5_digest": "e0650e3be6ae80601a12d69cd5275464",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15053,
      "upload_time": "2021-07-04T14:43:47",
      "upload_time_iso_8601": "2021-07-04T14:43:47.910718Z",
      "url": "https://files.pythonhosted.org/packages/ee/15/ef96a0161788643ba722c2779e2ef521b496d6251739cfb37a2718b34f2e/jsonrpcx-3.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}