{
  "info": {
    "author": "Fredrik Olsson",
    "author_email": "freol@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# pydynkin - A python version of `dynkin`\n\n[![PyPI version shields.io](https://img.shields.io/pypi/v/dynkin.svg)](https://pypi.python.org/pypi/dynkin/)\n![](https://github.com/freol35241/pydynkin/workflows/dynkin/badge.svg)\n[![codecov](https://codecov.io/gh/freol35241/pydynkin/branch/master/graph/badge.svg)](https://codecov.io/gh/freol35241/pydynkin)\n\nA toolkit for 3D dynamics and kinematics of rigid bodies using the YPR euler angle convention.\n\n[**--> Docs <--**](https://freol35241.github.io/pydynkin/)\n\n**Note:** `dynkin` is also available in a C++ version, available here: https://github.com/freol35241/dynkin\n\n## General\n\n`dynkin` is a set of tools for handling the dynamics and kinematics of rigid bodies in 3 dimensions (6DOFs). Some features:\n\n* Homogenous transformation matrices\n* Chained reference frames\n* Idealized rigid body implementation\n\nThe fundamentals of reference frames and the kinematic relations of these are based on [Theory of Applied Robotics (Reza N. Jazar)](https://link.springer.com/book/10.1007/978-0-387-68964-7) , the idealized rigid body implementation follows the outline suggested in the lectures by [Fossen](https://www.fossen.biz/wiley/ed2/Ch3.pdf).\n\n## Installation\n\n`pip install dynkin`\n\n## Theory intro\n\nSome basic notions:\n\n* A reference `Frame` is defined in `dynkin` as an object which `positions`, `vectors`, `velocities`, `accelerations` etc can be decomposed in. `dynkin` represents reference `Frame`s by (4x4) homogenous transformation matrices. A `Frame` is aligned (positioned, rotated) and moves (linear and angular velocity) in relation to another `Frame` or the inertial frame (represented by `None`).\n* The `pose` of a `Frame` is its generalized position and the `twist` of a `Frame` is its generalized velocity, both in relation to the inertial frame.\n* All rotations in `dynkin` are internally represented by rotation matrices but the external API, so far, deals only with Euler angles of the YPR (Yaw-Pitch-Roll) convention.\n* A `kinematic chain` is a single-linked list of `Frame`s, where each `Frame` holds a reference to its closest parent. Any number of `Frame`s may be attached into such a chain and the chain may also have any number of branches, it is however the userÂ´s responsibility to ensure no kinematic loops occur.\n* A `transform` is an object relating two `Frame`s enabling transformation of `positions`, `vectors`, `velocities` etc from one `Frame` to the other. The `Frame`s do not need to be part of the same `kinematic chain`.\n* A `RigidBody` is a 3D body with arbitrary extent that may be described by a generalized inertia matrix (6x6). It accelerates when subject to generalized external forces (`wrenches`) and rotational velocities give rise to inertial forces (coriolis and centripetal contributions).\n\n## Examples\n\n### Single frame\n```python\nfrom dynkin import Frame, transform\n\nframe1 = Frame(position=[1, 2, 3], attitude=[0, 0, 90], degrees=True)\n\n# Find transformation from the inertial frame to frame1\nti1 = transform(None, frame1)\n\n# Transformation of vector\nv1_decomposed_in_frame1 = ti1.apply_vector(v1_decomposed_in_inertial_frame)\n\n# Transformation of position\np1_decomposed_in_frame1 = ti1.apply_position(p1_decomposed_in_inertial_frame)\n\n# Transformation of wrench\nw1_decomposed_in_frame1 = ti1.apply_wrench(w1_decomposed_in_inertial_frame)\n\n# Find the inverse transformation\nt1i = ti1.inv()\n\n# Pose of this frame, decomposed in inertial frame\nframe1.get_pose()\n\n# Twist of this frame, decomposed in inertial frame\nframe.get_twist()\n```\n\n### Two frames\n```python\nfrom dynkin import Frame, transform\n\nframe1 = Frame(position=[1, 2, 3], attitude=[0, 0, 90], degrees=True)\nframe2 = Frame(position=[3, 2, 1], attitude=[0, 0, -90], degrees=True)\n\n# Find transformation from frame1 to frame2\nt12 = transform(frame1, frame2)\n\n# Transformation of vector\nv1_decomposed_in_frame2 = t12.apply_vector(v1_decomposed_in_frame1)\n\n# Transformation of position\np1_decomposed_in_frame2 = t12.apply_position(p1_decomposed_in_frame1)\n\n# Transformation of wrench\nw1_decomposed_in_frame2 = t12.apply_wrench(w1_decomposed_in_frame1)\n\n# Find the inverse transformation\nt21 = t12.inv()\n```\n\n### Kinematic chains\n```python\nfrom dynkin import Frame, transform\n\nframe1 = Frame(position=[1, 2, 3], attitude=[0, 0, 90], degrees=True)\nframe2 = frame1.align_child(position=[3, 2, 1], attitude=[0, 0, -90], degrees=True)\nframe3 = frame2.align_child(position=[1, 1, 1], attitude=[0, 0, 0], degrees=True)\n\n# Find transformation from inertial frame to frame3\nti3 = transform(None, frame3)\n\n# Transformation from frame3 and frame1\nt31 = transform(frame3, frame1)\n\n...\n```\n\nTODO: RigidBody example\n\n## License\n\nDistributed under the terms of the MIT license, `dynkin` is free and open source software\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/freol35241/pydynkin",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Fredrik Olsson",
    "maintainer_email": "freol@outlook.com",
    "name": "dynkin",
    "package_url": "https://pypi.org/project/dynkin/",
    "platform": "",
    "project_url": "https://pypi.org/project/dynkin/",
    "project_urls": {
      "Homepage": "https://github.com/freol35241/pydynkin"
    },
    "release_url": "https://pypi.org/project/dynkin/0.2.1/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": ">=3.5",
    "summary": "A toolkit for 3D dynamics and kinematics",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9338023,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42de57ea6ab546f01a87cf8f86dba8435ef288f52fe8504c1f9262dc09edd881",
          "md5": "15b430445b9d6d954bdc322533e35776",
          "sha256": "0e44753962d2bd7a512fdb0e3ab407f2386597ddcb363b7daea8097935f99262"
        },
        "downloads": -1,
        "filename": "dynkin-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15b430445b9d6d954bdc322533e35776",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7176,
        "upload_time": "2020-06-26T20:37:21",
        "upload_time_iso_8601": "2020-06-26T20:37:21.816140Z",
        "url": "https://files.pythonhosted.org/packages/42/de/57ea6ab546f01a87cf8f86dba8435ef288f52fe8504c1f9262dc09edd881/dynkin-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5c413f53a052a52a138c2c76eda6bf2f958d6621481a5c932f8b0489ec752ae",
          "md5": "11aad30fc3c651a2f052cf1914301994",
          "sha256": "8ce1a9b5dc14153feb909264a77fff8b10bd3656c8984b3365a0d5d0e79d0d70"
        },
        "downloads": -1,
        "filename": "dynkin-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11aad30fc3c651a2f052cf1914301994",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7887,
        "upload_time": "2020-10-04T19:10:26",
        "upload_time_iso_8601": "2020-10-04T19:10:26.008141Z",
        "url": "https://files.pythonhosted.org/packages/c5/c4/13f53a052a52a138c2c76eda6bf2f958d6621481a5c932f8b0489ec752ae/dynkin-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c846a24cf754215012539b50c28f999982a9984c1086f9e3e18dbc901a461d39",
          "md5": "ffe75fb724f7a813b51a3e110ee6e268",
          "sha256": "aa570c4caabd8e13b3e731569052e64a2a3732ec03a00233fde395ae15ec17c7"
        },
        "downloads": -1,
        "filename": "dynkin-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ffe75fb724f7a813b51a3e110ee6e268",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7937,
        "upload_time": "2021-02-06T17:40:56",
        "upload_time_iso_8601": "2021-02-06T17:40:56.947946Z",
        "url": "https://files.pythonhosted.org/packages/c8/46/a24cf754215012539b50c28f999982a9984c1086f9e3e18dbc901a461d39/dynkin-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c846a24cf754215012539b50c28f999982a9984c1086f9e3e18dbc901a461d39",
        "md5": "ffe75fb724f7a813b51a3e110ee6e268",
        "sha256": "aa570c4caabd8e13b3e731569052e64a2a3732ec03a00233fde395ae15ec17c7"
      },
      "downloads": -1,
      "filename": "dynkin-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ffe75fb724f7a813b51a3e110ee6e268",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 7937,
      "upload_time": "2021-02-06T17:40:56",
      "upload_time_iso_8601": "2021-02-06T17:40:56.947946Z",
      "url": "https://files.pythonhosted.org/packages/c8/46/a24cf754215012539b50c28f999982a9984c1086f9e3e18dbc901a461d39/dynkin-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}