{
  "info": {
    "author": "Jihwan Jeong",
    "author_email": "Jihwan Jeong <jiihwan.jeong@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Python Implementation of XADD\n\nThis repository implements the Python version of XADD (eXtended Algebraic Decision Diagrams) which was first introduced in [Sanner et al. (2011)](https://arxiv.org/pdf/1202.3762.pdf); you can find the original Java implementation from [here](https://github.com/ssanner/xadd-inference). \n\nOur Python XADD code uses [Sympy](https://github.com/sympy/sympy) for symbolically maintaining all variables and related operations, and [PULP](https://github.com/coin-or/pulp) is used for pruning unreachable paths.  Note that we only check linear conditionals.  If you have Gurobi installed and configured in the conda environment, then PULP will use Gurobi for solving (MI)LPs; otherwise, the default solver ([CBC](https://github.com/coin-or/Cbc)) is going to be used.\n\nNote that the implementation for [EMSPO](https://proceedings.mlr.press/v162/jeong22a/jeong22a.pdf) --- Exact symbolic reduction of linear Smart Predict+Optimize to MILP (Jeong et al., ICML-22) --- has been moved to the branch [emspo](https://github.com/jihwan-jeong/xaddpy/tree/emspo). \n\n## Installation\n\n**Load your Python virtual environment then type the following commands for package installation**\n\n```shell\npip install xaddpy\n\n# Optional: if you want to use Gurobi for the 'reduce_lp' method\n# that prunes out unreachable partitions using LP solvers\npip install gurobipy    # If you have a license\n```\n\n## Using xaddpy\n\nYou can find useful XADD usecases in the [xaddpy/tests/test_bool_var.py](xaddpy/tests/test_bool_var.py) and [xaddpy/tests/test_xadd.py](xaddpy/tests/test_xadd.py) files. Here, we will first briefly discuss different ways to build an initial XADD that you want to work with. \n\n### Loading from a file\n\nIf you know the entire structure of an initial XADD, then you can create a text file specifying the XADD and load it using the `XADD.import_xadd` method. It's important that, when you manually write down the XADD you have, you follow the same syntax rule as in the example file shown below.\n\nBelow is a part of the XADD written in [xaddpy/tests/ex/bool_cont_mixed.xadd](xaddpy/tests/ex/bool_cont_mixed.xadd):\n```\n...\n        ( [x - y <= 0]\n            ( [2 * x + y <= 0]\n                ([x])\n                ([y])\n            )\n            (b3\n                ([2 * x])\n                ([2 * y])\n            )\n        )\n...\n```\nHere, `[x-y <= 0]` defines a decision expression; its true branch is another node with the decision `[2 * x + y <= 0]`, while the decision of the false branch is a Boolean variable `b3`. Similarly, if `[2 * x + y <= 0]` holds true, then we get the leaf value `[x]`; otherwise, we get `[y]`. Inequality decisions and leaf values are wrapped with brackets, while you can directly put the variable name in the case of a Boolean decision. A Sympy `Symbol` object will be created for each unique variable.\n\nTo load this XADD, you can do the following:\n```python\nfrom xaddpy import XADD\ncontext = XADD()\nfname = 'xaddpy/tests/ex/bool_cont_mixed.xadd'\n\norig_xadd = context.import_xadd(fname)\n```\nFollowing the Java implementation, we call the instantiated XADD object `context`. This object maintains and manages all existing/new nodes and decision expressions. For example, `context._id_to_node` is a Python dictionary that stores mappings from node IDs (int) to the corresponding `Node` objects. For more information, please refer to the constructor of the `XADD` class.\n\nTo check whether you've got the right XADD imported, you can print it out.\n```python\nprint(f\"Imported XADD: \\n{context.get_repr(orig_xadd)}\")\n```\nThe `XADD.get_repr` method will return `repr(node)` and the string representation of each XADD node is implemented in [xaddpy/xadd/node.py](xaddpy/xadd/node.py). Beware that the printing method can be slow for a large XADD.\n\n### Recursively building an XADD\nAnother way of creating an initial XADD node is by recursively building it with the `apply` method. A very simple example would be something like this:\n\n```python\nfrom xaddpy import XADD\nimport sympy as sp\n\ncontext = XADD()\n\nx_id = context.convert_to_xadd(sp.Symbol('x'))\ny_id = context.convert_to_xadd(sp.Symbol('y'))\n\nsum_node_id = context.apply(x_id, y_id, op='add')\ncomp_node_id = context.apply(sum_node_id, y_id, op='min')\n\nprint(f\"Sum node:\\n{context.get_repr(sum_node_id)}\\n\")\nprint(f\"Comparison node:\\n{context.get_repr(comp_node_id)}\")\n```\nYou can check that the print output shows\n```\nSum node:\n( [x + y] ) node_id: 9\n\nComparison node:\n( [x <= 0] (dec, id): 10001, 10\n         ( [x + y] ) node_id: 9 \n         ( [y] ) node_id: 8 \n)\n```\nwhich is the expected outcome!\n\nCheck out a much more comprehensive example demonstrating the recursive construction of a nontrivial XADD from here: [pyRDDLGym/XADD/RDDLModelXADD.py](https://github.com/ataitler/pyRDDLGym/blob/01955ee7bca2861124709c116f419f2927c04a89/pyRDDLGym/XADD/RDDLModelXADD.py#L124).\n\n### Directly creating an XADD node\nFinally, you might want to build a constant node, an arbitrary decision expression, and a Boolean decision directly. To this end, let's consider building the following XADD: \n\n```\n([b]\n    ([1])\n    ([x + y <= 0]\n        ([0])\n        ([2])\n    )\n)\n```\n\nTo do this, we will first create an internal node whose decision is `[x + y <= 0]`, the low   and the high branches are `[0]` and `[2]` (respectively). Using Sympy's `S` function (or you can use `sympify`), you can turn an algebraic expression involving variables and numerics into a symbolic expression. Given this decision expression, you can get its unique index using `XADD.get_dec_expr_index` method. You can use the decision ID along with the ID of the low and high nodes connected to the decision to create the corresponding decision node, using `XADD.get_internal_node`.\n\n```python\nimport sympy as sp\nfrom xaddpy import XADD\n\ncontext = XADD()\n\n# Get the unique ID of the decision expression\ndec_expr: sp.Basic = sp.S('x + y <= 0')\ndec_id, is_reversed = context.get_dec_expr_index(dec_expr, create=True)\n\n# Get the IDs of the high and low branches: [0] and [2], respectively\nhigh: int = context.get_leaf_node(sp.S(0))\nlow: int = context.get_leaf_node(sp.S(2))\nif is_reversed:\n    low, high = high, low\n\n# Create the decision node with the IDs\ndec_node_id: int = context.get_internal_node(dec_id, low=low, high=high)\nprint(f\"Node created:\\n{context.get_repr(dec_node_id)}\")\n```\n\nNote that `XADD.get_dec_expr_index` returns a boolean variable `is_reversed` which is `False` if the canonical decision expression of the given decision has the same inequality direction. If the direction has changed, then `is_reversed=True`; in this case, low and high branches should be swapped.\n\nAnother way of creating this node is to use the `XADD.get_dec_node` method. This method can only be used when the low and high nodes are terminal nodes containing leaf expressions.\n\n```python\ndec_node_id = context.get_dec_node(dec_expr, low_val=sp.S(2), high_val=sp.S(0))\n```\n\nNote also that you need to wrap constants with the `sympy.S` function to turn them into `sympy.Basic` objects.\n\nNow, it remains to create a decision node with the Boolean variable `b` and connect it to its low and high branches. \n\n```python\nb = sp.Symbol('b', bool=True)\ndec_b_id, _ = context.get_dec_expr_index(b, create=True)\n```\n\nFirst of all, you need to provide `bool=True` as a keyword argument when instantiating a Sympy `Symbol` corresponding to a Boolean variable. When you instantiate multiple Boolean variables, you can use `b1, b2, b3 = sp.symbols('b1 b2 b3', bool=True)`. If you didn't specify `bool=True`, then the variable won't be recognized as a Boolean variable in XADD operations!\n\nOnce you have the decision ID, we can finally link this decision node with the node created earlier. \n\n```python\nhigh: int = context.get_leaf_node(sp.S(1))\nnode_id: int = context.get_internal_node(dec_b_id, low=dec_node_id, high=high)\nprint(f\"Node created:\\n{context.get_repr(node_id)}\")\n```\nAnd we get the following print outputs.\n```\nOutput:\nNode created:\n( [b]   (dec, id): 2, 9\n        ( [1] ) node_id: 1 \n        ( [x + y <= 0]  (dec, id): 10001, 8\n                ( [0] ) node_id: 0 \n                ( [2] ) node_id: 7 \n        )  \n) \n```\n\n### XADD Operations\n\n#### XADD.apply(id1: int, id2: int, op: str)\nYou can perform the `apply` operation to two XADD nodes with IDs `id1` and `id2`. Below is the list of the supported operators (`op`):\n\n**Non-Boolean operations**\n- 'max', 'min'\n- 'add', 'subtract'\n- 'prod', 'div'\n\n**Boolean operations**\n- 'and'\n- 'or'\n\n**Relational operations**\n- '!=', '=='\n- '>', '>='\n- '<', '<='\n\n#### XADD.unary_op(node_id: int, op: str) (unary operations)\nYou can also apply the following unary operators to a single XADD node recursively (also check `UNARY_OP` in [xaddpy/utils/global_vars.py](xaddpy/utils/global_vars.py)). In this case, an operator will be applied to each and every leaf value of a given node. Hence, the decision expressions will remain unchanged.\n\n- 'sin, 'cos', 'tan'\n- 'sinh', 'cosh', 'tanh'\n- 'exp', 'log', 'log2', 'log10', 'log1p'\n- 'floor', 'ceil'\n- 'sqrt', 'pow'\n- '-', '+'\n- 'sgn' (sign function... sgn(x) = 1 if x > 0; 0 if x == 0; -1 otherwise)\n- '~' (negation)\n\nThe `pow` operation requires an additional argument specifying the exponent.\n\n#### XADD.evaluate(node_id: int, bool_assign: dict, cont_assign: bool, primitive_type: bool)\nWhen you want to assign concrete values to Boolean and continuous variables, you can use this method. An example is provided in the `test_mixed_eval` function defined in [xaddpy/tests/test_bool_var.py](xaddpy/tests/test_bool_var.py).\n\nAs another example, let's say we want to evaluate the XADD node defined a few lines above.\n```python\nx, y = sp.symbols('x y')\n\nbool_assign = {b: True}\ncont_assign = {x: 2, y: -1}\n\nres = context.evaluate(node_id, bool_assign=bool_assign, cont_assign=cont_assign)\nprint(f\"Result: {res}\")\n```\n\nIn this case, `b=True` will directly leads to the leaf value of `1` regardless of the assignment given to `x` and `y` variables. \n\n```python\nbool_assign = {b: False}\nres = context.evaluate(node_id, bool_assign=bool_assign, cont_assign=cont_assign)\nprint(f\"Result: {res}\")\n```\n\nIf we change the value of `b`, we can see that we get `2`. Note that you have to make sure that all symbolic variables get assigned specific values; otherwise, the function will return `None`. \n\n#### XADD.substitute(node_id: int, subst_dict: dict)\nIf instead you want to assign values to a subset of symbolic variables while leaving the other variables as-is, you can use the `substitute` method. Similar to `evaluate`, you need to pass in a dictionary mapping Sympy `Symbol`s to their concrete values.\n\nFor example,\n\n```python\nsubst_dict = {x: 1}\nnode_id_after_subs = context.substitute(node_id, subst_dict)\nprint(f\"Result:\\n{context.get_repr(node_id_after_subs)}\")\n```\nwhich outputs\n```\nResult:\n( [b]   (dec, id): 2, 16\n        ( [1] ) node_id: 1 \n        ( [y + 1 <= 0]  (dec, id): 10003, 12\n                ( [0] ) node_id: 0 \n                ( [2] ) node_id: 7 \n        )  \n) \n```\nas expected. \n\n#### XADD.collect_vars(node_id: int)\nIf you want to extract all Boolean and continuous Sympy variables existing in an XADD node, you can use this method.\n\n```python\nvar_set = context.collect_vars(node_id)\nprint(f\"var_set: {var_set}\")\n```\n```\nOutput:\nvar_set: {y, b, x}\n```\n\nThis method can be useful to figure out which variables need to have values assigned in order to evaluate a given XADD node.\n\n#### XADD.make_canonical(node_id: int)\nThis method gives a canonical order to an XADD that is potentially unordered. Note that the `apply` method already calls `make_canonical` when the `op` is one of `('min', 'max', '!=', '==', '>', '>=', '<', '<=', 'or', 'and')`.\n\n\n## Citation\n\nPlease use the following bibtex for citations:\n\n```\n@InProceedings{pmlr-v162-jeong22a,\n  title = \t {An Exact Symbolic Reduction of Linear Smart {P}redict+{O}ptimize to Mixed Integer Linear Programming},\n  author =       {Jeong, Jihwan and Jaggi, Parth and Butler, Andrew and Sanner, Scott},\n  booktitle = \t {Proceedings of the 39th International Conference on Machine Learning},\n  pages = \t {10053--10067},\n  year = \t {2022},\n  volume = \t {162},\n  series = \t {Proceedings of Machine Learning Research},\n  month = \t {17--23 Jul},\n  publisher =    {PMLR},\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/jihwan-jeong/xaddpy/archive/refs/tags/0.1.13.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jihwan-jeong/xaddpy",
    "keywords": "xadd,xadd python,symbolic diagram",
    "license": "MIT License  Copyright (c) 2022 jihwan-jeong  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xaddpy",
    "package_url": "https://pypi.org/project/xaddpy/",
    "platform": null,
    "project_url": "https://pypi.org/project/xaddpy/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jihwan-jeong/xaddpy/issues",
      "Download": "https://github.com/jihwan-jeong/xaddpy/archive/refs/tags/0.1.13.tar.gz",
      "Homepage": "https://github.com/jihwan-jeong/xaddpy"
    },
    "release_url": "https://pypi.org/project/xaddpy/0.1.13/",
    "requires_dist": [
      "sympy",
      "numpy",
      "pulp",
      "psutil"
    ],
    "requires_python": ">=3.8",
    "summary": "XADD package in Python",
    "version": "0.1.13",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17405366,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6e8b897e147e5c464ab6c99f06e2bb2e253e10875408af1e11ec71804e5307d",
          "md5": "d2e8e445008d4db743fb52c6c1990f94",
          "sha256": "65976941d74de9e1a66c971db643d24c5b518549975e8fa96dd364ef81b49153"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d2e8e445008d4db743fb52c6c1990f94",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32902,
        "upload_time": "2022-12-03T20:39:11",
        "upload_time_iso_8601": "2022-12-03T20:39:11.530269Z",
        "url": "https://files.pythonhosted.org/packages/e6/e8/b897e147e5c464ab6c99f06e2bb2e253e10875408af1e11ec71804e5307d/xaddpy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cedac7db76951bb987980d1db00034a9c9206386c8abf7dd834901a2bde817ba",
          "md5": "c10f43fee73487a26f66a094d9e81127",
          "sha256": "b2057b1755097999e438689b566a6b222825d22bcb5d4514f18f46f0043db23c"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c10f43fee73487a26f66a094d9e81127",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32900,
        "upload_time": "2022-12-03T20:44:48",
        "upload_time_iso_8601": "2022-12-03T20:44:48.551355Z",
        "url": "https://files.pythonhosted.org/packages/ce/da/c7db76951bb987980d1db00034a9c9206386c8abf7dd834901a2bde817ba/xaddpy-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13419246de9925b5844bd95792db81372b42e0945076d03aaefb98748eb5eaac",
          "md5": "7948c4fd4cabb6a37620dc17cccaab8a",
          "sha256": "481edac5425bf68f544c91eb32f27ea27c177af3bbf64008a2b5154df995d056"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7948c4fd4cabb6a37620dc17cccaab8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 41342,
        "upload_time": "2023-01-19T14:14:46",
        "upload_time_iso_8601": "2023-01-19T14:14:46.457618Z",
        "url": "https://files.pythonhosted.org/packages/13/41/9246de9925b5844bd95792db81372b42e0945076d03aaefb98748eb5eaac/xaddpy-0.1.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd87686cc90bb8f92a00dfd0d00115ca749d0683a8d21222a4a851c550755482",
          "md5": "acb3e7df26b367c49a6dc3575fea8cb7",
          "sha256": "0a162f4425841b45dba6ae8425e1d90e04197c2f4d29ceed876bc20a6c30d914"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "acb3e7df26b367c49a6dc3575fea8cb7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 43118,
        "upload_time": "2023-01-19T14:14:48",
        "upload_time_iso_8601": "2023-01-19T14:14:48.028899Z",
        "url": "https://files.pythonhosted.org/packages/cd/87/686cc90bb8f92a00dfd0d00115ca749d0683a8d21222a4a851c550755482/xaddpy-0.1.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ba967c9d5a554881d9df9d69b588040d9340f223c564deb9656dc5e96150952",
          "md5": "5c8650607384a346027b3bcfab933caa",
          "sha256": "4072540f017fd874d3d3bf0874fe21d9160e54e4653dace45b819d2be681635f"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c8650607384a346027b3bcfab933caa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 41360,
        "upload_time": "2023-01-19T18:03:33",
        "upload_time_iso_8601": "2023-01-19T18:03:33.223234Z",
        "url": "https://files.pythonhosted.org/packages/8b/a9/67c9d5a554881d9df9d69b588040d9340f223c564deb9656dc5e96150952/xaddpy-0.1.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6e6d34a8fae5f34a012723cbd58244cf65f2c4cd59c1c576a25e6474a20279b",
          "md5": "a128841be1cbd1c19e241efa716292fb",
          "sha256": "d88125376ddca77082045b13857cc9b581108d9e97cb9bfbd64782cad3b713a9"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.11.tar.gz",
        "has_sig": false,
        "md5_digest": "a128841be1cbd1c19e241efa716292fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 43160,
        "upload_time": "2023-01-19T18:03:35",
        "upload_time_iso_8601": "2023-01-19T18:03:35.436049Z",
        "url": "https://files.pythonhosted.org/packages/e6/e6/d34a8fae5f34a012723cbd58244cf65f2c4cd59c1c576a25e6474a20279b/xaddpy-0.1.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be329e742cc108d531354d30ed01814414c1f8a7b172fcb26d95ac7745aeff9e",
          "md5": "2c48dec4bb42fc386d1e83a0d06478fd",
          "sha256": "48e3c9d6a968d76e5e0d3820ed966a090770dc24b1cb3d10b011bba52bcf2995"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c48dec4bb42fc386d1e83a0d06478fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 41467,
        "upload_time": "2023-03-16T03:09:32",
        "upload_time_iso_8601": "2023-03-16T03:09:32.612326Z",
        "url": "https://files.pythonhosted.org/packages/be/32/9e742cc108d531354d30ed01814414c1f8a7b172fcb26d95ac7745aeff9e/xaddpy-0.1.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c475c58d44de2066a339002f11a915dc57715c8e0e0598ff47e1548f0fd6959a",
          "md5": "717b22c37d04e0d417f7257a4cbb7490",
          "sha256": "eec9c038451af6eddd660e32e13849cc27570dcb2aff9ddd74132cd0363e6fdf"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "717b22c37d04e0d417f7257a4cbb7490",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 43285,
        "upload_time": "2023-03-16T03:09:34",
        "upload_time_iso_8601": "2023-03-16T03:09:34.935978Z",
        "url": "https://files.pythonhosted.org/packages/c4/75/c58d44de2066a339002f11a915dc57715c8e0e0598ff47e1548f0fd6959a/xaddpy-0.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c63ce1b17e93fe827956cb9c50be58a760ec2396a9034cda73c05c7a331c752",
          "md5": "2fa20c2af5157014de51c57cbe21b55b",
          "sha256": "8bdf0e466596b1558218baff88a9a4024e067c4843cf8b4b1680b6b8226165c5"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fa20c2af5157014de51c57cbe21b55b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 41557,
        "upload_time": "2023-03-22T22:42:49",
        "upload_time_iso_8601": "2023-03-22T22:42:49.816404Z",
        "url": "https://files.pythonhosted.org/packages/1c/63/ce1b17e93fe827956cb9c50be58a760ec2396a9034cda73c05c7a331c752/xaddpy-0.1.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b89da9ec829eaa12c4ef3c442b63d1b44357cc18f35528eaaa578aae781f461a",
          "md5": "ed0ad03dc51ea1a84aa2c5b83e4fe994",
          "sha256": "f9cd37249ee43f40f681e613589d8d7fe62aa9c8c7739610c3e63fac0b670773"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "ed0ad03dc51ea1a84aa2c5b83e4fe994",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 43364,
        "upload_time": "2023-03-22T22:42:51",
        "upload_time_iso_8601": "2023-03-22T22:42:51.436930Z",
        "url": "https://files.pythonhosted.org/packages/b8/9d/a9ec829eaa12c4ef3c442b63d1b44357cc18f35528eaaa578aae781f461a/xaddpy-0.1.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27588a6b02c7bdb618cfb29ce11f9f55c0d743a95eb678327baab6cb5f686dd5",
          "md5": "cca0ec43d83538898b9760d4c1483d93",
          "sha256": "30106a29187daab037113e2c2cbcacf7f6c5bcbd66b5561740048dbe3818ea1a"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cca0ec43d83538898b9760d4c1483d93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32909,
        "upload_time": "2022-12-03T21:20:58",
        "upload_time_iso_8601": "2022-12-03T21:20:58.503661Z",
        "url": "https://files.pythonhosted.org/packages/27/58/8a6b02c7bdb618cfb29ce11f9f55c0d743a95eb678327baab6cb5f686dd5/xaddpy-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4348e0edd7cba0c2647b04bce3e43c561b193c39bfa217c37f1a9f93ea505b53",
          "md5": "404257c2ca3db1f801246e4aa2ee7ff4",
          "sha256": "08e25a3e24ef28f214213b99188dbea23f7272c1cd424ce58c8668110114e046"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "404257c2ca3db1f801246e4aa2ee7ff4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 35124,
        "upload_time": "2022-12-16T03:02:22",
        "upload_time_iso_8601": "2022-12-16T03:02:22.132715Z",
        "url": "https://files.pythonhosted.org/packages/43/48/e0edd7cba0c2647b04bce3e43c561b193c39bfa217c37f1a9f93ea505b53/xaddpy-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f688c2e3d938fef1ad7c2a04684811cd3a3cb62c583b3beb6eb9be6623f32439",
          "md5": "3f128b5bc34326137aa037037f8f6202",
          "sha256": "9769acc9b9df67f5560f52c628ad186e4284ecf7624a8f51b70ba8a55fb992d4"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3f128b5bc34326137aa037037f8f6202",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 33150,
        "upload_time": "2022-12-16T03:02:23",
        "upload_time_iso_8601": "2022-12-16T03:02:23.602937Z",
        "url": "https://files.pythonhosted.org/packages/f6/88/c2e3d938fef1ad7c2a04684811cd3a3cb62c583b3beb6eb9be6623f32439/xaddpy-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19a4126b6f9b2778efaa39278bf0ff679c3897bec47a6bc4f7e062090d7239db",
          "md5": "f335dce717c0a66843025dd239f409be",
          "sha256": "148dad0e9567a13c80f463d4a136a0eb4397a5de956ca0d2e19361ed00171c9f"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f335dce717c0a66843025dd239f409be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2910,
        "upload_time": "2022-12-17T03:02:06",
        "upload_time_iso_8601": "2022-12-17T03:02:06.742417Z",
        "url": "https://files.pythonhosted.org/packages/19/a4/126b6f9b2778efaa39278bf0ff679c3897bec47a6bc4f7e062090d7239db/xaddpy-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a06e22ff5721d79dd4e3c460867ab8d7171e622f420796624df9be7c9a7467f5",
          "md5": "648419b0e62457916cf6ba9c7eae89c9",
          "sha256": "54c1df47dc75946d0299f013e1be898a73e658ab71b3144610a79b9e3ccb264b"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "648419b0e62457916cf6ba9c7eae89c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2908,
        "upload_time": "2022-12-17T03:17:29",
        "upload_time_iso_8601": "2022-12-17T03:17:29.001750Z",
        "url": "https://files.pythonhosted.org/packages/a0/6e/22ff5721d79dd4e3c460867ab8d7171e622f420796624df9be7c9a7467f5/xaddpy-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6594a5482881af8cbc668dae0b6821094b1e4f0d4cdfd32ee29eb827339c1014",
          "md5": "81d55753ec8c196aa596772bc750e93c",
          "sha256": "a25bbc6067e52fd2c47d5729a5c7a5510a72f65cf1ccd1af023f3bbb940702c4"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81d55753ec8c196aa596772bc750e93c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 35755,
        "upload_time": "2022-12-17T03:28:19",
        "upload_time_iso_8601": "2022-12-17T03:28:19.567924Z",
        "url": "https://files.pythonhosted.org/packages/65/94/a5482881af8cbc668dae0b6821094b1e4f0d4cdfd32ee29eb827339c1014/xaddpy-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2874ed9695c04ec4e9b65ee343c99bd2fb106874af2389f00861df48265051d6",
          "md5": "b17ee293b3767daa8537d1de7a19099e",
          "sha256": "c3a796fc6fe0d22c2652b0b38c3d3725c3d32f2b963d722c349424996f9d03c2"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b17ee293b3767daa8537d1de7a19099e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 37222,
        "upload_time": "2022-12-17T04:26:08",
        "upload_time_iso_8601": "2022-12-17T04:26:08.171997Z",
        "url": "https://files.pythonhosted.org/packages/28/74/ed9695c04ec4e9b65ee343c99bd2fb106874af2389f00861df48265051d6/xaddpy-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51f4b86791db6a7e69b7e11767a3395508f1e2a7576db89dd5228a1ceee299bd",
          "md5": "47ea1fd4c74504173e8c700c56edf948",
          "sha256": "6f89fd50291e54249253581cb400d50c943edcb539ec0050e97d18a4acf37cbb"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47ea1fd4c74504173e8c700c56edf948",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 38874,
        "upload_time": "2023-01-18T14:34:14",
        "upload_time_iso_8601": "2023-01-18T14:34:14.654479Z",
        "url": "https://files.pythonhosted.org/packages/51/f4/b86791db6a7e69b7e11767a3395508f1e2a7576db89dd5228a1ceee299bd/xaddpy-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2090e7ea0657b663e5ff61c88a10bb94ed63c06336fb9438776f74da1c77c4d1",
          "md5": "6b88faee6a9f5510c8a9679a0dbfee76",
          "sha256": "6ee84f803a534cdba733908bcde997f2581db1d052385f0b8b691acff2d69ea0"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "6b88faee6a9f5510c8a9679a0dbfee76",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 38504,
        "upload_time": "2023-01-18T14:34:16",
        "upload_time_iso_8601": "2023-01-18T14:34:16.446455Z",
        "url": "https://files.pythonhosted.org/packages/20/90/e7ea0657b663e5ff61c88a10bb94ed63c06336fb9438776f74da1c77c4d1/xaddpy-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eead165ac88e6320af75492b6d654f92fd491de9d084c7433cc840a9aa5b8e37",
          "md5": "c5e52a9c9d35ead3e6874b530623067d",
          "sha256": "c912e68d29491aa85b411bf4c42f28a112022a8d9a84b61c2c4685d1a873cdde"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5e52a9c9d35ead3e6874b530623067d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 39099,
        "upload_time": "2023-01-18T15:12:53",
        "upload_time_iso_8601": "2023-01-18T15:12:53.537640Z",
        "url": "https://files.pythonhosted.org/packages/ee/ad/165ac88e6320af75492b6d654f92fd491de9d084c7433cc840a9aa5b8e37/xaddpy-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a27e0091d45a4449b844ad0f094201e201adb58184142ce83f663d89bd284162",
          "md5": "cd950a94aa562b1d2ab0f7f6e7ec95b7",
          "sha256": "3f4bea3fde3813def888516c043fada440f3e70d67698389e9a513c5c9d499be"
        },
        "downloads": -1,
        "filename": "xaddpy-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "cd950a94aa562b1d2ab0f7f6e7ec95b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 38700,
        "upload_time": "2023-01-18T15:12:55",
        "upload_time_iso_8601": "2023-01-18T15:12:55.361967Z",
        "url": "https://files.pythonhosted.org/packages/a2/7e/0091d45a4449b844ad0f094201e201adb58184142ce83f663d89bd284162/xaddpy-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1c63ce1b17e93fe827956cb9c50be58a760ec2396a9034cda73c05c7a331c752",
        "md5": "2fa20c2af5157014de51c57cbe21b55b",
        "sha256": "8bdf0e466596b1558218baff88a9a4024e067c4843cf8b4b1680b6b8226165c5"
      },
      "downloads": -1,
      "filename": "xaddpy-0.1.13-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2fa20c2af5157014de51c57cbe21b55b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 41557,
      "upload_time": "2023-03-22T22:42:49",
      "upload_time_iso_8601": "2023-03-22T22:42:49.816404Z",
      "url": "https://files.pythonhosted.org/packages/1c/63/ce1b17e93fe827956cb9c50be58a760ec2396a9034cda73c05c7a331c752/xaddpy-0.1.13-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b89da9ec829eaa12c4ef3c442b63d1b44357cc18f35528eaaa578aae781f461a",
        "md5": "ed0ad03dc51ea1a84aa2c5b83e4fe994",
        "sha256": "f9cd37249ee43f40f681e613589d8d7fe62aa9c8c7739610c3e63fac0b670773"
      },
      "downloads": -1,
      "filename": "xaddpy-0.1.13.tar.gz",
      "has_sig": false,
      "md5_digest": "ed0ad03dc51ea1a84aa2c5b83e4fe994",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 43364,
      "upload_time": "2023-03-22T22:42:51",
      "upload_time_iso_8601": "2023-03-22T22:42:51.436930Z",
      "url": "https://files.pythonhosted.org/packages/b8/9d/a9ec829eaa12c4ef3c442b63d1b44357cc18f35528eaaa578aae781f461a/xaddpy-0.1.13.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}