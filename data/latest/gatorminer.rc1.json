{
  "info": {
    "author": "Enpu You",
    "author_email": "youe2@allegheny.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# GatorMiner\n\n[![Build Status](https://travis-ci.com/Allegheny-Ethical-CS/GatorMiner.svg?branch=master)](https://travis-ci.com/Allegheny-Ethical-CS/GatorMiner)\n[![codecov](https://codecov.io/gh/Allegheny-Ethical-CS/GatorMiner/branch/master/graph/badge.svg)](https://codecov.io/gh/Allegheny-Ethical-CS/GatorMiner)\n[![Built with spaCy](https://img.shields.io/badge/built%20with-spaCy-09a3d5.svg)](https://spacy.io)\n[![Built with Streamlit](https://img.shields.io/badge/built%20with-Streamlit-09a3d5.svg)](https://www.streamlit.io/)\n\nAn automated text-mining tool written in Python to measure the technical\nresponsibility of students in computer science courses, being used to analyze\nstudents' markdown reflection documents and five questions survey based on\nNatural Language Processing in the Department of Computer Science at Allegheny\nCollege.\n\n## Installation\n\nYou can clone the repository by running the following command:\n\n```bash\ngit clone git@github.com:Allegheny-Ethical-CS/GatorMiner.git\n```\n\n`cd` into the project root folder:\n\n```bash\ncd GatorMiner\n```\n\nThis program uses [Pipenv](https://github.com/pypa/pipenv) for dependency management.\n\n- If needed, install and upgrade the `pipenv` with `pip`:\n\n  ```bash\n  pip install pipenv -U\n  ```\n\n- To create a default virtual environment and use the program:\n\n  ```bash\n  pipenv install\n  ```\n\nGatorMiner relies on `en_core_web_sm` and/or `en_core_web_md`, English models\ntrained on written web text (blogs, news, comments) that includes vocabulary,\nvectors, syntax and entities.\n\nTo install the pre-trained model, you can run (one of) the following commands:\n\n```bash\npipenv run python -m spacy download en_core_web_sm\npipenv run python -m spacy download en_core_web_md\n```\n\n## Web Interface\n\nGatorMiner is mainly developed on its web interface with [Streamlit](https://www.streamlit.io)\nin order to provide fast text analysis and visualizations.\n\nIn order to run the `Streamlit` interface, type and execute the following command\nin your terminal:\n\n```bash\npipenv run streamlit run streamlit_web.py\n```\n\nYou then will see something like this in your terminal window:\n\n```bash\nYou can now view your Streamlit app in your browser.\n\nLocal URL: http://localhost:8501\nNetwork URL: http://xxx.xxx.x.x:8501\n```\n\nThe web interface will be automatically opened in your browser:\n\n<img src=\"resources/images/landing_page.png\" alt=\"browser\" style=\"width:100%\"/>\n\n### Data Retreiving\n\nThere are currently two ways to import text data for analysis: through local\nfile system or AWS DynamoDB.\n\n#### Local File System\n\nYou can type in the path(s) to the directorie(s) that hold reflection markdown\ndocuments. You are welcome to try the tool with the sample documents we\nprovided in `resources`, for example:\n\n```shell\nresources/sample_md_reflections/lab1, resources/sample_md_reflections/lab2, resources/sample_md_reflections/lab3\n```\n\n#### AWS\n\nRetrieving reflection documents from AWS is a feature integrated with the use\nof [GatorGrader](https://github.com/GatorEducator/gatorgrader) where students'\nmarkdown reflection documents are being collected and stored inside the a\npre-configured DynamoDB database. In order to use this feature, you will need\nto have some credential tokens (listed below) stored as environment variables:\n\n```bash\nexport GATOR_ENDPOINT=<Your Endpoint>\nexport GATOR_API_KEY=<Your API Key>\nexport AWS_ACCESS_KEY_ID=<Your Access Key ID>\nexport AWS_SECRET_ACCESS_KEY=<Your Secret Access Key>\n```\n\nIt is likely that you already have these prepared when using GatorMiner in\nconjunction with GatorGrader, since these would already be exported when\nsetting up the AWS services. You can read more about setting up an AWS service\nwith GatorGrader [here](https://github.com/enpuyou/script-api-lambda-dynamodb).\n\nOnce the documents are successfully imported, you can then navigate through\nthe select box in the sidebar to view the text analysis:\n\n<img src=\"resources/images/select_box.png\" alt=\"select box\" style=\"width:100%\"/>\n\n##### Reflection Documents\n\nWe are using markdown format for the student reflection documents.\nIts organized structure allows us to parse and perform text analysis easily.\nWith that said, there are few requirements for the reflection document before it\ncould be seamlessly processed and analyzed with GatorMiner. A\n[template](resources/reflection_template.md) is provided within the repo. Note\nthat the headers with the assignment's and student's ID/name are required.\nGatorMiner is set in default to take the first header as assignment name and the\nsecond header as student name.\n\nYou can also check out the\n[sample json report](resources/sample_json_report/report%201.json) to see the\nformat of json reports GatorMiner gathers from AWS.\n\n### Analysis\n\n<img src=\"resources/images/frequency.png\" alt=\"frequency\" style=\"width:100%\"/>\n<img src=\"resources/images/sentiment.png\" alt=\"sentiment\" style=\"width:100%\"/>\n<img src=\"resources/images/similarity.png\" alt=\"similarity\" style=\"width:100%\"/>\n<img src=\"resources/images/topic.png\" alt=\"topic\" style=\"width:100%\"/>\n\n### Contribution\n\nWe are excited that you would take the time to contribute to GatorMiner! We have\nprovided a [contributing guideline](CONTRIBUTING.md) that will help you\neffectively get started and make contributions to the project.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Allegheny-Ethical-CS/GatorMiner",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "GatorMiner",
    "package_url": "https://pypi.org/project/GatorMiner/",
    "platform": "",
    "project_url": "https://pypi.org/project/GatorMiner/",
    "project_urls": {
      "Homepage": "https://github.com/Allegheny-Ethical-CS/GatorMiner"
    },
    "release_url": "https://pypi.org/project/GatorMiner/1.0.0/",
    "requires_dist": [
      "Git",
      "Pipenv",
      "en-core-web-sm",
      "en-core-web-md"
    ],
    "requires_python": "",
    "summary": "An automatic text mining tool",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10087466,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55e2132f30b856675a7fcbd0470f1dd86156f6fcb16ffd2f3c7ed5ed2420f0ba",
          "md5": "ccc5e4f1f29d522bc33cbcc332b5e0c4",
          "sha256": "6687614f7da5da7993df559e6207d73af59056bdfa3d3a09bd2b9f6960214d25"
        },
        "downloads": -1,
        "filename": "GatorMiner-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ccc5e4f1f29d522bc33cbcc332b5e0c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15977,
        "upload_time": "2021-04-16T18:03:25",
        "upload_time_iso_8601": "2021-04-16T18:03:25.586199Z",
        "url": "https://files.pythonhosted.org/packages/55/e2/132f30b856675a7fcbd0470f1dd86156f6fcb16ffd2f3c7ed5ed2420f0ba/GatorMiner-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad1061314881f39a4c029655da114a6a9dd19ae6bdb5161642be22d64b632d65",
          "md5": "979ca447edfe672a539433618099cbb6",
          "sha256": "af3e9bd3e8fba7df585399dfafa7718f344138d368c411ced987cf463a3b0822"
        },
        "downloads": -1,
        "filename": "GatorMiner-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "979ca447edfe672a539433618099cbb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12777,
        "upload_time": "2021-04-16T18:03:27",
        "upload_time_iso_8601": "2021-04-16T18:03:27.091043Z",
        "url": "https://files.pythonhosted.org/packages/ad/10/61314881f39a4c029655da114a6a9dd19ae6bdb5161642be22d64b632d65/GatorMiner-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55e2132f30b856675a7fcbd0470f1dd86156f6fcb16ffd2f3c7ed5ed2420f0ba",
        "md5": "ccc5e4f1f29d522bc33cbcc332b5e0c4",
        "sha256": "6687614f7da5da7993df559e6207d73af59056bdfa3d3a09bd2b9f6960214d25"
      },
      "downloads": -1,
      "filename": "GatorMiner-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ccc5e4f1f29d522bc33cbcc332b5e0c4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15977,
      "upload_time": "2021-04-16T18:03:25",
      "upload_time_iso_8601": "2021-04-16T18:03:25.586199Z",
      "url": "https://files.pythonhosted.org/packages/55/e2/132f30b856675a7fcbd0470f1dd86156f6fcb16ffd2f3c7ed5ed2420f0ba/GatorMiner-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad1061314881f39a4c029655da114a6a9dd19ae6bdb5161642be22d64b632d65",
        "md5": "979ca447edfe672a539433618099cbb6",
        "sha256": "af3e9bd3e8fba7df585399dfafa7718f344138d368c411ced987cf463a3b0822"
      },
      "downloads": -1,
      "filename": "GatorMiner-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "979ca447edfe672a539433618099cbb6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12777,
      "upload_time": "2021-04-16T18:03:27",
      "upload_time_iso_8601": "2021-04-16T18:03:27.091043Z",
      "url": "https://files.pythonhosted.org/packages/ad/10/61314881f39a4c029655da114a6a9dd19ae6bdb5161642be22d64b632d65/GatorMiner-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}