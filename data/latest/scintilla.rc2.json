{
  "info": {
    "author": "GonÃ§alo Castro",
    "author_email": "goncaloccastro@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Scintilla\n\n---\n\nScintilla is a small Python library that makes use of Faker to generate multiple DataFrames \nthat can then be used for property based testing.\n\nIf you're looking for a library to test DataFrame assertions I recommend using \nthe [chispa](https://github.com/MrPowers/chispa) library as it contains several methods to help in comparing DataFrames.\n\n## DataFrame Generator\n\nThis module lets you create DataFrames, according to a schema, with fake synthetic data (using Faker) so that \nyou can either use it in your tests or make use of property based testing (explained further down).\n\nThe starting point is the DataFrameGenerator data class, and it can be created by doing the following:\n\n```python\ndf_gen: DataFrameGenerator = DataFrameGenerator(schema=schema)\n```\n\nWhere the schema is a StructType object like the following:\n\n```python\nschema: StructType = StructType([\n    StructField(\"expected_name\", StringType(), True),\n    StructField(\"int\", IntegerType(), True),\n    StructField(\"long\", LongType(), True),\n    StructField(\"byte\", ByteType(), True),\n    StructField(\"short\", ShortType(), True),\n    StructField(\"double\", DoubleType(), True),\n    StructField(\"float\", FloatType(), True),\n    StructField(\"decimal\", DecimalType(), True),\n    StructField(\"bool\", BooleanType(), True),\n    StructField(\"binary\", BinaryType(), True),\n    StructField(\"date\", DateType(), True),\n    StructField(\"timestamp\", TimestampType(), True)\n])\n```\n\nThose are the supported types right now, each of those types has a matching Faker provider in the `DEFAULT_CONFIG` dictionary:\n\n```python\nDEFAULT_CONFIG: dict = {\n    \"StringType\": {\"provider\": \"pystr\"},\n    \"ByteType\": {\"provider\": \"pyint\", \"kwargs\": {\"min_value\": -128, \"max_value\": 127}},\n    \"ShortType\": {\"provider\": \"pyint\", \"kwargs\": {\"min_value\": -32768, \"max_value\": 32767}},\n    \"IntegerType\": {\"provider\": \"pyint\", \"kwargs\": {\"min_value\": -2147483648, \"max_value\": 2147483647}},\n    \"LongType\": {\"provider\": \"pyint\", \"kwargs\": {\"min_value\": -9223372036854775808, \"max_value\": 9223372036854775807}},\n    \"DoubleType\": {\"provider\": \"pyfloat\"},\n    \"FloatType\": {\"provider\": \"pyfloat\"},\n    \"DecimalType(10,0)\": {\"provider\": \"pydecimal\", \"kwargs\": {\"left_digits\": 10, \"right_digits\": 0}},\n    \"DateType\": {\"provider\": \"date_object\"},\n    \"TimestampType\": {\"provider\": \"date_time\"},\n    \"BooleanType\": {\"provider\": \"pybool\"},\n    \"BinaryType\": {\"provider\": \"binary\", \"kwargs\": {\"length\": 64}}\n}\n```\n\nCalling the method `arbitrary_dataframes` from the DataFrameGenerator will give you a Python generator of \nDataFrames (default is 10 DataFrames) with rows filled with fake data (default is 10 rows).\n\nFor instance, the following code:\n\n```python\nschema: StructType = StructType([\n    StructField(\"string\", StringType(), True),\n    StructField(\"int\", IntegerType(), True),\n    StructField(\"date\", DateType(), True)\n])\ndf_gen: DataFrameGenerator = DataFrameGenerator(schema=schema)\nfor df in df_gen.arbitrary_dataframes():\n    df.show()\n```\n\nwill result in:\n\n```shell\n+--------------------+-----------+----------+\n|              string|        int|      date|\n+--------------------+-----------+----------+\n|athKDRmDyDoOFTtMyEpS|  208977570|1998-10-05|\n|KsiKWhuWhrxwjIfZObWE|   36536111|2009-02-07|\n|yBnbHFvtUaMITurvzgGa|-1150452234|1975-06-04|\n|hJgwshOrnGuOVYSHiQvT| -394148922|1996-09-03|\n|RRwPfXMSXfwPTpEbCCYd|-2126030849|2020-11-01|\n|NxjZLvalBmUxlHCCdvRS| -868167137|2017-01-09|\n|OCKxJFjEWnXFLTnmxlAL|  378510418|2004-09-08|\n|FcPQoSKsaWtkVAtsHtmE|-1778979182|1976-06-08|\n|gGLrGwLlHQUJgqLoHscd|-1707952693|1975-07-04|\n|OQfOJfUAqYMdoDKyIODt| 2042919219|1974-08-18|\n+--------------------+-----------+----------+\n\n+--------------------+-----------+----------+\n|              string|        int|      date|\n+--------------------+-----------+----------+\n|YdBiqoUTPchuiVVCToYb|  837577396|2011-10-20|\n|ENUTmYcJbIlAHXdXrlcK| 1965683018|1999-06-11|\n|qkYABZaLxKSTSKULvJUn|-1534538904|2007-07-21|\n|IBekMJxdILbHrseyELjI| -778855686|1995-02-21|\n|eOeDuqcyQrmMKyHsdIqi| 2062228449|2021-04-24|\n|gvdnhvZEWHxjdVOCNVNO|  634606029|1988-07-28|\n|XPooEkKLCsdDBBDPBxdw| 1147520365|2010-10-26|\n|QuyvBSnhmNDFViNtZloD| -615531044|1988-11-11|\n|wfNVuyjNwLOlIMILwEyY|    -438993|1998-05-08|\n|vGqmOojchnEBiFUrIyEF|-1961143065|1995-10-13|\n+--------------------+-----------+----------+\n.\n.\n.\n```\n\nYou can also make use of the `seed` parameter to always get the same results, could be beneficial in some test cases.\n\nAnd, more importantly, you can make use of the `config` parameter to make sure the fake data in the DataFrames is as close \nto the actual data you use.\n\nFor instance, the following:\n\n```python\nschema: StructType = StructType([\n    StructField(\"bank_account_number\", StringType(), True),\n    StructField(\"string\", StringType(), True)\n])\n\nconfig: dict = {\n    \"string\": {\n        \"data_type\": StringType(),\n        \"provider\": \"random_element\",\n        \"kwargs\": {\n            \"elements\": ('x', 'y')\n        },\n    },\n    \"bank_account_number\": {\n        \"data_type\": StringType(),\n        \"provider\": \"iban\",\n    }\n}\n\ndf_gen: DataFrameGenerator = DataFrameGenerator(schema=schema, config=config)\nfor df in df_gen.arbitrary_dataframes():\n    df.show(truncate=False)\n```\n\nwill result in:\n\n```shell\n+----------------------+------+\n|bank_account_number   |string|\n+----------------------+------+\n|GB05ZPOQ53062662223126|x     |\n|GB30FBEP02205427369768|y     |\n|GB77ZVZD72401097292467|y     |\n|GB37ZAUF42921111575037|x     |\n|GB94YOYW99106454150303|x     |\n|GB45AHZD58341571053644|y     |\n|GB49NIWO23000421077097|y     |\n|GB57KKMR90126850543238|x     |\n|GB36MJSE75788716032200|y     |\n|GB09WQRG06056962875254|x     |\n+----------------------+------+\n\n+----------------------+------+\n|bank_account_number   |string|\n+----------------------+------+\n|GB05DOHQ75315263055315|x     |\n|GB97WKAZ86167865050998|x     |\n|GB74FNSZ74818713531062|y     |\n|GB09RNUK49954795362800|x     |\n|GB52EKEI43974684705487|y     |\n|GB71CMIO65098526908411|y     |\n|GB21FRNR40256327200553|y     |\n|GB78TPWY70848987416423|x     |\n|GB72FOTB13893525853918|x     |\n|GB88ZPWG41923933222632|y     |\n+----------------------+------+\n.\n.\n.\n```\n\nThe other useful functionality of the DataFrameGenerator is that it can have a transformer function applied to the DataFrames,\nperhaps you have a certain transformation that you would like to run over your DataFrame, if so you can pass this function to\nthe DataFrameGenerator, and it will then run it over the DataFrames and the iterator returned from the `arbitrary_dataframes`\nmethod will now be DataFrames with that transformation applied.\n\nFor instance, the following:\n\n```python\nschema: StructType = StructType([\n    StructField(\"string\", StringType(), True),\n    StructField(\"number1\", IntegerType(), True),\n    StructField(\"number2\", IntegerType(), True),\n])\n\ndef transformation(df: DataFrame) -> DataFrame:\n    return df.withColumn(\"number_sum\", col(\"number1\") + col(\"number2\")).limit(2)\n\ndf_gen: DataFrameGenerator = DataFrameGenerator(schema=schema, transformer=transformation)\nfor df in df_gen.arbitrary_dataframes():\n    df.show(truncate=False)\n```\n\nof course, a simple transformation can be in lambda form as well:\n\n```python\ndf_gen: DataFrameGenerator = DataFrameGenerator(schema=schema, transformer=lambda df: df.withColumn(\"number_sum\", col(\"number1\") + col(\"number2\")).limit(2))\n```\n\nwill result in:\n\n```shell\n+--------------------+-----------+----------+----------+\n|string              |number1    |number2   |number_sum|\n+--------------------+-----------+----------+----------+\n|hfvXIxpHYWmeozQCgDdb|-404644089 |1391745093|987101004 |\n|JMeuXcnlUBMabyYkckdL|-1019120536|1893116782|873996246 |\n+--------------------+-----------+----------+----------+\n\n+--------------------+-----------+-----------+----------+\n|string              |number1    |number2    |number_sum|\n+--------------------+-----------+-----------+----------+\n|IuGgFufcEWilkamohglP|-1867212230|-1935661407|492093659 |\n|rhsttgaKKcWcMVRCSGIk|1412079017 |16007381   |1428086398|\n+--------------------+-----------+-----------+----------+\n\n+--------------------+-----------+-----------+-----------+\n|string              |number1    |number2    |number_sum |\n+--------------------+-----------+-----------+-----------+\n|RmihqKGAtoNxmofMNLms|-1729443426|377528902  |-1351914524|\n|ZFScHJstlfOpJlvFFKmT|-2142767718|-1554653988|597545590  |\n+--------------------+-----------+-----------+-----------+\n.\n.\n.\n```\n\n## Property Based Testing Approach\n\nAlthough far from mature, the code here is a good starting point and hopefully can only be made better, this approach\ntakes inspiration from the work done by [Holden Karau](https://github.com/holdenk) in the [spark-testing-base](https://github.com/holdenk/spark-testing-base) repository.\nYou can check the wiki for that [DataFrameGenerator](https://github.com/holdenk/spark-testing-base/wiki/DataFrameGenerator) and see how the scala solution is done there.\nHere the approach to property based testing is similar.\n\nThere are two methods in the dataframe_generator module, `for_all` and `check_property` that you can make use of to do property checks.\n\nFor instance, the following simple test:\n\n```python\ndef test_that_passes(self):\n    schema: StructType = StructType([\n        StructField(\"string\", StringType(), True),\n        StructField(\"number1\", IntegerType(), True),\n        StructField(\"number2\", IntegerType(), True),\n    ])\n\n    def transformation(df: DataFrame) -> DataFrame:\n        return df.withColumn(\"number_sum\", col(\"number1\") + col(\"number2\")).limit(2)\n\n    df_gen: DataFrameGenerator = DataFrameGenerator(schema=schema, transformer=transformation)\n\n    new_data_schema: StructType = StructType([\n        StructField(\"string\", StringType(), True),\n        StructField(\"number1\", IntegerType(), True),\n        StructField(\"number2\", IntegerType(), True),\n        StructField(\"number_sum\", IntegerType(), True),\n    ])\n\n    property_results: Iterator[PropertyResult] = for_all(\n        dfs=df_gen.arbitrary_dataframes(),\n        property_to_check=lambda df: df.schema == new_data_schema and df.count() == 2\n    )\n    self.assertTrue(check_property(property_results=property_results))\n```\n\nwill check the property defined in the `property_to_check` parameter in all the DataFrames and generate a report that is\nthen passed to the `check_property` that will either return True if all DataFrames conform to the property or it will raise\na `PropertyCheckException` and show the failed DataFrames in a pretty table.\n\nChanging the property to check to:\n\n```python\nlambda df: df.schema == new_data_schema and df.count() == 3\n```\n\nWill cause the test to fail, and it will print out the DataFrames that failed the property check:\n\n\n```shell\nE           chispa.dataframe_generator.PropertyCheckException: Property Check failed:\nE           +----------------------+------------+-------------+------------+\nE           |        string        |  number1   |   number2   | number_sum |\nE           +----------------------+------------+-------------+------------+\nE           | eRNTppUYCUECmgCEDLUu | 1035096828 | -1427731638 | -392634810 |\nE           | rQPPNXQuSGVuidEnWCxS | 774843839  | -1050333669 | -275489830 |\nE           +----------------------+------------+-------------+------------+\nE           +----------------------+-------------+-------------+-------------+\nE           |        string        |   number1   |   number2   |  number_sum |\nE           +----------------------+-------------+-------------+-------------+\nE           | DYldTLJOXDsoLmpaSAUQ | -2040281200 |  -106962224 | -2147243424 |\nE           | AjSnLZSGoGAjPcufpUgc |  709943750  | -1092598909 |  -382655159 |\nE           +----------------------+-------------+-------------+-------------+\nE           +----------------------+------------+------------+-------------+\nE           |        string        |  number1   |  number2   |  number_sum |\nE           +----------------------+------------+------------+-------------+\nE           | BStGdFtsgZEyNSdAkLPr | 1526463691 | 1333610860 | -1434892745 |\nE           | ddIYTJHNDWSXglhaTrnn | 482503049  | 1506843170 |  1989346219 |\nE           +----------------------+------------+------------+-------------+\n.\n.\n.\n```\n\n## License\n\nMIT License\n\nCopyright (c) [2022] [GonÃ§alo AndrÃ© Carneiro de Castro]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/goncaloccastro/scintilla",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scintilla",
    "package_url": "https://pypi.org/project/scintilla/",
    "platform": null,
    "project_url": "https://pypi.org/project/scintilla/",
    "project_urls": {
      "Homepage": "https://github.com/goncaloccastro/scintilla"
    },
    "release_url": "https://pypi.org/project/scintilla/0.0.3/",
    "requires_dist": [
      "Faker (==8.14.0)",
      "pyspark (==3.0.1)",
      "prettytable (==3.1.1)"
    ],
    "requires_python": ">=3.7",
    "summary": "Scintilla - Generate DataFrames for property based testing",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13215115,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb44a563d59d2820eb17c7072b641f7201018c7d25437edec6901dd4b8018197",
          "md5": "8756a04ff8d4d1343210cd320c2a776c",
          "sha256": "1e9a7f36a7a5e8345b51df51876b9e6bae29d6af6a18a181a84814669354dcb1"
        },
        "downloads": -1,
        "filename": "scintilla-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8756a04ff8d4d1343210cd320c2a776c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8442,
        "upload_time": "2022-03-05T10:51:39",
        "upload_time_iso_8601": "2022-03-05T10:51:39.852254Z",
        "url": "https://files.pythonhosted.org/packages/bb/44/a563d59d2820eb17c7072b641f7201018c7d25437edec6901dd4b8018197/scintilla-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3a8346110cbe916ecd3179b3fa4f59862e28c14fa631c72cf7c4f511a41aac7",
          "md5": "60133b0deb38a07d9e25c2ac581dd352",
          "sha256": "35e0cd774b647ae20f51400225f439a07ab6434b0848436b359475632e6b398a"
        },
        "downloads": -1,
        "filename": "scintilla-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60133b0deb38a07d9e25c2ac581dd352",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8560,
        "upload_time": "2022-03-18T10:31:25",
        "upload_time_iso_8601": "2022-03-18T10:31:25.441767Z",
        "url": "https://files.pythonhosted.org/packages/c3/a8/346110cbe916ecd3179b3fa4f59862e28c14fa631c72cf7c4f511a41aac7/scintilla-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32561cb6f0949fabb7a470826839fd182105e3747457353e30fedd1151ecf83e",
          "md5": "d9b6304f8a59de9641153ed5f6ffd641",
          "sha256": "7dbfe14db2c4455dc0889a9551619b265789a6ce6d111e053139458b13d78f60"
        },
        "downloads": -1,
        "filename": "scintilla-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d9b6304f8a59de9641153ed5f6ffd641",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8166,
        "upload_time": "2022-03-18T10:31:26",
        "upload_time_iso_8601": "2022-03-18T10:31:26.580201Z",
        "url": "https://files.pythonhosted.org/packages/32/56/1cb6f0949fabb7a470826839fd182105e3747457353e30fedd1151ecf83e/scintilla-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3a8346110cbe916ecd3179b3fa4f59862e28c14fa631c72cf7c4f511a41aac7",
        "md5": "60133b0deb38a07d9e25c2ac581dd352",
        "sha256": "35e0cd774b647ae20f51400225f439a07ab6434b0848436b359475632e6b398a"
      },
      "downloads": -1,
      "filename": "scintilla-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "60133b0deb38a07d9e25c2ac581dd352",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8560,
      "upload_time": "2022-03-18T10:31:25",
      "upload_time_iso_8601": "2022-03-18T10:31:25.441767Z",
      "url": "https://files.pythonhosted.org/packages/c3/a8/346110cbe916ecd3179b3fa4f59862e28c14fa631c72cf7c4f511a41aac7/scintilla-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32561cb6f0949fabb7a470826839fd182105e3747457353e30fedd1151ecf83e",
        "md5": "d9b6304f8a59de9641153ed5f6ffd641",
        "sha256": "7dbfe14db2c4455dc0889a9551619b265789a6ce6d111e053139458b13d78f60"
      },
      "downloads": -1,
      "filename": "scintilla-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d9b6304f8a59de9641153ed5f6ffd641",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 8166,
      "upload_time": "2022-03-18T10:31:26",
      "upload_time_iso_8601": "2022-03-18T10:31:26.580201Z",
      "url": "https://files.pythonhosted.org/packages/32/56/1cb6f0949fabb7a470826839fd182105e3747457353e30fedd1151ecf83e/scintilla-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}