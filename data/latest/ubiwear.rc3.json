{
  "info": {
    "author": "Stergios Bampakis",
    "author_email": "bampakis.stergios@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# UBIWEAR\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/stergiosbamp/deep-physical-activity-prediction/main/ubiwear/assets/logo.png?token=GHSAT0AAAAAABMGPXQKH6JE4UX625GRBLGMYPBH6JA\" width=\"250\" title=\"UBIWEAR\">\n</p>\n\nA Python library for pre-processing ubiquitous aggregated self-tracking data.\n\n## What is this library about\n\nThis library is influenced by the work of ours in which we utilized in-the-wild data\ncoming from the \"MyHeart Counts\" study [1].\n\nThrough our time-consuming experimentation with these real-world data, we extracted \na set of **prescriptive guidelines** of pre-processing steps related to aggregated data \ngathered from wearable devices.\n\nWe hope UBIWEAR serves as a starting point to the research community towards the unexplored \ndomain of **physical activity prediction** and promote a standardized definition for pre-processing\nwearables and self-tracking devices data.\n\n## When to use this library\n\nTo the best of our knowledge since this library was written, there were no\nsuggested techniques to apply for handling time-series data coming from self-tracking devices.\n\nIn UBIWEAR we offer some pre-processing methods related to univariate time-series problems\nwith some slight modifications exclusively for wearables data.\n\nIt handles **univariate** time-series aggregated data and process the data in a structure  for predictive modeling.\n\n## Usage of UBIWEAR\n\n### Install the library\nCreate virtual environment\n\n```\n$ python3 -m venv venv\n$ source venv/bin/activate\n```\n\nUpgrade pip\n\n```\n$ python -m pip install --upgrade pip\n```\n\nInstall UBIWEAR\n\n```\n$ pip install ubiwear\n```\n\n### Load your data\n\nThe input to UBIWEAR is always a **pandas' DataFrame** with the index as type of `DatetimeIndex` and a column named `value` \nof type `float` or `int` with the recorded observations representing your time-series data.\n\nFor comprehension reasons we included an example of such data in the `assets/` directory in `.csv` format.\n\n```python\nimport pandas as pd\n\ndf = pd.read_csv('assets/df-wearable-time-series-example.csv', index_col='startTime', parse_dates=True)\n```\n\nThe `df` must have the following format like in the example:\n```\n                     value\nstartTime                 \n2015-08-07 05:37:31   59.0\n2015-08-07 05:43:31  139.0\n2015-08-07 07:06:16  245.0\n2015-08-07 07:11:18  148.0\n2015-08-07 07:15:49   43.0\n                    ...\n2015-08-25 04:52:35   18.0\n2015-08-25 05:03:11   15.0\n2015-08-25 05:04:51   44.0\n2015-08-25 05:06:13   80.0\n2015-08-25 05:41:19  112.0\n```\n\n### Clean and process the data\n\nImport the `Processor` class. Its' purpose is to pre-process time-series aggregated wearable data. \n\nThe available methods of the class should be used in a chaining style. \n\nIt also offers a \"magic\" method `process` that processes the data in a pre-defined suggested pipeline, \nthat works especially for physical activity data.\n\n```python\nfrom ubiwear.processor import Processor\n\nubiwear_processor = Processor(df=df)\n\n# Call the magic method\ndf = ubiwear_processor.process(granularity='1H', q=0.05, impute_start=8, impute_end=24)\n```\n\nThe `df` has the following format:\n\n```\n                          value  dayofweek_sin  ...  hour_sin      hour_cos\nstartTime                                       ...                        \n2015-08-07 05:00:00  198.000000      -0.433884  ...  0.965926  2.588190e-01\n2015-08-07 06:00:00    0.000000      -0.433884  ...  1.000000  6.123234e-17\n2015-08-07 07:00:00  467.000000      -0.433884  ...  0.965926 -2.588190e-01\n2015-08-07 08:00:00  544.333333      -0.433884  ...  0.866025 -5.000000e-01\n2015-08-07 09:00:00  621.666667      -0.433884  ...  0.707107 -7.071068e-01\n                         ...            ...  ...       ...           ...\n2015-08-25 01:00:00    0.000000       0.781831  ...  0.258819  9.659258e-01\n2015-08-25 02:00:00   82.000000       0.781831  ...  0.500000  8.660254e-01\n2015-08-25 03:00:00    0.000000       0.781831  ...  0.707107  7.071068e-01\n2015-08-25 04:00:00    0.000000       0.781831  ...  0.866025  5.000000e-01\n2015-08-25 05:00:00   95.000000       0.781831  ...  0.965926  2.588190e-01\n```\n\nWhat has happened ?\n\n* removed duplicate observations related to time-series examples.\n* removed NaN/NaT records\n* removed outlier values using the quantiles method\n* resampled the data in a unified granularity i.e. hourly granularity\n* imputed specifically for wearables' data missing values on active hours (08:00 - 24:00)\n* enhanced feature space with date features and converted them into their cyclical transformation\n\nAll of the above methods can be called individually and select those that fit your problem.\n\nYou can also implement your own methods in `Processor` class and call it in your desired pre-processing\npipeline in a chaining manner.\n\nFor example:\n```python\nfrom ubiwear.processor import Processor\n\nubiwear_processor = Processor(df=df)\n\nubiwear_processor \\\n    .remove_nan() \\\n    .remove_duplicate_values_at_same_timestamp() \\\n    .add_date_features() \\\n    # ... \\    \n    # your_own_method()\n\n# Get the processed data\ndf = ubiwear_processor.df\n```\n\n### Re-frame the problem from time-series to a supervised dataset\nUse the `Window` class which provides two main functionalities that transforms a time-series problem \nto a supervised set ready to be used by machine learning algorithms.\n\n* **Sliding window** to transform a time-series problem to a supervised\n* Our novel aggregated **tumbling window**\n\n```python\nfrom ubiwear.window import Window\n\n# Transform from time-series to supervised dataset for ML\nwindow = Window(n_in=2 * 24)\ndataset = window.sliding_window(data=df)\n\n# OR aggregated tumbling window\n# dataset = window.tumbling_window(data=df, freq='1D')\n```\n\nThe `dataset` has the following format:\n\n```\n                     var1(t-48)  var2(t-48)  ...  var11(t)  var1(t)\nstartTime                                    ...                   \n2015-08-09 05:00:00       198.0   -0.433884  ...  0.258819      0.0\n2015-08-10 05:00:00         0.0   -0.974928  ...  0.258819      0.0\n                                                    ...\n2015-08-11 05:00:00         0.0   -0.781831  ...  0.258819      0.0\n2015-08-22 05:00:00         0.0    0.433884  ...  0.258819      0.0\n2015-08-23 05:00:00         0.0   -0.433884  ...  0.258819   4562.0\n2015-08-24 05:00:00         0.0   -0.974928  ...  0.258819   1861.5\n2015-08-25 05:00:00       450.0   -0.781831  ...  0.258819    177.0\n```\n\n### Convert dataset for ML\n\nThe `Dataset` is a class that provides sub-datasets for training ML models. It takes as input the dataset\ncreated from the UBIWEAR's `Window` class.\n\n```python\nfrom ubiwear.dataset import Dataset\n\nubiwear_dataset = Dataset(dataset=dataset)\n\n# Get train/test sub-datasets\nx_train, x_test, y_train, y_test = ubiwear_dataset.get_train_test(train_ratio=0.75)\n\n# OR train/validation/test sub-datasets\nx_train, x_val, x_test, y_train, y_val, y_test = ubiwear_dataset.get_train_val_test(train_ratio=0.75, val_ratio=0.2)\n```\n\n### Apply your favorite ML or DL model\n\nYou know have clean, pre-processed and ready your well-known `X's` and `y's` for your ML problem!\n\nYou can call your favorite model, and record the performance on your favorite regression metrics.\n\n\n\n## Literature\n[1] Hershman, Steven G., et al. \"Physical activity, sleep and cardiovascular health data for 50,000 individuals from the MyHeart Counts Study.\" Scientific data 6.1 (2019): 1-10.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/stergiosbamp/deep-physical-activity-prediction/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ubiwear",
    "package_url": "https://pypi.org/project/ubiwear/",
    "platform": "",
    "project_url": "https://pypi.org/project/ubiwear/",
    "project_urls": {
      "Homepage": "https://github.com/stergiosbamp/deep-physical-activity-prediction/"
    },
    "release_url": "https://pypi.org/project/ubiwear/0.0.2/",
    "requires_dist": [
      "pandas",
      "scikit-learn"
    ],
    "requires_python": ">=3.8",
    "summary": "A Python library for pre-processing ubiquitous aggregated self-tracking data",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12502367,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34e41492c51c74090ee5156aa002869106c8b4c1badddda42fdfca41e0c8cf77",
          "md5": "01fc16fc2bf1510a88c360f7a0b49027",
          "sha256": "cfd1a05bc5f4ea2d91754203797f4b43c8c6ab93a74417c951d4474d635c44d2"
        },
        "downloads": -1,
        "filename": "ubiwear-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "01fc16fc2bf1510a88c360f7a0b49027",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9887,
        "upload_time": "2022-01-07T08:22:28",
        "upload_time_iso_8601": "2022-01-07T08:22:28.253694Z",
        "url": "https://files.pythonhosted.org/packages/34/e4/1492c51c74090ee5156aa002869106c8b4c1badddda42fdfca41e0c8cf77/ubiwear-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66e6271db642dad9aae81881bfa6c50bf43b729625f36df90953ed8b2fae0ab6",
          "md5": "ae550118886262b016f41b1dee1d8468",
          "sha256": "a31f77dba77d4e3056f6dc5ab34c7e8408babb1a918ee6baecb5934bf5731300"
        },
        "downloads": -1,
        "filename": "ubiwear-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ae550118886262b016f41b1dee1d8468",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 11326,
        "upload_time": "2022-01-07T08:22:29",
        "upload_time_iso_8601": "2022-01-07T08:22:29.808896Z",
        "url": "https://files.pythonhosted.org/packages/66/e6/271db642dad9aae81881bfa6c50bf43b729625f36df90953ed8b2fae0ab6/ubiwear-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0ff64dc532708a15d72268e932a1f09b9dce2e9ea86c7fc0b4055d2b1243223",
          "md5": "2d72b402608e6ae34ac6bee627dd5ecc",
          "sha256": "a1d18fa2120b6c611828fcba3dc3dc1d1e3a89b59e16f1ce50d2dfa916c48336"
        },
        "downloads": -1,
        "filename": "ubiwear-0.0.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d72b402608e6ae34ac6bee627dd5ecc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9900,
        "upload_time": "2022-01-07T08:20:01",
        "upload_time_iso_8601": "2022-01-07T08:20:01.919653Z",
        "url": "https://files.pythonhosted.org/packages/c0/ff/64dc532708a15d72268e932a1f09b9dce2e9ea86c7fc0b4055d2b1243223/ubiwear-0.0.16-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Wrong versioning"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f487af5638a1e4d7c8e5c1d7e4461856bb8af26da8d894e34d2584aeb0a4ede5",
          "md5": "1f7091e5d89451f7f33d317804811e5a",
          "sha256": "f2b89b6675a3fe0a1a1b1b1c484d75a4b3d2f2b7293c09e47d21fe2e9c468c07"
        },
        "downloads": -1,
        "filename": "ubiwear-0.0.16.tar.gz",
        "has_sig": false,
        "md5_digest": "1f7091e5d89451f7f33d317804811e5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 11327,
        "upload_time": "2022-01-07T08:20:03",
        "upload_time_iso_8601": "2022-01-07T08:20:03.562970Z",
        "url": "https://files.pythonhosted.org/packages/f4/87/af5638a1e4d7c8e5c1d7e4461856bb8af26da8d894e34d2584aeb0a4ede5/ubiwear-0.0.16.tar.gz",
        "yanked": true,
        "yanked_reason": "Wrong versioning"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "def3fbfe30641fb8d05befbdfd61ca1860e29047441ad1f455cd4155e8e49179",
          "md5": "b8a2278f73113755f40770e8559800fe",
          "sha256": "5cf28046c00aecaa672950b92ef5355453a519b31ad1aac2adac1ad354172837"
        },
        "downloads": -1,
        "filename": "ubiwear-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8a2278f73113755f40770e8559800fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9947,
        "upload_time": "2022-01-07T09:44:23",
        "upload_time_iso_8601": "2022-01-07T09:44:23.699973Z",
        "url": "https://files.pythonhosted.org/packages/de/f3/fbfe30641fb8d05befbdfd61ca1860e29047441ad1f455cd4155e8e49179/ubiwear-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a241f8fc09656e75fca860192f4be465f60c2b6d0233e408cbd63006248cccd",
          "md5": "abaad32730c98132d29a3e44437a1610",
          "sha256": "7ab298a12ba9694cba1a90388d3adbd28a2fa597a99cb81c28b5559780d32c7b"
        },
        "downloads": -1,
        "filename": "ubiwear-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "abaad32730c98132d29a3e44437a1610",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 11451,
        "upload_time": "2022-01-07T09:44:26",
        "upload_time_iso_8601": "2022-01-07T09:44:26.634317Z",
        "url": "https://files.pythonhosted.org/packages/4a/24/1f8fc09656e75fca860192f4be465f60c2b6d0233e408cbd63006248cccd/ubiwear-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "def3fbfe30641fb8d05befbdfd61ca1860e29047441ad1f455cd4155e8e49179",
        "md5": "b8a2278f73113755f40770e8559800fe",
        "sha256": "5cf28046c00aecaa672950b92ef5355453a519b31ad1aac2adac1ad354172837"
      },
      "downloads": -1,
      "filename": "ubiwear-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b8a2278f73113755f40770e8559800fe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 9947,
      "upload_time": "2022-01-07T09:44:23",
      "upload_time_iso_8601": "2022-01-07T09:44:23.699973Z",
      "url": "https://files.pythonhosted.org/packages/de/f3/fbfe30641fb8d05befbdfd61ca1860e29047441ad1f455cd4155e8e49179/ubiwear-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a241f8fc09656e75fca860192f4be465f60c2b6d0233e408cbd63006248cccd",
        "md5": "abaad32730c98132d29a3e44437a1610",
        "sha256": "7ab298a12ba9694cba1a90388d3adbd28a2fa597a99cb81c28b5559780d32c7b"
      },
      "downloads": -1,
      "filename": "ubiwear-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "abaad32730c98132d29a3e44437a1610",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 11451,
      "upload_time": "2022-01-07T09:44:26",
      "upload_time_iso_8601": "2022-01-07T09:44:26.634317Z",
      "url": "https://files.pythonhosted.org/packages/4a/24/1f8fc09656e75fca860192f4be465f60c2b6d0233e408cbd63006248cccd/ubiwear-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}