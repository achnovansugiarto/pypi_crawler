{
  "info": {
    "author": "Michiel Van Der Lee, Trino Team",
    "author_email": "jmt.vanderlee@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Database :: Front-Ends"
    ],
    "description": "[![Build Status](https://github.com/mvanderlee/trino-python-client/workflows/ci/badge.svg)](https://github.com/mvanderlee/trino-python-client/actions?query=workflow%3Aci+event%3Apush+branch%3Apy3-async)\n[![Trino Slack](https://img.shields.io/static/v1?logo=slack&logoColor=959DA5&label=Slack&labelColor=333a41&message=join%20conversation&color=3AC358)](https://trino.io/slack.html)\n[![Presto: The Definitive Guide book download](https://img.shields.io/badge/Presto%3A%20The%20Definitive%20Guide-download-brightgreen)](https://www.starburstdata.com/oreilly-presto-guide-download/)\n\n# Introduction\n\nThis package provides a asyncio client interface to query [Trino](https://trino.io/)\na distributed SQL engine. It supports Python 3.6, 3.7, and pypy.\n# Installation\n\n```\n$ pip install aiotrino\n```\n\n# Quick Start\n\nUse the DBAPI interface to query Trino:\n\n```python\nimport aiotrino\nconn = aiotrino.dbapi.connect(\n    host='localhost',\n    port=8080,\n    user='the-user',\n    catalog='the-catalog',\n    schema='the-schema',\n)\nawait cur = conn.cursor()\nawait cur.execute('SELECT * FROM system.runtime.nodes')\nrows = await cur.fetchall()\nawait conn.close()\n```\nOr with context manager \n```python\nimport aiotrino\nasync with aiotrino.dbapi.connect(\n    host='localhost',\n    port=8080,\n    user='the-user',\n    catalog='the-catalog',\n    schema='the-schema',\n) as conn:\n    await cur = conn.cursor()\n    await cur.execute('SELECT * FROM system.runtime.nodes')\n    rows = await cur.fetchall()\n```\n\nThis will query the `system.runtime.nodes` system tables that shows the nodes\nin the Trino cluster.\n\nThe DBAPI implementation in `aiotrino.dbapi` provides methods to retrieve fewer\nrows for example `Cursorfetchone()` or `Cursor.fetchmany()`. By default\n`Cursor.fetchmany()` fetches one row. Please set\n`trino.dbapi.Cursor.arraysize` accordingly.\n\nFor backwards compatibility with PrestoSQL, override the headers at the start of your application\n```python\nimport aiotrino\naiotrino.constants.HEADERS = aiotrino.constants.PrestoHeaders\n```\n\n# Basic Authentication\nThe `BasicAuthentication` class can be used to connect to a LDAP-configured Trino\ncluster:\n```python\nimport aiotrino\nconn = aiotrino.dbapi.connect(\n    host='coordinator url',\n    port=8443,\n    user='the-user',\n    catalog='the-catalog',\n    schema='the-schema',\n    http_scheme='https',\n    auth=aiotrino.auth.BasicAuthentication(\"principal id\", \"password\"),\n)\ncur = await conn.cursor()\nawait cur.execute('SELECT * FROM system.runtime.nodes')\nrows = await cur.fetchall()\nawait conn.close()\n```\n\n# Transactions\nThe client runs by default in *autocommit* mode. To enable transactions, set\n*isolation_level* to a value different than `IsolationLevel.AUTOCOMMIT`:\n\n```python\nimport aiotrino\nfrom aiotrino import transaction\nasync with aiotrino.dbapi.connect(\n    host='localhost',\n    port=8080,\n    user='the-user',\n    catalog='the-catalog',\n    schema='the-schema',\n    isolation_level=transaction.IsolationLevel.REPEATABLE_READ,\n) as conn:\n  cur = await conn.cursor()\n  await cur.execute('INSERT INTO sometable VALUES (1, 2, 3)')\n  await cur.fetchone()\n  await cur.execute('INSERT INTO sometable VALUES (4, 5, 6)')\n  await cur.fetchone()\n```\n\nThe transaction is created when the first SQL statement is executed.\n`trino.dbapi.Connection.commit()` will be automatically called when the code\nexits the *with* context and the queries succeed, otherwise\n`trino.dbapi.Connection.rollback()' will be called.\n\n# Development\n\n## Getting Started With Development\n\nStart by forking the repository and then modify the code in your fork.\n\nClone the repository and go inside the code directory. Then you can get the\nversion with `./setup.py --version`.\n\nWe recommend that you use `virtualenv` for development:\n\n```\n$ virtualenv .venv\n$ . .venv/bin/activate\n# TODO add requirements.txt: pip install -r requirements.txt\n$ pip install .\n```\n\nFor development purpose, pip can reference the code you are modifying in a\n*virtualenv*:\n\n```\n$ pip install -e .[tests]\n```\n\nThat way, you do not need to run `pip install` again to make your changes\napplied to the *virtualenv*.\n\nWhen the code is ready, submit a Pull Request.\n\n## Code Style\n\n- For Python code, adhere to PEP 8.\n- Prefer code that is readable over one that is \"clever\".\n- When writing a Git commit message, follow these [guidelines](https://chris.beams.io/posts/git-commit/).\n\n## Running Tests\n\nThere is a helper scripts, `run`, that provides commands to run tests.\nType `./run tests` to run both unit and integration tests.\n\n`trino-python-client` uses [pytest](https://pytest.org/) for its tests. To run\nonly unit tests, type:\n\n```\n$ pytest tests\n```\n\nThen you can pass options like `--pdb` or anything supported by `pytest --help`.\n\nTo run the tests with different versions of Python in managed *virtualenvs*,\nuse `tox` (see the configuration in `tox.ini`):\n\n```\n$ tox\n```\n\nTo run integration tests:\n\n```\n$ pytest integration_tests\n```\n\nThey pull a Docker image and then run a container with a Trino server:\n- the image is named `trinodb/trino:${TRINO_VERSION}`\n- the container is named `trino-python-client-tests-{uuid4()[:7]}`\n\n## Releasing\n\n- [Set up your development environment](#Getting-Started-With-Development).\n- Change version in `trino/__init__.py`.\n- Commit and create an annotated tag (`git tag -m '' current_version`)\n- Run the following:\n  ```bash\n  . .venv/bin/activate &&\n  pip install twine &&\n  rm -rf dist/ &&\n  ./setup.py sdist bdist_wheel &&\n  twine upload dist/* &&\n  open https://pypi.org/project/trino/ &&\n  echo \"Released!\"\n  ```\n- Push the branch and the tag (`git push upstream master current_version`)\n- Send release announcement.\n\n# Need Help?\n\nFeel free to create an issue as it make your request visible to other users and contributors.\n\nIf an interactive discussion would be better or if you just want to hangout and chat about\nthe Trino Python client, you can join us on the *#python-client* channel on\n[Trino Slack](https://trino.io/slack.html).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mvanderlee/trino-python-client/tree/py3-async",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiotrino",
    "package_url": "https://pypi.org/project/aiotrino/",
    "platform": null,
    "project_url": "https://pypi.org/project/aiotrino/",
    "project_urls": {
      "Homepage": "https://github.com/mvanderlee/trino-python-client/tree/py3-async"
    },
    "release_url": "https://pypi.org/project/aiotrino/0.1.1/",
    "requires_dist": [
      "aiohttp",
      "requests-kerberos ; extra == 'all'",
      "requests-kerberos ; extra == 'kerberos'",
      "requests-kerberos ; extra == 'tests'",
      "pytest ; extra == 'tests'",
      "pytest-aiohttp ; extra == 'tests'",
      "pytest-asyncio ; extra == 'tests'",
      "pytest-runner ; extra == 'tests'",
      "aioresponses ; extra == 'tests'",
      "click ; extra == 'tests'",
      "mock ; extra == 'tests'",
      "pytz ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "ASyncIO Client for the Trino distributed SQL Engine",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13774113,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c81b98acb69a82daa5f1d2b3795a0dc70ed5da257550a38a7c8ace99c492bac",
          "md5": "f81d08514d4be192ce19e91a83f399ed",
          "sha256": "628854714c3ada7f1678717ee46b28dcdd5186ed8874edb1bc4d60cf20fa2695"
        },
        "downloads": -1,
        "filename": "aiotrino-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f81d08514d4be192ce19e91a83f399ed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26350,
        "upload_time": "2021-04-17T04:07:31",
        "upload_time_iso_8601": "2021-04-17T04:07:31.562249Z",
        "url": "https://files.pythonhosted.org/packages/0c/81/b98acb69a82daa5f1d2b3795a0dc70ed5da257550a38a7c8ace99c492bac/aiotrino-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7206d571f5ddecfbd2b1cc91b622b27119fe525820c647f105f3ec76e99cb4f2",
          "md5": "f293f34fed0e451b63f7b8b9ac500dd7",
          "sha256": "e232207179e5dc180e589b27637ba9a2efe12c54ef379aca21387d94c4f776b2"
        },
        "downloads": -1,
        "filename": "aiotrino-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f293f34fed0e451b63f7b8b9ac500dd7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20203,
        "upload_time": "2021-04-17T04:07:33",
        "upload_time_iso_8601": "2021-04-17T04:07:33.097382Z",
        "url": "https://files.pythonhosted.org/packages/72/06/d571f5ddecfbd2b1cc91b622b27119fe525820c647f105f3ec76e99cb4f2/aiotrino-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae50365c518d23e047f731c6bec01fc7530af09f77057ed0fdb5da264381875f",
          "md5": "6dd67452ecc01d55e15f4076d23e34cd",
          "sha256": "bdead960dbdb3ac15916ce4d585cda192d71bee3b2946b6d297b085d54575989"
        },
        "downloads": -1,
        "filename": "aiotrino-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6dd67452ecc01d55e15f4076d23e34cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26831,
        "upload_time": "2022-05-10T18:35:20",
        "upload_time_iso_8601": "2022-05-10T18:35:20.856989Z",
        "url": "https://files.pythonhosted.org/packages/ae/50/365c518d23e047f731c6bec01fc7530af09f77057ed0fdb5da264381875f/aiotrino-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "912576f17d5973831cb0a768ba2bb54f653fccb590a40324a4d4e97b572ac0e6",
          "md5": "89272a68cc79b91acf9f3d2d062626d2",
          "sha256": "3e3c47da270246335538aa55fbefd2946a436b9b3779518fd49d6b146cac47ef"
        },
        "downloads": -1,
        "filename": "aiotrino-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "89272a68cc79b91acf9f3d2d062626d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24220,
        "upload_time": "2022-05-10T18:35:22",
        "upload_time_iso_8601": "2022-05-10T18:35:22.581593Z",
        "url": "https://files.pythonhosted.org/packages/91/25/76f17d5973831cb0a768ba2bb54f653fccb590a40324a4d4e97b572ac0e6/aiotrino-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae50365c518d23e047f731c6bec01fc7530af09f77057ed0fdb5da264381875f",
        "md5": "6dd67452ecc01d55e15f4076d23e34cd",
        "sha256": "bdead960dbdb3ac15916ce4d585cda192d71bee3b2946b6d297b085d54575989"
      },
      "downloads": -1,
      "filename": "aiotrino-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6dd67452ecc01d55e15f4076d23e34cd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 26831,
      "upload_time": "2022-05-10T18:35:20",
      "upload_time_iso_8601": "2022-05-10T18:35:20.856989Z",
      "url": "https://files.pythonhosted.org/packages/ae/50/365c518d23e047f731c6bec01fc7530af09f77057ed0fdb5da264381875f/aiotrino-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "912576f17d5973831cb0a768ba2bb54f653fccb590a40324a4d4e97b572ac0e6",
        "md5": "89272a68cc79b91acf9f3d2d062626d2",
        "sha256": "3e3c47da270246335538aa55fbefd2946a436b9b3779518fd49d6b146cac47ef"
      },
      "downloads": -1,
      "filename": "aiotrino-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "89272a68cc79b91acf9f3d2d062626d2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24220,
      "upload_time": "2022-05-10T18:35:22",
      "upload_time_iso_8601": "2022-05-10T18:35:22.581593Z",
      "url": "https://files.pythonhosted.org/packages/91/25/76f17d5973831cb0a768ba2bb54f653fccb590a40324a4d4e97b572ac0e6/aiotrino-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}