{
  "info": {
    "author": "arago GmbH",
    "author_email": "info@arago.co",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# HIRO Batch Client\n\nThis is a client library to access data of the HIRO Graph. It is meant for uploads of huge\nbatches of data in parallel.\n\nThis library depends on the package \"hiro-graph-client\". - (PyPI: [hiro-graph-client](https://pypi.org/project/hiro-graph-client/), GitHub: [hiro-client-python](https://github.com/arago/hiro-client-python)) \n\nFor more information about HIRO Automation, look at https://www.arago.co/\n\n## Quickstart\n\nTo use this library, you will need an account at https://id.arago.co/ and access to an OAuth Client-Id and Client-Secret\nto access the HIRO Graph. See also https://developer.hiro.arago.co.\n\nMost of the documentation is done in the sourcecode.\n\n### HiroGraphBatch Examples\n\n#### Example 1\n\nExample to use the batch client to process a batch of requests:\n\n```python\nfrom hiro_graph_client import PasswordAuthTokenApiHandler\nfrom hiro_batch_client import HiroGraphBatch\n\nhiro_batch_client: HiroGraphBatch = HiroGraphBatch(\n    api_handler=PasswordAuthTokenApiHandler(\n        root_url=\"https://core.arago.co\",\n        username='',\n        password='',\n        client_id='',\n        client_secret=''\n    )\n)\n\n# See code documentation about the possible commands and their attributes.\n# For another variant of a valid data structure, see the example below.\ncommands: list = [\n    {\n        \"handle_vertices\": {\n            \"ogit/_xid\": \"haas1000:connector1:machine1\"\n        }\n    },\n    {\n        \"handle_vertices\": {\n            \"ogit/_xid\": \"haas1000:connector2:machine2\"\n        }\n    }\n]\n\nquery_results: list = hiro_batch_client.multi_command(commands)\n\nprint(query_results)\n```\n\n#### Example 2\n\nExample to use the batch client to process a batch of requests with callbacks for each result:\n\n```python\nfrom typing import Any, Iterator\n\nfrom hiro_graph_client import AbstractTokenApiHandler, PasswordAuthTokenApiHandler\nfrom hiro_batch_client import HiroGraphBatch, HiroResultCallback\n\n\nclass RunBatch(HiroResultCallback):\n    hiro_batch_client: HiroGraphBatch\n\n    def __init__(self, api_handler: AbstractTokenApiHandler):\n        self.hiro_batch_client = HiroGraphBatch(\n            callback=self,\n            api_handler=api_handler)\n\n    def result(self, data: Any, code: int) -> None:\n        \"\"\"\n        This (abstract) method gets called for each command when results are available\n        \"\"\"\n        print('Data: ' + str(data))\n        print('Code: ' + str(code))\n\n    def run(self, command_iter: Iterator[dict]):\n        self.hiro_batch_client.multi_command(command_iter)\n\n\nbatch_runner: RunBatch = RunBatch(\n    api_handler=PasswordAuthTokenApiHandler(\n        root_url=\"https://core.arago.co\",\n        username='',\n        password='',\n        client_id='',\n        client_secret=''\n    )\n)\n\n# See code documentation about the possible commands and their attributes. This is a more compact notation of the\n# same list of commands from the example above. Both variants are allowed.\ncommands: list = [\n    {\n        \"handle_vertices\": [\n            {\n                \"ogit/_xid\": \"haas1000:connector1:machine1\"\n            },\n            {\n                \"ogit/_xid\": \"haas1000:connector2:machine2\"\n            }\n        ]\n    }\n]\n\nbatch_runner.run(commands)\n```\n\n## TokenApiHandler\n\nSee documentation for the [hiro-graph-client](https://pypi.org/project/hiro-graph-client/). The TokenApiHandlers are\nused in exactly the same way here.\n\nExample:\n\n```python\nfrom hiro_graph_client import EnvironmentTokenApiHandler\nfrom hiro_batch_client import HiroGraphBatch\n\nhiro_batch_client: HiroGraphBatch = HiroGraphBatch(\n    api_handler=EnvironmentTokenApiHandler(\n        root_url=\"https://core.arago.co\"\n    )\n)\n\n```\n\n## Batch Client \"HiroGraphBatch\"\n\nIt is recommended to use the included HiroGraphBatch client when uploading large quantities of data into the HIRO Graph.\nThis client handles parallel upload of data and makes creating vertices with their edges and attachments easier.\n\nThe HiroGraphBatch expects a list of commands with their respective attribute payload as input. The method to run such a\nbatch is always `HiroGraphBatch.multi_command`.\n\nSee examples from [HiroGraphBatch](#hirographbatch) above.\n\n### Input data format\n\nThe data format for input of `HiroGraphBatch.multi_command` is a list. This method iterates over this list and treats\neach dict it finds as a key-value-pair with the name of a command as key and either a single dict of attributes, or a\nlist of multiple attribute dicts as value(s) for this command.\n\nThese commands are run in parallel across up to eight threads by default, so their order is likely to change in the\nresults. Commands given in these command lists should therefore never depend on each other. See the documentation on the\nconstructor `HiroGraphBatch.__init__` for more information.\n\nThe following two (bad!) examples are equivalent:\n\n```python\ncommands: list = [\n    {\n        \"create_vertices\": {\n            \"ogit/_xid\": \"haas1000:connector1:machine1\"\n        }\n    },\n    {\n        \"handle_vertices\": {\n            \"ogit/_xid\": \"haas1000:connector2:machine2\"\n        }\n    },\n    {\n        \"handle_vertices\": {\n            \"ogit/_xid\": \"haas1000:connector3:machine3\"\n        }\n    },\n    {\n        \"delete_vertices\": {\n            \"ogit/_xid\": \"haas1000:connector1:machine1\"\n        }\n    },\n    {\n        \"delete_vertices\": {\n            \"ogit/_xid\": \"haas1000:connector2:machine2\"\n        }\n    },\n    {\n        \"delete_vertices\": {\n            \"ogit/_xid\": \"haas1000:connector3:machine3\"\n        }\n    }\n]\n```\n\n```python\ncommands: list = [\n    {\n        \"create_vertices\": [\n            {\n                \"ogit/_xid\": \"haas1000:connector1:machine1\"\n            }\n        ],\n        \"handle_vertices\": [\n            {\n                \"ogit/_xid\": \"haas1000:connector2:machine2\"\n            },\n            {\n                \"ogit/_xid\": \"haas1000:connector3:machine3\"\n            }\n        ],\n        \"delete_vertices\": [\n            {\n                \"ogit/_xid\": \"haas1000:connector1:machine1\"\n            },\n            {\n                \"ogit/_xid\": \"haas1000:connector2:machine2\"\n            },\n            {\n                \"ogit/_xid\": \"haas1000:connector3:machine3\"\n            }\n        ]\n    }\n]\n```\n\nThese examples are bad, because delete_vertices depends on create/handle_vertices (there has to be a vertex first before\nit can be deleted). You should call `HiroGraphBatch.multi_command` twice in this case:\n\n```python\ncommands1: list = [\n    {\n        \"create_vertices\": [\n            {\n                \"ogit/_xid\": \"haas1000:connector1:machine1\"\n            }\n        ],\n        \"handle_vertices\": [\n            {\n                \"ogit/_xid\": \"haas1000:connector2:machine2\"\n            },\n            {\n                \"ogit/_xid\": \"haas1000:connector3:machine3\"\n            }\n        ]\n    }\n]\n\ncommands2: list = [\n    {\n        \"delete_vertices\": [\n            {\n                \"ogit/_xid\": \"haas1000:connector1:machine1\"\n            },\n            {\n                \"ogit/_xid\": \"haas1000:connector2:machine2\"\n            },\n            {\n                \"ogit/_xid\": \"haas1000:connector3:machine3\"\n            }\n        ]\n    }\n]\n\nquery_results = []\n\nquery_results.extend(hiro_batch_client.multi_command(commands1))\nquery_results.extend(hiro_batch_client.multi_command(commands2))\n```\n\n#### IOCarrier\n\nWhen uploading attachments into the HIRO Graph, it is best practice streaming that data when possible. To avoid having\nmany open IO connections when uploading many files for instance, children of the class `AbstractIOCarrier` can be\nimplemented and used. Children that derive from this class open their IO just before the upload and close it immediately\nafterwards.\n\nThis library provides a class `BasicFileIOCarrier` for file operations.\n\nSee [Example for add_attachments](#add_attachments).\n\n### Result data format\n\nResult values contain dicts that carry all information about the executed commands. The order of the results is\nindependent of the order in which the input data has been submitted.\n\nOne dict has the following structure:\n\n```python\nresult: dict = {\n    \"status\": \"success|fail\",\n    \"entity\": \"vertex|edge|timeseries|attachment|undefined\",\n    \"action\": \"create|update|delete|undefined\",\n    \"order\": 0  # order of the commands in which they were sent to the graph. \n    \"data\": {\n        \"<On success>\": \"<Data of the result of the command.>\",\n        \"<On fail>\": \"<Dict with a copy of the original data of the command.>\"\n    }\n}\n```\n\nThese dicts are collected in a list when no callback is configured, see [Example 1](#example-1), or given back in the\ncallback method as `data`, see [Example 2](#example-2).\n\nExample of a list result:\n\n```python\nquery_results: list = [\n    {\n        \"status\": \"success\",\n        \"entity\": \"vertex\",\n        \"action\": \"create\",\n        \"order\": 0,\n        \"data\": {\n            \"ogit/_created-on\": 1601030883647,\n            \"ogit/_xid\": \"machine4\",\n            \"ogit/_organization\": \"ckeckyxi60c8k0619otx9i5tq_ckeckyxi60c8o0619fsizblds\",\n            \"/admin_contact\": \"info@admin.co\",\n            \"ogit/name\": \"machine 4\",\n            \"ogit/_modified-on\": 1601030883647,\n            \"ogit/_id\": \"ckeckz5un0chl0619fyskvn2a_ckfi4g85b8vak06191dxpaqn0\",\n            \"ogit/_creator\": \"ckeckyxi60c8k0619otx9i5tq_ckeckzivg0d2f0619o3guv8o1\",\n            \"ogit/MARS/Machine/class\": \"Linux\",\n            \"ogit/_graphtype\": \"vertex\",\n            \"ogit/_owner\": \"ckeckyxi60c8k0619otx9i5tq_ckeckyxi60c8m061999q77xdb\",\n            \"ogit/_v-id\": \"1601030883647-9oRXX8\",\n            \"ogit/_v\": 1,\n            \"ogit/MARS/Machine/ram\": \"2G\",\n            \"ogit/_modified-by-app\": \"cju16o7cf0000mz77pbwbhl3q_ckecksfda040q06190ygwv4jz\",\n            \"ogit/_is-deleted\": false,\n            \"ogit/_creator-app\": \"cju16o7cf0000mz77pbwbhl3q_ckecksfda040q06190ygwv4jz\",\n            \"ogit/_modified-by\": \"ckeckyxi60c8k0619otx9i5tq_ckeckzivg0d2f0619o3guv8o1\",\n            \"ogit/_scope\": \"ckeckyxi60c8k0619otx9i5tq_ckeckz5un0chl0619fyskvn2a\",\n            \"ogit/_type\": \"ogit/MARS/Machine\"\n        }\n    },\n    {\n        \"status\": \"success\",\n        \"entity\": \"vertex\",\n        \"action\": \"create\",\n        \"order\": 1,\n        \"data\": {\n            \"ogit/_created-on\": 1601030883847,\n            \"ogit/_xid\": \"machine5\",\n            \"ogit/_organization\": \"ckeckyxi60c8k0619otx9i5tq_ckeckyxi60c8o0619fsizblds\",\n            \"/admin_contact\": \"contact@admin.co\",\n            \"ogit/name\": \"machine 5\",\n            \"ogit/_modified-on\": 1601030883847,\n            \"ogit/_id\": \"ckeckz5un0chl0619fyskvn2a_ckfi4g8av8vap0619okulfydq\",\n            \"ogit/_creator\": \"ckeckyxi60c8k0619otx9i5tq_ckeckzivg0d2f0619o3guv8o1\",\n            \"ogit/MARS/Machine/class\": \"Linux\",\n            \"ogit/_graphtype\": \"vertex\",\n            \"ogit/_owner\": \"ckeckyxi60c8k0619otx9i5tq_ckeckyxi60c8m061999q77xdb\",\n            \"ogit/_v-id\": \"1601030883847-3TyBFf\",\n            \"ogit/_v\": 1,\n            \"ogit/MARS/Machine/ram\": \"4G\",\n            \"ogit/_modified-by-app\": \"cju16o7cf0000mz77pbwbhl3q_ckecksfda040q06190ygwv4jz\",\n            \"ogit/_is-deleted\": false,\n            \"ogit/_creator-app\": \"cju16o7cf0000mz77pbwbhl3q_ckecksfda040q06190ygwv4jz\",\n            \"ogit/_modified-by\": \"ckeckyxi60c8k0619otx9i5tq_ckeckzivg0d2f0619o3guv8o1\",\n            \"ogit/_scope\": \"ckeckyxi60c8k0619otx9i5tq_ckeckz5un0chl0619fyskvn2a\",\n            \"ogit/_type\": \"ogit/MARS/Machine\"\n        }\n    },\n    {\n        \"status\": \"fail\",\n        \"entity\": \"vertex\",\n        \"action\": \"create\",\n        \"order\": 2,\n        \"data\": {\n            \"error\": \"HTTPError\",\n            \"code\": 500,\n            \"message\": \"500 Internal Server Error: Unspecified exception.\",\n            \"original_data\": {\n                \"ogit/_xid\": \"machine6\",\n                \"ogit/_type\": \"ogit/MARS/Machine\",\n                \"ogit/MARS/Machine/class\": \"Linux\",\n                \"ogit/name\": \"machine 5A\",\n                \"ogit/MARS/Machine/ram\": \"8G\",\n                \"/admin_contact\": \"info@admin.co\"\n            }\n        }\n    },\n    {\n        \"status\": \"fail\",\n        \"entity\": \"vertex\",\n        \"action\": \"create\",\n        \"order\": 3,\n        \"data\": {\n            \"error\": \"HTTPError\",\n            \"code\": 500,\n            \"message\": \"500 Internal Server Error: Unspecified exception.\",\n            \"original_data\": {\n                \"ogit/_xid\": \"machine7\",\n                \"ogit/_type\": \"ogit/MARS/Machine\",\n                \"ogit/MARS/Machine/class\": \"Linux\",\n                \"ogit/name\": \"machine 4A\",\n                \"ogit/MARS/Machine/ram\": \"4G\",\n                \"/admin_contact\": \"contact@admin.co\"\n            }\n        }\n    }\n]\n```\n\n### Commands\n\nThe following command keywords for the commands list structure are implemented in the HiroGraphBatch client:\n\n---\n\n#### create_vertices\n\nCreate a batch of vertices via\nhttps://core.arago.co/help/specs/?url=definitions/graph.yaml#/[Graph]_Entity/post_new__type_\n\n* `ogit/_type` must be present in each of the attribute dicts.\n\n* Attribute keys that start with `=`, `+` or `-` denote map value entries. These values have to be in the correct format\n  according to https://developer.hiro.arago.co/7.0/documentation/api/list-api/.\n\n* Attributes of the format `\"xid:[attribute_name]\": \"[ogit/_xid]\"` are resolved to `\"[attribute_name]\": \"[ogit/_id]\"` by\n  querying HIRO before executing the main command.\n\n  This can be especially handy when creating issues:\n\n  An attribute in the form `\"xid:ogit/Automation/originNode\": \"ogit:xid:of:the:desired:vertex\"` would resolve this\n  attribute to `\"ogit/Automation/originNode\": \"ogitidofthedesiredvertex1_abcdefghijklmnopqrstuvw12\"` in the issue vertex\n  to create.\n\nExample payload for four new vertices:\n\n```python\ncommands: list = [\n    {\n        \"create_vertices\": [\n            {\n                \"ogit/_xid\": \"machine4\",\n                \"ogit/_type\": \"ogit/MARS/Machine\",\n                \"ogit/MARS/Machine/class\": \"Linux\",\n                \"ogit/name\": \"machine 4\",\n                \"ogit/MARS/Machine/ram\": \"2G\",\n                \"/admin_contact\": \"info@admin.co\"\n            },\n            {\n                \"ogit/_xid\": \"machine5\",\n                \"ogit/_type\": \"ogit/MARS/Machine\",\n                \"ogit/MARS/Machine/class\": \"Linux\",\n                \"ogit/name\": \"machine 5\",\n                \"ogit/MARS/Machine/ram\": \"4G\",\n                \"/admin_contact\": \"contact@admin.co\"\n            },\n            {\n                \"ogit/_xid\": \"machine6\",\n                \"ogit/_type\": \"ogit/MARS/Machine\",\n                \"ogit/MARS/Machine/class\": \"Linux\",\n                \"ogit/name\": \"machine 5A\",\n                \"ogit/MARS/Machine/ram\": \"8G\",\n                \"/admin_contact\": \"info@admin.co\"\n            },\n            {\n                \"ogit/_xid\": \"machine7\",\n                \"ogit/_type\": \"ogit/MARS/Machine\",\n                \"ogit/MARS/Machine/class\": \"Linux\",\n                \"ogit/name\": \"machine 4A\",\n                \"ogit/MARS/Machine/ram\": \"4G\",\n                \"/admin_contact\": \"contact@admin.co\"\n            }\n        ]\n    }\n]\n```\n\n---\n\n#### update_vertices\n\nUpdate a batch of vertices via\nhttps://core.arago.co/help/specs/?url=definitions/graph.yaml#/[Graph]_Entity/post__id_\n\n* Either `ogit/_id` or `ogit/_xid` must be present in each of the attribute dicts.\n\n* Attribute keys that start with `=`, `+` or `-` denote map value entries. These values have to be in the correct format\n  according to https://developer.hiro.arago.co/7.0/documentation/api/list-api/.\n\n* Attributes of the format `\"xid:[attribute_name]\": \"[ogit/_xid]\"` are resolved to `\"[attribute_name]\": \"[ogit/_id]\"` by\n  querying HIRO before executing the main command.\n\nExample payload to update four vertices:\n\n```python\ncommands: list = [\n    {\n        \"update_vertices\": [\n            {\n                \"ogit/_xid\": \"machine4\",\n                \"ogit/name\": \"machine one\",\n                \"ogit/MARS/Machine/ram\": \"4G\"\n            },\n            {\n                \"ogit/_xid\": \"machine5\",\n                \"ogit/name\": \"machine two\",\n                \"ogit/MARS/Machine/ram\": \"16G\"\n            },\n            {\n                \"ogit/_xid\": \"machine6\",\n                \"ogit/name\": \"machine three\",\n                \"ogit/MARS/Machine/ram\": \"16G\",\n                \"/admin_contact\": None\n            },\n            {\n                \"ogit/_id\": \"cju16o7cf0000mz77pbwbhf8d_ckm1z9o2m08km0781s2s7abce\",\n                \"ogit/MARS/Machine/class\": \"Linux\",\n                \"ogit/name\": \"machine three backup\",\n                \"ogit/MARS/Machine/ram\": \"8G\"\n            }\n        ]\n    }\n]\n```\n\n`\"/admin_contact\": None` from above would remove this attribute from the found vertex.\n\n---\n\n#### handle_vertices\n\nCreate or update a batch of vertices depending on the data provided in their attributes.\n\nIf the attributes for a vertex definition contain `ogit/_id` or `ogit/_xid`, an existing vertex will be updated when it\ncan be found. If these attributes are missing or no such vertex can be found but `ogit/_type` is given, a new vertex of\nthis type will be created.\n\nThe data structures are the same as in [create_vertices](#create_vertices) and [update_vertices](#update_vertices)\nabove.\n\nExample:\n\n```python\ncommands: list = [\n    {\n        \"handle_vertices\": [\n            {\n                \"ogit/_xid\": \"machine4\",\n                \"ogit/name\": \"machine one\",\n                \"ogit/MARS/Machine/ram\": \"4G\"\n            },\n            {\n                \"ogit/_xid\": \"machine5\",\n                \"ogit/_type\": \"ogit/MARS/Machine\",\n                \"ogit/name\": \"machine two\",\n                \"ogit/MARS/Machine/ram\": \"16G\"\n            },\n            {\n                \"ogit/_xid\": \"machine6\",\n                \"ogit/name\": \"machine three\",\n                \"ogit/MARS/Machine/ram\": \"16G\",\n                \"/admin_contact\": None\n            },\n            {\n                \"ogit/_id\": \"cju16o7cf0000mz77pbwbhf8d_ckm1z9o2m08km0781s2s7abce\",\n                \"ogit/MARS/Machine/class\": \"Linux\",\n                \"ogit/name\": \"machine three backup\",\n                \"ogit/MARS/Machine/ram\": \"8G\"\n            }\n        ]\n    }\n]\n```\n\n`\"/admin_contact\": None` from above would remove this attribute from the found vertex.\n\n---\n\n#### handle_vertices_combined\n\nSame as [handle_vertices](#handle_vertices) above, but also collect additional information about edge connections,\ntimeseries, data attachments and linked automation issues that might be given in their attributes.\n\nThe execution of this command has two stages:\n\n1) Use the vertex attributes and execute [handle_vertices](#handle_vertices) on _all_ vertices given, ignoring all\n   attributes that start with `_`. Store the `ogit/_id`s of the handled vertices for stage two.\n2) When stage one is finished, take those remaining attributes, reformat them if necessary and\n   execute [create_edges](#create_edges),   [add_timeseries](#add_timeseries), [add_attachments](#add_attachments) or,\n   for the automation issues, [handle_vertices](#handle_vertices)\n   with them, using the `ogit/_id`s of the associated vertices from stage one.\n\nEach stage executes its activities in parallel, so what has been written about dependencies\nat [Input Data Format](#input-data-format) still applies for each stage.\n\nThe following additional attributes are supported:\n\n`_edge_data`:\n\n* Edge attributes are given as a list with a key `_edge_data`. This list contains dicts with the following attributes:\n    * `verb`: (required) Verb for that edge for the vertex of the current row.\n    * `direction`: (\"in\"/\"out\") from the view of the current vertex. \"in\" points towards, \"out\"\n      points away from the current vertex. Default is \"out\" if this key is missing.\n    * One of the following keys is required to find the vertex to connect to:\n        * `vertex_id`: ogit/_id of the other vertex.\n        * `vertex_xid`: ogit/_xid of the other vertex.\n\n  See also [create_edges](#create_edges), but take note, that the structure of `_edge_data` is reformatted internally to\n  match the data needed for create_edges.\n\nExample for edge data:\n\n```python\ncommands: list = [\n    {\n        \"handle_vertices_combined\": [\n            {\n                \"ogit/_xid\": \"crew:NCC-1701-D:picard\",\n                \"ogit/_type\": \"ogit/Forum/Profile\",\n                \"ogit/name\": \"Jean-Luc Picard\",\n                \"ogit/Forum/username\": \"Picard\",\n                \"_edge_data\": [\n                    {\n                        \"verb\": \"ogit/Forum/mentions\",\n                        \"direction\": \"out\",\n                        \"vertex_xid\": \"crew:NCC-1701-D:data\"\n                    },\n                    {\n                        \"verb\": \"ogit/Forum/mentions\",\n                        \"direction\": \"out\",\n                        \"vertex_xid\": \"crew:NCC-1701-D:worf\"\n                    }\n                ]\n            },\n            {\n                \"ogit/_xid\": \"crew:NCC-1701-D:worf\",\n                \"ogit/_type\": \"ogit/Forum/Profile\",\n                \"ogit/name\": \"Worf\",\n                \"ogit/Forum/username\": \"Worf\",\n                \"_edge_data\": [\n                    {\n                        \"verb\": \"ogit/subscribes\",\n                        \"direction\": \"out\",\n                        \"vertex_xid\": \"crew:NCC-1701-D:picard\"\n                    }\n                ]\n            },\n            {\n                \"ogit/_xid\": \"crew:NCC-1701-D:data\",\n                \"ogit/_type\": \"ogit/Forum/Profile\",\n                \"ogit/name\": \"Data\",\n                \"ogit/Forum/username\": \"Data\",\n                \"_edge_data\": [\n                    {\n                        \"verb\": \"ogit/Forum/mentions\",\n                        \"direction\": \"out\",\n                        \"vertex_xid\": \"crew:NCC-1701-D:worf\"\n                    },\n                    {\n                        \"verb\": \"ogit/subscribes\",\n                        \"direction\": \"in\",\n                        \"vertex_xid\": \"crew:NCC-1701-D:worf\"\n                    }\n                ]\n            }\n        ]\n    }\n]\n```\n\n`_timeseries_data`:\n\n* Timeseries attributes are given as a list with a key `_timeseries_data`. This list contains dicts of\n    * `timestamp` for epoch in ms.\n    * `value` for the timeseries value.\n\n  See also [add_timeseries](#add_timeseries), but take note, that the key of the list is called just `items` there.\n\nExample for timeseries data:\n\n```python\ncommands: list = [\n    {\n        \"handle_vertices_combined\": [\n            {\n                \"ogit/_xid\": \"crew:NCC-1701-D:picard\",\n                \"ogit/_type\": \"ogit/Forum/Profile\",\n                \"ogit/name\": \"Jean-Luc Picard\",\n                \"ogit/Forum/username\": \"Picard\",\n                \"_timeseries_data\": [\n                    {\n                        \"timestamp\": \"1440035678000\",\n                        \"value\": \"Sighs\"\n                    },\n                    {\n                        \"timestamp\": \"1440035944000\",\n                        \"value\": \"Make it so!\"\n                    }\n                ]\n            },\n            {\n                \"ogit/_xid\": \"crew:NCC-1701-D:worf\",\n                \"ogit/_type\": \"ogit/Forum/Profile\",\n                \"ogit/name\": \"Worf\",\n                \"ogit/Forum/username\": \"Worf\",\n                \"_timeseries_data\": [\n                    {\n                        \"timestamp\": \"1440035678000\",\n                        \"value\": \"Grunts\"\n                    },\n                    {\n                        \"timestamp\": \"1440035944000\",\n                        \"value\": \"Aye captain\"\n                    }\n                ]\n            }\n        ]\n    }\n]\n```\n\n`_content_data`:\n\n* Content attributes are given as a dict with a key `_content_data` which contains:\n    * `data`: Content to upload. This can be anything the Python library `requests` supports as attribute `data=`\n      in  `requests.post(data=...)`. If you set an IO object as data, it will be streamed. Also take a look at the\n      class `AbstractIOCarrier` to transparently handle opening and closing of IO sources - see [IOCarrier](#iocarrier).\n    * `mimetype`: (optional) Content-Type of the content.\n\n  See also [add_attachments](#add_attachments)\n\nExample for content/attachment data:\n\n```python\ncommands: list = [\n    {\n        \"handle_vertices_combined\": [\n            {\n                \"ogit/_xid\": \"attachment:arago:test:0:lorem-ipsum\",\n                \"ogit/_type\": \"ogit/Attachment\",\n                \"ogit/name\": \"test text\",\n                \"ogit/type\": \"text\",\n                \"_content_data\": {\n                    \"mimetype\": \"text/plain\",\n                    \"data\": \"Auch gibt es niemanden, der den Schmerz an sich liebt, sucht oder wünscht, nur, weil er Schmerz ist, es sei denn, es kommt zu zufälligen Umständen, in denen Mühen und Schmerz ihm große Freude bereiten können.\\n\\nUm ein triviales Beispiel zu nehmen, wer von uns unterzieht sich je anstrengender körperlicher Betätigung, außer um Vorteile daraus zu ziehen? Aber wer hat irgend ein Recht, einen Menschen zu tadeln, der die Entscheidung trifft, eine Freude zu genießen, die keine unangenehmen Folgen hat, oder einen, der Schmerz vermeidet, welcher keine daraus resultierende Freude nach sich zieht? Auch gibt es niemanden, der den Schmerz\"\n                }\n            },\n            {\n                \"ogit/_xid\": \"attachment:arago:test:1:lorem-ipsum\",\n                \"ogit/_type\": \"ogit/Attachment\",\n                \"ogit/name\": \"text text from IO\",\n                \"ogit/type\": \"text\",\n                \"_content_data\": {\n                    \"mimetype\": \"text/plain\",\n                    \"data\": BasicFileIOCarrier('<filename>')\n                }\n            }\n        ]\n    }\n]\n```\n\n`_issue_data`:\n\n* Connected issues are given as a dict or a list of dicts using the key `_issue_data` which contains the attributes for\n  one or more `ogit/Automation/AutomationIssue`. Attributes of the issue can be set freely inside `_issue_data` (\n  i.e. `ogit/_scope`, `ogit/_owner` or process variables like `/ProcessIssue` etc.).\n    * The following attributes will always be set, overwriting any other values given:\n        * `ogit/_type`: Will be set automatically to `ogit/Automation/AutomationIssue`.\n        * `ogit/Automation/originNode`: Will be set to the `ogit/_id` of the vertex that has been created in stage 1).\n\n  __Note__\n\n  This method is meant as a convenience to create `ogit/Automation/AutomationIssue` linked to the vertex created just\n  before in stage 1). If you want to connect the `ogit/Automation/AutomationIssue` to another vertex, create the issues\n  as vertices on their own and do not use `handle_vertices_combined` but `create_vertices` for them. To find\n  the `ogit/Automation/originNode` of a vertex with an unknown `ogit/_id`, you can use the attribute\n  key `xid:ogit/Automation/originNode` to find the vertex via its `ogit/_xid`. See [create_vertices](#create_vertices)\n  for more information about that special key.\n\nSee also [create_vertices](#create_vertices)\n\nExample for issue data:\n\n```python\ncommands: list = [\n    {\n        \"handle_vertices_combined\": [\n            {\n                \"ogit/_xid\": \"crew:NCC-1701-D:picard\",\n                \"ogit/_type\": \"ogit/Forum/Profile\",\n                \"ogit/name\": \"Jean-Luc Picard\",\n                \"ogit/Forum/username\": \"Picard\",\n                \"_issue_data\": {\n                    \"ogit/subject\": \"Handle Worf.\",\n                    \"/ProcessIssue\": \"processme\"\n                }\n            },\n            {\n                \"ogit/_xid\": \"crew:NCC-1701-D:worf\",\n                \"ogit/_type\": \"ogit/Forum/Profile\",\n                \"ogit/name\": \"Worf\",\n                \"ogit/Forum/username\": \"Worf\",\n                \"_issue_data\": [\n                    {\n                        \"ogit/subject\": \"Listen to Picard.\",\n                        \"/ProcessIssue\": \"processme\"\n                    },\n                    {\n                        \"ogit/subject\": \"Obey Picard.\",\n                        \"/ProcessIssue\": \"processme\"\n                    }\n                ]\n            }\n        ]\n    }\n]\n```\n\nAny of the special attributes above can be combined into one data structure for this command if needed:\n\n```python\ncommands: list = [\n    {\n        \"handle_vertices_combined\": [\n            {\n                \"<vertex attribute>\": \"<some value>\",\n                \"_edge_data\": {\n                },\n                \"_timeseries_data\": {\n                },\n                \"_content_data\": {\n                }\n                \"_issue_data\": {\n                }\n            }\n        ]\n    }\n]\n```\n\n---\n\n#### delete_vertices\n\nDelete a batch of vertices via\nhttps://core.arago.co/help/specs/?url=definitions/graph.yaml#/[Graph]_Entity/delete__id_\n\nEither `ogit/_id` or `ogit/_xid` must be present in each of the attribute dicts.\n\nExample to delete four vertices:\n\n```python\ncommands: list = [\n    {\n        \"delete_vertices\": [\n            {\n                \"ogit/_xid\": \"machine4\"\n            },\n            {\n                \"ogit/_xid\": \"machine5\"\n            },\n            {\n                \"ogit/_xid\": \"machine6\"\n            },\n            {\n                \"ogit/_id\": \"cju16o7cf0000mz77pbwbhf8d_ckm1z9o2m08km0781s2s7abce\"\n            }\n        ]\n    }\n]\n```\n\n---\n\n#### create_edges\n\nConnect vertices via\nhttps://core.arago.co/help/specs/?url=definitions/graph.yaml#/[Graph]_Verb/post_connect__type_\n\nEach attribute dict needs the following keys:\n\n* `from:ogit/_id` or `from:ogit/_xid`\n* `verb`: The ogit verb for the edge\n* `to:ogit/_id` or `to:ogit/_xid`\n\nExample:\n\n```python\ncommands: list = [\n    {\n        \"create_edges\": [\n            {\n                \"from:ogit/_xid\": \"crew:NCC-1701-D:worf\",\n                \"verb\": \"ogit/subscribes\",\n                \"to:ogit/_xid\": \"crew:NCC-1701-D:picard\"\n            },\n            {\n                \"from:ogit/_xid\": \"crew:NCC-1701-D:worf\",\n                \"verb\": \"ogit/subscribes\",\n                \"to:ogit/_xid\": \"crew:NCC-1701-D:data\"\n            },\n            {\n                \"from:ogit/_xid\": \"crew:NCC-1701-D:picard\",\n                \"verb\": \"ogit/Forum/mentions\",\n                \"to:ogit/_xid\": \"crew:NCC-1701-D:data\"\n            },\n            {\n                \"from:ogit/_xid\": \"crew:NCC-1701-D:picard\",\n                \"verb\": \"ogit/Forum/mentions\",\n                \"to:ogit/_xid\": \"crew:NCC-1701-D:worf\"\n            },\n            {\n                \"from:ogit/_xid\": \"crew:NCC-1701-D:data\",\n                \"verb\": \"ogit/Forum/mentions\",\n                \"to:ogit/_xid\": \"crew:NCC-1701-D:worf\"\n            }\n        ]\n    }\n]\n```\n\n---\n\n#### delete_edges\n\nDelete connections between vertices via\nhttps://core.arago.co/help/specs/?url=definitions/graph.yaml#/[Graph]_Verb/delete__id_\n\nThe data structure of the payload is the same as with [create_edges](#create_edges).\n\nExample:\n\n```python\ncommands: list = [\n    {\n        \"delete_edges\": [\n            {\n                \"from:ogit/_xid\": \"crew:NCC-1701-D:worf\",\n                \"verb\": \"ogit/subscribes\",\n                \"to:ogit/_xid\": \"crew:NCC-1701-D:picard\"\n            },\n            {\n                \"from:ogit/_xid\": \"crew:NCC-1701-D:worf\",\n                \"verb\": \"ogit/subscribes\",\n                \"to:ogit/_xid\": \"crew:NCC-1701-D:data\"\n            },\n            {\n                \"from:ogit/_xid\": \"crew:NCC-1701-D:picard\",\n                \"verb\": \"ogit/Forum/mentions\",\n                \"to:ogit/_xid\": \"crew:NCC-1701-D:data\"\n            },\n            {\n                \"from:ogit/_xid\": \"crew:NCC-1701-D:picard\",\n                \"verb\": \"ogit/Forum/mentions\",\n                \"to:ogit/_xid\": \"crew:NCC-1701-D:worf\"\n            },\n            {\n                \"from:ogit/_xid\": \"crew:NCC-1701-D:data\",\n                \"verb\": \"ogit/Forum/mentions\",\n                \"to:ogit/_xid\": \"crew:NCC-1701-D:worf\"\n            }\n        ]\n    }\n]\n```\n\n---\n\n#### add_timeseries\n\nAdd timeseries data to a vertex with \"ogit/_type\" of \"ogit/Timeseries\" via\nhttps://core.arago.co/help/specs/?url=definitions/graph.yaml#/[Storage]_Timeseries/post__id__values\n\nEach attribute dict needs the following keys:\n\n* `ogit/_id` or `ogit/_xid` with valid ids for vertices.\n* `items` a list of timeseries items for this vertex, containing dicts of:\n    * `timestamp` for epoch in ms.\n    * `value` for the timeseries value.\n\nExample:\n\n```python\ncommands: list = [\n    {\n        \"add_timeseries\": [\n            {\n                \"ogit/_xid\": \"machine4\",\n                \"items\": [\n                    {\n                        \"timestamp\": \"1440035678000\",\n                        \"value\": \"Value 4A\"\n                    },\n                    {\n                        \"timestamp\": \"1440035944000\",\n                        \"value\": \"Value 4B\"\n                    }\n                ]\n            },\n            {\n                \"ogit/_xid\": \"machine5\",\n                \"items\": [\n                    {\n                        \"timestamp\": \"1440035678000\",\n                        \"value\": \"Value 5A\"\n                    },\n                    {\n                        \"timestamp\": \"1440035944000\",\n                        \"value\": \"Value 5B\"\n                    }\n                ]\n            }\n        ]\n    }\n]\n```\n\n---\n\n#### add_attachments\n\nAdd binary data to a vertex with \"ogit/_type\" of \"ogit/Attachment\" by using\nhttps://core.arago.co/help/specs/?url=definitions/graph.yaml#/[Storage]_Blob/post__id__content\n\n* `ogit/_id`or `ogit/_xid`\n* `_content_data`: A dict with the following keys:\n    * `data`: Content to upload. This can be anything the Python library `requests` supports as attribute `data=`\n      in  `requests.post(data=...)`. If you set an IO object as data, it will be streamed. Also take a look at the\n      class `AbstractIOCarrier` to transparently handle opening and closing of IO sources - see [IOCarrier](#iocarrier).\n    * `mimetype`: (optional) Content-Type of the content.\n\nExample:\n\n```python\ncommands: list = [\n    {\n        \"add_attachments\": [\n            {\n                \"ogit/_xid\": \"attachment:arago:test:0:lorem-ipsum\",\n                \"_content_data\": {\n                    \"mimetype\": \"text/plain\",\n                    \"data\": \"Auch gibt es niemanden, der den Schmerz an sich liebt, sucht oder wünscht, nur, weil er Schmerz ist, es sei denn, es kommt zu zufälligen Umständen, in denen Mühen und Schmerz ihm große Freude bereiten können.\\n\\nUm ein triviales Beispiel zu nehmen, wer von uns unterzieht sich je anstrengender körperlicher Betätigung, außer um Vorteile daraus zu ziehen? Aber wer hat irgend ein Recht, einen Menschen zu tadeln, der die Entscheidung trifft, eine Freude zu genießen, die keine unangenehmen Folgen hat, oder einen, der Schmerz vermeidet, welcher keine daraus resultierende Freude nach sich zieht? Auch gibt es niemanden, der den Schmerz\"\n                }\n            },\n            {\n                \"ogit/_xid\": \"attachment:arago:test:1:lorem-ipsum\",\n                \"_content_data\": {\n                    \"mimetype\": \"text/plain\",\n                    \"data\": BasicFileIOCarrier('<filename>')\n                }\n            }\n        ]\n    }\n]\n```\n\n\n---\n# CHANGELOG\n---\n# v1.0.5\n\n* Update requirements.txt to use the most recent hiro-graph-client of version 5.x.x.\n\n\n# v1.0.4\n\n* Update documentation in README.md. Added missing key \"order\" in result data.\n\n# v1.0.3\n\n* Allow continuing of read-in-iteration when the iterator is yielding a dict {\"error\", Exception}.\n\n* The results now contain a field \"order\" to get the order in which the commands have been put into the request_queue.\n\n* Added logging of fatal errors while reading from the queues. This also prevents possible deadlocks.\n\n# v1.0.2\n\n* [bugfix] Avoid UnboundLocalError when exception occurs immediately at iterating over batch data.\n\n# v1.0.1\n\n[bugfix] Avoid read-in deadlock\n\n* When an error is thrown while data is read in, the queues\n  within HiroGraphBatch need to be closed cleanly or a\n  deadlock will occur. Fixed.\n\n# v1.0.0\n\nCreated project by splitting `batchclient.py` from [hiro-graph-client](https://github.com/arago/hiro-client-python).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/arago/hiro-batch-client-python",
    "keywords": "arago HIRO7 API REST batch",
    "license": "MIT",
    "maintainer": "Wolfgang Hübner",
    "maintainer_email": "",
    "name": "hiro-batch-client",
    "package_url": "https://pypi.org/project/hiro-batch-client/",
    "platform": "",
    "project_url": "https://pypi.org/project/hiro-batch-client/",
    "project_urls": {
      "Changelog": "https://github.com/arago/hiro-batch-client-python/blob/master/CHANGELOG.md",
      "Documentation": "https://github.com/arago/hiro-batch-client-python/blob/master/src/README.md",
      "GitHub": "https://github.com/arago/hiro-batch-client-python",
      "Homepage": "https://github.com/arago/hiro-batch-client-python"
    },
    "release_url": "https://pypi.org/project/hiro-batch-client/1.0.5/",
    "requires_dist": [
      "wheel",
      "requests",
      "hiro-graph-client (>=5.0.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "Hiro Client for batch commands against the Graph REST API of HIRO 7",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12786744,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a912e7443bd78488b088ac6e6c951443319edb0367fde07cd74792e82cc19b38",
          "md5": "17128b0297a4c0233e5ba27af4fe785c",
          "sha256": "b28f48d84291193c63d79e7dc064cb1638160f49dca1a83bc04e2ab1c88ca78c"
        },
        "downloads": -1,
        "filename": "hiro_batch_client-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17128b0297a4c0233e5ba27af4fe785c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17217,
        "upload_time": "2022-01-21T17:32:29",
        "upload_time_iso_8601": "2022-01-21T17:32:29.425524Z",
        "url": "https://files.pythonhosted.org/packages/a9/12/e7443bd78488b088ac6e6c951443319edb0367fde07cd74792e82cc19b38/hiro_batch_client-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cfda0b5ccaf0ca2f97df82109d571459008f1e152aaef0c8f03c294f80131c5",
          "md5": "604b67cd1cd707925781c1beef0ffb8c",
          "sha256": "9c2ea074bf237c85e59140daf5a89bf3eafa2e0ed2c53f8b6a61d65a24910da1"
        },
        "downloads": -1,
        "filename": "hiro_batch_client-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "604b67cd1cd707925781c1beef0ffb8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28297,
        "upload_time": "2022-01-21T17:32:31",
        "upload_time_iso_8601": "2022-01-21T17:32:31.173233Z",
        "url": "https://files.pythonhosted.org/packages/2c/fd/a0b5ccaf0ca2f97df82109d571459008f1e152aaef0c8f03c294f80131c5/hiro_batch_client-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "378f231105b24d7e9375ebe9c809b53dc25957201e2b4dc615fe5a0826c478c0",
          "md5": "3b72c76ee0c822e415a8643cce570da4",
          "sha256": "dc9a290009548acc7a972e498982dbca25776d316feb19563f216fc37aa1b0ac"
        },
        "downloads": -1,
        "filename": "hiro_batch_client-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b72c76ee0c822e415a8643cce570da4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17267,
        "upload_time": "2022-01-21T18:00:09",
        "upload_time_iso_8601": "2022-01-21T18:00:09.321983Z",
        "url": "https://files.pythonhosted.org/packages/37/8f/231105b24d7e9375ebe9c809b53dc25957201e2b4dc615fe5a0826c478c0/hiro_batch_client-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36a06a0c248b0fa53a672853ccabb9a0ca88f2b918a5a25719270667bd385ad4",
          "md5": "b30dc1a1acbcf6eb2471c79dbea55f61",
          "sha256": "de0f01adc2c29c6496d508f4129058f9321ec23cfcf00ac4e7c6a5c30cfd2190"
        },
        "downloads": -1,
        "filename": "hiro_batch_client-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b30dc1a1acbcf6eb2471c79dbea55f61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28380,
        "upload_time": "2022-01-21T18:00:11",
        "upload_time_iso_8601": "2022-01-21T18:00:11.628015Z",
        "url": "https://files.pythonhosted.org/packages/36/a0/6a0c248b0fa53a672853ccabb9a0ca88f2b918a5a25719270667bd385ad4/hiro_batch_client-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "100fe1a8a4d83de301a5f4851141a40202d8b645dec779da2bb86f9a986f89d9",
          "md5": "ee8e8895d259ad0ccaa50ad2af21a728",
          "sha256": "6f1daaed06ffad2c23945038a2f37bebb85d595178a33e29489bbfdddbc949b6"
        },
        "downloads": -1,
        "filename": "hiro_batch_client-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee8e8895d259ad0ccaa50ad2af21a728",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 17978,
        "upload_time": "2022-01-24T18:04:21",
        "upload_time_iso_8601": "2022-01-24T18:04:21.884197Z",
        "url": "https://files.pythonhosted.org/packages/10/0f/e1a8a4d83de301a5f4851141a40202d8b645dec779da2bb86f9a986f89d9/hiro_batch_client-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a7529763d4166682ff5f753f1e1b606cbed5928b3bf1cc4123970f8ba315f40",
          "md5": "77ab39d7a70b6f3f7d1d8ce01d2004e9",
          "sha256": "2266f4e484e21af99a3867e79098107a30976296781c6c69f75077e3ebbfd55f"
        },
        "downloads": -1,
        "filename": "hiro_batch_client-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "77ab39d7a70b6f3f7d1d8ce01d2004e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29261,
        "upload_time": "2022-01-24T18:04:23",
        "upload_time_iso_8601": "2022-01-24T18:04:23.664731Z",
        "url": "https://files.pythonhosted.org/packages/2a/75/29763d4166682ff5f753f1e1b606cbed5928b3bf1cc4123970f8ba315f40/hiro_batch_client-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca86ba4c4727e909d4d6f03c24ef884efb6d37f7dc2598351da37fc0dea10444",
          "md5": "99ff83f0effb54fee50b91b868a404ad",
          "sha256": "dd818adcb3e185fe88cb446f3d62d64f4754eb75cd9e8342ac7bb26a308e401c"
        },
        "downloads": -1,
        "filename": "hiro_batch_client-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "99ff83f0effb54fee50b91b868a404ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18060,
        "upload_time": "2022-01-26T10:44:24",
        "upload_time_iso_8601": "2022-01-26T10:44:24.175405Z",
        "url": "https://files.pythonhosted.org/packages/ca/86/ba4c4727e909d4d6f03c24ef884efb6d37f7dc2598351da37fc0dea10444/hiro_batch_client-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50292858d87dd3d8d0f04ae77298cc0f5e4f7321674cf4d8800d461293b346de",
          "md5": "57b81c022718bbfb409dda67b9fb5372",
          "sha256": "e31bae556e4be6add23d146b6b325129536e8df64f3a2ec3ef7fefcdf1c54807"
        },
        "downloads": -1,
        "filename": "hiro_batch_client-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "57b81c022718bbfb409dda67b9fb5372",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29449,
        "upload_time": "2022-01-26T10:44:26",
        "upload_time_iso_8601": "2022-01-26T10:44:26.242291Z",
        "url": "https://files.pythonhosted.org/packages/50/29/2858d87dd3d8d0f04ae77298cc0f5e4f7321674cf4d8800d461293b346de/hiro_batch_client-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "211308191a6b5a567137a1ca6bee369a0c2c8f621895a02895fe3b64201b51fe",
          "md5": "32602ccf5b38b1cb766af03de2874866",
          "sha256": "11ac276a656dfb7852fd273a0a82fdd0a5aaed8377ac31ad0304b5d40fee2319"
        },
        "downloads": -1,
        "filename": "hiro_batch_client-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "32602ccf5b38b1cb766af03de2874866",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18114,
        "upload_time": "2022-02-04T11:52:02",
        "upload_time_iso_8601": "2022-02-04T11:52:02.040211Z",
        "url": "https://files.pythonhosted.org/packages/21/13/08191a6b5a567137a1ca6bee369a0c2c8f621895a02895fe3b64201b51fe/hiro_batch_client-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aad4751fd361db3fd7bc2b6e87cbab364736deb8cb19b9e4d77339dcf2620258",
          "md5": "63a684295b3066eadbb35b516bec624d",
          "sha256": "1ef7396b7c533c0d1f53f134ae830f2fa489a01c3edf0ca8d639adab93e2e636"
        },
        "downloads": -1,
        "filename": "hiro_batch_client-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "63a684295b3066eadbb35b516bec624d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29574,
        "upload_time": "2022-02-04T11:52:03",
        "upload_time_iso_8601": "2022-02-04T11:52:03.994042Z",
        "url": "https://files.pythonhosted.org/packages/aa/d4/751fd361db3fd7bc2b6e87cbab364736deb8cb19b9e4d77339dcf2620258/hiro_batch_client-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "211308191a6b5a567137a1ca6bee369a0c2c8f621895a02895fe3b64201b51fe",
        "md5": "32602ccf5b38b1cb766af03de2874866",
        "sha256": "11ac276a656dfb7852fd273a0a82fdd0a5aaed8377ac31ad0304b5d40fee2319"
      },
      "downloads": -1,
      "filename": "hiro_batch_client-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "32602ccf5b38b1cb766af03de2874866",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 18114,
      "upload_time": "2022-02-04T11:52:02",
      "upload_time_iso_8601": "2022-02-04T11:52:02.040211Z",
      "url": "https://files.pythonhosted.org/packages/21/13/08191a6b5a567137a1ca6bee369a0c2c8f621895a02895fe3b64201b51fe/hiro_batch_client-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aad4751fd361db3fd7bc2b6e87cbab364736deb8cb19b9e4d77339dcf2620258",
        "md5": "63a684295b3066eadbb35b516bec624d",
        "sha256": "1ef7396b7c533c0d1f53f134ae830f2fa489a01c3edf0ca8d639adab93e2e636"
      },
      "downloads": -1,
      "filename": "hiro_batch_client-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "63a684295b3066eadbb35b516bec624d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 29574,
      "upload_time": "2022-02-04T11:52:03",
      "upload_time_iso_8601": "2022-02-04T11:52:03.994042Z",
      "url": "https://files.pythonhosted.org/packages/aa/d4/751fd361db3fd7bc2b6e87cbab364736deb8cb19b9e4d77339dcf2620258/hiro_batch_client-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}