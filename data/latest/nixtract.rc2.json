{
  "info": {
    "author": "Dan Gale",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# nixtract\n\n<p align=\"center\">\n  <img src=\"resources/logo.png\" alt=\"logo\" width=\"500\"/>\n</p>\n\n`nixtract` (**N**euro**I**maging e**XTRACT**ion) is a collection of simple command-line tools that provide a decently unified interface to extract and process timeseries data from NIFTI, GIFTI, and CIFTI neuroimaging files. \n\nThe primary goal of `nixtract` is to provide the user with ready-to-use timeseries data for a variety of fMRI analyses. `nixtract` can extract the mean timeseries for each region in a provided atlas, or `nixtract` can also extract the timeseries of individual voxels/vertices within a specified region. These timeseries can be flexibly denoised using temporal filtering/detrending, spatial smoothing, and confound regression, thus providing the user fully processed timeseries for subsequent analysis.   \n\n## Installation\n\n`nixtract` can be installed via `pip` using the following command:\n\n```\npip install nixtract\n```\n\n## Command Line Interfaces\n\nNixtract has a command-line interface (CLI) for each file type, as overviewed below:\n\n### NIFTIs\n\nData can be extract from NIFTI (`.nii` or `.nii.gz`) data using `nixtract-nifti`:\n\n```\nusage: nixtract-nifti [-h] [--input_files INPUT_FILES [INPUT_FILES ...]]\n                      [--roi_file ROI_FILE] [--mask_img MASK_IMG]\n                      [--labels LABELS [LABELS ...]] [--as_voxels]\n                      [--radius radius] [--allow_overlap]\n                      [--smoothing_fwhm SMOOTHING_FWHM]\n                      [--regressor_files REGRESSOR_FILES [REGRESSOR_FILES ...]]\n                      [--regressors REGRESSORS [REGRESSORS ...]]\n                      [--standardize] [--t_r T_R] [--high_pass HIGH_PASS]\n                      [--low_pass LOW_PASS] [--detrend]\n                      [--discard_scans DISCARD_SCANS] [--n_jobs N_JOBS]\n                      [--n_decimals N_DECIMALS] [-c CONFIG] [-v]\n                      out_dir\n\npositional arguments:\n  out_dir               The path to the output directory. Created if itdoes\n                        not already exist\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --input_files INPUT_FILES [INPUT_FILES ...]\n                        One or more input NIFTI images (.nii.gz only). Can\n                        also be a single string with wildcards (*) to specify\n                        all files matching the file pattern. If so, these\n                        files are naturally sorted by file name prior to\n                        extraction\n  --roi_file ROI_FILE   Parameter that defines the region(s) of interest. This\n                        can be 1) a file path to NIFTI image that is an atlas\n                        of multiple regions, a probabilistic atlas, or a\n                        binary mask of one region, 2) a nilearn query string\n                        formatted as `nilearn:<atlas-name>:<atlas-parameters>\n                        3) a file path to a .tsv file that has x, y, z columns\n                        that contain coordinates in MNI space. Refer to online\n                        documentation for more detail and how these options\n                        map onto the underlying nilearn masker classes\n  --mask_img MASK_IMG   File path of a binary mask a to be used when\n                        `roi_file` is a) an multi-region atlas or b) a list of\n                        coordinates. This will restrict extraction to only\n                        voxels within the mask. If `roi_file` is a single\n                        region binary mask, this will be ignored\n  --labels LABELS [LABELS ...]\n                        Labels corresponding to the region numbers in\n                        `roi_file`. Can either be a) a list of strings, b) or\n                        a .tsv file that contains a `Labels` column. Labels\n                        must be sorted in ascending order to correctly\n                        correspond to the atlas indices. The number of labels\n                        provided must match the number of non-zero indices in\n                        `roi_file`. Numeric indices are used if not provided\n  --as_voxels           Extract the timeseries of each voxel instead in a a\n                        region rather than the mean timeseries. This is only\n                        available for single region (binary) masks. Default:\n                        False\n  --radius radius       Set the radius of the spheres (in mm) centered on the\n                        coordinates provided in `roi_file`. Only applicable\n                        when a coordinate .tsv file is passed to `roi_file`;\n                        otherwise, this will be ignored. If not set, the\n                        timeseries of each coordinate is extracted (nilearn\n                        default)\n  --allow_overlap       Permit overlapping spheres when coordinates are\n                        provided to `roi_file` and `radius` is provided\n  --smoothing_fwhm SMOOTHING_FWHM\n                        Smoothing kernel FWHM (in mm) if spatial smoothing is\n                        desired.\n  --regressor_files REGRESSOR_FILES [REGRESSOR_FILES ...]\n                        One or more tab-separated files with regressors in\n                        each column. The number of files must match the number\n                        of input files and must be in the same order. The\n                        number of rows in each file must match the number of\n                        timepoints in their respective input files. Can also\n                        be a single string with a wildcard (*) to specify all\n                        files matching the file pattern. If so, these files\n                        are naturally sorted by file name prior to extraction.\n                        Double check to make sure these are correctly aligned\n                        with the input files (see the parameters.json in the\n                        output)\n  --regressors REGRESSORS [REGRESSORS ...]\n                        Regressor names or strategy to use for confound\n                        regression. Must be a) list of specified column names\n                        in all of the regressor_files, b) a predefined\n                        strategy by load_confounds, or c) a list compatible\n                        with load_confounds flexible denoising strategy\n                        options. See the documentation\n                        https://github.com/SIMEXP/load_confounds. If no\n                        regressor information provided but regressor files are\n                        provided, then all regressors in regressor files are\n                        used\n  --standardize         Whether to standardize (z-score) each timeseries.\n                        Default: False\n  --t_r T_R             The TR of the functional files, specified in seconds.\n                        Required if temporal filtering/detrending is specified\n  --high_pass HIGH_PASS\n                        High pass filter cut off in Hertz. Do not use if high\n                        pass cosine regressors are specified in `regressors`\n  --low_pass LOW_PASS   Low pass filter cut off in Hertz. Do not use if low\n                        pass cosine regressors are specified in `regressors`\n  --detrend             Temporally detrend the data. Default: False\n  --discard_scans DISCARD_SCANS\n                        Discard the first N scans of each functional image\n  --n_jobs N_JOBS       The number of CPUs to use if parallelization is\n                        desired. Default: 1 (serial processing)\n  --n_decimals N_DECIMALS\n                        Specify the number of decimals for output timeseries\n                        files. Fewer decimals are recommended for reducing\n                        disk-space, particularly for large extractions\n  -c CONFIG, --config CONFIG\n                        A configuration .json file to pass parameters This\n                        will overwrite command-line arguments if the same\n                        parameter is specified in both. See online\n                        documentation for formatting and what keys to include\n  -v, --verbose         Print out extraction progress\n```\n\n### GIFTIs\n\nData can be extract from GIFTI functional files (`.func.gii`) data using `nixtract-gifti`:\n\n```\nusage: nixtract-gifti [-h] [--lh_files LH_FILES [LH_FILES ...]]\n                      [--rh_files RH_FILES [RH_FILES ...]]\n                      [--lh_roi_file LH_ROI_FILE] [--rh_roi_file roi_file]\n                      [--as_vertices] [--denoise-pre-extract]\n                      [--regressor_files REGRESSOR_FILES [REGRESSOR_FILES ...]]\n                      [--regressors REGRESSORS [REGRESSORS ...]]\n                      [--standardize] [--t_r T_R] [--high_pass HIGH_PASS]\n                      [--low_pass LOW_PASS] [--detrend]\n                      [--discard_scans DISCARD_SCANS] [--n_jobs N_JOBS]\n                      [--n_decimals N_DECIMALS] [-c CONFIG] [-v]\n                      out_dir\n\npositional arguments:\n  out_dir               The path to the output directory. Created if itdoes\n                        not already exist\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --lh_files LH_FILES [LH_FILES ...]\n                        One or more input functional GIFTI files (.func.gii)\n                        for the left hemisphere. Can also be a single string\n                        with wildcards (*) to specify all files matching the\n                        file pattern. If so, these files are naturally sorted\n                        by file name prior to extraction\n  --rh_files RH_FILES [RH_FILES ...]\n                        One or more input functional GIFTI files (.func.gii)\n                        for the right hemisphere. Can also be a single string\n                        with wildcards (*) to specify all files matching the\n                        file pattern. If so, these files are naturally sorted\n                        by file name prior to extraction\n  --lh_roi_file LH_ROI_FILE\n                        A label GIFTI file (.label.gii) or a Freesurfer\n                        annotation file (.annot) for the left hemipshere. Must\n                        include one or more labels\n  --rh_roi_file roi_file\n                        A label GIFTI file (.label.gii) or a Freesurfer\n                        annotation file (.annot) for the right hemipshere.\n                        Must include one or more labels\n  --as_vertices         Extract the timeseries of each vertex in a region\n                        rather than the mean timeseries. This is only\n                        available for when `lh_roi_file` and/or `rh_roi_file`\n                        are a single region, i.e. a binary mask. Default:\n                        False\n  --denoise-pre-extract\n                        Denoise data (e.g., filtering, confound regression)\n                        before timeseries extraction. Otherwise, denoising is\n                        done on the extracted timeseries, which is consistent\n                        with nilearn and is more computationally efficient.\n                        Default: False\n  --regressor_files REGRESSOR_FILES [REGRESSOR_FILES ...]\n                        One or more tab-separated files with regressors in\n                        each column. The number of files must match the number\n                        of input files and must be in the same order. The\n                        number of rows in each file must match the number of\n                        timepoints in their respective input files. Can also\n                        be a single string with a wildcard (*) to specify all\n                        files matching the file pattern. If so, these files\n                        are naturally sorted by file name prior to extraction.\n                        Double check to make sure these are correctly aligned\n                        with the input files (see the parameters.json in the\n                        output)\n  --regressors REGRESSORS [REGRESSORS ...]\n                        Regressor names or strategy to use for confound\n                        regression. Must be a) list of specified column names\n                        in all of the regressor_files, b) a predefined\n                        strategy by load_confounds, or c) a list compatible\n                        with load_confounds flexible denoising strategy\n                        options. See the documentation\n                        https://github.com/SIMEXP/load_confounds. If no\n                        regressor information provided but regressor files are\n                        provided, then all regressors in regressor files are\n                        used\n  --standardize         Whether to standardize (z-score) each timeseries.\n                        Default: False\n  --t_r T_R             The TR of the functional files, specified in seconds.\n                        Required if temporal filtering/detrending is specified\n  --high_pass HIGH_PASS\n                        High pass filter cut off in Hertz. Do not use if high\n                        pass cosine regressors are specified in `regressors`\n  --low_pass LOW_PASS   Low pass filter cut off in Hertz. Do not use if low\n                        pass cosine regressors are specified in `regressors`\n  --detrend             Temporally detrend the data. Default: False\n  --discard_scans DISCARD_SCANS\n                        Discard the first N scans of each functional image\n  --n_jobs N_JOBS       The number of CPUs to use if parallelization is\n                        desired. Default: 1 (serial processing)\n  --n_decimals N_DECIMALS\n                        Specify the number of decimals for output timeseries\n                        files. Fewer decimals are recommended for reducing\n                        disk-space, particularly for large extractions\n  -c CONFIG, --config CONFIG\n                        A configuration .json file to pass parameters This\n                        will overwrite command-line arguments if the same\n                        parameter is specified in both. See online\n                        documentation for formatting and what keys to include\n  -v, --verbose         Print out extraction progress\n\n```\n\n### CIFTIs\n\nData can be extract from CIFTI functional files (`.dtseries.nii`) data using `nixtract-cifti`:\n\n```\nusage: nixtract-cifti [-h] [--input_files INPUT_FILES [INPUT_FILES ...]]\n                      [--roi_file ROI_FILE] [--as_vertices]\n                      [--denoise-pre-extract]\n                      [--regressor_files REGRESSOR_FILES [REGRESSOR_FILES ...]]\n                      [--regressors REGRESSORS [REGRESSORS ...]]\n                      [--standardize] [--t_r T_R] [--high_pass HIGH_PASS]\n                      [--low_pass LOW_PASS] [--detrend]\n                      [--discard_scans DISCARD_SCANS] [--n_jobs N_JOBS]\n                      [--n_decimals N_DECIMALS] [-c CONFIG] [-v]\n                      out_dir\n\npositional arguments:\n  out_dir               The path to the output directory. Created if itdoes\n                        not already exist\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --input_files INPUT_FILES [INPUT_FILES ...]\n                        One or more input CIFTI dtseries files\n                        (.dtseries.nii). Can also be a single string with\n                        wildcards (*) to specify all files matching the file\n                        pattern. If so, these files are naturally sorted by\n                        file name prior to extraction\n  --roi_file ROI_FILE   CIFTI dlabel file (.dlabel.nii) with one or more\n                        labels\n  --as_vertices         Extract the timeseries of each vertex in a a region\n                        rather than the mean timeseries.This is only available\n                        for when `roi_file` is single region, i.e. a binary\n                        mask. Default: False\n  --denoise-pre-extract\n                        Denoise data (e.g., filtering, confound regression)\n                        before timeseries extraction. Otherwise, denoising is\n                        done on the extracted timeseries, which is consistent\n                        with nilearn and is more computationally efficient.\n                        Default: False\n  --regressor_files REGRESSOR_FILES [REGRESSOR_FILES ...]\n                        One or more tab-separated files with regressors in\n                        each column. The number of files must match the number\n                        of input files and must be in the same order. The\n                        number of rows in each file must match the number of\n                        timepoints in their respective input files. Can also\n                        be a single string with a wildcard (*) to specify all\n                        files matching the file pattern. If so, these files\n                        are naturally sorted by file name prior to extraction.\n                        Double check to make sure these are correctly aligned\n                        with the input files (see the parameters.json in the\n                        output)\n  --regressors REGRESSORS [REGRESSORS ...]\n                        Regressor names or strategy to use for confound\n                        regression. Must be a) list of specified column names\n                        in all of the regressor_files, b) a predefined\n                        strategy by load_confounds, or c) a list compatible\n                        with load_confounds flexible denoising strategy\n                        options. See the documentation\n                        https://github.com/SIMEXP/load_confounds. If no\n                        regressor information provided but regressor files are\n                        provided, then all regressors in regressor files are\n                        used\n  --standardize         Whether to standardize (z-score) each timeseries.\n                        Default: False\n  --t_r T_R             The TR of the functional files, specified in seconds.\n                        Required if temporal filtering/detrending is specified\n  --high_pass HIGH_PASS\n                        High pass filter cut off in Hertz. Do not use if high\n                        pass cosine regressors are specified in `regressors`\n  --low_pass LOW_PASS   Low pass filter cut off in Hertz. Do not use if low\n                        pass cosine regressors are specified in `regressors`\n  --detrend             Temporally detrend the data. Default: False\n  --discard_scans DISCARD_SCANS\n                        Discard the first N scans of each functional image\n  --n_jobs N_JOBS       The number of CPUs to use if parallelization is\n                        desired. Default: 1 (serial processing)\n  --n_decimals N_DECIMALS\n                        Specify the number of decimals for output timeseries\n                        files. Fewer decimals are recommended for reducing\n                        disk-space, particularly for large extractions\n  -c CONFIG, --config CONFIG\n                        A configuration .json file to pass parameters This\n                        will overwrite command-line arguments if the same\n                        parameter is specified in both. See online\n                        documentation for formatting and what keys to include\n  -v, --verbose         Print out extraction progress\n```\n\n## The configuration JSON file\n\nInstead of passing all of the parameters through the command-line, `nixtract` also provides support for a simple configuration JSON file. The only parameter that needs to be passed into the command-line is the output directory (`output_dir`). All other parameters can either be set by the configuration file or by the command-line. **Note that the configuration file overwrites any of the command-line parameters**. \n\nNot all parameters need to be included in the configuration file; only the ones you wish to use. An example use-case that combines both the command-line parameters and configuration file:\n\n`nixtract-nifti output/ -i img_1.nii.gz img_2.nii.gz --config config.json`\n\nWhere `config.json` is:\n\n```JSON\n{\n  \"roi_file\": \"some_atlas.nii.gz\",\n  \"standardize\": true,\n  \"regressor_files\": [\n    \"confounds1.tsv\",\n    \"confounds2.tsv\"\n  ],\n  \"regressors\": \"Params6\",\n  \"t_r\": 2,\n  \"high_pass\": 0.01,\n  \"smoothing_fwhm\": 6\n}\n```\nThis set up is convenient when your `output_dir` and `input_files` vary on a subject-by-subject basis, but your post-processing and atlas might stay constant. Therefore, constants across subjects can be stored in the project's configuration file.\n\nConfiguration templates for each CLI are in `resources/config-templates`.  \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/danjgale/nixtract",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "d.gale@queensu.ca",
    "name": "nixtract",
    "package_url": "https://pypi.org/project/nixtract/",
    "platform": "",
    "project_url": "https://pypi.org/project/nixtract/",
    "project_urls": {
      "Homepage": "https://github.com/danjgale/nixtract"
    },
    "release_url": "https://pypi.org/project/nixtract/0.0.2/",
    "requires_dist": [
      "numpy (>=1.16.5)",
      "pandas (>=1.1.0)",
      "nibabel (>=3.2.0)",
      "nilearn (>=0.7.1)",
      "natsort (>=7.1.1)",
      "scipy (>=1.5.0)",
      "scikit-learn (>=0.24.1)",
      "load-confounds (>=0.11.1)",
      "pytest-cov ; extra == 'test'",
      "pytest ; extra == 'test'"
    ],
    "requires_python": ">=3.6.0",
    "summary": "A unified interface for timeseries extraction from different functional neuroimaging file types",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11118210,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ccea3f77337ea731e601ac572fa98f39b1efb5ea561e1af1a09b20cd2bd5c7c",
          "md5": "a4cbc205735e9045634a082c3a67ac02",
          "sha256": "25ac092626698ffff68213fbebaf8f4fe6f02285899c1cd686ba98995015bc76"
        },
        "downloads": -1,
        "filename": "nixtract-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4cbc205735e9045634a082c3a67ac02",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 29755,
        "upload_time": "2021-04-26T13:34:19",
        "upload_time_iso_8601": "2021-04-26T13:34:19.158592Z",
        "url": "https://files.pythonhosted.org/packages/2c/ce/a3f77337ea731e601ac572fa98f39b1efb5ea561e1af1a09b20cd2bd5c7c/nixtract-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffd2445d374f391109a05c59828b077d6c0aa7fe09f6756cc6e658c4add43bca",
          "md5": "6e1bfa0ae8f44627f1bb0ae505209354",
          "sha256": "0a8ff939c89ef6fadaf253a6fcc21cbb4ab2124db11615d6c1fc560fe6f576c4"
        },
        "downloads": -1,
        "filename": "nixtract-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e1bfa0ae8f44627f1bb0ae505209354",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 29906,
        "upload_time": "2021-08-07T15:29:28",
        "upload_time_iso_8601": "2021-08-07T15:29:28.062394Z",
        "url": "https://files.pythonhosted.org/packages/ff/d2/445d374f391109a05c59828b077d6c0aa7fe09f6756cc6e658c4add43bca/nixtract-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffd2445d374f391109a05c59828b077d6c0aa7fe09f6756cc6e658c4add43bca",
        "md5": "6e1bfa0ae8f44627f1bb0ae505209354",
        "sha256": "0a8ff939c89ef6fadaf253a6fcc21cbb4ab2124db11615d6c1fc560fe6f576c4"
      },
      "downloads": -1,
      "filename": "nixtract-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e1bfa0ae8f44627f1bb0ae505209354",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 29906,
      "upload_time": "2021-08-07T15:29:28",
      "upload_time_iso_8601": "2021-08-07T15:29:28.062394Z",
      "url": "https://files.pythonhosted.org/packages/ff/d2/445d374f391109a05c59828b077d6c0aa7fe09f6756cc6e658c4add43bca/nixtract-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}