{
  "info": {
    "author": "Reid 'arrdem' McKenzie",
    "author_email": "me@arrdem.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# YAML Schema\n\nA library that implements some amount of jsonschema validation against YAML document ASTs.\n\nUnlike other JSON-schema validation tools which give document path relative errors, this approach allows for line & file errors more appropriate to user-facing tools.\nyamlschema [(PyPi)](https://pypi.org/project/yamlschema/) [(Github)](https://github.com/Brightmd/yamlschema) [(source)](https://github.com/Brightmd/yamlschema/blob/master/yamlschema/lib.py) just loads the YAML document fully and punts directly to jsonschema; making it difficult-to-impossible to map errors back to source locations.\n\n## API Overview\n\n### `yamlschema.LintRecord(level, node, schema, message)`\n\nLintRecords are what linting produces.\nEach LintRecord contains the YAML AST node which failed validation, the schema it failed to validate against, and some metadata.\n\n`level` is a `LintLevel` which attempts to explain what \"kind\" of error this piece of lint represents.\nFor instance `LintLevel.MISSING` encodes missing `properties`.\n`LintLevel.MISSMATCH` encodes type mismatches.\n`LintLevel.UNEXPECTED` encodes unexpected/disallowed keys and other errors.\n\n### `yamlschema.YamlLinter(schema)`\n\nThe linter itself is implemented as a class with a variety of instance methods; allowing the linter to be hacked by users much in the same way that JSON encodiers and decoders can be hacked.\n\nThe linter \"interface\" consists of `__init__(schema: dict)`; being a loaded JSON schema as a dict tree and `lint_document(schema, node) -> Iterable[LintRecord]` which initiates the recursive linting.\n\nThe reference implementation of the linter recursively calls `lint_document` on every sub-structure in the document.\n\n### `yamlschema.lint_file(schema, path, cls=YamlLinter)`\n\nAs conveniences, yamlschema gives you a couple entrypoints that handle constructing the linter class, using `yaml.compose()` to get an AST and starting linting for you.\n`lint_file` and `lint_buffer` respectively allow the user to either bring a file path or a string of YAML.\n\n## Example\n\n``` python-console\n>>> from yamlschema import lint_buffer\n>>> list(lint_buffer({\"type\": \"integer\"}, \"---\\n1.0\"))\n[\n  LintRecord(\n    level=<LintLevel.MISSMATCH: 2>,\n    node=ScalarNode(tag='tag:yaml.org,2002:float', value='1.0'),\n    schema={'type': 'integer'},\n    message=\"Expected an integer, got a 'tag:yaml.org,2002:float'\"\n  )\n]\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/arrdem/source",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "arrdem.yamlschema",
    "package_url": "https://pypi.org/project/arrdem.yamlschema/",
    "platform": "",
    "project_url": "https://pypi.org/project/arrdem.yamlschema/",
    "project_urls": {
      "Homepage": "https://github.com/arrdem/source"
    },
    "release_url": "https://pypi.org/project/arrdem.yamlschema/0.1.0/",
    "requires_dist": [
      "PyYAML (~=5.4.1)"
    ],
    "requires_python": "",
    "summary": "Detailed JSON schema validation for YAML",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10384052,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d304fecdea29116517afe6469296e81281d393d84f891f10daaef65c647f9431",
          "md5": "8fd57ea874a6138a1885400a3602bbd5",
          "sha256": "12ac5bb1f8b68597fe213cf07958322bccf3968870226c92723782c9140e516b"
        },
        "downloads": -1,
        "filename": "arrdem.yamlschema-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8fd57ea874a6138a1885400a3602bbd5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4790,
        "upload_time": "2021-05-17T21:52:55",
        "upload_time_iso_8601": "2021-05-17T21:52:55.930786Z",
        "url": "https://files.pythonhosted.org/packages/d3/04/fecdea29116517afe6469296e81281d393d84f891f10daaef65c647f9431/arrdem.yamlschema-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d304fecdea29116517afe6469296e81281d393d84f891f10daaef65c647f9431",
        "md5": "8fd57ea874a6138a1885400a3602bbd5",
        "sha256": "12ac5bb1f8b68597fe213cf07958322bccf3968870226c92723782c9140e516b"
      },
      "downloads": -1,
      "filename": "arrdem.yamlschema-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8fd57ea874a6138a1885400a3602bbd5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 4790,
      "upload_time": "2021-05-17T21:52:55",
      "upload_time_iso_8601": "2021-05-17T21:52:55.930786Z",
      "url": "https://files.pythonhosted.org/packages/d3/04/fecdea29116517afe6469296e81281d393d84f891f10daaef65c647f9431/arrdem.yamlschema-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}