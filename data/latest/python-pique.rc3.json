{
  "info": {
    "author": "http://github.com/Pebaz",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Pique\n\n> Query JSON from the CLI using Python syntax\n\n## What is Pique\n\nPique is a command line JSON query and processing tool similar to\n[JQ](https://stedolan.github.io/jq/) and [JMESPath](https://jmespath.org/).\n\nHowever, while these other applications are highly useful, they introduce yet\nanother query language to learn. With Pique, you can use any valid Python\nexpression in your queries, bringing the full power of Python expressions to\nyour CLI.\n\nIt should be noted that Pique does not have a complete specification like\n[JMESPath](https://jmespath.org/specification.html) because Pique's main feature\nis to allow you to use Python expressions within queries whereas JMESPath is a\nquery language that can be implemented in any language and imported as a\nlibrary.\n\nPique is great for:\n\n * Examine content of JSON documents beyond simple text output/processing\n * Query the results returned from AWS CLI commands using Python expressions\n\n## Installation\n\n```bash\n$ pip install python-pique\n```\n\nPique works on:\n\n* Windows\n* MacOS\n* Linux\n* Any platform that Python3 runs on\n\n## Usage\n\n```bash\n$ cat example.json | pq\n\n$ echo '{ \"name\" : \"Pebaz\" }' | pq name  # \"Pebaz\"\n```\n\n## Tutorial\n\nTo query JSON using Pique, you can use a query string provided on the command\nline. A query string is comprised of 4 unique query syntax types that are very\nsimilar to their Python equivalents:\n\n * Key selection: `any characters between the dot . characters`\n * Brackets: `[]`\n * Braces: `{}`\n * Parentheses: `()`\n\nYou can form sequences of these queries by separating them by a dot `.`\ncharacter. For instance, the following is an example query that results in the string:\n\"foo\".\n\n```bash\n$ cat foo.json\n{\n    \"obj\" : {\n        \"arr\" : [\n            \"baz\", \"bar\", \"foo\"\n        ]\n    }\n}\n\n$ cat foo.json | pq 'obj.arr.[2]'\n\"foo\"\n```\n\nIn between each dot `.` character you can place any of these query types:\n\n * [SelectKey](#SelectKey-key1.key2.key3): `keyname`\n * [Index](#Index-4): `[123]`\n * [BuildObject](#BuildObject-name,age): `{name,age,\"address\":address.upper(),phone}`\n * [Expression](#Expression-sorted(IT)): `(i for i in range(10))`\n * [Fanout](#Fanout-*-&-Join): `[*]`\n * [Join](#Fanout-*-&-Join): `[!]`\n * [Select](#Select): `[-]`\n\n### SelectKey `key1.key2.key3`\n\nThe SelectKey query is the most basic type of query. It allows you to drilldown\non a given JSON structure and can be used to restrict the data that the next\nquery in the sequence can work with.\n\n### Index `[4]`\n\nYou can use the Index query to index JSON arrays. Within the brackes, you can\nput any valid Python slice. Here are a few examples:\n\n```python\n$ echo '[1, 2, 3, 4, 5]' | pq '[0]'\n1\n$ echo '[1, 2, 3, 4, 5]' | pq '[-1]'\n5\n$ echo '[1, 2, 3, 4, 5]' | pq '[2:4]'\n[3, 4]\n$ echo '[1, 2, 3, 4, 5]' | pq '[::2]'\n[1, 3, 5]\n$ echo '[1, 2, 3, 4, 5]' | pq '[0:-3:2]'\n[1]\n```\n\n### BuildObject `{name,age}`\n\nThe BuildObject query is very powerful and can be used to create entirely new\nJSON structures. The syntax of this query is exactly the same as Python but for\na couple small differences. Below is an example BuildObject query that shows\nthat you can put any valid Python code between the commas `,`. \n\n```python\n{ KEY-NAME, KEY-NAME, PYTHON-CODE : PYTHON-CODE, KEY-NAME }\n```\n\nWithin the commas `,`, you can put Python Dictionary-like key-value pairs and\neach key and each value can be any valid Python expression. It should be noted\nthat the code between the commas `,` that is not a key-value pair must be the\nname of a given key or an expression that evaluates to the string value of a\ngiven key.\n\n### Expression `(sorted(IT))`\n\nFor Pique, the Expression query is the star of the show. It is the reason why\nPique exists in the first place. It allows you to use any valid Python\nexpression to transform or process a JSON structure.\n\nHere are a few examples:\n\n```python\n$ echo '[1, 2, 3, 4, 5]' | pq '(2048)'\n2048\n$ echo '[1, 2, 3, 4, 5]' | pq '([2, 1, 3, 1, 5])'\n[2, 1, 3, 1, 5]\n$ echo '[1, 2, 3, 4, 5]' | pq '(IT[2])'\n3\n$ echo '[1, 2, 3, 4, 5]' | pq '(len(IT))'\n5\n$ echo '[1, 2, 3, 4, 5]' | pq '([i ** i for i in IT])'\n[1, 4, 27, 256, 3125]\n```\n\nAs you can see, you can use any valid Python expression to transform the data as\nyou see fit.\n\n### Fanout `[*]` & Join `[!]`\n\nThe Fanout query allows you to perform a set of queries on each element in an\narray. Typical usage of Fanout can look like this:\n\n```bash\n                                           Fanout            Join\n                                             |                |\n                                             V                V\n$ aws lambda list-functions | pq 'Functions.[*].FunctionName.[!].(len(IT))'\n```\n\nThe above query will select the `\"FunctionName\"` key from every function in your\nAWS account and then Join these names into a list. The length of the resulting\nlist is returned in the final query.\n\nIf a Join query is not placed at the end of the query string, it is assumed that\nevery query after Fanout `[*]` should be performed on every element in the\narray.\n\n### Select `[-]`\n\nThe Select query is useful if you want to filter out values that do not evaluate\nto `True`. When coupled with an Expression query this becomes very powerful:\n\n```bash\n$ aws lambda list-functions | pq 'Functions.[-].(Timeout > 3)`\n```\n\nIf paired with a Join query on top of that, you can perform the rest of your\nqueries using the filtered set of data:\n\n```bash\n$ aws lambda list-functions | pq 'Functions.[-].(Timeout > 3).[!].(len(IT))`\n```\n\n## Dotfile Support\n\nPique supports the use of a dotfile in your home directory named `.pq`.\n\nThis file is a valid Python file that can contain any function or class that\nyou would like to be available in the environment where expressions are\nevaluated. For instance, if you define a function `foo()` in your `.pq` file, it\nwill be available in any query you make from the CLI:\n\n```bash\n$ cat example.json | pq 'key1.key2.([foo(i) for i in IT])'\n```\n\nYou can also define the variable `__settings__` that can contain the keys:\n\n * `theme`: str\n * `indent`: integer\n\nAn example Pique dotfile may look like this:\n\n```python\n# This will be included in the eval env as `chain`:\nfrom itertools import chain\n\n__settings__ = {\n    'theme' : 'Python3',\n    'indent' : 4\n}\n\ndef foo(data, index):\n    return data[index] ** 10\n\ndef something():\n    return 'asdf'\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/Pebaz/pique",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-pique",
    "package_url": "https://pypi.org/project/python-pique/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-pique/",
    "project_urls": {
      "Homepage": "http://github.com/Pebaz/pique"
    },
    "release_url": "https://pypi.org/project/python-pique/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Query JSON from the CLI using Python syntax",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7268588,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0358a166d9c42e7ffdf4c7c8ddce03111c39abd1c6d9367998dfa064078cc060",
          "md5": "fb2d1d56cd52073cb8f0bc8df2d90be8",
          "sha256": "a5bd94206b6c96002fa8fe13d5923a353f5a6d6a7257f54ec7de0c166bd11e35"
        },
        "downloads": -1,
        "filename": "python-pique-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fb2d1d56cd52073cb8f0bc8df2d90be8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5869,
        "upload_time": "2020-05-10T21:49:08",
        "upload_time_iso_8601": "2020-05-10T21:49:08.899402Z",
        "url": "https://files.pythonhosted.org/packages/03/58/a166d9c42e7ffdf4c7c8ddce03111c39abd1c6d9367998dfa064078cc060/python-pique-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72b51487c4c7e9b0f03961e0cbe8aa8f609c8cf51a2e3e5c666806648f461a8d",
          "md5": "61130a0443790ac2a5b0ae342b73cdbb",
          "sha256": "c040a7f81f152746da65c4f3b3e4b6ccf17aad91f5db595b644d692cfcd792c5"
        },
        "downloads": -1,
        "filename": "python-pique-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "61130a0443790ac2a5b0ae342b73cdbb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5873,
        "upload_time": "2020-05-13T17:49:11",
        "upload_time_iso_8601": "2020-05-13T17:49:11.772673Z",
        "url": "https://files.pythonhosted.org/packages/72/b5/1487c4c7e9b0f03961e0cbe8aa8f609c8cf51a2e3e5c666806648f461a8d/python-pique-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db78ed3de94fc7cf801f3d1fd3deef8cff47c46879046a0ce85d1d720efa9b28",
          "md5": "30491bd18877ee7935f37f6f212723c2",
          "sha256": "6ced84a0022d0ecc093d8fb4872b8068c9dc1564a91fcc088e4e821b6fa5232e"
        },
        "downloads": -1,
        "filename": "python-pique-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "30491bd18877ee7935f37f6f212723c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9306,
        "upload_time": "2020-05-18T14:00:21",
        "upload_time_iso_8601": "2020-05-18T14:00:21.550774Z",
        "url": "https://files.pythonhosted.org/packages/db/78/ed3de94fc7cf801f3d1fd3deef8cff47c46879046a0ce85d1d720efa9b28/python-pique-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db78ed3de94fc7cf801f3d1fd3deef8cff47c46879046a0ce85d1d720efa9b28",
        "md5": "30491bd18877ee7935f37f6f212723c2",
        "sha256": "6ced84a0022d0ecc093d8fb4872b8068c9dc1564a91fcc088e4e821b6fa5232e"
      },
      "downloads": -1,
      "filename": "python-pique-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "30491bd18877ee7935f37f6f212723c2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9306,
      "upload_time": "2020-05-18T14:00:21",
      "upload_time_iso_8601": "2020-05-18T14:00:21.550774Z",
      "url": "https://files.pythonhosted.org/packages/db/78/ed3de94fc7cf801f3d1fd3deef8cff47c46879046a0ce85d1d720efa9b28/python-pique-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}