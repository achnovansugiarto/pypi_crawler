{
  "info": {
    "author": "ajz34",
    "author_email": "ajz34@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# vdw (my naïve wrapper of existing vDW packages for PySCF)\n\nThis package is my naïve wrapper of various existing vDW libraries for PySCF. Should be able to evaluate energy or force\n(gradient) of van der Waals correction to density functional methods.\n\nThis package is not aimed to be a pyscf extension module. It's just a wrapper.\n\n## Install\n\nTo install this package, you may download from pypi:\n\n```bash\npip install pyvdw\n```\n\nTo use DFTD3, DFTD4, or TS-vDW (from libmbd) or MBD methods, you may also manually install those libraries.\nThis package is only an interface to those existing libraries.\n\n```bash\nconda install simple-dftd3 dftd3-python dftd4 dftd4-python libmbd\npip install pyscf, pymbd\n```\n\nI know that leaving the task of dependency packages installation to user is really inconvenient, but currently\nI don't know how to handle conda, pip and advanced packaging elegently. So if any pratical ideas on this, raise\nyour issue >w<\n\n## Included vDW models\n\n### DFTD3\n\n* Package: `simple-dftd3`, https://github.com/awvwgk/simple-dftd3\n\n* Usage:\n  ```python\n  from pyscf import gto, dft\n  from vdw import to_dftd3\n  mol = gto.Mole(atom=\"O; H 1 0.94; H 1 0.94 2 104.5\", basis=\"cc-pVDZ\").build()\n  # Modified/Revisited BJ/Rational damping\n  mf = to_dftd3(dft.RKS(mol, xc=\"PBE\"), version=\"bjm\").run()\n  print(mf.e_vdw)  # -0.000347885\n  ```\n\n* Versions and Citations:\n      \n  For any version of DFTD3, please first cite 10.1063/1.3382344. This is not formal citation recommendation,\n  thus refer to original site [DFTD3](https://www.chemie.uni-bonn.de/pctc/mulliken-center/software/dft-d3/)\n  and package [simple-dftd3](https://github.com/awvwgk/simple-dftd3) for formal citation guide.\n      \n  * Original DFTD3 (`version = \"zero\"`):\n      \n    Grimme, S.; Antony, J.; Ehrlich, S.; Krieg, H. *J. Chem. Phys.* **2010**, *132* (15), 154104.\n    https://doi.org/10.1063/1.3382344.\n    \n    Goerigk, L.; Hansen, A.; Bauer, C.; Ehrlich, S.; Najibi, A.; Grimme, S.\n    *Phys. Chem. Chem. Phys.* **2017**, *19* (48), 32184–32215. https://doi.org/10.1039/C7CP04913G.\n\n  * BJ/Rational damping (`version = \"bj\"`, which is default):\n        \n    Grimme, S.; Ehrlich, S.; Goerigk, L. *J. Comput. Chem.* **2011**, *32* (7), 1456–1465.\n    https://doi.org/10.1002/jcc.21759.\n        \n  * Modified zero damping and BJ damping (`version = \"zerom\" or \"bjm\"`):\n\n    Smith, D. G. A.; Burns, L. A.; Patkowski, K.; Sherrill, C. D.\n    *J. Phys. Chem. Lett.* **2016**, *7* (12), 2197–2203. https://doi.org/10.1021/acs.jpclett.6b00780.\n\n  * Optimized Power (`version = \"op\"`):\n    \n    Witte, J.; Mardirossian, N.; Neaton, J. B.; Head-Gordon, M.\n    *J. Chem. Theory Comput.* **2017**, *13* (5), 2043–2052. https://doi.org/10.1021/acs.jctc.7b00176.\n\n### DFTD4\n\n* Package: `dftd4`, https://github.com/dftd4/dftd4\n\n* Usage:\n  ```python\n  from pyscf import gto, dft\n  from vdw import to_dftd4\n  mol = gto.Mole(atom=\"O; H 1 0.94; H 1 0.94 2 104.5\", basis=\"cc-pVDZ\").build()\n  # DFTD4 default bj-eeq-atm version\n  mf = to_dftd4(dft.RKS(mol, xc=\"PBE\")).run()\n  print(mf.e_vdw)  # -0.000192782\n  ```\n\n* Citations:\n      \n  For any version of DFTD4, please first cite 10.1063/1.5090222. This is not formal citation recommendation,\n  thus refer to package [dftd4](https://github.com/dftd4/dftd4) for formal citation guide.\n\n  * Original DFTD4:\n    \n    Caldeweyher, E.; Ehlert, S.; Hansen, A.; Neugebauer, H.; Spicher, S.; Bannwarth, C.; Grimme, S.\n    *J. Chem. Phys.* **2019**, *150* (15), 154122. https://doi.org/10.1063/1.5090222.\n\n  * Newly SCAN related functionals:\n\n    Ehlert, S.; Huniar, U.; Ning, J.; Furness, J. W.; Sun, J.; Kaplan, A. D.; Perdew, J. P.; Brandenburg, J. G.\n    *J. Chem. Phys.* **2021**, *154* (6), 061101. https://doi.org/10.1063/5.0041008.\n\n    Bursch, M.; Neugebauer, H.; Ehlert, S.; Grimme, S.\n    *J. Chem. Phys.* **2022**, *156* (13), 134105. https://doi.org/10.1063/5.0086040.\n\n  * Doubly hybrid functionals:\n\n    Santra, G.; Sylvetsky, N.; Martin, J. M. L.\n    *J. Phys. Chem. A* **2019**, *123* (24), 5129–5143. https://doi.org/10.1021/acs.jpca.9b03157.\n\n### TS and MBD\n\n* Package: `libmbd`, https://github.com/libmbd/libmbd\n\n* Usage:\n  ```python\n  from pyscf import gto, dft\n  from vdw import to_mbd\n  mol = gto.Mole(atom=\"\"\"\n      O  0.  0.  0.\n      H  0.  0.  1.\n      H  0.  1.  0.\n      O  0.  0.  2.\n      H  0.  0.  3.\n      H  0.  1.  2.\"\"\", basis=\"cc-pVDZ\").build()\n  # Tkatchenko-Scheffler \n  mf = to_mbd(dft.RKS(mol, xc=\"PBE\"), variant=\"ts\").run()\n  print(mf.e_vdw)  # -0.000212847\n  # MBD@rsSCS\n  mf = to_mbd(dft.RKS(mol, xc=\"PBE\"), variant=\"rsscs\").run()\n  print(mf.e_vdw)  # -0.001245831\n  ```\n\n* Notice\n\n  To calculate MBD or TS-vDW, free atomic volume is required. This is calculated, instead of preloaded,\n  using basis set aug-cc-pVQZ. Value of this volume may be close to FHI-aims and Quantum Espresso. However,\n  this calculation is relatively costly if your molecule and basis set is not large. Basis set error also\n  occurs (where FHI-aims give free folume by highly efficient numerical radial Schrödinger equation).\n\n* Citations:\n\n    This is not formal citation recommendation\n\n  * TS (Tkatchenko-Scheffler)\n\n    Tkatchenko, A.; Scheffler, M.\n    *Phys. Rev. Lett.* **2009**, *102* (7), 073005. https://doi.org/10.1103/PhysRevLett.102.073005.\n\n  * MBD (Many-Body Dispersion)\n\n    Tkatchenko, A.; DiStasio, R. A.; Car, R.; Scheffler, M.\n    *Phys. Rev. Lett.* **2012**, *108* (23), 236402. https://doi.org/10.1103/PhysRevLett.108.236402.\n\n    Ambrosetti, A.; Reilly, A. M.; DiStasio, R. A.; Tkatchenko, A.\n    *J. Chem. Phys.* **2014**, *140* (18), 18A508. https://doi.org/10.1063/1.4865104.\n  \n## More Examples\n\nRefer to [example](example) folder for more examples.\n\n## Code Sources\n\nThis package uses or modifies existing codes.\n* Hirshfeld analysis utilizes atomic spherically averaged DFT [pyscf/pyscf #1143](https://github.com/pyscf/pyscf/pull/1143).\n* Wrapper code utilizes [pyscf/dftd3](https://github.com/pyscf/dftd3).\n* Functional default parameters of TS-vDW and MBD are from [libmbd/libmbd](https://github.com/libmbd/libmbd).\n\nThe author is aware of previous efforts to implement vDW for PySCF, such as [pyscf/dftd3](https://github.com/pyscf/dftd3)\nand [pyscf/mbd](https://github.com/pyscf/mbd). However, due to my own requirement for usage and API convenience, as well\nas my need to use TS-vDW, this simple hundreds-lines-of-code tiny package is built from existing various libraries.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ajz34/vdw",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyvdw",
    "package_url": "https://pypi.org/project/pyvdw/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyvdw/",
    "project_urls": {
      "Homepage": "https://github.com/ajz34/vdw"
    },
    "release_url": "https://pypi.org/project/pyvdw/0.1.0/",
    "requires_dist": [
      "numpy",
      "pyscf"
    ],
    "requires_python": "",
    "summary": "My wrapper of various existing vDW libraries for PySCF",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13426080,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c705bfb6fdebcbf4749bc246d224cf6eb4c07e70904a6e4ed48b383b5ac8bc6d",
          "md5": "caecbcc346a7ede68e3f2f5130ba1721",
          "sha256": "445d3bd42e52444cd155954992507aef17cbfe39a8568316ca6a03fdd8264ccf"
        },
        "downloads": -1,
        "filename": "pyvdw-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "caecbcc346a7ede68e3f2f5130ba1721",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22379,
        "upload_time": "2022-04-06T07:33:41",
        "upload_time_iso_8601": "2022-04-06T07:33:41.412918Z",
        "url": "https://files.pythonhosted.org/packages/c7/05/bfb6fdebcbf4749bc246d224cf6eb4c07e70904a6e4ed48b383b5ac8bc6d/pyvdw-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c705bfb6fdebcbf4749bc246d224cf6eb4c07e70904a6e4ed48b383b5ac8bc6d",
        "md5": "caecbcc346a7ede68e3f2f5130ba1721",
        "sha256": "445d3bd42e52444cd155954992507aef17cbfe39a8568316ca6a03fdd8264ccf"
      },
      "downloads": -1,
      "filename": "pyvdw-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "caecbcc346a7ede68e3f2f5130ba1721",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 22379,
      "upload_time": "2022-04-06T07:33:41",
      "upload_time_iso_8601": "2022-04-06T07:33:41.412918Z",
      "url": "https://files.pythonhosted.org/packages/c7/05/bfb6fdebcbf4749bc246d224cf6eb4c07e70904a6e4ed48b383b5ac8bc6d/pyvdw-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}