{
  "info": {
    "author": "Zofia Rudjord",
    "author_email": "zofia.rudjord@niva.no",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Python wrapper for NIVA's Data Platform\n`pyniva` is a Python library and API wrapper(s) for programatic access to data\nin NIVA's data platform and services.\n\nCurrently the following parts/APIs are supported:\n* NIVA Flow (`metaflow` for meta data access)\n* `tsb` for access to time series data (including FerryBox)\n\n## Getting access\n\nThe API is protected with API tokens. Please contact cloud@niva.no to request access.\n\nWhen provided with a token, all pyniva invokations need to include a header object:\n\n```\nfrom pyniva import token2header\n\nheader = token2header(\"/some/folder/containing/token/niva-service-account.json\")\n```\n\nPlease make sure that the token is not shared. In case of data breach or lost token, please contact us and we will invalidate the token and generate a new one.\n\n## Installation\nThe package and all it's dependencies can be installed using `pip`\n\n```\npip install pyniva\n```\n\n## Contact\n\nIf you have any questions or feedback, please contact us at cloud@niva.no\n\n## General information\nThe external APIs uses [jwt](https://jwt.io/) for user authentication and secure\ndata transfer. In order to use these you'll need to get a JWT access token (JSON file),\nwhich contains account information and a private ssh key.\n\nNote that the APIs are intended for interactive use, where the user fetches and\nsearch for meta data and available data sets, and then query the actual data.\n\nAlso note that for time series, the API (`tsb`) is built to support interactive\nuse and visualization by doing server side  aggregating of the data (including\naggregation of data on (asynchronous) GPS tracks).\nThis means that the consumer should in general avoid using the API to download all raw data\nfor client side aggregation etc.\n\nInternally, all objects, including time-series (signals), are identified and queried using\n[UUIDs](https://en.wikipedia.org/wiki/Universally_unique_identifier).\nThe `pyniva` library wraps and hides this from the end user, allowing access to\nand querying of data objects through Python object instances.\n\nAll timestamps returned from the APIs are in UTC.\nAll the endpoints return data in JSON format.\n\n\n## metaflow - meta data and \"Thing\" universe\n`metaflow` is NIVA's service and API for meta data. This service\nallows for searching meta data, and retrieving all stored meta data\nfor data objects (\"Things\").\n\nThe `metaflow` service stores all meta-data as JSON documents with\na set of specific reserved fields, including `ttype` which is\nused to identify the object type of the meta data. These\nobject types is mapped directly to the Thing objects exposed\nin the `pyniva` API wrapper.\n\nIn `metaflow` and in the `pyniva` API-wrapper all data objects are\nrepresented as `Thing` class instances or a subclass of `Thing`.\nUsing the `pyniva` wrapper search and detailed meta data is also\navailable through `Thing` classes (see examples bellow).\n\n\nThe \"Thing universe\" is a simple hierarchy of classes,\nwith the generic \"Thing\" as base class. In `pyniva` all objects\nand data are represented as \"Thing\" instances. Access to meta-data\nand data is provided through class and instance methods of \"Things\"\n(including query and retrieval of time-series).\n\nCurrently the following classes are implemented and supported by\nthe `metaflow` back-end:\n```\nThing (ttype = 'thing')\n  |\n  |-> Platform (ttype = 'platform')\n  |   |\n  |   |-> Vessel (ttype = 'vessel')\n  |\n  |-> Component (ttype = 'component')\n  |  |\n  |  |-> Sensor (ttype = 'sensor')\n  |\n  |-> TimeSeriers (ttype = 'tseries')\n     |\n     |-> FlagTimeSeries (ttype = 'qctseries')\n     |\n     |-> GPSTrack (ttype = 'gpstrack')\n```\nThe type of an object is defined by the `ttype` attribute of\nan instance (i.e. the `ttype` attribute of the underlying\nJSON document), and it is straightforward to extend the data model\nwith new types and functionality.\n\nAll public methods in `pyniva` has informative docstrings.\n\n`pyniva` also exposes/includes URLs to public `metaflow` endpoints.\n* PUB\\_META (public endpoints to get meta data)\n\n### Getting Things from 'metaflow'\nThe following class methods will search and/or fetch meta-data\nfrom the `metaflow` and return the data as a Thing instance or\na list of Thing instances.\n* `Thing.get_thing(meta_endpoint, header=header, params=params, **kwargs)`\n* `Thing.list(meta_endpoint, header=header, params=params, **kwargs)`\n\nArguments can be passed as a parameter dictionary and/or as keyword arguments.\n```python\nfrom pyniva import Vessel, PUB_META\n\nvessel = Vessel.get_thing(meta_host=PUB_META, header=header, params={\"path\": \"FA\"})\n```\nis equivalent to\n```python\nfrom pyniva import Vessel, PUB_META\n\nvessel = Vessel.get_thing(PUB_META, header=header, path=\"FA\")\n```\n\n### Getting meta data and domain model\nTo get the full domain model of a Thing instance use the `thing.get_tree()` instance\nmethod:\n```python\nfrom pyniva import Thing, PUB_META\n\nthing = Thing.get_thing(PUB_META, header=header, path=\"FA\")\nprint(thing.path)\nthing_with_children = thing.get_tree(PUB_META, header=header)\nfor part in thing_with_children.parts:\n    # access each part/children of the thing:\n    print(part.path)\n```\nThis will print the following:\n```\nFA\n```\n```\nFA/ferrybox\nFA/PCO2\nFA/gpstrack\nFA/PH\nFA/GPS\n```\nNote that the `thing` instance have to be present in `metaflow`.\n\n\n### Examples\n```python\n# Get list of available vessels in metaflow, print their names\n# and the number of avaliable time series for each vessel\nfrom pyniva import Vessel, PUB_META, token2header\n\nheader = token2header(\"path/to/my/tokenfile.json\")\n\n# Get list of all available vessels\nvessel_list = Vessel.list(PUB_META, header=header)\nfor v in vessel_list:\n    time_series = v.get_all_tseries(PUB_META, header=header)\n    print(v.name, len(time_series))\n\n# Get the full domain model for the first vessel in the list\nvessel = vessel_list[0]\nvessel_full = vessel.get_tree(PUB_META, header=header)\n```\n\nTo get all available meta data for a `Thing` (or subclass) instance\nyou can call the `to_dict()` method which will return all meta data\nas a Python dictionary.\n```python\nprint(v.as_dict())\n```\n\nObjects in the `Thing` hierarchy will have different attributes,\ndepending on type, etc. For more information take a look at the\ndoc-string of the `Thing` instances you are interested in or use the\nPython `dir()` method to examine the object data. In general, any\nkey not starting with an `_` in the dictionary returned by `to_dict()`\nis also available as instance attributes.\nAll `Thing` or subclass of `Thing` instances\npersisted by `metaflow` will at least have an `uuid` and a\n`ttype` attribute.\n\n\n## tsb - time series data\nTime series data is stored in designated time series database(s) and\nthe actual data can be accessed through `tsb` service.\n\n`pyniva` exposes/includes URLs to public `tsb`\nendpoints.\n* PUB\\_TSB (public endpoint for time series data)\n\nThe `tsb` API is intended for interactive use, visualization, data\n\"drill in\" and merging of asynchronous-heterogenous time series data.\nIncluding merging of data on GPS tracks.\nThis means that the typical use of the API is _not_ to download all\navaliable raw data (which can be huge), instead the user will query\nand fetches aggregated data for a given time interval (default is\napproximately 1000 data-points pr. time series).\nThe default number of data points can be overridden by setting\nthe `n` or `dt` parameter in the query. `dt=0` returns raw data\n(not reccomended for large datasets).\n\n\nUsing the `pyniva` library you can access and query data through\n`TimeSeries` class (or subclasses) or `TimeSeries` instances.\nThis allows direct access to the data\nwhile hiding the details of the underlying `tsb` service.\nWhen querying through `pyniva` data is returned as time indexed\n[Pandas](https://pandas.pydata.org/) which is convenient for further\nanalyses, plotting, data export, etc.\n\nThe `tsb` system holds and handles three kinds of asynchron time series:\n* \"normal\" time series (`TimeSeries` class),\n  which is a time indexes sequence of single numerical\n  (floating point) values, i.e. one numerical value for each time stamp,\n  for this datatype there can also be a quality flag for each measurement.\n  This flag will typically be -1 for \"bad quality\",\n  0 for quality flag not set, or +1 for \"good quality\". When querying data\n  you can filter on the flag (but the actual flags are not returned).\n* Flags and/or event data time series (`FlagTimeSeries` class), implemented as a\n  time indexed sequence of integers. This datatype is also used for\n  individual data quality flags. For this datatype the standard aggregation\n  type is `mode` which returns the most frequent value in the interval.\n* GPS tracks (`GPSTrack` class), which is a time indexed sequence of\n  longitude and latitude values (WGS84). GPS tracks can be used for geo-fencing\n  and they are aggregaetd by keeping actual data at (near) wanted time intervals.\n  Note that if a `GPSTrack` is in the query list data will be merged with the track\n  and the aggregation intervals will be dictated by the data in the `GPSTrack`\n\nThe `TimeSeries` class has two methods for quering time series data:\n* `get_tseries()` (instance method) to queries and fetch data corresponding to\n  the instance in question.\n* `get_timeseries_list()` (class method) which takes a list of `TimeSeries`\n  instances and return a joined dataset for the time series.\n\n### Query parameters\nThese interfaces takes and requiers the same set of parameters. The following\nparameters must be included:\n* *ts_host*, url for the `tsb` service (in practice this will be `PUB_SIGNAL`)\n* *headers*, a `JWT` header must also be included\n  (for documentation see `token2header()` documentation above)\n* *a time range* for the query\n\nThere are two ways to specify the time span The parameters used to set the time range in a query are:\n* `start_time` and `end_time` (start and end time of query)\n* `ts` (time span of query)\n\nAll timestamps and time spans are assumed to be ISO8601 formatted string, with\none exception: `end_time=now` which will force end-time into `datetime.utcnow()`\n\nTime intervals can be expressed in several ways with a combination of the three parameters:\n1. As an ISO8601 time interval (\"ts\") parameter with start and end time.\n   Examples: `ts=2007-03-01T13:00:00Z/2008-05-11T15:30:00Z`\n             `ts=P1Y2M10DT2H30M/2008-05-11T15:30:00Z`\n2. As explicit start and end parameters (ISO8601 formatted)\n       Example: `start_time=2017-01-01T00:10:10.82812`\n                `end_time=2017-02-01T10:21:33.15`\n3. As a time interval parameter (\"ts\") and either a corresponding\n       \"start\" or \"end\" parameter or implicit end=now by omitting \n       start/end parameters.\n       Example: `ts=PT1H10M10.03S`\n                `end=2013-10-12T10`\n       Example: `ts=P1M` (one month ending now)\n\nAlso note that the API has the following default behavior:\n1. If start and end parameters are both given any given \"ts\" parameter will be ignored \n2. If no parameters are given the function will return one week ending now\n3. If only a time span (without start or end) are given end time is set to now\n\n\n#### Optional parameters\nIn addition the API support the following additional parameters:\n* *n* (integer): approximate number of data-points to return from the query\n* *dt*, time interval in aggregation. Must be either number of seconds or \n isodate duration [ISO8601](https://en.wikipedia.org/wiki/ISO_8601#Durations)\n (note: \"P1M\" would refer to 1 month interval while \"PT1M\" would refer to 1 minute interval).\n  Also note that the API don't guarantee that the returned time spans will match the requested string, it will just try to\n  match it as close as possible with a valid Timescale [time aggregation string](http://docs.timescale.com/latest/api#select).\n* *agg_type*, aggregation type, possible values:\n  \"avg\" (default), \"min\", \"max\", \"sum\", \"count\", \"stddev\", \"mode\", \"median\" and \"percentile\"\n* *percentile* if agg\\_type is percentile the API also requires this parameter to be\n  set, floating point number between 0 and 1\n* *noqc* (flag, true if included): flag to ignore the Data Quality flag in the query.\n  If not included only data which has passed the data quality check will be returned. \n* *region* (WKT string): Only return data from inside a given geographical region.\n  The argument must be a region (polygon) defined as a\n  [WKT](https://en.wikipedia.org/wiki/Well-known_text) string where the\n  coordinates are assumed to be in [WGS84](https://en.wikipedia.org/wiki/World_Geodetic_System)\n  format.\n  Also note: if a region is supplied the query _must also include_ a uuid for an existing GPS track.\n\n\n\n### Notes and chevats\n* If data is completely missing for a signal the returned DataFrame will not\n  include the corresponding column.\n* If the all data is missing in a query, an empty DataFrame will be returned.\n* *Time aggregation*: You are not guarantied to get the exact time spans asked for\n  the server will try to match the requested time windows with 1, 2, 5, 10 or 30\n  multiples of seconds, minutes, hours and days. And return the nearest match.\n  Raw data is returned if `dt=0` is set. \n* *Geo fencing*: Since only data from withing a particular geographical region is\n  returned in the query, you must include a GPSTrack (i.e. the vessel's GPS-track)\n  in order to receive data. Also the time spans in the time aggregation will\n  match the actual time stamps in the GPS track signal.\n* For normal time series queries are _filtered on the data quality_ flag,\n  meaning that only data points which has passed QC is included in the\n  returned result. This behavior can be overridden using the `noqc` query flag.\n* If a GPS-track is included in the query _data is merged with the track_,\n   and the GPS-track data is returned as `longitude` and `latitude`.\n     1. Only one GPS-track can be submitted at the time\n     1. Aggregation level is forced to the GPS-track, with actual\n        GPS-track time stamps.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NIVANorge/pyniva",
    "keywords": "metadata timeseries data",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyniva",
    "package_url": "https://pypi.org/project/pyniva/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyniva/",
    "project_urls": {
      "Homepage": "https://github.com/NIVANorge/pyniva"
    },
    "release_url": "https://pypi.org/project/pyniva/0.4.3/",
    "requires_dist": [
      "pandas (<2.0,>=1.1)",
      "numpy (<2.0,>=1.16)",
      "requests (<3.0,>=2.20)",
      "pyjwt (<2.0,>=1.7)",
      "cryptography (<3.0,>=2.5)"
    ],
    "requires_python": "",
    "summary": "Python wrapper/API for interacting with NIVA's data platform",
    "version": "0.4.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12969300,
  "releases": {
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7b2446d4ec9f48fe979ad918195bbad3ec0a604ee64b8353e392bd44203bc30",
          "md5": "8e04fd1bbdf1784107f2e673bf211694",
          "sha256": "d77b0e78f4a61983fa0fd247964a918b905093273e89e542474791fd444fd993"
        },
        "downloads": -1,
        "filename": "pyniva-0.3.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e04fd1bbdf1784107f2e673bf211694",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 11244,
        "upload_time": "2020-05-07T08:29:20",
        "upload_time_iso_8601": "2020-05-07T08:29:20.080284Z",
        "url": "https://files.pythonhosted.org/packages/d7/b2/446d4ec9f48fe979ad918195bbad3ec0a604ee64b8353e392bd44203bc30/pyniva-0.3.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d05b9c4b7496ad6c23177c05405a274182a3ae2a1fb350c90feb4442402b588",
          "md5": "929d405a8b816e20d7f91604635183ee",
          "sha256": "517df61fc371d25bfcda069288c1ad2ce7d74b9949f245778ec6790a4d8ae9fd"
        },
        "downloads": -1,
        "filename": "pyniva-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "929d405a8b816e20d7f91604635183ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9022,
        "upload_time": "2020-05-07T08:29:21",
        "upload_time_iso_8601": "2020-05-07T08:29:21.936557Z",
        "url": "https://files.pythonhosted.org/packages/4d/05/b9c4b7496ad6c23177c05405a274182a3ae2a1fb350c90feb4442402b588/pyniva-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06939aea973b22d95c1e93c63e7c65e4d79700ff5a90d13f6607d3a3c4714e9b",
          "md5": "e666966596e0a5a96a9ea3cbb1fdbcb9",
          "sha256": "7156a4a8d010a2e5d2a2dca9a53d690d91a1936b6fe31f7697bec045f4fe41d5"
        },
        "downloads": -1,
        "filename": "pyniva-0.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e666966596e0a5a96a9ea3cbb1fdbcb9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 11802,
        "upload_time": "2020-05-14T12:00:19",
        "upload_time_iso_8601": "2020-05-14T12:00:19.602371Z",
        "url": "https://files.pythonhosted.org/packages/06/93/9aea973b22d95c1e93c63e7c65e4d79700ff5a90d13f6607d3a3c4714e9b/pyniva-0.4.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45c909cac64d35be5ef37279da9cd0e8aae8f98e83dc2ac06b56f21da54b362f",
          "md5": "d02b834ed4f26847861eecaa6b84a162",
          "sha256": "3391d6c26c71aa498244704a64f60a2bd93815d25daa6ddcbf27804315657c44"
        },
        "downloads": -1,
        "filename": "pyniva-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d02b834ed4f26847861eecaa6b84a162",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9457,
        "upload_time": "2020-05-14T12:00:20",
        "upload_time_iso_8601": "2020-05-14T12:00:20.729148Z",
        "url": "https://files.pythonhosted.org/packages/45/c9/09cac64d35be5ef37279da9cd0e8aae8f98e83dc2ac06b56f21da54b362f/pyniva-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e2a0deb8da2009bab282adc16d61eed9689087c92d68666858c8658afa2db53",
          "md5": "49b882b39361a941271daff43bbf826d",
          "sha256": "a4d954416f2caccf7468d7e71cc2802bc8674a1d9a1b30f918eb04d8feacd093"
        },
        "downloads": -1,
        "filename": "pyniva-0.4.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49b882b39361a941271daff43bbf826d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 17257,
        "upload_time": "2020-05-20T08:26:37",
        "upload_time_iso_8601": "2020-05-20T08:26:37.820581Z",
        "url": "https://files.pythonhosted.org/packages/7e/2a/0deb8da2009bab282adc16d61eed9689087c92d68666858c8658afa2db53/pyniva-0.4.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09226e2b74be924066ae401f1947a07b8102ccab98801987dd49f5fb4c63b53c",
          "md5": "1861a5f1a1a72c1fea192dc9a88c3a58",
          "sha256": "4525a01b4e133ea485e85d9c5386617095e73015d7ff20dec06a4e6fa26571b8"
        },
        "downloads": -1,
        "filename": "pyniva-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1861a5f1a1a72c1fea192dc9a88c3a58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21391,
        "upload_time": "2020-05-20T08:26:39",
        "upload_time_iso_8601": "2020-05-20T08:26:39.035065Z",
        "url": "https://files.pythonhosted.org/packages/09/22/6e2b74be924066ae401f1947a07b8102ccab98801987dd49f5fb4c63b53c/pyniva-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "525509437feb801777b4be9ddd9945ab5063c2d5993e263dc6383e6e2cad2ef9",
          "md5": "0766b0da94753e533eeb82892f216e27",
          "sha256": "c047110abd2380616eca6bf636086c5dd164d57911602f178f1ccdaaf1b1184f"
        },
        "downloads": -1,
        "filename": "pyniva-0.4.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0766b0da94753e533eeb82892f216e27",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 17668,
        "upload_time": "2020-09-18T11:06:16",
        "upload_time_iso_8601": "2020-09-18T11:06:16.066329Z",
        "url": "https://files.pythonhosted.org/packages/52/55/09437feb801777b4be9ddd9945ab5063c2d5993e263dc6383e6e2cad2ef9/pyniva-0.4.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f69b15751e9a28f0facc803466cc553fd7a360127d5f6d4fae27fe8a26e47b5",
          "md5": "2e051b4c1cfb94a62b995d7edba8d690",
          "sha256": "dfb9963a0c4701d250ccbdec8c46a416d9c51f4e71f05b62c40b7a1a7069a154"
        },
        "downloads": -1,
        "filename": "pyniva-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2e051b4c1cfb94a62b995d7edba8d690",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21783,
        "upload_time": "2020-09-18T11:06:17",
        "upload_time_iso_8601": "2020-09-18T11:06:17.383200Z",
        "url": "https://files.pythonhosted.org/packages/5f/69/b15751e9a28f0facc803466cc553fd7a360127d5f6d4fae27fe8a26e47b5/pyniva-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "525509437feb801777b4be9ddd9945ab5063c2d5993e263dc6383e6e2cad2ef9",
        "md5": "0766b0da94753e533eeb82892f216e27",
        "sha256": "c047110abd2380616eca6bf636086c5dd164d57911602f178f1ccdaaf1b1184f"
      },
      "downloads": -1,
      "filename": "pyniva-0.4.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0766b0da94753e533eeb82892f216e27",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 17668,
      "upload_time": "2020-09-18T11:06:16",
      "upload_time_iso_8601": "2020-09-18T11:06:16.066329Z",
      "url": "https://files.pythonhosted.org/packages/52/55/09437feb801777b4be9ddd9945ab5063c2d5993e263dc6383e6e2cad2ef9/pyniva-0.4.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f69b15751e9a28f0facc803466cc553fd7a360127d5f6d4fae27fe8a26e47b5",
        "md5": "2e051b4c1cfb94a62b995d7edba8d690",
        "sha256": "dfb9963a0c4701d250ccbdec8c46a416d9c51f4e71f05b62c40b7a1a7069a154"
      },
      "downloads": -1,
      "filename": "pyniva-0.4.3.tar.gz",
      "has_sig": false,
      "md5_digest": "2e051b4c1cfb94a62b995d7edba8d690",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 21783,
      "upload_time": "2020-09-18T11:06:17",
      "upload_time_iso_8601": "2020-09-18T11:06:17.383200Z",
      "url": "https://files.pythonhosted.org/packages/5f/69/b15751e9a28f0facc803466cc553fd7a360127d5f6d4fae27fe8a26e47b5/pyniva-0.4.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}