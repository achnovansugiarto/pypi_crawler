{
  "info": {
    "author": "Chris Courson",
    "author_email": "chris@chrisbot.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# xArm Servo Controller\n\nThis is a library of methods to control the LewanSoul-Lobot-HiWonder xArm and LeArm, a 6-DOF robot arm, over TTL Serial or USB.\n\n| xArm | LeArm\n|------|---\n| ![xArm](https://i.imgur.com/ykl5PWF.png) | ![LeArm](https://i.imgur.com/TwVen6J.png)\n\n## Table of Content\n* [Reporting a problem](#reporting-a-problem)\n* [TTL Serial Control](#ttl-serial-control)\n* [USB Control](#usb-control)\n* [Setting up a Python development environment](#setting-up-a-windows-python-development-environment)\n* [Installing the xArm module](#installing-the-xArm-module)\n* [Methods and examples](#methods-and-examples)\n    * [*class* Servo](#servo)\n    * [*class* Controller](#controller)\n    * [setPosition](#setposition)\n    * [getPosition](#getposition)\n    * [servoOff](#servooff)\n    * [getBatteryVoltage](#getbatteryvoltage)\n* [Things left To-Do](#to-do)\n\n## Reporting a Problem\n\nIf you run into a problem installing or using this library, open an issue at https://github.com/ccourson/xArmServoController/issues.\n\n## TTL Serial Control\n\nThe control board mounted on the base of the xArm and LeArm has a 4-pin connector which provides a signal path and power to an external host controller.\n\n![Serial TTL Connector](https://i.imgur.com/M6nA4N2.png)\n\n| Pin | Description\n|-----|------------\n| **GND** | Power and signal ground.\n| **TX**  | Transmit serial TTL signal from arm to host controller. Mark = 5VDC, Space = 0VDC.\n| **RX**  | Receive serial TTL signal from host controller to arm. Mark = 5VDC, Space = 0VDC.\n| **5V**  | 5 Volts DC power to power an eternal host controller. Current rating is not yet known. In most circumstances this is left unconnected.\n|\n\n> :warning: Warning: Do not connect 5V pin to an external power source. Doing so will cause the arm to beep loudly and may damage the control board. The 5V pin is for powering an external host controller.\n\n## USB Control\n\nThe control board mounted on the base of the xArm and LeArm has a USB connector. The xArm has type mini-B and the LeArm has type micro-B. The arms are listed as Human Interface Devices in Windows Device Manager as \"HID-compliant bar code badge reader\".\n\n| VID  | PID\n|------|----\n| 0483 | 5750\n\n> :warning: Warning: The xArm and LeArm Windows apps will recognize either arm. The position ranges for each arm are very different and using the wrong app may cause damage to the arm.\n\n## Setting up a Windows Python development environment\n\nThere are many options for setting up Python development environment in Windows. To get xArmController running you install the following:\n\n1. Python 3\n1. An editor or IDE\n1. xArmController module\n\n### How to install Python 3\n\nIf you already have Python installed, ensure you are running version 3.6 or higher.\n\nWindows\n\n1. Open a  web browser to https://www.python.org/\n1. Click on the \"Download Python {version here}\" button on the home page.\n1. After downloaded, run the installer and follow the prompts.\n1. When prompted, choose to \"Add python.exe to Path\".\n\nLinux including Ubuntu and Lubuntu\n\n    $ apt install python3\n\nMacOS\n\n    $ brew add python3\n\n### Installing an editor\n\nPython includes a very simple GUI editor called IDLE. This editor is adequate for the examples and demos in this library.\n\nA more robust editor is VSCode (Visual Studio Code). It can be installed from https://code.visualstudio.com/. There are a couple plugins that will be required to get the best experience from VSCode. VSCode will *automagically* prompt you for these plugins when it detects you are working with Python.\n\nIf you prefer a more traditional IDE for Python, try [PyCharm by Jet Brains](https://github.com/ccourson/xArmServoController/issues).\n\n___\n\n## Installing the xArm module\n\nFrom the Windows Command Prompt or Terminal in Linux/MacOS, run the following command to install xArmController and its module dependency hidusb. Just copy from here and paste to the terminal command line.\n\n`pip install xarm`\n\n___\n\n## Methods and examples\n\n### Connecting to the xArm\n\nThis example is the bare minimum to connect to the xArm via USB and read the battery voltage.\n\n```py\nimport xarm\n\n# arm is the first xArm detected which is connected to USB\narm = xarm.Controller('USB')\nprint('Battery voltage in volts:', arm.getBatteryVoltage())\n```\nOutput:\n> Battery voltage: 7.677\n\nThe Controller can connect to a specific xArm by appending the serial number to \"USB\". To find the serial number of your xArm, turn on debug, then after connecting one xArm, run this code.\n\n```py\nimport xarm\n\narm = xarm.Controller('USB', debug=True)\n```\nOutput:\n>Serial number: 497223563535\n\nNow knowing the serial number you can connect to a specific xArm like this example using two.\n\n```py\nimport xarm\n\narm1 = xarm.Controller('USB497223563535')\narm2 = xarm.Controller('USB497253743535')\n\nprint('Battery voltage of arm1 in volts:', arm1.getBatteryVoltage())\n\nprint('Battery voltage of arm2 in volts:', arm2.getBatteryVoltage())\n```\nOutput:\n\n>Battery voltage of arm1 in volts: 7.677\\\n>Battery voltage of arm2 in volts: 7.662\n\nIn the same way, the Controller can connect to one or more serailly connected xArms. To do this, supply Controller the serial ports they are connected to.\n\n### Classes and Methods\n\n<a id=\"servo\"></a>\n*class* **Servo**(*servo_id*__[__, *position=500*__]__)\n<dl><dd>\nReturns a <i>Servo</i> object. The Servo class is used to hold the position of a given servo in units and angle.\n\nProperties include:\n<ul>\n<li>servo_id - ID of servo.</li>\n<li>position - Position of servo in units (0 to 1000).</li>\n<li>angle - Angle of servo in degrees (-125.0 to 125.0 in 0.25 degree integral).</li>\n</ul>\n\nThe <em>position</em> paramter may be specified with an <em>int</em> value between 0 and 1000. When set to a <em>float</em> value between -125.0 to 125.0, the <em>angle</em> value is set in degrees and rounded to a 0.25 degree integral. There are 4 servo units per degree of angle.\n\n>Note: In Python, an <em>int</em> value does not have a decimal point (500). A <em>float</em> value has a decimal point (0.0).\n\nSetting position will also set the corresponding angle and visa-versa. If <em>position</em> is not specified, it will default to '500' and <em>angle</em> will be set to '0.0'.\n\n```py\nimport xarm\n\narm = xarm.Controller('USB')\n\n# define servo as servo ID 1 with position 300\nservo = xarm.Servo(1, 300)\n\nprint('servo ID:', servo.servo_id)\nprint('servo position:', servo.position)\nprint('servo angle:', servo.angle)\n```\nOutput:\n>servo ID: 1\\\n>servo position: 300\\\n>servo angle: -50.0\n</dd></dl>\n\n<a id=\"controller\"></a>\n*class* **Controller**(*com_port*__[__, *debug=False*__]__)\n<dl><dd>\nReturns a <i>Controller</i> object. The Controller class connects Python to the xArm. The port to connect to the xArm through is determined by <i>com_port</i> which can be a serial port (<code>COM5</code>) or USB port (<code>USB</code>). Multiple xArms may be connected. If more than one xArm is attached by USB, each can be identified by appending the serial number to 'USB' (<code>USB497223563535</code>). \n\nOptionally, when <i>debug</i> is <code>True</code>, communication diganostic information will be printed to the terminal.\n\n```py\n# attach to xArm connected to USB\narm1 = xarm.Controller('USB')\n# attach to USB connected xArm with serial number '497223563535'\narm2 = xarm.Controller('USB497223563535')\n# attach to xArm connected to serial port 'COM5'\narm3 = xarm.Controller('COM5')\n# enable debug\narm4 = xarm.Controller('COM6', True)        # positional argument\narm5 = xarm.Controller('COM7', debug=True)  # named argument\n```\n</dd></dl>\n\n<a id=\"setposition\"></a>\n**setPosition**(*servos*__[__, *position=None*, *duration=1000*, *wait=False*__]__)\n<dl><dd>\nMoves one or more <em>servos</em> to a specified <em>position</em> over a <em>duration</em> and optionallly <em>wait</em>s during the duration.\n\nWhen <em>servos</em> is an <em>int</em> value, it represents a servo ID and the <em>position</em> parameter is required.\n\nThe <em>position</em> paramter may be an <em>int</em> to indicate a unit position (0 to 1000) or a <em>float</em> to indicate an angle in degrees (-125.0 to 125.0).\n\n```py\n# Set servo ID 1 to position 500.\nsetPosition(1, 500)\n```\n\nWhen <em>servos</em> is a <em>Servo</em> object, the <em>position</em> parameter is ignored.The Servo parameter holds the position and angle.\n\nWhen <em>servos</em> is a <em>list</em>, it may contain <em>Servo</em> objects or servo ID and position pairs and the <em>position</em> parameter is ignored.\n\n```py\nimport xarm\n\narm = xarm.Controller('USB')\n\nservo1 = xarm.Servo(1)       # assumes default unit position 500\nservo2 = xarm.Servo(2, 300)  # unit position 300\nservo3 = xarm.Servo(3, 90.0) # angle 90 degrees\n\n# sets servo 1 to unit position 300 and waits the default 1 second\n# before returning\narm.setPosition(1, 300, wait=True)\n\n# sets servo 2 to unit position 700 and moves the servo at a\n# rate of 2 seconds\narm.setPosition(2, 700, 2000, True)\n\n# sets servo1 to 45 degrees and waits the default 1 second\n# before returning\narm.setPosition(3, 45.0, wait=True) \n\n# sets servo 2 to position 300 as defined above but continues to\n# the next method before completing movement\narm.setPosition(servo2) \n\n# sets servos 1-3 as defined and continues without waiting\narm.setPosition([servo1, servo3])\n\n# sets servos 1 to unit position 200 and servo 2 to 90 degrees\narm.setPosition([[1, 200], [2, 90.0]], wait=True) \n\n# Servo object and servo ID/position pairs can be combined\narm.setPosition([servo1, [2, 500], [3, 0.0]], 2000)\n```\n</dd></dl>\n\n<a id=\"getposition\"></a>\n**getPosition**(*servos*__[__, *degrees=False*__]__)\n<dl><dd>\nReturns the current <em>position</em> of one or more <em>servos</em>.\n\nBy default, the <em>unit position</em> is returned. When <em>degrees</em> is <code>True</code>, the <em>angle</em> is returned.\n\nThe <em>servos</em> parameter may be a servo ID (1 to 6) or a <em>Servo</em> object or a list of one or more <em>Servo</em> objects.\n\n```py\nimport xarm\n\narm = xarm.Controller('USB')\n\nservo1 = xarm.Servo(1)\nservo2 = xarm.Servo(2)\nservo3 = xarm.Servo(3)\n\n# Gets the position of servo 1 in units\nposition = arm.getPosition(1)\nprint('Servo 1 position:', position)\n\n# Gets the position of servo 2 as defined above\nposition = arm.getPosition(servo2)\nprint('Servo 2 position:', position)\n\n# Gets the position of servo 3 in degrees\nposition = arm.getPosition(3, True)\nprint('Servo 3 position (degrees):', position)\n\n# Gets the position of servo 2 as defined above\n# It is not necessary to set the degreees parameter\n# because the Servo object performes that conversion\nposition = arm.getPosition([servo1, servo2, servo3])\nprint('Servo 1 position (degrees):', servo1.angle)\nprint('Servo 2 position (degrees):', servo2.angle)\nprint('Servo 3 position (degrees):', servo3.angle)\n```\n</dd></dl>\n\n<a id=\"servooff\"></a>\n**servoOff**(__[__*servos=None*__]__)\n<dl><dd>\nTurns off motor of one or more servos. If <em>servos</em> paramter is not specified, will turn off all servo motors.\n\n```py\nimport xarm\n\narm = xarm.Controller('USB')\n\nservo2 = xarm.Servo(2)\nservo5 = xarm.Servo(5)\nservo6 = xarm.Servo(6)\n\n# Turns off servo motor 1\narm.servoOff(1)\n\n# Turns off servo motor 1\narm.servoOff(servo2)\n\n# Turns off servo motors 3 and 4\narm.servoOff([3, 4])\n\n# Turns off servo motors 5 and 6\narm.servoOff([servo5, servo6])\n```\n</dd></dl>\n\n<a id=\"getbatteryvoltage\"></a>\n**getBatteryVoltage**()\n<dl><dd>\nReturns battery or power supply voltage on volts.\n\n```py\nimport xarm\n\narm = xarm.Controller('USB')\n\nbattery_voltage = arm.getBatteryVoltage()\nprint('Battery voltage (volts):', battery_voltage)\n```\n</dd></dl>\n\n___\n## To-Do\n\n* gripCalibrate - Gripper will slowly close and detect when it has reached the fully closed condition.\n* gripClose - Gripper will slowly close and stop when it has detected gripper is no longer closing.\n* gripOpen - Gripper will open to a specified with in centimeters.\n* gripMove - Gripper will move to a Euclidean coordinate while maintining its angle.\n\n### Built-in functions\n\n* groupRun\n* groupStop\n* groupErase\n* groupDownload\n* groupSpeed\n* offsetRead\n* offsetWrite\n* offsetAdjust\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ccourson/xArmServoController",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xarm",
    "package_url": "https://pypi.org/project/xarm/",
    "platform": "",
    "project_url": "https://pypi.org/project/xarm/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ccourson/xArmServoController/issues",
      "Homepage": "https://github.com/ccourson/xArmServoController"
    },
    "release_url": "https://pypi.org/project/xarm/0.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Servo controller to manipulate xArm and LeArm",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10020489,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77414697edf80cd77510f8e62bf8466e7826cf7a6e2da55ccaf488037c338273",
          "md5": "dfe5e55245b8c35c56284c5f8b4065bd",
          "sha256": "aad85ab2900e9efd7c583317ce57f1a62e6cc1d5a62035f067a13bd52fd21680"
        },
        "downloads": -1,
        "filename": "xarm-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfe5e55245b8c35c56284c5f8b4065bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9159,
        "upload_time": "2021-04-09T18:19:03",
        "upload_time_iso_8601": "2021-04-09T18:19:03.442368Z",
        "url": "https://files.pythonhosted.org/packages/77/41/4697edf80cd77510f8e62bf8466e7826cf7a6e2da55ccaf488037c338273/xarm-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30fcdb5aa4d9fc28e5a73ac9cfcbe3986ac2e09ed41b3ebace827c6670da416c",
          "md5": "61e5f2524c9dacf454bf9a32a90fb824",
          "sha256": "8b39f94ead8d775e56e7a24bd7b964b0a31054f74c4c7a11504926241b3cc443"
        },
        "downloads": -1,
        "filename": "xarm-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "61e5f2524c9dacf454bf9a32a90fb824",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11919,
        "upload_time": "2021-04-09T18:19:04",
        "upload_time_iso_8601": "2021-04-09T18:19:04.750517Z",
        "url": "https://files.pythonhosted.org/packages/30/fc/db5aa4d9fc28e5a73ac9cfcbe3986ac2e09ed41b3ebace827c6670da416c/xarm-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77414697edf80cd77510f8e62bf8466e7826cf7a6e2da55ccaf488037c338273",
        "md5": "dfe5e55245b8c35c56284c5f8b4065bd",
        "sha256": "aad85ab2900e9efd7c583317ce57f1a62e6cc1d5a62035f067a13bd52fd21680"
      },
      "downloads": -1,
      "filename": "xarm-0.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dfe5e55245b8c35c56284c5f8b4065bd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9159,
      "upload_time": "2021-04-09T18:19:03",
      "upload_time_iso_8601": "2021-04-09T18:19:03.442368Z",
      "url": "https://files.pythonhosted.org/packages/77/41/4697edf80cd77510f8e62bf8466e7826cf7a6e2da55ccaf488037c338273/xarm-0.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "30fcdb5aa4d9fc28e5a73ac9cfcbe3986ac2e09ed41b3ebace827c6670da416c",
        "md5": "61e5f2524c9dacf454bf9a32a90fb824",
        "sha256": "8b39f94ead8d775e56e7a24bd7b964b0a31054f74c4c7a11504926241b3cc443"
      },
      "downloads": -1,
      "filename": "xarm-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "61e5f2524c9dacf454bf9a32a90fb824",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11919,
      "upload_time": "2021-04-09T18:19:04",
      "upload_time_iso_8601": "2021-04-09T18:19:04.750517Z",
      "url": "https://files.pythonhosted.org/packages/30/fc/db5aa4d9fc28e5a73ac9cfcbe3986ac2e09ed41b3ebace827c6670da416c/xarm-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}