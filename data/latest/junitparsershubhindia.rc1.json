{
  "info": {
    "author": "Shubham Gopale",
    "author_email": "shubhindia123@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Text Processing"
    ],
    "description": "junitparser -- Pythonic JUnit/xUnit Result XML Parser\n======================================================\n\n.. image:: https://github.com/weiwei/junitparser/workflows/build/badge.svg?branch=master\n   :target: https://github.com/weiwei/junitparser/actions\n.. image:: https://codecov.io/gh/weiwei/junitparser/branch/master/graph/badge.svg?token=UotlfRXNnK\n   :target: https://codecov.io/gh/weiwei/junitparser\n\njunitparser handles JUnit/xUnit Result XML files. Use it to parse and manipulate\nexisting Result XML files, or create new JUnit/xUnit result XMLs from scratch.\n\nFeatures\n--------\n\n* Parse or modify existing JUnit/xUnit xml files.\n* Parse or modify non-standard or customized JUnit/xUnit xml files, by monkey\n  patching existing element definitions.\n* Create JUnit/xUnit test results from scratch.\n* Merge test result xml files.\n* Specify xml parser. For example you can use lxml to speed things up.\n* Invoke from command line, or `python -m junitparser`\n* Python 2 and 3 support (As of Nov 2020, 1/4 of the users are still on Python \n  2, so there is no plan to drop Python 2 support)\n\nNote on version 2\n-----------------\n\nVersion 2 improved support for pytest result xml files by fixing a few issues, \nnotably that there could be multiple <Failure> or <Error> entries. There is a \nbreaking change that ``TestCase.result`` is now a list instead of a single item.\nIf you are using this attribute, please update your code accordingly.\n\nInstallation\n-------------\n\n::\n\n    pip install junitparser\n\nUsage\n-----\n\nYou should be relatively familiar with the Junit XML format. If not, run\n``pydoc`` on the exposed classes and functions to see how it's structured.\n\nCreate Junit XML format reports from scratch\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou have some test result data, and you want to convert them into junit.xml\nformat.\n\n.. code-block:: python\n\n    from junitparser import TestCase, TestSuite, JUnitXml, Skipped, Error\n\n    # Create cases\n    case1 = TestCase('case1', 'class.name', 0.5) # params are optional\n    case1.classname = \"modified.class.name\" # specify or change case attrs\n    case1.result = [Skipped()] # You can have a list of results\n    case2 = TestCase('case2')\n    case2.result = [Error('Example error message', 'the_error_type')]\n\n    # Create suite and add cases\n    suite = TestSuite('suite1')\n    suite.add_property('build', '55')\n    suite.add_testcase(case1)\n    suite.add_testcase(case2)\n    suite.remove_testcase(case2)\n\n    # Add suite to JunitXml\n    xml = JUnitXml()\n    xml.add_testsuite(suite)\n    xml.write('junit.xml')\n\nRead and manipulate exiting JUnit/xUnit XML files\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou have some existing junit.xml files, and you want to modify the content.\n\n.. code-block:: python\n\n    from junitparser import JUnitXml\n\n    xml = JUnitXml.fromfile('/path/to/junit.xml')\n    for suite in xml:\n        # handle suites\n        for case in suite:\n            # handle cases\n    xml.write() # Writes back to file\n\nIt is also possible to use a custom parser. For example lxml provides a plethora\nof parsing options_. We can use them this way:\n\n.. code-block:: python\n\n    from lxml.etree import XMLParser, parse\n    from junitparser import JUnitXml\n\n    def parse_func(file_path):\n        xml_parser = XMLParser(huge_tree=True)\n        return parse(file_path, xml_parser)\n\n    xml = JUnitXml.fromfile('/path/to/junit.xml', parse_func)\n    # process xml...\n\n.. _options: https://lxml.de/api/lxml.etree.XMLParser-class.html\n\nMerge XML files\n~~~~~~~~~~~~~~~\n\nYou have two or more XML files, and you want to merge them into one.\n\n.. code-block:: python\n\n    from junitparser import JUnitXml\n\n    xml1 = JUnitXml.fromfile('/path/to/junit1.xml')\n    xml2 = JUnitXml.fromfile('/path/to/junit2.xml')\n\n    newxml = xml1 + xml2\n    # Alternatively, merge in place\n    xml1 += xml2\n\nNote that it won't check for duplicate entries. You need to deal with them on\nyour own.\n\nCreate XML with custom attributes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou want to use an attribute that is not supported by default.\n\n.. code-block:: python\n\n    from junitparser import TestCase, Attr, IntAttr, FloatAttr\n\n    # Add the custom attribute\n    TestCase.id = IntAttr('id')\n    TestCase.rate = FloatAttr('rate')\n    TestCase.custom = Attr('custom')\n    case = TestCase()\n    case.id = 123\n    case.rate = 0.95\n    case.custom = 'foobar'\n\n\nHandling XML with custom element\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere may be once in 1000 years you want to it this way, but anyways.\nSuppose you want to add element CustomElement to TestCase.\n\n.. code-block:: python\n\n    from junitparser import Element, Attr, TestSuite\n\n    # Create the new element by subclassing Element,\n    # and add custom attributes to it.\n    class CustomElement(Element):\n        _tag = 'custom'\n        foo = Attr()\n        bar = Attr()\n\n    testcase = TestCase()\n    custom = CustomElement()\n    testcase.append(custom)\n    # To find a single sub-element:\n    testcase.child(CustomElement)\n    # To iterate over custom elements:\n    for custom in testcase.iterchildren(CustomElement):\n        ... # Do things with custom element\n\nHandling custom XML attributes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSay you have some data stored in the XML as custom attributes and you want to\nread them out:\n\n.. code-block:: python\n\n    from junitparser import TestCase, Attr, JUnitXml\n\n    # Create the new element by subclassing Element or one of its child class,\n    # and add custom attributes to it.\n    class MyTestCase(TestCase):\n        foo = Attr()\n\n    xml = JUnitXml.fromfile('/path/to/junit.xml')\n    for suite in xml:\n        # handle suites\n        for case in suite:\n            my_case = MyTestCase.fromelem(case)\n            print(my_case.foo)\n\nCommand Line\n------------\n\n.. code-block:: shell\n\n    $ junitparser --help\n    usage: junitparser [-h] [-v] {merge} ...\n\n    Junitparser CLI helper.\n\n    positional arguments:\n    {merge}        command\n      merge        Merge Junit XML format reports with junitparser.\n\n    optional arguments:\n    -h, --help     show this help message and exit\n    -v, --version  show program's version number and exit\n\n\n.. code-block:: shell\n\n    $ junitparser merge --help\n    usage: junitparser merge [-h] [--glob] paths [paths ...] output\n\n    positional arguments:\n      paths       Original XML path(s).\n      output      Merged XML Path, setting to \"-\" will output console\n\n    optional arguments:\n      -h, --help  show this help message and exit\n      --glob      Treat original XML path(s) as glob(s).\n\nTest\n----\n\nThe tests are written with python `unittest`, to run them, use pytest::\n\n    pytest test.py\n\nContribute\n----------\n\nPRs are welcome!",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shubhindia/junitparser",
    "keywords": "junit xunit xml parser",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "junitparsershubhindia",
    "package_url": "https://pypi.org/project/junitparsershubhindia/",
    "platform": "",
    "project_url": "https://pypi.org/project/junitparsershubhindia/",
    "project_urls": {
      "Homepage": "https://github.com/shubhindia/junitparser"
    },
    "release_url": "https://pypi.org/project/junitparsershubhindia/2.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Manipulates JUnit/xUnit Result XML files",
    "version": "2.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10659723,
  "releases": {
    "2.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38caa62182403c485435773dddaeb931cd015274b8c197d90bb435c83fe4d0a5",
          "md5": "0a15eeabe53b83ae3ad5b9d414b1a211",
          "sha256": "fffda4befce11f3479fc1b8816387b48a3b1caca74f1b56af42368205707c930"
        },
        "downloads": -1,
        "filename": "junitparsershubhindia-2.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0a15eeabe53b83ae3ad5b9d414b1a211",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12380,
        "upload_time": "2021-06-16T05:05:07",
        "upload_time_iso_8601": "2021-06-16T05:05:07.186686Z",
        "url": "https://files.pythonhosted.org/packages/38/ca/a62182403c485435773dddaeb931cd015274b8c197d90bb435c83fe4d0a5/junitparsershubhindia-2.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38caa62182403c485435773dddaeb931cd015274b8c197d90bb435c83fe4d0a5",
        "md5": "0a15eeabe53b83ae3ad5b9d414b1a211",
        "sha256": "fffda4befce11f3479fc1b8816387b48a3b1caca74f1b56af42368205707c930"
      },
      "downloads": -1,
      "filename": "junitparsershubhindia-2.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0a15eeabe53b83ae3ad5b9d414b1a211",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12380,
      "upload_time": "2021-06-16T05:05:07",
      "upload_time_iso_8601": "2021-06-16T05:05:07.186686Z",
      "url": "https://files.pythonhosted.org/packages/38/ca/a62182403c485435773dddaeb931cd015274b8c197d90bb435c83fe4d0a5/junitparsershubhindia-2.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}