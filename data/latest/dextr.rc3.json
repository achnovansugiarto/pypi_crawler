{
  "info": {
    "author": "Geoff French",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# PyTorch implementation of DEXTR\n\nAn implementation of [DEXTR](http://people.ee.ethz.ch/~cvlsegmentation/dextr/).\nThe original implementation can be found at [https://github.com/scaelles/DEXTR-PyTorch](https://github.com/scaelles/DEXTR-PyTorch).\n\nThis implementation is intended for use as a library.\n\n### Installation\n\n`> pip install dextr`\n\n\n## Python Inference API\n\nSee `demo.py` for an example of using the `dextr` inference API.\n\nWe have trained a ResNet-101 based U-Net DEXTR model on the Pascal VOC 2012 training set. You can download it\n[here](https://storage.googleapis.com/dextr_pytorch_models_public/dextr_pascalvoc_resunet101-a2d81727.pth).\n\nYou can load this model -- downloading it automatically -- like so:\n\n```py3\nfrom dextr.model import DextrModel\n\n# Load the model (automatically downloads if necessary)\n# You can also provide a `map_location` paramter to load it onto a specific device\nmodel = DextrModel.pascalvoc_resunet101()\n```\n\nAlternatively you can load a model that you have trained yourself from a file:\n```py3\nMODEL_PATH = '...'\ndextr_model = torch.load(MODEL_PATH, map_location='cuda:0')\n```\n\nUse the `predict` method to predict a mask for an object in an image, identified by its extreme points:\n\n```py3\nmask = dextr_model.predict([image], [extreme_points])[0]\n```\n\nYou can perform inference on multiple images with one call.\nThe `DextrModel.predict` method takes a list\nof images and extreme points as either a list of `(4, [y, x])` NumPy arrays or\none `(N, 4, [y, x])` shaped NumPy array. \n\nThe images that you use as input can take the form of either NumPy arrays or PIL Images. Each image should\nhave a corresponding list of four extreme points. It returns a list of masks; each\nmask is the same size as the corresponding input image:\n\n\n## Training using the command line `train_dextr.py` program\n\n### Train a DEXTR network using the Pascal VOC dataset\n\nThis will train a DEXTR model using a [U-Net](https://arxiv.org/abs/1505.04597) with a ResNet-101 based encoder.\nIt should take several hours on an nVidia 1080Ti GPU. \n\n- Download the Pascal VOC 2012 dataset [development kit](http://host.robots.ox.ac.uk/pascal/VOC/voc2012/)\n- Create a file called `dextr.cfg` with the following contents:\n```cfg\n[paths]\npascal_voc=<path to VOC2012 diretory>\n```  \n- Train the DEXTR model by running:\n\n`> python train_dextr.py pascal_resunet101 --dataset=pascal_voc --arch=resunet101`\n\nThe name `pascal_resunet101` is the name of the job; STDOUT will be logged to `logs/log_pascal_resunet101.txt` and the model\nfile will be saved to `checkpoints/pascal_resunet101.pth`. You can give the job any name you like.\n\n\n### Fine tuning a DEXTR network using a custom data set\n\nThere are two types of data set you can use:\n1. Each input image has a corresponding label image, where label images have an integer pixel type such that each\n   pixel gives the index of the object that covers it, or 0 for background. The Pascal VOC dataset is arranged in\n   this way.\n2. Each input image has a corresponding set of mask images that form a stack. Each mask image is an 8-bit greyscale\n   image that corresponds to an object/instance and identifies the pixels covered by it.\n\nPlease arrange your custom data set so that the image file names (excluding extension) match or are a prefix\nto the label/mask image file names. E.g. the image `img0.jpg` will match the label file `img0.png` or `img0_labels.png`.\nFor mask stack datasets `img0.jpg` would match to the mask images `img0_mask0.png`, ... `img0_maskN.png`.\nThe images and labels can live in separate directories; they are matched by filename *only*.\n\nIn these examples, we assume that you have downloaded the pre-trained DEXTR model linked above.\n\n##### Training using a label image data set\n\n`> python train_dextr.py my_model_from_labels --dataset=custom_label\n--train_image_pat=/mydataset/train/input/*.jpg --train_target_pat=/mydataset/train/labels/*.png\n--arch=resunet101 --load_model=dextr_pascalvoc_resunet101-a2d81727.pth`\n\nThe input and label images are given to the `--train_image_pat` and `--train_target_pat` options.\nYou can specify validation images using the `--val_image_pat` and `--val_target_pat` options in a similar way.\n\n`--load_model=dextr_pascalvoc_resunet101-a2d81727.pth` indicates that we should start by loading the\nmodel trained on Pascal VOC above and fine-tune it, rather than starting from an ImageNet classifier.\n\nYou can specify that the label index 255 should be ignore by adding `--label_ignore_index=255`.\n\nYou could train using the entire (train and validation) Pascal VOC data set using:\n\n`> python train_dextr.py my_model_from_pascal --dataset=custom_label\n--train_image_pat=/pascal/VOC2012/JPEGImages/*.jpg --train_target_pat=/pascal/VOC2012/SegmentationObjects/*.png\n--label_ignore_index=255 --arch=resunet101`\n\n##### Training using a mask stack data set\n\n`> python train_dextr.py my_model_from_masks --dataset=custom_mask\n--train_image_pat=/mydataset/train/input/*.jpg --train_target_pat=/mydataset/train/masks/*.png\n--arch=resunet101 --load_model=dextr_pascalvoc_resunet101-a2d81727.pth`\n\n\n\n## Python training API\n\nThe `training_loop` function within the `dextr.model` module provides a simple training loop that can be used\nfor training or fine-tuning models. See `train_dextr.py` for usage.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Britefury/dextr",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dextr",
    "package_url": "https://pypi.org/project/dextr/",
    "platform": "",
    "project_url": "https://pypi.org/project/dextr/",
    "project_urls": {
      "Homepage": "https://github.com/Britefury/dextr"
    },
    "release_url": "https://pypi.org/project/dextr/0.1.2/",
    "requires_dist": [
      "numpy",
      "scipy",
      "Pillow",
      "scikit-image",
      "torch",
      "torchvision"
    ],
    "requires_python": "",
    "summary": "PyTorch Deep Extreme Cut library",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7222443,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa43cffb5653cb3a319eb963a40914f42f660892ff1a231ae2a089e6e7ab7298",
          "md5": "6ce08e2c7512d97376b4378393a7c24a",
          "sha256": "4fe04b3cb4ec556a1a7c6e1fa8c2409fcfcda6670f7d30a667f4e71ee26bc99b"
        },
        "downloads": -1,
        "filename": "dextr-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ce08e2c7512d97376b4378393a7c24a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 31824,
        "upload_time": "2020-05-11T23:23:55",
        "upload_time_iso_8601": "2020-05-11T23:23:55.737202Z",
        "url": "https://files.pythonhosted.org/packages/fa/43/cffb5653cb3a319eb963a40914f42f660892ff1a231ae2a089e6e7ab7298/dextr-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2ddb4b728dd544aecd05afa18ead3d2db13ae3a3eb8db170dfe8333f224deaa",
          "md5": "36fb740af1ab3769b7775854b66ea750",
          "sha256": "ff090e4b064de1bd560ceaff45a0c956ca103031d5549654f747475a9aff20b3"
        },
        "downloads": -1,
        "filename": "dextr-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "36fb740af1ab3769b7775854b66ea750",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22024,
        "upload_time": "2020-05-11T23:23:57",
        "upload_time_iso_8601": "2020-05-11T23:23:57.945997Z",
        "url": "https://files.pythonhosted.org/packages/a2/dd/b4b728dd544aecd05afa18ead3d2db13ae3a3eb8db170dfe8333f224deaa/dextr-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61efa04a8f3d4a1901bd1a4b0035c7a2525d2e46bb0f0d1ee332d06e74620528",
          "md5": "4ffc3cfdc41633fb44f14954dc50fc35",
          "sha256": "ffd0ffbcc9b2ca939e9453f9749a9ad22e73ccb3b7d0e862fdc3574e1780bf40"
        },
        "downloads": -1,
        "filename": "dextr-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ffc3cfdc41633fb44f14954dc50fc35",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32146,
        "upload_time": "2020-05-12T09:08:59",
        "upload_time_iso_8601": "2020-05-12T09:08:59.827605Z",
        "url": "https://files.pythonhosted.org/packages/61/ef/a04a8f3d4a1901bd1a4b0035c7a2525d2e46bb0f0d1ee332d06e74620528/dextr-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "175ac20bc6b4aec56f954dae6872eca72629c9cf2a586767d123ec1e2b69d249",
          "md5": "fd7f25913177af2f26a121d198ddb139",
          "sha256": "284054e4fbfe78e888d851834946637ca7c48baf8f88524128f25b094cf291ac"
        },
        "downloads": -1,
        "filename": "dextr-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fd7f25913177af2f26a121d198ddb139",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22649,
        "upload_time": "2020-05-12T09:09:01",
        "upload_time_iso_8601": "2020-05-12T09:09:01.122125Z",
        "url": "https://files.pythonhosted.org/packages/17/5a/c20bc6b4aec56f954dae6872eca72629c9cf2a586767d123ec1e2b69d249/dextr-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7883a05884955bdaaa4aaa117656b1a627b50ae409e373b130fe11670a277e8e",
          "md5": "fec92801fdce45e7dce3abfd538efe25",
          "sha256": "2d3f857020723affb921396d7cfd88d2d3fb7581b74a21ada5841922c2031e1e"
        },
        "downloads": -1,
        "filename": "dextr-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fec92801fdce45e7dce3abfd538efe25",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32227,
        "upload_time": "2020-05-12T09:34:02",
        "upload_time_iso_8601": "2020-05-12T09:34:02.910001Z",
        "url": "https://files.pythonhosted.org/packages/78/83/a05884955bdaaa4aaa117656b1a627b50ae409e373b130fe11670a277e8e/dextr-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33dbfe3ee27125b7b68cc46f523c472fce33456d45842da018bd02967253ae09",
          "md5": "ed72205592a563e98544e6327f180b02",
          "sha256": "5e14716b26ffa64d16fdbb1b5880f9e658c58752e0d1952a022eb897c62bda7a"
        },
        "downloads": -1,
        "filename": "dextr-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ed72205592a563e98544e6327f180b02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22705,
        "upload_time": "2020-05-12T09:34:04",
        "upload_time_iso_8601": "2020-05-12T09:34:04.327785Z",
        "url": "https://files.pythonhosted.org/packages/33/db/fe3ee27125b7b68cc46f523c472fce33456d45842da018bd02967253ae09/dextr-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7883a05884955bdaaa4aaa117656b1a627b50ae409e373b130fe11670a277e8e",
        "md5": "fec92801fdce45e7dce3abfd538efe25",
        "sha256": "2d3f857020723affb921396d7cfd88d2d3fb7581b74a21ada5841922c2031e1e"
      },
      "downloads": -1,
      "filename": "dextr-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fec92801fdce45e7dce3abfd538efe25",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 32227,
      "upload_time": "2020-05-12T09:34:02",
      "upload_time_iso_8601": "2020-05-12T09:34:02.910001Z",
      "url": "https://files.pythonhosted.org/packages/78/83/a05884955bdaaa4aaa117656b1a627b50ae409e373b130fe11670a277e8e/dextr-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "33dbfe3ee27125b7b68cc46f523c472fce33456d45842da018bd02967253ae09",
        "md5": "ed72205592a563e98544e6327f180b02",
        "sha256": "5e14716b26ffa64d16fdbb1b5880f9e658c58752e0d1952a022eb897c62bda7a"
      },
      "downloads": -1,
      "filename": "dextr-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ed72205592a563e98544e6327f180b02",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22705,
      "upload_time": "2020-05-12T09:34:04",
      "upload_time_iso_8601": "2020-05-12T09:34:04.327785Z",
      "url": "https://files.pythonhosted.org/packages/33/db/fe3ee27125b7b68cc46f523c472fce33456d45842da018bd02967253ae09/dextr-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}