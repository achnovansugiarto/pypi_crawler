{
  "info": {
    "author": "",
    "author_email": "Joao Almeida e Sousa <j.g.sousa@sheffield.ac.uk>, Steven Sourbron <s.sourbron@sheffield.ac.uk>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "## Installation\r\nRun `pip install dbdicom`.\r\n\r\n\r\n# Summary\r\n\r\nThe DICOM format is the universally recognised standard for medical imaging, but reading and writing DICOM data remains a challenging task for most data scientists. \r\n\r\nThe excellent python package `pydicom` is very commonly used and well-supported, but it is limited to reading and writing individual files, and still requires a fairly high level of understanding of DICOM to ensure compliance with the standard. \r\n\r\n`dbdicom` wraps around `pydicom` to provide an intuitive programming interface for reading and writing data from entire DICOM databases, replacing unfamiliar DICOM-native concepts by language and notations that will be more familiar to data scientists. \r\n\r\nThe sections below list some basic uses of `dbdicom`. The package is currently deployed in several larger scale multicentre clinical studies led by the authors, such as the [iBEAt study](https://bmcnephrol.biomedcentral.com/articles/10.1186/s12882-020-01901-x) and the [AFiRM study](https://www.uhdb.nhs.uk/afirm-study/). The package will continue to be shaped through use in these studies and we expect it will attain a more final form when these analysis pipelines are fully operational.\r\n\r\n\r\n# Browsing a DICOM folder\r\n\r\n### Reading and opening a DICOM database\r\n\r\nOpen a DICOM database in a given folder, and print a summary of the content:\r\n\r\n```python\r\nimport dbdicom as db\r\n\r\ndatabase = db.database('C:\\\\Users\\\\MyName\\\\MyData\\\\DICOMtestData')\r\ndatabase.print()\r\n```\r\n\r\nThe first time the database is opened this will be relatively slow because all files need to be read and summarized. If the folder is reopened again later, the table can be read directly and opening will be much faster. \r\n\r\nUse `scan()` to force a rereading of the database. This may be of use when files have become corrupted, or have been removed/modified by external applications:\r\n\r\n```python\r\ndatabase.scan()\r\n```\r\n\r\nAfter making changes to the DICOM data, the folder should be closed \r\nproperly so any changes can be either saved or rolled back as needed:\r\n\r\n```python\r\ndatabase.close()\r\n```\r\n\r\nIf unsaved changes exist, `close()` will prompt the user to either save or restore to the last saved state.\r\n\r\n### Retrieving objects from the folder\r\n\r\nA DICOM database has a hierarchical structure. \r\n\r\n```\r\ndatabase/\r\n|\r\n|---- Patient 1/\r\n|    |\r\n|    |---- Study 1/\r\n|    |     |\r\n|    |     |---- Series 1/\r\n|    |     |    |----Instance 1\r\n|    |     |    |----Instance 2\r\n|    |     |    |----Instance 3\r\n|    |     |    \r\n|    |     |----Series 2/\r\n|    |    \r\n|    |---- Study 2/\r\n|\r\n|---- Patient 2/  \r\n| \r\n```\r\n\r\nA *patient* can be an actual patient but can also be a healthy volunteer, an animal, a physical reference object, or a digital reference object. Typically a *study* consist of all the data derived in a single examination of a subject. A *series* usually represents and individual examination in a study, such an MR sequence. The files contain the data and are *instances* of real-world objects such as images or regions-of-interest. \r\n\r\nTo return a list of all patients, studies, series or instances in the folder: \r\n\r\n```python\r\ninstances = database.instances()\r\nseries = database.series()\r\nstudies = database.studies()\r\npatients = database.patients()\r\n```\r\n\r\nThe same functions can be used to retrieve the children of a certain parent object. For instance, \r\nto get all studies of a patient:\r\n\r\n```python\r\nstudies = patient.studies()\r\n```\r\n\r\nOr all series under the first of those studies:\r\n\r\n```python\r\nseries = studies()[0].series()\r\n```\r\n\r\nOr all instances of a study:\r\n\r\n```python\r\ninstances = study.instances()\r\n```\r\n\r\nAnd so on for all other levels in the hierarchy. These functions also work to find objects higher up in the hierarchy. For instance, to find the patient of a given series:\r\n\r\n```python\r\npatient = series.patients()\r\n```\r\n\r\nIn this case the function will return a single item.\r\n\r\n### Finding DICOM objects in the folder\r\n\r\nEach DICOM file has a number of attributes describing the properties of the object. Examples are PatientName, StudyDate, etc. A convenient list of attributes for specific objects can be found [here](https://dicom.innolitics.com/):\r\n\r\nEach known attribute is identified most easily by a keyword, which has a capitalised notation. Objects in the folder can be can also be listed by searching on any DICOM tag:\r\n\r\n```python\r\ninstances = database.instances(PatientName = 'John Dory')\r\n```\r\n\r\nThis will only return the instances for patient John Dory. This also works with multiple DICOM tags:\r\n\r\n```python\r\nseries = database.instances(\r\n    PatientName = 'John Dory', \r\n    ReferringPhysicianName = 'Dr. No', \r\n)\r\n```\r\n\r\nIn this case objects are only returned if both conditions are fullfilled. Any arbitrary number of conditions can be entered, and higher order objects can be found in the same way:\r\n\r\n```python\r\nstudies = database.studies(\r\n    PatientName = 'John Dory', \r\n    ReferringPhysicianName = 'Dr. No', \r\n)\r\n```\r\n\r\nAs an alternative to calling explicit object types, you can call `children()` and `parent` to move through the hierarchy:\r\n\r\n```python\r\nstudies = patient.children()\r\npatient = studies[0].parent\r\n```\r\n\r\nThe same convenience functions are available, such as searching by keywords:\r\n\r\n```python\r\nstudies = patient.children(ReferringPhysicianName = 'Dr. No')\r\n```\r\n\r\n### Moving and removing objects\r\n\r\nTo remove an object from the folder, call `remove()` on the object:\r\n\r\n```python\r\nstudy.remove()\r\ninstance.remove()\r\n```\r\n\r\nremove() can  be called on Patient, Study, Series or Instances.\r\n\r\nMoving an object to another parent can be done with `move_to()`. For instance to move a study from one patient to another:\r\n\r\n```python\r\nstudy = folder.patients()[0].studies()[0]\r\nnew_parent = folder.patients()[1]\r\nstudy.move_to(new_parent)\r\n```\r\n\r\n\r\n### Copying and creating objects\r\n\r\nAny object can be copied by calling `copy()`: \r\n\r\n```python\r\nstudy = folder.patients()[0].studies()[0]\r\nnew_study = study.copy()\r\n```\r\n\r\nThis will create a copy of the object in the same parent object, i.e. `study.copy()` in the example above has created a new study in patient 0. This can be used for instance to copy-paste a study from one patient to another: \r\n\r\n```python\r\nstudy = folder.patients()[0].studies()[0]\r\nnew_parent = folder.patients()[1]\r\nstudy.copy().move_to(new_parent)\r\n```\r\n\r\nThis is equivalent to using `copy_to()`:\r\n\r\n```python\r\nstudy.copy_to(new_parent)   \r\n```\r\n\r\nInstead of copying, and object can also be moved:\r\n\r\n```python\r\nstudy.move_to(new_parent)   \r\n```\r\n\r\nTo create a new object, call `new_child()` on the parent:\r\n\r\n```python\r\nseries = study.new_child()\r\n```\r\n\r\n*series* will now be a new (empty) series under *study*. This can also be written more explicitly for clarity:\r\n\r\n```python\r\nseries = study.new_series()\r\n```\r\n\r\nAnd equivalently for `new_patient`, `new_study` and `new_instance`. New sibling objects under the same parent can be created by:\r\n\r\n```python\r\nnew_series = series.new_sibling()\r\n```\r\n\r\nhere `new_series` will be a series under the same study as `series`. Objects higher up the hierarchy can be created using `new_pibling` (i.e. sibling of the parent):\r\n\r\n```python\r\nnew_study = series.new_pibling()\r\n```\r\n\r\nThis is shorthand for:\r\n\r\n```python\r\nnew_study = series.parent().new_sibling()\r\n```\r\n\r\nWhen new objects are created, they can be assigned properties up front, for instance:\r\n\r\n```python\r\nnew_study = series.new_pibling(\r\n    StudyDescription='Parametric maps',\r\n    StudyDate = '12.12.22')\r\n```\r\n\r\nThis will ensure that all data that appear under the new study will have these attributes. \r\n\r\n\r\n### Export and import\r\n\r\nTo import DICOM files from an external folder, call `import_dicom()` on a database with a list of files:\r\n\r\n```python\r\ndatabase.import_dicom(files)\r\n```\r\n\r\nTo export dicom datasets out of the folder to an external folder, call `export_as_dicom()` on any dicom object with the export path as argument:\r\n\r\n```python\r\nseries.export_as_dicom(path)\r\n```\r\n\r\nExporting in other formats is similar:\r\n\r\n```python\r\nstudy.export_as_csv(path)\r\nstudy.export_as_nifti(path)\r\nstudy.export_as_png(path)\r\n```\r\n\r\nThe pixel data from a series can also be exported in numpy format:\r\n\r\n```python\r\nseries.export_as_npy(path)\r\n```\r\n\r\nThis exports the array in dimensions `(n,x,y)` where `n` enumerates the images and `x,y` are the pixels. To export in different dimensions use the `sortby` keyword with one or more DICOM tags:\r\n\r\n```python\r\nseries.export_as_npy(path, sortby=['SliceLocation','AcquisitionTime'])\r\n```\r\n\r\nThis exports an array with dimensions `(z,t,n,x,y)` sorted by slice location and acquisition time.\r\n\r\n\r\n# Creating and modifying DICOM files\r\n\r\n### Reading DICOM attributes\r\n\r\nAn object's DICOM attributes can be read by using the DICOM keyword of the attribute:\r\n\r\n```python\r\nnr_of_rows = instance.Rows\r\n```\r\n\r\nAll attributes can also be accessed at series, study, patient or folder level. In this case they will return a list of unique values. For instance to return a list with all distinct series descriptions in a study:\r\n\r\n```python\r\ndesc = study.SeriesDescription\r\n```\r\n\r\nDICOM attributes can also be accessed using the list notation, using either the keyword as a string or a (group, element) pair:\r\n\r\n```python\r\ncolumns = instance['Columns']\r\ncolumns = instance[(0x0028, 0x0010)]\r\n```\r\n\r\nThe tags can also be accessed as a list, for instance:\r\n\r\n```python\r\ndimensions = ['Rows', (0x0028, 0x0010)]\r\ndimensions = instance[dimensions] \r\n```\r\n\r\nThis will return a list with two items. As shown in the example, the items in the list can be either KeyWord strings or (group, element) pairs. This also works on higher-level objects:\r\n\r\n```python\r\ndimensions = ['Rows', (0x0028, 0x0010)]\r\ndimensions = patient[dimensions] \r\n```\r\n\r\n\r\n### Editing attributes\r\n\r\n\r\nDICOM tags can be modified using the same notations:\r\n\r\n```python\r\ninstance.EchoTime = 23.0\r\n```\r\n\r\nor also:\r\n\r\n```python\r\ninstance['EchoTime'] = 23.0\r\n```\r\n\r\nor also:\r\n\r\n```python\r\ninstance[(0x0018, 0x0081)] = 23.0\r\n```\r\n\r\nMultiple tags can be inserted in the same line:\r\n\r\n```python\r\nshape = ['Rows', 'Columns']\r\ninstance[shape] = [128, 192]\r\n```\r\n\r\nWhen setting values in a series, study or patient, all the instances in the object will be modified. For instance, to set all the Rows in all instances of a series to 128:\r\n\r\n```python\r\nseries.Rows = 128\r\n```\r\n\r\n### Custom attributes\r\n\r\nApart from the predefined public and private DICOM keywords, `dbdicom` also provides a number of custom attributes for more convenient access to higher level properties. In order to distinguish these from existing DICOM attributes which are defined in `CamelCase`, the custom attributes follow the `lower_case` notation. \r\n\r\nFor instance, to set one of the standard [matplotlib color maps](https://matplotlib.org/stable/tutorials/colors/colormaps.html), you can do:\r\n\r\n```python\r\nimage.colormap = 'YlGnBu'\r\nseries.colormap = 'Oranges'\r\n```\r\n\r\nand so on.. The colormaps can be retrieved the same way:\r\n\r\n```python\r\ncm_image = image.colormap\r\ncm_series = series.colormap\r\n```\r\n\r\nAs for standard DICOM attributes this returns a list if unique values for the series. \r\n\r\nCustom attributes can easily be added to any DICOM dataset type and the number of available attributes is set to grow as the need arises.\r\n\r\n\r\n### Read and write\r\n\r\nBy default all changes to a database are made on disk. For instance if a DICOM attribute is changed\r\n\r\n```python\r\ninstance.Rows = 128\r\n```\r\n\r\nThe data are read from disk, the change is made, the data are written to disk again and memory is cleared. Equally, if a series is copied to another study, all its instances will be read, any necessary changes made, and then written to disk and cleared from memory. \r\n\r\nFor many applications reading and writing from disk is too slow. For faster access at the cost of some memory usage, the data can be read into memory before performing any manipulations:\r\n\r\n```python\r\nseries.read()\r\n```\r\n\r\nAfter this all changes are made in memory. To clear the data from memory and continue working from disk, use `clear()`:\r\n\r\n\r\n```python\r\nseries.clear()\r\n```\r\n\r\nThese operations can be called on the entire database, on patients, studies, series or instances. \r\n\r\n\r\n### Save and restore\r\n\r\nAll changes made in a DICOM folder are reversible until they are saved.\r\nTo save all changes, use `save()`:\r\n\r\n```python\r\ndatabase.save()\r\n```\r\n\r\nThis will permanently burn all changes that are made on disk. In order to reverse any changes made, use `restore()` to revert back to the last saved state:\r\n\r\n```python\r\ndatabase.restore()\r\n```\r\n\r\nThis will roll back all changes on disk to the last changed state. `save()` and `restore()` can also be called at the level of individual objects:\r\n\r\n```python\r\nseries.restore()\r\n```\r\n\r\nwill reverse all changes made since the last save, but only for this series. Equivalently:\r\n\r\n```python\r\nseries.save()\r\n```\r\n\r\nwill save all changes made in the series (but not other objects in the database) permanently. \r\n\r\n\r\n### Working with series\r\n\r\nA DICOM series typically represents images that are acquired together, such as 3D volumes or time series. Some dedicated functionality exists for series that is not relevant for objects elsewhere in the hierarchy. \r\n\r\nTo extract the images in a series as a numpy array, use `array()`:\r\n\r\n```python\r\narray, _ = series.array()\r\n```\r\n\r\nThis will return an array with dimensions `(n,x,y)` where `n` enumerates the images in the series. The array can also be returned with other dimensions:\r\n\r\n```python\r\narray, _ = series.array(['SliceLocation', 'FlipAngle'])\r\n```\r\n\r\nThis returns an array with dimensions `(z,t,n,x,y)` where `z` corresponds to slice locations and `t` to flip angles. The 3d dimension `n` enumerates images at the same slice location and flip angle. Any number of dimensions can be added in this way. If an application requires the pixels to be listed first, use the `pixels_first` keyword:\r\n\r\n```python\r\narray, _ = series.array(['SliceLocation', 'FlipAngle'], pixels_first=True)\r\n```\r\n\r\nIn this case the array has dimensions `(x,y,z,t,n)`. Replacing the images of a series with a given numpy array works the same way:\r\n\r\n```python\r\nseries.array(array)\r\n```\r\n\r\nThe function `array()` also returns the header information for each slice in a second return value:\r\n\r\n```python\r\narray, header = series.array(['SliceLocation', 'FlipAngle'])\r\n```\r\n\r\nThe header is a numpy array of instances with the same dimensions as the array - except for the pixel coordinates: in this case `(z,t,n)`. This can be used to access any additional data in a transparent way. For instance, to list the flip angles of the first slice `z=0, n=0`:\r\n\r\n```python\r\nFA = [hdr.FlipAngle for hdr in header[0,:,0]]\r\n```\r\n\r\nThe header array is also useful when a calculation is performed on the array and the results need to be saved in the DICOM database again. In this case `header` can be used to carry over the metadata. \r\n\r\nAs an example, let's calculate a maximum intensity projection (MIP) of a 4D time series and write the result out in the same series:\r\n\r\n```python\r\narray, header = series.array(['SliceLocation', 'AcquisitionTime'])\r\nmip = np.amax(array, axis=0)\r\nseries.set_array(mip, header[0,:,:])\r\n```\r\n\r\nIn this case the header information of the MIP is taken from the first image of the time series. Provding header information is not required - if the header argument is not specified then a template header is used.\r\n\r\nAnother useful tool on series level is extracting a subseries. Let's say we have an MRI series with phase and magnitude data mixed, and we want to split it up into separate series:\r\n\r\n\r\n```python\r\nphase = series.subseries(image_type='PHASE')\r\nmagn = series.subseries(image_type='MAGNITUDE')\r\n```\r\n\r\nThis will create two new series in the same study. The `image_type` keyword is defined in dbdicom for MR images to simplify access to phase or magnitude data, but the method also works for any standard DICOM keyword, or combinations thereof. For instance, to extract a subseries of all images with a flip angle of 20 and a TR of 5:\r\n\r\n```python\r\nsub = series.subseries(FlipAngle=20, RepetitionTime=5)\r\n```\r\n\r\nAnother useful feature at series level is to overlay one series on another. \r\n\r\n```python\r\noverlay = series.map_to(target)\r\n```\r\n\r\nIf series is a binary mask (or can be interpreted as one), a similar function can be used to overlay the mask on another series:\r\n\r\n```python\r\noverlay = series.map_mask_to(target)\r\n```\r\n\r\n\r\n### Creating DICOM data from scratch\r\n\r\nTo create a DICOM series from a numpy array, use `dbdicom.series()`:\r\n\r\n```python\r\nimport numpy as np\r\nimport dbdicom as db\r\n\r\narray = np.random.normal(size=(10, 128, 192))\r\nseries = db.series(array)\r\n```\r\n\r\nAfter this you can save it to a folder in DICOM, or set some header elements before saving:\r\n\r\n```python\r\nseries.PatientName = 'Random noise'\r\nseries.StudyDate = '19112022'\r\nseries.AcquisitionTime = '120000'\r\nseries.save(path)\r\n```\r\n\r\nYou can build an entire database explicitly as well. For instance, the following code builds a database with two patients (James Bond and Scarface) who each underwent and MRI and an XRay study:\r\n\r\n```python\r\ndatabase = db.database()\r\n\r\njames_bond = database.new_patient(PatientName='James Bond')\r\njames_bond_mri = james_bond.new_study(StudyDescription='MRI')\r\njames_bond_mri_localizer = james_bond_mri.new_series(SeriesDescription='Localizer')\r\njames_bond_mri_T2w = james_bond_mri.new_series(SeriesDescription='T2w')\r\njames_bond_xray = james_bond.new_study(StudyDescription='Xray')\r\njames_bond_xray_chest = james_bond_xray.new_series(SeriesDescription='Chest')\r\njames_bond_xray_head = james_bond_xray.new_series(SeriesDescription='Head')\r\n\r\nscarface = database.new_patient(PatientName='Scarface')\r\nscarface_mri = scarface.new_study(StudyDescription='MRI')\r\nscarface_mri_localizer = scarface_mri.new_series(SeriesDescription='Localizer')\r\nscarface_mri_T2w = scarface_mri.new_series(SeriesDescription='T2w')\r\nscarface_xray = scarface.new_study(StudyDescription='Xray')\r\nscarface_xray_chest = scarface_xray.new_series(SeriesDescription='Chest')\r\nscarface_xray_head = scarface_xray.new_series(SeriesDescription='Head')\r\n```\r\n\r\n### Work in progress: a numpy-like interface\r\n\r\nWe are currently building a `numpy`-type interface for creating new DICOM objects. For instance to create a new series with given dimensions in a study you can do:\r\n\r\n```python\r\nimg = study.zeros((10, 128, 192), dtype='mri')\r\n```\r\n\r\nThis will create a DICOM series of type 'MRImage' (shorthand 'mri') with 10 slices of 128 columns and 192 rows each. This can also be done from scratch:\r\n\r\n```python\r\nimport dbdicom as db\r\n\r\nseries = db.series((10, 128, 192))\r\n```\r\n\r\nCurrently, writing in data types other than 'MRImage' is not supported, so the data type argument is not necessary.\r\n\r\n# User interactions\r\n\r\n\r\n`dbdicom` can be used in standalone scripts or interactively. To streamline integration in a GUI, communication with the user is performed via two dedicated attributes `status` and `dialog`. dialog and status attributes are available to any DICOM object. The status attribute is used to send messages to the user, or update on progress of a calculation:\r\n\r\n```python\r\nseries.message(\"Starting calculation...\")\r\n```\r\n\r\nWhen operating in command line mode this will print the message to the terminal. If `dbdicom` is used in a compatible GUI, this will print the same message to the status bar. Equivalently, the user can be updated on the progress of a calculation via:\r\n\r\n```python\r\nfor i in range(length):\r\n    series.progress(i, length, 'Calculating..)\r\n```\r\n\r\nThis will print the message with a percentage progress at each iteration. When used in a GUI, this will update the progress bar of the GUI. \r\n\r\nBy default a dbdicom record will always update the user on progress of any calculation. When this beaviour is undersired, the record can be muted as in via `series.mute()`. After this the user will no longer recieve updates. In order to turn messages back on, unmute the record via `series.unmute()`.\r\n\r\nDialogs can be used to send messages to the user or prompt for input. In some cases a dialog may halt the operation of te program until the user has performed the appropriate action, such as hitting enter or entering a value. In command line operator or scripts the user will be prompted for input at the terminal. When using in a GUI, the user will be prompted via a pop-up:\r\n\r\n```python\r\nseries.dialog.question(\"Do you wish to proceed?\", cancel=True)\r\n```\r\n\r\nWhen used in a script, this will ask the user to enter either \"y\" (for yes), \"n\" (for no) or \"c\" (for cancel) and the program execution will depend on the answer. When the scame script is deployed in a GUI, the question will be asked via a pop-up window and a button push to answer. A number of different dialogs are available via the dialog attribute (see reference guide). \r\n\r\n\r\n# About ***dbdicom***\r\n\r\n## Why DICOM?\r\n\r\n``*[...] after 2 hours of reading, I still cannot figure out how to determine the 3D orientation of a multi-slice (Supplement 49) DICOM file. I'm sure it is in there somewhere, but if this minor factoid can't be deciphered in 2 hours, then the format and its documentation is too intricate.*''. Robert W. Cox, PhD, Director, Scientific and Statistical Computing Core, National Institute of Mental Health [link](https://afni.nimh.nih.gov/pub/dist/doc/nifti/nifti_revised.html).\r\n\r\nThis echoes a common frustration for anyone who has ever had a closer to look at DICOM. DICOM seems to make simple things very difficult, and the language often feels outdated to modern data scientists. \r\n\r\nBut there are good reasons for that. DICOM not only retains imaging data, but also all other relevant data about the subject and context in which the data are taken. Detailing provenance of the data and linkage to other data is critical in radiology, but the nature of these meta data is very broad, complex and constantly changing. Storing them in some consistent and standardised way that is future proof therefore requires a systematic approach and some necessary level of abstraction. \r\n\r\nDICOM does this well and has for that reason grown to be the single accepted standard in medical imaging. This also explains the outdated look and feel. DICOM standardises not only the format, but also the language of medical imaging. And successful standards, by definition, don't change.\r\n\r\n## Why ***dbdicom***?\r\n\r\nReading and especially writing DICOM data remains a challenging enterprise for the practicing data scientist. A typical image processing pipeline might use the excellent python package `pydicom` for extracting image arrays and any required header information from DICOM data, but will then write out the results in more manageable format such as nifty. In the process the majority of header information will have to be discarded, including detailed imaging parameters and linkage between original and derived images, follow-up studies, etc.\r\n\r\nThe practice of converting outputs in a lossy image format may be sufficient in the early stages of method development, but forms a major barrier to research or deployment of these processing methods in a real-world context. This requires results in DICOM format so they can be linked to other data of the same patients, integrated in the radiological workflow, and reviewed and edited through integrated radiological viewers. Integration of datasets ensures that all derived data are properly traceable to the source, and can be compared between subjects and within a subject over time. It also allows to test for instance whether a new (expensive) imaging method provides an *additive* benefit over and above (cheap) data from medical history, clinical exams or blood tests. \r\n\r\nDICOM integration of processing outputs is typically performed by DICOM specialists in the private sector, for new products that have proven clinical utility. However, this requires a major separate investment, delays the point of real-world validation until after commercialisation and massively increases the risk of costly late-stage failures. \r\n\r\n\r\n## What is ***dbdicom***?\r\n\r\n`dbdicom` is a programming interface that makes reading and writing DICOM data intuitive for the practicing medical imaging scientist working in Python. DICOM-native language and terminology is hidden and replaced by concepts that are more natural for those developing in Python. The documentation therefore does not reference confusing DICOM concepts such as composite information object definitions, application entities, service-object pairs, unique identifiers, etc.\r\n\r\n`dbdicom` wraps around DICOM using a language and code structure that is native to the 2020's. This should allow DICOM integration from the very beginning of development of new image processing methods, which means they can be deployed in clinical workflows from the very beginning. It also means that any result you generate can easily be integrated in open access DICOM databases and can be visualised along with any other images of the same subject with a standard DICOM viewer such as [OHIF](https://ohif.org/).\r\n\r\n`dbdicom` is developed by through the [UKRIN-MAPS](https://www.nottingham.ac.uk/research/groups/spmic/research/uk-renal-imaging-network/ukrin-maps.aspx) project of the UK renal imaging network, which aims to provide clinical translation of quantitative renal MRI on a multi-vendor platform. UKRIN-MAPS is funded by the UK's [Medical Research Council](https://gtr.ukri.org/projects?ref=MR%2FR02264X%2F1).\r\n\r\n## Acknowledgements\r\n\r\n`dbdicom` relies heavily on `pydicom` for read/write of individual DICOM files, with some additional features provided by `nibabel` and `dcm4che`. Basic array manipulation is provided by `numpy`, and sorting and tabulating of data by `pandas`. Export to other formats is provided by `matplotlib`.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "python,medical imaging,DICOM",
    "license": "Apache License Version 2.0, January 2004 http://www.apache.org/licenses/  TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION  1. Definitions.  \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.  \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.  \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.  \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.  \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.  \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.  \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).  \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.  \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"  \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.  2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.  3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.  4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:  (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and  (b) You must cause any modified files to carry prominent notices stating that You changed the files; and  (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and  (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.  You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.  5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.  6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.  7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.  8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.  9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.  END OF TERMS AND CONDITIONS  APPENDIX: How to apply the Apache License to your work.  To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.  Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dbdicom",
    "package_url": "https://pypi.org/project/dbdicom/",
    "platform": null,
    "project_url": "https://pypi.org/project/dbdicom/",
    "project_urls": {
      "Homepage": "https://github.com/QIB-Sheffield/dbdicom"
    },
    "release_url": "https://pypi.org/project/dbdicom/0.1.8/",
    "requires_dist": [
      "matplotlib",
      "nibabel",
      "numpy",
      "scipy",
      "pandas",
      "pydicom",
      "python-gdcm",
      "pylibjpeg-libjpeg",
      "importlib-resources",
      "sphinx ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'",
      "myst-parser ; extra == 'docs'",
      "sphinx-copybutton ; extra == 'docs'",
      "sphinx-remove-toctrees ; extra == 'docs'"
    ],
    "requires_python": ">=3.6",
    "summary": "Reading and writing DICOM databases",
    "version": "0.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16367338,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "262f7556b694c0e9bb9d03163024feee2d4d5b73cc31e69ed68e05b3f7ce5305",
          "md5": "52a78ab4773eacef0906c3d47f1ef35f",
          "sha256": "639b4818c62ea5e33ea88c0c2213b173e2aae1b849112ee38834434ac3d09a1d"
        },
        "downloads": -1,
        "filename": "dbdicom-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "52a78ab4773eacef0906c3d47f1ef35f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 59408,
        "upload_time": "2022-07-03T21:12:19",
        "upload_time_iso_8601": "2022-07-03T21:12:19.782465Z",
        "url": "https://files.pythonhosted.org/packages/26/2f/7556b694c0e9bb9d03163024feee2d4d5b73cc31e69ed68e05b3f7ce5305/dbdicom-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1227b73caa6dd9aad46ad9f83c72c1682b4c6a30407d34b1bd84e4b142a2c4bb",
          "md5": "59ee9f4d953709f9df9f05e379ba217f",
          "sha256": "da1598ce77d47df79b3e3e49c311f0df437d2da6df5c86641873089f425db398"
        },
        "downloads": -1,
        "filename": "dbdicom-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "59ee9f4d953709f9df9f05e379ba217f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 62173,
        "upload_time": "2022-07-03T21:12:22",
        "upload_time_iso_8601": "2022-07-03T21:12:22.931915Z",
        "url": "https://files.pythonhosted.org/packages/12/27/b73caa6dd9aad46ad9f83c72c1682b4c6a30407d34b1bd84e4b142a2c4bb/dbdicom-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5332287a129fae30e0aad340cab749fe8184dae9ba5d0b5dc4df6c96a677e519",
          "md5": "e438201eb20d706fb70e15b207e56f70",
          "sha256": "2d0e74c0f64d2155f9ff2a3184abb13bb36088c713d8a966dbfe44db681a72c5"
        },
        "downloads": -1,
        "filename": "dbdicom-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e438201eb20d706fb70e15b207e56f70",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 45873,
        "upload_time": "2022-04-08T09:39:29",
        "upload_time_iso_8601": "2022-04-08T09:39:29.393491Z",
        "url": "https://files.pythonhosted.org/packages/53/32/287a129fae30e0aad340cab749fe8184dae9ba5d0b5dc4df6c96a677e519/dbdicom-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "577577e7a75e16e312e56ca1f163e6ea9048cdce9c9423f1b9f04db027ecf32a",
          "md5": "4b2dfd70bdfa6caaae104be01c381c87",
          "sha256": "ae49d1aa9dd8b8784d32b53b77520dda45a8a02134f3c03df0c5f062531f6c1c"
        },
        "downloads": -1,
        "filename": "dbdicom-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4b2dfd70bdfa6caaae104be01c381c87",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 49916,
        "upload_time": "2022-04-08T09:39:31",
        "upload_time_iso_8601": "2022-04-08T09:39:31.132622Z",
        "url": "https://files.pythonhosted.org/packages/57/75/77e7a75e16e312e56ca1f163e6ea9048cdce9c9423f1b9f04db027ecf32a/dbdicom-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14b22d08ea4ab72a24bc9983adff30dbf8491d37c96a3c9fdf4e2ef0ca06240e",
          "md5": "233ab3dffdfad840d5cfd6810e3dd2ef",
          "sha256": "3221fd23257cc78baf1dac261f318cba446723b58d3e7ab3da27eb42e6b0addb"
        },
        "downloads": -1,
        "filename": "dbdicom-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "233ab3dffdfad840d5cfd6810e3dd2ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 45895,
        "upload_time": "2022-04-13T23:57:30",
        "upload_time_iso_8601": "2022-04-13T23:57:30.776671Z",
        "url": "https://files.pythonhosted.org/packages/14/b2/2d08ea4ab72a24bc9983adff30dbf8491d37c96a3c9fdf4e2ef0ca06240e/dbdicom-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d67736adde4e4a9b0863bdc31949c4aa1d8cd8853ff3f14b9dfded2eb0bf11f9",
          "md5": "1452781768709b8ba99a25fbe612d63e",
          "sha256": "a41bf65f70b02d36ec420a5504ac0540849986feb90f50edc32732fb59c495e9"
        },
        "downloads": -1,
        "filename": "dbdicom-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "1452781768709b8ba99a25fbe612d63e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 49965,
        "upload_time": "2022-04-13T23:57:32",
        "upload_time_iso_8601": "2022-04-13T23:57:32.644769Z",
        "url": "https://files.pythonhosted.org/packages/d6/77/36adde4e4a9b0863bdc31949c4aa1d8cd8853ff3f14b9dfded2eb0bf11f9/dbdicom-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63d1254ef00d3710e80ee0bc2fd486066a98c972c60cdffb8e334328dd630d07",
          "md5": "7cd6a42c6f4b1308e9cbc94778db8064",
          "sha256": "0406131e3bc90b0e61e46592fd6440ee19fad86bba1057ea5c9e101474095e70"
        },
        "downloads": -1,
        "filename": "dbdicom-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7cd6a42c6f4b1308e9cbc94778db8064",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 45929,
        "upload_time": "2022-04-20T10:25:11",
        "upload_time_iso_8601": "2022-04-20T10:25:11.066900Z",
        "url": "https://files.pythonhosted.org/packages/63/d1/254ef00d3710e80ee0bc2fd486066a98c972c60cdffb8e334328dd630d07/dbdicom-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0f63e8a323f0ec5f17e9a1ab07e94adbeefed4b23c8b38f52a634d709f02a6e",
          "md5": "091fe37ba94df616915f7686e78f7036",
          "sha256": "03570e91df5b9d2a0bd01c8c6cd55880299160c869b94e0867f49362cb969af1"
        },
        "downloads": -1,
        "filename": "dbdicom-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "091fe37ba94df616915f7686e78f7036",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 49999,
        "upload_time": "2022-04-20T10:25:12",
        "upload_time_iso_8601": "2022-04-20T10:25:12.716608Z",
        "url": "https://files.pythonhosted.org/packages/d0/f6/3e8a323f0ec5f17e9a1ab07e94adbeefed4b23c8b38f52a634d709f02a6e/dbdicom-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18eafe81a9ba5c6c4906abaf970fe225f5b90b3a534c696b43c83f16cebfdcac",
          "md5": "bfb1748f9a49b860f8b4f3e1e9c4973f",
          "sha256": "04f793fd39c11b7b5bf334af2199e05513cae6454fc1754751b152858759f0a9"
        },
        "downloads": -1,
        "filename": "dbdicom-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bfb1748f9a49b860f8b4f3e1e9c4973f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 59667,
        "upload_time": "2022-06-29T22:16:48",
        "upload_time_iso_8601": "2022-06-29T22:16:48.167434Z",
        "url": "https://files.pythonhosted.org/packages/18/ea/fe81a9ba5c6c4906abaf970fe225f5b90b3a534c696b43c83f16cebfdcac/dbdicom-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca9c8a35e5d2c4bfe2ef5ed87954eee8b613ae3a212727c39ea68a9ff979cf04",
          "md5": "667968666c2336ccc205f0218a1fcf85",
          "sha256": "824b0b93a579254d5b9e747ad6cd4200ebe14ae25a7f871d41aad07966990eae"
        },
        "downloads": -1,
        "filename": "dbdicom-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "667968666c2336ccc205f0218a1fcf85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 62102,
        "upload_time": "2022-06-29T22:16:50",
        "upload_time_iso_8601": "2022-06-29T22:16:50.250227Z",
        "url": "https://files.pythonhosted.org/packages/ca/9c/8a35e5d2c4bfe2ef5ed87954eee8b613ae3a212727c39ea68a9ff979cf04/dbdicom-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae82d02cc81b405cd1f82ce2412239fb019f80d4c7f5923f39cd13e5a7e6a96c",
          "md5": "8b2061829ce1aabd970da572a172ef3a",
          "sha256": "e80cc569d4941119e5c0a6beeb3495d47ae7adaf24667a0acb7b54e73476270a"
        },
        "downloads": -1,
        "filename": "dbdicom-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b2061829ce1aabd970da572a172ef3a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 59395,
        "upload_time": "2022-06-30T20:41:34",
        "upload_time_iso_8601": "2022-06-30T20:41:34.431004Z",
        "url": "https://files.pythonhosted.org/packages/ae/82/d02cc81b405cd1f82ce2412239fb019f80d4c7f5923f39cd13e5a7e6a96c/dbdicom-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "142006ce0d9157eacac3bb0a98322bb1236436dddec3c40fbdb8f659fe197bde",
          "md5": "6b3d5fcd1e8540e26328b579ff5764e3",
          "sha256": "0a5d26ab1b83a145808248bf1abb9e8f03594977caf1817f27f789f614402c61"
        },
        "downloads": -1,
        "filename": "dbdicom-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "6b3d5fcd1e8540e26328b579ff5764e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 60684,
        "upload_time": "2022-06-30T20:41:36",
        "upload_time_iso_8601": "2022-06-30T20:41:36.473267Z",
        "url": "https://files.pythonhosted.org/packages/14/20/06ce0d9157eacac3bb0a98322bb1236436dddec3c40fbdb8f659fe197bde/dbdicom-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e43866e2ac3269136d6505897b226cfd8c3085b9afab2777435d73c6338d960",
          "md5": "f40d30d23b5ece96ae7f6e07e062ed93",
          "sha256": "27a4730097f2a7df8cb4767b59ce6bf64b8d7d4dfdde1c112c791aa5637c1308"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f40d30d23b5ece96ae7f6e07e062ed93",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 66340,
        "upload_time": "2022-09-28T13:28:16",
        "upload_time_iso_8601": "2022-09-28T13:28:16.059257Z",
        "url": "https://files.pythonhosted.org/packages/3e/43/866e2ac3269136d6505897b226cfd8c3085b9afab2777435d73c6338d960/dbdicom-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0898521bccca08012fdd89df7b9b17a525ad9c84495fb08afb808bc89ea36bfa",
          "md5": "4948f25d04a3d389ee48ab9884f69723",
          "sha256": "74b3c743170669837c577dceddacbca35b07a0fc1a8c7fec200ae595432d9774"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4948f25d04a3d389ee48ab9884f69723",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 65712,
        "upload_time": "2022-09-28T13:28:18",
        "upload_time_iso_8601": "2022-09-28T13:28:18.018942Z",
        "url": "https://files.pythonhosted.org/packages/08/98/521bccca08012fdd89df7b9b17a525ad9c84495fb08afb808bc89ea36bfa/dbdicom-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8761995f03c4e3be55d8e2ed27715dc270dc3374a382e5acde1f49b8ca5943b",
          "md5": "6d78920ae5c443fa5b4b8918382a24e9",
          "sha256": "8afd6f14e083b00e78ac6fd96db2b8ce49ed92a723614ab867a613660533715c"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d78920ae5c443fa5b4b8918382a24e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 66342,
        "upload_time": "2022-09-29T14:53:04",
        "upload_time_iso_8601": "2022-09-29T14:53:04.693714Z",
        "url": "https://files.pythonhosted.org/packages/c8/76/1995f03c4e3be55d8e2ed27715dc270dc3374a382e5acde1f49b8ca5943b/dbdicom-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c8c7753c0d49d53a20cf633f4fb5f6dcf510103de087c36b8fbeffcd5380b68",
          "md5": "6556691b01ec4ae8125079c6060055b4",
          "sha256": "51ac344209d484196400bd39857e7f6459b79382eeb5c95e02ceccd2ed872140"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6556691b01ec4ae8125079c6060055b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 65716,
        "upload_time": "2022-09-29T14:53:07",
        "upload_time_iso_8601": "2022-09-29T14:53:07.303538Z",
        "url": "https://files.pythonhosted.org/packages/1c/8c/7753c0d49d53a20cf633f4fb5f6dcf510103de087c36b8fbeffcd5380b68/dbdicom-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "553bed623bc910b2a7ef47d27bdb91fe0a110bcd98f2b2c2c82ee7c7b55f160a",
          "md5": "493f32d85f068ac91689e0147ae67ba4",
          "sha256": "73960d892cb3725aa1c4456b05cf63dc61dbedf853c3d0342a614ece1e67dd25"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "493f32d85f068ac91689e0147ae67ba4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 72840,
        "upload_time": "2022-11-14T22:56:08",
        "upload_time_iso_8601": "2022-11-14T22:56:08.470318Z",
        "url": "https://files.pythonhosted.org/packages/55/3b/ed623bc910b2a7ef47d27bdb91fe0a110bcd98f2b2c2c82ee7c7b55f160a/dbdicom-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "865ac9abbf39bf2a45491d3cddf319cb642bffc215283f3857f4f22a8b8d0cb0",
          "md5": "93da40e8c18d39aad60012a35461e3c2",
          "sha256": "335f46d3f00b0f4759cae78df2f90a6230cff453f1bb207dfdaf41280f6843c3"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "93da40e8c18d39aad60012a35461e3c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 71047,
        "upload_time": "2022-11-14T22:56:12",
        "upload_time_iso_8601": "2022-11-14T22:56:12.544310Z",
        "url": "https://files.pythonhosted.org/packages/86/5a/c9abbf39bf2a45491d3cddf319cb642bffc215283f3857f4f22a8b8d0cb0/dbdicom-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "475939f44751e3840812bb173333b7956beb5692397b2cbd1e5efec5fac8c60e",
          "md5": "dfa042c9fe01eb62bcc01ac95a5ce0bf",
          "sha256": "927b50af1b602a29fceed1a9d830e0a8c0bc217e9fb0efbe0db08218de26ef8c"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfa042c9fe01eb62bcc01ac95a5ce0bf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 72923,
        "upload_time": "2022-11-14T23:08:37",
        "upload_time_iso_8601": "2022-11-14T23:08:37.842220Z",
        "url": "https://files.pythonhosted.org/packages/47/59/39f44751e3840812bb173333b7956beb5692397b2cbd1e5efec5fac8c60e/dbdicom-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef8f2fa5448612398efb623c65b367a95392e5f99e0250bddd5454b558fe9ade",
          "md5": "d81b5c77604914e625b64d52b954d74a",
          "sha256": "e4af592e1c29994ed56b637dab495c29047099a34b070c3467b8775e81c36513"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d81b5c77604914e625b64d52b954d74a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 71251,
        "upload_time": "2022-11-14T23:08:43",
        "upload_time_iso_8601": "2022-11-14T23:08:43.140733Z",
        "url": "https://files.pythonhosted.org/packages/ef/8f/2fa5448612398efb623c65b367a95392e5f99e0250bddd5454b558fe9ade/dbdicom-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "699feb3715afdb59004be6133db7164904b0d16eb48c11bbd0203fe38f07bf34",
          "md5": "07cd1e88d768179bca8d39fb12d7c506",
          "sha256": "6ecbf921065e77f4fdf3334cd6e8c7f1a4e8bfb5c8f286d0c628de64d645ce64"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "07cd1e88d768179bca8d39fb12d7c506",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 73226,
        "upload_time": "2022-11-28T15:03:31",
        "upload_time_iso_8601": "2022-11-28T15:03:31.275447Z",
        "url": "https://files.pythonhosted.org/packages/69/9f/eb3715afdb59004be6133db7164904b0d16eb48c11bbd0203fe38f07bf34/dbdicom-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8745834c91e1596cf9947ed18331e60f1e94ffc32395a21ed4cc8aa6d44b8279",
          "md5": "66ec275d353ccd650a17d148e09cdcb0",
          "sha256": "ebf05810cb16527b770f6acfe0283f21be23ab49c1ed58d143ab049806662b98"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "66ec275d353ccd650a17d148e09cdcb0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 71556,
        "upload_time": "2022-11-28T15:03:39",
        "upload_time_iso_8601": "2022-11-28T15:03:39.883861Z",
        "url": "https://files.pythonhosted.org/packages/87/45/834c91e1596cf9947ed18331e60f1e94ffc32395a21ed4cc8aa6d44b8279/dbdicom-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d210e9c5cc7343dbbe4e83c430ec742c090790fb1383a520b1ee183a59cf72f8",
          "md5": "92b7c442567f3c24d838275967787924",
          "sha256": "2cafdc2d3acf2ac0d6e4ea2dbf3b25844a8db2745f835f4fcdf4157ccb9e5270"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "92b7c442567f3c24d838275967787924",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29820122,
        "upload_time": "2022-12-13T23:03:41",
        "upload_time_iso_8601": "2022-12-13T23:03:41.995170Z",
        "url": "https://files.pythonhosted.org/packages/d2/10/e9c5cc7343dbbe4e83c430ec742c090790fb1383a520b1ee183a59cf72f8/dbdicom-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ea8bd17e932f5e017ff5df4d467670846bd3fb1aca43c8def9c73b9acaebcf2",
          "md5": "b970cf10fa8679bcb2998d942887251e",
          "sha256": "c7852b1f4127a5f7ccc8e11a3fb80ac7157c5b80e4f9f971377d49d49c50502d"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b970cf10fa8679bcb2998d942887251e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29700486,
        "upload_time": "2022-12-13T23:03:49",
        "upload_time_iso_8601": "2022-12-13T23:03:49.132428Z",
        "url": "https://files.pythonhosted.org/packages/4e/a8/bd17e932f5e017ff5df4d467670846bd3fb1aca43c8def9c73b9acaebcf2/dbdicom-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f54ba539ff851303ba2d895b37487d11a24909c1646df64ecca7664d020b643",
          "md5": "7d73d287073096096178a57106c24e6c",
          "sha256": "798e6caef078c30124e6ebfe6e7b9700c832b0deaef7d4dbd09a51cb8849dfb7"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d73d287073096096178a57106c24e6c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29820633,
        "upload_time": "2022-12-14T11:46:10",
        "upload_time_iso_8601": "2022-12-14T11:46:10.049300Z",
        "url": "https://files.pythonhosted.org/packages/6f/54/ba539ff851303ba2d895b37487d11a24909c1646df64ecca7664d020b643/dbdicom-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43407f991f2ea767766e791ca8ae935945aec01e5c86d9f4857a950401409bd8",
          "md5": "65eb20b51f0727476485057c8d630e70",
          "sha256": "d7786d4dd8d2752dffc718a1a4be2cfd4bd1e6132f5ebf51b6863d656c104b16"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "65eb20b51f0727476485057c8d630e70",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29700477,
        "upload_time": "2022-12-14T11:46:24",
        "upload_time_iso_8601": "2022-12-14T11:46:24.490933Z",
        "url": "https://files.pythonhosted.org/packages/43/40/7f991f2ea767766e791ca8ae935945aec01e5c86d9f4857a950401409bd8/dbdicom-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "804ed7718a2f2e661b1549a25c0c9307142801f36a4b7b5f45e97fb46e1e30f1",
          "md5": "7803cecbdbc1648ac39aa51cf4b61b11",
          "sha256": "52b1f41461fa106a98b593aacf72f33548f44e370177a09f09e6bf53255be5d5"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7803cecbdbc1648ac39aa51cf4b61b11",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29820634,
        "upload_time": "2022-12-14T12:04:47",
        "upload_time_iso_8601": "2022-12-14T12:04:47.534842Z",
        "url": "https://files.pythonhosted.org/packages/80/4e/d7718a2f2e661b1549a25c0c9307142801f36a4b7b5f45e97fb46e1e30f1/dbdicom-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46b75712839a57ea95dffe9ae881cc96aaa8834b96a47cff9ace35ec18b46bd3",
          "md5": "ba33157f994943db7002daf21e46b516",
          "sha256": "3bf43fd50f915f311531e91759eca7bcb779c79d99e752a0b391eb6fb9a0b821"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "ba33157f994943db7002daf21e46b516",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29700482,
        "upload_time": "2022-12-14T12:05:06",
        "upload_time_iso_8601": "2022-12-14T12:05:06.773575Z",
        "url": "https://files.pythonhosted.org/packages/46/b7/5712839a57ea95dffe9ae881cc96aaa8834b96a47cff9ace35ec18b46bd3/dbdicom-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51be9a26d03958618256ba14accc1530c0d5854fac8ff743d63bc2a6d7adffd0",
          "md5": "d94aad662ca90408dedb35bb51f4e217",
          "sha256": "a07c408db9a7d8416014d128674fc1a255f7a47285c9c5cbc883d2aa8e47940d"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d94aad662ca90408dedb35bb51f4e217",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 29825993,
        "upload_time": "2023-01-10T00:06:11",
        "upload_time_iso_8601": "2023-01-10T00:06:11.919541Z",
        "url": "https://files.pythonhosted.org/packages/51/be/9a26d03958618256ba14accc1530c0d5854fac8ff743d63bc2a6d7adffd0/dbdicom-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26fee6de66accfb18f2c6a7d99e63d8933578c738d57a37df3399c380348d39b",
          "md5": "f0e55fa4b02a831d684e32e31dcde413",
          "sha256": "2b99f387b166d4e0552c0665e0f8ec0b654af8a3108f42a786e81162bab18f3b"
        },
        "downloads": -1,
        "filename": "dbdicom-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "f0e55fa4b02a831d684e32e31dcde413",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29705442,
        "upload_time": "2023-01-10T00:06:49",
        "upload_time_iso_8601": "2023-01-10T00:06:49.254406Z",
        "url": "https://files.pythonhosted.org/packages/26/fe/e6de66accfb18f2c6a7d99e63d8933578c738d57a37df3399c380348d39b/dbdicom-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51be9a26d03958618256ba14accc1530c0d5854fac8ff743d63bc2a6d7adffd0",
        "md5": "d94aad662ca90408dedb35bb51f4e217",
        "sha256": "a07c408db9a7d8416014d128674fc1a255f7a47285c9c5cbc883d2aa8e47940d"
      },
      "downloads": -1,
      "filename": "dbdicom-0.1.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d94aad662ca90408dedb35bb51f4e217",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 29825993,
      "upload_time": "2023-01-10T00:06:11",
      "upload_time_iso_8601": "2023-01-10T00:06:11.919541Z",
      "url": "https://files.pythonhosted.org/packages/51/be/9a26d03958618256ba14accc1530c0d5854fac8ff743d63bc2a6d7adffd0/dbdicom-0.1.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26fee6de66accfb18f2c6a7d99e63d8933578c738d57a37df3399c380348d39b",
        "md5": "f0e55fa4b02a831d684e32e31dcde413",
        "sha256": "2b99f387b166d4e0552c0665e0f8ec0b654af8a3108f42a786e81162bab18f3b"
      },
      "downloads": -1,
      "filename": "dbdicom-0.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "f0e55fa4b02a831d684e32e31dcde413",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 29705442,
      "upload_time": "2023-01-10T00:06:49",
      "upload_time_iso_8601": "2023-01-10T00:06:49.254406Z",
      "url": "https://files.pythonhosted.org/packages/26/fe/e6de66accfb18f2c6a7d99e63d8933578c738d57a37df3399c380348d39b/dbdicom-0.1.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}