{
  "info": {
    "author": "Fitrad3w",
    "author_email": "onigirisell@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\r\n# **pyEasyWeb3**\r\n\r\nlibrary for easy web3 usage (*default network **BSC***)\r\n\r\n\r\n## **Features**\r\n\r\n- Creating a wallet\r\n- Creating a wallet with mnemonic\r\n- Get wallet address\r\n- Get wallet balance\r\n- Get nonce\r\n- Sending transactions\r\n- write/read xlsx file\r\n\r\n\r\n\r\n## **Installation**\r\n```python\r\npip install pyEasyWeb3\r\n```\r\nIf you have such an error during installation, install the Microsoft C++ Build Tools with ***Desktop Development using C++***\r\n\r\n![image description](https://cdn.discordapp.com/attachments/1041747038741745776/1041840211086286938/image.png)\r\n \r\n## **Library classes**\r\nClass | Variables | Functions\r\n:---: | --- | ---\r\n*metaWeb3* | **httpProvider**:str|*createWallet*, *createWalletWithMnemonic*, *getWalletAddress*, *getBalanceWallet*, *getNonce*, *transferToken*\r\n*metaWeb3Threading* | **maxWorkers**:int, **httpProvider**:str|*createWalletThreading*, *getWalletAddressThreading*, *createWalletWithMnemonicThreading*, *getNonceThreading*, *getBalanceWalletThreading*\r\n*metaWeb3AsyncDef* | **httpProvider**:str|*createWallet*, *createWalletWithMnemonic*, *getWalletAddress*, *getBalanceWallet*, *getNonce*, *transferToken*\r\n*metaWeb3Async* | **httpProvider**:str|*createWalletAsync*, *getWalletAddressAsync*, *createWalletWithMnemonicAsync*, *getNonceAsync*, *getBalanceWalletAsync*\r\n*exelData* |~~None~~|*listNamedTupleToXlsx*, *readXlsxFile*\r\n\r\n## **metaWeb3**\r\nFunction | Variables | #\r\n:---: | --- | ---\r\n*createWallet* | ~~None~~|Create a new private key.\r\n*createWalletWithMnemonic* |~~None~~|Create a new private key and mnemonic.\r\n*getWalletAddress* | **privateKey**:str|Gets the account address.\r\n*getBalanceWallet* | **address**:str, **contractAddressToken**:str| Gets network token or contract token balance.\r\n*getNonce* | **address**:str|Gets the transaction number\r\n*transferToken* | **privateKey**:str, **addressTo**:str, **qty**:int, **contractAddressToken**:str, **transferAll**:bool, **threadingNum**:int, **userNonce**:int|Sends tokens.\r\n\r\n```python\r\nfrom pyEasyWeb3 import metaWeb3\r\n\r\ndef testMetaWeb3():\r\n    metaw3BSC = metaWeb3() # network BSC\r\n    metaw3POLYGON = metaWeb3(httpProvider='https://polygon-rpc.com/') # network polygon\r\n\r\n    newPrivateKey = metaw3BSC.createWallet()\r\n\r\n    newWalletWithMnemonic = metaw3BSC.createWalletWithMnemonic()\r\n\r\n    addressWallet = metaw3BSC.getWalletAddress(privateKey=newPrivateKey.privateKey)\r\n\r\n    balanceWallet = metaw3BSC.getBalanceWallet(address=addressWallet.address) # bnb \r\n    balanceWalletContractToken = metaw3BSC.getBalanceWallet(address=addressWallet.address, contractAddressToken='0x55d398326f99059ff775485246999027b3197955') # contract usdt (bsc network)\r\n\r\n    nonce = metaw3BSC.getNonce(address=addressWallet.address)\r\n\r\n    # transactions will be with errors since there are no tokens on wallets\r\n\r\n    transferBnb = metaw3BSC.transferToken(privateKey=newPrivateKey.privateKey, addressTo=newWalletWithMnemonic.address, qty=0.01) # send 0.01 bnb\r\n    transferBnbAll = metaw3BSC.transferToken(privateKey=newPrivateKey.privateKey, addressTo=newWalletWithMnemonic.address, transferAll=True, threadingNum=1) #send all bnb | threadingNum, \r\n    \r\n    #each transaction has a number, and if you send several transactions at once, one of them will not be sent, because it will have the same number as the previous one, by passing the number \r\n    # to this variable, you add some number to the current transaction: transferToken(), transferToken() = successful,error || transferToken(), transferToken(threadingNum=1) = successful,successful. \r\n    \r\n    nonceTransferUsdt = metaw3BSC.getNonce(address=addressWallet.address)\r\n    transferUSDT = metaw3BSC.transferToken(privateKey=newPrivateKey.privateKey, addressTo=newWalletWithMnemonic.address, contractAddressToken= '0x55d398326f99059ff775485246999027b3197955', qty=0.01, userNonce=nonceTransferUsdt.nonce)# send 0.01 usdt\r\n    \r\n    # userNonce, you can specify the transaction number yourself.\r\n    \r\n    transferUsdtAll = metaw3BSC.transferToken(privateKey=newPrivateKey.privateKey, addressTo=newWalletWithMnemonic.address, contractAddressToken= '0x55d398326f99059ff775485246999027b3197955', transferAll=True, userNonce=nonceTransferUsdt.nonce+1)# send all usdt\r\n\r\n    print(f\"{newPrivateKey=}\\n{newWalletWithMnemonic=}\\n{addressWallet=}\\n{balanceWallet=}\\n{balanceWalletContractToken=}\\n{nonce=}\\n{transferBnb=}\\n{transferBnbAll=}\\n{transferUSDT=}\\n{transferUsdtAll=}\")\r\n\r\nif __name__ == '__main__':\r\n    testMetaWeb3()\r\n```\r\n![](https://s4.gifyu.com/images/gif121.gif)\r\n\r\n## **metaWeb3Threading**\r\nFunction | Variables | #\r\n:---: | --- | ---\r\n*createWalletThreading* | **qty**:int|Create a new private key.\r\n*getWalletAddressThreading* |**privateKeys**:list[str]|Gets the account address.\r\n*createWalletWithMnemonicThreading* | **qty**:int|Create a new private key and mnemonic.\r\n*getNonceThreading* |**addressList**:list[str]|Gets the transaction number \r\n*getBalanceWalletThreading* | **addressList**:list[str], **contractAddress**:str|Gets network token or contract token balance.\r\n\r\n\r\n```python\r\nfrom pyEasyWeb3 import metaWeb3Threading\r\n\r\ndef testMetaWeb3():\r\n    metaw3BSC = metaWeb3Threading() # network BSC\r\n\r\n    newPrivateKey = metaw3BSC.createWalletThreading(qty=10)\r\n\r\n    newWalletWithMnemonic = metaw3BSC.createWalletWithMnemonicThreading(qty=10)\r\n\r\n    addressWallet = metaw3BSC.getWalletAddressThreading(privateKeys=[key.privateKey for key in newPrivateKey])\r\n    addressList = [address.address for address in addressWallet]\r\n\r\n    balanceWallet = metaw3BSC.getBalanceWalletThreading(addressList=addressList) # bnb \r\n    balanceWalletContractToken = metaw3BSC.getBalanceWalletThreading(addressList=addressList, contractAddressToken='0x55d398326f99059ff775485246999027b3197955') # contract usdt (bsc network)\r\n\r\n    nonce = metaw3BSC.getNonceThreading(addressList=addressList)\r\n\r\n    print(f\"{newPrivateKey=}\\n{newWalletWithMnemonic=}\\n{addressWallet=}\\n{balanceWallet=}\\n{balanceWalletContractToken=}\\n{nonce=}\")\r\n\r\nif __name__ == '__main__':\r\n    testMetaWeb3()\r\n```\r\n![](https://cdn.discordapp.com/attachments/1041747038741745776/1041756471089692692/2022-11-14-19-11-08_1__1_.gif)\r\n\r\n## **metaWeb3AsyncDef**\r\nFunction | Variables | #\r\n:---: | --- | ---\r\n*createWallet* | ~~None~~|Create a new private key.\r\n*createWalletWithMnemonic* |~~None~~|Create a new private key and mnemonic.\r\n*getWalletAddress* | **privateKey**:str|Gets the account address.\r\n*getBalanceWallet* | **address**:str, **contractAddressToken**:str| Gets network token or contract token balance.\r\n*getNonce* | **address**:str|Gets the transaction number\r\n*transferToken* | **privateKey**:str, **addressTo**:str, **qty**:int, **contractAddressToken**:str, **transferAll**:bool, **threadingNum**:int, **userNonce**:int|Sends tokens.\r\n\r\n```python\r\nfrom pyEasyWeb3 import metaWeb3AsyncDef\r\nfrom asyncio import run\r\n\r\nasync def testMetaWeb3():\r\n    metaw3BSC = metaWeb3AsyncDef() # network BSC\r\n\r\n    newPrivateKey = await metaw3BSC.createWallet()\r\n\r\n    newWalletWithMnemonic = await metaw3BSC.createWalletWithMnemonic()\r\n\r\n    addressWallet = await metaw3BSC.getWalletAddress(privateKey=newPrivateKey.privateKey)\r\n\r\n    balanceWallet = await metaw3BSC.getBalanceWallet(address=addressWallet.address) # bnb \r\n    balanceWalletContractToken = await metaw3BSC.getBalanceWallet(address=addressWallet.address, contractAddressToken='0x55d398326f99059ff775485246999027b3197955') # contract usdt (bsc network)\r\n\r\n    nonce = await metaw3BSC.getNonce(address=addressWallet.address)\r\n\r\n    # transactions will be with errors since there are no tokens on wallets\r\n\r\n    transferBnb = await metaw3BSC.transferToken(privateKey=newPrivateKey.privateKey, addressTo=newWalletWithMnemonic.address, qty=0.01) # send 0.01 bnb\r\n    transferBnbAll = await metaw3BSC.transferToken(privateKey=newPrivateKey.privateKey, addressTo=newWalletWithMnemonic.address, transferAll=True, AsyncNum=1) #send all bnb | threadingNum, \r\n    \r\n    #each transaction has a number, and if you send several transactions at once, one of them will not be sent, because it will have the same number as the previous one, by passing the number \r\n    # to this variable, you add some number to the current transaction: transferToken(), transferToken() = successful,error || transferToken(), transferToken(threadingNum=1) = successful,successful. \r\n    \r\n    nonceTransferUsdt = await metaw3BSC.getNonce(address=addressWallet.address)\r\n    transferUSDT = await metaw3BSC.transferToken(privateKey=newPrivateKey.privateKey, addressTo=newWalletWithMnemonic.address, contractAddressToken= '0x55d398326f99059ff775485246999027b3197955', qty=0.01, userNonce=nonceTransferUsdt.nonce)# send 0.01 usdt\r\n    \r\n    # userNonce, you can specify the transaction number yourself.\r\n    \r\n    transferUsdtAll = await metaw3BSC.transferToken(privateKey=newPrivateKey.privateKey, addressTo=newWalletWithMnemonic.address, contractAddressToken= '0x55d398326f99059ff775485246999027b3197955', transferAll=True, userNonce=nonceTransferUsdt.nonce+1)# send all usdt\r\n\r\n    print(f\"{newPrivateKey=}\\n{newWalletWithMnemonic=}\\n{addressWallet=}\\n{balanceWallet=}\\n{balanceWalletContractToken=}\\n{nonce=}\\n{transferBnb=}\\n{transferBnbAll=}\\n{transferUSDT=}\\n{transferUsdtAll=}\")\r\n\r\nif __name__ == '__main__':\r\n    run(testMetaWeb3())\r\n```\r\n![](https://cdn.discordapp.com/attachments/1041747038741745776/1041857018148966420/gif121.gif)\r\n\r\n## **metaWeb3Async**\r\nFunction | Variables | #\r\n:---: | --- | ---\r\n*createWalletAsync* | **qty**:int|Create a new private key.\r\n*getWalletAddressAsync* |**privateKeys**:list[str]|Gets the account address.\r\n*createWalletWithMnemonicAsync* | **qty**:int|Create a new private key and mnemonic.\r\n*getNonceAsync* |**addressList**:list[str]|Gets the transaction number \r\n*getBalanceWalletAsync* | **addressList**:list[str], **contractAddress**:str|Gets network token or contract token balance.\r\n\r\n\r\n```python\r\nfrom pyEasyWeb3 import metaWeb3Async\r\nfrom asyncio import run\r\n\r\nasync def testMetaWeb3():\r\n    metaw3BSC = metaWeb3Async() # network BSC\r\n\r\n    newPrivateKey = await metaw3BSC.createWalletAsync(qty=10)\r\n\r\n    newWalletWithMnemonic = await metaw3BSC.createWalletWithMnemonicAsync(qty=10)\r\n\r\n    addressWallet = await metaw3BSC.getWalletAddressAsync(privateKeys=[key.privateKey for key in newPrivateKey])\r\n    addressList = [address.address for address in addressWallet]\r\n\r\n    balanceWallet = await metaw3BSC.getBalanceWalletAsync(addressList=addressList) # bnb \r\n    balanceWalletContractToken = await metaw3BSC.getBalanceWalletAsync(addressList=addressList, contractAddressToken='0x55d398326f99059ff775485246999027b3197955') # contract usdt (bsc network)\r\n\r\n    nonce = await metaw3BSC.getNonceAsync(addressList=addressList)\r\n\r\n    print(f\"{newPrivateKey=}\\n{newWalletWithMnemonic=}\\n{addressWallet=}\\n{balanceWallet=}\\n{balanceWalletContractToken=}\\n{nonce=}\")\r\n\r\ndef syncDef():\r\n    # ....\r\n    privatKeys = run(metaWeb3Async().createWalletAsync(qty=10))\r\n    for key in privatKeys:\r\n        print(key.privateKey)\r\n\r\nif __name__ == '__main__':\r\n    run(testMetaWeb3())\r\n    syncDef()\r\n```\r\n![](https://cdn.discordapp.com/attachments/1041747038741745776/1041787831745523724/2022-11-14-21-44-11-.gif)\r\n\r\n## **exelData**\r\nFunction | Variables | #\r\n:---: | --- | ---\r\n*listNamedTupleToXlsx* | **data**:list[dataTypeClass], **fileName**:str|Creates an xlsx file.\r\n*readXlsxFile* |**path**:str, **columnList**:list[str]|Reads columns in an xlsx file.\r\n\r\n```python\r\nfrom pyEasyWeb3 import metaWeb3Threading, exelData\r\n\r\ndef testMetaWeb3():\r\n    metaw3BSC = metaWeb3Threading() # network BSC\r\n\r\n    newWalletWithMnemonic = metaw3BSC.createWalletWithMnemonicThreading(qty=10)\r\n    exelData.listNamedTupleToXlsx(data=newWalletWithMnemonic, fileName='test')\r\n    read = exelData.readXlsxFile(path='test.xlsx', columnList=['a','b','c'])\r\n    print(read)\r\n    \r\nif __name__ == '__main__':\r\n    testMetaWeb3()\r\n```\r\n![](https://cdn.discordapp.com/attachments/1041747038741745776/1041863202759266324/2022-11-15-02-47-33-_online-video-cutter.com__1_.gif)\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/onigirisell/pyEasyWeb3",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyEasyWeb3",
    "package_url": "https://pypi.org/project/pyEasyWeb3/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyEasyWeb3/",
    "project_urls": {
      "Homepage": "https://github.com/onigirisell/pyEasyWeb3"
    },
    "release_url": "https://pypi.org/project/pyEasyWeb3/1.0.4.2/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "library for easy web3 usage (default network BSC)",
    "version": "1.0.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15771832,
  "releases": {
    "1.0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8d77083dbd58d8de0043ea14e619cc3a32786287d7fec2dd28515381ab74da5",
          "md5": "f24c9ab4394571214937fa73ddddbd86",
          "sha256": "8caea1ca762a226be54998b462f43b22dddb389e34fae55cf43db3d07442cfaf"
        },
        "downloads": -1,
        "filename": "pyEasyWeb3-1.0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f24c9ab4394571214937fa73ddddbd86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 10385,
        "upload_time": "2022-11-15T07:30:31",
        "upload_time_iso_8601": "2022-11-15T07:30:31.416913Z",
        "url": "https://files.pythonhosted.org/packages/f8/d7/7083dbd58d8de0043ea14e619cc3a32786287d7fec2dd28515381ab74da5/pyEasyWeb3-1.0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8d77083dbd58d8de0043ea14e619cc3a32786287d7fec2dd28515381ab74da5",
        "md5": "f24c9ab4394571214937fa73ddddbd86",
        "sha256": "8caea1ca762a226be54998b462f43b22dddb389e34fae55cf43db3d07442cfaf"
      },
      "downloads": -1,
      "filename": "pyEasyWeb3-1.0.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f24c9ab4394571214937fa73ddddbd86",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 10385,
      "upload_time": "2022-11-15T07:30:31",
      "upload_time_iso_8601": "2022-11-15T07:30:31.416913Z",
      "url": "https://files.pythonhosted.org/packages/f8/d7/7083dbd58d8de0043ea14e619cc3a32786287d7fec2dd28515381ab74da5/pyEasyWeb3-1.0.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}