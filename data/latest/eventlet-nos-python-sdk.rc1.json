{
  "info": {
    "author": "NOS Developer",
    "author_email": "hzsunjianliang@corp.netease.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "﻿NOS Python SDK\n============================\n\nNOS Python SDK实现了NOS对象操作接口，基于此SDK能方便快速地实现Python应用程序来使用NOS的对象存储服务。\n\n支持的功能\n----------\n\n对象操作接口\n^^^^^^^^^^^^\n\n* Delete Object —— 删除一个对象\n* Delete Multiple Objects —— 用一个HTTP请求删除同一个Bucket中的多个对象\n* Get Object —— 读取对象内容\n* Head Object —— 获取对象相关元数据信息\n* List Objects —— 获取一个桶的对象列表\n* Put Object —— 上传一个对象\n* Put Object - Copy —— 拷贝一个对象\n* Put Object - Move —— 桶内部move一个对象\n\n大对象分块操作接口\n^^^^^^^^^^^^^^^^^^\n\n* Initiate Multipart Upload —— 初始化分块上传\n* Upload Part —— 上传一个分块\n* Complete Multipart Upload —— 完成分块上传\n* Abort Multipart Upload —— 取消分块上传并删除已上传的分块\n* List Parts —— 列出已上传的分块\n* List Multipart Uploads —— 列出所有执行中的分块上传事件\n\n接口实现\n--------\n\n在调用对象操作接口前需要生成一个nos.Client类的实例。且在调用操作接口时，都有可能抛出异常，可以使用`nos.exceptions.ServiceException`捕获nos服务器异常错误，使用`nos.exceptions.ClientException`捕获nos客户端异常错误。\n\nnos.Client对象实例化\n^^^^^^^^^^^^^^^^^^^^\n\n使用举例\n\n::\n\n    client = nos.Client(\n        access_key_id=\"string\",\n        access_key_secret=\"string\",\n        transport_class=nos.transport.Transport,\n        **kwargs\n    )\n\n参数说明\n\n* access_key_id(string) -- 访问凭证ID。当需要访问的桶属性为Public-read时，可以将该值设置成None。默认值为：None。\n* access_key_secret(string) -- 访问凭证密钥。当需要访问的桶属性为Public-read时，可以将该值设置成None。默认值为：None。\n* transport_class(class) -- 与NOS服务器进行数据传输的类型，类型中至少需要包含`perform_request`成员函数。默认值为：nos.transport.Transport。\n* kwargs -- 其他可选参数，如下。\n    * end_point(string) -- 与NOS服务器进行数据传输、交互的服务器的主域名。默认为：`nos-eastchina1.126.net`。\n    * num_pools(integer) -- HTTP连接池的大小。默认值为：16。\n    * timeout(integer) -- 连接超时的时间，单位：秒。\n    * max_retries(integer) -- 当得到HTTP 5XX的服务器错误的响应时，进行重试的次数。默认值为：2。\n    * retry_backoff_factor(float) -- 重试指数退避因子，多次重试之间的时间间隔为：retry_backoff_factor * (2** 已重试次数) 秒。例如，当设置为0.1时，重试的时间间隔为[0.1s, 0.2s, 0.4s, ...]。默认值为: 0.0。\n    * enable_ssl(boolean) -- 与NOS服务器进行数据传输、交互时，是否使用HTTPS。默认值为：False，默认使用HTTP。\n\nnos.Client可能引发的所有异常类型\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n在程序运行过程中，如果遇到错误，Python SDK会抛出相应的异常。所有异常均属于NOSException类，其下分为两个子类：ClientException、ServiceException。在调用Python SDK接口的时候，捕捉这些异常并打印必要的信息有利于定位问题。\n\nClientException\n:::::::::::::::\n\nClientException包含SDK客户端的异常。比如，上传对象时对象名为空，就会抛出该异常。\nClientException类下有如下子类，用于细分客户端异常：\n\n.. list-table::\n    :widths: 5 10\n    :header-rows: 1\n\n    * - 类名\n      - 抛出异常的原因\n    * - InvalidBucketName\n      - 传入的桶名为空\n    * - InvalidObjectName\n      - 传入的对象名为空\n    * - FileOpenModeError\n      - 出入的对象为文件且没有使用二进制文件方式打开\n    * - XmlParseError\n      - 解析服务端响应的XML内容失败\n    * - SerializationError\n      - 上传对象序列化失败\n    * - ConnectionError\n      - 连接服务端异常\n    * - ConnectionTimeout\n      - 连接服务端超时\n\nServiceException\n::::::::::::::::\n\nServiceException包含NOS服务器返回的异常。当NOS服务器返回4xx或5xx的HTTP错误码时，Python SDK会将NOS Server的响应转换为ServiceException。\nServiceException类下有如下子类，用于细分NOS服务器返回的异常：\n\n.. list-table::\n    :widths: 5 10\n    :header-rows: 1\n\n    * - 类名\n      - 抛出异常的原因\n    * - MultiObjectDeleteException\n      - 批量删除对象时，存在部分对象无法删除\n    * - BadRequestError\n      - 服务端返回HTTP 400响应\n    * - ForbiddenError\n      - 服务端返回HTTP 403响应\n    * - NotFoundError\n      - 服务端返回HTTP 404响应\n    * - MethodNotAllowedError\n      - 服务端返回HTTP 405响应\n    * - ConflictError\n      - 服务端返回HTTP 409响应\n    * - LengthRequiredError\n      - 服务端返回HTTP 411响应\n    * - RequestedRangeNotSatisfiableError\n      - 服务端返回HTTP 416响应\n    * - InternalServerErrorError\n      - 服务端返回HTTP 500响应\n    * - NotImplementedError\n      - 服务端返回HTTP 501响应\n    * - ServiceUnavailableError\n      - 服务端返回HTTP 503响应\n\nnos.Client的使用和异常处理的示例代码\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n try:\n    resp = client.XXX(\n        bucket=bucket,\n        key=key\n    )\n except nos.exceptions.ServiceException as e:\n    print (\n        'ServiceException: %s\\n'\n        'status_code: %s\\n'\n        'error_type: %s\\n'\n        'error_code: %s\\n'\n        'request_id: %s\\n'\n        'message: %s\\n'\n    ) % (\n        e,\n        e.status_code,  # 错误http状态码\n        e.error_type,   # NOS服务器定义错误类型\n        e.error_code,   # NOS服务器定义错误码\n        e.request_id,   # 请求ID，有利于nos开发人员跟踪异常请求的错误原因\n        e.message       # 错误描述信息\n    )\n except nos.exceptions.ClientException as e:\n    print (\n        'ClientException: %s\\n'\n        'message: %s\\n'\n    ) % (\n        e,\n        e.message       # 客户端错误信息\n    )\n\n对象操作接口\n^^^^^^^^^^^^\n\nDelete Object\n:::::::::::::\n\n使用举例\n\n::\n\n    resp = client.delete_object(\n        bucket=\"string\",\n        key=\"string\"\n    )\n\n参数说明\n\n* bucket(string) -- 桶名。\n* key(string) -- 对象名。\n\n返回值举例\n\n::\n\n    {\n        \"x_nos_request_id\": \"17b21e42ac11000001390ab891440240\"\n    }\n\n返回值说明\n返回值为字典类型\n\n* x_nos_request_id(string) -- 唯一定位一个请求的ID号。\n\n\nDelete Multiple Objects\n:::::::::::::::::::::::\n\n使用举例\n\n::\n\n    resp = client.delete_objects(\n        bucket=\"string\",\n        keys=[\n            \"string1\",\n            \"string2\",\n            ...\n        ],\n        quiet=True|False\n    )\n\n参数说明\n\n* bucket(string) -- 桶名。\n* objects(list) -- 待删除的对象名称列表。\n* quiet(boolean) -- 是否开启安静模式（安静模式不显示具体删除信息）。\n\n返回值举例\n\n::\n\n    {\n        \"x_nos_request_id\": \"17b21e42ac11000001390ab891440240\",\n        \"response\": xml.etree.ElementTree()    # xml.etree.ElementTree类型对象\n    }\n\n返回值的`response`的字符形式可能如下：\n\n::\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <DeleteResult>\n        <Deleted>\n                <Key>1.jpg</Key>\n        </Deleted>\n        <Error>\n                <Key>2.jpg</Key>\n                <Code>AccessDenied</Code>\n                <Message>Access Denied</Message>\n        </Error>\n        <Error>\n                <Key>3.jpg</Key>\n                <Code>NoSuchKey</Code>\n                <Message>No Such Key</Message>\n        </Error>\n    </DeleteResult>\n\n*注意：下列各项通过xml.etree.ElementTree的成员函数获取具体值时，得到的均为字符串；目前标注的类型为原类型名称，需自行转换。*\n\n.. list-table::\n    :widths: 10 30 \n    :header-rows: 1\n\n    * - Element\n      - 描述\n    * - DeleteResult\n      - | 多重删除的响应容器元素\n        | 类型：容器\n    * - Deleted\n      - | 已被成功删除的容器元素\n        | 类型：容器\n        | 父节点：DeleteResult\n    * - Key\n      - | 已删除的对象键值\n        | 类型：字符串\n        | 父节点：Deleted，Error\n    * - VersionId\n      - | 已删除的对象版本号\n        | 类型：数字\n        | 父节点：Deleted，Error\n    * - Error\n      - | 删除失败的对象版本号\n        | 类型：容器\n        | 父节点：DeleteResult\n    * - Code\n      - | 删除失败返回的错误码\n        | 类型：字符串\n        | 父节点：Error\n    * - Message\n      - | 删除失败返回的详细错误描述\n        | 类型：字符串\n        | 父节点：Error\n\n返回值说明\n返回值为字典类型\n\n* x_nos_request_id(string) -- 唯一定位一个请求的ID号。\n* response(xml.etree.ElementTree) -- 包含返回信息的xml对象。\n\n\nGet Object\n::::::::::\n\n使用举例\n\n::\n\n    resp = client.get_object(\n        bucket=\"string\",\n        key=\"string\",\n        **kwargs\n    )\n\n参数说明\n\n* bucket(string) -- 桶名。\n* key(string) -- 对象名。\n* kwargs -- 其他可选参数，如下。\n    * range(string) -- 下载指定的数据块，Range Header参考RFC2616。\n\n返回值举例\n\n::\n\n    {\n        \"x_nos_request_id\": \"17b21e42ac11000001390ab891440240\",\n        \"content_length\": 1024,\n        \"content_range\": \"0-1024/234564\",\n        \"content_type\": \"application/octet-stream;charset=UTF-8\",\n        \"etag\": \"3adbbad1791fbae3ec908894c4963870\",\n        \"body\": StreamingBody()\n    }\n\n返回值说明\n返回值为字典类型\n\n* x_nos_request_id(string) -- 唯一定位一个请求的ID号。\n* content_length(integer) -- 返回的数据块的字节数。\n* content_range(string) -- 返回的数据块的范围。\n* content_type(string) -- 返回的数据块的类型。\n* etag(string) -- 对象的哈希值，反应对象内容的更改情况。\n* body(StreamingBody) -- 对象数据。\n\n\nHead Object\n:::::::::::\n\n使用举例\n\n::\n\n    resp = client.head_object(\n        bucket=\"string\",\n        key=\"string\"\n    )\n\n参数说明\n\n* bucket(string) -- 桶名。\n* key(string) -- 对象名。\n\n返回值举例\n\n::\n\n    {\n        \"x_nos_request_id\": \"17b21e42ac11000001390ab891440240\",\n        \"content_length\": 1024,\n        \"content_type\": \"application/octet-stream;charset=UTF-8\",\n        \"etag\": \"3adbbad1791fbae3ec908894c4963870\",\n        \"last_modified\": \"Mon, 23 May 2016 16:07:15 Asia/Shanghai\"\n    }\n\n返回值说明\n返回值为字典类型\n\n* x_nos_request_id(string) -- 唯一定位一个请求的ID号。\n* content_length(integer) -- 返回的数据块的字节数。\n* content_type(string) -- 返回的数据块的类型。\n* etag(string) -- 对象的哈希值，反应对象内容的更改情况。\n* last_modified(string) -- 最近一次修改对象的时间。\n\n\nList Objects\n::::::::::::\n\n使用举例\n\n::\n\n    resp = client.list_objects(\n        bucket=\"string\",\n        **kwargs\n    )\n\n参数说明\n\n* bucket(string) -- 桶名。\n* kwargs -- 其他可选参数。\n    * delimiter(string) -- 分界符，用于做groupby操作。\n    * marker(string) -- 字典序的起始标记，只列出该标记之后的部分。\n    * limit(integer) -- 限定返回的数量，返回的结果小于或等于该值。取值范围：0-1000，默认：100\n    * prefix(string) -- 只返回Key以特定前缀开头的那些对象。可以使用前缀把一个桶里面的对象分成不同的组，类似文件系统的目录一样。\n\n返回值举例\n\n::\n\n    {\n        \"x_nos_request_id\": \"17b21e42ac11000001390ab891440240\",\n        \"response\": xml.etree.ElementTree()    # xml.etree.ElementTree类型对象\n    }\n\n返回值的`response`的字符形式可能如下：\n\n::\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <ListBucketResult xmlns=\"http://doc.nos.netease.com/2012-03-01\">\n        <Name>dream</Name>\n        <Prefix>user</Prefix>\n        <MaxKeys>2</MaxKeys>\n        <NextMarker>user/yao</NextMarker>\n        <IsTruncated>true</IsTruncated>\n        <Contents>\n                <Key>user/lin</Key>\n                <LastModified>2012-01-01T12:00:00.000Z</LastModified>\n                <Etag>258ef3fdfa96f00ad9f27c383fc9acce</ Etag>\n                <Size>143663</Size>\n                <StorageClass>Standard</StorageClass>\n        </Contents>\n        <Contents>\n                <Key>user/yao</Key>\n                <LastModified>2012-01-01T12:00:00.000Z</LastModified>\n                < Etag>828ef3fdfa96f00ad9f27c383fc9ac7f</ Etag>\n                <Size>423983</Size>\n                <StorageClass>Standard</StorageClass>\n        </Contents>\n    </ListBucketResult>\n\n*注意：下列各项通过xml.etree.ElementTree的成员函数获取具体值时，得到的均为字符串；目前标注的类型为原类型名称，需自行转换。*\n\n.. list-table::\n    :widths: 10 35\n    :header-rows: 1\n\n    * - 元素\n      - 描述\n    * - Contents\n      - | 对象元数据，代表一个对象描述\n        | 类型：容器\n        | 父节点：ListBucketObjects\n        | 子节点：Key，LastModified，Size，Etag\n    * - CommonPrefixes\n      - | 只有当指定了delimiter分界符时，才会有这个响应\n        | 类型：字符串\n        | 父节点：ListBucketObjects\n    * - delimiter\n      - | 分界符\n        | 类型：字符串\n        | 父节点：ListBucketObjects\n    * - DisplayName\n      - | 对象的拥有者\n        | 类型：字符串\n        | 父节点：ListBucketObjects.Contents.Owner\n    * - Etag \n      - | 对象的哈希描述\n        | 类型：字符串\n        | 父节点：ListBucketObjects.Contents\n    * - ID\n      - | 对象拥有者的ID\n        | 类型：字符串\n        | 父节点：ListBucketObjects.Contents.Owner\n    * - IsTruncated\n      - | 是否截断，如果因为设置了limit导致不是所有的数据集都返回，则该值设置为true\n        | 类型：布尔值\n        | 父节点：ListBucketObjects\n    * - Key\n      - | 对象的名称\n        | 类型：字符串\n        | 父节点：ListBucketObjects.Contents\n    * - LastModified\n      - | 对象最后修改日期和时间\n        | 类型：日期 格式：yyyy-MM-dd\"T\"HH:mm:ss.SSSZ\n        | 父节点：ListBucketObjects.Contents\n    * - Marker\n      - | 列表的起始位置，等于请求参数设置的Marker值\n        | 类型：字符串\n        | 父节点：ListBucketObjects\n    * - NextMark\n      - | 下一次分页的起点\n        | 类型：字符串\n        | 父节点：ListBucketObjects\n    * - MaxKeys\n      - | 请求的对象个数限制\n        | 类型：数字\n        | 父节点：ListBucketObjects\n    * - Name\n      - | 请求的桶名称\n        | 类型：字符串\n        | 父节点：ListBucketObjects\n    * - Owner\n      - | 桶拥有者\n        | 类型：容器\n        | 父节点：ListBucketObjects.contents | CommonPrefixes\n        | 子节点：DisplayName|ID\n    * - Prefix\n      - | 请求的对象的Key的前缀\n        | 类型：字符串\n        | 父节点：ListBucketObjects\n    * - Size\n      - | 对象的大小字节数\n        | 类型：数字\n        | 父节点：ListBucketObjects.contents\n    * - StorageClasss\n      - | 存储级别\n        | 类型：字符串\n        | 父节点：ListBucketObjects.contents\n\n返回值说明\n返回值为字典类型\n\n* x_nos_request_id(string) -- 唯一定位一个请求的ID号。\n* response(xml.etree.ElementTree) -- 包含返回信息的xml对象。\n\n\nPut Object\n::::::::::\n\n使用举例\n\n::\n\n    resp = client.put_object(\n        bucket=\"string\",\n        key=\"string\",\n        body=serializable_object,\n        **kwargs\n    )\n\n参数说明\n\n* bucket(string) -- 桶名。\n* key(string) -- 对象名。\n* body(serializable_object) -- 对象内容，可以是文件句柄、字符串、字典等任何可序列化的对象。\n* kwargs -- 其他可选参数。\n    * meta_data(dict) -- 用户自定义的元数据，通过键值对的形式上报，键名和值均为字符串，且键名需以\\`x-nos-meta-\\`开头。\n\n返回值举例\n\n::\n\n    {\n        \"x_nos_request_id\": \"17b21e42ac11000001390ab891440240\",\n        \"etag\": \"fbacf535f27731c9771645a39863328\"\n    }\n\n返回值说明\n返回值为字典类型\n\n* x_nos_request_id(string) -- 唯一定位一个请求的id号。\n* etag(string) -- 对象的哈希值，反应对象内容的更改情况。\n\n\nPut Object - Copy\n:::::::::::::::::\n\n使用举例\n\n::\n\n    resp = client.copy_object(\n        src_bucket=\"string\",\n        src_key=\"string\",\n        dest_bucket=\"string\",\n        dest_key=\"string\"\n    )\n\n参数说明\n\n* src_bucket(string) -- 来源对象的桶名。\n* src_key(string) -- 来源对象的对象名。\n* dest_bucket(string) -- 目标对象的桶名。\n* dest_key(string) -- 目标对象的对象名。\n\n返回值举例\n\n::\n\n    {\n        \"x_nos_request_id\": \"17b21e42ac11000001390ab891440240\"\n    }\n\n返回值说明\n返回值为字典类型\n\n* x_nos_request_id(string) -- 唯一定位一个请求的ID号。\n\n\nMove Object\n:::::::::::\n\n使用举例\n\n::\n\n    resp = client.move_object(\n        src_bucket=\"string\",\n        src_key=\"string\",\n        dest_bucket=\"string\",\n        dest_key=\"string\"\n    )\n\n参数说明\n\n* src_bucket(string) -- 来源对象的桶名。\n* src_key(string) -- 来源对象的对象名。\n* dest_bucket(string) -- 目标对象的桶名。\n* dest_key(string) -- 目标对象的对象名。\n\n返回值举例\n\n::\n\n    {\n        \"x_nos_request_id\": \"17b21e42ac11000001390ab891440240\"\n    }\n\n返回值说明\n返回值为字典类型\n\n* x_nos_request_id(string) -- 唯一定位一个请求的ID号。\n\n\nInitiate Multipart Upload\n:::::::::::::::::::::::::\n\n使用举例\n\n::\n\n    resp = client.create_multipart_upload(\n        bucket=\"string\",\n        key=\"string\",\n        **kwargs\n    )\n\n参数说明\n\n* bucket(string) -- 桶名。\n* key(string) -- 对象名。\n* kwargs -- 其他可选参数。\n    * meta_data(dict) -- 用户自定义的元数据，通过键值对的形式上报，键名和值均为字符串，且键名需以\\`x-nos-meta-\\`开头。\n\n返回值举例\n\n::\n\n    {\n        \"x_nos_request_id\": \"17b21e42ac11000001390ab891440240\",\n        \"response\": xml.etree.ElementTree()    # xml.etree.ElementTree类型对象\n    }\n\n返回值的`response`的字符形式可能如下：\n\n::\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <InitiateMultipartUploadResult>\n        <Bucket>filestation</Bucket>\n        <Key>movie.avi</Key>\n        <UploadId>VXBsb2FkIElEIGZvciA2aWWpbmcncyBteS1tb3S5tMnRzIHVwbG9hZA</UploadId>\n    </InitiateMultipartUploadResult>\n\n*注意：下列各项通过xml.etree.ElementTree的成员函数获取具体值时，得到的均为字符串；目前标注的类型为原类型名称，需自行转换。*\n\n.. list-table::\n    :widths: 10 30\n    :header-rows: 1\n\n    * - 元素\n      - 描述\n    * - InitiateMultipartUploadResult\n      - | 响应容器元素\n        | 类型：容器\n        | 子节点：Key，Bucket\n    * - Key\t\n      - | 对象的Key\n        | 类型：字符串\n        | 父节点：InitiateMultipartUploadResult\n    * - Bucket\n      - | 对象的桶\n        | 类型：字符串\n        | 父节点：InitiateMultipartUploadResult\n    * - UploadId\n      - | 分块上传的ID，用这个ID来作为各块属于这个文件的标识\n        | 类型：字符串\n        | 父节点：InitiateMultipartUploadResult\n\n返回值说明\n返回值为字典类型\n\n* x_nos_request_id(string) -- 唯一定位一个请求的id号。\n* response(xml.etree.ElementTree) -- 包含返回信息的xml对象。\n\n\nUpload Part\n:::::::::::\n\n使用举例\n\n::\n\n    resp = client.upload_part(\n        bucket=\"string\",\n        key=\"string\",\n        part_num=2,\n        upload_id=\"string\",\n        body=serializable_object\n    )\n\n参数说明\n\n* bucket(string) -- 桶名。\n* key(string) -- 对象名。\n* part_num(integer) -- 数据分块编码号（1-10000）。\n* upload_id(string) -- 数据上传标识号。\n* body(serializable_object) -- 对象内容，可以是文件句柄、字符串、字典等任何可序列化的对象。\n\n返回值举例\n\n::\n\n    {\n        \"x_nos_request_id\": \"17b21e42ac11000001390ab891440240\",\n        \"etag\": \"fbacf535f27731c9771645a39863328\"\n    }\n\n返回值说明\n返回值为字典类型\n\n* x_nos_request_id(string) -- 唯一定位一个请求的id号。\n* etag(string) -- 对象的哈希值，反应对象内容的更改情况。\n\n\nComplete Multipart Upload\n:::::::::::::::::::::::::\n\n在将所有数据Part都上传完成后，必须调用Complete Multipart Upload API来完成整个文件的Multipart Upload。在执行该操作时，用户必须提供所有有效的数据Part的列表（包括part号码和ETAG）；NOS收到用户提交的Part列表后，会逐一验证每个数据Part的有效性。当所有的数据Part验证通过后，NOS将把这些数据part组合成一个完整的Object。\n使用x-nos-Object-md5扩展头发送对象的MD5值，用作去重库的建立（Put Object使用Content-MD5建立对象去重库）。\n\n使用举例\n\n::\n\n    resp = client.complete_multipart_upload(\n        bucket=\"string\",\n        key=\"string\",\n        upload_id=\"string\",\n        info=[\n            {\n                \"part_num\": 1,\n                \"etag\": \"string\"\n            },\n            {\n                \"part_num\": 2,\n                \"etag\": \"string\"\n            },\n            ...\n        ],\n        **kwargs\n    )\n\n参数说明\n\n* bucket(string) -- 桶名。\n* key(string) -- 对象名。\n* upload_id(string) -- 数据上传标识号。\n* info(list) -- 所有有效的数据Part的列表（包括part号码和etag）\n* kwargs -- 其他可选参数，如下。\n    * object_md5(string) -- 发送对象的md5值，用于后续去重。\n\n返回值举例\n\n::\n\n    {\n        \"x_nos_request_id\": \"17b21e42ac11000001390ab891440240\",\n        \"response\": xml.etree.ElementTree()    # xml.etree.ElementTree类型对象\n    }\n\n返回值的`response`的字符形式可能如下：\n\n::\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <CompleteMultipartUploadResult xmlns=\"\">\n        <Location> filestation.nos.netease.com/movie.avi</Location>\n        <Bucket>filestation </Bucket>\n        <Key>movie.avi </Key>\n        <ETag>\"3858f62230ac3c915f300c664312c11f-9\"</ETag>\n    </CompleteMultipartUploadResult>\n\n*注意：下列各项通过xml.etree.ElementTree的成员函数获取具体值时，得到的均为字符串；目前标注的类型为原类型名称，需自行转换。*\n\n.. list-table::\n    :widths: 10 30\n    :header-rows: 1\n\n    * - 元素\n      - 描述\n    * - Bucket\n      - | 新创建对象所在的桶\n        | 类型：字符串\n        | 父节点：CompleteMultipartUploadResult\n    * - CompleteMultipartUploadResult\n      - | 响应容器元素\n        | 类型：容器\n        | 子节点：Location，Bucket，Key，ETag\n    * - ETag\n      - | 新创建的对象的Entity Tag\n        | 类型：字符串\n        | 父节点：CompleteMultipartUploadResult\n    * - Key\n      - | 新创建对象的Key\n        | 类型：字符串\n        | 父节点：CompleteMultipartUploadResult\n    * - Location\n      - | 新创建的这个对象的资源定位URL\n        | 类型：字符串\n        | 父节点：CompleteMultipartUploadResult\n\n返回值说明\n返回值为字典类型\n\n* x_nos_request_id(string) -- 唯一定位一个请求的ID号。\n* response(xml.etree.ElementTree) -- 包含返回信息的xml对象。\n\n\nAbort Multipart Upload\n::::::::::::::::::::::\n\n使用举例\n\n::\n\n    resp = client.abort_multipart_upload(\n        bucket=\"string\",\n        key=\"string\",\n        upload_id=\"string\"\n    )\n\n参数说明\n\n* bucket(string) -- 桶名。\n* key(string) -- 对象名。\n* upload_id(string) -- 数据上传标识号。\n\n返回值举例\n\n::\n\n    {\n        \"x_nos_request_id\": \"17b21e42ac11000001390ab891440240\"\n    }\n\n返回值说明\n返回值为字典类型\n\n* x_nos_request_id(string) -- 唯一定位一个请求的ID号。\n\n\nList Parts\n::::::::::\n\n使用举例\n\n::\n\n    resp = client.list_parts(\n        bucket=\"string\",\n        key=\"string\",\n        upload_id=\"string\",\n        **kwargs\n    )\n\n参数说明\n\n* bucket(string) -- 桶名。\n* key(string) -- 对象名。\n* upload_id(string) -- 数据上传标识号。\n* kwargs -- 其他可选参数，如下。\n    * limit(integer) -- 限制响应中返回的记录个数。取值范围：0-1000，默认1000。\n    * part_number_marker(string) -- 分块号的界限，只有更大的分块号会被列出来。\n\n返回值举例\n\n::\n\n    {\n        \"x_nos_request_id\": \"17b21e42ac11000001390ab891440240\",\n        \"response\": xml.etree.ElementTree()    # xml.etree.ElementTree类型对象\n    }\n\n返回值的`response`的字符形式可能如下：\n\n::\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <ListPartsResult xmlns=\" \">\n        <Bucket>example-Bucket</Bucket>\n        <Key>example-Object</Key>\n        <UploadId>23r54i252358235332523f23 </UploadId>\n        <Owner>\n                <ID>75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a</ID>\n                <DisplayName>someName</DisplayName>\n        </Owner>\n        <StorageClass>STANDARD</StorageClass>\n        <PartNumberMarker>1</PartNumberMarker>\n        <NextPartNumberMarker>3</NextPartNumberMarker>\n        <MaxParts>2</MaxParts>\n        <IsTruncated>true</IsTruncated>\n        <Part>\n                <PartNumber>2</PartNumber>\n                <LastModified>2010-11-10T20:48:34.000Z</LastModified>\n                <ETag>\"7778aef83f66abc1fa1e8477f296d394\"</ETag>\n                <Size>10485760</Size>\n        </Part>\n        <Part>\n                <PartNumber>3</PartNumber>\n                <LastModified>2010-11-10T20:48:33.000Z</LastModified>\n                <ETag>\"aaaa18db4cc2f85cedef654fccc4a4x8\"</ETag>\n                <Size>10485760</Size>\n        </Part>\n    </ListPartsResult>\n\n*注意：下列各项通过xml.etree.ElementTree的成员函数获取具体值时，得到的均为字符串；目前标注的类型为原类型名称，需自行转换。*\n\n.. list-table::\n    :widths: 10 30\n    :header-rows: 1\n\n    * - 元素\n      - 描述\n    * - ListPartsResult\n      - | 列出已上传块信息\n        | 类型：容器\n        | 子节点：Bucket、Key、UploadId、Owner、StorageClass、PartNumberMarker、NextPartNumberMarker、MaxParts, IsTruncated、Part\n    * - Bucket\n      - | 桶的名称\n        | 类型: String\n        | 父节点: ListPartsResult\n    * - Key\n      - | 对象的Key\n        | 类型: String\n        | 父节点: ListPartsResult\n    * - UploadId\n      - | 分块上传操作的ID\n        | 类型: String\n        | 父节点: ListPartsResult\n    * - ID\n      - | 对象拥有者的ID\n        | 类型: String\n        | 父节点: Owner\n    * - DisplayName\n      - | 对象的拥有者.\n        | 类型: String\n        | 父节点: Owner\n    * - Owner\n      - | 桶拥有者的信息\n        | 子节点：ID, DisplayName\n        | 类型: 容器\n        | 父节点: ListPartsResult\n    * - StorageClass\n      - | 存储级别.\n        | 类型: String\n        | 父节点: ListPartsResult\n    * - PartNumberMarker\n      - | 上次List操作后的Part number\n        | 类型: Integer\n        | 父节点: ListPartsResult\n    * - NextPartNumberMarker\n      - | 作为后续List操作的part-number-marker\n        | 类型: Integer\n        | 父节点: ListPartsResult\n    * - MaxParts\n      - | 响应允许返回的的最大part数目\n        | 类型: Integer\n        | 父节点: ListPartsResult\n    * - IsTruncated\n      - | 是否截断，如果因为设置了limit导致不是所有的数据集都返回了，则该值设置为true\n        | 类型: Boolean\n        | 父节点: ListPartsResult\n    * - Part\n      - | 列出相关part信息\n        | 子节点:PartNumber, LastModified, ETag, Size\n        | 类型: String\n        | 父节点: ListPartsResult\n    * - PartNumber\n      - | 识别特定part的一串数字\n        | 类型: Integer\n        | 父节点: Part\n    * - LastModified\n      - | 该part上传的时间\n        | 类型: Date\n        | 父节点: Part\n    * - ETag\n      - | 当该part被上传时返回\n        | 类型: String\n        | 父节点: Part\n    * - Size\n      - | 已上传的 part数据的大小.\n        | 类型: Integer\n        | 父节点: Part\n\n返回值说明\n返回值为字典类型\n\n* x_nos_request_id(string) -- 唯一定位一个请求的ID号。\n* response(xml.etree.ElementTree) -- 包含返回信息的xml对象。\n\n\nList Multipart Uploads\n::::::::::::::::::::::\n\n使用举例：\n\n::\n\n    resp = client.list_multipart_uploads(\n        bucket=\"string\",\n        **kwargs\n    )\n\n参数说明\n\n* bucket(string) -- 桶名。\n* kwargs -- 其他可选参数，如下。\n    * limit(integer) -- 限制响应中返回的记录个数。取值范围：0-1000，默认1000。\n    * key_marker(string) -- 指定某一uploads key，只有大于该key-marker的才会被列出。\n\n返回值举例\n\n::\n\n    {\n        \"x_nos_request_id\": \"17b21e42ac11000001390ab891440240\",\n        \"response\": xml.etree.ElementTree()    # xml.etree.ElementTree类型对象\n    }\n\n返回值的`response`的字符形式可能如下：\n\n::\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <ListMultipartUploadsResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\n        <Bucket>Bucket</Bucket>\n        <NextKeyMarker>my-movie.m2ts</NextKeyMarker>\n        <Upload>\n            <Key>my-divisor</Key>\n            <UploadId>XMgbGlrZSBlbHZpbmcncyBub3QgaGF2aW5nIG11Y2ggbHVjaw</UploadId>\n            <Owner>\n                <ID>75aa57f09aa0c8caeab4f8c24e99d10f8e7faeebf76c078efc7c6caea54ba06a</ID>\n                <DisplayName>OwnerDisplayName</DisplayName>\n            </Owner>\n            <StorageClass>STANDARD</StorageClass>\n        </Upload>\n        <Upload>\n            <Key>my-movie.m2ts</Key>\n            <UploadId>VXBsb2FkIElEIGZvciBlbHZpbcyBteS1tb3ZpZS5tMnRzIHVwbG9hZA</UploadId>\n            <Owner>\n                <ID>b1d16700c70b0b05597d7acd6a3f92be</ID>\n                <DisplayName>OwnerDisplayName</DisplayName>\n            </Owner>\n            <StorageClass>STANDARD</StorageClass>\n        </Upload>\n    </ListMultipartUploadsResult>\n\n*注意：下列各项通过xml.etree.ElementTree的成员函数获取具体值时，得到的均为字符串；目前标注的类型为原类型名称，需自行转换。*\n\n.. list-table::\n    :widths: 10 30\n    :header-rows: 1\n\n    * - 元素\n      - 描述\n    * - ListMultipartUploadsResult\n      - | 响应容器元素\n        | 类型：容器\n        | 子节点：Bucket，KeyMarker，Upload，NextKeyMarker, owner\n    * - Bucket\n      - | 对象的桶\n        | 类型：字符串\n        | 父节点：ListMultipartUploadsResult\n    * - NextKeyMarker\n      - | 作为后续查询的key-marker\n        | 类型：String\n        | 父节点：ListMultipartUploadsResult\n    * - IsTruncated\n      - | 是否截断，如果因为设置了limit导致不是所有的数据集都返回了，则该值设置为true\n        | 类型:Boolean\n        | 父节点: ListMultipartUploadsResult\n    * - Upload\n      - | 类型：容器\n        | 子节点：Key，UploadId\n        | 父节点：ListMultipartUploadsResult\n    * - Key\n      - | 对象的Key\n        | 类型：字符串\n        | 父节点：Upload\n    * - UploadId\n      - | 分块上传操作的ID\n        | 类型String\n        | 父节点：Upload\n    * - ID\n      - | 对象拥有者的ID\n        | 类型: String\n        | 父节点: Owner\n    * - DisplayName\n      - | 对象的拥有者\n        | 类型: String\n        | 父节点: Owner\n    * - Owner\n      - | 桶拥有者的信息\n        | 类型：容器\n        | 子节点：DisplayName|ID\n        | 父节点：Upload\n    * - StorageClass\n      - | 存储级别\n        | 类型: String\n        | 父节点: Upload\n    * - Initiated\n      - | 该分块上传操作被初始化的时间\n        | 类型:Date\n        | 父节点: Upload\n    * - ListMultipartUploadsResult.Prefix\n      - | 当请求中包含了prefix参数时，响应中会填充这一prefix\n        | 类型:String\n        | 父节点: ListMultipartUploadsResult\n\n返回值说明\n返回值为字典类型\n\n* x_nos_request_id(string) -- 唯一定位一个请求的ID号。\n* response(xml.etree.ElementTree) -- 包含返回信息的xml对象。\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://c.163.com/",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eventlet-nos-python-sdk",
    "package_url": "https://pypi.org/project/eventlet-nos-python-sdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/eventlet-nos-python-sdk/",
    "project_urls": {
      "Homepage": "https://c.163.com/"
    },
    "release_url": "https://pypi.org/project/eventlet-nos-python-sdk/1.0.4/",
    "requires_dist": [
      "urllib3 (<2.0,>=1.8)",
      "eventlet (<=0.27.0)",
      "certifi"
    ],
    "requires_python": "",
    "summary": "NetEase Object Storage SDK",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10217198,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a429dc9f3a5dde5cdd6cf1050fa3c6e6c976c07d56ab7c1f7af93bc014cc4326",
          "md5": "412fab330b386306df7ef398bc48e80d",
          "sha256": "816468ff74c09a042984e331363012ecfbd2c5bfa28964ba2cb2743afb29fe45"
        },
        "downloads": -1,
        "filename": "eventlet_nos_python_sdk-1.0.4-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "412fab330b386306df7ef398bc48e80d",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 22843,
        "upload_time": "2021-04-30T07:51:47",
        "upload_time_iso_8601": "2021-04-30T07:51:47.912205Z",
        "url": "https://files.pythonhosted.org/packages/a4/29/dc9f3a5dde5cdd6cf1050fa3c6e6c976c07d56ab7c1f7af93bc014cc4326/eventlet_nos_python_sdk-1.0.4-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26199b7e0ff3bd51c4f3c25e29c2f524b456561ba538a9b3162ee7c44f3b418e",
          "md5": "cc640692ee2e3e116e2cc7a8874eac17",
          "sha256": "b7e53552137d335d4e33e246f9ecef3f2ea7527fb9f0d6cb91fa1299cbd76cfa"
        },
        "downloads": -1,
        "filename": "eventlet-nos-python-sdk-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "cc640692ee2e3e116e2cc7a8874eac17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 41193,
        "upload_time": "2021-04-30T07:51:52",
        "upload_time_iso_8601": "2021-04-30T07:51:52.711417Z",
        "url": "https://files.pythonhosted.org/packages/26/19/9b7e0ff3bd51c4f3c25e29c2f524b456561ba538a9b3162ee7c44f3b418e/eventlet-nos-python-sdk-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a429dc9f3a5dde5cdd6cf1050fa3c6e6c976c07d56ab7c1f7af93bc014cc4326",
        "md5": "412fab330b386306df7ef398bc48e80d",
        "sha256": "816468ff74c09a042984e331363012ecfbd2c5bfa28964ba2cb2743afb29fe45"
      },
      "downloads": -1,
      "filename": "eventlet_nos_python_sdk-1.0.4-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "412fab330b386306df7ef398bc48e80d",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 22843,
      "upload_time": "2021-04-30T07:51:47",
      "upload_time_iso_8601": "2021-04-30T07:51:47.912205Z",
      "url": "https://files.pythonhosted.org/packages/a4/29/dc9f3a5dde5cdd6cf1050fa3c6e6c976c07d56ab7c1f7af93bc014cc4326/eventlet_nos_python_sdk-1.0.4-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26199b7e0ff3bd51c4f3c25e29c2f524b456561ba538a9b3162ee7c44f3b418e",
        "md5": "cc640692ee2e3e116e2cc7a8874eac17",
        "sha256": "b7e53552137d335d4e33e246f9ecef3f2ea7527fb9f0d6cb91fa1299cbd76cfa"
      },
      "downloads": -1,
      "filename": "eventlet-nos-python-sdk-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "cc640692ee2e3e116e2cc7a8874eac17",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 41193,
      "upload_time": "2021-04-30T07:51:52",
      "upload_time_iso_8601": "2021-04-30T07:51:52.711417Z",
      "url": "https://files.pythonhosted.org/packages/26/19/9b7e0ff3bd51c4f3c25e29c2f524b456561ba538a9b3162ee7c44f3b418e/eventlet-nos-python-sdk-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}