{
  "info": {
    "author": "Michael Aichmueller",
    "author_email": "m.aichmueller@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "| OS        |  Status |\n| :-------------: |:-------------:|\n| Linux       | ![L Py 3.7 - 3.9](https://github.com/maichmueller/scm/workflows/L%20Py%203.7%20-%203.9/badge.svg)    |\n| Windows | ![W Py 3.7 - 3.9](https://github.com/maichmueller/scm/workflows/W%20Py%203.7%20-%203.9/badge.svg) |\n| Mac | ![M Py 3.7 - 3.9](https://github.com/maichmueller/scm/workflows/M%20Py%203.7%20-%203.9/badge.svg) |\n\nA Python package implementing Structural Causal Models (SCM).\n\nThe library uses the CAS library [SymPy](https://github.com/sympy/sympy) to allow the user to state arbitrary assignment functions and noise distributions as supported by SymPy and builds the DAG with [networkx](https://github.com/networkx/networkx).\n\nIt supports the features:\n  - Sampling\n  - Intervening\n  - Plotting\n  - Printing\n\n and by extension all methods on a DAG provided by networkx after accessing the member variable dag\n\n# Installation\nEither install via pip\n```\npip install scmodels\n```\nor via cloning the repository and running the setup.py file\n```\ngit clone https://github.com/maichmueller/scm\ncd scm\npython setup.py install\n```\n\n# Building an SCM\n\nTo build the DAG\n\n![X \\rightarrow Y \\leftarrow Z \\rightarrow X](https://latex.codecogs.com/svg.latex?&space;X{\\rightarrow}{Y}{\\leftarrow}{Z}{\\rightarrow}X)\n\n\nwith the assignments\n\n![Z ~ LogLogistic(alpha=1, beta=1)](https://latex.codecogs.com/svg.latex?&space;Z\\sim\\text{LogLogistic}(\\alpha=1,\\beta=1)])\n\n![X = 3Z^2{\\cdot}N](https://latex.codecogs.com/svg.latex?&space;X={3Z^2}{\\cdot}N\\quad[N=\\text{LogNormal}(\\mu=1,\\sigma=1)])\n\n![Y = 2Z + \\sqrt{X} + N](https://latex.codecogs.com/svg.latex?&space;Y=2Z+\\sqrt{X}+N\\quad[N=\\text{Normal}(\\mu=2,\\sigma=1)])\n\nThere are 3 different ways of declaring the SCM:\n\n## 1. List Of Strings\nDescribe the assignments as strings of the form:\n\n'VAR = FUNC(Noise, parent1, parent2, ...), Noise ~ DistributionXYZ'\n\nNote that - out of convenience - in this case, one does not need to (and isn't allowed to)\nrestate the noise symbol string in the distribution (as would otherwise be necessary\nin constructing sympy distributions).\n\n\n```python\nfrom scmodels import SCM\n\nassignment_seq = [\n    \"Z = M, M ~ LogLogistic(alpha=1, beta=1)\",\n    \"X = N * 3 * Z ** 2, N ~ LogNormal(mean=1, std=1)\",\n    \"Y = P + 2 * Z + sqrt(X), P ~ Normal(mean=2, std=1)\"\n]\n\nmyscm = SCM(assignment_seq)\n```\n\nAgreements:\n- The name of the noise variable in the distribution specification\n(e.g. `P ~ Normal(mean=2, std=1)`) has to align with the noise variable\nname (`P`) of the assignment string.\n\n## 2. Assignment Map\n\nOne can construct the SCM via an assignment map with the variables as keys\nand a tuple defining the assignment and the noise.\n\n### 2-Tuple: Assignments via SymPy parsing\n\nTo refer to SymPy's string parsing capability (this includes numpy functions) provide a dict entry\nwith a 2-tuple as value of the form:\n\n`'var': ('assignment string', noise)`\n\n\n\n\n```python\nfrom sympy.stats import LogLogistic, LogNormal, Normal\n\n\nassignment_map = {\n   \"Z\": (\n       \"M\",\n       LogLogistic(\"M\", alpha=1, beta=1)\n   ),\n   \"X\": (\n       \"N * 3 * Z ** 2\",\n       LogNormal(\"N\", mean=1, std=1),\n   ),\n   \"Y\": (\n       \"P + 2 * Z + sqrt(X)\",\n       Normal(\"P\", mean=2, std=1),\n   ),\n}\n\nmyscm2 = SCM(assignment_map)\n```\n\nAgreements:\n- the name of the noise distribution provided in its constructor\n(e.g. `Normal(\"N\", mean=2, std=1)`) has to align with the noise variable\nname (`N`) of the assignment string.\n\n### 3-Tuple: Assignments with arbitrary callables\n\nOne can also declare the SCM via specifying the variable assignment in a dictionary with the\nvariables as keys and as values a sequence of length 3 of the form:\n\n`'var': (['parent1', 'parent2', ...], Callable, Noise)`\n\nThis allows the user to supply complex functions outside the space of analytical functions.\n\n\n```python\nimport numpy as np\n\n\ndef Y_assignment(p, z, x):\n    return p + 2 * z + np.sqrt(x)\n\n\nfunctional_map = {\n   \"Z\": (\n       [],\n       lambda m: m,\n       LogLogistic(\"M\", alpha=1, beta=1)\n   ),\n   \"X\": (\n       [\"Z\"],\n       lambda n, z: n * 3 * z ** 2,\n       LogNormal(\"N\", mean=1, std=1),\n   ),\n   \"Y\": (\n       [\"Z\", \"X\"],\n       Y_assignment,\n       Normal(\"P\", mean=2, std=1),\n   ),\n}\n\nmyscm3 = SCM(functional_map)\n```\n\nAgreements:\n- The callable's first parameter MUST be the noise input (unless the noise distribution is `None`).\n- The order of variables in the parents list determines the semantic order of input for parameters in the functional\n(left to right).\n\n# Features\n\n## Prettyprint\n\nThe SCM supports a form of informative printing of its current setup,\nwhich includes mentioning active interventions and the assignments.\n\n\n```python\nprint(myscm)\n```\n\n    Structural Causal Model of 3 variables: Z, X, Y\n    Variables with active interventions: []\n    Assignments:\n    Z := f(M) = M\t [ M ~ LogLogistic(alpha=1, beta=1) ]\n    X := f(N, Z) = N * 3 * Z ** 2\t [ N ~ LogNormal(mean=1, std=1) ]\n    Y := f(P, Z, X) = P + 2 * Z + sqrt(X)\t [ P ~ Normal(mean=2, std=1) ]\n\n\nIn the case of custom callable assignments, the output is less informative\n\n\n```python\nprint(myscm3)\n```\n\n    Structural Causal Model of 3 variables: Z, X, Y\n    Variables with active interventions: []\n    Assignments:\n    Z := f(M) = __unknown__\t [ M ~ LogLogistic(alpha=1, beta=1) ]\n    X := f(N, Z) = __unknown__\t [ N ~ LogNormal(mean=1, std=1) ]\n    Y := f(P, Z, X) = __unknown__\t [ P ~ Normal(mean=2, std=1) ]\n\n\n## Interventions\nOne can easily perform interventions on the variables,\ne.g. a Do-intervention or also general interventions, which remodel the connections, assignments, and noise distributions.\nFor general interventions, the passing structure is dict of the following form:\n\n    {var: (New Parents (Optional), New Assignment (optional), New Noise (optional))}\n\nAny part of the original variable state, that is meant to be left unchanged, has to be passed as `None`.\nE.g. to assign a new callable assignment to variable `X` without changing parents or noise, one would call:\n\n\n```python\nmy_new_callable = lambda n, z: n + z\n\nmyscm.intervention({\"X\": (None, my_new_callable, None)})\n```\n\nFor the example of the do-intervention ![\\text{do}(X=1=)](https://latex.codecogs.com/svg.latex?&space;\\text{do}(X=1)),\none can use the helper method `do_intervention`. The pendant for noise interventions is called `soft_intervention`:\n\n\n```python\nmyscm.do_intervention([(\"X\", 1)])\n\nfrom sympy.stats import FiniteRV\n\nmyscm.soft_intervention([(\"X\", FiniteRV(str(myscm[\"X\"].noise), density={-1: .5, 1: .5}))])\n```\n\nCalling `undo_intervention` restores the original state of all variables from construction time, that have been passed. One can optionally specify,\nIf no variables are specified (`variables=None`), all interventions are undone.\n\n\n```python\nmyscm.undo_intervention(variables=[\"X\"])\n```\n\n## Sampling\n\nThe SCM allows drawing as many samples as needed through the method `myscm.sample(n)`.\n\n\n```python\nn = 5\nmyscm.sample(n)\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Z</th>\n      <th>X</th>\n      <th>Y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3.130168</td>\n      <td>25.518928</td>\n      <td>13.524461</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.730453</td>\n      <td>6.036398</td>\n      <td>7.148895</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.179568</td>\n      <td>0.156701</td>\n      <td>3.149104</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.879909</td>\n      <td>6.787311</td>\n      <td>6.056273</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.710136</td>\n      <td>20.079351</td>\n      <td>8.894617</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nIf infinite sampling is desired, one can also receive a sampling generator through\n\n\n```python\ncontainer = {var: [] for var in myscm}\nsampler = myscm.sample_iter(container)\n```\n\n`container` is an optional target dictionary to store the computed samples in.\n\n\n```python\nimport pandas as pd\n\nfor i in range(n):\n    next(sampler)\n\npd.DataFrame.from_dict(container)\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Z</th>\n      <th>X</th>\n      <th>Y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.341271</td>\n      <td>1.271099</td>\n      <td>4.547078</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.722751</td>\n      <td>235.765034</td>\n      <td>22.591202</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.081638</td>\n      <td>0.107539</td>\n      <td>3.898544</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2.745713</td>\n      <td>210.743838</td>\n      <td>21.806575</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1.528015</td>\n      <td>9.768679</td>\n      <td>9.058807</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nIf the target container is not provided, the generator returns a new `dict` for every sample.\n\n\n```python\nsample = next(myscm.sample_iter())\npd.DataFrame.from_dict(sample)\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Z</th>\n      <th>X</th>\n      <th>Y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.399457</td>\n      <td>3.369994</td>\n      <td>6.946475</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## Plotting\nIf you have graphviz installed, you can plot the DAG by calling\n\n```python\nmyscm.plot(node_size=1000, alpha=1)\n```\n\n![example_plot](https://github.com/maichmueller/scm/blob/master/docs/images/example_plot.png)\n\n\n```python\n\n```\n\n\nNo history capture as of yet.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/maichmueller/scmodels",
    "keywords": "bayesian graphs scm sem fcm causal graphical models causality",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scmodels",
    "package_url": "https://pypi.org/project/scmodels/",
    "platform": "",
    "project_url": "https://pypi.org/project/scmodels/",
    "project_urls": {
      "Homepage": "https://github.com/maichmueller/scmodels"
    },
    "release_url": "https://pypi.org/project/scmodels/0.2/",
    "requires_dist": [
      "sympy (>=1.7.1)",
      "networkx (>=2.0)",
      "pandas (>=1.0)",
      "scipy (>=1.3)",
      "numpy (>=1.19)",
      "matplotlib (>=3.0)",
      "pygraphviz ; extra == 'plot'",
      "graphviz ; extra == 'plot'",
      "pytest ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Structural Causal Models",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9142935,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c1f0f4c0397ace4d6010ae65d66a07ae5e2ed2f15295158fa529d5735e41c11",
          "md5": "f30cde714966b1265309ec074a253567",
          "sha256": "12ecdbed708ac31085604dbd328d3b1158ec6c6ebd37db8e9683e0f7f46cc41a"
        },
        "downloads": -1,
        "filename": "scmodels-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f30cde714966b1265309ec074a253567",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16090,
        "upload_time": "2020-12-15T20:28:38",
        "upload_time_iso_8601": "2020-12-15T20:28:38.030378Z",
        "url": "https://files.pythonhosted.org/packages/4c/1f/0f4c0397ace4d6010ae65d66a07ae5e2ed2f15295158fa529d5735e41c11/scmodels-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e61a1c831048e245d0e8156735150f5aa21bb6e90ed05e20d2abd42ddb01a93b",
          "md5": "cd2e21c3af4610aae0070b05d91ec95c",
          "sha256": "e0ac65f9ae0a56a20de6df2526bc2e46753cfee859109db6d3a70e768e07a7d6"
        },
        "downloads": -1,
        "filename": "scmodels-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cd2e21c3af4610aae0070b05d91ec95c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19209,
        "upload_time": "2020-12-15T20:28:39",
        "upload_time_iso_8601": "2020-12-15T20:28:39.289140Z",
        "url": "https://files.pythonhosted.org/packages/e6/1a/1c831048e245d0e8156735150f5aa21bb6e90ed05e20d2abd42ddb01a93b/scmodels-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2659bed964bf0d93087ab87d3fecd2cb5eb351821a996a41985911633be174d1",
          "md5": "0370c54483b461a75e13a6f0295aa87b",
          "sha256": "f04b8dea48d1e7134bc4a889c88590467b2298a4424cd53d1b837d34aa2dbb40"
        },
        "downloads": -1,
        "filename": "scmodels-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0370c54483b461a75e13a6f0295aa87b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16193,
        "upload_time": "2020-12-21T15:04:51",
        "upload_time_iso_8601": "2020-12-21T15:04:51.376694Z",
        "url": "https://files.pythonhosted.org/packages/26/59/bed964bf0d93087ab87d3fecd2cb5eb351821a996a41985911633be174d1/scmodels-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12c53d75879d3222ba905a65f8bd233be7b855fbd97021f346b60e4b2aa62147",
          "md5": "93816379796e30130da54e27ad692b4c",
          "sha256": "c58a079bf2740c26b0a9016890b34e5b1e88aef86e7d48e9c97a17b18d4ef2bc"
        },
        "downloads": -1,
        "filename": "scmodels-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "93816379796e30130da54e27ad692b4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19308,
        "upload_time": "2020-12-21T15:04:52",
        "upload_time_iso_8601": "2020-12-21T15:04:52.662782Z",
        "url": "https://files.pythonhosted.org/packages/12/c5/3d75879d3222ba905a65f8bd233be7b855fbd97021f346b60e4b2aa62147/scmodels-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "182d7d6eba66aa6377d65c834edc21a51af38520f308041e0b343da349178669",
          "md5": "147f7dcbb6893bac3d1137848af38610",
          "sha256": "4c3f0ec43322553cd8dbd1468246ffa56fb0c34ed8c651accef8747079d14e4d"
        },
        "downloads": -1,
        "filename": "scmodels-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "147f7dcbb6893bac3d1137848af38610",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18620,
        "upload_time": "2021-01-15T13:18:10",
        "upload_time_iso_8601": "2021-01-15T13:18:10.361143Z",
        "url": "https://files.pythonhosted.org/packages/18/2d/7d6eba66aa6377d65c834edc21a51af38520f308041e0b343da349178669/scmodels-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cd8766c8aca59b54e37d8437fb92773a473604e47a27cb08dfde838e6f9d998",
          "md5": "83102e4f2e8587e9c69b740bf28faa65",
          "sha256": "da2172a8078f6a4fcd6813cf55b551131150888f1341dea6cac1e57672fe1f0a"
        },
        "downloads": -1,
        "filename": "scmodels-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "83102e4f2e8587e9c69b740bf28faa65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23677,
        "upload_time": "2021-01-15T13:18:11",
        "upload_time_iso_8601": "2021-01-15T13:18:11.706039Z",
        "url": "https://files.pythonhosted.org/packages/1c/d8/766c8aca59b54e37d8437fb92773a473604e47a27cb08dfde838e6f9d998/scmodels-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "182d7d6eba66aa6377d65c834edc21a51af38520f308041e0b343da349178669",
        "md5": "147f7dcbb6893bac3d1137848af38610",
        "sha256": "4c3f0ec43322553cd8dbd1468246ffa56fb0c34ed8c651accef8747079d14e4d"
      },
      "downloads": -1,
      "filename": "scmodels-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "147f7dcbb6893bac3d1137848af38610",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18620,
      "upload_time": "2021-01-15T13:18:10",
      "upload_time_iso_8601": "2021-01-15T13:18:10.361143Z",
      "url": "https://files.pythonhosted.org/packages/18/2d/7d6eba66aa6377d65c834edc21a51af38520f308041e0b343da349178669/scmodels-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1cd8766c8aca59b54e37d8437fb92773a473604e47a27cb08dfde838e6f9d998",
        "md5": "83102e4f2e8587e9c69b740bf28faa65",
        "sha256": "da2172a8078f6a4fcd6813cf55b551131150888f1341dea6cac1e57672fe1f0a"
      },
      "downloads": -1,
      "filename": "scmodels-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "83102e4f2e8587e9c69b740bf28faa65",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 23677,
      "upload_time": "2021-01-15T13:18:11",
      "upload_time_iso_8601": "2021-01-15T13:18:11.706039Z",
      "url": "https://files.pythonhosted.org/packages/1c/d8/766c8aca59b54e37d8437fb92773a473604e47a27cb08dfde838e6f9d998/scmodels-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}