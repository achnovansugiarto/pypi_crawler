{
  "info": {
    "author": "Lianfa Li",
    "author_email": "lspatial@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Library of Geographic Graph Hybrid Network (geographnet)\n\nThe python library of geographic graph hybrid network with attention layers (geographnet). \nCurrent version just supports the PyTorch package of deep geometric learning and \nwill extend to the others in the future. This package is for the paper, \n`\"Geographic Graph Hybrid Network for Robust Inversion of Particular Matters\"` to be published \nin Remote Sensing  \n\n## Major modules\n\n**Model**\n\n* GEOGCon: Function of geographic graph convolution. \n* knnd_geograph: function of knn to support the output of spatial or spatiotemporal weights.\n* knngeo: function to retrieve the nearest neighbors with the distance values.  \n* GeoGraphPNet: Geographic Graph Hybrid Network for prediction of PM2.5 and PM10. \n            (multilevel geographic graph convolutions plus full residual deep network).\n* DataSamplingDSited: Using distance-weighted kdd to sample the data to get the network \n            topology and the corresponding sample data. \n* WNeighborSampler: Function of using distance-weighted kdd to obtain the mini-batch data  \n                    to train and test geographic graph hybrid network.\n\n**Helper functions**\n* train: Training function of geographic graph hybrid network for PM2.5 and PM10.\n* test: Testing function of the trained geographic graph hybrid network for PM2.5 and PM10. \n\n\n## Installation\nYou can directly install it using the following command for the latest version:\n```\n  pip install geographnet\n```\n\n## Note for installation and use \n\n**Runtime requirements**\n\ngeographnet requires installation of PyTorch with support of  PyG (PyTorch Geometric). \nAlso Pandas and Numpy should be installed. \n\n## Use case \nThe package provides one example for use of geographic graph hybrid network to predict PM2.5 and PM10 in mainland China.\nSee the following example. \n\n## License\n\nThe geographnet is provided under a MIT license that can be found in the LICENSE\nfile. By using, distributing, or contributing to this project, you agree to the\nterms and conditions of this license.\n\n## Test call\n\n**Load the packages**\n```python\nimport pandas as pd\nimport numpy as np\nimport torch\nimport gc\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nimport urllib\nimport tarfile\n\nfrom geographnet.model.wdatasampling import DataSamplingDSited\nfrom geographnet.model.wsampler import WNeighborSampler\nfrom geographnet.traintest_pm import train, test\nfrom geographnet.model.geographpnet import GeoGraphPNet\n```\n\n**Helper function for site-based independent test and downloading \n```python\ndef selectSites(datain):\n    sitesDF = datain.drop_duplicates('id').copy()\n    sgrp = sitesDF['stratified_flag'].value_counts()\n    sitesDF['stratified_flag_cnt'] = sgrp.loc[sitesDF['stratified_flag']].values\n    pos1_index = np.where(sitesDF['stratified_flag_cnt'] < 5)[0]\n    posT_index = np.where(sitesDF['stratified_flag_cnt'] >= 5)[0]\n    np.random.seed()\n    trainsiteIndex, testsiteIndex = train_test_split(posT_index, stratify=sitesDF.iloc[posT_index]['stratified_flag'],\n                                                     test_size=0.15)\n    selsites = sitesDF.iloc[testsiteIndex]['id']\n    trainsitesIndex = np.where(~datain['id'].isin(selsites))[0]\n    indTestsitesIndex = np.where(datain['id'].isin(selsites))[0]\n    return trainsitesIndex,indTestsitesIndex\n\ndef untar(fname, dirs):\n    t = tarfile.open(fname)\n    t.extractall(path = dirs)\n```\n**Download and extract the sample dataset**\n\nYou can download the sample data from https://github.com/lspatial/geographnetdata. \n```python\nurl = 'https://github.com/lspatial/geographnetdata/raw/master/pmdatain.pkl.tar.gz'\ntarfl='./pmdatain.pkl.tar.gz'\nprint(\"Downloading from \"+url+' ... ...')\nurllib.request.urlretrieve(url, tarfl)\ntarget='.'\nuntar(tarfl,target)\n```\n\n**Read and preprocess the data** \n```python\ntargetFl=target+'/pmdatain.pkl'\ndatatar=pd.read_pickle(targetFl)\nprint(datatar.columns,datatar.shape)\ncovs=['idate','lat', 'lon', 'latlon', 'DOY', 'dem', 'OVP10_TOTEXTTAU', 'OVP14_TOTEXTTAU',\n       'TOTEXTTAU', 'glnaswind', 'maiacaod', 'o3', 'pblh', 'prs', 'rhu', 'tem',\n       'win', 'GAE', 'NO2_BOT', 'NO_BOT', 'PM25_BOT', 'PM_BOT', 'OVP10_CO',\n       'OVP10_GOCART_SO2_VMR', 'OVP10_NO', 'OVP10_NO2', 'OVP10_O3', 'BCSMASS',\n       'DMSSMASS', 'DUSMASS25', 'HNO3SMASS', 'NISMASS25', 'OCSMASS', 'PM25',\n       'SO2SMASS', 'SSSMASS25', 'sdist_roads', 'sdist_poi', 'parea10km',\n       'rlen10km', 'wstag', 'wmix', 'CLOUD', 'MYD13C1.NDVI',\n       'MYD13C1.EVI', 'MOD13C1.NDVI', 'MOD13C1.EVI', 'is_workday', 'OMI-NO2']\ntarget=['PM10_24h', 'PM2.5_24h']\nX = datatar[covs].values\nscX = preprocessing.StandardScaler().fit(X)\nXn = scX.transform(X)\ny = datatar[['pm25_log','pm10_log']].values\nypm25 = datatar['PM2.5_24h'].values\nypm10 = datatar['PM10_24h'].values\nscy = preprocessing.StandardScaler().fit(y)\nyn = scy.transform(y)\n```\n\n**Sampling**\n```python\ntarcols=[i for i in range(len(covs))]\ntrainsitesIndex=[i for i in range(datatar.shape[0])]\ntrainsitesIndex, indTestsitesIndex=selectSites(datatar)\nx, edge_index,edge_dist, y, train_index, test_index = DataSamplingDSited(Xn[:,tarcols], yn, [0,1,2], 12,\n                        trainsitesIndex ,datatar)\nXn = Xn[:, 1:]\nedge_weight=1.0/(edge_dist+0.00001)\nneighbors=[12,12,12,12]\ntrain_loader = WNeighborSampler(edge_index, edge_weight= edge_weight,node_idx=train_index,\n                               sizes=neighbors, batch_size=2048, shuffle=True,\n                               num_workers=20 )\nx_index = torch.LongTensor([i for i in range(Xn.shape[0])])\nx_loader = WNeighborSampler(edge_index, edge_weight= edge_weight,node_idx=x_index,\n                           sizes=neighbors, batch_size=2048, shuffle=False,\n                           num_workers=20 )\n```\n**Definition of the model and parameters**\n```python\ngpu=0\nif gpu is None:\n    device = torch.device('cpu')\nelse:\n    device = torch.device('cuda:'+str(gpu))\nnout=2\nresnodes = [512, 320, 256, 128, 96, 64, 32, 16]\n# 0: original; 1: concated ; 2: dense; 3: only gcn\ngcnnhiddens = [128,64,32]\nmodel = GeoGraphPNet(x.shape[1], gcnnhiddens, nout, len(neighbors), resnodes, weightedmean=True,gcnout=nout,nattlayer=1)\nmodel = model.to(device)\nx = x.to(device)\nedge_index = edge_index.to(device)\ny = y.to(device)\ninit_lr=0.01\noptimizer = torch.optim.Adam(model.parameters(), lr=init_lr)\nbest_indtest_r2 = -9999\nbest_indtest_r2_pm10=-9999\nscheduler=torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer,mode='min')\noldlr=newlr=init_lr\n```\n\n**Model training**\n```python\nepoch=0\nnepoch=5\ntrpath=\"./test\"\nwhile epoch< nepoch  :\n    # adjust_lr(optimizer, epoch, init_lr)\n    print('Conducting ',epoch, ' of ',nepoch,' for PM  ... ...')\n    loss,loss_pm25,loss_pm10,loss_rel = train(model, train_loader, device, optimizer, x, y)\n    try:\n       permetrics,lossinf,testdata= test(model, x_loader, device, x, y, scy,train_index,\n                         test_index, indtest_index=indTestsitesIndex,\n                         ypm25=ypm25 ,ypm10=ypm10)\n       lossall, lossall_pm25, lossall_pm10, lossall_rel = lossinf\n       pmindtesting, pmtesting, pmtrain=testdata\n    except:\n        print(\"Wrong loop for ecpoch \"+str(epoch)+ \", continue ... ...\")\n        epoch=epoch+1\n        continue\n    permetrics_pm25 = permetrics[permetrics['pol'] == 'pm2.5']\n    permetrics_pm10 = permetrics[permetrics['pol'] == 'pm10']\n    permetrics_pm25=permetrics_pm25.iloc[0]\n    permetrics_pm10 = permetrics_pm10.iloc[0]\n    if epoch>15 and permetrics_pm25['train_r2']<0 :\n        print(\"Abnormal for ecpoch \" + str(epoch) + \", continue ... ...\")\n        epoch = epoch + 1\n        continue\n    if best_indtest_r2 < permetrics_pm25['indtest_r2']:\n        best_indtest_r2 = permetrics_pm25['indtest_r2']\n        saveDf = pd.DataFrame({'sid': datatar.iloc[test_index]['sid'].values, 'obs': pmtesting['pm25_obs'].values,\n                               'pre': pmtesting['pm25_pre'].values})\n        saveindDf = pd.DataFrame({'sid': datatar.iloc[indTestsitesIndex]['sid'].values, 'obs': pmindtesting['pm25_obs'].values,\n             'pre': pmindtesting['pm25_pre'].values})\n        testfl = trpath + '/model_pm25_bestindtest_testdata.csv'\n        saveDf.to_csv(testfl,index_label='index')\n        indtestfl = trpath + '/model_pm25_bestindtest_indtestdata.csv'\n        saveindDf.to_csv(indtestfl, index_label='index')\n        modelFl = trpath + '/model_pm25_bestindtestr2.tor'\n        torch.save(model, modelFl)\n        modelMeFl = trpath + '/model_pm25_bestindtestr2.csv'\n        pd.DataFrame([permetrics_pm25.to_dict()]).to_csv(modelMeFl, index_label='epoch')\n\n    if best_indtest_r2_pm10 < permetrics_pm10['indtest_r2']:\n        best_indtest_r2_pm10 = permetrics_pm10['indtest_r2']\n        saveDf = pd.DataFrame({'sid': datatar.iloc[test_index]['sid'].values, 'obs': pmtesting['pm10_obs'].values,\n                               'pre': pmtesting['pm10_pre'].values})\n        saveindDf = pd.DataFrame(\n            {'sid': datatar.iloc[indTestsitesIndex]['sid'].values, 'obs': pmindtesting['pm10_obs'].values,\n             'pre': pmindtesting['pm10_pre'].values})\n        testfl = trpath + '/model_pm10_bestindtest_testdata.csv'\n        saveDf.to_csv(testfl, index_label='index')\n        indtestfl = trpath + '/model_pm10s_bestindtest_indtestdata.csv'\n        saveindDf.to_csv(indtestfl, index_label='index')\n        modelFl = trpath + '/model_pm10_bestindtestr2.tor'\n        torch.save(model, modelFl)\n        modelMeFl = trpath + '/model_pm10_bestindtestr2.csv'\n        pd.DataFrame([permetrics_pm10.to_dict()]).to_csv(modelMeFl, index_label='epoch')\n    scheduler.step(loss)\n    newlr= optimizer.param_groups[0]['lr']\n    if newlr!=oldlr:\n        print('Learning rate is {} from {} '.format(newlr, oldlr))\n        oldlr=newlr\n    atrainDf=permetrics\n    atrainDf['epoch']=epoch\n    lossDf=pd.DataFrame({'epoch':epoch,'loss':loss, 'loss_pm25':loss_pm25,'loss_pm10':loss_pm10,\n                         'loss_rel':loss_rel,'lossall':lossall,'lossall_pm25':lossall_pm25,\n                         'lossall_pm10':lossall_pm10,'lossall_rel':lossall_rel},index=[epoch])\n    print(permetrics)\n    print(lossDf)\n    if epoch==0:\n        alltrainHist=atrainDf\n        alllostinfo=lossDf\n    else:\n        alltrainHist=alltrainHist.append(atrainDf)\n        alllostinfo = alllostinfo.append(lossDf)\n    epoch=epoch+1\n```\n\n**Save the results**\n```python\ntfl = trpath + '/trainHist.csv'\nalltrainHist.to_csv(tfl, header=True, index_label=\"row\")\ntfl = trpath + '/ftrain_loss.csv'\nalllostinfo.to_csv(tfl, header=True, index_label=\"row\")\ndel optimizer, x, edge_index, y, train_index, test_index, model, alltrainHist\ngc.collect()\n```\n## Collaboration\n\nWelcome to contact Dr. Lianfa Li (Email: lspatial@gmail.com).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lspatial/geographnet",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "geographnet",
    "package_url": "https://pypi.org/project/geographnet/",
    "platform": "",
    "project_url": "https://pypi.org/project/geographnet/",
    "project_urls": {
      "Homepage": "https://github.com/lspatial/geographnet"
    },
    "release_url": "https://pypi.org/project/geographnet/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Library for Geographic Graph Hybrid Network",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11423462,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85b5a135855515494063c4db1bdd6dd7629cece2599fd28e7aa23aa6815c2513",
          "md5": "ba953b8b98d2cdc91c3d13b00c970ccb",
          "sha256": "a9c911ed0e462dbcebbb6d59063b9ebf1aded5a877bde15836afe8f03afb50bf"
        },
        "downloads": -1,
        "filename": "geographnet-0.1.0-py3.7.egg",
        "has_sig": false,
        "md5_digest": "ba953b8b98d2cdc91c3d13b00c970ccb",
        "packagetype": "bdist_egg",
        "python_version": "0.1.0",
        "requires_python": null,
        "size": 30874,
        "upload_time": "2021-09-11T09:12:01",
        "upload_time_iso_8601": "2021-09-11T09:12:01.034239Z",
        "url": "https://files.pythonhosted.org/packages/85/b5/a135855515494063c4db1bdd6dd7629cece2599fd28e7aa23aa6815c2513/geographnet-0.1.0-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdf04bd3cc94cec9cb88e70fe1a3a78655720ac92011f1230c9b9e967525e067",
          "md5": "0ee0cbeb34006549f16b08a0a0b55c4d",
          "sha256": "edef0dd9ac54974d8724b1013a3b5773840eb8aabd58f7b23fc3a25dbda2ab1d"
        },
        "downloads": -1,
        "filename": "geographnet-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0ee0cbeb34006549f16b08a0a0b55c4d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17726,
        "upload_time": "2021-09-11T09:12:03",
        "upload_time_iso_8601": "2021-09-11T09:12:03.389550Z",
        "url": "https://files.pythonhosted.org/packages/bd/f0/4bd3cc94cec9cb88e70fe1a3a78655720ac92011f1230c9b9e967525e067/geographnet-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb3cca88f65e252d23544c54ce8344210f172590a5329b03f572fba88849c4a1",
          "md5": "ce498109ffa6b9a8a510ed789cf5d397",
          "sha256": "fa696af33fa2020e1e3f92d80535d992ab79a529ca7f59d618c69f19c426932b"
        },
        "downloads": -1,
        "filename": "geographnet-0.1.1-py3.7.egg",
        "has_sig": false,
        "md5_digest": "ce498109ffa6b9a8a510ed789cf5d397",
        "packagetype": "bdist_egg",
        "python_version": "0.1.1",
        "requires_python": null,
        "size": 30890,
        "upload_time": "2021-09-11T10:24:38",
        "upload_time_iso_8601": "2021-09-11T10:24:38.793558Z",
        "url": "https://files.pythonhosted.org/packages/eb/3c/ca88f65e252d23544c54ce8344210f172590a5329b03f572fba88849c4a1/geographnet-0.1.1-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "763a9ce55d2283e823d1e5f1c4e4b30e722e1f662efa1217ca9b18a2ff9f6dda",
          "md5": "b0a611afe3f6539fbc3efb76809b06d8",
          "sha256": "e35656cff2d665a6fb2159fe381de10659cd39a50c0fde888034913a8efc3ee0"
        },
        "downloads": -1,
        "filename": "geographnet-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b0a611afe3f6539fbc3efb76809b06d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17767,
        "upload_time": "2021-09-11T10:24:41",
        "upload_time_iso_8601": "2021-09-11T10:24:41.043827Z",
        "url": "https://files.pythonhosted.org/packages/76/3a/9ce55d2283e823d1e5f1c4e4b30e722e1f662efa1217ca9b18a2ff9f6dda/geographnet-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb3cca88f65e252d23544c54ce8344210f172590a5329b03f572fba88849c4a1",
        "md5": "ce498109ffa6b9a8a510ed789cf5d397",
        "sha256": "fa696af33fa2020e1e3f92d80535d992ab79a529ca7f59d618c69f19c426932b"
      },
      "downloads": -1,
      "filename": "geographnet-0.1.1-py3.7.egg",
      "has_sig": false,
      "md5_digest": "ce498109ffa6b9a8a510ed789cf5d397",
      "packagetype": "bdist_egg",
      "python_version": "0.1.1",
      "requires_python": null,
      "size": 30890,
      "upload_time": "2021-09-11T10:24:38",
      "upload_time_iso_8601": "2021-09-11T10:24:38.793558Z",
      "url": "https://files.pythonhosted.org/packages/eb/3c/ca88f65e252d23544c54ce8344210f172590a5329b03f572fba88849c4a1/geographnet-0.1.1-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "763a9ce55d2283e823d1e5f1c4e4b30e722e1f662efa1217ca9b18a2ff9f6dda",
        "md5": "b0a611afe3f6539fbc3efb76809b06d8",
        "sha256": "e35656cff2d665a6fb2159fe381de10659cd39a50c0fde888034913a8efc3ee0"
      },
      "downloads": -1,
      "filename": "geographnet-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b0a611afe3f6539fbc3efb76809b06d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17767,
      "upload_time": "2021-09-11T10:24:41",
      "upload_time_iso_8601": "2021-09-11T10:24:41.043827Z",
      "url": "https://files.pythonhosted.org/packages/76/3a/9ce55d2283e823d1e5f1c4e4b30e722e1f662efa1217ca9b18a2ff9f6dda/geographnet-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}