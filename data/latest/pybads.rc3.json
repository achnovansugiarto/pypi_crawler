{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# PyBADS: Bayesian Adaptive Direct Search in Python\n\n## What is it?\n\nPyBads is a Python implementation of the Bayesian Adaptive Direct Search (BADS) algorithm for solving difficult and mildly expensive optimization problems, originally implemented [in MATLAB](https://github.com/lacerbi/bads). BADS has been intensively tested for fitting a variety of computational models, and is currently being used in many computational labs around the world (see [Google Scholar](https://scholar.google.co.uk/scholar?cites=7209174494000095753&as_sdt=2005&sciodt=0,5&hl=en) for many example applications).\n\nIn a benchmark with real model-fitting problems, BADS performed on par or better than many other common and state-of-the-art optimizers, as shown in the original paper presented at NeurIPS in 2017 [[1](#references-and-citation)].\n\nPyBADS requires no specific tuning and runs off-the-shelf like other Python optimizers (e.g., `scipy.optimize.minimize`).\n\n*Note*: If you are interested in estimating posterior distributions (i.e., uncertainty and error bars) over model parameters, and not just point estimates, you might also want to check out Variational Bayesian Monte Carlo for Python ([PyVBMC](https://github.com/acerbilab/pyvbmc)), a package for Bayesian posterior and model inference which can be used in synergy with PyBADS.\n\n## Documentation\n\nThe full documentation is available at: https://acerbilab.github.io/pybads/\n\n## When should I use PyBADS?\n\nBADS is effective when:\n\n- the objective function landscape is rough (nonsmooth), typically due to numerical approximations or noise;\n- the objective function is at least moderately expensive to compute (e.g., more than 0.1 second per function evaluation);\n- the gradient is unavailable (black-box function);\n- the number of input parameters is up to about `D = 20` or so.\n\n## Installation\n\nPyBADS is available via `pip` and `conda-forge`.\n\n1. Install with:\n    ```console\n    python -m pip install pybads\n    ```\n    or:\n    ```console\n    conda install --channel=conda-forge pybads\n    ```\n    PyBADS requires Python version 3.9 or newer.\n2. (Optional): Install Jupyter to view the example Notebooks. You can skip this step if you're working from a Conda environment which already has Jupyter, but be aware that if the wrong `jupyter` executable is found on your path then import errors may arise.\n   ```console\n   conda install jupyter\n   ```\n   If you are running Python 3.11 and get an `UnsatisfiableError` you may need to install Jupyter from `conda-forge`:\n   ```console\n   conda install --channel=conda-forge jupyter\n   ```\n   The example notebooks can then be accessed by running\n   ```console\n   python -m pybads\n   ```\n\nIf you wish to install directly from latest source code, please see the [instructions for developers and contributors](/docs/development.html#installation-instructions-for-developers).\n\n### Quick start\n\nThe typical workflow of PyBADS follows four steps:\n\n1. Define the target (or objective) function;\n2. Setup the problem configuration (optimization bounds, starting point, possible constraint violation function);\n3. Initialize and run the optimization;\n4. Examine and visualize the results.\n   \nRunning the optimizer in step 3 only involves a couple of lines of code:\n\n```\nfrom pybads import BADS\n# ...\nbads = BADS(target, x0, lb, ub, plb, pub)\noptimize_result = bads.optimize()\n```\n\nwith input arguments:\n\n- ``target``: the target function, it takes as input a vector and returns its function evaluation;\n- ``x0``: the starting point of the optimization problem. If it is not given, the starting point is randomly drawn from the problems bounds;\n- ``lb`` and ``ub``: hard lower and upper bounds for the optimization region (can be ``-inf`` and ``inf``, or bounded);\n- ``plb`` and ``pub``: *plausible* lower and upper bounds, that represent our best guess at bounding the region where the solution might lie;\n- ``non_box_cons`` (optional): a callable non-bound constraints function.\n\nThe outputs are:\n\n- ``optimize_result``: a ``OptimizeResult`` which presents relevant information about the solution and the optimization problem. In particular:\n  - ``\"x\"``: the minimum point found by the optimizer;\n  - ``\"fval\"``: the value of the function at the given solution.\n\nFor a full list and description of the entries of the ``optimize_result`` object, see the [OptimizeResult](https://acerbilab.github.io/pybads/api/classes/optimize_result.html) class documentation.\n\nExamples of usages of PyBADS are present in the directory `examples` of the repository, which provides a tutorial going from simpler to more complex problems, such as noisy targets (see [this example notebook](examples/pybads_example_3_noisy_objective.ipynb)).\n\nIn addition, checkout the [BADS FAQ](https://github.com/acerbilab/bads/wiki#bads-frequently-asked-questions) page for practical recommendations, such as how to set the bounds `LB` and `UB`, and other practical insights. Even though the FAQ refers to the MATLAB version of BADS, most of the concepts still apply to PyBADS.\n\n## Next steps\n\nOnce installed, example Jupyter notebooks can be found in the `pybads/examples` directory. They can also be [viewed statically](https://acerbilab.github.io/pybads/index.html#examples) on the [main documentation pages](https://acerbilab.github.io/pybads/index.html). These examples will walk you through the basic usage of PyBADS as well as some if its more advanced features.\n\nFor practical recommendations, such as how to set `lb` and `ub` and the plausible bounds, check out the FAQ on the [BADS wiki](https://github.com/acerbilab/bads/wiki). The wiki was written with the MATLAB toolbox in mind, but the general advice applies to the Python version as well.\n\n## How does it work?\n\nPyBADS/BADS follows a [mesh adaptive direct search](http://epubs.siam.org/doi/abs/10.1137/040603371) (MADS) procedure for function minimization that alternates **poll** steps and **search** steps (see **Fig 1**). \n\n- In the **poll** stage, points are evaluated on a mesh by taking steps in one direction at a time, until an improvement is found or all directions have been tried. The step size is doubled in case of success, halved otherwise. \n- In the **search** stage, a [Gaussian process](https://en.wikipedia.org/wiki/Gaussian_process) (GP) is fit to a (local) subset of the points evaluated so far. Then, we iteratively choose points to evaluate according to a *lower confidence bound* strategy that trades off between exploration of uncertain regions (high GP uncertainty) and exploitation of promising solutions (low GP mean).\n\n**Fig 1: BADS procedure** ![BADS procedure](https://raw.githubusercontent.com/acerbilab/bads/master/docs/bads-cartoon.png)\n\nSee [here](https://github.com/lacerbi/optimviz) for a visualization of several optimizers at work, including BADS.\n\nSee our paper for more details ([Acerbi and Ma, 2017](#references-and-citation)).\n\n## Troubleshooting and contact\n\nPyBADS is under active development. The original BADS algorithm has been extensively tested in several benchmarks and published papers, and the some benchmarks have been replicated using PyBADS. But as with any optimization method, you should double-check your results.\n\nIf you have trouble doing something with PyBADS, spot bugs or strange behavior, or you simply have some questions, please feel free to:\n- Post in the lab's [Discussions forum](https://github.com/orgs/acerbilab/discussions) with questions or comments about PyBADS, your problems & applications;\n- [Open an issue](https://github.com/acerbilab/pybads/issues/new) on GitHub;\n- Contact the project lead at <luigi.acerbi@helsinki.fi>, putting 'PyBADS' in the subject of the email.\n\n\n## References and citation\n\n1. Acerbi, L. & Ma, W. J. (2017). Practical Bayesian Optimization for Model Fitting with Bayesian Adaptive Direct Search. In *Advances in Neural Information Processing Systems 31*: 8222-8232. ([paper + supplement on arXiv](https://arxiv.org/abs/1705.04405), [NeurIPS Proceedings](https://papers.nips.cc/paper/2017/hash/df0aab058ce179e4f7ab135ed4e641a9-Abstract.html))\n\nYou can cite PyBADS in your work with something along the lines of\n\n> We optimized the log likelihoods of our models using Bayesian adaptive direct search (BADS; Acerbi and Ma, 2017). BADS alternates between a series of fast, local Bayesian optimization steps and a systematic, slower exploration of a mesh grid.\n\nBesides formal citations, you can demonstrate your appreciation for PyBADS in the following ways:\n\n- *Star :star:* the BADS repository on GitHub;\n- [Subscribe](http://eepurl.com/idcvc9) to the lab's newsletter for news and updates (new features, bug fixes, new releases, etc.);\n- [Follow Luigi Acerbi on Twitter](https://twitter.com/AcerbiLuigi) for updates about BADS/PyBADS and other projects;\n- Tell us about your model-fitting problem and your experience with PyBADS (positive or negative) in the lab's [Discussions forum](https://github.com/orgs/acerbilab/discussions).\n\n*Note*: If you are interested in estimating posterior distributions (i.e., uncertainty and error bars) over model parameters, and not just point estimates, you might also want to check out Variational Bayesian Monte Carlo for Python ([PyVBMC](https://github.com/acerbilab/pyvbmc)), a package for Bayesian posterior and model inference which can be used in synergy with PyBADS.\n\n### BibTeX\n\n```BibTeX\n@article{acerbi2017practical,\n    title={Practical {B}ayesian Optimization for Model Fitting with {B}ayesian Adaptive Direct Search},\n    author={Acerbi, Luigi and Ma, Wei Ji},\n    journal={Advances in Neural Information Processing Systems},\n    volume={30},\n    pages={1834--1844},\n    year={2017}\n  }\n```\n\n### License\n\nPyBADS is released under the terms of the [BSD 3-Clause License](LICENSE).\n\n### Acknowledgments\n\nPyBADS was developed by [members](https://www.helsinki.fi/en/researchgroups/machine-and-human-intelligence/people) (past and current) of the [Machine and Human Intelligence Lab](https://www.helsinki.fi/en/researchgroups/machine-and-human-intelligence/) at the University of Helsinki. Work on the PyBADS package was supported by the Academy of Finland Flagship programme: [Finnish Center for Artificial Intelligence FCAI](https://fcai.fi/).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD 3-Clause License  Copyright (c) 2022, acerbilab All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyBADS",
    "package_url": "https://pypi.org/project/PyBADS/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyBADS/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/PyBADS/0.8.2/",
    "requires_dist": [
      "pytest (>=6.2.5)",
      "cma (>=3.1.0)",
      "corner (>=2.2.1)",
      "dill (>=0.3.5.1)",
      "gpyreg (>=0.1.0)",
      "imageio (>=2.13.5)",
      "matplotlib (>=3.5.1)",
      "numpy (>=1.22.1)",
      "plotly (>=5.11.0)",
      "pytest-mock (>=3.6.1)",
      "pytest-rerunfailures (>=10.2)",
      "scipy (>=1.7.3)",
      "myst-nb (>=0.13.1) ; extra == 'dev'",
      "numpydoc (>=1.2.1) ; extra == 'dev'",
      "pylint (>=2.15.5) ; extra == 'dev'",
      "pytest-cov (>=4.0.0) ; extra == 'dev'",
      "sphinx (>=4.3.2) ; extra == 'dev'",
      "sphinx-book-theme (>=0.2.0) ; extra == 'dev'",
      "build (>=0.9.0) ; extra == 'dev'"
    ],
    "requires_python": ">=3.9",
    "summary": "Bayesian Adaptive Direct Search in Python.",
    "version": "0.8.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17078587,
  "releases": {
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "848d919958a48d298c534efb2c012ec8e28b7933957d6e22cdcef3612379ba52",
          "md5": "c5aca4e495b186dca9d00b6cd9cb3eda",
          "sha256": "9f22d0937829d762e2f226f20114bfbfc746db954806b9906c725c900b968cae"
        },
        "downloads": -1,
        "filename": "PyBADS-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5aca4e495b186dca9d00b6cd9cb3eda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 117697,
        "upload_time": "2023-02-21T15:46:48",
        "upload_time_iso_8601": "2023-02-21T15:46:48.043464Z",
        "url": "https://files.pythonhosted.org/packages/84/8d/919958a48d298c534efb2c012ec8e28b7933957d6e22cdcef3612379ba52/PyBADS-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68f0623a63d1fb2488e8541a56ef206004ac53b6cd93a0970a8510c1168b5bf6",
          "md5": "4b509bb9bad24a509d7fba2795fe8830",
          "sha256": "f082c245a0a597decf06ddf9f82ed7cdd58adf8bd725859f4e646a04bfe494a8"
        },
        "downloads": -1,
        "filename": "PyBADS-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b509bb9bad24a509d7fba2795fe8830",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 92919,
        "upload_time": "2023-02-21T15:46:50",
        "upload_time_iso_8601": "2023-02-21T15:46:50.332359Z",
        "url": "https://files.pythonhosted.org/packages/68/f0/623a63d1fb2488e8541a56ef206004ac53b6cd93a0970a8510c1168b5bf6/PyBADS-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "489f499b3e1179c17171edb0e820e724d677aa17c729c90e9bf3838835c12b9e",
          "md5": "3badcd618330a72959f548d290b3090e",
          "sha256": "e3c41bf97561b5c8b1262feb70d5d09f04e57cffb5fe844f07adf61e70d967fd"
        },
        "downloads": -1,
        "filename": "PyBADS-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3badcd618330a72959f548d290b3090e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 117654,
        "upload_time": "2023-02-26T09:32:46",
        "upload_time_iso_8601": "2023-02-26T09:32:46.244445Z",
        "url": "https://files.pythonhosted.org/packages/48/9f/499b3e1179c17171edb0e820e724d677aa17c729c90e9bf3838835c12b9e/PyBADS-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a39f73b457264981a45cabe8da6526efd503b892af4bf58170f9008c5340e2dd",
          "md5": "8ec9eed5d14b51d10b5baba0a9570eb8",
          "sha256": "53a81588e771278062ba4d05fdb900c514ada89ae0a200517418fda34cdea268"
        },
        "downloads": -1,
        "filename": "PyBADS-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8ec9eed5d14b51d10b5baba0a9570eb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 92922,
        "upload_time": "2023-02-26T09:32:48",
        "upload_time_iso_8601": "2023-02-26T09:32:48.564932Z",
        "url": "https://files.pythonhosted.org/packages/a3/9f/73b457264981a45cabe8da6526efd503b892af4bf58170f9008c5340e2dd/PyBADS-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe5ec241d8b45895b51fc9a93be5e6ee8c97d5f8cc3b5184a246b34a4e5668b8",
          "md5": "43a6f095f5f4826eb34343bc5c826009",
          "sha256": "1a8e94637a205e4e8974efe686802bba6b3a4406e5dfa83e30e2acc9d5f0dcdf"
        },
        "downloads": -1,
        "filename": "PyBADS-0.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43a6f095f5f4826eb34343bc5c826009",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 117641,
        "upload_time": "2023-02-28T07:49:25",
        "upload_time_iso_8601": "2023-02-28T07:49:25.253591Z",
        "url": "https://files.pythonhosted.org/packages/fe/5e/c241d8b45895b51fc9a93be5e6ee8c97d5f8cc3b5184a246b34a4e5668b8/PyBADS-0.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "697d4507fa29184fc3cad0b9f1e7010625b3e3c5cf099887b52b3535944316bc",
          "md5": "2ebae33af4f54e73772bd8e3362008dd",
          "sha256": "f10b33b47b2859cd34bda8a17ad570de652e5a9786237e9d89e990637ca87973"
        },
        "downloads": -1,
        "filename": "PyBADS-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2ebae33af4f54e73772bd8e3362008dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 92909,
        "upload_time": "2023-02-28T07:49:27",
        "upload_time_iso_8601": "2023-02-28T07:49:27.107335Z",
        "url": "https://files.pythonhosted.org/packages/69/7d/4507fa29184fc3cad0b9f1e7010625b3e3c5cf099887b52b3535944316bc/PyBADS-0.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fe5ec241d8b45895b51fc9a93be5e6ee8c97d5f8cc3b5184a246b34a4e5668b8",
        "md5": "43a6f095f5f4826eb34343bc5c826009",
        "sha256": "1a8e94637a205e4e8974efe686802bba6b3a4406e5dfa83e30e2acc9d5f0dcdf"
      },
      "downloads": -1,
      "filename": "PyBADS-0.8.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "43a6f095f5f4826eb34343bc5c826009",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 117641,
      "upload_time": "2023-02-28T07:49:25",
      "upload_time_iso_8601": "2023-02-28T07:49:25.253591Z",
      "url": "https://files.pythonhosted.org/packages/fe/5e/c241d8b45895b51fc9a93be5e6ee8c97d5f8cc3b5184a246b34a4e5668b8/PyBADS-0.8.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "697d4507fa29184fc3cad0b9f1e7010625b3e3c5cf099887b52b3535944316bc",
        "md5": "2ebae33af4f54e73772bd8e3362008dd",
        "sha256": "f10b33b47b2859cd34bda8a17ad570de652e5a9786237e9d89e990637ca87973"
      },
      "downloads": -1,
      "filename": "PyBADS-0.8.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2ebae33af4f54e73772bd8e3362008dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 92909,
      "upload_time": "2023-02-28T07:49:27",
      "upload_time_iso_8601": "2023-02-28T07:49:27.107335Z",
      "url": "https://files.pythonhosted.org/packages/69/7d/4507fa29184fc3cad0b9f1e7010625b3e3c5cf099887b52b3535944316bc/PyBADS-0.8.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}