{
  "info": {
    "author": "Federico Capoano",
    "author_email": "support@openwisp.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: System :: Networking"
    ],
    "description": "openwisp-firmware-upgrader\n==========================\n\n.. image:: https://github.com/openwisp/openwisp-firmware-upgrader/workflows/OpenWISP%20Firmware%20Upgrader%20CI%20Build/badge.svg?branch=master\n   :target: https://github.com/openwisp/openwisp-firmware-upgrader/actions?query=OpenWISP+Firmware+Upgrader+CI+Build\n\n.. image:: https://coveralls.io/repos/openwisp/openwisp-firmware-upgrader/badge.svg\n  :target: https://coveralls.io/r/openwisp/openwisp-firmware-upgrader\n\n.. image:: https://img.shields.io/librariesio/release/github/openwisp/openwisp-firmware-upgrader\n  :target: https://libraries.io/github/openwisp/openwisp-firmware-upgrader#repository_dependencies\n  :alt: Dependency monitoring\n\n.. image:: https://img.shields.io/gitter/room/nwjs/nw.js.svg?style=flat-square\n   :target: https://gitter.im/openwisp/general\n   :alt: support chat\n\n.. image:: https://badge.fury.io/py/openwisp-firmware-upgrader.svg\n  :target: http://badge.fury.io/py/openwisp-firmware-upgrader\n  :alt: Pypi Version\n\n.. image:: https://pepy.tech/badge/openwisp-firmware-upgrader\n  :target: https://pepy.tech/project/openwisp-firmware-upgrader\n  :alt: Downloads\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://pypi.org/project/black/\n   :alt: code style: black\n\n------------\n\nFirmware upgrade module of OpenWISP.\n\n**Features**:\n\n- Stores information of each upgrade operation which can be seen from the device page\n- Automatic retries for recoverable failures\n  (eg: firmware image upload issues because of intermittent internet connection)\n- Performs a final check to find out if the upgrade completed successfully or not\n- Prevents accidental multiple upgrades using the same firmware image\n- Single device upgrade\n- Mass upgrades\n- Possibility to divide firmware images in categories\n- `REST API <#rest-api>`__\n- `Possibility of writing custom upgraders <#writing-custom-firmware-upgrader-classes>`_ for other\n  firmware OSes or for custom OpenWRT based firmwares\n- Configurable timeouts\n- `Extensible <#extending-openwisp-firmware-upgrader>`_\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp2-docs/master/assets/design/openwisp-logo-black.svg\n  :target: http://openwisp.org\n\n**For a more complete overview of the OpenWISP modules and architecture**,\nsee the\n`OpenWISP Architecture Overview\n<https://openwisp.io/docs/general/architecture.html>`_.\n\n**Want to help OpenWISP?** `Find out how to help us grow here\n<http://openwisp.io/docs/general/help-us.html>`_.\n\n------------\n\n.. contents:: **Table of Contents**:\n   :backlinks: none\n   :depth: 3\n\n------------\n\nInstallation instructions\n-------------------------\n\nRequirements\n~~~~~~~~~~~~\n\n- Python >= 3.7\n- openwisp-controller (and its dependencies) >= 1.0.0\n\nInstall Dependencies\n~~~~~~~~~~~~~~~~~~~~\n\nInstall spatialite and sqlite:\n\n.. code-block:: shell\n\n    sudo apt-get install sqlite3 libsqlite3-dev openssl libssl-dev\n    sudo apt-get install gdal-bin libproj-dev libgeos-dev libspatialite-dev\n\nSetup (integrate in an existing Django project)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFollow the `setup instructions of openwisp-controller\n<https://github.com/openwisp/openwisp-controller#setup-integrate-in-an-existing-django-project>`_, then add the settings described below.\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # django apps\n        # all-auth\n        'django.contrib.sites',\n        'openwisp_users.accounts',\n        'allauth',\n        'allauth.account',\n        'django_extensions',\n        'private_storage',\n        # openwisp2 modules\n        'openwisp_controller.pki',\n        'openwisp_controller.config',\n        'openwisp_controller.connection',\n        'openwisp_controller.geo',\n        'openwisp_firmware_upgrader',\n        'openwisp_users',\n        'openwisp_notifications',\n        'openwisp_ipam',\n        # openwisp2 admin theme (must be loaded here)\n        'openwisp_utils.admin_theme',\n        # admin\n        'django.contrib.admin',\n        'django.forms',\n        # other dependencies\n        'sortedm2m',\n        'reversion',\n        'leaflet',\n        'flat_json_widget',\n        # rest framework\n        'rest_framework',\n        'rest_framework.authtoken',\n        'rest_framework_gis',\n        'django_filters',\n        'drf_yasg',\n        # channels\n        'channels',\n    ]\n\n    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n    PRIVATE_STORAGE_ROOT = os.path.join(MEDIA_ROOT, 'firmware')\n\nThe root URLconf (``urls.py``) should look like the following example:\n\n.. code-block:: python\n\n    from django.conf import settings\n    from django.contrib import admin\n    from django.conf.urls import include, url\n    from django.contrib.staticfiles.urls import staticfiles_urlpatterns\n\n    urlpatterns = [\n        path('admin/', admin.site.urls),\n        path('', include('openwisp_controller.urls')),\n        path('', redirect_view, name='index'),\n        path('', include('openwisp_firmware_upgrader.urls')),\n        path('api/v1/', include((get_api_urls(), 'users'), namespace='users')),\n        path('api/v1/', include('openwisp_utils.api.urls')),\n    ]\n\n    urlpatterns += staticfiles_urlpatterns()\n\nInstalling for development\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInstall your forked repo:\n\n.. code-block:: shell\n\n    git clone git://github.com/<your_fork>/openwisp-firmware-upgrader\n    cd openwisp-firmware-upgrader/\n    python setup.py develop\n\nInstall test requirements:\n\n.. code-block:: shell\n\n    pip install -r requirements-test.txt\n\nCreate database:\n\n.. code-block:: shell\n\n    cd tests/\n    ./manage.py migrate\n    ./manage.py createsuperuser\n\nLaunch development server:\n\n.. code-block:: shell\n\n    ./manage.py runserver 0.0.0.0:8000\n\nYou can access the admin interface at http://127.0.0.1:8000/admin/.\n\nRun celery and celery-beat with the following commands\n(separate terminal windows are needed):\n\n.. code-block:: shell\n\n    # (cd tests)\n    celery -A openwisp2 worker -l info\n    celery -A openwisp2 beat -l info\n\nRun tests with:\n\n.. code-block:: shell\n\n    # run qa checks\n    ./run-qa-checks\n\n    # standard tests\n    ./runtests.py\n\n    # tests for the sample app\n    SAMPLE_APP=1 ./runtests.py --keepdb --failfast\n\nWhen running the last line of the previous example, the environment variable\n``SAMPLE_APP`` activates the app in ``/tests/openwisp2/sample_firmware_upgrader/``\nwhich is a simple django app that extends ``openwisp-firmware-upgrader`` with\nthe sole purpose of testing its extensibility, for more information regarding\nthis concept, read the following section.\n\nQuickstart Guide\n----------------\n\nRequirements:\n\n- Devices running at least OpenWRT 12.09 Attitude Adjustment, older versions\n  of OpenWRT have not worked at all in our tests\n- Devices must have enough free RAM to be able to upload the\n  new image to ``/tmp``\n\n1. Create a category\n~~~~~~~~~~~~~~~~~~~~\n\nCreate a category for your firmware images\nby going to *Firmware management > Firmware categories > Add firmware category*,\nif you use only one firmware type in your network, you could simply\nname the category \"default\" or \"standard\".\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-firmware-upgrader/docs/docs/images/quickstart-category.gif\n\nIf you use multiple firmware images with different features, create one category\nfor each firmware type, eg:\n\n- WiFi\n- SDN router\n- LoRa Gateway\n\nThis is necessary in order to perform mass upgrades only on specific\nfirmware categories when, for example, a new *LoRa Gateway* firmware becomes available.\n\n2. Create the build object\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate a build a build object by going to\n*Firmware management > Firmware builds > Add firmware build*,\nthe build object is related to a firmware category and is the collection of the\ndifferent firmware images which have been compiled for the different hardware models\nsupported by the system.\n\nThe version field indicates the firmware version, the change log field is optional but\nwe recommend filling it to help operators know the differences between each version.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-firmware-upgrader/docs/docs/images/quickstart-build.gif\n\nAn important but optional field of the build model is **OS identifier**, this field\nshould match the value of the **Operating System** field which gets automatically filled\nduring device registration, eg: ``OpenWrt 19.07-SNAPSHOT r11061-6ffd4d8a4d``.\nIt is used by the firmware-upgrader module to automatically\ncreate ``DeviceFirmware`` objects for existing devices or when new devices register.\nA ``DeviceFirmware`` object represent the relationship between a device and a firmware image,\nit basically tells us which firmware image is installed on the device.\n\nTo find out the exact value to use, you should either do a\ntest flash on a device and register it to the system or you should inspect the firmware image\nby decompressing it and find the generated value in the firmware image.\n\nIf you're not sure about what **OS identifier** to use, just leave it empty, you can fill\nit later on when you find out.\n\nNow save the build object to create it.\n\n3. Upload images to the build\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNow is time to add images to the build, we suggest adding one image at time.\nAlternatively the `REST API <#rest-api>`__ can be used to automate this step.\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-firmware-upgrader/docs/docs/images/quickstart-firmwareimage.gif\n\nIf you use a hardware model which is not listed in the image types, if the\nhardware model is officially supported by OpenWRT, you can send us a pull-request to add it,\notherwise you can use `the setting OPENWISP_CUSTOM_OPENWRT_IMAGES <#openwisp_custom_openwrt_images>`__\nto add it.\n\n4. Perform a firmware upgrade to a specific device\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-firmware-upgrader/docs/docs/images/quickstart-devicefirmware.gif\n\nOnce a new build is ready, has been created in the system and its image have been uploaded,\nit will be the time to finally upgrade our devices.\n\nTo perform the upgrade of a single device, navigate to the device details,\nthen go to the \"Firmware\" tab.\n\nIf you correctly filled **OS identifier** in step 2, you should have a situation\nsimilar to the one above: in this example, the device is using version ``1.0``\nand we want to upgrade it to version ``2.0``, once the new firmware image\nis selected we just have to hit save, then a new tab will appear in the device page\nwhich allows us to see what's going on during the upgrade.\n\nRight now, the update of the upgrade information is not asynchronous yet, so you will\nhave to reload the page periodically to find new information. This will be addressed\nin a future release.\n\n5. Performing mass upgrades\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFirst of all, please ensure the following preconditions are met:\n\n- the system is configured correctly\n- the new firmware images are working as expected\n- you already tried the upgrade of single devices several times.\n\nAt this stage you can try a mass upgrade by doing the following:\n\n- go to the build list page\n- select the build which contains the latest firmware images you\n  want the devices to be upgraded with\n- click on \"Mass-upgrade devices related to the selected build\".\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-firmware-upgrader/docs/docs/images/quickstart-batch-upgrade.gif\n\nAt this point you should see a summary page which will inform you of which devices\nare going to be upgraded, you can either confirm the operation or cancel.\n\nOnce the operation is confirmed you will be redirected to a page in which you\ncan monitor the progress of the upgrade operations.\n\nRight now, the update of the upgrade information is not asynchronous yet, so you will\nhave to reload the page periodically to find new information. This will be addressed\nin a future release.\n\nAutomatic device firmware detection\n-----------------------------------\n\n*OpenWISP Firmware Upgrader* maintains a data structure for mapping\nthe firmware image files to board names called ``OPENWRT_FIRMWARE_IMAGE_MAP``.\n\nHere is an example firmware image item from ``OPENWRT_FIRMWARE_IMAGE_MAP``\n\n.. code-block:: python\n\n    {\n        # Firmware image file name.\n        'ar71xx-generic-cf-e320n-v2-squashfs-sysupgrade.bin': {\n            # Human readable name of the model which is displayed on\n            # the UI\n            'label': 'COMFAST CF-E320N v2 (OpenWRT 19.07 and earlier)',\n            # Tupe of board names with which the different versions\n            # of the hardware are identified on OpenWrt\n            'boards': ('COMFAST CF-E320N v2',),\n        }\n    }\n\nWhen a device registers on OpenWISP, the `openwisp-config agent\n<https://github.com/openwisp/openwisp-config#openwisp-config>`_\nread the device board name from `/tmp/sysinfo/model` and sends it to OpenWISP.\nThis value is then saved in the ``Device.model`` field.\n*OpenWISP Firmware Upgrader* uses this field to automatically detect\nthe correct firmware image for the device.\n\nUse the `OPENWISP_CUSTOM_OPENWRT_IMAGES <#openwisp_custom_openwrt_images>`_\nsetting to add additional firmware image in your project.\n\nWriting Custom Firmware Upgrader Classes\n----------------------------------------\n\nYou can write custom upgraders for other firmware OSes or for\ncustom OpenWrt based firmwares.\n\nHere is an example custom OpenWrt firmware upgrader class:\n\n.. code-block:: python\n\n    from openwisp_firmware_upgrader.upgraders.openwrt import OpenWrt\n\n    class CustomOpenWrtBasedFirmware(OpenWrt):\n        # this firmware uses a custom upgrade command\n        UPGRADE_COMMAND = 'upgrade_firmware.sh --keep-config'\n        # it takes somewhat more time to boot so it needs more time\n        RECONNECT_DELAY = 150\n        RECONNECT_RETRY_DELAY = 5\n        RECONNECT_MAX_RETRIES = 20\n\n        def get_remote_path(self, image):\n            return '/tmp/firmware.img'\n\n        def get_upgrade_command(self, path):\n            return self.UPGRADE_COMMAND\n\nYou will need to place your custom upgrader class on the python path\nof your application and then add this path to the `OPENWISP_FIRMWARE_UPGRADERS_MAP\n<#openwisp_firmware_upgraders_map>`_ setting.\n\nREST API\n--------\n\nTo enable the API the setting\n`OPENWISP_FIRMWARE_UPGRADER_API <#openwisp-firmware-upgrader-api>`_\nmust be set to ``True``.\n\nLive documentation\n~~~~~~~~~~~~~~~~~~\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-firmware-upgrader/docs/docs/images/api-docs.png\n\nA general live API documentation (following the OpenAPI specification) at ``/api/v1/docs/``.\n\nBrowsable web interface\n~~~~~~~~~~~~~~~~~~~~~~~\n\n.. image:: https://raw.githubusercontent.com/openwisp/openwisp-firmware-upgrader/docs/docs/images/api-ui.png\n\nAdditionally, opening any of the endpoints `listed below <#list-of-endpoints>`_\ndirectly in the browser will show the `browsable API interface of Django-REST-Framework\n<https://www.django-rest-framework.org/topics/browsable-api/>`_,\nwhich makes it even easier to find out the details of each endpoint.\n\nAuthentication\n~~~~~~~~~~~~~~\n\nSee openwisp-users: `authenticating with the user token\n<https://github.com/openwisp/openwisp-users#authenticating-with-the-user-token>`_.\n\nWhen browsing the API via the `Live documentation <#live-documentation>`_\nor the `Browsable web page <#browsable-web-interface>`_, you can also use\nthe session authentication by logging in the django admin.\n\nPagination\n~~~~~~~~~~\n\nAll *list* endpoints support the ``page_size`` parameter that allows paginating\nthe results in conjunction with the ``page`` parameter.\n\n.. code-block:: text\n\n    GET /api/v1/firmware-upgrader/build/?page_size=10\n    GET /api/v1/firmware-upgrader/build/?page_size=10&page=2\n\nFiltering by organization slug\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMost endpoints allow to filter by organization slug, eg:\n\n.. code-block:: text\n\n    GET /api/v1/firmware-upgrader/build/?organization=org-slug\n\nList of endpoints\n~~~~~~~~~~~~~~~~~\n\nSince the detailed explanation is contained in the `Live documentation <#live-documentation>`_\nand in the `Browsable web page <#browsable-web-interface>`_ of each point,\nhere we'll provide just a list of the available endpoints,\nfor further information please open the URL of the endpoint in your browser.\n\nList mass upgrade operations\n############################\n\n.. code-block:: text\n\n    GET /api/v1/firmware-upgrader/batch-upgrade-operation/\n\nGet mass upgrade operation detail\n#################################\n\n.. code-block:: text\n\n    GET /api/v1/firmware-upgrader/batch-upgrade-operation/{id}/\n\nList firmware builds\n####################\n\n.. code-block:: text\n\n    GET /api/v1/firmware-upgrader/build/\n\nCreate firmware build\n#####################\n\n.. code-block:: text\n\n    POST /api/v1/firmware-upgrader/build/\n\nGet firmware build details\n##########################\n\n.. code-block:: text\n\n    GET /api/v1/firmware-upgrader/build/{id}/\n\nChange details of firmware build\n################################\n\n.. code-block:: text\n\n    PUT /api/v1/firmware-upgrader/build/{id}/\n\nPatch details of firmware build\n###############################\n\n.. code-block:: text\n\n    PATCH /api/v1/firmware-upgrader/build/{id}/\n\nDelete firmware build\n#####################\n\n.. code-block:: text\n\n    DELETE /api/v1/firmware-upgrader/build/{id}/\n\nGet list of images of a firmware build\n######################################\n\n.. code-block:: text\n\n    GET /api/v1/firmware-upgrader/build/{id}/image/\n\nUpload new firmware image to the build\n######################################\n\n.. code-block:: text\n\n    POST /api/v1/firmware-upgrader/build/{id}/image/\n\nGet firmware image details\n##########################\n\n.. code-block:: text\n\n    GET /api/v1/firmware-upgrader/build/{build_pk}/image/{id}/\n\nDelete firmware image\n#####################\n\n.. code-block:: text\n\n    DELETE /api/v1/firmware-upgrader/build/{build_pk}/image/{id}/\n\nDownload firmware image\n#######################\n\n.. code-block:: text\n\n    GET /api/v1/firmware-upgrader/build/{build_pk}/image/{id}/download/\n\nPerform batch upgrade\n#####################\n\nUpgrades all the devices related to the specified build ID.\n\n.. code-block:: text\n\n    POST /api/v1/firmware-upgrader/build/{id}/upgrade/\n\nDry-run batch upgrade\n#####################\n\nReturns a list representing the ``DeviceFirmware`` and ``Device``\ninstances that would be upgraded if POST is used.\n\n``Device`` objects are indicated only when no ``DeviceFirmware``\nobject exists for a device which would be upgraded.\n\n.. code-block:: text\n\n    GET /api/v1/firmware-upgrader/build/{id}/upgrade/\n\nList firmware categories\n########################\n\n.. code-block:: text\n\n    GET /api/v1/firmware-upgrader/category/\n\nCreate new firmware category\n############################\n\n.. code-block:: text\n\n    POST /api/v1/firmware-upgrader/category/\n\nGet firmware category details\n#############################\n\n.. code-block:: text\n\n    GET /api/v1/firmware-upgrader/category/{id}/\n\nChange the details of a firmware category\n#########################################\n\n.. code-block:: text\n\n    PUT /api/v1/firmware-upgrader/category/{id}/\n\nPatch the details of a firmware category\n########################################\n\n.. code-block:: text\n\n    PATCH /api/v1/firmware-upgrader/category/{id}/\n\nDelete a firmware category\n##########################\n\n.. code-block:: text\n\n    DELETE /api/v1/firmware-upgrader/category/{id}/\n\nSettings\n--------\n\n``OPENWISP_FIRMWARE_UPGRADER_RETRY_OPTIONS``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+--------------+\n| **type**:    | ``dict``     |\n+--------------+--------------+\n| **default**: | see below    |\n+--------------+--------------+\n\n.. code-block:: python\n\n    # default value of OPENWISP_FIRMWARE_UPGRADER_RETRY_OPTIONS:\n\n    dict(\n       max_retries=4,\n       retry_backoff=60,\n       retry_backoff_max=600,\n       retry_jitter=True,\n    )\n\nRetry settings for recoverable failures during firmware upgrades.\n\nBy default if an upgrade operation fails before the firmware is flashed\n(eg: because of a network issue during the upload of the image),\nthe upgrade operation will be retried 4 more times with an exponential\nrandom backoff and a maximum delay of 10 minutes.\n\nFor more information regarding these settings, consult the `celery documentation\nregarding automatic retries for known errors\n<https://docs.celeryproject.org/en/stable/userguide/tasks.html#automatic-retry-for-known-exceptions>`_.\n\n``OPENWISP_FIRMWARE_UPGRADER_TASK_TIMEOUT``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+--------------+\n| **type**:    | ``int``      |\n+--------------+--------------+\n| **default**: | ``600``      |\n+--------------+--------------+\n\nTimeout for the background tasks which perform firmware upgrades.\n\nIf for some unexpected reason an upgrade remains stuck for more than 10 minutes,\nthe upgrade operation will be flagged as failed and the task will be killed.\n\nThis should not happen, but a global task time out is a best practice when\nusing background tasks because it prevents the situation in which an unexpected\nbug causes a specific task to hang, which will quickly fill all the available\nslots in a background queue and prevent other tasks from being executed, which\nwill end up affecting negatively the rest of the application.\n\n``OPENWISP_CUSTOM_OPENWRT_IMAGES``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------+\n| **type**:    | ``tuple``   |\n+--------------+-------------+\n| **default**: | ``None``    |\n+--------------+-------------+\n\nThis setting can be used to extend the list of firmware image types\nincluded in *OpenWISP Firmware Upgrader*. This setting is suited to\nadd support for custom OpenWrt images.\n\n.. code-block:: python\n\n    OPENWISP_CUSTOM_OPENWRT_IMAGES = (\n        (\n            # Firmware image file name.\n            'customimage-squashfs-sysupgrade.bin', {\n                # Human readable name of the model which is displayed on\n                # the UI\n                'label': 'Custom WAP-1200',\n                # Tuple of board names with which the different versions of\n                # the hardware are identified on OpenWrt\n                'boards': ('CWAP1200',)\n            }\n        ),\n    )\n\nKindly read `\"Automatic detection of firmware of device\"\n<#automatic-device-firmware-detection>`_\nsection of this documentation to know how *OpenWISP Firmware Upgrader*\nuses this setting in upgrades.\n\n``OPENWISP_FIRMWARE_UPGRADER_MAX_FILE_SIZE``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+------------------------------+\n| **type**:    | ``int``                      |\n+--------------+------------------------------+\n| **default**: | ``30 * 1024 * 1024`` (30 MB) |\n+--------------+------------------------------+\n\nThis setting can be used to set the maximum size limit for firmware images, eg:\n\n.. code-block:: python\n\n    OPENWISP_FIRMWARE_UPGRADER_MAX_FILE_SIZE = 40 * 1024 * 1024  # 40MB\n\n**Notes**:\n\n- Value must be specified in bytes. ``None`` means unlimited.\n\n``OPENWISP_FIRMWARE_UPGRADER_API``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-----------+\n| **type**:    | ``bool``  |\n+--------------+-----------+\n| **default**: | ``True``  |\n+--------------+-----------+\n\nIndicates whether the API for Firmware Upgrader is enabled or not.\n\n``OPENWISP_FIRMWARE_UPGRADER_OPENWRT_SETTINGS``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-----------+\n| **type**:    | ``dict``  |\n+--------------+-----------+\n| **default**: | ``{}``    |\n+--------------+-----------+\n\nAllows changing the default OpenWRT upgrader settings, eg:\n\n.. code-block:: python\n\n    OPENWISP_FIRMWARE_UPGRADER_OPENWRT_SETTINGS = {\n        'reconnect_delay': 120,\n        'reconnect_retry_delay': 20,\n        'reconnect_max_retries': 15,\n        'upgrade_timeout': 90,\n    }\n\n- ``reconnect_delay``: amount of seconds to wait before trying to connect\n  again to the device after the upgrade command has been launched;\n  the re-connection step is necessary to verify the upgrade has completed successfully;\n  defaults to ``120`` seconds\n- ``reconnect_retry_delay``: amount of seconds to wait after a\n  re-connection attempt has failed;\n  defaults to ``20`` seconds\n- ``reconnect_max_retries``: maximum re-connection attempts\n  defaults to ``15`` attempts\n- ``upgrade_timeout``: amount of seconds before the shell session\n  is closed after the upgrade command is launched on the device,\n  useful in case  the upgrade command hangs (it happens on older OpenWRT versions);\n  defaults to ``90`` seconds\n\n``OPENWISP_FIRMWARE_API_BASEURL``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-----------------------------------+\n| **type**:    | ``dict``                          |\n+--------------+-----------------------------------+\n| **default**: |  ``/`` (points to same server)    |\n+--------------+-----------------------------------+\n\nIf you have a seperate instance of openwisp-firmware-upgrader API on a\ndifferent domain, you can use this option to change the base of the image\ndownload url, this will enable you to point to your API server's domain,\nexample value: ``https://myfirmware.myapp.com``.\n\n``OPENWISP_FIRMWARE_UPGRADERS_MAP``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------------------------------------------------------------------------------------------------------------------------+\n| **type**:    | ``dict``                                                                                                                      |\n+--------------+-------------------------------------------------------------------------------------------------------------------------------+\n| **default**: | .. code-block:: python                                                                                                        |\n|              |                                                                                                                               |\n|              |   {                                                                                                                           |\n|              |     'openwisp_controller.connection.connectors.openwrt.ssh.OpenWrt': 'openwisp_firmware_upgrader.upgraders.openwrt.OpenWrt',  |\n|              |   }                                                                                                                           |\n+--------------+-------------------------------------------------------------------------------------------------------------------------------+\n\nA dictionary that maps update strategies to upgraders.\n\nIf you want to use a custom update strategy you will need to use this setting\nto provide an entry with the class path of your update strategy as the key.\n\nIf you need to use a `custom upgrader class <#writing-custom-firmware-upgrader-classes>`_\nyou will need to use this setting to provide an entry with the class path of your upgrader\nas the value.\n\n``OPENWISP_FIRMWARE_PRIVATE_STORAGE_INSTANCE``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------------------------------------------------------------------------------+\n| **type**:    | ``str``                                                                             |\n+--------------+-------------------------------------------------------------------------------------+\n| **default**: |  ``openwisp_firmware_upgrader.private_storage.storage.file_system_private_storage`` |\n+--------------+-------------------------------------------------------------------------------------+\n\nDotted path to an instance of any one of the storage classes in\n`private_storage <https://github.com/edoburu/django-private-storage#django-private-storage>`_.\nThis instance is used to store firmware image files.\n\nBy default, an instance of ``private_storage.storage.files.PrivateFileSystemStorage``\nis used.\n\nExtending openwisp-firmware-upgrader\n------------------------------------\n\nOne of the core values of the OpenWISP project is `Software Reusability <http://openwisp.io/docs/general/values.html#software-reusability-means-long-term-sustainability>`_,\nfor this reason *OpenWISP Firmware Upgrader* provides a set of base classes\nwhich can be imported, extended and reused to create derivative apps.\n\nIn order to implement your custom version of *OpenWISP Firmware Upgrader*,\nyou need to perform the steps described in this section.\n\nWhen in doubt, the code in the `test project <https://github.com/openwisp/openwisp-firmware-upgrader/tree/master/tests/openwisp2/>`_\nand the `sample app <https://github.com/openwisp/openwisp-firmware-upgrader/tree/master/tests/openwisp2/sample_firmware_upgrader/>`_\nwill serve you as source of truth:\njust replicate and adapt that code to get a basic derivative of\n*OpenWISP Firmware Upgrader* working.\n\n**Premise**: if you plan on using a customized version of this module,\nwe suggest to start with it since the beginning, because migrating your data\nfrom the default module to your extended version may be time consuming.\n\n1. Initialize your custom module\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe first thing you need to do is to create a new django app which will\ncontain your custom version of *OpenWISP Firmware Upgrader*.\n\nA django app is nothing more than a\n`python package <https://docs.python.org/3/tutorial/modules.html#packages>`_\n(a directory of python scripts), in the following examples we'll call this django app\n``myupgrader``, but you can name it how you want::\n\n    django-admin startapp myupgrader\n\nKeep in mind that the command mentioned above must be called from a directory\nwhich is available in your `PYTHON_PATH <https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH>`_\nso that you can then import the result into your project.\n\nNow you need to add ``myupgrader`` to ``INSTALLED_APPS`` in your ``settings.py``,\nensuring also that ``openwisp_firmware_upgrader`` has been removed:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # ... other apps ...\n\n        # 'openwisp_firmware_upgrader'  <-- comment out or delete this line\n        'myupgrader'\n    ]\n\nFor more information about how to work with django projects and django apps,\nplease refer to the `django documentation <https://docs.djangoproject.com/en/dev/intro/tutorial01/>`_.\n\n2. Install ``openwisp-firmware-upgrader``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInstall (and add to the requirement of your project) ``openwisp-firmware-upgrader``::\n\n    pip install openwisp-firmware-upgrader\n\n3. Add ``EXTENDED_APPS``\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd the following to your ``settings.py``:\n\n.. code-block:: python\n\n    EXTENDED_APPS = ['openwisp_firmware_upgrader']\n\n4. Add ``openwisp_utils.staticfiles.DependencyFinder``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd ``openwisp_utils.staticfiles.DependencyFinder`` to\n``STATICFILES_FINDERS`` in your ``settings.py``:\n\n.. code-block:: python\n\n    STATICFILES_FINDERS = [\n        'django.contrib.staticfiles.finders.FileSystemFinder',\n        'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n        'openwisp_utils.staticfiles.DependencyFinder',\n    ]\n\n5. Add ``openwisp_utils.loaders.DependencyLoader``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAdd ``openwisp_utils.loaders.DependencyLoader`` to ``TEMPLATES`` in your ``settings.py``:\n\n.. code-block:: python\n\n    TEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'OPTIONS': {\n                'loaders': [\n                    'django.template.loaders.filesystem.Loader',\n                    'django.template.loaders.app_directories.Loader',\n                    'openwisp_utils.loaders.DependencyLoader',\n                ],\n                'context_processors': [\n                    'django.template.context_processors.debug',\n                    'django.template.context_processors.request',\n                    'django.contrib.auth.context_processors.auth',\n                    'django.contrib.messages.context_processors.messages',\n                ],\n            },\n        }\n    ]\n\n6. Inherit the AppConfig class\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPlease refer to the following files in the sample app of the test project:\n\n- `sample_firmware_upgrader/__init__.py <https://github.com/openwisp/openwisp-firmware-upgrader/tree/master/tests/openwisp2/sample_firmware_upgrader/__init__.py>`_.\n- `sample_firmware_upgrader/apps.py <https://github.com/openwisp/openwisp-firmware-upgrader/tree/master/tests/openwisp2/sample_firmware_upgrader/apps.py>`_.\n\nYou have to replicate and adapt that code in your project.\n\nFor more information regarding the concept of ``AppConfig`` please refer to\nthe `\"Applications\" section in the django documentation <https://docs.djangoproject.com/en/dev/ref/applications/>`_.\n\n7. Create your custom models\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor the purpose of showing an example, we added a simple \"details\" field to the\n`models of the sample app in the test project <https://github.com/openwisp/openwisp-firmware-upgrader/tree/master/tests/openwisp2/sample_firmware_upgrader/models.py>`_.\n\nYou can add fields in a similar way in your ``models.py`` file.\n\n**Note**: for doubts regarding how to use, extend or develop models please refer to\nthe `\"Models\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/db/models/>`_.\n\n8. Add swapper configurations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOnce you have created the models, add the following to your ``settings.py``:\n\n.. code-block:: python\n\n    # Setting models for swapper module\n    FIRMWARE_UPGRADER_CATEGORY_MODEL = 'myupgrader.Category'\n    FIRMWARE_UPGRADER_BUILD_MODEL = 'myupgrader.Build'\n    FIRMWARE_UPGRADER_FIRMWAREIMAGE_MODEL = 'myupgrader.FirmwareImage'\n    FIRMWARE_UPGRADER_DEVICEFIRMWARE_MODEL = 'myupgrader.DeviceFirmware'\n    FIRMWARE_UPGRADER_BATCHUPGRADEOPERATION_MODEL = 'myupgrader.BatchUpgradeOperation'\n    FIRMWARE_UPGRADER_UPGRADEOPERATION_MODEL = 'myupgrader.UpgradeOperation'\n\nSubstitute ``myupgrader`` with the name you chose in step 1.\n\n9. Create database migrations\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCreate and apply database migrations::\n\n    ./manage.py makemigrations\n    ./manage.py migrate\n\nFor more information, refer to the\n`\"Migrations\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/migrations/>`_.\n\n10. Create the admin\n~~~~~~~~~~~~~~~~~~~~\n\nRefer to the `admin.py file of the sample app <https://github.com/openwisp/openwisp-firmware-upgrader/tree/master/tests/openwisp2/sample_firmware_upgrader/admin.py>`_.\n\nTo introduce changes to the admin, you can do it in two main ways which are described below.\n\n**Note**: for more information regarding how the django admin works, or how it can be customized,\nplease refer to `\"The django admin site\" section in the django documentation <https://docs.djangoproject.com/en/dev/ref/contrib/admin/>`_.\n\n1. Monkey patching\n##################\n\nIf the changes you need to add are relatively small, you can resort to monkey patching.\n\nFor example:\n\n.. code-block:: python\n\n    from openwisp_firmware_upgrader.admin import (  # noqa\n        BatchUpgradeOperationAdmin,\n        BuildAdmin,\n        CategoryAdmin,\n    )\n\n    BuildAdmin.list_display.insert(1, 'my_custom_field')\n    BuildAdmin.ordering = ['-my_custom_field']\n\n2. Inheriting admin classes\n###########################\n\nIf you need to introduce significant changes and/or you don't want to resort to\nmonkey patching, you can proceed as follows:\n\n.. code-block:: python\n\n    from django.contrib import admin\n    from openwisp_firmware_upgrader.admin import (\n        BatchUpgradeOperationAdmin as BaseBatchUpgradeOperationAdmin,\n        BuildAdmin as BaseBuildAdmin,\n        CategoryAdmin as BaseCategoryAdmin,\n    )\n    from openwisp_firmware_upgrader.swapper import load_model\n\n    BatchUpgradeOperation = load_model('BatchUpgradeOperation')\n    Build = load_model('Build')\n    Category = load_model('Category')\n    DeviceFirmware = load_model('DeviceFirmware')\n    FirmwareImage = load_model('FirmwareImage')\n    UpgradeOperation = load_model('UpgradeOperation')\n\n    admin.site.unregister(BatchUpgradeOperation)\n    admin.site.unregister(Build)\n    admin.site.unregister(Category)\n\n    class BatchUpgradeOperationAdmin(BaseBatchUpgradeOperationAdmin):\n        # add your changes here\n\n    class BuildAdmin(BaseBuildAdmin):\n        # add your changes here\n\n    class CategoryAdmin(BaseCategoryAdmin):\n        # add your changes here\n\n11. Create root URL configuration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPlease refer to the `urls.py <https://github.com/openwisp/openwisp-firmware-upgrader/tree/master/tests/openwisp2/urls.py>`_\nfile in the test project.\n\nFor more information about URL configuration in django, please refer to the\n`\"URL dispatcher\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/http/urls/>`_.\n\n12. Create celery.py\n~~~~~~~~~~~~~~~~~~~~\n\nPlease refer to the `celery.py <https://github.com/openwisp/openwisp-firmware-upgrader/tree/master/tests/openwisp2/celery.py>`_\nfile in the test project.\n\nFor more information about the usage of celery in django, please refer to the\n`\"First steps with Django\" section in the celery documentation <https://docs.celeryproject.org/en/master/django/first-steps-with-django.html>`_.\n\n13. Import the automated tests\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen developing a custom application based on this module, it's a good\nidea to import and run the base tests too, so that you can be sure the changes\nyou're introducing are not breaking some of the existing features of *OpenWISP Firmware Upgrader*.\n\nIn case you need to add breaking changes, you can overwrite the tests defined\nin the base classes to test your own behavior.\n\nSee the `tests of the sample app <https://github.com/openwisp/openwisp-firmware-upgrader/blob/master/tests/openwisp2/sample_firmware_upgrader/tests.py>`_\nto find out how to do this.\n\nYou can then run tests with::\n\n    # the --parallel flag is optional\n    ./manage.py test --parallel myupgrader\n\nSubstitute ``myupgrader`` with the name you chose in step 1.\n\nFor more information about automated tests in django, please refer to\n`\"Testing in Django\" <https://docs.djangoproject.com/en/dev/topics/testing/>`_.\n\nOther base classes that can be inherited and extended\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following steps are not required and are intended for more advanced customization.\n\n``FirmwareImageDownloadView``\n#############################\n\nThis view controls how the firmware images are stored and who has permission to download them.\n\nThe full python path is: ``openwisp_firmware_upgrader.private_storage.FirmwareImageDownloadView``.\n\nIf you want to extend this view, you will have to perform the additional steps below.\n\nStep 1. import and extend view:\n\n.. code-block:: python\n\n    # myupgrader/views.py\n    from openwisp_firmware_upgrader.private_storage import (\n        FirmwareImageDownloadView as BaseFirmwareImageDownloadView\n    )\n\n    class FirmwareImageDownloadView(BaseFirmwareImageDownloadView):\n        # add your customizations here ...\n        pass\n\nStep 2: remove the following line from your root ``urls.py`` file:\n\n.. code-block:: python\n\n    path('firmware/', include('openwisp_firmware_upgrader.private_storage.urls')),\n\nStep 3: add an URL route pointing to your custom view in ``urls.py`` file:\n\n.. code-block:: python\n\n    # urls.py\n    from myupgrader.views import FirmwareImageDownloadView\n\n    urlpatterns = [\n        # ... other URLs\n        path('<your-custom-path>', FirmwareImageDownloadView.as_view(), name='serve_private_file',),\n    ]\n\nFor more information regarding django views, please refer to the\n`\"Class based views\" section in the django documentation <https://docs.djangoproject.com/en/dev/topics/class-based-views/>`_.\n\nAPI views\n~~~~~~~~~\n\nIf you need to customize the behavior of the API views, the procedure to follow\nis similar to the one described in\n`FirmwareImageDownloadView <#firmwareimagedownloadview>`_,\nwith the difference that you may also want to create your own\n`serializers <https://www.django-rest-framework.org/api-guide/serializers/>`_\nif needed.\n\nThe API code is stored in\n`openwisp_firmware_upgrader.api <https://github.com/openwisp/openwisp-firmware-upgrader/blob/master/openwisp_firmware_upgrader/api/>`_\nand is built using `django-rest-framework <http://openwisp.io/docs/developer/hacking-openwisp-python-django.html#why-django-rest-framework>`_\n\nFor more information regarding Django REST Framework API views, please refer to the\n`\"Generic views\" section in the Django REST Framework documentation <https://www.django-rest-framework.org/api-guide/generic-views/>`_.\n\nContributing\n------------\n\nPlease refer to the `OpenWISP contributing guidelines <http://openwisp.io/docs/developer/contributing.html>`_.\n\nSupport\n-------\n\nSee `OpenWISP Support Channels <http://openwisp.org/support.html>`_.\n\nChangelog\n---------\n\nSee `CHANGES <https://github.com/openwisp/openwisp-firmware-upgrader/blob/master/CHANGES.rst>`_.\n\nLicense\n-------\n\nSee `LICENSE <https://github.com/openwisp/openwisp-firmware-upgrader/blob/master/LICENSE>`_.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/openwisp/openwisp-firmware-upgrader/releases",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://openwisp.org",
    "keywords": "django,netjson,networking,openwisp,firmware",
    "license": "GPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openwisp-firmware-upgrader",
    "package_url": "https://pypi.org/project/openwisp-firmware-upgrader/",
    "platform": "Platform Independent",
    "project_url": "https://pypi.org/project/openwisp-firmware-upgrader/",
    "project_urls": {
      "Download": "https://github.com/openwisp/openwisp-firmware-upgrader/releases",
      "Homepage": "http://openwisp.org"
    },
    "release_url": "https://pypi.org/project/openwisp-firmware-upgrader/1.0.1/",
    "requires_dist": [
      "openwisp-controller (~=1.0.0)",
      "django-private-storage (~=3.0.0)"
    ],
    "requires_python": "",
    "summary": "Firmware upgrader module of OpenWISP",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14097490,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "984a358aee4480ff1d2588f977965c66b661c47ba5312b863b28cfb006da59d7",
          "md5": "a205a5e6dd502e6c7e13dbd2052f089a",
          "sha256": "ce2ef25a1a1ea41653392eed0e93946b8329fc250296d9b18b4d019bbfd08352"
        },
        "downloads": -1,
        "filename": "openwisp_firmware_upgrader-0.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "a205a5e6dd502e6c7e13dbd2052f089a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 70099,
        "upload_time": "2020-11-27T19:28:39",
        "upload_time_iso_8601": "2020-11-27T19:28:39.866110Z",
        "url": "https://files.pythonhosted.org/packages/98/4a/358aee4480ff1d2588f977965c66b661c47ba5312b863b28cfb006da59d7/openwisp_firmware_upgrader-0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38e5611e31dbaa8536f9ac3ecdce2e424ce96f4ca37225249aa304ad2bdf2725",
          "md5": "85ab874a1643e48dd89454f457d206cc",
          "sha256": "d0eac57948ce296ae6c5a2d2a9d5138be2222736ab022355edf22908e133e8e8"
        },
        "downloads": -1,
        "filename": "openwisp-firmware-upgrader-0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "85ab874a1643e48dd89454f457d206cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 76966,
        "upload_time": "2020-11-27T19:28:42",
        "upload_time_iso_8601": "2020-11-27T19:28:42.687492Z",
        "url": "https://files.pythonhosted.org/packages/38/e5/611e31dbaa8536f9ac3ecdce2e424ce96f4ca37225249aa304ad2bdf2725/openwisp-firmware-upgrader-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6351870cfbb33cfbffbfe7fdf7dd55191e47599ab131d3e28fa049ca0e26d41",
          "md5": "3a87487e5c1a7327f23b3409e649eee6",
          "sha256": "daa00c537e49eedfeb7053ad28ca269d8e4eedb60768d594934823ca1f05f439"
        },
        "downloads": -1,
        "filename": "openwisp_firmware_upgrader-0.1.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "3a87487e5c1a7327f23b3409e649eee6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 70251,
        "upload_time": "2021-01-08T18:05:02",
        "upload_time_iso_8601": "2021-01-08T18:05:02.131055Z",
        "url": "https://files.pythonhosted.org/packages/c6/35/1870cfbb33cfbffbfe7fdf7dd55191e47599ab131d3e28fa049ca0e26d41/openwisp_firmware_upgrader-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "516782c85d051648f35cd860ae9ebb58ee8d03f04eefc60cb08b5983e15b09f0",
          "md5": "ef8b04a5b24c19eb87fc799d6471f94c",
          "sha256": "7f5265116aedb6771221a4ed24c96502d6ac1ab0daf7211789186980b8a46320"
        },
        "downloads": -1,
        "filename": "openwisp-firmware-upgrader-0.1.1.tar.gz",
        "has_sig": true,
        "md5_digest": "ef8b04a5b24c19eb87fc799d6471f94c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 77290,
        "upload_time": "2021-01-08T18:05:05",
        "upload_time_iso_8601": "2021-01-08T18:05:05.923354Z",
        "url": "https://files.pythonhosted.org/packages/51/67/82c85d051648f35cd860ae9ebb58ee8d03f04eefc60cb08b5983e15b09f0/openwisp-firmware-upgrader-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a00573dcd614beff81488593bbb7cfddf0f67ab061ce029186f3be68cdd7c0dc",
          "md5": "90bc5ecd8debddc00aec7b8a3d126c8e",
          "sha256": "b25ee6c670adb368a911c7608562e27335d06e51b19aabb28b2bdf16fc2767c3"
        },
        "downloads": -1,
        "filename": "openwisp_firmware_upgrader-1.0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "90bc5ecd8debddc00aec7b8a3d126c8e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 82482,
        "upload_time": "2022-05-05T21:57:33",
        "upload_time_iso_8601": "2022-05-05T21:57:33.480981Z",
        "url": "https://files.pythonhosted.org/packages/a0/05/73dcd614beff81488593bbb7cfddf0f67ab061ce029186f3be68cdd7c0dc/openwisp_firmware_upgrader-1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18e264fd646a729e04aed29b6f8fee44d5f445ef97fec10751a4132092a1754b",
          "md5": "5079d358450206ccd66a94d7b866a680",
          "sha256": "66446993600bda057a210876e85af46ce0e50cc2320a78d0769dfc81911f1fdc"
        },
        "downloads": -1,
        "filename": "openwisp-firmware-upgrader-1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "5079d358450206ccd66a94d7b866a680",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 90400,
        "upload_time": "2022-05-05T21:57:36",
        "upload_time_iso_8601": "2022-05-05T21:57:36.470664Z",
        "url": "https://files.pythonhosted.org/packages/18/e2/64fd646a729e04aed29b6f8fee44d5f445ef97fec10751a4132092a1754b/openwisp-firmware-upgrader-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc97cb6f2fa40eb3e72578fd06af07db61047e5ec60f4035b6cc5c1a3b80d835",
          "md5": "d156dd3c0771e7f68a23ab79eb822abf",
          "sha256": "48f20c54b882917c7631681689f5b83c62807378d94d0fd4b79a5d5c1db776a5"
        },
        "downloads": -1,
        "filename": "openwisp_firmware_upgrader-1.0.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "d156dd3c0771e7f68a23ab79eb822abf",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 83226,
        "upload_time": "2022-06-10T20:30:46",
        "upload_time_iso_8601": "2022-06-10T20:30:46.515001Z",
        "url": "https://files.pythonhosted.org/packages/cc/97/cb6f2fa40eb3e72578fd06af07db61047e5ec60f4035b6cc5c1a3b80d835/openwisp_firmware_upgrader-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec0c9e4539d0486178827c124928d1b3fd49cf601971d1579d004e64131e0354",
          "md5": "3628a62043954174ab04817a5a096ea8",
          "sha256": "cbc0c2194a9f27b448faa36abcfd10e6eef542f4d7da25b8508ebf88def58d0a"
        },
        "downloads": -1,
        "filename": "openwisp-firmware-upgrader-1.0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "3628a62043954174ab04817a5a096ea8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 91384,
        "upload_time": "2022-06-10T20:30:49",
        "upload_time_iso_8601": "2022-06-10T20:30:49.630060Z",
        "url": "https://files.pythonhosted.org/packages/ec/0c/9e4539d0486178827c124928d1b3fd49cf601971d1579d004e64131e0354/openwisp-firmware-upgrader-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cc97cb6f2fa40eb3e72578fd06af07db61047e5ec60f4035b6cc5c1a3b80d835",
        "md5": "d156dd3c0771e7f68a23ab79eb822abf",
        "sha256": "48f20c54b882917c7631681689f5b83c62807378d94d0fd4b79a5d5c1db776a5"
      },
      "downloads": -1,
      "filename": "openwisp_firmware_upgrader-1.0.1-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "d156dd3c0771e7f68a23ab79eb822abf",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 83226,
      "upload_time": "2022-06-10T20:30:46",
      "upload_time_iso_8601": "2022-06-10T20:30:46.515001Z",
      "url": "https://files.pythonhosted.org/packages/cc/97/cb6f2fa40eb3e72578fd06af07db61047e5ec60f4035b6cc5c1a3b80d835/openwisp_firmware_upgrader-1.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec0c9e4539d0486178827c124928d1b3fd49cf601971d1579d004e64131e0354",
        "md5": "3628a62043954174ab04817a5a096ea8",
        "sha256": "cbc0c2194a9f27b448faa36abcfd10e6eef542f4d7da25b8508ebf88def58d0a"
      },
      "downloads": -1,
      "filename": "openwisp-firmware-upgrader-1.0.1.tar.gz",
      "has_sig": true,
      "md5_digest": "3628a62043954174ab04817a5a096ea8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 91384,
      "upload_time": "2022-06-10T20:30:49",
      "upload_time_iso_8601": "2022-06-10T20:30:49.630060Z",
      "url": "https://files.pythonhosted.org/packages/ec/0c/9e4539d0486178827c124928d1b3fd49cf601971d1579d004e64131e0354/openwisp-firmware-upgrader-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}