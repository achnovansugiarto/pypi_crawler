{
  "info": {
    "author": "Jules Aubier",
    "author_email": "jules.aubier97@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# typemallow 2\n_An elegant and automatic solution for generating/outputting Typescript interfaces from your Marshmallow Schemas_\n\n\nI updated the typemallow package so it could Handle enums in typescript and more recent versions of marshmallow.\nOriginal work is from adenh93.\n### Usage:\n\n_Using typemallow2 is simple._\n\nFirst, install the package \n`pip install typemallow2`\n\nNext, for your Marshmallow schemas that you wish to generate Typescript interfaces for, simply import `ts_interface` and `generate_ts` from the `typemallow` module, and prepend the `@ts_interface()` class decorator to your Marshmallow schema class.\n\nAll that is required to generate your Typescript interfaces is to call the `generate_ts()` function, and provide a filepath as a parameter to output the result.\n\n_main.py_\n```python\nfrom typemallow2 import ts_interface, generate_ts\n\n\n@ts_interface()\nclass Foo(Schema):\n    some_field = fields.Str()\n    another_field = fields.Date()\n\n\ngenerate_ts('./output.ts')\n```\n\n_output.ts_\n```typescript\nexport interface Foo {\n    some_field: string;\n    another_field: date;\n}\n```\n\n_typemallow_ even supports Nested Schema fields and enums.\n\n_main.py_\n```python\nfrom typemallow2 import ts_interface, generate_ts, ts_enum\nfrom marshmallow import Schema, fields\nfrom marshmallow_enum import EnumField\nfrom enum import Enum, auto\n\n\n@ts_enum(value_is_auto=True)\nclass MyAutoEnum(Enum):\n    enum1 = auto()\n    enum2 = auto()\n\n@ts_enum(value_is_auto=False)\nclass MyNonAutoEnum(Enum):\n    enum1 = 100\n    enum2 = 200\n    enum3 = \"Baguette\"\n\n@ts_interface()\nclass Boo(Schema):\n    some_field = fields.Str()\n    my_enum_field = EnumField(MyAutoEnum)\n\n\n@ts_interface()\nclass Foo(Schema):\n    some_field = fields.Str()\n    another_field = fields.Str()\n    my_field = fields.Bool()\n    my_interface_field = fields.Nested(Boo, many=False)\n\ngenerate_ts('./output.ts')\n```\n_output.ts_\n```typescript\n\nexport enum MyAutoEnum {\n\tenum1,\n\tenum2,\n}\n\nexport interface Bar {\n\tsome_field: string;\n\tmy_enum_field: MyAutoEnum;\n}\n\nexport interface Foo {\n\tsome_field: string;\n\tanother_field: string;\n\tmy_field: boolean;\n\tmy_interface_field: Bar;\n\tmy_interfaces_fields: Bar[];\n}\n\n```\n\n### Extended Usage:\nThe `@ts_interface()` decorator function accepts an optional parameter, _context_, which defaults to... well... 'default'.\n\n\"_Why is this the case?_\" \n\nWhen a Marshmallow Schema is identified with with `@ts_interface` decorator, it is added to a list in a dictionary of schemas, with the dictionary key being the value provided to the _context_ parameter. If you were to provide different contexts for each schema, additional keys will be created if they do not exist, or the schema will simply be appended to the list at the existing key.\n\nThis comes in handy, as the `generate_ts()` function _also_ accepts an optional _context_ parameter, which will filter only schemas in the dictionary at the specific key.\n\nThis is useful if you wish to output different contexts to different files, e.g.\n\n_main.py_\n```python\n...\nfrom typemallow2 import ts_interface, generate_ts\n\n@ts_interface(context='internal')\nclass Foo(Schema):\n    foo = fields.Str()\n\n\n@ts_interface(context='internal')\nclass Bar(Schema):\n    bar = fields.Str()\n\n\n@ts_interface(context='external')\nclass FooBar(Schema):\n    foo_bar = fields.Str()\n\n\n''' \nwe're telling typemallow2 that we only want to generate interfaces from Schemas with \nan 'internal' context to './internal.ts' \n'''\ngenerate_ts('./internal.ts', context='internal')\n\n''' \nonly generate interfaces from Schemas with an 'external' context to './external.ts' \n'''\ngenerate_ts('./external.ts', context='external')\n```\n\n_internal.ts_\n```typescript\nexport interface Foo {\n    foo: string;\n}\n\nexport interface Bar {\n    bar: string;\n}\n```\n\n_external.ts_\n```typescript\nexport interface FooBar {\n    foo_bar: string;\n}\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adenh93/typemallow",
    "keywords": "Marshmallow,Typescript,Python,Flask,Django",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "typemallow2",
    "package_url": "https://pypi.org/project/typemallow2/",
    "platform": "any",
    "project_url": "https://pypi.org/project/typemallow2/",
    "project_urls": {
      "Homepage": "https://github.com/adenh93/typemallow"
    },
    "release_url": "https://pypi.org/project/typemallow2/0.0.3/",
    "requires_dist": [
      "marshmallow (>=2.0.0)",
      "marshmallow-enum (>=1.5)"
    ],
    "requires_python": "",
    "summary": "An elegant and automatic solution for generating/outputting Typescript interfaces and enums from your Marshmallow Schemas and enums classes.Extension of Aden Harold works on typemallow.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8673522,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "733c6eb30388116728397913c0a9be2e0a9c17f6e3eb5497a07f1487b04e09c6",
          "md5": "1444f276b35bb3703c692937bf60fea7",
          "sha256": "b2595d75e13e0cb4654713b067dbe330838099aa167d6745becd8d7ea431741e"
        },
        "downloads": -1,
        "filename": "typemallow2-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1444f276b35bb3703c692937bf60fea7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16740,
        "upload_time": "2020-11-16T21:52:46",
        "upload_time_iso_8601": "2020-11-16T21:52:46.833482Z",
        "url": "https://files.pythonhosted.org/packages/73/3c/6eb30388116728397913c0a9be2e0a9c17f6e3eb5497a07f1487b04e09c6/typemallow2-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86a2ebccf6cc570d4b91c08130c9b07412720ac8f2df77de1ec4ee2a597c2e32",
          "md5": "31fdd758feab0f458e94504ad519565a",
          "sha256": "c24f70cd6bd271c1ccb40b4afa3b019f161b19771ddb2c7f6b8c6a26f6abaeea"
        },
        "downloads": -1,
        "filename": "typemallow2-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "31fdd758feab0f458e94504ad519565a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4336,
        "upload_time": "2020-11-16T21:52:48",
        "upload_time_iso_8601": "2020-11-16T21:52:48.231385Z",
        "url": "https://files.pythonhosted.org/packages/86/a2/ebccf6cc570d4b91c08130c9b07412720ac8f2df77de1ec4ee2a597c2e32/typemallow2-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "733c6eb30388116728397913c0a9be2e0a9c17f6e3eb5497a07f1487b04e09c6",
        "md5": "1444f276b35bb3703c692937bf60fea7",
        "sha256": "b2595d75e13e0cb4654713b067dbe330838099aa167d6745becd8d7ea431741e"
      },
      "downloads": -1,
      "filename": "typemallow2-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1444f276b35bb3703c692937bf60fea7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16740,
      "upload_time": "2020-11-16T21:52:46",
      "upload_time_iso_8601": "2020-11-16T21:52:46.833482Z",
      "url": "https://files.pythonhosted.org/packages/73/3c/6eb30388116728397913c0a9be2e0a9c17f6e3eb5497a07f1487b04e09c6/typemallow2-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86a2ebccf6cc570d4b91c08130c9b07412720ac8f2df77de1ec4ee2a597c2e32",
        "md5": "31fdd758feab0f458e94504ad519565a",
        "sha256": "c24f70cd6bd271c1ccb40b4afa3b019f161b19771ddb2c7f6b8c6a26f6abaeea"
      },
      "downloads": -1,
      "filename": "typemallow2-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "31fdd758feab0f458e94504ad519565a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4336,
      "upload_time": "2020-11-16T21:52:48",
      "upload_time_iso_8601": "2020-11-16T21:52:48.231385Z",
      "url": "https://files.pythonhosted.org/packages/86/a2/ebccf6cc570d4b91c08130c9b07412720ac8f2df77de1ec4ee2a597c2e32/typemallow2-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}