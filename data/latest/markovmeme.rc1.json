{
  "info": {
    "author": "Vanessa Sochat",
    "author_email": "vsochat@stanford.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "# Markov Meme\n\n[![PyPI version](https://badge.fury.io/py/markovmeme.svg)](https://pypi.org/project/markovmeme/)\n[![GitHub actions status](https://github.com/vsoch/markovmeme/workflows/ci/badge.svg?branch=master)](https://github.com/vsoch/markovmeme/actions?query=branch%3Amaster+workflow%3Aci)\n\nWouldn't it be great to generate themed memes with Markov Models? Or just randomly\ngenerated text? I think so too.\n\n## Usage\n\n### Install\n\nYou can install from pypi\n\n```bash\npip install markovmeme\n```\n\nor install from the repository directly:\n\n```bash\n$ git clone https://github.com/vsoch/markovmeme\n$ python setup.py install\n```\n\n## Usage\n\nYou can see the basic usage as follows. Basically, there is a \"generate\" command:\n\n```bash\n$ markov-meme \nusage: markov-meme [-h] {generate} ...\n\nMarkov Meme Generator\n\noptional arguments:\n  -h, --help  show this help message and exit\n\nactions:\n  actions for Markov Meme Generator\n\n  {generate}  markovmeme actions\n    generate  generate a meme\n```\n\nYou can see the corpus available by looking at the generate help:\n\n```bash\n$ markov-meme generate --help\nusage: markov-meme generate [-h] [--outfile OUTFILE] [--fontsize FONTSIZE]\n                            [--font {OpenSans-Regular,Pacifico-Regular,Anton-Regular}]\n                            [--corpus {hamlet,dr_seuss,trump_speech,the_office,office/stanley,office/toby,office/meredith,office/holly,office/creed,office/oscar,office/deangelo,office/david,office/dwight,office/kelly,office/phyllis,office/jim,office/nellie,office/gabe,office/clark,office/roy,office/karen,office/michael,office/andy,office/charles,office/kevin,office/pam,office/ryan,office/erin,office/robert,office/darryl,office/pete,office/jan,office/jo,office/angela}]\n                            [--custom-corpus CUSTOM_CORPUS]\n                            [--image CUSTOM_IMAGE] [--no-model]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --outfile OUTFILE     the output file to save the image (defaults to\n                        randomly generated png)\n  --fontsize FONTSIZE   font size of text (if desired) defaults to 16\n  --font {OpenSans-Regular,Pacifico-Regular,Anton-Regular}\n                        choice of font (defaults to open sans)\n  --corpus {hamlet,dr_seuss,trump_speech,the_office,office/stanley,office/toby,office/meredith,office/holly,office/creed,office/oscar,office/deangelo,office/david,office/dwight,office/kelly,office/phyllis,office/jim,office/nellie,office/gabe,office/clark,office/roy,office/karen,office/michael,office/andy,office/charles,office/kevin,office/pam,office/ryan,office/erin,office/robert,office/darryl,office/pete,office/jan,office/jo,office/angela}\n                        the corpus to use to generate the meme, matches to\n                        images.\n  --custom-corpus CUSTOM_CORPUS\n                        A custom corpus file, full path\n  --image CUSTOM_IMAGE  A custom image file, full path\n  --no-model            Don't generate a sentence from corpus, just randomly\n                        select sentence.\n```\n\n### Random Generation\n\nTo generate a meme from a random corpus, you can just run:\n\n```bash\n$ markov-meme generate\n```\n\nIf the randomly selected corpus doesn't have matching images, you'll see\n\n```bash\nNo images exist for corpus office/clark. Please specify --image.\n```\n\n### Corpus and Image Selection\n\nAnd you can run the same command again, or specify a specific corpus and image.\n\n```bash\n$ markov-meme generate --corpus office/michael --image markovmeme/data/images/office/michael1.png\n```\n\nThe same can be done for specifying a custom corpus, which should be a text file with lines\nto generate the model from.\n\n```bash\n$ markov-meme generate --custom-corpus markovmeme/data/corpus/office/michael.txt --image markovmeme/data/images/office/michael2.png\n```\n\n### Skip Model\n\nIf you don't want to use a model (and want real lines from some corpus) add `--no-model`\n\n```bash\n$ markov-meme generate --no-model\n```\n\n## Interactive Python\nFor the most part, text size and number of characters are limited to fit reasonable within\n1-3 lines. If you want to customize or otherwise play around with this, you can interact\nwith the class directly:\n\n```python\nfrom markovmeme.main import MemeImage\nfrom markovmeme.text import generate_text\n\n# corpus is absolute path, or relative to module's data/corpus folder\ncorpus = \"office/michael\"\n\ntext = generate_text(corpus=corpus, use_model=True, size=10)\n\n# Set image to full path, or None to select based on corpus\nmeme = MemeImage(image=None, corpus=corpus)\n\n# Add text generated, centered on top\nmeme.write_text(text, fontsize=args.fontsize, font=font)\n\n# Leave outfile as None to generate random name\nmeme.save_image(None)\n```\n\n## Support\n\nDo you have a question? Or want to suggest a feature to make it better?\nPlease [open an issue!](https://www.github.com/vsoch/markovmeme)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.github.com/vsoch/markovmeme",
    "keywords": "generate memes using a Markov Model",
    "license": "LICENSE",
    "maintainer": "Vanessa Sochat",
    "maintainer_email": "vsochat@stanford.edu",
    "name": "markovmeme",
    "package_url": "https://pypi.org/project/markovmeme/",
    "platform": "",
    "project_url": "https://pypi.org/project/markovmeme/",
    "project_urls": {
      "Homepage": "http://www.github.com/vsoch/markovmeme"
    },
    "release_url": "https://pypi.org/project/markovmeme/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Command line tool for generating markov memes.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6373023,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87e1526c8d324573ce45da47d845e27929e9d5b66dd769e108f568038c77ede3",
          "md5": "454f7ba7397d0f244deb570e8dcac155",
          "sha256": "8518ffaf4a430efc31d3fd5e9d2d20ca3829e8e94785eefcaed8bb489e8fbe72"
        },
        "downloads": -1,
        "filename": "markovmeme-0.0.1-py3.7.egg",
        "has_sig": false,
        "md5_digest": "454f7ba7397d0f244deb570e8dcac155",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": null,
        "size": 51916145,
        "upload_time": "2019-12-29T23:27:36",
        "upload_time_iso_8601": "2019-12-29T23:27:36.423464Z",
        "url": "https://files.pythonhosted.org/packages/87/e1/526c8d324573ce45da47d845e27929e9d5b66dd769e108f568038c77ede3/markovmeme-0.0.1-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aecabf345eb16403330c63d66890e5814219647d95b1f7df9cf1c9a39257880c",
          "md5": "cf8cbce9839208b11fb3b036cabcf02c",
          "sha256": "bd46d74dcda01f73d978a91de696b5a1a077bda9263464188ac902333e1a9752"
        },
        "downloads": -1,
        "filename": "markovmeme-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cf8cbce9839208b11fb3b036cabcf02c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 51839448,
        "upload_time": "2019-12-29T23:28:06",
        "upload_time_iso_8601": "2019-12-29T23:28:06.172020Z",
        "url": "https://files.pythonhosted.org/packages/ae/ca/bf345eb16403330c63d66890e5814219647d95b1f7df9cf1c9a39257880c/markovmeme-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87e1526c8d324573ce45da47d845e27929e9d5b66dd769e108f568038c77ede3",
        "md5": "454f7ba7397d0f244deb570e8dcac155",
        "sha256": "8518ffaf4a430efc31d3fd5e9d2d20ca3829e8e94785eefcaed8bb489e8fbe72"
      },
      "downloads": -1,
      "filename": "markovmeme-0.0.1-py3.7.egg",
      "has_sig": false,
      "md5_digest": "454f7ba7397d0f244deb570e8dcac155",
      "packagetype": "bdist_egg",
      "python_version": "3.7",
      "requires_python": null,
      "size": 51916145,
      "upload_time": "2019-12-29T23:27:36",
      "upload_time_iso_8601": "2019-12-29T23:27:36.423464Z",
      "url": "https://files.pythonhosted.org/packages/87/e1/526c8d324573ce45da47d845e27929e9d5b66dd769e108f568038c77ede3/markovmeme-0.0.1-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aecabf345eb16403330c63d66890e5814219647d95b1f7df9cf1c9a39257880c",
        "md5": "cf8cbce9839208b11fb3b036cabcf02c",
        "sha256": "bd46d74dcda01f73d978a91de696b5a1a077bda9263464188ac902333e1a9752"
      },
      "downloads": -1,
      "filename": "markovmeme-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cf8cbce9839208b11fb3b036cabcf02c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 51839448,
      "upload_time": "2019-12-29T23:28:06",
      "upload_time_iso_8601": "2019-12-29T23:28:06.172020Z",
      "url": "https://files.pythonhosted.org/packages/ae/ca/bf345eb16403330c63d66890e5814219647d95b1f7df9cf1c9a39257880c/markovmeme-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}