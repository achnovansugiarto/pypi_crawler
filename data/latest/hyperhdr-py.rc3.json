{
  "info": {
    "author": "mjoshd",
    "author_email": "mjoshd@live.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Home Automation"
    ],
    "description": "# This library is a modified version of [Dermot Duffy](https://github.com/dermotduffy)'s excellent [hyperion-py](https://github.com/dermotduffy/hyperion-py)\n\n<!-- [![PyPi](https://img.shields.io/pypi/v/hyperhdr-py.svg?style=flat-square)](https://pypi.org/project/hyperhdr-py/)\n[![PyPi](https://img.shields.io/pypi/pyversions/hyperhdr-py.svg?style=flat-square)](https://pypi.org/project/hyperhdr-py/)\n[![Build Status](https://img.shields.io/github/workflow/status/dermotduffy/hyperhdr-py/Build?style=flat-square)](https://github.com/dermotduffy/hyperhdr-py/actions/workflows/build.yaml)\n[![Test Coverage](https://img.shields.io/codecov/c/gh/dermotduffy/hyperhdr-py?style=flat-square)](https://codecov.io/gh/dermotduffy/hyperhdr-py)\n[![License](https://img.shields.io/github/license/dermotduffy/hyperhdr-py.svg?style=flat-square)](LICENSE)\n[![BuyMeCoffee](https://img.shields.io/badge/buy%20me%20a%20coffee-donate-yellow.svg?style=flat-square)](https://www.buymeacoffee.com/dermotdu) -->\n\n## Thank you dermotduffy! This literally would not exist without you üéâ\n\n### I am not a Python developer so you may run into something that doesn't work quite right. I've tested this on my own setup and it works well. If you do run into any problems, I'm sorry üôÅ\n\n## Feel free to open an issue and/or help if you know Python üòÄ\n\n<img src=\"https://github.com/mjoshd/hyperhdr-py/blob/main/images/hyperhdrlogo.png?raw=true\"\n     alt=\"HyperHDR logo\"\n     width=\"160px\"\n     align=\"left\"\n     style=\"float: left;\" />\n\n## Library\n\nPython library for [HyperHDR](https://github.com/awawa-dev/HyperHDR).\n\n<!-- [HyperHDR](https://github.com/awawa-dev/HyperHDR). See [JSON\nAPI](https://docs.hyperhdr-project.org/en/json/) for more details about the\ninputs and outputs of this library.\n\n# Installation\n\n```bash\npip3 install hyperhdr-py\n```\n\n# Usage\n\n## Data model philosophy\n\nWhilst not universally true, this library attempts to precisely represent the\ndata model, API and parameters as defined in the [HyperHDR JSON\ndocumentation](https://docs.hyperhdr-project.org/en/json/). Thus no attempt is\nmade (intentionally) to present convenient accessors/calls at a finer level of\ngranularity than the model already supports. This is to ensure the client has a\ndecent chance at staying functional regardless of underlying data model changes\nfrom the server, and the responsibility to match the changes to the server's\ndata model (e.g. new HyperHDR server features) belong to the caller.\n\n### Constructor Arguments\n\nThe following arguments may be passed to the `HyperHDRClient` constructor:\n\n|Argument|Type|Default|Description|\n|--------|----|-------|-----------|\n|host    |`str`||Host or IP to connect to|\n|port    |`int`|19444|Port to connect to|\n|default_callback|`callable`|None|A callable for HyperHDR callbacks. See [callbacks](#callbacks)|\n|callbacks|`dict`|None|A dictionary of callables keyed by the update name. See [callbacks](#callbacks)|\n|token|`str`|None|An authentication token|\n|instance|`int`|0|An instance id to switch to upon connection|\n|origin|`str`|\"hyperhdr-py\"|An arbitrary string describing the calling application|\n|timeout_secs|`float`|5.0|The number of seconds to wait for a server response or connection attempt before giving up. See [timeouts](#timeouts)|\n|retry_secs|`float`|30.0|The number of seconds between connection attempts|\n|raw_connection|`bool`|False|If True, the connect call will establish the network connection but not attempt to authenticate, switch to the required instance or load state. The client must call `async_client_login` to login, `async_client_switch_instance` to switch to the configured instance and `async_get_serverinfo` to load the state manually. This may be useful if the caller wishes to communicate with the server prior to authentication.|\n\n### Connection, disconnection and client control calls\n\n* `async_client_connect()`: Connect the client.\n* `async_client_disconnect()`: Disconnect the client.\n* `async_client_login()`: Login a connected client. Automatically called by\n     `async_client_connect()` unless the `raw_connection` constructor argument is True.\n* `async_client_switch_instance()`: Switch to the configured instance on the HyperHDR\n     server. Automatically called by `async_client_connect()` unless the `raw_connection`\n     constructor argument is True.\n\n### Native API Calls\n\nAll API calls can be found in\n[client.py](https://github.com/dermotduffy/hyperhdr-py/blob/master/hyperhdr/client.py).\nAll async calls start with `async_`.\n\n|Send request and await response|Send request only|Documentation|\n|-------------------------------|-----------------|-------------|\n|async_clear|async_send_clear|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#clear)|\n|async_image_stream_start|async_send_image_stream_start|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#live-image-stream)|\n|async_image_stream_stop|async_send_image_stream_stop|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#live-image-stream)|\n|async_is_auth_required|async_send_is_auth_required|[Docs](https://docs.hyperhdr-project.org/en/json/Authorization.html#authorization-check)|\n|async_led_stream_start|async_send_led_stream_start|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#live-led-color-stream)|\n|async_led_stream_stop|async_send_led_stream_stop|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#live-led-color-stream)|\n|async_login|async_send_login|[Docs](https://docs.hyperhdr-project.org/en/json/Authorization.html#login-with-token)|\n|async_logout|async_send_logout|[Docs](https://docs.hyperhdr-project.org/en/json/Authorization.html#logout)|\n|async_request_token|async_send_request_token|[Docs](https://docs.hyperhdr-project.org/en/json/Authorization.html#request-a-token)|\n|async_request_token_abort|async_send_request_token_abort|[Docs](https://docs.hyperhdr-project.org/en/json/Authorization.html#request-a-token)|\n|async_get_serverinfo|async_send_get_serverinfo|[Docs](https://docs.hyperhdr-project.org/en/json/ServerInfo.html#parts)|\n|async_set_adjustment|async_send_set_adjustment|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#adjustments)|\n|async_set_color|async_send_set_color|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#set-color)|\n|async_set_component|async_send_set_component|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#control-components)|\n|async_set_effect|async_send_set_effect|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#set-effect)|\n|async_set_image|async_send_set_image|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#set-image)|\n|async_set_led_mapping_type|async_send_set_led_mapping_type|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#led-mapping)|\n|async_set_sourceselect|async_send_set_sourceselect|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#source-selection)|\n|async_set_videomode|async_send_set_videomode|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#video-mode)|\n|async_start_instance|async_send_start_instance|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#control-instances)|\n|async_stop_instance|async_send_stop_instance|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#control-instances)|\n|async_switch_instance|async_send_switch_instance|[Docs](https://docs.hyperhdr-project.org/en/json/Control.html#api-instance-handling)|\n|async_sysinfo|async_send_sysinfo|[Docs](https://docs.hyperhdr-project.org/en/json/ServerInfo.html#system-hyperhdr)|\n\nNote that the `command` and `subcommand` keys shown in the above linked\ndocumentation will automatically be included in the calls the client sends, and\ndo not need to be specified.\n\n## Client inputs / outputs\n\nThe API parameters and output are all as defined in the [JSON API\ndocumentation](https://docs.hyperhdr-project.org/en/json/).\n\n## Example usage\n\n```python\n#!/usr/bin/env python\n\"\"\"Simple HyperHDR client read demonstration.\"\"\"\n\nimport asyncio\n\nfrom hyperhdr import client, const\n\nHOST = \"hyperhdr\"\n\n\nasync def print_brightness() -> None:\n    \"\"\"Print HyperHDR brightness.\"\"\"\n\n    async with client.HyperHDRClient(HOST) as hyperhdr_client:\n        assert hyperhdr_client\n\n        adjustment = hyperhdr_client.adjustment\n        assert adjustment\n\n        print(\"Brightness: %i%%\" % adjustment[0][const.KEY_BRIGHTNESS])\n\n\nif __name__ == \"__main__\":\n    asyncio.get_event_loop().run_until_complete(print_brightness())\n```\n\n## Running in the background\n\nA background `asyncio task` runs to process all post-connection inbound data\n(e.g. request responses, or subscription updates from state changes on the\nserver side). This background task must either be started post-connection, or\nstart (and it will itself establish connection).\n\nOptionally, this background task can call callbacks back to the user.\n\n### Waiting for responses\n\nIf the user makes a call that does not have `_send_` in the name (see table\nabove), the function call will wait for the response and return it to the\ncaller. This matching of request & response is done via the `tan` parameter. If\nnot specified, the client will automatically attach a `tan` integer, and this\nwill be visible in the returned output data. This matching is necessary to\ndifferentiate between responses due to requests, and \"spontaneous data\" from\nsubscription updates.\n\n#### Example: Waiting for a response\n\n```python\n#!/usr/bin/env python\n\"\"\"Simple HyperHDR client request demonstration.\"\"\"\n\nimport asyncio\n\nfrom hyperhdr import client\n\nHOST = \"hyperhdr\"\n\n\nasync def print_if_auth_required() -> None:\n    \"\"\"Print whether auth is required.\"\"\"\n\n    hc = client.HyperHDRClient(HOST)\n    await hc.async_client_connect()\n\n    result = await hc.async_is_auth_required()\n    print(\"Result: %s\" % result)\n\n    await hc.async_client_disconnect()\n\n\nasyncio.get_event_loop().run_until_complete(print_if_auth_required())\n```\n\nOutput:\n\n```\nResult: {'command': 'authorize-tokenRequired', 'info': {'required': False}, 'success': True, 'tan': 1}\n```\n\n#### Example: Sending commands\n\nA slightly more complex example that sends commands (clears the HyperHDR source\nselect at a given priority, then sets color at that same priority).\n\n```python\n#!/usr/bin/env python\n\"\"\"Simple HyperHDR client request demonstration.\"\"\"\n\nimport asyncio\nimport logging\nimport sys\n\nfrom hyperhdr import client\n\nHOST = \"hyperhdr\"\nPRIORITY = 20\n\n\nasync def set_color() -> None:\n    \"\"\"Set red color on HyperHDR.\"\"\"\n\n    async with client.HyperHDRClient(HOST) as hc:\n        assert hc\n\n        if not await hc.async_client_connect():\n            logging.error(\"Could not connect to: %s\", HOST)\n            return\n\n        if not client.ResponseOK(\n            await hc.async_clear(priority=PRIORITY)\n        ) or not client.ResponseOK(\n            await hc.async_set_color(\n                color=[255, 0, 0], priority=PRIORITY, origin=sys.argv[0]\n            )\n        ):\n            logging.error(\"Could not clear/set_color on: %s\", HOST)\n            return\n\n\nlogging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\nasyncio.get_event_loop().run_until_complete(set_color())\n```\n\n#### Example: Starting and switching instances\n\nThe following example will start a stopped instance, wait for it to be ready,\nthen switch to it. Uses [callbacks](#callbacks), discussed below.\n\n```python\n#!/usr/bin/env python\n\"\"\"Simple HyperHDR client request demonstration.\"\"\"\n\nfrom __future__ import annotations\n\nimport asyncio\nimport logging\nimport sys\nfrom typing import Any\n\nfrom hyperhdr import client\n\nHOST = \"hyperhdr\"\nPRIORITY = 20\n\n\nasync def instance_start_and_switch() -> None:\n    \"\"\"Wait for an instance to start.\"\"\"\n\n    instance_ready = asyncio.Event()\n\n    def instance_update(json: dict[str, Any]) -> None:\n        for data in json[\"data\"]:\n            if data[\"instance\"] == 1 and data[\"running\"]:\n                instance_ready.set()\n\n    async with client.HyperHDRClient(\n        HOST, callbacks={\"instance-update\": instance_update}\n    ) as hc:\n        assert hc\n\n        if not client.ResponseOK(await hc.async_start_instance(instance=1)):\n            logging.error(\"Could not start instance on: %s\", HOST)\n            return\n\n        # Blocks waiting for the instance to start.\n        await instance_ready.wait()\n\n        if not client.ResponseOK(await hc.async_switch_instance(instance=1)):\n            logging.error(\"Could not switch instance on: %s\", HOST)\n            return\n\n\nlogging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\nasyncio.get_event_loop().run_until_complete(instance_start_and_switch())\n```\n\n<a name=\"callbacks\"></a>\n\n### Callbacks\n\nThe client can be configured to callback as the HyperHDR server reports new\nvalues. There are two classes of callbacks supported:\n\n* **default_callback**: This callback will be called when a more specific callback is not specified.\n* **callbacks**: A dict of callbacks keyed on the HyperHDR subscription 'command' (see [JSON API documentation](https://docs.hyperhdr-project.org/en/json/))\n\nCallbacks can be specified in the `HyperHDRClient` constructor\n(`default_callback=` or `callbacks=` arguments) or after construction via the\n`set_callbacks()` and `set_default_callback()` methods.\n\nAs above, the `callbacks` dict is keyed on the relevant HyperHDR subscription\n`command` (e.g. `components-update`, `priorities-update`). The client also\nprovides a custom callback with command `client-update` of the following\nform:\n\n```python\n{\"command\": \"client-update\",\n \"connected\": True,\n \"logged-in\": True,\n \"instance\": 0,\n \"loaded-state\": True}\n```\n\nThis can be used to take special action as the client connects or disconnects from the server.\n\n#### Example: Callbacks\n\n```python\n#!/usr/bin/env python\n\"\"\"Simple HyperHDR client callback demonstration.\"\"\"\n\nfrom __future__ import annotations\n\nimport asyncio\nfrom typing import Any\n\nfrom hyperhdr import client\n\nHOST = \"hyperhdr\"\n\n\ndef callback(json: dict[str, Any]) -> None:\n    \"\"\"Sample callback function.\"\"\"\n\n    print(\"Received HyperHDR callback: %s\" % json)\n\n\nasync def show_callback() -> None:\n    \"\"\"Show a default callback is called.\"\"\"\n\n    async with client.HyperHDRClient(HOST, default_callback=callback):\n        pass\n\n\nif __name__ == \"__main__\":\n    asyncio.get_event_loop().run_until_complete(show_callback())\n```\n\nOutput, showing the progression of connection stages:\n\n```\nReceived HyperHDR callback: {'connected': True, 'logged-in': False, 'instance': None, 'loaded-state': False, 'command': 'client-update'}\nReceived HyperHDR callback: {'connected': True, 'logged-in': True, 'instance': None, 'loaded-state': False, 'command': 'client-update'}\nReceived HyperHDR callback: {'connected': True, 'logged-in': True, 'instance': 0, 'loaded-state': False, 'command': 'client-update'}\nReceived HyperHDR callback: {'command': 'serverinfo', ... }\nReceived HyperHDR callback: {'connected': True, 'logged-in': True, 'instance': 0, 'loaded-state': True, 'command': 'client-update'}\n```\n\n## ThreadedHyperHDRClient\n\nA `ThreadedHyperHDRClient` is also provided as a convenience wrapper to for\nnon-async code. The `ThreadedHyperHDRClient` wraps the async calls with\nnon-async versions (methods are named as shown above, except do not start with\n`async_`).\n\n### Waiting for the thread to initialize the client\n\nThe thread must be given a chance to initialize the client prior to interaction\nwith it. This method call will block the caller until the client has been initialized.\n\n* wait_for_client_init()\n\n### Example use of Threaded client\n\n```python\n#!/usr/bin/env python\n\"\"\"Simple Threaded HyperHDR client demonstration.\"\"\"\n\nfrom hyperhdr import client, const\n\nHOST = \"hyperhdr\"\n\nif __name__ == \"__main__\":\n    hyperhdr_client = client.ThreadedHyperHDRClient(HOST)\n\n    # Start the asyncio loop in a new thread.\n    hyperhdr_client.start()\n\n    # Wait for the client to initialize in the new thread.\n    hyperhdr_client.wait_for_client_init()\n\n    # Connect the client.\n    hyperhdr_client.client_connect()\n\n    print(\"Brightness: %i%%\" % hyperhdr_client.adjustment[0][const.KEY_BRIGHTNESS])\n\n    # Disconnect the client.\n    hyperhdr_client.client_disconnect()\n\n    # Stop the loop (will stop the thread).\n    hyperhdr_client.stop()\n\n    # Join the created thread.\n    hyperhdr_client.join()\n```\n\nOutput:\n\n```\nBrightness: 59%\n```\n\n## Exceptions / Errors\n\n### Philosophy\n\nHyperHDRClient strives not to throw an exception regardless of network\ncircumstances, reconnection will automatically happen in the background.\nExceptions are only raised (intentionally) for instances of likely programmer\nerror.\n\n### HyperHDRError\n\nNot directly raised, but other exceptions inherit from this.\n\n### HyperHDRClientTanNotAvailable\n\nException raised if a `tan` parameter is provided to an API call, but that\n`tan` parameter is already being used by another in-progress call. Users\nshould either not specify `tan` at all (and the client library will\nautomatically manage it in an incremental fashion), or if specified manually,\nit is the caller's responsibility to ensure no two simultaneous calls share a\n`tan` (as otherwise the client would not be able to match the call to the\nresponse, and this exception will be raised automatically prior to the call).\n\n### \"Task was destroyed but it is pending!\"\n\nIf a `HyperHDRClient` object is connected but destroyed prior to disconnection, a warning message may be printed (\"Task was destroyed but it is pending!\"). To avoid this, ensure to always call `async_client_disconnect` prior to destruction of a connected client. Alternatively use the async context manager:\n\n```python\nasync with client.HyperHDRClient(TEST_HOST, TEST_PORT) as hc:\n    if not hc:\n        return\n    ...\n```\n\n<a name=\"timeouts\"></a>\n\n## Timeouts\n\nThe client makes liberal use of timeouts, which may be specified at multiple levels:\n\n* In the client constructor argument `timeout_secs`, used for connection and requests.\n* In each request using a `timeout_secs` argument to the individual calls\n\nTimeout values:\n\n* `None`: If `None` is used as a timeout, the client will wait forever.\n* `0`: If `0` is used as a timeout, the client default (specified in the constructor) will be used.\n* `>0.0`: This number of seconds (or partial seconds) will be used.\n\nBy default, all requests will honour the `timeout_secs` specified in the client constructor unless explicitly overridden and defaults to 5 seconds (see [const.py](https://github.com/dermotduffy/hyperhdr-py/blob/master/hyperhdr/const.py#L95)). The one exception to this is the `async_send_request_token` which has a much larger default (180 seconds, see [const.py](https://github.com/dermotduffy/hyperhdr-py/blob/master/hyperhdr/const.py#L96)) as this request involves the user needing the interact with the HyperHDR UI prior to the call being able to return.\n\n## Helpers\n\n### ResponseOK\n\nA handful of convenience callable classes are provided to determine whether\nserver responses were successful.\n\n* `ResponseOK`: Whether any HyperHDR command response was successful (general).\n* `ServerInfoResponseOK`: Whether a `async_get_serverinfo` was successful.\n* `LoginResponseOK`: Whether an `async_login` was successful.\n* `SwitchInstanceResponseOK`: Whether an `async_switch_instance` command was successful.\n\n#### Example usage\n\n```\nif not client.ResponseOK(await hc.async_clear(priority=PRIORITY))\n```\n\n### Auth ID\n\nWhen requesting an auth token, a 5-character ID can be specified to ensure the\nadmin user is authorizing the right request from the right origin. By default\nthe `async_request_token` will randomly generate an ID, but if one is required\nto allow the user to confirm a match, it can be explicitly provided. In this case,\nthis helper method is made available.\n\n* `generate_random_auth_id`: Generate a random 5-character auth ID for external display and inclusion in a call to `async_request_token`.\n\n#### Example usage\n\n```\nauth_id  = hc.generate_random_auth_id()\nhc.async_send_login(comment=\"Trustworthy actor\", id=auth_id)\n# Show auth_id to the user to allow them to verify the origin of the request,\n# then have them visit the HyperHDR UI.\n``` -->\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mjoshd/hyperhdr-py",
    "keywords": "hyperhdr",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hyperhdr-py",
    "package_url": "https://pypi.org/project/hyperhdr-py/",
    "platform": null,
    "project_url": "https://pypi.org/project/hyperhdr-py/",
    "project_urls": {
      "Homepage": "https://github.com/mjoshd/hyperhdr-py",
      "Repository": "https://github.com/mjoshd/hyperhdr-py"
    },
    "release_url": "https://pypi.org/project/hyperhdr-py/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.8,<4.0",
    "summary": "HyperHDR Ambient Lighting Python Package",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13743832,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0358c78995df9cd02006abc22d93ab5a2b1d3b6512070df0d7a988b30c398c27",
          "md5": "00b8ace294dd746070527abffece2858",
          "sha256": "f10297a8b197c23d1dc2c514efdae80082f3391831bfd1fd910d008c3142c075"
        },
        "downloads": -1,
        "filename": "hyperhdr_py-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00b8ace294dd746070527abffece2858",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 22153,
        "upload_time": "2021-12-07T15:13:32",
        "upload_time_iso_8601": "2021-12-07T15:13:32.692991Z",
        "url": "https://files.pythonhosted.org/packages/03/58/c78995df9cd02006abc22d93ab5a2b1d3b6512070df0d7a988b30c398c27/hyperhdr_py-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8bfd949da24eee59d259c05ba7855c6921c983ef527b457d10e790f17863f41",
          "md5": "2ef38c7c76c7dbb9fefa7d4d959b7249",
          "sha256": "a6d602b729fcd4fc9b107f757a1d52d19a8e67fe9db479602fa8ac7a26f7fd7f"
        },
        "downloads": -1,
        "filename": "hyperhdr-py-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2ef38c7c76c7dbb9fefa7d4d959b7249",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 23977,
        "upload_time": "2021-12-07T15:13:33",
        "upload_time_iso_8601": "2021-12-07T15:13:33.776525Z",
        "url": "https://files.pythonhosted.org/packages/c8/bf/d949da24eee59d259c05ba7855c6921c983ef527b457d10e790f17863f41/hyperhdr-py-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c2013f87f37800ee95e91a64a8761de13cd2e43ca47f336821c8ca31e82713a",
          "md5": "d141e710e6ec460db53daebe338d3b46",
          "sha256": "88e79ad4f007c819920ded64a932657c84c82f9555a0382d149773416d500bdf"
        },
        "downloads": -1,
        "filename": "hyperhdr_py-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d141e710e6ec460db53daebe338d3b46",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 22187,
        "upload_time": "2021-12-08T11:16:13",
        "upload_time_iso_8601": "2021-12-08T11:16:13.021895Z",
        "url": "https://files.pythonhosted.org/packages/0c/20/13f87f37800ee95e91a64a8761de13cd2e43ca47f336821c8ca31e82713a/hyperhdr_py-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f09460018f866375f2b686e63fbcf246797065125b6d735ae17107b90bf0ad6f",
          "md5": "ae0eeff476ba84b7dd534184938c4c93",
          "sha256": "f18d85465e8ee0248917ffbdf3fb71fc5ec5bfb92fd0b346ee4033b4ef580248"
        },
        "downloads": -1,
        "filename": "hyperhdr-py-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ae0eeff476ba84b7dd534184938c4c93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 23999,
        "upload_time": "2021-12-08T11:16:14",
        "upload_time_iso_8601": "2021-12-08T11:16:14.362745Z",
        "url": "https://files.pythonhosted.org/packages/f0/94/60018f866375f2b686e63fbcf246797065125b6d735ae17107b90bf0ad6f/hyperhdr-py-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5bad92d1d23fd94bc38538085f322e559f65b0b5e72a8298ae24348ae3aa338",
          "md5": "33c29c496a3f134012c84bb861688cda",
          "sha256": "404a6d67ad573110d87f71a6bd4c15d910b03d62090b92d813f96f1af156539d"
        },
        "downloads": -1,
        "filename": "hyperhdr_py-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "33c29c496a3f134012c84bb861688cda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 22245,
        "upload_time": "2022-05-07T15:13:52",
        "upload_time_iso_8601": "2022-05-07T15:13:52.296597Z",
        "url": "https://files.pythonhosted.org/packages/f5/ba/d92d1d23fd94bc38538085f322e559f65b0b5e72a8298ae24348ae3aa338/hyperhdr_py-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c404976cc8705a51face7a077594abd1a12cf5ddbb476a89704ede8b47a3c8a",
          "md5": "022754034bd35eb7ca46388f74eed149",
          "sha256": "b056017adb472058cfe8fff36a1507ab1f1be66978735bba682d14855baabe78"
        },
        "downloads": -1,
        "filename": "hyperhdr-py-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "022754034bd35eb7ca46388f74eed149",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 24043,
        "upload_time": "2022-05-07T15:13:53",
        "upload_time_iso_8601": "2022-05-07T15:13:53.607839Z",
        "url": "https://files.pythonhosted.org/packages/3c/40/4976cc8705a51face7a077594abd1a12cf5ddbb476a89704ede8b47a3c8a/hyperhdr-py-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5bad92d1d23fd94bc38538085f322e559f65b0b5e72a8298ae24348ae3aa338",
        "md5": "33c29c496a3f134012c84bb861688cda",
        "sha256": "404a6d67ad573110d87f71a6bd4c15d910b03d62090b92d813f96f1af156539d"
      },
      "downloads": -1,
      "filename": "hyperhdr_py-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "33c29c496a3f134012c84bb861688cda",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 22245,
      "upload_time": "2022-05-07T15:13:52",
      "upload_time_iso_8601": "2022-05-07T15:13:52.296597Z",
      "url": "https://files.pythonhosted.org/packages/f5/ba/d92d1d23fd94bc38538085f322e559f65b0b5e72a8298ae24348ae3aa338/hyperhdr_py-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c404976cc8705a51face7a077594abd1a12cf5ddbb476a89704ede8b47a3c8a",
        "md5": "022754034bd35eb7ca46388f74eed149",
        "sha256": "b056017adb472058cfe8fff36a1507ab1f1be66978735bba682d14855baabe78"
      },
      "downloads": -1,
      "filename": "hyperhdr-py-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "022754034bd35eb7ca46388f74eed149",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 24043,
      "upload_time": "2022-05-07T15:13:53",
      "upload_time_iso_8601": "2022-05-07T15:13:53.607839Z",
      "url": "https://files.pythonhosted.org/packages/3c/40/4976cc8705a51face7a077594abd1a12cf5ddbb476a89704ede8b47a3c8a/hyperhdr-py-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}