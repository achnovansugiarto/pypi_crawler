{
  "info": {
    "author": "Federico Di Marzo",
    "author_email": "mail.federicodimarzo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## Introduction\n\nThis python module is designed to offer a collection of functions and classes that can be used to give a meaningful interpretation of a succession of midi note messages, in terms of rhythm and melody.\n\nThe developement of this project started with the idea of creating a parsing software that could be used to output rhythmic and melodic symbols, that could be further processed by some machine learning algorithm (based on Markov models, grammars or similar techniques).\n\nThe output symbols of the parsing are based on the Impro-Visor software notation (https://www.cs.hmc.edu/~keller/jazz/improvisor/) and the theory supporting it can be found at this link https://www.cs.hmc.edu/~keller/jazz/improvisor/papers.html .\n\n## Installation\nThe package can easily be installed using the pip package manager.\n```shell\npip install abstract_melody_parser\n```\n\n## MidiQueue\nTo parse note_on/note_off messages, a particular data structure called MidiQueue is used. This queue stores midi note messages with a timestamp, that is needed to parse the rhythmic structure of a melody. This data structure is supposed to collect only melodies, chords are not supported, if multiple note_on messages are pushed into it with timestamps too close with each other, only the first one will be mantained.\n\nIn order to insert a new note message with a timestamp included, the get_timestamp_message function must be used.\n\n```python\nimport abstract_melody_parser as amp\n\nnote_queue = amp.MidiNoteQueue()\nnote_queue.push(amp.get_timestamp_msg('note_on', 47))\n# some temporal delay...\nnote_queue.push(amp.get_timestamp_msg('note_off', 47))\n```\n\nBefore parsing a midi queue, it's suggested to clean the note_on messages that are still missing the relative note_off message.\n```python\nnote_queue.clean_unclosed_note_ons()\n```\n\nSome other methods are exposed for extra flexibility.\n```python\nmsg = note_queue.pop() # gets the oldest note message removing it from the queue\nlist_of_msg = note_queue.get_container() # to deal directly with the data container\nmusical_notes = note_queue.get_notes() # to obtain a list of notes in std notation\nnote_queue.clear() # clears the queue\n```\n\nThe use of the MidiQueue for the melodic and rhythic parsing will be explained in the following sections.\n\n\n## Parsing melodies\n\nThe melody parsing allows to translate a midi note number in a abstract melody notation. This parser supports three different abstract melody symbols.\n\n```\nc: chord tone\nl: color tone\nx: random tone\n```\n\nAn abstract melody can be realized in a particular chord; in order to obtain the correct abstract melody symbol, is necessary to input both a note in standard notation, and a chord. To obtain a note in standard notation from a midi note value, an additional parsing function is needed.\n\n```python\n\nmidi_msg = note_queue.pop() # getting a midi message\nnote_midi = midi_msg['note'] # getting the midi note number\nnote_std_notation = amp.parse_midi_note(note_midi) # from midi note number to std note notation\nchord = 'CM' # C major chord\nnote_abstract_melody_notation = amp.parse_musical_note(note_std_notation, chord) # from std note notation to abstract note notation\n```\n\nThe notes in standard notation are uppercase letters, and a sharp symbol can be present (diesis are not used)\n\n```python\nmusical_notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n```\n\nTo modify the particular tones (chord or color tones) of a chord or to add a new one, the chord_tones dictionary, inside the chord.py script can be edited.\n\n```python\n# excerpt of the dictionary\nchord_tones = {\n    'CM': {\n        'c': ['C', 'E', 'G'], # chord tones can be added here\n        'l': ['B', 'D',  'F', 'A'] # color tones can be added here\n    },\n    # the list continues ...\n}\n```\n\n## Parsing rhythm\n\nThe rhythmic parsing process, allows to translate a series of notes composing a melody, in multiple symbols describing the duration of each note. These are the symbol used to represent the rhythm, they are related to a certain bpm and they refer to a 4/4 rhythmic signature.\n\n```\n1: whole note\n2: half note\n4: quarter note\n4dot: quarter note dotted\n4t: quarter note triplet\n8: eight note\n8t: eight note triplet\n16: sixteenth note\n16t: sixteenth note triplet\n```\n\nTo define a rhythmic frame for the analysis, a duration dictionary must be created and updated every time the bpm changes.\n\n```python\nbpm = 120.5\ndurations = amp.get_durations(bpm)\n```\n\nAfter defining the durations from the bpm, the parsing can follow. It will return a list of symbols for all the notes in the melody.\n\n```python\nnoteQueue.clean_unclosed_note_ons() # always do that before parsing\nrhythmic_symbols = amp.parse_rhythm(note_queue, durations)\n```\n\n## Putting all together\n\nSometimes the informative content of a melody can only be found in the rhythm or in the armonic relations between the notes and a chord, but in many other occasions, is the underlying relation between the two that really expresses the message that a musitian is trying to share with his/her performance. Following this perspective, it can be useful to perform both melodic and rhythmic parsing from a single MidiQueue, and read the resulting symbols as pairs. Let's suppose to parse a MidiQueue that contains a melody playing on a Dm chord\n\n```python\ncurrent_chord = 'Dm'\nbpm = 125\ndurations = amp.get_durations(bpm)\n\nnoteQueue.clean_unclosed_note_ons() # again, don't forget to clean the unclosed note_on messages\nnotes = midi_queue.get_notes()\n\n# list comprehension to map the std notes to an abstract melody\nabstract_melody = [amp.parse_musical_note(note, current_chord) for note in notes]\n\n# getting the rhythm too\nrhythm = amp.parse_rhythm(midi_queue, durations)\n\n```\n\nThe resulting lists can than be merged in a single one.\n```python\nfull_melody = [x+y for x in abstract_melody for y in rhythm]\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://https://github.com/FedericoDiMarzo/AbstractMelodyParser",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "abstract-melody-parser",
    "package_url": "https://pypi.org/project/abstract-melody-parser/",
    "platform": "",
    "project_url": "https://pypi.org/project/abstract-melody-parser/",
    "project_urls": {
      "Bug Tracker": "https://github.com/FedericoDiMarzo/AbstractMelodyParser/issues",
      "Homepage": "https://https://github.com/FedericoDiMarzo/AbstractMelodyParser"
    },
    "release_url": "https://pypi.org/project/abstract-melody-parser/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A python package offering various tools to interpret and parse midi notes.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10287396,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a433a2b9c588e0207793ecd746fff6b94c056bd8bb675821f8c20acf75b80da",
          "md5": "3d3a9af4686a7cdad31e1170629c3a34",
          "sha256": "b08c8bb207136fa7d9918a48b1e083ce0af8d9cf6ce4b22fa36ffa47f3148028"
        },
        "downloads": -1,
        "filename": "abstract_melody_parser-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d3a9af4686a7cdad31e1170629c3a34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8049,
        "upload_time": "2021-05-07T13:24:25",
        "upload_time_iso_8601": "2021-05-07T13:24:25.838783Z",
        "url": "https://files.pythonhosted.org/packages/5a/43/3a2b9c588e0207793ecd746fff6b94c056bd8bb675821f8c20acf75b80da/abstract_melody_parser-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64d4e277458a0135af991921c1a3ad9f6cf16e0366a7b6f830bcd81637365001",
          "md5": "db7f737d4d9d2f1f76a5fc7b7af728d8",
          "sha256": "393c14a575af7de4f25e80af87dba7d8700fb14ec162eb9f0e293c0f47112817"
        },
        "downloads": -1,
        "filename": "abstract_melody_parser-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "db7f737d4d9d2f1f76a5fc7b7af728d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7739,
        "upload_time": "2021-05-07T13:24:33",
        "upload_time_iso_8601": "2021-05-07T13:24:33.643201Z",
        "url": "https://files.pythonhosted.org/packages/64/d4/e277458a0135af991921c1a3ad9f6cf16e0366a7b6f830bcd81637365001/abstract_melody_parser-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7631b731eee4c97716f897b66ffd5923862a10ad3d3a194a3874e28cce72476c",
          "md5": "77be2ae8e2608ae718ece41adafa8644",
          "sha256": "706ac343ea897eed8391f36e120509503c7c3f1afc7279105143e709c65e8552"
        },
        "downloads": -1,
        "filename": "abstract_melody_parser-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "77be2ae8e2608ae718ece41adafa8644",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8266,
        "upload_time": "2021-05-07T14:30:38",
        "upload_time_iso_8601": "2021-05-07T14:30:38.022782Z",
        "url": "https://files.pythonhosted.org/packages/76/31/b731eee4c97716f897b66ffd5923862a10ad3d3a194a3874e28cce72476c/abstract_melody_parser-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bf7079c772462b60ed1d7024af5bf697eeaf505006d586f10a06722cbd68037",
          "md5": "ac40ad2a622419f4c60ad22454ec213e",
          "sha256": "d0c0202b1b39824d9b97a2806d5d1ac6e75212d9ad12d80dfcba89783eeac6f7"
        },
        "downloads": -1,
        "filename": "abstract_melody_parser-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ac40ad2a622419f4c60ad22454ec213e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7976,
        "upload_time": "2021-05-07T14:30:40",
        "upload_time_iso_8601": "2021-05-07T14:30:40.823389Z",
        "url": "https://files.pythonhosted.org/packages/6b/f7/079c772462b60ed1d7024af5bf697eeaf505006d586f10a06722cbd68037/abstract_melody_parser-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7631b731eee4c97716f897b66ffd5923862a10ad3d3a194a3874e28cce72476c",
        "md5": "77be2ae8e2608ae718ece41adafa8644",
        "sha256": "706ac343ea897eed8391f36e120509503c7c3f1afc7279105143e709c65e8552"
      },
      "downloads": -1,
      "filename": "abstract_melody_parser-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "77be2ae8e2608ae718ece41adafa8644",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8266,
      "upload_time": "2021-05-07T14:30:38",
      "upload_time_iso_8601": "2021-05-07T14:30:38.022782Z",
      "url": "https://files.pythonhosted.org/packages/76/31/b731eee4c97716f897b66ffd5923862a10ad3d3a194a3874e28cce72476c/abstract_melody_parser-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6bf7079c772462b60ed1d7024af5bf697eeaf505006d586f10a06722cbd68037",
        "md5": "ac40ad2a622419f4c60ad22454ec213e",
        "sha256": "d0c0202b1b39824d9b97a2806d5d1ac6e75212d9ad12d80dfcba89783eeac6f7"
      },
      "downloads": -1,
      "filename": "abstract_melody_parser-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ac40ad2a622419f4c60ad22454ec213e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7976,
      "upload_time": "2021-05-07T14:30:40",
      "upload_time_iso_8601": "2021-05-07T14:30:40.823389Z",
      "url": "https://files.pythonhosted.org/packages/6b/f7/079c772462b60ed1d7024af5bf697eeaf505006d586f10a06722cbd68037/abstract_melody_parser-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}