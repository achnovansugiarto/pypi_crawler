{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "python-blueprint\n================\n\n.. image:: https://travis-ci.com/johnthagen/python-blueprint.svg?branch=master\n    :target: https://travis-ci.com/johnthagen/python-blueprint\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://black.readthedocs.io/en/stable/\n\n.. image:: https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336\n    :target: https://timothycrosley.github.io/isort/\n\nExample Python project that demonstrates how to create a tested Python package using the latest\nPython testing and linting tooling. The project contains a ``fact`` package that provides a\nsimple implementation of the `factorial algorithm <https://en.wikipedia.org/wiki/Factorial>`_\n(``fact.lib``) and a command line interface (``fact.cli``).\n\nRequirements\n------------\n\nPython 3.6+.\n\n.. note::\n\n    Because `Python 2.7 supports ended January 1, 2020 <https://pythonclock.org/>`_, new projects\n    should consider supporting Python 3 only, which is simpler than trying to support both.\n    As a result, support for Python 2.7 in this example project has been dropped.\n\nWindows Support\n---------------\n\nSummary: On Windows, use ``py`` instead of ``python3`` for many of the examples in this\ndocumentation.\n\nThis package fully supports Windows, along with Linux and macOS, but Python is typically\n`installed differently on Windows <https://docs.python.org/3/using/windows.html>`_.\nWindows users typically access Python through the\n`py <https://www.python.org/dev/peps/pep-0397/>`_ launcher rather than a ``python3``\nlink in their ``PATH``. Within a virtual environment, all platforms operate the same and use a\n``python`` link to access the Python version used in that virtual environment.\n\nDependencies\n------------\n\nDependencies are defined in:\n\n- ``requirements.in``\n\n- ``requirements.txt``\n\n- ``dev-requirements.in``\n\n- ``dev-requirements.txt``\n\nVirtual Environments\n^^^^^^^^^^^^^^^^^^^^\n\nIt is best practice during development to create an isolated\n`Python virtual environment <https://docs.python.org/3/library/venv.html>`_ using the\n``venv`` standard library module. This will keep dependant Python packages from interfering\nwith other Python projects on your system.\n\nOn \\*Nix:\n\n.. code-block:: bash\n\n    $ python3 -m venv venv\n    $ source venv/bin/activate\n\nOn Windows ``cmd``:\n\n.. code-block:: bash\n\n    > py -m venv venv\n    > venv\\Scripts\\activate.bat\n\nOnce activated, it is good practice to update core packaging tools (``pip``, ``setuptools``, and\n``wheel``) to the latest versions.\n\n.. code-block:: bash\n\n    (venv) $ python -m pip install --upgrade pip setuptools wheel\n\n(Applications Only) Locking Dependencies\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis project uses `pip-tools <https://github.com/jazzband/pip-tools>`_ to lock project\ndependencies and create reproducible virtual environments.\n\n**Note:** *Library* projects should not lock their ``requirements.txt``. Since ``python-blueprint``\nalso has a CLI application, this end-user application example is used to demonstrate how to\nlock application dependencies.\n\nTo update dependencies:\n\n.. code-block:: bash\n\n    (venv) $ python -m pip install pip-tools\n    (venv) $ pip-compile --upgrade\n    (venv) $ pip-compile --upgrade dev-requirements.in\n\nAfter upgrading dependencies, run the unit tests as described in the `Unit Testing`_ section\nto ensure that none of the updated packages caused incompatibilities in the current project.\n\nSyncing Virtual Environments\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo cleanly install your dependencies into your virtual environment:\n\n.. code-block:: bash\n\n    (venv) $ pip-sync requirements.txt dev-requirements.txt\n\nPackaging\n---------\n\nThis project is designed as a Python package, meaning that it can be bundled up and redistributed\nas a single compressed file.\n\nPackaging is configured by:\n\n- ``pyproject.toml``\n\n- ``setup.py``\n\n- ``MANIFEST.in``\n\nTo package the project as both a\n`source distribution <https://docs.python.org/3/distutils/sourcedist.html>`_ and a\n`wheel <https://wheel.readthedocs.io/en/stable/>`_:\n\n.. code-block:: bash\n\n    (venv) $ python setup.py sdist bdist_wheel\n\nThis will generate ``dist/fact-1.0.0.tar.gz`` and ``dist/fact-1.0.0-py3-none-any.whl``.\n\nRead more about the `advantages of wheels <https://pythonwheels.com/>`_ to understand why\ngenerating wheel distributions are important.\n\nUpload Distributions to PyPI\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSource and wheel redistributable packages can be\n`uploaded to PyPI <https://packaging.python.org/tutorials/packaging-projects/>`_ or installed\ndirectly from the filesystem using ``pip``.\n\nTo upload to PyPI:\n\n.. code-block:: bash\n\n    (venv) $ python -m pip install twine\n    (venv) $ twine upload dist/*\n\nTesting\n-------\n\nAutomated testing is performed using `tox <https://tox.readthedocs.io/en/latest/index.html>`_.\ntox will automatically create virtual environments based on ``tox.ini`` for unit testing,\nPEP8 style guide checking, and documentation generation.\n\n.. code-block:: bash\n\n    # Run all environments.\n    #   To only run a single environment, specify it like: -e lint\n    # Note: tox is installed into the virtual environment automatically by pip-sync command above.\n    (venv) $ tox\n\nUnit Testing\n^^^^^^^^^^^^\n\nUnit testing is performed with `pytest <https://pytest.org/>`_. pytest has become the defacto\nPython unit testing framework. Some key advantages over the built in\n`unittest <https://docs.python.org/3/library/unittest.html>`_ module are:\n\n#. Significantly less boilerplate needed for tests.\n\n#. PEP8 compliant names (e.g. ``pytest.raises()`` instead of ``self.assertRaises()``).\n\n#. Vibrant ecosystem of plugins.\n\npytest will automatically discover and run tests by recursively searching for folders and ``.py``\nfiles prefixed with ``test`` for any functions prefixed by ``test``.\n\nThe ``tests`` folder is created as a Python package (i.e. there is an ``__init__.py`` file\nwithin it) because this helps ``pytest`` uniquely namespace the test files. Without this,\ntwo test files cannot be named the same, even if they are in different sub-directories.\n\nCode coverage is provided by the `pytest-cov <https://pytest-cov.readthedocs.io/en/latest/>`_\nplugin.\n\nWhen running a unit test tox environment (e.g. ``tox``, ``tox -e py37``, etc.), a data file\n(e.g. ``.coverage.py37``) containing the coverage data is generated. This file is not readable on\nits own, but when the ``coverage`` tox environment is run (e.g. ``tox`` or ``tox -e -coverage``),\ncoverage from all unit test environments is combined into a single data file and an HTML report is\ngenerated in the ``htmlcov`` folder showing each source file and which lines were executed during\nunit testing. Open ``htmlcov/index.html`` in a web browser to view the report. Code coverage \nreports help identify areas of the project that are currently not tested.\n\nCode coverage is configured in ``pyproject.toml``.\n\nTo pass arguments to ``pytest`` through ``tox``:\n\n.. code-block:: bash\n\n    (venv) $ tox -e py37 -- -k invalid_factorial\n\nCode Style Checking\n^^^^^^^^^^^^^^^^^^^\n\n`PEP8 <https://www.python.org/dev/peps/pep-0008/>`_ is the universally accepted style\nguide for Python code. PEP8 code compliance is verified using `flake8 <http://flake8.pycqa.org/>`_.\nflake8 is configured in the ``[flake8]`` section of ``tox.ini``. Extra flake8 plugins\nare also included:\n\n- ``pep8-naming``: Ensure functions, classes, and variables are named with correct casing.\n\nAutomated Code Formatting\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCode is automatically formatted using `black <https://github.com/psf/black>`_. Imports are\nautomatically sorted and grouped using `isort <https://github.com/PyCQA/isort/>`_.\n\nThese tools are configured by:\n\n- ``pyproject.toml``\n\nTo automatically format code, run:\n\n.. code-block:: bash\n\n    (venv) $ tox -e fmt\n\nTo verify code has been formatted, such as in a CI job:\n\n.. code-block:: bash\n\n    (venv) $ tox -e fmt-check\n\nGenerated Documentation\n^^^^^^^^^^^^^^^^^^^^^^^\n\nDocumentation that includes the ``README.rst`` and the Python project modules is automatically\ngenerated using a `Sphinx <http://sphinx-doc.org/>`_ tox environment. Sphinx is a documentation\ngeneration tool that is the defacto tool for Python documentation. Sphinx uses the\n`RST <https://www.sphinx-doc.org/en/latest/usage/restructuredtext/basics.html>`_ markup language.\n\nThis project uses the\n`napoleon <http://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html>`_ plugin for\nSphinx, which renders Google-style docstrings. Google-style docstrings provide a good mix\nof easy-to-read docstrings in code as well as nicely-rendered output.\n\n.. code-block:: python\n\n    \"\"\"Computes the factorial through a recursive algorithm.\n\n    Args:\n        n: A positive input value.\n\n    Raises:\n        InvalidFactorialError: If n is less than 0.\n\n    Returns:\n        Computed factorial.\n    \"\"\"\n\nThe Sphinx project is configured in ``docs/conf.py``.\n\nBuild the docs using the ``docs`` tox environment (e.g. ``tox`` or ``tox -e docs``). Once built,\nopen ``docs/_build/index.html`` in a web browser.\n\nGenerate a New Sphinx Project\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo generate the Sphinx project shown in this project:\n\n.. code-block:: bash\n\n    # Note: Sphinx is installed into the virtual environment automatically by pip-sync command\n    # above.\n    (venv) $ mkdir docs\n    (venv) $ cd docs\n    (venv) $ sphinx-quickstart --no-makefile --no-batchfile --extensions sphinx.ext.napoleon\n    # When prompted, select all defaults.\n\nModify ``conf.py`` appropriately:\n\n.. code-block:: python\n\n    # Add the project's Python package to the path so that autodoc can find it.\n    import os\n    import sys\n    sys.path.insert(0, os.path.abspath('../src'))\n\n    ...\n\n    html_theme_options = {\n        # Override the default alabaster line wrap, which wraps tightly at 940px.\n        'page_width': 'auto',\n    }\n\nModify ``index.rst`` appropriately:\n\n::\n\n    .. include:: ../README.rst\n\n    apidoc/modules.rst\n\nProject Structure\n-----------------\n\nTraditionally, Python projects place the source for their packages in the root of the project\nstructure, like:\n\n.. code-block::\n\n    fact\n    ├── fact\n    │   ├── __init__.py\n    │   ├── cli.py\n    │   └── lib.py\n    ├── tests\n    │   ├── __init__.py\n    │   └── test_fact.py\n    ├── tox.ini\n    └── setup.py\n\nHowever, this structure is `known\n<https://docs.pytest.org/en/latest/goodpractices.html#tests-outside-application-code>`_ to have bad\ninteractions with ``pytest`` and ``tox``, two standard tools maintaining Python projects. The\nfundamental issue is that tox creates an isolated virtual environment for testing. By installing\nthe distribution into the virtual environment, ``tox`` ensures that the tests pass even after the\ndistribution has been packaged and installed, thereby catching any errors in packaging and\ninstallation scripts, which are common. Having the Python packages in the project root subverts\nthis isolation for two reasons:\n\n#. Calling ``python`` in the project root (for example, ``python -m pytest tests/``) `causes Python\n   to add the current working directory\n   <https://docs.pytest.org/en/latest/pythonpath.html#invoking-pytest-versus-python-m-pytest>`_\n   (the project root) to ``sys.path``, which Python uses to find modules. Because the source\n   package ``fact`` is in the project root, it shadows the ``fact`` package installed in the tox\n   environment.\n\n#. Calling ``pytest`` directly anywhere that it can find the tests will also add the project root\n   to ``sys.path`` if the ``tests`` folder is a a Python package (that is, it contains a\n   ``__init__.py`` file). `pytest adds all folders containing packages\n   <https://docs.pytest.org/en/latest/goodpractices.html#conventions-for-python-test-discovery>`_\n   to ``sys.path`` because it imports the tests like regular Python modules.\n\nIn order to properly test the project, the source packages must not be on the Python path. To\nprevent this, there are three possible solutions:\n\n#. Remove the ``__init__.py`` file from ``tests`` and run ``pytest`` directly as a tox command.\n\n#. Remove the ``__init__.py`` file from tests and change the working directory of\n   ``python -m pytest`` to ``tests``.\n\n#. Move the source packages to a dedicated ``src`` folder.\n\nThe dedicated ``src`` directory is the `recommended solution\n<https://docs.pytest.org/en/latest/pythonpath.html#test-modules-conftest-py-files-inside-packages>`_\nby ``pytest`` when using tox and the solution this blueprint promotes because it is the least\nbrittle even though it deviates from the traditional Python project structure. It results is a\ndirectory structure like:\n\n.. code-block::\n\n    fact\n    ├── src\n    │   └── fact\n    │       ├── __init__.py\n    │       ├── cli.py\n    │       └── lib.py\n    ├── tests\n    │   ├── __init__.py\n    │   └── test_fact.py\n    ├── tox.ini\n    └── setup.py\n\nType Hinting\n------------\n\n`Type hinting <https://docs.python.org/3/library/typing.html>`_ allows developers to include\noptional static typing information to Python source code. This allows static analyzers such\nas `PyCharm <https://www.jetbrains.com/pycharm/>`_, `mypy <http://mypy-lang.org/>`_, or\n`pytype <https://github.com/google/pytype>`_ to check that functions are used with the correct\ntypes before runtime.\n\nFor\n`PyCharm in particular <https://www.jetbrains.com/help/pycharm/type-hinting-in-product.html>`_,\nthe IDE is able to provide much richer auto-completion, refactoring, and type checking while\nthe user types, resulting in increased productivity and correctness.\n\nThis project uses the type hinting syntax introduced in Python 3:\n\n.. code-block:: python\n\n    def factorial(n: int) -> int:\n\nType checking is performed by mypy via ``tox -e type-check``. mypy is configured in ``setup.cfg``.\n\nDistributing Type Hints\n^^^^^^^^^^^^^^^^^^^^^^^\n\n`PEP 561 <https://www.python.org/dev/peps/pep-0561/>`_ defines how a Python package should\ncommunicate the presence of inline type hints to static type checkers.\n`mypy's documentation <https://mypy.readthedocs.io/en/stable/installed_packages.html>`_ provides\nfurther examples on how to do this as well.\n\n``mypy`` looks for the existence of a file named ``py.typed`` in the root of the installed\npackage to indicate that inline type hints should be checked.\n\nLicensing\n---------\n\nLicensing for the project is defined in:\n\n- ``LICENSE.txt``\n\n- ``setup.py``\n\nThis project uses a common permissive license, the MIT license.\n\nYou may also want to list the licenses of all of the packages that your Python project depends on.\nTo automatically list the licenses for all dependencies in ``requirements.txt`` (and their\ntransitive dependencies) using\n`pip-licenses <https://github.com/raimon49/pip-licenses>`_:\n\n.. code-block:: bash\n\n    (venv) $ tox -e licenses\n    ...\n     Name        Version  License\n     colorama    0.4.3    BSD License\n     exitstatus  1.3.0    MIT License\n\nPyCharm Configuration\n---------------------\n\nTo configure PyCharm 2018.3 and newer to align to the code style used in this project:\n\n- Settings | Search \"Hard wrap at\"\n\n    - Editor | Code Style | General | Hard wrap at: 99\n\n- Settings | Search \"Optimize Imports\"\n\n    - Editor | Code Style | Python | Imports\n\n        - ☑ Sort import statements\n\n            - ☑ Sort imported names in \"from\" imports\n\n            - ☐ Sort plain and \"from\" imports separately within a group\n\n            - ☐ Sort case-insensitively\n\n        - Structure of \"from\" imports\n\n            - ◎ Leave as is\n\n            - ◉ Join imports with the same source\n\n            - ◎ Always split imports\n\n- Settings | Search \"Docstrings\"\n\n    - Tools | Python Integrated Tools | Docstrings | Docstring Format: Google\n\n- Settings | Search \"Force parentheses\"\n\n    - Editor | Code Style | Python | Wrapping and Braces | \"From\" Import Statements\n\n        - ☑ Force parentheses if multiline\n\nIntegrate Code Formatters\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo integrate automatic code formatters into PyCharm, reference the following instructions:\n\n- `black integration <https://black.readthedocs.io/en/stable/editor_integration.html#pycharm-intellij-idea>`_\n\n    - The File Watchers method (step 3) is recommended. This will run ``black`` on every save.\n\n- `isort integration <https://github.com/timothycrosley/isort/wiki/isort-Plugins>`_\n\n    - The File Watchers method (option 1) is recommended. This will run ``isort`` on every save.\n\n.. tip::\n\n    These tools work best if you properly mark directories as excluded from the project that should\n    be, such as ``.tox``. See\n    https://www.jetbrains.com/help/pycharm/project-tool-window.html#content_pane_context_menu\n    on how to Right Click | Mark Directory as | Excluded.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xmarlem/python-blueprint",
    "keywords": "python",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mlfact",
    "package_url": "https://pypi.org/project/mlfact/",
    "platform": "",
    "project_url": "https://pypi.org/project/mlfact/",
    "project_urls": {
      "Homepage": "https://github.com/xmarlem/python-blueprint"
    },
    "release_url": "https://pypi.org/project/mlfact/1.0.2/",
    "requires_dist": [
      "colorama (==0.4.4)",
      "exitstatus (==2.0.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Example Python project",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8525866,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a5a97e5ba7189c13f8f72ffc86358057b90cec39188c0451d9e76da8987fc59",
          "md5": "1c2a0753489d830df7942d97f26ce5b8",
          "sha256": "a0a648572ceccb358e7c3921883ca2b43880ad49d03ac29bb2acfd6b0cc625d9"
        },
        "downloads": -1,
        "filename": "mlfact-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c2a0753489d830df7942d97f26ce5b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9697,
        "upload_time": "2020-10-21T20:30:52",
        "upload_time_iso_8601": "2020-10-21T20:30:52.984914Z",
        "url": "https://files.pythonhosted.org/packages/5a/5a/97e5ba7189c13f8f72ffc86358057b90cec39188c0451d9e76da8987fc59/mlfact-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6dc4e555d6a1299ef553e72bce2a24ea790aeb056d649314caeaa723ffe8f8ae",
          "md5": "8dc7935fcff75565f44538c74def846c",
          "sha256": "82f439924128c70f2178420c36507c74d73e0131ae28a7575f23a7f7fc77c744"
        },
        "downloads": -1,
        "filename": "mlfact-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8dc7935fcff75565f44538c74def846c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14740,
        "upload_time": "2020-10-21T20:31:24",
        "upload_time_iso_8601": "2020-10-21T20:31:24.471756Z",
        "url": "https://files.pythonhosted.org/packages/6d/c4/e555d6a1299ef553e72bce2a24ea790aeb056d649314caeaa723ffe8f8ae/mlfact-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bca3f946d16ad992ec344c1f01a097cd13f710d4124c803296b28874b95665a",
          "md5": "b1f2cdd1aa65c6e2894cd053fd4991fd",
          "sha256": "a7b692c496514f88566bc6b9609bfa814037cb694b8c9b9dd656b1686c34b525"
        },
        "downloads": -1,
        "filename": "mlfact-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1f2cdd1aa65c6e2894cd053fd4991fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9698,
        "upload_time": "2020-10-28T20:05:19",
        "upload_time_iso_8601": "2020-10-28T20:05:19.863896Z",
        "url": "https://files.pythonhosted.org/packages/9b/ca/3f946d16ad992ec344c1f01a097cd13f710d4124c803296b28874b95665a/mlfact-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3be5c2e686aa4ba3438eca506dee901456b6e3dd280eb1a4705551f91056859a",
          "md5": "73b097e48e3aa36a3205af0b3c9e218b",
          "sha256": "14361b441b049455c0e182d2f0aa4bbad977456fe35ab8ca4b8a5208e4c8a969"
        },
        "downloads": -1,
        "filename": "mlfact-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "73b097e48e3aa36a3205af0b3c9e218b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14751,
        "upload_time": "2020-10-28T20:05:21",
        "upload_time_iso_8601": "2020-10-28T20:05:21.538404Z",
        "url": "https://files.pythonhosted.org/packages/3b/e5/c2e686aa4ba3438eca506dee901456b6e3dd280eb1a4705551f91056859a/mlfact-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9bca3f946d16ad992ec344c1f01a097cd13f710d4124c803296b28874b95665a",
        "md5": "b1f2cdd1aa65c6e2894cd053fd4991fd",
        "sha256": "a7b692c496514f88566bc6b9609bfa814037cb694b8c9b9dd656b1686c34b525"
      },
      "downloads": -1,
      "filename": "mlfact-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b1f2cdd1aa65c6e2894cd053fd4991fd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9698,
      "upload_time": "2020-10-28T20:05:19",
      "upload_time_iso_8601": "2020-10-28T20:05:19.863896Z",
      "url": "https://files.pythonhosted.org/packages/9b/ca/3f946d16ad992ec344c1f01a097cd13f710d4124c803296b28874b95665a/mlfact-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3be5c2e686aa4ba3438eca506dee901456b6e3dd280eb1a4705551f91056859a",
        "md5": "73b097e48e3aa36a3205af0b3c9e218b",
        "sha256": "14361b441b049455c0e182d2f0aa4bbad977456fe35ab8ca4b8a5208e4c8a969"
      },
      "downloads": -1,
      "filename": "mlfact-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "73b097e48e3aa36a3205af0b3c9e218b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14751,
      "upload_time": "2020-10-28T20:05:21",
      "upload_time_iso_8601": "2020-10-28T20:05:21.538404Z",
      "url": "https://files.pythonhosted.org/packages/3b/e5/c2e686aa4ba3438eca506dee901456b6e3dd280eb1a4705551f91056859a/mlfact-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}