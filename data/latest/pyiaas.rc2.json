{
  "info": {
    "author": "JasonLoveDL",
    "author_email": "2421049459@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "pyIAAS: Software for Multivariate Time-series Forecasting Model Development with an Intelligent Automated NAS optimization framework\r\n\r\n# What is pyIAAS?\r\npyIAAS is an open-source Python package that exploits one of the latest neural architecture search (NAS) frameworks, intelligent automated achitecture search (IAAS) (Yang et al. 2022), for the multivariate time-series forecasting (MTF) model development. The aim of the pyIAAS is to facilitate the future researchers in building a high-quality MTF model efficiently and effectively when considering the optimality of the network structures. pyIAAS contains four network modules as searching candidates, namley, convolutional neural networks (CNN), recurrent neural networks (RNN), long-short term memory (LSTM) neural networks and fully connected neural networks (FCN). During the searching process, reinforcement learning (RL) based meta-controllers are designed to sequentially make decisions to update the network structures. Please refer to [Yang et al. (2022)](https://arxiv.org/abs/2203.13563) for more detailed information about the IAAS framework.\r\n\r\n# Installation\r\n### Without GPU acceleration\r\nIn an environment 3.8+, pyIAAS can be installed via\r\n```shell\r\npip install pyIAAS\r\n```\r\n### With GPU acceleration \r\nFirst, install the GPU version of PyTorch\r\n```shell\r\npip3 install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113 \r\n```\r\nFor more information of  PyTorch, please check [this](https://pytorch.org/get-started/locally/)\r\n\r\nThen, install the pyIAAS package\r\n```shell\r\npip install pyIAAS\r\n```\r\n# Usage of pyIAAS\r\n\r\n## Command line\r\nCommand line tool supplies two functions: search and predict\r\n\r\nTo search networks given a dataset (use the example in example/1. basic)\r\n```shell\r\n# Start the searching process of pyIAAS\r\npyIAAS search -c NASConfig.json -f VT_summer.csv -t RT_Demand\r\n```\r\nNote that the output directory should be empty!\r\n\r\nAfter the searching process, the neural architectures are stored in the directory ```examples/1. basic/out_dir```\r\n\r\nTo predict with the best searched model\r\n\r\n```shell\r\n# Perform a prediction task given a dataset VT_summer_predict.csv\r\npyIAAS predict -c NASConfig.json -f VT_summer_predict.csv -t RT_Demand -d out_dir -o prediction.csv\r\n```\r\n\r\n## Python API\r\nTo search the neural architectures, then perform a prediction task with the best searched model\r\n\r\n```python\r\nimport pyIAAS\r\n\r\n# set the basic information of the searching process\r\nconfig_file = 'NASConfig.json'\r\ninput_file = 'VT_summer.csv'\r\ntarget_name = 'RT_Demand'\r\ntest_ratio = 0.2  # the proportion of the test dataset in the whole dataset. It can be adjusted by users themself for specific tasks\r\n\r\n# start the searching process\r\npyIAAS.run_search(config_file, input_file, target_name, test_ratio)\r\n\r\n# set the basic information of a prediction task\r\nconfig_file = 'NASConfig.json'\r\ninput_file = 'VT_summer.csv'\r\ntarget_name = 'RT_Demand'\r\noutput_dir = 'out_dir'\r\nprediction_file = 'VT_summer_predict.csv'\r\n\r\n# perform the predicting task in VT_summer_predict.csv\r\npyIAAS.run_predict(config_file, input_file, target_name, output_dir, prediction_file)\r\n```\r\n\r\n\r\n## Output file explanations\r\n- model.db: detailed records of all searched models\r\n- each searched model contains:\r\n  - prediction results of the test dataset\r\n  - transformation table\r\n  - model parameters of type ```.pth```\r\n  - training loss curve \r\n  \r\n## Customized module list\r\nThe modules used in the searching process is given in the configuration\r\nfile. The default configuration is \r\n```json\r\n{\r\n  \"MaxLayers\": 50,\r\n  \"timeLength\": 168,\r\n  \"predictLength\": 24,\r\n  \"IterationEachTime\": 50,\r\n  \"MonitorIterations\": 40,\r\n  \"NetPoolSize\": 5,\r\n  \"BATCH_SIZE\": 256,\r\n  \"EPISODE\": 200,\r\n  \"GPU\": true,\r\n  \"OUT_DIR\": \"out_dir\",\r\n  \"Modules\" : {\r\n  \"dense\": {\r\n    \"out_range\": [4, 8, 12, 16, 24, 32, 48, 64, 80, 108, 144],\r\n    \"editable\": true\r\n  },\r\n  \"rnn\":{\r\n    \"out_range\": [4, 8, 12, 16, 24, 32, 48, 64, 80, 108, 144],\r\n    \"editable\": true\r\n  },\r\n  \"lstm\":{\r\n    \"out_range\": [4, 8, 12, 16, 24, 32, 48, 64, 80, 108, 144],\r\n    \"editable\": true\r\n  },\r\n  \"conv\": {\r\n    \"out_range\": [4, 8, 12, 16, 24, 32, 48, 64, 80, 108, 144],\r\n    \"editable\": true\r\n  }\r\n  }\r\n}\r\n```\r\n\r\nThe meaning of each term:\r\n- MaxLayers : number of the maximum layers of the searched neural architecture\r\n- timeLength : length of the input time-series data\r\n- predictLength : prediction time length, e.g., two-hour ahead\r\n- IterationEachTime : number of the training epochs at each searching episode\r\n- MonitorIterations : epoch interval to print out the training information, e.g., training loss \r\n- NetPoolSize : size of the net pool\r\n- BATCH_SIZE : batch size used in the training process\r\n- EPISODE : searching times of the reinforcement learning actors\r\n- Pruning : enable pruning functionality during search (Pruning implementation inspired by [Movement Pruning](https://github.com/huggingface/nn_pruning))\r\n- PruningRatio : pruning ratio(topV strategy used here)\r\n- GPU : use GPU or not; if true, the environment should use the GPU version of PyTorch\r\n- OUT_DIR : output directory\r\n- Modules : module information \r\n  - out_range : list of the output unit number \r\n  - editable : whether this module can be widened or not\r\n\r\n## Extending new module\r\nTo create a new module, users should create a subclass of ```pyIAAS.model.module.NasModule```, and implement \r\nthese reserved abstract functions\r\n\r\n```python\r\nfrom pyIAAS.model.module import NasModule\r\n# this is a sample subclassing of NasModule  to\r\n# illustrate how to customize a new module in the pyIAAS package\r\nclass NewModule(NasModule):\r\n    @property\r\n    def is_max_level(self):\r\n        # return: True if this module reaches the max width level, False otherwise\r\n        raise NotImplementedError()\r\n\r\n    @property\r\n    def next_level(self):\r\n        # return: width of next level\r\n        raise NotImplementedError()\r\n\r\n    def init_param(self, input_shape):\r\n        # initialize the parameters of this module\r\n        self.on_param_end(input_shape)\r\n        raise NotImplementedError()\r\n\r\n    def identity_module(self, cfg, name, input_shape: tuple):\r\n        # generate an identity mapping module\r\n        raise NotImplementedError()\r\n\r\n    def get_module_instance(self):\r\n        # generate a model instance once and use it for the rest procedures\r\n        raise NotImplementedError()\r\n\r\n    @property\r\n    def token(self):\r\n        # return: string type token of this module\r\n        raise NotImplementedError()\r\n\r\n    def perform_wider_transformation_current(self):\r\n        # generate a new wider module by the wider function-preserving transformation\r\n        # this function is called by layer i and returns the realized random mapping to the IAAS framework for the next layer's wider transformation.\r\n        raise NotImplementedError()\r\n\r\n    def perform_wider_transformation_next(self, mapping_g: list, scale_g: list):\r\n        # generate a new wider module by the wider function-preserving transformation\r\n        # this function is called by the layer i + 1\r\n        raise NotImplementedError()\r\n```\r\n\r\nAdd the module information to the configuration file as follows\r\n```json\r\n{\r\n  \"MaxLayers\": 50,\r\n  \"timeLength\": 168,\r\n  \"predictLength\": 24,\r\n  \"IterationEachTime\": 50,\r\n  \"MonitorIterations\": 40,\r\n  \"NetPoolSize\": 5,\r\n  \"BATCH_SIZE\": 256,\r\n  \"EPISODE\": 200,\r\n  \"GPU\": true,\r\n  \"OUT_DIR\": \"out_dir\",\r\n  \"Modules\" : {\r\n  \"dense\": {\r\n    \"out_range\": [4, 8, 12, 16, 24, 32, 48, 64, 80, 108, 144],\r\n    \"editable\": true\r\n    },\r\n  \"new_module\": {\r\n    \"out_range\": [4, 8, 12, 16, 24, 32, 48, 64, 80, 108, 144],\r\n    \"editable\": true\r\n    }\r\n  }\r\n}\r\n```\r\nRegister this new module in the running code\r\n\r\n```python\r\nfrom pyIAAS import *\r\nfrom new_module import NewModule\r\ncfg = Config('NASConfig.json')\r\n# register a new module to the global configuration\r\ncfg.register_module('new_module', NewModule)\r\n```\r\n\r\n# Additional information\r\nFor more details of this algorithm, see [Yang et al. (2022)](https://arxiv.org/abs/2203.13563)\r\n\r\nFor more details of pyIAAS, see [doc](https://jasonlovedl.github.io/pyIAAS/pyIAAS.html)\r\n\r\nRepository is [here](https://github.com/JasonloveDL/pyIAAS)\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JasonloveDL/pyIAAS",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyIAAS",
    "package_url": "https://pypi.org/project/pyIAAS/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyIAAS/",
    "project_urls": {
      "Bug Tracker": "https://github.com/JasonloveDL/pyIAAS/issues",
      "Homepage": "https://github.com/JasonloveDL/pyIAAS"
    },
    "release_url": "https://pypi.org/project/pyIAAS/0.0.2/",
    "requires_dist": [
      "torch",
      "numpy",
      "pandas",
      "torchaudio",
      "torchvision",
      "gym",
      "matplotlib",
      "clickconcurrent-log-handler"
    ],
    "requires_python": ">=3.6",
    "summary": "Code of IAAS Framework",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16987423,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e842a5795504b97b4dfb6802c26d1ef50c6e197acc0ea6b73292c4c35f03920d",
          "md5": "f66378637095be19d020178222b9956b",
          "sha256": "6ef918154bd3cd7d16bb8132199f1fe7255ec3dfead95eef33b1c6c25334451a"
        },
        "downloads": -1,
        "filename": "pyIAAS-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f66378637095be19d020178222b9956b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 37830,
        "upload_time": "2022-05-02T12:19:10",
        "upload_time_iso_8601": "2022-05-02T12:19:10.976102Z",
        "url": "https://files.pythonhosted.org/packages/e8/42/a5795504b97b4dfb6802c26d1ef50c6e197acc0ea6b73292c4c35f03920d/pyIAAS-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d05e1a32f502104b4d58a900022b69eefde8ba10b0b964080f8688fd764680e7",
          "md5": "451bceacefcd5d064b7231e333b5dc34",
          "sha256": "eca0f446253cb835798aeb89fae776c094582f2eb2f666739f6baa182309f5bd"
        },
        "downloads": -1,
        "filename": "pyIAAS-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "451bceacefcd5d064b7231e333b5dc34",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 36549,
        "upload_time": "2022-05-02T12:19:13",
        "upload_time_iso_8601": "2022-05-02T12:19:13.169058Z",
        "url": "https://files.pythonhosted.org/packages/d0/5e/1a32f502104b4d58a900022b69eefde8ba10b0b964080f8688fd764680e7/pyIAAS-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73649e5d7f77d03124385407aceddfc1e118b5b23adeea4f00796f962f640282",
          "md5": "9e7200068696c729dc7a5f24fc7dd224",
          "sha256": "4a829ea8ae61d982dd986c3453c984a64406142191928f46e70348fac8d87234"
        },
        "downloads": -1,
        "filename": "pyIAAS-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e7200068696c729dc7a5f24fc7dd224",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 45521,
        "upload_time": "2023-02-23T01:53:36",
        "upload_time_iso_8601": "2023-02-23T01:53:36.427788Z",
        "url": "https://files.pythonhosted.org/packages/73/64/9e5d7f77d03124385407aceddfc1e118b5b23adeea4f00796f962f640282/pyIAAS-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4016555d848d8afe28f310c7dd3beb839f034c6546c4551276665a9f93944326",
          "md5": "e60bf84c075d5ee7dd7055ddf1ac2a11",
          "sha256": "3d5b07c17d25a8fcd8f168bc50c9e568bf60f3080502765ff225f91e112e636f"
        },
        "downloads": -1,
        "filename": "pyIAAS-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e60bf84c075d5ee7dd7055ddf1ac2a11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 43623,
        "upload_time": "2023-02-23T01:53:39",
        "upload_time_iso_8601": "2023-02-23T01:53:39.248491Z",
        "url": "https://files.pythonhosted.org/packages/40/16/555d848d8afe28f310c7dd3beb839f034c6546c4551276665a9f93944326/pyIAAS-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "73649e5d7f77d03124385407aceddfc1e118b5b23adeea4f00796f962f640282",
        "md5": "9e7200068696c729dc7a5f24fc7dd224",
        "sha256": "4a829ea8ae61d982dd986c3453c984a64406142191928f46e70348fac8d87234"
      },
      "downloads": -1,
      "filename": "pyIAAS-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9e7200068696c729dc7a5f24fc7dd224",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 45521,
      "upload_time": "2023-02-23T01:53:36",
      "upload_time_iso_8601": "2023-02-23T01:53:36.427788Z",
      "url": "https://files.pythonhosted.org/packages/73/64/9e5d7f77d03124385407aceddfc1e118b5b23adeea4f00796f962f640282/pyIAAS-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4016555d848d8afe28f310c7dd3beb839f034c6546c4551276665a9f93944326",
        "md5": "e60bf84c075d5ee7dd7055ddf1ac2a11",
        "sha256": "3d5b07c17d25a8fcd8f168bc50c9e568bf60f3080502765ff225f91e112e636f"
      },
      "downloads": -1,
      "filename": "pyIAAS-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e60bf84c075d5ee7dd7055ddf1ac2a11",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 43623,
      "upload_time": "2023-02-23T01:53:39",
      "upload_time_iso_8601": "2023-02-23T01:53:39.248491Z",
      "url": "https://files.pythonhosted.org/packages/40/16/555d848d8afe28f310c7dd3beb839f034c6546c4551276665a9f93944326/pyIAAS-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}