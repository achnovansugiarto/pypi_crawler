{
  "info": {
    "author": "",
    "author_email": "HE Inventions LTD <support@heinventions.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: AsyncIO",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<div align=\"center\">\n\n# aiopjlink\n\nA modern Python asyncio PJLink library (Class I and Class II).\n\n[![PyPI](https://img.shields.io/pypi/v/aiopjlink?logo=python&logoColor=%23cccccc)](https://pypi.org/project/aiopjlink)\n![PyPI - License](https://img.shields.io/pypi/l/aiopjlink)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/aiopjlink)\n\n![PyPI - Downloads](https://img.shields.io/pypi/dm/aiopjlink)\n![GitHub repo size](https://img.shields.io/github/repo-size/HEInventions/aiopjlink)\n\n</div>\n\n## What is PJLink?\n\nMost projectors that have RJ45 ports on the back can be controlled via [PJLink](https://pjlink.jbmia.or.jp/english/).\n\nPJLink is a communication protocol and unified standard for operating and controlling data projectors via `TCP/IP`, regardless of manufacturer.\n\nPJLink consists of [Class 1](https://pjlink.jbmia.or.jp/english/data/5-1_PJLink_eng_20131210.pdf) commands and queries, as well as [Class 2](https://pjlink.jbmia.or.jp/english/data_cl2/PJLink_5-1.pdf) notifications and extensions.\n\n* Class 1 is the most common type of PJLink, and is used for basic commands such as power on/off, input selection, and adjusting volume.\n* Class 2 is an extended version of the protocol that supports additional commands such as opening and closing the projector's lens cover, and is typically used by more sophisticated devices.\n\n## What is aiopjlink?\n\nA Python library that uses [asyncio](https://docs.python.org/3/library/asyncio.html) to talk to one or more projectors connected to a network using the PJLink protocol.\n\nIt has these advantages:\n\n* ✅ Clean modern asyncio API\n* ✅ High level API abstraction (eg. `lamp.hours`)\n* ✅ Pure Python 3 implementation (no dependencies)\n* ✅ Full suite of test cases\n* ✅ Context managers for keeping track of connections and resources \n* ✅ High quality error handling\n\n\n## Usage\n\nEach \"connection\" to a projector is managed through a `PJLink` context manager.  Once this is connected, you access the different functions through a high level API (e.g. `conn.power.turn_off()`, `conn.lamps.hours()`, `conn.errors.query()`, etc).\n\nFor example, create a `PJLink` connection to the projector and issue commands:\n\n```python\nasync with PJLink(address=\"192.168.1.120\", password=\"secretpassword\") as link:\n\n    # Turn on the projector.\n    await link.power.turn_on()\n\n    # Wait a few seconds, then print out all the error information.\n    await asyncio.sleep(5)\n    print(\"errors = \", await link.errors.query())\n\n    # Then wait a few seconds, then turn the projector off.\n    await asyncio.sleep(5)\n    await link.power.turn_off()\n```\n\n## Development\n\nWe use the [PDM package manager](https://pdm.fming.dev/latest/).\n\n```bash\npdm install --dev  # install all deps required to run and test the code\n\npdm run lint  # check code quality\npdm run test  # check all test cases run OK\n\npdm publish  # Publish the project to PyPI\n```\n\nOther notes:\n* There are more \"pdm scripts\" in the `.toml` file.\n* Set the env variable `AIOPJLINK_PRINT_DEBUG_COMMS` to print debug comms to the console.\n\n## Roadmap\n\nPull requests with test cases are welcome. There are still some things to finish, including:\n\n* [ ] Search Protocol (§3.2)\n* [ ] Status Notification Prototol (§3.3)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "projector,pjlink,asyncio",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiopjlink",
    "package_url": "https://pypi.org/project/aiopjlink/",
    "platform": null,
    "project_url": "https://pypi.org/project/aiopjlink/",
    "project_urls": {
      "Bug Tracker": "https://github.com/HEInventions/aiopjlink/issues",
      "Homepage": "https://pypi.org/project/aiopjlink/",
      "Repository": "https://github.com/HEInventions/aiopjlink"
    },
    "release_url": "https://pypi.org/project/aiopjlink/1.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Asyncio PJLink library (Class 1 and Class 2)",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15352378,
  "releases": {
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0e00b90d2e54df3b7409755d926cf138531f8a9b3741f7fe1f4e541c32764c7a",
          "md5": "3d3ed92ae6b8f3655f1e98062bd30b63",
          "sha256": "3a51e26c1fa91fd4a2388efc988955ae070f08ac9a3a188081b0a3b8f65d748c"
        },
        "downloads": -1,
        "filename": "aiopjlink-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d3ed92ae6b8f3655f1e98062bd30b63",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 20969,
        "upload_time": "2022-10-09T15:00:58",
        "upload_time_iso_8601": "2022-10-09T15:00:58.165881Z",
        "url": "https://files.pythonhosted.org/packages/0e/00/b90d2e54df3b7409755d926cf138531f8a9b3741f7fe1f4e541c32764c7a/aiopjlink-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a38b68d83370db26f3477afc9a98898079f8eba68755a338d04efe4c6897f80e",
          "md5": "1b457c742ba2b8dd1d7464bffea48dcd",
          "sha256": "20d4fd2ede907a35d20db4cca4a798bb0879a8572e1aae13913cb9fa09f837e2"
        },
        "downloads": -1,
        "filename": "aiopjlink-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1b457c742ba2b8dd1d7464bffea48dcd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 20787,
        "upload_time": "2022-10-09T15:01:01",
        "upload_time_iso_8601": "2022-10-09T15:01:01.832034Z",
        "url": "https://files.pythonhosted.org/packages/a3/8b/68d83370db26f3477afc9a98898079f8eba68755a338d04efe4c6897f80e/aiopjlink-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e350479f440969c8dc52ae4ce4d02fc536223c3fa7768f96f337efe724b3d949",
          "md5": "a44620f6993e39ab770bdb3c63b69e70",
          "sha256": "9ea0845ce75712973b66fe4ada24d877cc91b39ac006fc545529a6f4ea3478b7"
        },
        "downloads": -1,
        "filename": "aiopjlink-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a44620f6993e39ab770bdb3c63b69e70",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 21292,
        "upload_time": "2022-10-09T15:54:47",
        "upload_time_iso_8601": "2022-10-09T15:54:47.127261Z",
        "url": "https://files.pythonhosted.org/packages/e3/50/479f440969c8dc52ae4ce4d02fc536223c3fa7768f96f337efe724b3d949/aiopjlink-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "47320c50c6f53231e5a1e89ec3dfdfd21db5310ad4783e0631c352e9c7a6a519",
          "md5": "ae5989256b7ceb0812f10a5094c9cf19",
          "sha256": "bf9746deec4b7f05e8e9ee82320fd6bc1d39f3dd046dcc5668f264da9f3960aa"
        },
        "downloads": -1,
        "filename": "aiopjlink-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ae5989256b7ceb0812f10a5094c9cf19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 21429,
        "upload_time": "2022-10-09T15:54:49",
        "upload_time_iso_8601": "2022-10-09T15:54:49.154329Z",
        "url": "https://files.pythonhosted.org/packages/47/32/0c50c6f53231e5a1e89ec3dfdfd21db5310ad4783e0631c352e9c7a6a519/aiopjlink-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e350479f440969c8dc52ae4ce4d02fc536223c3fa7768f96f337efe724b3d949",
        "md5": "a44620f6993e39ab770bdb3c63b69e70",
        "sha256": "9ea0845ce75712973b66fe4ada24d877cc91b39ac006fc545529a6f4ea3478b7"
      },
      "downloads": -1,
      "filename": "aiopjlink-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a44620f6993e39ab770bdb3c63b69e70",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 21292,
      "upload_time": "2022-10-09T15:54:47",
      "upload_time_iso_8601": "2022-10-09T15:54:47.127261Z",
      "url": "https://files.pythonhosted.org/packages/e3/50/479f440969c8dc52ae4ce4d02fc536223c3fa7768f96f337efe724b3d949/aiopjlink-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "47320c50c6f53231e5a1e89ec3dfdfd21db5310ad4783e0631c352e9c7a6a519",
        "md5": "ae5989256b7ceb0812f10a5094c9cf19",
        "sha256": "bf9746deec4b7f05e8e9ee82320fd6bc1d39f3dd046dcc5668f264da9f3960aa"
      },
      "downloads": -1,
      "filename": "aiopjlink-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "ae5989256b7ceb0812f10a5094c9cf19",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 21429,
      "upload_time": "2022-10-09T15:54:49",
      "upload_time_iso_8601": "2022-10-09T15:54:49.154329Z",
      "url": "https://files.pythonhosted.org/packages/47/32/0c50c6f53231e5a1e89ec3dfdfd21db5310ad4783e0631c352e9c7a6a519/aiopjlink-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}