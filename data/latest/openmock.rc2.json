{
  "info": {
    "author": "Marcos Cardoso",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Openmock\n\nMock/fake of opensearch library, allows you to mock opensearch-py\n\nFork of Python Elasticsearch(TM) Mock. Sometimes the developers who work with elasticsearch (TM),\ndon't really have any input in choice of host and need to get work done.\n\n![Libraries.io dependency status for latest release](https://img.shields.io/librariesio/release/pypi/openmock) [![Downloads](https://pepy.tech/badge/openmock/month)](https://pepy.tech/project/openmock/month)\n\n## Installation\n\n```shell\npip install openmock\n```\n\n## Usage\n\nTo use Openmock, decorate your test method with **@openmock** decorator:\n\n```python\nfrom unittest import TestCase\n\nfrom openmock import openmock\n\n\nclass TestClass(TestCase):\n\n    @openmock\n    def test_should_return_something_from_opensearch(self):\n        self.assertIsNotNone(some_function_that_uses_opensearch())\n```\n\n### Custom Behaviours\n\nYou can also force the behaviour of the OpenSearch instance by importing the `openmock.behaviour` module:\n\n```python\nfrom unittest import TestCase\n\nfrom openmock import behaviour\n\n\nclass TestClass(TestCase):\n\n    ...\n\n    def test_should_return_internal_server_error_when_simulate_server_error_is_true(self):\n        behaviour.server_failure.enable()\n        ...\n        behaviour.server_failure.disable()\n```\n\nYou can also disable all behaviours by calling `behaviour.disable_all()` (Consider put this in your `def tearDown(self)` method)\n\n#### Available Behaviours\n\n* `server_failure`: Will make all calls to OpenSearch returns the following error message:\n    ```python\n    {\n        'status_code': 500,\n        'error': 'Internal Server Error'\n    }\n    ```\n\n## Code example\n\nLet's say you have a prod code snippet like this one:\n\n```python\nimport opensearchpy\n\nclass FooService:\n\n    def __init__(self):\n        self.es = opensearchpy.OpenSearch(hosts=[{'host': 'localhost', 'port': 9200}])\n\n    def create(self, index, body):\n        es_object = self.es.index(index, body)\n        return es_object.get('_id')\n\n    def read(self, index, id):\n        es_object = self.es.get(index, id)\n        return es_object.get('_source')\n\n```\n\nThen you should be able to test this class by mocking OpenSearch using the following test class:\n\n```python\nfrom unittest import TestCase\nfrom openmock import openmock\nfrom foo.bar import FooService\n\nclass FooServiceTest(TestCase):\n\n    @openmock\n    def should_create_and_read_object(self):\n        # Variables used to test\n        index = 'test-index'\n        expected_document = {\n            'foo': 'bar'\n        }\n\n        # Instantiate service\n        service = FooService()\n\n        # Index document on OpenSearch\n        id = service.create(index, expected_document)\n        self.assertIsNotNone(id)\n\n        # Retrive document from OpenSearch\n        document = service.read(index, id)\n        self.assertEquals(expected_document, document)\n\n```\n\n## Notes:\n\n- The mocked **search** method returns **all available documents** indexed on the index with the requested document type.\n- The mocked **suggest** method returns the exactly suggestions dictionary passed as body serialized in OpenSearch.suggest response. **Attention:** If the term is an *int*, the suggestion will be ```python term + 1```. If not, the suggestion will be formatted as ```python {0}_suggestion.format(term) ```.\nExample:\n\t- **Suggestion Body**:\n\t```python\n    suggestion_body = {\n        'suggestion-string': {\n            'text': 'test_text',\n            'term': {\n                'field': 'string'\n            }\n        },\n        'suggestion-id': {\n            'text': 1234567,\n            'term': {\n                'field': 'id'\n            }\n        }\n    }\n    ```\n    - **Suggestion Response**:\n    ```python\n    {\n        'suggestion-string': [\n            {\n                'text': 'test_text',\n                'length': 1,\n                'options': [\n                    {\n                        'text': 'test_text_suggestion',\n                        'freq': 1,\n                        'score': 1.0\n                    }\n                ],\n                'offset': 0\n            }\n        ],\n        'suggestion-id': [\n            {\n                'text': 1234567,\n                'length': 1,\n                'options': [\n                    {\n                        'text': 1234568,\n                        'freq': 1,\n                        'score': 1.0\n                    }\n                ],\n                'offset': 0\n            }\n        ],\n    }\n    ```\n\n## Testing\n\nPreferred for testing one version of python.\n```bash\npytest test\n```\n\nWon't catch pytest tests.\n```bash\npython -m unittest\n```\n\nWe are trying to support a full matrix of openmock versions and python versions 3.6+. This is slow.\n```bash\ntox\n```\n\n## Changelog\n\n#### 2.1.0:\n- Update function (Thanks!)\n- tox runs against full matrix\n- Range queries (Thanks!)\n\n#### 2.0.0:\n- Fork from elasticmock\n\n## License\nMIT with normalize_host.py being Apache 2 from Elasticsearch.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/matthewdeanmartin/openmock",
    "keywords": "opensearch,mocking,testing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openmock",
    "package_url": "https://pypi.org/project/openmock/",
    "platform": null,
    "project_url": "https://pypi.org/project/openmock/",
    "project_urls": {
      "Bug Tracker": "https://github.com/matthewdeanmartin/openmock/issues",
      "Change Log": "https://github.com/matthewdeanmartin/openmock/blob/main/CHANGES.md",
      "Documentation": "https://github.com/matthewdeanmartin/openmock",
      "Homepage": "https://github.com/matthewdeanmartin/openmock",
      "Repository": "https://github.com/matthewdeanmartin/openmock"
    },
    "release_url": "https://pypi.org/project/openmock/2.2.0/",
    "requires_dist": [
      "opensearch-py",
      "python-dateutil",
      "python-ranges (==0.2.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "Python OpenSearch Mock for test purposes",
    "version": "2.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17033170,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ff33736f54d462d67a035f0927b3576cd97bbbd823a47fc9641517e0e5c4c32",
          "md5": "4eec23f9c32ac73dc6bd251d46b4b159",
          "sha256": "dbc242a3bd6107f432e3a31a0115029f9b0953a34cb821961e942a938211afa9"
        },
        "downloads": -1,
        "filename": "openmock-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4eec23f9c32ac73dc6bd251d46b4b159",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4",
        "size": 17363,
        "upload_time": "2022-04-28T20:12:53",
        "upload_time_iso_8601": "2022-04-28T20:12:53.097870Z",
        "url": "https://files.pythonhosted.org/packages/9f/f3/3736f54d462d67a035f0927b3576cd97bbbd823a47fc9641517e0e5c4c32/openmock-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "868a629d8fd508b07cae445a6938ecc8afb3c7dfa1afc62d618ce824136dc6a7",
          "md5": "e14d72013545e3c1e3d96e5a957305df",
          "sha256": "52fb97216c013e50a736362c3c75b09c084f0834a23c6e37100d5f4243f871df"
        },
        "downloads": -1,
        "filename": "openmock-2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e14d72013545e3c1e3d96e5a957305df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18457,
        "upload_time": "2023-02-25T17:31:24",
        "upload_time_iso_8601": "2023-02-25T17:31:24.175062Z",
        "url": "https://files.pythonhosted.org/packages/86/8a/629d8fd508b07cae445a6938ecc8afb3c7dfa1afc62d618ce824136dc6a7/openmock-2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa852f153698501bf36ee004812bbda07db49470acb4f66c8a8cb128de2571f7",
          "md5": "e600c4c4d2c0f644ab98c64b7ff7de83",
          "sha256": "517ee436fa89b5f09706228df69422f322a5a57039a6c69bdc10ad15f59da123"
        },
        "downloads": -1,
        "filename": "openmock-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e600c4c4d2c0f644ab98c64b7ff7de83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14733,
        "upload_time": "2023-02-25T17:31:25",
        "upload_time_iso_8601": "2023-02-25T17:31:25.762984Z",
        "url": "https://files.pythonhosted.org/packages/fa/85/2f153698501bf36ee004812bbda07db49470acb4f66c8a8cb128de2571f7/openmock-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "868a629d8fd508b07cae445a6938ecc8afb3c7dfa1afc62d618ce824136dc6a7",
        "md5": "e14d72013545e3c1e3d96e5a957305df",
        "sha256": "52fb97216c013e50a736362c3c75b09c084f0834a23c6e37100d5f4243f871df"
      },
      "downloads": -1,
      "filename": "openmock-2.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e14d72013545e3c1e3d96e5a957305df",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18457,
      "upload_time": "2023-02-25T17:31:24",
      "upload_time_iso_8601": "2023-02-25T17:31:24.175062Z",
      "url": "https://files.pythonhosted.org/packages/86/8a/629d8fd508b07cae445a6938ecc8afb3c7dfa1afc62d618ce824136dc6a7/openmock-2.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fa852f153698501bf36ee004812bbda07db49470acb4f66c8a8cb128de2571f7",
        "md5": "e600c4c4d2c0f644ab98c64b7ff7de83",
        "sha256": "517ee436fa89b5f09706228df69422f322a5a57039a6c69bdc10ad15f59da123"
      },
      "downloads": -1,
      "filename": "openmock-2.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e600c4c4d2c0f644ab98c64b7ff7de83",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 14733,
      "upload_time": "2023-02-25T17:31:25",
      "upload_time_iso_8601": "2023-02-25T17:31:25.762984Z",
      "url": "https://files.pythonhosted.org/packages/fa/85/2f153698501bf36ee004812bbda07db49470acb4f66c8a8cb128de2571f7/openmock-2.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}