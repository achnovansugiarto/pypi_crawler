{
  "info": {
    "author": "Julian Nash",
    "author_email": "julianjamesnash@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# dictparse\n\n![Python package](https://github.com/Julian-Nash/dictparse/workflows/Python%20package/badge.svg?branch=master)\n\nA simple, slim and useful, zero-dependency utility for parsing dictionaries or dictionary-like objects.\n\nIt's particularly useful for parsing incoming request data in REST APIs & web applications, for example in the case\n of Flask, parsing form data from `request.form`, query string arguments from`request.args` or JSON data from \n`request.json`.\n\nThe `dictparse` design takes inspiration from Python's own `argparse` library, similar to the `ArgumentParser` class\n, taking input as a dictionary or dictionary-like object, enforcing rules, types, applying functions, default values and\n returning a `NameSpace`, with values mapped to attributes.\n\n### Installation\n\n```shell script\npip install dictparse\n```\n\n### Example\n\nThe following code is a Python program that takes takes some data in the form of a dictionary and parses it:\n\n```pycon\n>>> from dictparse import DictionaryParser\n>>> parser = DictionaryParser()\n>>> parser.add_param(\"name\", str, required=True)\n>>> params = parser.parse_dict({\"name\": \"FooBar\"})\n>>> params.name\n'FooBar'\n```\n\n### Creating a parser\n\nThe first step is to create the DictionaryParser object\n\n```pycon\n>>> from dictparse import DictionaryParser\n>>> parser = DictionaryParser(description=\"Create a new user\")\n```\n\n### Adding parameters\n\nAdding parameters to the parser is done by making calls to the `add_param` method. These calls tell the\n `DictionaryParser` how to handle the values passed in and turn them into the desired output, enforcing rules\n , changing types and transforming values based on the arguments passed to the `add_param` method.\n\n```pycon\n>>> parser = DictionaryParser()\n>>> parser.add_param(\"name\", str, required=True)\n>>> parser.add_param(\"language\", str, choices=[\"python\", \"javascript\", \"rust\"])\n>>> parser.add_param(\"tags\", str, action=lambda x: x.split(\",\"))\n>>> params = parser.parse_dict({\"name\": \"FooBar\", \"language\": \"python\", \"tags\": \"foo,bar,baz\"})\n>>> params.name\n'FooBar'\n>>> params.language\n'python'\n>>> params.tags\n['foo', 'bar', 'baz']\n>>> params.to_dict()\n{'name': 'FooBar', 'language': 'python', 'tags': ['foo', 'bar', 'baz']}\n```\n\nIf the parser does not find a value matching the name, the default value is `None`\n\n### Arguments available for `add_param`\n\n```py3\nDictionaryParser.add_param(\n    name: str,\n    type_: Optional[Union[Type[str], Type[int], Type[float], Type[bool], Type[list], Type[dict], Type[set], Type[tuple]]] = None,\n    dest: Optional[str] = None,\n    required: Optional[bool] = False,\n    choices: Optional[Union[list, set, tuple]] = None,\n    action: Optional[Callable] = None,\n    description: Optional[str] = None,\n    default: Optional[Any] = None,\n    regex: Optional[str] = None\n) -> None\n```\n\n- `name`: The parameter name (required - See note below)\n- `type_`: The common parameter type (The parser will attempt to convert the parameter value to the given type)\n- `dest`: The destination name of the parameter (See note below)\n- `required`: If `True`, enforce a value for the parameter must exists\n- `choices`: A list, set, or tuple of possible choices\n- `action`: A function to apply to the value (Applied after any type conversion)\n- `description`: A description of the parameter\n- `default`: A default value for the parameter if not found\n- `regex`: A regular expression to match against (Sets the parameter to `None` if the match is negative)\n\n> Note - The `name` and `dest` parameters must comply with standard Python variable naming conventions (only start\n> with a letter or underscore & only contain alpha-numeric characters), not be a Python keyword and not start and end\n> with a double underscore (dunder)\n\n### Parsing the data\n\nAfter creating the parser and adding parameters to it, data can be parsed by calling the `parse_dict` method, passing\nin the data to be parsed. This returns a `NameSpace` object.\n\n```py3\nDictionaryParser.parse_dict(\n    data: Dict[str, Any], \n    strict: Optional[bool] = False, \n    action: Optional[Callable] = None\n) -> NameSpace:\n```\n\n- `data`: A dictionary or dictionary-like object\n- `strict`: If `True`, raises an exception if any parameters not added to the parser are received\n- `action`: A function to apply to all parameters (after any type conversion and after action passed to `add_param`)\n\n### The `NameSpace` object\n\nA `NameSpace` object is returned when calling `parse_dict` and contains the parsed data after applying your rules\ndefined when adding arguments.\n\nParameters can be accessed as attributes of the `NameSpace` using dot notation:\n\n```pycon\n>>> parser = DictionaryParser()\n>>> parser.add_param(\"age\", int, required=True)\n>>> params = parser.parse_dict({\"age\": 30})\n>>> params.age\n30\n```\n\nA standard `AttributeError` will be raised if an attribute is accessed without being added to the parser:\n\n```pycon\n>>> params.foo\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'NameSpace' object has no attribute 'foo'\n```\n\nif the `dest` parameter is supplied when adding a parameter in `add_param`, the value can only be accessed by using the\n`dest` value:\n\n```pycon\n>>> parser = DictionaryParser()\n>>> parser.add_param(\"bar\", str, dest=\"foo\")\n>>> params = parser.parse_dict({\"bar\": \"bar\"})\n>>> params.foo\n'bar'\n```\n\nThe `NameSpace` object has the following available methods:\n\n#### `get`\n\n```py3\nNameSpace.get(\n    name: str, \n    default: Optional[Any] = None\n) -> Union[None, Any]:\n```\n\nCalling the `get` method on the `NameSpace` and passing in a key works in the same way as calling `get` on a dictionary\n, returning either the value for the parameter requested or `None` if the `NameSpace` does not have that attribute.\n\nAn optional default value can be supplied using the `default` parameter to be returned if the attribute does not exist.\n\n```pycon\n>>> parser = DictionaryParser()\n>>> parser.add_param(\"age\", int, required=True)\n>>> parser.add_param(\"weight\", int)\n>>> params = parser.parse_dict({\"age\": 30, \"height\": 1.9})\n>>> params.weight\nNone\n>>> params.get(\"age\")\n30\n>>> params.get(\"foo\", 42)\n42\n```\n\n#### `to_dict`\n\n```py3\nNameSpace.to_dict() -> dict\n```\n\nReturns a dictionary of the parsed parameters.\n\n```pycon\n>>> parser = DictionaryParser()\n>>> parser.add_param(\"one\", str)\n>>> parser.add_param(\"two\", int)\n>>> parser.add_param(\"three\", list)\n>>> params = parser.parse_dict({\"one\": \"one\", \"two\": 2, \"three\": [1, 2, 3]})\n>>> params.to_dict()\n{'one': 'one', 'two': 2, 'three': [1, 2, 3]}\n```\n\n`to_dict()` accepts an optional parameter `exclude`, a list of keys to exclude from the returned dictionary\n\n```pycon\n>>> from dictparse import DictionaryParser\n>>> parser = DictionaryParser()\n>>> parser.add_param(\"csrf_token\", str, required=True)\n>>> parser.add_param(\"name\", str)\n>>> parser.add_param(\"email\", str)\n>>> params = parser.parse_dict({\"csrf_token\": \"xxyyzz112233\", \"name\": \"foo\", \"email\": \"foo@bar.com\"})\n>>> params.to_dict(exclude=[\"csrf_token\"])\n{'name': 'foo', 'email': 'foo@bar.com'}\n```\n\n#### `get_param`\n\nReturns a `Param` object\n\n```pycon\n>>> from dictparse import DictionaryParser\n>>> parser = DictionaryParser()\n>>> parser.add_param(\"names\", list, default=[])\n>>> params = parser.parse_dict({\"names\": [\"foo\", \"bar\"]})\n>>> names = params.get_param(\"names\")\n>>> names.name\n'names'\n>>> names.value\n['foo', 'bar']\n>>> names.default\n[]\n```\n\n`Param` objects are hold all data associated with the parameter, as can be seen below in the `Param.__init__` method:\n\n```shell script\nclass Param(object):\n\n    def __init__(\n            self,\n            name: str,\n            type_: Optional[Union[Type[str], Type[int], Type[float], Type[bool], Type[list], Type[dict], Type[set], Type[tuple]]] = None,\n            dest: Optional[str] = None,\n            required: Optional[bool] = False,\n            choices: Optional[Union[list, set, tuple]] = None,\n            action: Optional[Callable] = None,\n            description: Optional[str] = None,\n            default: Optional[Any] = None,\n            regex: Optional[str] = None,\n            value: Optional[Any] = None\n    ):\n```\n\n> Note - The `NameSpace` will be assigned the value for `dest` if supplied in `add_param`\n\n```pycon\n>>> from dictparse import DictionaryParser\n>>> parser = DictionaryParser()\n>>> parser.add_param(\"foo\", str, dest=\"bar\")\n>>> params = parser.parse_dict({\"foo\": 42})\n>>> param = params.get_param(\"bar\")\n>>> param.name\n'foo'\n>>> param.dest\n'bar'\n>>> param.value\n'42'\n```\n\n### Flask example\n\nAn example of parsing JSON data sent in a POST request to a Flask route:\n\n```py3\nfrom app.users import create_user\n\nfrom flask import Flask, request\nfrom respond import JSONResponse\nfrom dictparse import DictionaryParser\n\n\ndef create_app():\n\n    app = Flask(__name__)\n\n    @app.route(\"/\", methods=[\"POST\"])\n    def post():\n\n        parser = DictionaryParser(description=\"Create a new user\")\n\n        parser.add_param(\"name\", str, required=True)\n        parser.add_param(\"age\", int)\n        parser.add_param(\"password\", str, required=True, action=lambda x: x.encode(\"utf-8\"))\n        parser.add_param(\"interests\", list, action=lambda x: [i.strip() for i in x])\n        parser.add_param(\"level\", float, default=1.5)\n        parser.add_param(\"stage\", str, choices=[\"alpha\", \"beta\"])\n\n        try:\n            params = parser.parse_dict(request.get_json())\n        except Exception as e:\n            return JSONResponse.bad_request(str(e))\n\n        user = create_user(\n            name=params.name,\n            age=params.age,\n            password=params.password,\n            interests=params.interests,\n            level=params.level,\n            stage=params.stage\n        )\n\n        return JSONResponse.created(user.to_dict())\n\n    return app\n\n\nif __name__ == \"__main__\":\n    app = create_app()\n    app.run()\n\n```\n\n### Exception handling\n\nExceptions will be raised in the following scenarios:\n\n##### `ParserTypeError`\n\nRaised when a parameter cannot be parsed to the type declared in `add_param`\n\n```py3\nfrom dictparse import DictionaryParser\nfrom dictparse.exceptions import ParserTypeError\n\nparser = DictionaryParser()\nparser.add_param(\"age\", int)\n\ntry:\n    params = parser.parse_dict({\"age\": \"thirty\"})\nexcept ParserTypeError as e:\n    print(e)  # Invalid value 'thirty' for parameter 'age', expected 'int' not 'str'\n```\n\n`ParserTypeError` contains the following attributes:\n\n- `param`: The parameter name (`str`)\n- `value`: The parameter value (`Any`)\n- `expected`: The expected type (`type`)\n\n##### `ParserRequiredParameterError`\n\nRaised when `parse_dict` is called and a parameter is required, but not found\n\n```py3\nfrom dictparse import DictionaryParser\nfrom dictparse.exceptions import ParserRequiredParameterError\n\nparser = DictionaryParser()\nparser.add_param(\"name\", str)\nparser.add_param(\"email\", str, required=True)\n\ntry:\n    params = parser.parse_dict({\"name\": \"John Doe\"})\nexcept ParserRequiredParameterError as e:\n    print(e)  # Missing required parameter 'email'\n```\n\n- `ParserRequiredParameterError` has a single attribute `param`, the name of the parameter (str)\n\n##### `ParserInvalidChoiceError`\n\nRaised when `parse_dict` is called and parses a value not defined in the `choices` parameter of `add_param`\n\n```py3\nfrom dictparse import DictionaryParser\nfrom dictparse.exceptions import ParserInvalidChoiceError\n\nparser = DictionaryParser()\nparser.add_param(\"name\", str)\nparser.add_param(\"language\", str, choices=[\"python\", \"bash\"])\n\ntry:\n    params = parser.parse_dict({\"name\": \"John Doe\", \"language\": \"javascript\"})\nexcept ParserInvalidChoiceError as e:\n    print(e)  # Parameter 'language' must be one of '['python', 'bash']', not 'javascript'\n```\n\n`ParserInvalidChoiceError` has the following 3 attributes:\n\n- `param`: The parameter name (str)\n- `value`: The parameter value (Any)\n- `choices`: The available choices added via `add_param` (list|set|tuple)\n\n\n##### `ParserInvalidParameterError`\n\nRaised calling `parse_dict` with `strict` set to `True`\n\nThe `strict` parameter enforces the parser to only accept parameters that have been added to the parser\n\n```py3\nfrom dictparse import DictionaryParser\nfrom dictparse.exceptions import ParserInvalidParameterError\n\nparser = DictionaryParser()\nparser.add_param(\"name\", str)\nparser.add_param(\"language\", str, choices=[\"python\", \"bash\"])\n\ntry:\n    params = parser.parse_dict({\"name\": \"John Doe\", \"language\": \"python\", \"email\": \"jdoe@gmail.com\"}, strict=True)\nexcept ParserInvalidParameterError as e:\n    print(e)  # Invalid parameter 'email'\n```\n\n`ParserInvalidParameterError` has a single attribute `param`, the name of the parameter (str)\n\n### Other runtime considerations for `parse_dict`\n\nIf an invalid data type for `data` is passed to `parse_dict` (such as a list or string), it raises a \n`ParserInvalidDataTypeError`\n\n```py3\nfrom dictparse import DictionaryParser\nfrom dictparse.exceptions import ParserInvalidDataTypeError\n\nparser = DictionaryParser()\nparser.add_param(\"name\", str)\n\ntry:\n    params = parser.parse_dict([{\"name\", \"John Doe\"}])\nexcept ParserInvalidDataTypeError as e:\n    print(e)  # Invalid type for 'data', must be a dict or dict-like object, not 'list'\n\ntry:\n    params = parser.parse_dict(\"foo\")\nexcept ParserInvalidDataTypeError as e:\n    print(e)  # Invalid type for 'data', must be a dict or dict-like object, not 'str'\n```\n\n### Tests & coverage\n\nA test suite is available in the `tests` directory with 100% coverage (15/Sep/2020)\n\n```shell script\nName                      Stmts   Miss  Cover\n---------------------------------------------\ndictparse/__init__.py         1      0   100%\ndictparse/exceptions.py      37      0   100%\ndictparse/parser.py         106      0   100%\ntests/__init__.py             0      0   100%\ntests/test_parser.py        310      0   100%\n---------------------------------------------\nTOTAL                       454      0   100%\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Julian-Nash/dictparse",
    "keywords": "dict dictionary parser flask django validation request json",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dictparse",
    "package_url": "https://pypi.org/project/dictparse/",
    "platform": "",
    "project_url": "https://pypi.org/project/dictparse/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Julian-Nash/dictparse",
      "Documentation": "https://github.com/Julian-Nash/dictparse",
      "Homepage": "https://github.com/Julian-Nash/dictparse",
      "Source Code": "https://github.com/Julian-Nash/dictparse"
    },
    "release_url": "https://pypi.org/project/dictparse/1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python dictionary parser",
    "version": "1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8523658,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78da76f282a8c2c6bff168c9130c16be8bfd3014048340e0ebebd49a1c0e1981",
          "md5": "1f96f8271ebe092189574324c43b59d8",
          "sha256": "2296a3b384f91ff7b3880f808fc57a008581de3addb7a4a12bcf98c5e629ccea"
        },
        "downloads": -1,
        "filename": "dictparse-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f96f8271ebe092189574324c43b59d8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10945,
        "upload_time": "2020-09-15T12:09:48",
        "upload_time_iso_8601": "2020-09-15T12:09:48.511382Z",
        "url": "https://files.pythonhosted.org/packages/78/da/76f282a8c2c6bff168c9130c16be8bfd3014048340e0ebebd49a1c0e1981/dictparse-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfee3bc86a7928aab55e373261f6057e7ea8037eba4d059dac4b8e79e0088047",
          "md5": "721a96ac101964a7d3bcae8bf55f7c2d",
          "sha256": "6ebdfcfa64cb5f4afdcd6f088dc8b552eeb0c2f8d2bda2f4a170859e9b8a6110"
        },
        "downloads": -1,
        "filename": "dictparse-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "721a96ac101964a7d3bcae8bf55f7c2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13164,
        "upload_time": "2020-09-15T12:09:53",
        "upload_time_iso_8601": "2020-09-15T12:09:53.094862Z",
        "url": "https://files.pythonhosted.org/packages/df/ee/3bc86a7928aab55e373261f6057e7ea8037eba4d059dac4b8e79e0088047/dictparse-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0659a3535af32af139101f27b7f8b18356cee7a5b32dd8119f2990fb4a52115",
          "md5": "52a280ff03aa350b064b2da37a31de2c",
          "sha256": "37ea08723ab6650132ded132cbd9eaff8938a1efd2cc4d7506e6609f7a8f6ef3"
        },
        "downloads": -1,
        "filename": "dictparse-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "52a280ff03aa350b064b2da37a31de2c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11370,
        "upload_time": "2020-09-15T12:40:31",
        "upload_time_iso_8601": "2020-09-15T12:40:31.922257Z",
        "url": "https://files.pythonhosted.org/packages/b0/65/9a3535af32af139101f27b7f8b18356cee7a5b32dd8119f2990fb4a52115/dictparse-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1236d138d3d7b01a4292879036b03b65232eb76dd75092ff71ef5e1893c451ad",
          "md5": "bb2eba88ba3a0b8eaa1b83b9628b86bf",
          "sha256": "835fef5ab4a09e2297c323dc7c2d7619fa14955facc15fff7f20a6f14c399568"
        },
        "downloads": -1,
        "filename": "dictparse-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bb2eba88ba3a0b8eaa1b83b9628b86bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14041,
        "upload_time": "2020-09-15T12:40:34",
        "upload_time_iso_8601": "2020-09-15T12:40:34.622299Z",
        "url": "https://files.pythonhosted.org/packages/12/36/d138d3d7b01a4292879036b03b65232eb76dd75092ff71ef5e1893c451ad/dictparse-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b8d4f9e44e5f2354fa4e59cbced2356c154b76a85308751d2f81ef96e47f106",
          "md5": "52b5e30681ed10f503274c901e789fa9",
          "sha256": "9f1a39737b9977919c9d437a69a014569c1bef53cef6fa69d5806ec62b291bc8"
        },
        "downloads": -1,
        "filename": "dictparse-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "52b5e30681ed10f503274c901e789fa9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11912,
        "upload_time": "2020-09-24T21:28:05",
        "upload_time_iso_8601": "2020-09-24T21:28:05.186842Z",
        "url": "https://files.pythonhosted.org/packages/4b/8d/4f9e44e5f2354fa4e59cbced2356c154b76a85308751d2f81ef96e47f106/dictparse-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0eafd1907c358cdff99da497e61d36a0d85c2a95f08bc3166e98ce49a81bf0a3",
          "md5": "c1834183750dc32e094317dfd1d39e84",
          "sha256": "130fa1f7dff15ece2b1242c2d7b7f79e76640ccfd6331a88f4648ce79965e64d"
        },
        "downloads": -1,
        "filename": "dictparse-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c1834183750dc32e094317dfd1d39e84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14359,
        "upload_time": "2020-09-24T21:28:07",
        "upload_time_iso_8601": "2020-09-24T21:28:07.074780Z",
        "url": "https://files.pythonhosted.org/packages/0e/af/d1907c358cdff99da497e61d36a0d85c2a95f08bc3166e98ce49a81bf0a3/dictparse-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcfc2821c7574a64c951ae1e1ecb9ad7dbe840a6d11d47c326ac19ece75ff09c",
          "md5": "0cd6ab1f09ec149c8118ec0b55cf68d8",
          "sha256": "18c60574b1cac206673e473d728fd561f965b4c14742aa8b1aee6ee37ebf5331"
        },
        "downloads": -1,
        "filename": "dictparse-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0cd6ab1f09ec149c8118ec0b55cf68d8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12204,
        "upload_time": "2020-10-26T12:36:45",
        "upload_time_iso_8601": "2020-10-26T12:36:45.581683Z",
        "url": "https://files.pythonhosted.org/packages/fc/fc/2821c7574a64c951ae1e1ecb9ad7dbe840a6d11d47c326ac19ece75ff09c/dictparse-1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f0dfe328a60dc3b9caa7b53a9baf7cba69990d4658abe24571ce5ee69248919",
          "md5": "81eb253cacc1ea3bfc86bf64520e439e",
          "sha256": "1da0439bd2f5ee539abf5ce4503e2987dd98d0543553b4577ee054604aa6e29f"
        },
        "downloads": -1,
        "filename": "dictparse-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "81eb253cacc1ea3bfc86bf64520e439e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14734,
        "upload_time": "2020-10-26T12:36:47",
        "upload_time_iso_8601": "2020-10-26T12:36:47.387236Z",
        "url": "https://files.pythonhosted.org/packages/3f/0d/fe328a60dc3b9caa7b53a9baf7cba69990d4658abe24571ce5ee69248919/dictparse-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e1332fa3e41253544d6b729552c7c940949652ed18ceec28d35b5e72aa2af7f",
          "md5": "79c36c669bc1a1d2cb27b22635857246",
          "sha256": "1481bedf2de9ecc3d0e9d84017280cfefc28153ca0f16360b48f1b9694f55531"
        },
        "downloads": -1,
        "filename": "dictparse-1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79c36c669bc1a1d2cb27b22635857246",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12393,
        "upload_time": "2020-10-28T14:43:13",
        "upload_time_iso_8601": "2020-10-28T14:43:13.922962Z",
        "url": "https://files.pythonhosted.org/packages/1e/13/32fa3e41253544d6b729552c7c940949652ed18ceec28d35b5e72aa2af7f/dictparse-1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "101f73b2e91227224cb5d7b2973368a1a372b867cd9bb88889ce9c4e6bf02993",
          "md5": "760cc1b99493a0488b3093185444d867",
          "sha256": "54f2157da645e38fd378f4958c1deb466b6adcc5aaf9851df53aed9f01d97c53"
        },
        "downloads": -1,
        "filename": "dictparse-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "760cc1b99493a0488b3093185444d867",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14923,
        "upload_time": "2020-10-28T14:43:17",
        "upload_time_iso_8601": "2020-10-28T14:43:17.533481Z",
        "url": "https://files.pythonhosted.org/packages/10/1f/73b2e91227224cb5d7b2973368a1a372b867cd9bb88889ce9c4e6bf02993/dictparse-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e1332fa3e41253544d6b729552c7c940949652ed18ceec28d35b5e72aa2af7f",
        "md5": "79c36c669bc1a1d2cb27b22635857246",
        "sha256": "1481bedf2de9ecc3d0e9d84017280cfefc28153ca0f16360b48f1b9694f55531"
      },
      "downloads": -1,
      "filename": "dictparse-1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "79c36c669bc1a1d2cb27b22635857246",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 12393,
      "upload_time": "2020-10-28T14:43:13",
      "upload_time_iso_8601": "2020-10-28T14:43:13.922962Z",
      "url": "https://files.pythonhosted.org/packages/1e/13/32fa3e41253544d6b729552c7c940949652ed18ceec28d35b5e72aa2af7f/dictparse-1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "101f73b2e91227224cb5d7b2973368a1a372b867cd9bb88889ce9c4e6bf02993",
        "md5": "760cc1b99493a0488b3093185444d867",
        "sha256": "54f2157da645e38fd378f4958c1deb466b6adcc5aaf9851df53aed9f01d97c53"
      },
      "downloads": -1,
      "filename": "dictparse-1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "760cc1b99493a0488b3093185444d867",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14923,
      "upload_time": "2020-10-28T14:43:17",
      "upload_time_iso_8601": "2020-10-28T14:43:17.533481Z",
      "url": "https://files.pythonhosted.org/packages/10/1f/73b2e91227224cb5d7b2973368a1a372b867cd9bb88889ce9c4e6bf02993/dictparse-1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}