{
  "info": {
    "author": "Hernan E. Grecco",
    "author_email": "hernan.grecco@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/numbakit-anjit.svg\n    :target: https://pypi.python.org/pypi/numbakit-anjit\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/l/numbakit-anjit.svg\n    :target: https://pypi.python.org/pypi/numbakit-anjit\n    :alt: License\n\n.. image:: https://img.shields.io/pypi/pyversions/numbakit-anjit.svg\n    :target: https://pypi.python.org/pypi/numbakit-anjit\n    :alt: Python Versions\n\n.. image:: https://github.com/hgrecco/numbakit-anjit/workflows/CI/badge.svg?branch=main\n    :target: https://github.com/hgrecco/numbakit-anjit/actions?query=workflow%3ACI\n\n.. image:: https://github.com/hgrecco/numbakit-anjit/workflows/Lint/badge.svg?branch=main\n    :target: https://github.com/hgrecco/numbakit-anjit/actions?query=workflow%3ALint\n\n.. image:: https://coveralls.io/repos/github/hgrecco/numbakit-anjit/badge.svg?branch=main\n    :target: https://coveralls.io/github/hgrecco/numbakit-anjit?branch=main\n\n\nnumbakit-anjit: leveraging numba to speed up ODE integration\n============================================================\n\nnumbakit-anjit (nbkanjit) to assist Numba_ intensive project\nby providing `anjit`, an annotation aware numba jit decorator and\nmanager object to handle Jit configuration.\n\nIt runs in Python 3.7+ depending on Numba_. It is licensed under\nBSD.\n\nIt is extremely easy and natural to use:\n\n.. code-block:: python\n\n    >>> from numba import types as nt\n    >>> import nbkanjit\n    >>> @nbkanjit.anjit\n    ... def func(x: nt.float64, y: nt.float64) -> nt.float64:\n    ...     return x + y\n\nYou can also use Python types:\n\n.. code-block:: python\n\n    >>> @nbkanjit.anjit\n    ... def func(x: float, y: float) -> float:\n    ...     return x + y\n\nwhich are mapped to numba types.\n\nYou can use:\n\n.. code-block:: python\n\n    >>> from nbkanjit import Function as F_\n    >>> @nbkanjit.anjit\n    ... def func1(x: int, y: float) -> float:\n    ...     return x + y\n    >>> def func2(x: int, y: F_(funct1)._return) -> float:\n    ...     return x + y\n\nYou can also use the annotation of any argument. For example,\n**F_(func).x** in this case is equivalent to **int**. Or even the\nfull function **F_(func)** that will return\n**FunctionType(float64(int, float64))**\n\nIt also provides a manager to encapsulate (and reuse different parameters)\n\n.. code-block:: python\n\n    >>> import nbkanjit\n    >>> jm = nbkanjit.JitManager(cache=True)\n    >>> @jm.anjit\n    ... def func(x: float, y:float) -> nt.float64:\n    ...     return x + y\n\neven to be applied in to the standard numba njit.\n\n.. code-block:: python\n\n    >>> jm = nbkanjit.JitManager(cache=True)\n    >>> @jm.njit\n    ... def func(x, y):\n    ...     return x + y\n\nAnd you can teach the manager new tricks:\n\n.. code-block:: python\n\n    >>> jm.mapping[\"array1d\"] = nt.float64[:]\n\nby mapping any python object into a numba type.\n\nAnd a way to register a signature as a template (tmpl):\n\n.. code-block:: python\n\n    >>> import nbkanjit\n    >>> jm = nbkanjit.JitManager()\n    >>> jm.register(\"nice\", nt.float64((nt.float64, nt.float64)))\n\nand then use it for non-annotated function by explicitly name:\n\n.. code-block:: python\n\n    >>> @jm.njit_tmpl(\"nice\")\n    ... def other_func(x, y):\n    ...     return x + y\n\nor using the name of the function:\n\n.. code-block:: python\n\n    >>> @jm.njit_tmpl\n    ... def nice(x, y):\n    ...     return x + y\n\nYou can register directly from a function:\n\n.. code-block:: python\n\n    >>> @jm.register(\"nice\")\n    ... def _(x: float, y:float) -> nt.float64:\n    ...     pass\n\nor again taking the function name:\n\n.. code-block:: python\n\n    >>> @jm.register\n    ... def nice(x: float, y:float) -> nt.float64:\n    ...     pass\n\n\n\nQuick Installation\n------------------\n\nTo install numbakit-anjit, simply (*soon*):\n\n.. code-block:: bash\n\n    $ pip install numbakit-anjit\n\nor utilizing conda, with the conda-forge channel (*soon*):\n\n.. code-block:: bash\n\n    $ conda install -c conda-forge numbakit-anjit\n\nand then simply enjoy it!\n\n\nWhy\n---\n\nNumba *njit* is awesome. Simple to use, produces the appropriate machine code\nonce that the function is called. As the `Numba docs`_ says:\n\n::\n\n   in [Lazy mode], compilation will be deferred until the first function\n   execution. Numba will infer the argument types at call time, and\n   generate optimized code based on this information. Numba will also\n   be able to compile separate specializations depending on the input\n   types.\n\nBut numba also has an **eager mode**:\n\n::\n\n   In which you can also tell Numba the function signature you are expecting.\n   [..] In this case, the corresponding specialization will be compiled by the\n   decorator, and no other specialization will be allowed. This is useful\n   if you want fine-grained control over types chosen by the compiler (for\n   example, to use single-precision floats).\n\nThis can produce slightly faster code as the compiler does not need to infer\nthe types. It also provides type check at definition time ensuring correctness.\nIn numba intensive projects, this can be an useful trait. Finally, eager\ncompilation is currently required to have two functions with the same signature\nto be arguments of a third one, without needing to recompile this last one in each\ncase.\n\nAnother think we like about *njit* is that is highly configurable using keyword\narguments and even some configurations could be applied globally using env\nvariables.\n\nWhile developing `numbakit-ode`_ I was missing two things:\n\n1. That eager compilation make use of function annotations\n2. A way to manipulate *njit* options in a centralized but\n   granular manner\n\n\nSo, `numbakit-anjit` was born.\n\n\n----\n\nnumbakit-anjit is maintained by a community. See AUTHORS_ for a complete list.\n\nTo review an ordered list of notable changes for each version of a project,\nsee CHANGES_\n\n\n.. _`Numba`: https://numba.pydata.org/\n.. _`AUTHORS`: https://github.com/hgrecco/numbakit-anjit/blob/master/AUTHORS\n.. _`CHANGES`: https://github.com/hgrecco/numbakit-anjit/blob/master/CHANGES\n.. _`Numba docs`: https://numba.pydata.org/numba-doc/latest/user/jit.html#compiling-python-code-with-jit\n.. _`numbakit-ode`: https://github.com/hgrecco/numbakit-ode\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hgrecco/numbakit-anjit",
    "keywords": "numba,jit,decorator,annotation",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "numbakit-anjit",
    "package_url": "https://pypi.org/project/numbakit-anjit/",
    "platform": "",
    "project_url": "https://pypi.org/project/numbakit-anjit/",
    "project_urls": {
      "Homepage": "https://github.com/hgrecco/numbakit-anjit"
    },
    "release_url": "https://pypi.org/project/numbakit-anjit/0.2/",
    "requires_dist": [
      "packaging",
      "numba (>=0.49)",
      "importlib-metadata ; python_version < \"3.8\"",
      "pytest ; extra == 'test'",
      "pytest-mpl ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "pytest-subtests ; extra == 'test'",
      "asv ; extra == 'test'"
    ],
    "requires_python": ">=3.7",
    "summary": "Annotation aware numba njit.",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10035271,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90d43614b8f0ad5ed097218b868b999e4979df4cf09251f7a3d045ec7aa2a8e6",
          "md5": "1b155dac51cde82b46cf1a824014cac4",
          "sha256": "2f0d5896afa12d43ea541bed61cc9583564aa4548795fb39096d78ae5eeb1029"
        },
        "downloads": -1,
        "filename": "numbakit_anjit-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b155dac51cde82b46cf1a824014cac4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 10445,
        "upload_time": "2021-02-25T05:21:53",
        "upload_time_iso_8601": "2021-02-25T05:21:53.402221Z",
        "url": "https://files.pythonhosted.org/packages/90/d4/3614b8f0ad5ed097218b868b999e4979df4cf09251f7a3d045ec7aa2a8e6/numbakit_anjit-0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "013632bfe8aabda091fb2459c2dba614ccb01137211a82441bbe9a846ba74e0d",
          "md5": "beb55e793498b89753f4e964c54596dc",
          "sha256": "489dd2b8388993fa2c699a17432cf2e0c9dd192eb3f6da964b478ab07dcc2e92"
        },
        "downloads": -1,
        "filename": "numbakit-anjit-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "beb55e793498b89753f4e964c54596dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12586,
        "upload_time": "2021-02-25T05:21:58",
        "upload_time_iso_8601": "2021-02-25T05:21:58.083770Z",
        "url": "https://files.pythonhosted.org/packages/01/36/32bfe8aabda091fb2459c2dba614ccb01137211a82441bbe9a846ba74e0d/numbakit-anjit-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a26afee624312a405ee63061bb67a40c47145f14d416f270e8a59c40710353bb",
          "md5": "2ee40eda6da8f74fc8763b11b56fbcdd",
          "sha256": "3f59995d4949ea7f5f8d9d99aacb4dfb8b106f4cec1a6b5754f0272adf256681"
        },
        "downloads": -1,
        "filename": "numbakit_anjit-0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ee40eda6da8f74fc8763b11b56fbcdd",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7",
        "size": 12828,
        "upload_time": "2021-04-12T03:22:46",
        "upload_time_iso_8601": "2021-04-12T03:22:46.421804Z",
        "url": "https://files.pythonhosted.org/packages/a2/6a/fee624312a405ee63061bb67a40c47145f14d416f270e8a59c40710353bb/numbakit_anjit-0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8a81f9fb02bea0aedfdf1aeacf3731a5e3c9c5510912a0adcf7e4afffb42ebd",
          "md5": "5931080623e2929f22489f902ab9b5cb",
          "sha256": "ed0b392bc986f267d21ecbf88d313f233c257361a974d0578faa3040cf60a311"
        },
        "downloads": -1,
        "filename": "numbakit-anjit-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5931080623e2929f22489f902ab9b5cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14162,
        "upload_time": "2021-04-12T03:22:48",
        "upload_time_iso_8601": "2021-04-12T03:22:48.878173Z",
        "url": "https://files.pythonhosted.org/packages/b8/a8/1f9fb02bea0aedfdf1aeacf3731a5e3c9c5510912a0adcf7e4afffb42ebd/numbakit-anjit-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a26afee624312a405ee63061bb67a40c47145f14d416f270e8a59c40710353bb",
        "md5": "2ee40eda6da8f74fc8763b11b56fbcdd",
        "sha256": "3f59995d4949ea7f5f8d9d99aacb4dfb8b106f4cec1a6b5754f0272adf256681"
      },
      "downloads": -1,
      "filename": "numbakit_anjit-0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2ee40eda6da8f74fc8763b11b56fbcdd",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7",
      "size": 12828,
      "upload_time": "2021-04-12T03:22:46",
      "upload_time_iso_8601": "2021-04-12T03:22:46.421804Z",
      "url": "https://files.pythonhosted.org/packages/a2/6a/fee624312a405ee63061bb67a40c47145f14d416f270e8a59c40710353bb/numbakit_anjit-0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8a81f9fb02bea0aedfdf1aeacf3731a5e3c9c5510912a0adcf7e4afffb42ebd",
        "md5": "5931080623e2929f22489f902ab9b5cb",
        "sha256": "ed0b392bc986f267d21ecbf88d313f233c257361a974d0578faa3040cf60a311"
      },
      "downloads": -1,
      "filename": "numbakit-anjit-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5931080623e2929f22489f902ab9b5cb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 14162,
      "upload_time": "2021-04-12T03:22:48",
      "upload_time_iso_8601": "2021-04-12T03:22:48.878173Z",
      "url": "https://files.pythonhosted.org/packages/b8/a8/1f9fb02bea0aedfdf1aeacf3731a5e3c9c5510912a0adcf7e4afffb42ebd/numbakit-anjit-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}