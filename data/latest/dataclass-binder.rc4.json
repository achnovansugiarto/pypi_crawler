{
  "info": {
    "author": "Maarten ter Huurne",
    "author_email": "maarten.terhuurne@protix.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Dataclass Binder\n\nLibrary to bind TOML data to Python dataclasses in a type-safe way.\n\n\n## Features\n\nCurrently it has the following properties that might set it apart from other data binding libraries:\n\n- requires Python 3.10+\n- relies only on dataclasses from the Python standard library\n- detailed error messages which mention location, expected data and actual data\n- strict parsing which considers unknown keys to be errors\n- support for durations (`timedelta`)\n- support for immutable (frozen) dataclasses\n- can bind data from files, I/O streams or pre-parsed dictionaries\n- can generate configuration templates from dataclass definitions\n\nThis library was originally designed for parsing configuration files.\nAs TOML's data model is very similar to JSON's, adding support for JSON in the future would be an option and would make the library useful for binding HTTP API requests.\n\n\n## Maturity\n\nThis library is fully type-checked, has unit tests which provide 100% branch coverage and is used in production, so it should be reliable.\n\nThe API might still change in incompatible ways until the 1.0 release.\nIn particular the following aspects are subject to change:\n\n- use of key suffixes for `timedelta`: this mechanism doesn't work for arrays\n- the handling of separators in keys: currently `-` in TOML is mapped to `_` in Python and `_` is forbidden in TOML; most applications seem to accept both `-` and `_` in TOML instead\n\n\n## Why Dataclasses?\n\nA typical TOML, JSON or YAML parser returns the parse results as a nested dictionary.\nYou might wonder why you would want to use a data binding library rather than just getting the values directly from that dictionary.\n\nLet's take the following example code for a service that connects to a database using a connection URL configured in a TOML file:\n\n```py\nimport tomllib  # or 'tomli' on Python <3.11\n\n\ndef read_config() -> dict:\n    with open(\"config.toml\", \"rb\") as f:\n        config = tomllib.load(f)\n    return config\n\ndef handle_request(config: dict) -> None:\n    url = config[\"database-url\"]\n    print(\"connect to database:\", url)\n\nconfig = read_config()\n...\nhandle_request(config)\n```\n\nIf the configuration is missing a `database-url` key or its value is not a string, this service would start up without complaints and then fail when the first requests comes in.\nIt would be better to instead check the configuration on startup, so let's add code for that:\n\n```py\ndef read_config():\n    with open(\"config.toml\", \"rb\") as f:\n        config = tomllib.load(f)\n\n    url = config[\"database-url\"]\n    if not isinstance(url, str):\n        raise TypeError(\n            f\"Value for 'database-url' has type '{type(url).__name__}', expected 'str'\"\n        )\n\n    return config\n```\n\nImagine you have 20 different configurable options: you'd need this code 20 times.\n\nNow let's assume that you use a type checker like `mypy`.\nInside `read_config()`, the type checker will know that `url` is a `str`, but if you fetch the same value elsewhere in the code, that information is lost:\n\n```py\ndef handle_request(config: dict) -> None:\n    url = config[\"database-url\"]\n    reveal_type(url)\n    print(\"connect to database:\", url)\n```\n\nWhen you run `mypy` on this code, it will output 'Revealed type is \"Any\"'.\nFalling back to `Any` means type checking will not be able to find type mismatches and autocomplete in an IDE will not work well either.\n\nDeclaring the desired type in a dataclass solves both these issues:\n- the type can be verified at runtime before instantiating the dataclass\n- tooling knows the type when you read the value from the dataclass\n\nHaving the dataclass as a central and formal place for defining the configuration format is also an advantage.\nFor example, it enables automatic generation of a documented configuration file template.\n\n\n## Usage\n\nThe `dataclass_binder` module contains the `Binder` class which makes it easy to bind TOML data, such as a configuration file, to Python [dataclasses](https://docs.python.org/3/library/dataclasses.html).\n\nThe binding is a two-step process:\n- specialize the `Binder` class by using your top-level dataclass as a type argument\n- call the `parse_toml()` method, providing the path of the configuration file as its argument\n\nPut together, the code looks like this:\n\n```py\nimport logging\nimport sys\nfrom pathlib import Path\n\nfrom dataclass_binder import Binder\n\n\nlogger = logging.getLogger(__name__)\n\nif __name__ == \"__main__\":\n    config_file = Path(\"config.toml\")\n    try:\n        config = Binder[Config].parse_toml(config_file)\n    except Exception as ex:\n        logger.critical(\"Error reading configuration file '%s': %s\", config_file, ex)\n        sys.exit(1)\n```\n\n### Binding a Pre-parsed Dictionary\n\nIf you don't want to bind the contents of a full file, there is also the option to bind a pre-parsed dictionary instead.\nFor this, you can use the `bind()` method on the specialized `Binder` class.\n\nFor example, the following service uses a hybrid configuration format where a single file configures both the service itself and logging system:\n\n```py\nimport logging.config\n\nimport tomllib  # or 'tomli' on Python <3.11\nfrom dataclass_binder import Binder\n\n\nwith open(\"config.toml\", \"rb\") as f:\n    config = tomllib.load(f)\nservice_config = Binder[ServiceConfig].bind(config[\"service\"])\nlogging.config.dictConfig(config[\"logging\"])\n```\n\nTo keep these examples short, from now on `import` statements will only be included the first time a particular imported name is used.\n\n### Basic Types\n\nDataclass fields correspond to TOML keys. In the dataclass, underscores are used as word separators, while dashes are used in the TOML file. Let's configure a service that listens on a TCP port for requests and stores its data in a database, using the following TOML fragment:\n\n```toml\ndatabase-url = 'postgresql://user:password@host/db'\nport = 5432\n```\n\nThis configuration can be bound to the following dataclass:\n\n```py\nfrom dataclasses import dataclass\n\n@dataclass\nclass Config:\n    database_url: str\n    port: int\n```\n\nFields can be made optional by assigning a default value. Using `None` as a default value is allowed too:\n\n```py\n@dataclass\nclass Config:\n    verbose: bool = False\n    webhook_url: str | None = None\n```\n\nThe `float` type can be used to bind floating point numbers.\nSupport for `Decimal` is not there at the moment but would be relatively easy to add, as `tomllib`/`tomli` has an option for that.\n\n### Dates and Times\n\nTOML handles dates and timestamps as first-class values.\nDate, time and date+time TOML values are bound to `datetime.date`, `datetime.time` and `datetime.datetime` Python objects respectively.\n\nThere is also support for time intervals using `datetime.timedelta`:\n\n```py\nfrom datetime import timedelta\n\n@dataclass\nclass Config:\n    retry_after: timedelta\n    delete_after: timedelta\n```\n\nIntervals shorter than a day can be specified using a TOML time value.\nLonger intervals are supported by adding an `-hours`, `-days`, or `-weeks` suffix.\nOther supported suffixes are `-minutes`, `-seconds`, `-milliseconds` and `-microseconds`, but these are there for completeness sake and less likely to be useful.\nHere is an example TOML fragment corresponding to the dataclass above:\n\n```toml\nretry-after = 00:02:30\ndelete-after-days = 30\n```\n\n### Collections\n\nLists and dictionaries can be used to bind TOML arrays and tables.\nIf you want to make a `list` or `dict` optional, you need to provide a default value via the `default_factory` mechanism as usual, see the [dataclasses documentation](https://docs.python.org/3/library/dataclasses.html#mutable-default-values) for details.\n\n```py\nfrom dataclasses import dataclass, field\n\n@dataclass\nclass Config:\n    tags: list[str] = field(default_factory=list)\n    limits: dict[str, int]\n```\n\nThe dataclass above can be used to bind the following TOML fragment:\n\n```toml\ntags = [\"production\", \"development\"]\nlimits = {ram-gb = 1, disk-gb = 100}\n```\n\nAn alternative to `default_factory` is to use a homogeneous (single element type) tuple:\n\n```py\n@dataclass\nclass Config:\n    tags: tuple[str, ...] = ()\n    limits: dict[str, int]\n```\n\nHeterogeneous tuples are supported too: for example `tuple[str, bool]` binds a TOML array that must always have a string as its first element and a Boolean as its second and last element.\nIt is generally clearer though to define a separate dataclass when you need more than one value to configure something:\n\n```py\n@dataclass\nclass Webhook:\n    url: str\n    token: str\n\n@dataclass\nclass Config:\n    webhooks: tuple[Webhook, ...] = ()\n```\n\nThe extra keys (`url` and `token` in this example) provide the clarity:\n\n```toml\nwebhooks = [\n    {url = \"https://host1/notify\", token = \"12345\"},\n    {url = \"https://host2/hook\", token = \"frperg\"}\n]\n```\n\nTOML's array-of-tables syntax can make this configuration a bit easier on the eyes:\n\n```toml\n[[webhooks]]\nurl = \"https://host1/notify\"\ntoken = \"12345\"\n\n[[webhooks]]\nurl = \"https://host2/hook\"\ntoken = \"frperg\"\n```\n\nAlways define additional dataclasses at the module level in your Python code: if the class is for example defined inside a function, the `Binder` specialization will not be able to find it.\n\n### Plugins\n\nTo select plugins to activate, you can bind Python classes or modules using `type[BaseClass]` and `types.ModuleType` annotations respectively:\n\n```py\nfrom dataclasses import dataclass, field\nfrom types import ModuleType\n\nfrom supertool.plugins import PostProcessor\n\n\n@dataclass\nclass PluginConfig:\n    postprocessors = tuple[type[PostProcessor], ...] = ()\n    modules: dict[str, ModuleType] = field(default_factory=dict)\n```\n\nIn the TOML, you specify Python classes or modules using their fully qualified names:\n\n```toml\npostprocessors = [\"supertool_addons.reporters.JSONReport\"]\nmodules = {lint = \"supertool_addons.linter\"}\n```\n\nThere is no mechanism yet to add configuration to be used by the plugins.\n\n### Immutable\n\nIf you prefer immutable configuration objects, you can achieve that using the `frozen` argument of the `dataclass` decorator and using abstract collection types in the annotations. For example, the following dataclass will be instantiated with a `tuple` object for `tags` and an immutable dictionary view for `limits`:\n\n```py\nfrom collections.abc import Mapping, Sequence\n\n\n@dataclass(frozen=True)\nclass Config:\n    tags: Sequence[str] = ()\n    limits: Mapping[str, int]\n```\n\n### Generating a Configuration Template\n\nTo provide users with a starting point for configuring your application/service, you can automatically generate a configuration template from the information in the dataclass.\n\nFor example, when the following dataclass defines your configuration:\n\n```py\n@dataclass\nclass Config:\n    database_url: str\n    \"\"\"The URL of the database to connect to.\"\"\"\n\n    port: int = 12345\n    \"\"\"TCP port on which to accept connections.\"\"\"\n```\n\nYou can generate a template configuration file using:\n\n```py\nfrom dataclass_binder import format_template\n\n\nfor line in format_template(Config):\n    print(line)\n```\n\nWhich will print:\n\n```toml\n# The URL of the database to connect to.\n# Mandatory.\ndatabase-url = '???'\n\n# TCP port on which to accept connections.\n# Default:\n# port = 12345\n```\n\nIt is also possible to provide placeholder values by passing a dataclass instance rather than the dataclass itself to `format_template()`:\n\n```py\nTEMPLATE = Config(\n    database_url=\"postgresql://<username>:<password>@<hostname>/<database name>\",\n    port=8080,\n)\n\nfor line in format_template(TEMPLATE):\n    print(line)\n```\n\nWhich will print:\n\n```toml\n# The URL of the database to connect to.\n# Mandatory.\ndatabase-url = 'postgresql://<username>:<password>@<hostname>/<database name>'\n\n# TCP port on which to accept connections.\n# Default:\n# port = 12345\nport = 8080\n```\n\n### Troubleshooting\n\nFinally, a troubleshooting tip: instead of the full `Binder[Config].parse_toml()`, first try to execute only `Binder[Config]`.\nIf that fails, the problem is in the dataclass definitions.\nIf that succeeds, but the `parse_toml()` call fails, the problem is that the TOML file does not match the format defined in the dataclasses.\n\n\n## Development Environment\n\n[Poetry](https://python-poetry.org/) is used to set up a virtual environment with all the dependencies and development tools that you need:\n\n    $ cd dataclass-binder\n    $ poetry install\n\nYou can activate a shell which contains the development tools in its search path:\n\n    $ poetry shell\n\nWe recommend setting up pre-commit hooks for Git in the `dataclass-binder` work area.\nThese hooks automatically run a few simple checks and cleanups when you create a new commit.\nAfter you first set up your virtual environment with Poetry, run this command to install the pre-commit hooks:\n\n    $ pre-commit install\n\n\n## Release Procedure\n\n- Verify that CI passes on the branch that you want to release (typically `main`)\n- Create a release on the GitHub web interface; name the tag `v<major>.<minor>.<patchlevel>`\n- After publishing the release on GitHub, the package will be built and published on PyPI automatically via Actions\n\n\n## Changelog\n\n### 0.1.0 - 2023-02-21:\n\n- First open source release; thanks to my employer [Protix](https://protix.eu/) for making this possible\n\n### 0.1.1 - 2023-02-22:\n\n- Relax `Binder.bind()` argument type to `Mapping` ([#3](https://github.com/ProtixIT/dataclass-binder/issues/3))\n\n### 0.1.2 - 2023-03-03:\n\n- Fix `get()` and `[]` on object bound to read-only mapping ([#6](https://github.com/ProtixIT/dataclass-binder/issues/6))\n\n### 0.1.3 - 2023-03-05:\n\n- Ignore dataclass fields with `init=False` ([#2](https://github.com/ProtixIT/dataclass-binder/issues/2))\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ProtixIT/dataclass-binder",
    "keywords": "dataclass,toml,bind,binding",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dataclass-binder",
    "package_url": "https://pypi.org/project/dataclass-binder/",
    "platform": null,
    "project_url": "https://pypi.org/project/dataclass-binder/",
    "project_urls": {
      "Homepage": "https://github.com/ProtixIT/dataclass-binder",
      "Issue Tracker": "https://github.com/ProtixIT/dataclass-binder/issues",
      "Repository": "https://github.com/ProtixIT/dataclass-binder"
    },
    "release_url": "https://pypi.org/project/dataclass-binder/0.1.3/",
    "requires_dist": [
      "tomli (>=2.0.1,<3.0.0) ; python_version < \"3.11\""
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "Library to bind TOML data to Python dataclasses in a type-safe way.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17162613,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f900baac560a5f0bd79f30b702f94ae466f4deeceb65a2928a69472aa5691221",
          "md5": "2cf92f47aa9902d4a02e5d5e7915281b",
          "sha256": "c7a4c174582d0f87f5e0db4b26e3c97a9d576f7352f4a88faaa5c61e06388c87"
        },
        "downloads": -1,
        "filename": "dataclass_binder-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2cf92f47aa9902d4a02e5d5e7915281b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 14419,
        "upload_time": "2023-02-21T20:38:30",
        "upload_time_iso_8601": "2023-02-21T20:38:30.108748Z",
        "url": "https://files.pythonhosted.org/packages/f9/00/baac560a5f0bd79f30b702f94ae466f4deeceb65a2928a69472aa5691221/dataclass_binder-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01ef479c8a74bf0bbc486bc2af54465f9c8dc8e2dae7d9518afb26b9b8c00ec9",
          "md5": "8d6372497ce8f64c4e07c246a5ec8415",
          "sha256": "34a985483146d068f12e3e15923269b43c806e9202f29f1d03c49c7349882e81"
        },
        "downloads": -1,
        "filename": "dataclass_binder-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8d6372497ce8f64c4e07c246a5ec8415",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 19720,
        "upload_time": "2023-02-21T20:38:31",
        "upload_time_iso_8601": "2023-02-21T20:38:31.579694Z",
        "url": "https://files.pythonhosted.org/packages/01/ef/479c8a74bf0bbc486bc2af54465f9c8dc8e2dae7d9518afb26b9b8c00ec9/dataclass_binder-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc7ec6329cfa931cc5606334f352326eff300e9d7d3e7eddcf350ced6f439530",
          "md5": "6c72c77201aa0cc9f68cdfd0f0ada2aa",
          "sha256": "9acb53b5bf89d2741928d83ccf93e67318a3bb1b49442b8ddd5cbaf5ed4b4607"
        },
        "downloads": -1,
        "filename": "dataclass_binder-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c72c77201aa0cc9f68cdfd0f0ada2aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 14446,
        "upload_time": "2023-02-22T17:07:35",
        "upload_time_iso_8601": "2023-02-22T17:07:35.474059Z",
        "url": "https://files.pythonhosted.org/packages/fc/7e/c6329cfa931cc5606334f352326eff300e9d7d3e7eddcf350ced6f439530/dataclass_binder-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ecf8a52a939c8890559bedaa90b08cdec76aeb203018d54f36132dd543d11c3",
          "md5": "3a7c7d6d8ecff05aab8a633bc08d0a26",
          "sha256": "ec949f7875b258eb8a5be1ff30cd1ec88177bf7fb1b9765e4923dbdd1868d180"
        },
        "downloads": -1,
        "filename": "dataclass_binder-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3a7c7d6d8ecff05aab8a633bc08d0a26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 19803,
        "upload_time": "2023-02-22T17:07:36",
        "upload_time_iso_8601": "2023-02-22T17:07:36.597597Z",
        "url": "https://files.pythonhosted.org/packages/8e/cf/8a52a939c8890559bedaa90b08cdec76aeb203018d54f36132dd543d11c3/dataclass_binder-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c5da8a33aacdec2b96c0a7422d0308f2345659b9e03c99a21a668c26b03cb4f",
          "md5": "75985b9601c2d764c1e6330059d52392",
          "sha256": "facaa2e1aaefa6899f27b44b0ae9532dfd2a2121b0e0b2e9cdb1ef85268139d4"
        },
        "downloads": -1,
        "filename": "dataclass_binder-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75985b9601c2d764c1e6330059d52392",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 14530,
        "upload_time": "2023-03-03T15:45:30",
        "upload_time_iso_8601": "2023-03-03T15:45:30.187632Z",
        "url": "https://files.pythonhosted.org/packages/8c/5d/a8a33aacdec2b96c0a7422d0308f2345659b9e03c99a21a668c26b03cb4f/dataclass_binder-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0381608e24834bf8f26022348ccb3044604b568f4ed8454f11bac177ab003af3",
          "md5": "819f7cd68971cdb97820e1bb865c2e90",
          "sha256": "6deda34516e6bc44507f3fbfb71b96fe7717065d99310eab4a10a5752b377e18"
        },
        "downloads": -1,
        "filename": "dataclass_binder-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "819f7cd68971cdb97820e1bb865c2e90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 19946,
        "upload_time": "2023-03-03T15:45:31",
        "upload_time_iso_8601": "2023-03-03T15:45:31.870025Z",
        "url": "https://files.pythonhosted.org/packages/03/81/608e24834bf8f26022348ccb3044604b568f4ed8454f11bac177ab003af3/dataclass_binder-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e083f9019101a35b1450a79bddc1a5e8a6532e3d5c6557b5bd38d344466ee9f4",
          "md5": "dd272ea8126e7ed74fe97388eecbafd1",
          "sha256": "c36ac4e41fa1a779a03ad9bb91fb124a99dd8d2640e2cd881508e887cfc9a048"
        },
        "downloads": -1,
        "filename": "dataclass_binder-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd272ea8126e7ed74fe97388eecbafd1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 14746,
        "upload_time": "2023-03-05T09:06:06",
        "upload_time_iso_8601": "2023-03-05T09:06:06.937895Z",
        "url": "https://files.pythonhosted.org/packages/e0/83/f9019101a35b1450a79bddc1a5e8a6532e3d5c6557b5bd38d344466ee9f4/dataclass_binder-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbf070dfd14138ed868a9fcd1a8a8cdc681bd6e10348c87fa828a46b586b0c0f",
          "md5": "17b246f0a3ab43c05eafc9346cc4493c",
          "sha256": "cb0745cabea898e875a5c1398ebab07fdbb4fb72b5f2e03f34d6ed61eeeea369"
        },
        "downloads": -1,
        "filename": "dataclass_binder-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "17b246f0a3ab43c05eafc9346cc4493c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 20198,
        "upload_time": "2023-03-05T09:06:08",
        "upload_time_iso_8601": "2023-03-05T09:06:08.618032Z",
        "url": "https://files.pythonhosted.org/packages/cb/f0/70dfd14138ed868a9fcd1a8a8cdc681bd6e10348c87fa828a46b586b0c0f/dataclass_binder-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e083f9019101a35b1450a79bddc1a5e8a6532e3d5c6557b5bd38d344466ee9f4",
        "md5": "dd272ea8126e7ed74fe97388eecbafd1",
        "sha256": "c36ac4e41fa1a779a03ad9bb91fb124a99dd8d2640e2cd881508e887cfc9a048"
      },
      "downloads": -1,
      "filename": "dataclass_binder-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dd272ea8126e7ed74fe97388eecbafd1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 14746,
      "upload_time": "2023-03-05T09:06:06",
      "upload_time_iso_8601": "2023-03-05T09:06:06.937895Z",
      "url": "https://files.pythonhosted.org/packages/e0/83/f9019101a35b1450a79bddc1a5e8a6532e3d5c6557b5bd38d344466ee9f4/dataclass_binder-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cbf070dfd14138ed868a9fcd1a8a8cdc681bd6e10348c87fa828a46b586b0c0f",
        "md5": "17b246f0a3ab43c05eafc9346cc4493c",
        "sha256": "cb0745cabea898e875a5c1398ebab07fdbb4fb72b5f2e03f34d6ed61eeeea369"
      },
      "downloads": -1,
      "filename": "dataclass_binder-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "17b246f0a3ab43c05eafc9346cc4493c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 20198,
      "upload_time": "2023-03-05T09:06:08",
      "upload_time_iso_8601": "2023-03-05T09:06:08.618032Z",
      "url": "https://files.pythonhosted.org/packages/cb/f0/70dfd14138ed868a9fcd1a8a8cdc681bd6e10348c87fa828a46b586b0c0f/dataclass_binder-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}