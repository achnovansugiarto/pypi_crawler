{
  "info": {
    "author": "James E. King III",
    "author_email": "jking@apache.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "# interposer\n\n[![Build Status](https://github.com/cloudtruth/interposer/workflows/Test/badge.svg)](https://github.com/cloudtruth/interposer/actions?query=workflow%3Atest)\n[![Release Status](https://github.com/cloudtruth/interposer/workflows/release/badge.svg)](https://github.com/cloudtruth/interposer/actions?query=workflow%3Arelease)\n[![codecov](https://codecov.io/gh/cloudtruth/interposer/branch/main/graph/badge.svg?token=JUplpBrqB0)](https://codecov.io/gh/cloudtruth/interposer)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nThe interposer package core allows you to wrap a module, class, object, method,\nor function with the ability to perform pre- and post- call analysis or\nmanipulation on the arguments, result, or exception.  This behavior can either\nbe \"always on\" (i.e. in production code) or patched in through tests.  With\ninterposer you can:\n\n- Audit calls and their responses or exceptions.\n- Block calls that should not be made (for example, read-only vs. read-write).\n- Modify arguments before calls are made.\n- Record and playback interactions with packages for hybrid testing.\n\nClassic unit testing involves writing mocks or simulators for third party\nservices.  When a service is mocked, the test is typically only as good as\nthe simulation.  Classic integration testing runs live against a service,\nbut it can take too long to be useful in normal development workflow.  What\nif you could have both?  You can - we call it hybrid testing.\n\nHybrid testing allows you to test your code live against a third party service\nonly when necessary and avoid the need to write your own mocks.  It is\nessentially a self-writing mock for your interaction.  Service mocks tend to\nbe incomplete simulations and can lead to a false sense of security, however by\nusing hybrid testing, you no longer have to worry about that.  Even better, the\nprovided recording system includes a way to automatically redact secrets and\nstill be able to play back.  If a live test against a service takes minutes,\nit will only take seconds when played back.\n\n## TL;DR;\n\nInterposer can be inserted around anything - modules, classes, or functions.\nWhat you do with it from there is up to you.  A recording and playback system\nis provided that works with just about anything.\n\n### Hybrid Testing\n\nTo get started with hybrid testing, use the `RecordedTestCase` test fixture.\nAn example of this can be found in the\n[example_weather_test](https://github.com/tuono/interposer/blob/develop/tests/example_weather_test.py).\nThis is a simple test that demonstrates how easy it is to hook in recording\nand playback against an external service.  In contrast to projects like `vcrpy`\nwhich only patch into specific network libraries, interposer allows you to\ncapture the call and responses for anything.\n\nTo generate a recording, `RecordedTestCase` looks for an environment variable\nnamed `RECORDING` and if set (and not empty), will generate a recording of the\ninteraction with the interposed class(es) automatically:\n\n```bash\n$ time RECORDING=1 make example\n...\nreal    0m8.651s\nuser    0m1.911s\nsys     0m0.219s\n\n$ tests/\ntests/:\ntotal 44\n-rw-r--r-- 1 testr testr    83 Sep 18 13:59 __init__.py\n-rw-r--r-- 1 testr testr   535 Sep 18 13:59 example_weather_test.py\n-rw-r--r-- 1 testr testr 11795 Sep 18 21:15 interposer_test.py\n-rw-r--r-- 1 testr testr  8483 Sep 19 22:44 recorder_test.py\n-rw-r--r-- 1 testr testr  8152 Sep 19 22:44 tapedeck_test.py\ndrwxr-xr-x 3 testr testr  4096 Sep 20 07:57 tapes\n\ntests/tapes:\ntotal 4\ndrwxr-xr-x 2 testr testr 4096 Sep 20 07:29 example_weather_test\n\ntests/tapes/example_weather_test:\ntotal 4\n-rw-r--r-- 1 testr testr 1678 Sep 20 07:14 TestWeather.db.gz\n```\n\nOnce the recording is generated, running the test again without the\nenvironment variable causes the playback to happen:\n\n```bash\n$ time tox example_weather_test.py\n...\nreal    0m2.039s\nuser    0m1.822s\nsys     0m0.212s\n```\n\nGiven tox has a roughly 2 second startup time, we see the playback is\nessentially as fast as a handcrafted mock, but took way less time to make!\nMore details can be found in the Recording and Playback section below.\n\n## Background\n\nAt Tuono when we first started working with the AWS and Azure SDKs, we\nrealized that it would not be practical to mock those services in our\ntests.  Mocking a complex multi-step interaction with a third party service\nsuch as a cloud provider can be very time-consuming and error-prone.\nEntire projects already exist which attempt to mock these service interfaces,\nand those projects are often both incomplete and incorrect at any given time.\nMaintaining such a footprint requires tremendous effort, and if the mock\nresponses are not correct, it leads to a false sense of code quality which\ncan then fail in front of a customer when used against the real thing.\n\nSome may argue that separate integration testing would catch this failure mode,\nhowever that defers the problem until after the code is developed and mocked,\nwhich makes it more expensive to remedy.  We started to wonder if there was\na way to mix unit testing and integration testing to solve this problem.\n\nThese learnings have led us to the interposer - a python package designed to\nallow the engineer to patch a recording and playback system into production\ncode, and then replay the interaction in future runs.  The benefits here are\ntremendous for testing complex external services:\n\n- The complete interaction with the external service is recorded and can be\n  faithfully played back.\n- Ensures future code changes will not break your interactions.\n- Complex operations that require significant time to run during recording\n  have no such delays during playback because it never actually goes out to\n  the external service.\n- Testing real interactions with external services can be done in isolation,\n  without loading the entire project.\n\n## Recording and Playback\n\nInterposer can be used in place of a mock to record and playback interactions.\nUnlike network-based recording and playback libraries, interposer can record\nand playback anything - be it a module, class, or function.\nThere is a simple example in this repository of a Weather object that\nleverages an external service.  Mocking this service would take time, as the\nresponse is fairly complex, but with interposer it's as easy as adding a patch.\n\nRecordedTestCase is a testing class that makes it easy to manage your\nrecordings automatically based on the name of the test module, class, and tests.\nEach test class receives its own recording file, and each test method is recorded\ninto its own channel within the recording file, so it is safe to use in\nparallel testing.  This example test case inserts itself between the Weather\nclass and the `noaa` class that it uses.\n\n```python\n# -*- coding: utf-8 -*-\n#\n# Copyright (C) 2020 Tuono, Inc.\n# Copyright (C) 2021 - 2022 CloudTruth, Inc.\n#\nfrom noaa_sdk import noaa\n\nfrom interposer.example.weather import Weather\nfrom interposer.recorder import recorded\nfrom interposer.recorder import RecordedTestCase\n\n\nclass TestWeather(RecordedTestCase):\n    \"\"\" Example of a record/playback aware test. \"\"\"\n\n    @recorded(patches={\"interposer.example.weather.noaa\": noaa})\n    def test_print_forecast(self) -> None:\n        uut = Weather()\n        assert len(uut.forecast(\"01001\", \"US\", False, 3)) == 3\n```\n\nTo generate a recording (this works if you \"make prerequisites\" first):\n\n```bash\n$ time RECORDING=1 make example\n...\ntests/example_weather_test.py::TestWeather::test_print_forecast\n------------------------------------------------------------------------------------------------- live log call -------------------------------------------------------------------------------------------------\nINFO     interposer.interposer:interposer.py:147 TAPE: Opened /home/testr/interposer/tests/tapes/example_weather_test.TestWeather.test_print_forecast.db for Mode.Recording using version 5\nDEBUG    urllib3.connectionpool:connectionpool.py:943 Starting new HTTPS connection (1): nominatim.openstreetmap.org:443\nDEBUG    urllib3.connectionpool:connectionpool.py:442 https://nominatim.openstreetmap.org:443 \"GET //search?postalcode=11365&country=US&format=json HTTP/1.1\" 200 None\nDEBUG    urllib3.connectionpool:connectionpool.py:943 Starting new HTTPS connection (1): api.weather.gov:443\nDEBUG    urllib3.connectionpool:connectionpool.py:442 https://api.weather.gov:443 \"GET //points/40.73874584464741,-73.79325760300824 HTTP/1.1\" 301 481\nDEBUG    urllib3.connectionpool:connectionpool.py:442 https://api.weather.gov:443 \"GET /points/40.7387,-73.7933 HTTP/1.1\" 200 810\nDEBUG    urllib3.connectionpool:connectionpool.py:943 Starting new HTTPS connection (1): api.weather.gov:443\nDEBUG    urllib3.connectionpool:connectionpool.py:442 https://api.weather.gov:443 \"GET //gridpoints/OKX/39,36/forecast HTTP/1.1\" 200 1428\nDEBUG    interposer.interposer:interposer.py:361 TAPE: Recording RESULT 25c0bc73bd753f18e53c1b803d8d37e2ce8a7d7a.results call #0 for params {'method': 'get_forecasts', 'args': ('11365', 'US', False), 'kwargs': {}, 'channel': 'default'} hash=25c0bc73bd753f18e53c1b803d8d37e2ce8a7d7a type=list: [{'detailedForecast': 'Partly cloudy, with a low around 72. West wind around 8 '\n...\n{'number': 1, 'name': 'Overnight', 'startTime': '2020-09-04T04:00:00-04:00', 'endTime': '2020-09-04T06:00:00-04:00', 'isDaytime': False, 'temperature': 72, 'temperatureUnit': 'F', 'temperatureTrend': None, 'windSpeed': '8 mph', 'windDirection': 'W', 'icon': 'https://api.weather.gov/icons/land/night/sct?size=medium', 'shortForecast': 'Partly Cloudy', 'detailedForecast': 'Partly cloudy, with a low around 72. West wind around 8 mph.'}\n{'number': 2, 'name': 'Friday', 'startTime': '2020-09-04T06:00:00-04:00', 'endTime': '2020-09-04T18:00:00-04:00', 'isDaytime': True, 'temperature': 87, 'temperatureUnit': 'F', 'temperatureTrend': 'falling', 'windSpeed': '8 to 13 mph', 'windDirection': 'W', 'icon': 'https://api.weather.gov/icons/land/day/sct?size=medium', 'shortForecast': 'Mostly Sunny', 'detailedForecast': 'Mostly sunny. High near 87, with temperatures falling to around 84 in the afternoon. West wind 8 to 13 mph.'}\n{'number': 3, 'name': 'Friday Night', 'startTime': '2020-09-04T18:00:00-04:00', 'endTime': '2020-09-05T06:00:00-04:00', 'isDaytime': False, 'temperature': 66, 'temperatureUnit': 'F', 'temperatureTrend': None, 'windSpeed': '8 to 12 mph', 'windDirection': 'NW', 'icon': 'https://api.weather.gov/icons/land/night/few?size=medium', 'shortForecast': 'Mostly Clear', 'detailedForecast': 'Mostly clear, with a low around 66. Northwest wind 8 to 12 mph.'}\nINFO     interposer.interposer:interposer.py:158 TAPE: Closed /home/testr/interposer/tests/tapes/example_weather_test.TestWeather.test_print_forecast.db for Mode.Recording using version 5\nPASSED\n\n=============================================================================================== 1 passed in 6.65s ===============================================================================================\n____________________________________________________________________________________________________ summary ____________________________________________________________________________________________________\n  py37: commands succeeded\n  congratulations :)\n\nreal    0m8.651s\nuser    0m1.911s\nsys     0m0.219s\n```\n\nNote the calls to urllib3 used by the noaa class, and note the amount of time\nthat the test ran.  This command produced a new file:\n\n```bash\n$ ls tests/tapes/example_weather_test\ntests/tapes/example_weather_test:\ntotal 4\n-rw-r--r-- 1 testr testr 1678 Sep 20 07:14 TestWeather.db.gz\n```\n\nNow that the recording is in place, any time the test runs in the future it\nwill avoid actually calling the noaa class, but instead use a recorded\nresponse that matches the method and parameters:\n\n```bash\n$ time make example\n...\ntests/example_weather_test.py::TestWeather::test_print_forecast\n------------------------------------------------------------------------------------------------- live log call -------------------------------------------------------------------------------------------------\nINFO     interposer.interposer:interposer.py:147 TAPE: Opened /home/testr/interposer/tests/tapes/example_weather_test.TestWeather.test_print_forecast.db for Mode.Playback using version 5\nDEBUG    interposer.interposer:interposer.py:313 TAPE: Playing back RESULT for 25c0bc73bd753f18e53c1b803d8d37e2ce8a7d7a.results call #0 for params {'method': 'get_forecasts', 'args': ('11365', 'US', False), 'kwargs': {}, 'channel': 'default'} hash=25c0bc73bd753f18e53c1b803d8d37e2ce8a7d7a type=list: [{'detailedForecast': 'Partly cloudy, with a low around 72. West wind around 8 '\n{'number': 1, 'name': 'Overnight', 'startTime': '2020-09-04T04:00:00-04:00', 'endTime': '2020-09-04T06:00:00-04:00', 'isDaytime': False, 'temperature': 72, 'temperatureUnit': 'F', 'temperatureTrend': None, 'windSpeed': '8 mph', 'windDirection': 'W', 'icon': 'https://api.weather.gov/icons/land/night/sct?size=medium', 'shortForecast': 'Partly Cloudy', 'detailedForecast': 'Partly cloudy, with a low around 72. West wind around 8 mph.'}\n{'number': 2, 'name': 'Friday', 'startTime': '2020-09-04T06:00:00-04:00', 'endTime': '2020-09-04T18:00:00-04:00', 'isDaytime': True, 'temperature': 87, 'temperatureUnit': 'F', 'temperatureTrend': 'falling', 'windSpeed': '8 to 13 mph', 'windDirection': 'W', 'icon': 'https://api.weather.gov/icons/land/day/sct?size=medium', 'shortForecast': 'Mostly Sunny', 'detailedForecast': 'Mostly sunny. High near 87, with temperatures falling to around 84 in the afternoon. West wind 8 to 13 mph.'}\n{'number': 3, 'name': 'Friday Night', 'startTime': '2020-09-04T18:00:00-04:00', 'endTime': '2020-09-05T06:00:00-04:00', 'isDaytime': False, 'temperature': 66, 'temperatureUnit': 'F', 'temperatureTrend': None, 'windSpeed': '8 to 12 mph', 'windDirection': 'NW', 'icon': 'https://api.weather.gov/icons/land/night/few?size=medium', 'shortForecast': 'Mostly Clear', 'detailedForecast': 'Mostly clear, with a low around 66. Northwest wind 8 to 12 mph.'}\nINFO     interposer.interposer:interposer.py:158 TAPE: Closed /home/testr/interposer/tests/tapes/example_weather_test.TestWeather.test_print_forecast.db for Mode.Playback using version 5\nPASSED\n\n=============================================================================================== 1 passed in 0.06s ===============================================================================================\n____________________________________________________________________________________________________ summary ____________________________________________________________________________________________________\n  py37: commands succeeded\n  congratulations :)\n\nreal    0m2.039s\nuser    0m1.822s\nsys     0m0.212s\n```\n\nRecording has advantages and disadvantages, so the right solution\nfor your situation depends on many things.  Recording eliminates\nthe need to produce and maintain mocks.  Mocks of third party\nlibraries that change or are not well understood are fragile and\nlead to a false sense of safety.  Recordings on the other hand\nare always correct, but they need to be regenerated when your\nlogic changes around the third party calls.\n\n## Restrictions\n\n- Return values and exceptions must be safe for pickling.  Some\n  third party APIs use local definitions for exceptions, for example,\n  and local definitions cannot be pickled.  If you get a pickling\n  error, you can insert a CallHandler to run before the TapeDeckCallHandler\n  by specifying `prehandlers` in the @recorded decorator.\n- Randomness between test runs generally defeats recording and playback,\n  however you can record the randomness!\n\n## Dealing with Randomness\n\nIf you have code that uses the uuid package to generate unique IDs,\nand those IDs end up in parameters used by the class being recorded,\nthe same IDs need to be used during playback.  The same issue occurs\nwith time-based identifiers.  The easiest way to get around this is to\nrecord the randomness!\n\n```python\nimport uuid\n\nfrom some.example.project.randomness import Randomness\nfrom interposer.recorder import RecordedTestCase\nfrom interposer.recorder import recorder\n\nclass TestRandomness(RecordedTestCase):\n\n    @recorded(patches={\"some.example.project.randomness.uuid.uuid4\": uuid.uuid4})\n    def test_uuid(self) -> None:\n        uut = Randomness()\n        uut.call_a_method_that_uses_uuids()\n```\n\nIn this fictituous and non-working example (some.example.project is not\nprovided), calls to create uuids would be recorded.\n\n## Call Auditing\n\nUse the Interposer to wrap a module, class, object, method, or function with\na CallHandler that reports all the calls to an auditing service.\n\nTo facilitate auditing and call verification, use Interposer directly in\nyour production code.  Interposer leverages the fantastic\n[wrapt](https://github.com/GrahamDumpleton/wrapt) package to provide\ndoppleganger support, with almost no performance degradation.\n\n## Call Blocking\n\nYou may want to limit the types of methods that can be called in\nthird party libraries as an extra measure of protection in certain\nruntime modes.  Interposer lets you intercept every method called\nin a wrapped class.  You just have to implement a CallHandler and\nthen wrap the module, class, object, method, or function you want to\nraise an exception when a call is not allowed.\n\n## Secrets!\n\nThe recording system has a built-in secrets redacter.  In a test method,\nbefore a secret is used, call `self.redact(secret)`.  If the tape deck is\nin recording mode, the secret is passed to the tape deck for redaction.\nThis means:\n\n1. The real secret is passed to the actual call during recording.\n2. The secret is then replaced by typesafe redaction holistically and reliably\n   in the argument list, and result or exception so the secret can never exist\n   in the recording file.\n3. The recording's call signature is calculated with redacted secrets so that\n   when redacted secrets are used during playback, the calls can be found.\n\nIn playback mode, call `self.redact(secret)` and it will return a redacted\nstring for you to use in place of the secret.  This allows the playback call\nsignatures to match the recorded call signatures.  This means no special\nbranches are needed to handle recording and playback separately.\n\n## Misaligned Playback\n\nIf code or libraries change, the recording may no longer match the call\npatterns.  When you see a `RecordedCallNotFoundError` you should try to\nregenerate your recording.  If this does not work, there is likely a piece\nof information in the recording that is not idempotent, such as a timestamp\nor a uuid.\n\nIf you set the logging level to 7 (more than DEBUG, which is 10), any mismatch\nencountered during playback will be accompanied by a \"diff\" of the recorded\ncall and the requested playback call.  See `make example` for tips on\nhow to do this with pytest.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cloudtruth/interposer/",
    "keywords": "testing,record,playback,redact,inject,security,intercept,interpose,wrap",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "interposer",
    "package_url": "https://pypi.org/project/interposer/",
    "platform": "",
    "project_url": "https://pypi.org/project/interposer/",
    "project_urls": {
      "Homepage": "https://github.com/cloudtruth/interposer/",
      "Repository": "https://github.com/cloudtruth/interposer/"
    },
    "release_url": "https://pypi.org/project/interposer/1.0.0/",
    "requires_dist": [
      "pyyaml (>=6.0,<7.0)",
      "wrapt (>=1.13.3,<2.0.0)"
    ],
    "requires_python": ">=3.7,<3.11",
    "summary": "A generic call intercept wrapper for call inspection, modification, permission checking, recording, and playback.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12455289,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcc09411c5ce339efb687d325140a16139897a94ee24feed9ba2685e2fdfd6f3",
          "md5": "b0233aa43fc999808fe1371f2b8d5769",
          "sha256": "8168df28ccfc1015ed0587bf80aa62a4aa1d42eaf5796f58e5d52b21dd3c5a9b"
        },
        "downloads": -1,
        "filename": "interposer-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0233aa43fc999808fe1371f2b8d5769",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<3.11",
        "size": 24019,
        "upload_time": "2022-01-01T23:57:06",
        "upload_time_iso_8601": "2022-01-01T23:57:06.395460Z",
        "url": "https://files.pythonhosted.org/packages/fc/c0/9411c5ce339efb687d325140a16139897a94ee24feed9ba2685e2fdfd6f3/interposer-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "645b991dcf8037e3a616e70c4596cfdd4a037cfa39f36a9abf878a6fb256e839",
          "md5": "954d930bd0083ae3098dfd784401ca2d",
          "sha256": "a465ba4883a247ac0ea0c155a1abb00543d66c62ba24292f4d67d3baa5e15086"
        },
        "downloads": -1,
        "filename": "interposer-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "954d930bd0083ae3098dfd784401ca2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<3.11",
        "size": 28263,
        "upload_time": "2022-01-01T23:57:08",
        "upload_time_iso_8601": "2022-01-01T23:57:08.137187Z",
        "url": "https://files.pythonhosted.org/packages/64/5b/991dcf8037e3a616e70c4596cfdd4a037cfa39f36a9abf878a6fb256e839/interposer-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fcc09411c5ce339efb687d325140a16139897a94ee24feed9ba2685e2fdfd6f3",
        "md5": "b0233aa43fc999808fe1371f2b8d5769",
        "sha256": "8168df28ccfc1015ed0587bf80aa62a4aa1d42eaf5796f58e5d52b21dd3c5a9b"
      },
      "downloads": -1,
      "filename": "interposer-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b0233aa43fc999808fe1371f2b8d5769",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<3.11",
      "size": 24019,
      "upload_time": "2022-01-01T23:57:06",
      "upload_time_iso_8601": "2022-01-01T23:57:06.395460Z",
      "url": "https://files.pythonhosted.org/packages/fc/c0/9411c5ce339efb687d325140a16139897a94ee24feed9ba2685e2fdfd6f3/interposer-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "645b991dcf8037e3a616e70c4596cfdd4a037cfa39f36a9abf878a6fb256e839",
        "md5": "954d930bd0083ae3098dfd784401ca2d",
        "sha256": "a465ba4883a247ac0ea0c155a1abb00543d66c62ba24292f4d67d3baa5e15086"
      },
      "downloads": -1,
      "filename": "interposer-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "954d930bd0083ae3098dfd784401ca2d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<3.11",
      "size": 28263,
      "upload_time": "2022-01-01T23:57:08",
      "upload_time_iso_8601": "2022-01-01T23:57:08.137187Z",
      "url": "https://files.pythonhosted.org/packages/64/5b/991dcf8037e3a616e70c4596cfdd4a037cfa39f36a9abf878a6fb256e839/interposer-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}