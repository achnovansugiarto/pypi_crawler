{
  "info": {
    "author": "Babelscape",
    "author_email": "info@babelscape.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: Other/Proprietary License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "This package consists of a Python API to work with BabelNet, a very large multilingual semantic network. For more\ninformation, please refer to the documentation below on how to use the software, and our\nwebsite (https://babelnet.org) for news, updates and papers.\n\n# Version compatibility\n\nBabelNet Python API can be used with BabeNet 4.0 and above. \n\n# Configuration\n\nAfter the installation, the first step to take when you want to use BabelNet in another project (or in the REPL) is to\ncreate a file called `babelnet_conf.yml` in the current working directory. \nAlternatively, the path of the configuration file can be specified using the `BABELNET_CONF` environment variable.\n\nThe content of the `babelnet_conf.yml` should vary according to the usage mode of choice:\n\n**Online Mode**: uses the online REST service to retrieve the data. To use this mode you need an internet connection\nand a [valid API key](https://babelnet.org/guide#access). \n\n**RPC Mode**: reads data directly from a local copy of the BabelNet indices, making it more suitable for heavy \nworkloads than the online mode since it is faster and doesn't have usage limits. To use this mode you need the \n[BabelNet indices](https://babelnet.org/downloads) and [Docker installed in your system](https://www.docker.com/get-started/).\nThe *RPC server controller* (see below) requires additional dependencies that can be installed with the following pip command:\n```bash\npip install babelnet[rpc]\n```\n\nFurther details on how to use these modes are provided in the following sections.\n\n## Online Mode\n\nThis is the simplest version to use, since it requires only [a valid API key](https://babelnet.org/guide#access). \nHowever, the drawback is that the iterators are unavailable, i.e. the `iterator`, `offset_iterator`, `lexicon_iterator`\nand `wordnet_iterator` methods.\n\nAssuming you have received by e-mail the key `3x54mp13-8au0-o97q-9vzz-3vakcpec8w4p`, add the following line \nto `babelnet_conf.yml`:\n\n```yaml\nRESTFUL_KEY: '3x54mp13-8au0-o97q-9vzz-3vakcpec8w4p'\n```\n\nThis will automatically be used to authenticate you on the official BabelNet REST service. \n\nThe supported REST endpoints are:\n\n- `https://babelnet.io/v8/service` for BabelNet 5.2 *(default)*\n- `https://babelnet.io/v7/service` for BabelNet 5.1\n- `https://babelnet.io/v6/service` for BabelNet 5.0\n- `https://babelnet.io/v5/service` for BabelNet 4.0\n\nIf you want to use a different REST endpoint, add the following line to `babelnet_conf.yml`:\n\n```yaml\n# BabelNet 5.2 REST endpoint\nRESTFUL_URL: 'https://babelnet.io/v8/service'\n```\n\n\n## RPC Mode\n\nTo use the RPC mode you need a **local copy of the BabelNet indices**. To download them, follow the procedure\non the [official website](https://babelnet.org/downloads).\nThis can be considered a _full_ mode, because it has no usage limit and faster responses.\n\nBabelNet Python API requires PyLucene, which has a dependency on Lucene itself. The installation process of Lucene can be tricky\nsince it has many dependencies that need compiling. Because of this, we moved this PyLucene build and install process to\na simple Docker image. In the RPC mode, the Remote Procedure Call paradigm is applied in calling this Docker container \nas a remote service, effectively decoupling PyLucene and BabelNet.\n\nTo configure the APIs in RPC mode, you just need to add one of these lines to your `babelnet_conf.yml`, depending on\nwhich protocol you want to use.\n\nThe default protocol used by the RPC server is TCP. You can specify the URL where the server is listening with the\nfollowing configuration line.\n```yaml\n# TCP URL example\nRPC_URL: \"tcp://127.0.0.1:7790\"\n```\n\nIf the RPC server has the optional IPC protocol enabled, you can use it with the following configuration line. \n```yaml\n# IPC URL example\nRPC_URL: \"ipc:///home/user/your_ipc_dir/socket\"\n```\n\n*__Important__:* to use lambdas in RPC mode, the client code must be run using the **same Python version** of the \nserver, i.e. Python 3.8, and the **same (or older) version of cloudpickle**, i.e. 2.1.0.\n\nTo start the server, you can either use the *RPC server controller* or manually start the Docker.\nIn any case you need [Docker to be installed in your system](https://www.docker.com/get-started/).\nThe controller is described in the following section; for details on how to directly use the \nDocker image, please follow the documentation on the [Docker Hub page](https://hub.docker.com/r/babelscape/babelnet-rpc). \n\n***Note:*** when you update the API to a newer version, you need to either restart the server using the controller or \npull the new docker from the hub and start a new server with the updated image. \n\n# RPC server controller\n\nTo simplify the management of the RPC server, you can use the `babelnet-rpc` command.\n\nThe additional dependencies required by the controller can be installed with the command:\n```bash\npip install babelnet[rpc]\n```\n\n***For Windows users:*** if you are working in an Anaconda environment, you need to install `pywin32` using anaconda \nwith the following command: \n```bash\nconda install pywin32=227\n```\n\n## Documentation\nOnce the server is started, the documentation of the Python API will be available at \n[http://localhost:7780](http://localhost:7780), \nor alternatively to the port defined by the arguments of the `start` command.\n\n## Start the server\n\nTo start the server, you can use the command `babelnet-rpc start`. \nIf no arguments are provided, it will start in interactive mode, in which you will be prompted to provide the required\nvalues.\n\n```console\n$ babelnet-rpc start\n\nBabelNet indices path: /home/user/BabelNet-5.2\nPort for documentation ([7780], -1 to ignore): 8080\nRPC mode ([tcp]/ipc/all): all\nPort for TCP mode ([7790]): \nIPC directory: your_ipc_dir\nStarting server...\nServer started\n\nBabelNet Python API documentation is available at http://localhost:8080\n\nTo use BabelNet in RPC mode, add one of these lines in your babelnet_conf.yml file\nRPC_URL: \"tcp://127.0.0.1:7790\"\nRPC_URL: \"ipc:///home/user/your_ipc_dir/socket\"\n```\n\nAlternatively, the values can be passed as arguments. The available arguments are:\n\n- `--bn <path>` required, the BabelNet indices path\n- `--doc <port>` port for the BabelNet API documentation (default `7780`)\n- `--no-doc` disable the documentation port\n- `-m`, `--mode` the RPC mode enabled on the server (`tcp`, `ipc` or `all`, default `tcp`). _On Windows the only \navailable mode is `tcp`_. \n- `--tcp <port>` the port for TPC mode (default `7790`)\n- `--ipc <path>` the IPC directory (required with mode `ipc` or `all`)\n- `--print` print the command instead of executing it\n\n### Examples of usage\n\n#### Basic usage\n```console\n$ babelnet-rpc start --bn /home/user/BabelNet-5.2 \n\nStarting server...\nServer started\n\nBabelNet Python API documentation will be available at http://localhost:7790\n\nTo use BabelNet in RPC mode, add this line in your babelnet_conf.yml file\nRPC_URL: \"tcp://127.0.0.1:7790\"\n```\n\n#### IPC mode without documentation\n```console\n$ babelnet-rpc start --bn /home/user/BabelNet-5.2 --no-doc -m ipc --ipc your_ipc_dir\n\nStarting server...\nServer started\n\nTo use BabelNet in RPC mode, add this line in your babelnet_conf.yml file\nRPC_URL: \"ipc:///home/user/your_ipc_dir/socket\"\n```\n\n#### Custom TCP port, print docker command \n```console\n$ babelnet-rpc start --bn /home/user/BabelNet-5.2 --print --tcp 1234\n\nTo start the RPC server, run the following command:\ndocker run -d --name babelnet-rpc -p 7780:8000 -p 1234:1234 -v \"/home/user/BabelNet-5.2:/root/babelnet\" babelscape/babelnet-rpc:latest\n\nBabelNet Python API documentation will be available at http://localhost:7780\n\nTo use BabelNet in RPC mode, add this line in your babelnet_conf.yml file\nRPC_URL: \"tcp://127.0.0.1:1234\"\n```\n\n## Stop the server\n\nTo stop a running RPC server, run the command:\n```bash\nbabelnet-rpc stop\n```\n\n# Code\n\nAssuming the installation and configuration phases have been completed, you can start working with BabelNet.\n\nThe entry point in the library is the `babelnet` package. It contains a set of functions that query the available\ncontent. You can import the package by calling:\n\n```python\nimport babelnet as bn\n```\n\nThe two main classes of BabelNet are:\n\n- `BabelSynset` (a concept or named entity identified by a set of multilingual lexicalizations, each being a\n  BabelSense)\n- `BabelSense` (a lexicalization of a given concept, i.e. a BabelSynset)\n\nFor more details, see the API documentation at \n[https://babelnet.org/pydoc/1.1/](https://babelnet.org/pydoc/1.1/).\n\n## BabelSynset\n\nA `BabelSynset` is a set of multilingual lexicalizations that are synonyms expressing a given concept or named entity.\nFor instance, the synset for car in the motorcar sense\nlooks [like this](https://babelnet.org/synset?word=bn:00007309n&details=1&orig=car&lang=EN). After importing `babelnet`\nas `bn` we can use its functions to retrieve one or many `BabelSynset` objects. For instance, to retrieve all the\nsynsets containing `car` we can call `get_synsets`:\n\n```python\nfrom babelnet.language import Language\n\n# Given a word in a certain language,\n# returns the concepts (BabelSynsets) denoted by the word.\nbyl = bn.get_synsets('car', from_langs=[Language.EN])\n```\n\nWe can also specify which of the parts of speech we are interested in and obtain only synsets for the specified part of\nspeech. In the following example, we retrieve all the verbal synsets containing the English lexicalization `run` :\n\n```python\nfrom babelnet.language import Language\nfrom babelnet.pos import POS\n\n# Given a word in a certain language and pos (part of speech),\n# returns the concepts denoted by the word.\nbyl = bn.get_synsets('run', from_langs=[Language.EN], poses=[POS.VERB])\n```\n\nDue to the [nature of BabelNet](https://babelnet.org/about), a `BabelSynset` may contain lexicalizations from different\nsources. You can restrict your search only to your sources of interest. For instance:\n\n```python\nfrom babelnet.language import Language\nfrom babelnet.pos import POS\nfrom babelnet.data.source import BabelSenseSource\n\n# Given a word in a certain language, returns the concepts\n# for the word available in the given sense sources.\nbyl = bn.get_synsets('run', from_langs=[Language.EN], poses=[POS.NOUN],\n                     sources=[BabelSenseSource.WIKI, BabelSenseSource.OMWIKI])\n```\n\nEach `BabelSynset` has an ID that univocally identifies the synset, and that can be obtained via the `id`\nattribute of BabelSynset instances. If we have an ID and want to retrieve the corresponding synset, we can\nuse `get_synset`. For instance:\n\n```python\nfrom babelnet.resources import BabelSynsetID\n\n# Gets a BabelSynset from a concept identifier (Babel synset ID).\nby = bn.get_synset(BabelSynsetID('bn:03083790n'))\n```\n\nreturns the BabelSynset corresponding to\nID [bn:03083790n](https://babelnet.org/synset?id=bn%3A03083790n&orig=bn%3A03083790n&lang=EN), that is, the synset about BabelNet.\n\nIf we want to retrieve the BabelSynset corresponding to a given WordNet 3.0 ID, we can do the following:\n\n```python\nfrom babelnet.resources import WordNetSynsetID\n\n# Gets the BabelSynsets corresponding to an input WordNet offset.\nby = bn.get_synset(WordNetSynsetID('wn:06879521n'))\n```\n\nIf we want to retrieve the BabelSynset corresponding to a given Wikidata page ID, we can do the following:\n\n```python\nfrom babelnet.resources import WikidataID\n\n# Gets the BabelSynsets corresponding to an input Wikidata page ID.\nby = bn.get_synset(WikidataID('Q4837690'))\n```\n\nIf we want to retrieve the BabelSynsets containing a given Wikipedia page title, we can use the function `get_synsets`:\n\n```python\nfrom babelnet.language import Language\nfrom babelnet.pos import POS\nfrom babelnet.resources import WikipediaID\n\n# Given a Wikipedia title, returns the BabelSynsets which contain it.\nbyl = bn.get_synsets(WikipediaID('Men in Black (film 1997)', Language.IT, POS.NOUN))\n```\n\n## BabelSense\n\nA `BabelSense` is a term (either word or multi-word expression) in a given language occurring in a certain `BabelSynset`\n. Each occurrence of the same term (e.g., car) in different synsets is, therefore, a different `BabelSense` of that term.\n\nNow let's look at the functions to retrieve a `BabelSense` using the `bn` module we have imported earlier:\n\n```python\nfrom babelnet.language import Language\nfrom babelnet.pos import POS\nfrom babelnet.data.source import BabelSenseSource\n\n#  Returns the senses for the word in a certain language.\nsenses1 = bn.get_senses('run', from_langs=[Language.EN])\n\n# Returns the senses for the word in a certain language and Part-Of-Speech.\nsenses2 = bn.get_senses('run', from_langs=[Language.EN], poses=[POS.VERB])\n\n# Returns the senses for the word with the given constraints.\nsenses3 = bn.get_senses('run', from_langs=[Language.EN], poses=[POS.VERB],\n                        sources=[BabelSenseSource.WIKI, BabelSenseSource.OMWIKI])\n```\n\nOnce we have a `BabelSense`, we can go back to the synset it belongs with the `synset` property:\n\n```python\nby = sense.synset\n```\n\nWe can view the `BabelSynset` as a container of `BabelSense` s, i.e., the lexicalizations in the various languages\ncontained in the synset that express its concept or named entity.\n\n## Some attributes of BabelSynset and BabelSense\n\nWe are now going into details about important attributes (methods, properties)\nof the `BabelSynset` and `BabelSense` classes.\n\n### BabelSynset\n\n`BabelSynset` is composed of various elements, which we describe below. Furthermore, a `BabelSynset` is connected to\nother `BabelSynset` objects. The main components of a `BabelSynset` are objects of the following types:\n\n1. `BabelSense` (a lexicalization of the concept, see above)\n2. `POS` (the synset's part of speech)\n3. `BabelGloss` (a definition of the concept in a given language)\n4. `BabelExample` (an example sentence of the meaning expressed by the synset)\n5. `BabelImage` (an image depicting the concept)\n6. `BabelSynsetRelation` (an edge semantically connecting the synset to another synset)\n\nLet's take a look at the main methods and properties of a `BabelSynset` object which we call `by`. *Note:* to\nobtain `BabelSynset` objects we can also use the above examples.\n\n```python\n# Get a BabelSynset from a concept identifier (Babel synset ID).\nby = bn.get_synset(BabelSynsetID('bn:03083790n'))\n\n# Most relevant BabelSense to this BabelSynset for a given language.\nbs = by.main_sense(Language.EN)\n\n# The part of speech of this BabelSynset.\npos = by.pos\n\n# True if the BabelSynset is a key concept\nis_key_concept = by.is_key_concept\n\n# Gets the senses contained in this BabelSynset.\nsenses = by.senses()\n\n# Collects all BabelGlosses in the given source for this BabelSynset.\nglosses = by.glosses()\n\n# Collects all BabelExamples for this BabelSynset.\nexamples = by.examples()\n\n# The images (BabelImages) of this BabelSynset.\nimages = by.images\n\n# Collects all the edges incident on this BabelSynset.\nedges = by.outgoing_edges()\n\n# Gets the BabelCategory objects of this BabelSynset.\ncats = by.categories()\n```\n\n### BabelSense\n\nWe now have a look at the BabelSense attributes. The main components of a BabelSense are:\n\n1. `BabelSynset` (the synset the sense belongs to)\n2. `POS` (its part-of-speech tag)\n3. the lemma string (the lexicalization of the sense)\n4. `BabelSensePhonetics` (the written and audio pronunciations of this sense)\n5. `BabelSenseSource` (the source of the sense, e.g.: Wikipedia, WordNet, etc.)\n\nSome code retrieving the above information follows:\n\n```python\nbs = by.main_sense(Language.EN)\n\n# The language of this BabelSense\nlang = bs.language\n\n# The part-of-speech tag of this BabelSense\npos = bs.pos\n\n# True if the BabelSense is a key concept\nis_key_concept = bs.is_key_sense\n\n# The lemma of this BabelSense\nlemma = bs.full_lemma\n\n# The normalized lemma of this sense (i.e., lowercase, without parentheses, etc.)\nnormalized_lemma = bs.normalized_lemma\n\n# The pronunciations of this sense\npronunciations = bs.pronunciations\n\n# The source of the sense; ex: Wikipedia, WordNet, etc.\nsource = bs.source\n```\n\n# Usage examples\n\nHere we show full examples that show how you can use the BabelNet API to accomplish several tasks.\n\n## Retrieve all BabelSynset objects for a specific word\n\n```python\nimport babelnet as bn\nfrom babelnet import Language\n\nfor synset in bn.get_synsets('home', from_langs=[Language.EN]):\n    print('Synset ID:', synset.id)\n```\n\n## For a specific word retrieves all BabelSynset objects in English, Italian and French\n\n```python\nimport babelnet as bn\nfrom babelnet import Language\n\nsynsets = bn.get_synsets('home', from_langs=[Language.EN],\n                         to_langs=[Language.IT, Language.FR])\nfor synset in synsets:\n    print('Synset ID:', synset.id)\n```\n\n## Retrieve all BabelSense objects for a specific BabelSynset object\n\n```python\nimport babelnet as bn\nfrom babelnet import BabelSynsetID\n\nsynset = bn.get_synset(BabelSynsetID('bn:00000356n'))\n# a synset is an iterator over its senses\nfor sense in synset:\n    print('Sense: ' + sense.full_lemma,\n          'Language: ' + str(sense.language),\n          'Source: ' + str(sense.source), sep='\\t')\n    phonetic = sense.pronunciations\n    for audio in phonetic.audios:\n        print('Audio URL', audio.validated_url)\n```\n\n## Retrieve all BabelSense objects for a specific Wikidata page id\n\n```python\nimport babelnet as bn\nfrom babelnet.resources import WikidataID\n\nsynset = bn.get_synset(WikidataID('Q4837690'))\n# a synset is an iterator over its senses\nfor sense in synset:\n    print('Sense: ' + sense.full_lemma,\n          'Language: ' + str(sense.language),\n          'Source: ' + str(sense.source), sep='\\t')\n    phonetic = sense.pronunciations\n    for audio in phonetic.audios:\n        print('Audio URL', audio.validated_url)\n```\n\n## Retrieve Wikidata id for each BabelSense in a BabelSynset\n\n```python\nimport babelnet as bn\nfrom babelnet import BabelSynsetID, BabelSenseSource\n\nby = bn.get_synset(BabelSynsetID('bn:00000356n'))\nfor sense in by.senses(source=BabelSenseSource.WIKIDATA):\n    sensekey = sense.sensekey\n    print(sense.full_lemma, sense.language, sensekey, sep='\\t')\n```\n\n## Retrieve neighbors of a BabelSynset object\n\n```python\nimport babelnet as bn\nfrom babelnet import BabelSynsetID, Language\nfrom babelnet.data.relation import BabelPointer\n\nby = bn.get_synset(BabelSynsetID('bn:00015556n'))\nfor edge in by.outgoing_edges(BabelPointer.ANY_HYPERNYM):\n    print(str(by.id) + '\\t' + by.main_sense(Language.EN).full_lemma,\n          edge.pointer, edge.id_target, sep=' - ')\n```\n\n## Retrieve the distribution of relationships (frequency of each BabelPointer type) for a specific word\n\n```python\nfrom itertools import groupby\n\nimport babelnet as bn\nfrom babelnet import Language\n\nsynsets = bn.get_synsets('car', from_langs=[Language.EN])\nli = [edge.pointer.symbol for synset in synsets for edge\n      in synset.outgoing_edges()]\nfor p, l in groupby(sorted(li)):\n    print(p, len(list(l)), sep='\\t')\n```\n\n# Multithreading\n\nIn **online mode** requests can come from different threads or processes and are elaborated concurrently.\n\nIn **RPC mode**, using the API simultaneously from multiple threads is discouraged due to Python's threading \nmanagement and the limitations of the RPC library. Since sending concurrent requests to the server can lead to long \nresponse times, to avoid timeouts it is recommended to use a limited pool like in the following example.\n\n```python\nimport concurrent.futures\nfrom datetime import datetime\nfrom sys import stdout\n\nimport babelnet as bn\nfrom babelnet import Language\n\n\n# function called from the threads\ndef func(name: str, word: str):\n    stdout.write(datetime.now().strftime(\"%H:%M:%S.%f\") + \" - Start - \" + name + \"\\n\")\n    synsets = bn.get_synsets(word, from_langs=[Language.EN])\n    glosses = []\n    for synset in synsets:\n        gloss = synset.main_gloss(Language.EN)\n        if gloss:\n            glosses.append(gloss.gloss)\n    stdout.write(datetime.now().strftime(\"%H:%M:%S.%f\") + \" - End   - \" + name + \"\\n\")\n    return {word: glosses}\n\n\nword_list = [\"vocabulary\", \"article\", \"time\", \"bakery\", \"phoenix\", \"stunning\", \"judge\", \"clause\", \"anaconda\",\n             \"patience\", \"risk\", \"scribble\", \"writing\", \"zebra\", \"trade\"]\n\nwith concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:\n    future = []\n    for i, w in enumerate(word_list):\n        future.append(executor.submit(func, f'Thread {i} \"{w}\"', w))\n    results = {}\n    for f in future:\n        results.update(f.result())\n\nfor w, gs in results.items():\n    for g in gs:\n        print(w, g, sep='\\t')\n```\n\n# Authors\n\nBabelscape\n([info@babelscape.com](mailto:info@babelscape.com))\n\n\n# License\n\n**BabelNet** and its **API** are licensed under the [BabelNet Non-Commercial License](https://babelnet.org/license).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://babelnet.org/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "babelnet",
    "package_url": "https://pypi.org/project/babelnet/",
    "platform": null,
    "project_url": "https://pypi.org/project/babelnet/",
    "project_urls": {
      "Documentation": "https://babelnet.org/pydoc/1.1/",
      "Homepage": "https://babelnet.org/"
    },
    "release_url": "https://pypi.org/project/babelnet/1.1.0/",
    "requires_dist": [
      "cloudpickle",
      "zerorpc",
      "pyzmq (!=23.0.*,>=22.3)",
      "dataclasses",
      "text-unidecode (>=1.2)",
      "ordered-set (>=3.0.1)",
      "requests (>=2.19.1)",
      "pyyaml (>=4.2b4)",
      "aenum (>=2.1.2)",
      "docker ; extra == 'rpc'"
    ],
    "requires_python": "==3.8.*",
    "summary": "Python API for BabelNet",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15887306,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26a1e8a3133ab43400fff136fc3a839c512e81b9ed46bed84cff26096821270b",
          "md5": "4b1d8220535d1aebb21775b90cdf9555",
          "sha256": "495df32bba302f2bbf0476b30df7d75d6fc6fefd3b26caa5a5e0ecdd69702480"
        },
        "downloads": -1,
        "filename": "babelnet-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b1d8220535d1aebb21775b90cdf9555",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 360646,
        "upload_time": "2022-06-21T11:12:06",
        "upload_time_iso_8601": "2022-06-21T11:12:06.814007Z",
        "url": "https://files.pythonhosted.org/packages/26/a1/e8a3133ab43400fff136fc3a839c512e81b9ed46bed84cff26096821270b/babelnet-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0282aec8d4024b9469f1dd2958240a100017244d083f2424f85b9504bfc2029",
          "md5": "19556025fcad8c3a02aeaa37f2f1c891",
          "sha256": "0aeae273652fcc1197647fdaeb597342c41c710f8346a29bb1123394a08d382b"
        },
        "downloads": -1,
        "filename": "babelnet-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19556025fcad8c3a02aeaa37f2f1c891",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 360685,
        "upload_time": "2022-07-06T07:38:44",
        "upload_time_iso_8601": "2022-07-06T07:38:44.063223Z",
        "url": "https://files.pythonhosted.org/packages/d0/28/2aec8d4024b9469f1dd2958240a100017244d083f2424f85b9504bfc2029/babelnet-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d40051d1dda9c2cb0b2ec65663fef50683ac2a4a8d839ad95c471ccdc5cd1f0a",
          "md5": "7f800eb01b946fe1b70f8ea45687c2e4",
          "sha256": "62ac291a1448b38e5dbdb71907b03f32b694914310781d5eed0715f5565f3eca"
        },
        "downloads": -1,
        "filename": "babelnet-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f800eb01b946fe1b70f8ea45687c2e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 360792,
        "upload_time": "2022-10-05T09:30:11",
        "upload_time_iso_8601": "2022-10-05T09:30:11.521018Z",
        "url": "https://files.pythonhosted.org/packages/d4/00/51d1dda9c2cb0b2ec65663fef50683ac2a4a8d839ad95c471ccdc5cd1f0a/babelnet-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d455af4a856d0d6b5f0fe762c63ed16e135acbf0b63c1ee1102cb1b7da2958c",
          "md5": "a46276becf5062f69aea65cfb65e76a8",
          "sha256": "119dbc2f532bbc3e73230a6cf0c3591e13715233cf5d2cbadc63a88e943d363a"
        },
        "downloads": -1,
        "filename": "babelnet-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a46276becf5062f69aea65cfb65e76a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "==3.8.*",
        "size": 186162,
        "upload_time": "2022-11-25T08:20:26",
        "upload_time_iso_8601": "2022-11-25T08:20:26.877302Z",
        "url": "https://files.pythonhosted.org/packages/2d/45/5af4a856d0d6b5f0fe762c63ed16e135acbf0b63c1ee1102cb1b7da2958c/babelnet-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d455af4a856d0d6b5f0fe762c63ed16e135acbf0b63c1ee1102cb1b7da2958c",
        "md5": "a46276becf5062f69aea65cfb65e76a8",
        "sha256": "119dbc2f532bbc3e73230a6cf0c3591e13715233cf5d2cbadc63a88e943d363a"
      },
      "downloads": -1,
      "filename": "babelnet-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a46276becf5062f69aea65cfb65e76a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "==3.8.*",
      "size": 186162,
      "upload_time": "2022-11-25T08:20:26",
      "upload_time_iso_8601": "2022-11-25T08:20:26.877302Z",
      "url": "https://files.pythonhosted.org/packages/2d/45/5af4a856d0d6b5f0fe762c63ed16e135acbf0b63c1ee1102cb1b7da2958c/babelnet-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}