{
  "info": {
    "author": "charles.lee",
    "author_email": "cheoljoo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: User Interfaces"
    ],
    "description": "\n# Introduction\n- This Class runs function from command string\n- Cisco Style give the recommandation when you can use easily.\n- if you do not know what you do , press space or tab.\n- then CiscoStyleCli shows the recommendation with help description.\n    \n# Requirement\n- [Python][python] >= 3.6\n\n# Installation\n- Install the latest version of ciscostylecli using pip:\n```bash\npip3 install ciscostylecli\n```\n\n- Install by cloning repository:\n```bash\ngit clone https://github.com/cheoljoo/fish.git\ncd CiscoStyleCli\npython3 setup.py install\n```\n\n# Usage\n```python\nimport CiscoStyleCli\n```\n\n```python\nCiscoStyleCli(rulePrintFile=None, infinite=False, prompt='FISH~~:', debug=False, isUseDefaultCommon=True)\n```\n\n- This Class runs function from command string\n- Cisco Style give the recommandation when you can use easily.\n- if you do not know what you do , press space or tab.\n- then CiscoStyleCli shows the recommendation with help description.\n\n- Aargs\n    - :param rulePrintFile: file name to print the tree\n    - :param infinite: False (default) or True \n        - True if you want infinite loop. \n        - False if want to finish when you stroke 'return' key.\n    - :param prompt: your prompt\n    - :param debug: False (default) or True\n        - True if you want to print more information\n    - :param isUseDefaultCommon: True (default) or False\n        - False if you want not to show message when self._common runs\n\n- Sample Codes\n    - [interactive normal mode](https://github.com/cheoljoo/fish/blob/main/package/test.py)\n    - [interactive debug mode](https://github.com/cheoljoo/fish/blob/main/package/debug.py)\n    - [interactive loop mode](https://github.com/cheoljoo/fish/blob/main/package/infinite.py)\n    - [non-interactive mode (run once with your input command with return key) test code](https://github.com/cheoljoo/fish/blob/main/package/runCommand.py)\n    - [interactive normal mode using tiger syntax tree](https://github.com/cheoljoo/fish/blob/main/package/tcmd.py)\n    - [interactive normal mode using tiger syntax tree : example 1](https://github.com/cheoljoo/fish/blob/main/package/tcmd1.py)\n    - [interactive normal mode using tiger syntax tree : example 2](https://github.com/cheoljoo/fish/blob/main/package/tcmd2.py)\n    - [interactive normal mode using tiger syntax tree : example 3 : variable arguments (argument-type is '...')](https://github.com/cheoljoo/fish/blob/main/package/tcmd3.py)\n\n\n## interactive cisco command line interface\n```python\nfrom CiscoStyleCli import CiscoStyleCli\ncsc = CiscoStyleCli.CiscoStyleCli()\ncsc.run()\n```\n    - show the prompt to get your command (interactive mode)\n    - press enter key , this function will return\n    - https://github.com/cheoljoo/fish/package\n        - ```make```\n\n## endless interactive cisco command line interface\n```python\nfrom CiscoStyleCli import CiscoStyleCli\ncsc = CiscoStyleCli.CiscoStyleCli(infinite=True)\ncsc.run() \n```\n    - it has infinite loop\n    - show the prompt to get your command (interactive mode)\n    - you can quit when you meet quit command or quit()\n    - https://github.com/cheoljoo/fish/package\n        - ```make infinite```\n\n## non-interactive run command\n```python\nfrom CiscoStyleCli import CiscoStyleCli\ncsc = CiscoStyleCli.CiscoStyleCli()\ncsc.runCommand(cmd)\n```\n    - run your command (non-interactive mode)\n    - https://github.com/cheoljoo/fish/package\n        - ```make runCommand```\n\n# Document\n- ```\n    python3\n    >> import CiscoStyleCli\n    >> help(CiscoStyleCli)\n  ```\n- ```python3 -m pydoc CiscoStyleCli > CiscoStyleCli.txt```\n\n\n# Methods\n```\nHelp on CiscoStyleCli in module CiscoStyleCli object:\n\nclass CiscoStyleCli(builtins.object)\n |  CiscoStyleCli(rulePrintFile=None, infinite=False, prompt='FISH~~:', debug=False, isUseDefaultCommon=True)\n |  \n |  This Class runs function from command string\n |  Cisco Style give the recommandation when you can use easily.\n |  if you do not know what you do , press space or tab.\n |  then CiscoStyleCli shows the recommendation with help description.\n |  \n |  1. interactive cisco command line interface\n |  from CiscoStyleCli import CiscoStyleCli\n |  csc = CiscoStyleCli.CiscoStyleCli()\n |  csc.run()\n |      - show the prompt to get your command (interactive mode)\n |      - press enter key , this function will return\n |  \n |  2. endless interactive cisco command line interface\n |  from CiscoStyleCli import CiscoStyleCli\n |  csc = CiscoStyleCli.CiscoStyleCli(infinite=True)\n |  csc.run() \n |      - it has infinite loop\n |      - show the prompt to get your command (interactive mode)\n |      - you can quit when you meet quit command or quit()\n |  \n |  3. non-interactive run command\n |  from CiscoStyleCli import CiscoStyleCli\n |  csc = CiscoStyleCli.CiscoStyleCli()\n |  csc.runCommand(cmd)\n |      - run your command (non-interactive mode)\n |  \n |  :param rulePrintFile: file name to print the tree\n |  :param infinite: False (default) or True \n |          True if you want infinite loop. \n |          False if want to finish when you stroke 'return' key.\n |  :param prompt: your prompt\n |  :param debug: False (default) or True\n |          True if you want to print more information\n |  :param isUseDefaultCommon: True (default) or False\n |          False if you want not to show message when self._common runs\n |  \n |  Methods defined here:\n |  \n |  __init__(self, rulePrintFile=None, infinite=False, prompt='FISH~~:', debug=False, isUseDefaultCommon=True)\n |      initalize\n |      it has only 2 commands : quit , list\n |      \n |      :param rulePrintFile: file name to print the tree\n |      :param infinite: False (default) or True \n |              True if you want infinite loop. \n |              False if want to finish when you stroke 'return' key.\n |      :param prompt: your prompt\n |      :param debug: False (default) or True\n |              True if you want to print more information\n |      :param isUseDefaultCommon: True (default) or False\n |              False if you want not to show message when self._common runs\n |  \n |  addArgument(self, root, name, type, returnable, desc, prefunc=None, returnfunc=None, additionalDict=None, additionalList=None)\n |      add node (argument type) in tree\n |      argument type means variable type. it is not fixed string. user should put the variant value.\n |          - argument type : int\n |          - argument type : str\n |          - argument type : float\n |          - argument type : [strA,strB,strC,...]  - list type : user can use one string in this list  (all are string)\n |          - argument type : { key1:value1 , key2:value2 , ...} - dictionary type : user can use one key in this dictionary (all key and value are string)\n |      \n |      :command tree example:\n |          gethost choose1 choose <CR>\n |          gethost choose2 target <CR>\n |          gethost choose3 shoot <CR>\n |          quit <CR>\n |          list <CR> detailed <CR>\n |          list <CR> simple <CR>\n |      \n |      :code example:\n |          from CiscoStyleCli import CiscoStyleCli\n |          csc = CiscoStyleCli.CiscoStyleCli()\n |          cmdTop = {}\n |          gethostCmd = csc.addCmd(cmdTop,'gethost','command',\"\", \"gethosthelp\")                                                            # level 1\n |          tmp = csc.addCmd(gethostCmd,'choose1','command',\"\", \"choose type1\",prefunc=rc.showHost,additionalDict={'0':'tiger','1':'animal'})        # level 2\n |          tmp = csc.addArgument(tmp,'choose','int',\"returnable\", \"type integer\",prefunc=rc.showHost,additionalDict={'0':'tiger','1':'animal'})     # level 3\n |          quitCmd = self.addCmd(cmdTop ,'quit','command',\"returnable\", \"exit\",returnfunc=self._quit)                                       # level 1\n |          listCmd = self.addCmd(cmdTop ,'list','command',\"returnable\", \"show command line interface list\",returnfunc=self._list)           # level 1\n |          tmp = self.addCmd(listCmd ,'detailed','command',\"returnable\", \"show detailed command line interface list\",returnfunc=self._listDetailed) # level 2\n |          tmp = self.addCmd(listCmd ,'simple','command',\"returnable\", \"show simple command line interface list\",returnfunc=self._listSimple)       # level 2\n |          csc.setCliRule(cmdTop)\n |      \n |      :param root: parent node\n |      :param name: argument name - retValue will have dictionary {name:value}\n |      :param type: argument type - int , float , str , list , dict\n |              when you use list and dict , it will give the recommendation with these list and dictionary contents (keys).\n |      :param returnable: 'returnable' when we run something after strike 'return' key.  \n |      :param desc: description\n |      :param prefunc: function pointer - it will be run if your command meets this function.  show the example to understand easily\n |      :param returnfunc: function pointer - it will be run when returnable == 'returnable' and you strike 'return' key.  default returnfunc=self._common\n |              v : {'__cmd__': ['gethost', 'choose3'], 'shoot': {'choice': '2', 'data': {'0': 'car', '1': 'tiger', '2': 'telematics'}}, '__return__': 'gethost choose3 2'}\n |              v : {'__cmd__': ['gethost', 'choose2'], 'target': {'choice': 'tiger', 'data': ['cheetah', 'tiger', 'fish', 'turtle', 'tigiris']}, '__return__': 'gethost choose2 tiger'}\n |      :param additionalDict: give this information to argument of prefunc and returnfunc. \n |              'shoot': {'choice': '2', 'data': {'0': 'car', '1': 'tiger', '2': 'telematics'}}\n |      :param additionalList: give this information to argument of prefunc and returnfunc. \n |              'target': {'choice': 'tiger', 'data': ['cheetah', 'tiger', 'fish', 'turtle', 'tigiris']}\n |      :return: current node of tree\n |  \n |  addCmd(self, root, command, type, returnable, desc, prefunc=None, returnfunc=None, additionalDict=None, additionalList=None)\n |      add node (command type) in tree\n |      it is fixed string.\n |      \n |      :command tree example:\n |          gethost choose1 choose <CR>\n |          gethost choose2 target <CR>\n |          gethost choose3 shoot <CR>\n |          quit <CR>\n |          list <CR> detailed <CR>\n |          list <CR> simple <CR>\n |      \n |      :code example:\n |          from CiscoStyleCli import CiscoStyleCli\n |          csc = CiscoStyleCli.CiscoStyleCli()\n |          cmdTop = {}\n |          gethostCmd = csc.addCmd(cmdTop,'gethost','command',\"\", \"gethosthelp\")                                                            # level 1\n |          tmp = csc.addCmd(gethostCmd,'choose1','command',\"\", \"choose type1\",prefunc=rc.showHost,additionalDict={'0':'tiger','1':'animal'})        # level 2\n |          tmp = csc.addArgument(tmp,'choose','int',\"returnable\", \"type integer\",prefunc=rc.showHost,additionalDict={'0':'tiger','1':'animal'})     # level 3\n |          quitCmd = self.addCmd(cmdTop ,'quit','command',\"returnable\", \"exit\",returnfunc=self._quit)                                       # level 1\n |          listCmd = self.addCmd(cmdTop ,'list','command',\"returnable\", \"show command line interface list\",returnfunc=self._list)           # level 1\n |          tmp = self.addCmd(listCmd ,'detailed','command',\"returnable\", \"show detailed command line interface list\",returnfunc=self._listDetailed) # level 2\n |          tmp = self.addCmd(listCmd ,'simple','command',\"returnable\", \"show simple command line interface list\",returnfunc=self._listSimple)       # level 2\n |          csc.setCliRule(cmdTop)\n |      \n |      :param root: parent node\n |      :param command: command name - retValue will have dictionary {name:value}\n |      :param type: command\n |      :param returnable: 'returnable' when we run something after strike 'return' key.  \n |      :param desc: description\n |      :param prefunc: function pointer - it will be run if your command meets this function.  show the example to understand easily\n |      :param returnfunc: function pointer - it will be run when returnable == 'returnable' and you strike 'return' key.  default returnfunc=self._common\n |              v : {'__cmd__': ['gethost', 'choose3'], 'shoot': {'choice': '2', 'data': {'0': 'car', '1': 'tiger', '2': 'telematics'}}, '__return__': 'gethost choose3 2'}\n |              v : {'__cmd__': ['gethost', 'choose2'], 'target': {'choice': 'tiger', 'data': ['cheetah', 'tiger', 'fish', 'turtle', 'tigiris']}, '__return__': 'gethost choose2 tiger'}\n |      :param additionalDict: give this information to argument of prefunc and returnfunc. \n |              'shoot': {'choice': '2', 'data': {'0': 'car', '1': 'tiger', '2': 'telematics'}}\n |      :param additionalList: give this information to argument of prefunc and returnfunc. \n |              'target': {'choice': 'tiger', 'data': ['cheetah', 'tiger', 'fish', 'turtle', 'tigiris']}\n |      :return: current node of tree\n |  \n |  checkCmd(self, cmd)\n |      check whether this cmd is right and run registered function in prefunc and returnfunc arguments of addArgument() or addCmd()\n |      return the location from rootCmd following cmd  for guiding current and next arguments\n |      self.c : current input character\n |      \n |      flows\n |          - while process each token (word) before last token (word)\n |              move the next tree node each token\n |              return current node if token has wrong input against tree\n |          - process last token (word)\n |              if input is return character,\n |                  if returnable , run returnfunc\n |              if input is space or tab character,\n |                  find longestmatch\n |          - return retValue\n |      call function of prefunc and returnfunc\n |          - prefunc and returnfunc has only one dictionary argument including all information\n |      \n |      :param cmd: input command line\n |      :return root: node of tree for next argument.\n |      :return lastWord: last stroke word\n |      :return retValue: all your input information\n |              example) {'__cmd__': ['gethost', 'choose2'], 'target': {'choice': 'tiger', 'data': ['cheetah', 'tiger', 'fish', 'turtle', 'tigiris']}, '__return__': 'gethost choose2 tiger'}\n |      :return quoteflag: False or True according to the quotation counts\n |      :return isFinishedFromReturn: False or True.   if it returns from input \"return\" , it is True.\n |  \n |  run(self)\n |      main part of cisco command line interface\n |      meet the prompt for your input\n |      get string from your input\n |      run() will have infinite loop before meeting quit() if you set infinite argument in __init__() as True.\n |      :return: retValue with all your input information\n |              example) {'__cmd__': ['gethost', 'choose2'], 'target': {'choice': 'tiger', 'data': ['cheetah', 'tiger', 'fish', 'turtle', 'tigiris']}, '__return__': 'gethost choose2 tiger'}\n |  \n |  runCommand(self, cmd)\n |      non-interactive run command\n |      \n |      :param cmd: retValue with all your input information\n |              example) {'__cmd__': ['gethost', 'choose2'], 'target': {'choice': 'tiger', 'data': ['cheetah', 'tiger', 'fish', 'turtle', 'tigiris']}, '__return__': 'gethost choose2 tiger'}\n |  \n |  setCliRule(self, rule)\n |      set rule \n |      rule is generated from addCmd() and addArgument() functions.\n |      finally it set the self._comon(v) when returnable is on or this is last token (word).\n |        and it will add 'list' and 'quit' command automatically if you do not set it.\n |      \n |      :code example:\n |          from CiscoStyleCli import CiscoStyleCli\n |          csc = CiscoStyleCli.CiscoStyleCli()\n |          remoteCmd = {}\n |          gethostCmd = csc.addCmd(remoteCmd,'gethost','command',\"\", \"gethosthelp\")\n |          tmp = csc.addCmd(gethostCmd,'choose1','command',\"\", \"choose type1\",prefunc=rc.showHost,additionalDict={'0':'tiger','1':'animal'})\n |          tmp = csc.addArgument(tmp,'choose','int',\"returnable\", \"type integer\",prefunc=rc.showHost,additionalDict={'0':'tiger','1':'animal'})\n |          tmp = csc.addCmd(gethostCmd,'choose2','command',\"\", \"choose type2\",additionalDict={'0':'tiger','1':'animal'})\n |          tmp = csc.addArgument(tmp,'target',['cheetah','tiger','fish','turtle','tigiris'],\"returnable\", \"type from the list\")\n |          tmp = csc.addCmd(gethostCmd,'choose3','command',\"\", \"choose type3\",additionalDict={'0':'tiger','1':'animal'})\n |          tmp = csc.addArgument(tmp,'shoot',{'0':'car','1':'tiger','2':'telematics'},\"returnable\", \"type key from the dictionary\")\n |          csc.setCliRule(remoteCmd)\n |      \n |      verification method: you can show the tree with the following command\n |          list<CR>\n |          list simple<CR>\n |          list detailed<CR>\n |          \n |      Args:\n |          rule (dict): rule dictionary tree made by addCmd() and addArgument()\n |  \n |  setCliRuleTcmd(self, top)\n |      set rule for our tiger project (Tcmd : Tiger Command)\n |      it has different sequence of dictionary tree.\n |      finally it set the self._comon(v) when returnable is on or this is last token (word).\n |        and it will add 'list' and 'quit' command automatically if you do not set it.\n |      \n |      :code example:\n |          TOP = {}\n |          projectList = ['tiger','cheetah','fish']\n |          TOP ['register'] = {\n |              '__attribute' : {\n |                  'type' : \"command\",\n |                  'desc' : \"registration~~\",\n |                  'returnable' : \"returnable\"\n |                  },\n |              'name' : {\n |                  '__attribute' : {\n |                      'type' : \"command\",\n |                      'desc' : \"name~~\",\n |                      'returnable' : \"\",\n |                  }\n |              },\n |              'target' : {\n |                  'next-target' : {}\n |              },\n |              'target2' : {\n |                  'next2-target' : {\n |                      '__attribute' : {\n |                          'desc' : \"next target\",\n |                          'returnable' : \"\",\n |                      }\n |                  }\n |              },\n |              'vbee' : {\n |                  'project' : {\n |                      '__attribute' : {\n |                          'desc' : \"choose from list\",\n |                          'type' : 'argument',\n |                          'argument-type' : projectList\n |                      }\n |                  }\n |              }\n |          }\n |          csc.setCliRuleTcmd(TOP)\n |      \n |      if you do not '__attribute' , we will set as default\n |          ['__attribute']['returnable'] = \"\"\n |          ['__attribute']['type'] = 'command'\n |          ['__attribute']['returnable'] = \"\"\n |          ['__attribute']['desc'] = \"\"\n |          ['__attribute']['argument-type'] = None\n |          if you want to use dictionary or list , \n |              ['__attribute']['type'] = 'argument'\n |              ['__attribute']['argument-type'] = one dimentional dictionary or list\n |      \n |      verification method: you can show the tree with the following command\n |          list<CR>\n |          list simple<CR>\n |          list detailed<CR>\n |      \n |      Args:\n |          top(dict) : rule dictionary tree with different type\n |  \n |  ----------------------------------------------------------------------\n```\n\n# pypi\n- Use pypi : https://pypi.org/project/ciscostylecli/\n\n# work history\n- [work record - lang:korean](https://github.com/cheoljoo/fish/blob/main/msg.md)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cheoljoo/fish/tree/main/package",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ciscostylecli",
    "package_url": "https://pypi.org/project/ciscostylecli/",
    "platform": null,
    "project_url": "https://pypi.org/project/ciscostylecli/",
    "project_urls": {
      "Homepage": "https://github.com/cheoljoo/fish/tree/main/package"
    },
    "release_url": "https://pypi.org/project/ciscostylecli/1.0.5.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python package for command line interface like cisco",
    "version": "1.0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15731150,
  "releases": {
    "1.0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5b600dee2bd096d664ec0f3e4cb3ab65f012d5036100bde452406ebf425fa33",
          "md5": "512fad3e58044f827ac90e34e0962c75",
          "sha256": "7cde088309f0129c63e27c649e65e7e294d44bf335e73d067619a2abb6f3df53"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "512fad3e58044f827ac90e34e0962c75",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15326,
        "upload_time": "2022-09-30T14:19:44",
        "upload_time_iso_8601": "2022-09-30T14:19:44.444481Z",
        "url": "https://files.pythonhosted.org/packages/e5/b6/00dee2bd096d664ec0f3e4cb3ab65f012d5036100bde452406ebf425fa33/ciscostylecli-1.0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40e48477cf2a89d0d46f15b2c8962daae7aea1b02c1870cbe3c0d066ff518896",
          "md5": "d2fdf998b95d329c3d5ccd1faf3eeef1",
          "sha256": "4743ecc36ae5b5ab77a992a4f22649031c8e2d400e9462a61973383942303428"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d2fdf998b95d329c3d5ccd1faf3eeef1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15483,
        "upload_time": "2022-09-30T14:19:46",
        "upload_time_iso_8601": "2022-09-30T14:19:46.859492Z",
        "url": "https://files.pythonhosted.org/packages/40/e4/8477cf2a89d0d46f15b2c8962daae7aea1b02c1870cbe3c0d066ff518896/ciscostylecli-1.0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cbeb49d81df757db7e7a46fbc06af7cc2724f2ce2fe792c31d4aa3ade2228c8",
          "md5": "4b1fc6181757abfb017dce7577dcb7f3",
          "sha256": "f6430ee8044c8ef0abd39a4d2f2d0b8efe03eb29290d26387518967adf249ecd"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b1fc6181757abfb017dce7577dcb7f3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15339,
        "upload_time": "2022-09-30T15:19:18",
        "upload_time_iso_8601": "2022-09-30T15:19:18.482657Z",
        "url": "https://files.pythonhosted.org/packages/4c/be/b49d81df757db7e7a46fbc06af7cc2724f2ce2fe792c31d4aa3ade2228c8/ciscostylecli-1.0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ef26967cac2bf1e5d0ed91f10098e291150bdc0db604db2303e957ad334a460",
          "md5": "b5925801bde1e26ccbedabade50c03b8",
          "sha256": "c37ae7fbda80e0f89e13783715fc8b0ab40ba1464fddc21b8bdb633b1bbea125"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b5925801bde1e26ccbedabade50c03b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15510,
        "upload_time": "2022-09-30T15:19:20",
        "upload_time_iso_8601": "2022-09-30T15:19:20.376780Z",
        "url": "https://files.pythonhosted.org/packages/1e/f2/6967cac2bf1e5d0ed91f10098e291150bdc0db604db2303e957ad334a460/ciscostylecli-1.0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a568707f54a9c7b3290945d49478975200744c0650fe7530a66a752a846ebabd",
          "md5": "c9a576824157904c1418871a559d53fb",
          "sha256": "831c45598d1cb6e7387aef855c2fc323bf893e6a935362470089b12e4f9f51a4"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9a576824157904c1418871a559d53fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15376,
        "upload_time": "2022-09-30T15:54:43",
        "upload_time_iso_8601": "2022-09-30T15:54:43.364174Z",
        "url": "https://files.pythonhosted.org/packages/a5/68/707f54a9c7b3290945d49478975200744c0650fe7530a66a752a846ebabd/ciscostylecli-1.0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8929145886f28ac56e5497cc38824a62ee312e92cfa5c203ba9b059a3cb21ff",
          "md5": "653a36d50a847070ef6650e9dfc13ba0",
          "sha256": "713ae337733fd28e386d2239fe7b634ee6bd14f463b8c9a6196a15d1b942d2f9"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "653a36d50a847070ef6650e9dfc13ba0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15536,
        "upload_time": "2022-09-30T15:54:45",
        "upload_time_iso_8601": "2022-09-30T15:54:45.450104Z",
        "url": "https://files.pythonhosted.org/packages/d8/92/9145886f28ac56e5497cc38824a62ee312e92cfa5c203ba9b059a3cb21ff/ciscostylecli-1.0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ebd21bb437efd73dc3b350d8c90d4314cd6fd33b42d6daaf7f87520e53a4342",
          "md5": "58bd1854659d6d972e09e1f51f4612a9",
          "sha256": "5a6b203b5f081d68ca505fbdb6fcdc0eb50bcf4bd6131527fbac578516e49048"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58bd1854659d6d972e09e1f51f4612a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15561,
        "upload_time": "2022-10-01T03:43:58",
        "upload_time_iso_8601": "2022-10-01T03:43:58.229638Z",
        "url": "https://files.pythonhosted.org/packages/2e/bd/21bb437efd73dc3b350d8c90d4314cd6fd33b42d6daaf7f87520e53a4342/ciscostylecli-1.0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cbf75e232b32841328e832d977febc8bcaf3b08403ea6312edd52ea030fcd99",
          "md5": "4db8ef2737c0f1c6ffb4878385febe2e",
          "sha256": "7157ed09cd8d28aa498b5edb1127c8d5e3d90e4cc5e6385d4852e00835663c6b"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4db8ef2737c0f1c6ffb4878385febe2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15792,
        "upload_time": "2022-10-01T03:44:00",
        "upload_time_iso_8601": "2022-10-01T03:44:00.391679Z",
        "url": "https://files.pythonhosted.org/packages/7c/bf/75e232b32841328e832d977febc8bcaf3b08403ea6312edd52ea030fcd99/ciscostylecli-1.0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84301509b444836bb9d57bc07e9f246202bf2ba0c2a6fb7351cb2dce86dd1623",
          "md5": "8a0048e334a42644e757597b305cf26e",
          "sha256": "ed9b6262139d5f891331707c5ade9fcefc49d9c08263ac19eaf163cbb3b18630"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a0048e334a42644e757597b305cf26e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15565,
        "upload_time": "2022-10-01T15:13:41",
        "upload_time_iso_8601": "2022-10-01T15:13:41.458503Z",
        "url": "https://files.pythonhosted.org/packages/84/30/1509b444836bb9d57bc07e9f246202bf2ba0c2a6fb7351cb2dce86dd1623/ciscostylecli-1.0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "636126e0780bf359c0b2e9456ec4a9e6af876b2e13531633bb6be68ad3c8df95",
          "md5": "19687b91dc8d76e9b50e3b6bcee84b33",
          "sha256": "cbaba744811b218e412aedcf8103875ee4ad90b59997f6824b0f95a19518000c"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "19687b91dc8d76e9b50e3b6bcee84b33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15806,
        "upload_time": "2022-10-01T15:13:43",
        "upload_time_iso_8601": "2022-10-01T15:13:43.287020Z",
        "url": "https://files.pythonhosted.org/packages/63/61/26e0780bf359c0b2e9456ec4a9e6af876b2e13531633bb6be68ad3c8df95/ciscostylecli-1.0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8364546416e53c5d408544d44980e51a92395f133127d9717dcbfee23e41926",
          "md5": "f9fb16de1499f1e72af5c99f2f39d6ff",
          "sha256": "5c8b5a7e7d5c8c3bc2f70ae8e1a3dbc682b261cafb746337a73e64d6375c8136"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9fb16de1499f1e72af5c99f2f39d6ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15661,
        "upload_time": "2022-10-02T14:17:46",
        "upload_time_iso_8601": "2022-10-02T14:17:46.307353Z",
        "url": "https://files.pythonhosted.org/packages/d8/36/4546416e53c5d408544d44980e51a92395f133127d9717dcbfee23e41926/ciscostylecli-1.0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1661b645cb41fd35b591799047863863babe975e51863ff83ba716876abd44a6",
          "md5": "7db7a8bfd6f8df75169ec1653f8d9b0a",
          "sha256": "25e4197c24fe6a0942c764eed92dc36ed845a979734631304a0752b3c88a3c4c"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7db7a8bfd6f8df75169ec1653f8d9b0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17423,
        "upload_time": "2022-10-02T14:17:48",
        "upload_time_iso_8601": "2022-10-02T14:17:48.421565Z",
        "url": "https://files.pythonhosted.org/packages/16/61/b645cb41fd35b591799047863863babe975e51863ff83ba716876abd44a6/ciscostylecli-1.0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07a6109010bf8731b158eafd56a52d4407c387534b47bfbd76503fa1452ef8e0",
          "md5": "36b9fef8cef6f119d37805ed7bc1c290",
          "sha256": "7fc334c43f167f6cb2e327e9df50772b12195a0ad72abca03a034abd2a989af8"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36b9fef8cef6f119d37805ed7bc1c290",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15945,
        "upload_time": "2022-10-05T13:12:17",
        "upload_time_iso_8601": "2022-10-05T13:12:17.544456Z",
        "url": "https://files.pythonhosted.org/packages/07/a6/109010bf8731b158eafd56a52d4407c387534b47bfbd76503fa1452ef8e0/ciscostylecli-1.0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a92314d10167e20cafae52ae8cf66306128e716667e8f596eb8f664c5cf0b10e",
          "md5": "e6c8c4868c175fa3b084e3373e1f5af1",
          "sha256": "1586cb34e9b2e293f17cdaed7518898f0a716414086c6465aa4d19985ffbddc1"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e6c8c4868c175fa3b084e3373e1f5af1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16175,
        "upload_time": "2022-10-05T13:12:20",
        "upload_time_iso_8601": "2022-10-05T13:12:20.205814Z",
        "url": "https://files.pythonhosted.org/packages/a9/23/14d10167e20cafae52ae8cf66306128e716667e8f596eb8f664c5cf0b10e/ciscostylecli-1.0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "096a62eb221700b0d6551bb8baf1bc78a1e774d727adea3d3cb4ce8faffdc2d6",
          "md5": "03521d1dd89e04164cb18722462bc757",
          "sha256": "125a67b2581d431c9077245776b3ea72433acf9f2f0dd6fad73972c1dd809788"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03521d1dd89e04164cb18722462bc757",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16851,
        "upload_time": "2022-10-06T15:40:14",
        "upload_time_iso_8601": "2022-10-06T15:40:14.119270Z",
        "url": "https://files.pythonhosted.org/packages/09/6a/62eb221700b0d6551bb8baf1bc78a1e774d727adea3d3cb4ce8faffdc2d6/ciscostylecli-1.0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa7c6c66796800f7c921568b585db140d65422a52b7af19cde31837c1c2b48fa",
          "md5": "4c79a0d40f9ac2fa4717fe5f1efce067",
          "sha256": "9974b0cef1ee84864db3863dda792dcce29052878d108b81ece79214ffb1ef8b"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4c79a0d40f9ac2fa4717fe5f1efce067",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17347,
        "upload_time": "2022-10-06T15:40:16",
        "upload_time_iso_8601": "2022-10-06T15:40:16.324141Z",
        "url": "https://files.pythonhosted.org/packages/fa/7c/6c66796800f7c921568b585db140d65422a52b7af19cde31837c1c2b48fa/ciscostylecli-1.0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "944d4c8f47f5819047c2519db2b188b0e3729820978b1c9e1ae3aec7525e8baf",
          "md5": "79bca0c674079100503747dd1db33f94",
          "sha256": "3262097164c6154013578a0eb59a3666961dc2f2f53f56815ab6fd79214a740b"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79bca0c674079100503747dd1db33f94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16943,
        "upload_time": "2022-11-11T01:09:02",
        "upload_time_iso_8601": "2022-11-11T01:09:02.053736Z",
        "url": "https://files.pythonhosted.org/packages/94/4d/4c8f47f5819047c2519db2b188b0e3729820978b1c9e1ae3aec7525e8baf/ciscostylecli-1.0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40173f6fbe18ac70e2b0a3dcbe4fdb736eeec34141932095c289da9d2e1fcaf6",
          "md5": "ec32c75ca52f36892c4ad107932843fa",
          "sha256": "73ae6cf9639eef9832a374d8c38c5776694d2ff9c7a104fcd03f907e2a084b53"
        },
        "downloads": -1,
        "filename": "ciscostylecli-1.0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ec32c75ca52f36892c4ad107932843fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17462,
        "upload_time": "2022-11-11T01:09:06",
        "upload_time_iso_8601": "2022-11-11T01:09:06.106187Z",
        "url": "https://files.pythonhosted.org/packages/40/17/3f6fbe18ac70e2b0a3dcbe4fdb736eeec34141932095c289da9d2e1fcaf6/ciscostylecli-1.0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "944d4c8f47f5819047c2519db2b188b0e3729820978b1c9e1ae3aec7525e8baf",
        "md5": "79bca0c674079100503747dd1db33f94",
        "sha256": "3262097164c6154013578a0eb59a3666961dc2f2f53f56815ab6fd79214a740b"
      },
      "downloads": -1,
      "filename": "ciscostylecli-1.0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "79bca0c674079100503747dd1db33f94",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16943,
      "upload_time": "2022-11-11T01:09:02",
      "upload_time_iso_8601": "2022-11-11T01:09:02.053736Z",
      "url": "https://files.pythonhosted.org/packages/94/4d/4c8f47f5819047c2519db2b188b0e3729820978b1c9e1ae3aec7525e8baf/ciscostylecli-1.0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "40173f6fbe18ac70e2b0a3dcbe4fdb736eeec34141932095c289da9d2e1fcaf6",
        "md5": "ec32c75ca52f36892c4ad107932843fa",
        "sha256": "73ae6cf9639eef9832a374d8c38c5776694d2ff9c7a104fcd03f907e2a084b53"
      },
      "downloads": -1,
      "filename": "ciscostylecli-1.0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ec32c75ca52f36892c4ad107932843fa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17462,
      "upload_time": "2022-11-11T01:09:06",
      "upload_time_iso_8601": "2022-11-11T01:09:06.106187Z",
      "url": "https://files.pythonhosted.org/packages/40/17/3f6fbe18ac70e2b0a3dcbe4fdb736eeec34141932095c289da9d2e1fcaf6/ciscostylecli-1.0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}