{
  "info": {
    "author": "Mike Bayer",
    "author_email": "mike@zzzcomputing.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Database :: Front-Ends"
    ],
    "description": "Alembic is a database migrations tool written by the author\nof `SQLAlchemy <http://www.sqlalchemy.org>`_.  A migrations tool\noffers the following functionality:\n\n* Can emit ALTER statements to a database in order to change\n  the structure of tables and other constructs\n* Provides a system whereby \"migration scripts\" may be constructed;\n  each script indicates a particular series of steps that can \"upgrade\" a\n  target database to a new version, and optionally a series of steps that can\n  \"downgrade\" similarly, doing the same steps in reverse.\n* Allows the scripts to execute in some sequential manner.\n\nThe goals of Alembic are:\n\n* Very open ended and transparent configuration and operation.   A new\n  Alembic environment is generated from a set of templates which is selected\n  among a set of options when setup first occurs. The templates then deposit a\n  series of scripts that define fully how database connectivity is established\n  and how migration scripts are invoked; the migration scripts themselves are\n  generated from a template within that series of scripts. The scripts can\n  then be further customized to define exactly how databases will be\n  interacted with and what structure new migration files should take.\n* Full support for transactional DDL.   The default scripts ensure that all\n  migrations occur within a transaction - for those databases which support\n  this (Postgresql, Microsoft SQL Server), migrations can be tested with no\n  need to manually undo changes upon failure.\n* Minimalist script construction.  Basic operations like renaming\n  tables/columns, adding/removing columns, changing column attributes can be\n  performed through one line commands like alter_column(), rename_table(),\n  add_constraint(). There is no need to recreate full SQLAlchemy Table\n  structures for simple operations like these - the functions themselves\n  generate minimalist schema structures behind the scenes to achieve the given\n  DDL sequence.\n* \"auto generation\" of migrations. While real world migrations are far more\n  complex than what can be automatically determined, Alembic can still\n  eliminate the initial grunt work in generating new migration directives\n  from an altered schema.  The ``--autogenerate`` feature will inspect the\n  current status of a database using SQLAlchemy's schema inspection\n  capabilities, compare it to the current state of the database model as\n  specified in Python, and generate a series of \"candidate\" migrations,\n  rendering them into a new migration script as Python directives. The\n  developer then edits the new file, adding additional directives and data\n  migrations as needed, to produce a finished migration. Table and column\n  level changes can be detected, with constraints and indexes to follow as\n  well.\n* Full support for migrations generated as SQL scripts.   Those of us who\n  work in corporate environments know that direct access to DDL commands on a\n  production database is a rare privilege, and DBAs want textual SQL scripts.\n  Alembic's usage model and commands are oriented towards being able to run a\n  series of migrations into a textual output file as easily as it runs them\n  directly to a database. Care must be taken in this mode to not invoke other\n  operations that rely upon in-memory SELECTs of rows - Alembic tries to\n  provide helper constructs like bulk_insert() to help with data-oriented\n  operations that are compatible with script-based DDL.\n* Non-linear, dependency-graph versioning.   Scripts are given UUID\n  identifiers similarly to a DVCS, and the linkage of one script to the next\n  is achieved via human-editable markers within the scripts themselves.\n  The structure of a set of migration files is considered as a\n  directed-acyclic graph, meaning any migration file can be dependent\n  on any other arbitrary set of migration files, or none at\n  all.  Through this open-ended system, migration files can be organized\n  into branches, multiple roots, and mergepoints, without restriction.\n  Commands are provided to produce new branches, roots, and merges of\n  branches automatically.\n* Provide a library of ALTER constructs that can be used by any SQLAlchemy\n  application. The DDL constructs build upon SQLAlchemy's own DDLElement base\n  and can be used standalone by any application or script.\n* At long last, bring SQLite and its inablity to ALTER things into the fold,\n  but in such a way that SQLite's very special workflow needs are accommodated\n  in an explicit way that makes the most of a bad situation, through the\n  concept of a \"batch\" migration, where multiple changes to a table can\n  be batched together to form a series of instructions for a single, subsequent\n  \"move-and-copy\" workflow.   You can even use \"move-and-copy\" workflow for\n  other databases, if you want to recreate a table in the background\n  on a busy system.\n\nDocumentation and status of Alembic is at https://alembic.sqlalchemy.org/\n\nThe SQLAlchemy Project\n======================\n\nAlembic is part of the `SQLAlchemy Project <https://www.sqlalchemy.org>`_ and\nadheres to the same standards and conventions as the core project.\n\nDevelopment / Bug reporting / Pull requests\n___________________________________________\n\nPlease refer to the\n`SQLAlchemy Community Guide <https://www.sqlalchemy.org/develop.html>`_ for\nguidelines on coding and participating in this project.\n\nCode of Conduct\n_______________\n\nAbove all, SQLAlchemy places great emphasis on polite, thoughtful, and\nconstructive communication between users and developers.\nPlease see our current Code of Conduct at\n`Code of Conduct <https://www.sqlalchemy.org/codeofconduct.html>`_.\n\nLicense\n=======\n\nAlembic is distributed under the `MIT license\n<https://opensource.org/licenses/MIT>`_.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://alembic.sqlalchemy.org",
    "keywords": "SQLAlchemy migrations",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tiangolo-temp-alembic",
    "package_url": "https://pypi.org/project/tiangolo-temp-alembic/",
    "platform": "",
    "project_url": "https://pypi.org/project/tiangolo-temp-alembic/",
    "project_urls": {
      "Homepage": "https://alembic.sqlalchemy.org",
      "Issue Tracker": "https://github.com/sqlalchemy/alembic/"
    },
    "release_url": "https://pypi.org/project/tiangolo-temp-alembic/1.4.3.dev0/",
    "requires_dist": [
      "SQLAlchemy (>=1.1.0)",
      "Mako",
      "python-editor (>=0.3)",
      "python-dateutil"
    ],
    "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
    "summary": "A database migration tool for SQLAlchemy.",
    "version": "1.4.3.dev0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7336917,
  "releases": {
    "1.4.3.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e669e852ce245d6b68d4609171b6f559f9d66f2ddf70fec71ccbb8e5e9abf4be",
          "md5": "c6a00d7379c5aa795083c6df0a3d1ace",
          "sha256": "5853660d5bc98868182d464d8706a09ce40c721c15865d22a6a25dbe6243355e"
        },
        "downloads": -1,
        "filename": "tiangolo_temp_alembic-1.4.3.dev0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6a00d7379c5aa795083c6df0a3d1ace",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
        "size": 160079,
        "upload_time": "2020-05-27T16:06:15",
        "upload_time_iso_8601": "2020-05-27T16:06:15.887082Z",
        "url": "https://files.pythonhosted.org/packages/e6/69/e852ce245d6b68d4609171b6f559f9d66f2ddf70fec71ccbb8e5e9abf4be/tiangolo_temp_alembic-1.4.3.dev0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e669e852ce245d6b68d4609171b6f559f9d66f2ddf70fec71ccbb8e5e9abf4be",
        "md5": "c6a00d7379c5aa795083c6df0a3d1ace",
        "sha256": "5853660d5bc98868182d464d8706a09ce40c721c15865d22a6a25dbe6243355e"
      },
      "downloads": -1,
      "filename": "tiangolo_temp_alembic-1.4.3.dev0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c6a00d7379c5aa795083c6df0a3d1ace",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*",
      "size": 160079,
      "upload_time": "2020-05-27T16:06:15",
      "upload_time_iso_8601": "2020-05-27T16:06:15.887082Z",
      "url": "https://files.pythonhosted.org/packages/e6/69/e852ce245d6b68d4609171b6f559f9d66f2ddf70fec71ccbb8e5e9abf4be/tiangolo_temp_alembic-1.4.3.dev0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}