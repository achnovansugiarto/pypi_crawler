{
  "info": {
    "author": "",
    "author_email": "Julien Palard <julien@palard.fr>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Infix programming toolkit\n\nModule enabling a sh like infix syntax (using pipes).\n\n\n# Introduction\n\nAs an example, here is the solution for the 2nd Euler Project exercise:\n\n> Find the sum of all the even-valued terms in Fibonacci which do not\n  exceed four million.\n\nGiven `fib` a generator of Fibonacci numbers:\n\n```python\nsum(fib() | where(lambda x: x % 2 == 0) | take_while(lambda x: x < 4000000))\n```\n\nEach pipes is lazy evalatated, can be aliased, and partially\ninitialized, so it could be rewritten as:\n\n```python\nis_even = where(lambda x: x % 2 == 0)\nsum(fib() | is_even | take_while(lambda x: x < 4000000)\n```\n\n\n# Installing\n\nTo install the library, you can just run the following command:\n\n```shell\n# Linux/macOS\npython3 -m pip install pipe\n\n# Windows\npy -3 -m pip install pipe\n```\n\n\n# Using\n\nThe basic syntax is to use a Pipe like in a shell:\n\n```python\n>>> from itertools import count\n>>> from pipe import select, take\n>>> sum(count() | select(lambda x: x ** 2) | take(10))\n285\n\n```\n\nSome pipes take an argument:\n\n```python\n>>> from pipe import where\n>>> sum([1, 2, 3, 4] | where(lambda x: x % 2 == 0))\n6\n\n```\n\nSome do not need one:\n\n```python\n>>> from pipe import traverse\n>>> for i in [1, [2, 3], 4] | traverse:\n...     print(i)\n1\n2\n3\n4\n\n```\n\nIn which case it's allowed to use the calling parenthesis:\n\n```python\n>>> from pipe import traverse\n>>> for i in [1, [2, 3], 4] | traverse():\n...     print(i)\n1\n2\n3\n4\n\n```\n\n\n## Constructing your own\n\nYou can construct your pipes using the `Pipe` class like:\n\n```python\nfrom pipe import Pipe\nsquare = Pipe(lambda iterable: (x ** 2 for x in iterable))\nmap = Pipe(lambda iterable, fct: builtins.map(fct, iterable)\n\n```\n\nAs you can see it's often very short to write, and with a bit of luck\nthe function you're wrapping already takes an iterable as the first\nargument, making the wrapping straight forward:\n\n```python\n>>> from collections import deque\n>>> from pipe import Pipe\n>>> end = Pipe(deque)\n\n```\n\nand that's it `itrable | end(3)` is `deque(iterable, 3)`:\n\n```python\n>>> list(range(100) | end(3))\n[97, 98, 99]\n\n```\n\nIn case it gets more complicated one can use `Pipe` as a decorator to\na function taking an iterable as the first argument, and any other\noptional arguments after:\n\n```python\n>>> from statistics import mean\n\n>>> @Pipe\n... def running_average(iterable, width):\n...     items = deque(maxlen=width)\n...     for item in iterable:\n...         items.append(item)\n...         yield mean(items)\n\n>>> list(range(20) | running_average(width=2))\n[0, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5]\n>>> list(range(20) | running_average(width=10))\n[0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5]\n\n```\n\n\n## Partial Pipes\n\nA `pipe` can be parametrized without being evaluated:\n\n```python\n>>> running_average_of_two = running_average(2)\n>>> list(range(20) | running_average_of_two)\n[0, 0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5]\n\n```\n\nFor multi-argument pipes then can be partially initialized, you can think of curying:\n\n```python\nsome_iterable | some_pipe(1, 2, 3)\n```\n\nis strictly equivalent to:\n\n```python\nsome_iterable | some_pipe(1)(2)(3)\n```\n\nSo it can be used to specialize pipes, first a dummy example:\n\n```python\n>>> @Pipe\n... def addmul(iterable, to_add, to_mul):\n...     \"\"\"Computes (x + to_add) * to_mul to every items of the input.\"\"\"\n...     for i in iterable:\n...         yield (i + to_add) * to_mul\n\n>>> mul = addmul(0)  # This partially initialize addmul with to_add=0\n>>> list(range(10) | mul(10))\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]\n\n```\n\nWhich also works with keyword arguments:\n\n```python\n>>> add = addmul(to_mul=1)  # This partially initialize addmul with `to_mul=1`\n>>> list(range(10) | add(10))\n[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n\n```\n\n\nBut now for something interesting:\n\n```python\n>>> import re\n>>> @Pipe\n... def grep(iterable, pattern, flags=0):\n...     for line in iterable:\n...         if re.match(pattern, line, flags=flags):\n...             yield line\n...\n>>> lines = [\"Hello\", \"hello\", \"World\", \"world\"]\n>>> for line in lines | grep(\"H\"):\n...     print(line)\nHello\n\n```\n\nNow let's reuse it in two ways, first with a pattern:\n\n```python\n>>> lowercase_only = grep(\"[a-z]+$\")\n>>> for line in lines | lowercase_only:\n...     print(line)\nhello\nworld\n\n```\n\nOr now with a flag:\n\n```python\n>>> igrep = grep(flags=re.IGNORECASE)\n>>> for line in lines | igrep(\"hello\"):\n...    print(line)\n...\nHello\nhello\n\n```\n\n# Deprecations of pipe 1.x\n\nIn pipe 1.x a lot of functions were returning iterables and a lot\nother functions were returning non-iterables, causing confusion. The\none returning non-iterables could only be used as the last function of\na pipe expression, so they are in fact useless:\n\n```python\nrange(100) | where(lambda x: x % 2 == 0) | add\n```\n\ncan be rewritten with no less readability as:\n\n```python\nsum(range(100) | where(lambda x: x % 2 == 0))\n```\n\nso all pipes returning non-iterables are now deprecated and were\nremoved in pipe 2.0.\n\n\n## What shoud I do?\n\nOh, you just upgraded pipe, got an exception, and landed here? You\nhave three solutions:\n\n\n1) Stop using closing-pipes, replace `...|...|...|...|as_list` to\n   `list(...|...|...|)`, that's it, it's even shorter.\n\n2) If \"closing pipes\" are not an issue for you, and you really like\n   them, just reimplement the few you really need, it often take a very\n   few lines of code, or copy them from\n   [here](https://github.com/JulienPalard/Pipe/blob/dd179c8ff0aa28ee0524f3247e5cb1c51347cba6/pipe.py).\n\n3) If you still rely on a lot of them and are in a hurry, just `pip install pipe<2`.\n\n\nAnd start testing your project using the [Python Development\nMode](https://docs.python.org/3/library/devmode.html) so you catch\nthose warnings before they bite you.\n\n\n## But I like them, pleassssse, reintroduce them!\n\nThis has already been discussed in [#74](https://github.com/JulienPalard/Pipe/issues/74).\n\nAn `@Pipe` is often easily implemented in a 1 to 3 lines of code\nfunction, and the `pipe` module does not aim at giving all\npossibilities, it aims at giving the `Pipe` decorator.\n\nSo if you need more pipes, closing pipes, weired pipes, you-name-it,\nfeel free to implement them on your project, and consider the\nalready-implemented ones as examples on how to do it.\n\nSee the `Constructing your own` paragraph below.\n\n\n# Existing Pipes in this module\n\nAlphabetical list of available pipes; when several names are listed for a given pipe, these are aliases.\n\n## `chain`\n\nChain a sequence of iterables:\n\n```python\n>>> from pipe import chain\n>>> list([[1, 2], [3, 4], [5]] | chain)\n[1, 2, 3, 4, 5]\n\n```\n\nWarning : chain only unfold iterable containing ONLY iterables:\n\n```python\n[1, 2, [3]] | chain\n```\nGives a `TypeError: chain argument #1 must support iteration`\nConsider using traverse.\n\n\n## `chain_with(other)`\n\nLike itertools.chain, yields elements of the given iterable,\nhen yields elements of its parameters\n\n```python\n>>> from pipe import chain_with\n>>> list((1, 2, 3) | chain_with([4, 5], [6]))\n[1, 2, 3, 4, 5, 6]\n\n```\n\n## `dedup(key=None)`\n\nDeduplicate values, using the given `key` function if provided.\n\n```python\n>>> from pipe import dedup\n>>> list([-1, 0, 0, 0, 1, 2, 3] | dedup)\n[-1, 0, 1, 2, 3]\n>>> list([-1, 0, 0, 0, 1, 2, 3] | dedup(key=abs))\n[-1, 0, 2, 3]\n\n```\n\n\n## `filter(predicate)`\n\nAlias for `where(predicate)`, see `where(predicate)`.\n\n\n## `groupby(key=None)`\n\nLike `itertools.groupby(sorted(iterable, key = keyfunc), keyfunc)`\n\n```python\n>>> from pipe import groupby, map\n>>> items = range(10)\n>>> ' / '.join(items | groupby(lambda x: \"Odd\" if x % 2 else \"Even\")\n...                  | select(lambda x: \"{}: {}\".format(x[0], ', '.join(x[1] | map(str)))))\n'Even: 0, 2, 4, 6, 8 / Odd: 1, 3, 5, 7, 9'\n\n```\n\n\n## `islice()`\n\nJust the `itertools.islice` function as a Pipe:\n\n```python\n>>> from pipe import islice\n>>> list((1, 2, 3, 4, 5, 6, 7, 8, 9) | islice(2, 8, 2))\n[3, 5, 7]\n\n```\n\n## `izip()`\n\nJust the `itertools.izip` function as a Pipe:\n\n```python\n>>> from pipe import izip\n>>> list(range(0, 10) | izip(range(1, 11)))\n[(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n\n```\n\n## `map()`, `select()`\n\nApply a conversion expression given as parameter\nto each element of the given iterable\n\n```python\n>>> list([1, 2, 3] | map(lambda x: x * x))\n[1, 4, 9]\n\n>>> list([1, 2, 3] | select(lambda x: x * x))\n[1, 4, 9]\n\n```\n\n## `netcat`\n\nThe netcat Pipe sends and receive bytes over TCP:\n\n```python\ndata = [\n    b\"HEAD / HTTP/1.0\\r\\n\",\n    b\"Host: python.org\\r\\n\",\n    b\"\\r\\n\",\n]\nfor packet in data | netcat(\"python.org\", 80):\n    print(packet.decode(\"UTF-8\"))\n```\n\nGives:\n\n```\nHTTP/1.1 301 Moved Permanently\nContent-length: 0\nLocation: https://python.org/\nConnection: close\n```\n\n## ```permutations(r=None)```\n\nReturns all possible permutations:\n\n```python\n>>> from pipe import permutations\n>>> for item in 'ABC' | permutations(2):\n...     print(item)\n('A', 'B')\n('A', 'C')\n('B', 'A')\n('B', 'C')\n('C', 'A')\n('C', 'B')\n\n```\n\n```python\n>>> for item in range(3) | permutations:\n...     print(item)\n(0, 1, 2)\n(0, 2, 1)\n(1, 0, 2)\n(1, 2, 0)\n(2, 0, 1)\n(2, 1, 0)\n\n```\n\n## `reverse`\n\nLike Python's built-in `reversed` function.\n\n```python\n>>> from pipe import reverse\n>>> list([1, 2, 3] | reverse)\n[3, 2, 1]\n\n```\n\n## `select(fct)`\n\nAlias for `map(fct)`, see `map(fct)`.\n\n\n## `skip()`\n\nSkips the given quantity of elements from the given iterable, then yields\n\n```python\n>>> from pipe import skip\n>>> list((1, 2, 3, 4, 5) | skip(2))\n[3, 4, 5]\n\n```\n\n\n## `skip_while(predicate)`\n\nLike itertools.dropwhile, skips elements of the given iterable\nwhile the predicate is true, then yields others:\n\n```python\n>>> from pipe import skip_while\n>>> list([1, 2, 3, 4] | skip_while(lambda x: x < 3))\n[3, 4]\n\n```\n\n## `sort(key=None, reverse=False)`\n\nLike Python's built-in \"sorted\" primitive.\n\n```python\n>>> from pipe import sort\n>>> ''.join(\"python\" | sort)\n'hnopty'\n>>> [5, -4, 3, -2, 1] | sort(key=abs)\n[1, -2, 3, -4, 5]\n\n```\n\n## `t`\n\nLike Haskell's operator \":\":\n\n```python\n>>> from pipe import t\n>>> for i in 0 | t(1) | t(2):\n...     print(i)\n0\n1\n2\n\n```\n\n## `tail(n)`\n\nYields the given quantity of the last elements of the given iterable.\n\n```python\n>>> from pipe import tail\n>>> for i in (1, 2, 3, 4, 5) | tail(3):\n...     print(i)\n3\n4\n5\n\n```\n\n## `take(n)`\n\nYields the given quantity of elements from the given iterable, like `head`\nin shell script.\n\n```python\n>>> from pipe import take\n>>> for i in count() | take(5):\n...     print(i)\n0\n1\n2\n3\n4\n\n```\n\n## `take_while(predicate)`\n\nLike `itertools.takewhile`, yields elements of the\ngiven iterable while the predicate is true:\n\n```python\n>>> from pipe import take_while\n>>> for i in count() | take_while(lambda x: x ** 2 < 100):\n...     print(i)\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n```\n\n## `tee`\n\ntee outputs to the standard output and yield unchanged items, useful for\ndebugging a pipe stage by stage:\n\n```python\n>>> from pipe import tee\n>>> sum([\"1\", \"2\", \"3\", \"4\", \"5\"] | tee | map(int) | tee)\n'1'\n1\n'2'\n2\n'3'\n3\n'4'\n4\n'5'\n5\n15\n\n```\n\nThe `15` at the end is the `sum` returning.\n\n\n## `transpose()`\n\nTransposes the rows and columns of a matrix.\n\n```python\n>>> from pipe import transpose\n>>> [[1, 2, 3], [4, 5, 6], [7, 8, 9]] | transpose\n[(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n\n```\n\n## `traverse`\n\nRecursively unfold iterables:\n\n```python\n>>> list([[1, 2], [[[3], [[4]]], [5]]] | traverse)\n[1, 2, 3, 4, 5]\n>>> squares = (i * i for i in range(3))\n>>> list([[0, 1, 2], squares] | traverse)\n[0, 1, 2, 0, 1, 4]\n\n```\n\n## `uniq(key=None)`\n\n\nLike dedup() but only deduplicate consecutive values, using the given\n`key` function if provided (or else the identity).\n\n```python\n>>> from pipe import uniq\n>>> list([1, 1, 2, 2, 3, 3, 1, 2, 3] | uniq)\n[1, 2, 3, 1, 2, 3]\n>>> list([1, -1, 1, 2, -2, 2, 3, 3, 1, 2, 3] | uniq(key=abs))\n[1, 2, 3, 1, 2, 3]\n\n```\n\n## `where(predicate)`, `filter(predicate)`\n\nOnly yields the matching items of the given iterable:\n\n```python\n>>> list([1, 2, 3] | where(lambda x: x % 2 == 0))\n[2]\n\n```\n\nDon't forget they can be aliased:\n\n```python\n>>> positive = where(lambda x: x > 0)\n>>> negative = where(lambda x: x < 0)\n>>> sum([-10, -5, 0, 5, 10] | positive)\n15\n>>> sum([-10, -5, 0, 5, 10] | negative)\n-15\n\n```\n\n# Euler project samples\n\n> Find the sum of all the multiples of 3 or 5 below 1000.\n\n```python\n>>> euler1 = sum(count() | where(lambda x: x % 3 == 0 or x % 5 == 0) | take_while(lambda x: x < 1000))\n>>> assert euler1 == 233168\n\n```\n\n> Find the sum of all the even-valued terms in Fibonacci which do not exceed four million.\n\n```python\neuler2 = sum(fib() | where(lambda x: x % 2 == 0) | take_while(lambda x: x < 4000000))\n```\n\n> Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n\n```python\n>>> square = map(lambda x: x ** 2)\n>>> euler6 = sum(range(101)) ** 2 - sum(range(101) | square)\n>>> assert euler6 == 25164150\n\n```\n\n# Lazy evaluation\n\nUsing this module, you get lazy evaluation at two levels:\n- the object obtained by piping is a generator and will be evaluated only if needed,\n- within a series of pipe commands, only the elements that are actually needed will be evaluated.\n\nTo illustrate:\n\n```python\nfrom itertools import count\nfrom pipe import select, where, take\n\n\ndef dummy_func(x):\n    print(f\"processing at value {x}\")\n    return x\n\n\nprint(\"----- test using a generator as input -----\")\n\nprint(f\"we are feeding in a: {type(count(100))}\")\n\nres_with_count = (count(100) | select(dummy_func)\n                             | where(lambda x: x % 2 == 0)\n                             | take(2))\n\nprint(f\"the resulting object is: {res_with_count}\")\nprint(f\"when we force evaluation we get:\")\nprint(f\"{list(res_with_count)}\")\n\nprint(\"----- test using a list as input -----\")\n\nlist_to_100 = list(range(100))\nprint(f\"we are feeding in a: {type(list_to_100)} which has length {len(list_to_100)}\")\n\nres_with_list = (list_to_100 | select(dummy_func)\n                             | where(lambda x: x % 2 == 0)\n                             | take(2))\n\nprint(f\"the resulting object is: {res_with_list}\")\nprint(f\"when we force evaluation we get:\")\nprint(f\"{list(res_with_list)}\")\n```\n\nWhich prints:\n\n```\n----- test using a generator as input -----\nwe are feeding in a: <class 'itertools.count'>\nthe resulting object is: <generator object take at 0x7fefb5e70c10>\nwhen we force evaluation we get:\nprocessing at value 100\nprocessing at value 101\nprocessing at value 102\nprocessing at value 103\nprocessing at value 104\n[100, 102]\n----- test using a list as input -----\nwe are feeding in a: <class 'list'> which has length 100\nthe resulting object is: <generator object take at 0x7fefb5e70dd0>\nwhen we force evaluation we get:\nprocessing at value 0\nprocessing at value 1\nprocessing at value 2\nprocessing at value 3\nprocessing at value 4\n[0, 2]\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pipe",
    "package_url": "https://pypi.org/project/pipe/",
    "platform": null,
    "project_url": "https://pypi.org/project/pipe/",
    "project_urls": {
      "repository": "https://github.com/JulienPalard/Pipe"
    },
    "release_url": "https://pypi.org/project/pipe/2.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Module enablig a sh like infix syntax (using pipes)",
    "version": "2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13898637,
  "releases": {
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77e2477d8a6793e8c7da0a09d560397ea746ba149d19d4d733ae45a05173b891",
          "md5": "f61af48362497db5b80ab34ba8f47796",
          "sha256": "4636fb16f05c302bbf882533b4e79a90c59ddb8295e74a0236c5084fc3ed31fd"
        },
        "downloads": -1,
        "filename": "pipe-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f61af48362497db5b80ab34ba8f47796",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6862,
        "upload_time": "2011-03-29T07:57:32",
        "upload_time_iso_8601": "2011-03-29T07:57:32.632401Z",
        "url": "https://files.pythonhosted.org/packages/77/e2/477d8a6793e8c7da0a09d560397ea746ba149d19d4d733ae45a05173b891/pipe-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91c64d578366c787a9d4b4e6323af6695bb8cdfdbb567d738dc124b74af01d29",
          "md5": "a15a779e4d0b291c8eec8e5256d0dece",
          "sha256": "0aaba5b5f97d037601d8ae8dccfc7adcb009af02d9451ac4731d9bc75d4a6d92"
        },
        "downloads": -1,
        "filename": "pipe-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a15a779e4d0b291c8eec8e5256d0dece",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6934,
        "upload_time": "2011-03-29T12:37:57",
        "upload_time_iso_8601": "2011-03-29T12:37:57.175896Z",
        "url": "https://files.pythonhosted.org/packages/91/c6/4d578366c787a9d4b4e6323af6695bb8cdfdbb567d738dc124b74af01d29/pipe-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a9df6e5733502049d878c5f7aaa3ce53732d5c55883d604c06f818222dc5cf2",
          "md5": "3bff61cab5d189ce88ec44bd64f1788d",
          "sha256": "1bc9b3456c86406aea508edff9d606ee9caf4962fe534116f96a82e10c5bd0d7"
        },
        "downloads": -1,
        "filename": "pipe-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3bff61cab5d189ce88ec44bd64f1788d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7166,
        "upload_time": "2011-04-07T12:35:37",
        "upload_time_iso_8601": "2011-04-07T12:35:37.702027Z",
        "url": "https://files.pythonhosted.org/packages/8a/9d/f6e5733502049d878c5f7aaa3ce53732d5c55883d604c06f818222dc5cf2/pipe-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fb0e078169700e5653788ba8ebc59f7af2e91cc7fec30d043c5a47b8415d8b9",
          "md5": "b0f8eeab6368df806290d8744d91bc59",
          "sha256": "84655b9ccbb049d869b1ecf5df0c6f4676ef502ce003eb4b09f04a6e71b6960e"
        },
        "downloads": -1,
        "filename": "pipe-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b0f8eeab6368df806290d8744d91bc59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8868,
        "upload_time": "2017-12-04T22:03:35",
        "upload_time_iso_8601": "2017-12-04T22:03:35.600728Z",
        "url": "https://files.pythonhosted.org/packages/5f/b0/e078169700e5653788ba8ebc59f7af2e91cc7fec30d043c5a47b8415d8b9/pipe-1.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa5e79d9c53cb50dad5e3cfd9c0913d812a6eb76c487e07345949d31ccd0ef38",
          "md5": "12e3652314c4111a090607a6755fbf1c",
          "sha256": "b1a589c27ac59ef42f34602c4927f2579dc92179f5f882afe2041202d1fb1449"
        },
        "downloads": -1,
        "filename": "pipe-1.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "12e3652314c4111a090607a6755fbf1c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7085,
        "upload_time": "2018-07-27T21:27:55",
        "upload_time_iso_8601": "2018-07-27T21:27:55.345343Z",
        "url": "https://files.pythonhosted.org/packages/fa/5e/79d9c53cb50dad5e3cfd9c0913d812a6eb76c487e07345949d31ccd0ef38/pipe-1.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e550348ec7b5162ee997cf4723de3122c237d2f6e695445a61c6935e18dbdecf",
          "md5": "1d8dcaf38fba2c82cf33924363435245",
          "sha256": "969e8330cea612688134ce3e244eef92f24513af655c78c4302fda709d750aef"
        },
        "downloads": -1,
        "filename": "pipe-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1d8dcaf38fba2c82cf33924363435245",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7937,
        "upload_time": "2018-07-27T21:27:57",
        "upload_time_iso_8601": "2018-07-27T21:27:57.275999Z",
        "url": "https://files.pythonhosted.org/packages/e5/50/348ec7b5162ee997cf4723de3122c237d2f6e695445a61c6935e18dbdecf/pipe-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50aa2c7d8e1131d709d009deb9919c29ee8b1e1b2997034cbd4a440fddbf1d3e",
          "md5": "b7c6574fb4be8b9fa1bb4d6876622130",
          "sha256": "cb89e7c553d819e97fa912afaf592c2553fa7b92c047c47772b4a96ef59c8825"
        },
        "downloads": -1,
        "filename": "pipe-1.6.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7c6574fb4be8b9fa1bb4d6876622130",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 6795,
        "upload_time": "2019-10-22T21:47:19",
        "upload_time_iso_8601": "2019-10-22T21:47:19.638869Z",
        "url": "https://files.pythonhosted.org/packages/50/aa/2c7d8e1131d709d009deb9919c29ee8b1e1b2997034cbd4a440fddbf1d3e/pipe-1.6.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70703ee82de58ebd57c88764037bff419b8f3f7963e329bbe8a9f5f7611463a9",
          "md5": "759e586c2c0cde835e238df0473bed36",
          "sha256": "9bec3a88f8829f5074507795bc633603d61c025c88069f4d865018c721c6aa31"
        },
        "downloads": -1,
        "filename": "pipe-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "759e586c2c0cde835e238df0473bed36",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7622,
        "upload_time": "2019-10-22T21:47:21",
        "upload_time_iso_8601": "2019-10-22T21:47:21.459375Z",
        "url": "https://files.pythonhosted.org/packages/70/70/3ee82de58ebd57c88764037bff419b8f3f7963e329bbe8a9f5f7611463a9/pipe-1.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5e48d531d2eda595b491c4933174f8b2b307af9b7523d4a99df5f9277ecbc90",
          "md5": "dffe700c8647041c6c0170e578afbf10",
          "sha256": "12dc5baae854843d0fa8ab674ab555e58cc703eb64d8bf86da8db46b7115d07c"
        },
        "downloads": -1,
        "filename": "pipe-2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dffe700c8647041c6c0170e578afbf10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8848,
        "upload_time": "2022-05-23T07:27:18",
        "upload_time_iso_8601": "2022-05-23T07:27:18.137387Z",
        "url": "https://files.pythonhosted.org/packages/d5/e4/8d531d2eda595b491c4933174f8b2b307af9b7523d4a99df5f9277ecbc90/pipe-2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee63e03c4a74314b2735d83e752a2c6d3a01ab7a72cca6cde98abe102d9db21a",
          "md5": "6e13c3fba076eb9be142a29f36d4ce89",
          "sha256": "a1cf3f29f98576b7e6552231142bc711e8dd324513a2c4525fc68c33f47fabad"
        },
        "downloads": -1,
        "filename": "pipe-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6e13c3fba076eb9be142a29f36d4ce89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9252,
        "upload_time": "2022-05-23T07:27:20",
        "upload_time_iso_8601": "2022-05-23T07:27:20.425857Z",
        "url": "https://files.pythonhosted.org/packages/ee/63/e03c4a74314b2735d83e752a2c6d3a01ab7a72cca6cde98abe102d9db21a/pipe-2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5e48d531d2eda595b491c4933174f8b2b307af9b7523d4a99df5f9277ecbc90",
        "md5": "dffe700c8647041c6c0170e578afbf10",
        "sha256": "12dc5baae854843d0fa8ab674ab555e58cc703eb64d8bf86da8db46b7115d07c"
      },
      "downloads": -1,
      "filename": "pipe-2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dffe700c8647041c6c0170e578afbf10",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8848,
      "upload_time": "2022-05-23T07:27:18",
      "upload_time_iso_8601": "2022-05-23T07:27:18.137387Z",
      "url": "https://files.pythonhosted.org/packages/d5/e4/8d531d2eda595b491c4933174f8b2b307af9b7523d4a99df5f9277ecbc90/pipe-2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee63e03c4a74314b2735d83e752a2c6d3a01ab7a72cca6cde98abe102d9db21a",
        "md5": "6e13c3fba076eb9be142a29f36d4ce89",
        "sha256": "a1cf3f29f98576b7e6552231142bc711e8dd324513a2c4525fc68c33f47fabad"
      },
      "downloads": -1,
      "filename": "pipe-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6e13c3fba076eb9be142a29f36d4ce89",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 9252,
      "upload_time": "2022-05-23T07:27:20",
      "upload_time_iso_8601": "2022-05-23T07:27:20.425857Z",
      "url": "https://files.pythonhosted.org/packages/ee/63/e03c4a74314b2735d83e752a2c6d3a01ab7a72cca6cde98abe102d9db21a/pipe-2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}