{
  "info": {
    "author": "Shunhua Han",
    "author_email": "hanshunhua0829@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# **ngs_te_mapper2**: <sub><sup>A program to identify transposable element insertions using next generation sequencing data</sup></sub>\n\n# Table of Contents\n* [Introduction](#intro)\n* [Installation](#install)\n* [Usage](#run)\n* [Output](#output)\n* [Getting help](#help)\n* [License](#license)\n\n# <a name=\"intro\"></a> Introduction\nngs_te_mapper2 is a re-implementation of the method for detecting transposable element (TE) insertions from next-generation sequencing (NGS) data originally described in [Linheiro and Bergman (2012) PLoS ONE 7(2): e30008](http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0030008). ngs_te_mapper2 uses a three-stage procedure to annotate non-reference TEs as the span of target site duplication (TSD), following the framework described in [Bergman (2012) Mob Genet Elements. 2:51-54](https://www.tandfonline.com/doi/full/10.4161/mge.19479).\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/bergmanlab/ngs_te_mapper2/master/img/ngs_te_mapper2.png?raw=true\"/>\n</p>\n\nIn the first stage, WGS reads are queried against a library of TE sequences to identify 'junction reads' that span the start/end of TE and genomic flanking sequences are retained. Such reads are often referred as 'split reads', although in reality these reads are not split in the resequenced genome.\n\nIn the second stage, junction reads from each side of TE insertion identified in the first stage are separately aligned to a reference genome that is hard-masked with RepeatMasker (http://www.repeatmasker.org/) using the same TE library from stage one. Genome-wide coverage profiles are computed using samtools v1.9 and genomic intervals with enriched coverage from junction read clusters on the 5' and 3' side of TEs are annotated in bed format. Regions of overlap between intervals of junction read clusters on the 5' and 3' side of TEs define the locations of the TSDs for candidate non-reference TE insertions. The orientation of the TE is determined from the relative orientation of alignments of the junction reads to the reference genome and TE library. \n\nIn the third stage, all reads from the original whole genome shotgun sequence data are used to query against the same hard-masked reference genome as in stage two. This additional mapping step is necessary to obtain all reads that span the TE-flank junction, as well as identify if any reads are present for the alternative ``reference\" haplotype that does not carry the TE insertion. For each candidate non-reference TE insertion site, number of junction reads covering 5' and 3' side of each candidate TE insertion are estimated as the number of soft-clipped reads overlapping a 10bp window on the 5' and 3' side of the TSD, respectively (Count_junction5' and Count_junction3'). Number of non-reference reads (Count_non_ref) were estimated as max(Count_junction5', Count_junction3'). Number of reference reads (Count_ref) were estimated as number of non-soft-clipped reads spanning the TSD with at least 3bp extension on both side. The allele frequency for non-reference TEs is heuristically estimated as Count_non-ref/(Count_non_ref + Count_ref).\n\nReference TE insertions are detected using a similar strategy to non-reference insertions, independently of any reference TE annotation. The first stage in detecting reference TE insertions is identical to the first stage of detecting non-reference TE insertions described above. The second stage in identifying reference TE insertions involves alignment of the renamed, but otherwise unmodified, junction reads to the reference genome. Alignments of the complete junction read (i.e. non-TE and TE components) are clustered to identify the two ends of the reference TE insertion. The orientation of the reference TE is then determined from the relative orientation of alignments of the junction reads to the reference genome and TE library.\n\n# <a name=\"install\"></a> Installation\n## Use Conda to install software dependencies\nngs_te_mapper2 is written in python3 and is designed to run on a Linux operating system. Installation of software dependencies for ngs_te_mapper2 is automated by Conda, thus a working installation of Conda is required to install ngs_te_mapper2. Conda can be installed via the Miniconda installer.\n\n### Installing Miniconda (Python 3.X)\n```\nwget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME//miniconda.sh\nbash ~/miniconda.sh -b -p $HOME/miniconda # silent mode\necho \"export PATH=\\$PATH:\\$HOME/miniconda/bin\" >> $HOME/.bashrc # add to .bashrc\nsource $HOME/.bashrc\nconda init\n```\n- `conda init` requires you to close and open a new terminal before it take effect\n\n### Update Conda\n```\nconda update conda\n```\n\n## Install software dependencies\nAfter installing and updating Conda, you can now use conda to install dependencies and create running environment for ngs_te_mapper2.\n### Clone ngs_te_mapper2 Repository\n```\ngit clone git@github.com:bergmanlab/ngs_te_mapper2.git\ncd ngs_te_mapper2\n```\n### Create ngs_te_mapper2 Conda Environment\n```\nconda env create -f envs/ngs_te_mapper2.yml\n```\n- This installs all the software dependencies needed to run ngs_te_mapper2 into the ngs_te_mapper2 Conda environment.\n\n### Activate ngs_te_mapper2 Conda Environment\n```\nconda activate ngs_te_mapper2\n```\n- This adds the dependencies installed in the ngs_te_mapper2 conda environment to the environment PATH so that they can be used by the ngs_te_mapper2 scripts.\n- This environment must always be activated prior to running any of the ngs_te_mapper2 scripts\n- NOTE: Sometimes activating conda environments does not work via conda activate myenv when run through a script submitted to a queueing system, this can be fixed by activating the environment in the script as shown below\n```\nCONDA_BASE=$(conda info --base)\nsource ${CONDA_BASE}/etc/profile.d/conda.sh\nconda activate ngs_te_mapper2\n```\n- For more on Conda: see the [Conda User Guide](https://docs.conda.io/projects/conda/en/latest/index.html).\n\n## Running ngs_te_mapper2 on test dataset\n- A test dataset is provided in the `test/` directory, you can test whether your ngs_te_mapper2 installation is successful by running ngs_te_mapper2 on this dataset, which should take less than one minute to finish on a single thread machine.\n```\nconda activate ngs_te_mapper2\ncd test\npython3 ../sourceCode/ngs_te_mapper2.py -o test_output -f reads.fastq -r ref_1kb.fasta -l library.fasta\n```\n\n# <a name=\"run\"></a> Usage\n## ngs_te_mapper2 required input files\n* FASTQ File (`-f/--reads`)\n  * Raw reads from paired-end or single-end sequencing run in fastq or fastq.gz format.\n  * Multiple fastq/fastq.gz files can be provided separated by comma (ep. `-f R1.fasta,R2.fasta`).\n* TE library FASTA (`-l/--library`)\n  * A FASTA file containing a consensus sequence for each TE family. Note: Each family should only be represented in one sequence in this file.\n  * [Example consensus FASTA file](https://github.com/bergmanlab/transposons/blob/master/releases/D_mel_transposon_sequence_set_v10.1.fa)\n* Reference FASTA (`-r/--reference`)\n  * The genome sequence of the reference genome in FASTA format.\n\n## Command line help page\n```\nusage: ngs_te_mapper2.py [-h] -f READS -l LIBRARY -r REFERENCE [-a ANNOTATION]\n                         [-n REGION] [-w WINDOW] [--min_mapq MIN_MAPQ]\n                         [--min_af MIN_AF] [--tsd_max TSD_MAX]\n                         [--gap_max GAP_MAX] [-m MAPPER] [-t THREAD] [-o OUT]\n                         [-p PREFIX] [-k]\n\nScript to detect non-reference TEs from single end short read data\n\nrequired arguments:\n  -f READS, --reads READS\n                        raw reads in fastq or fastq.gz format, separated by\n                        comma\n  -l LIBRARY, --library LIBRARY\n                        TE concensus sequence\n  -r REFERENCE, --reference REFERENCE\n                        reference genome\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -a ANNOTATION, --annotation ANNOTATION\n                        reference TE annotation in GFF3 format (must have\n                        'Target' attribute in the 9th column)\n  -w WINDOW, --window WINDOW\n                        merge window for identifying TE clusters (default =\n                        10)\n  --min_mapq MIN_MAPQ   minimum mapping quality of alignment (default = 20)\n  --min_af MIN_AF       minimum allele frequency (default = 0.1)\n  --tsd_max TSD_MAX     maximum TSD size (default = 25)\n  --gap_max GAP_MAX     maximum gap size (default = 5)\n  -t THREAD, --thread THREAD\n                        thread (default = 1)\n  -o OUT, --out OUT     output dir (default = '.')\n  -p PREFIX, --prefix PREFIX\n                        output prefix\n  -k, --keep_files      If provided then all intermediate files will be kept\n                        (default: remove intermediate files)\n```\nNote: The optional reference TE annotation input should in theory speed up the program. ngs_te_mapper2 expects the TE annotation to be in [GFF3 format](https://m.ensembl.org/info/website/upload/gff3.html) and `Target` attribute must be included in the 9th column that represents TE family name. If you have `*.out` annotation generated by RepeatMasker, you can use this [utility script](https://www.repeatmasker.org/utils/rmOutToGFF3.pl) to convert from `*.out` to GFF3 format.\n\n# <a name=\"output\"></a> Output\nngs_te_mapper2 outputs reference and non-referece TE insertion predictions in BED format (0-based).\n- `<sample>.nonref.bed`: non-reference TE insertion annotation predicted by ngs_te_mapper2 pipeline in BED format (0-based).\n- `<sample>.ref.bed`: reference TE insertion annotation predicted by ngs_te_mapper2 pipeline in BED format (0-based).\n\n## TE insertion annotation in bed format\nngs_te_mapper2 generates standard BED file `<sample>.nonref.bed` and `<sample>.ref.bed` that have detailed information for each reference and non-reference TE insertion.\n\nColumn | Description\n-- | --\nchromosome | The chromosome name where the TE insertion occurred\nposition | Starting breakpoint position of the TE insertions.\nend | Ending breakpoint position of the TE insertions.\ninfo | Includes TE family, TSD, Allele Frequency, 3' support, 5' support and reference reads. Separated by '\\|'.\nscore | '.'\nstrand | Strand that TE insertion occurs\n\n## Log file output by ngs_te_mapper2\nFor each ngs_te_mapper2 run, a log file called `<sample>.log` is generated that records all the major steps in the program and error messages.\n\n# <a name=\"help\"></a> Getting help\nPlease use the [Github Issue page](https://github.com/bergmanlab/ngs_te_mapper2/issues) if you have questions.\n\n# <a name=\"citation\"></a> Citation\nTo cite ngs_te_mapper2 in publications, please use:\n \n  Linheiro, R.S. and C.M. Bergman (2012) Whole Genome Resequencing \n  Reveals Natural Target Site Preferences of Transposable \n  Elements in Drosophila melanogaster. PLoS ONE 7(2): e30008\n  http://www.plosone.org/article/info%3Adoi%2F10.1371%2Fjournal.pone.0030008\n\n# <a name=\"license\"></a> License\nCopyright (c) 2020 Shunhua Han and Casey M. Bergman\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bergmanlab/ngs_te_mapper2",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ngs-te-mapper2",
    "package_url": "https://pypi.org/project/ngs-te-mapper2/",
    "platform": "",
    "project_url": "https://pypi.org/project/ngs-te-mapper2/",
    "project_urls": {
      "Homepage": "https://github.com/bergmanlab/ngs_te_mapper2"
    },
    "release_url": "https://pypi.org/project/ngs-te-mapper2/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A program to identify transposable element insertions using next generation sequencing data",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11034663,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea8615ba8fc4e02f13157e6a140a12be3a19c7c5362ae15b05e3937dfa30cee5",
          "md5": "a13a77b9cd95edf9bf7eb68355989b6c",
          "sha256": "e03edb58fe73ad521cad53c6bcc6e1f561425302901f77194f3b97ff089ce882"
        },
        "downloads": -1,
        "filename": "ngs_te_mapper2-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a13a77b9cd95edf9bf7eb68355989b6c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17530,
        "upload_time": "2021-07-29T01:25:20",
        "upload_time_iso_8601": "2021-07-29T01:25:20.856139Z",
        "url": "https://files.pythonhosted.org/packages/ea/86/15ba8fc4e02f13157e6a140a12be3a19c7c5362ae15b05e3937dfa30cee5/ngs_te_mapper2-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0782670dc4f0efd82cb7d47151dd1076cf1877396c07e11a81fce3e52efdd0aa",
          "md5": "58473b7047d97f624fba5432133ee528",
          "sha256": "81c587b6d5629b8ea39abf2ae55fdc77eb0361d302265cbfa920a0df07f0c734"
        },
        "downloads": -1,
        "filename": "ngs_te_mapper2-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "58473b7047d97f624fba5432133ee528",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20382,
        "upload_time": "2021-07-29T01:25:22",
        "upload_time_iso_8601": "2021-07-29T01:25:22.136474Z",
        "url": "https://files.pythonhosted.org/packages/07/82/670dc4f0efd82cb7d47151dd1076cf1877396c07e11a81fce3e52efdd0aa/ngs_te_mapper2-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc236f92dee8996215859ce0b0513c1311828cc4fd1a76b5f949010892850af7",
          "md5": "66530897a6244b4099b48fd06913e832",
          "sha256": "a49eebdaa077eda12513d0f2dcf957902d58218daf690def68b6a546f90d61f9"
        },
        "downloads": -1,
        "filename": "ngs_te_mapper2-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66530897a6244b4099b48fd06913e832",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17808,
        "upload_time": "2021-07-29T03:04:46",
        "upload_time_iso_8601": "2021-07-29T03:04:46.653893Z",
        "url": "https://files.pythonhosted.org/packages/dc/23/6f92dee8996215859ce0b0513c1311828cc4fd1a76b5f949010892850af7/ngs_te_mapper2-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "063bd5ce1a73e4451eff759e59de680b783220602353c5ca4c4a39875fe9d59a",
          "md5": "3f306c3bf43f182198ece0b80d077ff5",
          "sha256": "825b85095ee76f82e91793769c204253e4ff43cfcd6b3e64ba09784f8d0c2dd3"
        },
        "downloads": -1,
        "filename": "ngs_te_mapper2-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3f306c3bf43f182198ece0b80d077ff5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20548,
        "upload_time": "2021-07-29T03:04:48",
        "upload_time_iso_8601": "2021-07-29T03:04:48.379494Z",
        "url": "https://files.pythonhosted.org/packages/06/3b/d5ce1a73e4451eff759e59de680b783220602353c5ca4c4a39875fe9d59a/ngs_te_mapper2-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc236f92dee8996215859ce0b0513c1311828cc4fd1a76b5f949010892850af7",
        "md5": "66530897a6244b4099b48fd06913e832",
        "sha256": "a49eebdaa077eda12513d0f2dcf957902d58218daf690def68b6a546f90d61f9"
      },
      "downloads": -1,
      "filename": "ngs_te_mapper2-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "66530897a6244b4099b48fd06913e832",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 17808,
      "upload_time": "2021-07-29T03:04:46",
      "upload_time_iso_8601": "2021-07-29T03:04:46.653893Z",
      "url": "https://files.pythonhosted.org/packages/dc/23/6f92dee8996215859ce0b0513c1311828cc4fd1a76b5f949010892850af7/ngs_te_mapper2-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "063bd5ce1a73e4451eff759e59de680b783220602353c5ca4c4a39875fe9d59a",
        "md5": "3f306c3bf43f182198ece0b80d077ff5",
        "sha256": "825b85095ee76f82e91793769c204253e4ff43cfcd6b3e64ba09784f8d0c2dd3"
      },
      "downloads": -1,
      "filename": "ngs_te_mapper2-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3f306c3bf43f182198ece0b80d077ff5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20548,
      "upload_time": "2021-07-29T03:04:48",
      "upload_time_iso_8601": "2021-07-29T03:04:48.379494Z",
      "url": "https://files.pythonhosted.org/packages/06/3b/d5ce1a73e4451eff759e59de680b783220602353c5ca4c4a39875fe9d59a/ngs_te_mapper2-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}