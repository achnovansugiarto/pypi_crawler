{
  "info": {
    "author": "Talaia Labs",
    "author_email": "contact@talaia.watch",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# teos-client\n\n`teos-client` is an example command line client to interact with the Eye of Satoshi watchtower server, written in\nPython3. It has commands to register a user to the watchtower (generating user keys if necessary), to add an\nappointment and to retrieve information about appointments.\n\n## Dependencies\nRefer to [DEPENDENCIES.md](DEPENDENCIES.md)\n\n## Installation\n\nRefer to [INSTALL.md](INSTALL.md)\n\n## Usage\n\n    teos-client [global options] command [command options] [arguments]\n\n\n#### Global options\n\n- `--apiconnect`:\tAPI server where to send the requests. Defaults to 'localhost' (modifiable in conf file).\n- `--apiport` :\tAPI port where to send the requests. Defaults to '9814' (modifiable in conf file).\n- `-h --help`: \tshows a list of commands or help for a specific command.\n\n#### Commands\n\nThe client has four commands:\n\n- `register`: registers your user with the tower.\n- `add_appointment`: sends a json formatted appointment to the tower.\n- `get_appointment`: gets json formatted data about an appointment from the tower.\n- `help`: shows a list of commands or help for a specific command.\n\n### register\nThis commands serves as registration. It sends your public key to the tower to create a subscription (free at the moment) and returns a number of available appointment slots in the tower. Topping up the subscription can be done by simply sending a register message again.\n\nNotice that you need to be registered before sending any other type of request to the tower.\n\n#### Usage\n\n\tteos-client register tower_id\n\n### add_appointment\n\nThis command is used to send appointments to the watchtower. Appointments **must** be `json` encoded, and match the following format:\n\n\t{ \"tx\": tx,\n\t  \"tx_id\": tx_id,\n\t  \"to_self_delay\": d }\n\n`tx` **must** be the raw penalty transaction that will be encrypted before being sent to the watchtower. `type(tx) = hex encoded str`\n\n`tx_id` **must** match the **commitment transaction id**, and will be used to encrypt the **penalty transaction** and **generate the locator**. `type(tx_id) = hex encoded str`\n\n`to_self_delay` is the time the watchtower would have to respond with the **penalty transaction** once the **dispute transaction** is seen in the blockchain. `d` must match with the `OP_CSV` specified in the dispute transaction. If the to\\_self\\_delay does not match the `OP_CSV`, the watchtower will try to respond with the penalty transaction anyway, but success is not guaranteed. `d` is measured in blocks and should be at least `20`. `type(d) = int`\n\nThe API will return a `application/json` HTTP response code `200/OK` if the appointment is accepted, with the locator encoded in the response text, or a `400/Bad Request` if the appointment is rejected, with the rejection reason encoded in the response text. \n\n\n#### Usage\n\n\tteos-client add_appointment [command options] <appointment>/<path_to_appointment_file>\n\nif `-f, --file` **is** specified, then the command expects a path to a json file instead of a json encoded string as parameter.\n\n#### Options\n- `-f, --file path_to_json_file`\t loads the appointment data from the specified json file instead of command line.\n\n### get_appointment\t\n\n This command is used to get information about a specific appointment from the Eye of Satoshi.\t\n\n**Appointment can be in three states:**\n\n- `not_found`: meaning the locator is not recognised by the tower. This can either mean the locator is wrong, or the appointment has already been fulfilled (the tower does not keep track of completed appointments for now).\n- `being_watched`: the appointment has been accepted by the tower and it's being watched at the moment. This stage means that the dispute transaction has not been seen yet, and therefore no penalty transaction has been broadcast.\n- `dispute_responded`: the dispute was found by the watcher and the corresponding penalty transaction has been broadcast by the node. In this stage the tower is actively monitoring until the penalty transaction reaches enough confirmations and making sure no fork occurs in the meantime.\n\n**Response formats**\n\n**not_found**\n\n\t{\n\t\t\"locator\": l,\n\t\t\"status\": \"not_found\"\n\t}\n\n**being_watched**\n\n\t{\n\t\t\"locator\": l,\n\t\t\"status\": \"being_watched\",\n\t\t\"appointment\":\n\t\t\t{\n\t\t\t\t\"encrypted_blob\": eb,\n\t\t\t\t\"locator\": appointment_locator,\n\t\t\t\t\"status\": \"being_watched\",\n\t\t\t\t\"to_self_delay\": d\n\t\t\t}\n\t}\n\n**dispute_responded**\n\n\t{\n\t\t\"locator\": l,\n\t\t\"status\": \"dispute_responded\",\n\t\t\"appointment\":\n\t\t\t{\n\t\t\t\t\"dispute_txid\": dispute_txid,\n\t\t\t\t\"locator\": appointment_locator,\n\t\t\t\t\"penalty_rawtx\": penalty_rawtx,\n\t\t\t\t\"penalty_txid\": penalty_txid,\n\t\t\t\t\"status\": \"dispute_responded\"\n\t\t\t}\n\t}\n\n#### Usage\n\n\tteos-client get_appointment <appointment_locator>\n\n## Example\n1. Register with the tower. A tower with the given id should be running (replace the id with the one you'll be using).\n\n```\nteos-client register 03a3a3e196def1950f332556d046648d960102da33f61665a910febe38a1c3f825\n```\n\n2. Generate a new dummy appointment. **Note:** this appointment will never be fulfilled (it will eventually expire) since it does not correspond to a valid transaction. However it can be used to interact with the Eye of Satoshi's API.\n\n    ```\n\techo '{\"tx\": \"4615a58815475ab8145b6bb90b1268a0dbb02e344ddd483f45052bec1f15b1951c1ee7f070a0993da395a5ee92ea3a1c184b5ffdb2507164bf1f8c1364155d48bdbc882eee0868ca69864a807f213f538990ad16f56d7dfb28a18e69e3f31ae9adad229e3244073b7d643b4597ec88bf247b9f73f301b0f25ae8207b02b7709c271da98af19f1db276ac48ba64f099644af1ae2c90edb7def5e8589a1bb17cc72ac42ecf07dd29cff91823938fd0d772c2c92b7ab050f8837efd46197c9b2b3f\", \"tx_id\": \"0b9510d92a50c1d67c6f7fc5d47908d96b3eccdea093d89bcbaf05bcfebdd951\", \"to_self_delay\": 20}' > dummy_appointment_data.json\n    ```\n\n    That will create a json file that follows the appointment data structure filled with dummy data and store it in `dummy_appointment_data.json`.\n\n3. Send the appointment to the tower API. Which will then start monitoring for matching transactions.\n\n    ```\n    teos-client add_appointment -f dummy_appointment_data.json\n    ```\n\n    This returns an appointment locator that can be used to get updates about this appointment from the tower.\n\n4. Test that the tower is still watching the appointment by replacing the appointment locator received into the following command:\n\n    ```\n    pteos-client get_appointment <appointment_locator>\n    ```\n\n## Try our live instance\n\nBy default, `teos-client` will connect to your local instance (running on localhost). There are also a couple of live instances running, one for mainet and one for testnet:\n\n- testnet endpoint = `teos-testnet.pisa.watch:443`\n- mainnet endpoint = `teos.pisa.watch:443` or `theeyeofsatoshi.pisa.watch:443`\n- `tower_id` is `03a3a3e196def1950f332556d046648d960102da33f61665a910febe38a1c3f825` for both.\n\n### Connecting to the mainnet instance\nAdd `--apiconnect  --apiport 443` to your calls, for example:\n\n```\nteos-client --apiconnect=https://teos.pisa.watch --apiport=443 add_appointment   -f dummy_appointment_data.json \n```\n\nYou can also change the config file to avoid specifying the server every time:\n```\napi_connect = https://teos.pisa.watch\napi_port = 443\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/talaia-labs/python-teos",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "teos-client",
    "package_url": "https://pypi.org/project/teos-client/",
    "platform": "",
    "project_url": "https://pypi.org/project/teos-client/",
    "project_urls": {
      "Homepage": "https://github.com/talaia-labs/python-teos"
    },
    "release_url": "https://pypi.org/project/teos-client/0.1.1/",
    "requires_dist": [
      "cryptography (>=2.8)",
      "requests",
      "structlog"
    ],
    "requires_python": ">=3.7",
    "summary": "Testing client for The Eye of Satoshi",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8306460,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ff433ab2eadfa8f7512b75692b51aab834e8f6bc68d08000aadc54a0e4a7018",
          "md5": "e0d722796b8756403763651bc80569e4",
          "sha256": "a87e4f25172835a1cfdd32b9bf8a2cafc5b9bc03f9cd864b58689cedbebaf849"
        },
        "downloads": -1,
        "filename": "teos_client-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e0d722796b8756403763651bc80569e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 4346,
        "upload_time": "2020-09-30T12:11:10",
        "upload_time_iso_8601": "2020-09-30T12:11:10.788234Z",
        "url": "https://files.pythonhosted.org/packages/8f/f4/33ab2eadfa8f7512b75692b51aab834e8f6bc68d08000aadc54a0e4a7018/teos_client-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f56c3d5f4ed6e32a3a521310bbdb173c054e2b1d4767dc399cf2e4ed651a072a",
          "md5": "373ddd10383ef69bec99697e09b39950",
          "sha256": "feb656a4aae317784e4c86eb198e1d116d2629e1c9b11f6c2919fc23502a004c"
        },
        "downloads": -1,
        "filename": "teos-client-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "373ddd10383ef69bec99697e09b39950",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5032,
        "upload_time": "2020-09-30T12:11:13",
        "upload_time_iso_8601": "2020-09-30T12:11:13.742804Z",
        "url": "https://files.pythonhosted.org/packages/f5/6c/3d5f4ed6e32a3a521310bbdb173c054e2b1d4767dc399cf2e4ed651a072a/teos-client-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ff433ab2eadfa8f7512b75692b51aab834e8f6bc68d08000aadc54a0e4a7018",
        "md5": "e0d722796b8756403763651bc80569e4",
        "sha256": "a87e4f25172835a1cfdd32b9bf8a2cafc5b9bc03f9cd864b58689cedbebaf849"
      },
      "downloads": -1,
      "filename": "teos_client-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e0d722796b8756403763651bc80569e4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 4346,
      "upload_time": "2020-09-30T12:11:10",
      "upload_time_iso_8601": "2020-09-30T12:11:10.788234Z",
      "url": "https://files.pythonhosted.org/packages/8f/f4/33ab2eadfa8f7512b75692b51aab834e8f6bc68d08000aadc54a0e4a7018/teos_client-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f56c3d5f4ed6e32a3a521310bbdb173c054e2b1d4767dc399cf2e4ed651a072a",
        "md5": "373ddd10383ef69bec99697e09b39950",
        "sha256": "feb656a4aae317784e4c86eb198e1d116d2629e1c9b11f6c2919fc23502a004c"
      },
      "downloads": -1,
      "filename": "teos-client-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "373ddd10383ef69bec99697e09b39950",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 5032,
      "upload_time": "2020-09-30T12:11:13",
      "upload_time_iso_8601": "2020-09-30T12:11:13.742804Z",
      "url": "https://files.pythonhosted.org/packages/f5/6c/3d5f4ed6e32a3a521310bbdb173c054e2b1d4767dc399cf2e4ed651a072a/teos-client-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}