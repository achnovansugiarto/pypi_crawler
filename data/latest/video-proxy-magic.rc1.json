{
  "info": {
    "author": "Antoine Beaupr√©",
    "author_email": "anarcat@debian.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Natural Language :: English",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Multimedia :: Video :: Conversion"
    ],
    "description": "# video-proxy-magic\n\nThis tool allows you to generate smaller videos from a collection of\nexisting videos, something post-production video people call\n\"proxies\". Those are lower-resolution files that are faster to process\nfor editing movies.\n\n## Features\n\n * batch, automated conversion of large collections of video files\n * preserves directory structure\n * adds timecode overlays\n * transcodes files to 720p H264\n * minimalist, no GUI\n * ~300 lines of code, easy to audit\n\nTODO: screenshots\n\nTODO: testimonials\n\n## Installation\n\nThis program is a [Python][] program which runs exclusively from the\ncommand line interface, so it's a bit of an advanced tool. It depends\non [ffmpeg](https://ffmpeg.org/) to do all its work so the first step is to make sure\nthat is installed.\n\n [Python][]: https://en.wikipedia.org/wiki/Python_(programming_language)\n\nIn Debian GNU/Linux, for example, that would be:\n\n    apt install ffmpeg python3\n\nOn Mac or Windows, use the ffmpeg [Mac](https://ffmpeg.org/download.html#build-mac) or [Windows builds](https://ffmpeg.org/download.html#build-windows) and\nthe Python [Mac](https://www.python.org/downloads/macos/) or [Windows installers](https://www.python.org/downloads/windows/). \n\nThere's probably a way to install those through [Homebrew](https://brew.sh/) or\n[Chocolatey](https://chocolatey.org/), but if you know what those are, you probably already\nknow how to use them.\n\nOnce you have all those dependencies installed, you need install the\nactual program. Normally, you should have [pip](https://pip.pypa.io/) installed, so\ninstalling the program should be as simple as:\n\n    pip install video-proxy-magic\n\n## Usage\n\nThe program has a `--help` flag which has details on the various\noptions. An example run would be:\n\n    video-proxy-magic.py FOO/ PROXIES/FOO/\n\n... which would take *all* the files in `FOO/` and transcode them into\nthe `PROXIES/FOO/` directory, keeping the directory structure in\n`FOO/`. Assuming you have a file in `FOO/BAR/baz.MOV`, it will create\na proxy in `PROXIES/FOO/BAR/baz_proxy.mp4`.\n\nOn Windows, you might have to meddle around with drive letters and\nother horrors, for example:\n\n    py videos/magic/video-proxy-magic.py H:\\SOURCE H:\\DESTINATION\n\nThe program is pretty silent by default, so you will probably want to\nuse `-v` to make it verbose. You can also run a simulation with `-n`,\nand limit the search to specific files. This, for example, will run a\nsimulation of the transcoding with *only* the `MXF`, `MP4`, or `MOV`\nfiles it finds:\n\n    py videos/magic/video-proxy-magic.py H:\\SOURCE H:\\DESTINATION -n -v --include \"*.MXF\" \"*.MP4\" \"*.MOV\"\n\nYou can also *exclude* specific files with the `--exclude` flag of\ncourse, but it's typically easier to tell it what you want than play\nwhack-a-mole with the various garbage you might have lying around.\n\nOriginals are, of course, not touched. \n\n## Contributing\n\nSee the [contribution guide](CONTRIBUTING.md) for more information. In\nshort: this is a free software project and you are welcome to join us\nin improving it, both by fixing things, reporting issues or\ndocumentation.\n\n## Authors and acknowledgment\n\nThis tool was written by The Anarcat in 2020. Many thanks to my friend\nfor tests, feedback, and motivation.\n\nI actually don't know much about video editing, post-production, and\nbarely some cinema. I just built this thing because a friend of mine\nwas repeatedly clicking through their video editors to generate files\nlike this, wasting literally days of work for something that could\nobviously be automated.\n\n## License\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or any later version.\n\n## Project status\n\nKeep in mind I don't really offer any support for this tool. I only\nwrote it to save my friend some time, and it's reluctantly that I have\ncreated this project to make it more visible. So no warranties.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/anarcat/video-proxy-magic",
    "keywords": "",
    "license": "AGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "video-proxy-magic",
    "package_url": "https://pypi.org/project/video-proxy-magic/",
    "platform": null,
    "project_url": "https://pypi.org/project/video-proxy-magic/",
    "project_urls": {
      "Homepage": "https://gitlab.com/anarcat/video-proxy-magic"
    },
    "release_url": "https://pypi.org/project/video-proxy-magic/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "transcode video files in batch",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14153959,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35119c890ac56a3e2fca5d62416ce68b8773addc741f8ddd3bcfe36ab65e63a0",
          "md5": "cac5abfc8eea28325872215d715f20f1",
          "sha256": "25896103615a07c9c9d6715ec5d58be76e8e28b3df455e322562cfc2d2afe2ad"
        },
        "downloads": -1,
        "filename": "video_proxy_magic-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cac5abfc8eea28325872215d715f20f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6581,
        "upload_time": "2022-06-16T17:43:31",
        "upload_time_iso_8601": "2022-06-16T17:43:31.471959Z",
        "url": "https://files.pythonhosted.org/packages/35/11/9c890ac56a3e2fca5d62416ce68b8773addc741f8ddd3bcfe36ab65e63a0/video_proxy_magic-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "35119c890ac56a3e2fca5d62416ce68b8773addc741f8ddd3bcfe36ab65e63a0",
        "md5": "cac5abfc8eea28325872215d715f20f1",
        "sha256": "25896103615a07c9c9d6715ec5d58be76e8e28b3df455e322562cfc2d2afe2ad"
      },
      "downloads": -1,
      "filename": "video_proxy_magic-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cac5abfc8eea28325872215d715f20f1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6581,
      "upload_time": "2022-06-16T17:43:31",
      "upload_time_iso_8601": "2022-06-16T17:43:31.471959Z",
      "url": "https://files.pythonhosted.org/packages/35/11/9c890ac56a3e2fca5d62416ce68b8773addc741f8ddd3bcfe36ab65e63a0/video_proxy_magic-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}