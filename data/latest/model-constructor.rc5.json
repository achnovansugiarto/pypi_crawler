{
  "info": {
    "author": "Yasyrev Andrei",
    "author_email": "a.yasyrev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# model_constructor\n\n> Constructor to create pytorch model. \n\n## Install\n\n`pip install model-constructor`\n\nOr install from repo:\n\n`pip install git+https://github.com/ayasyrev/model_constructor.git`\n\n## How to use\n\nFirst import constructor class, then create model constructor object.\n\nNow you can change every part of model.\n\n\n```python\nfrom model_constructor import ModelConstructor\n```\n\n\n```python\nmc = ModelConstructor()\n```\n\nCheck base parameters:\n\n\n```python\nmc\n```\n<details open> <summary>output</summary>  \n    <pre>ModelConstructor\n      in_chans: 3, num_classes: 1000\n      expansion: 1, groups: 1, dw: False, div_groups: None\n      act_fn: ReLU, sa: False, se: False\n      stem sizes: [32, 32, 64], stride on 0\n      body sizes [64, 128, 256, 512]\n      layers: [2, 2, 2, 2]<pre>\n</details>\n\n\n\nCheck all parameters with `print_cfg` method:\n\n\n```python\nmc.print_cfg()\n```\n<details open> <summary>output</summary>  \n    <pre>ModelConstructor(\n      in_chans=3\n      num_classes=1000\n      block='ResBlock'\n      conv_layer='ConvBnAct'\n      block_sizes=[64, 128, 256, 512]\n      layers=[2, 2, 2, 2]\n      norm='BatchNorm2d'\n      act_fn='ReLU'\n      pool=\"AvgPool2d {'kernel_size': 2, 'ceil_mode': True}\"\n      expansion=1\n      groups=1\n      bn_1st=True\n      zero_bn=True\n      stem_sizes=[32, 32, 64]\n      stem_pool=\"MaxPool2d {'kernel_size': 3, 'stride': 2, 'padding': 1}\"\n      init_cnn='init_cnn'\n      make_stem='make_stem'\n      make_layer='make_layer'\n      make_body='make_body'\n      make_head='make_head')\n    <pre>\n</details>\n\nNow we have model constructor, default setting as xresnet18. And we can get model after call it.\n\n\n```python\n\nmodel = mc()\nmodel\n```\n<details> <summary>output</summary>  \n    <pre>ModelConstructor(\n      (stem): Sequential(\n        (conv_0): ConvBnAct(\n          (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvBnAct(\n          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_2): ConvBnAct(\n          (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (stem_pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n      )\n      (body): Sequential(\n        (l_0): Sequential(\n          (bl_0): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n          (bl_1): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n        )\n        (l_1): Sequential(\n          (bl_0): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (id_conv): Sequential(\n              (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n              (id_conv): ConvBnAct(\n                (conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n          (bl_1): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n        )\n        (l_2): Sequential(\n          (bl_0): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (id_conv): Sequential(\n              (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n              (id_conv): ConvBnAct(\n                (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n          (bl_1): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n        )\n        (l_3): Sequential(\n          (bl_0): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (id_conv): Sequential(\n              (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n              (id_conv): ConvBnAct(\n                (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n          (bl_1): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): ReLU(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): ReLU(inplace=True)\n          )\n        )\n      )\n      (head): Sequential(\n        (pool): AdaptiveAvgPool2d(output_size=1)\n        (flat): Flatten(start_dim=1, end_dim=-1)\n        (fc): Linear(in_features=512, out_features=1000, bias=True)\n      )\n    )<pre>\n</details>\n\n\n\nIf you want to change model, just change constructor parameters.  \nLets create xresnet50.\n\n\n```python\nmc.expansion = 4\nmc.layers = [3,4,6,3]\n```\n\nNow we can look at model parts - stem, body, head.  \n\n\n```python\n\nmc.body\n```\n<details> <summary>output</summary>  \n    <pre>Sequential(\n      (l_0): Sequential(\n        (bl_0): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (id_conv): Sequential(\n            (id_conv): ConvBnAct(\n              (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_1): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_2): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n      )\n      (l_1): Sequential(\n        (bl_0): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (id_conv): Sequential(\n            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n            (id_conv): ConvBnAct(\n              (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_1): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_2): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_3): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n      )\n      (l_2): Sequential(\n        (bl_0): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (id_conv): Sequential(\n            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n            (id_conv): ConvBnAct(\n              (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_1): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_2): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_3): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_4): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_5): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n      )\n      (l_3): Sequential(\n        (bl_0): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (id_conv): Sequential(\n            (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n            (id_conv): ConvBnAct(\n              (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_1): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n        (bl_2): ResBlock(\n          (convs): Sequential(\n            (conv_0): ConvBnAct(\n              (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_1): ConvBnAct(\n              (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n              (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              (act_fn): ReLU(inplace=True)\n            )\n            (conv_2): ConvBnAct(\n              (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n              (bn): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n            )\n          )\n          (act_fn): ReLU(inplace=True)\n        )\n      )\n    )<pre>\n</details>\n\n\n\n## Create constructor from config.\n\nAlternative we can create config first and than create constructor from it. \n\n\n```python\nfrom model_constructor import ModelCfg\n```\n\n\n```python\ncfg = ModelCfg()\nprint(cfg)\n```\n<details open> <summary>output</summary>  \n    <pre>in_chans=3 num_classes=1000 block='ResBlock' conv_layer='ConvBnAct' block_sizes=[64, 128, 256, 512] layers=[2, 2, 2, 2] norm='BatchNorm2d' act_fn='ReLU' pool=\"AvgPool2d {'kernel_size': 2, 'ceil_mode': True}\" expansion=1 groups=1 bn_1st=True zero_bn=True stem_sizes=[32, 32, 64] stem_pool=\"MaxPool2d {'kernel_size': 3, 'stride': 2, 'padding': 1}\" init_cnn='init_cnn' make_stem='make_stem' make_layer='make_layer' make_body='make_body' make_head='make_head'\n    <pre>\n</details>\n\nNow we can create constructor from config:\n\n\n```python\nmc = ModelConstructor.from_cfg(cfg)\nmc\n```\n<details open> <summary>output</summary>  \n    <pre>ModelConstructor\n      in_chans: 3, num_classes: 1000\n      expansion: 1, groups: 1, dw: False, div_groups: None\n      act_fn: ReLU, sa: False, se: False\n      stem sizes: [32, 32, 64], stride on 0\n      body sizes [64, 128, 256, 512]\n      layers: [2, 2, 2, 2]<pre>\n</details>\n\n\n\n## More modification.\n\nMain purpose of this module - fast and easy modify model.\nAnd here is the link to more modification to beat Imagenette leaderboard with add MaxBlurPool and modification to ResBlock [notebook](https://github.com/ayasyrev/imagenette_experiments/blob/master/ResnetTrick_create_model_fit.ipynb)  \n\nBut now lets create model as mxresnet50 from [fastai forums tread](https://forums.fast.ai/t/how-we-beat-the-5-epoch-imagewoof-leaderboard-score-some-new-techniques-to-consider)  \n\n\nLets create mxresnet constructor.\n\n\n```python\nmc = ModelConstructor(name='MxResNet')\n```\n\nThen lets modify stem.\n\n\n```python\nmc.stem_sizes = [3,32,64,64]\n```\n\nNow lets change activation function to Mish.\nHere is link to [forum discussion](https://forums.fast.ai/t/meet-mish-new-activation-function-possible-successor-to-relu)    \nWe'v got Mish is in model_constructor.activations, but from pytorch 1.9 take it from torch:\n\n\n```python\n# from model_constructor.activations import Mish\nfrom torch.nn import Mish\n```\n\n\n```python\nmc.act_fn = Mish\n```\n\n\n```python\nmc\n```\n<details open> <summary>output</summary>  \n    <pre>MxResNet\n      in_chans: 3, num_classes: 1000\n      expansion: 1, groups: 1, dw: False, div_groups: None\n      act_fn: Mish, sa: False, se: False\n      stem sizes: [3, 32, 64, 64], stride on 0\n      body sizes [64, 128, 256, 512]\n      layers: [2, 2, 2, 2]<pre>\n</details>\n\n\n\nHere is model:  \n\n\n```python\n\nmc()\n```\n<details> <summary>output</summary>  \n    <pre>MxResNet(\n      stem_sizes: [3, 32, 64, 64], act_fn: Mish\n      (stem): Sequential(\n        (conv_0): ConvBnAct(\n          (conv): Conv2d(3, 3, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): Mish(inplace=True)\n        )\n        (conv_1): ConvBnAct(\n          (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): Mish(inplace=True)\n        )\n        (conv_2): ConvBnAct(\n          (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): Mish(inplace=True)\n        )\n        (conv_3): ConvBnAct(\n          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): Mish(inplace=True)\n        )\n        (stem_pool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n      )\n      (body): Sequential(\n        (l_0): Sequential(\n          (bl_0): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): Mish(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): Mish(inplace=True)\n          )\n          (bl_1): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): Mish(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): Mish(inplace=True)\n          )\n        )\n        (l_1): Sequential(\n          (bl_0): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): Mish(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (id_conv): Sequential(\n              (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n              (id_conv): ConvBnAct(\n                (conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): Mish(inplace=True)\n          )\n          (bl_1): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): Mish(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): Mish(inplace=True)\n          )\n        )\n        (l_2): Sequential(\n          (bl_0): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): Mish(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (id_conv): Sequential(\n              (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n              (id_conv): ConvBnAct(\n                (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): Mish(inplace=True)\n          )\n          (bl_1): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): Mish(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): Mish(inplace=True)\n          )\n        )\n        (l_3): Sequential(\n          (bl_0): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): Mish(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (id_conv): Sequential(\n              (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n              (id_conv): ConvBnAct(\n                (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): Mish(inplace=True)\n          )\n          (bl_1): ResBlock(\n            (convs): Sequential(\n              (conv_0): ConvBnAct(\n                (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n                (act_fn): Mish(inplace=True)\n              )\n              (conv_1): ConvBnAct(\n                (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n                (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n              )\n            )\n            (act_fn): Mish(inplace=True)\n          )\n        )\n      )\n      (head): Sequential(\n        (pool): AdaptiveAvgPool2d(output_size=1)\n        (flat): Flatten(start_dim=1, end_dim=-1)\n        (fc): Linear(in_features=512, out_features=1000, bias=True)\n      )\n    )<pre>\n</details>\n\n\n\n## MXResNet50\n\nNow lets make MxResNet50\n\n\n```python\nmc.expansion = 4\nmc.layers = [3,4,6,3]\nmc.name = 'mxresnet50'\n```\n\nNow we have mxresnet50 constructor.  \nWe can inspect every parts of it.  \nAnd after call it we got model.\n\n\n```python\nmc\n```\n<details open> <summary>output</summary>  \n    <pre>mxresnet50\n      in_chans: 3, num_classes: 1000\n      expansion: 4, groups: 1, dw: False, div_groups: None\n      act_fn: Mish, sa: False, se: False\n      stem sizes: [3, 32, 64, 64], stride on 0\n      body sizes [64, 128, 256, 512]\n      layers: [3, 4, 6, 3]<pre>\n</details>\n\n\n\n\n```python\n\nmc.stem.conv_1\n```\n<details> <summary>output</summary>  \n    <pre>ConvBnAct(\n      (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      (act_fn): Mish(inplace=True)\n    )<pre>\n</details>\n\n\n\n\n```python\n\nmc.body.l_0.bl_0\n```\n<details> <summary>output</summary>  \n    <pre>ResBlock(\n      (convs): Sequential(\n        (conv_0): ConvBnAct(\n          (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): Mish(inplace=True)\n        )\n        (conv_1): ConvBnAct(\n          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): Mish(inplace=True)\n        )\n        (conv_2): ConvBnAct(\n          (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (id_conv): Sequential(\n        (id_conv): ConvBnAct(\n          (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (act_fn): Mish(inplace=True)\n    )<pre>\n</details>\n\n\n\nWe can get model direct way:\n\n\n```python\nmc = ModelConstructor(name=\"MxResNet\", act_fn=Mish, layers=[3,4,6,3], expansion=4, stem_sizes=[32,64,64])\nmodel = mc()\n```\n\nOr create with config:\n\n\n```python\nmc = ModelConstructor.from_cfg(\n    ModelCfg(name=\"MxResNet\", act_fn=Mish, layers=[3,4,6,3], expansion=4, stem_sizes=[32,64,64])\n)\nmodel = mc()\n```\n\n## YaResNet\n\nNow lets change Resblock to YaResBlock (Yet another ResNet, former NewResBlock) is in lib from version 0.1.0\n\n\n```python\nfrom model_constructor.yaresnet import YaResBlock\n```\n\n\n```python\nmc = ModelConstructor(name=\"YaResNet\")\nmc.block = YaResBlock\n```\n\nOr in one line:\n\n\n```python\nmc = ModelConstructor(name=\"YaResNet\", block=YaResBlock)\n```\n\nThat all. Now we have YaResNet constructor\n\n\n```python\n\nmc.print_cfg()\n```\n<details> <summary>output</summary>  \n    <pre>ModelConstructor(\n      name='YaResNet'\n      in_chans=3\n      num_classes=1000\n      block='YaResBlock'\n      conv_layer='ConvBnAct'\n      block_sizes=[64, 128, 256, 512]\n      layers=[2, 2, 2, 2]\n      norm='BatchNorm2d'\n      act_fn='ReLU'\n      pool=\"AvgPool2d {'kernel_size': 2, 'ceil_mode': True}\"\n      expansion=1\n      groups=1\n      bn_1st=True\n      zero_bn=True\n      stem_sizes=[32, 32, 64]\n      stem_pool=\"MaxPool2d {'kernel_size': 3, 'stride': 2, 'padding': 1}\"\n      init_cnn='init_cnn'\n      make_stem='make_stem'\n      make_layer='make_layer'\n      make_body='make_body'\n      make_head='make_head')\n    <pre>\n</details>\n\nLet see what we have.\n\n\n```python\n\nmc.body.l_1.bl_0\n```\n<details> <summary>output</summary>  \n    <pre>YaResBlock(\n      (reduce): AvgPool2d(kernel_size=2, stride=2, padding=0)\n      (convs): Sequential(\n        (conv_0): ConvBnAct(\n          (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n          (act_fn): ReLU(inplace=True)\n        )\n        (conv_1): ConvBnAct(\n          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (id_conv): ConvBnAct(\n        (conv): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n      )\n      (merge): ReLU(inplace=True)\n    )<pre>\n</details>\n\n\n\nLets create `Resnet34` like model constructor:\n\n\n```python\nclass YaResnet34(ModelConstructor):\n    block: type[nn.Module] = YaResBlock\n    layers: list[int] = [3, 4, 6, 3]\n```\n\n\n```python\nmc = YaResnet34()\nmc.print_cfg()\n```\n<details open> <summary>output</summary>  \n    <pre>YaResnet34(\n      in_chans=3\n      num_classes=1000\n      block='YaResBlock'\n      conv_layer='ConvBnAct'\n      block_sizes=[64, 128, 256, 512]\n      layers=[3, 4, 6, 3]\n      norm='BatchNorm2d'\n      act_fn='ReLU'\n      pool=\"AvgPool2d {'kernel_size': 2, 'ceil_mode': True}\"\n      expansion=1\n      groups=1\n      bn_1st=True\n      zero_bn=True\n      stem_sizes=[32, 32, 64]\n      stem_pool=\"MaxPool2d {'kernel_size': 3, 'stride': 2, 'padding': 1}\"\n      init_cnn='init_cnn'\n      make_stem='make_stem'\n      make_layer='make_layer'\n      make_body='make_body'\n      make_head='make_head')\n    <pre>\n</details>\n\nAnd `Resnet50` like model can be inherited from `YaResnet34`:\n\n\n```python\nclass YaResnet50(YaResnet34):\n    expansion = 4\n```\n\n\n```python\nmc = YaResnet50()\nmc\n```\n<details open> <summary>output</summary>  \n    <pre>YaResnet50\n      in_chans: 3, num_classes: 1000\n      expansion: 4, groups: 1, dw: False, div_groups: None\n      act_fn: ReLU, sa: False, se: False\n      stem sizes: [32, 32, 64], stride on 0\n      body sizes [64, 128, 256, 512]\n      layers: [3, 4, 6, 3]<pre>\n</details>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ayasyrev/model_constructor",
    "keywords": "pytorch models",
    "license": "apache2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "model-constructor",
    "package_url": "https://pypi.org/project/model-constructor/",
    "platform": null,
    "project_url": "https://pypi.org/project/model-constructor/",
    "project_urls": {
      "Homepage": "https://github.com/ayasyrev/model_constructor"
    },
    "release_url": "https://pypi.org/project/model-constructor/0.3.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Pytorch models constructor.",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16182821,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aeacc3978ac8a25599f645a9b8e131d1a1afa9df800eb41c6524829bd59bf376",
          "md5": "330ab3cc4bbfbdec8ac15f4e3c97dd97",
          "sha256": "44c19bf3c97dfbe4dbd91a1751548eb559f30df97409d77a048215a78ae05923"
        },
        "downloads": -1,
        "filename": "model_constructor-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "330ab3cc4bbfbdec8ac15f4e3c97dd97",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10497,
        "upload_time": "2020-01-12T16:19:29",
        "upload_time_iso_8601": "2020-01-12T16:19:29.720047Z",
        "url": "https://files.pythonhosted.org/packages/ae/ac/c3978ac8a25599f645a9b8e131d1a1afa9df800eb41c6524829bd59bf376/model_constructor-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fbd763472d56a95c92e2dcacb9df6e2b638e2b87ae53850eb032e028668b0b0",
          "md5": "9b96ea258abb1a237800bfe1752dfc21",
          "sha256": "a6213b6d97fe272e26930eea0504bd6df3f20ba17ecf91cacaac4e6d7329502a"
        },
        "downloads": -1,
        "filename": "model_constructor-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9b96ea258abb1a237800bfe1752dfc21",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9278,
        "upload_time": "2020-01-12T16:19:32",
        "upload_time_iso_8601": "2020-01-12T16:19:32.507497Z",
        "url": "https://files.pythonhosted.org/packages/0f/bd/763472d56a95c92e2dcacb9df6e2b638e2b87ae53850eb032e028668b0b0/model_constructor-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77f2805cf0caa761ea82849432822211c834ff59e564e1241d0d7cd91403553c",
          "md5": "25a611313af92dafaf08077860c44c3b",
          "sha256": "6e7e9e4d64a449a728e5016141847af643b578d32b0b0561b37fe2d89cbd76dd"
        },
        "downloads": -1,
        "filename": "model_constructor-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25a611313af92dafaf08077860c44c3b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11987,
        "upload_time": "2020-01-16T11:43:14",
        "upload_time_iso_8601": "2020-01-16T11:43:14.968359Z",
        "url": "https://files.pythonhosted.org/packages/77/f2/805cf0caa761ea82849432822211c834ff59e564e1241d0d7cd91403553c/model_constructor-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "542d6745e059a66251efd39a9c2d2bfacf6e57c889f49f8cc9f0e95201a72487",
          "md5": "85aa7e2de5daf577324708dd752a1d28",
          "sha256": "2240d7bece96fe30b69b4e39629c6a6a2fff83bafc3d13bbee2399e6b4f3b27b"
        },
        "downloads": -1,
        "filename": "model_constructor-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "85aa7e2de5daf577324708dd752a1d28",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6706,
        "upload_time": "2020-01-16T11:43:16",
        "upload_time_iso_8601": "2020-01-16T11:43:16.585098Z",
        "url": "https://files.pythonhosted.org/packages/54/2d/6745e059a66251efd39a9c2d2bfacf6e57c889f49f8cc9f0e95201a72487/model_constructor-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6577536378a91e95a3ee6fe0ca5f51c4b2fcea4536be1bf6a424c548bfd84c5",
          "md5": "17df58637e49dd26afe4065a47c80540",
          "sha256": "91a8a6d3ad49f588d845b1de126c9e69dae33d7ddc8559aa488dc21c3e686ab1"
        },
        "downloads": -1,
        "filename": "model_constructor-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17df58637e49dd26afe4065a47c80540",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13371,
        "upload_time": "2020-01-20T14:20:29",
        "upload_time_iso_8601": "2020-01-20T14:20:29.512057Z",
        "url": "https://files.pythonhosted.org/packages/d6/57/7536378a91e95a3ee6fe0ca5f51c4b2fcea4536be1bf6a424c548bfd84c5/model_constructor-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9273999fae447231618529a43a722edc324ca07d7eb81bef82acd613e999985e",
          "md5": "86a8e16eeeb8bfa4bbe3ff4a77fec847",
          "sha256": "636e9b4b6493d7b552274dd1d34c20eb82d60a7f35faef37a69e2c4d7124944c"
        },
        "downloads": -1,
        "filename": "model_constructor-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "86a8e16eeeb8bfa4bbe3ff4a77fec847",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7700,
        "upload_time": "2020-01-20T14:20:31",
        "upload_time_iso_8601": "2020-01-20T14:20:31.133221Z",
        "url": "https://files.pythonhosted.org/packages/92/73/999fae447231618529a43a722edc324ca07d7eb81bef82acd613e999985e/model_constructor-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b82a4ae92e9b56e5cea438cb967b63a20e54760f9758ff134514dbb307cf834",
          "md5": "139e51c6419156c4e056bb6f41a14315",
          "sha256": "5a0323dc713b99469a7da25c09b98179374cf5dd243269a975535f4a1517794a"
        },
        "downloads": -1,
        "filename": "model_constructor-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "139e51c6419156c4e056bb6f41a14315",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21650,
        "upload_time": "2020-03-05T15:40:40",
        "upload_time_iso_8601": "2020-03-05T15:40:40.531159Z",
        "url": "https://files.pythonhosted.org/packages/7b/82/a4ae92e9b56e5cea438cb967b63a20e54760f9758ff134514dbb307cf834/model_constructor-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "491497410e9366b59a5bf972dddbaafa108f2205a19f2a1273d37b3ec4f0c71a",
          "md5": "146f8b982c5da52a1edafcace29e87aa",
          "sha256": "655da100c1f997d57f60aacdacd935408927d9d0a6ec9df008087610e2000213"
        },
        "downloads": -1,
        "filename": "model_constructor-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "146f8b982c5da52a1edafcace29e87aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17345,
        "upload_time": "2020-03-05T15:40:41",
        "upload_time_iso_8601": "2020-03-05T15:40:41.980562Z",
        "url": "https://files.pythonhosted.org/packages/49/14/97410e9366b59a5bf972dddbaafa108f2205a19f2a1273d37b3ec4f0c71a/model_constructor-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5834bf8b67e70b7bdb9839502e1c46239064df76007103b2bb400ae0868ce62",
          "md5": "47f037d1c27662fab87076c3d14a95f0",
          "sha256": "7135a7ae8e1c14f0a1cf1185907bb69b73567d36bafc3b9bcbfcb911847f8dfe"
        },
        "downloads": -1,
        "filename": "model_constructor-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47f037d1c27662fab87076c3d14a95f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26887,
        "upload_time": "2022-12-22T08:13:06",
        "upload_time_iso_8601": "2022-12-22T08:13:06.011034Z",
        "url": "https://files.pythonhosted.org/packages/f5/83/4bf8b67e70b7bdb9839502e1c46239064df76007103b2bb400ae0868ce62/model_constructor-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3c2fb12865be4c00cd34d1f42146cd59ed2b874405cc29617c1e4d2112ece96",
          "md5": "fbba86867f8149cb294c0bb6e9e51d1a",
          "sha256": "375f7647d3ba8895fdc1556a9df9ccd23175ea9a95b304b87d344f7557ff73fd"
        },
        "downloads": -1,
        "filename": "model_constructor-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fbba86867f8149cb294c0bb6e9e51d1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29515,
        "upload_time": "2022-12-22T08:13:08",
        "upload_time_iso_8601": "2022-12-22T08:13:08.399672Z",
        "url": "https://files.pythonhosted.org/packages/d3/c2/fb12865be4c00cd34d1f42146cd59ed2b874405cc29617c1e4d2112ece96/model_constructor-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5834bf8b67e70b7bdb9839502e1c46239064df76007103b2bb400ae0868ce62",
        "md5": "47f037d1c27662fab87076c3d14a95f0",
        "sha256": "7135a7ae8e1c14f0a1cf1185907bb69b73567d36bafc3b9bcbfcb911847f8dfe"
      },
      "downloads": -1,
      "filename": "model_constructor-0.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "47f037d1c27662fab87076c3d14a95f0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 26887,
      "upload_time": "2022-12-22T08:13:06",
      "upload_time_iso_8601": "2022-12-22T08:13:06.011034Z",
      "url": "https://files.pythonhosted.org/packages/f5/83/4bf8b67e70b7bdb9839502e1c46239064df76007103b2bb400ae0868ce62/model_constructor-0.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3c2fb12865be4c00cd34d1f42146cd59ed2b874405cc29617c1e4d2112ece96",
        "md5": "fbba86867f8149cb294c0bb6e9e51d1a",
        "sha256": "375f7647d3ba8895fdc1556a9df9ccd23175ea9a95b304b87d344f7557ff73fd"
      },
      "downloads": -1,
      "filename": "model_constructor-0.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "fbba86867f8149cb294c0bb6e9e51d1a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 29515,
      "upload_time": "2022-12-22T08:13:08",
      "upload_time_iso_8601": "2022-12-22T08:13:08.399672Z",
      "url": "https://files.pythonhosted.org/packages/d3/c2/fb12865be4c00cd34d1f42146cd59ed2b874405cc29617c1e4d2112ece96/model_constructor-0.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}