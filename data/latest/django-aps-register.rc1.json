{
  "info": {
    "author": "Jarek Glowacki, Stas Kaledin, John Cass, Dillon",
    "author_email": "jarekwg@gmail.com, staskaledin@gmail.com, john.cass77@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "Django APScheduler Register\r\n===========================\r\n\r\n[![PyPI](https://img.shields.io/pypi/v/django-apscheduler)](https://pypi.org/project/django-aps-register/)\r\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/django-apscheduler)](https://pypi.org/project/django-aps-register/)\r\n[![PyPI - Django Version](https://img.shields.io/pypi/djversions/django-apscheduler)](https://pypi.org/project/django-aps-register/)\r\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/jcass77/django-apscheduler/Python%20package)](https://github.com/jcass77/django-apscheduler/actions?query=workflow%3A%22Python+package%22)\r\n[![Codecov](https://img.shields.io/codecov/c/github/jcass77/django-apscheduler?token=upz6ukIqMN)](https://codecov.io/gh/jcass77/django-apscheduler)\r\n[![Code style:black](https://img.shields.io/badge/code%20style-black-black)](https://pypi.org/project/black)\r\n\r\n[APScheduler](https://github.com/agronholm/apscheduler) register for [Django](https://github.com/django/django).\r\n\r\n\r\nInstallation\r\n------------\r\n\r\n```python\r\npip install django-aps-register\r\n```\r\n\r\n\r\nQuick start\r\n-----------\r\n\r\n- Add ``django_apscheduler`` to your ``INSTALLED_APPS`` setting like this:\r\n```python\r\nINSTALLED_APPS = (\r\n    # ...\r\n    \"django_apscheduler\",\r\n)\r\n```\r\n\r\n- django-apscheduler comes with sensible configuration defaults out of the box. The defaults can be overridden by adding\r\n  the following settings to your Django `settings.py` file:\r\n```python\r\n# Format string for displaying run time timestamps in the Django admin site. The default\r\n# just adds seconds to the standard Django format, which is useful for displaying the timestamps\r\n# for jobs that are scheduled to run on intervals of less than one minute.\r\n# \r\n# See https://docs.djangoproject.com/en/dev/ref/settings/#datetime-format for format string\r\n# syntax details.\r\nAPSCHEDULER_DATETIME_FORMAT = \"N j, Y, f:s a\"\r\n\r\n# Maximum run time allowed for jobs that are triggered manually via the Django admin site, which\r\n# prevents admin site HTTP requests from timing out.\r\n# \r\n# Longer running jobs should probably be handed over to a background task processing library\r\n# that supports multiple background worker processes instead (e.g. Dramatiq, Celery, Django-RQ,\r\n# etc. See: https://djangopackages.org/grids/g/workers-queues-tasks/ for popular options).\r\nAPSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds\r\n```\r\n\r\n- Run `python manage.py migrate` to create the django_apscheduler models.\r\n\r\n- Add a [custom Django management command](https://docs.djangoproject.com/en/dev/howto/custom-management-commands/) to your project\r\n  that schedules the APScheduler jobs and starts the scheduler:\r\n  \r\n```python\r\n# runapscheduler.py\r\nimport logging\r\n\r\nfrom django.conf import settings\r\n\r\nfrom apscheduler.schedulers.blocking import BlockingScheduler\r\nfrom apscheduler.triggers.cron import CronTrigger\r\nfrom django.core.management.base import BaseCommand\r\nfrom django_apscheduler.jobstores import DjangoJobStore\r\nfrom django_apscheduler.models import DjangoJobExecution\r\nfrom django_apscheduler import util\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\n\r\ndef my_job():\r\n  # Your job processing logic here...\r\n  pass\r\n\r\n\r\n# The `close_old_connections` decorator ensures that database connections, that have become\r\n# unusable or are obsolete, are closed before and after your job has run. You should use it\r\n# to wrap any jobs that you schedule that access the Django database in any way. \r\n@util.close_old_connections\r\ndef delete_old_job_executions(max_age=604_800):\r\n  \"\"\"\r\n  This job deletes APScheduler job execution entries older than `max_age` from the database.\r\n  It helps to prevent the database from filling up with old historical records that are no\r\n  longer useful.\r\n  \r\n  :param max_age: The maximum length of time to retain historical job execution records.\r\n                  Defaults to 7 days.\r\n  \"\"\"\r\n  DjangoJobExecution.objects.delete_old_job_executions(max_age)\r\n\r\n\r\nclass Command(BaseCommand):\r\n  help = \"Runs APScheduler.\"\r\n\r\n  def handle(self, *args, **options):\r\n    scheduler = BlockingScheduler(timezone=settings.TIME_ZONE)\r\n    scheduler.add_jobstore(DjangoJobStore(), \"default\")\r\n\r\n    scheduler.add_job(\r\n      my_job,\r\n      trigger=CronTrigger(second=\"*/10\"),  # Every 10 seconds\r\n      id=\"my_job\",  # The `id` assigned to each job MUST be unique\r\n      max_instances=1,\r\n      replace_existing=True,\r\n    )\r\n    logger.info(\"Added job 'my_job'.\")\r\n\r\n    scheduler.add_job(\r\n      delete_old_job_executions,\r\n      trigger=CronTrigger(\r\n        day_of_week=\"mon\", hour=\"00\", minute=\"00\"\r\n      ),  # Midnight on Monday, before start of the next work week.\r\n      id=\"delete_old_job_executions\",\r\n      max_instances=1,\r\n      replace_existing=True,\r\n    )\r\n    logger.info(\r\n      \"Added weekly job: 'delete_old_job_executions'.\"\r\n    )\r\n\r\n    try:\r\n      logger.info(\"Starting scheduler...\")\r\n      scheduler.start()\r\n    except KeyboardInterrupt:\r\n      logger.info(\"Stopping scheduler...\")\r\n      scheduler.shutdown()\r\n      logger.info(\"Scheduler shut down successfully!\")\r\n\r\n```\r\n\r\n- The management command defined above should be invoked via `./manage.py runapscheduler` whenever the webserver serving\r\n  your Django application is started. The details of how and where this should be done is implementation specific, and\r\n  depends on which webserver you are using and how you are deploying your application to production. For most people\r\n  this should involve configuring a [supervisor](http://supervisord.org) process of sorts.\r\n\r\n- Register any APScheduler jobs as you would normally. Note that if you haven't set `DjangoJobStore` as the `'default'`\r\n  job store, then you will need to include `jobstore='djangojobstore'` in your `scheduler.add_job()` calls.\r\n\r\n\r\nAdvanced usage\r\n--------------\r\n\r\ndjango-apscheduler assumes that you are already familiar with APScheduler and its proper use. If not, then please head\r\nover to the project page and have a look through\r\nthe [APScheduler documentation](https://apscheduler.readthedocs.io/en/latest/index.html).\r\n\r\nIt is possible to make use\r\nof [different types of schedulers](https://apscheduler.readthedocs.io/en/latest/userguide.html#choosing-the-right-scheduler-job-store-s-executor-s-and-trigger-s)\r\ndepending on your environment and use case. If you would prefer running a `BackgroundScheduler` instead of using a\r\n`BlockingScheduler`, then you should be aware that using APScheduler with uWSGI requires some additional\r\n[configuration steps](https://apscheduler.readthedocs.io/en/latest/faq.html#how-can-i-use-apscheduler-with-uwsgi) in\r\norder to re-enable threading support.\r\n\r\n\r\nSupported databases\r\n-------------------\r\n\r\nPlease take note of the list of databases that\r\nare [officially supported by Django](https://docs.djangoproject.com/en/dev/ref/databases/#databases). django-apscheduler\r\nprobably won't work with unsupported databases like Microsoft SQL Server, MongoDB, and the like.\r\n\r\n\r\nDatabase connections and timeouts\r\n---------------------------------\r\n\r\ndjango-apscheduler is dependent on the standard Django\r\ndatabase [configuration settings](https://docs.djangoproject.com/en/dev/ref/databases/#general-notes). These settings,\r\nin combination with how your database server has been configured, determine how connection management will be performed\r\nfor your specific deployment.\r\n\r\nThe `close_old_connections` decorator should be applied to APScheduler jobs that require database access. Doing so\r\nensures that Django's [CONN_MAX_AGE](https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-CONN_MAX_AGE)\r\nconfiguration setting is enforced before and after your job is run. This mirrors the standard Django functionality of\r\ndoing the same before and after handling each HTTP request.\r\n\r\nIf you still encounter any kind of 'lost database connection' errors then it probably means that:\r\n\r\n- Your database connections timed out in the middle of executing a job. You should probably consider incorporating a\r\n  connection pooler as part of your deployment for more robust database connection management\r\n  (e.g. [pgbouncer](https://www.pgbouncer.org) for PostgreSQL, or the equivalent for other DB platforms).\r\n- Your database server has crashed / been restarted.\r\n  Django [will not reconnect automatically](https://code.djangoproject.com/ticket/24810)\r\n  and you need to re-start django-apscheduler as well.\r\n\r\nCommon footguns\r\n---------------\r\n\r\nUnless you have a very specific set of requirements, and have intimate knowledge of the inner workings of APScheduler,\r\nyou really shouldn't be using `BackgroundScheduler`. Doing so can lead to all sorts of temptations like:\r\n\r\n* **Firing up a scheduler inside of a Django view:** this will most likely cause more than one scheduler to run\r\n  concurrently and lead to jobs running multiple times (see the above introduction to this README for a more thorough\r\n  treatment of the subject).\r\n* **Bootstrapping a scheduler somewhere else inside your Django application**: it feels like this should solve the\r\n  problem mentioned above and guarantee that only one scheduler is running. The downside is that you have just delegated\r\n  the management of all of your background task processing threads to whatever webserver you are using (Gunicorn, uWSGI,\r\n  etc.). The webserver will probably kill any long-running threads (your jobs) with extreme prejudice (thinking that\r\n  they are caused by misbehaving HTTP requests).\r\n\r\nRelying on `BlockingScheduler` forces you to run APScheduler in its own dedicated process that is not handled or\r\nmonitored by the webserver. The example code provided in `runapscheduler.py` above is a good starting point.\r\n\r\n\r\nProject resources\r\n-----------------\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/jcass77/django-apscheduler",
    "keywords": "django apscheduler django-apscheduler register",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-aps-register",
    "package_url": "https://pypi.org/project/django-aps-register/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-aps-register/",
    "project_urls": {
      "Homepage": "http://github.com/jcass77/django-apscheduler"
    },
    "release_url": "https://pypi.org/project/django-aps-register/0.1.0/",
    "requires_dist": [
      "django (>=3.2)",
      "apscheduler (<4.0,>=3.2)"
    ],
    "requires_python": "",
    "summary": "APScheduler Register for Django",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17298642,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f159f161266d9bef2556c1d833afe036a8b55706446741f7fbf38e6076ab9a4",
          "md5": "d89c74e1144bd8a1dd381182a5c595d8",
          "sha256": "c32f582f8a5b6df65e7331f8edf31aa3db4ff577059384476d11d414de60add3"
        },
        "downloads": -1,
        "filename": "django_aps_register-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d89c74e1144bd8a1dd381182a5c595d8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24770,
        "upload_time": "2023-03-15T03:12:49",
        "upload_time_iso_8601": "2023-03-15T03:12:49.954612Z",
        "url": "https://files.pythonhosted.org/packages/0f/15/9f161266d9bef2556c1d833afe036a8b55706446741f7fbf38e6076ab9a4/django_aps_register-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d970844e3ac807b3a172b432068c7e2be4245ce6567a85c2e7fb76f1a7ae3d45",
          "md5": "5dff7c4e8855d778f62360c343d27159",
          "sha256": "30c4ce38d6dedb8d2a4002e1609fd11c8725bc249870b376b3faab16631e221c"
        },
        "downloads": -1,
        "filename": "django-aps-register-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5dff7c4e8855d778f62360c343d27159",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 466754,
        "upload_time": "2023-03-15T03:12:53",
        "upload_time_iso_8601": "2023-03-15T03:12:53.129073Z",
        "url": "https://files.pythonhosted.org/packages/d9/70/844e3ac807b3a172b432068c7e2be4245ce6567a85c2e7fb76f1a7ae3d45/django-aps-register-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0f159f161266d9bef2556c1d833afe036a8b55706446741f7fbf38e6076ab9a4",
        "md5": "d89c74e1144bd8a1dd381182a5c595d8",
        "sha256": "c32f582f8a5b6df65e7331f8edf31aa3db4ff577059384476d11d414de60add3"
      },
      "downloads": -1,
      "filename": "django_aps_register-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d89c74e1144bd8a1dd381182a5c595d8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24770,
      "upload_time": "2023-03-15T03:12:49",
      "upload_time_iso_8601": "2023-03-15T03:12:49.954612Z",
      "url": "https://files.pythonhosted.org/packages/0f/15/9f161266d9bef2556c1d833afe036a8b55706446741f7fbf38e6076ab9a4/django_aps_register-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d970844e3ac807b3a172b432068c7e2be4245ce6567a85c2e7fb76f1a7ae3d45",
        "md5": "5dff7c4e8855d778f62360c343d27159",
        "sha256": "30c4ce38d6dedb8d2a4002e1609fd11c8725bc249870b376b3faab16631e221c"
      },
      "downloads": -1,
      "filename": "django-aps-register-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5dff7c4e8855d778f62360c343d27159",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 466754,
      "upload_time": "2023-03-15T03:12:53",
      "upload_time_iso_8601": "2023-03-15T03:12:53.129073Z",
      "url": "https://files.pythonhosted.org/packages/d9/70/844e3ac807b3a172b432068c7e2be4245ce6567a85c2e7fb76f1a7ae3d45/django-aps-register-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}