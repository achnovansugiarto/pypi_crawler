{
  "info": {
    "author": "Erik Aker",
    "author_email": "eraker@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Other Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content :: CGI Tools/Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# pelecanus ![](https://travis-ci.org/pellagic-puffbomb/pelecanus.svg?branch=master) [![Coverage Status](https://coveralls.io/repos/pellagic-puffbomb/pelecanus/badge.png?branch=develop)](https://coveralls.io/r/pellagic-puffbomb/pelecanus?branch=master)\n\nA small Python3 application for navigating and editing nested dictionaries, which typically come from JSON BLOBs, named 'pelecanus' after Pelecanus occidentalis, the [brown Pelican of California and the Eastern Pacific](http://www.nps.gov/chis/naturescience/brown-pelican.htm), which is a wonderful bird, but also named such because I got tired of writing \"NestedJson\".\n\nThis application has been built-for Python3+. It has no external dependencies.\n\n## Project Goals\n\nOften, it's necessary to explore a JSON object without knowing precisely where things are (in the case of Hypermedia, for example). By creating a recursive data structure, we can facilitate such tasks as retrieving key-value pairs, iterating through the data structure, and searching for elements in the data structure.\n\n## How to Use\n\nTo install for Python3.3+, simply do:\n\n```\n$ pip install pelecanus\n```\n\n`pelecanus` offers `PelicanJson` objects, which are nested dictionaries created from valid JSON objects. `PelicanJson` objects provide a few methods to make it easier to navigate and edit nested JSON objects.\n\nTo create a PelicanJson object, you can pass the constructor a Python dictionary created from a JSON dump (or a simple Python dictionary that could be a valid JSON object):\n\n```python\n>>> content = {'links': {'alternate': [{'href': 'somelink'}]}}\n>>> from pelecanus import PelicanJson\n>>> pelican = PelicanJson(content)\n```\n\n#### Enumerate\n\nOnce you have a `PelicanJson` object, probably one of the most useful things to do is to find all the nested paths and the values located at those paths. The `enumerate` method has been provided for this purpose:\n\n```python\n>>> for item in pelican.enumerate():\n...   print(item)\n(['links', 'alternate', 0, 'href'], 'somelink')\n...\n```\n\nIn JSON, only strings may be used as keys [(see JSON spec)](http://json.org/), so the integers that appear in the nested path represent list indices. In this case, `['links', alternate', 0, 'href']` actually represents:\n\n1. A dictionary with a key `links`, which points to...\n2. Another dictionary which contains a key 'alternate', which contains...\n3. A list, the first item of which...\n4. Is a dictionary containing the key `href`.\n\n`enumerate`, like most methods in a `PelicanJson` object, returns a generator. If you want just the paths and not their associated values, use the `paths` method:\n\n```python\n>>> for item in pelican.paths():\n...   print(item)\n['links', 'alternate', 0, 'href']\n```\n\n#### Getting and Setting Values\n\nYou can retrieve the value from a nested path using `get_nested_value`:\n\n```python\n>>> pelican.get_nested_value(['links', 'alternate', 0, 'href'])\n'somelink'\n```\n\nIf you would like to have a default returned instead of an exception, you use `safe_get_nested_value:\n\n``` python\n>>> pelican.safe_get_nested_value(['broken', 'route', 0])\nNone\n>>> pelican.safe_get_nested_value(['broken', 'route', 0], default=1)\n1\n```\n\nIf you want to change a nested value, you can use the `set_nested_value` method:\n\n```python\n>>> pelican.set_nested_value(['links', 'alternate', 0, 'href'], 'newvalue')\n>>> pelican.get_nested_value(['links', 'alternate', 0, 'href'])\n'newvalue'\n```\n\nIf you attempt to set a nested value for a path that does not exist, an exception will be raised:\n\n```python\n>>> pelican.set_nested_value(['links', 'BADKEY'], 'newvalue')\nTraceback (most recent call last):\n...\nKeyError: 'BADKEY'\n```\n\nHowever, you can create a new path and set it equal to a new value if you pass in `force=True` when you call `set_nested_value`:\n\n```python\n>>> pelican.set_nested_value(['links', 'BADKEY'], 'newvalue', force=True)\n>>> pelican.get_nested_value(['links', 'BADKEY'])\n'newvalue'\n```\n\nBecause integers will *always* be interpreted as list-indices, this works for creating ad-hoc lists or adding elements to lists, but be advised: when setting a new path with `force=True`, a `PelicanJson` object will back-fill any missing list indices with `None` (simliar to [assigning to a non-existent array index in Ruby](http://www.ruby-doc.org/core-2.1.2/Array.html#method-i-5B-5D-3D)):\n\n```python\n>>> new_path = ['links', 'NewKey', 4, 'NewNestedKey']\n>>> pelican.set_nested_value(new_path, 'LIST Example', force=True)\n>>> pelican.get_nested_value(new_path)\n'LIST EXAMPLE'\n>>> pelican.get_nested_value(['links', 'NewKey'])\n[None, None, None, None, {'NestedKey': 'LIST EXAMPLE'}]\n```\n\nIn this example, the `PelicanJson` object found the integer and realized this must be a list index. However, the list was missing, so it created the list and then created all of the items at indices *before* the missing index, at which point it inserted the missing item, a new object with the key-value pair of `NewNestedKey` and `LIST EXAMPLE`. If unexpected, this behavior could be kind of annoying, but the goal is to *force* the path into existence and expected path is now present.\n\n\n#### Keys, Values, Items, etc.\n\nA `PelicanJson` object is a modified version of a Python dictionary, so you can use all of the normal dictionary methods, but it will mostly return nested results (which means you will often get duplicate `keys`). The length of the object too will be based on all the nested keys present:\n\n```python\n>>> list(pelican.keys())\n['links', 'attributes', 'href']\n>>> len(pelican)\n3\n```\n\nYou can get *normal* dict behavior with `keys` if you tell it you want the `flat` keys:\n\n```python\n>>> list(pelican.keys(flat=True))\n['links']\n```\n\n`values` is only going to return values that exist at endpoints, which are the inside-most points of all nested objects, leaves in the tree, in other words:\n\n```python\n>>> list(pelican.values())\n['somelink']\n```\n\nWhile `items` attempts to do double-duty, returning each key in the tree and its corresponding value:\n\n```python\n>>> list(pelican.items())\n[('links', <PelicanJson: {'attributes': [<PelicanJson: {'href': 'somelink'}>]}>), ('attributes', [<PelicanJson: {'href': 'somelink'}>]), ('href', 'somelink')]\n```\n\nYou can also use `in` to see if a key is somewhere inside the dictionary (even if it's a nested key):\n\n```python\n>>> 'attributes' in pelican\nTrue\n```\n\n\n#### Turning it back into a plain dictionary or JSON\n\nOther useful methods include `convert` and `serialize` for turning the object back into a plain Python dictionary and for returning a JSON dump, respectively:\n\n```python\n>>> pelican.convert() == content\nTrue\n>>> pelican.serialize()\n'{\"links\": {\"attributes\": [{\"href\": \"somelink\"}]}}'\n>>> import json\n>>> json.loads(pelican.serialize()) == content\nTrue\n```\n\n\n#### Searching Keys and Values\n\nYou can also use the methods `search_key` and `search_value` in order to find all the paths that lead to keys or values you are searching for (data comes from the [Open Library API](https://openlibrary.org/developers/api)).\n\n```python\n>>> book = {'ISBN:9780804720687': {'preview': 'noview', 'bib_key': 'ISBN:9780804720687', 'preview_url': 'https://openlibrary.org/books/OL7928788M/Between_Pacific_Tides', 'info_url': 'https://openlibrary.org/books/OL7928788M/Between_Pacific_Tides', 'thumbnail_url': 'https://covers.openlibrary.org/b/id/577352-S.jpg'}}\n>>> pelican = PelicanJson(book)\n>>> for path in pelican.search_key('preview'):\n...   print(path)\n['ISBN:9780804720687', 'preview']\n>>> for path in pelican.search_value('https://covers.openlibrary.org/b/id/577352-S.jpg'):\n...  print(path)\n['ISBN:9780804720687', 'thumbnail_url']\n```\n\nIn addition, `pluck` is for retrieving the whole object that contains a particular key-value pair:\n\n```python\n>>> list(pelican.pluck('preview', 'noview'))\n[<PelicanJson: {'preview': 'noview', 'thumbnail_url': 'https://covers.openlibrary.org/b/id/577352-S.jpg', 'bib_key': 'ISBN:9780804720687', 'preview_url': 'https://openlibrary.org/books/OL7928788M/Between_Pacific_Tides', 'info_url': 'https://openlibrary.org/books/OL7928788M/Between_Pacific_Tides'}>]\n```\n\n#### Find and Replace\n\nFinally, there is also a `find_and_replace` method which searches for a particular value and replaces it with a passed-in replacement value:\n\n```python\n>>> for path in pelican.search_value('https://covers.openlibrary.org/b/id/577352-S.jpg'):\n...  print(path)\n['ISBN:9780804720687', 'thumbnail_url']\n>>> pelican.find_and_replace('https://covers.openlibrary.org/b/id/577352-S.jpg', 'SOME NEW URL')\n>>> pelican.get_nested_value(['ISBN:9780804720687', 'thumbnail_url'])\n'SOME NEW URL'\n```\n\nThis can, of course, be dangerous, so use with caution.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/erewok/pelecanus",
    "keywords": "",
    "license": "GNU General Public License v2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pelecanus",
    "package_url": "https://pypi.org/project/pelecanus/",
    "platform": null,
    "project_url": "https://pypi.org/project/pelecanus/",
    "project_urls": {
      "Documentation": "https://pelecanus.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/erewok/pelecanus",
      "Repository": "https://github.com/erewok/pelecanus"
    },
    "release_url": "https://pypi.org/project/pelecanus/0.5.3/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "Python3 application for navigating and editing nested JSON",
    "version": "0.5.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14782342,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0768caa054ae039180702a75100c84cbddbd76b50b06991b912c953e46f451ae",
          "md5": "31631363df2481d629b12832d0cf6efc",
          "sha256": "d4abf54f26e35331448b782dc15fc812c0e400f3e3798773879f0f0b10126e9b"
        },
        "downloads": -1,
        "filename": "pelecanus-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "31631363df2481d629b12832d0cf6efc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6917,
        "upload_time": "2014-08-28T18:35:08",
        "upload_time_iso_8601": "2014-08-28T18:35:08.750262Z",
        "url": "https://files.pythonhosted.org/packages/07/68/caa054ae039180702a75100c84cbddbd76b50b06991b912c953e46f451ae/pelecanus-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bd2feae078b7fa1f46851e7ee100e1adf52f19976a55a3af0d139a0cb7c2bf1",
          "md5": "46aaf0f2fc789c0aa1ef3fc67afd1693",
          "sha256": "a826294147106d6d9cc72c507aea9107e3e0346054de3a95338091f1471a6b2d"
        },
        "downloads": -1,
        "filename": "pelecanus-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "46aaf0f2fc789c0aa1ef3fc67afd1693",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9428,
        "upload_time": "2014-09-03T22:13:26",
        "upload_time_iso_8601": "2014-09-03T22:13:26.260548Z",
        "url": "https://files.pythonhosted.org/packages/4b/d2/feae078b7fa1f46851e7ee100e1adf52f19976a55a3af0d139a0cb7c2bf1/pelecanus-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3615b845a38d92d50696d8138adce0ab8c20aba1cd05b804ee4007bdd314569",
          "md5": "6b01a930340150ff4cd480c00ad20394",
          "sha256": "5dd42781ef234ec935165b086716971319062a2e1ca88dc498934f316b46af1e"
        },
        "downloads": -1,
        "filename": "pelecanus-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6b01a930340150ff4cd480c00ad20394",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8964,
        "upload_time": "2014-09-03T22:40:56",
        "upload_time_iso_8601": "2014-09-03T22:40:56.030571Z",
        "url": "https://files.pythonhosted.org/packages/b3/61/5b845a38d92d50696d8138adce0ab8c20aba1cd05b804ee4007bdd314569/pelecanus-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9805499d3206467550b92fe63cf2b25a46cab01e5a1e7874fafff1214a93209",
          "md5": "d6b68602129c5293839ad3b8b226a795",
          "sha256": "3d81660406f7b5cfe5a7d5048de2426364d890640bdefdef6491bb16b0e6c96a"
        },
        "downloads": -1,
        "filename": "pelecanus-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d6b68602129c5293839ad3b8b226a795",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8939,
        "upload_time": "2014-09-10T16:44:55",
        "upload_time_iso_8601": "2014-09-10T16:44:55.622526Z",
        "url": "https://files.pythonhosted.org/packages/a9/80/5499d3206467550b92fe63cf2b25a46cab01e5a1e7874fafff1214a93209/pelecanus-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8255b4503497dd8fe2c30086354f4d911250e4fbfdbcd3ddb08eed63ffe30186",
          "md5": "d76e9ac707d64c5ffc1341f76cf896b9",
          "sha256": "104bff28d2ff00c096bb979830371e4eadc2afda7d12941d199bb22ead971ecd"
        },
        "downloads": -1,
        "filename": "pelecanus-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d76e9ac707d64c5ffc1341f76cf896b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12980,
        "upload_time": "2014-09-15T18:16:47",
        "upload_time_iso_8601": "2014-09-15T18:16:47.442199Z",
        "url": "https://files.pythonhosted.org/packages/82/55/b4503497dd8fe2c30086354f4d911250e4fbfdbcd3ddb08eed63ffe30186/pelecanus-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8b5aea8e5d745c1c021d99f786c54ffb7dc43e09625ade39ad215bb08d50109",
          "md5": "9e5291109e2b29768e959c08976e0501",
          "sha256": "0fddef6f7bfa98f6d1de334d5c8b1e7cb2036b3b37de48248a25f7e05bcc51ef"
        },
        "downloads": -1,
        "filename": "pelecanus-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9e5291109e2b29768e959c08976e0501",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13328,
        "upload_time": "2014-09-15T22:28:43",
        "upload_time_iso_8601": "2014-09-15T22:28:43.080969Z",
        "url": "https://files.pythonhosted.org/packages/d8/b5/aea8e5d745c1c021d99f786c54ffb7dc43e09625ade39ad215bb08d50109/pelecanus-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5714ff1617f4caa99fa9daff1cd469908fa2a53602ae397803f56234d60d2ac",
          "md5": "8476fa78e360d887bda2e017318a5003",
          "sha256": "71e8f3b2cd28fa8ca093277e2fb44538f4a0c7109f3e9b49e3562b2883c8d899"
        },
        "downloads": -1,
        "filename": "pelecanus-0.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8476fa78e360d887bda2e017318a5003",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10557,
        "upload_time": "2017-05-24T05:02:39",
        "upload_time_iso_8601": "2017-05-24T05:02:39.225473Z",
        "url": "https://files.pythonhosted.org/packages/f5/71/4ff1617f4caa99fa9daff1cd469908fa2a53602ae397803f56234d60d2ac/pelecanus-0.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ddf9a70f416cc7dd04ef8a06fb704733f1e48418f7c3fb290f0bc9c612b48bb5",
          "md5": "80f90c9d25f021c9d5d6b4e45c1a897f",
          "sha256": "be369ae9d9c178a312b8099769d69c4f5b483dac55dfc3b6683a0451812d8c5d"
        },
        "downloads": -1,
        "filename": "pelecanus-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "80f90c9d25f021c9d5d6b4e45c1a897f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15620,
        "upload_time": "2017-05-24T05:02:40",
        "upload_time_iso_8601": "2017-05-24T05:02:40.284507Z",
        "url": "https://files.pythonhosted.org/packages/dd/f9/a70f416cc7dd04ef8a06fb704733f1e48418f7c3fb290f0bc9c612b48bb5/pelecanus-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8c887caea232dc03d8d98157f0d8b566936f2f143780a40185aa2a1b27a9fdb",
          "md5": "a629eb24beb79b2a58c3efe80d7cd19d",
          "sha256": "9f71cc6cb35b7a7825b6d853c25bb6fa25debf22180854f6b6834ab03a70084e"
        },
        "downloads": -1,
        "filename": "pelecanus-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a629eb24beb79b2a58c3efe80d7cd19d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16134,
        "upload_time": "2017-07-29T18:27:08",
        "upload_time_iso_8601": "2017-07-29T18:27:08.752560Z",
        "url": "https://files.pythonhosted.org/packages/c8/c8/87caea232dc03d8d98157f0d8b566936f2f143780a40185aa2a1b27a9fdb/pelecanus-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2435ca2d70cd0a6c44d9f3ad5f36ef33bc8902674dfb30f6027e0b91c5c4eaa0",
          "md5": "6cfb631a93ffba5d69fdbe2a25591ee1",
          "sha256": "61eb0144d9fd1434a5b06dd4b497585e1432fd5a50e40b6b9a6974ed61a8b137"
        },
        "downloads": -1,
        "filename": "pelecanus-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6cfb631a93ffba5d69fdbe2a25591ee1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16222,
        "upload_time": "2017-07-29T18:33:57",
        "upload_time_iso_8601": "2017-07-29T18:33:57.168678Z",
        "url": "https://files.pythonhosted.org/packages/24/35/ca2d70cd0a6c44d9f3ad5f36ef33bc8902674dfb30f6027e0b91c5c4eaa0/pelecanus-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27273c05b16233635356e1192f92103ac65fa767df5384c12c68601aeb62e3a6",
          "md5": "8543873b9974cf75d7493a3ef7344e94",
          "sha256": "a3aca456739746e0bb25507f238a2790c867d2f20966af57b24be8e0ceb324b2"
        },
        "downloads": -1,
        "filename": "pelecanus-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8543873b9974cf75d7493a3ef7344e94",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16265,
        "upload_time": "2017-08-04T15:19:08",
        "upload_time_iso_8601": "2017-08-04T15:19:08.572407Z",
        "url": "https://files.pythonhosted.org/packages/27/27/3c05b16233635356e1192f92103ac65fa767df5384c12c68601aeb62e3a6/pelecanus-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85bbdd88d433a82f28735497dd9d628dca8e3c99d935accdcecf6964418b9698",
          "md5": "81416b5cea2bc0468a069c26639be9c3",
          "sha256": "6bb821f7e1823d04e5f43c92ab9e5238b7a6454c364e1947c8d0a341ced8e225"
        },
        "downloads": -1,
        "filename": "pelecanus-0.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81416b5cea2bc0468a069c26639be9c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 13097,
        "upload_time": "2022-08-16T23:36:48",
        "upload_time_iso_8601": "2022-08-16T23:36:48.418363Z",
        "url": "https://files.pythonhosted.org/packages/85/bb/dd88d433a82f28735497dd9d628dca8e3c99d935accdcecf6964418b9698/pelecanus-0.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "459bc7d7c978252cb01e783909b67f4bd455f59cde804d91b57d6ff5e957137c",
          "md5": "89ae1978d8f717d94ebf905d67364bc1",
          "sha256": "bb0cf39ccc89bb49e24c7c95e624c2f22700cb7292c14823822a733a37a1dfc1"
        },
        "downloads": -1,
        "filename": "pelecanus-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "89ae1978d8f717d94ebf905d67364bc1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 14930,
        "upload_time": "2022-08-16T23:36:50",
        "upload_time_iso_8601": "2022-08-16T23:36:50.516023Z",
        "url": "https://files.pythonhosted.org/packages/45/9b/c7d7c978252cb01e783909b67f4bd455f59cde804d91b57d6ff5e957137c/pelecanus-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "85bbdd88d433a82f28735497dd9d628dca8e3c99d935accdcecf6964418b9698",
        "md5": "81416b5cea2bc0468a069c26639be9c3",
        "sha256": "6bb821f7e1823d04e5f43c92ab9e5238b7a6454c364e1947c8d0a341ced8e225"
      },
      "downloads": -1,
      "filename": "pelecanus-0.5.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "81416b5cea2bc0468a069c26639be9c3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 13097,
      "upload_time": "2022-08-16T23:36:48",
      "upload_time_iso_8601": "2022-08-16T23:36:48.418363Z",
      "url": "https://files.pythonhosted.org/packages/85/bb/dd88d433a82f28735497dd9d628dca8e3c99d935accdcecf6964418b9698/pelecanus-0.5.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "459bc7d7c978252cb01e783909b67f4bd455f59cde804d91b57d6ff5e957137c",
        "md5": "89ae1978d8f717d94ebf905d67364bc1",
        "sha256": "bb0cf39ccc89bb49e24c7c95e624c2f22700cb7292c14823822a733a37a1dfc1"
      },
      "downloads": -1,
      "filename": "pelecanus-0.5.3.tar.gz",
      "has_sig": false,
      "md5_digest": "89ae1978d8f717d94ebf905d67364bc1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 14930,
      "upload_time": "2022-08-16T23:36:50",
      "upload_time_iso_8601": "2022-08-16T23:36:50.516023Z",
      "url": "https://files.pythonhosted.org/packages/45/9b/c7d7c978252cb01e783909b67f4bd455f59cde804d91b57d6ff5e957137c/pelecanus-0.5.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}