{
  "info": {
    "author": "Ivan Georgiev",
    "author_email": "ivan.georgiev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# messageit\nMessage (Command and Event) passing for Python\n\n## Examples\n\n### Create custom event\n\nCustom events could be used to notify multiple subscribers about something that happened to the the application or to the world. To create custom event, you subclass the Event class and mark it as `dataclass`:\n\n```python\nfrom dataclasses import dataclass\nfrom messageit import Event\n\n@dataclass\nclass MessageReceived(Event):\n    message: str = None\n```\n\nEach message has `message_id` property automatically set to an UUID. If you do not\npass `correlation_id` during message creation, `correlation_id` is set to the `message_id`.\nThe `correlation_id` could be used to track the execution of complex flows.\n\n```python\nevent = MessageReceived(message=\"Hello world\")\nevent.message_id   # UUID('ddeb3e81-3b75-403b-9b1e-13007b1f3abe')\nevent.correlation_id  # UUID('ddeb3e81-3b75-403b-9b1e-13007b1f3abe')\n```\n\n### Create custom command\n\nCommands are used to perform actions. To create custom command, you subclass the Command class and mark it as `dataclass`:\n\n```python\nfrom dataclasses import dataclass\nfrom messageit import Command\n\n@dataclass\nclass CleanMessage(Command):\n    message: str = None\n```\n\nIf `correlation_id` is passed during message creation the passed value is set to the message's `correlation_id` attribute. With proper logging this could be used to track complex flows, e.g. distributed event and message handling.\n\n```python\nclean = CleanMessage(message=\"Hello world\", correlation_id=event.correlation_id)\nclean.message_id      # UUID('e0812459-5145-4de8-8d96-d0fce7fefb42')\nclean.correlation_id  # UUID('ddeb3e81-3b75-403b-9b1e-13007b1f3abe')\nevent.correlation_id  # UUID('ddeb3e81-3b75-403b-9b1e-13007b1f3abe')\n```\n\n### Handle Commands - Assign algorithm to perform the action\n\nBuilding on the previous example, we could assign algorithm to be executed when action is requested:\n\n```python\nfrom messageit import Executor\n\ndef clean_message(command: CleanMessage):\n    return command.message.strip()\n\ncommands = Executor()\ncommands.register(CleanMessage, clean_message)\n\ncommand = CleanMessage(message=\"   Hello   \")\ncommands.handle(command)   # 'Hello'\n```\n\n### Subscribe to Events - Get notified when event takes place \n\nBuilding on previous examples:\n\n```python\nfrom messageit import Publisher\n\ndef on_message_received(event: MessageReceived):\n    clean_command = CleanMessage(message = event.message, correlation_id = event.message_id)\n    cleaned = commands.handle(clean_command)\n    print(f\"Cleaned message: {repr(cleaned)}\")\n\n\ndef echo_message(event: MessageReceived):\n    print(f\"Your input is: '{event.message}'\")\n    raise NotImplementedError()\n\nevents = Publisher()\nevents.register(MessageReceived, echo_message)\nevents.register(MessageReceived, on_message_received)\n\nresult = events.handle(\n    MessageReceived(message=\"Hello World!!!\")\n)   # Your input is: 'Hello World!!!''\n    # Cleaned message: 'Hello World!!!'\nresult  # [None, NotImplementedError()]\n```\n\nThe two registered subscribers were called and produced output. The result from `handle()` is a collection from the results returned by subscribers invoked by `handle()`. If subscriber raised an exception, the exception is used as return result.\n\n### Complete example\n\nHere is a complete example putting all the pieces from above together. It is a simple command line applicationo that reads a line from the user and prints the cleansed message.\n\n```python\nfrom dataclasses import dataclass\nfrom messageit import Command, Event, Executor, Publisher\n\n@dataclass\nclass CleanMessage(Command):\n    message: str = None\n\n@dataclass\nclass MessageReceived(Event):\n    message: str = None\n\ndef on_message_received(event: MessageReceived):\n    print(f\"Received message: {repr(event.message)}\")\n    clean_command = CleanMessage(message = event.message, correlation_id = event.message_id)\n    cleaned = commands.handle(clean_command)\n    print(f\"Cleaned message: {repr(cleaned)}\")\n\ndef clean_message(command: CleanMessage):\n    return command.message.strip()\n\nevents = Publisher()\nevents.register(MessageReceived, on_message_received)\n\ncommands = Executor()\ncommands.register(CleanMessage, clean_message)\n\nwhile True:\n    print(\"Type your message or leave empty to exit and press <Enter>: \")\n    message = input()\n    if message == \"\":\n        break\n    result = events.handle(MessageReceived(message=message))\n```\n\n## Package and publish\n\nTo run the tests:\n\n```bash\n$ pytest\n```\n\nTo package and publish:\n\n```bash\n$ pip install -U build twine\n$ python -m build\n$ python -m twine upload dist/*\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ivangeorgiev/messageit",
    "keywords": "message passing,messate bus,commands,events",
    "license": "Creative Commons Zero v1.0 Universal",
    "maintainer": "",
    "maintainer_email": "",
    "name": "messageit",
    "package_url": "https://pypi.org/project/messageit/",
    "platform": null,
    "project_url": "https://pypi.org/project/messageit/",
    "project_urls": {
      "Homepage": "https://github.com/ivangeorgiev/messageit"
    },
    "release_url": "https://pypi.org/project/messageit/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Message (Command and Event) passing for Python",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15509467,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7f5d5ad0900a1d662bd0dd7e4cf8a008ab5a91c00be5971ecabd46f95585e85",
          "md5": "6112a30c9d8a301766022b26b00e2119",
          "sha256": "c0c6a1b602f559566857fdfc28b8869a6119f5e85791c2de86daa4ddce9bae92"
        },
        "downloads": -1,
        "filename": "messageit-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6112a30c9d8a301766022b26b00e2119",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8059,
        "upload_time": "2022-10-24T13:19:33",
        "upload_time_iso_8601": "2022-10-24T13:19:33.335044Z",
        "url": "https://files.pythonhosted.org/packages/e7/f5/d5ad0900a1d662bd0dd7e4cf8a008ab5a91c00be5971ecabd46f95585e85/messageit-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdc616a1f38e87389f82af39df89b5f1b604e137e73f81716d47513f4493d034",
          "md5": "d33d281c9c0a448f0da70988ab17ca2d",
          "sha256": "688223432a4e430bab81769ca27c7385b0cfc4d2f5f591700fd49e87681c5b38"
        },
        "downloads": -1,
        "filename": "messageit-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d33d281c9c0a448f0da70988ab17ca2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7935,
        "upload_time": "2022-10-24T13:19:34",
        "upload_time_iso_8601": "2022-10-24T13:19:34.956581Z",
        "url": "https://files.pythonhosted.org/packages/bd/c6/16a1f38e87389f82af39df89b5f1b604e137e73f81716d47513f4493d034/messageit-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e7f5d5ad0900a1d662bd0dd7e4cf8a008ab5a91c00be5971ecabd46f95585e85",
        "md5": "6112a30c9d8a301766022b26b00e2119",
        "sha256": "c0c6a1b602f559566857fdfc28b8869a6119f5e85791c2de86daa4ddce9bae92"
      },
      "downloads": -1,
      "filename": "messageit-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6112a30c9d8a301766022b26b00e2119",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8059,
      "upload_time": "2022-10-24T13:19:33",
      "upload_time_iso_8601": "2022-10-24T13:19:33.335044Z",
      "url": "https://files.pythonhosted.org/packages/e7/f5/d5ad0900a1d662bd0dd7e4cf8a008ab5a91c00be5971ecabd46f95585e85/messageit-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bdc616a1f38e87389f82af39df89b5f1b604e137e73f81716d47513f4493d034",
        "md5": "d33d281c9c0a448f0da70988ab17ca2d",
        "sha256": "688223432a4e430bab81769ca27c7385b0cfc4d2f5f591700fd49e87681c5b38"
      },
      "downloads": -1,
      "filename": "messageit-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d33d281c9c0a448f0da70988ab17ca2d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7935,
      "upload_time": "2022-10-24T13:19:34",
      "upload_time_iso_8601": "2022-10-24T13:19:34.956581Z",
      "url": "https://files.pythonhosted.org/packages/bd/c6/16a1f38e87389f82af39df89b5f1b604e137e73f81716d47513f4493d034/messageit-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}