{
  "info": {
    "author": "LawrentChen",
    "author_email": "laurant.chen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "**Strongly suggest using [pangres](https://github.com/ThibTrip/pangres), which is much more efficient and elegant than this package.**\n\n\n\n# pandas_upsert_to_mysql\n\nEnhanced `to_sql` method in pandas DataFrame, for MySQL database only. It provides a relatively convenient **upsert** (insert or update) feature inplementation through temporary table.\n\n- Whether a record needs to be update or not is determined by primary key or unique constraint\n- The MySQL database table structure requires to be well designed (need to use SQLAlchemy)\n- The primary key must be MySQL auto-increment. Not allow composite primary key mixing auto-increment and other columns\n\n\n\n## Installation\n\n```shell\npip install pandas_upsert_to_mysql\n```\n\n\n\n## Usage and Example\n\nLet's use an order table as instance. Here the `row_id` is the auto-incremented primary key. `order_id` and `product_id` make up of the unique contraint (a single order can have more than one kind of product).\n\n```mysql\n-- Here we use native SQL to create the table for illustration convenience. In the actual pratice we need to use SQLAlchemy.\n\nCREATE TABLE `order_info` (\n  `row_id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'auto_incremented_ID',\n  `order_id` varchar(5) NOT NULL DEFAULT '-9999' COMMENT 'order_id',\n  `product_id` varchar(5) NOT NULL DEFAULT '-9999' COMMENT 'product_id',\n  `qty` int(11) DEFAULT NULL COMMENT 'purchase_quantity',\n  `refund_qty` int(11) DEFAULT NULL COMMENT 'refund_quantity',\n  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'last_update_time',\n  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'first_create_time',\n  PRIMARY KEY (`row_id`),\n  UNIQUE KEY `main` (`order_id`,`product_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='Order Info'\n```\n\nAs time moving, this table needs two operations as below:\n\n1. New orders: insert new records\n2. Existed orders apply refund: update the `refund_qty` ('qty' for quantity) field of the specific orders\n\n\n\nWe insert the base data first. This step can be easily done with pandas official native method `to_sql`\n\n| row_id | order_id | product_id |  qty | refund_qty | update_time         | create_time         |\n| -----: | :------- | :--------- | ---: | ---------: | :------------------ | :------------------ |\n|      1 | A0001    | PD100      |   10 |          0 | 2020-06-26 11:11:55 | 2020-06-26 11:11:55 |\n|      2 | A0002    | PD200      |   20 |          0 | 2020-06-26 11:11:55 | 2020-06-26 11:11:55 |\n|      3 | A0002    | PD201      |   22 |          0 | 2020-06-26 11:11:55 | 2020-06-26 11:11:55 |\n\nAssume the database already has the data above. Now we need to upsert the new data below. Pay attention that A0002-PD201 now has two refund_qty, and we have the new record A0003-PD300.\n\n| order_id | product_id |  qty | refund_qty |\n| :------- | :--------- | ---: | ---------: |\n| A0001    | PD100      |   10 |          0 |\n| A0002    | PD200      |   20 |          0 |\n| A0002    | PD201      |   22 |          2 |\n| A0003    | PD300      |   30 |          0 |\n\n\n\n```python\n# 'table' is a module containing pre-defined SQLAlchemy ORM table structure classes\n# 'engine' is a sqlalchemy.engine.Engine which needs you to define yourself. We use it to connect to the target MySQL database. It has the same requirements with the paramater 'con' in pandas.DataFrame.to_sql\n# Both 'table' and 'engine' here is just the instance in package. You should define them by yourself in actual usage\n\nimport pandas_upsert_to_mysql.table as table\nfrom pandas_upsert_to_mysql import Upsert\nfrom connection import Connector\n\nengine = Connector(schema='dev').get_engine()\n\nUpsert(engine=engine).to_mysql(df=table.ExampleOrderTable.new_df,\n                               target_table=table.Order,\n                               temp_table=table.OrderTemp,\n                               if_record_exists='update')\n```\n\nThen we can get the result. Be aware that the `update_time` only changed in the record whose row_id=3, completely as expected.\n\n| row_id | order_id | product_id |  qty | refund_qty | update_time             | create_time             |\n| -----: | :------- | :--------- | ---: | ---------: | :---------------------- | :---------------------- |\n|      1 | A0001    | PD100      |   10 |          0 | 2020-06-26 11:11:55     | 2020-06-26 11:11:55     |\n|      2 | A0002    | PD200      |   20 |          0 | 2020-06-26 11:11:55     | 2020-06-26 11:11:55     |\n|      3 | A0002    | PD201      |   22 |          2 | **2020-06-26 11:13:19** | 2020-06-26 11:11:55     |\n|      4 | A0003    | PD300      |   30 |          0 | **2020-06-26 11:13:19** | **2020-06-26 11:13:19** |\n\n\n\n## Caveats\n\n- Any conlumn in the unique constraint must not have null value, otherwise the update will violate the constraint and cause duplicates. This is considered as a bug [#8173](https://bugs.mysql.com/bug.php?id=8173) of MySQL with long history, which means before we write the DataFrame to the database, we should assign a default value for each column in unique constraint to replace the possible null values. \n- Implement using `session scope` of SQLAlchemy. But since the author is not a professional engineer, I still can not gurantee the reliability in concurrent condition\n- Only tested in pandas >= 1.0.3 and MySQL 5.7 innodb environment. The transaction isolation level is the default REPEATABLE-READ\n\n\n\n## Origin\n\nPandas official (up to 1.0.5 version) `to_sql` method does not implement upsert feature. Its parameter `if_exist` has avaliable values as below:\n\n> **if_exists: {‘fail’, ‘replace’, ‘append’}, default ‘fail’**\n>\n> How to behave if the table already exists.\n>\n> - fail: Raise a ValueError.\n>\n> - replace: Drop the table before inserting new values.\n>\n> - append: Insert new values to the existing table.\n\nNotice that the **replace** here takes effect on the whole **table** rather than each specific row, which means the native method can only truncate the whole table and re-insert the entire DataFrame.\n\nDemand for the upsert feature has been discussed in the official repo long before, see [issue #14553](https://github.com/pandas-dev/pandas/issues/14553). But the discussion has lasted for almost 4 years (up to 1.0.5 version), and the officials still can not deliver this feature in a stable release. For now it is only called \"**may be fixed** by [#29636](https://github.com/pandas-dev/pandas/pull/29636)\"\n\nIn those discussion, the major consideration of the officials are:\n\n- Consistent support for multiple databases, but different databases can have huge difference on their native upsert pratice\n- Also due to the disparity of databases, they would only support upsert by primary key in the first plan, not by unique constraints\n- The conciseness of API\n\nTherefore it can be expected that, the officials may be conservative on their first implementation for the balance of simplicity (\"to protect users that have a poorly designed database\") and function abundance: only support upsert by primary key for example. However, since the auto-increment has to be (part of) the primary key in MySQL, you won't be able to distinguish those duplicate records which need to be updated once you define an auto-increment. One possible solution is that the primary key contains only  an auto-increment, other columns to decide a unique record serve as the unique constraint. For this goal, this repo gives an unofficial solution only for MySQL, and it is highly probably not a best pratice.\n\n\n\nUp to the last commit of this repo, pandas 1.0.5 version's native `to_sql` method still does not support **upsert**.\n\n\n\n## Reference\n\n- [pangres](https://github.com/ThibTrip/pangres): support multiple databases; upsert by primary key, require to set the primary key as the DataFrame index (**In fact it is completely compatible with unique constraint**); implement without temporary table, much faster.\n- [pandabase](https://github.com/notsambeck/pandabase): support multiple databases; upsert by primary key, require to set the primary key as the DataFrame index; seems not supporting MySQL\n- [pandas-to-mysql](https://github.com/frank690/pandas-to-mysql)\n- [pandas-sql](https://github.com/xbanke/pandas-sql)\n- [Pandas-to_sql-upsert](https://github.com/ryanbaumann/Pandas-to_sql-upsert)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LawrentChen/pandas_upsert_to_mysql",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pandas-upsert-to-mysql",
    "package_url": "https://pypi.org/project/pandas-upsert-to-mysql/",
    "platform": "",
    "project_url": "https://pypi.org/project/pandas-upsert-to-mysql/",
    "project_urls": {
      "Homepage": "https://github.com/LawrentChen/pandas_upsert_to_mysql"
    },
    "release_url": "https://pypi.org/project/pandas-upsert-to-mysql/0.0.3/",
    "requires_dist": [
      "pandas",
      "SQLAlchemy",
      "mysqlclient"
    ],
    "requires_python": ">=3.6",
    "summary": "Enhanced `to_sql` method in pandas DataFrame, for MySQL database only.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7606934,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b880d4b09f486808b73f207fa66399f42c1761f15e8af993dee7fc11d8e4d90",
          "md5": "2729f5277dd1a67c64b5fd8785ec67ce",
          "sha256": "1b72b8a871ad0c9a0acedfd42f0fa6a63eba6fee509136a071f2aa682c56b46f"
        },
        "downloads": -1,
        "filename": "pandas_upsert_to_mysql-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2729f5277dd1a67c64b5fd8785ec67ce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9044,
        "upload_time": "2020-06-27T13:26:01",
        "upload_time_iso_8601": "2020-06-27T13:26:01.346809Z",
        "url": "https://files.pythonhosted.org/packages/6b/88/0d4b09f486808b73f207fa66399f42c1761f15e8af993dee7fc11d8e4d90/pandas_upsert_to_mysql-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce74a88434b699a696ac2a616d8865803667b9275f88848430fa334f39cf7b56",
          "md5": "80ad1162611dba63ce0b8de5860ded43",
          "sha256": "b11e37dfe852128f133c7be381523c93b1e52747c3dc772ea8e959ac75d42410"
        },
        "downloads": -1,
        "filename": "pandas_upsert_to_mysql-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "80ad1162611dba63ce0b8de5860ded43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7914,
        "upload_time": "2020-06-27T13:26:04",
        "upload_time_iso_8601": "2020-06-27T13:26:04.419976Z",
        "url": "https://files.pythonhosted.org/packages/ce/74/a88434b699a696ac2a616d8865803667b9275f88848430fa334f39cf7b56/pandas_upsert_to_mysql-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c656456a813c4f392197f49ce42d92439c5c0233be5ac88699a8b217d82d378",
          "md5": "5c8c95c1c0497d6e4a52de3601bf131f",
          "sha256": "96d87c3fbd28c09a0da5c4a019af56ba9cc1c02715d77dbc2682d397df04fa4b"
        },
        "downloads": -1,
        "filename": "pandas_upsert_to_mysql-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c8c95c1c0497d6e4a52de3601bf131f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9064,
        "upload_time": "2020-06-28T08:07:45",
        "upload_time_iso_8601": "2020-06-28T08:07:45.047119Z",
        "url": "https://files.pythonhosted.org/packages/5c/65/6456a813c4f392197f49ce42d92439c5c0233be5ac88699a8b217d82d378/pandas_upsert_to_mysql-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0e67dd051872f14d7007fd283137ab8fa8108f3b61f1ca4e4db99a0337ebc94",
          "md5": "92d88f2d4197e80fa4a509f67311af72",
          "sha256": "2d9d716d3b53104999a28ebdbf48a95543e71fd48b9067d1c2403a78a4025bdf"
        },
        "downloads": -1,
        "filename": "pandas_upsert_to_mysql-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "92d88f2d4197e80fa4a509f67311af72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8033,
        "upload_time": "2020-06-28T08:07:46",
        "upload_time_iso_8601": "2020-06-28T08:07:46.479971Z",
        "url": "https://files.pythonhosted.org/packages/d0/e6/7dd051872f14d7007fd283137ab8fa8108f3b61f1ca4e4db99a0337ebc94/pandas_upsert_to_mysql-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3996f281a21efc7dc27020c62b8f070cf37565bc3ccd048982f421ecc72bbdf2",
          "md5": "60747164bdcd55ea5b6c5cc80578c0ac",
          "sha256": "ef46639e91ae376aeb3aa74039c2ed310b739a04dbeda23d16966ad11ad1c255"
        },
        "downloads": -1,
        "filename": "pandas_upsert_to_mysql-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60747164bdcd55ea5b6c5cc80578c0ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9054,
        "upload_time": "2020-07-01T14:08:48",
        "upload_time_iso_8601": "2020-07-01T14:08:48.080911Z",
        "url": "https://files.pythonhosted.org/packages/39/96/f281a21efc7dc27020c62b8f070cf37565bc3ccd048982f421ecc72bbdf2/pandas_upsert_to_mysql-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00565b0b318bdf467c906af951bd92df496f6c5e4c827565840c3fb036510cd9",
          "md5": "b9f5cb1a8029ef6e9df117458f670333",
          "sha256": "e8fcfef416d2c86b4e2588441aa372f5ae34e579ce2c848406bf2935836a8fe1"
        },
        "downloads": -1,
        "filename": "pandas_upsert_to_mysql-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b9f5cb1a8029ef6e9df117458f670333",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8023,
        "upload_time": "2020-07-01T14:08:49",
        "upload_time_iso_8601": "2020-07-01T14:08:49.703930Z",
        "url": "https://files.pythonhosted.org/packages/00/56/5b0b318bdf467c906af951bd92df496f6c5e4c827565840c3fb036510cd9/pandas_upsert_to_mysql-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3996f281a21efc7dc27020c62b8f070cf37565bc3ccd048982f421ecc72bbdf2",
        "md5": "60747164bdcd55ea5b6c5cc80578c0ac",
        "sha256": "ef46639e91ae376aeb3aa74039c2ed310b739a04dbeda23d16966ad11ad1c255"
      },
      "downloads": -1,
      "filename": "pandas_upsert_to_mysql-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "60747164bdcd55ea5b6c5cc80578c0ac",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9054,
      "upload_time": "2020-07-01T14:08:48",
      "upload_time_iso_8601": "2020-07-01T14:08:48.080911Z",
      "url": "https://files.pythonhosted.org/packages/39/96/f281a21efc7dc27020c62b8f070cf37565bc3ccd048982f421ecc72bbdf2/pandas_upsert_to_mysql-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "00565b0b318bdf467c906af951bd92df496f6c5e4c827565840c3fb036510cd9",
        "md5": "b9f5cb1a8029ef6e9df117458f670333",
        "sha256": "e8fcfef416d2c86b4e2588441aa372f5ae34e579ce2c848406bf2935836a8fe1"
      },
      "downloads": -1,
      "filename": "pandas_upsert_to_mysql-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b9f5cb1a8029ef6e9df117458f670333",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8023,
      "upload_time": "2020-07-01T14:08:49",
      "upload_time_iso_8601": "2020-07-01T14:08:49.703930Z",
      "url": "https://files.pythonhosted.org/packages/00/56/5b0b318bdf467c906af951bd92df496f6c5e4c827565840c3fb036510cd9/pandas_upsert_to_mysql-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}