{
  "info": {
    "author": "Ripe",
    "author_email": "ripeey@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Conversation-Pyrogram\nA conversation plugin class for pyrogram using inbuild Update Handlers\n\nComplete list of handlers to be used without `Handlers` postfix :-\n\thttps://docs.pyrogram.org/api/handlers#index\n\n# Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install or simply copy the class file to your project.\n\n```bash\npip install git+https://github.com/Ripeey/Conversation-Pyrogram\n```\n\n# Basic Usage\n`main.py` Where the Client is initialized\n```Python\nfrom pyrogram import Client\nfrom convopyro import Conversation\n\napp = Client('MyApp')\nConversation(app) # That's it!\n```\nThen at any [update handler](https://docs.pyrogram.org/start/updates#using-decorators)\n```Python\nanswer = client.listen.CallbackQuery(filters.user(update.from_user.id))\n```\n\n# Example\n\n```python\n\nfrom pyrogram       import Client, filters\nfrom pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery\n\nfrom convopyro import listen_message, stop_listen\n\n@Client.on_message(filters.command([\"start\"], [\"!\",\".\",\"/\"]) & filters.private)\nasync def start(client:Client, message:Message):\n    await client.send_message(\n        chat_id      = message.chat.id,\n        text         = \"What's your name?\",\n        reply_markup = InlineKeyboardMarkup(\n            [[InlineKeyboardButton(text=\"Stop Listen\", callback_data=\"stop_listen\")]]\n        )\n    )\n\n    answer = await listen_message(client, message.chat.id, timeout=None)\n    if answer:\n        await answer.reply(f\"hello {answer.text}\")\n    else:\n        await message.reply(\"Canceled Answer\")\n\n@Client.on_callback_query(filters.regex(pattern=r\"^stop_listen$\"))\nasync def listen_stopped(client:Client, callback_query:CallbackQuery):\n    await stop_listen(client, callback_query.from_user.id)\n    await callback_query.message.delete()\n\n```\n\n# Advanced Usage\nThe conversation class has 2 primary methods `listen.Handler` ([Handlers](https://docs.pyrogram.org/api/handlers#index) like **Message, CallbackQuery** ...etc) and `listen.Cancel` for ending an ongoing listener.\n\n## listen.Handler()\nThe conversation `listen.Message` **(or any other [Handler](https://docs.pyrogram.org/api/handlers#index))** takes 3 parameters, default is `None` but either `filter` or `id` as parameter is required.\n\n- **filters :** [Single](https://docs.pyrogram.org/topics/use-filters#single-filters) or [Combined](https://docs.pyrogram.org/topics/use-filters#combining-filters) is required but this is **optional** if `id` is passed with a valid single [user](https://docs.pyrogram.org/api/filters#pyrogram.filters.user) or [chat](https://docs.pyrogram.org/api/filters#pyrogram.filters.chat) filter (which will learn below).\n- **id :** An unique id for each listen, this could be [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str), a single [user filter](https://docs.pyrogram.org/api/filters#pyrogram.filters.user) or [chat filter](https://docs.pyrogram.org/api/filters#pyrogram.filters.chat), this is mostly **optional** and only needed to `Cancel()` a conversation listen. \nIf **user/chat filter** is passed then it **combines** itself with `filters` so you dont need to repeat again in `filters` using `&`, where as if **str** is used it's just used normally as `id`.\n\n- **timeout :** Waiting time in seconds [int](https://docs.python.org/3/library/functions.html#int) for getting a response **optional**.\n\n#### Return\n- **Update** :  Based on handlers used could be one of received updates such as [Message](https://docs.pyrogram.org/api/types/Message), [CallbackQuery](https://docs.pyrogram.org/api/types/CallbackQuery), etc.\n- **None** : When listen gets cancel using `listen.Cancel` a None is return as response at listen callback.\n- **Exception** : An `asyncio.TimeoutError` is raised if provided waiting time get's over.\n\n## listen.Cancel()\nThe conversation `listen.Cancel` takes 1 required parameter. This method is used to cancel a specific conversation listen.\n\n- **id** : An unique id provided during listen, this could be [str](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str), a single [user filter](https://docs.pyrogram.org/api/filters#pyrogram.filters.user) or [chat filter](https://docs.pyrogram.org/api/filters#pyrogram.filters.chat).\n\n#### Return\n- **Boolean** :  False if `id` provided already cancelled or invalid.\n\n# Example\n```Python\n@app.on_callback_query(filters.regex(r'stop'))\nasync def _(client, query):\n\t# This will return response None at listen\n\tawait client.listen.Cancel(filters.user(query.from_user.id))\n\n@app.on_message(filters.regex(r'hi'))\nasync def _(client, message):\n\tbutton = InlineKeyboardMarkup([[InlineKeyboardButton('Cancel Question', callback_data = 'stop')]])\n\tquestion = await client.send_message(message.chat.id, 'Enter your name in 5s.', reply_markup = button)\n\t# A nice flow of conversation\n\ttry:\n\t\tresponse = await client.listen.Message(filters.text, id = filters.user(message.from_user.id), timeout = 5)\n\texcept asyncio.TimeoutError:\n\t\tawait message.reply('Too late 5s gone.')\n\telse:\n\t\tif response:\n\t\t\tawait response.reply(f'Hello {response.text}')\n\t\telse:\n\t\t\tawait message.reply('Okay cancelled question!')\n\tfinally:\n\t\tawait question.delete()\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ripeey/Conversation-Pyrogram",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "convopyro",
    "package_url": "https://pypi.org/project/convopyro/",
    "platform": null,
    "project_url": "https://pypi.org/project/convopyro/",
    "project_urls": {
      "Homepage": "https://github.com/Ripeey/Conversation-Pyrogram"
    },
    "release_url": "https://pypi.org/project/convopyro/0.5/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A conversation plugin class for pyrogram using inbuild Update Handlers",
    "version": "0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16507414,
  "releases": {
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21b6403f676503ac98a7f38c3033c3a71a37f0c03c183e7446952947de3a9bd8",
          "md5": "d43e7eedd2c8d3a199d15246801c29c6",
          "sha256": "3cd1fe6318848faf27e6b74bec84410f3bfcd19e8e44433603c50fe23e40171b"
        },
        "downloads": -1,
        "filename": "convopyro-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d43e7eedd2c8d3a199d15246801c29c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5851,
        "upload_time": "2023-01-20T23:58:08",
        "upload_time_iso_8601": "2023-01-20T23:58:08.957012Z",
        "url": "https://files.pythonhosted.org/packages/21/b6/403f676503ac98a7f38c3033c3a71a37f0c03c183e7446952947de3a9bd8/convopyro-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c02d389bdc9434407680730489675594358f6bff20de0cb815566aa67e9bc53b",
          "md5": "b155186ddf0e2c7a7f31fca0d91a7704",
          "sha256": "268625d9795284455c834ea839d7c686525ad76d7c76083ddac95864fa489b01"
        },
        "downloads": -1,
        "filename": "convopyro-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b155186ddf0e2c7a7f31fca0d91a7704",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5435,
        "upload_time": "2023-01-20T23:58:11",
        "upload_time_iso_8601": "2023-01-20T23:58:11.513798Z",
        "url": "https://files.pythonhosted.org/packages/c0/2d/389bdc9434407680730489675594358f6bff20de0cb815566aa67e9bc53b/convopyro-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14e0f8d2c09dd5810c48cf3dafb0bad03779da5039cf0beaa5c19ca06b414a6e",
          "md5": "1096d4d3d26ad21feab1a0cabe561111",
          "sha256": "2db5c99e460c47779241a9a876cbc5254fa838e32d47770abafc086fe8835383"
        },
        "downloads": -1,
        "filename": "convopyro-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1096d4d3d26ad21feab1a0cabe561111",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5881,
        "upload_time": "2023-01-21T00:03:57",
        "upload_time_iso_8601": "2023-01-21T00:03:57.422487Z",
        "url": "https://files.pythonhosted.org/packages/14/e0/f8d2c09dd5810c48cf3dafb0bad03779da5039cf0beaa5c19ca06b414a6e/convopyro-0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7652f7bded3158d6f2a912ccb636e95b45dd653f2360398f35cb5e0662bf07c0",
          "md5": "cbf384ce9682f5c4a3b36604c3fbc39f",
          "sha256": "26bbebc90d48b8f96da371df9246cd63545273c2f9af0bd835b1e1119d4e5f90"
        },
        "downloads": -1,
        "filename": "convopyro-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "cbf384ce9682f5c4a3b36604c3fbc39f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5475,
        "upload_time": "2023-01-21T00:03:59",
        "upload_time_iso_8601": "2023-01-21T00:03:59.153851Z",
        "url": "https://files.pythonhosted.org/packages/76/52/f7bded3158d6f2a912ccb636e95b45dd653f2360398f35cb5e0662bf07c0/convopyro-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "14e0f8d2c09dd5810c48cf3dafb0bad03779da5039cf0beaa5c19ca06b414a6e",
        "md5": "1096d4d3d26ad21feab1a0cabe561111",
        "sha256": "2db5c99e460c47779241a9a876cbc5254fa838e32d47770abafc086fe8835383"
      },
      "downloads": -1,
      "filename": "convopyro-0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1096d4d3d26ad21feab1a0cabe561111",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5881,
      "upload_time": "2023-01-21T00:03:57",
      "upload_time_iso_8601": "2023-01-21T00:03:57.422487Z",
      "url": "https://files.pythonhosted.org/packages/14/e0/f8d2c09dd5810c48cf3dafb0bad03779da5039cf0beaa5c19ca06b414a6e/convopyro-0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7652f7bded3158d6f2a912ccb636e95b45dd653f2360398f35cb5e0662bf07c0",
        "md5": "cbf384ce9682f5c4a3b36604c3fbc39f",
        "sha256": "26bbebc90d48b8f96da371df9246cd63545273c2f9af0bd835b1e1119d4e5f90"
      },
      "downloads": -1,
      "filename": "convopyro-0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "cbf384ce9682f5c4a3b36604c3fbc39f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5475,
      "upload_time": "2023-01-21T00:03:59",
      "upload_time_iso_8601": "2023-01-21T00:03:59.153851Z",
      "url": "https://files.pythonhosted.org/packages/76/52/f7bded3158d6f2a912ccb636e95b45dd653f2360398f35cb5e0662bf07c0/convopyro-0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}