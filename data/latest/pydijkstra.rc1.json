{
  "info": {
    "author": "",
    "author_email": "Niklas Markert <niklas.markert@outlook.de>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyDijkstra\n\nThis python package provides an implementation of the  Dijkstra Search Algorithm for any kind of graphs.\nThe focus of this realization lies on the usability. <br>\nIf you have already written your own class which represents some sort of graph, and you want to \nuse the dijkstra algorithm for path searching in this graph, this package is extremely easy to \nintegrate. You don't have to transform your graph into another special search graph or something.\nThe only things you have to do, is inheriting from the provided class and override some methods.\n\n## How to Use\n**Install Package**\n```\npip install pydijkstra\n```\n\n**Import Package and Inherit from Dijkstra Class**\n```python\nimport pydijkstra\n\nclass MyGraph(pydijkstra.Dijkstra):\n    ...\n```\n\n**Implement the Abstract Methods**\n```python\ndef all_nodes(self) -> List[Any]:\n    \"\"\" Return all nodes in the graph \"\"\"\n\ndef neighbors(self, node: Any) -> List[Any]:\n    \"\"\" Return all neighbor nodes of the given node \"\"\"\n\ndef weight(self, node1: Any, node2: Any) -> float | int:\n    \"\"\" Return the weight for going from node1 to node2 (i.e. the distance) \"\"\"\n```\n*The typing 'Any' here stands for the representation of one node. So you are free in the choice\nhow you want to represent a node, i.e. use your own defined class, coordinates, ...*\n\n**Use the dijkstra_search Method**\n<br>which was inherited from the Dijkstra class\n```python\ndijkstra_search(start: Any, \n                target: Any = None, \n                output_format: str = 'dijkstra')\n```\n- (param) **start**: Node to start the dijkstra search from.\n- (param) **target**: Target node in order to perform early stopping.\n- (param) **output_format**: String which defines the format of the output. More on this at [Output Formats](#markdown-header-output-formats).\n- (return) Result of the dijkstra search based on the output_format.\n\n### Output Formats\nFor different uses you  may be need different outputs from the dijkstra search, so you can define the output of the\nfunction by the output_format parameter. <br>\n**Important!** The algorithm to calculate the path finding stays the same, independent of the output format. So changing\nthe output format does not lead to a change in calculation cost.\n<br> <br>\nThe different options:\n- `dijkstra` For each found node, it gives the previous visited node and the distance from the start node.\nThe value pair for each node is represented as a dict with 'prev' and 'dist' as its keys.\n- `path` For each found node, it gives a list of nodes, which represents the shortest path from the start node.\n- `path+dist` For each found node, it gives the shortest path and the distance from the start node.\nThe value pair for each node is represented as a dict with 'path' and 'dist' as its keys.\n- `target_path` Gives a list of nodes, which represents the shortest path from the start node to the target node. (Only\n                possible if target is given).\n\nIf the output format defines outputs for multiple nodes (i.e. when using 'dijkstra' or 'path'), it tries to return it \nas a dictionary with the nodes as the keys. If the node is not hashable (and so not usable as a key in the dictionary),\nit instead returns a list with tuples where the node is the first object and the output the second\nobject of the tuple.\n\n### Examples\nSome examples on how the package can be used are found in the tests package. <br>\nIn simple_graph.py, a new graph structure is defined, which inherits from pydijkstra.Dijkstra and implements the needed functions\nto be able to perform a dijkstra search on the graph it represents. <br>\nIn nx_search.py, a search class is defined, which gets a NetworkX graph and implements the needed functions with the\nhelp of the functions provided by the graph, so it can serve as a path finding class for NetworkX graphs. <br>\nIn test.py, some unittests for the dijkstra algorithm are defined, which use the two implemented classes in order to\ntest the correctness of the dijkstra algorithm.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "dijkstra,graph,pathfinding",
    "license": "MIT License Copyright (c) 2022 Niklas Markert Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pydijkstra",
    "package_url": "https://pypi.org/project/pydijkstra/",
    "platform": null,
    "project_url": "https://pypi.org/project/pydijkstra/",
    "project_urls": {
      "Homepage": "https://github.com/nmarkert/python-dijkstra"
    },
    "release_url": "https://pypi.org/project/pydijkstra/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Package for easily applicable Dijkstra Algorithm.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14963339,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "256a322b0f346255845bdb97e1c41516eabc6209c00fbc3766498e767107bd0b",
          "md5": "b2723c15f2472461fa39f2562b08de05",
          "sha256": "be3ee287277f858922de349385f796c7d37112c0f3b734ac8a4f6378bff19264"
        },
        "downloads": -1,
        "filename": "pydijkstra-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2723c15f2472461fa39f2562b08de05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 6672,
        "upload_time": "2022-09-01T13:32:42",
        "upload_time_iso_8601": "2022-09-01T13:32:42.702433Z",
        "url": "https://files.pythonhosted.org/packages/25/6a/322b0f346255845bdb97e1c41516eabc6209c00fbc3766498e767107bd0b/pydijkstra-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "925fd847b2c2aad730a1b63e77a973be6855321f068c4312bba97ce12cd17f05",
          "md5": "6aa3c54ba15189b3e398619809796a8c",
          "sha256": "7202f9fde43a5a58d0904631b26c90233defc604948e5f4c9d54b2b26507a16e"
        },
        "downloads": -1,
        "filename": "pydijkstra-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6aa3c54ba15189b3e398619809796a8c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 5543,
        "upload_time": "2022-09-01T13:32:45",
        "upload_time_iso_8601": "2022-09-01T13:32:45.164293Z",
        "url": "https://files.pythonhosted.org/packages/92/5f/d847b2c2aad730a1b63e77a973be6855321f068c4312bba97ce12cd17f05/pydijkstra-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "256a322b0f346255845bdb97e1c41516eabc6209c00fbc3766498e767107bd0b",
        "md5": "b2723c15f2472461fa39f2562b08de05",
        "sha256": "be3ee287277f858922de349385f796c7d37112c0f3b734ac8a4f6378bff19264"
      },
      "downloads": -1,
      "filename": "pydijkstra-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b2723c15f2472461fa39f2562b08de05",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 6672,
      "upload_time": "2022-09-01T13:32:42",
      "upload_time_iso_8601": "2022-09-01T13:32:42.702433Z",
      "url": "https://files.pythonhosted.org/packages/25/6a/322b0f346255845bdb97e1c41516eabc6209c00fbc3766498e767107bd0b/pydijkstra-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "925fd847b2c2aad730a1b63e77a973be6855321f068c4312bba97ce12cd17f05",
        "md5": "6aa3c54ba15189b3e398619809796a8c",
        "sha256": "7202f9fde43a5a58d0904631b26c90233defc604948e5f4c9d54b2b26507a16e"
      },
      "downloads": -1,
      "filename": "pydijkstra-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6aa3c54ba15189b3e398619809796a8c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 5543,
      "upload_time": "2022-09-01T13:32:45",
      "upload_time_iso_8601": "2022-09-01T13:32:45.164293Z",
      "url": "https://files.pythonhosted.org/packages/92/5f/d847b2c2aad730a1b63e77a973be6855321f068c4312bba97ce12cd17f05/pydijkstra-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}