{
  "info": {
    "author": "Julien Palard",
    "author_email": "julien@palard.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Topic :: System :: Emulators",
      "Topic :: Terminals :: Terminal Emulators/X Terminals"
    ],
    "description": "# vt100 emulator\n\n`vt100-emulator` is a headless\n[vt100](https://fr.wikipedia.org/wiki/VT100) emulator, a bit like any\nterminal you may use daily (like urxvt, xterm, ...) but those you're\nusing are NOT headless, they have a graphical interface to interact\nwith you, human). Here, `vt100-emulator` is only the underlying a `C`\nand `Python` API to an actual emulator, so you can do everything you\nwant with it, like interfacing over TCP, HTTP, automatically testing\nyour implementation `malloc` against `top` while running `top` in the\nheadless terminal, whatever pleases you.\n\nFor copyright information, please see the file LICENSE in this\ndirectory or in the files of the source tree.\n\n\n# INSTALL\n\n## Python module\n\n    pip install hl-vt100\n\n\n## Python module from source\n\nThe simpliest way is just to run `pip install .` from within the repo,\nbut if you want build artifacts, you can build one in an isolated\nenvironment using:\n\n    pip install build\n    python -m build\n\nOr just create an `sdist` the quick way:\nn\n    python setup.py sdist\n\nIn both case it will provide a build artifact in the `dist/` directory\nthat you can also `pip install`.\n\n\n# Usage using the Python wrapper (same methods in C)\n\n```python\nimport hl_vt100\n\n\ndef dump(vt100):\n    print(\"╭\" + \"─\" * vt100.width + \"╮\")\n    for line in vt100.getlines():\n        print(f\"│{line:{vt100.width}}│\")\n    print(\"╰\" + \"─\" * vt100.width + \"╯\")\n\n\ndef main():\n    vt100 = hl_vt100.vt100_headless()\n    vt100.changed_callback = lambda: dump(vt100)\n    vt100.fork('top', ['top'])\n    vt100.main_loop()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# Usage using the C library\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include \"hl_vt100.h\"\n\n\nvoid changed(struct vt100_headless *vt100)\n{\n    const char **lines;\n\n    lines = vt100_headless_getlines(vt100);\n    for (unsigned int y = 0; y < vt100->term->height; ++y)\n    {\n        write(1, \"|\", 1);\n        write(1, lines[y], vt100->term->width);\n        write(1, \"|\\n\", 2);\n    }\n    write(1, \"\\n\", 1);\n}\n\nint main(int ac, char **av)\n{\n    struct vt100_headless *vt100;\n    char *argv[] = {\"top\", NULL};\n\n    vt100 = new_vt100_headless();\n    vt100_headless_fork(vt100, argv[0], argv);\n    vt100->changed = changed;\n    vt100_headless_main_loop(vt100);\n    return EXIT_SUCCESS;\n}\n```\n\n# Code overview\n\nlw_terminal_parser, lw_terminal_vt100, and hl_vt100 are three modules used to emulate a vt100 terminal:\n\n```\n                                  -------------\n                                  |           |\n                                  | Your Code |\n                                  |           |\n                                  -------------\n                                    |      ^\n vt100 = vt100_headless_init()      |      |\n vt100->changed = changed;          |      | hl_vt100 raises 'changed'\n vt100_headless_fork(vt100, ...     |      | when the screen has changed.\n                                    |      | You get the content of the screen\n                                    |      | calling vt100_headless_getlines.\n                                    V      |\n                                  -------------              -------------\n Read from PTY master and write | |           |     PTY      |           |\n to lw_terminal_vt100_read_str  | |  hl_vt100 |<------------>|  Program  |\n                                V |           |Master   Slave|           |\n                                  -------------              -------------\n                                   |        |^ hl_vt100 gets lw_terminal_vt100's\n                                   |        || lines by calling\n                                   |        || lw_terminal_vt100_getlines\n                                   |        ||\n                                   |        ||\n                                   V        V|\n                              ----------------------\n Got data from              | |                    | Recieve data from callbacks\n lw_terminal_vt100_read_str | | lw_terminal_vt100  | And store an in-memory\n give it to                 | |                    | state of the vt100 terminal\n lw_terminal_parser_read_strV ----------------------\n                                 |              ^\n                                 |              |\n                                 |              |\n                                 |              |\n                                 |              |\n                                 |              | Callbacks\n                                 |              |\n                                 |              |\n                                 |              |\n                                 |              |\n                                 |              |\n                                 V              |\n                              ----------------------\n Got data from                |                    |\n lw_terminal_pasrser_read_str | lw_terminal_parser |\n parses, and call callbacks   |                    |\n                              ----------------------\n```\n\n## lw_terminal_parser\n\n`lw_terminal_parser` parses terminal escape sequences, calling callbacks\nwhen a sequence is sucessfully parsed, read `example/parse.c`.\n\nProvides:\n\n * `struct lw_terminal *lw_terminal_parser_init(void);`\n * `void lw_terminal_parser_destroy(struct lw_terminal* this);`\n * `void lw_terminal_parser_default_unimplemented(struct lw_terminal* this, char *seq, char chr);`\n * `void lw_terminal_parser_read(struct lw_terminal *this, char c);`\n * `void lw_terminal_parser_read_str(struct lw_terminal *this, char *c);`\n\n\n## lw_terminal_vt100\n\nHooks into a `lw_terminal_parser` and keep an in-memory state of the\nscreen of a vt100.\n\nProvides:\n\n * `struct lw_terminal_vt100 *lw_terminal_vt100_init(void *user_data, void (*unimplemented)(struct lw_terminal* term_emul, char *seq, char chr));`\n * `char lw_terminal_vt100_get(struct lw_terminal_vt100 *vt100, unsigned int x, unsigned int y);`\n * `const char **lw_terminal_vt100_getlines(struct lw_terminal_vt100 *vt100);`\n * `void lw_terminal_vt100_destroy(struct lw_terminal_vt100 *this);`\n * `void lw_terminal_vt100_read_str(struct lw_terminal_vt100 *this, char *buffer);`\n\n\n## hl_vt100\n\nForks a program, plug its io to a pseudo terminal and emulate a vt100\nusing `lw_terminal_vt100`.\n\nProvides:\n\n * `void vt100_headless_fork(struct vt100_headless *this, const char *progname, char *const argv[]);`\n * `struct vt100_headless *vt100_headless_init(void);`\n * `const char **vt100_headless_getlines(struct vt100_headless *this);`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JulienPalard/vt100-emulator",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hl-vt100",
    "package_url": "https://pypi.org/project/hl-vt100/",
    "platform": null,
    "project_url": "https://pypi.org/project/hl-vt100/",
    "project_urls": {
      "Homepage": "https://github.com/JulienPalard/vt100-emulator"
    },
    "release_url": "https://pypi.org/project/hl-vt100/0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Headless vt100 emulator",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15610703,
  "releases": {
    "0.1": [],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72dfc89e98bb1d0c4dbf76d506f5c512de31455415ad8d7c13b9893b417dd3da",
          "md5": "af19321cad0ddc6be80fc2026d16f98a",
          "sha256": "12e60205b6bed9419b03e13e8a3f9c19a760136aceb1ebe8f703779429f56c64"
        },
        "downloads": -1,
        "filename": "hl_vt100-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "af19321cad0ddc6be80fc2026d16f98a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18083,
        "upload_time": "2022-11-01T13:31:27",
        "upload_time_iso_8601": "2022-11-01T13:31:27.963865Z",
        "url": "https://files.pythonhosted.org/packages/72/df/c89e98bb1d0c4dbf76d506f5c512de31455415ad8d7c13b9893b417dd3da/hl_vt100-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "72dfc89e98bb1d0c4dbf76d506f5c512de31455415ad8d7c13b9893b417dd3da",
        "md5": "af19321cad0ddc6be80fc2026d16f98a",
        "sha256": "12e60205b6bed9419b03e13e8a3f9c19a760136aceb1ebe8f703779429f56c64"
      },
      "downloads": -1,
      "filename": "hl_vt100-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "af19321cad0ddc6be80fc2026d16f98a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18083,
      "upload_time": "2022-11-01T13:31:27",
      "upload_time_iso_8601": "2022-11-01T13:31:27.963865Z",
      "url": "https://files.pythonhosted.org/packages/72/df/c89e98bb1d0c4dbf76d506f5c512de31455415ad8d7c13b9893b417dd3da/hl_vt100-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}