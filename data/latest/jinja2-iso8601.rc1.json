{
  "info": {
    "author": null,
    "author_email": "David Baumgold <david@davidbaumgold.com>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Jinja2-ISO8601\n\nAdds `parse_date` and `format_date` filters to Jinja.\nThe [`iso8601`](https://github.com/micktwomey/pyiso8601) module handles date parsing,\nhence the name of this project. The\n[`.strftime()`](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)\nmethod handles date formatting.\n\n## Install\n\nFirst install the Python module:\n\n```bash\npip install jinja2-iso8601\n```\n\nThen add the extension into your Jinja environment:\n\n```python\nfrom jinja2 import Environment\n\njinja_env = Environment(extensions=['jinja2_iso8601.ISO8601Extension'])\n```\n\n## Use\n\nYou can now use two new filters when writing your Jinja templates:\n`parse_date` and `format_date`.\n`parse_date` will turn an ISO-8601 formatted string into a\n[Python `datetime`](https://docs.python.org/3/library/datetime.html#datetime-objects) object.\n`format_date` will call the `.strftime()` method on whatever you pass to it;\nthis works well with `datetime`, `date`, and `time` objects. You'll need to\nprovide a format string for the `format_date` filter;\n[check the Python documentation for how to write a format string](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes).\n\nFor example, let's say you have a variable called `datestr` which is\na string representing a datetime in valid ISO-8601 format, such as\n`\"2022-09-19T14:38:34.213001\"`. You can write your Jinja template like this:\n\n```jinja\nno filter: {{ datestr }}\nparsed: {{ datestr|parse_date }}\nformatted: {{ datestr|parse_date|format_date(\"%a, %b %d %Y\") }}\n```\n\nand the rendered result will be:\n\n```\nno filter: 2022-09-19T14:38:34.213001\nparsed: 2022-09-19 14:38:34.213001\nformatted: Mon, Sep 19 2022\n```\n\n## Timezones\n\nIn Python, date and time objects may include timezone information.\nDate and time objects that have an associated timezone are \"aware\", and\nthose that do not have an associated timezone are \"naive\".\n\nBy default, when parsing ISO-8601 strings without any timezone information,\nthe result is a \"naive\" datetime object. However, in some cases, you may\nwant to assume a default timezone, so that you always get an \"aware\"\ndatetime object even if no timezone is specified. For example, if you know\nthat the ISO-8601 string is in the UTC timezone, you may want the\n`parse_date` filter to return an \"aware\" datetime with the UTC timezone.\n\nThe `default_timezone` value on the Jinja environment controls which\ntimezone to use when none is specified in the string. By default, this\nvalue is `None`, which makes `parse_date` return a \"naive\" datetime.\nHere's how to make all datetimes parse as UTC:\n\n```python\nfrom datetime import timezone\nfrom jinja2 import Environment\n\njinja_env = Environment(extensions=['jinja2_iso8601.ISO8601Extension'])\njinja_env.default_timezone = timezone.utc\n```\n\n## See Also\n\nThese filters can be paired with other Jinja filters that process datetimes,\nsuch as [`jinja2_humanize_extension`](https://github.com/metwork-framework/jinja2_humanize_extension).\nYou can parse strings into datetime using the `parse_date` filter from this\nproject, and then \"humanize\" the datetime using the `humanize_naturalday` filter\nfrom `jinja2_humanize_extension`. They work together seamlessly!\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "jinja2_iso8601",
    "package_url": "https://pypi.org/project/jinja2_iso8601/",
    "platform": null,
    "project_url": "https://pypi.org/project/jinja2_iso8601/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/jinja2_iso8601/1.0.0/",
    "requires_dist": [
      "Jinja2 >=3.1",
      "iso8601 >=1.0",
      "pytest >=7.1 ; extra == \"test\""
    ],
    "requires_python": null,
    "summary": "Adds `parse_date` and `format_date` filters to Jinja.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15146747,
  "releases": {
    "1.0.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "c8645be21f41fa1e1606792002d3361f4484ac23aeedc20d1507d471f11270c8",
          "md5": "a5e8b7f04e7258c663bdb7fe96ac9ac3",
          "sha256": "0073a7b5ef39c9d9e355527c0ce44c1bb5e81f16fa5ccecd703ea1a024d6b1a6"
        },
        "downloads": -1,
        "filename": "jinja2_iso8601-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5e8b7f04e7258c663bdb7fe96ac9ac3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 2664,
        "upload_time": "2022-09-19T19:48:12",
        "upload_time_iso_8601": "2022-09-19T19:48:12.307359Z",
        "url": "https://files.pythonhosted.org/packages/c8/64/5be21f41fa1e1606792002d3361f4484ac23aeedc20d1507d471f11270c8/jinja2_iso8601-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "aa8d50c26253e2cf3c8fd26ecf78efa3773aa160c453a1ea320cfedb935ad77a",
          "md5": "64b95decb10bd6ca109f1fbcb1819e77",
          "sha256": "4e1913997cae4576425b5d0399743008b85ae10fc4d9a1a8833648fba9f56fbc"
        },
        "downloads": -1,
        "filename": "jinja2_iso8601-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "64b95decb10bd6ca109f1fbcb1819e77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2970,
        "upload_time": "2022-09-19T19:48:15",
        "upload_time_iso_8601": "2022-09-19T19:48:15.199999Z",
        "url": "https://files.pythonhosted.org/packages/aa/8d/50c26253e2cf3c8fd26ecf78efa3773aa160c453a1ea320cfedb935ad77a/jinja2_iso8601-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "c8645be21f41fa1e1606792002d3361f4484ac23aeedc20d1507d471f11270c8",
        "md5": "a5e8b7f04e7258c663bdb7fe96ac9ac3",
        "sha256": "0073a7b5ef39c9d9e355527c0ce44c1bb5e81f16fa5ccecd703ea1a024d6b1a6"
      },
      "downloads": -1,
      "filename": "jinja2_iso8601-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a5e8b7f04e7258c663bdb7fe96ac9ac3",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 2664,
      "upload_time": "2022-09-19T19:48:12",
      "upload_time_iso_8601": "2022-09-19T19:48:12.307359Z",
      "url": "https://files.pythonhosted.org/packages/c8/64/5be21f41fa1e1606792002d3361f4484ac23aeedc20d1507d471f11270c8/jinja2_iso8601-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "aa8d50c26253e2cf3c8fd26ecf78efa3773aa160c453a1ea320cfedb935ad77a",
        "md5": "64b95decb10bd6ca109f1fbcb1819e77",
        "sha256": "4e1913997cae4576425b5d0399743008b85ae10fc4d9a1a8833648fba9f56fbc"
      },
      "downloads": -1,
      "filename": "jinja2_iso8601-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "64b95decb10bd6ca109f1fbcb1819e77",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2970,
      "upload_time": "2022-09-19T19:48:15",
      "upload_time_iso_8601": "2022-09-19T19:48:15.199999Z",
      "url": "https://files.pythonhosted.org/packages/aa/8d/50c26253e2cf3c8fd26ecf78efa3773aa160c453a1ea320cfedb935ad77a/jinja2_iso8601-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}