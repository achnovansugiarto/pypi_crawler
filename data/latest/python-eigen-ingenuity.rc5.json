{
  "info": {
    "author": "Murray Callander",
    "author_email": "info@eigen.co",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "ABOUT\n============\nThe python-eigen-ingenuity library is used to query data from the Eigen Ingenuity system for use in the python environment, and to upload data to the \n\nREQUIREMENTS\n============\n\nInstalling python-eigen-ingenuity requires python 3\n\nINSTALL\n=======\n\nInstall python 3, then in the terminal run:\n\n```\npip install python-eigen-ingenuity\n```\n\nAll third party library requirements should be automatically acquired.\n\nGETTING STARTED\n-------\nBegin by Importing the module with\n\n```\nimport eigeningenuity as eigen\n```\n\nTo use this module, you must first set an Ingenuity server to query, and a datasource within the server.\n\nFor example, with Ingenuity instance \"https://demo.eigen.co/\" and datasource \"Demo-influxdb\",\n\n\n```\nserver = eigen.EigenServer(\"https://demo.eigen.co/\")\ndemo = eigen.get_historian(\"Demo-influxdb\",server)\n```\nAlternatively, it is possible to set the Ingenuity instance as the environmental variable \"EIGENSERVER\",\n```\nos.environ[\"EIGENSERVER\"] = \"https://demo.eigen.co/\"\ndemo = get_historian(\"Demo-influxdb\")\n```\n\nAlternatively, it is possible to set the Ingenuity instance as the environmental variable \"EIGENSERVER\",\n```\nos.environ[\"EIGENSERVER\"] = \"https://demo.eigen.co/\"\ndemo = get_historian(\"Demo-influxdb\")\n```\n\nIf the datasource of interest is the default datasource for the ingenuity instance, it can be omitted:\n\n```\nos.environ[\"EIGENSERVER\"] = \"https://demo.eigen.co/\"\ndemo = get_historian()\n```\n\nDATA FORMAT\n===\n\nOnce the server and datasource have been configured, the historian data can be queried through functions we define in\nthe EXAMPLE FUNCTIONS section.\n\nThese functions can be used to query a single tag, or multiple tags at once. A tag in ingenuity with the form \"datasource/tagname\", \nwe query with, for example:\n\n```\ndatasource = eigen.get_historian(\"datasource\")\ntagdata = datasource.getCurrentDataPoints(\"tagname\")\n```\n\nDataPoint\n---\n\nMost functions return datapoint objects, each of which contains a Value, Timestamp, and status as below\n\n``````\n<class 'eigeningenuity.historian.DataPoint'>\n35 @ 2022-05-30 11:02:13 UTC - OK\n``````\n\nThis can be parsed with the following:\n\n``````\ndemo.getCurrentDataPoints(...)\n\nvalue = datapoint.value (35)\ntimestamp = datapoint.timestamp (1653904933.0)\nutcTime = datapoint.datetime (2022-05-30 11:02:13)\nstatus = datapoint.status (OK)\n``````\nHere the timestamp field is the timestamp in epoch seconds (seconds since January 1st 1970), and the utcTime field is a\npython datetime object\n\nAggregateDataSets\n---\n\nThe GetAggregates and getAggregateIntervals functions return data in AggregateDataSets rather than DataPoints, for example,\nin the case we requested all aggregates we might receive a set like:\n\n```\nAggregateDataSet[ start:2022-06-01 10:27:15 UTC end:2022-06-01 10:42:45 UTC - min:   33.00000     max:   38.00000     avg:   35.66667     var:   3.15476      stddev:   1.77616      numgood: 57   numnotgood: 0   ]]\n```\n\nAnd in this case, if we requested only min we would receive:\n\n```\nAggregateDataSet[ start:2022-06-01 10:27:15 UTC end:2022-06-01 10:42:45 UTC - min:   33.00000     max: None   avg: None   var:   0.00000      stddev:   0.00000      numgood: None   numnotgood: None   ]]\n```\n\nThese sets can be parsed with the following:\n\n``````\nAggSet = demo.getAggregates(...)\n\naggStart = AggSet.start     \naggEnd = AggSet.end    \naggMin = Aggset.min \naggMax = Aggset.max\naggAvg = Aggset.avg\naggVar = Aggset.var\naggStdDev = Aggset.stddev\naggNumGood = Aggset.numgood\naggNumBad = Aggset.numnotgood\n\n\n``````\n\nQuery Multiple tags\n===\n\nif multiple tags are queried in a single request, the data will be returned as a dictionary, with the tag IDs as its keys,\nthe individual dictionary entries will retain the same format returned when querying a single tag\n____\n\nFUNCTIONS\n==\nData Queries\n===\n\n#### The following functions are designed to help the user pull and process data from historians into a python environment\n\nlist_historians\n----\n\nFind all historians on the instance\n```\nfrom eigeningenuity import list_historians\nlist_historians(eigenserver)\n```\nWhere:\n- (Optional) eigenserver is the ingenuity instance of interest (If omitted will look for environmental variable EIGENSERVER)\n\nReturns a list of strings\n\nget_default_historian_name\n---\nFind the name of the default historian of the instance, if one exists\n```\nfrom eigeningenuity import get_default_historian_name\nget_default_historian_name(eigenserver)\n```\nWhere:\n- (Optional) eigenserver is the ingenuity instance of interest (If omitted will look for environmental variable EIGENSERVER)\n\nReturns a string, or None\n\ngetCurrentDataPoints\n----\nFind the most recent raw datapoint for each tag\n```\ndemo.getCurrentDataPoints(tags)\n```\nWhere:\n- tags is a list of IDs of tags to query\n\nReturns one datapoint object per tag\n\ncountPoints\n----\nFind the number of datapoints in the given time frame\n```\ndemo.countPoints(tag, start, end)\n```\nWhere:\n- tags is a list of IDs of tags to query\n- start is the datetime object (or epoch timestamp in ms) of the beginning of the query window\n- end is the datetime object (or epoch timestamp in ms) of the end of the query window\n\nReturns one integer per tag\n\ngetInterpolatedRange\n----\n\nFind a number of interpolated points of a tag, equally spaced over a set timeframe\n```\ndemo.getInterpolatedRange(tag, start, end, count)\n```\nWhere:\n- tags is a list of IDs of the tags to query\n- start is the datetime object (or epoch timestamp in ms) of the beginning of the query window\n- end is the datetime object (or epoch timestamp in ms) of the end of the query window\n- count is the total number of points to be returned\n\nReturns a list of count-many datapoints per tag\n\ngetInterpolatedpoints\n----\n\nFind datapoints at given timestamps\n```\ndemo.getInterpolatedPoints(tags, timestamps)\n```\nWhere:\n- tags is a list of IDs of the tags to query\n- timestamps is a list of timestamps at which to query data\n\nReturns a list of datapoints (one at each timestamp) per tag\n\ngetRawDataPoints\n----\n\nFind the first n Raw datapoints from a time window\n```\ndemo.getRawDataPoints(tags, start, end, count)\n```\nWhere:\n- tags is a list of IDs of the tags to query\n- start is the datetime object (or epoch timestamp in ms) of the beginning of the query window\n- end is the datetime object (or epoch timestamp in ms) of the end of the query window\n- (Optional) count is the maximum number of raw datapoints to return. (default is 1000)\n\nReturns a list of count-many datapoints per tag\n\ngetAggregates\n----\n\nFinds a set of aggregate values for tags over a timeframe\n```\ndemo.getAggregates(tags, start, end, count, aggfields)\n```\nWhere:\n- tags is a list of IDs of the tags to query\n- start is the datetime object (or epoch timestamp in ms) of the beginning of the query window\n- end is the datetime object (or epoch timestamp in ms) of the end of the query window\n- (Optional) count is the number of divisions to split the time window into (i.e. if time window is one day, and count is 2,\nwe return separate sets of aggregate data for first and second half of day). omit for count=1\n- (Optional) aggfields is a list of aggregate functions to calculate, a subset of \n[\"min\",\"max\",\"avg\",\"var\",\"stddev\",\"numgood\",\"numbad\"].  Leave blank to return all aggregates.\n\nReturns a list of count-many Aggregate Data Sets per tag\n\ngetAggregateIntervals\n----\n\nA variation of getAggregates which finds aggregates on fixed length intervals dividing the overall window\n```\ndemo.getAggregateInterval(tags, start, end, interval, aggfields)\n```\nWhere:\n- tags is a list of IDs of the tags to query\n- start is the datetime object (or epoch timestamp in ms) of the beginning of the query window\n- end is the datetime object (or epoch timestamp in ms) of the end of the query window\n- (Optional) interval is the length of the sub-intervals over which aggregates are calculated, it accepts values such as [\"1s\",\"1m\",\"1h\",\"1d\",\"1M\",\"1y\"]\nbeing 1 second, 1 minute, 1 hour etc. Default is whole time window.\n- (Optional) aggfields is a list of aggregate functions to calculate, a subset of \n[\"min\",\"max\",\"avg\",\"var\",\"stddev\",\"numgood\",\"numbad\"]. Default is all Aggregates.\n\nReturns a list of Aggregate Data Sets (One per interval) per tag\n\nlistDataTags\n----\n\nFind all tags in datasource, or all tags in datasource that match a search parameter\n```\ndemo.listDataTags(match)\n```\nWhere:\n- (optional) match is the regex wildcard to match tags to (i.e. DEMO* will match all tags beginning with DEMO, \\*DEMO* will match\nall tags containing DEMO, and *DEMO will match all tags ending with DEMO) (Leave blank to return all tags in historian)\n\nReturns a list of strings\n\ngetMetaData\n----\n\nFind units, unitMultiplier and description of each tag\n```\ndemo.getMetaData(tags)\n```\nWhere:\n- tags is a list of IDs of tags to query\n\nReturns a dict with keys [units, unitMultiplier, description] per tag\n\nData Upload\n===\n\n#### The following functions are intended for users to update/create historian tags using data processed/loaded in python.\n\n\ncreateDataTag\n----\n\nCreates a datatag with a specified ID, Unit type/label, and Description\n```\ndemo.createDataTag(Name, Units, Description)\n```\nWhere:\n- Name is the unique ID/Identifier of the tag\n- Units is the unit specifier of the data in the tag e.g. \"m/s\",\"Days\" etc. (This will be shown on axis in ingenuity trends)\n- Description is text/metadata describing the content/purpose of the tag (This will show up in search bar for ingenuity trends)\n\nReturns a boolean representing success/failure to create tag\n\nwriteDataPoints\n----\n\nWrites sets of datapoints to the historian\n```\nfrom eigeningenuity.historian import DataPoint\n\ndataPoints = []\npoint = DataPoint(value, timestamp, \"OK\")\ndataPoint = {tagName: point}\n\ndataPointList.append(dataPoint)\n\ndemo.writeDataPoints(dataPointList)\n```\nWhere:\n- value if the value of the datapoint at the timestamp\n- timestamp is the datetime object (or epoch timestamp in ms) of the point\n- \"OK\" is the status we give to a point that contains non-null data\n\nReturns a boolean representing success/failure to write data\n\n____\n\n\nLICENSE\n-------\nWith the datasource set, the historian data can be queried with functions such as,\n```\ndemo.getInterpolatedRange(tag,start,end,points)\ndemo.getCurrentDataPoints(tag)\ndemo.listDataTags()\n```\nWhere:\n- tag is the name of the tag to query\n- start is the epoch timestamp (ms) of the beginning of the query window\n- end is the epoch timestamp (ms) of the end of the query window\n- points is the number of points to be returned\n\nEach function will return an list, each element consisting of list of a value, timestamp and status, corresponding to a single point of data\n\nTo convert a Datetime (UTC or Local) to epoch, or vice-versa, you can use this tool: https://www.epochconverter.com/\n\nLICENSE\n-------\nApache License 2.0\n\n Copyright 2022 Eigen Ltd.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.eigen.co/",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-eigen-ingenuity",
    "package_url": "https://pypi.org/project/python-eigen-ingenuity/",
    "platform": null,
    "project_url": "https://pypi.org/project/python-eigen-ingenuity/",
    "project_urls": {
      "Homepage": "https://www.eigen.co/"
    },
    "release_url": "https://pypi.org/project/python-eigen-ingenuity/0.4.3/",
    "requires_dist": [
      "pandas",
      "requests",
      "urllib3"
    ],
    "requires_python": "",
    "summary": "A python library used to query data from the Eigen Ingenuity system",
    "version": "0.4.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17208415,
  "releases": {
    "0.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "432343e5ce62b4b36d0b9ba5c98327b0f39ad395965a23632be9a74d5a599570",
          "md5": "4d9d56acf568935eadddbf54cf7e00b7",
          "sha256": "b8084e4a2256b4e28625ee6d311afd2116dbb1450bc9510eb64aee2da5c5d5ab"
        },
        "downloads": -1,
        "filename": "python_eigen_ingenuity-0.3.7post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d9d56acf568935eadddbf54cf7e00b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15722,
        "upload_time": "2022-06-01T15:12:16",
        "upload_time_iso_8601": "2022-06-01T15:12:16.699883Z",
        "url": "https://files.pythonhosted.org/packages/43/23/43e5ce62b4b36d0b9ba5c98327b0f39ad395965a23632be9a74d5a599570/python_eigen_ingenuity-0.3.7post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f1a76d10250081719dd43002d6086bb8e7f6be14c3b8495f712d75776acc954",
          "md5": "89e4f2bfe41d1160d9c5cdb374eb739c",
          "sha256": "dfffcfc3e5fb26bb112ec73aaa0ce63016c83f130b474c9b4a2d2fc4d7cc5064"
        },
        "downloads": -1,
        "filename": "python_eigen_ingenuity-0.3.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89e4f2bfe41d1160d9c5cdb374eb739c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15176,
        "upload_time": "2022-05-31T13:36:34",
        "upload_time_iso_8601": "2022-05-31T13:36:34.724391Z",
        "url": "https://files.pythonhosted.org/packages/4f/1a/76d10250081719dd43002d6086bb8e7f6be14c3b8495f712d75776acc954/python_eigen_ingenuity-0.3.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70ad8ee9579d1cb9224180e44f57b94538e2a11d27625f6c6c212506f1c1adc8",
          "md5": "e3f60da3150fe8f466eb0b2895f22b97",
          "sha256": "bdef371a64b4d122a1053e90f3b4eb6f92132c73007b63a89d16c1b3b5248453"
        },
        "downloads": -1,
        "filename": "python-eigen-ingenuity-0.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "e3f60da3150fe8f466eb0b2895f22b97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15865,
        "upload_time": "2022-05-31T13:36:36",
        "upload_time_iso_8601": "2022-05-31T13:36:36.233844Z",
        "url": "https://files.pythonhosted.org/packages/70/ad/8ee9579d1cb9224180e44f57b94538e2a11d27625f6c6c212506f1c1adc8/python-eigen-ingenuity-0.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2008fd8e926972613a34537ee366bbecd1845f3926011b9655fee06ec6d05ff6",
          "md5": "e2780150e182b7aa73cd0828acbccccd",
          "sha256": "57669a57efaa4d8cd211065ba23ac9c69643fe8ae8470af7172c002d7c944d5e"
        },
        "downloads": -1,
        "filename": "python_eigen_ingenuity-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2780150e182b7aa73cd0828acbccccd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28259,
        "upload_time": "2022-11-30T16:15:59",
        "upload_time_iso_8601": "2022-11-30T16:15:59.431042Z",
        "url": "https://files.pythonhosted.org/packages/20/08/fd8e926972613a34537ee366bbecd1845f3926011b9655fee06ec6d05ff6/python_eigen_ingenuity-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3a2dc3013829e31900bf7377535c1b4147857503e9d4e7033d6b1f1d4634922",
          "md5": "5d7cb92877d9e9f1f30840b0a4d11259",
          "sha256": "1c339eab2bccfd3150a801ee545ef84c07d2f16e8ce3237c566edffb9b7087a6"
        },
        "downloads": -1,
        "filename": "python-eigen-ingenuity-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5d7cb92877d9e9f1f30840b0a4d11259",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25761,
        "upload_time": "2022-11-30T16:16:00",
        "upload_time_iso_8601": "2022-11-30T16:16:00.866852Z",
        "url": "https://files.pythonhosted.org/packages/e3/a2/dc3013829e31900bf7377535c1b4147857503e9d4e7033d6b1f1d4634922/python-eigen-ingenuity-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c455ca380053b73554d06f6b4b28d39faf11b4635b668f1537fe8a8487bd2e2",
          "md5": "ec6ad1a5e0e4f4c379e8a342b3b2741a",
          "sha256": "eb9edfea22977d95499ee26f905739c22a56efb6cd9066b28c203eafe3508200"
        },
        "downloads": -1,
        "filename": "python_eigen_ingenuity-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec6ad1a5e0e4f4c379e8a342b3b2741a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28446,
        "upload_time": "2022-12-01T13:19:53",
        "upload_time_iso_8601": "2022-12-01T13:19:53.552290Z",
        "url": "https://files.pythonhosted.org/packages/2c/45/5ca380053b73554d06f6b4b28d39faf11b4635b668f1537fe8a8487bd2e2/python_eigen_ingenuity-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b98fe654da67cf2d55acb06a75cabc494639fb66e6632e6448a9fa219c587d43",
          "md5": "92593f83927b54c3a5e7c74dc1e1c89f",
          "sha256": "bdb30f9e359c08a8891990016250b9149d5b7b7f966c3df17d0cb021f9b59126"
        },
        "downloads": -1,
        "filename": "python-eigen-ingenuity-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "92593f83927b54c3a5e7c74dc1e1c89f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25973,
        "upload_time": "2022-12-01T13:19:54",
        "upload_time_iso_8601": "2022-12-01T13:19:54.878099Z",
        "url": "https://files.pythonhosted.org/packages/b9/8f/e654da67cf2d55acb06a75cabc494639fb66e6632e6448a9fa219c587d43/python-eigen-ingenuity-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08c19e2eb438c19ab27413d34b84a8d5a08ab012155fb43affb3c51d34baff55",
          "md5": "25653097797ca3ddd2f24e92e6880d72",
          "sha256": "9ed44490412587b3efa92f494ecc0395809f2f93f77d58906c2249c7a772900a"
        },
        "downloads": -1,
        "filename": "python_eigen_ingenuity-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25653097797ca3ddd2f24e92e6880d72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28474,
        "upload_time": "2023-03-08T14:50:43",
        "upload_time_iso_8601": "2023-03-08T14:50:43.734636Z",
        "url": "https://files.pythonhosted.org/packages/08/c1/9e2eb438c19ab27413d34b84a8d5a08ab012155fb43affb3c51d34baff55/python_eigen_ingenuity-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6f3490440787e83af949bdf62533f964dac34490ac5eb37380d690fc57134e5",
          "md5": "8e69d0995686b3fdef5c5ea991703fca",
          "sha256": "627ac9bc5ac3637a07f9d02e9da328035c448859104eca4c04f6f42c7887a5cd"
        },
        "downloads": -1,
        "filename": "python-eigen-ingenuity-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8e69d0995686b3fdef5c5ea991703fca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26098,
        "upload_time": "2023-03-08T14:50:45",
        "upload_time_iso_8601": "2023-03-08T14:50:45.542125Z",
        "url": "https://files.pythonhosted.org/packages/f6/f3/490440787e83af949bdf62533f964dac34490ac5eb37380d690fc57134e5/python-eigen-ingenuity-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7a14b86bf0e7482b07b8720cbb7ac31e891b1bf7829a417b96da503f7cd502a",
          "md5": "20dc0fefacd4fd197dcc335ddcd559a7",
          "sha256": "296601b03b3f91af474ae4c9612d54ef71e012f5eda0418c764ee7055f02f02a"
        },
        "downloads": -1,
        "filename": "python_eigen_ingenuity-0.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20dc0fefacd4fd197dcc335ddcd559a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28465,
        "upload_time": "2023-03-08T15:23:58",
        "upload_time_iso_8601": "2023-03-08T15:23:58.034890Z",
        "url": "https://files.pythonhosted.org/packages/e7/a1/4b86bf0e7482b07b8720cbb7ac31e891b1bf7829a417b96da503f7cd502a/python_eigen_ingenuity-0.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41b60bf8a0a016d80302ed322da2d65ab9a36f0940e28cc4b50fa986f623cee8",
          "md5": "bb4bb0fc0cf203e7cb6a75bb8a4462ca",
          "sha256": "b1cb911da72886a5320db5a35e9ca59db48129465eb929ebb975c49fdf200056"
        },
        "downloads": -1,
        "filename": "python-eigen-ingenuity-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bb4bb0fc0cf203e7cb6a75bb8a4462ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26093,
        "upload_time": "2023-03-08T15:23:59",
        "upload_time_iso_8601": "2023-03-08T15:23:59.289407Z",
        "url": "https://files.pythonhosted.org/packages/41/b6/0bf8a0a016d80302ed322da2d65ab9a36f0940e28cc4b50fa986f623cee8/python-eigen-ingenuity-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e7a14b86bf0e7482b07b8720cbb7ac31e891b1bf7829a417b96da503f7cd502a",
        "md5": "20dc0fefacd4fd197dcc335ddcd559a7",
        "sha256": "296601b03b3f91af474ae4c9612d54ef71e012f5eda0418c764ee7055f02f02a"
      },
      "downloads": -1,
      "filename": "python_eigen_ingenuity-0.4.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "20dc0fefacd4fd197dcc335ddcd559a7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 28465,
      "upload_time": "2023-03-08T15:23:58",
      "upload_time_iso_8601": "2023-03-08T15:23:58.034890Z",
      "url": "https://files.pythonhosted.org/packages/e7/a1/4b86bf0e7482b07b8720cbb7ac31e891b1bf7829a417b96da503f7cd502a/python_eigen_ingenuity-0.4.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "41b60bf8a0a016d80302ed322da2d65ab9a36f0940e28cc4b50fa986f623cee8",
        "md5": "bb4bb0fc0cf203e7cb6a75bb8a4462ca",
        "sha256": "b1cb911da72886a5320db5a35e9ca59db48129465eb929ebb975c49fdf200056"
      },
      "downloads": -1,
      "filename": "python-eigen-ingenuity-0.4.3.tar.gz",
      "has_sig": false,
      "md5_digest": "bb4bb0fc0cf203e7cb6a75bb8a4462ca",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26093,
      "upload_time": "2023-03-08T15:23:59",
      "upload_time_iso_8601": "2023-03-08T15:23:59.289407Z",
      "url": "https://files.pythonhosted.org/packages/41/b6/0bf8a0a016d80302ed322da2d65ab9a36f0940e28cc4b50fa986f623cee8/python-eigen-ingenuity-0.4.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}