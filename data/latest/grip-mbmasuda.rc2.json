{
  "info": {
    "author": "Mari Masuda",
    "author_email": "mbmasuda.github@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# generic-rate-limited-item-processor\n\n## What this package contains\n\nThis package contains the code that will allow you to create a queue or stack\nof items to process. The default behavior is a queue, but the internal implementation\nuses a deque so you can easily subclass this code and override the methods that\npush and pop items to change the behavior from a queue to a stack.\n\nBasically, there is a class called `GenericRateLimitedItemProcessor` that is a\nthread and when the thread is started, the items in the deque of things to process\nare popped off one at a time and whatever they are supposed to do gets started\nwhen the `GenericRateLimitedItemProcessor` pops the next item and calls the item's\n`start()` method.\n\nEach item in the `GenericRateLimitedItemProcessor`'s deque must implement a `start()`\nmethod, but this is checked generically via a metaclass implementation of\n`__instancecheck__` so that any callable `start` attribute anywhere in the MRO will\nsatisfy this requirement. Thus, items in the `GenericRateLimitedItemProcessor`'s deque\ncan be of mixed types and include threads and simple non-threads as well.\n\nBecause subclasses of `threading.Thread` will obviously already have a `start()` method\nsince that is how the thread's `run()` implementation gets started, that is the easy\nway of making items to be processed. However, if you don't need anything complicated\nand the overhead of making a bunch of threads is unneccessary, you can implement the\nsimnplest class possible, like this:\n\n```python\nclass SimplestPossibleItemThatCanBeProcessed:\n    def start(self):\n        pass\n```\n\nand replace the `pass` with whatever you need to happen.\n\n\n## Installation\n\n```bash\n$ python3 -m pip install grip-mbmasuda\n```\n\n\n## Example usage (not a comprehensive tutorial)\n\n```python\nfrom src.grip.grip import GenericRateLimitedItemProcessor\n\n\nclass NumberItem:\n    def start(self):\n        return 42\n\n\nclass SayHiItem:\n    def start(self):\n        return 'hi!'\n\n# make some items; you can mix and match and have different types of items processed by\n# the same processor\nitems = [NumberItem() for x in range(5)] + [SayHiItem() for x in range(5)]\n\n# create two item processors that will process the same data\n# the only requirement about the items is that they all have a callable start() method\n# this item processor will process as fast as possible\nitem_processor_that_processes_as_fast_as_possible = GenericRateLimitedItemProcessor(iterable=items)\n\n# this one's processing rate is limited to 1000 items in 1.25 seconds\nitem_processor_with_rate_limited_to_1000_items_in_1.25_seconds = GenericRateLimitedItemProcessor(iterable=items,\n                                                                                                 num_items=1000,\n                                                                                                 num_seconds=1.25)\n\n\n# start processing!\nitem_processor_that_processes_as_fast_as_possible.start()\nitem_processor_with_rate_limited_to_1000_items_in_1.25_seconds.start()\n\n# wait for all items's start() to be called\n# if you want your items to be processed asynchronosuly, you should have your items\n# be a subclass of threading.Thread, or the processing they do should be extremely\n# minimal and not block, otherwise calling start() on the subsequent items in the item\n# processor could be delayed and your item processor will not appear to be processing\n# at the rate you think it should be processing at\nitem_processor_that_processes_as_fast_as_possible.join()\nitem_processor_with_rate_limited_to_1000_items_in_1.25_seconds.join()\n\n# the items where calling start() raised an exception are collected in this deque\nproblem_items = item_processor_that_processes_as_fast_as_possible.unsuccessfully_started\n\n# the items where calling start() was successful and did not raise are collected in this deque\ngood_items = item_processor_that_processes_as_fast_as_possible.successfully_started\n\n# just because an item ends up in the successfully_started deque does not mean your item's\n# processing code exited without errors; it only means that the item's start() was called\n# without raising an excaption and you are responsible for going through the items in the\n# successfully_started deque to check status. For example, if the item is a thread whose\n# run() has code that makes an HTTP request, then you are responsible for checking the\n# request's response to ensure it did not come back with an HTTP 4xx or 5xx (or whatever\n# you need it to do)\n```\n\n\n## Testing\n\n\n```text\n$ py.test -vvvv\n====================================================== test session starts ======================================================\nplatform darwin -- Python 3.9.6, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- <redacted>\ncachedir: <redacted>\nrootdir: <redacted>\ncollected 26 items\n\ntest/test_everything.py::TestPorcelain::test_make_new_instances PASSED                                                    [  3%]\ntest/test_everything.py::TestPorcelain::test_isinstance_works_correctly PASSED                                            [  7%]\ntest/test_everything.py::TestPorcelain::test_simplest_possible_item_that_can_be_processed PASSED                          [ 11%]\ntest/test_everything.py::TestPorcelain::test_mixed_and_matched_items PASSED                                               [ 15%]\ntest/test_everything.py::TestPorcelain::test_valid_items_can_be_processed PASSED                                          [ 19%]\ntest/test_everything.py::TestPorcelain::test_rate_limiting_works[100-1] PASSED                                            [ 23%]\ntest/test_everything.py::TestPorcelain::test_rate_limiting_works[3-1.98324729923487] PASSED                               [ 26%]\ntest/test_everything.py::TestPorcelain::test_rate_limiting_works[2344-0.3] PASSED                                         [ 30%]\ntest/test_everything.py::TestPlumbing::test_make_new_instance[iterable_data0-None] PASSED                                 [ 34%]\ntest/test_everything.py::TestPlumbing::test_make_new_instance[iterable_data1-4] PASSED                                    [ 38%]\ntest/test_everything.py::TestPlumbing::test_make_new_instance[iterable_data2-None] PASSED                                 [ 42%]\ntest/test_everything.py::TestPlumbing::test_make_new_instance[iterable_data3-7] PASSED                                    [ 46%]\ntest/test_everything.py::TestPlumbing::test_make_new_instance[iterable_data4-3] PASSED                                    [ 50%]\ntest/test_everything.py::TestPlumbing::test_make_new_instance[abcdefg-None] PASSED                                        [ 53%]\ntest/test_everything.py::TestPlumbing::test_get_next_item[iterable_data0-None] PASSED                                     [ 57%]\ntest/test_everything.py::TestPlumbing::test_get_next_item[iterable_data1-4] PASSED                                        [ 61%]\ntest/test_everything.py::TestPlumbing::test_get_next_item[iterable_data2-None] PASSED                                     [ 65%]\ntest/test_everything.py::TestPlumbing::test_get_next_item[iterable_data3-7] PASSED                                        [ 69%]\ntest/test_everything.py::TestPlumbing::test_get_next_item[iterable_data4-3] PASSED                                        [ 73%]\ntest/test_everything.py::TestPlumbing::test_get_next_item[abcdefg-None] PASSED                                            [ 76%]\ntest/test_everything.py::TestPlumbing::test_append_item[iterable_data0-None] PASSED                                       [ 80%]\ntest/test_everything.py::TestPlumbing::test_append_item[iterable_data1-4] PASSED                                          [ 84%]\ntest/test_everything.py::TestPlumbing::test_append_item[iterable_data2-None] PASSED                                       [ 88%]\ntest/test_everything.py::TestPlumbing::test_append_item[iterable_data3-7] PASSED                                          [ 92%]\ntest/test_everything.py::TestPlumbing::test_append_item[iterable_data4-3] PASSED                                          [ 96%]\ntest/test_everything.py::TestPlumbing::test_append_item[abcdefg-None] PASSED                                              [100%]\n\n====================================================== 26 passed in 3.95s =======================================================\n```\n\n\n\n## How to get in touch\n\nPlease email me at <mbmasuda.github@gmail.com>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mbmasuda/generic-rate-limited-item-processor",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "grip-mbmasuda",
    "package_url": "https://pypi.org/project/grip-mbmasuda/",
    "platform": "",
    "project_url": "https://pypi.org/project/grip-mbmasuda/",
    "project_urls": {
      "Homepage": "https://github.com/mbmasuda/generic-rate-limited-item-processor"
    },
    "release_url": "https://pypi.org/project/grip-mbmasuda/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Generic rate-limited item processor",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11188450,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4abec9bc80480a9cecc92293cc41b21e66774ed2a05dc16443ea2761dc20556e",
          "md5": "66479b4c21ea1e3c451f39d06f88872e",
          "sha256": "5f5481646410a52d5b1953861b2be101c3433d7fb4915017bd9543bc3f69d8a0"
        },
        "downloads": -1,
        "filename": "grip_mbmasuda-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66479b4c21ea1e3c451f39d06f88872e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7349,
        "upload_time": "2021-08-16T08:37:29",
        "upload_time_iso_8601": "2021-08-16T08:37:29.970514Z",
        "url": "https://files.pythonhosted.org/packages/4a/be/c9bc80480a9cecc92293cc41b21e66774ed2a05dc16443ea2761dc20556e/grip_mbmasuda-0.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "I messed something up when uploading to PyPI"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c34d20283d8ac2948bf2c40e4f336e0df26067395552d94a66e53eb554b495a6",
          "md5": "20d6b4e0d2c1df7350c2fadc46beff64",
          "sha256": "0825dd60b565446c4d974a2a12e4516096ddf140b896be27f928cea618ffcf97"
        },
        "downloads": -1,
        "filename": "grip-mbmasuda-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "20d6b4e0d2c1df7350c2fadc46beff64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10198,
        "upload_time": "2021-08-16T08:37:31",
        "upload_time_iso_8601": "2021-08-16T08:37:31.807945Z",
        "url": "https://files.pythonhosted.org/packages/c3/4d/20283d8ac2948bf2c40e4f336e0df26067395552d94a66e53eb554b495a6/grip-mbmasuda-0.1.tar.gz",
        "yanked": true,
        "yanked_reason": "I messed something up when uploading to PyPI"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df71c1d5bb23642b0b58fecb7d6fa5f4ee693f241cb2ff1a70137406e2f5eaa1",
          "md5": "68f6359a4258018ee6e0af4c9ab5e96f",
          "sha256": "f2506d62ef4d30965d537079b08caa496e38fe59a2193b62c3df1e19d4956eaa"
        },
        "downloads": -1,
        "filename": "grip_mbmasuda-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68f6359a4258018ee6e0af4c9ab5e96f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7375,
        "upload_time": "2021-08-16T08:52:50",
        "upload_time_iso_8601": "2021-08-16T08:52:50.802783Z",
        "url": "https://files.pythonhosted.org/packages/df/71/c1d5bb23642b0b58fecb7d6fa5f4ee693f241cb2ff1a70137406e2f5eaa1/grip_mbmasuda-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "598ac9f20393988fb237d3d3ce0b4e23bd72e4d06e066548ae0c91e669bd5edd",
          "md5": "e12d32dc71aa138b160766da9a725640",
          "sha256": "a6ba680d10a87926eb1515f0b3a640db8b21cfcb2ad2d5ffdafb64eb9ba5bbe9"
        },
        "downloads": -1,
        "filename": "grip-mbmasuda-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e12d32dc71aa138b160766da9a725640",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10152,
        "upload_time": "2021-08-16T08:52:52",
        "upload_time_iso_8601": "2021-08-16T08:52:52.418781Z",
        "url": "https://files.pythonhosted.org/packages/59/8a/c9f20393988fb237d3d3ce0b4e23bd72e4d06e066548ae0c91e669bd5edd/grip-mbmasuda-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df71c1d5bb23642b0b58fecb7d6fa5f4ee693f241cb2ff1a70137406e2f5eaa1",
        "md5": "68f6359a4258018ee6e0af4c9ab5e96f",
        "sha256": "f2506d62ef4d30965d537079b08caa496e38fe59a2193b62c3df1e19d4956eaa"
      },
      "downloads": -1,
      "filename": "grip_mbmasuda-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "68f6359a4258018ee6e0af4c9ab5e96f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7375,
      "upload_time": "2021-08-16T08:52:50",
      "upload_time_iso_8601": "2021-08-16T08:52:50.802783Z",
      "url": "https://files.pythonhosted.org/packages/df/71/c1d5bb23642b0b58fecb7d6fa5f4ee693f241cb2ff1a70137406e2f5eaa1/grip_mbmasuda-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "598ac9f20393988fb237d3d3ce0b4e23bd72e4d06e066548ae0c91e669bd5edd",
        "md5": "e12d32dc71aa138b160766da9a725640",
        "sha256": "a6ba680d10a87926eb1515f0b3a640db8b21cfcb2ad2d5ffdafb64eb9ba5bbe9"
      },
      "downloads": -1,
      "filename": "grip-mbmasuda-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e12d32dc71aa138b160766da9a725640",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10152,
      "upload_time": "2021-08-16T08:52:52",
      "upload_time_iso_8601": "2021-08-16T08:52:52.418781Z",
      "url": "https://files.pythonhosted.org/packages/59/8a/c9f20393988fb237d3d3ce0b4e23bd72e4d06e066548ae0c91e669bd5edd/grip-mbmasuda-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}