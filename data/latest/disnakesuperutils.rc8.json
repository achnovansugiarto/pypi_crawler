{
  "info": {
    "author": "koyashie07, adam7100 and Ariz0001",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "<h1 align=\"center\">disnake-super-utils</h1>\n\n<p align=\"center\">\n  <a href=\"https://codefactor.io/repository/github/Ariz-z/disnake-super-utils/\"><img src=\"https://img.shields.io/codefactor/grade/github/Ariz-z/disnake-super-utils?style=flat-square\" /></a>\n  <a href=\"https://discord.gg/zhwcpTBBeC\"><img src=\"https://img.shields.io/discord/863388828734586880?logo=discord&color=blue&style=flat-square\" /></a>\n  <a href=\"https://pepy.tech/project/disnakesuperutils\"><img src=\"https://img.shields.io/pypi/dm/disnakesuperutils?color=green&style=flat-square\" /></a>\n  <a href=\"https://pypi.org/project/disnakesuperutils/\"><img src=\"https://img.shields.io/pypi/v/disnakesuperutils?style=flat-square\" /></a>\n  <a href=\"\"><img src=\"https://img.shields.io/pypi/l/disnakesuperutils?style=flat-square\" /></a>\n  <a href=\"https://github.com/psf/black\"><img src=\"https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square\">\n    <br/>\n  <a href=\"https://disnake-super-utils.gitbook.io/disnake-super-utils/\">Documentation</a>\n  <a href=\"https://discordsuperutils.readthedocs.io/en/latest/\">Secondary Documentation</a>\n</p>\n\n<p align=\"center\">\n   A modern python module including many useful features that make discord bot programming extremely easy.\n    <br/>\n   <b>The documentation is not done. if you have any questions, feel free to ask them in our <a href=\"https://discord.gg/zhwcpTBBeC\">discord server.</a></b>\n</p>\n\nFeatures\n-------------\n\n\n- Very easy to use and user-friendly.\n- Object Oriented.\n- Modern Leveling Manager.\n- Modern Music/Audio playing manager. [Lavalink and FFmpeg support]\n- Modern Async Database Manager (SQLite, MongoDB, PostgreSQL, MySQL, MariaDB).\n- Modern Paginator.\n- Modern Reaction Manager.\n- Modern Economy Manager.\n- Modern Image Manager (PIL).\n- Modern Invite Tracker.\n- Modern Command Hinter.\n- Modern FiveM Server Parser.\n- Modern Birthday Manager.\n- Modern Prefix Manager.\n- Includes easy to use convertors.\n- Modern spotify client that is optimized for player fetching.\n- Modern Punishment Manager (Kick, Ban, Infractions, Mutes)\n- Modern Template Manager.\n- Modern CogManager that supports usage of managers in discord cogs.\n- Modern MessageFilter and AntiSpam.\n- Customizable ModMail Manager\n- Modern Youtube client that is optimized for player fetching.\n- And many more!\n(MORE COMING SOON!)\n\nInstallation\n--------------\n\nInstalling disnakeSuperUtils is very easy.\n\n```sh\npython -m pip install disnakeSuperUtils\n```\n\nExamples\n--------------\n\n### Leveling Example (With Role Manager) ###\n\n```py\nimport disnake\nfrom disnake.ext import commands\n\nimport disnakeSuperUtils\n\nbot = commands.Bot(command_prefix=\"-\", intents=discord.Intents.all())\nLevelingManager = disnakeSuperUtils.LevelingManager(bot, award_role=True)\nImageManager = (\n    disnakeSuperUtils.ImageManager()\n)  # LevelingManager uses ImageManager to create the rank command.\n\n\n@bot.event\nasync def on_ready():\n    database = disnakeSuperUtils.DatabaseManager.connect(...)\n    await LevelingManager.connect_to_database(database, [\"xp\", \"roles\", \"role_list\"])\n\n    print(\"Leveling manager is ready.\", bot.user)\n\n\n@LevelingManager.event()\nasync def on_level_up(message, member_data, roles):\n    await message.reply(\n        f\"You are now level {await member_data.level()}\"\n        + (f\", you have received the {roles[0]}\" f\" role.\" if roles else \"\")\n    )\n\n\n@bot.command()\nasync def rank(ctx):\n    member_data = await LevelingManager.get_account(ctx.author)\n\n    if not member_data:\n        await ctx.send(f\"I am still creating your account! please wait a few seconds.\")\n        return\n\n    guild_leaderboard = await LevelingManager.get_leaderboard(ctx.guild)\n    member = [x for x in guild_leaderboard if x.member == ctx.author.id]\n\n    image = await ImageManager.create_leveling_profile(\n        ctx.author,\n        member_data,\n        disnakeSuperUtils.Backgrounds.GALAXY,\n        (127, 255, 0),\n        guild_leaderboard.index(member[0]) + 1 if member else -1,\n        outline=5,\n    )\n    await ctx.send(file=image)\n\n\n@bot.command()\nasync def set_roles(ctx, interval: int, *roles: discord.Role):\n    await LevelingManager.set_interval(ctx.guild, interval)\n    await LevelingManager.set_roles(ctx.guild, roles)\n\n    await ctx.send(\n        f\"Successfully set the interval to {interval} and role list to {', '.join(role.name for role in roles)}\"\n    )\n\n\n@bot.command()\nasync def leaderboard(ctx):\n    guild_leaderboard = await LevelingManager.get_leaderboard(ctx.guild)\n    formatted_leaderboard = [\n        f\"Member: {x.member}, XP: {await x.xp()}\" for x in guild_leaderboard\n    ]\n\n    await disnakeSuperUtils.PageManager(\n        ctx,\n        disnakeSuperUtils.generate_embeds(\n            formatted_leaderboard,\n            title=\"Leveling Leaderboard\",\n            fields=25,\n            description=f\"Leaderboard of {ctx.guild}\",\n        ),\n    ).run()\n\n\nbot.run(\"token\")\n```\n\n![Leveling Manager Example](https://media.giphy.com/media/ey1Iv2HlYYLPy0bm9p/giphy.gif)\n\n### Playing Example ### \n\n```py\nfrom math import floor\n\nfrom disnake.ext import commands\n\nimport disnakeSuperUtils\nfrom disnakeSuperUtils import MusicManager\nimport disnake\n\nclient_id = \"\"\nclient_secret = \"\"\n\nbot = commands.Bot(command_prefix=\"-\", intents=discord.Intents.all())\n# MusicManager = MusicManager(bot, spotify_support=False)\n\n\nMusicManager = MusicManager(\n    bot, client_id=client_id, client_secret=client_secret, spotify_support=True\n)\n\n\n# if using spotify support use this instead ^^^\n\n\n@MusicManager.event()\nasync def on_music_error(ctx, error):\n    raise error  # add your error handling here! Errors are listed in the documentation.\n\n\n@MusicManager.event()\nasync def on_queue_end(ctx):\n    print(f\"The queue has ended in {ctx}\")\n    # You could wait and check activity, etc...\n\n\n@MusicManager.event()\nasync def on_inactivity_disconnect(ctx):\n    print(f\"I have left {ctx} due to inactivity..\")\n\n\n@MusicManager.event()\nasync def on_play(ctx, player):\n    await ctx.send(f\"Playing {player}\")\n\n\n@bot.event\nasync def on_ready():\n    # database = disnakeSuperUtils.DatabaseManager.connect(...)\n    # await MusicManager.connect_to_database(database, [\"playlists\"])\n\n    print(\"Music manager is ready.\", bot.user)\n\n\n@bot.command()\nasync def leave(ctx):\n    if await MusicManager.leave(ctx):\n        await ctx.send(\"Left Voice Channel\")\n\n\n@bot.command()\nasync def np(ctx):\n    if player := await MusicManager.now_playing(ctx):\n        duration_played = await MusicManager.get_player_played_duration(ctx, player)\n        # You can format it, of course.\n\n        await ctx.send(\n            f\"Currently playing: {player}, \\n\"\n            f\"Duration: {duration_played}/{player.duration}\"\n        )\n\n\n@bot.command()\nasync def join(ctx):\n    if await MusicManager.join(ctx):\n        await ctx.send(\"Joined Voice Channel\")\n\n\n@bot.group(invoke_without_command=True)\nasync def playlists(ctx, user: discord.User):\n    user_playlists = await MusicManager.get_user_playlists(user)\n\n    formatted_playlists = [\n        f\"ID: '{user_playlist.id}'\\nTitle: '{user_playlist.playlist.title}'\\nTotal Songs: {len(user_playlist.playlist.songs)}\"\n        for user_playlist in user_playlists\n    ]\n\n    embeds = disnakeSuperUtils.generate_embeds(\n        formatted_playlists,\n        f\"Playlists of {user}\",\n        f\"Shows {user.mention}'s playlists.\",\n        25,\n        string_format=\"{}\",\n    )\n\n    page_manager = disnakeSuperUtils.PageManager(ctx, embeds, public=True)\n    await page_manager.run()\n\n\n@playlists.command()\nasync def add(ctx, url: str):\n    added_playlist = await MusicManager.add_playlist(ctx.author, url)\n\n    if not added_playlist:\n        await ctx.send(\"Playlist URL not found!\")\n        return\n\n    await ctx.send(f\"Playlist added with ID {added_playlist.id}\")\n\n\n@playlists.command()\nasync def play(ctx, playlist_id: str):\n    # This command is just an example, and not something you should do.\n    # The saved playlist system is supposed to provide fast, easy and simple playing, and the user should not look for\n    # the right playlist id before playing, as that defeats the whole point.\n    # Instead of playing using a playlist id, I recommend playing using indexes.\n    # Please, if you are playing using indexes, find the playlist id you need by getting all the user's playlists\n    # and then finding the id from there.\n    # Find the user's playlists using MusicManager.get_user_playlists(ctx.author, partial=True).\n    # Make sure partial is True to speed up the fetching progress (incase you want to access the playlist data,\n    # you can set it to False, of course).\n    # Using these playlists, find the id the user wants, and play it (or whatever else you want to do with it).\n    # Be creative!\n\n    user_playlist = await MusicManager.get_playlist(ctx.author, playlist_id)\n\n    if not user_playlist:\n        await ctx.send(\"That playlist does not exist!\")\n        return\n\n    if not ctx.voice_client or not ctx.voice_client.is_connected():\n        await MusicManager.join(ctx)\n\n    async with ctx.typing():\n        players = await MusicManager.create_playlist_players(\n            user_playlist.playlist, ctx.author\n        )\n\n    if players:\n        if await MusicManager.queue_add(\n            players=players, ctx=ctx\n        ) and not await MusicManager.play(ctx):\n            await ctx.send(f\"Added playlist {user_playlist.playlist.title}\")\n\n    else:\n        await ctx.send(\"Query not found.\")\n\n\n@playlists.command()\nasync def remove(ctx, playlist_id: str):\n    user_playlist = await MusicManager.get_playlist(ctx.author, playlist_id)\n\n    if not user_playlist:\n        await ctx.send(f\"Playlist with id {playlist_id} is not found.\")\n        return\n\n    await user_playlist.delete()\n    await ctx.send(f\"Playlist {user_playlist.playlist.title} has been deleted\")\n\n\n@bot.command()\nasync def play(ctx, *, query: str):\n    if not ctx.voice_client or not ctx.voice_client.is_connected():\n        await MusicManager.join(ctx)\n\n    async with ctx.typing():\n        players = await MusicManager.create_player(query, ctx.author)\n\n    if players:\n        if await MusicManager.queue_add(\n            players=players, ctx=ctx\n        ) and not await MusicManager.play(ctx):\n            await ctx.send(\"Added to queue\")\n\n    else:\n        await ctx.send(\"Query not found.\")\n\n\n@bot.command()\nasync def lyrics(ctx, query: str = None):\n    if response := await MusicManager.lyrics(ctx, query):\n        title, author, query_lyrics = response\n\n        splitted = query_lyrics.split(\"\\n\")\n        res = []\n        current = \"\"\n        for i, split in enumerate(splitted):\n            if len(splitted) <= i + 1 or len(current) + len(splitted[i + 1]) > 1024:\n                res.append(current)\n                current = \"\"\n                continue\n            current += split + \"\\n\"\n\n        page_manager = disnakeSuperUtils.PageManager(\n            ctx,\n            [\n                discord.Embed(\n                    title=f\"Lyrics for '{title}' by '{author}', (Page {i + 1}/{len(res)})\",\n                    description=x,\n                )\n                for i, x in enumerate(res)\n            ],\n            public=True,\n        )\n        await page_manager.run()\n    else:\n        await ctx.send(\"No lyrics found.\")\n\n\n@bot.command()\nasync def pause(ctx):\n    if await MusicManager.pause(ctx):\n        await ctx.send(\"Player paused.\")\n\n\n@bot.command()\nasync def resume(ctx):\n    if await MusicManager.resume(ctx):\n        await ctx.send(\"Player resumed.\")\n\n\n@bot.command()\nasync def volume(ctx, volume: int):\n    await MusicManager.volume(ctx, volume)\n\n\n@bot.command()\nasync def loop(ctx):\n    is_loop = await MusicManager.loop(ctx)\n\n    if is_loop is not None:\n        await ctx.send(f\"Looping toggled to {is_loop}\")\n\n\n@bot.command()\nasync def shuffle(ctx):\n    is_shuffle = await MusicManager.shuffle(ctx)\n\n    if is_shuffle is not None:\n        await ctx.send(f\"Shuffle toggled to {is_shuffle}\")\n\n\n@bot.command()\nasync def autoplay(ctx):\n    is_autoplay = await MusicManager.autoplay(ctx)\n\n    if is_autoplay is not None:\n        await ctx.send(f\"Autoplay toggled to {is_autoplay}\")\n\n\n@bot.command()\nasync def queueloop(ctx):\n    is_loop = await MusicManager.queueloop(ctx)\n\n    if is_loop is not None:\n        await ctx.send(f\"Queue looping toggled to {is_loop}\")\n\n\n@bot.command()\nasync def complete_queue(ctx):\n    if ctx_queue := await MusicManager.get_queue(ctx):\n        formatted_queue = [\n            f\"Title: '{x.title}'\\nRequester: {x.requester and x.requester.mention}\\n\"\n            f\"Position: {i - ctx_queue.pos}\"\n            for i, x in enumerate(ctx_queue.queue)\n        ]\n\n        num_of_fields = 25\n\n        embeds = disnakeSuperUtils.generate_embeds(\n            formatted_queue,\n            \"Complete Song Queue\",\n            \"Shows the complete song queue.\",\n            num_of_fields,\n            string_format=\"{}\",\n        )\n\n        page_manager = disnakeSuperUtils.PageManager(\n            ctx, embeds, public=True, index=floor(ctx_queue.pos / 25)\n        )\n        await page_manager.run()\n\n\n@bot.command()\nasync def goto(ctx, position: int):\n    if ctx_queue := await MusicManager.get_queue(ctx):\n        new_pos = ctx_queue.pos + position\n        if not 0 <= new_pos < len(ctx_queue.queue):\n            await ctx.send(\"Position is out of bounds.\")\n            return\n\n        await MusicManager.goto(ctx, new_pos)\n        await ctx.send(f\"Moved to position {position}\")\n\n\n@bot.command()\nasync def history(ctx):\n    if ctx_queue := await MusicManager.get_queue(ctx):\n        formatted_history = [\n            f\"Title: '{x.title}'\\nRequester: {x.requester and x.requester.mention}\"\n            for x in ctx_queue.history\n        ]\n\n        embeds = disnakeSuperUtils.generate_embeds(\n            formatted_history,\n            \"Song History\",\n            \"Shows all played songs\",\n            25,\n            string_format=\"{}\",\n        )\n\n        page_manager = disnakeSuperUtils.PageManager(ctx, embeds, public=True)\n        await page_manager.run()\n\n\n@bot.command()\nasync def skip(ctx, index: int = None):\n    await MusicManager.skip(ctx, index)\n\n\n@bot.command()\nasync def queue(ctx):\n    if ctx_queue := await MusicManager.get_queue(ctx):\n        formatted_queue = [\n            f\"Title: '{x.title}\\nRequester: {x.requester and x.requester.mention}\"\n            for x in ctx_queue.queue[ctx_queue.pos + 1 :]\n        ]\n\n        embeds = disnakeSuperUtils.generate_embeds(\n            formatted_queue,\n            \"Queue\",\n            f\"Now Playing: {await MusicManager.now_playing(ctx)}\",\n            25,\n            string_format=\"{}\",\n        )\n\n        page_manager = disnakeSuperUtils.PageManager(ctx, embeds, public=True)\n        await page_manager.run()\n\n\n@bot.command()\nasync def rewind(ctx, index: int = None):\n    await MusicManager.previous(ctx, index, no_autoplay=True)\n\n\n@bot.command()\nasync def ls(ctx):\n    if queue := await MusicManager.get_queue(ctx):\n        loop = queue.loop\n        loop_status = None\n\n        if loop == disnakeSuperUtils.Loops.LOOP:\n            loop_status = \"Looping enabled.\"\n\n        elif loop == disnakeSuperUtils.Loops.QUEUE_LOOP:\n            loop_status = \"Queue looping enabled.\"\n\n        elif loop == disnakeSuperUtils.Loops.NO_LOOP:\n            loop_status = \"No loop enabled.\"\n\n        if loop_status:\n            await ctx.send(loop_status)\n\n\n@bot.command()\nasync def move(ctx, player_index: int, index: int):\n    await MusicManager.move(ctx, player_index, index)\n\n\nbot.run(\"token\")\n```\n\n![MusicManager Example](https://media.giphy.com/media/SF6K0zIVHl6RCQ0Aqk/giphy.gif)\n\nMore examples are listed in the examples folder.\n\nKnown Issues\n--------------\n\n- Removing an animated emoji wont be recognized as a reaction role, as it shows up as not animated for some reason, breaking the reaction matcher. (Discord API Related)\n- Leveling might call the on_level_up event multiple times, resulting in duplicate messages, caused by duplicate records in the leveling table. (Fixed)\n\nSupport\n--------------\n\n- **[Support Server](https://discord.gg/zhwcpTBBeC)**\n- **[Documentation](https://disnake-super-utils.gitbook.io/disnake-super-utils/)**\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Ariz-z/disnake-super-utils/archive/refs/tags/v0.3.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ariz-z/disnake-super-utils.git",
    "keywords": "discord,easy,disnake,music,download,links,images,videos,audio,bot,paginator,economy,reaction,reaction roles,database,database manager",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "disnakeSuperUtils",
    "package_url": "https://pypi.org/project/disnakeSuperUtils/",
    "platform": "",
    "project_url": "https://pypi.org/project/disnakeSuperUtils/",
    "project_urls": {
      "Download": "https://github.com/Ariz-z/disnake-super-utils/archive/refs/tags/v0.3.0.tar.gz",
      "Homepage": "https://github.com/Ariz-z/disnake-super-utils.git"
    },
    "release_url": "https://pypi.org/project/disnakeSuperUtils/0.9.2/",
    "requires_dist": [
      "disnake",
      "Pillow",
      "requests",
      "spotipy",
      "aiosqlite",
      "motor",
      "aiopg",
      "aiomysql",
      "discord-components",
      "pytz",
      "wavelink",
      "youtube-dl"
    ],
    "requires_python": "",
    "summary": "Discord Bot Development made easy!",
    "version": "0.9.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12826047,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6ce60e53cd9965122bfb94895a115d4af1fe30cb2b08f2998afa08b23f4e46b",
          "md5": "879c4dca140f11b6d6bdb393cf1a7aa8",
          "sha256": "dd50a970b686890d96de9188cdb59ad5b389e6c37406bc4ffe72d433451e1c0b"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "879c4dca140f11b6d6bdb393cf1a7aa8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1791635,
        "upload_time": "2021-12-29T14:41:51",
        "upload_time_iso_8601": "2021-12-29T14:41:51.884180Z",
        "url": "https://files.pythonhosted.org/packages/e6/ce/60e53cd9965122bfb94895a115d4af1fe30cb2b08f2998afa08b23f4e46b/disnakeSuperUtils-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e79c5363c9731d96ad424d6f9700163984c6fbcbfab855f40431910201b92ee",
          "md5": "460d5d25af4d2de1b3c75dd7e3059215",
          "sha256": "7162724a6dcd3d4b5c8cd6f317bc7eb39ef5f14adb8596a40696d27d86310901"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "460d5d25af4d2de1b3c75dd7e3059215",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1782489,
        "upload_time": "2021-12-29T14:41:54",
        "upload_time_iso_8601": "2021-12-29T14:41:54.138330Z",
        "url": "https://files.pythonhosted.org/packages/2e/79/c5363c9731d96ad424d6f9700163984c6fbcbfab855f40431910201b92ee/disnakeSuperUtils-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac261f07c47d16c7d3afa4e594fbe979f2d980da96f1ef8c2607d6be15c6d7fc",
          "md5": "1bb728c91cb4b7b01318e9dec0a8be72",
          "sha256": "5090026ef4e55a59210064aa6c09bd378403b17dd1e66858d0347e37969d31a6"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1bb728c91cb4b7b01318e9dec0a8be72",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1791102,
        "upload_time": "2021-12-30T05:05:53",
        "upload_time_iso_8601": "2021-12-30T05:05:53.162953Z",
        "url": "https://files.pythonhosted.org/packages/ac/26/1f07c47d16c7d3afa4e594fbe979f2d980da96f1ef8c2607d6be15c6d7fc/disnakeSuperUtils-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b269ff89f4235ba61968482989430a1b7f66ce7ef1be30cc5bce69d44efdadb",
          "md5": "d34699ea145095be70021b6c20c4e787",
          "sha256": "ea924a64b7f0fef248a2b4c85cbb64b0cff12b37742e38347f8748d1c4d977df"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d34699ea145095be70021b6c20c4e787",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1781814,
        "upload_time": "2021-12-30T05:05:54",
        "upload_time_iso_8601": "2021-12-30T05:05:54.970751Z",
        "url": "https://files.pythonhosted.org/packages/9b/26/9ff89f4235ba61968482989430a1b7f66ce7ef1be30cc5bce69d44efdadb/disnakeSuperUtils-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b870d00b697d22a51a97be36df210a68dbe27240056af86cb73a02b69b8ed630",
          "md5": "6cf75aca8f6ddc5a692b542029189dc7",
          "sha256": "cc18d97f196e7b35966f1560fa8e3c81ae7f22c5e4328515017b39b558a4247a"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6cf75aca8f6ddc5a692b542029189dc7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1791142,
        "upload_time": "2021-12-30T06:25:18",
        "upload_time_iso_8601": "2021-12-30T06:25:18.228548Z",
        "url": "https://files.pythonhosted.org/packages/b8/70/d00b697d22a51a97be36df210a68dbe27240056af86cb73a02b69b8ed630/disnakeSuperUtils-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a6d43a0174d4c892fe6e66dfe361d0ba1405526c5cf2ee26d2a00d5e2166c04",
          "md5": "bd98db3eefc567108b13c61ca7e003ab",
          "sha256": "87a6ab7c63daf7cb4fba7107a2d377aa78331247e299e2341ecd9cd72686693f"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bd98db3eefc567108b13c61ca7e003ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1781855,
        "upload_time": "2021-12-30T06:25:19",
        "upload_time_iso_8601": "2021-12-30T06:25:19.961935Z",
        "url": "https://files.pythonhosted.org/packages/5a/6d/43a0174d4c892fe6e66dfe361d0ba1405526c5cf2ee26d2a00d5e2166c04/disnakeSuperUtils-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f5698ae21d022450929a7134889fc3c311575ed12e03284d8c19b34b6200efe",
          "md5": "ea766b06727a9a8c8162ed96fa05b546",
          "sha256": "cb5110f911c2c5ac86006736438cbb2e34bd1850efa9bc11278f3a9c45691d29"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea766b06727a9a8c8162ed96fa05b546",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1791143,
        "upload_time": "2021-12-30T12:07:27",
        "upload_time_iso_8601": "2021-12-30T12:07:27.150487Z",
        "url": "https://files.pythonhosted.org/packages/8f/56/98ae21d022450929a7134889fc3c311575ed12e03284d8c19b34b6200efe/disnakeSuperUtils-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e8c2a90e6143f7a1d075d3b2aebe4a82142a407bd4152a4f11f69847c50f9cd",
          "md5": "493186176ec4fa2631a72dd8d1a111d3",
          "sha256": "28e8f8f3f817870824c4bbdf2eaa15526998280401b42e4f89a6923f6f8355d1"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "493186176ec4fa2631a72dd8d1a111d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1781855,
        "upload_time": "2021-12-30T12:07:28",
        "upload_time_iso_8601": "2021-12-30T12:07:28.976301Z",
        "url": "https://files.pythonhosted.org/packages/7e/8c/2a90e6143f7a1d075d3b2aebe4a82142a407bd4152a4f11f69847c50f9cd/disnakeSuperUtils-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ad7e14b6a73317b7ee1024c8ad535d48fface83ccd3d500ff7d91bdeb309d60",
          "md5": "db9509e2320bf15b9032b1099574c6b3",
          "sha256": "6613db50e46b1676a7c19f315f23bd6a77cbfe998fa016b429b535654323bb0b"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "db9509e2320bf15b9032b1099574c6b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1791160,
        "upload_time": "2021-12-30T15:06:20",
        "upload_time_iso_8601": "2021-12-30T15:06:20.192712Z",
        "url": "https://files.pythonhosted.org/packages/7a/d7/e14b6a73317b7ee1024c8ad535d48fface83ccd3d500ff7d91bdeb309d60/disnakeSuperUtils-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be13c2ec9c3f29575da088fe6ee268e1423e2203020bdc5c1ba0cf52cbcd54d1",
          "md5": "1b610a00bf4ea2a81f366c77af001904",
          "sha256": "0dceea0f8d4eb2657cdfe045ee0a15fff47a53e696b7d1eafe84119362719f26"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1b610a00bf4ea2a81f366c77af001904",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1781867,
        "upload_time": "2021-12-30T15:06:22",
        "upload_time_iso_8601": "2021-12-30T15:06:22.573353Z",
        "url": "https://files.pythonhosted.org/packages/be/13/c2ec9c3f29575da088fe6ee268e1423e2203020bdc5c1ba0cf52cbcd54d1/disnakeSuperUtils-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca1377cef0bb53c90ba6fac901368a71332e4e7629b58997b6e69753b01e692d",
          "md5": "d8ebf1ffdcdc2df581be0faa196fc28c",
          "sha256": "361b49788c235f42d70ef243311b5484f08b642b916e482e7c92a7cdc20567e7"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8ebf1ffdcdc2df581be0faa196fc28c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1791285,
        "upload_time": "2022-01-09T16:23:11",
        "upload_time_iso_8601": "2022-01-09T16:23:11.491523Z",
        "url": "https://files.pythonhosted.org/packages/ca/13/77cef0bb53c90ba6fac901368a71332e4e7629b58997b6e69753b01e692d/disnakeSuperUtils-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cf63ad031e34e7ac81d98eb36c3bfeb73a1cc9865ea732ebfdd67c11f0b6167",
          "md5": "bfc1ff9f646aa6f3dbed0191d43f0174",
          "sha256": "0763c11208467f0d9835586c8ba9348553a21d13e4813b382437bf222f386bba"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bfc1ff9f646aa6f3dbed0191d43f0174",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1781997,
        "upload_time": "2022-01-09T16:23:13",
        "upload_time_iso_8601": "2022-01-09T16:23:13.705043Z",
        "url": "https://files.pythonhosted.org/packages/0c/f6/3ad031e34e7ac81d98eb36c3bfeb73a1cc9865ea732ebfdd67c11f0b6167/disnakeSuperUtils-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93027eae887c52d3042de9b9d6a978193af10cc48d265d069241f368c405aab4",
          "md5": "73705f49b74ed0ce0f645320bcce6661",
          "sha256": "a8d04a497838b37f7e3a3e3a4d8b85c870fc8ab2fb7852e4dfaef1e236f43dc3"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73705f49b74ed0ce0f645320bcce6661",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1791349,
        "upload_time": "2022-02-08T13:35:04",
        "upload_time_iso_8601": "2022-02-08T13:35:04.547644Z",
        "url": "https://files.pythonhosted.org/packages/93/02/7eae887c52d3042de9b9d6a978193af10cc48d265d069241f368c405aab4/disnakeSuperUtils-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "181a22377481748c1f59f5efb4f595585b36fec925ccaf69037c07c0a7aae693",
          "md5": "5bac8150729c69e9d789cfb41d535496",
          "sha256": "36eb7e20e5c9f27776e2f4d5062be7ba564968d58bd98299a0bfe5f61aa9f8ef"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5bac8150729c69e9d789cfb41d535496",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1782035,
        "upload_time": "2022-02-08T13:35:07",
        "upload_time_iso_8601": "2022-02-08T13:35:07.161447Z",
        "url": "https://files.pythonhosted.org/packages/18/1a/22377481748c1f59f5efb4f595585b36fec925ccaf69037c07c0a7aae693/disnakeSuperUtils-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9c042924f87e1d1284cebf289ea9159d01ce96371b33eafab1de173e75a4836",
          "md5": "27980494d867491bfb6e29bc1977d034",
          "sha256": "e4c6b9cac0fbd9b94f273b60ba3b9d20c94319248b0609fba08c0fa3ab5d4e1d"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.9.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "27980494d867491bfb6e29bc1977d034",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1791371,
        "upload_time": "2022-02-08T13:44:09",
        "upload_time_iso_8601": "2022-02-08T13:44:09.541602Z",
        "url": "https://files.pythonhosted.org/packages/c9/c0/42924f87e1d1284cebf289ea9159d01ce96371b33eafab1de173e75a4836/disnakeSuperUtils-0.9.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc3c2654e5a69de5cea9dd3ef24bef39dadfa25725aeb68870a09fb5684215b5",
          "md5": "e6699bb3c21a9cdb61cebf0daca525f8",
          "sha256": "6330970a8bc91333d6b119bea5f9549c2f1c2b401ba351d53b8a23973f4b5cec"
        },
        "downloads": -1,
        "filename": "disnakeSuperUtils-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e6699bb3c21a9cdb61cebf0daca525f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1782060,
        "upload_time": "2022-02-08T13:44:11",
        "upload_time_iso_8601": "2022-02-08T13:44:11.227308Z",
        "url": "https://files.pythonhosted.org/packages/dc/3c/2654e5a69de5cea9dd3ef24bef39dadfa25725aeb68870a09fb5684215b5/disnakeSuperUtils-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9c042924f87e1d1284cebf289ea9159d01ce96371b33eafab1de173e75a4836",
        "md5": "27980494d867491bfb6e29bc1977d034",
        "sha256": "e4c6b9cac0fbd9b94f273b60ba3b9d20c94319248b0609fba08c0fa3ab5d4e1d"
      },
      "downloads": -1,
      "filename": "disnakeSuperUtils-0.9.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "27980494d867491bfb6e29bc1977d034",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 1791371,
      "upload_time": "2022-02-08T13:44:09",
      "upload_time_iso_8601": "2022-02-08T13:44:09.541602Z",
      "url": "https://files.pythonhosted.org/packages/c9/c0/42924f87e1d1284cebf289ea9159d01ce96371b33eafab1de173e75a4836/disnakeSuperUtils-0.9.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dc3c2654e5a69de5cea9dd3ef24bef39dadfa25725aeb68870a09fb5684215b5",
        "md5": "e6699bb3c21a9cdb61cebf0daca525f8",
        "sha256": "6330970a8bc91333d6b119bea5f9549c2f1c2b401ba351d53b8a23973f4b5cec"
      },
      "downloads": -1,
      "filename": "disnakeSuperUtils-0.9.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e6699bb3c21a9cdb61cebf0daca525f8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1782060,
      "upload_time": "2022-02-08T13:44:11",
      "upload_time_iso_8601": "2022-02-08T13:44:11.227308Z",
      "url": "https://files.pythonhosted.org/packages/dc/3c/2654e5a69de5cea9dd3ef24bef39dadfa25725aeb68870a09fb5684215b5/disnakeSuperUtils-0.9.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}