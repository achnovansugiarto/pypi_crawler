{
  "info": {
    "author": "Alexey Sosov",
    "author_email": "lesh.solowiew@yandex.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# SimpleMQ\n\n_SimpleMQ_ - простой _MQ_, написанный на питоне с использованием стримов из библиотеки **asyncio** для написания сервера\nи сокетов из библиотеки **socket** для реализации постоянного соединения сервер-подписчик\n\n1. [Hello world](#hello_world)\n2. [Worker](#worker)\n3. [Routing](#routing)\n\n## <a name=\"hello_world\">Hello world</a>\n\n**Publisher** (_Издатель_) - отсылает сообщение на сервер\n**Stream** (_Стрим_) - Некоторое отдельное пространство для хранения сообщений. Сообщения могут храниться только внутри стримов, но при этом на сервере может быть создано множество стримов. Издатель отправляет сообщение в стрим. Подписчик в свою очередь пытается получить сообщение из стрима.\n**Follower** (_Подписчик_) - устанавливает постоянное _TCP_ соединение с сервером и ждет пока в стриме появятся сообщения\n\nВ **hello world** примере мы рассмотрим только одного издателя, один стрим и одного подписчика\n![alt](static/images/hello_world.png)\n\n1. Создаем конфигурационный файл **settings.yaml** с данными для запуска сервера, удобнее его положить рядом с _server.py_, который мы создадим далее\n\n```yaml\nhost:\nport:\n\n# пример\nhost: localhost\nport: 9090\n```\n\n2. Создаем server.py\n\n```python\n# server.py\n\nfrom simplemq.server.server import run_server\n\nif __name__ == '__main__':\n    run_server(settings_yml_filepath='settings.yaml')\n\n```\n\n3. Создаем **follower.py**\n\n```python\n# follower.py\n\nfrom simplemq.follower import Follower\nfrom simplemq.bind import Bind\nfrom simplemq.connection import Connection, ConnectionConfig\n\nconnection_config = ConnectionConfig(\n    host='localhost',\n    port=9090,\n)\n\nconnection = Connection(connection_config=connection_config)\n\nbind = Bind(route_string='hello_queue')\nfollower = Follower(connection=connection, bind=bind)\n\ncursor = connection.cursor()\nwith cursor.session():\n    cursor.create_stream('hello_queue')\n\n\ndef handle_message(message):\n    from time import sleep\n    sleep(5)\n    print('message_body: ', message.message_body)\n    print('message_handled')\n\n\nwith follower.session():\n    for message in follower.get_messages():\n        handle_message(message=message)\n        follower.ack_message(message)\n\n```\n\n4. Создаем **publisher.py**\n\n```python\n# publisher.py\n\nfrom simplemq.publisher.publisher import SocketBasedPublisher\nfrom simplemq.bind import Bind\nfrom simplemq.connection import Connection, ConnectionConfig\n\nconnection_config = ConnectionConfig(\n    host='localhost',\n    port=9090,\n)\n\nconnection = Connection(connection_config=connection_config)\n\nMESSAGE_BODY = 'hello world'\n\nbind = Bind(route_string='hello_queue')\ncursor = connection.cursor()\nwith cursor.session():\n    cursor.create_stream('hello_queue')\n\npublisher = SocketBasedPublisher(connection=connection, bind=bind)\npublisher.send_message(message_body=MESSAGE_BODY)\n\n```\n\nТут появляются новые определения:\n\n1. **Bind** - являются роутером, то есть - в случае с издателем говорит в очередь с каким наименованием (значение аргумента _routing_string_) отправлять сообщение, в случае подписчика - из какой очереди ждать сообщения.\n2. **Cursor** - объект, который не участвует в обмене сообщениями, он нужен для утилити функций: создать стрим; посмотреть все стримы, которые есть на сервере и тд.\n\n**Демонстрация работы:**\n![alt](static/gifs/hello_world.gif)\n\nВ этом примере мы сначала подключили подписчика, а только потом начали отправлять сообщения в стрим издателем. Мы также можем сначала заполнить стрим сообщениями и только потом включить подписчика, в таком случае он сразу получить сообщения, а не будет их ждать.\n\n**Потверждение сообщений**\nКогда подписчик читает сообщение со стрима оно удаляется со стрима и переходит в _PEL_ (Pending entry list). После **ACK** сообщения от подписчика об обработке этого сообщения оно исчезает и от туда.\nЕсть 2 способа потвердить обработку сообщения:\n\n- самому, вызвав у инстанса Follower метод **ack_message**\n\n```python\nwith follower.session():\n    for message in follower.get_messages():\n        handle_message(message=message)\n        follower.ack_message(message)\n```\n\n- передать True в аргумент auto_ack. В таком случае на сервер придет потверждение об обработке сообщения еще до вызова *handle_message*\n\n```python\nwith follower.session():\n    for message in follower.get_messages(auto_ack=True):\n        handle_message(message=message)\n```\n\n## <a name=\"worker\">Worker</a>\n\n![alt](static/images/worker.png)\n\nПодписчики являются воркерами. При чтении сообщения подписчиком это сообщение пропадает из стрима, поэтому второй подписчик, который подписан на тот же стрим его не прочитает. Запустим двух подписчиков, только один из них будет обрабывать сообщение 100 секунд, а второй 2. Пока первый подписчик обработывает сообщение (в нашем случае просто спит) второй подписчик может читать входящие сообщения.\n\n```python\n# first_follower.py\n\nfrom simplemq.follower import Follower\nfrom simplemq.bind import Bind\nfrom simplemq.connection import Connection, ConnectionConfig\n\nconnection_config = ConnectionConfig(\n    host='localhost',\n    port=9090,\n)\n\nconnection = Connection(connection_config=connection_config)\n\nbind = Bind(route_string='hello_queue')\nfollower = Follower(connection=connection, bind=bind)\n\ncursor = connection.cursor()\nwith cursor.session():\n    cursor.create_stream('hello_queue')\n\n\ndef handle_message(message):\n    from time import sleep\n    sleep(100)\n    print('message_body: ', message.message_body)\n    print('message_handled')\n\n\nwith follower.session():\n    for message in follower.get_messages():\n        handle_message(message=message)\n        follower.ack_message(message)\n\n```\n\n```python\n# second_follower.py\n\nfrom simplemq.follower import Follower\nfrom simplemq.bind import Bind\nfrom simplemq.connection import Connection, ConnectionConfig\n\nconnection_config = ConnectionConfig(\n    host='localhost',\n    port=9090,\n)\n\nconnection = Connection(connection_config=connection_config)\n\nbind = Bind(route_string='hello_queue')\nfollower = Follower(connection=connection, bind=bind)\n\ncursor = connection.cursor()\nwith cursor.session():\n    cursor.create_stream('hello_queue')\n\n\ndef handle_message(message):\n    from time import sleep\n    sleep(2)\n    print('message_body: ', message.message_body)\n    print('message_handled')\n\n\nwith follower.session():\n    for message in follower.get_messages():\n        handle_message(message=message)\n        follower.ack_message(message)\n```\n\n**Демонстрация работы:**\n![alt](static/gifs/worker.gif)\n\n## <a name=\"routing\">Routing</a>\n\nУ **Bind** есть два режима роутинга:\n\n- _Direct_ - режим по умолчанию, который мы использовали раньше. Издатель отправляет сообщения в стрим с наименованием равным значению аргумента _routing_key_. Подписчик читает сообщения из стрима с наименованием равным значению аргумента _routing_key_.\n- _REGEX_BASED_ - Издатель отправляет сообщения во все стримы, название которых удовлетворяет regex выражению из _routing_key_. Подписчик читает сообщения из всех стримов, название которых содержит удовлетворяет regex выражению из _routing_key_.\n\n1. RegexBased Routing cо стороны издателя\n   ![alt](static/images/routing_publisher.png)\n\n```python\n# publisher\n\nfrom simplemq.publisher.publisher import SocketBasedPublisher\nfrom simplemq.bind import Bind, BindTypes\nfrom simplemq.connection import Connection, ConnectionConfig\n\nconnection_config = ConnectionConfig(\n    host='localhost',\n    port=9090,\n)\n\nconnection = Connection(connection_config=connection_config)\n\nmessage_body = 'hello world'\n\nbind = Bind(route_string='.+_world', bind_type=BindTypes.REGEX_BASED)\ncursor = connection.cursor()\nwith cursor.session():\n    cursor.create_stream('hello_queue')\n\npublisher = SocketBasedPublisher(connection=connection, bind=bind)\npublisher.send_message(message_body=message_body)\n\n```\n\n```python\n# first_follower.py\n\nfrom simplemq.follower import Follower\nfrom simplemq.bind import Bind\nfrom simplemq.connection import Connection, ConnectionConfig\n\nconnection_config = ConnectionConfig(\n    host='localhost',\n    port=9090,\n)\n\nconnection = Connection(connection_config=connection_config)\n\nbind = Bind(route_string='new_world')\nfollower = Follower(connection=connection, bind=bind)\n\ncursor = connection.cursor()\nwith cursor.session():\n    cursor.create_stream('new_world')\n\n\ndef handle_message(message):\n    from time import sleep\n    sleep(3)\n    print('message_body: ', message.message_body)\n    print('message_handled')\n\n\nwith follower.session():\n    for message in follower.get_messages():\n        handle_message(message=message)\n        follower.ack_message(message)\n\n```\n\n```python\n# second_follower.py\n\nfrom simplemq.follower import Follower\nfrom simplemq.bind import Bind\nfrom simplemq.connection import Connection, ConnectionConfig\n\nconnection_config = ConnectionConfig(\n    host='localhost',\n    port=9090,\n)\n\nconnection = Connection(connection_config=connection_config)\n\nbind = Bind(route_string='old_world')\nfollower = Follower(connection=connection, bind=bind)\n\ncursor = connection.cursor()\nwith cursor.session():\n    cursor.create_stream('old_world')\n\n\ndef handle_message(message):\n    from time import sleep\n    sleep(3)\n    print('message_body: ', message.message_body)\n    print('message_handled')\n\n\nwith follower.session():\n    for message in follower.get_messages():\n        handle_message(message=message)\n        follower.ack_message(message)\n```\n\n**Демонстрация работы:**\n![alt](static/gifs/routing_publisher.gif)\n\n2. RegexBased Routing cо стороны подписчика\n   ![alt](static/images/routing_follower.png)\n\n```python\n# first_publisher.py\n\nfrom simplemq.publisher.publisher import SocketBasedPublisher\nfrom simplemq.bind import Bind\nfrom simplemq.connection import Connection, ConnectionConfig\n\nconnection_config = ConnectionConfig(\n    host='localhost',\n    port=9090,\n)\n\nconnection = Connection(connection_config=connection_config)\n\nmessage_body = 'hello world'\n\nbind = Bind(route_string='old_world')\ncursor = connection.cursor()\nwith cursor.session():\n    cursor.create_stream('old_world')\n\npublisher = SocketBasedPublisher(connection=connection, bind=bind)\npublisher.send_message(message_body=message_body)\n\n```\n\n```python\n# second_publisher.py\n\nfrom simplemq.publisher.publisher import SocketBasedPublisher\nfrom simplemq.bind import Bind\nfrom simplemq.connection import Connection, ConnectionConfig\n\nconnection_config = ConnectionConfig(\n    host='localhost',\n    port=9090,\n)\n\nconnection = Connection(connection_config=connection_config)\n\nmessage_body = 'hello world'\n\nbind = Bind(route_string='new_world')\ncursor = connection.cursor()\nwith cursor.session():\n    cursor.create_stream('new_world')\n\npublisher = SocketBasedPublisher(connection=connection, bind=bind)\npublisher.send_message(message_body=message_body)\n\n```\n\n```python\n# follower\n\nfrom simplemq.follower import Follower\nfrom simplemq.bind import Bind, BindTypes\nfrom simplemq.connection import Connection, ConnectionConfig\n\nconnection_config = ConnectionConfig(\n    host='localhost',\n    port=9090,\n)\n\nconnection = Connection(connection_config=connection_config)\n\nbind = Bind(route_string='.+world', bind_type=BindTypes.REGEX_BASED)\nfollower = Follower(connection=connection, bind=bind)\n\n\ndef handle_message(message):\n    from time import sleep\n    sleep(3)\n    print('message_body: ', message.message_body)\n    print('message_handled')\n\n\nwith follower.session():\n    for message in follower.get_messages():\n        handle_message(message=message)\n        follower.ack_message(message)\n\n```\n\n**Демонстрация работы:**\n![alt](static/gifs/routing_follower.gif)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Rwwwrl/SimpleMQ",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asyncio-simple-mq",
    "package_url": "https://pypi.org/project/asyncio-simple-mq/",
    "platform": null,
    "project_url": "https://pypi.org/project/asyncio-simple-mq/",
    "project_urls": {
      "Homepage": "https://github.com/Rwwwrl/SimpleMQ"
    },
    "release_url": "https://pypi.org/project/asyncio-simple-mq/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "asyncio-simple-mq",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16489496,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38350613589225596c67a16d9f91cf19118d0d82ace779299cc58c6e3bd990fd",
          "md5": "de85d92bea723a5d3210b5ac908d1ac6",
          "sha256": "b21a29c1cd79725aa8ae18e3cbc11af7c3f6bd3f6ee348293b1dc2e59cfb86ac"
        },
        "downloads": -1,
        "filename": "asyncio-simple-mq-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "de85d92bea723a5d3210b5ac908d1ac6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 13992,
        "upload_time": "2023-01-19T16:00:15",
        "upload_time_iso_8601": "2023-01-19T16:00:15.059761Z",
        "url": "https://files.pythonhosted.org/packages/38/35/0613589225596c67a16d9f91cf19118d0d82ace779299cc58c6e3bd990fd/asyncio-simple-mq-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38350613589225596c67a16d9f91cf19118d0d82ace779299cc58c6e3bd990fd",
        "md5": "de85d92bea723a5d3210b5ac908d1ac6",
        "sha256": "b21a29c1cd79725aa8ae18e3cbc11af7c3f6bd3f6ee348293b1dc2e59cfb86ac"
      },
      "downloads": -1,
      "filename": "asyncio-simple-mq-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "de85d92bea723a5d3210b5ac908d1ac6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 13992,
      "upload_time": "2023-01-19T16:00:15",
      "upload_time_iso_8601": "2023-01-19T16:00:15.059761Z",
      "url": "https://files.pythonhosted.org/packages/38/35/0613589225596c67a16d9f91cf19118d0d82ace779299cc58c6e3bd990fd/asyncio-simple-mq-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}