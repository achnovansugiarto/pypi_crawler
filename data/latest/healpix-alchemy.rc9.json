{
  "info": {
    "author": "Leo Singer",
    "author_email": "leo.singer@ligo.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database",
      "Topic :: Scientific/Engineering :: Astronomy"
    ],
    "description": "[![PyPI Status](https://img.shields.io/pypi/v/healpix-alchemy)](https://pypi.org/project/healpix-alchemy/)\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/skyportal/healpix-alchemy/build-and-test.yml?branch=main)](https://github.com/skyportal/healpix-alchemy/actions)\n[![codecov](https://codecov.io/gh/skyportal/healpix-alchemy/branch/main/graph/badge.svg?token=T34O35OM0V)](https://codecov.io/gh/skyportal/healpix-alchemy)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.5768564.svg)](https://doi.org/10.5281/zenodo.5768564)\n\nTo acknowledge HEALPix Alchemy in a scholarly article, please cite the following two references.\n\n#### HEALPix Alchemy paper\nSinger, L. P., Parazin, B., Coughlin, M. W., et al. (2022). \"HEALPix Alchemy: Fast All-Sky Geometry and Image Arithmetic in a Relational Database for Multimessenger Astronomy Brokers.\" *Astronomical Journal* **163** 209. https://doi.org/10.3847/1538-3881/ac5ab8\n\n#### Code archive on Zenodo\nSinger, L. P., Parazin, B., Coughlin, M. W., et al. (2022). \"skyportal/healpix-alchemy: Version 1.0.1.\" https://doi.org/10.5281/zenodo.5768564\n\n# HEALPix Alchemy\n\nThe `healpix_alchemy` Python package is an extension for the [SQLAlchemy]\nobject relational mapper. It adds region and image arithmetic to [PostgreSQL]\n(version 14 and newer) databases. It accelerates queries between point clouds,\nregions, and images (sometimes known in the geospatial community as rasters) by\nstoring [multi-order] [HEALPix] indices in PostgreSQL's [range types].\n\nThe `healpix_alchemy` project is designed for astronomy applications,\nparticularly for cross-matching galaxy catalogs, observation footprints, and\nall-sky images like [gravitational-wave probability sky maps] or even dust\nmaps. However, it could be used in any context in which geometry is embedded on\na unit sphere.\n\n`healpix_alchemy` is lean and minimalist because it leverages several existing\nprojects: it consists of little more than a few lines of glue code to bind\ntogether [MOCPy], [SQLAlchemy], and PostgreSQL's [range types].\n\n`healpix_alchemy` serves a purpose similar to full-featured astronomy-focused\nspatial extensions like [Q3C], [H3C], and [pg_healpix], and geospatial\nextensions like [PgSphere] and [PostGIS]. What sets `healpix_alchemy` apart\nfrom these is that it is written in pure Python and requires no server-side\ndatabase extensions. Consequently, `healpix_alchemy` can be used with managed\nPostgreSQL databases in the cloud like [Amazon RDS] and [Google Cloud SQL].\n\n[2MASS Redshift Survey]: https://lweb.cfa.harvard.edu/~dfabricant/huchra/2mass/\n[Aladin]: https://aladin.u-strasbg.fr\n[Amazon RDS]: https://aws.amazon.com/rds/\n[astropy.coordinates.SkyCoord]: https://docs.astropy.org/en/stable/api/astropy.coordinates.SkyCoord.html#astropy.coordinates.SkyCoord\n[astropy.units.Quantity]: https://docs.astropy.org/en/stable/api/astropy.units.Quantity.html#astropy.units.Quantity\n[custom column types]: https://docs.sqlalchemy.org/en/14/core/custom_types.html\n[Google Cloud SQL]: https://cloud.google.com/sql\n[Górski et al. (2005)]: https://doi.org/10.1086/427976\n[gravitational-wave probability sky maps]: https://emfollow.docs.ligo.org/userguide/tutorial/skymaps.html\n[GW200115_042309]: https://doi.org/10.3847/2041-8213/ac082e\n[H3C]: http://cdsarc.u-strasbg.fr/h3c\n[HEALPix]: https://healpix.sourceforge.io\n[hierarchical progressive surveys (HiPS)]: https://www.ivoa.net/documents/HiPS/\n[ICRS]: https://docs.astropy.org/en/stable/api/astropy.coordinates.builtin_frames.ICRS.html#astropy.coordinates.builtin_frames.ICRS\n[ligo-segments]: https://lscsoft.docs.ligo.org/ligo-segments/\n[MOCPy documentation]: https://cds-astro.github.io/mocpy/\n[MOCPy]: https://github.com/tboch/mocpy\n[multi-order coverage (MOC)]: https://ivoa.net/documents/MOC/\n[multi-order]: https://doi.org/10.1051/0004-6361/201526549\n[official Poetry installation instructions]: https://python-poetry.org/docs/#installation\n[pg_healpix]: https://github.com/segasai/pg_healpix\n[PgSphere]: https://pgsphere.github.io\n[pip]: https://pip.pypa.io/\n[Poetry]: https://python-poetry.org/\n[PostGIS]: https://postgis.net\n[PostgreSQL]: https://www.postgresql.org\n[pyranges]: https://github.com/biocore-ntnu/pyranges\n[pytest]: https://pytest.org/\n[Q3C]: https://github.com/segasai/q3c\n[range types]: https://www.postgresql.org/docs/current/rangetypes.html\n[S200115j]: https://gracedb.ligo.org/superevents/S200115j/view/\n[Singer & Price (2015)]: https://doi.org/10.1103/PhysRevD.93.024013\n[SQLAlchemy bulk insertion]: https://docs.sqlalchemy.org/en/14/orm/persistence_techniques.html#bulk-operations\n[SQLAlchemy]: https://www.sqlalchemy.org\n[UNIQ]: https://healpix.sourceforge.io/doc/html/intro_Geometric_Algebraic_Propert.htm#SECTION420\n[Zwicky Transient Facility]: https://www.ztf.caltech.edu\n\n## Theory of operation\n\n### HEALPix basics\n\n[HEALPix] is a scheme for subdividing and indexing the unit sphere, originally\ndescribed by [Górski et al. (2005)]. Although it was originally designed for\ncosmic microwave background analysis, it has found many uses in astronomy,\nparticularly through [multi-order coverage (MOC)] maps and\n[hierarchical progressive surveys (HiPS)] used extensively in the [Aladin]\nastronomical information system. It is also used by LIGO and Virgo to store and\ncommunicate [gravitational-wave probability sky maps].\n\nHEALPix can be thought of as a tree. At the lowest resolution, level 0, HEALPix\nsubdivides the sphere into 12 equal-area base tiles, assigned integer indices\n0 through 11. At level 1, each of the 12 base tiles is subdivided into 4 tiles.\nEvery subsequent level divides each of the preceding level's tiles into 4 new\ntiles. At a given level, each of the base pixels has been divided into\n4<sup>_level_</sup> pixels (_nside_ = 2<sup>_level_</sup> pixels on each side).\nThus there are _npix_ = 12×4<sup>_level_</sup> pixels at a given resolution,\nassigned integer indices from 0 through (_npix_-1). This is called the NESTED\nindexing scheme. (There is also a RING indexing scheme in which the indices\nadvance from east to west and then from north to south.)\n\nA HEALPix tile, a node in the HEALPix tree, is fully addressed by three pieces\nof information: the indexing scheme (RING or NESTED), the resolution level\n(_level_ or equivalently _nside_), and the pixel index (_ipix_, an integer\nbetween 0 and _npix_-1).\n\nThe image below, reproduced from https://healpix.jpl.nasa.gov, illustrates the\nfirst 4 levels of refinement of a HEALPix grid.\n\n![The first four levels of HEALPix subdivision of the unit sphere](https://healpix.jpl.nasa.gov/images/healpixGridRefinement.jpg)\n\n### HEALPix interval sets\n\nA region on the sphere can be encoded by a collection of disjoint HEALPix\ntiles, potentially at a mix of different resolution levels. Typically, large\nlow-resolution tiles are used on the interior of the region, and small\nhigh-resolution tiles are used on the boundary. This is called a\n[multi-order coverage (MOC)] map. An example, reproduced from the\n[MOCPy documentation], is shown below.\n\n![An example HEALPix multi-order coverage map](https://cds-astro.github.io/mocpy/_images/plot_SDSS_r.png)\n\nMuch like MOCs, LIGO/Virgo/KAGRA gravitational-wave probability sky maps are\nstored as multi-resolution HEALPix data sets, but with a vector of\nfloating-point values attached to each tile. A multi-order refinement mesh from\nan example sky map is shown below, reproduced from [Singer & Price (2015)].\n\n![Example multi-order refinement mesh from a gravitational-wave probability sky map](https://emfollow.docs.ligo.org/userguide/_images/healpix-adaptive-mesh.svg)\n\n[Reinecke & Hivon (2015)][multi-order] introduced HEALPix interval sets as an\nalternative encoding of MOCs that enables fast and simple unions,\nintersections, and queries. In an interval set, each HEALPix tile is described\nby the interval of pixel indices at some very high resolution\n_level_<sub>max</sub> that are descendents of that tile. In an interval set, a\nregion is encoded as a disjoint collection of such intervals. A tile with a\nNESTED address given by (_level_, _ipix_) may be described as the half-open\ninterval\n\n[_ipix_ 4<sup>_level_<sub>max</sub> - _level_</sup>,\n(_ipix_ + 1) 4<sup>_level_<sub>max</sub> - _level_</sup>).\n\nWe use _level_<sub>max</sub> = 29 because this is the highest resolution at\nwhich pixel indices can be stored in a signed 64-bit integer. At this\nresolution, each pixel is scarcely 0.4 milliarcseconds across.\n\nThe interval set representation is adventageous because there are simple and\nfast algorithms for interval arithmetic and set operations. Interval analysis\nappears in a suprising variety of scientific contexts from [genomics][pyranges]\nto [gravitational wave data quality][ligo-segments]. Because of the many\nbusiness applications of interval arithmetic, intervals are also supported in\nthe [PostgreSQL] database through its [range types].\n\n### Spatial primitives in `healpix_alchemy`\n\nThe `healpix_alchemy` package provides two [custom column types] for\n[SQLAlchemy]:\n\n#### `healpix_alchemy.Point`\n\nThis class represents a point. A column of this type could store the positions\nof galaxies in a catalog. Under the hood, it is just a `BIGINT`.\n\nWherever you need to bind a Python value to a `healpix_alchemy.Point`, you may\nprovide any one of the following:\n* an instance of [astropy.coordinates.SkyCoord]\n* a sequence of two [astropy.units.Quantity] instances with angle units, which\n  will be interpreted as the right ascension and declination of the point in\n  the [ICRS] frame\n* an integer representing the HEALPix NESTED index of the point at\n  _level_ = _level_<sub>max</sub>\n\n#### `healpix_alchemy.Tile`\n\nThis class represents a HEALPix tile. A table containing a column of this type\nand a foreign key could store MOCs or gravitational-wave probability maps.\nUnder the hood, it is just an `INT8RANGE`.\n\nWherever you need to bind a Python value to a `healpix_alchemy.Tile`, you may\nprovide any one of the following:\n* A single integer which will be interpreted as the address of the tile in the\n  [UNIQ] HEALPix indexing scheme\n* A sequence of two integers, which will be interpreted as the lower and upper\n  bounds of the right-half-open pixel index interval at\n  _level_ = _level_<sub>max</sub>\n* A string like `'[1234,5678)'`\n\n## Installation\n\nYou can install `healpix_alchemy` from the Python Package Index using [pip]:\n\n```console\n$ pip install healpix-alchemy\n```\n\n## Development Installation\n\nContributions are welcome! This package uses the [Poetry] packaging and\ndependency tool and [pytest] for unit tests. To install `healpix_alchemy` in a\ndevelopment environment, follow these instructions.\n\n1.  Install [Poetry] by following the\n    [official Poetry installation instructions].\n\n2.  Clone this repository:\n\n    ```console\n    $ git clone https://github.com/skyportal/healpix-alchemy.git\n    $ cd healpix-alchemy\n    ```\n\n3.  Initialize the Poetry-managed virtual environment with `healpix_alchemy`\n    and all of its dependencies installed by running this command:\n\n    ```console\n    $ poetry install\n    ```\n\n    Now, you can enter a shell inside the virtual environment by running:\n\n    ```console\n    $ poetry shell\n    ```\n\n4.  To run the test suite, including the examples in this README file, run this\n    command inside the Poetry shell:\n\n    ```console\n    $ pytest\n    ```\n\n## Example\n\nFirst, some imports:\n\n```pycon\n>>> from sqlalchemy import orm\n>>> import sqlalchemy as sa\n>>> import healpix_alchemy as ha\n\n```\n\n### Set up tables\n\nThis example will use the SQLAlchemy declarative extension for describing table\nschema using Python classes.\n\nSQLAlchemy needs to know the name for each table. You can provide the name by\nsetting the `__tablename__` attribute in each model class, or you can\ncreate a base class that generates the table name automatically from the class\nname.\n\n```pycon\n>>> @orm.as_declarative()\n... class Base:\n...\n...     @orm.declared_attr\n...     def __tablename__(cls):\n...         return cls.__name__.lower()\n\n```\n\nEach row of the `Galaxy` table represents a point in a catalog:\n\n```pycon\n>>> class Galaxy(Base):\n...     id = sa.Column(sa.Text, primary_key=True)\n...     hpx = sa.Column(ha.Point, index=True, nullable=False)\n\n```\n\nEach row of the `Field` table represents a ZTF field:\n\n```pycon\n>>> class Field(Base):\n...     id = sa.Column(sa.Integer, primary_key=True)\n...     tiles = orm.relationship(lambda: FieldTile)\n\n```\n\nEach row of the `FieldTile` table represents a multi-resolution HEALPix tile\nthat is contained within the corresponding field. There is a one-to-many\nmapping between `Field` and `FieldTile`.\n\n```pycon\n>>> class FieldTile(Base):\n...     id = sa.Column(sa.ForeignKey(Field.id), primary_key=True)\n...     hpx = sa.Column(ha.Tile, primary_key=True, index=True)\n\n```\n\nEach row of the `Skymap` table represents a LIGO/Virgo HEALPix\nlocalization map.\n\n```pycon\n>>> class Skymap(Base):\n...     id = sa.Column(sa.Integer, primary_key=True)\n...     tiles = orm.relationship(lambda: SkymapTile)\n\n```\n\nEach row of the `SkymapTile` table represents a multi-resolution HEALPix\ntile within a LIGO/Virgo localization map. There is a one-to-many mapping\nbetween `Skymap` and `SkymapTile`.\n\n```pycon\n>>> class SkymapTile(Base):\n...     id = sa.Column(sa.ForeignKey(Skymap.id), primary_key=True)\n...     hpx = sa.Column(ha.Tile, primary_key=True, index=True)\n...     probdensity = sa.Column(sa.Float, nullable=False)\n\n```\n\nFinally, connect to the database, create all the tables, and start a session.\n\n```pycon\n>>> engine = sa.create_engine('postgresql://user:password@host/database')\n>>> Base.metadata.create_all(engine)\n>>> session = orm.Session(engine)\n\n```\n\n### Populate with sample data\n\nLoad the [2MASS Redshift Survey] into the `Galaxy` table. This catalog contains\n44599 galaxies.\n\nIt may take up to a minute for this to finish. Advanced users may speed this up\nsignificantly by vectorizing the conversion from `SkyCoord` to HEALPix indices\nand using [SQLAlchemy bulk insertion].\n\n```pycon\n>>> from astropy.coordinates import SkyCoord\n>>> from astroquery.vizier import Vizier\n>>> vizier = Vizier(columns=['SimbadName', 'RAJ2000', 'DEJ2000'], row_limit=-1)\n>>> data, = vizier.get_catalogs('J/ApJS/199/26/table3')\n>>> data['coord'] = SkyCoord(data['RAJ2000'], data['DEJ2000'])\n>>> for row in data:\n...     session.add(Galaxy(id=row['SimbadName'], hpx=row['coord']))\n>>> session.commit()\n\n```\n\nLoad the footprints of the [Zwicky Transient Facility] fields into the `Field`\nand `FieldTile` tables.\n\nIt may take up to a minute for this to finish. Advanced users may speed this up\nsignificantly by using [SQLAlchemy bulk insertion].\n\n```pycon\n>>> from astropy.table import Table\n>>> from astropy.coordinates import SkyCoord\n>>> from astropy import units as u\n>>> url = 'https://raw.githubusercontent.com/ZwickyTransientFacility/ztf_information/9fd0ba8842709f42a134c88827309ccab728fcb7/field_grid/ztf_field_corners.csv'\n>>> for row in Table.read(url):\n...     field_id = int(row['field'])\n...     corners = SkyCoord(row['ra1', 'ra2', 'ra3', 'ra4'],\n...                        row['dec1', 'dec2', 'dec3', 'dec4'],\n...                        unit=u.deg)\n...     tiles = [FieldTile(hpx=hpx) for hpx in ha.Tile.tiles_from(corners)]\n...     session.add(Field(id=field_id, tiles=tiles))\n>>> session.commit()\n\n```\n\nLoad a sky map for LIGO/Virgo event [GW200115_042309] ([S200115j]) into the\n`Skymap` and `SkymapTile` tables.\n\n```pycon\n>>> url = 'https://gracedb.ligo.org/apiweb/superevents/S200115j/files/bayestar.multiorder.fits'\n>>> data = Table.read(url)\n>>> tiles = [SkymapTile(hpx=row['UNIQ'], probdensity=row['PROBDENSITY']) for row in data]\n>>> session.add(Skymap(id=1, tiles=tiles))\n>>> session.commit()\n\n```\n\nLast, run [`ANALYZE`](https://www.postgresql.org/docs/current/sql-analyze.html)\nto prepare the data for use:\n\n```pycon\n>>> session.execute(sa.text('ANALYZE'))\n<sqlalchemy.engine.cursor.CursorResult object at 0x...>\n\n```\n\n### Sample Queries\n\n#### What is the area of each field?\n\n```pycon\n>>> query = sa.select(\n...     FieldTile.id, sa.func.sum(FieldTile.hpx.area)\n... ).group_by(\n...     FieldTile.id\n... ).limit(\n...     5\n... )\n>>> for id, area in session.execute(query):\n...     print(f'Field {id} has area {area:.3g} sr')\nField 199 has area 0.0174 sr\nField 200 has area 0.0174 sr\nField 201 has area 0.0174 sr\nField 202 has area 0.0174 sr\nField 203 has area 0.0174 sr\n\n```\n\n#### How many galaxies are in each field?\n\n```pycon\n>>> count = sa.func.count(Galaxy.id)\n>>> query = sa.select(\n...     FieldTile.id, count\n... ).filter(\n...     FieldTile.hpx.contains(Galaxy.hpx)\n... ).group_by(\n...     FieldTile.id\n... ).order_by(\n...     count.desc()\n... ).limit(\n...     5\n... )\n>>> for id, n in session.execute(query):\n...     print(f'Field {id} contains {n} galaxies')\nField 1739 contains 343 galaxies\nField 699 contains 336 galaxies\nField 700 contains 311 galaxies\nField 225 contains 303 galaxies\nField 1740 contains 289 galaxies\n\n```\n\n#### What is the probability density at the position of each galaxy?\n\n```pycon\n>>> query = sa.select(\n...     Galaxy.id, SkymapTile.probdensity\n... ).filter(\n...     SkymapTile.id == 1,\n...     SkymapTile.hpx.contains(Galaxy.hpx)\n... ).order_by(\n...     SkymapTile.probdensity.desc()\n... ).limit(\n...     5\n... )\n>>> for id, p in session.execute(query):\n...     print(f'{id} has prob. density {p:.5g}/sr')\n2MASX J02532153+0632222 has prob. density 20.701/sr\n2MASX J02530482+0555431 has prob. density 20.695/sr\n2MASX J02533119+0628252 has prob. density 20.669/sr\n2MASX J02524584+0639206 has prob. density 20.656/sr\n2MASX J02534120+0615562 has prob. density 20.567/sr\n\n```\n\n#### What is the probability contained within each field?\n\n```pycon\n>>> area = (FieldTile.hpx * SkymapTile.hpx).area\n>>> prob = sa.func.sum(SkymapTile.probdensity * area)\n>>> query = sa.select(\n...     FieldTile.id, prob\n... ).filter(\n...     SkymapTile.id == 1,\n...     FieldTile.hpx.overlaps(SkymapTile.hpx)\n... ).group_by(\n...     FieldTile.id\n... ).order_by(\n...     prob.desc()\n... ).limit(\n...     5\n... )\n>>> for id, prob in session.execute(query):\n...     print(f'Field {id} probability is {prob:.3g}')\nField 1499 probability is 0.165\nField 1446 probability is 0.156\nField 452 probability is 0.154\nField 505 probability is 0.0991\nField 401 probability is 0.0962\n\n```\n\n#### What is the combined area of fields 1000 through 2000?\n\nIn the next two examples, we introduce `healpix_alchemy.func.union()` which\nfinds the union of a set of tiles. Because it is an aggregate function, it\nshould generally be used in a subquery.\n\n```pycon\n>>> union = sa.select(\n...     ha.func.union(FieldTile.hpx).label('hpx')\n... ).filter(\n...     FieldTile.id.between(1000, 2000)\n... ).subquery()\n>>> query = sa.select(\n...     sa.func.sum(union.columns.hpx.area)\n... )\n>>> result = session.execute(query).scalar_one()\n>>> print(f'{result:.3g} sr')\n9.33 sr\n\n```\n\n#### What is the integrated probability contained within fields 1000 through 2000?\n\n```pycon\n>>> union = sa.select(\n...     ha.func.union(FieldTile.hpx).label('hpx')\n... ).filter(\n...     FieldTile.id.between(1000, 2000)\n... ).subquery()\n>>> prob = sa.func.sum(SkymapTile.probdensity * (union.columns.hpx * SkymapTile.hpx).area)\n>>> query = sa.select(\n...     prob\n... ).filter(\n...     SkymapTile.id == 1,\n...     union.columns.hpx.overlaps(SkymapTile.hpx)\n... )\n>>> result = session.execute(query).scalar_one()\n>>> print(f'{result:.3g}')\n0.837\n\n```\n\n#### What is the area of the 90% credible region?\n\n```pycon\n>>> cum_area = sa.func.sum(\n...     SkymapTile.hpx.area\n... ).over(\n...     order_by=SkymapTile.probdensity.desc()\n... ).label(\n...     'cum_area'\n... )\n>>> cum_prob = sa.func.sum(\n...     SkymapTile.probdensity * SkymapTile.hpx.area\n... ).over(\n...     order_by=SkymapTile.probdensity.desc()\n... ).label(\n...     'cum_prob'\n... )\n>>> subquery = sa.select(\n...     cum_area,\n...     cum_prob\n... ).filter(\n...     SkymapTile.id == 1\n... ).subquery()\n>>> query = sa.select(\n...     sa.func.max(subquery.columns.cum_area)\n... ).filter(\n...     subquery.columns.cum_prob <= 0.9\n... )\n>>> result = session.execute(query).scalar_one()\n>>> print(f'{result:.3g} sr')\n0.277 sr\n\n```\n\n#### Which galaxies are within the 90% credible region?\n\n```pycon\n>>> cum_prob = sa.func.sum(\n...     SkymapTile.probdensity * SkymapTile.hpx.area\n... ).over(\n...     order_by=SkymapTile.probdensity.desc()\n... ).label(\n...     'cum_prob'\n... )\n>>> subquery = sa.select(\n...     SkymapTile.probdensity,\n...     cum_prob\n... ).filter(\n...     SkymapTile.id == 1\n... ).subquery()\n>>> min_probdensity = sa.select(\n...     sa.func.min(subquery.columns.probdensity)\n... ).filter(\n...     subquery.columns.cum_prob <= 0.9\n... ).scalar_subquery()\n>>> query = sa.select(\n...     Galaxy.id\n... ).filter(\n...     SkymapTile.id == 1,\n...     SkymapTile.hpx.contains(Galaxy.hpx),\n...     SkymapTile.probdensity >= min_probdensity\n... ).limit(\n...     5\n... )\n>>> for galaxy_id, in session.execute(query):\n...     print(galaxy_id)\n2MASX J02424077-0000478\n2MASX J02352772-0921216\n2MASX J02273746-0109226\n2MASX J02414523+0026354\n2MASX J20095408-4822462\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/skyportal/healpix-alchemy",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "healpix-alchemy",
    "package_url": "https://pypi.org/project/healpix-alchemy/",
    "platform": null,
    "project_url": "https://pypi.org/project/healpix-alchemy/",
    "project_urls": {
      "Homepage": "https://github.com/skyportal/healpix-alchemy",
      "Repository": "https://github.com/skyportal/healpix-alchemy"
    },
    "release_url": "https://pypi.org/project/healpix-alchemy/1.0.2/",
    "requires_dist": [
      "astropy",
      "astropy_healpix",
      "mocpy (>=0.12.2)",
      "sqlalchemy (>=1.4)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "SQLAlchemy extensions for HEALPix spatially indexed astronomy data",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17144190,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "859e45133cce889fabc1ff6fffd8e5fba0b56fd702a397613bce4f6a5cc968ac",
          "md5": "8f0d83db8cec595080fcc8bdd8a6cdcd",
          "sha256": "b842f123c6a7c5b34f89d91399ce56d8f558f6311d317ba33bd8ccb801b394b4"
        },
        "downloads": -1,
        "filename": "healpix_alchemy-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f0d83db8cec595080fcc8bdd8a6cdcd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 6284,
        "upload_time": "2020-07-14T03:06:32",
        "upload_time_iso_8601": "2020-07-14T03:06:32.761141Z",
        "url": "https://files.pythonhosted.org/packages/85/9e/45133cce889fabc1ff6fffd8e5fba0b56fd702a397613bce4f6a5cc968ac/healpix_alchemy-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e1df0b5870bfa2c203b7628400c4f561979a571670857b0a5b560919c08c924",
          "md5": "e85d08ebe4588dc3b7eeea3cec4f72b6",
          "sha256": "510080b6839fcd5587737ffabb593c3dd0c279ff5d7ab36253a920ba018d03bd"
        },
        "downloads": -1,
        "filename": "healpix-alchemy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e85d08ebe4588dc3b7eeea3cec4f72b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 4830,
        "upload_time": "2020-07-14T03:06:35",
        "upload_time_iso_8601": "2020-07-14T03:06:35.462477Z",
        "url": "https://files.pythonhosted.org/packages/6e/1d/f0b5870bfa2c203b7628400c4f561979a571670857b0a5b560919c08c924/healpix-alchemy-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53d2071644b2bf0ed40209f537c1db1ecadac9553fd8e4d242da98e95e3d1e0f",
          "md5": "f996684636a041ae5087e081a14918e4",
          "sha256": "351a31ad113d40b6083e443710de0b66e48f5284ce4d80d296e4a921033d3cf8"
        },
        "downloads": -1,
        "filename": "healpix_alchemy-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f996684636a041ae5087e081a14918e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 7316,
        "upload_time": "2020-07-14T20:29:24",
        "upload_time_iso_8601": "2020-07-14T20:29:24.002867Z",
        "url": "https://files.pythonhosted.org/packages/53/d2/071644b2bf0ed40209f537c1db1ecadac9553fd8e4d242da98e95e3d1e0f/healpix_alchemy-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d1a479c10c2303327023f0b9e1afd53fbe622a1a55c31f2dc531074d18a9615",
          "md5": "de684e7cd227936473deb74215d19850",
          "sha256": "f3367fd9c7e508da5f4c6967860a860e1ca64b1c101f87b710508e6ef4ceb1e9"
        },
        "downloads": -1,
        "filename": "healpix-alchemy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "de684e7cd227936473deb74215d19850",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 6016,
        "upload_time": "2020-07-14T20:29:24",
        "upload_time_iso_8601": "2020-07-14T20:29:24.973789Z",
        "url": "https://files.pythonhosted.org/packages/3d/1a/479c10c2303327023f0b9e1afd53fbe622a1a55c31f2dc531074d18a9615/healpix-alchemy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bee468e5f7e45864fc673e1cbaf784133b58460c8c9e9fe7c6bf3a53b93630a6",
          "md5": "f6158e59bb27034452f23aea3e602199",
          "sha256": "836da49880173c554165d78fa4be9244242c28bfebde82b1afd700fa1dfe8fd2"
        },
        "downloads": -1,
        "filename": "healpix_alchemy-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6158e59bb27034452f23aea3e602199",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 7370,
        "upload_time": "2020-07-15T01:39:41",
        "upload_time_iso_8601": "2020-07-15T01:39:41.153015Z",
        "url": "https://files.pythonhosted.org/packages/be/e4/68e5f7e45864fc673e1cbaf784133b58460c8c9e9fe7c6bf3a53b93630a6/healpix_alchemy-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0ec8826f3d3134eac226ca883f4f93095396fa2af9838147dbdfa161cd41918",
          "md5": "075348e6474ad2692f762b8ea056d75b",
          "sha256": "31ca14e5cc2adcf02b34656d5bcf57fc667c933fe07c89f7113e1d825d1b23bc"
        },
        "downloads": -1,
        "filename": "healpix-alchemy-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "075348e6474ad2692f762b8ea056d75b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 6078,
        "upload_time": "2020-07-15T01:39:42",
        "upload_time_iso_8601": "2020-07-15T01:39:42.267361Z",
        "url": "https://files.pythonhosted.org/packages/f0/ec/8826f3d3134eac226ca883f4f93095396fa2af9838147dbdfa161cd41918/healpix-alchemy-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "156b1f7f983f6c856ed316b21a039b7cf4ddb19141c1e408bdb63ff6054b18b7",
          "md5": "4553e6d5bfc75f5e1661b4249a514c1e",
          "sha256": "555294a8ff9470f7a55704e94bc5cbb56a8513ad71ae2347253eacefe3f46acb"
        },
        "downloads": -1,
        "filename": "healpix_alchemy-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4553e6d5bfc75f5e1661b4249a514c1e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 7287,
        "upload_time": "2020-07-17T12:04:42",
        "upload_time_iso_8601": "2020-07-17T12:04:42.778780Z",
        "url": "https://files.pythonhosted.org/packages/15/6b/1f7f983f6c856ed316b21a039b7cf4ddb19141c1e408bdb63ff6054b18b7/healpix_alchemy-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a888e606e9d4f1aee0c1d7ec14d5748d747da025dd8f912914522f9f5cbb3154",
          "md5": "544b9e206c3c366ccca5b1c3680d9b44",
          "sha256": "5697677ffe19b883409be4429cbb6c080a29d38538afce9d938943fbba857771"
        },
        "downloads": -1,
        "filename": "healpix-alchemy-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "544b9e206c3c366ccca5b1c3680d9b44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 6047,
        "upload_time": "2020-07-17T12:04:44",
        "upload_time_iso_8601": "2020-07-17T12:04:44.046318Z",
        "url": "https://files.pythonhosted.org/packages/a8/88/e606e9d4f1aee0c1d7ec14d5748d747da025dd8f912914522f9f5cbb3154/healpix-alchemy-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccb64e857723a9a90540fb331d863fd8122cb7414e6881de03c4d987d796af7d",
          "md5": "202a92f616ad9c468ff21db27ab93d38",
          "sha256": "3cb1034295552ed678b67ca393b8042f795a829eb4df4c080ef3e920dda00ce9"
        },
        "downloads": -1,
        "filename": "healpix_alchemy-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "202a92f616ad9c468ff21db27ab93d38",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 11797,
        "upload_time": "2021-08-23T14:43:00",
        "upload_time_iso_8601": "2021-08-23T14:43:00.755452Z",
        "url": "https://files.pythonhosted.org/packages/cc/b6/4e857723a9a90540fb331d863fd8122cb7414e6881de03c4d987d796af7d/healpix_alchemy-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fe18e19c5d6018b039c1fa0ecff7f520de9656162ea0929bea07718780d31c3",
          "md5": "37c6b04fce6ece544bd979a32c3355c9",
          "sha256": "67fff81ebb96384642a381c1b6c2d496c6f37d1f50edffa20ed5b378c4d7345d"
        },
        "downloads": -1,
        "filename": "healpix-alchemy-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "37c6b04fce6ece544bd979a32c3355c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 9842,
        "upload_time": "2021-08-23T14:43:03",
        "upload_time_iso_8601": "2021-08-23T14:43:03.174924Z",
        "url": "https://files.pythonhosted.org/packages/5f/e1/8e19c5d6018b039c1fa0ecff7f520de9656162ea0929bea07718780d31c3/healpix-alchemy-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de7e696b0e3b3859a36361fb455b488321984d21a6965b3c4fe96403b0108d9e",
          "md5": "684addfe26e11cf0c38f74715652e06d",
          "sha256": "64b5c371cd5fe90cec1e4473b8238291a62c5af99d830c48f764864bfddb3d69"
        },
        "downloads": -1,
        "filename": "healpix_alchemy-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "684addfe26e11cf0c38f74715652e06d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6,<4.0",
        "size": 11823,
        "upload_time": "2021-08-24T17:24:12",
        "upload_time_iso_8601": "2021-08-24T17:24:12.627161Z",
        "url": "https://files.pythonhosted.org/packages/de/7e/696b0e3b3859a36361fb455b488321984d21a6965b3c4fe96403b0108d9e/healpix_alchemy-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65c754afe62ab1dd1dda74d98d615ada0591331953ba488f5dfae39f03b28a98",
          "md5": "125b87c90cb697931b95682e88569b42",
          "sha256": "15b3bdf455b2017eccaab2e2ddcf3efcda8fab2169f87f25ec2c8dc0af285bed"
        },
        "downloads": -1,
        "filename": "healpix-alchemy-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "125b87c90cb697931b95682e88569b42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6,<4.0",
        "size": 9849,
        "upload_time": "2021-08-24T17:24:14",
        "upload_time_iso_8601": "2021-08-24T17:24:14.526989Z",
        "url": "https://files.pythonhosted.org/packages/65/c7/54afe62ab1dd1dda74d98d615ada0591331953ba488f5dfae39f03b28a98/healpix-alchemy-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77db6102a24db9ded9843911fe8b118cb70eef6659737bea2b831625907ff6bd",
          "md5": "95705ab7b633bbf8c0be41f1bc3c6958",
          "sha256": "b3514e2bf7e7af9e7eef3092c6771ef71ffc8472e61aa2d2c378f0aa77291402"
        },
        "downloads": -1,
        "filename": "healpix_alchemy-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95705ab7b633bbf8c0be41f1bc3c6958",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 10654,
        "upload_time": "2021-11-22T16:22:25",
        "upload_time_iso_8601": "2021-11-22T16:22:25.498866Z",
        "url": "https://files.pythonhosted.org/packages/77/db/6102a24db9ded9843911fe8b118cb70eef6659737bea2b831625907ff6bd/healpix_alchemy-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9df98a8c35d057d0b6d2a9efba25b256e2257970642c81909548f6233b2378ed",
          "md5": "065aae6686404d2c800a4b7c89cbea8b",
          "sha256": "c92b4bf4f48c64ed272e53c6149319e101af978f88525511c64787a1374b7309"
        },
        "downloads": -1,
        "filename": "healpix-alchemy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "065aae6686404d2c800a4b7c89cbea8b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 17254,
        "upload_time": "2021-11-22T16:22:27",
        "upload_time_iso_8601": "2021-11-22T16:22:27.438053Z",
        "url": "https://files.pythonhosted.org/packages/9d/f9/8a8c35d057d0b6d2a9efba25b256e2257970642c81909548f6233b2378ed/healpix-alchemy-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33a24ecbcf16f4f42ae547eed9e86cf79e1b6e84f4f4da9a6e3a2d5f1c695b09",
          "md5": "5bcc64cd5c7757587a173864597d1cb2",
          "sha256": "a574fba58cd4b64074fe35d668f5bd976454acefe7077544f64e4a3ea370bff8"
        },
        "downloads": -1,
        "filename": "healpix_alchemy-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5bcc64cd5c7757587a173864597d1cb2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 15154,
        "upload_time": "2021-12-08T21:36:13",
        "upload_time_iso_8601": "2021-12-08T21:36:13.574110Z",
        "url": "https://files.pythonhosted.org/packages/33/a2/4ecbcf16f4f42ae547eed9e86cf79e1b6e84f4f4da9a6e3a2d5f1c695b09/healpix_alchemy-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "16b0ab5f57d98d3b2149d34f7a5a3ea38741b78225dc997a584b8e32c45a0e1d",
          "md5": "dc8541f472a85562e532f6dfbfb2afe1",
          "sha256": "05e2d949f312e84122ed495085c33b4b35f7dd763dab9bb927c941afec018e26"
        },
        "downloads": -1,
        "filename": "healpix-alchemy-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dc8541f472a85562e532f6dfbfb2afe1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 20536,
        "upload_time": "2021-12-08T21:36:15",
        "upload_time_iso_8601": "2021-12-08T21:36:15.253370Z",
        "url": "https://files.pythonhosted.org/packages/16/b0/ab5f57d98d3b2149d34f7a5a3ea38741b78225dc997a584b8e32c45a0e1d/healpix-alchemy-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2abe3bdbc3c2465bf429541c121aaac478ba4c5190d470db3e5644d1bfef244a",
          "md5": "e9774cc4047af211193c82a59b660fef",
          "sha256": "47dcfa91db443cc3eb5a7d82c0d1988789202ba2dc9ee302428fc3e837c64b17"
        },
        "downloads": -1,
        "filename": "healpix_alchemy-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9774cc4047af211193c82a59b660fef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 15701,
        "upload_time": "2023-03-03T13:26:00",
        "upload_time_iso_8601": "2023-03-03T13:26:00.050938Z",
        "url": "https://files.pythonhosted.org/packages/2a/be/3bdbc3c2465bf429541c121aaac478ba4c5190d470db3e5644d1bfef244a/healpix_alchemy-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6cb28b3af44a879225c310c81ba38c0ea3693f2cfe34dbca0af379c9050f3b2",
          "md5": "8057dd73041f6e051e155435cedf0a65",
          "sha256": "11a73a1965a714339d2d65db0a49b6d29550c0bd79e2be64a1605ca8e2958869"
        },
        "downloads": -1,
        "filename": "healpix_alchemy-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8057dd73041f6e051e155435cedf0a65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 19422,
        "upload_time": "2023-03-03T13:26:01",
        "upload_time_iso_8601": "2023-03-03T13:26:01.975217Z",
        "url": "https://files.pythonhosted.org/packages/f6/cb/28b3af44a879225c310c81ba38c0ea3693f2cfe34dbca0af379c9050f3b2/healpix_alchemy-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2abe3bdbc3c2465bf429541c121aaac478ba4c5190d470db3e5644d1bfef244a",
        "md5": "e9774cc4047af211193c82a59b660fef",
        "sha256": "47dcfa91db443cc3eb5a7d82c0d1988789202ba2dc9ee302428fc3e837c64b17"
      },
      "downloads": -1,
      "filename": "healpix_alchemy-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e9774cc4047af211193c82a59b660fef",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 15701,
      "upload_time": "2023-03-03T13:26:00",
      "upload_time_iso_8601": "2023-03-03T13:26:00.050938Z",
      "url": "https://files.pythonhosted.org/packages/2a/be/3bdbc3c2465bf429541c121aaac478ba4c5190d470db3e5644d1bfef244a/healpix_alchemy-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f6cb28b3af44a879225c310c81ba38c0ea3693f2cfe34dbca0af379c9050f3b2",
        "md5": "8057dd73041f6e051e155435cedf0a65",
        "sha256": "11a73a1965a714339d2d65db0a49b6d29550c0bd79e2be64a1605ca8e2958869"
      },
      "downloads": -1,
      "filename": "healpix_alchemy-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8057dd73041f6e051e155435cedf0a65",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 19422,
      "upload_time": "2023-03-03T13:26:01",
      "upload_time_iso_8601": "2023-03-03T13:26:01.975217Z",
      "url": "https://files.pythonhosted.org/packages/f6/cb/28b3af44a879225c310c81ba38c0ea3693f2cfe34dbca0af379c9050f3b2/healpix_alchemy-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}