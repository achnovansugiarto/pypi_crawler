{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Programming Language :: Python"
    ],
    "description": "<h1 align=\"center\"> pyRadðŸ¤˜ </h1>\n\n<p align=\"center\"> The all-in-one repo for NeRFs </p>\n\n<p align=\"center\"> \n    <a href=\"https://plenoptix-pyrad.readthedocs-hosted.com/en/latest/?badge=latest\">\n        <img alt=\"Documentation Status\" src=\"https://readthedocs.com/projects/plenoptix-pyrad/badge/?version=latest\">\n    </a>\n    <!-- TODO: add license and have it point to that -->\n    <a href=\"https://github.com/plenoptix/pyrad/blob/master/LICENSE\">\n        <img alt=\"Documentation Status\" src=\"https://img.shields.io/badge/License-Apache_2.0-blue.svg\">\n    </a> \n    <!-- TODO: add version number badge -->\n</p>\n\n- [Quickstart](#quickstart)\n- [Supported Features](#supported-features)\n- [Benchmarked Model Architectures](#benchmarked-model-architectures)\n\n# Quickstart\n\nThe quickstart will help you get started with the default vanilla nerf trained on the classic blender lego scene.\nFor more complex changes (e.g. running with your own data/ setting up a new NeRF graph, please see our [docs](https://plenoptix-pyrad.readthedocs-hosted.com/en/latest/quickstart/quick_tour.html).\n\n#### 1. Installation: Setup the environment\n\nThis repository is tested with CUDA 11.3. Make sure to install [Conda](https://docs.conda.io/en/latest/miniconda.html#linux-installers) before preceding.\n\n<details>\n<summary>Installing Conda</summary>\n\n    This step is fairly self-explanatory, but here are the basic steps. You can also find countless tutorials online.\n\n    ```\n    cd /path/to/install/miniconda\n\n    mkdir -p miniconda3\n    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda3/miniconda.sh\n    bash miniconda3/miniconda.sh -b -u -p miniconda3\n    rm -rf miniconda/miniconda.sh\n    ```\n\n</details>\n\n```\n# Create the python environment\nconda create --name pyrad python=3.8.13\nconda activate pyrad\n\n# Clone the repo\ngit clone git@github.com:plenoptix/pyrad.git\n\n# Install dependencies\ncd pyrad\npip install -r environment/requirements.txt\n\n# Install pyrad as a library\npip install -e .\n\n# Install library with CUDA support. Change setup.py to `USE_CUDA = True` and then\npython setup.py develop\n\n# Install tiny-cuda-nn (tcnn) to use with the graph_instant_ngp.yaml config\npip install git+https://github.com/NVlabs/tiny-cuda-nn/#subdirectory=bindings/torch\n\n# Run the test cases\npytest tests\n```\n\n#### 2. Getting the data\n\nDownload the original [NeRF dataset](https://drive.google.com/drive/folders/128yBriW1IG_3NJ5Rp7APSTZsJqdJdfc1) and unfold it in the following format. This is for the blender dataset type. We support the major datasets and allow users to create their own dataset, described in detail [here](docs/tutorials/data_setup.rst).\n\n```\n|â”€ pyrad/\n   â”œâ”€ data/\n   |  â”œâ”€ blender/\n   |     â”œâ”€ fern/\n   |     â”œâ”€ lego/\n         ...\n      |- <dataset_format>/\n         |- <scene>\n         ...\n```\n\n#### 3. Training a model\n\nTo run with all the defaults, e.g. vanilla nerf method with the blender lego image\n\n```\n# Run a vanilla nerf model.\npython scripts/run_train.py\n\n# Run a faster version with instant ngp using tcnn (without the viewer).\npython scripts/run_train.py --config-name=graph_instant_ngp.yaml\n\n# Run with the viewer. However, you'll have to start the viewer server first. (See the docs.)\npython scripts/run_train.py --config-name=graph_instant_ngp.yaml viewer.enable=true\n```\n\nWith support for [Hydra](https://hydra.cc/), you can run with other configurations by changing appropriate configs defined in `configs/` or by setting flags via command-line arguments.\n\n#### 4. Visualizing training runs\n\nWe support multiple methods to visualize training, the default configuration uses Tensorboard. More information on logging can be found [here](https://plenoptix-pyrad.readthedocs-hosted.com/en/latest/tooling/logging.html).\n\n<details>\n<summary>Real-time Viewer</summary>\n\nWe have developed our own Real-time web viewer, more information can be found [here](https://plenoptix-pyrad.readthedocs-hosted.com/en/latest/tooling/viewer.html). This viewer runs during training and is designed to work with models that have fast rendering pipelines.\n\nTo enable add the following to your config:\n\n```\nviewer:\n  enable: true\n```\n\n</details>\n\n<details>\n<summary>Tensorboard</summary>\n\nIf you run everything with the default configuration we log all training curves, test images, and other stats. Once the job is launched, you will be able to track training by launching the tensorboard in `outputs/blender_lego/vanilla_nerf/<timestamp>/<events.tfevents>`.\n\n```\ntensorboard --logdir outputs\n\n# or the following\nexport TENSORBOARD_PORT=<port>\nbash environment/run_tensorboard.sh\n```\n\n</details>\n\n<details>\n<summary>Weights & Biases</summary>\n\nWe support logging to weights and biases, to enable add the following to the config:\n\n```\nlogging:\n    writer:\n        WandbWriter\n```\n\n</details>\n\n#### 5. Rendering a trajectories during inference\n\n```\npython scripts/run_eval.py --method=traj --traj=spiral --output-filename=output.mp4 --config-name=graph_instant_ngp.yaml trainer.resume_train.load_dir=outputs/blender_lego/instant_ngp/2022-07-07_230905/checkpoints\n```\n\n#### 6. In-depth guide\n\nFor a more in-depth tutorial on how to modify/implement your own NeRF Graph, please see our [walk-through](https://plenoptix-pyrad.readthedocs-hosted.com/en/latest/tutorials/creating_graphs.html).\n\n# Supported Features\n\nWe provide the following support strucutures to make life easier for getting started with NeRFs. For a full description, please refer to our [features page](#).\n\nIf you are looking for a feature that is not currently supported, please do not hesitate to contact the Plenoptix team!\n\n#### :metal: Support for [Hydra](https://hydra.cc/) config structure\n\n#### :metal: Support for multiple logging interfaces\n\n#### :metal: Built-in support for profiling code\n\n#### :metal: Benchmarking scripts\n\n#### :metal: Speed up your code with Tiny Cuda NN\n\n# Benchmarked Model Architectures\n\n| Method                                                                            | PSNR                     |\n| --------------------------------------------------------------------------------- | ------------------------ |\n| [NeRF](https://arxiv.org/abs/2003.08934)                                          | :hourglass_flowing_sand: |\n| [instant NGP](https://nvlabs.github.io/instant-ngp/assets/mueller2022instant.pdf) | :hourglass_flowing_sand: |\n| [Mip NeRF](https://arxiv.org/abs/2103.13415)                                      | :hourglass_flowing_sand: |\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nerfactory",
    "package_url": "https://pypi.org/project/nerfactory/",
    "platform": null,
    "project_url": "https://pypi.org/project/nerfactory/",
    "project_urls": {
      "Documentation": "https://plenoptix-pyrad.readthedocs-hosted.com/en/latest/?badge=latest"
    },
    "release_url": "https://pypi.org/project/nerfactory/0.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "All-in-one repository for state-of-the-art NeRFs",
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14500044,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1347c790d67ebbd3bb7bab9011033e9ccbd0d506d62535e612ddc9eb3820d94",
          "md5": "a54a7032535b9fef2da89d1cae5eab19",
          "sha256": "7901c3cb1cd6fdd41e66751867a59cfda7a9c8419bf52e1c7def95dfb5246bd9"
        },
        "downloads": -1,
        "filename": "nerfactory-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a54a7032535b9fef2da89d1cae5eab19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 152772,
        "upload_time": "2022-07-20T22:48:03",
        "upload_time_iso_8601": "2022-07-20T22:48:03.634931Z",
        "url": "https://files.pythonhosted.org/packages/d1/34/7c790d67ebbd3bb7bab9011033e9ccbd0d506d62535e612ddc9eb3820d94/nerfactory-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e74dbaa1818c5d53d4947b544ddbf83140c0d42944d77d1c0242d466708292e8",
          "md5": "75f598395734ce63edf033fc22127e14",
          "sha256": "2e4b16a758e85ff585d8800fe69b7061ac97445ccaa3ddefa44d196bbd914c8d"
        },
        "downloads": -1,
        "filename": "nerfactory-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "75f598395734ce63edf033fc22127e14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 94904,
        "upload_time": "2022-07-20T22:48:04",
        "upload_time_iso_8601": "2022-07-20T22:48:04.979495Z",
        "url": "https://files.pythonhosted.org/packages/e7/4d/baa1818c5d53d4947b544ddbf83140c0d42944d77d1c0242d466708292e8/nerfactory-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d1347c790d67ebbd3bb7bab9011033e9ccbd0d506d62535e612ddc9eb3820d94",
        "md5": "a54a7032535b9fef2da89d1cae5eab19",
        "sha256": "7901c3cb1cd6fdd41e66751867a59cfda7a9c8419bf52e1c7def95dfb5246bd9"
      },
      "downloads": -1,
      "filename": "nerfactory-0.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a54a7032535b9fef2da89d1cae5eab19",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 152772,
      "upload_time": "2022-07-20T22:48:03",
      "upload_time_iso_8601": "2022-07-20T22:48:03.634931Z",
      "url": "https://files.pythonhosted.org/packages/d1/34/7c790d67ebbd3bb7bab9011033e9ccbd0d506d62535e612ddc9eb3820d94/nerfactory-0.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e74dbaa1818c5d53d4947b544ddbf83140c0d42944d77d1c0242d466708292e8",
        "md5": "75f598395734ce63edf033fc22127e14",
        "sha256": "2e4b16a758e85ff585d8800fe69b7061ac97445ccaa3ddefa44d196bbd914c8d"
      },
      "downloads": -1,
      "filename": "nerfactory-0.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "75f598395734ce63edf033fc22127e14",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 94904,
      "upload_time": "2022-07-20T22:48:04",
      "upload_time_iso_8601": "2022-07-20T22:48:04.979495Z",
      "url": "https://files.pythonhosted.org/packages/e7/4d/baa1818c5d53d4947b544ddbf83140c0d42944d77d1c0242d466708292e8/nerfactory-0.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}