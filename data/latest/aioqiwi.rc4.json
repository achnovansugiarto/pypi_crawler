{
  "info": {
    "author": "Martin Winks",
    "author_email": "cat@snejugal.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "===========\nü•ù aioqiwi\n===========\n\n.. image:: https://img.shields.io/badge/Python%203.7-blue.svg\n    :target: https://www.python.org/\n    :alt: Python-version\n\n**Qiwi payments for humans(for healthy humans)**\n\nSupports most of `qiwi <https://qiwi.com>`_ apis: `qiwi-maps <https://github.com/QIWI-API/qiwi-map>`_, `bills <https://developer.qiwi.com/en/bill-payments/>`_, `wallet <https://developer.qiwi.com/en/qiwi-wallet-personal/>`_\n\n------------\nInstallation\n------------\n\n::\n\n    pip install aioqiwi\n\n---------------\nüî∏ Dependencies\n---------------\n\n+------------+----------------------------+\n| Library    | Description                |\n+============+============================+\n|  aiohttp   | default http server        |\n+------------+----------------------------+\n|  pydantic  | schema validation          |\n+------------+----------------------------+\n\n\n**However aioqiwi is highly customizable. Example of switching json modules:**\n\n::\n\n    pip install orjson\n\n.. code-block:: python\n\n    from aioqiwi import Wallet\n    from aioqiwi.core.tooling import json\n\n    wallet = Wallet()\n    wallet.tools.json_module = json.JSONModule(\"orjson\")\n\n--------------------\nüîπ Dive-in Examples\n--------------------\n\n.. code:: python\n\n    import asyncio\n\n    from aioqiwi import Wallet\n\n    async def qiwi():\n        async with Wallet(\"TOKEN from https://qiwi.com/api\") as w:\n            w.phone_number = '+7878787878'  # phone number is not required by default, but some methods need it\n            balance = await w.balance()\n            print(\"ACCOUNTS:\")\n            for acc in balance.accounts:\n                print(acc.alias, acc.balance)\n\n    asyncio.run(qiwi())\n\n\n--------------------\nüì£ Handling updates\n--------------------\n\n**aioqiwi** provides user-friendly web-hooks handler\n\n\n.. code:: python\n\n    import asyncio\n    from aioqiwi.wallet import WebHook, Wallet\n\n    wallet = Wallet(\"...\")\n\n    @wallet.hm(lambda event: ...)\n    async def payments_handler(hook: WebHook):\n        print(f\"{hook.payment.account} sent you {event.payment}\")\n\n    @wallet.hm()\n    async def secret_payments_handler(event: WebHook):\n        await something(event.payment.commission.amount)\n\n    wallet.idle(port=8090)\n\nWhen you do `Wallet::idle`, aioqiwi adds connector closing to `aiohttp.web.Application::on_shutdown` to make sure connector closes, however if you want to avoid this behaviour pass `close_connector_ate=False` to `Wallet::idle`\n\n****************\nHandler manager\n****************\n\nHandler manager `QiwiClient.handler_manager` or `qiwi_client.hm` is responsible for event-handlers registering and filtering/delivering updates to them.\nThere're currently two event processing strategies:\n1. `core.handler.EventProcessStrategy.ORDERED` - sequential filter-check. has O(n) amplitude\n2. `core.handler.EventProcessStrategy.MILKSHAKE` - as receives update, will shuffle existing handlers list. has O(n) amplitude\n\n.. note::\n    Filters results are not currently cached.\n\n.. note::\n    Some users don't want mess with web-hooks, for those fellas aioqiwi has `history_polling` [wip] in `aioqiwi.contrib`. Different approach for dealing with payment events.\n    Find usage example in `examples/` directory.\n\n---------------------------------------------------\nüî• Qiwi API p2p transactions(bills)\n---------------------------------------------------\n\n.. code:: python\n\n    import asyncio\n    from aioqiwi import QiwiKassa\n\n    async def test_kassa():\n        async with QiwiKassa(\"SECRET KEY from p2p.qiwi.com or kassa.qiwi.com\") as kassa:\n            sent_invoice = await kassa.new_bill(14.88, lifetime=44)\n            # setting lifetime to 44 ahead today [default is 10] 45 - is max\n            print(\"Url to pay:\", sent_invoice.pay_url)\n            await kassa.close()\n\n    asyncio.run(test_kassa())\n\n\n``sent_invoice.pay_url`` will redirect us to something like:\n\n.. image:: https://imbt.ga/gO8EzaFItB\n\n\n---------------------------\nüí≥ Handling bill payments\n---------------------------\n\n\n.. code:: python\n\n\n    from aioqiwi.kassa import QiwiKassa, Notification\n\n    kassa = QiwiKassa('PRIVATE_KEY')\n\n    @kassa.hm(lambda bill: bill.bill.amount.currency == 'RUB')\n    async def my_shiny_rubles_handler(bill_update: Notification):\n        # do something\n        pass\n\n    kassa.idle()\n\n\n--------------------\nüó∫ QIWI terminals\n--------------------\n\n**aioqiwi** covers qiwi's `MAPS\n<https://developer.qiwi.com/ru/qiwi-map>`_ api in aioqiwi.terminals module\n\n---------------\nConnectors\n---------------\n\nQiwiClient.connector is responsible for making http requests. Current available request managers are located in `aioqiwi.core.connectors`\n\nDefault connector is `aioqiwi.core.connectors.asyncio`, but if it's no suit for you, you can easily switch to another\n\nExample:\n\n.. code:: python3\n\n    from aioqiwi import Wallet\n    from aioqiwi.core.connectors.aiohttp import AiohttpConnector\n\n    wallet = Wallet(\"auth\")\n    # switch with read-to-use connector-like instance implementing\n    wallet.connector = AiohttpConnector(timeout, {\"user-agent\": \"opeka/02\"})\n    # or switch with aioqiwi.core.connectors.abstract.Connector compatible class\n    wallet.connector = AiohttpConnector\n\n*******************\nHacking connector\n*******************\n\nYou can easily implement your own http client(connector), subclassing from `aioqiwi.core.connectors.abstract.AbstractConnector`. Take a look at \"out of the box\" `aiohttp` or `asyncio` sessions for the start.\n\n-----------------------\nüëæ Handling errors\n-----------------------\n\n******************\nAPI request error\n******************\n\nConsider we have a `aioqiwi.wallet.Wallet` instance with a named reference `wallet` to it.\nKnown error when we cannot ask server for more than 50 rows in `wallet.history`. To handle that error, we simply:\n\n.. code:: python\n\n    from aioqiwi.exceptions import AioqiwiError\n    from aioqiwi.errors import ErrorInfo\n\n    try:\n        await wallet.history(2 ** 6)  # pass rows=64, whilst constraint is 0<rows<51\n    except AioqiwiError as exc:\n        if exc.err:  # this feature is experimental\n            exc.err: ErrorInfo = exc.err  # cast to aioqiwi.Wallet's error info\n            print(exc.err.error_message)\n\n***************\nTimeoutError\n***************\n\nThis is slight different error and aioqiwi should not be really responsible for it. It's usually server-side error\nwhich makes exception that should be raised connector-specific. `asyncio.TimeoutError` is exception that is produced\nby `asyncio` connector. In `aiohttp` or other connectors it may differ.\n\n-----------------------------\n‚õè return policies (types)\n-----------------------------\n\naioqiwi's server.BaseWebHookView and requests.Requests support \"return policy\", it means you can get response/update in the form that suits your needs.\nThere're currently 5 return policies.\n\n- NOTHING - returns nothing(note: None is python's implicit return), :note: returning nothing does not mean doing nothing, validation is done anyway\n- READ_DATA - raw return once stream is read\n- JSON - raw return once read data was deserialized\n- MODEL - complex return once json deserialized and new model instantiated\n- LIST_OF_MODELS - complex return once json deserialized as an iterable list with new instantiated models of json objects\n\n-------------------\n‚ùì HOW-TOs\n-------------------\n\nYou can find examples in ``examples/`` directory in github repository. For start examples above should be enough.\n\n\n---------------------------\nüîß TODOs\n---------------------------\n\n- **Tests/CI/CD**\n- **Implement all qiwi wallet API methods**\n\n-----------------\nWork in progress\n-----------------\n\n- history_polling needs to be tested\n- implement wallet web-hook payment verification\n\n------------------------------------------\nüê¶ Community\n------------------------------------------\n\n**My group**\n`‚úàÔ∏è Telegram\n<https://t.me/joinchat/B2cC_hSIAiYXxqKghdguCA>`_\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/uwinx/aioqiwi",
    "keywords": "asyncio,aiohttp,qiwi,api-client,aioqiwi",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aioqiwi",
    "package_url": "https://pypi.org/project/aioqiwi/",
    "platform": "",
    "project_url": "https://pypi.org/project/aioqiwi/",
    "project_urls": {
      "Homepage": "https://github.com/uwinx/aioqiwi",
      "Repository": "https://github.com/uwinx/aioqiwi"
    },
    "release_url": "https://pypi.org/project/aioqiwi/1.1.5/",
    "requires_dist": [
      "pydantic (>=1.4,<2.0)",
      "aiohttp (>=3.6.2,<4.0.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Convenient and asynchronous qiwi.com api-wrapper library",
    "version": "1.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6958149,
  "releases": {
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "560f9475b0710da2a98a6eca558e598ec440210cb5b62962cda705d51b10b09b",
          "md5": "e6455198ce81324cf44069266bd98dcb",
          "sha256": "45155f608b9a99cb37c1fdda104a97bc53ceb04c370571b797d8793794926f61"
        },
        "downloads": -1,
        "filename": "aioqiwi-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6455198ce81324cf44069266bd98dcb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 53757,
        "upload_time": "2020-04-05T22:37:28",
        "upload_time_iso_8601": "2020-04-05T22:37:28.212866Z",
        "url": "https://files.pythonhosted.org/packages/56/0f/9475b0710da2a98a6eca558e598ec440210cb5b62962cda705d51b10b09b/aioqiwi-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64781474f69fe7b8012208c5d830efe0dc6c7aca6be35bdce6ec61566db4cea3",
          "md5": "c1e9b38ea8e49a22e22cdd742e312566",
          "sha256": "3043508cef12a03f2e9fc7f0f883364395480aac357786c9964f04ef46c8f1e0"
        },
        "downloads": -1,
        "filename": "aioqiwi-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c1e9b38ea8e49a22e22cdd742e312566",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 40758,
        "upload_time": "2020-04-05T22:37:29",
        "upload_time_iso_8601": "2020-04-05T22:37:29.933606Z",
        "url": "https://files.pythonhosted.org/packages/64/78/1474f69fe7b8012208c5d830efe0dc6c7aca6be35bdce6ec61566db4cea3/aioqiwi-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "690ccd15bc9a8b710079e0c0e3ab933a0040861988c667c3ec96c351b3b723e2",
          "md5": "259d40f896185c6dbaddde226f1877ab",
          "sha256": "4b2418af30a52ee5b714eb32b79bd4939b4a29f2c5486502d369fc2ef883e3e6"
        },
        "downloads": -1,
        "filename": "aioqiwi-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "259d40f896185c6dbaddde226f1877ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 53748,
        "upload_time": "2020-04-05T22:41:02",
        "upload_time_iso_8601": "2020-04-05T22:41:02.124627Z",
        "url": "https://files.pythonhosted.org/packages/69/0c/cd15bc9a8b710079e0c0e3ab933a0040861988c667c3ec96c351b3b723e2/aioqiwi-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76672d45440138e8c8a41e320bdcf71bbc53136eecd2d3e047437554f4b61a19",
          "md5": "5d53e25a9e263f0f29db06dfe86ceaaf",
          "sha256": "5194a5110122885c8fb1eac45ce6d7a19078981da6ff5672a6ba40bec25c39d7"
        },
        "downloads": -1,
        "filename": "aioqiwi-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5d53e25a9e263f0f29db06dfe86ceaaf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 40751,
        "upload_time": "2020-04-05T22:41:04",
        "upload_time_iso_8601": "2020-04-05T22:41:04.235434Z",
        "url": "https://files.pythonhosted.org/packages/76/67/2d45440138e8c8a41e320bdcf71bbc53136eecd2d3e047437554f4b61a19/aioqiwi-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd42c392f2a35b415f1011ba5cc4abd09551866a8133c341c6bcc547da48848e",
          "md5": "8aa89019197c4070b25b027ae6d30996",
          "sha256": "69d6be62b8b0e69344a90bd39258a78e28c5a60c7fb38685828ed39bb942429d"
        },
        "downloads": -1,
        "filename": "aioqiwi-1.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8aa89019197c4070b25b027ae6d30996",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 53728,
        "upload_time": "2020-04-05T22:51:59",
        "upload_time_iso_8601": "2020-04-05T22:51:59.121388Z",
        "url": "https://files.pythonhosted.org/packages/fd/42/c392f2a35b415f1011ba5cc4abd09551866a8133c341c6bcc547da48848e/aioqiwi-1.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79f3e3636c941880a3b622f45376f846b18cbdf1238c67216859773bf7bcc647",
          "md5": "f9062b22870d84a839c00f0483699dcd",
          "sha256": "bc39015f604c9ec009d319be8bd2706aa3c7c4d9a3ba083ae36b1ea774f0bbd4"
        },
        "downloads": -1,
        "filename": "aioqiwi-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f9062b22870d84a839c00f0483699dcd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 40733,
        "upload_time": "2020-04-05T22:52:01",
        "upload_time_iso_8601": "2020-04-05T22:52:01.247937Z",
        "url": "https://files.pythonhosted.org/packages/79/f3/e3636c941880a3b622f45376f846b18cbdf1238c67216859773bf7bcc647/aioqiwi-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e4494fbc8318ad200f6d81fb1dd1548ac779ebbf67bf64627e6ed7dbc6b3e2f",
          "md5": "986e4e0593b42f4d569528f2bb2fc56e",
          "sha256": "3a4aa94a8b3433483fe8d7cd062e0f6f45a87d4fdbeba42a80d7e0a1805d6824"
        },
        "downloads": -1,
        "filename": "aioqiwi-1.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "986e4e0593b42f4d569528f2bb2fc56e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 53758,
        "upload_time": "2020-04-05T22:57:45",
        "upload_time_iso_8601": "2020-04-05T22:57:45.290126Z",
        "url": "https://files.pythonhosted.org/packages/6e/44/94fbc8318ad200f6d81fb1dd1548ac779ebbf67bf64627e6ed7dbc6b3e2f/aioqiwi-1.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c89b25bba32e650ca3b07ea4ab0052c26bd2789a0445635f32bd7df5c1f6e9cb",
          "md5": "2750f8d7d6afec03f0e7370db8299d11",
          "sha256": "5ebcadde0fca5d5e72f12336952fbb0f7664b3d8155f49a57ef7a021aff013d8"
        },
        "downloads": -1,
        "filename": "aioqiwi-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2750f8d7d6afec03f0e7370db8299d11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 40768,
        "upload_time": "2020-04-05T22:57:47",
        "upload_time_iso_8601": "2020-04-05T22:57:47.344128Z",
        "url": "https://files.pythonhosted.org/packages/c8/9b/25bba32e650ca3b07ea4ab0052c26bd2789a0445635f32bd7df5c1f6e9cb/aioqiwi-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e4494fbc8318ad200f6d81fb1dd1548ac779ebbf67bf64627e6ed7dbc6b3e2f",
        "md5": "986e4e0593b42f4d569528f2bb2fc56e",
        "sha256": "3a4aa94a8b3433483fe8d7cd062e0f6f45a87d4fdbeba42a80d7e0a1805d6824"
      },
      "downloads": -1,
      "filename": "aioqiwi-1.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "986e4e0593b42f4d569528f2bb2fc56e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 53758,
      "upload_time": "2020-04-05T22:57:45",
      "upload_time_iso_8601": "2020-04-05T22:57:45.290126Z",
      "url": "https://files.pythonhosted.org/packages/6e/44/94fbc8318ad200f6d81fb1dd1548ac779ebbf67bf64627e6ed7dbc6b3e2f/aioqiwi-1.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c89b25bba32e650ca3b07ea4ab0052c26bd2789a0445635f32bd7df5c1f6e9cb",
        "md5": "2750f8d7d6afec03f0e7370db8299d11",
        "sha256": "5ebcadde0fca5d5e72f12336952fbb0f7664b3d8155f49a57ef7a021aff013d8"
      },
      "downloads": -1,
      "filename": "aioqiwi-1.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "2750f8d7d6afec03f0e7370db8299d11",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 40768,
      "upload_time": "2020-04-05T22:57:47",
      "upload_time_iso_8601": "2020-04-05T22:57:47.344128Z",
      "url": "https://files.pythonhosted.org/packages/c8/9b/25bba32e650ca3b07ea4ab0052c26bd2789a0445635f32bd7df5c1f6e9cb/aioqiwi-1.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}