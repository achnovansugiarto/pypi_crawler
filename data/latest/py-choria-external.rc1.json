{
  "info": {
    "author": "Ben Roberts",
    "author_email": "me@benroberts.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "# py-mco-agent\n\n## Overview\n\n`py-choria-external` implements the Choria External communications' protocol so that External Choria functions can be\nwritten in the Python language.\n\n## Installation\n\nThis library is typically pulled in as a dependency by other packages and is not useful on its own.\n\n    pip install py-choria-external\n    \nThis library requires a version of Choria with external agent support (0.12.1+)\n\n## Related projects\n\nFor real-world usages of this library, see also:\n\n* [py-mco-agent](https://github.com/optiz0r/py-mco-agent)\n  Implements [Choria External Agent](https://choria.io/docs/development/mcorpc/externalagents/)\n* [py-choria-discovery](https://github.com/optiz0r/py-choria-discovery)\n  Implements [Choria External Discovery](https://choria.io/docs/concepts/discovery/#external)\n    \n## Implementing new Choria External functionality using this library\n\nTo implement support for a new Choria External function of type \"Example\"\ncreate a python package with the following directory layout\n\n```\nchoria_example/\n├──schemas/\n│  ├── io.choria.choria.example.v1.external_request.json\n│  └── io.choria.choria.example.v1.external_reply.json\n├── __init__.py\n├── example.py\n└── protocol.py\n```\n\n### Schemas\n\nThese are copies of the relevant [Choria Schema files](https://github.com/choria-io/schemas/tree/master/choria).\n\n### protocol.py\n\nThe classes in this file implement the message handling. The `Request` class is populated with the\nschema-validated data from an incoming RPC request. The `Reply` class encapsulates the response which\nis validated against the reply schema before being sent back.\n\n```python\nimport json\nfrom choria_external.protocol import ProtocolMessage, Reply\n\n\n@ProtocolMessage.register_protocol()\nclass ExampleRequest(ProtocolMessage):\n  \"\"\" \"\"\"\n  _protocol = 'io.choria.choria.example.v1.external_request'\n\n  @staticmethod\n  def create_reply():\n    return ExampleReply()\n\n\nclass ExampleReply(Reply):\n  \"\"\" Describes the response to an Example Choria External request\n      Handles serialisation of the response object\n  \"\"\"\n  _protocol = 'io.choria.choria.example.v1.external_reply'\n  \n  def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    # The following instance variables contain the data that will be returned\n    # in the reply, as defined by the reply schema\n    self.statuscode = 0\n    self.data = {}\n\n  def to_json(self):\n    \"\"\" Serialises this reply object into JSON format to be sent back to Choria\n    \n        The return value of this method is validated against the reply schema and must\n        be well formed for the reply to be sent back correctly. Malformed responses will\n        result in an error being presented back to the client.\n    \"\"\"\n    return json.dumps({\n      'data': self.data,\n      'statuscode': self.statuscode,\n    })\n\n  def fail(self):\n    \"\"\" Marks the reply as failed.\n        \n        How that looks depends on the schema in use. Typically this sets an `error`\n        field to a non-empty string, or sets a statuscode field to a non-zero number\n    \"\"\"\n    self.statuscode = 1\n\n  def successful(self):\n    \"\"\" Exposes whether this request was successful or not\n    \"\"\"\n    return self.statuscode == 0\n\n```\n\n### example.py\n\nThis file defined the base class for any concrete implementations of the Example external function.\nIn the simplest case, this might be an empty class. See [py-mco-agent](https://github.com/optiz0r/py-mco-agent)\nfor a more complex example.\n\n```python\n# Ensure the Protocol Messages are loaded and registered\nimport choria_example.protocol\n\nfrom choria_external.base import ChoriaExternal\n\n\nclass Example(ChoriaExternal):\n  \"\"\" Base class for implementations of the Example Choria External function\n  \"\"\"\n  def example(self):\n    \"\"\" Implement the example action\n        This method should be overridden by subclasses\n    \"\"\"\n    pass\n\n  def execute(self):\n    self.example()\n```\n\n### Concrete Implementation\n\nThis is an example concrete implementation. This script is what choria itself would be configured to execute.\n\n```python\nfrom choria_external.dispatcher import dispatch\nfrom choria_example.example import Example\n\n\nclass SimpleExample(Example):\n\n  def example(self):\n    self.reply.data = {\"hello\": \"world\"}\n    \n\nif __name__ == '__main__':\n  dispatch(SimpleExample)\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/optiz0r/py-choria-external",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-choria-external",
    "package_url": "https://pypi.org/project/py-choria-external/",
    "platform": "",
    "project_url": "https://pypi.org/project/py-choria-external/",
    "project_urls": {
      "Homepage": "https://github.com/optiz0r/py-choria-external"
    },
    "release_url": "https://pypi.org/project/py-choria-external/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=2.6",
    "summary": "A library for implementing Choria External RPC in python",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9207716,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70f5dd3b202fd876b7def1bf3d1638214f0206c35b8f49dabfed8ae0ec117780",
          "md5": "0afd1bdb410a79a454cdb82947abf1b8",
          "sha256": "6f998e68a5503183944020deefe2f13e7981f7a649649fbea1a57bbcc9995d08"
        },
        "downloads": -1,
        "filename": "py-choria-external-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0afd1bdb410a79a454cdb82947abf1b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=2.6",
        "size": 6689,
        "upload_time": "2021-01-22T23:11:28",
        "upload_time_iso_8601": "2021-01-22T23:11:28.822823Z",
        "url": "https://files.pythonhosted.org/packages/70/f5/dd3b202fd876b7def1bf3d1638214f0206c35b8f49dabfed8ae0ec117780/py-choria-external-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "70f5dd3b202fd876b7def1bf3d1638214f0206c35b8f49dabfed8ae0ec117780",
        "md5": "0afd1bdb410a79a454cdb82947abf1b8",
        "sha256": "6f998e68a5503183944020deefe2f13e7981f7a649649fbea1a57bbcc9995d08"
      },
      "downloads": -1,
      "filename": "py-choria-external-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0afd1bdb410a79a454cdb82947abf1b8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=2.6",
      "size": 6689,
      "upload_time": "2021-01-22T23:11:28",
      "upload_time_iso_8601": "2021-01-22T23:11:28.822823Z",
      "url": "https://files.pythonhosted.org/packages/70/f5/dd3b202fd876b7def1bf3d1638214f0206c35b8f49dabfed8ae0ec117780/py-choria-external-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}