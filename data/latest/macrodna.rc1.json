{
  "info": {
    "author": "Mohammadamin Edrisi, Xiru Huang",
    "author_email": "mae6@rice.edu, xh29@rice.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MaCroDNA\n\nBy Mohammadamin Edrisi, Xiru Huang, Huw A. Ogilvie and Luay Nakhleh\n\nDepartment of Computer Science, Rice University\n\n### Table of Contents\n[1. Introduction](#Introduction)  \n\n[2. Citation](#Citation)  \n\n[3. Installation](#Installation)  \n\n[4. Usage](#Usage)\n\n[5. Contacts](#contacts)\n\n\n\n### Introduction\nMaCroDNA (**Ma**tching **Cro**ss-**D**omain **N**ucleic **A**cids) is a correlation-based \nmethod to perform mapping between scRNA-seq gene expression and scDNA-seq copy number values. \nThis repository contains the source code for MaCroDNA described in the paper \"MaCroDNA: Accurate integration of single-cell DNA and RNA\ndata for a deeper understanding of tumor heterogeneity\".\n\n### Citation\n\n\n### Installation\n**Package Requirements**\n>Python >= 3.7\n> \n>numpy\n> \n>pandas\n> \n>scipy\n> \n>math\n> \n> gurobipy\n\nHere, only gurobipy need to be installed manually before installing MaCroDNA. Other packages can be installed automatically\n while installing MaCroDNA\n\n**gurobipy Installation**\n\nFirst, Gurobi need to be installed. The academic license is free. The installation instructions for\nGurobi are\n\n| OS      | Instruction |\n|:--------|:------------|\n| Linux | [Gurobi Installation Guide: Linux](https://youtu.be/yNmeG6Wom1o) |\n| Windows | [Gurobi Installation Guide: Windows](https://youtu.be/fQVxuWOiPpI) |\n| macOS | [Gurobi Installation Guide: macOS](https://youtu.be/ZcL-NmckTxQ) |\n\nAfter the installation of Gurobi, gurobipy can be installed using **pip**\n\n`python -m pip install gurobipy`\n\nOther installation methods can be found \n[How do I install Gurobi for Python](https://support.gurobi.com/hc/en-us/articles/360044290292-How-do-I-install-Gurobi-for-Python-)\n\n**MaCroDNA Installation**\n\n`pip install -i https://test.pypi.org/simple/ MaCroDNA==0.0.5 `\n\n**Installation Test**\n\nAfter installing MaCroDNA, you can test the installation using the following code in python\n\n````\n$ python\n> from MaCroDNA import MaCroDNA\n> test_macrodna = MaCroDNA()\n> test_macrodna.tiny_test()\n````\nAnd the output should be like\n\n````\n******Test DNA data is:\n      cell1  cell2  cell3  cell4\ngene                            \ng1        2      2      1      2\ng2        2      2      1      2\ng3        3      2      2      2\ng4        1      2      2      2\ng5        6      2      2      2\ng6        2      2      3      6\n******Test RNA data is:\n      cell1  cell2  cell3  cell4\ngene                            \ng1        0      2      0      1\ng2        0      2      0      1\ng3       10      2      2      1\ng4        0      2      2      1\ng5       20      2      0      1\ng6        0      2      5     20\ng7        0      0      0      0\n******Clone id for each DNA cell is:\n   clone   cell\n0      0  cell1\n1      1  cell2\n2      2  cell3\n3      3  cell4\n**********\nStart Mapping RNA cells to DNA clones\n**********\nAfter selecting the same genes in RNA and DNA\nnumber of cells in dna data 4\nnumber of cells in rna data 4\nnumber of genes in dna data 6\nnumber of genes in rna data 6\n[[ 0.95553309  0.          0.15877684 -0.29277002]\n [ 0.          0.          0.          0.        ]\n [-0.34698896  0.          0.87447463  0.86824314]\n [-0.18650096  0.          0.7592566   1.        ]]\n1 0\nMaCroDNA will be run for 1 steps\nthe smallest set has 4 number of cells\nSet parameter Username\nAcademic license - for non-commercial use only - expires 2023-04-18\nGurobi Optimizer version 9.5.1 build v9.5.1rc2 (linux64)\nThread count: 10 physical cores, 20 logical processors, using up to 20 threads\nOptimize a model with 9 rows, 16 columns and 48 nonzeros\nModel fingerprint: 0xbe36aead\nVariable types: 0 continuous, 16 integer (16 binary)\nCoefficient statistics:\n  Matrix range     [1e+00, 1e+00]\n  Objective range  [2e-01, 1e+00]\n  Bounds range     [1e+00, 1e+00]\n  RHS range        [1e+00, 4e+00]\nFound heuristic solution: objective 2.8300077\nPresolve removed 9 rows and 16 columns\nPresolve time: 0.00s\nPresolve: All rows and columns removed\n\nExplored 0 nodes (0 simplex iterations) in 0.00 seconds (0.00 work units)\nThread count was 1 (of 20 available processors)\n\nSolution count 1: 2.83001 \n\nOptimal solution found (tolerance 1.00e-04)\nBest objective 2.830007718086e+00, best bound 2.830007718086e+00, gap 0.0000%\nIsMIP: 1\nSolved with MIPFocus: 0\nThe model has been optimized\nObj: 2.83001\nthe number of associations in the correspondence matrix 4.0\n**********\nFinish Mapping\nTest Success\n**********\n````\n\nFor more complicated test, you can use `test_macrodna.py` under `test/` directory\n\n### Usage\n\n**cell-to-cell mapping**\n\nFor mapping RNA cells to DNA cells, the input should be two dataframes `dna_df` and \n`rna_df`. In these two dataframes, the row ids should be the genes and the column ids \nshould be the cells. The genes on RNA data and those in DNA data can be different, because MaCroDNA can select the same genes\n from the data by itself.\n\nTo get the cell-to-cell mapping\n\n````\n$ python\n> from MaCroDNA import MaCroDNA\n> macrodna = MaCroDNA(rna_df, dna_df)\n> cell2cell = macrodna.cell2cell_assignment()\n````\n\nThe output `cell2cell` is also a dataframe.\nThe index ids are the RNA cell ids. \nAnd it only has on column \"predict_cell\", which is the DNA cell assigned to the corresponding RNA cell.\n\n\n**cell-to-clone mapping**\n\nFor mapping RNA cells to DNA clones, the input needs three dataframes `dna_df`,\n`rna_df` and `dna_label`. `dna_df` and `rna_df` are same as cell-to-cell mapping.\n`dna_label` has two columns \"clone\" and \"cell\", where \"cell\" is the DNA cells and \"clone\" is the corresponding clone id\nfor that DNA cell.\n\nTo get the cell-to-clone mapping\n\n````\n$ python\n> from MaCroDNA import MaCroDNA\n> macrodna = MaCroDNA(rna_df, dna_df, dna_label)\n> cell2clone = macrodna.cell2clone_assignment()\n````\n\nThe output `cell2clone` is also a dataframe.\nThe index ids are the RNA cell ids. \nIt has two columns. One is \"predict_cell\", which is the corresponding DNA cell for that RNA cell.\nThe other column is \"predict_clone\", which is the predict clone id for that RNA cell.\n\n### Contacts\nIf you have any questions, please contact us via edrisi@rice.edu or xiru.huang@rice.edu\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xiru-huang/MaCroDNA",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MaCroDNA",
    "package_url": "https://pypi.org/project/MaCroDNA/",
    "platform": null,
    "project_url": "https://pypi.org/project/MaCroDNA/",
    "project_urls": {
      "Bug Tracker": "https://github.com/xiru-huang/MaCroDNA/issues",
      "Homepage": "https://github.com/xiru-huang/MaCroDNA"
    },
    "release_url": "https://pypi.org/project/MaCroDNA/0.0.1/",
    "requires_dist": [
      "numpy",
      "pandas",
      "scipy"
    ],
    "requires_python": ">=3.7",
    "summary": "Accurate integration of single-cell DNA and RNA data for a deeper understanding of tumor heterogeneity",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13881989,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d24d0cdb1927584ae8e4ace97050273c396d1b8849a83ed329f5c92a86f9d459",
          "md5": "d703c61b9b99ecb7c5a108dbcb42201e",
          "sha256": "c9b14ada31eb62935e6456ea72a549d2e8450f16a16182430217a152b301916f"
        },
        "downloads": -1,
        "filename": "MaCroDNA-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d703c61b9b99ecb7c5a108dbcb42201e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7158,
        "upload_time": "2022-05-18T04:38:51",
        "upload_time_iso_8601": "2022-05-18T04:38:51.237177Z",
        "url": "https://files.pythonhosted.org/packages/d2/4d/0cdb1927584ae8e4ace97050273c396d1b8849a83ed329f5c92a86f9d459/MaCroDNA-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f86ff3e69941e74dd8c2983b281d668e212ef27101f00637c3694bd76efdf66",
          "md5": "a714e76ad4cce77c9eb077caec200a35",
          "sha256": "64f3d0923453ab4d2ec444ec541c30bb776d75a0333bd91edde7d75e5423d0bd"
        },
        "downloads": -1,
        "filename": "MaCroDNA-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a714e76ad4cce77c9eb077caec200a35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 6759,
        "upload_time": "2022-05-18T04:38:52",
        "upload_time_iso_8601": "2022-05-18T04:38:52.888511Z",
        "url": "https://files.pythonhosted.org/packages/2f/86/ff3e69941e74dd8c2983b281d668e212ef27101f00637c3694bd76efdf66/MaCroDNA-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d24d0cdb1927584ae8e4ace97050273c396d1b8849a83ed329f5c92a86f9d459",
        "md5": "d703c61b9b99ecb7c5a108dbcb42201e",
        "sha256": "c9b14ada31eb62935e6456ea72a549d2e8450f16a16182430217a152b301916f"
      },
      "downloads": -1,
      "filename": "MaCroDNA-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d703c61b9b99ecb7c5a108dbcb42201e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7158,
      "upload_time": "2022-05-18T04:38:51",
      "upload_time_iso_8601": "2022-05-18T04:38:51.237177Z",
      "url": "https://files.pythonhosted.org/packages/d2/4d/0cdb1927584ae8e4ace97050273c396d1b8849a83ed329f5c92a86f9d459/MaCroDNA-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f86ff3e69941e74dd8c2983b281d668e212ef27101f00637c3694bd76efdf66",
        "md5": "a714e76ad4cce77c9eb077caec200a35",
        "sha256": "64f3d0923453ab4d2ec444ec541c30bb776d75a0333bd91edde7d75e5423d0bd"
      },
      "downloads": -1,
      "filename": "MaCroDNA-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a714e76ad4cce77c9eb077caec200a35",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 6759,
      "upload_time": "2022-05-18T04:38:52",
      "upload_time_iso_8601": "2022-05-18T04:38:52.888511Z",
      "url": "https://files.pythonhosted.org/packages/2f/86/ff3e69941e74dd8c2983b281d668e212ef27101f00637c3694bd76efdf66/MaCroDNA-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}