{
  "info": {
    "author": "Microchip Technology",
    "author_email": "support@microchip.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Embedded Systems"
    ],
    "description": "# pytrustplatform\npytrustplatform is a collection of utilities for interacting with Microchip Trust Platform and\nMicrochip CryptoAuthenticationâ„¢ devices\n\n![PyPI - Format](https://img.shields.io/pypi/format/pytrustplatform)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pytrustplatform)\n![PyPI - License](https://img.shields.io/pypi/l/pytrustplatform)\n\n## Overview\npytrustplatform is available:\n\n* install using pip from pypi: https://pypi.org/project/pytrustplatform\n* browse source code on github: https://github.com/microchip-pic-avr-tools/pytrustplatform\n* read API documentation on github: https://microchip-pic-avr-tools.github.io/pytrustplatform\n* read the changelog on github: https://github.com/microchip-pic-avr-tools/pytrustplatform/blob/main/CHANGELOG.md\n\n## Usage\npytrustplatform can be used as a command-line interface or a library\n\n## Command-line interface\npytrustplatform is a multi-layered command-line interface meaning that there are several commands each\nwith its own actions and options.\n\nGetting help:\n```bash\npytrust --help\n```\nGetting help for specific command:\n```bash\npytrust certificate --help\n```\nThe amount of logging is controlled by the -v/--verbose option:\n```bash\npytrust -v info\n```\nPossible log levels are `debug`, `info`, `warning`, `error`, `critical`.  Default is `info`.\n\nPrint version info and exit:\n```bash\npytrust -V\n```\nPrint release info and exit:\n```bash\npytrust -R\n```\n### General about command line options\nMany command line options can be specified with a short form preceded with a single dash (like `-o`) or an equivalent long form preceded with double dashes (like `--output-path`). Some options only have the long form. Regardless, long options can be abbreviated to a prefix, if the abbreviation is unambiguous (the prefix matches a unique option). Example: `--organization-name` can be abbreviated to `--org` but not to `--o`. An error is produced for arguments that would match more than one option.\n\n### Commands reading information from connected Microchip IoT kit\nSome commands need to read information from the ECC chip on a Microchip IoT kit, which must be connected to a USB port.\nIn case, pytrustcommander will normally connect to the kit automatically, and program the required firmware into it.\nIf there is more than one suitable IoT kit connected, the user must select which one to use using the\n-s/--serialnumber option. If the -s option is not used in this situation, a list of kits is printed.\nIt is sufficient to specify enough digits from the end of the serial number to make it unique.\nSample session with two kits connected:\n```bash\npytrust cert read-ecc-serialnumber\nERROR - Multiple kits found.\nERROR - Please specify serial number ending digits for the one you want\nERROR - Tool: nEDBG CMSIS-DAP Serial: MCHP3203081800007239 Device: ATmega4808\nERROR - Tool: nEDBG CMSIS-DAP Serial: MCHP3261021800001323 Device: PIC24FJ128GA705\n\npytrust -s9 cert read-ecc-serialnumber\nReading ECC serial number from kit\n012370A530B9A4A8FE\n\n```\n\n### Certificate command\nThe certificate command support certificate manipulation and parsing actions.  It can also be invoked using the cert alias:\n```bash\npytrust certificate\n```\nis the same as\n```bash\npytrust cert\n```\n\n#### Action: get-skid\nGet the Subject Key Identifier from a certificate. The SKID is printed to standard output.\n* use --cert to specify certificate file\n\nExample:\n```bash\npytrust certificate get-skid --cert mycertificate.crt\n```\n\n#### Action: get-common-name\nGet the Common Name from a certificate. The Common Name is printed to standard output.\n* use --cert to specify certificate file\n\nExample:\n```bash\npytrust certificate get-common-name --cert mycertificate.crt\n```\n\n#### Action: create-from-ecc\nCreate device and signer certificates using compressed certificate data read out from the ECC device.\nThis comamnd requires a Microchip IoT kit is connected. The device and signer certificate are stored in\noutput folder in files named \"device_ecc608.crt\" and \"signer_ecc608.crt\", respectively.\n* use -dct to optionally specify a device certificate template file\n* use -sct to optionally specify a signer certificate template file\n* use -o to optionally specify a path to store the certificates created (defaults to '.')\n\nExample:\n```bash\npytrust certificate create-from-ecc -o mycertificates\n```\n\n#### Action: create-csr\nCreate a device Certificate Signing Request (CSR) from data read out from the ECC device.\nThis comamnd requires a Microchip IoT kit is connected. The CSR will be written to a file in output folder, in file \"device.csr\".\n\nExample:\n```bash\npytrust certificate create-csr\n```\n\n#### Action: create-from-csr\nCreate a device certificate using a Certificate Signing Request (CSR) created from data read out from the ECC device. This comamnd requires a Microchip IoT kit is connected. Both the certificate and the CSR will be written to files in output folder, in files \"device.crt\" and \"device.csr\", respectively.\n* use -scak to specify signer Certificate Authority (CA) private key file\n* use -scac to to specify signer Certificate Authority (CA) certificate file\n* use -o to optionally specify a path to store the certificate and CSR created (defaults to '.')\n\nExample:\n```bash\npytrust certificate create-from-csr -o mycertificates -scak my_signer-ca.key -scac my_signer-ca.crt\n```\n\n#### Action: create-verification\nCreate a verification certificate from a signer Certificate Authority (CA) certificate and private key.\nCertificate is placed in output folder, file name \"verification.crt\".\nThe verification certificate is typically used when registering the CA with a cloud provider.\n* use -scak to specify signer Certificate Authority (CA) private key file\n* use -scac to to specify signer Certificate Authority (CA) certificate file\n* use --registration-code to specify the registration code to be used in the verification certificate\n* use -o to optionally specify a path to store the certificate created (defaults to '.')\n\nExample:\n```bash\npytrust certificate create-verification -o mycertificates -scac my_signer_ca.crt -scak my_signer_ca.key --reg 0123456789\n```\n#### Action: fingerprint\nGenerates a fingerprint from a certificate file passed in. The fingerprint is printed to standard output.\n\nExample:\n```bash\npytrust cert fingerprint -cert device.crt\n```\n\n#### Action: create-chain-of-trust\nCreate a chain of trust with root CA, signer CSR and signer certificates at current or specified folder.\nThe certificates are placed in the output folder, filenames \"root-ca.crt\", \"signer-ca.csr\", and \"signer-ca.crt\",\nrespectively.\n* use -o to optionally specify a path to store the certificate created (defaults to '.')\n* use --org to optionally change issuer Organization name (defaults to 'Example Inc')\n* use --root-common-name to optionally change root CA certificate Common Name (defaults to 'Example Root CA')\n* use -signer-common-name to optionally change signer CA certificate Common Name (defaults to 'Example Signer FFFF')\n\n\nExample:\n```bash\npytrust cert -o my-root-certs --org \"Microchip Technology Inc\" -rcn \"Microchip Root CA\" -scn \"Microchip Signer\" create-chain-of-trust\n```\n\n### Manifest command\nThe manifest command supports building of, decoding and searching in Microchip secure elements manifests.\n```bash\npytrust manifest\n```\nis the same as\n```bash\npytrust man\n```\n\n#### Action: create-from-certificates\nCreates a manifest based on a device and signer certificate.\n```bash\npytrust manifest create-from-certificates manifest-file.json --manifest-signer-cert my_manifest_signer.crt --manifest-signer-key my_manifest_signer.key --device-cert device.crt --signer-cert signer.crt\n```\n\n#### Action: create-from-secure-element\nCreate a manifest based on a secure element. This command will only work with supported development kits e.g. AVR-IoT/PIC-IoT. The tool will automatically detect any connected supported development tool, load the provisioning bridge FW and get all data required to build the secure element in the manifest from the secure element.\n```bash\npytrust manifest create-from-secure-element manifest.json --manifest-signer-cert manifest_signer.crt --manifest-signer-key manifest_signer.key\n```\n\n#### Action: get-certificates\nExtracts certificates from secure elements in the manifest.\nWith no parameters it will extract all secure element \"device certificates\" and put them into the current directory.\n```bash\npytrust manifest get-certificates manifest-file.json\n```\n\nBelow example extracts both certificates (0=device certificate, 1=signer certificate) for all secure elements in the manifest and puts them into the `./my_output_dir` directory.\n```bash\npytrust manifest get-certificates manifest-file.json --cert-index 0,1 --outdir ./my_output_dir\n```\n\nExtract device and signer certificates only for the secure element with `--id 01230390b3d1450c01` and put them into ./my_output_dir directory.\n```bash\npytrust manifest get-certificates manifest-file.json --cert-index 0,1 --outdir ./my_output_dir --id 01230390b3d1450c01\n```\n\n#### Action: get-secure-element\nGet a secure element from the manifest by providing a unique ID.\n ```bash\npytrust manifest get-secure-element manifest-file.json --id 01230390b3d1450c01\n```\n\n#### Action: list-secure-element-ids\nList all secure element IDs that are present in the manifest.\n```bash\npytrust manifest list-secure-element-ids manifest-file.json\n```\n\n#### Action: list-secure-elements\nList secure elements that are present in the manifest. The full content of each manifest will be printed.\n```bash\npytrust manifest list-secure-elements manifest-file.json\n```\n\n## Library\npytrustplatform is a collection of utilities and it can be used as a library by accessing the individual modules.\n\n### Logging\nThis package uses the Python logging module for publishing log messages to library users.\nA basic configuration can be used (see example below), but for best results a more thorough configuration is\nrecommended in order to control the verbosity of output from dependencies in the stack which also use logging.\nSee logging.yaml which is included in the package (although only used for CLI).\n```python\n# pytrustplatform uses the Python logging module\nimport logging\nlogging.basicConfig(format=\"%(levelname)s: %(message)s\", level=logging.WARNING)\n```\n\n### Fetching data from a certificate\nThe `cert_get_data` module contains functions to fetch various information from a certificate. For example:\n```python\n# Fetch the Subject Key Identifier from a certificate\nfrom pytrustplatform.cert_get_data import cert_get_skid\nskid = cert_get_skid(\"mycertificate.crt\")\n\n# Fetch Common Name from a certificate:\nfrom pytrustplatform.cert_get_data import cert_get_common_name\ncommon_name = cert_get_common_name(\"mycertificate.crt\")\n```\n\n### Create device certificate from CSR\nBuilding a device certificate will implicitly generate a Certificate Signing Request (CSR)\n```python\nfrom serial import Serial\nfrom pytrustplatform.device_cert_builder import build_device_cert\nfrom pykitcommander.kitprotocols import setup_kit\n\n# Fetch a protocol object from pykitcommander\ninfo = setup_kit('iotprovision')\n\n# Collect required info to continue:\nport = info['port']\nbaud = info['protocol_baud']\nprotocol = info['protocol_class']\n\n# Use the Serial driver with context manager to be sure port is closed after use\nwith Serial(port=port, baudrate=baud) as serial_connection:\n    firmware_driver = protocol(serial_connection)\n    # Build device certificate.  A CSR will be generated as part of the process.  Both will be written to file\n    build_device_cert(firmware_driver, \"my_signer-ca.crt\", \"my_signer-ca.key\", \"generated.csr\", \"generated_device.crt\")\n```\n\n### Create verification certificate\n```python\nfrom pytrustplatform.verification_cert_builder import build_verification_cert\n\nbuild_verification_cert(\"my_signer-ca.crt\", \"my_signer-ca.key\", \"MY_REGCODE_0123456789\", \"generated_verification.crt\")\n```\n\n### Create device and signer certificate from ECC data\nGenerate certificates from compressed certificates on an ECC device\n\n```python\nfrom serial import Serial\nfrom pykitcommander.kitprotocols import setup_kit\nfrom pytrustplatform.ecc_cert_builder import build_certs_from_ecc\n\n# Fetch a protocol object from pykitcommander\ninfo = setup_kit('iotprovision')\n\n# Collect required info to continue:\nport = info['port']\nbaud = info['protocol_baud']\nprotocol = info['protocol_class']\n\n# Use the Serial driver with context manager to be sure port is closed after use\nwith Serial(port=port, baudrate=baud) as serial_connection:\n    firmware_driver = protocol(serial_connection)\n    # Build device certificate and signer certificate.  Both will be written to file.\n    ecc_device_cert, ecc_signer_cert = build_certs_from_ecc(firmware_driver, \"generated_signer.crt\", \"generated_device.crt\")\n```\n\n### Create chain of trust\nCreate a chain of trust.  Keys can be generated or already existing keys can be provided\n\n```python\nfrom pytrustplatform.ca_create import ca_create_root, ca_create_signer_csr, ca_create_signer\n\n# Create Root, generates root private key (if it does not exist) and root certificate\nca_create_root(\"generated_root.key\", \"generated_root.crt\")\n\n# Create signer CA CSR and signer CA private key (if it does not exist)\nca_create_signer_csr(\"generated_signer_ca.key\", \"generated_signer_ca.csr\")\n\n# Create signer certificate based on previously generated root key, root certificate and signer CSR\nca_create_signer(\"generated_signer_ca.csr\",\n                 \"generated_signer_ca.crt\",\n                 \"generated_root.key\",\n                 \"generated_root.crt\")\n```\n## Linux systems\nThis package uses pyedbglib and other libraries for USB transport and some udev rules are required.\nFor details see the pyedbglib package: https://pypi.org/project/pyedbglib\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/microchip-pic-avr-tools/pytrustplatform",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytrustplatform",
    "package_url": "https://pypi.org/project/pytrustplatform/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytrustplatform/",
    "project_urls": {
      "Homepage": "https://github.com/microchip-pic-avr-tools/pytrustplatform"
    },
    "release_url": "https://pypi.org/project/pytrustplatform/1.0.9.12/",
    "requires_dist": [
      "cryptography",
      "asn1crypto",
      "pytz",
      "pyyaml",
      "appdirs",
      "pyserial",
      "python-jose[cryptography]",
      "pykitcommander (>=2.7*)",
      "pyedbglib (>=2.22.*)",
      "pylint ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "mock ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A collection of utilities for interacting with Microchip Trust Platform and Microchip CryptoAuthenticationâ„¢ devices",
    "version": "1.0.9.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15540519,
  "releases": {
    "0.0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6d9815c925518f09d78e0485e8eea300db229af01e4cdd2347add42dac40752",
          "md5": "9c6888b03dc8c5764ba3c30f0ea4451e",
          "sha256": "8044a84010af0c1144e4ae149a4c387e46db3e20e35b4df1c4a4508cedbb3e5d"
        },
        "downloads": -1,
        "filename": "pytrustplatform-0.0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c6888b03dc8c5764ba3c30f0ea4451e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2934,
        "upload_time": "2020-06-22T12:48:30",
        "upload_time_iso_8601": "2020-06-22T12:48:30.717891Z",
        "url": "https://files.pythonhosted.org/packages/e6/d9/815c925518f09d78e0485e8eea300db229af01e4cdd2347add42dac40752/pytrustplatform-0.0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.7.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3a352c900f6b02848e834f76cd37201bafb6fb873471143a8e694ead493ed7a",
          "md5": "e79e71cfbcf33d9ef6a708199e35613a",
          "sha256": "9ea249ce867b0931b330c1cd2bcaaa10807389130e48df038f093bc67c71f294"
        },
        "downloads": -1,
        "filename": "pytrustplatform-0.11.7.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e79e71cfbcf33d9ef6a708199e35613a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 49911,
        "upload_time": "2020-12-22T09:06:44",
        "upload_time_iso_8601": "2020-12-22T09:06:44.352091Z",
        "url": "https://files.pythonhosted.org/packages/a3/a3/52c900f6b02848e834f76cd37201bafb6fb873471143a8e694ead493ed7a/pytrustplatform-0.11.7.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12.0.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db89ba767e1fcc5cf74eb9657ba31949ea95b8219514d6766014860ccce17a7d",
          "md5": "9f70d36a5ebb40971cb6156c62446e42",
          "sha256": "e413871301bcfb486f8f36427e33d5f5d8ab2298a5f1fe7f9677678c6af2f0b8"
        },
        "downloads": -1,
        "filename": "pytrustplatform-0.12.0.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f70d36a5ebb40971cb6156c62446e42",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 50063,
        "upload_time": "2021-02-05T10:39:54",
        "upload_time_iso_8601": "2021-02-05T10:39:54.967654Z",
        "url": "https://files.pythonhosted.org/packages/db/89/ba767e1fcc5cf74eb9657ba31949ea95b8219514d6766014860ccce17a7d/pytrustplatform-0.12.0.16-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12.3.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88fea9f97a0fd4ed701c1b86b80cc31c5fb28a3f17db7b11640bd513bace7006",
          "md5": "1f34dfde123c60c329af0a82d7e74c64",
          "sha256": "f1588780adc2ee4c534831f5ec657b4260782651823b8f796dfbee0c50645577"
        },
        "downloads": -1,
        "filename": "pytrustplatform-0.12.3.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f34dfde123c60c329af0a82d7e74c64",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 50290,
        "upload_time": "2021-06-28T20:35:18",
        "upload_time_iso_8601": "2021-06-28T20:35:18.883019Z",
        "url": "https://files.pythonhosted.org/packages/88/fe/a9f97a0fd4ed701c1b86b80cc31c5fb28a3f17db7b11640bd513bace7006/pytrustplatform-0.12.3.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.15.4.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "900651389138ef022d2328a8a5920684c7e6406db0590a2ed3267d7b650e512a",
          "md5": "134b8feaf6f6c13458b83ed246d5cb32",
          "sha256": "d3942225c46653219c1c8262d0547370968fa30694c1afae059234c04546cd01"
        },
        "downloads": -1,
        "filename": "pytrustplatform-0.15.4.26-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "134b8feaf6f6c13458b83ed246d5cb32",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 69201,
        "upload_time": "2021-12-21T10:12:52",
        "upload_time_iso_8601": "2021-12-21T10:12:52.976519Z",
        "url": "https://files.pythonhosted.org/packages/90/06/51389138ef022d2328a8a5920684c7e6406db0590a2ed3267d7b650e512a/pytrustplatform-0.15.4.26-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5306d7b61f2507a7deb9e30a6cb53b254a51f3af06f26130476ea6ff76920826",
          "md5": "088862e2cc6df75007048bd928518d09",
          "sha256": "5e0006959d95ac90ca25c3096740e396916140a7e224690e693eed74d906bfce"
        },
        "downloads": -1,
        "filename": "pytrustplatform-1.0.9.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "088862e2cc6df75007048bd928518d09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 73101,
        "upload_time": "2022-10-26T17:36:10",
        "upload_time_iso_8601": "2022-10-26T17:36:10.068014Z",
        "url": "https://files.pythonhosted.org/packages/53/06/d7b61f2507a7deb9e30a6cb53b254a51f3af06f26130476ea6ff76920826/pytrustplatform-1.0.9.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5306d7b61f2507a7deb9e30a6cb53b254a51f3af06f26130476ea6ff76920826",
        "md5": "088862e2cc6df75007048bd928518d09",
        "sha256": "5e0006959d95ac90ca25c3096740e396916140a7e224690e693eed74d906bfce"
      },
      "downloads": -1,
      "filename": "pytrustplatform-1.0.9.12-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "088862e2cc6df75007048bd928518d09",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 73101,
      "upload_time": "2022-10-26T17:36:10",
      "upload_time_iso_8601": "2022-10-26T17:36:10.068014Z",
      "url": "https://files.pythonhosted.org/packages/53/06/d7b61f2507a7deb9e30a6cb53b254a51f3af06f26130476ea6ff76920826/pytrustplatform-1.0.9.12-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}