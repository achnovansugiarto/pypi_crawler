{
  "info": {
    "author": "Kaustuvi Basu, Petar Korponaić",
    "author_email": "basu.kaustuvi@gmail.com, petar.korponaic@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Qubit Mapping for NISQ-Era Quantum Devices\n### Introduction\nThe goal of this project was to implement the paper **Tackling the Qubit Mapping Problem for NISQ-Era Quantum Devices** by *Gushu Li, Yufei Ding, and Yuan Xie*. \n\n### Purpose\nDue to limited connections between physical qubits, most two-qubit gates cannot be directly implemented on Noisy Intermediate-Scale Quantum (NISQ) devices. A dynamic remapping of logical to physical qubits is needed to enable execution of two qubit gates in a quantum algorithm on a NISQ device. This project implements a **SWAP-based BidiREctional heuristic search algorithm (SABRE)**, proposed in the given paper that is applicable to NISQ devices with arbitrary qubit connections\n\n### Problem Statement\nGiven an input quantum circuit and the coupling graph of a quantum device, find an **initial mapping** and the intermediate qubit **mapping transition** (by inserting SWAPs) to satisfy all two-qubit constraints and try to minimize the number of additional gates and circuit depth in the final hardware-compliant circuit.\n\n### References\n- **Tackling the Qubit Mapping Problem for NISQ-Era Quantum Devices** by *Gushu Li, Yufei Ding, and Yuan Xie*. [Click here for pdf](https://arxiv.org/pdf/1809.02573.pdf)\n- [Pyquil docs](http://docs.rigetti.com/en/stable/) \n\n### Usage\nAn example of how to use this package is illustrated in `example.py`. \n\n- Construct a pyquil program:\n    ```\n    from pyquil import Program\n    from pyquil.gates import CNOT, Gate, H, SWAP\n    original_circuit = Program()\n    original_circuit.inst(CNOT(0, 1))\n    original_circuit.inst(CNOT(2, 3))\n    original_circuit.inst(CNOT(1, 3))\n    original_circuit.inst(CNOT(1, 2))\n    original_circuit.inst(CNOT(2, 3))\n    original_circuit.inst(CNOT(0, 3))\n    ```\n- Define a coupling graph (the coupling graph can also be a predefined one based on the underlying chip architecture):\n    ```\n    import networkx as nx\n    coupling_graph = nx.Graph()\n    coupling_graph.add_edges_from([(0, 1), (0, 2), (1, 3), (2, 3)])\n    ```\n- Apply preprocessing on the circuit and the coupling graph to generate a random initial mapping and a distance matrix:\n    ```\n    from sabre_tools.circuit_preprocess import preprocess_input_circuit, get_initial_mapping, get_distance_matrix\n    initial_mapping = get_initial_mapping(circuit=original_circuit, coupling_graph=coupling_graph)\n    distance_matrix = get_distance_matrix(coupling_graph=coupling_graph)\n    ```\n- Execute the SABRE algorithm on the circuit in forward-backward-forward passes where final mapping output of each pass is provided as the initial mapping of the reverse circuit in the next pass\n    ```\n    from sabre_tools.sabre import SABRE\n    for iteration in range(3):\n    front_layer_gates, circuit_dag = preprocess_input_circuit(circuit=temp_circuit)\n    final_program, final_mapping = sabre_proc.execute_sabre_algorithm(front_layer_gates = front_layer_gates, qubit_mapping = temp_mapping, circuit_dag = circuit_dag)\n\n    reversed_ins = reversed(temp_circuit.instructions)\n    temp_circuit = Program()\n    for ins in reversed_ins:\n        temp_circuit.inst(ins)\n    temp_mapping = final_mapping.copy()\n    ```\n- To check if SABRE algorithm was able to insert SWAPs in the circuit so that all 2-qubit gates were executed successfully, call the `rewiring_correctness()` function:\n    ```\n    forbidden_gates = sabre_proc.rewiring_correctness(final_program, final_mapping)\n    if forbidden_gates:\n        print(\"\", forbidden_gates)\n    else:\n        print(\"All gates have been executed\")\n    ```\n    This function scans the logical to physical qubit mapping and the SWAP inserted circuit  to determine if there are gates are not executable and returns the non-executable gate if true, otherwise returns an empty dictionary. This function can also be used to check if the original circuit requires the use of SABRE in the first place\n- Count the number of 2 qubit gates in the original or final circuit to determine the circuit depth and number of gates:\n    ```\n    two_qubit_gate_count = sabre_proc.cnot_count(program)\n    ```\n### Future Scope\nThis project has been developed using Rigetti's quantum programming framework Pyquil. A future scope of this project is to make it platform independent so that SABRE can be applied to a quantum program written in any framework.\nAnother possible scope of research is to implement other algorithms in this field and perform a comparison based on number of gates reduction, scalability, runtime speedup, algorithm performance on large circuits etc. \n\n### QC Mentorship Program\nThis project has been initiated and completed as part of the [QC Mentorship Program](https://qosf.org/qc_mentorship/#summary) under [Quantum Open Source Foundation (QOSF)](https://qosf.org/) in collaboration with [Unitary Fund](https://unitary.fund/). \n\nThis work has been completed with constant guidance and motivation by my mentor Petar KorponaiÄ‡\n([LinkedIn](https://www.linkedin.com/in/petar-korponaic/)).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kaustuvi/quantum-qubit_mapping",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quantum-qubit-mapping",
    "package_url": "https://pypi.org/project/quantum-qubit-mapping/",
    "platform": "",
    "project_url": "https://pypi.org/project/quantum-qubit-mapping/",
    "project_urls": {
      "Homepage": "https://github.com/Kaustuvi/quantum-qubit_mapping"
    },
    "release_url": "https://pypi.org/project/quantum-qubit-mapping/0.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Qubit Mapping package and tools",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7461610,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e601ed6cb2d1ee2e0cbd5eb358c5558a248ac334078d167bb5ff438c27be4a34",
          "md5": "f0ca3b2ff223d38304debbb7dac72a1b",
          "sha256": "a4af8cc662d2221623f58367767ece6ca8150a6110b585f336250e6e28ff86e7"
        },
        "downloads": -1,
        "filename": "quantum-qubit-mapping-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f0ca3b2ff223d38304debbb7dac72a1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10153,
        "upload_time": "2020-06-12T14:27:31",
        "upload_time_iso_8601": "2020-06-12T14:27:31.996156Z",
        "url": "https://files.pythonhosted.org/packages/e6/01/ed6cb2d1ee2e0cbd5eb358c5558a248ac334078d167bb5ff438c27be4a34/quantum-qubit-mapping-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e601ed6cb2d1ee2e0cbd5eb358c5558a248ac334078d167bb5ff438c27be4a34",
        "md5": "f0ca3b2ff223d38304debbb7dac72a1b",
        "sha256": "a4af8cc662d2221623f58367767ece6ca8150a6110b585f336250e6e28ff86e7"
      },
      "downloads": -1,
      "filename": "quantum-qubit-mapping-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f0ca3b2ff223d38304debbb7dac72a1b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10153,
      "upload_time": "2020-06-12T14:27:31",
      "upload_time_iso_8601": "2020-06-12T14:27:31.996156Z",
      "url": "https://files.pythonhosted.org/packages/e6/01/ed6cb2d1ee2e0cbd5eb358c5558a248ac334078d167bb5ff438c27be4a34/quantum-qubit-mapping-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}