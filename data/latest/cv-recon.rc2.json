{
  "info": {
    "author": "Arturo Aguilar Lagunas",
    "author_email": "aguilar.lagunas.arturo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "# About\nA computer vision toolkit focused on color detection and feature matching using OpenCV. It allows you to easily start the picamera in case you're using a Raspberry PI.\n\n# Some of the stuff you can currently do\n- Color detection\n\t- Detect a range of colors in an image using HSV boundaries.\n\t- Find bounding boxes.\n- Feature matching\n\t- Draw matches between a source and target image.\n\t- Find bounding boxes.\n- Picamera\n\t- Easily start the picamera.\n- Tools\n\t- Draw boxes.\n\t- Draw boxes' offset from the center of the frame.\n\t- Stack frames in a grid.\n\n# Dependencies\n| Dependency | Installation |\n| :- | :- |\n| python3\t| Refer to the official [website][3] |\n| opencv\t| Refer to the official [installation guide][1] (tested with version 4.5.2) |\n| numpy\t| `pip install numpy` |\n| picamera | Installed by default in Raspberry PI OS (required only if working with a picamera)\t|\n\n# Installation\n``` bash\npip install cv-recon\n```\n\n# Usage\nSee examples in the [examples folder][2] or test it directly form source. Change directory `cd cv_recon/recon/` once in this folder you can run:  \n\n| Command | Description | Preview |\n| :- | :- | :- \t\t\t|\n| `python colorspace.py` | Generates HSV settings to detect a specific color | ![Colorspace example 1](https://raw.githubusercontent.com/AguilarLagunasArturo/cv-recon/main/preview/colorspace-1.png) |\n| `python colorspace.py <path to .log file>` | Loads HSV settings to detect a specific color | ![Colorspace example 2](https://raw.githubusercontent.com/AguilarLagunasArturo/cv-recon/main/preview/colorspace-2.png) |\n| `python features.py <path to an image>` | Performs feature detection against a given image | ![Feature matching example](https://raw.githubusercontent.com/AguilarLagunasArturo/cv-recon/main/preview/feature-matching.png) |\n\n# Documentation\n## Class: Colorspace(hsv_settings=None)\nThis class allows you to detect a range of colors using HSV boundaries. You can generate the settings or set them directly. See examples [here][4].\n\n| Args | Description | Default |\n| :- | :- | :- |\n| hsv_settings | Path to .log file containing the HSV settings or list containing lower and upper HSV boundaries | None |\n\n### Import example\n``` python\nfrom cv_recon import Colorspace\n# load generated settings\ncolorspace_1 = Colorspace('settings.log')\n# or set hsv lower and upper boundaries\ncolorspace_2 = Colorspace([ [0, 0, 0], [179, 255, 255] ])\n```\n### Properties\n| Property | Description | Type | Default |\n| :- | :- | :- | :- |\n| lower | Lower HSV boundary | list | None |\n| upper | Upper HSV boundary | list | None |\n| im_mask | Mask obtained from the HSV boundaries | np.array | None |\n| im_cut | Portions of the frame containing the color boundaries | np.array | None |\n| im_edges | Canny edge detection applied to _im_mask_ | np.array | None |\n| im_contours | Contours of the detected objects drawn on the current frame | np.array | None |\n\n### Methods\n#### `loadSettings(settings)`\nLoads HSV settings from a generated .log file.  \n\n| Args | Description | Default |\n| :- | :- | :- |\n| settings | Path to .log file with generated HSV settings | None |\n\n__returns:__ _None_\n\n#### `dumpSettings(output='last.log')`\nGenerates a .log file with the current HSV settings.\n\n| Args | Description | Default |\n| :- | :- | :- |\n| output | Path in which the file is gonna be written | 'last.log' |\n\n__returns:__ _None_\n\n#### `createSliders()`\nCreates a window with sliders in order to adjust the HSV settings.  \n__returns:__ _None_\n\n#### `updateHSV()`\nUpdates the current HSV settings with the current slider values.  \n__returns:__ _None_\n\n#### `getMaskBoxes(im_base, im_hsv, min_area=20, scale=0.1)`\nGenerates a list containing the bounding boxes (x, y, w, h) of the objects.\n\n| Args | Description | Default |\n| :- | :- | :- |\n| im_base | Base image in bgr format | None |\n| im_hsv | Base image in hsv format | None |\n| min_area | Minimum area to generate the coordinates | 20 |\n| scale | Scale of the bounding box | 0.1 |\n\n__returns:__ bounding_boxes\n\n#### `getMaskBoxesArea(im_base, im_hsv, min_area=20, scale=0.1)`\nGenerates two lists containing the bounding boxes (x, y, w, h) and the estimated area of each object.\n\n| Args | Description | Default |\n| :- | :- | :- |\n| im_base | Base image in bgr format | None |\n| im_hsv | Base image in hsv format | None |\n| min_area | Minimum area to generate the coordinates | 20 |\n| scale | Scale of the bounding box | 0.1 |\n\n__returns:__ bounding_boxes, areas\n\n## Class: Features(im_source=None, features=500)\nThis class allows you to easily perform feature matching detection. See examples [here][5].\n\n| Args | Description | Default |\n| :- | :- | :- |\n| im_source | Source image | None |\n| features | Amount of features in _im_source_ | 500 |\n\n### Import example\n``` python\nfrom cv_recon import Features\nimport cv2 as cv\n\n# load source image (the image you want to detect)\nim_source = cv.imread('image.jpg')\n# create Features object (detects 1000 features from the source image)\nmy_feature = Features(im_source, 1000)\n```\n\n### Properties\n| Property | Description | Type | Default |\n| :- | :- | :- | :- |\n| im_source | Source image (the image you want to detect) | np.array | _im_source_ |\n| im_source_kp | Source image keypoints | np.array | _im_source_ keypoints |\n| im_target | Target image | np.array | None |\n| im_target_kp | Target image keypoints | np.array | None |\n| im_poly | Image containing a polygon around the best matches | np.array | None |\n\n### Methods\n\n#### `loadTarget(im)`\nLoads the target image to perform the feature matching detection.\n\n| Args | Description | Default |\n| :- | :- | :- |\n| im | Target image in which the feature matching is gonna be perform | None |\n\n__returns:__ None\n\n#### `getMatches(distance=0.75)`\nGenerates a list with the good matches found in the target image.\n\n| Args | Description | Default |\n| :- | :- | :- |\n| distance | Threshold which decides if it is a good match | 0.75 |\n\n__returns:__ good_matches\n\n#### `matchPoints(matches)`\nReturns an image containing the matches between _im_target_ and _im_source_.\n\n| Args | Description | Default |\n| :- | :- | :- |\n| matches | List containing the good matches | None |\n\n__returns:__ image\n\n#### `getBoxes(matches, min_matches=20)`\nGenerates a list containing the bounding box (x, y, w, h) of the object.\n\n| Args | Description | Default |\n| :- | :- | :- |\n| matches | Good matches | None |\n| min_matches | Minimum amount of matches to generate the bounding box | 20 |\n\n__returns:__ bounding_box\n\n## Class: PiCam(resolution=(320, 240), framerate=32, **kargs)\nThis class allows you to easily interact with the picamera. See examples [here][6].\n\n| Args | Description | Default |\n| :- | :- | :- |\n| resolution | Camera resolution | (320, 240) |\n| framerate | Framerate | 32 |\n| **kargs | Assign default picamera settings. See a list of the settings [here][7] | None |\n\n### Import example\n``` python\nfrom cv_recon.picam import PiCam\n\n# cam settings\nres = (320, 240)\nfps = 24\n\n# initialize the camera\ncamera = PiCam(res, fps, brightness=55, contrast=10)\n```\n### Properties\n| Property | Description | Type |\n| :- | :- | :- |\n| current_frame | Current frame | np.array |\n\n### Methods\n#### `videoCapture()`\nCreates a thread which updates the property _current_frame_ .  \n__returns:__ None\n\n#### `release()`\nStops updating the property _current_frame_ .  \n__returns:__ None\n\n#### `effects()`\nPrints the list of image effects.  \n__returns:__ None\n\n#### `exposureModes()`\nPrints the list of exposure modes.  \n__returns:__ None\n\n#### `awbModes()`\nPrints the list of automatic withe balance modes.  \n__returns:__ None\n\n## Module: cv_tools\nThis module allows you generate a grid of images, draw bounding boxes and its offset from the center of the frame.\n\n### Import example\n``` python\nfrom cv_recon import cv_tools\n```\n\n### Functions\n#### `grid(base, dimensions, images, scale=0.5)`\nGenerates a _numpy.array_ containing a grid of images with the given dimensions and scale.  \n\n| Args | Description | Default |\n| :- | :- | :- |\n| base | Image with the base dimensions for the rest of the images | None |\n| dimensions | Tupla containing the dimensions of the grid | None |\n| images | List of images not larger than _`dimensions[0] * dimensions[1]`_, each image must have the same dimensions as _base_ | None |\n| scale | Scale of the output image | 0.5 |\n\n__Returns:__ image\n\n#### `getBoxesOffset(im, boxes)`\nGenerates a list containing the offset of each box from the center of the frame.\n\n| Args | Description | Default |\n| :- | :- | :- |\n| im | Image with the size of the frame | None |\n| boxes | List of bounding boxes | None |\n\n__Returns:__ [x_offset, y_offset]\n\n#### `drawBoxes(im, boxes)`\nDraw the bounding boxes over an image.\n\n| Args | Description | Default |\n| :- | :- | :- |\n| im | Image in which the bounding boxes are going to be drawn | None |\n| boxes | List of bounding boxes | None |\n\n__Returns:__ image\n\n#### `drawBoxesPos(im, boxes)`\nDraw the offset from the center of the frame of each bounding box.\n\n| Args | Description | Default |\n| :- | :- | :- |\n| im | Image in which the offsets are going to be drawn | None |\n| boxes | List of bounding boxes | None |\n\n__Returns:__ image\n\n[1]:https://docs.opencv.org/4.5.2/da/df6/tutorial_py_table_of_contents_setup.html\n[2]:https://github.com/AguilarLagunasArturo/cv-recon/tree/main/examples\n[3]:https://www.python.org/downloads/\n[4]:https://github.com/AguilarLagunasArturo/cv-recon/tree/main/examples/color_detection\n[5]:https://github.com/AguilarLagunasArturo/cv-recon/tree/main/examples/feature_matching\n[6]:https://github.com/AguilarLagunasArturo/cv-recon/tree/main/examples/picamera\n[7]:https://projects.raspberrypi.org/en/projects/getting-started-with-picamera/7\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AguilarLagunasArturo/cv-recon",
    "keywords": "opencv,color detection,feature matching,computer vision,hsv,picamera,raspberry pi",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cv-recon",
    "package_url": "https://pypi.org/project/cv-recon/",
    "platform": "",
    "project_url": "https://pypi.org/project/cv-recon/",
    "project_urls": {
      "Homepage": "https://github.com/AguilarLagunasArturo/cv-recon"
    },
    "release_url": "https://pypi.org/project/cv-recon/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A computer vision toolkit focused on color detection and feature matching using OpenCV. It allows you to easily start the picamera in case you're using a Raspberry PI.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10608449,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0b20c1a4ebe4d985e6e355bd67a624fe8713e445ceed58ea5a66ca6da04afd1",
          "md5": "e2ff9032ce795ac186e55a70de6950a4",
          "sha256": "82dba26ca8f362521929f4576c4624bcc45289f2259a5aeada79261aecdeca9b"
        },
        "downloads": -1,
        "filename": "cv_recon-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2ff9032ce795ac186e55a70de6950a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8043,
        "upload_time": "2021-04-12T05:55:45",
        "upload_time_iso_8601": "2021-04-12T05:55:45.450995Z",
        "url": "https://files.pythonhosted.org/packages/f0/b2/0c1a4ebe4d985e6e355bd67a624fe8713e445ceed58ea5a66ca6da04afd1/cv_recon-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d5ff8dc2031060710807d47b81da687d25b2c6060384e01ea9b075bfcba7803",
          "md5": "d938655d5319fd6f25f93244a09af5b0",
          "sha256": "2fb0bc32f3229aeb2756c6100ef38b3760f962b30423160e342822a528b705dd"
        },
        "downloads": -1,
        "filename": "cv-recon-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d938655d5319fd6f25f93244a09af5b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6253,
        "upload_time": "2021-04-12T05:55:46",
        "upload_time_iso_8601": "2021-04-12T05:55:46.827782Z",
        "url": "https://files.pythonhosted.org/packages/8d/5f/f8dc2031060710807d47b81da687d25b2c6060384e01ea9b075bfcba7803/cv-recon-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe54a0c893babe1c4831203637a20fa314f968ac3bb25b1f5f6697b281327b19",
          "md5": "fd451dafc3787d5122d730a299fc52a5",
          "sha256": "b4f6462b90adeac03c59c04a6fe500f8ed81a03996a7ab44a333c234273ca97b"
        },
        "downloads": -1,
        "filename": "cv_recon-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd451dafc3787d5122d730a299fc52a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10729,
        "upload_time": "2021-06-10T05:26:39",
        "upload_time_iso_8601": "2021-06-10T05:26:39.508728Z",
        "url": "https://files.pythonhosted.org/packages/fe/54/a0c893babe1c4831203637a20fa314f968ac3bb25b1f5f6697b281327b19/cv_recon-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2bca86b6114a81f54ddc4e377f587e425c6497991173678284dca86aec113ae",
          "md5": "8ba359ffbe7e9d54415067cbb33c46e1",
          "sha256": "5b172338e31e828991728a7772b475389912cec7b4b3d90be2002fa40081e9ee"
        },
        "downloads": -1,
        "filename": "cv-recon-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8ba359ffbe7e9d54415067cbb33c46e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10380,
        "upload_time": "2021-06-10T05:26:40",
        "upload_time_iso_8601": "2021-06-10T05:26:40.888767Z",
        "url": "https://files.pythonhosted.org/packages/e2/bc/a86b6114a81f54ddc4e377f587e425c6497991173678284dca86aec113ae/cv-recon-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fe54a0c893babe1c4831203637a20fa314f968ac3bb25b1f5f6697b281327b19",
        "md5": "fd451dafc3787d5122d730a299fc52a5",
        "sha256": "b4f6462b90adeac03c59c04a6fe500f8ed81a03996a7ab44a333c234273ca97b"
      },
      "downloads": -1,
      "filename": "cv_recon-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fd451dafc3787d5122d730a299fc52a5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10729,
      "upload_time": "2021-06-10T05:26:39",
      "upload_time_iso_8601": "2021-06-10T05:26:39.508728Z",
      "url": "https://files.pythonhosted.org/packages/fe/54/a0c893babe1c4831203637a20fa314f968ac3bb25b1f5f6697b281327b19/cv_recon-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e2bca86b6114a81f54ddc4e377f587e425c6497991173678284dca86aec113ae",
        "md5": "8ba359ffbe7e9d54415067cbb33c46e1",
        "sha256": "5b172338e31e828991728a7772b475389912cec7b4b3d90be2002fa40081e9ee"
      },
      "downloads": -1,
      "filename": "cv-recon-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8ba359ffbe7e9d54415067cbb33c46e1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10380,
      "upload_time": "2021-06-10T05:26:40",
      "upload_time_iso_8601": "2021-06-10T05:26:40.888767Z",
      "url": "https://files.pythonhosted.org/packages/e2/bc/a86b6114a81f54ddc4e377f587e425c6497991173678284dca86aec113ae/cv-recon-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}