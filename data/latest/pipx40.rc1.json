{
  "info": {
    "author": "Pickering Interfaces",
    "author_email": "Pickering Interfaces <support@pickeringtest.com>",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Python Pipx40 #\r\n\r\nPython Pipx40 is a Python wrapper for Pickering Pipx40 VISA driver. It supports both Python 2.x and 3.x and has one python dependency (`pyvisa`). \r\n\r\n----------\r\n# Changelog #\r\n\r\n> - 1.31 - Added non precision resistor example.\r\n> - 1.3 - Updates thermocouple functions, adds error/status/attribute code dicts, adds VSourceInfo(), VSourceGetTemperature(), \r\n>Updated example code and readme with Python 2.x/3.x compatibility improvements. Functions return native strings in both Python 2.x and 3.x.\r\n>string `decode()` workaround no longer necessary in Python 3.\r\n> - 1.2 - Added functions for Thermocouple, error/status codes etc, and modified a few other functions\r\n> - 1.1 - Refactor for use with pip installer and adds 64 bit support\r\n> - 1.0 - Initial Release\r\n\r\n----------\r\n# Installation instructions #\r\n\r\nWe provide both a python module that can be installed to the system using `pip` and can be added manually to a project by copying a file into the directory that you are working in. For either installation method please make sure that you have installed Pickering PXI Installer Package in the default VXIPNP mode, which also requires NI VISA to be installed. These can be found at the following addresses:\r\n\r\n - [PXI Installer Package](http://pickeringtest.info/downloads/drivers/PXI_Drivers/)\r\n - [NI VISA](http://www.ni.com/visa/)\r\n\r\n----------\r\n## Install Using `pip` ##\r\n\r\nTo install Python Pipx40 using pip open a command line prompt and navigate to the directory the driver has been extracted to. From there enter the following command:\r\n```\r\npip install .\\\r\n```\r\nThis should install both Python Pipx40 and the `pyvisa`.\r\n\r\n----------\r\n## Install Manually ##\r\n\r\nTo install Python Pipx40 manually please copy `Pipx40.py` from the extracted directory to your working directory. You will also need to make sure that `pyvisa` is installed which can be done with either:\r\n`pip install pyvisa` with an internet connection or from the `pyvisa` directory inside the extracted directory `pip install .` \r\n\r\n----------\r\n# Using Pipx40 # \r\n\r\n## List Cards ## \r\n\r\nTo get a list of available cards use `pipx40base.FindFreeCards()`. This will return a list of resource strings that\r\ncan be used to open cards. `pipx40base.CountFreeCards()` can be used to return the number of cards available for use.\r\nPlease see below for examples on how to use both these functions: \r\n\r\n```python \r\nfrom Pipx40 import *\r\n\r\n#Initialising Base Class\r\nbase = pipx40_base()\r\n\r\n# Return the number of available cards\r\ncount = base.CountFreeCards()\r\n\r\nprint(\"Found\", count, \"free cards.\")\r\n\r\n# Return a list of free cards\r\nlist = base.FindFreeCards()\r\n\r\nfor index, card in enumerate(list):\r\n    print(\"Card\", index + 1, \":\", card) \r\n```\r\n\r\n## Opening/Closing Cards ## \r\n\r\nCards can be opened using a resource string, which can be found from FindFreeCards() or from the Pickering \r\nGeneral Soft front Panel. The following example code will open a card with a specified resource string, \r\nquery its ID, and close it:\r\n\r\n```python\r\n\r\nresourceString = \"PXI21::1::INSTR\"\r\n\r\n# Open card using resource string\r\ncard = pipx40_card(resourceString, 0 ,0)\r\n\r\n# Returns an error code and cardID string containing model name, serial number and firmware revision\r\nerror, cardId = card.GetCardId()\r\n\r\nprint(cardId)\r\n\r\n# Close the card\r\ncard.Close()\r\n```\r\n\r\n## Error Handling ## \r\n\r\nMost functions in the Pipx40 library return an error code. Error codes are a numerical \r\nvalue indicating an error condition. The `ErrorMessage()` function can be used to return a more useful \r\nstring description of a given error code as in the example below: \r\n\r\n```python\r\n# Check for errors, ideally after every function call:\r\nif error:\r\n    # This function will take an error code and return a string description of the error\r\n    error, errorString = card.ErrorMessage(error)\r\n    print(\"Error: \", errorString)\r\n```\r\n\r\n## Operate Switching Cards ## \r\n\r\nThere are three main types of switching cards:\r\n - Switches\r\n - Multiplexer\r\n - Matrix\r\n\r\nTo operate Switches and Multiplexers use `SetChannelState()` providing subunit, switch point, and switch state. \r\nMatrices can be controller using `SetCrosspointState()` which requires the subunit, row, column, and switch state. \r\nPlease see below for worked examples on using these functions:\r\n\r\n```python\r\n# Control Switches and Multiplexer cards:\r\nsubunit = 1 \r\nswitchpoint = 1\r\n\r\nerror = card.SetChannelState(subunit, switchpoint, 1)\r\nif error:\r\n    error, errorString = card.ErrorMessage(error)\r\n    print(\"Error: \", errorString)\r\n\r\n# Control Matrix cards:\r\nx = 1 \r\ny = 1 \r\n\r\nerror = card.SetCrosspointState(subunit, x, y, 1)\r\nif error:\r\n    error, errorString = card.ErrorMessage(error)\r\n    print(\"Error: \", errorString)\r\n```\r\n\r\n## Operate Resistor Cards ## \r\n\r\nResistor cards come in two varieties: Programmable Resistor, and Precision Resistor. Programmable Resistors are \r\ncontrolled like Switch Cards shown above. Precision Resistor Cards have specific resistor functions. \r\nTo set a resistance `ResSetResistance` is used and to get the current resistance `ResGetResistance` is used, \r\nas shown below:\r\n\r\n```python \r\n# Set Resistance of given subunit:\r\nmode = 0\r\nresistance = 330.0\r\n\r\nerror = card.ResSetResistance(subunit, mode, resistance)\r\nif error:\r\n    error, errorString = card.ErrorMessage(error)\r\n    print(\"Error: \", errorString)\r\n\r\n# Retrieve current resistance of a given subunit:\r\nerror, resistance = card.ResGetResistance(subunit) \r\nif error:\r\n    error, errorString = card.ErrorMessage(error)\r\n    print(\"Error: \", errorString)\r\nprint(\"Resistance:\", resistance)\r\n\r\n```\r\n\r\n## Operate Attenuator Cards ##\r\n\r\nAttenuators have specific functions for controlling them. To set attenuation use `AttenSetAttenuation()` providing the \r\nsubunit and attenuation expressed in decibels. To retrieve the current attenuation use `AttenGetAttenuation()` giving the \r\nsubunit. It returns an error code and the attenuation expressed in decibels. Please see below for worked examples on \r\nhow to use these functions:\r\n\r\n```python \r\n# Setting attenuation:\r\nattenuation = 1.5   # Value in decibels (dB)\r\n\r\nerror = card.AttenSetAttenuation(subunit, c_float(attenuation)) \r\n\r\n# Retrieving attentuation: \r\nerror = card.AttenGetAttenuation(subunit) \r\n\r\nprint(\"Attenuation (dB):\", attenuation)\r\n```\r\n\r\n## Operate Battery Simulator Cards ## \r\n\r\nBattery Simulators have specific functions for controlling them. To set voltage use `BattSetVoltage()` providing the \r\nsubunit and voltage. To retrieve the voltage use `BattGetVoltage()` giving the subunit. To set current use `BattSetcurrent()` \r\nproviding the subunit and current. To retrieve the current use `BattGetcurrent()` giving the subunit. It returns an error \r\ncode and set current. To enable output use `BattSetEnable()` providing the subunit and the state to be set. \r\nTo retrieve the present output state use `BattGetEnable()`. It returns an error code and the state. \r\nPlease see below for worked examples on how to use these functions:\r\n\r\n```python \r\nvolts = 3.3 \r\ncurrent = 0.5\r\n\r\n# Set Voltage\r\nerror = card.BattSetVoltage(subunit, volts)\r\n\r\n# Set Current \r\nerror = card.BattSetCurrent(subunit, current)\r\n\r\n# Enable Output\r\nerror = card.BattSetEnable(subunit, 1)\r\n\r\n# Get Voltage \r\nerror, volts = card.BattGetVoltage(subunit)\r\n\r\n# Get Current \r\nerror, current = card.BattGetCurrent(subunit)\r\n\r\n# Get Output State\r\nerror, state = card.BattGetEnable(subunit)\r\n```\r\n\r\n## Operate Thermocouple Simulator Cards ##\r\n\r\nThermocouple Simulators have specific functions for controlling them. To set the range use `VSourceSetRange()` \r\nproviding the subunit and the range. It returns an error code. To retrieve the range use `VSourceGetRange()` \r\nproviding the subunit. It returns an error code followed by the range. To set the voltage use `VSourceSetVoltage()` \r\nproviding the subunit and the voltage in millivolts. It returns an error code. To retrieve the voltage use \r\n`VSourceGetVoltage()` providing the subunit. It returns an error code followed by the voltage in millivolts. \r\nTo enable or disable outputs use `SetChannelState()` providing the subunit, bit number for the channel isolations, and the \r\nstate that should be set. To retrieve the state of the outputs use `GetChannelState()` providing the subunit and bit number \r\nfor the channel isolations. It returns an error code and the state if the requsted bit. Please refer to the product \r\nmanual for more information on what subunit and bits to operate. To retrieve temperature readings from a connected \r\nthermocouple compensation block use `VSourceGetTemperature()` providing either `card.ATTR[\"TS_TEMPERATURES_C\"]` \r\nor `card.ATTR[\"TS_TEMPERATURES_F\"]` for temperature unit. It will return an error code and list of four \r\ntemperatures. Please see below for worked examples on how to use these functions:\r\n\r\n```python \r\n # Set subunit voltage range to auto\r\nrange = card.TS_RANGE[\"AUTO\"]\r\nerror = card.VSourceSetRange(subunit, range)\r\n\r\n# Get voltage range of a subunit\r\nerror, range = card.VSourceGetRange(subunit)\r\n\r\n# Set voltage to 19.5 mV on the subunit\r\nmvolts = 19.5\r\nerror = card.VsourceSetVoltage(subunit, mvolts)\r\n\r\n# Read the voltage of a subunit\r\nerror, mvolts = card.VSourceGetVoltage(subunit)\r\n\r\n# Set isolation switches (Example for 41-760-001)\r\nisolation_subunit = 33 \r\n\r\nerror = card.SetChannelState(isolation_subunit, 1, 1) # Turn Vo1 on\r\nerror = card.SetChannelState(isolation_subunit, 2, 1) # Turn Vcold1 on\r\nerror = card.SetChannelState(isolation_subunit, 1, 0) # Turn Vo1 off\r\nerror = card.SetChannelState(isolation_subunit, 2, 0) # Turn Vcold1 off\r\n\r\n# Get compensation block temperatures\r\nerror, temperatures = card.VSourceGetTemperature(card.ATTR[\"TS_TEMPERATURES_C\"])\r\n\r\nindex = 0\r\nfor index, temperature in enumerate(temperatures):\r\n    print(\"Compensation block temperature \", index, \": \", temperature, \"C\")\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Pipx40",
    "package_url": "https://pypi.org/project/Pipx40/",
    "platform": null,
    "project_url": "https://pypi.org/project/Pipx40/",
    "project_urls": {
      "homepage": "https://www.pickeringtest.com/"
    },
    "release_url": "https://pypi.org/project/Pipx40/1.31/",
    "requires_dist": [
      "enum34",
      "pyvisa"
    ],
    "requires_python": "",
    "summary": "Python Pipx40 is a Python wrapper for Pickering Pipx40 VISA driver.",
    "version": "1.31",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17361116,
  "releases": {
    "1.31": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "230fb599cf8d8ec42f6b5730758ee5baef12c9dee402c9b66fb1296963bf8b72",
          "md5": "e5e9ed970e6c8422efbe9b6e9df90491",
          "sha256": "42be92c8ad554bfb0ca6ea63db18176c86aee05c4a05e78880e034278756dc6a"
        },
        "downloads": -1,
        "filename": "Pipx40-1.31-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5e9ed970e6c8422efbe9b6e9df90491",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15479,
        "upload_time": "2023-03-20T09:19:57",
        "upload_time_iso_8601": "2023-03-20T09:19:57.335419Z",
        "url": "https://files.pythonhosted.org/packages/23/0f/b599cf8d8ec42f6b5730758ee5baef12c9dee402c9b66fb1296963bf8b72/Pipx40-1.31-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40edab827c46570415b1c6ad0686dccde16e6bc82814d11f701e805bbee4ee87",
          "md5": "2714146d3d71f4d37e60700987e0bcac",
          "sha256": "657738d8e1a98d6e8c173c538627ea6ccfc7a27ac87549189a578626518734c6"
        },
        "downloads": -1,
        "filename": "Pipx40-1.31.tar.gz",
        "has_sig": false,
        "md5_digest": "2714146d3d71f4d37e60700987e0bcac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18606,
        "upload_time": "2023-03-20T09:19:58",
        "upload_time_iso_8601": "2023-03-20T09:19:58.899318Z",
        "url": "https://files.pythonhosted.org/packages/40/ed/ab827c46570415b1c6ad0686dccde16e6bc82814d11f701e805bbee4ee87/Pipx40-1.31.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "230fb599cf8d8ec42f6b5730758ee5baef12c9dee402c9b66fb1296963bf8b72",
        "md5": "e5e9ed970e6c8422efbe9b6e9df90491",
        "sha256": "42be92c8ad554bfb0ca6ea63db18176c86aee05c4a05e78880e034278756dc6a"
      },
      "downloads": -1,
      "filename": "Pipx40-1.31-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e5e9ed970e6c8422efbe9b6e9df90491",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 15479,
      "upload_time": "2023-03-20T09:19:57",
      "upload_time_iso_8601": "2023-03-20T09:19:57.335419Z",
      "url": "https://files.pythonhosted.org/packages/23/0f/b599cf8d8ec42f6b5730758ee5baef12c9dee402c9b66fb1296963bf8b72/Pipx40-1.31-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "40edab827c46570415b1c6ad0686dccde16e6bc82814d11f701e805bbee4ee87",
        "md5": "2714146d3d71f4d37e60700987e0bcac",
        "sha256": "657738d8e1a98d6e8c173c538627ea6ccfc7a27ac87549189a578626518734c6"
      },
      "downloads": -1,
      "filename": "Pipx40-1.31.tar.gz",
      "has_sig": false,
      "md5_digest": "2714146d3d71f4d37e60700987e0bcac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18606,
      "upload_time": "2023-03-20T09:19:58",
      "upload_time_iso_8601": "2023-03-20T09:19:58.899318Z",
      "url": "https://files.pythonhosted.org/packages/40/ed/ab827c46570415b1c6ad0686dccde16e6bc82814d11f701e805bbee4ee87/Pipx40-1.31.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}