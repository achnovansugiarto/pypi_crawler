{
  "info": {
    "author": "Andy Guo",
    "author_email": "technology@phenom-films.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: Implementation"
    ],
    "description": "dayu_timecode\n=============\n\n|Build Status|\n\nTimecode 的计算库。针对影视行业常见的各种timecode、frame\n进行计算。有下面的特点：\n\n-  支持SMPTE NDF、SMPTE DF、DLP、SRT、FFMPEG、FCPX 多种格式的timecode\n-  目前支持到 fps=60 的高帧速率\n-  支持hour loop 和 负数时间\n-  timecode、frame 之间自由转换\n-  支持和其他常用的数字类型进行运算，无需转换（int、float、Fraction）\n\n如何安装\n========\n\n直接使用pip 即可安装\n\n.. code:: shell\n\n   pip install -U dayu_timecode\n\nDayuTimeCode 使用简介\n=====================\n\n.. code:: python\n\n   from dayu_timecode import DayuTimeCode\n\n   # 针对各种输入，进行初始化\n   smpte_ndf_tc = DayuTimeCode('01:02:03:12', fps=24.0)\n   smpte_df_tc = DayuTimeCode('01:09:00;02', fps=29.97)\n   srt_tc = DayuTimeCode('00:00:03,245', fps=25.0)\n   dlp_tc = DayuTimeCode('01:12:22:136', fps=24.0)\n   ffmpeg_tc = DayuTimeCode('00:02:12.24', fps=24.0)\n   fcpx_tc = DayuTimeCode('1/24s', fps=24.0)\n   frame_int_tc = DayuTimeCode(100, fps=25.0)\n   frame_long_tc = DayuTimeCode(86400.2, fps=24.0)\n   time_tc = DayuTimeCode([24, 3], fps=24.0)\n\n   # 时码、帧数转换\n   assert smpte_ndf_tc.timecode() == '01:02:03:12'\n   assert smpte_ndf_tc.frame() == 89364.00\n\n   # 得到时码中 小时、分钟、秒、帧数的分量\n   assert smpte_ndf_tc.hour == 1\n   assert smpte_ndf_tc.minute == 2\n   assert smpte_ndf_tc.second == 3\n   assert smpte_ndf_tc.sub_frame == 12\n\n   a = DayuTimeCode('01:02:03:12', fps=24.0)\n   b = DayuTimeCode(86400.2, fps=24.0)\n\n   # 加法、减法、乘法、除法\n   print a + b    # <DayuTimeCode>(02:02:03:12, 175764.20, 24.00)\n   print a - b    # <DayuTimeCode>(00:02:03:12, 2963.80, 24.00)\n   print a * 3    # <DayuTimeCode>(03:06:10:12, 268092.00, 24.00)\n   print a / 2    # <DayuTimeCode>(00:31:01:18, 44682.00, 24.00)\n\n   # 各种比较方式\n   print a == b\n   print a > b\n   print a >= b\n   print a < b\n   print a <= b\n   print a != b\n\n   # 类型转换\n   print float(a)\n   print int(a)\n\n   # 变速（指定一个起点，以及变速的速度）\n   start_tc = DayuTimeCode(0)\n   print a.retime(start_tc, 2.0)    # 表示从0 开始，两倍速播放后的timecode\n\nDayuTimeRange 使用简介\n======================\n\nDayuTimeRange 由两个DayuTimeCode 组成的一个时间区域。\n\n.. code:: python\n\n   # 初始化\n   start = DayuTimeCode(0)\n   end = DayuTimeCode(100)\n   time_range = DayuTimeRange(start, end)\n   # zero_length_range = DayuTimeRange(DayuTimeCode(10), DayuTimeCode(10))    # 会出错，因为start 和end 都是同一个时间\n\n   # 访问属性\n   print time_range.start  # 起点\n   print time_range.end  # 终点\n   print time_range.duration.frame()  # 获得 frame 长度\n   print len(time_range)  # 获得 frame 长度的另一种方法\n\n   # 加法、减法、乘法、除法\n   print time_range + 10  # 表示整个time_range 向右移动 10 frame\n   print time_range - 20  # 表示整个time_range 向左移动 20 frame\n   print time_range * 2  # 表示整个time_range 起点不动，长度变成原来的 2 倍\n   print time_range / 3  # 表示整个time_range 起点不动，长度变成原来的 三分之一\n\n   # 处理handle\n   time_range.handle(10, 10)  # 表示time_range 的start 向左增加 10 frame，end 向右增加 10 frame\n\n   # 切镜头处理\n   cut_point = DayuTimeCode(20)\n   print time_range.cut(cut_point)  # 得到两个区域 (0 - 20), (20 - 100)\n\n   # 判断timecode 或者一个time range 是否在当前timerange 的内部\n   sample_tc = DayuTimeCode(20)\n   sample_time_range = DayuTimeRange(DayuTimeCode(30), DayuTimeCode(70))\n   assert sample_tc in time_range\n   assert sample_time_range in time_range\n\n   # 两个DayuTimeRange 之间的交集、并集、差异 运算\n   a = DayuTimeRange(DayuTimeCode(0), DayuTimeCode(100))\n   b = DayuTimeRange(DayuTimeCode(50), DayuTimeCode(150))\n   print a & b  # 二者之间交叠的部分 (50 - 100)\n   print a | b  # 二者的并集运算 （0 - 150）\n   print a ^ b  # 二者的差异运算  (0 - 50), (100 - 150)\n\n   # 遍历time range 内的所有时码\n   for tc in time_range:\n       print tc  # 会逐一打印 从 DayuTimeCode(0) ~ DayuTimeCode(99)\n\n.. |Build Status| image:: https://travis-ci.org/phenom-films/dayu_timecode.svg?branch=master\n   :target: https://travis-ci.org/phenom-films/dayu_timecode\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/phenom-films/dayu_timecode",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Andy Guo",
    "maintainer_email": "andyguo@phenom-films.com",
    "name": "dayu-timecode",
    "package_url": "https://pypi.org/project/dayu-timecode/",
    "platform": "dayu_timecode",
    "project_url": "https://pypi.org/project/dayu-timecode/",
    "project_urls": {
      "Homepage": "https://github.com/phenom-films/dayu_timecode"
    },
    "release_url": "https://pypi.org/project/dayu-timecode/0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "timecode lib for human. support SMPTE non-drop frame and drop frames and many other timecode formats.",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 4299562,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff0103afa8b84833efca6ecaab16d50b5bb83115fe20409d9e76c4057ace8a61",
          "md5": "f16b0a2dec31be499a4dc546f8dd7da8",
          "sha256": "f850258872f77771589786e109725b0479c1d08914f82db54f667227a72cdda0"
        },
        "downloads": -1,
        "filename": "dayu_timecode-0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f16b0a2dec31be499a4dc546f8dd7da8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13101,
        "upload_time": "2018-09-22T12:26:08",
        "upload_time_iso_8601": "2018-09-22T12:26:08.733801Z",
        "url": "https://files.pythonhosted.org/packages/ff/01/03afa8b84833efca6ecaab16d50b5bb83115fe20409d9e76c4057ace8a61/dayu_timecode-0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "489acdb5e46a12bdcdbe38e01564509769336ce826931eb5414ce4eaa6a84255",
          "md5": "7bd4a67d48a69f2939a9972546b680cb",
          "sha256": "ec98f2df075407f02bda12469e7ae577d52c477451d7588e3dd9e25e02d493cf"
        },
        "downloads": -1,
        "filename": "dayu_timecode-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7bd4a67d48a69f2939a9972546b680cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12411,
        "upload_time": "2018-09-22T12:26:10",
        "upload_time_iso_8601": "2018-09-22T12:26:10.434480Z",
        "url": "https://files.pythonhosted.org/packages/48/9a/cdb5e46a12bdcdbe38e01564509769336ce826931eb5414ce4eaa6a84255/dayu_timecode-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff0103afa8b84833efca6ecaab16d50b5bb83115fe20409d9e76c4057ace8a61",
        "md5": "f16b0a2dec31be499a4dc546f8dd7da8",
        "sha256": "f850258872f77771589786e109725b0479c1d08914f82db54f667227a72cdda0"
      },
      "downloads": -1,
      "filename": "dayu_timecode-0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f16b0a2dec31be499a4dc546f8dd7da8",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 13101,
      "upload_time": "2018-09-22T12:26:08",
      "upload_time_iso_8601": "2018-09-22T12:26:08.733801Z",
      "url": "https://files.pythonhosted.org/packages/ff/01/03afa8b84833efca6ecaab16d50b5bb83115fe20409d9e76c4057ace8a61/dayu_timecode-0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "489acdb5e46a12bdcdbe38e01564509769336ce826931eb5414ce4eaa6a84255",
        "md5": "7bd4a67d48a69f2939a9972546b680cb",
        "sha256": "ec98f2df075407f02bda12469e7ae577d52c477451d7588e3dd9e25e02d493cf"
      },
      "downloads": -1,
      "filename": "dayu_timecode-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7bd4a67d48a69f2939a9972546b680cb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12411,
      "upload_time": "2018-09-22T12:26:10",
      "upload_time_iso_8601": "2018-09-22T12:26:10.434480Z",
      "url": "https://files.pythonhosted.org/packages/48/9a/cdb5e46a12bdcdbe38e01564509769336ce826931eb5414ce4eaa6a84255/dayu_timecode-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}