{
  "info": {
    "author": "RedTurtle Technology",
    "author_email": "sviluppoplone@redturtle.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Plone",
      "Framework :: Plone :: 4.0",
      "Framework :: Plone :: 4.1",
      "Framework :: Plone :: 4.2",
      "Framework :: Plone :: 4.3",
      "Framework :: Zope2",
      "Intended Audience :: Developers",
      "Programming Language :: Python"
    ],
    "description": "==============================================\nThis isn't the form library you're looking for\n==============================================\n\n95% you don't need this package: try some real Plone form libraries like:\n\n* `z3c.form`__\n* `collective.wtforms`__\n\n__ http://pythonhosted.org/z3c.form/\n__ https://github.com/collective/collective.wtforms\n\nMove along... move along...\n\n=========================================\nYour mind powers will not work on me, boy\n=========================================\n\nIf you really want to know what is this, keep reading.\n\n.. contents::\n   :local:\n\nIntroduction\n============\n\n**This is not a form library** for Plone, it's only a set of **ZPT macros** that you can use to \ncreate HTML form in the old way, keeping the Plone layout.\nFor this reason this product will not handle what to do when you submit the form, it's only focused onto\nrendering some advanced fields.\n\nThe nice thing is that you can use those macros with the old-way-TTW approach.\n\nField reference\n===============\n\nEvery field has some custom options you can/must configure, but some of them are globals:\n\n``fieldName`` (mandatory)\n    The name of the field, that is the name you will read from the request when sending the form \n``fieldLabel``\n    The label of the field\n``fieldHelp``\n    Additional explanation of the field\n``required``\n    Display the required UI information of the field. **Please note** that it's only a visual effect,\n    you are in charge of really handle the requirement.\n``cssFieldAdditionalClasses``\n    Additional CSS classes that will be appended to the div containing the whole field\n\nLines Field\n-----------\n\nThis field can be used to provide a list of elements (strings) for the submitted form.\nElements are loaded one at time from a text input.\n\n.. image:: http://blog.redturtle.it/pypi-images/rt.zptformfield/rt.zptformfield-0.1.0-lines01.png\n   :alt: Lines field\n   :align: center\n\nThe field name will be composed as \"*fieldName*:list\", so you will read a list of element directly from the request.\n\nAdditional parameters\n~~~~~~~~~~~~~~~~~~~~~\n\n``fieldType`` (default to \"text\")\n    The type of the HTML input field used to populate the list. You can change it to\n    HTML 5 new elements type to use some of the browser native features.\n``pattern``\n    The HTML 5 pattern attribute, for field validation. This regex is used to validate the field value before\n    adding it to the list\n``elements``\n    Existings elements to be used to populate the list. Provide a sequence of dicts with a \"title\" and \"value\"\n    couple\n\nHow to use\n~~~~~~~~~~\n\nCall the macro\n\n.. code-block:: xml\n\n    <tal:field define=\"fieldName string:test_lines_field;\n                       fieldLabel string:Testing lines field;\n                       fieldHelp string:Write something, then add it;\n                       \">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.lines/field\" />\n    </tal:field>\n\nYou need to include a JavaScript in your final HTML.\n\n.. code-block:: xml\n\n    <metal:head fill-slot=\"javascript_head_slot\">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.lines/javascript_helpers\" />\n    </metal:head>\n\nAutocomplete Lines Field\n------------------------\n\nThis field can be used to provide a list of elements (strings) for the submitted form.\nElements are selected by an autocomplete feature obtained through `jQueryUI Autocomplete`__;\nin Plone the easyest way to get this is by installing `collective.js.jqueryui`__.\n\n__ http://jqueryui.com/autocomplete/\n__ http://pypi.python.org/pypi/collective.js.jqueryui\n\n.. image:: http://blog.redturtle.it/pypi-images/rt.zptformfield/rt.zptformfield-0.1.0-autocomplete01.png\n   :alt: Autocomplete lines field\n   :align: center\n\nThe field name will be composed as \"*fieldName*:list\", so you will read a list of element directly from the request.\n\nAdditional parameters\n~~~~~~~~~~~~~~~~~~~~~\n\n``source`` (mandatory)\n    An URL that jQueryUI will call for getting selectable elements. This call must return a valid JSON sequence with\n    \"value\" and \"label\" elements.\n``elements``\n    Existings elements to be used to populate the list. Provide a sequence of dicts with a \"title\" and \"value\"\n    couple\n\nHow to use\n~~~~~~~~~~\n\nCall the macro\n\n.. code-block:: xml\n\n    <tal:field define=\"fieldName string:test_lines_field;\n                       source string:${portal_url}/@@rt.zptformfield.test.vocab;\n                       fieldLabel string:Testing autocomplete field;\n                       fieldHelp string:Write something and test the autocomplete feature;\n                       \">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.autocomplete_lines/field\" />\n    </tal:field>\n\nYou need to include a JavaScript in your final HTML.\n\n.. code-block:: xml\n\n    <metal:head fill-slot=\"javascript_head_slot\">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.autocomplete_lines/javascript_helpers\" />\n    </metal:head>\n\nTinyMCE Field\n-------------\n\nThis field render a textarea and trigger the default Plone WYSIWYG editor on the field (using the Products.TinyMCE features,\nversion 1.3 or better).\n\n.. image:: http://blog.redturtle.it/pypi-images/rt.zptformfield/rt.zptformfield-0.1.0-tinymce01.png\n   :alt: TinyMCE field\n   :align: center\n\nAdditional parameters\n~~~~~~~~~~~~~~~~~~~~~\n\n``rows``\n    Number of rows of the textarea\n``cols``\n    Number of columns of the textarea\n``configuration_method``\n    The view to be called for obtaining TinyMCE configuration. Do not use for loading the default ones\n``configuration_json``\n    Directly provide the JSON configuration. Do not use to load it from the \"*configuration_method*\"\n``value``\n    Default text in the field\n\nHow to use\n~~~~~~~~~~\n\nCall the macro\n\n.. code-block:: xml\n\n    <tal:field define=\"fieldName string:test_lines_field;\n                       fieldLabel string:Testing TinyMCE field;\n                       fieldHelp string:You can use the WYSIWYG editor below;\n                       rows python:15;\n                       value string:The cat is on the table;\n                       \">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.tinymce/field\" />\n    </tal:field>\n\nReference Field\n---------------\n\nThis field render a selection of a site content using the native `archetypes.referencebrowserwidget`__\nmachinery. The only problem is that the AJAX call **must** be called on a real Archetypes content that\nprovide a (not multivalued) reference field of a well know name (even if hidden and never used).\n\n__ https://pypi.python.org/pypi/archetypes.referencebrowserwidget/\n\n.. image:: http://blog.redturtle.it/pypi-images/rt.zptformfield/rt.zptformfield-0.1.0-reference01.png\n   :alt: Reference field\n   :align: center\n\nThe submitted data will be the uuid of the selected document.\n\nAdditional parameters\n~~~~~~~~~~~~~~~~~~~~~\n\n``startup_directory``\n    The directory where start browsing the site. Default is the current context.\n``context_helper``\n    The context of which call the ``refbrowserhelper`` view. Default is the current context.\n``fake_field_name`` (mandatory)\n    This field name will not be used in the form, but must be an existing Archetypes reference field name\n    on the context defined by \"context_helper\".\n``search_index``\n    The TextIndex to be used for the overlay search box. Default is Plone default \"SearchableText\".\n\nHow to use\n~~~~~~~~~~\n\nCall the macro\n\n.. code-block:: xml\n\n    <tal:field define=\"fieldName string:test_reference_field;\n                       fake_field_name string:foo_field;\n                       fieldLabel string:Testing reference browser field;\n                       fieldHelp string:Use the Plone reference browser feature.\n                       \">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.reference/field\" />\n    </tal:field>\n\nIn the example above we didn't provide ``context_helper`` parameter so it *must* be called on a Plone content\nthat behave the \"foo_field\" singlevalued reference field.\n\nYou need to include a JavaScript in your final HTML.\n\n.. code-block:: xml\n\n    <metal:head fill-slot=\"javascript_head_slot\">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.reference/javascript_helpers\" />\n    </metal:head>\n\nMultivalued Reference Field\n---------------------------\n\nThis is the same as the reference field above, but from the overlay displayed you will be able to select multiple\nelements.\n\n.. image:: http://blog.redturtle.it/pypi-images/rt.zptformfield/rt.zptformfield-0.1.0-multireference01.png\n   :alt: Reference field\n   :align: center\n\nThe submitted data will be the a uuid list of selected documents.\n\nAdditional parameters\n~~~~~~~~~~~~~~~~~~~~~\n\nSee \"Reference Field\"\n\nHow to use\n~~~~~~~~~~\n\nCall the macro\n\n.. code-block:: xml\n\n    <tal:field define=\"fieldName string:test_multivalued_reference_field;\n                       fake_field_name string:relatedItems;\n                       fieldLabel string:Testing multivalued reference browser field;\n                       fieldHelp string:Use the Plone reference browser feature.\n                       \">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.multivalued_reference/field\" />\n    </tal:field>\n\nIn the example above we didn't provide ``context_helper`` parameter so it *must* be called on a Plone content\nthat behave the \"relatedItems\" multivalued reference field (by default: all content types).\n\nYou need to include a JavaScript in your final HTML.\n\n.. code-block:: xml\n\n    <metal:head fill-slot=\"javascript_head_slot\">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.multivalued_reference/javascript_helpers\" />\n    </metal:head>\n\nCalendar Field\n--------------\n\nThis field can be used to submit a date (or date-time) using the Plone default calendar.\nDate can be filled by using a set of HTML select elements or with a popup calendar widget.\n\n.. image:: http://blog.redturtle.it/pypi-images/rt.zptformfield/rt.zptformfield-0.2.0-calendar01.png\n   :alt: Calendar field\n   :align: center\n\nThis field is based on Plone inner calendar support (JavaScript and ZPT macros) so you can't use this outside\nPlone.\n\nAdditional parameters\n~~~~~~~~~~~~~~~~~~~~~\n\n``value``\n    The date to be displayed (a `Zope DateTime`__ object). Default will not show any date.\n``show_hm``\n    Boolean value for showing the hours/minutes widget elements. Default will show them.\n``show_ymd``\n    Boolean value for showing the day widget elements. Default will show them.\n``starting_year``\n    Integer value for defining the first year to be used in the year combo box.\n``ending_year``\n    Integer value for defining the last year to be used in the year combo box.\n``future_years``\n    Integer value for defining how many years in the future (from current date) will be shown\n    in the calendar widget. Will be ignored if ``ending_year`` is provided.  \n``minute_step``\n    If minutes combobox is shown, define the interval between minutes values. Plone default is 5.\n``calendar_lang``\n    Language of the calendar popup UI. For an old and never fixed `Plone bug`__ the default is to\n    english language and not to the current language.\n    Change at your own risk. Also: *note* that this parameter is for the ``javascript_helpers``\n    macros (see example below)\n\n__ https://pypi.python.org/pypi/DateTime\n__ https://dev.plone.org/ticket/13189\n\n\nHow to use\n~~~~~~~~~~\n\nCall the macro\n\n.. code-block:: xml\n\n    <tal:field define=\"fieldName string:test_calendar_field;\n                       fieldLabel string:Testing Calendar field;\n                       fieldHelp string:The standard Plone calendar;\">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.calendar/field\" />\n    </tal:field>\n\nYou need to include a JavaScript in your final HTML. Another **warning** about the usage of\n``calendar_lang`` parameter: it's buggy.\n\n.. code-block:: xml\n\n    <metal:head fill-slot=\"javascript_head_slot\" tal:define=\"calendar_lang context/@@plone_portal_state/language;\">\n        <metal:field-content use-macro=\"context/@@rt.zptformfield.calendar/javascript_helpers\" />\n    </metal:head>\n\nFinally, the calendar popup needs some CSS styles:\n\n.. code-block:: xml\n\n    <metal:head fill-slot=\"style_slot\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"jscalendar/calendar-system.css\"\n              tal:attributes=\"href string:$portal_url/jscalendar/calendar-system.css\" />\n    </metal:head>\n\nLive examples\n=============\n\nThis product contains a set of demo views for all fields. You must activate them by including the ``tests.zcml``\nfile.\n\n::\n\n    [instance]\n    eggs +=\n        ...\n        rt.zptformfield\n    \n    zcml +=\n        ...\n        rt.zptformfield:tests.zcml\n\nCheck `the code`__ for an updated list of examples.\n\n__ https://github.com/RedTurtle/rt.zptformfield/blob/master/src/rt/zptformfield/tests/configure.zcml\n\n=======\nAuthors\n=======\n\nThis product was developed by RedTurtle Technology team.\n\n.. image:: http://www.redturtle.it/redturtle_banner.png\n   :alt: RedTurtle Technology Site\n   :target: http://www.redturtle.it/\n\nChangelog\n=========\n\n0.2.1 (2015-09-08)\n------------------\n\n- Calendar popup UI language default to english\n  [keul]\n- Added a way to change calendar language, but added the\n  proper warning in the documentation\n  [keul]\n- Added the missing but needed ``calendar_formfield`` parameter.\n  Calendar JavaScript was not working.\n  [keul]\n\n0.2.0 (2014-10-09)\n------------------\n\n- Added the Calendar field support and example\n  [keul]\n\n0.1.0a1 (2013-12-18)\n--------------------\n\n- Initial release",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/RedTurtle/rt.zptformfield",
    "keywords": "plone zpt zope form macro",
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "rt.zptformfield",
    "package_url": "https://pypi.org/project/rt.zptformfield/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/rt.zptformfield/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/RedTurtle/rt.zptformfield"
    },
    "release_url": "https://pypi.org/project/rt.zptformfield/0.2.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Some ZPT macros for Zope/Plone HTML forms development",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1713430,
  "releases": {
    "0.1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d46617040dcd6a4a184b0c5b77c42384157c68420e3e4650512d39111c4d5960",
          "md5": "97b829e248f0d7971d07da43780ab9a6",
          "sha256": "977c5c7c48eed7de81feb20d06439b5604078873fd4aa8ac539ba4ec4bd012a6"
        },
        "downloads": -1,
        "filename": "rt.zptformfield-0.1.0a1.zip",
        "has_sig": false,
        "md5_digest": "97b829e248f0d7971d07da43780ab9a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40421,
        "upload_time": "2013-12-18T16:01:04",
        "upload_time_iso_8601": "2013-12-18T16:01:04.123345Z",
        "url": "https://files.pythonhosted.org/packages/d4/66/17040dcd6a4a184b0c5b77c42384157c68420e3e4650512d39111c4d5960/rt.zptformfield-0.1.0a1.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f287f4a2ae744efe6a3764d643e346b275cb3cefa291a84d8ce21c78c055f28",
          "md5": "36047abf7c9e6068841064f162cd94e5",
          "sha256": "f88dd36c82fe3e7ef21d0e80870844e4985ea45870628c591808db0886b1077c"
        },
        "downloads": -1,
        "filename": "rt.zptformfield-0.2.0.zip",
        "has_sig": false,
        "md5_digest": "36047abf7c9e6068841064f162cd94e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 44140,
        "upload_time": "2014-10-09T13:03:04",
        "upload_time_iso_8601": "2014-10-09T13:03:04.137040Z",
        "url": "https://files.pythonhosted.org/packages/5f/28/7f4a2ae744efe6a3764d643e346b275cb3cefa291a84d8ce21c78c055f28/rt.zptformfield-0.2.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca9d0ae9bb0d4e781380e99dcaf7c75216457b3001999aaab2f8fb6e9dba0554",
          "md5": "0d34bb150c27508ef7ecbe73a32b844f",
          "sha256": "8e8e9879b8163198151eb0ba398f0ef800b551a5ffa253748f3954f96f30415d"
        },
        "downloads": -1,
        "filename": "rt.zptformfield-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0d34bb150c27508ef7ecbe73a32b844f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22940,
        "upload_time": "2015-09-08T15:21:15",
        "upload_time_iso_8601": "2015-09-08T15:21:15.140423Z",
        "url": "https://files.pythonhosted.org/packages/ca/9d/0ae9bb0d4e781380e99dcaf7c75216457b3001999aaab2f8fb6e9dba0554/rt.zptformfield-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ca9d0ae9bb0d4e781380e99dcaf7c75216457b3001999aaab2f8fb6e9dba0554",
        "md5": "0d34bb150c27508ef7ecbe73a32b844f",
        "sha256": "8e8e9879b8163198151eb0ba398f0ef800b551a5ffa253748f3954f96f30415d"
      },
      "downloads": -1,
      "filename": "rt.zptformfield-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0d34bb150c27508ef7ecbe73a32b844f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22940,
      "upload_time": "2015-09-08T15:21:15",
      "upload_time_iso_8601": "2015-09-08T15:21:15.140423Z",
      "url": "https://files.pythonhosted.org/packages/ca/9d/0ae9bb0d4e781380e99dcaf7c75216457b3001999aaab2f8fb6e9dba0554/rt.zptformfield-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}