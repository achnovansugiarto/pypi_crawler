{
  "info": {
    "author": "Anime no Sekai",
    "author_email": "niichannomail@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# filecenter\n\n ### **An easy file management and information center for Python**\n\n[![PyPI version](https://badge.fury.io/py/filecenter.svg)](https://badge.fury.io/py/filecenter)\n\n## Table of Content\n- [Installation](#installation)  \n- [What is File Center?](#whatis)\n- [Usage](#usage)\n   - [File Actions](#fileactions)  \n   - [Extension Info](#extension)\n   - [File Base Info](#filebase)\n   - [File Info](#fileinfo)\n   - [Advanced](#advanced)\n- [List of file types in the database](#listoftypes)\n- [Development](#development) \n- [Legals](#legals)\n\n\n<a name=\"installation\"/>\n\n## Installation\nYou can install this library with **`PIP`**, the Python Package Manager\n\nSimply type `pip install filecenter` in your terminal/command-line prompt.\n\n> This library has no external/third-party dependencies.\n\n<a name=\"whatis\"/>\n\n## What is File Center?\nFile Center is a simple library to make developers life easier when it comes to file management and information.\n> You just have to import it to your project! `import filecenter`\n\n\n<a name=\"usage\"/>\n\n## Usage\n\n<a name=\"fileactions\"/>\n\n### File Actions \n- **`open(filepath)`**\n\n**Opens the given file in its default software**\n\nArguments:\n\n    file: the path to the file.\n\n> Returns 0 if success and 1 if failed\n\n---\n- **`move(filepath, new_path)`**\n\n**Moves the given file to the provided new path.**\n\nArguments:\n\n    origin: the path to the file.\n    destination: the new path\n\n> Returns 0 if success and 1 if failed\n\n---\n- **`delete(filepath)`**\n\n**Deletes the given file.**\n\nArguments:\n\n    file: the path of the file\n\n> Returns 0 if success, 1 if failed at getting the file, 2 if failed at moving a file and 3 if failed at moving a directory. \n\n---\n- **`makedir(path)`**\n\n**Makes a directory at the given path.**\n\nArguments:\n\n    path_of_new_dir: the path where the directory needs to be created\n\n> Returns the path of the directory if success, the string 'Error while making the new folder' if failed.\n\n---\n\n<a name=\"extension\"/>\n\n### Extension Information\n\n- **`popularity(extension)`**\n\n**Gives the popularity of a given file extension.**\n\nArguments:\n\n    file_extension: the extension you want to check.\n\n> Returns 'Very popular', 'Quite popular' or 'Not very popular'.\n\n---\n\n- **`type_from_extension(extension)`**\n\n**Gives the type of file using the given extension.**\n\nArguments:\n\n    extension: the extension you want to check.\n\n> Returns a string with the type (see below for the full list of supported types).\n---\n\n- **`extension_to_human_readeable(extension)`**\n\n**Gives the human readeable version of a given extension.**\n\nArguments:\n\n    extension: the file extension you want to get the human readeable version from.\n\n> Returns a string of the human readeable version.\n\n---\n\n- **`extension_info(extension)`**\n\n**Gives a dictionnary with multiple information of a given extension.**\n\nArguments:\n\n    extension: the file extension you want to get information from.\n\n> Returns a python dictionary.\n\n---\n\n- **`extension_description(extension)`**\n\n**Gives the description of a given file extension.**\n\nArguments:\n\n    extension: the file extension you want to get the description from.\n\n> Returns a string with the extension's description.\n\n---\n\n- **`extension_usage(extension)`**\n\n**Gives the softwares using a given file extension.**\n\nArguments:\n\n    extension: the file extension you want to get the using softwares from.\n\n> Returns a list of softwares name.\n\n---\n\n<a name=\"filebase\"/>\n\n### File Base Information\n\n- **`name_from_base(base)`**\n\n**Returns the name of a file from the given file base.**\n\nA file base is the file name and its extension (i.e. something.png)\n\nArguments:\n\n    base: the file base you want to get the name from.\n\n> Returns a string with the file name.\n\n---\n\n- **`extension_from_base(base)`**\n\n**Returns the extension of a file from the given file base.**\n\nArguments:\n\n    base: the file base you want to get the extension from.\n\n> Returns a string with the file extension. (including the dot)\n\n---\n\n<a name=\"fileinfo\"/>\n\n### File Information\n\n#### Boolean Values\n\n- **`exists(path)`**\n\n**Checks if a fiven file or directory exists.**\n\nArguments:\n\n    file: the file path to check.\n\n> Returns a boolean value.\n\n\n---\n\n- **`isdir(path)`**\n\n**Checks is a given path is a directory.**\n\nArguments:\n\n    path: the path to check.\n\n> Returns a boolean value.\n\n\n---\n\n- **`isfile(path)`**\n\n**Checks if a given path is a file.**\n\nArguments:\n\n    path: the path to check.\n\n> Returns a boolean value.\n\n\n---\n\n- **`issymboliclink(path)`**\n\n**Checks if a given path is a symbolic link (an alias).**\n\nArguments:\n\n    path: the path to check.\n\n> Returns a boolean value.\n\n\n---\n\n- **`ismountpoint(path)`**\n\n**Checks if the given path is a disk mountpoint.**\n\nArguments:\n\n    path: the path to check.\n\n> Returns a boolean value.\n\n\n---\n\n- **`iscommon(extension)`**\n\n**Checks if a given file extension is commonly used.**\n\nArguments:\n\n    file_extension: the extension you want to check.\n\n> Returns a boolean value.\n\n##### Informations\n\n- **`permissions(file)`**\n\n**Returns the permissions for a given file.**\n\nArguments:\n\n    file: the path to the file you want to get the permissions from.\n\n> Returns a dictionnary with the permissions for the owner, the group and others of the given file.\n> Returns the `{'information': 'Unable to get permissions'}` dictionnary the file isn't found.\n\n---\n\n- **`mimetype(file)`**\n\n**Returns the MIME type for a given file.**\n\nArguments:\n\n    file: the path of the file you want to get the MIME type from.\n\n> Returns a string with the MIME type or 'An error occured while getting the file' if failed to retrieve it.\n\n---\n\n- **`base(file)`**\n\n**Returns the file base from a given path.**\n\nArguments:\n\n    file: the path of the file you want to get the base from.\n\n> Returns a string with the file base.\n\n---\n\n- **`path(file)`**\n\n**Returns the absolute path of a file path.**\n\nArguments:\n\n    file: the path of the file you want to get the absolute path from.\n\n> Returns a string with the path.\n\n---\n\n- **`name(file)`**\n\n**Gives the name of a file based on its path.**\n\nArguments:\n\n    file: the path of the file you want to get the name from.\n\n> Returns a string with the name of the file.\n\n\n---\n\n- **`extension(file)`**\n\n**Returns the extension of a file based on its path.**\n\nArguments:\n\n    file: the path of the file you want to get the extension from.\n\n> Returns a string with the file extension (including the dot).\n\n\n---\n\n- **`size(file)`**\n\n**Returns the size of a file.**\n\nArguments:\n\n    file: the path to the file you want to get the size from.\n\n> Returns a string with the file size (in a correctly scaled, human readeable format).\n\n\n---\n\n- **`get_real_path(path)`**\n\n**Checks for the real path of a file/directory (without symbolic links).**\n\nArguments:\n\n    path: the path to check.\n\n> Returns a boolean value.\n\n---\n- **`files_in_dir(path_to_folder)`**\n\n**Gives a list of files in a given directory.**\n\nArguments:\n\n    path_of_dir: the path of the directory where the files are located.\n\n> Returns the a list of files basename.\n\n---\n##### Time\n\n- **`last_access(file)`**\n\n**Gives the last access time.**\n\nArguments:\n\n    file: the path to the file you want to get the last access time from.\n\n> Returns a datetime object.\n\n---\n\n- **`last_modification(file)`**\n\n**Gives the last modification time.**\n\nArguments:\n\n    file: the path to the file you want to get the last modification time from.\n\n> Returns a datetime object.\n\n---\n\n- **`last_metadata_change(file)`**\n\n**Gives the last metadata change time.**\n\nArguments:\n\n    file: the path to the file you want to get the last modification time from.\n\n> Returns a datetime object.\n\n---\n\n- **`type(file)`**\n\n**Returns the type of file.**\n\nArguments:\n\n    file: the path of the file you want to know the type from.\n\n> Returns a string with the type.\n\n---\n### Every Information at once\n\n- **`info(file)`**\n\n**Gives every info you could get from filecenter on a given file.**\n\nArguments:\n\n    file: the path to the file you want to get the infos from.\n\n> Returns a python dictionnary containing everything.\n\n---\n\n### Other\n\n- **`os_name()`**\n\n**Returns the operating system's name.**\n\n---\n- **`get_readeable_size(bytes, suffix)`**\n\n**To scale bytes to its proper format.**\n\nArguments:\n\n    bytes: the number of bytes to convert.\n    suffix: if you want to change the suffix of the given size.\n\n> Returns the correctly scales size.\n\n---\n\n- **`get_correct_path(path)`**\n\n**Change a non-python usable path into a python-usable one.**\n\nArguments:\n\n    path: the path to check.\n\n> Returns the path usable in python.\n\n---\n\n<a name=\"advanced\"/>\n\n### Advanced\n\n- **`osstat_mode(file)`**\n\n**Returns the mode part of os.stat() for a given file.**\n\nMostly used to get the permissions of a file from (even if you can use permissions() or permissions_in_oct() to do so)\n\nArguments:\n\n    file: the path to the file you want to get the mode part from.\n\n> Returns a os.stat() class or 0 if failed.\n\n\n---\n\n- **`permissions_in_oct(file)`**\n\n**Returns the octal version of the permissions for a given file.**\n\nArguments:\n\n    file: the path to the file you want to get the permissions from.\n\n> Returns an octal string or the string 'Unable to get the file permissions' if the file isn't found.\n\n---\n\n- **`size_in_bytes(file)`**\n\n**Returns the size of a file in bytes.**\n\nArguments:\n\n    file: the path to the file you want to get the size from.\n\n> Returns an integer with the number of bytes.\n\n\n---\n\n- **`file_stat(file)`**\n\n**Returns the os.stat() of a given file.**\n\nArguments:\n\n    file: the path to the file you want to get the stats from.\n\n> Returns a os.stat() class object.\n\n\n---\n\n- **`last_access_raw(file)`**\n\n**Gives the last access time as a timestamp.**\n\nArguments:\n\n    file: the path to the file you want to get the last access timestamp from.\n\n> Returns an integer with the timestamp of the last access time.\n\n---\n\n- **`last_modification_raw(file)`**\n\n**Gives the last modification time as a timestamp.**\n\nArguments:\n\n    file: the path to the file you want to get the last modification timestamp from.\n\n> Returns an integer with the timestamp of the last modification time.\n\n---\n\n- **`last_metadata_change_raw(file)`**\n\n**Gives the last metadata change time as a timestamp.**\n\nArguments:\n\n    file: the path to the file you want to get the last metadata change time from.\n\n> Returns an integer with the timestamp of the last metadata change time.\n\n<a name=\"listoftypes\"/>\n\n## List of types\n\n- Archive\n- Audio\n- Backup\n- eBook\n- Database File\n- Developer\n- Disk Image\n- Encoded File\n- Application/Executable\n- Font\n- 3D Image\n- Plugin\n- Preset/Settings\n- Image\n- Raw Image\n- ROM/Game File\n- Spreadsheet\n- System file\n- Text File/Document\n- Vector Image\n- Video\n- Web Document\n- Folder\n- Document\n\n> The type is defined as \"unknown\" if not in the database\n\n<a name=\"development\"/>\n\n## Development\nFile Center is in constant development and fixes are made on a regular basis (but I also try to add some new features ehe)\n\n#### If you have any issues, questions, development problem: feel free to ask in the issues section.\n\nIf you want to help us and join me here is a quick guide.\n\n### Files\n`__init.py__` is the main module\n\n`data_` All files with a `data_` suffix are data files (list of extensions for example).\n\n`data_common.py` is a list of file extensions that are common.\n\n`data_ext_to_human_readable.py` is a list of file extensions and its human readeable format.\n\n`data_extension_desc.py` is a list of file extensions and their description, using softwares.\n\n`data_type.py` is a list of file extensions and their general type (file types, i.e. Images, Web Development).\n\n`README.md` is the text file you're currently reading, with all the documentations and explanations.\n\n`LICENSE` is a text file with File Center's license\n\n#### Dependencies\nThe File Center Library has no third-party dependencies needed.\n\n### Sources\nDatafile | Source\n------------ | -------------\ndata_common | [**FileInfo**](https://fileinfo.com/browse/),[**Wikipedia**](https://en.wikipedia.org/wiki/Main_Page), [**ComputerHope**](https://www.computerhope.com/)\ndata_ext_to_human_readeable | [**Webopedia**](https://www.webopedia.com/quick_ref/fileextensionsfull.asp)\ndata_extension_desc.py | [**Wikipedia**](https://en.wikipedia.org/wiki/List_of_filename_extensions)\ndata_type | [**FileInfo**](https://fileinfo.com/browse/)\n\n<a name=\"legals\"/>\n\n## Copyrights and Legals\n\nEvery data here has been pulled from websites (and myself too lol) by hand (yea it took quite some time)\n\n**If you think that there is any kind of copyright infrigements, feel free to ask me to remove it and I will try to do so as soon as possible**\n\n**Wikipedia** is hosted by the Wikimedia Foundation\n\n**Computer Hope** belongs to [Nathan Emberton](https://www.computerhope.com/people/nathan_emberton.htm)\n\n**Webopedia** is a brand which belongs to TechnologyAdvice, LLC\n\n**FileInfo** belongs to Sharpened Productions\n\n**GitHub** is a brand which belongs to GitHub, Inc. (Microsoft)\n\n**Python** belongs to the Python Software Foundation\n\n\nI am in now way affiliated to FileInfo.com\n\n> ©Anime no Sekai - 2020 ✨\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Animenosekai/filecenter/archive/v1.5.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Animenosekai/filecenter",
    "keywords": "file,information,fileinfo,type,extension,file management",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "filecenter",
    "package_url": "https://pypi.org/project/filecenter/",
    "platform": "",
    "project_url": "https://pypi.org/project/filecenter/",
    "project_urls": {
      "Download": "https://github.com/Animenosekai/filecenter/archive/v1.5.tar.gz",
      "Homepage": "https://github.com/Animenosekai/filecenter"
    },
    "release_url": "https://pypi.org/project/filecenter/1.5.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A file? An info! Get infos on file with a single line of code! Works with a database of file extensions so that it can even give you the type of the file.",
    "version": "1.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7360560,
  "releases": {
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7948080e4717df11f5657bbdfb6f23d63c7fc1481b3afc29dc8bf51ca1c9ea1d",
          "md5": "32efaea86b6a65316236a9d7e726a886",
          "sha256": "5bc5ae54c4d48b34b7dc8ace7371cdb12dda381db7618ab14f6dde5204595bde"
        },
        "downloads": -1,
        "filename": "filecenter-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "32efaea86b6a65316236a9d7e726a886",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 149623,
        "upload_time": "2020-05-28T18:28:22",
        "upload_time_iso_8601": "2020-05-28T18:28:22.733892Z",
        "url": "https://files.pythonhosted.org/packages/79/48/080e4717df11f5657bbdfb6f23d63c7fc1481b3afc29dc8bf51ca1c9ea1d/filecenter-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b89b3f14ce6e3b852ec756c34df4eb0c3a8cb836f9b6fc98df7deab703a8e794",
          "md5": "3f2f1787f207821f16c16e48d6b5397d",
          "sha256": "afb74ef9cbd02e65188a8e7684a1aff1edb2d95a1dac6af949efb9a1846b5b3c"
        },
        "downloads": -1,
        "filename": "filecenter-1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3f2f1787f207821f16c16e48d6b5397d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 157520,
        "upload_time": "2020-05-29T12:36:49",
        "upload_time_iso_8601": "2020-05-29T12:36:49.553297Z",
        "url": "https://files.pythonhosted.org/packages/b8/9b/3f14ce6e3b852ec756c34df4eb0c3a8cb836f9b6fc98df7deab703a8e794/filecenter-1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77206dbe9118553c3c7d5743589f37f7281b98416639b8b040ddeb261029ccbb",
          "md5": "10aeb02ef3de54d074af25a3b4bce803",
          "sha256": "9b1efe1d082af3981f37b197d8b6882ed5b732c65f9e29c7eab442a2366be763"
        },
        "downloads": -1,
        "filename": "filecenter-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "10aeb02ef3de54d074af25a3b4bce803",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 158888,
        "upload_time": "2020-05-29T12:36:50",
        "upload_time_iso_8601": "2020-05-29T12:36:50.984328Z",
        "url": "https://files.pythonhosted.org/packages/77/20/6dbe9118553c3c7d5743589f37f7281b98416639b8b040ddeb261029ccbb/filecenter-1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcb9e4f539cb4c0c9b554cda333765000bb595df79004cc17543a66085d57d0f",
          "md5": "acd99acb57974f781b4bac82b5f6a393",
          "sha256": "ebee67f998cd225b52987efabf7b6a3864b71d4645aae2f0072cd4c5784832eb"
        },
        "downloads": -1,
        "filename": "filecenter-1.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "acd99acb57974f781b4bac82b5f6a393",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 157528,
        "upload_time": "2020-05-30T18:13:48",
        "upload_time_iso_8601": "2020-05-30T18:13:48.103345Z",
        "url": "https://files.pythonhosted.org/packages/fc/b9/e4f539cb4c0c9b554cda333765000bb595df79004cc17543a66085d57d0f/filecenter-1.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e69868e0883f25d645d293578746eb7625f0d25f913fa723adc812a7b9a4df6",
          "md5": "1f1a414917fda884236a48e615128380",
          "sha256": "aff20e1332f6403e199ae55139a95a4527b9460483fcb58b4496c072958f904e"
        },
        "downloads": -1,
        "filename": "filecenter-1.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1f1a414917fda884236a48e615128380",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 158876,
        "upload_time": "2020-05-30T18:13:49",
        "upload_time_iso_8601": "2020-05-30T18:13:49.560752Z",
        "url": "https://files.pythonhosted.org/packages/8e/69/868e0883f25d645d293578746eb7625f0d25f913fa723adc812a7b9a4df6/filecenter-1.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fcb9e4f539cb4c0c9b554cda333765000bb595df79004cc17543a66085d57d0f",
        "md5": "acd99acb57974f781b4bac82b5f6a393",
        "sha256": "ebee67f998cd225b52987efabf7b6a3864b71d4645aae2f0072cd4c5784832eb"
      },
      "downloads": -1,
      "filename": "filecenter-1.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "acd99acb57974f781b4bac82b5f6a393",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 157528,
      "upload_time": "2020-05-30T18:13:48",
      "upload_time_iso_8601": "2020-05-30T18:13:48.103345Z",
      "url": "https://files.pythonhosted.org/packages/fc/b9/e4f539cb4c0c9b554cda333765000bb595df79004cc17543a66085d57d0f/filecenter-1.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e69868e0883f25d645d293578746eb7625f0d25f913fa723adc812a7b9a4df6",
        "md5": "1f1a414917fda884236a48e615128380",
        "sha256": "aff20e1332f6403e199ae55139a95a4527b9460483fcb58b4496c072958f904e"
      },
      "downloads": -1,
      "filename": "filecenter-1.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1f1a414917fda884236a48e615128380",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 158876,
      "upload_time": "2020-05-30T18:13:49",
      "upload_time_iso_8601": "2020-05-30T18:13:49.560752Z",
      "url": "https://files.pythonhosted.org/packages/8e/69/868e0883f25d645d293578746eb7625f0d25f913fa723adc812a7b9a4df6/filecenter-1.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}