{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "=============================\r\nDjango REST CAPTCHA Validator\r\n=============================\r\n\r\n.. image:: https://travis-ci.com/Tsuribori/django_rest_captcha_validator.svg?branch=master\r\n    :target: https://travis-ci.com/Tsuribori/django_rest_captcha_validator\r\n\r\nDjango REST CAPTCHA Validator is a Django package that's essentially just CAPTCHA suitable for Django REST framework.\r\n\r\nRequirements\r\n++++++++++++\r\n\r\nA correctly setup cache is required, as the CAPTCHA keys are stored in the cache instead of the database. Django REST CAPTCHA Validator installs all other depedencies on it's own.\r\n\r\nIntallation\r\n+++++++++++\r\n\r\nInstall via pip: ::\r\n\r\n  $ pip install -e git+https://github.com/Tsuribori/django_rest_captcha_validator.git#egg=rest_validator\r\n\r\nAdd rest_validator and `Django Simple Captcha <https://github.com/mbi/django-simple-captcha>`_ to your INSTALLED_APPS: ::\r\n\r\n  INSTALLED_APPS = [\r\n      ...\r\n      'captcha',\r\n      'rest_validator',\r\n      ...\r\n  ]\r\n\r\nRemember to migrate: ::\r\n  \r\n  $ python manage.py migrate\r\n\r\nAdd entries to your urls.py: ::\r\n\r\n  urlpatterns = [\r\n      ...\r\n      path('captcha/', include('captcha.urls')),\r\n      path('validate/', include('rest_validator.urls')),\r\n      ...\r\n  ]\r\n\r\nUsage\r\n+++++\r\n\r\nDjango REST CAPTCHA Validator provides a RestCaptchaField that can be added to a serializer: ::\r\n\r\n  from rest_validator.fields import RestCaptchaField\r\n  from rest_framework import serializers\r\n  from .models import Item\r\n\r\n  class ItemSerializer(serializers.ModelSerializer):\r\n  \r\n      captcha_key = RestCaptchaField()\r\n      \r\n      class Meta:\r\n          model = Item\r\n          fields = ('item_text', 'captcha_key')\r\n\r\n      def create(self, validated_data):\r\n          validated_data.pop('captcha_key')\r\n          instance = super().create(validated_data)\r\n          return instance \r\n\r\n\r\nThe field is used in validating human input. It's important that the \"create\" method of a ModelSerializer is overridden to delete the \"captcha_key\" from the \"validated_data\" dictionary, as otherwise a TypeError occurs due to \"captcha_key\" not being a field on the model.\r\n\r\nThe package also provides a RestCaptchaView that is mapped to the URL given to it, in this case /validate/.  \r\nA GET request to the view will generate a new CAPTCHA challenge, and return a CAPTCHA key value and an URL to the challenge image, for example: ::\r\n\r\n  {\r\n      \"captcha_key\": \"e0411286a3c3f5b57d859747eb8811d3bd023b3a\",\r\n      \"captcha_image\": \"http://localhost:8000/captcha/image/e0411286a3c3f5b57d859747eb8811d3bd023b3a/\"\r\n  }\r\n\r\n\r\nA POST request to the view will accept \"captcha_key\" and \"captcha_value\" fields. The value of \"captcha_value\" must be the value of the solved CAPTCHA that \"captcha_key\" points to. \r\nOn a succesful POST request with valid data the following is returned: ::\r\n\r\n  {\r\n      \"validated\": true\r\n  }\r\n\r\nA request with an expired \"captcha_key\" or invalid \"captcha_value\" will return: ::\r\n\r\n  {\r\n      \"non_field_errors: [\r\n          \"Invalid or expired CAPTCHA\"\r\n      ]\r\n  }\r\n\r\n\r\nAfter a CAPTCHA is succesfully validated, the \"captcha_key\" of the CAPTCHA in question can be used in a serializer with a RestCaptchaField to validate human input. \r\nIf a \"captcha_key\" that is expired or not validated is used in a serializer, the following error occurs during serializer validation: ::\r\n\r\n  {\r\n      \"captcha_key\": [\r\n          \"Invalid or expired CAPTCHA\"\r\n      ]\r\n  }\r\n\r\n\r\nSettings\r\n++++++++\r\n\r\nThere is currently two settings associated with Django REST CAPTCHA Validator. The first is REST_VALIDATOR_CACHE_TIMEOUT. \r\nThis setting, in seconds, controls how long a validated CAPTCHA persists in the cache. The default is 300 seconds. \r\nREST_VALIDATOR_SINGLE_USE controls is a validated \"captcha_key\" valid for only a single use or as long as the validated value exists in the cache, i.e. the duration of REST_VALIDATOR_CACHE_TIMEOUT. The default is True. \r\n\r\nAll other CAPTCHA settings are controlled by settings associated with Django Simple Captcha. List of those can be viewed in their `documentation <https://django-simple-captcha.readthedocs.io/en/latest/advanced.html#configuration-toggles>`_.\r\n\r\n\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sajeeshen/captcha_rest_validator",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "captcha-rest-validator",
    "package_url": "https://pypi.org/project/captcha-rest-validator/",
    "platform": "",
    "project_url": "https://pypi.org/project/captcha-rest-validator/",
    "project_urls": {
      "Homepage": "https://github.com/sajeeshen/captcha_rest_validator"
    },
    "release_url": "https://pypi.org/project/captcha-rest-validator/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django Plugin for validating the CAPTCHA",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10649645,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "982878ebcfd58cdabbd1066524b456b742868c724caf47a77e41c81015f6c082",
          "md5": "27c54abf4dca50db32bf7e33f8c17bbc",
          "sha256": "3817d0a2a3ca8997f125f4cc25ac7a1c4ffaf561c2205bc1abb332169d129894"
        },
        "downloads": -1,
        "filename": "captcha_rest_validator-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "27c54abf4dca50db32bf7e33f8c17bbc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6814,
        "upload_time": "2021-06-15T06:21:46",
        "upload_time_iso_8601": "2021-06-15T06:21:46.787907Z",
        "url": "https://files.pythonhosted.org/packages/98/28/78ebcfd58cdabbd1066524b456b742868c724caf47a77e41c81015f6c082/captcha_rest_validator-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "982878ebcfd58cdabbd1066524b456b742868c724caf47a77e41c81015f6c082",
        "md5": "27c54abf4dca50db32bf7e33f8c17bbc",
        "sha256": "3817d0a2a3ca8997f125f4cc25ac7a1c4ffaf561c2205bc1abb332169d129894"
      },
      "downloads": -1,
      "filename": "captcha_rest_validator-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "27c54abf4dca50db32bf7e33f8c17bbc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6814,
      "upload_time": "2021-06-15T06:21:46",
      "upload_time_iso_8601": "2021-06-15T06:21:46.787907Z",
      "url": "https://files.pythonhosted.org/packages/98/28/78ebcfd58cdabbd1066524b456b742868c724caf47a77e41c81015f6c082/captcha_rest_validator-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}