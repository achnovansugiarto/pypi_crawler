{
  "info": {
    "author": "Fangjun Kuang",
    "author_email": "csukuangfj@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: C++",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "## Introduction\n\nThis project implements the optimization techniques proposed in\n[Improving RNN Transducer Modeling for End-to-End Speech Recognition](https://arxiv.org/abs/1909.12415)\nto reduce the memory consumption for computing transducer loss.\n\n**HINT**: You can find ASR training code using this repo\nin <https://github.com/k2-fsa/icefall>. You can also find\ndecoding code in [icefall](https://github.com/k2-fsa/icefall).\n\n### How does it differ from the RNN-T loss from torchaudio\n\n\nIt produces same output as [torchaudio](https://github.com/pytorch/audio)\nfor the same input, so `optimized_transducer` should be equivalent to\n[torchaudio.functional.rnnt_loss()](https://github.com/pytorch/audio/blob/main/torchaudio/functional/functional.py#L1546).\n\nThis project is more memory efficient (See <https://github.com/csukuangfj/transducer-loss-benchmarking>\nfor benchmark results)\n\nAlso, `torchaudio` accepts only output from `nn.Linear`, but\nwe also support output from `log-softmax` (You can set the option\n`from_log_softmax` to `True` in this case).\n\nIt also supports a **modified** version of transducer. See [below](#modified-transducer) for what\nthe meaning of **modified transducer** is.\n\n### How does it differ from [warp-transducer](https://github.com/HawkAaron/warp-transducer)\n\nIt borrows the methods of computing alpha and beta from `warp-transducer`. Therefore,\n`optimized_transducer` produces the same `alpha` and `beta` as `warp-transducer`\nfor the same input.\n\n\nHowever, `warp-transducer` produces different gradients for CPU and CUDA\nwhen using the same input. See <https://github.com/HawkAaron/warp-transducer/issues/93>.\nI also created a [colab notebook](https://colab.research.google.com/drive/1vMkH8LmiCCOiCo4KTTEcv-NU8_OGn0ie?usp=sharing)\nto reproduce that issue.\n\nThis project produces consistent gradient on CPU and CUDA for the same input, just like\nwhat `torchaudio` is doing. (We borrow the gradient computation formula from `torchaudio`).\n\n`optimized_transducer` uses less memory than that of `warp-transducer`\n(See <https://github.com/csukuangfj/transducer-loss-benchmarking> for benchmark results).\n\nIt also supports a **modified** version of transducer. See [below](#modified-transducer) for what\nthe meaning of **modified transducer** is.\n\n### Modified Transducer\n\nIn **modified transducer**, we limit the maximum number of symbols per frame to 1. The following\nfigure compares the formula for forward and backward procedures between standard transducer\nand modified transducer.\n\n<img src=\"/pic.svg\" width=\"514\" height=\"507.5\" />\n\n**Note**: Modified transducer is proposed independently by [@danpovey](https://github.com/danpovey).\nWe were later informed that the idea already existed in\n[Recurrent Neural Aligner: An Encoder-Decoder Neural Network Model for\nSequence to Sequence Mapping](https://www.isca-speech.org/archive_v0/Interspeech_2017/pdfs/1705.PDF)\n\n\n## Installation\n\nYou can install it via `pip`:\n\n```\npip install optimized_transducer\n```\n\nTo check that `optimized_transducer` was installed successfully, please run\n\n```\npython3 -c \"import optimized_transducer; print(optimized_transducer.__version__)\"\n```\n\nwhich should print the version of the installed `optimized_transducer`, e.g., `1.2`.\n\n### Installation FAQ\n\n### What operating systems are supported ?\n\nIt has been tested on Ubuntu 18.04. It should also work on macOS and other unixes systems.\nIt may work on Windows, though it is not tested.\n\n### How to display installation log ?\n\nUse\n\n```\npip install --verbose optimized_transducer\n```\n\n### How to reduce installation time ?\n\nUse\n\n```\nexport OT_MAKE_ARGS=\"-j\"\npip install --verbose optimized_transducer\n```\n\nIt will pass `-j` to `make`.\n\n### Which version of PyTorch is supported ?\n\nIt has been tested on PyTorch >= 1.5.0. It may work on PyTorch < 1.5.0\n\n\n### How to install a CPU version of `optimized_transducer` ?\n\nUse\n\n```\nexport OT_CMAKE_ARGS=\"-DCMAKE_BUILD_TYPE=Release -DOT_WITH_CUDA=OFF\"\nexport OT_MAKE_ARGS=\"-j\"\npip install --verbose optimized_transducer\n```\n\nIt will pass `-DCMAKE_BUILD_TYPE=Release -DOT_WITH_CUDA=OFF` to `cmake`.\n\n### What Python versions are supported ?\n\nPython >= 3.6 is known to work. It may work for Python 2.7, though it is not tested.\n\n### Where to get help if I have problems with the installation ?\n\nPlease file an issue at <https://github.com/csukuangfj/optimized_transducer/issues>\nand describe your problem there.\n\n## Usage\n\n`optimized_transducer` expects that the output shape of the joint network is\n**NOT** `(N, T, U, V)`, but is `(sum_all_TU, V)`, which is a concatenation\nof 2-D tensors: `(T_1 * U_1, V)`, `(T_2 * U_2, V)`, ..., `(T_N, U_N, V)`.\n**Note**: `(T_1 * U_1, V)` is just the reshape of a 3-D tensor `(T_1, U_1, V)`.\n\n\nSuppose your original joint network looks somewhat like the following:\n\n```python3\nencoder_out = torch.rand(N, T, D) # from the encoder\ndecoder_out = torch.rand(N, U, D) # from the decoder, i.e., the prediction network\n\nencoder_out = encoder_out.unsqueeze(2) # Now encoder out is (N, T, 1, D)\ndecoder_out = decoder_out.unsqueeze(1) # Now decoder out is (N, 1, U, D)\n\nx = encoder_out + decoder_out # x is of shape (N, T, U, D)\nactivation = torch.tanh(x)\n\nlogits = linear(activation) # linear is an instance of `nn.Linear`.\n\nloss = torchaudio.functional.rnnt_loss(\n    logits=logits,\n    targets=targets,\n    logit_lengths=logit_lengths,\n    target_lengths=target_lengths,\n    blank=blank_id,\n    reduction=\"mean\",\n)\n```\n\nYou need to change it to the following:\n\n```python3\nencoder_out = torch.rand(N, T, D) # from the encoder\ndecoder_out = torch.rand(N, U, D) # from the decoder, i.e., the prediction network\n\nencoder_out_list = [encoder_out[i, :logit_lengths[i], :] for i in range(N)]\ndecoder_out_list = [decoder_out[i, :target_lengths[i]+1, :] for i in range(N)]\n\nx = [e.unsqueeze(1) + d.unsqueeze(0) for e, d in zip(encoder_out_list, decoder_out_list)]\nx = [p.reshape(-1, D) for p in x]\nx = torch.cat(x)\n\nactivation = torch.tanh(x)\nlogits = linear(activation) # linear is an instance of `nn.Linear`.\n\nloss = optimized_transducer.transducer_loss(\n    logits=logits,\n    targets=targets,\n    logit_lengths=logit_lengths,\n    target_lengths=target_lengths,\n    blank=blank_id,\n    reduction=\"mean\",\n    from_log_softmax=False,\n)\n```\n\n**Caution**: We used `from_log_softmax=False` in the above example since `logits`\nis the output of `nn.Linear`.\n\n**Hint**: If `logits` is the output of `log-softmax`, you should use `from_log_softmax=True`.\n\nIn most cases, you should pass the output of `nn.Linear` to compute the loss, i.e.,\nuse `from_log_softmax=False`, to save memory.\n\nIf you want to do some operations on the output of `log-softmax` before feeding it\nto `optimized_transducer.transducer_loss()`, `from_log_softmax=True` is helpful in\nthis case. But be aware that this will increase the memory usage.\n\n\nTo use the **modified** transducer, pass an additional argument `one_sym_per_frame=True`\nto `optimized_transducer.transducer_loss()`.\n\nFor more usages, please refer to\n\n  - <https://github.com/csukuangfj/optimized_transducer/blob/master/optimized_transducer/python/optimized_transducer/transducer_loss.py>\n  - <https://github.com/csukuangfj/optimized_transducer/blob/master/optimized_transducer/python/tests/test_cuda.py>\n  - <https://github.com/csukuangfj/optimized_transducer/blob/master/optimized_transducer/python/tests/test_compute_transducer_loss.py>\n  - <https://github.com/csukuangfj/optimized_transducer/blob/master/optimized_transducer/python/tests/test_max_symbol_per_frame.py>\n\n## For developers\n\nAs a developer, you don't need to use `pip install optimized_transducer`.\nTo make development easier, you can use\n\n```\ngit clone https://github.com/csukuangfj/optimized_transducer.git\ncd optimized_transducer\nmkdir build\ncd build\ncmake -DOT_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Release ..\nmake -j\nexport PYTHONPATH=$PWD/../optimized_transducer/python:$PWD/lib:$PYTHONPATH\n```\n\nI usually create a file `path.sh` inside the `build` directory, containing\n\n```\nexport PYTHONPATH=$PWD/../optimized_transducer/python:$PWD/lib:$PYTHONPATH\n```\n\nso what you need to do is\n```\ncd optimized_transducer/build\nsource path.sh\n\n# Then you are ready to run Python tests\npython3 optimized_transducer/python/tests/test_compute_transducer_loss.py\n\n# You can also use \"import optimized_transducer\" in your Python projects\n```\n\nTo run all Python tests, use\n\n```\ncd optimized_transducer/build\nctest --output-on-failure\n```\n\nAlternatively one can \"make\" all available tests\n\n```\nmake -j test\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/csukuangfj/optimized_transducer",
    "keywords": "",
    "license": "Apache licensed, as found in the LICENSE file",
    "maintainer": "",
    "maintainer_email": "",
    "name": "optimized-transducer",
    "package_url": "https://pypi.org/project/optimized-transducer/",
    "platform": null,
    "project_url": "https://pypi.org/project/optimized-transducer/",
    "project_urls": {
      "Homepage": "https://github.com/csukuangfj/optimized_transducer"
    },
    "release_url": "https://pypi.org/project/optimized-transducer/1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14090190,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e96fdd120266106a4ca5f9353e1334f9da56b196f348512701852b273723cf39",
          "md5": "362975aa7f5d544a99441bbd242e678d",
          "sha256": "2a9192b65d0d7cf5aa65f0f9e7664084fe5281d6fc60b0b53d52cd54fe281008"
        },
        "downloads": -1,
        "filename": "optimized_transducer-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "362975aa7f5d544a99441bbd242e678d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2383,
        "upload_time": "2021-12-23T13:54:07",
        "upload_time_iso_8601": "2021-12-23T13:54:07.694586Z",
        "url": "https://files.pythonhosted.org/packages/e9/6f/dd120266106a4ca5f9353e1334f9da56b196f348512701852b273723cf39/optimized_transducer-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "438a55363b73c4ae90c7e7ade51c3353db46337ecd4e1db7ed7f0521f0b44147",
          "md5": "9c8e3f00c60ca2edd3a156c465182337",
          "sha256": "b71d1985df18d96dddd131aec69c2159c1bb626cbb929e1a3731a8b1d0cbb499"
        },
        "downloads": -1,
        "filename": "optimized_transducer-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "9c8e3f00c60ca2edd3a156c465182337",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8551,
        "upload_time": "2021-12-28T09:47:11",
        "upload_time_iso_8601": "2021-12-28T09:47:11.809816Z",
        "url": "https://files.pythonhosted.org/packages/43/8a/55363b73c4ae90c7e7ade51c3353db46337ecd4e1db7ed7f0521f0b44147/optimized_transducer-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f6c0f8d5ee42424d8b5e3461f9e4c10bdf0812e673f9e52001ecd8651de1407",
          "md5": "8523bb8bceb8e9df524084166a823fef",
          "sha256": "8270e3211e7537179e04fc731e4bf28c8d7c5edf01cb6eb03f8bfe424569ca40"
        },
        "downloads": -1,
        "filename": "optimized_transducer-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8523bb8bceb8e9df524084166a823fef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40513,
        "upload_time": "2021-12-28T09:51:45",
        "upload_time_iso_8601": "2021-12-28T09:51:45.538654Z",
        "url": "https://files.pythonhosted.org/packages/4f/6c/0f8d5ee42424d8b5e3461f9e4c10bdf0812e673f9e52001ecd8651de1407/optimized_transducer-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c1b5deab90a308e1a69b4c048eab26c5a65bb71c8466924beca183273514f59",
          "md5": "2726a75a11cd9eeecfea689ed92d2fca",
          "sha256": "3f3b9cadeab35aee3d84ce26949167fa3f5679dd3141079b93a689e91595920d"
        },
        "downloads": -1,
        "filename": "optimized_transducer-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2726a75a11cd9eeecfea689ed92d2fca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38612,
        "upload_time": "2021-12-28T13:05:31",
        "upload_time_iso_8601": "2021-12-28T13:05:31.867477Z",
        "url": "https://files.pythonhosted.org/packages/0c/1b/5deab90a308e1a69b4c048eab26c5a65bb71c8466924beca183273514f59/optimized_transducer-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6ae83307fa64b646efc4040c6f7800a2165379b2ec1189a175d484b063dac21",
          "md5": "3959dd20cb7b2535e1e6cdd0f439897e",
          "sha256": "8c746adf7161922452b04419944773c31841edebfccdc75a27e3fd0d3396ac84"
        },
        "downloads": -1,
        "filename": "optimized_transducer-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3959dd20cb7b2535e1e6cdd0f439897e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39460,
        "upload_time": "2021-12-30T02:37:27",
        "upload_time_iso_8601": "2021-12-30T02:37:27.135505Z",
        "url": "https://files.pythonhosted.org/packages/a6/ae/83307fa64b646efc4040c6f7800a2165379b2ec1189a175d484b063dac21/optimized_transducer-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f10079d77e6dca350d98bbd2440f6daec50b632cf47e81490cfd2891b270173",
          "md5": "d1ab23fc41400e3a9c4b0effda786a33",
          "sha256": "4865100849ba1406612fc13bee9250b8f7cf15c7da64d833c606bd574a9f7265"
        },
        "downloads": -1,
        "filename": "optimized_transducer-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d1ab23fc41400e3a9c4b0effda786a33",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 42161,
        "upload_time": "2021-12-31T01:06:33",
        "upload_time_iso_8601": "2021-12-31T01:06:33.669148Z",
        "url": "https://files.pythonhosted.org/packages/4f/10/079d77e6dca350d98bbd2440f6daec50b632cf47e81490cfd2891b270173/optimized_transducer-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12e445d5ed78b0b65fd6a6b2a990185b8562613e4030c5608710346d0a831da1",
          "md5": "983316341c0ff1a3edda583c323063c8",
          "sha256": "d0d39eb1231ff2fcad2385a4f4414a4a9c50bed5c017025682e578ea3599cba4"
        },
        "downloads": -1,
        "filename": "optimized_transducer-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "983316341c0ff1a3edda583c323063c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 47534,
        "upload_time": "2022-01-20T03:38:45",
        "upload_time_iso_8601": "2022-01-20T03:38:45.251857Z",
        "url": "https://files.pythonhosted.org/packages/12/e4/45d5ed78b0b65fd6a6b2a990185b8562613e4030c5608710346d0a831da1/optimized_transducer-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c57a39fef57e1f0a09fcca8ca239eb60320c1f6b47da6570f5743e93919ce13",
          "md5": "40613874f411f8e937aa59811e5c5fbf",
          "sha256": "fba52ff27b4eabe3001a52a209f91f6fbc8d1f892f70a9b40c2f214687edfdaa"
        },
        "downloads": -1,
        "filename": "optimized_transducer-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "40613874f411f8e937aa59811e5c5fbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46439,
        "upload_time": "2022-06-10T03:28:34",
        "upload_time_iso_8601": "2022-06-10T03:28:34.046539Z",
        "url": "https://files.pythonhosted.org/packages/8c/57/a39fef57e1f0a09fcca8ca239eb60320c1f6b47da6570f5743e93919ce13/optimized_transducer-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c57a39fef57e1f0a09fcca8ca239eb60320c1f6b47da6570f5743e93919ce13",
        "md5": "40613874f411f8e937aa59811e5c5fbf",
        "sha256": "fba52ff27b4eabe3001a52a209f91f6fbc8d1f892f70a9b40c2f214687edfdaa"
      },
      "downloads": -1,
      "filename": "optimized_transducer-1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "40613874f411f8e937aa59811e5c5fbf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 46439,
      "upload_time": "2022-06-10T03:28:34",
      "upload_time_iso_8601": "2022-06-10T03:28:34.046539Z",
      "url": "https://files.pythonhosted.org/packages/8c/57/a39fef57e1f0a09fcca8ca239eb60320c1f6b47da6570f5743e93919ce13/optimized_transducer-1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}