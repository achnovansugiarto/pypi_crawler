{
  "info": {
    "author": "Ram Prakash Jayapalan",
    "author_email": "ramp16888@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "File Validation\n----------------\n\nPython file validation module for structured text files.\n\nThis module runs through the rules defined within a config file and validates the data based on the given rules. Complex rules can be defined using regex expressions without boundaries.\n\nSystem Requirements\n--------------------\n\n**Operating System**: Windows/Linux/Mac\n\n**Python version**: 3.7 and above\n\nUsage\n-----\n\nThe module is available as a part of PyPI and can be easily installed\nusing ``pip``\n\n::\n\n    pip install filevalidation\n\nCreate a config file with ``.ini`` extension and specify the rules based off the below template\n\n.. code-block:: yaml\n\n    # This template can be used as the base to generate configuration files as required.\n    # Do not use this configuration template directly for validation.\n    # Use \"#\" or \";\" for commenting lines within the configuration file. Do not comment section headers (enclosed within [])\n    # By default : key:value pairs are case sensitive, unless explicitly specified.\n\n    [global.settings]\n\n    # Column delimiter in file\n    Delimiter = \\t\n\n    # Expected file encoding\n    Encoding =  utf-8\n\n    [file.rules]\n\n    # Expected filename. For complex filename, use regex pattern\n    Filename = <filename>_\\d{8}.txt\n\n    # The below message is displayed if the file failed the filename validation test\n    FilenameErrorMessage = The given file did not meet the expected filename or format.\n\n    [header.rules]\n\n    # Whether the header needs to be validated across the specified rules; yes/no\n    ValidateHeader = yes\n\n    # Treat header as case sensitive; yes/no\n    CaseSensitive = yes\n\n    # The below message is displayed if the file failed the header validation test where it could not find a match for the given header(s)\n    # {headername} placeholder is dynamically replaced with the appropriate expected header during runtime and is optional. This placeholder cannot be used elsewhere.\n    HeaderErrorMessage = Could not find a match for the header \"{headername}\"\n\n    # Match header count to that of the given header; yes/no\n    MatchHeaderCount = yes\n\n    # The below message is displayed if the file failed the header validation test where the given header count and the expected header count do not match.\n    # {requiredcount} placeholder is dynamically replaced with the expected header count during runtime\n    # {availablecount} placeholder is dynamically replaced with the available header count from the file during runtime and is optional. This placeholder cannot be used elsewhere.\n    HeaderCountErrorMessage = Header count does not match (required : {requiredcount} | available : {availablecount})\n\n    [header]\n\n    # Expected headers here. Each header in a new line\n    header_1\n    header_2\n    header_n\n\n\n    [column.rules]\n\n    # Whether the column needs to be validated across the specified rules; yes/no\n    ValidateColumn = yes\n\n\n    [EmptyCheck]\n\n    # [EmptyCheck] can be used to valiate whether the given value is Empty or not\n    # The specified field/column records will be flagged if their value is empty or blank\n    # This check trims out any leading/trailing white spaces before validation\n    # Specify each FieldName to be validated in new line\n    # Ex: FieldName1\n    #     FieldName2\n\n    # Note: If a field/column is not part of empty check, an empty/blank value is considered a valid value and other checks are skipped.\n\n    header_n\n\n\n    [EmptyCheck.description]\n\n    # Description to describe in short about the check performed. This is included in the final report\n    # {fieldname} placeholder is dynamically replaced with the appropriate expected header during runtime and is optional.\n    Description = Empty check description here.\n\n    [NumericCheck]\n\n    # [NumericCheck] can be used to valiate whether the given value is a Number\n    # The specified field/column records will be flagged if their value is not a number\n    # This validates to True if the value is integer/decimal irrespective of signed/unsigned\n    # Specify each FieldName to be validated in new line\n    # Ex: FieldName1\n    #     FieldName2\n\n    [NumericCheck.description]\n\n    # Description to describe in short about the check performed. This is included in the final report\n    # {fieldname} placeholder is dynamically replaced with the appropriate expected header during runtime and is optional.\n    Description = Numeric check description here.\n\n    [IntegerCheck]\n\n    # [IntegerCheck] can be used to valiate whether the given number is Integer or not\n    # The specified field/column records will be flagged if their value is not an integer\n    # This validates to True if the value is a positive/negative integer value\n    # Specify each FieldName to be validated in new line\n    # Ex: FieldName1\n    #     FieldName2\n\n    [IntegerCheck.description]\n\n    # Description to describe in short about the check performed. This is included in the final report\n    # {fieldname} placeholder is dynamically replaced with the appropriate expected header during runtime and is optional.\n    Description = Integer check description here.\n\n    [DecimalCheck]\n\n    # [DecimalCheck] can be used to valiate whether the given number is Decimal or not\n    # The specified field/column records will be flagged if their value is not a decimal\n    # This validates to True if the value is a positive/negative decimal value\n    # Specify each FieldName to be validated in new line\n    # Ex: FieldName1\n    #     FieldName2\n\n    [DecimalCheck.description]\n\n    # Description to describe in short about the check performed. This is included in the final report\n    # {fieldname} placeholder is dynamically replaced with the appropriate expected header during runtime and is optional.\n    Description = Decimal check description here.\n\n    [FormatCheck]\n\n    # [FormatCheck] validates the value on the given regex format.\n    # The specified field/column records will be flagged if their value is not of expected format\n    # Optionally, count can be specified to match the expected count of occurence of the given pattern\n    # Optionally, ignorecase can be set to True or False to manage case-sensitivity on the regex pattern\n    # Ex: FieldName = {\"pattern\": \"[A-Za-z]\", \"count\": 1}\n    # Ex: FieldName = {\"pattern\": \"[A-Za-z]\"}\n    # Ex: FieldName = {\"pattern\": \"[A-Za-z]\", \"ignorecase\": True}\n\n    header_n = {\"pattern\": \"^(C|B|X)$\"}\n\n    [FormatCheck.description]\n\n    # Description to describe in short about the check performed. This is included in the final report\n    # {fieldname} placeholder is dynamically replaced with the appropriate expected header during runtime and is optional.\n    Description = Format check description here.\n\n    [LengthCheck]\n\n    # [LengthCheck] validates if the value falls between the min and max values. Here min value is optional\n    # The specified field/column records will be flagged if their value is not of expected length\n    # This check trims out any leading/trailing white spaces before validation\n    # Ex: FieldName = {\"min\": 2, \"max\": 10}\n    # Ex: FieldName = {\"max\": 255}\n    # key:value is case-sensitive\n\n    header_n = {\"min\": 1, \"max\": 1}\n\n\n    [LengthCheck.description]\n\n    # Description to describe in short about the check performed. This is included in the final report\n    # {fieldname} placeholder is dynamically replaced with the appropriate expected header during runtime and is optional.\n    Description = Length check description here.\n\nWith the config rules in place, create an instance of ``ValidateFile`` class and pass the path to the config file and source file as args. Then call the ``getresult()`` method which will return the validation summary as a python dictionary.\n\n.. code-block:: python\n\n    from validatefile.main import ValidateFile\n\n    val = ValidateFile(configfile='/path/to/config/file', sourcefile='/path/to/source/file')\n\n    res = val.getresult(outputdir=None)\n\n    print(res)\n\nWhen ``outputdir`` (path to a directory) is specified in ``getresult()``, validation results are written to an output file (tab delimited text file) in the given directory. This output file along with the source columns will contain 2 additional columns - ``_is_error`` and ``_error_desc``\nwhere\n\n* ``_is_error`` - (bool) This flag will be set to ``1`` if the line item / record failed any of the validation with respect to the given rules\n\n* ``_error_desc`` - (str) Contains description of the error that caused the ``_is_error`` flag to appear as ``1``\n\n.. code-block:: python\n\n    from validatefile.main import ValidateFile\n\n    val = ValidateFile(configfile='/path/to/config/file', sourcefile='/path/to/source/file')\n\n    res = val.getresult(outputdir='/path/to/output/dir')\n\n    print(res)\n\nSample outputs:\n\n* No errors\n\n.. code-block:: python\n\n    {'Results': {'TotalRecordsAnalysed': 1000000, 'RecordsPassed': 1000000, 'RecordsFailed': 0, 'ErrorDetails': [], 'OutputFile': '/path/to/output/file.txt'}}\n\n* Contains errors\n\n.. code-block:: python\n\n    {'Results': {'TotalRecordsAnalysed': 100, 'RecordsPassed': 0, 'RecordsFailed': 100, 'ErrorDetails': [{'FormatCheck': 100}], 'OutputFile': '/path/to/output/file.txt'}}\n\n\n.. code-block:: python\n\n    {'Results': {'TotalRecordsAnalysed': 10, 'RecordsPassed': 0, 'RecordsFailed': 10, 'ErrorDetails': [{'Level': 'Filename', 'Error': 'The given file did not meet the expected filename or format.'}, {'FormatCheck': 10}], 'OutputFile': '/path/to/output/file.txt'}}\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/ram-jayapalan/file-validation/archive/v1.0.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ram-jayapalan/file-validation",
    "keywords": "file validation validate",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "filevalidation",
    "package_url": "https://pypi.org/project/filevalidation/",
    "platform": "",
    "project_url": "https://pypi.org/project/filevalidation/",
    "project_urls": {
      "Download": "https://github.com/ram-jayapalan/file-validation/archive/v1.0.0.tar.gz",
      "Homepage": "https://github.com/ram-jayapalan/file-validation"
    },
    "release_url": "https://pypi.org/project/filevalidation/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Module to validate file",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8398297,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a86c88996e35173ab9096d6994f3ada52426b0d85f93746df7479721bc3691b",
          "md5": "225aedf03bb963394778c87c7f7d4a85",
          "sha256": "ce7c02087ce903786ef2ab9c70be5a528670ef07152d051bcd862d6ece742837"
        },
        "downloads": -1,
        "filename": "filevalidation-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "225aedf03bb963394778c87c7f7d4a85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8234,
        "upload_time": "2020-10-13T02:09:34",
        "upload_time_iso_8601": "2020-10-13T02:09:34.234545Z",
        "url": "https://files.pythonhosted.org/packages/6a/86/c88996e35173ab9096d6994f3ada52426b0d85f93746df7479721bc3691b/filevalidation-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a86c88996e35173ab9096d6994f3ada52426b0d85f93746df7479721bc3691b",
        "md5": "225aedf03bb963394778c87c7f7d4a85",
        "sha256": "ce7c02087ce903786ef2ab9c70be5a528670ef07152d051bcd862d6ece742837"
      },
      "downloads": -1,
      "filename": "filevalidation-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "225aedf03bb963394778c87c7f7d4a85",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8234,
      "upload_time": "2020-10-13T02:09:34",
      "upload_time_iso_8601": "2020-10-13T02:09:34.234545Z",
      "url": "https://files.pythonhosted.org/packages/6a/86/c88996e35173ab9096d6994f3ada52426b0d85f93746df7479721bc3691b/filevalidation-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}