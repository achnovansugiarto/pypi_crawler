{
  "info": {
    "author": "Kaname Miura",
    "author_email": "miukana21@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "vbmc\n========================\nvbmc is under development.\n\nThis project uses voxel-based Monte Carlo simulations to calculate light transport in diffuse media.\n\nINSTALLATION\n==============\n\n::\n\n $ pip install vbmc\n\n\nUSAGE\n============\n\n.. code:: python\n\n  from vbmc import vbmc\n  from vbmc import angularyResolved,spatiallyResolved\n  import numpy as np\n  import matplotlib.pyplot as plt\n\n\n  # This is sample code for vbmc.\n  #\n  # vbmc can compute diffuse light transport\n  # for any voxel model. The voxel model is\n  # a 3-dimensional array, and integer voxel\n  # values from 0 to 255 are allowed. The voxel\n  # values must match the array number of the\n  # optical properties, and the optical properties\n  # of the model can be set with the set_params\n  # function.\n  #\n  # This sample file shows an example calculation\n  # for a multilayered medium with the following\n  # optical properties.\n  #\n  # | Layer | µ_a [/cm] |  µ_s [/cm] |  g  |   n   |   d   |\n  # |   1   |    1.     |     100    | 0.9 |  1.37 |  0.1  |\n  # |   2   |    1.     |     10     | 0.  |  1.37 |  0.1  |\n  # |   3   |    1.     |     10     | 0.7 |  1.37 |  0.2  |\n  #\n  # Here, the refractive index of air is assumed to be 1.\n  # and the medium size in the x-y direction is assumed\n  # to be semi-infinite.　The photon number was set to 1e6.\n  #\n  # Please refer to the \"docs/mcml_result_multilayer_rdr_tdr.csv\"\n  # or the following paper for the MCML results of the calculations.\n  #\n  # Reference\n  # Wang and Jacques,\"Monte Carlo Modeling of Light Transport\n  # in Multi-layered Tissues in Standard C Lihong\",(1992)\n  # URL: https://omlc.org/software/mc/mcml/MCman.pdf\n\n  nPh = 1e6\n  model = vbmc(nPh = nPh)\n  params = {\n          'n':[1.37,1.37,1.37],\n          'n_air':1.,\n          'ma':[1,1,2],\n          'ms':[100,10,10],\n          'g':[0.9,0.,0.7],\n          'end_point':False,\n          'voxel_space':0.1,\n  }\n  voxel_model = np.zeros((1001,1001,4))\n  voxel_model[:,:,1] = 1\n  voxel_model[:,:,2:] = 2\n\n  # Voxel model setting\n  model.set_model(voxel_model)\n  # optical properties setting\n  model.set_params(**params)\n  # model build\n  model.build()\n\n  # start vbmc calculation\n  model.start()\n\n  # get_result()\n  #\n  # The result is in dictionary format with keys \"p\", \"v\",\n  # and \"w\", where p is a position vector, v is a direction\n  # vector, and w is a photon weight.\n  #\n  # The shape of p and v is (number of photons, 3), and the\n  # one-dimensional elements of the array are the xyz\n  # components of the vector. For example, p[:,0] is the x\n  # component of p, p[:,1] is the y component of p, and p[:,2]\n  # is the z component of p.\n  # On the other hand, the shape of w is a one-dimensional\n  # array of (number of photons).\n  res = model.get_result()\n\n  # Separation of diffuse reflection and transmission\n  # For a medium with a semi-infinite size in the xy direction,\n  # the direction vector in the final result implies reflection\n  # if it is in the negative z direction and transmission if it\n  # is in the positive z direction.\n\n  Rd_index = np.where(res['v'][:,2] < 0)[0] # Index of diffuse reflected photons\n  Td_index = np.where(res['v'][:,2] > 0)[0] # Index of diffuse transmitted photons\n\n  ##### View Results #####\n  #\n  # Spatially resolved diffuse reflectance and transmittance\n  #\n  dr = 0.005\n  nn = 100\n  r,Rd_r = spatiallyResolved(\n      res['p'][Rd_index],res['w'][Rd_index],nPh,nn,dr\n  )\n  r,Td_r = spatiallyResolved(\n      res['p'][Td_index],res['w'][Td_index],nPh,nn,dr\n  )\n\n  plt.plot(r,Td_r,'-', c = 'k')\n  plt.yscale('log')\n  plt.title('Spatially resolved diffuse transmittance')\n  plt.xlabel('r [cm]')\n  plt.ylabel('$T_d(r)$ $[cm^{-2}]$')\n  plt.show()\n\n  plt.plot(r,Rd_r,'-', c = 'k')\n  plt.yscale('log')\n  plt.title('Spatially resolved diffuse reflectance')\n  plt.xlabel('r [cm]')\n  plt.ylabel('$R_d(r)$ $[cm^{-2}]$')\n  plt.show()\n\n  #\n  # Angulary resolved diffuse reflectance and transmittance\n  #\n  nn = 30\n  alpha,Rd_a = angularyResolved(\n      res['v'][Rd_index],res['w'][Rd_index],nPh,nn\n  )\n  alpha,Td_a = angularyResolved(\n      res['v'][Td_index],res['w'][Td_index],nPh,nn\n  )\n\n  plt.plot(alpha,Rd_a,'.',c = 'k')\n  plt.title('Angulary resolved diffuse reflectance')\n  plt.xlabel('Exit angle α [rad]')\n  plt.ylabel('$R_d(α)$ $[sr^{-1}]$')\n  plt.show()\n\n  plt.plot(alpha,Td_a,'.', c = 'k')\n  plt.title('Angulary resolved diffuse transmittance')\n  plt.xlabel('Exit angle α [rad]')\n  plt.ylabel('$T_d(α)$ $[sr^{-1}]$')\n  plt.show()\n\nNOTE\n============\n\nReference\n\n`K.Miura et.al., \"Optical bone densitometry robust to variation of soft tissue using machine learning techniques: validation by Monte Carlo simulation\", JBO Vo.27(5),(2022) <https://www.ncbi.nlm.nih.gov/pmc/articles/PMC9116466/>`_.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kaname21Miura/vbmc.git",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vbmc",
    "package_url": "https://pypi.org/project/vbmc/",
    "platform": null,
    "project_url": "https://pypi.org/project/vbmc/",
    "project_urls": {
      "Homepage": "https://github.com/Kaname21Miura/vbmc.git"
    },
    "release_url": "https://pypi.org/project/vbmc/0.0.0/",
    "requires_dist": [
      "numpy",
      "matplotlib",
      "numba"
    ],
    "requires_python": "",
    "summary": "CPU version of Voxel-based Monte Carlo simulation",
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16386117,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46e9cc2b04a5919214f7f1783943688b694537ea63bd1a68b341f2760f9b36ca",
          "md5": "9048b27ec7a90c479b7b1daa75c6dad6",
          "sha256": "bb6b15e41a28afa079497d0de086b359b44d39203619e0ca4f5d1de7df98a17b"
        },
        "downloads": -1,
        "filename": "vbmc-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9048b27ec7a90c479b7b1daa75c6dad6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11935,
        "upload_time": "2023-01-11T06:51:41",
        "upload_time_iso_8601": "2023-01-11T06:51:41.904857Z",
        "url": "https://files.pythonhosted.org/packages/46/e9/cc2b04a5919214f7f1783943688b694537ea63bd1a68b341f2760f9b36ca/vbmc-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25d2695e88ace702e53fbab2bb96296f2edba0c7be63729aa39fa14316e0097b",
          "md5": "762c27369641097b717c3ca6ad56dfc4",
          "sha256": "7e6a69f5c023ef9c504b65880401850ae86f9c6fa4c698bbfdb6a60ed029bd0d"
        },
        "downloads": -1,
        "filename": "vbmc-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "762c27369641097b717c3ca6ad56dfc4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12834,
        "upload_time": "2023-01-11T06:51:44",
        "upload_time_iso_8601": "2023-01-11T06:51:44.146989Z",
        "url": "https://files.pythonhosted.org/packages/25/d2/695e88ace702e53fbab2bb96296f2edba0c7be63729aa39fa14316e0097b/vbmc-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46e9cc2b04a5919214f7f1783943688b694537ea63bd1a68b341f2760f9b36ca",
        "md5": "9048b27ec7a90c479b7b1daa75c6dad6",
        "sha256": "bb6b15e41a28afa079497d0de086b359b44d39203619e0ca4f5d1de7df98a17b"
      },
      "downloads": -1,
      "filename": "vbmc-0.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9048b27ec7a90c479b7b1daa75c6dad6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11935,
      "upload_time": "2023-01-11T06:51:41",
      "upload_time_iso_8601": "2023-01-11T06:51:41.904857Z",
      "url": "https://files.pythonhosted.org/packages/46/e9/cc2b04a5919214f7f1783943688b694537ea63bd1a68b341f2760f9b36ca/vbmc-0.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25d2695e88ace702e53fbab2bb96296f2edba0c7be63729aa39fa14316e0097b",
        "md5": "762c27369641097b717c3ca6ad56dfc4",
        "sha256": "7e6a69f5c023ef9c504b65880401850ae86f9c6fa4c698bbfdb6a60ed029bd0d"
      },
      "downloads": -1,
      "filename": "vbmc-0.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "762c27369641097b717c3ca6ad56dfc4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12834,
      "upload_time": "2023-01-11T06:51:44",
      "upload_time_iso_8601": "2023-01-11T06:51:44.146989Z",
      "url": "https://files.pythonhosted.org/packages/25/d2/695e88ace702e53fbab2bb96296f2edba0c7be63729aa39fa14316e0097b/vbmc-0.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}