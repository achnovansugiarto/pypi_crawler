{
  "info": {
    "author": "Maximilian Knespel",
    "author_email": "mxmlnkn@github.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3"
    ],
    "description": "# C++ BK-Tree\n\n[![PyPI version](https://badge.fury.io/py/cppbktree.svg)](https://badge.fury.io/py/cppbktree)\n[![Downloads](https://pepy.tech/badge/cppbktree/month)](https://pepy.tech/project/cppbktree/month)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](http://opensource.org/licenses/MIT)\n[![Build Status](https://travis-ci.org/mxmlnkn/cppbktree.svg?branch=master)](https://travis-ci.com/mxmlnkn/cppbktree)\n\nThis module provides a BK-Tree class written in C++ to hopefully better speed than pure-python solutions.\n\n\n# Installation\n\nYou can simply install it from PyPI:\n```\npip install cppbktree\n```\n\n# Usage\n\n```python3\nfrom cppbktree import BKTree\n\ntree = BKTree( [ bytes( [ x ] ) for x in [0, 4, 5, 14] ] )\ntree.add( bytes( [ 15 ] ) )\nprint( tree.find( 13, 1 ) )\n```\n\nBecause of the Python/C++ interface, currently this BK-Tree is limited to only hamming distances of bytearrays.\nPull requests are welcome.\n\n# Benchmarks\n\nThe benchmark consists of inserting a varying amount of random 64-bit elements into the tree and then querying a value at varying distances.\nThis is done five times to get a hint for the standard deviation as is plotted with error bars.\n\n## Comparison pybktree vs. cppbktree\n\n![Comparison pybktree cppbktree](results/compare-scalings-pybktree-cppbktree.png)\n\nIn this log-log plot, it can be seen that the lookups and creations follow various sublinear power laws.\nInserting one element in a tree of depth $d$ should roughly take `O(log(d))` hamming distance evaluations.\nAssuming an evenly distributed tree, the number of elements is given as `N=d^n` where `n` is the maximum distance the metric returns.\nFor the hamming distance, n is the number of bits of the hash.\nSolving this for the depth, gives `d=log N / log n`.\nIf you are only interested in the dependence to `N`, then `log n` can be seen as a small constant factor.\nHenceforth, the tree creation should follow `O(\\sum_i^N \\log i) = O( log( \\product_i^N i )  ) = O(log(N!))`.\nUsing the Stirling's approximation for the faculty, we get `O(log(sqrt(N) N^N)) = O(log(N^(N+1/2))) = O(N log(N))`.\nHowever, `log(N)` is a very slow growing function, so the tree creation looks almost a linear function.\n\nBoth, pybktree and cppbktree, have some jumps at roughly 1e4 elements but only cppbktree as a second jump at ~2e6 elements but only when looking up elements with distance <= 16.\nI can't explain these jumps.\nThey almost look like memory caching effects.\nBecause of these jumps, the effective speedups for 10M elements varies quite a lot depending on the lookup distance.\nOnly the tree creation scaling is a very smooth curve except for some outliers for smaller runtimes.\n\nHere are the fitted power laws to the curves from the plot:\n\n| operation             | pybktree        | cppbktree\n|-----------------------|:---------------:|:---------------:|\n| Tree creation         | 1.12e-06 N^1.12 | 4.92e-07 N^1.05 |\n| Distance threshold 0  | 2.04e-06 N^0.27 | 4.19e-07 N^0.27 |\n| Distance threshold 1  | 2.06e-06 N^0.37 | 2.77e-07 N^0.38 |\n| Distance threshold 2  | 1.68e-06 N^0.51 | 1.76e-07 N^0.54 |\n| Distance threshold 4  | 1.36e-06 N^0.73 | 1.11e-07 N^0.74 |\n| Distance threshold 8  | 1.10e-06 N^0.92 | 7.47e-08 N^0.94 |\n| Distance threshold 16 | 1.05e-06 N^0.99 | 4.93e-08 N^1.05 |\n\nAnd here are the timings and speedups for operations on a tree with 10 million 64-bit elements:\n\n| Operation | pybktree / s | cppbktree / s | Speedup |\n|-----------------------|:--------:|:--------:|:----:|\n| Tree creation time    | 88.53    | 19.35    | 4.6  |\n| Distance threshold 0  | 2.42e-04 | 2.38e-05 | 10.2 |\n| Distance threshold 1  | 7.49e-04 | 1.55e-04 | 4.8  |\n| Distance threshold 2  | 8.55e-03 | 1.61e-03 | 5.3  |\n| Distance threshold 4  | 2.21e-01 | 3.73e-02 | 5.9  |\n| Distance threshold 8  | 4.22     | 0.60     | 7.1  |\n| Distance threshold 16 | 11.5     | 6.93     | 1.7  |\n\nThe speedups of cppbktree over pybktree vary between ~2 and 10.\nFor smaller trees, the speedups would be even better.\nOnly the tree creation time speedup is quite independent of the tree size at roughly 5.\n\n\n## Comparison pybktree vs. vptree\n\nAt least in this benchmark with only 64-bit hashes and a hamming distance as metric and at least with this pure python implementation of a VP-Tree, the results are quite disappointing.\nThe vptree module is almost always slower.\nThe lookups are actually quite similar to pybktree (meaning still slower than lookups with cppbktree) but the tree creation is a full magnitude slower.\nFor the 100k elements, this results in pybktree being 7.7 times faster than vptree.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mxmlnkn/cppbktree",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cppbktree",
    "package_url": "https://pypi.org/project/cppbktree/",
    "platform": "",
    "project_url": "https://pypi.org/project/cppbktree/",
    "project_urls": {
      "Homepage": "https://github.com/mxmlnkn/cppbktree"
    },
    "release_url": "https://pypi.org/project/cppbktree/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "C++ Implementation of a Burkhard-Keller Tree (BK-Tree)",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7634430,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "483ea9b35496c22d9dde5819d8cb1abd34d2eaa03655deb3b823dbd56b8b7051",
          "md5": "8bccb4faba2244080ecd4c07e43cea99",
          "sha256": "07ff1cf8926ef0855dcfe1d9bcea6ed872097ffbd4a8c6eb5727493188278671"
        },
        "downloads": -1,
        "filename": "cppbktree-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8bccb4faba2244080ecd4c07e43cea99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50082,
        "upload_time": "2020-07-05T18:13:01",
        "upload_time_iso_8601": "2020-07-05T18:13:01.706742Z",
        "url": "https://files.pythonhosted.org/packages/48/3e/a9b35496c22d9dde5819d8cb1abd34d2eaa03655deb3b823dbd56b8b7051/cppbktree-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "483ea9b35496c22d9dde5819d8cb1abd34d2eaa03655deb3b823dbd56b8b7051",
        "md5": "8bccb4faba2244080ecd4c07e43cea99",
        "sha256": "07ff1cf8926ef0855dcfe1d9bcea6ed872097ffbd4a8c6eb5727493188278671"
      },
      "downloads": -1,
      "filename": "cppbktree-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8bccb4faba2244080ecd4c07e43cea99",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 50082,
      "upload_time": "2020-07-05T18:13:01",
      "upload_time_iso_8601": "2020-07-05T18:13:01.706742Z",
      "url": "https://files.pythonhosted.org/packages/48/3e/a9b35496c22d9dde5819d8cb1abd34d2eaa03655deb3b823dbd56b8b7051/cppbktree-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}