{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# QuasiQueue\n\nQuasiQueue is a MultiProcessing library for Python that makes it super easy to have long running MultiProcess jobs. QuasiQueue handles process creation and cleanup, signal management, cross process communication, and all the other garbage that makes people hate dealing with multiprocessing.\n\nQuasiQueue works by splitting the work into two components- the main process whose job it is to feed a Queue with work, and then read processes that take work off of the Queue to run. All the developers have to do is create two functions-\n\n* `writer` is called when the queue gets low. It should return an iterable (list, generator) that QuasiQueue uses to grow the multiprocess Queue.\n* `reader` is called once for each item in the Queue. It runs in a completely different process from the `writer`.\n\n```mermaid\nflowchart LR\n  writer(writer)-->queue((queue))\n  queue-->reader1(reader)\n  queue-->reader2(reader)\n  queue-->reader3(reader)\n  queue-->reader4(reader)\n```\n\nThese functions can be as simple or complex as you need.\n\n```python\nimport asyncio\n\nfrom quasiqueue import QuasiQueue\n\nasync def writer(desired_items: int):\n  \"\"\"Feeds data to the Queue when it is low.\n  \"\"\"\n  return xrange(0, desired_items)\n\n\nasync def reader(identifier: int|str):\n  \"\"\"Receives individual items from the queue.\n\n  Args:\n      identifier (int | str): Comes from the output of the Writer function\n  \"\"\"\n  print(f\"{identifier}\")\n\n\nrunner = QuasiQueue(\n  \"hello_world\",\n  reader=reader,\n  writer=writer,\n)\n\nasyncio.run(runner.main())\n```\n\n## Use Cases\n\nThere are a ton of use cases for QuasiQueue.\n\n### WebServer\n\nQuasiQueue could be the basis for a web server. The `write` function would need to feed sockets to the Queue, would would be picked up by the `reader` for handling.\n\n```mermaid\nflowchart LR\n\n  subgraph Configuration\n  http\n  end\n\n  subgraph Server\n  http-->writer\n  writer(writer)--socket-->queue((queue))\n  queue--socket-->reader1(reader)\n  queue--socket-->reader2(reader)\n  queue--socket-->reader3(reader)\n  queue--socket-->reader4(reader)\n  end\n```\n\n\n### Website Image Crawler\n\nQuasiQueue could be used to crawl a website, or series of websites, to download data.\n\n```mermaid\nflowchart RL\n\n  subgraph Crawler\n  writer(writer)-->queue((queue))\n  queue-->reader1(reader)\n  end\n  database(Links)--Stale or Unread Links-->writer\n  reader1(reader)--Images-->FileSystem\n  reader1(reader)--Found Links-->database\n\n```\n\nAs new pages are found they get added to a database. The write pulls pages out of the database as the queue gets smaller, and the reader adds new pages that it finds to the database. The writer function can pull links that haven't been crawled at all, and once it runs out of those it can recrawl links based on their age.\n\n### Image Processor\n\nQuasiQueue can be used to run large one off jobs as well, such as processing a list of images. If someone has several thousand images to process they can have the writer function feed the list into the Queue, and reader processes can take the files from the queue and run the processing needed.\n\n```mermaid\nflowchart LR\n\n  subgraph Configuration\n  filelist\n  end\n\n  subgraph ImageProcessor\n  filelist-->writer\n  writer(writer)-->queue((queue))\n  queue-->reader1(reader)\n  end\n  reader1(reader)-->ProcessedFiles\n```\n\n\n## Installation\n\n```bash\npip install quasiqueue\n```\n\n\n## Arguments\n\n### Name\n\nThe first argument when initilizing QuasiQueue is the name of the queue. This is used when naming new processes (which makes logging and `ps` commands a lot more useful)\n\n### Reader\n\nThe reader function is called once per item in the queue.\n\n```python\nasync def reader(identifier: int|str):\n  \"\"\"Receives individual items from the queue.\n\n  Args:\n      identifier (int | str): Comes from the output of the Writer function\n  \"\"\"\n  print(f\"{identifier}\")\n```\n\nThe reader can be extremely simple, as this one liner shows, or it can be extremely complex.\n\nThe reader can be asynchronous or synchronous. Since each reader runs in its own process there is no performance benefits to using async, but it does make it easier for projects that use a lot of async code to reuse their existing async libraries inside of the reader.\n\n### Writer\n\nThe write function is called whenever the Queue is low. It has to return an iterator of items that can be pickles (strings, integers, or sockets are common examples) that will be feed to the Reader. Generators are a great option to reduce memory usage, but even simple lists can be returned. The writer function has to be asynchronous.\n\nThe writer function only has one argument- the desired number of items that QuasiQueue would like to retrieve and add to the Queue. This number is meant to allow for optimization on behalf of the developers- it can be completely ignored, but QuasiQueue will run more efficiently if you keep it as close the desired_items as possible.\n\n```python\nasync def writer(desired_items: int):\n  \"\"\"Feeds data to the Queue when it is low.\n  \"\"\"\n  return xrange(0, desired_items)\n\n```\n\nIn the event that there are no items available to put in the Queue the write function should return `None`. This will signal to QuasiQueue that there is nothing for it, and it will add a slight (configurable) delay before attempting to retrieve more items.\n\nQuasiQueue will prevent items that were recently placed in the Queue from being requeued within a configurable time frame. This is meant to make the write function more lenient- if it happens to return duplicates between calls QuasiQueue will just discard them.\n\n### Context\n\nThe context function is completely optional. It runs once, and only once, when a new reader process is launched. It is used to initialize resources such as database pools so they can be reused between reader calls.\n\nIf the function is provided it should return a dictionary. The reader function will need to have a context argument, which will be the results from the context function. The context function can be asynchronous or synchronous.\n\n```python\n\ndef context():\n  ctx = {}\n  ctx['http'] = get_http_connection_pool()\n  ctx['dbengine'] = get_db_engine_pool()\n  return ctx\n\ndef reader(identifier: int|str, ctx: Dict[str, Any]):\n  \"\"\"Receives individual items from the queue.\n\n  Args:\n      identifier (int | str): Comes from the output of the Writer function\n      ctx (Dict[str, Any]): Comes from the output of the Context function\n  \"\"\"\n  ctx['dbengine'].execute(\"get item\")\n  ctx['http'].get(\"url\")\n  print(f\"{identifier}\")\n\n\nrunner = QuasiQueue(\n  \"hello_world\",\n  reader=reader,\n  writer=writer,\n  context=context\n)\n```\n\nAlthough this function is not required it can have amazing performance implications. Connection pooling of databases and websites can save a remarkable amount of resources on SSL handshakes alone.\n\n## Settings\n\nQuasiQueue has a variety of optimization settings that can be tweaked depending on usage.\n\n|            Name           |  Type |                                                   Description                                                   |Default|\n|---------------------------|-------|-----------------------------------------------------------------------------------------------------------------|-------|\n|  `empty_queue_sleep_time` |  float|          The time in seconds that QuasiQueue will sleep the writer process when it returns no results.          |  1.0  |\n|  `full_queue_sleep_time`  |  float|        The time in seconds that QuasiQueue will sleep the writer process if the queue is completely full.       |  5.0  |\n|`graceful_shutdown_timeout`|integer|   The time in seconds that QuasiQueue will wait for readers to finish when it is asked to gracefully shutdown.  |   30  |\n|    `lookup_block_size`    |integer|The default desired_items passed to the writer function. This will be adjusted lower depending on queue dynamics.|   10  |\n|   `max_jobs_per_process`  |integer|               The number of jobs a reader process will run before it is replaced by a new process.              |  200  |\n|      `max_queue_size`     |integer|                                        The max allowed six of the queue.                                        |  300  |\n|      `num_processes`      |integer|                                      The number of reader processes to run.                                     |   2   |\n|  `prevent_requeuing_time` |integer|               The time in seconds that an item will be prevented from being readded to the queue.               |  300  |\n|`queue_interaction_timeout`|  float|               The time QuasiQueue will wait for the Queue to be unlocked before throwing an error.              |  0.01 |\n\nSettings can be configured programmatically, via environment variables, or both.\n\n### Environment Variables\n\nAll Settings can be configured via environment variables. The variables should start with the QuasiQueue name and an underscore. For example, if you named your QuasiQueue `Acme` then `ACME_NUM_PROCESS` would be used to set the number of processes.\n\n### Programmatic\n\nThere are two methods to programmatically define the settings.\n\nThe first one is to initialize the settings and override the specific ones.\n\n```python\nfrom quasiqueue import Settings, QuasiQueue\n\nQuasiQueue(\n  \"MyQueue\",\n  reader=reader,\n  writer=writer,\n  settings=Settings(lookup_block_size=50)\n)\n```\n\nThis method is simple, but the downside is that you lose the environment variable prefixes. So when using this method you have to set `NUM_PROCESSES` rather than `MYQUEUE_NUM_PROCESSES`. The work around is to extend the Settings object to give it your desired prefix.\n\n\n```python\nfrom quasiqueue import Settings, QuasiQueue\n\nclass MySettings(Settings)\n  lookup_block_size: int = 50\n\n  class Config:\n    prefix=\"MY_QUEUE_\"\n\nQuasiQueue(\n  \"MyQueue\",\n  reader=reader,\n  writer=writer,\n  settings=MySettings()\n)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quasiqueue",
    "package_url": "https://pypi.org/project/quasiqueue/",
    "platform": null,
    "project_url": "https://pypi.org/project/quasiqueue/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/quasiqueue/0.2.2/",
    "requires_dist": [
      "psutil",
      "pydantic",
      "typer",
      "black ; extra == 'dev'",
      "build ; extra == 'dev'",
      "dapperdata ; extra == 'dev'",
      "glom ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "pytest-pretty ; extra == 'dev'",
      "ruamel.yaml ; extra == 'dev'",
      "types-psutil ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A Simple High Performance Multiprocess Queue",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16646197,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23ed7bd9c8959420e305c2fc9871aefeb5f8c4e8fec027b6ebf366e6f29b6beb",
          "md5": "932a2c7886ed6a31f75165fe83b1d725",
          "sha256": "c3c2d0e90110de14bac442aad94cf77912313eddbd0dd1d23ad2043cac7dc9e5"
        },
        "downloads": -1,
        "filename": "quasiqueue-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "932a2c7886ed6a31f75165fe83b1d725",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8271,
        "upload_time": "2023-01-30T04:54:34",
        "upload_time_iso_8601": "2023-01-30T04:54:34.570816Z",
        "url": "https://files.pythonhosted.org/packages/23/ed/7bd9c8959420e305c2fc9871aefeb5f8c4e8fec027b6ebf366e6f29b6beb/quasiqueue-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0195c0d0267d6a802fe1d9b4f01c817f0edbb7187b9d5c6b9214eb56f776958b",
          "md5": "011671db285c929287c5eaa95a181f27",
          "sha256": "414ace2c1996f5d483e68e95331bb2e922aac0e08d6bb33363a9d2908c260085"
        },
        "downloads": -1,
        "filename": "quasiqueue-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "011671db285c929287c5eaa95a181f27",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6866,
        "upload_time": "2023-01-30T04:54:36",
        "upload_time_iso_8601": "2023-01-30T04:54:36.084378Z",
        "url": "https://files.pythonhosted.org/packages/01/95/c0d0267d6a802fe1d9b4f01c817f0edbb7187b9d5c6b9214eb56f776958b/quasiqueue-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d799001c1339a0dd8dc2c2b66067dd56051badca326977c388d0e00280582f8c",
          "md5": "a7d0cb8bd0a22d8c1c40c15e70146bba",
          "sha256": "e3bd65dde775048bf936a9f10c27b98ae5c14900aea9a26bf6dd2cf21adcdadf"
        },
        "downloads": -1,
        "filename": "quasiqueue-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7d0cb8bd0a22d8c1c40c15e70146bba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11792,
        "upload_time": "2023-02-01T03:45:48",
        "upload_time_iso_8601": "2023-02-01T03:45:48.569448Z",
        "url": "https://files.pythonhosted.org/packages/d7/99/001c1339a0dd8dc2c2b66067dd56051badca326977c388d0e00280582f8c/quasiqueue-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "616ddf37024f46373e9e86670dbb2244fb06eaef67d751f18bf763ed6fb8bbb8",
          "md5": "13c0f0482bd66d14e11ef8c101d31cbf",
          "sha256": "22891f6af2debdecae4bd611a4e4a80a1ab0989959319d250ee38974d588966a"
        },
        "downloads": -1,
        "filename": "quasiqueue-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "13c0f0482bd66d14e11ef8c101d31cbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12706,
        "upload_time": "2023-02-01T03:45:49",
        "upload_time_iso_8601": "2023-02-01T03:45:49.975469Z",
        "url": "https://files.pythonhosted.org/packages/61/6d/df37024f46373e9e86670dbb2244fb06eaef67d751f18bf763ed6fb8bbb8/quasiqueue-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0789a7d87565416dfe22104db91d8d584efa1c1931702776024cdc83866c48d5",
          "md5": "a07258b66a1dfee02c64e9ba52fea240",
          "sha256": "27df843f0a51975c09167ead2d66a7717a37918fd9e495c4810974298a4f120c"
        },
        "downloads": -1,
        "filename": "quasiqueue-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a07258b66a1dfee02c64e9ba52fea240",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11774,
        "upload_time": "2023-02-01T03:54:19",
        "upload_time_iso_8601": "2023-02-01T03:54:19.775950Z",
        "url": "https://files.pythonhosted.org/packages/07/89/a7d87565416dfe22104db91d8d584efa1c1931702776024cdc83866c48d5/quasiqueue-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f7dfa0c2b52a8690ee335cc16f4684a9725c741cce8314567b5a1ee9fd0fbb7",
          "md5": "1ed6611eadb1f45d25c56be553c30c68",
          "sha256": "c7cd3e42dda98d2f9896504442f1a537438d2ae7ff9766e1ac5379b5e2ff6800"
        },
        "downloads": -1,
        "filename": "quasiqueue-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1ed6611eadb1f45d25c56be553c30c68",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12654,
        "upload_time": "2023-02-01T03:54:21",
        "upload_time_iso_8601": "2023-02-01T03:54:21.396442Z",
        "url": "https://files.pythonhosted.org/packages/0f/7d/fa0c2b52a8690ee335cc16f4684a9725c741cce8314567b5a1ee9fd0fbb7/quasiqueue-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e66ff551c699302b1417aecf9c68b694b735c4fa2c4926dff3b2661556894840",
          "md5": "824914c09e42e0b07179ced59f676906",
          "sha256": "5d9bda3c4ec6eca225d0a40f2fda9c8f0b107cf65a1c667506b92095ace85b6d"
        },
        "downloads": -1,
        "filename": "quasiqueue-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "824914c09e42e0b07179ced59f676906",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11925,
        "upload_time": "2023-02-01T04:14:30",
        "upload_time_iso_8601": "2023-02-01T04:14:30.451462Z",
        "url": "https://files.pythonhosted.org/packages/e6/6f/f551c699302b1417aecf9c68b694b735c4fa2c4926dff3b2661556894840/quasiqueue-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e492e2a631141d4b84ee64c7e0fc74047290110cfe4a1c6ab6a1e5e5fa7928f0",
          "md5": "b94fb51415e5f3f62b08fded4d1a31bb",
          "sha256": "344329789a554ef1b5dfcf5505e7019dfa0e0e59c239d911e497bb51a9265a9a"
        },
        "downloads": -1,
        "filename": "quasiqueue-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b94fb51415e5f3f62b08fded4d1a31bb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12932,
        "upload_time": "2023-02-01T04:14:32",
        "upload_time_iso_8601": "2023-02-01T04:14:32.292376Z",
        "url": "https://files.pythonhosted.org/packages/e4/92/e2a631141d4b84ee64c7e0fc74047290110cfe4a1c6ab6a1e5e5fa7928f0/quasiqueue-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e66ff551c699302b1417aecf9c68b694b735c4fa2c4926dff3b2661556894840",
        "md5": "824914c09e42e0b07179ced59f676906",
        "sha256": "5d9bda3c4ec6eca225d0a40f2fda9c8f0b107cf65a1c667506b92095ace85b6d"
      },
      "downloads": -1,
      "filename": "quasiqueue-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "824914c09e42e0b07179ced59f676906",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11925,
      "upload_time": "2023-02-01T04:14:30",
      "upload_time_iso_8601": "2023-02-01T04:14:30.451462Z",
      "url": "https://files.pythonhosted.org/packages/e6/6f/f551c699302b1417aecf9c68b694b735c4fa2c4926dff3b2661556894840/quasiqueue-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e492e2a631141d4b84ee64c7e0fc74047290110cfe4a1c6ab6a1e5e5fa7928f0",
        "md5": "b94fb51415e5f3f62b08fded4d1a31bb",
        "sha256": "344329789a554ef1b5dfcf5505e7019dfa0e0e59c239d911e497bb51a9265a9a"
      },
      "downloads": -1,
      "filename": "quasiqueue-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b94fb51415e5f3f62b08fded4d1a31bb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12932,
      "upload_time": "2023-02-01T04:14:32",
      "upload_time_iso_8601": "2023-02-01T04:14:32.292376Z",
      "url": "https://files.pythonhosted.org/packages/e4/92/e2a631141d4b84ee64c7e0fc74047290110cfe4a1c6ab6a1e5e5fa7928f0/quasiqueue-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}