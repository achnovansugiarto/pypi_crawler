{
  "info": {
    "author": "Curtis Lo",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# C++ Project Framework\n\nC++ Project Framework is a framework for creating C++ project.\n\n## Canonical Project Structure for C++\n\nCanonical Project Structure:\n<http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1204r0.html>\n\nThe Pitchfork Layout:\n<https://api.csswg.org/bikeshed/?force=1&url=https://raw.githubusercontent.com/vector-of-bool/pitchfork/develop/data/spec.bs>\n\n```c++\n<name>/\n├── <name>/\n│   └── ...\n├── <module>/\n│   ├── <module>.h        // header file containing mainly module declarations\n│   ├── <module>.hpp      // header file containing module declarations and/or definitions\n│   ├── <module>.cpp      // source file containing module definitions\n│   ├── <module>.test.cpp // source file containing module unit tests\n│   └── main.cpp          // source file containing the main function for exe\n├── ...\n└── tests/ // functional/integration tests\n    ├── benchmarks/ // benchmark/performance tests\n    │   ├── <benchmark>/\n    │   │   └── <benchmark>.benchmark.cpp // source file containing module benchmark tests\n    │   └── ...\n    └── ...\n```\n\n## Prerequisites\n\n```yaml\nBuild System Generator: CMake >= 3.10\nBuild System: GNU Make >= 4.2 (Linux), MSBuild >= 14.0 (Visual Studio 2015) (Windows)\nCompiler: g++ >= 9.1 (Linux), MSVC >= 14.0 (Visual Studio 2015) (Windows)\nVersion Control System (VCS): Git >= 2.16\nPackage Manager Scripting: Python >= 3.6\nC++ Standard: >= C++14\n```\n\n## Optional Prerequisites\n\n```yaml\nIntegrated Development Environment (IDE): Visual Studio Code >= 1.49\nVisual Studio Code Extensions:\n    C/C++ >= 1.0.1\n    C++ Intellisense >= 0.2.2\n    Clang-Format >= 1.9.0\n    CMake >= 0.0.17\n    CMake Tools >= 1.4.2\n    Python >= 2020.8\n    Remote - SSH >= 0.55.0\n    Remote Development >= 0.20.0\n    GitLens >= 10.2.2\n    Doxygen Documentation Generator >= 1.1.0\n    C++ TestMate >= 3.6.23\n    Five Server (Live Server) >= 0.0.34\nContinous Integration (CI): Jenkins >= 2.319.1\nJenkins Running: Java 8 or 11 (OpenJDK JDK/JRE 8 or 11) >= 1.8.0\nJenkins Plugins:\n    Locale >= 1.4\n    Pipeline >= 2.6\n    Git >= 4.10.1\n    Blue Ocean >= 1.25.2\n    xUnit >= 3.0.5\n```\n\n## Recommended C++ Development Environment\n\n<https://www.reddit.com/r/cpp/comments/af74l1/recommendations_for_setting_up_a_modern_c_dev/>\n\n```yaml\nbuild system generator: CMake\nbuild system: Ninja\ncompiler: clang++ (cross-platform), MSBuild/MSVC (Windows), g++ (Linux)\nIntegrated Development Environment (IDE): Visual Studio Code, Qt Creator\nstatic code analyzers: clang-tidy, Cppcheck, Clazy\nsource code formatter: clang-format\nsource code documentation generator: Doxygen\nsoftware distribution packaging system: CPack\nC++ libraries:\n    general-purpose: C++ Standard Library\n    general-purpose: Boost C++ Libraries\n    string formatting: fmt\n    logging: spdlog\n    automated testing: Google Test / Google Mock\n    graphical user interface (GUI): Qt\npackage manager: Conan, vcpkg\ncontinuous integration (CI): Jenkins, CDash\nversion control system (VCS): Git\ncode coverage: OpenCppCoverage (Windows), gcov + gcovr (Linux)\n```\n\n## Chosen C++ Development Environment\n\n<https://en.cppreference.com/w/cpp/compiler_support>\n\n```yaml\n# Required (manual install)\nBuild System Generator: CMake >= 3.10\nBuild System: GNU Make >= 4.2 (Linux), MSBuild >= 14.0 (Visual Studio 2015) (Windows)\nCompiler: g++ >= 9.1 (Linux), MSVC >= 14.0 (Visual Studio 2015) (Windows)\nVersion Control System (VCS): Git >= 2.16\nPackage Manager Scripting: Python >= 3.6 (or Anaconda3 on Windows)\nC++ Standard: >= C++14\n\n# Required (distributed with manual installed tools)\nTesting Tool: CTest (CMake)\nSoftware Distribution Packaging System: CPack (CMake)\nPython Package Installer: pip >= 9.0 (Python)\n\n# Required (auto installed by C++ Project Framework)\nPackage Manager: Conan (pip)\nCode Coverage Report: gcovr (pip), OpenCppCoverage (Windows)\n\n# C++ Libraries\nGeneral Purpose: C++ Standard Library (compiler included)\nGeneral Purpose: Boost (boost)\nUnit Test Framework: Google Test (gtest)\nLogging: Boost Log (boost::log)\nEmbedded Local Key-Value Store: RocksDB (rocksdb)\nEmbedded Local SQL Database:  SQLite (sqlite)\n\n# Optional\nIntegrated Development Environment (IDE): Visual Studio Code >= 1.49\nSource Code Documentation Generator: Doxygen >= 1.8\nGraphical User Interface: Qt\nContinous Integration (CI): Jenkins >= 2.319.1\nDebugger: gdb (Linux), WinDbg (Windows), Visual Studio Debugger (Windows)\nPerformance Profiler: perf (Linux), gprof (Linux), orbit (Linux, Windows)\nSource Code Formatter: ClangFormat (clang-format)\n```\n\n## Similar Projects Creating C++ Project Framework\n\nPitchfork\n<https://github.com/vector-of-bool/pitchfork>\n\n```yaml\nPitchfork is a set of conventions for native C and C++ projects. The most prominent being the project layout conventions.\n```\n\nBoiler plate for C++ projects\n<https://github.com/bsamseth/cpp-project>\n\n```yaml\nThis is a boiler plate for C++ projects. What you get:\n\nSources, headers and mains separated in distinct folders\nUse of modern CMake for much easier compiling\nSetup for tests using doctest\nContinuous testing with Travis-CI and Appveyor, with support for C++17.\nCode coverage reports, including automatic upload to Coveralls.io and/or Codecov.io\nCode documentation with Doxygen\n```\n\ncpp-project-template\n<https://github.com/Bo-Yuan-Huang/cpp-starter>\n\n```yaml\nThis is a starting template for C++ projects that supports:\n\nHierarchical sources and headers\nAccess to Google Tests\nUse of CMake for much easier compiling\nCode documentation with Doxygen\nContinuous testing with Travis-CI\nCode coverage with Coveralls.io\nStatic analysis with Coverity Sacn\n```\n\nC++ Project Template\n<https://github.com/TimothyHelton/cpp_project_template>\n\n```yaml\nWhen setting out on a new project in C++ there are a few configuration steps which need to be completed prior to actually getting down to writing code. This repository is going to be a C++ project template that already has the following components:\n\nDirectory Structure\nMake Build (CMake)\nUnit Test Framework (Google Test)\nAPI Documentation (Doxygen)\n```\n\nmoderncpp-project-template\n<https://github.com/madduci/moderncpp-project-template>\n\n```yaml\nThis repository aims to represent a template for Modern C++ projects, including static analysis checks, autoformatting, a BDD/TDD capable test-suite and packaging\n\nRequirements\na modern C++17 compiler (gcc-8, clang-6.0, MSVC 2017 or above)\ncmake 3.10+\nconan 1.4+\nconan_package_tools (optional)\ncppcheck (optional)\nclang-format (optional)\nclang-check (optional)\n\nFeatures\nCMake-based project management, including dependencies\nConan support for dependency management in CMake, completely optional\nAdditional tools such as clang-format and cppcheck\nSupport for shared/static libraries, including generation of export information\nBasic CPack configuration for redistributables\nGitHub Actions\n```\n\nCMake-Jenkins-CPP Framework\n<https://github.com/planetpratik/CMake-Jenkins-CPP>\n\n```yaml\nA Cross-Platform Modern C++ Project Framework Set Up Using CMake, Jenkins & Vcpkg\n\nGoals :-\nTo create a Cross-Platform C++ project framework using CMake which follows same project structure as FieaGameEngine Project ( originally developed using Visual Studio 2017 ).\nTo support Continuous Integration using Jenkins.\nTo support better dependency management using Vcpkg as a package manager.\nTo be easily able to bootstrap cross-platform C++ project using CMake & Jenkins with minimum efforts.\n```\n\n## Useful Resources for C++\n\ncppreference\n<http://www.cppreference.com/>\n\n```yaml\nOur goal is to provide programmers with a complete online reference for the C and C++ languages and standard libraries, i.e. a more convenient version of the C and C++ standards.\n```\n\ncplusplus\n<https://www.cplusplus.com/>\n\n```yaml\nDescription of the most important classes, functions and objects of the Standard Language Library, with descriptive fully-functional short programs as examples\n```\n\nC++ Papyrus - C++ Annotations about Modern C++\n<https://github.com/caiorss/C-Cpp-Notes>\n\n```yaml\nThis repository contains annotations and examples about moodern C++, system programming and building systems for C and C++.\n```\n\nAwesome C++\n<https://github.com/fffaraz/awesome-cpp>\n<https://awesome-cpp.readthedocs.io/en/latest/README.html>\n\n```yaml\nA curated list of awesome C++ (or C) frameworks, libraries, resources, and shiny things. Inspired by awesome-... stuff.\n```\n\n## Package C++ Project Framework Python Project\n\n[How To Package Your Python Code](https://python-packaging.readthedocs.io/en/latest/index.html)\n\n[Packaging Python Projects](https://packaging.python.org/tutorials/packaging-projects/)\n\n[Building and Distributing Packages with Setuptools](https://setuptools.pypa.io/en/latest/userguide/index.html)\n\n[What Are Python Wheels](https://realpython.com/python-wheels/)\n\nGo to `cpp_project_framework` root folder first, activate python virtual evironment (create it if not yet created), then follow below procedures:\n\n### Install C++ Project Framework Python Package Locally\n\n```bash\n# Upgrade pip to latest version\npython -m pip install --upgrade pip\n\n# Install the package locally\npython -m pip install .\n```\n\n### Generate C++ Project Framework Python Distribution Archives\n\n```bash\n# Upgrade PyPA's build to latest version\npython -m pip install --upgrade build\n\n# Generate distribution archives in dist directory\npython -m build\n\n# Check the generated archives\nls dist\ncpp_project_framework-1.0.0-py3-none-any.whl\ncpp_project_framework-1.0.0.tar.gz\n```\n\nThe `tar.gz` file is a source archive whereas the `.whl` file is a built distribution.\n\n### Upload Generated C++ Project Framework Python Distribution Archives to Test Python Package Index (TestPyPI)\n\n```bash\n# Upgrade PyPI's twine to latest version\npython -m pip install --upgrade twine\n\n# Upload all of the arhives under dist directory to TestPyPI\npython -m twine upload --repository testpypi dist/*\n```\n\n### Install C++ Project Framework Python Package from TestPyPI\n\n```bash\n# Upgrade pip to latest version\npython -m pip install --upgrade pip\n\n# Install the package from TestPyPI\npython -m pip install --index-url https://test.pypi.org/simple/ --no-deps cpp_project_framework\n```\n\n## Create New C++ Project by Python Script with Template\n\nAfter installed the C++ project framework python package (namely `cpp_project_framework`), input the required parameters as prompted in below python script and a new C++ project with `C++ Project Framework` project structure will be created:\n\nMethod 1 (by calling C++ project framework python module):\n\n```bash\npython -m cpp_project_framework.create_new_project\n```\n\nMethod 2 (by running C++ project framework python script):\n\n```bash\ncreate_new_cpp_project\n```\n\n## Visual Studio Code CMake Tools Settings\n\n[Configuring CMake Tools](https://vector-of-bool.github.io/docs/vscode-cmake-tools/settings.html)\n\n### Allow Building in Different Directories per Build Type\n\n<https://github.com/microsoft/vscode-cmake-tools/issues/151>\n\nFile > Preferences > Settings > Extensions > CMake Tools > Cmake: Build Directory\n\n.vscode/settings.json\n\n```json\n{\n    \"cmake.buildDirectory\": \"${workspaceFolder}/${buildType}\"\n}\n```\n\n## Visual Studio Code C++ Include Path Setting\n\n.vscode/c_cpp_properties.json\n\n```json\n{\n    \"configurations\": [\n        {\n            \"includePath\": [\n                \"${workspaceFolder}/**\",\n                \"~/.conan/data/**\"\n            ],\n            \"windowsSdkVersion\": \"10.0.10240.0\"\n        }\n    ]\n}\n```\n\n## Manually Specify a Python Interpreter\n\n<https://code.visualstudio.com/docs/python/environments#_manually-specify-an-interpreter>\n\nFile > Preferences > Settings > Extensions > Python > Python: Default Interpreter Path\n\n.vscode/settings.json\n\n```json\n{\n    \"python.defaultInterpreterPath\": \"./.venv/bin/python\"\n}\n```\n\n## C++ TestMate Visual Studio Code Extension for Test Explorer Setting\n\nFile > Preferences > Settings > Extensions > C++ TestMate > TestMate > Cpp > Tests: Executables\n\n.vscode/settings.json\n\n```json\n{\n    \"testMate.cpp.test.executables\": \"{build,Build,BUILD,out,Out,OUT,Debug,Release}/**/*{test,Test,TEST}*\"\n}\n```\n\n## C++ Code Formatting using Visual Studio Code with ClangFormat\n\n<https://code.visualstudio.com/docs/cpp/cpp-ide#_code-formatting>\n\n<https://clang.llvm.org/docs/ClangFormatStyleOptions.html>\n\nFormat an entire file with Format Document (Shift+Alt+F) or just the current selection with Format Selection (Ctrl+K Ctrl+F) in right-click context menu.\n\n### Create ClangFormat File inside Visual Studio Code Workspace\n\n```yaml\n# .clang-format\nUseTab: Never\nIndentWidth: 4\nBreakBeforeBraces: Allman\nAllowShortIfStatementsOnASingleLine: false\nIndentCaseLabels: false\nColumnLimit: 0\nPointerAlignment: Left\nAccessModifierOffset: -4\n```\n\n## Setup Remote SSH for Visual Studio Code\n\n<https://code.visualstudio.com/docs/remote/ssh>\n\nStart by selecting `Remote-SSH: Add New SSH Host...` from the Command Palette (`F1`, `Ctrl+Shift+P`) or clicking on the `Add New` icon in the SSH `Remote Explorer` in the Activity Bar.\n\n%USERPROFILE%/.ssh/config\n\n```\nHost curtis@127.0.0.1:10022\n  HostName ubuntu\n  User curtis\n  Port 10022\n  IdentityFile %USERPROFILE%\\\\.ssh\\\\id_rsa\n```\n\n### Generate SSH Key Pair\n\n<https://code.visualstudio.com/docs/remote/troubleshooting#_quick-start-using-ssh-keys>\n\n\nOn Linux SSH Server Side:\n\n```bash\n# Linux\ncd ~/.ssh\nssh-keygen -t rsa -b 4096\ncat id_rsa.pub >> authorized_keys\nchmod 644 authorized_keys\n```\n\n`id_rsa.pub` is the **`public`** key generated and `id_rsa` is the **`private`** key generated.\n`authorized_keys` is the file with keys that SSH server accepted for.\n\nOn Windows SSH Client Side:\n\nCopy `id_rsa` from `~/.ssh/id_rsa` on Linux SSH server side to `%USERPROFILE%/.ssh/id_rsa` on Windows SSH client side.\n\n## Setup Git\n\n<https://stackoverflow.com/questions/68775869/support-for-password-authentication-was-removed-please-use-a-personal-access-to>\n\n### Configure Git Client User\n\n```bash\ngit config --global user.name \"Curtis Lo\"\ngit config --global user.email \"github_email\"\ngit config -l\n```\n\n### Clone Git Repository\n\n```bash\ngit clone https://github.com/sheepgrass/cpp_project_framework.git\n```\n\n### Remember Git Credential\n\n```bash\ngit config --global credential.helper cache\n```\n\n## Install Build Essential (GCC, Make)\n\n```bash\n# Linux (Ubuntu)\nsudo apt install build-essential\n```\n\n## Install CMake\n\n```bash\n# Linux (Ubuntu)\nsudo apt-get install cmake\n```\n\n## Create Python Virtual Environment under Current Project\n\n```bash\n# Linux\npython3 -m venv .venv\nsource .venv/bin/activate\n...\ndeactivate\n```\n\n```cmd\n# Windows\n%LOCALAPPDATA%\\Continuum\\anaconda3\\python.exe -m venv .venv\n.venv\\Scripts\\activate\n...\ndeactivate\n```\n\n## Install Conan\n\n<https://docs.conan.io/en/latest/installation.html>\n\n```bash\nsource .venv/bin/activate\npip install -U conan\nconan\n```\n\n## Search for Repository (Package Recipes) in ConanCenter\n\n<https://conan.io/center>\n\n```bash\nconan search --remote=conan-center g3log\nconan inspect g3log/1.3.3\n```\n\n## Create Conan File\n\n<https://docs.conan.io/en/latest/getting_started.html>\n\n```ini\n# conanfile.txt\n[requires]\n\n[generators]\ncmake_multi\n```\n\n## Conan Multi-configuration Generator\n\n<https://docs.conan.io/en/latest/integrations/build_system/cmake/cmake_multi_generator.html>\n\n## Conan for New GCC ABI\n\n[How to manage the GCC >= 5 ABI](https://docs.conan.io/en/latest/howtos/manage_gcc_abi.html)\n\nWhen Conan creates the default profile the first time it runs, it adjusts the `compiler.libcxx` setting to `libstdc++` for backwards compatibility. However, if you are using GCC >= 5 your compiler is likely to be using the new CXX11 ABI by default (`libstdc++11`).\n\nIf you want Conan to use the new ABI, edit the default profile at `~/.conan/profiles/default` adjusting `compiler.libcxx=libstdc++11` or override this setting in the profile you are using.\n\n```bash\n# Linux\nvim ~/.conan/profiles/default\n```\n\n```ini\n[settings]\nos=Linux\nos_build=Linux\narch=x86_64\narch_build=x86_64\ncompiler=gcc\ncompiler.version=9\ncompiler.libcxx=libstdc++11\nbuild_type=Release\n```\n\n## CMake Build Types\n\n```ini\nCMAKE_BUILD_TYPE=[Debug|Release|MinSizeRel|RelWithDebInfo]\n```\n\n## Install Required Dependencies by Conan\n\n<https://docs.conan.io/en/latest/reference/commands/consumer/install.html>\n\n```bash\nconan install . -b missing -s build_type={CMAKE_BUILD_TYPE} -if {CMAKE_BUILD_TYPE}\n```\n\n## Conan Package Location\n\n```bash\n# Linux\n~/.conan/data\n```\n\n```cmd\n# Windows\n%USERPROFILE%\\.conan\\data\n```\n\n## Generate CMake Project\n\n<https://cmake.org/cmake/help/latest/manual/cmake.1.html#generate-a-project-buildsystem>\n\n```bash\ncmake -S . -B {CMAKE_BUILD_TYPE} -DCMAKE_BUILD_TYPE={CMAKE_BUILD_TYPE} [-G \"Visual Studio 14 2015\" -A x64]\n```\n\n## Build CMake Project\n\n<https://cmake.org/cmake/help/v3.14/manual/cmake.1.html#build-a-project>\n\n```bash\ncmake --build {CMAKE_BUILD_TYPE} [--clean-first -j4 -v]\n```\n\n## Build Specific Target of CMake Project\n\n<https://cmake.org/cmake/help/v3.14/manual/cmake.1.html#build-a-project>\n\n```bash\ncmake --build {CMAKE_BUILD_TYPE} --target {CMAKE_BUILD_TARGET} [-j4 -v]\n```\n\n## Open CMake Generated Project\n\n<https://cmake.org/cmake/help/latest/manual/cmake.1.html#open-a-project>\n\n```bash\ncmake --open {CMAKE_BUILD_TYPE}\n```\n\n## Generate CMake Installer by CPack\n\n<https://cmake.org/cmake/help/latest/manual/cpack.1.html#manual:cpack(1)>\n\n```bash\ncd {CMAKE_BUILD_TYPE} && cpack -C {CMAKE_BUILD_TYPE} [-G ZIP]\n```\n\n## Create Conan Package Recipe\n\n<https://docs.conan.io/en/latest/creating_packages/getting_started.html>\n\n```bash\nmkdir package && cd package\nconan new {CMAKE_PROJECT_NAME}/{CMAKE_PROJECT_VERSION} -t\n```\n\n## Create Conan Package\n\n<https://docs.conan.io/en/latest/creating_packages/getting_started.html>\n\n```bash\nconan create . demo/testing\n```\n\n## Download Existing Package Recipe\n\n<https://docs.conan.io/en/latest/reference/commands/misc/download.html>\n\n```bash\nconan download g3log/1.3.3@ -re\n```\n\n## Copy Existing Recipe and Package to Another User Channel\n\n<https://docs.conan.io/en/latest/reference/commands/misc/copy.html>\n\n```bash\nconan copy g3log/1.3.3@ sheepgrass/modified\n```\n\n## Conan Center Index Recipes\n\n<https://github.com/conan-io/conan-center-index/tree/master/recipes>\n\n## Modify Existing Package Recipe\n\n<https://docs.conan.io/en/latest/howtos/collaborate_packages.html>\n\n<https://dmerej.info/blog/post/chuck-norris-part-4-python-ctypes/>\n\n<https://stackoverflow.com/questions/63670642/cant-create-boost-conan-package-from-conan-center-index-conanfile-didnt-spec>\n\n```bash\n# Linux\nmkdir g3log && cd g3log\nconan download g3log/1.3.3@ -re\ncp -rv ~/.conan/data/g3log/1.3.3/_/_/export/* .\ncp -rv ~/.conan/data/g3log/1.3.3/_/_/export_source/* .\nconan create . 1.3.3@sheepgrass/modified\nconan upload g3log/1.3.3@sheepgrass/modified --all -r=local\n```\n\n```cmd\n# Windows\nmkdir g3log && cd g3log\nconan download g3log/1.3.3@ -re\nxcopy %USERPROFILE%\\.conan\\data\\g3log\\1.3.3\\_\\_\\export\\* . /E\nxcopy %USERPROFILE%\\.conan\\data\\g3log\\1.3.3\\_\\_\\export_source\\* . /E\nconan create . 1.3.3@sheepgrass/modified\nconan upload g3log/1.3.3@sheepgrass/modified --all -r=local\n```\n\n### Create Patch File in Unified Diff Format for Existing Package using WinMerge\n\n<https://docs.conan.io/en/latest/reference/tools.html#tools-patch>\n\n1. Set original source file as 1st file\n\n2. Set modified source file as 2nd file\n\n3. Compare them\n\n4. In menu, select \"Tools > Generate Patch...\"\n\n5. Set \"Result\" to target patch file path and name with extension *.patch\n\n6. Set \"Format > Style:\" to \"Unified\"\n\n7. Set \"Format > Context:\" to \"3\"\n\n8. Set \"Whitespaces\" to \"Compare\"\n\n9. Uncheck \"Ignore blank lines\"\n\n10. Check \"Case sensitive\"\n\n11. Check \"Ignore carriage return differences (Windows/Unix/Mac)\"\n\n12. Click \"OK\" to generate patch file\n\n13. Modify patch file to make diff path relative to \"source_subfolder\"\n\n14. Add patch file to conandata.yml:\n\n    ```yaml\n    patches:\n    [version]:\n    - base_path: source_subfolder\n        patch_file: patches/?.patch\n    ```\n\n15. Calculate MD5 checksum for the patch file:\n\n    ```cmd\n    certutil -hashfile ?.patch md5\n    ```\n\n16. Add patch file to conanmanifest.txt:\n\n    ```txt\n    export_source/patches/?.patch: [md5]\n    ```\n\n17. Add patch files to export sources of conan recipe file conanfile.py:\n\n    ```python\n    exports_sources = [\"CMakeLists.txt\", \"patches/*\"]\n    ```\n\n18. Add patch snippet to conan recipe file conanfile.py:\n\n    ```python\n    if \"patches\" in self.conan_data and self.version in self.conan_data[\"patches\"]:\n        for patch in self.conan_data[\"patches\"][self.version]:\n            tools.patch(**patch)\n    ```\n\n## Get List of Conan Repository Servers (Remotes) in Use\n\n<https://docs.conan.io/en/latest/uploading_packages/uploading_to_remotes.html>\n\n```bash\nconan remote list\n```\n\n## Add Conan Repository Server (Remote)\n\n```bash\nconan remote add local http://localhost:9300\n```\n\n## Search Conan Package\n\n```bash\nconan search {PACKAGE_NAME} -r=local\n```\n\n## Upload Conan Package to Conan Repository Server (Remote)\n\n<https://docs.conan.io/en/latest/uploading_packages/uploading_to_remotes.html>\n\n```bash\nconan upload {CMAKE_PROJECT_NAME}/{CMAKE_PROJECT_VERSION}@demo/testing --all -r=local\n```\n\n## Remove Local Conan Package Cache\n\n```bash\nconan remove {CMAKE_PROJECT_NAME}*\n```\n\n## Run Simple Open Source Conan Repository Server\n\n<https://docs.conan.io/en/latest/uploading_packages/running_your_server.html>\n\n```bash\nconan_server\n```\n\n## Simple Open Source Conan Repository Server Config File Location\n\n```bash\n# Linux\n~/.conan_server/server.conf\n```\n\n```cmd\n# Windows\n%USERPROFILE%\\.conan_server\\server.conf\n```\n\n## Simple Open Source Conan Repository Server Package Location\n\n```bash\n# Linux\n~/.conan_server/data\n```\n\n```cmd\n# Windows\n%USERPROFILE%\\.conan_server\\data\n```\n\n## Set BUILD_TYPE Environment Variable\n\n```bash\n# Linux\nexport BUILD_TYPE=Debug\n```\n\n```cmd\n# Windows\nset BUILD_TYPE=Debug\n```\n\n## Activate Python Virtual Environment\n\n```bash\n# Linux\n`make venv_activate`\n```\n\n```cmd\n# Windows\nmake venv_activate\n```\n\n## Make Steps\n\n```bash\n# Set Build Type\nexport BUILD_TYPE=Debug\n\n# Create Virtual Environment\nmake venv_create\n\n# Activate Virtual Environment\nmake venv_activate\n\n# Install Conan Package Manager\nmake pip_install_conan\n\n# Install Project Dependencies\nmake conan_install\n\n# Create CMake Project\nmake cmake_project\n\n# Open Generated Project in Default IDE\nmake cmake_open\n\n# List of CMake Build Targets\nmake help\n\n# Build Specific CMake Target\nmake target CMAKE_BUILD_TARGET=<target>\n\n# Build Project\nmake build\n\n# Test Project\nmake test\n\n# Create Code Coverage Report\nmake coverage\n\n# Create Package/Installer\nmake package\n\n# Create New Conan Package Recipe\nmake recipe_create\n\n# Create Conan Test Package\nmake conan_package_test\n\n# Create Conan Package\nmake conan_package\n\n# Start Local Conan Repository Server\nmake conan_start_local\n\n# Add Local Conan Repository Server to Remote List\nmake conan_add_local\n\n# Upload Conan Test Package to Local Conan Repository Server\nmake conan_upload_local_test\n\n# Upload Conan Package to Local Conan Repository Server\nmake conan_upload_local\n\n# Generate Source Code Documentation\nmake doxygen\n```\n\n## Remove Steps\n\n```bash\n# Remove Source Code Documentation\nmake doxygen_delete\n\n# Remove Conan Package from Local Conan Repository Server\nmake conan_remove_local\n\n# Remove Conan Package from Cache\nmake conan_remove_cache\n\n# Clean Project\nmake clean\n\n# Delete Whole Build Folder\nmake delete\n\n# Deactivate Virtual Environment\nmake venv_deactivate\n\n# Delete Whole Virtual Environment\nmake venv_delete\n```\n\n## Support Google Test\n\n<https://github.com/google/googletest>\n\n<https://raymii.org/s/tutorials/Cpp_project_setup_with_cmake_and_unit_tests.html>\n\n<https://gitlab.kitware.com/cmake/community/-/wikis/doc/ctest/Testing-With-CTest>\n\n```ini\n# conanfile.txt\n[build_requires]\ngtest/1.10.0\n```\n\n```cmake\n# CMakeLists.txt (root project)\nenable_testing()\n...\nadd_subdirectory(${SUB_PROJECT_PATH})\n```\n\n```cmake\n# CMakeLists.txt (subdirectory project)\nenable_testing()\nset(TEST_EXE ${PROJECT_NAME}.test)\nset(TEST_SRC_FILES ${PROJECT_NAME}.test.cpp)\nadd_executable(${TEST_EXE} ${TEST_SRC_FILES})\nconan_target_link_libraries(${TEST_EXE})\nadd_test(NAME ${TEST_EXE} COMMAND ${TEST_EXE})\n```\n\n## Run CMake Tests by CTest\n\n<https://cmake.org/cmake/help/latest/manual/ctest.1.html>\n\n```bash\ncd {CMAKE_BUILD_TYPE} && ctest -C {CMAKE_BUILD_TYPE}\n```\n\n## Generate Unit Test Code Coverage Report by gcov and lcov\n\n<https://jhbell.com/using-cmake-and-gcov>\n\n<https://github.com/jhbell/cmake-gcov>\n\n<https://dr-kino.github.io/2019/12/22/test-coverage-using-gtest-gcov-and-lcov/>\n\n<https://github.com/dr-kino/BraveCoverage>\n\n<https://stackoverflow.com/questions/37978016/cmake-gcov-c-creating-wrong-gcno-files>\n\n<https://github.com/bilke/cmake-modules/blob/master/CodeCoverage.cmake>\n\n<https://stackoverflow.com/questions/13116488/detailed-guide-on-using-gcov-with-cmake-cdash>\n\n<https://medium.com/@naveen.maltesh/generating-code-coverage-report-using-gnu-gcov-lcov-ee54a4de3f11>\n\n<http://ltp.sourceforge.net/coverage/lcov.php>\n\n```bash\n# Generate gcov info file with g++ compiler flags \"-fprofile-arcs -ftest-coverage\" or simply \"--coverage\"\ng++ -o main -fprofile-arcs -ftest-coverage main_test.cpp -L /usr/lib -I/usr/include\ng++ -o main --coverage main_test.cpp -L /usr/lib -I/usr/include\n\n# Generate gcov data file from generated gcov info file\ngcov -b ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp -o ${GCOV_OBJECT_DIR}\n\nlcov --capture --directory ${GCOV_OBJECT_DIR} --output-file coverage.info\ngenhtml coverage.info --output-directory .\n```\n\n## Generate Unit Test Code Coverage Report by gcovr\n\n<https://gcovr.com/en/stable/guide.html>\n\n<https://github.com/gcovr/gcovr>\n\n```bash\n# Compile and generate binary object files with debug info and coverage info without optimization\ng++ --coverage -g -O0 -o main main_test.cpp -L /usr/lib -I/usr/include\n\n# Install gcovr\nsource .venv/bin/activate\npip install -U gcovr\n\n# Generate coverage report by gcovr (tabular report on console)\ngcovr -r ${CMAKE_CURRENT_SOURCE_DIR} --object-directory ${CMAKE_CURRENT_BINARY_DIR}\n\n# Generate coverage report by gcovr (text file output)\ngcovr -r ${CMAKE_CURRENT_SOURCE_DIR} --object-directory ${CMAKE_CURRENT_BINARY_DIR} -o gcov_report.txt\n\n# Generate coverage report by gcovr (html file output)\ngcovr -r ${CMAKE_CURRENT_SOURCE_DIR} --object-directory ${CMAKE_CURRENT_BINARY_DIR} --html-details gcov_report.html\n```\n\n## Generate Unit Test Code Coverage Report by OpenCppCoverage for Windows\n\n<https://github.com/OpenCppCoverage/OpenCppCoverage>\n\n```bash\n# Generate coverage report by OpenCppCoverage\nOpenCppCoverage.exe --sources \"${NATIVE_CURRENT_SOURCE_DIR}\" -- \"${NATIVE_UNIT_TEST_EXE_PATH}\" --working_dir \"${NATIVE_UNIT_TEST_EXE_DIR}\" --export_type html:\"${NATIVE_COVERAGE_TARGET_DIR}\"\n```\n\n## Generate Source Code Documentation by Doxygen\n\n<https://www.doxygen.nl/manual/starting.html>\n\n<https://github.com/doxygen/doxygen>\n\n```ini\n# conanfile.txt\n[build_requires]\ndoxygen/1.8.20\n```\n\n```bash\n# Generate Doxygen Config File\ndoxygen -g\n\n# Generate Source Code Documentation\ndoxygen\n```\n\n## View Test Coverage Report or Doxygen Documentation by Five Server Visual Studio Code Extension\n\n<https://marketplace.visualstudio.com/items?itemName=yandeu.five-server>\n\n```\nRight-Click a File in the Explorer > Open with Five Server\n```\n\nExample Test Coverage Report Path:\n`Debug/cpp_project_framework/coverage/CoverageReport-2020-01-01-01h01m01s/CoverageReport.html`\n\nExample Doxygen Documentation Path:\n`doxygen/html/index.html`\n\n## Preferred Doxygen Documentation Rules\n\n### Overall styles: C++ style /// > Javadoc style /** */, (Qt style /*! */ or //! not preferred)\n\n### File documentation: Javadoc style\n\n```c++\n/**\n* @file    cpp_project_framework.h\n* @author  Curtis Lo\n* @brief   This file is just a dummy header file\n*/\n```\n\n### Single line brief description: C++ style\n\n```c++\n/// Get the test case name of current test case\n#define GET_TEST_CASE_NAME() ((test_info_->test_suite_name() + std::string(\".\") + test_info_->name()).c_str())\n```\n\n### Brief description with other documenation: C++ style with @brief command\n\n```c++\n/// @brief Execute the code block with scoped trace\n/// @param code code to be executed with scoped trace\n#define SCOPED_TRACE_CODE_BLOCK(code) { SCOPED_TRACE(GET_TEST_CASE_NAME()); code; }\n```\n\n### Brief description after member: C++ style\n\n```c++\nstd::map<std::string /* name */, ObjectPtr> objects; ///< objects to be managed\n```\n\n### Paremeter inline documentation: Javadoc style\n\n```c++\nvirtual ObjectPtr Get(const std::string& name /**< [in] name of the object */)\n```\n\n### Brief description for variables\n\nBrief description sentence for variables must start with lowercase word\n\n```c++\nstd::map<std::string /* name */, ObjectPtr> objects; ///< objects to be managed\n```\n\n```c++\nvirtual ObjectPtr Get(const std::string& name /**< [in] name of the object */)\n```\n\n### Brief description for files, classes, functions, methods\n\nBrief description sentence for files, classes, functions, methods, macro functions must start with captalized word\n\n```c++\n/**\n* @file    cpp_project_framework.h\n* @author  Curtis Lo\n* @brief   This file is just a dummy header file\n*/\n```\n\n```c++\n/// Get the test case name of current test case\n#define GET_TEST_CASE_NAME() ((test_info_->test_suite_name() + std::string(\".\") + test_info_->name()).c_str())\n```\n\n## Preferred C++ Programming Styles\n\nGoogle C++ Style Guide\n<https://google.github.io/styleguide/cppguide.html>\n\nGROMACS Style Guide\n<http://manual.gromacs.org/current/dev-manual/style.html>\n\nISO C++ Coding Standards\n<https://isocpp.org/wiki/faq/coding-standards>\n\n### C++ Naming Styles\n\n#### C++ General Naming Rules\n\nFor the purposes of the naming rules below, a \"word\" is anything that you would write in English without internal spaces. This includes abbreviations, such as acronyms and initialisms. For names written in mixed case (also sometimes referred to as \"camel case\" or \"Pascal case\"), in which the first letter of each word is capitalized, prefer to capitalize abbreviations as single words, e.g., StartRpc() rather than StartRPC(), Id rather than ID, UtcTimestamp rather than UTCTimestamp.\n\n#### C++ Variable Names (all kinds of variables including but not limited to followings: global, local, const, static, member, parameters)\n\nThe names of variables (including function parameters) and data members are all lowercase, with underscores between words, i.e. snake case => snake_case\n\nFor simplicity and easy memorization of the naming rule, prefix or suffix should not be added to the variable names for different type of variables. For examples, the followings naming styles are not preferred: leading \"k\" in constant variables, prefix \"g_\" in global variables, trailing underscore in data member variables. This also makes easier to move variables to different scopes without renaming them.\n\n#### C++ Type Names (all kinds of types including but not limited to followings: struct, class, enum, typedef, using alias)\n\nType names start with a capital letter and have a capital letter for each new word, with no underscores, i.e. camel case => CamelCase\n\n#### C++ Function Names (function and member method)\n\nFunction names start with a capital letter and have a capital letter for each new word, with no underscores, i.e. camel case => CamelCase\n\n#### C++ Namespace Names (namespace)\n\nThe names of namespaces are all lowercase, with underscores between words, i.e. snake case => snake_case\n\n#### C++ Macro Names (#define, including but not limited to followings: macro constant, macro function)\n\nMacros should not be used. However, if they are absolutely needed, then they should be named with all capitals and underscores, i.e. macro case => MACRO_CASE\n\n#### C++ Enumerator Member Names (enum member)\n\nThe names of enumerator members are all lowercase, with underscores between words, i.e. snake case => snake_case\n\n#### C++ Main File Name (file containing the main() entry function)\n\nMain file name must have the same name as the final program binary name which should be all lowercase, with underscores between words, i.e. snake case => snake_case\n\n#### C++ Class File Names (file containing a single class declaration and/or definition)\n\nClass file names must have the same name as the single class name it contains which should start with a capital letter and have a capital letter for each new word, with no underscores, i.e. camel case => CamelCase\n\n#### C++ Template Parameter Names\n\nTemplate parameters should follow the naming style for their category: type template parameters should follow the rules for type names, and non-type template parameters should follow the rules for variable names.\n\n#### C++ Unit Test Test Suite Names\n\nUnit test test suite names must follow the nameing convention of type/class names with \"Test\" as postfix, i.e. camel case => CamelCaseTest\n\n#### C++ Unit Test Test Case Names\n\nUnit test test case names must follow the nameing convention of function names, i.e. camel case => CamelCase\n\n#### C++ Benchmark Function Names\n\nBenchmark Function names must follow the nameing convention of function names with \"Benchmark\" as postfix, i.e. camel case => CamelCaseBenchmark\n\n### C++ Code Formatting Styles\n\n#### C++ Indentation\n\nUse 4 spaces at a time for indentation. Do not use tabs in code. You should set your editor to emit spaces when you hit the tab key.\n\n#### C++ Comments\n\nOffset by exactly 1 space from the comment mark (e.g. //, /// or /*).\n\n```c++\n/// Structure representing a UTC date\nstruct UtcDate\n```\n\n#### C++ Alignment of Comments\n\nOffset by exactly 1 space from the end of longest line to be aligned.\n\n```c++\nconstexpr uint32_t utc_date_null_value = UINT32_MAX; ///< null value for UtcDate\nconstexpr uint16_t year_null_value = UINT16_MAX;     ///< null value for year\nconstexpr uint8_t month_null_value = UINT8_MAX;      ///< null value for month\nconstexpr uint8_t day_null_value = UINT8_MAX;        ///< null value for day\n```\n\n#### C++ Integer Literal\n\nInteger literal\n<https://en.cppreference.com/w/cpp/language/integer_literal>\n\nFundamental types\n<https://en.cppreference.com/w/cpp/language/types>\n\n```text\nSigned 8-bit integer (int8_t or char): 0 (no suffix)\nUnsigned 8-bit integer (uint8_t or unsigned char): 0U (suffix with U)\nSigned 16-bit integer (int16_t or short): 0 (no suffix)\nUnsigned 16-bit integer (uint16_t or unsigned short): 0U (suffix with U)\nSigned 32-bit integer (int32_t or long): 0L (suffix with L)\nUnsigned 32-bit integer (uint32_t or unsigned long): 0UL (suffix with UL)\nSigned 64-bit integer (int64_t or long long): 0LL (suffix with LL)\nUnsigned 64-bit integer (uint64_t or unsigned long long): 0ULL (suffix with ULL)\n```\n\n#### C++ Include Header Ordering\n\nGoogle C++ Style Guide: Names and Order of Includes\n<https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes>\n\nInclude header ordering should follow above \"Google C++ Style Guide: Names and Order of Includes\".\nExcept \"All of a project's header files should be listed as descendants of the project's source directory without use of UNIX directory aliases . (the current directory) or .. (the parent directory).\" as its useful for identifying same project headers.\n\nInclude headers in the following order: Related header, C system headers, C++ standard library headers, other libraries' headers, your project's headers.\nSeparate each non-empty group with one blank line.\nWithin each section the includes should be ordered alphabetically.\n\nC system headers (e.g. \\<stdlib.h>) and C++ standard library headers (e.g. \\<cstdlib>) must be enclosed by angle brackets\nOther headers (e.g. \"boost/asio.hpp\") must be enclosed by double quotes\n\nIn dir/foo.cc or dir/foo_test.cc, whose main purpose is to implement or test the stuff in dir2/foo2.h, order your includes as follows:\n\n```text\ndir2/foo2.h.\nA blank line\nC system headers (more precisely: headers in angle brackets with the .h extension), e.g., <unistd.h>, <stdlib.h>.\nA blank line\nC++ standard library headers (without file extension), e.g., <algorithm>, <cstddef>.\nA blank line\nOther libraries' .h files.\nA blank line\nYour project's .h files.\n```\n\nFor example, the includes in google-awesome-project/src/foo/internal/fooserver.cc might look like this:\n\n```c++\n#include \"foo/server/fooserver.h\"\n\n#include <sys/types.h>\n#include <unistd.h>\n\n#include <string>\n#include <vector>\n\n#include \"base/basictypes.h\"\n#include \"base/commandlineflags.h\"\n\n#include \"foo/server/bar.h\"\n```\n\n## Support Microbenchmark Performance Test\n\nMicro benchmarking libraries for C++\n<https://www.bfilipek.com/2016/01/micro-benchmarking-libraries-for-c.html>\n\nGoogle Benchmark\n<https://github.com/google/benchmark>\n\nsltbench\n<https://github.com/ivafanas/sltbench>\n\nSkyPat\n<https://github.com/skymizer/SkyPat>\n\n```ini\n# conanfile.txt\n[build_requires]\nbenchmark/1.5.1\n```\n\n## Use Git Submodules\n\nGit Tools - Submodules\n<https://www.git-scm.com/book/en/v2/Git-Tools-Submodules>\n\ngit-submodule - Initialize, update or inspect submodules\n<https://git-scm.com/docs/git-submodule>\n\n```bash\ngit submodule add <repository url> [<submodule name>]\n```\n\n## List GCC Default Include and Library Paths\n\nLibrary path in gcc:\n<https://transang.me/library-path-in-gcc/>\n\n### List GCC Default Include Paths\n\nWhat are the GCC default include directories?:\n<https://stackoverflow.com/questions/4980819/what-are-the-gcc-default-include-directories>\n\n```bash\necho | gcc -xc++ -E -Wp,-v - 2>&1 | grep '^[[:space:]]*/' | sed 's/^[[:space:]]*//'\n```\n\n### List GCC Default Library Paths\n\nHow to print the ld(linker) search path:\n<https://stackoverflow.com/questions/9922949/how-to-print-the-ldlinker-search-path>\n\n```bash\ngcc -print-search-dirs | sed '/^lib/b 1;d;:1;s,/[^/.][^/]*/\\.\\./,/,;t 1;s,:[^=]*=,:;,;s,;,;  ,g' | tr \\; \\\\012 | tr : \\\\012 | grep '^[[:space:]]*/' | sed 's/^[[:space:]]*//'\n```\n\n## Bash Auto Completion of Makefile Targets\n\nbash completion of makefile target:\n<https://stackoverflow.com/questions/4188324/bash-completion-of-makefile-target>\n\nHow to add bash auto completion in Ubuntu Linux:\n<https://www.cyberciti.biz/faq/add-bash-auto-completion-in-ubuntu-linux/>\n\nAdd below line to `~/.bashrc` file to enable auto completion of CMake build targets using `bash-completion` Linux package:\n\n```bash\ncomplete -W \"\\`make help 2>/dev/null | grep -oE '^\\.\\.\\. [a-zA-Z0-9_.-]+' | sed 's/\\.\\.\\. //'\\`\" cmake\n```\n\nAdd below line to `~/.bashrc` file to enable auto completion of Makefile targets using `bash-completion` Linux package:\n\n```bash\ncomplete -W \"\\`grep -oE '^[a-zA-Z0-9_.-]+:([^=]|$)' ?akefile | sed 's/[^a-zA-Z0-9_.-]*$//'\\`\" make\n```\n\nAdd below line instead of above one to `~/.bashrc` file to enable auto completion of Makefile targets with CMake build targets using `bash-completion` Linux package:\n\n```bash\ncomplete -W \"\\`grep -oE '^[a-zA-Z0-9_.-]+:([^=]|$)' ?akefile | sed 's/[^a-zA-Z0-9_.-]*$//'\\` \\`make help 2>/dev/null | grep -oE '^\\.\\.\\. [a-zA-Z0-9_.-]+' | sed 's/\\.\\.\\. /CMAKE_BUILD_TARGET-/'\\`\" make\n```\n\nSource `~/.bashrc` file after making the change to make it take effect:\n\n```bash\nsource ~/.bashrc\n```\n\n## Install Jenkins\n\nInstalling Jenkins - WAR files:\n<https://www.jenkins.io/doc/book/installing/war-file/>\n\n```bash\npython -c \"import os, requests; os.makedirs(os.path.expanduser(r'$(JENKINS_HOME)'), mode=0o755, exist_ok=True); open(os.path.join(os.path.expanduser(r'$(JENKINS_HOME)'), 'jenkins.war'), 'wb').write(requests.get('https://get.jenkins.io/war-stable/latest/jenkins.war', allow_redirects=True).content)\"\n```\n\n## Start Jenkins Web Application\n\n```bash\njava -jar $(JENKINS_HOME)/jenkins.war --httpPort=8080\n```\n\n## Jenkins Home Folder Location\n\n```bash\n# Linux\n~/.jenkins\n```\n\n```cmd\n# Windows\n%USERPROFILE%\\.jenkins\n```\n\n## Continuous Integration for C++ Projects with Jenkins\n\nJenkins - Pipeline:\n<https://www.jenkins.io/doc/book/pipeline/>\n\nContinuous Integration for C/C++ Projects with Jenkins and Conan:\n<https://www.jenkins.io/blog/2017/07/07/jenkins-conan/>\n\nIntroduction into an Automated C++ Build Setup with Jenkins and CMake:\n<https://thoughts-on-coding.com/2019/03/27/introduction-into-build-automation-setup-with-jenkins-and-cmake/>\n\nJenkins - Blue Ocean:\n<https://www.jenkins.io/doc/book/blueocean/>\n\nVisual Pipeline Creation in Blue Ocean:\n<https://www.youtube.com/watch?v=LzFmTiH8nos>\n\n## Gather Test Results with xUnit Plugin for Jenkins\n\nJenkins - Recording tests and artifacts:\n<https://www.jenkins.io/doc/pipeline/tour/tests-and-artifacts/>\n\nxUnit plugin - step([$class: 'XUnitPublisher']): Publish xUnit test result report:\n<https://www.jenkins.io/doc/pipeline/steps/xunit/>\n\nJenkins Core - archiveArtifacts: Archive the artifacts:\n<https://www.jenkins.io/doc/pipeline/steps/core/#archiveartifacts-archive-the-artifacts>\n\nApache Ant - Directory-based Tasks - Patterns:\n<https://ant.apache.org/manual/dirtasks.html#patterns>\n\n### Gather CTest Results with xUnit Plugin for Jenkins\n\nProducing CTest results in Jenkins (xUnit >= 1.58):\n<https://stackoverflow.com/questions/21633716/producing-ctest-results-in-jenkins-xunit-1-58>\n\nctest(1):\n<https://cmake.org/cmake/help/latest/manual/ctest.1.html>\n\nJenkinsfile\n\n```groovy\npipeline {\n  agent any\n  stages {\n    stage('Test') {\n      steps {\n        sh \"cd ${env.BUILD_TYPE} && ctest -C ${env.BUILD_TYPE} -T Test --no-compress-output\"\n      }\n      post {\n        always {\n          archiveArtifacts artifacts: \"${env.BUILD_TYPE}/Testing/**/*.xml\", fingerprint: true\n          xunit (\n            thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\n            tools: [\n              CTest(pattern: \"${env.BUILD_TYPE}/Testing/**/*.xml\", deleteOutputFiles: true, failIfNotNew: false, skipNoTestFiles: true, stopProcessingIfError: true)\n            ]\n          )\n        }\n      }\n    }\n  }\n}\n```\n\n### Gather Google Test Results with xUnit Plugin for Jenkins\n\nUsing gtest in jenkins:\n<https://stackoverflow.com/questions/11540633/using-gtest-in-jenkins>\n\nAdvanced googletest Topics - Generating an XML Report:\n<https://google.github.io/googletest/advanced.html#generating-an-xml-report>\n\nJenkinsfile\n\n```groovy\npipeline {\n  agent any\n  stages {\n    stage('Test') {\n      environment {\n        GTEST_OUTPUT = 'xml:../gtest/'\n      }\n      steps {\n        sh \"cd ${env.BUILD_TYPE} && ctest -C ${env.BUILD_TYPE} -T Test --no-compress-output\"\n      }\n      post {\n        always {\n          archiveArtifacts artifacts: \"${env.BUILD_TYPE}/gtest/**/*.xml\", fingerprint: true\n          xunit (\n            thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\n            tools: [\n              GoogleTest(pattern: \"${env.BUILD_TYPE}/gtest/**/*.xml\", deleteOutputFiles: true, failIfNotNew: false, skipNoTestFiles: true, stopProcessingIfError: true)\n            ]\n          )\n        }\n      }\n    }\n  }\n}\n```\n\n## Cross Platform Pipeline Support in Jenkins\n\nConditionals in a Declarative Pipeline Jenkinsfile:\n<https://michakutz.medium.com/conditionals-in-a-declarative-pipeline-jenkinsfile-d1a4a44e93bb>\n\nScripted Pipeline - Flow Control:\n<https://www.jenkins.io/doc/book/pipeline/syntax/#flow-control>\n\nHow to determine the current operating system in a Jenkins pipeline:\n<https://stackoverflow.com/questions/44105814/how-to-determine-the-current-operating-system-in-a-jenkins-pipeline>\n\nisUnix: Checks if running on a Unix-like node:\n<https://www.jenkins.io/doc/pipeline/steps/workflow-basic-steps/#isunix-checks-if-running-on-a-unix-like-node>\n\nJenkinsfile\n\n```groovy\npipeline {\n  agent any\n  stages {\n    stage('Test') {\n      environment {\n        GTEST_OUTPUT = 'xml:../gtest/'\n      }\n      parallel {\n        stage('Unix') {\n          when { expression { isUnix() } }\n          steps {\n            sh \"cd ${env.BUILD_TYPE} && ctest -C ${env.BUILD_TYPE} -T Test --no-compress-output\"\n          }\n        }\n        stage('Windows') {\n          when { expression { !isUnix() } }\n          steps {\n            bat \"\"\"make venv_activate\ncd ${env.BUILD_TYPE} && ctest -C ${env.BUILD_TYPE} -T Test --no-compress-output\"\"\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## Dynamic Stage Name Support in Jenkins\n\nStage name must be a string literal - Solution:\n<https://issues.jenkins.io/browse/JENKINS-43820?focusedCommentId=397048&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-397048>\n\n```groovy\npipeline {\n  agent any\n  stages {\n    stage('Init') {\n      steps {\n        script {\n          env.BUILD_TYPE = input message: 'Set parameters:', parameters: [choice(name: 'BUILD_TYPE', choices: ['Debug', 'Release', 'MinSizeRel', 'RelWithDebInfo'], description: 'Build Type')]\n          parallel (\n            \"${env.BUILD_TYPE}\": {\n              stage('Build Type') {\n                echo \"Build Type: ${env.BUILD_TYPE}\"\n              }\n            }\n          )\n        }\n      }\n    }\n  }\n}\n```\n\n## Run Multiple Configurations in Parallel using Declarative Pipeline Matrix in Jenkins\n\nWelcome to the Matrix:\n<https://www.jenkins.io/blog/2019/11/22/welcome-to-the-matrix/>\n\nSpecifying a matrix of one or more dimensions:\n<https://docs.cloudbees.com/docs/admin-resources/latest/pipelines/matrix>\n\nPipeline Syntax - when:\n<https://www.jenkins.io/doc/book/pipeline/syntax/#when>\n\n```groovy\npipeline {\n  agent none\n  stages {\n    stage('Pipeline') {\n      matrix {\n        when {\n          allOf {\n            anyOf {\n              expression { env.BUILD_AGENT_FILTER == 'All' }\n              expression { env.BUILD_AGENT_FILTER == env.BUILD_AGENT }\n            }\n            anyOf {\n              expression { env.BUILD_TYPE_FILTER == 'All' }\n              expression { env.BUILD_TYPE_FILTER == env.BUILD_TYPE }\n              allOf {\n                expression { env.BUILD_TYPE_FILTER == 'Debug and Release' }\n                anyOf {\n                  expression { env.BUILD_TYPE == 'Debug' }\n                  expression { env.BUILD_TYPE == 'Release' }\n                }\n              }\n            not {\n              allOf {\n                expression { env.BUILD_TYPE_FILTER == 'All' }\n                expression { env.BUILD_TYPE == 'Any' }\n              }\n            }\n          }\n        }\n        axes {\n          axis {\n            name 'BUILD_AGENT'\n            values 'Any', 'Linux', 'Windows', 'Docker'\n          }\n          axis {\n            name 'BUILD_TYPE'\n            values 'Debug', 'Release', 'MinSizeRel', 'RelWithDebInfo'\n          }\n        }\n        stages {\n          stage('Check') {\n            options {\n              timeout(time: 5, unit: 'SECONDS')\n            }\n            agent {\n              node {\n                label env.BUILD_AGENT == 'Any' ? '' : env.BUILD_AGENT\n                customWorkspace \"${env.JOB_NAME}/${env.BUILD_AGENT}/${env.BUILD_TYPE}\"\n              }\n            }\n            steps {\n              echo \"Build Agent: ${env.BUILD_AGENT}\"\n              echo \"Build Type: ${env.BUILD_TYPE}\"\n              echo \"Build Workspace: ${env.JOB_NAME}/${env.BUILD_AGENT}/${env.BUILD_TYPE}\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## Trigger Jenkins Parameterized Build Using API\n\nJenkins : Parameterized Build:\n<https://wiki.jenkins.io/display/JENKINS/Parameterized+Build>\n\nHow to remotely trigger Jenkins multibranch pipeline project build?:\n<https://stackoverflow.com/questions/39490150/how-to-remotely-trigger-jenkins-multibranch-pipeline-project-build>\n\njenkins rest api returns 400 nothing is submitted:\n<https://stackoverflow.com/questions/52101155/jenkins-rest-api-returns-400-nothing-is-submitted>\n\n### Add New User API Token\n\nDashboard > Manage Jenkins > Manager Users > <user_name> > Configure > API Token > Add new Token\n\n### Parameterized Build HTTP Post Request\n\n```bash\ncurl --location --request POST 'http://localhost:18080/job/cpp_project_framework/job/master/buildWithParameters?BUILD_AGENT=Any&BUILD_TYPE=Debug&ENABLE_DEPLOY_STAGE=true' --user <user_name>:<api_token>\n```\n\n## Publish HTML Report (Coverage, Doxygen) in Jenkins\n\nHTML Publisher:\n<https://plugins.jenkins.io/htmlpublisher/>\n\nDeclarative Pipeline: Publishing HTML Reports:\n<https://www.jenkins.io/blog/2017/02/10/declarative-html-publisher/>\n\n```groovy\npost {\n  success {\n    archiveArtifacts artifacts: \"doxygen/\", fingerprint: true\n    publishHTML target: [\n        allowMissing: false,\n        alwaysLinkToLastBuild: false,\n        keepAll: true,\n        reportDir: 'doxygen/html/',\n        reportFiles: 'index.html',\n        reportName: 'Doxygen'\n    ]\n  }\n}\n```\n\n## Start Jenkins Web Application with No Content Security Policy (CSP)\n\nConfiguring Content Security Policy:\n<https://www.jenkins.io/doc/book/security/configuring-content-security-policy/>\n\nJenkins - HTML Publisher Plugin - No CSS is displayed when report is viewed in Jenkins Server:\n<https://stackoverflow.com/questions/35783964/jenkins-html-publisher-plugin-no-css-is-displayed-when-report-is-viewed-in-j>\n\nRun Jenkins with no CSP header value to allow JavaScript and CSS (for HTML Publisher Plugin):\n\n```bash\njava -Dhudson.model.DirectoryBrowserSupport.CSP= -jar $(JENKINS_HOME)/jenkins.war --httpPort=8080\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sheepgrass/cpp_project_framework",
    "keywords": "",
    "license": "GNU Affero General Public License v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cpp-project-framework",
    "package_url": "https://pypi.org/project/cpp-project-framework/",
    "platform": "",
    "project_url": "https://pypi.org/project/cpp-project-framework/",
    "project_urls": {
      "Homepage": "https://github.com/sheepgrass/cpp_project_framework"
    },
    "release_url": "https://pypi.org/project/cpp-project-framework/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "C++ Project Framework is a framework for creating C++ project.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14302540,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccca3b7cbe5909964e9069880886a2d942f84108595fbdaa869d02521ba526f3",
          "md5": "18f7bbe750956c07c470ce4c3cd7834a",
          "sha256": "5cd92f8ce5706ca1fa998b7709f67274feb4c6ca459d8e7a940a148f5960690d"
        },
        "downloads": -1,
        "filename": "cpp_project_framework-1.0.0-2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18f7bbe750956c07c470ce4c3cd7834a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 96351,
        "upload_time": "2022-07-01T01:11:19",
        "upload_time_iso_8601": "2022-07-01T01:11:19.497826Z",
        "url": "https://files.pythonhosted.org/packages/cc/ca/3b7cbe5909964e9069880886a2d942f84108595fbdaa869d02521ba526f3/cpp_project_framework-1.0.0-2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4521a608c9aa1e791b586ce90c1d2fe3245ea0388210f342e44c663f96fab6c5",
          "md5": "df8cad9e5870aeed95872087a9ca9392",
          "sha256": "7b6def97241487305c8bbeac8d00a57119a991d73e994584ff9be026bed0c457"
        },
        "downloads": -1,
        "filename": "cpp_project_framework-1.0.0-2.tar.gz",
        "has_sig": false,
        "md5_digest": "df8cad9e5870aeed95872087a9ca9392",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 106438,
        "upload_time": "2022-07-01T01:11:22",
        "upload_time_iso_8601": "2022-07-01T01:11:22.141131Z",
        "url": "https://files.pythonhosted.org/packages/45/21/a608c9aa1e791b586ce90c1d2fe3245ea0388210f342e44c663f96fab6c5/cpp_project_framework-1.0.0-2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ccca3b7cbe5909964e9069880886a2d942f84108595fbdaa869d02521ba526f3",
        "md5": "18f7bbe750956c07c470ce4c3cd7834a",
        "sha256": "5cd92f8ce5706ca1fa998b7709f67274feb4c6ca459d8e7a940a148f5960690d"
      },
      "downloads": -1,
      "filename": "cpp_project_framework-1.0.0-2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "18f7bbe750956c07c470ce4c3cd7834a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 96351,
      "upload_time": "2022-07-01T01:11:19",
      "upload_time_iso_8601": "2022-07-01T01:11:19.497826Z",
      "url": "https://files.pythonhosted.org/packages/cc/ca/3b7cbe5909964e9069880886a2d942f84108595fbdaa869d02521ba526f3/cpp_project_framework-1.0.0-2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4521a608c9aa1e791b586ce90c1d2fe3245ea0388210f342e44c663f96fab6c5",
        "md5": "df8cad9e5870aeed95872087a9ca9392",
        "sha256": "7b6def97241487305c8bbeac8d00a57119a991d73e994584ff9be026bed0c457"
      },
      "downloads": -1,
      "filename": "cpp_project_framework-1.0.0-2.tar.gz",
      "has_sig": false,
      "md5_digest": "df8cad9e5870aeed95872087a9ca9392",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 106438,
      "upload_time": "2022-07-01T01:11:22",
      "upload_time_iso_8601": "2022-07-01T01:11:22.141131Z",
      "url": "https://files.pythonhosted.org/packages/45/21/a608c9aa1e791b586ce90c1d2fe3245ea0388210f342e44c663f96fab6c5/cpp_project_framework-1.0.0-2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}