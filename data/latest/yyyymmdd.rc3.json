{
  "info": {
    "author": "shx2",
    "author_email": "shx222@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "=========\nyyyymmdd\n=========\n\nConvenient Date and DateRange classes.\n\n\n``Date``\n====================================\n\nA ``yyyymmdd``-formatted date.\n\n``Date`` is a subclass of ``datetime.date``, and is mostly (but not fully) compatible with it.\n\nIt supports flexible creation of ``Date`` objects, e.g.: from a yyyymmdd string, from\ndelta (number of days relative to today), aliases ('yesterday', 'today', 'MIN', 'MAX', etc.),\nfrom a ``datetime.date`` object, etc.\n\nIt defines convenient date arithmetic: ``Date +/- int => Date``, ``Date - Date => int``.\n\nHere is an example::\n\n    >>> from yyyymmdd import Date\n    >>> import datetime\n    >>>\n    >>> Date.today()\n    Date(20200522)\n    >>> Date('-7')  # a week ago\n    Date(20200515)\n    >>> Date(20191123) == Date('20191123') == Date('2019-11-23') == Date(datetime.date(2019, 11, 23))\n    True\n    >>> Date(20191123).replace(month=1, day=1)\n    Date(20190101)\n    >>> Date('19991231') + 1\n    Date(20000101)\n    >>> Date('tomorrow') - Date('yesterday')\n    2\n    >>> Date('tomorrow') - 1 == Date('today')\n    True\n    >>> x = Date(20191123)\n    >>> x.yyyy + x.mm + x.dd\n    '20191123'\n\n\n\n``DateRange``\n====================================\n\nA ``DateRange`` is a `range <https://docs.python.org/3.8/library/functions.html#func-range>`_ -like type,\nwhose elements are ``Date`` objects.\n\nThis class mostly follows the semantics of the builtin ``range`` type.  E.g.,\nstop is exclusive, behavior of steps, negative steps, slicing,\n``range1 == range2`` iff ``tuple(range1) == tuple(range2)``, etc.\n\nCreation of ``DateRange`` objects is flexible.  ``start`` and ``stop`` parameters are converted\nto ``Date`` automatically.  See ``Date`` class for values which can be converted.\n\n\nHere is an example::\n\n    from yyyymmdd import Date, DateRange\n\n    >>> from yyyymmdd import Date, DateRange\n    >>>\n    >>> len(DateRange('today', 'today'))  # empty\n    0\n    >>> DateRange.from_string('yesterday:yesterday') == DateRange.empty()\n    True\n    >>> len(DateRange.from_string('-7:-1'))  # start and stop are relative to today\n    6\n    >>> DateRange.from_string('2020501')  # a singleton range\n    DateRange(2020501, 2020502)\n    >>> x = DateRange.from_string('2020401:2020515:7')  # 1-week step\n    >>> list(x)\n    [Date(2020401), Date(2020408), Date(2020415), Date(2020422), Date(2020429), Date(2020506), Date(2020513)]\n    >>> x[0], x[-1]\n    (Date(2020401), Date(2020513))\n    >>> x[1:3]\n    DateRange(2020408, 2020422, 7)\n    >>> Date(2020422) in x\n    True\n    >>> list(DateRange.from_string('2020515:2020401:-7'))  # negative step\n    [Date(2020515), Date(2020508), Date(2020501), Date(2020424), Date(2020417), Date(2020410), Date(2020403)]\n    >>> DateRange.from_string('20200101:%+31')  # \"%\" means \"the date on the other side\"\n    DateRange(20200101, 20200201)\n    >>> DateRange.from_string('%-365:20200101')  # \"%\" means \"the date on the other side\"\n    DateRange(20190101, 20200101)\n\n\n\n``ArgumentParser`` integration, powered by ``apegears``\n========================================================\n\nThe ``Date`` and ``DateRange`` types can be used as cli argument types, when using\n`apegears' <https://pypi.org/project/apegears/>`_ ``ArgumentParser``.\n\nHere is an example::\n\n    >>> from yyyymmdd import Date, DateRange\n    >>> from apegears import ArgumentParser\n    >>>\n    >>> parser = ArgumentParser()\n    >>> parser.add_optional('x', type=Date)\n    >>> parser.add_optional('dates', 'd', type=DateRange)\n\n    >>> print(parser.parse_args('-x 20191123 --dates yest:tomorrow'.split()))\n    Namespace(dates=DateRange(20200521, 20200523), x=Date(20191123))  # if today is 20200522\n\n    >>> print(parser.parse_args('-h'.split()))\n    usage: [-h] [-x DATE] [--dates DATE_RANGE]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -x DATE               Date, like: yyyymmdd, +days, -days, \"yesterday\", etc.\n      --dates DATE_RANGE, -d DATE_RANGE\n                            DateRange, like: \"DATE:DATE\" or \"DATE:DATE:STEP\"\n\nIf you prefer using the standard ``argparse.ArgumentParser``, you can define Date arguments using ``type=Date``, and\nDateRange arguments using ``type=DateRange.from_string``.  This isn't as powerful as using ``apegears``\n(no default argument names, no default help message, no default metavar, etc.).\n\n\nInstallation\n====================================\n\nUsing pip::\n\n    pip install yyyymmdd",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shx2/yyyymmdd",
    "keywords": "date datetime range",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yyyymmdd",
    "package_url": "https://pypi.org/project/yyyymmdd/",
    "platform": "POSIX",
    "project_url": "https://pypi.org/project/yyyymmdd/",
    "project_urls": {
      "Homepage": "https://github.com/shx2/yyyymmdd"
    },
    "release_url": "https://pypi.org/project/yyyymmdd/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Convenient Date and DateRange classes.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7605808,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acf42e7ae9280e8a0eadfdb2da516aa8e2d3ba0a373fe89e7ddf7a9a0ff19b7b",
          "md5": "eab9c49ba4ad018791586f00a8651c5a",
          "sha256": "c0772c7110c1b99684132e0164b334534a6b9c1912c2ba5902ea34cf715d108a"
        },
        "downloads": -1,
        "filename": "yyyymmdd-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "eab9c49ba4ad018791586f00a8651c5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8757,
        "upload_time": "2020-05-22T14:01:46",
        "upload_time_iso_8601": "2020-05-22T14:01:46.444024Z",
        "url": "https://files.pythonhosted.org/packages/ac/f4/2e7ae9280e8a0eadfdb2da516aa8e2d3ba0a373fe89e7ddf7a9a0ff19b7b/yyyymmdd-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ef2ab4d709a334c791840e38fea88333ac8c8baabbb378f7167a7a0544b1145",
          "md5": "e3bafaadd52bc5d01abca6fb6a4ab161",
          "sha256": "4442e39db3746e8a0e6bea1e07b44281e8802bcdcfb6020cc5bd6858f0fd6abb"
        },
        "downloads": -1,
        "filename": "yyyymmdd-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e3bafaadd52bc5d01abca6fb6a4ab161",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10800,
        "upload_time": "2020-05-22T15:17:55",
        "upload_time_iso_8601": "2020-05-22T15:17:55.168027Z",
        "url": "https://files.pythonhosted.org/packages/2e/f2/ab4d709a334c791840e38fea88333ac8c8baabbb378f7167a7a0544b1145/yyyymmdd-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efb2355e97c70f313ac287a8452c283bcc18c61109c18a00433ae4147815abc1",
          "md5": "9f4bf20b50d46c9c9860939ef9f5526f",
          "sha256": "32aeaac749060c0cd4463623c9e6e90f966ad9e99a576d6df90c846b6d98c7a4"
        },
        "downloads": -1,
        "filename": "yyyymmdd-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9f4bf20b50d46c9c9860939ef9f5526f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10820,
        "upload_time": "2020-07-01T11:34:32",
        "upload_time_iso_8601": "2020-07-01T11:34:32.000898Z",
        "url": "https://files.pythonhosted.org/packages/ef/b2/355e97c70f313ac287a8452c283bcc18c61109c18a00433ae4147815abc1/yyyymmdd-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efb2355e97c70f313ac287a8452c283bcc18c61109c18a00433ae4147815abc1",
        "md5": "9f4bf20b50d46c9c9860939ef9f5526f",
        "sha256": "32aeaac749060c0cd4463623c9e6e90f966ad9e99a576d6df90c846b6d98c7a4"
      },
      "downloads": -1,
      "filename": "yyyymmdd-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9f4bf20b50d46c9c9860939ef9f5526f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10820,
      "upload_time": "2020-07-01T11:34:32",
      "upload_time_iso_8601": "2020-07-01T11:34:32.000898Z",
      "url": "https://files.pythonhosted.org/packages/ef/b2/355e97c70f313ac287a8452c283bcc18c61109c18a00433ae4147815abc1/yyyymmdd-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}