{
  "info": {
    "author": "William Long",
    "author_email": "admin@longapalooza.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "=====\nTEEPy\n=====\n\nTEEPy stands for Tech Engineering Exam in Python. TEEPy's aim is to make an\neasy-to-use framework to create clean and professional-looking paper-based\nassessments (e.g., quiz, exam, etc.) with a focus on STEM (Science, Technology,\nEngineering, and Math) related topics. There are two intended end-users of\nTEEPy, question creators (QCs), and assessment creators (ACs). QCs create\nindividual questions or problems that will be used in a particular assessment\nthat an AC will use to create the overall assessment. TEEPy accomplishes these\ngoals by generating all question and assessment content as HTML and then\nrendering the HTML to create PDFs (using a combination of cefpython_ and\npyppeteer_). There is also some `Beautiful Soup`_ thrown in there as well. TEEPy\nsupports the use of LaTex_ (via MathJax_) as well as the use of units (using the\npackage pint_). TEEPy is capable of randomizing question placement and answer\nchoices to questions.\n\nInstallation\n============\n\nInstallation is a simple matter of\n\n.. code-block:: bash\n\n    $ pip install teepy\n\nand then enjoy!\n\nRoles\n=====\n\nThere are two roles that an end-user of TEEPy can assume, question creator (QC)\nor assessment creator (AC). QCs deal solely with individual questions or problem\ncreation. ACs deal with the assessment as a whole. ACs take one or more\nquestions created by QCs and make an assessment out of the selected questions.\n\nQuestion Creator (QC)\n---------------------\n\nThe goal of a QC is to create individual questions that are self-contained. The\ncontent and calculations in the individual question file will not interact with\ncontent and calculations performed in another question file. Each question file\nmust contain two function definitions, a :code:`PROBLEM()` function and a\n:code:`CHOICES()` function. Each of these functions takes one argument, an index\nvalue variable. The index value is used to create different versions of a\nparticular question. The :code:`PROBLEM()` function uses the function's\ndocstring to define the problem statement and should return a dictionary\ncontaining at least a  key of :code:`answer`. If the question has no answer\n(e.g., in the case of an open-ended question), a :code:`None` may be returned\nfrom the :code:`PROBLEM()` function. An example of an open-ended question is\nshown below.\n\n.. code-block:: python\n\n    # An open-ended question\n    def PROBLEM(ind):\n        '''What is the meaning of life?'''\n\n        return None\n\nEven if there are no different versions of the question, the :code:`PROBLEM()`\nshould be a function of the index variable :code:`ind`.\n\nIn the event a question does have a correct answer (or answers), the value of\nthe key :code:`answer` should be a single value or a list of values (in the case\nof a multiple answer problem). An example of a single answer question is shown\nbelow.\n\n.. code-block:: python\n\n    # A single answer question\n    def PROBLEM(ind):\n        '''What color is the sky?'''\n\n        answer = 'Blue'\n\n        return {'answer': answer}\n\nAn example of a multiple-answer question is shown below.\n\n.. code-block:: python\n\n    # A multiple-answer question\n    def PROBLEM(ind):\n        '''How many licks does it take to get to the center of a Tootsie Pop?'''\n\n        answer = [3, 'The world may never know.']\n\n        return {'answer': answer}\n\nThe return value of :code:`PROBLEM()` may also contain a key of :code:`given`.\nThe value of the key :code:`given` should be a dictionary that includes any\nvariables used in the question statement. An example of using a given variable\nis shown below.\n\n.. code-block:: python\n\n    # A question with a given variable\n    def PROBLEM(ind):\n        '''A {object} is an example of what?'''\n\n        obj = ['dog', 'carrot', 'diamond']\n\n        answers = ['Animal', 'Vegatable', 'Mineral']\n\n        given = {'object': obj[ind]}\n\n        return {'answer': answers[ind], 'given': given}\n\nIt should be noted in the example above that three different versions of the\nquestions may be created by simply changing the :code:`ind` variable to a value\nof zero, one, or two. Units may also be used in the :code:`PROBLEM()` function.\nAn example of utilizing units is shown below.\n\n.. code-block:: python\n\n    import teepy\n\n    def PROBLEM(ind):\n        '''If points A, B, and C lie along a straight line in that order,\n    and the distance between point A and B is $ {L1} $, and the distance\n    between point B and C is $ {L2} $, what is the distance between point\n    A and C?'''\n\n        L1s = [1, 2, 3]\n        L2s = [4, 5, 6]\n\n        L1 = teepy.define_unit(L1s[ind], 'ft')\n        L2 = teepy.define_unit(L2s[ind], 'cm')\n\n        L = L1 + L2\n\n        answer = L.to('m')\n        given = {'L1': L1,\n                 'L2': L2}\n\n        return {'answer': answer, 'given': given}\n\nThere are a few things to note about the example above. If a given variable has\nunits, the rendered version of the variable (i.e., what is in the problem\nstatement) needs to be enclosed in dollar signs. The units of a given variable\nget converted into LaTeX. LaTeX code that is not enclosed in dollar signs will\nnot be rendered as LaTeX. The TEEPy function :code:`define_unit` may be used to\nassign units to a variable. This function is :code:`pint`'s :code:`Q_` function\n(please refer to :code:`pint`'s documentation on how to use it). Once units have\nbeen assigned to a variable, calculations performed with those variables will\nautomatically perform the necessary conversions when dealing with different\ntypes of units.\n\nThe :code:`CHOICES()` function must return a :code:`None` value, or a dictionary\ncontaining the key :code:`choices`. No multiple-choice choices will be displayed\nif :code:`CHOICES()` returns a :code:`None` value. An open-ended question is\ntypically when this is needed. Below is an example of a :code:`CHOICES()`\nfunction that returns a :code:`None` value.\n\n.. code-block:: python\n\n    def CHOICES(ind):\n\n        return None\n\nIf multiple-choice answers are provided, the :code:`CHOICES()` function should\nreturn a dictionary containing the key :code:`choices`. The value of this key\nshould be a list containing the correct answer and wrong answers. In other\nwords, it should include everything that is to be listed as answer choices in\nthe question. An example of using the :code:`choices` key-value pair is shown\nbelow.\n\n.. code-block:: python\n\n    import teepy\n\n    def CHOICES(ind):\n        choices = teepy.get_answers(PROBLEM(ind))\n\n        choices.extend(['Red',\n                        'Green',\n                        'Yellow',\n                        'Orange'])\n\n        random.shuffle(choices)\n\n        return {'choices': choices}\n\nThe example above also illustrates the use of a TEEPy function called\n:code:`get_answers()`. The function takes one argument of a :code:`PROBLEMS()`\nfunction with the particular index value that is to used. The function always\nreturns a list even if the answer to the problem is a single value answer. The\nexample above also demonstrates the use of Python's built-in module\n:code:`random`. :code:`random` has many useful methods but the one here shuffles\na list. The list of choices does not have to be rearranged. An example of not\nmixing the list of options is shown below.\n\n.. code-block:: python\n\n    import teepy\n\n    def CHOICES(ind):\n        choices = [1, 2]\n        choices.extend(teepy.get_answers(PROBLEM(ind)))\n\n        return {'choices': choices}\n\nThere are a couple of things worth mentioning about the :code:`CHOICES()`\nfunction when an answer has units. When an answer has units, TEEPy has the\nfunction :code:`generate_choices()` available to generate randomized choices.\nThe function takes three arguments; the number of choices, the correct answer,\nand the step size between choices. The :code:`CHOICES()` function must also have\na key :code:`choice_format` in the dictionary it returns. The value of this key\nis the desired format type of the answer choices. An example of using the\n:code:`generate_choices()` function and the :code:`choice_format` key is shown\nbelow.\n\n.. code-block:: python\n\n    import teepy\n\n    def CHOICES(ind):\n        N = 10\n        choice_format = '{:0.3f}'\n        step = random.uniform(0.01, 0.05)\n        ans = teepy.get_answers(PROBLEM(ind))\n\n        choices = teepy.generate_choices(N, ans, step)\n\n        return {'choices': choices, 'choice_format': choice_format}\n\nAll of the examples seen above may be found in the examples directory.\n\nAssessment Creator (AC)\n-----------------------\n\nAn assessment creator (AC) is an individual that takes questions created by QCs\nand arranges them to form an assessment (e.g., quiz, exam, etc.). The AC will\ndesign the assessment layout and set the question point values. To do so, an AC\nwill initialize a :code:`teepy.begin()` class. This class will be the handle for\nstructuring the assessment content. When initializing the class, two arguments\nare typically used; :code:`n_forms` and :code:`n_inds`. :code:`n_forms` sets the\nnumber of randomized forms to generate. This value is typically the number of\nstudents taking the assessment. The :code:`n_inds` argument sets the number of\nversions each question has. Currently, TEEPy requires the number of versions a\nquestion has to be the same between different questions (i.e., if question A has\nthree different versions, question B must also have three different versions).\nThe exception to this rule is if the question's :code:`PROBLEM()` and\n:code:`CHOICES()` function do not utilize the :code:`ind` variable (as in the\ncase of the open-ended question shown previously). An example of initializing\nthe TEEPy :code:`begin` class is shown below.\n\n.. code-block:: python\n\n    import teepy\n\n    exam = teepy.begin(n_forms = 5, n_inds = 3)\n\nIn the example above, the TEEPy :code:`begin` class will generate five\nrandomized assessments where each question in the assessment has three different\nversions. The :code:`begin` class has a method called :code:`HTML` that allows\nthe addition of arbitrary HTML content to be added to the assessment. An example\nof using the :code:`HTML` is shown below.\n\n.. code-block:: python\n\n    exam.HTML('''<div style=\"text-align: center;\">\n    <h1>COURSE NAME</h1><br>\n    <h2>ASSESMENT NAME</h2><br>\n    <h3>DATE</h3><br><br>\n    <h3>Form Number: ''' + exam.form_number() + '''</h3><br><br>\n    <h4>Printed Name: ________________________________________ </h4>\n    </div>''')\n\nIn the example above, the method :code:`form_number` is implemented. This method\ninserts the randomly generated assessment form number. It is always important to\ninclude this on an assessment. Otherwise, assessment forms may not be\ndistinguished from each other. Other methods are exposed in the :code:`begin`\nclass. An example of the :code:`new_page` and :code:`problem` methods are shown\nbelow.\n\n.. code-block:: python\n\n    exam.new_page()\n\n    exam.problem('path/to/question/file', 5)\n\nThe :code:`new_page` method inserts a page break at its placement. The\n:code:`problem` method is how question files are added to an assessment. The\n:code:`problem` method requires two arguments; the path to the question file and\nthe question's point value if a correct answer is given. The :code:`problem`\nmethod also can accept the keyword arguments of :code:`display_worth`,\n:code:`min_height`, and :code:`pts_incorrect`. :code:`display_worth` is a\nBoolean that sets whether the question's point value should be displayed or not.\n:code:`min_height` sets the minimum height of a question. The value supplied to\n:code:`min_height` gets translated into the CSS property of :code:`min-height`\nusing units of inches (e.g., :code:`min_height = 1.5` means the minimum height\nof the problem will be 1.5 inches). This keyword argument is helpful in\nquestions that require a certain amount of paper space for a student's written\ncomputation. The :code:`pts_incorrect` keyword argument indicates that an\nincorrect answer should result in a deduction of points, not just the failure to\nearn points. An example of utilizing the various keyword arguments of the method\n:code:`problem` is shown below.\n\n.. code-block:: python\n\n    exam.problem('path/to/question/file', 0,\n                 display_worth = False,\n                 min_height = 2.5,\n                 pts_incorrect = -2)\n\nThe final method exposed in the TEEPy :code:`begin` class is the :code:`section`\nmethod. This method allows for the grouping of content in the assessment. An\nexample of its use is shown below.\n\n.. code-block:: python\n\n    concept_section = exam.section(shuffle = True)\n\n    concept_section.problem('path/to/concept/question1', 3)\n    concept_section.problem('path/to/concept/quesiton2', 3)\n\n    exam.section(concept_section)\n\nThe order of content in a section may be randomized by setting the keyword\nargument :code:`shuffle` to :code:`True`. The final step in creating an\nassessment is to generate the forms. The assessment forms are generated by\ninvoking the :code:`generate` method of the TEEPy :code:`begin` class. Utilizing\nthe :code:`generate` method is shown below.\n\n.. code-block:: python\n\n    exam.generate()\n\nWhenever the :code:`generate` method is invoked, the number of assessment forms\nare generated, also well as :code:`n_inds` reference forms (which are assessment\nforms with all shuffling disabled and with the correct answers marked), and an\nExcel sheet containing assessment key information (i.e., correct answers for a\nparticular form, etc.). More examples of different functionality of TEEPy can be\nfound in the examples directory.\n\n.. _`Beautiful Soup`: https://pypi.org/project/beautifulsoup4/\n.. _`cefpython`: https://github.com/cztomczak/cefpython\n.. _`LaTeX`: https://en.wikipedia.org/wiki/LaTeX\n.. _`MathJax`: https://www.mathjax.org/\n.. _`pyppeteer`: https://github.com/pyppeteer/pyppeteer\n.. _`pint`: https://github.com/hgrecco/pint",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/longapalooza/teepy",
    "keywords": "Tech,Exam,Engineering",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "teepy",
    "package_url": "https://pypi.org/project/teepy/",
    "platform": null,
    "project_url": "https://pypi.org/project/teepy/",
    "project_urls": {
      "Homepage": "https://github.com/longapalooza/teepy"
    },
    "release_url": "https://pypi.org/project/teepy/0.3.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Tech Engineering Exam in Python",
    "version": "0.3.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15569897,
  "releases": {
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bc531e5e1a845b3ce373aa494c5ba353e1e7c2335f96dd69d8484e28796fb90",
          "md5": "6c95520edab71838c8925af6196eda57",
          "sha256": "48376b013761baffa2bb288db40917f75e00aecd505a186de9a49cd6155501a1"
        },
        "downloads": -1,
        "filename": "teepy-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6c95520edab71838c8925af6196eda57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50291,
        "upload_time": "2021-12-07T03:52:36",
        "upload_time_iso_8601": "2021-12-07T03:52:36.223673Z",
        "url": "https://files.pythonhosted.org/packages/7b/c5/31e5e1a845b3ce373aa494c5ba353e1e7c2335f96dd69d8484e28796fb90/teepy-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70680ad4960f75de0900042408aaf4bce5d0af3fbb5836ad710498bf5dae63a1",
          "md5": "71ba81d22c2ee5a8c9e8b9ade104a22a",
          "sha256": "208bf9a5208133796a02fdacba50af8d579f896535cf93a6c2ec132f79bbca51"
        },
        "downloads": -1,
        "filename": "teepy-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "71ba81d22c2ee5a8c9e8b9ade104a22a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50396,
        "upload_time": "2021-12-10T12:45:07",
        "upload_time_iso_8601": "2021-12-10T12:45:07.828663Z",
        "url": "https://files.pythonhosted.org/packages/70/68/0ad4960f75de0900042408aaf4bce5d0af3fbb5836ad710498bf5dae63a1/teepy-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d05964b440308f22471cd7269f71c1d2e6ebce72151b7eab69675494511337d",
          "md5": "36442b878e73393c6e8056812117a41d",
          "sha256": "53eae7c197f58abc1c79a7dc68b1fac6962c2de34ecab3c20708d3d86d300532"
        },
        "downloads": -1,
        "filename": "teepy-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "36442b878e73393c6e8056812117a41d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 54196,
        "upload_time": "2021-12-15T20:57:18",
        "upload_time_iso_8601": "2021-12-15T20:57:18.097176Z",
        "url": "https://files.pythonhosted.org/packages/4d/05/964b440308f22471cd7269f71c1d2e6ebce72151b7eab69675494511337d/teepy-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad885b4d0b3884d87006aedbd352a94d31415ce87f58851e27a78277c88bab2f",
          "md5": "753567b0b59b1eb462427f12779df686",
          "sha256": "58728c24a3f446c955f48e2703ab74a55bee0fb08d8b3d1198a8f89b3eacc2bc"
        },
        "downloads": -1,
        "filename": "teepy-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "753567b0b59b1eb462427f12779df686",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56332,
        "upload_time": "2021-12-17T13:14:43",
        "upload_time_iso_8601": "2021-12-17T13:14:43.342839Z",
        "url": "https://files.pythonhosted.org/packages/ad/88/5b4d0b3884d87006aedbd352a94d31415ce87f58851e27a78277c88bab2f/teepy-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5cb9ba748523c3b997b209b0ca7b9ae7e09ffdc9be25a2fcdc2f1750998cb3c",
          "md5": "cc7b088f7f20427b96ba31c7a5b0630c",
          "sha256": "6c5c6b626d5815b5a0ff167457346f528c42fb15839bb4f252bf863935129f2e"
        },
        "downloads": -1,
        "filename": "teepy-0.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "cc7b088f7f20427b96ba31c7a5b0630c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56528,
        "upload_time": "2022-10-28T18:46:36",
        "upload_time_iso_8601": "2022-10-28T18:46:36.268525Z",
        "url": "https://files.pythonhosted.org/packages/b5/cb/9ba748523c3b997b209b0ca7b9ae7e09ffdc9be25a2fcdc2f1750998cb3c/teepy-0.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e176e4230f1dd17b6f9e31d96602471ab0b21cf407eff879fe0eed25a602c86",
          "md5": "c50df58fe5d1aa330b40b469c95e95f9",
          "sha256": "7652b9f4069e2778e9dca3a46c1b120dab75d628a1521bf8ea332f9bb61d395b"
        },
        "downloads": -1,
        "filename": "teepy-0.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "c50df58fe5d1aa330b40b469c95e95f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56535,
        "upload_time": "2022-10-28T18:58:39",
        "upload_time_iso_8601": "2022-10-28T18:58:39.821072Z",
        "url": "https://files.pythonhosted.org/packages/6e/17/6e4230f1dd17b6f9e31d96602471ab0b21cf407eff879fe0eed25a602c86/teepy-0.3.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6e176e4230f1dd17b6f9e31d96602471ab0b21cf407eff879fe0eed25a602c86",
        "md5": "c50df58fe5d1aa330b40b469c95e95f9",
        "sha256": "7652b9f4069e2778e9dca3a46c1b120dab75d628a1521bf8ea332f9bb61d395b"
      },
      "downloads": -1,
      "filename": "teepy-0.3.8.tar.gz",
      "has_sig": false,
      "md5_digest": "c50df58fe5d1aa330b40b469c95e95f9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 56535,
      "upload_time": "2022-10-28T18:58:39",
      "upload_time_iso_8601": "2022-10-28T18:58:39.821072Z",
      "url": "https://files.pythonhosted.org/packages/6e/17/6e4230f1dd17b6f9e31d96602471ab0b21cf407eff879fe0eed25a602c86/teepy-0.3.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}