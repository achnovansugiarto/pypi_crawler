{
  "info": {
    "author": "Slimmer.AI",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Text Processing"
    ],
    "description": "text-scrubber\n=============\n\n|Build status| |Docs status|\n\n.. |Build status| image:: https://github.com/Slimmer-AI/text-scrubber/workflows/Build/badge.svg?branch=master\n.. |Docs status| image:: https://github.com/Slimmer-AI/text-scrubber/workflows/Docs/badge.svg?branch=master\n\n``text-scrubber`` is a Python package that offers text scrubbing functionality, providing building blocks for string\ncleaning as well as normalizing geographical text (countries/states/cities).\n\nFull documentation is available at https://slimmer-ai.github.io/text-scrubber/.\n\n\nTextScrubber\n------------\n\nThe ``TextScrubber`` class cleans a single or a collection of strings. It can be easily constructed and configured with\nbuilding blocks:\n\n\n.. code-block:: python\n\n    from text_scrubber import TextScrubber\n\n    ts = (TextScrubber().to_ascii()\n                        .lowercase()\n                        .tokenize()\n                        .remove_stop_words()\n                        .join())\n\nwhich can then be used as:\n\n.. code-block:: python\n\n    ts.transform('héLlô there, WòrlD')  # outputs 'hello world'\n\nor with an iterable of input:\n\n.. code-block:: python\n\n    ts.transform(['héLlô there, WòrlD', 'slímm̀er ÀI'])  # outputs ['hello world', 'slimmer AI']\n\nFor a complete list of building blocks please refer to the ``TextScrubber`` API reference.\n\nGeo\n---\n\nThe ``text_scrubber.geo`` module contains functions to normalize geographical data which deal with spelling errors,\ncountry name variations, etc.:\n\n.. code-block:: python\n\n    from text_scrubber.geo import normalize_country, normalize_region, normalize_city\n\n    \"\"\"\n    Countries\n    \"\"\"\n\n    normalize_country('Peoples rep. of China')\n    # [Location(canonical_name='China', matched_name='Peoples Republic of China', country=None,\n    #           score=1.0)]\n\n    normalize_country('Deutschland')\n    # [Location(canonical_name='Germany', matched_name='Deutschland', country=None, score=1.0)]\n\n    normalize_country('st Nevis and Kitties')\n    # [Location(canonical_name='Saint Kitts and Nevis', matched_name='Saint Kitts and Nevis',\n    #           country=None, score=0.75)]\n\n    normalize_country('ira')\n    # [Location(canonical_name='Iran', matched_name='Iran', country=None, score=0.857...),\n    #  Location(canonical_name='Iraq', matched_name='Iraq', country=None, score=0.857...)]\n\n    \"\"\"\n    Cities\n    \"\"\"\n\n    normalize_city('Leibnitz', ['Austria'])\n    # [Location(canonical_name='Leibnitz', matched_name='Leibnitz', country='Austria', score=1.0)]\n\n    normalize_city('heidelberg')\n    # [Location(canonical_name='Heidelberg', matched_name='Heidelberg', country='Germany',\n    #           score=1.0),\n    #  Location(canonical_name='Heidelberg', matched_name='Heidelberg', country='South Africa',\n    #           score=1.0),\n    #  Location(canonical_name='Heidelberg', matched_name='Heidelberg', country='United States',\n    #           score=1.0)]\n\n    normalize_city('ohioo', ['US'])\n    # [Location(canonical_name='Ohio', matched_name='Ohio', country='United States',\n    #           score=0.888...)]\n\n    normalize_city('Madri', ['Spain', 'US', 'Brazil'])\n    # [Location(canonical_name='Madrid', matched_name='Madrid', country='Spain',\n    #           score=0.909...),\n    #  Location(canonical_name='Madrid', matched_name='Madrid', country='United States',\n    #           score=0.909...),\n    #  Location(canonical_name='Mari', matched_name='Mari', country='Brazil',\n    #           score=0.888...)]\n\n    \"\"\"\n    Regions\n    \"\"\"\n\n    normalize_region('triangle park', ['US'])\n    # [Location(canonical_name='The Triangle Park', matched_name='The Triangle Park',\n    #           country='United States', score=1.0)]\n\n    normalize_region('Fur', ['Denmark'])\n    # [Location(canonical_name='Fur', matched_name='Fur', country='Denmark', score=1.0)]\n\n    normalize_region('texel', ['NL'])\n    # [Location(canonical_name='Texel', matched_name='Texel', country='Netherlands', score=1.0)]\n\n\nEach of the above normalization functions return the canonical name, matched name, the match score, and when normalizing\ncities or regions it will also contain the corresponding country. The difference between canonical and matched name\nstems from the fact that some countries, cities, or regions can have alternative names. E.g., ``NYC`` maps to\n``New York City``. When the query was ``NYCC`` the canonical name will be ``New York City``, but the matched name\n``NYC``. The match scores are always between 0.0 and 1.0, where 1.0 is a perfect match. If a known mapping exists, like\n``Deutschland`` to ``Germany``, then the match score will be 1.0.\n\n.. note::\n\n    When normalizing a country or finding countries in a string, the ``country`` attribute of a ``LocationMatch`` object\n    is always ``None``. The normalized name can be found using the ``canonical_name`` attribute.\n\nThe ``text_scrubber.geo`` module also contains functions to find the name of places (country, region, and city) in\ntext dealing with spelling errors, country name variations, etc.:\n\n.. code-block:: python\n\n    from text_scrubber.geo import (find_city_in_string, find_country_in_string,\n                                   find_region_in_string)\n\n    \"\"\"\n    Countries\n    \"\"\"\n\n    find_country_in_string(\"Institute of German study, Accra, Ghana\")\n    # [ExtractedLocation(location=Location(canonical_name='Ghana', matched_name='Ghana',\n    #                                      country=None, score=1.0),\n    #                    substring='Ghana', substring_range=Range(start=34, end=39)),\n    #  ExtractedLocation(location=Location(canonical_name='Germany', matched_name='Germany',\n    #                                      country=None, score=0.923...),\n    #                    substring='German', substring_range=Range(start=13, end=19))]\n\n    find_country_in_string(\"Peking University, 5 Yiheyuan Rd, \"\n                           \"Haidian District, Beijing, CH, 100871\")\n    # This was a trick question though, as CH=Switzerland. China is CN\n    # [ExtractedLocation(location=Location(canonical_name='Switzerland', matched_name='CH',\n    #                                      country=None, score=1.0),\n    #                    substring='CH', substring_range=Range(start=61, end=63))]\n\n    \"\"\"\n    Cities\n    \"\"\"\n\n    find_city_in_string(\"Météorage Pau France\", {\"France\"})\n    # [ExtractedLocation(location=Location(canonical_name='Pau', matched_name='Pau',\n    #                                      country='France', score=1.0),\n    #                    substring='Pau', substring_range=Range(start=10, end=13)),\n    #  ExtractedLocation(location=Location(canonical_name='La Frasnée', matched_name='Фране',\n    #                                      country='France', score=0.909...),\n    #                    substring='France', substring_range=Range(start=14, end=20))]\n\n    find_city_in_string(\"Bavarian Environment Agency, Hans Högn Straße 12, \"\n                        \"95030 Hof Saale, Bavaria, Germany\", {\"Germany\"})\n    # [ExtractedLocation(location=Location(canonical_name='Hof', matched_name='Hof',\n    #                                      country='Germany', score=1.0),\n    #                    substring='Hof', substring_range=Range(start=56, end=59)),\n    #  ExtractedLocation(location=Location(canonical_name='Saal', matched_name='Saal',\n    #                                      country='Germany', score=0.888...),\n    #                    substring='Saale', substring_range=Range(start=60, end=65)),\n    #  ExtractedLocation(location=Location(canonical_name='Trassem', matched_name='Trassem',\n    #                                      country='Germany', score=0.857...),\n    #                    substring='Straße', substring_range=Range(start=39, end=45))]\n\n    \"\"\"\n    Regions\n    \"\"\"\n\n    find_region_in_string(\"Fur Museum, 7884 Fur, Denmark.\", {\"Denmark\"})\n    # [ExtractedLocation(location=Location(canonical_name='Fur', matched_name='Fur',\n    #                                      country='Denmark', score=1.0),\n    #                    substring='Fur', substring_range=Range(start=0, end=3)),\n    #  ExtractedLocation(location=Location(canonical_name='Fur', matched_name='Fur',\n    #                                      country='Denmark', score=1.0),\n    #                    substring='Fur', substring_range=Range(start=17, end=20)),\n    #  ExtractedLocation(location=Location(canonical_name='Kingdom of Denmark',\n    #                                      matched_name='Denmark', country='Denmark', score=1.0),\n    #                    substring='Denmark', substring_range=Range(start=22, end=29))]\n\n    find_region_in_string(\"Department of Biological Oceanography, Royal Netherlands Institute \"\n                          \"for Sea Research (NIOZ), Texel, The Netherlands\", {\"Netherlands\"})\n    # [ExtractedLocation(location=Location(canonical_name='Kingdom of the Netherlands',\n    #                                      matched_name='Netherlands', country='Netherlands',\n    #                                      score=1.0),\n    #                    substring='Netherlands', substring_range=Range(start=45, end=56)),\n    #  ExtractedLocation(location=Location(canonical_name='Texel', matched_name='Texel',\n    #                                      country='Netherlands', score=1.0),\n    #                    substring='Texel', substring_range=Range(start=92, end=97)),\n    #  ExtractedLocation(location=Location(canonical_name='Kingdom of the Netherlands',\n    #                                      matched_name='Netherlands', country='Netherlands',\n    #                                      score=1.0),\n    #                    substring='Netherlands', substring_range=Range(start=103, end=114))]\n\n.. note::\n\n    Whenever a country is considered part of another country ``normalize_country`` will return the latter.\n    E.g., ``Puerto Rico`` is mapped to ``United States`` and ``Greenland`` to ``Denmark``.\n\n\nResource loading\n~~~~~~~~~~~~~~~~\n\nResources for cities and regions aren't all loaded when you import ``TextScrubber``, they're loaded on the fly per\ncountry. This means that the first time you do a query it can take a while. The second time around the same query will\nbe much faster, as will all other queries involving the same countr(y)(ies). You can load in resources per country in\nadvance by using:\n\n.. code-block:: python\n\n    from text_scrubber.geo import (add_city_resources, add_region_resources,\n                                   normalize_country_to_country_codes)\n\n    country_codes = normalize_country_to_country_codes(['Netherlands', 'China', 'USA'])\n    add_city_resources(country_codes)\n    add_region_resources(country_codes, progress_bar=True)\n\n.. note::\n\n    Whenever a country is considered part of another country ``normalize_country_to_country_codes`` returns both.\n\nCleaning\n~~~~~~~~\n\nThere are clean functions available for countries/regions/cities, which all follow the same cleaning pipeline:\n\n.. code-block:: python\n\n    from text_scrubber.geo import clean_country, clean_region, clean_city\n\n    clean_country('cent afr rep.')     # 'central african republic'\n    clean_region('Hyōgo')              # 'hyogo'\n    clean_city('płońsk')               # 'plonsk'\n    clean_city('neustadt/westerwald')  # 'neustadt westerwald'\n\n\nDocumentation\n-------------\n\nIf you want to build the documentation, please install the documentation dependencies by executing:\n\n.. code-block:: bash\n\n    pip install .[docs]\n\nDocumentation can be build by executing:\n\n.. code-block:: bash\n\n    python setup.py build_docs\n\nDocumentation can also be build from the ``docs`` folder directly. In that case ``text-scrubber`` should be installed\nand available in your current working environment. Execute:\n\n.. code-block:: bash\n\n    make html\n\nin the ``docs`` folder.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Slimmer-AI/text-scrubber",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "text-scrubber",
    "package_url": "https://pypi.org/project/text-scrubber/",
    "platform": null,
    "project_url": "https://pypi.org/project/text-scrubber/",
    "project_urls": {
      "Homepage": "https://github.com/Slimmer-AI/text-scrubber"
    },
    "release_url": "https://pypi.org/project/text-scrubber/0.4.1/",
    "requires_dist": [
      "anyascii",
      "cython",
      "num2words",
      "numpy",
      "python-Levenshtein",
      "scipy",
      "tqdm",
      "dataclasses ; python_version < \"3.7\"",
      "sphinx (==3.2.1) ; extra == 'docs'",
      "sphinx-rtd-theme (==0.5.0) ; extra == 'docs'",
      "sphinx-autodoc-typehints (==1.11.0) ; extra == 'docs'",
      "sphinx-versions (==1.0.1) ; extra == 'docs'",
      "nose2 ; extra == 'tests'",
      "numpy ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "Python package that offers text scrubbing functionality, providing building blocks for string cleaning as well as normalizing geographical text (countries/states/cities)",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13953927,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06ed05dc27a5f055dea419bceed7ef55c9bedeb478999398a1d61f61a903e1da",
          "md5": "2c58c9dbeafc3b41821624fec269de34",
          "sha256": "d82568f4b59b050630ae95ec8f22844c0baa971a59ab1e53eb3eb81ce2988598"
        },
        "downloads": -1,
        "filename": "text_scrubber-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c58c9dbeafc3b41821624fec269de34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 369253,
        "upload_time": "2020-09-10T15:09:32",
        "upload_time_iso_8601": "2020-09-10T15:09:32.887180Z",
        "url": "https://files.pythonhosted.org/packages/06/ed/05dc27a5f055dea419bceed7ef55c9bedeb478999398a1d61f61a903e1da/text_scrubber-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ee29b9f42071abcbf6186df5b792a14e332c9d44edcd1b63be71a1174985596",
          "md5": "0bd44009da781bca5d4b697cee6804bd",
          "sha256": "ffd402e331af7ad140ebecc735c4ed013495d6a7195cc845f825e2e608cd24ea"
        },
        "downloads": -1,
        "filename": "text-scrubber-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0bd44009da781bca5d4b697cee6804bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 364155,
        "upload_time": "2020-09-10T15:09:35",
        "upload_time_iso_8601": "2020-09-10T15:09:35.796052Z",
        "url": "https://files.pythonhosted.org/packages/3e/e2/9b9f42071abcbf6186df5b792a14e332c9d44edcd1b63be71a1174985596/text-scrubber-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "800653c87b20f1c51419b32acc14cf446e6754bfbef7f3b6a1eec7ef8568f8df",
          "md5": "f81bfc4cdec62c94a94203684f1ba01b",
          "sha256": "f53317bb8a3db03e38f141c6293193cce2e63470d3dfb17785d6de6f8998f30c"
        },
        "downloads": -1,
        "filename": "text_scrubber-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f81bfc4cdec62c94a94203684f1ba01b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 369262,
        "upload_time": "2020-09-10T15:17:18",
        "upload_time_iso_8601": "2020-09-10T15:17:18.402787Z",
        "url": "https://files.pythonhosted.org/packages/80/06/53c87b20f1c51419b32acc14cf446e6754bfbef7f3b6a1eec7ef8568f8df/text_scrubber-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e8ff6bfe37e843f8374cff41eb5cc920b18a045870434c4c9c9f4ab4fb09926",
          "md5": "47fb73658a72e23888c118451c18f6e1",
          "sha256": "0ac187609dfa1b1807e00d1f762dfd030a9c407270da20e7c298792e5463d776"
        },
        "downloads": -1,
        "filename": "text-scrubber-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "47fb73658a72e23888c118451c18f6e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 364179,
        "upload_time": "2020-09-10T15:17:20",
        "upload_time_iso_8601": "2020-09-10T15:17:20.526780Z",
        "url": "https://files.pythonhosted.org/packages/3e/8f/f6bfe37e843f8374cff41eb5cc920b18a045870434c4c9c9f4ab4fb09926/text-scrubber-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97db1898ad9c1ee139d0c3508d6d9065dace55e7a034b1e148eaa133ccf95d2c",
          "md5": "08466afb1c2ba41e46165c3457d31f4d",
          "sha256": "d9243062dde7c783bd4ecc27632fa9b7a5a4b5ce4157ae42a1b0fd18cd09b18f"
        },
        "downloads": -1,
        "filename": "text_scrubber-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08466afb1c2ba41e46165c3457d31f4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 369264,
        "upload_time": "2021-05-10T12:45:09",
        "upload_time_iso_8601": "2021-05-10T12:45:09.792094Z",
        "url": "https://files.pythonhosted.org/packages/97/db/1898ad9c1ee139d0c3508d6d9065dace55e7a034b1e148eaa133ccf95d2c/text_scrubber-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6324aed02e898ca0a54c99f055873a1cc9d7eb8ea4106b6c153c9668349414e",
          "md5": "66e6d499f61c2820e2b6e04b0c4d7fbe",
          "sha256": "64e44f1db905e651c7f2bb1612434cdd337044728c1a626591aefc83a94a9f65"
        },
        "downloads": -1,
        "filename": "text-scrubber-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "66e6d499f61c2820e2b6e04b0c4d7fbe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 364930,
        "upload_time": "2021-05-10T12:45:11",
        "upload_time_iso_8601": "2021-05-10T12:45:11.325979Z",
        "url": "https://files.pythonhosted.org/packages/e6/32/4aed02e898ca0a54c99f055873a1cc9d7eb8ea4106b6c153c9668349414e/text-scrubber-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19d3a977b71d3e162459d62793d428122cc2c90390efaf082d1dd5a8cd48b4ba",
          "md5": "fe4c03dbdce742942849dadf9a96a3fc",
          "sha256": "74ab0c478d90500f7379c64d8f48ebf1237a3ee6c53df208a775f9118e64fbef"
        },
        "downloads": -1,
        "filename": "text_scrubber-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe4c03dbdce742942849dadf9a96a3fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30221990,
        "upload_time": "2022-04-13T15:03:47",
        "upload_time_iso_8601": "2022-04-13T15:03:47.919486Z",
        "url": "https://files.pythonhosted.org/packages/19/d3/a977b71d3e162459d62793d428122cc2c90390efaf082d1dd5a8cd48b4ba/text_scrubber-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a757520825e28cbd6399b1781b8a08d69fe6636a2a3197940858d083effd24db",
          "md5": "c369e552af693b530f76758ebff3b38f",
          "sha256": "7de494eaa8c88da67d38202856c951a3ac5464ed84bda86b19b47c0193e5951d"
        },
        "downloads": -1,
        "filename": "text-scrubber-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c369e552af693b530f76758ebff3b38f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30120125,
        "upload_time": "2022-04-13T15:03:50",
        "upload_time_iso_8601": "2022-04-13T15:03:50.975138Z",
        "url": "https://files.pythonhosted.org/packages/a7/57/520825e28cbd6399b1781b8a08d69fe6636a2a3197940858d083effd24db/text-scrubber-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa8ae24f43fbeb177c82af23a142db6646b2573570fe268ed356a3f2cef0958e",
          "md5": "ecb6034876c29066615b635aea4a5634",
          "sha256": "194664e69c795266e1f5d4adda7d5ac6392c44fabadfbf07ade36af497db6497"
        },
        "downloads": -1,
        "filename": "text_scrubber-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ecb6034876c29066615b635aea4a5634",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30236032,
        "upload_time": "2022-05-19T07:00:54",
        "upload_time_iso_8601": "2022-05-19T07:00:54.134020Z",
        "url": "https://files.pythonhosted.org/packages/aa/8a/e24f43fbeb177c82af23a142db6646b2573570fe268ed356a3f2cef0958e/text_scrubber-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d59ec2da5e3775638d14be02a8290ea685c203e35ca0b97aa38f3814054782fd",
          "md5": "e68f672d21cf1a20192cd7710ab5eb6a",
          "sha256": "2ac0ef50d7959bc94094f5551b122df42331a22638426960cc073f3b8cc26b6f"
        },
        "downloads": -1,
        "filename": "text-scrubber-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e68f672d21cf1a20192cd7710ab5eb6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30128821,
        "upload_time": "2022-05-19T07:01:00",
        "upload_time_iso_8601": "2022-05-19T07:01:00.212246Z",
        "url": "https://files.pythonhosted.org/packages/d5/9e/c2da5e3775638d14be02a8290ea685c203e35ca0b97aa38f3814054782fd/text-scrubber-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a0379dc5ed4ee3873eddb642a91977cfefa046d97f4d2c141683dcc09132c23",
          "md5": "8f634e20b1636cdcc12fb84d0263f0c6",
          "sha256": "ad85fa10154b03b5105a5cee646355e48fcdeb13b1f3905c52e7429f9d288892"
        },
        "downloads": -1,
        "filename": "text_scrubber-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8f634e20b1636cdcc12fb84d0263f0c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30237139,
        "upload_time": "2022-05-19T10:53:46",
        "upload_time_iso_8601": "2022-05-19T10:53:46.653980Z",
        "url": "https://files.pythonhosted.org/packages/4a/03/79dc5ed4ee3873eddb642a91977cfefa046d97f4d2c141683dcc09132c23/text_scrubber-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03c00e9a88f53773a92d8c299060ce231559125d8500d5877dcd3271b9dc1538",
          "md5": "6295874179a0951e3e3ccac7a37036fa",
          "sha256": "59aacd737ad4690a85a7b82a9d2a9b59967a9453fac4ae9e151e411bdb88fd1e"
        },
        "downloads": -1,
        "filename": "text-scrubber-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6295874179a0951e3e3ccac7a37036fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30129291,
        "upload_time": "2022-05-19T10:53:49",
        "upload_time_iso_8601": "2022-05-19T10:53:49.814677Z",
        "url": "https://files.pythonhosted.org/packages/03/c0/0e9a88f53773a92d8c299060ce231559125d8500d5877dcd3271b9dc1538/text-scrubber-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4df670656ed799031d44651612ec585e2f645f1fd43a071f23db3070f399fe9f",
          "md5": "3b73aea452fa1123c8ba6aea8a1774b5",
          "sha256": "29e918ada01b380cd312f1a0f3d36f61c772205f3fe381752721da00318fef01"
        },
        "downloads": -1,
        "filename": "text_scrubber-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b73aea452fa1123c8ba6aea8a1774b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30237266,
        "upload_time": "2022-05-27T11:31:56",
        "upload_time_iso_8601": "2022-05-27T11:31:56.898806Z",
        "url": "https://files.pythonhosted.org/packages/4d/f6/70656ed799031d44651612ec585e2f645f1fd43a071f23db3070f399fe9f/text_scrubber-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6770a38cc7ca2c50d586aa581980a54396963d40bfdaa1fb5567278482b023ae",
          "md5": "46aa27ab0331c031e73f6b10f1114b58",
          "sha256": "5f81ee841e965eecc533d5836addf609aecea5280a31c92981da9ecfeff850bb"
        },
        "downloads": -1,
        "filename": "text-scrubber-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "46aa27ab0331c031e73f6b10f1114b58",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30129651,
        "upload_time": "2022-05-27T11:32:01",
        "upload_time_iso_8601": "2022-05-27T11:32:01.225930Z",
        "url": "https://files.pythonhosted.org/packages/67/70/a38cc7ca2c50d586aa581980a54396963d40bfdaa1fb5567278482b023ae/text-scrubber-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4df670656ed799031d44651612ec585e2f645f1fd43a071f23db3070f399fe9f",
        "md5": "3b73aea452fa1123c8ba6aea8a1774b5",
        "sha256": "29e918ada01b380cd312f1a0f3d36f61c772205f3fe381752721da00318fef01"
      },
      "downloads": -1,
      "filename": "text_scrubber-0.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3b73aea452fa1123c8ba6aea8a1774b5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30237266,
      "upload_time": "2022-05-27T11:31:56",
      "upload_time_iso_8601": "2022-05-27T11:31:56.898806Z",
      "url": "https://files.pythonhosted.org/packages/4d/f6/70656ed799031d44651612ec585e2f645f1fd43a071f23db3070f399fe9f/text_scrubber-0.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6770a38cc7ca2c50d586aa581980a54396963d40bfdaa1fb5567278482b023ae",
        "md5": "46aa27ab0331c031e73f6b10f1114b58",
        "sha256": "5f81ee841e965eecc533d5836addf609aecea5280a31c92981da9ecfeff850bb"
      },
      "downloads": -1,
      "filename": "text-scrubber-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "46aa27ab0331c031e73f6b10f1114b58",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30129651,
      "upload_time": "2022-05-27T11:32:01",
      "upload_time_iso_8601": "2022-05-27T11:32:01.225930Z",
      "url": "https://files.pythonhosted.org/packages/67/70/a38cc7ca2c50d586aa581980a54396963d40bfdaa1fb5567278482b023ae/text-scrubber-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}