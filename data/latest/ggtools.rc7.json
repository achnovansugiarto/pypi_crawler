{
  "info": {
    "author": "Chunxiao Li",
    "author_email": "lcx366@126.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Welcome to the GRACE & GLDAS Tools\n\nThe ggtools package is an archive of scientific routines that can be used to\nhandle the GRACE(Gravity Recovery and Climate Experiment) and GRACE-FO(Follow-on) GSM data(RL06 Level-2 monthly solutions) and GLDAS grid data.\n\n## How to Install \n\nGGTOOLS can be installed with the following two steps\n\n1. `conda install cartopy netcdf4 h5py`\n2. `pip install ggtools`\n\n## How to Upgrade\n\nGGTOOLS can be upgraded to the latest version with `pip install ggtools --upgrade`. \n\n## How to use\n\n## GRACE\n\n### Download static gravity models\n\nDownload static gravity models GGM05C and EIGEN-6C4 from [ICGEM](http://icgem.gfz-potsdam.de/home)(International Centre for Global Earth Models). This is not a necessary step unless you want to prepare for removing the background(reference) gravity field from the GRACE GSM data later.\n\n\n```python\nfrom ggtools.gg import static_download\nfor static_model in ['GGM05C','EIGEN-6C4']:\n    gravity_model = static_download(static_model)\n    print(gravity_model)\n```\n\n    static_models/GGM05C.gfc\n    static_models/EIGEN-6C4.gfc\n\n\nFor more details, please refer to `static_download?`.\n\n### Check the time coverage of the GRACE GSM data\n\nGRACE GSM data is expressed as a form of Spherical Harmonic Coefficients(SHCs) or Stokes coefficients. Before downloading the GRACE GSM data from [ISDC](https://isdc.gfz-potsdam.de/grace-isdc/)(Information System and Data Center), it's suggested to view the time intervals for all feasible GRACE GSM data so far published by CSR(University of Texas Center for Space Research), GFZ(German Research Centre for Geosciences), and JPL(Jet Propulsion Laboratory). This is not a necessary step, but it can help to understand the outline of the data.\n\n\n```python\nfrom ggtools.gg import print_gsm_date_coverage\nfor source in ['CSR','GFZ','JPL']:\n    print_gsm_date_coverage(source,96)\n    print_gsm_date_coverage(source,60)\n```\n\n    GSM data for CSR_RL06_96 is available from 2002-04-05 to 2019-10-31\n    GSM data for CSR_RL06_60 is available from 2002-04-05 to 2019-10-31\n    GSM data for GFZ_RL06_96 is available from 2002-04-05 to 2019-10-31\n    GSM data for GFZ_RL06_60 is available from 2002-04-05 to 2019-10-31\n    GSM data for JPL_RL06_96 is available from 2002-04-04 to 2019-10-31\n    GSM data for JPL_RL06_60 is available from 2002-04-04 to 2019-10-31\n\n\nFor more details, please refer to `print_gsm_date_coverage?`.\n\n### Download GRACE GSM data\n\nDownload all feasible GRACE GSM data published by CSR, GFZ, and JPL so far.\n\n\n```python\nfrom ggtools.gg import gsm_download\nfor source in ['CSR','GFZ','JPL']:\n    gsm_download(source,96) \n    gsm_download(source,60)\n```\n\n```Downloading ...  GSM-2_2019274-2019304_GRFO_UTCSR_BB01_0600.gz ... 226 Transfer complete\nDownloading ...  GSM-2_2019274-2019304_GRFO_UTCSR_BB01_0600.gz ... 226 Transfer complete\nDownloading ...  GSM-2_2019274-2019304_GRFO_UTCSR_BA01_0600.gz ... 226 Transfer complete\nDownloading ...  GSM-2_2019274-2019304_GRFO_JPLEM_BB01_0600.gz ... 226 Transfer complete\nDownloading ...  GSM-2_2019274-2019304_GRFO_JPLEM_BA01_0600.gz ... 226 Transfer complete\n```\n\nFor more details, please refer to `gsm_download?`.\n\n### Download  SLR C20 data\n\nDownload SLR C20 data(RL06 monthly solutions) published by CSR.\n\n\n```python\nfrom ggtools.gg import slr_c20_download\nslr_c20_download()\n```\n\n    Downloading ...  TN-11_C20_SLR_RL06.txt ... 226 Transfer complete\n\n\nFor more details, please refer to `slr_c20_download?`.\n\n### Read GRACE GSM data\n\nRead all 96th-degree GRACE GSM data downloaded previously.\n\n\n```python\nfrom ggtools.gg import read_gsm\ncsr_gsm = read_gsm('CSR',96)\ngfz_gsm = read_gsm('GFZ',96)\njpl_gsm = read_gsm('JPL',96)\n\n# basic information on GRACE GSM data\nprint(csr_gsm,'\\n')\nprint(gfz_gsm,'\\n')\nprint(jpl_gsm)\n```\n\n    title = GRACE & GRACE-FO Geopotential Coefficients CSR RL06\n    max_degree = 96\n    max_order = 96\n    degree_order = 96\n    normalization = fully normalized\n    institution = UT-AUSTIN/CSR\n    processing_level = 2\n    product_version = RL06\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33 \n\n    title = GRACE & GRACE-FO Geopotential GSM Coefficients GFZ RL06\n    max_degree = 96\n    max_order = 96\n    degree_order = 96\n    normalization = fully normalized\n    institution = GFZ German Research Centre for Geosciences\n    processing_level = 2\n    product_version = 6.0\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33 \n\n    title = GRACE & GRACE-FO Geopotential Coefficients JPL RL06\n    max_degree = 96\n    max_order = 96\n    degree_order = 96\n    normalization = fully normalized\n    institution = NASA/JPL\n    processing_level = 2\n    product_version = 6.0\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 169\n    total_month_counts = 211\n    missing_month_counts = 42\n\n\nFor more details, please refer to `read_gsm?` and `csr_gsm?`.\n\n\n```python\nprint(csr_gsm.summary)\nprint(csr_gsm.background_gravity)\nprint(csr_gsm.earth_gravity_param)\nprint(csr_gsm.permanent_tide)\nprint(csr_gsm.mean_equator_radius)\nprint(csr_gsm.missing_month,'\\n')\n\nprint(gfz_gsm.background_gravity)\nprint(gfz_gsm.permanent_tide)\nprint(gfz_gsm.mean_equator_radius,'\\n')\n\nprint(jpl_gsm.missing_month)\nprint(jpl_gsm.shc[10],'\\n') # geopotential coefficients for the 10th monthly solution\nprint(jpl_gsm.shc_std[10]) # standard deviation in geopotential coefficients\n```\n\n    Spherical harmonic coefficients representing an estimate of the mean gravity field of Earth during the specified timespan derived from GRACE & GRACE-FO mission measurements. These coefficients represent the full magnitude of land hydrology, ice, and solid Earth processes. Further, they represent atmospheric and oceanic processes not captured in the accompanying GAC product. The 0th and 1st degree terms are excluded from CSR level-2.\n    GGM05C\n    3.9860044150E+14 m3/s2\n    inclusive\n    6.3781363000E+06 m\n    ['2002-06' '2002-07' '2003-06' '2011-01' '2011-06' '2012-05' '2012-10'\n     '2013-03' '2013-08' '2013-09' '2014-02' '2014-07' '2014-12' '2015-07'\n     '2015-10' '2015-11' '2016-04' '2016-09' '2016-10' '2017-02' '2017-07'\n     '2017-08' '2017-09' '2017-10' '2017-11' '2017-12' '2018-01' '2018-02'\n     '2018-03' '2018-04' '2018-05' '2018-08' '2018-09'] \n\n    EIGEN-6C4\n    exclusive\n    6.3781364600E+06 m \n\n    ['2002-06' '2002-07' '2003-06' '2004-07' '2004-08' '2004-09' '2004-10'\n     '2011-01' '2011-06' '2012-04' '2012-05' '2012-06' '2012-07' '2012-10'\n     '2013-03' '2013-08' '2013-09' '2014-02' '2014-07' '2014-12' '2015-01'\n     '2015-02' '2015-07' '2015-10' '2015-11' '2016-04' '2016-09' '2016-10'\n     '2017-02' '2017-07' '2017-08' '2017-09' '2017-10' '2017-11' '2017-12'\n     '2018-01' '2018-02' '2018-03' '2018-04' '2018-05' '2018-08' '2018-09']\n    [[[ 1.00000000e+00  0.00000000e+00  0.00000000e+00 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      [ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      [-4.84169287e-04 -2.29490037e-10  2.43933401e-06 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      ...\n      [ 9.37921024e-11 -8.38607258e-11 -2.33486569e-10 ... -2.26383594e-09\n        0.00000000e+00  0.00000000e+00]\n      [ 5.33299728e-10  1.81153117e-09  2.78305221e-10 ...  2.61977837e-09\n        2.59548687e-09  0.00000000e+00]\n      [-1.25276141e-09  5.11732945e-10  1.26614370e-09 ...  1.14454762e-09\n        1.62194507e-09 -2.14363128e-09]]\n\n     [[ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      [ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      [ 0.00000000e+00  1.38511555e-09 -1.40030144e-06 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      ...\n      [ 0.00000000e+00  2.29543385e-09  1.35606111e-10 ... -1.57903333e-09\n        0.00000000e+00  0.00000000e+00]\n      [ 0.00000000e+00  6.34755345e-10 -2.53978387e-10 ... -1.20141984e-09\n       -3.45902449e-10  0.00000000e+00]\n      [ 0.00000000e+00  1.63243506e-09 -7.04276590e-11 ... -2.73715185e-09\n        4.34383583e-10  1.63871799e-09]]]\n\n    [[[0.0000e+00 0.0000e+00 0.0000e+00 ... 0.0000e+00 0.0000e+00 0.0000e+00]\n      [0.0000e+00 0.0000e+00 0.0000e+00 ... 0.0000e+00 0.0000e+00 0.0000e+00]\n      [6.4545e-12 3.4606e-12 1.3888e-12 ... 0.0000e+00 0.0000e+00 0.0000e+00]\n      ...\n      [1.5314e-11 1.5326e-11 1.5305e-11 ... 4.5916e-11 0.0000e+00 0.0000e+00]\n      [1.4790e-11 1.4741e-11 1.4724e-11 ... 4.1441e-11 4.6175e-11 0.0000e+00]\n      [1.5805e-11 1.5750e-11 1.5728e-11 ... 1.1087e-10 3.9720e-11 4.0593e-11]]\n\n     [[0.0000e+00 0.0000e+00 0.0000e+00 ... 0.0000e+00 0.0000e+00 0.0000e+00]\n      [0.0000e+00 0.0000e+00 0.0000e+00 ... 0.0000e+00 0.0000e+00 0.0000e+00]\n      [0.0000e+00 3.0349e-12 1.4492e-12 ... 0.0000e+00 0.0000e+00 0.0000e+00]\n      ...\n      [0.0000e+00 1.5277e-11 1.5313e-11 ... 4.5258e-11 0.0000e+00 0.0000e+00]\n      [0.0000e+00 1.4695e-11 1.4742e-11 ... 4.1784e-11 4.6037e-11 0.0000e+00]\n      [0.0000e+00 1.5703e-11 1.5747e-11 ... 1.1097e-10 3.9901e-11 4.0941e-11]]]\n\n\nNote that CSR and GFZ use different background(reference) gravity models. One is GGM05C and the other is EIGEN-6C4. These two gravity models define the same Earth gravity constant, but slightly different Earth's mean equator radius. In addition, both GGM05C and the monthly solutions released by CSR include the permanent tide. In contrast, neither EIGEN-6C4 nor the monthly solutions released by GFZ  include this item. Therefore, it is necessary to remove the background field or the average field from the monthly solutions.\n\n### De-average GRACE GSM data\n\nRemove the average field from the monthly solutions.\n\n\n```python\ncsr_gsm_deaverage = csr_gsm.deaverage()\ngfz_gsm_deaverage = gfz_gsm.deaverage()\njpl_gsm_deaverage = jpl_gsm.deaverage()\n\nprint(csr_gsm_deaverage,'\\n')\nprint(csr_gsm_deaverage.background_gravity,'\\n')\nprint(csr_gsm_deaverage.shc[10],'\\n')\nprint(csr_gsm_deaverage.shc_std[10])\n```\n\n    title = Deaveraged GRACE & GRACE-FO Geopotential Coefficients CSR RL06\n    max_degree = 96\n    max_order = 96\n    degree_order = 96\n    normalization = fully normalized\n    institution = UT-AUSTIN/CSR\n    processing_level = 2\n    product_version = RL06\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n\n    Average of monthly solutions\n\n    [[[ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      [ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      [ 1.84422663e-10  9.25679556e-11 -3.83500305e-11 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      ...\n      [ 6.10660859e-12  2.02340281e-13  7.35534442e-12 ...  4.30518176e-11\n        0.00000000e+00  0.00000000e+00]\n      [-3.59387039e-12 -6.02718201e-12 -1.68845289e-12 ... -2.47010217e-11\n        9.95521155e-13  0.00000000e+00]\n      [-2.09598368e-12  4.38205266e-12 -3.08504132e-12 ... -1.06180191e-10\n       -4.22540682e-12  9.45004334e-12]]\n\n     [[ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      [ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      [ 0.00000000e+00 -6.95504729e-11  4.66008820e-12 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      ...\n      [ 0.00000000e+00 -2.02779108e-12  1.28132376e-12 ...  2.70660778e-11\n        0.00000000e+00  0.00000000e+00]\n      [ 0.00000000e+00  6.34766059e-12 -1.40266107e-12 ... -1.63210355e-11\n        1.74411386e-12  0.00000000e+00]\n      [ 0.00000000e+00 -2.98368541e-12 -1.09980733e-11 ... -7.87717175e-11\n       -7.85024577e-12 -4.73324005e-12]]]\n\n    [[[0.000e+00 0.000e+00 0.000e+00 ... 0.000e+00 0.000e+00 0.000e+00]\n      [0.000e+00 0.000e+00 0.000e+00 ... 0.000e+00 0.000e+00 0.000e+00]\n      [3.374e-13 5.154e-13 6.335e-13 ... 0.000e+00 0.000e+00 0.000e+00]\n      ...\n      [1.033e-11 1.034e-11 1.032e-11 ... 1.717e-11 0.000e+00 0.000e+00]\n      [9.930e-12 9.886e-12 9.858e-12 ... 6.068e-12 5.054e-12 0.000e+00]\n      [1.056e-11 1.054e-11 1.053e-11 ... 4.096e-11 6.989e-12 7.420e-12]]\n\n     [[0.000e+00 0.000e+00 0.000e+00 ... 0.000e+00 0.000e+00 0.000e+00]\n      [0.000e+00 0.000e+00 0.000e+00 ... 0.000e+00 0.000e+00 0.000e+00]\n      [0.000e+00 4.225e-13 7.317e-13 ... 0.000e+00 0.000e+00 0.000e+00]\n      ...\n      [0.000e+00 1.028e-11 1.035e-11 ... 1.713e-11 0.000e+00 0.000e+00]\n      [0.000e+00 9.790e-12 9.923e-12 ... 6.232e-12 5.132e-12 0.000e+00]\n      [0.000e+00 1.047e-11 1.060e-11 ... 4.089e-11 6.981e-12 7.459e-12]]]\n\n\nFor more details, please refer to `csr_gsm.deaverage?`.\n\n### De-background  GRACE GSM data\n\nRemove the background field from the monthly solutions. This step is not necessary, but it can be used as a way to verify the de-averaged monthly solutions.\n\n\n```python\ncsr_gsm_debackground = csr_gsm.debackground()\n\nprint(csr_gsm_debackground,'\\n')\nprint(csr_gsm_debackground.background_gravity,'\\n')\nprint(csr_gsm_debackground.shc[10])\n```\n\n    title = Debackgrounded GRACE & GRACE-FO Geopotential Coefficients CSR RL06\n    max_degree = 96\n    max_order = 96\n    degree_order = 96\n    normalization = fully normalized\n    institution = UT-AUSTIN/CSR\n    processing_level = 2\n    product_version = RL06\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n\n    GGM05C\n\n    [[[ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      [ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      [ 1.74518000e-10  5.89105312e-11 -3.82188300e-11 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      ...\n      [ 6.74305609e-12  1.42961946e-12  6.05156366e-12 ...  3.27285439e-11\n        0.00000000e+00  0.00000000e+00]\n      [-8.92741659e-12 -6.19449953e-12 -2.38098621e-12 ... -1.06105863e-10\n       -6.68478535e-12  0.00000000e+00]\n      [-7.51046521e-13  6.47684322e-12 -1.89032517e-13 ... -1.01848744e-10\n        5.33312012e-11 -6.95728099e-12]]\n\n     [[ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      [ 0.00000000e+00  0.00000000e+00  0.00000000e+00 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      [ 0.00000000e+00 -2.56846039e-11 -1.36937040e-11 ...  0.00000000e+00\n        0.00000000e+00  0.00000000e+00]\n      ...\n      [ 0.00000000e+00 -1.45661890e-12 -1.10232503e-13 ...  1.36114572e-11\n        0.00000000e+00  0.00000000e+00]\n      [ 0.00000000e+00  8.23449794e-12 -5.41604372e-13 ... -1.59533178e-10\n       -6.78363971e-12  0.00000000e+00]\n      [ 0.00000000e+00 -4.55778346e-12 -9.57638370e-12 ... -6.04274164e-11\n       -2.73714269e-11 -5.54947649e-12]]]\n\n\nFor more details, please refer to `csr_gsm.debackground?`.\n\n### Read SLR C20 data\n\nRead all feasible SLR C20 RL06 monthly solutions so far.\n\n\n```python\nfrom ggtools.gg import read_slr_c20\nslr_c20 = read_slr_c20()\nprint(slr_c20)\n```\n\n    title = Monthly estimates of C20 from 5 SLR satellites based on GRACE RL06 models.\n    normalization = fully normalized\n    institution = Center for Space Research, The University of Texas at Austin\n    product_version = RL06\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n\n\nFor more details, please refer to `read_slr_c20?` and `slr_c20?`.\n\n\n```python\nprint(slr_c20.summary,'\\n')\nprint(slr_c20.missing_month,'\\n')\nprint(slr_c20.date_issued,'\\n')\nprint(slr_c20.background_gravity)\n\nprint(slr_c20.mean_c20,'\\n') # c20 in GGM05C\nprint(slr_c20.c20,'\\n')\nprint(slr_c20.c20_std,'\\n')\nprint(slr_c20.c20_demean) # c20 - c20 in GGM05C\n```\n\n    As a convenience to users who wish to use a replacement value for C20, a monthly C20 estimate time series is provided. These estimates are obtained from the analysis of Satellite Laser Ranging (SLR) data to five geodetic satellites: LAGEOS-1 and 2, Starlette, Stella and Ajisai. The background gravity satellites model used in the SLR analysis is consistent with the GRACE Release-06 processing, including the use of the same Atmosphere-Ocean De-aliasing product.\n\n    ['2002-06' '2002-07' '2003-06' '2011-01' '2011-06' '2012-05' '2012-10'\n     '2013-03' '2013-08' '2013-09' '2014-02' '2014-07' '2014-12' '2015-06'\n     '2015-10' '2015-11' '2016-04' '2016-09' '2016-10' '2017-02' '2017-07'\n     '2017-08' '2017-09' '2017-10' '2017-11' '2017-12' '2018-01' '2018-02'\n     '2018-03' '2018-04' '2018-05' '2018-08' '2018-09']\n\n    Created November 13, 2019 - last month reported is October 2019.\n\n    GGM05C\n\n    -0.00048416945732\n\n    [-0.00048417 -0.00048417 -0.00048417 -0.00048417 -0.00048417 -0.00048417\n     -0.00048417 -0.00048417 -0.00048417 -0.00048417 -0.00048417 -0.00048417\n     ...\n     -0.00048417 -0.00048417 -0.00048417 -0.00048417 -0.00048417 -0.00048417\n     -0.00048417 -0.00048417 -0.00048417 -0.00048417]\n\n    [3.789e-11 3.141e-11 3.164e-11 3.628e-11 3.292e-11 3.440e-11 3.556e-11\n     3.660e-11 3.124e-11 2.755e-11 3.646e-11 3.141e-11 3.368e-11 2.771e-11\n     ...\n     4.315e-11 4.219e-11 3.312e-11 3.169e-11 3.659e-11 4.319e-11 4.160e-11\n     5.326e-11 3.543e-11 3.717e-11]\n\n    [ 1.1088e-10  7.3380e-11 -9.6680e-11 -7.9420e-11 -6.4740e-11 -3.8280e-11\n      6.1700e-12  4.6160e-11  3.5060e-11  7.6130e-11  5.6550e-11  4.5380e-11\n     ...\n     -1.0959e-10 -7.4410e-11 -8.7660e-11 -3.0400e-11 -4.4480e-11 -9.2330e-11\n     -2.3736e-10 -2.3425e-10 -2.5003e-10 -2.5976e-10]\n\n### De-average the SLR C20 monthly solutions\n\nRemove the average C20 from the SLR C20 monthly solutions.\n\n\n```python\nslr_c20_deaverage = slr_c20.deaverage()\n\nprint(slr_c20_deaverage,'\\n')\nprint(slr_c20_deaverage.c20,'\\n')\nprint(slr_c20_deaverage.mean_c20) # average of c20 \n```\n\n    title = Deaveraged Monthly estimates of C20 from 5 SLR satellites based on GRACE RL06 models.\n    normalization = fully normalized\n    institution = Center for Space Research, The University of Texas at Austin\n    product_version = RL06\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n\n    [ 1.60614513e-10  1.23116713e-10 -4.69406871e-11 -2.96770871e-11\n     -1.50012871e-11  1.14603129e-11  5.59060129e-11  9.58994129e-11\n      ...\n      5.25801288e-12 -4.25913871e-11 -1.87620087e-10 -1.84511087e-10\n     -2.00289787e-10 -2.10022787e-10]\n\n    -0.0004841695070590129\n\n\nFor more details, please refer to `slr_c20.deaverage?`.\n\n###  Combine GRACE GSM data\n\nYou may calculate the arithmetic mean of the de-averaged monthly solutions from CSR, GFZ, and JPL, or, you may first calculate the arithmetic mean of the monthly solutions from CSR, GFZ, and JPL to get the combined solutions, then de-average the combined solutions. \n\n#### Method 1: de-average and then calculate arithmetic mean\n\n\n```python\nfrom ggtools.gg import gsm_average\ngsm_deaverage_comb = gsm_average([csr_gsm_deaverage,gfz_gsm_deaverage,jpl_gsm_deaverage])\nprint(gsm_deaverage_comb)\n```\n\n    title = Combined Deaveraged GRACE & GRACE-FO Geopotential Coefficients RL06\n    max_degree = 96\n    max_order = 96\n    degree_order = 96\n    normalization = fully normalized\n    institution = UT-AUSTIN/CSR, GFZ German Research Centre for Geosciences, NASA/JPL\n    processing_level = 2\n    product_version = RL06\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n\n\nFor more details, please refer to `gsm_average?`.\n\n#### Method 2: calculate arithmetic mean and then de-average\n\n\n```python\ngsm_comb = gsm_average([csr_gsm,gfz_gsm,jpl_gsm])\ngsm_comb_deaverage = gsm_comb.deaverage()\nprint(gsm_comb_deaverage)\n```\n\n    title = Deaveraged Combined GRACE & GRACE-FO Geopotential Coefficients RL06\n    max_degree = 96\n    max_order = 96\n    degree_order = 96\n    normalization = fully normalized\n    institution = UT-AUSTIN/CSR, GFZ German Research Centre for Geosciences, NASA/JPL\n    processing_level = 2\n    product_version = RL06\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n\n\nThis method is only applicable to the case where CSR, GFZ, and JPL have a same number of monthly solutions. Generally, CSR, GFZ, and JPL have a different number of monthly solutions, and it is recommended to use the first method to obtain the combined monthly solutions.\n\n### Replace C20 in GRACE GSM data with SLR C20\n\nThe time interval of the SLR C20 data should be consistent with that of GRACE GSM data. You may replace C20 in de-averaged GRACE GSM data with the de-averaged SLR C20, or, you may first replace C20 in GRACE GSM data with SLR C20, then de-average the GRACE GSM data.\n\nReconfirm the time coverage of the SLR C20 data and the GRACE GSM data.\n\n\n```python\nprint('SLR C20 solutions start month: ',slr_c20.time_coverage_start)\nprint('SLR C20 solutions end month: ',slr_c20.time_coverage_end)\nprint('Combined deaveraged GRACE GSM solutions start month: ',gsm_deaverage_comb.time_coverage_start)\nprint('Combined deaveraged GRACE GSM solutions end month: ',gsm_deaverage_comb.time_coverage_end)\n```\n\n    SLR C20 solutions start month:  2002-04\n    SLR C20 solutions end month:  2019-10\n    Combined deaveraged GRACE GSM solutions start month:  2002-04\n    Combined deaveraged GRACE GSM solutions end month:  2019-10\n\n\nGenerally, the latest GRACE GSM monthly solution is released one month later than the SLR C20 solution, so the number of monthly solutions for SLR C20 is almost always one more than that for GRACE GSM.\n\n#### Method 1: de-average SLR C20 then replace C20\n\n\n```python\ngsm_deaverage_comb_r = gsm_deaverage_comb.replace_slr_c20(slr_c20_deaverage)\n\nprint(gsm_deaverage_comb_r,'\\n')\nprint(gsm_deaverage_comb_r.shc[:,0,2,0]) # C20\n```\n\n    title = Combined Deaveraged GRACE & GRACE-FO Geopotential Coefficients RL06 with C20 replaced by the SLR measurements\n    max_degree = 96\n    max_order = 96\n    degree_order = 96\n    normalization = fully normalized\n    institution = UT-AUSTIN/CSR, GFZ German Research Centre for Geosciences, NASA/JPL\n    processing_level = 2\n    product_version = RL06\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n\n    [ 1.60614513e-10  1.23116713e-10 -4.69406871e-11 -2.96770871e-11\n     -1.50012871e-11  1.14603129e-11  5.59060129e-11  9.58994129e-11\n      ...\n      5.25801288e-12 -4.25913871e-11 -1.87620087e-10 -1.84511087e-10\n     -2.00289787e-10 -2.10022787e-10]\n\n\nFor more details, please refer to `gsm_deaverage_comb.replace_slr_c20?`.\n\n#### Method 2: replace C20 then de-average\n\n\n```python\ngsm_comb_r_deaverage = gsm_comb.replace_slr_c20(slr_c20).deaverage()\n\nprint(gsm_comb_r_deaverage,'\\n')\nprint(gsm_comb_r_deaverage.shc[:,0,2,0]) # C20\n```\n\n    title = Deaveraged Combined GRACE & GRACE-FO Geopotential Coefficients RL06 with C20 replaced by the SLR measurements\n    max_degree = 96\n    max_order = 96\n    degree_order = 96\n    normalization = fully normalized\n    institution = UT-AUSTIN/CSR, GFZ German Research Centre for Geosciences, NASA/JPL\n    processing_level = 2\n    product_version = RL06\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n\n    [ 1.60614513e-10  1.23116713e-10 -4.69406874e-11 -2.96770874e-11\n     -1.50012874e-11  1.14603126e-11  5.59060126e-11  9.58994125e-11\n     ...\n      5.25801256e-12 -4.25913874e-11 -1.87620087e-10 -1.84511087e-10\n     -2.00289787e-10 -2.10022787e-10]\n\n\n### DDK filtering\n\nAs a non-isotropic filter, DDK filter is designed to attenuate noise described as striping patterns in GRACE GSM data. There are eight kinds of DDK filters to choose from according to the smoothing strength. From DDK1 to DDK8, the smoothing strength gradually weakens.\n\nSmooth noise using DDK5 filter.\n\n\n```python\ngsm_r_ddk5 = gsm_deaverage_comb_r.filter_ddk('DDK5')\n\nprint(gsm_r_ddk5)\nprint(gsm_r_ddk5.summary)\n```\n\n    title = DDK5 filtered Combined Deaveraged GRACE & GRACE-FO Geopotential Coefficients  RL06 with C20 replaced by the SLR measurements\n    max_degree = 96\n    max_order = 96\n    degree_order = 96\n    normalization = fully normalized\n    institution = UT-AUSTIN/CSR, GFZ German Research Centre for Geosciences, NASA/JPL\n    processing_level = 2\n    product_version = RL06\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n    Spherical harmonic coefficients representing an estimate of the mean gravity field of Earth during the specified timespan derived from GRACE & GRACE-FO mission measurements. These coefficients represent the full magnitude of land hydrology, ice, and solid Earth processes. Further, they represent atmospheric and oceanic processes not captured in the accompanying GAC product. Note that the 2nd-degree terms have been replaced with the values from SLR C20. Also note that C20 from SLR also experienced the DDK5 filtering.\n\n\nFor more details, please refer to `gsm_deaverage_comb_r.filter_ddk?`.\n\nNote that C20 from SLR also experienced the DDK5 filtering. Alternatively, you may replace C20 after performing the DDK filtering. \n\n\n```python\ngsm_ddk5_r = gsm_deaverage_comb.filter_ddk('DDK5').replace_slr_c20(slr_c20_deaverage)\n```\n\nSubstract the raw C20 from DDK5 filtered C20.\n\n\n```python\nprint(gsm_r_ddk5.shc[:,0,2,0] - gsm_ddk5_r.shc[:,0,2,0]) \n```\n\n    [-3.07271480e-16 -5.33381926e-17  8.07660043e-17  3.21390821e-16\n      4.92343516e-17  3.54627589e-17 -3.12772822e-17 -4.76970460e-17\n     ...\n     -5.22234499e-17 -5.10455550e-17 -4.61722884e-17 -3.88862298e-17\n     -4.15231980e-17 -2.04760123e-17  6.78578147e-17  4.17457051e-17\n      8.27795363e-17  8.68120470e-17]\n\n\nThe difference between the two is much smaller than the standard deviation of C20(magnitude of $10^{-11}$), so it doesn't matter in using either method. \n\n### Gaussian filtering\n\nAs an isotropic filter, the Gaussian filter is used to attenuate the striping noise in GRACE GSM data. The smoothing effect can be changed by adjusting the filter radius. Larger filter radius can significantly suppress high-degree noise, but at the same time attenuates the signals, especially the high-degree signal with greater uncertainty. If the DDK filtering has been applied, you don't need to use Gaussian filtering to process it again. \n\nSmooth noise using Gaussian filter with 160km filter radius.\n\n\n```python\ngsm_r_gau = gsm_deaverage_comb_r.filter_gaussian(160)\n\nprint(gsm_r_gau)\nprint(gsm_r_gau.summary)\n```\n\n    title = Gaussian filtered Combined Deaveraged GRACE & GRACE-FO Geopotential Coefficients  RL06 with C20 replaced by the SLR measurements\n    max_degree = 96\n    max_order = 96\n    degree_order = 96\n    normalization = fully normalized\n    institution = UT-AUSTIN/CSR, GFZ German Research Centre for Geosciences, NASA/JPL\n    processing_level = 2\n    product_version = RL06\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n    Spherical harmonic coefficients representing an estimate of the mean gravity field of Earth during the specified timespan derived from GRACE & GRACE-FO mission measurements. These coefficients represent the full magnitude of land hydrology, ice, and solid Earth processes. Further, they represent atmospheric and oceanic processes not captured in the accompanying GAC product. Note that the 2nd-degree terms have been replaced with the values from SLR C20. Also note that C20 from SLR also experienced the Gaussian filtering.\n\n\nFor more details, please refer to `gsm_deaverage_comb_r.filter_gaussian?`.\n\nNote that C20 from SLR also experienced the Gaussian filtering. Alternatively, you may replace C20 after performing the Gaussian filtering. \n\n\n```python\ngsm_gau_r = gsm_deaverage_comb.filter_gaussian(160).replace_slr_c20(slr_c20_deaverage)\n```\n\nSubstract the raw C20 from Gaussian filtered C20.\n\n\n```python\nprint(gsm_r_gau.shc[:,0,2,0] - gsm_gau_r.shc[:,0,2,0]) \n```\n\n    [-2.18616534e-13 -1.67577316e-13  6.38921734e-14  4.03942446e-14\n      2.04186367e-14 -1.55989259e-14 -7.60951083e-14 -1.30531151e-13\n     ...\n      8.14599500e-14  3.35849413e-14  5.16146839e-14 -2.63274544e-14\n     -7.15681622e-15  5.79722296e-14  2.55374514e-13  2.51142774e-13\n      2.72619567e-13  2.85867403e-13]\n\n\nThe difference between the two is still smaller than the standard deviation of C20(magnitude of $10^{-11}$), so using either method is acceptable. It is recommended to perform Gaussian filtering after replacing C20.\n\n### Convert geopotential coefficients to surface mass anomaly\n\nThree ways to express surface mass anomaly(SMA) are provided. They are equivalent water thickness(EWT), equivalent ice thickness(EIT), and equivalent sand thickness(EST). If no equivalent substance is specified, the default is the equivalent water thickness in [mm w.e.]. \n\n\n```python\ngsm_r_ddk5_sma = gsm_r_ddk5.sma()\n\nprint(gsm_r_ddk5_sma)\nprint(gsm_r_ddk5_sma.summary)\n```\n\n    title = Stokes coefficients for Surface Mass Anomaly(SMA) in Equivalent Water Thickness(EWT) derived from the DDK5 filtered Combined Deaveraged GRACE & GRACE-FO Geopotential Coefficients RL06 with C20 replaced by the SLR measurements\n    max_degree = 96\n    max_order = 96\n    degree_order = 96\n    normalization = fully normalized\n    institution = UT-AUSTIN/CSR, GFZ German Research Centre for Geosciences, NASA/JPL\n    processing_level = 2\n    product_version = RL06\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n    Spherical harmonic coefficients representing an estimate of the Surface Mass Anomaly(SMA) expressed in terms of Equivalent Water[1000kg/m3] Thickness(EWT) with unit of [mm w.e.] during the specified timespan derived from GRACE & GRACE-FO mission measurements. These coefficients represent the full magnitude of land hydrology, ice, and solid Earth processes. Further, they represent atmospheric and oceanic processes not captured in the accompanying GAC product. Note that the 2nd-degree terms have been replaced with the values from SLR C20. Also note that C20 from SLR also experienced the DDK5 filtering.\n\n\nFor more details, please refer to `gsm_r_ddk5.sma?`.\n\nNote that the DDK filtering is performed before the conversion. However, there is no problem in performing the conversion first and then the filtering, because the difference between the two is orders of magnitude smaller than the uncertainty, although the conversion and filtering do not meet the exchange law.\n\n\n```python\ngsm_r_sma_ddk5 = gsm_deaverage_comb_r.sma().filter_ddk('DDK5')\nprint(gsm_r_sma_ddk5)\n```\n\n    title = DDK5 filtered Stokes coefficients for Surface Mass Anomaly(SMA) in Equivalent Water Thickness(EWT) derived from the Combined Deaveraged GRACE & GRACE-FO Geopotential Coefficients RL06 with C20 replaced by the SLR measurements\n    max_degree = 96\n    max_order = 96\n    degree_order = 96\n    normalization = fully normalized\n    institution = UT-AUSTIN/CSR, GFZ German Research Centre for Geosciences, NASA/JPL\n    processing_level = 2\n    product_version = RL06\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n\n### Convert  SMA to geopotential coefficients\n\nThis is not commonly used.\n\n\n```python\nprint(gsm_r_ddk5_sma.gsm())\n```\n\n    title = DDK5 filtered Combined Deaveraged GRACE & GRACE-FO Geopotential Coefficients  RL06 with C20 replaced by the SLR measurements\n    max_degree = 96\n    max_order = 96\n    degree_order = 96\n    normalization = fully normalized\n    institution = UT-AUSTIN/CSR, GFZ German Research Centre for Geosciences, NASA/JPL\n    processing_level = 2\n    product_version = RL06\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n\n For more details, please refer to  `gsm_r_ddk5_sma.gsm?`.\n\n### Set up the study area\n\nTwo ways are listed to set the study area. one is to provide a boundary file, and the other is to create an ellipse.\n\n#### Method 1: through a boundary file\n\nMake sure the boundary file exists in the current directory. The first and second columns of the boundary file are latitude and longitude, respectively. \n\n\n```python\nimport numpy as np\nstudy_area = np.loadtxt('boundaries.txt') \nprint(study_area)\n```\n\n    [[32.75 93.75]\n     [32.25 93.75]\n     [32.25 92.75]\n     ...\n     [32.25 97.25]\n     [32.75 97.25]\n     [32.75 93.75]]\n\n\n#### Method 2: through creating an ellipse\n\nAn ellipse is defined by four parameters:\n\n- Center of ellipse\n- Rotation angle of the semi-major axis with respect to local east\n- Semi-major axis and semi-minor axis in degrees\n\nCreate an ellipse centered at (30N, 95E), with a semi-major axis of 4.2 degrees and a semi-minor axis of 3.2 degrees.\n\n\n```python\nfrom pyshtools.utils import MakeEllipseCoord\nlat0,lon0,dec0 = 30,95,0 \nsemi_minor0, semi_major0 = 3.2,4.2\nstudy_area = MakeEllipseCoord(lat0, lon0, dec0, semi_minor0, semi_major0)\nprint(study_area)\n```\n\n    [[33.2        95.        ]\n     [33.19970027 95.0667118 ]\n     [33.19880084 95.13342754]\n     ...\n     [33.19730097 94.79984886]\n     [33.19880084 94.86657246]\n     [33.19970027 94.9332882 ]]\n\n\nCalculate the ratio of the solid angle formed by the ellipse to the global solid angle(4$\\pi$). Note that $area = solid angle \\times R^2$, where R is the Earth's mean radius.\n\n\n```python\nfrom ggtools.gg import solid_angle_ratio\narea_ratio = solid_angle_ratio(semi_minor0,semi_major0)\nprint(area_ratio)\n```\n\n    0.0010421908639105157\n\n\nFor more details, please refer to `solid_angle_ratio?`.\n\n###  Plot the rate of SMA\n\n\n```python\n# set the extent of the drawing area\nregion = [82,106,21,39] # [left lon, right lon, lower lat, upper lat]\n```\n\n#### Method 1: estimate the rate of SHCs then convert it to grids\n\n\n```python\ngsm_r_ddk5_sma_rate = gsm_r_ddk5_sma.rate()\ngsm_r_ddk5_sma_rate_grid = gsm_r_ddk5_sma_rate.grid(region)\n\nfig_name1 = 'sma_rate_grid_block.png'\nfig_name2 = 'sma_rate_grid.png'\nylabel = 'SMA [mm w.e./yr]'\ngsm_r_ddk5_sma_rate_grid.plot(fig_name1,ylabel,'block',study_area)\ngsm_r_ddk5_sma_rate_grid.plot(fig_name2,ylabel,polygons=study_area)\n```\n\n<p align=\"middle\">\n  <img src=\"readme_figures/output_102_1.png\" width=\"400\" />\n  <img src=\"readme_figures/output_102_2.png\" width=\"400\" />\n</p>\n\nFor more details, please refer to `gsm_r_ddk5_sma.rate?`, `gsm_r_ddk5_sma_rate.grid?`, `gsm_r_ddk5_sma_rate_grid?`, and `gsm_r_ddk5_sma_rate_grid.plot?`.\n\n#### Method 2: convert SHCs to grids then estimate the rate of grids\n\n\n```python\ngsm_r_ddk5_sma_grid = gsm_r_ddk5_sma.grid(region)\ngsm_r_ddk5_sma_grid_rate = gsm_r_ddk5_sma_grid.rate()\n\nfig_name1 = 'sma_grid_rate_block.png'\nfig_name2 = 'sma_grid_rate.png'\nylabel = 'SMA [mm w.e./yr]'\ngsm_r_ddk5_sma_grid_rate.plot(fig_name1,ylabel,'block',study_area)\ngsm_r_ddk5_sma_grid_rate.plot(fig_name2,ylabel,polygons=study_area)\n```\n\n    The calculation will take a few minutes, please be patient.\n\n<p align=\"middle\">\n  <img src=\"readme_figures/output_105_1.png\" width=\"400\" />\n  <img src=\"readme_figures/output_105_2.png\" width=\"400\" />\n</p>    \n\nSince the second method takes a lot of time to estimate the uncertainty of the grid data, the first method is recommended.\n\n###  Calculate the time series of SMA over the study area and estimate its rate\n\n#### Method 1: from SHCs to series and rate\n\nCalculate the time series of SMA over the study area.\n\n\n```python\ngsm_r_ddk5_sma_series = gsm_r_ddk5_sma.study_area(study_area)\nprint(gsm_r_ddk5_sma_series,'\\n')\n\n# time series of SMA\nprint(gsm_r_ddk5_sma_series.qs,'\\n')\n\n# standard deviation\nprint(gsm_r_ddk5_sma_series.qs_std)\n```\n\n    title = Integral(over the study area) of Stokes coefficients for Surface Mass Anomaly(SMA) in Equivalent Water Thickness(EWT) derived from the DDK5 filtered Combined Deaveraged GRACE & GRACE-FO Geopotential Coefficients RL06 with C20 replaced by the SLR measurements\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n    equi_material = Water\n\n    [  7.80083803  58.62587324  73.76908473  37.28658384  53.38751612\n      30.71881195   5.74150633  32.72088735  -1.42416991  18.75145636\n      ...\n     -47.60496348 -73.31059842 -73.00481244 -92.60124409 -78.85514767\n     -53.20232491 -39.92594104 -51.5172863  -42.71680212  -8.95193687\n     -22.16207019 -24.10597124 -40.20608753]\n\n    [ 6.30457663  5.46950829  3.75575696  7.60148364  3.6918224   3.67420728\n      4.16828886  5.49457631  3.99793319  3.27580461  2.89207024  3.71135591\n      ...\n      1.82726744  2.03576616  1.80579235  1.81882144  1.75091745  1.79941898\n      1.75461899  1.83153935  1.98898853  1.77737887]\n\n\nFor more details, please refer to `gsm_r_ddk5_sma.study_area?` and `gsm_r_ddk5_sma_series?`.\n\nEstimate the rate of the times series of SMA using ILSQM(Iterative Least Square Method). \n\n\n```python\ngsm_r_ddk5_sma_series_rate = gsm_r_ddk5_sma_series.rate()\nprint('rate: ',gsm_r_ddk5_sma_series_rate.qs,' ± ',gsm_r_ddk5_sma_series_rate.qs_std)\nprint('area: ',gsm_r_ddk5_sma_series_rate.area,' km2')\n```\n\n    rate:  [-6.70810897]  ±  [0.48489388]\n    area:  508282.0114287184  km2\n\n\nFor more details, please refer to `gsm_r_ddk5_sma_series.rate?`.\n\nPlot the time series of SMA.\n\n\n```python\nfig_name = 'sma_series.png'\nylabel = 'SMA [Gt]'\ngsm_r_ddk5_sma_series.plot(fig_name,ylabel)\n```\n<p align=\"middle\">\n<img src=\"readme_figures/output_116_1.png\" width=\"500\" />\n</p>\n\nFor more details, please refer to `gsm_r_ddk5_sma_series.plot?`.\n\nEstimate the rate of the times series of SMA using IWLSQM(Iterative Weighted Least Square Method). \n\n\n```python\ngsm_r_ddk5_sma_series_rate = gsm_r_ddk5_sma_series.rate('IWLSQM')\nprint('rate: ',gsm_r_ddk5_sma_series_rate.qs,' ± ',gsm_r_ddk5_sma_series_rate.qs_std)\nprint('area: ',gsm_r_ddk5_sma_series_rate.area,' km2')\n```\n\n    rate:  [-6.59799566]  ±  [0.03844455]\n    area:  508282.0114287184  km2\n\n\nNote that the rate of the time series through IWLSQM is close to that through IWLSQM, but the uncertainty of the rate differs by an order of magnitude.\n\nEstimate the rate of SMA and its uncertainty using LSQM and WLSQM. Note that these two methods will not remove any outliers caused by abnormal monthly solutions.\n\n\n```python\ngsm_r_ddk5_sma_series_rate = gsm_r_ddk5_sma_series.rate('LSQM')\nprint('rate: ',gsm_r_ddk5_sma_series_rate.qs,' ± ',gsm_r_ddk5_sma_series_rate.qs_std)\nprint('area: ',gsm_r_ddk5_sma_series_rate.area,' km2','\\n')\n\ngsm_r_ddk5_sma_series_rate = gsm_r_ddk5_sma_series.rate('WLSQM')\nprint('rate: ',gsm_r_ddk5_sma_series_rate.qs,' ± ',gsm_r_ddk5_sma_series_rate.qs_std)\nprint('area: ',gsm_r_ddk5_sma_series_rate.area,' km2')\n```\n\n    rate:  [-6.59361023]  ±  [0.49616184]\n    area:  508282.0114287184  km2 \n\n    rate:  [-6.59776226]  ±  [0.03844441]\n    area:  508282.0114287184  km2\n\n\n#### Method 2: from SHCs rate to series rate\n\n\n```python\ngsm_r_ddk5_sma_rate_region = gsm_r_ddk5_sma_rate.study_area(study_area)\nprint(gsm_r_ddk5_sma_rate_region)\nprint('rate: ',gsm_r_ddk5_sma_rate_region.qs,' ± ',gsm_r_ddk5_sma_rate_region.qs_std)\nprint('area: ',gsm_r_ddk5_sma_rate_region.area,' km2')\n```\n\n    title = Integral(over the study area) of Annual change rate of Stokes coefficients for Surface Mass Anomaly(SMA) in Equivalent Water Thickness(EWT) derived from the DDK5 filtered Combined Deaveraged GRACE & GRACE-FO Geopotential Coefficients RL06 with C20 replaced by the SLR measurements\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n    equi_material = Water\n    rate:  [-6.86790848]  ±  [0.33702872]\n    area:  508282.0114287184  km2\n\n\n#### Method 3: from grids to series and rate\n\n\n```python\ngsm_r_ddk5_sma_grid_series = gsm_r_ddk5_sma_grid.study_area(study_area)\ngsm_r_ddk5_sma_grid_series_rate = gsm_r_ddk5_sma_grid_series.rate()\n\nprint('rate: ',gsm_r_ddk5_sma_grid_series_rate.qs,' ± ',gsm_r_ddk5_sma_grid_series_rate.qs_std)\nprint('area: ',gsm_r_ddk5_sma_grid_series_rate.area,' km2')\n```\n\n    rate:  [-6.70774072]  ±  [0.48485163]\n    area:  508317.01700056973  km2\n\n\n#### Method 4.1: from grids rate to series rate\n\nThe grids rate is obtained by estimating the rate of the grid.\n\n\n```python\ngsm_r_ddk5_sma_grid_rate_region = gsm_r_ddk5_sma_grid_rate.study_area(study_area)\nprint(gsm_r_ddk5_sma_grid_rate_region)\nprint('rate: ',gsm_r_ddk5_sma_grid_rate_region.qs,' ± ',gsm_r_ddk5_sma_grid_rate_region.qs_std)\nprint('area: ',gsm_r_ddk5_sma_grid_rate_region.area,' km2')\n```\n\n    title = Annual change rate of Sum(over the study area) of grids expanded from Stokes coefficients for Surface Mass Anomaly(SMA) in Equivalent Water Thickness(EWT) derived from the DDK5 filtered Combined Deaveraged GRACE & GRACE-FO Geopotential Coefficients  RL06 with C20 replaced by the SLR measurements\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n    equi_material = Water\n    rate:  [-6.74723381]  ±  [0.08916294]\n    area:  508317.01700056973  km2\n\n\n#### Method 4.2: from grids rate to series rate\n\nThe grids rate is obtained by converting the SHCs rate.\n\n\n```python\ngsm_r_ddk5_sma_rate_grid_region = gsm_r_ddk5_sma_rate_grid.study_area(study_area)\nprint(gsm_r_ddk5_sma_rate_grid_region)\nprint('rate: ',gsm_r_ddk5_sma_rate_grid_region.qs,' ± ',gsm_r_ddk5_sma_rate_grid_region.qs_std)\nprint('area: ',gsm_r_ddk5_sma_rate_grid_region.area,' km2')\n```\n\n    title = Sum(over the study area) of grids expanded from Annual change rate of Stokes coefficients for Surface Mass Anomaly(SMA) in Equivalent Water Thickness(EWT) derived from the DDK5 filtered Combined Deaveraged GRACE & GRACE-FO Geopotential Coefficients  RL06 with C20 replaced by the SLR measurements\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n    equi_material = Water\n    rate:  [-6.8675455]  ±  [0.05935396]\n    area:  508317.01700056973  km2\n\n\nIn theory, the four methods mentioned above are equivalent. Although the rates of the time series estimated by these methods are approximately equal, the standard deviations obtained by the first three methods are several times larger than those of the latter method. The first and the third method avoid the rate of SHCs or the rate of grids data, that is, the rate of the time series is obtained by an LSQ fitting directly.  Therefore, these two methods are recommended. Compared with the third method, the first method is less computationally expensive, so the first method takes less running time and is recommended.\n\n## GLDAS\n\n### Download GLDAS data\n\nThe GLDAS(Global Land Data Assimilation System) grid data is downloaded from [GES DISC](https://disc.gsfc.nasa.gov)(Goddard Earth Sciences Data and Information Services Center) by default. Before downloading the data, make sure you have an EARTHDATA account. If not, please go to the official [EARTHDATA](https://urs.earthdata.nasa.gov/home) website to register one.\n\nEnter your username and password for EARTHDATA.\n\n\n```python\nusername,password = 'your_username','your_password'\n```\n\nDownload GLDAS monthly grid data with a spatial resolution of 1 degree from 2002-04 to 2019-10. \n\n\n```python\nfrom ggtools.gg import gldas_download\nstart_date,end_date = '2002-04','2019-10'\ngldas_download(username,password,start_date,end_date)\n```\n\nFor more details, please refer to `gldas_download?`.\n\n### Read GLDAS data\n\nRead the GLDAS data from 2002-04 to 2019-10. Note that the number of the GLDAS monthly grids should be consistent with the number of the GRACE GSM monthly solutions, if you want to compare the two types of data.\n\n\n```python\nfrom ggtools.gg import read_gldas\ngldas = read_gldas('2002-04','2019-10')\nprint(gldas,'\\n')\nprint(gldas.lats,'\\n')\nprint(gldas.lons)\n```\n\n    title = GLDAS2.1 LIS land surface model output monthly mean\n    resolution = 1deg\n    institution = NASA GSFC\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 211\n    total_month_counts = 211\n    missing_month_counts = 0\n\n    <xarray.DataArray 'lat' (lat: 150)>\n    array([-59.5, -58.5, -57.5, ...,  87.5,  88.5,  89.5], dtype=float32)\n    Coordinates:\n      * lat      (lat) float32 -59.5 -58.5 -57.5 -56.5 -55.5 ... 86.5 87.5 88.5 89.5\n    Attributes:\n        units:          degrees_north\n        standard_name:  latitude\n        long_name:      latitude\n        vmin:           -59.5\n        vmax:           89.5 \n\n    <xarray.DataArray 'lon' (lon: 360)>\n    array([-179.5, -178.5, -177.5, ...,  177.5,  178.5,  179.5], dtype=float32)\n    Coordinates:\n      * lon      (lon) float32 -179.5 -178.5 -177.5 -176.5 ... 177.5 178.5 179.5\n    Attributes:\n        units:          degrees_east\n        standard_name:  longitude\n        long_name:      longitude\n        vmin:           -179.5\n        vmax:           179.5\n\n\nFor more details, please refer to `read_gldas?` and `gldas?`.\n\n### Calculate Terrestrial Water Storage Change\n\nTwo ways to estimate TWSC are provided. The first one is the classic(traditional) technique, i.e. $TWSC = SoilMoi + AccumSnow + Canopy$. The second is through the water balance equation, i.e. $TWSC = Precipitation - WaterEvaporation - SurfaceRunoff - SubsurfaceRunoff$. The difference in results obtained by these two methods is minimal. Note: The TWSC has been de-averaged. The unit of TWSC is [kg/m2] or [mm w.e.].\n\n\n```python\ntwsc_grid = gldas.twsc_grid(region)\nprint(twsc_grid)\nprint(twsc_grid.summary)\n```\n\n    title = Terrestrial Water Storage Change(TWSC) derived from the GLDAS2.1 LIS land surface model output monthly mean\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 211\n    total_month_counts = 211\n    missing_month_counts = 0\n    equi_material = Water\n    region = [82, 106, 21, 39]\n    TWSC is estimated by the formulation: [TWSC = SoilMoi(0-200cm) + Accum_Snow + Canopy], and it has been converted to Equivalent Water Thickness in mm w.e.\n\n\nFor more details, please refer to `gldas.twsc_grid?`.\n\n### Estimate the rate of TWSC\n\n\n```python\ntwsc_grid_rate = twsc_grid.rate()\nprint(twsc_grid_rate)\n```\n\n    title = Annual change rate of Terrestrial Water Storage Change(TWSC) derived from the GLDAS2.1 LIS land surface model output monthly mean\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 211\n    total_month_counts = 211\n    missing_month_counts = 0\n    equi_material = Water\n    region = [82, 106, 21, 39]\n\n\n### Plot the rate of TWSC\n\n\n```python\nfig_name1 = 'twsc_grid_rate_block.png'\nfig_name2 = 'twsc_grid_rate.png'\nylabel = 'TWSC [mm w.e./yr]'\ntwsc_grid_rate.plot(fig_name1,ylabel,'block',study_area)\ntwsc_grid_rate.plot(fig_name2,ylabel,polygons=study_area)\n```\n\n<p align=\"middle\">\n  <img src=\"readme_figures/output_150_1.png\" width=\"400\" />\n  <img src=\"readme_figures/output_150_2.png\" width=\"400\" />\n</p>\n\n\n### Calculate the time series of TWSC and estimate its rate\n\nCalculate the time series of TWSC.\n\n\n```python\ntwsc_grid_series = twsc_grid.study_area(study_area)\n```\n\nEstimate the rate of the times series.\n\n\n```python\ntwsc_grid_series_rate = twsc_grid_series.rate()\nprint(twsc_grid_series_rate,'\\n')\nprint('rate: ',twsc_grid_series_rate.qs,' ± ',twsc_grid_series_rate.qs_std)\nprint('area: ',twsc_grid_series_rate.area,' km2')\n```\n\n    title = Annual change rate of Terrestrial Water Storage Change(TWSC) derived from the GLDAS2.1 LIS land surface model output monthly mean\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 211\n    total_month_counts = 211\n    missing_month_counts = 0\n    equi_material = Water \n\n    rate:  [0.33623102]  ±  [0.36229108]\n    area:  504185.85874313745  km2\n\n\n### Plot the time series of TWSC\n\n\n```python\nfig_name = 'twsc_series.png'\nylabel = 'TWSC [Gt]'\ntwsc_grid_series.plot(fig_name,ylabel)\n```\n<p align=\"middle\">\n<img src=\"readme_figures/output_157_1.png\" width=\"500\" />\n</p>\n\n## Signal leakage correction\n\n### Method 1: scale factor\n\nThe scale factor(or gain factor) is sensitive to the linear trend of the time series and not to the annual term. Besides, it has local characteristics, i.e., different regions correspond different scale factors. This method is only applicable when the SMA distribution derived from GRACE in the study area is similar to the TWSC distribution derived from GLDAS.\n\n\n```python\nfrom ggtools.gg import scale_factor\n\ntwsc_coeffs = gldas.twsc_shc(96) # 96th-degree SHCs for TWSC\nprint(twsc_coeffs,'\\n')\n\nk = scale_factor(twsc_coeffs,study_area,160) \nprint(k)\n```\n\n    title = Terrestrial Water Storage Change(TWSC) derived from the GLDAS2.1 LIS land surface model output monthly mean\n    max_degree = 89\n    max_order = 89\n    degree_order = 96\n    normalization = fully normalized\n    institution = NASA GSFC\n    processing_level = CF-1.6\n    product_version = Noah_v3.3 forced with GDAS-AGRMET-GPCP\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 211\n    total_month_counts = 211\n    missing_month_counts = 0\n\n    0.9867288021260247\n\n\nFor more details, please refer to `gldas.twsc_shc?` and `scale_factor?`.\n\n\n```python\ngsm_r_ddk5_sma_series_rate_leakage = gsm_r_ddk5_sma_series_rate.leakage_correction('scale_factor',k)\nprint(gsm_r_ddk5_sma_series_rate_leakage,'\\n')\nprint('rate: ',gsm_r_ddk5_sma_series_rate_leakage.qs,' ± ',gsm_r_ddk5_sma_series_rate_leakage.qs_std)\nprint('area: ',gsm_r_ddk5_sma_series_rate_leakage.area,' km2')\n```\n\n    title = Signal leakage corrected(Scale factor method) Annual change rate of Integral(over the study area) of Stokes coefficients for Surface Mass Anomaly(SMA) in Equivalent Water Thickness(EWT) derived from the DDK5 filtered Combined Deaveraged GRACE & GRACE-FO Geopotential Coefficients RL06 with C20 replaced by the SLR measurements\n    time_coverage_start = 2002-04\n    time_coverage_end = 2019-10\n    solution_counts = 178\n    total_month_counts = 211\n    missing_month_counts = 33\n    equi_material = Water \n\n    rate:  [-6.61908433]  ±  [0.47845876]\n    area:  508282.0114287184  km2\n\n\nFor more details, please refer to `gsm_r_ddk5_sma_series_rate.leakage_correction?`.\n\n### Method 2 : forward modeling\n\n\n```python\n# calculate the global grid for SMA\ngsm_r_ddk5_sma_grid = gsm_r_ddk5_sma.grid()\ngsm_r_ddk5_sma_grid_leakage = gsm_r_ddk5_sma_grid.leakage_correction('forward_model',160)\ngsm_r_ddk5_sma_grid_leakage_series = gsm_r_ddk5_sma_grid_leakage.study_area(study_area)\ngsm_r_ddk5_sma_grid_leakage_series_rate = gsm_r_ddk5_sma_grid_leakage_series.rate()\n\nprint('rate: ',gsm_r_ddk5_sma_grid_leakage_series_rate.qs,' ± ',gsm_r_ddk5_sma_grid_leakage_series_rate.qs_std)\nprint('area: ',gsm_r_ddk5_sma_grid_leakage_series_rate.area,' km2')\n```\n\n    rate:  [-8.37598258]  ±  [0.50297716]\n    area:  508317.01700056973  km2\n\n\nFor more details, please refer to `gsm_r_ddk5_sma_grid.leakage_correction?`.\n\n### Method 3 : space domain\n\nThis method requires setting the locations of the mascons in advance. Take the glacier catalog with an area of not less than 10 $km^2$ in Southeast Tibet as an example.\n\n\n```python\nimport numpy as np\nfrom ggtools.gg import generate_nodes\n\nglaciers = np.loadtxt('glaciers.txt')\nprint(glaciers)\n```\n\n    [[30.650817 99.443696]\n     [29.91388  99.635285]\n     [28.492921 98.660107]\n     ...\n     [28.985472 97.526066]\n     [30.292734 90.38734 ]\n     [30.415653 90.54994 ]]\n\nGenerate the mascon nodes(centers) based on the glacier catalog.\n\n```python\nnodes = generate_nodes(gsm_r_ddk5_sma_rate_grid,glaciers,study_area)\ngsm_r_ddk5_sma_rate_grid_leakage = gsm_r_ddk5_sma_rate_grid.leakage_correction('space_domain',160,nodes,study_area)\ngsm_r_ddk5_sma_rate_grid_leakage_series = gsm_r_ddk5_sma_rate_grid_leakage.study_area(study_area)\n\nprint('rate: ',gsm_r_ddk5_sma_rate_grid_leakage_series.qs,' ± ',gsm_r_ddk5_sma_rate_grid_leakage_series.qs_std)\nprint('area: ',gsm_r_ddk5_sma_rate_grid_leakage_series.area,' km2')\n```\n\n    rate:  [-8.55902161]  ±  [0.]\n    area:  508317.01700056973  km2\n\nBecause it involves the uncertainties of estimated parameters in Tikhonov regularization, the standard deviation for the rate is temporarily set to 0. This will be improved in the next version of ggtools.\n\nPlot the rate of mascons.\n\n```python\nfig_name1 = 'SMA_SpaceD_block.png'\nfig_name2 = 'SMA_SpaceD.png'\nylabel = 'SMA [mm w.e./yr]'\n\ngsm_r_ddk5_sma_rate_grid_leakage.plot(fig_name1,ylabel,'block',study_area,nodes.nodes)\ngsm_r_ddk5_sma_rate_grid_leakage.plot(fig_name2,ylabel,polygons=study_area,circles=nodes.nodes)\n```\n\n<p align=\"middle\">\n  <img src=\"readme_figures/output_172_1.png\" width=\"400\" />\n  <img src=\"readme_figures/output_172_2.png\" width=\"400\" />\n</p>\n\n### Method 4 : inverse filtering\n\nThis method is equivalent to the forward modeling. The algorithm is extremely simple and avoids the iterative process in the forward modeling.\n\n\n```python\ngsm_r_ddk5_sma_leakage = gsm_r_ddk5_sma.leakage_correction('filter_inverse',160)\ngsm_r_ddk5_sma_leakage_series = gsm_r_ddk5_sma_leakage.study_area(study_area)\ngsm_r_ddk5_sma_leakage_series_rate = gsm_r_ddk5_sma_leakage_series.rate()\n\nprint('rate: ',gsm_r_ddk5_sma_leakage_series_rate.qs,' ± ',gsm_r_ddk5_sma_leakage_series_rate.qs_std)\nprint('area: ',gsm_r_ddk5_sma_leakage_series_rate.area,' km2')\n```\n\n    rate:  [-8.37974852]  ±  [0.50322993]\n    area:  508282.0114287184  km2\n\n### Method 5 : spectral domain\n\nThis method requires setting the locations of the mascons in advance. Still take the glacier catalog with an area of not less than 10 $km^2$ in Southeast Tibet as an example.\n\n\n```python\n# global grids\ngsm_r_ddk5_sma_rate_grid = gsm_r_ddk5_sma_rate.grid()\nnodes = generate_nodes(gsm_r_ddk5_sma_rate_grid,glaciers,study_area)\n\ngsm_r_ddk5_sma_rate_leakage_grid = gsm_r_ddk5_sma_rate.leakage_correction('spectral_domain',160,nodes,study_area,'windows',area_ratio)\ngsm_r_ddk5_sma_rate_leakage_grid_series = gsm_r_ddk5_sma_rate_leakage_grid.study_area(study_area)\n\nprint('rate: ',gsm_r_ddk5_sma_rate_leakage_grid_series.qs,' ± ',gsm_r_ddk5_sma_rate_leakage_grid_series.qs_std)\nprint('area: ',gsm_r_ddk5_sma_rate_leakage_grid_series.area,' km2')\n```\n\n    rate:  [-7.33355992]  ±  [0.]\n    area:  508317.01700056973  km2\n\nBecause it involves the uncertainties of estimated parameters in Tikhonov regularization, the standard deviation for the rate is temporarily set to 0. This will be improved in the next version of ggtools. Note that the 2x area ratio multiplication is just to use more tapers in windowed spherical harmonics.\n\n```python\ngsm_r_ddk5_sma_rate_leakage_grid_crop = gsm_r_ddk5_sma_rate_leakage_grid.set_region(region)\n\nfig_name1 = 'SMA_SpectralD_block.png'\nfig_name2 = 'SMA_SpectralD.png'\nylabel = 'SMA [mm w.e./yr]'\n\ngsm_r_ddk5_sma_rate_leakage_grid_crop.plot(fig_name1,ylabel,'block',study_area,nodes.nodes)\ngsm_r_ddk5_sma_rate_leakage_grid_crop.plot(fig_name2,ylabel,polygons=study_area,circles=nodes.nodes)\n```\n\n<p align=\"middle\">\n  <img src=\"readme_figures/output_179_1.png\" width=\"400\" />\n  <img src=\"readme_figures/output_179_2.png\" width=\"400\" />\n</p>\n\n### Method 6 : deconvolution\n\nIn Forward Modeling, the purpose of the signal leakage correction is to find a solution for the equation $\\mathcal F(X) = Y$, where $X$ is the true mass distribution to be determined, $Y$ is the apparent mass distribution, and $\\mathcal F$ represents the combination of spherical harmonic truncations and filter smoothing. One way to solve this equation is by iteration, which happens to be what the Forward Modeling does. Another possible approach is to find the expression of $\\mathcal F$. Fortunately, $\\mathcal F(X)$ can be expressed as a convolution, i.e., $\\mathcal F(X)\\equiv X\\otimes PSF$, where PSF is a convolution kernel, i.e., the point spread function. According to $X = \\mathcal F^{-1}(Y)$, we can deduce $X = Y \\otimes/\\otimes PSF$, where $\\otimes/\\otimes$ denotes the deconvolution operator. The unsupervised Wiener-Hunt algorithm can be employed to implement the deconvolution, and it has been one of the modules among the scikit-image package. \n\n## 'Equivalent' Gaussian filter radius for DDK filtering\n\nPlace a unit mass with an equivalent water thickness of 1000mm at the North Pole and expand it to a specific degree, and perform DDK filtering and Gaussian filtering, respectively. Change the Gaussian filtering radius to maximize the correlation coefficient of the filtered spectrum. At this time, the Gaussian filtering radius is the 'equivalent' radius corresponding to the DDK filtering. Note: This method is suitable for DDK4 ~ DDK8 filtering. For 'equivalent radius' of DDK1 ~ DDK3, please refer to [Kusche 2009](https://link.springer.com/article/10.1007/s00190-009-0308-3).\n\n```\nfrom ggtools.gg import ddk_gaussian\n\nfor i in range(1,9):\n    ddk_gaussian('DDK'+str(i),96)\n\nddk_gaussian('DDK5',96,'visible') \n```\n\n``` \nCorrelation: 0.9776\nApproximate equivalent Gaussian filter radius for DDK1: 345\nCorrelation: 0.9671\nApproximate equivalent Gaussian filter radius for DDK2: 255\nCorrelation: 0.9593\nApproximate equivalent Gaussian filter radius for DDK3: 200\nCorrelation: 0.9578\nApproximate equivalent Gaussian filter radius for DDK4: 190\nCorrelation: 0.9570\nApproximate equivalent Gaussian filter radius for DDK5: 160\nCorrelation: 0.9583\nApproximate equivalent Gaussian filter radius for DDK6: 150\nCorrelation: 0.9660\nApproximate equivalent Gaussian filter radius for DDK7: 125\nCorrelation: 0.9714\nApproximate equivalent Gaussian filter radius for DDK8: 110\nCorrelation: 0.9570\nApproximate equivalent Gaussian filter radius for DDK5: 160\n```\n\n<p class=\"half\">\n  <img src=\"readme_figures/output_180_1.png\" width=\"270\" />\n  <img src=\"readme_figures/output_180_2.png\" width=\"270\" />\n  <img src=\"readme_figures/output_180_3.png\" width=\"270\" />\n</p>\n\n(a) Unit mass after expanding and truncating up to 96th degree. (b) after DDK5 filtering (c) after Gaussian filtering with a radius of 160km\n\n<p align=\"middle\">\n<img src=\"readme_figures/output_190_1.png\" width=\"500\" />\n</p>    \n\n<center>Cross section for the unit mass</center>\nFor more details, please refer to `ddk_gaussian?`.\n\n## GRACE minus TWSC\n\n```\n# for signal leakage correction with inverse filtering\ngsm_twsc_series = gsm_r_ddk5_sma_leakage_series - twsc_grid_series\ngsm_twsc_series_rate = gsm_twsc_series.rate()\n\nfig_name = 'GRACE_TWSC_series.png'\nylabel = 'GRACE-TWSC [Gt]'\ngsm_twsc_series.plot(fig_name,ylabel,kernel='rbf')\n```\n<p align=\"middle\">\n<img src=\"readme_figures/output_200_1.png\" width=\"500\" />\n</p>\n\n## Change log\n\n- **1.1.7 — Apr 12,  2020**\n\n  - Fixed the issue that it fails to download GLDAS data under windows platform.\n\n- **1.1.6 — Mar 31,  2020**\n\n  - Fixed the issue that the boundary file(defines the study area) goes across the prime meridian. From now on, boundary files that pass through the prime meridian are supported.\n\n## Next release\n\n - Complete the help documentation\n\n - Improve the code structure to make it easier to read\n\n - Add the degree and order (d/o) one(Geocenter) correction\n\n - Add outliers elimination in Gaussian Process Regression(GPR)\n\n - Add a module to handle Glacial Isostatic Adjustment(GIA) effects\n\n - Add other destriping filters, such as P4M6\n\n - Add other map projections, such as AlbersEqualArea\n\n - Find a way to quickly calculate the uncertainty of the grid data\n\n - Estimate the uncertainty of parameters in Tikhonov regularization\n\n\n\n## Acknowledgments\n\nThank the ISDC for sharing the GRACE & GRACE-FO data, GES DISC for the GLDAS land surface model data, and the Cold and Arid Regions Environmental and Engineering Research Institute(CAREERI) for providing the Second Glacier Inventory Dataset of China(SGIDC). Many appreciations to the contributors of [SHTOOLS ](https://shtools.oca.eu/shtools/public/)and [GRACE-filter](https://github.com/strawpants/GRACE-filter).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lcx366/GGTOOLS",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ggtools",
    "package_url": "https://pypi.org/project/ggtools/",
    "platform": "",
    "project_url": "https://pypi.org/project/ggtools/",
    "project_urls": {
      "Homepage": "https://github.com/lcx366/GGTOOLS"
    },
    "release_url": "https://pypi.org/project/ggtools/1.1.7/",
    "requires_dist": [
      "scipy",
      "numpy",
      "matplotlib",
      "pyshtools (>=4.6.2)",
      "GPy",
      "xarray",
      "requests",
      "astropy",
      "sphericalpolygon",
      "datetime"
    ],
    "requires_python": "",
    "summary": "A package to handle the GRACE and GRACE-FO GSM data and GLDAS grid data",
    "version": "1.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7004880,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bb24575a11b25e4202abd91d2c115ebde8e8a3f8cac088520573310e5d5e26c",
          "md5": "5cecb05875b5baf5d2dce68bd57037a2",
          "sha256": "bde88d7a6001aa9cea552eba8eaa109c5820188e4ea3c94430ee138bb0cca834"
        },
        "downloads": -1,
        "filename": "ggtools-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5cecb05875b5baf5d2dce68bd57037a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 84761446,
        "upload_time": "2019-12-16T13:44:10",
        "upload_time_iso_8601": "2019-12-16T13:44:10.636910Z",
        "url": "https://files.pythonhosted.org/packages/2b/b2/4575a11b25e4202abd91d2c115ebde8e8a3f8cac088520573310e5d5e26c/ggtools-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d2a2314839da6119d7157ae0074c228301dbd6b7d6fd3f0a41e0f0df3bfa3db",
          "md5": "6e4d0968c326725d3a81291fd053744f",
          "sha256": "db5ede37664425281c876dd15f207243ac1562db09240e1d8bb5b6bb574caaa5"
        },
        "downloads": -1,
        "filename": "ggtools-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e4d0968c326725d3a81291fd053744f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 87990,
        "upload_time": "2019-12-23T08:37:50",
        "upload_time_iso_8601": "2019-12-23T08:37:50.293349Z",
        "url": "https://files.pythonhosted.org/packages/8d/2a/2314839da6119d7157ae0074c228301dbd6b7d6fd3f0a41e0f0df3bfa3db/ggtools-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c375e531cbe94f6074a49cf88ee20faf71653401ec061bfd004f1564ed36be35",
          "md5": "73acac5db0a4de369e724923ed792f13",
          "sha256": "87c8bbe1620b9b3274a6a5bd002ebe0b9b5c624ef8bef6066940fa7bfa762748"
        },
        "downloads": -1,
        "filename": "ggtools-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73acac5db0a4de369e724923ed792f13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 88070,
        "upload_time": "2019-12-27T09:34:01",
        "upload_time_iso_8601": "2019-12-27T09:34:01.530199Z",
        "url": "https://files.pythonhosted.org/packages/c3/75/e531cbe94f6074a49cf88ee20faf71653401ec061bfd004f1564ed36be35/ggtools-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce0ebd8e980ad91a6808acb86d3da76a4939e0648d9bbec5e6059cec9722a94e",
          "md5": "128afde0518d7db1c65090aeff5a5e53",
          "sha256": "4daa7a349a1f39c12c9884608f0986c121436de61c600b49a33ca708c00a2250"
        },
        "downloads": -1,
        "filename": "ggtools-1.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "128afde0518d7db1c65090aeff5a5e53",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 88016,
        "upload_time": "2020-01-10T15:42:50",
        "upload_time_iso_8601": "2020-01-10T15:42:50.616265Z",
        "url": "https://files.pythonhosted.org/packages/ce/0e/bd8e980ad91a6808acb86d3da76a4939e0648d9bbec5e6059cec9722a94e/ggtools-1.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "161a414de1e64dfa0ba01e3f8e67f1177893134b5d0b00eb0510b61b1c980275",
          "md5": "fc57af567f3c375dd1acf84549b75261",
          "sha256": "f76626fa6f3e20ad69db3ac93200ee4b4dec18de280c9fd8bf3f0ea06a1f72c2"
        },
        "downloads": -1,
        "filename": "ggtools-1.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc57af567f3c375dd1acf84549b75261",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 88084,
        "upload_time": "2020-01-12T02:16:02",
        "upload_time_iso_8601": "2020-01-12T02:16:02.308609Z",
        "url": "https://files.pythonhosted.org/packages/16/1a/414de1e64dfa0ba01e3f8e67f1177893134b5d0b00eb0510b61b1c980275/ggtools-1.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b90a0346ecdbb9ae06845d2062b3b84917bd1ae4ca8e317fd942139d6aee7a6",
          "md5": "3c3807cdb03a4cf4e10f05d5da64bf96",
          "sha256": "b8739fe3a039e792e07c41fce766539bbe7c2d23f9bb6ce2bede47daea792754"
        },
        "downloads": -1,
        "filename": "ggtools-1.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c3807cdb03a4cf4e10f05d5da64bf96",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 75257,
        "upload_time": "2020-04-01T12:38:15",
        "upload_time_iso_8601": "2020-04-01T12:38:15.142853Z",
        "url": "https://files.pythonhosted.org/packages/0b/90/a0346ecdbb9ae06845d2062b3b84917bd1ae4ca8e317fd942139d6aee7a6/ggtools-1.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fa74706e57d3210ea5305cbdefa14c37b7ef5b1cbf8a18370ef6fa3303b2e63",
          "md5": "f463735c4bf0f8d96737f34e4c1dc4d8",
          "sha256": "f71ab3f4bcb5e9bd23e94ca931d823f2800ba7981b722159a4a5faa419adeb4d"
        },
        "downloads": -1,
        "filename": "ggtools-1.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f463735c4bf0f8d96737f34e4c1dc4d8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 75327,
        "upload_time": "2020-04-12T14:50:08",
        "upload_time_iso_8601": "2020-04-12T14:50:08.910131Z",
        "url": "https://files.pythonhosted.org/packages/6f/a7/4706e57d3210ea5305cbdefa14c37b7ef5b1cbf8a18370ef6fa3303b2e63/ggtools-1.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6fa74706e57d3210ea5305cbdefa14c37b7ef5b1cbf8a18370ef6fa3303b2e63",
        "md5": "f463735c4bf0f8d96737f34e4c1dc4d8",
        "sha256": "f71ab3f4bcb5e9bd23e94ca931d823f2800ba7981b722159a4a5faa419adeb4d"
      },
      "downloads": -1,
      "filename": "ggtools-1.1.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f463735c4bf0f8d96737f34e4c1dc4d8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 75327,
      "upload_time": "2020-04-12T14:50:08",
      "upload_time_iso_8601": "2020-04-12T14:50:08.910131Z",
      "url": "https://files.pythonhosted.org/packages/6f/a7/4706e57d3210ea5305cbdefa14c37b7ef5b1cbf8a18370ef6fa3303b2e63/ggtools-1.1.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}