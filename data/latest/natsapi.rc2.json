{
  "info": {
    "author": "WeGroup NV",
    "author_email": "it@wegroup.be",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# NatsAPI\n\n## Table of Contents\n\n<!-- vim-markdown-toc GitLab -->\n\n* [Installation](#installation)\n* [Usage](#usage)\n    * [Docs](#docs)\n    * [Examples](#examples)\n        * [Basic](#basic)\n        * [Error handling with sentry](#error-handling-with-sentry)\n        * [Reload](#reload)\n    * [Generating documentation (asyncapi)](#generating-documentation-asyncapi)\n    * [Plugins](#plugins)\n* [History](#history)\n\n<!-- vim-markdown-toc -->\n\nNatsAPI is a framework to develop Python3 applications that uses [nats](https://nats.io) as communication medium instead of http. With nats you have a smaller footprint, faster req/s, pub/sub and better observability.\nIt is highly inspired by [FastAPI](https://github.com/tiangolo/fastapi) and has the same development style. NatsAPI produces an [AsyncAPI](https://www.asyncapi.com/) schema out of the box, **this schema is not fully compatible with the standard**.\n\n## Installation\n\n```\n$ pip install natsapi\n```\n\n## Usage\n\n### Docs\n\n> UNDER CONSTRUCTION\n\n### Examples\n\n#### Basic\n\n```python\nfrom natsapi import NatsAPI, SubjectRouter\nfrom pydantic import BaseModel\n\n\nclass Message(BaseModel):\n    message: str\n\n\nclass Person(BaseModel):\n    first_name: str\n    last_name: str\n\n\napp = NatsAPI(\"natsapi\")\nrouter = SubjectRouter()\n\n\n@router.request(\"persons.greet\", result=Message)\nasync def greet_person(app: NatsAPI, person: Person):\n    return {\"message\": f\"Greetings {person.first_name} {person.last_name}!\"}\n\n\napp.include_router(router)\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\nRun as follows:\n\n```bash\n$ python app.py\n```\n\nDocs will be rendered as:\n\n![Example of redoc](./doc/minimal.png)\n\nSend a request:\n\n```python\nfrom natsapi import NatsAPI\nimport asyncio\n\n\nasync def main():\n    app = await NatsAPI(\"client\").startup()\n\n    params = {\"person\": {\"first_name\": \"Foo\", \"last_name\": \"Bar\"}}\n    r = await app.nc.request(\"natsapi.persons.greet\", params=params, timeout=5)\n    print(r.result)\n\nasyncio.run(main())\n\n#> {'message': 'Greetings Foo Bar!'}\n```\n\nor on the command line\n\n```shell\n$ nats request natsapi.persons.greet '{\"params\": {\"person\": {\"first_name\": \"Foo\", \"last_name\": \"Bar\"}}}'                                                                                                    \n\n18:19:00 Sending request on \"natsapi.persons.greet\"\n18:19:00 Received on \"_INBOX.dpBgTyG9XC5NhagdqRHTcp.eMkVkru8\" rtt 1.052463ms\n{\"jsonrpc\": \"2.0\", \"id\": \"c2bc2d20-dbd5-4e39-a22d-c22a8631c5a3\", \"result\": {\"message\": \"Greetings Foo Bar!\"}, \"error\": null}\n```\n\n#### Error handling with sentry\n\n\n```python\nfrom natsapi import NatsAPI, SubjectRouter\nimport logging\nfrom pydantic import ValidationError\nfrom sentry_sdk import configure_scope\nfrom natsapi.models import JsonRPCRequest, JsonRPCError\nfrom pydantic import BaseModel\n\n\nclass StatusResult(BaseModel):\n    status: str\n\n\napp = NatsAPI(\"natsapi-example\")\n\nrouter = SubjectRouter()\n\n\n@router.request(\"healthz\", result=StatusResult)\nasync def handle_user(app: NatsAPI):\n    return {\"status\": \"OK\"}\n\n\napp.include_router(router)\n\n\ndef configure_sentry(auth):\n    with configure_scope() as scope:\n        scope.user = {\n            \"email\": auth.get(\"email\"),\n            \"id\": auth.get(\"uid\"),\n            \"ip_address\": auth.get(\"ip_address\"),\n        }\n\n\n@app.exception_handler(ValidationError)\nasync def handle_validation_exception(exc: ValidationError, request: JsonRPCRequest, subject: str) -> JsonRPCError:\n    auth = request.params.get(\"auth\") or {}\n    configure_sentry(auth)\n    logging.error(\n        exc,\n        exc_info=True,\n        stack_info=True,\n        extra={\"auth\": auth, \"json\": request.dict(), \"subject\": subject, \"NATS\": True, \"code\": -32003},\n    )\n\n    return JsonRPCError(code=-90001, message=\"VALIDATION_ERROR\", data={\"error_str\": str(exc)})\n\n\nif __name__ == \"__main__\":\n    app.run(reload=False)\n```\n\n#### Reload\n\nWhen running from a file you can add a reload flag (hot-reload on file change) or use the `NATSAPI_RELOAD` env var.\n\n```\nif __name__ == \"__main__\":\n    app.run(reload=True)\n```\n\n### Generating documentation (asyncapi)\n\nTo see the documentation, you can use the binary to run the server. Root path is `natsapi-example` so:\n\n```bash\n$ ./nats-redoc 4222 master.trinity-testing\n\nServer running\nDocs can be found on localhost:8090\nconnected to nats on port 4222\n```\n\nWhen surfing to [localhost:8090](http://127.0.0.1:8090), the documentation should look like this:\n\n![Example of redoc](./doc/readme-example-redoc.png)\n\n### Plugins\n\nPlugins can be added and are found in `natsapi/plugin.py`.\n\n- [natsapi_mock](./natsapi/plugin.py): A handy mock fixture to intercept nats requests and to fake nats responses for any subject.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wegroupwolves/natsapi",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "natsapi",
    "package_url": "https://pypi.org/project/natsapi/",
    "platform": null,
    "project_url": "https://pypi.org/project/natsapi/",
    "project_urls": {
      "Homepage": "https://github.com/wegroupwolves/natsapi",
      "Repository": "https://github.com/wegroupwolves/natsapi"
    },
    "release_url": "https://pypi.org/project/natsapi/0.0.3/",
    "requires_dist": [
      "pydantic (>=1.8.2,<2.0.0)",
      "nats-py[nkeys] (>=2.1.0,<3.0.0)",
      "watchgod (>=0.8.2,<0.9.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "A Python microservice framework that speaks nats.io with asyncapi spec generation capability",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15519698,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8dd308832f3cdc43659db2fdc79221c2d78d25838b172a178e21fdc221fed8c",
          "md5": "8d888619f0eb894edbb7ef558df008c4",
          "sha256": "e4de1edbae61e7dd1fccaf95bb10e9a3da5dd43e204769757ac9e901451d6699"
        },
        "downloads": -1,
        "filename": "natsapi-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d888619f0eb894edbb7ef558df008c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 25817,
        "upload_time": "2022-08-29T17:55:05",
        "upload_time_iso_8601": "2022-08-29T17:55:05.277225Z",
        "url": "https://files.pythonhosted.org/packages/c8/dd/308832f3cdc43659db2fdc79221c2d78d25838b172a178e21fdc221fed8c/natsapi-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3abc22502911935b4956325afbfbd87cded08a58da4f911649b86ed8b73ef10",
          "md5": "59e53c0e1bffc0b33f23dd8b1814c0a6",
          "sha256": "273abbfeb99d67135a00e1f163fca2548793bcfce4ec0c5b8f59067b49d1d800"
        },
        "downloads": -1,
        "filename": "natsapi-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "59e53c0e1bffc0b33f23dd8b1814c0a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 22619,
        "upload_time": "2022-08-29T17:55:07",
        "upload_time_iso_8601": "2022-08-29T17:55:07.341565Z",
        "url": "https://files.pythonhosted.org/packages/a3/ab/c22502911935b4956325afbfbd87cded08a58da4f911649b86ed8b73ef10/natsapi-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "463e037ed0988173a72281c9b967f9a2cf9d2527a0002060d4b799336ddd7d0f",
          "md5": "4144341d9d4f5b6fe3b74733fe7fa84f",
          "sha256": "de7d9d380455001add1485335658b3c10bc88c5e63da6855d6805c9a5459e673"
        },
        "downloads": -1,
        "filename": "natsapi-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4144341d9d4f5b6fe3b74733fe7fa84f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 25850,
        "upload_time": "2022-10-25T08:02:21",
        "upload_time_iso_8601": "2022-10-25T08:02:21.883446Z",
        "url": "https://files.pythonhosted.org/packages/46/3e/037ed0988173a72281c9b967f9a2cf9d2527a0002060d4b799336ddd7d0f/natsapi-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ca46cda3a4caff78a95bdf46dcbdd5f1911789c20f5836640f94fa97045b8f4",
          "md5": "b2b19b8faedf0d1ba272bb85ddebbf16",
          "sha256": "1bd33859fb56a541c6b9933823998eb752ce3cbe83ec9e752ce19d74d98824b8"
        },
        "downloads": -1,
        "filename": "natsapi-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b2b19b8faedf0d1ba272bb85ddebbf16",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 22753,
        "upload_time": "2022-10-25T08:02:23",
        "upload_time_iso_8601": "2022-10-25T08:02:23.512339Z",
        "url": "https://files.pythonhosted.org/packages/3c/a4/6cda3a4caff78a95bdf46dcbdd5f1911789c20f5836640f94fa97045b8f4/natsapi-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "463e037ed0988173a72281c9b967f9a2cf9d2527a0002060d4b799336ddd7d0f",
        "md5": "4144341d9d4f5b6fe3b74733fe7fa84f",
        "sha256": "de7d9d380455001add1485335658b3c10bc88c5e63da6855d6805c9a5459e673"
      },
      "downloads": -1,
      "filename": "natsapi-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4144341d9d4f5b6fe3b74733fe7fa84f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 25850,
      "upload_time": "2022-10-25T08:02:21",
      "upload_time_iso_8601": "2022-10-25T08:02:21.883446Z",
      "url": "https://files.pythonhosted.org/packages/46/3e/037ed0988173a72281c9b967f9a2cf9d2527a0002060d4b799336ddd7d0f/natsapi-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ca46cda3a4caff78a95bdf46dcbdd5f1911789c20f5836640f94fa97045b8f4",
        "md5": "b2b19b8faedf0d1ba272bb85ddebbf16",
        "sha256": "1bd33859fb56a541c6b9933823998eb752ce3cbe83ec9e752ce19d74d98824b8"
      },
      "downloads": -1,
      "filename": "natsapi-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b2b19b8faedf0d1ba272bb85ddebbf16",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 22753,
      "upload_time": "2022-10-25T08:02:23",
      "upload_time_iso_8601": "2022-10-25T08:02:23.512339Z",
      "url": "https://files.pythonhosted.org/packages/3c/a4/6cda3a4caff78a95bdf46dcbdd5f1911789c20f5836640f94fa97045b8f4/natsapi-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}