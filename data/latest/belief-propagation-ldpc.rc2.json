{
  "info": {
    "author": "Yair Mazal",
    "author_email": "yairmazal@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# Belief Propagation\n\nThis repo is aimed at providing an example implementation of belief propagation on Tanner graphs as used by a standard\nLDPC decoder.\n\nYou can also view my associated Medium [post](https://yair-mz.medium.com/decoding-ldpc-codes-with-belief-propagation-43c859f4276d).\n\nIf you see bug, wish suggest something or contribute please open an issue.\nAlternatively you can also contact me via [email](mailto:yairmazal@gmail.com?subject=[GitHub]%20Belief%20Propagation).\n\nFor more information on LDPC codes and belief propagation on Tanner graphs visit my GitHub pages site:\nhttps://yairmz.github.io/LDPC/.\n\n\n\n## Installation\n\n```shell\npip install belief-propagation-ldpc\n```\n\n---\n\n## API\n\n### Nodes\n\nOne can create nodes (either variable or check nodes) via:\n```python\nfrom belief_propagation import VNode, CNode, bsc_llr\nv = VNode(name=\"v0\", channel_model=bsc_llr(0.1))\nc = CNode(name=\"c0\")\n```\n\n### Graphs\n\nCreating a graph:\n```python\nfrom belief_propagation import TannerGraph, bsc_llr\nimport numpy as np\ntg = TannerGraph()\n# add 10 variable nodes\nfor i in range(10):\n    tg.add_v_node(name=\"v\"+str(i), channel_model=bsc_llr(0.1), ordering_key=i)\n# add 5 check nodes\nfor j in range(5):\n    tg.add_c_node(name=\"c\"+str(j), ordering_key=j)\nedges = {(\"v0\", \"c0\"), (\"v0\", \"c1\"), (\"v1\", \"c0\"), (\"v1\", \"c2\"), (\"v2\", \"c0\"), (\"v2\", \"c3\"), (\"v3\", \"c0\"), (\"v3\", \"c4\"),\n         (\"v4\", \"c1\"), (\"v4\", \"c2\"), (\"v5\", \"c1\"), (\"v5\", \"c3\"), (\"v6\", \"c1\"), (\"v6\", \"c4\"), (\"v7\", \"c2\"), (\"v7\", \"c3\"),\n         (\"v8\", \"c2\"), (\"v8\", \"c4\"), (\"v9\", \"c3\"), (\"v9\", \"c4\")}\ntg.add_edges_by_name(edges)\n\n# Alternatively given a biadjacency matrix (parity check matrix) a graph can be constructed from it\nH = np.array([[1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n              [1, 0, 0, 0, 1, 1, 1, 0, 0, 0],\n              [0, 1, 0, 0, 1, 0, 0, 1, 1, 0],\n              [0, 0, 1, 0, 0, 1, 0, 1, 0, 1],\n              [0, 0, 0, 1, 0, 0, 1, 0, 1, 1]])\ntg = TannerGraph.from_biadjacency_matrix(H, channel_model=bsc_llr(0.1))\n```\n\nA graph may also be converted into a [NetworkX](https://networkx.org/) \n[Graph](https://networkx.org/documentation/stable/reference/classes/graph.html#networkx.Graph)\nobject. It can then be easily plotted using \n[NetworkX Draw](https://networkx.org/documentation/stable/reference/drawing.html), or \n[PyVis](https://pyvis.readthedocs.io/en/latest/index.html).\n```python\nfrom belief_propagation import TannerGraph, bsc_llr\nimport numpy as np\nH = np.array([[1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n              [1, 0, 0, 0, 1, 1, 1, 0, 0, 0],\n              [0, 1, 0, 0, 1, 0, 0, 1, 1, 0],\n              [0, 0, 1, 0, 0, 1, 0, 1, 0, 1],\n              [0, 0, 0, 1, 0, 0, 1, 0, 1, 1]])\ntg = TannerGraph.from_biadjacency_matrix(H, channel_model=bsc_llr(0.1))\ng = tg.to_nx()\n\nimport networkx as nx\nimport matplotlib.pyplot as plt\nfig = plt.figure()\ntop = nx.bipartite.sets(g)[0]\nlabels = {node: d[\"label\"] for node,d in g.nodes(data=True)}\nnx.draw_networkx(g,\n                 with_labels=True,\n                 node_color=[d[\"color\"] for d in g.nodes.values()],\n                 pos=nx.bipartite_layout(g, top),\n                 labels=labels)\nfig.show()\n```\n![example_graph](./examples/example_graph.png)\n\n### Belief Propagation\n```python\nfrom belief_propagation import BeliefPropagation, TannerGraph, bsc_llr\nimport numpy as np\n# consider a parity check matrix\nH = np.array([[1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\n              [1, 0, 0, 0, 1, 1, 1, 0, 0, 0],\n              [0, 1, 0, 0, 1, 0, 0, 1, 1, 0],\n              [0, 0, 1, 0, 0, 1, 0, 1, 0, 1],\n              [0, 0, 0, 1, 0, 0, 1, 0, 1, 1]])\n\n# Use it to construct a Tanner graph. Assume a BSC channel model with probability p=0.1  ofr bit flip\nmodel = bsc_llr(0.1)\ntg = TannerGraph.from_biadjacency_matrix(H, channel_model=model)\n\n# let us assume the codeword [1,1,0,0,1,0,0,0,0,0] was sent, but due to a channel error the last bit got flipped\nc = np.array([1, 1, 0, 0, 1, 0, 0, 0, 0, 1])\n# consequently we get initially H.dot(c) % 2\n# array([0, 0, 0, 1, 1])\n\n# let us try to correct the error\nbp = BeliefPropagation(tg, H, max_iter=10)\nestimate, llr, decode_success = bp.decode(c)\n# You can see that the error is corrected\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/YairMZ/belief_propagation",
    "keywords": "LDPC,Belief Propagation,SPA,Tanner Graph",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "belief-propagation-ldpc",
    "package_url": "https://pypi.org/project/belief-propagation-ldpc/",
    "platform": "",
    "project_url": "https://pypi.org/project/belief-propagation-ldpc/",
    "project_urls": {
      "Homepage": "https://github.com/YairMZ/belief_propagation"
    },
    "release_url": "https://pypi.org/project/belief-propagation-ldpc/1.0.1/",
    "requires_dist": [
      "numpy",
      "networkx"
    ],
    "requires_python": "",
    "summary": "Belief propagation on Tanner graphs. Implements an LLR based LDPC decoder.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12078065,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1b1f92886b267a63e69abe6cf8820be8695c648a54320e0f1ca6e72c03432dd",
          "md5": "568baa2c08870dce74a285e5d94ff41b",
          "sha256": "a488cc2f5eae4822ec0e9b2abf0e50645377792f7c7c7faa681c3ef0e997fd0f"
        },
        "downloads": -1,
        "filename": "belief_propagation_ldpc-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "568baa2c08870dce74a285e5d94ff41b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7880,
        "upload_time": "2021-11-19T23:03:19",
        "upload_time_iso_8601": "2021-11-19T23:03:19.071664Z",
        "url": "https://files.pythonhosted.org/packages/e1/b1/f92886b267a63e69abe6cf8820be8695c648a54320e0f1ca6e72c03432dd/belief_propagation_ldpc-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a1f0d032b5cd20e48fd4cd7216340328b733c2e577d9c81c30d7679b003c404",
          "md5": "43568b48ce21c9f2ae66b4f816ce85f8",
          "sha256": "aefd7ae47508e061c27466c4dcb50b472208c380b702707bdb300d0391ee7ea5"
        },
        "downloads": -1,
        "filename": "belief-propagation-ldpc-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "43568b48ce21c9f2ae66b4f816ce85f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7004,
        "upload_time": "2021-11-19T23:03:21",
        "upload_time_iso_8601": "2021-11-19T23:03:21.607478Z",
        "url": "https://files.pythonhosted.org/packages/2a/1f/0d032b5cd20e48fd4cd7216340328b733c2e577d9c81c30d7679b003c404/belief-propagation-ldpc-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c1508f7476902da5a2744a7bfea04af228bb0ef6ba511e871a5291921adfc5f",
          "md5": "e20c696ecc0e19b7da203410b63fae54",
          "sha256": "01f09eef38d26a5ee9a24e5fed1f678d155b575c808e45aa18f360088489936d"
        },
        "downloads": -1,
        "filename": "belief_propagation_ldpc-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e20c696ecc0e19b7da203410b63fae54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8118,
        "upload_time": "2021-11-20T14:34:13",
        "upload_time_iso_8601": "2021-11-20T14:34:13.432891Z",
        "url": "https://files.pythonhosted.org/packages/4c/15/08f7476902da5a2744a7bfea04af228bb0ef6ba511e871a5291921adfc5f/belief_propagation_ldpc-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0eb517594c0d6735969b33ec754904d98390cee30ea0accf803e3d3358a2426e",
          "md5": "9643b1aed43a7701459dc338cbc6bed4",
          "sha256": "d2d3e4bed206fb1210996b272c9af2eb1c4b7027cc3912f7e1960daf87c65daa"
        },
        "downloads": -1,
        "filename": "belief-propagation-ldpc-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9643b1aed43a7701459dc338cbc6bed4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7238,
        "upload_time": "2021-11-20T14:34:14",
        "upload_time_iso_8601": "2021-11-20T14:34:14.921682Z",
        "url": "https://files.pythonhosted.org/packages/0e/b5/17594c0d6735969b33ec754904d98390cee30ea0accf803e3d3358a2426e/belief-propagation-ldpc-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4c1508f7476902da5a2744a7bfea04af228bb0ef6ba511e871a5291921adfc5f",
        "md5": "e20c696ecc0e19b7da203410b63fae54",
        "sha256": "01f09eef38d26a5ee9a24e5fed1f678d155b575c808e45aa18f360088489936d"
      },
      "downloads": -1,
      "filename": "belief_propagation_ldpc-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e20c696ecc0e19b7da203410b63fae54",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8118,
      "upload_time": "2021-11-20T14:34:13",
      "upload_time_iso_8601": "2021-11-20T14:34:13.432891Z",
      "url": "https://files.pythonhosted.org/packages/4c/15/08f7476902da5a2744a7bfea04af228bb0ef6ba511e871a5291921adfc5f/belief_propagation_ldpc-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0eb517594c0d6735969b33ec754904d98390cee30ea0accf803e3d3358a2426e",
        "md5": "9643b1aed43a7701459dc338cbc6bed4",
        "sha256": "d2d3e4bed206fb1210996b272c9af2eb1c4b7027cc3912f7e1960daf87c65daa"
      },
      "downloads": -1,
      "filename": "belief-propagation-ldpc-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9643b1aed43a7701459dc338cbc6bed4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7238,
      "upload_time": "2021-11-20T14:34:14",
      "upload_time_iso_8601": "2021-11-20T14:34:14.921682Z",
      "url": "https://files.pythonhosted.org/packages/0e/b5/17594c0d6735969b33ec754904d98390cee30ea0accf803e3d3358a2426e/belief-propagation-ldpc-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}