{
  "info": {
    "author": "Plisio",
    "author_email": "support@plisio.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Python SDK for Plisio API\n\nCurrent project is a **Python SDK for [Plisio API](https://plisio.net/documentation)**.\nTo use it, you should be registered on Plisio\nThe account can be created [here](https://plisio.net/account/signup \"Sign up\"))\nYou will receive a personal secret key, that is used for all calls to API.\n\n![Supported Versions](https://img.shields.io/badge/python-3.6%20%7C%203.7%20%7C%203.8%20%7C%203.9%20%7C%203.10-yellowgreen)\n\n\n##  Install\n\nTo download Plisio SDK, either fork this GitHub repo or simply use PyPI via pip:\n```sh\n$ pip install plisio\n```\n\n## Usage\n\n\n### Initialize the connection\n\nTo be able to send the requests, create an instance of class\n<code>PlisioClient</code>.\n\n```python\nimport plisio\n...\n\nclient = plisio.PlisioClient(api_key='your_secret_key')\n```\n\n### Balance\n\nPlisio supports 9 cryptocurrencies(https://plisio.net/documentation/appendices/supported-cryptocurrencies). \nTo view, for example the Ethereum (ETH) balance:\nSend the request by <code>client</code> and process the response\nwith the help of an appropriate model.\n\n```python\n# Sending request and getting processed response\nbalance = client.get_balance(plisio.CryptoCurrency.ETH)\n```\n\n### Currencies\n\nTo view current exchange rate for the supported cryptocurrencies to\n[the definite fiat currency](https://plisio.net/documentation/appendices/supported-fiat-currencies),\nsend a request to API by the method <code>get_currency</code>\nwith the selected fiat currency.\n\nExample: getting the rate of *Australian Dollar (AUD)*. \nIf no fiat currency is selected, the rate of\n*United States Dollar (USD)* is used by default. **The response** is a list of models\nthat consist rates of exchanges.\n\n```python\ncurrencies = client.get_currencies(plisio.FiatCurrency.AUD)\n```\n\n### Creating a new invoice\n\nThe request has to receive the following **required** parameters:\n+ <code>currency</code> - the name of cryptocurrency;\n+ <code>order_name</code> - merchant internal order name;\n+ <code>order_number</code> - merchant internal order number.\n\n**Additional** parameters:\n+ <code>amount</code> - any cryptocurrency float value. If a fiat currency is to be converted, \nskip this field and use the next two fields instead;\n+ <code>source_currency</code> - the name of the fiat currency;\n+ <code>source_amount</code> - any float value;\n+ <code>allowed_psys_cids</code> - comma-separated list of cryptocurrencies that are\n  allowed for a payment. Also, you will be able to select one of them. Example: *'BTC,ETH,TZEC'*;\n+ <code>description</code> - merchant invoice description;\n+ <code>callback_url</code> - merchant full URL to get invoice updates.\n  The *POST* request will be sent to this URL. If this parameter isn't set,\n  a callback will be sent to the URL that can be set under profile in API settings,\n  in the 'Status URL' field;\n+ <code>email</code> - an auto-fill invoice email.\n  You will be asked to enter an email to which a notification will be sent;\n+ <code>language</code> - en_US (supports English only);\n+ <code>plugin</code> - Plisio's internal field to determine integration plugin;\n+ <code>version</code> - Plisio's internal field to determine integration plugin version.\n+ <code>redirect_to_invoice</code> - Instead of JSON response user will be redirected to the Plisio's invoice page (is not working for a white-label shop).\n+ <code>expire_min</code> - Interval in minutes when invoice will be expired.\n\nThe response is a model that can fill differently depending on\nwhether you have [**While Label**](https://plisio.net/white-label) or not.\nIn the first case, only two fields are returned:\n<code>txn_id</code> is a Plisio's intertnal ID and\n<code>invoice_url</code> is an invoice URL. And in the second case,\n extra fields are added to them:\n+ <code>amount</code> - invoice amount in the selected cryptocurrency;\n+ <code>pending_amount</code> - the remaining amount to be paid in\n  the selected cryptocurrency;\n+ <code>wallet_hash</code> - invoice hash;\n+ <code>psys_cid</code> - cryptocurrencies ID;\n+ <code>currency</code> - cryptocurrencies code;\n+ <code>source_currency</code> - fiat currency;\n+ <code>source_rate</code> - exchange rate from the <code>psys_cid</code>\n  to the <code>source_currency</code> at the moment of transfer;\n+ <code>expected_confirmations</code> - the number of expected confirmations \n  to mark the invoice as completed;\n+ <code>qr_code</code> - QR code image in base64 format;\n+ <code>verify_hash</code> - hash to verify the *POST*\n  data signed with your *API_KEY*;\n+ <code>invoice_commission</code> - Plisio commission;\n+ <code>invoice_sum</code> - *shop pays commission*: invoice amount -\n  <code>invoice_commission</code>, *client pays commission*: invoice amount;\n+ <code>invoice_total_sum</code> - *shop pays commission*: invoice amount,\n  *client pays commission*: <code>invoice_commission</code> + <code>invoice_sum</code>.\n\nCreate a few *Python* examples, where use:\n+ required fields only;\n+ all the fields besides the <code>amount</code>;\n+ all the fields besides the <code>source_currency</code> and the <code>source_amount</code>.\n```python\n# Example: using required fields only\nfirst_invoice = plisio.create_invoice('currency', 'order_name', 'order_number')\n\n# Example: using cryptocurrency\nsecond_invoice = plisio.create_invoice(\n    'currency',\n    'order_name',\n    'order_number',\n    amount='amount',\n    allowed_psys_cids='allowed_psys_cids',\n    description='description',\n    callback_url='callback_url',\n    email='email',\n    language='language',\n    plugin='plugin',\n    version='version',\n)\n\n# Example: using fiat currency\nthird_invoice = plisio.create_invoice(\n    'currency',\n    'order_name',\n    'order_number',\n    source_currency='fiat currency',\n    source_rate='source_rate',\n    allowed_psys_cids='allowed_psys_cids',\n    description='description',\n    callback_url='callback_url',\n    email='email',\n    language='language',\n    plugin='plugin',\n    version='version',\n)\n```\n\n### Commission\n\nTo estimate the cryptocurrency fee and Plisio commission,\ncall method <code>get_commission</code>. It takes\none required parameter (<code>crypto_currency</code>, the name of the cryptocurrency) and five additional parameters:\n+ <code>addresses</code> - wallet address or comma separated addresses when estimating fee for mass withdrawal;\n+ <code>amounts</code> - amount or comma separated amount that will be send in case of mass withdraw;\n+ <code>type_</code> - operation type, such as:\n    + *cash_out*;\n    + *mass_cash_out*;\n+ <code>fee_plan</code> - the name of [fee plan](https://plisio.net/documentation/endpoints/fee-plans);\n+ <code>custom_fee_rate</code> - custom fee plan value.\n\nMethod returns the model <code>Commission</code>, which has fields:\n+ <code>commission</code> - Plisio commission value;\n+ <code>fee</code> - cryptocurrency fee value;\n+ <code>max_amount</code> - maximum allowed amount to withdrawal;\n+ <code>plan</code> - Plisio's cryptocurrency fee estimation plan, \nthe <code>PlanName</code> enum;\n+ <code>use_wallet</code> - pay fee from wallet;\n+ <code>use_wallet_balance</code> - balance of wallet that will be used to pay fee;\n+ <code>plans</code> - the model <code>FeePlan</code>;\n+ <code>custom</code> - the model <code>Custom</code>;\n+ <code>errors</code> - the number of errors;\n+ <code>custom_fee_rate</code> - custom fee plan value.\n\nExample: a request using *Ethereum (ETH)*:\n\n```python\ncommission = plisio.get_commission(\n    plisio.CryptoCurrency.ETH\n)\n```\n\n#### Custom\n\nThere are **5** fields:\n\n+ <code>min_</code> - minimal custom fee plan value;\n+ <code>max_</code> - maximum custom fee plan value;\n+ <code>default</code> - estimated fee parameter to confirm the transaction in \nthe \"conf_target\" blocks;\n+ <code>borders</code> - rate of the supported plan;\n+ <code>unit</code> - fee unit.\n\n### Withdrawal\n\nTo withdraw, call the <code>withdraw</code> method and\napply the following parameters:\n+ <code>crypto_currency</code> - a name of cryptocurrency;\n+ <code>to</code> - hash or multiple comma separated hashes pooled for the *mass_cash_out*;\n+ <code>amount</code> - any comma separated float values for the *mass_cash_out*\n  in the order that hashes are in <code>to</code> parameter;\n+ <code>fee_plan</code> - a name of the one of\n  [fee plans](https://plisio.net/documentation/endpoints/fee-plans);\n+ <code>fee_rate</code> (expected param, unavailable) - custom feeRate. conf_target (blocks) for BTC like\ncryptocurrencies or gasPrice in GWAI for ETH based cryptocurrencies;\n+ <code>type_</code> - operation type, likes in <code>get_commission</code> method\n  (it's an optional parameter).\n\nAfter that you are getting model <code>Withdraw</code> with fields:\n+ <code>type_</code> - operation type, given in the request;\n+ <code>status</code> - specifies whether the operation was completed or not (*completed*, *error*);\n+ <code>currency</code> - name of the cryptocurrency;\n+ <code>source_currency</code> - name of the fiat currency (only USD available);\n+ <code>source_rate</code> - exchange rate from the <code>currency</code> to\n  the <code>source_currency</code> at the moment of transfer;\n+ <code>fee</code> - transaction fee stated in the transfer;\n+ <code>wallet_hash</code> - destination hash (if <code>type_</code> is the *cash_out*);\n+ <code>sendmany</code> - dictionary of hashes and values (if <code>type</code> is the *mass_cash_out*);\n+ <code>params</code> - a model <code>WithdrawParams</code>;\n+ <code>created_at_utc</code> - timestamp in the UTC timezone; it may need to be divided by 1000;\n+ <code>amount</code> - transfer amount in cryptocurrency\n+ <code>tx_url</code> - link to the cryptocurrency block explorer;\n+ <code>tx_id</code> - link of transaction ids;\n+ <code>id</code> - internal Plisio operation ID.\n\n```python\nwithdraw = plisio.withdraw(\n    plisio.CryptoCurrency.ETH,\n    'hash1,hash2',\n    'amount1,amount2',\n    'normal',\n    0,\n)\n```\n\n### Fee estimation\n\nTo estimate fee, apply to <code>get_fee</code> the following parameters:\n+ <code>crypto_currency</code> - name of the cryptocurrency;\n+ <code>addresses</code> - wallet address or comma separated addresses\n  when estimating fee for a mass withdrawal;\n+ <code>amounts</code> - amount or comma separated amount\n  that will be sent in case of a mass withdraw;\n+ <code>fee_plan</code> - a name of the one of\n  [fee plans](https://plisio.net/documentation/endpoints/fee-plans)\n  (it is not required).\n\nThe response model has three fields:\n+ <code>fee</code> - transaction fee;\n+ <code>currency</code> - name of the cryptocurrency;\n+ <code>plan</code> - name of fee plan.\n\n```python\nfee = plisio.get_fee(\n    plisio.CryptoCurrency.ETH,\n    'wallet_address',\n    'amount',\n    'normal',\n)\n```\n\n### Fee plan\n\nReturns the model with [fee plans](https://plisio.net/documentation/endpoints/fee-plans)\nby selected <code>cryptocurrency</code>. Also this model has additional fields\naccording to the fee plan.\n\n```python\nfee = plisio.get_fee_plan(\n    plisio.CryptoCurrency.ETH\n)\n```\n\n### Operations\n\nTo view transactions, call:\n1) <code>get_operation</code> to view a specific transaction by <code>id</code>;\n2) <code>get_operations</code> to view all transactions.\n\nIn the first case, it returns a model <code>Operation</code> \nfor the required operation's id.\nIn the second case - model <code>Operations</code>,\nwhich consists of operations list, links for current, first and last pages\nand metadata about all your operations. The second case has several \noptional variables: \n+ <code>page</code> - page number;\n+ <code>limit</code> - number of elements on the page;\n+ <code>shop_id</code> - filter operation by shop;\n+ <code>type_</code> - transaction type;\n+ <code>status</code> - transaction status;\n+ <code>currency</code> - name of the cryptocurrency;\n+ <code>search</code> - text search by the transaction id (txid), \ninvoice's order number or customer email from invoice.\n\n#### Operation\n\nThe <code>Operation</code> model has the next fields:\n+ <code>user_id</code> - Profile ID;\n+ <code>shop_id</code> - Shop ID;\n+ <code>type_</code> - model <code>OperationType</code> \nconsisted **4** types: *cash_in*, *cash_out*, *mass_cash_out*, *invoice*;\n+ <code>status</code> - model <code>OperationStatus</code>, described with **6**\nstatuses: *pending*, *completed*, *error*, *new*, *expired*, *mismatch*, *cancelled*;\n+ <code>pending_sum</code> - unconfirmed amount (mempool);\n+ <code>currency</code> - name of the cryptocurrency;\n+ <code>source_currency</code> - fiat currency;\n+ <code>source_rate</code> - exchange rate from the \"cryptocurrency\";\nto the \"source_currency\" at the moment of transfer;\n+ <code>fee</code> - transaction fee stated in the transfer;\n+ <code>wallet_hash</code> - destination hash or invoice hash;\n+ <code>sendmany</code> - pairs of hashes and values;\n+ <code>params</code> - model <code>WithdrawParams</code>;\n+ <code>expire_at_utc</code> - timestamp in UTC timezone; it may need to be divided by 1000;\n+ <code>created_at_utc</code> - timestamp in the UTC timezone; it may need to be divided by 1000;\n+ <code>amount</code> - amount received/transferred by an operation;\n+ <code>sum_</code>:\n  + *invoice*: params.amount + Plisio commission (if the customer pays the commission) \n  or params.amount (if the merchant pays the commission);\n  + *cash-out*: transfer amount + network fee;\n  + *cash-in*: received amount.\n+ <code>commission</code> - Plisio commission;\n+ <code>tx_url</code> - link to the cryptocurrency block explorer;\n+ <code>tx_id</code> - list of transaction ids;\n+ <code>id_</code> - internal Plisio operation ID;\n+ <code>actual_sum</code> - real incoming amount;\n+ <code>actual_commission</code> - Plisio commission taken;\n+ <code>actual_fee</code> - network fee (move invoice to wallet);\n+ <code>actual_invoice_sum</code> - <code>actual_sum</code> - \n<code>actual_commission_sum</code> - <code>actual_fee</code>;\n+ <code>tx</code> - list of transactions details;\n+ <code>status_code</code> - code of status.\n\n#### WithdrawParams\n\nThere are **4** params:\n\n+ <code>source_currency</code> - name of the cryptocurrency;\n+ <code>source_rate</code> - exchange rate from the \"cryptocurrency\";\nto the \"source_currency\" at the moment of transfer;\n+ <code>usd_rate</code> - exchange rate from the \"cryptocurrency\";\nto the **USD** at the moment of transfer;\n+ <code>fee</code> - transaction fee stated in the transfer.\n\n\n## Async usage\n\nAll these methods have their async analogues in **PlisioAioClient**.  \nThey can be easily integrated into your async functions.\n\n```python\nimport plisio\n...\n\nclient = plisio.PlisioAioClient('your_secret_key')\n\ncurrencies = await client.get_currencies(plisio.FiatCurrency.AUD)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Plisio/plisio-python",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Plisio/plisio-python",
    "keywords": "plisio,crypto payment,sdk,bitcoin,etherium,crypto,blockchain",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "plisio",
    "package_url": "https://pypi.org/project/plisio/",
    "platform": null,
    "project_url": "https://pypi.org/project/plisio/",
    "project_urls": {
      "Download": "https://github.com/Plisio/plisio-python",
      "Homepage": "https://github.com/Plisio/plisio-python"
    },
    "release_url": "https://pypi.org/project/plisio/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Official Python SDK for Plisio API",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13411860,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1017019046ff5a0012b69578eccc1c2ed31fb4da43b6e073c9bd57f3f671150b",
          "md5": "516cb088b8589960a2ba37ac84116238",
          "sha256": "61522f23faf03b2ae893546da8a1ae81ce1df25037933c6cbe22fd8b3eaf94be"
        },
        "downloads": -1,
        "filename": "plisio-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "516cb088b8589960a2ba37ac84116238",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16866,
        "upload_time": "2022-03-22T18:20:57",
        "upload_time_iso_8601": "2022-03-22T18:20:57.270737Z",
        "url": "https://files.pythonhosted.org/packages/10/17/019046ff5a0012b69578eccc1c2ed31fb4da43b6e073c9bd57f3f671150b/plisio-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "517cfa2d1b301f41def7e0e9d9018592aed33230b9e8fcfb16c18bda5bc0c6c9",
          "md5": "a22141ce4e0bc68ae77e575efdeb368b",
          "sha256": "39742fa1bac96569eabefc1d3283b0ec87fd7a2a372c4ee8f34bc0ee40d661a5"
        },
        "downloads": -1,
        "filename": "plisio-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a22141ce4e0bc68ae77e575efdeb368b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20674,
        "upload_time": "2022-03-22T18:20:59",
        "upload_time_iso_8601": "2022-03-22T18:20:59.361656Z",
        "url": "https://files.pythonhosted.org/packages/51/7c/fa2d1b301f41def7e0e9d9018592aed33230b9e8fcfb16c18bda5bc0c6c9/plisio-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96db6eb74de07d411465f4ecf169d0f83ced91486d9900936dab746fb99d90c9",
          "md5": "ca280d2009ec372845754437a13f284b",
          "sha256": "1792071dd07c8cc443e6b0dc11550a83f57bfd7e04fb7179d704ad60f709159b"
        },
        "downloads": -1,
        "filename": "plisio-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca280d2009ec372845754437a13f284b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16805,
        "upload_time": "2022-03-23T13:11:52",
        "upload_time_iso_8601": "2022-03-23T13:11:52.283028Z",
        "url": "https://files.pythonhosted.org/packages/96/db/6eb74de07d411465f4ecf169d0f83ced91486d9900936dab746fb99d90c9/plisio-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "205e9d0397030b6a1aa13dcdd30127d8644fb0cdca3f8c0daeccefb050a15092",
          "md5": "1957a255795b3a53c55a76afeb40e4d1",
          "sha256": "d8ef646a56e44c170252f2c35fb286aa3ac8b0ba4916bea3f6c5fd7186642cab"
        },
        "downloads": -1,
        "filename": "plisio-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1957a255795b3a53c55a76afeb40e4d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20061,
        "upload_time": "2022-03-23T13:11:55",
        "upload_time_iso_8601": "2022-03-23T13:11:55.362747Z",
        "url": "https://files.pythonhosted.org/packages/20/5e/9d0397030b6a1aa13dcdd30127d8644fb0cdca3f8c0daeccefb050a15092/plisio-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c91708248fad82025c973861bb13f251c0217fe4f7bd72467e8070b7090e734",
          "md5": "d2e503d30e95d376f62a67a78f961e02",
          "sha256": "3867941664f5173aeec2eedb24671d4656b9076e2064b2e9bab6af713526e4f5"
        },
        "downloads": -1,
        "filename": "plisio-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d2e503d30e95d376f62a67a78f961e02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20257,
        "upload_time": "2022-04-05T08:50:10",
        "upload_time_iso_8601": "2022-04-05T08:50:10.857261Z",
        "url": "https://files.pythonhosted.org/packages/9c/91/708248fad82025c973861bb13f251c0217fe4f7bd72467e8070b7090e734/plisio-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9c91708248fad82025c973861bb13f251c0217fe4f7bd72467e8070b7090e734",
        "md5": "d2e503d30e95d376f62a67a78f961e02",
        "sha256": "3867941664f5173aeec2eedb24671d4656b9076e2064b2e9bab6af713526e4f5"
      },
      "downloads": -1,
      "filename": "plisio-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d2e503d30e95d376f62a67a78f961e02",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20257,
      "upload_time": "2022-04-05T08:50:10",
      "upload_time_iso_8601": "2022-04-05T08:50:10.857261Z",
      "url": "https://files.pythonhosted.org/packages/9c/91/708248fad82025c973861bb13f251c0217fe4f7bd72467e8070b7090e734/plisio-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}