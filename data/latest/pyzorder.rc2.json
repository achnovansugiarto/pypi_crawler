{
  "info": {
    "author": "Shinji Matsumoto",
    "author_email": "s.kawagt@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# pyzorder\n\nPython implementation of z-order curve (a.k.a. Morton order)\n\nz-order curve maps multidimensional data to one dimension.\n\nUsing z-order curve, you can implement multidimensional sort key for DynamoDB, which allows only 1 sort key at once.\npyzorder helps to implement ranging indexing with z-order curved data.\n\n([日本語ドキュメント](#pyzorder-日本語ドキュメント)は、英語版の後ろにあります)\n\n## What is \"z-order curve\"? \n\n\"z-order curve\" maps multidimensional data to one dimension while preserving locality of the data points.\nThe z value is calculated by interleaving input values.\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Z-curve.svg/400px-Z-curve.svg.png)\n(cited from [Z\\-order curve \\- Wikipedia](https://en.wikipedia.org/wiki/Z-order_curve))\n\nTypical usage is for DynamoDB, which allows only 1 sort key at once.\nFor example, if you want to indexing the data with both x-axis and y-axis,\nyou can map x and y with z-order curve, and put the z-ordered data in the DynamoDB table as Sort Key.\nHowever, you have to care about \"unnecessary region.\"\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/BIGMIN_search_in_a_Z-order_curve.svg/493px-BIGMIN_search_in_a_Z-order_curve.svg.png)  \n(cited again from [Z\\-order curve \\- Wikipedia](https://en.wikipedia.org/wiki/Z-order_curve))\n\nIf you want to access (x = 2, ..., 3, y = 2, ..., 6), the corresponding region is dotted lines square.\nWhen accessing z-order curve sequentially, the next value of \"15\" should be \"36\".\nThe region \"16\" to \"35\" is \"unnecessary region.\"\nSo, you need to treat with such \"unnecessary region\" efficiently.\n\n**`pyzorder` implements `next_zorder_index` which returns next valid z-order value**\nYou can easily implement regional indexing access with z-order curved data.\n\n`next_zorder_index` is re-implementaion of Tropf, H.; Herzog, H. (1981), [\"Multidimensional Range Search in Dynamically Balanced Trees\"](http://www.vision-tools.com/h-tropf/multidimensionalrangequery.pdf) in Python.\n`next_zorder_index` is shown as `BIGMIN` in the paper.\n\n## Usage\n\n### install\n```shell script\npip install pyzorder\n```\n\n### code sample\n```python\nfrom pyzorder import ZOrderIndexer\n\nzi = ZOrderIndexer((2, 3), (2, 6))\n\nz_2_2 = zi.zindex(2, 2)\n# z_2_2 = 12\n\nzi.next_zorder_index(z_2_2)\n# return 13\n\nzi.next_zorder_index(15)\n# return 36\n```\n\n## Reference\n\n- [trevorprater/pymorton: A lightweight and efficient Python Morton encoder with support for geo\\-hashing](https://github.com/trevorprater/pymorton)\n- Tropf, H.; Herzog, H. (1981), [\"Multidimensional Range Search in Dynamically Balanced Trees\"](http://www.vision-tools.com/h-tropf/multidimensionalrangequery.pdf)\n- [Z\\-order curve \\- Wikipedia](https://en.wikipedia.org/wiki/Z-order_curve)\n- [Z\\-Order Indexing for Multifaceted Queries in Amazon DynamoDB: Part 1 \\| AWS Database Blog](https://aws.amazon.com/jp/blogs/database/z-order-indexing-for-multifaceted-queries-in-amazon-dynamodb-part-1/)\n- [Z\\-order indexing for multifaceted queries in Amazon DynamoDB: Part 2 \\| AWS Database Blog](https://aws.amazon.com/jp/blogs/database/z-order-indexing-for-multifaceted-queries-in-amazon-dynamodb-part-2/)\n\n# pyzorder-日本語ドキュメント\n\nz-order curve (a.k.a. Morton order) の Python 実装\n\nz-order curve は多次元データを 1 次元に集約します。\n\npyzorder を使うことで、DynamoDB のようなソートキーを 1 つだけ持てる DB について、多次元の領域インデックスを可能にします。\n\n## \"z-order curve\" とは?\n\nz-order curve は、多次元のデータを1次元で表すための手法です。\nこのとき、x1 < x2 なら zorder2(x1, y) < zorder2(x2, y) という関係が常に保たれるような変換になっています。\n他の次元についても同様です。\n\nz-order curve では、各ビットをインターリーブすることで、そのようなマッピングを実現しています。\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Z-curve.svg/400px-Z-curve.svg.png)  \n(cited from [Z\\-order curve \\- Wikipedia](https://en.wikipedia.org/wiki/Z-order_curve))\n\n利用用途として、DynamoDB のようにソート用インデックスを 1 つだけ持てるようなデータベースに対して、\n複数のカラムでのインデックスを実現したい場合に使えます。\n例えば、x 座標, y 座標の両方でインデックスをしたい場合などです。\nz-order curve でインターリーブした値を格納しておき、その値をソートキーにすれば、2次元データに対するインデックスが可能になります。\nただし、このとき 1 つ注意すべき点があります。\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/BIGMIN_search_in_a_Z-order_curve.svg/493px-BIGMIN_search_in_a_Z-order_curve.svg.png)  \n(cited again from [Z\\-order curve \\- Wikipedia](https://en.wikipedia.org/wiki/Z-order_curve))\n\n(x = 2, ..., 3, y = 2, ..., 6) の範囲をアクセスしたい場合、この図では点線で囲まれた領域が該当します。\nこのとき、z-order の値を順番にたどると z-order \"15\" の次に範囲内となる z-order は \"36\" となっています。\nつまり、このような 2 次元領域へアクセスする場合は、単純に z-order の値をたどるのではなく、このような \"飛び地\" を効率よく処理する必要があります。\n\n**`pyzorder` は、\"15\" の次の有効な z-order である \"36\" を求める `next_zorder_index` を実装しています。**\nこれにより、z-order curve で表現されたデータから、任意の2次元領域へのアクセスを実現できます。\n\nなお、`next_zorder_index` を求めるアルゴリズムは Tropf, H.; Herzog, H. (1981), [\"Multidimensional Range Search in Dynamically Balanced Trees\"](http://www.vision-tools.com/h-tropf/multidimensionalrangequery.pdf)\nで提案されたものを Python で実装することで実現しています。（論文中の `BIGMIN` という関数が該当します）\n\n## 使い方\n\n### インストール\n```shell script\npip install pyzorder\n```\n\n### コードサンプル\n```python\nfrom pyzorder import ZOrderIndexer\n\nzi = ZOrderIndexer((2, 3), (2, 6))\n\nz_2_2 = zi.zindex(2, 2)\n# z_2_2 = 12\n\nzi.next_zorder_index(z_2_2)\n# return 13\n\nzi.next_zorder_index(15)\n# return 36\n```\n\n## 参考\n\n- [trevorprater/pymorton: A lightweight and efficient Python Morton encoder with support for geo\\-hashing](https://github.com/trevorprater/pymorton)\n- Tropf, H.; Herzog, H. (1981), [\"Multidimensional Range Search in Dynamically Balanced Trees\"](http://www.vision-tools.com/h-tropf/multidimensionalrangequery.pdf)\n- [Z\\-order curve \\- Wikipedia](https://en.wikipedia.org/wiki/Z-order_curve)\n- [Z\\-Order Indexing for Multifaceted Queries in Amazon DynamoDB: Part 1 \\| AWS Database Blog](https://aws.amazon.com/jp/blogs/database/z-order-indexing-for-multifaceted-queries-in-amazon-dynamodb-part-1/)\n- [Z\\-order indexing for multifaceted queries in Amazon DynamoDB: Part 2 \\| AWS Database Blog](https://aws.amazon.com/jp/blogs/database/z-order-indexing-for-multifaceted-queries-in-amazon-dynamodb-part-2/)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/smatsumoto78/pyzorder",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyzorder",
    "package_url": "https://pypi.org/project/pyzorder/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyzorder/",
    "project_urls": {
      "Homepage": "https://github.com/smatsumoto78/pyzorder"
    },
    "release_url": "https://pypi.org/project/pyzorder/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "z-order curve (a.k.a. Morton order) implementation in Python",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13530921,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a3ccecb4e4c412ee3240e8f67e0dbada90aaf73a127a9ecab1c731d4bbd1896",
          "md5": "04e0afe9399d66b4c6b0472d85965ac7",
          "sha256": "fcd3b9cdd7bb04d755c44995e10a86e41ea6527f1833d83671c35db677ad0e15"
        },
        "downloads": -1,
        "filename": "pyzorder-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "04e0afe9399d66b4c6b0472d85965ac7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6126,
        "upload_time": "2019-08-03T08:15:35",
        "upload_time_iso_8601": "2019-08-03T08:15:35.632582Z",
        "url": "https://files.pythonhosted.org/packages/7a/3c/cecb4e4c412ee3240e8f67e0dbada90aaf73a127a9ecab1c731d4bbd1896/pyzorder-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cd0f99375fb3d2c0614f6152b8fcd81f5ec29f84ecd8ba65fba70f7f005cf29",
          "md5": "7b3377f02b55d0bd5e7fc6a4c515dca8",
          "sha256": "29ef907f5345b843f99629cf69483dd94bf039d2ba0fe3606867a913af7e8ccc"
        },
        "downloads": -1,
        "filename": "pyzorder-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7b3377f02b55d0bd5e7fc6a4c515dca8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6686,
        "upload_time": "2022-04-16T08:17:45",
        "upload_time_iso_8601": "2022-04-16T08:17:45.699765Z",
        "url": "https://files.pythonhosted.org/packages/1c/d0/f99375fb3d2c0614f6152b8fcd81f5ec29f84ecd8ba65fba70f7f005cf29/pyzorder-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1cd0f99375fb3d2c0614f6152b8fcd81f5ec29f84ecd8ba65fba70f7f005cf29",
        "md5": "7b3377f02b55d0bd5e7fc6a4c515dca8",
        "sha256": "29ef907f5345b843f99629cf69483dd94bf039d2ba0fe3606867a913af7e8ccc"
      },
      "downloads": -1,
      "filename": "pyzorder-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7b3377f02b55d0bd5e7fc6a4c515dca8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6686,
      "upload_time": "2022-04-16T08:17:45",
      "upload_time_iso_8601": "2022-04-16T08:17:45.699765Z",
      "url": "https://files.pythonhosted.org/packages/1c/d0/f99375fb3d2c0614f6152b8fcd81f5ec29f84ecd8ba65fba70f7f005cf29/pyzorder-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}