{
  "info": {
    "author": "William Foster",
    "author_email": null,
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "=====================\nBurin Logging Utility\n=====================\n\nBurin (/ˈbyʊər ɪn, ˈbɜr-/byoor-in, bur-/) is a logging library that is meant to\nadd features and simplify usage compared to the Python standard library\n``logging`` package.  It can be used as a direct replacement in most cases.\n\nFull Burin documentation is available at `Read the Docs\n<http://burin.readthedocs.io/>`_.\n\nCurrently Python 3.6, 3.7, 3.8, 3.9, and 3.10 are all supported.  There are no\ndependencies or additional requirements for Burin and it should work on any\nplatform that Python does.\n\nAn important aspect of Burin is an easy migration that allows changing from the\n``logging`` package to Burin without anything breaking in most use cases.\nWhile class names may need to be changed this generally should work well.\nAlthough some situations may require other small changes due to the added\nfeatures of Burin.\n\nUsing Burin to replace ``logging`` use in a program can be done gradually or\nall at once.  Burin should not intefere with ``logging`` usage as its\ninternal references are all managed independently.  However; it's best to\nensure that they are not trying to log to the same file as this may cause\nissues.\n\n.. note::\n\n    While some classes in Burin inherit from classes in the Python standard\n    ``logging`` package they cannot be used interchangeably.\n\n    Using classes from ``logging`` in Burin or vice-versa may cause\n    exceptions or other issues.\n\n.. note::\n\n    Burin is still in early development and may change in backwards\n    incompatible ways between minor release versions.  This should be rare as\n    general compatibility with ``logging`` is desired to ease switching, but\n    it is a good idea check the release notes when upgrading between minor\n    (0.X.0) releases.\n\n==========================\nWhat's Different in Burin?\n==========================\n\nThe following make up the current major differences compared to the Python\nstandard ``logging`` module.\n\n* Extra arguments and changes to ``basic_config`` allow it to be used in\n  more situations and when setting up common logging configurations.\n* Built-in support for deferred formatting of ``str.format`` and\n  ``string.Template`` style logging messages.\n* Library level logging calls (eg. ``burin.log``) can specify a logger to\n  use other than the root logger, so calling ``get_logger`` isn't necessary\n  first.\n* Logging features from newer versions of Python (eg.\n  ``logging.Formatter`` *defaults* in 3.10) are implemented in Burin and\n  available in all supported Python versions.\n* Everything that should be needed is available at the top level of the\n  library; no more extra imports of ``logging.handlers`` and\n  ``logging.config``.\n* Multiple log record factory classes are supported at the same time, and which\n  is used can be set per logger instance to allow for greater customisation.\n* ``BurinLoggerAdapter`` instances will merge *extra* values from logging\n  calls with the preset values from instantiation; nesting built-in adapters is\n  actually useful.\n* ``BurinSocketHandler`` and ``BurinDatagramHandler`` by default use\n  pickling protocol version **4** instead of **1**.  This can be set to a\n  different protocol version when creating the handler.\n* All methods and functions are *underscore_separated*, but *camelCase* aliases\n  are available for an easier transition from the standard library.\n* Deprecated methods such as ``fatal`` and ``warn`` are not implemented.\n\nThere are several minor differences which are internal to Burin and not\ndocumented here.  Just be sure to read the documentation if you are going to\ncreate subclasses, or read the docstrings in the code if accessing internal\nclasses and methods .\n\n====================\nWhat Can't Burin Do?\n====================\n\nBurin is still in early development and does not yet support some use cases\nthat are supported by Python ``logging``.  These features are planned to\nbe implemented before Burin reaches its first stable major (1.0.0) release.\n\n* Advanced configuration functions like those from ``logging.config``\n  (``dictConfig``, ``fileConfig``, and ``listen``) are not yet implemented.\n* Custom log levels are not yet supported.\n\n===========\nUsing Burin\n===========\n\nBelow are a few examples of using the features of Burin.  Read through the rest\nof the documentation to see the full information on the functionality of Burin.\n\n.. note::\n\n    All Burin functions and methods are *underscore_separated*, however to ease\n    changing from the standard library they all also have *camelCase* aliases.\n\n    Throughout this documentation the *underscore_separated* names are used,\n    but everytime you see a function or method call in Burin just remember that\n    the *camelCase* name (like what is in ``logging``) will also work.\n\nBurin can be imported and used similar to the ``logging`` standard libary\npackage.\n\n.. code-block:: python\n\n    import burin\n    burin.basic_config()\n    logger = burin.get_logger()\n    logger.info(\"I am a log message.\")\n\nWhat is above would do the exact same thing with both Burin and ``logging``.\n\n-----------------------\nA Not So \"Basic\" Config\n-----------------------\n\nHowever compared to the standard ``logging`` package; using Burin can be\nmuch simpler for certain things, or even allow some functionality that would\notherwise require custom wrapper utilities or overridding logging subclasses.\n\nFor example a common logging setup may be to output info level logs to a\nrotating file with a specific format, and also output warning level logs to\n``sys.stderr`` in a different format.\n\nWith Burin setting this up can be accomplished with 2 imports and 1 call to\n``basic_config``.\n\n.. code-block:: python\n\n    import sys\n    import burin\n    burin.basic_config(filename=\"prog.log\", filelevel=\"INFO\", filerotate=True,\n                       fileformat=\"{asctime} - {levelname} :{name}: {message}\",\n                       filerotatesize=1048576, filerotatecount=9, level=\"INFO\",\n                       stream=sys.stderr, streamlevel=\"WARNING\",\n                       streamformat=\"{levelname}: {message}\", style=\"{\")\n\nWhereas with ``logging`` this takes 3 imports and 12 lines.\n\n.. code-block:: python\n\n    import sys\n    import logging\n    from logging.handlers import RotatingFileHandler\n    fileForm = logging.Formatter(\"{asctime} - {levelname} :{name}: {message}\",\n                                 style=\"{\")\n    fileHand = RotatingFileHandler(\"prog.log\", maxBytes=1048576, backupCount=9)\n    fileHand.setFormatter(fileForm)\n    fileHand.setLevel(\"INFO\")\n    streamForm = logging.Formatter(\"{levelname}: {message}\", style=\"{\")\n    streamHand = logging.StreamHandler(sys.stderr)\n    streamHand.setFormatter(streamForm)\n    streamHand.setLevel(\"WARNING\")\n    rootLogger = logging.getLogger()\n    rootLogger.addHandler(fileHand)\n    rootLogger.addHandler(streamHand)\n    rootLogger.setLevel(\"INFO\")\n\n--------------------------\nDeferred Formatting Styles\n--------------------------\n\nBurin also supports deferred formatting with log messages using\n``str.format`` and ``string.Template`` style strings, as well as the\n'%' style formatting that the standard library does.  Which formatting is used\nis set by the ``msgStyle`` property on a logger which can also be specified\nwhen calling ``get_logger``.\n\n.. code-block:: python\n\n    formatLogger = burin.get_logger(\"formatLogger\", \"{\")\n    formatLogger.debug(\"This is a {} event in {}\", \"DEBUG\", \"Burin\")\n    templateLogger = burin.get_logger(\"templateLogger\", msgStyle=\"$\")\n    templateLogger.debug(\"This is a ${lvl} event in ${prog}\", lvl=\"DEBUG\",\n                         prog=\"Burin\")\n\nSetting this on the root logger will set the default style for new loggers as\nwell.\n\n.. code-block:: python\n\n    rootLogger = burin.get_logger(msgStyle=\"{\")\n    newLogger = burin.get_logger(\"new\")\n    newLogger.debug(\"This is a {lvl} event in {prog}\", lvl=\"DEBUG\",\n                    prog=\"Burin\")\n\nDeferred formatting means that all of the extra formatting is only done if a\nmessage will be logged, so this can be more efficient than doing the formatting\non the string beforehand.\n\nFor a bit more information about the deferred logging see\n``BurinLogger.log``.\n\n------------------------\nCustomisable Log Records\n------------------------\n\nSetting the ``msgStyle`` of a logger actually sets the log record factory that\nis used.  While the default built-in factories are focused on formatting, you\ncan actually add any other custom factories that may be useful in your program.\nThese factories can then just be used where needed instead of for all log\nmessages as in the standard library.\n\nThis can be incredibly useful when you need a log to display values in a\nspecific way, but only want that extra processing to run if the log\nmessage will actually be output.\n\nTo add your own factory simply create a subclass of ``BurinLogRecord`` and\nthen set it to a *msgStyle* with ``set_log_record_factory``.\n\n.. code-block:: python\n\n    class HexRecord(burin.BurinLogRecord):\n        \"\"\"\n        Converts all int values to hex strings for log output.\n        \"\"\"\n\n        def get_message(self):\n            msg = str(self.msg)\n            if self.args or self.kwargs:\n                hexArgs = []\n                hexKwargs = {}\n\n                for eachArg in self.args:\n                    if isinstance(eachArg, int):\n                        eachArg = hex(eachArg)\n                    hexArgs.append(eachArg)\n\n                for eachKey, eachValue in self.kwargs.items():\n                    if isinstance(eachValue, int):\n                        eachValue = hex(eachValue)\n                    hexKwargs[eachKey] = eachValue\n\n                msg = msg.format(*hexArgs, **hexKwargs)\n            return msg\n\n    burin.set_log_record_factory(HexRecord, \"hex\")\n\nIn this example you would now be able to use ``hex`` as a *msgStyle* for any\nloggers where you want int *args* and *kwargs* converted to a hexadecimal\nstring when the log message is output.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": "logging",
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "burin",
    "package_url": "https://pypi.org/project/burin/",
    "platform": null,
    "project_url": "https://pypi.org/project/burin/",
    "project_urls": {
      "Documentation": "https://burin.readthedocs.io/",
      "Source": "https://github.com/PeacefullyDisturbed/burin"
    },
    "release_url": "https://pypi.org/project/burin/0.1.0/",
    "requires_dist": [
      "flake8 ~=4.0.1 ; extra == \"dev\"",
      "flit ~=3.7.1 ; extra == \"dev\"",
      "Sphinx ~=5.0.0 ; extra == \"doc\"",
      "spinx-rtd-theme ~=1.0 ; extra == \"doc\""
    ],
    "requires_python": ">=3.6",
    "summary": "Logging with added features and convenience.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14020095,
  "releases": {
    "0.1.0": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "9dcd993d12588652aa7f5daac4dba4cd705dda0343429221884f693a139d74f3",
          "md5": "2281812ffee2acbb2ce44f5d1148173c",
          "sha256": "22339fa06b62978cf87baeb64a434f4acc25cab5041ea5898c5feac320a12b70"
        },
        "downloads": -1,
        "filename": "burin-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2281812ffee2acbb2ce44f5d1148173c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 76260,
        "upload_time": "2022-06-03T04:06:19",
        "upload_time_iso_8601": "2022-06-03T04:06:19.818698Z",
        "url": "https://files.pythonhosted.org/packages/9d/cd/993d12588652aa7f5daac4dba4cd705dda0343429221884f693a139d74f3/burin-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "faef7996ddc6d96319da9e8a8f4b429c0d8658b8336f08d16092f39be296b2c5",
          "md5": "b513945ce89fc95459e8c1691400459c",
          "sha256": "8e525fd399a4fe81d86b68de5a6a745febb29064040957212c6ed068fb4b097e"
        },
        "downloads": -1,
        "filename": "burin-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b513945ce89fc95459e8c1691400459c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 72211,
        "upload_time": "2022-06-03T04:06:22",
        "upload_time_iso_8601": "2022-06-03T04:06:22.536410Z",
        "url": "https://files.pythonhosted.org/packages/fa/ef/7996ddc6d96319da9e8a8f4b429c0d8658b8336f08d16092f39be296b2c5/burin-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "9dcd993d12588652aa7f5daac4dba4cd705dda0343429221884f693a139d74f3",
        "md5": "2281812ffee2acbb2ce44f5d1148173c",
        "sha256": "22339fa06b62978cf87baeb64a434f4acc25cab5041ea5898c5feac320a12b70"
      },
      "downloads": -1,
      "filename": "burin-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2281812ffee2acbb2ce44f5d1148173c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 76260,
      "upload_time": "2022-06-03T04:06:19",
      "upload_time_iso_8601": "2022-06-03T04:06:19.818698Z",
      "url": "https://files.pythonhosted.org/packages/9d/cd/993d12588652aa7f5daac4dba4cd705dda0343429221884f693a139d74f3/burin-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "faef7996ddc6d96319da9e8a8f4b429c0d8658b8336f08d16092f39be296b2c5",
        "md5": "b513945ce89fc95459e8c1691400459c",
        "sha256": "8e525fd399a4fe81d86b68de5a6a745febb29064040957212c6ed068fb4b097e"
      },
      "downloads": -1,
      "filename": "burin-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b513945ce89fc95459e8c1691400459c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 72211,
      "upload_time": "2022-06-03T04:06:22",
      "upload_time_iso_8601": "2022-06-03T04:06:22.536410Z",
      "url": "https://files.pythonhosted.org/packages/fa/ef/7996ddc6d96319da9e8a8f4b429c0d8658b8336f08d16092f39be296b2c5/burin-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}