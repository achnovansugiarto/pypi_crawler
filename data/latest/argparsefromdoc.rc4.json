{
  "info": {
    "author": "Ruben Sanchez-Garcia",
    "author_email": "ruben.sanchez-garcia@stats.ox.ac.uk",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# argParseFromDoc\n\nA simple python package for creating/updating [argparse](https://docs.python.org/3/library/argparse.html)\nArgumentParser(s) given a type hinted and documented function.\n\n## Content\n\n- [Installation](#Installation)\n- [Quick overview](#Quick overview)\n- [Supported features](#Supported-features)\n- [Assumptions](#Assumptions)\n- [Usage](#Usage)\n\n### Installation\n\n- Option 1. Cloning this repository:\n```\ngit clone https://github.com/rsanchezgarc/argParseFromDoc.git\ncd argParseFromDoc\npip install .\n```\n- Option 2. Installing with pip\n```\npip install argParseFromDoc\n```\nOr if you want the latest update\n```\npip install git+https://github.com/rsanchezgarc/argParseFromDoc\n```\n\n### Quick overview\n\nargParseFromDoc allows you to create argument parsers directly from the type hints and the docstring of a function.\nThe most common use case of creating a parser for a main function and calling it can be implemented in 2 lines if you\nhave previously documented your function\n\n```\ndef add(a: int, b: int):\n    '''\n    @param a: first number. \n    @param b: second number.\n    '''\n    return a + b\n    \nif __name__ == \"__main__\":\n    from argParseFromDoc import parse_function_and_call\n    out = parse_function_and_call(add)\n    print(out)\n```\n\nargParseFromDoc also support more advanced features via the class `AutoArgumentParser` and the function `get_parser_from_function`.\nSee below for more details\n\n### Supported features\nThe following features are currently supported\n- Function argument types:\n  - `int`, `str`, `float` and `bool`\n  - (Homogeneous) Lists of any of the previous types (defined as`typing.List[primitive_type]`)\n  - Files (defined as`typing.TextIO` and `typing.BinaryIO`)\n- Ignoring/selecting a subset of the arguments of the function\n  - Use `myarg:typing.Optional[VALID_TYPE]=None` to set it as not required parameter or `args_optional=[\"myarg\"]` \n- Creating a new parser or adding new arguments to it. You can also use parser groups\n- Several docsctring formats (see [docstring_parser](https://github.com/rr-/docstring_parser) )\n- Support for methods assuming first argument in definition is `self`\n\n### Assumptions\n  - Positional arguments. Functions can have positional arguments, but the parser will consider all them as \n    if they were keyword/optional (always `--argname VALUE`)\n  - If no default value is provided for an argument in the function signature, argument will be considered as\n    required (`parser.add_argument(..., required=True)`). The same applies to `default=None` except if the\n    name of the argument is included in `args_optional` or it is declared as `typing.Optional`. \n    <br>E.g `get_parser_from_function(..., args_optional=[name1, name2...])`  \n  - Boolean arguments:\n    - Boolean arguments must be provided with default value.\n    - If a boolean argument defaults to False (`name:bool=False`), the parser sets\n    the argument `name=True` if `--name` flag provided.\n    - If a boolean argument defaults to True (`name:bool=True`), the parser sets\n    the argument `name=False` if `--NOT_name` flag provided. Please notice that the name of\n    the argument in the argument parser has been changed from `name` to `--NOT_name` to reflect that\n    but the argument is stored using the original name, so no further changes in the code are required\n  - Multiple arguments can be provided if using `typing.List`. For example:\n        `def fun(several_strings: List[str]):`\n  - Setting deafult values for `typing.TextIO` and `typing.BinaryIO` is not advisable, as they should be opened files. \n    If you are only employing the function for the argument parser, you could default it to\n    string values pointing files, but again, this is not encouraged. Instead, if you want to set a default filename,\n    use type `str`. The main purpose of `typing.TextIO` and `typing.BinaryIO` in the parser is to allow pipes. For example:\n    ```\n    #These two commands are equivalent\n    python count_lines --inputFile /etc/passwd \n    cat /etc/passwd | python count_lines --inputFile -\n \n    ```\n  - Methods, including `__init__`, are supported providing `self` is always used as the first \n    argument in the definition\n  - When defining functions, `*arg` and `**kwargs` are ignored for the parser. No other `*` or `**` argument\n    is supported.\n\n### Usage\n\nYou only need to document the type and possible default values for the arguments of your functions\nwith [typing](https://docs.python.org/3/library/typing.html) and add the description of each within the docstring.\nExamples of documented functions are:\n\n```\ndef add(a: int, b: int):\n    '''\n    @param a: first number. Mandatory\n    @param b: second number. Mandatory\n    '''\n    return a + b\n    \ndef printYourAge(age: int, name: str = \"Unknown\"):\n    '''\n    @param age: your age\n    @param name: your name. This is optional\n    '''\n    return str(a) + \" \"+ b\n    \ndef addList(several_nums: List[int], b: int=1):\n    '''\n    @param several_nums: first number\n    @param b: second number\n    '''\n    return [a + b for a in several_nums]\n\n```\n\nThen, obtaining an ArgumentParser for any of these functions (say `add`) is as easy as:\n\n```\nif __name__ == \"__main__\":\n    from argParseFromDoc import get_parser_from_function\n    parser = get_parser_from_function(add)\n    args = parser.parse_args()\n    print(add(**vars(args)))\n```\nOr you can directly use the AutoArgumentParser class\n\n```\nif __name__ == \"__main__\":\n    from argParseFromDoc import AutoArgumentParser\n    parser = AutoArgumentParser()\n    parser.add_args_from_function(add)\n```\n\nFinally, for convenience, you can create the parser, parse the argument and call the function\nin one line using\n\n``` \nif __name__ == \"__main__\":\n    from argParseFromDoc import parse_function_and_call\n    out = parse_function_and_call(add)\n\n```\nIf you want to add to a previously instantiated parser the arguements of the function,\nyou just need to provide the original parser (or group) to the `get_parser_from_function` function.\n\n```\nif __name__ == \"__main__\":\n    from argParseFromDoc import get_parser_from_function\n    #standard ArgumentParser\n    from argparse import ArgumentParser\n    parser = ArgumentParser(prog=\"Add_example\")\n    parser.add_argument(\"--other_type_of_argument\", type=str, default=\"Not provided\")\n    #####################################################\n    # ### If you prefer a group instead of a whole parser\n    # group = parser.add_argument_group()\n    # get_parser_from_function(add, parser=group)\n    #####################################################\n    #provide the original parser to get_parser_from_function that will add the new options to the parser\n    get_parser_from_function(add, parser=parser)\n    args = parser.parse_args()\n    print(add(**vars(args)))\n```\nFinally, if your function has some arguments that you do not want to include\nto the parser, you can use the `args_to_ignore` option. If you want to use only a subset,\nuse the `args_to_include` option. \n\n```\ndef manyArgsFun(a: int, b: int, c: int = 1, d: int = 2, e: str = \"oneStr\"):\n    '''\n\n    :param a: a\n    :param b: b\n    :param c: c\n    :param d: d\n    :param e: e\n    :return:\n    '''\n    print(e)\n    return sum([a, b, c, d])\n\n\nif __name__ == \"__main__\":\n    from argParseFromDoc import get_parser_from_function\n    # parser = get_parser_from_function(manyArgsFun, args_to_ignore=[\"c\", \"d\", \"e\"])\n    parser = get_parser_from_function(manyArgsFun, args_to_include=[\"a\", \"b\"])\n    args = parser.parse_args()\n    print(manyArgsFun(**vars(args)))\n\n```\n\nYou can use argParseFromDoc with subparsers easily. For instance:\n\n```\nif __name__ == \"__main__\":\n    from argParseFromDoc import AutoArgumentParser, get_parser_from_function\n    parser = AutoArgumentParser(\"programName\")\n\n    subparsers = parser.add_subparsers(help='command: this is to select a command', required=True, dest='command')\n    \n    parser1 = subparsers.add_parser('command1_name', help='')\n    get_parser_from_function(function1, parser=parser1)\n\n    parser2 = subparsers.add_parser('command2_name', help='')\n    get_parser_from_function(function2, parser=parser2)\n\n    arguments = parser.parse_args()\n    if arguments.command == \"command1_name\":\n        del arguments.command\n        function1(**vars(arguments))\n    elif arguments.command == \"command2_name\":\n        del arguments.command\n        function2(**vars(arguments))\n    else:\n        raise ValueError(f\"Command not valid {arguments.command}\")\n```\n\nSome additional examples can be found in [examples folder](examples) or in [test_argParseFromDoc.py](tests/test_argParseFromDoc.py)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rsanchezgarc/argParseFromDoc",
    "keywords": "argument parser ArgParser docstring argparse",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "argParseFromDoc",
    "package_url": "https://pypi.org/project/argParseFromDoc/",
    "platform": null,
    "project_url": "https://pypi.org/project/argParseFromDoc/",
    "project_urls": {
      "Homepage": "https://github.com/rsanchezgarc/argParseFromDoc"
    },
    "release_url": "https://pypi.org/project/argParseFromDoc/0.1.0/",
    "requires_dist": [
      "docstring-parser (==0.12)"
    ],
    "requires_python": "",
    "summary": "Simple argument parser for documented functions",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15897347,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2244ea84e522a73affc6fcfd13e55dc93ad784ab67a2b508783c6b0d2a8ac394",
          "md5": "0b9b9252fe5ee769c5a90957dae812a9",
          "sha256": "39a40a604139a230799e29dd011d12b0b2b0d15484637f3a62753a0db5f6fbc0"
        },
        "downloads": -1,
        "filename": "argParseFromDoc-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b9b9252fe5ee769c5a90957dae812a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15945,
        "upload_time": "2022-03-16T14:26:52",
        "upload_time_iso_8601": "2022-03-16T14:26:52.947700Z",
        "url": "https://files.pythonhosted.org/packages/22/44/ea84e522a73affc6fcfd13e55dc93ad784ab67a2b508783c6b0d2a8ac394/argParseFromDoc-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81016bf4bd68350d2dc9e2365f1c535019c074f0bbf808da0a337d2cdedef8af",
          "md5": "71e0e791b02d706dc6221361db7ae473",
          "sha256": "42cd440f120a67e8c9ecbacc41ac7a3a243f4f3b32c6ef54a573ff8a1b2e23c6"
        },
        "downloads": -1,
        "filename": "argParseFromDoc-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "71e0e791b02d706dc6221361db7ae473",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12194,
        "upload_time": "2022-03-16T14:26:54",
        "upload_time_iso_8601": "2022-03-16T14:26:54.238603Z",
        "url": "https://files.pythonhosted.org/packages/81/01/6bf4bd68350d2dc9e2365f1c535019c074f0bbf808da0a337d2cdedef8af/argParseFromDoc-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5b7530c53d6946a7e9a8efaa2e77641027e791338461d5ca4b793115b919075",
          "md5": "1b01b1f4bb4d7c86663bce832a315e2d",
          "sha256": "681df9b454938dd09cd6feedad7ec543f2f71398415cccedab5327ef6a3a7c5b"
        },
        "downloads": -1,
        "filename": "argParseFromDoc-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b01b1f4bb4d7c86663bce832a315e2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17900,
        "upload_time": "2022-07-11T13:12:40",
        "upload_time_iso_8601": "2022-07-11T13:12:40.765629Z",
        "url": "https://files.pythonhosted.org/packages/e5/b7/530c53d6946a7e9a8efaa2e77641027e791338461d5ca4b793115b919075/argParseFromDoc-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17f583e0d72ff9de7d0a60e38a5172928705e089f7775cae3dc37d7bfc792b3b",
          "md5": "ee188b4ed445f5605aaf42911a7a4b5d",
          "sha256": "d25f5d16321b7be9ad94f81b99813ee7658411b78e135de8009401bd3233d3ca"
        },
        "downloads": -1,
        "filename": "argParseFromDoc-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ee188b4ed445f5605aaf42911a7a4b5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13579,
        "upload_time": "2022-07-11T13:12:42",
        "upload_time_iso_8601": "2022-07-11T13:12:42.216663Z",
        "url": "https://files.pythonhosted.org/packages/17/f5/83e0d72ff9de7d0a60e38a5172928705e089f7775cae3dc37d7bfc792b3b/argParseFromDoc-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5980426957b13f774850b9443be041e2d4d81145b315773d0fd94a96654f13b9",
          "md5": "e9fc7de53c7601dff04f59472850f89a",
          "sha256": "10ccb99a116fb6861321f9c3df73ece4eba6d017b571f60952a1b2fecdce0bcd"
        },
        "downloads": -1,
        "filename": "argParseFromDoc-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9fc7de53c7601dff04f59472850f89a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18918,
        "upload_time": "2022-09-07T18:19:21",
        "upload_time_iso_8601": "2022-09-07T18:19:21.223219Z",
        "url": "https://files.pythonhosted.org/packages/59/80/426957b13f774850b9443be041e2d4d81145b315773d0fd94a96654f13b9/argParseFromDoc-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7759ef7656822835595732a98cd7ce61205d8f77332bb9cd4335ab77b8316f6",
          "md5": "5c4326529c777aa6461b06c6471e09ce",
          "sha256": "5a59514485e0e28f8b0a48180003f3b0afc261a4048dd4d211e8ec951df6fafe"
        },
        "downloads": -1,
        "filename": "argParseFromDoc-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5c4326529c777aa6461b06c6471e09ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14280,
        "upload_time": "2022-09-07T18:19:22",
        "upload_time_iso_8601": "2022-09-07T18:19:22.471543Z",
        "url": "https://files.pythonhosted.org/packages/c7/75/9ef7656822835595732a98cd7ce61205d8f77332bb9cd4335ab77b8316f6/argParseFromDoc-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e82566db8e23501a07eb951cdfafe62006f533f719c66d1f8933d9866696cd55",
          "md5": "d1a5ae7de63e8deb9dffe4f17ac41ec1",
          "sha256": "43e080df54f0b35674eeee89428bcfc17143f5a54ddf4bfd54af2cc6977da714"
        },
        "downloads": -1,
        "filename": "argParseFromDoc-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1a5ae7de63e8deb9dffe4f17ac41ec1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20157,
        "upload_time": "2022-11-26T12:51:57",
        "upload_time_iso_8601": "2022-11-26T12:51:57.139734Z",
        "url": "https://files.pythonhosted.org/packages/e8/25/66db8e23501a07eb951cdfafe62006f533f719c66d1f8933d9866696cd55/argParseFromDoc-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a098a0d4f41b9e4acbc946f673e3c36b8a1d5b994e3ffb17a6c082ffd939b421",
          "md5": "9ba6f4d3c58733f9d952f9672f41570e",
          "sha256": "efd689891e7e52843d7a2366e995f65d4ac7f6679818d163e98ef493726677c1"
        },
        "downloads": -1,
        "filename": "argParseFromDoc-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9ba6f4d3c58733f9d952f9672f41570e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17685,
        "upload_time": "2022-11-26T12:51:58",
        "upload_time_iso_8601": "2022-11-26T12:51:58.503646Z",
        "url": "https://files.pythonhosted.org/packages/a0/98/a0d4f41b9e4acbc946f673e3c36b8a1d5b994e3ffb17a6c082ffd939b421/argParseFromDoc-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e82566db8e23501a07eb951cdfafe62006f533f719c66d1f8933d9866696cd55",
        "md5": "d1a5ae7de63e8deb9dffe4f17ac41ec1",
        "sha256": "43e080df54f0b35674eeee89428bcfc17143f5a54ddf4bfd54af2cc6977da714"
      },
      "downloads": -1,
      "filename": "argParseFromDoc-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d1a5ae7de63e8deb9dffe4f17ac41ec1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20157,
      "upload_time": "2022-11-26T12:51:57",
      "upload_time_iso_8601": "2022-11-26T12:51:57.139734Z",
      "url": "https://files.pythonhosted.org/packages/e8/25/66db8e23501a07eb951cdfafe62006f533f719c66d1f8933d9866696cd55/argParseFromDoc-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a098a0d4f41b9e4acbc946f673e3c36b8a1d5b994e3ffb17a6c082ffd939b421",
        "md5": "9ba6f4d3c58733f9d952f9672f41570e",
        "sha256": "efd689891e7e52843d7a2366e995f65d4ac7f6679818d163e98ef493726677c1"
      },
      "downloads": -1,
      "filename": "argParseFromDoc-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9ba6f4d3c58733f9d952f9672f41570e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17685,
      "upload_time": "2022-11-26T12:51:58",
      "upload_time_iso_8601": "2022-11-26T12:51:58.503646Z",
      "url": "https://files.pythonhosted.org/packages/a0/98/a0d4f41b9e4acbc946f673e3c36b8a1d5b994e3ffb17a6c082ffd939b421/argParseFromDoc-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}