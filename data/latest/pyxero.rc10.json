{
  "info": {
    "author": "Russell Keith-Magee",
    "author_email": "russell@keith-magee.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Office/Business :: Financial :: Accounting"
    ],
    "description": "PyXero\n======\n\n[![Python Versions](https://img.shields.io/pypi/pyversions/pyxero.svg)](https://pypi.python.org/pypi/pyxero) [![PyPI Version](https://img.shields.io/pypi/v/pyxero.svg)](https://pypi.python.org/pypi/pyxero) [![Maturity](https://img.shields.io/pypi/status/pyxero.svg)](https://pypi.python.org/pypi/pyxero) [![BSD License](https://img.shields.io/pypi/l/pyxero.svg)](https://github.com/freakboy3742/pyxero/blob/master/LICENSE) [![Build Status](https://github.com/freakboy3742/pyxero/workflows/Build%20status/badge.svg)](https://github.com/freakboy3742/pyxero/actions)\n\nPyXero is a Python API for accessing the REST API provided by the [Xero](https://developer.xero.com)\naccounting tool. It allows access to both Public, Private and Partner applications.\n\n## Quickstart:\n\nInstall this library using the python package manager:\n\n```\npip install pyxero\n```\n\nYou'll need to follow the [Xero Developer documentation](https://developer.xero.com/documentation/) to register your application. Do that as follows:\n\n### Public Applications\n\nPublic applications use a 3-step OAuth process.\n\nWhen you [register your public application with Xero](https://developer.xero.com/documentation/auth-and-limits/public-applications/), you'll be given a\n**Consumer Key** and a **Consumer secret**. These are both strings.\n\nTo access the Xero API you must first create some credentials:\n\n```python\n>>> from xero.auth import PublicCredentials\n>>> credentials = PublicCredentials(<consumer_key>, <consumer_secret>)\n>>> print credentials.url\n'http://my.xero.com/.....'\n```\n\nYou now direct the user to visit the URL described by `credentials.url`. They\nwill be asked to log into their Xero account, and then shown a request to\nauthenticate your request to access the user's account. When the allow access,\nthey will be directed to a page that gives them a 6-digit verification number.\nPut this verifier number into a string, and call `verify()` on the credentials\nobject::\n\n```python\n>>> credentials.verify(<verifier string>)\n```\n\nThis will verify your credentials, and retrieve an access token. You can\nthen use your credentials to instantiate an instance of the Xero API::\n\n```python\n>>> from xero import Xero\n>>> xero = Xero(credentials)\n```\n\n### Public Applications with verification by callback\n\nPublic applications can also be validated using a callback URI. If this\napproach is used, the user won't be given a verification number. Instead,\nwhen they authorize the OAuth request, their browser will be redirected to\na pre-configured callback URI, which will deliver the validation token\ndirectly to your application.\n\nTo use a callback, you must provide a domain as part of your Xero application\nregistration; then, you provide a URL under that domain as the third argument\nwhen creating the credentials::\n\n```python\n>>> credentials = PublicCredentials(<consumer_key>, <consumer_secret>, <callback_uri>)\n>>> print credentials.url\n'http://my.xero.com/.....'\n```\n\nWhen the user authorizes access to their Xero account, the `callback_url`\nwill be called with three GET arguments:\n\n* `oauth_token`: The oauth_token that this request belongs to\n* `oauth_verifier`: The verifier string\n* `org`: An identifier for the organization that is allowing access.\n\nThe verifier can then be used to verify the credentials, as with the manual\nprocess.\n\n### Reconstructing Public credentials\n\nPublic Applications use a 3-step OAuth process, and if you're doing this in a\nweb application, you will usually lose the credentials object over the\nverification step. This means you need to be able to restore the credentials\nobject when verification has been provided.\n\nThe `state` attribute of a credentials object contains all the details needed\nto reconstruct an instance of the credentials::\n\n```python\n>>> saved_state = credentials.state\n>>> print saved_state\n{'consumer_key': '...', 'consumer_secret': '...', ...}\n\n>>> new_credentials = PublicCredentials(**saved_state)\n```\n\n### Private Applications\n\n*Private Applications are deprecated by Xero*. An alternative is to use the machine-to-machine method. This is fundamentally an OAuth2 flow, but Xero provides a helper executable to get tokens from a local machine without needing a server to host a callback. See [Xero Machine to Machine authentication](https://developer.xero.com/documentation/api-guides/machine-2-machine)\n\nIf using a Private application, you will need to install `PyCrypto`, a pure\nPython cryptographic module. You'll also need to generate an signed RSA\ncertificate, and submit that certificate as part of registering your\napplication with Xero. See the [Xero Developer documentation](https://developer.xero.com/) for more\ndetails.\n\nWhen you [register your private application with Xero](https://developer.xero.com/documentation/auth-and-limits/private-applications/), you'll be given a\n**Consumer Key**. You'll also be given a **Consumer secret** - this can be\nignored.\n\nUsing the Private credentials is much simpler than the Public credentials,\nbecause there's no verification step -- verification is managed using RSA\nsigned API requests::\n\n```python\n>>> from xero import Xero\n>>> from xero.auth import PrivateCredentials\n>>> with open(<path to rsa key file>) as keyfile:\n...     rsa_key = keyfile.read()\n>>> credentials = PrivateCredentials(<consumer_key>, rsa_key)\n>>> xero = Xero(credentials)\n```\n\n[Follow these steps](https://developer.xero.com/documentation/api-guides/create-publicprivate-key/) to generate a public/private key pair to sign your requests.  You'll upload your public key when you create your Xero Private app at https://app.xero.com.  You'll use the private key (aka RSA key) to generate your oAuth signature.\n\nThe RSA key is a multi-line string that will look something like::\n\n    -----BEGIN RSA PRIVATE KEY-----\n    MIICXgIBAAKBgQDWJbmxJjQLGM76sZkk2EhsdpV0Gxtrhzh/wiNBGffa5JHV/Ex4\n    ....\n    mtXGQjKqsOpuCw7HwgnRQUWKYbaJ3a+yTCFjVwa9keQhDQ==\n    -----END RSA PRIVATE KEY-----\n\nYou can get this string by either reading the contents of your private key\nfile into a variable, or storing the key value as a constant. If you choose to\nstore the key value as a constant, remember two things:\n\n* **DO NOT UNDER ANY CIRCUMSTANCES** check this file into a public\n  repository. It is your identity, and anyone with access to this file\n  could masquerade as you.\n\n* Make sure there is no leading space before\n  the ``-----BEGIN PRIVATE KEY-----`` portion of the string.\n\n\n### Partner Applications\n\nPartner Application authentication works similarly to the 3-step OAuth used by\nPublic Applications, but with RSA signed requests. Partner OAuth tokens still\nhave a 30 minute expiry, but can be swapped for a new token at any time.\n\nWhen you [register your partner application with Xero](https://developer.xero.com/documentation/auth-and-limits/partner-applications/), you'll have a **Consumer Key**, **Consumer Secret** and **RSA Key**. All three elements are required.\n\n\n```python\n>>> from xero import Xero\n>>> from xero.auth import PartnerCredentials\n>>> credentials = PartnerCredentials(<consumer_key>, <consumer_secret>,\n...                                  <rsa_key>)\n>>> xero = Xero(credentials)\n```\n\nWhen using the API over an extended period, you will need to exchange tokens\nwhen they expire.\n\n```python\n>>> if credentials.expired():\n...     credentials.refresh()\n```\n\n**Important**: ``credentials.state`` changes after a token swap. Be sure to persist\nthe new state.\n\n### Using OAuth2 Credentials\n\nOAuth2 Credentials work similarly to the 3-step OAuth used by\nPartner Applications. OAuth2 tokens have a 30 minute expiry,\nbut can be swapped for a new token at any time. Xero documentation on the OAuth2\nprocess can be found [here](https://developer.xero.com/documentation/oauth2/).\nThe procedure for creating and authenticating credentials is as follows *(with a\nDjango example at the end)*:\n\n 1) [Register your app](https://developer.xero.com/myapps) with Xero, using a\n    redirect URI which will be served by your app in order to complete the\n    authorisation e.g. `https://mysite.com/oauth/xero/callback/`. See step 3 for\n    an example of what your app should do. Generate a Client Secret, then store\n    it and the Client Id somewhere that your app can access them, such as a\n    config file.\n\n 2) Construct an `OAuth2Credentials` instance using the details from the first\n    step.\n    ```python\n    >>> from xero.auth import OAuth2Credentials\n    >>>\n    >>> credentials = OAuth2Credentials(client_id, client_secret,\n    >>>                                 callback_uri=callback_uri)\n    ```\n    If neccessary pass in a list of scopes to define the scopes required by your\n    app. E.g. if write access is required to transactions and payroll employees:\n\n    ```python\n    >>> from xero.constants import XeroScopes\n    >>>\n    >>> my_scope = [XeroScopes.ACCOUNTING_TRANSACTIONS,\n    >>>             XeroScopes.PAYROLL_EMPLOYEES]\n    >>> credentials = OAuth2Credentials(client_id, client_secret, scope=my_scope\n    >>>                                 callback_uri=callback_uri)\n    ```\n    The default scopes are `['offline_access', 'accounting.transactions.read',\n    'accounting.contacts.read']`. `offline_access` is required in order for\n    tokens to be refreshable. For more details on scopes see Xero's\n    [documentation]( https://developer.xero.com/documentation/oauth2/scopes).\n\n 3) Generate a Xero authorisation url which the user can visit to complete\n    authorisation. Then store the state of the credentials object and redirect\n    the user to the url in their browser.\n    ```python\n    >>> authorisation_url = credentials.generate_url()\n    >>>\n    >>> # Now store credentials.state somewhere accessible, e.g a cache\n    >>> mycache['xero_creds'] = credentials.state\n    >>>\n    >>> # then redirect the user to authorisation_url\n    ...\n    ```\n    The callback URI should be the redirect URI you used in step 1.\n\n 4) After authorization the user will be redirected from Xero to the\n    callback URI provided in step 1, along with a querystring containing the\n    authentication secret. When your app processes this request, it should pass\n    the full URI including querystring to `verify()`:\n    ```python\n    >>> # Recreate the credentials object\n    >>> credentials = OAuth2Credentials(**mycache['xero_creds'])\n    >>>\n    >>> # Get the full redirect uri from the request including querystring\n    >>> # e.g. request_uri = 'https://mysite.com/oauth/xero/callback/?code=0123456789&scope=openid%20profile&state=87784234sdf5ds8ad546a8sd545ss6'\n    >>>\n    >>> credentials.verify(request_uri)\n    ```\n    A token will be fetched from Xero and saved as `credentials.token`. If the\n    credentials object needs to be created again either dump the whole object\n    using:\n    ```python\n    >>> cred_state = credentials.state\n    >>> ...\n    >>> new_creds = OAuth2Credentials(**cred_state)\n    ```\n    or just use the client_id, client_secret and token (and optionally scopes\n    and tenant_id):\n    ```python\n    >>> token = credentials.token\n    >>> ...\n    >>> new_creds = OAuth2Credentials(client_id, client_secret, token=token)\n    ```\n\n 5) Now the credentials may be used to authorize a Xero session. As OAuth2\n    allows authentication for multiple Xero Organisations, it is necessary to\n    set the tenant_id against which the xero client's queries will run.\n    ```python\n    >>> from xero import Xero\n    >>> # Use the first xero organisation (tenant) permitted\n    >>> credentials.set_default_tenant()\n    >>> xero = Xero(credentials)\n    >>> xero.contacts.all()\n    >>> ...\n    ```\n    If the scopes supplied in Step 2 did not require access to organisations\n    (e.g. when only requesting scopes for single sign) it will not be\n    possible to make requests with the Xero API and `set_default_tenant()` will\n    raise an exception.\n\n    To pick from multiple possible Xero organisations the `tenant_id` may be set\n    explicitly:\n    ```python\n    >>> tenants = credentials.get_tenants()\n    >>> credentials.tenant_id = tenants[1]['tenantId']\n    >>> xero = Xero(credentials)\n    ```\n    `OAuth2Credentials.__init__()` accepts `tenant_id` as a keyword argument.\n\n 6) If a refresh token is available, it can be used to generate a new token:\n    ```python\n    >>> if credentials.expired():\n    >>>     credentials.refresh()\n    >>>     # Then store the new credentials or token somewhere for future use:\n    >>>     cred_state = credentials.state\n    >>>     # or\n    >>>     new_token = credentials.token\n    ```\n #### Django OAuth2 App Example\n This example shows authorisation, automatic token refreshing and API use in\n a Django app which has read/write access to contacts and transactions. If the\n cache used is cleared on server restart, the token will be lost and\n verification will have to take place again.\n\n ```python\n    from django.http import HttpResponseRedirect\n    from django.core.cache import caches\n\n    from xero import Xero\n    from xero.auth import OAuth2Credentials\n    from xero.constants import XeroScopes\n\n    def start_xero_auth_view(request):\n        # Get client_id, client_secret from config file or settings then\n        credentials = OAuth2Credentials(\n            client_id, client_secret, callback_uri=callback_uri,\n            scope=[XeroScopes.OFFLINE_ACCESS, XeroScopes.ACCOUNTING_CONTACTS,\n                   XeroScopes.ACCOUNTING_TRANSACTIONS]\n        )\n        authorization_url = credentials.generate_url()\n        caches['mycache'].set('xero_creds', credentials.state)\n        return HttpResponseRedirect(authorization_url)\n\n    def process_callback_view(request):\n        cred_state = caches['mycache'].get('xero_creds')\n        credentials = OAuth2Credentials(**cred_state)\n        auth_secret = request.get_raw_uri()\n        credentials.verify(auth_secret)\n        credentials.set_default_tenant()\n        caches['mycache'].set('xero_creds', credentials.state)\n\n    def some_view_which_calls_xero(request):\n        cred_state = caches['mycache'].get('xero_creds')\n        credentials = OAuth2Credentials(**cred_state)\n        if credentials.expired():\n            credentials.refresh()\n            caches['mycache'].set('xero_creds', credentials.state)\n        xero = Xero(credentials)\n\n        contacts = xero.contacts.all()\n        ...\n ```\n\n## Using the Xero API\n\n*This API is a work in progress. At present, there is no wrapper layer\nto help create real objects, it just returns dictionaries in the exact\nformat provided by the Xero API. This will change into a more useful API\nbefore 1.0*\n\nThe Xero API object exposes a simple API for retrieving and updating objects.\nFor example, to deal with contacts::\n\n```python\n# Retrieve all contact objects\n>>> xero.contacts.all()\n[{...contact info...}, {...contact info...}, {...contact info...}, ...]\n\n# Retrieve a specific contact object\n>>> xero.contacts.get(u'b2b5333a-2546-4975-891f-d71a8a640d23')\n{...contact info...}\n\n# Retrieve all contacts updated since 1 Jan 2013\n>>> xero.contacts.filter(since=datetime(2013, 1, 1))\n[{...contact info...}, {...contact info...}, {...contact info...}]\n\n# Retrieve all contacts whose name is 'John Smith'\n>>> xero.contacts.filter(Name='John Smith')\n[{...contact info...}, {...contact info...}, {...contact info...}]\n\n# Retrieve all contacts whose name starts with 'John'\n>>> xero.contacts.filter(Name__startswith='John')\n[{...contact info...}, {...contact info...}, {...contact info...}]\n\n# Retrieve all contacts whose name ends with 'Smith'\n>>> xero.contacts.filter(Name__endswith='Smith')\n[{...contact info...}, {...contact info...}, {...contact info...}]\n\n# Retrieve all contacts whose name starts with 'John' and ends with 'Smith'\n>>> xero.contacts.filter(Name__startswith='John', Name__endswith='Smith')\n[{...contact info...}, {...contact info...}, {...contact info...}]\n\n# Retrieve all contacts whose name contains 'mit'\n>>> xero.contacts.filter(Name__contains='mit')\n[{...contact info...}, {...contact info...}, {...contact info...}]\n\n# Create a new object\n>>> xero.contacts.put({...contact info...})\n\n# Create multiple new objects\n>>> xero.contacts.put([{...contact info...}, {...contact info...}, {...contact info...}])\n\n# Save an update to an existing object\n>>> c = xero.contacts.get(u'b2b5333a-2546-4975-891f-d71a8a640d23')\n>>> c['Name'] = 'John Smith'\n>>> xero.contacts.save(c)\n\n# Save multiple objects\n>>> xero.contacts.save([c1, c2])\n```\n\nComplex filters can be constructed in the Django-way, for example retrieving invoices for a contact:\n\n```python\n>>> xero.invoices.filter(Contact_ContactID='83ad77d8-48a7-4f77-9146-e6933b7fb63b')\n```\n\nFilters which aren't supported by this API can also be constructed using 'raw' mode like this:\n```python\n>>> xero.invoices.filter(raw='AmountDue > 0')\n```\n\nBe careful when dealing with large amounts of data, the Xero API will take an\nincreasingly long time to respond, or an error will be returned. If a query might\nreturn more than 100 results, you should make use of the ``page`` parameter::\n\n```python\n# Grab 100 invoices created after 01-01-2013\n>>> xero.invoices.filter(since=datetime(2013, 1, 1), page=1)\n```\n\nYou can also order the results to be returned::\n\n```python\n# Grab contacts ordered by EmailAddress\n>>> xero.contacts.filter(order='EmailAddress DESC')\n```\n\nFor invoices (and other objects that can be retrieved as PDFs), accessing the PDF is done\nvia setting the Accept header:\n\n```python\n# Fetch a PDF\ninvoice = xero.invoices.get('af722e93-b64f-482d-9955-1b027bfec896', \\\n    headers={'Accept': 'application/pdf'})\n# Stream the PDF to the user (Django specific example)\nresponse = HttpResponse(invoice, content_type='application/pdf')\nresponse['Content-Disposition'] = 'attachment; filename=\"invoice.pdf\"'\nreturn response\n```\n\nDownload and uploading attachments is supported using the Xero GUID of the relevant object::\n\n```python\n# List attachments on a contact\n>>> xero.contacts.get_attachments(c['ContactID'])\n[{...attachment info...}, {...attachment info...}]\n\n# Attach a PDF to a contact\n>>> f = open('form.pdf', 'rb')\n>>> xero.contacts.put_attachment(c['ContactID'], 'form.pdf', f, 'application/pdf')\n>>> f.close()\n\n>>> xero.contacts.put_attachment_data(c['ContactID'], 'form.pdf', data, 'application/pdf')\n\n# Download an attachment\n>>> f = open('form.pdf', 'wb')\n>>> xero.contacts.get_attachment(c['ContactID'], 'form.pdf', f)\n>>> f.close()\n\n>>> data = xero.contacts.get_attachment_data(c['ContactID'], 'form.pdf')\n```\n\nThis same API pattern exists for the following API objects:\n\n* Accounts\n* Attachments\n* BankTransactions\n* BankTransfers\n* BrandingThemes\n* ContactGroups\n* Contacts\n* CreditNotes\n* Currencies\n* Employees\n* ExpenseClaims\n* Invoices\n* Items\n* Journals\n* ManualJournals\n* Organisation\n* Overpayments\n* Payments\n* Prepayments\n* Purchase Orders\n* Receipts\n* RepeatingInvoices\n* Reports\n* TaxRates\n* TrackingCategories\n* Users\n\n\n## Payroll\n\nIn order to access the payroll methods from Xero, you can do it like this:\n\n```\nxero.payrollAPI.payruns.all()\n```\n\nWithin the payrollAPI you have access to:\n\n* employees\n* leaveapplications\n* payitems\n* payrollcalendars\n* payruns\n* payslip\n* superfunds\n* timesheets\n\n\n## Projects\n\nIn order to access the projects methods from Xero, you can do it like this:\n\n```\nxero.projectsAPI.projects.all()\n```\n\nWithin the projectsAPI you have access to:\n\n* projects\n* projectsusers\n* tasks\n* time\n\n\n## Under the hood\n\nUsing a wrapper around Xero API is a really nice feature, but it's also interesting to understand what is exactly\nhappening under the hood.\n\n### Filter operator\n\n``filter`` operator wraps the \"where\" keyword in Xero API.\n\n```python\n# Retrieves all contacts whose name is \"John\"\n>>> xero.contacts.filter(name=\"John\")\n\n# Triggers this GET request:\nHtml encoded: <XERO_API_URL>/Contacts?where=name%3D%3D%22John%22\nNon encoded:  <XERO_API_URL>/Contacts?where=name==\"John\"\n```\n\nSeveral parameters are separated with encoded '&&' characters:\n\n```python\n# Retrieves all contacts whose first name is \"John\" and last name is \"Doe\"\n>>> xero.contacts.filter(firstname=\"John\", lastname=\"Doe\")\n\n# Triggers this GET request:\nHtml encoded: <XERO_API_URL>/Contacts?where=lastname%3D%3D%22Doe%22%26%26firstname%3D%3D%22John%22\nNon encoded:  <XERO_API_URL>/Contacts?where=lastname==\"Doe\"&&firstname==\"John\"\n\n```\n\nUnderscores are automatically converted as \"dots\":\n```python\n# Retrieves all contacts whose name is \"John\"\n>>> xero.contacts.filter(first_name=\"John\")\n\n# Triggers this GET request:\nHtml encoded: <XERO_API_URL>/Contacts?where=first.name%3D%3D%22John%22%\nNon encoded:  <XERO_API_URL>/Contacts?where=first.name==\"John\"\n```\n\n## Contributing\n\nIf you're going to run the PyXero test suite, in addition to the dependencies\nfor PyXero, you need to add the following dependency to your environment:\n\n    mock >= 1.0\n\nMock isn't included in the formal dependencies because they aren't required\nfor normal operation of PyXero. It's only required for testing purposes.\n\nOnce you've installed these dependencies, you can run the test suite by\nrunning the following from the root directory of the project:\n\n    $ python setup.py test\n\nIf you find any problems with PyXero, you can log them on [Github Issues](https://github.com/freakboy3742/pyxero/issues).\nWhen reporting problems, it's extremely helpful if you can provide\nreproduction instructions -- the sequence of calls and/or test data that\ncan be used to reproduce the issue.\n\nNew features or bug fixes can be submitted via a pull request. If you want\nyour pull request to be merged quickly, make sure you either include\nregression test(s) for the behavior you are adding/fixing, or provide a\ngood explanation of why a regression test isn't possible.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/freakboy3742/pyxero",
    "keywords": "",
    "license": "New BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyxero",
    "package_url": "https://pypi.org/project/pyxero/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyxero/",
    "project_urls": {
      "Homepage": "http://github.com/freakboy3742/pyxero"
    },
    "release_url": "https://pypi.org/project/pyxero/0.9.3/",
    "requires_dist": [
      "six (>=1.8.0)",
      "requests (>=1.1.0)",
      "requests-oauthlib (>=0.3.0)",
      "python-dateutil (>=2.8)",
      "PyJWT (>=1.6.4)",
      "cryptography (>=1.3.1)"
    ],
    "requires_python": "",
    "summary": "Python API for accessing the REST API of the Xero accounting tool.",
    "version": "0.9.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10772273,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5edbed7770147660030a7660ee8a84ee1cc75ad5f9d5aa7253fb9059c2fd7cc",
          "md5": "0a901d0cb7f86fb7dbd316b568fc1123",
          "sha256": "5594947105556cc1f792741d51599b6dd0444341074c31cad680c02dab97a8a2"
        },
        "downloads": -1,
        "filename": "pyxero-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0a901d0cb7f86fb7dbd316b568fc1123",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8819,
        "upload_time": "2013-03-28T01:16:46",
        "upload_time_iso_8601": "2013-03-28T01:16:46.662549Z",
        "url": "https://files.pythonhosted.org/packages/a5/ed/bed7770147660030a7660ee8a84ee1cc75ad5f9d5aa7253fb9059c2fd7cc/pyxero-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "192780a5f9fad74b1ad1286d412018c4c4f3a355571cbdfc17c8e18f0df22b2c",
          "md5": "eaa36602fa75a845f9a9071a339d717c",
          "sha256": "83be36948247acb69505919683b70d2efa7d53ac5110adbfa6416e5c4856fed3"
        },
        "downloads": -1,
        "filename": "pyxero-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "eaa36602fa75a845f9a9071a339d717c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9913,
        "upload_time": "2013-05-31T06:26:43",
        "upload_time_iso_8601": "2013-05-31T06:26:43.339526Z",
        "url": "https://files.pythonhosted.org/packages/19/27/80a5f9fad74b1ad1286d412018c4c4f3a355571cbdfc17c8e18f0df22b2c/pyxero-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2183c7a199dd270ff3e2b99d56634393d339b975deb882b73f7d3c0a443147af",
          "md5": "664c159d15b5e4d1681840acae1eac44",
          "sha256": "2486116b8782119a78783a4144add024d68730bcfe8745dc6062a80e3ab2fe7a"
        },
        "downloads": -1,
        "filename": "pyxero-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "664c159d15b5e4d1681840acae1eac44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10631,
        "upload_time": "2013-07-29T08:36:58",
        "upload_time_iso_8601": "2013-07-29T08:36:58.653790Z",
        "url": "https://files.pythonhosted.org/packages/21/83/c7a199dd270ff3e2b99d56634393d339b975deb882b73f7d3c0a443147af/pyxero-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa07ada1ffbd4ff8caefdebcd305768ba8cbc91eea2b843eaf338610039cf413",
          "md5": "d99632029ede7d15cb751d34d38e631a",
          "sha256": "f8a05122ebd9a0b04a70054e9404d6c1f728d14ef9a81c119c1ad283aa98b056"
        },
        "downloads": -1,
        "filename": "pyxero-0.6.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d99632029ede7d15cb751d34d38e631a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 23504,
        "upload_time": "2015-01-30T12:58:15",
        "upload_time_iso_8601": "2015-01-30T12:58:15.547695Z",
        "url": "https://files.pythonhosted.org/packages/fa/07/ada1ffbd4ff8caefdebcd305768ba8cbc91eea2b843eaf338610039cf413/pyxero-0.6.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "24c268c991fa0805bc299e483dc91fd5a93aa1b2ff3a0846acbac4230fd401ce",
          "md5": "1d2be1f70c1d7fa263b388b2ab488cdc",
          "sha256": "d9581475aa84828e72edc8c822db848c786cafc596496116663e4535089a8923"
        },
        "downloads": -1,
        "filename": "pyxero-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1d2be1f70c1d7fa263b388b2ab488cdc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21743,
        "upload_time": "2015-01-30T12:58:19",
        "upload_time_iso_8601": "2015-01-30T12:58:19.834487Z",
        "url": "https://files.pythonhosted.org/packages/24/c2/68c991fa0805bc299e483dc91fd5a93aa1b2ff3a0846acbac4230fd401ce/pyxero-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75850bd7862565ac989c9d89c1ed7cee9c5e28e895d13d738fa8461a07e59c94",
          "md5": "d8844c7454c5eb78f004930d8d6fec74",
          "sha256": "1d182c17c1aa76320d0d133020aab4446120f59dc4dc7f0705ebb6c44d0a7626"
        },
        "downloads": -1,
        "filename": "pyxero-0.7.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8844c7454c5eb78f004930d8d6fec74",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 24532,
        "upload_time": "2015-07-03T00:38:34",
        "upload_time_iso_8601": "2015-07-03T00:38:34.775450Z",
        "url": "https://files.pythonhosted.org/packages/75/85/0bd7862565ac989c9d89c1ed7cee9c5e28e895d13d738fa8461a07e59c94/pyxero-0.7.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5416d32e8262169e0514a21fc9d33b06b0e86299924c914d753bffbe56443905",
          "md5": "4f138a82354423ab5cc7e1d53727d2d0",
          "sha256": "eef90cfc627e20df7adb311b1d0bc8cc49fb10783eb4586ec081f527eeeb985e"
        },
        "downloads": -1,
        "filename": "pyxero-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4f138a82354423ab5cc7e1d53727d2d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23222,
        "upload_time": "2015-07-03T00:38:39",
        "upload_time_iso_8601": "2015-07-03T00:38:39.490414Z",
        "url": "https://files.pythonhosted.org/packages/54/16/d32e8262169e0514a21fc9d33b06b0e86299924c914d753bffbe56443905/pyxero-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e34769f38c4824d3f4823c4aa12f7a5f066900523d0cb168e0c0f8d90d916d63",
          "md5": "40d97e27186082372070076d3cc2efa9",
          "sha256": "f24e258fcdbc60ac9e4067e89f2eae4fc5da6bb846f7b6273adaced060182166"
        },
        "downloads": -1,
        "filename": "pyxero-0.8.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40d97e27186082372070076d3cc2efa9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 25547,
        "upload_time": "2016-03-21T05:49:28",
        "upload_time_iso_8601": "2016-03-21T05:49:28.820492Z",
        "url": "https://files.pythonhosted.org/packages/e3/47/69f38c4824d3f4823c4aa12f7a5f066900523d0cb168e0c0f8d90d916d63/pyxero-0.8.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7b86d0cc67c12c73fbec856441ede62f9223b7006d75be018ca50024a831b67",
          "md5": "7e393822263876266bc9a1a333bb2496",
          "sha256": "dedd71063e2d390f4dcfdf761595193bd4059877602dcbc87552c53454d6984e"
        },
        "downloads": -1,
        "filename": "pyxero-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7e393822263876266bc9a1a333bb2496",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25112,
        "upload_time": "2016-03-21T05:49:44",
        "upload_time_iso_8601": "2016-03-21T05:49:44.761066Z",
        "url": "https://files.pythonhosted.org/packages/a7/b8/6d0cc67c12c73fbec856441ede62f9223b7006d75be018ca50024a831b67/pyxero-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46ff7fb276fca6412e7ad40b5d9e716edb94c3aa9981de4f77f361efb17ddaf1",
          "md5": "ef3561b2cc9047fe09d6e8f21fe39347",
          "sha256": "8b8c6f98d5c805270e411aabbef6b5f95a7df1e1dd2d39fe24f0cf3caf5232cc"
        },
        "downloads": -1,
        "filename": "pyxero-0.9.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef3561b2cc9047fe09d6e8f21fe39347",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 26845,
        "upload_time": "2017-07-04T22:45:43",
        "upload_time_iso_8601": "2017-07-04T22:45:43.698657Z",
        "url": "https://files.pythonhosted.org/packages/46/ff/7fb276fca6412e7ad40b5d9e716edb94c3aa9981de4f77f361efb17ddaf1/pyxero-0.9.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a282c17e8ea2755f6af61cdd303d21a22d289b72c07688090f6601210d24229",
          "md5": "82b0be69258cea8a6d5ed6eed9df2fe2",
          "sha256": "cf782c897d4acf2f59acdaa49e414901ad0dd3ff6baf003ad53cc90d75c2cb09"
        },
        "downloads": -1,
        "filename": "pyxero-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "82b0be69258cea8a6d5ed6eed9df2fe2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30349,
        "upload_time": "2017-07-04T22:45:45",
        "upload_time_iso_8601": "2017-07-04T22:45:45.974212Z",
        "url": "https://files.pythonhosted.org/packages/9a/28/2c17e8ea2755f6af61cdd303d21a22d289b72c07688090f6601210d24229/pyxero-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "203afb5fd6e92cc04855d500ca5aa5a150e069b951a51c138a236e3997d50214",
          "md5": "78a139ba612014408bf187af348be221",
          "sha256": "28770d077da831acc36dfeb662f93ea656bd8e604b37d27d1815e83f5eb744e1"
        },
        "downloads": -1,
        "filename": "pyxero-0.9.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "78a139ba612014408bf187af348be221",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 26859,
        "upload_time": "2018-08-27T00:14:13",
        "upload_time_iso_8601": "2018-08-27T00:14:13.655748Z",
        "url": "https://files.pythonhosted.org/packages/20/3a/fb5fd6e92cc04855d500ca5aa5a150e069b951a51c138a236e3997d50214/pyxero-0.9.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b667b916142443633762b941c7d25cd993b375f8a7f7113c5d0e8f9e4602b7f",
          "md5": "a6c83ec08ab3e04da34bdb2d48e9df53",
          "sha256": "edd471362939db95fb4cb35dbce0c7d265c4a7be1c44cfeae4d9cff60b62126a"
        },
        "downloads": -1,
        "filename": "pyxero-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a6c83ec08ab3e04da34bdb2d48e9df53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33917,
        "upload_time": "2018-08-27T00:14:15",
        "upload_time_iso_8601": "2018-08-27T00:14:15.825673Z",
        "url": "https://files.pythonhosted.org/packages/1b/66/7b916142443633762b941c7d25cd993b375f8a7f7113c5d0e8f9e4602b7f/pyxero-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4df93376851dcbe97f7e52aac55b7d896ea2a60992e6743d34c3d53fb593305b",
          "md5": "2e01e0edb318848892855a8772932398",
          "sha256": "f2dc9f48b616041a50a5ffca1f7c5a7fc0e0b7609e6194f206a2dcbdfcdda35f"
        },
        "downloads": -1,
        "filename": "pyxero-0.9.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e01e0edb318848892855a8772932398",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 28758,
        "upload_time": "2020-03-01T04:45:59",
        "upload_time_iso_8601": "2020-03-01T04:45:59.979521Z",
        "url": "https://files.pythonhosted.org/packages/4d/f9/3376851dcbe97f7e52aac55b7d896ea2a60992e6743d34c3d53fb593305b/pyxero-0.9.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "663e3ad1e535769cf5679b1d882fa9a35ca8c8ebf3752ca423d94cf225f3720a",
          "md5": "594bbcad94382e37182e75aae4656c2e",
          "sha256": "7608d6c3bc52d206528c42d17c3d363977f7e141890eafc8c1d58dc8a440b285"
        },
        "downloads": -1,
        "filename": "pyxero-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "594bbcad94382e37182e75aae4656c2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46630,
        "upload_time": "2020-03-01T04:46:01",
        "upload_time_iso_8601": "2020-03-01T04:46:01.406098Z",
        "url": "https://files.pythonhosted.org/packages/66/3e/3ad1e535769cf5679b1d882fa9a35ca8c8ebf3752ca423d94cf225f3720a/pyxero-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f3c056ddbdd89612dc1fe962cafd8628422d9237ef74712db8c1dc8f25fc3e4e",
          "md5": "be6acd6bb07a92595c151d6075c69c8b",
          "sha256": "95bc69c23b257fa2d8a393512735e617af4f4ae3ae1c6163fb1006bcab357d6b"
        },
        "downloads": -1,
        "filename": "pyxero-0.9.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be6acd6bb07a92595c151d6075c69c8b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 29229,
        "upload_time": "2021-06-29T04:18:10",
        "upload_time_iso_8601": "2021-06-29T04:18:10.244269Z",
        "url": "https://files.pythonhosted.org/packages/f3/c0/56ddbdd89612dc1fe962cafd8628422d9237ef74712db8c1dc8f25fc3e4e/pyxero-0.9.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e255b346563e254dd9a676745377b04d44d16d1d836cd96649e5fb3d0609c9f7",
          "md5": "389eea426b2f37744bc90dd1e8ce9a98",
          "sha256": "dfd7cda37383b3229969ceb3365bcbf5093f91ade75327ede4cc66a94fdca531"
        },
        "downloads": -1,
        "filename": "pyxero-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "389eea426b2f37744bc90dd1e8ce9a98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 46640,
        "upload_time": "2021-06-29T04:18:11",
        "upload_time_iso_8601": "2021-06-29T04:18:11.522915Z",
        "url": "https://files.pythonhosted.org/packages/e2/55/b346563e254dd9a676745377b04d44d16d1d836cd96649e5fb3d0609c9f7/pyxero-0.9.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f3c056ddbdd89612dc1fe962cafd8628422d9237ef74712db8c1dc8f25fc3e4e",
        "md5": "be6acd6bb07a92595c151d6075c69c8b",
        "sha256": "95bc69c23b257fa2d8a393512735e617af4f4ae3ae1c6163fb1006bcab357d6b"
      },
      "downloads": -1,
      "filename": "pyxero-0.9.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "be6acd6bb07a92595c151d6075c69c8b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 29229,
      "upload_time": "2021-06-29T04:18:10",
      "upload_time_iso_8601": "2021-06-29T04:18:10.244269Z",
      "url": "https://files.pythonhosted.org/packages/f3/c0/56ddbdd89612dc1fe962cafd8628422d9237ef74712db8c1dc8f25fc3e4e/pyxero-0.9.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e255b346563e254dd9a676745377b04d44d16d1d836cd96649e5fb3d0609c9f7",
        "md5": "389eea426b2f37744bc90dd1e8ce9a98",
        "sha256": "dfd7cda37383b3229969ceb3365bcbf5093f91ade75327ede4cc66a94fdca531"
      },
      "downloads": -1,
      "filename": "pyxero-0.9.3.tar.gz",
      "has_sig": false,
      "md5_digest": "389eea426b2f37744bc90dd1e8ce9a98",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 46640,
      "upload_time": "2021-06-29T04:18:11",
      "upload_time_iso_8601": "2021-06-29T04:18:11.522915Z",
      "url": "https://files.pythonhosted.org/packages/e2/55/b346563e254dd9a676745377b04d44d16d1d836cd96649e5fb3d0609c9f7/pyxero-0.9.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}