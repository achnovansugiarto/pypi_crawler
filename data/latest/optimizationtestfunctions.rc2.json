{
  "info": {
    "author": "Demetry Pascal",
    "author_email": "qtckpuhdsa@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Optimization Test Functions\n\n[![PyPI\nversion](https://badge.fury.io/py/OptimizationTestFunctions.svg)](https://pypi.org/project/OptimizationTestFunctions/)\n\nCollection of optimization test functions and some useful methods for working with them\n\n```\npip install OptimizationTestFunctions\n```\n\n- [Optimization Test Functions](#optimization-test-functions)\n  - [Test function object](#test-function-object)\n  - [Available test functions](#available-test-functions)\n    - [Sphere](#sphere)\n    - [Ackley](#ackley)\n    - [AckleyTest](#ackleytest)\n    - [Rosenbrock](#rosenbrock)\n    - [Fletcher](#fletcher)\n    - [Griewank](#griewank)\n    - [Penalty2](#penalty2)\n    - [Quartic](#quartic)\n    - [Rastrigin](#rastrigin)\n    - [SchwefelDouble](#schwefeldouble)\n    - [SchwefelMax](#schwefelmax)\n    - [SchwefelAbs](#schwefelabs)\n    - [SchwefelSin](#schwefelsin)\n    - [Stairs](#stairs)\n    - [Abs](#abs)\n    - [Michalewicz](#michalewicz)\n    - [Scheffer](#scheffer)\n    - [Eggholder](#eggholder)\n    - [Weierstrass](#weierstrass)\n  - [Plotting tools](#plotting-tools)\n    - [Structure](#structure)\n    - [How to use](#how-to-use)\n  - [Transformation tools](#transformation-tools)\n    - [Structure](#structure-1)\n    - [How to use](#how-to-use-1)\n\n## Test function object\n\nEach test function is the **callable object** of some class with next fields at least:\n\n* `bounds` -- tuple with structure `(xmin, xmax, ymin, ymax)`. It is recommended borders for 3D plotting and 2D optimization for this function\n* `x_best` -- global minimum argument of function in `bounds` area as numpy array. If unknown, it's `None`\n* `f_best` -- function value at `x_best` if `x_best` exists and `None` otherwise\n\nA lot of function objects need determined `dim` argument in constructor.\n\nU can call these \"functions\" like usual functions with structure `numpy 1D-array -> float value`.\n\n## Available test functions\n\nChecklist:\n\n* `Sphere(dim, degree = 2)`\n* `Ackley(dim)`\n* `AckleyTest(dim)`\n* `Rosenbrock(dim)`\n* `Fletcher(dim, seed = None)`\n* `Griewank(dim)`\n* `Penalty2(dim, a=5, k=100, m=4)`\n* `Quartic(dim)`\n* `Rastrigin(dim)`\n* `SchwefelDouble(dim)`\n* `SchwefelMax(dim)`\n* `SchwefelAbs(dim)`\n* `SchwefelSin(dim)`\n* `Stairs(dim)`\n* `Abs(dim)`\n* `Michalewicz(m = 10)`\n* `Scheffer(dim)`\n* `Eggholder(dim)`\n* `Weierstrass(dim, a = 0.5, b = 3, kmax = 20)`\n\nU imports them using code:\n```python\nfrom OptimizationTestFunctions import Sphere, Ackley, AckleyTest, Rosenbrock, Fletcher, Griewank, Penalty2, Quartic, Rastrigin, SchwefelDouble, SchwefelMax, SchwefelAbs, SchwefelSin, Stairs, Abs, Michalewicz, Scheffer, Eggholder, Weierstrass\n```\n\nAnd plot them using [code](tests/heatmap_test.py)\n\n\n### Sphere\n![](tests/heatmap%20for%20Sphere.png)\n### Ackley\n![](tests/heatmap%20for%20Ackley.png)\n### AckleyTest\n![](tests/heatmap%20for%20AckleyTest.png)\n### Rosenbrock\n![](tests/heatmap%20for%20Rosenbrock.png)\n### Fletcher\n![](tests/heatmap%20for%20Fletcher.png)\n### Griewank\n![](tests/heatmap%20for%20Griewank.png)\n### Penalty2\n![](tests/heatmap%20for%20Penalty2.png)\n### Quartic\n![](tests/heatmap%20for%20Quartic.png)\n### Rastrigin\n![](tests/heatmap%20for%20Rastrigin.png)\n### SchwefelDouble\n![](tests/heatmap%20for%20SchwefelDouble.png)\n### SchwefelMax\n![](tests/heatmap%20for%20SchwefelMax.png)\n### SchwefelAbs\n![](tests/heatmap%20for%20SchwefelAbs.png)\n### SchwefelSin\n![](tests/heatmap%20for%20SchwefelSin.png)\n### Stairs\n![](tests/heatmap%20for%20Stairs.png)\n### Abs\n![](tests/heatmap%20for%20Abs.png)\n### Michalewicz\n![](tests/heatmap%20for%20Michalewicz.png)\n### Scheffer\n![](tests/heatmap%20for%20Scheffer.png)\n### Eggholder\n![](tests/heatmap%20for%20Eggholder.png)\n### Weierstrass\n![](tests/heatmap%20for%20Weierstrass.png)\n\n\n## Plotting tools\n\n### Structure\n\nThere are `plot_3d` function for 3D-plotting:\n```python\nplot_3d(func, points_by_dim = 50, title = '', bounds = None, show_best_if_exists = True, save_as = None, cmap = 'twilight', plot_surface = True, plot_heatmap = True)\n```\nwith arguments:\n\n* `func` : **class callable object**;\n        Object which can be called as function.\n* `points_by_dim` : **int**, optional;\n        points for each dimension of plotting (50x50, 100x100...). The default is 50.\n* `title` : **str**, optional;\n        title of plot with LaTeX notation. The default is ''.\n* `bounds` : **tuple**, optional;\n        space bounds with structure `(xmin, xmax, ymin, ymax)`. The default is None.\n* `show_best_if_exists` : **boolean**, optional;\n        point best solution by arrow if x_best exists. The default is True.\n* `save_as` : **str/None**, optional;\n        file path to save image (None if not needed). The default is None.\n* `cmap` : **str**, optional;\n        color map of plot. The default is `'twilight'`. See another cmaps examples [here](https://github.com/PasaOpasen/Wave-animation-from-svd#heatmaps)\n* `plot_surface` : **boolean**, optional;\n        plot 3D surface. The default is True.\n* `plot_heatmap` : **boolean**, optional;\n        plot 2D heatmap. The default is True.\n\n### How to use\n\n```python\nfrom OptimizationTestFunctions import Fletcher, plot_3d\n\n# dim should be 2 for plotting 3D\ndim = 2\n\n# Fletcher is good function depends on random seed!\n\nseed = 1\nf1 = Fletcher(dim, seed)\n\n# full available functional of plotting\n\nplot_3d(f1, \n        points_by_dim = 70, \n        title = fr\"{type(f1).__name__}\\ with\\ seed = {seed}\", # LaTeX formula notation\n        bounds = None, \n        show_best_if_exists = True, \n        save_as = \"Fletcher1.png\",\n        cmap = 'twilight',\n        plot_surface = True,\n        plot_heatmap = True)\n```\n![](tests/Fletcher1.png)\n\n```python\n# disable arrow\n\nplot_3d(f1, \n        points_by_dim = 70, \n        title = fr\"{type(f1).__name__}\\ with\\ seed = {seed}\",\n        bounds = None, \n        show_best_if_exists = False, \n        save_as = \"Fletcher2.png\",\n        cmap = 'twilight',\n        plot_surface = True,\n        plot_heatmap = True)\n```\n![](tests/Fletcher2.png)\n\n```python\n# select another bounds\n\nplot_3d(f1, \n        points_by_dim = 70, \n        title = fr\"{type(f1).__name__}\\ with\\ seed = {seed}\",\n        bounds = (-2, 6, -8, 10), \n        show_best_if_exists = False, \n        save_as = \"Fletcher3.png\",\n        cmap = 'twilight',\n        plot_surface = True,\n        plot_heatmap = True)\n```\n![](tests/Fletcher3.png)\n\n```python\n# Create another Fletcher function\n\nseed = 33\n\nf2 = Fletcher(dim, seed)\n\n# use another cmap\n\nplot_3d(f2, \n        points_by_dim = 70, \n        title = fr\"{type(f1).__name__}\\ with\\ seed = {seed}\",\n        bounds = None, \n        show_best_if_exists = False, \n        save_as = \"Fletcher4.png\",\n        cmap = 'inferno',\n        plot_surface = True,\n        plot_heatmap = True)\n```\n![](tests/Fletcher4.png)\n\n```python\n# plot only 3D\n\nplot_3d(f2, \n        points_by_dim = 70, \n        title = fr\"{type(f1).__name__}\\ with\\ seed = {seed}\",\n        bounds = None, \n        show_best_if_exists = False, \n        save_as = \"Fletcher5.png\",\n        cmap = 'inferno',\n        plot_surface = True,\n        plot_heatmap = False)\n```\n![](tests/Fletcher5.png)\n\n```python\n# plot only heatmap\n\nplot_3d(f2, \n        points_by_dim = 70, \n        title = fr\"{type(f1).__name__}\\ with\\ seed = {seed}\",\n        bounds = None, \n        show_best_if_exists = True, \n        save_as = \"Fletcher6.png\",\n        cmap = 'inferno',\n        plot_surface = False,\n        plot_heatmap = True)\n```\n![](tests/Fletcher6.png)\n\n\n## Transformation tools\n\n### Structure\n\n`Transformation` object is the callable object like \"functions\" of this package. It performs next useful transformations:\n\n* parallel transfer (*shift*)\n* rotation\n* add noises\n\nU can create `Transformation` object using code:\n\n```python\ntransform = Transformation(transformed_function, shift_step = None, rotation_matrix = None, noise_generator = None, seed = None)\n```\n\nwhere:\n\n* `transformed_function` : **function or class callable object**;\n            transformed function.\n* `shift_step` : **numpy 1D array/None**, optional;\n            array of shifts by each dimension or `None`. The default is `None`.\n* `rotation_matrix` : **2D-array/int/None**, optional;\n            2D ortogonal rotation matrix or dimension for creating random rotation matrix or `None` if no rotate. The default is `None`.\n* `noise_generator` : **function**, optional;\n            function gets current value and returns value with some noise. The default is `None`.\n* `seed` : **int**, optional;\n            random seed for rotation matrix if needed reproduce. The default is `None`.\n\nU also can create noises by using `Noises` static class.\n\n### How to use\n\n```python\nimport numpy as np\n\nfrom OptimizationTestFunctions import Weierstrass, plot_3d, Transformation, Noises\n\n# dim should be 2 for plotting 3D\ndim = 2\n\n# Let's create Weierstrass function\n\nf = Weierstrass(dim, a = 0.5, b = 5, kmax = 20)\n\n# show it\n\nplot_3d(f, \n        points_by_dim = 70, \n        title = f\"{type(f).__name__}\",\n        bounds = None, \n        show_best_if_exists = True, \n        save_as = \"Trans1.png\",\n        cmap = 'hot',\n        plot_surface = True,\n        plot_heatmap = True)\n```\n\n![](tests/Trans1.png)\n\n```python\n# transformation with shift\n\nshifted_func = Transformation(f, shift_step=np.array([3, 4]))\n\n# show it\n\nplot_3d(shifted_func, \n        points_by_dim = 70, \n        title = \"shifted\",\n        bounds = None, \n        show_best_if_exists = True, \n        save_as = \"Trans2.png\",\n        cmap = 'hot',\n        plot_surface = True,\n        plot_heatmap = True)\n```\n![](tests/Trans2.png)\n\n```python\n# transformation with rotation\n\nrotated_func = Transformation(f, rotation_matrix = dim, seed = 2) # random rotation matrix with dim 2\n\n# show it\n\nplot_3d(rotated_func, \n        points_by_dim = 70, \n        title = \"rotated\",\n        bounds = None, \n        show_best_if_exists = True, \n        save_as = \"Trans3.png\",\n        cmap = 'hot',\n        plot_surface = True,\n        plot_heatmap = True)\n```\n![](tests/Trans3.png)\n\n\n```python\n# transformation with noise\n\nnoised_func = Transformation(f, noise_generator = Noises.normal(center = 0, sd = 0.5)) \n\n# show it\n\nplot_3d(noised_func, \n        points_by_dim = 70, \n        title = \"noised\",\n        bounds = None, \n        show_best_if_exists = True, \n        save_as = \"Trans4.png\",\n        cmap = 'hot',\n        plot_surface = True,\n        plot_heatmap = True)\n```\n![](tests/Trans4.png)\n\n```python\n# U can specify your noise behavior\n\ndef add_noise(current_val):\n    if current_val > 5:\n        return 0\n\n    return current_val + np.random.random()/10\n\nnoised_func = Transformation(f, noise_generator = add_noise) \n\nplot_3d(noised_func, \n        points_by_dim = 70, \n        title = \"noised\",\n        bounds = None, \n        show_best_if_exists = True, \n        save_as = \"Trans5.png\",\n        cmap = 'hot',\n        plot_surface = True,\n        plot_heatmap = True)\n```\n![](tests/Trans5.png)\n\n```python\n# Also u can combine all these transformations \n\nnew_func = Transformation(f,\n                          shift_step= np.array([10, -10]),\n                          rotation_matrix = 2, seed = 3,\n                          noise_generator = Noises.uniform(-0.1, 0.5)\n                          ) \n\nplot_3d(new_func, \n        points_by_dim = 70, \n        title = \"mixed\",\n        bounds = None, \n        show_best_if_exists = True, \n        save_as = \"Trans6.png\",\n        cmap = 'hot',\n        plot_surface = True,\n        plot_heatmap = True)\n```\n![](tests/Trans6.png)\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PasaOpasen/OptimizationTestFunctions",
    "keywords": "optimization,evolutionary algorithms,fast,easy,evolution,generator,test,test-functions,3D,functions",
    "license": "",
    "maintainer": "['Demetry Pascal']",
    "maintainer_email": "",
    "name": "OptimizationTestFunctions",
    "package_url": "https://pypi.org/project/OptimizationTestFunctions/",
    "platform": "",
    "project_url": "https://pypi.org/project/OptimizationTestFunctions/",
    "project_urls": {
      "Homepage": "https://github.com/PasaOpasen/OptimizationTestFunctions"
    },
    "release_url": "https://pypi.org/project/OptimizationTestFunctions/1.0.1/",
    "requires_dist": [
      "numpy",
      "matplotlib",
      "OppOpPopInit"
    ],
    "requires_python": "",
    "summary": "PyPI package containing collection of optimization test functions and some useful methods for working with them",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8940450,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07c18c8da1349cba4180a188fdada24c8ed14b9a7f3d56e967b710898f405f18",
          "md5": "49ee3279a47d84680949ad2693b10144",
          "sha256": "a7b82ae120acba716301293b9f10df4049cf84e6a8c849d2cf3d2ee04dea9a15"
        },
        "downloads": -1,
        "filename": "OptimizationTestFunctions-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49ee3279a47d84680949ad2693b10144",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9956,
        "upload_time": "2020-12-17T15:05:01",
        "upload_time_iso_8601": "2020-12-17T15:05:01.930747Z",
        "url": "https://files.pythonhosted.org/packages/07/c1/8c8da1349cba4180a188fdada24c8ed14b9a7f3d56e967b710898f405f18/OptimizationTestFunctions-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35a1fb71230b5c07867ed83169557cca5d2bc8b32bdd472ebe345b7c1dee97e7",
          "md5": "a53b91eaf26615738fb26cdbcf858d1b",
          "sha256": "e5aa85d4273290b81e26758aa509915dc21975bea50bc61884feba966b7158d6"
        },
        "downloads": -1,
        "filename": "OptimizationTestFunctions-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a53b91eaf26615738fb26cdbcf858d1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9560,
        "upload_time": "2020-12-17T15:05:03",
        "upload_time_iso_8601": "2020-12-17T15:05:03.702004Z",
        "url": "https://files.pythonhosted.org/packages/35/a1/fb71230b5c07867ed83169557cca5d2bc8b32bdd472ebe345b7c1dee97e7/OptimizationTestFunctions-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "998b6ff4e3e5dc0a189856f4bc77ba487d020bd52354b0b0e4ad67851c3e8d82",
          "md5": "866f304d30573cfb4171a5d835245bf3",
          "sha256": "9c2847e9b66335070ad59f3f532a740b465f5c9138186a36a2d7c9d00caac7f2"
        },
        "downloads": -1,
        "filename": "OptimizationTestFunctions-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "866f304d30573cfb4171a5d835245bf3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10086,
        "upload_time": "2020-12-19T11:19:29",
        "upload_time_iso_8601": "2020-12-19T11:19:29.762256Z",
        "url": "https://files.pythonhosted.org/packages/99/8b/6ff4e3e5dc0a189856f4bc77ba487d020bd52354b0b0e4ad67851c3e8d82/OptimizationTestFunctions-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f99b497dfd97ca6a48a0d68530592c021fa75445342b1682e2ef44ad42e73e5",
          "md5": "5ac5b8117829612cd7517cf641140d39",
          "sha256": "1d89a338687143e0162ab89723c1dc7243207fc785226fdb94aa52171c0cbafc"
        },
        "downloads": -1,
        "filename": "OptimizationTestFunctions-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5ac5b8117829612cd7517cf641140d39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9791,
        "upload_time": "2020-12-19T11:19:31",
        "upload_time_iso_8601": "2020-12-19T11:19:31.442308Z",
        "url": "https://files.pythonhosted.org/packages/2f/99/b497dfd97ca6a48a0d68530592c021fa75445342b1682e2ef44ad42e73e5/OptimizationTestFunctions-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "998b6ff4e3e5dc0a189856f4bc77ba487d020bd52354b0b0e4ad67851c3e8d82",
        "md5": "866f304d30573cfb4171a5d835245bf3",
        "sha256": "9c2847e9b66335070ad59f3f532a740b465f5c9138186a36a2d7c9d00caac7f2"
      },
      "downloads": -1,
      "filename": "OptimizationTestFunctions-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "866f304d30573cfb4171a5d835245bf3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10086,
      "upload_time": "2020-12-19T11:19:29",
      "upload_time_iso_8601": "2020-12-19T11:19:29.762256Z",
      "url": "https://files.pythonhosted.org/packages/99/8b/6ff4e3e5dc0a189856f4bc77ba487d020bd52354b0b0e4ad67851c3e8d82/OptimizationTestFunctions-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f99b497dfd97ca6a48a0d68530592c021fa75445342b1682e2ef44ad42e73e5",
        "md5": "5ac5b8117829612cd7517cf641140d39",
        "sha256": "1d89a338687143e0162ab89723c1dc7243207fc785226fdb94aa52171c0cbafc"
      },
      "downloads": -1,
      "filename": "OptimizationTestFunctions-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5ac5b8117829612cd7517cf641140d39",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9791,
      "upload_time": "2020-12-19T11:19:31",
      "upload_time_iso_8601": "2020-12-19T11:19:31.442308Z",
      "url": "https://files.pythonhosted.org/packages/2f/99/b497dfd97ca6a48a0d68530592c021fa75445342b1682e2ef44ad42e73e5/OptimizationTestFunctions-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}