{
  "info": {
    "author": "Ryan Peters",
    "author_email": "RyanIRL@icloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# TorchVF\n\nWORK IN PROGRESS.\n\nTorchVF is a unifying Python library for using vector fields for lightweight \nproposal-free instance segmentation. The TorchVF library provides generalizable\nfunctions to automate ground truth vector field computation, interpolation of\ndiscretely sampled vector fields, numeric integration solvers, clustering\nfunctions, and various other utilities. \n\nThis repository also provides all configs, code, and tools necessary to\nreproduce the results in my\n[article](https://github.com/ryanirl/torchvf/blob/main/article/first_draft.pdf)\non vector field based methods.\n\n## Quick Start\n\nFor anyone interested in learning about vector field based methods, see my\n[article](https://github.com/ryanirl/torchvf/blob/main/article/first_draft.pdf).\nTorchVF can be used to compute the instance segmentation given the semantic\nsegmentation and vector field via the following code: \n\n```Python\n# Consider we have a vector field `vf` and semantic segmentation `semantic`, \n# we can derive the instance segmentation via the following code: \n\nfrom torchvf.numerics import interp_vf, ivp_solver, init_values_semantic\nfrom torchvf.utils import cluster\n\n# Step 1: Convert our discretely sampled vector field into continuous vector\n# field through bilinear interpolation. \nvf = interp_vf(vf, mode = \"bilinear\")\n\n# Step 2. Convert our semantic segmentation `semantic` into a set of\n# initial-values to be integrated through our vector field `vf`.\ninit_values = init_values_semantic(semantic, device = \"cuda:0\")\n\n# Step 3. Integrate our initial-values `init_values` through our vector field\n# `vf` for 25 steps with a step size of 0.1 using Euler's method for numeric \n# integration. \nsolutions = ivp_solver(\n    vf, \n    init_values, \n    dx = 0.1,\n    n_steps = 25,\n    solver = \"euler\"\n)[-1] # Get the final solution. \n\n# Clustering can only be done on the CPU. \nsolutions = solutions.cpu()\nsemantic = semantic.cpu()\n\n# Step 4. Cluster the integrated semantic points `solutions` to obtain the\n# instance segmentation. \ninstance_segmentation = cluster(\n    solutions, \n    semantic[0], \n    eps = 2.25,\n    min_samples = 15,\n    snap_noise = False\n)\n\n```\n\n## Supported Features\n\n<details>\n   <summary>Interpolators:</summary>\n\n</br>\n\n| Interpolator             | Implemented          |\n| ------------------------ | -------------------- |\n| Nearest Neighbor         | :white_check_mark:   |\n| Nearest Neighbor Batched | :white_check_square: |\n| Bilinear                 | :white_check_mark:   |\n| Bilinear Batched         | :white_check_mark:   |\n\n</details>\n\n<details>\n   <summary>Numeric Integration Solvers:</summary>\n\n</br>\n\n| Interpolator            | Implemented          |\n| ----------------------- | -------------------- |\n| Euler's Method          | :white_check_mark:   |\n| Midpoint Method         | :white_check_mark:   |\n| Runge Kutta (4th Order) | :white_check_mark:   |\n| Adaptive Dormand Prince | :white_check_square: |\n\n</details>\n\n<details>\n   <summary>Clustering Schemes:</summary>\n\n</br>\n\n| Interpolator            | Implemented          |\n| ----------------------- | -------------------- |\n| DBSCAN (Scikit-learn)   | :white_check_mark:   |\n| DCSCAN (PyTorch)        | :white_check_square: |\n| ...?                    | :white_check_square: | \n\n</details>\n\n<details>\n   <summary>Vector Field Computation:</summary>\n\n</br>\n\n| Interpolator           | Implemented          |\n| ---------------------- | -------------------- |\n| Truncated SDF + Kernel | :white_check_mark:   |\n| Affinity Derived       | :white_check_mark:   |\n| Omnipose               | :white_check_square: |\n| Centroid Based         | :white_check_square: | \n\n</details>\n\n<details>\n   <summary>Other Utilities:</summary>\n\n - Tiler wrapper for models. \n - Semantic -> euclidean conversion.\n - The IVP vector field loss function. \n - Tversky and Dice semantic loss functions. \n - Training and evalution scripts. \n - Various pretrained models on the BPCIS dataset.  \n - Modeling for the presented H1 and H2 models. \n - mAP IoU, F1, IoU metrics. \n\n</details>\n\n## Dependencies\n\nThe ultimate goal of TorchVF is to be solely dependent on PyTorch. Although at\nthe moment, the signed distance function computation relies on Seung Lab's\neuclidean distance transform [library](https://github.com/seung-lab/euclidean-distance-transform-3d)\nand the DBSCAN clustering implementation relies on Scikit-learn.  Furthermore,\nNumPy appears in various places (mAP IoU metric, clustering, ...).\n\n## Reproducability\n\nThis installation guide is for people who want to reproduce the results in my\n[article](https://github.com/ryanirl/torchvf/blob/main/article/first_draft.pdf)\non vector field based methods. First, clone the repository:\n\n```\ngit clone https://github.com/ryanirl/torchvf.git\n```\n\n### Installing the Weights\n\nWeights include H1 and H2 for the bacterial phase contrast, bacterial\nfluorescence, and worm subsets of the BPCIS dataset. And can be found\n[here](https://drive.google.com/drive/folders/14fvNNZkr4ewuy0-Q2mwjCX-fbMVS7X90?usp=sharing)\n(157.5 MB zipped | 185.5 MB unzipped). \n\nOnce you download the weights:\n - Unzip the file.\n - Replace the `torchvf/weights` file with the downloaded and unzipped `torchvf_weights` file. \n - Rename `torchvf/torchvf_weights` to `torchvf/weights`.\n\n### Installing the BPCIS Dataset\n\nDownload the BPCIS dataset [here](http://www.cellpose.org/dataset_omnipose).\nThen setup the file system this way:\n\n```bash\n├── torchvf/\n├── data/\n│   └── bpcis/\n│       ├── bact_fluor_train/\n│       ├── bact_fluor_test/\n│       ├── bact_phase_train/\n│       ├── bact_phase_test/\n│       ├── worm_train/\n│       └── worm_test/\n├── weights/\n└── ***\n```\n\nIf you have cloned the library, downloaded the weights, and downloaded the\nBPCIS dataset you *should* be able to do `python3 scripts/eval.py --config_dir\n./configs/eval/bpcis_bact_fluor.py`. This will run evaluation on the bacterial\nfluorescence subset using the config file from the downloaded weights. \n\n## Usage\n\nWork in progress.\n\n## Citation\n\n```\n@article{TorchVF,\n   author = {Ryan Peters},\n   title = {TorchVF: Vector Fields for Instance Segmentation},\n   year = 2022\n}\n```\n\n## License\n\nDistributed under the Apache-2.0 license. See `LICENSE` for more information.\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ryanirl/torchvf",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchvf",
    "package_url": "https://pypi.org/project/torchvf/",
    "platform": null,
    "project_url": "https://pypi.org/project/torchvf/",
    "project_urls": {
      "Homepage": "https://github.com/ryanirl/torchvf",
      "Repository": "https://github.com/ryanirl/torchvf"
    },
    "release_url": "https://pypi.org/project/torchvf/0.1.1/",
    "requires_dist": [
      "torch (>=1.6.0,<2.0.0)",
      "scikit-learn",
      "matplotlib",
      "opencv-python",
      "numpy",
      "pandas",
      "torchvision",
      "pyyaml",
      "edt"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "Vector fields for instance segmentation in PyTorch.",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14968579,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb7e8fbe6615b6209fcbb339aa8c117972033d962d7ef0f593871dd32c335f68",
          "md5": "15bd285b9dcb3a194358e26b543090fc",
          "sha256": "b0f9c7b8537654e2057d1f20bfc09e56d41de8f29a45d60b15ab7910687fa016"
        },
        "downloads": -1,
        "filename": "torchvf-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15bd285b9dcb3a194358e26b543090fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 63921,
        "upload_time": "2022-08-31T22:59:21",
        "upload_time_iso_8601": "2022-08-31T22:59:21.889843Z",
        "url": "https://files.pythonhosted.org/packages/bb/7e/8fbe6615b6209fcbb339aa8c117972033d962d7ef0f593871dd32c335f68/torchvf-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "651a1c214213a14f631511dc13da8d469d9f7b26e877b1804de3d12f29feb349",
          "md5": "7ecd2a8b340c2b9b96922d0c53413f6f",
          "sha256": "6c7503f80c30ecd30adf86cb68c311b0e7788913123abbbe213b31e59f1ca003"
        },
        "downloads": -1,
        "filename": "torchvf-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7ecd2a8b340c2b9b96922d0c53413f6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 31669,
        "upload_time": "2022-08-31T22:59:23",
        "upload_time_iso_8601": "2022-08-31T22:59:23.872327Z",
        "url": "https://files.pythonhosted.org/packages/65/1a/1c214213a14f631511dc13da8d469d9f7b26e877b1804de3d12f29feb349/torchvf-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cbe660d7111cd30b9c42948661dc8f2d1fbd6e948d20eb5f0829afce4339bca",
          "md5": "c4fad30f6f52dce5cd2e44fd54f34c4e",
          "sha256": "bada9bc7b1a18284b9d3cb76054ae0ee2250b19365333f988fecc8533b24e506"
        },
        "downloads": -1,
        "filename": "torchvf-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4fad30f6f52dce5cd2e44fd54f34c4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 56102,
        "upload_time": "2022-09-02T00:14:53",
        "upload_time_iso_8601": "2022-09-02T00:14:53.319480Z",
        "url": "https://files.pythonhosted.org/packages/2c/be/660d7111cd30b9c42948661dc8f2d1fbd6e948d20eb5f0829afce4339bca/torchvf-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf80f6182839605984663023570da33db573b8eedc92808c095b8c0cb752d3aa",
          "md5": "9031e4fb6dc0d453cc7e6790e8e95a35",
          "sha256": "52890ebff6627cab0e774c4e78834309944bc026327d06474fd85a621cda80a9"
        },
        "downloads": -1,
        "filename": "torchvf-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9031e4fb6dc0d453cc7e6790e8e95a35",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 29304,
        "upload_time": "2022-09-02T00:14:55",
        "upload_time_iso_8601": "2022-09-02T00:14:55.308387Z",
        "url": "https://files.pythonhosted.org/packages/cf/80/f6182839605984663023570da33db573b8eedc92808c095b8c0cb752d3aa/torchvf-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2cbe660d7111cd30b9c42948661dc8f2d1fbd6e948d20eb5f0829afce4339bca",
        "md5": "c4fad30f6f52dce5cd2e44fd54f34c4e",
        "sha256": "bada9bc7b1a18284b9d3cb76054ae0ee2250b19365333f988fecc8533b24e506"
      },
      "downloads": -1,
      "filename": "torchvf-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c4fad30f6f52dce5cd2e44fd54f34c4e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 56102,
      "upload_time": "2022-09-02T00:14:53",
      "upload_time_iso_8601": "2022-09-02T00:14:53.319480Z",
      "url": "https://files.pythonhosted.org/packages/2c/be/660d7111cd30b9c42948661dc8f2d1fbd6e948d20eb5f0829afce4339bca/torchvf-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf80f6182839605984663023570da33db573b8eedc92808c095b8c0cb752d3aa",
        "md5": "9031e4fb6dc0d453cc7e6790e8e95a35",
        "sha256": "52890ebff6627cab0e774c4e78834309944bc026327d06474fd85a621cda80a9"
      },
      "downloads": -1,
      "filename": "torchvf-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9031e4fb6dc0d453cc7e6790e8e95a35",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 29304,
      "upload_time": "2022-09-02T00:14:55",
      "upload_time_iso_8601": "2022-09-02T00:14:55.308387Z",
      "url": "https://files.pythonhosted.org/packages/cf/80/f6182839605984663023570da33db573b8eedc92808c095b8c0cb752d3aa/torchvf-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}