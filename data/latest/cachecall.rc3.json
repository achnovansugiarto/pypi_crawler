{
  "info": {
    "author": "Igor Rodrigues Sousa Silva",
    "author_email": "igor.rodrigues.ss98@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Cachecall\n\n## Description\nA cache library for sync and async functions with ttl and expiration time.\n\n## Features\n- [Algorithm (FIFO)](#algorithm)\n- [TTL](#ttl-time-to-live)\n- [Expire Time](#exp)\n- [Cache groups](#cache-groups)\n- [Examples](#examples)\n    - [Cache regular (sync) functions](#cache-regular-sync-functions)\n    - [Cache async functions](#cache-async-functions)\n    - [Cache with max size](#cache-with-max-size)\n    - [Cache with ttl (time to live)](#cache-with-ttl-time-to-live)\n    - [Cache with expire time](#cache-with-expire-time)\n    - [Cache group](#cache-group)\n    - [Clean cache group](#clean-cache-group)\n    - [Keep cache ignoring some keys](#keep-cache-ignoring-some-keys)\n    - [Cache with memory max size](#cache-with-memory-max-size)\n    - [Access cache object](#access-cache-object)\n- [Documentation](#documentation)\n    - [Cache decorator](#cache-decorator)\n    - [Cache object](#cache-object)\n    - [Expire Time class](#expire-time-class)\n\n### Algorithm\nThe FIFO Algorithm is used to control the input and output of data for cache groups.\n\n### Cache groups\nBy default each function has its own cache group to keep the cached data separated. Is possible create a shared cache group between different functions or clear cache group using ```clear_cache(\"group_name\")```.\n\n### TTL (Time To Live)\nBy default the ```cache``` decorator has the ttl parameter to define *time to live* in seconds to expire the cached data.\n\n### Expire Time\nWith **cachecall.ExpireTime** is possible define a specific time to cached data expire every day. [Example here](#cache-with-expire-time).\n\n### Examples\n\n##### Cache regular (sync) functions\n\n```python\nfrom cachecall import cache\n\n@cache()\ndef func(x=None):\n    print(\"call\")\n    return 10\n```\n\n##### Cache async functions\n```python\nfrom cachecall import cache\n\n@cache()\nasync def afunc(x=None):\n    print(\"call\")\n    return 15\n\nawait afunc()\n```\n\n##### Cache with Max Size\n```python\nfrom cachecall import cache\n\n@cache(max_size_call=2)\ndef func(x):\n    print(\"call\")\n    return x\n\nfunc(\"a\") # Add value \"a\" in cache\nfunc(\"b\") # Add value \"b\" in cache\nfunc(\"c\") # Remove value \"a\" from cache and Add value \"c\"\nfunc(\"d\") # Remove value \"b\" from cache and Add value \"d\"\n```\n\n##### Cache with TTL (Time To Live)\n\n```python\nfrom cachecall import cache\n\n@cache(ttl=10)\ndef func(x=1):\n    print(\"call\")\n    return \"abc\"\n```\n\n- Each 10 seconds the cache for the function ```func``` will be expired.\n\n##### Cache with Expire Time\n\n```python\nfrom cachecall import cache, ExpireTime\n\n@cache(expire_time=ExpireTime(10, 15, 20))\ndef func(a=None):\n    print(\"call\")\n    return \"xyz\"\n```\n\n- Every day at 10:15:20 the value cached will expire.\n- If the ```ExpireTime(10, 15, 20)``` will defined before 10:15:20 in current day, the the data cached will expired in same day, but if ExpireTime will defined after the 10:15:20, the cached value will be expired in next day.\n- You can expire cache in several specific hours using a tuple of several ExpireTime.\n\n```python\n@cache(expire_time=(ExpireTime(6, 0, 0), ExpireTime(12, 0, 0), ExpireTime(18, 0, 0),))\ndef func(a):\n    ...\n```\n\n##### TTL with Expire Time\n\n```python\nfrom cachecall import cache, ExpireTime\n\n@cache(ttl=18000, expire_time=ExpireTime(6, 0, 0))\ndef func(a=None):\n    print(\"call\")\n    return \"xyz\"\n```\n- ```ttl``` and ```expire_time``` can be used together. In this example the cached data will expire each 5 hours and every day at 6:00:00.\n\n##### Cache group\n```python\nfrom cachecall import cache\n\n@cache(group_name='some_group_name')\ndef do_a(x=None):\n    print(\"call a\")\n    return \"xyz\"\n\n@cache(group_name='some_group_name')\ndef do_b(x=None):\n    print(\"call abc\")\n    return \"abc\"\n```\n\n- All the cached data will be stored inside a cache group called \"some_group_name\".\n- Even though you use many different functions with the same parameters inside the same cache group, all cached data are associated with your specific function.\n\n##### Clean cache group\n\n```python\nfrom cachecall import cache, clear_cache\n\n@cache(group_name='some_group_name')\ndef func(x=None):\n    print(\"call\")\n    return \"xyz\"\n\nclear_cache('some_group_name') # Clear all cached data inside some_group_name\n```\n\n#### Keep cache ignoring some keys\n\n```python\nfrom cachecall import cache\n\n@cache(ignore_keys=(\"y\"))\ndef func(x=1, y=None):\n    print(\"call\")\n    return x\n\nfunc(1, y=1) # Cache data\nfunc(1, y=2) # the y value is ignored and the cached data is returned\nfunc(1, y=12345) # the y value is ignored and the cached data is returned\nfunc(2, y=12345) # Add new data in cache\n```\n- When some parameter is defined in ignore keys tuple these parameter value is ignored in cache creation, and even though the value of this parameter is changed the data will be kept cached.\n- Currently this feature only works if the ignored parameters are used as named arguments.  \n\n#### Cache with memory max size\n```python\nfrom cachecall import cache, kb\nfake_lg1 = ''.join([str(val) for val in range(500)]) # sizeof: 1439 bytes\nfake_lg2 = '-'.join([str(val) for val in range(400)]) # sizeof: 1538 bytes\n\n@cache(max_size_mem=kb(2)) # defining a limit of usage memory for 2 kilobytes (2048 bytes)\ndef func(param):\n    print(\"call\")\n\n    if param == \"a\":\n        return fake_lg1\n\n    return fake_lg2\n\nfunc(\"a\") # Add fake_lg1 in cache\nfunc(\"a\") # Using cache\nfunc(\"b\") # Remove fake_lg1 from cache because of memory limit 2048 bytes and add fake_lg2\n```\n\n#### Access cache object\n\n```python\nfrom cachecall import cache\n\n@cache()\ndef func(x):\n    print('call')\n    return x\n\nfunc(1) # add in cache\nfunc(1) # Use cached data\nfunc(2) # add in cache\n\n# Access cached data\nfunc.cache.data # Cached data\n```\n- See more about [cache object](#cache-object).\n\n### Documentation\n\n#### Cache Decorator\n\n```python\nfrom cachecall import cache\n```\n\n##### Parameters\n- max_size_call: *Optional[int]*\n    - Number of values (or call to cached function) that will be stored in cache.\n    - If None the cache size will be unlimited.\n    - Default value is None.\n\n- group_name: *Optional[str]*\n    - Group name for cached data.\n    - Each function has their own cache group, but if you wish to use the same cached data for different functions just use the same *group_name* for these functions. \n    - If None the group name default will be \"function-name_uuid4\".\n    - Default value is None.\n\n- ttl: *Optional[Union[int, float]]*\n    - (Time To Live) Value in seconds to expire the cached data.\n    - If None the value never expires.\n    - Default value is None.\n\n- expire_time: *Optional[Union[ExpireTime, Tuple[ExpireTime]]]*\n    - Specific time to expire a cached value daily.\n    - You can use a tuple (or list) of ```ExpireTime``` objects for defining several specific times to expire data.\n    - If None the value never expires.\n    - Default value is None.\n\n- ignore_keys: *Optional[Tuple[str]]*\n    - Tuple of parameters name that will be ignored in cache. \n    - If some cached data exists and the value of some ignored_key is changed, the data will be continued cached because all arguments mapped in ignore_keys tuple will be ignored.\n    - Currently this feature only works if the ignored parameters are used as named arguments.\n    - *Observation*:\n        - Even though the cached function (function decorated by *cachecall.cache* decorator) no has any defined parameter the data of this function will be cached using a \"no-key\" key for identifying cached data.\n\n        - The ```ignore_keys``` have be used if your cached function (function decorated by *cachecall.cache* decorator) has at least two parameters or more, because, if your function has only one parameter and this parameter is defined in ignore_keys, that means that your function will cache data normally because the only defined parameter will be ignored. Therefore, using ```ignore_keys``` for cached functions with only one defined parameter and this only parameter name passed as value in *ignore_keys* will have no effect and the data will be cached normally.\n\n        - This behavior also will occur if you have many parameters and all parameters names are passed to ```ignore_keys```.\n\n- log_level: *Optional[Union[int, str]]*\n    - This parameter is useful for you to see some behaviors that's occurring in data caching.\n    - Default value is ```logging.WARNING```.\n\n- max_size_mem: *Optional[Union[int, float]]*\n    - Define a limit of memory usage in bytes for each cache group. All cached data always have a memory size less or equal to the value defined in max_size_mem.\n    - If a unique data has a size memory greater than the value defined in ```max_size_mem``` this value will not be cached. This operation will be logged as debug level.\n    - Default value is None. Thats mean that no exists memory limit for cache group.\n    - Functions for control cache unity:\n        - ```from cachecall import kb, mb, gb```\n        - ```kb(val)```: return the ```val``` value converted to bytes. For example: ```kb(1) = 1024```.\n        - ```mb(val)```: return the ```val``` value converted to bytes. For example: ```mb(1) = 1048576```.\n        - ```gb(val)```: return the ```val``` value converted to bytes. For example: ```gb(1) = 1073741824```.\n\n\n#### Cache object\n\n- This object is used to control the cache data.\n- Each cached function will have a cache object.\n- The goal in adding this method in the cached function is for debug purposes using ```func.cache.data```.\n- We recommend strongly that you won't handle any operation using this method so you do not cause any unexpected error.\n\n#### Expire Time class\n```python\nfrom cachecall import ExpireTime\n\n@dataclass\nclass ExpireTime:\n    hour: int\n    minute: int\n    second: int\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/igor-rodrigues-ss/cachecall",
    "keywords": "cache caching cachecall cached cache-memory",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cachecall",
    "package_url": "https://pypi.org/project/cachecall/",
    "platform": null,
    "project_url": "https://pypi.org/project/cachecall/",
    "project_urls": {
      "Homepage": "https://github.com/igor-rodrigues-ss/cachecall"
    },
    "release_url": "https://pypi.org/project/cachecall/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A cache library for sync and async functions with ttl and expiration time.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13633138,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bbe55f07945d2d261000fc771dc6c5a533f3d3ed63c909364006a8dcec1d08d",
          "md5": "bd100fca4e2f96252fe4205a8760c396",
          "sha256": "5886540b66759ad398fdecfb1a481b71ccf809ee302596802964a10585e304ae"
        },
        "downloads": -1,
        "filename": "cachecall-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd100fca4e2f96252fe4205a8760c396",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9147,
        "upload_time": "2022-04-22T11:32:18",
        "upload_time_iso_8601": "2022-04-22T11:32:18.501859Z",
        "url": "https://files.pythonhosted.org/packages/8b/be/55f07945d2d261000fc771dc6c5a533f3d3ed63c909364006a8dcec1d08d/cachecall-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c4c28ed32c9d8f651570868e2968af4d8e0a4467255f40c0d851d51164a55cd",
          "md5": "3df3c929e1100832c524eee65cc8d9bb",
          "sha256": "81d8e5705abc07ef899b929958d7376a1d8eb7ea38787421cc8610f3f23bd9ce"
        },
        "downloads": -1,
        "filename": "cachecall-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3df3c929e1100832c524eee65cc8d9bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9926,
        "upload_time": "2022-04-23T13:33:21",
        "upload_time_iso_8601": "2022-04-23T13:33:21.964931Z",
        "url": "https://files.pythonhosted.org/packages/2c/4c/28ed32c9d8f651570868e2968af4d8e0a4467255f40c0d851d51164a55cd/cachecall-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bc2cddfc20fef4f56ea9d52be228ecc75af32eb892ef31c5533d1998498949f",
          "md5": "ac604c5447966ae7be478c13ee064793",
          "sha256": "07a8f34eddfdd4795771883f1e0875dafb36446cd03f121bfcc566be55dbd58e"
        },
        "downloads": -1,
        "filename": "cachecall-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac604c5447966ae7be478c13ee064793",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 14596,
        "upload_time": "2022-04-26T23:43:29",
        "upload_time_iso_8601": "2022-04-26T23:43:29.533817Z",
        "url": "https://files.pythonhosted.org/packages/8b/c2/cddfc20fef4f56ea9d52be228ecc75af32eb892ef31c5533d1998498949f/cachecall-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8bc2cddfc20fef4f56ea9d52be228ecc75af32eb892ef31c5533d1998498949f",
        "md5": "ac604c5447966ae7be478c13ee064793",
        "sha256": "07a8f34eddfdd4795771883f1e0875dafb36446cd03f121bfcc566be55dbd58e"
      },
      "downloads": -1,
      "filename": "cachecall-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ac604c5447966ae7be478c13ee064793",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 14596,
      "upload_time": "2022-04-26T23:43:29",
      "upload_time_iso_8601": "2022-04-26T23:43:29.533817Z",
      "url": "https://files.pythonhosted.org/packages/8b/c2/cddfc20fef4f56ea9d52be228ecc75af32eb892ef31c5533d1998498949f/cachecall-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}