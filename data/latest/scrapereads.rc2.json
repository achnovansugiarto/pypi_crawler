{
  "info": {
    "author": "Arthur Dujardin",
    "author_email": "arthur.dujardin@ensg.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "[![](https://img.shields.io/readthedocs/scrape-goodreads)](https://scrape-goodreads.readthedocs.io/en/latest/index.html)\n[![](https://img.shields.io/pypi/v/scrapereads)](https://pypi.org/project/scrapereads/)\n![](https://img.shields.io/pypi/status/scrapereads)\n\n\n# scrape-goodreads\nPython package to scrape data from goodreads.com website. Authors, Books, and Quotes can be extracted.\n\n*Project made during a Deep Learning project for poem generation using GPT2 model.*\n\n\n# Installation\n\nInstall *scrapereads* package from *PyPi*:\n\n```\npip install scrapereads\n```\n\nOr from *GitHub*:\n\n```\ngit clone https://github.com/arthurdjn/scrape-goodreads\ncd scrape-goodreads\npip install .\n```\n\n# Getting Started\n\n## GoodReads API\n\nYou can search for ``Author``, ``Book`` or ``Quote`` from the API:\n\n```python\nfrom scrapereads import GoodReads\n\n# Connect to the API\ngoodreads = GoodReads()\n\n# Search for an author, from it's ID.\nAUTHOR_ID = 3389\nauthor = goodreads.search_author(AUTHOR_ID)\n# Search for a book\nBOOK_ID = 3048970\nbook = goodreads.search_book(AUTHOR_ID, BOOK_ID)\n# Look for the 10 first books (set it to ``top_k=None`` to turn it off)\nbooks = goodreads.search_books(AUTHOR_ID, top_k=10)\n# ...Or quotes\nquotes = goodreads.search_quotes(AUTHOR_ID, top_k=5)\n```\n\nQuotes are made of a text, but optional information can be added (like number of likes, tags,\nreference etc.)\n\n```python\nquotes = goodreads.search_quotes(AUTHOR_ID, top_k=5)\n\nfor quote in quotes:\n    print(quote)\n    print()\n```\nOutput:\n```pycon\n\"Books are a uniquely portable magic.\"\n- Stephen King, from \"On Writing: A Memoir Of The Craft\"\n  Likes: 16225, Tags: books, magic, reading\n\n\"If you don't have time to read, you don't have the time (or the tools) to write. Simple as that.\"\n- Stephen King\n  Likes: 12565, Tags: reading, writing\n\n\"Get busy living or get busy dying.\"\n- Stephen King, from \"Different Seasons\"\n  Likes: 9014, Tags: life\n\n\"Books are the perfect entertainment: no commercials, no batteries, hours of enjoyment for each dollar spent. What I wonder is why everybody doesn't carry a book around for those inevitable dead spots in life.\"\n- Stephen King\n  Likes: 8667, Tags: books\n\n\"When his life was ruined, his family killed, his farm destroyed, Job knelt down on the ground and yelled up to the heavens, \"Why god? Why me?\" and the thundering voice of God answered, There's just something about you that pisses me off.\"\n- Stephen King, from \"Storm Of The Century\"\n  Likes: 7686, Tags: god, humor, religion\n```\n\n## Structure\n\nThe package is divided as follows:\n\n* Author\n* Book, inherits from Author\n* Quote, inherits from Book\n\n\n## Retrieve data\n\n\nOnce you have one of these objects, you can also access data directly through their methods:\n\n```python\nauthor = goodreads.search_author(AUTHOR_ID)\nbooks = author.get_books()\nquotes = author.get_quotes()\n\n# Idem from an book\nbook = goodreads.search_book(AUTHOR_ID, BOOK_ID)\nquotes = book.get_quotes()\n```\n\n\nIn addition, you can retrieve parent objects from children:\n\n```python\nauthor = goodreads.search_author(AUTHOR_ID)\nquotes = author.get_quotes(top_k=10)\nquote = quotes[0]\n\n# Access to parent classes\nbook = quote.get_book()\nauthor = quote.get_author()\n```\n\nYou can scrape for description, links and other details information:\n\n```python\nauthor = goodreads.search_author(AUTHOR_ID)\ninfo = author.get_info()  # description of the author (genre, description, references etc.)\n```\n\nYou can finally retrieve similar authors from an author with:\n\n```python\nauthor = goodreads.search_author(AUTHOR_ID)\nauthors = author.get_similar_authors(top_k=5)\n```\n\n## Save and export\n\nYou can save data in a JSON format (and encode it to ASCII if you want).\n\n```python\nauthor = goodreads.search_author(AUTHOR_ID)\nauthor_data = author.to_json(encode='ascii')\n# Idem for book and quote\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/arthurdjn/scrape-goodreads",
    "keywords": "",
    "license": "MIT Licence",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scrapereads",
    "package_url": "https://pypi.org/project/scrapereads/",
    "platform": "",
    "project_url": "https://pypi.org/project/scrapereads/",
    "project_urls": {
      "Homepage": "https://github.com/arthurdjn/scrape-goodreads"
    },
    "release_url": "https://pypi.org/project/scrapereads/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Scrape books and quotes on GoodReads.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7303192,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca5113f47c629c0bd703e3f1cb0683d1685a35537d529b72aabeaf91e804ca7d",
          "md5": "101cd9bafa749ef62ee1cacd5b0d3ada",
          "sha256": "b1a91f381465b9a8a0fd3926de5f0ffa7a73496cb3a4a60460d7b881ddce039e"
        },
        "downloads": -1,
        "filename": "scrapereads-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "101cd9bafa749ef62ee1cacd5b0d3ada",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 225087,
        "upload_time": "2020-05-22T15:53:39",
        "upload_time_iso_8601": "2020-05-22T15:53:39.114863Z",
        "url": "https://files.pythonhosted.org/packages/ca/51/13f47c629c0bd703e3f1cb0683d1685a35537d529b72aabeaf91e804ca7d/scrapereads-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66e1e6ccd94b72461345ac8010d7a363aa19f6af114e67b3635f2702b0c21d70",
          "md5": "d9ddb6ab06e28c132018a22ab480fa52",
          "sha256": "9233789299a4af46c0e89c664f07e1995ef7418eae458ca14bb1bd1e5249bf0c"
        },
        "downloads": -1,
        "filename": "scrapereads-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d9ddb6ab06e28c132018a22ab480fa52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 226305,
        "upload_time": "2020-05-22T16:11:01",
        "upload_time_iso_8601": "2020-05-22T16:11:01.178943Z",
        "url": "https://files.pythonhosted.org/packages/66/e1/e6ccd94b72461345ac8010d7a363aa19f6af114e67b3635f2702b0c21d70/scrapereads-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66e1e6ccd94b72461345ac8010d7a363aa19f6af114e67b3635f2702b0c21d70",
        "md5": "d9ddb6ab06e28c132018a22ab480fa52",
        "sha256": "9233789299a4af46c0e89c664f07e1995ef7418eae458ca14bb1bd1e5249bf0c"
      },
      "downloads": -1,
      "filename": "scrapereads-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d9ddb6ab06e28c132018a22ab480fa52",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 226305,
      "upload_time": "2020-05-22T16:11:01",
      "upload_time_iso_8601": "2020-05-22T16:11:01.178943Z",
      "url": "https://files.pythonhosted.org/packages/66/e1/e6ccd94b72461345ac8010d7a363aa19f6af114e67b3635f2702b0c21d70/scrapereads-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}