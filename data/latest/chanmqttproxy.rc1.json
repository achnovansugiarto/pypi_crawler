{
  "info": {
    "author": "David Greaves",
    "author_email": "david@dgreaves.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# channels-mqtt-proxy\n\nA Channels 3 compatible MQTT worker\n\nThis worker is a standard Channels Consumer which contains a\nfully async MQTT server allowing channels messages to be used to\npublish, subscribe to and receive MQTT messages\n\nThe proxy understands mqtt.subscribe and mqtt.publish so you can\nchange the topics dynamically.\n\nWhen an MQTT subscribe is performed it is done on behalf of a channels\ngroup and all Channels Consumers in that group will receive mqtt\nmessages as mqtt.message\n\nThe overview is :\n\nMQTT <> Channels-MQTT-Proxy (in runworker) <> Redis/Channels-layer <> ASGI applications (in Daphne/runserver) <> Websockets/HTTP <> Browser\n\n\n## Installation\n\n```bash\npip install chanmqttproxy\n```\n## Usage\n\nIn Channels the asgi application handles all types of connection\nrouting.  Websocket and http connections are listened for by a\nsuitable server (eg daphne run by manage.py runserver) which will\ninstantiate classes and run objects to handle them. The 'mqtt'\nConsumer does not accept incoming connections, just channel\nmessages. So it must be started as a worker which handles the Channel\nmessages; the MQTT client connection is then created inside the\nMqttConsumer worker when the first channel message is received.\n\n## Setup\n\nThe code may look familiar if you've used the Channels\n[Chat tutorial](https://channels.readthedocs.io/en/stable/tutorial/index.html) :)\n\nIn fact it will add the ability to monitor the chat on the chat/<room>\nMQTT channel and messages sent to that channel will appear on all\nclients.\n\n\nIn `site/asgi.py`:\n\n```python\n\tfrom chanmqttproxy import MqttConsumer\n\tfrom channels.routing import ChannelNameRouter\n\t\n\tapplication = ProtocolTypeRouter({\n\t\t\"channel\": ChannelNameRouter({\n\t\t\t\"mqtt\": MqttConsumer.as_asgi()\n\t\t}),\n\t\t... # rest of http/websocket routes\n\t})\n```\nTo define the MQTT broker, in `site/settings.py`:\n\n```python\n# Local mqtt settings\nMQTT_HOST = \"mqtt.example.com\"\nMQTT_USER = \"mqtt-test\"\nMQTT_PASSWORD = \"mqtt-test\"\nMQTT_VERSION = 311  # defaults to 50\n```\n\nAt this point you have a working async Channels/MQTT bridge\n\nTo subscribe to a topic in your AsyncConsumer\n\n```python\n    async def connect(self):\n        ... # existing group_add() calls\n\n        # Join mqtt group\n        await self.channel_layer.group_add(\n            \"mqttgroup\",\n            self.channel_name\n        )\n        # Ensure MQTT messages come to the room\n        # This simplistic approach subscribes the room every\n        # time a websocket connects but that's OK\n        await self.channel_layer.send(\n            \"mqtt\",\n            {\n                \"type\": \"mqtt_subscribe\",\n                \"topic\": f\"chat/{self.room_name}\",\n                \"group\": \"mqttgroup\",\n        })\n\n        await self.accept()  # existing accept() call\n```\nTo handle messages from a topic in your AsyncConsumer\n\n```python\n    # Receive message from mqtt group and send to websocket\n    async def mqtt_message(self, event):\n        message = event['message']\n        topic = messagep[\"topic\"]\n        payload = messagep[\"payload\"]\n\n        # Send message to WebSocket\n        await self.send(text_data=json.dumps({\n            'message': payload\n        }))\n```\nTo publish messages to a topic in your AsyncConsumer\n\n```python\n   # Receive message from WebSocket\n    async def receive(self, text_data):\n\n        ... # existing group_send etc\n\n        # Publish on mqtt too\n        await self.channel_layer.send(\n            \"mqtt\",\n            {\n                \"type\": \"mqtt_publish\",\n                \"publish\": {  # These form the kwargs for mqtt.publish\n                    \"topic\":  f\"chat/{self.room_name}_out\",\n                    \"payload\": message,\n                    \"qos\": 2,\n                    \"retain\": False,\n                    }\n        })\n```\n\nFor debug logging I use this at the end of settings.py:\n\n```python\nimport logging.config\n\nLOGGING_CONFIG = None\n\nlogging.config.dictConfig({\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'console': {\n            # exact format is not important, this is the minimum information\n            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',\n        },\n    },\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n            'formatter': 'console',\n        },\n    },\n    'loggers': {\n    # root logger\n        'chanmqttproxy': {\n            'level': 'DEBUG',\n            'handlers': ['console'],\n        },\n        'mysite': {\n            'level': 'DEBUG',\n            'handlers': ['console'],\n        },\n        'chat': {\n            'level': 'DEBUG',\n            'handlers': ['console'],\n        },\n    },\n})\n```\n\nThe complete code for the Channels Chat tutorial application (up to\npart 3) with the channels-mqtt-proxy additions is here:\nhttps://github.com/lbt/channels-mqtt-proxy/tree/main/examples\n\n## Usage\n\nNow run both of these (in different consoles)\n\n```\n./manage.py runserver\n./manage.py runworker mqtt\n```\n\nUse your mqtt listener to listen to the topic `chat/lobby_out` and\npublish to the topic `chat/lobby`\n\nNotice that if you use chat/<room> for both topics then when the proxy\nclient publishes to the MQTT topic the message appears twice. This is\nbecause even if you're the one that publishes a message, if you're\nsubscribed to the topic, you will receive it too.\n\nIf you make changes to the code note that the Channels runworker does\nnot auto-reload and will still hold old subscribe/group information.\n\n\n# TODO/Issues\n\n## Connect to MQTT at startup\nThe MqttConsumer is only instantiated after the first message arrives\nrather than when the worker starts. This means it may not be connected\nso the await self.mqttproxy.connected.wait() is required on every\nsubscribe/publish (which is not a lot of overhead but...\n\n## Unsubscribing and no-more-clients\nIt's not clear how to issue an unsubscribe or deal with all clients\ndisconnecting. If this is done in the AsyncConsumer disconnect() then\nit needs a client-count which is probably unreliable. Currently MQTT\nmessages will always be sent to the Channels group and it handles\nmember timeout as per\nhttps://channels.readthedocs.io/en/stable/channel_layer_spec.html#capacity\nand\nhttps://channels.readthedocs.io/en/stable/channel_layer_spec.html#persistence\n\n## retain'ed messages\nOn initial subscribtion all retained messages are dropped.  This is\nnot ideal when retained messages are used to indicate 'last known\nstate' for clients.\n\nHowever this is an MQTT concept and doesn't carry over to Channels\nunless we handle retention and continue to store messages for each\nChannel client that subscribes - and then somehow only send retained\nmessages to that new client and not the existing clients who've seen\nthem once..\n\nIdeally there would be a mechanism for the app to pre-subscribe and\nsend retained (and new) messages to code that could update the\n'current state' model which would then be maintained and used to\ninitialise new browser clients.\n\n## MqttConsumer in worker doesn't exit\nThere doesn't seem to be a way to tell the worker to exit on Ctrl-C if\nwe trap it to clean up the MQTT connections.  Also note that in some\nsituations the Ctrl-C fails. Eg if the broker doesn't support V5.0 and\nfallback to V311 is underway.\n\n# Thanks\nThanks to Gurtam for https://github.com/wialon/gmqtt which is a great asyncio\nMQTT client that I use extensively in my HA systems and integrate with PyQt too.\n\nThe Channels tutorial was really helpful in understanding the concepts.\n\nAlso to Xavier Lesa for https://github.com/xavierlesa/channels-asgi-mqtt which\nis based on the paho-mqtt synchronous library and inspired me to write this.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lbt/channels-mqtt-proxy",
    "keywords": "",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chanmqttproxy",
    "package_url": "https://pypi.org/project/chanmqttproxy/",
    "platform": "",
    "project_url": "https://pypi.org/project/chanmqttproxy/",
    "project_urls": {
      "Homepage": "https://github.com/lbt/channels-mqtt-proxy"
    },
    "release_url": "https://pypi.org/project/chanmqttproxy/0.1/",
    "requires_dist": [
      "gmqtt"
    ],
    "requires_python": "",
    "summary": "Channels Worker providing async (qmqtt) MQTT proxy",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12521343,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5039496c12e8c3737fc36b8ab50ba004261f3e36b37eccaf81dc68ac554c41a0",
          "md5": "a185ffcfc0c5aece76b2771cc79d86e3",
          "sha256": "812226edafe8b3e3378f065326b43132c52cbacbfd85d69bf355563914f2d51e"
        },
        "downloads": -1,
        "filename": "chanmqttproxy-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a185ffcfc0c5aece76b2771cc79d86e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20755,
        "upload_time": "2022-01-09T18:51:20",
        "upload_time_iso_8601": "2022-01-09T18:51:20.246011Z",
        "url": "https://files.pythonhosted.org/packages/50/39/496c12e8c3737fc36b8ab50ba004261f3e36b37eccaf81dc68ac554c41a0/chanmqttproxy-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a57ae3634525978406064c05f1396c212e2465bb5f80cbde38c76e65dbef43f9",
          "md5": "e0863d2fc045fd74fbd8d14f6654d563",
          "sha256": "b040f68e32638d35b560891df7be35a7638ed56ce464ddf78823715260c67b4e"
        },
        "downloads": -1,
        "filename": "chanmqttproxy-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e0863d2fc045fd74fbd8d14f6654d563",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20162,
        "upload_time": "2022-01-09T18:51:23",
        "upload_time_iso_8601": "2022-01-09T18:51:23.452353Z",
        "url": "https://files.pythonhosted.org/packages/a5/7a/e3634525978406064c05f1396c212e2465bb5f80cbde38c76e65dbef43f9/chanmqttproxy-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5039496c12e8c3737fc36b8ab50ba004261f3e36b37eccaf81dc68ac554c41a0",
        "md5": "a185ffcfc0c5aece76b2771cc79d86e3",
        "sha256": "812226edafe8b3e3378f065326b43132c52cbacbfd85d69bf355563914f2d51e"
      },
      "downloads": -1,
      "filename": "chanmqttproxy-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a185ffcfc0c5aece76b2771cc79d86e3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20755,
      "upload_time": "2022-01-09T18:51:20",
      "upload_time_iso_8601": "2022-01-09T18:51:20.246011Z",
      "url": "https://files.pythonhosted.org/packages/50/39/496c12e8c3737fc36b8ab50ba004261f3e36b37eccaf81dc68ac554c41a0/chanmqttproxy-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a57ae3634525978406064c05f1396c212e2465bb5f80cbde38c76e65dbef43f9",
        "md5": "e0863d2fc045fd74fbd8d14f6654d563",
        "sha256": "b040f68e32638d35b560891df7be35a7638ed56ce464ddf78823715260c67b4e"
      },
      "downloads": -1,
      "filename": "chanmqttproxy-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e0863d2fc045fd74fbd8d14f6654d563",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20162,
      "upload_time": "2022-01-09T18:51:23",
      "upload_time_iso_8601": "2022-01-09T18:51:23.452353Z",
      "url": "https://files.pythonhosted.org/packages/a5/7a/e3634525978406064c05f1396c212e2465bb5f80cbde38c76e65dbef43f9/chanmqttproxy-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}