{
  "info": {
    "author": "José Manuel Gómez Soriano",
    "author_email": "jmgomez.soriano@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pyplaceholder\nA placeholder detector in text or in text files and other placeholder utilities. \nA placeholder is a piece of text delimited by some symbols\n\n* [Detect the placeholders](#detect-the-placeholders)\n* [Replace text placeholders](#replace-text-placeholders)\n* [Check if there are placeholders](#check-if-there-are-placeholders)\n* [Count placeholders](#count-placeholders)\n* [Get the placeholder contents](#get_placeholder_contents)\n\n# Detect the placeholders<a id=\"detect-the-placeholders\" name=\"detect-the-placeholders\"></a>\n\nTo detect the placeholder positions of a given text you can use the parse_placeholders() function:\n\n```python\ndef parse_placeholders(text: str,\n                       open_ch: str = '{',\n                       close_ch: str = '}',\n                       escapes: bool = True) -> Tuple[str, List[Tuple[int, int]]]:\n```\n\nWhere _text_ is the text with placeholders to detect;\n_open_ch_ is the initial symbol of the placeholder and _close_ch_ is the final one;\n_escapes_ if True if you want that the escaped character '\\' should be escaped in the final returned text.\nThis function returns a tuple with the parsed text without escape characters,\nand a list of positions with the initial and end position of each placeholder in that text.\n\nFor example, if you have a text like the following: \n\n```python\ns = 'Some example of {term} \\\\{UN\\\\}'\n```\n\nIf you want to detect the {terms} but not {UN} because it is escaped with \\\\, then you need to execute:\n\n```python\nfrom placeholder import parse_placeholders\ns = 'Some example of {term} \\\\{UN\\\\}'\nparse_placeholders(s)\n```\n\nTherefore, it will return the following results:\n\n```python\n('Some example of {term} {UN}', [(16, 22)])\n```\n\nWhere, here, the placeholder is {terms}. The placeholder has to be delimited by just one character, but not more.\nThe placeholder delimiters can be changed by using the parameters **open_ch** and **close_ch**:\n\n```python\nfrom placeholder import parse_placeholders\ns = 'Some example of <term> {UN}'\nparse_placeholders(s, '<', '>')\n```\n\nThe result will be similar, and now we do not need to escape the characters {} for {UN} because we have changed the\ndefault delimiters:\n\n\n```python\n('Some example of <term> {UN}', [(16, 22)])\n```\n\nIn this case the placeholder is &lt;term&gt;.\n\nFinally, you can detect the placeholders from a text without parse the escape characters changing the parameter \n**escapes**.\n\nIf there are more than one placeholders, the results will be a list of positions.\nFor example:\n\n```python\nfrom placeholder import parse_placeholders\ns = 'Some example of {term} {UN}'\nparse_placeholders(s)\n```\n\nThe output will be:\n\n```python\n('Some example of {term} {UN}', [(16, 22), (23, 27)])\n```\n\nIn this case, it detects both placeholders because the second one was not escaped with \\\\.\n\n# Replace text placeholders<a id=\"replace-text-placeholders\" name=\"replace-text-placeholders\"></a>\nWith this module you can replace the placeholders using **replace_placeholders()** or **replace_file_placeholders()**.\nThe first one is to work with a string value and the second one to replace in a text file.\n\nThe syntax of the **replace_placeholders()** function is:\n\n```python\ndef replace_placeholders(text: str,\n                         open_ch: str = '{',\n                         close_ch: str = '}',\n                         escapes: bool = True,\n                         **kwargs) -> str:\n```\n\nWhere _text_ is the text with placeholders to detect;\n_open_ch_ is the initial symbol of the placeholder and _close_ch_ is the final one;\n_escapes_ if True if you want that the escaped character '\\' should be escaped in the final returned text;\nand, finally, _kwargs_ are the value of the text placeholders. \nThe result of executing this functions will be the same string as the input but with the placeholders \nreplaced by they related values.\nFor example:\n\n\n```python\nfrom placeholder import replace_placeholders\ns = 'Some example of {term} \\\\{UN\\\\}'\nprint(replace_placeholders(s, term='United Nations'))\n```\n\nIt will replace the placeholder '{term}' by the text \"United Nations\".\nTherefore, the result will be:\n\n```text\nSome example of United Nations {UN}\n```\n\nThe syntax of **replace_file_placeholders()** is very similar:\n\n```python\ndef replace_file_placeholders(input_file: Union[str, PathLike, bytes],\n                              output_file: [str, PathLike, bytes],\n                              open_ch: str = '{',\n                              close_ch: str = '}',\n                              escapes: bool = True,\n                              **kwargs) -> None:\n```\n\nHowever, this function uses an input and output files instead a string. \nFor example, if we have the following test.txt file:\n\n```text\nThis is a test with {num} placeholders to {action} the functions to parse \\{placeholders\\}.\nOther line without placeholders.\n```\n\nAnd we execute the following:\n\n```python\nfrom placeholder import replace_file_placeholders\n\nreplace_file_placeholders('test.txt', 'test2.txt', num=2, action='test')\n```\n\nThis will generate a output file 'test2.txt' with the following content:\n\n```text\nThis is a test with 2 placeholders to test the functions to parse {placeholders}.\nOther line without placeholders.\n```\n\n# Check if there are placeholders<a id=\"check-if-there-are-placeholders\" name=\"check-if-there-are-placeholders\"></a>\nIt is possible to use **has_placeholders()** function to check if a text has placeholders or not:\n\n```python\ndef has_placeholders(text: str, open_ch: str = '{', close_ch: str = '}') -> bool:\n```\n\nWhere _text_ is the text with placeholders to detect;\n_open_ch_ is the initial symbol of the placeholder and _close_ch_ is the final one.\nThis function returns True if there is any placeholder delimited by those characters.\nFor example:\n\n```python\nfrom placeholder import has_placeholders\ns = 'Some example of {term} \\\\{UN\\\\}'\nhas_placeholders(s)  # Return True\ns = 'Some example of {term} {UN}'\nhas_placeholders(s)  # Return True\ns = 'Some example of \\\\{term\\\\} \\\\{UN\\\\}'\nhas_placeholders(s)  # Return False\ns = 'Some example of term UN'\nhas_placeholders(s)  # Return False\n```\n\n# Count placeholders<a id=\"count-placeholders\" name=\"count-placeholders\"></a>\nCount the number of placeholders of a string.\n\n```python\ndef num_placeholders(text: str, open_ch: str = '{', close_ch: str = '}') -> int: \n```\n\nWhere _text_ is the text with placeholders to detect;\n_open_ch_ is the initial symbol of the placeholder and _close_ch_ is the final one.\nThis function will return the number of detected placeholders delimited by those characters.\nFor example:\n\n```python\nfrom placeholder import num_placeholders\n\ns = 'Some example of {term} \\\\{UN\\\\}'\nnum_placeholders(s)  # Returns 1\ns = 'Some example of {term} {UN}'\nnum_placeholders(s)  # Returns 2\ns = 'Some example of \\\\{term\\\\} \\\\{UN\\\\}'\nnum_placeholders(s)  # Returns 0\ns = 'Some example of term UN'\nnum_placeholders(s)  # Returns 0\n```\n\n# Get the placeholder contents<a id=\"get_placeholder_contents\" name=\"get_placeholder_contents\"></a>\nWe have two functions to get the placeholder content: \n**get_placeholders()**, **get_placeholder()**, **get_file_placeholders()**, **get_file_placeholder()**.\nThe first one obtains a list with all the placeholder values in the input string.\nThe second one get only one specific placeholder.\nThe other two functions are the equivalent ones but using a file text instead a string as input. \n\nThe definition of the first is:\n\n```python\ndef get_placeholders(text: str,\n                     open_ch: str = '{',\n                     close_ch: str = '}',\n                     type: Union[Callable, List[Callable]] = str) -> List[Any]:\n```\n\nWhere _text_ is the text with placeholders to detect;\n_open_ch_ is the initial symbol of the placeholder and _close_ch_ is the final one;\nand _type_ is the type or types to convert the placeholder values.\nThis function returns a list of values with each placeholder value.\nFor example:\n\n```python\nfrom placeholder import get_placeholders\ns = 'Some example of {term} \\\\{UN\\\\}'\nget_placeholders(s)  # This returns ['term']\ns = 'Some example of {term} {UN}'\nget_placeholders(s)  # This returns ['term', 'UN']\ns = 'Some example of {1} and {2}'\nget_placeholders(s)  # This returns ['1', '2']\nget_placeholders(s, type=int)  # This returns [1, 2]\ns = 'Some example of {1} and {term}'\nget_placeholders(s, type=[int, str])  # This rturns [1, 'term']\n```\n\nThe function **get_placeholder()** is very similar but only returns one placeholder. \nBy default, it returns the first one. Its syntax is:\n\n```python\ndef get_placeholder(text: str,\n                    open_ch: str = '{',\n                    close_ch: str = '}',\n                    type: Callable = str,\n                    pos: int = 0) -> Any:\n```\n\nWhere _type_, in this case, has just one value and _pos_ is the position of the placeholder.\nFor example:\n\n```python\nfrom placeholder import get_placeholder\n\ns = 'Some example of {term} \\\\{UN\\\\}'\nget_placeholder(s)  # This returns 'term'\ns = 'Some example of {term} {UN}'\nget_placeholder(s)  # This returns 'term'\nget_placeholder(s, pos=1)  # This returns 'UN'\ns = 'Some example of {1} and {2}'\nget_placeholder(s)  # This returns '1'\nget_placeholder(s, type=int)  # This returns 1\nget_placeholder(s, type=int, pos=1)  # This returns 2\n```\n\nThe function **get_file_placeholders()** and **get_placeholder()** have the following signature:\n\n```python\ndef get_file_placeholders(file: Union[str, PathLike, bytes],\n                          open_ch: str = '{',\n                          close_ch: str = '}',\n                          type: Callable = str) -> List[Any]:\n\ndef get_file_placeholder(file: Union[str, PathLike, bytes],\n                         open_ch: str = '{',\n                         close_ch: str = '}',\n                         type: Callable = str,\n                         pos: int = 0) -> Any:\n```\n\nWith _file_ to the file path instead of the string.\nThe first one return the list with the content of all the placeholders delimited by those characters, and\nthe other one returns only one placeholder in that position.\nFor example, if we have the following test.txt file:\n\n```text\nThis is a test with {num} placeholders to {action} the functions to parse \\{placeholders\\}.\nOther line without placeholders.\n```\n\nWe can execute the following:\n\n```python\nfrom placeholder import get_file_placeholders, get_file_placeholder\n\nget_file_placeholders('test.txt')  # Returns ['num', 'action']\nget_file_placeholder('test.txt')  # Returns 'num'\nget_file_placeholder('test.txt', pos=0)  # Returns 'num'\nget_file_placeholder('test.txt', pos=-1)  # Returns 'action'\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jmgomezsoriano/pyplaceholder",
    "keywords": "",
    "license": "LGPL v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyplaceholder",
    "package_url": "https://pypi.org/project/pyplaceholder/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyplaceholder/",
    "project_urls": {
      "Homepage": "https://github.com/jmgomezsoriano/pyplaceholder"
    },
    "release_url": "https://pypi.org/project/pyplaceholder/0.0.7/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A placeholder detector in text or in text files",
    "version": "0.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13330199,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4dd05132cf009893f5a0862d42f6e0dab923a79fa7e94091074ad96eed4eef5",
          "md5": "691bce87e46a8163c26acb9b20997fcc",
          "sha256": "38c9dc002d773398f581bc745175097b9b0c2aca542ce000be5b0d642d9b3bc8"
        },
        "downloads": -1,
        "filename": "pyplaceholder-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "691bce87e46a8163c26acb9b20997fcc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16064,
        "upload_time": "2021-04-12T12:56:48",
        "upload_time_iso_8601": "2021-04-12T12:56:48.653018Z",
        "url": "https://files.pythonhosted.org/packages/d4/dd/05132cf009893f5a0862d42f6e0dab923a79fa7e94091074ad96eed4eef5/pyplaceholder-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc5a2192b58bb0f1c8081bab7a48a01f542497808a80a4eeb7054946953bdfa9",
          "md5": "4323ceebb139a50ca90141122d2e7f0a",
          "sha256": "d03c3da63a7913a3c33c85cda56e94b680e8f5c1f61b97865e8b581c9d5a902c"
        },
        "downloads": -1,
        "filename": "pyplaceholder-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4323ceebb139a50ca90141122d2e7f0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16069,
        "upload_time": "2021-11-08T18:26:14",
        "upload_time_iso_8601": "2021-11-08T18:26:14.202006Z",
        "url": "https://files.pythonhosted.org/packages/bc/5a/2192b58bb0f1c8081bab7a48a01f542497808a80a4eeb7054946953bdfa9/pyplaceholder-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35ade97c7884a8956df8ae441fc113e38d86934a8f84c24445f620b742954553",
          "md5": "ca18b8ab06104b1a2705e91c8f2a9712",
          "sha256": "f8b40449ea4015b9d935bc8a5e0afd916cf6a6740801a7463e7803f27b7a88ea"
        },
        "downloads": -1,
        "filename": "pyplaceholder-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ca18b8ab06104b1a2705e91c8f2a9712",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20351,
        "upload_time": "2022-03-25T16:31:48",
        "upload_time_iso_8601": "2022-03-25T16:31:48.558574Z",
        "url": "https://files.pythonhosted.org/packages/35/ad/e97c7884a8956df8ae441fc113e38d86934a8f84c24445f620b742954553/pyplaceholder-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3af9030e0de6a10f8432c8123d4e7d60e0840179927587279373d6993335598",
          "md5": "196fe6e8768f53160a467cb2cc02d7de",
          "sha256": "deac4cd614f3dd48b9ac27138a5701719ccfc8f53b74dad4645aaa2f732203e3"
        },
        "downloads": -1,
        "filename": "pyplaceholder-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "196fe6e8768f53160a467cb2cc02d7de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20506,
        "upload_time": "2022-03-28T08:35:28",
        "upload_time_iso_8601": "2022-03-28T08:35:28.456341Z",
        "url": "https://files.pythonhosted.org/packages/d3/af/9030e0de6a10f8432c8123d4e7d60e0840179927587279373d6993335598/pyplaceholder-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a75cbb217f201c8af05b278e183fe494dba82848f9ef58f32a6915b325dfe92",
          "md5": "a38c8c518aa96b1f93c24b5a679a0c95",
          "sha256": "0a822c7915369d79212068dc0778f14abf6ed27681f359e67fe5584dc1d71f66"
        },
        "downloads": -1,
        "filename": "pyplaceholder-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a38c8c518aa96b1f93c24b5a679a0c95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20605,
        "upload_time": "2022-03-28T08:51:59",
        "upload_time_iso_8601": "2022-03-28T08:51:59.341956Z",
        "url": "https://files.pythonhosted.org/packages/5a/75/cbb217f201c8af05b278e183fe494dba82848f9ef58f32a6915b325dfe92/pyplaceholder-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bd5b7b7937f0b71da000290f30778aa10a68df8f2d96e49105c20a02c8c8d55",
          "md5": "0b6ccfc1269a16bae00ac9a1d185c7b7",
          "sha256": "0bf2ecf29ba8f59fba2786b7e90327f316cd3e97573f9b03f6e0db4aa9431bce"
        },
        "downloads": -1,
        "filename": "pyplaceholder-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "0b6ccfc1269a16bae00ac9a1d185c7b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20670,
        "upload_time": "2022-03-29T07:24:03",
        "upload_time_iso_8601": "2022-03-29T07:24:03.606221Z",
        "url": "https://files.pythonhosted.org/packages/6b/d5/b7b7937f0b71da000290f30778aa10a68df8f2d96e49105c20a02c8c8d55/pyplaceholder-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6bd5b7b7937f0b71da000290f30778aa10a68df8f2d96e49105c20a02c8c8d55",
        "md5": "0b6ccfc1269a16bae00ac9a1d185c7b7",
        "sha256": "0bf2ecf29ba8f59fba2786b7e90327f316cd3e97573f9b03f6e0db4aa9431bce"
      },
      "downloads": -1,
      "filename": "pyplaceholder-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "0b6ccfc1269a16bae00ac9a1d185c7b7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 20670,
      "upload_time": "2022-03-29T07:24:03",
      "upload_time_iso_8601": "2022-03-29T07:24:03.606221Z",
      "url": "https://files.pythonhosted.org/packages/6b/d5/b7b7937f0b71da000290f30778aa10a68df8f2d96e49105c20a02c8c8d55/pyplaceholder-0.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}