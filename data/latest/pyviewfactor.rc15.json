{
  "info": {
    "author": "Mateusz BOGDAN, Edouard WALTHER, Marc ALECIAN, Mina CHAPON",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PyViewFactor\n [![Latest Release](https://gitlab.com/arep-dev/pyViewFactor/-/badges/release.svg)](https://gitlab.com/arep-dev/pyViewFactor/-/releases) \n [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n [![Pypi Version](https://img.shields.io/pypi/v/pyviewfactor)](https://pypi.org/project/pyviewfactor/)\n [![Pypi Downloads](https://img.shields.io/pypi/dm/pyviewfactor.svg?label=pypi%20downloads)](https://pypi.org/project/pyviewfactor/)\n \nA python library to compute exact view factors between planar faces ([Documentation](https://arep-dev.gitlab.io/pyViewFactor/)).\n\nThis code computes the radiation view factor between polygons using the double contour integral method described in [(Mazumder and Ravishankar 2012)](https://www.academia.edu/download/77459051/Viewfactor_paper_IJHMT.pdf) and [(Schmid 2016)](https://hal.archives-ouvertes.fr/tel-01734545/).\n\nIt uses the handy [Pyvista](https://docs.pyvista.org/) package to deal with geometrical aspects of such problems. \n\n##  How does it work?\n\n- [x] Use [pyvista](https://docs.pyvista.org/index.html) to import your geometry (*.stl, *.vtk, *.obj, ...) or alternately draw it with the same package.\n- [x] Optionally check that the faces can \"see\" each other with `get_visibility(face1, face2)`\n- [x] Optionally check that no obstruction lies between them `get_visibility_obstruction(face1, face2, obstacle)`\n- [x] Compute the view factor from `face2` to `face1` with `compute_view_factor(face1, face2)`: Done!\n\n##  Minimum working example : facet to facet view factor computation \n\nSuppose we want to compute the radiation view factor between a triangle and a rectangle.\n\n<img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/64e19ed126bbfd1bc2bff1197b1dee23d35c7836/img/mwe.png?raw=true\" alt=\"Triangle and rectangle configuration\" width=\"260\"/>\n\n\nYou are now 18 lines of code away from your first view factor computation:\n\n```python\nimport pyvista as pv\nimport pyviewfactor as pvf\n\n# first define a rectangle...\npointa = [1, 0, 0] \npointb = [1, 1, 0]\npointc = [0, 1, 0]\npointd = [0, 0, 0]\nrectangle = pv.Rectangle([pointa, pointb, pointc, pointd])\n\n# ... then a triangle\npointa = [1, 0, 1] \npointb = [1, 1, 1]\npointc = [0, 1, 1]\nliste_pts = [pointa, pointb, pointc]\nliste_pts.reverse() # let us put the normal the other way around (facing the rectangle)\ntriangle = pv.Triangle(liste_pts) # ... done with geometry.\n\n# preliminary check for visibility\nif pvf.get_visibility(rectangle , triangle):\n    F = pvf.compute_viewfactor(rectangle, triangle)\n    print(\"View factor from triangle to rectangle = \", F)\nelse:\n    print(\"Not facing each other\")\n```\n\nYou usually get your geometry from a different format? (*.idf, *.dat, ...)\n\nCheck pyvista's documentation on [how to generate a PolyData facet from points](https://docs.pyvista.org/examples/00-load/create-poly.html).\n\n## Example with a closed geometry and the VTK file format\n\nWe will now compute the view factors within a more complex geometry: a  closed sphere (clipped in half below), with inwards facing normals, so the faces can \"see\" each other. Note that the face-to-face visibility is unobstructed (for obstructed geometries, see next section).\n\nThe field of view factors from one facet to all others will be computed and stored in a VTK file, which you can explore with the open source [Paraview software](https://www.paraview.org/download/).\n\n<img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/73249e2093b207d5030d9b6637603c4b77b2374c/img/demi_sphere.png?raw=true\" alt=\"Sphere\" width=\"350\"/>\n\nFollowing snippet can be reused as a kick-start for your own purposes:\n```python\nimport pyvista as pv\nimport numpy as np\nfrom pyviewfactor import  compute_viewfactor, fc_unstruc2poly # viewfactor + a useful conversion function\nfrom tqdm import tqdm # for a fancy progress bar\n\n# create a raw sphere with pyvista\nsphere = pv.Sphere(radius=50, center=(0, 0, 0), direction=(0, 0, 1),\n                 theta_resolution=9, phi_resolution=9)\n# and put the normals inwards please\nsphere.flip_normals()\n\n# let us chose a cell to compute view factors from\nchosen_face = sphere.extract_cells(10)\n# convert the face from UnstructuredGrid to PolyData\nchosen_face = fc_unstruc2poly(chosen_face)\n# \"one array to contain them all\" -> the results will be stored there\nF = np.zeros(sphere.n_cells) \n\n# now let us compute the view factor to all other faces\n# (with a fancy progress bar, iterating over the mesh's faces)\nfor i in tqdm(range(sphere.n_cells), total=sphere.n_cells):\n    face = sphere.extract_cells(i) # other facet\n    face = fc_unstruc2poly(face) # convert to PolyData\n    F[i] = compute_viewfactor(face, chosen_face) # compute VF\n\nprint(\"Complementarity check: \\n (e.g. is \\sum_{i=0}^n F_i =? 1)\", np.sum(F))\n\n# put the scalar values in the geometry\nsphere.cell_data[\"F\"] = F\nsphere.save(\"./sphere.vtk\") # ... and save.\n\n# let us have a look in 3D with an interactive window...\np=pv.Plotter() # instantiate 3D window\np.add_mesh(sphere, scalars='F', cmap='jet') # add mesh with a nice color scheme\np.show() # plot\n```\nThe results look as per following images showing the view factor from the chosen cell to all others.\n\n<img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/3ac896fe2f420443c7c96eaa9dbbb955474e80d5/img/F_sphere.png?raw=true\" alt=\"VF to other faces inside the sphere\" width=\"240\"/>\n<img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/3ac896fe2f420443c7c96eaa9dbbb955474e80d5/img/F_sphere_clip.png?raw=true\" alt=\"Clipped result\" width=\"240\"/>\n\n## View factors of an individual with a wall\n\nFor comfort computations, it may be useful to determine heat transfer between an invidivual and a wall. We will use here PyVista's [doorman example](https://docs.pyvista.org/api/examples/_autosummary/pyvista.examples.downloads.download_doorman.html?highlight=example+man#pyvista.examples.downloads.download_doorman) as a basis for the human geometry.\n\n<img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/efeae65b20630978972a94de2cffaa4ab5e427dc/img/Fground.png?raw=true\" alt=\"View factors of the doorman's faces to the ground\" width=\"380\"/>\n\nThe following code and VTK file of the doorman example are available in the [./examples/](https://gitlab.com/arep-dev/pyViewFactor/-/tree/main/examples) folder.\n```python\n# -*- coding: utf-8 -*-\nfrom tqdm import tqdm\nimport numpy as np\nimport pyvista as pv\nimport pyviewfactor as pvf\n\ndef fc_Fwall(nom_vtk):\n    mesh=pv.read(nom_vtk)\n    \n    # find all types of walls\n    wall_types=list(np.unique(mesh['names']))\n    # remove the individual from the list (still named 'cylinder'...)\n    wall_types.remove('cylinder\\r') # with dirty trailing character\n    # where is the doorman in the list?\n    index_doorman=np.where(mesh['names']=='cylinder\\r')[0]\n    # prepare storage for the different walls in a dict\n    dict_F={}\n    # loop over wall types\n    for type_wall in wall_types:\n        # prepare for storing doorman to wall view factor\n        F=np.zeros(mesh.n_cells)\n        # get the indices of this type of wall\n        indices=np.where(mesh['names']==type_wall )[0]\n        # loop over\n        for i in indices:\n            wall=mesh.extract_cells(i)\n            wall=pvf.fc_unstruc2poly(wall) # convert for normals\n            # ... for each facet of the individual\n            for idx in tqdm(index_doorman):\n                face = mesh.extract_cells(idx)\n                face =pvf.fc_unstruc2poly(face) # convert for normals\n                # check if faces can \"see\" each other\n                if pvf.get_visibility(wall,face):\n                    Ffp=pvf.compute_viewfactor(wall,face) # compute face2wall view factor\n                else:\n                    Ffp=0\n                F[idx]=Ffp\n        #store array F in e.g. dict_F['F_ceiling']\n        dict_F['F_'+type_wall.replace('\\r','')]=F\n    return dict_F\n\n# download it directly from https://gitlab.com/arep-dev/pyViewFactor/-/blob/main/examples/example_doorman.vtk ...\n# ...or get it from this repository's examples\nfile=\"./example_doorman.vtk\"\n# compute the view factors or the doorman to the different wall types in the scene\ndict_F=fc_Fwall(file)\n\n# re-read and store\nmesh=pv.read(file)\n# loop over what is in the dictionary of view factors\nfor elt in dict_F.keys():\n    mesh[elt.replace('\\r','')]=dict_F[elt] # name the field\nmesh.save(file) # store in the intial VTK\n\n# have a look without paraview with fancy colors\nmesh.plot(cmap='jet',lighting=False)\n```\n\nMore details and view abacuses in [this page](https://lhypercube.arep.fr/en/confort/calcul-de-la-temperature-radiante/). Is the computation time a bit lengthy? Learn how to [go parallel!](https://eddes.github.io/#go-parallel).\n\n## Computing the view factors of a wall in its built environment\n\nFor building simulation purposes, it may prove to be useful to compute the ground and sky view factors of a given wall, or the view factor of the wall to other walls in the built environment. In following example (available in the \"examples\" folder), we compute the view factors of the environment of the purple wall depicted below.\n\n<img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/3ac896fe2f420443c7c96eaa9dbbb955474e80d5/img/wall_view_factors.png?raw=true\" alt=\"View factors in built environment\" width=\"430\"/>\n\n```python\nimport numpy as np\nimport pyvista as pv\nfrom tqdm import tqdm\nimport pyviewfactor as pvf\n\n# read the geometry\nmesh = pv.read(\"./built_envmt.vtk\")\nmeshpoly = pvf.fc_unstruc2poly(mesh) # convert to polydata for obstruction check\n\n# identify who is who\ni_wall = np.where(mesh[\"wall_names\"]=='wall')[0]\ni_sky = np.where(mesh[\"wall_names\"]=='sky')[0]\ni_building1 = np.where(mesh[\"wall_names\"]=='building1')[0]\ni_building2 = np.where(mesh[\"wall_names\"]=='building2')[0]\n\n# get the different elements\nwall = mesh.extract_cells(i_wall)\nsky = mesh.extract_cells(i_sky)\nbuilding1 = mesh.extract_cells(i_building1)\nbuilding2 = mesh.extract_cells(i_building2)\n\n# convert to polydata\nwall = pvf.fc_unstruc2poly(wall)\n\nFsky = 0\n# for all cells constituting the ensemble\nfor patch in tqdm(i_sky):\n    sky = mesh.extract_cells(patch) # extract one cell\n    sky = pvf.fc_unstruc2poly(sky) # convert to polydata\n    if pvf.get_visibility(sky, wall): # if the can see each other...\n        if pvf.get_visibility_raytrace(sky, wall, meshpoly): # ... if no obstruction\n            Fsky += pvf.compute_viewfactor(sky, wall) # compute and increment view factor : F_i->(j+k) = F_i->j + F_i->k\n\n# same for building 1\nFbuilding1 = 0\nfor patch in tqdm(i_building1):\n    bldng1 = mesh.extract_cells(patch)\n    bldng1 = pvf.fc_unstruc2poly(bldng1)\n    if pvf.get_visibility(bldng1, wall):\n        if pvf.get_visibility_raytrace(bldng1, wall, meshpoly):\n            Fbuilding1 += pvf.compute_viewfactor(bldng1, wall)\n\n# same for building 2\nFbuilding2 = 0\nfor patch in tqdm(i_building2):\n    bldng2 = mesh.extract_cells(patch)\n    bldng2 = pvf.fc_unstruc2poly(bldng2)\n    if pvf.get_visibility(bldng2, wall):\n        if pvf.get_visibility_raytrace(bldng2, wall, meshpoly):\n            Fbuilding2 += pvf.compute_viewfactor(bldng2, wall)\n\n# complementarity implies \\sigma F_i = 1 : compute viewfactor to ground\nFground = 1-Fbuilding1-Fbuilding2-Fsky\n\nprint('\\n----------------------')\nprint('Wall to environment view factors :')\nprint('\\tSky ', round(Fsky, 4))\nprint('\\tBuilding 1 ', round(Fbuilding1, 4))\nprint('\\tBuilding 2 ', round(Fbuilding2, 4))\nprint('Ground view factor :')\nprint('\\tGround ', round(Fground, 4))\n```\nThe code yields following view factors :\n```math\nF_{\\text{sky}} = 0.345 \\\\\nF_{\\text{ground}} = 0.373 \\\\\nF_{\\text{building1}} = 0.251 \\\\\nF_{\\text{building2}} = 0.031 \\\\\n```\n\n## Understanding the obstruction check function\n\nIn real life problems, obstacles may well hinder the radiation heat transfer between surfaces. We make use here of [pyvista's raytrace function](https://docs.pyvista.org/examples/01-filter/poly-ray-trace.html) to perform obstruction tests, as per following example, much inspired from pyvista's online documentation.\n\n<img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/3ac896fe2f420443c7c96eaa9dbbb955474e80d5/img/intersection_simple.png?raw=true\" alt=\"Obstruction check between rectangles\" width=\"350\"/>\n\nThe code snippet below shows how the ray tracing function works and allows to understand its usage in the pyviewfactor `get_visibility_raytrace` function.\n```python\nimport pyvista as pv\nfrom pyviewfactor import get_visibility_raytrace\n# let us first create two rectangles\npointa = [1, 0, 0]\npointb = [1, 1, 0]\npointc = [0, 1, 0]\npointd = [0, 0, 0]\nrectangle_down = pv.Rectangle([pointa, pointb, pointc, pointd])\npointa = [1, 0, 1]\npointb = [1, 1, 1]\npointc = [0, 1, 1]\npointd = [0, 0, 1]\nrectangle_up = pv.Rectangle([pointa, pointb, pointc, pointd])\n\n# a circle will be the obstruction\nz_translation, r = 0.5, 2\nobstacle = pv.Circle(radius=r, resolution=10)\n# we translate the obstruction right between both rectangles\nobstacle.translate([0, 0, z_translation], inplace=True)\n# Define line segment\nstart = rectangle_down.cell_centers().points[0]\nstop = rectangle_up.cell_centers().points[0]\n# Perform ray trace\npoints, ind = obstacle.ray_trace(start, stop)\n\n# Create geometry to represent ray trace\nray = pv.Line(start, stop)\nintersection = pv.PolyData(points)\n\n# Render the result\np = pv.Plotter(notebook=True)\np.add_mesh(obstacle, show_edges=True, opacity=0.5, color=\"red\", lighting=False, label=\"obstacle\")\np.add_mesh(rectangle_up, color=\"blue\", line_width=5, opacity=0.5, label=\"rect up\")\np.add_mesh(rectangle_down, color=\"yellow\", line_width=5,opacity=0.5, label=\"rect down\")\np.add_mesh(ray, color=\"green\", line_width=5, label=\"ray trace\")\n\n# if any intersection\nif intersection.n_cells > 0:\n    p.add_mesh(intersection, color=\"green\", point_size=25, label=\"Intersection Points\")\np.add_legend()\np.show(cpos=\"yz\")\n\n#now a call to the obstruction check function\nprint(get_visibility_raytrace(rectangle_up, rectangle_down, obstacle))\n```\n\nMore complex scenes can then be treated with the function `get_visibility_raytrace`.\n\n<img src=\"https://gitlab.com/arep-dev/pyViewFactor/-/raw/3ac896fe2f420443c7c96eaa9dbbb955474e80d5/img/intersection.png?raw=true\" alt=\"Obstruction within an enclosure\" width=\"350\"/>\n\n## Installation\npyViewFactor can be installed from [PyPi](https://pypi.org/project/pyviewfactor/) using `pip` on Python >= 3.7:\n```\npip install pyviewfactor\n```\nYou can also visit [PyPi](https://pypi.org/project/pyviewfactor/) or [Gitlab](https://gitlab.com/arep-dev/pyViewFactor) to download the sources. \n\nRequirements: \n```\nnumpy==1.17.4\npandas==1.4.2\npyvista==0.35.2\nscipy==1.8.1\nnumba>=0.55.2\n```\nThe code will probably work with lower versions of the required packages, however this has not been tested.\n\n__Note__ - If you are alergic to `numba`, you may `pip install pyviewfactor==0.0.10` that works (and give up the x2 speed-up in view factor computation).\n\n## Authors and acknowledgment\nMateusz BOGDAN, Edouard WALTHER, Marc ALECIAN, Mina CHAPON\n\n## Citation\nThere is even a [conference paper](https://www.researchgate.net/publication/360835982_Calcul_des_facteurs_de_forme_entre_polygones_-Application_a_la_thermique_urbaine_et_aux_etudes_de_confort), showing analytical validations :\n> Mateusz BOGDAN, Edouard WALTHER, Marc ALECIAN and Mina CHAPON. _Calcul des facteurs de forme entre polygones - Application à la thermique urbaine et aux études de confort_. IBPSA France 2022, Châlons-en-Champagne. \n\nBibtex entry:\n``` latex\n@inproceedings{pyViewFactor22bogdan,\n  authors      = \"Mateusz BOGDAN and Edouard WALTHER and Marc ALECIAN and Mina CHAPON\",\n  title        = \"Calcul des facteurs de forme entre polygones - Application à la thermique urbaine et aux études de confort\",\n  year         = \"2022\",\n  organization = \"IBPSA France\",\n  venue        = \"Châlons-en-Champagne, France\"\n  note         = \"IBPSA France 2022\",\n}\n```\n\n## License\nMIT License - Copyright (c) AREP 2022\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/arep-dev/pyViewFactor/",
    "keywords": "radiative-transfer radiation vtk geometry ViewFactor STL visibility",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyviewfactor",
    "package_url": "https://pypi.org/project/pyviewfactor/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyviewfactor/",
    "project_urls": {
      "Documentation": "https://arep-dev.gitlab.io/pyViewFactor/",
      "Homepage": "https://gitlab.com/arep-dev/pyViewFactor/",
      "Source": "https://gitlab.com/arep-dev/pyViewFactor/",
      "Tracker": "https://gitlab.com/arep-dev/pyViewFactor/-/issues"
    },
    "release_url": "https://pypi.org/project/pyviewfactor/0.0.15/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python library to calculate numerically exact radiation view factors between planar faces.",
    "version": "0.0.15",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17175542,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e375c9c27dff4a9c8aebe71b5335e33a8f77c28b0e3ca6d6e1b61d8d48b5da5d",
          "md5": "87a9af1d69c43402237e9649524d9671",
          "sha256": "5d3683cddfbc726629db465ff79ef77439926c39f5e9568e548ec6e1da912d91"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "87a9af1d69c43402237e9649524d9671",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3974,
        "upload_time": "2022-08-02T13:52:35",
        "upload_time_iso_8601": "2022-08-02T13:52:35.069426Z",
        "url": "https://files.pythonhosted.org/packages/e3/75/c9c27dff4a9c8aebe71b5335e33a8f77c28b0e3ca6d6e1b61d8d48b5da5d/pyviewfactor-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d8732ba942251f39e9977de14db68f06b9a5b3752dccb8ef320fa4aaaf1e705",
          "md5": "1d726d2ca785939c9b21d47003e7b232",
          "sha256": "35c58d77533f94bbeb397bbcbe1933e269fadfbba3392d86f969d009d8480fea"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "1d726d2ca785939c9b21d47003e7b232",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9047,
        "upload_time": "2022-08-08T15:04:13",
        "upload_time_iso_8601": "2022-08-08T15:04:13.047760Z",
        "url": "https://files.pythonhosted.org/packages/5d/87/32ba942251f39e9977de14db68f06b9a5b3752dccb8ef320fa4aaaf1e705/pyviewfactor-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e42b3077df812455acd4772d8343a72125893dec3915f3cd95a41c5a734544e",
          "md5": "a0f5b85fe5d940dc33a33eb463bc96cc",
          "sha256": "8bf5b64e39ace02684ec256cda862817eb5d5a0bb584516a30d7704c8dba9a8c"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "a0f5b85fe5d940dc33a33eb463bc96cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13717,
        "upload_time": "2022-08-19T08:50:58",
        "upload_time_iso_8601": "2022-08-19T08:50:58.017982Z",
        "url": "https://files.pythonhosted.org/packages/2e/42/b3077df812455acd4772d8343a72125893dec3915f3cd95a41c5a734544e/pyviewfactor-0.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38274c97f3b9d961db9c6a4a3648648c78a3aad344b2f3827454bf45da96459f",
          "md5": "907cefd7e2930d913c1ff546703bb6a1",
          "sha256": "7f4e53eae84ac12e8f19ca513efd3a525bc45b321b38c49a960ac6fb15436eea"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "907cefd7e2930d913c1ff546703bb6a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16233,
        "upload_time": "2023-01-27T16:44:35",
        "upload_time_iso_8601": "2023-01-27T16:44:35.518649Z",
        "url": "https://files.pythonhosted.org/packages/38/27/4c97f3b9d961db9c6a4a3648648c78a3aad344b2f3827454bf45da96459f/pyviewfactor-0.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "237a9ebcf106e21333fdcddabd01add757d2b635bb0c0394e57d3062b0c0f096",
          "md5": "8cf22471b8b4d4e35ae0e23bf3d3aa87",
          "sha256": "00b4b0a72b2e2a502d5320315b545f2106a28357c26016e4d73b70b1ca866a36"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "8cf22471b8b4d4e35ae0e23bf3d3aa87",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16263,
        "upload_time": "2023-02-01T13:53:39",
        "upload_time_iso_8601": "2023-02-01T13:53:39.628522Z",
        "url": "https://files.pythonhosted.org/packages/23/7a/9ebcf106e21333fdcddabd01add757d2b635bb0c0394e57d3062b0c0f096/pyviewfactor-0.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6c3e5e5c557e5ab1c5cbbc46f35185437d4a307442503d001db84a9dda9a74a",
          "md5": "62f842367459750d31ae401f9dd76371",
          "sha256": "1e2cf6e27471e7321b5879704c8b7ba3a097d97e5ec8f564c5e41a601e32af51"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "62f842367459750d31ae401f9dd76371",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16412,
        "upload_time": "2023-02-01T16:13:38",
        "upload_time_iso_8601": "2023-02-01T16:13:38.099470Z",
        "url": "https://files.pythonhosted.org/packages/a6/c3/e5e5c557e5ab1c5cbbc46f35185437d4a307442503d001db84a9dda9a74a/pyviewfactor-0.0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de584c26c716edcfec550f4c3a9cc9f43bb92124885ee7a6c07d5fd233d04303",
          "md5": "eec990195200f503523671ceb5d8913a",
          "sha256": "50957a53643575fde66cae139f55ebf1fd401db0eb6257f755b84400b73412cf"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "eec990195200f503523671ceb5d8913a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18205,
        "upload_time": "2023-03-06T14:01:50",
        "upload_time_iso_8601": "2023-03-06T14:01:50.069681Z",
        "url": "https://files.pythonhosted.org/packages/de/58/4c26c716edcfec550f4c3a9cc9f43bb92124885ee7a6c07d5fd233d04303/pyviewfactor-0.0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2521fe568398c423071155f52206c8ceddcd5c97af1c2d508b5d96d44a5e80e",
          "md5": "480f48564291799bd86e89e32984f59f",
          "sha256": "464c1c28014300cfaed4376caf3113b295bfeba8faece42e834fa86434a68932"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "480f48564291799bd86e89e32984f59f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4169,
        "upload_time": "2022-08-02T14:31:39",
        "upload_time_iso_8601": "2022-08-02T14:31:39.348008Z",
        "url": "https://files.pythonhosted.org/packages/b2/52/1fe568398c423071155f52206c8ceddcd5c97af1c2d508b5d96d44a5e80e/pyviewfactor-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a46f9bb06ba4b075fb9dbc8792c374769c1715bfce6f110f8141d125957c10e5",
          "md5": "eef8f03f36c8361cd60b6240ff7df7dd",
          "sha256": "3afc5f1ff294065e570ee46cb07375601128cb2f1615b363e72e3a70e9d32fde"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "eef8f03f36c8361cd60b6240ff7df7dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5199,
        "upload_time": "2022-08-02T15:45:15",
        "upload_time_iso_8601": "2022-08-02T15:45:15.143806Z",
        "url": "https://files.pythonhosted.org/packages/a4/6f/9bb06ba4b075fb9dbc8792c374769c1715bfce6f110f8141d125957c10e5/pyviewfactor-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa39978ed7e0e438e78103b535667b017a517c4b3040d2ed7a1a214e811c05cb",
          "md5": "14ab18e841925ec27f78791d55ad44ae",
          "sha256": "24599d88a3639b338d9e2d8c41b481e74c66166dcf230012957d8d3eea8a7513"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "14ab18e841925ec27f78791d55ad44ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6324,
        "upload_time": "2022-08-03T07:41:44",
        "upload_time_iso_8601": "2022-08-03T07:41:44.669790Z",
        "url": "https://files.pythonhosted.org/packages/fa/39/978ed7e0e438e78103b535667b017a517c4b3040d2ed7a1a214e811c05cb/pyviewfactor-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a83fe5e7cc4c610def17114a27334c6d715607a577e098451f13022bad2089d",
          "md5": "8b3bf24b56e1e69f3a8b0e4c433426da",
          "sha256": "36d78b2426e771da072f319b8c37479a5da8bcf4ad388d5aa8ac58c732f831bd"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8b3bf24b56e1e69f3a8b0e4c433426da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6851,
        "upload_time": "2022-08-03T09:47:38",
        "upload_time_iso_8601": "2022-08-03T09:47:38.371909Z",
        "url": "https://files.pythonhosted.org/packages/6a/83/fe5e7cc4c610def17114a27334c6d715607a577e098451f13022bad2089d/pyviewfactor-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72b5acddfb26381a3ce5b10f3c0ac1346a3e87caec503c8f50ca7ba0f6dd91ff",
          "md5": "0260d7148fe6949ffd58c517e30b6657",
          "sha256": "846b5c573df7510fd3a2d4f2204cb8e08c5b338f7e19f1979e048c247f258b46"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "0260d7148fe6949ffd58c517e30b6657",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7151,
        "upload_time": "2022-08-03T15:47:40",
        "upload_time_iso_8601": "2022-08-03T15:47:40.569734Z",
        "url": "https://files.pythonhosted.org/packages/72/b5/acddfb26381a3ce5b10f3c0ac1346a3e87caec503c8f50ca7ba0f6dd91ff/pyviewfactor-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b57d12d94a7b4280d4ba5ad25809e79c3d82a65fd22f77cd3194ae3962436c0c",
          "md5": "1b3c5f8b81a0afc002c71a5d97bbca46",
          "sha256": "dcae49400087c6970943a6b8c044382e4bcc60752852b56bb757a7c9a24c6e8f"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "1b3c5f8b81a0afc002c71a5d97bbca46",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8485,
        "upload_time": "2022-08-08T08:41:35",
        "upload_time_iso_8601": "2022-08-08T08:41:35.585761Z",
        "url": "https://files.pythonhosted.org/packages/b5/7d/12d94a7b4280d4ba5ad25809e79c3d82a65fd22f77cd3194ae3962436c0c/pyviewfactor-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82582cda797c532699b120a1005295ce4a1ad7677b471def456ff5862344c302",
          "md5": "fe7d424f7b1625d6b5be1eafbca3cd3f",
          "sha256": "3f98d9abfba2325d536404e98bf7f9a670b679df46d8eceef4fc14f98f98c7bf"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "fe7d424f7b1625d6b5be1eafbca3cd3f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8893,
        "upload_time": "2022-08-08T10:29:31",
        "upload_time_iso_8601": "2022-08-08T10:29:31.110701Z",
        "url": "https://files.pythonhosted.org/packages/82/58/2cda797c532699b120a1005295ce4a1ad7677b471def456ff5862344c302/pyviewfactor-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d86ff491108fa9a47bbd50ccfb7bd968cbab45d3cce017a18bd7caa45345c5b",
          "md5": "41d07ec6cc5bf38002ffc7027306eba4",
          "sha256": "0bfc1ab55f5a6c5d298e5ebef7ae41905945e3da432aaa1cfca16ca594c57785"
        },
        "downloads": -1,
        "filename": "pyviewfactor-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "41d07ec6cc5bf38002ffc7027306eba4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8942,
        "upload_time": "2022-08-08T14:51:52",
        "upload_time_iso_8601": "2022-08-08T14:51:52.517652Z",
        "url": "https://files.pythonhosted.org/packages/1d/86/ff491108fa9a47bbd50ccfb7bd968cbab45d3cce017a18bd7caa45345c5b/pyviewfactor-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de584c26c716edcfec550f4c3a9cc9f43bb92124885ee7a6c07d5fd233d04303",
        "md5": "eec990195200f503523671ceb5d8913a",
        "sha256": "50957a53643575fde66cae139f55ebf1fd401db0eb6257f755b84400b73412cf"
      },
      "downloads": -1,
      "filename": "pyviewfactor-0.0.15.tar.gz",
      "has_sig": false,
      "md5_digest": "eec990195200f503523671ceb5d8913a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18205,
      "upload_time": "2023-03-06T14:01:50",
      "upload_time_iso_8601": "2023-03-06T14:01:50.069681Z",
      "url": "https://files.pythonhosted.org/packages/de/58/4c26c716edcfec550f4c3a9cc9f43bb92124885ee7a6c07d5fd233d04303/pyviewfactor-0.0.15.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}