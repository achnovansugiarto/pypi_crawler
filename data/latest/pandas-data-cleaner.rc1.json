{
  "info": {
    "author": "Salaah Amin",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Pandas Data Cleaner\nThis package is a data cleaning tool for Pandas DataFrames and other objects with a similar structure.\n\nThe tool is designed to help clean data by providing a function onto which you can apply various cleaning methods.\n\nThe main cleaning function can be found in `pandas_data_cleaner.base.clean_data`.\n\nThe app also provides an abstract base class `pandas_data_cleaner.base.CleaningStrategy` which can be used to implement custom cleaning strategies.\n\n## Installation\nTo install the application, run the following command:\n```bash\npip install pandas-data-cleaner\n```\n\n## Cleaning Data\nIn order to clean data, you need:\n* Pandas DataFrame\n* List of strategies to apply\n* Any additional arguments that you may need to pass to the cleaning function.\n\nLet's suppose we have the following DataFrame:\n\n```python\nimport pandas as pd\n\ndataframe = pd.DataFrame({\n    \"id\": [1, 2, 1],\n    \"structure_value\": [\"a\", \"a\", \"a\"],\n    \"status\": [\"ENABLED\", \"ENABLED\", \"DISABLED\"],\n})\n```\nAs a table, this would look like this:\n\n| id  | structure_value | status   |\n| --- | --------------- | -------- |\n| 1   | a               | ENABLED  |\n| 2   | a               | ENABLED  |\n| 1   | a               | DISABLED |\n\nIn this data frame, we can see that there are two rows with the same id but different values for status.\n\nAs part of our cleaning exercise, we want to keep the latest row of data as this is the most up-to-date.\n\nLet's try to apply the RemoveDuplicates cleaning strategy to the data frame:\n\n```python\nimport pandas as pd\nfrom pandas_data_cleaner.base import clean_data\nfrom pandas_data_cleaner.strategies import RemoveDuplicates\n\ndataframe = pd.DataFrame({\n    \"id\": [1, 2, 1],\n    \"structure_value\": [\"a\", \"a\", \"a\"],\n    \"status\": [\"ENABLED\", \"ENABLED\", \"DISABLED\"],\n})\n\ndataframe = clean_data(dataframe, [RemoveDuplicates])\n```\n\nRunning this will result in the following error:\n```bash\npandas_data_cleaner.exceptions.MissingOptionsError: Missing kwargs:\nremove_duplicates_subset_fields\nremove_duplicates_keep\n```\n\nThis lets us that we need to provide additional arguments when calling the cleaning function, these are:\n* `remove_duplicates_subset_fields`\n* `remove_dupplicates_keep`\n\nTo find out more information about the additional arguments required, you can run:\n```python\nRemoveDuplicates.info()\n```\nThis will return some information on how the strategy works as well as additional information on the arguments that are required.\n\nFor the `RemoveDuplicates` cleaning strategy, `remove_duplicates_subset_fields` is the fields we should perform the duplicate removal on and `remove_duplicates_keep` indicates given some duplicates are, which row should we keep.\n\nIf we now tweak our earlier code:\n\n\n```python\nimport pandas as pd\nfrom pandas_data_cleaner.base import clean_data\nfrom pandas_data_cleaner.strategies import RemoveDuplicates\n\ndataframe = pd.DataFrame({\n    \"id\": [1, 2, 1],\n    \"structure_value\": [\"a\", \"a\", \"a\"],\n    \"status\": [\"ENABLED\", \"ENABLED\", \"DISABLED\"],\n})\n\ndataframe = clean_data(\n    dataframe,\n    [RemoveDuplicates],\n    remove_duplicates_subset_fields=[\"id\"],\n    remove_duplicates_keep=\"last\"\n)\n```\n\nWe will now get the following data frame:\n\n```python\npd.DataFrame({\n    \"id\": [2, 1],\n    \"structure_value\": [\"a\", \"a\"],\n    \"status\": [\"ENABLED\", \"DISABLED\"],\n})\n```\n\nAs a table:\n\n| id  | structure_value | status   |\n| --- | --------------- | -------- |\n| 2   | a               | ENABLED  |\n| 1   | a               | DISABLED |\n\nAs we had set `remove_duplicates_subset_fields=[\"id\"]`, it found that there were two rows with the same ID. As we set `remove_duplicates_keep=\"last\"`, it kept the last row only.\n\nIn our example, we used only one cleaning strategy, but we are free to use as many as we like, we simply need to add all the strategies to the list of cleaning strategies to apply.\n\n## Creating Custom Cleaning Strategies\nLet's suppose we intend to create a new cleaning strategy that removes certain columns.\n\nWe would create a new class inheriting from `base.CleaningStrategy`:\n\n```python\nfrom pandas_data_cleaner.base import CleaningStrategy\n\n\nclass RemoveColumns(CleaningStrategy):\n    pass\n```\n\nWhen using this strategy, we need to know which column names to remove. We will therefore decide that, when using this class in the `clean_data` method, we need to provide a `remove_columns` argument.\n\nTo do this, we simply create a class attribute called `required_options` and set it to `[\"remove_columns\"]`.\n\nWe also will add some documentation to allow the end-user to receive some useful information when they run `RemoveColumns.info()`.\n\nOur new strategy will now look like this:\n\n```python\nclass RemoveColumns(CleaningStrategy):\n    \"\"\"Removes columns from a dataframe.\n\n    Required options:\n        `remove_columns` - (_t.List[str]) A list of columns to remove.\n    \"\"\"\n\n    required_options = [\"remove_columns\"]\n```\n\nNow, we need to create our cleaning method.\nOnce the cleaning method has been added, the class will look like the following:\n\n```python\nclass RemoveColumns(CleaningStrategy):\n    \"\"\"Removes columns from a dataframe.\n\n    Required options:\n        `remove_columns` - (List[str]) A list of columns to remove.\n    \"\"\"\n\n    required_options = [\"remove_columns\"]\n\n    def clean(self):\n        \"\"\"Executes the cleaning task.\"\"\"\n        self.dataframe.drop(\n            self.remove_columns, axis=1, inplace=True\n        )\n```\n\nLet's discuss how this cleaning method works.\nFirstly, whenever a user would use this strategy may run the following:\n\n```python\nclean_data(dataframe, [RemoveColumns], remove_columns=[\"id\", \"status\"])\n```\n\n`clean_data` will instantiate each cleaning strategy, in this case, just `RemoveColumns` providing the data frame as a required initial parameter as well as passing any keyword arguments to the function.\n\nEach strategy would then set both the `dataframe` and each keyword argument to the self object.\n\nThis means that within the clean method, we would have access:\n* `self.dataframe`\n* `self.remove_columns`.\n\nIf the command the user ran was instead:\n```python\nclean_data(dataframe, [RemoveColumns], remove_columns=[\"id\", \"status\"], foo=\"bar\")\n```\n\nThen within the clean method would have access:\n* `self.dataframe`\n* `self.remove_columns`\n* `self.foo`\n\nBy adding `remove_columns` to the `required_options` list, once this class is instantiated, we will be able to access `self.remove_columns`.\n\nNow that we have built our cleaning strategy let's run it:\n\n```python\ndataframe = pd.DataFrame({\n    \"id\": [1, 2, 3],\n    \"col1\": [1, 2, 3],\n    \"col2\": [1, 2, 3],\n    \"col3\": [1, 2, 3],\n})\n\ndataframe = clean_data(\n    dataframe,\n    [RemoveColumns],\n    remove_columns=[\"col1\", \"col2\"]\n)\n\nprint(dataframe)\n\n>>> pd.DataFrame({\n    \"id\": [1, 2, 3],\n    \"col3\": [1, 2, 3],\n})\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Salaah01/pd-data-cleaner",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pandas-data-cleaner",
    "package_url": "https://pypi.org/project/pandas-data-cleaner/",
    "platform": "",
    "project_url": "https://pypi.org/project/pandas-data-cleaner/",
    "project_urls": {
      "Homepage": "https://github.com/Salaah01/pd-data-cleaner"
    },
    "release_url": "https://pypi.org/project/pandas-data-cleaner/0.0.1/",
    "requires_dist": [
      "pandas (>=1.0.0)"
    ],
    "requires_python": ">=3.6.1",
    "summary": "A package for aid with data cleaning using pandas.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12761089,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9715b903a9fbb61eede76e674816449e18001575637505d4f44831be1d12a3f6",
          "md5": "43d7b2a363d7fe510c0e17895bfe153a",
          "sha256": "5ab57f327d77490ab2447abed772d3e431252ba63d97fb2d4af8dc94c68d2971"
        },
        "downloads": -1,
        "filename": "pandas_data_cleaner-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43d7b2a363d7fe510c0e17895bfe153a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.1",
        "size": 8420,
        "upload_time": "2022-02-02T02:50:21",
        "upload_time_iso_8601": "2022-02-02T02:50:21.172588Z",
        "url": "https://files.pythonhosted.org/packages/97/15/b903a9fbb61eede76e674816449e18001575637505d4f44831be1d12a3f6/pandas_data_cleaner-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3858662545faef127a2293b4616540dcd2dbb452242c793da238f0f2e6bd6a6",
          "md5": "49c0156ac8b0878d4261fe00e38b9d87",
          "sha256": "477e87548754dab11d73c90bbee8288441ac19d4d21d6be559b028845e1ccaee"
        },
        "downloads": -1,
        "filename": "pandas-data-cleaner-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "49c0156ac8b0878d4261fe00e38b9d87",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1",
        "size": 8200,
        "upload_time": "2022-02-02T02:50:23",
        "upload_time_iso_8601": "2022-02-02T02:50:23.004797Z",
        "url": "https://files.pythonhosted.org/packages/e3/85/8662545faef127a2293b4616540dcd2dbb452242c793da238f0f2e6bd6a6/pandas-data-cleaner-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9715b903a9fbb61eede76e674816449e18001575637505d4f44831be1d12a3f6",
        "md5": "43d7b2a363d7fe510c0e17895bfe153a",
        "sha256": "5ab57f327d77490ab2447abed772d3e431252ba63d97fb2d4af8dc94c68d2971"
      },
      "downloads": -1,
      "filename": "pandas_data_cleaner-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "43d7b2a363d7fe510c0e17895bfe153a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.1",
      "size": 8420,
      "upload_time": "2022-02-02T02:50:21",
      "upload_time_iso_8601": "2022-02-02T02:50:21.172588Z",
      "url": "https://files.pythonhosted.org/packages/97/15/b903a9fbb61eede76e674816449e18001575637505d4f44831be1d12a3f6/pandas_data_cleaner-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3858662545faef127a2293b4616540dcd2dbb452242c793da238f0f2e6bd6a6",
        "md5": "49c0156ac8b0878d4261fe00e38b9d87",
        "sha256": "477e87548754dab11d73c90bbee8288441ac19d4d21d6be559b028845e1ccaee"
      },
      "downloads": -1,
      "filename": "pandas-data-cleaner-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "49c0156ac8b0878d4261fe00e38b9d87",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.1",
      "size": 8200,
      "upload_time": "2022-02-02T02:50:23",
      "upload_time_iso_8601": "2022-02-02T02:50:23.004797Z",
      "url": "https://files.pythonhosted.org/packages/e3/85/8662545faef127a2293b4616540dcd2dbb452242c793da238f0f2e6bd6a6/pandas-data-cleaner-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}