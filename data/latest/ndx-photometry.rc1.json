{
  "info": {
    "author": "Akshay Jaggi",
    "author_email": "akshay.x.jaggi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research"
    ],
    "description": "# ndx-photometry Extension for NWB\n[![Build Status](https://travis-ci.com/akshay-jaggi/ndx-photometry.svg?branch=master)](https://travis-ci.com/akshay-jaggi/ndx-photometry)\n[![Documentation Status](https://readthedocs.org/projects/ndx-photometry/badge/?version=latest)](https://ndx-photometry.readthedocs.io/en/latest/?badge=latest)\n\n![NWB - Photometry](https://user-images.githubusercontent.com/844306/144680873-3e2d957f-97ff-45cb-b625-517f5e7dfb9f.png)\n\n## Introduction\nThis is an NWB extension for storing photometry recordings and associated metadata. This extension stores photometry information across three folders in the NWB file: acquisition, processing, and general. The acquisiton folder contains an ROIResponseSeries (inherited from `pynwb.ophys`), which references rows of a FibersTable rather than 2 Photon ROIs. The new types for this extension are in metadata and processing\n\n### Metadata\n1. `FibersTable` stores rows for each fiber with information about the location, excitation, source, photodetector, fluorophore, and more (associated with each fiber). \n2. `ExcitationSourcesTable` stores rows for each excitation source with information about the peak wavelength, source type, and the commanded voltage series of type `CommandedVoltageSeries`\n3. `PhotodectorsTable` stores rows for each photodetector with information about the peak wavelength, type, etc. \n4. `FluorophoresTable` stores rows for each fluorophore with information about the fluorophore itself and the injeciton site. \n\n### Processing\n1. `DeconvoledROIResponseSeries` stores DfOverF and Fluorescence traces and extends `ROIResponseSeries` to contain information about the deconvolutional and downsampling procedures performed.\n\n\nThis extension was developed by Akshay Jaggi, Ben Dichter, and Ryan Ly. \n\n\n## Installation\n\n```\npip install ndx-photometry\n```\n\n\n## Usage\n\n```python\nimport datetime\nimport numpy as np\n\nfrom pynwb import NWBHDF5IO, NWBFile\nfrom pynwb.core import DynamicTableRegion\nfrom pynwb.ophys import RoiResponseSeries\nfrom ndx_photometry import (\n    FibersTable,\n    PhotodetectorsTable,\n    ExcitationSourcesTable,\n    DeconvolvedRoiResponseSeries,\n    MultiCommandedVoltage,\n    FiberPhotometry,\n    FluorophoresTable\n)\n\n\nnwbfile = NWBFile(\n    session_description=\"session_description\",\n    identifier=\"identifier\",\n    session_start_time=datetime.datetime.now(datetime.timezone.utc),\n)\n\n# In the next ten calls or so, we'll set up the metadata from the bottom of the metadata tree up\n# You can follow along here: \n\n# Create a commanded voltage container, this can store one or more commanded voltage series\nmulti_commanded_voltage = MultiCommandedVoltage(\n    name=\"MyMultiCommandedVoltage\",\n)\n\n# Add a commanded voltage series to this container\ncommandedvoltage_series = (\n    multi_commanded_voltage.create_commanded_voltage_series(\n        name=\"commanded_voltage\",\n        data=[1.0, 2.0, 3.0],\n        frequency=30.0,\n        power=500.0,\n        rate=30.0,\n    )\n)\n\n# Create an excitation sources table\nexcitationsources_table = ExcitationSourcesTable(\n    description=\"excitation sources table\"\n)\n\n# Add one row to the table per excitation source\n# You can repeat this in a for-loop for many sources\nexcitationsources_table.add_row(\n    peak_wavelength=700.0,\n    source_type=\"laser\",\n    commanded_voltage=commandedvoltage_series,\n)\n\nphotodetectors_table = PhotodetectorsTable(\n    description=\"photodetectors table\"\n)\n\n# Add one row to the table per photodetector\nphotodetectors_table.add_row(\n    peak_wavelength=500.0, \n    type=\"PMT\", \n    gain=100.0\n)\n\n\nfluorophores_table = FluorophoresTable(\n    description='fluorophores'\n)\n\nfluorophores_table.add_row(\n    label='dlight',\n    location='VTA',\n    coordinates=(3.0,2.0,1.0)\n)\n\nfibers_table = FibersTable(\n    description=\"fibers table\"\n)\n\n# Here we add the metadata tables to the metadata section\nnwbfile.add_lab_meta_data(\n    FiberPhotometry(\n        fibers=fibers_table,\n        excitation_sources=excitationsources_table,\n        photodetectors=photodetectors_table,\n        fluorophores=fluorophores_table\n    )\n)\n\n# Important: we add the fibers to the fibers table _after_ adding the metadata\n# This ensures that we can find this data in their tables of origin\nfibers_table.add_fiber(\n    excitation_source=0, #integers indicated rows of excitation sources table\n    photodetector=0,\n    fluorophores=[0], #potentially multiple fluorophores, so list of indices\n    location='my location',\n    notes='notes'\n)\n\n# Here we set up a list of fibers that our recording came from\nfibers_ref = DynamicTableRegion(\n    name=\"rois\", \n    data=[0], # potentially multiple fibers\n    description=\"source fibers\", \n    table=fibers_table\n)\n\n# Create a raw roiresponseseries, this is your main acquisition\nroi_response_series = RoiResponseSeries(\n    name=\"roi_response_series\",\n    description=\"my roi response series\",\n    data=np.random.randn(100, 1),\n    unit='F',\n    rate=30.0,\n    rois=fibers_ref,\n)\n\n# This is your processed data \ndeconv_roi_response_series = DeconvolvedRoiResponseSeries(\n    name=\"DeconvolvedRoiResponseSeries\",\n    description=\"my roi response series\",\n    data=np.random.randn(100, 1),\n    unit='F',\n    rate=30.0,\n    rois=fibers_ref,\n    raw=roi_response_series,\n)\n\nophys_module = nwbfile.create_processing_module(\n    name=\"ophys\", description=\"fiber photometry\"\n)\n\nophys_module.add(multi_commanded_voltage)\nnwbfile.add_acquisition(roi_response_series)\nophys_module.add(deconv_roi_response_series)\n\n# write nwb file\nfilename = 'test.nwb'\nwith NWBHDF5IO(filename, 'w') as io:\n    io.write(nwbfile)\n    \n# read nwb file and check its contents\nwith NWBHDF5IO(filename, 'r', load_namespaces=True) as io:\n    nwbfile = io.read()\n    # Access and print information about the acquisition\n    print(nwbfile.acquisition[\"roi_response_series\"])\n    # Access and print information about the processed data\n    print(nwbfile.processing['ophys'][\"DeconvolvedRoiResponseSeries\"])\n    # Access and print all of the metadata\n    print(nwbfile.lab_meta_data)\n```\n\nThis extension was created using [ndx-template](https://github.com/nwb-extensions/ndx-template).\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/akshay-jaggi/ndx-photometry",
    "keywords": "",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ndx-photometry",
    "package_url": "https://pypi.org/project/ndx-photometry/",
    "platform": null,
    "project_url": "https://pypi.org/project/ndx-photometry/",
    "project_urls": {
      "Homepage": "https://github.com/akshay-jaggi/ndx-photometry"
    },
    "release_url": "https://pypi.org/project/ndx-photometry/0.1.0/",
    "requires_dist": [
      "pynwb (>=1.3.0)",
      "numpy (<1.19.4)",
      "h5py (<3)"
    ],
    "requires_python": "",
    "summary": "extension for fiber photometry data",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15068271,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d982b42f93a8350906935aeaaa53e060f0dc28ecefdac313cc4b91395e219e2b",
          "md5": "dc8b2f993ed467464827c05f750a3c15",
          "sha256": "8649ab96253021d452b8fcebcf9f2978566e7eb6e40e11337e74a8408c7fdc41"
        },
        "downloads": -1,
        "filename": "ndx_photometry-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc8b2f993ed467464827c05f750a3c15",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 11157,
        "upload_time": "2022-09-12T14:21:54",
        "upload_time_iso_8601": "2022-09-12T14:21:54.836596Z",
        "url": "https://files.pythonhosted.org/packages/d9/82/b42f93a8350906935aeaaa53e060f0dc28ecefdac313cc4b91395e219e2b/ndx_photometry-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f18cbe421d3e104610651d01d8093c67d102dbdec2929365587c11521d8e7eac",
          "md5": "3789dc8c0facf95eff0e3286b30d1d86",
          "sha256": "52dae4ed7406433e509533d90a4f6e15c892dbd6f2b772a1fef914e7ccec749e"
        },
        "downloads": -1,
        "filename": "ndx-photometry-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3789dc8c0facf95eff0e3286b30d1d86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 48153,
        "upload_time": "2022-09-12T14:21:56",
        "upload_time_iso_8601": "2022-09-12T14:21:56.981770Z",
        "url": "https://files.pythonhosted.org/packages/f1/8c/be421d3e104610651d01d8093c67d102dbdec2929365587c11521d8e7eac/ndx-photometry-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d982b42f93a8350906935aeaaa53e060f0dc28ecefdac313cc4b91395e219e2b",
        "md5": "dc8b2f993ed467464827c05f750a3c15",
        "sha256": "8649ab96253021d452b8fcebcf9f2978566e7eb6e40e11337e74a8408c7fdc41"
      },
      "downloads": -1,
      "filename": "ndx_photometry-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dc8b2f993ed467464827c05f750a3c15",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 11157,
      "upload_time": "2022-09-12T14:21:54",
      "upload_time_iso_8601": "2022-09-12T14:21:54.836596Z",
      "url": "https://files.pythonhosted.org/packages/d9/82/b42f93a8350906935aeaaa53e060f0dc28ecefdac313cc4b91395e219e2b/ndx_photometry-0.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f18cbe421d3e104610651d01d8093c67d102dbdec2929365587c11521d8e7eac",
        "md5": "3789dc8c0facf95eff0e3286b30d1d86",
        "sha256": "52dae4ed7406433e509533d90a4f6e15c892dbd6f2b772a1fef914e7ccec749e"
      },
      "downloads": -1,
      "filename": "ndx-photometry-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3789dc8c0facf95eff0e3286b30d1d86",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 48153,
      "upload_time": "2022-09-12T14:21:56",
      "upload_time_iso_8601": "2022-09-12T14:21:56.981770Z",
      "url": "https://files.pythonhosted.org/packages/f1/8c/be421d3e104610651d01d8093c67d102dbdec2929365587c11521d8e7eac/ndx-photometry-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}