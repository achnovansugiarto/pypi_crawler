{
  "info": {
    "author": "Emanuele Palazzetti",
    "author_email": "emanuele.palazzetti@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n# pysettings\n\n[![PyPI version](https://badge.fury.io/py/pysettings-validator.svg)](https://badge.fury.io/py/pysettings-validator)\n[![Linting](https://github.com/palazzem/pysettings/actions/workflows/linting.yaml/badge.svg?branch=master)](https://github.com/palazzem/pysettings/actions/workflows/linting.yaml)\n[![Testing](https://github.com/palazzem/pysettings/actions/workflows/testing.yaml/badge.svg?branch=master)](https://github.com/palazzem/pysettings/actions/workflows/testing.yaml)\n\nPysettings is a Python package to store your application settings. Compared to some\nsettings managers, this package has been inspired by [Django Rest Frameworks validators][1]\nwhere you can validate the user input beforehand.\n\nThat simplifies your code because settings don't need to be validated in your application\nlogic. Available features are:\n* Store your application settings without using global objects.\n* Extend your settings using a `BaseSettings` class. The resulting class can be validated\n  using a `settings.is_valid()` method.\n* Fields are represented with an `Option` field that takes `validators` as parameter.\n  It's possible to set a `default` value if the option is not set by users.\n* Out of the box validators: `not_null`, `is_https_url`.\n* It's possible to add custom validators as functions.\n\n[1]: https://www.django-rest-framework.org/api-guide/validators/\n\n## Requirements\n\n* Python 3.7+\n\n## Getting Started\n\n`pysettings` is available on PyPI:\n\n```bash\n$ pip install pysettings-validator\n```\n\n### Create your Settings\n\n```python\nfrom pysettings.base import BaseSettings\nfrom pysettings.options import Option\nfrom pysettings.validators import is_https_url\n\n# Class definition\nclass Settings(BaseSettings):\n    url = Option(validators=[is_https_url])\n    description = Option()\n\n# Use settings in your application\nsettings = Settings()\nsettings.url = \"https://example.com\"\nsettings.description = \"A shiny Website!\"\nsettings.is_valid()  # returns (True, [])\n```\n\n### Settings API\n\n`settings` instance doesn't allow to set attributes not defined as `Option`. If you\ntry to set a setting that is not defined, a `OptionNotAvailable` exception is raised:\n\n```python\nclass Settings(BaseSettings):\n    description = Option()\n\n# Use settings in your application\nsettings = Settings()\nsettings.url = \"https://example.com\"  # raise `OptionNotAvailable`\n```\n\n`is_valid()` exposes a `raise_exception=True` kwarg in case you prefer to not raise\nexceptions in your code:\n\n```python\nclass Settings(BaseSettings):\n    url = Option(validators=[is_https_url])\n\n# Use settings in your application\nsettings = Settings()\nsettings.url = \"http://example.com\"\nsettings.is_valid()                       # raise ConfigNotValid exception\nsettings.is_valid(raise_exception=False)  # return (False, [{'url': [{'is_https_url': 'The schema must be HTTPS'}]}])\n```\n\n### Create a Custom Validator\n\n```python\n# app/validators.py\nfrom pysettings.exceptions import ValidationError\n\ndef is_a_boolean(value):\n    if isinstance(value, bool):\n        return True\n    else:\n        raise ValidationError(\"The value must a Boolean\")\n\n# app/settings.py\nfrom .validators import is_a_boolean\n\nclass Settings(BaseSettings):\n    dry_run = Option(validators=[is_a_boolean])\n    description = Option()\n\n# app/main.py\nsettings = Settings()\nsettings.dry_run = \"Yes\"\nsettings.description = \"Dry run mode!\"\nsettings.is_valid()  # raises ConfigNotValid exception\n```\n\n## Development\n\nWe accept external contributions even though the project is mostly designed for personal\nneeds. If you think some parts can be exposed with a more generic interface, feel free\nto open a GitHub issue and to discuss your suggestion.\n\n### Coding Guidelines\n\nWe use [flake8][1] as a style guide enforcement. That said, we also use [black][2] to\nreformat our code, keeping a well defined style even for quotes, multi-lines blocks and other.\nBefore submitting your code, be sure to launch `black` to reformat your PR.\n\n[1]: https://pypi.org/project/flake8/\n[2]: https://github.com/ambv/black\n\n### Testing\n\n`tox` is used to execute the following test matrix:\n* `lint`: launches `flake8` and `black --check` to be sure the code honors our style guideline\n* `py{35,36,37,38}`: launches `py.test` to execute all tests under Python 3.5, 3.6,\n  3.7 and 3.8.\n\nTo launch the full test matrix, just:\n\n```bash\n$ tox\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/palazzem/pysettings",
    "keywords": "",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pysettings-validator",
    "package_url": "https://pypi.org/project/pysettings-validator/",
    "platform": null,
    "project_url": "https://pypi.org/project/pysettings-validator/",
    "project_urls": {
      "Homepage": "https://github.com/palazzem/pysettings"
    },
    "release_url": "https://pypi.org/project/pysettings-validator/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.7.0",
    "summary": "Python package to store your application settings. Validators are built-in!",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15282899,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "203ec4d21730ba61ba2e0f5fc8a169d572b2f5ed3a0afdb4ef2cac2554128f59",
          "md5": "d6ecbb4bddfbce723c09be4598e14e1e",
          "sha256": "8491ea0e2373de5361c35d72915f254fc11bca3a976d8178802e6e7296189e3a"
        },
        "downloads": -1,
        "filename": "pysettings_validator-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6ecbb4bddfbce723c09be4598e14e1e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5.0",
        "size": 7072,
        "upload_time": "2020-03-14T20:20:15",
        "upload_time_iso_8601": "2020-03-14T20:20:15.981410Z",
        "url": "https://files.pythonhosted.org/packages/20/3e/c4d21730ba61ba2e0f5fc8a169d572b2f5ed3a0afdb4ef2cac2554128f59/pysettings_validator-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e25bf5d1bf0af055c35449d124bced4a731c7f7a44075fdd183dfaea4d48c6ff",
          "md5": "cef5a5c25ff793d740a4995b2d6e7670",
          "sha256": "5c8ffa5025d523b76966256e0bad489e00e60850bc116084a5460366fc5f081a"
        },
        "downloads": -1,
        "filename": "pysettings-validator-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cef5a5c25ff793d740a4995b2d6e7670",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5.0",
        "size": 6862,
        "upload_time": "2020-03-14T20:20:18",
        "upload_time_iso_8601": "2020-03-14T20:20:18.539552Z",
        "url": "https://files.pythonhosted.org/packages/e2/5b/f5d1bf0af055c35449d124bced4a731c7f7a44075fdd183dfaea4d48c6ff/pysettings-validator-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ecbe254fc8eb9433ad747584f2ddaa523a841d5a16d348c10453641dc845cfdb",
          "md5": "7a4533be5b423d6ec5688deb777bea9f",
          "sha256": "2fcf116ca7722ec936f773329bd309b87ad09a87dae153a9e4171366b5ff7990"
        },
        "downloads": -1,
        "filename": "pysettings-validator-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7a4533be5b423d6ec5688deb777bea9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 6759,
        "upload_time": "2022-10-02T17:59:18",
        "upload_time_iso_8601": "2022-10-02T17:59:18.797096Z",
        "url": "https://files.pythonhosted.org/packages/ec/be/254fc8eb9433ad747584f2ddaa523a841d5a16d348c10453641dc845cfdb/pysettings-validator-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ecbe254fc8eb9433ad747584f2ddaa523a841d5a16d348c10453641dc845cfdb",
        "md5": "7a4533be5b423d6ec5688deb777bea9f",
        "sha256": "2fcf116ca7722ec936f773329bd309b87ad09a87dae153a9e4171366b5ff7990"
      },
      "downloads": -1,
      "filename": "pysettings-validator-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7a4533be5b423d6ec5688deb777bea9f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 6759,
      "upload_time": "2022-10-02T17:59:18",
      "upload_time_iso_8601": "2022-10-02T17:59:18.797096Z",
      "url": "https://files.pythonhosted.org/packages/ec/be/254fc8eb9433ad747584f2ddaa523a841d5a16d348c10453641dc845cfdb/pysettings-validator-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}