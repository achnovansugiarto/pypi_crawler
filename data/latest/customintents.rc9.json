{
  "info": {
    "author": "Parsa Roshanak (iparsw)",
    "author_email": "parsaroshanak@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\n# Custom Intents\n\nV0.8.2\n(it's still in buggy alpha)\n\n## a simple way to create chatbots Ai, image classification Ai and more!!\n\n# installation\n\nyou can install the package from pypi (pip)\n\n```commandline\npip install CustomIntents\n```\n\n## examples\n\n![Demo1](images/img2.png)\n\n![Demo2](images/img.png)\n\n\n\nA package build on top of keras for creating and training deep learning chatbots (text classification), binary image classification and linear regression models in just three lines of code \n\nthe package is inspired by NeuralNine, neuralintents package a packege that let you build chatbot models with 3 lines of code\n\n# ImageGenerator class\nyou can easily use state of the art StableDiffiusion model with this class\n\n## Init arguments\n```python\ndef __init__(self, *,\n             model: str = \"StableDiffusion\",\n             img_height: int = 256,\n             img_width: int = 256,\n             jit_compile: bool = False,\n             cpu_only: bool = False):\n```\n\nmodel : for now only StableDiffusion is available\n\nimg_height : it's the height of the genarated image it should be a multiple of 128\n\nimg_width : it's the width of the genarated image it should be a multiple of 128\n\njit_comple : it's a boolean indicating using just in time compliling\n\ncpu_only : it's a boolean indicating whether to use CPU only or GPU\n\nnote every argument should be passed as an keyword argument\n\n## generate method\n\n```python\ndef generate(self, *,\n             prompt: str = \"Iron man making breakfast\",\n             batch_size: int = 1,\n             filename: str = \"sample\",\n             num_steps: int = 50):\n```\n\nprompt : it's the prompt to create the image from\n\nbatch_size : how many of images to create\n\nfilename : the name of file to save\n\nnum_steps : the number of steps to run the image through the model bigger the number it will generate better images but also it will take longer to generate\n\n## gradio_preview method\n\nthis method will create a gradio preview\n\n this method doesn't get any arguments\n\n## examples of using this class \n\n### creating a gradio preview\n\n```python\nfrom CustomIntents import ImageGenerator\n\nmodel = ImageGenerator(model=\"StableDiffusion\",\n                       img_width=512,\n                       img_height=512,\n                       cpu_only=True,\n                       jit_compile=True)\n\nmodel.gradio_preview()\n```\n\n### generating an image\n\nthis code will generate two images and save them as \"a sample image.jpg\"  \n\n```python\nfrom ImageGenerator import ImageGenerator\n\nmodel = ImageGenerator(model=\"StableDiffusion\",\n                       img_width=512,\n                       img_height=512,\n                       cpu_only=True,\n                       jit_compile=True)\n\nmodel.generate(prompt=\"a cat lying on a bed\",\n               batch_size=2,\n               filename=\"a sample image\",\n               num_steps=50)\n```\n\n### Setting Up A Basic Chatbot\n\n```python\nfrom CustomIntents import ChatBot\nchatbot = ChatBot(model_name=\"test_model\", intents=\"intents.json\")\nassistant.train_model()\nassistant.save_model()\ndone = False\nwhile not done:\n    message = input(\"Enter a message: \")\n    if message == \"STOP\":\n        done = True\n    else:\n        assistant.request(message)\n```\n\n### Binding Functions To Requests\n\nthis is inspired by neuralintents\n\n```python\nfrom CustomIntents import ChatBot\ndef function_for_greetings():\n    print(\"You triggered the greetings intent!\")\n    # Some action you want to take\ndef function_for_stocks():\n    print(\"You triggered the stocks intent!\")\n    # Some action you want to take\nmappings = {'greeting' : function_for_greetings, 'stocks' : function_for_stocks}\nassistant = ChatBot('intents.json', intent_methods=mappings ,model_name=\"test_model\")\nassistant.train_model()\nassistant.save_model()\ndone = False\nwhile not done:\n    message = input(\"Enter a message: \")\n    if message == \"STOP\":\n        done = True\n    else:\n        assistant.request(message)\n```\n### Sample intents.json File\n```json\n{\"intents\": [\n  {\"tag\": \"greeting\",\n    \"patterns\": [\"Hi\", \"Salam\", \"Nice to meet you\", \"Hello\", \"Good day\", \"Hey\", \"greetings\"],\n    \"responses\": [\"Hello!\", \"Good to see you again!\", \"Hi there, how can I help?\"]\n  },\n  {\"tag\": \"goodbye\",\n    \"patterns\": [\"bye\", \"good bye\", \"see you later\"],\n    \"responses\": [\"bye\", \"good bye\"],\n    \"context_set\": \"\"\n  },\n  {\"tag\": \"something\",\n    \"patterns\": [\"something\", \"something else\", \"etc\"],\n    \"responses\": [\"the response to something\"],\n  }\n]\n}\n```\n\n# ChatBot Class\n\nthe first class in CustomIntent package is ChatBot\nits exacly what you thing a chatbot\n\n## Init arguaments\n\n```python\ndef __init__(self, intents, intent_methods, model_name=\"assistant_model\", threshold=0.25, w_and_b=False,\n             tensorboard=False):\n```\nintents : its the path of your intents file\n\nintents_method : its a dictionary of mapped functions\n\nmodel_name : its just the name of your model\n\nthreshold : its the accuracy threshold of your model its set to 0.25 by default\n\nw_and_b : it will connect to wandb if set to True (you will need to login first)\n\ntensorboard : Not available at the time\n\n## Training\n\nyou can start training your model with one function call train_model\n\ntraining model arguments :\n```python\ndef train_model(self, epoch=None, batch_size=5, learning_rate=None,\n                ignore_letters=None, timeIt=True, model_type='s1',\n                validation_split=0, optimizer=None, accuracy_and_loss_plot=True):\n```\n\nepoch: An epoch refers to one cycle of training the neural network with all the training data. This argument specifies the number of cycles that the network will undergo.\n\nbatch_size: An integer or None. This determines the number of samples per gradient update. You can ignore this argument if you like.\n\nlearning_rate: The learning rate is a hyper-parameter that controls the weights of the neural network with respect to the loss gradient. It defines how quickly the network updates the concepts it has learned. In simple terms, a larger learning rate makes the model learn faster but it can also deviate from the correct path more easily.\n\nignore_letters: A list of letters that you want to ignore. By default, it ignores the characters (? . , !). You can pass an empty list if you don't want to ignore any characters.\n\ntimeIt: This argument times the training process.\n\nmodel_type: You can select one of the predefined models (which will be described later).\n\nvalidation_split: You can split a portion of your data for validation only, meaning the model will not be trained on these samples. This argument should be a float between 0 and 1. I recommend not creating a validation split unless you have a very large dataset with many similar patterns.\n\noptimizer: You can choose between SGD, Adam, Adamx, and Adagard.\n\n## save_model\n\nit will save your model as two .pkl files and a .h5 file (don't add .h5 or .pkl)\n\n```python\ndef save_model(self, model_name=None):\n```\n\nmodel_name : if its None (defualt), it will save the files like (model_name.h5)(model_name_words.pkl)(model_name_classes.pkl) where the model_name is the name you specified in the first place\n\n## load_model\n\nit will load a model from those three files\n\n```python\ndef load_model(self, model_name=None):\n```\n\nmodel_name : if its None (defualt), it will look for files like (model_name.h5)(model_name_words.pkl)(model_name_classes.pkl) where the model_name is the name you specified in the first place\n\n## request_tag\n\nyou will pass it a massege and it will return the predicted tag for you\n\n```python\ndef request_tag(self, message, debug_mode=False, threshold=None):\n```\n\nmessage : the actual message\n\ndebug_mode : it will print every step of the procces for debuging perpes\n\nthreshold : you can set a accuracy threshold if not specified it will use the threshold you set when initilizing the bot and if you didn't specified there either it is set to 0.25 by default\n\n## request_response\n\nthe same as request_tag but it will return a random response from intents\n\n```python\ndef request_response(self, message, debug_mode=False, threshold=None):\n```\n\n## gradio_preview\n\nit will open up a nice gui for testing your model in your browser\n\n```python\ndef gradio_preview(self, ask_for_threshold=False, share=False, inbrowser=True):\n```\n\nask_for_threshold : if set to True it will create a slider that you can set the threshold of the model with it\n\nshare : if set to True it will make the demo public\n\ninbrowser : it will aoutomaticlly open a new browser page if set to True\n\n![Demo](images/img.png)\n\n## cli_preview\n\n```python\ndef cli_preview(self):\n```\n\na simple cli interface for testing your model\n\n## gui_preview\n\na custom gui for triyng or even deploying your model\n\n```python\ndef gui_preview(self, user_name=\"\"):\n```\n\nuser_name : it will only say hello to you if you pass your name for now\n\n![Demo](images/img2.png)\n\n## model types\n\nyou can choose one of the defined models according to the size of diffrente patterns and tags you have (you can just try and see wich one is right for your use case)\n\nxs1 : a very fast and small model\n\nxs2 : still small but better for more tags\n\n\ns1 : the default model (hidden layers : 128-64)\n\ns2 : its better than s1 when you have small number of similar tags that s1 cant predict\n\ns3 : most of the time you dont need this (hidden layers : 128-64-64)\n\ns4 : its like a s2 on streoid its suited when you have a lot of patterns for tags that have similar patterns\n\ns5 : most of the time you dont need this either (hidden layers : 128-64-64-32)\n\n\nm1 : great balance of perfomance and accuracy for medium size intent files\n\nm2 : great accuracy for medium size intent files\n\nm3 : m3 to m1 is like s2 to s1 its more suited when you have smaller number of tags but hard to difrentiat\n\nl1 - l2 - l3 - l4 - l5 - xl1 - xl2 - xl3 - xl5 : are bigger models for more information read MODELS.md\n\n# JsonIntents Class\n\nthis class is used to add and edit Json files containing intents\n```python\ndef __init__(self, json_file_adrees):\n```\n\nyou just need to pass the path of the json file the function you want\n\n## add_pattern_app\n\nits a function that ask you to input new patterns for tags (you can pass an especific tag to ask for that or it will cycle through them all and will go to the next tag by inputing D or d)\n\n```python\ndef add_pattern_app(self, tag=None):\n```\n\n## add_tag_app\n\nit will add new tags to your json file \n\n```python\ndef add_tag_app(self, tag=None, responses=None):\n```\ntag : the name of the new tag you want to add\n\nresponses : a list of responses (you can add later on as well)\n\n## delete_duplicate_app\n\nit will check for duplicate in patterns and deletes them for you\n\n## an example of using this class\n\n```python\nfile = JsonIntents(\"internet intents.json\")\nfile.delete_duplicate_app()\nfile.add_tag_app(tag=\"about\")\nfile.add_pattern_app(\"about\")\n```\n\n# ImageClassificator class\n\nthe seccond class in CustomIntent package is ImageClassificator\nit let you create and train deep learning image classification models with just three line of code !!\n\n## init arguments\n```python\ndef __init__(self, data_folder=\"data\",\n                 model_name=\"imageclassification_model\",\n                 number_of_classes=2,\n                 classes_name=None,\n                 gpu=None, \n                 checkpoint_filepath='/tmp/checkpoint_epoch:{epoch}'):\n```\n\ndata_folder : the path to where you located your data\n\nmodel_name : name your model\n\nnumber_of_classes : number of difrent classes you have in your data (you should put the pictures of every class in a sub folder in your data folder)\n\nclasses_name : a list of names correspunding to your classes (they should be the same as the folder name of correspunding data folder for example if you have 3 sub folder in your data folder as banana apple pineapple you should pass [\"banana\", \"apple\", \"pineapple\"])\n\ngpu : you can pass True or False if you dont pass anything it will try to use your gpu if you have a cuda enaibled graphic card and you have cudatoolkit and cuDNN installed and if you dont it will use your cpu\n\ncheckpoint_filepath : path to where you want your checkpoints\n\n## Training\n\nyou can start training your model with one function call train_model\n\ntraining model arguments :\n```python\ndef train_model(self, epochs=20,\n                    model_type=\"s1\",\n                    logdir=None,\n                    optimizer_type=\"adam\",\n                    learning_rate=0.00001,\n                    class_weight=None,\n                    prefetching=False,\n                    plot_model=True,\n                    validation_split=0.2,\n                    test_split=0,\n                    augment_data=False,\n                    tensorboard_usage=False,\n                    stop_early=False,\n                    checkpoint=False):\n```\n\nepoch : an epoch basicly means training the neural network with all the training data for one cycle and this arguament says how many of this circles it will go\n\nmodel_type : you can select one of the defined models (we will look at the available models later on)\n\nlogdir : a directory to hold your tensorboard log files you can leave is empty if you dont care\n\noptimizer_type : you can only choose adam right now\n\nlearning_rate : Learning rate is a hyper-parameter that controls the weights of our neural network with respect to the loss gradient. It defines how quickly the neural network updates the concepts it has learned. (in simple terms if its bigger our model learn faster but it can go of track faster)\n\nclass_weight : if you have an unbalanced dataset you can path a dictionary with the weight that you what to assosiate with every class () \n\nprefetching : prefetching data\n\nplot_model : it will plot the model architecture for you \n\nvalidation_split : you can split a portion of your data for validation only (model will not get trained on them) it should be float between 0 and 1 (i will recommend to not create a validation split unless you have a really huge data set with lots of similar patterns)\n\naugment_data : if set to true the model will also be trained on augmented data \n\ntensorboard_usage : it will use tensorboard\n\nstop_early : if set to true it will stop training if validation loss is the same or increasing for more than 5 epochs\n\ncheckpoint : if set to true it will save checkpoints if the validation loss is the lovest ever seen\n\n## save_model\n\nit will save your model a .h5 file\n\n```python\ndef save_model(self, model_file_name=None):\n```\n\nmodel_name : if its None (defualt), it will save the files like (model_name.h5) where the model_name is the name you specified in the first place\n\n## load_model\n\nit will load a model from those three files\n\n```python\ndef load_model(self, name=\"imageclassification_model\"):\n```\n\nmodel_name : if its None (defualt), it will look for files like (imageclassification_model.h5) \n\n## predict\n\nnow you can predict \n\n```python\ndef predict(self, image, image_type=None, full_mode=False, accuracy=False):\n```\n\nimage : a path to an image file or a numpy array of the image or a cv2 image\n\nimage_type : if its None (defualt), it will try to detect if the image is a cv2 image or a numpy array of the image or a path to the image\n\nfull_mode : if you set it to true it will return every class and its probability\n\naccuracy : if you set it to true it will return a tuple of the class name and the probability\n\n(if both full_mode and accuracy set to false (defualt behavier) it will just return the most likly class name)\n\n## predict_face\n\n```python\n    def predict_face(self, img, image_type=None, full_mode=False,\n                     accuracy=False, return_picture=False,\n                     save_returned_picture=False, saved_returned_picture_name=\"test.jpg\",\n                     show_returned_picture=False):\n```\n\nimg : a path to an image file or a numpy array of the image or a cv2 image\n\nimage_type : if its None (defualt), it will try to detect if the image is a cv2 image or a numpy array of the image or a path to the image\n\nfull_mode : if you set it to true it will return every class and its probability\n\naccuracy : if you set it to true it will return a tuple of the class name and the probability\n\nreturn_picture : if set to true it will return a picture with faces in rectangles and their predicted class writen on top of them\n\nsave_returned_picture : if set to True it will save the returned picture\n\nsaved_returned_picture_name : if you set save_returned_picture to true you can use this to especifie the name of the saved picture\n\nshow_returned_picture : if set to true it will open the returned picture in a cv2 preview\n\n## realtime_prediction\n\n```python\ndef realtime_prediction(self, src=0):\n```\n\nsrc : if you have multiple webcams or virtual webcams it will let you choose from them if you only have one live it empty\n\n## realtime face prediction\n\nits exacly like the realtime_prediction() method but it will detect facec with a haarcascadde and will feed the model with the facec to predict\n\n```python\ndef realtime_face_prediction(self, src=0, frame_rate=5):\n```\n\nsrc : if you have multiple webcams or virtual webcams it will let you choose from them if you only have one live it empty\n\nframe_rate : its the number of frames to skip before predicting again\n\n\n## gradio_preview\n\nit will open up a nice gui for testing your model in your browser\n\n```python\ndef gradio_preview(self, share=False, inbrowser=True, predict_face=False):\n```\n\nshare : if set to True it will make the demo public\n\ninbrowser : it will aoutomaticlly open a new browser page if set to True\n\npredict_face : if set to True it will look for faces and feed them to the model \n\n## example of using ImageClassificator\n\nin this example i have a folder in data/full that contains 4 sub folders (beni, khodm, matin, parsa) and in every one of them i have a lot of pictures of my friends (the folder name corredpunds to their names for example in beni folder there are beni's pictures, btw khodm means myself in my languge) and i want to train a model to detect which one of us we are in the picture\n\n```python\nfrom CustomIntents import ImageClassificator\n\nmodel = ImageClassificator(model_name=\"test_m1\", data_folder=\"data/full\", number_of_classes=4, classes_name=[\"beni\", \"khodm\", \"matin\", \"parsa\"])\nmodel.train_model(epochs=10, model_type=\"m1\", logdir=\"logs\", learning_rate=0.0001, prefetching=False)\nmodel.save_model(model_file_name=\"test_m1\")\n```\n```python\nfrom CustomIntents import BinaryImageClassificator\n\nmodel = ImageClassificator(model_name=\"test_m1\", data_folder=\"data/full\", number_of_classes=4, classes_name=[\"beni\", \"khodm\", \"matin\", \"parsa\"])\nmodel.load_model(name=\"test_m1\")\nresult = model.realtime_face_prediction()\n```\n![Demo3](images/realtime_prediction_example.png)\nand as you see in the picture above you can see it under the that it is me in the picture with a really high accuracy\n\n# StyleTransformer class\n\nthe fourth class in CustomIntent package is StyleTransformer\nit let you transform an image to the style of another image\n\n![Demo3](images/style_transformer.png)\n\n## init arguments\n\n```python\ndef __init__(self, image_path=None,\n             style_reference_image_path=None,\n             result_prefix=\"test_generated\"):\n```\n\nimage path : the path to the original image\n\nstyle_reference_image_path : the path to the style reference image\n\nresult_prefix : the prefix for the result file\n\n## transform method\n\nthe main method of this class\n\n```python\ndef transfer(self, iterations=4000, iteration_per_save=100):\n```\n\niterations : the number of iterations\n\niteration_per_save : save every _ iteration (where _ is the number you pass)\n\n## gradio_preview method\n\na browser based app to use this class\n\n```python\ndef gradio_preview(self, share=False, inbrowser=True):\n```\n\nshare : if set to True it will make the demo public\n\ninbrowser : it will aoutomaticlly open a new browser page if set to True\n\n## example of using StyleTransformer\n\n### passing the path of base and reference image\n\n```python\nfrom CustomIntents import StyleTransformer\n\nmodel = StyleTransformer(image_path=\"base_image.jpg\", style_reference_image_path=\"style_reference_image.jpg\")\nmodel.transfer(iterations=500, iteration_per_save=50)\n```\n\nthis code will perform the teransformation for 500 times and save them every 50 steps\n\n### Using gradio preview\n\n```python\nfrom CustomIntents import StyleTransformer\n\nmodel = StyleTransformer()\nmodel.gradio_preview()\n```\n![Demo3](images/dtyleTransformer_gradio.png)\n\n#### *this model is slow so use reasonable iteration counts\ndon't use ridiculous numbers like 4000 like me, it took about 15 minutes on a 1660ti\n\n# BinaryImageClassificator class\n\nthe fourth class in CustomIntent package is BinaryImageClassificator\nit let you create and train deep learning image classification models with just three line of code !!\n\n## Init arguaments\n\n```python\ndef __init__(self, data_folder=\"data\", model_name=\"imageclassification_model\",\n             first_class=\"1\", second_class=\"2\"):\n```\n\ndata_folder : it's the path of your data folder (you should put your training images in two subfolder representing their label (class))\n\nmodel_name : your model's name\n\nfirst_class : you can name your classes so when you whant to predict it returns their name insted of 1s and 2s\n\nseccond_class : //\n\n## Training\n\nyou can start training your model with one function call train_model\n\ntraining model arguments :\n```python\ndef train_model(self, epochs=20, model_type=\"s1\", logdir=None,\n                optimizer_type=\"adam\", learning_rate=0.00001,\n                class_weight=None, prefetching=False, plot_model=True,\n                validation_split=0.2):\n```\n\nepoch : an epoch basicly means training the neural network with all the training data for one cycle and this arguament says how many of this circles it will go\n\nmodel_type : you can select one of the defined models (read MODELS.md for more information)\n\nlogdir : a directory to hold your tensorboard log files you can leave is empty if you don't care\n\noptimizer_type : you can only choose adam right now\n\nlearning_rate : Learning rate is a hyper-parameter that controls the weights of our neural network with respect to the loss gradient. It defines how quickly the neural network updates the concepts it has learned. (in simple terms if its bigger our model learn faster but it can go of track faster)\n\nclass_weight : if you have an unbalanced dataset you can path a dictionary with the weight that you what to assosiate with every class () \n\nprefetching : prefetching data\n\nplot_model : it will plot the model architecture for you \n\nvalidation_split : you can split a portion of your data for validation only (model will not get trained on them) it should be float between 0 and 1 (i will recommend to not create a validation split unless you have a really huge data set with lots of similar patterns)\n\n## save_model\n\nit will save your model a .h5 file (don't add .h5)\n\n```python\ndef save_model(self, model_file_name=None):\n```\n\nmodel_name : if its None (defualt), it will save the files like (model_name.h5) where the model_name is the name you specified in the first place\n\n## load_model\n\nit will load a model from those three files\n\n```python\ndef load_model(self, name=\"imageclassification_model\"):\n```\n\nmodel_name : if its None (defualt), it will look for files like (imageclassification_model.h5) \n\n## predict\n\nnow you can predict \n\n```python\ndef predict(self, image, image_type=None, accuracy=False):\n```\n\nimage : a path to an image file or a numpy array of the image or a cv2 image\n\nimage_type : if its None (defualt), it will it will try to detect if the image is a cv2 image or a numpy array of the image or a path to the image\n\naccuracy : if you set it to true it will return a tuple of the class name and the probability\n\n\n## predict from file path (legacy)\n\nit will predict what class the image blongs to from a path\n\n```python\ndef predict_from_files_path(self, image_file_path):\n```\n\nimage_file_path : the path of the image you want to predict\n\nit will return the name of the class and the percentage that its correct\n\n## predict from imshow (legacy)\n\nit will predict what class the image blongs to from a cv2 object\n\n```python\ndef predict_from_imshow(self, img):\n```\n\nimg : a cv2 image object \n\nit will return the name of the class and the percentage that its correct\n\n## realtime prediction\n\nit will predict from a live video feed (it will open a live cv2 video feed)\n\n```python\ndef realtime_prediction(self, src=0):\n```\n\nsrc : if you have multiple webcams or virtual webcams it will let you choose from them if you only have one live it empty\n\n## realtime face prediction\n\nits exacly like the realtime_prediction() method but it will detect facec with a haarcascadde and will feed the model with the facec to predict\n\n```python\ndef realtime_face_prediction(self, src=0):\n```\n\nsrc : if you have multiple webcams or virtual webcams it will let you choose from them if you only have one live it empty\n\n## gradio_preview\n\nit will open up a nice gui for testing your model in your browser\n\n```python\ndef gradio_preview(self, share=False, inbrowser=True):\n```\n\nshare : if set to True it will make the demo public\n\ninbrowser : it will aoutomaticlly open a new browser page if set to True\n\n## example of using BinaryImageClassificator\n\n```python\nfrom CustomIntents import BinaryImageClassificator\n\nmodel = BinaryImageClassificator(model_name=\"test1\", data_folder=\"data/parsa\", first_class=\"sad\", second_class=\"happy\")\nmodel.train_model(epochs=5, model_type=\"s1\", logdir=\"logs\", learning_rate=0.0001, prefetching=True) #, class_weight={0: 1.0, 1: 2.567750677506775})\nmodel.save_model(model_file_name=\"test1\")\n```\n```python\nfrom CustomIntents import BinaryImageClassificator\n\nmodel.load_model(\"models/test1\")\nmodel.realtime_face_prediction()\n```\n\n# PLinearRegression class\n\nit's a simple linear regression class with one input and one output\n\n## Init arguaments\n\n```python\ndef __init__(self, data=None, x_axes1=None, y_axes1=None, model_name=\"test model\"):\n```\n\ndata : if you have your data as a aray like [[x_axes], [y_axes]] you can pass it here\n\nx_axes1 : if you have your x values (inputs) and y values (output) seperetly you can pass the array that contains x valeus here\n\ny_axes1 : if you have your x values (inputs) and y values (output) seperetly you can pass the array that contains y valeus here\n\nmodel_name : name your model\n\n## train model\n\nyou will train your model on your data with this method\n\n```python\ndef train_model(self, algorythm=\"1\", training_steps=10000,\n                start_step=None, verbose=1, plot_input_data=True,\n                learning_rate=0.01, plot_result=True):\n```\n\nalgorythm : you can choose bitween 1, 1.1 and 2  (1 is really simple and fast but 2 is the propper linear reggresion one)\n\ntraining_steps : it's how many steps you want to train your model\n\nstart_step : it's the starting stepfor algorythm 1 and 1.1\n\nverbose : if it's set to 1 it will show you the details of trainong in every step\n\nplot_input_data : it will plot the training data\n\nlearning_rate : it's the learning rate used for algorythm 2\n\nplot_result : it will plot the line of best fit that it found along the side of the training data\n\n## save the model to csv\n\nit will save your model as a csv file containing the information of the line of  best fit\n\n```python\ndef save_model_to_csv(self, file_dir=\"test_model.csv\"):\n```\n\nfile_dir : the name and dir you want to save your model to (include .csv)\n\n## load model from csv\n\nit will load your model from a csv file containing the information of the line of  best fit\n\n```python\ndef load_model_from_csv(self, file_dir=\"test_model.csv\")\n```\n\nfile_dir : the name and dir you want to load your model from (include .csv)\n\n## make prediction\n\nit will make predictions for you\n\n```python\ndef make_prediction(self, x):\n```\n\nx : your input data either in a numerical form or a numpy array containing multiple numerical values\n\nit will return either a float (if you input is just a numerical value) or a numpy array containing multiple floats\n\n# scanner moudule\n\nthis moudule is created for helping you scan faces this is helpful for person recognition emotion recognition etc.\n\n## face_scanner function\n```python\ndef face_scanner(category: str,                  # category name\n                 sub_category: str,              # sub category name\n                 base_dir: str,                  # base directory path\n                 number_of_photos: int,          # number of photos to take\n                 number_of_frames_to_skip: int,  # number of frames to skip before taking images \n                 file_name: str,                 # file name\n                 image_size: int = 256,          # width and height of image (it will be square)\n                 haar_file: str = None,          # directory containing haarcascade\n                 camera: int = 0,                # camera\n                 colored: bool = False):         # True if you want to save the colored image\n```\n\n## facsScannerCliApp\nthis function will command app for facsScanner\n\n```python\nfrom CustomIntents import scanner\n\nscanner.facsScannerCliApp()\n```\n\n## faceScannerGuiApp\nit will command start a GUI app for faceScanner\n\n```python\nfrom CustomIntents import scanner\n\nscanner.faceScannerGuiApp()\n```\n\n<h3>Visitors :</h3>\n<br>\n<img src=\"https://profile-counter.glitch.me/iparsw/count.svg\" alt=\"Visitors\">\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iparsw/custom-intent.git",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "CustomIntents",
    "package_url": "https://pypi.org/project/CustomIntents/",
    "platform": null,
    "project_url": "https://pypi.org/project/CustomIntents/",
    "project_urls": {
      "Homepage": "https://github.com/iparsw/custom-intent.git"
    },
    "release_url": "https://pypi.org/project/CustomIntents/0.8.2/",
    "requires_dist": [
      "gmpy2 (==2.1.5)",
      "gradio (==3.16.2)",
      "keras (==2.10.0)",
      "Keras-Preprocessing (==1.1.2)",
      "matplotlib (==3.6.2)",
      "nltk (==3.8)",
      "numpy (==1.23.5)",
      "opencv-python (==4.7.0.68)",
      "setuptools (==65.7.0)",
      "tensorflow (==2.10.0)",
      "wandb (==0.13.7)",
      "music21 (==8.1.0)",
      "future (==0.18.2)",
      "customtkinter (==5.0.3)",
      "pillow (==9.3.0)"
    ],
    "requires_python": ">=3.9, <=3.11",
    "summary": "",
    "version": "0.8.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16787723,
  "releases": {
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cf5a4e44064f017fd1035eef66a7113bfbc05cdafae586f80f783ee9ee1d090",
          "md5": "d2b6ced0cc11ce429f3e983425f8c150",
          "sha256": "1096de1de081508a17efaf88e8d45bc83590d75bdf472f6e822e7cb8c75c4447"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d2b6ced0cc11ce429f3e983425f8c150",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <3.11",
        "size": 180237,
        "upload_time": "2023-01-10T20:48:21",
        "upload_time_iso_8601": "2023-01-10T20:48:21.615877Z",
        "url": "https://files.pythonhosted.org/packages/0c/f5/a4e44064f017fd1035eef66a7113bfbc05cdafae586f80f783ee9ee1d090/CustomIntents-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f57a44d57a46a964f7acb293a14efa2ef97261d4df7a271117f22486cbb759e5",
          "md5": "73fb22fae83b52fff4f23634c3b5b2b3",
          "sha256": "3107a7efef50982909e962704c161d6fa26a6804fb0a56478443c7a3bc6b3dd6"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "73fb22fae83b52fff4f23634c3b5b2b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <3.11",
        "size": 178486,
        "upload_time": "2023-01-10T20:48:24",
        "upload_time_iso_8601": "2023-01-10T20:48:24.491462Z",
        "url": "https://files.pythonhosted.org/packages/f5/7a/44d57a46a964f7acb293a14efa2ef97261d4df7a271117f22486cbb759e5/CustomIntents-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99b5b5605aebdda7a1b4af2a46297ce76a0c2a6e7fabb6e7600e403e0b6213d0",
          "md5": "901fbbb741c35113c40dc468c4054d15",
          "sha256": "6a3cee5647cda607772ffbd4d965452777937e6c5addb38c4f95beee21d1cf36"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "901fbbb741c35113c40dc468c4054d15",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <3.11",
        "size": 181441,
        "upload_time": "2023-01-11T17:52:26",
        "upload_time_iso_8601": "2023-01-11T17:52:26.004607Z",
        "url": "https://files.pythonhosted.org/packages/99/b5/b5605aebdda7a1b4af2a46297ce76a0c2a6e7fabb6e7600e403e0b6213d0/CustomIntents-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "266756f8c3a862e8479b8ecd01c09adc9ff91c88a51a75e392e4e67a3d3fab6c",
          "md5": "4171759e0f170472530335cf6aa64f77",
          "sha256": "46063c3be6c6c2f0a2841d98352b7aed7a8048b6cdc7aaba7cdafd571751f1d3"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4171759e0f170472530335cf6aa64f77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <3.11",
        "size": 181248,
        "upload_time": "2023-01-11T17:52:28",
        "upload_time_iso_8601": "2023-01-11T17:52:28.410199Z",
        "url": "https://files.pythonhosted.org/packages/26/67/56f8c3a862e8479b8ecd01c09adc9ff91c88a51a75e392e4e67a3d3fab6c/CustomIntents-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f7e58a7c098e3e6313786cfcc621802332aba28d1a97fa11ec603a66ab40578",
          "md5": "63346f5cd55fffffef94ef070c76013b",
          "sha256": "2c296f5d5048bc90b6aec9ddcfd37284bd75b734eae587d9a81312fba87d0c48"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.7.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63346f5cd55fffffef94ef070c76013b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <=3.11",
        "size": 182312,
        "upload_time": "2023-01-12T16:44:44",
        "upload_time_iso_8601": "2023-01-12T16:44:44.911204Z",
        "url": "https://files.pythonhosted.org/packages/8f/7e/58a7c098e3e6313786cfcc621802332aba28d1a97fa11ec603a66ab40578/CustomIntents-0.7.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17a8a10854636871a7853ecfeef84353ae411ca527c6cfbf1d1bed5f497b04e5",
          "md5": "3a29fe6f7884d386418877f955abdced",
          "sha256": "ce2d0e3c36c8c6008b8e36865cadaf8dd1b78a6c0c7c3567c72a942c1f6f8c6f"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3a29fe6f7884d386418877f955abdced",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <=3.11",
        "size": 182069,
        "upload_time": "2023-01-12T16:44:47",
        "upload_time_iso_8601": "2023-01-12T16:44:47.778993Z",
        "url": "https://files.pythonhosted.org/packages/17/a8/a10854636871a7853ecfeef84353ae411ca527c6cfbf1d1bed5f497b04e5/CustomIntents-0.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bde1037389dd90b9576037c38e34ae59deea72e9379d0f76cf82d644eefbd30",
          "md5": "3164375e5f75c7fda3164590b78b527c",
          "sha256": "73cbe421871ea92c48a23e45644c268f75c893c7cd9c1222d9208cea55e80653"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.7.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3164375e5f75c7fda3164590b78b527c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <=3.11",
        "size": 186425,
        "upload_time": "2023-01-15T21:05:39",
        "upload_time_iso_8601": "2023-01-15T21:05:39.356264Z",
        "url": "https://files.pythonhosted.org/packages/3b/de/1037389dd90b9576037c38e34ae59deea72e9379d0f76cf82d644eefbd30/CustomIntents-0.7.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ab5ad6abc26a2e217cd7b6f6dfdf56cde0774aac050578e35b2d477db55a3bf",
          "md5": "a99320937c02be4b6eeeae0bf48cc8fa",
          "sha256": "003296823782c943bdbc6c3143261b65944f26992ccd6677e5d7be6516cb57ff"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a99320937c02be4b6eeeae0bf48cc8fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <=3.11",
        "size": 184834,
        "upload_time": "2023-01-15T21:05:42",
        "upload_time_iso_8601": "2023-01-15T21:05:42.830922Z",
        "url": "https://files.pythonhosted.org/packages/3a/b5/ad6abc26a2e217cd7b6f6dfdf56cde0774aac050578e35b2d477db55a3bf/CustomIntents-0.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f60514594a8cddac7bb070a731cfe52830f18f3f93e1d0e1b6b97ee1e626bfb7",
          "md5": "3bb37e97b69385c17215600455c31839",
          "sha256": "b3684fee5372865f677457c26659b0cb67dad503366268107169a2dacfc63a14"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.7.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3bb37e97b69385c17215600455c31839",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <=3.11",
        "size": 187011,
        "upload_time": "2023-01-17T22:41:36",
        "upload_time_iso_8601": "2023-01-17T22:41:36.063542Z",
        "url": "https://files.pythonhosted.org/packages/f6/05/14594a8cddac7bb070a731cfe52830f18f3f93e1d0e1b6b97ee1e626bfb7/CustomIntents-0.7.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62e137cabd1a040ade7651cb2ac2c0eab0055302cad6d480a867820e3fe58bf4",
          "md5": "35781c4afc96970a11f5e194562c7571",
          "sha256": "d59a6a1615a47a092338b852eaf3bdf28d61bf14c3f70d9abd388bc34702c842"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.7.5.tar.gz",
        "has_sig": false,
        "md5_digest": "35781c4afc96970a11f5e194562c7571",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <=3.11",
        "size": 185505,
        "upload_time": "2023-01-17T22:46:05",
        "upload_time_iso_8601": "2023-01-17T22:46:05.479803Z",
        "url": "https://files.pythonhosted.org/packages/62/e1/37cabd1a040ade7651cb2ac2c0eab0055302cad6d480a867820e3fe58bf4/CustomIntents-0.7.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85fce94544829f545431e6d5f288027d44ba52b52945b43edb37550246c95837",
          "md5": "ef27f53cdd56cd7fa7602c6429f1490c",
          "sha256": "10d6af1ce5b80dfbdd93f8470e1d36905132e0b7fec97cf7735f4cb714cbe650"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.7.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef27f53cdd56cd7fa7602c6429f1490c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <=3.11",
        "size": 193360,
        "upload_time": "2023-01-18T19:32:56",
        "upload_time_iso_8601": "2023-01-18T19:32:56.489523Z",
        "url": "https://files.pythonhosted.org/packages/85/fc/e94544829f545431e6d5f288027d44ba52b52945b43edb37550246c95837/CustomIntents-0.7.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6faa7e4bf059181375a7160f889654bd804ae392201a0ec216dafb6b78aaa87",
          "md5": "cac1e4a4ffdab6d9d92e15aa26576a96",
          "sha256": "e3d746a4e2e2ddc4455fed6f537a292b8b74a59c312be3b6b11a31d1ed068646"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.7.6.tar.gz",
        "has_sig": false,
        "md5_digest": "cac1e4a4ffdab6d9d92e15aa26576a96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <=3.11",
        "size": 192248,
        "upload_time": "2023-01-18T19:33:01",
        "upload_time_iso_8601": "2023-01-18T19:33:01.360213Z",
        "url": "https://files.pythonhosted.org/packages/a6/fa/a7e4bf059181375a7160f889654bd804ae392201a0ec216dafb6b78aaa87/CustomIntents-0.7.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ca67c299ee7a6d2bde791ef70688e3a04a3ac53e9eb4555db43067d2a436080",
          "md5": "e74fb25b24095768223bdd2eede2920a",
          "sha256": "2de907ddd448a272d71b0b7202e955691798fb1878825a0e28ea4b7f5a2f6d92"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e74fb25b24095768223bdd2eede2920a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <=3.11",
        "size": 198759,
        "upload_time": "2023-01-28T18:15:38",
        "upload_time_iso_8601": "2023-01-28T18:15:38.889594Z",
        "url": "https://files.pythonhosted.org/packages/9c/a6/7c299ee7a6d2bde791ef70688e3a04a3ac53e9eb4555db43067d2a436080/CustomIntents-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a70671415e1e74000e855456b61346e963a61af34bc56b8c4f87fe871917069c",
          "md5": "f06ca80e2ca093d722e712f40ae91bb6",
          "sha256": "adaf9c19e6b9fbce1189741bad075ede3a67c4a4d98ff1115973d71dc64caa97"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f06ca80e2ca093d722e712f40ae91bb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <=3.11",
        "size": 199580,
        "upload_time": "2023-01-28T18:15:42",
        "upload_time_iso_8601": "2023-01-28T18:15:42.381325Z",
        "url": "https://files.pythonhosted.org/packages/a7/06/71415e1e74000e855456b61346e963a61af34bc56b8c4f87fe871917069c/CustomIntents-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4581e104be2e475e8c59f5273e6fed634ad277835b0224bc83123ba10110df68",
          "md5": "47ca8c6c1211470e6347f1c69f2ceaec",
          "sha256": "5693911d321d8a1b20e1bcf9cf6ad386a7f46abcdbe6572422ed3b5ae2a39bc9"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47ca8c6c1211470e6347f1c69f2ceaec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <=3.11",
        "size": 201475,
        "upload_time": "2023-02-03T00:18:59",
        "upload_time_iso_8601": "2023-02-03T00:18:59.259598Z",
        "url": "https://files.pythonhosted.org/packages/45/81/e104be2e475e8c59f5273e6fed634ad277835b0224bc83123ba10110df68/CustomIntents-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4d90f698be483b549d2c0b126109711988675cf299c03a4718b5a82b24fe531",
          "md5": "83673daec3a21e68bb6cad01172e9c3a",
          "sha256": "495ae564b434f5f759d79b23f3a3b6f2edcbaed1350fba19bf932571a3e0c4b7"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "83673daec3a21e68bb6cad01172e9c3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <=3.11",
        "size": 202655,
        "upload_time": "2023-02-03T00:19:02",
        "upload_time_iso_8601": "2023-02-03T00:19:02.418915Z",
        "url": "https://files.pythonhosted.org/packages/d4/d9/0f698be483b549d2c0b126109711988675cf299c03a4718b5a82b24fe531/CustomIntents-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12b330672c703bceae16ce3fad089f0ccdda65c012f5a734798c5287c7ca6bea",
          "md5": "24f7d92ea438c631217a7b1b6a63570b",
          "sha256": "5c201c389c56378584b001329ed448ef494f1db444843ff3f62714b694e3c0b4"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "24f7d92ea438c631217a7b1b6a63570b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9, <=3.11",
        "size": 203185,
        "upload_time": "2023-02-10T10:53:56",
        "upload_time_iso_8601": "2023-02-10T10:53:56.691982Z",
        "url": "https://files.pythonhosted.org/packages/12/b3/30672c703bceae16ce3fad089f0ccdda65c012f5a734798c5287c7ca6bea/CustomIntents-0.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e01f9b9fd91d22a9933049b1e54f5492ee7942acb53d263999384e0ec65bc7a",
          "md5": "4e61bba25b1214783caae65fa8f3fdb6",
          "sha256": "9789c4116e99bb47287d7e4959b585ed5c3367f73fc348275b1c464a21d5c15e"
        },
        "downloads": -1,
        "filename": "CustomIntents-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4e61bba25b1214783caae65fa8f3fdb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <=3.11",
        "size": 204893,
        "upload_time": "2023-02-10T10:54:00",
        "upload_time_iso_8601": "2023-02-10T10:54:00.227670Z",
        "url": "https://files.pythonhosted.org/packages/4e/01/f9b9fd91d22a9933049b1e54f5492ee7942acb53d263999384e0ec65bc7a/CustomIntents-0.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12b330672c703bceae16ce3fad089f0ccdda65c012f5a734798c5287c7ca6bea",
        "md5": "24f7d92ea438c631217a7b1b6a63570b",
        "sha256": "5c201c389c56378584b001329ed448ef494f1db444843ff3f62714b694e3c0b4"
      },
      "downloads": -1,
      "filename": "CustomIntents-0.8.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "24f7d92ea438c631217a7b1b6a63570b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9, <=3.11",
      "size": 203185,
      "upload_time": "2023-02-10T10:53:56",
      "upload_time_iso_8601": "2023-02-10T10:53:56.691982Z",
      "url": "https://files.pythonhosted.org/packages/12/b3/30672c703bceae16ce3fad089f0ccdda65c012f5a734798c5287c7ca6bea/CustomIntents-0.8.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e01f9b9fd91d22a9933049b1e54f5492ee7942acb53d263999384e0ec65bc7a",
        "md5": "4e61bba25b1214783caae65fa8f3fdb6",
        "sha256": "9789c4116e99bb47287d7e4959b585ed5c3367f73fc348275b1c464a21d5c15e"
      },
      "downloads": -1,
      "filename": "CustomIntents-0.8.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4e61bba25b1214783caae65fa8f3fdb6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9, <=3.11",
      "size": 204893,
      "upload_time": "2023-02-10T10:54:00",
      "upload_time_iso_8601": "2023-02-10T10:54:00.227670Z",
      "url": "https://files.pythonhosted.org/packages/4e/01/f9b9fd91d22a9933049b1e54f5492ee7942acb53d263999384e0ec65bc7a/CustomIntents-0.8.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}