{
  "info": {
    "author": "Nick Waters, Marcus Fedarko",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# pyfastg: a minimal Python library for parsing SPAdes FASTG files\n[![pyfastg CI](https://github.com/fedarko/pyfastg/actions/workflows/main.yml/badge.svg)](https://github.com/fedarko/pyfastg/actions/workflows/main.yml)\n[![Code Coverage](https://codecov.io/gh/fedarko/pyfastg/branch/master/graph/badge.svg)](https://codecov.io/gh/fedarko/pyfastg)\n[![PyPI](https://img.shields.io/pypi/v/pyfastg)](https://pypi.org/project/pyfastg)\n\n## The FASTG file format\nFASTG is a format for describing sequencing assembly graphs. It is geared toward\naccurately representing the ambiguity resulting from sequencing limitations, ploidy,\nor other factors that complicate representation of a seqence as a simple string.\n\nThe latest specification for the FASTG format is version 1.00, as of writing;\nthis specification is located [here](http://fastg.sourceforge.net/FASTG_Spec_v1.00.pdf).\nWhenever the rest of this documentation mentions \"the FASTG spec,\" this is in reference\nto this version of the specification.\n\npyfastg parses graphs that follow **a subset of the FASTG spec**: in\nparticular, pyfastg is designed to work with files output by the\n[SPAdes](http://cab.spbu.ru/software/spades/) family of assemblers.\n\n## The pyfastg library\npyfastg is a Python library that contains `parse_fastg()`, a function that\ntakes as input a path to a SPAdes FASTG file. `parse_fastg()` reads the\nspecified FASTG file and returns a [NetworkX](https://networkx.github.io)\n`DiGraph` object representing the structure of the assembly graph. From here, the\ngraph can be analyzed, visualized, etc. as needed.\n\npyfastg is very much in its infancy, so it may be most useful as a starting point.\nPull requests are welcome!\n\n### Note about the graph topology\n\nThe FASTG spec contains the following sentence (in section 6, page 7):\n\n> Note also that strictly speaking, [the structure described in a FASTG file] is not a graph at all, as we have not specified a notion of vertex. However in many cases one can without ambiguity define vertices and thereby associate a _bona fide_ digraph, and we do so frequently in this document to illustrate concepts.\n\nWe take this approach in pyfastg. **\"Edges\" in the FASTG file will be represented as nodes\nin the NetworkX graph, and \"adjacencies\" between edges in the FASTG file will\nbe represented as edges in the NetworkX graph.** As far as we're aware, this is\nusually how these files are visualized.\n\n### Installation\npyfastg can be installed using [pip](https://pip.pypa.io/):\n\n```bash\npip install pyfastg\n```\n\npyfastg's only dependency (which should be installed automatically with\nthe above command) is [NetworkX](https://networkx.github.io) ≥ 2.\n\nAs of writing, pyfastg supports all Python versions ≥ 3.6. pyfastg might be able to work with earlier versions of Python, but we do not explicitly test against these.\n\n### Quick Example\nThe second line (which points to one of pyfastg's test assembly graphs)\nassumes that you're located in the root directory of the pyfastg repo.\n\n```python\n>>> import pyfastg\n>>> g = pyfastg.parse_fastg(\"pyfastg/tests/input/assembly_graph.fastg\")\n>>> # g is now a NetworkX DiGraph! We can do whatever we want with this object.\n>>>\n>>> # Example: List the sequences in this graph (these are \"edges\" in the FASTG\n>>> # file, but are represented as nodes in g)\n>>> g.nodes()\nNodeView(('1+', '29-', '1-', '6-', '2+', '26+', '27+', '2-', '3+', '4+', '6+', '7+', '3-', '33-', '9-', '4-', '5+', '5-', '28+', '7-', '8+', '28-', '9+', '8-', '12-', '10+', '12+', '10-', '24-', '32-', '11+', '30-', '11-', '27-', '19-', '13+', '25+', '31-', '13-', '14+', '14-', '26-', '15+', '15-', '23-', '16+', '16-', '17+', '17-', '19+', '18+', '33+', '18-', '20+', '20-', '22+', '21+', '21-', '22-', '23+', '24+', '25-', '29+', '30+', '31+', '32+'))\n>>>\n>>> # Example: Get details for a single sequence (length, coverage, GC-content)\n>>> g.nodes[\"15+\"]\n{'length': 193, 'cov': 6.93966, 'gc': 0.5492227979274611}\n>>>\n>>> # Example: Get information about the graph's connectivity\n>>> import networkx as nx\n>>> components = list(nx.weakly_connected_components(g))\n>>> for c in components:\n...     print(len(c), \"nodes\")\n...     print(c)\n...\n33 nodes\n{'8-', '17-', '15+', '30+', '16+', '26-', '25+', '19+', '7+', '23+', '14-', '18-', '10-', '29-', '20-', '27-', '11-', '5-', '3+', '2-', '12-', '13+', '31-', '6+', '1+', '21-', '24-', '32-', '22+', '28+', '4+', '33-', '9-'}\n33 nodes\n{'26+', '29+', '18+', '3-', '2+', '8+', '15-', '24+', '9+', '17+', '27+', '28-', '11+', '6-', '20+', '14+', '19-', '13-', '4-', '21+', '5+', '31+', '22-', '12+', '25-', '30-', '10+', '1-', '7-', '32+', '23-', '33+', '16-'}\n```\n\n### Details about the required input file format (tl;dr: SPAdes-dialect FASTG files only)\nCurrently, pyfastg is hardcoded to parse FASTG files created by the SPAdes assembler.\nOther valid FASTG files that don't follow the pattern used by SPAdes for edge names\nare not supported.\n\n#### Edge names\n\nIn particular, each edge in the file must have a name formatted like:\n\n```bash\nEDGE_1_length_9909_cov_6.94721\n```\n\nThe edge ID (here, `1`) can contain the characters `a-z`, `A-Z`, and `0-9`.\n\nThe edge length (here, `9909`) can contain the characters `0-9`.\n\nThe edge coverage (here, `6.94721`) can contain the characters `0-9` and `.`.\n\nAn edge name can optionally end with a `'` character, indicating that\nthis edge is a reverse complement. We will refer to whether or not an edge name\nends with `'` as its _orientation_: an edge that does not end with a `'` has a\n`+` orientation, and an edge name that ends with a `'` has a `-` orientation.\n\nEdge names in a FASTG file should be consistent, with respect to their ID and orientation.\nIf, in a single FASTG file, pyfastg sees a reference to an edge named\n`EDGE_1_length_9909_cov_6.94721` and also a reference to an edge named\n`EDGE_1_length_8109_cov_6.94721` (with the same ID [`1`]\nand orientation [`+`], but a different length and/or coverage)\nthen it will throw an error.\n\n#### Edge declaration lines\n\nHere, we refer to each line starting with `>` as an _edge declaration_. An\nedge's sequence is described in the line(s) following its edge declaration\n(until the next edge declaration); additionally, the outgoing adjacencies from\nthis edge to other edges may be described on this line, if present. For example,\nthe line\n\n```\n>EDGE_1_length_5_cov_10:EDGE_2_length_3_cov_1,EDGE_3_length_6_cov_2.5',EDGE_4_length_8_cov_5.1;\n```\n\nindicates that the edge `EDGE_1_length_5_cov_10` has three outgoing adjacencies: to the\nedges `EDGE_2_length_3_cov_1`, `EDGE_3_length_6_cov_2.5'`, and `EDGE_4_length_8_cov_5.1`.\nThis line would thus result in three \"edges\" being created\nin the NetworkX graph produced by pyfastg: (`1+` → `2+`), (`1+` → `3-`), and (`1+` → `4+`).\n\nEach edge declaration must end with a `;` character (after removing trailing\nwhitespace). Section 15 of the FASTG spec mentions that having a newline\nafter the semicolon isn't required, but we require it here for the sake of\nsimplicity.\n\n#### Edge sequences\n\nWe assume that each sequence (the line(s) between edge declarations)\nconsists only of the characters `A`, `C`, `G`, `T`, or `U`. So, more complex\ntypes of strings (e.g. the \"stuffed gaps\" described in the FASTG spec) are\nnot allowed in an edge's sequence.\n\nAdditionally, lowercase characters or degenerate nucleotides are not allowed;\nthis matches section 15 of the FASTG spec.\nThe FASTG spec doesn't explicitly allow for uracil (`U`), but we allow it\nanyway in order to support RNA sequences. (`U` and `T` are allowed to be contained\nin the same sequence,\n[in the unlikely case that this is needed](https://en.wikipedia.org/wiki/Uracil#In_DNA).)\n\nLeading and trailing whitespace in sequence lines will be ignored, so something\nlike\n```bash\n    ATC\n\n G     \n```\nis technically valid, and describes the sequence `ATCG`.\nHowever, a line like `ATC G` is not valid since the inner\nspace, ` `, would be considered part of the sequence.\n\n### Details about the output NetworkX graph\n\n#### Node names and attributes\nNodes in the returned `DiGraph` (corresponding to edges in the FASTG file)\nwill contain three attribute fields:\n\n1. `length`: the length of the sequence (represented as a python `int`)\n2. `cov`: the coverage of the sequence (represented as a python `float`)\n2. `gc`: the GC-content (in the range [0, 1]) of the sequence (represented as a python `float`)\n\nEach node's name is a python `str` created by concatenating edge IDs and orientations.\nFor example, `EDGE_1_length_9909_cov_6.94721` will correspond to a node named `1+`.\nThis naming scheme is analogous to that used by\n[Bandage](https://github.com/rrwick/Bandage/wiki/Single-vs-double-node-style).\n\n#### About reverse complements\n\npyfastg **only creates nodes based on the edges\nexplicitly described in the FASTG file**. If a file only describes edges\n`EDGE_1_length_5_cov_10`, `EDGE_2_length_6_cov_10'`, and `EDGE_3_length_7_cov_15`, then\npyfastg will only create nodes `1+`, `2-`, and `3+`, and not the reverse complement\nnodes `1-`, `2+`, `3-`, etc.\n\nSimilarly, if a file contains an adjacency from edge `EDGE_1_length_5_cov_10` to\n`EDGE_2_length_6_cov_10'`, then this adjacency will only be represented as a single edge\n(`1+` → `2-`) in pyfastg's output graph. The implied reverse-complement of this\nedge (`2+` → `1-`) will not be created unless the file explicitly\ncontains an adjacency from `EDGE_2_length_6_cov_10` to `EDGE_1_length_5_cov_10'`.\n\n## Information for pyfastg developers\n\n### Installation\n\nIf you're interested in developing the code, you will probably want to fork this repository\nand then clone your fork. Once you do this, `cd` into the root of the repository and run\n\n```bash\npip install -e .[dev]\n```\n\nto install pyfastg in \"editable mode.\" Thanks to the `[dev]` flag, this will also install\npyfastg's development dependencies (see the `extras_require` line in\n[`setup.py`](https://github.com/fedarko/pyfastg/blob/master/setup.py) for details).\n\n### Testing, linting, and formatting the code\n\nAll of these commands are covered in pyfastg's\n[`Makefile`](https://github.com/fedarko/pyfastg/blob/master/Makefile).\n\n- Run tests: `make test`\n- Lint and style-check the code: `make stylecheck`\n- Automtaically style the code: `make style`\n\n## Changelog\nSee pyfastg's\n[`CHANGELOG.md`](https://github.com/fedarko/pyfastg/blob/master/CHANGELOG.md) file\nfor information on the changes included with new pyfastg releases.\n\n## License\npyfastg is licensed under the MIT License. Please see pyfastg's\n[`LICENSE`](https://github.com/fedarko/pyfastg/blob/master/LICENSE) file for details.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fedarko/pyfastg",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Marcus Fedarko",
    "maintainer_email": "mfedarko@ucsd.edu",
    "name": "pyfastg",
    "package_url": "https://pypi.org/project/pyfastg/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyfastg/",
    "project_urls": {
      "Homepage": "https://github.com/fedarko/pyfastg"
    },
    "release_url": "https://pypi.org/project/pyfastg/0.1.0/",
    "requires_dist": [
      "networkx (>=2)",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "black ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "Minimal Python library for parsing SPAdes FASTG files",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14255190,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccd823592b4dd716833d131351254cae2a85bfc1291a446ef801097296e483fa",
          "md5": "8dabccde4164aa9860f65b3e76fac38a",
          "sha256": "ba319d931b8295530ffa8cd2a6ac94e9462a9f43c5052ebbe2ac424d312b3179"
        },
        "downloads": -1,
        "filename": "pyfastg-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8dabccde4164aa9860f65b3e76fac38a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9930,
        "upload_time": "2019-10-08T01:48:09",
        "upload_time_iso_8601": "2019-10-08T01:48:09.147741Z",
        "url": "https://files.pythonhosted.org/packages/cc/d8/23592b4dd716833d131351254cae2a85bfc1291a446ef801097296e483fa/pyfastg-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6e8a6d7644f3e91fc100d8bf08de4c7e9dbf8fe09eb9b31f5e1cd83b7ba1387",
          "md5": "ede09c21243a82cd0cee6f1737b01fd9",
          "sha256": "201b3b6b39b020d89e3daea8ade96fdd93587290edfa64274bc670ecd22eaf30"
        },
        "downloads": -1,
        "filename": "pyfastg-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ede09c21243a82cd0cee6f1737b01fd9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7857,
        "upload_time": "2019-10-08T01:48:11",
        "upload_time_iso_8601": "2019-10-08T01:48:11.620490Z",
        "url": "https://files.pythonhosted.org/packages/c6/e8/a6d7644f3e91fc100d8bf08de4c7e9dbf8fe09eb9b31f5e1cd83b7ba1387/pyfastg-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "001c423e9bbe9a8b419841f635e78be1630bc0b9c3f41f88a309bb4b9ca71f82",
          "md5": "3f040f29fc27a8efdd6ae7d2fcda2a15",
          "sha256": "9c2b1bd818f8a9b564261121a1e60d1908fb2fa32540fb63bb0a3b38471ed7de"
        },
        "downloads": -1,
        "filename": "pyfastg-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3f040f29fc27a8efdd6ae7d2fcda2a15",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17331,
        "upload_time": "2022-06-27T04:03:43",
        "upload_time_iso_8601": "2022-06-27T04:03:43.853080Z",
        "url": "https://files.pythonhosted.org/packages/00/1c/423e9bbe9a8b419841f635e78be1630bc0b9c3f41f88a309bb4b9ca71f82/pyfastg-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aab0dda8f28e4dc8482039228c6c2152295a69a0dc00c7475ae359e60cae1585",
          "md5": "5b288afc59c5d51a4327baf4b02de3c4",
          "sha256": "493bf63fd064cf70b03d23ec3d0173ae8a6f120b812acca091320435a097fb38"
        },
        "downloads": -1,
        "filename": "pyfastg-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5b288afc59c5d51a4327baf4b02de3c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18845,
        "upload_time": "2022-06-27T04:03:49",
        "upload_time_iso_8601": "2022-06-27T04:03:49.586219Z",
        "url": "https://files.pythonhosted.org/packages/aa/b0/dda8f28e4dc8482039228c6c2152295a69a0dc00c7475ae359e60cae1585/pyfastg-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "001c423e9bbe9a8b419841f635e78be1630bc0b9c3f41f88a309bb4b9ca71f82",
        "md5": "3f040f29fc27a8efdd6ae7d2fcda2a15",
        "sha256": "9c2b1bd818f8a9b564261121a1e60d1908fb2fa32540fb63bb0a3b38471ed7de"
      },
      "downloads": -1,
      "filename": "pyfastg-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3f040f29fc27a8efdd6ae7d2fcda2a15",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17331,
      "upload_time": "2022-06-27T04:03:43",
      "upload_time_iso_8601": "2022-06-27T04:03:43.853080Z",
      "url": "https://files.pythonhosted.org/packages/00/1c/423e9bbe9a8b419841f635e78be1630bc0b9c3f41f88a309bb4b9ca71f82/pyfastg-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aab0dda8f28e4dc8482039228c6c2152295a69a0dc00c7475ae359e60cae1585",
        "md5": "5b288afc59c5d51a4327baf4b02de3c4",
        "sha256": "493bf63fd064cf70b03d23ec3d0173ae8a6f120b812acca091320435a097fb38"
      },
      "downloads": -1,
      "filename": "pyfastg-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5b288afc59c5d51a4327baf4b02de3c4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18845,
      "upload_time": "2022-06-27T04:03:49",
      "upload_time_iso_8601": "2022-06-27T04:03:49.586219Z",
      "url": "https://files.pythonhosted.org/packages/aa/b0/dda8f28e4dc8482039228c6c2152295a69a0dc00c7475ae359e60cae1585/pyfastg-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}