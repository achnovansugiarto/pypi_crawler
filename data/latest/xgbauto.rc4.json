{
  "info": {
    "author": "Prakash Parikh",
    "author_email": "parikhprakash@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# AutoXGB\n\n\nXGBoost + Optuna:  no brainer\n\n- auto train xgboost directly from CSV files\n- auto tune xgboost using optuna\n- auto serve best xgboot model using fastapi\n\nNOTE: PRs are currently not accepted. If there are issues/problems, please create an issue.\n\n# Installation\n\nInstall using pip\n\n    pip install xgbauto\n\n\n# Usage\nTraining a model using AutoXGB is a piece of cake. All you need is some tabular data.\n\n## Parameters\n\n```python\n\n###############################################################################\n### required parameters\n###############################################################################\n\n# path to training data\ntrain_filename = \"data_samples/binary_classification.csv\"\n\n# path to output folder to store artifacts\noutput = \"output\"\n\n###############################################################################\n### optional parameters\n###############################################################################\n\n# path to test data. if specified, the model will be evaluated on the test data\n# and test_predictions.csv will be saved to the output folder\n# if not specified, only OOF predictions will be saved\n# test_filename = \"test.csv\"\ntest_filename = None\n\n# task: classification or regression\n# if not specified, the task will be inferred automatically\n# task = \"classification\"\n# task = \"regression\"\ntask = None\n\n# an id column\n# if not specified, the id column will be generated automatically with the name `id`\n# idx = \"id\"\nidx = None\n\n# target columns are list of strings\n# if not specified, the target column be assumed to be named `target`\n# and the problem will be treated as one of: binary classification, multiclass classification,\n# or single column regression\n# targets = [\"target\"]\n# targets = [\"target1\", \"target2\"]\ntargets = [\"income\"]\n\n# features columns are list of strings\n# if not specified, all columns except `id`, `targets` & `kfold` columns will be used\n# features = [\"col1\", \"col2\"]\nfeatures = None\n\n# categorical_features are list of strings\n# if not specified, categorical columns will be inferred automatically\n# categorical_features = [\"col1\", \"col2\"]\ncategorical_features = None\n\n# use_gpu is boolean\n# if not specified, GPU is not used\n# use_gpu = True\n# use_gpu = False\nuse_gpu = True\n\n# number of folds to use for cross-validation\n# default is 5\nnum_folds = 5\n\n# random seed for reproducibility\n# default is 42\nseed = 42\n\n# number of optuna trials to run\n# default is 1000\n# num_trials = 1000\nnum_trials = 100\n\n# time_limit for optuna trials in seconds\n# if not specified, timeout is not set and all trials are run\n# time_limit = None\ntime_limit = 360\n\n# if fast is set to True, the hyperparameter tuning will use only one fold\n# however, the model will be trained on all folds in the end\n# to generate OOF predictions and test predictions\n# default is False\n# fast = False\nfast = False\n```\n\n# Python API\n\nTo train a new model, you can run:\n\n```python\nfrom xgbauto import AutoXGB\n\n\n# required parameters:\ntrain_filename = \"data_samples/binary_classification.csv\"\noutput = \"output\"\n\n# optional parameters\ntest_filename = None\ntask = None\nidx = None\ntargets = [\"income\"]\nfeatures = None\ncategorical_features = None\nuse_gpu = True\nnum_folds = 5\nseed = 42\nnum_trials = 100\ntime_limit = 360\nfast = False\n\n# Now its time to train the model!\naxgb = AutoXGB(\n    train_filename=train_filename,\n    output=output,\n    test_filename=test_filename,\n    task=task,\n    idx=idx,\n    targets=targets,\n    features=features,\n    categorical_features=categorical_features,\n    use_gpu=use_gpu,\n    num_folds=num_folds,\n    seed=seed,\n    num_trials=num_trials,\n    time_limit=time_limit,\n    fast=fast,\n)\naxgb.train()\n```\n\n# CLI\n\nTrain the model using the `autoxgb train` command. The parameters are same as above.\n\n```\nxgbauto train \\\n --train_filename datasets/30train.csv \\\n --output outputs/30days \\\n --test_filename datasets/30test.csv \\\n --use_gpu\n```\n\nYou can also serve the trained model using the `autoxgb serve` command.\n\n```bash\nxgbauto serve --model_path outputs/mll --host 0.0.0.0 --debug\n```\n\nTo know more about a command, run:\n\n    `xgbauto <command> --help` \n\n```\nxgbauto train --help\n\n\nusage: xgbauto <command> [<args>] train [-h] --train_filename TRAIN_FILENAME [--test_filename TEST_FILENAME] --output\n                                        OUTPUT [--task {classification,regression}] [--idx IDX] [--targets TARGETS]\n                                        [--num_folds NUM_FOLDS] [--features FEATURES] [--use_gpu] [--fast]\n                                        [--seed SEED] [--time_limit TIME_LIMIT]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --train_filename TRAIN_FILENAME\n                        Path to training file\n  --test_filename TEST_FILENAME\n                        Path to test file\n  --output OUTPUT       Path to output directory\n  --task {classification,regression}\n                        User defined task type\n  --idx IDX             ID column\n  --targets TARGETS     Target column(s). If there are multiple targets, separate by ';'\n  --num_folds NUM_FOLDS\n                        Number of folds to use\n  --features FEATURES   Features to use, separated by ';'\n  --use_gpu             Whether to use GPU for training\n  --fast                Whether to use fast mode for tuning params. Only one fold will be used if fast mode is set\n  --seed SEED           Random seed\n  --time_limit TIME_LIMIT\n                        Time limit for optimization\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/parikhprakash/xgbauto",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xgbauto",
    "package_url": "https://pypi.org/project/xgbauto/",
    "platform": "linux",
    "project_url": "https://pypi.org/project/xgbauto/",
    "project_urls": {
      "Homepage": "https://github.com/parikhprakash/xgbauto"
    },
    "release_url": "https://pypi.org/project/xgbauto/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "xgbauto: tuning xgboost with optuna",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17080160,
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea3ab7dc5c122f28d05e675635f98e66fffdd27ba80da6e12fc46de368d00a5d",
          "md5": "ba19058d6b4d8f9b22e5bf9fc3112b54",
          "sha256": "15b92d72a3bc48f62fc2cc51437cdbc33ebb8e9e297edb9eab5140283acd13ca"
        },
        "downloads": -1,
        "filename": "xgbauto-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ba19058d6b4d8f9b22e5bf9fc3112b54",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18993,
        "upload_time": "2022-07-25T06:03:56",
        "upload_time_iso_8601": "2022-07-25T06:03:56.953386Z",
        "url": "https://files.pythonhosted.org/packages/ea/3a/b7dc5c122f28d05e675635f98e66fffdd27ba80da6e12fc46de368d00a5d/xgbauto-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05d7aaa1c6b1382939e409881c1f86f3098f1beb7d43098fd53fd79651217909",
          "md5": "d8a29056ea0579a85f73af41e6077afa",
          "sha256": "6b04ed6e080822f29f94a9231e516975fb99af462b0cbaba3520dd5b2a33a52b"
        },
        "downloads": -1,
        "filename": "xgbauto-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d8a29056ea0579a85f73af41e6077afa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18987,
        "upload_time": "2022-07-25T06:09:39",
        "upload_time_iso_8601": "2022-07-25T06:09:39.549457Z",
        "url": "https://files.pythonhosted.org/packages/05/d7/aaa1c6b1382939e409881c1f86f3098f1beb7d43098fd53fd79651217909/xgbauto-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cacb8e5a9729208b36cc4e3868a7e194b86c47269ad0412fde424a65ceebe2e",
          "md5": "6af839b91320dacad06a612b91890747",
          "sha256": "a239581ac78be155cc1da19fb853caacc64b828b22c4dd8fb9000215b8b49476"
        },
        "downloads": -1,
        "filename": "xgbauto-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6af839b91320dacad06a612b91890747",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19235,
        "upload_time": "2022-08-04T05:50:15",
        "upload_time_iso_8601": "2022-08-04T05:50:15.516197Z",
        "url": "https://files.pythonhosted.org/packages/4c/ac/b8e5a9729208b36cc4e3868a7e194b86c47269ad0412fde424a65ceebe2e/xgbauto-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cec0714e5b053e2a10825bde32764c6a2013b766763dbfbaf1de65f0addb9c20",
          "md5": "84e318ee56ef0146a17867a6e46c2638",
          "sha256": "3ad05eb2b3ba62d2a54623ee602251fc2c26f99b682b48042e5acf49117cdec0"
        },
        "downloads": -1,
        "filename": "xgbauto-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "84e318ee56ef0146a17867a6e46c2638",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19366,
        "upload_time": "2022-08-15T10:35:08",
        "upload_time_iso_8601": "2022-08-15T10:35:08.852880Z",
        "url": "https://files.pythonhosted.org/packages/ce/c0/714e5b053e2a10825bde32764c6a2013b766763dbfbaf1de65f0addb9c20/xgbauto-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cec0714e5b053e2a10825bde32764c6a2013b766763dbfbaf1de65f0addb9c20",
        "md5": "84e318ee56ef0146a17867a6e46c2638",
        "sha256": "3ad05eb2b3ba62d2a54623ee602251fc2c26f99b682b48042e5acf49117cdec0"
      },
      "downloads": -1,
      "filename": "xgbauto-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "84e318ee56ef0146a17867a6e46c2638",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19366,
      "upload_time": "2022-08-15T10:35:08",
      "upload_time_iso_8601": "2022-08-15T10:35:08.852880Z",
      "url": "https://files.pythonhosted.org/packages/ce/c0/714e5b053e2a10825bde32764c6a2013b766763dbfbaf1de65f0addb9c20/xgbauto-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}