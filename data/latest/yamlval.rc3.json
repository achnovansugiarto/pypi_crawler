{
  "info": {
    "author": "Michael DiGregorio",
    "author_email": "mjm.digregorio@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# yamlval\nyamlval is a yaml validator, used to easily define a schema for a yaml file. Yamlval allows users to define types for yaml fields and will generate clear and transparent logs for debugging.\n\n## If you're skimming this then read these next few points to save yourself a lot of headache\n    - Do not use enums in yDict, it will not work, you will get an error\n    - Do not use mutliple enums in yList, just make one large enum or you will get an error\n    - yAny is true for everything EXCEPT None\n    - yNone is true for ONLY None\n    - yDict takes tuples of yObjects as inputs, i.e \n    ```\n    yDict( (yKeyType, yValueType1, yValueType2, ...), (yKeyType, yValueType1, yValueType2, ...), ...  )\n    ```\n    Happy Validating!\n\n## Example\n```yaml\nticker: \"AAPL\"\nfields: \n  - \"Close\"\n  - \"Adj Close\"\n  - \"Open\"\ncol_map: \n  2 : \"hello\"\n  3 : \"hello plus one\"\ntransform: \n  - lag: 1\n  - scalar: 2\n  - targets: \n      - \"col1\"\n      - \"col2\"\n      - \"col3\"\n```\n\n```python\nfrom yamlval import yString, yList, yEnum, yDict, yInt, yFloat, ySchema\n\nfrom enum import Enum\n\nclass Ticker(Enum):\n    msft = \"MSFT\"\n    aapl = \"AAPL\"\n    spy = \"^GSPC\"\n\nclass ValuationFields(Enum):\n    close = \"Close\"\n    adjclose = \"Adj Close\"\n    opn = \"Open\"\n\nclass Schema(ySchema):\n    ticker = yEnum(Ticker)\n    fields = yList(yEnum(ValuationFields))\n    col_map = yDict(\n            (yInt(), yString())\n        )\n    transform = yList(\n                    yDict(\n                        (yString(), yInt(), yList(yString(), lower=3, upper=3))\n                    )\n                )\n\nconfig = []\nwith open(\"example.yml\", \"r\") as f:\n    config = Schema.validate_and_load(f)\nprint(config) \n```\n\n## Longer Example\n- This is an example of a .yml or .yaml file which does not match the config,. The structure is mostly there, but I have simulated common errors which are easy to overlook. You can copy-paste and directly run this code to get a feel for the errors thrown by the system. \n- Notice that most validation errors are logged before an exception is raised, letting you see a large number of validation errors simultaneously, saving you important time. \n\n\n- Directory structure for example:\n```\n./\n    example.py\n    example.yml\n```\n- Requirements for example:\n    - python >= 3.6\n    - yamlval\n\n```yaml\nname: \"Michaell\"\nage: 21\nheight: \"5'11 3/4extrachars\"\nlistOlists: \n  - - - \"hello\"\n      - \"sdf\"\n      - \"asdf\"\n      - \"asdf\"\n    - - \"asdfasdf\"\n      - \"asdfasdf\"\n      - 1.\n      - \"asdfasdf\"\n  - - - \"hello\"\n      - \"sdf\"\n      - \"asdf\"\n      - \"asdf\"\n    - - \"asdfasdf\"\n      - \"asdfasdf\"\n      - 1\n      - \"asdfasdf\"\nnormalList:\n  - \"hellothere\"\n  - 4\nfloatingPoint: 9.\ndictOstuff:\n  Michael: \n    \"string1\" : \"string2\"\n  1: \n    - - \"string123\"\n      - \"asdf\"\n      - \"asdf\"\n    - - \"asdfasdfasdf\"\n      - \"asdfasdfadsf\"\n  somewords: \"some more words\"\n\nanyDict: \n  asdf: 5\n  6: \"eight\"\n  NULL: NULL\n\nnoneDict:\n  asdf: NULL\n  5.5: NULL\n  5: NULL\n\nanyList: \n  - \"asdf\"\n  - 5\n  - 5.5\n  - NULL\n\nnoneList:\n  - NULL\n  - NULL\n  - NULL\n\nnoneListPlus:\n  - NULL\n  - 5.5\n  - 5\n  - NULL\n  - \"string from yamlval here\"\n```\n\n```python\nfrom yamlval import yString, yList, yEnum, yDict, yInt, yFloat, ySchema, yAny, yNone\n\nfrom enum import Enum\n\nclass Names(Enum):\n    mike = \"Michael\"\n\nclass Schema(ySchema):\n    name = yEnum(Names)\n    age = yInt(lower=0, upper=120)\n    height = yString(lower=3, upper=8)\n    listOlists = yList(yList(yList(yString(), yInt())), yInt(), lower=2)\n    normalList = yList(yString(lower=2), yInt(upper=10))\n    floatingPoint = yFloat(upper=10)\n    dictOstuff = yDict(\n        (yString(), yInt(), yDict((yString(), yString()))),\n        (yInt(upper=2), yList(yList(yString(upper=7), upper=2))),\n        (yString(), yString()),\n    )\n    anyDict = yDict(\n        (yAny(), yInt(), yString())\n    )\n    noneDict = yDict(\n        (yAny(), yNone())\n    )\n    anyList = yList(yAny())\n    noneList = yList(yNone())\n    noneListPlus = yList(yNone(), yFloat())\n    \nwith open(\"example.yml\") as f:\n    config = Schema.validate_and_load(f)\n\nprint(config)\n```\n### You can also call yObject.match() method to validate separately!\n- If you do not want to make an entire schema, want to just validate tehe type of an object, or want to validate to a degree above what yamlval can do by default, you can define a yObject and then call the .matches() method separately!\n\n- For example, lets say you have a string = stringToCheck, and you want to check if it's part of an enum, you can define checker = yEnum(EnumName) and then call checker.matches(stringToCheck). This will return a tuple matching the following format:\n- Tuple[bool, Optional[List[str]]] = (match, err if not match else None)\n- Translation: a tuple with a true/false value for the match at the 0th index, and a list of strings containing the caught errors (if there are any) or 'None' (if there are no errors) at the 1st index.\n\n```python\nfrom yamlval import yEnum\n\nfrom enum import Enum\n\nclass Names(Enum):\n    mike = \"Michael\"\n\nchecker = yEnum(Names)\nstringToCheck = \"Michaelll\"\n(match, err) = checker.matches(stringToCheck)\nif not match:\n    print(err)\n```\n\nwill yield\n\n```\n[\"Input <Michaelll> not in <['Michael']>\"]\n```\n\nYou can also iterate through all validation errors in err and then print them separately to get a nicer looking output for multiple validation errors.\n\n```python \nchecker = yEnum(Names)\nstringToCheck = \"Michaelll\"\n(match, err) = checker.matches(stringToCheck)\nif not match:\n    for error in err:\n        print(error)\n```\n\nThis will work for any of the yObject types (yDict, yList, yString, yInt, ...)\nand is actually the foundation of the internal implementation of yamlval.\n\n==========================================================================\n\nIf you find any errors, bugs, or simply want to contribute, let me know at mjm.digregorio@gmail.com !\n\nYou can also initiate a pull request!\n\n\\- Mike\n\nHappy Validating!",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/mycicle/yamlval/archive/v1.0.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mycicle/yamlval/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yamlval",
    "package_url": "https://pypi.org/project/yamlval/",
    "platform": "",
    "project_url": "https://pypi.org/project/yamlval/",
    "project_urls": {
      "Download": "https://github.com/mycicle/yamlval/archive/v1.0.2.tar.gz",
      "Homepage": "https://github.com/mycicle/yamlval/"
    },
    "release_url": "https://pypi.org/project/yamlval/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A YAML type validator",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9040222,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80213077b6f5175cb36897a03c3190f43f142e74b4ef62b3b2da7e3210939e42",
          "md5": "bb3a6d349f0e1840f42947887a7db331",
          "sha256": "62b6335d089dbc66447417ef6b4d339ef441228fa62b31f35fc0c894a16b637e"
        },
        "downloads": -1,
        "filename": "yamlval-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bb3a6d349f0e1840f42947887a7db331",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9316,
        "upload_time": "2021-01-03T05:24:53",
        "upload_time_iso_8601": "2021-01-03T05:24:53.439080Z",
        "url": "https://files.pythonhosted.org/packages/80/21/3077b6f5175cb36897a03c3190f43f142e74b4ef62b3b2da7e3210939e42/yamlval-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6e3baab6aae84b20aec78218984d1199181551361a8fc93f8ceba4018d88dcc",
          "md5": "8ab7c3e790601cd4e8d26280b4131154",
          "sha256": "88dad21d6c1f5ded2d6fd38b857567ba41deb0750c07ec60d5e2644d0542594e"
        },
        "downloads": -1,
        "filename": "yamlval-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8ab7c3e790601cd4e8d26280b4131154",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9325,
        "upload_time": "2021-01-03T05:36:52",
        "upload_time_iso_8601": "2021-01-03T05:36:52.545215Z",
        "url": "https://files.pythonhosted.org/packages/a6/e3/baab6aae84b20aec78218984d1199181551361a8fc93f8ceba4018d88dcc/yamlval-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f509057b297d20340d68b81462fbec1fe767e2c7e2a26bb4f787f9213f05365",
          "md5": "5ec454126045a22525bdb2a6291e6f86",
          "sha256": "8444a55ae93c34e0fadcc3f7c2cd78a29ec080f7039a413d2d2639d19fec4146"
        },
        "downloads": -1,
        "filename": "yamlval-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5ec454126045a22525bdb2a6291e6f86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10745,
        "upload_time": "2021-01-03T05:50:28",
        "upload_time_iso_8601": "2021-01-03T05:50:28.773291Z",
        "url": "https://files.pythonhosted.org/packages/8f/50/9057b297d20340d68b81462fbec1fe767e2c7e2a26bb4f787f9213f05365/yamlval-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f509057b297d20340d68b81462fbec1fe767e2c7e2a26bb4f787f9213f05365",
        "md5": "5ec454126045a22525bdb2a6291e6f86",
        "sha256": "8444a55ae93c34e0fadcc3f7c2cd78a29ec080f7039a413d2d2639d19fec4146"
      },
      "downloads": -1,
      "filename": "yamlval-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5ec454126045a22525bdb2a6291e6f86",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10745,
      "upload_time": "2021-01-03T05:50:28",
      "upload_time_iso_8601": "2021-01-03T05:50:28.773291Z",
      "url": "https://files.pythonhosted.org/packages/8f/50/9057b297d20340d68b81462fbec1fe767e2c7e2a26bb4f787f9213f05365/yamlval-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}