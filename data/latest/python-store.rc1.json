{
  "info": {
    "author": "Gigaquads",
    "author_email": "what@gigaquads.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Store\nThis library provides a `Store` datatype for Python. Each store looks and feels\nlike an ORM, but unlike an ORM, there is no database on the other end. Instead,\nall data lives in memory, in the form of plain Python dicts and B-tree indices.\nStores support **SQL-like _select_ statements** in the style of SQLAlchemy,\n**atomic transactions** and **multithreading**.\n\nThe source code aims to be rebustly documented, as we encourage open-source\ncollaboration on this Project.\n\n## Use-cases\n- Long-running interactive applications, like games.\n- Automated trading systems with complex internal state management requirements.\n- Stream-processing applications that perform fast _ad hoc_ queries on stream buffers.\n\n## An Example\nImagine a system that generates user input events, like _mouse click_ and _key\npress_. In the following example, we delete _click events_ created after a\nspecified time and capitalize the character asssociated with each _key press_\nwithin a transaction.\n\n```python\nfrom store import Store\n\nevents = Store()\n\n# insert fictitious \"event\" records\nevents.create_many([\n    {'event_type': 'press', 'char': 'x', 'time': 1},\n    {'event_type': 'click', 'button': 'L', 'position': (5, 8), 'time': 2},\n    {'event_type': 'click', 'button': 'R', 'position': (3, 4), 'time': 3},\n    {'event_type': 'press', 'char': 'y', 'time': 4},\n    {'event_type': 'press', 'char': 'p', 'time': 5},\n])\n\nwith events.transaction() as transaction:\n    # delete \"click\" events after specified time\n    transaction.select().where(\n        events.row.event_type == 'click',\n        events.row.time > 2\n    ).delete()\n\n    # capitalize the \"char\" for each selected \"press\" event\n    get_press_events = transaction.select().where(\n        x.event_type == 'press',\n        x.char.one_of(['x', 'y', 'z'])\n    )\n    for event in get_press_events(dtype=list):\n        event['char'] = event['char'].upper()\n```\n\n## State Dicts\nStore methods, like `create` and `update`, return _state dicts_. Unlike regular\ndicts, any change to the keys or values of a state dict results in an update to\nthe store. For example, suppose that `user` is a state dict. As such,\n`user['name'] ='John'` generates a call to `store.update` under the hood. When\nthis happens, any existing reference to the same `user` immediately reflect this\nchange. There is no need to refresh each reference manually (as they are all\nactually the same object). The same is true for other methods, like `update`,\n`setdefault`, etc.\n\nLet's illustrate with an example:\n\n```python\nfrank_1 = store.create({'id': 1, 'name': 'frank'})\nfrank_2 = store.get(1)\n\n# the store manages a singleton reference to frank's StateDict\n# in its internal so-called identity set.\nassert frank_1 is frank_2\n\n# frank_1 and frank_2 are references to the same object,\n# so they should both reflect the same change.\nfrank_1['name'] = 'Franklin'\n\nassert frank_2['name'] == 'Franklin'\n\n# likewise, any subsequent reference should reflect the same change\nfrank_3 = store.get(1)\n\nassert frank_3['name'] == 'Franklin'\n```\n\n### Stateful Methods\nHere is a list of each `dict` method that has been extended to result in an\nupdate to store as a side-effect. On the lefthand side of each arrow is the\n`dict` method. On the righthand side is the corresponding `store` call.\n\n- `state.update(mapping)` ➞ `store.update(state, mapping.keys())`\n- `state.setdefault(key, default)` ➞ `store.update(state, {key})`\n- `state[key] = value` ➞ `store.update(state, {key})`\n- `del state[key]` ➞ `store.delete(state, {key})`\n\n### Indexes\nBy default, all `StateDict` keys are indexed, including those with non-scalar\nvalues -- like lists, sets, dicts, etc. This means that that queries are fast.\n\n## Queries\nYou can query a store like a SQL database, using _select_, _where_, _order_by_,\n_limit_ and _offset_ constraints.\n\n### Symbols\nSelect statements are written with the help of a class called `Symbol`. A symbol\nis a variable used to express what you want to select and how. Suppose you had a\nstore of _user_ records. Then, using a symbol, You could write a query to\nselects all users, created after a certain cut-off date.\n\n```python\nuser = user_store.symbol()\n\nget_users = user_store.select(\n    user.first_name,\n    user.email\n).where(\n    user.created_at > cutoff_date\n)\n\nfor user in get_users(dtype=list):\n    send(message=f'Hello, {user[\"first_name\"]}!', email=user['email'])\n```\n\nAn alternative to instantiating a new symbol for each query is to use a built-in\nproperty, `store.row`. The following query is identical to the one above:\n\n```python\nget_users = user_store.select(\n    user_store.row.first_name,\n    user_store.row.email\n).where(\n    user_store.row.created_at > cutoff_date\n)\n```\n### Select\nBy default, an empty select will select everything, like `select * from...` in\nSQL; however, if you're only interested in a subset of fields, you can\nexplicitly enumerate them.\n\n#### Selecting Everything\n```python\nquery = store.select()\n```\n\n#### Selecting Specific Fields\n```python\nquery = store.select(store.row.name, store.row.email)\n```\n\n### Where (Filtering)\nYou can constrain queries to select only records whose values match a given\nlogical predicate. Predicates can be arbitrarily nested in compound boolean\nexpressions. This is similar to the \"where\" clause in SQL select statements.\n\n### Filtering Non-scalars Values\nUnlike a SQL database, with a store, you can apply predicate logic not only to\nscalar values, like numbers and strings, but also non-scalar types, like dicts,\nlists, and sets.\n\nFor example, this is possible:\n\n```python\n# imagine you have a store with user dicts, and each user dict\n# has a nested dog dict with an \"age\" value.\n\nget_users = store.select().where(store.row.dog <= {'age': 10})\n\nfor user in get_users():\n    assert user['dog']['age'] <= 10\n```\n\nUsing a symbol, here are some example:\n\n#### Conditional Expressions\n```python\nuser = store.symbol()\n\n# equality\npredicate = (user.email == 'elon.musk@gmail.com')\npredicate = (user.email != 'elon.musk@gmail.com')\n\n# inequality\npredicate = (user.age >= 50)\n\n# containment\npredicate = (user.favorite_color.in(['red', 'blue'])\n\n# logical conjunction (AND)\npredicate = (user.scent == 'smelly') & (user.income <= 20000)\n\n# logical disjunction (OR)\npredicate = (user.scent == 'smelly') | (user.income <= 20000)\n\n# logical conjunction and disjunction combined\npredicate = (\n    ((user.scent == 'smelly') | (user.age <= 20)) & (user.name == 'Bob')\n)\n```\n\nMoreover, predicates can be built up gradually, like so:\n\n```python\npredicate = (user.age <= 20)\n\nif some_condition:\n    predicate &= (user.income > 100000)   # |= also works\n```\n\nOnce you have your predicate, you can pass it into a query's `where` method:\n\n```python\nquery = store.select().where(\n    (user.age <= 20) | (user.is_member == True)\n)\n```\n\n### Order By\nQuery results can be sorted by one or more values using the `order_by` query\nmethod. For example:\n\n```python\n# sort results by age (in ascending order) first\n# created_at date (in descending order) second.\nquery = store.select().order_by(\n    user.age.asc,\n    user.created_at.desc\n)\n```\n\n#### Ordering By Non-scalar Values\nUnlike SQL, the store can sort non-scalar datatypes, like dicts, lists, and sets\n-- in addition to plain ints and strings. This means that you can do things like\n-- this:\n\n```python\nstore.create_many([\n    {'owner': 'Mohammed', 'dog': {'age': 10}},\n    {'owner': 'Kang Bo', 'dog': {'age': 6}},\n])\n\nget_users = store.select().order_by(store.row.dog.asc)\nusers = get_users(dtype=list)\n\nfor u1, u2 in zip(users, users[1:]):\n    assert u1.dog['age'] <= u2.dog['age']\n```\n\nNote that, when sorting a dict, the dict's items are sorted and compared in the\nresulting order.\n\n### Limit & Offset\nQueries support pagination via limit and offset parameters. The `limit`\nparameter is an `int` that determines the maximum number of records returned by\nthe query while the `offset` parameter determines the starting index of the\nreturned slice. When using limit and offset, it is important to specify an order, using\n`order_by`.\n\n```python\nquery = store.select(\n    user.email\n).order_by(\n    user.age.desc\n).offset(\n    20\n).limit(\n    10\n)\n```\n\n## Transactions\nStores support transactions as well. If, for some reason you don't already know,\na database transaction is a mechanism that allows you to perform multiple\noperations as if they were all performed int a single step. This way, if one\noperation fails, then they all fail, and the state of the store remains intact.\nThe syntax for creating transactions is straight forward:\n\n```python\nwith user_store.transaction() as user_trans:\n    # update the name of one user and delete another\n    users = user_trans.get_many([1, 2])\n    users[1]['name'] = 'Updated Name'\n    users[2].delete()\n```\n\nAt the end of the `with` block, the transaction commits; otherwise, if an\nexception is raised, the transaction rolls back, clearing its internal state.\n\nAlternate to using the `with` statement, `commit` and `rollback` methods can be\ncalled explicitly.\n\n```python\nuser_trans = user_store.transaction()\n\ntry:\n    users = user_trans.get_many([1, 2])\n    users[1]['name'] = 'Updated Name'\n    users[2].delete()\n    user_trans.commit()\nexcept Exception:\n    user_trans.rollback()\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gigaquads/store",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-store",
    "package_url": "https://pypi.org/project/python-store/",
    "platform": "any",
    "project_url": "https://pypi.org/project/python-store/",
    "project_urls": {
      "Homepage": "https://github.com/gigaquads/store"
    },
    "release_url": "https://pypi.org/project/python-store/3.0.3/",
    "requires_dist": [
      "appyratus",
      "ordered-set",
      "BTrees"
    ],
    "requires_python": "",
    "summary": "Pure Python in-memory SQL-like object store",
    "version": "3.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12072666,
  "releases": {
    "3.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "052d147adfbd87206c4b82293818417cef026def951a22d3bfc9cca2628b84c6",
          "md5": "0ac1591fc9cac9b7c1d0ce4a0d6861aa",
          "sha256": "0c1884f1d018692f55b7daa121226a30eb90bb7f359f92850db571d3e0c81130"
        },
        "downloads": -1,
        "filename": "python_store-3.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ac1591fc9cac9b7c1d0ce4a0d6861aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24748,
        "upload_time": "2021-11-19T19:07:53",
        "upload_time_iso_8601": "2021-11-19T19:07:53.630348Z",
        "url": "https://files.pythonhosted.org/packages/05/2d/147adfbd87206c4b82293818417cef026def951a22d3bfc9cca2628b84c6/python_store-3.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9721341cedcffe9719b499770aa8ce2710aff92e64d66da09335b820823eef5b",
          "md5": "3355d6f7aa19eb7ea0fdbf951b1971a0",
          "sha256": "b2f8f56ac933094d015aa3a9b47a5501c12448d680fc899a42d2a44c7ebf2e14"
        },
        "downloads": -1,
        "filename": "python-store-3.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3355d6f7aa19eb7ea0fdbf951b1971a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20192,
        "upload_time": "2021-11-19T19:07:55",
        "upload_time_iso_8601": "2021-11-19T19:07:55.587903Z",
        "url": "https://files.pythonhosted.org/packages/97/21/341cedcffe9719b499770aa8ce2710aff92e64d66da09335b820823eef5b/python-store-3.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "052d147adfbd87206c4b82293818417cef026def951a22d3bfc9cca2628b84c6",
        "md5": "0ac1591fc9cac9b7c1d0ce4a0d6861aa",
        "sha256": "0c1884f1d018692f55b7daa121226a30eb90bb7f359f92850db571d3e0c81130"
      },
      "downloads": -1,
      "filename": "python_store-3.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0ac1591fc9cac9b7c1d0ce4a0d6861aa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24748,
      "upload_time": "2021-11-19T19:07:53",
      "upload_time_iso_8601": "2021-11-19T19:07:53.630348Z",
      "url": "https://files.pythonhosted.org/packages/05/2d/147adfbd87206c4b82293818417cef026def951a22d3bfc9cca2628b84c6/python_store-3.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9721341cedcffe9719b499770aa8ce2710aff92e64d66da09335b820823eef5b",
        "md5": "3355d6f7aa19eb7ea0fdbf951b1971a0",
        "sha256": "b2f8f56ac933094d015aa3a9b47a5501c12448d680fc899a42d2a44c7ebf2e14"
      },
      "downloads": -1,
      "filename": "python-store-3.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3355d6f7aa19eb7ea0fdbf951b1971a0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20192,
      "upload_time": "2021-11-19T19:07:55",
      "upload_time_iso_8601": "2021-11-19T19:07:55.587903Z",
      "url": "https://files.pythonhosted.org/packages/97/21/341cedcffe9719b499770aa8ce2710aff92e64d66da09335b820823eef5b/python-store-3.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}