{
  "info": {
    "author": "",
    "author_email": "Andrey Rozenberg <alephreish@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# peptide-matcher\n\npeptide-matcher is a piece of software that can be used for matching peptide sequences identified in proteomics experiments using a database-match or a de novo approach against a sequence database. The main purpose is to extract sequence context for the corresponding matches, but peptide-matcher can also provide structural context if provided with a database that includes structural information, see [peptide-matcher-data](https://github.com/OKLAB2016/peptide-matcher-data/releases/).\n\nThere are three ways of how to use peptide-matcher:\n\n* the GUI `peptide_matcher_gui`\n* the CLI `peptide_matcher`\n* the python class `peptide_matcher.PeptideMatcher`\n\nThe GUI is written with [wxWidgets](https://www.wxwidgets.org/). Other dependencies include [biopython](https://biopython.org/) and [pyahocorasick](https://pyahocorasick.readthedocs.io/).\n\n## Installation\n\nInstall with pipy: `pip3 install peptide_matcher`.\n\n## How to use the GUI\n\n![interface](doc/interface.png)\n\nTwo files are needed: the database in fasta format with optional structural annotations and a plain list of peptide sequences.\n\nThe optional structural annotations should follow a custom format. Databases generated based on alphafold's models for a couple of popular model organisms are distributed at [peptide-matcher-data](https://github.com/OKLAB2016/peptide-matcher-data/releases/).\n\nThe results of the peptide matching are returned to the GUI and can be saved as xlsx. For each peptide the following output is generated:\n\n| Field          | Description                                    | Example                       | Values                                            |\n|----------------|------------------------------------------------|-------------------------------|---------------------------------------------------|\n| `Peptide`      | peptide sequence                               | QVHAVSFYSK                    | string of amino acid symbols                      |\n| `Length`       | peptide length                                 | 10                            | integer                                           |\n| `Protein`      | matching protein id                            | A6NL46                        | string                                            |\n| `Start`        | start position (1-based)                       | 150                           | integer                                           |\n| `End`          | end position (1-based)                         | 159                           | integer                                           |\n| `C-term`       | distance to protein's C-terminus               | 182                           | integer                                           |\n| `N-flank`      | N-flanking residues in this protein            | TDKA                          | string                                            |\n| `C-flank`      | C-flanking residues in this protein            | GHGV                          | string                                            |\n| `N-flank*`     | weblogo for each position of the N-flank       | 2T\\|2D\\|2K\\|2A                | `\\|` - separator between positions                |\n| `C-flank*`     | weblogo for each position of the C-flank       | 1G1D\\|2H\\|1G1E\\|2V            |                                                   |\n| `N-flank SS`   | secondary structure for the N-flank            | HHHH                          | string of DSSP codes                              |\n| `Peptide SS`   | same for the peptide itself                    | HH------EE                    |                                                   |\n| `C-flank SS`   | same for the C-flank region                    | EEEE                          |                                                   |\n| `N-flank TM`   | transmembrane region for the N-flank           | TTTT                          | string of: `T` - TM region, `S` - signal peptide  |\n| `Peptide TM`   | same for the peptide itself                    | TT--------                    |                                                   |\n| `C-flank TM`   | same for the C-flank region                    | ----                          |                                                   |\n| `N-flank conf` | alphafold's pLDDT score for the N-flank        | 43,46,40,49                   | list of integers 0-100                            |\n| `Peptide conf` | same for the peptide itself                    | 44,44,45,44,50,39,48,39,56,46 |                                                   |\n| `C-flank conf` | same for the C-flank                           | 49,47,42,46                   |                                                   |\n| `N-flank RSA`  | relative solvent accessibility for the N-flank | 81,79,84,71                   | list of integers 0-100                            |\n| `Peptide RSA`  | same for the peptide itself                    | 90,78,75,78,54,62,73,84,73,81 |                                                   |\n| `C-flank RSA`  | same for the C-flank                           | 67,78,71,80                   |                                                   |\n\nIn the provided database, the RSA values are calculated by dividing the absolute solvent accessibility (ASA) as produced by dssp (mkdssp v.3.0.0) by the theoretical maximum values for ASA from [Tien et al 2013](https://dx.doi.org/10.1371%2Fjournal.pone.0080635).\n\n## How to use CLI\n\nCheck out `peptide_matcher -h`:\n\n```\n$ peptide_matcher -h\nusage: peptide_matcher [-h] --peptides FILENAME --database FILENAME [--secstruct] [--flanks N] [--format {json,tsv,csv}] [--output OUTPUT]\n\nMatch peptides in a protein database.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --peptides FILENAME, -p FILENAME\n                        list of peptides to match\n  --database FILENAME, -d FILENAME\n                        protein database in fasta format\n  --secstruct, -s       whether the database also contains structural information\n  --flanks N, -f N      length of the flanks to report (default: 4)\n  --format {json,tsv,csv}, -F {json,tsv,csv}\n                        output format (default: json)\n  --output OUTPUT, -o OUTPUT\n                        output file (default: output to stdout)\n```\n\nThe output is similar to that of the GUI. The header of the tabular output formats looks as follows: `[ 'peptide', 'peplen', 'record_id', 'start', 'end', 'c_term', 'n_flank', 'c_flank', 'n_logos', 'c_logos', 'sst_n_term', 'sst_pept', 'sst_c_term', 'tm_n_term', 'tm_pept', 'tm_c_term', 'conf_n_term', 'conf_pept', 'conf_c_term', 'acc_n_term', 'acc_pept', 'acc_c_term' ]`. The json output is a list of dictionaries with each one of the following format: `{\"peptide\": \"IYGALAVGAP\", \"matches\": [{\"record_id\": \"P77549\", \"start\": 157, \"end\": 166, \"c_term\": 227, \"n_flank\": \"NGMA\", \"c_flank\": \"LGLL\", \"sst_n_term\": \"HHHH\", \"sst_pept\": \"HHHHHHHHHH\", \"sst_c_term\": \"HHHH\", \"tm_n_term\": \"----\", \"tm_pept\": \"----------\", \"tm_c_term\": \"----\", \"conf_n_term\": [94, 89, 91, 94], \"conf_pept\": [93, 86, 88, 94, 89, 85, 90, 92, 86, 88], \"conf_c_term\": [93, 94, 91, 94], \"acc_n_term\": [3, 6, 25, 6], \"acc_pept\": [9, 24, 19, 0, 25, 50, 44, 0, 22, 45], \"acc_c_term\": [36, 0, 37, 47]}], \"n_logos\": [{\"N\": 1}, {\"G\": 1}, {\"M\": 1}, {\"A\": 1}], \"c_logos\": [{\"L\": 1}, {\"G\": 1}, {\"L\": 1}, {\"L\": 1}]}`.\n\n## How to use the API\n\n```\nfrom peptide_matcher import PeptideMatcher, wrap_logos, wrap_scores\npeptides = [ 'IYGALAVGAP', 'LTCDETPVFSGSVLN', 'KRFARESGMTLL', 'GAGFAELLSSLQTPEIK', 'RTGHKLV' ] # or a file handle\ndatabase = 'UP000000625_83333_ECOLI.fasta' # or a file handle\nflanks = 4\nsecstruct = True\npm = PeptideMatcher(peptides, database, secstruct, flanks)\nfor output in pm.run():\n    print(output)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "peptide-matcher",
    "package_url": "https://pypi.org/project/peptide-matcher/",
    "platform": null,
    "project_url": "https://pypi.org/project/peptide-matcher/",
    "project_urls": {
      "Bug Tracker": "https://github.com/OKLAB2016/peptide-matcher/issues",
      "Homepage": "https://github.com/OKLAB2016/peptide-matcher"
    },
    "release_url": "https://pypi.org/project/peptide-matcher/2.0.0/",
    "requires_dist": [
      "wxPython",
      "xlsxwriter",
      "pyahocorasick",
      "biopython"
    ],
    "requires_python": ">=3.7",
    "summary": "Peptide matcher",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17165641,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3395e19546a5959ba75bcbc3b57353a0acf9f5a0ee181a254ec1be70510946b6",
          "md5": "783cca269b28aed336baa2cf85411cf1",
          "sha256": "990f0351066441d056a495d0d5008d698a48269a58a6857d5822c76ca39e486f"
        },
        "downloads": -1,
        "filename": "peptide_matcher-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "783cca269b28aed336baa2cf85411cf1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 23710,
        "upload_time": "2023-03-05T17:36:47",
        "upload_time_iso_8601": "2023-03-05T17:36:47.163869Z",
        "url": "https://files.pythonhosted.org/packages/33/95/e19546a5959ba75bcbc3b57353a0acf9f5a0ee181a254ec1be70510946b6/peptide_matcher-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a5fee04c5bd6727b04ccbb6cea87aaabc196ce3fd6e46014445c31548d6de14",
          "md5": "ac3bd8b82864604c5702f6b46b7db72d",
          "sha256": "43aa87c8bd004bb7baa68afd1507bd34b8855377b99a3a44b78f189389b74599"
        },
        "downloads": -1,
        "filename": "peptide_matcher-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ac3bd8b82864604c5702f6b46b7db72d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24484,
        "upload_time": "2023-03-05T17:36:49",
        "upload_time_iso_8601": "2023-03-05T17:36:49.787460Z",
        "url": "https://files.pythonhosted.org/packages/0a/5f/ee04c5bd6727b04ccbb6cea87aaabc196ce3fd6e46014445c31548d6de14/peptide_matcher-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3395e19546a5959ba75bcbc3b57353a0acf9f5a0ee181a254ec1be70510946b6",
        "md5": "783cca269b28aed336baa2cf85411cf1",
        "sha256": "990f0351066441d056a495d0d5008d698a48269a58a6857d5822c76ca39e486f"
      },
      "downloads": -1,
      "filename": "peptide_matcher-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "783cca269b28aed336baa2cf85411cf1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 23710,
      "upload_time": "2023-03-05T17:36:47",
      "upload_time_iso_8601": "2023-03-05T17:36:47.163869Z",
      "url": "https://files.pythonhosted.org/packages/33/95/e19546a5959ba75bcbc3b57353a0acf9f5a0ee181a254ec1be70510946b6/peptide_matcher-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a5fee04c5bd6727b04ccbb6cea87aaabc196ce3fd6e46014445c31548d6de14",
        "md5": "ac3bd8b82864604c5702f6b46b7db72d",
        "sha256": "43aa87c8bd004bb7baa68afd1507bd34b8855377b99a3a44b78f189389b74599"
      },
      "downloads": -1,
      "filename": "peptide_matcher-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ac3bd8b82864604c5702f6b46b7db72d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 24484,
      "upload_time": "2023-03-05T17:36:49",
      "upload_time_iso_8601": "2023-03-05T17:36:49.787460Z",
      "url": "https://files.pythonhosted.org/packages/0a/5f/ee04c5bd6727b04ccbb6cea87aaabc196ce3fd6e46014445c31548d6de14/peptide_matcher-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}