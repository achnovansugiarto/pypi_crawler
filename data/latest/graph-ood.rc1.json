{
  "info": {
    "author": "Shurui Gui, Xiner Li",
    "author_email": "shurui.gui@tamu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# GOOD\nGOOD: A Graph Out-of-Distribution Benchmark\n\n[license-url]: https://github.com/divelab/GOOD/blob/main/LICENSE\n[license-image]:https://img.shields.io/badge/license-GPL3.0-green.svg\n\n[![Documentation Status](https://readthedocs.org/projects/good/badge/?version=latest)](https://good.readthedocs.io/en/latest/?badge=latest)\n![Last Commit](https://img.shields.io/github/last-commit/divelab/DIG)\n[![License][license-image]][license-url]\n[![codecov](https://codecov.io/gh/divelab/GOOD/branch/main/graph/badge.svg?token=W41HSP0XCY)](https://codecov.io/gh/divelab/GOOD)\n[![CircleCI](https://circleci.com/gh/divelab/GOOD/tree/main.svg?style=svg)](https://circleci.com/gh/divelab/GOOD/tree/main)\n[![GOOD stars](https://img.shields.io/github/stars/divelab/GOOD?style=social)](https://github.com/divelab/GOOD)\n\n[Documentation](https://good.readthedocs.io) | [Paper](https://arxiv.org/abs/2206.08452)\n> We are actively building the document.\n\n* [Overview](#overview)\n* [Why GOOD?](#why-good-)\n* [Installation](#installation)\n* [Quick tutorial](#quick-tutorial)\n  * [Module usage (recommended: use only GOOD datasets)](#module-usage)\n  * [Project usage (recommended: OOD algorithm researches & developments)](#project-usage)\n* [Reproducibility](#reproducibility)\n* [Contact](#contact)\n\n## Overview\n\n**GOOD** (Graph OOD) is a graph out-of-distribution (OOD) algorithm benchmarking library depending on PyTorch and PyG\nto make develop and benchmark OOD algorithms easily.\n\nCurrently, GOOD contains 8 datasets with 14 domain selections. When combined with covariate, concept, and no shifts, we obtain 42 different splits.\nWe provide performance results on 7 commonly used baseline methods (ERM, IRM, VREx, GroupDRO, Coral, DANN, Mixup) with 10 random runs.\n\nThe GOOD dataset summaries are shown in the following figure.\n\n![Dataset](/../../blob/main/docs/source/imgs/Datasets.png)\n\n## Why GOOD?\n\nWhether you are an experienced researcher of graph out-of-distribution problems or a first-time learner of graph deep learning, \nhere are several reasons to use GOOD as your Graph OOD research, study, and development toolkit.\n\n* **Easy-to-use APIs:** GOOD provides simple APIs for loading OOD algorithms, graph neural networks, and datasets so that you can take only several lines of code to start.\n* **Flexibility:** Full OOD split generalization code is provided for extensions and any new graph OOD dataset contributions.\nOOD algorithm base class can be easily overwritten to create new OOD methods.\n* **Easy-to-extend architecture:** In addition to playing as a package, GOOD is also an integrated and well-organized project ready to be further developed.\nAll algorithms, models, and datasets can be easily registered by `register` and automatically embedded into the designed pipeline like a breeze!\nThe only thing the user needs to do is write your own OOD algorithm class, your own model class, or your new dataset class.\nThen you can compare your results with the leaderboard.\n* **Easy comparisons with the leaderboard:** We provide insightful comparisons from multiple perspectives. Any research and studies can use\nour leaderboard results for comparison. Note that this is a growing project, so we will include new OOD algorithms gradually.\nBesides, if you hope to include your algorithms in the leaderboard, please contact us or contribute to this project. A big welcome!\n* **Reproducibility:** \n  * OOD Datasets: GOOD provides full OOD split generalization code to reproduce or generate new datasets.\n  * Leaderboard results: One random seed round results are provided, and loaded models pass the test result reproduction.\n\n\n## Installation \n\n### Conda dependencies\n\nGOOD depends on [PyTorch (>=1.6.0)](https://pytorch.org/get-started/previous-versions/), [PyG (>=2.0)](https://pytorch-geometric.readthedocs.io/en/latest/notes/installation.html), and\n[RDKit (>=2020.09.5)](https://www.rdkit.org/docs/Install.html). For more details: [conda environment](/../../blob/main/environment.yml)\n\n> Note that we currently test on PyTorch (==1.10.1), PyG (==2.0.3), RDKit (==2020.09.5); thus we strongly encourage to install these versions.\n>\n> Attention! Due to a known issue, please install PyG through Pip to avoid incompatibility.\n\n### Pip (Beta)\n\n#### Only use modules independently (pending)\n\n```shell\npip install graph-ood\n```\n\n#### Take the advantages of whole project (recommended)\n\n```shell\ngit clone https://github.com/divelab/GOOD.git && cd GOOD\npip install -e .\n```\n\n## Quick Tutorial\n\n### Module usage\n\n#### GOOD datasets\nThere are two ways to import 8 GOOD datasets with 14 domain selections and a total 42 splits, but for simplicity, we only show one of them.\nPlease refer to [Tutorial](https://good.readthedocs.io/en/latest/tutorial.html) for more details.\n```python\n# Directly import\nfrom GOOD.data.good_datasets.good_hiv import GOODHIV\nhiv_datasets, hiv_meta_info = GOODHIV.load(dataset_root, domain='scaffold', shift='covariate', generate=False)\n```\n\n#### GOOD GNNs\nThe best and fair way to compare algorithms with the leaderboard is to use the same and similar graph encoder structure;\ntherefore, we provide GOOD GNN APIs to support. Here, we use an objectified dictionary `config` to pass parameters. More\ndetails about the config: [Documents of config](https://good.readthedocs.io/en/latest/configs.html)\n\n*To use exact GNN*\n```python\nfrom GOOD.networks.models.GCNs import GCN\nmodel = GCN(config)\n```\n*To only use parts of GNN*\n```python\nfrom GOOD.networks.models.GINvirtualnode import GINEncoder\nencoder = GINEncoder(config)\n```\n\n#### GOOD algorithms\nTry to apply OOD algorithms to your own models?\n```python\nfrom GOOD.ood_algorithms.algorithms.VREx import VREx\nood_algorithm = VREx(config)\n# Then you can provide it to your model for necessary ood parameters, \n# and use its hook-like function to process your input, output, and loss.\n```\n\n### Project usage\n\nIt is a good beginning to make it work directly. Here, we provide the command line script `goodtg` (GOOD to go) to access the main function located at `GOOD.kernel.pipeline:main`.\nChoosing a config file in `configs/GOOD_configs`, we can start a task:\n\n```shell\ngoodtg --config_path GOOD_configs/GOODCMNIST/color/concept/DANN.yaml\n```\n\nSpecifically, the task is clearly divided into three steps:\n1. **Config**\n```python\nfrom GOOD import config_summoner\nfrom GOOD.utils.args import args_parser\nfrom GOOD.utils.logger import load_logger\nargs = args_parser()\nconfig = config_summoner(args)\nload_logger(config)\n```\n2. **Loader**\n```python\nfrom GOOD.kernel.pipeline import initialize_model_dataset\nfrom GOOD.ood_algorithms.ood_manager import load_ood_alg\nmodel, loader = initialize_model_dataset(config)\nood_algorithm = load_ood_alg(config.ood.ood_alg, config)\n```\n3. **Train/test pipeline**\n```python\nfrom GOOD.kernel.pipeline import load_task\nload_task(config.task, model, loader, ood_algorithm, config)\n```\n\nPlease refer to [Tutorial](https://good.readthedocs.io/en/latest/tutorial.html) for more details.\n\n## Reproducibility\n\nFor reproducibility, we provide full configurations used to obtain leaderboard results in [configs/GOOD_configs](/../../blob/main/configs/GOOD_configs).\n\nWe further provide two tests: dataset regeneration test and test result check.\n\n### Dataset regeneration test\n\nThis test regenerates all datasets again and compares them with the datasets used in the original training process locates.\nTest details can be found at [test_regenerate_datasets.py](/../../blob/main/test/test_reproduce_full/test_regenerate_datasets.py).\nFor a quick review, we provide a [full regeneration test report](https://drive.google.com/file/d/1jIShh3eBXAQ_oQCFL9AVU3OpUlVprsbo/view?usp=sharing).\n\n### Leaderboard results test\n\nThis test loads [all checkpoints in round 1](https://drive.google.com/file/d/17FfHYCP0-wwUILPD-PczwjjrYQHKxU-l/view?usp=sharing) and\ncompares their results with saved ones. Test details can be found at [test_reproduce_round1.py](/../../blob/main/test/test_reproduce_full/test_reproduce_round1.py).\nFor a quick review, we also post our [full round1 reproduce report](https://drive.google.com/file/d/1kR4k0E0y6Rtcx4WbjevSxKviHrkx3G1y/view?usp=sharing).\n\nThese reports are in `html` format. Please download them and open them in your browser.: )\n\n**Training plots:**\nThe training plots for all algorithms in round 1 can be found [HERE](https://drive.google.com/file/d/1-UsWstrF1cxk7MExRV-37emGi4spQtj0/view?usp=sharing).\n\n### Sampled tests\n\nIn order to keep the validity of our code all the time, we link our project with circleci service and provide several \nsampled tests to go through (because of the limitation of computational resources in CI platforms).\n\n\n## Discussion\n\nPlease submit [new issues](/../../issues/new) or start [a new discussion](/../../discussions/new) for any technical or other questions.\n\n## Contact\n\nPlease feel free to contact [Shurui Gui](mailto:shurui.gui@tamu.edu), [Xiner Li](mailto:lxe@tamu.edu), or [Shuiwang Ji](mailto:sji@tamu.edu)!\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/divelab/GOOD",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graph-ood",
    "package_url": "https://pypi.org/project/graph-ood/",
    "platform": null,
    "project_url": "https://pypi.org/project/graph-ood/",
    "project_urls": {
      "Bug Tracker": "https://github.com/divelab/GOOD/issues",
      "Homepage": "https://github.com/divelab/GOOD"
    },
    "release_url": "https://pypi.org/project/graph-ood/0.1.0/",
    "requires_dist": [
      "cilog (==1.2.3)",
      "gdown (==4.4.0)",
      "matplotlib (==3.5.2)",
      "munch (==2.5.0)",
      "networkx (==2.8)",
      "ogb (==1.3.3)",
      "pytest (==7.1.2)",
      "pytest-cov (~=3.0)",
      "pytest-xdist (~=2.5)",
      "ruamel.yaml (==0.17.21)",
      "sphinx (>=4.5)",
      "protobuf (==3.20.1)",
      "sphinx-rtd-theme (==1.0.0)",
      "tensorboard (==2.8.0)",
      "tqdm (==4.64.0)",
      "typed-argument-parser (==1.7.2)"
    ],
    "requires_python": ">=3.8",
    "summary": "GOOD: A Graph Out-of-Distribution Benchmark",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14205117,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e9baeb6a3ae3a7b67ed379659596b2a7e4c9ce408ee12eb1eb719ef4764661fc",
          "md5": "418a8dafc50d4d71bd389ffdb3c85bdc",
          "sha256": "2a7c308665f7eb21cd7064abe420c0a46986f1d3487b9433296cfa04778a089d"
        },
        "downloads": -1,
        "filename": "graph_ood-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "418a8dafc50d4d71bd389ffdb3c85bdc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 115994,
        "upload_time": "2022-06-21T23:03:20",
        "upload_time_iso_8601": "2022-06-21T23:03:20.381617Z",
        "url": "https://files.pythonhosted.org/packages/e9/ba/eb6a3ae3a7b67ed379659596b2a7e4c9ce408ee12eb1eb719ef4764661fc/graph_ood-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c8403e02398ab5e952528e2bec7db4fc8599db4cac7aa33305ae1b3dc33b7691",
          "md5": "41a7dba23cf20a08b62d11373b158962",
          "sha256": "f03e439b9e2e5a7a4927cf423b57c52b2f84793d3134eb72d71dd5ea042d2026"
        },
        "downloads": -1,
        "filename": "graph-ood-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "41a7dba23cf20a08b62d11373b158962",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 73479,
        "upload_time": "2022-06-21T23:03:22",
        "upload_time_iso_8601": "2022-06-21T23:03:22.193199Z",
        "url": "https://files.pythonhosted.org/packages/c8/40/3e02398ab5e952528e2bec7db4fc8599db4cac7aa33305ae1b3dc33b7691/graph-ood-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e9baeb6a3ae3a7b67ed379659596b2a7e4c9ce408ee12eb1eb719ef4764661fc",
        "md5": "418a8dafc50d4d71bd389ffdb3c85bdc",
        "sha256": "2a7c308665f7eb21cd7064abe420c0a46986f1d3487b9433296cfa04778a089d"
      },
      "downloads": -1,
      "filename": "graph_ood-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "418a8dafc50d4d71bd389ffdb3c85bdc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 115994,
      "upload_time": "2022-06-21T23:03:20",
      "upload_time_iso_8601": "2022-06-21T23:03:20.381617Z",
      "url": "https://files.pythonhosted.org/packages/e9/ba/eb6a3ae3a7b67ed379659596b2a7e4c9ce408ee12eb1eb719ef4764661fc/graph_ood-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c8403e02398ab5e952528e2bec7db4fc8599db4cac7aa33305ae1b3dc33b7691",
        "md5": "41a7dba23cf20a08b62d11373b158962",
        "sha256": "f03e439b9e2e5a7a4927cf423b57c52b2f84793d3134eb72d71dd5ea042d2026"
      },
      "downloads": -1,
      "filename": "graph-ood-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "41a7dba23cf20a08b62d11373b158962",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 73479,
      "upload_time": "2022-06-21T23:03:22",
      "upload_time_iso_8601": "2022-06-21T23:03:22.193199Z",
      "url": "https://files.pythonhosted.org/packages/c8/40/3e02398ab5e952528e2bec7db4fc8599db4cac7aa33305ae1b3dc33b7691/graph-ood-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}