{
  "info": {
    "author": "Iv√°n de Paz Centeno",
    "author_email": "ipazc@unileon.es",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Puppettable\n\n\nPupppettable is a highly-scalable remote-hosted data storage for big datasets of small samples (under 1 MB).\nIt makes it easy to handle data transparently by using a Python's data structures API interface. It allows to use <b>Microsoft Azure Table Storage</b> as the backend for the data.\n\n\n\n## How to install\n\nIt is available in the official PIP repository:\n\n````python\npip install puppettable\n````\n\n## Basic usage\n\nYou need to create a Storage account in Microsoft Azure. <b>Puppettable</b> requires a `connection_string` to connect to the Azure Table Storage service.\n\n````python\n>>> from puppettable import AzureTableService\n>>> tables = AzureTableService(connection_string)\n>>> tables\nAzure 5 Tables: [\"dataset1\", \"dataset2\", \"dataset3\", ..., \"mnist\"]\n````\n\nOnce the object ``tables`` is instantiated, it can be used as a dictionary to create or retrieve tables from the service.\nThe tables are lazy-created as soon as an element is appended. They offer the same behaviour as a Python array:\n\n````python\n>>> tables\n>>> table = tables[\"newDataset\"]\n\n>>> table.insert(\"foo\")\n>>> table.insert(\"bar\")\n>>> table.append_many([\"foo2\", \"bar2\"])\n\n>>> print(\"The length of the table is:\", len(table))\nThe length of the table is 4\n>>> print(\"The size of the table (in Bytes) is:\", table.size())\nThe size of the table (in Bytes) is: 14\n````\n\n\nEvery table keeps track of its internal statistics. The length and the size are computed dynamically, and the size is an estimation.\n\n````python\n>>> table = tables[\"dataset4\"]\n>>> table\nTable: 'dataset4'; Partition: 'default'; Length: 10565; Size: 67.599,49 KB\n````\n\nManaging data inside a table follows the same API as a Python array:\n\n````python\n>>> table = tables[\"newDataset\"]\n>>> table[0]\nfoo\n>>> table[0:2]\n['foo', 'bar']\n>>> table[-1]\nbar2\n>>> table[-2:]\n['foo2', 'bar2']\n>>> table[:]\n['foo', 'bar', 'foo2', 'bar2']\n>>> table[::2]\n['foo', 'foo2']\n\n>>> table[0] = \"new_foo\"\n>>> table[2:4] = [\"new_foo2\", \"new_bar2\"]\n>>> table[:]\n['new_foo', 'bar', 'new_foo2', 'new_bar2']\n````\n\n\nFollowing the Azure distribution concepts, every table might have different partition keys for better distribution of the data. A partition key acts as an isolated group inside a table:\n\n\n````python\n>>> tables\nAzure 5 Tables: [\"dataset1\", \"dataset2\", \"dataset3\", ..., \"mnist\"]\n\n>>> table = tables[\"dataset4\"]\n>>> table\nTable: 'dataset4'; Partition: 'default'; Length: 10565; Size: 67.599,49 KB\n>>> table.set_partition(\"test\")\n>>> table\nTable: 'dataset4'; Partition: 'test'; Length: 0; Size: 0,0 KB\n>>> table.set_partition()\n>>> table\nTable: 'dataset4'; Partition: 'default'; Length: 10565; Size: 67.599,49 KB\n````\n\nThe deletion of elements/tables follows the same principle as the dictionaries and arrays in Python. Note though that the length of the table might stay intact as it is computed based on the maximum index detected in the data. \nThis might lead to incoherent statistics due to having all the previous elements removed but having an element in a high position in the table. \nThe size and the length can only be recalculated after eliminating the latest elements in the table.\n\n\n## Supported types\n\nPuppettable supports natively the following types:\n\n * Numpy arrays\n * Pandas DataFrames / Series\n * Dictionaries\n * Arrays / Tuples\n * Strings / Integers / Floats\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/ipazc/puppettable",
    "keywords": "puppettable azure table storage python",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "puppettable",
    "package_url": "https://pypi.org/project/puppettable/",
    "platform": "",
    "project_url": "https://pypi.org/project/puppettable/",
    "project_urls": {
      "Homepage": "http://github.com/ipazc/puppettable"
    },
    "release_url": "https://pypi.org/project/puppettable/0.0.1/",
    "requires_dist": [
      "pandas (>=1.0.5)",
      "azure-cosmosdb-table (==1.0.6)",
      "nose (>=1.3.7)",
      "pyarrow (>=0.17.1)",
      "tqdm (>=4.48.0)"
    ],
    "requires_python": "",
    "summary": "A highly scalable table backed up by Azure Table Storage, with improved functionality.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7791254,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49f424edd879f0f0d842a0446d114eec47bbf63c66354b28a866acc100ff7090",
          "md5": "b29ac374619a82bbf92bc272f43b6332",
          "sha256": "f7202e1eaa2c630a6956616b11f42c92d0140d8d2b486ccfe906277d483de81c"
        },
        "downloads": -1,
        "filename": "puppettable-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b29ac374619a82bbf92bc272f43b6332",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19805,
        "upload_time": "2020-07-26T20:12:38",
        "upload_time_iso_8601": "2020-07-26T20:12:38.946778Z",
        "url": "https://files.pythonhosted.org/packages/49/f4/24edd879f0f0d842a0446d114eec47bbf63c66354b28a866acc100ff7090/puppettable-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "49f424edd879f0f0d842a0446d114eec47bbf63c66354b28a866acc100ff7090",
        "md5": "b29ac374619a82bbf92bc272f43b6332",
        "sha256": "f7202e1eaa2c630a6956616b11f42c92d0140d8d2b486ccfe906277d483de81c"
      },
      "downloads": -1,
      "filename": "puppettable-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b29ac374619a82bbf92bc272f43b6332",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19805,
      "upload_time": "2020-07-26T20:12:38",
      "upload_time_iso_8601": "2020-07-26T20:12:38.946778Z",
      "url": "https://files.pythonhosted.org/packages/49/f4/24edd879f0f0d842a0446d114eec47bbf63c66354b28a866acc100ff7090/puppettable-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}