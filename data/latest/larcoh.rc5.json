{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# Joint calling pipeline\n\nA [Hail](https://hail.is/) based pipeline for post-processing and filtering of large scale genomic variant calling datasets.\n\n1. Combines GVCFs (generated by GATK4) to a Hail Matrix Table.\n1. Performs sample-level QC.\n1. Performs variant QC using a allele-specific VQSR model.\n\n\n## Usage\n\nThe workflow should be run using the [CPG analysis runner](https://github.com/populationgenomics/analysis-runner).\n\nInstall the CPG analysis runner:\n\n```sh\nmamba install -c cpg -c conda-forge analysis-runner\n```\n\nAssuming the name of the dataset is `fewgenomes`,\n\n```sh\nexport DATASET=fewgenomes\n```\n\nTest the workflow using the analysis runner on a given dataset:\n\n```sh\n# Assuming we already changed to the dataset repository root\nDATASET=$(basename $(pwd))\nanalysis-runner \\\n--dataset ${DATASET} \\\n--output-dir \"joint-calling/test\" \\\n--description \"Joint calling, test\" \\\n--access-level test \\\npython batch_workflow.py \\\n--namespace test \\\n--analysis-project fewgenomes \\\n--input-project fewgenomes \\\n--release-related \\\n--output-version v1-0 \\\n--assume-gvcfs-are-ready \\\n--scatter-count 50\n```\n\nThis command will use the `test` access level, which means finding the input GVCFs in the `test` namespace (e.g. `gs://cpg-$DATASET-test/gvcf/*.g.vcf.gz`), writing the resulting matrix tables to the `test-tmp` bucket, `gs://cpg-fewgenomes-test-tmp/mt/v0.mt`, and writing plots to `gs://cpg-fewgenomes-test-tmp/joint-calling/v0`.\n\n`--scatter-count` controls the number of secondary workers for Dataproc clusters, as well as the number of shards to parition data for the AS-VQSR analysis.\n\nTo use the `main` bucket for input and output, run the workflow with the `full` access level:\n\n```sh\nDATASET=$(basename $(pwd))\nanalysis-runner \\\n--dataset ${DATASET} \\\n--output-dir \"gs://cpg-${DATASET}-hail/joint-calling\" \\\n--description \"Joint calling, full\" \\\n--access-level full \\\njoint-calling/driver_for_analysis_runner.sh workflows/batch_workflow.py\\\n--scatter-count 200 \\\n--from main \\\n--to main \\\n--callset ${DATASET} \\\n--version $(VERSION) \\\n--batch batch1 \\\n--batch batch2 \\\n--batch batch3\n```\n\nIt will find input GVCFs in the `main` bucket, assuming the batch IDs are `batch1`, `batch2`, `batch3`: `gs://cpg-$DATASET-main/gvcf/{batch1,batch2,batch3}/*.g.vcf.gz`; write the resulting matrix table to the `main` bucket: `gs://cpg-fewgenomes-main/mt/v0.mt`, and plots to `gs://cpg-fewgenomes-analysis/joint-calling/v0`.\n\n\n## Overview of the pipeline steps\n\n1. Find inputs. According to the specified `--dataset` and `--batch` parameters, look at `gs://cpg-<dataset>-main/gvcf/<batch-id>/*.g.vcf.gz` (or`gs://cpg-<dataset>-test/gvcf/<batch-id>/*.g.vcf.gz`) for the GVCFs and a CSV file with QC metadata.\n\n1. Post-process the GVCFs:\n\n   * Run GATK ReblockGVCFs to annotate with allele-specific VCF INFO fields required for recalibration (QUALapprox, VarDP, RAW_MQandDP),\n   * Subset GVCF to non-alt chromosomes.\n\n1. Run the GVCF combiner using `scripts/combine_gvcfs.py`. The script merges GVCFs into a sparse Matrix Table using [Hail's vcf_combiner](https://hail.is/docs/0.2/experimental/vcf_combiner.html).\n\n1. Run the `scripts/sample_qc.py` script, that performs the [sample-level QC](#sample-qc), and generates a Table with the filtered sample IDs, as well as a metadata Table with metrics that were used for filtering (coverage, sex, ancestry, contamination, variant numbers/distributions, etc.).\n\n1. Run the [allele-specific VQSR approach](#allele-specific-vqsr) to perform the variant filtration.\n\n## Sample QC\n\nThe sample QC and random forest variant QC pipelines are largely a re-implementation and orchestration of [the Hail methods used for the quality control of GnomAD release](https://github.com/broadinstitute/gnomad_qc). Good summaries of gnomAD QC pipeline can be found in gnomAD update blog posts:\n\n* [https://macarthurlab.org/2017/02/27/the-genome-aggregation-database-gnomad](https://macarthurlab.org/2017/02/27/the-genome-aggregation-database-gnomad)\n* [https://macarthurlab.org/2018/10/17/gnomad-v2-1](https://macarthurlab.org/2018/10/17/gnomad-v2-1)\n* [https://macarthurlab.org/2019/10/16/gnomad-v3-0](https://macarthurlab.org/2019/10/16/gnomad-v3-0)\n* [https://gnomad.broadinstitute.org/blog/2020-10-gnomad-v3-1-new-content-methods-annotations-and-data-availability/#sample-and-variant-quality-control](https://gnomad.broadinstitute.org/blog/2020-10-gnomad-v3-1-new-content-methods-annotations-and-data-availability/#sample-and-variant-quality-control)\n* [https://blog.hail.is/whole-exome-and-whole-genome-sequencing-recommendations/](https://blog.hail.is/whole-exome-and-whole-genome-sequencing-recommendations/)\n\nHere we give a brief overview of the sample QC steps:\n\n   1. Compute sample QC metrics using Hailâ€™s [`sample_qc`](https://hail.is/docs/0.2/methods/genetics.html#hail.methods.sample_qc) module on all autosomal bi-allelic SNVs.\n\n   1. Filter outlier samples using the following cutoffs. Note that the most up to date cutoffs are speified in the configuration file [filter_cutoffs.yaml](joint_calling/filter_cutoffs.yaml), which can be overridden with `--filter-cutoffs-file`.\n\n   1. Filter using BAM-level metrics was performed when such metrics were available. We removed samples that were outliers for:\n\n      * Contamination: freemix > 5% (`call-UnmappedBamToAlignedBam/UnmappedBamToAlignedBam/*/call-CheckContamination/*.selfSM`/`FREEMIX`)\n      * Chimeras: > 5% (`call-AggregatedBamQC/AggregatedBamQC/*/call-CollectAggregationMetrics/*.alignment_summary_metrics`/`PCT_CHIMERAS`)\n      * Duplication: > 30% (`call-UnmappedBamToAlignedBam/UnmappedBamToAlignedBam/*/call-MarkDuplicates/*.duplicate_metrics`/`PERCENT_DUPLICATION`)\n      * Median insert size: < 250 (`call-AggregatedBamQC/AggregatedBamQC/*/call-CollectAggregationMetrics/*.insert_size_metrics`/`MEDIAN_INSERT_SIZE`)\n      * Median coverage < 18X (calculated from the GVCFs).\n\n   1. Sex inferred for each sample with Hail's [`impute_sex`](https://hail.is/docs/0.2/methods/genetics.html?highlight=impute_sex#hail.methods.impute_sex). Filter samples with sex chromosome aneuploidies or ambiguous sex assignment.\n\n   1. Note that all filtering above makes it exclude samples from the variant QC modelling, as well as from the AC/AF/AN frequency calculation. However, it keeps the samples in the final matrix table, with labels in `mt.meta.hardfilter`.\n\n   1. Relatedness inferred between samples using Hail's[`pc_relate`](https://hail.is/docs/0.2/methods/genetics.html?highlight=pc_relate#hail.methods.pc_relate). Identified pairs of 1st and 2nd degree relatives. Filter to a set of unrelated individuals using Hail's [`maximal_independent_set`](https://hail.is/docs/0.2/methods/misc.html?highlight=maximal_independent_set#hail.methods.maximal_independent_set) that tries to keep as many samples as possible. When multiple samples could be selected, we kept the sample with the highest coverage.\n   \n   1. PCA was a ran on high-quality variants, and RF was trained using 16 principal components as features on samples with known ancestry. Ancestry was assigned to all samples for which the probability of that ancestry was >75%.\n   \n   1. Hail [`sample_qc`](https://hail.is/docs/0.2/methods/genetics.html#hail.methods.sample_qc) was used stratified by 8 ancestry assignment PCs. Within each PC, outliers were filtered if they are 4 median absolute deviations (MADs) away from the median for the following metrics: `n_snp`, `r_ti_tv`, `r_insertion_deletion`, `n_insertion`, `n_deletion`, `r_het_hom_var`, `n_het`, `n_hom_var`, `n_transition`, `n_transversion`, or 8 MADs away from the median number of singletons (`n_singleton` metric).\n\n\n## Allele-specific variant quality score recalibration (AS-VQSR)\n\n   1. Export variants into a sites-only VCF and split it into SNPs and indels, as well as region-wise for parallel processing.\n   \n   1. Run Gnarly Genotyper to perform \"quick and dirty\" joint genotyping.\n   \n   1. Create SNP and indel recalibration models using the allele-specific version of GATK Variant Quality Score Recalibration [VQSR](https://gatkforums.broadinstitute.org/gatk/discussion/9622/allele-specific-annotation-and-filtering), using the standard GATK training resources (HapMap, Omni, 1000 Genomes, Mills indels), with the following features:\n   \n      * SNVs:   `AS_FS`, `AS_SOR`, `AS_ReadPosRankSum`, `AS_MQRankSum`, `AS_QD`, `AS_MQ`\n      * Indels: `AS_FS`, `AS_SOR`, `AS_ReadPosRankSum`, `AS_MQRankSum`, `AS_QD`\n      * No sample had a high quality genotype at this variant site (GQ>=20, DP>=10, and AB>=0.2 for heterozygotes) (all fields are populated by GATK)\n      * `InbreedingCoeff` < -0.3 (there was an excess of heterozygotes at the site compared to Hardy-Weinberg expectations) (`InbreedingCoeff` is populated by GATK)\n   \n   1. Apply the models to the VCFs and combine them back into one VCF.\n   \n   1. Import the VCF back to a matrix table.\n   \n   VQSR pipeline is a compilation from the following 2 WDL workflows:\n   \n   1. `hail-ukbb-200k-callset/GenotypeAndFilter.AS.wdl`\n   1. The [Broad VQSR workflow](https://github.com/broadinstitute/warp/blob/develop/pipelines/broad/dna_seq/germline/joint_genotyping/JointGenotyping.wdl) documented [here](https://gatk.broadinstitute.org/hc/en-us/articles/360035531112--How-to-Filter-variants-either-with-VQSR-or-by-hard-filtering), translated from WDL with a help of [Janis](https://github.com/PMCC-BioinformaticsCore/janis).\n\n\n## Random forest variant QC\n\n1. Gather information for the random forest model\n\n1. Impute missing entries\n   \n1. Select variants for training examples\n   \n1. Train random forests model\n   \n1. Test resulting model on chr20\n   \n1. Save training data with metadata describing random forest parameters used\n   \n1. Apply random forest model to the full variant set.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/populationgenomics/joint-calling",
    "keywords": "bioinformatics",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "larcoh",
    "package_url": "https://pypi.org/project/larcoh/",
    "platform": null,
    "project_url": "https://pypi.org/project/larcoh/",
    "project_urls": {
      "Homepage": "https://github.com/populationgenomics/joint-calling"
    },
    "release_url": "https://pypi.org/project/larcoh/0.1.5/",
    "requires_dist": [
      "cpg-utils (>=4.4.5)",
      "cpg-pipes",
      "analysis-runner",
      "sample-metadata",
      "hail (>=0.2.97)",
      "cpg-gnomad",
      "pandas",
      "click",
      "google-cloud-storage",
      "google-cloud-secret-manager",
      "coloredlogs"
    ],
    "requires_python": "",
    "summary": "Pipeline for joint calling, sample and variant QC for WGS germline variant calling data in large cohorts",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14770071,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cbb64c70ba3034be9610c1e636701e3e8db9aa8b74be4b11fedf96ec360de59d",
          "md5": "23998a01a8442a7445870742831469de",
          "sha256": "27826d557a7bd3f519aa2ea50731351c4dc9333c4f2c88aa49e2911737cfc1da"
        },
        "downloads": -1,
        "filename": "larcoh-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23998a01a8442a7445870742831469de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 83173,
        "upload_time": "2022-08-03T08:21:54",
        "upload_time_iso_8601": "2022-08-03T08:21:54.346847Z",
        "url": "https://files.pythonhosted.org/packages/cb/b6/4c70ba3034be9610c1e636701e3e8db9aa8b74be4b11fedf96ec360de59d/larcoh-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37829bbd3f218c73fe73949290451db712d5409d29584aef0d8f20415e5635a9",
          "md5": "cf119aa6628acc5502ff236cd4e44002",
          "sha256": "f76630183e3083f43113f63a28fd9c13b1b19e2ff5f520e7b79d707e058c7aa2"
        },
        "downloads": -1,
        "filename": "larcoh-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cf119aa6628acc5502ff236cd4e44002",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66290,
        "upload_time": "2022-08-03T08:21:56",
        "upload_time_iso_8601": "2022-08-03T08:21:56.321771Z",
        "url": "https://files.pythonhosted.org/packages/37/82/9bbd3f218c73fe73949290451db712d5409d29584aef0d8f20415e5635a9/larcoh-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db42bf458a2d3367c2d8aa7f5b0b0b7a528f9de8fecc02c5f48b544ebf1a8959",
          "md5": "1c4a54b51901f5aa3506fccaac9420cf",
          "sha256": "fd46e710b4f3a5a82eaa389284e8d84c2b80e027ae0c9a9c33d515d2d9a77de0"
        },
        "downloads": -1,
        "filename": "larcoh-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c4a54b51901f5aa3506fccaac9420cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 85951,
        "upload_time": "2022-08-03T10:21:47",
        "upload_time_iso_8601": "2022-08-03T10:21:47.025201Z",
        "url": "https://files.pythonhosted.org/packages/db/42/bf458a2d3367c2d8aa7f5b0b0b7a528f9de8fecc02c5f48b544ebf1a8959/larcoh-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5517ef4dc3ff7c8e5667860a464b5269ef54fc5c53adfcb4310019846479240",
          "md5": "392e293dc93a30188b3ccbb28ab8e5a9",
          "sha256": "30a8d8862d5af5047a74db930544570422b408a794a16ce42f9a2da230f995d0"
        },
        "downloads": -1,
        "filename": "larcoh-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "392e293dc93a30188b3ccbb28ab8e5a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 66624,
        "upload_time": "2022-08-03T10:21:48",
        "upload_time_iso_8601": "2022-08-03T10:21:48.811439Z",
        "url": "https://files.pythonhosted.org/packages/a5/51/7ef4dc3ff7c8e5667860a464b5269ef54fc5c53adfcb4310019846479240/larcoh-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb14dd7758d3122baeaa0f2a576091b7c2005982bfd96b54f01b0f2623968b7a",
          "md5": "e38ccbf5df3ab1956de2242ccfbdcb6d",
          "sha256": "19fc2ccfad1a6dcfdb5ca3829adbfa250314b8333fcdf403c48d5281468e62ac"
        },
        "downloads": -1,
        "filename": "larcoh-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e38ccbf5df3ab1956de2242ccfbdcb6d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 96485,
        "upload_time": "2022-08-05T02:04:52",
        "upload_time_iso_8601": "2022-08-05T02:04:52.543438Z",
        "url": "https://files.pythonhosted.org/packages/fb/14/dd7758d3122baeaa0f2a576091b7c2005982bfd96b54f01b0f2623968b7a/larcoh-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7efdc19307c49b28fd9eaafd647d1d57cb12662422e4a3f8f1d84b1be7021d35",
          "md5": "279907f8bf335126f171631f471de43b",
          "sha256": "a8e05de5fd0f9706f08f3695d1932b829ccf32cddda288a53641052de64b1238"
        },
        "downloads": -1,
        "filename": "larcoh-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "279907f8bf335126f171631f471de43b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 75934,
        "upload_time": "2022-08-05T02:04:54",
        "upload_time_iso_8601": "2022-08-05T02:04:54.472884Z",
        "url": "https://files.pythonhosted.org/packages/7e/fd/c19307c49b28fd9eaafd647d1d57cb12662422e4a3f8f1d84b1be7021d35/larcoh-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c175af1b4945e8cbca7f4416eaa2b74d8dbe8624908158a92319997c18439ba",
          "md5": "d3b99295b078939791bf0e6b821de8d9",
          "sha256": "08fc732b1e377a525eef059de4542c5313fc3e50b1584aa03ce5b0222b141f6c"
        },
        "downloads": -1,
        "filename": "larcoh-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3b99295b078939791bf0e6b821de8d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 88865,
        "upload_time": "2022-08-15T12:41:56",
        "upload_time_iso_8601": "2022-08-15T12:41:56.485698Z",
        "url": "https://files.pythonhosted.org/packages/4c/17/5af1b4945e8cbca7f4416eaa2b74d8dbe8624908158a92319997c18439ba/larcoh-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06b1958ab3451ca2d68e31cdef8f2073978918174ff5f44f3615ed410a1d5b9b",
          "md5": "7eb68a053c99e24d5f01c6591c6782a9",
          "sha256": "9712ec412dbcaffc17e30f5cac16edc3c300d8b859e203a76fc592e81d8c659a"
        },
        "downloads": -1,
        "filename": "larcoh-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7eb68a053c99e24d5f01c6591c6782a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62721,
        "upload_time": "2022-08-15T12:41:58",
        "upload_time_iso_8601": "2022-08-15T12:41:58.462132Z",
        "url": "https://files.pythonhosted.org/packages/06/b1/958ab3451ca2d68e31cdef8f2073978918174ff5f44f3615ed410a1d5b9b/larcoh-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1f50395844a836e5bc425f65ff81f16ca21e0eac40a1af5795df80439219ddb",
          "md5": "084721b7ae1f9a95b5f65881e2275880",
          "sha256": "aebdb01d9eb9978bffb0598dbafd9c2a28a77ddc2f31f54d5b6a7d5082bc8842"
        },
        "downloads": -1,
        "filename": "larcoh-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "084721b7ae1f9a95b5f65881e2275880",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 91869,
        "upload_time": "2022-08-16T00:00:45",
        "upload_time_iso_8601": "2022-08-16T00:00:45.331037Z",
        "url": "https://files.pythonhosted.org/packages/a1/f5/0395844a836e5bc425f65ff81f16ca21e0eac40a1af5795df80439219ddb/larcoh-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "766f8dc0b61a7d5ff2291d4e868ee560d4c2036134369c6c566b57ea7f65ad56",
          "md5": "83463b5eada04a6adb7a7985bf28f16f",
          "sha256": "be6928ff226180b8ec59c9cc1a2d913e76da26c98927c7ac0df1144de493a31a"
        },
        "downloads": -1,
        "filename": "larcoh-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "83463b5eada04a6adb7a7985bf28f16f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 62939,
        "upload_time": "2022-08-16T00:00:47",
        "upload_time_iso_8601": "2022-08-16T00:00:47.245286Z",
        "url": "https://files.pythonhosted.org/packages/76/6f/8dc0b61a7d5ff2291d4e868ee560d4c2036134369c6c566b57ea7f65ad56/larcoh-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a1f50395844a836e5bc425f65ff81f16ca21e0eac40a1af5795df80439219ddb",
        "md5": "084721b7ae1f9a95b5f65881e2275880",
        "sha256": "aebdb01d9eb9978bffb0598dbafd9c2a28a77ddc2f31f54d5b6a7d5082bc8842"
      },
      "downloads": -1,
      "filename": "larcoh-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "084721b7ae1f9a95b5f65881e2275880",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 91869,
      "upload_time": "2022-08-16T00:00:45",
      "upload_time_iso_8601": "2022-08-16T00:00:45.331037Z",
      "url": "https://files.pythonhosted.org/packages/a1/f5/0395844a836e5bc425f65ff81f16ca21e0eac40a1af5795df80439219ddb/larcoh-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "766f8dc0b61a7d5ff2291d4e868ee560d4c2036134369c6c566b57ea7f65ad56",
        "md5": "83463b5eada04a6adb7a7985bf28f16f",
        "sha256": "be6928ff226180b8ec59c9cc1a2d913e76da26c98927c7ac0df1144de493a31a"
      },
      "downloads": -1,
      "filename": "larcoh-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "83463b5eada04a6adb7a7985bf28f16f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 62939,
      "upload_time": "2022-08-16T00:00:47",
      "upload_time_iso_8601": "2022-08-16T00:00:47.245286Z",
      "url": "https://files.pythonhosted.org/packages/76/6f/8dc0b61a7d5ff2291d4e868ee560d4c2036134369c6c566b57ea7f65ad56/larcoh-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}