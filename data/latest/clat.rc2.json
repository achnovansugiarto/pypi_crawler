{
  "info": {
    "author": "CD Clark III",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# clat\n\nCommand Line Analysis Tools: A collection of tools for doing data analysis.\n\nThis project started out as a small collection of example scripts to learn about using Python for simple\ndata analysis at the command line and grew into a collection of utilities I have found useful.\n\n## Installation\n\nInstall this tool using `pip`:\n\n    $ pip install clat\n\n## Usage\n\n`clat` consists of several different commands, all named with the `clat-` prefix. For example, `clat-avg` computes the average of a set of numbers. It behaves like a standard UNIX filter program.\n\n```bash\nset 10 | clat-avg\n5.5\n```\n\nThere are scripts for computing the sum, standard deviation, generating histograms, plotting, and more. To see a list of available tools, just type `clat-` and then press `<TAB>` a couple of times. All commands\naccept the `--help` option.\n\n\n### Filters\n\n`clat` includes commands for computing the sum, average, standard deviation, root mean square, and uncertainty (standard error of the mean) for a stream of data. These commands read data from standard input and behave\nlike a normal UNIX filter (`grep`,`cut`,`sort`,etc). For example:\n\n<!---\ntag: filter-examples\nsnippet-compiler:\n  options:\n    compiler-command: bash {file}\n-->\n```bash\necho -e '1\\n2\\n3' | clat-sum\necho -e '1\\n2\\n3' | clat-avg\necho -e '1\\n2\\n3' | clat-stddev\necho -e '1\\n2\\n3' | clat-rms\necho -e '1\\n2\\n3' | clat-unc\n```\n<!---\ntag: filter-examples\n-->\n```bash\n6.0\n2.0\n1.0\n2.160246899469287\n0.5773502691896258\n```\n\n### Generators\n\nSometimes it is useful to be able to generate some data at the command line. For example, creating a test function to use with some other analysis tool or check that your plotting program is working. \nIn the past I have used `seq` with `gawk` to do this, but it gets clumsy. The `clat-func` command was created to make this easier. For example, to generate a Gaussian function from -1 to 1, you could do this\n<!---\ntag: func-example-1\nsnippet-compiler:\n  options:\n    compiler-command: bash {file}\n-->\n```bash\nclat-func --x-min -1 --x-max 1 --n 20 --y \"exp( -({x}/0.2)**2 ) \"\n```\n<!---\ntag: func-example-1\n-->\n```bash\n-1.0 1.3887943864964021e-11\n-0.8947368421052632 2.032802578425745e-09\n-0.7894736842105263 1.7098030687941603e-07\n-0.6842105263157895 8.26400593449372e-06\n-0.5789473684210527 0.00022952436120824522\n-0.4736842105263158 0.003663199685231906\n-0.368421052631579 0.033595881277480345\n-0.26315789473684215 0.17705374665950163\n-0.1578947368421053 0.5361889303292543\n-0.052631578947368474 0.9330914390145757\n0.05263157894736836 0.9330914390145759\n0.1578947368421053 0.5361889303292543\n0.26315789473684204 0.17705374665950185\n0.36842105263157876 0.033595881277480484\n0.4736842105263157 0.003663199685231916\n0.5789473684210527 0.00022952436120824522\n0.6842105263157894 8.264005934493735e-06\n0.7894736842105261 1.7098030687941723e-07\n0.894736842105263 2.0328025784257597e-09\n1.0 1.3887943864964021e-11\n```\nCAREFUL!! This script uses Pythons `eval(...)` function to evaluate the arguments passed to the various options so that you can use expressions. For example:\n<!---\ntag: func-example-2\nsnippet-compiler:\n  options:\n    compiler-command: bash {file}\n-->\n```bash\nclat-func --x-min 0 --x-max 2*pi --n 10 --y \"sin({x})\"\n```\n<!---\ntag: func-example-2\n-->\n```bash\n0.0 0.0\n0.6981317007977318 0.6427876096865393\n1.3962634015954636 0.984807753012208\n2.0943951023931953 0.8660254037844387\n2.792526803190927 0.34202014332566893\n3.490658503988659 -0.3420201433256687\n4.1887902047863905 -0.8660254037844383\n4.886921905584122 -0.9848077530122081\n5.585053606381854 -0.6427876096865395\n6.283185307179586 -2.4492935982947064e-16\n```\n\nThat means you should only run this with TRUSTED input. You have been warned...\n\n\n### Plotting\n\nThe `clat-plot` command can be used to quickly plot some data at the command line. It reads from standard input and uses Gnuplot to generate the graph.\n\n<!---\ntag: plot-example-1\nsnippet-compiler:\n  options:\n    compiler-command: bash {file}\n-->\n```bash\nclat-func --x-min 0 --x-max 2*pi --n 100 --y \"sin({x})\" | clat-plot -i\n```\nThis will open a plot window with this graph\n![](./doc/figures/example-plot.png)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CD3/clat",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "clat",
    "package_url": "https://pypi.org/project/clat/",
    "platform": "",
    "project_url": "https://pypi.org/project/clat/",
    "project_urls": {
      "CI": "https://github.com/CD3/clat/actions",
      "Changelog": "https://github.com/CD3/clat/releases",
      "Homepage": "https://github.com/CD3/clat",
      "Issues": "https://github.com/CD3/clat/issues"
    },
    "release_url": "https://pypi.org/project/clat/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Command Line Analysis Tools: A collection of tools for doing data analysis.",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12897298,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9451fa7f40968534cf4a62258d2f466d9722cd9316fce0cdc46b3f2d261eb2d",
          "md5": "85d83d55b0ee4b6825aa29f1db36fb25",
          "sha256": "f454232d9aa9b245fb8b9569cd77adeff43ba8399572868b96676aa0a85d292a"
        },
        "downloads": -1,
        "filename": "clat-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "85d83d55b0ee4b6825aa29f1db36fb25",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8356,
        "upload_time": "2022-02-07T13:07:24",
        "upload_time_iso_8601": "2022-02-07T13:07:24.039094Z",
        "url": "https://files.pythonhosted.org/packages/d9/45/1fa7f40968534cf4a62258d2f466d9722cd9316fce0cdc46b3f2d261eb2d/clat-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7dad9e9a4835bcde6a243bf7e39f5b5659ed0346c2af61d57e41ed900bcd4e5",
          "md5": "321a7cd84bd95448dcf7b1ac85bf486b",
          "sha256": "7b88c71058780d6d473fc04706ebbf7860a77e46db965d3168439ae5da710aec"
        },
        "downloads": -1,
        "filename": "clat-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "321a7cd84bd95448dcf7b1ac85bf486b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8596,
        "upload_time": "2022-02-15T13:24:36",
        "upload_time_iso_8601": "2022-02-15T13:24:36.759891Z",
        "url": "https://files.pythonhosted.org/packages/d7/da/d9e9a4835bcde6a243bf7e39f5b5659ed0346c2af61d57e41ed900bcd4e5/clat-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d7dad9e9a4835bcde6a243bf7e39f5b5659ed0346c2af61d57e41ed900bcd4e5",
        "md5": "321a7cd84bd95448dcf7b1ac85bf486b",
        "sha256": "7b88c71058780d6d473fc04706ebbf7860a77e46db965d3168439ae5da710aec"
      },
      "downloads": -1,
      "filename": "clat-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "321a7cd84bd95448dcf7b1ac85bf486b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8596,
      "upload_time": "2022-02-15T13:24:36",
      "upload_time_iso_8601": "2022-02-15T13:24:36.759891Z",
      "url": "https://files.pythonhosted.org/packages/d7/da/d9e9a4835bcde6a243bf7e39f5b5659ed0346c2af61d57e41ed900bcd4e5/clat-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}