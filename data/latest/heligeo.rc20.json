{
  "info": {
    "author": "Heliware",
    "author_email": "rajan@heliware.co.in",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Project Description\n\n## Quickstart\n\n### About HELIWARE\n\nHeliware is a Web-GL Powered Geo-Spatial Analytics Platform for developer ,analytics & data Scientist that provides GIS, Web Mapping, and spatial data science tools which help companies to get InSite in just few click using AI, Data Science & Advance Geo-Processing\n\n### Contact\n\nFor any query please contact [rajan@heliware.co.in](rajan@heliware.co.in)\n\n### Access Free Api-Key\n\nGet `free` `Api-key` by sign-up on Heliware [Visit Website](https://heliware.co.in/)\n\n## Description About heligeo module\n\nheligeo module provides you high level `Geoprocessing`,`Routing`,`Isochrone` and `Visualization` services.\n\n___\n## Routing and Isochrone\n* `routes`\n* `isochrone`\n___\n## Geoprocessing\n* `polygon_union`\n* `polygon_intersection`\n* `alias_multistring`\n* `point_buffer`\n* `line_buffer`\n* `point_within_polygon`\n* `crop_geometry_data`\n* `Polygon_Grid_Creation`\n* `Find_Polygon_Center_Point`\n* `Find_Polygon_linestring_inside_a_polygon_or_not`\n* `crop_polygon_from_linestring`\n* `distance_between_point`\n* `boundingbox_geojson_geometry`\n* `area_of_multipolygon`\n* `linear_nearest_neighour`\n* `point_within_polygon_based_on_polygon_properties`\n* `line_arc_from_point`\n* `nearest_point_along_line`\n___\n## File conversion\n* `shp_to_geojson`\n* `kml_to_geojson`\n* `geojson_to_kml`\n* `obj_to_geojson`\n* `geo_to_dxf`\n___\n## Visualization without filteration\n* `hex_map_from_geojson`\n* `hex_map_from_csv`\n* `scatter_map_from_geojson`\n* `scatter_map_from_csv`\n* `line_map_from_geojson`\n* `fill_geo_map_from_geojson`\n* `density_map_from_geojson`\n* `density_map_from_csv`\n\n## Visualization with filteration\n* `visualization_from_geojson`\n* `visualization_from_csv`\n___\n### Requirements\n`heligeo-py` is tested over `Python>=3.0`\n### Installation\n\nTo install from PyPI, simply use pip:  `pip install heligeo`\n\n### How to use\nMost of the cases heligeo module accept `Polygon`,`Point`,`Lisestring` data that format must be geojson.\n\n### Usage\n#### Basic Example Of Routing Service\nBy default heligeo support four type of transport mode\n* `drive`\n* `walk`\n* `bike`\n* `cycling`\n\n### Output format\nOutput always `Geojson response`\n\n### Isochrone Service\n![image](https://pbs.twimg.com/media/DC5VxnxUMAAyZ-_.jpg)\n\n```\n\nfrom heligeo import heliRouteService\napikey = ''\nlongtitude = [88.3639]\nlatitude = [22.5726]\ntransport_mode = \"drive\" \nisochrone_data = heliRouteService.isochrone(apikey,latitude,longtitude,transport_mode)\n\n```\n\n\n### Routing Service\n![image](https://www.propertyxpo.com/blog/wp-content/uploads/2019/09/Golf-Course-Extension-Road.jpg)\n\n```\napikey = ''\ntransport_mode = \"drive\" \ndirection_coordinates = [[88.3639,22.5726],[72.8777,19.0760]] ### user can use multiple points\nroute_data = heliRouteService.route(apikey,direction_coordinates,transport_mode)\n\n```\n### Basic Example Of Geoprocessing Service\n\n* `heliGeoprocessingService.Union()`,`heliGeoprocessingService.Intersection()` function accept multiple polygon data inside a list.\n* In this example we shown only 2 polygon data\n### Polygon Union Example\n```\nfrom heligeo import heliGeoprocessingService\napikey = ''\npolygon1 = {\"type\": \"FeatureCollection\",\"features\":[{\n  \"type\": \"Feature\",\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [[[77.4029103817493, 28.36918941103731, 0.0], [77.40184896262588, 28.3722403721131, 0.0][77.39922678901301, 28.37081966588294, 0.0], [77.40030856003351, 28.36816909494472, 0.0], [74029103817493, 28.36918941103731, 0.0]]]\n  }}]}\npolygon2 = {\"type\": \"FeatureCollection\",\"features\":[{\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[[77.40486731638147, 28.36831967535351, 0.0], [77.40416140548453, 28.37080235923333, 0], [77.40218550684746, 28.    3699755298779, 0.0], [77.40187364471585, 28.36769815943599, 0.0], [740486731638147, 28.36831967535351, 0.0]]]\n      }}]}\npolygon_list = [polygon1,polygon2]\nunion_data = heliGeoprocessingService.Union(apikey,polygon_list)\n\n\n```\n### Polygon Intersection Example\n\n```\nfrom heligeo import heliGeoprocessingService\napikey = ''\npolygon1 = {\"type\": \"FeatureCollection\",\"features\":[{\n  \"type\": \"Feature\",\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [[[77.4029103817493, 28.36918941103731, 0.0], [77.40184896262588, 28.3722403721131, 0.0][77.39922678901301, 28.37081966588294, 0.0], [77.40030856003351, 28.36816909494472, 0.0], [74029103817493, 28.36918941103731, 0.0]]]\n  }}]}\npolygon2 = {\"type\": \"FeatureCollection\",\"features\":[{\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[[77.40486731638147, 28.36831967535351, 0.0], [77.40416140548453, 28.37080235923333, 0], [77.40218550684746, 28.    3699755298779, 0.0], [77.40187364471585, 28.36769815943599, 0.0], [740486731638147, 28.36831967535351, 0.0]]]\n      }}]}\npolygon_list = [polygon1,polygon2]\nintersection_data = heliGeoprocessingService.Intersection(apikey,polygon_list)\n\n```\n\n### PointBuffer Example\n![image](https://github.com/NandanPattanayak/heligeo/blob/main/images/point-buffer.png?raw=true)\n* point_list accept multiple points data\n```\napikey = ''\npoint_list = [[88.3639,22.5726]] ### user can user multiple Point inside a list \narea = 100  ### how area user want to conver from this point by default its meter\npoint_buffer_polygon=heliGeoprocessingService.PointBuffer(apikey,point_list,area)\n\n\n```\n\n### CropPolygonusingLineString Example\n\n* pp accept one polygon geojson data.\n* ls accept only single LineString geojson data.\n```\napikey = ''\npp = {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[73.1191291041643,25.952161948461686],[73.1200261730937,25.95228141045213],[73.11998606278118,25.95249650900002],[73.1205147037379,25.952710699675958],[73.12058570338387,25.952860896463314],[73.12191931762833,25.953218219496392],[73.12201576873873,25.95292092059184],[73.12389940677676,25.953301946008786],[73.12434583885353,25.952337442082705],[73.12331303549425,25.952100144258512],[73.12258837500113,25.952099041426823],[73.12231284277169,25.952120347130396],[73.12199795253532,25.952887517224518],[73.12231350066179,25.95207889035184],[73.12043239077273,25.951540309982462],[73.11918985318253,25.951225622673974],[73.1191291041643,25.952161948461686]]]},\"properties\":{\"prop0\":\"value0\",\"prop1\":{\"this\":\"that\"}}}]\n \nls = {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[73.1200261730937,25.95228141045213],[73.12043239077273,25.951540309982462],[73.12043239077273,25.951540309982462]]},\"properties\":{\"prop0\":\"value0\",\"prop1\":{\"this\":\"that\"}}}]}\nlinestring_buffer_polygon=heliGeoprocessingService.crop_polygon_using_linestring(apikey,pp,ls)\n\n```\n\n### LineBuffer Example\n![image](https://github.com/NandanPattanayak/heligeo/blob/main/images/line-buffer.png?raw=true)\n* linestring_point_list accept multiple linestring.\n```\napikey = ''\nlinestring_point_list = [[[88.3639,22.5726],[88.4143,22.5797]],[[88.2636,22.5958],[88.4789,22.7248]]] ### usecan  user multiple Point inside a list \narea = 100  ### how area user want to conver from this point by default its meter\nlinestring_buffer_polygon=heliGeoprocessingService.LineBuffer(apikey,linestring_point_list,area)\n\n```\n### PointWithinPoly Example\n\n```\napikey = ''\npoint_geojson_object = {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":                {\"type\":\"Point\",\"coordinates\":[76.95513342,28.46301607]}}]}\npolygon_list = [polygon1,polygon2]\npoint_inside_poly = heliGeoprocessingService.PointWithinPoly(apikey,point_geojson_object,polygon_list)\n\n\n```\n\n### Polygon and Linestring WithinPoly Example\n\n```\napikey = ''\npp = {} #polygon geojson data\ncp = [{},{},{}] # list of multiple geometry data(Polygon,LineString)\nres=heliGeoprocessingService.check_polygon_ls_within_poly(apikey,pp,cp)\n\n\n```\n\n### LineBuffer Example\n![image](https://github.com/NandanPattanayak/heligeo/blob/main/images/line-buffer.png?raw=true)\n* linestring_point_list accept multiple linestring.\n```\napikey = ''\nlinestring_point_list = [[[88.3639,22.5726],[88.4143,22.5797]],[[88.2636,22.5958],[88.4789,22.7248]]] ### usecan  user multiple Point inside a list \narea = 100  ### how area user want to conver from this point by default its meter\nlinestring_buffer_polygon=heliGeoprocessingService.LineBuffer(apikey,linestring_point_list,area)\n\n```\n### AliasLinestring Example\n![image](https://github.com/NandanPattanayak/heligeo/blob/main/images/alias.png?raw=true)\n```\napikey = ''\nlinestring_geojson_object = {\"type\": \"FeatureCollection\",\"features\":[{\"type\": \"Feature\",\"geometry{\"type\":\"LineString\",\n    \"coordinates\": [\n      [88.3639,22.5726],[88.4143,22.5797]\n    ]}}]}\ngap = 100 #gap between multiple linestring(meter)\nquantity = 100 ## how many line string u need \nalias_linestring_data = heliGeoprocessingService.AliasLinestring(apikey,linestring_geojson_object,gap,quantity)\n\n```\n### CropGeometryData\n* `CropGeo` fuction accept a `Polygon GeoJson` data and `crop` other geometry data based on the `Polygon Size`.\n* `CropGeo` accept `bb={}` contain `Polygon Geojson` data in which size u want to crop other geometry and `gd={[]}` contain all the getometry data which u want to `crop` `gd` `list` contain `Polygon`,`Linestring` and `point` data. Data must be `GeoJson format`.\n* `CropGeo` supported only `Polygon`,`Linestring` and `point` data in `Geojson` format\n\n```\napikey = ''\nbb = {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[76.76781345955712,30.524042786522788],[76.76658493660516,30.521411933136562],[76.76638374787312,30.520437335225605],[76.76812128413364,30.519991051100444],[76.76935817172217,30.5235212331106],[76.76781345955712,30.524042786522788]]]},\"properties\":{\"PERIMETER\":\"1.166km\",\"ENCLOSED_AREA\":\"0.0727sqkm\"}}]}\n\ngd = [{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[76.76605941690902,30.521077391710715],[76.76854013805993,30.52031431912859],[76.76854013805993,30.52031431912859]]},\"properties\":{\"LENGTH\":\"252.68m\",\"BEARING\":\"1093333.9\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[76.76629027392768,30.521865657532633],[76.76849050129871,30.521044858531493],[76.768764809871,30.520962819202154],[76.768764809871,30.520962819202154]]},\"properties\":{\"LENGTH\":\"257.8m\",\"BEARING\":\"112514.9\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[76.76897591153649,30.52205540468611],[76.76691180534269,30.522839498623096],[76.76691197785424,30.522849031168167]]},\"properties\":{\"LENGTH\":\"217.4m\",\"BEARING\":\"2935656.9\"}},{\"type\":\"Feature\",\"geometry\":{\"type\":\"LineString\",\"coordinates\":[[76.76727709618594,30.523549659635112],[76.76936689485044,30.52278710560935],[76.76936689485044,30.52278710560935]]},\"properties\":{\"LENGTH\":\"217.66m\",\"BEARING\":\"1125115.1\"}}]}]\n\ncrop_data = heliGeoprocessingService.CropGeo(apikey,bb,gd)\n\n```\n\n### Polygon Grid Creation Example\n* `PolyGrid` function accept `three` parameter `apikey`, `polygon_geo_json_data` and  `grid-size`.\n* Based on the grid size `PolyGrid` function break down the `parent poly` into `small grids`.\n* `PolyGrid` accept only `polygon` geojson data.\n\n```\napikey = ''\n\npolygon_geo_json_data = {\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[76.9720448,28.4914468],[76.9734664,28.490094],[76.9745038,28.4891069],[76.9777595,28.4865896],[76.9832406,28.4847617],[76.9877826,28.4817885],[76.9994099,28.4931639],[76.9958932,28.49571],[76.9958867,28.4995722],[76.993081,28.5026631],[76.9897562,28.5047863],[76.9854207,28.5071706],[76.979788,28.501845],[76.9762078,28.4984432],[76.9720448,28.4914468]]]}}]}\n\ngridsize = 3 # in meter user change value as per user choice\npoly_grid_data = heliGeoprocessingService.PolyGrid(apikey,polygon_geo_json_data,gridsize)\n```\n### Find Polygon Center Point Example\n* `PolyCenter` accept `two` `parameter` `apikey` and `list_of_polygon_data=[polygeojson1,polygeojson1...n]`.\n\n* `PolyCenter` function accept only `multiple polygon data` in `geojson` format.\n\n* `list_of_polygon_data` its a list of multiple polygon data that must be geojson format\n```\napikey = ''\n\nlist_of_polygon_data = [{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[76.9720448,28.4914468],[76.9734664,28.490094],[76.9745038,28.4891069],[76.9777595,28.4865896],[76.9832406,28.4847617],[76.9877826,28.4817885],[76.9994099,28.4931639],[76.9958932,28.49571],[76.9958867,28.4995722],[76.993081,28.5026631],[76.9897562,28.5047863],[76.9854207,28.5071706],[76.979788,28.501845],[76.9762078,28.4984432],[76.9720448,28.4914468]]]}}]},{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[76.9720448,28.4914468],[76.9734664,28.490094],[76.9745038,28.4891069],[76.9777595,28.4865896],[76.9832406,28.4847617],[76.9877826,28.4817885],[76.9994099,28.4931639],[76.9958932,28.49571],[76.9958867,28.4995722],[76.993081,28.5026631],[76.9897562,28.5047863],[76.9854207,28.5071706],[76.979788,28.501845],[76.9762078,28.4984432],[76.9720448,28.4914468]]]}}]},{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[76.9720448,28.4914468],[76.9734664,28.490094],[76.9745038,28.4891069],[76.9777595,28.4865896],[76.9832406,28.4847617],[76.9877826,28.4817885],[76.9994099,28.4931639],[76.9958932,28.49571],[76.9958867,28.4995722],[76.993081,28.5026631],[76.9897562,28.5047863],[76.9854207,28.5071706],[76.979788,28.501845],[76.9762078,28.4984432],[76.9720448,28.4914468]]]}}]}]\n\npoly_center_point = heliGeoprocessingService.PolyCenter(apikey,list_of_polygon_data)\n\n```\n### Find distance between two Point Example\n* `distance_between_point` accept two parameters `apikey` and `list of two point`\n* `distance_between_point` support only `point` geometry\n```\napikey = ''\npoint1 = [23,45]\npoint2 = [24,46]\npoints = [point1,point2]\ndistance_btw = heliGeoprocessingService.distance_between_point(apikey,points)\n```\n\n### Find bounding box geojson geometry Example\n* `boundingbox_geojson` accept two parameters `apikey` and `geojson_data_of_geometry`\n* `boundingbox_geojson` support all type of geometry Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon.\n* Output will be bounding box `Polygon` data of geojson format\n```\napikey = ''\ngeo_data = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"MultiPolygon\",\n        \"coordinates\": [\n          [[[77.03171253204346, 28.45861799583438], [77.0447587966919, 28.458316159251893], [77.05158233642578, 28.451109554935286], [77.04231262207031, 28.444883558900028], [77.02840805053711, 28.450505838034935], [77.03171253204346, 28.45861799583438]]],[[[77.03707695007324, 28.455335476723302], [77.03630447387695, 28.452166051216853], [77.04136848449707, 28.45163780439558], [77.04145431518555, 28.455033630768483], [77.03707695007324, 28.455335476723302]]]\n        ]\n      },\n      \"properties\": {\n        \"service_provider\": \"HELIWARE\",\n        \"timestamp\": \"20\",\n        \"color\": \"black\",\n        \"stroke\": \"red\",\n        \"stroke-opacity\": 0.4,\n        \"stroke-width\": 5,\n        \"rev\":200000,\n        \"pop\":20\n      }\n    }\n  ]}\nbounding_box_data = heliGeoprocessingService.boundingbox_geojson(apikey,geo_data)\n```\n\n### Find area of multipolygons geometry Example\n* `area_multipolygon` accept two parameters `apikey` and `geojson_data_of_geometry`\n* `area_multipolygon` supported geometry Polygon, MultiPolygon.\n* output will be dictionary contain total area and unit of area, example: {\"Area\": poly_area,\"Unit\":\"Meter Square(Sq m)\"}\n```\napikey = ''\ngeo_data = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"MultiPolygon\",\n        \"coordinates\": [\n          [[[77.03171253204346, 28.45861799583438], [77.0447587966919, 28.458316159251893], [77.05158233642578, 28.451109554935286], [77.04231262207031, 28.444883558900028], [77.02840805053711, 28.450505838034935], [77.03171253204346, 28.45861799583438]]],[[[77.03707695007324, 28.455335476723302], [77.03630447387695, 28.452166051216853], [77.04136848449707, 28.45163780439558], [77.04145431518555, 28.455033630768483], [77.03707695007324, 28.455335476723302]]]\n        ]\n      },\n      \"properties\": {\n        \"service_provider\": \"HELIWARE\",\n        \"timestamp\": \"20\",\n        \"color\": \"black\",\n        \"stroke\": \"red\",\n        \"stroke-opacity\": 0.4,\n        \"stroke-width\": 5,\n        \"rev\":200000,\n        \"pop\":20\n      }\n    }\n  ]}\ngeo_area = heliGeoprocessingService.area_multipolygon(apikey,geo_data)\n```\n\n### Find linear nearest neighour point from given point Example\n* `linear_nearest_neighour` accept three parameters `apikey`, `point_data` and `mark_point`\n* `mark_point` is a point from which to find nearest point linearly from `point_data` \n* `point_data` in `linear_nearest_neighour` only support `point` geometry.\n* output will be geojson format data of nearest `point` geometry with distance property\n```\napikey = ''\npoint_data = {\"type\": \"FeatureCollection\",\n  \"features\": [{\"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            40.8193359375,\n            25.64152637306577]},\n     \"properties\": {\n        \"name\": 10\n      }},\n    {\"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            41.17968749994,\n            23.644524198573688]},\n     \"properties\": {\n        \"name\": 20\n      }},\n    {\"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n            44.4130859375,\n            25.760319754713887]},\n     \"properties\": {\n        \"name\": 30\n      }}]}\nmark_point = [42.6160,24.7518]\n\nnearest_point = heliGeoprocessingService.linear_nearest_neighour(apikey,point_data,mark_point)\n```\n\n### Find points withen Polygon based on Polygon properties Example\n* `point_within_polygon` accept three parameters `apikey`, `polygon_data` and `scale`\n* Input is geojson data of polygon or multipolygon and property `scale` to render points based on properties\n* `scale` is ['{property name}':{scale_value}], same property name should also in polygon property, where `scale_value` in `scale` and `polygon_data` must be integer.\n* output will be in geojson format data of all point geometry within a polygon/multipolygon with properties\n* `polygon_data` only support `Polygon` and `MultiPolygon` geometry.\n```\napikey = ''\npolygon_data = {\"type\": \"FeatureCollection\",\n  \"features\": [{\"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [[77.03968405723572,\n              28.448081502646776],\n            [77.03970551490784,\n              28.44760040224489],\n            [77.04024195671082,\n              28.447562668787487],\n            [77.04019904136658,\n              28.448090935966118],\n            [77.03968405723572,\n              28.448081502646776]\n          ]]},\n\t  \"properties\": {\n        \"service_provider\": \"HELIWARE\",\n        \"timestamp\": \"5\",\n        \"color\": \"black\",\n        \"stroke\": \"red\",\n        \"stroke-opacity\": 0.4,\n        \"stroke-width\": 5,\n        \"rev\":800000,\n        \"area\":12\n      }}]}\nscale = {\"area\":5}\npoints_poly = heliGeoprocessingService.point_within_polygon(apikey,polygon_data,scale)\n```\n* output has 2 point in polygon, polygon has area 12 and scale provide area 5, points define numbers of parts in polygon with area 5 \n\n### Create line arc from point Example\n* `line_arc_from_point` accept three parameters `apikey`, `point_data` and `measure`\n* `line_arc_from_point` return geometry data to Creates a circular arc of the given radius and center point between angle1 and angle2, angle work in positive clockwise.\n* Input is geojson data of point and measurements of radius, angle1, angle2 in one list\n* example of measurements will be measure=[{raduis},{angle1},{angle2}]\n* output will be in geojson format of all linestring geometry data for creating line arc\n* `point_data` only support `Point` geometry.\n```\napikey = ''\npoint_data = {\"type\": \"FeatureCollection\",\n  \"features\": [{\"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [[77.03968405723572,\n              28.448081502646776],\n            [77.03970551490784,\n              28.44760040224489],\n            [77.04024195671082,\n              28.447562668787487],\n            [77.04019904136658,\n              28.448090935966118],\n            [77.03968405723572,\n              28.448081502646776]\n          ]]},\n\t  \"properties\": {\n        \"service_provider\": \"HELIWARE\",\n        \"timestamp\": \"5\",\n        \"color\": \"black\",\n        \"stroke\": \"red\",\n        \"stroke-opacity\": 0.4,\n        \"stroke-width\": 5,\n        \"rev\":800000,\n        \"area\":12\n      }}]}\nmeasure = [0.1,10,20]\nline_arc = heliGeoprocessingService.line_arc_from_point(apikey,point_data,measure)\n```\n\n### Find nearest point along line Example\n* `nearest_point_along_line` accept three parameters `apikey`, `line_data` and `url`\n* `nearest_point_along_line` return point geometry data of points which is nearest to line and also along to line, where line belongs to `line_data`\n* `line_data` is geojson of `LineString` and url contain `Point` geometry data\n* output will be in geojson format of all `point` geometry data which is nearest and along to `LineString`\n```\napikey = ''\nline_data = {\"type\": \"FeatureCollection\",\n  \"features\": [{\"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [\n        [78.0029296875,\n            25.799891182088334],\n          [77.51953125,\n            19.269665296502332]]\n      }}]}\nurl = \"https://raw.githubusercontent.com/mukulsharma97/Heliware_Visualization/main/assets/point_along.geojson\"\nn_point = heliGeoprocessingService.nearest_point_along_line(apikey,line_data,url)\n```\n\n\n## Basic Example of File conversion Service\n\n### shp_to_geojson Example\n* `shp_file` input shpe file name with complete path\n* `geojson_file` output geojson file name with complete path\n```\nfrom heligeo import heliconverter\nshp_file = \".../heligeo_converter/lines.shp\"\ngeojson_file = \".../heligeo_converter/shptogeo.geojson\"\nheliconverter.shp_to_geojson(shp_file,geojson_file)\n```\n\n### kml_to_geojson Example\n* `kmlf` input kml file name with complete path\n* `geof` output geojson file path\n```\nkmlf = \".../heligeo_converter/kml.kml\"\ngeof = \".../heligeo_converter/kmltogeo\"\nheliconverter.kml_to_geojson(kmlf,geof)\n```\n\n### geojson_to_kml Example\n* `geof` input geojson file name with complete path\n* `kmlf` output kml file name with complete path\n```\nkmlf = \".../heligeo_converter/geotokml.kml\"\ngeof = \".../heligeo_converter/isochrone.geojson\"\nheliconverter.geojson_to_kml(geof,kmlf)\n```\n\n### obj_to_geojson Example\n* `obj` input object file name with complete path\n* `geof` output geojson file name with complete path\n```\nobj = \".../heligeo_converter/mesh.obj\"\ngeof = \".../heligeo_converter/objtogeo.geojson\"\nheliconverter.obj_to_geojson(obj,geof)\n```\n\n### geo_to_dxf Example\n* `geof` input geojson file name with complete path\n* `dwgf` output dxf file name without extension and with complete path\n```\ngeof = \".../heligeo_converter/multilinestring.geojson\"\ndwgf = \".../heligeo_converter/poly_line_point\"\nheliconverter.geo_to_dxf(geof,dwgf)\n```\n\n## Basic Example Of Visualization Service\n\n\n### Hexagon Map\n![image](https://github.com/NandanPattanayak/heligeo/blob/main/images/hexagon.png?raw=true)\n* User Can Select Different type of `BaseMap` Like `basic`, `streets`,`outdoors`, `light`, `dark`, `satellite`, or `satellite-streets`\n* User can Create `hex_map` from `.geojon` and `.csv` file\n* File Must be contain `geometry` data\n* `hex_map_from_geojson` funtion accepty `.geojson` file with other parameter and `hex_map_from_csv` accept `.csv` file with other parameter.\n* `hex_map_from_geojson` accept `apikey`,`file_path`,`hover_properties`,`basemap_style`,`hexagon_quantity`,`zoom_level`\n* `hex_map_from_csv` accept `apikey`,`file_path`,`column name from csv file that contain latitude value`,`column name from csv file that contain longtitude value`,`hover_properties`,`basemap_style`,`hexagon_quantity`,`zoom_level`\n* As of Now `heligeo` module able to visualize only `one propertie ` with their corrosponding `Lat`,`Long` value\n* `Base_map=''`\n* Use `res.show()` to visualize the data into web. \n* for `hex_map_from_geojson` user dont need to pass this two parameter  `column name that contain latitude value`,`column name that contain longtitude value` we create these two value as our own.\n#### Example \n```\nfrom heligeo import heliVisualizationService\napikey=''\nfile_path = '' \nlatitude_value_col_name = ''\nlongtitude_value_col_name = ''\nhover_properties = ''\nbase_map = ''\nhexagan_quantity = 20  \nzoom_level = 16\nh = heliVisualizationService.hex_map_from_csv(apikey,file_path,latitude_value_col_name,longtitude_value_col_name,hover_properties,base_map,hexagan_quantity,zoom_level)\nh.show()\n\nh = heliVisualizationService.hex_map_from_geojson(apikey,file_path,hover_properties,base_map,hexagan_quantity,zoom_level)\nh.show()\n\n```\n\n\n### Scatter Map\n![image](https://github.com/NandanPattanayak/heligeo/blob/main/images/scatter.png?raw=true)\n* User Can Select Different type of `BaseMap` Like `basic`, `streets`, `outdoors`, `light`, `dark`, `satellite`, or `satellite-streets`\n* User can Create `scatter_map` from `.geojson` and `.csv` file\n* File Must be contain `geometry` data\n* `scatter_map_from_geojson` funtion accept `.geojson` file with other parameter and `scatter_map_from_csv` accept `.csv` file with other parameter.\n* `scatter_map_from_geojson` accept `apikey`,`file_path`,`hover_properties`,`basemap_style`,`zoom_level`\n* `scatter_map_from_csv` accept `apikey`,`file_path`,`column name from csv file that contain latitude value`,`column name from csv file that contain longtitude value`,`hover_properties`,`basemap_style`,`zoom_level`\n* As of Now `heligeo` `Visualization` module able to visualize only `one propertie ` with their corrosponding `Lat`,`Long` value\n\n* Use `res.show()` to visualize the data into web. \n* for `scatter_map_from_geojson` user dont need to pass this two parameter  `column name that contain latitude value`,`column name that contain longtitude value` we create these two value as our own.\n\n#### Example \n```\nfrom heligeo import heliVisualizationService\napikey=''\nfile_path = '' \nlatitude_value_col_name = ''\nlongtitude_value_col_name = ''\nhover_properties = ''\nbase_map = ''  \nzoom_level = 16\nh = heliVisualizationService.scatter_map_from_csv(apikey,file_path,latitude_value_col_name,longtitude_value_col_name,hover_properties,base_map,zoom_level)\nh.show()\n\nh = heliVisualizationService.scatter_map_from_geojson(apikey,file_path,hover_properties,base_map,zoom_level)\nh.show()\n\n\n```\n\n\n\n\n\n### Density Map\n![image](https://github.com/NandanPattanayak/heligeo/blob/main/images/density.png?raw=true)\n* User Can Select Different type of `BaseMap` Like `basic`, `streets`, `outdoors`, `light`, `dark`, `satellite`, or `satellite-streets`\n* User can Create `density_map` from `.geojson` and `.csv` file\n* File Must be contain `geometry` data\n* `density_map_from_geojson` funtion accept `.geojson` file with other parameter and `density_map_from_csv` accept `.csv` file with other parameter.\n* `density_map_from_geojson` accept `apikey`,`file_path`,`hover_properties`,`basemap_style`,`zoom_level`\n* density_map_from_csv` accept `apikey`,`file_path`,`column name from csv file that contain latitude value`,`column name from csv file that contain longtitude value`,`hover_properties`,`basemap_style`,`zoom_level`\n* As of Now `heligeo` `Visualization` module able to visualize only `one propertie ` with their corrosponding `Lat`,`Long` value\n\n* Use `res.show()` to visualize the data into web. \n* for `density_map_from_geojson` user dont need to pass this two parameter  `column name that contain latitude value`,`column name that contain longtitude value` we create these two value as our own.\n\n#### Example \n```\nfrom heligeo import heliVisualizationService\napikey=''\nfile_path = '' \nlatitude_value_col_name = ''\nlongtitude_value_col_name = ''\nhover_properties = ''\nbase_map = ''  \nzoom_level = 16\nh = heliVisualizationService.density_map_from_csv(apikey,file_path,latitude_value_col_name,longtitude_value_col_name,hover_properties,base_map,zoom_level)\nh.show()\n\nh = heliVisualizationService.density_map_from_geojson(apikey,file_path,hover_properties,base_map,zoom_level)\nh.show()\n\n```\n\n\n### Line Map\n![image](https://github.com/NandanPattanayak/heligeo/blob/main/images/linemap.png?raw=true)\n* User Can Select Different type of `BaseMap` Like `basic`, `streets`, `outdoors`, `light`, `dark`, `satellite`, or `satellite-streets`\n* User can Create `line_map` from `.geojson`.\n* `line_map_from_geojson` funtion accept `.geojson` file with other parameter.\n* `density_map_from_geojson` accept `apikey`,`file_path`,`hover_properties`,`basemap_style`,`zoom_level`\n* As of Now `heligeo` `Visualization` module able to visualize only `one propertie ` with their corrosponding `Lat`,`Long` value\n* Use `res.show()` to visualize the data into web. \n\n#### Example \n```\nfrom heligeo import heliVisualizationService\napikey=''\nfile_path = '' \nhover_properties = ''\nbase_map = ''  \nzoom_level = 15\nh = heliVisualizationService.line_map_from_geojson(apikey,file_path,hover_properties,base_map,zoom_level)\nh.show()\n\n```\n\n### Fill Geometry With Color\n![image](https://github.com/NandanPattanayak/heligeo/blob/main/images/color.png?raw=true)\n* User Can Select Different type of `BaseMap` Like `open-street-map`, `carto-positron`, `carto-darkmatter`, `stamen-terrain`, `stamen-toner` or `stamen-watercolor`\n* User can fill a `Geometry` with different color and `Visualize` on map.\n* `fill_geo_map_from_geojson` funtion accept `.geojson` file with other parameter.\n* `fill_geo_map_from_geojson` accept `apikey`,`file_path`,`color`,`basemap_style`,`zoom_level`\n* As of Now `heligeo` `Visualization` module able to visualize only `one propertie ` with their corrosponding `Lat`,`Long` value\n* Use `res.show()` to visualize the data into web. \n\n#### Example \n```\nfrom heligeo import heliVisualizationService\napikey=''\nfile_path = '' \ncolor = ''\nbase_map = ''  \nzoom_level = 15\nh = heliVisualizationService.fill_geo_map_from_geojson(apikey,file_path,color,base_map,zoom_level)\nh.show()\n\n```\n## Visualization with filteration\n![image](https://github.com/mukulsharma97/Heliware_Visualization/blob/main/assets/front%20page.png?raw=true)\n* As of now our module accept `10 features`,`filteration` functionality\n* once you call the module its automatically create \nlocalserver localhost:8085\n* Paste the local host address on browser\n* Select a Map type\n\n### visualization from  geojson\n* User Can Select Different type of `BaseMap` Like `basic`, `streets`, `outdoors`, `light`, `dark`, `satellite`, or `satellite-streets`\n* User can filter the data in real time\n* `visualization_from_geojson` function accept `file_path`,`hover_properties`,`BaseMap(optional)`\n\n#### Example \n```\nfrom heligeo import heliVisualizationWithFilteration\nfile_path = '' ## local csv file path\nhover_properties = '' ## based on this property our module will create map\nheliVisualizationWithFilteration.visualization_from_geojson(file_path,hover_properties)\n\n```\n\n### visualization from csv\n* User Can Select Different type of `BaseMap` Like `basic`, `streets`, `outdoors`, `light`, `dark`, `satellite`, or `satellite-streets`\n* once you call the module its automatically create \nlocalserver localhost:8085\n* User can filter the data in real time\n* `visualization_from_geojson` function accept `file_path`,`lat_column_name`,`long_column_name`,`hover_properties`,`BaseMap(optional)`\n\n#### Example \n```\nfrom heligeo import heliVisualizationWithFilteration\nfile_path = '' ## local csv file path\nlat_column_name = ''\nlong_column_name = ''\nhover_properties = '' ## based on this property map will create\n\nheliVisualizationWithFilteration.visualization_from_csv(file_path,lat_column_name,long_column_name,hover_properties)\n\n```\n\n\n\n\n## License\nÃ‚Â© 2021 HELIWARE\n\nThis repository is licensed under the MIT license. See LICENSE for details.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "heligeo",
    "package_url": "https://pypi.org/project/heligeo/",
    "platform": null,
    "project_url": "https://pypi.org/project/heligeo/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/heligeo/1.1.8/",
    "requires_dist": [
      "numpy",
      "Shapely",
      "plotly",
      "requests",
      "dash",
      "pandas",
      "dash-bootstrap-components",
      "kml2geojson",
      "geo2kml",
      "ezdxf",
      "pyshp"
    ],
    "requires_python": "",
    "summary": "Python client for requests to heligeo API services",
    "version": "1.1.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17490234,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27e626cc869df8303f40b3f96d1e1a268ceadb62cedec73abf334e063c748c5a",
          "md5": "9cc623a41ce4c75f5549e6cf62c3fa51",
          "sha256": "1656b55d0882f19429eb4d0740d173d07d55396fb3760e627380015908384b69"
        },
        "downloads": -1,
        "filename": "heligeo-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9cc623a41ce4c75f5549e6cf62c3fa51",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4755,
        "upload_time": "2021-06-22T11:54:43",
        "upload_time_iso_8601": "2021-06-22T11:54:43.571712Z",
        "url": "https://files.pythonhosted.org/packages/27/e6/26cc869df8303f40b3f96d1e1a268ceadb62cedec73abf334e063c748c5a/heligeo-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4d83b24b270a5ed2c1bed4a85170a551ba0a95103d1d1d04225d94cf7ff8cad",
          "md5": "063853011c446ca959c48de6495aae1a",
          "sha256": "5de9f589750291082a4e522abc74453e65ca0bf191118c5232776e3e9489ccd1"
        },
        "downloads": -1,
        "filename": "heligeo-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "063853011c446ca959c48de6495aae1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4634,
        "upload_time": "2021-06-22T11:54:45",
        "upload_time_iso_8601": "2021-06-22T11:54:45.536822Z",
        "url": "https://files.pythonhosted.org/packages/f4/d8/3b24b270a5ed2c1bed4a85170a551ba0a95103d1d1d04225d94cf7ff8cad/heligeo-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "194e71871e39f14166fa20fedf5d2f84a71cf43cea6f6101e0ab72cd67b470e6",
          "md5": "bbc92fe31420be18cd0386479f6b71c3",
          "sha256": "0b58bd38083ae15a20794842bc8e294d9890a5709a30ba9abac59d2c9835c273"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bbc92fe31420be18cd0386479f6b71c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4951,
        "upload_time": "2021-06-24T04:11:22",
        "upload_time_iso_8601": "2021-06-24T04:11:22.306767Z",
        "url": "https://files.pythonhosted.org/packages/19/4e/71871e39f14166fa20fedf5d2f84a71cf43cea6f6101e0ab72cd67b470e6/heligeo-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f49e45fa0aac75c911e0f57e7b6e03e9f9f3fda7f81659c768a8134d2fad0e5",
          "md5": "382700279f9e38e98b02e50a0577c390",
          "sha256": "cea490ae378a9557565523eaff4c2d2c33bd697f547154aeac33e1c0326cb7e0"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "382700279f9e38e98b02e50a0577c390",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4885,
        "upload_time": "2021-06-24T04:11:24",
        "upload_time_iso_8601": "2021-06-24T04:11:24.257946Z",
        "url": "https://files.pythonhosted.org/packages/5f/49/e45fa0aac75c911e0f57e7b6e03e9f9f3fda7f81659c768a8134d2fad0e5/heligeo-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d90c0c07d4dd5baa826c61b6bb17b0aa7f8070276f553acf501966528bcb7f7d",
          "md5": "cebbbb88a26f3f102b90efeefba46142",
          "sha256": "6d2248d5a5687cabc50bfef610f854ce4f0e405ae0e4428e82c393877209a1b5"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cebbbb88a26f3f102b90efeefba46142",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4948,
        "upload_time": "2021-06-24T04:12:55",
        "upload_time_iso_8601": "2021-06-24T04:12:55.734599Z",
        "url": "https://files.pythonhosted.org/packages/d9/0c/0c07d4dd5baa826c61b6bb17b0aa7f8070276f553acf501966528bcb7f7d/heligeo-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec099154f563786617f1c3390fbc62118952f68ae51dd81f75626101bd51b5fc",
          "md5": "270c985c67bc98f57db7078f33b4d682",
          "sha256": "a872fe05e41531d8773f7f11f12056ae0cbb0c0c96f5eaf6cab1b8f49978f31b"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "270c985c67bc98f57db7078f33b4d682",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4871,
        "upload_time": "2021-06-24T04:12:57",
        "upload_time_iso_8601": "2021-06-24T04:12:57.374358Z",
        "url": "https://files.pythonhosted.org/packages/ec/09/9154f563786617f1c3390fbc62118952f68ae51dd81f75626101bd51b5fc/heligeo-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f003b818a1f1420b1f4f66149b437380341aced2a191bdcaba79a07fb944736",
          "md5": "ff5709394ec3c9c8d12dcfa9873bce61",
          "sha256": "767020ecefffd74dd54add49e1dd3d5ee6e5cb87b5554033ca47aad5c8a48ce7"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff5709394ec3c9c8d12dcfa9873bce61",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4948,
        "upload_time": "2021-06-24T04:15:50",
        "upload_time_iso_8601": "2021-06-24T04:15:50.773316Z",
        "url": "https://files.pythonhosted.org/packages/5f/00/3b818a1f1420b1f4f66149b437380341aced2a191bdcaba79a07fb944736/heligeo-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "324591e1796b76e4a9180f0a8166ad44ef788f9816fe763e8516584eaa91cfbc",
          "md5": "8a34e6eed817778333c79f34a8d7df15",
          "sha256": "f406823c61fd0d06cf8f17408cb3cd897b7a9d6a486a0215561670a6d7e3c11e"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8a34e6eed817778333c79f34a8d7df15",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4883,
        "upload_time": "2021-06-24T04:15:52",
        "upload_time_iso_8601": "2021-06-24T04:15:52.742242Z",
        "url": "https://files.pythonhosted.org/packages/32/45/91e1796b76e4a9180f0a8166ad44ef788f9816fe763e8516584eaa91cfbc/heligeo-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6440dc9081c4487c89d68c3b93cae9253f246b43a53eccf6bc5ea065175e2324",
          "md5": "0454f676e1af03412475059f96cb5092",
          "sha256": "5096efef67860aa58b40115487108fbe2b3f40ba00e85b471d52a8876e109bd6"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0454f676e1af03412475059f96cb5092",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5665,
        "upload_time": "2021-07-08T08:13:39",
        "upload_time_iso_8601": "2021-07-08T08:13:39.301678Z",
        "url": "https://files.pythonhosted.org/packages/64/40/dc9081c4487c89d68c3b93cae9253f246b43a53eccf6bc5ea065175e2324/heligeo-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57fe8fe039c36e9a6be8593e107208204c2ff67a1485fe777eaff29af22f27ca",
          "md5": "3fc65059b26c2cedbfd27b26a65a3790",
          "sha256": "61ed1220ad240cce2358e0fc7ced0f226f66eccdf65ec3e38e630a5134200814"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3fc65059b26c2cedbfd27b26a65a3790",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5645,
        "upload_time": "2021-07-08T08:13:41",
        "upload_time_iso_8601": "2021-07-08T08:13:41.141670Z",
        "url": "https://files.pythonhosted.org/packages/57/fe/8fe039c36e9a6be8593e107208204c2ff67a1485fe777eaff29af22f27ca/heligeo-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c2e2923de12e70dc95a6c05bcd7ed03c2d294cf546da02838eb5269c0647a0a",
          "md5": "0a1cd5e5b574c61efc8f1581c831fd2e",
          "sha256": "25091a8a502736a547f4a58a5389ccd6749056e13f853288bdc55d0549dfd923"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a1cd5e5b574c61efc8f1581c831fd2e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6215,
        "upload_time": "2021-07-26T08:05:44",
        "upload_time_iso_8601": "2021-07-26T08:05:44.767770Z",
        "url": "https://files.pythonhosted.org/packages/3c/2e/2923de12e70dc95a6c05bcd7ed03c2d294cf546da02838eb5269c0647a0a/heligeo-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f44cc17645d1f334f68ccac5535e7d9e3967d457419d3ec71628b77d81f372a8",
          "md5": "5aa46d5bdee2cec7e97b3be1d0f6f0dc",
          "sha256": "b468de262275c4b41755112549e69f1db749edd8b8320e01b34e2a8670d748e4"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5aa46d5bdee2cec7e97b3be1d0f6f0dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7111,
        "upload_time": "2021-07-26T08:05:47",
        "upload_time_iso_8601": "2021-07-26T08:05:47.199987Z",
        "url": "https://files.pythonhosted.org/packages/f4/4c/c17645d1f334f68ccac5535e7d9e3967d457419d3ec71628b77d81f372a8/heligeo-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37bfba8f616fdc8bbfb3da712654c843dc3a5400f739a6a1de19843b612c9202",
          "md5": "ff8931464e5da1669b08f95875870708",
          "sha256": "b0f9da396eb06527c5538418121c758934fdf5399d99b5e8db80115b997499c1"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff8931464e5da1669b08f95875870708",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8391,
        "upload_time": "2021-08-30T12:32:20",
        "upload_time_iso_8601": "2021-08-30T12:32:20.985612Z",
        "url": "https://files.pythonhosted.org/packages/37/bf/ba8f616fdc8bbfb3da712654c843dc3a5400f739a6a1de19843b612c9202/heligeo-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "064321e1e15d0ec5f30ccec31409a40114efd5bad07945a7d3f3af318c0fae37",
          "md5": "306926eeaa6e688054cf7ca9bc3e1925",
          "sha256": "4039d22cb0e4d924b99839c809fe5aae6d0977ca314804228f1e10a16a8b590a"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "306926eeaa6e688054cf7ca9bc3e1925",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12567,
        "upload_time": "2021-08-30T12:32:23",
        "upload_time_iso_8601": "2021-08-30T12:32:23.206443Z",
        "url": "https://files.pythonhosted.org/packages/06/43/21e1e15d0ec5f30ccec31409a40114efd5bad07945a7d3f3af318c0fae37/heligeo-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "614959d036330c213fe70fc3ff9a0f1e8a64f3cb24f0f2917a936bfb0091d1f8",
          "md5": "e5b95986234430e54e3b7eb8198f0d4d",
          "sha256": "a55c3c56e000a664e500226fed7bd88ca4b0f93b0aba1c52972fb96bbf337ce5"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e5b95986234430e54e3b7eb8198f0d4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8633,
        "upload_time": "2021-08-31T07:01:19",
        "upload_time_iso_8601": "2021-08-31T07:01:19.119927Z",
        "url": "https://files.pythonhosted.org/packages/61/49/59d036330c213fe70fc3ff9a0f1e8a64f3cb24f0f2917a936bfb0091d1f8/heligeo-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adff2529743fc294e53021d77ae116d5f9a70d3b114eb0ab74afb78f92c911b8",
          "md5": "e8ad3ab7756378285e8b45133436aab2",
          "sha256": "04b0f22f52db2aedfd24a7b694d4f4585e17b9a0144a66199f459f3615b5e757"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e8ad3ab7756378285e8b45133436aab2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13063,
        "upload_time": "2021-08-31T07:01:21",
        "upload_time_iso_8601": "2021-08-31T07:01:21.249871Z",
        "url": "https://files.pythonhosted.org/packages/ad/ff/2529743fc294e53021d77ae116d5f9a70d3b114eb0ab74afb78f92c911b8/heligeo-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df8fd67daca82d762416ce438720c7d69cdf89981bc995ef68d667b6b4eb3007",
          "md5": "112862fadad3928310881d57920838d9",
          "sha256": "6d886569cbe583b483c9f25a745f024d04a119cb4a582a6a872c1f0f692076c3"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "112862fadad3928310881d57920838d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8628,
        "upload_time": "2021-08-31T08:30:58",
        "upload_time_iso_8601": "2021-08-31T08:30:58.270782Z",
        "url": "https://files.pythonhosted.org/packages/df/8f/d67daca82d762416ce438720c7d69cdf89981bc995ef68d667b6b4eb3007/heligeo-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "144059a36a3ab8060d1396442f5df3e8065db41984350cff95abc7b766cac62a",
          "md5": "3b3f3341fe31942bf65c08bdbb6a799e",
          "sha256": "5fe8d9c70d3382260d03b5f9a50a1608f62d1bc22594d1fa975bf5f965f34eec"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "3b3f3341fe31942bf65c08bdbb6a799e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13062,
        "upload_time": "2021-08-31T08:30:59",
        "upload_time_iso_8601": "2021-08-31T08:30:59.623190Z",
        "url": "https://files.pythonhosted.org/packages/14/40/59a36a3ab8060d1396442f5df3e8065db41984350cff95abc7b766cac62a/heligeo-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afd92f95da144816eb91915b20c1b4aba8db244d139de50d392751415e0600b5",
          "md5": "fab9e1672524347dcff6feb02779ab03",
          "sha256": "78292d4b38761eaee2b6215ca2e2e96d309ec06fdc702c9c05aa2e777246af7e"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fab9e1672524347dcff6feb02779ab03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13902,
        "upload_time": "2021-09-11T12:10:16",
        "upload_time_iso_8601": "2021-09-11T12:10:16.557325Z",
        "url": "https://files.pythonhosted.org/packages/af/d9/2f95da144816eb91915b20c1b4aba8db244d139de50d392751415e0600b5/heligeo-1.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "707569273073fbf53f7a655407fb12ea674e68183000fe996963d36fc09dd1a2",
          "md5": "a7fd907bf082e61a82d378a597eef424",
          "sha256": "f69866a2010fb28a3b1a9c3b398c194a0031206745124c441ee54c4c388b0834"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a7fd907bf082e61a82d378a597eef424",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19059,
        "upload_time": "2021-09-11T12:10:19",
        "upload_time_iso_8601": "2021-09-11T12:10:19.537723Z",
        "url": "https://files.pythonhosted.org/packages/70/75/69273073fbf53f7a655407fb12ea674e68183000fe996963d36fc09dd1a2/heligeo-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "591d4800ed4565fbfd153d64c0486288f8e17eae325cf33c52d5beb18f06f01f",
          "md5": "c8e634d0816f7f84f48bc6b3451d5a63",
          "sha256": "894f186472f1ec39f0bf97183d12612a8d1094eb99b5d0ab91fcd20f896b42cb"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8e634d0816f7f84f48bc6b3451d5a63",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13864,
        "upload_time": "2021-09-11T12:20:08",
        "upload_time_iso_8601": "2021-09-11T12:20:08.667003Z",
        "url": "https://files.pythonhosted.org/packages/59/1d/4800ed4565fbfd153d64c0486288f8e17eae325cf33c52d5beb18f06f01f/heligeo-1.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5921e27917f3e8b6ed8aec8ef8579239958d108d8f0d477f581c40c89fcbd7f",
          "md5": "ae987632a213226a185fa61bc0acf196",
          "sha256": "49a8785dbd68972d9465507211bf743d86c9bc0a103960b7eef67b62461403a4"
        },
        "downloads": -1,
        "filename": "heligeo-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "ae987632a213226a185fa61bc0acf196",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 19037,
        "upload_time": "2021-09-11T12:20:11",
        "upload_time_iso_8601": "2021-09-11T12:20:11.654782Z",
        "url": "https://files.pythonhosted.org/packages/b5/92/1e27917f3e8b6ed8aec8ef8579239958d108d8f0d477f581c40c89fcbd7f/heligeo-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96d4a2688882da6af81a7c5525160d35069f67b61492407687167ff4124cc103",
          "md5": "485906d6e446e1979b7e6ddba6e54eb1",
          "sha256": "dad359477104772aaeb86b9aa7d0608f98b2225b9dab876e987a16044b748bce"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "485906d6e446e1979b7e6ddba6e54eb1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15009,
        "upload_time": "2021-09-20T10:16:25",
        "upload_time_iso_8601": "2021-09-20T10:16:25.675459Z",
        "url": "https://files.pythonhosted.org/packages/96/d4/a2688882da6af81a7c5525160d35069f67b61492407687167ff4124cc103/heligeo-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb6ed14909d7f61d1106bbf19f55c69d55fcd7a4c0a1552b778c29f744582766",
          "md5": "1e56aa754570647cba9592f11ab9dbb8",
          "sha256": "5c88a1a959be225e3fb6bc2060fabb32e14b3d2f9293045881f58a744f35434a"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1e56aa754570647cba9592f11ab9dbb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20144,
        "upload_time": "2021-09-20T10:16:27",
        "upload_time_iso_8601": "2021-09-20T10:16:27.595387Z",
        "url": "https://files.pythonhosted.org/packages/fb/6e/d14909d7f61d1106bbf19f55c69d55fcd7a4c0a1552b778c29f744582766/heligeo-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ab8e8e66af403e8fdb59cd7486a1bf4067b66b8f30229305a09c6340ca3ebe3",
          "md5": "64c5a9b180717f5ac38b49ecfa27c0c2",
          "sha256": "ccb8e57dd4c855aad504a6ff637f9671dadb97a0686f3215c04765a41fd5fba5"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64c5a9b180717f5ac38b49ecfa27c0c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17631,
        "upload_time": "2021-09-24T07:19:29",
        "upload_time_iso_8601": "2021-09-24T07:19:29.469039Z",
        "url": "https://files.pythonhosted.org/packages/5a/b8/e8e66af403e8fdb59cd7486a1bf4067b66b8f30229305a09c6340ca3ebe3/heligeo-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a856ea6ecf64ba7aee264e92ace9bbf4b4f101886d428d952984ceb637da2a2b",
          "md5": "13788f838ac776cacf7fb704fb9304ac",
          "sha256": "308e9d31a8a385dc165bbe9926674866e99892c6bd645412ba193c04123416fe"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "13788f838ac776cacf7fb704fb9304ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22813,
        "upload_time": "2021-09-24T07:19:32",
        "upload_time_iso_8601": "2021-09-24T07:19:32.503283Z",
        "url": "https://files.pythonhosted.org/packages/a8/56/ea6ecf64ba7aee264e92ace9bbf4b4f101886d428d952984ceb637da2a2b/heligeo-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65cb65cf8ca950f4423d1e3890dea537fc188d61b3609d820e4c710244ee32eb",
          "md5": "4f0ba794c2a35ea9156517953dbc4011",
          "sha256": "98a8c038c4a7354b1e07bc637240caa3dd3744da84ed656b575afc2a23080810"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f0ba794c2a35ea9156517953dbc4011",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18085,
        "upload_time": "2021-09-28T07:47:09",
        "upload_time_iso_8601": "2021-09-28T07:47:09.530106Z",
        "url": "https://files.pythonhosted.org/packages/65/cb/65cf8ca950f4423d1e3890dea537fc188d61b3609d820e4c710244ee32eb/heligeo-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50f682a8418f26d3546e2787f6194f54446756e202da90d2bbfe0a9c19e901e7",
          "md5": "9944b0876c660ca197ee26db59b6881d",
          "sha256": "fce8eac184507927fc39c3a87250da81b9937e420f90d16a8c0d65a51ff4133a"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9944b0876c660ca197ee26db59b6881d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23727,
        "upload_time": "2021-09-28T07:47:12",
        "upload_time_iso_8601": "2021-09-28T07:47:12.238782Z",
        "url": "https://files.pythonhosted.org/packages/50/f6/82a8418f26d3546e2787f6194f54446756e202da90d2bbfe0a9c19e901e7/heligeo-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c84d6028d0993a44eb5ac16241fc6807a44f7624e18ae9aac6e1fa72d287345",
          "md5": "6e01865e28cf85ba2ce58e53072fb9e5",
          "sha256": "99646b7ef79bb268b5e9c9a3c63053a20046b20cbdcb8b705c8767593eea8170"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e01865e28cf85ba2ce58e53072fb9e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21788,
        "upload_time": "2021-11-23T11:52:19",
        "upload_time_iso_8601": "2021-11-23T11:52:19.033130Z",
        "url": "https://files.pythonhosted.org/packages/8c/84/d6028d0993a44eb5ac16241fc6807a44f7624e18ae9aac6e1fa72d287345/heligeo-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc726b6f1b4832752c6e8c4c9653d80bef6d2f666828523987d6baa7bdd9b71c",
          "md5": "94fefe634b7d976f1ed9e4afa01c33b3",
          "sha256": "3fa4b5f8038fe569cc92440acf22fe6b813ab21eaa6736a5e0d1b2d94fe583fa"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "94fefe634b7d976f1ed9e4afa01c33b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35114,
        "upload_time": "2021-11-23T11:52:21",
        "upload_time_iso_8601": "2021-11-23T11:52:21.701506Z",
        "url": "https://files.pythonhosted.org/packages/bc/72/6b6f1b4832752c6e8c4c9653d80bef6d2f666828523987d6baa7bdd9b71c/heligeo-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a8f547150cc58efd35b22a06d5146d5758191e9b08463cc361ddc6c8bd566b7",
          "md5": "ec5f1bf642d1735ce3ab877d1a9b430d",
          "sha256": "7bd1c29f755f436afd12af5e85ceb1ce918b85d5619feb71b9410788838cbede"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec5f1bf642d1735ce3ab877d1a9b430d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21614,
        "upload_time": "2021-11-23T12:28:59",
        "upload_time_iso_8601": "2021-11-23T12:28:59.386012Z",
        "url": "https://files.pythonhosted.org/packages/4a/8f/547150cc58efd35b22a06d5146d5758191e9b08463cc361ddc6c8bd566b7/heligeo-1.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fefd50047ff0880a6b0e6b4491abebec8d67722e55212283471c1e679cdfe669",
          "md5": "ef864591c8b4abbddccfc3243e3e7643",
          "sha256": "e8c251ed8178a4e9368dab1909f55302e5299a60389391de31385be0d2a9009b"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ef864591c8b4abbddccfc3243e3e7643",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34817,
        "upload_time": "2021-11-23T12:29:02",
        "upload_time_iso_8601": "2021-11-23T12:29:02.133720Z",
        "url": "https://files.pythonhosted.org/packages/fe/fd/50047ff0880a6b0e6b4491abebec8d67722e55212283471c1e679cdfe669/heligeo-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfae1e25b9e9ab08ad39fc8f453b188a02b2831cf04b4ab875b75907b3203c0a",
          "md5": "f0d31c9e2917d3c39db3aa4d5f3b0a4e",
          "sha256": "4c2970160742fa2e900cb85185667e231b9e49a48b89ecb6a96c4d2085a2550e"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f0d31c9e2917d3c39db3aa4d5f3b0a4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21613,
        "upload_time": "2022-02-21T15:36:22",
        "upload_time_iso_8601": "2022-02-21T15:36:22.094534Z",
        "url": "https://files.pythonhosted.org/packages/bf/ae/1e25b9e9ab08ad39fc8f453b188a02b2831cf04b4ab875b75907b3203c0a/heligeo-1.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4186498db876087dd7d6f429ef5bd7fae4fe7a90d4bf7bfc89f15f952fea5dba",
          "md5": "47f0bee01622f9fb57117bf1da3f3375",
          "sha256": "57eda81a24f027b7cc8aeb1eb8de0702a9c08ff02881dfa691f8e5fc676a2a4a"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "47f0bee01622f9fb57117bf1da3f3375",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35522,
        "upload_time": "2022-02-21T15:36:24",
        "upload_time_iso_8601": "2022-02-21T15:36:24.106092Z",
        "url": "https://files.pythonhosted.org/packages/41/86/498db876087dd7d6f429ef5bd7fae4fe7a90d4bf7bfc89f15f952fea5dba/heligeo-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4dc76cf88f50794a706aab404523223ca334f5a18f90a12093c975b117bf1f72",
          "md5": "0fef2d024130a9000263df8408ad3345",
          "sha256": "d5c5a5859f4c7f22e6748c6e2130ef542a47f5b8d7fbcb634f43bac52e667542"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0fef2d024130a9000263df8408ad3345",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21628,
        "upload_time": "2022-02-21T15:46:27",
        "upload_time_iso_8601": "2022-02-21T15:46:27.094922Z",
        "url": "https://files.pythonhosted.org/packages/4d/c7/6cf88f50794a706aab404523223ca334f5a18f90a12093c975b117bf1f72/heligeo-1.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76b484ebeee432e7c7317d2cb657a8016948c1617046bd0d0d01badbae183832",
          "md5": "919c6793d2684dd89821429698253b39",
          "sha256": "81696d565604177a288a3adbbaa60498f94dd6bd1f0a37480bb794d3e27eee9a"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "919c6793d2684dd89821429698253b39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35547,
        "upload_time": "2022-02-21T15:46:30",
        "upload_time_iso_8601": "2022-02-21T15:46:30.577053Z",
        "url": "https://files.pythonhosted.org/packages/76/b4/84ebeee432e7c7317d2cb657a8016948c1617046bd0d0d01badbae183832/heligeo-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7dcc09ec9259bb0eb03d18d0aee4b6fe087cea80f61824acdb1f15a602fda65e",
          "md5": "dca1a222efeca635b980e73cc723c3c3",
          "sha256": "4566958c32bf224b9da87ed067e04f4bd20a56a7534d2f997157a0fd57b9d114"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dca1a222efeca635b980e73cc723c3c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21629,
        "upload_time": "2022-02-21T15:51:36",
        "upload_time_iso_8601": "2022-02-21T15:51:36.218862Z",
        "url": "https://files.pythonhosted.org/packages/7d/cc/09ec9259bb0eb03d18d0aee4b6fe087cea80f61824acdb1f15a602fda65e/heligeo-1.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95f10226518eec2ced9aebd583ac8880bb2014a69fb319834cd666e8857473f5",
          "md5": "f126e8e2f728cf167abc59353f196bca",
          "sha256": "4390d0da62bd54036111c463d6b670f9a25456d0fd558dc97254b5a1d141acb0"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f126e8e2f728cf167abc59353f196bca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35556,
        "upload_time": "2022-02-21T15:52:01",
        "upload_time_iso_8601": "2022-02-21T15:52:01.871506Z",
        "url": "https://files.pythonhosted.org/packages/95/f1/0226518eec2ced9aebd583ac8880bb2014a69fb319834cd666e8857473f5/heligeo-1.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02dc15e1e9b5aa6980a4f5c43f126ce9d594f1087de23cef0d5f895a18a233fb",
          "md5": "95a900c2b5ac8daa79a89dd682aa3aa3",
          "sha256": "2c9ecd723ba4cb108f104294788024451ae4cd57186f444e71c478e522639266"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "95a900c2b5ac8daa79a89dd682aa3aa3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21653,
        "upload_time": "2023-03-29T07:41:56",
        "upload_time_iso_8601": "2023-03-29T07:41:56.902048Z",
        "url": "https://files.pythonhosted.org/packages/02/dc/15e1e9b5aa6980a4f5c43f126ce9d594f1087de23cef0d5f895a18a233fb/heligeo-1.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f54ba8611e3ed9b61e1aa0926af02cb5d2ef7ea66ac826913b2aa02fb3a1af1c",
          "md5": "7cd62c5cb888ead7bfb812fb9efcd9dc",
          "sha256": "a65eb90310891e67f7821210f36e12bc0522bdb34ad5569a4c6ad9eeea7f7778"
        },
        "downloads": -1,
        "filename": "heligeo-1.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "7cd62c5cb888ead7bfb812fb9efcd9dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34845,
        "upload_time": "2023-03-29T07:41:58",
        "upload_time_iso_8601": "2023-03-29T07:41:58.696785Z",
        "url": "https://files.pythonhosted.org/packages/f5/4b/a8611e3ed9b61e1aa0926af02cb5d2ef7ea66ac826913b2aa02fb3a1af1c/heligeo-1.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "02dc15e1e9b5aa6980a4f5c43f126ce9d594f1087de23cef0d5f895a18a233fb",
        "md5": "95a900c2b5ac8daa79a89dd682aa3aa3",
        "sha256": "2c9ecd723ba4cb108f104294788024451ae4cd57186f444e71c478e522639266"
      },
      "downloads": -1,
      "filename": "heligeo-1.1.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "95a900c2b5ac8daa79a89dd682aa3aa3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21653,
      "upload_time": "2023-03-29T07:41:56",
      "upload_time_iso_8601": "2023-03-29T07:41:56.902048Z",
      "url": "https://files.pythonhosted.org/packages/02/dc/15e1e9b5aa6980a4f5c43f126ce9d594f1087de23cef0d5f895a18a233fb/heligeo-1.1.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f54ba8611e3ed9b61e1aa0926af02cb5d2ef7ea66ac826913b2aa02fb3a1af1c",
        "md5": "7cd62c5cb888ead7bfb812fb9efcd9dc",
        "sha256": "a65eb90310891e67f7821210f36e12bc0522bdb34ad5569a4c6ad9eeea7f7778"
      },
      "downloads": -1,
      "filename": "heligeo-1.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "7cd62c5cb888ead7bfb812fb9efcd9dc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 34845,
      "upload_time": "2023-03-29T07:41:58",
      "upload_time_iso_8601": "2023-03-29T07:41:58.696785Z",
      "url": "https://files.pythonhosted.org/packages/f5/4b/a8611e3ed9b61e1aa0926af02cb5d2ef7ea66ac826913b2aa02fb3a1af1c/heligeo-1.1.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}