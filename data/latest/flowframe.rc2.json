{
  "info": {
    "author": "Gary Davenport",
    "author_email": "dovedweller@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# FlowFrame\n\n### The reason I wrote this module/class:\n\nI think that Python's defacto tkinter GUI program should at least have a geometry manager that offers flow behaviour.  That is -  when the size of the GUI changes, the widgets inside the gui can be responsive in a \"flow\" manner.  Now tkinter windows are 'responsive' in that the size of the widgets can change and so forth, but my opinion is that a natural responsive design often incorporates 'flow'.  Where as when the window changes, the contents will shift inside the window like a word-wrap.  This is very common in html and the like (there is a flow type geometry manager in Java for example).  Overall, responsiveness to the window size is very important as you just don't know what size screen your program will be viewed on now, or in the future.\n\nSaying that, here is one solution to that problem.  It is a 'FlowFrame' which is literally a tkinter 'Frame' i.e. it inherets from the 'Frame' class so this 'FlowFrame' can be used anywhere a 'Frame' can be used.  It is identical in every way, except it has 2 methods in addition to its parent class the 'Frame'.  \n\n###### Note:\nThe flowframe will act as an ordinary frame unless addWidget(), organizeWidgetsWithGrid() or organizeWidgetsWithPlace() is called.  You can use the keyword argument mode=\"place\" or mode=\"grid\" when making and instance of a FlowFrame.  If none is specified, grid is used.\n\nHere are 2 methods:\n```\naddWidget(yourWidget)                          #your widget might be a button, etc\n```\nand \n```\ndestroyWidgets()\n```\n##### Update 8/2/2021\nI added 3 more methods:\n- `organizeWidgetsWithGrid()`\n- `organizeWidgetsWithPlace()`\n- `stopOrganizingWidgets()`\n\nBasically, you can use the FlowFrame as an ordinary frame, and then at any time make the children of the frame flow.  Here is an example:\n\n#### Example 1: Showing mode=\"grid\" when FlowFrame instance is made and using addWidget():\n```\nfrom tkinter import *\nfrom flowframe import *\n\ndef main():\n\n    buttonArray=[]\n    root = Tk()\n\n    myframe=FlowFrame(root, mode=\"grid\")\n    #make sure frame expands to fill parent window\n    myframe.pack(fill=\"both\", expand=1) \n\n    buttonMakePlace=Button(myframe, text=\"---Use Place---\",command=myframe.organizeWidgetsWithPlace)\n    myframe.addWidget(buttonMakePlace)\n\n    buttonMakeGrid=Button(myframe, text=\"---Use Grid---\", command=myframe.organizeWidgetsWithGrid)\n    myframe.addWidget(buttonMakeGrid)\n\n    buttonDestroy=Button(myframe,text=\"---Destroy---\", command = myframe.destroyWidgets)\n\n    for i in range(10):\n        buttonArray.append(Button(myframe,text=str(i)))\n\n    root.mainloop()\n\nmain()\n```\n#### Example 2: Initially using as an ordinary frame, then call organizing functions:\n```\nfrom tkinter import *\nfrom flowframe import *\n\ndef main():\n\n    buttonArray=[]\n    root = Tk()\n\n    myframe=FlowFrame(root, mode=\"grid\")\n    #make sure frame expands to fill parent window\n    myframe.pack(fill=\"both\", expand=1) \n\n    buttonMakePlace=Button(myframe, text=\"---Use Place---\",command=myframe.organizeWidgetsWithPlace)\n    buttonMakePlace.pack()\n\n    buttonMakeGrid=Button(myframe, text=\"---Use Grid---\", command=myframe.organizeWidgetsWithGrid)\n    buttonMakeGrid.pack()\n\n    buttonDestroy=Button(myframe,text=\"---Destroy---\", command = myframe.destroyWidgets)\n\n    for i in range(10):\n        buttonArray.append(Button(myframe,text=str(i)))\n\n    root.mainloop()\n\nmain()\n```\n\n#### Example 3: Showing the .addWidget() with more widgets:\n```\nfrom tkinter import *\nfrom flowframe import *\n\ndef main():\n\n    root = Tk()\n\n    myframe=FlowFrame(root)\n    myframe.pack(fill=\"both\", expand=True)          #IMPORTANT! make sure frame expands to fill parent window\n\n    mybutton=Button(myframe, text=\"---Button---\")\n    myframe.addWidget(mybutton)\n\n    mytextbox=Text(myframe,width=3,height=2)\n    myframe.addWidget(mytextbox)\n\n    mylabel=Label(myframe,text=\"----Label---\")\n    myframe.addWidget(mylabel, sticky=\"NSEW\")\n\n    root.mainloop()\n\nmain()\n```\nThis frame should be easy to use if you are somewhat familiar with using tkinter in Python.  Here are the key points:\n\n1) The FlowFrame is a frame.  Use it anywhere you would use a Frame.\n2) In order for widgets to flow in this frame, the frame must stick to its parent.  In other words, when you resize the frame's parent window, the frame must resize also, or else nothing will happen.  (This can be achieved using the `pack` with `fill=BOTH expand=True`, or `grid` with `sticky=NSEW` conventions)  Either way, this frame must stick to its parent container.\n3) Use the frames .addWidget to add the widget into the frame, or call an organizing function later, `i.e. myFlowFrame.organizeWidgetsUsingPlace()`\n`i.e.  myFlowFrame.addWidget(mybutton)`\n4) The order widgets are added to the frame determines the order they appear in the frame, much like using the 'pack' geometery manager.\n5) Use the FlowFrames addWidgets method to add to the frame, rather than gridding to the frame.  The FlowFrame uses the grid method in its addWidget method, but mixing and matching in an ad hoc fashion has not been really tested much, so just add to the frame with the frames method. \n6) Don't mix geometry managers - in other words, don't try to pack something into the frame, then try to use the frames's addWidget method.  This will cause errors just like trying to mix pack, grid, and place geometry managers.  Technically, the frame.addWidget() method uses the grid geometry manager, so you will not always get errors.  But the bottom line is, you should simply add to the frame using its addWidgets method rather than trying to grid to the frame.  This may lead to less than predictable results.\n7) The method is FlowFrame.destroyWidgets() which destroys the objects and removes them from the frame.  This is like a reset.  It may not be the most intricate or nuanced method, but in practice, this simple method adds substantial functionality to the package as a whole.  If I get requests for a more nuanced approach, I may revisit the module, but at this time, the package remains quite usable as is.\n\n#### Example 4:  Showing the .addWidget() and .destroyWidgets() methods:\n```\nfrom tkinter import *\nfrom flowframe import *\n\ndef _destroyWidgets():\n    myframe.destroyWidgets()\n\ndef main():\n\n    root = Tk()\n\n    global myframe\n    myframe=FlowFrame(root)\n    myframe.pack(fill=\"both\", expand=True)     #make sure frame expands to fill parent window\n\n    button=Button(myframe, text=\"---Button---\")\n    myframe.addWidget(button, sticky=NSEW)\n\n    textbox=Text(myframe,width=3,height=2)\n    myframe.addWidget(textbox)\n\n    label=Label(myframe,text=\"Label\")\n    myframe.addWidget(label,sticky=NSEW)\n\n    entry=Entry(myframe)\n    myframe.addWidget(entry, sticky=NSEW)\n\n    radioButton=Radiobutton(myframe,text=\"radio button\")\n    myframe.addWidget(radioButton)\n\n    checkButton=Checkbutton(myframe,text=\"CheckButton\")\n    myframe.addWidget(checkButton)\n\n    scale_widget = Scale(myframe, from_=0, to=100, orient=HORIZONTAL)\n    myframe.addWidget(scale_widget)\n\n    button2=Button(myframe, text=\"----Remove All---\", command=_destroyWidgets)\n    myframe.addWidget(button2)\n\n    root.mainloop()\n\nmain()\n```\n###    Summary:\n  - Object: FlowFrame\n  - Inherets from: Frame\n##### Methods:\n```\n      addWidget(widget)\n      destroyWidgets()\n      organizeWidgetsUsingGrid()\n      organizeWidgetsUsingPlace()\n      stopOrganizingWidgets()\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/garydavenport73/FlowFrame",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flowframe",
    "package_url": "https://pypi.org/project/flowframe/",
    "platform": "",
    "project_url": "https://pypi.org/project/flowframe/",
    "project_urls": {
      "Bug Tracker": "https://github.com/garydavenport73/FlowFrame/issues",
      "Homepage": "https://github.com/garydavenport73/FlowFrame"
    },
    "release_url": "https://pypi.org/project/flowframe/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "This module makes a FlowFrame which inherits from the Frame class in tkinter",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11070085,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5a9fe17a7d453a13c1747c24af7cf5a6f37ba066a3ada649f5e5bec7cf0575c",
          "md5": "3573790ff24920feb29d401d2bf0f21d",
          "sha256": "6794cda650184a8ee9d52021bf3bb052688e6f14b75c554423e81e296ff3908a"
        },
        "downloads": -1,
        "filename": "flowframe-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3573790ff24920feb29d401d2bf0f21d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5195,
        "upload_time": "2021-07-16T02:32:48",
        "upload_time_iso_8601": "2021-07-16T02:32:48.058906Z",
        "url": "https://files.pythonhosted.org/packages/e5/a9/fe17a7d453a13c1747c24af7cf5a6f37ba066a3ada649f5e5bec7cf0575c/flowframe-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a740ccabcbc443e667b89bb414ec0a670470a9c2a2511c10bac509114427b11",
          "md5": "3c215be127db6222c47b618cefdb4efb",
          "sha256": "8bf69c0f0aa1e1f8a2807ff685f00873c85a321e6167316a3a4ad428acad8616"
        },
        "downloads": -1,
        "filename": "flowframe-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3c215be127db6222c47b618cefdb4efb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4879,
        "upload_time": "2021-07-16T02:32:49",
        "upload_time_iso_8601": "2021-07-16T02:32:49.891748Z",
        "url": "https://files.pythonhosted.org/packages/6a/74/0ccabcbc443e667b89bb414ec0a670470a9c2a2511c10bac509114427b11/flowframe-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1e56087ce105cc26bb639a0952485618134361bf6b8f40f47624b1300646904",
          "md5": "4ce0ba4e7ed704586f1eea957654decd",
          "sha256": "e0f83d6e46fcf46c145d84c8c17d4e456435619309395cde02a15e797a8e0fe0"
        },
        "downloads": -1,
        "filename": "flowframe-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ce0ba4e7ed704586f1eea957654decd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6284,
        "upload_time": "2021-08-02T15:03:58",
        "upload_time_iso_8601": "2021-08-02T15:03:58.617044Z",
        "url": "https://files.pythonhosted.org/packages/f1/e5/6087ce105cc26bb639a0952485618134361bf6b8f40f47624b1300646904/flowframe-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e2f8685b62fe1b7e2fb3082d2128f012b87bdf26c25fb338f7f87b56d4b5b2a",
          "md5": "222788ca1e4e3303ef7b4d8e71787485",
          "sha256": "25be9ea8a390966e374a64477e750f7895796057baf90c3f3156eb3a64a065ee"
        },
        "downloads": -1,
        "filename": "flowframe-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "222788ca1e4e3303ef7b4d8e71787485",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6170,
        "upload_time": "2021-08-02T15:03:59",
        "upload_time_iso_8601": "2021-08-02T15:03:59.894441Z",
        "url": "https://files.pythonhosted.org/packages/4e/2f/8685b62fe1b7e2fb3082d2128f012b87bdf26c25fb338f7f87b56d4b5b2a/flowframe-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1e56087ce105cc26bb639a0952485618134361bf6b8f40f47624b1300646904",
        "md5": "4ce0ba4e7ed704586f1eea957654decd",
        "sha256": "e0f83d6e46fcf46c145d84c8c17d4e456435619309395cde02a15e797a8e0fe0"
      },
      "downloads": -1,
      "filename": "flowframe-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4ce0ba4e7ed704586f1eea957654decd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6284,
      "upload_time": "2021-08-02T15:03:58",
      "upload_time_iso_8601": "2021-08-02T15:03:58.617044Z",
      "url": "https://files.pythonhosted.org/packages/f1/e5/6087ce105cc26bb639a0952485618134361bf6b8f40f47624b1300646904/flowframe-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e2f8685b62fe1b7e2fb3082d2128f012b87bdf26c25fb338f7f87b56d4b5b2a",
        "md5": "222788ca1e4e3303ef7b4d8e71787485",
        "sha256": "25be9ea8a390966e374a64477e750f7895796057baf90c3f3156eb3a64a065ee"
      },
      "downloads": -1,
      "filename": "flowframe-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "222788ca1e4e3303ef7b4d8e71787485",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6170,
      "upload_time": "2021-08-02T15:03:59",
      "upload_time_iso_8601": "2021-08-02T15:03:59.894441Z",
      "url": "https://files.pythonhosted.org/packages/4e/2f/8685b62fe1b7e2fb3082d2128f012b87bdf26c25fb338f7f87b56d4b5b2a/flowframe-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}