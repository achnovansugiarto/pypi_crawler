{
  "info": {
    "author": "foolcage",
    "author_email": "5533061@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Customer Service",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Office/Business :: Financial :: Investment",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "[![Build Status](https://travis-ci.org/foolcage/fooltrader.svg?branch=master)](https://travis-ci.org/foolcage/fooltrader)\n\n**Read this in other languages: [English](README-en.md).**  \n# fooltrader:trade as a fool\n>\"要在市场上生存，就必须远离聪明，因为，你的聪明在市场面前一钱不值\"------缠中说禅  \n\n# 1. 使用截图\n## 1.1 **A股基本面分析**  \n![](./screenshots/profit_price.gif)\n>输入你感兴趣的个股,查看其净利润跟股价的关系,也许你就不会认为\"基本表面\"没用了?  \n比如:万科的利润一直在高速增长,白菜价压了几年,所以'野蛮人'来了,还有类似的标的吗?  \n而把全市场的个股进行计算,并自动通知你,其实也不是什么难事.\n\n## 1.2 **美股基本面分析**  \n![](./screenshots/usa-profit-price.gif)\n>看一下美股的表现如何呢?  \n\n## 1.3 **回测**  \n\n策略的编写,可以采用事件驱动或者时间漫步的方式,查看[*设计文档*](./docs/trader.md)  \n\n```python\nclass EventTrader(Trader):\n    def on_init(self):\n        self.trader_id = 'aa'\n        self.only_event_mode = True\n        self.universe = ['stock_sz_000338']\n        self.df_map = {}\n\n    def on_day_bar(self, bar_item):\n        current_security = bar_item['securityId']\n        current_df = self.df_map.get(current_security, pd.DataFrame())\n        if current_df.empty:\n            self.df_map[current_security] = current_df\n\n        current_df = current_df.append(bar_item, ignore_index=True)\n        self.df_map[current_security] = current_df\n\n        if len(current_df.index) == 10:\n            ma5 = np.mean(current_df.loc[5:, 'close'])\n            ma10 = np.mean(current_df.loc[:, 'close'])\n            # 5日线在10日线上,并且没有持仓,就买入\n            if ma5 > ma10 and not self.account_service.get_position(current_security):\n                self.buy(security_id=current_security, current_price=bar_item['close'])\n            # 5日线在10日线下,并且有持仓,就卖出\n            elif ma5 < ma10 and self.account_service.get_position(current_security):\n                self.sell(security_id=current_security, current_price=bar_item['close'])\n            current_df = current_df.loc[1:, ]\n            self.df_map[current_security] = current_df\n```\n\n运行策略可以实时查看效果,并做进一步的评估\n![](./screenshots/trader.gif)\n\n## 1.4 **大势dashboard**\n![](./screenshots/analyze1.png)  \n\n## 1.5 **gdp市值比较**\n![](./screenshots/gdp_cap.png)  \n>只要总市值接近GDP,基本就是顶部,而长期远离GDP也是不可能的.\n\n## 1.6 **创业板PE分析**\n![](./screenshots/cyb_pe.png)\n>17.94%的时间处于20-40,50.7%时间处于40-70,26.67%的时间处于70-100,4.69%的时间处于100以上.\n所以:在40左右就觉得\"估值\"高,看空创业板的,注定无法享受15年的创业板大牛市\n\n## 1.7 **各市场PE对比**  \n![](./screenshots/china-usa-pe.png)\n>创业板>中小板>深证>标普>上证?也许需要一点想象力,风格也是可以转换的?\n嗯,标普的平均PE曾经也超过120,比我们的大创业板的疯狂还是差一点,然后,现在我们上证的PE其实是比标普低的,所以?\n\n# 2. 简介\nfooltrader是一个利用*大数据*技术设计的*量化交易系统*,包括数据的抓取,清洗,结构化,计算,展示,回测和交易.  \n它的目标是提供一个统一的框架来对*全市场*(股票,期货,债券,外汇,数字货币,宏观经济等)进行研究,回测,预测,交易.  \n它的适用对象包括:***量化交易员,财经类专业师生,对经济数据感兴趣的人,程序员,喜欢自由而有探索精神的人***\n\n# 3. 架构图\nfooltrader是一个层次清晰的系统,你可以在不同的层次对其进行使用,也可以扩展,改造或替换里面的模块.  \n\n![](./screenshots/architecture.png)\n\n# 4. 使用step by step\n使用的层次跟架构图里面的模块是一一对应的, 你可以在任何step停下来,进行扩展或者对接你自己熟悉的系统.  \n当然,还是希望你全部跑通,因为这里的每个模块的技术选型都是经过精心考虑的,并且后续会不停完善.  \n\n### 4.1 环境准备  \n操作系统:Ubuntu 16.04.3 LTS  \n原则上,其他也可以,系统使用的组件都是跨平台的,但我只在ubuntu和mac运行过    \n内存:>16G  \n硬盘:越大越好  \nclone或者fork代码  \n```bash\n$ git clone https://github.com/foolcage/fooltrader.git\n```\n### 4.2 初始化python环境\n```bash\n$ cd fooltrader\n$ ./init_env.sh\n```\n如果你最后看到:  \n```bash\nRequirements installed.  \nenv ok\n```\n那么恭喜你,你可以以各种姿势去玩耍了.\n### 4.3 抓取数据\n建议先下载打包好的历史数据[*data.zip*](https://pan.baidu.com/s/1dmZaPo).  \n看一下[*数据协议*](./docs/contract.md),设置好FOOLTRADER_STORE_PATH,解压下载的文件到该目录.  \n该项目的一个目的之一是方便大家共享数据,不需要每个人都去抓历史数据而导致被屏蔽.  \n```bash\n$ source ve/bin/activate\n$ ./ve/bin/ipython\nIn [1]: from fooltrader.datamanager import datamanager\n#抓取股票元数据\nIn [2]: datamanager.crawl_stock_meta()\n#抓取指数数据\nIn [3]: datamanager.crawl_index_quote()\n#抓取个股K线和tick数据\nIn [4]: datamanager.crawl_stock_quote(start_code=002797,end_code=002798,crawl_tick=False)\n#抓取财务数据\nIn [5]: datamanager.crawl_finance_data(start_code=002797,end_code=002798)\n```\n这里把抓取数据作为一个单独的模块,而不是像tushare那样api和爬虫耦合在一起,主要是为了:\n> 爬虫只干爬虫的事:专注抓取的速度,更好的数据分类,数据补全,防屏蔽等  \n> api设计只依赖[*数据协议*](./docs/contract.md),从而具有更好的速度和灵活性\n\n\n抓取每天的增量数据只需要:\n```bash\n$ ./sched_finance.sh\n```\n```bash\n$ ./sched_quote.sh\n```\n该脚本会定时去抓取\"缺少\"的数据,在历史数据完整性检查通过后,其实就是只是抓取当天的数据,这样我们就有了一个自动化自我维护的完整数据源.  \n可在sched_quote.py文件中进行对定时任务进行配置:  \n```python\n#每天17:00运行\n@sched.scheduled_job('cron', hour=17, minute=00)\ndef scheduled_job1():\n    crawl_stock_quote('000001', '002999')\n    crawl_index_quote()\n\n\n@sched.scheduled_job('cron', hour=17, minute=20)\ndef scheduled_job2():\n    crawl_stock_quote('300000', '300999')\n\n\n@sched.scheduled_job('cron', hour=17, minute=40)\ndef scheduled_job3():\n    crawl_stock_quote('600000', '666666')\n```\n\n最后强调一下,数据抓下来了,怎么使用?请参考[*数据协议*](./docs/contract.md)  \n到这里,如果你不想使用elastic-search,也不想使用python,你就是想用java,mysql,或者你superset,redash,hadoop啥的玩得很熟,没问题,根据数据协议你应该很容易的把数据放到你需要的地方进行研究.\n当然,我更希望你把代码贡献到connector里面,pr给我,既提高自己的代码水平,又方便了需要使用的人,岂不快哉?  \n### 4.4 elastic-search和kibana安装(6.1.1)  \n>仅仅只是把数据换一个存储,系统就发生了不可思议的变化.\n\n可以参考官方文档进行安装:https://www.elastic.co/guide/en/elastic-stack/current/installing-elastic-stack.html  \n也可以用以下命令来完成:  \n```bash\n$ #下载xpack\n$ wget https://artifacts.elastic.co/downloads/packs/x-pack/x-pack-6.1.1.zip\n$ #下载es\n$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.1.1.zip\n$ unzip elasticsearch-6.1.1.zip\n$ cd elasticsearch-6.1.1/\n$ #为es安装xpcck插件,就是刚刚下载的那个x-pack-6.1.1.zip,格式为file://+其路径\n$ bin/elasticsearch-plugin install file:///path/to/file/x-pack-6.1.1.zip\n$ #用fooltrader中的elasticsearch.yml覆盖es默认配置\n$ cp ../fooltrader/config/elasticsearch.yml config/\n$ #启动es,可根据自己的情况更改heap大小,<=32g\n$ ES_JAVA_OPTS=\"-Xms8g -Xmx8g\"  ./bin/elasticsearch\n$\n$ #下载kibana\n$ wget https://artifacts.elastic.co/downloads/kibana/kibana-6.1.1-linux-x86_64.tar.gz\n$ tar -xzf kibana-6.1.1-linux-x86_64.tar.gz\n$ cd kibana-6.1.1-linux-x86_64/\n$ #为kibana安装xpcck插件,就是刚刚下载的那个x-pack-6.1.1.zip,格式为file://+其路径\n$ bin/kibana-plugin install file:///path/to/file/x-pack-6.1.1.zip\n$ #用fooltrader中的kibana.yml覆盖kibana默认配置\n$ cp ../fooltrader/config/kibana.yml config/\n$ ./bin/kibana\n```\n\n### 4.5 数据存储到elastic-search  \n到这里,我还是默认你在fooltrader的ipython环境下.\n```bash\nIn [1]: from fooltrader.connector import es_connector\n#股票元信息->es\nIn [2]: es_connector.stock_meta_to_es()\n#指数数据->es\nIn [3]: es_connector.index_kdata_to_es()\n#个股k线->es\nIn [4]: es_connector.stock_kdata_to_es()\n#你也可以多开几个窗口,指定范围,提高索引速度\nIn [4]: es_connector.stock_kdata_to_es(start='002000',end='002999')\n#财务数据->es\nIn [5]: es_connector.balance_sheet_to_es()\nIn [5]: es_connector.income_statement_to_es()\nIn [5]: es_connector.cash_flow_statement_to_es()\n```\n\n然后,我们简单的来领略一下它的威力  \n查询2017年中报净利润top 5\n```bash\ncurl -XPOST 'localhost:9200/income_statement/doc/_search?pretty&filter_path=hits.hits._source' -H 'Content-Type: application/json' -d'\n{\n  \"query\": {\n    \"range\": {\n      \"reportDate\": {\n        \"gte\": \"20170630\",\n        \"lte\": \"20170630\"\n      }\n    }\n  },\n  \"size\": 5,\n  \"sort\": [\n    {\n      \"netProfit\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}\n'\n{\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_source\": {\n          \"exchangeGains\": 1.3242E10,\n          \"netProfit\": 1.827E9,\n          \"securityId\": \"stock_sh_601318\",\n          \"investmentIncome\": 2.0523E10,\n          \"operatingProfit\": 7.8107E10,\n          \"accumulatedOtherComprehensiveIncome\": 2.0E8,\n          \"attributableToMinorityShareholders\": 6.5548E10,\n          \"sellingExpenses\": 1.0777E10,\n          \"investmentIncomeFromRelatedEnterpriseAndJointlyOperating\": \"398259000000.00\",\n          \"id\": \"stock_sh_601318_20170630\",\n          \"minorityInterestIncome\": 6.238E10,\n          \"code\": \"601318\",\n          \"otherComprehensiveIncome\": 6.5506E10,\n          \"nonOperatingIncome\": 4.006E9,\n          \"financingExpenses\": 0.0,\n          \"reportEventDate\": \"2017-08-18\",\n          \"netProfitAttributedToParentCompanyOwner\": 5.778E10,\n          \"disposalLossOnNonCurrentLiability\": 9.01E8,\n          \"incomeFromChangesInFairValue\": -2.56E8,\n          \"incomeTaxExpense\": 2.2E7,\n          \"operatingTotalCosts\": 3.4139E11,\n          \"assetsDevaluation\": 8.75E8,\n          \"EPS\": 1.9449E10,\n          \"operatingCosts\": 9.4E7,\n          \"attributableToOwnersOfParentCompany\": 1.58E8,\n          \"ManagingCosts\": 6.402E10,\n          \"totalProfits\": 8.403E9,\n          \"dilutedEPS\": 2.4575E10,\n          \"reportDate\": \"20170630\",\n          \"businessTaxesAndSurcharges\": 9.442E9,\n          \"operatingRevenue\": 4.63765E11,\n          \"nonOperatingExpenditure\": 1.35892E11\n        }\n      ]\n    }\n  }\n}\n```\n实际上REST接口天然就有了,做跨平台接口非常方便,根据[*数据协议*](./docs/contract.md) 和ES DSL可以非常方便的进行查询和聚合计算.\n\n### 4.6 使用kibana进行分析\n(文档待完善)\n\n### 4.7 回测\n(文档待完善)\n\n### 4.8 交易\n(文档待完善)\n\n# 支持的功能\n* 爬虫代理框架  \n\n>可配置代理服务器池和并发数,从而提高爬虫的健壮性\n\n* 数据抓取  \n  * A股标的信息抓取  \n  * A股tick数据抓取  \n  * A股日线数据抓取  \n  * A股财务数据抓取  \n  * A股事件抓取  \n\n>数据的处理方式是,先定义[*数据协议*](./docs/contract.md),再寻找数据源,这样做的好处是:数据协议的稳定为整个系统的稳定打下坚实的基础,多数据源比较提高数据准确性,多数据源聚合提高数据完整性.\n\n* 常用技术指标计算(ma,ema,macd等)\n\n>我们不需要那么多技术指标,但一定要知道所使用指标的内涵,所以,我们选择自己计算;没错,由于数据的统一性,理所当然地,计算的统一性也有了.\n不管是A股,港股,还是数字货币,不管是1分钟级别,还是日线,使用的都是统一的api.\n\n* 回测框架\n\n>小金属涨疯了,但相关的上市公司股价还在历史新低,我是不是可以买一点?  \n金叉买,死叉卖,在不同级别上表现如何?在不同标的上表现如何?  \n相同的策略,如何快速的在所有标的上回测,并进行对比?  \n利润增长,股价也增长?或者提前反映?滞后反映?各种表现的比例如何?  \n各个策略之间如何通信,从而形成合力?  \n#### 没错:回测框架必须要考虑这些问题  \n\n# TODO\n* 交易DSL设计\n* WEB管理界面,向导式生成策略\n* 实时行情及kafka实时计算\n* 集成vnpy的交易接口\n* 期货数据抓取\n* 港股数据抓取\n\n# 联系方式  \nQQ群:300911873  \n如果你喜欢该项目,请加星支持一下,并在申请入群时告知github user name.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/foolcage/fooltrader",
    "keywords": "stock finance fintech big-data tushare vnpy technical-analysis trading-platform elasticsearch kafka pandas fundamental-analysis quant",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fooltrader",
    "package_url": "https://pypi.org/project/fooltrader/",
    "platform": "",
    "project_url": "https://pypi.org/project/fooltrader/",
    "project_urls": {
      "Bug Reports": "https://github.com/foolcage/fooltrader/issues",
      "Funding": "https://github.com/foolcage/fooltrader",
      "Homepage": "https://github.com/foolcage/fooltrader",
      "Say Thanks!": "https://saythanks.io/to/foolcage",
      "Source": "https://github.com/foolcage/fooltrader"
    },
    "release_url": "https://pypi.org/project/fooltrader/0.0.1a1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Open source quantitative framework for Humans",
    "version": "0.0.1a1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 3664465,
  "releases": {
    "0.0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c448b61144af0467b983caf4449a44ba9ef2c6093ab9a34920827cd384d7e054",
          "md5": "61ba06c1039e94b9a2dc9005518f308a",
          "sha256": "15130cde187205a6b544636f3318d5306dec4901aa661da08e39c21227533e9e"
        },
        "downloads": -1,
        "filename": "fooltrader-0.0.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "61ba06c1039e94b9a2dc9005518f308a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 67764,
        "upload_time": "2018-03-13T07:50:36",
        "upload_time_iso_8601": "2018-03-13T07:50:36.933101Z",
        "url": "https://files.pythonhosted.org/packages/c4/48/b61144af0467b983caf4449a44ba9ef2c6093ab9a34920827cd384d7e054/fooltrader-0.0.1a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c448b61144af0467b983caf4449a44ba9ef2c6093ab9a34920827cd384d7e054",
        "md5": "61ba06c1039e94b9a2dc9005518f308a",
        "sha256": "15130cde187205a6b544636f3318d5306dec4901aa661da08e39c21227533e9e"
      },
      "downloads": -1,
      "filename": "fooltrader-0.0.1a1.tar.gz",
      "has_sig": false,
      "md5_digest": "61ba06c1039e94b9a2dc9005518f308a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 67764,
      "upload_time": "2018-03-13T07:50:36",
      "upload_time_iso_8601": "2018-03-13T07:50:36.933101Z",
      "url": "https://files.pythonhosted.org/packages/c4/48/b61144af0467b983caf4449a44ba9ef2c6093ab9a34920827cd384d7e054/fooltrader-0.0.1a1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}