{
  "info": {
    "author": "L3viathan",
    "author_email": "git@l3vi.de",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# batchable\n\nAllows hiding the batching logic of requests.\n\n```bash\npip install batchable\n```\n\nThis is the result of a learning day @ solute, together with\n[@digitalarbeiter](https://github.com/digitalarbeiter).\n\n## Idea\n\nWe are often faced with the following situation:\n\n- A stream of objects has to be processed\n- During this process, some kind of lookup has to be made\n\nAs an example, consider this mockup of an e-commerce system processing offers\nfor articles:\n\n```python\ndef transform_offer(offer):\n    return {\n        \"id\": offer[\"offer_id\"],\n        \"shop_id\": offer[\"shop_id\"],\n    }\n\nprocessed_offers = [transform_offer(offer) for offer in unprocessed_offers]\n```\n\nSo far, this is straightforward. Now consider the case where you want to add\nthe name of the shop referenced by ID. This name is not stored inside the\nunprocessed offer, but instead has to be retrieved from a (different) database:\n\n```python\ndef transform_offer(offer):\n    return {\n        \"id\": offer[\"offer_id\"],\n        \"shop_name\": lookup_shop(offer[\"shop_id\"])[\"name\"],\n    }\n\ndef lookup_shop(shop_id):\n    # returns e.g. {\"id\": 23, \"name\": \"Fancy shop\"}\n    return dict(\n        db.execute(\n            \"SELECT id, name FROM shops WHERE id={id}\",\n            id=shop_id,\n        ).fetchone(),\n    )\n```\n\nAgain, this works, but it has a major downside: For every offer that is\nprocessed, a new roundtrip is made to the database. We also would do the exact\nsame queries several times, if some offers share the same shop ID (which is\nvery likely). This second problem is solvable by caching the function, e.g. via\n`functools.lru_cache`. But the main problem (one request per offer) remains.\n\nThe solution to this problem is to add batching: You somehow have to collect\nthe shop IDs somewhere, and only make a request once there are _n_ shop IDs\nbeing requested. Doing this is non-trivial, but also not terribly difficult.\nThe problem with this solution is that you now have to restructure your code\nquite a bit. Maybe you have to iterate over the offers twice; once to get _all_\nshop IDs, and then again to do the actual processing. Maybe you'd do it the\nother way around, where you do several passes (first put only shop IDs in the\noffers while also putting them in some kind of queue, then process the queue,\nand finally enrich the half-processed offers with shop names.\n\n------\n\nThis project aims to solve this issue, by allowing you to write your code just\nlike you normally would, and doing nasty things behind the scenes to enable\nbatching that you don't see. First, you import the library:\n\n```python\nimport batch\n```\n\nThen you decorate the function you want to batch with `batch.able`, while\nchanging it to handle _several_ IDs:\n\n```python\n@batch.able(batch_size=10)\ndef lookup_shop(shop_ids):\n    return {\n        row[\"id\"]: dict(row)\n        for row in db.execute(\n            \"SELECT id, name FROM shops WHERE id=ANY({ids})\",\n            ids=tuple(shop_id),\n        ),\n    }\n```\n\nYou still call this function with a single shop ID, with no functional changes.\nYou can, however, also call it inside a context manager:\n\n```python\nwith batch.ed:\n    processed_offers = [transform_offer(offer) for offer in unprocessed_offers]\n```\n\nThis is again functionally identical, _but_ `lookup_shop` gets called with (up\nto) 10 shop IDs at a time. You can also provide a `default=` argument to the\ndecorator to set a default value for missing rows (otherwise missing rows will\nraise an exception).\n\nIf you want, you can also add a cache to this function â€” make sure to add it\n_on top_ of the `@batch.able` decorator, so it caches per ID.\n\n\n## Caveats\n\nThe way this works is by having the lookup function return `Proxy` objects that\nare later (either when the batch size is reached, or when leaving the context\nmanager) magically replaced by the actual object. The proxy knows about\nindexing and attribute access, so that will just work as well. The level of\nmagic means however that there are limitations to this technique:\n\n- **CPython only:** proxies are replaced with a devious technique involving the\n  reference-counting garbage collector, meaning this won't work on\n  implementations without one (e.g. PyPy).\n- **no thread-safety:** to be honest, it will _probably usually_ just work, but\n  we sure as hell don't guarantee it. We do a `gc.collect()` immediately before\n  asking the GC for references to the proxy, but in the meantime a different\n  thread could have decremented the reference count, meaning we could get\n  half-dead objects that haven't been reaped yet.\n- **no tuples:** we only replace references in lists and dicts (including\n  instance dictionaries). That means that we are not able to replace references\n  in tuples. It would technically be possible to do this, but the way this\n  library works is surprising enough; we didn't want to violate the \"immutable\n  objects can't be changed\" rule.\n- **IDs must be hashable:** probably a no-brainer, but the IDs used as\n  arguments to the lookup functions must be hashable. They almost always are\n  anyways.\n- **no intermediate use:** This is the most dangerous foot-gun. Make sure not\n  to use results of calling `transform_offer` _until you have left the context\n  manager_, because the proxies may not all have been replaced yet.\n\n\n## Complete example\n\nA more complete example can be seen in the file `usage.py`. When executing it,\nobserve where the `Proxy` objects are still shown, and where they have\ndisappeared.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/L3viathan/batchable",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "batchable",
    "package_url": "https://pypi.org/project/batchable/",
    "platform": null,
    "project_url": "https://pypi.org/project/batchable/",
    "project_urls": {
      "Homepage": "https://github.com/L3viathan/batchable",
      "Repository": "https://github.com/L3viathan/batchable"
    },
    "release_url": "https://pypi.org/project/batchable/0.2.2/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "Hide your batch logic away from the actual code.",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14922985,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f357d48ca8ca3496980dc93723997f666e1ad7b61197f3235a945e5c53ca857a",
          "md5": "1004d14f1aabb1a3394ee9f01731ae6a",
          "sha256": "f79718998408e8d3e9e0936e1fab47a31b4b597bae2da5a9bc63f988ccd0328c"
        },
        "downloads": -1,
        "filename": "batchable-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1004d14f1aabb1a3394ee9f01731ae6a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 2230,
        "upload_time": "2022-08-26T14:35:29",
        "upload_time_iso_8601": "2022-08-26T14:35:29.791506Z",
        "url": "https://files.pythonhosted.org/packages/f3/57/d48ca8ca3496980dc93723997f666e1ad7b61197f3235a945e5c53ca857a/batchable-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70fdf19bf61b36eeba7038f80be3cd0c8884c5e4b394c98e5f5cbfff3bbb2188",
          "md5": "b30ca47eb18800e603c49f520c93c2fb",
          "sha256": "968a4c547ded411331c186f5b9dcb2864353bb4e4a43339d2bdf26f7523213fb"
        },
        "downloads": -1,
        "filename": "batchable-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b30ca47eb18800e603c49f520c93c2fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 2084,
        "upload_time": "2022-08-26T14:35:31",
        "upload_time_iso_8601": "2022-08-26T14:35:31.379644Z",
        "url": "https://files.pythonhosted.org/packages/70/fd/f19bf61b36eeba7038f80be3cd0c8884c5e4b394c98e5f5cbfff3bbb2188/batchable-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cf1520f7687bc4b1cfa603103ff4f4a7bb9bd9f6923a7e099fc01e2957b1f59",
          "md5": "b18824c85dc706a105122ef265d5f0fd",
          "sha256": "f7f863aa981a2888b4eedf3ff01cd7961657970b08093e8cdfb35b23ffa6bec7"
        },
        "downloads": -1,
        "filename": "batchable-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b18824c85dc706a105122ef265d5f0fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 2326,
        "upload_time": "2022-08-26T20:04:14",
        "upload_time_iso_8601": "2022-08-26T20:04:14.445050Z",
        "url": "https://files.pythonhosted.org/packages/2c/f1/520f7687bc4b1cfa603103ff4f4a7bb9bd9f6923a7e099fc01e2957b1f59/batchable-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca3633b3c20c50997e7dabfc471acaf75755aaa2571c6029b6e80445211e7efe",
          "md5": "a20f8460ed2a63420be4048d917a23e8",
          "sha256": "a222716e8fb937df9940537d66bdd305269fa1f0bd0ca40055f0219edfd9a34d"
        },
        "downloads": -1,
        "filename": "batchable-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a20f8460ed2a63420be4048d917a23e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 2181,
        "upload_time": "2022-08-26T20:04:15",
        "upload_time_iso_8601": "2022-08-26T20:04:15.888491Z",
        "url": "https://files.pythonhosted.org/packages/ca/36/33b3c20c50997e7dabfc471acaf75755aaa2571c6029b6e80445211e7efe/batchable-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "463f64e64434214a9dd6175813f5d24bcbd76c32be5363219227ade66b5fd736",
          "md5": "dc3ebec0aa60112e353179b6e248659f",
          "sha256": "21338c13a98b0930a9f3b8d8c90934c00c0d6acb1521ef93105b1cf4827402c9"
        },
        "downloads": -1,
        "filename": "batchable-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc3ebec0aa60112e353179b6e248659f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 2345,
        "upload_time": "2022-08-27T17:57:27",
        "upload_time_iso_8601": "2022-08-27T17:57:27.605864Z",
        "url": "https://files.pythonhosted.org/packages/46/3f/64e64434214a9dd6175813f5d24bcbd76c32be5363219227ade66b5fd736/batchable-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19b280cfec34e5b0f25916c5bed79b7cda61b2502e6851d26648566e312a88d7",
          "md5": "579b7a7ad9f173cd8afd820b8753c3ef",
          "sha256": "1fc7920b5389e5e5666aa198eb771ef4e691f6eabdf519e6f32f86951873a22b"
        },
        "downloads": -1,
        "filename": "batchable-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "579b7a7ad9f173cd8afd820b8753c3ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 2185,
        "upload_time": "2022-08-27T17:57:28",
        "upload_time_iso_8601": "2022-08-27T17:57:28.992895Z",
        "url": "https://files.pythonhosted.org/packages/19/b2/80cfec34e5b0f25916c5bed79b7cda61b2502e6851d26648566e312a88d7/batchable-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8033b6176110021ac1d80b51915046dca1de6b504ee016c5a31670f0734c4448",
          "md5": "8476414fb3c684a79cf065c5becfefa7",
          "sha256": "cd15c2ec1c2bc400e517a2aca04374dccb693acec8dfd7e76f2ac7c73e0b87c3"
        },
        "downloads": -1,
        "filename": "batchable-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8476414fb3c684a79cf065c5becfefa7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 1996,
        "upload_time": "2022-08-27T20:54:31",
        "upload_time_iso_8601": "2022-08-27T20:54:31.146578Z",
        "url": "https://files.pythonhosted.org/packages/80/33/b6176110021ac1d80b51915046dca1de6b504ee016c5a31670f0734c4448/batchable-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73c5e692943bd14f25938395f4a46d511d7a733e0e270da36a9115bed0b89a29",
          "md5": "1406411317467f94b0264d5eae170ccd",
          "sha256": "4b0e4304268bbb7f60e77ed7d0036d4439417e85934aa45a98850389e509c1fb"
        },
        "downloads": -1,
        "filename": "batchable-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1406411317467f94b0264d5eae170ccd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 1843,
        "upload_time": "2022-08-27T20:54:32",
        "upload_time_iso_8601": "2022-08-27T20:54:32.864145Z",
        "url": "https://files.pythonhosted.org/packages/73/c5/e692943bd14f25938395f4a46d511d7a733e0e270da36a9115bed0b89a29/batchable-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a4139b03b305d55755063db73e9e5a88004b90e7134f628d0cdf82caa83721c",
          "md5": "57246e2f729f5b4aee58d6795beb98a2",
          "sha256": "379616ecf3816d8ba98c94a77ced70510ebe88be8e7ba9d34e90c43b364b83e2"
        },
        "downloads": -1,
        "filename": "batchable-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "57246e2f729f5b4aee58d6795beb98a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 4455,
        "upload_time": "2022-08-29T11:10:35",
        "upload_time_iso_8601": "2022-08-29T11:10:35.639416Z",
        "url": "https://files.pythonhosted.org/packages/7a/41/39b03b305d55755063db73e9e5a88004b90e7134f628d0cdf82caa83721c/batchable-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1941fee582d8a58dd33132a6943d4ac7d27dfd9ab9ded219518f94d4a0e1227a",
          "md5": "f5b44c84d06d1d963bcbe959439cfafc",
          "sha256": "9adea8242a1c90d4d7cfd8d18cd5e4cd7a986b23f03c9fe4faa28897e84a44d3"
        },
        "downloads": -1,
        "filename": "batchable-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f5b44c84d06d1d963bcbe959439cfafc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 5064,
        "upload_time": "2022-08-29T11:10:37",
        "upload_time_iso_8601": "2022-08-29T11:10:37.733835Z",
        "url": "https://files.pythonhosted.org/packages/19/41/fee582d8a58dd33132a6943d4ac7d27dfd9ab9ded219518f94d4a0e1227a/batchable-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a4139b03b305d55755063db73e9e5a88004b90e7134f628d0cdf82caa83721c",
        "md5": "57246e2f729f5b4aee58d6795beb98a2",
        "sha256": "379616ecf3816d8ba98c94a77ced70510ebe88be8e7ba9d34e90c43b364b83e2"
      },
      "downloads": -1,
      "filename": "batchable-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "57246e2f729f5b4aee58d6795beb98a2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 4455,
      "upload_time": "2022-08-29T11:10:35",
      "upload_time_iso_8601": "2022-08-29T11:10:35.639416Z",
      "url": "https://files.pythonhosted.org/packages/7a/41/39b03b305d55755063db73e9e5a88004b90e7134f628d0cdf82caa83721c/batchable-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1941fee582d8a58dd33132a6943d4ac7d27dfd9ab9ded219518f94d4a0e1227a",
        "md5": "f5b44c84d06d1d963bcbe959439cfafc",
        "sha256": "9adea8242a1c90d4d7cfd8d18cd5e4cd7a986b23f03c9fe4faa28897e84a44d3"
      },
      "downloads": -1,
      "filename": "batchable-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f5b44c84d06d1d963bcbe959439cfafc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 5064,
      "upload_time": "2022-08-29T11:10:37",
      "upload_time_iso_8601": "2022-08-29T11:10:37.733835Z",
      "url": "https://files.pythonhosted.org/packages/19/41/fee582d8a58dd33132a6943d4ac7d27dfd9ab9ded219518f94d4a0e1227a/batchable-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}