{
  "info": {
    "author": "nate giraldi",
    "author_email": "ng269@cornell.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# asyncpg-queue\n\n<h2 align=\"center\">Postgres (asynchronous) queues</h1>\n\n<p align=\"center\">\n<a href=\"https://github.com/n8sty/asyncpg-queue/blob/main/LICENSE\"><img alt=\"License: MIT\" src=\"https://black.readthedocs.io/en/stable/_static/license.svg\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n<a href=\"https://github.com/charliermarsh/ruff\"><img alt=\"Linter: ruff\" src=\"https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v1.json\">\n</p>\n\nUse Postgres to manage Python workloads asynchronously, powered by [asyncpg](https://github.com/MagicStack/asyncpg). asyncpg-queue is a simple library whose features include: \n\n* Ability to run both synchronous and asynchronous Python callables\n* At-least-once execution of queued tasks\n* Scales with the number of database connections available\n* Dependency free apart from `asyncpg`\n* Uses Postgres notification channels to not thrash the database with unnecessary polling\n\n## Usage\n\nTo get started using asyncpg-queue, initialize the Postgres objects that it relies on:\n\n```Python\nimport asyncpg\nfrom asyncpg_queue import bootstrap\n\ndb = asyncpg.connect(\"postgresql://postgres@127.0.0.1:5432/postgres\")\nawait bootstrap(db)\n```\n\nNow tasks can be enqueued for future processing. The `queue.put` method is naive and\nshould, in most cases be used within a transaction like in the following contrived\nexample:\n\n```Python\nfrom asyncpg_queue import queue\n\ndb = asyncpg.connect(\"postgresql://postgres@127.0.0.1:5432/postgres\")\n\nasync with db.transaction():\n    await db.execute(\n        \"INSERT INTO users (name, email) VALUES ($1, $2)\",\n        \"Someone Like a User\",\n        \"someone@example.com\",\n    )\n    await queue.put(\n        db,\n        \"send-welcome-email\",\n        data={\n            \"email\": \"someone@example.com\",\n            \"name\": \"Someone Like a User\",\n            \"stuff\": \"more of it\"},\n    )\n```\n\nThe utility of using `put` within a transaction is that often tasks that are meant to\nbe processed asynchronously should only be enqueued if the generating process succeeds.\nThe above relies on the database transaction successfully being committed as a strong\nindicator that the user was successfully created and therefore should receive a welcome\nemail. However, there is no requirement that `put` must be called within a transaction.\n\nProcessing tasks entails creating and running a worker process.\n\n```Python\nfrom asyncpg_queue import Worker\n\n\ndef send_welcome_email(email, name, **kwargs):\n    print(\"sending a welcome email!\")\n\n\nworker = Worker(\n    \"postgresqlL//postgres@127.0.0.1:5432/postgres\",\n    tasks={\n        \"send-welcome-email\": send_welcome_email,\n    }\n)\nawait worker.run()\n```\n\nNotice the `tasks` parameter passed as part of `Worker`'s initialization. This map\ninstructs the worker to process the \"send-welcome-email\" queue of tasks with the\nspecified function.\n\n## Contributing\n\nasyncpg-queue uses [Poetry](https://github.com/python-poetry/poetry) to manage its\ndependencies, development tooling, and buiild.\n\n```sh\npoetry install\n```\n\n### Testing\n\nA Docker container running Postgres is used during testing. Assuming that `docker` is\navailable on your system path at the time of running tests, the appropriate image(s)\nwill be pulled.\n\nTests are invoked by Pytest:\n\n```sh\npoetry run pytest test/\n```\n\nAlternatively, if you have a running Postgres instance and do not want to rely on\nDocker, pass the DSN of a running Postgres instance that can be used during testing:\n\n```sh\npoetry run pytest  --postgres-dsn=postgresql://postgres@localhost:5433/postgres test/\n```\n\n### Formatting\n\nCode formatting is enforced by [Black](https://github.com/psf/black):\n\n```sh\npoetry run black .\n```\n\n### Static analysis\n\nLinting (and auto-fixing where possible) is done by [Ruff](https://github.com/charliermarsh/ruff/):\n    \n```sh\npoetry run ruff check --fix .\n```\n    \nTypes are checked with [Mypy](https://github.com/python/mypy):\n\n```sh\npoetry run mypy --install-types ./asyncpg_queue/ ./test/\n```\n\nUnused code is checked by [Vulture](https://github.com/jendrikseipp/vulture):\n\n```sh\npoetry run vulture asyncpg_queue/ test/\n```\n\n## Motivation\n\nKeep your project simple as long as possible! While simplicity is in the eye of the\nbeholder, the definition used here amounts to, refrain from adding additional tools\nuntil necessary.\n\nMany projects begin simply with a server and a data-store. Eventually, as the project\ngains users and gathers complexity there may be a need for doing _something_ in a\nseparate process so as to not impede the main line. This something could be sending\nemails by poking some email SaaS provider's API or calculating the total number of new\nusers of a particular feature at the end of the day. asyncpg-queue is meant for this\nmoment in an application's history.\n\nasyncpg-queue and similar implementations have been successfully used to prolong or\nforestall implementing queues and background workers with Redis, Celery or a variety\nof other data stores. While many of these tools are not difficult to operate and PaaS\nvendors often have a managed version, there is always an additional complexity cost\nfrom introducing a new tool. asyncpg-queue should keep your toolset consistent since\nit only relies on Python and Postgres.\n\n## When _not_ to use\n\nThe primary caveat of this library is that if the database is the bottleneck in an\napplication deployment then using this tool will only add to the pressure on Postgres.\nThere will be more connections opened, more queries, and some additional data stored.\nIf any of those areas are problems, they will almost undoubtedly get worse with the\nintroduction of asyncpg-queue.\n\nWhile fast enough, asyncpg-queue has little ability to ramp the performance of\nproducers (ie: adding to the queue) or consumers (ie: popping from the queue) because\nof its reliance on Postgres. Only so much data can be written or read given a network\nconfiguration and the server instance running Postgres. To play around with this idea\nconsult [`example/benchmark/producer.py`](example/benchmark/producer.py) and\n[`example/benchmark/consumer.py`](example/benchmark/consumer.py) which should provide\nestimates of the maximum read and write throughput of your setup.\n\nasyncpg-queue is well suited for workloads that are mostly I/O. An example would be\ncalculating an end-of-day rollup table in Postgres that takes a long time to run.\nHowever, asyncpg-queue is ill suited for running many CPU intensive tasks, like\ntraining a neural network or performing the same end-of-day rollup in memory. In these\ncases it's necessary to pay attention to the `concurrency` parameter of `Worker`.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asyncpg-queue",
    "package_url": "https://pypi.org/project/asyncpg-queue/",
    "platform": null,
    "project_url": "https://pypi.org/project/asyncpg-queue/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/asyncpg-queue/0.1.0/",
    "requires_dist": [
      "asyncpg (>=0.26,<0.28)"
    ],
    "requires_python": ">=3.11,<3.12",
    "summary": "",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17158576,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54fae6493e03c30193f241dad1e278d28537fe34c679fe7cdf6d0df08db5212a",
          "md5": "eff0583e9a7e661e0dd526944e5c0c31",
          "sha256": "a3bab03a812a3106c668b64e05cd10d7aeb94e40fdbc79e7096d3683ccad6e91"
        },
        "downloads": -1,
        "filename": "asyncpg_queue-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eff0583e9a7e661e0dd526944e5c0c31",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.11,<3.12",
        "size": 12147,
        "upload_time": "2023-03-04T19:14:55",
        "upload_time_iso_8601": "2023-03-04T19:14:55.568098Z",
        "url": "https://files.pythonhosted.org/packages/54/fa/e6493e03c30193f241dad1e278d28537fe34c679fe7cdf6d0df08db5212a/asyncpg_queue-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e6799235fa15e89299fd9b161068e4173b5a412f11b66a22c48ddf3734753c6",
          "md5": "b3aee351d1e6b901f4c4d5f52316d52f",
          "sha256": "aa30355df80018830c06a027f2b87854634bee602f76cd58e5899b3f8c93b9dc"
        },
        "downloads": -1,
        "filename": "asyncpg_queue-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b3aee351d1e6b901f4c4d5f52316d52f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11,<3.12",
        "size": 13960,
        "upload_time": "2023-03-04T19:14:57",
        "upload_time_iso_8601": "2023-03-04T19:14:57.482883Z",
        "url": "https://files.pythonhosted.org/packages/4e/67/99235fa15e89299fd9b161068e4173b5a412f11b66a22c48ddf3734753c6/asyncpg_queue-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "54fae6493e03c30193f241dad1e278d28537fe34c679fe7cdf6d0df08db5212a",
        "md5": "eff0583e9a7e661e0dd526944e5c0c31",
        "sha256": "a3bab03a812a3106c668b64e05cd10d7aeb94e40fdbc79e7096d3683ccad6e91"
      },
      "downloads": -1,
      "filename": "asyncpg_queue-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eff0583e9a7e661e0dd526944e5c0c31",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.11,<3.12",
      "size": 12147,
      "upload_time": "2023-03-04T19:14:55",
      "upload_time_iso_8601": "2023-03-04T19:14:55.568098Z",
      "url": "https://files.pythonhosted.org/packages/54/fa/e6493e03c30193f241dad1e278d28537fe34c679fe7cdf6d0df08db5212a/asyncpg_queue-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e6799235fa15e89299fd9b161068e4173b5a412f11b66a22c48ddf3734753c6",
        "md5": "b3aee351d1e6b901f4c4d5f52316d52f",
        "sha256": "aa30355df80018830c06a027f2b87854634bee602f76cd58e5899b3f8c93b9dc"
      },
      "downloads": -1,
      "filename": "asyncpg_queue-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b3aee351d1e6b901f4c4d5f52316d52f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.11,<3.12",
      "size": 13960,
      "upload_time": "2023-03-04T19:14:57",
      "upload_time_iso_8601": "2023-03-04T19:14:57.482883Z",
      "url": "https://files.pythonhosted.org/packages/4e/67/99235fa15e89299fd9b161068e4173b5a412f11b66a22c48ddf3734753c6/asyncpg_queue-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}