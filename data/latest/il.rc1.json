{
  "info": {
    "author": "Antti Kervinen",
    "author_email": "antti.kervinen@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# il - inline assembly in Python 3\n\nExamples\n--------\n\n1. Decorator API - simple\n\n```python\nimport il\nimport ctypes\n\n@il.asm\ndef add_ints(rdi=ctypes.c_int32, rsi=ctypes.c_int32):\n    \"\"\"\n    # return sum of two 32-bit integers\n    # 64-bit Linux/MacOS call convention\n    #\n    .intel_syntax noprefix\n    mov rax, 0\n    mov eax, edi\n    add eax, esi\n    ret\n    \"\"\"\n    return ctypes.c_int32\n\nprint(add_ints(43, -1))\n```\n\n2. Function API - powerful\n\n```python\nadd_ints = il.def_asm(\n     name=\"add_ints\",\n     prototype=ctypes.CFUNCTYPE(ctypes.c_int32,  # return value (eax)\n                                ctypes.c_int32,  # 1st param (edi)\n                                ctypes.c_int32), # 2nd param (esi)\n     code=\"\"\"\n     .intel_syntax noprefix\n     mov rax, 0\n     mov eax, edi\n     add eax, esi\n     ret\n     \"\"\")\n\nprint(add_ints(43, -1))\n```\n\nDependencies\n------------\n\n- If object code is available: no dependencies outside Python standard\n  library. `ctypes` from the standard library is needed for loading\n  and running object code.\n\n- If object code is not available: `as` and `objcopy` (from\n  `binutils`) are required for compiling assembly.\n\nInstall\n-------\n\n```sh\n$ sudo python3 setup.py install\n```\n\nLibrary API documentation and call conventions\n----------------------------------------------\n\n```sh\n$ python3 -c 'import il; help(il)'\n```\n\nHow it works\n------------\n\n- Assume that `mylib.py` contains inlined assembly. By default, `il`\n  looks for object code from `mylib.py.il`. If found, that code will\n  be executed when inlined functions are called.\n\n- If object code is not found, `il` uses binutils: `as` (assembler)\n  and `objcopy` to compile the assembly on-the-fly and extract object\n  code from the result. Object code is saved to `mylib.py.il` for\n  later use.\n\n- Note: `il` does not link object code before running it.\n\n- You can view contents of `mylib.py.il` using `il`:\n  ```sh\n  $ python3 -c 'import il; print(il.dump_lib(\"mylib.py.il\", disasm=False))'\n  ```\n  (Use `disasm=True` to disassemble the code in the dump. Requires `objdump`.)\n\nDebugging inlined assembly\n--------------------------\n\n1. Import the library, print the pid of the Python process and the\n   address of the function that you want to debug:\n   ```python\n   >>> import mylib\n   >>> import os\n   >>> os.getpid()\n   12345\n   >>> print(mylib.myfunc.il_addr)\n   21954560\n   ```\n\n2. Attach GDB to the Python process, set a breakpoint to the address\n   and let the Python process continue.\n   ```bash\n   $ gdb -p 12345\n   (gdb) layout asm\n   (gdb) break *21954560\n   (gdb) cont\n   ```\n\n3. Call the function in Python\n   ```python\n   >>> mylib.myfunc()\n   ```\n\n4. Now you can step assembly instructions and see register values in\n   GDB:\n\n   ```bash\n   (gdb) ni\n   (gdb) info registers\n   ```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/askervin/python-il",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "il",
    "package_url": "https://pypi.org/project/il/",
    "platform": "",
    "project_url": "https://pypi.org/project/il/",
    "project_urls": {
      "Homepage": "https://github.com/askervin/python-il"
    },
    "release_url": "https://pypi.org/project/il/0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Inline assembly in Python",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6548769,
  "releases": {
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a17cc0b8ea34aa852b3173185b1440a4031722c1cb1e2002bb908a8076d498dd",
          "md5": "76168019a4adb6ffb92d7e4d298d2790",
          "sha256": "eaf1a4dca9810bb9b203dd8ecf4235a52dc14d54780176b1395e2d76171689f2"
        },
        "downloads": -1,
        "filename": "il-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76168019a4adb6ffb92d7e4d298d2790",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8228,
        "upload_time": "2020-01-31T11:42:27",
        "upload_time_iso_8601": "2020-01-31T11:42:27.633649Z",
        "url": "https://files.pythonhosted.org/packages/a1/7c/c0b8ea34aa852b3173185b1440a4031722c1cb1e2002bb908a8076d498dd/il-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8298984ab586c7f77285512bdd907e00508817b85ac9a06c791d221b7d9a15c6",
          "md5": "9508d54d8b57a7397cc78ec52cdb9582",
          "sha256": "2d8a1b2777d2b5ca8635766b6e0155420ec4bf3ac9f24c5ab8947936b269629e"
        },
        "downloads": -1,
        "filename": "il-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9508d54d8b57a7397cc78ec52cdb9582",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7299,
        "upload_time": "2020-01-31T11:42:31",
        "upload_time_iso_8601": "2020-01-31T11:42:31.758562Z",
        "url": "https://files.pythonhosted.org/packages/82/98/984ab586c7f77285512bdd907e00508817b85ac9a06c791d221b7d9a15c6/il-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a17cc0b8ea34aa852b3173185b1440a4031722c1cb1e2002bb908a8076d498dd",
        "md5": "76168019a4adb6ffb92d7e4d298d2790",
        "sha256": "eaf1a4dca9810bb9b203dd8ecf4235a52dc14d54780176b1395e2d76171689f2"
      },
      "downloads": -1,
      "filename": "il-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "76168019a4adb6ffb92d7e4d298d2790",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8228,
      "upload_time": "2020-01-31T11:42:27",
      "upload_time_iso_8601": "2020-01-31T11:42:27.633649Z",
      "url": "https://files.pythonhosted.org/packages/a1/7c/c0b8ea34aa852b3173185b1440a4031722c1cb1e2002bb908a8076d498dd/il-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8298984ab586c7f77285512bdd907e00508817b85ac9a06c791d221b7d9a15c6",
        "md5": "9508d54d8b57a7397cc78ec52cdb9582",
        "sha256": "2d8a1b2777d2b5ca8635766b6e0155420ec4bf3ac9f24c5ab8947936b269629e"
      },
      "downloads": -1,
      "filename": "il-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "9508d54d8b57a7397cc78ec52cdb9582",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7299,
      "upload_time": "2020-01-31T11:42:31",
      "upload_time_iso_8601": "2020-01-31T11:42:31.758562Z",
      "url": "https://files.pythonhosted.org/packages/82/98/984ab586c7f77285512bdd907e00508817b85ac9a06c791d221b7d9a15c6/il-0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}