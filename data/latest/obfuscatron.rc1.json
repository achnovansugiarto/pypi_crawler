{
  "info": {
    "author": "http://github.com/Pebaz",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Obfuscatron\n\nEncrypt data by storing it within a Python script that pretends to just be\n\"obfuscated\"\n\n### Features\n\n* Store binary or text data within the identifiers of a Python script\n* Obfuscated Python script can be executed (see notes below)\n\nCurrently, Obfuscatron is able to store data within the following Python syntax:\n\n* Variables\n* Class Names\n* Function Names\n* Type Hint Identifiers\n\n### Installation\n\n```bash\n$ pip install obfuscatron\n$ pip install \"git+https://github.com/Pebaz/obfuscatron\"\n```\n\n### Usage\n\n```bash\n$ obfuscatron FILE.py encode DATAFILE OUTFILE.py\n$ obfuscatron OUTFILE.py decode DATAFILE\n```\n\n### Example\n\nGiven this Python file to store some data:\n\n```python\ncustom_int_name = int\n\n\ndef function_add(first_number: custom_int_name, second_number: custom_int_name):\n    return first_number + second_number\n\n\ndef function_sub(first_number: custom_int_name, second_number: custom_int_name):\n    return first_number - second_number\n\n\ndef function_mul(first_number: custom_int_name, second_number: custom_int_name):\n    return first_number * second_number\n\n\ndef function_div(first_number: custom_int_name, second_number: custom_int_name):\n    return first_number / second_number\n\n\ndef function_mod(first_number: custom_int_name, second_number: custom_int_name):\n    return first_number % second_number\n\n\ndef function_exp(first_number: custom_int_name, second_number: custom_int_name):\n    return first_number ** second_number\n\n\ncustom_float_name = float\n\n\ndef func_float_add(first_num: custom_float_name, second_num: custom_float_name):\n    return first_num + second_num\n\n\ndef func_float_sub(first_num: custom_float_name, second_num: custom_float_name):\n    return first_num - second_num\n\n\ndef func_float_mul(first_num: custom_float_name, second_num: custom_float_name):\n    return first_num * second_num\n\n\ndef func_float_div(first_num: custom_float_name, second_num: custom_float_name):\n    return first_num / second_num\n\n\ndef func_float_mod(first_num: custom_float_name, second_num: custom_float_name):\n    return first_num % second_num\n\n\ndef func_float_exp(first_num: custom_float_name, second_num: custom_float_name):\n    return first_num ** second_num\n\n\ncustom_bool_name = bool\n\n\ndef function_and(first_bool: custom_bool_name, second_bool: custom_bool_name):\n    return first_bool and second_bool\n\n\ndef function_or(first_bool: custom_bool_name, second_bool: custom_bool_name):\n    return first_bool or second_bool\n\n\ndef function_xor(first_bool: custom_bool_name, second_bool: custom_bool_name):\n    return first_bool != second_bool\n```\n\nTurn this data:\n\n```\nname = Earth\nradius = 39000000\nterrestrial = True\nfoo = \"ðŸ˜‚\"\n\nname = Mars\nradius = 12349282382\nterrestrial = True\nfoo = \"ðŸ˜‚ðŸ˜‚\"\n\nname = Jupiter\nradius = 4300012323\nterrestrial = False\nfoo = \"ðŸ˜‚ðŸ˜‚ðŸ˜‚\"\n```\n\nInto this \"obfuscated\" Python file containing that data:\n\n```bash\n$ obfuscatron python-file.py encode original-data.txt obfuscated-python-file.py\n```\n\nResult:\n\n```python\n_1bdf0020ac0e6cb = int\n\n\ndef _739d460d09a9(_ba3f70e5094d: _1bdf0020ac0e6cb, _90e68e0bb016d:\n    _1bdf0020ac0e6cb):\n    return _ba3f70e5094d + _90e68e0bb016d\n\n\ndef _fb4103c9b200(_ba3f70e5094d: _1bdf0020ac0e6cb, _90e68e0bb016d:\n    _1bdf0020ac0e6cb):\n    return _ba3f70e5094d - _90e68e0bb016d\n\n\ndef _0ba260174885(_ba3f70e5094d: _1bdf0020ac0e6cb, _90e68e0bb016d:\n    _1bdf0020ac0e6cb):\n    return _ba3f70e5094d * _90e68e0bb016d\n\n\ndef _f9d90a0d6672(_ba3f70e5094d: _1bdf0020ac0e6cb, _90e68e0bb016d:\n    _1bdf0020ac0e6cb):\n    return _ba3f70e5094d / _90e68e0bb016d\n\n\ndef _a3271bd8e033(_ba3f70e5094d: _1bdf0020ac0e6cb, _90e68e0bb016d:\n    _1bdf0020ac0e6cb):\n    return _ba3f70e5094d % _90e68e0bb016d\n\n\ndef _ec4dee8dd39d(_ba3f70e5094d: _1bdf0020ac0e6cb, _90e68e0bb016d:\n    _1bdf0020ac0e6cb):\n    return _ba3f70e5094d ** _90e68e0bb016d\n\n\n_47bc061a1719dfeeb = float\n\n\ndef _ac6c1471eea643(_35f1426de: _47bc061a1719dfeeb, _24220208bf:\n    _47bc061a1719dfeeb):\n    return _35f1426de + _24220208bf\n\n\ndef _230ee4d679e58a(_35f1426de: _47bc061a1719dfeeb, _24220208bf:\n    _47bc061a1719dfeeb):\n    return _35f1426de - _24220208bf\n\n\ndef _d4dc6493bf79fe(_35f1426de: _47bc061a1719dfeeb, _24220208bf:\n    _47bc061a1719dfeeb):\n    return _35f1426de * _24220208bf\n\n\ndef _36599759ee0be1(_35f1426de: _47bc061a1719dfeeb, _24220208bf:\n    _47bc061a1719dfeeb):\n    return _35f1426de / _24220208bf\n\n\ndef _c098256f8e486f(_35f1426de: _47bc061a1719dfeeb, _24220208bf:\n    _47bc061a1719dfeeb):\n    return _35f1426de % _24220208bf\n\n\ndef _8edeab92c6b73c(_35f1426de: _47bc061a1719dfeeb, _24220208bf:\n    _47bc061a1719dfeeb):\n    return _35f1426de ** _24220208bf\n\n\n_8709a8aa09751c5d = bool\n\n\ndef _653c1fd____b(_rp9q563626: _8709a8aa09751c5d, _0eqmvftj17s:\n    _8709a8aa09751c5d):\n    return _rp9q563626 and _0eqmvftj17s\n\n\ndef _pceiwy12s6f(_rp9q563626: _8709a8aa09751c5d, _0eqmvftj17s:\n    _8709a8aa09751c5d):\n    return _rp9q563626 or _0eqmvftj17s\n\n\ndef _9zleib3qmp0b(_rp9q563626: _8709a8aa09751c5d, _0eqmvftj17s:\n    _8709a8aa09751c5d):\n    return _rp9q563626 != _0eqmvftj17s\n```\n\nTo get it back:\n\n```bash\n$ obfuscatron obfuscated-python-file.py decode get-original-data-back.txt\n```\n\n\n### Notes\n\nSince Python is a fully dynamic language, any section of code within a Python\nscript can lookup specific variables, classes, and functions by name. Scripts\nusing this feature of Python will not work after being obfuscated by Obfuscatron\nbecause Obfuscatron changes the names of all the identifiers in the script. To\nproperly use Obfuscatron, use an input script that works (to not draw attention\nto the variable names storing data), and ensure that no dynamic name\nintrospection occurs during runtime.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/Pebaz/obfuscatron",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "obfuscatron",
    "package_url": "https://pypi.org/project/obfuscatron/",
    "platform": "",
    "project_url": "https://pypi.org/project/obfuscatron/",
    "project_urls": {
      "Homepage": "http://github.com/Pebaz/obfuscatron"
    },
    "release_url": "https://pypi.org/project/obfuscatron/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Encrypt data by storing it within a Python script that pretends to just be \"obfuscated\"",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10040216,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1d6ab2a42cf8381d350aaa6354fe8c656115f69949bf015d7c4e9041c21cc50",
          "md5": "2ca904dc0096a8dca6f0320a64ef1982",
          "sha256": "83c9f5534a9b8dbb8e3094f048030972b76ef7819db38dba483037c0c179b961"
        },
        "downloads": -1,
        "filename": "obfuscatron-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2ca904dc0096a8dca6f0320a64ef1982",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4975,
        "upload_time": "2021-04-12T14:40:40",
        "upload_time_iso_8601": "2021-04-12T14:40:40.377450Z",
        "url": "https://files.pythonhosted.org/packages/c1/d6/ab2a42cf8381d350aaa6354fe8c656115f69949bf015d7c4e9041c21cc50/obfuscatron-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1d6ab2a42cf8381d350aaa6354fe8c656115f69949bf015d7c4e9041c21cc50",
        "md5": "2ca904dc0096a8dca6f0320a64ef1982",
        "sha256": "83c9f5534a9b8dbb8e3094f048030972b76ef7819db38dba483037c0c179b961"
      },
      "downloads": -1,
      "filename": "obfuscatron-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2ca904dc0096a8dca6f0320a64ef1982",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4975,
      "upload_time": "2021-04-12T14:40:40",
      "upload_time_iso_8601": "2021-04-12T14:40:40.377450Z",
      "url": "https://files.pythonhosted.org/packages/c1/d6/ab2a42cf8381d350aaa6354fe8c656115f69949bf015d7c4e9041c21cc50/obfuscatron-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}