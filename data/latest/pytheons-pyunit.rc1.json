{
  "info": {
    "author": "pytheons",
    "author_email": "maveilthain@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PyUnit library\nThis is wrapper for standard unittest library for Python with custom TestRunner to run test suites.\nThe main argument that this library was published is that standard unittest TestCase need test method prefix.\nThis way with TestCase method prefix introduce the noise and if you have a lot small test methods in TestCase\nclass then you still read test, and you are not focused on what do the test should test.\nI prefer the `@test` decorator or other solutions out of test method name to tell Your tests which method \nis registered as test in test runner, then You can focused to read method as poetry not as technical layer.\n\nThis library contains tool called `pyunit` to:\n- initiate the configuration file for suites\n- run tests automatically by `pyunit run` from command line \n\n## Installation:\n```shell script\nuser@host $ pip install pytheons.pyunit\n```\n\n## Usage\n```shell script\nuser@host $ pyunit\n--------------------------------------------------\nPyUnit - unittest test runner based on annotation.\n\nUsage: pyunit COMMAND --OPTION <argument>\n  pyunit config init [--path=<path>]\n  pyunit run [--suites=<suites>]\n  pyunit (-h | --help)\n  pyunit --version\n\nCommands:\n  config - Configuration sub-system\n  suites - Tests Suites sub-system\n  run    - Test runner from CLI\n\nOptions:\n  -h --help     Show this screen.\n  --version     Show version.\n\n```\n\n1. Create the configuration by command `pyunit config init [--path=path_to_your_test_configuration_dir]`\n2. Create `.py` file to run all your tests. Below is content for this file:\n    ```python\n    from pytheons.pyunit.suites.test_runner import TestRunner\n    \n    TestRunner.run()\n    ```\n3. Write or Reorganise Your tests in structure `test/<suite-name>/[optional subdir]/<test_name>.py`\n4. Each test folder should be a package with `__init__.py` file - unittest throws exception that directory\nis not `executable` or `callable`\n5. Mark Your method by `@test` decorator from PyUnit library\n    ```python\n    from unittest import TestCase\n    from pytheons.pyunit.decorators.test import test\n    \n    class MyFirstTest(TestCase):\n        @test\n        def when_fuel_size_is_30_then_cost_should_be_300(self):\n            fuel = 30\n            self.assertEqual(300, FuelCalcuator.calculate(fuel))\n    ```\n6. Run test by `pyunit run` or run  `.py` file to run all tests\n\n### Attention! - Not full implement yet\n\n-  `--suites` argument for `pyunit run` and `test suites runner`",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pytheons/pyunit",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytheons.pyunit",
    "package_url": "https://pypi.org/project/pytheons.pyunit/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytheons.pyunit/",
    "project_urls": {
      "Homepage": "https://github.com/pytheons/pyunit"
    },
    "release_url": "https://pypi.org/project/pytheons.pyunit/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "pyunit is wrapper for PyUnit (uniittest) framework with one important extension (syntax suger) by `@ test` decorator",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8337445,
  "releases": {
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77add233eb3a122648b33cffa51883140438fd5f5c0ed69ac23abf18242b197f",
          "md5": "634a2c868e71fb1347d91fe902425d0f",
          "sha256": "1351f58eb3f4aefd1be1837a8391ae06cffadc736a98343c8fbe291d6d3f5fff"
        },
        "downloads": -1,
        "filename": "pytheons.pyunit-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "634a2c868e71fb1347d91fe902425d0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7091,
        "upload_time": "2020-10-04T16:19:57",
        "upload_time_iso_8601": "2020-10-04T16:19:57.846546Z",
        "url": "https://files.pythonhosted.org/packages/77/ad/d233eb3a122648b33cffa51883140438fd5f5c0ed69ac23abf18242b197f/pytheons.pyunit-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77add233eb3a122648b33cffa51883140438fd5f5c0ed69ac23abf18242b197f",
        "md5": "634a2c868e71fb1347d91fe902425d0f",
        "sha256": "1351f58eb3f4aefd1be1837a8391ae06cffadc736a98343c8fbe291d6d3f5fff"
      },
      "downloads": -1,
      "filename": "pytheons.pyunit-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "634a2c868e71fb1347d91fe902425d0f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7091,
      "upload_time": "2020-10-04T16:19:57",
      "upload_time_iso_8601": "2020-10-04T16:19:57.846546Z",
      "url": "https://files.pythonhosted.org/packages/77/ad/d233eb3a122648b33cffa51883140438fd5f5c0ed69ac23abf18242b197f/pytheons.pyunit-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}