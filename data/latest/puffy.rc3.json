{
  "info": {
    "author": "Nicolas Dao",
    "author_email": "nicolas.dao@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PUFFY\n\nA collection of modules with zero-dependencies to help manage common programming tasks.\n\n```\npip install puffy\n```\n\nUsage examples:\n\n```python\nfrom puffy.error import catch_errors, StackedException\n\n# This function will never fail. Instead, the error is safely caught.\n@catch_errors\ndef fail():\n    raise Exception(\"Failed\")\n    return \"yes\"\n\nerr, resp = fail() # `err` and `resp` are respectively None and Object when the function is successull. Otherwise, they are respectively StackedException and None.\n```\n\n```python\nfrom puffy.object import JSON as js\n\nobj = js({ 'hello':'world' })\nobj['person']['name'] = 'Nic' # Notice it does not fail.\nobj.s('address.line1', 'Magic street') # Sets obj.address.line1 to 'Magic street' and return 'Magic street'\n```\n\n# Table of contents\n\n> * [APIs](#apis)\n>\t- [`error`](#error)\n>\t\t- [Basic `error` APIs](#basic-error-apis)\n>\t\t- [Nested errors and error stack](#nested-errors-and-error-stack)\n>\t- [`object`](#object)\n>\t\t- [`JSON` API](#json-api)\n> * [Dev](#dev)\n>\t- [CLI commands](#cli-commands)\n>\t- [Install dependencies with `easypipinstall`](#install-dependencies-with-easypipinstall)\n>\t- [Linting, formatting and testing](#linting-formatting-and-testing)\n>\t\t- [Ignoring `flake8` errors](#ignoring-flake8-errors)\n>\t\t- [Skipping tests](#skipping-tests)\n>\t\t- [Executing a specific test only](#executing-a-specific-test-only)\n>\t- [Building and distributing this package](#building-and-distributing-this-package)\n> * [FAQ](#faq)\n> * [References](#references)\n> * [License](#license)\n\n# APIs\n## `error`\n\nThe `error` module exposes the following APIs:\n- `catch_errors`: A higher-order function that returns a function that always return a tuple `(error, response)`. If the `error` is `None`, then the function did not fail. Otherwise, it did and the `error` object can be used to build an error stack.\n- `StackedException`: A class that inherits from `Exception`. Use it to stack errors.\n\n### Basic `error` APIs\n\n```python\nfrom puffy.error import catch_errors, StackedException\n\n# This function will never fail. Instead, the error is safely caught.\n@catch_errors\ndef fail():\n    raise Exception(\"Failed\")\n    return \"yes\"\n\nerr, resp = fail() \n\nprint(resp) # None\nprint(type(err)) # <class 'src.puffy.error.StackedException'> which inherits from Exception\nprint(str(err)) # Failed\nprint(len(err.stack)) # 1\nprint(str(err.stack[0])) # Failed\nprint(err.stack[0].__traceback__) # <traceback object at 0x7fc69066bf00>\n\n# Use the `strinfigy` method to extract the full error stack details.\nprint(err.strinfigy()) \n# error: Failed\n#   File \"blablabla.py\", line 72, in safe_exec\n#     data = ffn(*args, **named_args)\n#   File \"blablabla.py\", line 28, in fail\n#     raise Exception(\"Failed\")\n```\n\n### Nested errors and error stack\n\n```python\nfrom puffy.error import catch_errors, StackedException\n\n# This function will never fail. Instead, the error is safely caught.\n@catch_errors(\"Should fail\")\ndef fail():\n    err, resp = fail_again()\n    if err:\n        raise StackedException(\"As expected, it failed!\", err) \n        # StackedException accepts an arbitrary number of inputs of type str or Exception:\n        # \t- raise StackedException(err) \n        # \t- raise StackedException('This', 'is', 'a new error') \n    return \"yes\"\n\n@catch_errors(\"Should fail again\")\ndef fail_again():\n    raise Exception(\"Failed again\")\n    return \"yes\"\n\nerr, resp = fail()\n\nprint(len(err.stack)) # 4\nprint(str(err.stack[0])) # Should fail\nprint(str(err.stack[1])) # As expected, it failed!\nprint(str(err.stack[2])) # Should fail again\nprint(str(err.stack[3])) # Failed again\n\n# Use the `strinfigy` method to extract the full error stack details.\nprint(err.strinfigy()) \n# error: Should fail\n#   File \"blablabla.py\", line 72, in fail\n# error: As expected, it failed!\n#   File \"blablabla.py\", line 72, in fail\n# error: Should fail again\n#   File \"blablabla.py\", line 72, in fail\n# error: Failed again\n#   File \"blablabla.py\", line 72, in safe_exec\n#     data = ffn(*args, **named_args)\n#   File \"blablabla.py\", line 28, in fail_again\n#     raise Exception(\"Failed\")\n```\n\n## `object`\n### `JSON` API\n\n```python\nfrom puffy.object import JSON as js\n\nobj = js({ 'hello':'world' })\nobj['person']['name'] = 'Nic' # Notice it does not fail.\nobj.s('address.line1', 'Magic street') # Sets obj.address.line1 to 'Magic street' and return 'Magic street'\n\nprint(obj['person']['name']) # Nic\nprint(obj) # { 'hello':'world', 'person': { 'name': 'Nic' } }\nprint(obj.g('address.line1')) # Magic street\nprint(obj) # { 'hello':'world', 'person': { 'name': None }, 'address': { 'line1': 'Magic street' } }\nprint(obj.g('address.line2')) # Nonce\nprint(obj) # { 'hello':'world', 'person': { 'name': None }, 'address': { 'line1': 'Magic street', line2: None } }\n```\n\n# Dev\n## CLI commands\n\n`make` commands:\n\n| Command | Description |\n|:--------|:------------|\n| `make b` | Builds the package. |\n| `make p` | Publish the package to https://pypi.org. |\n| `make bp` | Builds the package and then publish it to https://pypi.org. |\n| `make bi` | Builds the package and install it locally (`pip install -e .`). |\n| `make install` | Install the dependencies defined in the `requirements.txt`. This file contains all the dependencies (i.e., both prod and dev). |\n| `make install-prod` | Install the dependencies defined in the `prod-requirements.txt`. This file only contains the production dependencies. |\n| `make n` | Starts a Jupyter notebook for this project. |\n| `make t` | Formats adnd then lints the project. |\n| `easyi numpy` | Instals `numpy` and update `setup.cfg`, `prod-requirements.txt` and `requirements.txt`. |\n| `easyi flake8 -D` | Instals `flake8` and update `setup.cfg` and `requirements.txt`. |\n| `easyu numpy` | Uninstals `numpy` and update `setup.cfg`, `prod-requirements.txt` and `requirements.txt`. |\n\n## Install dependencies with `easypipinstall`\n\n`easypipinstall` adds two new CLI utilities: `easyi` (install) and `easyu` (uninstall).\n\nExamples:\n```\neasyi numpy\n```\n\nThis installs `numpy` (via `pip install`) then automatically updates the following files:\n- `setup.cfg` (WARNING: this file must already exists):\n\t```\n\t[options]\n\tinstall_requires = \n\t\tnumpy\n\t```\n- `requirements.txt` and `prod-requirements.txt`\n\n```\neasyi flake8 black -D\n```\n\nThis installs `flake8` and `black` (via `pip install`) then automatically updates the following files:\n- `setup.cfg` (WARNING: this file must already exists):\n\t```\n\t[options.extras_require]\n\tdev = \n\t\tblack\n\t\tflake8\n\t```\n- `requirements.txt` only, as those dependencies are installed for development purposes only.\n\n```\neasyu flake8\n```\n\nThis uninstalls `flake8` as well as all its dependencies. Those dependencies are uninstalled only if they are not used by other project dependencies. The `setup.cfg` and `requirements.txt` are automatically updated accordingly.\n\n## Linting, formatting and testing\n\n```\nmake t\n```\n\nThis command runs the following three python executables:\n\n```\nblack ./\nflake8 ./\npytest --capture=no --verbose $(testpath)\n```\n\n- `black` formats all the `.py` files, while `flake8` lints them. \n- `black` is configured in the `pyproject.toml` file under the `[tool.black]` section.\n- `flake8` is configured in the `setup.cfg` file under the `[flake8]` section.\n- `pytest` runs all the `.py` files located under the `tests` folder. The meaning of each option is as follow:\n\t- `--capture=no` allows the `print` function to send outputs to the terminal. \n\t- `--verbose` displays each test. Without it, the terminal would only display the count of how many passed and failed.\n\t- `$(testpath)` references the `testpath` variable. This variable is set to `tests` (i.e., the `tests` folder) by default. This allows to override this default variable with something else (e.g., a specific test to only run that one).\n\n### Ignoring `flake8` errors\n\nThis project is pre-configured to ignore certain `flake8` errors. To add or remove `flake8` errors, update the `extend-ignore` property under the `[flake8]` section in the `setup.cfg` file.\n\n### Skipping tests\n\nIn your test file, add the `@pytest.mark.skip()` decorator. For example:\n\n```python\nimport pytest\n\n@pytest.mark.skip()\ndef test_self_describing_another_test_name():\n\t# ... your test here\n```\n\n### Executing a specific test only\n\nOne of the output of the `make t` command is list of all the test that were run (PASSED and FAILED). For example:\n\n```\ntests/error/test_catch_errors.py::test_catch_errors_basic PASSED\ntests/error/test_catch_errors.py::test_catch_errors_wrapped PASSED\ntests/error/test_catch_errors.py::test_catch_errors_nested_errors PASSED\ntests/error/test_catch_errors.py::test_catch_errors_StackedException_arbitrary_inputs FAILED\n```\n\nTo execute a specific test only, add the `testpath` option with the test path. For example, to execute the only FAILED test in the example above, run this command:\n\n```\nmake t testpath=tests/error/test_catch_errors.py::test_catch_errors_StackedException_arbitrary_inputs\n```\n\n## Building and distributing this package\n\n> Tl;dr, `make bp` builds and publishes your package to https://pypi.org.\n\nTo build your package, run:\n\n```\nmake b\n```\n\nThis command is a wrapper around `python3 -m build`.\n\nTo build and publish your package to https://pypi.org, run:\n\n```\nmake p\n```\n\nThis command is a wrapper around the following commands:\n\n```\npython3 -m build; \\\ntwine upload dist/*\n```\n\nThose two steps have been bundled in a single command:\n\n```\nmake bp\n```\n\nTo test your package locally before deploying it to https://pypi.org, you can run build and install it locally with this command:\n\n```\nmake bi\n```\n\nThis command buils the package and follows with `pip install -e .`.\n\n# FAQ\n\n# References\n\n# License\n\nBSD 3-Clause License\n\n```\nCopyright (c) 2019-2023, Cloudless Consulting Pty Ltd\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nicolasdao/pypuffy",
    "keywords": "util",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "puffy",
    "package_url": "https://pypi.org/project/puffy/",
    "platform": null,
    "project_url": "https://pypi.org/project/puffy/",
    "project_urls": {
      "Homepage": "https://github.com/nicolasdao/pypuffy"
    },
    "release_url": "https://pypi.org/project/puffy/0.1.2/",
    "requires_dist": [
      "black ; extra == 'dev'",
      "build ; extra == 'dev'",
      "easypipinstall ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "twine ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "A collection of modules with zero-dependencies to help manage common programming tasks.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17059103,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb33799f454df8204686194d3c3ed79307e9304c54d4dd0fd0f224669071eccc",
          "md5": "993f4c594b873d0ed8f254469cbe2877",
          "sha256": "1837a4f1103512f754cd2da0ef19ea7b7ed68dcf42f9b19ba7dd99edff7fde14"
        },
        "downloads": -1,
        "filename": "puffy-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "993f4c594b873d0ed8f254469cbe2877",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 5869,
        "upload_time": "2023-02-26T16:25:59",
        "upload_time_iso_8601": "2023-02-26T16:25:59.097148Z",
        "url": "https://files.pythonhosted.org/packages/cb/33/799f454df8204686194d3c3ed79307e9304c54d4dd0fd0f224669071eccc/puffy-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a66fe2c5f5f48b3ced509ec7aee2025515f0df90228aca476cf9209756b0ee0",
          "md5": "08bec8bbb9e59a75baa5db74aa94fa6b",
          "sha256": "e208bdd8fbdcba10c1fb8e875175ba720446c3463fb3a7aafdebfbd585a6eff5"
        },
        "downloads": -1,
        "filename": "puffy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "08bec8bbb9e59a75baa5db74aa94fa6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 5665,
        "upload_time": "2023-02-26T16:26:01",
        "upload_time_iso_8601": "2023-02-26T16:26:01.162727Z",
        "url": "https://files.pythonhosted.org/packages/5a/66/fe2c5f5f48b3ced509ec7aee2025515f0df90228aca476cf9209756b0ee0/puffy-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10dc9e4ccd8e7e7feec9784b36f76d6c4095492a228d86a3ea21e6e1773a404f",
          "md5": "86e6cf7086680c9da7a729ec5533b434",
          "sha256": "50d7d634371ff45d78cf5cb1c80e98e2af1c574e3a5d30d15be143438200a30a"
        },
        "downloads": -1,
        "filename": "puffy-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86e6cf7086680c9da7a729ec5533b434",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8075,
        "upload_time": "2023-02-27T02:27:53",
        "upload_time_iso_8601": "2023-02-27T02:27:53.000733Z",
        "url": "https://files.pythonhosted.org/packages/10/dc/9e4ccd8e7e7feec9784b36f76d6c4095492a228d86a3ea21e6e1773a404f/puffy-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a1fdd041af76db46bea4daf8bf9bc70a27e475d3cdb3575a9be9f0a9564a403",
          "md5": "655aae94de2d42f142022768eb4c6695",
          "sha256": "bdf09c19a0a57efbc2031b2d1f180d46865ce5635f7bc12fbcf536cc3d154fea"
        },
        "downloads": -1,
        "filename": "puffy-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "655aae94de2d42f142022768eb4c6695",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10561,
        "upload_time": "2023-02-27T02:27:54",
        "upload_time_iso_8601": "2023-02-27T02:27:54.974351Z",
        "url": "https://files.pythonhosted.org/packages/3a/1f/dd041af76db46bea4daf8bf9bc70a27e475d3cdb3575a9be9f0a9564a403/puffy-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bd0dbef5eaa80ff4492859e35c51ef78e6027e82708f25b1173523e3ad12da7",
          "md5": "e7b500b2954858c591570963710625fe",
          "sha256": "9503317a1fc0a3cb5b49f306c1367fd45ccfd4ce217ea0aa0fc36870573f1e5a"
        },
        "downloads": -1,
        "filename": "puffy-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7b500b2954858c591570963710625fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 8151,
        "upload_time": "2023-02-27T03:08:25",
        "upload_time_iso_8601": "2023-02-27T03:08:25.845323Z",
        "url": "https://files.pythonhosted.org/packages/2b/d0/dbef5eaa80ff4492859e35c51ef78e6027e82708f25b1173523e3ad12da7/puffy-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12230cd8261661ce9403807a55288731edb5177047c379424e9a8ff20e3a412f",
          "md5": "ad5135569870ddf2319ad85fbaf760f9",
          "sha256": "1689ca4e3a8732b2e128f33bed015c9d65260f7a9de3ad799e82dcbf011a67c9"
        },
        "downloads": -1,
        "filename": "puffy-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ad5135569870ddf2319ad85fbaf760f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10566,
        "upload_time": "2023-02-27T03:08:27",
        "upload_time_iso_8601": "2023-02-27T03:08:27.973048Z",
        "url": "https://files.pythonhosted.org/packages/12/23/0cd8261661ce9403807a55288731edb5177047c379424e9a8ff20e3a412f/puffy-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2bd0dbef5eaa80ff4492859e35c51ef78e6027e82708f25b1173523e3ad12da7",
        "md5": "e7b500b2954858c591570963710625fe",
        "sha256": "9503317a1fc0a3cb5b49f306c1367fd45ccfd4ce217ea0aa0fc36870573f1e5a"
      },
      "downloads": -1,
      "filename": "puffy-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e7b500b2954858c591570963710625fe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 8151,
      "upload_time": "2023-02-27T03:08:25",
      "upload_time_iso_8601": "2023-02-27T03:08:25.845323Z",
      "url": "https://files.pythonhosted.org/packages/2b/d0/dbef5eaa80ff4492859e35c51ef78e6027e82708f25b1173523e3ad12da7/puffy-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12230cd8261661ce9403807a55288731edb5177047c379424e9a8ff20e3a412f",
        "md5": "ad5135569870ddf2319ad85fbaf760f9",
        "sha256": "1689ca4e3a8732b2e128f33bed015c9d65260f7a9de3ad799e82dcbf011a67c9"
      },
      "downloads": -1,
      "filename": "puffy-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ad5135569870ddf2319ad85fbaf760f9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10566,
      "upload_time": "2023-02-27T03:08:27",
      "upload_time_iso_8601": "2023-02-27T03:08:27.973048Z",
      "url": "https://files.pythonhosted.org/packages/12/23/0cd8261661ce9403807a55288731edb5177047c379424e9a8ff20e3a412f/puffy-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}