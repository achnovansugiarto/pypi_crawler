{
  "info": {
    "author": "rydb",
    "author_email": "rydb400@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n![](ROS2_easy.png) \n\n\n[![Github All Releases](https://img.shields.io/github/downloads/rydb/ROS2_easy/total.svg)]()\n\n- [Description](#description)\n- [Requirements](#requirements)\n- [Optional Requirements:](#optional-requirements)\n- [Installation](#installation)\n- [To demo](#to-demo)\n- [To use:](#to-use)\n- [Tools:](#tools)\n- [setup.py replacer:](#setuppy-replacer)\n- [launch file generator:](#launch-file-generator)\n- [ros2 enviorment runner:](#ros2-enviorment-runner)\n- [gazebo sdf loader(HELP NEEDED):](#gazebo-sdf-loaderhelp-needed)\n- [(FREECAD MODELS ONLY \\& WIP): model -\\> urdf converter](#freecad-models-only--wip-model---urdf-converter)\n\n\n## Description\n\nThis is a collection of tools to remove ROS2's worflow hurdles for python3/colcon based projects\n\n## Requirements\n\n- [ROS2](https://docs.ros.org/en/foxy/Installation.html)(only tested on foxy)\n- Bash\n- RVIZ2\n- colcon\n\n## Optional Requirements:\n\n- [snapcraft](https://snapcraft.io/snapcraft) + FreeCAD(if using the URDF converter)\n## Installation\n\n```bash\npip install ros2_easy\n```\nif using the model -> urdf -> sdf converter for FreeCAD as well:\n```bash\nsudo snap install freecad\nfreecad.pip install pycollada\nfreecad.pip install trimesh\n```\n\n## To demo\n\n```\nrun simple_run_caller.py\n```\n\n## To use:\n\n1: ensure your ROS2 file structure is in the following format:\n\n```\n/project_dir\n\t/src\n\t\t/example_pkg\n\t\t\t/rviz\n\t\t\t\texample_rviz.rviz\n\t\t\t/launch\n\t\t\t/example_pkg\n\t\t\t\t__init__.py\n\t\t\t\tsample_code.py\n\t\t\t/urdf\n\n\t\t\t/models\n\t\t\t\t(OPTIONAL)\n\t\t\t\tFreeCAD_model.FCstd\n\t\t\t\t\n\t\t\tpackage.xml\n\t\t\tsetup.cfg\n\t\t\tsetup.py\n\t\t/other_pkg1\n\t\t/other_pkg2\n\tsimple_run_caller.py\n\texport_model_to_urdf.py  #if using the FreeCAD urdf_converter\n```\n2: define your packages in terms of ros2_easy ```Package``` objects. E.G:\n\n```python\n#for example package\nexample_pkg = Package(\"example_pkg\", \"sample_code\", build=True, entry_point=\"main\")\n\n#for rviz(to be moved to common_packages later)\nrviz2_config_name = \"rviz_config_test.rviz\"\nrviz2_pkg = Package(\"rviz2\", \"rviz2\", config=Config(config_file_name=rviz2_config_name), optional_launch_file_node_args= {\"arguments\": \"['-d', share_directory + '/rviz/%s']\" % rviz2_config_name})\n```\n\n3: define your ros2 project enviorment as a ros2_easy ```launch_configuration```. E.G:\n\n```python\nrviz_env_conf = launch_configuration(\n    config_store_pkg=example_pkg,\n    launch_file=\"example_launch.py\",\n    urdf_file_name=\"FreeCAD_model\",\n    packages_to_run=[example_pkg, rviz2_pkg, rqt_pkg, robot_state_publisher_pkg],\n    )\n\t\"\"\"launch configuration for testing sample_code.py\"\"\"\"\n```\n\n4: run the tools you'd like to use\n\n```python\n#add all folders in example_pkg to .install folder\nsimple_run.replace_setup_py(rviz_env_conf)\n#generate a launch file to run based on launch_configuration\nsimple_run.generate_launch_py(rviz_env_conf)\n#(OPTIONAL AND WIP) convert a FreeCAD model defined in export_model_to_urdf.py\n# and convert from model -> urdf\nsimple_run.create_urdf_of_model(rviz_env_conf)\n# run launch configuration\nsimple_run.construct_bash_script(rviz_env_conf)\n\n\n```\n\n## Tools:\n\n## setup.py replacer:\n\t\t\nwhen ran, the setup.py replacer will replace a package's old setup.py with one which adds every sub folder in your config storing package to PATHS, this way, you don't need to manually edit setup.py. Call this function, set its variables, and no longer worry about configs not being added to PATHS (should make this backup old one to an archive folder to make this not accidently destructive..) (also need to make it so folders inside folders get added...)\n\n## launch file generator:\n\nstream-line the process of creating a launch file by avoiding editing launch files them selves and instead using the launch_configuration class. simply define your packages/external programs to run with the package class/CMD_program classes respectively, add them to your launch_configuration, and the generator will make a launch file to accomidate them.\n\t\t\n## ros2 enviorment runner:\n\t\t\nwhen ran will: \n\n- delete old build relics\n\n- generate a .sh bash script which sources ROS2\n\n- colcon builds packages you've defined in your launch_configuration(clarify on this later),\n\n- sources your built packages\n\n- runs your generated launch file from the launch file generator\n\n## gazebo sdf loader(HELP NEEDED):\n\nconverts your urdf to sdf and loads it in an empty gazebo world(add more details/features here)\n\n<span style=\"color:red\"> help needed here to better gazebo integration with this library!  </span>\n\n## (FREECAD MODELS ONLY & WIP): model -> urdf converter\n\nby moving the `export_model_to_urdf.py` script next to your simple_run caller script, and calling \n```python\n simple_run.create_urdf_of_model(<your_luanch_configuration>) \n```\nand hard coding parts(as seen in <span style=\"color:blue\"> !!!insert model_pkg example here!!! </span>of the model via ```Model``` class, you can convert a FreeCAD model to a urdf.\n\nA graphical version of this tool is TODO\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rydb/ROS2_easy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ros2-easy",
    "package_url": "https://pypi.org/project/ros2-easy/",
    "platform": null,
    "project_url": "https://pypi.org/project/ros2-easy/",
    "project_urls": {
      "Homepage": "https://github.com/rydb/ROS2_easy"
    },
    "release_url": "https://pypi.org/project/ros2-easy/0.4/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A collection of tools to remove ROS2 worflow hurdles.",
    "version": "0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17101931,
  "releases": {
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd1f26344439ec77eff7fcfe90de7caf0cdaa76b02b875e254cd844a158c0835",
          "md5": "08f6568de57a94bb832dbe26ece68fc1",
          "sha256": "c64a3803cc9a23b92cd713a47a3f9f0d7f84f38b011378c0fff7b4f5dac6ae6d"
        },
        "downloads": -1,
        "filename": "ros2_easy-0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08f6568de57a94bb832dbe26ece68fc1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23365,
        "upload_time": "2023-02-28T22:04:10",
        "upload_time_iso_8601": "2023-02-28T22:04:10.896341Z",
        "url": "https://files.pythonhosted.org/packages/cd/1f/26344439ec77eff7fcfe90de7caf0cdaa76b02b875e254cd844a158c0835/ros2_easy-0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d797584834241654786d0dee6471f4a6cc13d24d229ed5d8ba816a1d6cf7508",
          "md5": "a1fe5e715db15676672eeea0467b8ae7",
          "sha256": "67e3dd82508b23dfc2ffc0cd3837237df1f3751a4322e48969272c783438fb38"
        },
        "downloads": -1,
        "filename": "ros2_easy-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a1fe5e715db15676672eeea0467b8ae7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 22567,
        "upload_time": "2023-02-28T22:04:13",
        "upload_time_iso_8601": "2023-02-28T22:04:13.198027Z",
        "url": "https://files.pythonhosted.org/packages/9d/79/7584834241654786d0dee6471f4a6cc13d24d229ed5d8ba816a1d6cf7508/ros2_easy-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd1f26344439ec77eff7fcfe90de7caf0cdaa76b02b875e254cd844a158c0835",
        "md5": "08f6568de57a94bb832dbe26ece68fc1",
        "sha256": "c64a3803cc9a23b92cd713a47a3f9f0d7f84f38b011378c0fff7b4f5dac6ae6d"
      },
      "downloads": -1,
      "filename": "ros2_easy-0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "08f6568de57a94bb832dbe26ece68fc1",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 23365,
      "upload_time": "2023-02-28T22:04:10",
      "upload_time_iso_8601": "2023-02-28T22:04:10.896341Z",
      "url": "https://files.pythonhosted.org/packages/cd/1f/26344439ec77eff7fcfe90de7caf0cdaa76b02b875e254cd844a158c0835/ros2_easy-0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9d797584834241654786d0dee6471f4a6cc13d24d229ed5d8ba816a1d6cf7508",
        "md5": "a1fe5e715db15676672eeea0467b8ae7",
        "sha256": "67e3dd82508b23dfc2ffc0cd3837237df1f3751a4322e48969272c783438fb38"
      },
      "downloads": -1,
      "filename": "ros2_easy-0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a1fe5e715db15676672eeea0467b8ae7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 22567,
      "upload_time": "2023-02-28T22:04:13",
      "upload_time_iso_8601": "2023-02-28T22:04:13.198027Z",
      "url": "https://files.pythonhosted.org/packages/9d/79/7584834241654786d0dee6471f4a6cc13d24d229ed5d8ba816a1d6cf7508/ros2_easy-0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}