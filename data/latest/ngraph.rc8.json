{
  "info": {
    "author": "Andrey Golovanov",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# NetGraph\n🚧 Work in progress! 🚧\n\n![Python-test](https://github.com/networmix/NetGraph/workflows/Python-test/badge.svg?branch=main)\n\n- [Introduction](#introduction)\n- [Use Case Examples](#use-case-examples)\n  - [Calculate MaxFlow in a graph](#calculate-maxflow-in-a-graph)\n  - [Place traffic demands on a graph](#place-traffic-demands-on-a-graph)\n  - [Perform basic capacity analysis](#perform-basic-capacity-analysis)\n\n---\n\n## Introduction\nThis library is developed to help with network modeling and capacity analysis use-cases. The graph implementation in this library is largely compatible with [NetworkX](https://networkx.org/) while making edges first-class entities. Making edges explicitly addressable is important in traffic engineering applications.\n\nThe lib provides the following main primitives:\n- [MultiDiGraph](https://github.com/networmix/NetGraph/blob/07abd775c17490a9ffe102f9f54a871ea9772a96/ngraph/graph.py#L14)\n- [Demand](https://github.com/networmix/NetGraph/blob/07abd775c17490a9ffe102f9f54a871ea9772a96/ngraph/demand.py#L108)\n- [FlowPolicy](https://github.com/networmix/NetGraph/blob/07abd775c17490a9ffe102f9f54a871ea9772a96/ngraph/demand.py#L37)\n\nBesides, it provides a number of path finding and capacity calculation functions that can be used independently.\n\n---\n## Use Case Examples\n### Calculate MaxFlow in a graph\n- Calculate MaxFlow across all possible paths between the source and destination nodes\n    ```python\n    # Required imports\n    from ngraph.graph import MultiDiGraph\n    from ngraph.algorithms.max_flow import calc_max_flow\n\n    # Create a graph with parallel edges\n    # Metric:\n    #      [1,1]      [1,1]\n    #   ┌────────►B─────────┐\n    #   │                   │\n    #   │                   ▼\n    #   A                   C\n    #   │                   ▲\n    #   │   [2]        [2]  │\n    #   └────────►D─────────┘\n    #\n    # Capacity:\n    #      [1,2]      [1,2]\n    #   ┌────────►B─────────┐\n    #   │                   │\n    #   │                   ▼\n    #   A                   C\n    #   │                   ▲\n    #   │   [3]        [3]  │\n    #   └────────►D─────────┘\n    g = MultiDiGraph()\n    g.add_edge(\"A\", \"B\", metric=1, capacity=1)\n    g.add_edge(\"B\", \"C\", metric=1, capacity=1)\n    g.add_edge(\"A\", \"B\", metric=1, capacity=2)\n    g.add_edge(\"B\", \"C\", metric=1, capacity=2)\n    g.add_edge(\"A\", \"D\", metric=2, capacity=3)\n    g.add_edge(\"D\", \"C\", metric=2, capacity=3)\n\n    # Calculate MaxFlow between the source and destination nodes\n    max_flow = calc_max_flow(g, \"A\", \"C\")\n\n    # We can verify that the result is as expected\n    assert max_flow.max_total_flow == 6.0\n    assert max_flow.max_single_flow == 3.0\n    assert max_flow.max_balanced_flow == 2.0\n    # Note that max_balanced_flow considers shortests paths only\n    ```\n- Calculate MaxFlow leveraging only the shortest paths between the source and destination nodes\n    ```python\n    # Required imports\n    from ngraph.graph import MultiDiGraph\n    from ngraph.algorithms.max_flow import calc_max_flow\n\n    # Create a graph with parallel edges\n    # Metric:\n    #      [1,1]      [1,1]\n    #   ┌────────►B─────────┐\n    #   │                   │\n    #   │                   ▼\n    #   A                   C\n    #   │                   ▲\n    #   │   [2]        [2]  │\n    #   └────────►D─────────┘\n    #\n    # Capacity:\n    #      [1,2]      [1,2]\n    #   ┌────────►B─────────┐\n    #   │                   │\n    #   │                   ▼\n    #   A                   C\n    #   │                   ▲\n    #   │   [3]        [3]  │\n    #   └────────►D─────────┘\n    g = MultiDiGraph()\n    g.add_edge(\"A\", \"B\", metric=1, capacity=1)\n    g.add_edge(\"B\", \"C\", metric=1, capacity=1)\n    g.add_edge(\"A\", \"B\", metric=1, capacity=2)\n    g.add_edge(\"B\", \"C\", metric=1, capacity=2)\n    g.add_edge(\"A\", \"D\", metric=2, capacity=3)\n    g.add_edge(\"D\", \"C\", metric=2, capacity=3)\n\n    # Calculate MaxFlow between the source and destination nodes\n    max_flow = calc_max_flow(g, \"A\", \"C\", shortest_path=True)\n\n    # We can verify that the result is as expected\n    assert max_flow.max_total_flow == 3.0\n    assert max_flow.max_single_flow == 2.0\n    assert max_flow.max_balanced_flow == 2.0\n    # Note that max_balanced_flow considers shortests paths only\n    ```\n### Place traffic demands on a graph\n- Place traffic demands leveraging all possible paths in a graph\n    ```python\n    # Required imports\n    from ngraph.graph import MultiDiGraph\n    from ngraph.algorithms.common import init_flow_graph\n    from ngraph.demand import FlowPolicyConfig, Demand\n    from ngraph.flow import FlowIndex\n\n    # Create a graph\n    # Metric:\n    #     [1]        [1]\n    #   ┌──────►B◄──────┐\n    #   │               │\n    #   │               │\n    #   │               │\n    #   ▼      [1]      ▼\n    #   A◄─────────────►C\n    #\n    # Capacity:\n    #     [15]      [15]\n    #   ┌──────►B◄──────┐\n    #   │               │\n    #   │               │\n    #   │               │\n    #   ▼      [5]      ▼\n    #   A◄─────────────►C\n    g = MultiDiGraph()\n    g.add_edge(\"A\", \"B\", metric=1, capacity=15, label=\"1\")\n    g.add_edge(\"B\", \"A\", metric=1, capacity=15, label=\"1\")\n    g.add_edge(\"B\", \"C\", metric=1, capacity=15, label=\"2\")\n    g.add_edge(\"C\", \"B\", metric=1, capacity=15, label=\"2\")\n    g.add_edge(\"A\", \"C\", metric=1, capacity=5, label=\"3\")\n    g.add_edge(\"C\", \"A\", metric=1, capacity=5, label=\"3\")\n\n    # Initialize a flow graph\n    r = init_flow_graph(g)\n\n    # Create traffic demands\n    demands = [\n        Demand.create(\n            \"A\",\n            \"B\",\n            10,\n            flow_policy_config=FlowPolicyConfig.TE_UCMP_UNLIM,\n            label=\"D_1\",\n        ),\n        Demand.create(\n            \"B\",\n            \"A\",\n            10,\n            flow_policy_config=FlowPolicyConfig.TE_UCMP_UNLIM,\n            label=\"D_1\",\n        ),\n        Demand.create(\n            \"B\",\n            \"C\",\n            10,\n            flow_policy_config=FlowPolicyConfig.TE_UCMP_UNLIM,\n            label=\"D_2\",\n        ),\n        Demand.create(\n            \"C\",\n            \"B\",\n            10,\n            flow_policy_config=FlowPolicyConfig.TE_UCMP_UNLIM,\n            label=\"D_2\",\n        ),\n        Demand.create(\n            \"A\",\n            \"C\",\n            10,\n            flow_policy_config=FlowPolicyConfig.TE_UCMP_UNLIM,\n            label=\"D_3\",\n        ),\n        Demand.create(\n            \"C\",\n            \"A\",\n            10,\n            flow_policy_config=FlowPolicyConfig.TE_UCMP_UNLIM,\n            label=\"D_3\",\n        ),\n    ]\n\n    # Place traffic demands onto the flow graph\n    for demand in demands:\n        demand.place(r)\n\n    # We can verify that all demands were placed as expected\n    for demand in demands:\n        assert demand.placed_demand == 10\n\n    assert r.get_edges() == {\n        0: (\n            \"A\",\n            \"B\",\n            0,\n            {\n                \"capacity\": 15,\n                \"flow\": 15.0,\n                \"flows\": {\n                    FlowIndex(src_node=\"A\", dst_node=\"B\", label=\"D_1\", flow_id=0): 10.0,\n                    FlowIndex(src_node=\"A\", dst_node=\"C\", label=\"D_3\", flow_id=1): 5.0,\n                },\n                \"label\": \"1\",\n                \"metric\": 1,\n            },\n        ),\n        1: (\n            \"B\",\n            \"A\",\n            1,\n            {\n                \"capacity\": 15,\n                \"flow\": 15.0,\n                \"flows\": {\n                    FlowIndex(src_node=\"B\", dst_node=\"A\", label=\"D_1\", flow_id=0): 10.0,\n                    FlowIndex(src_node=\"C\", dst_node=\"A\", label=\"D_3\", flow_id=1): 5.0,\n                },\n                \"label\": \"1\",\n                \"metric\": 1,\n            },\n        ),\n        2: (\n            \"B\",\n            \"C\",\n            2,\n            {\n                \"capacity\": 15,\n                \"flow\": 15.0,\n                \"flows\": {\n                    FlowIndex(src_node=\"A\", dst_node=\"C\", label=\"D_3\", flow_id=1): 5.0,\n                    FlowIndex(src_node=\"B\", dst_node=\"C\", label=\"D_2\", flow_id=0): 10.0,\n                },\n                \"label\": \"2\",\n                \"metric\": 1,\n            },\n        ),\n        3: (\n            \"C\",\n            \"B\",\n            3,\n            {\n                \"capacity\": 15,\n                \"flow\": 15.0,\n                \"flows\": {\n                    FlowIndex(src_node=\"C\", dst_node=\"A\", label=\"D_3\", flow_id=1): 5.0,\n                    FlowIndex(src_node=\"C\", dst_node=\"B\", label=\"D_2\", flow_id=0): 10.0,\n                },\n                \"label\": \"2\",\n                \"metric\": 1,\n            },\n        ),\n        4: (\n            \"A\",\n            \"C\",\n            4,\n            {\n                \"capacity\": 5,\n                \"flow\": 5.0,\n                \"flows\": {\n                    FlowIndex(src_node=\"A\", dst_node=\"C\", label=\"D_3\", flow_id=0): 5.0\n                },\n                \"label\": \"3\",\n                \"metric\": 1,\n            },\n        ),\n        5: (\n            \"C\",\n            \"A\",\n            5,\n            {\n                \"capacity\": 5,\n                \"flow\": 5.0,\n                \"flows\": {\n                    FlowIndex(src_node=\"C\", dst_node=\"A\", label=\"D_3\", flow_id=0): 5.0\n                },\n                \"label\": \"3\",\n                \"metric\": 1,\n            },\n        ),\n    }\n    ```\n\n### Perform basic capacity analysis\n- Place traffic demands and analyze the results\n    ```python\n    from ngraph.graph import MultiDiGraph\n    from ngraph.algorithms.common import init_flow_graph\n    from ngraph.demand import FlowPolicyConfig, FLOW_POLICY_MAP, Demand\n    from ngraph.analyser import Analyser\n\n\n    # Create a graph\n    # Metric:\n    #     [1]        [1]\n    #   ┌──────►B◄──────┐\n    #   │               │\n    #   │               │\n    #   │               │\n    #   ▼      [1]      ▼\n    #   A◄─────────────►C\n    #\n    # Capacity:\n    #     [15]      [15]\n    #   ┌──────►B◄──────┐\n    #   │               │\n    #   │               │\n    #   │               │\n    #   ▼      [5]      ▼\n    #   A◄─────────────►C\n    g = MultiDiGraph()\n    g.add_edge(\"A\", \"B\", metric=1, capacity=15, label=\"1\")\n    g.add_edge(\"B\", \"A\", metric=1, capacity=15, label=\"1\")\n    g.add_edge(\"B\", \"C\", metric=1, capacity=15, label=\"2\")\n    g.add_edge(\"C\", \"B\", metric=1, capacity=15, label=\"2\")\n    g.add_edge(\"A\", \"C\", metric=1, capacity=5, label=\"3\")\n    g.add_edge(\"C\", \"A\", metric=1, capacity=5, label=\"3\")\n\n    # Initialize a flow graph\n    r = init_flow_graph(g)\n\n    # Create traffic demands\n    demands = [\n        Demand(\n            \"A\",\n            \"B\",\n            10,\n            FLOW_POLICY_MAP[FlowPolicyConfig.ALL_PATHS_PROPORTIONAL],\n            label=\"D_1\",\n        ),\n        Demand(\n            \"B\",\n            \"A\",\n            10,\n            FLOW_POLICY_MAP[FlowPolicyConfig.ALL_PATHS_PROPORTIONAL],\n            label=\"D_1\",\n        ),\n        Demand(\n            \"B\",\n            \"C\",\n            10,\n            FLOW_POLICY_MAP[FlowPolicyConfig.ALL_PATHS_PROPORTIONAL],\n            label=\"D_2\",\n        ),\n        Demand(\n            \"C\",\n            \"B\",\n            10,\n            FLOW_POLICY_MAP[FlowPolicyConfig.ALL_PATHS_PROPORTIONAL],\n            label=\"D_2\",\n        ),\n        Demand(\n            \"A\",\n            \"C\",\n            10,\n            FLOW_POLICY_MAP[FlowPolicyConfig.ALL_PATHS_PROPORTIONAL],\n            label=\"D_3\",\n        ),\n        Demand(\n            \"C\",\n            \"A\",\n            10,\n            FLOW_POLICY_MAP[FlowPolicyConfig.ALL_PATHS_PROPORTIONAL],\n            label=\"D_3\",\n        ),\n        ]\n\n    # Place traffic demands onto the flow graph\n    for demand in demands:\n        demand.place(r)\n\n    # Analayze graph and demands\n    analyser = Analyser(r, demands)\n    analyser.analyse()\n\n    # We can check the analysis results\n    assert analyser.demand_data[demands[0]].total_edge_cost_flow_product == 10.0\n    assert analyser.demand_data[demands[0]].total_volume == 10.0\n    assert analyser.demand_data[demands[0]].placed_demand == 10.0\n    assert analyser.demand_data[demands[0]].unsatisfied_demand == 0\n\n    assert analyser.graph_data.total_edge_cost_volume_product == 70.0\n    assert analyser.graph_data.total_capacity == 70.0\n    assert analyser.graph_data.total_flow == 70.0\n    assert analyser.graph_data.avg_capacity_utilization == 1.0\n    ```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/networmix/netgraph",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ngraph",
    "package_url": "https://pypi.org/project/ngraph/",
    "platform": null,
    "project_url": "https://pypi.org/project/ngraph/",
    "project_urls": {
      "Homepage": "https://github.com/networmix/netgraph"
    },
    "release_url": "https://pypi.org/project/ngraph/0.4.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "A graph library for network modeling and capacity analysis.",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16721651,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc1e1922a86e43bfb583abaea1785b01095c3318bb4dcdaa8f5ed62c618d3af2",
          "md5": "48c7ae2d44617cc012060037e4924580",
          "sha256": "f1be664ba5323ae602edff63c145863572dc27e509af12c4d5678750dc288008"
        },
        "downloads": -1,
        "filename": "ngraph-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48c7ae2d44617cc012060037e4924580",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3517,
        "upload_time": "2022-04-29T11:55:29",
        "upload_time_iso_8601": "2022-04-29T11:55:29.013299Z",
        "url": "https://files.pythonhosted.org/packages/cc/1e/1922a86e43bfb583abaea1785b01095c3318bb4dcdaa8f5ed62c618d3af2/ngraph-0.0.2-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "removing old pre-release"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6a5931c0000544420fa87f17d657497eb81fbd37a111fcc746c98204f59dbbb",
          "md5": "e9748e26d6e8104b3371dc1a073dc129",
          "sha256": "b7f2871529890d331860e0539a4b1373af6ff78d46cc86ce2af233e3c67312fe"
        },
        "downloads": -1,
        "filename": "ngraph-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e9748e26d6e8104b3371dc1a073dc129",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3452,
        "upload_time": "2022-04-29T11:55:30",
        "upload_time_iso_8601": "2022-04-29T11:55:30.467346Z",
        "url": "https://files.pythonhosted.org/packages/d6/a5/931c0000544420fa87f17d657497eb81fbd37a111fcc746c98204f59dbbb/ngraph-0.0.2.tar.gz",
        "yanked": true,
        "yanked_reason": "removing old pre-release"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf5806bb3809d9954bc2576f37b0c7fde5b5b8aeac1aa0501b50077139a8da41",
          "md5": "fa63500eee3167d434849cff4453fefa",
          "sha256": "980a955380a162b3c7511f5a7f7fc5d4a5eeee9d611100ccb4cb370f2e0ce278"
        },
        "downloads": -1,
        "filename": "ngraph-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa63500eee3167d434849cff4453fefa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 14519,
        "upload_time": "2022-06-23T21:37:28",
        "upload_time_iso_8601": "2022-06-23T21:37:28.970329Z",
        "url": "https://files.pythonhosted.org/packages/bf/58/06bb3809d9954bc2576f37b0c7fde5b5b8aeac1aa0501b50077139a8da41/ngraph-0.0.3-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "removing old pre-release"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3cb7aea0311b928801ef28c26db1624a027e6add28d0973f54353057aaa4ba8",
          "md5": "ff1575ef2a56803ae8a41e01aafe21d8",
          "sha256": "c9fc7720bf69083ef099e11988b885e44b648b3974f5764a1447072fead86df0"
        },
        "downloads": -1,
        "filename": "ngraph-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ff1575ef2a56803ae8a41e01aafe21d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15189,
        "upload_time": "2022-06-23T21:37:30",
        "upload_time_iso_8601": "2022-06-23T21:37:30.036715Z",
        "url": "https://files.pythonhosted.org/packages/b3/cb/7aea0311b928801ef28c26db1624a027e6add28d0973f54353057aaa4ba8/ngraph-0.0.3.tar.gz",
        "yanked": true,
        "yanked_reason": "removing old pre-release"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "323f216c2cd2f5ad8662f43af70ff91c0f01837786ec9c35bdde034b86b37384",
          "md5": "eb5423894100e924ea22cbaad51f72be",
          "sha256": "74ecc935c2bd01adaa581bcdc5cb41dd9b4d6e7865039490daec43a2bb3bfa09"
        },
        "downloads": -1,
        "filename": "ngraph-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb5423894100e924ea22cbaad51f72be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 15507,
        "upload_time": "2022-06-25T18:50:35",
        "upload_time_iso_8601": "2022-06-25T18:50:35.450088Z",
        "url": "https://files.pythonhosted.org/packages/32/3f/216c2cd2f5ad8662f43af70ff91c0f01837786ec9c35bdde034b86b37384/ngraph-0.0.4-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "removing old pre-release"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab5a638a49213077b683913898c7f4d75045f8c34280524564b18d9674a60854",
          "md5": "0458c84af349b9ee4ebfc3f418c7b201",
          "sha256": "c091f28a4390b914dbffd80810ed86a381e8bc8936a43e8c4175bd168a32ea9f"
        },
        "downloads": -1,
        "filename": "ngraph-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0458c84af349b9ee4ebfc3f418c7b201",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15983,
        "upload_time": "2022-06-25T18:50:37",
        "upload_time_iso_8601": "2022-06-25T18:50:37.899482Z",
        "url": "https://files.pythonhosted.org/packages/ab/5a/638a49213077b683913898c7f4d75045f8c34280524564b18d9674a60854/ngraph-0.0.4.tar.gz",
        "yanked": true,
        "yanked_reason": "removing old pre-release"
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8711d151e719bc5a441ecf801fb30ebee2eb077baec208a90a500e4b976d19b9",
          "md5": "e8cde22732d1c583762a915f0e9996f7",
          "sha256": "3877a42bcee2007a4a211524bf0de0bc897bb11b5a7839c2cd9c63587867c4d8"
        },
        "downloads": -1,
        "filename": "ngraph-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8cde22732d1c583762a915f0e9996f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 15817,
        "upload_time": "2022-06-28T11:26:16",
        "upload_time_iso_8601": "2022-06-28T11:26:16.875715Z",
        "url": "https://files.pythonhosted.org/packages/87/11/d151e719bc5a441ecf801fb30ebee2eb077baec208a90a500e4b976d19b9/ngraph-0.1.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "removing old pre-release"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "782d12af036f3b28412a5b4b715a228ecd95c01f93960b24ae60fd6a35e8e772",
          "md5": "c1212ff09c0ea242a74699e65f8596ae",
          "sha256": "19b141e1f66f03847bc25c124cda14a6adeaa1160cb0fdb487b692558704db4d"
        },
        "downloads": -1,
        "filename": "ngraph-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c1212ff09c0ea242a74699e65f8596ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 16137,
        "upload_time": "2022-06-28T11:26:19",
        "upload_time_iso_8601": "2022-06-28T11:26:19.343591Z",
        "url": "https://files.pythonhosted.org/packages/78/2d/12af036f3b28412a5b4b715a228ecd95c01f93960b24ae60fd6a35e8e772/ngraph-0.1.0.tar.gz",
        "yanked": true,
        "yanked_reason": "removing old pre-release"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab1d423bb625f299d66f40d279bffb287081cb3faf88ad9863843622e8e899b4",
          "md5": "8a375c6cf4b9cba4eaa31cacc6653b9e",
          "sha256": "a9e4e5f5737f9d9469b6b0f1f413a88f13d133ddaddfd8f76a36a6b2195eaa1d"
        },
        "downloads": -1,
        "filename": "ngraph-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a375c6cf4b9cba4eaa31cacc6653b9e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 18025,
        "upload_time": "2022-07-01T19:29:20",
        "upload_time_iso_8601": "2022-07-01T19:29:20.014590Z",
        "url": "https://files.pythonhosted.org/packages/ab/1d/423bb625f299d66f40d279bffb287081cb3faf88ad9863843622e8e899b4/ngraph-0.1.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "removing old pre-release"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7abb8b54e3c8fdd7cccc5e1256cc6dec7148980156bcb8f60c02fd0ad8c7fbb6",
          "md5": "4b8aa34ed7f183176b60c474116c00a5",
          "sha256": "92124724fd78f818db9731c5f29dc23748512eba669a9d05d71d7f823e0ab91d"
        },
        "downloads": -1,
        "filename": "ngraph-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4b8aa34ed7f183176b60c474116c00a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 19745,
        "upload_time": "2022-07-01T19:29:21",
        "upload_time_iso_8601": "2022-07-01T19:29:21.764818Z",
        "url": "https://files.pythonhosted.org/packages/7a/bb/8b54e3c8fdd7cccc5e1256cc6dec7148980156bcb8f60c02fd0ad8c7fbb6/ngraph-0.1.1.tar.gz",
        "yanked": true,
        "yanked_reason": "removing old pre-release"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d04297744a88a6d78d340e23c97536b5ae996e96e076d51ec0d390a75f5e860",
          "md5": "2b3fb80c159406ba1d16045b910d4215",
          "sha256": "ddb037bd04fe95e8730cb5627e51e3a11b3cf44d192d80ef93b236dda10f8504"
        },
        "downloads": -1,
        "filename": "ngraph-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b3fb80c159406ba1d16045b910d4215",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19323,
        "upload_time": "2022-11-12T19:31:43",
        "upload_time_iso_8601": "2022-11-12T19:31:43.434613Z",
        "url": "https://files.pythonhosted.org/packages/2d/04/297744a88a6d78d340e23c97536b5ae996e96e076d51ec0d390a75f5e860/ngraph-0.2.0-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "removing old pre-release"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "942bd7fd8d89c68874a2a0356c87de2482550740121ee7e10216aa7e19f118a2",
          "md5": "b75ccf36000c3874e4406b668189835b",
          "sha256": "8da7b769d50811f269df34e2cce8ec79cb6aedb8b1442eb55221a349aac367fb"
        },
        "downloads": -1,
        "filename": "ngraph-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b75ccf36000c3874e4406b668189835b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 21089,
        "upload_time": "2022-11-12T19:31:45",
        "upload_time_iso_8601": "2022-11-12T19:31:45.207539Z",
        "url": "https://files.pythonhosted.org/packages/94/2b/d7fd8d89c68874a2a0356c87de2482550740121ee7e10216aa7e19f118a2/ngraph-0.2.0.tar.gz",
        "yanked": true,
        "yanked_reason": "removing old pre-release"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e16ca075713f95d4961ff0e5925742be032febf99d211ed1bebf94925bda7e0f",
          "md5": "2b7210841568c7134b17bdcdbe9c90c3",
          "sha256": "2235f8264c662f24c17c58c255b09ccb9e7412d94653ccd3959bc947b703e117"
        },
        "downloads": -1,
        "filename": "ngraph-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b7210841568c7134b17bdcdbe9c90c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 21406,
        "upload_time": "2023-01-06T12:36:12",
        "upload_time_iso_8601": "2023-01-06T12:36:12.439853Z",
        "url": "https://files.pythonhosted.org/packages/e1/6c/a075713f95d4961ff0e5925742be032febf99d211ed1bebf94925bda7e0f/ngraph-0.2.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "removing old pre-release"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6b8893b79403a150eee17e8ca15bcfec54331ab211df99d4390705c2768e53d",
          "md5": "133cd4f3f4aa03baf714ccacca3f0a8d",
          "sha256": "62f2494b1e3d41ec9202f91a0ff6f6c22a5b65dda5c1f6bd120444e7db3f509a"
        },
        "downloads": -1,
        "filename": "ngraph-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "133cd4f3f4aa03baf714ccacca3f0a8d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 22939,
        "upload_time": "2023-01-06T12:36:13",
        "upload_time_iso_8601": "2023-01-06T12:36:13.675036Z",
        "url": "https://files.pythonhosted.org/packages/f6/b8/893b79403a150eee17e8ca15bcfec54331ab211df99d4390705c2768e53d/ngraph-0.2.1.tar.gz",
        "yanked": true,
        "yanked_reason": "removing old pre-release"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29d63f38315d2c148f2257316761011a4dac5742133cb83403b9bbb74ba4efd2",
          "md5": "add87a996f8d8ebdfc8ec6df0a8c4b9b",
          "sha256": "2d6d5f0318060415bbf724c7386496c116435e8cddfbdde4b70a7b22ed03ec87"
        },
        "downloads": -1,
        "filename": "ngraph-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "add87a996f8d8ebdfc8ec6df0a8c4b9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 23778,
        "upload_time": "2023-02-07T02:34:40",
        "upload_time_iso_8601": "2023-02-07T02:34:40.511729Z",
        "url": "https://files.pythonhosted.org/packages/29/d6/3f38315d2c148f2257316761011a4dac5742133cb83403b9bbb74ba4efd2/ngraph-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ed2963a9876f11c4135e126e1b06416847ffe0af7f8f1e69ca9ec79a0b0786b",
          "md5": "a86e8bfced567a4cda9e570d3adf8565",
          "sha256": "46eefe67ca9ce82dd33cde8e4751c02b51e308061e657a7b729ac5b3deb6b136"
        },
        "downloads": -1,
        "filename": "ngraph-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a86e8bfced567a4cda9e570d3adf8565",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 26156,
        "upload_time": "2023-02-07T02:34:42",
        "upload_time_iso_8601": "2023-02-07T02:34:42.219205Z",
        "url": "https://files.pythonhosted.org/packages/6e/d2/963a9876f11c4135e126e1b06416847ffe0af7f8f1e69ca9ec79a0b0786b/ngraph-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29d63f38315d2c148f2257316761011a4dac5742133cb83403b9bbb74ba4efd2",
        "md5": "add87a996f8d8ebdfc8ec6df0a8c4b9b",
        "sha256": "2d6d5f0318060415bbf724c7386496c116435e8cddfbdde4b70a7b22ed03ec87"
      },
      "downloads": -1,
      "filename": "ngraph-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "add87a996f8d8ebdfc8ec6df0a8c4b9b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 23778,
      "upload_time": "2023-02-07T02:34:40",
      "upload_time_iso_8601": "2023-02-07T02:34:40.511729Z",
      "url": "https://files.pythonhosted.org/packages/29/d6/3f38315d2c148f2257316761011a4dac5742133cb83403b9bbb74ba4efd2/ngraph-0.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6ed2963a9876f11c4135e126e1b06416847ffe0af7f8f1e69ca9ec79a0b0786b",
        "md5": "a86e8bfced567a4cda9e570d3adf8565",
        "sha256": "46eefe67ca9ce82dd33cde8e4751c02b51e308061e657a7b729ac5b3deb6b136"
      },
      "downloads": -1,
      "filename": "ngraph-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a86e8bfced567a4cda9e570d3adf8565",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 26156,
      "upload_time": "2023-02-07T02:34:42",
      "upload_time_iso_8601": "2023-02-07T02:34:42.219205Z",
      "url": "https://files.pythonhosted.org/packages/6e/d2/963a9876f11c4135e126e1b06416847ffe0af7f8f1e69ca9ec79a0b0786b/ngraph-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}