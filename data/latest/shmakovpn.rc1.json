{
  "info": {
    "author": "shmakovpn",
    "author_email": "shmakovpn@yandex.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# shmakovpn_tools\n\n## History\n```shell\nPACKAGE_NAME=shmakovpn\nPROJECT_NAME=${PACKAGE_NAME}_tools\nPROJECT_DIR=~/${PROJECT_NAME}\nDOCS_DIR=${PROJECT_DIR}/docs\nmkvirtualenv shmakovpn -p /usr/bin/python3.6\nmkdir $PROJECT_DIR\ncd $PROJECT_DIR\ntouch README.md\n\n# configuring .gitignore\ntouch .gitignore\necho '# IDEs' >> .gitignore\necho '.idea/' >> .gitignore\necho '' >> .gitignore\necho '# python' >> .gitignore\necho '*.pyc' >> .gitignore  #* comment for vim highlight\necho '__pychache__/' >> .gitignore\necho '*.egg-info/' >> .gitignore  #* comment for vim hightlight\necho '.eggs/' >> .gitignore\necho '' >> .gitignore\necho '# Django' >> .gitignore\necho 'migrations/' >> .gitignore\necho 'db.sqlite3' >> .gitignore\necho 'settings.py' >> .gitignore\necho 'manage.py' >> .gitignore\necho '' >> .gitignore\necho '# virtualenv' >> .gitignore\necho 'venv/' >> .gitignore\necho '' >> .gitignore\necho '# sphinx' >> .gitignore\necho 'docs/build/html/' >> .gitignore\necho 'docs/build/doctrees/' >> .gitignore\necho '_build/' >> .gitignore\necho '_static/' >> .gitignore\necho '_templates/' >> .gitignore\necho '' >> .gitignore\necho '# codecov' >> .gitignore\necho '.coverage' >> .gitignore\necho '' >> .gitignore\necho '# pytest' >> .gitignore\necho '.pytest_cache/' >> .gitignore\necho '' >> .gitignore\necho '# vim swp' >> .gitignore\necho '*.swp' >> .gitignore  #* comment for vim highlight\necho '' >> .gitignore\necho '# pytest cache' >> .gitignore\necho '.pytest_cache/' >> .gitignore\necho '' >> .gitignore\necho '# build' >> .gitignore\necho 'build/' >> .gitignore\necho 'dist/' >> .gitignore\n\n# conguring requirements.txt\ntouch requirements.txt\n## turning vim to IDE\necho 'pyflakes' >> requirements.txt\necho 'pep8' >> requirements.txt\necho 'pylint' >> requirements.txt\necho 'ipython' >> requirements.txt\n## sphinx\necho 'sphinx' >> requirements.txt\necho 'sphinx-rtd-theme' >> requirements.txt\n## shmakovpn whatprovides\necho 'whatprovides' >> requirements.txt\n## twine (need for uploading package to PyPI)\necho 'twine' >> requirements.txt\n\n# installing packages\npip install --upgrade pip\npip install -r requirements.txt\n\n# configuring travis-ci\ntouch .travis.yml\necho 'language: python' >> .travis.yml\necho 'sudo: false' >> .travis.yml\necho 'jobs:' >> .travis.yml\necho '  include:' >> .travis.yml\necho '    - name: \"Python 3.6 on Linux\"' >> .travis.yml\necho '      python: \"3.6\"' >> .travis.yml\necho '    - name: \"Python 3.7 on Linux\"' >> .travis.yml\necho '      python: \"3.7\"' >> .travis.yml\necho '    - name: \"Python 3.8 on Linux\"' >> .travis.yml\necho '      python: \"3.8\"' >> .travis.yml\necho '    - name: \"Python 3.8.0 on Windows\"' >> .travis.yml\necho '      os: windows' >> .travis.yml\necho '      language: shell' >> .travis.yml\necho '      before_install:' >> .travis.yml\necho '        - choco install python --version 3.8.0' >> .travis.yml\necho '        - python -m pip install --upgrade pip' >> .travis.yml\necho '      env: PATH=/c/Python38:/c/Python38/Scripts:$PATH' >> .travis.yml\necho 'install:' >> .travis.yml\necho '  - pip install -r requirements.txt' >> .travis.yml\necho '  - pip install codecov' >> .travis.yml\necho '  - pip install pytest-cov' >> .travis.yml\necho \"script: coverage run -m pytest $PACKAGE_NAME/tests.py\" >> .travis.yml\necho 'after_success:' >> .travis.yml\necho '  - codecov' >> .travis.yml\n\n# creating folders and files\nmkdir $PACKAGE_NAME\ntouch $PACKAGE_NAME/__init__.py  # we will stay this file empty\ntouch $PACKAGE_NAME/version.py\necho \"VERSION: str = '1.1'\" >> $PACKAGE_NAME/version.py\n\n# creating examle module\ntouch $PACKAGE_NAME/example.py\necho \"def hello_world():\" >> $PACKAGE_NAME/example.py\necho \"    print('Hello World')\" >> $PACKAGE_NAME/example.py\n\n# reading version\nVERSION=$(cat $PACKAGE_NAME/version.py | grep 'VERSION' | sed -re \"s/^[^=]*=\\s* '([^ #]*)'.*$/\\1/\")\n\n# sphinx quick start\nsphinx-quickstart -q -p $PROJECT_NAME -a shmakovpn -v $VERSION -r $VERSION -l en --ext-autodoc --ext-intersphinx --ext-viewcode --ext-todo --sep $DOCS_DIR\n## change sphinx theme to sphinx_rtd_theme\nsed -i $DOCS_DIR/source/conf.py -re \"s/^html_theme = 'alabaster'/html_theme = 'sphinx_rtd_theme'/\"\n## change imports\nsed -i $DOCS_DIR/source/conf.py -re \"s/^# import os/import os/\"\nsed -i $DOCS_DIR/source/conf.py -re \"s/^# import sys/import sys/\"\n## configuring sys.path\nsed -i $DOCS_DIR/source/conf.py -re \"s/^# sys\\.path\\.insert\\(0, os\\.path\\.abspath\\('\\.'\\)\\)/PACKAGE: str='$PACKAGE_NAME'\\nTEMP_LABEL1/\"\nsed -i $DOCS_DIR/source/conf.py -re \"s/^TEMP_LABEL1/SCRIPT_DIR: str = os.path.dirname(os.path.abspath(__file__))\\nTEMP_LABEL2/\"\nsed -i $DOCS_DIR/source/conf.py -re \"s/^TEMP_LABEL2/DOCS_DIR: str = os.path.dirname(SCRIPT_DIR)\\nTEMP_LABEL3/\"\nsed -i $DOCS_DIR/source/conf.py -re \"s/^TEMP_LABEL3/PROJECT_DIR: str = os.path.dirname(DOCS_DIR)\\nTEMP_LABEL4/\"\nsed -i $DOCS_DIR/source/conf.py -re \"s/^TEMP_LABEL4/PACKAGE_DIR: str = os.path.join(PROJECT_DIR, PACKAGE)\\nTEMP_LABEL5/\"\nsed -i $DOCS_DIR/source/conf.py -re \"s/^TEMP_LABEL5/sys.path.insert(0, PACKAGE_DIR)\\nTEMP_LABEL6/\"\n## configuring version\nsed -i $DOCS_DIR/source/conf.py -re \"s/^TEMP_LABEL6/VERSION: str = ''\\nTEMP_LABEL7/\"\nsed -i $DOCS_DIR/source/conf.py -re \"s/^TEMP_LABEL7/with open(os.path.join(PACKAGE_DIR, 'version.py')) as version_file:\\nTEMP_LABEL8/\"\nsed -i $DOCS_DIR/source/conf.py -re \"s/^TEMP_LABEL8/    exec(version_file.read())\\n\\n/\"\nsed -i $DOCS_DIR/source/conf.py -re \"s/^(version\\s*=\\s*).*/\\1'$VERSION'/\"  #* comment for vim highlight\nsed -i $DOCS_DIR/source/conf.py -re \"s/^(release\\s*=\\s*).*/\\1'$VERSION'/\" #* comment for vim hightlight\n\n## creating contents.rst for readthedocs.io\ntouch $DOCS_DIR/source/contents.rst\necho \".. include:: index.rst\" >> $DOCS_DIR/source/contents.rst\n\n## creating introduction.rst\ntouch $DOCS_DIR/source/introduction.rst\necho \"Introduction todo\" >> $DOCS_DIR/source/introduction.rst\n\n## adding introduction to index.rst\nsed -i $DOCS_DIR/source/index.rst -re \"s/^(\\.\\. toctree::)/.. include:: introduction.rst\\n\\n\\1/\"\n\n## adding documentation (not package!) requirements\ntouch $DOCS_DIR/requirements.txt\n\n## adding code documentation\ntouch $DOCS_DIR/source/code.rst\necho 'Code' >> $DOCS_DIR/source/code.rst\necho \"====\\n\" >> $DOCS_DIR/source/code.rst\necho \".. automodule:: example\" >> $DOCS_DIR/source/code.rst\necho ' :members:' >> $DOCS_DIR/source/code.rst\n\n## adding code.rst to index.rst\nsed -i $DOCS_DIR/source/index.rst -re 's/^(   :caption: Contents:)/\\1\\n\\n   code/'\n\n# adding license\ntouch LICENSE.txt\necho \"Copyright $PACKAGE_NAME shmakovpn\" >> LICENSE.txt\necho '\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n' >>  LICENSE.txt\n\n# creating manifest\ntouch MANIFEST.in\necho 'include LICENSE.txt' >> MANIFEST.in\necho 'include setup.cfg' >> MANIFEST.in\necho 'include setup.py' >> MANIFEST.in\necho 'include makedoc.py' >> MANIFEST.in\necho 'include build_package.py' >> MANIFEST.in\necho '' >> MANIFEST.in\necho 'recursive-include test *' >> MANIFEST.in #* comment for vim highlight\necho 'recursive-include docs *' >> MANIFEST.in #* comment for vim highlight\necho '' >> MANIFEST.in\necho 'recursive-exclude docs/build *' >> MANIFEST.in  #* comment for vim highlight\necho 'recursive-exclude * __pycache__' >> MANIFEST.in  #* comment for vim highlight\necho 'recursive-exclude * *.py[co]' >> MANIFEST.in \necho 'recursive-exclude .git *' >> MANIFEST.in  #* comment for vim highlight\necho 'recursive-exclude .idea *' >> MANIFEST.in  #* comment for vim highlight\necho 'recursive-exclude venv *' >> MANIFEST.in  #* comment for vim highlight\n\n# creating setup.cfg\ntouch setup.cfg\necho '[build_sphinx]' >> setup.cfg\necho 'source-dir = docs/' >> setup.cfg\necho 'build-dir = docs/build' >> setup.cfg\necho 'all_files = 1' >> setup.cfg\necho '' >> setup.cfg\necho '[metadata]' >> setup.cfg\necho 'license_file = LICENSE.txt' >> setup.cfg\n\n# creating setup.py\ntouch setup.py\necho \"import os\" >> setup.py\necho \"from setuptools import setup, find_packages\" >> setup.py\necho \"from ${PACKAGE_NAME}.version import VERSION\" >> setup.py\necho \"\" >> setup.py\necho \"SCRIPT_DIR: str = os.path.dirname(os.path.abspath(__file__))\" >> setup.py\necho \"os.chdir(SCRIPT_DIR)\" >> setup.py\necho \"\" >> setup.py\necho \"with open('README.md') as f:\" >> setup.py\necho \"    long_description: str = f.read()\" >> setup.py\necho \"\" >> setup.py\necho \"setup(\" >> setup.py\necho \"    name='$PACKAGE_NAME',\" >> setup.py\necho \"    version=VERSION,\" >> setup.py\necho \"    packages=find_packages(),\" >> setup.py\necho \"    author='shmakovpn',\" >> setup.py\necho \"    author_email='shmakovpn@yandex.ru',\" >> setup.py\necho \"    url='https://github.com/shmakovpn/$PROJECT_NAME',\" >> setup.py\necho \"    download_url='https://github.com/shmakovpn/$PROJECT_NAME/archive/%s.zip' % (VERSION, ),\" >> setup.py\necho \"    long_description=long_description,\" >> setup.py\necho \"    long_description_content_type='text/markdown',\" >> setup.py\necho \"    entry_points={\" >> setup.py\n#echo \"        'console_scripts': ['$PACKAGE_NAME=$PACKAGE_NAME:main'],\" >> setup.py\necho \"    },\" >> setup.py\necho \"    install_requires=[\" >> setup.py\n#echo \"        'chardet',\" >> setup.py\necho \"    ],\" >> setup.py\necho \"    include_package_data=True,\" >> setup.py\necho \"    test_suite='$PACKAGE_NAME.tests',\" >> setup.py\necho \"    python_requires='>=3.6',\" >> setup.py\necho \"    classifiers=[\" >> setup.py\necho \"        'Programming Language :: Python :: 3',\" >> setup.py\n#echo \"        'Environment :: Console',\" >> setup.py\necho \"        'License :: OSI Approved :: Apache Software License',\" >> setup.py\necho \"        'Operating System :: OS Independent',\" >> setup.py\necho \"    ],\" >> setup.py\necho \")\" >> setup.py\n\n# creating build_package.py, script that runs *python setup.py sdist bdist_wheel*\ntouch build_package.py\necho \"import os\" >> build_package.py\necho \"SCRIPT_DIR: str = os.path.dirname(os.path.abspath(__file__))\" >> build_package.py\necho \"\" >> build_package.py\necho \"\" >> build_package.py\necho \"def run_build():\" >> build_package.py\necho \"    os.chdir(SCRIPT_DIR)\" >> build_package.py\necho \"    os.system('python setup.py test')\" >> build_package.py\necho \"    os.system('python setup.py sdist bdist_wheel')\" >> build_package.py\necho \"    print('__END__')\" >> build_package.py\necho \"\" >> build_package.py\necho \"\" >> build_package.py\necho \"if __name__ == '__main__':\" >> build_package.py\necho \"    run_build()\" >> build_package.py\n\n# creating makedoc.py, script that runs *sphinx-build*\ntouch makedoc.py\necho \"import os\" >> makedoc.py\necho \"SCRIPT_DIR: str = os.path.dirname(os.path.abspath(__file__))\" >> makedoc.py\necho \"\" >> makedoc.py\necho \"\" >> makedoc.py\necho \"def run_sphinx():\" >> makedoc.py\necho \"    docs_dir: str = os.path.join(SCRIPT_DIR, 'docs')\" >> makedoc.py\necho \"    docs_source_dir: str = os.path.join(docs_dir, 'source')\" >> makedoc.py\necho \"    build_dir: str = os.path.join(docs_dir, 'build')\" >> makedoc.py\necho \"    html_dir: str = os.path.join(build_dir, 'html')\" >> makedoc.py\necho \"    os.system('sphinx-build -b html \\\"%s\\\" \\\"%s\\\"' % (docs_source_dir, html_dir))\" >> makedoc.py\necho \"    print('__END__')\" >> makedoc.py\necho \"\" >> makedoc.py\necho \"\" >> makedoc.py\necho \"if __name__ == '__main__':\" >> makedoc.py\necho \"    run_sphinx()\" >> makedoc.py\n\n# creating upload_pypi.py\ntouch upload_pypi.py\necho \"import os\" >> upload_pypi.py\necho \"import subprocess\" >> upload_pypi.py\necho \"from typing import List\" >> upload_pypi.py\necho \"from ${PACKAGE_NAME}.version import VERSION\" >> upload_pypi.py\necho \"\" >> upload_pypi.py\necho \"SCRIPT_DIR: str = os.path.dirname(os.path.abspath(__file__))\" >> upload_pypi.py\necho \"\" >> upload_pypi.py\necho \"\" >> upload_pypi.py\necho \"def get_pip_config():\" >> upload_pypi.py\necho \"    process: subprocess.Popen = subprocess.Popen(\" >> upload_pypi.py\necho \"        ['pip', 'config', 'list', ], stdout=subprocess.PIPE, stderr=subprocess.PIPE\" >> upload_pypi.py\necho \"    )\" >> upload_pypi.py\necho \"    process.wait()\" >> upload_pypi.py\necho \"    if not process.returncode:\" >> upload_pypi.py\necho \"        if process.stdout.readable():\" >> upload_pypi.py\necho \"            return list(map(lambda x: x.decode().rstrip(), process.stdout.readlines()))\" >> upload_pypi.py\necho \"        else:\" >> upload_pypi.py\necho \"            return []  # pip configuration is empty\" >> upload_pypi.py\necho \"    else:\" >> upload_pypi.py\necho \"        if process.stdout.readable():\" >> upload_pypi.py\necho \"            print(process.stdout.read().decode())\" >> upload_pypi.py\necho \"        if process.stderr.readable():\" >> upload_pypi.py\necho \"            print(process.stderr.read().decode())\" >> upload_pypi.py\necho \"        exit(1)\" >> upload_pypi.py\necho \"\" >> upload_pypi.py\necho \"\" >> upload_pypi.py\necho \"def run_upload():\" >> upload_pypi.py\necho \"    pip_certs: List[str] = list(filter(lambda x: str(x).startswith('global.cert='), get_pip_config()))\" >> upload_pypi.py\necho \"    if pip_certs:\" >> upload_pypi.py\necho \"        pip_cert_arg: str = '--cert %s ' % (pip_certs[0].split('=')[1])\" >> upload_pypi.py\necho \"    else:\" >> upload_pypi.py\necho \"        pip_cert_arg: str = ''\" >> upload_pypi.py\necho \"    print(pip_cert_arg)\" >> upload_pypi.py\necho \"    dist_dir: str = os.path.join(SCRIPT_DIR, 'dist')\" >> upload_pypi.py\necho \"    dist_file: str = os.path.join(dist_dir, '${PACKAGE_NAME}-%s.tar.gz' % (VERSION, ))\" >> upload_pypi.py\necho \"    dist_whls: str = os.path.join(dist_dir, '${PACKAGE_NAME}-%s-*.whl' % (VERSION, ))\" >> upload_pypi.py  #* comment for vim highlight\necho \"    os.system('twine upload \\\"%s\\\" \\\"%s\\\" %s --verbose' % (dist_file, dist_whls, pip_cert_arg))\" >> upload_pypi.py\necho \"    print('__end__')\" >> upload_pypi.py\necho \"\" >> upload_pypi.py\necho \"\" >> upload_pypi.py\necho \"if __name__ == '__main__':\" >> upload_pypi.py\necho \"    run_upload()\" >> upload_pypi.py\n\n# creating tests.py\ntouch $PACKAGE_NAME/tests.py\necho \"import unittest\" >> $PACKAGE_NAME/tests.py\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/shmakovpn/shmakovpn_tools/archive/1.1.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shmakovpn/shmakovpn_tools",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shmakovpn",
    "package_url": "https://pypi.org/project/shmakovpn/",
    "platform": "",
    "project_url": "https://pypi.org/project/shmakovpn/",
    "project_urls": {
      "Download": "https://github.com/shmakovpn/shmakovpn_tools/archive/1.1.zip",
      "Homepage": "https://github.com/shmakovpn/shmakovpn_tools"
    },
    "release_url": "https://pypi.org/project/shmakovpn/1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7879132,
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "871d29c9c9aba99546b58e32d3f9e119c000d0d0e84c737f7c7653884ae33259",
          "md5": "255a72f4063b2dff1142e62f5d6a834c",
          "sha256": "06db222faf1c0a14a1d2816c0c9835c1ca1f02892762f7af6fa0d77d803c8a21"
        },
        "downloads": -1,
        "filename": "shmakovpn-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "255a72f4063b2dff1142e62f5d6a834c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5803,
        "upload_time": "2020-08-04T09:19:49",
        "upload_time_iso_8601": "2020-08-04T09:19:49.518779Z",
        "url": "https://files.pythonhosted.org/packages/87/1d/29c9c9aba99546b58e32d3f9e119c000d0d0e84c737f7c7653884ae33259/shmakovpn-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7df921d866776517c547dac3a81a62c4a4633bd17b6ef25b22b743d6c6f7316d",
          "md5": "0e88a864048776b9dfe2284b878f12c1",
          "sha256": "41e51d54cd48d09602350363c143839c995cf199e149e442628917289b8403bd"
        },
        "downloads": -1,
        "filename": "shmakovpn-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0e88a864048776b9dfe2284b878f12c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9420,
        "upload_time": "2020-08-04T09:20:06",
        "upload_time_iso_8601": "2020-08-04T09:20:06.107278Z",
        "url": "https://files.pythonhosted.org/packages/7d/f9/21d866776517c547dac3a81a62c4a4633bd17b6ef25b22b743d6c6f7316d/shmakovpn-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "871d29c9c9aba99546b58e32d3f9e119c000d0d0e84c737f7c7653884ae33259",
        "md5": "255a72f4063b2dff1142e62f5d6a834c",
        "sha256": "06db222faf1c0a14a1d2816c0c9835c1ca1f02892762f7af6fa0d77d803c8a21"
      },
      "downloads": -1,
      "filename": "shmakovpn-1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "255a72f4063b2dff1142e62f5d6a834c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5803,
      "upload_time": "2020-08-04T09:19:49",
      "upload_time_iso_8601": "2020-08-04T09:19:49.518779Z",
      "url": "https://files.pythonhosted.org/packages/87/1d/29c9c9aba99546b58e32d3f9e119c000d0d0e84c737f7c7653884ae33259/shmakovpn-1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7df921d866776517c547dac3a81a62c4a4633bd17b6ef25b22b743d6c6f7316d",
        "md5": "0e88a864048776b9dfe2284b878f12c1",
        "sha256": "41e51d54cd48d09602350363c143839c995cf199e149e442628917289b8403bd"
      },
      "downloads": -1,
      "filename": "shmakovpn-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0e88a864048776b9dfe2284b878f12c1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 9420,
      "upload_time": "2020-08-04T09:20:06",
      "upload_time_iso_8601": "2020-08-04T09:20:06.107278Z",
      "url": "https://files.pythonhosted.org/packages/7d/f9/21d866776517c547dac3a81a62c4a4633bd17b6ef25b22b743d6c6f7316d/shmakovpn-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}