{
  "info": {
    "author": "Pavel Egorov",
    "author_email": "paveg.sp@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Log Decorator\n===\n\nThis package provides log decorators for sync and async Python functions which logs function input arguments, \nresult and raised exceptions in verbose manner.\n\nREQUIREMENTS\n---\n\n1. Python >= 3.6 (async/await and f-strings are used in the package).\n2. Python packages from setup.py `install_requires`.\n\nINSTALLATION\n---\n\n    pip install verbose-log-decorator\n\nOVERVIEW\n---\n\nTo integrate log decorators into your code you should just perform a few steps:\n\n1. Choose/implement function which you want to log.\n2. Choose right decorator to use (sync or async) and add it to your function:\n\n        import logging\n        import sys\n\n        from log_decorator.log import log\n        from log_decorator.log_formatter import LogFormatter\n\n        logger = logging.getLogger('service_logger')\n        handler = logging.StreamHandler(sys.stdout)\n\n        formatter = LogFormatter(fmt='%(asctime)s %(message)s', formatter_mode='compact')\n        handler.setFormatter(formatter)\n        handler.setLevel(logging.INFO)\n        logger.addHandler(handler)\n        logger.setLevel(logging.INFO)\n\n\n        @log()\n        def test_log_function(x, y):\n            return x / y\n\n3. Call you function and receive output:\n\n        test_log_function(4, 2)\n\n        # Log output:\n\n        # 2021-08-17 12:39:59,282 call __main__.test_log_function {'input_data': {'x': 4, 'y': 2}}\n        # 2021-08-17 12:39:59,283 return __main__.test_log_function {'input_data': {'x': 4, 'y': 2}, 'result': 2}\n\nTo log exceptions nothing additional is required:\n\n        @log()\n        def test_log_function(x, y):\n            return x / y\n\n        test_log_function(4, 0)\n\n        # Log output:\n\n        # 2021-08-17 13:14:16,508 call __main__.test_log_function {'input_data': {'x': 4, 'y': 0}}\n        # 2021-08-17 13:14:16,509 error in __main__.test_log_function Traceback (most recent call last):\n        # File \".../test.py\", line 69, in _log\n        #   result = wrapped(*args, **kwargs)\n        # File \"test.py\", line 19, in test_log_function\n        #   return x / y\n        # ZeroDivisionError: division by zero {'input_data': {'x': 4, 'y': 0}}\n\nADVANCED USAGE\n---\n\n`log_formatter.py`\n\nThis module provides class LogFormatter which can be used with or without log decorators from the package.\nThis class can be used as regular log formatters from standard library, but has some additional attributes.\n\n```\nclass LogFormatter(\n    formatter_mode: FormatterMode = FormatterMode.VERBOSE,\n    limit_keys_to: Optional[Iterable] = ('input_data', 'result'),\n    max_length: Optional[int] = DEFAULT_MAX_LOG_LENGTH,\n    separator: str = DEFAULT_SEPARATOR,\n    **kwargs,\n)\n``` \n\n- `formatter_mode` - either `FormatterMode.COMPACT` or `FormatterMode.VERBOSE` (default):\n  - in `verbose` mode logs will be formatted in human-readable way with new lines, separators etc., this mode is \n    recommended for external log storage/explorer such as Graylog.\n  - in `compact` mode logs will be formatted as single-line records (except exceptions), this mode is recommended for \n    logging to console.\n- `limit_keys_to` - it allows you to restrict which info to add to log records, pass any iterable here or `None` to \n  disable any restrictions.\n- `max_length` - restricts max single record length, pass `None` to disable any restrictions.\n- `separator` - used in `verbose` mode only to separate different additional log items to improve readability, pass \n  `None` to disable separation.\n- `kwargs` - these arguments will be passed to base class (`logging.Formatter`).\n\n---\n\n`log.py`\n\nThis module provides log decorator for **sync** functions and methods and some utility functions.\n\n```\ndef get_logger(logger_name: str = 'service_logger') -> logger isntance with specified name and disabled propagation\n```\n\n```\ndef log(\n    logger_inst: logging.Logger = get_logger(),\n    lvl: int = logging.INFO,\n    *,\n    hide_output: bool = False,\n    hidden_params: Iterable[str] = (),\n    exceptions_only: bool = False,\n    track_exec_time: bool = False,\n    frequency: int or None = None,\n    exception_hook: Callable or None = None,\n) -> log_decorator_implementation\n```\n\n- `logger_inst` - logger instance to use, by passing you own instance you can configure some additional details such \n  as logger name etc.\n- `lvl` - logging level, function calls and returns will be logged with this level, exceptions will be logger with \n  `ERROR` level.\n- `hide_output` - if `True` then result of the function call will be completely hidden in log.\n- `minify_logs` - if `True` then logs would be minified to reduce storage consumption.\n- `hide_input_from_return` - if `True` then return log will not contain input arguments.\n- `hidden_params` - pass iterable of strings to hide some arguments or their parts from the log. To hide part of an \n  argument use `__` to access key or index in dict or in an iterable and then its name/index, e.g. if you will pass \n  `hidden_params=['test__key__1']` to log decorator and call function with argument `test={'key': [1,2,3]}` then in \n  logs you will see `test: {'key': [1, 'hidden', 3]}`. To hide multiple parts add all desired paths to `hidden_params`\n- `exceptions_only` - if `True` then only exception will be logged.\n- `track_exec_time` - if `True` an additional key `execution_time_ms` will be added to log, don't forget to add it \n  to `limit_keys_to` in formatter to see it in final log.\n- `frequency` - if passed then only each `n` function call will be logged, use it e.g. to obtain some sort of \n  statistics of functions which are called too intensively to log each call.\n- `exception_hook` - pass any callable to execute it when an exception occurs, e.g. it is an easy way to send some \n  notification on errors, `logger_inst`, `exc` (exception instance), `extra` (all collected additional info) will be \n  passed to this hook.\n\n---\n\n`async_log.py`\n\nThis module provides log decorator for **async** functions and methods.\n\n```\ndef log(...) -> async_log_decorator_implementation\n```\n\nLook at sync log for signature description, the only difference is that exception_hook should be async if passed.\n\nThis decorator doesn't provide async logging, but only async function calls.\nTo use with async code consider either stdout/UDP inputs or use approach like:\n[non-blocking handlers](https://docs.python.org/3/howto/logging-cookbook.html#dealing-with-handlers-that-block).\n\n---\n\nAdditional features:\n1. It is possible to define `get_log_id` method for your classes to represent them in logs in some special way. This \n   method will be called without arguments except of class instance or class itself (in case of passing class itself \n   to the logged function).\n2. Each log record will contain `call_id` parameter which will be equal for call, return and exception records of \n   the same call, it is to simplify logs reading and understanding their relations.\n3. If an exception will be raised during function call and its instance will have `return_value` attribute then \n   exception will be logged, but not reraised, instead the value of this attribute will be returned.\n\nTESTING\n---\n\nThe package has built-in unittests with 100% coverage, to run them:\n1. Clone repository.\n2. Install test dependencies: `pip install pytest pytest-asyncio pytest-cov`\n3. Run tests and generate HTML coverage report: `pytest --cov-report html --cov=log_decorator`\n4. Review results in `htmlcov/index.html`\n\nCONTRIBUTE\n---\n\nIf You have found an error or want to offer changes - create a pull request, and I will review it as soon as possible!\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Pavel-Egorov/log_decorator",
    "keywords": "logging",
    "license": "Apache",
    "maintainer": "Pavel Egorov",
    "maintainer_email": "paveg.sp@gmail.com",
    "name": "verbose-log-decorator",
    "package_url": "https://pypi.org/project/verbose-log-decorator/",
    "platform": null,
    "project_url": "https://pypi.org/project/verbose-log-decorator/",
    "project_urls": {
      "Homepage": "https://github.com/Pavel-Egorov/log_decorator"
    },
    "release_url": "https://pypi.org/project/verbose-log-decorator/1.1.2/",
    "requires_dist": [
      "wrapt",
      "ujson"
    ],
    "requires_python": "",
    "summary": "decorators to log function calls in verbose manner",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16842582,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a86e1eaaa01dc05d7c582d3290cc1e33d921e017ce17d73715e97e08fb20091",
          "md5": "4fcdefa2911964ca500a1e70ace1db58",
          "sha256": "d62d93689ba268e00eab612bd7e178e36188720cb8aba380fd9b0151484ba769"
        },
        "downloads": -1,
        "filename": "verbose_log_decorator-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4fcdefa2911964ca500a1e70ace1db58",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12370,
        "upload_time": "2021-08-19T22:54:38",
        "upload_time_iso_8601": "2021-08-19T22:54:38.454785Z",
        "url": "https://files.pythonhosted.org/packages/5a/86/e1eaaa01dc05d7c582d3290cc1e33d921e017ce17d73715e97e08fb20091/verbose_log_decorator-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a94163974ab6523c8635de927a5cd1a2782ae63a2be4f9c862682c55be541c57",
          "md5": "1a060584625bd0896cb5426e39520c58",
          "sha256": "095caff6c62ee4bee8f838bb6f8d76badd05ef705307945c2eef8cef7ab79fa5"
        },
        "downloads": -1,
        "filename": "verbose_log_decorator-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a060584625bd0896cb5426e39520c58",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12367,
        "upload_time": "2021-08-19T23:00:05",
        "upload_time_iso_8601": "2021-08-19T23:00:05.390778Z",
        "url": "https://files.pythonhosted.org/packages/a9/41/63974ab6523c8635de927a5cd1a2782ae63a2be4f9c862682c55be541c57/verbose_log_decorator-1.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f57ed57134a8396c68412e7881358765fcf4227e60e205c70a1189371f439de",
          "md5": "03ff73713e3dcc431102bd7ef9fc3baf",
          "sha256": "95e3d149b371fc8851e39bf5a341c9243898b8c3d27c791a83c31bf2ebed4997"
        },
        "downloads": -1,
        "filename": "verbose_log_decorator-1.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03ff73713e3dcc431102bd7ef9fc3baf",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13128,
        "upload_time": "2022-11-18T15:42:16",
        "upload_time_iso_8601": "2022-11-18T15:42:16.396527Z",
        "url": "https://files.pythonhosted.org/packages/1f/57/ed57134a8396c68412e7881358765fcf4227e60e205c70a1189371f439de/verbose_log_decorator-1.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13df9266fc11615c730917d2b6332291ebecbd9b2e94274862f23e39f4d1b3f7",
          "md5": "7f21c1ef1161b92920a7d2fe7cee8c0e",
          "sha256": "e9f8cb6c2f7cf64f1fe585ab45e19876212a5e2c55107cfaf123bfacf59be881"
        },
        "downloads": -1,
        "filename": "verbose_log_decorator-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7f21c1ef1161b92920a7d2fe7cee8c0e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14254,
        "upload_time": "2022-11-18T15:42:18",
        "upload_time_iso_8601": "2022-11-18T15:42:18.856004Z",
        "url": "https://files.pythonhosted.org/packages/13/df/9266fc11615c730917d2b6332291ebecbd9b2e94274862f23e39f4d1b3f7/verbose_log_decorator-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8da746fe91f288190ad186970facebb8fbf241e612a5579e0344ea0221cb2535",
          "md5": "321faac9824ea1c280440403f9df6ade",
          "sha256": "898c48b7bbb2ac57ebfa3bdbd248c2f7d637461666b457eaefd1ce27a44e9b93"
        },
        "downloads": -1,
        "filename": "verbose_log_decorator-1.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "321faac9824ea1c280440403f9df6ade",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13409,
        "upload_time": "2022-11-24T17:52:14",
        "upload_time_iso_8601": "2022-11-24T17:52:14.496435Z",
        "url": "https://files.pythonhosted.org/packages/8d/a7/46fe91f288190ad186970facebb8fbf241e612a5579e0344ea0221cb2535/verbose_log_decorator-1.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "380b5c35d0b5df94648888fe8007e5e6845d52d308791eb94aa1df9d6930c07d",
          "md5": "73934fa73409c81e2c42e894cb000f9b",
          "sha256": "adeaec6f09f1442ebd7a9f9e4775f49a01dd005a19e96dd4dceaa024c6192393"
        },
        "downloads": -1,
        "filename": "verbose_log_decorator-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "73934fa73409c81e2c42e894cb000f9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14508,
        "upload_time": "2022-11-24T17:52:16",
        "upload_time_iso_8601": "2022-11-24T17:52:16.163835Z",
        "url": "https://files.pythonhosted.org/packages/38/0b/5c35d0b5df94648888fe8007e5e6845d52d308791eb94aa1df9d6930c07d/verbose_log_decorator-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7df34acb57e065f939653d47da3f8edd95277e86f4b2591ea3ceb3d29f18cbc",
          "md5": "910e2a38fc9857d19a1c6ffd11e7df51",
          "sha256": "8b677ac1a792ea2a2f8941f3870b122cfbbadaa5fc4747aa66d6b7125f3818f7"
        },
        "downloads": -1,
        "filename": "verbose_log_decorator-1.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "910e2a38fc9857d19a1c6ffd11e7df51",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 13624,
        "upload_time": "2023-02-13T17:31:02",
        "upload_time_iso_8601": "2023-02-13T17:31:02.343465Z",
        "url": "https://files.pythonhosted.org/packages/a7/df/34acb57e065f939653d47da3f8edd95277e86f4b2591ea3ceb3d29f18cbc/verbose_log_decorator-1.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af3818a029ccad0bb01120a14a49e0ef9153f37963214f50c78b5fdd13df6cf8",
          "md5": "facc4ef044ff124a553744f35b62b3dd",
          "sha256": "262615e9c558114abb8ccf9eea0f9621f5cb3ba2db196549eb56b5b1bf8e8aa6"
        },
        "downloads": -1,
        "filename": "verbose_log_decorator-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "facc4ef044ff124a553744f35b62b3dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14705,
        "upload_time": "2023-02-13T17:31:03",
        "upload_time_iso_8601": "2023-02-13T17:31:03.769379Z",
        "url": "https://files.pythonhosted.org/packages/af/38/18a029ccad0bb01120a14a49e0ef9153f37963214f50c78b5fdd13df6cf8/verbose_log_decorator-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7df34acb57e065f939653d47da3f8edd95277e86f4b2591ea3ceb3d29f18cbc",
        "md5": "910e2a38fc9857d19a1c6ffd11e7df51",
        "sha256": "8b677ac1a792ea2a2f8941f3870b122cfbbadaa5fc4747aa66d6b7125f3818f7"
      },
      "downloads": -1,
      "filename": "verbose_log_decorator-1.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "910e2a38fc9857d19a1c6ffd11e7df51",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 13624,
      "upload_time": "2023-02-13T17:31:02",
      "upload_time_iso_8601": "2023-02-13T17:31:02.343465Z",
      "url": "https://files.pythonhosted.org/packages/a7/df/34acb57e065f939653d47da3f8edd95277e86f4b2591ea3ceb3d29f18cbc/verbose_log_decorator-1.1.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af3818a029ccad0bb01120a14a49e0ef9153f37963214f50c78b5fdd13df6cf8",
        "md5": "facc4ef044ff124a553744f35b62b3dd",
        "sha256": "262615e9c558114abb8ccf9eea0f9621f5cb3ba2db196549eb56b5b1bf8e8aa6"
      },
      "downloads": -1,
      "filename": "verbose_log_decorator-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "facc4ef044ff124a553744f35b62b3dd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14705,
      "upload_time": "2023-02-13T17:31:03",
      "upload_time_iso_8601": "2023-02-13T17:31:03.769379Z",
      "url": "https://files.pythonhosted.org/packages/af/38/18a029ccad0bb01120a14a49e0ef9153f37963214f50c78b5fdd13df6cf8/verbose_log_decorator-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}