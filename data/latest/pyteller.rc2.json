{
  "info": {
    "author": "MIT Data To AI Lab",
    "author_email": "dailabmit@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "<p align=\"left\">\n<img width=15% src=\"https://dai.lids.mit.edu/wp-content/uploads/2018/06/Logo_DAI_highres.png\" alt=“DAI-Lab” />\n<i>An open source project from Data to AI Lab at MIT.</i>\n</p>\n\n<!-- Uncomment these lines after releasing the package to PyPI for version and downloads badges -->\n<!--[![PyPI Shield](https://img.shields.io/pypi/v/pyteller.svg)](https://pypi.python.org/pypi/pyteller)-->\n<!--[![Downloads](https://pepy.tech/badge/pyteller)](https://pepy.tech/project/pyteller)-->\n[![Github Actions Shield](https://img.shields.io/github/workflow/status/signals-dev/pyteller/Run%20Tests)](https://github.com/signals-dev/pyteller/actions)\n[![Coverage Status](https://codecov.io/gh/signals-dev/pyteller/branch/master/graph/badge.svg)](https://codecov.io/gh/signals-dev/pyteller)\n\n\n\n# pyteller\n\nTime series forecasting using MLPrimitives\n\n- Documentation: https://signals-dev.github.io/pyteller\n- Homepage: https://github.com/signals-dev/pyteller\n\n# Overview\n\npyteller is a time series forecasting library built with the end user in mind.\n\n## Leaderboard\n\nIn this repository we maintain an up-to-date leaderboard with the current scoring of the\npipelines according to the benchmarking procedure explained in the [benchmark documentation](\nbenchmark/).\n\nThe benchmark is run on many datasets and we record the number of wins each pipeline has over the\nbaseline pipeline. Results obtained during benchmarking as well as previous releases can be\nfound within [benchmark/results](/results) folder as CSV files. Results can also\nbe browsed in the following Google [sheet](https://docs.google.com/spreadsheets/d/1Fqqs2T84AgAjM0OOABMMXm_CX8nkcoQxwnsMAh8YspA/edit?usp=sharing).\n\n\n| Pipeline                  |  Percent Outperforms Persistence |\n|---------------------------|--------------------|\n|                       |                   |\n\n\n## Table of Contents\n\n* [I. Data Format](#data-format)\n   * [I.1 Input](#input)\n   * [I.2 Output](#output)\n   * [I.3 Datasets in the library](#datasets-in-the-library)\n* [II. pyteller Pipelines](#pyteller-pipelines)\n   * [II.1 Current Available Pipelines](#current-available-pipelines)\n* [III. Install](#install)\n* [IV. Quick Start](#quick-start)\n\n\n# Data Format\n\n## Input\n\nThe expected input to pyteller pipelines is a .csv file with data in one of the following formats:\n\n### Targets Table\n#### Option 1: Single Entity (Academic Form)\nThe user must specify the following:\n* `timestamp_col`: the **string** denoting which column contains the **pandas timestamp** objects or **python datetime** objects corresponding to the time at which the observation is made\n* `target_column`: an **integer** or **float** column with the observed target values at the indicated timestamps\n\nThis is an example of such table, where the values are the number of NYC taxi passengers at the corresponding timestamp.\n\n|  timestamp |     value |\n|------------|-----------|\n| 7/1/14 1:00 |  6210 |\n| 7/1/14 1:30 | 4656|\n| 7/1/14 2:00 | 3820 |\n|7/1/14 1:30|\t4656|\n|7/1/14 2:00|\t3820|\n|7/1/14 2:30|\t2873|\n|7/1/14 3:00|\t2369|\n|7/1/14 3:30|\t2064|\n|7/1/14 4:00|\t2221|\n|7/1/14 4:30|\t2158|\n|7/1/14 5:00|\t2515|\n\n#### Option 2: Multiple Entity-Instances (Flatform)\nThe user must specify the following:\n* `timestamp_col`: the **string** denoting which column contains the **pandas timestamp** objects or **python datetime** objects corresponding to the time at which the observation is made\n* `entity_col`: the **string** denoting which column contains the entities you will seperately make forecasts for\n* `target`: the **string** denoting which columns contain the observed target values that you want to forecast for\n* `dynamic_variable`: the **string** denoting which columns contain other input time series that will help the forecast\n* `static_variable`: the **string** denoting which columns are a static varibles\n\nThis is an example of such table, where the `timestamp_col` is 'timestamp', the `entity_col` is 'region',  the `target` is 'demand,' and the  `dynamic_variable` are 'Temp' and 'Rain':\n\n\n\n |  timestamp | region  |   demand |   Temp |   Rain |\n|------------|------------|-----------| -----------|-----------|\n 9/27/20 21:20 |  DAYTON|1841.6 | 65.78|\t0|\n|  9/27/20 21:20 | DEOK|2892.5 |75.92|\t0|\n| 9/27/20 21:20|  DOM|11276 | 55.29|\t0|\n|9/27/20 21:20| DPL|2113.7| 75.02|\t0.06|\n| 9/27/20 21:25 | DAYTON|1834.1 | 65.72|\t0|\n| 9/27/20 21:25 |DEOK| 2880.2 | 75.92|\t0|\n| 9/27/20 21:25| DOM| 11211.7 | 55.54|\t0|\n|9/27/20 21:25|DPL| 2086.6| 75.02|\t0.06|\n\n\n#### Option 3: Multiple Entity-Instances: Longform\nThe user must specify the following:\n* `timestamp_col`: the **string** denoting which column contains the **pandas timestamp** objects or **python datetime** objects corresponding to the time at which the observation is made\n* `entity_col`: the **string** denoting which column contains the entities you will seperately make forecasts for\n* `variable_col`: the **string** denoting which column contains the names of the observed variables\n* `target`: the **string** denoting which variable names are the observed target values in the `variable_col` that you want to forecast for\n* `dynamic_variable`: the **string** denoting which variable names are other input time series in the `variable_col` that will help the forecast\n* `static_variable`: the **string** denoting which variable names are static varibles in the `variable_col`\n* `value_col`: the **string** denoting which column contains the values of the observations of the `variable_col`\n\nThis is an example of such table, where the `timestamp_col` is 'timestamp', the `entity_col` is 'region', the `variable_col` is 'var_name', the `target` is 'demand,' the  `dynamic_variable` are 'Temp' and 'Rain', and the `value_col` is 'value':\n\n\n\n |  timestamp | region  |   var_name |   value |\n|------------|------------|-----------| -----------|\n |9/27/20 21:20 |  DAYTON|demand | 1841.6|\n |9/27/20 21:20 | DAYTON|Temp | 65.78|\n |9/27/20 21:20 | DAYTON|Temp | 0|\n |9/27/20 21:20 |DEOK| demand | 2892.5|\n |9/27/20 21:20  | DEOK|Temp |75.92|\n |9/27/20 21:20  |DEOK| Rain |0|\n |9/27/20 21:20 | DOM|demand| 11276|\n |9/27/20 21:20 | DOM| Temp | 55.29|\n |9/27/20 21:20 |DOM| Rain| 0|\n|9/27/20 21:20| DPL|demand| 2113.7|\n |9/27/20 21:20 | DPL| Temp | 75.02|\n |9/27/20 21:20 |DPL| Rain| 0.06|\n |9/27/20 21:25 |  DAYTON|demand | 1834.1|\n |9/27/20 21:25 | DAYTON|Temp | 65.72|\n |9/27/20 21:25 | DAYTON|Temp | 0|\n |9/27/20 21:25 |DEOK| demand | 2880.2|\n |9/27/20 21:25  | DEOK|Temp |75.92|\n |9/27/20 21:25  |DEOK| Rain |0|\n |9/27/20 21:25 | DOM|demand| 11211.7|\n |9/27/20 21:25 | DOM| Temp | 55.54|\n |9/27/20 21:25 |DOM| Rain| 0|\n|9/27/20 21:25| DPL|demand| 2086.6|\n |9/27/20 21:25 | DPL| Temp | 75.02|\n |9/27/20 21:25 |DPL| Rain| 0.06|\n\n\n\n\n\n## Output\n\nThe output of the pyteller Pipelines is another table that contains the timestamp and the forecasting value(s), matching the format of the input targets table.\n\n## Datasets in the library\n\nFor development and evaluation of pipelines, we include the following datasets:\n#### NYC taxi data\n* Found on the [nyc website](https://www1.nyc.gov/site/tlc/about/tlc-trip-record-data.page), or the processed version maintained by Numenta [here](https://github.com/numenta/NAB/tree/master/data).\n* No modifications were made from the Numenta version\n\n#### Wind data\n* Found here on [kaggle](https://www.kaggle.com/sohier/30-years-of-european-wind-generation/metadata)\n* After downloading the FasTrak 5-Minute .txt files the .txt files for each day from 1/1/13-1/8/18 were compiled into one .csv file\n\n\n#### Weather data\n* Maintained by Iowa State University's [IEM](https://mesonet.agron.iastate.edu/request/download.phtml?network=ILASOS)\n* The downloaded data was from the selected network of 8A0 Albertville and the selected date range was 1/1/16 0:15 - 2/16/16 0:55\n\n#### Traffic data\n* Found on [Caltrans PeMS](http://pems.dot.ca.gov/?dnode=Clearinghouse)\n* No modifications were made from the Numenta version\n\n#### Energy data\n* Found on [kaggle](https://www.kaggle.com/robikscube/hourly-energy-consumption/metadata)\n* No modifications were made after downloading pjm_hourly_est.csv\nWe also use PJM electricity demand data found [here](https://dataminer2.pjm.com/feed/inst_load).\n\n\n\n## Current Available Pipelines\n\nThe pipelines are included as **JSON** files, which can be found\nin the subdirectories inside the [pyteller/pipelines](orion/pipelines) folder.\n\nThis is the list of pipelines available so far, which will grow over time:\n\n| name | location | description |\n|------|----------|-------------|\n| Persistence | [pyteller/pipelines/sandbox/persistence](../pipelines/sandbox/persistence) | uses the latest input to the model as the next output\n\n\n# Install\n\n## Requirements\n\n**pyteller** has been developed and tested on [Python 3.5, 3.6, 3.7 and 3.8](https://www.python.org/downloads/)\n\nAlso, although it is not strictly required, the usage of a [virtualenv](https://virtualenv.pypa.io/en/latest/)\nis highly recommended in order to avoid interfering with other software installed in the system\nin which **pyteller** is run.\n\nThese are the minimum commands needed to create a virtualenv using python3.6 for **pyteller**:\n\n```bash\npip install virtualenv\nvirtualenv -p $(which python3.6) pyteller-venv\n```\n\nAfterwards, you have to execute this command to activate the virtualenv:\n\n```bash\nsource pyteller-venv/bin/activate\n```\n\nRemember to execute it every time you start a new console to work on **pyteller**!\n\n<!-- Uncomment this section after releasing the package to PyPI for installation instructions\n## Install from PyPI\n\nAfter creating the virtualenv and activating it, we recommend using\n[pip](https://pip.pypa.io/en/stable/) in order to install **pyteller**:\n\n```bash\npip install pyteller\n```\n\nThis will pull and install the latest stable release from [PyPI](https://pypi.org/).\n-->\n\n## Install from source\n\nWith your virtualenv activated, you can clone the repository and install it from\nsource by running `make install` on the `stable` branch:\n\n```bash\ngit clone git@github.com:signals-dev/pyteller.git\ncd pyteller\ngit checkout stable\nmake install\n```\n\n## Install for Development\n\nIf you want to contribute to the project, a few more steps are required to make the project ready\nfor development.\n\nPlease head to the [Contributing Guide](https://signals-dev.github.io/pyteller/contributing.html#get-started)\nfor more details about this process.\n\n# Quick Start\n\nIn this short tutorial we will guide you through a series of steps that will help you\ngetting started with **pyteller**.\n\n## 1. Load the data\n\nIn the first step we will load the **electricity_demand** data from the **Demo Dataset**.\n\n\n\nImport the `pyteller.data.load_signal` function and call it\n\n```python3\nfrom pyteller.data import load_signal\n\ntrain,test  = load_signal(\n    data=dataset,\n    timestamp_col = 'timestamp',\n    targets='Total Flow',\n    static_variables=None,\n    entity_cols='Location Identifier',\n    train_size=.75\n)\n```\n## 2. Forecast\nOnce we have the data, let us try to use a pyteller pipeline to make a forecast.\n\n\nCreate an instance of the `pyteller.Pyteller` class and pass in arguments that help describe your prediction problem\n\n\n```python3\nfrom pyteller import Pyteller\n\npyteller = Pyteller (\nhyperparameters = hyperparameters,\n    pipeline = 'persistence',\n    pred_length = 3,\n    goal = None,\n    goal_window = None\n)\n\n```\n\n\nNow, since the persistence pipeline does not require a fit method, we are ready to forecast:\n\n```python3\nforecast = pyteller.predict(test_data=test)\n```\n## 3. Evaluate\nNow, we can evaluate the forecasts\n\n```python3\nscores = pyteller.evaluate(train_data= train,test_data=test,forecast=forecast,metrics=['MAPE','MSE'])\n```\n\n\n# What's next?\n\nFor more details about **pyteller** and all its possibilities\nand features, please check the [documentation site](\nhttps://signals-dev.github.io/pyteller/).\n\n\n# History\n\n## 0.1.0 - 2020-11-02\n\nFirst pyteller release to PyPI\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/signals-dev/pyteller",
    "keywords": "pyteller pyteller pyteller",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyteller",
    "package_url": "https://pypi.org/project/pyteller/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyteller/",
    "project_urls": {
      "Homepage": "https://github.com/signals-dev/pyteller"
    },
    "release_url": "https://pypi.org/project/pyteller/0.1.0/",
    "requires_dist": [
      "s3fs (<0.5,>=0.2.2)",
      "baytune (<0.3,>=0.2.3)",
      "mlblocks (<0.4,>=0.3.0)",
      "mlprimitives (<0.3,>=0.2.2)",
      "mongoengine (<0.17,>=0.16.3)",
      "numpy (<1.17,>=1.15.4)",
      "pandas (<0.25,>=0.23.4)",
      "pymongo (<4,>=3.7.2)",
      "scikit-learn (<0.21,>=0.20.1)",
      "tabulate (<0.9,>=0.8.3)",
      "Keras (<2.4,>=2.1.6)",
      "bumpversion (>=0.5.3) ; extra == 'dev'",
      "pip (>=9.0.1) ; extra == 'dev'",
      "watchdog (>=0.8.3) ; extra == 'dev'",
      "m2r (<0.3,>=0.2.0) ; extra == 'dev'",
      "Sphinx (<3,>=1.7.1) ; extra == 'dev'",
      "sphinx-rtd-theme (<0.5,>=0.2.4) ; extra == 'dev'",
      "autodocsumm (>=0.1.10) ; extra == 'dev'",
      "flake8 (>=3.7.7) ; extra == 'dev'",
      "isort (>=4.3.4) ; extra == 'dev'",
      "autoflake (>=1.2) ; extra == 'dev'",
      "autopep8 (>=1.4.3) ; extra == 'dev'",
      "twine (>=1.10.0) ; extra == 'dev'",
      "wheel (>=0.30.0) ; extra == 'dev'",
      "coverage (>=4.5.1) ; extra == 'dev'",
      "tox (>=2.9.1) ; extra == 'dev'",
      "pytest (>=3.4.2) ; extra == 'dev'",
      "pytest-cov (>=2.6.0) ; extra == 'dev'",
      "pytest (>=3.4.2) ; extra == 'test'",
      "pytest-cov (>=2.6.0) ; extra == 'test'"
    ],
    "requires_python": ">=3.5",
    "summary": "Time series forecasting using MLPrimitives",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11571817,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66a19ed10c4652ac12398c42b90a47060b0c780c76bde09e45cdedaf230abd1d",
          "md5": "2250ea60dfbd40079ace146305cc8778",
          "sha256": "35c3ebdc26fba47f65eb7fe1c1f8373ecd9b582df70de485d177507f96e7bde6"
        },
        "downloads": -1,
        "filename": "pyteller-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2250ea60dfbd40079ace146305cc8778",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1124,
        "upload_time": "2020-10-05T09:36:16",
        "upload_time_iso_8601": "2020-10-05T09:36:16.392602Z",
        "url": "https://files.pythonhosted.org/packages/66/a1/9ed10c4652ac12398c42b90a47060b0c780c76bde09e45cdedaf230abd1d/pyteller-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0f3b35290eb5d124ebc6e3ecad167751ef35e16f92d8cbe87aec0622df63425",
          "md5": "3021cb1d8d8d83de73c071b3caf5fdc0",
          "sha256": "01f7c7ffc2b4613ba0cd70e88d2729583fe49e064951543df5581cac66677441"
        },
        "downloads": -1,
        "filename": "pyteller-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3021cb1d8d8d83de73c071b3caf5fdc0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 903,
        "upload_time": "2020-10-05T09:36:18",
        "upload_time_iso_8601": "2020-10-05T09:36:18.682429Z",
        "url": "https://files.pythonhosted.org/packages/a0/f3/b35290eb5d124ebc6e3ecad167751ef35e16f92d8cbe87aec0622df63425/pyteller-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "232e07a4e5c217e61f65a81eeaad97913ff5d04813b7b9ea2a7c7135e74810f4",
          "md5": "986c2c387993b76fce47bc4c9fc5e3dd",
          "sha256": "4d01e900a2f92697bb1d441d87a6f7ff7442342ae31b4955e9b364505fa877ce"
        },
        "downloads": -1,
        "filename": "pyteller-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "986c2c387993b76fce47bc4c9fc5e3dd",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.5",
        "size": 17428,
        "upload_time": "2020-11-02T15:02:18",
        "upload_time_iso_8601": "2020-11-02T15:02:18.585678Z",
        "url": "https://files.pythonhosted.org/packages/23/2e/07a4e5c217e61f65a81eeaad97913ff5d04813b7b9ea2a7c7135e74810f4/pyteller-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b51a11c653b55731977596451a3ff88f699076f1c9d2997be6fc574aaf95cd7c",
          "md5": "3c9ff027e10d74e364e146fff1df2651",
          "sha256": "ba50408b58b2ed2ddd0b7445ba4d9400a30d61ca87395f6481755bf715b4d029"
        },
        "downloads": -1,
        "filename": "pyteller-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3c9ff027e10d74e364e146fff1df2651",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 65014,
        "upload_time": "2020-11-02T15:02:19",
        "upload_time_iso_8601": "2020-11-02T15:02:19.832450Z",
        "url": "https://files.pythonhosted.org/packages/b5/1a/11c653b55731977596451a3ff88f699076f1c9d2997be6fc574aaf95cd7c/pyteller-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "232e07a4e5c217e61f65a81eeaad97913ff5d04813b7b9ea2a7c7135e74810f4",
        "md5": "986c2c387993b76fce47bc4c9fc5e3dd",
        "sha256": "4d01e900a2f92697bb1d441d87a6f7ff7442342ae31b4955e9b364505fa877ce"
      },
      "downloads": -1,
      "filename": "pyteller-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "986c2c387993b76fce47bc4c9fc5e3dd",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.5",
      "size": 17428,
      "upload_time": "2020-11-02T15:02:18",
      "upload_time_iso_8601": "2020-11-02T15:02:18.585678Z",
      "url": "https://files.pythonhosted.org/packages/23/2e/07a4e5c217e61f65a81eeaad97913ff5d04813b7b9ea2a7c7135e74810f4/pyteller-0.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b51a11c653b55731977596451a3ff88f699076f1c9d2997be6fc574aaf95cd7c",
        "md5": "3c9ff027e10d74e364e146fff1df2651",
        "sha256": "ba50408b58b2ed2ddd0b7445ba4d9400a30d61ca87395f6481755bf715b4d029"
      },
      "downloads": -1,
      "filename": "pyteller-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3c9ff027e10d74e364e146fff1df2651",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 65014,
      "upload_time": "2020-11-02T15:02:19",
      "upload_time_iso_8601": "2020-11-02T15:02:19.832450Z",
      "url": "https://files.pythonhosted.org/packages/b5/1a/11c653b55731977596451a3ff88f699076f1c9d2997be6fc574aaf95cd7c/pyteller-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}