{
  "info": {
    "author": "Ryan Morlok",
    "author_email": "ryan.morlok@morlok.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# pytracts\n\n[![Downloads](https://img.shields.io/pypi/dm/pytracts)](https://pypistats.org/packages/pytracts)\n\nA library for defining data contracts in native Python code, based on the [Google ProtoRPC library](https://code.google.com/p/google-protorpc/)\n\n## Define JSON Contracts with Python Objects\n \n```python\nfrom pytracts import messages, to_json, to_dict\n\nclass TeamMessage(messages.Message):\n    name = messages.StringField()\n    colors = messages.StringField(repeated=True)\n    mascot = messages.StringField()\n\ngophers = TeamMessage(name='Minnesota', colors=['maroon', 'gold'], mascot='Goldy Gopher')\n\n# Export data to python dictionary\nprint to_dict.encode_message(gophers)\n#=> {'colors': ['maroon', 'gold'], 'name': 'Minnesota', 'mascot': 'Goldy Gopher'}\n\n# Export data to json string\nprint to_json.encode_message(gophers)\n#=> {\"colors\": [\"maroon\", \"gold\"], \"name\": \"Minnesota\", \"mascot\": \"Goldy Gopher\"}\n\n# Load data from dict\nbadgers = to_dict.decode_message(TeamMessage, {\n    \"name\": \"Wisconsin\", \n    \"mascot\": \"Bucky Badger\", \n    \"colors\": [\"cardinal\", \"white\"]})\nprint badgers.name\n#=> Wisconsin\n\n# Load data from JSON\nbadgers = to_json.decode_message(TeamMessage, '{\n    \"name\": \"Wisconsin\", \n    \"mascot\": \"Bucky Badger\", \n    \"colors\": [\"cardinal\", \"white\"]}')\nprint badgers.mascot\n#=> Bucky Badger\n```\n\n## Support for nested messages\n\n```python\nfrom pytracts import messages\n\nclass AddressMessage(messages.MessageField)\n    street = messages.StringField()\n    city = messages.StringField()\n    state = messages.StringField()\n    zip = messages.IntegerField()\n\n    \nclass PersonMessage(messages.Message):\n    home_address = messages.MessageField(AddressMessage)\n    work_address = messages.MessageField(AddressMessage)\n\nleslie = PersonMessage(\n    home_address=AddressMessage(\n        street='123 Sesame St', \n        city='Pawnee', state='IN', zip=22113),\n    work_address=AddressMessage(\n        street='987 Brookstone Ln', \n        city='Pawnee', state='IN', zip=22113)\n)\n```\n\n## Support for Arbitrary Data Types and Unstructured JSON\n\nArbitrary types:\n\n```python\nfrom pytracts import messages, to_json\n\nclass BoxMessage(messages.Message):\n    height = messages.UntypedField()\n    width = messages.UntypedField()\n\nb = BoxMessage(height=123, width=\"65%\")\n\nprint to_json.encode_message(b)\n#=> {\"width\": \"65%\", \"height\": 123}\n```\n\nUnstructured dictionaries:\n\n```python\nfrom pytracts import messages, to_json\n\nclass UserMessage(messages.Message):\n    name = messages.StringField()\n    email = messages.StringField()\n    metadata = messages.DictField()\n\nbob = UserMessage(name='Bob', email='bob@example.com', metadata={'height': 72, 'weight': 180})\n\nprint to_json.encode_message(bob)\n#=> {\"metadata\": {\"weight\": 180, \"height\": 72}, \"email\": \"bob@example.com\", \"name\": \"Bob\"}\n```\n\n## Annotate Flask Handlers for JSON serialization\n\n```python\nfrom flask import Flask, url_for\nimport werkzeug\n\nfrom pytracts import messages, flask as pt\n\nclass TeamMessage(messages.Message):\n    id = messages.StringField()\n    name = messages.StringField()\n    colors = messages.StringField(repeated=True)\n    mascot = messages.StringField()\n\n\nclass TeamsResponseMessage(messages.Message):\n    page = messages.IntegerField()\n    teams = messages.MessageField(TeamMessage, repeated=True)\n\n\ngophers = TeamMessage(id='gophers', name='Minnesota', colors=['maroon', 'gold'], mascot='Goldy Gopher')\nbadgers = TeamMessage(id='badgers', name='Wisconsin', colors=['cardinal', 'gold'], mascot='Bucky Badger')\nteams = dict([(t.id, t) for t in [gophers, badgers]])\n\n# Annotate endpoints to automatically serialize to JSON\n@pt.endpoint('/v1/teams')\ndef get_teams():\n\n    response = TeamsResponseMessage()\n    response.page = 1\n    response.teams = list(teams.values())\n\n    return response\n\n# Use Webapp2 exceptions for other status codes\n@pt.endpoint('/v1/teams/<team_id>')\ndef get_team(team_id):\n    if team_id in teams:\n        return teams[team_id]\n    else:\n        raise werkzeug.exceptions.NotFound(f'Team {team_id} not found')\n\n# Take a message from the JSON body of the request\n@pt.endpoint('/v1/teams', methods=['POST'], body={'team_details': TeamMessage})\ndef create_team(team_details):\n    # Create the team based on details\n    if team_details.id in teams:\n        raise werkzeug.exceptions.Forbidden(f'Team {team_details.id} already exists')\n\n    teams[team_details.id] = team_details\n    # Return 201 status with a location header\n    return 201, {'Location': url_for('get_team', team_id=team_details.id)}\n\napp = Flask(__name__)\npt.register_endpoints(app)\n```\n\nSee [full sample app](./samples/flask/README.md) for more details.\n\n# PATCH support\n\nCheck if properties have any value set, as opposed to the default value\n\n```python\nt = TeamMessage()\n\nprint TeamMessage.name.is_set(t)\n#=> False\n\nprint t.name\n#=> None\n\nt.name = None\n\nprint TeamMessage.name.is_set(t)\n#=> True\n\nprint t.name\n#=> None\n```\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rmorlok/pytracts",
    "keywords": "protocol json contract",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytracts",
    "package_url": "https://pypi.org/project/pytracts/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytracts/",
    "project_urls": {
      "Documentation": "https://github.com/rmorlok/pytracts",
      "Homepage": "https://github.com/rmorlok/pytracts",
      "Source": "https://github.com/rmorlok/pytracts",
      "Tracker": "https://github.com/rmorlok/pytracts/issues"
    },
    "release_url": "https://pypi.org/project/pytracts/2.0.0/",
    "requires_dist": [
      "six",
      "pytest (>=6.2.2) ; extra == 'all'",
      "pycodestyle ; extra == 'all'",
      "pytest-cov ; extra == 'all'",
      "pytest (>=6.2.2) ; extra == 'test'",
      "pycodestyle ; extra == 'test'",
      "pytest-cov ; extra == 'test'"
    ],
    "requires_python": "!=3.0.*,!=3.1.*,>=2.7",
    "summary": "Library to define data contracts for JSON and build RESTful services with Webapp2 or Flask",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14636792,
  "releases": {
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2282ca61629d253f98ec3f3db0637da8961b2144e0993faffa3ad5358f89552",
          "md5": "b54d13cf039fabc199c2fee72c93c334",
          "sha256": "c64ce0a2f85f058662a2eed8e78a058b4557b980ac52327f70438864253541b9"
        },
        "downloads": -1,
        "filename": "pytracts-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b54d13cf039fabc199c2fee72c93c334",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70592,
        "upload_time": "2015-04-09T03:19:11",
        "upload_time_iso_8601": "2015-04-09T03:19:11.821488Z",
        "url": "https://files.pythonhosted.org/packages/f2/28/2ca61629d253f98ec3f3db0637da8961b2144e0993faffa3ad5358f89552/pytracts-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fc6383b2fa13803f058dd76e53040a27db4cad331b7d6c85678cdbb0e191e38",
          "md5": "36f495597bdc4afcb9e73e7cfbcbc4d3",
          "sha256": "82442acae9659eb1b26825be02746d98796853b46bdab119276a4a63eb0c3d1a"
        },
        "downloads": -1,
        "filename": "pytracts-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "36f495597bdc4afcb9e73e7cfbcbc4d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70625,
        "upload_time": "2015-04-09T15:52:06",
        "upload_time_iso_8601": "2015-04-09T15:52:06.793213Z",
        "url": "https://files.pythonhosted.org/packages/7f/c6/383b2fa13803f058dd76e53040a27db4cad331b7d6c85678cdbb0e191e38/pytracts-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbd3b3d2751c17a8d613237f96790afee8f816124e5f295c6b20ddd36c61dcf1",
          "md5": "67e2d2e03bd0ebfaf35a866a10df7502",
          "sha256": "f1f33528d6aefc02a049bcecfad41bdaeef2023f72fc8951777e8f859bf317a2"
        },
        "downloads": -1,
        "filename": "pytracts-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "67e2d2e03bd0ebfaf35a866a10df7502",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 70914,
        "upload_time": "2015-04-16T18:56:31",
        "upload_time_iso_8601": "2015-04-16T18:56:31.310779Z",
        "url": "https://files.pythonhosted.org/packages/bb/d3/b3d2751c17a8d613237f96790afee8f816124e5f295c6b20ddd36c61dcf1/pytracts-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f2cb88559e608f4c3f466d4cd80f5d5bf1cc58140751f2ebeca99d7266269b2",
          "md5": "6e1d70b6b0a799b25c34a101d5915762",
          "sha256": "89873a103ddf85755880c1e750305d4c0445a966da05f6d7b063448edc5d65d9"
        },
        "downloads": -1,
        "filename": "pytracts-2.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e1d70b6b0a799b25c34a101d5915762",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": "!=3.0.*,!=3.1.*,>=2.7",
        "size": 90723,
        "upload_time": "2022-08-03T03:53:07",
        "upload_time_iso_8601": "2022-08-03T03:53:07.825551Z",
        "url": "https://files.pythonhosted.org/packages/7f/2c/b88559e608f4c3f466d4cd80f5d5bf1cc58140751f2ebeca99d7266269b2/pytracts-2.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f2cb88559e608f4c3f466d4cd80f5d5bf1cc58140751f2ebeca99d7266269b2",
        "md5": "6e1d70b6b0a799b25c34a101d5915762",
        "sha256": "89873a103ddf85755880c1e750305d4c0445a966da05f6d7b063448edc5d65d9"
      },
      "downloads": -1,
      "filename": "pytracts-2.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6e1d70b6b0a799b25c34a101d5915762",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": "!=3.0.*,!=3.1.*,>=2.7",
      "size": 90723,
      "upload_time": "2022-08-03T03:53:07",
      "upload_time_iso_8601": "2022-08-03T03:53:07.825551Z",
      "url": "https://files.pythonhosted.org/packages/7f/2c/b88559e608f4c3f466d4cd80f5d5bf1cc58140751f2ebeca99d7266269b2/pytracts-2.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}