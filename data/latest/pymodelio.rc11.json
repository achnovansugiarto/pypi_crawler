{
  "info": {
    "author": "Gabriel MartÃ­n Moran",
    "author_email": "moran.gabriel.95@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![Python tests](https://github.com/GabrielMartinMoran/pymodelio/actions/workflows/python.yml/badge.svg?branch=main)](https://github.com/GabrielMartinMoran/pymodelio/actions/workflows/python.yml)\n[![codecov](https://codecov.io/gh/GabrielMartinMoran/pymodelio/branch/main/graph/badge.svg?token=VVKW3GDMLD)](https://codecov.io/gh/GabrielMartinMoran/pymodelio)\n\n# pymodelio\n\nA simple Python module for defining domain models, serializing, deserializing and validating them.\n\n## What is this module for?\n\nHave you ever needed to validate a user input, the body of a request, data obtained from a service like a database or\nan external api, without needing to define serializers and deserializers for your class nested data structure?\nWell, that's what `pymodelio` is built for, simplicity when defining your domain models and the surrounding\nrestrictions.\n\n## How to install the module\n\nInstalling the module is simple as running the following script on your terminal:\n\n```shell\npip install pymodelio\n```\n\n## How to use the module\n\n### Declaring the models\n\nModels can be declared using the `pymodelio_model` decorator or by inheriting from `BaseModel`. In the example below,\nthe decorator way it's used for not complicating the inheritance tree, but it would be the same if instead of using the\ndecorator in each model, we just declare `Component` class as `class Component(BaseModel)`.\n\n```py\nimport uuid\nfrom typing import List\n\nfrom pymodelio.attribute import Attribute\nfrom pymodelio.model import pymodelio_model\nfrom pymodelio.validators import ListValidator, StringValidator\nfrom pymodelio.validators.int_validator import IntValidator\nfrom pymodelio.validators.validator import Validator\n\n\n@pymodelio_model\nclass Component:\n    __serial_no: Attribute[str](\n        validator=StringValidator(fixed_len=36, regex=r'^[a-z0-9-]+$'),\n        default_factory=lambda: uuid.uuid4().__str__()\n    )\n\n    @property\n    def serial_no(self) -> str:\n        return self.__serial_no\n\n\n@pymodelio_model\nclass CPU(Component):\n    _frequency: Attribute[int](validator=IntValidator(min_value=0))\n    cores: Attribute[int](validator=IntValidator(min_value=0))\n\n    @property\n    def frequency(self) -> int:\n        return self._frequency\n\n\n@pymodelio_model\nclass RAM(Component):\n    frequency: Attribute[int](validator=IntValidator(min_value=0))\n    size: Attribute[int](validator=IntValidator(min_value=0))\n\n\n@pymodelio_model\nclass Disk(Component):\n    size: Attribute[int](validator=IntValidator(min_value=0))\n\n\n@pymodelio_model\nclass Computer(Component):\n    _cpu: Attribute[CPU](validator=Validator(expected_type=CPU))\n    _rams: Attribute[List[RAM]](validator=ListValidator(elements_type=RAM, allow_empty=False))\n    _disks: Attribute[List[Disk]](validator=ListValidator(elements_type=Disk))\n\n    @property\n    def cpu(self) -> CPU:\n        return self._cpu\n\n    @property\n    def rams(self) -> List[RAM]:\n        return self._rams\n\n    @property\n    def disks(self) -> List[Disk]:\n        return self._disks\n```\n\n### Let's use these models\n\nYou can do it by using the class constructors\n\n```py\ncomputer = Computer(\n    serial_no='123e4567-e89b-12d3-a456-426614174000',\n    cpu=CPU(frequency=3500, cores=8),\n    rams=[\n        RAM(frequency=1600, size=8),\n        RAM(frequency=1800, size=16)\n    ],\n    disks=[\n        Disk(size=1024),\n        Disk(size=512)\n    ]\n)\n```\n\nOr you can call `from_dict` factory constructor for instantiating the models by deserializing a python dictionary\n\n```py\ncomputer = Computer.from_dict({\n    'serial_no': '123e4567-e89b-12d3-a456-426614174000',\n    'cpu': {\n        'frequency': 3500,\n        'cores': 8\n    },\n    'rams': [\n        {\n            'frequency': 1600,\n            'size': 8\n        },\n        {\n            'frequency': 1800,\n            'size': 16\n        }\n    ],\n    'disks': [\n        {\n            'size': 1024\n        },\n        {\n            'size': 512\n        }\n    ]\n})\n```\n\n### Wait a second, what is happening here?\n\nYou probably noticed that in the example above, there are some protected and private attributes that are being set by\nproviding their names without underscores.\n\n**Why is it doing that?**\n\nSome known Python modules that do similar things like pymodelio forces you to specify the protected or private\nattributes by passing some parameter in the type or validator description. The idea of pymodelio is to let you use the\nlanguage conventions for defining that without losing the capability of automatically handling initialization if you\nwant that.\n\nYou can always specify which attributes are not exposed by the constructor using their public form by passing the\nparameter `initable=False` to the Attribute constructor.\n\nThis module hugs the open/closed principle by allowing you to not define all your attributes public, but also letting\nyou initialize them in their public form (based on python code writing conventions).\n\nOther great principle where this module is stood on, is that an instance of a domain model shouldn't exist if it is not\nvalid. For ensuring that, pymodelio automatically validates the instantiated models if you don't specify the opposite (\nby passing the parameter `auto_validate=False`). So have in mind that for performance improvements, we could disable\nauto validation in nested models initialization when using the constructor way of instantiating the `Computer` because\nwhen the parent validator is called, it will validate the whole structure. Here you have the modified code:\n\n```py\ncomputer = Computer(\n    serial_no='123e4567-e89b-12d3-a456-426614174000',\n    cpu=CPU(frequency=3500, cores=8, auto_validate=False),\n    rams=[RAM(frequency=1600, size=8, auto_validate=False), RAM(frequency=1800, size=16, auto_validate=False)],\n    disks=[Disk(size=1024, auto_validate=False), Disk(size=512, auto_validate=False)]\n)\n```\n\nYou can also pass this parameter for preventing automatic validations to the `from_dict` factory constructor, like this:\n\n```py\ncomputer = Computer.from_dict({\n    'serial_no': '123e4567-e89b-12d3-a456-426614174000',\n    'cpu': {'frequency': 3500, 'cores': 8},\n    'rams': [{'frequency': 1600, 'size': 8}, {'frequency': 1800, 'size': 16}],\n    'disks': [{'size': 1024}, {'size': 512}]\n}, auto_validate=False)\n```\n\nOther thing that differentiates pymodelio from other modules that have a similar job, is that when you use pymodelio,\nyou have available a lot of already implementing validators that simplifies most cases like validating an email, the\nlength of a string, the range of a number, the emptiness of a list, etc. Even if a validator is not already implemented,\nyou can do it in a very easy way by inheriting from `Validator` class or using some exposed middleware model\ninitialization methods. If you are interested on this, please scroll down until you find the *validation* section.\n\n### Customizing the model's initialization workflow\n\n```py\n@pymodelio_model\nclass Model:\n    model_attr: Attribute[str]\n\n    @classmethod\n    def __before_init__(cls, *args, **kwargs) -> None:\n        # This method is called before everything when the model constructor is called\n        # It receives the same parameters the constructor gets\n        pass\n\n    @classmethod\n    def __before_validate__(cls) -> None:\n        # This method is called after initializing the model attributes but just before\n        # performing the model validations (it will be executed even if \n        # auto_validate = False)\n        pass\n\n    @classmethod\n    def __once_validated__(cls) -> None:\n        # This method is called just after performing the model validations initializing\n        # the model attributes but before performing the model validations (it will be\n        # executed even if auto_validate = False)\n        pass\n```\n\n### Non initable attributes\n\n```py\n@pymodelio_model\nclass Model:\n    non_initable_model_attr: Attribute[str](initable=False, default_factory=lambda: 'Non initable default value')\n\n\n# WARNING: This will raise a NameError('non_initable_model_attr attribute is not\n#          initable for class Model')\nModel(non_initable_model_attr='custom value')\n\n\n```\n\n## Considerations\n\nWhen instantiating a model specifying `auto_validate = False`, the model won't be automatically validated during\ninitialization.\n\nWhen a class attribute has the annotation `Attribute[<type>]`, it will be transformed into an instance attribute during\nthe model initialization.\n\nWhen defining a protected or private model attribute with underscore or double underscore respectively, if that property\ncan be set by the model constructor, it's value will be obtained from an attribute with the same name but without\nunderscores. For instance:\n\n```py\n@pymodelio_model\nclass Component:\n    __serial_no: Attribute[str]\n    _model_name: Attribute[str]\n\n    @property\n    def serial_no(self) -> str:\n        return self.__serial_no\n\n    @property\n    def model_name(self) -> str:\n        return self._model_name\n\n\ncomponent = Component(serial_no='123e4567-e89b-12d3-a456-426614174000', model_name='ABC123')\n\nprint(component.serial_no)  # It will print '123e4567-e89b-12d3-a456-426614174000'\nprint(component.model_name)  # It will print 'ABC123'\n```\n\n## Validation\n\n### Customizing the validation process\n\nCustom validators can be implemented by inheriting from the `Validator` class. Even that, there is also other way of\nperforming custom validations that consists on implementing `_when_validating_attr` method in the defined model. This\nmethod is called after the attribute validator is called (if the attribute does not have a validator, this method is\ncalled anyway).\n\n```py\ndef _when_validating_attr(self, internal_attr_name: str, exposed_attr_name: str, attr_value: Any, attr_path: str,\n                          parent_path: str, pymodel_attribute: Attribute) -> None:\n    pass\n```\n\n## Available validators\n\n### Validator\n\nA generic validator for any type passed by parameter. It is also capable of validating other models. Validated value\nmust implement `validate` method in order to be considered a model by this validator.\nOther validators inherit from this one.\n\n```py\nValidator(expected_type: Union[type, List[type]] = None, nullable: bool = False, message: Optional[str] = None)\n```\n\n### StringValidator\n\n```py\nStringValidator(min_len: Optional[int] = None, max_len: Optional[int] = None, fixed_len: Optional[int] = None, regex:\nOptional[str] = None, nullable: bool = False, message: Optional[str] = None)\n```\n\n### NumericValidator\n\n```py\nNumericValidator(expected_type: type, min_value: Optional[Number] = None, max_value: Optional[\n    Number] = None, expected_type: Union[type, List[type]] = None, nullable: bool = False, message: Optional[\n    str] = None)\n```\n\n### IntValidator\n\nA subclass of NumericValidator specific for integers.\n\n```py\nIntValidator(min_value: Optional[int] = None, max_value: Optional[int] = None, nullable: bool = False, message:\nOptional[str] = None)\n```\n\n### FloatValidator\n\nA subclass of NumericValidator specific for float numbers.\n\n```py\nFloatValidator(min_value: Optional[float] = None, max_value: Optional[float] = None, nullable: bool = False, message:\nOptional[str] = None)\n```\n\n### DatetimeValidator\n\n```py\nDatetimeValidator(nullable: bool = False, message: Optional[str] = None)\n```\n\n### DictValidator\n\n```py\nDictValidator(nullable: bool = False, message: Optional[str] = None)\n```\n\n### IterableValidator\n\nA validator for an of any type that allows nested models. Validated children must implement `validate` method in\norder to be considered a model by this validator.\n\n```py\nIterableValidator(expected_type: Union[type, List[type]] = None, elements_type: Union[\n    type, List[type]] = None, allow_empty: bool = True, nullable: bool = False, message: Optional[str] = None)\n```\n\n### ListValidator\n\nA subclass of IterableValidator specific for lists.\n\n```py\nListValidator(elements_type: Union[type, List[type]] = None, allow_empty: bool = True, nullable: bool = False, message:\nOptional[str] = None)\n```\n\n### EmailValidator\n\n```py\nEmailValidator(nullable: bool = False, message: Optional[str] = None)\n```\n\n### BoolValidator\n\n```py\nBoolValidator(nullable: bool = False, message: Optional[str] = None)\n```\n\n## Serialization and de-serialization\n\nFor serialization, pymodelio models implement a `to_dict()` method that serializes the public attributes and\nproperties (defined using the `property` decorator). For the example at the beginning of this documentation,\ncalling `to_dict()` method in a computer's instance returns something like:\n\n```py\n{\n    'cpu': {\n        'cores': 8,\n        'frequency': 3500,\n        'serial_no': '0f3b6ef1-dea3-4cdd-be53-ef85079731c4'\n    },\n    'disks': [\n        {\n            'serial_no': '011639e0-82dd-44c0-ba46-3580482c0add',\n            'size': 1024\n        },\n        {\n            'serial_no': 'd76474eb-b854-49d1-a0df-917fe8526621',\n            'size': 512\n        }\n    ],\n    'rams': [\n        {\n            'frequency': 1600,\n            'serial_no': '8a2639e0-aa0c-450a-8ee1-8dd536578bb8',\n            'size': 8\n        },\n        {\n            'frequency': 1800,\n            'serial_no': '49140714-263e-4fbb-b366-06916c4e81f5',\n            'size': 16\n        }\n    ],\n    'serial_no': 'computer-001'\n}\n```\n\nIf a defined model implements `to_dict()` method, this overridden one will be used instead of the default\none. The signature for overriding this method should be:\n\n```py\ndef to_dict(self) -> dict:\n    return {}  # Returns the serialized model\n\n```\n\nFor de-serialization, pymodelio models implement a `from_dict()` factory constructor that as it name says, it can be\nused\nfor decoding python dictionaries into model instances as used in the first example shown. As `to_dict()`, `from_dict()`\ncan also be implemented by a model and in that case, the model one will be used instead. The signature for overriding\nthis method should be:\n\n```py\n@classmethod\ndef from_dict(cls, data: dict, auto_validate: bool = True) -> CustomModel:\n    return CustomModel(**data)  # Replace CustomModel with your model and call the constructor as you need\n```\n\n## Let's compare the same code using raw python against using pymodelio\n\nFor this comparison, we are not implementing serialization and de-serialization in the raw Python models (pymodelio\nhandles this automatically for its models).\n\n### Using raw python\n\n```py\nclass RawPythonChildModel:\n\n    def __int__(self, public_child_attr: int) -> None:\n        self.public_child_attr = public_child_attr\n        self.validate()\n\n    def validate(self) -> None:\n        assert isinstance(self.public_child_attr, int), 'public_child_attr is not a valid int'\n\n\nclass RawPythonModel:\n    _PUBLIC_ATTR_MIN_VALUE = 0\n    _PUBLIC_ATTR_MAX_VALUE = 0\n\n    _PROTECTED_ATTR_FIXED_LENGTH = 5\n    _PROTECTED_ATTR_REGEX = '^[A-Z]+$'  # Only capitalized chars\n\n    def __init__(self, public_attr: int, protected_attr: str, private_attr: datetime,\n                 child_model_attr: RawPythonChildModel, children_model_attr: List[RawPythonChildModel],\n                 optional_attr: dict = None) -> None:\n        self.public_attr = public_attr\n        self._protected_attr = protected_attr\n        self.__private_attr = private_attr\n        self.child_model_attr = child_model_attr\n        self.children_model_attr = children_model_attr\n        self.optional_attr = {} if optional_attr is None else optional_attr\n        self.non_initable_attr = []\n        self.validate()\n\n    def validate(self) -> None:\n        assert isinstance(self.public_attr, int), 'public_child_attr is not a valid int'\n        assert self.public_attr >= self._PUBLIC_ATTR_MIN_VALUE,\n        f'public_child_attr is lower than {self._PUBLIC_ATTR_MIN_VALUE}'\n\n        assert self.public_attr <= self._PUBLIC_ATTR_MAX_VALUE,\n        f'public_child_attr is greater than {self._PUBLIC_ATTR_MAX_VALUE}'\n\n        assert isinstance(self._protected_attr, str), '_protected_attr is not a valid str'\n        assert len(self._protected_attr) == self._PROTECTED_ATTR_FIXED_LENGTH,\n        f'_protected_attr length is different than {self._PROTECTED_ATTR_FIXED_LENGTH}'\n        assert re.compile(self._PROTECTED_ATTR_REGEX).match(self._protected_attr) is not None,\n        '_protected_attr does not match configured regex'\n\n        assert isinstance(self.child_model_attr, RawPythonChildModel),\n        'child_model_attr is not a valid RawPythonChildModel'\n        self.child_model_attr.validate()\n\n        assert isinstance(self.children_model_attr, list), 'children_model_attr is not a valid list'\n        for child_model in self.children_model_attr:\n            child_model.validate()\n\n        assert isinstance(self.__private_attr, datetime), '__private_attr is not a valid datetime'\n        \n        assert isinstance(self.optional_attr, dict), 'optional_attr is not a valid dict'\n```\n\n### Using pymodelio\n\npymodelio model validation errors also give more information about the full path of nested structures. In case of lists,\nincluding the index of the list element where the error occurred.\n\n```py\n@pymodelio_model\nclass PymodelioChildModel:\n    public_child_attr: Attribute[int](validator=IntValidator())\n\n\n@pymodelio_model\nclass PymodelioModel:\n    public_attr: Attribute[int](validator=IntValidator(min_value=0, max_value=10))\n    _protected_attr: Attribute[str](validator=StringValidator(fixed_len=5, regex='^[A-Z]+$'))  # Only capitalized chars\n    __private_attr: Attribute[datetime](validator=DatetimeValidator())\n    child_model_attr: Attribute[PymodelioChildModel](validator=Validator(expected_type=PymodelioChildModel))\n    children_model_attr: Attribute[List[PymodelioChildModel]](\n        validator=ListValidator(elements_type=PymodelioChildModel))\n    optional_attr: Attribute[dict](validator=DictValidator())\n    non_initable_attr: Attribute[List[str]](initable=False, default_factory=list)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GabrielMartinMoran/pymodelio",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymodelio",
    "package_url": "https://pypi.org/project/pymodelio/",
    "platform": null,
    "project_url": "https://pypi.org/project/pymodelio/",
    "project_urls": {
      "Homepage": "https://github.com/GabrielMartinMoran/pymodelio"
    },
    "release_url": "https://pypi.org/project/pymodelio/0.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple Python module for defining domain models, serializing, deserializing and validating them",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15012092,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8155d66273ec1c98c97e81d0265835ee2c00dd80dc4b30dbb4081cae418387a2",
          "md5": "b08dd5d4ad264a73965a05911627191f",
          "sha256": "2da5621343458f3de6d29914014dec3cfd4b10260b51851286e4267274aca18c"
        },
        "downloads": -1,
        "filename": "pymodelio-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b08dd5d4ad264a73965a05911627191f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12259,
        "upload_time": "2022-06-25T23:58:10",
        "upload_time_iso_8601": "2022-06-25T23:58:10.070726Z",
        "url": "https://files.pythonhosted.org/packages/81/55/d66273ec1c98c97e81d0265835ee2c00dd80dc4b30dbb4081cae418387a2/pymodelio-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ff09438707b2abf759b3eb29a12415da619bbae13f6678421baff40520be294",
          "md5": "0711b214247837617f0bc2a50109b2bd",
          "sha256": "cad8bc30fa592c39bacd932229f86a83f551d983a23496992902e6379ec6165f"
        },
        "downloads": -1,
        "filename": "pymodelio-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0711b214247837617f0bc2a50109b2bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13665,
        "upload_time": "2022-06-26T13:05:13",
        "upload_time_iso_8601": "2022-06-26T13:05:13.481282Z",
        "url": "https://files.pythonhosted.org/packages/9f/f0/9438707b2abf759b3eb29a12415da619bbae13f6678421baff40520be294/pymodelio-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d55fcc4ed44c0c6928fddb4d1ab575427f833be401a08b12342fe7f4b6a04bca",
          "md5": "378996da4c87c97ed92374536fd14649",
          "sha256": "e19ebdd1aab4dde01c0201fbc024c0c0db6faff915a032876b7f8054758f1750"
        },
        "downloads": -1,
        "filename": "pymodelio-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "378996da4c87c97ed92374536fd14649",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13689,
        "upload_time": "2022-06-26T19:32:31",
        "upload_time_iso_8601": "2022-06-26T19:32:31.105912Z",
        "url": "https://files.pythonhosted.org/packages/d5/5f/cc4ed44c0c6928fddb4d1ab575427f833be401a08b12342fe7f4b6a04bca/pymodelio-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "583e9717863df585d8d878f56470ea090f4630befad6b04fb6dcbce6d44c2402",
          "md5": "27421618669f4ebca0a865ddbe92fd4b",
          "sha256": "4da7dcdefd7dc8565e498669129e9368439da5559b1f64878d9be260ea91f50c"
        },
        "downloads": -1,
        "filename": "pymodelio-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "27421618669f4ebca0a865ddbe92fd4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13714,
        "upload_time": "2022-06-27T11:28:22",
        "upload_time_iso_8601": "2022-06-27T11:28:22.145823Z",
        "url": "https://files.pythonhosted.org/packages/58/3e/9717863df585d8d878f56470ea090f4630befad6b04fb6dcbce6d44c2402/pymodelio-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2faecc5c4bbb614b77f94f54763d7cd8bb7e239b779935e53106dfe0f4c614a",
          "md5": "4a657db5666c85b86364d3c668e090d3",
          "sha256": "66104248c76bcb6c0881adf7dc928ce1b62c2dcefc0664023f81fe749ac5f0cb"
        },
        "downloads": -1,
        "filename": "pymodelio-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a657db5666c85b86364d3c668e090d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14626,
        "upload_time": "2022-06-29T12:43:10",
        "upload_time_iso_8601": "2022-06-29T12:43:10.278450Z",
        "url": "https://files.pythonhosted.org/packages/a2/fa/ecc5c4bbb614b77f94f54763d7cd8bb7e239b779935e53106dfe0f4c614a/pymodelio-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42a7c34b995996efb9210d307c9b0cd78ec10b5e5ac12faee3a1d32892dc0acc",
          "md5": "936a1261b8f5d959f5dfa7581497dbbe",
          "sha256": "41b635dcce78f85ee4abdfd3a4ceeb69d5cdcf3cadfeef1ba9d9792ae0e29426"
        },
        "downloads": -1,
        "filename": "pymodelio-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "936a1261b8f5d959f5dfa7581497dbbe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 15601,
        "upload_time": "2022-06-30T01:32:56",
        "upload_time_iso_8601": "2022-06-30T01:32:56.783279Z",
        "url": "https://files.pythonhosted.org/packages/42/a7/c34b995996efb9210d307c9b0cd78ec10b5e5ac12faee3a1d32892dc0acc/pymodelio-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42ce69b56886bd4037be1b184d849be23a872a3a469276c06ba3c13caf9d7f0b",
          "md5": "121d25ec3d5e1933ee44463952fb4530",
          "sha256": "31e3628bdc7be61815f9481e7c13b1628a9b3bf63ca733d784a3ddc2bebe8460"
        },
        "downloads": -1,
        "filename": "pymodelio-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "121d25ec3d5e1933ee44463952fb4530",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16152,
        "upload_time": "2022-06-30T15:34:42",
        "upload_time_iso_8601": "2022-06-30T15:34:42.788548Z",
        "url": "https://files.pythonhosted.org/packages/42/ce/69b56886bd4037be1b184d849be23a872a3a469276c06ba3c13caf9d7f0b/pymodelio-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b59d31ca11e52c3e44754f56121f5c60e8218988d4adb147157e5f3766efb64",
          "md5": "b33c5179302d112a5b4c7d77403f9315",
          "sha256": "99f5e6f867d8849fc31f15ef8f8010a92f51e59c3fae301535f4f52c118d11fd"
        },
        "downloads": -1,
        "filename": "pymodelio-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b33c5179302d112a5b4c7d77403f9315",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16515,
        "upload_time": "2022-06-30T23:24:47",
        "upload_time_iso_8601": "2022-06-30T23:24:47.208114Z",
        "url": "https://files.pythonhosted.org/packages/5b/59/d31ca11e52c3e44754f56121f5c60e8218988d4adb147157e5f3766efb64/pymodelio-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d6379581e25dac56a3245e6d310147226d88ea7828dceb84ec6b1b302c6013c",
          "md5": "88794d8d7a5a58e7734bf7af95cff0d7",
          "sha256": "a0c3f4216d7f9c60d14d0fb07a6dc67b4519829548344c1426c8493d3058b40c"
        },
        "downloads": -1,
        "filename": "pymodelio-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88794d8d7a5a58e7734bf7af95cff0d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18269,
        "upload_time": "2022-07-01T20:19:52",
        "upload_time_iso_8601": "2022-07-01T20:19:52.507360Z",
        "url": "https://files.pythonhosted.org/packages/6d/63/79581e25dac56a3245e6d310147226d88ea7828dceb84ec6b1b302c6013c/pymodelio-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b18e4b4993112fb8669042b98215db2fec554f22fc87a81a4c920bd1e6aad2cc",
          "md5": "52b92a4e7572fb97079fb6f3cfed2086",
          "sha256": "aff9192868eaefa01810c4e70494248e3984eef5c0087f173c758778b5126170"
        },
        "downloads": -1,
        "filename": "pymodelio-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "52b92a4e7572fb97079fb6f3cfed2086",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18307,
        "upload_time": "2022-07-07T19:32:39",
        "upload_time_iso_8601": "2022-07-07T19:32:39.700007Z",
        "url": "https://files.pythonhosted.org/packages/b1/8e/4b4993112fb8669042b98215db2fec554f22fc87a81a4c920bd1e6aad2cc/pymodelio-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58aca44fda4f6cabc71ab08531f60d24c06afa3b657fff138c8da9bd800dd10c",
          "md5": "d1491023aa96dff3a62240bbb52615ea",
          "sha256": "d04996adc1bbff2b571133edc38148e0b834263e065b2abc8d21bc7ecf7b4717"
        },
        "downloads": -1,
        "filename": "pymodelio-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1491023aa96dff3a62240bbb52615ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18309,
        "upload_time": "2022-09-06T22:09:06",
        "upload_time_iso_8601": "2022-09-06T22:09:06.029956Z",
        "url": "https://files.pythonhosted.org/packages/58/ac/a44fda4f6cabc71ab08531f60d24c06afa3b657fff138c8da9bd800dd10c/pymodelio-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58aca44fda4f6cabc71ab08531f60d24c06afa3b657fff138c8da9bd800dd10c",
        "md5": "d1491023aa96dff3a62240bbb52615ea",
        "sha256": "d04996adc1bbff2b571133edc38148e0b834263e065b2abc8d21bc7ecf7b4717"
      },
      "downloads": -1,
      "filename": "pymodelio-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d1491023aa96dff3a62240bbb52615ea",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18309,
      "upload_time": "2022-09-06T22:09:06",
      "upload_time_iso_8601": "2022-09-06T22:09:06.029956Z",
      "url": "https://files.pythonhosted.org/packages/58/ac/a44fda4f6cabc71ab08531f60d24c06afa3b657fff138c8da9bd800dd10c/pymodelio-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}