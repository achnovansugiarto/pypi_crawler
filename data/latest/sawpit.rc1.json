{
  "info": {
    "author": "Rob Anderson",
    "author_email": "opensource@robanderson.dev",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Build status](https://github.com/jamsidedown/sawpit/actions/workflows/python-package.yml/badge.svg?branch=main)](https://github.com/jamsidedown/sawpit/actions/workflows/python-package.yml)\n[![License: MIT](https://img.shields.io/badge/License-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)\n\n# sawpit\n## Work in progress fork/continuation of [pywsitest](https://github.com/gridsmartercities/pywsitest)\n\nA python API to assist with automated websocket integration testing\n\n## Installation\n```\n// TODO\n```\n\n## Package contents\n### [WSTest](https://github.com/jamsidedown/sawpit/blob/main/sawpit/ws_test.py)\nWSTest is the main test running class in sawpit. It currently has the following methods:\n- **with_parameter**: add a query parameter to the connection\n- **with_header**: add a header to the connection\n- **with_response**: add an expected response to the test runner\n- **with_message**: add a message for the test runner to send on connection\n- **with_request**: attach a rest api request to the instance of this class\n- **with_response_timeout**: set the timeout in seconds for the test runner to wait for a response from the websocket\n- **with_message_timeout**: set the timeout in seconds for the test runner to wait while trying to send a message to the websocket\n- **with_request_timeout**: set the timeout in seconds for the rest request attached to the instance of this class\n- **with_test_timeout**: set the timeout in seconds for the test runner to run for\n- **with_received_response_logging**: enable logging of received responses on response timeout error\n- **run**: asyncronously run the test runner, sending all messages and listening for responses\n- **is_complete**: check whether all expected responses have been received and messages have been sent\n\n### [WSResponse](https://github.com/jamsidedown/sawpit/blob/main/sawpit/ws_response.py)\nWSResponse is a class to represent an expected response from the websocket\n- **with_attribute**: add an attribute to check an incoming response against\n- **with_trigger**: add a message to trigger when a response matching this instance has been received\n- **is_match**: check whether a received response matches the attributes of this instance\n\n### [WSMessage](https://github.com/jamsidedown/sawpit/blob/main/sawpit/ws_message.py)\nWSMessage is a class to represent a message to send to the websocket\n- **with_attribute**: add an attribute to the message to be sent to the websocket host\n- **with_delay**: add a delay to the message to be sent to the websocket host\n\n### [RestRequest](https://github.com/jamsidedown/sawpit/blob/main/sawpit/rest_request.py)\nRestRequest is a class to represent a request to send to rest api\n- **with_header**: add a header to the request to be sent to the rest api\n- **with_body**: add a body to the request to be sent to the rest api\n- **with_delay**: add a delay to the request to be sent to the rest api\n\n## Examples\n\n### Response testing\nTesting a response with a body is received on connection to a websocket host:\n```py\nfrom sawpit import WSTest, WSResponse\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\nTesting that a response with the following more complicated body is received on connection to a websocket host:\n```json\n{\n    \"body\": {\n        \"attribute\": \"value\"\n    }\n}\n```\n\n```py\nfrom sawpit import WSTest, WSResponse\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body\")\n        .with_attribute(\"body/attribute\", \"value\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\nTesting that a response with the following body with a list is received on connection to a websocket host:\n```json\n{\n    \"body\": [\n        {\"colour\": \"red\"},\n        {\"colour\": \"green\"},\n        {\"colour\": \"blue\"}\n    ]\n}\n```\n\n```py\nfrom sawpit import WSTest, WSResponse\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body/0/colour\", \"red\")\n        .with_attribute(\"body/1/colour\", \"green\")\n        .with_attribute(\"body/2/colour\", \"blue\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\nTesting that a response with the following body with a list containing the colour `green` somewhere is received on connection to a websocket host:\n```json\n{\n    \"body\": [\n        {\"colour\": \"red\"},\n        {\"colour\": \"green\"},\n        {\"colour\": \"blue\"}\n    ]\n}\n```\n\n```py\nfrom sawpit import WSTest, WSResponse\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body//colour\", \"green\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\n### Message sending\nSending a message on connection to a websocket host:\n```py\nfrom sawpit import WSTest, WSMessage\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_message(\n        WSMessage()\n        .with_attribute(\"body\", \"Hello, world!\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\nTriggering a message to be sent with extracted data when the following response is received:\n```json\n{\n    \"body\": {\n        \"message\": \"Hello, world!\"\n    }\n}\n```\n\n```py\nfrom sawpit import WSTest, WSResponse, WSMessage\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body/message\")\n        .with_trigger(\n            WSMessage()\n            .with_attribute(\"body\", \"${body/message}\")\n        )\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\nTriggering a message to be sent with the first colour extracted from a list when the following response is received:\n```json\n{\n    \"body\": [\n        {\"colour\": \"red\"},\n        {\"colour\": \"green\"},\n        {\"colour\": \"blue\"}\n    ]\n}\n```\n\n```py\nfrom sawpit import WSTest, WSResponse, WSMessage\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body/0/colour\")\n        .with_trigger(\n            WSMessage()\n            .with_attribute(\"body\", \"${body/0/colour}\")\n        )\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\n### Using rest requests\nAttaching simple rest get request and sending it:\n```py\nrest_request = (\n    RestRequest(\"https://example.com\", \"GET\")\n    .with_body({\"some_key\": some_value})\n)\n\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_request(rest_request)\n)\n\nawait ws_test.run()\n\nfor response in ws_tester.received_request_responses:\n    print(response.status_code)\n    print(response.json())\n\nassert ws_test.is_complete()\n```\n\n### Error handling\nForce a test to fail is execution takes more than 30 seconds (default 60 seconds)\n```py\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_test_timeout(30)\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\nForce a test to fail if no response is received for 15 seconds (default 10 seconds) \n- Any responses that haven't been sent will be output along with the `WSTimeoutError`\n- Received responses can be output too by calling `with_received_response_logging` on the `WSTest` instance\n```py\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_response_timeout(15)\n    .with_received_response_logging()\n    .with_response(\n        WSResponse()\n        .with_attribute(\"body\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\nForce a test to fail is a message takes longer than 15 seconds to send (default 10 seconds)\n- The message that the test runner failed to send will be output along with the `WSTimeoutError`\n```py\nws_test = (\n    WSTest(\"wss://example.com\")\n    .with_message_timeout(15)\n    .with_message(\n        WSMessage()\n        .with_attribute(\"body\", \"Hello, world!\")\n    )\n)\n\nawait ws_test.run()\n\nassert ws_test.is_complete()\n```\n\n## Documentation\nUsers can get the docstring help by running:\n```py\nfrom sawpit import WSTest\nhelp(WSTest.with_response)\n```\n\n## Links\n- [Github](https://github.com/jamsidedown/sawpit)\n- PyPI // TODO\n- Test PyPI // TODO\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jamsidedown/sawpit",
    "keywords": "websocket integration test testing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sawpit",
    "package_url": "https://pypi.org/project/sawpit/",
    "platform": "",
    "project_url": "https://pypi.org/project/sawpit/",
    "project_urls": {
      "Homepage": "https://github.com/jamsidedown/sawpit"
    },
    "release_url": "https://pypi.org/project/sawpit/0.0.1/",
    "requires_dist": [
      "websockets",
      "requests"
    ],
    "requires_python": ">=3.7",
    "summary": "Work in progress fork of pywsitest",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9743657,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9476c0e2a48c4a073a13baa415511c9abdd622c50251170ac47bdd47bf65ed23",
          "md5": "54e1a02dde2033ae27529b3caf1cdfda",
          "sha256": "2b98aa3a76e264e3315424868d2e6c3e9cd2b2feced7a49dfb78516ae5da97ef"
        },
        "downloads": -1,
        "filename": "sawpit-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "54e1a02dde2033ae27529b3caf1cdfda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11004,
        "upload_time": "2021-03-11T18:55:34",
        "upload_time_iso_8601": "2021-03-11T18:55:34.624781Z",
        "url": "https://files.pythonhosted.org/packages/94/76/c0e2a48c4a073a13baa415511c9abdd622c50251170ac47bdd47bf65ed23/sawpit-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76973ad43a0711d7565f11dba884ec35494063b4c6d79ccb03ccff0796b72355",
          "md5": "364857023116117ffd52b66a1482d7bd",
          "sha256": "246b7ffc9d3f4f773f3af6327da5f3f0143b09188437efc86b9462a395281d89"
        },
        "downloads": -1,
        "filename": "sawpit-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "364857023116117ffd52b66a1482d7bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10426,
        "upload_time": "2021-03-11T18:55:35",
        "upload_time_iso_8601": "2021-03-11T18:55:35.900528Z",
        "url": "https://files.pythonhosted.org/packages/76/97/3ad43a0711d7565f11dba884ec35494063b4c6d79ccb03ccff0796b72355/sawpit-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9476c0e2a48c4a073a13baa415511c9abdd622c50251170ac47bdd47bf65ed23",
        "md5": "54e1a02dde2033ae27529b3caf1cdfda",
        "sha256": "2b98aa3a76e264e3315424868d2e6c3e9cd2b2feced7a49dfb78516ae5da97ef"
      },
      "downloads": -1,
      "filename": "sawpit-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "54e1a02dde2033ae27529b3caf1cdfda",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 11004,
      "upload_time": "2021-03-11T18:55:34",
      "upload_time_iso_8601": "2021-03-11T18:55:34.624781Z",
      "url": "https://files.pythonhosted.org/packages/94/76/c0e2a48c4a073a13baa415511c9abdd622c50251170ac47bdd47bf65ed23/sawpit-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "76973ad43a0711d7565f11dba884ec35494063b4c6d79ccb03ccff0796b72355",
        "md5": "364857023116117ffd52b66a1482d7bd",
        "sha256": "246b7ffc9d3f4f773f3af6327da5f3f0143b09188437efc86b9462a395281d89"
      },
      "downloads": -1,
      "filename": "sawpit-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "364857023116117ffd52b66a1482d7bd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10426,
      "upload_time": "2021-03-11T18:55:35",
      "upload_time_iso_8601": "2021-03-11T18:55:35.900528Z",
      "url": "https://files.pythonhosted.org/packages/76/97/3ad43a0711d7565f11dba884ec35494063b4c6d79ccb03ccff0796b72355/sawpit-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}