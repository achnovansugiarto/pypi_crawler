{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# WaveAugment\n\nWavAugment performs data augmentation on audio data. \nThe audio data is represented as [pytorch](https://pytorch.org/) tensors. \n\nIt is particularly useful for speech data. \nAmong others, it implements the augmentations that we found to be most useful for self-supervised learning \n(_Data Augmenting Contrastive Learning of Speech Representations in the Time Domain_, E. Kharitonov, M. Rivière, G. Synnaeve, L. Wolf, P.-E. Mazaré, M. Douze, E. Dupoux. [[arxiv]](https://arxiv.org/abs/2007.00991)):\n\n* Pitch randomization,\n* Reverberation,\n* Additive noise,\n* Time dropout (temporal masking),\n* Band reject,\n* Clipping\n\nInternally, WavAugment uses [libsox](http://sox.sourceforge.net/libsox.html) and allows interleaving of libsox- and pytorch-based effects. \n\n### Requirements\n * Linux or MacOS\n * [pytorch](pytorch.org) >= 1.7.1\n * [torchaudio](pytorch.org/audio) >= 0.7\n\n### Installation\nTo install WavAugment, run the following command:\n```bash\npip install waveaugment\n```\n\n## Usage\n\nFirst of all, we provide thouroughly documented [examples](./examples/python), where we demonstrate how a data-augmented dataset interface works. We also provide a Jupyter-based [tutorial](./examples/python/WavAugment_walkthrough.ipynb) [(open in colab)](https://colab.research.google.com/github/facebookresearch/WavAugment/blob/master/examples/python/WavAugment_walkthrough.ipynb) that illlustrates how one can apply various useful effects to a piece of speech (recorded over the mic or pre-recorded).\n\n### The `EffectChain`\n\nThe central object is the chain of effects, `EffectChain`, that are applied on a `torch.Tensor` to produce another `torch.Tensor`. \nThis chain can have multiple effects composed:\n```python\nimport augment\neffect_chain = augment.EffectChain().pitch(100).rate(16_000)\n```\nParameters of the effect coincide with those of libsox (http://sox.sourceforge.net/libsox.html); however, you can also randomize the parameters by providing a python `Callable` and mix them with standard parameters:\n```python\nimport numpy as np\nrandom_pitch_shift = lambda: np.random.randint(-100, +100)\n# the pitch will be changed by a shift somewhere between (-100, +100)\neffect_chain = augment.EffectChain().pitch(\"-q\", random_pitch_shift).rate(16_000)\n```\nHere, the flag`-q` makes `pitch` run faster at some expense of the quality.\nIf some parameters are provided by a Callable, this Callable will be invoked every time `EffectChain` is applied (eg. to generate random parameters).\n\n### Applying the chain\n\nTo apply a chain of effects on a torch.Tensor, we code the following:\n```python\noutput_tensor = augment.EffectChain().pitch(100).rate(16_000).apply(input_tensor, \\\n    src_info=src_info, target_info=target_info)\n```\nWavAugment expects `input_tensor` to have a shape of (channels, length). As `input_tensor` does not contain important meta-information, such as sampling rate, we need to provide it manually.\nThis is done by passing two dictionaries, `src_info` (meta-information about the input format) and `target_info` (our expectated format for the output).\n\nAt minimum, we need to set the sampling rate for the input tensor: `{'rate': 16_000}`. \n\n### Example usage\n\nBelow is a small gist of a potential usage:\n\n```python\nimport augment\nimport numpy as np\n\nx, sr = torchaudio.load(test_wav)\n\n# input signal properties\nsrc_info = {'rate': sr}\n\n# output signal properties\ntarget_info = {'channels': 1, \n               'length': 0, # not known beforehand\n               'rate': 16_000}\n# write down the chain of effects with their string parameters and call .apply()\n# effects are specified as a chain of method calls with parameters that can be \n# strings, numbers, or callables. The latter case is used for generating randomized\n# transformations\nrandom_pitch = lambda: np.random.randint(-400, -200)\ny = augment.EffectChain().pitch(random_pitch).rate(16_000).apply(x, \\\n    src_info=src_info, target_info=target_info)\n```\n\n## Important notes\nIt often happens that a command-line invocation of sox would change effect chain. To get a better idea of what sox executes internally, you can launch it with a -V flag, eg by running:\n ```bash\nsox -V tests/test.wav out.wav reverb 0 50 100\n```\nwe will see something like:\n```\nsox INFO sox: effects chain: input        16000Hz  1 channels\nsox INFO sox: effects chain: reverb       16000Hz  2 channels\nsox INFO sox: effects chain: channels     16000Hz  1 channels\nsox INFO sox: effects chain: dither       16000Hz  1 channels\nsox INFO sox: effects chain: output       16000Hz  1 channels\n```\nThis output tells us that the `reverb` effect changes the number of channels, which are squashed into 1 channel by the `channel` effect. Sox also added `dither` effect to hide processing artifacts.\n\nWavAugment remains explicit and doesn't add effects under the hood. \nIf you want to emulate a Sox command that decomposes into several effects, we advise to consult `sox -V` and apply the effects manually. \nTry it out on some files before running a heavy machine-learning job. \n\n## Citation\nIf you find WavAugment useful in your research, please consider citing:\n```\n@article{wavaugment2020,\n  title={Data Augmenting Contrastive Learning of Speech Representations in the Time Domain},\n  author={Kharitonov, Eugene and Rivi{\\`e}re, Morgane and Synnaeve, Gabriel and Wolf, Lior and Mazar{\\'e}, Pierre-Emmanuel and Douze, Matthijs and Dupoux, Emmanuel},\n  journal={arXiv preprint arXiv:2007.00991},\n  year={2020}\n}\n```\n\n## Contributing\nSee the [CONTRIBUTING](CONTRIBUTING.md) file for how to help out.\n\n## License\nWavAugment is MIT licensed, as found in the LICENSE file.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/facebookresearch/WavAugment",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "waveaugment",
    "package_url": "https://pypi.org/project/waveaugment/",
    "platform": "",
    "project_url": "https://pypi.org/project/waveaugment/",
    "project_urls": {
      "Homepage": "https://github.com/facebookresearch/WavAugment"
    },
    "release_url": "https://pypi.org/project/waveaugment/0.2.4/",
    "requires_dist": [
      "torch (>=1.7.1)",
      "torchaudio"
    ],
    "requires_python": "",
    "summary": "WaveAugment performs data augmentation on audio data.",
    "version": "0.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12457376,
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42e099e281bacc9d87fae7be08fc28ac033fab1cbb4bbc105157ed7b488c0ac1",
          "md5": "aac6900ea5ced6ab65a10144c97413d7",
          "sha256": "4060eb89cfefbd03db2edfca5611cd0946866d30bf3d835263b33a219d6c1cb8"
        },
        "downloads": -1,
        "filename": "waveaugment-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aac6900ea5ced6ab65a10144c97413d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5484,
        "upload_time": "2022-01-02T06:51:54",
        "upload_time_iso_8601": "2022-01-02T06:51:54.432895Z",
        "url": "https://files.pythonhosted.org/packages/42/e0/99e281bacc9d87fae7be08fc28ac033fab1cbb4bbc105157ed7b488c0ac1/waveaugment-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c60827ab161bb86c3ca17c793f67e4fe9879bcf8d266e93704216e713092f78",
          "md5": "8407ecc1120f24d091524e11a4d08b3a",
          "sha256": "415ba39cee76fe56b1fd0322619796903cb4aca18d84535fe0a9038e873b7d01"
        },
        "downloads": -1,
        "filename": "waveaugment-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8407ecc1120f24d091524e11a4d08b3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7317,
        "upload_time": "2022-01-02T06:51:56",
        "upload_time_iso_8601": "2022-01-02T06:51:56.381340Z",
        "url": "https://files.pythonhosted.org/packages/1c/60/827ab161bb86c3ca17c793f67e4fe9879bcf8d266e93704216e713092f78/waveaugment-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43c6cfbf31c1c93758ee137109f266581d96fe31c2d9cfa79b07afb2652f9a7a",
          "md5": "981d0e5e6180e3c3cfee662ddfae32fa",
          "sha256": "bbfb0ebbca78751181e420448f27796892eea332b0593c7c27baacebee961e11"
        },
        "downloads": -1,
        "filename": "waveaugment-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "981d0e5e6180e3c3cfee662ddfae32fa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7910,
        "upload_time": "2022-01-02T06:53:24",
        "upload_time_iso_8601": "2022-01-02T06:53:24.621992Z",
        "url": "https://files.pythonhosted.org/packages/43/c6/cfbf31c1c93758ee137109f266581d96fe31c2d9cfa79b07afb2652f9a7a/waveaugment-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d667663bb8ab9c0348f0da911fdf0898707ede1960ba30e5a0916b599b7aeaa",
          "md5": "226c86cc06db0ab5876861e92ba58ed0",
          "sha256": "ca1b8cdd524761307cba8fb053ae8fec92012c7af72876036779fa745294fd7d"
        },
        "downloads": -1,
        "filename": "waveaugment-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "226c86cc06db0ab5876861e92ba58ed0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7611,
        "upload_time": "2022-01-02T06:53:26",
        "upload_time_iso_8601": "2022-01-02T06:53:26.417499Z",
        "url": "https://files.pythonhosted.org/packages/1d/66/7663bb8ab9c0348f0da911fdf0898707ede1960ba30e5a0916b599b7aeaa/waveaugment-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e3d8c0b2af74ddfaf824e7233729d65116b54761b892dbf714c8dfa7bbe6d7c",
          "md5": "68d90882045100197705d02b54cd5fa3",
          "sha256": "26508053d79753e0c362c7195c6678ee48bbdeb0a807810b55411c9f7d4dce70"
        },
        "downloads": -1,
        "filename": "waveaugment-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68d90882045100197705d02b54cd5fa3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7909,
        "upload_time": "2022-01-02T09:28:52",
        "upload_time_iso_8601": "2022-01-02T09:28:52.515677Z",
        "url": "https://files.pythonhosted.org/packages/9e/3d/8c0b2af74ddfaf824e7233729d65116b54761b892dbf714c8dfa7bbe6d7c/waveaugment-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08f55b3d44934709639fba036997f0dbc45bb6ad5bbc1fe48176e90376277652",
          "md5": "f96f4e372836ad21432c66a6cfa2a508",
          "sha256": "c444ad50217d1065f08eeb2568a060a98090984140474efabe25c939c824e365"
        },
        "downloads": -1,
        "filename": "waveaugment-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f96f4e372836ad21432c66a6cfa2a508",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7625,
        "upload_time": "2022-01-02T09:28:54",
        "upload_time_iso_8601": "2022-01-02T09:28:54.094976Z",
        "url": "https://files.pythonhosted.org/packages/08/f5/5b3d44934709639fba036997f0dbc45bb6ad5bbc1fe48176e90376277652/waveaugment-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9e3d8c0b2af74ddfaf824e7233729d65116b54761b892dbf714c8dfa7bbe6d7c",
        "md5": "68d90882045100197705d02b54cd5fa3",
        "sha256": "26508053d79753e0c362c7195c6678ee48bbdeb0a807810b55411c9f7d4dce70"
      },
      "downloads": -1,
      "filename": "waveaugment-0.2.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "68d90882045100197705d02b54cd5fa3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 7909,
      "upload_time": "2022-01-02T09:28:52",
      "upload_time_iso_8601": "2022-01-02T09:28:52.515677Z",
      "url": "https://files.pythonhosted.org/packages/9e/3d/8c0b2af74ddfaf824e7233729d65116b54761b892dbf714c8dfa7bbe6d7c/waveaugment-0.2.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "08f55b3d44934709639fba036997f0dbc45bb6ad5bbc1fe48176e90376277652",
        "md5": "f96f4e372836ad21432c66a6cfa2a508",
        "sha256": "c444ad50217d1065f08eeb2568a060a98090984140474efabe25c939c824e365"
      },
      "downloads": -1,
      "filename": "waveaugment-0.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "f96f4e372836ad21432c66a6cfa2a508",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7625,
      "upload_time": "2022-01-02T09:28:54",
      "upload_time_iso_8601": "2022-01-02T09:28:54.094976Z",
      "url": "https://files.pythonhosted.org/packages/08/f5/5b3d44934709639fba036997f0dbc45bb6ad5bbc1fe48176e90376277652/waveaugment-0.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}