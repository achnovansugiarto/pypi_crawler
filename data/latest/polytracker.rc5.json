{
  "info": {
    "author": "Trail of Bits",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Utilities"
    ],
    "description": "# PolyTracker\n\n<p align=\"center\">\n  <img src=\"logo/polytracker_name.png?raw=true\" width=\"256\" title=\"PolyTracker\">\n</p>\n<br />\n\n[![PyPI version](https://badge.fury.io/py/polytracker.svg)](https://badge.fury.io/py/polytracker)\n[![Tests](https://github.com/trailofbits/polytracker/workflows/Tests/badge.svg)](https://github.com/trailofbits/polytracker/actions)\n[![Slack Status](https://empireslacking.herokuapp.com/badge.svg)](https://empireslacking.herokuapp.com)\n\nPolyTracker is a tool originally created for the _Automated Lexical Annotation\nand Navigation of Parsers_, a backronym devised solely for the purpose of\nreferring to it as _The ALAN Parsers Project_. However, it has evolved into a\ngeneral purpose tool for efficiently performing data-flow and control-flow\nanalysis of programs. PolyTracker is an LLVM pass that instruments programs to\ntrack which bytes of an input file are operated on by which functions. It\noutputs a database containing the data-flow information, as well as a runtime\ntrace. PolyTracker also provides a Python library for interacting with and\nanalyzing its output, as well as an interactive Python REPL.\n\nPolyTracker can be used in conjunction with\n[PolyFile](https://github.com/trailofbits/polyfile) to automatically determine\nthe semantic purpose of the functions in a parser. It also has an experimental\nfeature capable of generating a context free grammar representing the language\naccepted by a parser.\n\nUnlike dynamic instrumentation alternatives like\n[Taintgrind](https://github.com/wmkhoo/taintgrind), PolyTracker imposes\nnegligible performance overhead for almost all inputs, and is capable of\ntracking every byte of input at once. PolyTracker started as a fork of the LLVM\nDataFlowSanitizer and takes much inspiration from the\n[Angora Fuzzer](https://github.com/AngoraFuzzer/Angora). However, unlike the\nAngora system, PolyTracker is able to track the entire _provenance_ of a taint.\nIn February of 2021, the LLVM DataFlowSanitizer added a new feature for tracking\ntaint provenance called [_origin tracking_](https://reviews.llvm.org/D95835).\nHowever, it is only able to track at most 16 taints at once, while PolyTracker\ncan track up to 2<sup>31</sup>-1.\n\nThis README serves as the general usage guide for installing PolyTracker and\ncompiling/instrumenting binaries. For programmatically interacting with or\nextending PolyTracker through its Python API, as well as for interacting with\nruntime traces produced from instrumented code,\n[consult the Python documentation](https://trailofbits.github.io/polytracker/latest/).\n\n## Quickstart\n\nPolyTracker is controlled via a Python script called `polytracker`. You can\ninstall it by running\n\n```\npip3 install polytracker\n```\n\nPolyTracker requires a very particular system environment to run, so almost all\nusers are likely to run it in a containerized environment. Luckily,\n`polytracker` makes this easy. All you need to do is have `docker` installed,\nthen run:\n\n```\npolytracker docker pull\n```\n\nand\n\n```\npolytracker docker run\n```\n\nThe latter command will mount the current working directory into the PolyTracker\nDocker container, and allow you to build and run instrumented programs.\n\nThe `polytracker` control script—which you can run from either your host system\nor from inside the Docker container—has a variety of commands, both for\ninstrumenting programs as well as analyzing the resulting artifacts. For\nexample, you can explore the dataflows in the execution, reconstruct the\ninstrumented program's control flow graph, and even extract a context free\ngrammar matching the inputs accepted by the program. You can explore these\ncommands by running\n\n```\npolytracker --help\n```\n\nThe `polytracker` script is also a REPL, if run with no command line arguments:\n\n```python\n$ polytracker\nPolyTracker (4.0.0)\nhttps://github.com/trailofbits/polytracker\nType \"help\" or \"commands\"\n>>> commands\n```\n\n## Instrumenting a simple C/C++ program\n\nPolyTracker also comes with a `build` command. This command allows the user to\nrun any build command in a [Blight](https://github.com/trailofbits/blight)\ninstrumented environment. This will produce a `blight_journal.jsonl` file that\nrecords all commands run during the build. If you have a C/C++ target, you can\ninstrument it by invoking `polytracker build` and passing your build command:\n\n```bash\npolytracker build gcc -g -o my_binary my_source.c\n```\n\nTo instrument a build target, use the `instrument-targets` command. By default\nthe command will use the a `blight_journal.jsonl` in your current working\ndirectory to build an instrumented version of your build target. The\ninstrumented build target will be built using the same flags as the original\nbuild target.\n\n```bash\npolytracker instrument-targets my_binary\n```\n\n`build` also supports more complex programs that use a build system like\nautotiools or CMake:\n\n```bash\npolytracker build cmake .. -DCMAKE_BUILD_TYPE=Release\npolytracker build ninja\n# or\npolytracker build ./configure\npolytracker build make\n```\n\nThen run `instrument-targets` on any targets of the build:\n\n```bash\n$ polytracker instrument-targets a.bin b.so\n```\n\nThen `a.instrumented.bin` and `b.instrumented.so` will be the instrumented\nversions. See the Dockerfiles in the\n[examples](https://github.com/trailofbits/polytracker/tree/master/examples)\ndirectory for examples of how real-world programs can be instrumented.\n\n## Running and Analyzing an Instrumented Program\n\nThe instrumented software will write its output to the path specified in\n`POLYDB`, or `polytracker.tdag` if omitted. This is a binary file that can be\noperated on by running:\n\n```python\nfrom polytracker import PolyTrackerTrace, taint_dag\n\ntrace = PolyTrackerTrace.load(\"polytracker.tdag\")\ntdfile = trace.tdfile\n\nfirst_node = list(tdfile.nodes)[0]\nprint(f\"First node affects control flow: {first_node.affects_control_flow}\")\n\n# Operate on all Range nodes\nfor index, node in enumerate(tdfile.nodes):\n  if isinstance(node, taint_dag.TDRangeNode):\n    print(f\"Node {index}: first {node.first}, last {node.last}\")\n\n# Access taint forest\ntdforest = trace.taint_forest\nn1 = tdforest.get_node(1)\nprint(\n  f\"Forest node {n1.label}. Parent labels: {n1.parent_labels}, \"\n  f\"source: {n1.source.path if n1.source is not None else None}, \"\n  f\"affects control flow: {n1.affected_control_flow}\"\n)\n```\n\nYou can also run an instrumented binary directly from the REPL:\n\n```python\n$ polytracker\nPolyTracker (4.0.0)\nhttps://github.com/trailofbits/polytracker\nType \"help\" or \"commands\"\n>>> trace = run_trace(\"path_to_binary\", \"path_to_input_file\")\n```\n\nThis will automatically run the instrumented binary in a Docker container, if\nnecessary.\n\n> :warning: **If running PolyTracker inside Docker or a VM**: PolyTracker can be\n> very slow if running in a virtualized environment and either the input file\n> or, especially, the output database are located in a directory mapped or\n> mounted from the host OS. This is particularly true when running PolyTracker\n> in Docker from a macOS host. The solution is to write the database to a path\n> inside of the container/VM and then copy it out to the host system at the very\n> end.\n\nThe Python API documentation is available\n[here](https://trailofbits.github.io/polytracker/latest/).\n\n## Runtime Parameters and Instrumentation Tuning\n\nAt runtime, PolyTracker instrumentation looks for a number of configuration\nparameters specified through environment variables. This allows one to modify\ninstrumentation parameters without needing to recompile the binary.\n\n### Environment Variables\n\nPolyTracker accepts configuration parameters in the form of environment\nvariables to avoid recompiling target programs. The current environment\nvariables PolyTracker supports is:\n\n```\nPOLYDB: A path to which to save the output database (default is polytracker.tdag)\n\nWLLVM_ARTIFACT_STORE: Provides a path to an existing directory to store artifact/manifest for all build targets\n\nPOLYTRACKER_TAINT_ARGV: Set to '1' to use argv as a taint source.\n```\n\nPolytracker will set its configuration parameters in the following order:\n\n1. If a parameter is specified via an environment variable, use that value\n2. Else if a default value for the parameter exists, use the default\n3. Else throw an error\n\n### ABI Lists\n\nDFSan uses ABI lists to determine what functions it should automatically\ninstrument, what functions it should ignore, and what custom function wrappers\nexist. See the\n[dfsan documentation](https://clang.llvm.org/docs/DataFlowSanitizer.html) for\nmore information.\n\n### Creating custom ignore lists from pre-built libraries\n\nAttempting to build large software projects can be time consuming, especially\nolder/unsupported ones. It's even more time consuming to try and modify the\nbuild system such that it supports changes, like dfsan's/our instrumentation.\n\nThere is a script located in `polytracker/scripts` that you can run on any ELF\nlibrary and it will output a list of functions to ignore. We use this when we do\nnot want to track information going through a specific library like libpng, or\nother sub components of a program. The `Dockerfile-listgen.demo` exists to build\ncommon open source libraries so we can create these lists.\n\nThis script is a slightly tweaked version of what DataFlowSanitizer has, which\nfocuses on ignoring system libraries. The original script can be found in\n`dfsan_rt`.\n\n## Building the Examples\n\nCheck out this Git repository. From the root, either build the base PolyTracker\nDocker image:\n\n```commandline\npip3 install -e \".[dev]\" && polytracker docker rebuild\n```\n\nor pull the latest prebuilt version from DockerHub:\n\n```commandline\ndocker pull trailofbits/polytracker:latest\n```\n\nFor a demo of PolyTracker running on the [MuPDF](https://mupdf.com/) parser run\nthis command:\n\n```commandline\ndocker build -t trailofbits/polytracker-demo-mupdf -f examples/pdf/Dockerfile-mupdf.demo .\n```\n\n`mutool_track` will be build in `/polytracker/the_klondike/mupdf/build/debug`.\nRunning `mutool_track` will output `polytracker.tdag` which contains the\ninformation provided by the taint analysis.\n\nFor a demo of PolyTracker running on Poppler utils version 0.84.0 run this\ncommand:\n\n```commandline\ndocker build -t trailofbits/polytracker-demo-poppler -f examples/pdf/Dockerfile-poppler.demo .\n```\n\nAll the poppler utils will be located in\n`/polytracker/the_klondike/poppler-0.84.0/build/utils`.\n\n```commandline\n$ cd /polytracker/the_klondike/poppler-0.84.0/build/utils\n$ ./pdfinfo_track some_pdf.pdf\n```\n\n## Building PolyTracker from Source\n\nThe compilation process for both PolyTracker LLVM and PolyTracker is rather\nfickle, since it involves juggling both instrumented and non-instrumented\nversions of standard library bitcode. We highly recommend using our pre-built\nand tested Docker container if at all possible. Installing the PolyTracker\nPython package on your host system will allow you to seamlessly interact with\nthe prebuilt Docker container. Otherwise, to install PolyTracker natively, we\nrecommend first replicating the install process from the\n[`polytracker-llvm` Dockerfile](https://github.com/trailofbits/polytracker-llvm/blob/polytracker/Dockerfile),\nfollowed by replicating the install process from the\n[PolyTracker Dockerfile](Dockerfile).\n\n### Build Dependencies\n\n- [**PolyTracker LLVM**](https://github.com/trailofbits/polytracker-llvm).\n  PolyTracker is built atop its own fork of LLVM,\n  [`polytracker-llvm`](https://github.com/trailofbits/polytracker-llvm). This\n  fork modifies the\n  [DataFlow Sanitizer](https://clang.llvm.org/docs/DataFlowSanitizer.html) to\n  use increased label sizes (to allow for tracking orders of magnitude more\n  taints), as well as alternative data structures to store them. We have\n  investigated up-streaming our changes into LLVM proper, but there has been\n  little interest.\n- [**CMake**](https://cmake.org)\n- [**Ninja**](https://ninja-build.org) (`ninja-build` on Ubuntu)\n\n### Runtime Dependencies\n\nThe following tools are required to test and run PolyTracker:\n\n- Python 3.7+ and `pip` (`apt-get -y install python3.7 python3-pip`). These are\n  used for both seamlessly interacting with the Docker container (if necessary),\n  as well as post-processing and analyzing the artifacts produced from runtime\n  traces.\n- [gllvm](https://github.com/SRI-CSL/gllvm)\n  (`go get github.com/SRI-CSL/gllvm/cmd/...`) is used to create whole program\n  bitcode archives and to extract bitcode from targets.\n\n### Building on Apple silicon:\n\nPrebuilt Docker images for `polytracker-llvm` are only available for `amd64`.\nUsers with `arm64` systems will have to build the image locally and then change\n`polytracker`'s Dockerfile to point to it:\n\n```commandline\n$ mkdir repos && cd repos\n$ git clone https://github.com/trailofbits/polytracker\n$ git clone https://github.com/trailofbits/polytracker-llvm\n$ cd polytracker-llvm\n$ DOCKER_BUILDKIT=1 docker build -t trailofbits/polytracker-llvm .\n$ cd ../polytracker\n$ ## Replace the first line of the Dockerfile with \"FROM trailofbits/polytracker-llvm:latest\" (no quotes)\n$ docker build -t trailofbits/polytracker .\n```\n\n## Current Status and Known Issues\n\nPolyTracker currently only runs on Linux, because that is the only system\nsupported by the DataFlow Santizer. This limitation is just due to a lack of\nsupport for semantics for other OSes system calls, which could be added in the\nfuture. However, this means that running PolyTracker on a non-Linux system will\nrequire Docker to be installed.\n\nTaints will not propagate through dynamically loaded libraries unless those\nlibraries were compiled from source using PolyTracker, _or_ there is specific\nsupport for the library calls implemented in PolyTracker. There _is_ currently\nsupport for propagating taint through the majority of uninstrumented C standard\nlibrary calls. To be clear, programs that use uninstrumented functions will\nstill run normally, however, operations performed by unsupported library calls\nwill not propagate taint. We are currently working on adding robust support for\nC++ programs, but currently the best results will be from C programs.\n\nIf there are issues with Docker, try performing a system prune and build with\n`--no-cache` for both PolyTracker and whatever demo you are trying to run.\n\nThe worst case performance of PolyTracker is exercised when a single byte in\nmemory is simultaneously tainted by a large number of input bytes from the\nsource file. This is most common when instrumenting compression and\ncryptographic algorithms that have large block sizes. There are a number of\nmitigations for this behavior currently being researched and developed.\n\n## License and Acknowledgements\n\nThis research was developed by [Trail of Bits](https://www.trailofbits.com/)\nwith funding from the Defense Advanced Research Projects Agency (DARPA) under\nthe SafeDocs program as a subcontractor to [Galois](https://galois.com). It is\nlicensed under the [Apache 2.0 license](LICENSE). © 2019, Trail of Bits.\n\n## Maintainers\n\n[Evan Sultanik](https://github.com/ESultanik)<br />\n[Henrik Brodin](https://github.com/hbrodin)<br />\n[Marek Surovič](https://github.com/surovic)<br />\n[Facundo Tuesca](https://github.com/facutuesca)<br /> <br />\n`firstname.lastname@trailofbits.com`\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/trailofbits/polytracker",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "polytracker",
    "package_url": "https://pypi.org/project/polytracker/",
    "platform": null,
    "project_url": "https://pypi.org/project/polytracker/",
    "project_urls": {
      "Homepage": "https://github.com/trailofbits/polytracker"
    },
    "release_url": "https://pypi.org/project/polytracker/4.0.0/",
    "requires_dist": [
      "blight (~=0.0.47)",
      "cxxfilt (~=0.2.2)",
      "docker (~=4.4.0)",
      "graphviz (~=0.14.1)",
      "intervaltree (~=3.0.2)",
      "matplotlib (~=3.3.0)",
      "networkx (~=2.4)",
      "Pillow (>=7.2.0)",
      "prompt-toolkit (~=3.0.8)",
      "pygments (~=2.7.3)",
      "pydot (~=1.4.1)",
      "sqlalchemy (~=1.3.23)",
      "tqdm (>=4.59.0)",
      "typing-extensions (>=3.7.4.2)",
      "types-setuptools (~=57.4.9)",
      "black (>=20.8b1) ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "Sphinx ; extra == 'dev'",
      "sphinx-rtd-theme (~=0.4.3) ; extra == 'dev'",
      "types-setuptools ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "An LLVM-based instrumentation tool for universal taint tracking, dataflow analysis, and tracing.",
    "version": "4.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15235708,
  "releases": {
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db8d3b353607d7aaaf8e465cbb57ba2d1307660dd36aded2ceb3e04330082ea5",
          "md5": "326a35f22dacb5b63825244262c195ff",
          "sha256": "5e5fe1e6b7e942ba2f91c94f96ff66e6d0b1ec38a8538a00d1cfadc7f968d5a6"
        },
        "downloads": -1,
        "filename": "polytracker-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "326a35f22dacb5b63825244262c195ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16186,
        "upload_time": "2020-07-29T13:44:47",
        "upload_time_iso_8601": "2020-07-29T13:44:47.362582Z",
        "url": "https://files.pythonhosted.org/packages/db/8d/3b353607d7aaaf8e465cbb57ba2d1307660dd36aded2ceb3e04330082ea5/polytracker-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "955d8418eb6b10411cfc49156ce7aaaf07380311253e0b64b2cfea41707ce80a",
          "md5": "28e95f0aa63d20ab3fdd66b10537dbe9",
          "sha256": "98eb7789e38678e75d19ce21a90a253279b645530e25a5e5b810fd04f9841260"
        },
        "downloads": -1,
        "filename": "polytracker-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "28e95f0aa63d20ab3fdd66b10537dbe9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14960,
        "upload_time": "2020-07-29T13:45:03",
        "upload_time_iso_8601": "2020-07-29T13:45:03.758986Z",
        "url": "https://files.pythonhosted.org/packages/95/5d/8418eb6b10411cfc49156ce7aaaf07380311253e0b64b2cfea41707ce80a/polytracker-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c8e60c85a1aee28d9515c348712d203d644a514afb70ab91c6d32eeb05cc74c",
          "md5": "21d4589f127822ab58d13884f2fc9938",
          "sha256": "6ce230278222e2f67a47d9767f8aeed15de1b9bae2b95ace76a07db4a551132d"
        },
        "downloads": -1,
        "filename": "polytracker-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "21d4589f127822ab58d13884f2fc9938",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 55506,
        "upload_time": "2021-04-13T17:59:04",
        "upload_time_iso_8601": "2021-04-13T17:59:04.041092Z",
        "url": "https://files.pythonhosted.org/packages/3c/8e/60c85a1aee28d9515c348712d203d644a514afb70ab91c6d32eeb05cc74c/polytracker-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "383694604bda403d9e672edd6d98cc278b0d02ea49320e677e2df9101b0c6bc4",
          "md5": "f571971cb38cc8c86e12f1f806f7c6b9",
          "sha256": "cf698f6438402fe9f8715fb13b6790efad01453dd9d9a36175f3824be168f7ae"
        },
        "downloads": -1,
        "filename": "polytracker-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f571971cb38cc8c86e12f1f806f7c6b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 51385,
        "upload_time": "2021-04-13T17:59:05",
        "upload_time_iso_8601": "2021-04-13T17:59:05.212939Z",
        "url": "https://files.pythonhosted.org/packages/38/36/94604bda403d9e672edd6d98cc278b0d02ea49320e677e2df9101b0c6bc4/polytracker-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "245e9ce004780f6d41d3f44f593e67e7cb1e8ab1691d9306cdda0f5d4c18f867",
          "md5": "6473bf55cb52efccdebe72b8f5b04899",
          "sha256": "d98a812a4a55b93568e3216a07b324f57295c5871a09c55290f71cd56a776238"
        },
        "downloads": -1,
        "filename": "polytracker-3.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6473bf55cb52efccdebe72b8f5b04899",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 64476,
        "upload_time": "2021-04-16T01:57:32",
        "upload_time_iso_8601": "2021-04-16T01:57:32.884091Z",
        "url": "https://files.pythonhosted.org/packages/24/5e/9ce004780f6d41d3f44f593e67e7cb1e8ab1691d9306cdda0f5d4c18f867/polytracker-3.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20958a3c078fbefd93e5f7b06ff92d7175fceaeba26a77d9765313dc0fbb67ec",
          "md5": "4ca98d6fa55530d3531c5359a34e9188",
          "sha256": "cc49728c059abc96202f810949488706e1eabf48c93d474188e0a6fe3eea175f"
        },
        "downloads": -1,
        "filename": "polytracker-3.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4ca98d6fa55530d3531c5359a34e9188",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 60755,
        "upload_time": "2021-04-16T01:57:34",
        "upload_time_iso_8601": "2021-04-16T01:57:34.180290Z",
        "url": "https://files.pythonhosted.org/packages/20/95/8a3c078fbefd93e5f7b06ff92d7175fceaeba26a77d9765313dc0fbb67ec/polytracker-3.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8370a4a536585334bdfe99f02af48cb9b01b83e7d6f5a6ed9df3815319fe7b00",
          "md5": "ab83dae32e4bd30ae1a0f4203299b5fa",
          "sha256": "a196a88ed19b174d0abb108fb1a038b07ad1364c6d359b16c1b6f49b6a3a1f3b"
        },
        "downloads": -1,
        "filename": "polytracker-3.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab83dae32e4bd30ae1a0f4203299b5fa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 90039,
        "upload_time": "2021-11-09T14:47:51",
        "upload_time_iso_8601": "2021-11-09T14:47:51.556262Z",
        "url": "https://files.pythonhosted.org/packages/83/70/a4a536585334bdfe99f02af48cb9b01b83e7d6f5a6ed9df3815319fe7b00/polytracker-3.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "41a318f80fe374887ec2caab1670a6eead2f3b0bb9ced0ec9a9cb41ba2a8351e",
          "md5": "aec51be88092d380d443c64fa1cf286d",
          "sha256": "2c038307c7f60b8cf860cac2bbfc1ff8eee0961901af014176e970616d77f6da"
        },
        "downloads": -1,
        "filename": "polytracker-3.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "aec51be88092d380d443c64fa1cf286d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 87551,
        "upload_time": "2021-11-09T14:47:53",
        "upload_time_iso_8601": "2021-11-09T14:47:53.648669Z",
        "url": "https://files.pythonhosted.org/packages/41/a3/18f80fe374887ec2caab1670a6eead2f3b0bb9ced0ec9a9cb41ba2a8351e/polytracker-3.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e58244992848718ce1e40e5f17e706790729acdd4ef92a6f72b428251d6d235",
          "md5": "60fc0e17e735c94fd21e788f21b49e77",
          "sha256": "1ad6666e2ed8814966f79da09fa8e088bd5db262523a567aa6c3a08f6746cbdd"
        },
        "downloads": -1,
        "filename": "polytracker-4.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60fc0e17e735c94fd21e788f21b49e77",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 99873,
        "upload_time": "2022-09-15T19:58:19",
        "upload_time_iso_8601": "2022-09-15T19:58:19.969325Z",
        "url": "https://files.pythonhosted.org/packages/1e/58/244992848718ce1e40e5f17e706790729acdd4ef92a6f72b428251d6d235/polytracker-4.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87f0900696e195c3c46fcc351cf371716f44652d752f6361719b9af6bba56b14",
          "md5": "d2634f2396978c9e4c7a8721c76023d0",
          "sha256": "a47552ddb2021ee69c18491b750fd0707291552d8b3241e68188dbd7ec850c1c"
        },
        "downloads": -1,
        "filename": "polytracker-4.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d2634f2396978c9e4c7a8721c76023d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 94818,
        "upload_time": "2022-09-15T19:58:21",
        "upload_time_iso_8601": "2022-09-15T19:58:21.541163Z",
        "url": "https://files.pythonhosted.org/packages/87/f0/900696e195c3c46fcc351cf371716f44652d752f6361719b9af6bba56b14/polytracker-4.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1e58244992848718ce1e40e5f17e706790729acdd4ef92a6f72b428251d6d235",
        "md5": "60fc0e17e735c94fd21e788f21b49e77",
        "sha256": "1ad6666e2ed8814966f79da09fa8e088bd5db262523a567aa6c3a08f6746cbdd"
      },
      "downloads": -1,
      "filename": "polytracker-4.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "60fc0e17e735c94fd21e788f21b49e77",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 99873,
      "upload_time": "2022-09-15T19:58:19",
      "upload_time_iso_8601": "2022-09-15T19:58:19.969325Z",
      "url": "https://files.pythonhosted.org/packages/1e/58/244992848718ce1e40e5f17e706790729acdd4ef92a6f72b428251d6d235/polytracker-4.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87f0900696e195c3c46fcc351cf371716f44652d752f6361719b9af6bba56b14",
        "md5": "d2634f2396978c9e4c7a8721c76023d0",
        "sha256": "a47552ddb2021ee69c18491b750fd0707291552d8b3241e68188dbd7ec850c1c"
      },
      "downloads": -1,
      "filename": "polytracker-4.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d2634f2396978c9e4c7a8721c76023d0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 94818,
      "upload_time": "2022-09-15T19:58:21",
      "upload_time_iso_8601": "2022-09-15T19:58:21.541163Z",
      "url": "https://files.pythonhosted.org/packages/87/f0/900696e195c3c46fcc351cf371716f44652d752f6361719b9af6bba56b14/polytracker-4.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}