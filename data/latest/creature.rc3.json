{
  "info": {
    "author": "pwtail",
    "author_email": "abvit89s@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# creature\n\n## Intro\n\nThis library demonstrates the use of **greenlet as a bridge to async \ncode**. It makes the code written for blocking I/O able to work with async I/O.\nAn example can be an ORM that previously used blocking \ndatabase drivers and \nstarts using an async database driver.\n\nActually, it was not intended as a demo from the start, it was intended to be\nused in production, therefore the code quality is good. Actually, I have \nwritten an \nasync \ndjango database [backend](https://github.com/Bi-Coloured-Python-Rock-Snake/pgbackend) using it.\n\nThe same approach is used by sqlalchemy to provide its async features. However, \nthis library is more advanced in terms of features as it **provides support \nfor REPL, context managers, iterators, context vars**.\n\nHowever, I decided to discontinue it. The thing is there are two approaches to \nasync programming: one uses \nthe \"colored \nfunctions\" approach (a term first used in a [post](\nhttps://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/) \nby Bob Nystrom),\nand the other one does not. A vivid example is **Python vs. Ruby**: Python \ncoroutines are colored and Ruby Fibers (appeared in 1.9) are not.\n\nAs you can \nsee, this repository is placed in the \"Bi-Coloured-Python-Rock-Snake\" group. \nWhen I titled it that way, I considered function colors a bad thing, however I \nhave come to a conclusion that the matter of things is far from \nunambiguity. There \nare many nuances to this but shortly speaking, I embraced the **Python way of \nthings**.\n\nStill, the library can be a nice demo of what sqlalchemy is doing under the \nhood. The name is a tribute \nto sqlalchemy.\n\n## Description\n\nThis library makes it possible for the regular (sync-looking) functions to have \nasync \nimplementation under the hood.\nIt does that by using\n[greenlet](https://github.com/python-greenlet/greenlet).\n\nThe main principle is to separate sync and async code by two different \ngreenlets. Then, all async tasks are being sent to the async greenlet and \nexecuted there,\nwhile the sync greenlet doesn't do any I/O itself.\n\n## Install\n\n```\npip install creature\n```\n\n## Usage\n\nYou can turn an async function into a sync one by using `exempt` decorator:\n\n```python\nfrom creature import exempt\n\n\n@exempt\nasync def sleep(secs):\n    await asyncio.sleep(secs)\n    print(f'Slept for {secs} seconds')\n\n\n@exempt\nasync def download(url):\n    async with httpx.AsyncClient() as client:\n        resp = await client.get(url)\n        print(f'Downloaded {len(resp.content)} bytes')\n```\n\n\"Exempt\" means that coroutines are exempted from the current greenlet, and \nsent to another.\n\nNow, to call those functions you have two options: \n\n**1. as_async decorator**\n\nYou can use `as_async` decorator to make the main function async again and \nrun it with an event loop:\n\n```python\nfrom creature import as_async\n\n\n@as_async\ndef main():\n    sleep(0.5)\n    download('https://www.python.org')\n\n\nasyncio.run(main())\n```\n\nWhich will print\n\n```commandline\nSlept for 0.5 seconds\nDownloaded 50856 bytes\n```\n\n**2. start_loop()**\n\nYou can also start an event loop yourself - this may be useful for interactive \nuse or scripts.\n\n```python\nimport creature\ncreature.start_loop()\n\nsleep(0.5)\ndownload('https://www.python.org')\n```\n\nWhich will print the same.\n\n**The REPL**\n\nstart_loop() doesn't work in IPython REPL. It works in the PyCharm Console \nthough.\nThe reason is that IPython starts the asyncio loop itself. The \nprompt_toolkit used by IPython, also needs an async loop.\n\nSo, for IPython there \nis a \ndifferent solution:\n\n```python\nimport creature\ncreature.ipy.enable()\n```\n\nThis works in both PyCharm Console and IPython.\n\n**Context vars**\n\nasyncio has `contextvars` module that gives coroutines access to their \n\"context\". creature has its own contextvars for the very same purpose.\n\ngreenlet itself has support for contextvars: all greenlets have different \ncontexts.\nHowever, as you should know by now, we have two \ngreenlets, sync and async, and it's natural for them to share the context.\n\nThe class intentionally is called context_var, not to import the standard \nContextVar by mistake.\n\n```python\ncreature.start_loop()\n\nvar = creature.context_var(__name__, 'var', default=-1)\n\n\n@exempt\nasync def f1():\n    # set() returns the previous value\n    assert var.set(1) == -1\n\n\ndef f2():\n    assert var.get() == 1\n\n\nf1()\nf2()\n```\n\nAs you can see, sync and async functions can use shared context.\n\n**Context managers**\n\nFunctions are not the only thing you can come across, sometimes you have to \ndeal with context managers too. creature can map async context managers to the \nsync ones. Here is how it is done:\n\n```python\n@exempt_cm\n@asynccontextmanager\nasync def have_rest(before, after):\n    await asyncio.sleep(before)\n    try:\n        yield\n    finally:\n        await asyncio.sleep(after)\n\nwith have_rest(1, 3):\n    print('Party!')\n```\n\n`exempt_cm` stays for \"exempt the context manager\", of course. This feature \nhad been \nuseful when I \nwas working on the async backend for django, because the psycopg3 driver \nuses context managers extensively.\n\n**Iterators**\n\nYou get the principle, don't you? Similarly, we have `exempt_it` for iterators.\n\n```python\n@exempt_it\nasync def counter():\n    for i in range(3):\n        await asyncio.sleep(0.1 * i)\n        yield i\n\nassert list(counter()) == [0, 1, 2]\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "greenlet,fibers,async,sqlalchemy",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "creature",
    "package_url": "https://pypi.org/project/creature/",
    "platform": null,
    "project_url": "https://pypi.org/project/creature/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/creature/0.1.17/",
    "requires_dist": [
      "greenlet (>=2.0.1,<3.0.0)"
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "",
    "version": "0.1.17",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16598489,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b5c40dcea93fdd10987d19d3f07b9c23e7f263d279a427122a409ade27c2dfb",
          "md5": "cf53f2482e3580d62bb8e01dee7ffdc4",
          "sha256": "65642fd5d24bbe87e00e3173430d53cb3ca48212dc409e9f06b5465e7ed4dfa6"
        },
        "downloads": -1,
        "filename": "creature-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf53f2482e3580d62bb8e01dee7ffdc4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 2128,
        "upload_time": "2023-01-26T00:58:56",
        "upload_time_iso_8601": "2023-01-26T00:58:56.075302Z",
        "url": "https://files.pythonhosted.org/packages/3b/5c/40dcea93fdd10987d19d3f07b9c23e7f263d279a427122a409ade27c2dfb/creature-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa2150d115b27ee6c7c3bac00b6ef00c7176a258517f211db905c3a22afff4b9",
          "md5": "62c790a123882fb604e86181476015c4",
          "sha256": "a793743f3321ef24380d167d2f6a1ba2984673c1aa51f1cee14ab6f28088e73f"
        },
        "downloads": -1,
        "filename": "creature-0.1.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62c790a123882fb604e86181476015c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 10065,
        "upload_time": "2023-01-28T02:19:43",
        "upload_time_iso_8601": "2023-01-28T02:19:43.095465Z",
        "url": "https://files.pythonhosted.org/packages/aa/21/50d115b27ee6c7c3bac00b6ef00c7176a258517f211db905c3a22afff4b9/creature-0.1.16-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c82164bfbeb52558540eb78bb8dea99eaadd912da58c148089be697862a8011b",
          "md5": "4d3967effa683f925577dd5a6de93315",
          "sha256": "6dc2899c241b0d717867a65eb5be1008f54c83ebd70c269ee426d9d3a7baa607"
        },
        "downloads": -1,
        "filename": "creature-0.1.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d3967effa683f925577dd5a6de93315",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 10080,
        "upload_time": "2023-01-28T04:25:36",
        "upload_time_iso_8601": "2023-01-28T04:25:36.570432Z",
        "url": "https://files.pythonhosted.org/packages/c8/21/64bfbeb52558540eb78bb8dea99eaadd912da58c148089be697862a8011b/creature-0.1.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c82164bfbeb52558540eb78bb8dea99eaadd912da58c148089be697862a8011b",
        "md5": "4d3967effa683f925577dd5a6de93315",
        "sha256": "6dc2899c241b0d717867a65eb5be1008f54c83ebd70c269ee426d9d3a7baa607"
      },
      "downloads": -1,
      "filename": "creature-0.1.17-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4d3967effa683f925577dd5a6de93315",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 10080,
      "upload_time": "2023-01-28T04:25:36",
      "upload_time_iso_8601": "2023-01-28T04:25:36.570432Z",
      "url": "https://files.pythonhosted.org/packages/c8/21/64bfbeb52558540eb78bb8dea99eaadd912da58c148089be697862a8011b/creature-0.1.17-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}