{
  "info": {
    "author": "Clemens Hug",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n# Create cell thumbnails\n\nModule for creating thumbnail images of cells given a multi-channel TIFF\nimage and segmentation mask.\n\n## Installation\n\n```\npip install cellcutter\n```\n\n## Usage\n\n```\nusage: cut_cells [-h] [-p P] [-z] [-f] [--window-size WINDOW_SIZE] [--mask-cells]\n                 [--channels [CHANNELS ...]] [--cache-size CACHE_SIZE]\n                 [--chunk-size CHUNK_SIZE | --cells-per-chunk CELLS_PER_CHUNK]\n                 IMAGE SEGMENTATION_MASK CELL_DATA DESTINATION.zarr\n\nCut out thumbnail images of all cells. Thumbnails will be stored as Zarr array\n(https://zarr.readthedocs.io/en/stable/index.html) with dimensions [#channels, #cells,\nwindow_size, window_size]. The chunking shape greatly influences performance\nhttps://zarr.readthedocs.io/en/stable/tutorial.html#chunk-optimizations.\n\npositional arguments:\n  IMAGE                 Path to image in TIFF format, potentially with multiple channels.\n                        Thumbnails will be created from each channel.\n  SEGMENTATION_MASK     Path to segmentation mask image in TIFF format. Used to automatically\n                        chose window size and find cell outlines.\n  CELL_DATA             Path to CSV file with a row for each cell. Must contain columns CellID\n                        (must correspond to the cell IDs in the segmentation mask), Y_centroid,\n                        and X_centroid (the coordinates of cell centroids). Only cells represented\n                        in the given CSV file will be used, even if additional cells are present\n                        in the segmentation mask. Cells are written to the Zarr array in the same\n                        order as they appear in the CSV file.\n  DESTINATION.zarr      Path to a new directory where cell thumbnails will be stored in Zarr\n                        format. Must end in '.zarr' and must not already exist. These restrictions\n                        can be lifted by using the '-f/--force' flag.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p P                  Number of processes run in parallel.\n  -z                    Store thumbnails in a single zip file instead of a directory.\n  -f, --force           Overwrite existing destination directory and don't enforce '.zarr'\n                        extension.\n  --window-size WINDOW_SIZE\n                        Size of the cell thumbnail in pixels. Defaults to size of largest cell.\n  --mask-cells          Fill every pixel not occupied by the target cell with zeros.\n  --channels [CHANNELS ...]\n                        Indices of channels (1-based) to include in the output e.g., --channels 1\n                        3 5. Channels are included in the file in the given order. If not\n                        specified, by default all channels are included. This option must be\n                        *after* all positional arguments.\n  --cache-size CACHE_SIZE\n                        Cache size for reading image tiles in MB. For best performance the cache\n                        size should be larger than the size of the image. (Default: 10240 MB = 10\n                        GB)\n  --chunk-size CHUNK_SIZE\n                        Desired uncompressed chunk size in MB. (See\n                        https://zarr.readthedocs.io/en/stable/tutorial.html#chunk-optimizations)\n                        Since the other chunk dimensions are fixed as [#channels, #cells,\n                        window_size, window_size], this argument determines the number of cells\n                        per chunk. (Default: 32 MB)\n  --cells-per-chunk CELLS_PER_CHUNK\n                        Desired number of cells stored per Zarr array chunk. By default this is\n                        determined automatically using the chunk size parameter. Setting this\n                        option overrides the chunk size parameter.\n```\n\n## Example\n\nExample data are available for [download at mcmicro.org](https://mcmicro.org/datasets).\n\n```\ncut_cells exemplar-001/registration/exemplar-001.ome.tif \\\n  exemplar-001/segmentation/unmicst-exemplar-001/cellMask.tif \\\n  exemplar-001/quantification/unmicst-exemplar-001_cellMask.csv \\\n  cellMaskThumbnails.zarr\n```\n\n## Reading the zarr array output\n\n```python\nimport zarr\nfrom matplotlib import pyplot as plt\n```\n\n```python\nx = zarr.open(\"cellMaskThumbnails.zarr\", mode = \"r\")\n```\n\n    <zarr.core.Array (12, 9522, 46, 46) uint16 read-only>\n\n```python\nplt.imshow(x[0, 0, ...])\n```\n\n![png](docs/assets/example_thumbnail.png)\n\n```python\nplt.figure(figsize=(10, 10))\nfor i in range(64):\n    ax = plt.subplot(8, 8, i + 1)\n    ax.axis(\"off\")\n    ax.imshow(x[0, i, ...])\nplt.tight_layout()\n```\n\n![png](docs/assets/example_thumbnails.png)\n\n## Performance\n\nZarr arrays are [chunked](https://zarr.readthedocs.io/en/stable/tutorial.html?highlight=chunk#chunk-optimizations), meaning that they are split up into small pieces of equal size, and each chunk is stored in a separate file. Choice of the chunk size affects performance significantly.\n\nPerformance will also vary quite a bit depending on the access pattern. Slicing the array so that only data from a single chunk needs to be read from disk will be fast while array slices that cross many chunks will be slow.\n\nAn overview of some chunking performance considerations are [available here](https://www.oreilly.com/library/view/python-and-hdf5/9781491944981/ch04.html).\n\nBy default, *cellcutter* creates Zarr arrays with chunks of the size `[channels in TIFF, x cells, thumbnail width, thumbnail height]`, meaning for a given cell, all channels and the entire thumbnail image are stored in the same chunk. The number of cells `x` per chunk is calculated internally such that each chunk has a total uncompressed size of about 32 MB.\n\nThe default chunk size works well for access patterns that request all channels and the entire thumbnail for a given range of cells. Ideally, the cells should be contiguous along the second dimension of the array.\n\n\n```python\nimport zarr\nfrom numpy.random import default_rng\n```\n\n\n```python\nz = zarr.open(\"cellMaskThumbnails.zarr\", mode=\"r\")\n```\n\n\n```python\nz.shape\n```\n\n\n\n\n    (12, 9522, 46, 46)\n\n\n\n\n```python\nz.chunks\n```\n\n\n\n\n    (12, 660, 46, 46)\n\n\n\nThe `chunks` property gives the size of each chunk in the array. In this example, all 12 channels, 660 cells, and the complete thumbnail are stored in a single chunk.\n\nThe number of cells per chunk is determined automatically by default and can be set directly using the `--cells-per-chunk` argument to *cellcutter* or alternatively indirectly using `--chunk-size`.\n\nAlso here the number of cells per chunk should ideally be more or less in line with how many cells are requested in a typical array access operation.\n\n### Access patterns\n\n#### 100 Random cells\n\n\n```python\n\nrng = default_rng()\ndef rand_slice(n=100):\n    return rng.choice(z.shape[1], size=n, replace=False)\n```\n\n\n```python\n%%timeit\n_ = z.get_orthogonal_selection((slice(None), rand_slice()))\n```\n\n    101 ms ± 2.01 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\n\n#### 100 Contiguous cells\n\n\n```python\n%%timeit\n_ = z[:, 1000:1100, ...]\n```\n\n    5.81 ms ± 45.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\n\nAccessing **100 random cells** from the Zarr array takes around 100 ms whereas accessing **100 contiguous cells** (cell 1000 to 1100) only takes around 6 ms — an almost 17-fold speed difference. This is because random cells are likely to be distributed across many separate chunks. All these chunks need to be read into memory in full even if only a single cell is requested for a given chunk. Given that this particular array happens to be split up into 15 chunks total the speed difference suggests that every request of 100 random cells results in all chunks being read from disk\n\nIn contrast, contiguous cells are stored together in one or several neighboring chunks minimizing the amount of data that has to be read from disk.\n\n### Fast access to random cells\n\nIf access to random cells is required, for example for training a machine learning model, there is a workaround avoiding the performance penalty of requesting random cells. Instead of requesting a random slices of the array we can instead randomize cell order before the Zarr array is created. Because cell order is random we can then simply access a contiguous slice of cells during training.\nThe simplest way to randomize cell order is to shuffle the order of rows in the CSV file that is passed to *cellcutter*, for example by using *pandas* `df.sample(frac=1)`.\n\nA training loop using cell thumbnails created with this method could look something like this:\n\n\n```python\nimport pandas as pd\nfrom timeit import default_timer\n```\n\n\n```python\ncsv = pd.read_csv(\"exemplar-001/quantification/unmicst-exemplar-001_cellMask.csv\")\nP = 0.2\n\n# batch sizes\nbatch_size_train = 500\nbatch_size_valid = round(batch_size_train * P)\n\n# training loop\nfor i, s in enumerate(\n    range(0, len(csv) - batch_size_train - batch_size_valid, batch_size_train + batch_size_valid)\n):\n    # construct training and validation slices\n    train_slice = (s, s + batch_size_train)\n    valid_slice = (train_slice[1], train_slice[1] + batch_size_valid)\n    # get training and validation thumbnails\n    start_time = default_timer()\n    x_train = z[:, train_slice[0]:train_slice[1], ...]\n    x_valid = z[:, valid_slice[0]:valid_slice[1], ...]\n    end_time = default_timer()\n    print(\n        f\"Iteration {i} training using cells {train_slice}\",\n        f\"validating using cells {valid_slice}\",\n        f\"loading images took {round(end_time - start_time, 3)}s\"\n    )\n    # Do training\n```\n\n    Iteration 0 training using cells (0, 500) validating using cells (500, 600) loading images took 0.018s\n    Iteration 1 training using cells (600, 1100) validating using cells (1100, 1200) loading images took 0.03s\n    Iteration 2 training using cells (1200, 1700) validating using cells (1700, 1800) loading images took 0.024s\n    Iteration 3 training using cells (1800, 2300) validating using cells (2300, 2400) loading images took 0.023s\n    Iteration 4 training using cells (2400, 2900) validating using cells (2900, 3000) loading images took 0.023s\n    Iteration 5 training using cells (3000, 3500) validating using cells (3500, 3600) loading images took 0.023s\n    Iteration 6 training using cells (3600, 4100) validating using cells (4100, 4200) loading images took 0.023s\n    Iteration 7 training using cells (4200, 4700) validating using cells (4700, 4800) loading images took 0.023s\n    Iteration 8 training using cells (4800, 5300) validating using cells (5300, 5400) loading images took 0.023s\n    Iteration 9 training using cells (5400, 5900) validating using cells (5900, 6000) loading images took 0.027s\n    Iteration 10 training using cells (6000, 6500) validating using cells (6500, 6600) loading images took 0.02s\n    Iteration 11 training using cells (6600, 7100) validating using cells (7100, 7200) loading images took 0.019s\n    Iteration 12 training using cells (7200, 7700) validating using cells (7700, 7800) loading images took 0.023s\n    Iteration 13 training using cells (7800, 8300) validating using cells (8300, 8400) loading images took 0.023s\n    Iteration 14 training using cells (8400, 8900) validating using cells (8900, 9000) loading images took 0.025s\n\n\n\n## Funding\n\nThis work is supported by the following:\n\n* NCI grants U54-CA22508U2C-CA233262 and U2C-CA233280\n* NIH grant 1U54CA225088: Systems Pharmacology of Therapeutic and Adverse Responses to Immune Checkpoint and Small Molecule Drugs\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/labsyspharm/cellcutter",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cellcutter",
    "package_url": "https://pypi.org/project/cellcutter/",
    "platform": null,
    "project_url": "https://pypi.org/project/cellcutter/",
    "project_urls": {
      "Homepage": "https://github.com/labsyspharm/cellcutter"
    },
    "release_url": "https://pypi.org/project/cellcutter/0.2.7/",
    "requires_dist": [
      "scikit-image",
      "numpy",
      "pandas",
      "tifffile",
      "zarr",
      "numcodecs"
    ],
    "requires_python": ">=3.8",
    "summary": "cellcutter is a Python module for creating thumbnail images of cells given a multi-channel TIFF image and segmentation mask",
    "version": "0.2.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14902383,
  "releases": {
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58bb9213fbc20022ba4ff3b6f700e78518589b9fc047ae1af00bd3e172e392b6",
          "md5": "b8e3e0d56c1b39081400677916a4735b",
          "sha256": "8b1a3e58fdebbe76e7ede5ea550bcb993a49d19ceb26be84160d12236d623ede"
        },
        "downloads": -1,
        "filename": "cellcutter-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8e3e0d56c1b39081400677916a4735b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 16206,
        "upload_time": "2022-04-02T03:17:59",
        "upload_time_iso_8601": "2022-04-02T03:17:59.069137Z",
        "url": "https://files.pythonhosted.org/packages/58/bb/9213fbc20022ba4ff3b6f700e78518589b9fc047ae1af00bd3e172e392b6/cellcutter-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8248e9d0c4bdbd9f559c65d47c974196891126a030352b370dc0578da9b1c88",
          "md5": "93aac1585f350648f46942f6bd4fd679",
          "sha256": "f1babc6eac8319744bc9a1e3ef5ba0c8f4a6aab5f22dcddbb96c801d10e72f2b"
        },
        "downloads": -1,
        "filename": "cellcutter-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "93aac1585f350648f46942f6bd4fd679",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 17678,
        "upload_time": "2022-04-02T03:18:00",
        "upload_time_iso_8601": "2022-04-02T03:18:00.512480Z",
        "url": "https://files.pythonhosted.org/packages/b8/24/8e9d0c4bdbd9f559c65d47c974196891126a030352b370dc0578da9b1c88/cellcutter-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "907c677f3b7ee34ee074360af32be846e920f655401da40ba862e2e410845540",
          "md5": "b60d67d60499a80eb04eea04d5dcd638",
          "sha256": "703693d1abaf5b2d27c5022569e4eb3ad54ce1451e52be6db95fc793a5998e06"
        },
        "downloads": -1,
        "filename": "cellcutter-0.2.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b60d67d60499a80eb04eea04d5dcd638",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17049,
        "upload_time": "2022-06-03T16:55:55",
        "upload_time_iso_8601": "2022-06-03T16:55:55.913239Z",
        "url": "https://files.pythonhosted.org/packages/90/7c/677f3b7ee34ee074360af32be846e920f655401da40ba862e2e410845540/cellcutter-0.2.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "864fe09a43f5e46cb242a9ae036ed06c588974626e69fbdee5d9673a300ae213",
          "md5": "0258df68d9d3ac32f3d8f98db4837a5c",
          "sha256": "35acb036f6cc7af755b502a28bf7800b0c4c13d124e4bb09dce81388b27e0e99"
        },
        "downloads": -1,
        "filename": "cellcutter-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0258df68d9d3ac32f3d8f98db4837a5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 18550,
        "upload_time": "2022-06-03T16:55:57",
        "upload_time_iso_8601": "2022-06-03T16:55:57.296285Z",
        "url": "https://files.pythonhosted.org/packages/86/4f/e09a43f5e46cb242a9ae036ed06c588974626e69fbdee5d9673a300ae213/cellcutter-0.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ec96f56fa1db62d007ff1af7da0c3578834dafb92cb7b06f024024072037415",
          "md5": "d416a0fa02d521435ff405afc18acc04",
          "sha256": "901ad951988cfd9fcd83f9f4c3f268e62ac5e52adbe0ca02cce9468c57d56eb5"
        },
        "downloads": -1,
        "filename": "cellcutter-0.2.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d416a0fa02d521435ff405afc18acc04",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 16915,
        "upload_time": "2022-06-16T19:17:28",
        "upload_time_iso_8601": "2022-06-16T19:17:28.905027Z",
        "url": "https://files.pythonhosted.org/packages/2e/c9/6f56fa1db62d007ff1af7da0c3578834dafb92cb7b06f024024072037415/cellcutter-0.2.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ef7703c0d284b3ef1b16605e5e498320b17dd3191031f317ca5a02e31a8f1ad",
          "md5": "6a18169a519afc94a83d03f2317bd230",
          "sha256": "fc4c2fb4871f72d094d8f9bec6fe775c49ac3010f1a9de11096801fa8ec13d43"
        },
        "downloads": -1,
        "filename": "cellcutter-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "6a18169a519afc94a83d03f2317bd230",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 18446,
        "upload_time": "2022-06-16T19:17:30",
        "upload_time_iso_8601": "2022-06-16T19:17:30.374786Z",
        "url": "https://files.pythonhosted.org/packages/4e/f7/703c0d284b3ef1b16605e5e498320b17dd3191031f317ca5a02e31a8f1ad/cellcutter-0.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "daca66f4589c271a33bf097d2431a2b896387b29aa73e524c88ffc27d777dbfe",
          "md5": "6b1be1832fc7d978d55850a6753b325b",
          "sha256": "d7a4fa9012c399487785a8ddc6fb62e08da92f467b19cd5d73a6b3e88a06ac37"
        },
        "downloads": -1,
        "filename": "cellcutter-0.2.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b1be1832fc7d978d55850a6753b325b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 16955,
        "upload_time": "2022-08-26T16:30:08",
        "upload_time_iso_8601": "2022-08-26T16:30:08.380373Z",
        "url": "https://files.pythonhosted.org/packages/da/ca/66f4589c271a33bf097d2431a2b896387b29aa73e524c88ffc27d777dbfe/cellcutter-0.2.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56128a2b978eac73a455771af353e2bde2c3668167a35a97ce1c82ae150758d9",
          "md5": "084ededbb01e823ae95c0e9c2efed7bf",
          "sha256": "6ae7bc482e4c3a130cc44b5a9a63d2ea82a49b43894b8e39e48b171867e0c54b"
        },
        "downloads": -1,
        "filename": "cellcutter-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "084ededbb01e823ae95c0e9c2efed7bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 18508,
        "upload_time": "2022-08-26T16:30:10",
        "upload_time_iso_8601": "2022-08-26T16:30:10.025459Z",
        "url": "https://files.pythonhosted.org/packages/56/12/8a2b978eac73a455771af353e2bde2c3668167a35a97ce1c82ae150758d9/cellcutter-0.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "daca66f4589c271a33bf097d2431a2b896387b29aa73e524c88ffc27d777dbfe",
        "md5": "6b1be1832fc7d978d55850a6753b325b",
        "sha256": "d7a4fa9012c399487785a8ddc6fb62e08da92f467b19cd5d73a6b3e88a06ac37"
      },
      "downloads": -1,
      "filename": "cellcutter-0.2.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6b1be1832fc7d978d55850a6753b325b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 16955,
      "upload_time": "2022-08-26T16:30:08",
      "upload_time_iso_8601": "2022-08-26T16:30:08.380373Z",
      "url": "https://files.pythonhosted.org/packages/da/ca/66f4589c271a33bf097d2431a2b896387b29aa73e524c88ffc27d777dbfe/cellcutter-0.2.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "56128a2b978eac73a455771af353e2bde2c3668167a35a97ce1c82ae150758d9",
        "md5": "084ededbb01e823ae95c0e9c2efed7bf",
        "sha256": "6ae7bc482e4c3a130cc44b5a9a63d2ea82a49b43894b8e39e48b171867e0c54b"
      },
      "downloads": -1,
      "filename": "cellcutter-0.2.7.tar.gz",
      "has_sig": false,
      "md5_digest": "084ededbb01e823ae95c0e9c2efed7bf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 18508,
      "upload_time": "2022-08-26T16:30:10",
      "upload_time_iso_8601": "2022-08-26T16:30:10.025459Z",
      "url": "https://files.pythonhosted.org/packages/56/12/8a2b978eac73a455771af353e2bde2c3668167a35a97ce1c82ae150758d9/cellcutter-0.2.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}