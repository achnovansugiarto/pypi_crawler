{
  "info": {
    "author": "",
    "author_email": "\"Jesse P. Johnson\" <jpj6652@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "Superstate\n==========\n\nCompact statechart that can be vendored.\n\n\n## How to use\n\nA very simple example taken from specs.\n\n```python\n>>> from superstate import StateChart, create_machine\n\n>>> class SimpleMachine(StateChart):\n...     create_machine(\n...         {\n...             'name': 'machine',\n...             'initial': 'created',\n...             'states': [\n...                 {\n...                     'name': 'created',\n...                     'transitions': [\n...                         {'event': 'queue', 'target': 'waiting'},\n...                         {'event': 'cancel', 'target': 'canceled'},\n...                     ],\n...                 },\n...                 {\n...                     'name': 'waiting',\n...                     'transitions': [\n...                         {'event': 'process', 'target': 'processed'},\n...                         {'event': 'cancel', 'target': 'canceled'},\n...                     ]\n...                 },\n...                 {'name': 'processed'},\n...                 {'name': 'canceled'},\n...             ]\n...         }\n...     )\n\n>>> machine = SimpleMachine()\n\n>>> machine.state\n'State(created)'\n\n>>> machine.queue()\n\n>>> machine.state\n'State(waiting)'\n\n>>> machine.process()\n\n>>> machine.state\n'State(processed)'\n\n>>> cancel_machine = SimpleMachine()\n\n>>> cancel_machine.state\n'State(created)'\n\n>>> cancel_machine.cancel()\n\n>>> cancel_machine.state\n'State(canceled)'\n\n```\n\n\n## A slightly more complex example\n\nFor demonstrating more advanced capabilities::\n\n```python\n>>> from superstate import StateChart, create_machine\n\n>>> class Relationship(StateChart):\n...     create_machine(\n...         {\n...             'initial': 'dating',\n...             'states': [\n...                 {\n...                     'name': 'dating',\n...                     'transitions': [\n...                         {\n...                             'event': 'get_intimate',\n...                             'target': 'intimate',\n...                             'cond': 'drunk',\n...                         }\n...                     ],\n...                     'on_entry': 'make_happy',\n...                     'on_exit': 'make_depressed',\n...                 },\n...                 {\n...                     'name': 'intimate',\n...                     'transitions': [\n...                         {\n...                             'event': 'get_married',\n...                             'target': 'married',\n...                             'cond': 'willing_to_give_up_manhood',\n...                         }\n...                     ],\n...                     'on_entry': 'make_very_happy',\n...                     'on_exit': 'never_speak_again',\n...                 },\n...                 {\n...                     'name': 'married',\n...                     'on_entry': 'give_up_intimacy',\n...                     'on_exit': 'buy_exotic_car',\n...                 }\n...             ]\n...         }\n...     )\n\n...     def strictly_for_fun(self) -> None:\n...         pass\n\n...     def drunk(self) -> bool:\n...         return True\n\n...     def willing_to_give_up_manhood(self) -> bool:\n...         return True\n\n...     def make_happy(self) -> None:\n...         pass\n\n...     def make_depressed(self) -> None:\n...         pass\n\n...     def make_very_happy(self) -> None:\n...         pass\n\n...     def never_speak_again(self) -> None:\n...         pass\n\n...     def give_up_intimacy(self) -> None:\n...         pass\n\n...     def buy_exotic_car(self) -> None:\n...         pass\n\n# >>> relationship = Relationship()\n\n```\n\n\n## States\n\nA Superstate state machine must have one initial state and at least one other additional state.\n\nA state may have pre and post callbacks, for running some code on state *on_entry*\nand *on_exit*, respectively. These params can be method names (as strings),\ncallables, or lists of method names or callables.\n\n\n## Transitions\n\nTransitions lead the machine from a state to another. Transitions must have\nthe *event*, and *target* parameters. The *event* is the method that have to be\ncalled to launch the transition. The *target* is the state to which the\ntransition will move the machine. This method is automatically created\nby the Superstate engine.\n\nA transition can have optional *action* and *cond* parameters. *action* is a\nmethod (or callable) that will be called when transition is launched. If\nparameters are passed to the event method, they are passed to the *action*\nmethod, if it accepts these parameters. *cond* is a method (or callable) that\nis called to allow or deny the transition, depending on the result of its\nexecution. Both \"action\" and *cond* can be lists.\n\nThe same event can be in multiple transitions, going to different states, having\ntheir respective needs as selectors. For the transitions having the same event,\nonly one *cond* should return a true value at a time.\n\n\n### Install\n\n```\npip install superstate\n```\n\n\n### Test\n\n```\ntox\n```\n\n\n## Attribution\n\nSuperstate is forked from https://github.com/nsi-iff/fluidity created by Rodrigo Manh√£es.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "statechart,state machine",
    "license": "The MIT License  Copyright (c) 2022 Jesse P. Johnson  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",
    "maintainer": "",
    "maintainer_email": "\"Jesse P. Johnson\" <jpj6652@gmail.com>",
    "name": "superstate",
    "package_url": "https://pypi.org/project/superstate/",
    "platform": null,
    "project_url": "https://pypi.org/project/superstate/",
    "project_urls": {
      "repository": "https://github.com/kuwv/python-superstate"
    },
    "release_url": "https://pypi.org/project/superstate/1.1.0a3/",
    "requires_dist": [
      "build ; extra == 'build'",
      "proman-versioning (>=0.5.0-alpha.2) ; extra == 'build'",
      "docstr-coverage (>=1.2.0) ; extra == 'docs'",
      "mypy (>=0.942) ; extra == 'sca'",
      "bandit (>=1.6.2) ; extra == 'sca'",
      "black (==22.3.0) ; extra == 'style'",
      "isort (>=5.10.1) ; extra == 'style'",
      "flake8 (>=3.8.3) ; extra == 'style'",
      "pytest (>=7) ; extra == 'test'",
      "tox (>=3.25.0) ; extra == 'test'"
    ],
    "requires_python": ">=3.6.2",
    "summary": "Compact statechart that can be vendored.",
    "version": "1.1.0a3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15795695,
  "releases": {
    "1.1.0a3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d763d9069c6968e49fe08d93549dce7c1ce56c65ae83b2cf52201e7a8c45c58d",
          "md5": "44d240381b4e4b0a0f28e227cb5ac9a4",
          "sha256": "5602134e5cda588a2bc51024af24a38684185e430fe7dbf00e34af3c908969c7"
        },
        "downloads": -1,
        "filename": "superstate-1.1.0a3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44d240381b4e4b0a0f28e227cb5ac9a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.2",
        "size": 10011,
        "upload_time": "2022-11-17T01:03:20",
        "upload_time_iso_8601": "2022-11-17T01:03:20.692449Z",
        "url": "https://files.pythonhosted.org/packages/d7/63/d9069c6968e49fe08d93549dce7c1ce56c65ae83b2cf52201e7a8c45c58d/superstate-1.1.0a3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "005b399dec7a928421b63d7c21668f417930b5b58d97365099083c0b3041a140",
          "md5": "62048cfa81a07c751667bde17080c915",
          "sha256": "1b4b9c131b3272a9effa84c58f54660650c33795bfa407f663bd5eb02c77a704"
        },
        "downloads": -1,
        "filename": "superstate-1.1.0a3.tar.gz",
        "has_sig": false,
        "md5_digest": "62048cfa81a07c751667bde17080c915",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.2",
        "size": 10769,
        "upload_time": "2022-11-17T01:03:22",
        "upload_time_iso_8601": "2022-11-17T01:03:22.065289Z",
        "url": "https://files.pythonhosted.org/packages/00/5b/399dec7a928421b63d7c21668f417930b5b58d97365099083c0b3041a140/superstate-1.1.0a3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d763d9069c6968e49fe08d93549dce7c1ce56c65ae83b2cf52201e7a8c45c58d",
        "md5": "44d240381b4e4b0a0f28e227cb5ac9a4",
        "sha256": "5602134e5cda588a2bc51024af24a38684185e430fe7dbf00e34af3c908969c7"
      },
      "downloads": -1,
      "filename": "superstate-1.1.0a3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "44d240381b4e4b0a0f28e227cb5ac9a4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.2",
      "size": 10011,
      "upload_time": "2022-11-17T01:03:20",
      "upload_time_iso_8601": "2022-11-17T01:03:20.692449Z",
      "url": "https://files.pythonhosted.org/packages/d7/63/d9069c6968e49fe08d93549dce7c1ce56c65ae83b2cf52201e7a8c45c58d/superstate-1.1.0a3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "005b399dec7a928421b63d7c21668f417930b5b58d97365099083c0b3041a140",
        "md5": "62048cfa81a07c751667bde17080c915",
        "sha256": "1b4b9c131b3272a9effa84c58f54660650c33795bfa407f663bd5eb02c77a704"
      },
      "downloads": -1,
      "filename": "superstate-1.1.0a3.tar.gz",
      "has_sig": false,
      "md5_digest": "62048cfa81a07c751667bde17080c915",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.2",
      "size": 10769,
      "upload_time": "2022-11-17T01:03:22",
      "upload_time_iso_8601": "2022-11-17T01:03:22.065289Z",
      "url": "https://files.pythonhosted.org/packages/00/5b/399dec7a928421b63d7c21668f417930b5b58d97365099083c0b3041a140/superstate-1.1.0a3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}