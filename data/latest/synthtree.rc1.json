{
  "info": {
    "author": "Gustavo6046",
    "author_email": "rehermann6046@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Multimedia :: Sound/Audio :: Sound Synthesis"
    ],
    "description": "# synth-tree\n\nAn efficient additive synthesis library. Simple, clean, and very\ntypechecker-friendly; it might not be ideal for production, but\nthe code within might be interesting to the prying eye!\n\nInternally, it uses a binary tree representation to quickly cull\naway contiguous regions of zero parameters (that is, silent\nsine waves, in practice equivalent to no-op).\n\nIt comes with a class to read a PCM stream, as a read-only\nio.RawIOBase subclass. It also allows exporting to .WAV,\nand both serializing and deserializing TreeSynths with all\nparameters into a future-proof (version checking enabled)\nbinary format. Talk about standing the test of time!\n\n## How to use\n\nAfter you install it (using pip or setup.py), you can simply use\nthe TreeSynth class, use a index syntax (like a list) to set\nvalues, including ranges thereof using slice syntax, and then\nyou use call syntax (like a function) to obtain values.\n\n```py\n>>> import synthtree\n>>> synth = synthtree.SynthTree()\n>>> synth.values[90] = 0.5  # this is where the binary tree is constructed!\n>>> synth(20)\n-0.1950903220149695\n```\n\nNote that if you set one single value, the result will be one single sine wave.\nWhich is kind of boring. But that's because you only set **one** value!\n\nThink of each index into the synthesizer as its own sine wave oscillator, and\nthe corresponding value as the amplitude. Negative values simply invert the\nphase! The more values you set, the more interesting the wave. Hooray!\n\nBut let's suppose you got the most awesome wave ever imaginable. There's only\none issue... you can't *really* hear it now, can you? Well, you can! Simply export\nit to WAV:\n\n```\n>>> my_cool_synth.export_wav('my_cool_wave.wav')\n```\n\nThe default samplerate is 44.1 kHz (44100 Hertz), and by default the volume is halved\nto protect your ears from potential fun arising from setting ridiculous values and\nparameters. You can use the `amplitude` keyword argument to change that, **but use it\nat your own discretion!**\n\nWhat? You want to save the parameters you set so you can reuse them later? Simple!\nYou don't need to lug it around like a disgusting sack of pickles.\n([Pun intended.](https://docs.python.org/3.8/library/pickle.html))\nSimply use `SynthTree.dump()` to get your data in a sexy binary serialization format!\nHayo!\n\n```\n>>> data = my_cooler_synth.dump() \n```\n\nOnce you have your serialized data, you can write it to a file. Then, the next morning,\nyou wake up, feel the Need for Synth rushing in your veins again, and load it back into\na SynthTree!...actually, a tuple, containing your loaded SynthTree and any surplus data.\nThe latter is for convenience purposes for in case you're loading SynthTrees directly from\na byte stream or a larger file (which you probably shouldn't), but if you used `dump`\nthen it should be empty, so you may safely discard that, e.g. using the syntax demonstrated in the\nsecond REPL statement of the example below. *Note the comma!*\n\n```\n>>> synthtree.SynthTree.load(data)\n(<synthtree.synth.SynthTree object at 0x7ff99fca5df0>, b'')\n>>> my_cooler_synth_again, _ = synthtree.SynthTree.load(data) # Again, note the comma! See? *Now* you saw it, silly!\n>>> my_cooler_synth_again\n<synthtree.synth.SynthTree object at 0x7ff99fcb46a0>\n```\n\nYou can also use `synthtree.PCMStream` to get a raw PCM stream as a read-only file-like\nobject, and use it for whatever. Cool!\n\n```\n>>> stream = synthtree.PCMStream(my_super_cool_synth)\n>>> pcm = stream.read(8192)\n>>> # Step 3: ???\n>>> # Step 4: Profit!\n```\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Gustavo6046/synth-tree",
    "keywords": "audio synthesis,additive synthesis,synth,sound synthesis,synthesis,binary tree,efficiency,fast",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "synthtree",
    "package_url": "https://pypi.org/project/synthtree/",
    "platform": "",
    "project_url": "https://pypi.org/project/synthtree/",
    "project_urls": {
      "Homepage": "https://github.com/Gustavo6046/synth-tree",
      "Issue Tracker": "https://github.com/Gustavo6046/synth-tree/issues"
    },
    "release_url": "https://pypi.org/project/synthtree/0.1.0/",
    "requires_dist": [
      "mypy (>=0.790) ; extra == 'test'",
      "mypy ; extra == 'test'"
    ],
    "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*",
    "summary": "An efficient additive synthesizer that uses a binary tree algorithm and that is both serializable and can both export to WAV and stream raw PCM",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8797767,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22eb756ccef55e3e6ca9f5a836d5363f4410ff4ef67a67ab7c4487e3ed335c41",
          "md5": "e1de18a0fb8c9e3aeb0819e9c397d092",
          "sha256": "0d6186d27f478b07d62b6301ac3dcc55cd625d16f1c1c21a1ed55cbc76c05575"
        },
        "downloads": -1,
        "filename": "synthtree-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1de18a0fb8c9e3aeb0819e9c397d092",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*",
        "size": 10189,
        "upload_time": "2020-12-02T05:03:49",
        "upload_time_iso_8601": "2020-12-02T05:03:49.841620Z",
        "url": "https://files.pythonhosted.org/packages/22/eb/756ccef55e3e6ca9f5a836d5363f4410ff4ef67a67ab7c4487e3ed335c41/synthtree-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12ab318e36314f05b2755e65e22459f48b63dcd868ed5b6f5c90dd9bb1ab2b11",
          "md5": "596bbc2f189e7a0d66dac2f3acaf2698",
          "sha256": "ef167893e0f40cf30117701121389ac736d09d00213e32a6e60c44fe011c8013"
        },
        "downloads": -1,
        "filename": "synthtree-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "596bbc2f189e7a0d66dac2f3acaf2698",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*",
        "size": 11151,
        "upload_time": "2020-12-02T05:03:51",
        "upload_time_iso_8601": "2020-12-02T05:03:51.614961Z",
        "url": "https://files.pythonhosted.org/packages/12/ab/318e36314f05b2755e65e22459f48b63dcd868ed5b6f5c90dd9bb1ab2b11/synthtree-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "22eb756ccef55e3e6ca9f5a836d5363f4410ff4ef67a67ab7c4487e3ed335c41",
        "md5": "e1de18a0fb8c9e3aeb0819e9c397d092",
        "sha256": "0d6186d27f478b07d62b6301ac3dcc55cd625d16f1c1c21a1ed55cbc76c05575"
      },
      "downloads": -1,
      "filename": "synthtree-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e1de18a0fb8c9e3aeb0819e9c397d092",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*",
      "size": 10189,
      "upload_time": "2020-12-02T05:03:49",
      "upload_time_iso_8601": "2020-12-02T05:03:49.841620Z",
      "url": "https://files.pythonhosted.org/packages/22/eb/756ccef55e3e6ca9f5a836d5363f4410ff4ef67a67ab7c4487e3ed335c41/synthtree-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12ab318e36314f05b2755e65e22459f48b63dcd868ed5b6f5c90dd9bb1ab2b11",
        "md5": "596bbc2f189e7a0d66dac2f3acaf2698",
        "sha256": "ef167893e0f40cf30117701121389ac736d09d00213e32a6e60c44fe011c8013"
      },
      "downloads": -1,
      "filename": "synthtree-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "596bbc2f189e7a0d66dac2f3acaf2698",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*",
      "size": 11151,
      "upload_time": "2020-12-02T05:03:51",
      "upload_time_iso_8601": "2020-12-02T05:03:51.614961Z",
      "url": "https://files.pythonhosted.org/packages/12/ab/318e36314f05b2755e65e22459f48b63dcd868ed5b6f5c90dd9bb1ab2b11/synthtree-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}