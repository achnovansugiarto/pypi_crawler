{
  "info": {
    "author": "Sibidharan",
    "author_email": "sibi@selfmade.ninja",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MongoGetterSetter - A Clean Realtime MongoDB Getter Setter API for Python\n\n\n[![PyPI version](https://badge.fury.io/py/mongogettersetter.svg)](https://badge.fury.io/py/mongogettersetter)\n[![Downloads](https://pepy.tech/badge/mongogettersetter)](https://pepy.tech/project/mongogettersetter)\n[![Downloads](https://pepy.tech/badge/mongogettersetter/month)](https://pepy.tech/project/mongogettersetter/month)\n[![Downloads](https://pepy.tech/badge/mongogettersetter/week)](https://pepy.tech/project/mongogettersetter/week)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n`MongoGetterSetter` is a metaclass that provides a convenient getter and setter API for instances of the classes that use it, allowing natural operations in Python objects to easily reflect in MongoDB documents.\n\nThe idea is to convert MongoDB Document into Python Object of Type `MongoGetterSetter` in High Level, and all other document's sub documents are treated as `dict` wrapped with `MongoDictWrapper` and other datatypes like `int`, `bool` `float` and `list` are all handled by `MongoDataWrapper`.\n\nHere, we initialize `Employee` class with `_collection` and `_filter_query` as mandatory attributes for `MongoGetterSetter` to function properly. These 2 attributes are used internally to do further manipulations to MongoDB documents. You can change the `_filter_query` attribute to customize the filter query as per your needs. `_collection` should point to the MongoDB collection.\n\n\n### Usage of `MongoGetterSetter` metaclass\n```\nfrom pymongo import MongoClient\nfrom mongogettersetter import MongoGetterSetter\n\n# Connect to the MongoDB database and collection\n\nclient = MongoClient(\"mongodb://localhost:27017/\")\ndb = client[\"example_db\"]\ncollection = db[\"employee\"]\nclass Employee(metaclass=MongoGetterSetter):\n    def __init__(self, _id):\n    self._filter_query = {\"id\": _id} # or the ObjectID, at your convinence\n    self._collection = collection # Should be a pymongo.MongoClient[database].collection\n\n    # if the document doesn't exist, we could create it here\n    try:\n        self._id # if the document doesn't exist, self._id will raise Attribute Error\n    except AttributeError or KeyError:\n        self._collection.insert_one(self._filter_query)\n\n```\n\nNow, save the above code in a file named `employee.py` and run the following command in the same directory:\n\n```\n$ python3 -i employee.py\n```\nThis will run the contents of employee.py in interactive mode. Now, you can create an instance of `Employee` class and do operations on it. \n\nBefore that, assume you have a MongoDB Collection called `employee` with an object like this:\n```json\n{'_id': ObjectId('640311ab0469a9c4eaf3d2bd'), 'id': 4051, 'email': 'manoj123@gmail.com', 'password': 'SomeNew SecurePassword', 'about': None, 'token': '7f471974-ae46-4ac0-a882-1980c300c4d6', 'country': 'India', 'location': None, 'lng': 0, 'lat': 0, 'dob': None, 'gender': 0, 'userType': 1, 'userStatus': 1, 'profilePicture': 'Images/9b291404-bc2e-4806-88c5-08d29e65a5ad.png', 'coverPicture': 'Images/44af97d9-b8c9-4ec1-a099-010671db25b7.png', 'enablefollowme': False, 'sendmenotifications': False, 'sendTextmessages': False, 'enabletagging': False, 'createdAt': '2020-01-01T11:13:27.1107739', 'updatedAt': '2020-01-02T09:16:49.284864', 'livelng': 77.389849, 'livelat': 28.6282231, 'liveLocation': 'Unnamed Road, Chhijarsi, Sector 63, Noida, Uttar Pradesh 201307, India', 'creditBalance': 130, 'myCash': 0, 'data': {'name': 'array_test', 'arr': [1, 2, 3, 4, 5, 6, 7, 8], 'hobies': {'composer': ['anirudh', {'co_singer': ['rakshitha', 'divagar', 'sibi']}, 'yuvan'], 'music': 'helo'}}, 'scores': [{'subject': 'math', 'score': 100}, {'subject': 'physics', 'score': 85}, {'subject': 'chemistry', 'score': 95}], 'fix': 1, 'hello': 1, 'recent_views': [200], 'exam': '', 'subject': '', 'arr': {'name': 'sibidharan', 'pass': 'hello', 'score': {'subject': {'minor': 'zoology', 'major': 'biology', 'others': ['evs', {'name': 'shiro', 'inarr': [200, 2, 3, {'sub': 'testsub', 'newsu': 'aksjdad', 'secret': 'skdjfnsdkfjnsdfsdf'}, 4, 12]}]}, 'score': 40, 'new': 'not7', 'hello': {'arr': [5, 2]}}}, 'name': 'ManojKumar', 'd': [1, 3, 4, 5], 'score': {}, 'hgf': 5}\n```\n\nThis can be accessed by creating an instance of `Employee` class with the proper `id` as given in the `self._filter_query`. If such ID doesn't exist, it will create a new document with the given `id`.\n\nFor example:\n\n```\n>>> e = Employee(4051)\n```\n\nNow this `e` object is an instance of `Employee` class, which is a subclass of `MongoGetterSetter` metaclass. This object is a wrapper around the MongoDB document, which is fetched from the MongoDB collection using the `self._filter_query` from the `self._collection` attribute. You can access the MongoDB document and do CURD essential operations just by accessing this object's attributes/indexes. For the available methods, see the `MongoDataWrapper` and `MongoDictWrapper` methods. For example:\n\n```\n>>> e = Employee(4051)\n>>> e\n{'_id': ObjectId('640311ab0469a9c4eaf3d2bd'), 'id': 4051, 'email': 'manoj123@gmail.com', 'password': 'SomeNew SecurePassword', 'about': None, 'token': '7f471974-ae46-4ac0-a882-1980c300c4d6', 'country': 'India', 'location': None, 'lng': 0, 'lat': 0, 'dob': None, 'gender': 0, 'userType': 1, 'userStatus': 1, 'profilePicture': 'Images/9b291404-bc2e-4806-88c5-08d29e65a5ad.png', 'coverPicture': 'Images/44af97d9-b8c9-4ec1-a099-010671db25b7.png', 'enablefollowme': False, 'sendmenotifications': False, 'sendTextmessages': False, 'enabletagging': False, 'createdAt': '2020-01-01T11:13:27.1107739', 'updatedAt': '2020-01-02T09:16:49.284864', 'livelng': 77.389849, 'livelat': 28.6282231, 'liveLocation': 'Unnamed Road, Chhijarsi, Sector 63, Noida, Uttar Pradesh 201307, India', 'creditBalance': 130, 'myCash': 0, 'data': {'name': 'array_test', 'arr': [1, 2, 3, 4, 5, 6, 7, 8], 'hobies': {'composer': ['anirudh', {'co_singer': ['rakshitha', 'divagar', 'sibi']}, 'yuvan'], 'music': 'helo'}}, 'scores': [{'subject': 'math', 'score': 100}, {'subject': 'physics', 'score': 85}, {'subject': 'chemistry', 'score': 95}], 'fix': 1, 'hello': 1, 'recent_views': [200], 'exam': '', 'subject': '', 'arr': {'name': 'sibidharan', 'pass': 'hello', 'score': {'subject': {'minor': 'zoology', 'major': 'biology', 'others': ['evs', {'name': 'shiro', 'inarr': [200, 2, 3, {'sub': 'testsub', 'newsu': 'aksjdad', 'secret': 'skdjfnsdkfjnsdfsdf'}, 4, 12]}]}, 'score': 40, 'new': 'not7', 'hello': {'arr': [5, 2]}}}, 'name': 'ManojKumar', 'd': [1, 3, 4, 5], 'score': {}, 'hgf': 5}\n>>> e.id\n4051\n>>> e.id.get()\n4051\n>>> e.name\nManojKumar\n>>> e.name.get()\nManojKumar\n```\n\nThe MongoDB Document's root level attributes are directly accessible as the attributes of the `MongoGetterSetter` object. For example, `e.id` can also be accessible as `e['id']` and `e.name` can also be accessible as `e['name']`. The `e.id.get()` and `e.name.get()` methods are used to get the original datatype of the MongoDB document's root level attributes. For example, `e.id` is an `int` datatype, so `e.id.get()` will return the original `int` datatype. Similarly, `e.data` is a `dict` datatype wrapped in `MongoDictWrapper`, `e.data.get()` will return the original `dict` datatype.\n\nFor Example:\n\n```\n>>> e.name = \"S. Manoj Kumar\"\n>>> e.name\nS. Manoj Kumar\n>>> e.data\n{'name': 'array_test', 'arr': [1, 2, 3, 4, 5, 6, 7, 8], 'hobies': {'composer': ['anirudh', {'co_singer': ['rakshitha', 'divagar', 'sibi']}, 'yuvan'], 'music': 'helo'}}\n>>> type(e.data)\n<class 'mongogettersetter.MongoDataWrapper'>\n>>> e.data.name = \"ThisIsAwesmoe\"\n>>> e.data\n{'name': 'ThisIsAwesmoe', 'arr': [1, 2, 3, 4, 5, 6, 7, 8], 'hobies': {'composer': ['anirudh', {'co_singer': ['rakshitha', 'divagar', 'sibi']}, 'yuvan'], 'music': 'helo'}}\n>>> \n```\n\nThe `MongoDataWrapper` class is used to wrap the MongoDB document datatypes to provide MongoDB Array/List Operations over a simple, straightforward API to perform various operations on the MongoDB collection.\n\nYou can perform almost all basic array operations MongoDB supports. For example, you can use `e.data.arr.push(9)` to append a new element to the `arr` array. Similarly, you can use `e.data.arr.pop()` to pop the last element from the `arr` array. You can also use `e.data.arr.remove(2)` to remove the element `2` from the `arr` array. You can also use `e.data.arr.insert(0, [1,2,3])` to insert the element `[1,2,3]` at the beginning of the `arr` array. You can also use `e.data.arr[0] = 0` to set the first element of the `arr` array to `0`. You can also use `e.data.arr[0]` to get the first element of the `arr` array. You can also use `e.data.arr[0].get()` to get the original datatype of the first element of the `arr` array.\n\n```\n>>> e.data\n{'name': 'ThisIsAwesmoe', 'arr': [1, 2, 3, 4, 5, 6, 7, 8], 'hobies': {'composer': ['anirudh', {'co_singer': ['rakshitha', 'divagar', 'sibi']}, 'yuvan'], 'music': 'helo'}}\n>>> type(e.data)\n<class 'mongogettersetter.MongoDataWrapper'>\n>>> type(e.data.get())\n<class 'dict'>\n>>> e.data.arr.push(9)\nTrue\n>>> e.data\n{'name': 'ThisIsAwesmoe', 'arr': [1, 2, 3, 4, 5, 6, 7, 8, 9], 'hobies': {'composer': ['anirudh', {'co_singer': ['rakshitha', 'divagar', 'sibi']}, 'yuvan'], 'music': 'helo'}}\n>>> e.data.arr[1] = 100\n>>> e.data.arr\n[1, 100, 3, 4, 5, 6, 7, 8, 9]\n>>> e.data.arr[1]\n100\n```\nAccess documents in any depth, either as attributes or as keys, to access nested data. For example, `e.data.hobies` is a nested dictionary, so you can access the `hobies` dictionary as `e.data.hobies` or `e.data['hobies']`. Similarly, `e.data.hobies.composer` is a nested list, so you can access the `composer` list as `e.data.hobies.composer` or `e.data.hobies['composer']`. Similarly, `e.data.hobies.composer[1]` is a nested dictionary, so you can access the `co_singer` list as `e.data.hobies.composer[1].co_singer` or `e.data.hobies.composer[1]['co_singer']`. Perform all possible operations on all the nested data, limited to the MongoDB supported operations.\n\n```\n>>> e.data.hobies\n{'composer': ['anirudh', {'co_singer': ['rakshitha', 'divagar', 'sibi']}, 'yuvan'], 'music': 'helo'}\n>>> e.data.hobies.composer\n['anirudh', {'co_singer': ['rakshitha', 'divagar', 'sibi']}, 'yuvan']\n>>> e.data.hobies.composer.push('rahman')\nTrue\n>>> e.data.hobies.composer\n['anirudh', {'co_singer': ['rakshitha', 'divagar', 'sibi']}, 'yuvan', 'rahman']\n>>> e.data.hobies.composer[1]\n{'co_singer': ['rakshitha', 'divagar', 'sibi']}\n>>> e.data.hobies.composer[1].co_singer\n['rakshitha', 'divagar', 'sibi']\n>>> e.data.hobies.composer[1].co_singer.pop()\nTrue\n>>> e.data.hobies.composer[1].co_singer\n['rakshitha', 'divagar']\n>>> e.data.hobies.composer[1].co_singer.insert(0, 'sushila')\nTrue\n>>> e.data.hobies.composer[1].co_singer\n['sushila', 'rakshitha', 'divagar']\n>>> e.data.hobies\n{'composer': ['anirudh', {'co_singer': ['sushila', 'rakshitha', 'divagar']}, 'yuvan', 'rahman'], 'music': 'helo'}\n>>> e.data.hobies.music = 'melody'\n>>> e.data.hobies\n{'composer': ['anirudh', {'co_singer': ['sushila', 'rakshitha', 'divagar']}, 'yuvan', 'rahman'], 'music': 'melody'}\n>>> e.data.hobies.composer[1].main_singer = 'SPB'\n>>> e.data.hobies\n{'composer': ['anirudh', {'co_singer': ['sushila', 'rakshitha', 'divagar'], 'main_singer': 'SPB'}, 'yuvan', 'rahman'], 'music': 'melody'}\n>>> e.data.hobies.composer\n['anirudh', {'co_singer': ['sushila', 'rakshitha', 'divagar'], 'main_singer': 'SPB'}, 'yuvan', 'rahman']\n>>> e.data.hobies.composer[1].main_singer\n'SPB'\n>>> type(e.data.hobies.composer[1].main_singer)\n<class 'str'>\n>>> type(e.data.hobies.composer)\n<class 'mongogettersetter.MongoDataWrapper'>\n>>> type(e.data.hobies.composer[1])\n<class 'mongogettersetter.MongoDictWrapper'>\n>>> e.data.hobies.composer[1].get('co_singer')\n['sushila', 'rakshitha', 'divagar']\n>>> e.data.hobies.composer[1].get()\n{'co_singer': ['sushila', 'rakshitha', 'divagar'], 'main_singer': 'SPB'}\n>>> type(e.data.hobies.composer[1].get())\n<class 'dict'>\n>>> \n```\n## MongoGetterSetter\n\n`MongoGetterSetter` is a metaclass that provides a convenient getter and setter API for instances of the classes that use it, allowing natural operations in Python objects to easily reflect in MongoDB documents.\n### Methods\n\n- `__getattr__(self, key)`: Returns a `MongoDataWrapper` instance for the given `key`. See below for the capabalities of `MongoDataWrapper`\n\n    Example:\n    ```\n    obj = Employee(_id)\n    result = obj.some_key\n    ```\n- `__getitem__(self, key, value)`: Gets the value of the specified `key` from the MongoDB document.\n\n    Example:\n\n    ```\n    print(obj['some_key'])\n    ```\n- `__setattr__(self, key, value)`: Sets the value of the specified `key` in the MongoDB document.\n\n    Example:\n\n    ```\n    obj.some_key = \"new_value\"\n    ```\n\n- `__setitem__(self, key, value)`: Sets the value of the specified `key` in the MongoDB document.\n\n    Example:\n\n    ```\n    obj['some_key'] = \"new_value\"\n    ```\n\n- `__contains__(self, key)`: Checks if the MongoDB document contains the specified `key`.\n\n    Example:\n\n    ```\n    if \"some_key\" in obj:\n        print(\"Key exists\")\n    ```\n\n- `__str__(self)`: Returns a string representation of the MongoDB document.\n\n    Example:\n\n    ```\n    print(obj)\n    ```\n- `__delitem__(self, key)`: Removes the specified key from the MongoDB document.\n\n    Example:\n    ```\n    del obj['some_key']\n    ```\n- `__delattr__(self, key)`: Removes the specified key from the MongoDB document.\n\n    Example:\n    ```\n    del obj.some_key\n    ```\n- `delete(self)`: Removes document itself from the MongoDB\n\n    Example:\n    ```\n    obj.delete()\n    ```\n- `get(self)`: Returns the MongoDB document.\n\n    Example:\n    ```\n    print(obj.get())\n    ```\n- `set(self, data)`: Sets the given updated document in the MongoDB collection\n\n    Example:\n    ```\n    obj.set({\n        \"password\": \"$2$somenewpassword\",\n        \"country\": \"Malaysia\"\n    })\n    ```\n\n## MongoDataWrapper\n\n`MongoDataWrapper` is a subscriptable class, which wraps MongoDB document datatypes to provide MongoDB Array/List Operations over a simple, straightforward API to perform various operations on the MongoDB collection. Check the list of methods for the allowed operations.\n\n### Methods\n\n- `__init__(self, _id, key, collection)`: Initialize the instance with the given `_id`, `key`, and `collection`.\n\n- `get(self)`: Returns the value of the key in the MongoDB document.\n\n- `inArray(self, value)`: Checks if the given `value` is present in the array of the document's key.\n\n- `push(self, *values, maximum=-1)`: Pushes one or more `values` into the array of the document's key. If `maximum` is specified, it will limit the array size to the `maximum` value.\n\n- `addToSet(self, value)`: Adds a `value` to the array of the document's key only if it doesn't exist in the array.\n\n- `pop(self, direction=1)`: Removes the first (`direction=-1`) or the last (`direction=1`) element from the array of the document's key.\n\n- `pull(self, value)`: Removes the specified `value` from the array of the document's key.\n\n- `pullAll(self, *values)`: Removes all occurrences of the specified `values` from the array of the document's key.\n\n- `matchSize(self, value)`: Checks if the size of the array of the document's key is equal to the given `value`.\n\n- `elemMatch(self, **kvalues)`: Checks if the array of the document's key contains at least one element that matches the specified key-value pairs in `kvalues`.\n\n- `matchAll(self, *values)`: Checks if the array of the document's key contains all the specified `values`.\n\n- `update(self, field, match, **kvalues)`: Updates the nested field `field` of the document's key where the `field` value matches `match`, with the key-value pairs provided in `kvalues`.\n\n- `insert(self, index, value)`: Inserts the given `value` at the specified `index` in the array of the document's key.\n\n- `index(self, value)`: Find the index of the given value in array. It will return -1 if the value is not present in the list.\n\n- `delete(self)`: Delets the key from MongoDB Document\n\n- `__getitem__(self, index)`: Returns the value of the array of the document's key at the specified `index`.\n\n- `__setitem__(self, index, value)`: Sets the value of the array of the document's key at the specified `index` to the given `value`.\n\n- `__delitem__(self, index)`: Removes the value of the array of the document's key at the specified `index`.\n\n- `__len__(self)`: Returns the length of the array of the document's key.\n\n- `__str__(self)`: Returns a string representation of the value of the document's key.\n\n- `__repr__(self)`: Returns a string representation of the value of the document's key.\n\n\n## MongoDictWrapper\n\n`MongoDictWrapper` is a class that inherits from the `dict` class and extends its functionalities to access dictionary keys as attributes. It allows you to access, modify, and manipulate MongoDB documents using Python dictionaries. When a MongoDataWrapper returns a `dict`, it automatically is wrapped with `MongoDictWrapper`, when it returns a `list`, it automatically is wrapped with `MongoDataWrapper` to allow manipulation of MongoDB object inside a MongoDB object, like a `dict` inside a `dict`. If you wish to access the value as default datatype, consider get() method.\n\n### Methods\n\n- `__init__(self, *args, **kwargs)`: Constructor method that initializes the base `dict` class.\n\n- `prepare(self, _id, key, collection, filter_query)`: This method initializes the internal data structure that stores information about the document's location in the MongoDB collection.\n\n- `__getitem__(self, key)`: Overrides the base `dict` method to return a wrapped MongoDictWrapper when accessing a nested dictionary.\n\n- `__setitem__(self, key, value)`: Overrides the base `dict` method to update the MongoDB document when setting a key-value pair.\n\n- `__delattr__(self, key)`: Overrides the base `dict` method to delete a key-value pair from the MongoDB document when deleting an attribute.\n\n- `__getattr__(self, key)`: Overrides the base `dict` method to return a wrapped MongoDictWrapper when accessing a nested dictionary.\n\n- `__setattr__(self, key, value)`: Overrides the base `dict` method to update the MongoDB document when setting a key-value pair.\n\n- `__delitem__(self, key)`: Overrides the base `dict` method to delete a key-value pair from the MongoDB document when deleting an item.\n\n- `get(self, key, default=None)`: Overrides the base `dict` method to return the value of the key in the MongoDB document, or the `default` value if the key is not present.\n\n- `pop(self, key, default=None)`: Overrides the base `dict` method to remove and return the value of the key in the MongoDB document, or the `default` value if the key is not present.\n\n- `update(self, other)`: Overrides the base `dict` method to update the MongoDB document with the key-value pairs from the `other` dictionary or iterable.\n\n- `delete(self)`: Delets the key from MongoDB Document\n\n- `clear(self)`: Overrides the base `dict` method to remove all key-value pairs from the MongoDB document.\n\n- `__len__(self)`: Overrides the base `dict` method to return the number of key-value pairs in the MongoDB document.\n\n- `__str__(self)`: Overrides the base `dict` method to return a string representation of the MongoDB document.\n\n- `__repr__(self)`: Overrides the base `dict` method to return a string representation of the MongoDB document.\n## Examples\n\nTo provide a more detailed example, let's assume you have a MongoDB collection named `people` with the following documents:\n\n```\n[\n    {\n        \"id\": 1,\n        \"name\": \"Alice\",\n        \"age\": 30,\n        \"skills\": [\"Python\", \"Django\", \"JavaScript\"],\n        \"contact\": {\n            \"email\": \"alice@example.com\",\n            \"phone\": \"555-1234\"\n        },\n        \"projects\": [\n            {\n                \"title\": \"Project A\",\n                \"status\": \"completed\"\n            },\n            {\n                \"title\": \"Project B\",\n                \"status\": \"in progress\"\n            }\n        ]\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Bob\",\n        \"age\": 25,\n        \"skills\": [\"Java\", \"Spring\", \"JavaScript\"],\n        \"contact\": {\n            \"email\": \"bob@example.com\",\n            \"phone\": \"555-5678\"\n        },\n        \"projects\": [\n            {\n                \"title\": \"Project X\",\n                \"status\": \"completed\"\n            },\n            {\n                \"title\": \"Project Y\",\n                \"status\": \"in progress\"\n            }\n        ]\n    }\n]\n```\n\nNow, let's create a class called `People` with `MongoGetterSetter` as its metaclass.\n\n```\nfrom pymongo import MongoClient\nfrom mongogettersetter import MongoGetterSetter\n\n# Connect to the MongoDB database and collection\nclient = MongoClient(\"mongodb://localhost:27017/\")\ndb = client[\"example_db\"]\npeople_collection = db[\"people\"]\n\nclass People(metaclass=MongoGetterSetter):\n    def __init__(self, _id):\n        self._filter_query = {\"id\": _id}  # or the ObjectID, at your convenience\n        self._collection = people_collection  # Should be a pymongo.MongoClient[database].collection\n\n        try:\n            self._id # if the document doesn't exist, self._id will raise Attribute Error\n        except AttributeError or KeyError:\n            self._collection.insert_one({\n                \"id\": _id\n            })\n```\n\n\n\nCreate a People object for Alice with `id = 1`\n```\nalice = People(1)\n```\n\nAccess and modify Alice's name\n```\nprint(alice.name)  # Output: 'Alice'\nalice.name = \"Alice Johnson\"\nprint(alice.name)  # Output: 'Alice Johnson'\n```\n\nCheck if Alice's document has a 'contact' field\n```\nif 'contact' in alice:\n    print(\"Contact field exists\")\n```\n\nAccess and modify Alice's email\n\n```\nprint(alice.contact)  # Output: {'email': 'alice@example.com', 'phone': '555-1234'}\nalice.contact.email = \"alice.johnson@example.com\"\nprint(alice.contact.email)  # Output: 'alice.johnson@example.com'\n```\n\nAccess and modify Alice's skills\n```\nprint(alice.skills)# Output: ['Python', 'Django', 'JavaScript']\n\nprint(alice.skills.get())  # Output: ['Python', 'Django', 'JavaScript']\nalice.skills.push(\"React\", maximum=4)\nprint(alice.skills.get())  # Output: ['Python', 'Django', 'JavaScript', 'React']\nalice.skills.pop(direction=-1)\nprint(alice.skills.get())  # Output: ['Python', 'Django', 'JavaScript']\n```\n\nAccess and modify Alice's projects\n\n```\nprint(alice.projects.get())  # Output: [{'title': 'Project A', 'status': 'completed'}, {'title': 'Project B', 'status': 'in progress'}]\nalice.projects.update(\"title\", \"Project A\", status=\"archived\")\nprint(alice.projects.get())  # Output: [{'title': 'Project A', 'status': 'archived'}, {'title': 'Project B', 'status': 'in progress'}]\n```\n\n## More `MongoDataWrapper` examples\n\n\nCreate a People object for Alice with id = 1\n```\nalice = People(1)\n```\n\nCreate MongoDataWrapper instances for Alice's skills and projects\n```\nalice_skills = alice.skills\nalice_projects = alice.projects\n```\n\n### Examples for each method of the MongoDataWrapper class\n\n1. `get()`\n```\nprint(alice_skills.get())  # Output: ['Python', 'Django', 'JavaScript']\n```\n\n2. `inArray()`\n```\nprint(alice_skills.inArray(\"Python\"))  # Output: True\n```\n\n3. `push()`\n```\nalice_skills.push(\"React\", \"Java\", maximum=5)\nprint(alice_skills.get())  # Output: ['Python', 'Django', 'JavaScript', 'React', 'Java']\n```\n\n4. `addToSet()`\n```\nalice_skills.addToSet(\"C++\")\nprint(alice_skills.get())  # Output: ['Python', 'Django', 'JavaScript', 'React', 'Java', 'C++']\n```\n\n5. `pop()`\n```\nalice_skills.pop(direction=-1)\nprint(alice_skills.get())  # Output: ['Python', 'Django', 'JavaScript', 'React', 'Java']\n```\n\n6. `pull()`\n```\nalice_skills.pull(\"Java\")\nprint(alice_skills.get())  # Output: ['Python', 'Django', 'JavaScript', 'React']\n```\n\n7. `pullAll()`\n```\nalice_skills.pullAll(\"Python\", \"React\")\nprint(alice_skills.get())  # Output: ['Django', 'JavaScript']\n```\n\n8. `matchSize()`\n```\nprint(alice_skills.size(2))  # Output: True\n```\n\n9. `elemMatch()`\n```\nprint(alice_projects.elemMatch(title=\"Project A\", status=\"completed\"))  # Output: True\n```\n\n10. `matchAll()`\n```\nprint(alice_skills.all(\"Django\", \"JavaScript\"))  # Output: True\n```\n\n11. `update()`\n```\nalice_projects.update(\"title\", \"Project A\", status=\"archived\")\nprint(alice_projects.get())  # Output: [{'title': 'Project A', 'status': 'archived'}, {'title': 'Project B', 'status': 'in progress'}]\n```\n\n12. `__len__()`\n```\nprint(len(alice_skills))  # Output: 2\n```\n\n13. `__str__() and __repr__()`\n```\nprint(alice_skills)  # Output: ['Django', 'JavaScript']\nprint(repr(alice_skills))  # Output: ['Django', 'JavaScript']\n```\n\n## More `MongoDictWrapper` examples\n\n```\n>>> e = Employee(4051)\n>>> e\n{'_id': ObjectId('640311ab0469a9c4eaf3d2bd'), 'id': 4051, 'name': 'Manoj', 'email': 'manoj123@gmail.com', 'password': 'different password', 'about': None, 'token': '7f471974-ae46-4ac0-a882-1980c300c4d6', 'country': None, 'location': None, 'lng': 0, 'lat': 0, 'dob': None, 'gender': 0, 'userType': 1, 'userStatus': 1, 'profilePicture': 'Images/9b291404-bc2e-4806-88c5-08d29e65a5ad.png', 'coverPicture': 'Images/44af97d9-b8c9-4ec1-a099-010671db25b7.png', 'enablefollowme': False, 'sendmenotifications': False, 'sendTextmessages': False, 'enabletagging': False, 'createdAt': '2020-01-01T11:13:27.1107739', 'updatedAt': '2020-01-02T09:16:49.284864', 'livelng': 77.389849, 'livelat': 28.6282231, 'liveLocation': 'Unnamed Road, Chhijarsi, Sector 63, Noida, Uttar Pradesh 201307, India', 'creditBalance': 127, 'myCash': 0, 'data': [4, 3, 4, 5, 7], 'arr': {'name': 'shiro', 'pass': 'hello', 'score': {'subject': {'minor': 'physics', 'major': 'science'}, 'score': 95}}, 'scores': [{'subject': 'math', 'score': 95}, {'subject': 'physics', 'score': 85}, {'subject': 'chemistry', 'score': 95}], 'recent_views': [4, 4, 4, 4, 4, 4, 4, 4, 4], 'fix': 1, 'hello': 1}\n>>> e.arr\n{'name': 'shiro', 'pass': 'hello', 'score': {'subject': {'minor': 'physics', 'major': 'science'}, 'score': 95}}\n>>> e.arr['name'] = 'sibidharan' # MongoDataWrapper is also Subscriptable\n>>> e.arr\n{'name': 'sibidharan', 'pass': 'hello', 'score': {'subject': {'minor': 'physics', 'major': 'science'}, 'score': 95}}\n>>> e.arr.score # Queried from the MongoDB directly\n{'subject': {'minor': 'physics', 'major': 'science'}, 'score': 95}\n>>> e.arr.score['subject']\n{'minor': 'physics', 'major': 'science'}\n>>> e.arr.score.subject\n{'minor': 'physics', 'major': 'science'}\n>>> e.arr.score.subject.minor = 'chemistry'\n{'minor': 'physics', 'major': 'science'}\n# is same as the following\n>>> e.arr.score['subject']['minor'] = 'chemistry' # All change are reflected in MongoDB Document\n>>> e.arr\n{'name': 'sibidharan', 'pass': 'hello', 'score': {'subject': {'minor': 'chemistry', 'major': 'science'}, 'score': 95}}\n>>> del e.arr.score['subject'] # Can delete any key in dictionary\n>>> del e.arr # Can delete a key itself from the MongoDB Document\n>>> e.delete() # Delete the document itself\n```\n\n# High-level Overview of the code for contributors to better understand the implementation\n\nAny and all contributions are welcome ❤️\n\n1. `MongoDictWrapper`: A wrapper for dictionaries that provides additional methods for interaction with MongoDB documents.\n\n   Methods:\n   - `prepare`\n   - `__getitem__`\n   - `__setitem__`\n   - `__delitem__`\n   - `get`\n   - `pop`\n   - `update`\n   - `clear`\n   - `delete`\n\n2. `MongoDataWrapper`: A wrapper class for the data stored in MongoDB documents.\n\n   Methods:\n   - `get`\n   - `inArray`\n   - `push`\n   - `addToSet`\n   - `pop`\n   - `pull`\n   - `pullAll`\n   - `size`\n   - `elemMatch`\n   - `all`\n   - `update`\n   - `delete`\n   - `__len__`\n   - `__str__`\n   - `__repr__`\n   - `__getattr__`\n   - `__getitem__`\n   - `__setattr__`\n   - `__setitem__`\n   - `__delitem__`\n   - `__delattr__`\n\n3. `MongoGetterSetter`: A metaclass that provides a way to override the default behavior of `__getattr__`, `__setattr__`, `__contains__`, `__str__`, `__repr__`, and `__delattr__` to work with MongoDB documents.\n\n   Nested class: `PyMongoGetterSetter`\n\n   Methods:\n   - `__getattr__`\n   - `__getitem__`\n   - `__setattr__`\n   - `__setitem__`\n   - `__contains__`\n   - `__str__`\n   - `__repr__`\n   - `__delattr__`\n   - `__delitem__`\n   - `delete`\n\n\n## Credits\n\nThanks to GPT-4 for helping me write this documentation. If you find any errors or something doesn't work as the documentation says, raise an issue here https://git.selfmade.ninja/sibidharan/pymongogettersetter\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://git.selfmade.ninja/sibidharan/pymongogettersetter",
    "keywords": "pymongo mongodb mongo mongogettersetter gettersetter getter setter",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mongogettersetter",
    "package_url": "https://pypi.org/project/mongogettersetter/",
    "platform": null,
    "project_url": "https://pypi.org/project/mongogettersetter/",
    "project_urls": {
      "Homepage": "https://git.selfmade.ninja/sibidharan/pymongogettersetter"
    },
    "release_url": "https://pypi.org/project/mongogettersetter/1.2.8/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A clean realtime way to handle MongoDB documents in Pythonic way",
    "version": "1.2.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17482450,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37dbe126bf69548df045abed5e4729bacde7a36dc5785e4db41eff08da31d955",
          "md5": "45fe6eb904a740eb60273d23788c2ee9",
          "sha256": "2796bcf62565dd99f617ce09453f31bb33fb13ac57695cca45a812858a5a5e50"
        },
        "downloads": -1,
        "filename": "mongogettersetter-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "45fe6eb904a740eb60273d23788c2ee9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4543,
        "upload_time": "2023-03-21T23:12:48",
        "upload_time_iso_8601": "2023-03-21T23:12:48.073023Z",
        "url": "https://files.pythonhosted.org/packages/37/db/e126bf69548df045abed5e4729bacde7a36dc5785e4db41eff08da31d955/mongogettersetter-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ef45c01ab2e5d045fa3db2c314f2b4f712d0f518353cac67e465d98efc77069",
          "md5": "df836b2b47b7aff643c94b62c84555c6",
          "sha256": "fb268dc031bdafb5516668d55c3acaca0b7d0b5fe68d8343994e6e1b8988cb72"
        },
        "downloads": -1,
        "filename": "mongogettersetter-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "df836b2b47b7aff643c94b62c84555c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4374,
        "upload_time": "2023-03-21T23:17:28",
        "upload_time_iso_8601": "2023-03-21T23:17:28.067764Z",
        "url": "https://files.pythonhosted.org/packages/5e/f4/5c01ab2e5d045fa3db2c314f2b4f712d0f518353cac67e465d98efc77069/mongogettersetter-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51a6142c8497c8b798aeb84ab2f49a420c9dbd3498d7c4f3fdada9cf090ba6df",
          "md5": "e1a18f51275b2d4674faa71502871f1f",
          "sha256": "21fc2cf6944edabe110c76c2cd9339890277b7d79a92e58fce2f69b8ba10b33a"
        },
        "downloads": -1,
        "filename": "mongogettersetter-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e1a18f51275b2d4674faa71502871f1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4404,
        "upload_time": "2023-03-21T23:19:47",
        "upload_time_iso_8601": "2023-03-21T23:19:47.076161Z",
        "url": "https://files.pythonhosted.org/packages/51/a6/142c8497c8b798aeb84ab2f49a420c9dbd3498d7c4f3fdada9cf090ba6df/mongogettersetter-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c36fa8264cf4dbecde812eaa9d005b582566f8d984f1e9d0e49bddd642760669",
          "md5": "1e7b89bde63ab92d58fe6f4bbbd1cd20",
          "sha256": "ab52d299ccb332ed1407fdcbc17696edf50d1b982dbbd98f4c93ef803f1e5107"
        },
        "downloads": -1,
        "filename": "mongogettersetter-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1e7b89bde63ab92d58fe6f4bbbd1cd20",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6104,
        "upload_time": "2023-03-22T18:14:01",
        "upload_time_iso_8601": "2023-03-22T18:14:01.033519Z",
        "url": "https://files.pythonhosted.org/packages/c3/6f/a8264cf4dbecde812eaa9d005b582566f8d984f1e9d0e49bddd642760669/mongogettersetter-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4689e96bee9d70f7dceb2358160ba0c029775132fb279825528b5ce4e422a16",
          "md5": "3ab11f3b9797d13b98492058b2358791",
          "sha256": "e5101f4a5118ea0cd7f3e74881648f84e5e976e4c2fbb292b3f83db83d3ed5a5"
        },
        "downloads": -1,
        "filename": "mongogettersetter-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3ab11f3b9797d13b98492058b2358791",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7207,
        "upload_time": "2023-03-22T23:11:40",
        "upload_time_iso_8601": "2023-03-22T23:11:40.611709Z",
        "url": "https://files.pythonhosted.org/packages/e4/68/9e96bee9d70f7dceb2358160ba0c029775132fb279825528b5ce4e422a16/mongogettersetter-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fbe3ff6e138a76015cea5eb2249a67a3374ab3aada10842d7e72933f6d52644",
          "md5": "aa7c2b58adb1faa2f003cd2d4053fb27",
          "sha256": "077acd4620cf00a48468758e0135fb1ddf3a13834cfae4622183696eec12e82c"
        },
        "downloads": -1,
        "filename": "mongogettersetter-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "aa7c2b58adb1faa2f003cd2d4053fb27",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7542,
        "upload_time": "2023-03-22T23:38:16",
        "upload_time_iso_8601": "2023-03-22T23:38:16.711851Z",
        "url": "https://files.pythonhosted.org/packages/3f/be/3ff6e138a76015cea5eb2249a67a3374ab3aada10842d7e72933f6d52644/mongogettersetter-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ef8bc70fcc07c31f6402f9e195681472f3e3c8f50903c8a1637ff24dfe75bc1",
          "md5": "9b0f2bcc4f5b0d234d7eb5497e3e516a",
          "sha256": "cf5b0e7448d14e254267da56566df35320eac588eb7c31356dc45fea074a10a8"
        },
        "downloads": -1,
        "filename": "mongogettersetter-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "9b0f2bcc4f5b0d234d7eb5497e3e516a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7531,
        "upload_time": "2023-03-22T23:40:08",
        "upload_time_iso_8601": "2023-03-22T23:40:08.170407Z",
        "url": "https://files.pythonhosted.org/packages/1e/f8/bc70fcc07c31f6402f9e195681472f3e3c8f50903c8a1637ff24dfe75bc1/mongogettersetter-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97b8faacf5d4c05bf80f7ef00368557dd0bcb88b35014fa4badfd86d62816027",
          "md5": "c5978797e56d9406f6fef0cb6d9c8ac1",
          "sha256": "f480338c07bd250c98a1f30c2a25ac367c81221ee8591603cf6fa3bd9c161ea5"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "c5978797e56d9406f6fef0cb6d9c8ac1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11170,
        "upload_time": "2023-03-23T02:23:18",
        "upload_time_iso_8601": "2023-03-23T02:23:18.472905Z",
        "url": "https://files.pythonhosted.org/packages/97/b8/faacf5d4c05bf80f7ef00368557dd0bcb88b35014fa4badfd86d62816027/mongogettersetter-1.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "922f5eadde27332a11471053884058d70901f9cb66237eebf6021af8810e6b9b",
          "md5": "9e76ac5ea7060467185bcef8dfff9b93",
          "sha256": "71fc423da7b10440ee8f7d0829b76747124cafa4e473cb61a138fedbd7d9d12a"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "9e76ac5ea7060467185bcef8dfff9b93",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11262,
        "upload_time": "2023-03-23T02:47:57",
        "upload_time_iso_8601": "2023-03-23T02:47:57.367457Z",
        "url": "https://files.pythonhosted.org/packages/92/2f/5eadde27332a11471053884058d70901f9cb66237eebf6021af8810e6b9b/mongogettersetter-1.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "720d6ff365a16b8293c76d3226016ebd8f84f0c154081c0ac7141601aab26387",
          "md5": "cca1a573aae290589c60105b52424ba7",
          "sha256": "865f7ad6a33593d7ae53a13fcbad34ddca8bb7537edead6cea4ec7938262591a"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "cca1a573aae290589c60105b52424ba7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11258,
        "upload_time": "2023-03-23T03:01:09",
        "upload_time_iso_8601": "2023-03-23T03:01:09.168219Z",
        "url": "https://files.pythonhosted.org/packages/72/0d/6ff365a16b8293c76d3226016ebd8f84f0c154081c0ac7141601aab26387/mongogettersetter-1.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ee657e73ca64956ba18cb56b9b326f7983a476ec59ddd8d9a13b9d7901a0e9f",
          "md5": "439dacc693ffeafe437a4075bbada05b",
          "sha256": "1b49764d5d72e42ac9e29af51955ee2b0e9c785de7cce0a651cff57c62acc2de"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "439dacc693ffeafe437a4075bbada05b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11445,
        "upload_time": "2023-03-23T14:15:36",
        "upload_time_iso_8601": "2023-03-23T14:15:36.890159Z",
        "url": "https://files.pythonhosted.org/packages/0e/e6/57e73ca64956ba18cb56b9b326f7983a476ec59ddd8d9a13b9d7901a0e9f/mongogettersetter-1.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0b2728d3596dffcbc27c69f240e24cc1218a6b410159ac3eb5e384989e1a9d31",
          "md5": "8bb3f2f100107e515778becb02c4fbe0",
          "sha256": "5032e5d05b3aa902f55365b0a8bbc142b4fe980cf4ef42a5be38cf51948893f6"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8bb3f2f100107e515778becb02c4fbe0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7657,
        "upload_time": "2023-03-23T01:06:37",
        "upload_time_iso_8601": "2023-03-23T01:06:37.633766Z",
        "url": "https://files.pythonhosted.org/packages/0b/27/28d3596dffcbc27c69f240e24cc1218a6b410159ac3eb5e384989e1a9d31/mongogettersetter-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53b0905769bb43cbb9e18bb4b7feef29515d9911e1f61bda36a50d8756777311",
          "md5": "40110c58a4fab42b635d467f28d7b092",
          "sha256": "898c0c1605e9a53d8f5adadb53b016d2a8d37599e63d335932c7282c9f579454"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "40110c58a4fab42b635d467f28d7b092",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7646,
        "upload_time": "2023-03-23T01:07:56",
        "upload_time_iso_8601": "2023-03-23T01:07:56.460686Z",
        "url": "https://files.pythonhosted.org/packages/53/b0/905769bb43cbb9e18bb4b7feef29515d9911e1f61bda36a50d8756777311/mongogettersetter-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1a01bd10ded1ba95ce58ce9eef32e4372cc8a31c419be2a656f1cf4bd27be3e",
          "md5": "5d6ec449d000a2d455495c63d8f258ab",
          "sha256": "8fb655609e9e732b81093e0e3c4e8c113ca4fbf2ac8685380d0981aa0a72f72b"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5d6ec449d000a2d455495c63d8f258ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11175,
        "upload_time": "2023-03-23T01:33:06",
        "upload_time_iso_8601": "2023-03-23T01:33:06.800771Z",
        "url": "https://files.pythonhosted.org/packages/a1/a0/1bd10ded1ba95ce58ce9eef32e4372cc8a31c419be2a656f1cf4bd27be3e/mongogettersetter-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d990c7b15895d25f1893b9dda25728bf75dbde5e188899534bd895055eadc97e",
          "md5": "79b099b665ce75ba67462a44f4cd4a88",
          "sha256": "d2ab419c4a07dfdb78adc56dc23512605e097ad12f03fc92e2b66569361f507f"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "79b099b665ce75ba67462a44f4cd4a88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11173,
        "upload_time": "2023-03-23T02:10:50",
        "upload_time_iso_8601": "2023-03-23T02:10:50.111797Z",
        "url": "https://files.pythonhosted.org/packages/d9/90/c7b15895d25f1893b9dda25728bf75dbde5e188899534bd895055eadc97e/mongogettersetter-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba808e5b3c315c8c0e8f672dc5908f30a74bbcc82dd97f7b6a26dff7cfd95a7a",
          "md5": "d14c7b7c16f2373d1b36d2c61074a74b",
          "sha256": "488584d6514751a16183fa64eef3925999e546c9efd1cb53d6a872307472dd6b"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d14c7b7c16f2373d1b36d2c61074a74b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11835,
        "upload_time": "2023-03-24T01:12:04",
        "upload_time_iso_8601": "2023-03-24T01:12:04.006929Z",
        "url": "https://files.pythonhosted.org/packages/ba/80/8e5b3c315c8c0e8f672dc5908f30a74bbcc82dd97f7b6a26dff7cfd95a7a/mongogettersetter-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee275f914dc6655d184911e0b4fd2e5fa2421aba0f74852581bce11e7b1fa1b3",
          "md5": "6fb026433096a59d465e6d5a6cf8499a",
          "sha256": "66b0b6c6f09bb88a3a0fd4366e61eea108a2fdb60a58fc590363f17fdb54c305"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6fb026433096a59d465e6d5a6cf8499a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11785,
        "upload_time": "2023-03-24T01:32:01",
        "upload_time_iso_8601": "2023-03-24T01:32:01.029351Z",
        "url": "https://files.pythonhosted.org/packages/ee/27/5f914dc6655d184911e0b4fd2e5fa2421aba0f74852581bce11e7b1fa1b3/mongogettersetter-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38c518585895d5068bd109e1b9ee66714c81458f68eb87d06c3068dfff350dd7",
          "md5": "73f694228d4e7ac1ff0458f1447dd0e8",
          "sha256": "d47d6a1aacaf0cd2d91f5093dd263b2886e5e7ff2d8cebbf07b7c63b82055481"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "73f694228d4e7ac1ff0458f1447dd0e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12696,
        "upload_time": "2023-03-24T02:09:31",
        "upload_time_iso_8601": "2023-03-24T02:09:31.886182Z",
        "url": "https://files.pythonhosted.org/packages/38/c5/18585895d5068bd109e1b9ee66714c81458f68eb87d06c3068dfff350dd7/mongogettersetter-1.1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0448a62cdfed181b842df6211e543548a0d431169c3d999e876e6654af924844",
          "md5": "c1920ab9ccc72f5b1e5519cc28eac7ae",
          "sha256": "8fa6b3dd8803fde4a74e92b38f6bdc76e08b9beb8480ce72c10a2d998f89ea1f"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "c1920ab9ccc72f5b1e5519cc28eac7ae",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12805,
        "upload_time": "2023-03-24T02:24:55",
        "upload_time_iso_8601": "2023-03-24T02:24:55.409855Z",
        "url": "https://files.pythonhosted.org/packages/04/48/a62cdfed181b842df6211e543548a0d431169c3d999e876e6654af924844/mongogettersetter-1.1.1.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "791c2fbb77daf60acc67c0091470a0a4e6c96b797cc1635dcba30921c1c04d98",
          "md5": "6cde4eec7d58227d9b846d9140ddfafb",
          "sha256": "35f9677b7430528e6be2640799d823de3a1ae728ac8f37715dcc28540cc9bd5e"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "6cde4eec7d58227d9b846d9140ddfafb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12830,
        "upload_time": "2023-03-24T02:45:35",
        "upload_time_iso_8601": "2023-03-24T02:45:35.644936Z",
        "url": "https://files.pythonhosted.org/packages/79/1c/2fbb77daf60acc67c0091470a0a4e6c96b797cc1635dcba30921c1c04d98/mongogettersetter-1.1.1.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ceb3fe21f7a4f6adb6f2c921a40ffd7a1f85c27886605b12000148a10c092d0b",
          "md5": "3fe9eac33dd77e6cb57d73f4f11a0158",
          "sha256": "603700f9568872c387db49c283b48cc0b185136b18ce0073fdb1c2d70ba787af"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.1.14.tar.gz",
        "has_sig": false,
        "md5_digest": "3fe9eac33dd77e6cb57d73f4f11a0158",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12867,
        "upload_time": "2023-03-24T10:46:14",
        "upload_time_iso_8601": "2023-03-24T10:46:14.633353Z",
        "url": "https://files.pythonhosted.org/packages/ce/b3/fe21f7a4f6adb6f2c921a40ffd7a1f85c27886605b12000148a10c092d0b/mongogettersetter-1.1.1.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cbc3e78befcc53fc81a26010923b14bab22de9bd61043e47e1ebbc5ba12cb54",
          "md5": "8bcf2038a33bec0832f143528f6ce3fe",
          "sha256": "8c384bda9ad2c24568fd8279979a40663a812b1519109defa334ac8c21c81b9e"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.1.15.tar.gz",
        "has_sig": false,
        "md5_digest": "8bcf2038a33bec0832f143528f6ce3fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12878,
        "upload_time": "2023-03-24T11:08:00",
        "upload_time_iso_8601": "2023-03-24T11:08:00.806160Z",
        "url": "https://files.pythonhosted.org/packages/5c/bc/3e78befcc53fc81a26010923b14bab22de9bd61043e47e1ebbc5ba12cb54/mongogettersetter-1.1.1.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1.16": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "080c27cee2be83ec9866cf943e711ddeba9a60c3d1e1cf3d5a60fe0d1e34105e",
          "md5": "d1c4e5ee6dd25846e5dc6a36f4c95481",
          "sha256": "54340a95bdbb2cb9101e959b6d0129039f48fcc65a7a6ac033c200a915d8514a"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.1.16.tar.gz",
        "has_sig": false,
        "md5_digest": "d1c4e5ee6dd25846e5dc6a36f4c95481",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12897,
        "upload_time": "2023-03-24T12:32:15",
        "upload_time_iso_8601": "2023-03-24T12:32:15.310046Z",
        "url": "https://files.pythonhosted.org/packages/08/0c/27cee2be83ec9866cf943e711ddeba9a60c3d1e1cf3d5a60fe0d1e34105e/mongogettersetter-1.1.1.16.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbed7461cc4ad90c9be86a15da32586ed64dfceda8ce39bd85555dc8e9a6ffdc",
          "md5": "c138f0a413fb2d674f26834de4dffcf2",
          "sha256": "aa44a5093b9975fbd914b393dae2b5d7cafe79cd0c2912da3dac5320c8e91481"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c138f0a413fb2d674f26834de4dffcf2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12895,
        "upload_time": "2023-03-24T16:17:25",
        "upload_time_iso_8601": "2023-03-24T16:17:25.454739Z",
        "url": "https://files.pythonhosted.org/packages/bb/ed/7461cc4ad90c9be86a15da32586ed64dfceda8ce39bd85555dc8e9a6ffdc/mongogettersetter-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13fc7f3e664474c451a2b1e7e42682c30f82f45a96c96f3641cbba22b3c82f2a",
          "md5": "102fa1b88a1f08326855a04a24b615b1",
          "sha256": "7430babd84257e5050ed860a300ec7a5a822ca018bcdba91074541eb6be4096e"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "102fa1b88a1f08326855a04a24b615b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12881,
        "upload_time": "2023-03-24T19:48:01",
        "upload_time_iso_8601": "2023-03-24T19:48:01.902762Z",
        "url": "https://files.pythonhosted.org/packages/13/fc/7f3e664474c451a2b1e7e42682c30f82f45a96c96f3641cbba22b3c82f2a/mongogettersetter-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdf10943f35496cb8dc16b2d0f1c0e161847c9346e6b21dc1643cbe5f88cfd14",
          "md5": "bacd3577070c76e8daac726bf3db50d8",
          "sha256": "ec0350cd57eac72008acb30c9cfdac7a99fcd65c8837f0223db4a90c246c184b"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "bacd3577070c76e8daac726bf3db50d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12883,
        "upload_time": "2023-03-24T20:07:55",
        "upload_time_iso_8601": "2023-03-24T20:07:55.116223Z",
        "url": "https://files.pythonhosted.org/packages/cd/f1/0943f35496cb8dc16b2d0f1c0e161847c9346e6b21dc1643cbe5f88cfd14/mongogettersetter-1.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6866ca0a7a039dbadf09fe102ad48ae5e220f83553213a78f8de48537d3f586",
          "md5": "ff41e47016a2f8d10842ec8b22b22caf",
          "sha256": "4cfc8d475eb689932485a5a5b30a573a0609cabe4065d93aaf3c96dc313fdd68"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ff41e47016a2f8d10842ec8b22b22caf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12963,
        "upload_time": "2023-03-25T11:08:50",
        "upload_time_iso_8601": "2023-03-25T11:08:50.543899Z",
        "url": "https://files.pythonhosted.org/packages/a6/86/6ca0a7a039dbadf09fe102ad48ae5e220f83553213a78f8de48537d3f586/mongogettersetter-1.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8b4e0bdbfa80be96030d9c66e6b7cda027c1d9fe708fd7acf727faf14dad181b",
          "md5": "c1c1020de59e0622c483cc646d3ff9c3",
          "sha256": "39d525d0db98a9b8fab612caf3de788ecf9041c279889f58fe715b17e130d887"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "c1c1020de59e0622c483cc646d3ff9c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13043,
        "upload_time": "2023-03-25T11:38:37",
        "upload_time_iso_8601": "2023-03-25T11:38:37.615927Z",
        "url": "https://files.pythonhosted.org/packages/8b/4e/0bdbfa80be96030d9c66e6b7cda027c1d9fe708fd7acf727faf14dad181b/mongogettersetter-1.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "198f3e55c3a4d6783c64dcb6226591525d06c8eb1f8bfbade8040c853ce3865d",
          "md5": "d67e24724d73b6d3dcd13a5602f4cef4",
          "sha256": "10f995fa281b96185d5a26563c2b402e99f9229777aa0ebad64a8d5a37b1252c"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "d67e24724d73b6d3dcd13a5602f4cef4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13044,
        "upload_time": "2023-03-25T12:33:03",
        "upload_time_iso_8601": "2023-03-25T12:33:03.387337Z",
        "url": "https://files.pythonhosted.org/packages/19/8f/3e55c3a4d6783c64dcb6226591525d06c8eb1f8bfbade8040c853ce3865d/mongogettersetter-1.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09aea2088b052d4edbe36432108c306b5afd51624555a0c8f605d074303d0d53",
          "md5": "ede4279589ab5d4951999d47adaffd1d",
          "sha256": "cdb0379f998be446bc0d7c2014fe4031d0c84c670eb3e3f7207f378ee05cb340"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "ede4279589ab5d4951999d47adaffd1d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13545,
        "upload_time": "2023-03-25T23:43:36",
        "upload_time_iso_8601": "2023-03-25T23:43:36.267590Z",
        "url": "https://files.pythonhosted.org/packages/09/ae/a2088b052d4edbe36432108c306b5afd51624555a0c8f605d074303d0d53/mongogettersetter-1.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85b5ec78d1f05121ffec2cb61b4751073c3afbacad3f859a604988bcf5ba053a",
          "md5": "22b27da891a7b1d8d510c82b221af1b4",
          "sha256": "c31246f1165610d9427aaab3ee31cc78b8177fdea42467fae4869ac41d38eab7"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "22b27da891a7b1d8d510c82b221af1b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16479,
        "upload_time": "2023-03-26T00:29:06",
        "upload_time_iso_8601": "2023-03-26T00:29:06.920510Z",
        "url": "https://files.pythonhosted.org/packages/85/b5/ec78d1f05121ffec2cb61b4751073c3afbacad3f859a604988bcf5ba053a/mongogettersetter-1.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0afd1bbb822980300d5c3b0325e07a35ab98a0c9c6c8e573480de64a0f0a6c15",
          "md5": "dcb29b504aee5a54ab0f148a147879fe",
          "sha256": "956d3bce2d9e17e1f362c778e1cb921d837fd5db86d47e1303c9d6d06bc85ce2"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dcb29b504aee5a54ab0f148a147879fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16557,
        "upload_time": "2023-03-26T00:43:05",
        "upload_time_iso_8601": "2023-03-26T00:43:05.751687Z",
        "url": "https://files.pythonhosted.org/packages/0a/fd/1bbb822980300d5c3b0325e07a35ab98a0c9c6c8e573480de64a0f0a6c15/mongogettersetter-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0576a02927cfc5b340f36a77c4b197dc8232ab738486bfb8f09ca66f324170c",
          "md5": "1673a24319518baaecc74153453dbc40",
          "sha256": "4897a0a09b95b747b5f0c3bc6da1b2a866308b4b936d3c8073bf595a1cc9f545"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1673a24319518baaecc74153453dbc40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16809,
        "upload_time": "2023-03-26T01:13:23",
        "upload_time_iso_8601": "2023-03-26T01:13:23.321029Z",
        "url": "https://files.pythonhosted.org/packages/c0/57/6a02927cfc5b340f36a77c4b197dc8232ab738486bfb8f09ca66f324170c/mongogettersetter-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19586144b69fff5acaf9186ee771bec553b5bf007f3d6ff8e0e36e28939b9268",
          "md5": "4086c60a51a51f1c92421950b6f8b63b",
          "sha256": "4a5219dc827e7770e9e0038edcb97d69cd4f39236a4c9f7e01fc33223e0929f5"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4086c60a51a51f1c92421950b6f8b63b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16815,
        "upload_time": "2023-03-26T01:35:48",
        "upload_time_iso_8601": "2023-03-26T01:35:48.762016Z",
        "url": "https://files.pythonhosted.org/packages/19/58/6144b69fff5acaf9186ee771bec553b5bf007f3d6ff8e0e36e28939b9268/mongogettersetter-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be77f35b2d2d0c44285b2bbe74824680c2537d0e2b3a8801a757a41e8fda6058",
          "md5": "ff312bf5a0071c39bfdb9d860e915397",
          "sha256": "9753123e3a333dd6f87be04345e4c17f99fdaafedacf610360821d929f6ed61a"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ff312bf5a0071c39bfdb9d860e915397",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16823,
        "upload_time": "2023-03-28T16:37:29",
        "upload_time_iso_8601": "2023-03-28T16:37:29.745802Z",
        "url": "https://files.pythonhosted.org/packages/be/77/f35b2d2d0c44285b2bbe74824680c2537d0e2b3a8801a757a41e8fda6058/mongogettersetter-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "940cd6f67085dda9c2b3fefbaaecaa4e85ca27f226bfaa6a1c3a639ee831e2f5",
          "md5": "3865bb1a52a271dfecc207590d45af64",
          "sha256": "b8464fa90867cc5af7c2a437e5ca30f09af8f5e9aa3d396c4e812389eba996c7"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3865bb1a52a271dfecc207590d45af64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17189,
        "upload_time": "2023-03-28T18:33:15",
        "upload_time_iso_8601": "2023-03-28T18:33:15.735744Z",
        "url": "https://files.pythonhosted.org/packages/94/0c/d6f67085dda9c2b3fefbaaecaa4e85ca27f226bfaa6a1c3a639ee831e2f5/mongogettersetter-1.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dab7d0d81982b672a9e21450fe7a37c12c95677651fc3a70986e56e7fb91d472",
          "md5": "57625057a39a6cad551fbc3b7d94d5e1",
          "sha256": "e20652de53164b353e2d40f45fa5f90f044be1acb0b20900880f5136d5aa4fb7"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "57625057a39a6cad551fbc3b7d94d5e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17194,
        "upload_time": "2023-03-28T18:35:52",
        "upload_time_iso_8601": "2023-03-28T18:35:52.153246Z",
        "url": "https://files.pythonhosted.org/packages/da/b7/d0d81982b672a9e21450fe7a37c12c95677651fc3a70986e56e7fb91d472/mongogettersetter-1.2.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5fa547cf5710c473e84f6b0e0c94d93a6ea5834fd23bad2e647dcf004554967",
          "md5": "39362e0de0d3d3d3450160bb4bbd4ba5",
          "sha256": "766f66cfddb098f90714c51010791ca6b3132896dbe38cfca398d8c6dde039c3"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "39362e0de0d3d3d3450160bb4bbd4ba5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17183,
        "upload_time": "2023-03-28T18:40:42",
        "upload_time_iso_8601": "2023-03-28T18:40:42.551559Z",
        "url": "https://files.pythonhosted.org/packages/c5/fa/547cf5710c473e84f6b0e0c94d93a6ea5834fd23bad2e647dcf004554967/mongogettersetter-1.2.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d4c22794dab60bd7ec7045fe7a34950a7f8e033a1b973b66d8a189bcee807798",
          "md5": "ef1177eacd9ce3e28812a4ff4443d256",
          "sha256": "2e264240cbe953d8631a569350dfb48b9eea9e3c3e225577540ca44adb66f81d"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "ef1177eacd9ce3e28812a4ff4443d256",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17171,
        "upload_time": "2023-03-28T18:41:50",
        "upload_time_iso_8601": "2023-03-28T18:41:50.043971Z",
        "url": "https://files.pythonhosted.org/packages/d4/c2/2794dab60bd7ec7045fe7a34950a7f8e033a1b973b66d8a189bcee807798/mongogettersetter-1.2.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64f91d07928aa9bfc5592d7c6ec1e795dba332d69d78ccfb930fbf778629db50",
          "md5": "29df2590e1d51023c33d82937ae06bc9",
          "sha256": "813e8bd9bc76c5591e187ddb0e391488b3bbdf4dc5c71d22b71296ebe46648aa"
        },
        "downloads": -1,
        "filename": "mongogettersetter-1.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "29df2590e1d51023c33d82937ae06bc9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17448,
        "upload_time": "2023-03-28T19:14:08",
        "upload_time_iso_8601": "2023-03-28T19:14:08.459971Z",
        "url": "https://files.pythonhosted.org/packages/64/f9/1d07928aa9bfc5592d7c6ec1e795dba332d69d78ccfb930fbf778629db50/mongogettersetter-1.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64f91d07928aa9bfc5592d7c6ec1e795dba332d69d78ccfb930fbf778629db50",
        "md5": "29df2590e1d51023c33d82937ae06bc9",
        "sha256": "813e8bd9bc76c5591e187ddb0e391488b3bbdf4dc5c71d22b71296ebe46648aa"
      },
      "downloads": -1,
      "filename": "mongogettersetter-1.2.8.tar.gz",
      "has_sig": false,
      "md5_digest": "29df2590e1d51023c33d82937ae06bc9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17448,
      "upload_time": "2023-03-28T19:14:08",
      "upload_time_iso_8601": "2023-03-28T19:14:08.459971Z",
      "url": "https://files.pythonhosted.org/packages/64/f9/1d07928aa9bfc5592d7c6ec1e795dba332d69d78ccfb930fbf778629db50/mongogettersetter-1.2.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}