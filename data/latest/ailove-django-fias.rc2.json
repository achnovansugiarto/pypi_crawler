{
  "info": {
    "author": "Artem Vlasov",
    "author_email": "root@proscript.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: Russian",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Приложение для работы с базой данных ФИАС в Django\n\nОсновные возможности\n====================\n\n* Импорт базы ФИАС из скачанного архива XML или напрямую с сайта http://fias.nalog.ru\n* Возможность хранить данные в отдельной БД\n* Поле модели AddressField, предоставляющее в админке Django ajax-поиск адреса\n* Поддержка полнотекстового поиска для поля AddressField (`демо <http://youtu.be/ZVVrxg9-o_4>`_)\n* Связанное поле модели для выбора района внутри выбранного в AddressField города (районы никак не привязаны к улицам, соответственно, их нужно выбирать отдельно, если это требуется)\n* Несколько абстрактных моделей, немного упрощающих жизнь\n\nУстановка\n============\n\n1. Установите `django-fias`::\n\n        pip install django-fias\n\n2. Добавьте `fias` и `django_select2` в ваш список `INSTALLED_APPS`.\n3. Добавьте `url(r'^fias/', include('fias.urls', namespace='fias')),` в ваш urlpatterns\n4. Любым доступным способом подключите к админке приложения, в котором будете использовать поле FiasAddress свежую версию jQuery::\n\n    # например так:\n    class ItemAdmin(admin.ModelAdmin):\n        class Media:\n            js = ['//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.js']\n    admin.site.register(Item, ItemAdmin)\n\n5. Если вы желаете использовать отдельную БД под данные ФИАС, выполните следующее\n\n* Создайте БД и подключите её к Джанго обычным способом\n* Добавьте в ваш `settings.py` параметр::\n\n        FIAS_DATABASE_ALIAS = 'fias'\n\nгде `fias` - имя БД\n\n* Добавьте в список `DATABASE_ROUTERS`::\n\n        fias.routers.FIASRouter\n\n* Выполните::\n\n        # для South\n        python manage.py migrate --database=fias\n        # без South\n        python manage.py syncdb --database=fias\nгде `fias` - имя БД ФИАС\n\n5. Выполните::\n\n        # для South\n        python manage.py migrate\n        # без South\n        python manage.py syncdb\n\n6. Выполните::\n\n        python manage.py collectstatic\n\nОбновление до версии 0.3\n========================\n\nОбязательно наличие South.\nВыполните::\n\n        # Если данные ФИАС хранятся в основной БД\n        python manage.py migrate\n        # Если данные ФИАС хранятся в другой БД\n        python manage.py migrate --database=fias\nгде `fias` - имя БД ФИАС\n\n\nОбновление до версии 0.4\n========================\n\nОбязательно наличие South.\n\nЕсли данные ФИАС хранятся в MySQL, выполните::\n\n        # Если данные ФИАС хранятся в основной БД\n        python manage.py migrate fias 0004 --fake\n        python manage.py migrate fias\n        # Если данные ФИАС хранятся в другой БД\n        python manage.py migrate fias 0004 --fake --database=fias\n        python manage.py migrate fias --database=fias\n\nИначе выполните::\n\n        # Если данные ФИАС хранятся в основной БД\n        python manage.py migrate\n        # Если данные ФИАС хранятся в другой БД\n        python manage.py migrate --database=fias\n        \nЗатем следует сгенерировать новый конфиг для Sphinx, как описано ниже, и переиндексировать базу.\n\nНастройка полнотекстового поиска\n================================\nAddressField поддерживает 2 метода поиска адреса: последовательный (sequence) и полнотекстовый (sphinx).\n\n**NOTE**: поддерживаются только 2 СУБД: PostgreSQL и MySQL.\n**NOTE2**: для индексации базы в MySQL может потребоваться до 2-2.5ГБ свободного места во временном каталоге MySQL.\n**NOTE3**: нет необходимости слишком часто пересоздавать поисковый индекс базы ФИАС. Это требуется делать только после обновления базы.\n\nПо-умолчанию используется последовательный метод, т. к. не требует дополнительных настроек.\nДля активации полнотекстового поиска необходимо выполнить несколько дополнительных шагов:\n\n1. Добавьте в ваш `settings.py` параметр::\n\n    FIAS_SEARCH_ENGINE='sphinx'\n\n2. Установите:\n\n* `sphinxit <https://github.com/semirook/sphinxit>`_\n* `Sphinx Search Engine <http://sphinxsearch.com>`_ Для Debian, Ubuntu, RHEL, Windows есть `пакеты <http://sphinxsearch.com/downloads/release/>`_\n\n\n3. Сгенерируйте конфигурацию `sphinx`:\n\nЕсли у вы уже используете `sphinx` в проекте, то вам нужен только конфиг индекса. Выполните::\n\n    python manage.py fias_sphinx --path=PATH > sphinx.conf\n\nгде `PATH` - путь до каталога с индексами sphinx.\n\nИначе выполните::\n\n    python manage.py fias_sphinx --path=PATH --full > sphinx.conf\n\nчтобы получить полный конфиг sphinx.\n\nЗамените конфиг sphinx полученными настройками (для **Gentoo** это файл `/etc/sphinx/sphinx.conf`, для **Ubuntu**: `/etc/sphinxsearch/sphinx.conf`)\n\n4. Псоле того, как данные **импортированы** и обновлены выполните::\n\n    indexer -c /etc/sphinx/sphinx.conf --all\n\n*NOTE*: для повторной переиндексации при запущенном Sphinx следует выполнять::\n\n    indexer -c /etc/sphinx/sphinx.conf --all --rotate\n\n5. Запустите sphinx::\n\n    # для Gentoo\n    /etc/init.d/searchd start\n    # для Ubuntu\n    /etc/init.d/sphinxsearch start\n\n**NOTE** Если Sphinx работает на другом хосте или на другом порту, добавьте в `settings.py` словарь соответствующими параметрами::\n\n    FIAS_SEARCHD_CONNECTION = {\n        'host': '127.0.0.1',\n        'port': 9306,\n    }\n\nНастройка весов\n===============\nИз-за особенностей организации БД ФИАС, сортировка результатов поиска происходит не так, как хотелось бы.\nПоэтому, начиная с версии 0.4 добавлена возможность настроить веса типов адресных объектов по своему усмотрению.\nДля этого в `settings.py` добавьте словарь `FIAS_SB_WEIGHTS` вида::\n\n        FIAS_SB_WEIGHTS = {\n            # СОКРАЩЕНИЕ: ВЕС\n            'г': 128,\n            'с': 100,\n        }\n        \nгде \n * СОКРАЩЕНИЕ - сокращённое наименование вида объекта из таблицы SocrBase\n * ВЕС - число от 0 до 128\n \n*NOTE*: по-умолчанию вес всех типов равен 64\n*NOTE*: пример заполнения можно посмотреть в weights.py - там перечислены предустановленные веса.\n\nЧтобы применить свои изменения, выполните::\n\n        python manage.py fias --fill-weights\n        \nКроме того изменить веса можно в панели администрирования Django.\nНо помните, что эти изменения будут **перезаписаны** при следующем вызове упомянутой команды!\nПосле внесения изменений обязательно нужно переиндексировать базу.\n    \nВыбор импортируемых таблиц\n==========================\n\nТаблицы NORMDOC, SOCRBASE и ADDROBJ импортируются всегда. Таблицы LANDMARK, HOUSEINT и HOUSE можно не импортировать.\n\nДобавьте в ваш `settings.py` список названий таблиц, которые вы хотели бы импортировать::\n\n    FIAS_TABLES = ('landmark', 'houseint', 'house')\n\n\nИмпорт данных\n==============\n\nПервоначальная загрузка данных\n------------------------------\nСуществует несколько способов импортировать данные в БД ФИАС\n\nПолностью автоматический импорт с сайта ФИАС::\n\n        python manage.py fias --remote-file\n\nТакой способ не всегда целесообразен по разным причинам, поэтому лучше самостоятельно скачать полный архив и импортировать уже его::\n\n        python manage.py fias --file /path/to/fias_xml.rar\n\n**Но!**\nВ случае, если в БД уже есть какие-то данные, скрипт выдаст соответствующее сообщение и прекратит работу.\nТакое поведение связано с тем, что при импорте из файла, если версия файла не совпадает с версией данных в какой-то таблице в БД ФИАС,\nданные в этой таблице будут удалены полностью и заменены новыми, при этом\nORM Django при наличии связанных таблиц удалит данные так же и оттуда.\nЕсли вы уверены в том, что делаете, добавьте к предыдущей команде флаг *--really-replace*::\n\n        python manage.py fias --file /path/to/fias_xml.rar --really-replace\n        # or\n        python manage.py fias --remote-file --really-replace\n\nЕсли по какой-то причине нужно импортировать всю БД ФИАС заново, добавьте флаг *--force-replace*::\n\n        python manage.py fias --file /path/to/fias_xml.rar --force-replace --really-replace\n        # or\n        python manage.py fias --remote-file --force-replace --really-replace\n\nЕсли скачанный файл не актуален, можно добавить к указанной выше команде флаг *--update* - скрипт сразу после импорта обновит БД до актуальной версии.::\n\n        python manage.py fias --file /path/to/fias_xml.rar --update\n        # or\n        python manage.py fias --remote-file --update\n        \n**NOTE**\nИмпортируются только актуальные записи. Если данные об объекте менялись, будет загружена самая последняя версия записи об этом объекте.\nЗаписи из будущего не импортируются.\n\nОбновление существующей БД\n--------------------------\nДля обновления БД выполните::\n\n        python manage.py fias --update\n\nОбновление выполняется только с сайта ФИАС. Обновить базу из файла нельзя.\n\n**NOTE**\nКак это ни печально, но мы живём в России. Тут всякое бывает. Вот и сервис ФИАС время от времени подсовывает битые дельта-архивы.\nЧтобы оные пропускать автоматически и обновляться следующими по порядку, используйте флаг *--skip* совместно с *--update*\n\nИспользование\n==============\n\nВы можете самостоятельно ссылаться на таблицы БД фиас.\n\nВы так же можете добавить в свои модели поле `fias.fields.address.AddressField`, которое предоставит вам удобный\nпоиск адреса по базе и прявязку Один-ко-Многим вашей модели к таблице `AddrObj` базы ФИАС. (см. модель `Item` в тестовом приложении)\n\nЛибо вы можете унаследоваться от любой модели из `fias.models.address`, которые добавят несколько дополнительных\nполей к вашим моделям и выполнят за вас кое-какую рутину:\n\n**FIASAddress** (см. модель `CachedAddress` в тестовом приложении)\n\nПомимо поля `address` добавляет еще два: `full_address` и `short_address`. В первом хранится полная запись адреса (но без индекса), во втором - укороченная.\n\n**FIASAddressWithArea** (см. модель `CachedAddressWithArea` в тестовом приложении)\n\nНаследуется от предыдущей модели и добавляет еще поле `area` - позволяет указывать район города, выбранного в поле `address` (если, конечно, таковые имеются в БД ФИАС для данного города)\n\n**FIASHouse** (см. модель `CachedAddressWithHouse` в тестовом приложении)\n\nМиксин, добавляющий 3 поля `house`, `corps` и `apartment` - соответственно номер дома, корпус и квартира.\n\n**FIASFullAddress**\n\nКомбинация моделей  `FIASAddress` и `FIASHouse`.\n\n**FIASFullAddressWithArea**\n\nКомбинация моделей `FIASAddressWithArea` и `FIASHouse`\n\n*NOTE*: в моделях `FIASFullAddress` и `FIASFullAddressWithArea` реализованы методы `_get_full_address` и `_get_short_address`, возвращающие соответственно полную и сокращённую строку адреса, включая номер дома/корпуса/квартиры.\n\n\nTODO\n==============\n\n* Проверять списки удалённых объектов и все связанные с AddrObj модели мигрировать на правильные записи\n\nИзвестные проблемы\n====================\n* Если используется отдельная БД под данные ФИАС, в админке в список `list_display` нельзя добавлять поля типа `ForeignKey`\n* South не умеет работать с несколькими БД\n\nБлагодарности\n====================\n\n`Коммит от EagerBeager <https://github.com/EagerBeager/django-fias/commit/ed375c2e1cafdc04f0c9612091eb040ef8f9f4fe>`_\nБлагодаря этому коммиту до меня наконец дошло, почему импорт отжирал память.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ailove-dev/django-fias",
    "keywords": null,
    "license": "MIT license",
    "maintainer": null,
    "maintainer_email": null,
    "name": "ailove-django-fias",
    "package_url": "https://pypi.org/project/ailove-django-fias/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/ailove-django-fias/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/ailove-dev/django-fias"
    },
    "release_url": "https://pypi.org/project/ailove-django-fias/0.5.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "FIAS Django integration (fork Ailove)",
    "version": "0.5.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2123657,
  "releases": {
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c5a4939c0580253a6971650944a887ccf7eefcda3e176621f7b86324cc45c66",
          "md5": "6c7117b01e841bc7f5c1b64d9fa68743",
          "sha256": "4ae4e7e2f994009e118211577c59077b0c82ecc1f7843643d4d22764b1303ac3"
        },
        "downloads": -1,
        "filename": "ailove-django-fias-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6c7117b01e841bc7f5c1b64d9fa68743",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36297,
        "upload_time": "2015-06-24T07:48:29",
        "upload_time_iso_8601": "2015-06-24T07:48:29.733201Z",
        "url": "https://files.pythonhosted.org/packages/4c/5a/4939c0580253a6971650944a887ccf7eefcda3e176621f7b86324cc45c66/ailove-django-fias-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3e2b76c6da07718e7a05fdda2e9a88e849d997019c2a90de598f9b882a1cf97",
          "md5": "b9e7ac31aa7d86340ea58decc7b70a8b",
          "sha256": "73bf0dc4fc10a9c22af0c9c54501560d54abc61f9210be13d42cfc5349d85819"
        },
        "downloads": -1,
        "filename": "ailove-django-fias-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b9e7ac31aa7d86340ea58decc7b70a8b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40826,
        "upload_time": "2016-05-19T14:45:25",
        "upload_time_iso_8601": "2016-05-19T14:45:25.969425Z",
        "url": "https://files.pythonhosted.org/packages/c3/e2/b76c6da07718e7a05fdda2e9a88e849d997019c2a90de598f9b882a1cf97/ailove-django-fias-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3e2b76c6da07718e7a05fdda2e9a88e849d997019c2a90de598f9b882a1cf97",
        "md5": "b9e7ac31aa7d86340ea58decc7b70a8b",
        "sha256": "73bf0dc4fc10a9c22af0c9c54501560d54abc61f9210be13d42cfc5349d85819"
      },
      "downloads": -1,
      "filename": "ailove-django-fias-0.5.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b9e7ac31aa7d86340ea58decc7b70a8b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 40826,
      "upload_time": "2016-05-19T14:45:25",
      "upload_time_iso_8601": "2016-05-19T14:45:25.969425Z",
      "url": "https://files.pythonhosted.org/packages/c3/e2/b76c6da07718e7a05fdda2e9a88e849d997019c2a90de598f9b882a1cf97/ailove-django-fias-0.5.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}