{
  "info": {
    "author": "Madhava-mng",
    "author_email": "alformint@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pyloadart\nIt displays loading like structure in loopy statement (package)\n\n```bash\n\n   pyloadart\n        |\n        |-- function\n        |      |\n        |      |-- bar()\n        |      |-- arrow()\n        |      |-- doted()\n        |      |-- hash_()\n        |      |-- custom()\n        |      |-- loop\n        |            |\n        |            |-- box()\n        |            |-- arrow()\n        |            |-- clock()\n        |            |-- doted()\n        |            |-- custom()\n        |            |-- inwords()\n        |            |-- outwords()\n        |\n        |-- asign\n        |      |\n        |      |-- ExceptionKeyboardInterrupt\n        |      |-- loop\n        |            |-- ExceptionKeyboardInterrupt\n        |\n        |-- version\n        |      |__ v0.0.1\n        |\n        |-- author\n        |      |_ Madhava-mng\n        |\n        |__  The End. Nandrigal...!\n```\n\n```python\n\n  >>> import pyloadart as pla\n  >>> for i in range(500000):\n  ...     pla.arrow(i, 500000, msg='banner\\\\t')\n  banner  100% [➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢]\n```\n\n    Function:\n        ➢ bar\n        ➢ arrow\n        ➢ doted\n        ➢ hash_\n        ➢ custom\n\n    Assign:\n        ➢ ExceptionKeyboardInterrupt = False/True\n\n\n    Arg:\n        ➢ current_value   =>  (int)  number\n        ➢ expected_value  =>  (int)  number\n        ➢ theam           =>  (str)  Inside loders \"#\" or \"➢\" ...\n                                     only in custom\n        ➢ msg             =>  (str)  print the message before loaders\n        ➢ unfilled        =>  (str)  Fill this char with unfilled areas\n        ➢ number          =>  (Bool) for hide persentage sign and number\n        ➢ color           =>  (str)  W   => white\n                                   R   => red\n                                   B   => blue\n                                   G   => green\n                                   Y   => yellow\n                                   P   => pink like     code: \\\\033[35m\n                                   D   => disco\n                                the colors displayed according your terminal\n                                color scheam\n        ➢ end_with        =>  (str)  end with chars default \"[]\"\n                                   [0] => starts with\n                                   [1] => ends with\n        ➢ interval        =>  (int)  set intervel to print the loader\n                                   To wavering the speed of the program\n\n\n\n    Examples:\n\n```python\n  >>> import pyloadart as pla\n  >>>\n  >>> for i in range(500000):\n  ...     pla.arrow(i, 500000, msg='banner \\\\t')\n  banner   100% [➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢]\n\n  >>> for i in range(500000):\n  ...     pla.arrow(i, 500000, msg='banner2\\\\t', unfilled='-')\n  banner2   85% [➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢----------]\n\n  >>> for i in range(500000):\n  ...     pla.arrow(i, 500000, msg='banner3\\\\t\\\\t', number=False)\n  banner3       [➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢]\n\n  >>> for i in range(500000):\n  ...     pla.arrow(i, 500000, msg='banner\\\\t', endwith=\"()\", unfilled='-')\n  banner4   67% (➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢➢-------------------------)\n\n\n  >>> for i in range(500000):\n  ...     pla.custom(i, 500000, msg='banner5\\\\t', endwith=\"()\", theam=\"@\")\n  banner5   68% (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@--------------------------)\n\n  Exception\n  >>> pla.ExceptionKeyboardInterrupt = True\n```\n\n   ➢ bar, dotted, hash_  all are similear to arrow.\n   ➢ Some ascii values are not suported by some terminals, use custom function\n     for that kind of issues.\n\n   loop:\n\n     Functions:\n        ➢ box\n        ➢ arrow\n        ➢ doted\n        ➢ clock\n        ➢ inwords\n        ➢ outwords\n        ➢ custom\n\n    Assign:\n        ➢ ExceptionKeyboardInterrupt = False/True\n\n    Arg:\n        ➢ interval        =>  (int)  set intervel to print the loader\n                                   To wavering the speed of the program\n\n        ➢ pre_msg         =>  (str) display the message before loader\n        ➢ post_msg        =>  (str) display the message after loader\n        ➢ color           =>  (str)  W   => white\n                                   R   => red\n                                   B   => blue\n                                   G   => green\n                                   Y   => yellow\n                                   P   => pink like     code: \\\\033[35m\n                                   D   => disco\n                                the colors displayed according your terminal\n                                color scheam\n        ➢ theam           => (list) list of char you want to disply\n                                    theam = (\"\\\\\", \"|\", \"-\", \"|\", \"/\", \"-\")\n                                    only in custom\n\n    Examples:\n\n```python\n     >>> import pyloadart as pla\n     >>> while (True):\n     ...     pla.loop.box(10, pre_msg = \"something loading\")\n     something loading  ⠽\n     >>> while (True):\n     ...     pla.loop.box(10, post_msg = \"something loading\")\n     ⠽ something loading\n\n     Exception\n     >>> pla.loop.ExceptionKeyboardInterrupt = True\n```\n\nsee in [github](https://github.com/Madhava-mng/pyloadart.git)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Madhava-mng/pyloadart",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyloadart",
    "package_url": "https://pypi.org/project/pyloadart/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyloadart/",
    "project_urls": {
      "Homepage": "https://github.com/Madhava-mng/pyloadart"
    },
    "release_url": "https://pypi.org/project/pyloadart/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "It displays loading like structure in loopy statement",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9479052,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "719aa4e9ede93d9632e93ceaaef3466b5551b9c68cb4c8345943517d423ba6a5",
          "md5": "999733e02646e1123c3a0724484b70a8",
          "sha256": "3abbba1bc55ae67cf666a586170b470a19b30c750e5fb264d2ffc68abb164fae"
        },
        "downloads": -1,
        "filename": "pyloadart-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "999733e02646e1123c3a0724484b70a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6375,
        "upload_time": "2021-02-21T04:08:38",
        "upload_time_iso_8601": "2021-02-21T04:08:38.796729Z",
        "url": "https://files.pythonhosted.org/packages/71/9a/a4e9ede93d9632e93ceaaef3466b5551b9c68cb4c8345943517d423ba6a5/pyloadart-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bed2138f7f9df9a4b06038051d0d6f37cdafc0ae5bcdc5e72296f8fc63fa7068",
          "md5": "bbd73b17a3b6c4febd8bbd855617364d",
          "sha256": "f3e384022d0c375fd4de811c4a5fb80bcb5a2be0c92774f1aed01075d5173b82"
        },
        "downloads": -1,
        "filename": "pyloadart-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bbd73b17a3b6c4febd8bbd855617364d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4934,
        "upload_time": "2021-02-21T04:08:41",
        "upload_time_iso_8601": "2021-02-21T04:08:41.179881Z",
        "url": "https://files.pythonhosted.org/packages/be/d2/138f7f9df9a4b06038051d0d6f37cdafc0ae5bcdc5e72296f8fc63fa7068/pyloadart-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "719aa4e9ede93d9632e93ceaaef3466b5551b9c68cb4c8345943517d423ba6a5",
        "md5": "999733e02646e1123c3a0724484b70a8",
        "sha256": "3abbba1bc55ae67cf666a586170b470a19b30c750e5fb264d2ffc68abb164fae"
      },
      "downloads": -1,
      "filename": "pyloadart-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "999733e02646e1123c3a0724484b70a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6375,
      "upload_time": "2021-02-21T04:08:38",
      "upload_time_iso_8601": "2021-02-21T04:08:38.796729Z",
      "url": "https://files.pythonhosted.org/packages/71/9a/a4e9ede93d9632e93ceaaef3466b5551b9c68cb4c8345943517d423ba6a5/pyloadart-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bed2138f7f9df9a4b06038051d0d6f37cdafc0ae5bcdc5e72296f8fc63fa7068",
        "md5": "bbd73b17a3b6c4febd8bbd855617364d",
        "sha256": "f3e384022d0c375fd4de811c4a5fb80bcb5a2be0c92774f1aed01075d5173b82"
      },
      "downloads": -1,
      "filename": "pyloadart-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bbd73b17a3b6c4febd8bbd855617364d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 4934,
      "upload_time": "2021-02-21T04:08:41",
      "upload_time_iso_8601": "2021-02-21T04:08:41.179881Z",
      "url": "https://files.pythonhosted.org/packages/be/d2/138f7f9df9a4b06038051d0d6f37cdafc0ae5bcdc5e72296f8fc63fa7068/pyloadart-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}