{
  "info": {
    "author": "bfzs",
    "author_email": "ydf0509@sohu.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# db_libs\n\n各种数据库的封装。只封装生成连接的部分，十分克制,很少去添加一些新的方法然后去调用原生类的方法。\n\n因为原生类已经很好用了，主要是控制一下用户无限实例化连接类，造成反复创建连接就可以了。\n\n```\nredis_lib和mongo_lib在redis和pymongo的基础上进行封装。\n由于原生的包已经足够好用了，并不需要重新写几百个方法进行过度封装。\n仅仅是加了享元模式，使得在相同入参情况下无限实例化相关客户端类的时候不会反复重新连接。\n封装方式采用的非常规方式，使用的是继承方式，而非通常情况下的使用组合来进行封装。\n继承方式封装的比组合模式封装的好处更多。\n\n\n\nmysql_lib使用连接池，兼容在多线程环境运行。使调用时候少关注cursor commit close 等。\n\nsqla_lib 是反射已存在的表，也是使用连接池，兼容多线程环境运行。能够支持orm和原生sql语句两种执行方式。\n\n```\n\n```python\n# 组合模式封装的代码一般是如下这种例子。\n\"\"\"\n这种方式封装是组合，精确点是23种设计模式的代理模式。\n代理模式说的是定义很多方法，来调用self.r所具有的方法。\n\n\n另外对于无限实例化，还使用了享元模式。\n封装数据库切记不要使用单例模式，如果入参传了不同的主机ip或者不同的db，而仍然返回之前的连接对象，那就大错特错了。\n\n\"\"\"\n# 使用组合模式封装的redis，没有继承模式的好用。\nimport redis\n\nclass RedisClient:\n\n    params__reids_map = {}\n\n    def __init__(self,host,db,port,password):\n        if (host,db,port,password) not in self.__class__.params__reids_map:\n            self.r = redis.Redis(host,db,port,password)\n            self.__class__.params__reids_map[(host,db,port,password)] = self.r\n        else:\n            self.r = self.__class__.params__reids_map[(host,db,port,password)]\n    \n    def my_set(self,key,value):\n        print('额外的扩展')\n        self.r.set(name=key,value=value)\n    \n    def my_get(self,name):\n        # 这个封装简直是多次一举，在redis实例化时候，\n        # 将Redis类的构造方法的入参 decode_responses设置为True，就可以避免几百个方法需要反复decode了。\n        return self.r.get(name).decode()\n\n```\n\n#### 例如网上的一种封装，重新封装几百个方法，我不喜欢这样封装工具类。\n```python\nimport redis\n\nclass MyRedis():\n    def __init__(self,ip,password,port=6379,db=1):#构造函数\n        try:\n            self.r = redis.Redis(host=ip,password=password,port=port,db=db)  #连接redis固定方法,这里的值必须固定写死\n        except Exception as e:\n            print('redis连接失败，错误信息%s'%e)\n    def str_get(self,k):\n        res = self.r.get(k)   #会从服务器传对应的值过来，性能慢\n        if res:\n            return res.decode()   #从redis里面拿到的是bytes类型的数据，需要转换一下\n\n    def str_set(self,k,v,time=None): #time默认失效时间\n        self.r.set(k,v,time)\n\n    def delete(self,k):\n        tag = self.r.exists(k)\n        #判断这个key是否存在,相对于get到这个key他只是传回一个存在火灾不存在的信息，\n        # 而不用将整个k值传过来（如果k里面存的东西比较多，那么传输很耗时）\n        if tag:\n            self.r.delete(k)\n        else:\n            print('这个key不存在')\n\n    def hash_get(self,name,k):  #哈希类型存储的是多层字典（嵌套字典）\n        res = self.r.hget(name,k)\n        if res:\n            return res.decode()  #因为get不到值得话也不会报错所以需要判断一下\n\n    def hash_set(self,name,k,v): #哈希类型的是多层\n        self.r.hset(name,k,v)   #set也不会报错\n\n    def hash_getall(self,name):\n        res = self.r.hgetall(name)   #得到的是字典类型的，里面的k,v都是bytes类型的\n        data={}\n        if res:\n            for k,v in res.items(): #循环取出字典里面的k,v，在进行decode\n                k = k.decode()\n                v = v.decode()\n                data[k]=v\n        return data\n\n    def hash_del(self,name,k):\n        res = self.r.hdel(name,k)\n        if res:\n            print('删除成功')\n            return 1\n        else:\n            print('删除失败，该key不存在')\n            return 0\n\n    @property   #属性方法，\n                # 使用的时候和变量一个用法就好比实例，A=MyRedis(), A.clean_redis使用，\n                # 如果不加这个@property,使用时A=MyRedis(), A.clean_redis()   后面需要加这个函数的括号\n    def clean_redis(self):\n        self.r.flushdb()   #清空 redis\n        print('清空redis成功！')\n        return 0\n\n\n\na = MyRedis('118.0000','HK0000*')\n\nprint(a.str_get('duan'))\n\n```\n\n\n## sqla_lib使用如下，可以orm操作已存在的数据库。\n```python\n\nif __name__ == '__main__':\n    \"\"\"\n    例如 ihome_area2的表结果如下。\n    \n    create table ihome_area2\n(\n    create_time datetime    null,\n    update_time datetime    null,\n    id          int auto_increment\n        primary key,\n    name        varchar(32) not null\n);\n\n    \"\"\"\n\n    enginex = create_engine(\n        'mysql+pymysql://root:123456@127.0.0.1:3306/aj?charset=utf8',\n        max_overflow=10,  # 超过连接池大小外最多创建的连接\n        pool_size=50,  # 连接池大小\n        pool_timeout=30,  # 池中没有线程最多等待的时间，否则报错\n        pool_recycle=3600,  # 多久之后对线程池中的线程进行一次连接的回收（重置）\n        echo=True)\n    sqla_helper = SqlaReflectHelper(enginex)\n    Ihome_area2 = sqla_helper.base_classes.ihome_area2  # ihome_area2是表名。\n\n\n    def f1():\n        with sqla_helper.session as ss:\n            ss  # type: _SessionContext\n\n            print(ss)\n\n            print(ss.query(sqlalchemy.func.count(Ihome_area2.id)).scalar())\n\n            # 使用orm方式插入\n            ss.add(Ihome_area2(create_time=datetime.now(), update_time=datetime.now(), name='testname'))\n\n            print(ss.query(sqlalchemy.func.count(Ihome_area2.id)).scalar())\n\n            # 使用占位符语法插入，此种可以防止sql注入\n            ss.execute(f'''INSERT INTO ihome_area2 (create_time, update_time, name) VALUES (:v1,:v2,:v3)''', params={'v1': '2020-06-14 19:15:14', 'v2': '2020-06-14 19:15:14', 'v3': 'testname00'})\n\n            # 直接自己拼接完整字符串，不使用三方包占位符的后面的参数，此种会引起sql注入，不推荐。\n            cur = ss.execute(f'''INSERT INTO ihome_area2 (create_time, update_time, name) VALUES ('2020-06-14 19:15:14','2020-06-14 19:15:14', 'testname')''', )\n\n            # 这样也可以打印执行的语句\n            # noinspection PyProtectedMember\n            print(cur._saved_cursor._executed)\n\n        # 使用最原生的语句，直接调用了pymysql的cursor对象。\n        conny = sqla_helper.engine.raw_connection()\n        cury = conny.cursor(DictCursor)  # type: DictCursor\n        print(cury)\n        cury.execute('SELECT * FROM ihome_area2 LIMIT 3')\n        result = cury.fetchall()\n        print(result)\n        conny.commit()\n        cury.close()\n        conny.close()\n\n\n    def f2():\n        ss = sqla_helper.get_session_factory()()\n        print(ss)\n        print(ss.query(sqlalchemy.func.count(sqla_helper.base_classes.ihome_area.id)).scalar())\n        ss.add(sqla_helper.base_classes.ihome_area(create_time=datetime.now(), update_time=datetime.now(), name='testname'))\n        ss.commit()\n        print(ss.query(sqlalchemy.func.count(sqla_helper.base_classes.ihome_area.id)).scalar())\n        ss.close()\n\n\n    with decorator_libs.TimerContextManager():\n        t_pool = BoundedThreadPoolExecutor(10)  # 封装mysql，切记一定要测试多线程下的情况。\n        for _ in range(500):\n            # f1()\n            t_pool.submit(f1)\n        t_pool.shutdown()\n\n\n```\n\n![](https://visitor-badge.glitch.me/badge?page_id=db_libs)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "database,redis,mongo,elasticsearch,mysql,sqlachemy",
    "license": "BSD License",
    "maintainer": "ydf",
    "maintainer_email": "ydf0509@sohu.com",
    "name": "db-libs",
    "package_url": "https://pypi.org/project/db-libs/",
    "platform": "all",
    "project_url": "https://pypi.org/project/db-libs/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/db-libs/0.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "'redis', 'mongo', 'elasticsearch', 'mysql', 'sqlachemy', '线程安全的数据库封装，享元模式支持无限实例化调用'",
    "version": "0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13179876,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62870c669e09de18cc0be3ce0564581fb30ca64a29199e2d7b37add96e49626b",
          "md5": "dd34d8ae3d7e73b55bc04e65c6bedad1",
          "sha256": "37a2849a3c2bd496e2cc51eb2a0ee01766bf33be56d25298d1222c1ca9d179e4"
        },
        "downloads": -1,
        "filename": "db_libs-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dd34d8ae3d7e73b55bc04e65c6bedad1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10025,
        "upload_time": "2020-06-15T10:05:08",
        "upload_time_iso_8601": "2020-06-15T10:05:08.462382Z",
        "url": "https://files.pythonhosted.org/packages/62/87/0c669e09de18cc0be3ce0564581fb30ca64a29199e2d7b37add96e49626b/db_libs-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3a067de8da799808ddf14785ce7cbd65e149f69c546849d5a43640c2762b894",
          "md5": "b9195703c6820cf6c16db3953fe8f014",
          "sha256": "6b76834ac81909c9c6eeec20bad35290718c5145c9ed5d438a32aec215b5e13e"
        },
        "downloads": -1,
        "filename": "db_libs-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b9195703c6820cf6c16db3953fe8f014",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10564,
        "upload_time": "2020-06-15T10:08:18",
        "upload_time_iso_8601": "2020-06-15T10:08:18.019913Z",
        "url": "https://files.pythonhosted.org/packages/a3/a0/67de8da799808ddf14785ce7cbd65e149f69c546849d5a43640c2762b894/db_libs-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cc28cb808eec875c6843c5f0a7cd4cbbdf62feb3732f69e93c6b39e489d2caa",
          "md5": "6350705c2364a5821ba63ad641bdcd95",
          "sha256": "ff460c9f68ecc990abdf628788a861bf9f796a1195eed41fe9f27843aecb05d5"
        },
        "downloads": -1,
        "filename": "db_libs-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6350705c2364a5821ba63ad641bdcd95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10653,
        "upload_time": "2020-06-19T09:07:12",
        "upload_time_iso_8601": "2020-06-19T09:07:12.122979Z",
        "url": "https://files.pythonhosted.org/packages/4c/c2/8cb808eec875c6843c5f0a7cd4cbbdf62feb3732f69e93c6b39e489d2caa/db_libs-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e8e5950248d41c17af931e7228be703bb6fe93414fb236adda8bfd159700f0c",
          "md5": "e1c030d76ad669902bd093bb2b1812d2",
          "sha256": "5f51301e01656cfec8b8329e0c36f5c8741e23130d87309ff015a9b2eaa312aa"
        },
        "downloads": -1,
        "filename": "db_libs-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e1c030d76ad669902bd093bb2b1812d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10701,
        "upload_time": "2020-06-19T09:58:34",
        "upload_time_iso_8601": "2020-06-19T09:58:34.015876Z",
        "url": "https://files.pythonhosted.org/packages/7e/8e/5950248d41c17af931e7228be703bb6fe93414fb236adda8bfd159700f0c/db_libs-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62f6c0ac16f8e0005b26556ced10d7b5c68d2e5adb19f15289c2fbb930e0b3d8",
          "md5": "fb69247144b2ae870f90c8c1780389da",
          "sha256": "02feab98fe7639f2f5bbf211ab0003947a9d64d8c1d85cc5b2bfea4d1125a268"
        },
        "downloads": -1,
        "filename": "db_libs-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "fb69247144b2ae870f90c8c1780389da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10709,
        "upload_time": "2020-06-24T14:21:26",
        "upload_time_iso_8601": "2020-06-24T14:21:26.788364Z",
        "url": "https://files.pythonhosted.org/packages/62/f6/c0ac16f8e0005b26556ced10d7b5c68d2e5adb19f15289c2fbb930e0b3d8/db_libs-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8b8fe0d2fa0d5c69ffb371724128b5ae56cc5dd245a5801207433814f0b252e",
          "md5": "a74f57bf195a8184728e7b026ca35554",
          "sha256": "a435298b1bdc27a6ecfda07ecebc4b96b34c7184fc343aeda62e915451f24e0c"
        },
        "downloads": -1,
        "filename": "db_libs-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a74f57bf195a8184728e7b026ca35554",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13271,
        "upload_time": "2022-03-15T09:15:57",
        "upload_time_iso_8601": "2022-03-15T09:15:57.278376Z",
        "url": "https://files.pythonhosted.org/packages/d8/b8/fe0d2fa0d5c69ffb371724128b5ae56cc5dd245a5801207433814f0b252e/db_libs-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8b8fe0d2fa0d5c69ffb371724128b5ae56cc5dd245a5801207433814f0b252e",
        "md5": "a74f57bf195a8184728e7b026ca35554",
        "sha256": "a435298b1bdc27a6ecfda07ecebc4b96b34c7184fc343aeda62e915451f24e0c"
      },
      "downloads": -1,
      "filename": "db_libs-0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "a74f57bf195a8184728e7b026ca35554",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13271,
      "upload_time": "2022-03-15T09:15:57",
      "upload_time_iso_8601": "2022-03-15T09:15:57.278376Z",
      "url": "https://files.pythonhosted.org/packages/d8/b8/fe0d2fa0d5c69ffb371724128b5ae56cc5dd245a5801207433814f0b252e/db_libs-0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}