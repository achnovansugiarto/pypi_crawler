{
  "info": {
    "author": "The istSOS Team",
    "author_email": "geoservice@supsi.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# istSOS3\n\nIn this repository you can find the istSOS3 Python3 module.\nBy following the instruction you will be able to run and use\nthe core of istSOS3 on your machine.\nFor full packaged versions please go to (todo: link of the\ndowload pages).\n\n## Quick Installation\n\nTo install istSOS3, you ca use pip:\n\n```bash\npip3 install istsos\n```\n\n## Installation guide for developers\n\nMake a fork of the official repository if you think to contribute\nto the development, then clone your fork to your workstation.\n\nIf you want just to make some tests you can clone directly the official\nrepository.\n\n```bash\ngit clone https://github.com/istSOS/istsos3.git\n```\nInstall all the dependencies\n\n```bash\nsudo apt-get install postgresql postgis python3-pip\n```\n\nAnd some Python3 dependencies:\n\n```bash\nsudo pip3 install lxml \\\n    jsonschema \\\n    python-dateutil \\\n    tornado \\\n    psycopg2 \\\n    aiopg \\\n    pytest\n```\n\n## Preparing the istSOS3 server\n\nInstalla and create a PostgreSQL database named istsos3 and execute the sql file\n(postgresql_9.4_istsos_3.0.0.sql) that you can find in\nthe ```istsos3/assets``` folder.\n\n```bash\nsudo -u postgres createdb -E UTF8 istsos3\nsudo -u postgres psql \\\n  -d istsos3 -a \\\n  -f istsos3/istsos/assets/postgresql_9.4_istsos_3.0.0.sql\n```\n\nSet your postgres user password\n\n```bash\nsudo -u postgres psql\nalter user postgres password 'postgres';\n```\nCtrl-D to exit from psql console\n\n\nCreate the configuration file adapting the loader attribute.\n\n```bash\ncd istsos3\ncp config-example.json config.json\n```\n\nEdit your config file:\n\n```json\n{\n    \"type\": \"aiopg\",\n    \"host\": \"localhost\",\n    \"port\": \"5432\",\n    \"user\": \"postgres\",\n    \"password\": \"postgres\",\n    \"database\": \"istsos3\"\n}\n```\n\nThere is a basic server implementation using [Townado Web](http://www.tornadoweb.org)\n\n```bash\npython3 examples/server_tornado.py\n```\nListening at http://localhost:8887/sos\n\n### Testing\n\nLib used: https://docs.pytest.org/en/latest/\n\n[#todo emprove this]\nFor testing in the istsos/test/ folder there same tests that has been\nimplemented.\n\n#### Testing the SOS requests\n\nin the folder [istsos/test/actions/servers/sos_2_0_0/](istsos/test/actions/servers/sos_2_0_0/)\nyou can find some examples. To run a single test, execute this from the\nterminal:\n\n```bash\npytest -s istsos/test/actions/servers/sos_2_0_0/test_getCapabilitiesOp.py\n```\n\nor\n\n```bash\npytest -s istsos/test/actions/servers/sos_2_0_0/test_describeSensorOp.py\n```\n\n#### Benchmark\n\n[#todo emprove this]\nYou can also do some basic benchmarking with the files in the [examples/speed](examples/speed) folder.\n\nMaybe we can take a look at this tools: https://github.com/wg/wrk\n\n\n```bash\npython curl.py http://localhost/sos\n```\n\nor directly using curl:\n\n```bash\ncurl -s -w '\\ntime_namelookup=%{time_namelookup}\\ntime_pretransfer=%{time_pretransfer}\\ntime_starttransfer=%{time_starttransfer}\\ntime_total=%{time_total}\\n\\n' -o /dev/null \"http://the.request?to=test\"\n```\n\n### Documentation\n\nIn the docs folder there the sphings file that can be used to generate the\ndocs html page.\n\nTo build the docs:\n\n```bash\n    cd docs\n    make html\n```\n\n## Continuous Integration (CI)\n\nhttps://about.gitlab.com/features/gitlab-ci-cd/\n\nThe tests are executed automatically at each commit on the remote repository.\nThe test are performed inside a docker environment.\n\n### Installation\n\nIt's possible to execute the test locally, to do that follow the steps below:\n\n#### Install docker executor\n\nAdd the GPG key for the official Docker repository:\n```bash\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```\n\nAdd Docker repo to APT sources:\n```bash\n    sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n```\n\nInstall Docker\n```bash\n    sudo apt-get update\n    sudo apt-get install docker-ce\n```\n\nRun docker without sudo\n```bash\n    sudo usermod -aG docker ${USER}\n    su - ${USER}\n```\n\n#### Install gitlab-ci runner\n\nDownload the correct deb (gitlab-ci-multi-runner_amd64.deb) from the following uri:\n```bash\n    https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/v9.5.0/deb/gitlab-ci-multi-runner_amd64.deb\n```\n\nInstall gitlab-ci-runner:\n```bash\n    sudo dkpg -i gitlab-ci-multi-runner_amd64.deb\n```\n\n#### Run test locally with gitlab-ci\n\nLocally you can only run one test at time, the test run only on commited changes.\n\n```bash\n    cd git-root\n    gitlab-runner exec docker [test_name]\n\n```\n\n### Add new jobs to gitleb-ci\n\nThe .gitlab-ci.yml file defines sets of jobs with constraints of how and when they should be run.\nThe jobs are defined as top-level elements with a name (in our case rest) and always have to contain the script keyword.\n\nEach job run independently from each other. If a test fails the job will be stopped.\n\nExample:\n```\nrest:\n    stage: test\n\n    script:\n        - pytest -s istsos/test/actions/servers/rest/test_uom.py\n        - pytest -s istsos/test/actions/servers/rest/test_observedProperties.py\n        - pytest -s istsos/test/actions/servers/rest/test_material.py\n        - pytest -s istsos/test/actions/servers/rest/test_method.py\n        - pytest -s istsos/test/actions/servers/rest/test_offering.py\n        - pytest -s istsos/test/actions/servers/rest/test_specimen.py\n\n```\n\n\n## istSOS3 lib usage\n\n### Usage example:\n\n[#todo to be improved]\n\n```python\n\nimport asyncio\n\nfrom istsos.application import Server\nfrom istsos.entity.httpRequest import HttpRequest\n\n@asyncio.coroutine\ndef execute():\n    server = yield from Server.create()\n    request = HttpRequest(\n        \"GET\",\n        \"sos\",\n        parameters={\n            \"service\": \"SOS\",\n            \"version\": \"2.0.0\",\n            \"request\": \"GetObservation\",\n            \"offering\": \"T_LUGANO\",\n            \"temporalFilter\": (\n                \"om:phenomenonTime,\"\n                \"2009-01-01T00:00:00+0100/\"\n                \"2009-01-02T00:00:00+0100\"\n            )\n        }\n    )\n    response = yield from server.execute_http_request(request, stats=True)\n    print(\"\\nLoaded %s observations\" % len(response['observations']))\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(\n   asyncio.gather(execute())\n)\nloop.close()\n\n```\n\n#### Initialize a new config file\n\nInitializing the istSOS Server with a config dictionary. A new config file will be created in the given path (default to config.pickle).\n\n```python\n\nfrom istsos.application import State\n\nstate = State(\n    config={\n        \"proxy\": \"http://localhost/istsos3/\",\n        \"cache\": False,\n        \"loader\": {\n            \"type\": \"aiopg\",\n            \"host\": \"localhost\",\n            \"port\": \"5432\",\n            \"user\": \"postgres\",\n            \"password\": \"postgres\",\n            \"database\": \"istsos3\"\n        }\n    }\n)\n\n```",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/istSOS/istsos3",
    "keywords": "istsos ogc sos sensor observation service",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "istsos",
    "package_url": "https://pypi.org/project/istsos/",
    "platform": "",
    "project_url": "https://pypi.org/project/istsos/",
    "project_urls": {
      "Homepage": "https://github.com/istSOS/istsos3"
    },
    "release_url": "https://pypi.org/project/istsos/3.0.0b1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "istSOS3 Core Library",
    "version": "3.0.0b1",
    "yanked": true,
    "yanked_reason": "development suspended"
  },
  "last_serial": 7544502,
  "releases": {
    "3.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f727c4bf78d40e1a0015db963ec13b51bcfa29faeae5020777d82ba1d930b9cb",
          "md5": "19b3ef2dad9bc9871a5b580dc491e80e",
          "sha256": "b67fd868ccf824da3d92cb040a8acc80c7ea26bfdc760c515aa0874c53049d0b"
        },
        "downloads": -1,
        "filename": "istsos-3.0.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "19b3ef2dad9bc9871a5b580dc491e80e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 73929,
        "upload_time": "2018-05-03T06:31:48",
        "upload_time_iso_8601": "2018-05-03T06:31:48.412833Z",
        "url": "https://files.pythonhosted.org/packages/f7/27/c4bf78d40e1a0015db963ec13b51bcfa29faeae5020777d82ba1d930b9cb/istsos-3.0.0b1.tar.gz",
        "yanked": true,
        "yanked_reason": "development suspended"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f727c4bf78d40e1a0015db963ec13b51bcfa29faeae5020777d82ba1d930b9cb",
        "md5": "19b3ef2dad9bc9871a5b580dc491e80e",
        "sha256": "b67fd868ccf824da3d92cb040a8acc80c7ea26bfdc760c515aa0874c53049d0b"
      },
      "downloads": -1,
      "filename": "istsos-3.0.0b1.tar.gz",
      "has_sig": false,
      "md5_digest": "19b3ef2dad9bc9871a5b580dc491e80e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 73929,
      "upload_time": "2018-05-03T06:31:48",
      "upload_time_iso_8601": "2018-05-03T06:31:48.412833Z",
      "url": "https://files.pythonhosted.org/packages/f7/27/c4bf78d40e1a0015db963ec13b51bcfa29faeae5020777d82ba1d930b9cb/istsos-3.0.0b1.tar.gz",
      "yanked": true,
      "yanked_reason": "development suspended"
    }
  ],
  "vulnerabilities": []
}