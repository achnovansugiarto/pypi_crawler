{
  "info": {
    "author": "Qc",
    "author_email": "qcsdfsdvdac@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## Scarf\n\n\n\n**Scarf是一个简易的python（python3.5及以上） Web框架。**\n\n**没有更多的描述了，希望的就是追求快速更好的集成Web框架**\n\n## 安装\n```bash\npip install ScarfKit\n```\n\n## **1.1 项目结构**\n\n```\n|-- project name  // 项目根目录\n\t|-- application.yml // 配置文件\n\t|-- main.py // 入口文件\n\t|-- logs // 日志存放文件夹\n\t\t|-- WebServer.log\n\t|-- models // 数据库实体类\n\t\t|-- User.py\n\t\t|-- SQLConnectionManager.py // 数据库管理类\n\t|-- routers // 路由\n        |-- RequestProcessor.py // 请求拦截器|响应过滤器\n\t\t|-- User.py // 路由模板\n\t|-- ssl // ssl 证书文件夹\n\t\t|-- 1_fqqcalltime.cn_bundle.crt\n\t\t|-- 2_fqqcalltime.cn.key\n    |-- config // 项目所使用模块各个配置\n    \t|-- routers.User.Auth.yml // User模块的配置文件\n\t|-- static // 静态文件目录\n```\n\n\n\n## **1.2 起步**\n\n\n\n就着上面的目录我们实现一个小的接口范例代码，当然一个简简单单的Hello World还是要有的\n\n``` python\n# routers/User.py\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods\n\nclass Auth:\n    def __init__(self):\n        self.username = \"admin\"\n        self.password = \"admin\"\n\n        @RequestReslove.route(\"/hello\")\n        def hello(self):\n            return \"hello world\"\n\n```\n\n接下来入口文件中就需要将模块注册到Scarf\n\n```python\n# main.py\nfrom Scarf.Main import Scarf\nfrom routers.User import Auth\n\nserver = Scarf()\nserver.scan_module(Auth())\nserver.start_server()\n```\n\n此时当我们在浏览器访问http://localhost:81/hello， 将能看到页面上的字符串\"hello world\"。其中scan_module用于扫描模块中被修饰的函数，@RequestReslove.route用于修饰标注这个函数为路由注册函数，最后start_server则当然是启动服务并监听请求。\n\n当然一个简单的hello world是不能解决所有问题的。接下来我们用一个用户登录的例子来介绍其他的用法。假设我们需要实现一个登录模块，路径是/api/login,参数有username和password返回值是一个JSON对象包含操作的状态值和一些附加信息。我们来为这个类新增一个方法叫user_login函数\n\n\n\n``` python\n# routers/User.py\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods\n\nclass Auth:\n    def __init__(self):\n        self.username = \"admin\"\n        self.password = \"admin\"\n\n        @RequestReslove.route(\"/hello\")\n        def hello(self):\n            return \"hello world\"\n\n        @RequestReslove.route(\n            \"/api/login\",\n            (Methods.GET, ),\n            ((\"username\",\"password\"),(),(),())\n        )\n        def user_login(self, username: str, password: str):\n\n            print(\"username : %s , password: %s\" % (username, password))\n\n```\n\n\n\n此时当浏览器访问http://locahost:81时， 将会看到打印：\n\n```\nusername : admin , password: admin\n```\n\n\n\n接下来我们完成这个登录的接口，现在需要验证用户名和密码是否正确，并返回相对的提示码和一个token来通知用户是否登录成功\n\n``` python\n# routers/User.py\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods\nimport hashlib\n\nclass Auth:\n    def __init__(self):\n        self.username = \"admin\"\n        self.password = \"admin\"\n        # 用于存放用户的token信息\n        self.user_list = []\n\n        @RequestReslove.route(\"/hello\")\n        def hello(self):\n            return \"hello world\"\n\n        @RequestReslove.route(\n            \"/api/login\",\n            (Methods.GET, ),\n            ((\"username\",\"password\"),(),(),())\n        )\n        def user_login(self, username: str, password: str):\n            print(\"username : %s , password: %s\" % (username, password))\n            if self.username == username and self.password == password:\n                # 生成MD5的Token,将用户名作为参数\n                md5_ = hashlib.md5()\n                md5_.update(self.username.encode())\n                token = md5_.hexdigest()\n                return {\"code\": 200, \"msg\": \"Login Success\", \"data\": token}\n            else:\n                return {\"code\": 500, \"msg\": \"Login Fail\", \"data\": None}\n```\n\n此时当访问http://localhost:81/api/login?username=admin&password=admin 将看到返回值：\n\n```json\n{\"code\": 200, \"msg\": \"Login Success\", \"data\": \"21232f297a57a5a743894a0e4a801fc3\"}\n```\n\n当然如果将密码或用户名改成别的也会看到：\n\n```json\n{\"code\": 500, \"msg\": \"Login Fail\", \"data\": null}\n```\n\n这就是一个完整的简单例子\n\n\n\n## **1.3 路由注册**\n\n\n\n一个路由需由一个类和这个类的成员共同组成，其中成员函数通过修饰实例化后通过Scarf的scan_module函数即可完成注册，而被修饰的函数可以称之为路由实体函数。完整的@RequestReslove.route的参数如下\n\n``` python\n\"\"\"\n路由注册修饰器\n:param path(str): 路径规则 /api/:username/:password 路径参数 || /api/login/* 后缀通配符匹配\n:param methods(tuple): 支持的请求方法（支持的请求方法可在Scarf.Tip.Methods中查看）\n:param arg_source(tuple(tuple)): 二维tuple,((通过路径query获取), (通过请求体获取), (请求头获取), (路径参数获取))\n每一个被修饰的路由实体函数中的参数名需要与arg_source中的参数名对应，在请求过程中Scarf可通过类型标注反射对应类型\n\"\"\"\n@RequestReslove.route(path, methods = (Methods.GET), arg_source=((),(),(),()))\n```\n\n\n\n我们接着上面登录接口的例子介绍以下几种用法\n\n\n\n```python\n# 请求方式: http://localhost:81/api/login?username=admin&password=admin\n@RequestReslove.route(\n    \"/api/login\",\n    (Methods.GET, ),\n    ((\"username\",\"password\"),(),(),())\n)\ndef user_login(self, username: str, password: str):\n    print(\"username : %s , password: %s\" % (username, password))\n    return {\"username\": username, \"password\": password}\n\n#------------------------------------------SplitLine-----------------------------------------------\n\n# 请求方式: http://localhost:81/api/login 请求头(request header)中：username: admin & passowrd: admin\n@RequestReslove.route(\n    \"/api/login\",\n    (Methods.GET, ),\n    ((),(),(\"username\",\"password\"),())\n)\ndef user_login(self, username: str, password: str):\n    print(\"username : %s , password: %s\" % (username, password))\n    return {\"username\": username, \"password\": password}\n\n#------------------------------------------SplitLine-----------------------------------------------\n\n# 请求方式: http://localhost:81/api/login/admin/admin\n@RequestReslove.route(\n    \"/api/login/:username/:password\",\n    (Methods.GET, ),\n    ((),(),(),(\"username\",\"password\"))\n)\ndef user_login(self, username: str, password: str):\n    print(\"username : %s , password: %s\" % (username, password))\n    return {\"username\": username, \"password\": password}\n\n#------------------------------------------SplitLine-----------------------------------------------\n\n\n# 最后一种方式使请求体中获取这种方式相对于其他的方式较为灵活,这种方式会根据请求体(Request Body)中的请求内容以及参数内容进行推断该如何解析并且检查这些解析方式是否被允许。\n# 目前请求体中的数据支持 form-data, form-urlencoded, json。需要注意的是arg_source参数中的第二个tuple中的第一个元素是被占用的，他的作用是用来判断那些格式可以被支持\n\nfrom Scarf.Tip import Methods, ClassSource\n\n@RequestReslove.route(\n    \"/api/login\",\n    (Methods.GET, Methods.POST),\n    ((),(ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'),(),())\n)\ndef user_login(self, username: str, password: str):\n    print(\"username : %s , password: %s\" % (username, password))\n    return {\"username\": username, \"password\": password}\n\n# 请求方式: http://localhost:81/api/login 请求体(Request Body): username=admin&password=admin\n# 请求方式: http://localhost:81/api/login 请求体(Request Body): {\"username\": \"admin\", \"password\": \"admin\"}\n# 请求方式: http://localhost:81/api/login 请求体(Request Body):\n# (JavaScript代码)\n# const form = new FormData(); form.append(\"username\", \"admin\"); form.append(\"password\",\"admin\")\n\n# 正常情况下只会用一种方式进行解析，JSON或者FORM_DATA或者FORM_URLENCODE。如果客户端发送了一个无法解析的参数时，那么路由实体函数将接收到参数对应类型的默认值(实体函数的参数都应改有一个类型标注)\n```\n\n## **1.4 配置文件**\n\n\n\n有些使用者肯定会发现，如果我出现端口占用，那我该怎么办。我还想启用https等等问题可以在配置文件中试着寻找答案，我们先用一些简单的配置，完整的配置项会放在文档末尾。\n\nScarf的核心配置文件为**1.1所示目录结构中的application.yml**。配置文件可通过**load_config_from_file**进行导入和生效。\n\n\n\n```yml\nserver:\n\trelease: false # 标注是否是发行模式\n\tports:\n \t\thttp: 8085 # http端口\ndatasource: # 数据源\n\t- { name: main, host: 127.0.0.1, port: 3306, user: root, password: admin, max_connections: 10, database: test_database, autoconnect: false, autocommit: 1 }\n\t# name: 数据源名称(标识数据源)，剩余的则是数据库驱动初始化参数\n```\n\n\n\n## **1.5 数据库**\n\n\n\n有人会说你这都是死数据有什么好多说的。我要用自己的数据库方式进行操作。OK，我们就以Mysql的数据库为例，在这里数据库驱动我们使用[peewee](http://docs.peewee-orm.com/en/latest/peewee/installation.html \"peewee\")。\n\n首先我们需要创建一个数据库连接管理类\n\n\n\n```python\n# models/SQLConnectionManager.py\n\nfrom Scarf.Tip import SQLModel\n\ntry:\n    from peewee import *\n    from playhouse.pool import PooledMySQLDatabase, PooledSqliteExtDatabase, PooledPostgresqlExtDatabase\n    except ModuleNotFoundError:\n        print(\"error : peewee is not installed please 'pip install peewee' \")\n\n        class SQLFactory(SQLModel):\n            def __init__(self, **config):\n                # 这里的config参数则是application.yml中datasource配置除了name字段的参数\n                self.__sql = PooledMySQLDatabase(**config)\n\n                def get_con(self):\n                    if self.__sql.is_closed():\n                        self.__sql.connect()\n                        return self.__sql\n\n                    # con 为get_con申请到的数据库连接(SQL Connection)\n                    def destory_con(self,con):\n                        con.close()\n```\n\n\n\n数据库连接管理类需要继承于SQLModel，且需要实现get_con函数和destory_con函数。get_con在请求解析完成后申请可用连接而destory_con则是请求完成后销毁连接。这两个函数会在特定时机被Scarf调用。\n\n接下来我们改造一下main.py，既然有管理类但还是需要注册到Scarf中让其生效\n\n\n\n```python\n# main.py\nfrom Scarf.Main import Scarf\nfrom routers.User import Auth\n\nserver = Scarf()\n\n# 导入配置文件\nserver.load_config_from_file(\"./application.yml\")\n# 注册SQL连接管理类\nserver.register_sql_model(\"main\", SQLFactory)\n# 注册实体类函数\nserver.scan_module(Auth())\n\n# 启动服务\nserver.start_server()\n```\n\n\n\n现在SQL模块已经被注册到了全局。接下来我们构建一个数据库实体类。\n\n\n\n```python\n# models/User.py\nfrom peewee import *\n\n\"\"\"\n假设我们的数据库模型和注释如下:\n\"\"\"\nclass USER(Model):\n    userId = IntegerField(null=False, primary_key=True) # 用户ID(主键,自增)\n    createTime = DateTimeField(null=False) # 创建时间\n    username = CharField(null=False, max_length=32) # 用户名\n    password = CharField(null=False, max_length=32) # 密码\n    email = TextField(null=False) # 电子邮件\n    phone = CharField(null=False, max_length=11) # 手机号码\n```\n\n最后我们就可以直接在路由中直接使用了\n\n```python\n# routers/User.py\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel\n\nfrom models.User import USER\n\nclass Auth:\n    def __init__(self):\n        pass\n\n    @RequestReslove.route(\"/hello\")\n    def hello(self):\n        return \"hello world\"\n\n    @RequestReslove.route(\n        \"/api/login\",\n        (Methods.POST, Methods.HEAD),\n        ((), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (), ())\n    )\n    def user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection):\n        # SQLModel.DataBaseConnection 类型标注了该路由实体函数需要数据库连接注入\n        # SQLModel.DataBaseConnection(\"main\") 如果没有调用则默认是第一个数据源，如果带有名字则指向对应名字的数据源连接\n        user = USER(username=username, password=password)\n        user.bind(sql)\n        result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n        if result is None:\n            return {\"code\": 500, \"data\": None, \"msg\": \"Login Fail\"}\n        else:\n            return {\"code\": 500, \"data\": None, \"msg\": \"Login Success\"}\n```\n\n像这样。有了数据库的帮助下，数据的操作和存储将会更加方便。接下来我们再实现一个注册用户的接口,我们先提前想一下如果用户注册需要按照这样的方式来构建函数\n\n```python\n# 用户注册函数(伪函数)\ndef user_register(self,username:str, password:str, create_time: datetime, email: str, phone: str):\n \tpass\n# 那如果参数比较多就显得非常麻烦，我们可以将一个完整的请求体参数看做一个整体然后进行整体反射\n```\n\n数据整体反射:\n\n```python\n# routers/User.py\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel\n\nfrom models.User import USER\n\nclass Auth:\n    def __init__(self):\n        pass\n\n    @RequestReslove.route(\"/hello\")\n    def hello(self):\n        return \"hello world\"\n\n    @RequestReslove.route(\n        \"/api/login\",\n        (Methods.POST, Methods.HEAD),\n        ((), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (), ())\n    )\n    def user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection):\n        # SQLModel.DataBaseConnection 类型标注了该路由实体函数需要数据库连接注入\n        user = USER(username=username, password=password)\n        user.bind(sql)\n        result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n        if result:\n            # 获取Token\n            md5_ = hashlib.md5()\n            md5_.update(str(result.userId).encode())\n            return {\"code\": 500, \"data\": None, \"msg\": \"Login Fail\"}\n        else:\n            return {\"code\": 500, \"data\": None, \"msg\": \"Login Success\"}\n\n        @RequestReslove.route(\"/api/register\", (Methods.POST, Methods.PUT),\n                              ((), (ClassSource.JSON, '_user'), (), ())\n                             )\n        def user_register(self, _user: USER):\n            print(_user.phone)\n            print(_user.createTime)\n            print(isinstance(_user.phone, int)) # True\n            print(isinstance(_user.createTime, str)) # True\n```\n\n这样通过POST或者PUT方式访问 http://localhost:8085/api/register 并携带以下参数即可看到控制台的打印。\n\n\n\n```json\n{\n    \"createTime\": \"2021-12-01 19:00:00\",\n    \"username\": \"user123\",\n    \"password\": \"user123\",\n    \"email\": \"sdfsdvdac@google.com\",\n    \"phone\": 12345678912\n}\n```\n\n\n\n需要注意的是首先类型必须是一个实体类型，其次变量名前需要加一个下划线 '_' 用以告知Scarf该参数需要整体获取而不是在请求体中寻找user这个字段。但是这样还是会有一个问题 ：类型不一致。当打印到最后两行打印的时候返回值都为True，但是希望的是createTime是datetime类型，而phone应该要和数据库保持一致为str类型。这个时候就需要对实体类的字段进行类型标注。类型标注时需要注意大部分情况下，类型之间转换会通过类型本身的构造函数进行实现，但也有些情况比如时间，对于字符串时间的转换是无效的，那么我们需要为其实现一个可调用(callable)的函数进行获取:\n\n\n\n```python\n# models/User.py\n\nfrom peewee import *\nfrom datetime import datetime\n\ndef translate_str_to_datetime(date_str):\n    try: # 注意异常捕捉,否则为None处理\n        return datetime.strptime(date_str, \"%Y-%m-%d %H:%M:%S\")\n    except:\n        return datetime.min\n\n    class USER(Model):\n        userId: int = IntegerField(null=False, primary_key=True)\n            createTime: translate_str_to_datetime = DateTimeField(null=False) # 无法获取实现一个转换函数\n                username: str = CharField(null=False, max_length=32)\n                    password: str = CharField(null=False, max_length=32)\n                        email: str = TextField(null=False)\n                            phone: str = CharField(null=False, max_length=11)\n```\n\n\n\n这样一个完整的类型分配函数就完成了，让我们把整个注册函数实现（只改动注册函数同文件其他内容不变）\n\n\n\n```python\n\n# routers/User.py\n\n@RequestReslove.route(\"/api/register\", (Methods.POST, Methods.PUT),((), (ClassSource.JSON, '_user'), (), ()))\n\ndef user_register(self, _user: USER, sql: SQLModel.DataBaseConnection):\n    code = 200\n    msg = \"注册成功\"\n    if len(_user.username.strip()) == 0:\n        msg = \"请填写用户名\"\n        elif len(_user.password.strip()) == 0:\n            msg = \"请填写密码\"\n            elif len(_user.email.strip()) == 0:\n                msg = \"请填写邮箱\"\n                elif len(_user.phone.strip()) == 0:\n                    msg = \"请填写手机号\"\n                    elif _user.createTime == datetime.min:\n                        msg = \"请选择正确的时间\"\n\n                        if msg != \"注册成功\":\n                            code = 500\n                            else:\n                                _user.bind(sql)\n                                _user.save()\n                                return {\"code\": code, \"msg\": msg, \"data\": _user.userId}\n\n```\n\n\n\n可能又有疑问了，那如果我需要批量添加呢，这一个一个添加太费事儿了。接下就需要用到Scarf的Vector类型对数组形式，批量数据的形式的数据进行标注了，我们将接口改为支持批量获取的方式。\n\n```python\n# routers/User.py\n\n# 还是需要下划线的变量，毕竟要将整体数据进行操作\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector\n\n@RequestReslove.route(\"/api/register\", (Methods.POST, Methods.PUT),((), (ClassSource.JSON, '_users'), (), ()))\n\ndef user_register(self, _users: Vector(USER), sql: SQLModel.DataBaseConnection):\n    USER.bind(sql)\n    for item in _user:\n        item.save()\n        return {\"code\": 200, \"msg\": \"Add Success\", \"data\": None}\n\n```\n\n或者使用**bulk_create**，对实体对象插入\n\n```python\n\n# routers/User.py - bulk_create\n\n# 还是需要下划线的变量，毕竟要将整体数据进行操作\n\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector\n\n\n\n@RequestReslove.route(\"/api/register\", (Methods.POST, Methods.PUT),((), (ClassSource.JSON, '_users'), (), ()))\n\ndef user_register(self, _users: Vector(USER), sql: SQLModel.DataBaseConnection):\n\n    USER.bind(sql)\n\n    USER.bulk_create(_user)\n\n    return {\"code\": 200, \"msg\": \"Add Success\", \"data\": None}\n\n```\n\n再或者可以使用原生的**insert_many**,需要注意的是类型该变为**dict**\n\n```python\n# routers/User.py - insert_many\n\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector\n\n@RequestReslove.route(\"/api/register\", (Methods.POST, Methods.PUT),\n                      ((), (ClassSource.JSON, '_users'), (), ())\n                     )\ndef user_register(self, _users: Vector(dict), sql: SQLModel.DataBaseConnection(\"main\")):\n    print(_users)\n    USER.bind(sql)\n    USER.insert_many(_users).execute()\n    return {\"code\": 200, \"msg\": \"Add Success\", \"data\": None}\n\n```\n\n**关于文件**\n\n文件一般可以通过form_data进行参数传递，我们还是将注册接口变为单个注册，但需要新增个人照片的一个字段，我们称这个字段为icon。提前需要知道的是文件类型可以使用Scarf.Tip.FileDeliver类型进行替代。\n\n```python\n# models/User.py\n\nfrom peewee import *\nfrom Scarf.Tip import FileDeliver\nfrom datetime import datetime\n\ndef translate_str_to_datetime(date_str):\n    try:\n        return datetime.strptime(date_str, \"%Y-%m-%d %H:%M:%S\")\n    except:\n        return datetime.min\n\nclass USER(Model):\n    userId: int = IntegerField(null=False, primary_key=True)\n    createTime: translate_str_to_datetime = DateTimeField(null=False)\n    username: str = CharField(null=False, max_length=32)\n    password: str = CharField(null=False, max_length=32)\n    email: str = TextField(null=False)\n    phone: str = CharField(null=False, max_length=11)\n    icon: FileDeliver = TextField(null=False) # 新增icon字段\n```\n\n此时User.py需要做出以下改动\n\n```python\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector\n\nfrom models.User import USER\n\nimport hashlib, time\nfrom datetime import datetime\n\nclass Auth:\n   def __init__(self):\n       pass\n\n   @RequestReslove.route(\"/hello\")\n   def hello(self):\n       return \"hello world\"\n\n   @RequestReslove.route(\n       \"/api/login\",\n       (Methods.POST, Methods.HEAD),\n       ((), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (),())\n   \t)\n   def user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection):\n       user = USER(username=username, password=password)\n       user.bind(sql)\n       result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n       if result:\n           # 获取Token\n           md5_ = hashlib.md5()\n           md5_.update(str(result.userId).encode())\n           return {\"code\": 200, \"data\": md5_.hexdigest(), \"msg\": \"Login Success\"}\n       else:\n           return {\"code\": 500, \"data\": None, \"msg\": \"Login Fail\"}\n\n   @RequestReslove.route(\"/api/register\", (Methods.POST, Methods.PUT),\n                         ((), (ClassSource.JSON | ClassSource.FORM_DATA, '_user'), (), ())\n                         )\n   def user_register(self, _user: USER, sql: SQLModel.DataBaseConnection):\n       if not _user.icon.invaild():\n           _md5 = hashlib.md5()\n           filename = _user.icon.filename + str(time.time())\n           _md5.update(filename.encode())\n           # 生成不重名文件\n           filename = _md5.hexdigest() + _user.icon.ext_name\n           # 保存文件至指定目录\n            _user.icon.save(\"./static/icons/\" + filename)\n           _user.icon = \"http://localhost:8085/icons/\" + filename\n           _user.bind(sql)\n           _user.save()\n           return {\"code\": 200, \"msg\": \"Add Success\", \"data\": None}\n       else:\n           return {\"code\": 500, \"msg\": \"Photo File Error\", \"data\": None}\n```\n\n## **接口返回值**\n\n\n\n上面已经说明了接口参数的接收和使用，接下来就是接口的返回值了。返回值通过return将参数反射给Scarf。回到hello world的例子，那的确是一个最简单的返回值一个str。返回值的响应头(respone header)则为**Content-Type: text/plain**。第二种返回值方式可以像上面我们登录和注册接口的例子可以看出接口可以返回一个**dict**，以此应该大致能推断出返回值是一个**JSON**并且**Content-Type: application/json**，这两种方式基本上是遇到比较模板化的接口可以直接返回，但是如果我需要修改响应中的状态码或者增加自己的响应头该怎么办呢，那么这个时候就需要另一种灵活的方式，Scarf允许的返回值也可以是一个tuple,tuple最少需要三个元素，从前往后分别是**(状态码:int, 响应头内容: dict, 响应体: bytes, 状态描述: str(选填-若不填则通过当前状态码进行推断))**。就上面三个例子我们新增一个接口，路径为:/api/test/:choice,通过choice我们直接返回对应的内容看一下效果\n\n```python\n@RequestReslove.route(\"/api/test/:choice\", (Methods.GET,), ((), (), (), ('choice',)))\ndef test_result(self, choice: int):\n       if choice == 0:\n           return \"text\"\n       elif choice == 1:\n           return {\"code\": 200, \"data\": \"json\", \"msg\": \"success\"}\n       elif choice == 2:\n           return (200, {\"Content-Type\": \"application/octet-stream\"}, b\"{'code': 200, 'data': 'json', 'msg': 'success'}\")\n       else:\n       \t\treturn None # 如果返回None则为空响应体(Respone Body)返回值204\n```\n\n通过访问http://localhost:8085/api/test/0 | 1 | 2将会看到不同的返回值\n\n这些返回值可能还是不够用的，在遇到大型数据或者流数据时就会遇到些许麻烦，那么可以试试下面这种方式进行返回。我们新增一个获取文件接口\n\n```python\n@RequestReslove.route(\"/get/file\", (Methods.GET,))\n    def get_file(self):\n        fd = open(\"./test.exe\", \"rb+\")\n        file_size = os.path.getsize(\"./test.exe\")\n        yield bytes # 告知Scarf本次传输数据的类型，支持的有:str(text/plain) | dict(application/json) | bytes(application/octet-stream) | \"Custom type\"(直接更改Content-Type)\n        while file_size > 0:\n            yield fd.read(1024 if file_size > 1024 else file_size) # 每次读取1024B\n            file_size -= 1024\n        yield None # 发送结束\n        fd.close() # 关闭文件\n        print(\"send complate\")\n        yield None\n```\n\n通过上述例子我们可以对流式数据进行处理和发送，另外在最后一次发送后可进行一些销毁的操作。但是除了上述情况还会遇到一些问题，比如我从数据库查值但返回的是实体类，现在希望的是将实体类序列化为JSON给前端解析。那么就需要一个新的方式来处理,首先需要告知Scarf需要序列化的字段，改造一下USER类:\n\n```python\n# models/User.py\n\n@SQLModel.model_factory(Model)\nclass USER:\n    userId: int = IntegerField(null=False, primary_key=True)\n    createTime: translate_str_to_datetime = DateTimeField(null=False)\n    username: str = CharField(null=False, max_length=32)\n    password: str = CharField(null=False, max_length=32)\n    email: str = TextField(null=False)\n    phone: str = CharField(null=False, max_length=11)\n    icon: FileDeliver = TextField(null=False) # 新增icon字段\n```\n\n然后我们再新增一个接口通过用户名密码查询用户信息(get_user)的接口。\n\n```python\n# routers/User.py\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector\n\nfrom models.User import USER\n\nimport hashlib, time, os\nfrom datetime import datetime\n\nclass Auth:\n    def __init__(self):\n        pass\n\n    @RequestReslove.route(\"/hello\")\n    def hello(self):\n        return \"hello world\"\n\n    @RequestReslove.route(\n        \"/api/login\",\n        (Methods.POST, Methods.HEAD),\n        (\n            (), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (),\n            ())\n    )\n    def user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection):\n        user = USER(username=username, password=password)\n        user.bind(sql)\n        result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n        if result:\n            # 获取Token\n            md5_ = hashlib.md5()\n            md5_.update(str(result.userId).encode())\n            return {\"code\": 200, \"data\": md5_.hexdigest(), \"msg\": \"Login Success\"}\n        else:\n            return {\"code\": 500, \"data\": None, \"msg\": \"Login Fail\"}\n\n        @RequestReslove.route(\"/api/getuser\", (Methods.GET,), (('username', 'password'), (), (), ()))\n        def get_user(self, username: str, password: str, sql: SQLModel.DataBaseConnection):\n            # 通过用户名密码查询用户信息\n            USER.bind(sql)\n            return USER.select().where(USER.password == password and USER.password == password)\n\n        @RequestReslove.route(\"/api/register\", (Methods.POST, Methods.PUT),\n                              ((), (ClassSource.JSON | ClassSource.FORM_DATA, '_user'), (), ())\n                             )\n        def user_register(self, _user: USER, sql: SQLModel.DataBaseConnection):\n            if not _user.icon.invaild():\n                _md5 = hashlib.md5()\n                filename = _user.icon.filename + str(time.time())\n                _md5.update(filename.encode())\n                filename = _md5.hexdigest() + _user.icon.ext_name\n                _user.icon.save(\"./static/icons/\" + filename)\n                _user.icon = \"http://localhost:81/icons/\" + filename\n                _user.bind(sql)\n                _user.save()\n                return {\"code\": 200, \"msg\": \"Add Success\", \"data\": None}\n            else:\n                return {\"code\": 500, \"msg\": \"Photo File Error\", \"data\": None}\n\n            @RequestReslove.route(\"/api/test/:choice\", (Methods.GET,), ((), (), (), ('choice',)))\n            def test_result(self, choice: int):\n                if choice == 0:\n                    return \"text\"\n                elif choice == 1:\n                    return {\"code\": 200, \"data\": \"json\", \"msg\": \"success\"}\n                elif choice == 2:\n                    return (\n                        200, {\"Content-Type\": \"application/octet-stream\"}, b\"{'code': 200, 'data': 'json', 'msg': 'success'}\")\n                else:\n                    return None\n\n                @RequestReslove.route(\"/get/file\", (Methods.GET,))\n                def get_file(self):\n                    fd = open(\"./test.exe\", \"rb+\")\n                    file_size = os.path.getsize(\"./test.exe\")\n                    yield bytes\n                    while file_size > 0:\n                        yield fd.read(1024 if file_size > 1024 else file_size)\n                        file_size -= 1024\n                        yield None\n                        fd.read()\n                        print(\"send complate\")\n                        yield None\n```\n\n此时当我们访问 http://localhost:8085/api/getuser?username=admin&password=admin 通过实现的get_user函数我们可以直接观察到返回值即为USER类中的所有字段组成的JSON序列化字符串。但是这些字段有些是应该隐蔽或者不需要的，那我们可以在USER类上自己实现一个 **fields**指定序列化，而使用修饰器则是将所有字段进行返回。\n\n```python\n# models/User.py\n\nclass USER(Model):\n    __fields__ = ('userId', 'createTime', 'username', 'phone', 'email', 'icon')\n    userId: int = IntegerField(null=False, primary_key=True)\n    createTime: translate_str_to_datetime = DateTimeField(null=False)\n    username: str = CharField(null=False, max_length=32)\n    password: str = CharField(null=False, max_length=32)\n    email: str = TextField(null=False)\n    phone: str = CharField(null=False, max_length=11)\n    icon: FileDeliver = TextField(null=False)\n```\n\n\n\n返回值也可以是嵌套型，只要是Scarf支持的序列化方式就可以了\n\n```json\n\n{\"code\":200, \"data\":[USER,USER,USER], \"msg\": \"Success\"}\n// 序列化后\n{\"code\":200, \"data\":[{\n        \"userId\": 62,\n        \"createTime\": \"2021-12-01 18:27:15\",\n        \"username\": \"admin\",\n        \"phone\": \"12345678912\",\n        \"email\": \"test@email.com\",\n        \"icon\": null\n    },{\n        \"userId\": 62,\n        \"createTime\": \"2021-12-01 18:27:15\",\n        \"username\": \"admin\",\n        \"phone\": \"12345678912\",\n        \"email\": \"test@email.com\",\n        \"icon\": null\n    },{\n        \"userId\": 62,\n        \"createTime\": \"2021-12-01 18:27:15\",\n        \"username\": \"admin\",\n        \"phone\": \"12345678912\",\n        \"email\": \"test@email.com\",\n        \"icon\": null\n    }], \"msg\": \"Success\"}\n```\n\n\n\n最后一种返回值也可以是一个**异常(Exception),异常通常会被格式化错误字符并将返回值状态码变为500。**\n\n\n\n## **Cookie**\n\n现在我们需要再增加一个需求，在访问获取用户信息（get_user）接口之前需要知道用户是否已经登录过，如果没有登录则应该阻止用户访问获取用户信息接口。那么Cookie是一个不错的选择，在获取Cookie钱我们先了解两个重要的实例对象**HTTPRequest**和**HTTPResponse**,这两个实例前者是用来获取用户请求中的数据信息，而后者则是设置和分配响应中的数据信息。获取Cookie前得先对客户端设置Cookie，我们在登录接口先做一个例子,同样我们在登录路由实体函数的形参中直接加入**HTTPResponse**获取当前响应实例，在返回Cookie的同时记录当前活跃的用户的Cookie信息（可使用Redis）。\n\n```python\n# routers/User.py\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector\nfrom Scarf.Protocol.HTTP import HTTPResponse, HTTPRequest\n\nfrom models.User import USER\n\nimport hashlib, time, os\nfrom datetime import datetime\n\nclass Auth:\n    def __init__(self):\n        # 用户信息保存 token : username\n        self.__tokens = {}\n\n        @RequestReslove.route(\"/hello\")\n        def hello(self):\n            return \"hello world\"\n\n        @RequestReslove.route(\n            \"/api/login\",\n            (Methods.POST, Methods.HEAD),\n            (\n                (), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (),\n                ())\n        )\n        def user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection, res: HTTPResponse):\n            user = USER(username=username, password=password)\n            user.bind(sql)\n            result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n            if result:\n                # 获取Token\n                md5_ = hashlib.md5()\n                md5_.update(str(result.userId).encode())\n                res.cookies = ('token', md5_.hexdigest())\n                res.cookies = ('HttpOnly',)\n                res.cookies = ('Path', '/')\n                self.__tokens[md5_.hexdigest()] = username\n                return {\"code\": 200, \"data\": None, \"msg\": \"Login Success\"}\n            else:\n                return {\"code\": 500, \"data\": None, \"msg\": \"Login Fail\"}\n\n            @RequestReslove.route(\"/api/getuser\", (Methods.GET,), ((), (), (), ()))\n            def get_user(self, sql: SQLModel.DataBaseConnection, req: HTTPRequest):\n                username = self.__tokens.get(req.cookies.get(\"token\"))\n                if username:\n                    user = USER(useranem=username)\n                    user.bind(sql)\n                    return user.select().where(USER.username == username)\n                else:\n                    return (400, {\"Content-Type\": \"text/plain\"}, b\"User Not Login\")\n```\n\nCookie在HTTPRequest中的用法即HTTPRequest.cookies(dict)。\n\nCookie在HTTPResponse中的用法若直接打印(print)则显示序列化后的Cookie字符串，可以使用get_cookie_by_name(name,default=None)获取，若需要删除Cookie则可以使用del_cookie(name)，另外添加Cookie时需要一个两个元素或一个元素的元祖。\n\n现在通过Cookie查询后就不需要username和password了，这样也可以校验用户的状态和安全性的提升，但是这只能针对于单独的接口。在大部分场景下更希望能够通过全局的一种方式进行把控，只放开登录（user_login）接口的调用，限制其他接口需要核对Cookie后才能放行。\n\n\n\n## **拦截器和过滤器**\n\n\n\n针对于以上的问题，我们可以使用过滤器进行对接口的审查和进入对应路由实体函数前的修改。我们首先创建一个拦截器,并实现Cookie拦截。\n\n```python\n# routers/RequestProcessor.py\n\nfrom Scarf.Context.RequestReslove import FilterRegister\n\n# 需要继承于 FilterRegister\nclass RequestProcessor(FilterRegister):\n    def __init__(self):\n     \t# 父类初始化 参数1：是否实现请求拦截器，参数2：是否实现请求返回过滤器\n        super().__init__(True, False)\n\n    def enter_intercept(self, req:HTTPRequest,res:HTTPResponse ): # 若告知父类打开了请求拦截选项，该抽象方法需要实现，前两个参数固定分别是:HTTPRequest和HTTPResponse\n\t\tif req.path == \"/api/login\":  # 登录接口不做校验\n            return RequestsState.NEXT\n        elif req.cookies.get(\"token\"):  # 其他接口Cookie中是否有Token\n            return RequestsState.NEXT\n        else:\t# 否则拒绝服务\n            # return RequestsState.CLOSE\n            res.set_data((400, {\"Content-Type\": \"text/plain\"}, b\"User Not Login\"))\n            return RequestsState.PUSHNOW\n```\n\n另外还需要在 main.py入口文件中注册过滤器和拦截器\n\n```python\n# main.py\n\nfrom Scarf.Main import Scarf\nfrom routers.User import Auth\nfrom routers.RequestProcessor import RequestProcessor\n\nfrom models.SQLConnectionManager import SQLFactory\n\nserver = Scarf()\n\nserver.load_config_from_file(\"./application.yml\")\n\nserver.register_sql_model(\"main\", SQLFactory)\n\n# 注册拦截器和过滤器\nserver.register_hook(RequestProcessor())\n\nserver.scan_module(Auth())\n\nserver.start_server()\n```\n\n通过上面的代码，可以看到按照特定规则进行审查，当然也看到了return的一些返回值，**RequestsState可以理解为枚举，NEXT-进入下一个拦截器，PUSHNOW-立刻发送前设置的Reponse数据，CLOSE-关闭与客户端的连接(断开式拒绝服务)**但是有些接口的返回值比如字典(dict)都将划归为JSON，那么我们可以对接口做以下改动，拿用户登录(user_login)和用户信息查询(get_user)两个接口为例。因为返回值固定是{\"code\": 200, \"msg\": \"msg\", \"data\": None}若路由实体函数返回值是一个字典(dict)或None则直接将数据放入data字段中：\n\n\n\n```python\n# routers/User.py\n\n@RequestReslove.route(\n    \"/api/login\",\n    (Methods.POST, Methods.HEAD),\n    ((), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (), ())\n)\ndef user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection(\"main\"), res: HTTPResponse):\n    user = USER(username=username, password=password)\n    user.bind(sql)\n    result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n    if result:\n        # 获取Token\n        md5_ = hashlib.md5()\n        md5_.update(str(result.userId).encode())\n        res.cookies = ('token', md5_.hexdigest())\n        res.cookies = ('HttpOnly',)\n        res.cookies = ('Path', '/')\n        self.__tokens[md5_.hexdigest()] = username\n        return None\n    else:\n        return None\n\n    @RequestReslove.route(\"/api/getuser\", (Methods.GET,), ((), (), (), ()))\n    def get_user(self, sql: SQLModel.DataBaseConnection, req: HTTPRequest):\n        username = self.__tokens.get(req.cookies.get(\"token\"))\n        if username:\n            user = USER(useranem=username)\n            user.bind(sql)\n            return user.select().where(USER.username == username)\n        else:\n            # return (400, {\"Content-Type\": \"text/plain\"}, b\"User Not Login\")\n            return (400, {}, \"User Not Login\") # 按照正常的返回规范,tuple的第三个参数的类型应该是bytes，但是经过过滤器修改后可自定义返回类型\n```\n\n```python\n# routers/RequestProcessor.py\n\nfrom Scarf.Context.RequestReslove import FilterRegister\nfrom Scarf.Protocol.HTTP import HTTPRequest, HTTPResponse\nfrom Scarf.Tip import RequestsState, SQLModel\nfrom peewee import Model\n\nimport json\n\nclass RequestProcessor(FilterRegister):\n    def __init__(self):\n        super().__init__(True, True)\n\n        def enter_intercept(self, req: HTTPRequest, res: HTTPResponse, sql: SQLModel.DataBaseConnection(\"main2\")):\n            if req.path == \"/api/login\":  # 登录接口不做校验\n                return RequestsState.NEXT\n\n            elif req.cookies.get(\"token\"):  # 其他接口Cookie中是否有Token\n                return RequestsState.NEXT\n            else:\n                # return RequestsState.CLOSE\n                res.set_data((400, {\"Content-Type\": \"text/plain\"}, b\"User Not Login\"))\n                return RequestsState.PUSHNOW\n\n            def outer_filter(self, req: HTTPRequest, res: HTTPResponse):\n                result = res.get_data()\n                data = {\"code\": 200, \"msg\": \"Success\", \"data\": None}\n                if result is None:\n                    res.set_data(data)\n                    elif isinstance(result, dict) or isinstance(result, Model) or isinstance(result, list):\n                        data[\"data\"] = result\n                        res.set_data(data)\n                        elif isinstance(result, Exception):\n                            data[\"code\"] = 500\n                            data[\"msg\"] = \"Fail\"\n                            data[\"data\"] = str(result)\n                            res.set_data(data)\n                            elif isinstance(result, tuple):\n                                result = list(result)\n                                data[\"code\"] = result[0]\n                                result[0] = 200\n                                result[1][\"Content-Type\"] = \"application/json\"\n                                if len(result) > 3:\n                                    data[\"msg\"] = result[3]\n                                    data[\"data\"] = result[2]\n                                    result[2] = json.dumps(data).encode()\n                                    res.set_data(tuple(result))\n                                    return RequestsState.NEXT\n```\n\n\n\n此时所有的请求都可以进行过滤和拦截处理，接下来我们光有接口可不行还需要提供静态文件的服务和一些配置上的其他参数。\n\n\n\n## **静态文件服务**\n\n\n\n静态文件大部分都是配置性的，我们再回到application.yml，我们的静态文件应存放在一个专门的文件夹，就以此项目为例，static文件夹存放各种静态文件。首先我们需要配置静态文件夹的位置在哪里\n\n```yml\nserver:\n release: false\n ports:\n   http: 8085\n static:\n   visitpath: ./static # 静态文件路径\n   entryfile: index.html # 文件夹默认入口文件\n```\n\n在我们之前注册接口中有一个图片其本地路径为\\Project Flodder\\static\\icons\\a86711817f33fb16a701a74d925965fc.jpg。我们则可以直接访问 http://localhost:8085/icons/a86711817f33fb16a701a74d925965fc.jpg 但是这样访问的结果为User Not Login,显然这不是我们想要的结果，对于接口的访问我们应予以拦截，但对于静态文件甚至后面的WebSocket的请求我们则应予以放行，则需要修改拦截器和过滤器\n\n```python\n# routers/RequestProcessor.py\n\nfrom Scarf.Context.RequestReslove import FilterRegister\nfrom Scarf.Protocol.HTTP import HTTPRequest, HTTPResponse\nfrom Scarf.Tip import RequestsState, SQLModel\nfrom peewee import Model\n\nimport json,os\n\nclass RequestProcessor(FilterRegister):\n    def __init__(self):\n        super().__init__(True, True)\n\n        def enter_intercept(self, req: HTTPRequest, res: HTTPResponse, sql: SQLModel.DataBaseConnection(\"main2\")):\n            if req.path == \"/api/login\" or req.is_file or req.is_not_found:  # 登录接口，静态文件，404，不做校验\n                return RequestsState.NEXT\n            elif req.cookies.get(\"token\"):  # 其他接口Cookie中是否有Token\n                return RequestsState.NEXT\n            else:\n                # return RequestsState.CLOSE\n                res.set_data((400, {\"Content-Type\": \"text/plain\"}, b\"User Not Login\"))\n                return RequestsState.PUSHNOW\n\n            def outer_filter(self, req: HTTPRequest, res: HTTPResponse):\n                result = res.get_data()\n                data = {\"code\": 200, \"msg\": \"Success\", \"data\": None}\n                if req.is_file or req.is_not_found and res.code != 200 and res.code != 500 and res.code != 400:\n                    # 当返回的是文件类型或者状态码404以及200，500，400不做过滤\n                    return RequestsState.NEXT\n                elif result is None:\n                    res.set_data(data)\n                    elif isinstance(result, dict) or isinstance(result, Model) or isinstance(result, list):\n                        data[\"data\"] = result\n                        res.set_data(data)\n                        elif isinstance(result, Exception):\n                            data[\"code\"] = 500\n                            data[\"msg\"] = \"Fail\"\n                            data[\"data\"] = str(result)\n                            res.set_data(data)\n                            elif isinstance(result, tuple):\n                                result = list(result)\n                                data[\"code\"] = result[0]\n                                result[0] = 200\n                                result[1][\"Content-Type\"] = \"application/json\"\n                                if len(result) > 3:\n                                    data[\"msg\"] = result[3]\n                                    data[\"data\"] = result[2]\n                                    result[2] = json.dumps(data).encode()\n                                    res.set_data(tuple(result))\n                                    return RequestsState.NEXT\n```\n\n现在再次访问我们就可以看到图片了。而对于application.yml中static下entryfile则是当访问一个文件夹路径时主动寻找当前文件夹下的默认文件，我们在static目录下新建一个文件夹home，然后在home中新增一个index.html文件，并编辑内容\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Title</title>\n    </head>\n    <body>\n        <h1>Hello World</h1>\n    </body>\n</html>\n```\n\n此时当我们访问 http://localhost:8085/home 时则可直接访问index.html文件。\n我们现在设置多个项目，我们新建一个home文件夹，在文件夹中放入一个[Vue](https://cn.vuejs.org/index.html \"Vue\")经过打包的项目包。项目包结构如下：\n```\n|-- home\n    |-- favicon.ico\n    |-- index.html\n    |-- manifest.json\n    |-- precache-manifest.b5ea767956a04e1a46fbdab2a8eca0dc.js\n    |-- robots.txt\n    |-- service-worker.js\n    |-- css\n    |   |-- app.ed2a99d6.css\n    |   |-- chunk-vendors.5cbbb097.css\n    |-- fonts\n    |   |-- ionicons.143146fa.woff2\n    |   |-- ionicons.99ac3308.woff\n    |   |-- ionicons.d535a25a.ttf\n    |-- img\n    |   |-- ionicons.a2c4a261.svg\n    |   |-- icons\n    |       |-- android-chrome-192x192.png\n    |       |-- android-chrome-512x512.png\n    |       |-- android-chrome-maskable-192x192.png\n    |       |-- android-chrome-maskable-512x512.png\n    |       |-- apple-touch-icon-120x120.png\n    |       |-- apple-touch-icon-152x152.png\n    |       |-- apple-touch-icon-180x180.png\n    |       |-- apple-touch-icon-60x60.png\n    |       |-- apple-touch-icon-76x76.png\n    |       |-- apple-touch-icon.png\n    |       |-- favicon-16x16.png\n    |       |-- favicon-32x32.png\n    |       |-- msapplication-icon-144x144.png\n    |       |-- mstile-150x150.png\n    |       |-- safari-pinned-tab.svg\n    |-- js\n        |-- app.7a63ada9.js\n        |-- app.7a63ada9.js.map\n        |-- chunk-vendors.b1c772aa.js\n        |-- chunk-vendors.b1c772aa.js.map\n```\n当前项目包设置的路由模式为history模式，我们可以使用路由映射将路径定向到home文件夹，仅需在yml文件中进行配置即可实现:\n```yml\nserver:\n release: false\n ports:\n   http: 8085\n static:\n   visitpath: ./static # 静态文件路径\n   entryfile: index.html # 文件夹默认入口文件\n   map: # 路由映射配置\n     - {router: /home/*, path: /home/index.html} # 当访问/home时服务会自动将请求定向到/home/index.html(若没有任何匹配的路径)\n     - {router: /test/*, path: /main/*} # 当访问/test/*时所有的文件将会被映射到/home的子目录下\n```\n## 事件\n\n现在我们将对Cookie做更进一步的修改，我们现在不仅仅是要验证请求是否含有Cookie还要对Cookie进行校验，查看来自客户端的Cookie是否是数据库或者曾经登录过的用户。我们可能直接可以想到的是，在请求拦截器中嵌入Cookie拦截。但是这样，我们需要重新编码一个查询Cookie的方法，有时在特定情况下可能还需要调用别的模块的接口，那我们就可以使用事件来替代我们完成这个事情。\n我们的流程应该是这样：当请求到达拦截器时，将查询请求递交给Auth模块进行处理，Auth模块应现在本地查询是否用户曾经登录，若没有记录则再查询数据库，然后再在拦截器中对Cookie验证的返回值进行验证。\n我们首先需要注册事件：在用户路由模块中我们编写一个用户Cookie查询以及事件的注册。当需要注册一个事件时应该先在事件接收模块中编写好对应的方法\n```python\n# routers/User.py\n\n# 注册事件需要使用修饰函数\n# @RequestReslove.event(\"event_name\")\n\n#该修饰函数使用两种方式进行注册事件\n#直接在类的成员函数上直接\nclass Auth:\n\t@RequestReslove.event(\"verfity_cookie\")\n    def verfity(self,cookie,sql):\n    \tUSER.bind(sql)\n        return self.__tokens.get(cookie) or USER.select().where(USER.token == cookie).count() > 0\n\n#======================================================= or =======================================================\n\n#直接对类进行修饰\n@RequestReslove.event(\"verfity_cookie\", \"verfity\", modules=True)\nclass Auth:\n\tdef verfity(self, cookie, sql)\n\t\tUSER.bind(sql)\n        return self.__tokens.get(cookie) or USER.select().where(USER.token == cookie).count() > 0\n\n#如果对函数进行修饰，那么RequestReslove.event的参数即为一个事件名称\n#如果对类进行修饰，那么Request.event的参数应该是偶数个，奇数参数为事件名称，偶数为事件名称对应类中所要接受的回调函数。另外当对类进行修饰时可以使用modules参数(default: False)，当modules=True时则事件的名称前还会加上模块的__module__。\n#后面的例子我们使用第二种事件注册的方式\n```\n另外我们还需要在main.py中通知Scarf哪些模块被注册事件\n```python\n# main.py\nfrom Scarf.Main import Scarf\nfrom routers.User import Auth\nfrom routers.RequestProcessor import RequestProcessor\n\n\nfrom models.SQLConnectionManager import SQLFactory\n\nif __name__ == \"__main__\":\n    server = Scarf()\n\n    auth = Auth()\n\n    server.load_config_from_file(\"./application.yml\")\n\n    server.register_sql_model(\"main\", SQLFactory)\n    server.register_hook(RequestProcessor())\n\t# 通知Scarf事件完成注册的模块\n    server.register_events(auth)\n    server.scan_module(auth)\n\n    server.start_server()\n```\n现在已经完成了事件的注册，接下来只要在需要的地方进行事件触发即可。\n```python\n# routers/RequestProcessor.py\n\n# 若模块或类被Scarf在入口文件中注册过，则默认会注入_emit(\"event_name\", *args, **kwargs)函数，调用该函数即可触发对应的事件回调并通过_emit返回回调的返回值。\nclass RequestProcessor(FilterRegister):\n    def enter_intercept(self, req: HTTPRequest, res: HTTPResponse, sql: SQLModel.DataBaseConnection(\"main\")):\n        if req.path == \"/api/login\" or req.path == \"/api/upload\" or req.path == \"/get/file\" or req.is_file or req.is_not_found:\n        \t# 登录接口不做校验\n            return RequestsState.NEXT\n        elif req.cookies.get(\"token\") and self._emit(\"verfity_cookie\", req.cookies.get(\"token\"), sql):\n        \t# 其他接口Cookie中是否有Token,并且验证Cookie中的token是否有效\n            return RequestsState.NEXT\n        else:\n            # return RequestsState.CLOSE\n            res.set_data((400, {\"Content-Type\": \"text/plain\"}, b\"User Not Login\"))\n            return RequestsState.PUSHNOW\n```\n\n在_emit触发事件的事件名称参数中，事件的匹配规则若全局事件名没有冲突则可以直接使用事件名，若事件名有重复则可以使用之前提到的modules=Treu的方式，使用\"routers.User.Auth.verfity_cookie\"\n\n我们再举一个例子，我们在接口即将结束的时候对其进行记录，并打印输出。\n假设再在Auth模块中添加一个日志记录事件，对每一个即将接口时记录接口的请求路径和响应结果并打印输出。\n\n```python\n# routers/User.py\n\n# 添加日志日志接收事件\n@RequestReslove.event(\"verfity_cookie\", \"verfity\", \"log_record\", \"main_log\", modules=True)\nclass Auth:\n    def main_log(self, path, code, plain):\n        print(\"%s %i %s\" % (path, code, plain))\n\n    def verfity(self, cookie, sql):\n        print(cookie)\n        USER.bind(sql)\n        return self.__tokens.get(cookie) or USER.select().where(USER.token == cookie).count() > 0\n```\n在拦截器和过滤器中加入事件触发\n```python\nclass RequestProcessor(FilterRegister):\n    def __init__(self):\n        super().__init__(True, True)\n\n    def enter_intercept(self, req: HTTPRequest, res: HTTPResponse, sql: SQLModel.DataBaseConnection(\"main\")):\n        if req.path == \"/api/login\" or req.path == \"/api/upload\" or req.path == \"/get/file\" or req.is_file or req.is_not_found:  # 登录接口不做校验\n            return RequestsState.NEXT\n        elif req.cookies.get(\"token\") and self._emit(\"routers.User.Auth.verfity_cookie\", req.cookies.get(\"token\"), sql):  # 其他接口Cookie中是否有Token\n            return RequestsState.NEXT\n        else:\n            # return RequestsState.CLOSE\n            res.set_data((400, {\"Content-Type\": \"text/plain\"}, b\"User Not Login\"))\n            self._emit(\"routers.User.Auth.log_record\", req.path, 400, \"User Not Login\")\n            return RequestsState.PUSHNOW\n\n    def outer_filter(self, req: HTTPRequest, res: HTTPResponse):\n        result = res.get_data()\n        data = {\"code\": 200, \"msg\": \"Success\", \"data\": None}\n        if req.is_file or req.is_not_found:\n            self._emit(\"routers.User.Auth.log_record\", req.path, res.code, data[\"msg\"])\n            return RequestsState.NEXT\n        elif result is None:\n            res.set_data(data)\n        elif isinstance(result, dict) or isinstance(result, Model) or isinstance(result, list) or isinstance(result,\n                                                                                                             ModelSelect):\n            data[\"data\"] = result\n            res.set_data(data)\n        elif isinstance(result, Exception):\n            data[\"code\"] = 500\n            data[\"msg\"] = \"Server Error\"\n            data[\"data\"] = str(result)\n            res.set_data(data)\n        elif isinstance(result, tuple):\n            result = list(result)\n            data[\"code\"] = result[0]\n            result[0] = 200\n            result[1][\"Content-Type\"] = \"application/json\"\n            if len(result) > 3:\n                data[\"msg\"] = result[3]\n            data[\"data\"] = result[2]\n            result[2] = json.dumps(data).encode()\n            res.set_data(tuple(result))\n        # 请求即将结束时触发事件\n        self._emit(\"routers.User.Auth.log_record\", req.path, data[\"code\"], data[\"msg\"])\n        return RequestsState.NEXT\n```\n此时当请求处理完成时可在控制台中即可观察到打印。\n\n## 模块初始化\n\n有的时候我们需要在模块被载入前提前做一些事情，比如查询提前将一些非常高频率访问的静态数据提前放在内存中，待到用户访问时将这些数据返回，假设以我们目前的项目为例，在每次登录前将所有用户的Cookie信息载入到内存中，这样在访问需要Cookie鉴权的一些接口就不再需要每次都查询一遍数据库这样就可以减轻对数据库的负担并提高响应速度。首先我们需要了解的是项目模块的局部配置，Scarf在初始化时会检查目录下是否有config文件夹，该文件夹中存放的是所有配置文件的位置，每一个模块对应一个自己的配置文件(__module__ + \".\" + __name__ 和 事件名一样),因此我们添加一个文件routers.User.Auth.yml。配置可以使用yml文件或json文件进行配置，其文件内容如下(以yml文件为例)：\n```yml\ninit_handle: _init # 模块的初始化入口函数\n# config/routers.User.Auth.yml\nlog_format: '%(asctime)s - $filename[line:%(lineno)d | %(funcName)s] - %(levelname)s: %(message)s' # 日志翻译格式化方式文本(参见 logging)\nconfig: # 模块所使用的自定义配置\n    module_name: Auth\n```\n我们现在再实现入口函数的函数，并完成在模块初始化时查询到所有用户Cookie的获取。\n```python\n# routers/User.py\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector, LogHandle\n\nclass Auth:\n\tdef __init__(self):\n        # 用户信息保存 token : username\n        self.__tokens = {}\n        # 模块日志\n        self.__logger = None\n        # Scarf核心日志\n        self.__log_server = None\n\n    def _init(self, sql: SQLModel.DataBaseConnection, log: LogHandle(\"routers.User.Auth\"),\n              log_server: LogHandle(\"WebServer\"), config: dict):\n        print(config)\n        try:\n            USER.bind(sql)\n            for item in USER.select().where(USER.token.is_null(False)):\n                self.__tokens[item.token] = item.username\n            log.info(\"Auth Module Init Success\")\n        except Exception as e:\n            log.info(\"Auth Module Init Fail ,Error: %s\" % (str(e)))\n        finally:\n            self.__logger = log\n            self.__log_server = log_server\n            log.info(\"Auth Module Init Complate\")\n```\n当Scarf读取到该配置时，通过init_handle确定了模块入口的位置，并且在扫描模块后就会调用初始化函数，通过初始化函数的形参类型，注入相对应的实参，完成模块的初始化。其中的参数sql将不再解释见上文。LogHandle(\"module_name\")这中类型标注将通过modulename获取到指定的日志对象，获取的方式和事件触发的方式类似，而除此之外还有\"WebServer\"这种方式是用以获取webserver核心日志所使用。config:dict则是获取在配置文件中的config参数，是对应模块的自定义参数。**日志对象**目前可以使用以下函数：\n```python\nimport logging\n# 调试 - application为release时忽略\nlogger.debug - logging.debug\n# 普通\nlogger.info - logging.info\n# 警告\nlogger.warn - logging.warn\n# 严重警告\nlogger.critical - logging.critical\n# 出错\nlogger.error - logging.error\n\ndef log_callback(record: logging.LogRecord):\n\tpass\n\n# 注册日志回调\nlogger.add_handle(log_callback)\n```\n我们还可以对于一些全局模块做出配置,例如假设很多接口需要依赖到Core模块，我们也可以对其在Scarf入口中进行全局注册:\n```python\n# main.py\nfrom Scarf.Main import Scarf\nfrom routers.User import Auth\nfrom routers.RequestProcessor import RequestProcessor\n\n\nfrom models.SQLConnectionManager import SQLFactory\n\nclass Core:\n    def __init__(self):\n        pass\n\nif __name__ == \"__main__\":\n    server = Scarf()\n\n    auth = Auth()\n\n    server.load_config_from_file(\"./application.yml\")\n\n    # Core是全局需要依赖的模块\n    server.register_global(\"Core\", Core())\n\n    server.register_sql_model(\"main\", SQLFactory)\n    server.register_hook(RequestProcessor())\n\n    server.register_events(auth)\n    server.scan_module(auth)\n\n    server.start_server()\n```\n此时我们在User.Auth中尝试导入：\n```python\n# routers/User.py\n\nclass Auth:\n\t    def __init__(self):\n        # 用户信息保存 token : username\n        self.__tokens = {}\n        # 模块日志\n        self.__logger = None\n        # Scarf核心日志\n        self.__log_server = None\n\n    def _init(self, sql: SQLModel.DataBaseConnection, log: LogHandle(\"routers.User.Auth\"),\n              log_server: LogHandle(\"WebServer\"), core: str(\"Core\"), config: dict):\n \t\t# 当然你也可以使用: core: Core\n        print(config)\n        print(core)\n        try:\n            USER.bind(sql)\n            for item in USER.select().where(USER.token.is_null(False)):\n                self.__tokens[item.token] = item.username\n            log.info(\"Auth Module Init Success\")\n        except Exception as e:\n            log.info(\"Auth Module Init Fail ,Error: %s\" % (str(e)))\n        finally:\n            self.__logger = log\n            self.__log_server = log_server\n            log.info(\"Auth Module Init Complate\")\n```\n\n## 定时任务和异步任务\n大部分情况下Cookie不可能永久保存，当达到某个周期时，我们需要删除一些过期的Cookie，使用户恢复未登录状态重新登录或鉴权；这时我们就需要一个东西去在一个周期内管理这些任务，当然我们还需要改造一下,添加一个存放Cookie时间的变量用以记录用户Cookie的失效时间。定时任务的添加方法如下：\n```python\n#routers/User.py\n\n#我们需要使用一个修饰器，RequestReslove.timer(interval, times=-1, user_arg=None)\n# 其中interval是执行周期（单位ms），times为执行次数,默认值为-1(永久执行)，user_arg:自定义参数(默认:None)\n# 被修饰的函数中emit_time是定时器被触发的当前时间，以及自定义参数，返回值是一个Bool，True则是继续下次定时器任务，否则终止。\n# 我们需要设置一下Cookie的过期时间为30分钟\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector, LogHandle, async_taker\nfrom Scarf.Protocol.HTTP import HTTPResponse, HTTPRequest, FileDeliver\n\nimport time\n\nclass Auth:\n\tdef __init__(self):\n    \t# 用户信息保存 token : username\n        self.__tokens = {}\n        # 用户Cookie有效时间保存\n        self.__vaild_cookie = {}\n        # 模块日志\n        self.__logger = None\n        # Scarf核心日志\n        self.__log_server = None\n\n   def _init(self, sql: SQLModel.DataBaseConnection, log: LogHandle(\"routers.User.Auth\"),\n        log_server: LogHandle(\"WebServer\"), config: dict):\n        print(config)\n        try:\n            USER.bind(sql)\n            for item in USER.select().where(USER.token.is_null(False)):\n                self.__tokens[item.token] = item.username\n                # 添加Cookie失效时间，并设置失效时间为30分钟\n                self.__vaild_cookie[item.token] = time.time() * 1000 + 30 * 60 * 1000\n            log.info(\"Auth Module Init Success\")\n        except Exception as e:\n            log.info(\"Auth Module Init Fail ,Error: %s\" % (str(e)))\n        finally:\n            self.__logger = log\n            self.__log_server = log_server\n            log.info(\"Auth Module Init Complate\")\n\n    @RequestReslove.route(\n        \"/api/login\",\n        (Methods.POST, Methods.HEAD),\n        (\n                (), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (),\n                ())\n    )\n    def user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection(\"main\"), res: HTTPResponse):\n        user = USER(username=username, password=password)\n        user.bind(sql)\n        result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n        if result:\n            # 获取Token\n            md5_ = hashlib.md5()\n            md5_.update(str(result.userId).encode())\n            res.cookies = ('token', md5_.hexdigest())\n            res.cookies = ('HttpOnly',)\n            res.cookies = ('Path', '/')\n            user.token = md5_.hexdigest()\n            user.update({USER.token: user.token}).where(USER.userId == result.userId).execute()\n            self.__tokens[user.token] = username\n            # 登录接口同理\n            self.__vaild_cookie[user.token] = time.time() * 1000 + 30 * 60 * 1000\n            return None\n        else:\n            return (500, {}, \"Username or password error\", \"Login Error\")\n\n    @RequestReslove.timer(1000, times=-1, user_arg=None)\n    def check_cookie(self, emit_time, user_arg):\n    \tfor item in self.__vaild_cookie.copy().items():\n            k, v = item\n            # 超时用户注销登录\n            if v <= emit_time:\n            \tself.__logger.info(\"%s need relogin\" % (self.__tokens[k],))\n                del self.__tokens[k]\n                del self.__vaild_cookie[k]\n        return True\n```\n目前我们已经将本地的Cookie在规定周期内进行了规整，若我们在完成本地更新的同时可能还需要通过HTTP去通知其他服务器Cookie的更新，但是HTTP的请求算得上是比较耗时的，我们可以让这些请求在后台执行，不需要等待其完成，那么我们可以使用Scarf的异步任务，我们需要通过模块初始化函数被调用时引入异步任务控制器，实现如下：\n```python\n\n# 其中async_taker为异步任务调度过程\n# @parma:fn_callback 需要异步调用的函数\n# @param:*args 调用时所需要的自定义参数\n# async_taker(fn_callback, *args)\n\nfrom Scarf.Context.RequestReslove import RequestReslove\nfrom Scarf.Tip import Methods, ClassSource, SQLModel, Vector, LogHandle, async_taker\nfrom Scarf.Protocol.HTTP import HTTPResponse, HTTPRequest, FileDeliver\n\n# 第三方库requests\nimport time, requests\n\nclass Auth:\n\tdef __init__(self):\n    \t# 用户信息保存 token : username\n        self.__tokens = {}\n        # 用户Cookie有效时间保存\n        self.__vaild_cookie = {}\n        # 模块日志\n        self.__logger = None\n        # Scarf核心日志\n        self.__log_server = None\n        # Scarf异步任务调度过程\n        self.__async_taker = None\n\n   def _init(self, sql: SQLModel.DataBaseConnection,async_controller: async_taker, log: LogHandle(\"routers.User.Auth\"),\n        log_server: LogHandle(\"WebServer\"), config: dict):\n        print(config)\n        try:\n            USER.bind(sql)\n            for item in USER.select().where(USER.token.is_null(False)):\n                self.__tokens[item.token] = item.username\n                # 添加Cookie失效时间，并设置失效时间为30分钟\n                self.__vaild_cookie[item.token] = time.time() * 1000 + 30 * 60 * 1000\n            log.info(\"Auth Module Init Success\")\n        except Exception as e:\n            log.info(\"Auth Module Init Fail ,Error: %s\" % (str(e)))\n        finally:\n            self.__logger = log\n            self.__log_server = log_server\n            # 获取异步任务调度过程\n            self.__async_taker = async_taker\n            log.info(\"Auth Module Init Complate\")\n\n    @RequestReslove.route(\n        \"/api/login\",\n        (Methods.POST, Methods.HEAD),\n        (\n                (), (ClassSource.FORM_DATA | ClassSource.FORM_URLENCODE | ClassSource.JSON, 'username', 'password'), (),\n                ())\n    )\n    def user_login(self, username: str, password: str, sql: SQLModel.DataBaseConnection(\"main\"), res: HTTPResponse):\n        user = USER(username=username, password=password)\n        user.bind(sql)\n        result = user.get_or_none(USER.username == user.username and USER.password == user.password)\n        if result:\n            # 获取Token\n            md5_ = hashlib.md5()\n            md5_.update(str(result.userId).encode())\n            res.cookies = ('token', md5_.hexdigest())\n            res.cookies = ('HttpOnly',)\n            res.cookies = ('Path', '/')\n            user.token = md5_.hexdigest()\n            user.update({USER.token: user.token}).where(USER.userId == result.userId).execute()\n            self.__tokens[user.token] = username\n            # 登录接口同理\n            self.__vaild_cookie[user.token] = time.time() * 1000 + 30 * 60 * 1000\n            return None\n        else:\n            return (500, {}, \"Username or password error\", \"Login Error\")\n\n    def notify_other_server(self, token):\n    \trequests.post(url,token)... # 耗时操作\n\n    @RequestReslove.timer(1000, times=-1, user_arg=None)\n    def check_cookie(self, emit_time, user_arg):\n    \tfor item in self.__vaild_cookie.copy().items():\n            k, v = item\n            # 超时用户注销登录\n            if v <= emit_time:\n            \tself.__logger.info(\"%s need relogin\" % (self.__tokens[k],))\n                # 若有用户Cookie过期调用notify_other_server\n                if self.__async_taker:\n                    self.__async_taker(self.notify_other_server, self.__tokens[k])\n                del self.__tokens[k]\n                del self.__vaild_cookie[k]\n        return True\n```\n## 配置文件\n```yml\nserver:\n release: false # 服务是否是生产环境\n workers: # 线程池配置，若不配置默认会通过CPU核心数量自适配\n \tmin: 3 # 线程池最小线程数\n    max: 6 # 线程池最大线程数\n    max_work_task: 10 # 线程池线程任务队列最大长度\n    single: False # 关闭线程池启用单线程\n ports: # 端口\n   http: 80 # HTTP 端口\n   https: 443 # HTTPS 端口\n ssl_options: # 若配置了https，则需要配置ssl证书等信息\n   crt: ./ssl/server.crt # 根证书路径\n   key: ./ssl/server.key # 根证书私钥位置\n   pwd: '123456' # 证书密码\n   ssl_handshake_timeout: 15 # ssl握手限时\n keep_alive: # HTTP保持长连接配置(以下若无配置则使用下列值作为默认值)\n \thttp_handshake_timeout: 15 # HTTP请求握手限制时间\n    http_data_readtimeout: 3 # HTTP请求体数据读取单位读取限制时间\n    alive_timeout: 3 # HTTP允许存活时间\n static: # 静态文件服务配置\n   visitpath: ./static # 静态文件服务文件夹位置\n   entryfile: index.html # 入口文件或默认访问搜寻文件名\n   map: # 文件映射\n     - {router: /main/*, path: /home/} # router为访问路径，path为本地物理路径\n     - {router: /test/*, path: /test/index.html}\n webcached: # 静态资源缓存策略\n \trange_size: 3145728 # 若客户端要求以bytes访问，那么该参数表示每次获取的字节数（默认:3MB）\n    expires: 0 # Cache-Control:max-age\n    exter_name: # 支持缓存的文件扩展名\n    \t- .html\n    \t- .css\n    \t- .js\n    \t- .jpeg\n    \t- .png\n gzip: # 支持gzip压缩的文件扩展名\n \t- .html\n    - .css\n    - .js\n cros: # 配置跨域按照顺序[Access-Control-Allow-Origin, Access-Control-Allow-Headers, Access-Control-Max-Age, Access-Control-Allow-Credentials]\n \t - * # Access-Control-Allow-Origin\n \t - Content-Type, Token # Access-Control-Allow-Headers\n \t - 3600 # Access-Control-Max-Age\n \t - true # Access-Control-Allow-Credentials\n http2: # http2配置项\n   enable: true # 是否启用http2\n   settings: # http2配置 不填写则使用以下默认值\n     init_window_size: 65536\n     header_size: 4096\n     allow_push: 0\n     max_stream: 100\n     max_frame_size: 16384\n     header_list_size: None\ndatasource:\n  - { name: main,host: 127.0.0.1, port: 3306, user: root, password: fuqian199611,max_connections: 10, database: networkbridge, autoconnect: false, autocommit: 1 }\n```\n\n# 扩展篇\n## WebSockets\n\nwebsocket和路由一样，需要使用一个新的修饰器**@RequestReslove.websocket**。必须要实现三个事件回调函数。\n```python\n\nfrom Scarf.Tip import WebSocketHOOK\n\n\"\"\"\n  :param path: 访问\n  :param hook: 事件回调类型\n  * 所有的数据库连接参数都需要放在最后一个形参\n\"\"\"\n#需要强制实现\n@RequestReslove.websocket(\"/api/ws\", WebSocketHOOK.HANDSHAKE)\ndef on_handshake(req: HTTPRequest, ws: WebSocket, sql: SQLModel.DataBaseConnection(\"main\")):\n\t\"\"\"\n     当有请求正在尝试升级协议时触发该事件\n     :param req: 升级到WebSocket的HTTP请求\n     :param ws: WebSocket客户端\n     :param sql: SQL Connection 若对数据库有依赖可使用此参数（非固定参数，此参数可删除）\n     :return Bool: True则是允许升级否则拒绝服务\n    \"\"\"\n\tws.send(\"Hello World\")\n    ws.user_arg = random.randint(0,1000)\n    ws.ping()\n    return True\n\n#需要强制实现\n@RequestReslove.websocket(\"/api/ws\", WebSocketHOOK.MESSAGE)\ndef on_message(ws: WebSocket, data: bytes|str, fin:int, sql: SQLModel.DataBaseConnection(\"main\")):\n\t\"\"\"\n     当有接收消息时触发该事件\n     :param ws: WebSocket客户端\n     :param data: 若协商WebSocket为二进制则是bytes否则为str\n     :param fin: 指示该数据是否已全部发送完成，1：全部完成 0：未完成\n     :param sql: SQL Connection 若对数据库有依赖可使用此参数（非固定参数，此参数可删除）\n    \"\"\"\n\tprint(data)\n    ws.send(data)\n\n#需要强制实现\n@RequestReslove.websocket(\"/api/ws\", WebSocketHOOK.CLOSE)\ndef on_close(ws:WebSocket, code:int = 0, reason:str = \"\", sql: SQLModel.DataBaseConnection(\"main\")=None):\n\t\"\"\"\n     当有客户端被关闭时触发该事件\n     :param ws: WebSocket客户端\n     :param code: 客户端关闭连接代码\n     :param reason: 客户端关闭连接简述\n     :param sql: SQL Connection 若对数据库有依赖可使用此参数（非固定参数，此参数可删除）\n     因为code和reason有可能为空，所有务必需要给他们一个默认值\n    \"\"\"\n\tprint(\"%i %s\" % (code, reason))\n\n\n@RequestReslove.websocket(\"/api/ws\", WebSocketHOOK.PING)\ndef on_ping(ws:WebSocket, code:int = 0, reason:str = \"\", sql: SQLModel.DataBaseConnection(\"main\")=None):\n\t\"\"\"\n     当客户端响应ping指令时触发该事件\n     :param ws: WebSocket客户端\n     :param code: 客户端关闭连接代码\n     :param reason: 客户端关闭连接简述\n     :param sql: SQL Connection 若对数据库有依赖可使用此参数（非固定参数，此参数可删除）\n     因为code和reason有可能为空，所有务必需要给他们一个默认值\n    \"\"\"\n\tprint(\"%i %s %i\" % (code, reason, ws.user_arg))\n\n# 另外我们还可以通过WebSocket对象进行一些主动操作\n\"\"\"\n发送数据给WebSocket客户端\n:param data(bytes|str): 需要发送给WebSocket客户端的数据\n\"\"\"\nWebSocket.send(data)\n\n\"\"\"\n关闭WebSocket客户端连接\n:param code(int): 关闭代码\n:param reason(str): 关闭描述\n\"\"\"\nWebSocket.close(code,reason)\n\n\"\"\"\n向WebSocket客户端发送ping指令以确定客户端与服务器的连接是否存活\n与WebSocketHOOK.PING事件相对应\n\"\"\"\nWebSocket.ping()\n\n\"\"\"\n用于为各个客户端存放自定义数据，默认为None\n\"\"\"\nWebSocket.user_arg = None\n```\n\n## HTTP/2\n\n目前HTTP/2只适配用于HTTPS之下，HTTP的情况下并不支持HTTP/2连接；当HTTP2被访问时，HTTPRequest.http_version版本号将被设置2.0，目前也并不支持 **PUSH_PROMISE**。\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KeepRepeatLoop/Scarf",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ScarfKit",
    "package_url": "https://pypi.org/project/ScarfKit/",
    "platform": "",
    "project_url": "https://pypi.org/project/ScarfKit/",
    "project_urls": {
      "Bug Tracker": "https://github.com/KeepRepeatLoop/Scarf/issues",
      "Homepage": "https://github.com/KeepRepeatLoop/Scarf"
    },
    "release_url": "https://pypi.org/project/ScarfKit/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A Simple Way To Create Web Server",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12618440,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a3df24b079d2284f98cc8896199a5219fc904c1927118cb61aca766d5b525c2",
          "md5": "fc311922a81114f881a87ca7ee208872",
          "sha256": "ed2e3c7a403b00feb3c74af04aeb4a75f04493c19465f9e3043a8d3848657c40"
        },
        "downloads": -1,
        "filename": "ScarfKit-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc311922a81114f881a87ca7ee208872",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 20129,
        "upload_time": "2022-01-18T11:56:32",
        "upload_time_iso_8601": "2022-01-18T11:56:32.541547Z",
        "url": "https://files.pythonhosted.org/packages/9a/3d/f24b079d2284f98cc8896199a5219fc904c1927118cb61aca766d5b525c2/ScarfKit-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ea805ef98558e01061b1e457e594642117790ddaf6458d94c6e91551cac148c",
          "md5": "996a91823b472486b23277332656dce7",
          "sha256": "7f8e3dc36e712fb59e568777aab2515059be66342e09551abb0edea2084693a3"
        },
        "downloads": -1,
        "filename": "ScarfKit-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "996a91823b472486b23277332656dce7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 69856,
        "upload_time": "2022-01-18T11:56:37",
        "upload_time_iso_8601": "2022-01-18T11:56:37.850308Z",
        "url": "https://files.pythonhosted.org/packages/4e/a8/05ef98558e01061b1e457e594642117790ddaf6458d94c6e91551cac148c/ScarfKit-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ee6a6fd775fd92ff4c9c6b09af3917fdbdf3f9cdedf3873ebdae1621c3641ec",
          "md5": "98e3b94b351a724bfc14f1800de437c4",
          "sha256": "6051c33281a18df2199ff196f18c8c473a5d72cc369e8fdb2ba0be0220bdf39f"
        },
        "downloads": -1,
        "filename": "ScarfKit-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "98e3b94b351a724bfc14f1800de437c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 56285,
        "upload_time": "2022-01-19T12:03:46",
        "upload_time_iso_8601": "2022-01-19T12:03:46.059699Z",
        "url": "https://files.pythonhosted.org/packages/3e/e6/a6fd775fd92ff4c9c6b09af3917fdbdf3f9cdedf3873ebdae1621c3641ec/ScarfKit-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e4769dac0d9583c76739358d42db5b6fc66e84d222144d3a56e012c326a82ff",
          "md5": "7c45a5d897538c5a669f681c28d63d1c",
          "sha256": "8bde86ea6c8264f1a96cfe4933922b76c8261680b20c238e4cab75319a8322e3"
        },
        "downloads": -1,
        "filename": "ScarfKit-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7c45a5d897538c5a669f681c28d63d1c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 69984,
        "upload_time": "2022-01-19T12:03:49",
        "upload_time_iso_8601": "2022-01-19T12:03:49.391338Z",
        "url": "https://files.pythonhosted.org/packages/5e/47/69dac0d9583c76739358d42db5b6fc66e84d222144d3a56e012c326a82ff/ScarfKit-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ee6a6fd775fd92ff4c9c6b09af3917fdbdf3f9cdedf3873ebdae1621c3641ec",
        "md5": "98e3b94b351a724bfc14f1800de437c4",
        "sha256": "6051c33281a18df2199ff196f18c8c473a5d72cc369e8fdb2ba0be0220bdf39f"
      },
      "downloads": -1,
      "filename": "ScarfKit-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "98e3b94b351a724bfc14f1800de437c4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 56285,
      "upload_time": "2022-01-19T12:03:46",
      "upload_time_iso_8601": "2022-01-19T12:03:46.059699Z",
      "url": "https://files.pythonhosted.org/packages/3e/e6/a6fd775fd92ff4c9c6b09af3917fdbdf3f9cdedf3873ebdae1621c3641ec/ScarfKit-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5e4769dac0d9583c76739358d42db5b6fc66e84d222144d3a56e012c326a82ff",
        "md5": "7c45a5d897538c5a669f681c28d63d1c",
        "sha256": "8bde86ea6c8264f1a96cfe4933922b76c8261680b20c238e4cab75319a8322e3"
      },
      "downloads": -1,
      "filename": "ScarfKit-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7c45a5d897538c5a669f681c28d63d1c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 69984,
      "upload_time": "2022-01-19T12:03:49",
      "upload_time_iso_8601": "2022-01-19T12:03:49.391338Z",
      "url": "https://files.pythonhosted.org/packages/5e/47/69dac0d9583c76739358d42db5b6fc66e84d222144d3a56e012c326a82ff/ScarfKit-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}