{
  "info": {
    "author": "Sean Leavey",
    "author_email": "github@attackllama.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Pinto\nSupercharged command line interface for [Beancount](http://furius.ca/beancount/).\n\nWhile Beancount provides a few basic utilities for creating transactions via importers\n(such as a bank statement importer), it does not provide a mechanism to automatically\ninsert them into your existing account. Instead, it writes these transactions to a\nseparate file and the intention is that the user must manually copy those transactions\ninto their own account file. This manual operation is necessary because Beancount does\nnot place constraints on how the account file might be organised. For example, the\naccount file might be a single flat file, or a master file with a hierarchy of\nimported subfiles. Beancount cannot know for sure where these transactions should go,\nso it leaves it to you.\n\nPinto constrains the way in which the Beancount account files must be organised and in\ndoing so provides the ability for reliable automatic transaction insertion. The main\nfeature of Pinto is to use this constrained account file organisation to provide some\ntools to further automate your accounting.\n\nThe main new tool is `pinto add` which provides an interactive way to add new\ntransactions to your account. This is particularly useful for those who fully track cash\nexpenses, where the data cannot be scraped from a bank statement. The tool provides\nflags to auto-populate transaction files like payees, accounts, tags and dates, and also\nprovides a YAML-based template mechanism to auto-populate entries involving\nfrequent payees.\n\nOther tools added to the `pinto` command are:\n\n* `search`, a way to search your transactions for previously used accounts, payees and\n  templates;\n* `format`, a way to format your account files without having to call `bean-format` with\n  the path to the files (using instead the environment variable);\n* `check`, a way to check the syntax of your files without having to call `bean-check`\n  (using the environment variable the same way as `format`) and the date ordering of\n  your transactions.\n\n## Expected account layout\nPinto expects your accounts directory to be arranged like this:\n\n```\n.\n├── main.beancount\n├── templates.yaml\n└── transactions.beancount\n```\n\nThe `main.beancount` file should use the `include` command to include the contents of\n`transactions.beancount`.\n\nThe `templates.yaml` file is where you can specify templates for commonly used\ntransactions, useful for `pinto add`.\n\nTo avoid excessive typing, you should define an environment variable in your shell\ncalled `PINTO_DIR` pointing to the directory containing your accounts.\n\n## Examples\n\n### Adding transactions\nYou can start the interactive transaction insertion tool from the command line:\n\n```\n$ pinto add\n```\n\nThis will first prompt you for the date:\n```\nEnter transaction date [today]:\n```\n\nThis tries to allow any sane way of defining a date, such as \"2020-06-14\", \"yesterday\",\n\"last week\", \"3 Mar 19\", etc. (even future dates, like \"in 3 weeks\"). It uses\n[maya](https://github.com/timofurrer/maya) as a parser. If you leave this empty, it\nassumes the current date.\n\nNext up you're asked for the payee:\n```\nEnter transaction date [today]:\nDate will be 2020-06-14\nEnter transaction payee:\n```\n\nYou can enter whatever you like here. Pinto will try to match this to a previously used\npayee. If your specified payee matches closely to one and only one existing payee, that\npayee is used. If it closely matches to other possible payees, Pinto offers up a ranked\nlist of those matches to choose from. You can either choose to use one of these matches,\nor insist on using the exact string you entered. This way, Pinto tries to let you keep\nyour accounts consistent, with the same payees being reused in the same forms, and\nallowing you to be lazy by entering lowercase or shorthand forms of your intended payees\nand having Pinto match them to the originals.\n\n```\nEnter transaction date [today]:\nDate will be 2020-06-14\nEnter transaction payee: BA\nNon-unique or invalid payee.\nEnter transaction payee ([1] BA, [2] Bamberg Bridge, [3] Kamps Backstube, [4] Bamberg market, [5] Bar Rossi):\n```\n\nYou next get asked for a narration. This is simply a text entry, and does no fancy\nmatching:\n\n```\nEnter transaction date [today]:\nDate will be 2020-06-14\nEnter transaction payee: BA\nNon-unique or invalid payee.\nEnter transaction payee ([1] BA, [2] Bamberg Bridge, [3] Kamps Backstube, [4] Bamberg market, [5] Bar Rossi): 1\nPayee will be BA\nEnter transaction narration []:\n```\n\nAfter this Pinto goes into line entry mode. This lets you add two or more transaction\nlines with smart matching of account names:\n\n```\nEnter transaction date [today]:\nDate will be 2020-06-14\nEnter transaction payee: BA\nNon-unique or invalid payee.\nEnter transaction payee ([1] BA, [2] Bamberg market, [3] Kamps Backstube, [4] Bar Soba, [5] Bar Rossi): 1\nPayee will be BA\nEnter transaction narration []: Flights to UK\nNarration will be Flights to UK\nAdding line 1...\nChoose account: credit\nNon-unique or invalid account.\nChoose account ([1] Liabilities:DE:Deutsche-Bank:Credit-Card, [2] Expenses:Recreation, [3] Expenses:Recreation:Football, [4] Expenses:Recreation:Swimming, [5] Assets:UK:Reimbursements, [6] Other): 1\nAccount will be Liabilities:DE:Deutsche-Bank:Credit-Card\nEnter value []: 250 EUR\nValue will be 250.00 EUR\nAdding line 2...\nChoose account: flights\nNon-unique or invalid account.\nChoose account ([1] Expenses:Transport:Flights, [2] Expenses:Utilities:Electricity, [3] Expenses:Utilities:Internet, [4] Expenses:Utilities:Phone, [5] Liabilities:UK:Student-Loan, [6] Other): 1\nAccount will be Expenses:Transport:Flights\nEnter value []:\nValue will be empty\nAdd another line? [y/N]:\n```\n\nYou may add as many lines as you like. If you want to leave a value empty, so Beancount\ncalculates it for you, you can do so. Finally, you are shown the draft transaction:\n\n```\nDraft transaction:\n2020-06-14 * \"BA\" \"Flights to UK\"\n  Liabilities:DE:Deutsche-Bank:Credit-Card  250 EUR\n  Expenses:Transport:Flights\n\nCommit? [y/N]:\n```\n\nEntering `y` or `Y` or `yes` will save the transaction in the appropriate place of your\ntransaction file (in date order).\n\n#### Using templates\nTemplates can be used to further automate the account entry process. These must be\ndefined in a file called `templates.yaml` in the account directory. The contents of this\nfile should be in [YAML](https://yaml.org/) format.\n\nTemplates support `date`, `payee`, `narration`, and `lines` keys on the top level:\n\n* `date`, `payee` and `narration` simply define the corresponding fields of the\n  transaction. If they are not specified, the user is prompted for them when running\n  `pinto add`.\n* The `lines` key allows a list of lines to be defined, each optionally containing\n  `account`, `splits` and `no_value` keys:\n  * The `account` key defines the name of a single account, or a list of possible\n    accounts. If a list is defined, the user is prompted to choose from the list of\n    possible accounts during `pinto add`.\n  * The `splits` key defines a list of possible split accounts. This provides the\n    ability to define accounts to which the value from the *first* line of the\n    transaction is split into. This might be useful if you share expenses with someone\n    else and wish to split a fraction (e.g. half) of the expense into an asset account\n    representing what that person owes you. This supports `account` and `value` keys:\n      * `account` is the account to split the value with.\n      * `value` is the fraction of the transaction value to split. The resulting value\n        is rounded to the nearest two decimal places.\n  * `no_value` can be set to `true` (it's `false` by default) to define that this line\n    should not prompt the user for a value.\n\nThe above definitions are illustrated by the following example showing templates for\nvarious German supermarkets, a pharmacy (DM) and a DIY shop (Bauhaus). See the notes\nfollowing the example for explanations for what is going on:\n\n```yaml\ndenns:\n  payee: &denns \"Denn's Biomarkt\"\n  lines: &grocery-lines\n    - account: &de-cash-accounts\n      - \"Assets:EU:Cash\"\n      - \"Assets:DE:Deutsche-Bank:Current\"\n      splits: &de-partner-split\n        - account: \"Assets:DE:Reimbursements:Partner\"\n          value: -0.5\n    - account: &de-groceries \"Expenses:Food:Groceries\"\n      no_value: true\ndenns-partner:\n  payee: *denns\n  lines: &de-groceries-partner-liabilities\n    - account: \"Liabilities:DE:Partner\"\n    - account: \"Expenses:Food:Groceries\"\nrewe:\n  payee: &rewe \"Rewe\"\n  lines: *grocery-lines\nrewe-partner:\n  payee: *rewe\n  lines: *de-groceries-partner-liabilities\nedeka:\n  payee: &edeka \"Edeka\"\n  lines: *grocery-lines\nedeka-partner:\n  payee: *edeka\n  lines: *de-groceries-partner-liabilities\ndm:\n  payee: &dm \"DM\"\n  lines:\n    - account: *de-cash-accounts\n      splits: *de-partner-split\n    - account: &de-pharmacy-accounts\n      - \"Expenses:Toiletries\"\n      - \"Expenses:Equipment:Kitchen\"\n      - \"Expenses:Food:Groceries\"\n      - \"Expenses:Household\"\ndm-partner:\n  payee: *dm\n  lines:\n    - account: \"Liabilities:DE:Partner\"\n    - account: *de-pharmacy-accounts\nbauhaus:\n  payee: &bauhaus \"Bauhaus\"\n  lines:\n    - account: *de-cash-accounts\n      splits: *de-partner-split\n    - account: &diy-accounts\n      - \"Expenses:Equipment\"\n      - \"Expenses:Household\"\nbauhaus-partner:\n  payee: *bauhaus\n  lines:\n    - account: \"Liabilities:DE:Partner\"\n    - account: *diy-accounts\n```\n\nSome notes:\n\n* The file uses [YAML anchors](https://learnxinyminutes.com/docs/yaml/) to save yet more\n  typing and make future updates easier. These are optional.\n* Each template has a corresponding `-partner` template which is used for when the\n  user's partner spends money in those shops and wishes to split their expenses with\n  you. When entering the transaction they made, you use the `-partner` template instead\n  of the normal one which you would use if you had made the transaction. These\n  `-partner` templates define the liability account to use the define the money that you\n  owe them.\n* Some shops such as the pharmacy DM sell goods that would go into many different\n  accounts in the example user's setup. In this case, the accounts key defines a list\n  of possible accounts, and the user is prompted to choose one for the particular line\n  they enter.\n* The `value` key in the `splits` section should in the case of liabilities be a\n  negative number so that the split fraction of the *negative* expense becomes a\n  *positive* asset.\n\nTemplates can be used by specifying either `-t` or `--template` followed by the name\nof the template to use when running `pinto add`. For example:\n\n```\n$ pinto add -t bauhaus\nEnter transaction date [today]:\nDate will be 2020-06-14\nPayee will be Bauhaus\nEnter transaction narration []: Wood for side wall\nNarration will be Wood for side wall\nAdding line 1 of 2...\nChoose account ([1] Assets:EU:Cash, [2] Assets:DE:Deutsche-Bank:Current, [3] Other): 1\nAccount will be Assets:EU:Cash\nEnter value []: -10 EUR\nValue will be -10.00 EUR\nAdding line 2 of 2...\nChoose account ([1] Expenses:Equipment, [2] Expenses:Household, [3] Other): 2\nAccount will be Expenses:Household\nEnter value []:\nValue will be empty\nDraft transaction:\n2020-06-14 * \"Bauhaus\" \"Wood for side wall\"\n  Assets:EU:Cash      -10 EUR\n  Expenses:Household\n\nCommit? [y/N]: y\nCommitted!\n```\n\nTemplates can be searched by name using `pinto search templates`.\n\n## Installation\nWith Python 3 as the default Python interpreter, run:\n\n```bash\npip install pinto\n```\n\n## Usage\nFrom a terminal, run `pinto` for available options.\n\n## Development\nThe developer warmly encourages collaboration. Please submit feature requests, bug\nreports, etc. on the [GitHub issue tracker](https://github.com/SeanDS/pinto/issues).\nPull requests are also welcome.\n\nTo set up your development environment, please run the following from the `pinto`\nrepository root directory:\n\n```bash\npip install -e .[dev]\n```\n\nAfter installation, run `pre-commit install`. This sets up some linting and code\nformatting pre-commit checks.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SeanDS/pinto",
    "keywords": "",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pinto",
    "package_url": "https://pypi.org/project/pinto/",
    "platform": "",
    "project_url": "https://pypi.org/project/pinto/",
    "project_urls": {
      "Homepage": "https://github.com/SeanDS/pinto"
    },
    "release_url": "https://pypi.org/project/pinto/0.1.4/",
    "requires_dist": [
      "beancount",
      "click",
      "maya",
      "pyyaml",
      "fuzzywuzzy[speedup]",
      "black ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "readme-renderer ; extra == 'dev'"
    ],
    "requires_python": ">=3.7",
    "summary": "Supercharged command line interface for Beancount.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7473033,
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86204655335d0300e0d2a06b60710dbe039a054c5d5e390e46dd00303742aac0",
          "md5": "6cc1a219bf2a2f9a1ec5a11eee6c8305",
          "sha256": "db52d248a3a312dd49443fdd428c00cd3cfcd7b844b335fbd15d987d1b0afaa9"
        },
        "downloads": -1,
        "filename": "pinto-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6cc1a219bf2a2f9a1ec5a11eee6c8305",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 24075,
        "upload_time": "2020-06-14T11:03:31",
        "upload_time_iso_8601": "2020-06-14T11:03:31.061971Z",
        "url": "https://files.pythonhosted.org/packages/86/20/4655335d0300e0d2a06b60710dbe039a054c5d5e390e46dd00303742aac0/pinto-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "71f9f031bb41a0f6918926f13415ba02220a9f83584033fb750599c87f833eeb",
          "md5": "6f3c4cb507f699095c8be9a1454e52eb",
          "sha256": "1e7654f58946803026721edfecdb0d9b4f9d41aa690022d0974578d8b2f0a890"
        },
        "downloads": -1,
        "filename": "pinto-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6f3c4cb507f699095c8be9a1454e52eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26858,
        "upload_time": "2020-06-14T11:03:33",
        "upload_time_iso_8601": "2020-06-14T11:03:33.656946Z",
        "url": "https://files.pythonhosted.org/packages/71/f9/f031bb41a0f6918926f13415ba02220a9f83584033fb750599c87f833eeb/pinto-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd86e5f3b93de0347cf6a1b4d0c7846d53c35ec54c7b8fa919b0848f1d2c1ca1",
          "md5": "daf046eb77ddddb400e801b837ec833b",
          "sha256": "beff926e9f2bfa1a9d10c3ec882048e0b42ed8f5c771e1e65d0c1d27062d920b"
        },
        "downloads": -1,
        "filename": "pinto-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "daf046eb77ddddb400e801b837ec833b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25845,
        "upload_time": "2020-06-14T11:41:34",
        "upload_time_iso_8601": "2020-06-14T11:41:34.021604Z",
        "url": "https://files.pythonhosted.org/packages/cd/86/e5f3b93de0347cf6a1b4d0c7846d53c35ec54c7b8fa919b0848f1d2c1ca1/pinto-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6312978a1720fc75ae3b00223835047078fcab1abdd6f13d3ab0133532544df",
          "md5": "56fc937c0008cd89637573fa01a793a9",
          "sha256": "ad0acc021ee259ab561a453d65253eb815f014ba7d9680bb090dc65bdef2bc7c"
        },
        "downloads": -1,
        "filename": "pinto-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "56fc937c0008cd89637573fa01a793a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 30821,
        "upload_time": "2020-06-14T11:41:35",
        "upload_time_iso_8601": "2020-06-14T11:41:35.545679Z",
        "url": "https://files.pythonhosted.org/packages/d6/31/2978a1720fc75ae3b00223835047078fcab1abdd6f13d3ab0133532544df/pinto-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd86e5f3b93de0347cf6a1b4d0c7846d53c35ec54c7b8fa919b0848f1d2c1ca1",
        "md5": "daf046eb77ddddb400e801b837ec833b",
        "sha256": "beff926e9f2bfa1a9d10c3ec882048e0b42ed8f5c771e1e65d0c1d27062d920b"
      },
      "downloads": -1,
      "filename": "pinto-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "daf046eb77ddddb400e801b837ec833b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 25845,
      "upload_time": "2020-06-14T11:41:34",
      "upload_time_iso_8601": "2020-06-14T11:41:34.021604Z",
      "url": "https://files.pythonhosted.org/packages/cd/86/e5f3b93de0347cf6a1b4d0c7846d53c35ec54c7b8fa919b0848f1d2c1ca1/pinto-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6312978a1720fc75ae3b00223835047078fcab1abdd6f13d3ab0133532544df",
        "md5": "56fc937c0008cd89637573fa01a793a9",
        "sha256": "ad0acc021ee259ab561a453d65253eb815f014ba7d9680bb090dc65bdef2bc7c"
      },
      "downloads": -1,
      "filename": "pinto-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "56fc937c0008cd89637573fa01a793a9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 30821,
      "upload_time": "2020-06-14T11:41:35",
      "upload_time_iso_8601": "2020-06-14T11:41:35.545679Z",
      "url": "https://files.pythonhosted.org/packages/d6/31/2978a1720fc75ae3b00223835047078fcab1abdd6f13d3ab0133532544df/pinto-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}