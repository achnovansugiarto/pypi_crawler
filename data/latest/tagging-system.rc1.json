{
  "info": {
    "author": "kaito-hao",
    "author_email": "anya@kaito.ai",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Tagging system\n\n## Overview\n\n![](https://github.com/MetaSearch-IO/TaggingSystem/blob/master/assets/TaggingSys_sch.png)\n\nThe tagging system is composed by the following major components:\n* **Preprocessors**: preprocesses the input data objects before tagging.\n* **Tag ID strategies**: independent strategies to identify tags from input data objects\n* **Aggregators**: post-process and aggregates the tagging results from tag ID pipelines configured for each assets\n* **Handlers**: assembles preprocessor, tag ID pipelines, and result aggregation logics for each type of data source\n\n### Input of the tagging system\n\nCurrently, the system is implemented to receive batches of data objects from various data sources, e.g., Twitter (\nimplemented), Discord (TBI), Medium (TBI), Reddit (TBI), etc.\n\n### Preprocessors\n\nPreprocessors are used to preprocess the input data objects before tagging. \n\n### Strategies\n\nStrategies are used to identify tags from input (pre-processed) data objects. Strategies are expected to work independently,\nand will work per-asset. \n\n### Aggregators\n\nAggregators are used to post-process and aggregate the tagging results from tag ID pipelines configured for each assets.\nCross-asset tagging strategies should also be implemented here. Aggregators are expected to have access to all outputs\nfrom tagging strategies (asset-wise), and the input data objects.\n\n### Handlers\n\nHandlers control the flows of the actual tagging process for each data source. The handler reads preprocessing pipeline\nand aggregation pipeline from the `data_source_configs` of global config, and reads tag identification pipelines from\nticker-specific configurations. \n\n## Applying TaggingSystem in downstream logics\n\n1. Prepare `tagger` configs in a JSON file, e.g., `config.json`. You may find a sample in: https://github.com/MetaSearch-IO/TaggingSystem/blob/master/sample_configs/config.json . This config file contains global settings for all tickers, including: preprocessing pipeline, and ticker idenfication results aggregation pipeline. Read this config as:\n```py\nconfig = json.load(open('config.json'))\n```\n2. Prepare a list of ticker specific configs, e.g., `ticker_configs.json`. You may find a lot of prepared configs in https://github.com/MetaSearch-IO/TickerConfigs . Read this config as:\n```py\n# In this example we only read one ticker config\nticker_config_list = json.load(open('ticker_configs/curated_tickers/Chains/ETH.json'))\n```\n\n3. Initialize a `Handler` object, and tag your data object(s) by calling it on the data object(s):\n\n```py\nfrom TaggingSystem.handler.DiscordHandler import DiscordHandler\n\n# Init handler\ncrypto_ticker_tagger = DiscordHandler(config=config, ticker_config_list=ticker_config_list)\n\n# Sample data, could also be a list of dicts\nprocessed_data = {\"content\": \"test BTC\"}\n\n# Apply Tagging Logic\ncrypto_tickers = crypto_ticker_tagger(processed_data)\n\n# crypto_tickers = [{'BTC': 1.0}]\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MetaSearch-IO/TaggingSystem",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tagging-system",
    "package_url": "https://pypi.org/project/tagging-system/",
    "platform": null,
    "project_url": "https://pypi.org/project/tagging-system/",
    "project_urls": {
      "Homepage": "https://github.com/MetaSearch-IO/TaggingSystem",
      "Repository": "https://github.com/MetaSearch-IO/TaggingSystem.git"
    },
    "release_url": "https://pypi.org/project/tagging-system/0.1.0/",
    "requires_dist": [
      "beautifulsoup4 (>=4.10,<5.0)",
      "loguru (>=0.5.0,<0.6.0)",
      "lxml (>=4.9.1,<5.0.0)",
      "markdown (>=3.4.1,<4.0.0)",
      "nltk (>=3.7,<4.0)",
      "requests (>=2.28,<3.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15224751,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aaedbfa799aed21e44ba66f9bc45be92ed6f7316c3ba8aa9b2c0b5ac5a0151fe",
          "md5": "ad0b61895e6e396444da1e59a09fea61",
          "sha256": "56277b751f976c6824d73c52e59286c938f85700108dad9a20b261125ab8983a"
        },
        "downloads": -1,
        "filename": "tagging_system-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad0b61895e6e396444da1e59a09fea61",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 24660,
        "upload_time": "2022-09-27T08:28:41",
        "upload_time_iso_8601": "2022-09-27T08:28:41.466124Z",
        "url": "https://files.pythonhosted.org/packages/aa/ed/bfa799aed21e44ba66f9bc45be92ed6f7316c3ba8aa9b2c0b5ac5a0151fe/tagging_system-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef8db1769bc1cd62be6cd0e9bfe42790427f9bea73656cd69e375cc25cf240d7",
          "md5": "b5573851eb7f9aec5d250f198e43d4e0",
          "sha256": "6e0dedc42ac5d37262ac1b7a1d11bae63f5f0c8796cc63a02e899166f6b872f5"
        },
        "downloads": -1,
        "filename": "tagging_system-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b5573851eb7f9aec5d250f198e43d4e0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 16417,
        "upload_time": "2022-09-27T08:28:43",
        "upload_time_iso_8601": "2022-09-27T08:28:43.379894Z",
        "url": "https://files.pythonhosted.org/packages/ef/8d/b1769bc1cd62be6cd0e9bfe42790427f9bea73656cd69e375cc25cf240d7/tagging_system-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aaedbfa799aed21e44ba66f9bc45be92ed6f7316c3ba8aa9b2c0b5ac5a0151fe",
        "md5": "ad0b61895e6e396444da1e59a09fea61",
        "sha256": "56277b751f976c6824d73c52e59286c938f85700108dad9a20b261125ab8983a"
      },
      "downloads": -1,
      "filename": "tagging_system-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ad0b61895e6e396444da1e59a09fea61",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 24660,
      "upload_time": "2022-09-27T08:28:41",
      "upload_time_iso_8601": "2022-09-27T08:28:41.466124Z",
      "url": "https://files.pythonhosted.org/packages/aa/ed/bfa799aed21e44ba66f9bc45be92ed6f7316c3ba8aa9b2c0b5ac5a0151fe/tagging_system-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ef8db1769bc1cd62be6cd0e9bfe42790427f9bea73656cd69e375cc25cf240d7",
        "md5": "b5573851eb7f9aec5d250f198e43d4e0",
        "sha256": "6e0dedc42ac5d37262ac1b7a1d11bae63f5f0c8796cc63a02e899166f6b872f5"
      },
      "downloads": -1,
      "filename": "tagging_system-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b5573851eb7f9aec5d250f198e43d4e0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 16417,
      "upload_time": "2022-09-27T08:28:43",
      "upload_time_iso_8601": "2022-09-27T08:28:43.379894Z",
      "url": "https://files.pythonhosted.org/packages/ef/8d/b1769bc1cd62be6cd0e9bfe42790427f9bea73656cd69e375cc25cf240d7/tagging_system-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}