{
  "info": {
    "author": "Mark Sprague",
    "author_email": "spraguem@ecu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SVSound\n\nThis is Python package for reading Broadcast Wave Files in various formats along with metadata written by several recording devices. The content in this module was forked from Mark Sprague's collection of sound recording and analysis modules and intended for use by his students. This package is available to everyone under the GPL 3.0 license. \n\n## Versions\n\n* 0.0.1 - initial release\n* 0.0.2 - Corrected a bug that caused the end of a wave file to be truncated.\n* 0.0.3 - Corrected a bug causing incorrect partial file read; include ID3 contents (in binary form) in info.\n* 0.0.4 - Now skips over nonstandard file chunks without producing errors.\n* 0.0.5 - contains an error ... do not use\n* 0.0.6 - Not many changes other than support for Python 3.9.\n* 0.0.7 - Support for Python 3.10; added levels subpackage to calculate SPL values and SEL values from sampled sounds.\n* 0.0.8--0.0.10 - All contain an error ... do not use\n* 0.1.0 -  Decimus, icListen, and Zoom recorders fully supported. Correctly converts binary strings to ACII stings when interpreting nonstandard sub-chunks written by icListen and Zoom recorders. Determines file length correctly. Module `levels` imports module `wavefile` correctly. Supports Python <= 3.11.\n\n## Installation\n\n### Conda/Mamba\n\nInstall using `conda`:\n\n```\nconda install -c sprague252 svsound\n```\n\nInstall using `mamba`:\n\n```\nmamba install -c sprague252 svsound\n```\n\n### Pip\n\nInstall using `pip`:\n\n```\npip install svsound\n```\n\n\n## wavefile Module\n\nThe module `wavefile` contains programs for reading Broadcast Wave (.wav) files.\nThe following propriatory boadcast wave file formats are currently\nsupported:\n\n* generic - generic Windows WAVE file format containing the basic\ninfromation in the WAVE format chunk. No additional metadata is read.\n\n* decimus - Windows WAVE file written by the Decimus&reg; passive\nacoustics monitoring system and other devices that use the SA\nInstrumentation DAQ card. Metadata is extracted from the filename, which\nincludes a timestamp, into the info dictionary.\n\n* icListen - WAVE files written by icListen&reg; recording devices.\nMetadata in the INFO chunk is read into the info dictionary.\n\n* zoom - WAVE files written by ZOOM&reg; recording devices. Metadata from\nthe bext chunk and the iXML chunk is read into the info dictionary.\n\n### Functions\n\n#### read( )\n\n`info, wave = read(filename, t0, t1, wavetype, chunk_b, verbose)`\n\nRead a WAV file and return the file information and waveform data. This function includes support for single and multiple channel files encoded in linear PCM format with the following data formats (all little-endian):\n\n  * 8 bit signed integer\n  * 16 bit signed integer\n  * 24 bit signed integer\n  * 32 bit signed integer\n  * 32 bit floating point\n  * 64 bit floating point\n\nInput parameters\n    \n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>filename</code> - string with the name of the input WAV file \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>t0</code> - start time in seconds for returned data (default: 0) \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>t1</code> - end time in seconds for returned data. Value of -1\nrepresents the end of the file. (default: -1) \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>wavetype</code> - string representing the type of WAV file\n(default: None). Currnetly supported types are 'generic', 'decimus',\n'icListen', and 'zoom'. If the value is None, the wavetype is determined\nusing identify. \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>chunk_b</code> - number of bytes for each data chunk read from the\nfile (default: 3072) \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>verbose</code> - give verbose status updates (default: False)\n</p>\n\n\nOutput\n    \n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>info</code> - dictionary with file information and metadata (if available)\n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>wave</code> - Numpy array with waveform data values. For a single\nchannel file, <code>wave</code> is a flat, 1-D array. For a multichannel\nrecording each channel is a row in <code>wave</code>, so\n<code>wave[0]</code> is the first channel, <code>wave[1]</code> the\nsecond channel, etc.\n</p>\n\n#### identify( )\n\n`wavetype = identify(file)`\n    \nIdentify the type of WAV file and return its type. Files that are unable\nto be identified are classified as generic. The wave type identification\nallows the extraction of proprietary metadata stored in the file and\nfilename.\n\nInput parameter\n    \n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>file</code> - filehandle for the WAV file to be identified \n</p>\n            \nOutput\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>wavetype</code> - string with the name of the wave file type. \n</p>\n\n#### wave_chunk( )\n\nRead a WAVE file in chunks (not all at once) and return all the data.\nThis is a back-end to the read function and is not intended for\nhigh-level use.\n\n## recorders Subpackage\n\nThe subpackage `recorders` contains modules with specific `get_info()`\nfunctions for each supported recorder type. Currently supported\nrecorders are described in the wavefile Module introduction (above).\nEach `get_info()` function has the same input and output parameters and\nusage.\n\n`info = get_info(file, info)`\n\nRead the information in a generic WAV file, and return the contents.\nOnly the standard information in the fmt chunk is included in the info\ndictionary.\n\nInput Parameters\n    \n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>file</code> - filehandle of an open WAV file \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>info</code> - (optional) dictionary that may contain file\ninformation from other sources. Defaults to an empty dictionary. \n</p>\n    \nOutput\n    \n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>info</code> - dictionary with information read from the file. If\nan info dictionary was supplied as an input parameter, entires that were\nnot changed are also included. \n</p>\n    \nStandard `info` dictionary keys and values returned for all file types:\n    \n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"bits\"</code> - integer with the number of bits in each sample. \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"block_align\"</code> - number of bytes sampled at the same time\n(all channels combined) in the data \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"byte_per_s\"</code> - integer number of bytes per second recorded \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"chan\"</code> - integer number of channels in the file \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"compress\"</code> - integer Wave file compression index. Only 1\n(uncompressed integer data) and 3 (uncompressed floating point data) are\ncurrently supported. \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"data0\"</code> - integer byte address of the first sample in the\nfile \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"filesize\"</code> - integer size of the file in bytes \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"fs\"</code> - integer sample rate in samples/second \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"Nsamples\"</code> - integer number of samples in the file (in each\nchannel) \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"wavetype\"</code> - string with the name file type read. \n</p>\n\nOther keys and values in the `info` dictionary are recorder-specific and\ndepend on the `wavetype` value.\n\n### Recorder-Specific info keys and values\n\n#### Decimus\n\nRecordings identified as Decimus recordings have `info[\"wavetype\"]` set\nto \"decimus\". Otherwise, `info` contains only the standard info keys and\nvalues.\n\n#### Generic\n\nRecordings classified as generic have `info[\"wavetype\"]` set to\n\"generic\", and `info` contains only the standard info keys and values.\n\n#### icListen\n\nRecordings identified as icListen recordings have `info[\"wavetype\"]` set\nto \"icListen\". In addition, each key/value pair encoded in the INFO\nchunk in the file is added to `info`. See the icListen documentation\nfor details on these parameters. \n\nThe value `info[\"cal\"]` contains a float64 calibration value for the data.\nMultiply data samples by this value to obtain calibrated values in\nmicropascals.\n\n#### Zoom\n\nRecordings identified as Zoom recordings have `info[\"wavetype\"]` set to\n\"zoom\". The following information encoded in the bext chunk is added to\n`info` as keys and values. (See Zoom documentation for details.)\n    \n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"CodingHistory\"</code> - coding history string \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"desc\"</code> - recording description string \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"LoudnessRange\"</code> - int16 recording loudness range value \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"LoudnessValue\"</code> - int16 recording loudness value \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"MaxMomentaryLoudness\"</code> - int16 recording maximum momentary\nloudness value \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"MaxShortTermLoudness\"</code> - int16 recording maximum short term\nloudness value\n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"MaxTruePeakLevel\"</code> - int16 recording maximum maximum true\npeak level \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"OriginationDate\"</code> - recording origination date string \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"OriginationTime\"</code> - recording origination time string \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"Originator\"</code> - recording originator string \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"OriginatorReference\"</code> - recording originator reference\nstring \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"TimeReferenceHigh\"</code> - int32 time of high sample in\nrecording \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"TimeReferenceLow\"</code> - int32 time of low sample in recording \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"UMID\"</code> - UMID string \n</p>\n\n<p style=\"margin-left: 3em; text-indent: -2em;\">\n<code>\"Version\"</code> - int16 version number \n</p>\n\nThe contents in the entire iXML block are stored in `info[\"iXML\"]` as a\nstring.\n\n## levels Module\n\nThe module `levels` contains the functions `spl`, `sel`, `spl_wav`, `spl_wav_dir`, `spl_wav_files`, `A_weighting`, `M_weighting`, and `weight`. Each funcion contains a detailed usage message.\n\n### spl\n\nReturn an array of sampled sound pressure levels using time constant T.  \n\n#### Usage\n    \n        SPL = spl(data, fs, weighting='A', tconst=0.125, pref=20.0)\n    \n#### Input Parameters\n\n`data`: an array of sampled sound pressures.\n    \n`fs`: sampling frequency in hertz.\n\n`weighting`: type of weighting to use. This parameter can be a string to represent\npreset values 'A' for A-weighting, 'M' for M-weighting (see\ndocumentation on the function weight() to set frequency parameters). It\ncan also be a function that provides digital filter parameters to the\nweight() function. For no weighting, use weighting = 1. The default is\n'A' weighting.\n\n    tconst: time constant. Defaullts to 0.125 s (fast). This parameter can be \n        the value in seconds or preset values given with the strings 'Fast' \n        (0.125 s), 'Slow' (1.000 s), or \"Impulse' (0.035 s).\n    pref: reference pressure. Defaults to 20.0 (micropascals, standard for\n        atmospheric sounds). Use 1.0 (micropascals) for underwater sounds.\n    cal: calibration factor of the recording. This is the value that\n        converts data samples to the appropriate pressure units\n        (micropascals). The default value is 1 (no calibration\n        adjustment).\n    pms: an initial value for the mean square pressure 'historical'\n        value for time constant. Use this to continue the calculation\n        from another recording. Defaults to 0.0.\n    pms_return: whether or not to return the mean square pressure value for \n        subsequent calculations. Defaults to False.\n    \n    Output\n    \n    SPL: a numpy array of sampled sound pressure levels corresponding to the \n        the same sampling times a the elements of data.  Note that the initial \n        elements SPL[i] are based on a truncated history because they only use \n        pressure values from data[i] back to data[0].\n    pms: The mean square sound pressure for use in subsequent\n        calculations such as the recording continuing in another\n        file. Only returned if the input parameter pms_return is True.\n\n## Usage Example\n\nRead data from a single-channel file and plot it vs. time.\n\n    >>> from __future__ import division\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from SVSound import wavefile\n    >>> info, data = wavefile.read('filename.wav')\n    >>> info['chan']\n    1\n    >>> times = np.arange(data.size / info['fs'])\n    >>> plt.plot(times, data)\n    ...\n\nNote that the data in a multichannel recording has rows for each channel, so `data[0]` is the first channel, `data[1]` the second channel, etc.\n    \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sprague252/SVSound",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "svsound",
    "package_url": "https://pypi.org/project/svsound/",
    "platform": null,
    "project_url": "https://pypi.org/project/svsound/",
    "project_urls": {
      "Homepage": "https://github.com/sprague252/SVSound"
    },
    "release_url": "https://pypi.org/project/svsound/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A package to read Broadcast Wave files",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16540386,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5a7a319e8bc9427cafc7edcd28073964e39fbae8fce33dbde0e943c62d20289",
          "md5": "23068e19e32ec274a55014bfb830bb0c",
          "sha256": "38f926626f3c4c0d4cf88562fcbde7c87a8f15e6b14086de37f3762c8ee09f51"
        },
        "downloads": -1,
        "filename": "svsound-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "23068e19e32ec274a55014bfb830bb0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27443,
        "upload_time": "2020-07-03T01:49:58",
        "upload_time_iso_8601": "2020-07-03T01:49:58.739499Z",
        "url": "https://files.pythonhosted.org/packages/f5/a7/a319e8bc9427cafc7edcd28073964e39fbae8fce33dbde0e943c62d20289/svsound-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "742d85686928c0de80e849e22b6eb2063a3e486f781f0c94c458dcade810f159",
          "md5": "9c2a53b00bbb0bc288bf5758a445328b",
          "sha256": "49d112d5deef7542f5c2f5b5ff33aae6046bc0e6ddd62d2c69f051d4c4dae8e0"
        },
        "downloads": -1,
        "filename": "svsound-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9c2a53b00bbb0bc288bf5758a445328b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11831,
        "upload_time": "2020-07-03T01:50:01",
        "upload_time_iso_8601": "2020-07-03T01:50:01.020588Z",
        "url": "https://files.pythonhosted.org/packages/74/2d/85686928c0de80e849e22b6eb2063a3e486f781f0c94c458dcade810f159/svsound-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc8c4a675879ebeade8e7347f6173a67bd0075d5fefdffa288d49b52dd15ad19",
          "md5": "fd39a707a940259b7aaedd9fccadd033",
          "sha256": "dd5255d521732981efb069e7b065acd5387b70cc30ee7cbf443afbf1efe3f095"
        },
        "downloads": -1,
        "filename": "svsound-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd39a707a940259b7aaedd9fccadd033",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27490,
        "upload_time": "2020-07-07T17:25:14",
        "upload_time_iso_8601": "2020-07-07T17:25:14.023877Z",
        "url": "https://files.pythonhosted.org/packages/cc/8c/4a675879ebeade8e7347f6173a67bd0075d5fefdffa288d49b52dd15ad19/svsound-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe813404d1e3065cc01b2bf9b5d9b1440e7696ab44395f198e8159137fd74346",
          "md5": "b479aff16c18133af36d5c5f287d7547",
          "sha256": "e61ff56b37032fa503679349dcd211f914e3d474ba34cb57f9c6646741c17761"
        },
        "downloads": -1,
        "filename": "svsound-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b479aff16c18133af36d5c5f287d7547",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11964,
        "upload_time": "2020-07-07T17:25:15",
        "upload_time_iso_8601": "2020-07-07T17:25:15.211566Z",
        "url": "https://files.pythonhosted.org/packages/fe/81/3404d1e3065cc01b2bf9b5d9b1440e7696ab44395f198e8159137fd74346/svsound-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4200df5e69ec9195818e28a3e464d7a210bec0ea9a48a4545de520a71a89830e",
          "md5": "ed2a5c38e9a613edf394e7d2cce7cbda",
          "sha256": "3005d784319a19fd9a446a03f1aeab131063113d6de5f94d24b79b83a033a504"
        },
        "downloads": -1,
        "filename": "svsound-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed2a5c38e9a613edf394e7d2cce7cbda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27655,
        "upload_time": "2020-07-10T18:01:37",
        "upload_time_iso_8601": "2020-07-10T18:01:37.380762Z",
        "url": "https://files.pythonhosted.org/packages/42/00/df5e69ec9195818e28a3e464d7a210bec0ea9a48a4545de520a71a89830e/svsound-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a65e940e10479beefb935036bc88d9e048cc272c247ceb3659295d9b02661e03",
          "md5": "d1225449077a0f5c3881f63ebda426ee",
          "sha256": "0b0405d30c856bff21c07d95e44e6eb516a8c1fe3da7a2f9acd65da5043676f5"
        },
        "downloads": -1,
        "filename": "svsound-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d1225449077a0f5c3881f63ebda426ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12217,
        "upload_time": "2020-07-10T18:01:38",
        "upload_time_iso_8601": "2020-07-10T18:01:38.448601Z",
        "url": "https://files.pythonhosted.org/packages/a6/5e/940e10479beefb935036bc88d9e048cc272c247ceb3659295d9b02661e03/svsound-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1df919d5590b5481b5df0a8ad9961685aac6b957a6d07ade83d5afc2927bbd0",
          "md5": "fcc9976d7ca1336c5fd387dd6486d348",
          "sha256": "da185d5c49181015d97f62b65f3c200a03318dbac1c9af978a389b5655759a40"
        },
        "downloads": -1,
        "filename": "svsound-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fcc9976d7ca1336c5fd387dd6486d348",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28540,
        "upload_time": "2020-07-15T12:52:47",
        "upload_time_iso_8601": "2020-07-15T12:52:47.507550Z",
        "url": "https://files.pythonhosted.org/packages/a1/df/919d5590b5481b5df0a8ad9961685aac6b957a6d07ade83d5afc2927bbd0/svsound-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbb7b28965109dfdae0ccc090ce293d228679771759a91185cd5fc397481139f",
          "md5": "caa22976bc3c6bb14707ca0ecad9486a",
          "sha256": "3f0400cdba92e3d76a0ee934464ee83e392ff2c352acbebff4e1d04d048e26c7"
        },
        "downloads": -1,
        "filename": "svsound-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "caa22976bc3c6bb14707ca0ecad9486a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12767,
        "upload_time": "2020-07-15T12:52:48",
        "upload_time_iso_8601": "2020-07-15T12:52:48.723043Z",
        "url": "https://files.pythonhosted.org/packages/bb/b7/b28965109dfdae0ccc090ce293d228679771759a91185cd5fc397481139f/svsound-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5517554510e5f67ba21acf4a81bad84f50f8be2406bd85ff689cd641764b2eb4",
          "md5": "cd64ebb9cc7a344138f4b1430c9d4f64",
          "sha256": "44e4a1500a697b4a0de9274b416c3a20b446e51da6d460005bb797800e43a90b"
        },
        "downloads": -1,
        "filename": "svsound-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd64ebb9cc7a344138f4b1430c9d4f64",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27728,
        "upload_time": "2021-06-25T15:44:55",
        "upload_time_iso_8601": "2021-06-25T15:44:55.365020Z",
        "url": "https://files.pythonhosted.org/packages/55/17/554510e5f67ba21acf4a81bad84f50f8be2406bd85ff689cd641764b2eb4/svsound-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f5a63702fdcb723ee542277291818e3bed739292273376f196e0c82ee4c8dd1",
          "md5": "72f1e51488846f8151bb0b0a46162118",
          "sha256": "797779affe62de541af417d59802e17e4aca8d94adecfd6cb76e6a73d27e416f"
        },
        "downloads": -1,
        "filename": "svsound-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "72f1e51488846f8151bb0b0a46162118",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24586,
        "upload_time": "2021-06-25T15:44:57",
        "upload_time_iso_8601": "2021-06-25T15:44:57.340978Z",
        "url": "https://files.pythonhosted.org/packages/6f/5a/63702fdcb723ee542277291818e3bed739292273376f196e0c82ee4c8dd1/svsound-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8af0535277fea37e55477760a963552eab09637bf67f87124f201eb1ccc130ac",
          "md5": "39ebdd54db4e41e87444a7273df157ff",
          "sha256": "eec03cf6251940ccbf273c66f884ed7cb51970eb360a476ba57fb1188c3f665d"
        },
        "downloads": -1,
        "filename": "svsound-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "39ebdd54db4e41e87444a7273df157ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 33094,
        "upload_time": "2023-01-24T01:36:14",
        "upload_time_iso_8601": "2023-01-24T01:36:14.584005Z",
        "url": "https://files.pythonhosted.org/packages/8a/f0/535277fea37e55477760a963552eab09637bf67f87124f201eb1ccc130ac/svsound-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07c9ede3415a837917c0921115db6db3fa1b0dbf6ed68c411c23ae9d7f3a2cd1",
          "md5": "0d81d3132031f9504ebfb9c829fa42ee",
          "sha256": "4f52b2ebaead43d31b2b6c63c734f2a001ea0bc5eea1eb034692aadc6078a99a"
        },
        "downloads": -1,
        "filename": "svsound-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0d81d3132031f9504ebfb9c829fa42ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30674,
        "upload_time": "2023-01-24T01:36:18",
        "upload_time_iso_8601": "2023-01-24T01:36:18.723608Z",
        "url": "https://files.pythonhosted.org/packages/07/c9/ede3415a837917c0921115db6db3fa1b0dbf6ed68c411c23ae9d7f3a2cd1/svsound-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8af0535277fea37e55477760a963552eab09637bf67f87124f201eb1ccc130ac",
        "md5": "39ebdd54db4e41e87444a7273df157ff",
        "sha256": "eec03cf6251940ccbf273c66f884ed7cb51970eb360a476ba57fb1188c3f665d"
      },
      "downloads": -1,
      "filename": "svsound-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "39ebdd54db4e41e87444a7273df157ff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 33094,
      "upload_time": "2023-01-24T01:36:14",
      "upload_time_iso_8601": "2023-01-24T01:36:14.584005Z",
      "url": "https://files.pythonhosted.org/packages/8a/f0/535277fea37e55477760a963552eab09637bf67f87124f201eb1ccc130ac/svsound-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07c9ede3415a837917c0921115db6db3fa1b0dbf6ed68c411c23ae9d7f3a2cd1",
        "md5": "0d81d3132031f9504ebfb9c829fa42ee",
        "sha256": "4f52b2ebaead43d31b2b6c63c734f2a001ea0bc5eea1eb034692aadc6078a99a"
      },
      "downloads": -1,
      "filename": "svsound-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0d81d3132031f9504ebfb9c829fa42ee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 30674,
      "upload_time": "2023-01-24T01:36:18",
      "upload_time_iso_8601": "2023-01-24T01:36:18.723608Z",
      "url": "https://files.pythonhosted.org/packages/07/c9/ede3415a837917c0921115db6db3fa1b0dbf6ed68c411c23ae9d7f3a2cd1/svsound-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}