{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Automated Testing Toy Example\n\nIn this project, we'll practice using Pytest to automatically test the functionality of three kinds of files:\n  - **Python Modules**: Can we import the functions?  Do they behave as expected?\n  - **Python Scripts**: Does the script run without error?  Does it behave as expected?\n  - **Jupyter Notebooks**: Does the notebook run without error?  Does it behave as expected?\n  \n\n\n## Toy Dataset: Titanic Survival Analysis\n\nDid passenger class, sex, and age have an effect of who survived the Titanic disaster of 1912?  This analysis says yes!\n\n\n### Directions\n\n#### Write Automated tests for each python code file\n\n  1. `tests/test_utils.py`\n  \n  - Test that the `titanic_utils.is_adult()` function behaves correctly on three different ages.\n    \n  -  For example, `assert is_adult(11) == False`\n    \n  2. `tests/test_data_download_script.py`\n  \n  - Test that the `scripts/download_data.py` file runs without errors (for extra credit, that it creates the `data/raw/titanic.csv` file)\n    \n  - The `runpy.run_path()` function is particularly helpful for this.  \n    \n  - `os.path.exists()`, `os.remove()`, and `shutils.rmtree()` can also be helpful here.\n    \n  3. `tests/test_analysis_notebook.py`\n  \n  - Test that the `notebooks/anlayze_data.ipynb` file runs without errors (for extra credit, that it creates the `results/survival_rate.jpg` file)\n  \n  - `subprocess.check_output()` is a useful function here, when used to call `jupyter nbconvert --to notebook --execute my_notebook.ipynb`\n  \n  - `os.path.exists()`, `os.remove()`, and `shutils.rmtree()` can also be helpful here.\n    \n\n#### Push your changes to a new fork of this repository\n\n\n#### Add a GitHub Action that runs the tests on push\n\nDo this in the web browser.  Use the `Python Package using Anaconda` or `Python Application` templates under the `GitHub Actions` tab to get started.\n\n*Tip*: Start with a small number of tests, re-running the pipeline stepwise to ensure that it continues to work.\n\n\n\n## Packaging and Publishing\n\n### Publishing on PyPI\n\n| Step | Description |\n| :-- | :-- | \n| `pyproject.toml`| [Make the file in the root directory that contains the build instructions and project metadata](https://packaging.python.org/en/latest/tutorials/packaging-projects/#creating-pyproject-toml)\n| `pip install build; python -m build` | Builds distribution files in a venv using the `pyproject.toml` file | \n| `pip install twine; twine check dist/*` | Check that the dist files have the needed metadata |\n| `twine upload --repository-url=https://test.pypi.org/legacy/ dist/*` | [Upload the dist files](https://packaging.python.org/en/latest/tutorials/packaging-projects/#uploading-the-distribution-archives).  Make sure you have an account on the test.pypi.org site. |\n\n\n### Github Actions: Deploy on Tagged Push or Release\n\n| Step | Description |\n| :-- | :-- |\n| `git tag -a v1.4 -m \"my version 1.4\";` | [Make an annotated tag](https://git-scm.com/book/en/v2/Git-Basics-Tagging)\n| `git push origin --tags` | Push tags |\n| `  if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')` | [In the GA step, only does the step if there was a tag](https://github.com/pypa/gh-action-pypi-publish#usage) |\n| `  release:    types: [ created ]` | Run workflow on GH release creation |\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nickscoolproject2342",
    "package_url": "https://pypi.org/project/nickscoolproject2342/",
    "platform": null,
    "project_url": "https://pypi.org/project/nickscoolproject2342/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/nickscoolproject2342/0.0.1/",
    "requires_dist": [
      "requests",
      "pandas",
      "matplotlib",
      "seaborn",
      "jupyterlab",
      "ipykernel"
    ],
    "requires_python": ">=3.6",
    "summary": "Lovely Spam! Wonderful Spam!",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16100330,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e06ee281ff4d8823eafb1bcd4715b37132337d51814b0ee3f1c6fa8cdffd8bb",
          "md5": "83cbc4228be5726f6d48baa418dd1053",
          "sha256": "2fbfe49ef989046920f56aad87670e1a460a1a6cf006642277324976e0370bc0"
        },
        "downloads": -1,
        "filename": "nickscoolproject2342-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83cbc4228be5726f6d48baa418dd1053",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3380,
        "upload_time": "2022-12-14T13:44:29",
        "upload_time_iso_8601": "2022-12-14T13:44:29.169997Z",
        "url": "https://files.pythonhosted.org/packages/8e/06/ee281ff4d8823eafb1bcd4715b37132337d51814b0ee3f1c6fa8cdffd8bb/nickscoolproject2342-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e06ee281ff4d8823eafb1bcd4715b37132337d51814b0ee3f1c6fa8cdffd8bb",
        "md5": "83cbc4228be5726f6d48baa418dd1053",
        "sha256": "2fbfe49ef989046920f56aad87670e1a460a1a6cf006642277324976e0370bc0"
      },
      "downloads": -1,
      "filename": "nickscoolproject2342-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "83cbc4228be5726f6d48baa418dd1053",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 3380,
      "upload_time": "2022-12-14T13:44:29",
      "upload_time_iso_8601": "2022-12-14T13:44:29.169997Z",
      "url": "https://files.pythonhosted.org/packages/8e/06/ee281ff4d8823eafb1bcd4715b37132337d51814b0ee3f1c6fa8cdffd8bb/nickscoolproject2342-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}