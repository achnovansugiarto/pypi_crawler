{
  "info": {
    "author": "Nikolay Novik",
    "author_email": "nickolainovik@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Database",
      "Topic :: Database :: Front-Ends"
    ],
    "description": "aiomysql\n========\n.. image:: https://travis-ci.com/Privex/aiomysql.svg?branch=master\n    :target: https://travis-ci.com/Privex/aiomysql\n.. image:: https://codecov.io/gh/Privex/aiomysql/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/Privex/aiomysql\n    :alt: Code coverage\n.. image:: https://badge.fury.io/py/privex-aiomysql.svg\n    :target: https://badge.fury.io/py/privex-aiomysql\n    :alt: Latest Version\n.. image:: https://readthedocs.org/projects/aiomysql/badge/?version=latest\n    :target: https://aiomysql.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://badges.gitter.im/Join%20Chat.svg\n    :target: https://gitter.im/aio-libs/Lobby\n    :alt: Chat on Gitter\n\n**aiomysql** is a \"driver\" for accessing a `MySQL` database\nfrom the asyncio_ (PEP-3156/tulip) framework. It depends on and reuses most\nparts of PyMySQL_ . *aiomysql* tries to be like awesome aiopg_ library and\npreserve same api, look and feel.\n\nInternally **aiomysql** is copy of PyMySQL, underlying io calls switched\nto async, basically ``yield from`` and ``asyncio.coroutine`` added in\nproper places)). `sqlalchemy` support ported from aiopg_.\n\n**NOTE:** This is a **fork** maintained by [Privex Inc.](https://www.privex.io), which we use internally to speed up\ndevelopment when we require features / bug fixes that haven't yet / won't be accepted into upstream.\n\n**FORK PACKAGE:** We publish the package ``privex-aiomysql`` to PyPi for this fork. Please be warned that the versioning may not\nmatch upstream's versioning, due to modifications made by ourselves.\n\nDocumentation\n-------------\nhttps://aiomysql.readthedocs.io/\n\n\nMailing List\n------------\nhttps://groups.google.com/forum/#!forum/aio-libs\n\n\nBasic Example\n-------------\n\n**aiomysql** based on PyMySQL_ , and provides same api, you just need\nto use  ``await conn.f()`` or ``yield from conn.f()`` instead of calling\n``conn.f()`` for every method.\n\nProperties are unchanged, so ``conn.prop`` is correct as well as\n``conn.prop = val``.\n\n.. code:: python\n\n    import asyncio\n    import aiomysql\n\n\n    async def test_example(loop):\n        pool = await aiomysql.create_pool(host='127.0.0.1', port=3306,\n                                          user='root', password='',\n                                          db='mysql', loop=loop)\n        async with pool.acquire() as conn:\n            async with conn.cursor() as cur:\n                await cur.execute(\"SELECT 42;\")\n                print(cur.description)\n                (r,) = await cur.fetchone()\n                assert r == 42\n        pool.close()\n        await pool.wait_closed()\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(test_example(loop))\n\n\nExample of SQLAlchemy optional integration\n------------------------------------------\nSqlalchemy support has been ported from aiopg_ so api should be very familiar\nfor aiopg_ user.:\n\n.. code:: python\n\n    import asyncio\n    import sqlalchemy as sa\n\n    from aiomysql.sa import create_engine\n\n\n    metadata = sa.MetaData()\n\n    tbl = sa.Table('tbl', metadata,\n                   sa.Column('id', sa.Integer, primary_key=True),\n                   sa.Column('val', sa.String(255)))\n\n\n    async def go(loop):\n        engine = await create_engine(user='root', db='test_pymysql',\n                                     host='127.0.0.1', password='', loop=loop)\n        async with engine.acquire() as conn:\n            await conn.execute(tbl.insert().values(val='abc'))\n            await conn.execute(tbl.insert().values(val='xyz'))\n\n            async for row in conn.execute(tbl.select()):\n                print(row.id, row.val)\n\n        engine.close()\n        await engine.wait_closed()\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(go(loop))\n\n\nRequirements\n------------\n\n* Python_ 3.5.3+\n* PyMySQL_\n\n\n.. _Python: https://www.python.org\n.. _asyncio: http://docs.python.org/3.5/library/asyncio.html\n.. _aiopg: https://github.com/aio-libs/aiopg\n.. _PyMySQL: https://github.com/PyMySQL/PyMySQL\n.. _Tornado-MySQL: https://github.com/PyMySQL/Tornado-MySQL\n\nChanges\n-------\n\n0.0.20 (2018-12-19)\n^^^^^^^^^^^^^^^^^^^\n\n* Fixed connect_timeout #360\n\n* Fixed support for SQLA executemany #324\n\n* Fix the python 3.7 compatibility #357\n\n* Fixed reuse connections when StreamReader has an exception #339\n\n* Fixes warning when inserting binary strings #326\n\n\n0.0.19 (2018-07-12)\n^^^^^^^^^^^^^^^^^^^\n\n* See v0.0.18\n\n\n0.0.18 (2018-07-09)\n^^^^^^^^^^^^^^^^^^^\n\n* Updated to support latest PyMySQL changes.\n\n* aiomysql now sends client connection info.\n\n* MySQL8+ Support including sha256_password and cached_sha2_password authentication plugins.\n\n* Default max packet length sent to the server is no longer 1.\n\n* Fixes issue where cursor.nextset can hang on query sets that raise errors.\n\n\n0.0.17 (2018-07-06)\n^^^^^^^^^^^^^^^^^^^\n\n* Pinned version of PyMySQL\n\n\n0.0.16 (2018-06-03)\n^^^^^^^^^^^^^^^^^^^\n\n* Added ability to execute precompiled sqlalchemy queries #294 (Thanks @vlanse)\n\n\n0.0.15 (2018-05-20)\n^^^^^^^^^^^^^^^^^^^\n\n* Fixed handling of user-defined types for sqlalchemy  #290\n\n* Fix KeyError when server reports unknown collation #289\n\n\n0.0.14 (2018-04-22)\n^^^^^^^^^^^^^^^^^^^\n\n* Fixed SSL connection finalization  #282\n\n\n0.0.13 (2018-04-19)\n^^^^^^^^^^^^^^^^^^^\n\n* Added SSL support #280 (Thanks @terrycain)\n\n* Fixed __all__ in aiomysql/__init__ #270 (Thanks @matianjun1)\n\n* Added docker fixtures #275 (Thanks @terrycain)\n\n\n0.0.12 (2018-01-18)\n^^^^^^^^^^^^^^^^^^^\n\n* Fixed support for SQLAlchemy 1.2.0\n\n* Fixed argument for cursor.execute in sa engine #239 (Thanks @NotSoSuper)\n\n\n0.0.11 (2017-12-06)\n^^^^^^^^^^^^^^^^^^^\n\n* Fixed README formatting on pypi\n\n\n0.0.10 (2017-12-06)\n^^^^^^^^^^^^^^^^^^^\n\n* Updated regular expressions to be compatible with pymysql #167 (Thanks @AlexLisovoy)\n\n* Added connection recycling in the pool #216\n\n\n0.0.9 (2016-09-14)\n^^^^^^^^^^^^^^^^^^\n\n* Fixed AttributeError in  _request_authentication function #104 (Thanks @ttlttl)\n\n* Fixed legacy auth #105\n\n* uvloop added to test suite #106\n\n* Fixed bug with unicode in json field #107 (Thanks @methane)\n\n\n0.0.8 (2016-08-24)\n^^^^^^^^^^^^^^^^^^\n\n* Default min pool size reduced to 1 #80 (Thanks @Drizzt1991)\n\n* Update to PyMySQL 0.7.5 #89\n\n* Fixed connection cancellation in process of executing a query #79 (Thanks @Drizzt1991)\n\n\n0.0.7 (2016-01-27)\n^^^^^^^^^^^^^^^^^^\n\n* Fix for multiple results issue, ported from pymysql #52\n\n* Fixed useless warning with no_delay option #55\n\n* Added async/await support for Engine, SAConnection, Transaction #57\n\n* pool.release returns future so we can wait on it in __aexit__ #60\n\n* Update to PyMySQL 0.6.7\n\n\n0.0.6 (2015-12-11)\n^^^^^^^^^^^^^^^^^^\n\n* Fixed bug with SA rollback (Thanks @khlyestovillarion!)\n\n* Fixed issue with default no_delay option (Thanks @khlyestovillarion!)\n\n\n0.0.5 (2015-10-28)\n^^^^^^^^^^^^^^^^^^\n\n* no_delay option is deprecated and True by default\n\n* Add Cursor.mogrify() method\n\n* Support for \"LOAD LOCAL INFILE\" query.\n\n* Check connection inside pool, in case of timeout drop it, fixes #25\n\n* Add support of python 3.5 features to pool, connection and cursor\n\n\n0.0.4 (2015-05-23)\n^^^^^^^^^^^^^^^^^^\n\n* Allow to call connection.wait_closed twice.\n\n* Fixed sqlalchemy 1.0.0 support.\n\n* Fix #11: Rename Connection.wait_closed() to .ensure_closed()\n\n* Raise ResourceWarning on non-closed Connection\n\n* Rename Connection.connect to _connect\n\n\n0.0.3 (2015-03-10)\n^^^^^^^^^^^^^^^^^^\n\n* Added support for PyMySQL up to 0.6.6.\n\n* Ported improvements from PyMySQL.\n\n* Added basic documentation.\n\n* Fixed and added more examples.\n\n\n0.0.2 (2015-02-17)\n^^^^^^^^^^^^^^^^^^\n\n* Added MANIFEST.in.\n\n\n0.0.1 (2015-02-17)\n^^^^^^^^^^^^^^^^^^\n\n* Initial release.\n\n* Implemented plain connections: connect, Connection, Cursor.\n\n* Implemented database pools.\n\n* Ported sqlalchemy optional support.\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://pypi.python.org/pypi/aiomysql",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aio-libs/aiomysql",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "privex-aiomysql",
    "package_url": "https://pypi.org/project/privex-aiomysql/",
    "platform": "POSIX",
    "project_url": "https://pypi.org/project/privex-aiomysql/",
    "project_urls": {
      "Download": "https://pypi.python.org/pypi/aiomysql",
      "Homepage": "https://github.com/aio-libs/aiomysql"
    },
    "release_url": "https://pypi.org/project/privex-aiomysql/0.0.21/",
    "requires_dist": [
      "PyMySQL (<=0.9.2,>=0.9)",
      "sqlalchemy (>=1.0) ; extra == 'sa'"
    ],
    "requires_python": "",
    "summary": "MySQL driver for asyncio.",
    "version": "0.0.21",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6885460,
  "releases": {
    "0.0.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d95bdfa4391999288d37f973a6f5ab41100fda946097b00e8150c5d3c14c1b34",
          "md5": "58aacfe5e2c16774989166c75a9c59ba",
          "sha256": "21d477210fc84616699dfee56503df49360df225b053389461ca297d7c7efb3f"
        },
        "downloads": -1,
        "filename": "privex_aiomysql-0.0.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58aacfe5e2c16774989166c75a9c59ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 41104,
        "upload_time": "2020-03-25T22:25:34",
        "upload_time_iso_8601": "2020-03-25T22:25:34.046781Z",
        "url": "https://files.pythonhosted.org/packages/d9/5b/dfa4391999288d37f973a6f5ab41100fda946097b00e8150c5d3c14c1b34/privex_aiomysql-0.0.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "881ae6d168bfc18408eb80d6ce60cba0ecb38f48909e15d284927c7e30da3de9",
          "md5": "38966ba822eb7bfeaab19ae4ea039af7",
          "sha256": "f23a9d1e032123a33b45975b64612ecd3bd828e5790839478950bc3e2c8c3f00"
        },
        "downloads": -1,
        "filename": "privex_aiomysql-0.0.21.tar.gz",
        "has_sig": false,
        "md5_digest": "38966ba822eb7bfeaab19ae4ea039af7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39753,
        "upload_time": "2020-03-25T22:25:36",
        "upload_time_iso_8601": "2020-03-25T22:25:36.724911Z",
        "url": "https://files.pythonhosted.org/packages/88/1a/e6d168bfc18408eb80d6ce60cba0ecb38f48909e15d284927c7e30da3de9/privex_aiomysql-0.0.21.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d95bdfa4391999288d37f973a6f5ab41100fda946097b00e8150c5d3c14c1b34",
        "md5": "58aacfe5e2c16774989166c75a9c59ba",
        "sha256": "21d477210fc84616699dfee56503df49360df225b053389461ca297d7c7efb3f"
      },
      "downloads": -1,
      "filename": "privex_aiomysql-0.0.21-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "58aacfe5e2c16774989166c75a9c59ba",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 41104,
      "upload_time": "2020-03-25T22:25:34",
      "upload_time_iso_8601": "2020-03-25T22:25:34.046781Z",
      "url": "https://files.pythonhosted.org/packages/d9/5b/dfa4391999288d37f973a6f5ab41100fda946097b00e8150c5d3c14c1b34/privex_aiomysql-0.0.21-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "881ae6d168bfc18408eb80d6ce60cba0ecb38f48909e15d284927c7e30da3de9",
        "md5": "38966ba822eb7bfeaab19ae4ea039af7",
        "sha256": "f23a9d1e032123a33b45975b64612ecd3bd828e5790839478950bc3e2c8c3f00"
      },
      "downloads": -1,
      "filename": "privex_aiomysql-0.0.21.tar.gz",
      "has_sig": false,
      "md5_digest": "38966ba822eb7bfeaab19ae4ea039af7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 39753,
      "upload_time": "2020-03-25T22:25:36",
      "upload_time_iso_8601": "2020-03-25T22:25:36.724911Z",
      "url": "https://files.pythonhosted.org/packages/88/1a/e6d168bfc18408eb80d6ce60cba0ecb38f48909e15d284927c7e30da3de9/privex_aiomysql-0.0.21.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}