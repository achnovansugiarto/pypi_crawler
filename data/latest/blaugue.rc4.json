{
  "info": {
    "author": "CAMARM-DEV",
    "author_email": "armand@camponovo.xyz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Documentation:\n\n## Basic usage:\n```python\nfrom blaugue.api import Blaugue\n\nblaugueAPI = Blaugue(email='armand@camponovo.xyz', password='password')\n\nsearch = blaugueAPI.search('query') # search 'query'\nresults = search.results # all results\nfor i in results:\n    print(f'Object {i.__class__.__name__}') # print class name of result i\nusers = blaugueAPI.all_users()\nfor i in users:\n    print(i.name)\n\n```\n\n## Chat usage:\n```python\nfrom blaugue.api import Blaugue\n\napi = Blaugue(email='armand@camponovo.xyz', password='password')\n\nchats = api.get_chats() # get all chats and return BlaugueChat() list\n\nfor chat in chats:\n    print(chat.name) # print chat name\n    for message in chat.messages:\n        if chat.id == 'blaugue':  # all of users are in this chat, message.receiver will return a list\n            print(message.author.name)\n            print([user.name for user in message.receiver])  # print list of string of usernames\n        else:\n            print(message.author.name)\n            print(message.receiver.name)\n    print('\\n\\n')\n```\n\n## Type variables:\n#### If you use an intelligent ide, type your variables to improve coding experience\n```python\nfrom blaugue.user import BlaugueUser\nfrom blaugue.post import BlauguePost\nfrom blaugue.tag import BlaugueTag\nfrom blaugue.api import Blaugue\nfrom blaugue.chat import BlaugueChat, BlaugueMessage\n\napi = Blaugue(email='armand@camponovo.xyz', password='password')\n\nsearch = api.search('armand')\n\nposts = search.posts_results\npost: BlauguePost\nusers = search.users_results\nuser: BlaugueUser\ntags = search.tags_results\ntag: BlaugueTag\nchat: BlaugueChat\nmessage: BlaugueMessage\n\nfor post in posts:\n    print(post.title)\n\nfor tag in tags:\n    print(tag.name)\n\nfor user in users:\n    print(user.name)\n\nfor chat in api.get_chats():\n    print(chat.name)\n    for message in chat.messages:\n        print(message.author.name)\n```\n\n## Classes:\n### blaugue.api.Blaugue():\ninit:<br>\n> Blaugue(email='you@email.com', password='12345')<br>\n\nmethods:\n> `search(self, query)`: return [BlaugueResults()](#blauguesearchblaugueresults) of query<br>\n> `get_user(self, email)`: return [BlaugueUser()](#blaugueuserblaugueuser) of email<br>\n> `get_post(self, post_id)`: return [BlauguePost()](#blauguepostblauguepost) of post id<br>\n> `get_lasts_post(self)`: return list of [BlauguePost()](#blauguepostblauguepost) of last ten posts<br>\n> `get_chats(self)`: return list of [BlaugueChat()](#blauguechatblauguechat) of all chats (can be accessed by connected user)<br>\n> `get_chat(self, chat_id)`: return [BlaugueChat()](#blauguechatblauguechat) object of chat<br>\n> `all_users(self)`: return list of [BlaugueUser()](#blaugueuserblaugueuser) of all users<br>\n\nproperties:\n\n> `None`: return None\n\n### blaugue.search.BlaugueResults():\n\ninit:<br>\n\n> BlaugueResults(infos, super)<br>\n\nmethods:\n\n> `None`: return None\n\nproperties:\n\n> `results`: return a list of [BlaugueUser()](#blaugueuserblaugueuser) / [BlauguePost()](#blauguepostblauguepost) / [BlaugueTag()](#blauguetagblauguetag) objects<br>\n> `json_results`: return a json with results<br>\n> `users_results`: return a list of [BlaugueUser()](#blaugueuserblaugueuser) objects<br>\n> `posts_results`: return a list of [BlauguePost()](#blauguepostblauguepost) objects<br>\n> `tags_results`: return a list of [BlaugueTag()](#blauguetagblauguetag) objects<br>\n\n<br>\n\n### blaugue.user.BlaugueUser():\n\ninit:<br>\n\n> BlaugueUser(infos, super)<br>\n\nmethods:\n\n> `None`: return None\n\nproperties:\n\n> `name`: return str of user's name<br>\n> `id`: return str of user's id<br>\n> `avatar`: return str of user's avatar url<br>\n> `premium`: return bool (True if user is premium, False else)<br>\n> `premium_icon`: return str of user's premium icon url<br>\n> `bot`: return bool (True if user is a bot, False else)<br>\n> `badges`: return list of user's badges<br>\n> `description`: return str of user's description<br>\n> `url`: return str of user's profil url<br>\n\n<br>\n\n### blaugue.post.BlauguePost():\n\ninit:<br>\n\n> BlauguePost(infos, super)<br>\n\nmethods:\n\n> `None`: return None\n\nproperties:\n\n> `title`: return str of post's title<br>\n> `subtitle`: return str of post's subtitle<br>\n> `html_content`: return str of post's html_content<br>\n> `markdown_content`: return str of post's markdown_content<br>\n> `image`: return str of post's cover image url<br>\n> `book`: return str of post's book url<br>\n> `id`: return str of post's id<br>\n> `url`: return str of post's url<br>\n> `author`: return [BlaugueUser()](#blaugueuserblaugueuser) of post's author<br>\n> `type`: return [BlaugueTag()](#blauguetagblauguetag) of post's tag / type<br>\n> `comments`: return list of dict of post's comments<br>\n\n<br>\n\n### blaugue.tag.BlaugueTag():\n\ninit:<br>\n\n> BlaugueTag(infos, super)<br>\n\nmethods:\n\n> `None`: return None\n\nproperties:\n\n> `name`: return str of tag's name<br>\n> `posts`: return list of [BlauguePost()](#blauguepostblauguepost) of tag's posts<br>\n> `url`: return str of tag's url<br>\n\n<br>\n\n### blaugue.chat.BlaugueChat():\n\ninit:<br>\n\n> BlaugueChat(infos, super)<br>\n\nmethods:\n\n> `None`: return None\n\nproperties:\n\n> `name`: return str of chat's name<br>\n> `id`: return str of chat's id (can be used to get a chat)<br>\n> `messages`: return list of [BlaugueMessage()](#blauguechatblauguemessage) objects<br>\n\n<br>\n\n### blaugue.chat.BlaugueMessage():\n\ninit:<br>\n\n> BlaugueMessage(infos, super, chat)<br>\n\nmethods:\n\n> `None`: return None\n\nproperties:\n\n> `html_content`: return str of message's html content (with < br > and &nbsp ;)<br>\n> `content`: return str of message's content (without < br > and &nbsp ;)<br>\n> `author`: return [BlaugueUser()](#blaugueuserblaugueuser) object of message's author<br>\n> `receiver`: return [BlaugueUser()](#blaugueuserblaugueuser) object of message's receiver (list of if chat is the common chat)<br>\n\n<br>\n\n## Get information about connected account:\n```python\nfrom blaugue.api import Blaugue\n\nblaugueAPI = Blaugue(email='armand@camponovo.xyz', password='password')\n\n# check if account has been connected\nif bool(blaugueAPI):\n    print('Account informations are right !')\n\n# get name of connected account\nprint(str(blaugueAPI))\n    \n# get token of connected account\nprint(next(blaugueAPI))\n\n# get bytes of hash of password of current account\nprint(bytes(blaugueAPI))\n\n# get BlaugueUser() object of connected account\nconnected = blaugueAPI.connected\nprint(connected.name)\nprint(connected.avatar)\nprint(connected.premium_icon)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "conversion",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "blaugue",
    "package_url": "https://pypi.org/project/blaugue/",
    "platform": "",
    "project_url": "https://pypi.org/project/blaugue/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/blaugue/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Official Blaugue API package",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11857349,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db3cbbd589f1f72ddac288b5db0436d19cd601929023a67531699184ac530e7b",
          "md5": "3118b9d01915e619099b90f3d4de5f05",
          "sha256": "d7fde9e2e97199a789f9eaad32ac9cbc5768b0e7b6628e25287c9e0777de0e95"
        },
        "downloads": -1,
        "filename": "blaugue-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3118b9d01915e619099b90f3d4de5f05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7197,
        "upload_time": "2021-09-08T13:08:05",
        "upload_time_iso_8601": "2021-09-08T13:08:05.971964Z",
        "url": "https://files.pythonhosted.org/packages/db/3c/bbd589f1f72ddac288b5db0436d19cd601929023a67531699184ac530e7b/blaugue-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a06f9e4cba41ed3b7ce8d4190925c3ef7d89f834c4768d47b83848086c76f17",
          "md5": "482d4852faa05ac25c46c48b53a02340",
          "sha256": "f23672e7f3d11094b20241a9c56f9ffb41235e0e47b903ab569861f56c5aef32"
        },
        "downloads": -1,
        "filename": "blaugue-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "482d4852faa05ac25c46c48b53a02340",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6599,
        "upload_time": "2021-09-08T13:16:18",
        "upload_time_iso_8601": "2021-09-08T13:16:18.798532Z",
        "url": "https://files.pythonhosted.org/packages/8a/06/f9e4cba41ed3b7ce8d4190925c3ef7d89f834c4768d47b83848086c76f17/blaugue-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c24b5fc022f787ad5b1b55e16704d927abed39071b87b03adc9354ab55446ce",
          "md5": "ecbce17b6d2c76c1fb65724de137deee",
          "sha256": "e65b0174f4c2dababc473a2c948a80b0ddfde2a8145cf2f2488b184b92cfee9b"
        },
        "downloads": -1,
        "filename": "blaugue-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ecbce17b6d2c76c1fb65724de137deee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6656,
        "upload_time": "2021-09-08T17:22:00",
        "upload_time_iso_8601": "2021-09-08T17:22:00.630791Z",
        "url": "https://files.pythonhosted.org/packages/3c/24/b5fc022f787ad5b1b55e16704d927abed39071b87b03adc9354ab55446ce/blaugue-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcb5c8ae508543c4b652c6ce4d7d06d53df0b7059c2b38c9bf44058e148628e7",
          "md5": "959df6e1e1bdbe7a95b107a3fce5e6ba",
          "sha256": "a042794f3243f05bd18abe4d5950d91827ba22301542ab785de99a3633a3bfa7"
        },
        "downloads": -1,
        "filename": "blaugue-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "959df6e1e1bdbe7a95b107a3fce5e6ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6686,
        "upload_time": "2021-10-28T13:20:06",
        "upload_time_iso_8601": "2021-10-28T13:20:06.124485Z",
        "url": "https://files.pythonhosted.org/packages/fc/b5/c8ae508543c4b652c6ce4d7d06d53df0b7059c2b38c9bf44058e148628e7/blaugue-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fcb5c8ae508543c4b652c6ce4d7d06d53df0b7059c2b38c9bf44058e148628e7",
        "md5": "959df6e1e1bdbe7a95b107a3fce5e6ba",
        "sha256": "a042794f3243f05bd18abe4d5950d91827ba22301542ab785de99a3633a3bfa7"
      },
      "downloads": -1,
      "filename": "blaugue-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "959df6e1e1bdbe7a95b107a3fce5e6ba",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6686,
      "upload_time": "2021-10-28T13:20:06",
      "upload_time_iso_8601": "2021-10-28T13:20:06.124485Z",
      "url": "https://files.pythonhosted.org/packages/fc/b5/c8ae508543c4b652c6ce4d7d06d53df0b7059c2b38c9bf44058e148628e7/blaugue-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}