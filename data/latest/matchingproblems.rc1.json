{
  "info": {
    "author": "Frances Cooper",
    "author_email": "fmcooper234@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# matchingproblems\n\nThis python package can generate and solve single or multiple matching problem instances using the PuLP Linear Program (LP) Solver.\n\nIt can be used both for individual real-world runs (for example to assign students to projects at your university), and for experimental work including correctness testing of the LP using a brute force approach (smaller instances only).\n\n1) Installation\n2) Generator\n3) Solver\n4) Testing details\n\n## 1) Installation\n\nThe simplest way to install this package is via Pip.\n\n```\npip install matchingproblems\n```\n\nAlternatively the package may be downloaded from this [git repository](https://github.com/fmcooper/matchingproblems) and installed manually.\n\n## 2) Generator\nInstances of the following types can be generated:\n* HA - House Allocation Problem (and variants)\n* SM - Stable Marriage Problem (and variants)\n* HR - Hospital/Residents Problem (and variants)\n* SPA - Student-Project Allocation Problem (and variants)\n\nFor a definition of each of these problems, please see Chapter 2 of [this thesis](http://theses.gla.ac.uk/81622/).\n\nExample run_generator.py script to run the generator:\n\n```\nfrom matchingproblems import generator\nimport sys\n\nif __name__ == \"__main__\":\n    generator = generator.Generator(sys.argv[1:])\n```\n\nThis program may then be called as follows:\n\n```\npython run_generator.py [-h] -numinst NUMBERINSTANCES -o OUTPUTDIRECTORY -mp {ha,sm,hr,spa} \n                        [-twopl] [-skew SKEW] [-n1 N1] [-n2 N2] [-n3 N3] \n                        [-pmin MINPREFLISTLENGTH] [-pmax MAXPREFLISTLENGTH] [-t1 TIES1] [-t2 TIES2]\n                        [-lq LOWERQUOTAS] [-uq UPPERQUOTAS] [-llq LECTURERLOWERQUOTAS] [-luq LECTURERUPPERQUOTAS] [-lt LECTURERTARGETS]\n```\n\nAlternatively, arguments may be defined in the python script itself.\n\nArguments have the following meanings:\n\nArgument | Meaning\n--- | ---\n`-h, --help` | Show help message and exit.\n`-numinst x, --numberinstances x` | Total number of instances to generate.\n`-o x, --outputdirectory x` | Output directory path.\n`-mp {ha,sm,hr,spa}, --matchingproblem {ha,sm,hr,spa}` | Matching problem type, as specified above.\n`-twopl, --preferencelists2` | Preference lists on both sides of the matching problem.\n`-skew x, --linearskew x` | Linear skew for preference lists, a value of x indicates that the most popular agent is x times more popular than the least.\n`-n1 x, --numberofagents1 x` | Number of applicants (HA) / men (SM) / residents (HR) / students (SPA).\n`-n2 x, --numberofagents2 x` | Number of houses (HA) / hospitals (HR) / projects (SPA).\n`-n3 x, --numberofagents3 x` | Number of lecturers (SPA).\n`-pmin x, --minpreflistlength x` | Minimum size of preference lists for applicants (HA) / men (SM) / residents (HR) / students (SPA).\n`-pmax x, --maxpreflistlength x` | Maximum size of preference lists for applicants (HA) / men (SM) / residents (HR) / students (SPA).\n`-t1 x, --ties1 x` | Probability of ties for applicants (HA) / men (SM) / residents (HR) / students (SPA) [0.0, 1.0].\n`-t2 x, --ties2 x` | Probability of ties for women (SM) / hospitals (HR) / lecturers (SPA) [0.0, 1.0].\n`-lq x, --lowerquotas x` | Sum of lower quotas for houses (HA) / hospitals (HR) / projects (SPA).\n`-uq x, --upperquotas x` | Sum of upper quotas for houses (HA) / hospitals (HR) / projects (SPA).\n`-llq x, --lecturerlowerquotas x` | Sum of lower quotas for lecturers (SPA).\n`-lt x, --lecturertargets x` | Sum of targets for lecturers (SPA).\n`-luq x, --lecturerupperquotas x` | Sum of upper quotas for lecturers (SPA).\n\nHA instances require the following arguments to be specified: `-n1 -n2 -pmin -pmax -uq`\n\nSM instances require the following arguments to be specified: `-n1 -pmin -pmax -twopl`\n\nHR instances require the following arguments to be specified: `-n1 -n2 -pmin -pmax -uq -twopl`\n\nSPA instances require the following arguments to be specified: `-n1 -n2 -n3 -pmin -pmax -uq -luq`\n\n\n    \nTwo examples of calls to run_generator.py are as follows:\n```\n# Generates 5 HR instances\npython run_generator.py -numinst 5 -o ./hr/instances -mp hr -n1 6 -n2 4 -pmin 2 -pmax 4 -t1 0.2 -t2 0.2 -skew 5 -lq 4 -uq 6 -twopl\n```\n```\n# Generates 5 SPA instances with one-sided preference lists\npython run_generator.py -numinst $NUMINSTANCES -o ./spa/instances -mp spa -n1 6 -n2 8 -n3 4 -pmin 3 -pmax 5 -t1 0.2 -t2 0.2 -skew 5 -lq 4 -uq 10 -llq 1 -lt 4 -luq 10 -twopl\n```\n   \n## 3) Solver\n\nEach input instance of HA, SM, HR or SPA is converted into an instance of SPA-STL (the Student-Project Allocation Problem with lecturer preferences over Students including Ties and Lecturer targets) and solved using the PuLP LP Solver.\n\nExample run_solver.py script to run the solver:\n\n```\nfrom matchingproblems import solver\nimport sys\n\nif __name__ == \"__main__\":\n    solver = solver.Solver(sys.argv[1:])\n    solver.solve(msg=False, timeLimit=None, threads=None, write=False)\n    # print(solver.get_debug())\n    # print(solver.get_results())\n    # print(solver.get_results_short())\n    print(solver.get_results_long())\n```\n\n\nThis program may then be called as follows:\n\n```\npython run_solver.py [-h] -f FILENAME -na NUMAGENTS \n                     [-twopl] [-pc] [-stab] [-maxsize MAXSIZE] [-minsize MINSIZE] [-gen GEN]\n                     [-gre GRE] [-mincost MINCOST] [-minsqcost MINSQCOST] [-lmb LMB] [-lsb LSB] [-bf]\n```\n\nAs with the generator, an alternative is to specify arguments in the python script.\n\nArguments have the following meanings:\n\nArgument | Meaning\n--- | ---\n`-h, --help` | Show help message and exit.\n`-f x, -filename x` | Input file name.\n`-na x, -numagents x` | Number of agents in the instance (2 for HA, SM and HR, 3 for SPA).\n`-twopl, -twosidedpreferencelists` | Men (SM), Hospital (HR) or lecturer (SPA) preference lists present.\n`-pc, -projectclosures` | Project closures allowed.\n`-stab, -stability` | Add stability constraints\n`-maxsize x, -maximisesize x` | Maximise size at the given optimisation position.\n`-minsize x, -minimisesize x` | Minimise size at the given optimisation position.\n`-gen x, -generous x` | Performs generous optimisation at the given optimisation position.\n`-gre x, -greedy x` | Performs greedy optimisation at the given optimisation position.\n`-mincost x, -minimisecost x` | Minimise cost at the given optimisation position.\n`-minsqcost x, -minimisesquaredcost x` | Minimises sum of squares of costs at the given optimisation position.\n`-lmb x, -loadmaxbalanced x` | Minimises the maximum absolute difference between lecturer occupancy and target at the given optimisation position.\n`-lsb x, -loadsumbalanced x` | Minimises the sum of absolute differences between lecturer occupancies and targets at the given optimisation position.\n`-bf, -bruteforce` | Solve using the brute force method.\n\n\nTwo examples of calls to run_solver.py are as follows:\n```\n# Find a generous maximum matching in an HA, SM or HR instance.\npython run_solver.py -f ./path/to/instance.txt genmax -na 2 -maxsize 1 -gen 2 -twopl\n```\n```\n# Find optimal assignments for an SPA instance with one sided preference lists using a brute force approach.\npython run_solver.py -f ./path/to/instance.txt -na 3 -bf\n```       \n\n\n## 4) Testing details\n\nUnit tests may be run by executing the `test.sh` script in this [git repository](https://github.com/fmcooper/matchingproblems).\n\nCorrectness testing which compared output from the LP Solver and brute force programs was conducted on some optimisations. Results for this testing can be seen at this [zenodo repository](10.5281/zenodo.4065148).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/fmcooper/matchingproblems",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "matchingproblems",
    "package_url": "https://pypi.org/project/matchingproblems/",
    "platform": "",
    "project_url": "https://pypi.org/project/matchingproblems/",
    "project_urls": {
      "Homepage": "http://github.com/fmcooper/matchingproblems"
    },
    "release_url": "https://pypi.org/project/matchingproblems/1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A matching problem generator and solver.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8336157,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad6391570961010aa60e3a6ce539cf5681df1a872f4c51ae50a163cf169d10cc",
          "md5": "47239dd446b68933a319a50d45c3a89b",
          "sha256": "30ceb1cecdba29cb98ace6495e7617d03c078faba300c3aac94c390518a5a1b1"
        },
        "downloads": -1,
        "filename": "matchingproblems-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "47239dd446b68933a319a50d45c3a89b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27439,
        "upload_time": "2020-10-04T09:40:09",
        "upload_time_iso_8601": "2020-10-04T09:40:09.223523Z",
        "url": "https://files.pythonhosted.org/packages/ad/63/91570961010aa60e3a6ce539cf5681df1a872f4c51ae50a163cf169d10cc/matchingproblems-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad6391570961010aa60e3a6ce539cf5681df1a872f4c51ae50a163cf169d10cc",
        "md5": "47239dd446b68933a319a50d45c3a89b",
        "sha256": "30ceb1cecdba29cb98ace6495e7617d03c078faba300c3aac94c390518a5a1b1"
      },
      "downloads": -1,
      "filename": "matchingproblems-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "47239dd446b68933a319a50d45c3a89b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 27439,
      "upload_time": "2020-10-04T09:40:09",
      "upload_time_iso_8601": "2020-10-04T09:40:09.223523Z",
      "url": "https://files.pythonhosted.org/packages/ad/63/91570961010aa60e3a6ce539cf5681df1a872f4c51ae50a163cf169d10cc/matchingproblems-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}