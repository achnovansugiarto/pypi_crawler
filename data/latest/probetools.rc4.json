{
  "info": {
    "author": "Kevin Kuchinski",
    "author_email": "kevin.kuchinski@bccdc.ca",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ProbeTools\nProbeTools is a collection of general-purpose modules for designing hybridization probe panels targeting diverse and hypervariable viral taxa. The objective of ProbeTools is to generate the smallest possible panel of oligo sequences that maximizes coverage of provided target sequences. It is based on k-mer clustering. In brief, probe-length k-mers are enumerated from the target space, usually spaced one nucleotide apart so that all possible k-mers are enumerated. The k-mers are then clustered based on their nucleotide sequence identity to collapse redundant probes enumerated from conserved genomic loci. Cluster centroids become probe candidates, which are ranked based on the size of the cluster they represent; centroids representing larger clusters are assumed to make better probes by virtue of having similarity to more sequence in the target space. \n\nProbeTools can further optimize probe panel designs by using an incremental strategy. In this strategy, probes are added to the panel in batches. Between the addition of each batch, ProbeTools determines what regions of the target space have achieved coverage and removes them from the target space before designing the next batch. This improves coverage of less-common sequences in the target space and reduces the generation of redundant probes.\n\nAdditional details and discussion about ProbeTools, along with <i>in silico</i> and <i>in vitro</i> validation results can be found in:\n\nKuchinski <i>et al.</i> (2021) ProbeTools: Hybridization probe design for targeted genomic sequencing of diverse and hypervariable viral taxa.\n\n# Setup \nProbeTools requires VSEARCH and BLASTn. The ProbeTools package can be installed with these dependencies via Anaconda/Miniconda. It can also be installed separate from its dependencies via the Python Package Index (PyPI).\n## Anaconda/Miniconda\n1. Create a conda environment for ProbeTools (replace env_name with a name of your choice for the ProbeTools environment):\n```\nconda create -n env_name -c kevinkuchinski probetools\n```\n## PyPI \n\n1. Install Python (version 3.7 or greater) from https://www.python.org/\n2. Install the ProbeTools package:\n```\npip install probetools\n```\n3. Install VSEARCH (version 2.15.2 recommended) from https://github.com/torognes/vsearch\n4. Install BLAST (version 2.10.0 recommended) from https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=Download\n\n\n# Quick-start to probe design\nProbeTools provides the <b>makeprobes</b> module as a user-friendly, general-purpose implementation of the incremental k-mer clustering strategy. Simply indicate a FASTA file containing target sequences (-t), the number of probes to add each batch (-b), and an output path and design name to append to output files (-o):\n```\nprobetools incrementalprobes -t target_space_FASTA.fa -b 100 -o demo_probes_dir/demo_probes\n```\n<b>makeprobes</b> will add batches of probes to the panel until one of three end points is reached:\n1. The panel achieves a target coverage goal (default: 90% of target sequences have at least 90% of their nucleotide positions covered)\n2. The panel reaches a specific size (default: MAX, i.e. the panel continues to grow until one of the other end points is reached)\n3. No further probe sequences can be designed\n\nThe desired coverage goal and the maximum panel size can be set, along with numerous other parameters (see usage guide below). In general, smaller batch sizes will provide more compact panels but take more rounds of design and, thus, longer to compute.\n\n# ProbeTools modules\nProbeTools consists of 6 modules:\n1. <b>makeprobes</b> - a user-friendly, general-purpose implementation of the incremental k-mer clustering strategy\n2. <b>clusterkmers</b> - single-batch probe generation using the k-mer clustering algorithm\n3. <b>capture</b> - <i>in silico</i> assessment of how well provided probe sequences cover provided target sequences\n4. <b>getlowcov</b> - uses output of <b>capture</b> to extract low-coverage regions from provided target sequences\n5. <b>stats</b> - uses output of <b>capture</b> to calculate coverage statistics overall and for each provided target sequence\n6. <b>merge</b> - merges output files generated by <b>capture</b> module\n\n# Usage guide for ProbeTools modules\n## makeprobes\nA general-purpose implementation of the incremental k-mer clustering strategy. Probes are added to the panel in batches. Between the addition of each batch, ProbeTools determines what regions of the target space have achieved coverage and removes them from the target space before designing the next batch. Probe sequences are provided in the output_name_probes.fa file with probe sequences ranked in descending order of cluster size. NOTE: for best results, all target sequences should be provided on the same strand/in the same sense.\n\n<b>Usage example:</b>\n```\n$ probetools incrementalprobes -t <target seqs> -b <batch size> -o <output dir>/<output name> [<optional args>]\n```\n<b>Required arguments:</b>\n\n     -t : path to target sequences in FASTA file\n     -b : number of probes in each batch (min=1)\n     -o : path to output directory and design name to append to output files\n     \n<b>Optional arguments:</b>\n\n     -m : max number of probes to add to panel (default=MAX, min=1)\n     -c : target for 10th percentile of probe coverage (default=90, min=1, max=100)\n     -k : length of probes to generate (default=120, min=32)\n     -s : number of bases separating each kmer (default=1, min=1)\n     -d : number of degenerate bases to permit in probes (default=0, min=0)\n     -i : nucleotide sequence identity (%) threshold used for kmer clustering and probe-target alignments (default=90, min=50, min=100)\n     -l : minimum length for probe-target alignments (default=60, min=1)\n     -D : minimum probe depth threshold used to define low coverage sub-sequences (default=0, min=0)\n     -L : minimum number of consecutive bases below probe depth threshold to define a low coverage sub-sequence (default=40, min=1)\n     -T : number of threads used by VSEARCH and BLASTn for clustering kmers and aligning probes to targets (default=MAX for VSEARCH, default=1 for BLASTn, min=1)\n     \n## clusterkmers\nEnumerate and cluster kmers from target sequences. Extract cluster centroids as probe candidates ranked by cluster size. Probe sequences are provided in the output_name_probes.fa file with probe sequences ranked in descending order of cluster size. NOTE: for best results, all target sequences should be provided on the same strand/in the same sense.\n\n<b>Usage example:</b>\n```\n$ probetools clusterkmers -t <target seqs> -o <output dir>/<output name> [<optional args>]\n```\n<b>Required arguments:</b>\n\n     -t : path to target sequences in FASTA file\n     -o : path to output directory and design name to append to output files\n \n<b>Optional arguments:</b>\n\n     -k : length of kmers to enumerate (default=120, min=32)\n     -s : number of bases separating each kmer (default=1, min=1)\n     -d : number of degenerate bases to permit in probes (default=0, min=0)\n     -i : nucleotide sequence identity (%) threshold used for kmer clustering (default=90, min=50, max=100)\n     -p : path to FASTA file containing previously-generated probe sequences to remove from new probes\n     -n : number of probe candidates to return (default=MAX, min=1)\n     -T : number of threads used by VSEARCH for clustering kmers (default=MAX, min=1)\n \n## capture\nAssess probe panel coverage of target sequences. BLASTn is used to align each provided probe sequence against each provided target sequence. BLASTn output is parsed to determine how many probes cover each nucleotide position in target sequences. Results are output to the output_name_capture.pt file (see .pt format specifications below).\n\n<b>Usage example:</b>\n```\n$ probetools capture -t <target seqs> -p <probe seqs> -o <output dir>/<output name> [<optional args>]\n```\n<b>Required arguments:</b>\n\n     -t : path to target sequences in FASTA file\n     -p : path to probe sequences in FASTA file\n     -o : path to output directory and design name to append to output files\n \n<b>Optional arguments:</b>\n\n     -i : nucleotide sequence identity (%) threshold used for probe-target alignments (default=90, min=50, max=100)\n     -l : minimum length for probe-target alignments (default=60, min=1)\n     -T : number of threads used by BLASTn for aligning probes to targets (default=1, min=1)\n\n## getlowcov\nExtract poorly covered sub-sequences from target sequences based on a specific set of capture results. Low-coverage sub-sequences are written to the output_name_low_cov.fa file.\n\n<b>Usage example:</b>\n```\n$ probetools getlowcov -i <input file> -o <output dir>/<output name> [<optional args>]\n```\n<b>Required arguments:</b>\n\n     -i : path to capture results in PT file\n     -o : path to output directory and design name to append to output files\n \n<b>Optional arguments:</b>\n\n     -k : minimum sub-sequence length extracted, should be same as kmer length used for making probes (default=120, min=32)\n     -D : minimum probe depth threshold used to define low coverage sub-sequences (default=0, min=0)\n     -L : minimum number of consecutive bases below probe depth threshold to define a low coverage sub-sequence (default=40, min=1)\n\n## stats\nCalculate and tabulate probe coverage statistics for target sequences. Overall target space statistics are provided in output_name_summary_report.tsv and statistics for each target sequence are provided in output_name_long_report.tsv. Positions with degenerate bases do not count towards probe coverage calculations if they are not covered by probes.\n\n<b>Usage example:</b>\n```\n$ probetools stats -i <input file> -o <output dir>/<output name>\n```\n<b>Required arguments:</b>\n\n     -i : path to capture results in PT file\n     -o : path to output directory and design name to append to output files\n \n## merge\nCombine results from two output files from the <b>capture</b> module. This module conducts an outer merge: if entries with the same header (and matching nucleotide sequences) appear in both files, their probe depth lists are summed together position-by-position. Entries appearing in only one or the other file are copied to the new file unmodified.\n\n<b>Usage example:</b>\n```\n$ probetools merge -i <input file> -I <input file> -o <merged output file>\n```\n<b>Required arguments:</b>\n\n     -i : path to capture results in PT file\n     -I : path to other capture results in PT file\n     -o : path to merge capture results PT file\n\n# .pt Format Specifications\nThe .pt format is used for output from the capture module and input for stats and getlowcov modules. The .pt format is largely derived from the FASTA format. Each entry spans three lines, and each line starts with its own identifying character:\n\n<b>Entry header (>):</b> A text header to describe the sequence. Do not use spaces in the header.\n\n<b>Entry sequence ($):</b> The nucleotide sequence of the entry.\n\n<b>Entry probe depths (#):</b> A comma-separated list of the number of probes covering each nucleotide position. The order of the list follows the order of the nucleotide sequence, i.e. the 4th number of the list describes the number probes covering the 4th nucleotide position of the entry's sequence.\n\n<u>Example entry:</u>\n```\n>Entry_header\n$ATGCGTTGACAGTGCACACG\n#1,1,1,1,1,2,2,2,2,2,1,1,2,2,2,3,3,3,3,3\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kevinkuchinski/probetools",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "probetools",
    "package_url": "https://pypi.org/project/probetools/",
    "platform": "",
    "project_url": "https://pypi.org/project/probetools/",
    "project_urls": {
      "Bug Tracker": "https://github.com/kevinkuchinski/probetools/issues",
      "Homepage": "https://github.com/kevinkuchinski/probetools"
    },
    "release_url": "https://pypi.org/project/probetools/0.1.9/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Hybridization probe design for targeted genomic sequencing of diverse and hypervariable viral taxa",
    "version": "0.1.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13075609,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c072a61913f9cee628cd5ce23353f8c9830f341374f9bde9069e2d50fdd3e7aa",
          "md5": "df051e25f56d9361b570b8d3cffb6f89",
          "sha256": "b357aa8377198dcdd033cc5fb5e115e9ee4f1efeb328a6f805010c46ae512694"
        },
        "downloads": -1,
        "filename": "probetools-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df051e25f56d9361b570b8d3cffb6f89",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13734,
        "upload_time": "2022-01-12T07:47:26",
        "upload_time_iso_8601": "2022-01-12T07:47:26.735731Z",
        "url": "https://files.pythonhosted.org/packages/c0/72/a61913f9cee628cd5ce23353f8c9830f341374f9bde9069e2d50fdd3e7aa/probetools-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "28b3a9325c41885b968cd571aace61d56afe3aa706f73b7da24a450a1315bb8b",
          "md5": "269cfc19067b68b219220e09035c5bd2",
          "sha256": "436466f4cfbff2864d813229e6226a93ed92306efe3de31af7358be8e08a8c79"
        },
        "downloads": -1,
        "filename": "probetools-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "269cfc19067b68b219220e09035c5bd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16296,
        "upload_time": "2022-01-12T07:47:28",
        "upload_time_iso_8601": "2022-01-12T07:47:28.076592Z",
        "url": "https://files.pythonhosted.org/packages/28/b3/a9325c41885b968cd571aace61d56afe3aa706f73b7da24a450a1315bb8b/probetools-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f83151dc58cc4c541263832bc9d10124959da32e819b2d997d1c63c505d59cd9",
          "md5": "b300b1365af592496cdcfc0d04413e43",
          "sha256": "9fb6c1d7e741da3e3646cf72c2eac9f1381d40f111451456ea7213c2dc4ce647"
        },
        "downloads": -1,
        "filename": "probetools-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b300b1365af592496cdcfc0d04413e43",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13717,
        "upload_time": "2022-01-12T07:48:47",
        "upload_time_iso_8601": "2022-01-12T07:48:47.309738Z",
        "url": "https://files.pythonhosted.org/packages/f8/31/51dc58cc4c541263832bc9d10124959da32e819b2d997d1c63c505d59cd9/probetools-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69c514ac072c67e60629166f9661080ebac06acde69fa7f344a1377045c524e3",
          "md5": "165b9c66bf0c2bfd74a865bfd7cd2958",
          "sha256": "859971e940b1e5403ddbefd3ffb5dfdca9ff84fdccb582bfd0317b84e40ddc03"
        },
        "downloads": -1,
        "filename": "probetools-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "165b9c66bf0c2bfd74a865bfd7cd2958",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16295,
        "upload_time": "2022-01-12T07:48:48",
        "upload_time_iso_8601": "2022-01-12T07:48:48.769087Z",
        "url": "https://files.pythonhosted.org/packages/69/c5/14ac072c67e60629166f9661080ebac06acde69fa7f344a1377045c524e3/probetools-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd3f11a0e3c44fa7f98616f6d8e032a7c2262ac5216739ac05583f36aee2a975",
          "md5": "148b396f5abfe1924f931e48c873c0ad",
          "sha256": "72c7a4e9cff1ebcc3f89bdf8a3a97e2765c5e909db49405eb89b31b4c4c5f760"
        },
        "downloads": -1,
        "filename": "probetools-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "148b396f5abfe1924f931e48c873c0ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13763,
        "upload_time": "2022-02-26T06:11:03",
        "upload_time_iso_8601": "2022-02-26T06:11:03.200535Z",
        "url": "https://files.pythonhosted.org/packages/dd/3f/11a0e3c44fa7f98616f6d8e032a7c2262ac5216739ac05583f36aee2a975/probetools-0.1.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3131901f540836bb56e3aa7259ebc563fe1d1ca6a1e2dedaef68cf4413b20e7",
          "md5": "58cd9effc98cc46787352b4ac5aed29d",
          "sha256": "14fa12c3cf00c89298884d33ad5b4cbaccbb8b55c347bd3a295173950b346764"
        },
        "downloads": -1,
        "filename": "probetools-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "58cd9effc98cc46787352b4ac5aed29d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16341,
        "upload_time": "2022-02-26T06:11:05",
        "upload_time_iso_8601": "2022-02-26T06:11:05.082770Z",
        "url": "https://files.pythonhosted.org/packages/d3/13/1901f540836bb56e3aa7259ebc563fe1d1ca6a1e2dedaef68cf4413b20e7/probetools-0.1.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f77bfa038addbc163c1f68b24d8379f3b8928d9bc1dc4c31f6ff7e0b8e4e408d",
          "md5": "6b378ee836837c34a78826c7792268e3",
          "sha256": "aab2fbf7e41028c36c91202ec77624bfe9119b51c1771fe8c990fdea23b69113"
        },
        "downloads": -1,
        "filename": "probetools-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b378ee836837c34a78826c7792268e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13941,
        "upload_time": "2022-03-04T01:55:21",
        "upload_time_iso_8601": "2022-03-04T01:55:21.794516Z",
        "url": "https://files.pythonhosted.org/packages/f7/7b/fa038addbc163c1f68b24d8379f3b8928d9bc1dc4c31f6ff7e0b8e4e408d/probetools-0.1.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7df9cace5ad088aa9cf7989ad6244462501aa6a317dbaa6edd1005665a1bc80e",
          "md5": "c6a76128f78ef2db762bb4741a33b882",
          "sha256": "3a4491a1a27c20c2aa1c9ad72641eba96fa4175bbe4ad95151c03d0f24687f51"
        },
        "downloads": -1,
        "filename": "probetools-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "c6a76128f78ef2db762bb4741a33b882",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16583,
        "upload_time": "2022-03-04T01:55:23",
        "upload_time_iso_8601": "2022-03-04T01:55:23.087272Z",
        "url": "https://files.pythonhosted.org/packages/7d/f9/cace5ad088aa9cf7989ad6244462501aa6a317dbaa6edd1005665a1bc80e/probetools-0.1.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f77bfa038addbc163c1f68b24d8379f3b8928d9bc1dc4c31f6ff7e0b8e4e408d",
        "md5": "6b378ee836837c34a78826c7792268e3",
        "sha256": "aab2fbf7e41028c36c91202ec77624bfe9119b51c1771fe8c990fdea23b69113"
      },
      "downloads": -1,
      "filename": "probetools-0.1.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6b378ee836837c34a78826c7792268e3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 13941,
      "upload_time": "2022-03-04T01:55:21",
      "upload_time_iso_8601": "2022-03-04T01:55:21.794516Z",
      "url": "https://files.pythonhosted.org/packages/f7/7b/fa038addbc163c1f68b24d8379f3b8928d9bc1dc4c31f6ff7e0b8e4e408d/probetools-0.1.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7df9cace5ad088aa9cf7989ad6244462501aa6a317dbaa6edd1005665a1bc80e",
        "md5": "c6a76128f78ef2db762bb4741a33b882",
        "sha256": "3a4491a1a27c20c2aa1c9ad72641eba96fa4175bbe4ad95151c03d0f24687f51"
      },
      "downloads": -1,
      "filename": "probetools-0.1.9.tar.gz",
      "has_sig": false,
      "md5_digest": "c6a76128f78ef2db762bb4741a33b882",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 16583,
      "upload_time": "2022-03-04T01:55:23",
      "upload_time_iso_8601": "2022-03-04T01:55:23.087272Z",
      "url": "https://files.pythonhosted.org/packages/7d/f9/cace5ad088aa9cf7989ad6244462501aa6a317dbaa6edd1005665a1bc80e/probetools-0.1.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}