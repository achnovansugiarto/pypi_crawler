{
  "info": {
    "author": "Tom Mason",
    "author_email": "tommasonuk@yahoo.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Procedural Generation of Buildings\n\nWelcome to my third year university project on the procedural generation of buildings!\n\nThere are two main goals for this project:\n* Design a grammar language that can be used to describe buildings with sets of procedural rules, which can then be transformed into a 3D models\n* Given an example set of 3D buildings, attempt to reverse engineer a grammar from the given buildings, which could then be used to create more buidings similar to the examples\n\nTo discover how I achieved the above, I encourage you to read (or perhaps just flick through!) my [project report](https://github.com/JUST0M/procedural-buildings/blob/master/doc/project_report.pdf). The report also teaches you how to write your own grammars and demonstrates some of my own architectural creations.\n\nIf you want to have a go at writing your own grammars and generating your own buildings, read on!\n\n## Installation (using Pip)\n\nThis project is packaged and available on [PyPi](https://pypi.org/project/procedural-buildings) and can be installed (or updated) with the following:\n\n```\npython -m pip install --upgrade procedural-buildings\n```\n\n## Basic usage\n\n### Writing your first grammar\n\nIf you want to learn the ins and outs of writing a grammar, read [my report](https://github.com/JUST0M/procedural-buildings/blob/master/doc/project_report.pdf). Here we'll learn by example and leave the rest to intuition!\nA grammar is **run** on an initial **scope** (a 3D bounding box) and consists of a set of rules, one of which is a **start rule**. By default, the start rule is `plot` but you can specify a different name if you'd prefer. The following grammar takes the initial scope and splits it in half along the x-axis into two cuboids:\n\n```\nplot --> split(x){~1 : I(rect) | ~1 : I(rect)}\n\n```\n\nSave the above to a new file called `split_grammar` (make sure to include a newline at the end as above). We can then generate a `.obj` file from the grammar using the following on the command line:\n\n```\npython -m procedural_buildings -i split_grammar -o split.obj\n```\n\nThis will create a 3D model in `split.obj`. Open this in your favourite 3D model viewer (I recommend [Blender](https://www.blender.org/)), noting that the positive z-axis corresponds to upward and the positive y-axis corresponds to foward. Blender lets you specify these axis directions when you import an object. You should see a 10x10x10 cube which is cut in half along the x-axis. To change the initial scope (which defaults to the 10x10x10 cube you see), use the `-s` (or `--start-scope`) option. To see a full list of options, use `-h`:\n\n```\npython -m procedural_buildings -i split_grammar -o split.obj -s 2,2,0,10,5,20\n```\n\nPlay around with different start scopes and check out the results.\n\n### Creating a house\nNow lets look at a slightly more interesting example - a house with a garage. Copy the following grammar into a new file called `house_grammar`. Once again, don't forget the newline (I really ought to change that \"feature\"!):\n\n```\nplot --> split(x){~2 : house | ~1 : garage}\nhouse --> split(z){~2 : I(rect) | ~1 : I(triangle)}\ngarage --> split(z){~1 : I(rect) | ~2 : nil}\n\n```\n\nNow generate the buildings with:\n```\npython -m procedural_buildings -i house_grammar -o house.obj\n```\n\nTake a look at `house.obj` and try and understand how it's been generated by the grammar we wrote. Play around with some numbers in the grammar to see how it affects the result.\n\nAs a final example, let's adapt `house_grammar` so it has some randomness. Copy the below into a new file called `house2_grammar`:\n\n```\nplot --> split(x){~2 : house | ~1 : garage} : 0.5\nplot --> split(x){~1 : garage | ~2 : house} : 0.5\nhouse --> split(z){~2 : I(rect) | ~1 : I(triangle)}\ngarage --> split(z){~(rand(0.75,1.25)) : I(rect) | ~2 : nil}\n\n```\n\nSee if you can figure out what the result will look like then generate a building:\n```\npython -m procedural_buildings -i house2_grammar -o house2.obj\n```\n\nNotice that if you run the above command a few times, the result will be different each time.\n\nTo generate many buildings from our grammar, we can use the following options:\n* `-n` (or `--num_buildings`) (default 1) specifies the number of buildings to generate from the grammar\n* `-d` (or `--separation`) (default 10) specifies the distance between buldings.\n* `-f` (of `--file_per_obj`) specifies whether to use a separate file for each building. In this case the `-d` option will be ignored and the given output file name will be used as the file prefix to use for the output files.\n\nLet's create 10 buildings each 2 units apart. We'll stick to one output file for now:\n```\npython -m procedural_buildings -i house2_grammar -o house2.obj -n 10 -d 2\n```\n\n### How about backwards?\n\nTo create a grammar from a given buildings, we can use the `-r` (or `--reverse`) flag. Now, our input file is the `.obj` file and the output is a grammar file. Let's try and reverse engineer the grammar we used to create the first house:\n\n```\npython -m procedural_buildings -i house.obj -o house_engineered_grammar -r\n```\n\nTake a look at `house_engineered_grammar` and you should see its equivalence to the original `house_grammar`.\n\nNow lets try and engineer a grammar from mutliple example buildings. First create 10 example buildings using `house2_grammar`. We'll put them in separate files this time by using the `-f` flag. The output file name `example` will be used as the prefix for the 10 output files so we'll get `example0.obj`, `example1.obj`, ... , `example9`:\n\n```\npython -m procedural_buildings -i house2_grammar -o example -n 10 -f\n```\n\nNow we can create a grammar from the example buildings. Create a new file called `examples` and enter the file names of the example buildings:\n```\nexample0.obj\nexample1.obj\nexample2.obj\nexample3.obj\nexample4.obj\nexample5.obj\nexample6.obj\nexample7.obj\nexample8.obj\nexample9.obj\n```\n\nNow, create a grammar from the buildings. The input file will be the file containing the file names (it knows it's a list of file names rather than a single object input by checking for a `.obj` extension):\n```\npython -m procedural_buildings -i examples -o house2_engineered_grammar -r\n```\n\nTake a look at the engineered grammar. You should be able to see the similarity to the original `house2_grammar`.\nWe can now use our engineered grammar to create more buildings. Note that we'll have to specify that the start rule for this grammar is `rule0`:\n\n```\npython -m procedural_buildings -i house2_engineered_grammar -o more_houses.obj -n 10 -R rule0\n```\n\nYou've now generated 10 buildings similar to the 10 examples.\n\nTo see some more complex examples, check out [my report](https://github.com/JUST0M/procedural-buildings/blob/master/doc/project_report.pdf) or create your own buildings!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/JUST0M/procedural-buildings",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "procedural-buildings",
    "package_url": "https://pypi.org/project/procedural-buildings/",
    "platform": "",
    "project_url": "https://pypi.org/project/procedural-buildings/",
    "project_urls": {
      "Homepage": "https://github.com/JUST0M/procedural-buildings"
    },
    "release_url": "https://pypi.org/project/procedural-buildings/1.0.1/",
    "requires_dist": [
      "numpy",
      "sympy",
      "sly"
    ],
    "requires_python": ">=3.6",
    "summary": "Tools for the procedural modelling of buildings",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8466625,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7092c896cbea41ea43e113d0e6d9769c5de539b9d33895d01e3bac702ac3ed1b",
          "md5": "bc3a40002ca27dd5d468d63e18e1392e",
          "sha256": "4d2881899a47c60a7ee8dfbdab54fccf7c1fba75e1a494fe5b995c83396d7c15"
        },
        "downloads": -1,
        "filename": "procedural_buildings-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc3a40002ca27dd5d468d63e18e1392e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 115284,
        "upload_time": "2020-10-21T14:21:58",
        "upload_time_iso_8601": "2020-10-21T14:21:58.290635Z",
        "url": "https://files.pythonhosted.org/packages/70/92/c896cbea41ea43e113d0e6d9769c5de539b9d33895d01e3bac702ac3ed1b/procedural_buildings-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f732c7a25a40f611ff80896748465957c63105bcaf9dec6e5a0101beea172941",
          "md5": "031f440bf229cdb2fb0fdd8cbd2bbcbd",
          "sha256": "56c5c65a2d00ddb0505520a298fb84e173693c355e2857f4e8008e6fec1a3b1c"
        },
        "downloads": -1,
        "filename": "procedural-buildings-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "031f440bf229cdb2fb0fdd8cbd2bbcbd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 110627,
        "upload_time": "2020-10-21T14:22:02",
        "upload_time_iso_8601": "2020-10-21T14:22:02.479064Z",
        "url": "https://files.pythonhosted.org/packages/f7/32/c7a25a40f611ff80896748465957c63105bcaf9dec6e5a0101beea172941/procedural-buildings-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54b3f25eaad3c1cb97cdc4a5b5d4189606a1fe5f4263bd17239c8be00a263647",
          "md5": "225fc780ec4e20085f7cc9aff2fde632",
          "sha256": "40dffa1b54ba899f0cc3567c5341aa3f11ca0827e5d80f61ba33cd47ba4fd34d"
        },
        "downloads": -1,
        "filename": "procedural_buildings-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "225fc780ec4e20085f7cc9aff2fde632",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 115287,
        "upload_time": "2020-10-21T15:05:48",
        "upload_time_iso_8601": "2020-10-21T15:05:48.013538Z",
        "url": "https://files.pythonhosted.org/packages/54/b3/f25eaad3c1cb97cdc4a5b5d4189606a1fe5f4263bd17239c8be00a263647/procedural_buildings-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62b2c73a3105a19b5b1fde14eb03855c9449761f6f975f29f6ac87fa2a8f2036",
          "md5": "d715579027c3dd54b7fdab1ad08eb93f",
          "sha256": "cd64043575ed3070b513b1df41aa31b5718bc4488941a887b19544ca7c8983b2"
        },
        "downloads": -1,
        "filename": "procedural-buildings-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d715579027c3dd54b7fdab1ad08eb93f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 110634,
        "upload_time": "2020-10-21T15:05:49",
        "upload_time_iso_8601": "2020-10-21T15:05:49.422741Z",
        "url": "https://files.pythonhosted.org/packages/62/b2/c73a3105a19b5b1fde14eb03855c9449761f6f975f29f6ac87fa2a8f2036/procedural-buildings-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "54b3f25eaad3c1cb97cdc4a5b5d4189606a1fe5f4263bd17239c8be00a263647",
        "md5": "225fc780ec4e20085f7cc9aff2fde632",
        "sha256": "40dffa1b54ba899f0cc3567c5341aa3f11ca0827e5d80f61ba33cd47ba4fd34d"
      },
      "downloads": -1,
      "filename": "procedural_buildings-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "225fc780ec4e20085f7cc9aff2fde632",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 115287,
      "upload_time": "2020-10-21T15:05:48",
      "upload_time_iso_8601": "2020-10-21T15:05:48.013538Z",
      "url": "https://files.pythonhosted.org/packages/54/b3/f25eaad3c1cb97cdc4a5b5d4189606a1fe5f4263bd17239c8be00a263647/procedural_buildings-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "62b2c73a3105a19b5b1fde14eb03855c9449761f6f975f29f6ac87fa2a8f2036",
        "md5": "d715579027c3dd54b7fdab1ad08eb93f",
        "sha256": "cd64043575ed3070b513b1df41aa31b5718bc4488941a887b19544ca7c8983b2"
      },
      "downloads": -1,
      "filename": "procedural-buildings-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d715579027c3dd54b7fdab1ad08eb93f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 110634,
      "upload_time": "2020-10-21T15:05:49",
      "upload_time_iso_8601": "2020-10-21T15:05:49.422741Z",
      "url": "https://files.pythonhosted.org/packages/62/b2/c73a3105a19b5b1fde14eb03855c9449761f6f975f29f6ac87fa2a8f2036/procedural-buildings-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}