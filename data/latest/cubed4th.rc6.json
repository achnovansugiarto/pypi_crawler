{
  "info": {
    "author": "Scott McCallum <https://linkedin.com/in/scott-mccallum>",
    "author_email": "Scott@Urbane.eMail",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Environment :: Console :: Curses",
      "Environment :: No Input/Output (Daemon)",
      "Environment :: Win32 (MS Windows)",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Science/Research",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Forth",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Programming Language :: SQL",
      "Topic :: Education",
      "Topic :: Internet",
      "Topic :: Multimedia",
      "Topic :: Software Development",
      "Topic :: Software Development :: Bug Tracking",
      "Topic :: Software Development :: Code Generators",
      "Topic :: Software Development :: Interpreters",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Pre-processors",
      "Topic :: Software Development :: User Interfaces",
      "Topic :: Software Development :: Version Control",
      "Topic :: System :: Software Distribution",
      "Topic :: Text Processing",
      "Topic :: Text Processing :: Markup :: Markdown"
    ],
    "description": "\n# -- THE FORTH-79 STANDARD --\n\nThe folling text was performed by OCR and contain mistakes.\n\n# WORDS\n\nNB: The words come from the FORTH-79 standard.  For the 2.0 release all the words that make sense will be implemented.  Its not currently noted anywhere which words have no implemention.\n\n## Stack Manipulation\n\n|   Name    |   Stack Effects   |   Description |\n|   --------    | -------   | -------   |\n|   DUP |   ( n - n n ) |   Duplicate top of stack  |\n|   DROP    |   ( n - ) |   Discard Top of Stack    |\n|   SWAP    |   ( n1 n2 - n2 n1 )   |   Exchange top two stack items    |\n|   OVER    |   ( n1 n2 - n1 n2 n1 )    |   Make a copy of second item on top   |\n|   ROT |   ( n1 n2 n3 - n2 n3 n1 ) |   Rotate third item to top \"rote\" |\n|   [PICK](https://forth-standard.org/standard/core/PICK)   |   ( n1 - n2 ) |   Copy n1-th item to top (thus 1 PICK = DUP, 2 PICK = OVER)   |\n|   ROLL    |   (n - )  |   Rotate the n1 - th item to top (thus 2 ROLL = SWAP, 3 ROLL = ROT    |\n|   ?DUP    |   ( n - n (n) )   |   Dupliicate only if non-zero. \"query-dup\"    |\n|   >R  |   ( n - ) |   Move top item to \"return stack\" for temporary storage (use caution). \"to-r\"     |\n|   R>  |   ( - n ) |   Retrieve item from return stack. \"r-from\"   |\n|   R@  |   ( - n ) |   Copy top of return stack onto stack. \"r-fetch\"  |\n|   DEPTH   |   ( - n ) |   Count number of items in stack  |\n\n# DEFINITIONS OF TERMS\n\nThese definitions, when in lower  case, are terms used within  this\nStandard.  They present terms as specifically used within FORTH.\n\n## A\n\n### address, ~~byte~~ hashable object\n\nAn ~~unsigned  number~~ hashable object that locates an ~~8-bit byte~~ object in a  standard\n~~FORTH  address space over {0..65,535}~~ Python dictionary.  ~~It  may   be a  native\nmachine address  or a representation  on  a  virtual  machine,\nlocating the  'addr-th' byte  within  the virtual byte address\nspace.~~  Address arithmetic is ~~modulo 65,536 without overflow~~ infinite positive, infinite negative and any string.\n\n### address, compilation\n\nThe numerical  value  equivalent to a  FORTH word  definition,\nwhich   is  compiled   for  that   definition.   The   address\ninterpreter  uses  this  value  to  locate  the  machine  code\ncorresponding to  each definition.   (May also  be called  the\ncode field address.)\n\n### address, native machine\n\nThe natural address representation of the host computer.\n\n### address, parameter field\n\nThe address of the first byte of memory associated with a word\ndefinition  for the  storage of  compilation addresses  (in a\ncolon-definition), numeric data and text characters.\n\n### arithmetic\n\n~~All integer arithmetic is performed  with signed 16 or 32  bit\ntwo's complement results, unless noted.~~  Numbers follow python rules\nwith integers being Decimal class, floating points being infinite procession\nwith support for complex numbers.  The to_number function shown here details\nthe various modes available to color4th:\n\n```python\n\n    def to_number(e, t, c, token):\n\n        if not isinstance(token, str):\n            return (True, token)\n\n        if not token[0] in e.digits:\n            return (False, None)\n\n        if token in e.root.words or token in t.words:\n            return (False, None)\n\n        token = token.replace(\"_\", \"\")\n\n        base = t.base\n        if token[0] == \"#\":\n            token = token[1:]\n        elif token[0] == \"$\":\n            base = 16\n            token = token[1:]\n        elif token[0] == \"%\":\n            base = 2\n            token = token[1:]\n\n        if token[0] == \"-\":\n            if len(token) == 1:\n                return (False, None)\n            if not token[1].isdigit():\n                return (False, None)\n\n        if \"j\" in token:\n            return (True, complex(token))\n        else:\n            if \".\" in token:\n                if base == 10:\n                    return (True, Decimal(token))\n                else:\n                    return (True, Decimal(int(token, base)))\n            else:\n                return (True, int(token, base))\n\n```\n\n## B\n\n### block\n\nThe  unit  of  data from  mass  storage,  referenced by  block\nnumber.  A  block must  contain 1024  bytes regardless  of the\nminimum  data  unit  read/written  from  mass  storage.    The\ntranslation from block number to device and physical record is\na function of the implementation.\n\n### block buffer\n\nA memory area where a mass storage block is maintained.\n\n### byte\n\nAn assembly  of 8  bits.  In  reference to  memory, it  is the\nstorage capacity for 8 bits.\n\n## C\n\n### cell\n\nA 16-bit memory  location.  The n-th  cell contains the  2n-th\nand (2n+1)-th byte of the FORTH address space.  The byte order\nis presently unspecified.\n\n### character\n\nA 7-bit  number which  represents a  terminal character.   The\nASCII character set is considered standard.  When contained in\na larger field, the higher order bits are zero.\n\n### compilation\n\nThe action of accepting text  words from the input stream  and\nplacing   corresponding   compilation  addresses   in   a  new\ndictionary entry.\n\n## D\n\n### defining word\n\nA word that,  when executed, creates  a new dictionary  entry.\nThe new  word name  is taken  from the  input stream.   If the\ninput stream is exhausted before the new name is available, an\nerror condition exists.  Common defining words are:\n:  CONSTANT  CREATE\n\n### definition\n\nSee 'word definition'.\n\n### dictionary\n\nA structure of  word definitions  in  a computer memory.    In\nsystems with  a text  interpreter, the  dictionary entries are\norganized in  vocabularies to  enable location  by name.   The\ndictionary is extensible, growing toward high memory.\n\n## E\n\n### equivalent execution\n\nFor the  execution of  a standard  program, a  set of non-tine\ndependent  inputs  will produce  the  same non-time  dependent\noutputs on any FORTH Standard System with sufficient resources\nto execute  the program.   Only standard  source code  will be\ntransportable.\n\n### error condition\n\nAn exceptional condition which  requires action by the  system\nother than the expected function.  Actions may be:\n\n1.   ignore, and continue\n2.   display a message\n3.   execute a particular word\n4.   interpret a block\n5.   return control  to the text interpreter\n\nA Standard System shall be  provided with a tabulation of  the\naction  taken  for all  specified  error conditions.   General\nerror conditions:\n\n1.   input stream exhausted before a required <name>.\n2.   empty stack and full stack for the text interpreter.\n3.   an unknown word, not a valid number for the text\ninterpreter.\n4.   compilation of incorrectly nested conditionals.\n5.   interpretation of words restricted to compilation.\n6.   FORGETing within the system to a point that removes\na word required for correct execution.\n7.   insufficient space remaining in the dictionary.\n\n## F\n\n### false\n\nA zero number represents the false condition flag.\n\n### flag\n\nA number  that may have two logical states, zero and non-zero.\nThese  are  named  'true'  =  non-zero,  and  'false'  = zero.\nStandard word definitions leave 1 for true, 0 for false.\n\n## G\n\n### glossary\n\nA  set  of  word  definitions  given  in  a  natural  language\ndescribing the corresponding computer execution action.\n\n## H\n\n## I\n\n### immediate word\n\nA  word  defined  to  automatically  execute  when encountered\nduring compilation, which handles exception cases to the usual\ncompilation.   See  IF LITERAL  .\"  etc.\n\n### input stream\n\nA  sequence  of  characters  available  to  the  system,   for\nprocessing  by  the   text  interpreter.   The   input  stream\nconventionally may be taken from a terminal (via the  terminal\ninput buffer) and mass storage (via a block buffer).  >IN  and\nBLK specify the input stream.  Words using or altering >IN and\nBLK are responsible for  maintaining and restoring control  of\nthe input stream.\n\n### interpreter, address\n\nThe (set of) word definitions which interprets (sequences  of)\nFORTH compilation addresses  by executing the  word definition\nspecified for each one.\n\n### interpreter, text\n\nThe (set of) word  definitions that repeatedly accepts  a word\nname  from  the   input  stream,  locates   the  corresponding\ndictionary  entry,  and  starts  the  address  interpreter  to\nexecute it.  Text in the input stream interpreted  as a number\nleaves the corresponding  value on the   data stack.  When  in\nthe compile mode,  the addresses of  FORTH words are  compiled\ninto the  dictionary for  later interpretation  by the address\ninterpreter.  In this case, numbers are compiled, to be placed\non the data  stack when later  interpreted.  Numbers shall  be\naccepted unsigned or negatively signed, according to BASE.\n\n## J\n\n## K\n\n## L\n\n### load\n\nThe  acceptance  of  text  from  a  mass  storage  device  and\nexecution   of  the   dictionary  definition   of  the   words\nencountered.  This  is the  general method  for compilation of\nnew definitions into the dictionary.\n\n## M\n\n### mass storage\n\nData  is read  from mass  storage in  the form  of 1024  byte\nblocks.  This data is  held in block buffers.   When indicated\nas UPDATEd (modified) data will be ultimately written to  mass\nstorage.\n\n## N\n\n### number\n\nWhen  values exist within a larger field, the high order  bits\nare zero.  When stored in memory the byte order of a number is\nunspecified.\n\n### type range    minimum field\n\n    bit  0..1  1\n    character 0..1277\n    byte 0..2558\n    number    -32,768..32,76716\n    positive number0..32,767 16\n    unsigned numberO..65,535 16\n    double number  -2,147,483,648..\n       2,147,483,647    32\n    positive double number   0..2,147,483,647    32\n    unsigned double number   0..4,294,967,295    32\n\nWhen represented on the stack, the higher 16-bits (with  sign)\nof a double  number are most  accessible.  When in  memory the\nhigher 16-bits are at the lower address.  Storage extends over\nfour bytes toward high memory.  The byte order within each  16\n-bit field is unspecified.\n\n## O\n\n### output, pictured\n\nThe use of numeric output primitives, which convert  numerical\nvalues  into  text  strings.   The operators  are  used  in  a\nsequence  which resembles a symbolic 'picture' of the  desired\ntext  format.    Conversion proceeds from low digit  to  high,\nfrom high memory to low.\n\n## P\n\n### program\n\nA  complete specification of execution to achieve  a  specific\nfunction  (application  task) expressed in FORTH  source  code\nform.\n\n## Q\n\n## R\n\n### return\n\nThe   means  of  terminating  text  from  the  input   stream.\n(Conventionally a null (ASCII 0) indicates end of text in  the\ninput  stream.   This character is left by  the  'return'  key\nactuation  of the operator's terminal, as an absolute  stopper\nto text interpretation.)\n\n## S\n\n### screen\n\nTextual data  arranged for  editing.  By  convention, a screen\nconsists of  16 lines  (numbered 0  thru 15)  of 64 characters\neach.  Screens usually contain program source text, but may be\nused to view mass storage data.   The first  byte of  a screen\noccupies the first byte of a mass storage block,  which is the\nbeginning point for text interpretation during a load.\n\n### source definition\n\nText consisting of  word names suitable  for execution by  the\ntext interpreter.   Such text  is usually  arranged in screens\nand maintained on a mass storage device.\n\n### stack, data\n\nA last in, first out list consisting of 16-bit binary  values.\nThis  stack  is  primarily used to  hold  intermediate  values\nduring  execution  of  word  definitions.   Stack  values  may\nrepresent numbers, characters, addresses, boolean values, etc.\n\nWhen the name 'stack' is used, it implies the data stack.\n\n### stack, return\n\nA last in, first out list which contains the machine addresses\nof word definitions whose execution has not been completed  by\nthe address interpreter.  As a word definition passes  control\nto  another  definition,  the return point is  placed  on  the\nreturn stack.\n\nThe return stack may cautiously be used for other values, such\nas   loop   control   parameters,   and   for   pointers   for\ninterpretation of text.\n\n### string\n\nA sequence of 8-bit bytes containing ASCII characters, located\nin memory by an initial byte address and byte count.\n\n## T\n\n### transportability\n\nThis  term indicates that equivalent execution results when  a\nprogram  is executed on other than the system on which it  was\ncreated.  See 'equivalent execution'.\n\n### true\n\nA non-zero value represents the true condition flag.  Any non-\nzero value will be accepted by a standard word as 'true';  all\nstandard words return one when leaving a ' true' flag.\n\n## Q\n\n## R\n\n## S\n\n## T\n\n## U\n\n### user area\n\nAn  area  in  memory  which  contains  the  storage  for  user\nvariables.\n\n### variables, user\n\nSo  that the words of the FORTH vocabulary may  be  re-entrant\n(to  different  users),  a copy of  each  system  variable  is\nmaintained in the user area.\n\n## V\n\n### vocabulary\n\nAn ordered list of word definitions.  Vocabulary lists are  an\nadvantage in reducing dictionary search time and in separating\ndifferent word definitions that may carry the sane name.\n\n## W\n\n### word\n\nA sequence of characters terminated by at least one blank  (or\n'return').   Words are usually obtained via the input  stream,\nfrom a terminal or mass storage device.\n\n### word definition\n\nA   named   FORTH  execution  procedure  compiled   into   the\ndictionary.  Its execution may be defined in terms of  machine\ncode, as a sequence of compilation addresses or other compiled\nwords.   If named, it nay be located by specifying  this  name\nand the vocabulary in which it is located.\n\n### word name\n\nThe  name  of  a  word definition.   Standard  names  must  be\ndistinguished by their length and first thirty-one characters,\nand may not contain an ASCII null, blank, or 'return'.\n\n### word set\n\nA   group   of  FORTH  word  definitions  listed   by   common\ncharacteristics.  The standard word sets consist of:\n\n    Required Word Set\n    Nucleus Words\n    Interpreter Words\n    Compiler Words\n    Device Words\n\n    Extension Word Sets\n    32-bit Word Set\n    Assembler Ward Set\n\nIncluded as reference material only:\nReference Word Set\n\n### word set, compiler\n\nWords  which  add  new procedures to  the  dictionary  or  aid\ncompilation by adding compilation addresses or data structures\nto the dictionary.\n\n### word set, devices\n\nWords  which  allow  access  to  mass  storage  and   computer\nperipheral devices.\n\n### word set, interpreter\n\nWords  which  support  interpretation of text  input  from   a\nterminal  or  mass  storage  by  execution  of   corresponding\ndictionary entries, vocabularies, and terminal output.\n\n### word set, nucleus\n\nThe FORTH words generally defined in machine  code that create\nthe  stacks  and fundamental stack  operators  (virtual  FORTH\nmachine).\n\n### word set, reference\n\nThis set of words is provided as a reference document only, as\na  set of formerly standardized words and candidate words  for\nstandardization.\n\n### word set, required\n\nThe  minimum words needed to compile and execute all  Standard\nPrograms.\n\n### word, standard\n\nA  named  FORTH procedure definition, formally   reviewed  and\naccepted  by the Standards Team.  A serial  number  identifier\n{100..999} indicates a Standard Word.  A functional alteration\nof  a  Standard Word will require assignment of a  new  serial\nnumber identifier.\n\nThe  serial number identifier has no required use, other  than\nto  correlate  the definition name with  its  unique  Standard\ndefinition.\n\n\n## X\n\n## Y\n\n## Z\n\n\n\n\n\n\n\n\n\nThe MIT License (MIT)\n=====================\n\nCopyright (c) 2021 - 2021, Scott.McCallum@Snoware.enterprises\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sno-ware/cubed4th",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cubed4th",
    "package_url": "https://pypi.org/project/cubed4th/",
    "platform": null,
    "project_url": "https://pypi.org/project/cubed4th/",
    "project_urls": {
      "Homepage": "https://github.com/sno-ware/cubed4th"
    },
    "release_url": "https://pypi.org/project/cubed4th/2.0.20221024/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": ": cubed4th 'PYTHON 'FORTH 'OOP + * 3 ^ ;",
    "version": "2.0.20221024",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15505220,
  "releases": {
    "1.0.20210721000000": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34c0365249e3b858789765965afd46fb25ffd65d60b7402a954383ca1573b62d",
          "md5": "3524fecb3bdf36f29252732ac90c88c6",
          "sha256": "1ccb3b28e710ffdf08c08344d0bc9fd5c782fb1eda15b6ab64d4e59f37878d5d"
        },
        "downloads": -1,
        "filename": "cubed4th-1.0.20210721000000-py3.7.egg",
        "has_sig": false,
        "md5_digest": "3524fecb3bdf36f29252732ac90c88c6",
        "packagetype": "bdist_egg",
        "python_version": "1.0.20210721000000",
        "requires_python": ">=3.7",
        "size": 71675,
        "upload_time": "2021-07-20T21:47:41",
        "upload_time_iso_8601": "2021-07-20T21:47:41.767695Z",
        "url": "https://files.pythonhosted.org/packages/34/c0/365249e3b858789765965afd46fb25ffd65d60b7402a954383ca1573b62d/cubed4th-1.0.20210721000000-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c33fba29a9eb85d085c9971cdf83c9847c790e7155e650c523e9ad1c8149404d",
          "md5": "b9390f5d20480982bc02a27777087baf",
          "sha256": "3b447c0a5550089ae6c8f9ef4125095aa1fd88ebfc895bdc2b1951f77ed0d3a1"
        },
        "downloads": -1,
        "filename": "cubed4th-1.0.20210721000000-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9390f5d20480982bc02a27777087baf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 33741,
        "upload_time": "2021-07-20T21:47:39",
        "upload_time_iso_8601": "2021-07-20T21:47:39.747829Z",
        "url": "https://files.pythonhosted.org/packages/c3/3f/ba29a9eb85d085c9971cdf83c9847c790e7155e650c523e9ad1c8149404d/cubed4th-1.0.20210721000000-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c28682a6391c5a4915954bac94b8ae7a1a3aa0ffbc31b9142dddbfad05a7cb6e",
          "md5": "75b6723a4f4cabca5e96fa80a422bc82",
          "sha256": "f27098c7fab360580483c4a6af0f8f12a681c2fb25faa26a6828dca52332391a"
        },
        "downloads": -1,
        "filename": "cubed4th-1.0.20210721000000.tar.gz",
        "has_sig": false,
        "md5_digest": "75b6723a4f4cabca5e96fa80a422bc82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 25829,
        "upload_time": "2021-07-20T21:47:43",
        "upload_time_iso_8601": "2021-07-20T21:47:43.074783Z",
        "url": "https://files.pythonhosted.org/packages/c2/86/82a6391c5a4915954bac94b8ae7a1a3aa0ffbc31b9142dddbfad05a7cb6e/cubed4th-1.0.20210721000000.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.20210723000000": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a21ee72ce8b290909a064d8d499c35f55fa90ce6c5ff07b3627f3fc26002989c",
          "md5": "8f66f819d6f8d067245a013991150bf8",
          "sha256": "6c493edce3a1d9c937253f4e5756a8d9bb0c0106474261ed5b8b68feeea60b25"
        },
        "downloads": -1,
        "filename": "cubed4th-1.0.20210723000000-py3.7.egg",
        "has_sig": false,
        "md5_digest": "8f66f819d6f8d067245a013991150bf8",
        "packagetype": "bdist_egg",
        "python_version": "1.0.20210723000000",
        "requires_python": ">=3.7",
        "size": 73989,
        "upload_time": "2021-07-23T05:03:32",
        "upload_time_iso_8601": "2021-07-23T05:03:32.248172Z",
        "url": "https://files.pythonhosted.org/packages/a2/1e/e72ce8b290909a064d8d499c35f55fa90ce6c5ff07b3627f3fc26002989c/cubed4th-1.0.20210723000000-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be9007c3f87e88cc7ceff431a3e65bee16e817ee4e533818f0949462767ce7f9",
          "md5": "bcd36dfc53fe858b888b66ccaee6c7c7",
          "sha256": "9b8d009de649b5e84c0e96f03bbc5300fda2a1ea89a3fdd920ebd5854ed6522d"
        },
        "downloads": -1,
        "filename": "cubed4th-1.0.20210723000000-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bcd36dfc53fe858b888b66ccaee6c7c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 33938,
        "upload_time": "2021-07-23T05:03:30",
        "upload_time_iso_8601": "2021-07-23T05:03:30.388432Z",
        "url": "https://files.pythonhosted.org/packages/be/90/07c3f87e88cc7ceff431a3e65bee16e817ee4e533818f0949462767ce7f9/cubed4th-1.0.20210723000000-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7be81c3f3d457c15903474588356b728cbe6dcab76cdb4a6124fb3a82ab48724",
          "md5": "36532d03dacef2c4deb9fff81301bf9f",
          "sha256": "8fce335719407f4d54c0bbdeef2751a05cdad3835498c29d3e97c49bd3eff7bc"
        },
        "downloads": -1,
        "filename": "cubed4th-1.0.20210723000000.tar.gz",
        "has_sig": false,
        "md5_digest": "36532d03dacef2c4deb9fff81301bf9f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26992,
        "upload_time": "2021-07-23T05:03:33",
        "upload_time_iso_8601": "2021-07-23T05:03:33.922201Z",
        "url": "https://files.pythonhosted.org/packages/7b/e8/1c3f3d457c15903474588356b728cbe6dcab76cdb4a6124fb3a82ab48724/cubed4th-1.0.20210723000000.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.20210724111100": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55376b1bbf0d55d3e1818d6449e4a950d4c71ec2257aecb968d77b8797d135b1",
          "md5": "f4ae2274f0d1ce29ca887ef451b4306e",
          "sha256": "9378dc12dbb544a56715ed31fcbd7b3b27ee2491621ed8d205aab1fe5ee03afe"
        },
        "downloads": -1,
        "filename": "cubed4th-1.1.20210724111100-py3.7.egg",
        "has_sig": false,
        "md5_digest": "f4ae2274f0d1ce29ca887ef451b4306e",
        "packagetype": "bdist_egg",
        "python_version": "1.1.20210724111100",
        "requires_python": ">=3.7",
        "size": 78083,
        "upload_time": "2021-07-24T01:16:44",
        "upload_time_iso_8601": "2021-07-24T01:16:44.339010Z",
        "url": "https://files.pythonhosted.org/packages/55/37/6b1bbf0d55d3e1818d6449e4a950d4c71ec2257aecb968d77b8797d135b1/cubed4th-1.1.20210724111100-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d47f03d5497e7e83ffc00939540f8a08591881e32ba301b256484c5f415da17f",
          "md5": "4b9f2b1e6bc96d8771827b68531cb5d4",
          "sha256": "2a0d61c6d4760094fb512e65f1cde32691ba831304b3f16b8e68fd0b1135744e"
        },
        "downloads": -1,
        "filename": "cubed4th-1.1.20210724111100-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b9f2b1e6bc96d8771827b68531cb5d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 37949,
        "upload_time": "2021-07-24T01:16:42",
        "upload_time_iso_8601": "2021-07-24T01:16:42.744323Z",
        "url": "https://files.pythonhosted.org/packages/d4/7f/03d5497e7e83ffc00939540f8a08591881e32ba301b256484c5f415da17f/cubed4th-1.1.20210724111100-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "902976cdca5b1bd8ddd94125b036dff3b42d012d6f550d452cad204404e8482b",
          "md5": "702b9b688c4b3dbf5247fa3a9dd27727",
          "sha256": "536f7d5a76226db8c83646834c3e3d630e565f2177574f45aecc7a983e1e705e"
        },
        "downloads": -1,
        "filename": "cubed4th-1.1.20210724111100.tar.gz",
        "has_sig": false,
        "md5_digest": "702b9b688c4b3dbf5247fa3a9dd27727",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 36663,
        "upload_time": "2021-07-24T01:16:45",
        "upload_time_iso_8601": "2021-07-24T01:16:45.648903Z",
        "url": "https://files.pythonhosted.org/packages/90/29/76cdca5b1bd8ddd94125b036dff3b42d012d6f550d452cad204404e8482b/cubed4th-1.1.20210724111100.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.20210724132000": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08904135319110becd917d56961ac95e9d448e39303d5436fd231d212cb939a2",
          "md5": "60e7278f58c0060adadc391517a9d992",
          "sha256": "28f6f398a99be2c59842ee4629ebeaa63caca9987c738ed92c0641293348cd26"
        },
        "downloads": -1,
        "filename": "cubed4th-1.1.20210724132000-py3.7.egg",
        "has_sig": false,
        "md5_digest": "60e7278f58c0060adadc391517a9d992",
        "packagetype": "bdist_egg",
        "python_version": "1.1.20210724132000",
        "requires_python": ">=3.7",
        "size": 79117,
        "upload_time": "2021-07-24T03:34:35",
        "upload_time_iso_8601": "2021-07-24T03:34:35.083068Z",
        "url": "https://files.pythonhosted.org/packages/08/90/4135319110becd917d56961ac95e9d448e39303d5436fd231d212cb939a2/cubed4th-1.1.20210724132000-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fda30da0c69a2f4f8a4aed6d0b8c12afccf712e662eb7205636e665f6e2b151",
          "md5": "be2ff8e3f8330cfd7ffe252e920ebe44",
          "sha256": "b8d329d3f27369f8a42524a7976e0c057c96c38da798c2cf3472d3227f9273d6"
        },
        "downloads": -1,
        "filename": "cubed4th-1.1.20210724132000-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be2ff8e3f8330cfd7ffe252e920ebe44",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 39874,
        "upload_time": "2021-07-24T03:34:33",
        "upload_time_iso_8601": "2021-07-24T03:34:33.002745Z",
        "url": "https://files.pythonhosted.org/packages/3f/da/30da0c69a2f4f8a4aed6d0b8c12afccf712e662eb7205636e665f6e2b151/cubed4th-1.1.20210724132000-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efa3957692eba1ac8e651cc5f2fcc95180e571fbd20fef993b2df8570f86b81e",
          "md5": "dbfbfee88bb37978d81b99c93f01d825",
          "sha256": "bcc4dba22bfd7186a2256bf8e38f93fa46fc850351b143ebf0870e18107c12bd"
        },
        "downloads": -1,
        "filename": "cubed4th-1.1.20210724132000.tar.gz",
        "has_sig": false,
        "md5_digest": "dbfbfee88bb37978d81b99c93f01d825",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 38893,
        "upload_time": "2021-07-24T03:34:36",
        "upload_time_iso_8601": "2021-07-24T03:34:36.991484Z",
        "url": "https://files.pythonhosted.org/packages/ef/a3/957692eba1ac8e651cc5f2fcc95180e571fbd20fef993b2df8570f86b81e/cubed4th-1.1.20210724132000.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.20210725000000": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3638733e9eb6351ac2cc08ddcfa097efa5f6aa9aa60a7ce03d1259db9984c87",
          "md5": "1648df04ebcc101a0167993e3a1e3bd1",
          "sha256": "723050256aa0f01ecd4062619c1afb0ba099bda6019b5be46ad96db682004a20"
        },
        "downloads": -1,
        "filename": "cubed4th-1.1.20210725000000-py3.7.egg",
        "has_sig": false,
        "md5_digest": "1648df04ebcc101a0167993e3a1e3bd1",
        "packagetype": "bdist_egg",
        "python_version": "1.1.20210725000000",
        "requires_python": ">=3.7",
        "size": 79247,
        "upload_time": "2021-07-24T18:24:49",
        "upload_time_iso_8601": "2021-07-24T18:24:49.369781Z",
        "url": "https://files.pythonhosted.org/packages/c3/63/8733e9eb6351ac2cc08ddcfa097efa5f6aa9aa60a7ce03d1259db9984c87/cubed4th-1.1.20210725000000-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e663a45eb3f400215823e27f61937060979c46616294a1ceed844a6f5de6730c",
          "md5": "7e3673935a0410c9fab6c2d0a03619d5",
          "sha256": "f32bec29b931076dcb741ec3d412b7836c4fd468f328e2e2cbc7921ebd71252f"
        },
        "downloads": -1,
        "filename": "cubed4th-1.1.20210725000000-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e3673935a0410c9fab6c2d0a03619d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 39882,
        "upload_time": "2021-07-24T18:24:47",
        "upload_time_iso_8601": "2021-07-24T18:24:47.758442Z",
        "url": "https://files.pythonhosted.org/packages/e6/63/a45eb3f400215823e27f61937060979c46616294a1ceed844a6f5de6730c/cubed4th-1.1.20210725000000-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57523c9d52d20b2bf6b758a920f9a419339bb9a64f8622c9bb3e1763dc5d3a75",
          "md5": "6efdf31176fcbc325108f8a7a75d93b4",
          "sha256": "a9bc7e43265bda8e458394d31e1534d6cdc47c8ddf23dba354a3ab6a7eda4d7f"
        },
        "downloads": -1,
        "filename": "cubed4th-1.1.20210725000000.tar.gz",
        "has_sig": false,
        "md5_digest": "6efdf31176fcbc325108f8a7a75d93b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 38955,
        "upload_time": "2021-07-24T18:24:51",
        "upload_time_iso_8601": "2021-07-24T18:24:51.209899Z",
        "url": "https://files.pythonhosted.org/packages/57/52/3c9d52d20b2bf6b758a920f9a419339bb9a64f8622c9bb3e1763dc5d3a75/cubed4th-1.1.20210725000000.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.20221024": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad8c4333f65136d01303dc29480972ce49dc9c54f1282c3f1ddc1dee7df710fd",
          "md5": "656845c8d99fb727dae0e26d678349b8",
          "sha256": "f0b540812e46d33987c23fd3f35582c8d728be55070de75b3daa754c94053476"
        },
        "downloads": -1,
        "filename": "cubed4th-2.0.20221024-py3.7.egg",
        "has_sig": false,
        "md5_digest": "656845c8d99fb727dae0e26d678349b8",
        "packagetype": "bdist_egg",
        "python_version": "2.0.20221024",
        "requires_python": ">=3.7",
        "size": 397644,
        "upload_time": "2022-10-24T03:00:46",
        "upload_time_iso_8601": "2022-10-24T03:00:46.943133Z",
        "url": "https://files.pythonhosted.org/packages/ad/8c/4333f65136d01303dc29480972ce49dc9c54f1282c3f1ddc1dee7df710fd/cubed4th-2.0.20221024-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef0060f2132106de86a0725c9b9f5eb3e042a34fc0b3755ad39c36ddc89639fa",
          "md5": "d8872f15c614d7f51aad73270a7151e6",
          "sha256": "94d317d654bfe400d8aabaf9e259255c31de55f1d90096081f79bd5a9fd92261"
        },
        "downloads": -1,
        "filename": "cubed4th-2.0.20221024-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d8872f15c614d7f51aad73270a7151e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 179030,
        "upload_time": "2022-10-24T03:00:43",
        "upload_time_iso_8601": "2022-10-24T03:00:43.937830Z",
        "url": "https://files.pythonhosted.org/packages/ef/00/60f2132106de86a0725c9b9f5eb3e042a34fc0b3755ad39c36ddc89639fa/cubed4th-2.0.20221024-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e68c2dc1dc1bf1dfc8a196932f74078cee3503e31a17a8e87f911691876e613a",
          "md5": "d183a6d0562d1a219d22d165143eef92",
          "sha256": "6b452fc7ea08a59460de6c13929ac6eaef29352ab5fe65f9698d31457d09b4de"
        },
        "downloads": -1,
        "filename": "cubed4th-2.0.20221024.tar.gz",
        "has_sig": false,
        "md5_digest": "d183a6d0562d1a219d22d165143eef92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11554447,
        "upload_time": "2022-10-24T03:01:16",
        "upload_time_iso_8601": "2022-10-24T03:01:16.220982Z",
        "url": "https://files.pythonhosted.org/packages/e6/8c/2dc1dc1bf1dfc8a196932f74078cee3503e31a17a8e87f911691876e613a/cubed4th-2.0.20221024.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad8c4333f65136d01303dc29480972ce49dc9c54f1282c3f1ddc1dee7df710fd",
        "md5": "656845c8d99fb727dae0e26d678349b8",
        "sha256": "f0b540812e46d33987c23fd3f35582c8d728be55070de75b3daa754c94053476"
      },
      "downloads": -1,
      "filename": "cubed4th-2.0.20221024-py3.7.egg",
      "has_sig": false,
      "md5_digest": "656845c8d99fb727dae0e26d678349b8",
      "packagetype": "bdist_egg",
      "python_version": "2.0.20221024",
      "requires_python": ">=3.7",
      "size": 397644,
      "upload_time": "2022-10-24T03:00:46",
      "upload_time_iso_8601": "2022-10-24T03:00:46.943133Z",
      "url": "https://files.pythonhosted.org/packages/ad/8c/4333f65136d01303dc29480972ce49dc9c54f1282c3f1ddc1dee7df710fd/cubed4th-2.0.20221024-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ef0060f2132106de86a0725c9b9f5eb3e042a34fc0b3755ad39c36ddc89639fa",
        "md5": "d8872f15c614d7f51aad73270a7151e6",
        "sha256": "94d317d654bfe400d8aabaf9e259255c31de55f1d90096081f79bd5a9fd92261"
      },
      "downloads": -1,
      "filename": "cubed4th-2.0.20221024-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d8872f15c614d7f51aad73270a7151e6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 179030,
      "upload_time": "2022-10-24T03:00:43",
      "upload_time_iso_8601": "2022-10-24T03:00:43.937830Z",
      "url": "https://files.pythonhosted.org/packages/ef/00/60f2132106de86a0725c9b9f5eb3e042a34fc0b3755ad39c36ddc89639fa/cubed4th-2.0.20221024-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e68c2dc1dc1bf1dfc8a196932f74078cee3503e31a17a8e87f911691876e613a",
        "md5": "d183a6d0562d1a219d22d165143eef92",
        "sha256": "6b452fc7ea08a59460de6c13929ac6eaef29352ab5fe65f9698d31457d09b4de"
      },
      "downloads": -1,
      "filename": "cubed4th-2.0.20221024.tar.gz",
      "has_sig": false,
      "md5_digest": "d183a6d0562d1a219d22d165143eef92",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11554447,
      "upload_time": "2022-10-24T03:01:16",
      "upload_time_iso_8601": "2022-10-24T03:01:16.220982Z",
      "url": "https://files.pythonhosted.org/packages/e6/8c/2dc1dc1bf1dfc8a196932f74078cee3503e31a17a8e87f911691876e613a/cubed4th-2.0.20221024.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}