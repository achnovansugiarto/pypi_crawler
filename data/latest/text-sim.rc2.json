{
  "info": {
    "author": "DengBoCong",
    "author_email": "bocongdeng@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "<h1 align=\"center\">Text-Similarity</h1>\n\n<div align=\"center\">\n\n[![Blog](https://img.shields.io/badge/blog-@DengBoCong-blue.svg?style=social)](https://www.zhihu.com/people/dengbocong)\n[![Paper Support](https://img.shields.io/badge/paper-repo-blue.svg?style=social)](https://github.com/DengBoCong/nlp-paper)\n![Stars Thanks](https://img.shields.io/badge/Stars-thanks-brightgreen.svg?style=social&logo=trustpilot)\n![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=social&logo=appveyor)\n\n[comment]: <> ([![PRs Welcome]&#40;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#41;]&#40;&#41;)\n\n</div>\n\n# Overview\n+ **Dataset**: 中文/English 语料, ☞  [点这里](https://github.com/DengBoCong/text-similarity/tree/main/corpus)\n+ **Paper**: 相关论文详解, ☞  [点这里](https://github.com/DengBoCong/nlp-paper)\n+ **The implemented method is as follows:**：\n   + TF-IDF\n   + BM25\n   + LSH\n   + SIF/uSIF\n   + FastText\n   + RNN Base (Siamese RNN, Stack RNN)\n   + CNN Base (Fast Text, Text CNN, Char CNN, VDCNN)\n   + Bert Base\n   + Albert\n   + NEZHA\n   + RoBERTa\n   + SimCSE\n   + Poly-Encoder\n   + ColBERT\n   + RE2（Simple-Effective-Text-Matching）\n\n# Usages\n```\n1：examples目录下有不同模型对应的 preprocess/train/evalute代码，可自行修改\n2：如下示例从examples中引入actuator方法，准备好对应的模型配置文件即可执行\n3：examples目录下的inference.py为训练好的模型推理代码\n```\n\n### TF-IDF\n\n```python\n# Example\n# Sklearn version\nfrom examples.run_tfidf_sklearn import actuator\nactuator(\"./corpus/chinese/breeno/train.tsv\", query1=\"12 23 4160 276\", query2=\"29 23 169 1495\")\n\n# Custom version\nfrom examples.run_tfidf import actuator\nactuator(\"./corpus/chinese/breeno/train.tsv\", query1=\"12 23 4160 276\", query2=\"29 23 169 1495\")\n\n# 工具调用\nfrom sim.tf_idf import TFIdf\n\ntokens_list = [\"这是 一个 什么 样 的 工具\", \"...\"]\nquery = [\"非常 好用 的 工具\"]\n\ntf_idf = TFIdf(tokens_list, split=\" \")\nprint(tf_idf.get_score(query, 0))  # score\nprint(tf_idf.get_score_list(query, 10))  # [(index, score), ...]\nprint(tf_idf.weight())  # list or numpy array\n```\n\n### BM25\n\n```python\n# Example\nfrom examples.run_bm25 import actuator\nactuator(\"./corpus/chinese/breeno/train.tsv\", query1=\"12 23 4160 276\", query2=\"29 23 169 1495\")\n\n# 工具调用\nfrom sim.bm25 import BM25\n\ntokens_list = [\"这是 一个 什么 样 的 工具\", \"...\"]\nquery = [\"非常 好用 的 工具\"]\n\nbm25 = BM25(tokens_list, split=\" \")\nprint(bm25.get_score(query, 0))  # score\nprint(bm25.get_score_list(query, 10))  # [(index, score), ...]\nprint(bm25.weight())  # list or numpy array\n```\n\n### LSH\n\n```python\nfrom sim.lsh import E2LSH\nfrom sim.lsh import MinHash\n\ne2lsh = E2LSH()\nmin_hash = MinHash()\n\ncandidates = [[3.6216, 8.6661, -2.8073, -0.44699, 0], ...]\nquery = [-2.7769, -5.6967, 5.9179, 0.37671, 1]\nprint(e2lsh.search(candidates, query))  # index in candidates\nprint(min_hash.search(candidates, query))  # index in candidates\n```\n\n### SIF\n+ [A Simple But Tough-To-Beat Baseline For Sentence Embeddings](https://openreview.net/pdf?id=SyK00v5xx)\n+ [Unsupervised Random Walk Sentence Embeddings: A Strong but Simple Baseline](https://aclanthology.org/W18-3012.pdf)\n```python\nsentences = [[\"token1\", \"token2\", \"...\"], ...]\nvector = [[[1, 1, 1], [2, 2, 2], [...]], ...]\nfrom sim.sif_usif import SIF\nfrom sim.sif_usif import uSIF\n\nsif = SIF(n_components=5, component_type=\"svd\")\nsif.fit(tokens_list=sentences, vector_list=vector)\n\nusif = uSIF(n_components=5, n=1, component_type=\"svd\")\nusif.fit(tokens_list=sentences, vector_list=vector)\n```\n\n### FastText\n+ [Bag of Tricks for Efficient Text Classification](https://arxiv.org/pdf/1607.01759.pdf)\n```python\n# TensorFlow version\nfrom examples.tensorflow.run_fast_text import actuator\nactuator(execute_type=\"train\", model_type=\"bert\", model_dir=\"./data/chinese_wwm_L-12_H-768_A-12\")\n\n# Pytorch version\nfrom examples.pytorch.run_fast_text import actuator\nactuator(execute_type=\"train\", model_type=\"bert\", model_dir=\"./data/chinese_wwm_pytorch\")\n```\n\n### RNN Base\n+ [Siamese Recurrent Architectures for Learning Sentence Similarity](https://scholar.google.com/scholar_url?url=https://ojs.aaai.org/index.php/AAAI/article/view/10350/10209&hl=zh-CN&sa=T&oi=gsb-gga&ct=res&cd=0&d=7393466935379636447&ei=KQWzYNL5OYz4yATXqJ6YCg&scisig=AAGBfm0zNEZZez8zh5ZB_iG7UTrwXmhJWg)\n+ [Learning Text Similarity with Siamese Recurrent Networks](https://aclanthology.org/W16-1617.pdf)\n```python\n# TensorFlow version\nfrom examples.tensorflow.run_siamese_rnn import actuator\nactuator(\"./data/config/siamse_rnn.json\", execute_type=\"train\")\n\n# Pytorch version\nfrom examples.pytorch.run_siamese_rnn import actuator\nactuator(\"./data/config/siamse_rnn.json\", execute_type=\"train\")\n```\n\n### CNN Base\n+ [Convolutional Neural Networks for Sentence Classification](https://arxiv.org/pdf/1408.5882.pdf)\n+ [Character-Aware Neural Language Models](https://arxiv.org/pdf/1508.06615.pdf)\n+ [Highway Networks](https://arxiv.org/pdf/1505.00387.pdf)\n+ [Very Deep Convolutional Networks for Text Classification](https://arxiv.org/pdf/1606.01781.pdf)\n```python\n# TensorFlow version\nfrom examples.tensorflow.run_cnn_base import actuator\nactuator(execute_type=\"train\", model_type=\"bert\", model_dir=\"./data/chinese_wwm_L-12_H-768_A-12\")\n\n# Pytorch version\nfrom examples.pytorch.run_cnn_base import actuator\nactuator(execute_type=\"train\", model_type=\"bert\", model_dir=\"./data/chinese_wwm_pytorch\")\n```\n\n### Bert Base\n+ [Attention Is All You Need](https://arxiv.org/pdf/1706.03762.pdf)\n```python\n# TensorFlow version\nfrom examples.tensorflow.run_basic_bert import actuator\nactuator(model_dir=\"./data/chinese_wwm_L-12_H-768_A-12\", execute_type=\"train\")\n\n# Pytorch version\nfrom examples.pytorch.run_basic_bert import actuator\nactuator(model_dir=\"./data/chinese_wwm_pytorch\", execute_type=\"train\")\n```\n\n### Albert\n+ [ALBERT: A Lite BERT For Self-superpised Learning Of Language Representations](https://arxiv.org/pdf/1909.11942.pdf)\n```python\n# TensorFlow version\nfrom examples.tensorflow.run_albert import actuator\nactuator(model_dir=\"./data/albert_small_zh_google\", execute_type=\"train\")\n\n# Pytorch version\nfrom examples.pytorch.run_albert import actuator\nactuator(model_dir=\"./data/albert_chinese_small\", execute_type=\"train\")\n```\n\n### NEZHA\n+ [NEZHA: Neural Contextualized Representation For Chinese Language Understanding](https://arxiv.org/pdf/1909.00204.pdf)\n```python\n# TensorFlow version\nfrom examples.tensorflow.run_nezha import actuator\nactuator(model_dir=\"./data/NEZHA-Base-WWM\", execute_type=\"train\")\n\n# Pytorch version\nfrom examples.pytorch.run_nezha import actuator\nactuator(model_dir=\"./data/nezha-base-wwm\", execute_type=\"train\")\n```\n\n### RoBERTa\n+ [RoBERTa: A Robustly Optimized BERT Pretraining Approach](https://arxiv.org/pdf/1907.11692.pdf)\n```python\n# TensorFlow version\nfrom examples.tensorflow.run_basic_bert import actuator\nactuator(model_dir=\"./data/chinese_roberta_L-6_H-384_A-12\", execute_type=\"train\")\n\n# Pytorch version\nfrom examples.pytorch.run_basic_bert import actuator\nactuator(model_dir=\"./data/chinese-roberta-wwm-ext\", execute_type=\"train\")\n```\n\n### SimCSE\n+ [SimCSE: Simple Contrastive Learning of Sentence Embeddings](https://arxiv.org/pdf/2104.08821.pdf)\n```python\n# TensorFlow version\nfrom examples.tensorflow.run_simcse import actuator\nactuator(model_dir=\"./data/chinese_wwm_L-12_H-768_A-12\", execute_type=\"train\", model_type=\"bert\")\n\n# Pytorch version\nfrom examples.pytorch.run_simcse import actuator\nactuator(model_dir=\"./data/chinese_wwm_pytorch\", execute_type=\"train\", model_type=\"bert\")\n```\n\n### Poly-Encoder\n+ [Poly-encoders: Transformer Architectures and Pre-training Strategies for Fast and Accurate Multi-sentence Scoring](https://arxiv.org/pdf/1905.01969v2.pdf)\n```python\n# TensorFlow version\nfrom examples.tensorflow.run_poly_encoder import actuator\nactuator(model_dir=\"./data/chinese_wwm_L-12_H-768_A-12\", execute_type=\"train\", model_type=\"bert\")\n\n# Pytorch version\nfrom examples.pytorch.run_poly_encoder import actuator\nactuator(model_dir=\"./data/chinese_wwm_pytorch\", execute_type=\"train\", model_type=\"bert\")\n```\n\n### ColBERT\n+ [ColBERT: Efficient and Effective Passage Search via Contextualized Late Interaction over BERT](https://arxiv.org/pdf/2004.12832.pdf)\n```python\n# TensorFlow version\nfrom examples.tensorflow.run_colbert import actuator\nactuator(model_dir=\"./data/chinese_wwm_L-12_H-768_A-12\", execute_type=\"train\", model_type=\"bert\")\n\n# Pytorch version\nfrom examples.pytorch.run_colbert import actuator\nactuator(model_dir=\"./data/chinese_wwm_pytorch\", execute_type=\"train\", model_type=\"bert\")\n```\n\n### RE2\n+ [Simple and Effective Text Matching with Richer Alignment Features](https://arxiv.org/pdf/1908.00300.pdf)\n```python\n# TensorFlow version\nfrom examples.tensorflow.run_re2 import actuator\nactuator(\"./data/config/re2.json\", execute_type=\"train\")\n\n# Pytorch version\nfrom examples.pytorch.run_re2 import actuator\nactuator(\"./data/config/re2.json\", execute_type=\"train\")\n```\n\n\n# Cite\n```\n@misc{text-similarity,\n  title={text-similarity},\n  author={Bocong Deng},\n  year={2021},\n  howpublished={\\url{https://github.com/DengBoCong/text-similarity}},\n}\n```\n\n# Reference\n+ [bert4keras](https://github.com/bojone/bert4keras/)\n+ [albert_zh](https://github.com/brightmart/albert_zh)\n+ [HuggingFace](https://huggingface.co/)\n+ [Self-Attention with Relative Position Representations](https://arxiv.org/pdf/1803.02155.pdf)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DengBoCong/text-similarity",
    "keywords": "similarity,tensorflow,pytorch,classification",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "text-sim",
    "package_url": "https://pypi.org/project/text-sim/",
    "platform": null,
    "project_url": "https://pypi.org/project/text-sim/",
    "project_urls": {
      "Bug Reports": "https://github.com/DengBoCong/text-similarity/issues",
      "Funding": "https://pypi.org/project/text-sim/",
      "Homepage": "https://github.com/DengBoCong/text-similarity",
      "Source": "https://github.com/DengBoCong/text-similarity"
    },
    "release_url": "https://pypi.org/project/text-sim/1.0.7/",
    "requires_dist": [
      "jieba (==0.42.1)",
      "numpy (==1.19.5)",
      "tensorflow (==2.6.0)",
      "torch (==1.10.0)",
      "scikit-learn (==0.24.2)",
      "transformers (==4.12.5)",
      "tokenizers (==0.10.3)",
      "packaging (==21.3)",
      "tqdm (==4.62.3)",
      "pandas (==1.3.4)",
      "networkx (==2.6.3)",
      "nltk (==3.6.5)",
      "gensim (==4.1.2)",
      "sentencepiece (==0.1.96)"
    ],
    "requires_python": "",
    "summary": "Chinese text similarity calculation package of Tensorflow/Pytorch",
    "version": "1.0.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13678953,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f00551d79c4363301eec8ad49b13b57d7c6755c1d0f039d6d86810642347263a",
          "md5": "bc7de39a89492c6ad58d91c377ec6c49",
          "sha256": "44acc01cc647d89c1ff8bdfabf005037ef4531d9ca7caedfdd038b865a067123"
        },
        "downloads": -1,
        "filename": "text_sim-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc7de39a89492c6ad58d91c377ec6c49",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7757,
        "upload_time": "2021-05-26T15:13:18",
        "upload_time_iso_8601": "2021-05-26T15:13:18.508636Z",
        "url": "https://files.pythonhosted.org/packages/f0/05/51d79c4363301eec8ad49b13b57d7c6755c1d0f039d6d86810642347263a/text_sim-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12da8dbac05b77114e0aa6f803f0bce7be45996c1d35de97ac8e3ce7f1f37c7b",
          "md5": "2836797fc566496248eae380f572ace9",
          "sha256": "abccb687b5e742dc671d4826086301d2cfb6fe2d303c7685ea5b4b9820df2f9a"
        },
        "downloads": -1,
        "filename": "text-sim-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2836797fc566496248eae380f572ace9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5526,
        "upload_time": "2021-05-26T15:13:20",
        "upload_time_iso_8601": "2021-05-26T15:13:20.040996Z",
        "url": "https://files.pythonhosted.org/packages/12/da/8dbac05b77114e0aa6f803f0bce7be45996c1d35de97ac8e3ce7f1f37c7b/text-sim-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4218d616fd2a00187ba50a2447c1b24874e17f28803f7ebea74f014d85ea59ce",
          "md5": "73e1a9d1374f5960b42664a71d31fdbb",
          "sha256": "c73a1b751c58486c2ebbc491fa68ca6afb59e94a9540c8a85bd5356593d0ea0d"
        },
        "downloads": -1,
        "filename": "text_sim-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73e1a9d1374f5960b42664a71d31fdbb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 100924,
        "upload_time": "2022-05-01T08:22:59",
        "upload_time_iso_8601": "2022-05-01T08:22:59.501651Z",
        "url": "https://files.pythonhosted.org/packages/42/18/d616fd2a00187ba50a2447c1b24874e17f28803f7ebea74f014d85ea59ce/text_sim-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2a7bc37c7af4064c4ed59659715a09be75ad307b1f1e50c3c0d4b3a76b30e14",
          "md5": "466e3f267fcf7a6f3a6f863d921586ac",
          "sha256": "ce3c23c391230ee80f73a28b84ab5bad45adc027801c0546ea5ca8238612e7e6"
        },
        "downloads": -1,
        "filename": "text-sim-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "466e3f267fcf7a6f3a6f863d921586ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72443,
        "upload_time": "2022-05-01T08:23:01",
        "upload_time_iso_8601": "2022-05-01T08:23:01.611517Z",
        "url": "https://files.pythonhosted.org/packages/f2/a7/bc37c7af4064c4ed59659715a09be75ad307b1f1e50c3c0d4b3a76b30e14/text-sim-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4218d616fd2a00187ba50a2447c1b24874e17f28803f7ebea74f014d85ea59ce",
        "md5": "73e1a9d1374f5960b42664a71d31fdbb",
        "sha256": "c73a1b751c58486c2ebbc491fa68ca6afb59e94a9540c8a85bd5356593d0ea0d"
      },
      "downloads": -1,
      "filename": "text_sim-1.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "73e1a9d1374f5960b42664a71d31fdbb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 100924,
      "upload_time": "2022-05-01T08:22:59",
      "upload_time_iso_8601": "2022-05-01T08:22:59.501651Z",
      "url": "https://files.pythonhosted.org/packages/42/18/d616fd2a00187ba50a2447c1b24874e17f28803f7ebea74f014d85ea59ce/text_sim-1.0.7-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f2a7bc37c7af4064c4ed59659715a09be75ad307b1f1e50c3c0d4b3a76b30e14",
        "md5": "466e3f267fcf7a6f3a6f863d921586ac",
        "sha256": "ce3c23c391230ee80f73a28b84ab5bad45adc027801c0546ea5ca8238612e7e6"
      },
      "downloads": -1,
      "filename": "text-sim-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "466e3f267fcf7a6f3a6f863d921586ac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 72443,
      "upload_time": "2022-05-01T08:23:01",
      "upload_time_iso_8601": "2022-05-01T08:23:01.611517Z",
      "url": "https://files.pythonhosted.org/packages/f2/a7/bc37c7af4064c4ed59659715a09be75ad307b1f1e50c3c0d4b3a76b30e14/text-sim-1.0.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}