{
  "info": {
    "author": "John Thorvald Wodder II",
    "author_email": "interleave@varonathe.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": ".. image:: http://www.repostatus.org/badges/latest/active.svg\n    :target: http://www.repostatus.org/#active\n    :alt: Project Status: Active â€” The project has reached a stable, usable\n          state and is being actively developed.\n\n.. image:: https://github.com/jwodder/interleave/workflows/Test/badge.svg?branch=master\n    :target: https://github.com/jwodder/interleave/actions?workflow=Test\n    :alt: CI Status\n\n.. image:: https://codecov.io/gh/jwodder/interleave/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/jwodder/interleave\n\n.. image:: https://img.shields.io/pypi/pyversions/interleave.svg\n    :target: https://pypi.org/project/interleave/\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/interleave.svg\n    :target: https://anaconda.org/conda-forge/interleave\n    :alt: Conda Version\n\n.. image:: https://img.shields.io/github/license/jwodder/interleave.svg\n    :target: https://opensource.org/licenses/MIT\n    :alt: MIT License\n\n`GitHub <https://github.com/jwodder/interleave>`_\n| `PyPI <https://pypi.org/project/interleave/>`_\n| `Issues <https://github.com/jwodder/interleave/issues>`_\n| `Changelog <https://github.com/jwodder/interleave/blob/master/CHANGELOG.md>`_\n\nThe ``interleave`` package provides a function of the same name that takes a\nnumber of iterators, runs them in separate threads, and yields the values\nproduced as soon as each one is available.\n\nInstallation\n============\n``interleave`` requires Python 3.7 or higher.  Just use `pip\n<https://pip.pypa.io>`_ for Python 3 (You have pip, right?) to install\n``interleave`` and its dependencies::\n\n    python3 -m pip install interleave\n\n\nExample\n=======\n\n>>> from time import sleep, strftime\n>>> from interleave import interleave\n>>>\n>>> def sleeper(idno, delays):\n...     for i, d in enumerate(delays):\n...         sleep(d)\n...         yield (idno, i)\n...\n>>> with interleave(\n...     [\n...         sleeper(0, [0, 1, 2]),\n...         sleeper(1, [2, 2, 2]),\n...         sleeper(2, [5, 2, 1]),\n...     ]\n... ) as it:\n...     for x in it:\n...         print(strftime(\"%H:%M:%S\"), x)\n...\n22:08:39 (0, 0)\n22:08:40 (0, 1)\n22:08:41 (1, 0)\n22:08:42 (0, 2)\n22:08:43 (1, 1)\n22:08:44 (2, 0)\n22:08:45 (1, 2)\n22:08:46 (2, 1)\n22:08:47 (2, 2)\n\n\nAPI\n===\n\n.. code:: python\n\n    interleave.interleave(\n        iterators: Iterable[Iterator[T]],\n        *,\n        max_workers: Optional[int] = None,\n        thread_name_prefix: str = \"\",\n        queue_size: Optional[int] = None,\n        onerror: interleave.OnError = interleave.STOP,\n    ) -> interleave.Interleaver[T]\n\n``interleave()`` runs the given iterators in separate threads and returns an\niterator that yields the values yielded by them as they become available.  (See\nbelow for details on the ``Interleaver`` class.)\n\nThe ``max_workers`` and ``thread_name_prefix`` parameters are passed through to\nthe underlying |ThreadPoolExecutor|_ (q.v.).  ``max_workers`` determines the\nmaximum number of iterators to run at one time.\n\n.. |ThreadPoolExecutor| replace:: ``concurrent.futures.ThreadPoolExecutor``\n.. _ThreadPoolExecutor:\n   https://docs.python.org/3/library/concurrent.futures.html\n   #concurrent.futures.ThreadPoolExecutor\n\nThe ``queue_size`` parameter sets the maximum size of the queue used internally\nto pipe values yielded by the iterators; when the queue is full, any iterator\nwith a value to yield will block waiting for the next value to be dequeued by a\ncall to the interleaver's ``__next__``.  When ``queue_size`` is ``None`` (the\ndefault), ``interleave()`` uses a ``queue.SimpleQueue``, which has no maximum\nsize.  When ``queue_size`` is non-``None`` (including zero, signifying no\nmaximum size), ``interleave()`` uses a ``queue.Queue``, whose ``get()`` method\nis uninterruptible (including by ``KeyboardInterrupt``) on Windows.\n\nThe ``onerror`` parameter is an enum that determines how ``interleave()``\nshould behave if one of the iterators raises an exception.  The possible values\nare:\n\n``STOP``\n    *(default)* Stop iterating over all iterators, cancel any outstanding\n    iterators that haven't been started yet, wait for all running threads to\n    finish, and reraise the exception.  Note that, due to the inability to stop\n    an iterator between yields, the \"waiting\" step involves waiting for each\n    currently-running iterator to yield its next value before stopping.  This\n    can deadlock if the queue fills up in the interim.\n\n``DRAIN``\n    Like ``STOP``, but any remaining values yielded by the iterators before\n    they finish are yielded by the interleaver before raising the exception\n\n``FINISH_ALL``\n    Continue running as normal and reraise the exception once all iterators\n    have finished\n\n``FINISH_CURRENT``\n    Like ``FINISH_ALL``, except that only currently-running iterators are run\n    to completion; any iterators whose threads haven't yet been started when\n    the exception is raised will have their jobs cancelled\n\nRegardless of the value of ``onerror``, any later exceptions raised by\niterators after the initial exception are discarded.\n\n.. code:: python\n\n    class Interleaver(Generic[T]):\n        def __init__(\n            self,\n            max_workers: Optional[int] = None,\n            thread_name_prefix: str = \"\",\n            queue_size: Optional[int] = None,\n            onerror: OnError = STOP,\n        )\n\nAn iterator and context manager.  As an iterator, it yields the values\ngenerated by the iterators passed to the corresponding ``interleave()`` call as\nthey become available.  As a context manager, it returns itself on entry and,\non exit, cleans up any unfinished threads by calling the\n``shutdown(wait=True)`` method (see below).\n\nAn ``Interleaver`` can be instantiated either by calling ``interleave()`` or by\ncalling the constructor directly.  The constructor takes the same arguments as\n``interleave()``, minus ``iterators``, and produces a new ``Interleaver`` that\nis not yet running any iterators.  Iterators are submitted to a new\n``Interleaver`` via the ``submit()`` method; once all desired iterators have\nbeen submitted, the ``finalize()`` method **must** be called so that the\n``Interleaver`` can tell when everything's finished.\n\nAn ``Interleaver`` will shut down its ``ThreadPoolExecutor`` and wait for the\nthreads to finish after yielding its final value (specifically, when a call is\nmade to ``__next__``/``get()`` that would result in ``StopIteration`` or\nanother exception being raised).  In the event that an ``Interleaver`` is\nabandoned before iteration completes, the associated resources may not be\nproperly cleaned up, and threads may continue running indefinitely.  For this\nreason, it is strongly recommended that you wrap any iteration over an\n``Interleaver`` in the context manager in order to handle a premature end to\niteration (including from a ``KeyboardInterrupt``).\n\nBesides the iterator and context manager APIs, an ``Interleaver`` has the\nfollowing public methods:\n\n.. code:: python\n\n    Interleaver.submit(it: Iterator[T]) -> None\n\n*New in version 0.2.0*\n\nAdd an iterator to the ``Interleaver``.\n\nIf the ``Interleaver`` was returned from ``interleave()`` or has already had\n``finalize()`` called on it, calling ``submit()`` will result in a\n``ValueError``.\n\n.. code:: python\n\n    Interleave.finalize() -> None\n\n*New in version 0.2.0*\n\nNotify the ``Interleaver`` that all iterators have been registered.  This\nmethod must be called in order for the ``Interleaver`` to detect the end of\niteration; if this method has not been called and all submitted iterators have\nfinished & had their values retrieved, then a subsequent call to ``next(it)``\nwill end up hanging indefinitely.\n\n.. code:: python\n\n    Interleaver.get(block: bool = True, timeout: Optional[float] = None) -> T\n\n*New in version 0.2.0*\n\nFetch the next value generated by the iterators.  If all iterators have\nfinished and all values have been retrieved, raises\n``interleaver.EndOfInputError``.  If ``block`` is ``False`` and no values are\nimmediately available, raises ``queue.Empty``.  If ``block`` is ``True``, waits\nup to ``timeout`` seconds (or indefinitely, if ``timeout`` is ``None``) for the\nnext value to become available or for all iterators to end; if nothing happens\nbefore the timeout expires, raises ``queue.Empty``.\n\n``it.get(block=True, timeout=None)`` is equivalent to ``next(it)``, except that\nthe latter converts an ``EndOfInputError`` to ``StopIteration``.\n\n**Note:** When ``onerror=STOP`` and a timeout is set, if an iterator raises an\nexception, the timeout may be exceeded as the ``Interleaver`` waits for all\nremaining threads to shut down.\n\n.. code:: python\n\n    Interleaver.shutdown(wait: bool = True) -> None\n\nCall ``finalize()`` if it hasn't been called yet, tell all running iterators to\nstop iterating, cancel any outstanding iterators that haven't been started yet,\nand shut down the ``ThreadPoolExecutor``.  The ``wait`` parameter is passed\nthrough to the call to ``ThreadPoolExecutor.shutdown()``.\n\nThe ``Interleaver`` can continue to be iterated over after calling\n``shutdown()`` and will yield any remaining values produced by the iterators\nbefore they stopped completely.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jwodder/interleave",
    "keywords": "interleaving,iterators,multithreading",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "interleave",
    "package_url": "https://pypi.org/project/interleave/",
    "platform": null,
    "project_url": "https://pypi.org/project/interleave/",
    "project_urls": {
      "Bug Tracker": "https://github.com/jwodder/interleave/issues",
      "Homepage": "https://github.com/jwodder/interleave",
      "Source Code": "https://github.com/jwodder/interleave"
    },
    "release_url": "https://pypi.org/project/interleave/0.2.1/",
    "requires_dist": null,
    "requires_python": "~=3.7",
    "summary": "Yield from multiple iterators as values become available",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14318978,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c25244e2dd6266ddb4bd1d3c4efaedf876aa33fdc1276f89629b483990618e4",
          "md5": "891e5a50eb3b7a051c014df523ea368d",
          "sha256": "039aa6de4e21f21c726bb6414d54122291883a152e0ced6c15fe3f0a95fdfb60"
        },
        "downloads": -1,
        "filename": "interleave-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "891e5a50eb3b7a051c014df523ea368d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 9686,
        "upload_time": "2022-01-17T14:49:45",
        "upload_time_iso_8601": "2022-01-17T14:49:45.326943Z",
        "url": "https://files.pythonhosted.org/packages/5c/25/244e2dd6266ddb4bd1d3c4efaedf876aa33fdc1276f89629b483990618e4/interleave-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8fa83f58914a3cb4214ebc187e04bf8a02ef07932c164cfbcb0421fa3a60f1c",
          "md5": "e24b129c461395b62a1c2c11b10af027",
          "sha256": "650ac2c9ae782b7d9a3997cab1fabbb1699758213e0db1d0fae7c6d06cd8c27d"
        },
        "downloads": -1,
        "filename": "interleave-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e24b129c461395b62a1c2c11b10af027",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 13654,
        "upload_time": "2022-01-17T14:49:46",
        "upload_time_iso_8601": "2022-01-17T14:49:46.880794Z",
        "url": "https://files.pythonhosted.org/packages/d8/fa/83f58914a3cb4214ebc187e04bf8a02ef07932c164cfbcb0421fa3a60f1c/interleave-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c19220a6adbd069a470f00a957859073b545df62a0091cc581ee3a99342ffc4",
          "md5": "c7cc6fab53e69d09213062910ead6099",
          "sha256": "907f06115a2a4bc352a1adbdb945b9a68fca3f4b695337a3b5ad91a5e30d81c9"
        },
        "downloads": -1,
        "filename": "interleave-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7cc6fab53e69d09213062910ead6099",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 9725,
        "upload_time": "2022-01-23T02:34:32",
        "upload_time_iso_8601": "2022-01-23T02:34:32.760730Z",
        "url": "https://files.pythonhosted.org/packages/0c/19/220a6adbd069a470f00a957859073b545df62a0091cc581ee3a99342ffc4/interleave-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fc3d3bd20d06a321d2ec1192d8d96e5ad7e7b385a0e45d798e00909c3928ce1",
          "md5": "a95bf84d69800ab5cd3d987141dd6546",
          "sha256": "4f17bf79d96e3ad262e204c83171f869fdffdd005fa4fedad072bbc5ca4a02de"
        },
        "downloads": -1,
        "filename": "interleave-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a95bf84d69800ab5cd3d987141dd6546",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 13768,
        "upload_time": "2022-01-23T02:34:34",
        "upload_time_iso_8601": "2022-01-23T02:34:34.281786Z",
        "url": "https://files.pythonhosted.org/packages/8f/c3/d3bd20d06a321d2ec1192d8d96e5ad7e7b385a0e45d798e00909c3928ce1/interleave-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a38b9e5ae3a86f90696f588122a7e75ba642b14b34b8e2aa6e3a08906d277995",
          "md5": "20532aa4f17603b5ef3a3d42e6159395",
          "sha256": "652f1de5b372e263bd3e1a4789ff8186a84884b232793e500008f6a5cae58e83"
        },
        "downloads": -1,
        "filename": "interleave-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20532aa4f17603b5ef3a3d42e6159395",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 11245,
        "upload_time": "2022-02-20T18:04:45",
        "upload_time_iso_8601": "2022-02-20T18:04:45.586068Z",
        "url": "https://files.pythonhosted.org/packages/a3/8b/9e5ae3a86f90696f588122a7e75ba642b14b34b8e2aa6e3a08906d277995/interleave-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fea31848191378d7469f6b54ce48208fa0a014993c9716607992e0a6eae2361e",
          "md5": "825dda2214efa264b612be15f6e6ffc8",
          "sha256": "3f9b36057dc1e041affe4fe76bac5256a9f7a02f05112b6162bf91ff4e46bb5d"
        },
        "downloads": -1,
        "filename": "interleave-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "825dda2214efa264b612be15f6e6ffc8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 15879,
        "upload_time": "2022-02-20T18:04:47",
        "upload_time_iso_8601": "2022-02-20T18:04:47.221925Z",
        "url": "https://files.pythonhosted.org/packages/fe/a3/1848191378d7469f6b54ce48208fa0a014993c9716607992e0a6eae2361e/interleave-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8ff0d393596b592e911e57f9970faa799c54d70eed3b92c2064f4a19c94445f",
          "md5": "5ed254fec93bda034f571d9ab94855de",
          "sha256": "3345cedac12b8663e787cb2e0a80a3c1e450387b66b152ed32b951bb7c3d9e7e"
        },
        "downloads": -1,
        "filename": "interleave-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ed254fec93bda034f571d9ab94855de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.7",
        "size": 11271,
        "upload_time": "2022-07-02T22:48:16",
        "upload_time_iso_8601": "2022-07-02T22:48:16.315873Z",
        "url": "https://files.pythonhosted.org/packages/f8/ff/0d393596b592e911e57f9970faa799c54d70eed3b92c2064f4a19c94445f/interleave-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c801c45cd6dcd72c0669c3e11c74fbb1459cea5aa3d80960ffee47b66d1640d",
          "md5": "45a4a68aeccac12d1d3e9cbc00560c9e",
          "sha256": "210969c607828ecafc5e425532a6b6c10d09f1343e5976238ca15e8a07fb5118"
        },
        "downloads": -1,
        "filename": "interleave-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "45a4a68aeccac12d1d3e9cbc00560c9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 16058,
        "upload_time": "2022-07-02T22:48:17",
        "upload_time_iso_8601": "2022-07-02T22:48:17.989667Z",
        "url": "https://files.pythonhosted.org/packages/8c/80/1c45cd6dcd72c0669c3e11c74fbb1459cea5aa3d80960ffee47b66d1640d/interleave-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f8ff0d393596b592e911e57f9970faa799c54d70eed3b92c2064f4a19c94445f",
        "md5": "5ed254fec93bda034f571d9ab94855de",
        "sha256": "3345cedac12b8663e787cb2e0a80a3c1e450387b66b152ed32b951bb7c3d9e7e"
      },
      "downloads": -1,
      "filename": "interleave-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5ed254fec93bda034f571d9ab94855de",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.7",
      "size": 11271,
      "upload_time": "2022-07-02T22:48:16",
      "upload_time_iso_8601": "2022-07-02T22:48:16.315873Z",
      "url": "https://files.pythonhosted.org/packages/f8/ff/0d393596b592e911e57f9970faa799c54d70eed3b92c2064f4a19c94445f/interleave-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8c801c45cd6dcd72c0669c3e11c74fbb1459cea5aa3d80960ffee47b66d1640d",
        "md5": "45a4a68aeccac12d1d3e9cbc00560c9e",
        "sha256": "210969c607828ecafc5e425532a6b6c10d09f1343e5976238ca15e8a07fb5118"
      },
      "downloads": -1,
      "filename": "interleave-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "45a4a68aeccac12d1d3e9cbc00560c9e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.7",
      "size": 16058,
      "upload_time": "2022-07-02T22:48:17",
      "upload_time_iso_8601": "2022-07-02T22:48:17.989667Z",
      "url": "https://files.pythonhosted.org/packages/8c/80/1c45cd6dcd72c0669c3e11c74fbb1459cea5aa3d80960ffee47b66d1640d/interleave-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}