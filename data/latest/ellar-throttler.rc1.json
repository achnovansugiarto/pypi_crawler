{
  "info": {
    "author": null,
    "author_email": "Ezeudoh Tochukwu <tochukwu.ezeudoh@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "<p align=\"center\">\n  <a href=\"#\" target=\"blank\"><img src=\"docs/img/EllarLogoIconOnly.png\" width=\"200\" alt=\"Ellar Logo\" /></a>\n</p>\n\n<p align=\"center\">A rate limiting module for Ellar</p>\n\n![Test](https://github.com/eadwinCode/ellar-throttler/actions/workflows/test_full.yml/badge.svg)\n![Coverage](https://img.shields.io/codecov/c/github/eadwinCode/ellar-throttler)\n[![PyPI version](https://badge.fury.io/py/ellar-throttler.svg)](https://badge.fury.io/py/ellar-throttler)\n[![PyPI version](https://img.shields.io/pypi/v/ellar-throttler.svg)](https://pypi.python.org/pypi/ellar-throttler)\n[![PyPI version](https://img.shields.io/pypi/pyversions/ellar-throttler.svg)](https://pypi.python.org/pypi/ellar-throttler)\n\nFull Documentation: [Here](https://eadwincode.github.io/ellar/throttling/)\n\n## Introduction\nA rate limit module for Ellar\n\n## Installation\n```shell\n$(venv) pip install ellar-throttler\n```\n## Usage\n### ThrottlerModule\nThe `ThrottleModule` is the main entry point for this package, and can be used in a synchronous or asynchronous manner. \nAll the needs to be passed is the `ttl`, the time to live in seconds for the request tracker, and the `limit`, \nor how many times an endpoint can be hit before returning a 429 status code.\n\n```python\nfrom ellar.common import Module\nfrom ellar_throttler import ThrottlerModule\n\n@Module(modules=[\n    ThrottlerModule.setup(ttl=60, limit=10)\n])\nclass ApplicationModule:\n    pass\n```\nThe above would mean that 10 requests from the same IP can be made to a single endpoint in 1 minute.\n\n```python\nfrom ellar.common import Module\nfrom ellar_throttler import ThrottlerModule, ThrottlerGuard\nfrom ellar.core import Config, ModuleSetup, DynamicModule\n\ndef throttler_module_factory(module: ThrottlerModule, config: Config) -> DynamicModule:\n    return module.setup(ttl=config['THROTTLE_TTL'], limit=config['THROTTLE_LIMIT'])\n\n\n@Module(modules=[\n    ModuleSetup(ThrottlerModule, inject=[Config], factory=throttler_module_factory)\n])\nclass ApplicationModule:\n    pass\n\n# server.py\napplication = AppFactory.create_from_app_module(\n    ApplicationModule,\n    config_module=os.environ.get(\n        ELLAR_CONFIG_MODULE, \"dialerai.config:DevelopmentConfig\"\n    ),\n    global_guards=[ThrottlerGuard]\n)\n```\nThe above is also a valid configuration for `ThrottleModule` registration if you want to work with config.\n\n**NOTE**: If you add the `ThrottlerGuard` to your application `global_guards`, then all the incoming requests will be throttled by default. \nThis can also be omitted in favor of `@guards(ThrottlerGuard)`. \nThe global guard check can be skipped using the `@skip_throttle()` decorator mentioned later.\n\nExample with `@guards(ThrottlerGuard)`\n```python\n# project_name/controller.py\nfrom ellar.common import Controller, guards\nfrom ellar_throttler import throttle, ThrottlerGuard\n\n@Controller()\nclass AppController:\n\n  @guards(ThrottlerGuard)\n  @throttle(limit=5, ttl=30)\n  def normal(self):\n      pass\n\n```\n### Decorators\n#### @throttle()\n```\n@throttle(*, limit: int = 20, ttl: int = 60)\n```\nThis decorator will set `THROTTLER_LIMIT` and `THROTTLER_TTL` metadata on the route, for retrieval from the Reflector class. \nIt can be applied to controllers and routes.\n#### @skip_throttle()\n```\n@skip_throttle(skip: bool = True)\n```\nThis decorator can be used to skip a route or a class or to negate the skipping of a route in \na class that is skipped.\n\n```python\n# project_name/controller.py\nfrom ellar.common import Controller\nfrom ellar_throttler import ThrottlerGuard, skip_throttle\n\n@skip_throttle()\n@Controller(guards=[ThrottlerGuard])\nclass AppController:\n  \n    def do_skip(self):\n        pass\n  \n    @skip_throttle(skip=False)\n    def dont_skip(self):\n        pass\n```\nIn the above controller, `dont_skip` would be counted against and \nrate-limited while `do_skip` would not be limited in any way.\n\n### ThrottlerStorage\nInterface to define the methods to handle the details when it comes to keeping track of the requests.\n\nCurrently, the key is seen as an `MD5` hash of the IP the `class name` and the `function name`, \nto ensure that no unsafe characters are used.\n\nThe interface looks like this:\n\n```python\nimport typing as t\nfrom abc import ABC, abstractmethod\n\nclass IThrottlerStorage(ABC):\n    @property\n    @abstractmethod\n    def storage(self) -> t.Dict[str, ThrottlerStorageOption]:\n        \"\"\"\n        The internal storage with all the request records.\n        The key is a hashed key based on the current context and IP.\n        :return:\n        \"\"\"\n\n    @abstractmethod\n    async def increment(self, key: str, ttl: int) -> ThrottlerStorageRecord:\n        \"\"\"\n        Increment the amount of requests for a given record. The record will\n        automatically be removed from the storage once its TTL has been reached.\n        :param key:\n        :param ttl:\n        :return:\n        \"\"\"\n```\nSo long as the Storage service implements this interface, it should be usable by the `ThrottlerGuard`.\n\n### Proxies\nIf you are working with multiple proxies, you can override the `get_tracker()` method to pull the value from the header or install \n[`ProxyHeadersMiddleware`](https://github.com/encode/uvicorn/blob/master/uvicorn/middleware/proxy_headers.py)\n\n```python\n# throttler_behind_proxy.guard.py\nfrom ellar_throttler import ThrottlerGuard\nfrom ellar.di import injectable\nfrom ellar.core.connection import HTTPConnection\n\n\n@injectable()\nclass ThrottlerBehindProxyGuard(ThrottlerGuard):\n    def get_tracker(self, connection: HTTPConnection) -> str:\n        return connection.client.host  # individualize IP extraction to meet your own needs\n\n# project_name/controller.py\nfrom .throttler_behind_proxy import ThrottlerBehindProxyGuard\n\n@Controller('', guards=[ThrottlerBehindProxyGuard])\nclass AppController:\n    pass\n```\n\n### Working with WebSockets\nTo work with Websockets you can extend the `ThrottlerGuard` and override the `handle_request` method with the code below:\n```python\nfrom ellar_throttler import ThrottlerGuard\nfrom ellar.di import injectable\nfrom ellar.core import IExecutionContext\nfrom ellar_throttler import ThrottledException\n\n@injectable()\nclass WsThrottleGuard(ThrottlerGuard):\n    async def handle_request(self, context: IExecutionContext, limit: int, ttl: int) -> bool:\n        websocket_client = context.switch_to_websocket().get_client()\n\n        host = websocket_client.client.host\n        key = self.generate_key(context, host)\n        result = await self.storage_service.increment(key, ttl)\n\n        # Throw an error when the user reached their limit.\n        if result.total_hits > limit:\n            raise ThrottledException(wait=result.time_to_expire)\n        \n        return True\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "ellar-throttler",
    "package_url": "https://pypi.org/project/ellar-throttler/",
    "platform": null,
    "project_url": "https://pypi.org/project/ellar-throttler/",
    "project_urls": {
      "Documentation": "https://github.com/eadwinCode/ellar-throttler",
      "Homepage": "https://eadwincode.github.io/ellar-throttler/",
      "Source": "https://github.com/eadwinCode/ellar-throttler"
    },
    "release_url": "https://pypi.org/project/ellar-throttler/0.0.2/",
    "requires_dist": [
      "ellar >= 0.3.4",
      "pre-commit ; extra == \"dev\"",
      "pytest >= 7.1.3,<8.0.0 ; extra == \"test\"",
      "pytest-cov >= 2.12.0,<5.0.0 ; extra == \"test\"",
      "mypy == 0.971 ; extra == \"test\"",
      "flake8 >= 3.8.3,<7.0.0 ; extra == \"test\"",
      "black ==22.8.0 ; extra == \"test\"",
      "isort >=5.0.6,<6.0.0 ; extra == \"test\"",
      "pytest-asyncio ; extra == \"test\"",
      "autoflake ; extra == \"test\""
    ],
    "requires_python": ">=3.7",
    "summary": "A rate limiting module for Ellar",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17449965,
  "releases": {
    "0.0.2": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "34c81839ba4f60b5967996c6dcf758da810cd9e40c38b18c5d70a7f11a2d1a38",
          "md5": "b137c4d1cb352e92e1e8ad5bcfea6161",
          "sha256": "0cded2949dfdc6b2a8ce71c766e213864443512a36cde98c3f5e15d66950af1b"
        },
        "downloads": -1,
        "filename": "ellar_throttler-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b137c4d1cb352e92e1e8ad5bcfea6161",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11769,
        "upload_time": "2023-03-26T13:42:02",
        "upload_time_iso_8601": "2023-03-26T13:42:02.676533Z",
        "url": "https://files.pythonhosted.org/packages/34/c8/1839ba4f60b5967996c6dcf758da810cd9e40c38b18c5d70a7f11a2d1a38/ellar_throttler-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "28b7f19972f9fba49b9000d3bdfe88f6e42d1c468dac46da58b442cfffe759b6",
          "md5": "6830b25b8bc6cbc4c949ae9c22cebb2d",
          "sha256": "450ba69580a520019ee43e4235fa618e988dbcd66c643a4964edfe4c130e6f4b"
        },
        "downloads": -1,
        "filename": "ellar-throttler-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6830b25b8bc6cbc4c949ae9c22cebb2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 105577,
        "upload_time": "2023-03-26T13:42:05",
        "upload_time_iso_8601": "2023-03-26T13:42:05.702404Z",
        "url": "https://files.pythonhosted.org/packages/28/b7/f19972f9fba49b9000d3bdfe88f6e42d1c468dac46da58b442cfffe759b6/ellar-throttler-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "34c81839ba4f60b5967996c6dcf758da810cd9e40c38b18c5d70a7f11a2d1a38",
        "md5": "b137c4d1cb352e92e1e8ad5bcfea6161",
        "sha256": "0cded2949dfdc6b2a8ce71c766e213864443512a36cde98c3f5e15d66950af1b"
      },
      "downloads": -1,
      "filename": "ellar_throttler-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b137c4d1cb352e92e1e8ad5bcfea6161",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 11769,
      "upload_time": "2023-03-26T13:42:02",
      "upload_time_iso_8601": "2023-03-26T13:42:02.676533Z",
      "url": "https://files.pythonhosted.org/packages/34/c8/1839ba4f60b5967996c6dcf758da810cd9e40c38b18c5d70a7f11a2d1a38/ellar_throttler-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "28b7f19972f9fba49b9000d3bdfe88f6e42d1c468dac46da58b442cfffe759b6",
        "md5": "6830b25b8bc6cbc4c949ae9c22cebb2d",
        "sha256": "450ba69580a520019ee43e4235fa618e988dbcd66c643a4964edfe4c130e6f4b"
      },
      "downloads": -1,
      "filename": "ellar-throttler-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6830b25b8bc6cbc4c949ae9c22cebb2d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 105577,
      "upload_time": "2023-03-26T13:42:05",
      "upload_time_iso_8601": "2023-03-26T13:42:05.702404Z",
      "url": "https://files.pythonhosted.org/packages/28/b7/f19972f9fba49b9000d3bdfe88f6e42d1c468dac46da58b442cfffe759b6/ellar-throttler-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}