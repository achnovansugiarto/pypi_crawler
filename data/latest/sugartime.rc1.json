{
  "info": {
    "author": "Daniel Wood",
    "author_email": "danielkentwood@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# SugarTime\n### Time series forecasting and insulin optimization for Type 1 Diabetes\n\n* [**Introduction**](https://github.com/danielkentwood/sugar#introduction)\n* [**Installation**](https://github.com/danielkentwood/sugar#installation)\n* [**Usage**](https://github.com/danielkentwood/sugar#usage)\n* [**Web app**](https://github.com/danielkentwood/sugar#web-app)\n* [**Limitations**](https://github.com/danielkentwood/sugar#limitations)\n\n## Introduction\n\nMost people never have to think about balancing glucose and insulin in their blood. Diabetes patients have to consciously assume this role because their pancreas isn't doing it for them. It can be exhausting. There is a lot of guesswork that goes into administering the correct amount of insulin at the correct time in order to counter the rise in glucose that will follow a meal.\n\nThe **SugarTime** package is a set of tools to model the effects of carbohydrates and insulin on blood glucose dynamics. The goal of these tools is to learn how a diabetic's blood glucose responds to food and to insulin. After it has learned this, the patient can provide the timing and amount of carbs they plan on eating, and the model will offer a best guess as to which insulin dosage will keep their blood glucose within an optimal range. \n\nThe package uses a [NARX (Nonlinear AutoRegression with eXogenous)](https://en.wikipedia.org/wiki/Nonlinear_autoregressive_exogenous_model) time-series model. The NARX implementation relies on the fireTS package ([https://github.com/jxx123/fireTS](https://github.com/jxx123/fireTS)). The NARX model learns `y(t + k)` as a function of the history of `y` (e.g., `y(t), y(t-1), y(t-2),...`) and various transformations of any other exogenous timeseries variables, where `k` is the prediction step in a multioutput implementation of NARX. In essence, NARX is simply regression after transforming the data using three different types of lags. The _autoregression order_ specifies how many lagged copies of the target variable will be included in the design matrix. The _exogenous order_ specifies the same as _autoregression order_, but for the exogenous variables. The _exogenous delay_ specifies a constant lag applied to all columns corresponding to an exogenous variable.\n\n## Installation\nNOTE: This package requires python3.\n\nTo install, use pip. \n\n`pip install sugartime`\n\nTo get the latest development version:\n\n```python\ngit clone https://github.com/danielkentwood/sugartime\ncd sugartime\npip install -e .\n```\n\n## Usage\n\n### Loading data\n\n* Load your own data into a patient object:\n\n```python\nfrom sugartime.model import Patient\nimport numpy as np\n\n# data\nX = np.random.randn(100, 2)\ny = np.random.randn(100, 1)\n\n# create patient object and load data\npatient = Patient()\npatient.load_data(X, y)\n\n```\n\n* Load preprocessed example patient data and split into training and test sets:\n\n```python\nfrom sugartime.model import Patient\n\npatient = Patient()\npatient.load_example_data()\npatient.split_data(\n\ttarget_name='estimated_glu',\n\tfeature_names=['carb_grams', 'all_insulin'],\n\tsplit=[0.75])\n```\n\n### Fitting a multioutput NARX model\n\n* Train a multioutput NARX model with a `RandomForestRegressor` base model:\n\n```python\nfrom sugartime.model import MultiOutModel\nfrom sklearn.ensemble import RandomForestRegressor\n\n# After loading patient data, create multioutput model object\nmdl = MultiOutModel(patient, horizon=12)\nestimator = {'RandomForest': RandomForestRegressor()}\nmdl.fit(\n\tpatient.Xtrain,\n\tpatient.ytrain,\n\testimator,\n\tauto_order=6,\n\texog_order=[8, 8],\n\texog_delay=[0, 0])\n```\n\n* Perform grid search on the design hyperparameters to find the optimal autoregression order, exogenous input order, and exogenous input delay for each output step:\n\n```python\nfrom sklearn.linear_model import LinearRegression\nfrom itertools import product\n\n# After loading patient data, create design hyperparameter grid\nauto_order = range(1, 9)\nexog_order = [[9, 9], [18, 18]]\nexog_delay = [[0, 0], [5, 5]]\ndesign_params = list(product(auto_order, exog_order, exog_delay))\n\n# perform grid search to find best NARX models at each output step\nmdl = MultiOutModel(patient, horizon=12)\nestimators = {'linear': LinearRegression()}\nmdl.grid_search(\n    patient.Xtrain,\n    patient.ytrain,\n    patient.Xtest,\n    patient.ytest,\n    estimators,\n    design_params)\n```\n\n### Forecasting\nIn the **SugarTime** package, forecasting comes in three flavors: (1) multioutput forecast, (2) dynamic forecast, and (3) hybrid forecast.  \n\n* _Multioutput forecasting_ doesn't take into account any future information; based on information up to time `t`, it performs inference for `t+1, t+2,...t+n`, where `n` is the horizon of the model.\n\n```python\n# After fitting model, perform multioutput forecast\nypred = mdl.multioutput_forecast(\n    patient.Xtest, patient.ytest\n)\n```\n\n*  _Dynamic forecasting_ only uses the `t+1` model and iteratively updates the history of the endogenous variable with each consecutive inference. This can take into account future information (e.g., about timing and amount of carbohydrates and insulin).\n\n```python\nfrom datetime import timedelta\n\n# After fitting model, define forecast start time \nstart_time = mdl.patient.ytest.index[-1] + timedelta(minutes=5)\n\n# define the future information\nfuture = {\n    \"carb_grams\": {start_time + timedelta(minutes=20): 15},\n    \"all_insulin\": {start_time + timedelta(minutes=10): 3}}\n\n# dynamic forecast\nypred = mdl.dynamic_forecast(\n    mdl.patient.Xtest,\n    mdl.patient.ytest,\n    start_time,\n    future)\n```\n\n* _Hybrid forecasting_ iteratively performs multioutput forecasting such that each output step of the model is a weighted average of all previous overlapping forecasts as well as the present forecast. For example, if the multioutput model has a horizon of 3, then the 3rd output step would be a weighted average of output step 1 from the multioutput forecast at `t+3`, output step 2 from the multioutput forecast at `t+2`, and output step 3 from the multioutput forecast at `t+1`. \n\n\n```python\n# after defining the future information, perform hybrid forecast\nypred = mdl.hybrid_forecast(\n    mdl.patient.Xtest,\n    mdl.patient.ytest,\n    start_time,\n    future)\n```\n\n\n## Web app\n\nThe **SugarTime** web app provides a clean UI for the package. It uses the streamlit platform.\n\nIt is currently deployed at Heroku:\n\n[sugar-ts.herokuapp.com/](sugar-ts.herokuapp.com/). \n\nI'm using the free tier so it might take a few seconds to load. :) \n\nUPDATE: I'm also trying out the beta version of Streamlit Sharing, so you can find the app here as well: [https://share.streamlit.io/danielkentwood/sugar/sugar_app.py](https://share.streamlit.io/danielkentwood/sugar/sugar_app.py) \n\nHere is an example of the app UI:\n\n![Optimization example](./src/images/optim_example.png)\n\n### Local testing of the web app\n\nAfter installing the package and its dependencies on your computer, if you want to make changes to the web app, simply make the changes, open a terminal,  and run `streamlit run sugar_app.py` from within the main directory of the repo. You will see the following:\n\n<img src=\"./src/images/streamlit_local.png\" alt=\"local streamlit\" width=\"500\"/>\n\nThe app should pop up in your browser automatically.\n\n## Limitations\nI set out to build something useful for a family member who has diabetes. After lots of experiments, exploration, and tinkering, I've come to an understanding of why such an application doesn't exist yet. It is a really difficult problem. So this app is currently only a proof-of-concept. Here are its primary limitations:\n\n * The only time-series model available to use is a NARX (nonlinear autoregressive with exogenous regressors) design. Any regression model available within Scikit-Learn can act as the base algorithm. For the web app demo, I've currently got a vanilla support vector machine hardcoded as the base algorithm, but this can be changed. I plan on adding more model options in the future. For example, LSTM models are well suited for this flavor of time series forecasting. \n * The data set is impoverished; it consists of blood glucose readings, carbohydrates consumed, and insulin injected. It's quite possible that my goal (accurate forecasting with a 60-90 minute horizon) isn't reachable without a dataset that is richer in features. Blood glucose is influenced by more than just carbs and insulin, and the effort to train a model without these other predictors may be doomed to hit a low ceiling in terms of model performance. There are richer datasets out there with predictors like sleep, heart rate, exercise, etc. \n * This app is optimized for dealing with continuous blood glucose monitors (i.e., reading every 5 minutes). More specifically, the app currently only knows how to interpret raw historical data from the Clarity monitor and the Tandem glucose pump.  \n * There is no way to get real time forecasting since the app only takes historical data. Real time continuous forecasting would be awesome, but most device manufacturers make this difficult by adding a 3-hour lag to the data you can access from their APIs. The FDA recently relaxed the restrictions that were driving this lag, so hopefully manufacturers will soon make real-time access to data a reality.  \n * The bolus optimization approach is currently a brute force grid search that only allows for one bolus. It's a bit slow, and after adding the possibility for more than one bolus (e.g., staggered bolus for high protein/fat meals), brute force might become even more of a bottleneck; stochastic approaches will be more appropriate in that case. \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/danielkentwood/sugartime",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sugartime",
    "package_url": "https://pypi.org/project/sugartime/",
    "platform": "",
    "project_url": "https://pypi.org/project/sugartime/",
    "project_urls": {
      "Homepage": "https://github.com/danielkentwood/sugartime"
    },
    "release_url": "https://pypi.org/project/sugartime/0.0.1/",
    "requires_dist": [
      "numpy",
      "scipy",
      "scikit-learn",
      "pandas",
      "fireTS",
      "plotly",
      "streamlit"
    ],
    "requires_python": ">=3.8",
    "summary": "A python package for modeling and forecasting blood glucose dynamics in diabetics",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8640234,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffc7111f0c499f1b33642d91b307511758fb5897c7143c7530b9333c97ab6349",
          "md5": "9d415e7d0e62c576ffd515ad3ce5f901",
          "sha256": "1d45d5c5a267d685dbad1a8a4f464b54134824007aab43a8c12595894e01093d"
        },
        "downloads": -1,
        "filename": "sugartime-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9d415e7d0e62c576ffd515ad3ce5f901",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 16562,
        "upload_time": "2020-11-12T09:17:31",
        "upload_time_iso_8601": "2020-11-12T09:17:31.722094Z",
        "url": "https://files.pythonhosted.org/packages/ff/c7/111f0c499f1b33642d91b307511758fb5897c7143c7530b9333c97ab6349/sugartime-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f06f29481fa107e36981b2beb0b1369fff5088a3b23495c89cae4ebda843ad6",
          "md5": "711a7d326f27eb635eb8bd7188dba6e3",
          "sha256": "5f38d15ceafa2bc54b6cae14d1201a618bd56d6516f6e536acdc516eca4a99db"
        },
        "downloads": -1,
        "filename": "sugartime-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "711a7d326f27eb635eb8bd7188dba6e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 3817682,
        "upload_time": "2020-11-12T09:17:33",
        "upload_time_iso_8601": "2020-11-12T09:17:33.646748Z",
        "url": "https://files.pythonhosted.org/packages/8f/06/f29481fa107e36981b2beb0b1369fff5088a3b23495c89cae4ebda843ad6/sugartime-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffc7111f0c499f1b33642d91b307511758fb5897c7143c7530b9333c97ab6349",
        "md5": "9d415e7d0e62c576ffd515ad3ce5f901",
        "sha256": "1d45d5c5a267d685dbad1a8a4f464b54134824007aab43a8c12595894e01093d"
      },
      "downloads": -1,
      "filename": "sugartime-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9d415e7d0e62c576ffd515ad3ce5f901",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 16562,
      "upload_time": "2020-11-12T09:17:31",
      "upload_time_iso_8601": "2020-11-12T09:17:31.722094Z",
      "url": "https://files.pythonhosted.org/packages/ff/c7/111f0c499f1b33642d91b307511758fb5897c7143c7530b9333c97ab6349/sugartime-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f06f29481fa107e36981b2beb0b1369fff5088a3b23495c89cae4ebda843ad6",
        "md5": "711a7d326f27eb635eb8bd7188dba6e3",
        "sha256": "5f38d15ceafa2bc54b6cae14d1201a618bd56d6516f6e536acdc516eca4a99db"
      },
      "downloads": -1,
      "filename": "sugartime-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "711a7d326f27eb635eb8bd7188dba6e3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 3817682,
      "upload_time": "2020-11-12T09:17:33",
      "upload_time_iso_8601": "2020-11-12T09:17:33.646748Z",
      "url": "https://files.pythonhosted.org/packages/8f/06/f29481fa107e36981b2beb0b1369fff5088a3b23495c89cae4ebda843ad6/sugartime-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}