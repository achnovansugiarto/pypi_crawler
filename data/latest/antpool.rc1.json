{
  "info": {
    "author": "Charles Lai",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# AntPool - Python Minimalist multi-computer distributed computing framework\n\n## What\n- AntPool provides a server and resource client that makes it easy and fast to set up a multi-computer distributed environment.\n- AntPool provides a development library consistent with Python's native concurrent.futures.Executor asynchronous library, allowing you to quickly deploy your code to run in the multi-computer distributed environment.\n\n## Why \n- In some application scenarios, we want programs to run on multiple machines in parallel to gain **performance, network access** improvements;\n\t- **Computational Performance Boost**: For complex computation and analysis in Python, multi-threaded Python can't boost on multi-core CPUs(limit by GIL), so Python introduced the concurrent.futures.ProcessPoolExecutor, Multi-process development is easy to implement; but when higher performance is needed, a multi-computer distributed environment quickly allows you to change just a few lines of code and take performance to new heights.\n\t- **Network Capability Improvement**: Crawling data on the Internet, analyzing and extracting it, is often limited by the traffic of the crawled server. Therefore, it is necessary to deploy the program to multiple machines with different network addresses for crawling, which is tedious and error-prone to do manually, but a multi-machine distributed environment can quickly solve such problems.\n- **Everyone Can Using** Instead of requiring complex configurations, specialized equipment, and relearning how to develop, AntPool is available to everyone.\n\t- Any single device can be used as a server or resource client or both. These include PC/Mac/Linux computers, and even devices like your iPhone/iPad/Android that can run Python.\n\t- You can use all your devices at home to help you improve your computing performance, or you can ask your colleagues at work to contribute some of their CPU cores to help you achieve complex computations.\n\t- All computing resources are connected to a server-driven cluster network by running a resource client, which can be joined and quit flexibly.\n\t- No need to learn new concepts, as you only need to understand Python's native concurrent.futures.Executor, as the AntPool classes are same.\n- **Mobile Device Support** iPad is a great tool, and there are already many great apps that run Python and iPython Notebook, but due to iOS security restrictions, many libraries can't be installed, Python also don't support multi-processing. With AntPool, you can call a multi-machine cluster directly on the iPad and run features on the cluster that are not available on the iPad or get more performance.\n\t- iPad Python Apps\n\t\t- Pythonista (requires [stash](https://github.com/ywangd/stash) , for pip support)\n\t\t- Pyto\n\t\t- CodeApp\n\t- iPad iPython Notebook/Jupyter Apps\n\t\t- Juno\n\t\t- Carnets\n\n## How\n- Runtime requirements: \n\t- Python 3.5 or above\n- Quick Start:\n\t- **pip3 install antpool**\n\t- Standalone deployment server and resource client\n\t\t- Run in a terminal environment: **antpoolsrv /v**\n\t\t- Open a new terminal and run: **antpoolclient ws://127.0.0.1:8086**\n\t\t- If you need to access more resource clients to improve cluster performance, you can do so on other machines:\n\t\t\t- **pip3 install antpool**\n\t\t\t- **antpoolclient ws://server IP:8086**\n\t\t- Each antpoolclient client running on the same machine will use one CPU core, so if you want to exploit the performance of the whole machine, you can run multiple clients (e.g. for a 4-core CPU machine, you can run 4 clients)\n\t- Run the demo program\n\t\t- **python3 demo1.py**  (demo1.py on github.com/wolf71/AntPool/demo)\n\t- Structure diagram\n\t![AntPool Struct](https://github.com/wolf71/AntPool/blob/master/antpool_s.jpg?raw=true)\n\n## !!! Security Tip !!!\n- The resource client is execution of the submitted modules, so the device running the resource client will be vulnerable to attacks by users with bad intentions, the system does not perform security checks on the executed modules, so it is recommended that the user running the resource client needs to verify that the user is trustworthy;\n- For the sake of simplicity, the entire system currently does not use user/password authentication mechanisms (interfaces are reserved in the code); therefore, it is recommended that the server be deployed on the public network with security in mind;\n\n\n## User Manual\n\n### 1. AntPool Server\n- **antpoolSrv port /s /v**\n\t- port: Websocket port, default is 8086\n\t- /s open websocket SSL support\n\t- /v debug mode, will show debug info on screen, otherwise all message write on log file.\n\t\t- logfile: aSrv_log.txt\n\t\t- error: aSrv_err.txt\n\t- A multi-computer distributed environment only needs to run one server program.\n- **Web monitoring**\n\t- open browser, goto http://xxx:port/antadmin  View server information (current resource client, task client status)\n- SSL config\n\t- Generate SSL keys (using Tornado to support SSL is much less powerful than using Nginx, so recommend using Nginx SSL)\n\t\t- openssl genrsa -out privkey.key 2048\n\t\t- openssl req -new -x509 -key privkey.key -out cacert.csr -days 1095\n\t\t- and then copy this two file to antpoolSrv.py same directory.\n\n### 2. AntPool Resource Client\n- **antpoolClient server_addr**\n\t- server_addr: the AntPool Server websocket address, just like ws://192.168.3.3:8086 , or wss://srv1.mycorp.com:8086 (for SSL)\n\t- default is ws://127.0.0.1:8086\n- You can run Resource Client on the same machine with Server or run multi Resource Client on same machine. (resource client count <= CPUs)\n- You can run Resource client on multiple machines connect to the server in order to scale the performance.\n\n### 3. Develop your application with AntPool.AntPoolExecutor\n- Please read the documentation for Python concurrent.futures **first**\n\t- https://docs.python.org/3/library/concurrent.futures.html\n- AntPool.AntPoolExecutor compliant Python concurrent.futures\n\t- multi-thread using python:    concurrent.futures.ThreadPoolExecutor\n\t- multi-process using python:   concurrent.futures.ProcessPoolExecutor\n\t- multi-computer using AntPool: AntPool.AntPoolExecutor\n- AntPool.AntPoolExecutor\n\t- **AntPoolExecutor(srvurl, max_workers=8, rtype = 0, user='user',pwd='pwd')**\n  \t- srvurl: antpool server, etc: ws://127.0.0.1:8086\n    - max_workers: set the max_workers (default is 8)\n    - rtype: running model(default is 0) 0-global/local environment is reset before the run; 1-After the run, g/l environment is reset; 2-g/l continuing with the last environment\n\t\t- user/pwd: Reserved, not used in current version\n\t- **AntPoolExecutor.submit**(fn, *args, **kwargs)\n\t\t- sent fn(*args, **kwargs) to the cluster server parallel execution and returns a Future object, has the following methods\n\t\t\t- result(timeout=None)  returns the return value of the call (!! blocking until get result or timeout)\n\t\t\t- add_done_callback(fn) add callback\n\t- **AntPoolExecutor.map(func, *iterables, timeout=None, chunksize=1)**\n\t- **AntPoolExecutor.shutdown(wait=True)**\n\t\t- frees resources by executing the join() method for each thread or process; you can avoid using this method by using the with statement.\n\n### 4. Show me your code\n```python\n# import AntPoolExecutor\nfrom AntPool import AntPoolExecutor\n\n# setup antpool Server address \nsrv = 'ws://127.0.0.1:8086'\n\n#\n# your parallel function \n#\ndef test(n):\n  # import python module here \n  from random import random\n  # your jobs here\n  cnt = 0\n  for i in range(1, n+1):\n    cnt += i\n  # return result\n  return cnt\n\n# parallel calc 20 times\nr_n = 20 \n\n# using AntPoolExecutor.map execute parallel\nwith AntPoolExecutor(srv) as executor:\n  # parallel send tasks and waitting all task result\n  r = executor.map( test, [20000000 for i in range(r_n)] )\n  # sum result (the r is a list)\n  print('### %d times, total = %d'%(r_n, sum(r)))\n```\n\n## Background and History\n- Based on the requirement of fast crawling network data, which needs to be processed by multiple machines/multiple IPs in parallel, the initial version was completed in October 2015, using for parallel data crawling/processing. (Initial release based on Python2 / Tornado / callback mode)\n- 2021/2 Python3 support (dropping python2 support) , and deprecated callback mode, changed it to be consistent with python native concurrent.futures interface; and added web status monitoring function.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/wolf71/AntPool",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "AntPool",
    "package_url": "https://pypi.org/project/AntPool/",
    "platform": null,
    "project_url": "https://pypi.org/project/AntPool/",
    "project_urls": {
      "Homepage": "https://github.com/wolf71/AntPool"
    },
    "release_url": "https://pypi.org/project/AntPool/0.12/",
    "requires_dist": [
      "tornado (==6.1.0)"
    ],
    "requires_python": "",
    "summary": "AntPool",
    "version": "0.12",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13227503,
  "releases": {
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d4b557262c959642c09ff25fe70f4035b679571ff1bb2fefab551adcfd7f568",
          "md5": "0528f5dc1dcbe911e2d6c8ff0ee84af4",
          "sha256": "5a14ae5846d63720005c55f90252eec7da9c18fde8bb6fcddb39162f4650c94c"
        },
        "downloads": -1,
        "filename": "AntPool-0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0528f5dc1dcbe911e2d6c8ff0ee84af4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18646,
        "upload_time": "2022-03-20T03:39:02",
        "upload_time_iso_8601": "2022-03-20T03:39:02.604654Z",
        "url": "https://files.pythonhosted.org/packages/3d/4b/557262c959642c09ff25fe70f4035b679571ff1bb2fefab551adcfd7f568/AntPool-0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "883b5bc4201e6240e2609a5ba38dca7a74c5048e346b31faf02dee4b848b8fd5",
          "md5": "b331b8e1eceba8714bc6f254b41300fb",
          "sha256": "d2d1496128bd2b677dd1218a4f19c5b9bc926f0fa43417fb11567fe57fba1692"
        },
        "downloads": -1,
        "filename": "AntPool-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "b331b8e1eceba8714bc6f254b41300fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16806,
        "upload_time": "2022-03-20T03:39:04",
        "upload_time_iso_8601": "2022-03-20T03:39:04.457656Z",
        "url": "https://files.pythonhosted.org/packages/88/3b/5bc4201e6240e2609a5ba38dca7a74c5048e346b31faf02dee4b848b8fd5/AntPool-0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d4b557262c959642c09ff25fe70f4035b679571ff1bb2fefab551adcfd7f568",
        "md5": "0528f5dc1dcbe911e2d6c8ff0ee84af4",
        "sha256": "5a14ae5846d63720005c55f90252eec7da9c18fde8bb6fcddb39162f4650c94c"
      },
      "downloads": -1,
      "filename": "AntPool-0.12-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0528f5dc1dcbe911e2d6c8ff0ee84af4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18646,
      "upload_time": "2022-03-20T03:39:02",
      "upload_time_iso_8601": "2022-03-20T03:39:02.604654Z",
      "url": "https://files.pythonhosted.org/packages/3d/4b/557262c959642c09ff25fe70f4035b679571ff1bb2fefab551adcfd7f568/AntPool-0.12-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "883b5bc4201e6240e2609a5ba38dca7a74c5048e346b31faf02dee4b848b8fd5",
        "md5": "b331b8e1eceba8714bc6f254b41300fb",
        "sha256": "d2d1496128bd2b677dd1218a4f19c5b9bc926f0fa43417fb11567fe57fba1692"
      },
      "downloads": -1,
      "filename": "AntPool-0.12.tar.gz",
      "has_sig": false,
      "md5_digest": "b331b8e1eceba8714bc6f254b41300fb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16806,
      "upload_time": "2022-03-20T03:39:04",
      "upload_time_iso_8601": "2022-03-20T03:39:04.457656Z",
      "url": "https://files.pythonhosted.org/packages/88/3b/5bc4201e6240e2609a5ba38dca7a74c5048e346b31faf02dee4b848b8fd5/AntPool-0.12.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}