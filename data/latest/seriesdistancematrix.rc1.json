{
  "info": {
    "author": "Dieter De Paepe",
    "author_email": "dieter.depaepe@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "# Series Distance Matrix \n\nThis library implements the [Series Distance Matrix framework](https://doi.org/10.1016/j.engappai.2020.103487),\na flexible component-based framework that bundles various [Matrix Profile](https://www.cs.ucr.edu/~eamonn/MatrixProfile.html)\nrelated techniques.\nThese techniques can be used for (time) series mining and analysis. \nSome example applications include:\n- motif discovery: finding the best (imperfect) matching subsequence pair in a larger series\n- discord discovery: finding the most dissimilar subsequence in a larger series\n- finding repeating subsequences in one or more series (common and consensus motifs)\n- visualizing series\n- finding changing patterns\n- ...\n\nThe **Series Distance Matrix** framework was designed to integrate the various\nMatrix Profile variants that were established over the years.\nIt does this by splitting the generation and consumption of\nthe all-pair subsequence distances,\nputting the focus on the distance matrix itself.\nThis allows for easier and more flexible experiments by\nfreely combining components and eliminates the need\nto re-implement algorithms to combine techniques in an efficient way.\n\n\nFollowing core techniques are implemented:\n- Z-normalized Euclidean distance (including noise elimination)\n- Euclidean distance\n- (Left/Right) Matrix Profile\n- Multidimensional Matrix Profile\n- Contextual Matrix Profile\n- Radius Profile\n- Streaming and batch calculation\n\n\nFollowing Matrix Profile related techniques are implemented:\n- Valmod: find the top-1 motif in a series for each subsequence length in a given range\n- Ostinato: find the top-1 (k of n) consensus motif in a collection of series\n- Anytime Ostinato: find the radius profile for a collection of series\n\n\n## Basic Usage\n\nCalculate a standard Matrix Profile using z-normalized Euclidean distance over a single series.\n\n```python\nimport numpy as np\nfrom distancematrix.generator.znorm_euclidean import ZNormEuclidean\nfrom distancematrix.consumer.matrix_profile_lr import MatrixProfileLR\nfrom distancematrix.calculator import AnytimeCalculator\n\ndata = np.random.randn(10000)\nm = 100 # Subsequence length\n\ncalc = AnytimeCalculator(m, data)\ngen_0 = calc.add_generator(0, ZNormEuclidean())\ncons_mp = calc.add_consumer([0], MatrixProfileLR())\ncalc.calculate_columns()\n\nmatrix_profile = cons_mp.matrix_profile()\n```\n\nCalculate a Matrix Profile and (common-10) Radius Profile over a single series using Euclidean distance.\nA combined calculation is more efficients, as it can reuse the calculated distances.\n\n```python\nimport numpy as np\nfrom distancematrix.generator.euclidean import Euclidean\nfrom distancematrix.consumer.radius_profile import RadiusProfile\nfrom distancematrix.consumer.matrix_profile_lr import MatrixProfileLR\nfrom distancematrix.calculator import AnytimeCalculator\n\ndata = np.random.randn(10000)\nm = 100 # Subsequence length\n\ncalc = AnytimeCalculator(m, data)\ngen_0 = calc.add_generator(0, Euclidean()) # Generator 0 works on channel 0\ncons_mp = calc.add_consumer([0], MatrixProfileLR()) # Consumer consumes generator 0\ncons_rp = calc.add_consumer([0], RadiusProfile(10, m//2)) # Consumer consumes generator 0\ncalc.calculate_columns()\n\nmatrix_profile = cons_mp.matrix_profile()\nradius_profile = cons_rp.values\n```\n\nCalculate a partial multidimensional Matrix Profile over two data channels.\nPartial calculations return approximated results but are significantly faster,\nthey are particularly interesting in interactive workflows, as they can be resumed.\n\n```python\nimport numpy as np\nfrom distancematrix.generator.znorm_euclidean import ZNormEuclidean\nfrom distancematrix.consumer.multidimensional_matrix_profile_lr import MultidimensionalMatrixProfileLR\nfrom distancematrix.consumer.matrix_profile_lr import MatrixProfileLR\nfrom distancematrix.calculator import AnytimeCalculator\n\ndata = np.random.randn(2, 10000)\nm = 100 # Subsequence length\n\ncalc = AnytimeCalculator(m, data)\ngen_0 = calc.add_generator(0, ZNormEuclidean()) # Generator 0 works on channel 0\ngen_1 = calc.add_generator(1, ZNormEuclidean()) # Generator 1 works on channel 1\ncons_mmp = calc.add_consumer([0, 1], MultidimensionalMatrixProfileLR()) # Consumer consumes generator 0 & 1\n\n# Calculate only 1/4 of all distances: faster, but returns approximated results\ncalc.calculate_diagonals(partial=0.25)\nmultidimensional_matrix_profile = cons_mmp.md_matrix_profile()\n\n# Calculate the next quarter, so in total 1/2 of all distances are processed.\ncalc.calculate_diagonals(partial=0.5)\nmultidimensional_matrix_profile = cons_mmp.md_matrix_profile()\n```\n\n## Documentation\n\nDocumentation for the latest version is available [online](https://predict-idlab.github.io/seriesdistancematrix).\n\nBuilding the documentation locally is done using Sphinx. Navigate to the `docs` folder, activate the conda environment\ndefined in the environment file, and run:\n\n```bash\nmake html\n```\n\n## Installing\n\nUsing pip:\n```bash\npip install seriesdistancematrix\n```\n\nAlternatively, clone this repositor and run:\n```bash\npython setup.py clean build install\n```\n\nFor local development (this allows you to edit code without having to reinstall the library):\n```bash\npython setup.py develop\n```\n\n## Academic Usage\n\nWhen using this library for academic purposes, please cite:\n```\n@article{series_distance_matrix,\n  title = \"A generalized matrix profile framework with support for contextual series analysis\",\n  journal = \"Engineering Applications of Artificial Intelligence\",\n  volume = \"90\",\n  pages = \"103487\",\n  year = \"2020\",\n  issn = \"0952-1976\",\n  doi = \"https://doi.org/10.1016/j.engappai.2020.103487\",\n  url = \"http://www.sciencedirect.com/science/article/pii/S0952197620300087\",\n  author = \"De Paepe, Dieter and Vanden Hautte, Sander and Steenwinckel, Bram and De Turck, Filip and Ongenae, Femke and Janssens, Olivier and Van Hoecke, Sofie\"\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/predict-idlab/seriesdistancematrix/",
    "keywords": "time series,matrix profile,contextual matrix profile,radius profile,series distance matrix,motif,discord",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "seriesdistancematrix",
    "package_url": "https://pypi.org/project/seriesdistancematrix/",
    "platform": "",
    "project_url": "https://pypi.org/project/seriesdistancematrix/",
    "project_urls": {
      "Documentation": "https://predict-idlab.github.io/seriesdistancematrix/",
      "Homepage": "https://github.com/predict-idlab/seriesdistancematrix/",
      "Source": "https://github.com/predict-idlab/seriesdistancematrix/"
    },
    "release_url": "https://pypi.org/project/seriesdistancematrix/0.3.1/",
    "requires_dist": [
      "numpy",
      "scipy",
      "pandas"
    ],
    "requires_python": "",
    "summary": "Flexible time series analysis libraryimplementing Matrix Profile related functionality.",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11356149,
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab8bb75833dcca02fd72a8e4a12be05fcf49c91d09ed0866d806e5e218472bf8",
          "md5": "1691ab1d1c91e1ecac3e90d9b05b3adc",
          "sha256": "e5b1c7f5d1296ff0b9b4024a441bb10939010e50cc49d35b2fa8061fce1b3b38"
        },
        "downloads": -1,
        "filename": "seriesdistancematrix-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1691ab1d1c91e1ecac3e90d9b05b3adc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 47917,
        "upload_time": "2021-09-03T08:43:16",
        "upload_time_iso_8601": "2021-09-03T08:43:16.822336Z",
        "url": "https://files.pythonhosted.org/packages/ab/8b/b75833dcca02fd72a8e4a12be05fcf49c91d09ed0866d806e5e218472bf8/seriesdistancematrix-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1fce35338afadfad8b1870de002e944e151c1022f8e8a8d0a33273d2f1a1158c",
          "md5": "af73e8e527a2da3e5af52ed5754b0eb2",
          "sha256": "3fa1ba2712c79aa9630a717ab5bebb426180db991c7d2c0712ebaa7148a918c0"
        },
        "downloads": -1,
        "filename": "seriesdistancematrix-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "af73e8e527a2da3e5af52ed5754b0eb2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37308,
        "upload_time": "2021-09-03T08:43:18",
        "upload_time_iso_8601": "2021-09-03T08:43:18.562788Z",
        "url": "https://files.pythonhosted.org/packages/1f/ce/35338afadfad8b1870de002e944e151c1022f8e8a8d0a33273d2f1a1158c/seriesdistancematrix-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ab8bb75833dcca02fd72a8e4a12be05fcf49c91d09ed0866d806e5e218472bf8",
        "md5": "1691ab1d1c91e1ecac3e90d9b05b3adc",
        "sha256": "e5b1c7f5d1296ff0b9b4024a441bb10939010e50cc49d35b2fa8061fce1b3b38"
      },
      "downloads": -1,
      "filename": "seriesdistancematrix-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1691ab1d1c91e1ecac3e90d9b05b3adc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 47917,
      "upload_time": "2021-09-03T08:43:16",
      "upload_time_iso_8601": "2021-09-03T08:43:16.822336Z",
      "url": "https://files.pythonhosted.org/packages/ab/8b/b75833dcca02fd72a8e4a12be05fcf49c91d09ed0866d806e5e218472bf8/seriesdistancematrix-0.3.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1fce35338afadfad8b1870de002e944e151c1022f8e8a8d0a33273d2f1a1158c",
        "md5": "af73e8e527a2da3e5af52ed5754b0eb2",
        "sha256": "3fa1ba2712c79aa9630a717ab5bebb426180db991c7d2c0712ebaa7148a918c0"
      },
      "downloads": -1,
      "filename": "seriesdistancematrix-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "af73e8e527a2da3e5af52ed5754b0eb2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 37308,
      "upload_time": "2021-09-03T08:43:18",
      "upload_time_iso_8601": "2021-09-03T08:43:18.562788Z",
      "url": "https://files.pythonhosted.org/packages/1f/ce/35338afadfad8b1870de002e944e151c1022f8e8a8d0a33273d2f1a1158c/seriesdistancematrix-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}