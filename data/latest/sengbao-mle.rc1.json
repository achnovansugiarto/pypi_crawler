{
  "info": {
    "author": "chenzongwei",
    "author_email": "winterwinter999@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# sengbao_mle \n#### **翻新的最大似然估计框架** \n#### **copied and renewed maximum likelihood estimation package from [python-mle](https://github.com/ibab/python-mle)**\n***\n\n### 搬运与翻新说明\n* 本仓库搬运自[ibab/python-mle](https://github.com/ibab/python-mle)\n* 由于旧仓库最后一次更新于2016年2月19日，其中一些结构安排和依赖库已经发生了变化，因此笔者将其翻新后，重新发布到pypi上，便于直接安装调用\n\n\n### 安装&使用指南🎯\n1. 安装\n> 使用`pip install sengbao_mle`命令进行安装\n2. 使用\n>* **导入框架** \n>```python\n>import sengbao_mle as m\n>```\n>* **使用实例1——原库示例（翻新后）**\n>```python\n>import numpy as np\n>import sengbao_mle as m\n>\n># Define model\n>x = m.var('x', observed=True, vector=True)\n>y = m.var('y', observed=True, vector=True)\n>\n>a = m.var('a')\n>b = m.var('b')\n>sigma = m.var('sigma')\n>\n>model = m.Normal(y, a * x + b, sigma)\n>\n># Generate data\n>xs = np.linspace(0, 2, 20)\n>ys = 0.5 * xs + 0.3 + np.random.normal(0, 0.1, 20)\n>\n># Fit model to data\n>result = model.fit({'x': xs, 'y': ys}, {'a': 1, 'b': 1, 'sigma': 1})\n>print(result)\n>```\n>* **使用实例2——自定义分布**\n>```python\n>import numpy as np\n>import sengbao_mle as m\n>import theano.tensor as T\n>\n># 以Subbotin分布为例\n>class Subbotin(m.Model):\n>   def __init__(self,x,af,*args,**kwargs):\n>       # 自定义的分布类型，均需继承自m.Model\n>       super(Subbotin, self).__init__(*args,**kwargs)\n>       # 运算都需要采用theano.tensor中的运算函数\n>       mm=T.mean(x)\n>       xg=T.mean(T.abs_(x-mm)**af)**(1/af)\n>       # 写入该分布的对数概率密度函数\n>       self._logp=m.distributions.bound(T.log(\n>           T.exp(-((T.abs_((x-mm)/xg))**af)/af)/(2*xg*(af**(1/af))*T.gamma(1+1/af))\n>       ))\n>       # 添加样本点\n>       self._add_expr('x',x)\n>       # 添加要拟合的参数\n>       self._add_expr('af',af)\n>\n># 样本点\n>x = m.var('x', observed=True, vector=True)\n># 目标参数\n>af=m.var('af')\n>model=Subbotin(x,af)\n>\n>xs=np.random.normal(-3,3,(1000,))\n># 给目标参数设置初始值\n>result = model.fit({'x': xs}, {'af': 1})\n>print(result)\n>```\n>\n>* **使用实例3——遍历初始值**\n>```python\n># 由于目标参数的初始值的设定，对能否拟合成功有着较大影响，因此在拟合失败时，可以考虑便利初始值，以寻找能拟合成功的初始参数\n>import numpy as np\n>import sengbao_mle as m\n>import theano.tensor as T\n>\n># 以Subbotin分布为例\n>class Subbotin(m.Model):\n>   def __init__(self,x,af,*args,**kwargs):\n>    \t # 自定义的分布类型，均需继承自m.Model\n>       super(Subbotin, self).__init__(*args,**kwargs)\n>       # 运算都需要采用theano.tensor中的运算函数\n>       mm=T.mean(x)\n>       xg=T.mean(T.abs_(x-mm)**af)**(1/af)\n>       # 写入该分布的对数概率密度函数\n>       self._logp=m.distributions.bound(T.log(\n>       T.exp(-((T.abs_((x-mm)/xg))**af)/af)/(2*xg*(af**(1/af))*T.gamma(1+1/af))\n>       ))\n>       # 添加样本点\n>       self._add_expr('x',x)\n>       # 添加要拟合的参数\n>       self._add_expr('af',af)\n>\n># 样本点\n>x = m.var('x', observed=True, vector=True)\n># 目标参数\n>af=m.var('af')\n>model=Subbotin(x,af)\n>\n>xs=np.random.normal(-3,3,(1000,))\n># 遍历能拟合成功的初始参数值\n>rs=[]\n>for af in range(-100,100):\n>\t\tresult = model.fit({'x': xs}, {'af': af})\n> \t\tif result.success is True:\n>\t\t\t\trs.append({af:result})\n>af=np.mean([i.values().x['af'] for i in rs])      \t\n>print(af)\n>```\n\n#### 相关链接🔗\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chen-001/sengbao_mle.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sengbao-mle",
    "package_url": "https://pypi.org/project/sengbao-mle/",
    "platform": null,
    "project_url": "https://pypi.org/project/sengbao-mle/",
    "project_urls": {
      "Homepage": "https://github.com/chen-001/sengbao_mle.git"
    },
    "release_url": "https://pypi.org/project/sengbao-mle/0.0.1/",
    "requires_dist": [
      "numpy",
      "scipy",
      "theano",
      "iminuit"
    ],
    "requires_python": ">=3",
    "summary": "翻新的最大似然估计库 maximum likelihood estimation",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15502248,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72faecc146c03790372789be5a3ec4e8e3347605c1d525d5af956a99b2e5189e",
          "md5": "16aed6618ec3443859452bdafb93ca54",
          "sha256": "faf5d34e5a4ff7c81201fe04617fa4c4b594955cbca960b1a289e0f01f631de2"
        },
        "downloads": -1,
        "filename": "sengbao_mle-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16aed6618ec3443859452bdafb93ca54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 10596,
        "upload_time": "2022-10-23T16:44:20",
        "upload_time_iso_8601": "2022-10-23T16:44:20.788140Z",
        "url": "https://files.pythonhosted.org/packages/72/fa/ecc146c03790372789be5a3ec4e8e3347605c1d525d5af956a99b2e5189e/sengbao_mle-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae38207531c36993ebc65c5b1e3547c66f95dfa20b7fda80901d91771844e57c",
          "md5": "bf11a61fedfde5bf4f5ab594be2a313a",
          "sha256": "1ee5f5aac0ff5fd52bf1054d2d0b8bab4871622906133e80b85e97b6e8480cef"
        },
        "downloads": -1,
        "filename": "sengbao_mle-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bf11a61fedfde5bf4f5ab594be2a313a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 10259,
        "upload_time": "2022-10-23T16:44:22",
        "upload_time_iso_8601": "2022-10-23T16:44:22.928688Z",
        "url": "https://files.pythonhosted.org/packages/ae/38/207531c36993ebc65c5b1e3547c66f95dfa20b7fda80901d91771844e57c/sengbao_mle-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "72faecc146c03790372789be5a3ec4e8e3347605c1d525d5af956a99b2e5189e",
        "md5": "16aed6618ec3443859452bdafb93ca54",
        "sha256": "faf5d34e5a4ff7c81201fe04617fa4c4b594955cbca960b1a289e0f01f631de2"
      },
      "downloads": -1,
      "filename": "sengbao_mle-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "16aed6618ec3443859452bdafb93ca54",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 10596,
      "upload_time": "2022-10-23T16:44:20",
      "upload_time_iso_8601": "2022-10-23T16:44:20.788140Z",
      "url": "https://files.pythonhosted.org/packages/72/fa/ecc146c03790372789be5a3ec4e8e3347605c1d525d5af956a99b2e5189e/sengbao_mle-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ae38207531c36993ebc65c5b1e3547c66f95dfa20b7fda80901d91771844e57c",
        "md5": "bf11a61fedfde5bf4f5ab594be2a313a",
        "sha256": "1ee5f5aac0ff5fd52bf1054d2d0b8bab4871622906133e80b85e97b6e8480cef"
      },
      "downloads": -1,
      "filename": "sengbao_mle-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bf11a61fedfde5bf4f5ab594be2a313a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 10259,
      "upload_time": "2022-10-23T16:44:22",
      "upload_time_iso_8601": "2022-10-23T16:44:22.928688Z",
      "url": "https://files.pythonhosted.org/packages/ae/38/207531c36993ebc65c5b1e3547c66f95dfa20b7fda80901d91771844e57c/sengbao_mle-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}