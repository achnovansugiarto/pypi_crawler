{
  "info": {
    "author": "",
    "author_email": "Tariq Jamil <tariqjamil.bwp@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "This package is all in one text preprocessing pipeline and takes text input in the form of pandas series and outputs as pandas series object.\n\n**All the text_processing sub-functions may be viewed here**\nhttps://github.com/tariqjamil-bwp/pypi_projects/tree/main/tj_nlp\n\n\n**Installing:**\npip install .....\n\n**Usage:** (by example)\ndf2 = df1.copy()\ndf2['input_data'] = text_preprocessing_ds(df2['Phrase'])\n\n**Note:** It will not work with .apply(text_....) method, as .apply is item by item processing which may not be optimized at dataframe level.\n\n\n**Details**:\nIt has a variety of input flags, controlling the appropritae text preprocessing activity, and are by default set to True.\nThe details of flags is as under:\n\n** The function is optimized to take advantage of the multi threaded processors **\n\n**Arguments:**\n1. pdSeries: A positional argument, of pandas series object type, and should contain text phrases to be preprocessed\n\n    \n** All following arguments are key-word type ** \n\n 2. NewLine removal:\n    Parameter: 'newlines_tabs'\n    This setting when enablesd causes the function to remove all the occurrences of newlines, tabs, and combinations like: \\\\n, \\\\.\n    \n    Example:\n    Input : This is her \\\\ first day at this place.\\n Please,\\t Be nice to her.\\\\n\n    Output : This is her first day at this place. Please, Be nice to her. \n    \n\n3. HTML Tags\n    Parameter: 'remove_html'\n    This setting when enablesd causes the function to remove all the occurrences of html tags from the text.\n    \n    Example:\n    Input : This is a nice place to live. \n    Output : This is a nice place to live.  \n    \n\n4. Hyper Links removal\n    This setting when enablesd causes the function to remove all the occurrences of links.\n    Parameter: 'links'\n\n    Example:\n    Input : To know more about cats and food & website: catster.com  visit: https://catster.com//how-to-feed-cats\n    Output : To know more about cats and food & website: visit:     \n    \n\n5. Removing extra white spaces\n    Parameter: 'extra_whitespace' \n    This setting when enablesd causes the function to remove extra whitespaces from the text\n        \n    Example:\n    Input : How   are   you   doing   ?\n    Output : How are you doing ?     \n\n    \n6. Accented Characters Removal:\n    Parameter: 'accented_chars' \n    This setting when enablesd causes the function to remove accented characters from the text contained within the Dataset.\n               \n    Example:\n    Input : Málaga, àéêöhello\n    Output : Malaga, aeeohello    \n\n\n7. Lower Casing\n    Parameter: 'lowercase'\n    This setting when enablesd causes the function to convert text into lower case.\n             \n    Example:\n    Input : The World is Full of Surprises!\n    Output : the world is full of surprises!\n    \n\n8. Removing Character Repetitions:\n    Parameter: 'repeatition'\n    This setting when enablesd causes the function to reduce repeatition to two characters for alphabets and to one character for punctuations.\n            \n    Example:\n    Input : Realllllllllyyyyy,        Greeeeaaaatttt   !!!!?....;;;;:)\n    Output : Reallyy, Greeaatt !?.;:)\n    \n    \n9. Expand Contractions:\n    Parameter: 'contractions'\n    This setting when enablesd causes the function to expand shortened words to the actual form.\n       e.g. don't to do not\n    \n       Example: \n       Input : ain't, aren't, can't, cause, can't've\n       Output :  is not, are not, cannot, because, cannot have \n\n\n10. Removing Special Characters\n    Parameter: 'special_chars'\n    This setting when enablesd causes the function to remove all the special characters except a preset list of characters as they have imp meaning in the text provided.\n       \n    Example: \n    Input : Hello, T-a-r-i-q. Thi*s is $100.05 : the payment that you will recieve! (Is this okay?) \n    Output :  Hello, Tariq. This is $100.05 : the payment that you will recieve! Is this okay?\n       \n\n11. Removong Stop Words\n    Parameter: 'stop_words'\n    This setting when enablesd causes the function to remove the stopwords which doesn't add much meaning to a sentence \n    & they can be remove safely without comprimising meaning of the sentence.\n            \n    Example: \n    Input : This is Tariq from karachi who came here to study.\n    Output : [\"'This\", 'Tariq', 'karachi', 'came', 'study', '.', \"'\"] \n\n\n12. Mis-spelled words Correction:\n    Parameter: 'mis_spell'\n    This setting when enablesd causes the function to correct spellings. Currently only English language is supported.\n \n    Example: \n    Input : This is OAkbar from Londn who came heree to studdy.\n    Output : This is Akbar from London who came here to study.\n      \n\n13. Lamentization:\n    Parameters: 'lemmatization_allow'\n    This setting when enablesd causes the function to converts word to their root words without explicitely cut down as done in stemming.\n            \n    Example: \n    Input : text reduced \n    Output :  text reduce",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tjtext-preproc-ds",
    "package_url": "https://pypi.org/project/tjtext-preproc-ds/",
    "platform": null,
    "project_url": "https://pypi.org/project/tjtext-preproc-ds/",
    "project_urls": {
      "Bug Tracker": "https://github.com/tariqjamil-bwp/pypi_projects/issues",
      "Homepage": "https://github.com/tariqjamil-bwp/pypi_projects/"
    },
    "release_url": "https://pypi.org/project/tjtext-preproc-ds/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "An NLP text preprocessing function package",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16279904,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d27e84eb6dd67561b6131461ab2427d867fc0457ea3bd0cea87d7e5ca424e396",
          "md5": "babade4938d34e11013ee10d305b2da7",
          "sha256": "1ce640d46e8cddcf23d910bce290e8072fe4a8b6fe0d753d8e0ea0f85e65ddad"
        },
        "downloads": -1,
        "filename": "tjtext_preproc_ds-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "babade4938d34e11013ee10d305b2da7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9366,
        "upload_time": "2023-01-02T15:17:57",
        "upload_time_iso_8601": "2023-01-02T15:17:57.985768Z",
        "url": "https://files.pythonhosted.org/packages/d2/7e/84eb6dd67561b6131461ab2427d867fc0457ea3bd0cea87d7e5ca424e396/tjtext_preproc_ds-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37bd92fc9944dbb4347cd27683a7db379090bb03b6f17c123a1de608b561b20c",
          "md5": "ca4d33ac79ed3d9a8a5387e2d6dc13ee",
          "sha256": "c93a192dbadbcf63a7801747bc61e34c0bf8a35cad308ba24ef4a21c67ccef61"
        },
        "downloads": -1,
        "filename": "tjtext_preproc_ds-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ca4d33ac79ed3d9a8a5387e2d6dc13ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11319,
        "upload_time": "2023-01-02T15:17:59",
        "upload_time_iso_8601": "2023-01-02T15:17:59.939010Z",
        "url": "https://files.pythonhosted.org/packages/37/bd/92fc9944dbb4347cd27683a7db379090bb03b6f17c123a1de608b561b20c/tjtext_preproc_ds-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d27e84eb6dd67561b6131461ab2427d867fc0457ea3bd0cea87d7e5ca424e396",
        "md5": "babade4938d34e11013ee10d305b2da7",
        "sha256": "1ce640d46e8cddcf23d910bce290e8072fe4a8b6fe0d753d8e0ea0f85e65ddad"
      },
      "downloads": -1,
      "filename": "tjtext_preproc_ds-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "babade4938d34e11013ee10d305b2da7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9366,
      "upload_time": "2023-01-02T15:17:57",
      "upload_time_iso_8601": "2023-01-02T15:17:57.985768Z",
      "url": "https://files.pythonhosted.org/packages/d2/7e/84eb6dd67561b6131461ab2427d867fc0457ea3bd0cea87d7e5ca424e396/tjtext_preproc_ds-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37bd92fc9944dbb4347cd27683a7db379090bb03b6f17c123a1de608b561b20c",
        "md5": "ca4d33ac79ed3d9a8a5387e2d6dc13ee",
        "sha256": "c93a192dbadbcf63a7801747bc61e34c0bf8a35cad308ba24ef4a21c67ccef61"
      },
      "downloads": -1,
      "filename": "tjtext_preproc_ds-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ca4d33ac79ed3d9a8a5387e2d6dc13ee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11319,
      "upload_time": "2023-01-02T15:17:59",
      "upload_time_iso_8601": "2023-01-02T15:17:59.939010Z",
      "url": "https://files.pythonhosted.org/packages/37/bd/92fc9944dbb4347cd27683a7db379090bb03b6f17c123a1de608b561b20c/tjtext_preproc_ds-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}