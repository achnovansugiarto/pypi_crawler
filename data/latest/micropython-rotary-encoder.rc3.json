{
  "info": {
    "author": "TTitanUA",
    "author_email": "xttitanx@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: Implementation :: MicroPython"
    ],
    "description": "This is an automatic translation, may be incorrect in some places. See sources and examples!\n# Rotary Encoder\nLibrary for Raspberry Pi Pico microcontroller encoder using MicroPython language.\nLibrary features:\n- Encoder: normal rotation, pressed rotation, fast rotation\n- Button: anti-rattle, hold, click, multiple clicks\n- Encoder button registration is optional\n- Interrupts are used for registering events\n- Events can be handled in several ways:\n    - With asyncio task (recommended)\n    - By interrupt timer\n    - Independent function call\n\nThe following materials were used to develop the library:\n- Library [Rotary Encoder](https://github.com/MikeTeachman/micropython-rotary) by Mike Teachman\n- Library (Arduino) [EncButton](https://github.com/GyverLibs/EncButton), by AlexGyver\n- Material [Rotary Encoder](https://www.coderdojotc.org/micropython/sensors/10-rotary-encoder/), by CoderDojoTC\n\n### Compatibility\n- MicroPython 1.19.1\n- Raspberry Pi Pico\n- Rotary Encoder EC11 (KY-040)\n\nOn the hardware above the library has been tested and works correctly.\nBut with small crutches, it can work on other equipment.\n\n### ATTENTION\nYou use this module at your own risk. \nMy experience in MicroPython programming is the whole 7 days. So there may be nuances that I haven't considered.\nIf you notice a bug or have suggestions for improvement, write to Issues.\n\n## Contents\n- [Install](https://github.com/TTitanUA/micropython_rotary_encoder#install)\n- [Initialization](https://github.com/TTitanUA/micropython_rotary_encoder#init)\n- [Documentation](https://github.com/TTitanUA/micropython_rotary_encoder#doc)\n- [Examples](https://github.com/TTitanUA/micropython_rotary_encoder/tree/main/examples)\n- [Bugs and feedback](https://github.com/TTitanUA/micropython_rotary_encoder#feedback)\n\n<a id=\"install\"></a>\n## Installation\n- Install the library via pip (Thonny -> Manage Packages) by name **micropython-rotary-encoder**\n- Or manual installation:\n   - [Download library from github](https://github.com/TTitanUA/micropython_rotary_encoder/)\n   - take the **micropython_rotary_encoder** folder from the archive.\n   - upload to the root of the microcontroller or to the **lib** folder.\n\nIf you want to play around with the logic of the library, then the 2nd installation option is preferable. :)\n\n<a id=\"init\"></a>\n## Usage\n### Initialization\n```python\nfrom machine import Pin\nfrom micropython_rotary_encoder import RotaryEncoderRP2, RotaryEncoderEvent\n\n# create pins for encoder and button\nen_pin_clk = Pin(15, Pin.IN, Pin.PULL_UP)\nen_pin_dt = Pin(9, Pin.IN, Pin.PULL_UP)\nen_pin_sw = Pin(8, Pin.IN, Pin.PULL_UP)\n\n# create an encoder object\nencoder = RotaryEncoderRP2(en_pin_clk, en_pin_dt, en_pin_sw)\n```\nAfter initialization, the encoder automatically subscribes to encoder and button pin interrupts.\nBut encoder event processing must be started manually.\n\n#### Using the uasyncio library\nThis is the best option for most projects.\n```python\n# at the beginning of the file add the import of the uasyncio library\nimport uasyncio as asyncio\n\n# ----\n# Encoder initialization code above ^\n# ----\n\nasync def async_some_other_task():\n    print(\"async_some_other_task\")\n    while True:\n        await asyncio.sleep(1)\n\nasync def main():\n    await asyncio.gather(\n        encoder.async_tick(1), # run encoder event handling every 1ms\n        async_some_other_task(),\n    )\n\nasyncio.run(main())\n```\n\n#### With timer interrupts\nYou can read more about timers [here](https://docs.micropython.org/en/latest/library/machine.Timer.html)\nFor Raspberry Pi Pico [here](https://docs.micropython.org/en/latest/rp2/quickref.html#timers)\nBe careful, although this is the easiest option, it is not optimal.\nSince encoder events are handled in a timer interrupt, other interrupts will be delayed.\n```python\n# ----\n# Encoder initialization code above ^\n# ----\n\nencoder.timer_tick(1) # запускаем обработку событий энкодера каждые 1 мс\n```\n\n#### By manual call\nEverything is in your hands, but don't forget to call the `raw_tick()` method every 1 - 5 ms.\n```python\nimport utime\n# ----\n# Encoder initialization code above ^\n# ----\n\nwhile True:\n    encoder.raw_tick() # handle encoder events\n    utime.sleep_ms(1) # delay\n```\n\n<a id=\"doc\"></a>\n## Documentation\n### Constructor parameters\n\n| Parameter    | Type | Default | Description                            |\n|--------------|------|---------|----------------------------------------|\n| pin_clk      | pin  | None    | Pin CLK encoder                        |\n| pin_dt       | pin  | None    | Pin DT encoder                         |\n| pin_sw       | pin  | None    | Pin buttons                            |\n| debounce_ms  | int  | 50      | Contact bounce timeout                 |\n| encoder_step | int  | 1       | Encoder step                           |\n| hold_ms      | int  | 1000    | Button hold timeout                    |\n| step_ms      | int  | 200     | Timeout between encoder events         |\n| fast_ms      | int  | 50      | Timeout between encoder events on hold |\n| click_ms     | int  | 400     | Timeout between button presses         |\n\n- `pin_clk`, `pin_dt` - encoder pins, if one of them is not specified, then the library will work only in button mode.\n- `pin_sw` - optional parameter, if not specified, the library will work only in encoder mode.\n- `debounce_ms` - contact bounce timeout, protection against false positives of the button.\n- `encoder_step` - encoder step, this is the number of encoder events before triggering.\nFor example, if the step is 1, then each encoder event will fire a trigger.\nIf the step is 2, then the trigger will fire on every second encoder event.\nUseful for compensating for encoder chatter.\n- `hold_ms` - button hold timeout, if the button is held longer than this time, the `HELD` event will fire.\n- `step_ms` - timeout between multiple clicks, if click events occur faster than this time, the `MULTIPLE_CLICK` event will fire.\n- `fast_ms` - timeout between encoder events for fast scrolling `TURN_LEFT_FAST | TURN_RIGHT_FAST`.\n- `click_ms` - timeout between clicking and releasing the button for the `CLICK` event.\n\n### События\nEncoder/button events are passed to callbacks, which can be registered with the `on()` method.\n\n| Event                | Parameters passed to callback | Trigger condition                                                   |\n|----------------------|-------------------------------|---------------------------------------------------------------------|\n| ANY                  | event_id: int, clicks: int    | Duplicate any event                                                 |\n| CLICK                | None                          | The button was pressed and released in `click_ms`                   |\n| MULTIPLE_CLICK       | clicks: int                   | The button was pressed, released and pressed again within `step_ms` |\n| HELD                 | None                          | Button held longer `hold_ms`                                        |\n| RELEASE              | None                          | The button was released after `HELD`                                |\n| TURN_LEFT            | None                          | The encoder has been turned to the left                             |\n| TURN_LEFT_FAST       | None                          | The encoder was turned faster than `fast_ms`                        |\n| TURN_LEFT_HOLD       | None                          | The encoder was turned to the left and with the                     |\n| TURN_LEFT_FAST_HOLD  | None                          | The encoder was turned faster than `fast_ms` and with the           |\n| TURN_RIGHT           | None                          | The encoder has been turned to the right                            |\n| TURN_RIGHT_FAST      | None                          | The encoder was turned faster than `fast_ms`                        |\n| TURN_RIGHT_HOLD      | None                          | The encoder was turned to the right and with the pressed button     |\n| TURN_RIGHT_FAST_HOLD | None                          | The encoder was turned faster than `fast_ms` and with the           |\n\n### Register callbacks\nTo register callbacks, you need to use the `on(event, callback)` method, which takes two parameters.\n- `event` - event, property of the `RotaryEncoderEvent` class.\n- `callback` - a function that will be called when the event fires.\nThe number of arguments to the callback function depends on the event. See table above.\n\n```python\n\n# ----\n# Encoder initialization code above ^\n# ----\n\n# subscribe to encoder events\ndef on_click():\n    print(\"CLICK\")\n    \ndef on_multy_clicks(clicks: int):\n    print(f\"CLICK {clicks} times\")\n\ndef on_any(event_id: int, clicks: int):\n    print(f\"ANY {event_id}, clicks {clicks}\")\n\nencoder.on(RotaryEncoderEvent.CLICK, on_click)\nencoder.on(RotaryEncoderEvent.MULTIPLE_CLICK, on_multy_clicks)\nencoder.on(RotaryEncoderEvent.ANY, on_any)\n```\n\n### Unsubscribing from events\nTo unsubscribe from events, you need to use the `off(event, callback)` method, which takes two parameters.\n- `event` - event, property of the `RotaryEncoderEvent` class.\n- `callback` - a link to a function that was registered earlier.\nFor one method call, only one callback from one event is unsubscribed.\n\n```python\n# ----\n# Callback registration code above ^\n# ----\n\n# unsubscribe from the encoder event\nencoder.off(RotaryEncoderEvent.CLICK, on_click)\n\n# example with multiple subscription\nencoder.on(RotaryEncoderEvent.CLICK, on_click) # subscribe first\nencoder.on(RotaryEncoderEvent.CLICK, on_click) # subscribe second\n\nencoder.off(RotaryEncoderEvent.CLICK, on_click) # unsubscribe first\n```\n\n### Unsubscribe from all events\nTo unsubscribe from all events, you need to use the `off_all()` method, which takes two parameters.\n- `event` - event, property of the `RotaryEncoderEvent` class.\n- `callback` - a reference to a function that was registered earlier, if it is not passed, then all listeners of this event will be unsubscribed.\n\n```python\n# ----\n# Encoder initialization code above ^\n# ----\ndef on_click():\n    print(\"CLICK\")\n\ndef on_click2():\n    print(\"CLICK2\")\n\n\nencoder.on(RotaryEncoderEvent.CLICK, on_click) # subscribe first, with callback on_click\nencoder.on(RotaryEncoderEvent.CLICK, on_click2) # subscribe second, with callback on_click2\nencoder.on(RotaryEncoderEvent.CLICK, on_click) # subscribe third, with callback on_click\n\n# unsubscribe from the RotaryEncoderEvent.CLICK event only listeners with the on_click callback function\nencoder.off_all(RotaryEncoderEvent.CLICK, on_click) # unsubscribe all `on_click` listeners from event RotaryEncoderEvent.CLICK\n\n# unsubscribe from the RotaryEncoderEvent.CLICK event of all listeners\nencoder.off_all(RotaryEncoderEvent.CLICK) # unsubscribe all listeners from event RotaryEncoderEvent.CLICK\n```\n\n## Examples\nExamples of using the encoder can be found in the [examples](https://github.com/TTitanUA/micropython_rotary_encoder/tree/main/examples) folder.\n\n<a id=\"feedback\"></a>\n## Bugs and feedback\nIf you find bugs, create [issue](https://github.com/TTitanUA/micropython_rotary_encoder/issues).\nThe library is open for revision and your [pull requests](https://github.com/TTitanUA/micropython_rotary_encoder/pulls).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TTitanUA/micropython_rotary_encoder",
    "keywords": "micropython,raspberry pi pico,rotary encoder,EC11,KY-040",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "micropython-rotary-encoder",
    "package_url": "https://pypi.org/project/micropython-rotary-encoder/",
    "platform": "micropython raspberry pi pico",
    "project_url": "https://pypi.org/project/micropython-rotary-encoder/",
    "project_urls": {
      "Homepage": "https://github.com/TTitanUA/micropython_rotary_encoder"
    },
    "release_url": "https://pypi.org/project/micropython-rotary-encoder/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "This is a micropython raspberry pi pico encoder library.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16775112,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42c0655b67c427b42bee92957787d7b353c5b583b0fa339070a297f4122dadfc",
          "md5": "233df34d3c36c00c5272a157e2e1daf4",
          "sha256": "e95c2921c648634a3c784d7c5a8ad21c467cd9a99618391d93427648ca948ec6"
        },
        "downloads": -1,
        "filename": "micropython_rotary_encoder-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "233df34d3c36c00c5272a157e2e1daf4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7025,
        "upload_time": "2023-02-09T17:15:26",
        "upload_time_iso_8601": "2023-02-09T17:15:26.983208Z",
        "url": "https://files.pythonhosted.org/packages/42/c0/655b67c427b42bee92957787d7b353c5b583b0fa339070a297f4122dadfc/micropython_rotary_encoder-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "183b21d364827c8030a4e3eae702687586ca99cc019d07431103741822424d0e",
          "md5": "3aeb4fd8b6687a18e272a8435edb6ea0",
          "sha256": "8b8b7273fe1be085ab0a66c5cd6890269f554d34eff2151cc5fcf8e9082ca58a"
        },
        "downloads": -1,
        "filename": "micropython_rotary_encoder-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3aeb4fd8b6687a18e272a8435edb6ea0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 6897,
        "upload_time": "2023-02-09T19:46:33",
        "upload_time_iso_8601": "2023-02-09T19:46:33.676322Z",
        "url": "https://files.pythonhosted.org/packages/18/3b/21d364827c8030a4e3eae702687586ca99cc019d07431103741822424d0e/micropython_rotary_encoder-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b84e7713a91987e2ddf620fc9c973af146e71e418cc1f7e85002becda7e3d0b3",
          "md5": "7747b87bb042c4fd625107431ec635f2",
          "sha256": "a15cf5d75dc9a7482b69dbec9d36761bab2521aa6b906f812d097dde3f841015"
        },
        "downloads": -1,
        "filename": "micropython_rotary_encoder-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7747b87bb042c4fd625107431ec635f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 6904,
        "upload_time": "2023-02-09T20:00:54",
        "upload_time_iso_8601": "2023-02-09T20:00:54.393270Z",
        "url": "https://files.pythonhosted.org/packages/b8/4e/7713a91987e2ddf620fc9c973af146e71e418cc1f7e85002becda7e3d0b3/micropython_rotary_encoder-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b84e7713a91987e2ddf620fc9c973af146e71e418cc1f7e85002becda7e3d0b3",
        "md5": "7747b87bb042c4fd625107431ec635f2",
        "sha256": "a15cf5d75dc9a7482b69dbec9d36761bab2521aa6b906f812d097dde3f841015"
      },
      "downloads": -1,
      "filename": "micropython_rotary_encoder-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "7747b87bb042c4fd625107431ec635f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 6904,
      "upload_time": "2023-02-09T20:00:54",
      "upload_time_iso_8601": "2023-02-09T20:00:54.393270Z",
      "url": "https://files.pythonhosted.org/packages/b8/4e/7713a91987e2ddf620fc9c973af146e71e418cc1f7e85002becda7e3d0b3/micropython_rotary_encoder-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}