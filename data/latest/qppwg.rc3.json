{
  "info": {
    "author": "Yi-Chiao Wu",
    "author_email": "yichiao.wu@g.sp.m.is.nagoya-u.ac.jp",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Quasi-Periodic Parallel WaveGAN (QPPWG)\n\n[![](https://img.shields.io/pypi/v/qppwg)](https://pypi.org/project/qppwg/) ![](https://img.shields.io/pypi/pyversions/qppwg) ![](https://img.shields.io/pypi/l/qppwg)\n\n\nThis is official [QPPWG](https://arxiv.org/abs/2005.08654) PyTorch implementation.\nQPPWG is a non-autoregressive neural speech generation model developed based on [PWG](https://ieeexplore.ieee.org/abstract/document/9053795) and [QP](https://bigpon.github.io/QuasiPeriodicWaveNet_demo) structure.\n\n<p align=\"center\">\n<img src=\"https://user-images.githubusercontent.com/10822486/82352944-af1dca80-9a39-11ea-806d-1aa6a91d2773.png\"/>\n</p>\n\nIn this repo, we provide an example to train and test QPPWG as a vocoder for [WORLD](https://doi.org/10.1587/transinf.2015EDP7457) acoustic features.\nMore details can be found on our [Demo](https://bigpon.github.io/QuasiPeriodicParallelWaveGAN_demo) page.\n\n\n## News\n\n- **2020/7/22** Release v0.1.2\n- **2020/6/27** Release **mel-spec** feature extraction and the pre-trained models of [vcc20](http://www.vc-challenge.org/) corpus.\n- **2020/6/26** Release the pre-trained models of [vcc18](http://www.vc-challenge.org/vcc2018/index.html) corpus.\n- **2020/5/20** Release the first version (v0.1.1).\n\n\n## Requirements\n\nThis repository is tested on Ubuntu 16.04 with a Titan V GPU.\n\n- Python 3.6+\n- Cuda 10.0\n- CuDNN 7+\n- PyTorch 1.0.1+\n\n\n## Environment setup\n\nThe code works with both anaconda and virtualenv.\nThe following example uses anaconda.\n\n```bash\n$ conda create -n venvQPPWG python=3.6\n$ source activate venvQPPWG\n$ git clone https://github.com/bigpon/QPPWG.git\n$ cd QPPWG\n$ pip install -e .\n```\n\nPlease refer to the [PWG](https://github.com/kan-bayashi/ParallelWaveGAN) repo for more details.\n\n\n## Folder architecture\n- **egs**:\nThe folder for projects.\n- **egs/vcc18**:\nThe folder of the VCC2018 project.\n- **egs/vcc18/exp**:\nThe folder for trained models.\n- **egs/vcc18/conf**:\nThe folder for configs.\n- **egs/vcc18/data**:\nThe folder for corpus related files (wav, feature, list ...).\n- **qppwg**:\nThe folder of the source codes.\n\n\n## Run\n\n### Corpus and path setup\n\n- Modify the corresponding CUDA paths in `egs/vcc18/run.py`.\n- Download the [Voice Conversion Challenge 2018](https://datashare.is.ed.ac.uk/handle/10283/3061) (VCC2018) corpus to run the QPPWG example\n\n```bash\n$ cd egs/vcc18\n# Download training and validation corpus\n$ wget -o train.log -O data/wav/train.zip https://datashare.is.ed.ac.uk/bitstream/handle/10283/3061/vcc2018_database_training.zip\n# Download evaluation corpus\n$ wget -o eval.log -O data/wav/eval.zip https://datashare.is.ed.ac.uk/bitstream/handle/10283/3061/vcc2018_database_evaluation.zip\n# unzip corpus\n$ unzip data/wav/train.zip -d data/wav/\n$ unzip data/wav/eval.zip -d data/wav/\n```\n\n- **Training wav lists**: `data/scp/vcc18_train_22kHz.scp`.\n- **Validation wav lists**: `data/scp/vcc18_valid_22kHz.scp`.\n- **Testing wav list**: `data/scp/vcc18_eval_22kHz.scp`.\n\n### Preprocessing\n\n```bash\n# Extract WORLD acoustic features and statistics of training and testing data\n$ bash run.sh --stage 0 --config PWG_30\n```\n\n- WORLD-related settings can be changed in `egs/vcc18/conf/vcc18.PWG_30.yaml`.\n- If you want to use another corpus, please create a corresponding config and a file including power thresholds and f0 ranges like `egs/vcc18/data/pow_f0_dict.yml`.\n- More details about feature extraction can be found in the [QPNet](https://github.com/bigpon/QPNet) repo.\n- The lists of auxiliary features will be automatically generated.\n- **Training aux lists**: `data/scp/vcc18_train_22kHz.list`.\n- **Validation aux lists**: `data/scp/vcc18_valid_22kHz.list`.\n- **Testing aux list**: `data/scp/vcc18_eval_22kHz.list`.\n\n\n### QPPWG/PWG training\n\n```bash\n# Training a QPPWG model with the 'QPPWGaf_20' config and the 'vcc18_train_22kHz' and 'vcc18_valid_22kHz' sets.\n$ bash run.sh --gpu 0 --stage 1 --conf QPPWGaf_20 \\\n--trainset vcc18_train_22kHz --validset vcc18_valid_22kHz\n```\n\n- The gpu ID can be set by --gpu GPU_ID (default: 0)\n- The model architecture can be set by --conf CONFIG (default: PWG_30)\n- The trained model resume can be set by --resume NUM (default: None)\n\n\n### QPPWG/PWG testing\n\n```bash\n# QPPWG/PWG decoding w/ natural acoustic features\n$ bash run.sh --gpu 0 --stage 2 --conf QPPWGaf_20 \\\n--iter 400000 --trainset vcc18_train_22kHz --evalset vcc18_eval_22kHz\n# QPPWG/PWG decoding w/ scaled f0 (ex: halved f0).\n$ bash run.sh --gpu 0 --stage 3 --conf QPPWGaf_20 --scaled 0.50 \\\n--iter 400000 --trainset vcc18_train_22kHz --evalset vcc18_eval_22kHz\n```\n\n### Monitor training progress\n\n```bash\n$ tensorboard --logdir exp\n```\n\n- The training time of PWG_30 with a TITAN V is around 3 days.\n- The training time of QPPWGaf_20 with a TITAN V is around 5 days.\n\n\n## Inference speed (RTF)\n\n- Vanilla PWG (PWG_30)\n\n```bash\n# On CPU (Intel(R) Xeon(R) Gold 6142 CPU @ 2.60GHz 32 threads)\n[decode]: 100%|███████████| 140/140 [04:50<00:00,  2.08s/it, RTF=0.771]\n2020-05-26 12:30:27,273 (decode:156) INFO: Finished generation of 140 utterances (RTF = 0.579).\n# On GPU (TITAN V)\n[decode]: 100%|███████████| 140/140 [00:09<00:00, 14.89it/s, RTF=0.0155]\n2020-05-26 12:32:26,160 (decode:156) INFO: Finished generation of 140 utterances (RTF = 0.016).\n```\n\n- PWG w/ only 20 blocks (PWG_20)\n\n```bash\n# On CPU (Intel(R) Xeon(R) Gold 6142 CPU @ 2.60GHz 32 threads)\n[decode]: 100%|███████████| 140/140 [03:57<00:00,  1.70s/it, RTF=0.761]\n2020-05-30 13:50:20,438 (decode:156) INFO: Finished generation of 140 utterances (RTF = 0.474).\n# On GPU (TITAN V)\n[decode]: 100%|███████████| 140/140 [00:08<00:00, 16.55it/s, RTF=0.0105]\n2020-05-30 13:43:50,793 (decode:156) INFO: Finished generation of 140 utterances (RTF = 0.011).\n```\n\n- QPPWG (QPPWGaf_20)\n\n```bash\n# On CPU (Intel(R) Xeon(R) Gold 6142 CPU @ 2.60GHz 32 threads)\n[decode]: 100%|███████████| 140/140 [04:12<00:00,  1.81s/it, RTF=0.455]\n2020-05-26 12:38:15,982 (decode:156) INFO: Finished generation of 140 utterances (RTF = 0.512).\n# On GPU (TITAN V)\n[decode]: 100%|███████████| 140/140 [00:11<00:00, 12.57it/s, RTF=0.0218]\n2020-05-26 12:33:32,469 (decode:156) INFO: Finished generation of 140 utterances (RTF = 0.020).\n```\n\n\n## Models and results\n\n- The pre-trained models and generated utterances are released.\n- You can download the whole folder of each corpus and then put it in `egs/[corpus]` to run speech generations with the pre-trained models.\n- You also can only download the `[corpus]/data` folder and the desired pre-trained model and then put the `data` folder in `egs/[corpus]` and the model folder in `egs/[corpus]/exp`.\n- Both models with 100,000 iterations (trained w/ only STFT loss) and 400,000 iterations (trained w/ STFT and GAN losses) are released.\n- The generated utterances are in the `wav` folder of each model’s folder.\n\n<!--\n| Corpus | Lang | Fs [Hz] | Feature | Model | Conf |\n|:-:|:-:|:-:|:-:|:-:|:-:|\n| [vcc18](https://drive.google.com/drive/folders/1WFqk08lJE4LrYocUxZo7cdT7_BxGitiL?usp=sharing) | EN | 22050 | world<br>(uv + f0 +mcep + ap) | [PWG_20](https://drive.google.com/drive/folders/1kTQ0iYBy7t7EnxFiwhh7gII1KVDpuvts?usp=sharing) | [link](https://github.com/bigpon/QPPWG/blob/master/egs/vcc18/conf/vcc18.PWG_20.yaml) |\n| [vcc18](https://drive.google.com/drive/folders/1WFqk08lJE4LrYocUxZo7cdT7_BxGitiL?usp=sharing) | EN | 22050 | world | [PWG_30](https://drive.google.com/drive/folders/1HHCgFpqJQO9NnrDkZdNKvw4WeCm_xPWl?usp=sharing) | [link](https://github.com/bigpon/QPPWG/blob/master/egs/vcc18/conf/vcc18.PWG_30.yaml) |\n| [vcc18](https://drive.google.com/drive/folders/1WFqk08lJE4LrYocUxZo7cdT7_BxGitiL?usp=sharing) | EN | 22050 | world | [QPPWGaf_20](https://drive.google.com/drive/folders/12kbJNKjqJwcImc4iTcu6J53s4st297bD?usp=sharing) | [link](https://github.com/bigpon/QPPWG/blob/master/egs/vcc18/conf/vcc18.QPPWGaf_20.yaml) |\n| [vcc20](https://drive.google.com/drive/folders/1khnMmwY-_6HzNtZgmT2xwoWgC6MYuKLZ?usp=sharing) | EN | 24000 | melf0h128<br>(uv + f0 + mel-scp) | [PWG_20](https://drive.google.com/drive/folders/1TTJMGyzHSSLzqqFcQwYyjsKwcW48S9zc?usp=sharing) | [link](https://github.com/bigpon/QPPWG/blob/master/egs/vcc20/conf/vcc20.PWG_20.yaml) |\n| [vcc20](https://drive.google.com/drive/folders/1khnMmwY-_6HzNtZgmT2xwoWgC6MYuKLZ?usp=sharing) | EN | 24000 | melf0h128 | [PWG_30](https://drive.google.com/drive/folders/1rrHVtBQRqclsskBJi6IErF-FqOqb6v37?usp=sharing) | [link](https://github.com/bigpon/QPPWG/blob/master/egs/vcc20/conf/vcc20.PWG_30.yaml) |\n| [vcc20](https://drive.google.com/drive/folders/1khnMmwY-_6HzNtZgmT2xwoWgC6MYuKLZ?usp=sharing) | EN | 24000 | melf0h128 | [QPPWGaf_20](https://drive.google.com/drive/folders/1UXZG17xsE3MCqroAe_5vj49aeW7xEH6M?usp=sharing) | [link](https://github.com/bigpon/QPPWG/blob/master/egs/vcc20/conf/vcc20.QPPWGaf_20.yaml) |\n-->\n\n<table class=\"tg\">\n<thead>\n  <tr>\n    <th class=\"tg-0lax\">Corpus</th>\n    <th class=\"tg-0lax\">Lang</th>\n    <th class=\"tg-0lax\">Fs [Hz]</th>\n    <th class=\"tg-0lax\">Feature</th>\n    <th class=\"tg-0lax\">Model</th>\n    <th class=\"tg-0lax\">Conf</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td class=\"tg-0pky\" rowspan=\"3\">\n    <a href=\"https://drive.google.com/drive/folders/1WFqk08lJE4LrYocUxZo7cdT7_BxGitiL?usp=sharing\">\n    vcc18</a></td>\n    <td class=\"tg-0pky\" rowspan=\"3\">EN</td>\n    <td class=\"tg-0pky\" rowspan=\"3\">22050</td>\n    <td class=\"tg-0pky\" rowspan=\"3\">world<br>(uv + f0 + mcep + ap)<br>(shiftms: 5)</td>\n    <td class=\"tg-0pky\">\n    <a href=\"https://drive.google.com/drive/folders/1kTQ0iYBy7t7EnxFiwhh7gII1KVDpuvts?usp=sharing\">\n    PWG_20</a></td>\n    <td class=\"tg-0pky\">\n    <a href=\"https://github.com/bigpon/QPPWG/blob/master/egs/vcc18/conf/vcc18.PWG_20.yaml\">\n    link</a></td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">\n    <a href=\"https://drive.google.com/drive/folders/1HHCgFpqJQO9NnrDkZdNKvw4WeCm_xPWl?usp=sharing\">\n    PWG_30</td>\n    <td class=\"tg-0pky\">\n    <a href=\"https://github.com/bigpon/QPPWG/blob/master/egs/vcc18/conf/vcc18.PWG_30.yaml\">\n    link</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">\n    <a href=\"https://drive.google.com/drive/folders/12kbJNKjqJwcImc4iTcu6J53s4st297bD?usp=sharing\">\n    QPPWGaf_20</td>\n    <td class=\"tg-0pky\">\n    <a href=\"https://github.com/bigpon/QPPWG/blob/master/egs/vcc18/conf/vcc18.QPPWGaf_20.yaml\">\n    link</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\" rowspan=\"3\">\n    <a href=\"https://drive.google.com/drive/folders/1khnMmwY-_6HzNtZgmT2xwoWgC6MYuKLZ?usp=sharing\">\n    vcc20</td>\n    <td class=\"tg-0pky\" rowspan=\"3\">EN, FI, DE, ZH</td>\n    <td class=\"tg-0pky\" rowspan=\"3\">24000</td>\n    <td class=\"tg-0pky\" rowspan=\"3\">melf0h128<br>(uv + f0 + mel-spc)<br>(hop_size: 128)</td>\n    <td class=\"tg-0pky\">\n    <a href=\"https://drive.google.com/drive/folders/1TTJMGyzHSSLzqqFcQwYyjsKwcW48S9zc?usp=sharing\">\n    PWG_20</td>\n    <td class=\"tg-0pky\">\n    <a href=\"https://github.com/bigpon/QPPWG/blob/master/egs/vcc20/conf/vcc20.PWG_20.yaml\">\n    link</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">\n    <a href=\"https://drive.google.com/drive/folders/1rrHVtBQRqclsskBJi6IErF-FqOqb6v37?usp=sharing\">\n    PWG_30</td>\n    <td class=\"tg-0pky\">\n    <a href=\"https://github.com/bigpon/QPPWG/blob/master/egs/vcc20/conf/vcc20.PWG_30.yaml\">\n    link</td>\n  </tr>\n  <tr>\n    <td class=\"tg-0pky\">\n    <a href=\"https://drive.google.com/drive/folders/1UXZG17xsE3MCqroAe_5vj49aeW7xEH6M?usp=sharing\">\n    QPPWGaf_20</td>\n    <td class=\"tg-0pky\">\n    <a href=\"https://github.com/bigpon/QPPWG/blob/master/egs/vcc20/conf/vcc20.QPPWGaf_20.yaml\">\n    link</td>\n  </tr>\n</tbody>\n</table>\n\n\n## Usage of pre-trained models\n\n### Analysis-synthesis\n\nThe minimum code for performing analysis and synthesis is presented.\n\n```bash\n# Make sure you have installed `qppwg`\n# If not, install it via pip\n$ pip install qppwg\n# Take \"vcc18\" corpus as an example\n# Download the whole folder of \"vcc18\"\n$ ls vcc18\n  data    exp\n# Change directory to `vcc18` folder\n$ cd vcc18\n# Put audio files in `data/wav/` directory\n$ ls data/wav/\n  sample1.wav    sample2.wav\n# Create a list `data/sample.scp` of the audio files\n$ tail data/scp/sample.scp\n  data/wav/sample1.wav\n  data/wav/sample2.wav\n# Extract acoustic features\n$ qppwg-preprocess \\\n    --audio data/scp/sample.scp \\\n    --indir wav \\\n    --outdir hdf5 \\\n    --config exp/qppwg_vcc18_train_22kHz_QPPWGaf_20/config.yml\n# The extracted features are in `data/hdf5/`\n# The feature list `data/sample.list` of the feature files will be automatically generated\n$ ls data/hdf5/\n  sample1.h5    sample2.h5\n$ ls data/scp/\n  sample.scp    sample.list\n# Synthesis\n$ qppwg-decode \\\n    --eval_feat data/scp/sample.list \\\n    --stats data/stats/vcc18_train_22kHz.joblib \\\n    --indir data/hdf5/ \\\n    --outdir exp/qppwg_vcc18_train_22kHz_QPPWGaf_20/wav/400000/ \\\n    --checkpoint exp/qppwg_vcc18_train_22kHz_QPPWGaf_20/checkpoint-400000steps.pkl\n# Synthesis w/ halved F0\n$ qppwg-decode \\\n    --f0_factor 0.50 \\\n    --eval_feat data/scp/sample.list \\\n    --stats data/stats/vcc18_train_22kHz.joblib \\\n    --indir data/hdf5/ \\\n    --outdir exp/qppwg_vcc18_train_22kHz_QPPWGaf_20/wav/400000/ \\\n    --checkpoint exp/qppwg_vcc18_train_22kHz_QPPWGaf_20/checkpoint-400000steps.pkl\n# The generated utterances can be found in `exp/[model]/wav/400000/`\n$ ls exp/qppwg_vcc18_train_22kHz_QPPWGaf_20/wav/400000/\n  sample1.wav    sample1_f0.50.wav    sample2.wav    sample2_f0.50.wav\n```\n\n\n## References\nThe QPPWG repository is developed based on the following repositories and paper.\n\n- [kan-bayashi/ParallelWaveGAN](https://github.com/kan-bayashi/ParallelWaveGAN)\n- [bigpon/QPNet](https://github.com/bigpon/QPNet)\n- [k2kobayashi/sprocket](https://github.com/k2kobayashi/sprocket)\n- [r9y9/wavenet_vocoder](https://github.com/r9y9/wavenet_vocoder)\n- [Parallel WaveGAN](https://arxiv.org/abs/1910.11480)\n\n\n\n## Citation\n\nIf you find the code is helpful, please cite the following article.\n\n```\n@article{wu2020qppwg,\ntitle={Quasi-Periodic Parallel WaveGAN Vocoder: A Non-autoregressive Pitch-dependent   Dilated Convolution Model for Parametric Speech Generation},\nauthor={Wu, Yi-Chiao and Hayashi, Tomoki and Okamoto, Takuma and Kawai, Hisashi and Toda, Tomoki},\njournal={arXiv preprint arXiv:2005.08654},\nyear={2020}\n}\n```\n\n\n## Authors\n\nDevelopment:\nYi-Chiao Wu @ Nagoya University ([@bigpon](https://github.com/bigpon))\nE-mail: `yichiao.wu@g.sp.m.is.nagoya-u.ac.jp`\n\nAdvisor:\nTomoki Toda @ Nagoya University\nE-mail: `tomoki@icts.nagoya-u.ac.jp`",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/bigpon/QPPWG",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qppwg",
    "package_url": "https://pypi.org/project/qppwg/",
    "platform": "",
    "project_url": "https://pypi.org/project/qppwg/",
    "project_urls": {
      "Homepage": "http://github.com/bigpon/QPPWG"
    },
    "release_url": "https://pypi.org/project/qppwg/0.1.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Quasi-Periodic Parallel WaveGAN implementation",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7754840,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bafd7e759de137bfca783c1cfd1df5b0f603fff5d048c4bb45fb7613b4dfade7",
          "md5": "f7e2cc7d9f38dcba061cea488cf8bce5",
          "sha256": "5eae2a3c3f19204de96160e4a70b4f460e828b25f10eb37a5ccf813fd7d644ef"
        },
        "downloads": -1,
        "filename": "qppwg-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f7e2cc7d9f38dcba061cea488cf8bce5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32142,
        "upload_time": "2020-05-20T07:38:10",
        "upload_time_iso_8601": "2020-05-20T07:38:10.768024Z",
        "url": "https://files.pythonhosted.org/packages/ba/fd/7e759de137bfca783c1cfd1df5b0f603fff5d048c4bb45fb7613b4dfade7/qppwg-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90c512932cbfc7702896e666a9d942ffa213bc8b8573dd8a9a1fdc1b7c802cf6",
          "md5": "c78c28ac25b6f46b96ce71b4983ff017",
          "sha256": "9f2a3783d8eb8a0e0a8248d428d8d600832105b8254c12cd93dfcf932a40120b"
        },
        "downloads": -1,
        "filename": "qppwg-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c78c28ac25b6f46b96ce71b4983ff017",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37510,
        "upload_time": "2020-07-22T07:25:26",
        "upload_time_iso_8601": "2020-07-22T07:25:26.074129Z",
        "url": "https://files.pythonhosted.org/packages/90/c5/12932cbfc7702896e666a9d942ffa213bc8b8573dd8a9a1fdc1b7c802cf6/qppwg-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af49207929c1f5ff59ff4ec50221e610325d3a21c2eba1e91c0aec4d90723d88",
          "md5": "f40f2f99b90624caacad914c5d2f1fd0",
          "sha256": "2d49a75ee414a26aad4fe93a16bfce2219fd01dc753f931ea2cc7f58cdbfc6c9"
        },
        "downloads": -1,
        "filename": "qppwg-0.1.2a0.tar.gz",
        "has_sig": false,
        "md5_digest": "f40f2f99b90624caacad914c5d2f1fd0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37748,
        "upload_time": "2020-06-27T07:51:10",
        "upload_time_iso_8601": "2020-06-27T07:51:10.492339Z",
        "url": "https://files.pythonhosted.org/packages/af/49/207929c1f5ff59ff4ec50221e610325d3a21c2eba1e91c0aec4d90723d88/qppwg-0.1.2a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90c512932cbfc7702896e666a9d942ffa213bc8b8573dd8a9a1fdc1b7c802cf6",
        "md5": "c78c28ac25b6f46b96ce71b4983ff017",
        "sha256": "9f2a3783d8eb8a0e0a8248d428d8d600832105b8254c12cd93dfcf932a40120b"
      },
      "downloads": -1,
      "filename": "qppwg-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c78c28ac25b6f46b96ce71b4983ff017",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 37510,
      "upload_time": "2020-07-22T07:25:26",
      "upload_time_iso_8601": "2020-07-22T07:25:26.074129Z",
      "url": "https://files.pythonhosted.org/packages/90/c5/12932cbfc7702896e666a9d942ffa213bc8b8573dd8a9a1fdc1b7c802cf6/qppwg-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}