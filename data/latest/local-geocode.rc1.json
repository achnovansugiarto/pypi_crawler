{
  "info": {
    "author": "Martin MÃ¼ller",
    "author_email": "martin.mathias.mueller@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Local-geocode :earth_americas:\n\nThis is a very simple geocoding library which runs fully locally (without calling any APIs) and has therefore no limits in terms of processing. It runs very fast due to using an efficient in-memory datastructure called [Flashtext](https://github.com/vi3k6i5/flashtext). It uses data from http://www.geonames.org/.\n\nThis project is mainly used in the context of decoding data from the \"user.location\" field of tweets but it can in principle be used on any address/location raw text field. Note that if you need very precise geographical information it is better to use one of the many available APIs. By default this repo only detects places with more than 30k inhabitants.\n\nI have compared the predictions by local-geocode with geopy for 500 Twitter user locations. Local-geocode performs signficantly better (85% accuracy) than geopy (64% accuracy) for this use case. Read more about the benchmark [here](benchmark/benchmark.md).\n\n# Install\n```\npip install local-geocode\n```\n\n# Example usage\nLocal-geocode is able to parse arbitrary location names in many languages, as well as numerous alternative names of places and returns geographic information.\n\n```python\nfrom geocode.geocode import Geocode\n\ngc = Geocode()\ngc.load()  # load geonames data\n\nmydata = ['Tel Aviv', 'Mangalore ðŸ‡®ðŸ‡³']\n\nfor input_text in mydata:\n    locations = gc.decode(input_text)\n    print(locations)\n\n[\n    {\n        \"name\": \"Tel Aviv\",\n        \"official_name\": \"Tel Aviv\",\n        \"country_code\": \"IL\",\n        \"longitude\": 34.780570000000004,\n        \"latitude\": 32.08088,\n        \"geoname_id\": \"293397\",\n        \"location_type\": \"city\",\n        \"population\": 432892\n    }\n]\n[\n    {\n        \"name\": \"Mangalore\",\n        \"official_name\": \"Mangalore\",\n        \"country_code\": \"IN\",\n        \"longitude\": 74.85603,\n        \"latitude\": 12.91723,\n        \"geoname_id\": \"1263780\",\n        \"location_type\": \"city\",\n        \"population\": 417387\n    },\n    {\n        \"name\": \"\\ud83c\\uddee\\ud83c\\uddf3\",\n        \"official_name\": \"Republic of India\",\n        \"country_code\": \"IN\",\n        \"longitude\": 79.0,\n        \"latitude\": 22.0,\n        \"geoname_id\": \"1269750\",\n        \"location_type\": \"country\",\n        \"population\": 1352617328\n    }\n]\n```\n\n# Usage\nThe easiest way to integrate `local-geocode` to your project is to simply run `pip install local-geocode`. You can also simply clone this repository and copy the folder `geocode` into your project. \n\n## Configuration\nWhen installed with pip, local-geocode comes packaged with 2 pickle files which were generated using the default configuration. You can however change the configuration and then re-compute the pickle files for your needs.\n\nThe `Geocode()` initializer accepts the following arguments:\n* `min_population_cutoff` (default: 30k): Places below this population size are excluded\n* `large_city_population_cutoff` (default: 200k): Cities with a population size larger than this will be prioritized. Example: \"Los Angeles, USA\" will result in \"Los Angeles\" as the first result, and not \"USA\".\n* `location_types`: Provide a list of location types which you would like to filter. By default it uses all location types (i.e. `['city', 'place', 'country', 'admin1', 'admin2', 'admin3', 'admin4', 'admin5', 'admin6', 'admin_other', 'continent', 'region']`).\n\nExample:\n```python\nfrom geocode.geocode import Geocode\n\ngc = Geocode(min_population_cutoff=100000)\ngc.load()  # downloads geonames data (~1.2GB), parses data, generates pickle files in <package folder>/geocode/data for new configuration\n```\n(This may take 1-2min to run)\n\n\n## Prioritization\nIf multiple locations are detected in an input string, local-geocode sorts the output by the following prioritization:\n1. Large cities (`population size > large_city_population_cutoff`)\n2. States/provinces (admin level 1)\n3. Countries\n4. Places (`population size <= large_city_population_cutoff`)\n5. Counties (admin levels > 1)\n6. Continents\n7. Regions\n\n## Parallelized\nIf you have a large number of texts to decode, it might make sense to use `decode_parallel` which runs decode in parallel:\n```python\ngc = Geocode()\ngc.load()  # load geonames data\n\n# a large number of items\nmydata = ['Tel Aviv', ..,]\nnum_cpus = None # By default use all CPUs\n\nlocations = gc.decode_parallel(mydata, num_cpus=num_cpus)\nprint(locations)\n```\n\n# Contact\nPlease open an issue, if you run into problems!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mar-muel/local-geocode",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "local-geocode",
    "package_url": "https://pypi.org/project/local-geocode/",
    "platform": "",
    "project_url": "https://pypi.org/project/local-geocode/",
    "project_urls": {
      "Homepage": "https://github.com/mar-muel/local-geocode"
    },
    "release_url": "https://pypi.org/project/local-geocode/0.0.1/",
    "requires_dist": [
      "pandas",
      "tqdm",
      "flashtext",
      "joblib"
    ],
    "requires_python": ">=3.6",
    "summary": "Simple library for efficient geocoding without making API calls",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9044334,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c46340db1b14e88896c41e0537b49d7210da7e03a1cbffbd316d916e202d6ea",
          "md5": "521164201480071db29077e7a32f3405",
          "sha256": "4695bc2f365cb490f256525f7764a6f75a0ec7c554559ff8f6d195111b05ba6e"
        },
        "downloads": -1,
        "filename": "local_geocode-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "521164201480071db29077e7a32f3405",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13038746,
        "upload_time": "2021-01-03T21:27:04",
        "upload_time_iso_8601": "2021-01-03T21:27:04.373351Z",
        "url": "https://files.pythonhosted.org/packages/2c/46/340db1b14e88896c41e0537b49d7210da7e03a1cbffbd316d916e202d6ea/local_geocode-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4afb74c022c489e6bfa3c81bfa29904ea79857de4b7a754b39c7fec3cd27cd29",
          "md5": "49c6ed7d7e8c2683e73102fedf30967b",
          "sha256": "0c08eec3af3ab7bf4732da56ade32c70966bcc56f0080d3bf276e9e677889427"
        },
        "downloads": -1,
        "filename": "local-geocode-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "49c6ed7d7e8c2683e73102fedf30967b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12953163,
        "upload_time": "2021-01-03T21:27:07",
        "upload_time_iso_8601": "2021-01-03T21:27:07.361504Z",
        "url": "https://files.pythonhosted.org/packages/4a/fb/74c022c489e6bfa3c81bfa29904ea79857de4b7a754b39c7fec3cd27cd29/local-geocode-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2c46340db1b14e88896c41e0537b49d7210da7e03a1cbffbd316d916e202d6ea",
        "md5": "521164201480071db29077e7a32f3405",
        "sha256": "4695bc2f365cb490f256525f7764a6f75a0ec7c554559ff8f6d195111b05ba6e"
      },
      "downloads": -1,
      "filename": "local_geocode-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "521164201480071db29077e7a32f3405",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13038746,
      "upload_time": "2021-01-03T21:27:04",
      "upload_time_iso_8601": "2021-01-03T21:27:04.373351Z",
      "url": "https://files.pythonhosted.org/packages/2c/46/340db1b14e88896c41e0537b49d7210da7e03a1cbffbd316d916e202d6ea/local_geocode-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4afb74c022c489e6bfa3c81bfa29904ea79857de4b7a754b39c7fec3cd27cd29",
        "md5": "49c6ed7d7e8c2683e73102fedf30967b",
        "sha256": "0c08eec3af3ab7bf4732da56ade32c70966bcc56f0080d3bf276e9e677889427"
      },
      "downloads": -1,
      "filename": "local-geocode-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "49c6ed7d7e8c2683e73102fedf30967b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12953163,
      "upload_time": "2021-01-03T21:27:07",
      "upload_time_iso_8601": "2021-01-03T21:27:07.361504Z",
      "url": "https://files.pythonhosted.org/packages/4a/fb/74c022c489e6bfa3c81bfa29904ea79857de4b7a754b39c7fec3cd27cd29/local-geocode-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}