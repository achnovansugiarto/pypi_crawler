{
  "info": {
    "author": "Hanko",
    "author_email": "jan.gerle@hanko.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Communications :: FIDO",
      "Topic :: Security"
    ],
    "description": "# Hanko Authentication SDK for Python\n\nThis package is maintained by [Hanko](https://hanko.io).\n\n## Contents\n\n1. [Introduction](#introduction)\n1. [Documentation](#documentation)\n1. [Installation](#installation)\n1. [Usage](#usage)\n   1. [Prerequisites](#prerequisites)\n   1. [Create a new Hanko API Client](#create-a-new-hanko-api-client)\n   1. [Register a WebAuthn credential](#register-a-webauthn-credential)\n   1. [Authenticate with a registered WebAuthn credential](#authenticate-with-a-registered-webauthn-credential)\n   1. [Making Transactions](#making-transactions)\n   1. [Credential Management](#credential-management)\n1. [Serializing and deserializing Hanko payloads and response](#serializing-and-deserializing-hanko-payloads-and-response)\n1. [Exception handling](#exception-handling)\n1. [Enable debug logging](#enable-debug-logging)\n1. [Support](#support)\n\n## Introduction\n\nThis SDK provides an API client that lets you communicate with the\n[Hanko Authentication API](https://docs.hanko.io/overview)\nto easily integrate [FIDOÂ®](https://fidoalliance.org)-based authentication into your web application written in\nPython.\n\n## Documentation\n\n- [Hanko Documentation](https://docs.hanko.io) website\n- Hanko Authentication [API reference](https://docs.hanko.io/api/webauthn)\n\n## Installation\n\n### Pip\n\n```bash\npip install hanko_sdk\n```\n\n### Building a wheel\n\n```bash\npy -m build\npip install dist/hanko_sdk-X.X.X-py3-none-any.whl\n```\n\n## Usage\n\n### Prerequisites\n\nIn order to utilize the client provided by the SDK you need an API URL as well as API credentials in the form of an\nAPI key ID and an API secret. View our [getting started](https://docs.hanko.io/gettingstarted) guide in the official\ndocumentation on how to obtain these.\n\nThe minimum supported Python version is 3.7.\n\n### Create a new Hanko API Client\n\nOnce you have set up your account, create a `HankoHttpClientConfig` with the API URL, the API Key Id and the API secret and\nuse it to construct a `HankoHttpClient`.\n\n```python\nhanko_config = HankoHttpClientConfig(\"<YOUR_BASEURL>\", \"<YOUR_API_SECRET>\", \"<YOUR_API_KEY>\")\nhanko_client = HankoHttpClient(hanko_config)\n```\n\n### Register a WebAuthn credential\n\nRegistration of a WebAuthn credential involves retrieving credential creation options from the Hanko API\n(initialization), passing these options to the browser's Web Authentication API and lastly sending the WebAuthn response\nback to the Hanko API for validation (finalization).\n\nFor a more complete example of the authentication process, see the\n[implementation guide](https://docs.hanko.io/implementation/registration) in the Hanko documentation.\n\n#### Registration initialization:\n\n##### Using defaults\n\n```python\n# To create the user object you'll need a userId, a username, and optionally, a\n# displayName. The username usually comes either from a form a user provides when\n# registering for the first time, or from your existing session\n# store or database, as well as a related userId, which may needs to be generated\n# if it is a new user.\n\nuser_id = \"<YOUR_USER_ID>\"\nusername = \"<YOUR_USERNAME>\"\ndisplay_name = \"<YOUR_DISPLAY_NAME>\"\n\nrequest = RegistrationInitializationRequest(\n     User(\n         user_id,\n         username,\n         display_name\n     )\n )\n\nresponse = hanko_client.initialize_registration(request)\n```\n\n##### Modifying registration options\n\nYou can modify the default credential creation options for registration as follows:\n\n```python\nuser_id = \"<YOUR_USER_ID>\"\nusername = \"<YOUR_USERNAME>\"\ndisplay_name = \"<YOUR_DISPLAY_NAME>\"\n\nrequest = RegistrationInitializationRequest(\n    User(\n        user_id,\n        username,\n        display_name\n    ),\n    RegistrationInitializationRequestOptions(\n        AuthenticatorSelection(\n            AuthenticatorAttachment.from_json_serializable(authenticator),\n            True,\n            UserVerificationRequirement.REQUIRED\n        ),\n        ConveyancePreference.NONE\n    )\n)\n\nresponse = hanko_client.initialize_registration(request)\n```\n\n#### Pass Hanko API response to the browser's Web Authentication API\n\nInitialization with the Hanko API returns a response that represent\n[`PublicKeyCredentialCreationOptions`](https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions)\nthat must be provided to the browser's WebAuthn Authentication API to create a credential. The WebAuthn Authentication API\nrequires data that looks like JSON but contains binary data, represented as ArrayBuffers, that needs to be encoded.\nSo we can't pass the Hanko API `registrationInitializationResponse` directly as `PublicKeyCredentialCreationOptions`, but you can\nuse the [Hanko JavaScript WebAuthn Library](https://github.com/teamhanko/hanko-webauthn) that wraps the WebAuthn Authentication API\nand encodes / decodes the data and allows you to easily pass Hanko API responses to the WebAuthn Authentication API\nand vice versa.\n\nYou can provide the `registrationInitializationResponse` obtained from the `hanko_client.initialize_registration(request)` directly to the `create` function of the\n[Hanko JavaScript WebAuthn Library](https://github.com/teamhanko/hanko-webauthn) for creating a credential.\n\nFor a more complete\nexample of the registration process, see the [implementation guide](https://docs.hanko.io/implementation/registration)\nin the Hanko documentation.\n\n#### Registration finalization\n\nAfter you have executed the `create()` function mentioned before and the user has completed the process, you will receive back a response  from the browser's WebAuthn API.\n\nDeserialize and pass the Web Authentication API response as returned from the Hanko WebAuthn Library's `create` function to\nthe `finalize_registration` client method.\n\n```python\nwebauthn_response = \"{\\\"id\\\": \\\"ATIihVy...\\\", ...}\";\nfrom hanko_sdk import json_serializer\n\nrequest = json_serializer.deserialize_string(webauthn_response, RegistrationFinalizationRequest)\nresponse = hanko_client.finalize_registration(request)\n```\n\n### Authenticate with a registered WebAuthn credential\n\nFor a more complete example of the authentication process, see the\n[implementation guide](https://docs.hanko.io/implementation/authentication) in the Hanko documentation.\n\n#### Authentication initialization\n\n##### Using defaults\n\n```python\nuser_id = \"e3be22a7-13cf-4235-a09c-380dfd44ac04\"\n\nrequest = AuthenticationInitializationRequest(\n    User(\n        user_id\n    )\n)\n\nresponse = hanko_client.initialize_authentication(request)\n```\n\n##### Modifying authentication options\n\nYou can modify the default credential request options for authentication as follows:\n\n```python\nuser_id = \"e3be22a7-13cf-4235-a09c-380dfd44ac04\"\n\nrequest = AuthenticationInitializationRequest(\n    User(\n        user_id\n    ),\n    AuthenticationInitializationRequestOptions(\n        UserVerificationRequirement.REQUIRED,\n        AuthenticatorAttachment.PLATFORM\n    )\n )\n\nresponse = hanko_client.initialize_authentication(request)\n```\n\n#### Pass Hanko API response to Web Authentication API\n\nYou can provide the `response` to the `get()` function of the\n[Hanko WebAuthn Library](https://github.com/teamhanko/hanko-webauthn) for authenticating with a credential. For a more\ncomplete example of the authentication process, see the [implementation guide](https://docs.hanko.io/implementation/authentication)\nin the Hanko documentation.\n\n#### Authentication finalization\n\nDeserialize and pass the Web Authentication API response as returned from the Hanko WebAutn Library's `get()` function to the\n`finalize_authentication` client method.\n\n```python\nwebauthn_response = \"{\\\"id\\\": \\\"DaNOpBx...\\\", ...}\";\n\nfrom hanko_sdk import json_serializer\n\nrequest = json_serializer.deserialize_string(webauthn_response, AuthenticationFinalizationRequest)\nresponse = hankoClient.finalize_authentication(request)\n```\n\n### Making transactions\n\nA transaction is technically the equivalent of an authentication, with the difference being that when initializing\na transaction, a `transaction_text` can be included, which becomes part of the authentication challenge.\n\n#### Transaction initialization\n\n##### Using defaults\n\n```python\nuser_id = \"e3be22a7-13cf-4235-a09c-380dfd44ac04\"\n\nrequest = TransactionInitializationRequest(\n    User(\n        user_id\n    ),\n    \"Pay $5 to Bob?\"\n)\n\nresponse = hanko_client.initialize_transaction(request)\n```\n\n#### Pass Hanko API response to Web Authentication API\n\nYou can provide the `response` to the `get()` function of the\n[Hanko WebAuthn Library](https://github.com/teamhanko/hanko-webauthn) for authenticating with a credential. For a more\ncomplete example of the authentication process, see the [implementation guide](https://docs.hanko.io/implementation/authentication)\nin the Hanko documentation.\n\n#### Transaction finalization\n\nDeserialize and pass the Web Authentication API response as returned from the Hanko WebAutn Library's `get()` function to the\n`finalize_transaction` client method.\n\n```python\nwebauthn_response = \"{\\\"id\\\": \\\"fSmpQnC...\\\", ...}\";\n\nfrom hanko_sdk import json_serializer\n\nrequest = json_serializer.deserialize_string(webauthn_response, TransactionFinalizationRequest)\nresponse = hanko_client.finalize_transaction(request)\n```\n\n### Credential management\n\n```python\ncredential_id = \"AQohBypyLBrx8R_UO0cWQuu7hhRGv7bPRRGtbQLrjl...\"\n\n# Get all details of the specified credential.\ncredential = hanko_client.get_credential(credential_id)\n\n# Update the name of a credential.\nupdate_request = CredentialUpdateRequest(\"MySecurityKey\")\nupdated_credential = hanko_client.update_credential(credential_id, update_request)\n\n# Delete the specified credential.\nhanko_client.delete_credential(credential_id)\n\n# Search for credentials filtering by userId and paginating results.\nquery = CredentialQuery(\n    \"65a3eba6-22cb-4c35-9881-b21fac6acfd0\", # userId\n    15, # page size\n    1 # page\n)\n\ncredentials = hanko_client.list_credentials(query)\n```\n\n### Serializing and deserializing Hanko payloads and response\n\nAs the `HankoHttpClient` works with objects, you may need to serialize or deserialize Hanko payloads and responses. For that you can use the `json_serializer` module as follows:\n\n```python\n# Import the serializer module\nfrom hanko_sdk import json_serializer\n\n# Serialize a TransactionInitializationResponse\ntransaction_initialization_response = TransactionInitializationResponse()\n# ... code for generating the transaction initialization response\n\ntransaction_initialization_response_json = hanko_serializer.serialize(transaction_initialization_response)\n# ... process the transaction initialization response\n\n# Deserialize a TransactionFinalizationRequest\nwebauthn_response = \"{\\\"id\\\": \\\"fSmpQnC...\\\", ...}\";\n\ntransaction_finalization_request = json_serializer.deserialize_string(webauthn_response, TransactionFinalizationRequest)\nfinalization_response = hanko_client.finalize_transaction(transaction_finalization_request)\n```\n\n### Exception handling\n\n```python\ntry:\n    user_id = \"<YOUR_USER_ID>\"\n    username = \"<YOUR_USERNAME>\"\n    display_name = \"<YOUR_DISPLAY_NAME>\"\n\n    request = RegistrationInitializationRequest(\n        User(\n            user_id,\n            username,\n            display_name\n        )\n    )\n\n    response hanko_client.initialize_registration(request)\nexcept HankoApiException as hanko_api_exception:\n    print(hanko_api_exception)\n\n```\n\n### Enable debug logging\n\nThe `HankoHttpClient` accepts a [logging.Logger](https://docs.python.org/3/library/logging.html) instance as an optional constructor parameter, which if not none, will be used for debug logging.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/teamhanko/hanko-python",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hanko-sdk",
    "package_url": "https://pypi.org/project/hanko-sdk/",
    "platform": "",
    "project_url": "https://pypi.org/project/hanko-sdk/",
    "project_urls": {
      "Bug Tracker": "https://github.com/teamhanko/hanko-python/issues",
      "Homepage": "https://github.com/teamhanko/hanko-python"
    },
    "release_url": "https://pypi.org/project/hanko-sdk/1.0.1/",
    "requires_dist": [
      "requests",
      "python-dateutil",
      "enforce-typing"
    ],
    "requires_python": ">=3.7",
    "summary": "API client for communicating with the Hanko Authentication API, enabling WebAuthn authentication for your project",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11767719,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b481d562d1397249f4d495bcda81845154a69e1712f7c4d7012e277871585461",
          "md5": "36b2d3a712111484bc262cb1fcb362f9",
          "sha256": "6e14949b7304b14e577c0f0a6253fa0ca1f3f6d72607b3acbf962c9e8ee9207b"
        },
        "downloads": -1,
        "filename": "hanko_sdk-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36b2d3a712111484bc262cb1fcb362f9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 36611,
        "upload_time": "2021-10-19T09:58:09",
        "upload_time_iso_8601": "2021-10-19T09:58:09.020885Z",
        "url": "https://files.pythonhosted.org/packages/b4/81/d562d1397249f4d495bcda81845154a69e1712f7c4d7012e277871585461/hanko_sdk-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b20229584b6833d72c2231fe61e34be678fb014aa25844dbc9dcadf71b2e1846",
          "md5": "14b368602265d497cbf91712e2979c03",
          "sha256": "6a762f42f8e6dce09eeae335df1ab80fc724f8fa17df58036e87162957f6a59f"
        },
        "downloads": -1,
        "filename": "hanko-sdk-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "14b368602265d497cbf91712e2979c03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 26494,
        "upload_time": "2021-10-19T09:58:11",
        "upload_time_iso_8601": "2021-10-19T09:58:11.652780Z",
        "url": "https://files.pythonhosted.org/packages/b2/02/29584b6833d72c2231fe61e34be678fb014aa25844dbc9dcadf71b2e1846/hanko-sdk-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b481d562d1397249f4d495bcda81845154a69e1712f7c4d7012e277871585461",
        "md5": "36b2d3a712111484bc262cb1fcb362f9",
        "sha256": "6e14949b7304b14e577c0f0a6253fa0ca1f3f6d72607b3acbf962c9e8ee9207b"
      },
      "downloads": -1,
      "filename": "hanko_sdk-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "36b2d3a712111484bc262cb1fcb362f9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 36611,
      "upload_time": "2021-10-19T09:58:09",
      "upload_time_iso_8601": "2021-10-19T09:58:09.020885Z",
      "url": "https://files.pythonhosted.org/packages/b4/81/d562d1397249f4d495bcda81845154a69e1712f7c4d7012e277871585461/hanko_sdk-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b20229584b6833d72c2231fe61e34be678fb014aa25844dbc9dcadf71b2e1846",
        "md5": "14b368602265d497cbf91712e2979c03",
        "sha256": "6a762f42f8e6dce09eeae335df1ab80fc724f8fa17df58036e87162957f6a59f"
      },
      "downloads": -1,
      "filename": "hanko-sdk-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "14b368602265d497cbf91712e2979c03",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 26494,
      "upload_time": "2021-10-19T09:58:11",
      "upload_time_iso_8601": "2021-10-19T09:58:11.652780Z",
      "url": "https://files.pythonhosted.org/packages/b2/02/29584b6833d72c2231fe61e34be678fb014aa25844dbc9dcadf71b2e1846/hanko-sdk-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}