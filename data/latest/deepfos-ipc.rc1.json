{
  "info": {
    "author": "deepfos-python",
    "author_email": "'python@deepfos.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "## 介绍\r\n\r\n本项目提供Python进程间通信的基础功能，适用于多进程编程中一主多从的编程模型。\r\n\r\n项目中的Server可在主进程启动，Client在（多个）子进程中启动，客户端发送的消息能够被服务端接收，\r\n并且对于不同的消息类型，可以注册不同的回调逻辑。\r\n项目预置了一些常用通信协议，同时也提供简便的自定义通信协议的接口。\r\n\r\n进程间通信基于unix socket实现，因此不能在windows系统中运行。\r\n\r\n##  Quick Start\r\n\r\n1. 启动服务端\r\n\r\n```python\r\nfrom dip import Server\r\nimport asyncio\r\n\r\ndef cb(req, mtype, data):\r\n    print(data['hello'])\r\n\r\nserver = Server('/tmp/run.sock', callback=cb)\r\nasyncio.run(server.serve_forever())\r\n```\r\n\r\n2. 使用客户端发送消息\r\n```python\r\nfrom dip import Client\r\n\r\ncli = Client('/tmp/run.sock')\r\ncli.send_json({'hello': 'world'})\r\n```\r\n\r\n服务端将会输出\r\n```python\r\n>>> 'world'\r\n```\r\n\r\n## 自定义通信协议\r\n\r\n如果需要自定义进程间通信时传输字节流的格式，可以使用自定义`Protocol`\r\n\r\n```python\r\nimport typing\r\nfrom dip import Protocol\r\n\r\nclass NewProtocol(Protocol, mtype=b'N'):\r\n    @classmethod\r\n    def _decode(cls, buf: bytes) -> typing.Any:\r\n        pass\r\n    \r\n    @classmethod\r\n    def _encode(cls, data: typing.Any) -> bytes:\r\n        pass\r\n```\r\n\r\n自定义通信协议需要使用一个byte作为标识（mtype），并且必须实现`_decode`和`_encode`两个方法。其中:\r\n\r\n> 1. `_encode` 用于将python对象序列化为字节流\r\n> 2. `_decode` 用于将字节流反序列化为python对象\r\n\r\n两者一般互为逆操作，即对于python对象`obj`：\r\n\r\n```python\r\nobj == Protocol.decode(Protocol.encode(obj))\r\n```\r\n*注: 这并不是硬性规定，只是一种通常做法*\r\n\r\n下述是一个非常粗糙的固定字符串压缩协议的实现\r\n\r\n```python\r\nfrom dip import Protocol\r\nfrom dip import errors\r\n\r\nclass StringMappingProto(Protocol, mtype=b'S'):\r\n    MAP = {\r\n        'Hello World': b'h',\r\n    }\r\n    MAP_REV = {\r\n        v: k for k, v in MAP.items()\r\n    }\r\n    \r\n    @classmethod\r\n    def _decode(cls, buf: bytes) -> str:\r\n        data = cls.MAP_REV.get(buf)\r\n        if data is not None:\r\n            return data\r\n        else:\r\n            raise errors.ProtoDecodeError(f'Cannot decode byte: {buf!r}')\r\n\r\n    @classmethod\r\n    def _encode(cls, data: str) -> bytes:\r\n        compressed = cls.MAP.get(data)\r\n        if compressed is not None:\r\n            return compressed\r\n        else:\r\n            raise errors.ProtoEncodeError(f'Cannot encode string: {data!r}')\r\n```\r\n\r\n使用客户端发送消息:\r\n```python\r\ncli.send_msg('S', 'Hello World')\r\n```\r\n将会在服务端接收到消息 `Hello World`\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "deepfos-ipc",
    "package_url": "https://pypi.org/project/deepfos-ipc/",
    "platform": null,
    "project_url": "https://pypi.org/project/deepfos-ipc/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/deepfos-ipc/1.2.3/",
    "requires_dist": null,
    "requires_python": ">=3.8.3",
    "summary": "DeepFOS interprocess communication protocol",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17427225,
  "releases": {
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdeaec5c9f4c655c0995edabfb11c650a8e72fff8b82003cb74bc053feb11285",
          "md5": "6c1955693975cfc4169c5ce54c2c7b40",
          "sha256": "c055c84fb1f08100199d0105ad0c43a0550f2aa048264e69ffdf81dfff1ae1ab"
        },
        "downloads": -1,
        "filename": "deepfos-ipc-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6c1955693975cfc4169c5ce54c2c7b40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.3",
        "size": 25256,
        "upload_time": "2023-03-24T06:13:21",
        "upload_time_iso_8601": "2023-03-24T06:13:21.818663Z",
        "url": "https://files.pythonhosted.org/packages/cd/ea/ec5c9f4c655c0995edabfb11c650a8e72fff8b82003cb74bc053feb11285/deepfos-ipc-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cdeaec5c9f4c655c0995edabfb11c650a8e72fff8b82003cb74bc053feb11285",
        "md5": "6c1955693975cfc4169c5ce54c2c7b40",
        "sha256": "c055c84fb1f08100199d0105ad0c43a0550f2aa048264e69ffdf81dfff1ae1ab"
      },
      "downloads": -1,
      "filename": "deepfos-ipc-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "6c1955693975cfc4169c5ce54c2c7b40",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.3",
      "size": 25256,
      "upload_time": "2023-03-24T06:13:21",
      "upload_time_iso_8601": "2023-03-24T06:13:21.818663Z",
      "url": "https://files.pythonhosted.org/packages/cd/ea/ec5c9f4c655c0995edabfb11c650a8e72fff8b82003cb74bc053feb11285/deepfos-ipc-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}