{
  "info": {
    "author": "Vladislav-Martian",
    "author_email": "me.as.martian@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "# pyvorse\n## Simple essentials extension library of additions to vanilla python.\n\n---\n\n### Includes:\n- [core]:\n  - @attribute - converts any function with (arg: str) to attribute processor\n  - w. - attribute processor to faster writing short words, dont use it in speed is important. For obvious reasons, such a word notation is guaranteed to conform to python's naming conventions. w.var_name = \"var_name\"\n  - class: basis - extended base class\n  - @throws(*exceptions_cls) - marks function with classes, that can be thrown\n  - isthrows(exception_cls) - test function to be marked with `@throws()`\n  - trycall(func, *args, **kwargs) -> tuple[result, exception] - catches exceptions in function call\n  - @safe - converts function to its copy, but automatically called inside `trycall()`, and returns tuple[result, exception]\n  - Operators - enum for @calloperators\n  - @calloperators(op: Operators = Operators.All) - converts function to object, that calls with secon operand and returns result of it function on using operator, selected in argument. Operand still can be called as function.\n  - reprint() - operand-variation of print function, can be called like `reprint - w.text_to_show`. If prints only one value, value will be returned as result.\n  - @functor - allows function to be called with self object as first argument. to work with its fields as example.\n  - class: unibox - class, that locks value inside field `.inbox`, and contains dict for metadata, and can be stopped with `.stop()`, and be test for it by `.stopped`, or `.isStopped()`\n  - copyAllProps(dest, source) - function copies all attributes from source to dest, but ignores attributes with name starting with duble underscore '__'\n- [data]:\n  - //ALL_FROM_SUBMODULES//\n  - [deep]\n    - deep - Implements a simplified version of javascript objects based on the \"dict\" class. Can be created directly or through a class of similar objects that extends \"dci\". Prototypal inheritance. All methods to look deeper starts with word «deep», like `.deepget(name)`. More details on the wiki.\n    - dci - empty base deepclass, use its `.extend(new_prototype: deep, *names: str)` method, that returns new deepclass object\n    - class: DeepCalss - *ignore it, nothing more then python`s class of «dci»*\n  - [positioned]\n    - class: poslist - list, based on dict. Aloows to contain skips inside.\n  - [simple]\n    - class: loop - list, but handles index overload like list is lopped\n    - class: scope - dict, but allows get-access to items like access to attributes, and attribute-like set access, but onky for keys, already present in dict. Allows to find item by number of a key (it automatically sorted in dicts). Allows getting values dynamic/ Value is a function to be called with self dict as first argument. `.getDynamic(key)` \n    - class: stack - list, extended only, no changes. `.setvalidation(validator: Callable)` - validates values on pushing to the stack. `.push(value)` and `.leftpush(value)`, `.pushes(value)` and `.leftpushes(value)`. Raises ValueError, if loses validation. `.pull()` and `.leftpull(value)` - works like default `.pop()` but without arguments, for last and first element.\n  - [smart]\n    - class: smartlist - list, but with additional methods. find, select, filtered (iter), filter, any, all, astuole, asslist, asset, foreach, mapper, reducer, sort, sliced, slicedstart, slicedend. Working with predicates and callbacks. Details on wiki.\n    - class: handle - Primitive handlers container, simplest pipeline. Objects can be used as decorators, or called with callback passed. On each step calls callback with box on first argument.\n    - class: objectAddress - Create, object `adr = objectAddress()`, write your way `adr[\"Configs\"][\"chances\"][\"spawn\"](lambda pos: pos[SNEED])`, and use it on data structire `adr.use(CONFIGS_ROOT)`. It returns same for `CONFIGS_ROOT[\"Configs\"][\"chances\"][\"spawn\"][SNEED]`, but can be used nultiple times and dynamically.\n  - [spiders]\n    - class: spider(seeker: Callable, worker: Callable) - spiders can work with complex data structures. Seeker selexts new node, worker does something here. Seeker and worker will be called with (struct, dot, box). Use `box.stop()` to finish spiders`s walk. But worker will be called even if you stop it in seeker. \n  - [table]\n    - class: Table - contains headers and rows. use `table[index_column][index_row]` or better `table.getitem(row:int, col:int)` for extracting values. Use `adddefaultheader(self, name: str, align: int = 0, default=None)` to add new column. You can use `.getdynamic(row:int, col:int)` to work with dynamic values. functions, that will be called with (table: Table, row:int, col:int). For example - auto-numerations. Rendering method not presented! Inherit class, and add any render you want, markdown or html for example.\n    - class: Column - saves names and align for headers. Saves default values for tables.\n    - class: Row: poslist - class represents rows in the table\n- [mathematics] - Whole default math, but with 2 new functions. `trin(n)` for triangular number and count of diagonals in any shape. `hexcount(n)` - for calculatinc number of hexagonal cells in radius from one.\n- [pipeline] - simple tools for complex piplines\n  - //ALL_FROM_SUBMODULES//\n  - [datacell]\n    - class: dcell: core.unibox - just container for value in pipeline.\n  - [mains] - Default pipline functions containers:\n    - DictionaryPipeline\n    - ListPipeline\n  - [routers] - full pipeline conveyor build. Cotains static metadata. Uses pointer to select new function, and it can be method from pipeline container.\n    - class: router - Read on wiki! Use `r.launch(cell)` or `r(cell)`. All functions in pipeline will be called with `(cell, staticmeta)`, with staticmeta from router.\n- [tests]\n  - //ALL_FROM_SUBMODULES//\n  - [exprs]\n    - iterable(o) - allows to get iterator from object, and using `o` inside for..in cycle\n    - nextable(o) - allows to use `next(o)`\n    - forable(o) - deeper version of `iterable(o)` test.\n    - instanceof(o, *cls) - alternative notation to isinstance, like `instanceof(my_num, int, float, complex)`\n    - withable(o) - allows with.. as..\n    - awithable(o) - allows async with.. as..\n    - isinrange(_list, index) - test index for a range in the index\n  - [other]\n    - hashable(o) - can be used as key for dictionary or not.\n    - haskey(o, key) - like hasattr, but tests for `o[key]`\n    - isand(o, *t) - tests o to be all of *t\n    - isor(o, *t) - tests o to be any of *t\n    - eqand(o, *t) - tests o to be equal to all of *t\n    - eqor(o, *t) - tests o to be equal to any of *t\n    - haslen(o) - can be item used in `len(o)` or not.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Vladislav-Martian/pyverse",
    "keywords": "essentials,extension,simple,small",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyvorse",
    "package_url": "https://pypi.org/project/pyvorse/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyvorse/",
    "project_urls": {
      "Documentation": "https://github.com/Vladislav-Martian/pyverse/wiki",
      "Homepage": "https://github.com/Vladislav-Martian/pyverse",
      "Repository": "https://github.com/Vladislav-Martian/pyverse"
    },
    "release_url": "https://pypi.org/project/pyvorse/1.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.9,<4.0",
    "summary": "Simple essentials extension library of additions to vanilla python.",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11584916,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa8d69d1957c1f4f7442db6c009ac39735ea6cb5eba6cef47258eaaa7cbb1486",
          "md5": "0c0f45ca8a677df7c1da9cc29dfeec7e",
          "sha256": "ecbeded644b4c583a3528c3fbbb8449ac569ce3b5ad198078b0b1998d5ade143"
        },
        "downloads": -1,
        "filename": "pyvorse-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c0f45ca8a677df7c1da9cc29dfeec7e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 14782,
        "upload_time": "2021-09-29T08:42:49",
        "upload_time_iso_8601": "2021-09-29T08:42:49.784416Z",
        "url": "https://files.pythonhosted.org/packages/fa/8d/69d1957c1f4f7442db6c009ac39735ea6cb5eba6cef47258eaaa7cbb1486/pyvorse-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acbc656172f7566c6e08fc960b55c008547529cefdbec61941ca43752a949d50",
          "md5": "feff3b5490a5ef59916f0a74411de395",
          "sha256": "6934e10c4fade6beece6fd93a0ea4e2170787eb7835ed8140f8ee948de631144"
        },
        "downloads": -1,
        "filename": "pyvorse-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "feff3b5490a5ef59916f0a74411de395",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 27825,
        "upload_time": "2021-09-29T08:42:51",
        "upload_time_iso_8601": "2021-09-29T08:42:51.143532Z",
        "url": "https://files.pythonhosted.org/packages/ac/bc/656172f7566c6e08fc960b55c008547529cefdbec61941ca43752a949d50/pyvorse-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b86e1d89c0ed090c9f9b41aae35e5d5339656ac04fd9bba8d828cca224db105a",
          "md5": "0882a6c7210bd2a50e2ed38a200996a7",
          "sha256": "ff61f3f2b3d46047bd4287584184c1cb5dbf215076445b15f79d3f2f47f53480"
        },
        "downloads": -1,
        "filename": "pyvorse-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0882a6c7210bd2a50e2ed38a200996a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 17672,
        "upload_time": "2021-09-29T08:53:20",
        "upload_time_iso_8601": "2021-09-29T08:53:20.089716Z",
        "url": "https://files.pythonhosted.org/packages/b8/6e/1d89c0ed090c9f9b41aae35e5d5339656ac04fd9bba8d828cca224db105a/pyvorse-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4370110fe577c96fefde7b4d2537687f355bd7f94b365a999a25df43a8cdec4d",
          "md5": "d04fb231ebf144254abcdc2aaa2e9bca",
          "sha256": "ba32698b0f09f42d64e3db8b60a4c147c41d9a2d823e505acb310c25041aa8fa"
        },
        "downloads": -1,
        "filename": "pyvorse-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d04fb231ebf144254abcdc2aaa2e9bca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 31442,
        "upload_time": "2021-09-29T08:53:21",
        "upload_time_iso_8601": "2021-09-29T08:53:21.517008Z",
        "url": "https://files.pythonhosted.org/packages/43/70/110fe577c96fefde7b4d2537687f355bd7f94b365a999a25df43a8cdec4d/pyvorse-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5e76c459fe2a01716af9fe6c17cf52984ed6d25fd4dc4a07b3d8d37fafd6df0",
          "md5": "0c72bacdae0263eb139bc58f41a41bce",
          "sha256": "63e7a52cadcffe92201235f4e29036736b779240ea07155735dfa285e2a0fcb2"
        },
        "downloads": -1,
        "filename": "pyvorse-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c72bacdae0263eb139bc58f41a41bce",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 19535,
        "upload_time": "2021-09-29T18:46:14",
        "upload_time_iso_8601": "2021-09-29T18:46:14.445032Z",
        "url": "https://files.pythonhosted.org/packages/f5/e7/6c459fe2a01716af9fe6c17cf52984ed6d25fd4dc4a07b3d8d37fafd6df0/pyvorse-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36a86f8cd49c91f41cb405e419325ffc76d429fa367c5f52a19a7bb93574159e",
          "md5": "5eaa7b2e0c5f43be8da2564c42720704",
          "sha256": "86993e5709fa2c30c082b22662cba261416fa16731d7bc37626de6fb44781270"
        },
        "downloads": -1,
        "filename": "pyvorse-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5eaa7b2e0c5f43be8da2564c42720704",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 32626,
        "upload_time": "2021-09-29T18:46:15",
        "upload_time_iso_8601": "2021-09-29T18:46:15.435856Z",
        "url": "https://files.pythonhosted.org/packages/36/a8/6f8cd49c91f41cb405e419325ffc76d429fa367c5f52a19a7bb93574159e/pyvorse-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5e76c459fe2a01716af9fe6c17cf52984ed6d25fd4dc4a07b3d8d37fafd6df0",
        "md5": "0c72bacdae0263eb139bc58f41a41bce",
        "sha256": "63e7a52cadcffe92201235f4e29036736b779240ea07155735dfa285e2a0fcb2"
      },
      "downloads": -1,
      "filename": "pyvorse-1.0.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0c72bacdae0263eb139bc58f41a41bce",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 19535,
      "upload_time": "2021-09-29T18:46:14",
      "upload_time_iso_8601": "2021-09-29T18:46:14.445032Z",
      "url": "https://files.pythonhosted.org/packages/f5/e7/6c459fe2a01716af9fe6c17cf52984ed6d25fd4dc4a07b3d8d37fafd6df0/pyvorse-1.0.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36a86f8cd49c91f41cb405e419325ffc76d429fa367c5f52a19a7bb93574159e",
        "md5": "5eaa7b2e0c5f43be8da2564c42720704",
        "sha256": "86993e5709fa2c30c082b22662cba261416fa16731d7bc37626de6fb44781270"
      },
      "downloads": -1,
      "filename": "pyvorse-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "5eaa7b2e0c5f43be8da2564c42720704",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 32626,
      "upload_time": "2021-09-29T18:46:15",
      "upload_time_iso_8601": "2021-09-29T18:46:15.435856Z",
      "url": "https://files.pythonhosted.org/packages/36/a8/6f8cd49c91f41cb405e419325ffc76d429fa367c5f52a19a7bb93574159e/pyvorse-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}