{
  "info": {
    "author": "Symen Hovinga",
    "author_email": "itsfull@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "## algoxtools \n### A practical implementation of Donald Knuth's Algorithm X in Python using Numpy and Numba.\n#### Open sourced implementations of [Algorithm X](https://www.ocf.berkeley.edu/~jchu/publicportal/sudoku/0011047.pdf) in Python are plentiful.<br/>Justification of creating algoxtools is that although existing packages are compact and elegantly coded in object oriented Python<br/>A drawback is that for more complex exact cover problems processing the Python interpreted node objects used in the NP-complete algorithm becomes slow. Since use of classes in Python has a poor relation with source to source compilers such as Numba, resulting speed gains of running them through a compiler are discouraging.<br/> \nIn algoxtools the web of dr. Knuth's Dancing Links is embedded in a numpy array. Since numpy arrays are homogeneous by design and boast high performance libraries, algoxtools aims to come more close to machine level than existing Python solutions by densifying the actual process.<br/> \nThe array space used by algoxtools is 3d, arranged in rows, columns, the third dimension being used for substitutes of class attributes such as pointers and index values. Headers for rows and columns as well as meta data such as current row, column, level and solution at hand are all embedded in the array as well, making the variables as easy to pass such as a conventional object.<br/>\nAlgoxtools facilitates unlinking and relinking of rows and columns at once by eleborate indexing which avoids handling each individual node chain*.<br/>Moreover the indexing used shakes off the need for recursion, which allows for effortless returns to caller level from a single function.<br/>\nThe array organisation is sparse and uses 16 bit ints. If needed, int size can be easily adapted.<br/>Dynamic allocation of nodes could further optimize use of memory and squeeze out a bit of performance gain, but remains to be implemented.\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://gesis.mybinder.org/binder/v2/gh/Seemee/algoxtools/d7654818833f60dc637c7b233de0ad379506a080) [![Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://drive.google.com/file/d/1LhF6UHn5R6Z94SIRCXg0aXCgbkTtJ94Q/view?usp=sharing)\n## Installation\n```\npip install algoxtools\n```\n## Api example \nData taken from [Wikipedia](https://en.wikipedia.org/wiki/Knuth%27s_Algorithm_X) \n```\nimport algoxtools as axt\nimport numpy as np\nINDEX, META, SOLUTIONCOUNT,SOLUTION, VALUE = 0, -1, 0, 1, -1\ndt = np.int16\n\n# Initialize array\narray = axt.init( 6, 7 )\n\n# Assign nodes. Rows and cols start from 1!\naxt.annex_row( array, 1, np.array([ 1, 4, 7 ], dt ) )\naxt.annex_row( array, 2, np.array([ 1, 4 ], dt ) )\naxt.annex_row( array, 3, np.array([ 4, 5, 7 ], dt ) )\naxt.annex_row( array, 4, np.array([ 3, 5, 6 ], dt ) )\naxt.annex_row( array, 5, np.array([ 2, 3, 6, 7 ], dt ) )\naxt.annex_row( array, 6, np.array([ 2, 7 ], dt ) )\n\n# Get result\nii = array[ INDEX, INDEX ]\nprint('Solution:')\nwhile axt.exact_cover( array ):\n    print( array[ META, SOLUTION : ii[VALUE], VALUE ] )\n```\n```\nSolution:\n[2 4 6]\n```\nAbove example is enclosed in jupyter notebook format in the [examples folder](https://github.com/Seemee/algoxtools/tree/master/examples)\n\n## Quick api reference guide:\n### array = init( rows, columns )\nInitializes algoxtools array.<br/>\nInternally the number of columns is one higher than the given value and is used for indexing.<br/>\nThe internal number of rows is two higher than the given value and is used for indexing and storing meta data<br/>\nRows and columns values cannot exceed the np.int16 maximum value - 1 (+32,766)\n### Example:\n```\nimport algoxtools as axt\narray = axt.init( 6, 7 )\n```\n\n### annex_row( array, row_number, numpy.array( column 1, column 2, .. column n , numpy.int16) )\nAssigns linked nodes to the specified columns in a specific row.<br/> \nrow and col values should be higher than 1 and cannot exceed numpy.int16 maximum value - 1<br/>\nIn order to solve an exact cover, all rows must contain at least one node.<br/>\n### Example:\n```\naxt.annex_row( array, 4, np.array([ 3, 5, 6 ], np.int16 ) )\n```\n\n### bool exact_cover( array )\nThis is the main function allowing to flip through the exact covers, it returns a boolean True if an exact cover solution is reached and returns a boolean False if finished.\n### Example:\n```\nwhile axt.exact_cover( array )\n    print( array[ -1, 1 : array[ 0,0,-1 ], -1 ] )\n```\n\n## Miscellaneous functions used internally\n### bool isempty( array )\nReturns boolean True if an exact cover is reached else returns a False\n### Example:\n```\nif axt.isempty( array ):\n    ## Exact cover found\n    level = array[ 0, 0, -1 ]\n    print( array[ -1, 1:level, -1 ]\n```\n\n### bool mcr_cover( array )\nMinimum column rows cover (Or Most-constrained column rows cover) is a composite of the internal min_col() and cover() functions.<br/>\nInitialy it selects the first column with the least number of nodes and the first row in that column as an entry, after which it covers the nodes linked to that entry.<br/>\nIn subsequent calls mcr_cover selects a next row entry in that column and covers it until all rows are depleted.<br/>\nReturns a boolean False if no more rows are available, else returns a True<br/>\nBalanced by Uncover, this function can be used recurively as well as in a flat loop.<br/>\n### void uncover( array )\nUncover the nodes previously linked to current row and colum entry in the array (selected by mcr_cover) \n### Internal organisation of algoxtools array:\n```\n0,0 Index,Index------------- Column Indices -----------------------  0,-1\n\n   |     Node 1,1        Node 1,2        Node 1,Columns\n\n   |\t Node 2,1        Node 2,2        Node 2,Columns\n\n  Row \n\nindices     |               |                |\n\n   |        |               |                |\n\n   |\n\n   |\t Node Rows,1     Node Rows,2     Node Rows,Columns\n\n-1,0 --------------------------- Meta data ----------------------  -1, -1\n```\nNB The row and column indices are basically unlinked nodes keeping track of entry positions and node count\n### Specific array locations used in api's\n```\nLevel:                array[ 0, 0,-1 ]\nSolution count:       array[-1, 0, 0 ]\nSolution row numbers: array[-1, 1: level, -1 ]\n```\n### Node attributes\n```\nName    Description               Value\n---------------------------------------\nL       Left link pointer           0\nR       Right link pointer          1\nU       Up link pointer             2\nD       Down link pointer           3\nLINKED  Node or index link status   4\nVALUE   Stores miscellaneous values 5 (-1)\n```\n## Usage examples of internal functions:\n### 1. Recursive solver:\n```\nimport algoxtools as axt\nINDEX, META, SOLUTIONCOUNT, VALUE, SOLUTION = 0, -1, 0, -1, 1\nii = array[ INDEX, INDEX ]\ndef search(array): # Level up\n    ii[VALUE] += 1\n    if axt.isempty(array):\n        print( array[ META, SOLUTION : ii[VALUE], VALUE ] )\n    else:\n        while axt.mcr_cover(array):\n            search(array)\n            axt.uncover(array)\n    ii[VALUE] -= 1 # Level down\n\nsearch( array )\n```\n### 2. Flat loop solver:\nThis example of an exact_cover function is taken from the source code of algoxtools\nNote that this function can be compiled while still being able to hop in and out to interpreter level with results\n```\nimport algoxtools as axt\nfrom numba import njit \nINDEX, META, SOLUTIONCOUNT, VALUE, SOLUTION = 0, -1, 0, -1, 1\n@njit\ndef exact_cover( array ):\n    INDEX, VALUE, META, SOLUTIONCOUNT = 0, -1, -1, 0 \n    ii = array[ INDEX, INDEX ]\n    if ii[VALUE] == 0:\n        # First time:\n        # Reset solution counter\n        array[ META, SOLUTIONCOUNT, VALUE ] = 0\n        # Level up\n        ii[VALUE] += 1\n    else:\n        # Consecutive time, Level down\n        ii[VALUE] -= 1\n        if ii[VALUE] == 0:\n            return False\n        # Uncover preceding exact cover\n        uncover(array)\n    while True:\n        # If any left, get next row in column with minimum node count and cover it\n        if mcr_cover(array):\n            # Level up\n            ii[VALUE] += 1\n            # If exact cover found, hop in and out with result\n            if isempty(array):\n                return True\n        # Else backtrack\n        else:\n            # Level down\n            ii[VALUE] -= 1\n            if ii[VALUE] == 0:\n                # Exit loop\n                return False\n            # Uncover preceding trivial cover\n            uncover(array)\n\nii = array[ INDEX, INDEX ]\nwhile exact_cover( array ):\n    print( array[ META, SOLUTION : ii[VALUE], VALUE ] )\n```\n## &ast; Unlinking and relinking nodes:<br/>\nThe illustration below which is taken from [Wikipedia](https://en.wikipedia.org/wiki/Knuth%27s_Algorithm_X) shows how nodes are covered in algoxtools:<br/>\nIn the example the entry at column 1, row 1 is heuristically chosen to be covered.<br/>\n<img src=\"https://github.com/Seemee/algoxtools/blob/master/images/Cover%20example.PNG\" width=\"300\"><br/>\nSince the nodes at the red ones in Columns (1,4,7) and rows (A,B,C,E,F)  are not linked to any other outside nodes, they are unlinked just by row and column index without unlinking each individual node.<br/>\n<img src=\"https://github.com/Seemee/algoxtools/blob/master/images/Loose%20nodes%20example.png\" width=\"300\"><br/> \nIn the example the remaining ones in the red boxes, (C5,E2,E3,E6 and F2) are what I call 'loose nodes'.<br/>\nThey are situated in an unlinked row but not in an unlinked column and are possibly attached to external nodes. So, unlike the other nodes which are left untouched, loose nodes are handled individually ie. unlinked and relinked one by one.<br/>\nNB common in most other implementations of Algorithm X only the down link of the upper node and the up link of the down nodes are changed, right and left links do not need to be modified since the row being made inactive they are not externally referenced.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Seemee/algoxtools",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "algoxtools",
    "package_url": "https://pypi.org/project/algoxtools/",
    "platform": "",
    "project_url": "https://pypi.org/project/algoxtools/",
    "project_urls": {
      "Homepage": "https://github.com/Seemee/algoxtools"
    },
    "release_url": "https://pypi.org/project/algoxtools/0.1.5/",
    "requires_dist": [
      "numpy",
      "numba"
    ],
    "requires_python": "",
    "summary": "A Fast Algorithm X implementation in Python using Numpy and Numba",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7214758,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f60bfe80f4d50b124087aec40189069e68e6a2a97045b6385a1c1958e876358",
          "md5": "bad1fc165430d769f43ac6eaa8882e8a",
          "sha256": "091bb33c05637897e74fd0ef01e35bd2a688dc1f5eab32f14640c5ee8830883e"
        },
        "downloads": -1,
        "filename": "algoxtools-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bad1fc165430d769f43ac6eaa8882e8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4671,
        "upload_time": "2020-05-06T17:12:54",
        "upload_time_iso_8601": "2020-05-06T17:12:54.340792Z",
        "url": "https://files.pythonhosted.org/packages/7f/60/bfe80f4d50b124087aec40189069e68e6a2a97045b6385a1c1958e876358/algoxtools-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "912b140fdc4ebf3807b2a4fce52a14e31c15542d10d068dad9b9216d0a09b713",
          "md5": "f6032e651bb3561edee7cf19b760b673",
          "sha256": "6416ee07833d1f97f0fd50d2cb724a8d92199b206a3ff158551d8c8efe43b4d8"
        },
        "downloads": -1,
        "filename": "algoxtools-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f6032e651bb3561edee7cf19b760b673",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3504,
        "upload_time": "2020-05-06T17:12:56",
        "upload_time_iso_8601": "2020-05-06T17:12:56.516971Z",
        "url": "https://files.pythonhosted.org/packages/91/2b/140fdc4ebf3807b2a4fce52a14e31c15542d10d068dad9b9216d0a09b713/algoxtools-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "174b893c5881c9ca6e2a566d9a81371584e29c77fde581e5212e9bd9e372aba5",
          "md5": "a1dffa30beba47434126e184b4267c44",
          "sha256": "5ee93c5853c25a970f63aed668e6e34fbdb9699cd12e28328824655b13804f8b"
        },
        "downloads": -1,
        "filename": "algoxtools-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1dffa30beba47434126e184b4267c44",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4920,
        "upload_time": "2020-05-06T20:01:23",
        "upload_time_iso_8601": "2020-05-06T20:01:23.831349Z",
        "url": "https://files.pythonhosted.org/packages/17/4b/893c5881c9ca6e2a566d9a81371584e29c77fde581e5212e9bd9e372aba5/algoxtools-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a7cf753315db56cd93dc955b6f2346646d9d0e632c630e93047a49e88cb6ee0",
          "md5": "aa1772c7378c49797030503c7a32b931",
          "sha256": "fa900de17b0367df19d68c8365fa32ff7b788f99c0227ce4ac5d8ba3d60ae8e5"
        },
        "downloads": -1,
        "filename": "algoxtools-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aa1772c7378c49797030503c7a32b931",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 4855,
        "upload_time": "2020-05-07T04:07:30",
        "upload_time_iso_8601": "2020-05-07T04:07:30.983275Z",
        "url": "https://files.pythonhosted.org/packages/3a/7c/f753315db56cd93dc955b6f2346646d9d0e632c630e93047a49e88cb6ee0/algoxtools-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d43b21355bb22be5ca0bdaedeec730d4f95820291e75e6d355ed32c08e22f5b",
          "md5": "5298f9f2bef8c0a72cc01b9b5bd1d0ca",
          "sha256": "c0bf98fcd53e9234684573a39e30e422dc13bdf489410465063a2d51ddb7cec8"
        },
        "downloads": -1,
        "filename": "algoxtools-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5298f9f2bef8c0a72cc01b9b5bd1d0ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7816,
        "upload_time": "2020-05-09T06:09:38",
        "upload_time_iso_8601": "2020-05-09T06:09:38.386119Z",
        "url": "https://files.pythonhosted.org/packages/9d/43/b21355bb22be5ca0bdaedeec730d4f95820291e75e6d355ed32c08e22f5b/algoxtools-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f675e48b7fd7334dc546a9e077e66fbea3180ea33659769076f8442a211a8184",
          "md5": "03905f05e2d05a66d5c08ad591f1dbbf",
          "sha256": "bcc54d846858fbafa837257c7049ca9137a88b0be53cbb102f5b18719365695a"
        },
        "downloads": -1,
        "filename": "algoxtools-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03905f05e2d05a66d5c08ad591f1dbbf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8438,
        "upload_time": "2020-05-11T11:52:55",
        "upload_time_iso_8601": "2020-05-11T11:52:55.289850Z",
        "url": "https://files.pythonhosted.org/packages/f6/75/e48b7fd7334dc546a9e077e66fbea3180ea33659769076f8442a211a8184/algoxtools-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f675e48b7fd7334dc546a9e077e66fbea3180ea33659769076f8442a211a8184",
        "md5": "03905f05e2d05a66d5c08ad591f1dbbf",
        "sha256": "bcc54d846858fbafa837257c7049ca9137a88b0be53cbb102f5b18719365695a"
      },
      "downloads": -1,
      "filename": "algoxtools-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "03905f05e2d05a66d5c08ad591f1dbbf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8438,
      "upload_time": "2020-05-11T11:52:55",
      "upload_time_iso_8601": "2020-05-11T11:52:55.289850Z",
      "url": "https://files.pythonhosted.org/packages/f6/75/e48b7fd7334dc546a9e077e66fbea3180ea33659769076f8442a211a8184/algoxtools-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}