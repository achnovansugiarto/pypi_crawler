{
  "info": {
    "author": "Katherine Crowson",
    "author_email": "crowsonkb@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "# mdmm\n\n`mdmm` implements the Modified Differential Multiplier Method for PyTorch. It was proposed in Platt and Barr (1988), \"[Constrained Differential Optimization](https://papers.nips.cc/paper/1987/file/a87ff679a2f3e71d9181a67b7542122c-Paper.pdf)\". The MDMM minimizes a primary loss function subject to equality, inequality, and bound constraints on arbitrarily many secondary functions of your problem's parameters. It can be used for non-convex problems and problems with stochastic loss functions. It requires only one evaluation of the Lagrangian and its gradient per iteration, the same complexity as SGD.\n\nHere is a plot of the training loss and layer norms of `mdmm_demo_mnist.py`. Each of its three layers has an equality constraint that the mean absolute value of its weights be 1:\n\n<img src=\"https://raw.githubusercontent.com/crowsonkb/mdmm/master/doc_images/mnist_layer_norms.png\" width=\"561\" height=\"423\">\n\n## Installation\n\n`mdmm` is [on PyPI](https://pypi.org/project/mdmm/) and can be installed with:\n\n```sh\npip install mdmm\n```\n\n## Basic usage\n\nCreating a constraint instance, an `MDMM` instance, and the optimizer for the Lagrangian:\n\n```python\nimport mdmm\n\nconstraint = mdmm.EqConstraint(fn_of_params, 1)\nmdmm_module = mdmm.MDMM([constraint])\nopt = mdmm_module.make_optimizer(model.parameters(), lr=2e-3)\n```\n\nThe first argument to the constraint constructor should be a differentiable function that takes no arguments and returns a zero-dimensional PyTorch `Tensor` (a single value).\n\nMDMM constraints introduce extra parameters (Lagrange multipliers and slack variables) which must be included in the optimizer. Each `MaxConstraint` and `MinConstraint` introduces two parameters each, while all of the other constraint types introduce one. `make_optimizer()` accepts an optional optimizer factory keyword argument, `optimizer`, which can be set to a `torch.optim` class; use `functools.partial()` on the class to set the optimizer's arguments to non-default values. The default optimizer type is Adamax.\n\nInside your training loop, do:\n\n```python\noutputs = model(inputs)\nloss = loss_fn(outputs, targets)\nmdmm_return = mdmm_module(loss)\nopt.zero_grad()\nmdmm_return.value.backward()\nopt.step()\n```\n\nWhen an `MDMM` instance is called with the value of the primary loss function, it evaluates the functions originally passed to the constraints' constructors and returns a type containing a value augmented with terms involving the constraint functions. Calling `backward()` on this value will propagate gradients into your parameters and the parameters internal to the constraints. The type `MDMM` returns also contains a list of the constraint function values and a list of the computed infeasibilities (equal to 0 when the constraint is satisfied).\n\nSince the constraints contain parameters internal to them, you must save and load the state dict of the `MDMM` instance (this contains all of the constraint buffers and parameters in the correct order) as well as the model and optimizer state dicts in order to be able to resume training from a checkpoint.\n\n## Constraint details\n\nThere are six supported constraint types:\n\n* `EqConstraint(fn, value)` represents an equality constraint on `fn`.\n\n* `MaxConstraint(fn, max)` represents a maximum inequality constraint on `fn` which uses a slack variable.\n\n* `MaxConstraintHard(fn, max)` represents a maximum inequality constraint on `fn` without a slack variable.\n\n* `MinConstraint(fn, min)` represents a minimum inequality constraint on `fn` which uses a slack variable.\n\n* `MinConstraintHard(fn, min)` represents a minimum inequality constraint on `fn` without a slack variable.\n\n* `BoundConstraintHard(fn, min, max)` represents a bound constraint on `fn`. It does not use slack variables.\n\nAll MDMM constraints take a scale factor (`scale`) and a damping strength (`damping`) as optional arguments. The scale factor allows you to scale the computed infeasibility relative to the primary loss function's value. It may be needed if the magnitude of the primary loss function is very large or small compared to the constraint functions' magnitudes. The MDMM augments the Lagrangian with quadratic damping terms that help reduce oscillations in the infeasibilities. The damping strength can be manually decreased if there are no oscillations observed and increased if there are oscillations. The defaults for `scale` and `damping` are both 1.\n\n## A warning about lambda expressions\n\nThe following code is incorrect:\n\n```python\nconstraints = []\nfor layer in model:\n    if hasattr(layer, 'weight'):\n        constraints.append(mdmm.EqConstraint(lambda: layer.weight.abs.mean(), 1))\n```\n\n`layer` is a free variable inside the lambda expression and will be resolved at call time to the *current* value of `layer` in the enclosing code block, which is updated by the loop, so all of the constraints will refer to the last layer! A correct version is:\n\n```python\nfrom functools import partial\n\nconstraints = []\nfor layer in model:\n    if hasattr(layer, 'weight'):\n        fn = partial(lambda x: x.weight.abs().mean(), layer)\n        constraints.append(mdmm.EqConstraint(fn, 1))\n```\n\n`partial()` captures the value of the `layer` argument inside the callable it returns, so `fn` acts on the layer it was created with.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/crowsonkb/mdmm",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mdmm",
    "package_url": "https://pypi.org/project/mdmm/",
    "platform": "",
    "project_url": "https://pypi.org/project/mdmm/",
    "project_urls": {
      "Homepage": "https://github.com/crowsonkb/mdmm"
    },
    "release_url": "https://pypi.org/project/mdmm/0.1.3/",
    "requires_dist": [
      "torch (>=1.7.1)",
      "dataclasses (>=0.8) ; python_version < \"3.7\""
    ],
    "requires_python": ">=3.6",
    "summary": "The Modified Differential Multiplier Method (MDMM) for PyTorch.",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9301246,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb354e2cefb33375d435d46b9d48df7112d85d18d1f158a682e4cdcd6f5f7ea7",
          "md5": "b2eefc061501194c2b63dbeb6901ae79",
          "sha256": "1cb93c8ce846ea7b2d20c065f8b5a02390c2b94a03d8b190ffa6adcb32e8f1f5"
        },
        "downloads": -1,
        "filename": "mdmm-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2eefc061501194c2b63dbeb6901ae79",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5582,
        "upload_time": "2021-02-02T17:53:42",
        "upload_time_iso_8601": "2021-02-02T17:53:42.488479Z",
        "url": "https://files.pythonhosted.org/packages/cb/35/4e2cefb33375d435d46b9d48df7112d85d18d1f158a682e4cdcd6f5f7ea7/mdmm-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ac36f22aca90d15c26d9ddb31e443c61c8a6b1424f1f4b792734b2f30b889b5",
          "md5": "ae6cbe0eb5e405c0bfec46f997adbe80",
          "sha256": "61009ff8f7d95d6ced9fdde75e61f536d106f8e8db95c29b5131760834a79ae1"
        },
        "downloads": -1,
        "filename": "mdmm-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ae6cbe0eb5e405c0bfec46f997adbe80",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7350,
        "upload_time": "2021-02-02T17:53:43",
        "upload_time_iso_8601": "2021-02-02T17:53:43.939027Z",
        "url": "https://files.pythonhosted.org/packages/6a/c3/6f22aca90d15c26d9ddb31e443c61c8a6b1424f1f4b792734b2f30b889b5/mdmm-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0180398972a8f42ce7dd782213983b3dea9192df72beeef2414ca66450359936",
          "md5": "644047e14c3c856d8178bf8895787776",
          "sha256": "ba718192bf4f741c9b17cf1f0c034e156a372ddee9e1f898a51878c78d31973e"
        },
        "downloads": -1,
        "filename": "mdmm-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "644047e14c3c856d8178bf8895787776",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5609,
        "upload_time": "2021-02-02T17:56:29",
        "upload_time_iso_8601": "2021-02-02T17:56:29.862063Z",
        "url": "https://files.pythonhosted.org/packages/01/80/398972a8f42ce7dd782213983b3dea9192df72beeef2414ca66450359936/mdmm-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31ab99929d340bf6497a5c087de32f6fe79bbf8e8bc1a5b9178c8c25ddfaa9a9",
          "md5": "8479acf9d531110e437ffe894c30aacb",
          "sha256": "b7bcbda29ff72e36539f55e3db6eac6adea8f409bf5f1401c46d4992eb8a62cb"
        },
        "downloads": -1,
        "filename": "mdmm-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8479acf9d531110e437ffe894c30aacb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7369,
        "upload_time": "2021-02-02T17:56:31",
        "upload_time_iso_8601": "2021-02-02T17:56:31.268271Z",
        "url": "https://files.pythonhosted.org/packages/31/ab/99929d340bf6497a5c087de32f6fe79bbf8e8bc1a5b9178c8c25ddfaa9a9/mdmm-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f4e4070ea572518599ff3047ec165e78669046502a728294d582808b4c52b98",
          "md5": "e99e4877c059b67377828894a102f1dc",
          "sha256": "c74a4839895bbc6c658ed6fdda705ad0f212c3bb5bd9e1c2e69f654bf459bd65"
        },
        "downloads": -1,
        "filename": "mdmm-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e99e4877c059b67377828894a102f1dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5671,
        "upload_time": "2021-02-02T18:15:38",
        "upload_time_iso_8601": "2021-02-02T18:15:38.526130Z",
        "url": "https://files.pythonhosted.org/packages/4f/4e/4070ea572518599ff3047ec165e78669046502a728294d582808b4c52b98/mdmm-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b43d5a14208a0e2bb356afd17be53deda5b13ae2aec60991c0be68b6276445fb",
          "md5": "8e2ac2f8a74c926d968dc7fac6a62cb9",
          "sha256": "599ac8ec8e24113bd41bff6f39d84aeb356691d1d0c7dd5fd560d5a316f014a0"
        },
        "downloads": -1,
        "filename": "mdmm-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8e2ac2f8a74c926d968dc7fac6a62cb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7443,
        "upload_time": "2021-02-02T18:15:39",
        "upload_time_iso_8601": "2021-02-02T18:15:39.585483Z",
        "url": "https://files.pythonhosted.org/packages/b4/3d/5a14208a0e2bb356afd17be53deda5b13ae2aec60991c0be68b6276445fb/mdmm-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e23ae2103e1ba804fbcab4ec95a0e1eb98e906bde6a0684ef48960a58813e07",
          "md5": "3589c333b6c7a8813522f256897b6226",
          "sha256": "0fc40c82fb0553ddc4c3b93f085b0273338b1087f8db120546f5b16e0f7d0ac0"
        },
        "downloads": -1,
        "filename": "mdmm-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3589c333b6c7a8813522f256897b6226",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5734,
        "upload_time": "2021-02-02T23:28:56",
        "upload_time_iso_8601": "2021-02-02T23:28:56.570490Z",
        "url": "https://files.pythonhosted.org/packages/3e/23/ae2103e1ba804fbcab4ec95a0e1eb98e906bde6a0684ef48960a58813e07/mdmm-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46982d58464d1bd2f4e38010b7812dcb43f31c02ebad2751e2cd51bdc7fb17fa",
          "md5": "ae73f8fce3c581b6efe5ef64250404bd",
          "sha256": "9c2b8475db7e0dd111e175157c65c338c79bde3274f73e180b6bca930696727b"
        },
        "downloads": -1,
        "filename": "mdmm-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ae73f8fce3c581b6efe5ef64250404bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7537,
        "upload_time": "2021-02-02T23:28:58",
        "upload_time_iso_8601": "2021-02-02T23:28:58.071010Z",
        "url": "https://files.pythonhosted.org/packages/46/98/2d58464d1bd2f4e38010b7812dcb43f31c02ebad2751e2cd51bdc7fb17fa/mdmm-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e23ae2103e1ba804fbcab4ec95a0e1eb98e906bde6a0684ef48960a58813e07",
        "md5": "3589c333b6c7a8813522f256897b6226",
        "sha256": "0fc40c82fb0553ddc4c3b93f085b0273338b1087f8db120546f5b16e0f7d0ac0"
      },
      "downloads": -1,
      "filename": "mdmm-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3589c333b6c7a8813522f256897b6226",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5734,
      "upload_time": "2021-02-02T23:28:56",
      "upload_time_iso_8601": "2021-02-02T23:28:56.570490Z",
      "url": "https://files.pythonhosted.org/packages/3e/23/ae2103e1ba804fbcab4ec95a0e1eb98e906bde6a0684ef48960a58813e07/mdmm-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "46982d58464d1bd2f4e38010b7812dcb43f31c02ebad2751e2cd51bdc7fb17fa",
        "md5": "ae73f8fce3c581b6efe5ef64250404bd",
        "sha256": "9c2b8475db7e0dd111e175157c65c338c79bde3274f73e180b6bca930696727b"
      },
      "downloads": -1,
      "filename": "mdmm-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "ae73f8fce3c581b6efe5ef64250404bd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7537,
      "upload_time": "2021-02-02T23:28:58",
      "upload_time_iso_8601": "2021-02-02T23:28:58.071010Z",
      "url": "https://files.pythonhosted.org/packages/46/98/2d58464d1bd2f4e38010b7812dcb43f31c02ebad2751e2cd51bdc7fb17fa/mdmm-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}