{
  "info": {
    "author": "Sebastian Oehms",
    "author_email": "seb.oehms@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C++",
      "Programming Language :: Cython",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "Khoca is a packaging of Lukas Lewark's Khovanov homology calculator\n[khoca](https://github.com/LLewark/khoca/)  for easy installation in\n[sage](http://www.sagemath.org/).\n\nFrom the original page:\n\n# README for Khoca, a knot homology calculator\n\nThe same text as in this README file is available (with illustrations) at\nhttp://lewark.de/lukas/khoca.html\n\nKhoca is computer program to calculate sl(N)-homology of knots. The program has\nbeen written for joint projects with Andrew Lobb such as [3, 4]. The paper [3]\nalso contains a description of the algorithm used by khoca. The main innovation\nis to use Krasner's calculation of the sl(N)-homology of the basic two-crossing\ntangle [2] for calculations of the homology of bipartite knots.\n\nKhoca calculates the following:\n\n* Khovanov sl(2)-homology of arbitrary links, given as a braid or in PD code.\n* Khovanov-Rozansky sl(N)-homology with N > 2 of bipartite knots, given by a\n  certain encoding of a matched diagram of the knot (see [3] and section\n  \"Encoding of matched diagrams\" below).\n* Homology over the integers, the rationals or a prime field.\n* Either equivariant homology, or homology with an arbitrary fixed potential.\n* All pages of the spectral sequence of filtered homology over a field.\n* Reduced and unreduced homology.\n* Homology of sums and mirror images of knots.\n\nYou are encouraged to contact me with any kind of questions or comments\nregarding khoca. If you are using khoca for a project or publication, please\ncite this web page, or the paper [3].\n\n## Installation\n\nBinaries for Linux are available for download from \nhttp://lewark.de/lukas/khoca.html\nThey should run on any Linux installation that has python3.6. Binaries for\nWindows or Mac are not available at the moment.\n\nThe source code, including instructions on how to compile it, is available at\nthe GitHub repository khoca:\nhttps://github.com/LLewark/khoca\n\nTo run Khoca in Docker type:\n\n```bash\ndocker run -it soehms/khoca:latest\n```\n\nIts download size is 162 MB and it will need 516 MB of disk space on your\ndevice. To create a new (resp. locally own) Docker image cd to the khoca\ndirectory type\n\n```bash\ndocker build -f Dockerfile --tag khoca:<your_tag> .\n```\n\nIf your machine has an older CPU it can happen that you get *Illegal Instruction*\nerrors. In that case you better should use the image `soehms/khoca:old_cpu`.\n\n\n## Usage\n\nTo use the program, run khoca.py (a python3 script) from the command line.\nkhoca.py takes three arguments:\n\n1. The coefficient ring; `0` for integers, `1` for rationals, a prime `p` for the\ncorresponding finite field.\n\n2. A sequence of N integers `a_0, ..., a_{N-1}` separated by a non-digit\ncharacter, defining the Frobenius algebra `F[X]/(X^N + a_{N-1}X^{N-1} + ... +\na_0)`.  Alternatively, `e` followed by a number `N` for equivariant computation\nover `sl(N)`. For example, `-1.0.0` gives the Frobenius algebra `F[X]/(X3 - 1)`.\n\n3. A root of the polynomial given in 2. for the calculation of reduced homology\n(for the dependence of reduced homology on a root, see [3]).  For example, to\nget the standard graded reduced homology, use 0 as root. If you are not\ninterested in reduced homology, it does not matter what root you chose (and\nkhoca does not check that the number is actually a root).\n\nThe option `-p` will show progress bars, `-v` will give more verbose\nnon-mathematical information, and `-h` will print a short help text. Each\nargument after the first three arguments, can be one of the following.\n\n1. `BraidX` calculates homology of a link given as closure of the braid `X`,\nformatted as in knotscape (`a` = first Artin generator, `A` = its inverse, `b` =\nsecond Artin generator, etc.). This works only for `sl(2)` homology, otherwise\noutput is nonsensical.\n\n2. `PdX` calculates homology of a link given in PD notation (as e.g. given on\nKnotInfo). Again, this works only for `sl(2)` homology, otherwise output is\nnonsensical.\n\n3. `GaussX` calculates homology of a bipartite knot given as a matched diagram,\nfollowing the convention explained in the section below. This works for `sl(N)`\nhomology for all `N`.\n\n4. `MirrorX` takes the dual of the result at spot `X`.\n\n5. `SumXY` computes the homology of the connected sum of the results saved at\nspots `X` and `Y` (numbers separated by a non-digit character).\n\n6. `CalcX` outputs the result saved at spot `X`. If you forget this command, the\nprogram will have no output.\n\nThe program keeps a stack of computed homologies, enumerated 0,1,2... . Each of\nthe commands 1 - 5 puts a new homology on that stack, whereas the command 6.\nprints the homology at a certain spot. This is mainly useful to compute\nhomology of sums of knots.\n\nHere are some examples:\n\n```bash\n./khoca.py 0 0.0 0 braidaBaB calc0\n```\n\ncalculates the classical `sl(2)` Khovanov homology (both reduced and unreduced)\nof the closure of the braid `aBaB` (knotscape notation), i.e. the figure-eight\nknot.\n\n\n```bash\n./khoca.py 0 e2 0 pd[[4,2,5,1],[8,6,1,5],[6,3,7,4],[2,7,3,8]] calc0\n```\n\ncalculates integral equivariant `sl(2)` homology of the figure-eight knot.\n\n\n```bash\n./khoca.py 7 0.-1 0 braidabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef\ncalc0 -p\n```\n\ncalculates Khovanov homology of the `(7,8)`-torus knot over `F7` with perturbed\npotential, displaying progress bars. This calculation takes roughly two\nminutes, and shows that the spectral sequence does not collapse on the second\npage, refuting the knight-move conjecture over finite fields (cf. [1]).\n\n\n```bash\n./converters/montesinos.py [1/5,1/3,-1/2]\n```\n\noutputs `[12,4,16,10,15,9,14,13]`, the code for a matched diagram of the\n`(5,3,-2)`-pretzel knot, aka the `(3,5)`-torus knot, aka `10_{124}`. So\n\n```bash\n./khoca.py 1 1.0.0.0.0 0 gauss[12,4,16,10,15,9,14,13] calc0 calculates\n```\n\nrational `sl(5)` homology and the corresponding Rasmussen invariant of the `(3,5)`\ntorus knot.\n\n\n```bash\n./khoca.py 1 1.0 0 braidaaa dual0 sum0+1 braidaBaB sum2+3 calc4\n```\n\ncalculates `sl(2)` homology of the sum of the trefoil, its mirror image and a figure-8-knot.\n\n\n# Encoding of matched diagrams\n\nThis section describes how to encode a matched knot diagram, i.e. a diagram\nthat consists of `n` copies of the basic 2-crossing tangle. Resolving each basic\ntangle into two intervals and a chord results in a single circle with n\nnon-intersecting (red) chords, which may be on either side of the circle.\nEnumerate the `2n` chord endpoints by walking around the circle. If a chord\nconnects the points `i` and `j`, let `f(i) = j`. Write down the list `f(1), f(2), ...,\nf(2n)` omitting `f(i)` if `f(i) < i`. Moreover, make the list entries signed, and\nlet the sign reflect the sign of the two crossings of the corresponding\n2-crossing tangle. This list of `n` non-zero integers uniquely determines the\nmatched diagram. As an example, the standard diagram of `6_1` is matched and\nencoded as `[-4,6,5]`.\n\n\"Half\" of Montesinos knots are bipartite [3]. You may use the python3 script\n`./converters/montesinos.py` to obtain the encoding of a matched diagram of\nMontesinos knots.\n\n# References\n\n[1] Bar-Natan: Fast Khovanov Homology Computations, Journal of Knot Theory and\nits Ramifications 16 (2007), no.3, pp. 243-255, arXiv:math/0606318, MR2320156.\n\n[2] Daniel Krasner: A computation in Khovanov-Rozansky Homology, Fundamenta\nMathematicae 203 (2009), pp. 75-95, arXiv:0801.4018, MR2491784.\n\n[3] Lukas Lewark and Andrew Lobb: New Quantum Obstructions to Sliceness,\nProceedings of the London Mathematical Society 112 (2016), no. 1, pp. 81-114,\narXiv:1501.07138, MR3458146.\n\n[4] Lukas Lewark and Andrew Lobb: Upsilon-like concordance invariants from\nsl(n) knot cohomology, arXiv:1707.00891.\n\n\nLukas Lewark, 2018",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/soehms/khoca/",
    "keywords": "Knot theory,Khovanov homology",
    "license": "GPLv2+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "khoca",
    "package_url": "https://pypi.org/project/khoca/",
    "platform": "",
    "project_url": "https://pypi.org/project/khoca/",
    "project_urls": {
      "Homepage": "https://github.com/soehms/khoca/"
    },
    "release_url": "https://pypi.org/project/khoca/0.4.dev7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Khoca as pip installable package",
    "version": "0.4.dev7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11843555,
  "releases": {
    "0.4.dev7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ead080506a73cf6644b53bab7fa6addaecad68b5cc893035e933832b767f1dc",
          "md5": "b7735e3bb0181a86f19ca5000fae30ee",
          "sha256": "021d097e00ee9cf57e26354fcd81483fbff73dfd8a55a3f8d940fb2d210cd2f4"
        },
        "downloads": -1,
        "filename": "khoca-0.4.dev7.tar.gz",
        "has_sig": false,
        "md5_digest": "b7735e3bb0181a86f19ca5000fae30ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 152043,
        "upload_time": "2021-10-27T06:34:21",
        "upload_time_iso_8601": "2021-10-27T06:34:21.504217Z",
        "url": "https://files.pythonhosted.org/packages/8e/ad/080506a73cf6644b53bab7fa6addaecad68b5cc893035e933832b767f1dc/khoca-0.4.dev7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ead080506a73cf6644b53bab7fa6addaecad68b5cc893035e933832b767f1dc",
        "md5": "b7735e3bb0181a86f19ca5000fae30ee",
        "sha256": "021d097e00ee9cf57e26354fcd81483fbff73dfd8a55a3f8d940fb2d210cd2f4"
      },
      "downloads": -1,
      "filename": "khoca-0.4.dev7.tar.gz",
      "has_sig": false,
      "md5_digest": "b7735e3bb0181a86f19ca5000fae30ee",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 152043,
      "upload_time": "2021-10-27T06:34:21",
      "upload_time_iso_8601": "2021-10-27T06:34:21.504217Z",
      "url": "https://files.pythonhosted.org/packages/8e/ad/080506a73cf6644b53bab7fa6addaecad68b5cc893035e933832b767f1dc/khoca-0.4.dev7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}