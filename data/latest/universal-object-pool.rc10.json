{
  "info": {
    "author": "bfzs",
    "author_email": "ydf0509@sohu.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "## pip install universal_object_pool\r\n\r\n此包能够将一切任意类型的python对象池化，是万能池，适用范围远大于单一用途的mysql连接池 http连接池等。\r\n\r\n使用这个通用对象池框架，自带实现了4个对象池例子。可以直接开箱用这四个对象池，也可以作为例子学习对象池用法。\r\n\r\ncontrib 文件夹自带演示了4个封装，包括http pymsql webdriver paramiko(操作linux的python包)的池化。\r\n\r\n<pre style=\"color: darkgreen;font-size: medium\">\r\npython 通用对象池，socket连接池、mysql连接池归根结底都是对象池。\r\nmysql连接池就是pymsql.Connection类型的对象池，一切皆对象。\r\n只是那些很常用的功能的包都有相关的池库，池都是为他们特定的功能定制服务的，不够通用。\r\n\r\n编码中很多创建代价大的对象（耗时耗cpu），但是他们的核心操作方法只能是被一个线程占用。\r\n\r\n例如mysql，你用同一个conn在不同线程同时去高并发去执行插入修改删除操作就会报错，而且就算包不自带报错，\r\n带事务的即使不报错在多线程也容易混乱，例如线程1要吧conn roallback，线程2要commit，conn中的事务到底听谁的？\r\n例如一个浏览器要并发打开多个网页，线程1命令浏览器打开新浪，线程2命令浏览器打开搜狐，那么浏览器到底听谁的？\r\n一个http链接要打开百度新闻的第一页，另外一个线程又让他打开百度新闻的第二页，那么这个socket到底听谁的？\r\n解决类似这种抓狂的场景，如果不想再函数内部频繁创建和摧毁，那么就要使用池化思想。\r\n\r\n\r\n如果一个对象的创建代价大例如耗时耗费代码行数长(耗cpu)，并且他的核心操作方法是耗时的并且是多线程不安全的，\r\n那么就有必要使用池化，使程序运行速度加快。和这个对象代表的是不是一个socket连接，是不是一个浏览器，没有任何关系。\r\n\r\n\r\n\r\n\r\n</pre>\r\n\r\n\r\n\r\n[这是一篇很好的博客，说明连接池重要性: ](https://blog.csdn.net/claroja/article/details/103204159?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166364368816782388023926%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=166364368816782388023926&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-2-103204159-null-null.nonecase&utm_term=python%20%20DBUtils&spm=1018.2226.3001.4450)\r\n\r\n\r\n\r\n```\r\n\r\n\r\n\r\n\r\n编码中有时候需要使用一种创建代价很大的对象，而且这个对象不能被多线程同时调用他的操作方法，\r\n\r\n比如mysql连接池，socket连接池。\r\n很多这样的例子例典型如mysql的插入，如果多线程高并发同时操作同一个全局connection去插入，很快就会报错了。\r\n那么你可能会为了解决这个问题的方式有如下：\r\n\r\n1.你可能这么想，操作mysql的那个函数里面每一次都临时创建mysql连接，函数的末尾关闭coonection，\r\n  这样频繁创建和摧毁连接，无论是服务端还是客户端开销cpu和io高出很多。\r\n\r\n2.或者不使用方案1，你是多线程的函数里面用一个全局connection，但是每一个操作mysql的地方都加一个线程锁，\r\n  使得不可能线程1和线程2同时去操作这个connction执行插入，如果假设插入耗时1秒，那么100线程插入1000次要1000秒。\r\n\r\n正确的做法是使用mysql连接池库。如果设置开启的连接池中的数量是大于100，100线程插入1000次只需要10秒，节省时间100倍。\r\nmysql连接池已经有知名的连接池包了。如果没有大佬给我们开发mysql连接池库或者一个小众的需求还没有大神针对这个耗时对象开发连接池。\r\n那么可以使用 ObjectPool 实现对象池，连接池就是对象池的一种子集，connection就是pymysql.Connection类型的对象，连接也是对象。\r\n这是万能对象池，所以可以实现webdriver浏览器池。对象并不是需要严格实实在在的外部cocket或者浏览器什么的，也可以是python语言的一个普通对象。\r\n只要这个对象创建代价大，并且它的核心方法是非线程安全的，就很适合使用对象池来使用它。\r\n\r\n\r\n\r\n\r\n```\r\n\r\n## 1.常问问题回答\r\n\r\n### 1.1 对象池是线程安全的吗？\r\n\r\n```\r\n这个问题牛头不对马嘴 ，对象池就是为多线程或者并发而生的。\r\n你想一下，如果你的操作只有一个主线程，那直接用一个对象一直用就是了，反正不会遇到多线程要使用同一个对象。\r\n\r\n你花脑袋想想，如果你的代码是主线程单线程的，你有必要用dbutils来搞mysql连接池吗。\r\n直接用pymysql的conn不是更简单更香吗。\r\nweb后端是uwsgi gunicorn来自动开多线程或者协程是自动并发的，虽然你没亲自开多线程，但也是多线程的，需要使用连接池。\r\n\r\n任何叫池的东西都是为并发而生的，如果不能多线程安全，那存在的意义目的何在？\r\n\r\n```\r\n\r\n### 1.2 对象池 连接池 线程池有什么区别。\r\n\r\n```\r\n连接池就是对象池，连接池一般是链接数据库 或者中间件或者socket的对象，比如mysql的connection，有的对象并不是链接什么socket，\r\n但是创建代价大，方法非线程安全，就是对象池。连接池是对象池的一个子集。\r\n\r\n线程池和对象池关系很小，此对象池可以实现了一切对象池化，但并不能拿来实现线程池。\r\n如果要看线程池，https://github.com/ydf0509/threadpool_executor_shrink_able 此项目实现了线程池。\r\n\r\n\r\nhttps://blog.csdn.net/Alan_Mathison_Turing/article/details/78512410 这个讲得对象池和线程池区别，讲的不错。\r\n\r\n一个对象池的基本行为包括：\r\n\r\n创建对象newObject()\r\n借取对象getObject()\r\n归还对象freeObject()\r\n\r\n线程池\r\n首先摆出结论：线程池糅合了对象池模型，但是核心原理是生产者-消费者模型。\r\n\r\n线程池并不是像多线程把某个线程借出去使用然后利用完了归还，线程池里面的线程都是while true的死循环，\r\n不会像对象池例如mysql的conn查询一下几十毫秒钟就用完了，线程池里面的线程对象是永不结束的，没有借出去使用用完了后归还这种事情。\r\n\r\n所以不能想着学习池化mysql connection或者selnium的driver，也把threading.Thread池化呢，Thread对象随着run方法的结束就会自动摧毁了\r\n，无法人为的使Thread不摧毁，也就是说线程是随着run方法运行完成就自动结束了不可放到池子里面反复拿出来短暂利用，那么线程池是如何复用线程的呢？\r\n因为上面说了线程随着run方法运行完成就自动结束了是一次性的，那么主要是就是把线程池的每个线程的run方法设计成无限蒙蔽死循环的while 1永不结束就能解决复用问题了，\r\n每个线程的run方法都是在while 1 里面 fun,args = queue.get(block=True),每取出一个任务后就在当前线程执行 fun(*agrs)，所以线程一直是那个线程，\r\n但是可以运行的函数和函数参数却是无限可能的。\r\n任何线程池实现都是有个queue，生产者往queue里面submit任务，\r\n消费者是例如100个线程，每个线程里面跑的函数都是while True的死循环函数，while 1里面不断的用queue.get从queue里面拉取任务，\r\n拉取一个任务，就立即fun(x,y)这么去运行。任何语言任何人实现线程池一定是这个思路这么写的，没有例外。\r\n\r\n说到死循环那就很有趣了，这里是线程池设计的一个难点重点，如果while True死循环，那线程池不是无敌了无解了，代码那不是永远结束不了？\r\n线程池里面设计的一个难点就包括这里，所以很多人写的线程池都很难用，要么程序永不结束，要么设计成了线程池的queue里面还有任务没完成，\r\n程序就结束了，所以pool.submit，很多人搞的线程池在代码最结尾要加上pool.termit什么玩意的，可以百度博客园python线程池好多就是这样的，\r\n没有几个人设计的手写线程池达到了 concurrent.futures.Threadpoolexecutor那么好用的程度，最主要是不了解守护线程，\r\n很多人都是搞的非守护线程，导致发明的线程池比内置的concurrent.futures.Threadpoolexecutor好用程度差十万八千里。\r\n如果把while 1死循环的线程设置为守护线程，那么当主线程结束后，守护线程就会自动随程序结束了。当然了光设置守护线程还不够，\r\n如果主线程把任务都submit到queue里面了，实际上线程池应该还需要运行queue里面的任务，所以还需要加个判断，要加上 atexit.register的钩子，\r\n让任务执行完成才关闭。设计一个好用的线程池还是很难的，设计一个死循环导致代码永不能自动结束的线程池就简单很多了。\r\n比如这个线程池  https://github.com/mingxiaoHe/ThreadPool/blob/master/threadpool.py 设计得很悲催，\r\n必须手动在整个项目最末未加上 pool.close(),而且不能加在代码中间，因为加载中间会导致如果之后继续提交任务就没线程能力执行了，太难了用了这种\r\n主要是不知道守护线程用途。\r\n\r\n还有这个 https://github.com/shengqi158/ThreadPool/blob/master/ThreadPool.py，最末未要加上threadpool.task_join()，\r\n很多封装的需要最最末尾加一句，主要是不知道守护线程用途。\r\n\r\n\r\n线程池的思路于对象池几乎完全不同。\r\n\r\n\r\n\r\n```\r\n\r\n## 2.利用对象池来封装任意类型的池演示\r\n\r\ncontrib 文件夹自带演示了4个封装，包括http pymsql webdriver paramiko(操作linux的python包)的池化。\r\n\r\n### 2.0 例如使用万能对象池包实现的 nb_http_client\r\n\r\n[nb_http_client](https://github.com/ydf0509/nb_http_client)\r\n\r\nnb_http_client 是 python 史上性能最强的http客户端，比任意自带和三方请求包快很多倍。\r\n\r\n### 2.1 mysql 池化\r\n\r\n以下是pymysql_pool的池化代码，使用has a模式封装的PyMysqlOperator对象，你也可以使用is a来继承方式来写，但要实现clean_up等方法。\r\n\r\n```python\r\nimport copy\r\n\r\nimport pymysql\r\nimport typing\r\nfrom universal_object_pool import ObjectPool, AbstractObject\r\nfrom threadpool_executor_shrink_able import BoundedThreadPoolExecutor\r\nimport threading\r\nimport time\r\nimport decorator_libs\r\n\r\n\"\"\"\r\n这个是真正的用pymsql实现连接池的例子，完全没有依赖dbutils包实现的连接池。\r\n比dbutils嗨好用，实际使用时候不需要操作cursor的建立和关闭。\r\n\r\ndbutils官方用法是\r\n\r\npool= PooledDB()\r\ndb = pool.connection()\r\ncur = db.cursor()\r\ncur.execute(...)\r\nres = cur.fetchone()\r\ncur.close()  # or del cur\r\ndb.close()  # or del db\r\n\r\n\"\"\"\r\n\r\n\r\nclass PyMysqlOperator(AbstractObject):\r\n    error_type_list_set_not_available = []  # 出了特定类型的错误，可以设置对象已经无效不可用了，不归还到队列里面。\r\n\r\n    # error_type_list_set_not_available = [pymysql.err.InterfaceError]\r\n\r\n    def __init__(self, host='192.168.6.130', user='root', password='123456', cursorclass=pymysql.cursors.DictCursor,\r\n                 autocommit=False, **pymysql_connection_kwargs):\r\n        in_params = copy.copy(locals())\r\n        in_params.update(pymysql_connection_kwargs)\r\n        in_params.pop('self')\r\n        in_params.pop('pymysql_connection_kwargs')\r\n        self.conn = pymysql.Connection(**in_params)\r\n\r\n    \"\"\" 下面3个是重写的方法\"\"\"\r\n\r\n    def clean_up(self):  # 如果一个对象最近30分钟内没被使用，那么对象池会自动将对象摧毁并从池中删除，会自动调用对象的clean_up方法。\r\n        self.conn.close()\r\n\r\n    def before_use(self):\r\n        self.cursor = self.conn.cursor()\r\n        self.core_obj = self.cursor  # 这个是为了operator对象自动拥有cursor对象的所有方法。\r\n\r\n    def before_back_to_queue(self, exc_type, exc_val, exc_tb):\r\n        if exc_type:\r\n            self.conn.rollback()\r\n        else:\r\n            self.conn.commit()\r\n        self.cursor.close()  # 也可以不要，因为每次的cusor都是不一样的。\r\n\r\n    \"\"\"以下可以自定义其他方法。\r\n    因为设置了self.core_obj = self.cursor ，父类重写了__getattr__,所以此对象自动拥有cursor对象的所有方法,如果是同名同意义的方法不需要一个个重写。\r\n    \"\"\"\r\n\r\n    def execute(self, query, args):\r\n        \"\"\"\r\n        这个execute由于方法名和入参和逻辑与官方一模一样，可以不需要，因为设置了core_obj后，operator对象自动拥有cursor对象的所有方法，可以把这个方法注释了然后测试运行不受影响。\r\n        :param query:\r\n        :param args:\r\n        :return:\r\n        \"\"\"\r\n        return self.cursor.execute(query, args)\r\n\r\n\r\nif __name__ == '__main__':\r\n    mysql_pool = ObjectPool(object_type=PyMysqlOperator, object_pool_size=100, object_init_kwargs={'port': 3306})\r\n\r\n\r\n    def test_update(i):\r\n        sql = f'''\r\n            INSERT INTO db1.table1(uname ,age)\r\n        VALUES(\r\n            %s ,\r\n            %s)\r\n        ON DUPLICATE KEY UPDATE\r\n            uname = values(uname),\r\n            age = if(values(age)>age,values(age),age);\r\n        '''\r\n        with mysql_pool.get(\r\n                timeout=2) as operator:  # type: typing.Union[PyMysqlOperator,pymysql.cursors.DictCursor] #利于补全\r\n            print(id(operator.cursor), id(operator.conn))\r\n            operator.execute(sql, args=(f'name_{i}', i * 4))\r\n            print(\r\n                operator.lastrowid)  # opererator 自动拥有 operator.cursor 的所有方法和属性。 opererator.methodxxx 会自动调用 opererator.cursor.methodxxx\r\n\r\n\r\n    operator_global = PyMysqlOperator()\r\n\r\n\r\n    def test_update_multi_threads_use_one_conn(i):\r\n        \"\"\"\r\n        这个是个错误的例子，多线程运行此函数会疯狂报错,单线程不报错\r\n        这个如果运行在多线程同时操作同一个conn，就会疯狂报错。所以要么狠low的使用临时频繁在函数内部每次创建和摧毁mysql连接，要么使用连接池。\r\n        :param i:\r\n        :return:\r\n        \"\"\"\r\n        sql = f'''\r\n            INSERT INTO db1.table1(uname ,age)\r\n        VALUES(\r\n            %s ,\r\n            %s)\r\n        ON DUPLICATE KEY UPDATE\r\n            uname = values(uname),\r\n            age = if(values(age)>age,values(age),age);\r\n        '''\r\n\r\n        operator_global.before_use()\r\n        print(id(operator_global.cursor), id(operator_global.conn))\r\n        operator_global.execute(sql, args=(f'name_{i}', i * 3))\r\n        operator_global.cursor.close()\r\n        operator_global.conn.commit()\r\n\r\n\r\n    thread_pool = BoundedThreadPoolExecutor(20)\r\n    with decorator_libs.TimerContextManager():\r\n        for x in range(200000, 300000):\r\n            thread_pool.submit(test_update, x)\r\n            # thread_pool.submit(test_update_multi_threads_use_one_conn, x)\r\n        thread_pool.shutdown()\r\n    time.sleep(10000)  # 这个可以测试验证，此对象池会自动摧毁连接如果闲置时间太长，会自动摧毁对象\r\n\r\n\r\n``` \r\n\r\n### 2.2 linux 操作神库 paramiko 的池化，例如可以大幅度加快文件传输和大幅度加快有io的命令。\r\n\r\n比如有很多几kb的小文件需要上传，对象池 + 线程池可以大幅度提升上传速度\r\n\r\n比如让linux执行有io耗时的curl命令，对象池 + 线程池可以大幅度提升命令执行效率。\r\n\r\n所以此对象池可以池化一切python对象，不仅是是数据库连接。\r\n\r\n```python\r\nimport time\r\n\r\nimport decorator_libs\r\nimport paramiko\r\nimport nb_log\r\nfrom threadpool_executor_shrink_able import BoundedThreadPoolExecutor\r\n\r\nfrom universal_object_pool import AbstractObject, ObjectPool\r\n\r\n\"\"\"\r\n t = paramiko.Transport((self._host, self._port))\r\n        t.connect(username=self._username, password=self._password)\r\n        self.sftp = paramiko.SFTPClient.from_transport(t)\r\n\r\n        ssh = paramiko.SSHClient()\r\n        ssh.load_system_host_keys()\r\n        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\r\n        ssh.connect(self._host, port=self._port, username=self._username, password=self._password, compress=True)\r\n        self.ssh = ssh\r\n\"\"\"\r\n\r\n\r\nclass ParamikoOperator(nb_log.LoggerMixin, nb_log.LoggerLevelSetterMixin, AbstractObject):\r\n    \"\"\"\r\n    这个是linux操作包的池化。例如执行的shell命令耗时比较长，如果不采用池，那么一个接一个的命令执行将会很耗时。\r\n    如果每次临时创建和摧毁linux连接，会很多耗时和耗cpu开销。\r\n    \"\"\"\r\n    def __init__(self, host, port, username, password):\r\n        # self.logger = nb_log.get_logger('ParamikoOperator')\r\n\r\n        t = paramiko.Transport((host, port))\r\n        t.connect(username=username, password=password)\r\n        self.sftp = paramiko.SFTPClient.from_transport(t)\r\n\r\n        ssh = paramiko.SSHClient()\r\n        # ssh.load_system_host_keys()\r\n        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\r\n        ssh.connect(host, port=port, username=username, password=password, compress=True)  # 密码方式\r\n\r\n        # private = paramiko.RSAKey.from_private_key_file('C:/Users/Administrator/.ssh/id_rsa')  # 秘钥方式\r\n        # ssh.connect(host, port=port, username=username, pkey=private)\r\n        self.ssh = self.core_obj = ssh\r\n\r\n        self.ssh_session = self.ssh.get_transport().open_session()\r\n\r\n    def clean_up(self):\r\n        self.sftp.close()\r\n        self.ssh.close()\r\n\r\n    def before_back_to_queue(self, exc_type, exc_val, exc_tb):\r\n        pass\r\n\r\n    def exec_cmd(self, cmd):\r\n        # paramiko.channel.ChannelFile.readlines()\r\n        self.logger.debug('要执行的命令是： ' + cmd)\r\n        stdin, stdout, stderr = self.ssh.exec_command(cmd)\r\n        stdout_str = stdout.read().decode()\r\n        stderr_str = stderr.read().decode()\r\n        if stdout_str != '':\r\n            self.logger.info('执行 {} 命令的stdout是 -- > \\n{}'.format(cmd, stdout_str))\r\n        if stderr_str != '':\r\n            self.logger.error('执行 {} 命令的stderr是 -- > \\n{}'.format(cmd, stderr_str))\r\n        return stdout_str, stderr_str\r\n\r\n\r\nif __name__ == '__main__':\r\n    paramiko_pool = ObjectPool(object_type=ParamikoOperator,\r\n                               object_init_kwargs=dict(host='192.168.6.130', port=22, username='ydf',\r\n                                                       password='372148', ),\r\n                               max_idle_seconds=120, object_pool_size=20)\r\n\r\n    ParamikoOperator(**dict(host='192.168.6.130', port=22, username='ydf', password='372148', ))\r\n\r\n\r\n    def test_paramiko(cmd):\r\n        with paramiko_pool.get() as paramiko_operator:  # type:ParamikoOperator\r\n            # pass\r\n            ret = paramiko_operator.exec_cmd(cmd)\r\n            print(ret[0])\r\n            print(ret[1])\r\n\r\n\r\n    thread_pool = BoundedThreadPoolExecutor(20)\r\n    with decorator_libs.TimerContextManager():\r\n        for x in range(20, 100):\r\n            thread_pool.submit(test_paramiko, 'date;sleep 20s;date')  # 这个命令单线程for循环顺序执行每次需要20秒，如果不用对象池执行80次要1600秒\r\n            # thread_pool.submit(test_update_multi_threads_use_one_conn, x)\r\n        thread_pool.shutdown()\r\n    time.sleep(10000)  # 这个可以测试验证，此对象池会自动摧毁连接如果闲置时间太长，会自动摧毁对象\r\n    \r\n\r\n```\r\n\r\n### 2.3 一般性任意python对象的池化\r\n\r\n```python\r\nimport typing\r\nfrom universal_object_pool import ObjectPool, AbstractObject\r\nfrom threadpool_executor_shrink_able import BoundedThreadPoolExecutor\r\nimport threading\r\nimport time\r\n\r\n\"\"\"\r\n编码中有时候需要使用一种创建代价很大的对象，而且这个对象不能被多线程同时调用他的操作方法，\r\n\r\n比如mysql连接池，socket连接池。\r\n很多这样的例子例典型如mysql的插入，如果多线程高并发同时操作同一个全局connection去插入，很快就会报错了。\r\n那么你可能会为了解决这个问题的方式有如下：\r\n\r\n1.你可能这么想，操作mysql的那个函数里面每一次都临时创建mysql连接，函数的末尾关闭coonection，\r\n  这样频繁创建和摧毁连接，无论是服务端还是客户端开销cpu和io高出很多。\r\n\r\n2.或者不使用方案1，你是多线程的函数里面用一个全局connection，但是每一个操作mysql的地方都加一个线程锁，\r\n  使得不可能线程1和线程2同时去操作这个connction执行插入，如果假设插入耗时1秒，那么100线程插入1000次要1000秒。\r\n\r\n正确的做法是使用mysql连接池库。如果设置开启的连接池中的数量是大于100，100线程插入1000次只需要10秒，节省时间100倍。\r\nmysql连接池已经有知名的连接池包了。如果没有大佬给我们开发mysql连接池库或者一个小众的需求还没有大神针对这个耗时对象开发连接池。\r\n那么可以使用 ObjectPool 实现对象池，连接池就是对象池的一种子集，connection就是pymysql.Connection类型的对象，连接也是对象。\r\n这是万能对象池，所以可以实现webdriver浏览器池。对象并不是需要严格实实在在的外部cocket或者浏览器什么的，也可以是python语言的一个普通对象。\r\n只要这个对象创建代价大，并且它的核心方法是非线程安全的，就很适合使用对象池来使用它。\r\n\r\n\"\"\"\r\n\r\n\"\"\"\r\n此模块演示一般常规性任意对象的池化\r\n\"\"\"\r\n\r\n\r\nclass Core:  # 一般假设这是个三方包大神写的包里面的某个重要公有类,你需要写的是用has a 模式封装他，你当然也可以使用is a模式来继承它并加上clean_up before_back_to_queue 方法。\r\n    def insert(self, x):\r\n        time.sleep(0.5)\r\n        print(f'插入 {x}')\r\n\r\n    def close(self):\r\n        print('关闭连接')\r\n\r\n\r\nclass MockSpendTimeObject(AbstractObject):\r\n\r\n    def __init__(self, ):\r\n        time.sleep(0.1)  # 模拟创建对象耗时\r\n\r\n        s = 0  # 模拟创建对象耗费cpu\r\n        for j in range(10000 * 500):\r\n            s += j\r\n\r\n        self.conn = self.core_obj = Core()  # 这个会造成obj.xx  自动调用 obj.core_obj.xx，很好用。\r\n\r\n        self._lock = threading.Lock()\r\n\r\n    def do_sth(self, x):\r\n        with self._lock:\r\n            self.conn.insert(x)\r\n            print(f' {x} 假设做某事同一个object只能同时被一个线程调用此方法，是排他的')\r\n\r\n    def clean_up(self):\r\n        self.core_obj.close()\r\n\r\n    def before_back_to_queue(self, exc_type, exc_val, exc_tb):\r\n        pass\r\n\r\n\r\nif __name__ == '__main__':\r\n    pool = ObjectPool(object_type=MockSpendTimeObject, object_pool_size=40).set_log_level(10)\r\n\r\n\r\n    def use_object_pool_run(y):\r\n        \"\"\" 第1种 使用对象池是正解\"\"\"\r\n        # with ObjectContext(pool) as mock_obj:\r\n        #     mock_obj.do_sth(y)\r\n        with pool.get() as mock_obj:  # type:typing.Union[MockSpendTimeObject,Core]\r\n            # mock_obj.insert(y)  # 可以直接使用core_obj的方法\r\n            mock_obj.do_sth(y)\r\n\r\n\r\n    def create_object_every_times_for_run(y):\r\n        \"\"\"第2种 多线程函数内部每次都采用临时创建对象，创建对象代价大，导致总耗时很长\"\"\"\r\n        mock_obj = MockSpendTimeObject()\r\n        mock_obj.do_sth(y)\r\n\r\n\r\n    global_mock_obj = MockSpendTimeObject()\r\n    global_mock_obj.insert(6666)  # 自动拥有self.core_object的方法。\r\n\r\n\r\n    def use_globle_object_for_run(y):\r\n        \"\"\"\r\n        第3种 ，多线程中，使用全局唯一对象。少了创建对象的时间，但是操作是独占时间排他的，这种速度是最差的。\r\n        \"\"\"\r\n        global_mock_obj.do_sth(y)\r\n\r\n\r\n    t1 = time.perf_counter()\r\n    threadpool = BoundedThreadPoolExecutor(50)\r\n\r\n    for i in range(1000):  # 这里随着函数的调用次数越多，对象池优势越明显。假设是运行10万次，三者耗时差距会更大。\r\n        # 这里演示三种调用，1是多线程里用使用对象池 2是使用多线程函数内部每次临时创建关闭对象 3是多线程函数内部使用全局唯一对象。\r\n\r\n        threadpool.submit(use_object_pool_run, i)  # 6秒完成\r\n        # threadpool.submit(create_object_every_times_for_run, i)  # 82秒完成\r\n        # threadpool.submit(use_globle_object_for_run, i)  # 耗时100秒\r\n\r\n    threadpool.shutdown()\r\n    print(time.perf_counter() - t1)\r\n\r\n    time.sleep(100)\r\n    \r\n```\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "commmon  universal_object_pool",
    "license": "BSD License",
    "maintainer": "ydf",
    "maintainer_email": "ydf0509@sohu.com",
    "name": "universal-object-pool",
    "package_url": "https://pypi.org/project/universal-object-pool/",
    "platform": "all",
    "project_url": "https://pypi.org/project/universal-object-pool/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/universal-object-pool/1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "commmon  universal_object_pool",
    "version": "1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15993364,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d158cc437f20842613e63071e2ddf15b72e7d64729f466bd77232f68e0f23f1d",
          "md5": "7e0a80438a6d9ebb4dadcea345268c00",
          "sha256": "8e3babca92c593f76082274171d39b546759a3bd97c63855d1a4bbabba66329d"
        },
        "downloads": -1,
        "filename": "universal_object_pool-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7e0a80438a6d9ebb4dadcea345268c00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5391,
        "upload_time": "2021-06-15T11:10:35",
        "upload_time_iso_8601": "2021-06-15T11:10:35.108313Z",
        "url": "https://files.pythonhosted.org/packages/d1/58/cc437f20842613e63071e2ddf15b72e7d64729f466bd77232f68e0f23f1d/universal_object_pool-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46164cd48d31d381b5d2322adc8adc0b821aa95572fff16f8cc6581ff028c289",
          "md5": "bd0feb0fb2f9c4b23b758785ba64e4e5",
          "sha256": "7cd1236057fce9649a6ed449cec3a4f60fb1584cfd76ae262c1393f034700ae9"
        },
        "downloads": -1,
        "filename": "universal_object_pool-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bd0feb0fb2f9c4b23b758785ba64e4e5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5483,
        "upload_time": "2021-06-15T11:11:50",
        "upload_time_iso_8601": "2021-06-15T11:11:50.064253Z",
        "url": "https://files.pythonhosted.org/packages/46/16/4cd48d31d381b5d2322adc8adc0b821aa95572fff16f8cc6581ff028c289/universal_object_pool-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c702323e593ba3d7adc558346c86eb5d0b1a1fbc433eb61d694fcd02d8629e66",
          "md5": "935f81ea3fd4f506213f149c82904a96",
          "sha256": "ba5a7c19153ea9ae0f3465efe5a25ded883579817ad5293e6bddcc215f68daef"
        },
        "downloads": -1,
        "filename": "universal_object_pool-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "935f81ea3fd4f506213f149c82904a96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12746,
        "upload_time": "2021-06-17T09:28:45",
        "upload_time_iso_8601": "2021-06-17T09:28:45.884373Z",
        "url": "https://files.pythonhosted.org/packages/c7/02/323e593ba3d7adc558346c86eb5d0b1a1fbc433eb61d694fcd02d8629e66/universal_object_pool-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88f2810a45f983f99fbf15dc5c74ec249ed3cac3ece6a389b22c46085154efc6",
          "md5": "6dc2683c89ff9551aedcb46a99363bde",
          "sha256": "78d6362ad648ed162b4979251c1b22e71c7d50fb165bdacbcd161fe748471f04"
        },
        "downloads": -1,
        "filename": "universal_object_pool-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "6dc2683c89ff9551aedcb46a99363bde",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12312,
        "upload_time": "2021-06-17T09:50:30",
        "upload_time_iso_8601": "2021-06-17T09:50:30.806761Z",
        "url": "https://files.pythonhosted.org/packages/88/f2/810a45f983f99fbf15dc5c74ec249ed3cac3ece6a389b22c46085154efc6/universal_object_pool-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a6cb6f91e8661c8617681e7861df48001c7588d9a3eb5f05ea570d2a7444f07c",
          "md5": "2d57d8bc83d7d62e1dbfe13ed3a6017d",
          "sha256": "ab2f22f079339e6f94276d4c7a4ac14ff2fb04cb6223db83ad22c56f41c12c27"
        },
        "downloads": -1,
        "filename": "universal_object_pool-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2d57d8bc83d7d62e1dbfe13ed3a6017d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18604,
        "upload_time": "2021-06-17T11:40:21",
        "upload_time_iso_8601": "2021-06-17T11:40:21.380252Z",
        "url": "https://files.pythonhosted.org/packages/a6/cb/6f91e8661c8617681e7861df48001c7588d9a3eb5f05ea570d2a7444f07c/universal_object_pool-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98f70316f80d9c3ca18b7bbc62dece77efc5518d793a3a1d7fd7f2fa8166187c",
          "md5": "1a808e05af8ec1fe8ce722d10cc047d4",
          "sha256": "5595e17eafc84baff635c07c67b0df95e883981466a9ec6c423d25c5848450e5"
        },
        "downloads": -1,
        "filename": "universal_object_pool-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "1a808e05af8ec1fe8ce722d10cc047d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25793,
        "upload_time": "2021-07-05T02:49:04",
        "upload_time_iso_8601": "2021-07-05T02:49:04.487803Z",
        "url": "https://files.pythonhosted.org/packages/98/f7/0316f80d9c3ca18b7bbc62dece77efc5518d793a3a1d7fd7f2fa8166187c/universal_object_pool-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19e52a29c2eb451eb1200c788720faf58567493cb6a5f6e477c7c263ad0b1779",
          "md5": "784ac7adedba9b90ffb2450857501d18",
          "sha256": "7b349775a01fef866d4f0827833f9a3badf318c83ce57dd3100089e278285a4c"
        },
        "downloads": -1,
        "filename": "universal_object_pool-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "784ac7adedba9b90ffb2450857501d18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26018,
        "upload_time": "2021-07-30T02:04:00",
        "upload_time_iso_8601": "2021-07-30T02:04:00.875777Z",
        "url": "https://files.pythonhosted.org/packages/19/e5/2a29c2eb451eb1200c788720faf58567493cb6a5f6e477c7c263ad0b1779/universal_object_pool-0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bf46b2b4694b0d9e2fd5df9f65be1621fb430d04db7e2f98b35715ef0c884fc",
          "md5": "2404e18b6b8465c5c21393bd230cfdd2",
          "sha256": "d5c9dd0b4423b4c28ca00b920651cff5d96e8e5670c73cfb47c36990e96ee5a8"
        },
        "downloads": -1,
        "filename": "universal_object_pool-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "2404e18b6b8465c5c21393bd230cfdd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26019,
        "upload_time": "2021-09-02T08:02:21",
        "upload_time_iso_8601": "2021-09-02T08:02:21.609425Z",
        "url": "https://files.pythonhosted.org/packages/2b/f4/6b2b4694b0d9e2fd5df9f65be1621fb430d04db7e2f98b35715ef0c884fc/universal_object_pool-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10c884550dbc2122b45faf86334d34154c210164b3b590a1e83e1d48313de7d3",
          "md5": "960c48b07986b00161f6818fe01bb336",
          "sha256": "b69990fe31b91d17096d30c6642a7c531e5eacb248bf4532583a29dba34a3b61"
        },
        "downloads": -1,
        "filename": "universal_object_pool-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "960c48b07986b00161f6818fe01bb336",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26056,
        "upload_time": "2021-10-22T08:25:45",
        "upload_time_iso_8601": "2021-10-22T08:25:45.189580Z",
        "url": "https://files.pythonhosted.org/packages/10/c8/84550dbc2122b45faf86334d34154c210164b3b590a1e83e1d48313de7d3/universal_object_pool-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52af45498d5b19dcd5647c80154e8b0a684e2a0b06dcce458cd21cc81e203d16",
          "md5": "e9c15fe401ddeefc1235e42c44d55444",
          "sha256": "00e69dfb17bc98396fdaef3e7bbc7cd30298a246888df5dd5a3b0f912224276d"
        },
        "downloads": -1,
        "filename": "universal_object_pool-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e9c15fe401ddeefc1235e42c44d55444",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24133,
        "upload_time": "2022-12-05T10:01:04",
        "upload_time_iso_8601": "2022-12-05T10:01:04.138650Z",
        "url": "https://files.pythonhosted.org/packages/52/af/45498d5b19dcd5647c80154e8b0a684e2a0b06dcce458cd21cc81e203d16/universal_object_pool-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52af45498d5b19dcd5647c80154e8b0a684e2a0b06dcce458cd21cc81e203d16",
        "md5": "e9c15fe401ddeefc1235e42c44d55444",
        "sha256": "00e69dfb17bc98396fdaef3e7bbc7cd30298a246888df5dd5a3b0f912224276d"
      },
      "downloads": -1,
      "filename": "universal_object_pool-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e9c15fe401ddeefc1235e42c44d55444",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24133,
      "upload_time": "2022-12-05T10:01:04",
      "upload_time_iso_8601": "2022-12-05T10:01:04.138650Z",
      "url": "https://files.pythonhosted.org/packages/52/af/45498d5b19dcd5647c80154e8b0a684e2a0b06dcce458cd21cc81e203d16/universal_object_pool-1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}