{
  "info": {
    "author": "Jason R. Jones",
    "author_email": "slightlynybbled@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Purpose\n\nTo create a python API for working with National Instruments NIDAQmx.  Check\nthe [documentation](https://daqmx.readthedocs.io/en/latest/index.html) for\ndetails.\n\n## Project Maturity\n\nThe project is somewhat immature, but works well for where items are\nimplemented.  Currently, it has been tested on a single model device; however\nthere is no reason to suspect that the project wouldn't work on any device\nthat supports digital IO, analog inputs, and analog outputs.  There is \napproximately ~80% test coverage and a pretty good start on the\n[documentation](https://daqmx.readthedocs.io/en/latest/index.html).\n\n## Installation\n\n    python -m pip install daqmx\n\n## Usage\n\nYou must first import the package:\n\n    from ni import NIDAQmxInstrument\n    \nYou can then allocate the hardware without any further specifiers.  Note that, \nif there is more than one DAQmx instrument available on your PC, the hardware\nallocated may not be the one you are expecting!  Be sure to specify the device\nname, model number, or serial number to make the hardware acquisition process\nmore deterministic.\n\n    daq = NIDAQmxInstrument()  # hardware with no specifiers\n    \n    daq = NIDAQmxInstrument(device_name='Dev3')  # hardware specified by the device name\n    \n    daq = NIDAQmxInstrument(model_number='USB-6001')  # hardware specified by model number\n\n    daq = NIDAQmxInstrument(serial_number=1234)  # hardware specified by serial number\n    \nOnce you have the `NIDAQmxInstrument` instance, then you can use it to operate\nthe instrument.  See the [examples](./examples) directory for complete examples.  \nSome snippets to demonstrate common usages:\n\n    daq = NIDAQmxInstrument()  # automatic acquisition of hardware\n\n    daq.ao0 = 2.7V  # set the analog out 0 to 2.7V\n    daq.ao1 = 1.3V  # set the analog out 1 to 1.3V\n\n    print(f'daq.ai0.value: {daq.ai0.value:.3f}V')  # print a single sample \n                                                   # from analog input 0\n\n    values = daq.ai1.capture(\n        sample_count=10, rate=100,\n        max_voltage=10.0, min_voltage=-10.0,\n        mode='differential', timeout=3.0\n    )  # capture 10 samples from ai1 at a rate of 100Hz in differential mode\n    print(values)\n\n    daq.port0.line2 = True  # set the daq.<port>.<line> to True or False to write\n    print(daq.port0.line3)  # read the daq.<port>.<line> to read state of line\n\n## Contribution Guidelines\n\nSince I don't have access to unlimited instruments, I have to trust that \ncontributions that say they work do actually work.  As a result, any new \ninstruments that are contributed should have the following:\n\n - An issue associated with the instrument\n - A test in the `test` directory which describes the necessary \n   connections and implements testing\n\nPull requests are welcome!\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/slightlynybbled/daqmx",
    "keywords": "nationalinstruments,national,instruments,national instruments,daqmx,nidaqmx,daq,data acquisition,usb-6001",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "daqmx",
    "package_url": "https://pypi.org/project/daqmx/",
    "platform": null,
    "project_url": "https://pypi.org/project/daqmx/",
    "project_urls": {
      "Homepage": "https://github.com/slightlynybbled/daqmx"
    },
    "release_url": "https://pypi.org/project/daqmx/0.4.4/",
    "requires_dist": [
      "numpy (>=1.19.4)",
      "pydaqmx (>=1.4.4)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "DAQ control using National Instruments DAQmx framework",
    "version": "0.4.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13927838,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c505cac09f19768161dadcd1811b06fdce4c5c3f76f947945bc1965c8a358b3c",
          "md5": "436a33da367ed037483e85849583ecb2",
          "sha256": "55e0f2985dc4272cd9fea4d92b418717282a9e3697060cc2aea091ba18f3acc3"
        },
        "downloads": -1,
        "filename": "daqmx-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "436a33da367ed037483e85849583ecb2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 6669,
        "upload_time": "2020-11-25T15:52:17",
        "upload_time_iso_8601": "2020-11-25T15:52:17.592931Z",
        "url": "https://files.pythonhosted.org/packages/c5/05/cac09f19768161dadcd1811b06fdce4c5c3f76f947945bc1965c8a358b3c/daqmx-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfb25af545ac9ec1e014f9b97547096057820364532888acfdca1fb0782c67d0",
          "md5": "4a783d653c13e87b22f610cfb80db680",
          "sha256": "0ecadd73e44a2ff1b2c666f531787c618b600b420029df6e5f65a55daf688d59"
        },
        "downloads": -1,
        "filename": "daqmx-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a783d653c13e87b22f610cfb80db680",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 8602,
        "upload_time": "2020-12-03T13:36:06",
        "upload_time_iso_8601": "2020-12-03T13:36:06.346116Z",
        "url": "https://files.pythonhosted.org/packages/cf/b2/5af545ac9ec1e014f9b97547096057820364532888acfdca1fb0782c67d0/daqmx-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "314e49d94be343edf6d75edae80ee2218b89e0cf5b1e134dfcd2b811168c057c",
          "md5": "1fdbb54aa5449a7273268720b258c7f8",
          "sha256": "7338e7587fe8c2b05a66946342d42371220af10ae46942f9b19debf124b33423"
        },
        "downloads": -1,
        "filename": "daqmx-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1fdbb54aa5449a7273268720b258c7f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 8611,
        "upload_time": "2020-12-07T13:04:25",
        "upload_time_iso_8601": "2020-12-07T13:04:25.908464Z",
        "url": "https://files.pythonhosted.org/packages/31/4e/49d94be343edf6d75edae80ee2218b89e0cf5b1e134dfcd2b811168c057c/daqmx-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7eb24810f2f7c3c8f03dca17c36729754cfa2c4f909fa6b969d735704cb5010",
          "md5": "edba4bc9f506f6aba07dcf40ff122e54",
          "sha256": "afe810fd75c9045d6f1fbaf351a5ce03cffc9ee11bca70c84fb6623eed7abe45"
        },
        "downloads": -1,
        "filename": "daqmx-0.4.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edba4bc9f506f6aba07dcf40ff122e54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 9112,
        "upload_time": "2022-05-25T01:23:23",
        "upload_time_iso_8601": "2022-05-25T01:23:23.471901Z",
        "url": "https://files.pythonhosted.org/packages/e7/eb/24810f2f7c3c8f03dca17c36729754cfa2c4f909fa6b969d735704cb5010/daqmx-0.4.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e7eb24810f2f7c3c8f03dca17c36729754cfa2c4f909fa6b969d735704cb5010",
        "md5": "edba4bc9f506f6aba07dcf40ff122e54",
        "sha256": "afe810fd75c9045d6f1fbaf351a5ce03cffc9ee11bca70c84fb6623eed7abe45"
      },
      "downloads": -1,
      "filename": "daqmx-0.4.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "edba4bc9f506f6aba07dcf40ff122e54",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 9112,
      "upload_time": "2022-05-25T01:23:23",
      "upload_time_iso_8601": "2022-05-25T01:23:23.471901Z",
      "url": "https://files.pythonhosted.org/packages/e7/eb/24810f2f7c3c8f03dca17c36729754cfa2c4f909fa6b969d735704cb5010/daqmx-0.4.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}