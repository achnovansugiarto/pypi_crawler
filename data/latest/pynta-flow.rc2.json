{
  "info": {
    "author": "Maciej Gierada, Eric D. Hermes, David H. Bross",
    "author_email": "maciek.gierada@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering :: Chemistry",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "![Build status](https://github.com/zadorlab/pynta/workflows/Build%20status/badge.svg)\n![GitHub tag (latest by date)](https://img.shields.io/github/v/tag/zadorlab/pynta?label=version)\n![GitHub last commit](https://img.shields.io/github/last-commit/zadorlab/pynta?label=last%20modified)\n![GitHub commits since tagged version](https://img.shields.io/github/commits-since/zadorlab/pynta/v1.1.0?color=9cf)\n![GitHub](https://img.shields.io/badge/License-GPLv3-orange)\n![GitHub top language](https://img.shields.io/github/languages/top/zadorlab/pynta?color=brightgreen)\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/zadorlab/pynta.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/zadorlab/pynta/context:python)\n[![Total alerts](https://img.shields.io/lgtm/alerts/g/zadorlab/pynta.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/zadorlab/pynta/alerts/)\n![GitHub repo size](https://img.shields.io/github/repo-size/zadorlab/pynta)\n![GitHub all releases](https://img.shields.io/github/downloads/zadorlab/pynta/total?color=yellow)\n\n# Pynta\n\n<!-- ![workflow_idea](./workflow_idea.png) -->\n\n`pynta` is an automated workflow for reaction path exploration on metallic surfaces.\n\nThe `pynta` code is designed to automatically characterize chemical reactions\nrelevant to heterogeneous catalysis. In particular, it spawns and processes a\nlarge number of ab initio quantum chemistry calculations to study gas-phase\nreactions on crystal facets. It is designed to run on petascale and upcoming\nexascale machines.\n\nThe code systematically places adsorbates on crystal facets, by enumerating the\nvarious unique crystal sites and considering the symmetry of the adsorbates and\nthe surface. The structures are systematically perturbed, to try to investigate\nall possible adsorption geometries. Following this, the code performs\nmodifications to these structures and searches for saddle points on the\npotential energy landscape in order to characterize the reactions these\nadsorbates can undergo. After a series of such calculations the code arrives at\nwell-characterized reaction pathways, which can be in turn used to calculate\nrate coefficients and can be implemented in microkinetic mechanisms/models.\n\n`pynta` is designed to work with the workflow code\n[`balsam`](https://balsam.readthedocs.io/en/latest/), which\nenables a seamless running of embarrassingly parallel computations on\nsupercomputers. `pynta` includes several so-called apps that are run through\n`balsam`, and appear as one monolithic job submission in the queue system.\nAnother level of parallelism is gained from the ab initio programs, which may\nor may not include GPU acceleration. We use the Atomic Simulation Environment\n(ASE) that enables coupling to a large variety of ab initio quantum\nchemistry codes.\n\n<center><img src='./workflow_idea.png' style=\"width:400px\"></center>\n<br>\n\n# 1. Installation\n\nThe following instruction assumes that you have several softwares installed on your system, such as:\n\n- A queue system e.g. `Slurm`, `PBS` or `Cobalt`\n- An MPI e.g. `OpenMPI`\n- A math library e.g. `OpenBlas/LAPACK` or `Intel's MKL`\n- A compilier suite e.g. `GCC` or `Intel`\n\n## 1.1 Install all prerequisites\n\n### 1.1.1 Set the location you want to use for `pynta` build. It is suggested to create a virtual environment e.g 'pynta':\n\n```bash\ncd <path/whr/to/build/pynta>\npython3 -m venv pynta\n```\n\n### 1.1.2 Activate your virtual environment:\n\n```bash\nsource pynta/bin/activate\n```\n\n### 1.1.3 (_Optional_) Install required python packages (if you skip this process, `pynta` installer will do this later.)\n\n```bash\npip3 install matplotlib<3.2 spglib==1.14.1.post0 networkx<2.4 ase==3.19.0 scipy==1.3.1 numpy==1.18.1 PyYAML==5.3.1 sella==1.0.3\n\n```\n\n### 1.1.4 Download [PostgreSQL](https://www.enterprisedb.com/download-postgresql-binaries) precompiled binaries that suits your system and add `path_to_PostgreSQL/pgsql/bin` to your `PATH` by modifying `~/.bashrc`\n\n```bash\necho 'export PATH=path_to_PostgreSQL/pgsql/bin:$PATH' >> ~/.bashrc\n```\n\n1.1.5 Install [mpi4py](https://github.com/mpi4py/mpi4py.git):\n\n```bash\ngit clone https://github.com/mpi4py/mpi4py.git\ncd mpi4py\npython3 setup.py install\ncd ../\n```\n\nMake sure it works by running\n\n```python\n>>> mpirun -n 2 python3 -c 'from mpi4py import MPI; print(MPI.COMM_WORLD.Get_rank())'\n0\n1\n```\n\n1.1.6 Install [balsam](https://github.com/balsam-alcf/balsam.git) using [serial-mode-perf](https://github.com/balsam-alcf/balsam/tree/serial-mode-perf) branch.\n\n```bash\ngit clone https://github.com/balsam-alcf/balsam.git -b serial-mode-perf\ncd balsam\npython3 setup.py install\ncd ../\n```\n\nMake sure it works by running tests posted on the [balsam](https://github.com/balsam-alcf/balsam.git) GitHub page.\n\n### 1.1.7 Install [xTB-python](https://github.com/grimme-lab/xtb-python) following instruction provided there. Make sure to correctly link all required libraries. For example:\n\n- using `OpenBlas` and `GNU` based compilers:\n\n```bash\ngit clone https://github.com/grimme-lab/xtb-python.git\ncd xtb-python\ngit submodule update --init\nLDFLAGS=\"-L/opt/custom/OpenBLAS/0.3.7/lib\" meson setup build --prefix=$PWD --libdir=xtb/xtb --buildtype release --optimization 2 -Dla_backend=openblas\nninja -C build install\npip install -e .\n```\n\n- using `MKL` and Intel Compilers:\n\n```bash\ngit clone https://github.com/grimme-lab/xtb-python.git\ncd xtb-python\ngit submodule update --init\n# (ALCF's Theta specific)\n# conda instal cffi\n# module swap PrgEnv-intel PrgEnv-cray; module swap PrgEnv-cray PrgEnv-intel\nCC=icc CXX=icpc FC=ifort meson setup build --prefix=$PWD --libdir=xtb -Dla_backed=mkl -Dpy=3 --buildtype release --optimization 2\nninja -C build install\npython3 setup.py install\nln -s ./xtb/xtb/_libxtb*.so ./xtb\n```\n\nMake sure it works by running:\n\n```python\n>>> from xtb.ase.calculator import XTB\n>>> from ase.build import molecule\n>>> from math import isclose\n>>> atoms = molecule('H2O')\n>>> atoms.calc = XTB(method=\"GFN2-xTB\")\n>>> total_ener = atoms.get_potential_energy()\n>>> is_close = isclose(total_ener,-137.9677758730299)\n>>> print (total_ener)  # True -> that's good; False -> something is wrong\n```\n\n**Warning - You might be getting SEGFAULT error -**\n\n`Segmentation Fault (Core dumped)`\n\n**while executing any** `xTB-python` **job, especially for a relatively large molecules. The easiest solution is to unlimit the system stack to avoid stack overflows. In** `bash` **try:**\n\n```\nulimit -s unlimited\n```\n\nIf `xTB-python` still fails, try to install [xtb](https://github.com/grimme-lab/xtb) and test `xTB` itself for any errors.\n\n```bash\ngit clone https://github.com/grimme-lab/xtb.git\ncd xtb\nmkdir build\npushd build\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DCMAKE_FC_COMPILER=ifort ..\nmake\nctest\npopd\necho 'export LD_LIBRARY_PATH=path/to_xtb/xtb/build:$LD_LIBRARY_PATH' >> ~/.bashrc\necho 'export PATH=$HOME/.local/bin:\\$PATH' >> ~/.bashrc\n```\n\nThen, rebuild `xTB-python` on your system ignoring `git submodule update --init` and linking you current `xTB` installation.\n\n## 1.2 Install `pynta`\n\n### 1.2.1 Clone the project in your preferable location.\n\n```\ngit clone https://github.com/zadorlab/pynta.git\n```\n\nUsually, `master` branch should be fine. If somehow it is not working, make sure to switch to the latest stable release version by checking the tags.\n\n### 1.2.2 Go to `pynta` directory\n\n```\ncd pynta\n```\n\n### 1.2.3a Install `pynta`:\n\n```\npython setup.py install\n```\n\n### 1.2.3b (optional) If you do not have admin privileges (e.g. you will be using `pynta` on a supercomputer), do the following instead of 1.2.3a:\n\n```\npython setup.py install --user\n```\n\n**You should be good to go with `pynta`**\n\nOnce finished using the workflow, type:\n\n```\ncd pynta\ndeactivate\n```\n\n# 2. How to run\n\nBefore you run any `pynta` calculations, make sure your `balsam` DB is initialized and activated, e.g.\n\n```bash\nbalsam init ~/myWorkflow\nsource balsamactivate ~/myWorkflow\n```\n\nYour prompt should change to something like:\n\n```bash\n~[BalsamDB: myWorkflow] <username>@<host>:\n```\n\nYou will need **4** files to run the workflow:\n\n- `run_me.py` a python script that executes the workflow or alternatively,\n  `restart_me.py` to restart unfinished calculations\n- `run_me.sh` a bash script that submits jobs to the `balsam` database\n- `input.json` a json file holding all user-modifiable parameters of the `pynta`\n- `reactions.yaml` a yaml file with all reactions to be studied\n\nAn example `run_me.py` file:\n\n```python\n#!/usr/bin/env python3\nfrom pynta.main import WorkFlow\n\n\ndef run():\n    # instantiate a WorkFlow() class\n    workflow = WorkFlow()\n    # create all input files\n    workflow.gen_job_files()\n    # execute the workflow\n    workflow.execute_all()\n\n\nif __name__ == '__main__':\n    run()\n```\n\nAn example `run_me.py` file:\n\n```python\n#!/usr/bin/env python3\nfrom pynta.main import WorkFlow\n\n\ndef restart():\n    return WorkFlow().restart()\n\n\nif __name__ == '__main__':\n    restart()\n```\n\nAn example `run_me.sh` file:\n\n```bash\n#!/bin/bash\n#SBATCH -J job_name        # name of the job e.g job_name = pynta_workflow\n#SBATCH --partition=queue  # queue name e.g. queue = day-long-cpu\n#SBATCH --nodes=x          # number of nodes e.g. x = 2\n#SBATCH --ntasks=y         # number of CPUs e.g. 2 x 48 = y = 96\n#SBATCH -e %x.err          # error file name\n#SBATCH -o %x.out          # out file name\n\n# load your quantum chemistry calculation package or provide a path to the\n# executable in 'inputR2S.py'\nmodule load espresso\n\n# activate balsam environment, e.g.\nsource balsamactivate ~/myWorkflow\n\n# run python executable script\npython3 $PWD/run_me.py\n\n# required environment variable if using balsam branch serial-mode-perf and SLURM\nexport SLURM_HOSTS=$(scontrol show hostname)\n\n# launch serial jobs\nbalsam launcher --job-mode=serial --wf-filter _ --limit-nodes=1 --num-transition-threads=1 &\n\n# wait a bit to prevent timeing out you jobs before the sockets are ready\nsleep 45\n\n# launch mpi jobs\nbalsam launcher --job-mode=mpi --wf-filter QE_Sock --offset-nodes=x-1 --num-transition-threads=1 &\n\n# wait until finished\nwait\n\n# deactivate balsam environment\nsource balsamdeactivate\n```\n\nAn example `reactions.yaml` file:\n\n```yaml\n  - index: 0\n    reaction: OHX + X <=> OX + HX\n    reaction_family: Surface_Abstraction\n    reactant: |\n        multiplicity -187\n        1 *1 O u0 p0 c0 {2,S} {4,S}\n        2 *2 H u0 p0 c0 {1,S}\n        3 *3 X u0 p0 c0\n        4    X u0 p0 c0 {1,S}\n    product: |\n        multiplicity -187\n        1 *1 O u0 p0 c0 {4,S}\n        2 *2 H u0 p0 c0 {3,S}\n        3 *3 X u0 p0 c0 {2,S}\n        4    X u0 p0 c0 {1,S}\n    - index: 1\n    reaction: H2OX + X <=> OHX + HX\n    reaction_family: Surface_Abstraction\n    reactant: |\n        multiplicity -187\n        1 *1 O u0 p0 c0 {2,S} {3,S} {4,S}\n        2 *2 H u0 p0 c0 {1,S}\n        3    H u0 p0 c0 {1,S}\n        4    X u0 p0 c0 {1,S}\n        5 *3 X u0 p0 c0\n    product: |\n        multiplicity -187\n        1 *1 O u0 p0 c0 {2,S} {4,S}\n        2 *2 H u0 p0 c0 {1,S}\n        3    H u0 p0 c0 {5,S}\n        4    X u0 p0 c0 {1,S}\n        5 *3 X u0 p0 c0 {3,S}\n```\n\nAn example `inputR2S.py` file:\n\n```json\n{\n  \"quantum_chemistry\": \"espresso\",\n  \"optimize_slab\": true,\n  \"surface_types_and_repeats\": {\n    \"fcc111\": [\n      [3, 3, 1],\n      [1, 1, 4]\n    ]\n  },\n  \"metal_atom\": \"Cu\",\n  \"a\": 3.6,\n  \"vacuum\": 8.0,\n  \"pseudo_dir\": \"/home/mgierad/espresso/pseudo\",\n  \"pseudopotentials\": \"dict(Cu='Cu.pbe-spn-kjpaw_psl.1.0.0.UPF',H='H.pbe-kjpaw_psl.1.0.0.UPF',O='O.pbe-n-kjpaw_psl.1.0.0.UPF',C='C.pbe-n-kjpaw_psl.1.0.0.UPF',N='N.pbe-n-kjpaw_psl.1.0.0.UPF')\",\n  \"executable\": \"/home/mgierad/00_codes/build/q-e-qe-6.4.1/build/bin/pw.x\",\n  \"node_packing_count\": 48,\n  \"balsam_exe_settings\": {\n    \"num_nodes\": 1,\n    \"ranks_per_node\": 48,\n    \"threads_per_rank\": 1\n  },\n  \"calc_keywords\": {\n    \"kpts\": [3, 3, 1],\n    \"occupations\": \"smearing\",\n    \"smearing\": \"marzari-vanderbilt\",\n    \"degauss\": 0.01,\n    \"ecutwfc\": 40,\n    \"nosym\": true,\n    \"conv_thr\": 1e-11,\n    \"mixing_mode\": \"local-TF\"\n  },\n  \"yamlfile\": \"reactions.yaml\",\n  \"scfactor\": 1.4,\n  \"scfactor_surface\": 1.0,\n  \"scaled1\": false,\n  \"scaled2\": false\n}\n```\n\nFor meaning of theses keywords, please check [documentation]()\n\nAn example input files are also located at `./pynta/example_run_files/`\n\n# 3. Documentation\n\nA full documentation is available [here](https://zadorlab.github.io/pynta/).\n\n# Acknowledgments\n\nIf you are using `pynta` or you wish to use it, let me know!\n\n# Copyright Notice\n\nFor five (5) years from 1/19/2021 the United States Government is granted for\nitself and others acting on its behalf a paid-up, nonexclusive, irrevocable\nworldwide license in this data to reproduce, prepare derivative works, and\nperform publicly and display publicly, by or on behalf of the Government. There\nis provision for the possible extension of the term of this license. Subsequent\nto that period or any extension granted, the United States Government is\ngranted for itself and others acting on its behalf a paid-up, nonexclusive,\nirrevocable worldwide license in this data to reproduce, prepare derivative\nworks, distribute copies to the public, perform publicly and display publicly,\nand to permit others to do so. The specific term of the license can be\nidentified by inquiry made to National Technology and Engineering Solutions of\nSandia, LLC or DOE.\n\nNEITHER THE UNITED STATES GOVERNMENT, NOR THE UNITED STATES DEPARTMENT OF\nENERGY, NOR NATIONAL TECHNOLOGY AND ENGINEERING SOLUTIONS OF SANDIA, LLC, NOR\nANY OF THEIR EMPLOYEES, MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY\nLEGAL RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS, OR USEFULNESS OF ANY\nINFORMATION, APPARATUS, PRODUCT, OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS\nUSE WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.\n\nAny licensee of this software has the obligation and responsibility to abide by\nthe applicable export control laws, regulations, and general prohibitions\nrelating to the export of technical data. Failure to obtain an export control\nlicense or other authority from the Government may result in criminal liability\nunder U.S. laws.\n\n# License Notice\n\nCopyright 2021 National Technology & Engineering Solutions of Sandia,\nLLC (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the\nU.S. Government retains certain rights in this software.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://zadorlab.github.io/pynta",
    "keywords": "surface,catalysis,chemistry,physics,hpc,workflow,automation",
    "license": "GPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pynta-flow",
    "package_url": "https://pypi.org/project/pynta-flow/",
    "platform": "",
    "project_url": "https://pypi.org/project/pynta-flow/",
    "project_urls": {
      "Documentation": "https://zadorlab.github.io/pynta",
      "Homepage": "https://zadorlab.github.io/pynta",
      "Source": "https://github.com/zadorlab/pynta"
    },
    "release_url": "https://pypi.org/project/pynta-flow/1.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "An automated workflow for reaction path exploration on metallic surfaces",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10150562,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7cc9aa070b5dc8c825b8cfdc320283057f4aae495309909de7a917c662d707a",
          "md5": "bbf7d508eace71ae8cb8e975f3396140",
          "sha256": "4133433a3dd83f670c3b613ca674182105e1572e4b646c846e36f7031890be37"
        },
        "downloads": -1,
        "filename": "pynta_flow-1.1.0-py3.7.egg",
        "has_sig": false,
        "md5_digest": "bbf7d508eace71ae8cb8e975f3396140",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.6",
        "size": 211455,
        "upload_time": "2021-01-29T18:11:24",
        "upload_time_iso_8601": "2021-01-29T18:11:24.394140Z",
        "url": "https://files.pythonhosted.org/packages/d7/cc/9aa070b5dc8c825b8cfdc320283057f4aae495309909de7a917c662d707a/pynta_flow-1.1.0-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab25cddda5959321fc59e726369ff07ceb153d284f88954de8df8ca691f4ebe3",
          "md5": "d38c335ea567c25fac9d9cd1d2d2651d",
          "sha256": "97751966ab951cee61e6fac7fb13893e6793d66284414ea293f5f250158eea19"
        },
        "downloads": -1,
        "filename": "pynta_flow-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d38c335ea567c25fac9d9cd1d2d2651d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 109370,
        "upload_time": "2021-01-29T18:11:10",
        "upload_time_iso_8601": "2021-01-29T18:11:10.040293Z",
        "url": "https://files.pythonhosted.org/packages/ab/25/cddda5959321fc59e726369ff07ceb153d284f88954de8df8ca691f4ebe3/pynta_flow-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a92a46c89dcd93b1182c49f386d0d475e95ffdb1467dd2f0c3da6ac7568655a1",
          "md5": "34830aa48166719560188e83f316c632",
          "sha256": "5d5ada6f9f1ba70ffccf6a3ccd69d4aa14bb4f93e99f967ca0ef716ad1cb54b5"
        },
        "downloads": -1,
        "filename": "pynta-flow-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34830aa48166719560188e83f316c632",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1484831,
        "upload_time": "2021-01-29T18:11:21",
        "upload_time_iso_8601": "2021-01-29T18:11:21.786909Z",
        "url": "https://files.pythonhosted.org/packages/a9/2a/46c89dcd93b1182c49f386d0d475e95ffdb1467dd2f0c3da6ac7568655a1/pynta-flow-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "386b1a1f392f6748a7fd2a7c9e184acd9c4440b01120440428548da262fa47ae",
          "md5": "9ec8eb5ae17a2a6b6a7aff3bdc4a9abb",
          "sha256": "9b52016547730035e92cbea194ad3cb2fd536355d902e48d01cd6fb71c52de9b"
        },
        "downloads": -1,
        "filename": "pynta-flow-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9ec8eb5ae17a2a6b6a7aff3bdc4a9abb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1489116,
        "upload_time": "2021-04-23T12:20:02",
        "upload_time_iso_8601": "2021-04-23T12:20:02.648305Z",
        "url": "https://files.pythonhosted.org/packages/38/6b/1a1f392f6748a7fd2a7c9e184acd9c4440b01120440428548da262fa47ae/pynta-flow-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "386b1a1f392f6748a7fd2a7c9e184acd9c4440b01120440428548da262fa47ae",
        "md5": "9ec8eb5ae17a2a6b6a7aff3bdc4a9abb",
        "sha256": "9b52016547730035e92cbea194ad3cb2fd536355d902e48d01cd6fb71c52de9b"
      },
      "downloads": -1,
      "filename": "pynta-flow-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9ec8eb5ae17a2a6b6a7aff3bdc4a9abb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 1489116,
      "upload_time": "2021-04-23T12:20:02",
      "upload_time_iso_8601": "2021-04-23T12:20:02.648305Z",
      "url": "https://files.pythonhosted.org/packages/38/6b/1a1f392f6748a7fd2a7c9e184acd9c4440b01120440428548da262fa47ae/pynta-flow-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}