{
  "info": {
    "author": "PaodingAI",
    "author_email": "opensource@paodingai.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# AIPOD\n\nAIPOD 是一个 AI 模型服务框架：\n- 约定 AI 模型提供的接口（初始化/训练/预测/日志等）\n- 基于模型定义，启动一个 RPC 服务，并提供 RPC client\n\n\n## 模型接入步骤\n通过 AIPOD 接入模型的过程大致如下\n\n服务端：\n```py\nfrom aipod.model import AIModelBase\nfrom aipod.rpc.server import serve\n\nclass UserModel(AIModelBase):\n    def train(self, **kwargs):\n        # 在此实现训练过程\n        pass\n\n    def predict(self, **kwargs):\n        # 在此实现预测过程\n        pass\n\n# 启动一个加载了 UserModel 模型的 rpc 服务\nserve(UserModel)\n```\n\n客户端：\n```py\nfrom aipod.rpc.client import AIClient\n\n\nmodel = AIClient(address=\"{rpc_server_address}\", version=\"{model_version}\")\n\n# 初始化(仅模型训练前需要初始化)\nmodel.initialize(**model_configs)\n\n# 训练\nmodel.train(**trainning_options)\n\n# 查看训练日志（训练进度、评估结果等，非必要）\nlogs = model.log()\n\n# 预测\nresult = model.predict(**input_data)\n```\n\n类方法关系如下（以 predict 为例）\n```\nclass AIClient(AIModelBase) -> AIClient.predict(**input_data)\n   ↓\nRPC Server\n   ↓\nclass UserModel(AIModelBase) -> UserModel.predict(**input_data)\n```\n\n因此自定义模型，即是基于 `aipod.model.AIModelBase` 实现一个模型类，其中主要是 `训练` 和 `预测` 方法\n\n\n## 模型封装\n- AIPOD 使用 `aipod.model.AIModelBase` 类对模型进行了定义，主要包括以下方法：\n    - `AIModelBase.initialize()` 模型初始化\n    - `AIModelBase.train()` 模型训练\n    - `AIModelBase.predict()` 模型预测\n    - `AIModelBase.log()` 查看日志\n- 以上方法使用 `**kwargs` 传递任意所需参数，由于需要通过网络传递，输入/输出均需要是可序列化的数据类型\n    - 其中有一个保留关键字 `binary_data` 用于传递二进制数据\n    - 如需传递海量的训练数据，建议使用接入共享/网络存储的方式，参数部分只传路径\n- 在模型训练前需调用 `AIModelBase.initialize()` 初始化模型数据文件夹，同时会将 initialize 所有的参数作为模型参数保存下来，之后通过 `AIModelBase.model_info` 进行访问\n    - `AIModelBase.model_dir()` 方法会返回此模型实例对应的文件夹位置，在训练/预测过程中所有相关数据应存放在此文件夹下\n- 无需在线训练的模型项目，也可以只实现 `AIModelBase.predict()` 方法，加载自有模型进行预测\n\n\n## 模型服务\n- 经 AIModelBase 封装好的模型类可以通过 `serve(UserAIModel)` 启动一个 rpc 服务，客户端即可使用 AIClient 进行调用\n- 模型服务会负载某一个模型类，且支持多个模型实例，由 `AIClient` 的 `version` 参数进行区分\n- 为了减少模型加载时间带来的影响，模型服务会缓存加载好的模型实例，但由于显存的限制，需要通过 `AIPOD_MODEL_POOL_SIZE` 环境变量配置最大同时加载的模型实例数量（超出会进行 LRU 淘汰）\n- 模型服务可由环境变量进行控制，列表如下：\n    - `AIPOD_LISTEN_PORT`：rpc 服务监听端口，默认为 `50051`\n    - `AIPOD_DATA_PATH`：模型数据存放路径，默认为 `appdata/`\n    - `AIPOD_MODEL_POOL_SIZE`：服务内模型缓存池大小，默认为 `1`\n    - `AIPOD_RPC_MAX_WORKERS`：RPC 服务线程池大小，默认为 `12`\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PaodingAI/aipod",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aipod",
    "package_url": "https://pypi.org/project/aipod/",
    "platform": "",
    "project_url": "https://pypi.org/project/aipod/",
    "project_urls": {
      "Homepage": "https://github.com/PaodingAI/aipod"
    },
    "release_url": "https://pypi.org/project/aipod/1.0.0/",
    "requires_dist": [
      "grpcio-tools (<2.0.0,>=1.32.0)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "A framework for packaging the models provided by the AI.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10461919,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7ac259489d921d90d0f3bedf056f1d7f76e247996569607919f7445a2651f8c",
          "md5": "ff1388ba063ebb5150ae6e74e15897dd",
          "sha256": "e3129f3f6e26b52068c2be443b07e8c6889fbbd28a1fb622c8641e113c3e5335"
        },
        "downloads": -1,
        "filename": "aipod-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff1388ba063ebb5150ae6e74e15897dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 11462,
        "upload_time": "2020-12-01T10:05:14",
        "upload_time_iso_8601": "2020-12-01T10:05:14.985913Z",
        "url": "https://files.pythonhosted.org/packages/c7/ac/259489d921d90d0f3bedf056f1d7f76e247996569607919f7445a2651f8c/aipod-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2143abdc7f8d9f21d61ad9f3abfff23031d33217ebf6fdb4eef4e8a5794beb11",
          "md5": "f619a502f772c44598d3492451d00bd8",
          "sha256": "5585b2bd145d9aec068ea98a6063c36fb50240569e246c251a34b6ba3cce0016"
        },
        "downloads": -1,
        "filename": "aipod-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f619a502f772c44598d3492451d00bd8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 11458,
        "upload_time": "2020-12-01T10:16:47",
        "upload_time_iso_8601": "2020-12-01T10:16:47.051261Z",
        "url": "https://files.pythonhosted.org/packages/21/43/abdc7f8d9f21d61ad9f3abfff23031d33217ebf6fdb4eef4e8a5794beb11/aipod-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6aec074104c8e16bb0aec2e6c65491821e6ab3cfbb28c344fc6d0f33646f83a",
          "md5": "9079bff34019abb633ae793958d660c2",
          "sha256": "ebb86d6ceb153f92f25a3c54d48102641381c9461c386d42cb82a8c00485ddd4"
        },
        "downloads": -1,
        "filename": "aipod-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9079bff34019abb633ae793958d660c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 11458,
        "upload_time": "2020-12-07T03:12:13",
        "upload_time_iso_8601": "2020-12-07T03:12:13.841687Z",
        "url": "https://files.pythonhosted.org/packages/e6/ae/c074104c8e16bb0aec2e6c65491821e6ab3cfbb28c344fc6d0f33646f83a/aipod-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6aec074104c8e16bb0aec2e6c65491821e6ab3cfbb28c344fc6d0f33646f83a",
        "md5": "9079bff34019abb633ae793958d660c2",
        "sha256": "ebb86d6ceb153f92f25a3c54d48102641381c9461c386d42cb82a8c00485ddd4"
      },
      "downloads": -1,
      "filename": "aipod-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9079bff34019abb633ae793958d660c2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 11458,
      "upload_time": "2020-12-07T03:12:13",
      "upload_time_iso_8601": "2020-12-07T03:12:13.841687Z",
      "url": "https://files.pythonhosted.org/packages/e6/ae/c074104c8e16bb0aec2e6c65491821e6ab3cfbb28c344fc6d0f33646f83a/aipod-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}