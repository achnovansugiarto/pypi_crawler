{
  "info": {
    "author": "Akshay",
    "author_email": "akshaysuhag1996@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# MLcps\n**MLcps: Machine Learning cumulative performance score** is a performance metric that combines multiple performance metrics and reports a cumulative score enabling researchers to compare the ML models using a single metric. MLcps provides a comprehensive platform to identify the best-performing ML model on any given dataset.\n\n### ***Note***  \nIf you want to use MLcps without installing it on your local machine, please click here [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/FunctionalUrology/MLcps.git/main). It will launch a Jupyterlab server (all the requirements for MLcps are pre-installed ) where you can run the already available example Jupyter notebook for MLcps analysis. It may take a while to launch! You can also upload your data or notebook to perform the analysis.\n\n# Prerequisites\n\n1. Python >=3.8\n2. R >=4.0. R should be accessible through terminal/command prompt.\n3. ```radarchart, tibble,``` and ```dplyr``` R packages. MLcps can install all these packages at first import if unavailable, but we highly recommend installing them before using MLcps. The user could run the following R code in the R environment to install them:\n```\n## Install the unavailable packages\ninstall.packages(c('radarchart','tibble','dplyr'),dependencies = TRUE,repos=\"https://cloud.r-project.org\")                         \n ```\n\n# Installation\n```\npip install MLcps\n```\n\n# Binder environment for MLcps\n\nAs an alternative, we have built a binder computational environment where all the requirements are pre-installed for MLcps.\nIt allows the user to ***use MLcps without any installation***.\n\nPlease click here [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/FunctionalUrology/MLcps.git/main) to launch the Jupyterlab server where you can run the already available example Jupyter notebook for MLcps analysis. It may take a while to launch! You can also upload your data or notebook to perform the analysis.\n\n# Usage\n#### **Quick Start**\n```python\n#import MLcps\nfrom MLcps import getCPS\n\n#calculate Machine Learning cumulative performance score\ncps=getCPS.calculate(object)\n```  \n> * ***object***: A pandas dataframe where rows are different metrics scores and columns are different ML models. **Or** a GridSearchCV object.\n> * ***cps***: A pandas dataframe with models name and corresponding MLcps. **Or** a GridSearchCV object.\n\n#### **Example 0.1**\nCreate Input dataframe for MLcps\n\n```python\nimport pandas as pd\nmetrics_list=[]\n\n#Metrics from SVC model (kernel=rbf)\nacc = 0.88811 #accuracy\nbacc = 0.86136 #balanced_accuracy\nprec = 0.86 #precision\nrec = 0.97727 #recall\nf1 = 0.91489 #F1\nmcc = 0.76677 #Matthews_correlation_coefficient\nmetrics_list.append([acc,bacc,prec,rec,f1,mcc])\n\n#Metrics from SVC model (kernel=linear)\nacc = 0.88811\nbacc = 0.87841\nprec = 0.90\nrec = 0.92045\nf1 = 0.91011\nmcc = 0.76235\nmetrics_list.append([acc,bacc,prec,rec,f1,mcc])\n\n#Metrics from KNN\nacc = 0.78811\nbacc = 0.82841\nprec = 0.80\nrec = 0.82\nf1 = 0.8911\nmcc = 0.71565\nmetrics_list.append([acc,bacc,prec,rec,f1,mcc])\n\nmetrics=pd.DataFrame(metrics_list,index=[\"SVM rbf\",\"SVM linear\",\"KNN\"],\n                     columns=[\"accuracy\",\"balanced_accuracy\",\"precision\",\"recall\",\n                              \"f1\",\"Matthews_correlation_coefficient\"])\nprint(metrics)\n```\n\n#### **Example 1**\nCalculate MLcps for a pandas dataframe where rows are different metrics scores and columns are different ML models.\n\n```python\n#import MLcps\nfrom MLcps import getCPS\n\n#read input data (a dataframe) or load an example data\nmetrics=getCPS.sample_metrics()\n\n#calculate Machine Learning cumulative performance score\ncpsScore=getCPS.calculate(metrics)\nprint(cpsScore)\n\n#########################################################\n#plot MLcps\nimport plotly.express as px\nfrom plotly.offline import plot\nimport plotly.io as pio\npio.renderers.default = 'iframe' #or pio.renderers.default = 'browser'\n\nfig = px.bar(cpsScore, x='Score', y='Algorithms',color='Score',labels={'MLcps Score'},\n             width=700,height=1000,text_auto=True)\n\nfig.update_xaxes(title_text=\"MLcps\")\nplot(fig)\nfig\n```\n\n\n#### **Example 2**\nCalculate MLcps using the mean test score of all the metrics available in the given GridSearch object and return an updated GridSearch object. Returned GridSearch object contains ```mean_test_MLcps``` and ```rank_test_MLcps``` arrays, which can be used to rank the models similar to any other metric.\n\n```python\n#import MLcps\nfrom MLcps import getCPS\n\n#load GridSearch object or load it from package\ngsObj=getCPS.sample_GridSearch_Object()\n\n#calculate Machine Learning cumulative performance score\ngsObj_updated=getCPS.calculate(gsObj)\n\n#########################################################\n#access MLcps\nprint(\"MLcps: \",gsObj_updated.cv_results_[\"mean_test_MLcps\"])\n\n#access rank array based on MLcps\nprint(\"Ranking based on MLcps:\",gsObj_updated.cv_results_[\"rank_test_MLcps\"])\n```  \n\n#### **Example 3**\nCertain metrics are more significant than others in some cases. As an example, if the dataset is imbalanced, a high F1 score might be preferred to higher accuracy. A user can provide weights for metrics of interest while calculating MLcps in such a scenario. Weights should be a dictionary object where keys are metric names and values are corresponding weights. It can be passed as a parameter in ```getCPS.calculate()``` function.\n\n  * **3.a)**\n\n```python\n#import MLcps\nfrom MLcps import getCPS\n\n#read input data (a dataframe) or load an example data\nmetrics=getCPS.sample_metrics()\n\n#define weights\nweights={\"Accuracy\":0.75,\"F1\": 1.25}\n\n#calculate Machine Learning cumulative performance score\ncpsScore=getCPS.calculate(metrics,weights)\nprint(cpsScore)\n\n#########################################################\n#plot weighted MLcps\nimport plotly.express as px\nfrom plotly.offline import plot\nimport plotly.io as pio\npio.renderers.default = 'iframe' #or pio.renderers.default = 'browser'\n\nfig = px.bar(cpsScore, x='Score', y='Algorithms',color='Score',labels={'MLcps Score'},\n             width=700,height=1000,text_auto=True)\n\nfig.update_xaxes(title_text=\"MLcps\")\nplot(fig)\nfig\n```  \n  * **3.b)**\n```python\n#import MLcps\nfrom MLcps import getCPS\n\n#########################################################\n#load GridSearch object or load it from package\ngsObj=getCPS.sample_GridSearch_Object()\n\n#define weights\nweights={\"accuracy\":0.75,\"f1\": 1.25}\n\n#calculate Machine Learning cumulative performance score\ngsObj_updated=getCPS.calculate(gsObj,weights)\n\n#########################################################\n#access MLcps\nprint(\"MLcps: \",gsObj_updated.cv_results_[\"mean_test_MLcps\"])\n\n#access rank array based on MLcps\nprint(\"Ranking based on MLcps:\",gsObj_updated.cv_results_[\"rank_test_MLcps\"])\n\n```  \n\n# Links\n<!--* For a general introduction of the tool and how to setting up MLcps:\n  * Please watch  MLcps **[Setup video tutorial]()** (coming soon).  \n  *  Please watch MLcps **[Introduction video tutorial]()** (coming soon).\n-->\n* MLcps source code and a Jupyter notebook with sample analyses is available on the **[MLcps GitHub repository](https://github.com/FunctionalUrology/MLcps/blob/main/Example-Notebook.ipynb)** and binder [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/FunctionalUrology/MLcps.git/main).\n* Please use the  **[MLcps GitHub](https://github.com/FunctionalUrology/MLcps/issues)** repository to report all the issues.\n\n# Citations Information\nIf **MLcps** in any way help you in your research work, please cite the MLcps publication.\n***\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FunctionalUrology/MLcps",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MLcps",
    "package_url": "https://pypi.org/project/MLcps/",
    "platform": null,
    "project_url": "https://pypi.org/project/MLcps/",
    "project_urls": {
      "Bug Tracker": "https://github.com/FunctionalUrology/MLcps/issues",
      "Homepage": "https://github.com/FunctionalUrology/MLcps"
    },
    "release_url": "https://pypi.org/project/MLcps/0.0.6/",
    "requires_dist": [
      "rpy2",
      "pandas",
      "scikit-learn",
      "imbalanced-learn",
      "plotly"
    ],
    "requires_python": ">=3.8",
    "summary": "Calculate a Machine Learning (ML) performance metric called MLcps: ML Cumulative Performance Score.",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15321904,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcec6397e351c9854bb89d4e5bc58fd607e549f2d74d5f915baa3c33f00e3767",
          "md5": "3abaa604f40ee6fa04394a16171520b9",
          "sha256": "dee0978179c92dbe91e8d3ed7ef347475ba7574460a51012b0faa5fe6a5caece"
        },
        "downloads": -1,
        "filename": "MLcps-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3abaa604f40ee6fa04394a16171520b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 176091,
        "upload_time": "2022-09-26T09:09:34",
        "upload_time_iso_8601": "2022-09-26T09:09:34.539449Z",
        "url": "https://files.pythonhosted.org/packages/bc/ec/6397e351c9854bb89d4e5bc58fd607e549f2d74d5f915baa3c33f00e3767/MLcps-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca6efe748e01ab625537f847d75a81e343ca2382944df6243328597b66159f07",
          "md5": "04208c4bd1e7bc8b03db3a95e24f57c6",
          "sha256": "2550a7afb5f3ade07cba0f2d8095c7115d19f888ea3623b4fe324c8a2daa90ca"
        },
        "downloads": -1,
        "filename": "MLcps-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "04208c4bd1e7bc8b03db3a95e24f57c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 171368,
        "upload_time": "2022-09-26T09:09:36",
        "upload_time_iso_8601": "2022-09-26T09:09:36.721133Z",
        "url": "https://files.pythonhosted.org/packages/ca/6e/fe748e01ab625537f847d75a81e343ca2382944df6243328597b66159f07/MLcps-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd1ce112e76fc3314d91e3c29aa306f198870fd63bfce52a8adbfae23e899856",
          "md5": "72d3511d86d41de2c375e2ec66dd5337",
          "sha256": "84826de53aeeb78008582b1b3ad4c3e07b185f43e977927a0448ca4f5cc07405"
        },
        "downloads": -1,
        "filename": "MLcps-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72d3511d86d41de2c375e2ec66dd5337",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 176088,
        "upload_time": "2022-09-26T09:11:10",
        "upload_time_iso_8601": "2022-09-26T09:11:10.892731Z",
        "url": "https://files.pythonhosted.org/packages/cd/1c/e112e76fc3314d91e3c29aa306f198870fd63bfce52a8adbfae23e899856/MLcps-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ecb32e67ad37dcf21ac9bf5ac5e79d0e907ed9763e398876edb8beebfa10369",
          "md5": "f3e74e3e0067b881f6325e061e99d520",
          "sha256": "223c1a21a10a5c7a3c057d1919cbcf943e05cab7241a4520d3719492cf938123"
        },
        "downloads": -1,
        "filename": "MLcps-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f3e74e3e0067b881f6325e061e99d520",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 171366,
        "upload_time": "2022-09-26T09:11:12",
        "upload_time_iso_8601": "2022-09-26T09:11:12.570027Z",
        "url": "https://files.pythonhosted.org/packages/7e/cb/32e67ad37dcf21ac9bf5ac5e79d0e907ed9763e398876edb8beebfa10369/MLcps-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87c772cfd8fcbadafc552903f55596b6c126fe1eabfa97eeb020d1f19ae051ca",
          "md5": "2bf1ef7e22a2a448d4e7e85effdbdb39",
          "sha256": "d7bd03148a8f06d65b49242510ad31320ef108fb190b06b65cad90c7e232692c"
        },
        "downloads": -1,
        "filename": "MLcps-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2bf1ef7e22a2a448d4e7e85effdbdb39",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 176091,
        "upload_time": "2022-09-26T09:16:40",
        "upload_time_iso_8601": "2022-09-26T09:16:40.555753Z",
        "url": "https://files.pythonhosted.org/packages/87/c7/72cfd8fcbadafc552903f55596b6c126fe1eabfa97eeb020d1f19ae051ca/MLcps-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "447d4da0af0a5ffa6c936589b6ea0143df9e65a9e6576096a43f3c645700e4f7",
          "md5": "02508f44512d7ba80f0f4f5030c55568",
          "sha256": "83a38d6766efe3401e8ea3cf06c9f4ccb14067703cc444e4621435fea1839101"
        },
        "downloads": -1,
        "filename": "MLcps-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "02508f44512d7ba80f0f4f5030c55568",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 171363,
        "upload_time": "2022-09-26T09:16:43",
        "upload_time_iso_8601": "2022-09-26T09:16:43.023228Z",
        "url": "https://files.pythonhosted.org/packages/44/7d/4da0af0a5ffa6c936589b6ea0143df9e65a9e6576096a43f3c645700e4f7/MLcps-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c58b999fd107f3eeb3de0c269faa22baac18a3bae79e6033d6a184f358d5548",
          "md5": "5debd83d5954bba59c32667e5ef4d6de",
          "sha256": "aaa4788bc4e8bbed07d14249109483f3c9f74c74e4e4ff8db16f8a8d1eeb39b8"
        },
        "downloads": -1,
        "filename": "MLcps-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5debd83d5954bba59c32667e5ef4d6de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 176087,
        "upload_time": "2022-09-26T09:27:33",
        "upload_time_iso_8601": "2022-09-26T09:27:33.914886Z",
        "url": "https://files.pythonhosted.org/packages/3c/58/b999fd107f3eeb3de0c269faa22baac18a3bae79e6033d6a184f358d5548/MLcps-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38353e697b3cb35278e93192027ba520a98a6746f37744a25b5273fe44964a92",
          "md5": "2f81a3648ef7e2f001330624fa7e3666",
          "sha256": "ad837e95c6827df4928bce0fd82fa8dde0bf6dba64d8febcce0b431d9a723029"
        },
        "downloads": -1,
        "filename": "MLcps-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2f81a3648ef7e2f001330624fa7e3666",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 171412,
        "upload_time": "2022-09-26T09:27:35",
        "upload_time_iso_8601": "2022-09-26T09:27:35.922775Z",
        "url": "https://files.pythonhosted.org/packages/38/35/3e697b3cb35278e93192027ba520a98a6746f37744a25b5273fe44964a92/MLcps-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1de9aacb11c151f9819da365275606f07bbb8b2cf3751c57b627312a200638a",
          "md5": "6433f8aabf7f7a8f2ee2021ce2b01f8c",
          "sha256": "fb63a0a2e9255076f8452134e3f730b189b72c5ba5bf9a455f310b90349898e4"
        },
        "downloads": -1,
        "filename": "MLcps-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6433f8aabf7f7a8f2ee2021ce2b01f8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 176538,
        "upload_time": "2022-10-06T10:59:37",
        "upload_time_iso_8601": "2022-10-06T10:59:37.150918Z",
        "url": "https://files.pythonhosted.org/packages/b1/de/9aacb11c151f9819da365275606f07bbb8b2cf3751c57b627312a200638a/MLcps-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2ed47b51c0d02a0cfc679b6cbeb199309e782a02a0ee96bba722d600e9b51ac",
          "md5": "58d406f632403708f2fb9ea90050fdf4",
          "sha256": "341d45d8529f7224234ca74139b2219c9a6f5c89ac9025d9890efeeaca17b97f"
        },
        "downloads": -1,
        "filename": "MLcps-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "58d406f632403708f2fb9ea90050fdf4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 172014,
        "upload_time": "2022-10-06T10:59:43",
        "upload_time_iso_8601": "2022-10-06T10:59:43.352598Z",
        "url": "https://files.pythonhosted.org/packages/d2/ed/47b51c0d02a0cfc679b6cbeb199309e782a02a0ee96bba722d600e9b51ac/MLcps-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b1de9aacb11c151f9819da365275606f07bbb8b2cf3751c57b627312a200638a",
        "md5": "6433f8aabf7f7a8f2ee2021ce2b01f8c",
        "sha256": "fb63a0a2e9255076f8452134e3f730b189b72c5ba5bf9a455f310b90349898e4"
      },
      "downloads": -1,
      "filename": "MLcps-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6433f8aabf7f7a8f2ee2021ce2b01f8c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 176538,
      "upload_time": "2022-10-06T10:59:37",
      "upload_time_iso_8601": "2022-10-06T10:59:37.150918Z",
      "url": "https://files.pythonhosted.org/packages/b1/de/9aacb11c151f9819da365275606f07bbb8b2cf3751c57b627312a200638a/MLcps-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2ed47b51c0d02a0cfc679b6cbeb199309e782a02a0ee96bba722d600e9b51ac",
        "md5": "58d406f632403708f2fb9ea90050fdf4",
        "sha256": "341d45d8529f7224234ca74139b2219c9a6f5c89ac9025d9890efeeaca17b97f"
      },
      "downloads": -1,
      "filename": "MLcps-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "58d406f632403708f2fb9ea90050fdf4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 172014,
      "upload_time": "2022-10-06T10:59:43",
      "upload_time_iso_8601": "2022-10-06T10:59:43.352598Z",
      "url": "https://files.pythonhosted.org/packages/d2/ed/47b51c0d02a0cfc679b6cbeb199309e782a02a0ee96bba722d600e9b51ac/MLcps-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}