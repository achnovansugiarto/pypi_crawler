{
  "info": {
    "author": "David Heller",
    "author_email": "heller_d@molgen.mpg.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "SVIM-asm - Structural variant identification method (Assembly edition)\n======================================================================\n\n.. image:: https://img.shields.io/pypi/v/svim-asm?style=flat\n    :target: https://pypi.org/project/svim-asm/\n\n.. image:: https://img.shields.io/conda/vn/bioconda/svim-asm?style=flat\n    :target: https://anaconda.org/bioconda/svim-asm\n\n.. image:: https://img.shields.io/conda/dn/bioconda/svim-asm?label=bioconda%20downloads&style=flat\n    :target: https://anaconda.org/bioconda/svim-asm\n\nSVIM-asm (pronounced *SWIM-assem*) is a structural variant caller for haploid or diploid genome-genome alignments.\nIt analyzes a given sorted BAM file (preferably from minimap2) and detects five different variant classes between the query assembly and the reference: deletions, insertions, tandem and interspersed duplications and inversions.\n\n**Note!** To analyze raw long sequencing reads please use our other method `SVIM <https://github.com/eldariont/svim>`_.\n\nBackground\n----------\n\n.. image:: https://raw.githubusercontent.com/eldariont/svim/master/docs/SVclasses.png\n    :align: center\n\nStructural variants (SVs) are typically defined as genomic variants larger than 50bps (e.g. deletions, duplications, inversions).\nStudies have shown that they affect more bases in an average genome than all SNPs or all small Indels together.\nConsequently, they have a large impact on genes and regulatory regions.\nThis is reflected in the large number of genetic disorders and other disease that are associated to SVs.\n\nNowadays, SVs are usually detected using data from second-generation sequencing (Illumina) or third-generation sequencing (PacBio and Oxford Nanopore).\nTypically, the reads from a sequencing experiment are first aligned to a reference genome before the alignments are analyzed for characteristic signatures of SVs.\nRecently, substantial advances in sequencing technology and software development have made the de novo assembly of large mammalian genomes more efficient than ever.\nAccurate assemblies of the human genome can now be generated in a few days and at a fraction of its former cost. `(Shafin et al.) <https://doi.org/10.1038/s41587-020-0503-6>`_\n\nSimilarly to raw sequencing reads, the genome assemblies can be aligned to another genome to uncover genomic rearrangements and structural variants.\nOur tool, SVIM-asm, detects structural variants between different assemblies or reference genomes from given genome-genome alignments.\nIt is fast (<5 min for a human genome-genome alignment), easy to use and detects all major variant types.\n\nInstallation\n------------\n\nSVIM-asm can be installed most easily using conda:\n\n.. code-block:: bash\n\n    #Recommended: Install via conda into a new environment\n    conda create -n svimasm_env --channel bioconda svim-asm\n\n    #Alternatively: Install via conda into existing (active) environment\n    conda install --channel bioconda svim-asm\n\nAlternatively, SVIM-asm can be installed using `pip`:\n\n.. code-block:: bash\n\n    #Install from github (requires Python 3)\n    git clone https://github.com/eldariont/svim-asm.git\n    cd svim-asm\n    pip install .\n\nChangelog\n---------\n- **v1.0.2**: change default value for partitioning, fix coordinates of BNDs and sorting of VCF records, add verbose mode\n- **v1.0.1**: reduce memory consumption substantially\n- **v1.0.0**: add genotyping of translocation breakpoints (BNDs), bugfixes\n- **v0.1.1**: improve breakend detection, add FORMAT:CN tag for tandem duplications, add two new command-line options to output duplications as INS records in VCF, bugfixes\n- **v0.1.0**: initial beta release\n\nExecution\n---------\n\nSVIM-asm analyzes alignments between a query assembly and a reference assembly in SAM/BAM format. \nWe recommend to produce the alignments using `minimap2 <https://github.com/lh3/minimap2>`_.\nSee this example for a haploid query assembly:\n\n.. code-block:: bash\n\n    minimap2 -a -x asm5 --cs -r2k -t <num_threads> <reference.fa> <assembly.fasta> > <alignments.sam>\n    samtools sort -m4G -@4 -o <alignments.sorted.bam> <alignments.sam>\n    samtools index <alignments.sorted.bam>\n    svim-asm haploid <working_dir> <alignments.sorted.bam> <reference.fa>\n\nTo analyze a diploid assembly consisting of two haplotypes, you need to align both to the reference assembly: \n\n.. code-block:: bash\n\n    minimap2 -a -x asm5 --cs -r2k -t <num_threads> <reference.fa> <haplotype1.fasta> > <alignments_hap1.sam>\n    minimap2 -a -x asm5 --cs -r2k -t <num_threads> <reference.fa> <haplotype2.fasta> > <alignments_hap2.sam>\n    samtools sort -m4G -@4 -o <alignments_hap1.sorted.bam> <alignments_hap1.sam>\n    samtools sort -m4G -@4 -o <alignments_hap2.sorted.bam> <alignments_hap2.sam>\n    samtools index <alignments_hap1.sorted.bam\n    samtools index <alignments_hap2.sorted.bam\n    svim-asm diploid <working_dir> <alignments_hap1.sorted.bam> <alignments_hap2.sorted.bam> <reference.fa>\n\nOutput\n------\n\nSVIM-asm creates all output files in the given working directory.\nThe following files are produced:\n\n- ``variants.vcf`` contains the detected SVs in VCF format (see http://samtools.github.io/hts-specs/VCFv4.2.pdf)\n- ``sv-lengths.png`` contains a histogram of SV sizes\n- ``SVIM_<day>_<time>.log`` contains the same logging output as the command line \n\nContact\n-------\n\nIf you experience problems or have suggestions please create an issue or a pull request or contact heller_d@molgen.mpg.de.\n\nCitation\n---------\n\nFeel free to read and cite our paper in Bioinformatics: `SVIM-asm: Structural variant detection from haploid and diploid genome assemblies <https://doi.org/10.1093/bioinformatics/btaa1034>`_\n\nLicense\n-------\n\nThe project is licensed under the GNU General Public License.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eldariont/svim-asm",
    "keywords": "svim-asm SV assembly structural variation caller",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "svim-asm",
    "package_url": "https://pypi.org/project/svim-asm/",
    "platform": null,
    "project_url": "https://pypi.org/project/svim-asm/",
    "project_urls": {
      "Homepage": "https://github.com/eldariont/svim-asm"
    },
    "release_url": "https://pypi.org/project/svim-asm/1.0.3/",
    "requires_dist": [
      "pysam",
      "numpy",
      "scipy",
      "matplotlib",
      "edlib"
    ],
    "requires_python": "",
    "summary": "A structural variant caller for genome-genome alignments.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15121315,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd4cefe1a4df89ef82c98330f86b259541ee0402aa3646eeaf9495b875734dc6",
          "md5": "f20a33067e4739a189ea011b0f7987d4",
          "sha256": "a2f9ff82fd15695f61f42390e067a026cf0efe1af7a26de5c661082e9b3da3b8"
        },
        "downloads": -1,
        "filename": "svim_asm-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f20a33067e4739a189ea011b0f7987d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 53646,
        "upload_time": "2020-11-25T09:04:41",
        "upload_time_iso_8601": "2020-11-25T09:04:41.794126Z",
        "url": "https://files.pythonhosted.org/packages/bd/4c/efe1a4df89ef82c98330f86b259541ee0402aa3646eeaf9495b875734dc6/svim_asm-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "35bb0a1f71ca0eae62b55237814ca4036964b9ad354e720dc693f4e8c90de415",
          "md5": "d205af720b38382e5ad8e9fbde052621",
          "sha256": "7aaf6d588ac9b1115c6d2b9a4a28669e5aa4799d4e61c4a0e60de6d226bf2010"
        },
        "downloads": -1,
        "filename": "svim-asm-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d205af720b38382e5ad8e9fbde052621",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 234405,
        "upload_time": "2020-11-25T09:04:43",
        "upload_time_iso_8601": "2020-11-25T09:04:43.472325Z",
        "url": "https://files.pythonhosted.org/packages/35/bb/0a1f71ca0eae62b55237814ca4036964b9ad354e720dc693f4e8c90de415/svim-asm-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c81dc17fab33113629672840ee6ef30bc8c9bda3a72295a45e1d13c85e2f6d51",
          "md5": "ec6e43a4ce4870d2c5f2f442b9460fd8",
          "sha256": "d977a51d2ca81ee391abc0e36c462cd84784201c69d2efdee71c732d447aaf66"
        },
        "downloads": -1,
        "filename": "svim-asm-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ec6e43a4ce4870d2c5f2f442b9460fd8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 235190,
        "upload_time": "2021-01-20T10:58:20",
        "upload_time_iso_8601": "2021-01-20T10:58:20.651829Z",
        "url": "https://files.pythonhosted.org/packages/c8/1d/c17fab33113629672840ee6ef30bc8c9bda3a72295a45e1d13c85e2f6d51/svim-asm-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec6f07e1050b40a1bace3b59b14b953e249f712a67b0ef1376441beb12b2ec18",
          "md5": "5c19c25cb89a952a3040acb0e20eeaf3",
          "sha256": "ccc55822fd070b9cfa468c7f77223319f1acccf91a467543c9d04592c5824b1d"
        },
        "downloads": -1,
        "filename": "svim_asm-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c19c25cb89a952a3040acb0e20eeaf3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 54105,
        "upload_time": "2022-09-16T19:53:35",
        "upload_time_iso_8601": "2022-09-16T19:53:35.595360Z",
        "url": "https://files.pythonhosted.org/packages/ec/6f/07e1050b40a1bace3b59b14b953e249f712a67b0ef1376441beb12b2ec18/svim_asm-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec6f07e1050b40a1bace3b59b14b953e249f712a67b0ef1376441beb12b2ec18",
        "md5": "5c19c25cb89a952a3040acb0e20eeaf3",
        "sha256": "ccc55822fd070b9cfa468c7f77223319f1acccf91a467543c9d04592c5824b1d"
      },
      "downloads": -1,
      "filename": "svim_asm-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5c19c25cb89a952a3040acb0e20eeaf3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 54105,
      "upload_time": "2022-09-16T19:53:35",
      "upload_time_iso_8601": "2022-09-16T19:53:35.595360Z",
      "url": "https://files.pythonhosted.org/packages/ec/6f/07e1050b40a1bace3b59b14b953e249f712a67b0ef1376441beb12b2ec18/svim_asm-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}