{
  "info": {
    "author": "Claudio Corsi",
    "author_email": "clcorsi@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Introduction\n\nThe following decorator can be used to provide parameter checking for regular and class methods.  \n\nThis decorator would not be possible without the inspiration of the following:\n\n* [So you want to be a Python expert? by James Powell](https://www.youtube.com/watch?v=cKPlPJyQrt4)\n* [Pre/Post-Condition Decorator Example](https://wiki.python.org/moin/PythonDecoratorLibrary#Pre-.2FPost-Conditions)\n* [Andrew P accepts decorator](https://github.com/andrewp-as-is/accepts.py)\n\nThe above inspired me to create this decorator to reduce the clutter of my code.\n\nEven thou the accepts decorator already checks for the type.  It is somewhat limited\nbecause it expects the exact number of parameters of the method.  It forces the users\nto decorator all of the parameters instead of the ones that one wants checked.  This \nlimitation has been removed for this decorator.\n\n## Objective\n\nTo allow for a wide range of parameter checking that can be used by\nanyone without having to include the parameter checks within the calling method.\nThis will allow someone to provide cleaner code for the implemented method while\nadding some complexity to the decorator.\n\n## Features\n\nThe __contract__ decorator provides the ability for a user to check a parameter for\ntype and/or value expectation.  This also includes the option of checking the return\nvalue.\n\nThe __contract__ decorator uses the following syntax:\n\n```python\n    import contract\n\n    @contract({\n        'a': [checktype(float), closed(0.0, 1.0)],\n        'b': [checktype(int), gteq(1)],\n        'c': [checktype(int), gteq(1)]\n    })\n    def __init__(self,a, b, c, d):\n\n```\n\nThe above __contract__ will check that the *a* parameter is of type float and is between 0.0\nand 1.0.  While the *b* parameter is checked that is it an integer and is greater than of equal\nto 1.  The same for parameter *c*.  While parameter *d* does not required any special condition\nto be true.\n\nAs can be seen, the __contract__ decorator expects you to pass it a dictionary.  Where the *key*\nis the name of the parameter and the *value* is a tuple containing the different checks that will\nbe called for each parameter value during run-time.\n\nThe following table contains the different options that the can be used with this decorator.\n\n| Name | Parameters | Type | Description |\n|---|---|---|---|\n| validvalues | tuple | Value Check | Checks that the parameter value is part of the tuple |\n| checktype | type | Type Check | Checks if the parameter is an instance of the expected type |\n| closed | a,b such that a <= b | Closed Range Check | Checks if the value is between two values a and b including a and b |\n| opened | a,b such that a < b | Opened Range Check | Checks if the value is between two values a and b excluding a and b |\n| closedopened | a,b such that a < b | Closed/Opened Check | Checks if the value is between two values a and b including a but excluding b |\n| openedclosed | a,b such that a < b | Opened/Closed Check | Checks if the value is between two values a and b including b but excluding a | \n| gt | a | Value Check | Checks that the parameter value is greater than a | \n| lt | a | Value Check | Checks that the parameter value is less than a |\n| gteq | a | Value Check | Checks that the parameter value is greater than or equal to a | \n| lteq | a | Value Check | Checks that the parameter value is less than or equal to a |\n\n## Examples\n\nThe following example offers some ways that the __contract__ decorator can be used within someone code.\n\n### Type Check.\n\nThe following code shows how you can check that a given parameter is of a given type.\n\n```python\n    import contract\n\n    @contract({\n        'a': [checktype(float)]\n    })\n    def m(a):\n\n```\n\nThe above will determine if the passed value *a* is a *float* type.\n\n### Range Checks\n\nThe following contains the different range checks that can be applied. \n\n```python\n    import contract\n\n    @contract({\n        'a': [closed(0, 1)],\n        'b': [gteq(2)],\n        'c': [gt(3)],\n        'd': [lt(4)],\n        'e': [lteq(5)],\n        'f': [opened(10.0, 11.0)],\n        'g': [closedopened(12, 13)],\n        'h': [openedclosed(14, 15)],\n    })\n    def range_check(self,a, b, c, d, e, f, g, h):\n\n```\n\nThe above will then perform the expected checks for each of the referenced parameters.\n\nNote that the above checks are not restricted to the primitive values but can be \nany class that implements the different range checks methods of the Data Model. \nYou can then use the Range checks with a users defined class that implements \nthe \\_\\_lt\\_\\_, \\_\\_le\\_\\_, \\_\\_gt\\_\\_, and \\_\\_ge\\_\\_ methods.\n\n### Tuple Check\n\n```python\n    @contract({\n        'a': [validvalues(set('blue','green','red'))]\n    })\n    def contains(a,b):\n\n```\n\nThe above example will insure that the value of parameter *a* will be set to 'blue',\n'green' or 'red'.\n\n### Return Value Check\n\n```python\n    @contract({\n        None: [gt(101)]\n    })\n    def contains(a,b):\n\n```\n\nThe above check will determine that the return value is greater than 100.  Note\nthat you need to specify that the return parameter name as *None*.  This is how we \nassociate the check for the return value.\n\n### User Defined Checks\n\nThe contract decorator provides the ability for a user to create their own user defined\nchecks.  This will allow users to define checks that are not covered above.  There are\ntwo different ways of creating user-defined checks.  You can create a class that has \na callable defined that expects a single parameter or you can define a method that\nexpects a single parameter.  Both implementations will be passed the value that was \npassed to the decorated method.  The following section will give examples of each.\n\n#### User Defined Class Check\n\nHere is a simple example of how to create and use a user define class to check\nthat the passed method parameter value agrees with the method contract.\n\n```python\n\nclass UserDefinedCheck(object):\n    def __init__(self,cond):\n        self.cond_ = cond\n        ...\n\n    def __call__(self, v):\n        # Example of using a simple assert check\n        assert v != None, \"The value passed cannot be None\"\n        # Example of using a simple method or instance object.\n        # The method or instance should raise an AssertionError whenever the condition is false\n        cond(v) \n        ...\n\n@contract({'a':[UserDefinedCheck()]})\ndef check_me(a,b):\n    ...\n\n```\n\nThe *UserDefinedCheck* class that was created above has a distinctive requirement.  \nThe need for the class to implement the *\\_\\_call\\_\\_* method with a single\nparameter.  The callable method is called by the contract decorator and it expects\nthe call to raise an AssertionError whenever the condition is not valid.  Lastly,\nthe class is used by passing an instance of the *UserDefinedCheck* class to the \ncontract decorator.\n\nIn the example above, the parameter passed will be the value of the *a* parameter\nwhen the *check\\_me* function is called.\n\n#### User Defined Method Check\n\nHere is a simple example showing how a user-defined check method can be implemented \nand used by the contract decorator.\n\n```python\n\ndef user_defined_check(v):\n    assert v != None, 'The value cannot be set to None'\n    ...\n\n@contract({'b':[user_defined_check]})\ndef check_me(a,b):\n    ...\n\n```\n\nThe *user\\_defined\\_check* method was created with a similar requirement as the user \ndefined class.  The method was defined with a simple parameter.  The contract \ndecorator will then pass the value of the checking parameter when the method that\nis being checked is called.  Lastly, a reference to the *user\\_defined\\_check* method\nis passed to the contract decorator.\n\nIn the example above, the check_me method will use the *user\\_defined\\_check* method\nto check the contract of the *b* parameter. \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ccorsi/contract",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "contract-decorator",
    "package_url": "https://pypi.org/project/contract-decorator/",
    "platform": "",
    "project_url": "https://pypi.org/project/contract-decorator/",
    "project_urls": {
      "Homepage": "https://github.com/ccorsi/contract"
    },
    "release_url": "https://pypi.org/project/contract-decorator/2020.10.27/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A simple decorator used for parameter checking",
    "version": "2020.10.27",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8514144,
  "releases": {
    "2020.10.27": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95bd6ec4a14b4943956f24e1db7087286fd37ebe7115978014e9a735970fa756",
          "md5": "a05a6f86a9fa94ce4f0b7443c93a7b05",
          "sha256": "3abfd98b3037fc31dfed1e49f86eb998c0f73c6e90894c2b80c92c17405fa4c9"
        },
        "downloads": -1,
        "filename": "contract_decorator-2020.10.27-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a05a6f86a9fa94ce4f0b7443c93a7b05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 11030,
        "upload_time": "2020-10-27T16:12:54",
        "upload_time_iso_8601": "2020-10-27T16:12:54.006976Z",
        "url": "https://files.pythonhosted.org/packages/95/bd/6ec4a14b4943956f24e1db7087286fd37ebe7115978014e9a735970fa756/contract_decorator-2020.10.27-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4dbc28b886335d1a467160afb11d0796c98ba2c1df27d7f5e87ee0f834fafb13",
          "md5": "fa0841f4213ae6b2583473d06feb5670",
          "sha256": "944fb352b30e736bb7a42c1c0802d64cda398f602c8673b5f502da79989e3e40"
        },
        "downloads": -1,
        "filename": "contract-decorator-2020.10.27.tar.gz",
        "has_sig": false,
        "md5_digest": "fa0841f4213ae6b2583473d06feb5670",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7782,
        "upload_time": "2020-10-27T16:13:00",
        "upload_time_iso_8601": "2020-10-27T16:13:00.306785Z",
        "url": "https://files.pythonhosted.org/packages/4d/bc/28b886335d1a467160afb11d0796c98ba2c1df27d7f5e87ee0f834fafb13/contract-decorator-2020.10.27.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95bd6ec4a14b4943956f24e1db7087286fd37ebe7115978014e9a735970fa756",
        "md5": "a05a6f86a9fa94ce4f0b7443c93a7b05",
        "sha256": "3abfd98b3037fc31dfed1e49f86eb998c0f73c6e90894c2b80c92c17405fa4c9"
      },
      "downloads": -1,
      "filename": "contract_decorator-2020.10.27-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a05a6f86a9fa94ce4f0b7443c93a7b05",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 11030,
      "upload_time": "2020-10-27T16:12:54",
      "upload_time_iso_8601": "2020-10-27T16:12:54.006976Z",
      "url": "https://files.pythonhosted.org/packages/95/bd/6ec4a14b4943956f24e1db7087286fd37ebe7115978014e9a735970fa756/contract_decorator-2020.10.27-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4dbc28b886335d1a467160afb11d0796c98ba2c1df27d7f5e87ee0f834fafb13",
        "md5": "fa0841f4213ae6b2583473d06feb5670",
        "sha256": "944fb352b30e736bb7a42c1c0802d64cda398f602c8673b5f502da79989e3e40"
      },
      "downloads": -1,
      "filename": "contract-decorator-2020.10.27.tar.gz",
      "has_sig": false,
      "md5_digest": "fa0841f4213ae6b2583473d06feb5670",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 7782,
      "upload_time": "2020-10-27T16:13:00",
      "upload_time_iso_8601": "2020-10-27T16:13:00.306785Z",
      "url": "https://files.pythonhosted.org/packages/4d/bc/28b886335d1a467160afb11d0796c98ba2c1df27d7f5e87ee0f834fafb13/contract-decorator-2020.10.27.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}