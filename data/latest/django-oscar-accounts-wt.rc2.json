{
  "info": {
    "author": "David Winterbottom",
    "author_email": "david.winterbottom@tangentlabs.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "===========================\nManaged accounts for Django\n===========================\n\nA 'managed account' is an allocation of money that can be debited and credited.\nThis package provides managed account functionality for use with the e-commerce\nframework `Oscar`_.  It can also be used standalone without Oscar.\n\n.. _`Oscar`: https://github.com/django-oscar/django-oscar\n\nAccounts can be used to implement a variety of interesting components,\nincluding:\n\n* Giftcards\n* Web accounts\n* Loyalty schemes\n\nBasically anything that involves tracking the movement of funds within a closed\nsystem.\n\nThis package uses `double-entry bookkeeping`_ where every transaction is\nrecorded twice (once for the source and once for the destination).  This\nensures the books always balance and there is full audit trail of all\ntransactional activity.  \n\nIf your project manages money, you should be using a library like this.  Your\nfinance people will thank you.\n\n\n.. image:: https://travis-ci.org/django-oscar/django-oscar-accounts.svg?branch=master\n    :target: https://travis-ci.org/django-oscar/django-oscar-accounts\n\n.. image:: http://codecov.io/github/django-oscar/django-oscar-accounts/coverage.svg?branch=master\n    :alt: Coverage\n    :target: http://codecov.io/github/django-oscar/django-oscar-accounts?branch=master\n\n.. image:: https://requires.io/github/django-oscar/django-oscar-accounts/requirements.svg?branch=master\n     :target: https://requires.io/github/django-oscar/django-oscar-accounts/requirements/?branch=master\n     :alt: Requirements Status\n\n.. image:: https://img.shields.io/pypi/v/django-oscar-accounts.svg\n    :target: https://pypi.python.org/pypi/django-oscar-accounts/\n\n\n.. _double-entry bookkeeping: http://en.wikipedia.org/wiki/Double-entry_bookkeeping_system\n\n\nFeatures\n--------\n\n* An account has a credit limit which defaults to zero.  Accounts can be set up\n  with no credit limit so that they are a 'source' of money within the system.\n  At least one account must be set up without a credit limit in order for money\n  to move around the system.\n\n* Accounts can have:\n  - No users assigned\n  - A single \"primary\" user - this is the most common case\n  - A set of users assigned\n\n* A user can have multiple accounts\n\n* An account can have a start and end date to allow its usage in a limited time\n  window\n\n* An account can be restricted so that it can only be used to pay for a range of\n  products.\n\n* Accounts can be categorised\n\nScreenshots\n-----------\n\n.. image:: https://github.com/tangentlabs/django-oscar-accounts/raw/master/screenshots/dashboard-accounts.thumb.png\n    :alt: Dashboard account list\n    :target: https://github.com/tangentlabs/django-oscar-accounts/raw/master/screenshots/dashboard-accounts.png\n\n.. image:: https://github.com/tangentlabs/django-oscar-accounts/raw/master/screenshots/dashboard-form.thumb.png\n    :alt: Create new account\n    :target: https://github.com/tangentlabs/django-oscar-accounts/raw/master/screenshots/dashboard-form.png\n\n.. image:: https://github.com/tangentlabs/django-oscar-accounts/raw/master/screenshots/dashboard-transfers.thumb.png\n    :alt: Dashboard transfer list\n    :target: https://github.com/tangentlabs/django-oscar-accounts/raw/master/screenshots/dashboard-transfers.png\n\n.. image:: https://github.com/tangentlabs/django-oscar-accounts/raw/master/screenshots/dashboard-detail.thumb.png\n    :alt: Dashboard account detail\n    :target: https://github.com/tangentlabs/django-oscar-accounts/raw/master/screenshots/dashboard-detail.png\n\n\nInstallation\n------------\n\nInstall using pip:\n\n.. code-block:: bash\n\n\tpip install django-oscar-accounts\n\nand add `oscar_accounts` to `INSTALLED_APPS`.  Runnning ``manage.py migrate\noscar_accounts`` will create the appropriate database tables. To create initial\nsome core accounts and account-types use ``manage.py oscar_accounts_init``.\nThe names of these accounts can be controlled using settings (see below).\n\nIf running with Oscar, add an additional path to your `TEMPLATE_DIRS`:\n\n.. code-block:: python\n\n    from accounts import TEMPLATE_DIR as ACCOUNTS_TEMPLATE_DIR\n\n    TEMPLATE_DIRS = (\n        ...\n        ACCOUNTS_TEMPLATE_DIR)\n\nThis allows the templates to be customised by overriding blocks instead of\nreplacing the entire template.\n\nIn order to make the accounts accessible via the Oscar dashboard you need to\nappend it to your `OSCAR_DASHBOARD_NAVIGATION`\n\n.. code-block:: python\n\n    from oscar.defaults import *\n\n    OSCAR_DASHBOARD_NAVIGATION.append(\n        {\n            'label': 'Accounts',\n            'icon': 'icon-globe',\n            'children': [\n                {\n                    'label': 'Accounts',\n                    'url_name': 'accounts-list',\n                },\n                {\n                    'label': 'Transfers',\n                    'url_name': 'transfers-list',\n                },\n                {\n                    'label': 'Deferred income report',\n                    'url_name': 'report-deferred-income',\n                },\n                {\n                    'label': 'Profit/loss report',\n                    'url_name': 'report-profit-loss',\n                },\n            ]\n        })\n\n\nFurthermore you need to add the url-pattern to your `urls.py`\n\n.. code-block:: python\n\n    from oscar_accounts.dashboard.app import application as accounts_app\n\n    # ...\n\n    urlpatterns = [\n        ...\n        url(r'^dashboard/accounts/', include(accounts_app.urls)),\n    ]\n\n\nYou should also set-up a cronjob that calls::\n\n    ./manage.py close_expired_accounts\n\nto close any expired accounts and transfer their funds to the 'expired'\naccount.\n\nAPI\n---\n\nCreate account instances using the manager:\n\n.. code-block:: python\n\n    from decimal import Decimal\n    import datetime\n\n    from django.contrib.auth.models import User\n\n    from oscar_accounts import models\n\n    anonymous_account = models.Account.objects.create()\n\n    barry = User.objects.get(username=\"barry\")\n    user_account = models.Account.objects.create(primary_user=barry)\n\n    no_credit_limit_account = models.Account.objects.create(credit_limit=None)\n    credit_limit_account = models.Account.objects.create(credit_limit=Decimal('1000.00'))\n\n    today = datetime.date.today()\n    next_week = today + datetime.timedelta(days=7)\n    date_limited_account = models.Account.objects.create(\n        start_date=today, end_date=next_week)\n\n\nTransfer funds using the facade:\n\n.. code-block:: python\n\n    from oscar_accounts import facade\n\n    staff_member = User.objects.get(username=\"staff\")\n    trans = facade.transfer(source=no_credit_limit_account,\n                            destination=user_account,\n                            amount=Decimal('10.00'),\n                            user=staff_member)\n\nReverse transfers:\n\n.. code-block:: python\n\n    facade.reverse(trans, user=staff_member, \n                   description=\"Just an example\")\n\nIf the proposed transfer is invalid, an exception will be raised.  All\nexceptions are subclasses of `oscar_accounts.exceptions.AccountException`.\nYour client code should look for exceptions of this type and handle them\nappropriately.\n \nClient code should only use the `oscar_accounts.models.Budget` class and the\ntwo functions from `oscar_accounts.facade` - nothing else should be required.\n\nError handling\n--------------\n\nNote that the transfer operation is wrapped in its own database transaction to\nensure that only complete transfers are written out.  When using Django's\ntransaction middleware, you need to be careful.  If you have an unhandled\nexception,  then account transfers will still be committed even though nothing\nelse will be.  To handle this, you need to make sure that, if an exception\noccurs during your post-payment code, then you roll-back any transfers.\n\nHere's a toy example:\n\n\n.. code-block:: python\n\n    from oscar_accounts import facade\n\n    def submit(self, order_total):\n        # Take payment first\n        transfer = facade.transfer(self.get_user_account(),\n                                   self.get_merchant_account(),\n                                   order_total)\n        # Create order models\n        try:\n            self.place_order()\n        except Exception, e:\n            # Something went wrong placing the order.  Roll-back the previous\n            # transfer\n            facade.reverse(transfer)\n\nIn this situation, you'll end up with two transfers being created but no order.\nWhile this isn't ideal, it's the best way of handling exceptions that occur\nduring order placement.\n\nMulti-transfer payments\n-----------------------\n\nProjects will often allow users to have multiple accounts and pay for an order\nusing more than one.  This will involve several transfers and needs some\ncareful handling in your application code.\n\nIt normally makes sense to write your own wrapper around the accounts API to\nencapsulate your business logic and error handling.  Here's an example:\n\n\n.. code-block:: python\n\n    from decimal import Decimal as D\n    from oscar_accounts import models, exceptions, facade\n\n\n    def redeem(order_number, user, amount):\n        # Get user's non-empty accounts ordered with the first to expire first\n        accounts = models.Account.active.filter(\n            user=user, balance__gt=0).order_by('end_date')\n\n        # Build up a list of potential transfers that cover the requested amount\n        transfers = []\n        amount_to_allocate = amount\n        for account in accounts:\n            to_transfer = min(account.balance, amount_to_allocate)\n            transfers.append((account, to_transfer))\n            amount_to_allocate -= to_transfer\n            if amount_to_allocate == D('0.00'):\n                break\n        if amount_to_allocate > D('0.00'):\n            raise exceptions.InsufficientFunds()\n\n        # Execute transfers to some 'Sales' account\n        destination = models.Account.objects.get(name=\"Sales\")\n        completed_transfers = []\n        try:\n            for account, amount in transfers:\n                transfer = facade.transfer(\n                    account, destination, amount, user=user,\n                    description=\"Order %s\" % order_number)\n                completed_transfers.append(transfer)\n        except exceptions.AccountException, transfer_exc:\n            # Something went wrong with one of the transfers (possibly a race condition).\n            # We try and roll back all completed ones to get us back to a clean state.\n            try:\n                for transfer in completed_transfers:\n                    facade.reverse(transfer)\n            except Exception, reverse_exc:\n                # Uh oh: No man's land.  We could be left with a partial \n                # redemption. This will require an admin to intervene.  Make \n                # sure your logger mails admins on error.\n                logger.error(\"Order %s, transfers failed (%s) and reverse failed (%s)\",\n                             order_number, transfer_exc, reverse_exc)\n                logger.exception(reverse_exc)\n\n            # Raise an exception so that your client code can inform the user appropriately.\n            raise RedemptionFailed()\n        else:\n            # All transfers completed ok\n            return completed_transfers\n\nAs you can see, there is some careful handling of the scenario where not all\ntransfers can be executed.\n\nIf you using Oscar then ensure that you create an `OrderSource` instance for\nevery transfer (rather than aggregating them all into one).  This will provide\nbetter audit information.  Here's some example code:\n\n\n.. code-block:: python\n\n    try:\n        transfers = api.redeem(order_number, user, total_incl_tax)\n    except Exception:\n        # Inform user of failed payment\n    else:\n        for transfer in transfers:\n            source_type, __ = SourceType.objects.get_or_create(name=\"Accounts\")\n            source = Source(\n                source_type=source_type,\n                amount_allocated=transfer.amount,\n                amount_debited=transfer.amount,\n                reference=transfer.reference)\n            self.add_payment_source(source)\n\n\nCore accounts and account types\n-------------------------------\n\nA post-syncdb signal will create the common structure for account types and\naccounts.  Some names can be controlled with settings, as indicated in\nparentheses. \n\n- **Assets**\n\n  - **Sales**\n\n    - Redemptions (`ACCOUNTS_REDEMPTIONS_NAME`) - where money is\n      transferred to when an account is used to pay for something.  \n    - Lapsed (`ACCOUNTS_LAPSED_NAME`) - where money is transferred to\n      when an account expires.  This is done by the\n      'close_expired_accounts' management command.  The name of this\n      account can be set using the `ACCOUNTS_LAPSED_NAME`.\n\n  - **Cash**\n\n    - \"Bank\" (`ACCOUNTS_BANK_NAME`) - the source account for creating new\n      accounts that are paid for by the customer (eg a giftcard).  This\n      account will not have a credit limit and will normally have a\n      negative balance as money is only transferred out.\n\n  - **Unpaid** - This contains accounts that are used as sources for other\n    accounts but aren't paid for by the customer.  For instance, you might\n    allow admins to create new accounts in the dashboard.  An account of this\n    type will be the source account for the initial transfer.\n\n- **Liabilities**\n\n  - **Deferred income** - This contains customer accounts/giftcards.  You may\n    want to create additional account types within this type to categorise\n    accounts.\n\nExample transactions\n--------------------\n\nConsider the following accounts and account types:\n\n- **Assets**\n    - **Sales** \n        - Redemptions \n        - Lapsed\n    - **Cash**\n        - Bank \n    - **Unpaid**\n        - Merchant funded \n- **Liabilities**\n    - **Deferred income**\n\nNote that all accounts start with a balance of 0 and the sum of all balances\nwill always be zero.\n\n*A customer purchases a £50 giftcard*\n\n- A new account is created of type 'Deferred income' with an end date - £50 is\n  transferred from the Bank to this new account\n\n*A customer pays for a £30 order using their £50 giftcard*\n\n- £30 is transferred from the giftcard account to the redemptions account\n\n*The customer's giftcard expires with £20 still on it*\n\n- £20 is transferred from the giftcard account to the lapsed account\n\n*The customer phones up to complain and a staff member creates a new giftcard\nfor £20*\n\n- A new account is created of type 'Deferred income' - £20 is transferred from\n  the \"Merchant funded\" account to this new account\n\nSettings\n--------\n\nThere are settings to control the naming and initial unpaid and deferred income\naccount types:\n\n* `ACCOUNTS_MIN_INITIAL_VALUE` The minimum value that can be used to create an\n  account (or for a top-up)\n\n* `ACCOUNTS_MAX_INITIAL_VALUE` The maximum value that can be transferred to an\n  account.\n\nContributing\n------------\n\nFork repo, set-up virtualenv and run::\n\n    make install\n\nRun tests with::\n    \n    ./runtests.py",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-oscar-accounts-wt",
    "package_url": "https://pypi.org/project/django-oscar-accounts-wt/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-oscar-accounts-wt/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/django-oscar-accounts-wt/0.4rc3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Managed accounts for django-oscar",
    "version": "0.4rc3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2253160,
  "releases": {
    "0.4rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5627e4da11272accd6dcb96e810f67b00f200b99e4fd47e66d2868058bfbd8ec",
          "md5": "804e505a92d64859bd41ba19ec893e37",
          "sha256": "779806a6b8ba01e1ca6109bd731e9bdb248fa370609eeb430d539414970e692c"
        },
        "downloads": -1,
        "filename": "django_oscar_accounts_wt-0.4rc2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "804e505a92d64859bd41ba19ec893e37",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "requires_python": null,
        "size": 56874,
        "upload_time": "2016-07-25T22:24:31",
        "upload_time_iso_8601": "2016-07-25T22:24:31.544881Z",
        "url": "https://files.pythonhosted.org/packages/56/27/e4da11272accd6dcb96e810f67b00f200b99e4fd47e66d2868058bfbd8ec/django_oscar_accounts_wt-0.4rc2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4rc3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bc3a6b6f1f2e22de6c94a0917f57a69b32d84c0b541f11895e92434021f7857",
          "md5": "4dacfb968fbcaede9f59f0b071e26c9c",
          "sha256": "8d89bca6a7a82b8c5cae1083461a2df1c94779818d69d866fb7345e8212a7c21"
        },
        "downloads": -1,
        "filename": "django_oscar_accounts_wt-0.4rc3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4dacfb968fbcaede9f59f0b071e26c9c",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "requires_python": null,
        "size": 56931,
        "upload_time": "2016-07-30T22:29:02",
        "upload_time_iso_8601": "2016-07-30T22:29:02.805066Z",
        "url": "https://files.pythonhosted.org/packages/3b/c3/a6b6f1f2e22de6c94a0917f57a69b32d84c0b541f11895e92434021f7857/django_oscar_accounts_wt-0.4rc3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bc3a6b6f1f2e22de6c94a0917f57a69b32d84c0b541f11895e92434021f7857",
        "md5": "4dacfb968fbcaede9f59f0b071e26c9c",
        "sha256": "8d89bca6a7a82b8c5cae1083461a2df1c94779818d69d866fb7345e8212a7c21"
      },
      "downloads": -1,
      "filename": "django_oscar_accounts_wt-0.4rc3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4dacfb968fbcaede9f59f0b071e26c9c",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "requires_python": null,
      "size": 56931,
      "upload_time": "2016-07-30T22:29:02",
      "upload_time_iso_8601": "2016-07-30T22:29:02.805066Z",
      "url": "https://files.pythonhosted.org/packages/3b/c3/a6b6f1f2e22de6c94a0917f57a69b32d84c0b541f11895e92434021f7857/django_oscar_accounts_wt-0.4rc3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}