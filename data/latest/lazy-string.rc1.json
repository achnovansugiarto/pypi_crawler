{
  "info": {
    "author": "Oleksandr Oblovatnyi",
    "author_email": "oblovatniy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "lazy-string\n===========\n\nPython library for defining strings with delayed evaluation.\n\n|pypi_package| |python_versions| |license|\n\n\nThe package provides a ``LazyString`` class. Its constructor accepts a callable (say, a function) which will be called when string's value is needed. The constructor also allows to specify positional and keyword arguments for that callable:\n\n.. code-block:: python\n\n  def __init__(self, func: Callable[..., str], *args: Tuple, **kwargs: Mapping) -> None:\n    ...\n\n\nThe value is re-evaluated on every access.\n\n\nInstallation\n------------\n\nAvailable as a `PyPI <https://pypi.python.org/pypi/lazy-string>`_ package:\n\n.. code-block:: bash\n\n  pip install lazy-string\n\n\nUsage\n-----\n\nUsing with a function having no parameters:\n\n.. code-block:: python\n\n  from lazy_string import LazyString\n\n  def make_foo() -> str:\n    return \"foo\"\n\n  s = LazyString(make_foo)\n\n\nThe value is evaluated on demand:\n\n.. code-block:: python\n\n  >>> s + \" bar\"\n  'foo bar'\n\n  >>> str(s)\n  'foo'\n\n\nRepresentation explicitly tells it's a ``LazyString``:\n\n.. code-block:: python\n\n  >>> s\n  LazyString('foo')\n\n\nIt's safe to pass standard strings, as they will be returned as-is:\n\n.. code-block:: python\n\n  >>> LazyString(\"foo bar\")\n  'foo bar'\n\n\nSupports methods of standard strings:\n\n.. code-block:: python\n\n  >>> s.upper()\n  'FOO'\n\n  >>> \"f\" in s\n  True\n\n  >>> dir(s)\n  ['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__',\n   '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__',\n   '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__',\n   '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__',\n   '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__',\n   '__setattr__', '__sizeof__', '__str__', '__subclasshook__',\n   'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith',\n   'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha',\n   'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric',\n   'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower',\n   'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust',\n   'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith',\n   'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n\n\nSupplying parameters for the callable:\n\n.. code-block:: python\n\n  def make_foo(arg1, arg2):\n    return f\"foo {arg1} {arg2}\"\n\n  s = LazyString(make_foo, 123, arg2=456)\n\n\n.. code-block:: python\n\n  >>> str(s)\n  'foo 123 456'\n\n\nImplementation Details\n----------------------\n\n``LazyString`` is inherited from `collections.UserString <https://docs.python.org/3/library/collections.html#collections.UserString>`_.\n\n.. code-block:: python\n\n  >>> LazyString.__mro__\n  (<class 'lazy_string.LazyString'>, <class 'collections.UserString'>,\n   <class 'collections.abc.Sequence'>, <class 'collections.abc.Reversible'>,\n   <class 'collections.abc.Collection'>, <class 'collections.abc.Sized'>,\n   <class 'collections.abc.Iterable'>, <class 'collections.abc.Container'>,\n   <class 'object'>)\n\n\nSerialization\n-------------\n\nPickling\n^^^^^^^^\n\nSupported out of the box:\n\n.. code-block:: python\n\n  >>> import pickle\n  >>> s == pickle.loads(pickle.dumps(s))\n  True\n\n\nTo JSON\n^^^^^^^\n\nSupported with any encoder able to encode ``collections.UserString``:\n\n.. code-block:: python\n\n  import json\n  import collections\n\n  class JSONEncoder(json.JSONEncoder):\n\n    def default(self, o):\n      if isinstance(o, collections.UserString):\n        return str(o)\n      return super().default(o)\n\n\n.. code-block:: python\n\n  >>> data = {'s': s}\n  >>> json.dumps(data, cls=JSONEncoder)\n  '{\"s\": \"foo\"}'\n\n\n.. |pypi_package| image:: https://img.shields.io/pypi/v/lazy-string\n   :target: http://badge.fury.io/py/lazy-string/\n   :alt: Version of PyPI package\n\n.. |python_versions| image:: https://img.shields.io/badge/Python-3.7+-brightgreen.svg\n   :alt: Supported versions of Python\n\n.. |license| image:: https://img.shields.io/badge/license-MIT-blue.svg\n   :target: https://github.com/oblalex/lazy-string/blob/main/LICENSE\n   :alt: MIT license",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/oblalex/lazy-string/tree/v1.0.0",
    "keywords": "lazy,string,strings,lazy-evaluation,library,libraries",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lazy-string",
    "package_url": "https://pypi.org/project/lazy-string/",
    "platform": "",
    "project_url": "https://pypi.org/project/lazy-string/",
    "project_urls": {
      "Homepage": "https://github.com/oblalex/lazy-string/tree/v1.0.0"
    },
    "release_url": "https://pypi.org/project/lazy-string/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Python library for defining strings with delayed evaluation",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8683801,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dbf4ed43c60a277344ea12f9f8194d45fcd663bc4b8f2495295f5e60bc3429f",
          "md5": "d8230d4292b06e9afb9ad2af76728268",
          "sha256": "dfca872cbcf5f31736702009001616e22189d34b8ba12819b55e2ed6e91726f1"
        },
        "downloads": -1,
        "filename": "lazy-string-1.0.0.zip",
        "has_sig": false,
        "md5_digest": "d8230d4292b06e9afb9ad2af76728268",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10117,
        "upload_time": "2020-11-17T21:49:18",
        "upload_time_iso_8601": "2020-11-17T21:49:18.537169Z",
        "url": "https://files.pythonhosted.org/packages/9d/bf/4ed43c60a277344ea12f9f8194d45fcd663bc4b8f2495295f5e60bc3429f/lazy-string-1.0.0.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9dbf4ed43c60a277344ea12f9f8194d45fcd663bc4b8f2495295f5e60bc3429f",
        "md5": "d8230d4292b06e9afb9ad2af76728268",
        "sha256": "dfca872cbcf5f31736702009001616e22189d34b8ba12819b55e2ed6e91726f1"
      },
      "downloads": -1,
      "filename": "lazy-string-1.0.0.zip",
      "has_sig": false,
      "md5_digest": "d8230d4292b06e9afb9ad2af76728268",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10117,
      "upload_time": "2020-11-17T21:49:18",
      "upload_time_iso_8601": "2020-11-17T21:49:18.537169Z",
      "url": "https://files.pythonhosted.org/packages/9d/bf/4ed43c60a277344ea12f9f8194d45fcd663bc4b8f2495295f5e60bc3429f/lazy-string-1.0.0.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}