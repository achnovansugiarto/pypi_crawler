{
  "info": {
    "author": "Daniel Jack",
    "author_email": "jackd68ed@googlemail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Table of contents\n\n- [Dict to dataclass](#dict-to-dataclass)\n  - [Why?](#why)\n  - [Finding dictionary values](#finding-dictionary-values)\n  - [Nested data classes](#nested-data-classes)\n  - [Lists](#lists)\n  - [Value conversion](#value-conversion)\n    - [Datetime](#datetime)\n    - [Enum](#enum)\n    - [Custom converters](#custom-converters)\n  - [Optional types](#optional-types)\n  - [Missing values](#missing-values)\n  - [Data validation](#data-validation)\n\n# Dict to dataclass\n\nDict to dataclass makes it easy to convert dictionaries to instances of dataclasses.\n\n```python\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom dict_to_dataclass import DataclassFromDict, field_from_dict\n\n\n# Declare dataclass fields with field_from_dict\n@dataclass\nclass MyDataclass(DataclassFromDict):\n    my_string: str = field_from_dict()\n    my_int: int = field_from_dict()\n    my_date: datetime = field_from_dict()\n\n\n# Create a dataclass instance using the from_dict constructor\norigin_dict = {\n  \"my_string\": \"Hello\",\n  \"my_int\": 123,\n  \"my_date\": \"2020-10-11T13:21:23.396748\",\n}\n\ndataclass_instance = MyDataclass.from_dict(origin_dict)\n\n# Now our dataclass instance has the values from the dictionary\n>>> dataclass_instance.my_string\n\"Hello\"\n\n>>> dataclass_instance.my_int\n123\n\n>>> dataclass_instance.my_date\ndatetime.datetime(2020, 10, 11, 13, 21, 23, 396748)\n```\n\n## Why?\n\nYou can create a dataclass instance from a dictionary already by unpacking the dictionary values and passing them to the dataclass constructor like this:\n\n```python\norigin_dict = {\n  \"my_string\": \"Hello\",\n  \"my_int\": 123,\n  \"my_date\": \"2020-10-11T13:21:23.396748\",\n}\n\ndataclass_instance = MyDataclass(**origin_dict)\n```\n\nHowever, that method doesn't work when we need to consider\n\n- Type validation\n- Type conversion, e.g. an ISO string to a `datetime` instance\n- Differences between dictionary keys and dataclass field names\n- Complex structures with nested dictionaries and lists\n\n## Installation\n\n`dict_to_dataclass` can be installed using `pip`\n\n```bash\npip install dict-to-dataclass\n```\n\n## Finding dictionary values\n\nYou may have noticed that we don't need to specify where to look in the dictionary for field values. That's because by default, the name given to the field in the dataclass is used. It even works if the key in the dictionary is in camelCase:\n\n```python\n@dataclass\nclass MyDataclass(DataclassFromDict):\n    my_field: str = field_from_dict()\n\n\norigin_dict = {\n    \"myField\": \"field value\"\n}\n\ndataclass_instance = MyDataclass.from_dict(origin_dict)\n\n>>> dataclass_instance.my_field\n\"field value\"\n```\n\nIt's probably quite common that your dataclass fields have the same names as the dictionary keys they map to but in case they don't, you can pass the dictionary key as the first argument (or the `dict_key` keyword argument) to `field_from_dict`:\n\n```python\n@dataclass\nclass MyDataclass(DataclassFromDict):\n    name_in_dataclass: str = field_from_dict(\"nameInDictionary\")\n\norigin_dict = {\n    \"nameInDictionary\": \"field value\"\n}\n\ndataclass_instance = MyDataclass.from_dict(origin_dict)\n\n>>> dataclass_instance.name_in_dataclass\n\"field value\"\n```\n\n## Nested data classes\n\nNested dictionaries can be represented by nested dataclasses.\n\n```python\n@dataclass\nclass Child(DataclassFromDict):\n    my_field: str = field_from_dict()\n\n\n@dataclass\nclass Parent(DataclassFromDict):\n    child_field: Child = field_from_dict()\n\n\norigin_dict = {\n  \"child_field\": {\n      \"my_field\": \"Hello\"\n  }\n}\n\ndataclass_instance = Parent.from_dict(origin_dict)\n\n>>> dataclass_instance.child_field.my_field\n\"Hello\"\n```\n\n## Lists\n\nList types are handled but the type of the list's items must be specified in the dataclass field type so that we know how to convert them.\n\n```python\n@dataclass\nclass MyDataclass(DataclassFromDict):\n    my_list_field: List[str] = field_from_dict()\n\norigin_dict = {\n    \"my_list_field\": [\"First\", \"Second\", \"Third\"]\n}\n\ndataclass_instance = MyDataclass.from_dict(origin_dict)\n\n>>> dataclass_instance.my_list_field\n[\"First\", \"Second\", \"Third\"]\n```\n\nIf we were to use the more generic `typing.List` or `list` as the field type, an error would be raised when converting the dictionary (there's more info on errors later).\n\n```python\n@dataclass\nclass MyDataclass(DataclassFromDict):\n    name_in_dataclass: List = field_from_dict(\"nameInDictionary\")\n\norigin_dict = {\n    \"my_list_field\": [\"First\", \"Second\", \"Third\"]\n}\n\n# Here, an UnspecificListFieldError is raised\ndataclass_instance = MyDataclass.from_dict(origin_dict)\n```\n\nLists of other dataclasses are also supported.\n\n```python\n@dataclass\nclass Child(DataclassFromDict):\n    name: str = field_from_dict()\n\n\n@dataclass\nclass Parent(DataclassFromDict):\n    children: List[Child] = field_from_dict()\n\n\norigin_dict = {\n  \"children\": [\n      { \"name\": \"Jane\" },\n      { \"name\": \"Joe\" },\n  ]\n}\n\ndataclass_instance = Parent.from_dict(origin_dict)\n\n>>> dataclass_instance.children\n[Child(name='Jane'), Child(name='Joe')]\n```\n\n## Value conversion\n\nIf the value found in the dictionary doesn't match the dataclass field type, the dictionary value can be converted.\n\n### Datetime\n\nDataclass fields of type `datetime` are handled and can be converted from\n\n- Strings (handled by [dateutil](https://dateutil.readthedocs.io/en/stable/))\n- Python-style timestamps of type `float`, e.g. `1602436272.681808`\n- Javascript-style timestamps of type `int`, e.g. `1602436323268`\n\n### Enum\n\nDataclass fields with an `Enum` type can also be converted by default:\n\n```python\nclass Number(Enum):\n    ONE = 1\n    TWO = 2\n    THREE = 3\n\n\n@dataclass\nclass MyDataclass(DataclassFromDict):\n    number: Number = field_from_dict()\n\n\ndataclass_instance = MyDataclass.from_dict({\"number\": \"TWO\"})\n\n>>> dataclass_instance.number\n<Number.TWO: 2>\n```\n\nThe value in the dictionary should be the name of the Enum value as a string. If the value is not found, an `EnumValueNotFoundError` is raised.\n\n### Custom converters\n\nIf you need to convert a dictionary value that isn't covered by the defaults, you can pass in a converter function using `field_from_dict`'s `converter` parameter:\n\n```python\ndef yes_no_to_bool(yes_no: str) -> bool:\n    return yes_no == \"yes\"\n\n\n@dataclass\nclass MyDataclass(DataclassFromDict):\n    is_yes: bool = field_from_dict(converter=yes_no_to_bool)\n\ndataclass_instance = MyDataclass.from_dict({\"is_yes\": \"yes\"})\n\n>>> dataclass_instance.is_yes\nTrue\n```\n\nA `DictValueConversionError` is raised if the dictionary value cannot be converted.\n\n## Optional types\n\nIf you expect that the dictionary value for a field might be `None`, the dataclass field should be given an `Optional` type.\n\n```python\n@dataclass\nclass MyDataclass(DataclassFromDict):\n    my_field: Optional[str] = field_from_dict()\n\ndataclass_instance = MyDataclass.from_dict({\"myField\": None})\n\n>>> dataclass_instance.my_field\nNone\n```\n\nIf `my_field` above had the type `str` instead, a `DictValueNotFoundError` would be raised.\n\n## Missing values\n\nIf you expect that the field might be missing from the dictionary, you should provide a value to either the `default` or `default_factory` parameters of `field_from_dict`. These are passed through to the underlying `dataclasses.field` call, which you can read about [here](https://docs.python.org/3/library/dataclasses.html#dataclasses.field).\n\nIf no default value is provided and the key is not found in the dictionary, a `DictKeyNotFoundError` is raised.\n\n```python\n@dataclass\nclass MyDataclass(DataclassFromDict):\n    my_field: str = field_from_dict(default=\"default value\")\n    my_list_field: str = field_from_dict(default_factory=list)\n\ndataclass_instance = MyDataclass.from_dict({})\n\n>>> dataclass_instance.my_field\n\"default value\"\n\n>>> dataclass_instance.my_list_field\n[]\n```\n\nNote that if the field exists in the dictionary and has a value of `None`, `default` and `default_factory` are _not_ used. You would still need to give the field an `Optional` type.\n\n```python\n@dataclass\nclass MyDataclass(DataclassFromDict):\n    my_field: str = field_from_dict(default=\"default value\")\n\n# Here, a DictValueNotFoundError is raised\ndataclass_instance = MyDataclass.from_dict({\"myField\": None})\n```\n\n## Data validation\n\nA side effect of converting a dictionary to a dataclass instance is that the data in the dictionary is validated, which can be useful on its own. For example, imagine we're writing a handler for a POST method in a REST API. If we use a `DataclassFromDict` to describe the request body, we can validate the user's input by attempting to convert it to a dataclass instance.\n\n```python\n@dataclass\nclass CreateResourceBody(DataclassFromDict):\n    ...fields\n\n\n@app.route(\"/resource\", methods=[\"POST\"])\ndef create_resource():\n    body_dict = request.get_json()\n\n    try:\n        body_dataclass_instance = CreateResourceBody.from_dict(body_dict)\n    except DataclassFromDictError:\n        return \"Bad request\", 400\n\n    # Create the resource with with body_dataclass_instance\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jackd68ed/dict-to-dataclass",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dict-to-dataclass",
    "package_url": "https://pypi.org/project/dict-to-dataclass/",
    "platform": "",
    "project_url": "https://pypi.org/project/dict-to-dataclass/",
    "project_urls": {
      "Homepage": "https://github.com/jackd68ed/dict-to-dataclass"
    },
    "release_url": "https://pypi.org/project/dict-to-dataclass/0.0.8/",
    "requires_dist": [
      "python-dateutil (==2.8.1)"
    ],
    "requires_python": ">=3.7",
    "summary": "Utils for mapping dataclass fields to dictionary keys, making it possible to create an instance of a dataclass from a dictionary.",
    "version": "0.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9566061,
  "releases": {
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfb030f807cebd1ffd655dbd953994c706aa85d58837471efe61c46d44486f78",
          "md5": "8672725bc0b3e8a5cc6673ec24206b3a",
          "sha256": "89c54e3df7f5522739e3e6fff062e50af1301c430a0773ee0f4fa74ea206c378"
        },
        "downloads": -1,
        "filename": "dict_to_dataclass-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8672725bc0b3e8a5cc6673ec24206b3a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10467,
        "upload_time": "2021-02-28T06:18:32",
        "upload_time_iso_8601": "2021-02-28T06:18:32.433169Z",
        "url": "https://files.pythonhosted.org/packages/df/b0/30f807cebd1ffd655dbd953994c706aa85d58837471efe61c46d44486f78/dict_to_dataclass-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b1246fcae09439f16d3d202f8cc5273b2a8d93c8094883a40b2831835f676e6",
          "md5": "6de54a9f33c34a0e3f4c5d244aafc346",
          "sha256": "899f6ecd83b86e6d78dfdff2841594c0b0d51834807efcfe32e3051c0db6ffde"
        },
        "downloads": -1,
        "filename": "dict_to_dataclass-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "6de54a9f33c34a0e3f4c5d244aafc346",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10926,
        "upload_time": "2021-02-28T06:18:33",
        "upload_time_iso_8601": "2021-02-28T06:18:33.429894Z",
        "url": "https://files.pythonhosted.org/packages/6b/12/46fcae09439f16d3d202f8cc5273b2a8d93c8094883a40b2831835f676e6/dict_to_dataclass-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50eba1d4b013e5714b7034b08ae9fff111b95d59e9310a19afdff0460b2ebc75",
          "md5": "ca8ce02503ac5188a010e12a95b2daa5",
          "sha256": "dc19ba72d3a5124409f09a1c56e004754240efb1e7379b0e790a4ef0be34b284"
        },
        "downloads": -1,
        "filename": "dict_to_dataclass-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca8ce02503ac5188a010e12a95b2daa5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10551,
        "upload_time": "2021-03-01T05:18:47",
        "upload_time_iso_8601": "2021-03-01T05:18:47.654670Z",
        "url": "https://files.pythonhosted.org/packages/50/eb/a1d4b013e5714b7034b08ae9fff111b95d59e9310a19afdff0460b2ebc75/dict_to_dataclass-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a886a903c9f96e94763cab43627798017110c302323da49d4184b3fecbb7a88",
          "md5": "1f076c3e4ed7cffee0b0f932e6ec778e",
          "sha256": "95784ab5dfa0e4cacb929e069ea738b8b2b00c2214414e30f4ed62e695069032"
        },
        "downloads": -1,
        "filename": "dict_to_dataclass-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "1f076c3e4ed7cffee0b0f932e6ec778e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11133,
        "upload_time": "2021-03-01T05:18:48",
        "upload_time_iso_8601": "2021-03-01T05:18:48.810487Z",
        "url": "https://files.pythonhosted.org/packages/7a/88/6a903c9f96e94763cab43627798017110c302323da49d4184b3fecbb7a88/dict_to_dataclass-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "50eba1d4b013e5714b7034b08ae9fff111b95d59e9310a19afdff0460b2ebc75",
        "md5": "ca8ce02503ac5188a010e12a95b2daa5",
        "sha256": "dc19ba72d3a5124409f09a1c56e004754240efb1e7379b0e790a4ef0be34b284"
      },
      "downloads": -1,
      "filename": "dict_to_dataclass-0.0.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ca8ce02503ac5188a010e12a95b2daa5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 10551,
      "upload_time": "2021-03-01T05:18:47",
      "upload_time_iso_8601": "2021-03-01T05:18:47.654670Z",
      "url": "https://files.pythonhosted.org/packages/50/eb/a1d4b013e5714b7034b08ae9fff111b95d59e9310a19afdff0460b2ebc75/dict_to_dataclass-0.0.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a886a903c9f96e94763cab43627798017110c302323da49d4184b3fecbb7a88",
        "md5": "1f076c3e4ed7cffee0b0f932e6ec778e",
        "sha256": "95784ab5dfa0e4cacb929e069ea738b8b2b00c2214414e30f4ed62e695069032"
      },
      "downloads": -1,
      "filename": "dict_to_dataclass-0.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "1f076c3e4ed7cffee0b0f932e6ec778e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11133,
      "upload_time": "2021-03-01T05:18:48",
      "upload_time_iso_8601": "2021-03-01T05:18:48.810487Z",
      "url": "https://files.pythonhosted.org/packages/7a/88/6a903c9f96e94763cab43627798017110c302323da49d4184b3fecbb7a88/dict_to_dataclass-0.0.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}