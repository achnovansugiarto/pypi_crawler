{
  "info": {
    "author": "sangarshanan",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Programming Language :: Python"
    ],
    "description": "# JazzIt ðŸŽ·\n\n[![Open All Collab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/Sangarshanan/jazzit/blob/master/notebook.ipynb)\n[![License](https://img.shields.io/pypi/l/jazzit.svg)](https://github.com/Sangarshanan/jazzit/blob/master/LICENSE)\n[![Say Thanks!](https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg)](https://saythanks.io/to/sangarshanan1998@gmail.com)\n\nEver wanted your scripts to play music while running/ on erroring out?\n\nOf course you didn't\n\nBut here it is anyway\n\n\n### Install\n\n```\npip install jazzit\n```\n\n### What it do?\n\nWith `Jazzit` you can just add a decorator to your functions and jazz it up \n\n- You can have a elevator music to go along with your long running script\n- Play humiliating music when it errors out to put you in your place\n\nThere are default tracks you can use, or you can use your own custom tracks\n\n### How to do it?\n\nPlay Frolic from curb your enthusiasm to keep you in your place\n\n```python\nfrom jazzit import error_track\n\n@error_track(\"curb_your_enthusiasm.mp3\", wait=7)\ndef run():\n    for num in reversed(range(10)):\n        print(10/num)\n\nif __name__ == \"__main__\":\n    run()\n\n```\n\nSip coffee to elevator music while your script is running\n\n```python\n\nfrom jazzit import waiting_track\n\ndef fibonacci(n):\n    if n < 0:\n        raise Exception(\"BE POSITIVE!!!\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n@waiting_track(\"elevator.mp3\")\ndef run(limit):\n    for num in range(1, limit):\n        print(fibonacci(num))\n\nif __name__ == \"__main__\":\n    run(1000)\n``` \n\nTo satisfy your WHAT !!! IT WORKED !!! moments\n\n\n```python\nfrom jazzit import success_track\n\n@success_track(\"anime-wow.mp3\")\ndef add(a,b):\n    print(a+b)\n\nif __name__ == \"__main__\":\n    add(12, 42)\n```\n\nThe in-build tracks are bruh_moment, elevator and curb_your_enthusiasm but you can add your custom tracks and urls\n\nCheck out some of the [examples](https://github.com/Sangarshanan/jazzit/tree/master/examples)\n\n\n### Jupyter Notebook \n\nCheck out the colab link above or the example [notebook](https://github.com/Sangarshanan/jazzit/blob/master/notebook.ipynb)\n\n### Use Jupyter Magic:\n\nLoad inside a Jupyter notebook\n\n``` python\n%load_ext jazzit\n```\n\nRunning away from the PEP8 police ðŸš²ðŸš“\n\n```python\n%%waiting_track -t elevator.mp3\n\ndef fibonacci(n):\n    if n < 0:\n        raise Exception(\"BE POSITIVE!!!\")\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\nfor num in range(1, 35):\n    print(fibonacci(num))\n```\n\nFor those BRUH moments in your life\n\n```python\n%%error_track -t bruh.mp3 -w 3\n\nfor num in reversed(range(10)):\n    print(10/num)\n```\n\nIt worked !!!\n\n```python\n%%success -t anime-wow.mp3 -w 3\n\nfor num in range(10):\n    print(num ** 2)\n```\n\nThere are two arguments in play here \n\n`-t` or `--track` that needs the sound track (Can be a file path, url, inbuilt tracks)\n\n`-w` or `--wait` (Optional, default is 3 seconds) Wait for x seconds before cutting the music \n\n\n### Dependencies\n\nJazz added with [playsound](https://github.com/TaylorSMarks/playsound)\n\nIf you getting hit with `ModuleNotFound` errors while running jazzit\n\nYou might need to install Pygobject https://pygobject.readthedocs.io/en/latest/getting_started.html\n\n\n> :warning: **Use wisely**:  Best suited for scripts you run non-professionally!\n\n\n### Profiling\n\nTL;DR It is definitely slower with music\n\nI did a lil profiling on bin/profiler.py\n\n> Without Music\n\nTime to run : 5.2486350536346436 secs\n\n> With Music\n\nTime to run: 5.270173072814941 secs\n\nMemory profiling `python -m memory_profiler bin/profiler.py`\n\n### Social \n\nHacker News: https://news.ycombinator.com/item?id=24485447\n\nTwitter: https://twitter.com/sangarshanan/status/1305933704007573504\n\n[amrrs](https://github.com/amrrs) put together a video https://youtu.be/qkyQfIjvPmM :)\n\n\n### Disclaimer\n\nDefault tracks were pulled from royalty-free stock audio sites (They are mostly gaming and meme sound effects)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sangarshanan/jazzit",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jazzit",
    "package_url": "https://pypi.org/project/jazzit/",
    "platform": "",
    "project_url": "https://pypi.org/project/jazzit/",
    "project_urls": {
      "Homepage": "https://github.com/sangarshanan/jazzit"
    },
    "release_url": "https://pypi.org/project/jazzit/0.3.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Add unwanted jazz to your scripts",
    "version": "0.3.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8245357,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "65d95eb52cf40398144984d638fe78870189cfed03179910840ac61105b26c14",
          "md5": "beaa7ddf479a2f2f7d6dc31fdf8f0f4c",
          "sha256": "5cbd82b16a46576087d9e399ec494445919e1710998a1ae8a81806748fe9ce0b"
        },
        "downloads": -1,
        "filename": "jazzit-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "beaa7ddf479a2f2f7d6dc31fdf8f0f4c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3060807,
        "upload_time": "2020-09-13T19:52:25",
        "upload_time_iso_8601": "2020-09-13T19:52:25.205687Z",
        "url": "https://files.pythonhosted.org/packages/65/d9/5eb52cf40398144984d638fe78870189cfed03179910840ac61105b26c14/jazzit-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "935eea267a3b6e2018f212dd574b016986488f5e2f3dd3dae62c331f7cfca465",
          "md5": "beaaa3148f953282a5cd4ea4287ae7ca",
          "sha256": "90b6d1d8d06ce2e47eac2d395869352d59f8eb7fcce5d77f3ecf2f9a035a542a"
        },
        "downloads": -1,
        "filename": "jazzit-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "beaaa3148f953282a5cd4ea4287ae7ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3060903,
        "upload_time": "2020-09-14T21:09:52",
        "upload_time_iso_8601": "2020-09-14T21:09:52.629616Z",
        "url": "https://files.pythonhosted.org/packages/93/5e/ea267a3b6e2018f212dd574b016986488f5e2f3dd3dae62c331f7cfca465/jazzit-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec3ffaef065acd0b4a686d219e36f1a7badcde94836eb8f13d302fcfc70cf396",
          "md5": "25516ac66679390b1084149b34f0cdd4",
          "sha256": "df621d07d357ee44c5b07867a180eaf3dc18fdf6dd0c29d86f6f85799719df71"
        },
        "downloads": -1,
        "filename": "jazzit-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "25516ac66679390b1084149b34f0cdd4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3123047,
        "upload_time": "2020-09-21T17:31:21",
        "upload_time_iso_8601": "2020-09-21T17:31:21.690808Z",
        "url": "https://files.pythonhosted.org/packages/ec/3f/faef065acd0b4a686d219e36f1a7badcde94836eb8f13d302fcfc70cf396/jazzit-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d55ee07d34fd2e445432f1c80b65ca9f7406c8f149173ce0df29ac986f01394",
          "md5": "56e64acb3e1c8fc54082982f27eae419",
          "sha256": "30c2743583b53fea16a2b8342767f2f4fdec837d59b88f3054289a73a36b92f7"
        },
        "downloads": -1,
        "filename": "jazzit-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "56e64acb3e1c8fc54082982f27eae419",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3124359,
        "upload_time": "2020-09-22T16:07:24",
        "upload_time_iso_8601": "2020-09-22T16:07:24.373412Z",
        "url": "https://files.pythonhosted.org/packages/2d/55/ee07d34fd2e445432f1c80b65ca9f7406c8f149173ce0df29ac986f01394/jazzit-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d55ee07d34fd2e445432f1c80b65ca9f7406c8f149173ce0df29ac986f01394",
        "md5": "56e64acb3e1c8fc54082982f27eae419",
        "sha256": "30c2743583b53fea16a2b8342767f2f4fdec837d59b88f3054289a73a36b92f7"
      },
      "downloads": -1,
      "filename": "jazzit-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "56e64acb3e1c8fc54082982f27eae419",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3124359,
      "upload_time": "2020-09-22T16:07:24",
      "upload_time_iso_8601": "2020-09-22T16:07:24.373412Z",
      "url": "https://files.pythonhosted.org/packages/2d/55/ee07d34fd2e445432f1c80b65ca9f7406c8f149173ce0df29ac986f01394/jazzit-0.3.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}