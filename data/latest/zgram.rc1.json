{
  "info": {
    "author": "Pluto",
    "author_email": "hi@ojoll.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## 框架更新了我还没同步过来 大的结构会有变化 三天之内全部修改完 我说的  耶稣也拦不住我(更新完了)\r\n\r\n## 新手安装教程请看\r\nhttps://southcat.net/2526/\r\n\r\n## 插件必看\r\n喵帕斯的已经没了 自动补码是喵帕斯的  需要dlercloud的请把updatacode目录下的dlercloud.py文件名修改为updatacode.py覆盖掉源文件，需要其他的自己修改或是可以找我\r\n我有时间就做一个 马上放假了时间多的是\r\n\r\n## 第一次开发有问题及时反馈\r\nemail:admin@southcat.net\r\n\r\n博客:[南猫](https://southcat.net)\r\n\r\n基于[zgram](https://github.com/plutobell/zgram)开源项目开发。\r\n\r\n## 增加功能\r\n\r\n1.邀请码自动发码模块 并且限制领取数量（邀请码添加在invite_code目录下的code.txt 一行一个）\r\n\r\n2.邀请码数量统计，如果邀请码用完自动给管理员发消息（需自行修改len_invite.py里面的发送id）\r\n\r\n3.补码模块已经开发 指令`/add_code邀请码`   请注意一行一码因为太菜要求比较严格 可能效果不是很理想，请等我再去学两天python再回来改\r\n\r\n4.删除用户信息模块，删除后用户可以再次获取邀请码指令`/del用户id`目前只能删除单个用户\r\n\r\n5.updatacode模块，目前仅支持从喵帕斯进行获取，会自动抓取邀请码页面前两页的邀请码，并和之前的数据进行对比，然后写入code，后续会支持更多网站\r\n理论上所有和喵帕斯同模板的都可以使用，请在updatacode/updatacode.py 文件夹内填入你的账号密码\r\n\r\n6.很遗憾喵关门了 在plguins/updatacode文件夹下更新了dlercloud的自动更新模块，需要使用的话备份原文件，将文件名修改为updatacode.py即可，理论上喵帕斯的补码支持所有同模板的网站只需要更改里面的网站即可，接下来会针对所有有邀请码模块的网站开发补码模块，或是你们也可以从邮箱或是tg发给我网站，我尽量进行适配（放假闲的）\r\n## 开发计划\r\n1.增加管理员添加邀请码模块\r\n\r\n2.多类邀请码模块支持\r\n\r\n3.代码优化，目前存在大量多余的代码\r\n\r\n4.添加白名单，白名单用户支持无限获取\r\n\r\n环境要求\r\nPython版本\r\nzgram 只支持 Python3.x，不支持Python2.x。\r\n\r\n本项目在 Python 3.5 及以上版本测试通过。\r\n\r\n安装\r\npip install zgram\r\n升级\r\npip install zgram --upgrade\r\n使用\r\n一行命令启动 (Polling Mode)\r\nzgram -c/--config <config file path> -k/--key <bot key> -r/--root <your user id>\r\n此命令会自动生成在Polling模式下适用的配置文件，但仍需手动配置插件路径。\r\n\r\n一、运行模式\r\nzgram 支持以 Webhook 模式和 Polling 模式运行。生产环境推荐使用 Webhook 模式，而 Polling 则仅用于开发环境。\r\n\r\n1、Webhook 模式\r\n要以 Webhook 模式运行，请将配置文件字段 webhook 设置为 True ，此模式涉及的配置文件字段如下：\r\n\r\n[config]\r\nwebhook=True\r\nself_signed=False\r\ncert_key=your private cert path\r\ncert_pub=your public cert path\r\nserver_address=your server ip address or domain\r\nserver_port=your server port\r\nlocal_address=webhook local address\r\nlocal_port=webhook local port\r\nself_signed 用于设置是否使用自签名证书，而 cert_key 和 cert_pub 则是你的证书路径(绝对路径)，server_address 为你的服务器公网IP, server_port 为服务器的端口(目前 telegram 官方仅支持 443, 80, 88, 8443)，local_address 为Webhook 本地监听地址， local_port 为 Webhook 本地运行的端口。\r\n\r\n推荐搭配 nginx 使用，自签名证书生成请参考：Generating a self-signed certificate pair (PEM)\r\n\r\n2、Polling 模式\r\n要以 Polling 模式运行，只需要保证配置文件 webhook 字段为 False 即可。此模式最基本的配置文件如下:\r\n\r\n[config]\r\nkey=bot key\r\npool_size=40\r\nwebhook=False\r\nroot_id=your user id\r\ndebug=False\r\nplugin_dir=your plugin dir\r\n二、运行\r\n任意路径打开终端，输入以下命令：\r\n\r\n对于使用程序配置文件默认路径的：\r\n\r\n输入zgram 回车,正常情况下你应该能看见屏幕提示机器人开始运行。\r\n\r\n对于命令行手动指定配置文件路径的：\r\n\r\n输入zgram -c/--config <configure file path> 回车,正常情况下你应该能看见屏幕提示机器人开始运行。(更多指令请通过 -h/--help 查看)\r\n\r\n可配合supervisor使用。\r\n\r\n三、配置文件\r\n完整的配置文件如下所示:\r\n\r\n[config]\r\nkey=bot key\r\nplugin_dir=your plugin dir\r\npool_size=40 //the thread pool size, default 40, range(1, 101)\r\nwebhook=False\r\nself_signed=False //Optional while webhook is False\r\ncert_key=your private cert path //Optional while webhook is False\r\ncert_pub=your public cert path //Optional while webhook is False\r\nserver_ip=your server ip address //Optional while webhook is False\r\nserver_port=your server port //Optional while webhook is False\r\nlocal_address=webhook local address //Optional while webhook is False\r\nlocal_port=webhook local port //Optional while webhook is False\r\nroot_id=your user id\r\ndebug=False\r\ndrop_pending_updates=False\r\nlocal_api_server=local api server address //[Optional]\r\n在 1.13.0 及以上版本，支持自动生成配置文件。（默认为Polling模式）\r\n\r\n1.在命令行未指定配置文件路径的情况下，会在默认配置文件路径下不存在配置文件时自动生成配置文件 config.cfg。\r\n\r\n在Linux下，会自动在用户目录下创建文件夹 .zgram ，并生成配置文件 config.cfg\r\n\r\n在Windows下，则会在 C:\\Users\\<username> 目录下创建文件夹 .zgram ，并生成配置文件 config.cfg\r\n\r\n2.指定配置文件\r\n\r\nLinux 和 Windows 都可在命令行通过参数手动指定配置文件路径，命令格式：\r\n\r\nzgram -c/--config <configure file path>\r\n路径必须为绝对路径，此情况下也会在指定路径上不存在配置文件时自动生成配置文件 ，配置文件命名由指定的路径决定。\r\n\r\nTip: 自动生成的配置文件未设置这几个字段值：key、root_id、plugin_dir，key 和 root_id 为必须，但我们仍然可以通过命令行设置他们：\r\n\r\nzgram -c/--config <config file path> -k/--key <bot key> -r/--root <your user id>\r\n使用以上命令会以Polling模式运行框架，而无需困扰于处理配置文件。\r\n\r\n之后请手动设置 plugin_dir 。\r\n\r\n插件开发指南 (以 Hello 插件为例) BETA 0.8\r\n一、插件结构\r\n一个完整的 zgram 插件应当呈现为一个文件夹，即一个Python包，以 Hello 插件为例，最基本的目录结构如下：\r\n\r\nHello/\r\n  ./__init__.py\r\n  ./Hello.py\r\n  ./Hello_screenshot.png\r\n  ./readme.md\r\n  ./requirement.txt\r\n二、规则\r\n命名\r\n在构建zgram插件中应当遵守的规则是：每个插件目录下应当存在一个与插件同名的.py 文件，比如插件 Hello 中的 Hello.py 文件，并且此文件中必须存在作为插件入口的同名函数，以插件 Hello 为例：\r\n\r\n#file Hello/Hello.py\r\n\r\n# -*- coding:utf-8 -*-\r\n\r\ndef Hello(bot, message):\r\n    pass\r\n函数 Hello() 即为插件的入口函数，参数 bot 为Bot接口库实例化对象，参数 message 用于接收消息数据。\r\n\r\n资源路径\r\n若要打开某个插件目录下的文件资源，需要使用的路径应当遵循以下的格式：\r\n\r\nbot.path_converter(bot.plugin_dir + \"<plugin dir name>/<resource address>\")\r\n方法 path_converter 根据操作系统转换路径格式。\r\n\r\n三、自定义触发指令\r\n插件指令\r\n插件的触发指令可不同于插件名，允许自定义。以插件 Hello 为例，触发指令为 /helloworld 而不是 Hello。\r\n\r\n修改插件目录下的 __init__.py 文件设置触发指令：\r\n\r\n#file Hello/__init__.py\r\n\r\n#/helloworld\r\n#Hello World插件例子\r\n第一行为触发指令，默认以 / 作为前缀；第二行为插件简介。\r\n\r\n不用作插件的特殊情况\r\n通常情况下，位于 plugins 目录下的所有包都将被识别为插件并自动加载到 zgram 中。但在某些情况下，存在并不用作插件而只是多个插件共用包的情况，若想该包不被 zgram 加载，请将触发指令设置为 ~~ 。以 tools 共用包为例， __init__.py 文件内容如下：\r\n\r\n#fille tools/__init__.py\r\n\r\n#~~\r\n#tools 包的简介\r\n建议用作插件的包名遵守 Pascal命名法，即每个单词的首字母大写；而不用做插件的包名使用全小写的包名，每个单词之间以_ 分隔。以区分 插件包 和 非插件包 ：\r\n\r\n- plugins\r\n  - Menu    #插件包\r\n  - tools   #非插件包\r\n四、插件模板创建工具\r\n在 v1.9.20_dev 及以上版本，可以通过命令行指令一键创建插件模板。\r\n\r\nzgram -p/--plugin <plugin name>\r\n该指令会使用框架配置文件(config.cfg)中的插件路径作为所创建插件模板的存放路径。\r\n\r\n五、周期性任务\r\n在 v1.11.1 及以上版本，可以创建周期性任务，功能类似循环定时器。\r\n\r\n可获得的方法：\r\n\r\nschedule.add : 添加任务\r\nschedule.delete : 移除任务\r\nschedule.find : 查找任务\r\nschedule.clear : 清空任务池\r\nschedule.status : 查看任务池状态\r\n例：\r\n\r\nok, uid = bot.schedule.add(gap, event, (bot, ))\r\nok, uid = bot.schedule.delete(uid)\r\nok, uid = bot.schedule.find(uid)\r\nok, uid = bot.schedule.clear()\r\nok, uid = bot.schedule.status()\r\n周期性任务池的大小为全局线程池的三分之一 ，线程池大小则可通过配置文件指定。\r\n1.克隆或点击下载本项目到本地，保证本机安装有`Python3.x`版本和包`requests` ；\r\n\r\n\r\n\r\n2.`config.cfg` 配置文件\r\n\r\n配置文件格式:\r\n\r\n```python\r\n[config]\r\nkey=your key\r\npool_size=40 //the thread pool size, default 40, range(1, 101)\r\nwebhook=False\r\ncert_pub=your public certificate dir //Optional while webhook is False\r\nserver_ip=your server ip address //Optional while webhook is False\r\nserver_port=your server port //Optional while webhook is False\r\nlocal_address=webhook local address //Optional while webhook is False\r\nlocal_port=webhook local port //Optional while webhook is False\r\nroot=your user id\r\ndebug=False\r\ntimeout=60\r\nplugin_dir=your plugin dir   //[Optional]\r\n```\r\n\r\n* Linux\r\n\r\n在 `/root` 目录下创建文件夹 `.zgram` ,并在其内新建配置文件 `config.cfg` ,按照上面的格式填写配置文件\r\n\r\n* Windows\r\n\r\n在 `C:\\Users\\<username>`  目录下创建文件夹 `.zgram` ,并在其内新建配置文件 `config.cfg` ,按照上面的格式填写配置文件\r\n\r\n* 指定配置文件\r\n\r\nLinux 和 Windows 都可在命令行通过参数手动指定配置文件路径，命令格式：\r\n\r\n```\r\npython -m zgram -c/-C <configure file path>\r\n```\r\n\r\n路径必须为绝对路径。\r\n\r\n\r\n\r\n3.运行\r\n\r\n终端下进入zgram文件夹所在目录。\r\n\r\n* 对于使用程序配置文件默认路径的：\r\n\r\n  输入`python -m zgram` 回车,正常情况下你应该能看见屏幕提示机器人开始运行。\r\n\r\n* 对于命令行手动指定配置文件路径的：\r\n\r\n  输入`python -m zgram -c/-C <configure file path>` 回车,正常情况下你应该能看见屏幕提示机器人开始运行。\r\n\r\n\r\n\r\n#### 三、Pip安装运行\r\n\r\n##### 安装 #####\r\n\r\n* 确保本机Python环境拥有pip包管理工具。\r\n\r\n* 在本项目Releases页面下载包文件。\r\n\r\n* 本机命令行进入包文件所在目录，执行：\r\n\r\n  ```\r\n  pip install <zgram package file name>\r\n  \r\n  or\r\n  \r\n  pip3 install <zgram package file name>\r\n  ```\r\n\r\n由于API未封装完毕，暂未上传至 `PyPI` ,故不能在线安装，望谅解。\r\n\r\n##### 运行 #####\r\n\r\n任意路径打开终端，输入以下命令：\r\n\r\n- 对于使用程序配置文件默认路径的：\r\n\r\n  输入`zgram` 回车,正常情况下你应该能看见屏幕提示机器人开始运行。\r\n\r\n- 对于命令行手动指定配置文件路径的：\r\n\r\n  输入`zgram -c/-C <configure file path>` 回车,正常情况下你应该能看见屏幕提示机器人开始运行。\r\n\r\n\r\n\r\n可配合`supervisor`使用。\r\n\r\n\r\n\r\n\r\n\r\n## 插件开发指南 (以 Hello 插件为例) BETA 0.6\r\n\r\n#### 一、插件结构\r\n\r\n一个完整的 `zgram` 插件应当呈现为一个文件夹，即一个Python包，以 `Hello` 插件为例，最基本的目录结构如下：\r\n\r\n```Python\r\nHello/\r\n  ./__init__.py\r\n  ./Hello.py\r\n  ./Hello_screenshot.png\r\n  ./readme.md\r\n```\r\n\r\n#### 二、规则\r\n\r\n##### 命名\r\n\r\n在构建zgram插件中应当遵守的规则是：每个插件目录下应当存在一个与插件同名的`.py` 文件，比如插件 `Hello ` 中的 `Hello.py` 文件，并且此文件中必须存在作为插件入口的同名函数，以插件 `Hello` 为例：\r\n\r\n```python\r\n#file Hello/Hello.py\r\n\r\n# -*- coding:utf-8 -*-\r\n\r\ndef Hello(bot, message):\r\n    pass\r\n```\r\n\r\n函数 `Hello()` 即为插件的入口函数，参数 `bot` 为Bot接口库实例化对象，参数 `message` 用于接收消息数据。\r\n\r\n\r\n\r\n\r\n\r\n##### 资源路径\r\n\r\n若要打开某个插件目录下的文件资源，需要使用的路径应当遵循以下的格式：\r\n\r\n```python\r\nbot.plugin_dir + \"<plugin dir name>/<resource address>\"\r\n```\r\n\r\n#### 三、自定义触发指令\r\n\r\n##### 插件指令\r\n\r\n插件的触发指令可不同于插件名，允许自定义。以插件 `Hello` 为例，触发指令为 `/helloworld` 而不是 `Hello`。\r\n\r\n修改插件目录下的 `__init__.py` 文件设置触发指令：\r\n\r\n```python\r\n#file Hello/__init__.py\r\n\r\n#/helloworld\r\n#Hello World插件例子\r\n```\r\n\r\n第一行为触发指令，默认以 `/`  作为前缀；第二行为插件简介。\r\n\r\n\r\n\r\n##### 不用作插件的特殊情况\r\n\r\n通常情况下，位于 `plugins` 目录下的所有包都将被识别为插件并自动加载到 `zgram` 中。但在某些情况下，存在并不用作插件而只是多个插件共用包的情况，若想该包不被 `zgram` 加载，请将触发指令设置为 `~~`  。以 `tools` 共用包为例， `__init__.py` 文件内容如下：\r\n\r\n```python\r\n#fille tools/__init__.py\r\n\r\n#~~\r\n#tools 包的简介\r\n```\r\n\r\n建议用作插件的包名遵守 `Pascal命名法`，即每个单词的首字母大写；而不用做插件的包名使用全小写的包名，每个单词之间以`_`  分隔。以区分 `插件包` 和 `非插件包` ：\r\n\r\n```python\r\n- plugins\r\n  - Menu    #插件包\r\n  - tools   #非插件包\r\n```\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://ojoll.com",
    "keywords": "zgram telegram bot telegram bot api telegram",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zgram",
    "package_url": "https://pypi.org/project/zgram/",
    "platform": null,
    "project_url": "https://pypi.org/project/zgram/",
    "project_urls": {
      "Homepage": "https://ojoll.com"
    },
    "release_url": "https://pypi.org/project/zgram/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "zgram is a robot framework based on Telegram Bot API, with plug-in system, easy to extend.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16191000,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d6389f181773c4b0ae8ed3432fad690693737a7cf2acffb76ab6c1499b74061",
          "md5": "9322e21170cd410bc82c6950350b5a46",
          "sha256": "88bee29ed98606e1f58b8f061499c65bbef4f149db709dca07fad15a4bcaec26"
        },
        "downloads": -1,
        "filename": "zgram-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9322e21170cd410bc82c6950350b5a46",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 40101,
        "upload_time": "2022-12-22T23:51:07",
        "upload_time_iso_8601": "2022-12-22T23:51:07.457352Z",
        "url": "https://files.pythonhosted.org/packages/2d/63/89f181773c4b0ae8ed3432fad690693737a7cf2acffb76ab6c1499b74061/zgram-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d6389f181773c4b0ae8ed3432fad690693737a7cf2acffb76ab6c1499b74061",
        "md5": "9322e21170cd410bc82c6950350b5a46",
        "sha256": "88bee29ed98606e1f58b8f061499c65bbef4f149db709dca07fad15a4bcaec26"
      },
      "downloads": -1,
      "filename": "zgram-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9322e21170cd410bc82c6950350b5a46",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 40101,
      "upload_time": "2022-12-22T23:51:07",
      "upload_time_iso_8601": "2022-12-22T23:51:07.457352Z",
      "url": "https://files.pythonhosted.org/packages/2d/63/89f181773c4b0ae8ed3432fad690693737a7cf2acffb76ab6c1499b74061/zgram-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}