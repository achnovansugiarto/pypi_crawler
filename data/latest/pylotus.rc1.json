{
  "info": {
    "author": "Alex Claman",
    "author_email": "alexanderclaman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyLotus\n\nPyLotus is a simple Python wrapper for the Warframe API. \n\n## Description\n\nThis is a super simple wrapper for the Warframe API, information about which can be found [here](https://docs.warframestat.us/). Most requests to the API have been implemented; any that haven't been can be retrieved by requesting the worldstate. Also provided are some basic prebuilt classes to hold common responses like individual ```Fissure``` objects, etc. \n\n## Dependencies\n\nPyLotus only uses the built-in ```requests``` and ```json``` libraries, with ```pytest``` only being used to implement testing. These are all installable and upgradeable via [pip](https://pip.pypa.io/en/stable/).\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install PyLotus.\n\n```bash\npip install pylotus\n```\n\n## Usage\n\nAll platforms are supported for use with the API wrapper; a list containing the platform shorthand notations accepted by the API are accessible through the static ```wf_api.get_platforms()```.\n\n```python\nfrom pylotus import *\n\nprint(wf_api.get_platforms()) # It's always possible to retrieve all supported platforms with which to construct the API, even in a static context.\n```\n\n```python\n>>> ['pc', 'ps4', 'xb1', 'swi']\n```\n\nCreate a ```wf_api``` instance that can access the WarFrame API for a specified platform. Retrieve information from the API with the responses stored in lists of easily accessed JSON-formatted dict objects or individual objects.\n\n```python\nxbox_api_wrapper = wf_api('xb1') # Create an instance with your preferred platform.\n\ncurrent_fissures = xbox_api_wrapper.get_current_fissures() # Get back a list of JSON response dicts or a single JSON response dict.\n\ndo_something_with_the(current_fissures)\n```\n\nUse built-in classes, like the ```Fissure``` class, to easily wrap common API responses. Pass the class constructors the retrieved JSON representations of the API returns.\n\n```python\nfissure_objects = [Fissure(fissure) for fissure in current_fissures]\n\nprint(len(fissure_objects))\nfor f in fissure_objects:\n\tprint(type(f), f.enemy, f.missionType)\n```\n\n```python\n>>> 4\n>>> Fissure, Grineer, Defense\n>>> Fissure, Corpus, Defense\n>>> Fissure, Grineer, Interception\n>>> Fissure, Grineer, Mobile Defense\n```\n\nYou can also import only the API interface, skipping the prebuilt classes if you would rather. Do this by importing as follows:\n\n```python\nfrom pylotus import wf_api\n```\n\n## Exceptions and Error Handling\n\nThere are 3 custom exceptions (termed ```Errors```) in PyLotus: ```NonPlatformError```, raised when the platform passed to the ```wf_api``` constructor is invalid; ```DictTypeError```, raised when incorrect objects (not dicts or not correct dicts) are passed to class constructors; and ```StatusCodeError```, raised when the WarFrame API itself returns a non-200 response. These all have error messages associated with them accessible through ```Error.message```.\n\n## License\n\nLicensed under the [MIT](https://choosealicense.com/licenses/mit/) license. \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/alex-claman/pylotus",
    "keywords": "API",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pylotus",
    "package_url": "https://pypi.org/project/pylotus/",
    "platform": "",
    "project_url": "https://pypi.org/project/pylotus/",
    "project_urls": {
      "Bug Reports": "https://github.com/alex-claman/pylotus/issues",
      "Homepage": "https://github.com/alex-claman/pylotus",
      "Source": "https://github.com/alex-claman/pylotus/"
    },
    "release_url": "https://pypi.org/project/pylotus/1.0.0/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "A simple Python wrapper for the WarFrame API",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7611262,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2d22419f02ebe5c751e0ed5fc9265f032c80885745441bebb764f3611c04b1f",
          "md5": "48d1a2e5e5c75400a0e79823a1782f7e",
          "sha256": "4fa79549d2aafb5f745d9317f03c0d9df89ed81e34509cdba1d3e8727db092fb"
        },
        "downloads": -1,
        "filename": "pylotus-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "48d1a2e5e5c75400a0e79823a1782f7e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 7525,
        "upload_time": "2020-07-02T01:23:20",
        "upload_time_iso_8601": "2020-07-02T01:23:20.011526Z",
        "url": "https://files.pythonhosted.org/packages/b2/d2/2419f02ebe5c751e0ed5fc9265f032c80885745441bebb764f3611c04b1f/pylotus-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97925b52114ae63f72c7a22393ab9fff7e849bcb46cf26eb75df8e2b2f5b6f5c",
          "md5": "de56160dace9e854ea11100de9c5b6c8",
          "sha256": "579bb633581298fa967390f11985d3f97b425905fd11d1fac1816f23d711c5e3"
        },
        "downloads": -1,
        "filename": "pylotus-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "de56160dace9e854ea11100de9c5b6c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5496,
        "upload_time": "2020-07-02T01:23:22",
        "upload_time_iso_8601": "2020-07-02T01:23:22.305607Z",
        "url": "https://files.pythonhosted.org/packages/97/92/5b52114ae63f72c7a22393ab9fff7e849bcb46cf26eb75df8e2b2f5b6f5c/pylotus-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2d22419f02ebe5c751e0ed5fc9265f032c80885745441bebb764f3611c04b1f",
        "md5": "48d1a2e5e5c75400a0e79823a1782f7e",
        "sha256": "4fa79549d2aafb5f745d9317f03c0d9df89ed81e34509cdba1d3e8727db092fb"
      },
      "downloads": -1,
      "filename": "pylotus-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "48d1a2e5e5c75400a0e79823a1782f7e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 7525,
      "upload_time": "2020-07-02T01:23:20",
      "upload_time_iso_8601": "2020-07-02T01:23:20.011526Z",
      "url": "https://files.pythonhosted.org/packages/b2/d2/2419f02ebe5c751e0ed5fc9265f032c80885745441bebb764f3611c04b1f/pylotus-1.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97925b52114ae63f72c7a22393ab9fff7e849bcb46cf26eb75df8e2b2f5b6f5c",
        "md5": "de56160dace9e854ea11100de9c5b6c8",
        "sha256": "579bb633581298fa967390f11985d3f97b425905fd11d1fac1816f23d711c5e3"
      },
      "downloads": -1,
      "filename": "pylotus-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "de56160dace9e854ea11100de9c5b6c8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5496,
      "upload_time": "2020-07-02T01:23:22",
      "upload_time_iso_8601": "2020-07-02T01:23:22.305607Z",
      "url": "https://files.pythonhosted.org/packages/97/92/5b52114ae63f72c7a22393ab9fff7e849bcb46cf26eb75df8e2b2f5b6f5c/pylotus-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}