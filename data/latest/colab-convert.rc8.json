{
  "info": {
    "author": "HostsServer",
    "author_email": "msftserver@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# colab-convert\r\n\r\nConverts ipython/Google Colab Notebooks into runable Python code and vice versa \r\n\r\n## Features\r\n\r\n- converts files: .ipynb to .py and .py to .ipynb.\r\n- converts ipython/colab magic % and ! to regular python code\r\n- Supported magic commands (%)\r\n    - %pwd, %ls, %cd, %cp, %mv, %mkdir, %rm, %rmdir, %cat, %pip, %conda, %env, %setenv\r\n- comments out unsupported ipython magic\r\n- creates new import blocks for converted code\r\n- logs all changes to a log file for review\r\n- converted magic commands are appended with `#<cc-cm>`\r\n- commented magic commands are prefixed with `#<cc-ac>`\r\n- multi-lingual support to detect system language and let users choose\r\n    - Arabic, Dutch, English, German,\r\n        - consider helping expand translations by adding your langauge in the `/lang` folder\r\n\r\n\r\nAtom/Hydrogen or VSCode/Python allows creating a python file split into cells with `# %%` separators having the ability to run cells via the backend of a Jupyter session and interactively show results back.\r\n\r\n**VSCode**\r\n\r\n![](https://raw.githubusercontent.com/MSFTserver/colab-convert/main/examples/vscode.png)\r\n\r\n**Jupyter ipynb notebook**\r\n\r\n![](https://raw.githubusercontent.com/MSFTserver/colab-convert/main/examples/jupyter.png)\r\n\r\n## Install & Basic Usage\r\n\r\n```console\r\npip install colab-convert\r\n```\r\n\r\n```console\r\nUsage: colab-convert <input_file> <output_file> <flags>\r\n\r\n<input_file>: input file to convert\r\n<output_file>: output file to write to\r\n<flags>: extra flags to pass to the converter\r\n\r\nall flags are optional and have set defaults for best results\r\nuse flags to enable or disable certain functions on/off by default\r\n```\r\n\r\n```console\r\ncolab-convert in.ipynb out.py -nc -rm -o\r\n```\r\n\r\n## Default options and Flags\r\n```console\r\nDefault Flags Set (defaults are determined by input file)\r\n  ipynb input file:\r\n    [YES] convert magic , [YES] auto comment , [YES] imports , [NO] Outputs\r\n  py input file:\r\n    [NO] convert magic , [NO] auto comment , [NO] imports , [NO] Outputs\r\n\r\nAvailable Flags\r\n  toggle certain items on or off\r\n\r\n  --retain-magic  (-rm)  : Keep magic commands in the output\r\n      .py default    [ON]\r\n      .ipynb default [OFF]\r\n  --convert-magic  (-cm) : Convert magic commands to python code\r\n      .py default    [OFF]\r\n      .ipynb default [ON]\r\n  --auto-comment  (-ac)  : Convert unsupported magic commands to comments\r\n      .py default    [OFF]\r\n      .ipynb default [ON]\r\n  --no-comment  (-nc)    : Keep unsupported magic commands\r\n      .py default    [ON]\r\n      .ipynb default [OFF]\r\n  --no-imports  (-ni)    : Do not add imports from converted magic commands\r\n      .py default    [OFF]\r\n      .ipynb default [OFF]\r\n  --outputs  (-o)        : Outputs to console of conversions and commented lines.\r\n      .py default    [OFF]\r\n      .ipynb default [OFF]\r\n  --lang=  (-l=)         : Language to change output messages to\r\n       default [English]\r\n      --lang=en_US\r\n      en_US, en, english, eng, nl_NL, nl, dutch, dut, nlt, nederlands\r\n```\r\n\r\n# Conversion Code used\r\n\r\n<details>\r\n<summary>>click me to see code<</summary>\r\n\r\n### Magic commands using bang (!)\r\n\r\nfor this particular magic we send the command to the subprocess system and print the results\r\n\r\n```python\r\n#   !git clone https://test.com/test/test.git\r\n\r\nsub_p_res = subprocess.run(['git', 'clone' ,'https://test.com/test/test.git'], stdout=subprocess.PIPE).stdout.decode('utf-8')\r\nprint(sub_p_res)\r\n```\r\n\r\n### Magic commands using percent (%)\r\n\r\n%pwd - get current working directory\r\n```python\r\n#   %pwd\r\n\r\nos.getcwd()\r\n```\r\n\r\n-----\r\n\r\n%ls - list items in directory\r\n```python\r\n#   %ls\r\n\r\nos.listdir()\r\n```\r\n```python\r\n#   %ls folderName/subFolder\r\n\r\nos.listdir('folderName/subFolder')\r\n```\r\n\r\n-----\r\n\r\n%cd - change directory\r\n```python\r\n#   %cd test-directory\r\n\r\nos.chdir('test-directory')\r\n```\r\n\r\n-----\r\n\r\n%mkdir - make a new directory\r\n\r\n```python\r\n#   %mkdir test/newFolder\r\n\r\nos.makedirs('test/newFolder')\r\n```\r\n\r\n%mv - move file from one location to another\r\n```python\r\n#   %mv testFile.txt testFolder/\r\n\r\nshutil.move('testFile.txt', 'testFolder/testFile.txt')\r\n```\r\n\r\n-----\r\n\r\n%cp - copy file from one location to another\r\n```python\r\n#   %cp testFolder/testFile.txt newFolder/newTestFile.txt\r\n\r\nshutil.copy('testFolder/testFile.txt', 'newFolder/newTestFile.txt')\r\n```\r\n\r\n-----\r\n\r\n%cat - show the output of a file in standard format\r\n```python\r\n#   %cat testFolder/testFile.txt\r\n\r\ncat_read_file = open('testFolder/testFile.txt', 'r')\r\ncat_read_text = cat_read_file.read()\r\nprint(cat_read_text)\r\ncat_read_file.close()\r\n```\r\n\r\n-----\r\n\r\n%env & %set_env - get, set or list environmental variables\r\n\r\nthis command actually has 5 ways to be used\r\n```console\r\n%env\r\n    lists all environment variables/values\r\n%env var\r\n    get value for var\r\n[%env or %set_env] var val\r\n    set value for var\r\n[%env or %set_env] var=val\r\n    set value for var\r\n[%env or %set_env] var=$val\r\n    set value for var, using python expansion if possible\r\n```\r\n```python\r\n#   %env\r\n\r\nfor k, v in os.environ.items():\r\n    print(f'{k}={v}')\r\n```\r\n```python\r\n#   %env var\r\n\r\nos.environ['var']\r\n```\r\n```python\r\n#   %env var value\r\n#   %set_env var value\r\n\r\nos.environ['var'] = 'value'\r\n```\r\n```python\r\n#   %env var=value\r\n#   %set_env var=value\r\n\r\nos.environ['var'] = 'value'\r\n```\r\n```python\r\n#   %env var=$value\r\n#   %set_env var=$value\r\n\r\nos.environ['var'] = '$value'\r\n```\r\n\r\n-----\r\n\r\n%pip - install a pip package or other pip functions\r\n```python\r\n#   %pip install colab-convert\r\n\r\npip_sub_p_res = subprocess.run(['pip', 'install', 'colab-convert'], stdout=subprocess.PIPE).stdout.decode('utf-8')\r\nprint(pip_sub_p_res)\r\n```\r\n\r\n%conda - install a conda package or other conda functions\r\n```python\r\n#   %conda install colab-convert\r\n\r\nconda_sub_p_res = subprocess.run(['conda', 'install', 'colab-convert'], stdout=subprocess.PIPE).stdout.decode('utf-8')\r\nprint(conda_sub_p_res)\r\n```\r\n\r\n### Unsupported Magic Commands\r\n\r\nthese will be commented out\r\n```python\r\n#   %quickref\r\n\r\n#<cc-cm> %quickref\r\n```\r\n\r\n</details>\r\n\r\n\r\n## Example\r\n\r\n`colab-convert examples/plot.py examples/plot.ipynb`\r\n\r\nor\r\n\r\n`colab-convert examples/plot.ipynb examples/plot.py`\r\n\r\n\r\nMarkdown cells are converted to python multiline strings `'''`. Code cells are left as is.\r\n\r\neg. will render header section\r\n\r\n```python\r\n\"\"\"\r\n## Matplot example\r\n\r\n** Run the cell below to import some packages and show a line plot **\r\n\"\"\"\r\n```\r\n\r\n`# %%` is used by vscode as the cell marker on which 'Run Cell' action is available.\r\n\r\n\r\neg. will render a code cell\r\n\r\n```python\r\n# %%\r\nimport matplotlib.pyplot as plt\r\n```\r\n\r\nMetadata is converted from notebooks into .py and vise versa using `# !!` to denote the meta data lines in the .py files\r\n\r\neg.\r\n```python\r\n# %%\r\n# !! {\"metadata\":{\r\n# !!   \"id\": \"PlotIt\"\r\n# !! }}\r\nimport matplotlib.pyplot as plt\r\n```\r\n\r\neg. final code block must include atleast this\r\n```python\r\n# %%\r\n# !! {\"main_metadata\":{\r\n# !!   \"anaconda-cloud\": {},\r\n# !!   \"kernelspec\": {\r\n# !!     \"display_name\": \"Python 3\",\r\n# !!     \"language\": \"python\",\r\n# !!     \"name\": \"python3\"\r\n# !!   },\r\n# !!   \"language_info\": {\r\n# !!     \"codemirror_mode\": {\r\n# !!       \"name\": \"ipython\",\r\n# !!       \"version\": 3\r\n# !!     },\r\n# !!     \"file_extension\": \".py\",\r\n# !!     \"mimetype\": \"text/x-python\",\r\n# !!     \"name\": \"python\",\r\n# !!     \"nbconvert_exporter\": \"python\",\r\n# !!     \"pygments_lexer\": \"ipython3\",\r\n# !!     \"version\": \"3.6.1\"\r\n# !!   }\r\n# !! }}\r\n```\r\n\r\n## Troubleshooting\r\n\r\n* If encoding problems on Windows try using `python>=3.7`, setting `set PYTHONUTF8=1` in Windows console and use `colab-convert` for UTF-8 files only. If using [Git-Bash on Windows](https://git-scm.com/download/win) setting:\r\n\r\n```console\r\nexport LANG=C.UTF-8\r\nexport PYTHONIOENCODING=utf-8\r\nexport PYTHONUTF8=1\r\n```\r\nshould be enough. Also try setting default Bash settings to UTF-8: [Options] - [Text] - [Locale / Character set] - [C / UTF-8]. It might affect all Bash runs so there would be no need to setting encoding every time. \r\n\r\n\r\n# Credits \r\n\r\n**colab-convert** is a fork of the [ipynb-py-convert](https://github.com/kiwi0fruit/ipynb-py-convert).\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MSFTserver/colab-convert",
    "keywords": "vscode,jupyter,convert,ipynb,py,atom,hydrogen,colab,google,google colab,notebook",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "colab-convert",
    "package_url": "https://pypi.org/project/colab-convert/",
    "platform": null,
    "project_url": "https://pypi.org/project/colab-convert/",
    "project_urls": {
      "Homepage": "https://github.com/MSFTserver/colab-convert"
    },
    "release_url": "https://pypi.org/project/colab-convert/2.0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Convert .py files runnable in VSCode/Python or Atom/Hydrogen to jupyter/colab .ipynb notebooks and vice versa",
    "version": "2.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13847594,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d473e1ddc8b8518f21202a404a4db67958f03728b9358ac485138bbea693d418",
          "md5": "69f08fc249c7b244acc5ef12143de7f8",
          "sha256": "16a30d8b34dc570d1171586f7ae63be8402371cd664f4bcfbbf5066547095d0f"
        },
        "downloads": -1,
        "filename": "colab-convert-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "69f08fc249c7b244acc5ef12143de7f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4355,
        "upload_time": "2022-04-06T23:35:31",
        "upload_time_iso_8601": "2022-04-06T23:35:31.559646Z",
        "url": "https://files.pythonhosted.org/packages/d4/73/e1ddc8b8518f21202a404a4db67958f03728b9358ac485138bbea693d418/colab-convert-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8fc42c1c3565b58593197cdca3e2e4d91619e58f7463531a6048dff10131227d",
          "md5": "9f351b4de16896e3add0f9bc5410fc1f",
          "sha256": "79036fe1f922207f7a568e45e040400ed0c4b4b59c1a71e41b4fd7044fd30c64"
        },
        "downloads": -1,
        "filename": "colab-convert-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9f351b4de16896e3add0f9bc5410fc1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4337,
        "upload_time": "2022-04-06T23:49:37",
        "upload_time_iso_8601": "2022-04-06T23:49:37.574611Z",
        "url": "https://files.pythonhosted.org/packages/8f/c4/2c1c3565b58593197cdca3e2e4d91619e58f7463531a6048dff10131227d/colab-convert-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "690f4516f13be131dcc4e50ab2f5f30e486711ed24dff25fba0504f8236f61b5",
          "md5": "7dab05a30b45f4b617b682232658e957",
          "sha256": "606055eff3ed78544ac8dc9a787c8f082e6068ff64d5289615ad059934dfb346"
        },
        "downloads": -1,
        "filename": "colab-convert-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7dab05a30b45f4b617b682232658e957",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14048,
        "upload_time": "2022-05-14T20:37:03",
        "upload_time_iso_8601": "2022-05-14T20:37:03.250707Z",
        "url": "https://files.pythonhosted.org/packages/69/0f/4516f13be131dcc4e50ab2f5f30e486711ed24dff25fba0504f8236f61b5/colab-convert-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1110f32f7f2725c8c9d517dab063da254a1ac84c8c19c0a5d78bee684b044900",
          "md5": "fe68010a7380f40af2bbfd2b40f4788e",
          "sha256": "cdd83fc224cf368bb28be1939b4956d242c9625aa6c9a765e63dd3b1e8ffc791"
        },
        "downloads": -1,
        "filename": "colab-convert-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fe68010a7380f40af2bbfd2b40f4788e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14148,
        "upload_time": "2022-05-14T21:19:06",
        "upload_time_iso_8601": "2022-05-14T21:19:06.011975Z",
        "url": "https://files.pythonhosted.org/packages/11/10/f32f7f2725c8c9d517dab063da254a1ac84c8c19c0a5d78bee684b044900/colab-convert-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30324d24d5c70bcc4824e002a01c83ede62b881bc4298f47ae30916b172bb5b7",
          "md5": "68377b18524204d4f789ddb99dd25ed4",
          "sha256": "ef51187abcc66470f4520d2b9b681a30989e8dd41ba704c3dd9ca52c5eb37b8f"
        },
        "downloads": -1,
        "filename": "colab-convert-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "68377b18524204d4f789ddb99dd25ed4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18579,
        "upload_time": "2022-05-14T21:39:27",
        "upload_time_iso_8601": "2022-05-14T21:39:27.977699Z",
        "url": "https://files.pythonhosted.org/packages/30/32/4d24d5c70bcc4824e002a01c83ede62b881bc4298f47ae30916b172bb5b7/colab-convert-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e19db93ee941f824b3b8e705b03cc3bf999af95813271e3e736722226461e694",
          "md5": "368dd269db3ff62b61b880e3f9af20aa",
          "sha256": "ee8d1d04c391f98ccd1f2ddc140f4406ce96e09a5334054da8eca84d2a969936"
        },
        "downloads": -1,
        "filename": "colab-convert-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "368dd269db3ff62b61b880e3f9af20aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18585,
        "upload_time": "2022-05-15T00:51:57",
        "upload_time_iso_8601": "2022-05-15T00:51:57.845211Z",
        "url": "https://files.pythonhosted.org/packages/e1/9d/b93ee941f824b3b8e705b03cc3bf999af95813271e3e736722226461e694/colab-convert-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b6c1baac96a62bfb3e877a42a478326bf236a17921a6cbf3839baf3064480cf",
          "md5": "d59f39a8a16e15c651f840db8476ee50",
          "sha256": "20a5f99443d2725a8afca82357405a57282084befa8414f633a966b0dbe45b28"
        },
        "downloads": -1,
        "filename": "colab-convert-2.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d59f39a8a16e15c651f840db8476ee50",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18594,
        "upload_time": "2022-05-15T01:08:09",
        "upload_time_iso_8601": "2022-05-15T01:08:09.801070Z",
        "url": "https://files.pythonhosted.org/packages/2b/6c/1baac96a62bfb3e877a42a478326bf236a17921a6cbf3839baf3064480cf/colab-convert-2.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19cdc67bd4a017b089a745687cd14c07e37ec13ce026397ebe8ec35165bea9bd",
          "md5": "4ece417f3e3361c287958c91edab61ad",
          "sha256": "3009a84a600c51bc56baf3d391e0992d8b3b0d11dfe90bbde0665c737699816c"
        },
        "downloads": -1,
        "filename": "colab-convert-2.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4ece417f3e3361c287958c91edab61ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18635,
        "upload_time": "2022-05-18T00:00:34",
        "upload_time_iso_8601": "2022-05-18T00:00:34.883358Z",
        "url": "https://files.pythonhosted.org/packages/19/cd/c67bd4a017b089a745687cd14c07e37ec13ce026397ebe8ec35165bea9bd/colab-convert-2.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "19cdc67bd4a017b089a745687cd14c07e37ec13ce026397ebe8ec35165bea9bd",
        "md5": "4ece417f3e3361c287958c91edab61ad",
        "sha256": "3009a84a600c51bc56baf3d391e0992d8b3b0d11dfe90bbde0665c737699816c"
      },
      "downloads": -1,
      "filename": "colab-convert-2.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "4ece417f3e3361c287958c91edab61ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18635,
      "upload_time": "2022-05-18T00:00:34",
      "upload_time_iso_8601": "2022-05-18T00:00:34.883358Z",
      "url": "https://files.pythonhosted.org/packages/19/cd/c67bd4a017b089a745687cd14c07e37ec13ce026397ebe8ec35165bea9bd/colab-convert-2.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}