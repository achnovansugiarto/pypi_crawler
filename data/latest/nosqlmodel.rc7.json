{
  "info": {
    "author": "Mehmet Ozgur Bayhan",
    "author_email": "mozgurbayhan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database :: Front-Ends"
    ],
    "description": "# NoSQLModel\n\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/nosqlmodel)](https://img.shields.io/pypi/pyversions/nosqlmodel)\n[![PyPI - License](https://img.shields.io/pypi/l/nosqlmodel)](https://img.shields.io/pypi/l/nosqlmodel)\n[![PyPI version](https://img.shields.io/pypi/v/nosqlmodel)](https://pypi.org/project/nosqlmodel/)\n[![PyPI - Downloads](https://pepy.tech/badge/nosqlmodel)](https://pepy.tech/project/nosqlmodel)\n[![pipeline status](https://gitlab.com/mozgurbayhan/nosqlmodel/badges/master/pipeline.svg)](https://gitlab.com/mozgurbayhan/nosqlmodel/commits/master)\n[![pylint status](https://gitlab.com/mozgurbayhan/nosqlmodel/-/jobs/artifacts/master/raw/pylint/pylint.svg?job=pylint)](https://gitlab.com/mozgurbayhan/nosqlmodel/commits/master)\n[![coverage report](https://gitlab.com/mozgurbayhan/nosqlmodel/badges/master/coverage.svg)](https://gitlab.com/mozgurbayhan/nosqlmodel/commits/master)\n\n\n***\n\n# Defination\n\nnosqlmodel is a first non-relational NoSql ORM framework. Easy way to create models with a nosql backend. \n\nOur Motto is simple :\n\n***Speed, Speed Speed!***\n\nSo there is unneccesarry relations, object convertions, heavy queries are out of our scope!\n\nCurrently Redis and Dynamodb supported.\n\n\n[https://gitlab.com/mozgurbayhan/nosqlmodel/blob/master/CHANGELOG](https://gitlab.com/mozgurbayhan/nosqlmodel/blob/master/CHANGELOG)\n\n# Help Us\n\nWe need contrbutors to add MemCache and MongoDB backends! \n\nFeel free to send us pull requests about them or any contributions about our N-ORM. \n\nWe will grow together.\n\nPS: Please vote up our project in [https://github.com/vinta/awesome-python/pull/1448](https://github.com/vinta/awesome-python/pull/1448) if you like (:\n\n\n# Tutorial\n\n## Declaration and Configuration\n\nnosqlmodel declaration is simple class declaration. \n\nDont forget to extend **BaseNosqlModel** and **Meta** declaration\n\n**WARNING:** All declared fields must return false in if check. Possible values: *False* , *0* , *None* , *\"\"* , *[]*, *{}* or `save_to_cache(compress=False)` must take compress=False. Otherwise it will cause a problem in stripping False values in compressed save.\n\n\n```python\nfrom nosqlmodel.basenosql import BaseNoSqlModel\nfrom nosqlmodel.connectors import dynamoconnector\nfrom nosqlmodel.connectors import redisconnector\nfrom nosqlmodel.connectors.redisconnector import RedisConnector\n\n# Configuration\n\nredisconnector.RHOST = REDIS_HOST\nredisconnector.RPORT = REDIS_PORT\ndynamoconnector.D_AWS_ACCESS_KEY_ID = DYNAMO_AWS_ACCESS_KEY_ID\ndynamoconnector.D_AWS_SECRET_ACCESS_KEY = DYNAMO_AWS_SECRET_ACCESS_KEY\ndynamoconnector.D_REGION_NAME = DYNAMO_REGION_NAME\n\n# Declaration\n\nclass TestCar(BaseNoSqlModel):\n    def __init__(self):\n        super().__init__()\n        self.plate_number = \"\"\n        self.top_speed = 0\n        self.z_to_h = 0\n\n    class Meta:\n        # connector = DynamoConnector(\"Test\") # Or you can us a redis connector too:\n        connector = RedisConnector(0) # 0 is dbnum\n        # or you can set table source to a different redis db\n        # connector = RedisConnector(0,\"192.168.1.1\",6666)\n        # think that as a primary key, index key is one of the keys which declared in class\n        indexkey = \"plate_number\" \n\n```\n\n## DB Operations\n\n```python\n\ntc = TestCar()\ntc.delete_table() # You can delete db--dynamo\ntc.create_table() # You can create db--dynamo\ntc.flush() # Flushes related db\ndbsize = tc.dbsize() # Returns item count in db\n\n```\n\n**Note:** you can override create_table, delete_table in class declaration\n\n## CRUD\n\nYou can simply make CRUD operations in objects. There is no seperate insert or update operation. All is **upsert** executed by *save_to_cache* \n\n```python\n# Create\ntc = TestCar() # There is no copy of object in db yet\ntc.plate_number = \"35 PLATE 35\"\ntc.save_to_cache() # now saved in db\n\n# Read\ntc = TestCar()\ntc.get_by_id(\"666 PLATE 666\") # Satan brings us the car with the idkey= 666 PLATE 666\n\n# In below satan brings us the car with the idkey= 666 PLATE 666 if not exists, creates a new one in the memory \n# If it cant find in hell creates a new one in memory ( :  Still doesnt exists in db!!!\ntc.get_or_create_by_id(\"666 PLATE 666\") \n\n# Update\ntc.top_speed = 666\ntc.save_to_cache() # Put it in the db again!\n\n# Delete\ntc.delete() # i dont want it anymore!\n\n# Populate\n\n#You can populate your cars from another dict:\nsatans_car = TestCar()\nstans_car.get_by_id(\"666 PLATE 666\")\n\nangel_car = TestCar()\nangel_car.from_dict(satans_car.to_dict()) # we clone stan's car and all its attributes\nangel_car.plate_number = \"7 PLATE 7\" # we turn it into new car\nangel_car.save_to_cache() # And save it to db as a new car!\n\n```\n\n## Bulk Operations\n\n```python\ntc = TestCar() \nkeys = tc.get_keys() # returns all keys in db\n\n# Assume we have 3 test cars\nupdict = {\n    \"1 TEST 35\": tcl35.to_dict(),\n    \"1 TEST 36\": tcl36.to_dict(),\n    \"1 TEST 37\": tcl37.to_dict()\n}\n\nTestCar.save_multi(updict)  # bulk insert \n\ndict_of_dicts = tc.get_multi([\"666 PLATE 666\",\"666 PLATE 667\"]) # returns selected cars in db as as dictionary dict\n\ncar_list = tc.get_all_as_objectlist() # returns all cars in db # Be careful memory usage could be a problem in big sizes !\nlist_of_dicts = tc.get_all_as_list() # returns all cars in db  as dictionary list, More speeder, more effective memory usage!\n\ncar_dict = tc.get_all_as_objectdict() # returns all cars in db as dict instead of list # Be careful memory usage could be a problem in big sizes\ndict_of_dicts = tc.get_all_as_dict() # returns all cars in db  as dictionary of dictionaries, More speeder, more effective memory usage!\n\n```\n\n## Tagging\n\nTagging is supported even your backend doesnt supports it too!!\n\nBut beware while using tags. All is in your responsibility.\n\nFor example you have to remove an object from tag if you removed object because tags and objects are not directly releated.\n\n```python\n# returns all tag names in db\ntaglist = TestCar.get_tags()\n\n# returns all items's keys tagged by satan\nitemkeylist = TestCar.get_tag_keys(\"Satan\")\n\n# returns all items tagged by Satan\nitemlist = TestCar.get_by_tag(\"Satan\")\n\ntc = TestCar() \ntc.get_by_id(\"666 PLATE 666\")\n\n# adds \"Satan\",\"Super car\", \"Red\" tags to item\ntc.add_tags_to_item([\"Satan\",\"Super car\", \"Red\"])\n\n# we added \"Super car\" by mistake and now will remove it from object\ntc.remove_item_from_tag(\"Super car\")\n\n# oh we forget to add tag \"Favorite\" now adding it to the item while save\ntc.save_to_cache([\"Favorite\"])\n\n```\n\n## Backup And Restore\n\nThere is also backup tools to keep things safe. In the below scenario we want to backup all the table,\nand restore back again.\n\n```python\n# ###############\n# EXPORT\n\nexportlist =  TestCar.get_all_as_list()\n\n# exports the exportlist into compressed, None fields cleaned, new line markers removes jsontext\nexport_text = TestCar.export_to_json_text(exportdict, compress_data=True)\n\n# or we can export it into a json file\nTestCar.export_to_json_file(\"export.json\", exportlist)\n\n# or we can export it into a zip file\nTestCar.export_to_json_zip(\"export.zip\", exportlist)\n\n# ###############\n# IMPORT\n\nTestCar.import_from_json_zip(\"export.zip\")\n# or\nTestCar.import_from_json_file(\"export.json\")\n# or\nTestCar.import_from_json_text(\"export_text\")\n\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/mozgurbayhan/nosqlmodel",
    "keywords": "nosql orm redis dynamo",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nosqlmodel",
    "package_url": "https://pypi.org/project/nosqlmodel/",
    "platform": "",
    "project_url": "https://pypi.org/project/nosqlmodel/",
    "project_urls": {
      "Bug Reports": "https://gitlab.com/mozgurbayhan/nosqlmodel/issues",
      "Funding": "https://www.losev.org.tr/bagis/Bagis.html",
      "Homepage": "https://gitlab.com/mozgurbayhan/nosqlmodel",
      "Say Thanks!": "https://gitlab.com/mozgurbayhan/nosqlmodel",
      "Source": "https://gitlab.com/mozgurbayhan/nosqlmodel"
    },
    "release_url": "https://pypi.org/project/nosqlmodel/1.4.2/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "nosqlmodel is a NoSql ORM without relations. Easy way to create models with a nosql backend. Currently Redis and Dynamodb supported.",
    "version": "1.4.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8299806,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4efb359f0636e9e7ed2003f0c65c804efb541ca1419dc0ec289523f1700fae2f",
          "md5": "fad17d1a4036e4ccb86452bb29b35759",
          "sha256": "42a45c88775caa0b70b8a3fea7bb2ac249d1b64c1ec06389312c895b31be9eee"
        },
        "downloads": -1,
        "filename": "nosqlmodel-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fad17d1a4036e4ccb86452bb29b35759",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 7998,
        "upload_time": "2019-12-05T12:53:09",
        "upload_time_iso_8601": "2019-12-05T12:53:09.198807Z",
        "url": "https://files.pythonhosted.org/packages/4e/fb/359f0636e9e7ed2003f0c65c804efb541ca1419dc0ec289523f1700fae2f/nosqlmodel-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad56671b6a5055af60c563cf001875486d877cb2f70eac484a5d0ee9cf9e5f4e",
          "md5": "7c6d8afad272b2ba06320b4b661c9dbc",
          "sha256": "3de7110686b7613df2a11052c8de89fa6cc9c6ba419523cb6b175be403819c57"
        },
        "downloads": -1,
        "filename": "nosqlmodel-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7c6d8afad272b2ba06320b4b661c9dbc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 13808,
        "upload_time": "2020-01-20T12:51:26",
        "upload_time_iso_8601": "2020-01-20T12:51:26.989446Z",
        "url": "https://files.pythonhosted.org/packages/ad/56/671b6a5055af60c563cf001875486d877cb2f70eac484a5d0ee9cf9e5f4e/nosqlmodel-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f270554408a8148cb9835c5fde8298131de8739bcf3a5ca8e82faa82de536a1",
          "md5": "80777a7b1dd607031f645829ae3d65a4",
          "sha256": "b1984e4ce11783f8ca0f98a76ac6ddb307975a20c957bc450e128fac73761fbc"
        },
        "downloads": -1,
        "filename": "nosqlmodel-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "80777a7b1dd607031f645829ae3d65a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 14061,
        "upload_time": "2020-02-07T13:36:31",
        "upload_time_iso_8601": "2020-02-07T13:36:31.094803Z",
        "url": "https://files.pythonhosted.org/packages/0f/27/0554408a8148cb9835c5fde8298131de8739bcf3a5ca8e82faa82de536a1/nosqlmodel-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2012e49f865b88364ddd59269295f1758552e491505d81983004a1ad3d60b89",
          "md5": "82b138d1bbfa79c7a4aa4e3e1cd25f0c",
          "sha256": "80da1e4236f4c89ac3a435f95a0b21a628d881025ec24e1f0e083081a644c958"
        },
        "downloads": -1,
        "filename": "nosqlmodel-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "82b138d1bbfa79c7a4aa4e3e1cd25f0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 14495,
        "upload_time": "2020-03-19T11:33:42",
        "upload_time_iso_8601": "2020-03-19T11:33:42.947336Z",
        "url": "https://files.pythonhosted.org/packages/f2/01/2e49f865b88364ddd59269295f1758552e491505d81983004a1ad3d60b89/nosqlmodel-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbb3c880433e409e66f029cf82618b73787c618de585899537340fc23e4b0577",
          "md5": "b360c477dde5322df6ac0423e7672a96",
          "sha256": "9d7b2c110b6ed61a19dae543c4097836ca85fe9a1f5fe473363070ca8863efbc"
        },
        "downloads": -1,
        "filename": "nosqlmodel-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b360c477dde5322df6ac0423e7672a96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 14801,
        "upload_time": "2020-05-07T09:30:31",
        "upload_time_iso_8601": "2020-05-07T09:30:31.218156Z",
        "url": "https://files.pythonhosted.org/packages/fb/b3/c880433e409e66f029cf82618b73787c618de585899537340fc23e4b0577/nosqlmodel-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "69812518b2984757040d6e61b333a535412246f4540bc6a9d37e1af5aad2100b",
          "md5": "dd62afc71dbf299ac7623064f4f7e301",
          "sha256": "4e347bf2d10e1a2b5bd2ecdb39bf4e77640e4966442a67ee8e6b1f557618a345"
        },
        "downloads": -1,
        "filename": "nosqlmodel-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dd62afc71dbf299ac7623064f4f7e301",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 14871,
        "upload_time": "2020-06-18T19:11:15",
        "upload_time_iso_8601": "2020-06-18T19:11:15.729352Z",
        "url": "https://files.pythonhosted.org/packages/69/81/2518b2984757040d6e61b333a535412246f4540bc6a9d37e1af5aad2100b/nosqlmodel-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6496db1f089e39dc6df01d146749fd531127a187f63e8834831be7f90e9874f",
          "md5": "81aacb3091248f4452dc98e42bdc16e1",
          "sha256": "439a4b7cd2e9063bf8078ba778ad6287e4fc3df1f09f58badf1f167fdf784ecd"
        },
        "downloads": -1,
        "filename": "nosqlmodel-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "81aacb3091248f4452dc98e42bdc16e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 14809,
        "upload_time": "2020-09-29T18:28:30",
        "upload_time_iso_8601": "2020-09-29T18:28:30.230997Z",
        "url": "https://files.pythonhosted.org/packages/b6/49/6db1f089e39dc6df01d146749fd531127a187f63e8834831be7f90e9874f/nosqlmodel-1.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6496db1f089e39dc6df01d146749fd531127a187f63e8834831be7f90e9874f",
        "md5": "81aacb3091248f4452dc98e42bdc16e1",
        "sha256": "439a4b7cd2e9063bf8078ba778ad6287e4fc3df1f09f58badf1f167fdf784ecd"
      },
      "downloads": -1,
      "filename": "nosqlmodel-1.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "81aacb3091248f4452dc98e42bdc16e1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 14809,
      "upload_time": "2020-09-29T18:28:30",
      "upload_time_iso_8601": "2020-09-29T18:28:30.230997Z",
      "url": "https://files.pythonhosted.org/packages/b6/49/6db1f089e39dc6df01d146749fd531127a187f63e8834831be7f90e9874f/nosqlmodel-1.4.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}