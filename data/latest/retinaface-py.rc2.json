{
  "info": {
    "author": "Jiankang Deng",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# RetinaFace in PyTorch\n\nA [PyTorch](https://pytorch.org/) implementation of [RetinaFace: Single-stage Dense Face Localisation in the Wild](https://arxiv.org/abs/1905.00641). Model size only 1.7M, when Retinaface use mobilenet0.25 as backbone net. We also provide resnet50 as backbone net to get better result. The official code in Mxnet can be found [here](https://github.com/deepinsight/insightface/tree/master/RetinaFace).\n\n## Mobile or Edge device deploy\nWe also provide a set of Face Detector for edge device in [here](https://github.com/biubug6/Face-Detector-1MB-with-landmark) from python training to C++ inference.\n\n## WiderFace Val Performance in single scale When using Resnet50 as backbone net.\n| Style | easy | medium | hard |\n|:-|:-:|:-:|:-:|\n| Pytorch (same parameter with Mxnet) | 94.82 % | 93.84% | 89.60% |\n| Pytorch (original image scale) | 95.48% | 94.04% | 84.43% |\n| Mxnet | 94.86% | 93.87% | 88.33% |\n| Mxnet(original image scale) | 94.97% | 93.89% | 82.27% |\n\n## WiderFace Val Performance in single scale When using Mobilenet0.25 as backbone net.\n| Style | easy | medium | hard |\n|:-|:-:|:-:|:-:|\n| Pytorch (same parameter with Mxnet) | 88.67% | 87.09% | 80.99% |\n| Pytorch (original image scale) | 90.70% | 88.16% | 73.82% |\n| Mxnet | 88.72% | 86.97% | 79.19% |\n| Mxnet(original image scale) | 89.58% | 87.11% | 69.12% |\n<p align=\"center\"><img src=\"retinaface/curve/Widerface.jpg\" width=\"640\"\\></p>\n\n## FDDB Performance.\n| FDDB(pytorch) | performance |\n|:-|:-:|\n| Mobilenet0.25 | 98.64% |\n| Resnet50 | 99.22% |\n<p align=\"center\"><img src=\"retinaface/curve/FDDB.png\" width=\"640\"\\></p>\n\n### Contents\n- [Installation](#installation)\n- [Training](#training)\n- [Evaluation](#evaluation)\n- [TensorRT](#tensorrt)\n- [References](#references)\n\n## Installation\n##### Clone and install\n1. git clone https://github.com/biubug6/Pytorch_Retinaface.git\n\n2. Pytorch version 1.1.0+ and torchvision 0.3.0+ are needed.\n\n3. Codes are based on Python 3\n\n##### Data\n1. Download the [WIDERFACE](http://shuoyang1213.me/WIDERFACE/WiderFace_Results.html) dataset.\n\n2. Download annotations (face bounding boxes & five facial landmarks) from [baidu cloud](https://pan.baidu.com/s/1Laby0EctfuJGgGMgRRgykA) or [dropbox](https://www.dropbox.com/s/7j70r3eeepe4r2g/retinaface_gt_v1.1.zip?dl=0)\n\n3. Organise the dataset directory as follows:\n\n```Shell\n  ./data/widerface/\n    train/\n      images/\n      label.txt\n    val/\n      images/\n      wider_val.txt\n```\nps: wider_val.txt only include val file names but not label information.\n\n##### Data1\nWe also provide the organized dataset we used as in the above directory structure.\n\nLink: from [google cloud](https://drive.google.com/open?id=11UGV3nbVv1x9IC--_tK3Uxf7hA6rlbsS) or [baidu cloud](https://pan.baidu.com/s/1jIp9t30oYivrAvrgUgIoLQ) Password: ruck\n\n## Training\nWe provide restnet50 and mobilenet0.25 as backbone network to train model.\nWe trained Mobilenet0.25 on imagenet dataset and get 46.58%  in top 1. If you do not wish to train the model, we also provide trained model. Pretrain model  and trained model are put in [google cloud](https://drive.google.com/open?id=1oZRSG0ZegbVkVwUd8wUIQx8W7yfZ_ki1) and [baidu cloud](https://pan.baidu.com/s/12h97Fy1RYuqMMIV-RpzdPg) Password: fstq . The model could be put as follows:\n```Shell\n  ./weights/\n      mobilenet0.25_Final.pth\n      mobilenetV1X0.25_pretrain.tar\n      Resnet50_Final.pth\n```\n1. Before training, you can check network configuration (e.g. batch_size, min_sizes and steps etc..) in ``data/config.py and train.py``.\n\n2. Train the model using WIDER FACE:\n  ```Shell\n  CUDA_VISIBLE_DEVICES=0,1,2,3 python train.py --network resnet50 or\n  CUDA_VISIBLE_DEVICES=0 python train.py --network mobile0.25\n  ```\n\n\n## Evaluation\n### Evaluation widerface val\n1. Generate txt file\n```Shell\npython test_widerface.py --trained_model weight_file --network mobile0.25 or resnet50\n```\n2. Evaluate txt results. Demo come from [Here](https://github.com/wondervictor/WiderFace-Evaluation)\n```Shell\ncd ./widerface_evaluate\npython setup.py build_ext --inplace\npython evaluation.py\n```\n3. You can also use widerface official Matlab evaluate demo in [Here](http://mmlab.ie.cuhk.edu.hk/projects/WIDERFace/WiderFace_Results.html)\n### Evaluation FDDB\n\n1. Download the images [FDDB](https://drive.google.com/open?id=17t4WULUDgZgiSy5kpCax4aooyPaz3GQH) to:\n```Shell\n./data/FDDB/images/\n```\n\n2. Evaluate the trained model using:\n```Shell\npython test_fddb.py --trained_model weight_file --network mobile0.25 or resnet50\n```\n\n3. Download [eval_tool](https://bitbucket.org/marcopede/face-eval) to evaluate the performance.\n\n<p align=\"center\"><img src=\"retinaface/curve/1.jpg\" width=\"640\"\\></p>\n\n## TensorRT\n-[TensorRT](https://github.com/wang-xinyu/tensorrtx/tree/master/retinaface)\n\n## References\n- [FaceBoxes](https://github.com/zisianw/FaceBoxes.PyTorch)\n- [Retinaface (mxnet)](https://github.com/deepinsight/insightface/tree/master/RetinaFace)\n```\n@inproceedings{deng2019retinaface,\ntitle={RetinaFace: Single-stage Dense Face Localisation in the Wild},\nauthor={Deng, Jiankang and Guo, Jia and Yuxiang, Zhou and Jinke Yu and Irene Kotsia and Zafeiriou, Stefanos},\nbooktitle={arxiv},\nyear={2019}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/andresprados/Pytorch_Retinaface",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "Andres Prados Torreblanca",
    "maintainer_email": "andresprator@gmail.com",
    "name": "retinaface-py",
    "package_url": "https://pypi.org/project/retinaface-py/",
    "platform": null,
    "project_url": "https://pypi.org/project/retinaface-py/",
    "project_urls": {
      "Homepage": "https://github.com/andresprados/Pytorch_Retinaface"
    },
    "release_url": "https://pypi.org/project/retinaface-py/0.0.2/",
    "requires_dist": [
      "numpy",
      "torch (>=1.1.0)",
      "torchvision (>=0.3.0)",
      "opencv-python"
    ],
    "requires_python": ">=3.6",
    "summary": "RetinaFace: Single-stage Dense Face Localisation in the Wild",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16857573,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "244b5256a788db5cbf6d59c637a0946f914ed510c20a6b63445d3c282d1c9246",
          "md5": "d4a1c30c68f1de33dd08bb0ab3dcff6e",
          "sha256": "7773b1282b4c46a4f431fcc31c16b7117f66fff71a3af7d569768a751b1daf03"
        },
        "downloads": -1,
        "filename": "retinaface_py-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4a1c30c68f1de33dd08bb0ab3dcff6e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 37319,
        "upload_time": "2023-02-14T13:28:36",
        "upload_time_iso_8601": "2023-02-14T13:28:36.285388Z",
        "url": "https://files.pythonhosted.org/packages/24/4b/5256a788db5cbf6d59c637a0946f914ed510c20a6b63445d3c282d1c9246/retinaface_py-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4cdef90cc5c235b8ccc8d893b0616a5d7ec59c59fe19339fa3b7fa7867b9f1ff",
          "md5": "126c7d46e2c6be785ac357096fd65084",
          "sha256": "d8cc969841714e4275c35f2cbcec951b88e23a583608588c6c4ecd985a71d66d"
        },
        "downloads": -1,
        "filename": "retinaface_py-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "126c7d46e2c6be785ac357096fd65084",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 37388,
        "upload_time": "2023-02-14T15:45:16",
        "upload_time_iso_8601": "2023-02-14T15:45:16.209018Z",
        "url": "https://files.pythonhosted.org/packages/4c/de/f90cc5c235b8ccc8d893b0616a5d7ec59c59fe19339fa3b7fa7867b9f1ff/retinaface_py-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4cdef90cc5c235b8ccc8d893b0616a5d7ec59c59fe19339fa3b7fa7867b9f1ff",
        "md5": "126c7d46e2c6be785ac357096fd65084",
        "sha256": "d8cc969841714e4275c35f2cbcec951b88e23a583608588c6c4ecd985a71d66d"
      },
      "downloads": -1,
      "filename": "retinaface_py-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "126c7d46e2c6be785ac357096fd65084",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 37388,
      "upload_time": "2023-02-14T15:45:16",
      "upload_time_iso_8601": "2023-02-14T15:45:16.209018Z",
      "url": "https://files.pythonhosted.org/packages/4c/de/f90cc5c235b8ccc8d893b0616a5d7ec59c59fe19339fa3b7fa7867b9f1ff/retinaface_py-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}