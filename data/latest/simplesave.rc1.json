{
  "info": {
    "author": "Miku",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# SimpleSave\r\nSimple Save is an easy way to work with data in your Python script. <br>\r\nYou can save and load your data without much effort or knowledge about any storage method. \r\nMoreover, it provides the possibilities to use data and variables globally in a script.<br>\r\nThe library does not reinvent the wheel, but enriches it with not having to deal with it.\r\n\r\n# Installation\r\n\r\nInstallation from pip ``pip install simplesave``\r\n\r\nInstallation with pip + github ``pip install git+https://github.com/princessmiku/simplesave``\r\n\r\n\r\n# Infos\r\n\r\n\r\n### Local and Global\r\nIt's possible to use it \"local\" or global (Planed) in your script\r\n\r\n**Different**<br>\r\nA local storage is allocated in a variable and the global storage is called directly from \r\nthe library without a variable, so it can be used from anywhere.\r\n\r\n### Storage Types\r\n\r\n- Internal\r\n- Json\r\n- XML (Planed)\r\n- SQLite (Planed)\r\n\r\n\r\n# Setup\r\n\r\n## Local Storage\r\nAll functions work the same on all types\r\n\r\n## Internal\r\nAn internal memory stores the data in the class directly, when you restart the script, it loses all the data. \r\nIf you want a way to save, this method is nothing for you.\r\n\r\nThis method is best suited for caches.\r\n\r\n````python\r\nfrom simplesave import Storage, INTERNAL\r\nstorage: Storage = Storage(INTERNAL)\r\n````\r\n\r\n### Value types\r\nAccept any python possible type and class\r\n\r\n## JSON\r\nThe JSON storage is built in the same way as the internal one, \r\nwith the addition that you can store it in a JSON and load it from there.\r\n\r\nWith this storage method a file specification with ``file_path=xxx`` is possible, \r\nif no specification is set it falls back to the file ``simplesave.json``.\r\n\r\n````python\r\nfrom simplesave import Storage, JSON\r\nstorage: Storage = Storage(JSON, file_path=\"data.json\")\r\n````\r\n\r\n### Value types\r\nAccept all regular JSON Possible types\r\n\r\n- String\r\n- Integer\r\n- Boolean\r\n- Float\r\n- List\r\n- Dictionary\r\n\r\nLists content and dictionary are not checked if they correspond to the json format, \r\nthis is the user's task to avoid it.\r\n\r\n## XML\r\nXML is the next planned feature\r\n\r\n## SQLite\r\nSQLite is planned\r\n\r\n\r\n# Usage\r\nAll functions work the same on all types\r\n\r\n### Variable types\r\n- ``path`` is always a string\r\n- ``index`` is always an integer \r\n- ``fill`` is always a list with string/integer objects\r\n- ``value`` can be anything, but can also be limited by certain storage methods, \r\n as not all types are supported by this one, for example JSON\r\n\r\n## Path build\r\nThe library works with a key point principle, \r\nwhich means that entries are separated with a dot in the path -> ``user.5521.information.email``.\r\n\r\nIf there are unknown variables in the path then they are marked with a `?` -> ``user.?.inofrmation.email``\r\n\r\nThe filling of this goes through several ways\r\n\r\n### String formatting\r\nOne way is to just do it directly in your own code\r\n\r\n````python\r\nuser_id = \"5521\"\r\nmy_path = f\"user.{user_id}.information.email\"\r\n````\r\n\r\n### Integrated functions\r\nThe library has the possibility to take it over, otherwise the `?` would have no sense.\r\n\r\nAs an example we will use the `get_variable` function, but all functions where a path is specified can use the.\r\n\r\n#### Use the fill parameter\r\nWith the fill you can pass a list with the values to be entered, \r\nstrings and integers are allowed in there.\r\n\r\n```python\r\nstorage.get_value(\"user.?.information.email\", fill=[5521])\r\n```\r\n#### Use args\r\nit is also possible to do it via args and write the parameters one after the other, but note if the function \r\nneeds something else like the `value` or the `index` first.\r\n\r\nStrings and integers are allowed in there.\r\n\r\n````python\r\nstorage.get_value(\"user.?.information.email\", 5521)\r\n````\r\nExample of multiple args\r\n\r\n````python\r\nstorage.get_value(\"user.?.information.email.?\", 5521, \"main_address\")\r\n````\r\n\r\n#### Note\r\nAt the end, it's possible to combine each other. \r\nBut you have to take note that first the args and then the list is taken.\r\n\r\n````python\r\nstorage.get_value(\"user.?.information.email.?\", 5521, fill=[\"main_address\"])\r\n````\r\nOf course, it is also possible to use several fill parameters, just to mention it\r\n````python\r\nstorage.get_value(\"user.?.information.email.?\", fill=[5521, \"main_address\"])\r\n````\r\n## GET\r\n\r\nfunctions for getting data from the storage\r\n\r\n### get_value\r\nGet a value from the storage\r\n\r\n#### Parameters\r\n- path\r\n\r\n#### Returns\r\n- any\r\n\r\n#### Example\r\n````python\r\nresult = storage.get_value(\"config.port\")\r\n````\r\n\r\n### get_value_by_index\r\nGet a value from the storage, if this a list, get the item at the position\r\n\r\n#### Parameters\r\n- path\r\n- index\r\n\r\n#### Returns\r\n- any\r\n\r\n#### Example\r\n\r\n````python\r\nresult = storage.get_value_by_index(\"config.ports\", 1)\r\n````\r\n\r\n### get_value_type\r\nGet the type of the value\r\n\r\n#### Parameters\r\n- path\r\n\r\n#### Returns\r\n- type of the value\r\n\r\n#### Example\r\n\r\n````python\r\nval_type = storage.get_value_type(\"config.ports\", 1)\r\n````\r\n\r\n### exists_path\r\nCheck if path exists\r\n\r\n#### Parameters\r\n- path\r\n\r\n#### Returns\r\n- true if path exists, else false\r\n\r\n#### Example\r\n````python\r\nexists = storage.exists_path(\"config.ports\")\r\n````\r\n\r\n## SET\r\n\r\n### set_value\r\nSet a value on the given path, its override the value if there's one\r\n\r\n#### Parameters\r\n- path\r\n- value\r\n\r\n#### Example\r\n````python\r\nstorage.set_value(\"config.port\", 2255)\r\n````\r\n\r\n### add_value\r\nAdd a value the list in a path, its generate automatically a list (without data loss), if there's no list\r\n\r\n#### Parameters\r\n- path\r\n- value\r\n\r\n#### Example\r\n````python\r\nstorage.add_value(\"config.port\", 2255)\r\n````\r\n\r\n## Delete\r\n\r\n### delete\r\nDelete all data in the path with the path itself (not the complete only the last)\r\n\r\n#### Parameters\r\n- path\r\n\r\n#### Example\r\n````python\r\nstorage.delete(\"config.port\")\r\n````\r\n\r\n### remove_value_by_value\r\nRemove from a list a value by the value\r\n\r\n#### Parameters\r\n- path\r\n- value\r\n\r\n#### Example\r\n````python\r\nstorage.delete(\"config.ports\", 2255)\r\n````\r\n\r\n### remove_value_by_index\r\nRemove from a list a value with the index\r\n\r\n#### Parameters\r\n- path\r\n- index\r\n\r\n#### Example\r\n````python\r\nstorage.delete(\"config.ports\", 1)\r\n````\r\n\r\n### null\r\nSet a path entry to null, its delete all sub data\r\n\r\n#### Parameters\r\n- path\r\n\r\n#### Example\r\n````python\r\nstorage.null(\"config.ports\")\r\n````\r\n\r\n## More\r\n\r\n### save\r\n\r\nSave all the data of the current storage in your file\r\n\r\n#### Example\r\n\r\n````python\r\nstorage.save()\r\n````\r\n\r\n-----\r\n\r\nNot completely used but\r\nTranslated with [DeepL translator](https://www.deepl.com/translator) (free version) \r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/princessmiku/simplesave",
    "keywords": "storage,json,share,data,saving,global,local,cache",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SimpleSave",
    "package_url": "https://pypi.org/project/SimpleSave/",
    "platform": null,
    "project_url": "https://pypi.org/project/SimpleSave/",
    "project_urls": {
      "Homepage": "https://github.com/princessmiku/simplesave"
    },
    "release_url": "https://pypi.org/project/SimpleSave/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.11.0",
    "summary": "SimpleSave is an easy way to work with data in your Python script. You can save and load your data without much effort or knowledge about any storage method.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17147769,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1954824b9a09df756eec2fdb29f7a062e2496bb78fa0f757283fc32e1800ef8",
          "md5": "69f84f56c8ac73370c6b34ba76557608",
          "sha256": "3ec89bd8c4e14e16627c3f208cc2b5ba8ca2093602a8c496f098701542e62029"
        },
        "downloads": -1,
        "filename": "SimpleSave-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "69f84f56c8ac73370c6b34ba76557608",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.11.0",
        "size": 6571,
        "upload_time": "2023-03-03T18:18:13",
        "upload_time_iso_8601": "2023-03-03T18:18:13.570924Z",
        "url": "https://files.pythonhosted.org/packages/f1/95/4824b9a09df756eec2fdb29f7a062e2496bb78fa0f757283fc32e1800ef8/SimpleSave-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1954824b9a09df756eec2fdb29f7a062e2496bb78fa0f757283fc32e1800ef8",
        "md5": "69f84f56c8ac73370c6b34ba76557608",
        "sha256": "3ec89bd8c4e14e16627c3f208cc2b5ba8ca2093602a8c496f098701542e62029"
      },
      "downloads": -1,
      "filename": "SimpleSave-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "69f84f56c8ac73370c6b34ba76557608",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.11.0",
      "size": 6571,
      "upload_time": "2023-03-03T18:18:13",
      "upload_time_iso_8601": "2023-03-03T18:18:13.570924Z",
      "url": "https://files.pythonhosted.org/packages/f1/95/4824b9a09df756eec2fdb29f7a062e2496bb78fa0f757283fc32e1800ef8/SimpleSave-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}