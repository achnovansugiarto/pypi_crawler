{
  "info": {
    "author": "Sławomir Górawski",
    "author_email": "slawomir@ulam.io",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Async Responses\n\n[![Documentation Status](https://readthedocs.org/projects/async-responses/badge/?version=latest)](http://async-responses.readthedocs.io/en/latest/?badge=latest) [![codecov](https://codecov.io/gh/ulamlabs/async-responses/branch/master/graph/badge.svg)](https://codecov.io/gh/ulamlabs/async-responses) ![Python package](https://github.com/ulamlabs/async-responses/workflows/Python%20package/badge.svg) ![Upload Python Package](https://github.com/ulamlabs/async-responses/workflows/Upload%20Python%20Package/badge.svg)\n\nAsync Responses is a library providing an easy way to mock aiohttp responses inspired by [aioresponses](https://github.com/pnuckowski/aioresponses).\n\n## Installation\n\nLibrary is available on PyPi, you can simply install it using `pip`.\n\n```shell\n$ pip install async-responses\n```\n\n## Usage\n### As an instance\n```python\nar = AsyncResponses()\nar.get(...)\n```\n\n### As a context manager\n```python\nwith AsyncResponses() as ar:\n    ar.get(...)\n```\n\n### With dict as handler\nPassing dict as `handler` argument to async-responses would result in it being\nreturned as a JSON payload.\n\n```python\nimport aiohttp\nfrom async_responses import AsyncResponses\n\n\nasync def test_response():\n    ar = AsyncResponses()\n    payload = {'status': 'ok'}\n    ar.get('http://mock.url', '/v1/status', handler=payload)\n    async with aiohttp.ClientSession() as session:\n        response = await session.get('http://mock.url/v1/status')\n        assert await response.json() == payload\n```\n\n### With exception as handler\nCalling Async Responses with an exception as `handler` argument would result in\nit being raised.\n\n```python\nimport aiohttp\nfrom async_responses import AsyncResponses\nimport pytest\n\n\nasync def test_response():\n    ar = AsyncResponses()\n    ar.get('http://mock.url', '/v1/status', handler=ZeroDivisionError)\n    with pytest.raises(ZeroDivisionError):\n        async with aiohttp.ClientSession() as session:\n            await session.get('http://mock.url/v1/status')\n```\n\n### With string as handler\n```python\nimport aiohttp\nfrom async_responses import AsyncResponses\n\nasync def test_response():\n    ar = AsyncResponses()\n    payload = 'ok'\n    ar.get('http://mock.url', '/v1/status', handler=payload)\n    async with aiohttp.ClientSession() as session:\n        response = await session.get('http://mock.url/v1/status')\n        assert await response.text() == payload\n```\n\n### With callable as handler\n```python\nimport aiohttp\nfrom async_responses import AsyncResponses\n\n\nasync def test_response():\n    def handler(data, **kwargs):\n        return {'status': 'ok'}\n\n    ar = AsyncResponses()\n    ar.get('http://mock.url', '/v1/status', handler=payload)\n    async with aiohttp.ClientSession() as session:\n        response = await session.get('http://mock.url/v1/status')\n        assert await response.json() == {'status': 'ok'}\n```\n\n### With a custom status code\n```python\nimport aiohttp\nfrom async_responses import AsyncResponses\n\n\nasync def test_response():\n    payload = {'status': 'not good'}\n    ar = AsyncResponses()\n    ar.get('http://mock.url', '/v1/status', handler=payload, status=500)\n    async with aiohttp.ClientSession() as session:\n        response = await session.get('http://mock.url/v1/status')\n        assert response.status == 500\n        assert await response.json() == payload\n```\n\n### With a custom response class\nasync-responses will make use of a response class passed as an argument to \nClientSession, so you can use things like custom JSON serializer.\n\n```python\nimport aiohttp\n\nasync def test_response():\n    class CustomResponse(aiohttp.ClientResponse):\n        async def json(self, *args, **kwargs):\n            return {'hello': 'world'}\n\n    ar = AsyncResponses()\n    ar.get('http://mock.url', '/v1/status', handler='')\n    async with aiohttp.ClientSession(response_class=CustomResponse) as session:\n        response = await session.get('http://mock.url/v1/status')\n        assert await response.json() == {'hello': 'world'}\n        assert isinstance(response, CustomResponse)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://ulam.io/",
    "keywords": "aiohttp,testing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "async-responses",
    "package_url": "https://pypi.org/project/async-responses/",
    "platform": "",
    "project_url": "https://pypi.org/project/async-responses/",
    "project_urls": {
      "Documentation": "https://async-responses.readthedocs.io/en/latest/",
      "Homepage": "https://ulam.io/",
      "Repository": "https://github.com/ulamlabs/async-responses"
    },
    "release_url": "https://pypi.org/project/async-responses/1.0.0/",
    "requires_dist": [
      "aiohttp (>=3.3.1)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "aiohttp testing library",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7074233,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2446ab394d59d743220a681b77d231b3daee055af4200bc795ff124531bf017f",
          "md5": "b329a6e4ec944f4640dba276f83558af",
          "sha256": "e6c9fe6f38b634c63eb79b6148a31e9a852f0ab77790d7549205aa89fa7f90a7"
        },
        "downloads": -1,
        "filename": "async_responses-1.0.0_2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b329a6e4ec944f4640dba276f83558af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 5322,
        "upload_time": "2020-04-22T06:25:33",
        "upload_time_iso_8601": "2020-04-22T06:25:33.031680Z",
        "url": "https://files.pythonhosted.org/packages/24/46/ab394d59d743220a681b77d231b3daee055af4200bc795ff124531bf017f/async_responses-1.0.0_2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f34d42303987b6c9a9e861d1d9b219289cc61e387613dd84af2f0228ab0a29a4",
          "md5": "95b50f5e5824e17cd709a75e3ab15171",
          "sha256": "7669ea9765aba429406f61ec196b7cf016448e1285dc3adb8431d7182ce92055"
        },
        "downloads": -1,
        "filename": "async-responses-1.0.0_2.tar.gz",
        "has_sig": false,
        "md5_digest": "95b50f5e5824e17cd709a75e3ab15171",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 5339,
        "upload_time": "2020-04-22T06:25:34",
        "upload_time_iso_8601": "2020-04-22T06:25:34.284574Z",
        "url": "https://files.pythonhosted.org/packages/f3/4d/42303987b6c9a9e861d1d9b219289cc61e387613dd84af2f0228ab0a29a4/async-responses-1.0.0_2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2446ab394d59d743220a681b77d231b3daee055af4200bc795ff124531bf017f",
        "md5": "b329a6e4ec944f4640dba276f83558af",
        "sha256": "e6c9fe6f38b634c63eb79b6148a31e9a852f0ab77790d7549205aa89fa7f90a7"
      },
      "downloads": -1,
      "filename": "async_responses-1.0.0_2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b329a6e4ec944f4640dba276f83558af",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 5322,
      "upload_time": "2020-04-22T06:25:33",
      "upload_time_iso_8601": "2020-04-22T06:25:33.031680Z",
      "url": "https://files.pythonhosted.org/packages/24/46/ab394d59d743220a681b77d231b3daee055af4200bc795ff124531bf017f/async_responses-1.0.0_2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f34d42303987b6c9a9e861d1d9b219289cc61e387613dd84af2f0228ab0a29a4",
        "md5": "95b50f5e5824e17cd709a75e3ab15171",
        "sha256": "7669ea9765aba429406f61ec196b7cf016448e1285dc3adb8431d7182ce92055"
      },
      "downloads": -1,
      "filename": "async-responses-1.0.0_2.tar.gz",
      "has_sig": false,
      "md5_digest": "95b50f5e5824e17cd709a75e3ab15171",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 5339,
      "upload_time": "2020-04-22T06:25:34",
      "upload_time_iso_8601": "2020-04-22T06:25:34.284574Z",
      "url": "https://files.pythonhosted.org/packages/f3/4d/42303987b6c9a9e861d1d9b219289cc61e387613dd84af2f0228ab0a29a4/async-responses-1.0.0_2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}