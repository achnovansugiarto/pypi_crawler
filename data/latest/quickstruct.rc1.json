{
  "info": {
    "author": "Binyamin Y Cohen",
    "author_email": "binyamincohen555@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# QuickStruct\n\nQuickStruct is a small library written in Python that allows you to\neasily create C structs (and a bit more dynamic stuff) in Python!\n\nIt's fairly easy to use\n```py\nfrom quickstruct import *\n\nclass Person(DataStruct):\n    name: String\n    age: i8\n```\n\nStructs can also be composed\n\n```py\nclass TeachingClass(DataStruct):\n    teacher: Person\n    # We use Array[T] to make it dynamic sized\n    students: Array[Person]\n```\n\nAnd structs can also inherit other structs\n(we even support multiple inheritance!)\n```py\nclass Employee(Person):\n    salary: i32\n```\n\n\nNow let's use the structs we defined\n```py\n# We have 2 options when initializing.\n# Either by setting each attribute individually\nperson = Person()\nperson.name = \"John Doe\"\nperson.age = 42\n\n# Or by passing them as keyword arguments\nperson = Person(name=\"John Doe\", age=42)\n```\n\n\nThe main use for C structs is to convert them from bytes and back\n```py\ndata = person.to_bytes()\n# Do something with the data\n\n# And it's also easy to deserialize\nperson = Person.from_bytes(data)\n```\n\n\nWhen deserializing a struct with multiple bases or if one of the fields was overriden, \nthe deserialization must be done through the exact type of the struct.\n\n\n# Fixed Size Structs\nA fixed size struct is any struct that has a known fixed size at build time that doesn't depend on the \ndata it holds. QuickStruct can verify a struct has a fixed size.\n```py\n# The StructFlags.FixedSize flag is used to verify the struct has a fixed size.\n# If the size could not be verified, a SizeError is raised.\nclass FixedSizeStruct(DataStruct, flags=StructFlags.FixedSize):\n    a: i32\n    b: i8\n    c: f32\n    d: char\n    e: String[10] # 10 character string\n    f: Person[3] # 3 'person' objects\n    # g: Array[i32] <- not a fixed size field. this will error\n```\n\n# Struct Properties\nIt is possible to query some information about a structure.\n```py\nfrom quickstruct import *\nclass Fixed(DataStruct):\n    s: String[10]\n    x: i32\n\nclass Dynamic(DataStruct):\n    s: String\n    x: i32\n\nprint(\"Fixed.size:\", Fixed.size) # 16 (padding automatically added)\nprint(\"Dynamic.size:\", Dynamic.size) # -1 (dynamic size)\n\nprint(\"Fixed.is_fixed_size:\", Fixed.is_fixed_size) # True\nprint(\"Dynamic.is_fixed_size:\", Dynamic.is_fixed_size) # False\n\nprint(\"Fixed.is_dynamic_size:\", Fixed.is_dynamic_size) # False\nprint(\"Dynamic.is_dynamic_size:\", Dynamic.is_dynamic_size) # True\n\nprint(\"Fixed.fields:\", Fixed.fields) # [s: String[10], __pad_0__: Padding(2), x: i32]\nprint(\"Dynamic.fields:\", Dynamic.fields) # [s: String, x: i32]\n\nprint(\"Fixed.alignment:\", Fixed.alignment) # 16.\nprint(\"Dynamic.alignment:\", Dynamic.alignment) # -1 (no alignment because dynamic struct can't be aligned).\n\nprint(\"Fixed.is_final:\", Fixed.is_final) # False\nprint(\"Dynamic.is_final:\", Dynamic.is_final) # False\n\nprint(\"Fixed.is_protected:\", Fixed.is_protected) # False\nprint(\"Dynamic.is_protected:\", Dynamic.is_protected) # False\n```\n\n# Alignment\nIt is also possible to add padding to the struct. There are 2 ways to do that:\n## Manual Alignment\nThis can be done with the `Padding` type.\n```py\nclass AlignedStruct(DataStruct):\n    c1: char\n    # This adds a single byte padding\n    _pad0: Padding\n    short: i16\n    # We can also add multi-byte padding\n    # Here we'll pad to get 8 byte alignment (missing 4 bytes)\n    _pad1: Padding[4]\n```\n\n## Automatic Alignment\nThis can done by passing some flags to the class definition. By default the struct is automatically aligned.\n```py\n# Aligned on 2 byte boundary\nclass AlignedStruct(DataStruct, flags = StructFlags.Align2Bytes):\n    c1: char\n    # Padding will be added here\n    short: i16\n```\n\n## Struct Flags\n| Flag              | Description                                                                                                                                                                                                      |\n|-------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Default           | The default to use if no flags are given. Same as `AllowOverride \\| AlignAuto`.                                                                                                                                  |\n| NoAlignment       | This is the most packed form of the struct. All fields are adjacent with no padding (unless manually added)                                                                                                      |\n| Packed            | Same as `NoAlignment` except that `NoAlignment` is a bit more optimized because no alignment is done.                                                                                                            |\n| Align1Byte        | Same as `Packed`                                                                                                                                                                                                 |\n| Align2Bytes       | Aligns the fields on 2 byte boundary.                                                                                                                                                                            |\n| Align4Bytes       | Aligns the fields on 4 byte boundary.                                                                                                                                                                            |\n| Align8Bytes       | Aligns the fields on 8 byte boundary.                                                                                                                                                                            |\n| AlignAuto         | Aligns the fields by their type.                                                                                                                                                                                 |\n| ReorderFields     | Specifies the fields should be reordered in order to make the struct a little more compressed.                                                                                                                   |\n| ForceDataOnly     | **Deprecated**. Specifies that the struct may only contain serializable fields. Data-only structs may only inherit data-only structs.                                                                            |\n| AllowOverride     | If set, fields defined in the struct may override fields that are defined in the base struct.                                                                                                                    |\n| TypeSafeOverride  | If set, when fields are overridden, they must have the same type (which would make it pretty useless to override). Implies `AllowOverride`. If fields have a different type, an `UnsafeOverrideError` is raised. |\n| ForceSafeOverride | **Deprectaed**. Same as `TypeSafeOverride`.                                                                                                                                                                      |\n| FixedSize         | If set, the struct must have a fixed size. If not, an exception `SizeError` is raised.                                                                                                                           |\n| ForceFixedSize    | **Deprecated**. Same as `FixedSize`.                                                                                                                                                                             |\n| AllowInline       | **Deprecated**. If set, the struct's fields will be inlined into another struct the contains this struct.                                                                                                        |\n| Protected         | If set, denies any overrides of that structure. If a struct is trying to override a field of it, an `UnoverridableFieldError` is raised.                                                                         |\n| LockedStructure   | **Deprecated**. Same as `Protected`.                                                                                                                                                                             |\n| Final             | Marks the structure so it won't be inheritable by any other class. If a struct is trying to inherit it, an `InheritanceError` is raised.                                                                         |\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xpodev/quickstruct",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quickstruct",
    "package_url": "https://pypi.org/project/quickstruct/",
    "platform": null,
    "project_url": "https://pypi.org/project/quickstruct/",
    "project_urls": {
      "Homepage": "https://github.com/xpodev/quickstruct",
      "Repository": "https://github.com/xpodev/quickstruct"
    },
    "release_url": "https://pypi.org/project/quickstruct/0.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.8,<4.0",
    "summary": "A small library to ease the creation, usage, serialization and deserialization of C structs.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16493167,
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aca89921540974f9b5c776144a3600272874916ff76c00512e27d3f3c6c7aa9e",
          "md5": "86910d0db0e5cf5be323c776db37b876",
          "sha256": "5b5f2081791ac353e091fbfb010c772aee8d3e86ca47ec3af1e0942f03781248"
        },
        "downloads": -1,
        "filename": "quickstruct-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86910d0db0e5cf5be323c776db37b876",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 12947,
        "upload_time": "2023-01-19T21:49:58",
        "upload_time_iso_8601": "2023-01-19T21:49:58.300769Z",
        "url": "https://files.pythonhosted.org/packages/ac/a8/9921540974f9b5c776144a3600272874916ff76c00512e27d3f3c6c7aa9e/quickstruct-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a05447b70eb7b4ad3ad60b65d3fc2501ade9571e2e227f0e59b10d001f1e08d",
          "md5": "32cd87895632ced73b3d665d7b0214b2",
          "sha256": "3ff4627c3b4275555fc1528e0188f797b9489934828383f2bb3209338d729352"
        },
        "downloads": -1,
        "filename": "quickstruct-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "32cd87895632ced73b3d665d7b0214b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 13189,
        "upload_time": "2023-01-19T21:49:59",
        "upload_time_iso_8601": "2023-01-19T21:49:59.854177Z",
        "url": "https://files.pythonhosted.org/packages/0a/05/447b70eb7b4ad3ad60b65d3fc2501ade9571e2e227f0e59b10d001f1e08d/quickstruct-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aca89921540974f9b5c776144a3600272874916ff76c00512e27d3f3c6c7aa9e",
        "md5": "86910d0db0e5cf5be323c776db37b876",
        "sha256": "5b5f2081791ac353e091fbfb010c772aee8d3e86ca47ec3af1e0942f03781248"
      },
      "downloads": -1,
      "filename": "quickstruct-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "86910d0db0e5cf5be323c776db37b876",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 12947,
      "upload_time": "2023-01-19T21:49:58",
      "upload_time_iso_8601": "2023-01-19T21:49:58.300769Z",
      "url": "https://files.pythonhosted.org/packages/ac/a8/9921540974f9b5c776144a3600272874916ff76c00512e27d3f3c6c7aa9e/quickstruct-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a05447b70eb7b4ad3ad60b65d3fc2501ade9571e2e227f0e59b10d001f1e08d",
        "md5": "32cd87895632ced73b3d665d7b0214b2",
        "sha256": "3ff4627c3b4275555fc1528e0188f797b9489934828383f2bb3209338d729352"
      },
      "downloads": -1,
      "filename": "quickstruct-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "32cd87895632ced73b3d665d7b0214b2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 13189,
      "upload_time": "2023-01-19T21:49:59",
      "upload_time_iso_8601": "2023-01-19T21:49:59.854177Z",
      "url": "https://files.pythonhosted.org/packages/0a/05/447b70eb7b4ad3ad60b65d3fc2501ade9571e2e227f0e59b10d001f1e08d/quickstruct-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}