{
  "info": {
    "author": "Databases & Information Systems Group, TU Ilmenau",
    "author_email": "stefan.hagedorn@tu-ilmenau.de",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Grizzly\n\n[![Testing](https://dbgit.prakinf.tu-ilmenau.de/code/grizzly/badges/master/pipeline.svg)](https://dbgit.prakinf.tu-ilmenau.de/code/grizzly/commits/master)\n[![coverage report](https://dbgit.prakinf.tu-ilmenau.de/code/grizzly/badges/master/coverage.svg)](https://dbgit.prakinf.tu-ilmenau.de/code/grizzly/commits/master)\n\nGrizzly is a transpiler from a Python-API to SQL to move computations from the client into a database system.\n\nGrizzly implements its own `DataFrame` structure that tracks operations, like projection, filter, joins, ...\nOnly when the result of the sequence of operations is needed, a SQL string is produced, resembling all those operations, and sent to a DBMS.\nThis way, you don't have to care about Out-of-Memory problems, un-optimized queries, and high CPU load.\n\n## Publications\nWe presented the idea as well as key concepts at several conferences:\n\n - Stefan Hagedorn: [**When sweet and cute isn't enough anymore: Solving scalability issues in Python Pandas with Grizzly.**](http://cidrdb.org/cidr2020/gongshow2020/gongshow/abstracts/cidr2020_abstract76.pdf), *CIDR 2020*\n - Stefan Hagedorn, Steffen Kläbe, Kai-Uwe Sattler: [**Putting Pandas in a Box**](http://cidrdb.org/cidr2021/papers/cidr2021_paper07.pdf), *CIDR 2021*\n   - [Presentation on Youtube](https://www.youtube.com/watch?v=8zUszpr0300)\n - Steffen Kläbe, Stefan Hagedorn: [**When Bears get Machine Support: Applying Machine Learning Models to Scalable DataFrames with Grizzly**](https://dl.gi.de/bitstream/handle/20.500.12116/35793/A2-4.pdf), *BTW 2021*\n - Stefan Hagedorn, Steffen Kläbe, Kai-Uwe Sattler: [**Conquering a Panda’s weaker self - Fighting laziness with laziness**](https://edbt2021proceedings.github.io/docs/p174.pdf), *EDBT 2021*, Demo Paper\n   - [Presentation on Youtube](https://www.youtube.com/embed/nBvUPlU_NOU)\n - Steffen Kläbe, Robert DeSantis, Stefan Hagedorn, Kai-Uwe Sattler: [**Accelerating Python UDFs in Vectorized Query Execution**](http://cidrdb.org/cidr2022/papers/p33-klaebe.pdf), *CIDR 2022*\n   - [Presentation on Youtube](https://www.youtube.com/watch?v=FLatSmSGkk8)\n\n\n## Installation\n\nGrizzly is available on PyPi: <https://pypi.org/project/grizzly-sql>\n\n```python\npip3 install --user grizzly-sql\n```\n\n## Dependencies\n\nGrizzly uses\n\n- Python 3\n- [SQLite3](https://docs.python.org/2/library/sqlite3.html) (currently for tests only)\n- [BeautifulTable](https://github.com/pri22296/beautifultable) for pretty output\n- [PyYAML](https://pypi.org/project/PyYAML/) for support of vendor-specific query templates\n- [antlr4-python3-runtime 4.9.3](https://pypi.org/project/antlr4-python3-runtime/4.9.3/) for compiling Python UDFs to prozedual sql\n\n## Getting started\n\n### Import\n\nAs with any Python module, just import it\n\n```Python\nimport grizzly\n```\n\n### Connection\n\nConnect to your database using an appropriate connection string. In order to load the shipped test database containing events from the [GDELT](https://www.gdeltproject.org/) project:\n\n```python\nimport sqlite3\ncon = sqlite3.connect(\"grizzly.db\")\n```\nGrizzly uses different classes for code generation and executing the produced query.\nCurrently, Grizzly includes a SQL code generator and execution wrapper for relational DBMS (more will follow).\nIn order to activate them, set:\n\n```python\nfrom grizzly.relationaldbexecutor import RelationalExecutor\nfrom grizzly.sqlgenerator import SQLGenerator\ngrizzly.use(RelationalExecutor(con, SQLGenerator(\"sqlite\")))\n```\n\nThe `RelationalExecutor` constructor has a parameter for the code generator to use. By default this is a `grizzly.sqlgenerator.SQLGenerator`, but can be set to some own implementation.\n\nThe parameter to `SQLGenerator` defines the SQL dialect of the underlying database system. We store vendor-specific code in a configuration file `grizzly.yml`. The dialect is only needed for `limit` operation which some SQL engines implement as `LIMIT` whereas others have `TOP`. Also UDFs (see below) require system-specific code.\n\nNow, reference the table(s) you want to work with:\n\n```python\ndf = grizzly.read_table(\"events\")\n```\n\nHere, `df` is just a reference, it contains no data from your table.\nTo show its complete contents, use the `show` method:\n\n```python\ndf.show(pretty=True)\n```\n\nThis will print the table's content on the screen. Alternatively, you can convert the dataframe into a string using `str(df)`.\n\nIn order to collect the result of a query/program into a local list, use `df.collect(includeHeader=True)`\n\n### Filter & Projection\n\nOperations are similar to Pandas:\n\n```python\ndf[df[\"globaleventid\"] == 470747760] # filter\ndf = df[[\"actor1name\",\"actor2name\"]] #projection\n```\n\nA column can also be referenced using the dot notation, e.g. `df.actor1name`.\n\n\n### Joins\n\nA `DataFrame` can be joined with another `DataFrame`:\n\n```python\ndf1 = grizzly.read_table(\"t1\")\ndf2 = grizzly.read_table(\"t2\")\n\njoined = df1.join(df2, on=[\"actor1name\", \"actor2name\"], how=\"inner\", comp='=')\n```\n\nIn the `on` parameter, you specify the join columns. The first one is for the left input (`df1`), the second one for the right input (`df2`).\nThe `how` parameter is used to select the join type: `inner`, `left outer`, etc. This value is directly placed into the generated query, and thus depends on\nthe dialect of the underlying DBMS. An additional `comp` parameter lets you choose the comparison operator.\n\nYou sometimes want to join on multiple columns with different comparisons. For this, in Grizzly you define the expression as if it was for filters:\n\n```python\ndf1 = grizzly.read_table(\"t1\")\ndf2 = grizzly.read_table(\"t2\")\n\nj = df1.join(df2, on = (df1.actor1name == df2.actor2name) | (df1[\"actor1countrycode\"] <= df2[\"actor2countrycode\"]), how=\"left outer\")\n```\n\nThis results in the following SQL code:\n\n```sql\nSELECT * \nFROM (SELECT * FROM t1 _t0) _t1  \n    left outer JOIN (SELECT * FROM t2 _t2) _t3 ON _t1.actor1name = _t3.actor2name or _t1.actor1countrycode <= _t3.actor2countrycode\n```\n\n### Grouping & Aggregation\n\nYou can also group the data on multiple columns and compute an aggregate over the groups using `agg`:\n\n```python\nfrom grizzly.aggregates import AggregateType\ndf = grizzly.read_table(\"events\")\ng = df.groupby([\"year\",\"actor1name\"])\n\na = g.agg(col=\"actor2name\", aggType=AggregateTyoe.COUNT)\n```\n\nHere, `a` represents a DataFrame with three columns: `year`, `monthyear` and the `count` value. In the above example, `a.generateQuery()` will give\n\n```sql\nSELECT _t0.year, _t0.actor1name, count(_t0.actor2name)\nFROM events _t0 \nGROUP BY _t0.year, _t0.actor1name\n```\n\nIf no aggregation function and projection is used, only the grouping columns are selected upon query generation.\n\nYou can apply aggregation functions on non-grouped `DataFrame`s of course. In this case the aggregates will be computed for the whole content. For example, `g.count()` immediately runs the following query and returns the scalar value\n```sql\nSELECT count(*) FROM (\n    SELECT _t1.year, _t1.actor1name\n    FROM (SELECT * FROM events _t0) _t1\n    GROUP BY _t1.year, _t1.actor1name\n    ) _t2\n```\n\nA `df.count()` (i.e. before the grouping) for the above piece of code will return the single scalar value with the number of records in `df` (22225).\nThe query executed for this is:\n\n```sql\nSELECT count(*)\nFROM events\n```\n\nGrizzly supports predefined aggregations, defined in the `AggregateType` enum: `MIN`, `MAX`, `MEAN`, `SUM`, `COUNT`. \nOther functions can be applied by passing the name of the functions as a string instead of the `ENUM` value.\n\n### User Defined Functions & Computed Columns\nGrizzly allows to apply almost any function defined in Python on your data. Currently, we support scala functions only.\n\n```Python\ndef myfunc(a: int) -> str:\n      return a+\"_grizzly\"\n    \ndf = grizzly.read_table(\"events\")  # load table\ndf = df[df.globaleventid == 467268277] # filter it\n```\n\nApply function with Python code on dbms (supported by PostgreSQL, Actian Vector and MonetDB)\n```Python\ndf[\"newid\"] = df[\"globaleventid\"].map(myfunc) # apply myfunc\n```\n\nApply translated function with procedural SQL code (Oracle and PostgreSQL supported)\n```Python\ndf[\"newid\"] = df[\"globaleventid\"].map(myfunc, lang='sql', fallback=True) # apply myfunc\n```\n\nThe `lang` parameter defines whether the function is executed with Python code or the code is translated with the integrated `udfcompiler` module to a procedural language. The `fallback` parameter allows to apply the function with Python code or locally to a `Pandas DataFrame` if compilation errors occur.\n\nIn the example above, the function `myfunc` is applied to all entries in the `globaleventid` column and the result is stored in a new column `newid`. \n\nThis way new columns can be added to the result. The value of a computed column can be any expression.\n\n```Python\ndf[\"newcol\"] = df.theyear + df.monthyear\n```\n\n### Apply Machine Learning Models\nUsing the UDF mechanism described above, we enable users to easily apply their pre-trained models to their data inside the DB. \n\nFor ONNX models, users only need to specify the path to the model file (must be availble for the database engine) as well as two conversion functions: \n  - first functions converts the tuple into the format expected by the model\n  - the second function converts the output of the model into a format the DB (and user) can handle. \n\nThe [ONNX model zoo](https://github.com/onnx/models) provides a rich set of models with the according conversion functions.\n\n```Python\ndef input_to_model(a: str):\n        ...\n\ndef model_to_output(a) -> str:\n        ...\n\ndf = grizzly.read_table('tab') # load table\n# apply model to every value in column 'col'\n# using provided input and output conversion functions\n# store model output in computed column 'classification'\ndf['classification'] = df['col'].apply_model(\"/path/to/model\", input_to_model, model_to_output)\n# group by e.g. predicted classes\ndf = df.groupby(['classification']).count()\ndf.show()\n```\n\n### SQL\n\nYou can inspect the produced query string (in this case SQL) with `generateQuery()`:\n\n```Python\nprint(df.generateQuery())\n```\n\n\n## Supported operations\n\n- filter/selection\n- projection\n- join\n- group by\n- aggregation functions: min, max, mean (avg), count, sum\n- user defined functions\n- apply TensorFlow, PyTorch, ONNX models\n\n## Limitations\n\n - Our DataFrame implementation is not yet fully compatibile with Pandas, but we are working on it.\n - Grizzly is under active development and things might change.\n - There are certainly some bugs. Probably with complex queries.\n\n\n# Vision\n\nGrizzly is a research project. We aim at bringing data-intensive operations back into the database system. Our plan is to extend Grizzly in the following ways - some of them are inspired by our other projects:\n\n  - Support for heterogeneous data sources:\n    - Combine data from different sources (relational DB, file, HDFS, NoSQL) in one program/query (i.e. Polystores, federated query processing)\n    - automatically import external data when neccessary\n  - Add spatial operations\n  - Stream processing operations\n  - Code generation\n    - Procude native code from the Python API\n \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dbis-ilm/grizzly",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "grizzly-sql",
    "package_url": "https://pypi.org/project/grizzly-sql/",
    "platform": null,
    "project_url": "https://pypi.org/project/grizzly-sql/",
    "project_urls": {
      "Homepage": "https://github.com/dbis-ilm/grizzly"
    },
    "release_url": "https://pypi.org/project/grizzly-sql/0.1.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Python-to-SQL transpiler to work with relational databases",
    "version": "0.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16766472,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d35af8ce078758d80c2a57275e60d5a5c69c9cde094a215db7d24d45ac66e275",
          "md5": "14abb13fa147a40c3b8d20c57a7348b1",
          "sha256": "9fedc9878c13e814e35e0b19efe4a82dc54eade75471b2e92c901baf2d22b27f"
        },
        "downloads": -1,
        "filename": "grizzly_sql-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14abb13fa147a40c3b8d20c57a7348b1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3767,
        "upload_time": "2019-09-24T20:25:24",
        "upload_time_iso_8601": "2019-09-24T20:25:24.725874Z",
        "url": "https://files.pythonhosted.org/packages/d3/5a/f8ce078758d80c2a57275e60d5a5c69c9cde094a215db7d24d45ac66e275/grizzly_sql-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87d63d9ccd959a53458331be6dc46c90a0127ce7d1d75eae4e106e60cb328979",
          "md5": "8ca63586147490d5264c3d6c157568cf",
          "sha256": "db5f28ee1dffe8f7d4166a3b5c091653cdfaa161ca0ed566902e449f9ef6a67b"
        },
        "downloads": -1,
        "filename": "grizzly-sql-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8ca63586147490d5264c3d6c157568cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3160,
        "upload_time": "2019-09-24T20:25:27",
        "upload_time_iso_8601": "2019-09-24T20:25:27.858779Z",
        "url": "https://files.pythonhosted.org/packages/87/d6/3d9ccd959a53458331be6dc46c90a0127ce7d1d75eae4e106e60cb328979/grizzly-sql-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05518fff326b356a4cfe0920b752ed03bad08c4c22bfc0285ad7d2e0ebc9ed92",
          "md5": "ad0293d2273650fb0b7cb2ac17ccdbc6",
          "sha256": "00c52b1e2dbcb1e1233a746e83bc9735b553a23e69c5a246a685af82ea0eb187"
        },
        "downloads": -1,
        "filename": "grizzly_sql-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad0293d2273650fb0b7cb2ac17ccdbc6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 8991,
        "upload_time": "2019-09-24T21:11:46",
        "upload_time_iso_8601": "2019-09-24T21:11:46.296093Z",
        "url": "https://files.pythonhosted.org/packages/05/51/8fff326b356a4cfe0920b752ed03bad08c4c22bfc0285ad7d2e0ebc9ed92/grizzly_sql-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f30a0a1ea2e50c99de843947cb7e69175999f8a0ab746b307115485944627601",
          "md5": "3c692722bdc50ea5bd1cb01eae53ba00",
          "sha256": "2e6b2b9ebfe67ed8615402c9ec42a44c73c69bf6a47123f1c9c805ef4c108b93"
        },
        "downloads": -1,
        "filename": "grizzly-sql-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3c692722bdc50ea5bd1cb01eae53ba00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7030,
        "upload_time": "2019-09-24T21:11:49",
        "upload_time_iso_8601": "2019-09-24T21:11:49.906773Z",
        "url": "https://files.pythonhosted.org/packages/f3/0a/0a1ea2e50c99de843947cb7e69175999f8a0ab746b307115485944627601/grizzly-sql-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "634f4c912be253d3db58160daff8e581aa4ad28f02daffac5b00734ded0a3406",
          "md5": "2b1fa935ffff1b1247528144351a9279",
          "sha256": "c3225fb722b8095a1c25456c5c304ac371dbfa6c7347f9fcc6f772bd86ed52b3"
        },
        "downloads": -1,
        "filename": "grizzly_sql-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b1fa935ffff1b1247528144351a9279",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 9060,
        "upload_time": "2019-11-27T08:28:12",
        "upload_time_iso_8601": "2019-11-27T08:28:12.715383Z",
        "url": "https://files.pythonhosted.org/packages/63/4f/4c912be253d3db58160daff8e581aa4ad28f02daffac5b00734ded0a3406/grizzly_sql-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fadc5bdbe5ef5e0839c6bb6114b47d2e08b6b40e0e671613d74bf6396f093b0a",
          "md5": "c4928acb93376cc60dc4baa895152558",
          "sha256": "3e133dd677cc888d9f306865edff9b2d48b419411ec21f49bf4feced916fe0dc"
        },
        "downloads": -1,
        "filename": "grizzly-sql-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c4928acb93376cc60dc4baa895152558",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7120,
        "upload_time": "2019-11-27T08:28:14",
        "upload_time_iso_8601": "2019-11-27T08:28:14.534624Z",
        "url": "https://files.pythonhosted.org/packages/fa/dc/5bdbe5ef5e0839c6bb6114b47d2e08b6b40e0e671613d74bf6396f093b0a/grizzly-sql-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "695cb2c981ba665dce0cc02774ec54c8b974e9f44f776eba9f74583ed5a6b685",
          "md5": "a93a109acbe89410684ff4bff0883953",
          "sha256": "0f7946f9580e918e906620ba9ce6e73a69d8f799296ce7d004c717a3972f80dc"
        },
        "downloads": -1,
        "filename": "grizzly_sql-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a93a109acbe89410684ff4bff0883953",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 11611,
        "upload_time": "2020-11-10T13:32:45",
        "upload_time_iso_8601": "2020-11-10T13:32:45.599749Z",
        "url": "https://files.pythonhosted.org/packages/69/5c/b2c981ba665dce0cc02774ec54c8b974e9f44f776eba9f74583ed5a6b685/grizzly_sql-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd3c56f1b74f1c10f6a53fded3bd31693d1771c071643814b3816f066a69af32",
          "md5": "a58e57b30f151ec7c2eb04eccad4ac88",
          "sha256": "3f4ae3d940b4a47e6a029002f10ef817df5ef7d6ad51eb05b710f31952428fb2"
        },
        "downloads": -1,
        "filename": "grizzly-sql-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a58e57b30f151ec7c2eb04eccad4ac88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12753,
        "upload_time": "2020-11-10T13:32:46",
        "upload_time_iso_8601": "2020-11-10T13:32:46.861328Z",
        "url": "https://files.pythonhosted.org/packages/bd/3c/56f1b74f1c10f6a53fded3bd31693d1771c071643814b3816f066a69af32/grizzly-sql-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73c7b41e736869c47a60935f5662f413921789b42feea37513d1e41c351eadcd",
          "md5": "8bb072e2e09e4fec93ebde6a84085653",
          "sha256": "cd237129fa03a68f9db693df6ae531251d245ad534e92f3534bc554afb6b52ff"
        },
        "downloads": -1,
        "filename": "grizzly_sql-0.1.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8bb072e2e09e4fec93ebde6a84085653",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 18957,
        "upload_time": "2020-11-11T15:27:56",
        "upload_time_iso_8601": "2020-11-11T15:27:56.078387Z",
        "url": "https://files.pythonhosted.org/packages/73/c7/b41e736869c47a60935f5662f413921789b42feea37513d1e41c351eadcd/grizzly_sql-0.1.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba86de8acde1660138b8cc5d1cc948fbb703ab0310756d371b685aebd0169c4d",
          "md5": "31439ab75d59e9df4dfeb56fb92cd26a",
          "sha256": "a97e15a47804b5b149ef6d261ec132b45716630279f1597faed6eb7d415c4cf7"
        },
        "downloads": -1,
        "filename": "grizzly-sql-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "31439ab75d59e9df4dfeb56fb92cd26a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19216,
        "upload_time": "2020-11-11T15:27:57",
        "upload_time_iso_8601": "2020-11-11T15:27:57.470802Z",
        "url": "https://files.pythonhosted.org/packages/ba/86/de8acde1660138b8cc5d1cc948fbb703ab0310756d371b685aebd0169c4d/grizzly-sql-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7ce222fc07711951de21b647448683ff90a4ea14b934c9760c526a42a5adb88",
          "md5": "b0e26ccfa71f248264f68de22a5305ac",
          "sha256": "bb6fde25fae3e6b61f2c3e3672b418aad1ad6d4b539a563123bdc8e05266ec03"
        },
        "downloads": -1,
        "filename": "grizzly_sql-0.1.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0e26ccfa71f248264f68de22a5305ac",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 55398,
        "upload_time": "2021-02-11T10:45:10",
        "upload_time_iso_8601": "2021-02-11T10:45:10.205509Z",
        "url": "https://files.pythonhosted.org/packages/e7/ce/222fc07711951de21b647448683ff90a4ea14b934c9760c526a42a5adb88/grizzly_sql-0.1.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2b619616f6660bccd8507bb4a17bbcbc33764f2f93d8e2369f3aec44aa50ad5",
          "md5": "ed91791d4e771a6177ba6f66d96cb056",
          "sha256": "47b090c0c37063d465183233c501cd7634c207e3125ab238794e1e814154e16d"
        },
        "downloads": -1,
        "filename": "grizzly-sql-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ed91791d4e771a6177ba6f66d96cb056",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30315,
        "upload_time": "2021-02-11T10:45:12",
        "upload_time_iso_8601": "2021-02-11T10:45:12.108576Z",
        "url": "https://files.pythonhosted.org/packages/c2/b6/19616f6660bccd8507bb4a17bbcbc33764f2f93d8e2369f3aec44aa50ad5/grizzly-sql-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27e516b4ed1f30f2fcace8b929aeecb55eed70a65a106dfb4279734232a335a3",
          "md5": "7f3bb948167f6a3100dce494ee8ba22f",
          "sha256": "cdb4a637e9727714be4c87c412961d18b25d43a54683e18e7bd06d194d809011"
        },
        "downloads": -1,
        "filename": "grizzly_sql-0.1.5.post1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f3bb948167f6a3100dce494ee8ba22f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 55518,
        "upload_time": "2021-02-12T09:02:46",
        "upload_time_iso_8601": "2021-02-12T09:02:46.381165Z",
        "url": "https://files.pythonhosted.org/packages/27/e5/16b4ed1f30f2fcace8b929aeecb55eed70a65a106dfb4279734232a335a3/grizzly_sql-0.1.5.post1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a71ec21211d7b4b10a48289f9aab2c3ce24b409b60ae86b1d1fc5262b124727",
          "md5": "55bc7447d54087a0cab87b67ec124232",
          "sha256": "c0898f767a806fa0d7382ce7af34abd4b4affbbdcffa863dee2ac5e45eb8a016"
        },
        "downloads": -1,
        "filename": "grizzly-sql-0.1.5.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "55bc7447d54087a0cab87b67ec124232",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27500,
        "upload_time": "2021-02-12T09:02:47",
        "upload_time_iso_8601": "2021-02-12T09:02:47.885036Z",
        "url": "https://files.pythonhosted.org/packages/6a/71/ec21211d7b4b10a48289f9aab2c3ce24b409b60ae86b1d1fc5262b124727/grizzly-sql-0.1.5.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3290866db6af9ed8160ea48b0aa4897af51220c7c61cb8f04e1a82fd8520b58",
          "md5": "d5643acb62ade9822451e4e0832558f7",
          "sha256": "6f7a4089e9f602e45cc600e94fbab9d403f08e2c9ce95f04121ed2c391fc0b7f"
        },
        "downloads": -1,
        "filename": "grizzly_sql-0.1.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5643acb62ade9822451e4e0832558f7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 37597,
        "upload_time": "2023-02-09T10:20:48",
        "upload_time_iso_8601": "2023-02-09T10:20:48.409317Z",
        "url": "https://files.pythonhosted.org/packages/c3/29/0866db6af9ed8160ea48b0aa4897af51220c7c61cb8f04e1a82fd8520b58/grizzly_sql-0.1.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6351cf352b4cad54d56c614858a180805523e64d69d16f559d4b03fdd62bb8db",
          "md5": "e7fb21fb5561e4556ef6e674b5b367b6",
          "sha256": "561fc027026dbcf1b6f5c2c5926e59be28660c9ca3dec859f20b2ef71772fbd3"
        },
        "downloads": -1,
        "filename": "grizzly-sql-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e7fb21fb5561e4556ef6e674b5b367b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 38124,
        "upload_time": "2023-02-09T10:20:50",
        "upload_time_iso_8601": "2023-02-09T10:20:50.879410Z",
        "url": "https://files.pythonhosted.org/packages/63/51/cf352b4cad54d56c614858a180805523e64d69d16f559d4b03fdd62bb8db/grizzly-sql-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3290866db6af9ed8160ea48b0aa4897af51220c7c61cb8f04e1a82fd8520b58",
        "md5": "d5643acb62ade9822451e4e0832558f7",
        "sha256": "6f7a4089e9f602e45cc600e94fbab9d403f08e2c9ce95f04121ed2c391fc0b7f"
      },
      "downloads": -1,
      "filename": "grizzly_sql-0.1.6-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d5643acb62ade9822451e4e0832558f7",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 37597,
      "upload_time": "2023-02-09T10:20:48",
      "upload_time_iso_8601": "2023-02-09T10:20:48.409317Z",
      "url": "https://files.pythonhosted.org/packages/c3/29/0866db6af9ed8160ea48b0aa4897af51220c7c61cb8f04e1a82fd8520b58/grizzly_sql-0.1.6-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6351cf352b4cad54d56c614858a180805523e64d69d16f559d4b03fdd62bb8db",
        "md5": "e7fb21fb5561e4556ef6e674b5b367b6",
        "sha256": "561fc027026dbcf1b6f5c2c5926e59be28660c9ca3dec859f20b2ef71772fbd3"
      },
      "downloads": -1,
      "filename": "grizzly-sql-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "e7fb21fb5561e4556ef6e674b5b367b6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 38124,
      "upload_time": "2023-02-09T10:20:50",
      "upload_time_iso_8601": "2023-02-09T10:20:50.879410Z",
      "url": "https://files.pythonhosted.org/packages/63/51/cf352b4cad54d56c614858a180805523e64d69d16f559d4b03fdd62bb8db/grizzly-sql-0.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}