{
  "info": {
    "author": "Dominik Niedenzu",
    "author_email": "blythooon@blackward.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Other Audience",
      "Intended Audience :: Science/Research",
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development"
    ],
    "description": "The 'Daaayonearth' library contains three classes: **Location, TimeZone and EnvConditions**.\nThese provide easy access to **geographical**, **meteorological** and **photovoltaic performance** data/services, namely: \n\n- the (latitude, longitude) tuple belonging to a specific address / location string (**geocoding**)\n- the **timezone** belonging to a specific location (at a given date)\n- the typical environmental conditions belonging to a day at a specific location & date, including:  \n\n- air temperature\n- air pressure\n- air humidity\n- wind speed\n- wind direction\n- sun height\n- solar irradiance\n- maximal photovoltaic performance \n\nFor each of said parameters there is a **function** as well as a belonging **plot** available,\nwhich provide the course of said parameter over the chosen day.\n\n\nExamples\n========\n\n\n```python\n\t#import from daaayonearth\n\timport daaayonearth\n\tfrom   daaayonearth import Location, TimeZone, EnvConditions\n\n\n\t#import from standard library\n\tfrom   datetime     import datetime as Datetime\n\tfrom   datetime     import date     as Date\n\n\n\t#set application name\n\tdaaayonearth.UserAgentNameS = \"DaaayExampleApp\"\n\n\n\t#get (latitude, longitude) tuple from address string\n\tdeu = Location(  \"Willy-Brandt-Str., 10557 Berlin\" )                             # ==> (52.5202262, 13.3704874)\n\n\n\t#get timezone (Python tzfile) belonging to location\n\ttzDeu = TimeZone( deu )                                                          # ==> tzfile('Europe/Berlin')\n\n\n\t#convert a date to another timezone\n\tdate = Datetime(2021, 11, 1, 20, 40, 0, tzinfo=tzDeu)                            # ==> 2021-11-01 20:40:00+01:00\n\tdate.astimezone( TimeZone(\"Pennsylvania Ave. NW, Washington, DC 20020, USA\") )   # ==> 2021-11-01 15:40:00-04:00\n\n\n\t#get the typical temperature at 12 o'clock \n\t#in the Willy Brandt Street, Berlin - on the 2th of November (year is ignored)\n\tenvConds = EnvConditions( Location(\"Willy-Brandt-Str., 10557 Berlin\"), Date(2021, 11, 2) )\n\tenvConds.functionsD[\"T(2m) [Â°C]\"](12 * 3600)                                     # ==> 5.03\n\n\n\t#get a matplotlib figure of the belonging course of temperature for said location/day\n\tenvConds.getFigureOf( \"T(2m) [Â°C]\" )                                             # ==> plot (course of temperature)\n\n\n\t#get the list of available parameters (for envConds.functionsD[...] and envConds.getFigureOf(...))\n\tlist( envConds.functionsD.keys() )   # ==> [ 'T(2m) [Â°C]', 'Humidity [%]', 'Irradiance [W/m^2]', \n\t\t\t\t\t\t\t #       'WindSpeed(10m) [m/s]', 'WindDirection(10m) [Â°]', \n\t\t\t\t\t\t\t #       'Pressure(0m) [Pa]', 'PvPower [W]', 'SunHeight [Â°]' ]\n\n      #it is also possible to setup the environment conditions 'manually' - using the 'auto' parameter\n      #as the Tmy-part is far less time consuming than the Pvp-part, this e.g. can be used to minimize \n      #waiting times\n      envConds = EnvConditions( \"Willy-Brandt-Str., 10557 Berlin\", \"11-02\", auto=False )\n\n      envConds.loadTmy()\n      envConds.processTmy()    #after this, one already has access to all functions/figures \n                               #but 'SunHeight [Â°]' and 'PvPower [W]' \n      \n      envConds.loadPvp()       #the Pvp-block needs about 5 times more time (e.g. some 20s!)\n      envConds.processPvp()\n\n      envConds.cleanUp()       #do not forget to clean up - also if you just use the Tmy-part\n```    \n\nIf you use this library you might ('under the hood') use data and/or services connected with\n'OpenStreetMap', 'Nominatim' and/or 'PVGIS' - please find more informations concerning this\ntopic in the LICENSE text!\n\nFurther infomations and links also can be found on my homepage\n[https://www.blackward.de](https://www.blackward.de)  \n\n\nHave Fun!\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.blackward.de",
    "keywords": "",
    "license": "Proprietary License",
    "maintainer": "Dominik Niedenzu",
    "maintainer_email": "",
    "name": "daaayonearth",
    "package_url": "https://pypi.org/project/daaayonearth/",
    "platform": "any platform which provides python",
    "project_url": "https://pypi.org/project/daaayonearth/",
    "project_urls": {
      "Homepage": "https://www.blackward.de"
    },
    "release_url": "https://pypi.org/project/daaayonearth/0.75/",
    "requires_dist": [
      "numpy",
      "scipy",
      "pandas (<=1.4.0)",
      "matplotlib",
      "geopy",
      "timezonefinder"
    ],
    "requires_python": ">= 2.2",
    "summary": "Easy access to geographic, meteorologic and photovoltaic performance data/services.",
    "version": "0.75",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12737569,
  "releases": {
    "0.70": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d3aade30f281906c32db56660e36e2c8fa1e3b5da0350087979d4a2578b0dd4",
          "md5": "8778b4e33a1abccf3080f1dafb5977c8",
          "sha256": "790d114dca88b79414a0e91f886a53c2d5633be4d4cb13a45cfa84e1fb1b05e0"
        },
        "downloads": -1,
        "filename": "daaayonearth-0.70-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8778b4e33a1abccf3080f1dafb5977c8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">= 2.2",
        "size": 15387,
        "upload_time": "2021-11-03T02:07:55",
        "upload_time_iso_8601": "2021-11-03T02:07:55.434839Z",
        "url": "https://files.pythonhosted.org/packages/2d/3a/ade30f281906c32db56660e36e2c8fa1e3b5da0350087979d4a2578b0dd4/daaayonearth-0.70-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.75": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cef27503c64ca513d7503df7749d428b7337e67982af27593a5b03b2a510351",
          "md5": "92e0e16616d9e9f695c02a5b657ccb05",
          "sha256": "aab00e60bf12fbe0858ec58a7e2bbea2c1f69bfb1bfc57fdc77c6cb66bd19d42"
        },
        "downloads": -1,
        "filename": "daaayonearth-0.75-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "92e0e16616d9e9f695c02a5b657ccb05",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">= 2.2",
        "size": 16795,
        "upload_time": "2022-01-30T15:26:28",
        "upload_time_iso_8601": "2022-01-30T15:26:28.910468Z",
        "url": "https://files.pythonhosted.org/packages/5c/ef/27503c64ca513d7503df7749d428b7337e67982af27593a5b03b2a510351/daaayonearth-0.75-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5cef27503c64ca513d7503df7749d428b7337e67982af27593a5b03b2a510351",
        "md5": "92e0e16616d9e9f695c02a5b657ccb05",
        "sha256": "aab00e60bf12fbe0858ec58a7e2bbea2c1f69bfb1bfc57fdc77c6cb66bd19d42"
      },
      "downloads": -1,
      "filename": "daaayonearth-0.75-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "92e0e16616d9e9f695c02a5b657ccb05",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">= 2.2",
      "size": 16795,
      "upload_time": "2022-01-30T15:26:28",
      "upload_time_iso_8601": "2022-01-30T15:26:28.910468Z",
      "url": "https://files.pythonhosted.org/packages/5c/ef/27503c64ca513d7503df7749d428b7337e67982af27593a5b03b2a510351/daaayonearth-0.75-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}