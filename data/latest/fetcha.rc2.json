{
  "info": {
    "author": "Feda Curic",
    "author_email": "feda.curic@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# fetcha\n\nTalk to SSB using Python.\n\n\n```python\nimport fetcha as fetcha\nimport logging\n# Turn off INFO-warnings\nlogging.getLogger().setLevel(logging.WARNING)\n```\n\n## Installation\n\n\n```python\n# >> pip install git+https://github.com/dafeda/fetcha.git --upgrade\n```\n\n\n```python\n# Instantiate object with specific table_id that refers to a SSB-table.\n# 10945 refers to Monetary aggregates M1, M2 and M3:\n# https://www.ssb.no/en/statbank/table/10945\nssb_10945 = fetcha.SSB(\"10945\", language=\"en\")\n```\n\n\n```python\n# Number of rows in table.\nssb_10945.nrows_tot()\n```\n\n\n\n\n    1422\n\n\n\n\n```python\n# Number of rows per period.\nssb_10945.nrows_period()\n```\n\n\n\n\n    9\n\n\n\n\n```python\n# Get all available periods\nperiods = ssb_10945.periods()\nperiods[-7:]\n```\n\n\n\n\n    ['2020M08', '2020M09', '2020M10', '2020M11', '2020M12', '2021M01', '2021M02']\n\n\n\n\n```python\n# Fetch latest period.\n# Returns a pandas dataframe with its index set with verify_integrity set to True.\n# If the dataframe is lacking an index, it means that the index columns do not make up a unique combination.\ndf_latest = ssb_10945.fetch()\ndf_latest.head()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>value</th>\n    </tr>\n    <tr>\n      <th>contents</th>\n      <th>month</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Monetary aggregate M1. Stocks (NOK million)</th>\n      <th>2021M02</th>\n      <td>2526071.0</td>\n    </tr>\n    <tr>\n      <th>Monetary aggregate M2. Stocks (NOK million)</th>\n      <th>2021M02</th>\n      <td>2695383.0</td>\n    </tr>\n    <tr>\n      <th>Monetary aggregate M3. Stocks (NOK million)</th>\n      <th>2021M02</th>\n      <td>2697783.0</td>\n    </tr>\n    <tr>\n      <th>Monetary aggregate M1. Transactions last 12 months (NOK million)</th>\n      <th>2021M02</th>\n      <td>359029.0</td>\n    </tr>\n    <tr>\n      <th>Monetary aggregate M2. Transactions last 12 months (NOK million)</th>\n      <th>2021M02</th>\n      <td>343687.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# Fetch list of periods\ndf_periods = ssb_10945.fetch([\"2019M12\", \"2020M01\", \"2020M02\"])\ndf_periods.head()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>value</th>\n    </tr>\n    <tr>\n      <th>contents</th>\n      <th>month</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Monetary aggregate M1. Stocks (NOK million)</th>\n      <th>2019M12</th>\n      <td>2159770.0</td>\n    </tr>\n    <tr>\n      <th>2020M01</th>\n      <td>2182450.0</td>\n    </tr>\n    <tr>\n      <th>2020M02</th>\n      <td>2175681.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">Monetary aggregate M2. Stocks (NOK million)</th>\n      <th>2019M12</th>\n      <td>2345545.0</td>\n    </tr>\n    <tr>\n      <th>2020M01</th>\n      <td>2364841.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# Fetch whole year of data\ndf_year = ssb_10945.fetch(\"2020\")\ndf_year.head()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>value</th>\n    </tr>\n    <tr>\n      <th>contents</th>\n      <th>month</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">Monetary aggregate M1. Stocks (NOK million)</th>\n      <th>2020M01</th>\n      <td>2182450.0</td>\n    </tr>\n    <tr>\n      <th>2020M02</th>\n      <td>2175681.0</td>\n    </tr>\n    <tr>\n      <th>2020M03</th>\n      <td>2300443.0</td>\n    </tr>\n    <tr>\n      <th>2020M04</th>\n      <td>2340381.0</td>\n    </tr>\n    <tr>\n      <th>2020M05</th>\n      <td>2374607.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# Fetch multiple years\ndf_years = ssb_10945.fetch([\"2019\", \"2020\"])\ndf_year.head()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>value</th>\n    </tr>\n    <tr>\n      <th>contents</th>\n      <th>month</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">Monetary aggregate M1. Stocks (NOK million)</th>\n      <th>2020M01</th>\n      <td>2182450.0</td>\n    </tr>\n    <tr>\n      <th>2020M02</th>\n      <td>2175681.0</td>\n    </tr>\n    <tr>\n      <th>2020M03</th>\n      <td>2300443.0</td>\n    </tr>\n    <tr>\n      <th>2020M04</th>\n      <td>2340381.0</td>\n    </tr>\n    <tr>\n      <th>2020M05</th>\n      <td>2374607.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# Reset index before pivoting\ndf_year = df_year.reset_index().pivot(index=\"month\", columns=\"contents\")\ndf_year.head()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"9\" halign=\"left\">value</th>\n    </tr>\n    <tr>\n      <th>contents</th>\n      <th>Monetary aggregate M1. 12-month growth (per cent</th>\n      <th>Monetary aggregate M1. Stocks (NOK million)</th>\n      <th>Monetary aggregate M1. Transactions last 12 months (NOK million)</th>\n      <th>Monetary aggregate M2. 12-month growth (per cent)</th>\n      <th>Monetary aggregate M2. Stocks (NOK million)</th>\n      <th>Monetary aggregate M2. Transactions last 12 months (NOK million)</th>\n      <th>Monetary aggregate M3. 12-month growth (per cent)</th>\n      <th>Monetary aggregate M3. Stocks (NOK million)</th>\n      <th>Monetary aggregate M3. Transactions last 12 months (NOK million)</th>\n    </tr>\n    <tr>\n      <th>month</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2020M01</th>\n      <td>3.1</td>\n      <td>2182450.0</td>\n      <td>66236.0</td>\n      <td>3.9</td>\n      <td>2364841.0</td>\n      <td>87622.0</td>\n      <td>3.7</td>\n      <td>2368402.0</td>\n      <td>84912.0</td>\n    </tr>\n    <tr>\n      <th>2020M02</th>\n      <td>3.2</td>\n      <td>2175681.0</td>\n      <td>66037.0</td>\n      <td>3.8</td>\n      <td>2360484.0</td>\n      <td>86360.0</td>\n      <td>3.7</td>\n      <td>2364033.0</td>\n      <td>83138.0</td>\n    </tr>\n    <tr>\n      <th>2020M03</th>\n      <td>7.0</td>\n      <td>2300443.0</td>\n      <td>148469.0</td>\n      <td>7.5</td>\n      <td>2489403.0</td>\n      <td>170692.0</td>\n      <td>7.3</td>\n      <td>2492801.0</td>\n      <td>167960.0</td>\n    </tr>\n    <tr>\n      <th>2020M04</th>\n      <td>9.8</td>\n      <td>2340381.0</td>\n      <td>205486.0</td>\n      <td>9.5</td>\n      <td>2522315.0</td>\n      <td>216155.0</td>\n      <td>9.4</td>\n      <td>2525731.0</td>\n      <td>214558.0</td>\n    </tr>\n    <tr>\n      <th>2020M05</th>\n      <td>10.9</td>\n      <td>2374607.0</td>\n      <td>232311.0</td>\n      <td>10.2</td>\n      <td>2552508.0</td>\n      <td>234581.0</td>\n      <td>10.1</td>\n      <td>2555817.0</td>\n      <td>232003.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\nssb_10948 = fetcha.SSB(\"10948\", language=\"en\")\ndf_10948 = ssb_10948.fetch(\"2020\")\n```\n\n\n```python\ndf_10948.head()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th></th>\n      <th>value</th>\n    </tr>\n    <tr>\n      <th>holding sector</th>\n      <th>contents</th>\n      <th>month</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">Money holding sector</th>\n      <th rowspan=\"5\" valign=\"top\">Monetary aggregate M3. Stocks, seasonally adjusted (NOK million)</th>\n      <th>2020M01</th>\n      <td>2374459.0</td>\n    </tr>\n    <tr>\n      <th>2020M02</th>\n      <td>2387955.0</td>\n    </tr>\n    <tr>\n      <th>2020M03</th>\n      <td>2499994.0</td>\n    </tr>\n    <tr>\n      <th>2020M04</th>\n      <td>2543868.0</td>\n    </tr>\n    <tr>\n      <th>2020M05</th>\n      <td>2580435.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# Fetch and join\n# Get another table so we have something to join with.\nssb_10948 = fetcha.SSB(\"10948\", language=\"en\")\ndf_10948 = ssb_10948.fetch(\"2020\")\ndf_10948 = df_10948.reset_index().pivot_table(\n    index=\"month\", columns=\"contents\", aggfunc=\"mean\"\n)\n\ndf_10948.join(df_year).head()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"12\" halign=\"left\">value</th>\n    </tr>\n    <tr>\n      <th>contents</th>\n      <th>1-month growth, seasonally adjusted (per cent)</th>\n      <th>Monetary aggregate M3. Stocks, seasonally adjusted (NOK million)</th>\n      <th>Transactions last month, seasonally adjusted (NOK million)</th>\n      <th>Monetary aggregate M1. 12-month growth (per cent</th>\n      <th>Monetary aggregate M1. Stocks (NOK million)</th>\n      <th>Monetary aggregate M1. Transactions last 12 months (NOK million)</th>\n      <th>Monetary aggregate M2. 12-month growth (per cent)</th>\n      <th>Monetary aggregate M2. Stocks (NOK million)</th>\n      <th>Monetary aggregate M2. Transactions last 12 months (NOK million)</th>\n      <th>Monetary aggregate M3. 12-month growth (per cent)</th>\n      <th>Monetary aggregate M3. Stocks (NOK million)</th>\n      <th>Monetary aggregate M3. Transactions last 12 months (NOK million)</th>\n    </tr>\n    <tr>\n      <th>month</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2020M01</th>\n      <td>-10.02</td>\n      <td>949783.6</td>\n      <td>-1329.8</td>\n      <td>3.1</td>\n      <td>2182450.0</td>\n      <td>66236.0</td>\n      <td>3.9</td>\n      <td>2364841.0</td>\n      <td>87622.0</td>\n      <td>3.7</td>\n      <td>2368402.0</td>\n      <td>84912.0</td>\n    </tr>\n    <tr>\n      <th>2020M02</th>\n      <td>3.32</td>\n      <td>955182.0</td>\n      <td>3182.0</td>\n      <td>3.2</td>\n      <td>2175681.0</td>\n      <td>66037.0</td>\n      <td>3.8</td>\n      <td>2360484.0</td>\n      <td>86360.0</td>\n      <td>3.7</td>\n      <td>2364033.0</td>\n      <td>83138.0</td>\n    </tr>\n    <tr>\n      <th>2020M03</th>\n      <td>541.24</td>\n      <td>999997.4</td>\n      <td>38556.4</td>\n      <td>7.0</td>\n      <td>2300443.0</td>\n      <td>148469.0</td>\n      <td>7.5</td>\n      <td>2489403.0</td>\n      <td>170692.0</td>\n      <td>7.3</td>\n      <td>2492801.0</td>\n      <td>167960.0</td>\n    </tr>\n    <tr>\n      <th>2020M04</th>\n      <td>19.36</td>\n      <td>1017547.0</td>\n      <td>18928.0</td>\n      <td>9.8</td>\n      <td>2340381.0</td>\n      <td>205486.0</td>\n      <td>9.5</td>\n      <td>2522315.0</td>\n      <td>216155.0</td>\n      <td>9.4</td>\n      <td>2525731.0</td>\n      <td>214558.0</td>\n    </tr>\n    <tr>\n      <th>2020M05</th>\n      <td>14.82</td>\n      <td>1032174.2</td>\n      <td>17398.2</td>\n      <td>10.9</td>\n      <td>2374607.0</td>\n      <td>232311.0</td>\n      <td>10.2</td>\n      <td>2552508.0</td>\n      <td>234581.0</td>\n      <td>10.1</td>\n      <td>2555817.0</td>\n      <td>232003.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n# SSB has a limit of 300k rows per transaction.\n# Some tables have more than that in one period.\nssb_10261 = fetcha.SSB(\"10261\", language=\"en\")\n```\n\n\n```python\n# Gives warning and returns None.\ndf_10261 = ssb_10261.fetch()\n```\n\n    WARNING:fetcha.ssb:Query exceeds SSB limit of 300k rows per transaction. Current query tries to fetch 607104 rows. User a filter\n\n\n\n```python\n# Can pass filter to fetch(), but first we need to choose what we want.\n# Use variable levels to see which options you have.\nssb_10261.levels\n```\n\n\n\n\n    0    {'code': 'Region', 'text': 'region', 'values':...\n    1    {'code': 'Kjonn', 'text': 'sex', 'values': ['0...\n    2    {'code': 'Alder', 'text': 'age', 'values': ['9...\n    3    {'code': 'Diagnose3', 'text': 'diagnosis: Chap...\n    4    {'code': 'ContentsCode', 'text': 'contents', '...\n    5    {'code': 'Tid', 'text': 'year', 'values': ['20...\n    Name: variables, dtype: object\n\n\n\n\n```python\n# We limit the region to \"The whole country\".\nssb_10261.levels.iloc[0]\n```\n\n\n\n\n    {'code': 'Region',\n     'text': 'region',\n     'values': ['0',\n      '30',\n      '01',\n      '02',\n      '03',\n      '34',\n      '04',\n      '05',\n      '06',\n      '38',\n      '07',\n      '08',\n      '42',\n      '09',\n      '10',\n      '11',\n      '46',\n      '12',\n      '14',\n      '15',\n      '50',\n      '16',\n      '17',\n      '18',\n      '54',\n      '19',\n      '20',\n      'F00',\n      '9',\n      'H03',\n      'H04',\n      'H05',\n      'H12',\n      'Uoppgitt'],\n     'valueTexts': ['The whole country',\n      'Viken',\n      'Østfold (-2019)',\n      'Akershus (-2019)',\n      'Oslo',\n      'Innlandet',\n      'Hedmark (-2019)',\n      'Oppland (-2019)',\n      'Buskerud (-2019)',\n      'Vestfold og Telemark',\n      'Vestfold (-2019)',\n      'Telemark (-2019)',\n      'Agder',\n      'Aust-Agder (-2019)',\n      'Vest-Agder (-2019)',\n      'Rogaland',\n      'Vestland',\n      'Hordaland (-2019)',\n      'Sogn og Fjordane (-2019)',\n      'Møre og Romsdal',\n      'Trøndelag - Trööndelage',\n      'Sør-Trøndelag (-2017)',\n      'Nord-Trøndelag (-2017)',\n      'Nordland',\n      'Troms og Finnmark - Romsa ja Finnmárku',\n      'Troms - Romsa (-2019)',\n      'Finnmark - Finnmárku (-2019)',\n      'Total',\n      'Uoppgitt',\n      'Helseregion Vest',\n      'Helseregion Midt-Norge',\n      'Helseregion Nord',\n      'Helseregion Sør-Øst',\n      'Unknown'],\n     'elimination': True}\n\n\n\n\n```python\nfltr = [{\"code\": \"Region\", \"values\": [\"0\"]}]\n```\n\n\n```python\ndf_10261 = ssb_10261.fetch(fltr=fltr)\n```\n\n\n```python\ndf_10261.shape\n```\n\n\n\n\n    (17856, 1)\n\n\n\n\n```python\ndf_10261.sample(10)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th>value</th>\n    </tr>\n    <tr>\n      <th>region</th>\n      <th>sex</th>\n      <th>age</th>\n      <th>diagnosis: Chapter in ICD-10</th>\n      <th>contents</th>\n      <th>year</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"10\" valign=\"top\">The whole country</th>\n      <th>Males</th>\n      <th>40-59 years</th>\n      <th>Influenza and pneumonia</th>\n      <th>Number of day cases</th>\n      <th>2019</th>\n      <td>76.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">Females</th>\n      <th>20-39 years</th>\n      <th>Injuries of upper extremities</th>\n      <th>Patients with day cases</th>\n      <th>2019</th>\n      <td>613.0</td>\n    </tr>\n    <tr>\n      <th>60-69 years</th>\n      <th>CONGENITAL MALFORMATIONS</th>\n      <th>Number of bed-days</th>\n      <th>2019</th>\n      <td>290.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"2\" valign=\"top\">Both sexes</th>\n      <th rowspan=\"2\" valign=\"top\">20-39 years</th>\n      <th>Cardiac dysrhythmias</th>\n      <th>Patients with day cases</th>\n      <th>2019</th>\n      <td>276.0</td>\n    </tr>\n    <tr>\n      <th>PREGNANCY, CHILDBIRTH AND THE PUERPERIUM</th>\n      <th>Number of out-patient consultations</th>\n      <th>2019</th>\n      <td>109637.0</td>\n    </tr>\n    <tr>\n      <th>Females</th>\n      <th>60-69 years</th>\n      <th>Glaucoma</th>\n      <th>Number of day cases</th>\n      <th>2019</th>\n      <td>253.0</td>\n    </tr>\n    <tr>\n      <th rowspan=\"4\" valign=\"top\">Both sexes</th>\n      <th>Years, total</th>\n      <th>Other maternal disorders predominantly related to pregnancy</th>\n      <th>In-patients</th>\n      <th>2019</th>\n      <td>1478.0</td>\n    </tr>\n    <tr>\n      <th>60-69 years</th>\n      <th>Diabetes mellitus</th>\n      <th>In-patients</th>\n      <th>2019</th>\n      <td>488.0</td>\n    </tr>\n    <tr>\n      <th>70-79 years</th>\n      <th>Other diseases of oesophagus, stomach and duodenum</th>\n      <th>Number of bed-days</th>\n      <th>2019</th>\n      <td>3265.0</td>\n    </tr>\n    <tr>\n      <th>0-9 years</th>\n      <th>Malignant neoplasms of female genital organs</th>\n      <th>Out-patients</th>\n      <th>2019</th>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dafeda/fetcha",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fetcha",
    "package_url": "https://pypi.org/project/fetcha/",
    "platform": "",
    "project_url": "https://pypi.org/project/fetcha/",
    "project_urls": {
      "Homepage": "https://github.com/dafeda/fetcha"
    },
    "release_url": "https://pypi.org/project/fetcha/0.0.2/",
    "requires_dist": [
      "pyjstat"
    ],
    "requires_python": "",
    "summary": "Talk to SSB using Python.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9949421,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31ebb9549dc388641b917ca8adb51134d56b78d89d6035aea00c02cb4a75c7dc",
          "md5": "7412cbbff70ff61f1a12ccb6e34a4de0",
          "sha256": "834cc9b41c2a3b713ee31eb4396ca8ed13a949905f1b25c619d98ca24d9f0e96"
        },
        "downloads": -1,
        "filename": "fetcha-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7412cbbff70ff61f1a12ccb6e34a4de0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16095,
        "upload_time": "2021-02-19T08:24:31",
        "upload_time_iso_8601": "2021-02-19T08:24:31.777908Z",
        "url": "https://files.pythonhosted.org/packages/31/eb/b9549dc388641b917ca8adb51134d56b78d89d6035aea00c02cb4a75c7dc/fetcha-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ef663ef8f8aa8b71821267d85333bdc12ade283cd542a9fc147b60d296eed38",
          "md5": "b598ca01d1e3e9b262ba2f47de432d5e",
          "sha256": "d3609a3602ce7fd75e9906b8749c6361565c874aa53db12ee8198b5f389ea6da"
        },
        "downloads": -1,
        "filename": "fetcha-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b598ca01d1e3e9b262ba2f47de432d5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6075,
        "upload_time": "2021-02-19T08:24:33",
        "upload_time_iso_8601": "2021-02-19T08:24:33.017175Z",
        "url": "https://files.pythonhosted.org/packages/0e/f6/63ef8f8aa8b71821267d85333bdc12ade283cd542a9fc147b60d296eed38/fetcha-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "794afff7fbccb3970791356991554b84e102b4d3460851e504de4b99359712a1",
          "md5": "026e241b7a5dcd8079d75a59bd865457",
          "sha256": "d529277a54bc62d3aa3ce284f0d5f7ab6370bf0c87545a50ba6d89b0b41a33da"
        },
        "downloads": -1,
        "filename": "fetcha-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "026e241b7a5dcd8079d75a59bd865457",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19156,
        "upload_time": "2021-04-01T17:52:01",
        "upload_time_iso_8601": "2021-04-01T17:52:01.340317Z",
        "url": "https://files.pythonhosted.org/packages/79/4a/fff7fbccb3970791356991554b84e102b4d3460851e504de4b99359712a1/fetcha-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d57ce3b17be8b00ff2107bdf81bffff7c53783788a1406c0b26e1aa07ba8244",
          "md5": "36a9cbcb07e903679a0acd9180f18836",
          "sha256": "9d3e6621a486eba8621786a41e6cbdfa0564320fce5efcb35fe7f74c5bd6c896"
        },
        "downloads": -1,
        "filename": "fetcha-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "36a9cbcb07e903679a0acd9180f18836",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10372,
        "upload_time": "2021-04-01T17:52:02",
        "upload_time_iso_8601": "2021-04-01T17:52:02.847955Z",
        "url": "https://files.pythonhosted.org/packages/7d/57/ce3b17be8b00ff2107bdf81bffff7c53783788a1406c0b26e1aa07ba8244/fetcha-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "794afff7fbccb3970791356991554b84e102b4d3460851e504de4b99359712a1",
        "md5": "026e241b7a5dcd8079d75a59bd865457",
        "sha256": "d529277a54bc62d3aa3ce284f0d5f7ab6370bf0c87545a50ba6d89b0b41a33da"
      },
      "downloads": -1,
      "filename": "fetcha-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "026e241b7a5dcd8079d75a59bd865457",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 19156,
      "upload_time": "2021-04-01T17:52:01",
      "upload_time_iso_8601": "2021-04-01T17:52:01.340317Z",
      "url": "https://files.pythonhosted.org/packages/79/4a/fff7fbccb3970791356991554b84e102b4d3460851e504de4b99359712a1/fetcha-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d57ce3b17be8b00ff2107bdf81bffff7c53783788a1406c0b26e1aa07ba8244",
        "md5": "36a9cbcb07e903679a0acd9180f18836",
        "sha256": "9d3e6621a486eba8621786a41e6cbdfa0564320fce5efcb35fe7f74c5bd6c896"
      },
      "downloads": -1,
      "filename": "fetcha-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "36a9cbcb07e903679a0acd9180f18836",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10372,
      "upload_time": "2021-04-01T17:52:02",
      "upload_time_iso_8601": "2021-04-01T17:52:02.847955Z",
      "url": "https://files.pythonhosted.org/packages/7d/57/ce3b17be8b00ff2107bdf81bffff7c53783788a1406c0b26e1aa07ba8244/fetcha-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}