{
  "info": {
    "author": "John Omotani",
    "author_email": "john.omotani@cantab.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "`OptionsFactory`\n================\n\nhttps://github.com/johnomotani/optionsfactory\n\n`OptionsFactory` allows you to define a set of options, which can have (if you like):\ndefault values (which may be expressions depending on other options); documentation for\neach option; an allowed type or list of types; a check that the value option is on an\nallowed list; checks that the value of an option satisfies some tests.\n\n\nInstallation\n------------\n\n`OptionsFactory` can be installed using `pip`\n```\npip install --user optionsfactory\n```\nor `conda`\n```\nconda install -c conda-forge optionsfactory\n```\n\n\nUsage\n-----\n\nOnce the options are defined in an `OptionsFactory`, you create a particular instance of\nthe options by passing some user settings (a dict or YAML file). The `OptionsFactory`\nuses the values passed, sets the remaining options from the default values or\nexpressions and returns an `Options` object. Options are immutable so that you do not\nhave to worry about the options being accidentally changed during execution - however,\nsee [`MutableOptionsFactory`](#mutableoptionsfactory) if you want to be able to update the\noptions dynamically.\n\nFor example, some simple options might be implemented like this:\n```python\nfrom optionsfactory import OptionsFactory\n\n\nclass A:\n\n    # The keyword arguments define the options and give the default values\n    options_factory = OptionsFactory(a=1, b=2)\n\n    def __init__(self, user_options = None):\n        self.options = self.options_factory.create(user_options)\n\n        # options can be accessed like a dict\n        myvalue = 2 * options[\"a\"]\n\n        #... or as attributes\n        mynewvalue = 3 + options.a\n```\n\nIt might also be useful for some classes to allow the options to be set from keyword\narguments, for example\n```python\nfrom optionsfactory import OptionsFactory\n\n\nclass B:\n\n    # The keyword arguments define the options and give the default values\n    options_factory = OptionsFactory(a=1, b=2)\n\n    def __init__(self, **kwargs):\n        self.options = self.options_factory.create(kwargs)\n```\nThe `create()` method will not alter the argument passed to it.\n\nThe options will then combine explicitly set values and defaults:\n```python\n>>> b1 = B() # uses default values\n>>> b1.options.a\n1\n>>> b1.options.b\n2\n>>> b2 = B(b=4) # override one of the defaults\n>>> b2.options.a\n1\n>>> b2.options.b\n4\n```\n\nMore flexibility is available by using expressions to set the default values.\n```python\nfrom optionsfactory import OptionsFactory\n\n\nclass C:\n\n    # The keyword arguments define the options and give the default values\n    options_factory = OptionsFactory(a=lambda options: options.b + 5, b=2)\n\n    def __init__(self, **kwargs):\n        self.options = self.options_factory.create(kwargs)\n```\ncould be used like:\n```python\n>>> c1 = C() # only default values\n>>> c1.options.a\n7\n>>> c1.options.b\n2\n>>> c2 = C(a=1, b=3) # override both options, expression not used\n>>> c2.options.a\n1\n>>> c2.options.b\n>>> 3\n>>> c3 = C(b=4) # User-set value of b evaluated in default expression for a\n>>> c3.options.a\n9\n>>> c3.options.b\n4\n```\nCircular dependencies in expressions will be detected and raise a ValueError.\n\n\n`WithMeta`\n----------\n\n`WithMeta` objects are used to store the defaults within `OptionsFactory`, and can be\nused to define options with extra information, e.g.\n```python\nfrom optionsfactory import OptionsFactory, WithMeta\nfrom optionsfactory.checks import is_positive, is_None\n\n\nclass D:\n    options_factory = OptionsFactory(\n        a=WithMeta(1, doc=\"option a\"),\n        b=WithMeta(2, value_type=int),\n        c=WithMeta(3, allowed=[1, 2, 3]),\n        d=WithMeta(4, check_all=is_positive),\n        e=WithMeta(5, check_any=lambda x: x < 6),\n        f=WithMeta(6, doc=\"option f\", value_type=[int, float], allowed=[6, 7, 8, 9.5]),\n        g=WithMeta(\n            7,\n            doc=\"option g\",\n            value_type=[int, None],\n            check_all=[is_positive, lambda x: x < 10],\n            check_any=[lambda x: x < 2, lambda x: x > 6],\n        ),\n    )\n\n    def __init__(self, **kwargs):\n        self.options = self.options_factory.create(kwargs)\n```\nThe first argument to `WithMeta` gives the default value for the option, and the\nremaining keyword arguments are all optional. Using `WithMeta` the values behave just as\nthe simple default values described above:\n```python\n>>> d = D(b=12)\n>>> d.options.a\n1\n>>> d.options[\"b\"]\n12\n```\n\n### documentation\n\nDocumentation defined in the factory initialisation can be accessed from either the\n`OptionsFactory` or the `Options` instance via a `doc` property, that gives a `dict`\nwith the documentation for each option:\n```python\n>>> D.options_factory.doc[\"a\"]  # Get doc from the factory\n'option a'\n>>> D.options_factory.doc[\"b\"]  # No doc was defined for this option\n>>> d = D()\n>>> d.options.doc[\"f\"]  # Get doc from the Options instance\n'option f'\n```\n\n\n### `value_type`\n\nThe `value_type` argument can be used to give a type or sequence of types that\nthe option is allowed to have. Trying to set an option with a non-allowed type\nraises a\n`ValueError`:\n```python\n>>> d2 = D(d=-2)\nValueError: The value -2 of key=d is not compatible with check_all\n>>> d3 = D(f=8)\n>>> d3.options.f\n8\n>>> d4 = D(f=9.5)\n>>> d4.options.f\n9.5\n>>> d5 = D(f=\"a string\")\nTypeError: a string is not of type (<class 'int'>, <class 'float'>) for key=f\n```\n\n\n### checking values\n\nThere are two ways of checking the values that are set for options.\n\n#### `allowed`\n\nThe `allowed` keyword sets a list of allowed options. A `ValueError` is raised if the\nvalue being set is not in the list. `allowed` cannot be set if either of `check_all` or\n`check_any` is. Example:\n```python\n>>> d6 = D(c=2)\nValueError: 2 is not in the allowed values (1, 2, 3) for key=c\n>>> d7 = D(c=4)\nValueError: 4 is not in the allowed values (1, 2, 3) for key=c\n```\n\n#### `check_all` and `check_any`\n\nThese arguments can be passed a list of expressions. The expressions passed to\n`check_all` must all evaluate to `True`, or an `ValueError` is raised. At least one of\nthe expressions passed to `check_any` is raised. The choice of `check_any` or\n`check_all` is a matter of convenience and clarity - the effect of either could be\nachieved with a single, sufficiently complicated, expression. They can both be set at\nthe same time, although this probably not often useful. Neither can be set if the\n`allowed` keyword is. Example:\n```python\n>>> d8 = D(d=14)\n>>> d8.options.d\n14\n>>> d9 = D(d=-1)\nValueError: The value -1 of key=d is not compatible with check_all\n>>> d10 = D(e=5)\n>>> d10.options.e\n5\n>>> d11 = D(e=6)\nValueError: The value 6 of key=e is not compatible with check_any\n>>> d12 = D(g=1)\n>>> d12.options.g\n1\n>>> d13 = D(g=-1)\nValueError: The value -1 of key=g is not compatible with check_all\n>>> d14 = D(g=5)\nValueError: The value 5 of key=g is not compatible with check_any\n>>> d15 = D(g=9)\n>>> d15.options.g\n9\n>>> d16 = D(g=10)\nValueError: The value 10 of key=g is not compatible with check_all\n```\n\nDefault expressions\n-------------------\n\nMuch more flexibility is offered for default values by using expressions. These are\nsingle-argument functions (lambda expressions are often useful), which return the\ndesired default value when passed an `Options` object, from which the values of other\noptions (which may or may not be expressions themselves) can be accessed. See the `class\nC` example above. When [nested options](#nested_options) are used, expressions can also\naccess values in subsections or parent sections of the options tree:\n```python\nfrom optionsfactory import OptionsFactory\n\n\nclass E:\n    options_factory = OptionsFactory(\n        a=1,\n        b=lambda options: options.a + options.subsection1.c + options.subsection2.e,\n        subsection1=OptionsFactory(\n            c=lambda options: options.parent.a + options.parent.subsection2.e,\n            subsubsection=OptionsFactory(d=2),\n        ),\n        subsection2=OptionsFactory(\n            e=lambda options: options.parent.subsection1.subsubsection.d,\n        ),\n    )\n\n    def __init__(self, **kwargs):\n        self.options = self.options_factory.create(kwargs)\n```\nIf we initialise `E` with just the defaults\n```python\n>>> e = E()\n>>> e.options.a\n1\n>>> e.options.b\n6\n>>> e.options.subsection1.c\n3\n>>> e.options.subsection1.subsubsection.d\n2\n>>> e.options.subsection2.e\n2\n```\n\n\nOptionsFactory extension for subclasses\n---------------------------------------\n\nSometimes it can be useful to create an extended version of an `OptionsFactory`. For\nexample a child class might have some extra options that are not needed in its parent\nclass, or might require different default values. The `OptionsFatory.add()` method\ncreates a new `OptionsFactory` from an existing one, with the keyword arguments adding\nto or overriding the options in the original factory. When overriding existing options,\npass a value or expression to keep existing documentation and checks, or a `WithMeta`\nobject to provide new documentation and checks. Example:\n```python\nfrom optionsfactory import OptionsFactory\n\n\nclass Parent:\n    options_factory = OptionsFactory(\n        a=WithMeta(1, doc=\"option a\"),\n        b=WithMeta(2, doc=\"option b\"),\n        c=WithMeta(3, doc=\"option c\"),\n    )\n\n    def __init__(self, **kwargs):\n        self.optiotns = self.options_factory(kwargs)\n\nclass Child(Parent):\n    options_factory = Parent.options_factory.add(\n        # Keep 'a' unchanged\n        b=4,  # Change the default value of 'b', but keep the documentation\n        c=WithMeta(5, doc=\"child option c\"),  # New default and attributes for 'c'\n        d=WithMeta(6, doc=\"new option d\"),  # New option not present in the parent\n    )\n```\nand if we create a `Child` instance\n```python\n>>> child = Child()\n>>> child.options.a\n1\n>>> child.options.doc[\"a\"]\n'option a'\n>>> child.options.b\n4\n>>> child.options.doc[\"b\"]\n'option b'\n>>> child.options.c\n5\n>>> child.options.doc[\"c\"]\n'child option c'\n>>> child.options.d\n6\n>>> child.options.doc[\"d\"]\n'new option d'\n```\n\n\nNested options\n--------------\n\nNested options are created by passing another `OptionsFactory` as a keyword argument in\nthe OptionsFactory constructor. See the [nested structure](#nested_structure) example\nbelow.\n\n\nCollecting defaults\n-------------------\n\nIt can be useful to collect options from several factories together into a higher-level\nfactory. For example if a `class Container` contains members of several classes, it\nmight be useful for the `options_factory` of `Container` to have options for all those\nmembers, but to define the options, defaults, documentation, etc. in the particular\nclasses. This can be done by passing `OptionsFactory` objects as positional arguments to\nthe `OptionsFactory` constructor - see the [flat structure](#flat_structure) example\nbelow.\n\nOther Features\n--------------\n\n### load from YAML\n\nThe user settings can be loaded from a YAML file (if `PyYAML` is available - install the\n`optionsfactory[yaml]` variant to ensure this):\n```python\n>>> with open(filename) as f:\n>>>     options = options_factory.create_from_yaml(f)\n```\n\n\n### save to YAML\n\nThe options can also be saved to a YAML file, either the non-default values only\n```python\n>>> with open(filename, 'w') as f:\n>>>     options.to_yaml(f)\n```\nor all values including defaults, by passing `True` to the `with_defaults` argument\n```python\n>>> with open(filename, 'w') as f:\n>>>     options.to_yaml(f, True)  # saves options with default values as well\n```\n\n\n### Pickling (with dill)\n\n`Options` objects can be pickled using `dill`. This is tested. Pickling of\n`MutableOptions` objects is not currently supported.\n\n\nExamples\n--------\n\nHere are a couple of more complicated examples of the patterns that `OptionsFactory` was\ndesigned for.\n\n\n### flat structure\n\n`class A` contains members of types `B` and `C`, so `A.options_factory` collects the\ndefault values, documentation, etc. from `B.options_factory` and `C.options_factory` by\ntaking them as positional arguments to the constructor. Then the `Options` object of `A`\nis used to create the `Options` objects for `B` and `C`, which will have only the\noptions relevant to themselves in, because `B.options_factory` and `C.options_factory`\nignore any undefined options in the argument passed to `create`.\n\n```python\nclass A:\n    options_factory = OptionsFactory(\n        B.options_factory,\n        C.options_factory,\n        a_opt1 = WithMeta(1, allowed=[1, 3, 7]),\n        a_opt2 = WithMeta(2, value_type=[int, float]),\n    )\n\n    def __init__(self, user_options):\n        self.options = self.options_factory(user_options)\n        self.b = B(self.options)\n        self.c = C(self.options)\n\nclass B:\n    options_factory = OptionsFactory(\n        b_opt = WithMeta(3.0, checks=is_positive),\n    )\n\n    def __init__(self, options):\n        self.options = self.options_factory.create(options)\n\nclass C:\n    options_factory = OptionsFactory(\n        c_opt = WithMeta(\"c-value\", value_type=str)\n    )\n\n    def __init__(self, options):\n        self.options = self.options_factory.create(options)\n```\n\nIf `B` or `C` were intended to also be used as user-facing classes, which want to get\ntheir options from `**kwargs`, it would also be possible to have\n```python\ndef __init__(self, **kwargs):\n    self.options = self.options_factory(kwargs)\n```\nand create the objects in `A`'s constructor like `self.b = B(**self.options)`.\n\n\n### nested structure\n\nSimilar to the flat structure above, but keeping the options for different member\nobjects separated in different sections:\n```python\nclass A:\n    options_factory = OptionsFactory(\n        B=B.options_factory,\n        C=C.options_factory,\n        a_opt1 = WithMeta(1, allowed=[1, 3, 7]),\n        a_opt2 = WithMeta(2, value_type=[int, float]),\n    )\n\n    def __init__(self, user_options):\n        self.options = self.options_factory(user_options)\n        self.b = B(self.options.B)\n        self.c = C(self.options.C)\n\nclass B:\n    options_factory = OptionsFactory(\n        b_opt = WithMeta(3.0, checks=is_positive),\n    )\n\n    def __init__(self, options):\n        self.options = options\n\nclass C:\n    options_factory = OptionsFactory(\n        c_opt = WithMeta(\"c-value\", value_type=str)\n    )\n\n    def __init__(self, options):\n        self.options = options\n```\n\nIf `A` needs to change the default options for one of the nested sections, can use the\n`add()` method like `B={\"b_opt\": 7.0)`.\n\nDefault expressions in a nested options structure can use values from sub-sections, or\nfrom parent sections, see [Default expressions](#default_expressions).\n\nIf `B` or `C` should be allowed to be created independently of a containing class like\n`A`, then you can instead define the constructor as\n```python\nclass B:\n    options_factory = OptionsFactory(\n        b_opt = WithMeta(3.0, checks=is_positive),\n    )\n\n    def __init__(self, options):\n        self.options = self.options_factory(options)\n```\nThis will have the same effect as the above code when called with `self.b =\nB(self.options.B)` but also allows creating a `B` like `another_b = B({\"b_opt\": 4.0})`.\n(This version will be slightly more expensive than the one above because the `Options`\nobject will be converted to a `dict`-like iterable and a new `Options` created by\nparsing that iterable.)\n\n\n### global options\n\nNot recommended, but you could create a global options object for your package/program.\nFor example in a file `mypackage.py`\n```python\nfrom optionsfactory import OptionsFactory\n\n\nglobal_options = None\n\n\noptions_factory = OptionsFactory(\n    opt1 = 1,\n    opt2 = 2,\n)\n\n\ndef setup(input_options):\n    global global_options\n    global_options = options_factory.create(input_options)\n```\n\nMutableOptionsFactory\n=====================\n\n`MutableOptionsFactory` is almost identical to `OptionsFactory`, but creates\n`MutableOptions` objects which can be modified after being created (it also has a\n`create_immutable()` method, equivalent to `OptionsFactory.create()` to create\n`Options` objects). `MutableOptions` behave like `Options` with the exception that\nvalues can be set, or reset to the default value (using `del`) after the object is\ncreated. Default values are re-calculated if any option is changed. Example:\n```python\n>>> from options_factory import MutableOptionsFactory\n>>> factory = MutableOptionsFactory(a=1, b=lambda options: 2.0*options.a)\n>>> mutable_options = factory.create({\"a\": 3, \"b\": 4})\n>>> mutable_options.a\n3\n>>> mutable_options.b\n4\n>>> del mutable_options.b\n>>> mutable_options.b\n6.0\n>>> mutable_options.a = 5\n>>> mutable_options.b\n10.0\n>>> mutable_options[\"a\"] = 7.5\n>>> mutable_options.b\n15.0\n>>> del mutable_options[\"a\"]\n>>> mutable_options.b\n2.0\n>>> mutable_options.a\n1\n```\n\n\nExpressions for non-default values\n==================================\n\nPassing expressions for non-default values should work, although it has not been tested\nyet. Expressions cannot at present be loaded from YAML files.\n\n\nAcknowledgements\n================\n\nThanks to [Ben Dudson](https://github.com/bendudson) and [Peter\nHill](https://github.com/ZedThree) for discussion on options handling in the [hypnotoad\nproject](https://github.com/boutproject/hypnotoad/pull/33) and ideas in\n[frozen_options](https://github.com/bendudson/frozen-options).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/johnomotani/optionsfactory",
    "keywords": "",
    "license": "OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "optionsfactory",
    "package_url": "https://pypi.org/project/optionsfactory/",
    "platform": null,
    "project_url": "https://pypi.org/project/optionsfactory/",
    "project_urls": {
      "Homepage": "https://github.com/johnomotani/optionsfactory"
    },
    "release_url": "https://pypi.org/project/optionsfactory/1.0.11/",
    "requires_dist": [
      "PyYAML (>=5.1) ; extra == 'yaml'"
    ],
    "requires_python": ">=3.6",
    "summary": "Handles user-provided options with flexible defaults, documentation and checking",
    "version": "1.0.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16350330,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f24ee4b39330f5e3832e7fc1dc673ccf8e762ca0bfd0cfd8f7900a1adc6e249",
          "md5": "0db5c965373db536e0fa73401064af85",
          "sha256": "e535478e297ee5dab25ae7623550573c9d954b104c87a95d507524d663c9624c"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0db5c965373db536e0fa73401064af85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24276,
        "upload_time": "2020-05-03T23:00:08",
        "upload_time_iso_8601": "2020-05-03T23:00:08.575249Z",
        "url": "https://files.pythonhosted.org/packages/3f/24/ee4b39330f5e3832e7fc1dc673ccf8e762ca0bfd0cfd8f7900a1adc6e249/optionsfactory-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc9e318d50f5038b6ad908edc91c6b048766dfb75b98a5fec27a372b5666b0ce",
          "md5": "e6a0f83be8430734693dca62b591e7bf",
          "sha256": "a3884f9afca6b7631f33ded35c25cc992a6cd1338291187d449e97a8c7292936"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e6a0f83be8430734693dca62b591e7bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40686,
        "upload_time": "2020-05-03T23:00:10",
        "upload_time_iso_8601": "2020-05-03T23:00:10.930109Z",
        "url": "https://files.pythonhosted.org/packages/dc/9e/318d50f5038b6ad908edc91c6b048766dfb75b98a5fec27a372b5666b0ce/optionsfactory-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9592e401de5e9132674e8ea8d1bc5bf160b64691dc999031a85369577b90ddef",
          "md5": "a5fd16e9778c5825e1c724d195670f63",
          "sha256": "8597d5ddc3b7d57d171ce518e8237492d08248c888ca482257edb0504495b06d"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5fd16e9778c5825e1c724d195670f63",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24269,
        "upload_time": "2020-05-03T23:17:26",
        "upload_time_iso_8601": "2020-05-03T23:17:26.710074Z",
        "url": "https://files.pythonhosted.org/packages/95/92/e401de5e9132674e8ea8d1bc5bf160b64691dc999031a85369577b90ddef/optionsfactory-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce25d4f82a27e39e770059de8744c05a84d8eb4e5f03c7d3d7ca6f38823936b3",
          "md5": "f3c928f3210040f244647be7bcf9e0a0",
          "sha256": "07d7a2b2e9a4fb103ad054ec68557d256d25a373d9b6a7c64b26652ea23370f6"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f3c928f3210040f244647be7bcf9e0a0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40681,
        "upload_time": "2020-05-03T23:17:27",
        "upload_time_iso_8601": "2020-05-03T23:17:27.917282Z",
        "url": "https://files.pythonhosted.org/packages/ce/25/d4f82a27e39e770059de8744c05a84d8eb4e5f03c7d3d7ca6f38823936b3/optionsfactory-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5ec8d81ecc986bee92d3361d784144e217b641fe891ac9fcf7256e660478c96",
          "md5": "c5cb024d0b93f1a117e6be3fe2459a86",
          "sha256": "7515d7caef72f1006b1a56bedb2468520d5cbdb7373e801e2c3d44dcb14d20a2"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c5cb024d0b93f1a117e6be3fe2459a86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25825,
        "upload_time": "2023-01-03T22:57:15",
        "upload_time_iso_8601": "2023-01-03T22:57:15.049083Z",
        "url": "https://files.pythonhosted.org/packages/b5/ec/8d81ecc986bee92d3361d784144e217b641fe891ac9fcf7256e660478c96/optionsfactory-1.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89ccd3ac3f690c3bb061b7c17378d80b03a5617adee3375782b75c31abbb009e",
          "md5": "9631e0c52b7b9b16ee145aa712c5875f",
          "sha256": "f8d8163b823ce4a7b8af98ebef432cdd5d03dc5ef219caf6bd7d6fd556fe4c98"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "9631e0c52b7b9b16ee145aa712c5875f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41912,
        "upload_time": "2023-01-03T22:57:16",
        "upload_time_iso_8601": "2023-01-03T22:57:16.426261Z",
        "url": "https://files.pythonhosted.org/packages/89/cc/d3ac3f690c3bb061b7c17378d80b03a5617adee3375782b75c31abbb009e/optionsfactory-1.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a24ebbb488767aa50b182d395db9eb602a625ed3637f3ab99c7885235cd0236",
          "md5": "1110f5d9bf546531a366af4f132e50c2",
          "sha256": "7f7bf0f546a2bb9f8a9cc89c866bf9c5b0bf2f985579fd8e222c4a7b31b96c3d"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1110f5d9bf546531a366af4f132e50c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25848,
        "upload_time": "2023-01-08T16:46:15",
        "upload_time_iso_8601": "2023-01-08T16:46:15.348650Z",
        "url": "https://files.pythonhosted.org/packages/5a/24/ebbb488767aa50b182d395db9eb602a625ed3637f3ab99c7885235cd0236/optionsfactory-1.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0df4b0629e980389a0b5a5599e2be4de045a47097ecc82327cd67d04678f2e6b",
          "md5": "40478ffa5331f6a0943e95d734f665bc",
          "sha256": "dc5e316b2734ed210bcff333c800ec06d97c7cf75f41d79d7a0a7c6fa608d403"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "40478ffa5331f6a0943e95d734f665bc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41943,
        "upload_time": "2023-01-08T16:46:16",
        "upload_time_iso_8601": "2023-01-08T16:46:16.649168Z",
        "url": "https://files.pythonhosted.org/packages/0d/f4/b0629e980389a0b5a5599e2be4de045a47097ecc82327cd67d04678f2e6b/optionsfactory-1.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "068fd9431be57d3b1b9b20ecc606ad604cdf307506e7f12abf75d800f6bacc03",
          "md5": "9139c5ca22c2522e3512d7b28a759d99",
          "sha256": "a449ee61bf46226903a8110297519a8e9c6175e5d5c114731eb85f0fc32e3b4f"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9139c5ca22c2522e3512d7b28a759d99",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24289,
        "upload_time": "2020-05-05T12:51:41",
        "upload_time_iso_8601": "2020-05-05T12:51:41.040678Z",
        "url": "https://files.pythonhosted.org/packages/06/8f/d9431be57d3b1b9b20ecc606ad604cdf307506e7f12abf75d800f6bacc03/optionsfactory-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "863c3703f5506fba0d7423d6ce003d68b257dd23b9cb28753577263bab4a2ae2",
          "md5": "67a9687d2d36a0a369f3182fdd12d03a",
          "sha256": "b723d193cbb4787e79538fa178c05c937bb2716eb86966ea4a0e7b245e2949cf"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "67a9687d2d36a0a369f3182fdd12d03a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40736,
        "upload_time": "2020-05-05T12:51:42",
        "upload_time_iso_8601": "2020-05-05T12:51:42.152447Z",
        "url": "https://files.pythonhosted.org/packages/86/3c/3703f5506fba0d7423d6ce003d68b257dd23b9cb28753577263bab4a2ae2/optionsfactory-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "004ac127cee23509821a9843706e1d0f4bd9bffd8edcf6bad0a13a0abbb2cf3b",
          "md5": "9008e9724995e53152028512ba9b238d",
          "sha256": "ffbd6895a4fe652c2bfa70da3fd8acfda302321e904054556782cce313ff1d81"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9008e9724995e53152028512ba9b238d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24287,
        "upload_time": "2020-05-11T22:45:53",
        "upload_time_iso_8601": "2020-05-11T22:45:53.769340Z",
        "url": "https://files.pythonhosted.org/packages/00/4a/c127cee23509821a9843706e1d0f4bd9bffd8edcf6bad0a13a0abbb2cf3b/optionsfactory-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "108e02fb3e9d05866c82152efd89a68f7020b356493bf9e6c7fa3938444bd8f4",
          "md5": "06a18971b414fb2521a5dc14811c5868",
          "sha256": "43f0c4ace9ecde6e755aaeef0bcd9ff78c2503e85d189c6db51c7b8387183819"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "06a18971b414fb2521a5dc14811c5868",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40718,
        "upload_time": "2020-05-11T22:45:55",
        "upload_time_iso_8601": "2020-05-11T22:45:55.012018Z",
        "url": "https://files.pythonhosted.org/packages/10/8e/02fb3e9d05866c82152efd89a68f7020b356493bf9e6c7fa3938444bd8f4/optionsfactory-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f14e3f025d8877b3734b1515a92d08bdcedd136f34d24a7964d6ff6b618dd71d",
          "md5": "46962e5ab552056f0b938f39a48fbef6",
          "sha256": "24b5bf9447c1560662fdcd53dd63e33680a265540500d12ecc13402e9632b570"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "46962e5ab552056f0b938f39a48fbef6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24288,
        "upload_time": "2020-05-16T11:02:31",
        "upload_time_iso_8601": "2020-05-16T11:02:31.909157Z",
        "url": "https://files.pythonhosted.org/packages/f1/4e/3f025d8877b3734b1515a92d08bdcedd136f34d24a7964d6ff6b618dd71d/optionsfactory-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d7fd8c827f88840b2be549dc275b28bc098c43eab87826329f27ed93f2b34648",
          "md5": "b5ffa491487f7a9350dda43d035ca25d",
          "sha256": "6a08151177ae9c64efb48720c8441cec732b6b00d1d91ba1484abf3b17a1871d"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b5ffa491487f7a9350dda43d035ca25d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41771,
        "upload_time": "2020-05-16T11:02:33",
        "upload_time_iso_8601": "2020-05-16T11:02:33.427822Z",
        "url": "https://files.pythonhosted.org/packages/d7/fd/8c827f88840b2be549dc275b28bc098c43eab87826329f27ed93f2b34648/optionsfactory-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98164ee394e51ab4827b525b21c9b2c91a0da10f3b6c154dd4c44582bf3d2475",
          "md5": "7bc7ee464a1a66ef682010b21c1100d0",
          "sha256": "94b631d0bd885c8432efe6bb1d4708e20ed474279666f86bb9f186a0e2d268ce"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7bc7ee464a1a66ef682010b21c1100d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24549,
        "upload_time": "2022-06-14T20:02:20",
        "upload_time_iso_8601": "2022-06-14T20:02:20.691787Z",
        "url": "https://files.pythonhosted.org/packages/98/16/4ee394e51ab4827b525b21c9b2c91a0da10f3b6c154dd4c44582bf3d2475/optionsfactory-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f7cc23455590189d15eb67af25568b477cb50bf0ba63356d8d412edac3f287f",
          "md5": "2f9de29b902ad006f8c865d4d862977b",
          "sha256": "5abca3c6644d41e240892a018650320f6ac60149426a5c0dae77398a6f60ea99"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2f9de29b902ad006f8c865d4d862977b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40673,
        "upload_time": "2022-06-14T20:02:22",
        "upload_time_iso_8601": "2022-06-14T20:02:22.780888Z",
        "url": "https://files.pythonhosted.org/packages/9f/7c/c23455590189d15eb67af25568b477cb50bf0ba63356d8d412edac3f287f/optionsfactory-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efe8405366176ef263047d09cbd351cea8765d6737eaa85ddaad886805d805ab",
          "md5": "49fbd51cf24a99cdd5ea4f5392c588f9",
          "sha256": "426f89943beb9eb8dd46617972d3b3b1f6e50797f41241fe5e68427424fd1076"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49fbd51cf24a99cdd5ea4f5392c588f9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24865,
        "upload_time": "2022-11-18T15:30:46",
        "upload_time_iso_8601": "2022-11-18T15:30:46.892443Z",
        "url": "https://files.pythonhosted.org/packages/ef/e8/405366176ef263047d09cbd351cea8765d6737eaa85ddaad886805d805ab/optionsfactory-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fc3594f5ba6baae853d177efc0dc81f861f69bb7490a23815fe0dbf87f4b7b5",
          "md5": "03f71eac151dd07a52ad8faa66e72316",
          "sha256": "58505c3d2e3b35bdd80412f9c1d061fa323697094f80e03e94c147f06bb18196"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "03f71eac151dd07a52ad8faa66e72316",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40967,
        "upload_time": "2022-11-18T15:30:48",
        "upload_time_iso_8601": "2022-11-18T15:30:48.647870Z",
        "url": "https://files.pythonhosted.org/packages/4f/c3/594f5ba6baae853d177efc0dc81f861f69bb7490a23815fe0dbf87f4b7b5/optionsfactory-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c27bc3c80f5a81cfa38116e9ffbbf05e6b3890560e540878f5a890aa5303160",
          "md5": "f06ec5f1a562685fb53f39ecd68c5d9f",
          "sha256": "ece92ebd6fc57ea1896b1443219df78e0f455c38248eee73597200cdc4835a88"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f06ec5f1a562685fb53f39ecd68c5d9f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24949,
        "upload_time": "2022-11-20T13:59:48",
        "upload_time_iso_8601": "2022-11-20T13:59:48.467831Z",
        "url": "https://files.pythonhosted.org/packages/6c/27/bc3c80f5a81cfa38116e9ffbbf05e6b3890560e540878f5a890aa5303160/optionsfactory-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd4d6a6d9d01747600852747ed65b204620d9f131dc8c6e108f467242967b8c2",
          "md5": "066bd0babb299aa063d704899f275a5a",
          "sha256": "541f296309fedae5114d2c563a583d903110bacc166c1a83b9de77000cf13db4"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "066bd0babb299aa063d704899f275a5a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41050,
        "upload_time": "2022-11-20T13:59:50",
        "upload_time_iso_8601": "2022-11-20T13:59:50.065816Z",
        "url": "https://files.pythonhosted.org/packages/dd/4d/6a6d9d01747600852747ed65b204620d9f131dc8c6e108f467242967b8c2/optionsfactory-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66a391fa83111cc7462ddefe69163376c30435b5a3dd8617a338884814034e0d",
          "md5": "3776f294c03d1e252d798d995489b0e9",
          "sha256": "43ffb806edb32e2f4cf06dfecad09399327ddd89bec338bdaa8d1e247a74cdc8"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3776f294c03d1e252d798d995489b0e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25397,
        "upload_time": "2022-12-31T21:41:58",
        "upload_time_iso_8601": "2022-12-31T21:41:58.018441Z",
        "url": "https://files.pythonhosted.org/packages/66/a3/91fa83111cc7462ddefe69163376c30435b5a3dd8617a338884814034e0d/optionsfactory-1.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "086d2ba7b2e4c6e30db0023535a5726ca2fc1ef8e22dd4a32d29eaa0260d68e9",
          "md5": "ba974894aab1e3e7abb9bf935c6feb1b",
          "sha256": "c01d919a21580488fffc144eb73c2bfaf77a8e21aca2757a4c93b7f3a5bf5afb"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "ba974894aab1e3e7abb9bf935c6feb1b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41561,
        "upload_time": "2022-12-31T21:41:59",
        "upload_time_iso_8601": "2022-12-31T21:41:59.496791Z",
        "url": "https://files.pythonhosted.org/packages/08/6d/2ba7b2e4c6e30db0023535a5726ca2fc1ef8e22dd4a32d29eaa0260d68e9/optionsfactory-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2c3224b4f2fc708510b154ad8caef5276c9a23eca48347d206fa208161ff6c8",
          "md5": "d760cd4fe528c6897114a6954fb0387c",
          "sha256": "fb52a958f2b4baa396c10e541aae43df59063256abbd78b7487145987be5d49c"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d760cd4fe528c6897114a6954fb0387c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25626,
        "upload_time": "2023-01-01T17:18:25",
        "upload_time_iso_8601": "2023-01-01T17:18:25.994891Z",
        "url": "https://files.pythonhosted.org/packages/e2/c3/224b4f2fc708510b154ad8caef5276c9a23eca48347d206fa208161ff6c8/optionsfactory-1.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bc90ced5a514491634db38ddfc8092d80a110b5e810c8bfc4c30e1821610077",
          "md5": "f6906bfcf2ef193d5972571ca7308a8e",
          "sha256": "0fcba8ea2a96a3c75ae7b0735eb7329e1f23808d5a1098feda30812b1ec57eb0"
        },
        "downloads": -1,
        "filename": "optionsfactory-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "f6906bfcf2ef193d5972571ca7308a8e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 41754,
        "upload_time": "2023-01-01T17:18:27",
        "upload_time_iso_8601": "2023-01-01T17:18:27.551013Z",
        "url": "https://files.pythonhosted.org/packages/0b/c9/0ced5a514491634db38ddfc8092d80a110b5e810c8bfc4c30e1821610077/optionsfactory-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5a24ebbb488767aa50b182d395db9eb602a625ed3637f3ab99c7885235cd0236",
        "md5": "1110f5d9bf546531a366af4f132e50c2",
        "sha256": "7f7bf0f546a2bb9f8a9cc89c866bf9c5b0bf2f985579fd8e222c4a7b31b96c3d"
      },
      "downloads": -1,
      "filename": "optionsfactory-1.0.11-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1110f5d9bf546531a366af4f132e50c2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 25848,
      "upload_time": "2023-01-08T16:46:15",
      "upload_time_iso_8601": "2023-01-08T16:46:15.348650Z",
      "url": "https://files.pythonhosted.org/packages/5a/24/ebbb488767aa50b182d395db9eb602a625ed3637f3ab99c7885235cd0236/optionsfactory-1.0.11-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0df4b0629e980389a0b5a5599e2be4de045a47097ecc82327cd67d04678f2e6b",
        "md5": "40478ffa5331f6a0943e95d734f665bc",
        "sha256": "dc5e316b2734ed210bcff333c800ec06d97c7cf75f41d79d7a0a7c6fa608d403"
      },
      "downloads": -1,
      "filename": "optionsfactory-1.0.11.tar.gz",
      "has_sig": false,
      "md5_digest": "40478ffa5331f6a0943e95d734f665bc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 41943,
      "upload_time": "2023-01-08T16:46:16",
      "upload_time_iso_8601": "2023-01-08T16:46:16.649168Z",
      "url": "https://files.pythonhosted.org/packages/0d/f4/b0629e980389a0b5a5599e2be4de045a47097ecc82327cd67d04678f2e6b/optionsfactory-1.0.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}