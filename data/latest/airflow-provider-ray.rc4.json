{
  "info": {
    "author": "Rob Deeb, Richard Liaw, Daniel Imberman, Pete DeJoy",
    "author_email": "rob@astronomer.io, daniel@astronomer.io, rliaw@anyscale.com, pete@astronomer.io",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<p align=\"center\">\n  <a href=\"https://www.airflow.apache.org\">\n    <img alt=\"Airflow\" src=\"https://cwiki.apache.org/confluence/download/attachments/145723561/airflow_transparent.png?api=v2\" width=\"60\" />\n    <img alt=\"Ray\" src=\"https://avatars.githubusercontent.com/u/22125274?s=400&v=4\" width=\"60\" />\n  </a>\n</p>\n<h1 align=\"center\">\n  Apache Airflow Provider for Ray\n</h1>\n  <h3 align=\"center\">\n  A provider you can install into your Airflow environment to access custom Ray XCom backends, Ray Hooks, and Ray Operators.\n</h3>\n<br/>\n\n## 🧪 Experimental Version\n\nThis provider is an experimental alpha containing necessary components to\norchestrate and schedule Ray tasks using Airflow. It is actively maintained\nand being developed to bring production-ready workflows to Ray using Airflow.\nThie release contains everything needed to begin building these workflows using\nthe Airlfow taskflow API.\n\n```yaml\nCurrent Release: 0.2.1\n```\n\n## Requirements\n\nVisit the [Ray Project page](https://ray.io/)\nfor more info on Ray.\n\n> ⚠️ The server version and client version (build) of Ray MUST be\nthe same.\n\n```yaml\n- Python Version >= 3.7\n- Airflow Version >= 2.0.0\n- Ray Version == 1.3.0\n- Filelock >= 3.0.0\n```\n\n## Modules\n\n- [Ray XCom Backend](./ray_provider/xcom/ray_backend.py): Custom XCom backend\nto assist operators in moving data between tasks using the Ray API with its\ninternal Plasma store, thereby allowing for in-memory distributed processing\nand handling of large data objects.\n- [Ray Hook](./ray_provider/hooks/ray_client.py): Extension of `Http` hook\nthat uses the Ray client to provide connections to the Ray Server.\n- [Ray Decorator](./ray_provider/decorators/ray_decorators.py): Task decorator\nto be used with the task flow API, combining wrapping the existing airflow\n`@task` decorate with `ray.remote` functionality, thereby executing each\ntask on the ray cluster.\n\n## Configuration and Usage\n\n1. Add the provider package wheel file to the root directory of your Airflow project.\n\n2. In your Airflow `Dockerfile`, you will need to add an environment variable to\nspecify your custom backend, along with the provider wheel install. Add the following:\n\n    ```Dockerfile\n    FROM quay.io/astronomer/ap-airflow:2.0.2-1-buster-onbuild\n    USER root\n    RUN pip uninstall astronomer-airflow-version-check -y\n    USER astro\n    ENV AIRFLOW__CORE__XCOM_BACKEND=ray_provider.xcom.ray_backend.RayBackend\n    ```\n\n    > Check ap-airflow version, if unsure, change to `ap-airflow:latest-onbuild`\n\n3. We are using a Ray `1.3.0` and python version `3.7`. To get a bleeding edge\nversion of Ray, you can to follow this format to build the wheel url in your\n`requirements.txt` file:\n\n    ```bash\n    pip install airflow-provider-ray\n    ```\n\n4. Configure Ray Locally. To run ray locally, you'll need a minimum 6GB of free\nmemory.To start, in your environment with ray installed, run:\n\n    ```bash\n    (venv)$ ray start --num-cpus=8 --object-store-memory=7000000000 --head\n    ```\n\n    If you have extra resources, you can bump the memory up.\n\n    You should now be able to open the ray dashboard at [http://127.0.0.1:8265/](http://127.0.0.1:8265/).\n\n6. Start your Airflow environment and open the UI.\n\n7. In the Airflow UI, add an `Airflow Pool` with the following:\n\n    ```bash\n    Pool (name): ray_worker_pool\n    Slots: 25\n    ```\n\n8. In the Airflow UI, add an `Airflow Connection` with the following:\n\n    ```bash\n    Conn Id: ray_cluster_connection\n    Conn Type: HTTP\n    Host: Cluster IP Address, with basic Auth params if needed\n    Port: 10001\n    ```\n\n9. In your Airflow DAG python file, you must include the following in your\n`default_args` dictionary:\n\n    ```python\n    from ray_provider.xcom.ray_backend import RayBackend\n    .\n    .\n    .\n    default_args = {\n        'on_success_callback': RayBackend.on_success_callback,\n        'on_failure_callback': RayBackend.on_failure_callback,\n        .\n        .\n        .\n    }\n    @dag(\n        default_args=default_args,\n        .\n        .\n    )\n    def ray_example_dag():\n        # do stuff\n    ```\n\n10. Using the taskflow API, your airflow task should now use the\n`@ray_task` decorator for any ray task and add the `ray_conn_id`,\nparameter as `task_args`, like:\n\n    ```python\n    from ray_provider.decorators import ray_task\n\n    default_args = {\n        'on_success_callback': RayBackend.on_success_callback,\n        'on_failure_callback': RayBackend.on_failure_callback,\n        .\n        .\n        .\n    }\n    task_args = {\"ray_conn_id\": \"ray_cluster_connection\"}\n    .\n    .\n    .\n    @dag(\n        default_args=default_args,\n        .\n        .\n    )\n    def ray_example_dag():\n\n        @ray_task(**task_args)\n        def sum_cols(df: pd.DataFrame) -> pd.DataFrame:\n            return pd.DataFrame(df.sum()).T\n    ```\n\n## Project Contributors and Maintainers\n\nThis project is built in collaboration between\n[Astronomer](https://www.astronomer.io/) and\n[Anyscale](https://www.anyscale.com/),\nwith active contributions from:\n\n- [Pete DeJoy](https://github.com/petedejoy)\n- [Daniel Imberman](https://github.com/dimberman)\n- [Rob Deeb](https://github.com/mrrobby)\n- [Richard Liaw](https://github.com/richardliaw)\n- [Charles Greer](https://github.com/grechaw)\n- [Will Drevo](https://github.com/worldveil)\n\nThis project is formatted via `black`:\n\n```bash\npip install black\nblack .\n```\n\n## Connections\n\nTBD - [Info on building a connection to Ray]\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "ray,distributed,compute,airflow",
    "license": "Apache License 2.0",
    "maintainer": "Rob Deeb, Richard Liaw, Daniel Imberman, Pete DeJoy",
    "maintainer_email": "rob@astronomer.io, daniel@astronomer.io, rliaw@anyscale.com, pete@astronomer.io",
    "name": "airflow-provider-ray",
    "package_url": "https://pypi.org/project/airflow-provider-ray/",
    "platform": "",
    "project_url": "https://pypi.org/project/airflow-provider-ray/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/airflow-provider-ray/0.2.1/",
    "requires_dist": [
      "apache-airflow (>=2.0)",
      "pandas (>=1.0.0)",
      "filelock (>=3.0.0)",
      "ray"
    ],
    "requires_python": ">=3.7",
    "summary": "An Apache Airflow provider for Ray",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10327842,
  "releases": {
    "0.1.1a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c9c060933823ea76904e4c8b9bb97f191b142fdebf67cc02c4c24a7806d94e8",
          "md5": "8c09441dd61c788e3890e55be9bf099e",
          "sha256": "cbcbe11772a1a1f64c6c8ce8a67fbba4513b157d2be19b41047b74bcf62afb4a"
        },
        "downloads": -1,
        "filename": "airflow-provider-ray-0.1.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "8c09441dd61c788e3890e55be9bf099e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 9273,
        "upload_time": "2021-05-10T17:29:59",
        "upload_time_iso_8601": "2021-05-10T17:29:59.350784Z",
        "url": "https://files.pythonhosted.org/packages/1c/9c/060933823ea76904e4c8b9bb97f191b142fdebf67cc02c4c24a7806d94e8/airflow-provider-ray-0.1.1a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2c169e1c75a7ac7336bc6b6f2016d8197a1982e7801db5d2eee64188df08efc",
          "md5": "75dec4fab0df9df08f9ce25671732d0c",
          "sha256": "486e82f92a95ee470225181424bc7bdec2078110fe94557ea5cd352025f8db11"
        },
        "downloads": -1,
        "filename": "airflow_provider_ray-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75dec4fab0df9df08f9ce25671732d0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16461,
        "upload_time": "2021-05-11T20:54:13",
        "upload_time_iso_8601": "2021-05-11T20:54:13.897518Z",
        "url": "https://files.pythonhosted.org/packages/b2/c1/69e1c75a7ac7336bc6b6f2016d8197a1982e7801db5d2eee64188df08efc/airflow_provider_ray-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "550813211341ed4a9ff47961a4ccc4eb318c0e1b2b05cfd6df1ab2732001a19e",
          "md5": "6802ee46bc1a0cd4630ee728e11cb999",
          "sha256": "3967f6f38158f57cf5a405fd71c116a9ec521711664e83fe02363968aeb7d099"
        },
        "downloads": -1,
        "filename": "airflow-provider-ray-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6802ee46bc1a0cd4630ee728e11cb999",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9416,
        "upload_time": "2021-05-11T20:54:15",
        "upload_time_iso_8601": "2021-05-11T20:54:15.272507Z",
        "url": "https://files.pythonhosted.org/packages/55/08/13211341ed4a9ff47961a4ccc4eb318c0e1b2b05cfd6df1ab2732001a19e/airflow-provider-ray-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4589ab98d046aac692ea17b044b312516bdcf63fae81c30a1d7c6ce4c7cb5267",
          "md5": "d0b15b29bd8e71f1dd25454c5897aabf",
          "sha256": "cc44d35d42e0c4293b41bf1220acba2a6618d88e5314618cdfecf786521d907c"
        },
        "downloads": -1,
        "filename": "airflow_provider_ray-0.2.0rc2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0b15b29bd8e71f1dd25454c5897aabf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16505,
        "upload_time": "2021-05-11T20:40:10",
        "upload_time_iso_8601": "2021-05-11T20:40:10.909966Z",
        "url": "https://files.pythonhosted.org/packages/45/89/ab98d046aac692ea17b044b312516bdcf63fae81c30a1d7c6ce4c7cb5267/airflow_provider_ray-0.2.0rc2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be25086198d4530541fe710e1dcaf28e9a70d09f22b56d1703a455d142894e7e",
          "md5": "b6d2783894be230b690b881149138337",
          "sha256": "2bd98781b2a5f1c2b53f99128a568da32c6bdb0a45bd360477583a93a1cc3dde"
        },
        "downloads": -1,
        "filename": "airflow-provider-ray-0.2.0rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "b6d2783894be230b690b881149138337",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9393,
        "upload_time": "2021-05-11T20:40:12",
        "upload_time_iso_8601": "2021-05-11T20:40:12.496019Z",
        "url": "https://files.pythonhosted.org/packages/be/25/086198d4530541fe710e1dcaf28e9a70d09f22b56d1703a455d142894e7e/airflow-provider-ray-0.2.0rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bb5694769b9348234b71c46355b1a1ec98f099297f59b8ee6f3c2c207c3825f",
          "md5": "ad01b2aa9ac97abadebdf3b277b7eb7d",
          "sha256": "fefd0724e85553de19bb0a56e208f0179ac99ac11ee327bf5f2d80b210b4eea3"
        },
        "downloads": -1,
        "filename": "airflow_provider_ray-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad01b2aa9ac97abadebdf3b277b7eb7d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 22327,
        "upload_time": "2021-05-11T22:59:51",
        "upload_time_iso_8601": "2021-05-11T22:59:51.815982Z",
        "url": "https://files.pythonhosted.org/packages/0b/b5/694769b9348234b71c46355b1a1ec98f099297f59b8ee6f3c2c207c3825f/airflow_provider_ray-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95c028140c901c77d94878ec6d1cef04f716caf26a65cf7bffce01f9b279265b",
          "md5": "f70457c826fe2ff4762b48d84b96018a",
          "sha256": "d0bdd611c6a2016364e9fb19ac8ac0067d6a2e27b0686cc7f92c0bc27e58f3e2"
        },
        "downloads": -1,
        "filename": "airflow-provider-ray-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f70457c826fe2ff4762b48d84b96018a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12585,
        "upload_time": "2021-05-11T22:59:53",
        "upload_time_iso_8601": "2021-05-11T22:59:53.240786Z",
        "url": "https://files.pythonhosted.org/packages/95/c0/28140c901c77d94878ec6d1cef04f716caf26a65cf7bffce01f9b279265b/airflow-provider-ray-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0bb5694769b9348234b71c46355b1a1ec98f099297f59b8ee6f3c2c207c3825f",
        "md5": "ad01b2aa9ac97abadebdf3b277b7eb7d",
        "sha256": "fefd0724e85553de19bb0a56e208f0179ac99ac11ee327bf5f2d80b210b4eea3"
      },
      "downloads": -1,
      "filename": "airflow_provider_ray-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ad01b2aa9ac97abadebdf3b277b7eb7d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 22327,
      "upload_time": "2021-05-11T22:59:51",
      "upload_time_iso_8601": "2021-05-11T22:59:51.815982Z",
      "url": "https://files.pythonhosted.org/packages/0b/b5/694769b9348234b71c46355b1a1ec98f099297f59b8ee6f3c2c207c3825f/airflow_provider_ray-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "95c028140c901c77d94878ec6d1cef04f716caf26a65cf7bffce01f9b279265b",
        "md5": "f70457c826fe2ff4762b48d84b96018a",
        "sha256": "d0bdd611c6a2016364e9fb19ac8ac0067d6a2e27b0686cc7f92c0bc27e58f3e2"
      },
      "downloads": -1,
      "filename": "airflow-provider-ray-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f70457c826fe2ff4762b48d84b96018a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 12585,
      "upload_time": "2021-05-11T22:59:53",
      "upload_time_iso_8601": "2021-05-11T22:59:53.240786Z",
      "url": "https://files.pythonhosted.org/packages/95/c0/28140c901c77d94878ec6d1cef04f716caf26a65cf7bffce01f9b279265b/airflow-provider-ray-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}