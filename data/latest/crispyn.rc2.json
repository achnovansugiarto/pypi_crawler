{
  "info": {
    "author": "Aleksandra Bączkiewicz",
    "author_email": "aleksandra.baczkiewicz@phd.usz.edu.pl",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# crispyn\nCRIteria Significance determining in PYthoN - The Python 3 Library for determining criteria weights for MCDA methods.\n\nThis library provides 11 objective criteria weighting methods and a Stochastic Multicriteria Acceptability Analysis Method (SMAA) \nthat does not require criteria weights.\n\n## Installation\n\n```\npip install crispyn\n```\n\n## Usage\n\n`crispyn` is the Python 3 package that provides 11 objective weighting methods, which can be used to determine criteria weights for \nsolving multi-criteria problems with Multi-Criteria Decision Analysis (MCDA) methods. The first step is providing the decision matrix `matrix` with alternatives \nperformance values. The decision matrix is two-dimensional and contains m alternatives in rows and n criteria in columns. You also have to provide \ncriteria types `types`. Criteria types are equal to 1 for profit criteria and -1 for cost criteria. Then you have to calculate criteria weights \nusing weighting method chosen from `crispyn.weighting_methods` submodule. Depending on the method chosen, you have to provide `matrix` or `matrix` and `types` as \nweighting method arguments. It is detailed in Usage in the documentation. Then you can evaluate alternatives from the decision matrix using the VIKOR method \nfrom `weighting method.mcda_methods` module. The VIKOR method returns a vector with preference values `pref` assigned to alternatives. To rank alternatives \naccording to VIKOR preference values, you have to sort them in ascending order because, in the VIKOR method, the best alternative has the lowest \npreference value. The alternatives are ranked using the `rank_preferences` method provided in the `crispyn.additions` submodule. Parameter `reverse = False` means that alternatives \nare sorted in ascending order. Here is an example of using the Entropy weighting method `entropy_weighting` for determining criteria weights and \nthe VIKOR method to calculate preference values:\n\n```python\nimport numpy as np\nfrom crispyn.mcda_methods import VIKOR\nfrom crispyn import weighting_methods as mcda_weights\nfrom crispyn import normalizations as norms\nfrom crispyn.additions import rank_preferences\n\nmatrix = np.array([[256, 8, 41, 1.6, 1.77, 7347.16],\n[256, 8, 32, 1.0, 1.8, 6919.99],\n[256, 8, 53, 1.6, 1.9, 8400],\n[256, 8, 41, 1.0, 1.75, 6808.9],\n[512, 8, 35, 1.6, 1.7, 8479.99],\n[256, 4, 35, 1.6, 1.7, 7499.99]])\n\ntypes = np.array([1, 1, 1, 1, -1, -1])\nweights = mcda_weights.entropy_weighting(matrix)\n\n# Create the VIKOR method object\nvikor = VIKOR(normalization_method=norms.minmax_normalization)\n# Calculate alternatives preference function values with VIKOR method\npref = vikor(matrix, weights, types)\n# Rank alternatives according to preference values\nrank = rank_preferences(pref, reverse = False)\n```\n\n### Stochastic Multicriteria Acceptability Analysis Method (SMAA)\n\nAdditionally, the Crispyn library provides the Stochastic Multicriteria Acceptability Analysis Method (SMAA), which, combined \nwith the VIKOR method, is designed to solve decision problems when there is a lack of information about criteria preferences (unknown criteria \nweights). This method is implemented in the class named `VIKOR_SMAA`. This method requires only the decision matrix, a matrix with \nweight vectors and criteria types provided in one call. The number of weight vectors is equal to the number of iterations. First, the matrix with\nweight vectors must be generated with `_generate_weights` method provided by the `VIKOR_SMAA` class. In this method, uniform distributed weights \nare generated by Monte Carlo simulation. The results of the provided `VIKOR_SMAA` method are Rank acceptability index, Central weight vector, and \nRank scores.\n\n### Rank acceptability index\n\nThe ranking is built based on generated weights. Next, counters for corresponding ranks in relation to the alternatives are increased. \nAfter a given number of iterations, the rank acceptability indexes are obtained by dividing the counters by the number of iterations. \nRank acceptability index shows the share of different scores placing an alternative in a given rank. \n\n### Central weight vector\n\nThe central weights are calculated similarly. In each iteration, the weight vector is added to its ‘summed weight vector’ when the \nalternative gets the rank. Next, this vector is divided by the number of iterations to get the central weight vector. The central weight \nvector describes the preferences of a typical decision-maker, supporting this alternative with the assumed preference model. It allows the \ndecision-maker to see what criteria preferences result in the best evaluation of given alternatives.\n\n### Rank scores\n\nFinal ranking of alternatives provided by the ranking function, which adds to each alternative value of 1 each time it has better preference \nvalues than each other.\n\nHere is example of use of the `VIKOR_SMAA` method:\n\n```python\nfrom crispyn.mcda_methods import VIKOR_SMAA\n\n# criteria number\nn = matrix.shape[1]\n# SMAA iterations number\niterations = 10000\n\n# create the VIKOR_SMAA method object\nvikor_smaa = VIKOR_SMAA()\n\n# generate multiple weight vectors in matrix\nweight_vectors = vikor_smaa._generate_weights(n, iterations)\n\n# run the vikor_smaa method\nrank_acceptability_index, central_weight_vector, rank_scores = vikor_smaa(matrix, weight_vectors, types)\n```\n\n## License\n\n`crispyn` was created by Aleksandra Bączkiewicz. It is licensed under the terms of the MIT license.\n\n## Documentation\n\nDocumentation of this library with instruction for installation and usage is \nprovided [here](https://crispyn.readthedocs.io/en/latest/)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/energyinpython/crispyn",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "crispyn",
    "package_url": "https://pypi.org/project/crispyn/",
    "platform": null,
    "project_url": "https://pypi.org/project/crispyn/",
    "project_urls": {
      "Homepage": "https://github.com/energyinpython/crispyn"
    },
    "release_url": "https://pypi.org/project/crispyn/0.0.2/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": ">=3.4",
    "summary": "CRIteria Significance determining in PYthoN - The Python 3 Library for determining criteria weights for MCDA methods.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14250061,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d397e7575116039042614892c7dbe3c75c737bc4cb843d9b430eb4a086bb3ad4",
          "md5": "7953aa17c152c11564f11d663b06c887",
          "sha256": "460815e996e4b223b8ad993224e8549b66f223ec2ce2f7c15b93638f55854a49"
        },
        "downloads": -1,
        "filename": "crispyn-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7953aa17c152c11564f11d663b06c887",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 11929,
        "upload_time": "2022-06-22T13:10:24",
        "upload_time_iso_8601": "2022-06-22T13:10:24.325378Z",
        "url": "https://files.pythonhosted.org/packages/d3/97/e7575116039042614892c7dbe3c75c737bc4cb843d9b430eb4a086bb3ad4/crispyn-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d14fbcfe37fe177a3e545400d590ed453b2d521bd7812625be20bfe5e4fa2478",
          "md5": "061051f51da0b486b8df0cc122a606b0",
          "sha256": "a7c960bf7a05dc6b06379ac6b9c0473651b6de2db58957f21d80edb1239ac953"
        },
        "downloads": -1,
        "filename": "crispyn-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "061051f51da0b486b8df0cc122a606b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 9573,
        "upload_time": "2022-06-22T13:10:26",
        "upload_time_iso_8601": "2022-06-22T13:10:26.303716Z",
        "url": "https://files.pythonhosted.org/packages/d1/4f/bcfe37fe177a3e545400d590ed453b2d521bd7812625be20bfe5e4fa2478/crispyn-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6621b7343b8a76083de3ef4fcc62b4dfc8026b7164c49c1768ca4d4e82526978",
          "md5": "a982c4040c2a669a9b77e913c39653f2",
          "sha256": "17f8974a5368d8debd68e2c80356688a6f08a2d3c7b16be0528a66d88f16de1d"
        },
        "downloads": -1,
        "filename": "crispyn-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a982c4040c2a669a9b77e913c39653f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 13873,
        "upload_time": "2022-06-26T11:05:20",
        "upload_time_iso_8601": "2022-06-26T11:05:20.940903Z",
        "url": "https://files.pythonhosted.org/packages/66/21/b7343b8a76083de3ef4fcc62b4dfc8026b7164c49c1768ca4d4e82526978/crispyn-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b2c5b361ae7a20cf51946ce745fb042e3c33678703c9d144e8ef33e442f1b5d",
          "md5": "1235580da72785b5673bf2c0fe15c3c4",
          "sha256": "248d54d5753650de05517f7b708b6920e606e8e260adb52f5421e3beb146ce66"
        },
        "downloads": -1,
        "filename": "crispyn-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1235580da72785b5673bf2c0fe15c3c4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 12905,
        "upload_time": "2022-06-26T11:05:22",
        "upload_time_iso_8601": "2022-06-26T11:05:22.474324Z",
        "url": "https://files.pythonhosted.org/packages/6b/2c/5b361ae7a20cf51946ce745fb042e3c33678703c9d144e8ef33e442f1b5d/crispyn-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6621b7343b8a76083de3ef4fcc62b4dfc8026b7164c49c1768ca4d4e82526978",
        "md5": "a982c4040c2a669a9b77e913c39653f2",
        "sha256": "17f8974a5368d8debd68e2c80356688a6f08a2d3c7b16be0528a66d88f16de1d"
      },
      "downloads": -1,
      "filename": "crispyn-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a982c4040c2a669a9b77e913c39653f2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 13873,
      "upload_time": "2022-06-26T11:05:20",
      "upload_time_iso_8601": "2022-06-26T11:05:20.940903Z",
      "url": "https://files.pythonhosted.org/packages/66/21/b7343b8a76083de3ef4fcc62b4dfc8026b7164c49c1768ca4d4e82526978/crispyn-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b2c5b361ae7a20cf51946ce745fb042e3c33678703c9d144e8ef33e442f1b5d",
        "md5": "1235580da72785b5673bf2c0fe15c3c4",
        "sha256": "248d54d5753650de05517f7b708b6920e606e8e260adb52f5421e3beb146ce66"
      },
      "downloads": -1,
      "filename": "crispyn-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1235580da72785b5673bf2c0fe15c3c4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 12905,
      "upload_time": "2022-06-26T11:05:22",
      "upload_time_iso_8601": "2022-06-26T11:05:22.474324Z",
      "url": "https://files.pythonhosted.org/packages/6b/2c/5b361ae7a20cf51946ce745fb042e3c33678703c9d144e8ef33e442f1b5d/crispyn-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}