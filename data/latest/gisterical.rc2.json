{
  "info": {
    "author": "Pavel Cherepanskiy",
    "author_email": "pavelcherepansky@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Introduction\nGISterical is a command-line tool for managing a photo library. The primary use is to\nsort photos in a user-defined folder structure. User defines the sorting by \nadding command-line flags in a specific order, for example, `YmC` will create \nand populate the folder structure where the top level is year (**Y**), followed by month\n(**m**) and then country (**C**) where the photo was taken:\n```\n2022\n  |___1\n  |   |__ Australia\n  |   |__ Hong Kong\n  |\n  |___2\n      |__Australia\n```\n\nThe full list of available flags is:\n* Y -- sort by year\n* m -- sort by month\n* d -- sort by calendar date\n* C -- sort by country where the photo was taken\n* c -- sort by the nearest city within a certain distance\n\nThe tool is very fast in comparison to most other photo managers I used and 3-level\nsorting of a 15,000 files and 40 Gb size photo collection including copying files to \nthe target location on a different physical drive takes approximately 5 minutes.\n\n\n# Initial setup \nThe tool works by building a (local) PostGIS database containing metadata extracted \nfrom user folders and additional data for coordinates of 47,000 of major cities and \ncountry boundaries. This allows to perform merges between images with location data \nand spatial objects.\n\nFor this a PostgreSQL service has to be running either locally on a remote location and \na blank database needs to be created with a superuser created.\n\nDepending on the system the instructions for setting up a PostgreSQL service can be found:\n* [Fedora Linux](https://docs.fedoraproject.org/en-US/quick-docs/postgresql/)\n* [Ubuntu-based distributions](https://ubuntu.com/server/docs/databases-postgresql)\n* [Windows](https://www.microfocus.com/documentation/idol/IDOL_12_0/MediaServer/Guides/html/English/Content/Getting_Started/Configure/_TRN_Set_up_PostgreSQL.htm)\n\nAfter the installation has been completed, a PostGIS extension needs to be additionally \ninstalled, which on common Linux distributions can be done via:\n```\nsudo dnf install postgis\n\nor\n\nsudo apt install postgis\n```\nOn Windows systems PostGIS can be installed from a binary that can be downloaded [here](https://postgis.net/windows_downloads/).\n\nOnce this has been done the final step is to create a database, user and add the \nextension to the database. To do it first we log into PostgreSQL management tool as a superuser\n```\nsudo -U postgres psql\n```\n\nNow in the console we run the following commands:\n\n```\nCREATE USER <new_user_name> WITH PASSWORD <password>;\nCREATE DATABASE <new_db_name> OWNER <new_user_name>;\n\\connect <new_db_name>\nCREATE EXTENSION postgis;\n```\n\nAnd finally run the following command to update the default values for database name, user name,\npassword and hostname:\n```\ngisterical --set-connection\n```\n\nAnd now the application is fully ready to use.\n\n# Usage\n\n## Populate database\nThe first task is to run initial set-up of the image database and populate spatial data into the \ndatabase. For this use `--setup` flag followed by `-i` or `--input` and the folder where photos \nare located:\n```\ngisterical --setup -i /home/pav/Pictures\n```\nFor my 15,000-file photo collection the setup takes about 1-2 minutes. The only other option\nthat can be used during the initial set-up is whether or not to hash the images using `--hash` option. \nHashing will allow you to identify duplicated images even when they've been cropped or resized. \nIf hashing is enabled then perceptual and color hashes are calculated for each image using\n[Imagehash](https://pypi.org/project/ImageHash/) library.\n\n**Note:** The process is approximately 100x slower with hashing enabled! So use only if you \nspecifically need to deal with duplicates.\n\nNew folders can be added at any time to the existing database using:\n```\ngisterical --add-folder -i <path_to_folder>\n```\n\n## Sort photos\nTo sort images use `--sort` option followed by any combination of sorting flags listed above.\nThe order of the flags will deternime the sorting order in the resulting file structure, \nfor example, `YmC` will sort with year at top level, but `CYm` will have country as the top-level\nfolder.\n\nThe command also needs to be followed by the output folder name where the new file structure \nwill be created using `-o` or `--output` options. The files are only ever copied to the new \nlocation so the original files will never be affected. The full syntax of sorting command is:\n```\ngisterical --sort <sorting_flags> -o <output_folder>\n```\n\nSorting by city is the most expensive operation since a complicated merge needs to be calculated \nin the database. This sorting operation also finds cities within a certain radius (in kilometers) \nof photo location which needs to be provided using `--distance` option.\n\n**Note:** When multiple cities fall within the search radius the one with the largest population\nwill be selected as the location of the photo. This can also occasionally create inconsistencies\nbetween country and city of of origin in which case the best option is to reduce the search distance.\n\nTo sort with \"nearest city\" as one of the parameters:\n```\ngisterical --sort <sorting_flags> -o <output_folder> --distance 50\n```\n\nAny photos missing geolocation information will be assigned to an \"Unknown\" city and \"Unknown\"\ncountry.\n\n## Find images\nThe tool can additionally be used to locate images by country or nearest city. In this case\nthe script will locate all the relevant photos and output them to an `--output` (`-o`) folder.\nAs is for sorting, to find by city, a distance parameter is required.\nFor example,\n```\ngisterical --find-by-city Melbourne -o /home/Pictures/Melbourne_stuff --distance 50\n```\n\nTo search by country of origin distance is not required:\n```\ngisterical --find-by-country Malaysia -o <output_folder>\n```\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pavelcherepan/gisterical",
    "keywords": "example project",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "GISterical",
    "package_url": "https://pypi.org/project/GISterical/",
    "platform": null,
    "project_url": "https://pypi.org/project/GISterical/",
    "project_urls": {
      "Homepage": "https://github.com/pavelcherepan/gisterical"
    },
    "release_url": "https://pypi.org/project/GISterical/0.5.9/",
    "requires_dist": null,
    "requires_python": ">=3.9, <4",
    "summary": "",
    "version": "0.5.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14567298,
  "releases": {
    "0.5.8.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab210cda014bc8f68abb9501871fd3fd52441eff360eb8ad4baf1ecfd90b6718",
          "md5": "3b293e2a9ceb76d7c5e4d90b153bf630",
          "sha256": "d6c9a462467d8a68227233ae8d1bb9c8e3fcdd5681ceed14d5a75fa3fbd4fed4"
        },
        "downloads": -1,
        "filename": "GISterical-0.5.8.19.tar.gz",
        "has_sig": false,
        "md5_digest": "3b293e2a9ceb76d7c5e4d90b153bf630",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <4",
        "size": 8972410,
        "upload_time": "2022-07-27T06:20:43",
        "upload_time_iso_8601": "2022-07-27T06:20:43.564511Z",
        "url": "https://files.pythonhosted.org/packages/ab/21/0cda014bc8f68abb9501871fd3fd52441eff360eb8ad4baf1ecfd90b6718/GISterical-0.5.8.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d35e9f3f0a1738535d0267c1910a8bfe063026566ca4714fe5ee94eda05651b",
          "md5": "996cf7d6fc1f19d9403cd0dcef523e23",
          "sha256": "b10c23d8e84052c4f85f0646f526cb835750388e9cb9019746e8a61de058355a"
        },
        "downloads": -1,
        "filename": "GISterical-0.5.9.tar.gz",
        "has_sig": false,
        "md5_digest": "996cf7d6fc1f19d9403cd0dcef523e23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9, <4",
        "size": 8972347,
        "upload_time": "2022-07-27T13:05:54",
        "upload_time_iso_8601": "2022-07-27T13:05:54.396745Z",
        "url": "https://files.pythonhosted.org/packages/1d/35/e9f3f0a1738535d0267c1910a8bfe063026566ca4714fe5ee94eda05651b/GISterical-0.5.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d35e9f3f0a1738535d0267c1910a8bfe063026566ca4714fe5ee94eda05651b",
        "md5": "996cf7d6fc1f19d9403cd0dcef523e23",
        "sha256": "b10c23d8e84052c4f85f0646f526cb835750388e9cb9019746e8a61de058355a"
      },
      "downloads": -1,
      "filename": "GISterical-0.5.9.tar.gz",
      "has_sig": false,
      "md5_digest": "996cf7d6fc1f19d9403cd0dcef523e23",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9, <4",
      "size": 8972347,
      "upload_time": "2022-07-27T13:05:54",
      "upload_time_iso_8601": "2022-07-27T13:05:54.396745Z",
      "url": "https://files.pythonhosted.org/packages/1d/35/e9f3f0a1738535d0267c1910a8bfe063026566ca4714fe5ee94eda05651b/GISterical-0.5.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}