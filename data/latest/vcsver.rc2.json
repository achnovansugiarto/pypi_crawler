{
  "info": {
    "author": "Janne Rönkkö",
    "author_email": "janne.ronkko@iki.fi",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: System :: Archiving :: Packaging"
    ],
    "description": "======\nvcsver\n======\n\nOverview\n========\n\nAutomate your project's version numbering; just create annotated tag in Git and\nalways have correct version number with your built packages. You don't need to\nspend time updating version numbers in source code anymore, just tag and you are\ngood to go. And you are always able to go back to the commit from which a package\nhas been built.\n\nCurrently only Git and PEP-440 compatible version numbers with setuptools are\nsupported but the design allows adding other version control systems and other\nversioning schemes.\n\nUsage\n=====\n\nTo enable automatic version in PEP 517 compatible way, configure source for versions\nin *tool.vcsver* table in *pyproject.toml*:\n\n.. code:: toml\n\n  [tool.vcsver]\n  source = \"git\"\n\nSetuptools without pyproject.toml\n---------------------------------\n\n**Note that this method is deprecated and will be removed in the future releases.**\n\n1. Add *vcsver* to *setup_requires*\n2. Set *vcsver* argument\n    The value can be mapping, (a dict, for example) containing configuration or\n    any Python value that evaluates as True.\n\nUse with default settings\n\n.. code:: python\n\n    import setuptools\n\n    setup(\n        name='example-package',\n        vcsver=True,\n        setup_requires=['vcsver'],\n    )\n\nUse with custom settings\n\n.. code:: python\n\n    import setuptools\n\n    setup(\n        name='example-package',\n        vcsver={\n          'root_version': '0.0',\n          'parse_tag': lambda tag: tag.lstrip('v'),\n          'create_version': lambda ver: '{}.post{}'.format(ver.latest_version, ver.distance),\n        },\n        setup_requires=['vcsver'],\n    )\n\nNote that if the *setup* function is called for source tree not having version info available,\n*vcsver.RevisionInfoNotFoundError* is raised.\n\nConfiguration\n*************\n\nThe *vcsver* argument can be used for configuring version generation behaviour\nby proving the configuration as mapping.\n\nThe items in the mapping can either be actual Python objects or identifiers (strings)\nthat are mapped to actual values.\n\n**root_version**\n  If repository does not contain any tags, this string is used.\n\n  Default value: :code:`'0'`\n\n**read_revision_info**\n  Callable used for reading revision information from VCS (or other source).\n\n  The function should not take any arguments and should return instance of *vcsver.RevisionInfo*\n  or None in case revision info is not available.\n\n  Default value: :code:`vcsver.GitRevisionInfoReader()`\n\n  Available identifiers:\n\n  - :code:`git` Use *vcsvver.GitRevisionInfoReader* instance with default arguments\n\n**parse_tag**\n  Function parsing version string from a tag.\n\n  The function takes one string argument (the tag) and returns version extracted from\n  the tag as string\n\n  Default value: :code:`lambda tag: tag`\n\n  Available identifiers:\n\n  - :code:`plain` Use the tag as it is in the version control system\n\n**create_version**\n  Function creating version string from *vcsver.VersionInfo*.\n\n  The function takes one argument of type *vcsver.VersionInfo*. \n\n  Default value: :code:`vcsver.pep440.post`\n\n  Available identifiers:\n\n  - :code:`pep440.post` PEP 440 string using postN\n  - :code:`pep440.post_with_dev` PEP 440 string using post0+devN\n\nConfiguration matching the default settings:\n\n.. code:: python\n\n    {\n        'root_version': '0',\n        'read_revision_info': vcsver.GitRevisionInfoReader(),\n        'parse_tag': lambda tag: tag,\n        'create_version': vcsver.pep440.post,\n    }\n\nThe same configuration can also be defined without importing *vcsver*:\n\n.. code:: python\n\n    {\n        'root_version': '0',\n        'read_revision_info': 'git',\n        'parse_tag': 'plain',\n        'create_version': 'pep440.post',\n    }\n\n\nVersion Number Generation\n=========================\n\nWhen building package from code in a repository, *vcsver.RevisionInfo* object is filled\nbased on current revision.\n\nIf latest tag is available, latest release version is read from it by using *parse_tag*\nfunction. Otherwise *root_version* is used as latest version and distance is the number\nof commits since the start of the commit history.\n\nThe version string is generated based on the above info using the *create_version* function.\n\nIf package is being built from extracted *sdist*, version information is read from *PKG-INFO*.\n\nAPI\n===\n\nFunctions\n---------\n\n.. code:: python\n\n  def get_version(\n      root_version: str = '0',\n      read_revision_info: types.RevisionInfoReader = git.GitRevisionInfoReader(),\n      parse_tag: types.TagParser = lambda tag: tag,\n      create_version: types.VersionStringFactory = pep440.post,\n  ) -> str:\n\nGet version using *read_revision_info* or from Python's PKG-INFO file (to support building\nPython sdists).\n\n*Arguments*\n\n- **root_version**: Version string used as root version if no releases are found from VCS\n- **read_revision_info**: Callable that return *RevisionInfo* object based on VCS\n- **parse_tag**: Callable returning version string from tag found from VCS\n- **create_version**: Callable returning version string based on *VersionInfo*\n\nIf *read_revision_info* returns :code:`None`, the :code:`distance` part of *RevisionInfo* is\nassumed to contain the amount of commit since start of history. In this case the value of\n:code:`root_version` is used as value for :code:`VersionInfo.latest_release` , i.e. *parse_tag*\nis not used for mapping the latest tag into version string.\n\n.. code:: python\n\n  def post(\n      version_info: types.VersionInfo,\n  ) -> str:\n\nCreate version that uses *post* part for version between releases.\n\nThe version is created using the following rules:\n\n- :code:`distance == 0 and not dirty` ⇒ :code:`{latest_version}`\n    Released version\n- :code:`distance == 0 and dirty` ⇒ :code:`{latest_version+dirty}`\n    Released version with modified source tree\n- :code:`distance > 0 and not dirty` ⇒ :code:`{latest_version}.post{distance}+{commit}`\n    Released version\n- :code:`distance > 0 and dirty` ⇒ :code:`{latest_version+dirty}.post{distance}+{commit}-dirty`\n    Released version with modified source tree\n\n.. code:: python\n\n  def post_with_dev(\n      version_info: types.VersionInfo,\n  ) -> str:\n\nCreate version that uses *post* and *dev* parts for version between releases.\n\nThe version is created using the following rules:\n\n- :code:`distance == 0 and not dirty` ⇒ :code:`{latest_version}`\n    Released version\n- :code:`distance == 0 and dirty` ⇒ :code:`{latest_version+dirty}`\n    Released version with modified source tree\n- :code:`distance > 0 and not dirty` ⇒ :code:`{latest_version}.post0.dev{distance}+{commit}`\n    Released version\n- :code:`distance > 0 and dirty` ⇒ :code:`{latest_version+dirty}.post0.dev{distance}+{commit}-dirty`\n    Released version with modified source tree\n\nClasses\n-------\n\nvcsver.GitRevisionInfoReader\n****************************\n\nRead revision info from Git repository.\n\nConstructor arguments:\n\n**path**\n  Path to repository root. If *None*, current working directory is used.\n\n  Default value: :code:`None`\n\nMembers:\n\n**__call__(self)**\n  Return vcsver.RevisionInfo generated from Git history of *HEAD*.\n\nExceptions\n----------\n\n**vcsver.VcsverError**\n  Base class for exceptions thrown by *vcsver*\n\n**vcsver.InvalidConfigurationError**\n  The configuration is invalid\n\n**vcsver.RevisionInfoNotFoundError**\n  Version could not be generated because revision info was not found\n\nTypes\n-----\n\n**vcsver.RevisionInfo**\n  Named tuple containing revision info:\n\n  - **latest_tag**: The most recent tag (None if there is no tags before the current revision)\n  - **distance**: Number of commits since the most recent tag (0 if current revision is tagged)\n  - **commit**: Commit identifier for current revision\n  - **dirty**: Is the source tree dirty (not exactly the same as the code in the current revision).\n    If there is no commits, the *lastest_tag* and *commit* should be :code:`None` and dirty should be\n    set to :code:`True`\n\n**vcsver.VersionInfo**\n  Named tuple containing version info:\n\n  - **latest_version**: The most recent version (None if there is no released version before the current revision)\n  - **distance**: Number of commits since the most recent tag (0 if current revision is tagged)\n  - **commit**: Commit identifier for current revision\n  - **dirty**: Is the source tree dirty (not exactly the same as the code in the current revision)\n\n*RevisionInfo* is information returned by VCS readers and is turned into *VersionInfo* using the *parse_tag* function.\n\n**RevisionInfoReader**\n\n.. code:: python\n\n  typing.Callable[\n      [],\n      typing.Optional[RevisionInfo],\n  ]\n\n**RevisionInfoReaderFactory**\n\n.. code:: python\n\n  typing.Callable[\n      [],\n      RevisionInfoReader,\n  ]\n\n**TagParser**\n\n.. code:: python\n\n  typing.Callable[\n      [str],\n      str,\n  ]\n\n**VersionStringFactory**\n\n.. code:: python\n\n  typing.Callable[\n      [VersionInfo],\n      str,\n  ]\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/janneronkko/vcsver",
    "keywords": "setuptools,development,git,version",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vcsver",
    "package_url": "https://pypi.org/project/vcsver/",
    "platform": "",
    "project_url": "https://pypi.org/project/vcsver/",
    "project_urls": {
      "Homepage": "https://github.com/janneronkko/vcsver"
    },
    "release_url": "https://pypi.org/project/vcsver/0.2/",
    "requires_dist": [
      "tomli"
    ],
    "requires_python": ">=3.7",
    "summary": "Automatic package version numbering from version control",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12801738,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f90c173086d8b71f31e2983ea9f1a4bf0b281a02ed2abba975d424f3acb7692",
          "md5": "c976b904f0f96840a77c646cdb6dbe0c",
          "sha256": "48f8c386e293c202163681b2588d9b94768a9e540dd564564d11c8391b668b16"
        },
        "downloads": -1,
        "filename": "vcsver-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c976b904f0f96840a77c646cdb6dbe0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8970,
        "upload_time": "2020-12-19T15:44:56",
        "upload_time_iso_8601": "2020-12-19T15:44:56.630351Z",
        "url": "https://files.pythonhosted.org/packages/0f/90/c173086d8b71f31e2983ea9f1a4bf0b281a02ed2abba975d424f3acb7692/vcsver-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2edce999266eb3f36dd49d676ba050d97c0fa2b2e352acbe304744cd6cfc66d7",
          "md5": "3bb52ce7be48378219614c1c1c0bd1ec",
          "sha256": "7abdd893f1aed7d79058852b37ccf9213732e84660e0168cf37bfb4420252be7"
        },
        "downloads": -1,
        "filename": "vcsver-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3bb52ce7be48378219614c1c1c0bd1ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9256,
        "upload_time": "2020-12-19T15:44:58",
        "upload_time_iso_8601": "2020-12-19T15:44:58.414959Z",
        "url": "https://files.pythonhosted.org/packages/2e/dc/e999266eb3f36dd49d676ba050d97c0fa2b2e352acbe304744cd6cfc66d7/vcsver-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "caaa3af47d3b83e451572879089cdedb42ce96fd49a0c86b002ce725c9e040cd",
          "md5": "3671a48da1628ea094f3393817ff1dd9",
          "sha256": "4e5b8cc771e87e6a6741d52277a4fda4653c7c6f46bc24b3a14e4b156e7333c1"
        },
        "downloads": -1,
        "filename": "vcsver-0.2-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "3671a48da1628ea094f3393817ff1dd9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10190,
        "upload_time": "2022-02-06T10:08:56",
        "upload_time_iso_8601": "2022-02-06T10:08:56.036349Z",
        "url": "https://files.pythonhosted.org/packages/ca/aa/3af47d3b83e451572879089cdedb42ce96fd49a0c86b002ce725c9e040cd/vcsver-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa1cd75e97bb0bf7548273f28ee7f393ae4e44e189629b11de3f95712fe2c221",
          "md5": "29ffad990e3dd8e08894d8c55d85e52f",
          "sha256": "51c6bc3c87dce10b64ed27c53a3365a286de548617878e53593eacdb42b284b2"
        },
        "downloads": -1,
        "filename": "vcsver-0.2.tar.gz",
        "has_sig": true,
        "md5_digest": "29ffad990e3dd8e08894d8c55d85e52f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10721,
        "upload_time": "2022-02-06T10:08:58",
        "upload_time_iso_8601": "2022-02-06T10:08:58.080885Z",
        "url": "https://files.pythonhosted.org/packages/aa/1c/d75e97bb0bf7548273f28ee7f393ae4e44e189629b11de3f95712fe2c221/vcsver-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "caaa3af47d3b83e451572879089cdedb42ce96fd49a0c86b002ce725c9e040cd",
        "md5": "3671a48da1628ea094f3393817ff1dd9",
        "sha256": "4e5b8cc771e87e6a6741d52277a4fda4653c7c6f46bc24b3a14e4b156e7333c1"
      },
      "downloads": -1,
      "filename": "vcsver-0.2-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "3671a48da1628ea094f3393817ff1dd9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 10190,
      "upload_time": "2022-02-06T10:08:56",
      "upload_time_iso_8601": "2022-02-06T10:08:56.036349Z",
      "url": "https://files.pythonhosted.org/packages/ca/aa/3af47d3b83e451572879089cdedb42ce96fd49a0c86b002ce725c9e040cd/vcsver-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa1cd75e97bb0bf7548273f28ee7f393ae4e44e189629b11de3f95712fe2c221",
        "md5": "29ffad990e3dd8e08894d8c55d85e52f",
        "sha256": "51c6bc3c87dce10b64ed27c53a3365a286de548617878e53593eacdb42b284b2"
      },
      "downloads": -1,
      "filename": "vcsver-0.2.tar.gz",
      "has_sig": true,
      "md5_digest": "29ffad990e3dd8e08894d8c55d85e52f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10721,
      "upload_time": "2022-02-06T10:08:58",
      "upload_time_iso_8601": "2022-02-06T10:08:58.080885Z",
      "url": "https://files.pythonhosted.org/packages/aa/1c/d75e97bb0bf7548273f28ee7f393ae4e44e189629b11de3f95712fe2c221/vcsver-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}