{
  "info": {
    "author": "Shabanov Aleksei",
    "author_email": "shabanoff.aleksei@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Image Recognition"
    ],
    "description": "<div align=\"center\">\n<img src=\"https://i.ibb.co/wsmD5r4/photo-2022-06-06-17-40-52.jpg\" width=\"400px\">\n\n![example workflow](https://github.com/OML-Team/open-metric-learning/actions/workflows/pre-commit-workflow.yaml/badge.svg)\n![example workflow](https://github.com/OML-Team/open-metric-learning/actions/workflows/tests-workflow.yaml/badge.svg?)\n[![Documentation Status](https://readthedocs.org/projects/open-metric-learning/badge/?version=latest)](https://open-metric-learning.readthedocs.io/en/latest/?badge=latest)\n[![PyPI Status](https://pepy.tech/badge/open-metric-learning)](https://pepy.tech/project/open-metric-learning)\n[![Pipi version](https://img.shields.io/pypi/v/open-metric-learning.svg)](https://pypi.org/project/open-metric-learning/)\n![example workflow](https://github.com/OML-Team/open-metric-learning/actions/workflows/python-versions.yaml/badge.svg?)\n[![python](https://img.shields.io/badge/python_3.7-passing-success)](https://github.com/OML-Team/open-metric-learning/actions/workflows/python-versions.yaml/badge.svg?)\n[![python](https://img.shields.io/badge/python_3.8-passing-success)](https://github.com/OML-Team/open-metric-learning/actions/workflows/python-versions.yaml/badge.svg?)\n[![python](https://img.shields.io/badge/python_3.9-passing-success)](https://github.com/OML-Team/open-metric-learning/actions/workflows/python-versions.yaml/badge.svg?)\n[![python](https://img.shields.io/badge/python_3.10-passing-success)](https://github.com/OML-Team/open-metric-learning/actions/workflows/python-versions.yaml/badge.svg?)\n\n<div align=\"left\">\n\nOML is a PyTorch-based framework to train and validate the models producing high-quality embeddings.\n\n## FAQ\n\n<details>\n<summary>Why do I need OML?</summary>\n<p>\n\nYou may think *\"If I need image embeddings I can simply train a vanilla classifier and take its penultimate layer\"*.\nWell, it makes sense as a starting point. But there are several possible drawbacks:\n\n* If you want to use embeddings to perform searching you need to calculate some distance among them (for example, cosine or L2).\n  Usually, **you don't directly optimize these distances during the training** in the classification setup. So, you can only hope that\n  final embeddings will have the desired properties.\n\n* **The second problem is the validation process**.\n  In the searching setup, you usually care how related your top-N outputs are to the query.\n  The natural way to evaluate the model is to simulate searching requests to the reference set\n  and apply one of the retrieval metrics.\n  So, there is no guarantee that classification accuracy will correlate with these metrics.\n\n* Finally, you may want to implement a metric learning pipeline by yourself.\n  **There is a lot of work**: to use triplet loss you need to form batches in a specific way,\n  implement different kinds of triplets mining, tracking distances, etc. For the validation, you also need to\n  implement retrieval metrics,\n  which include effective embeddings accumulation during the epoch, covering corner cases, etc.\n  It's even harder if you have several gpus and use DDP.\n  You may also want to visualize your search requests by highlighting good and bad search results.\n  Instead of doing it by yourself, you can simply use OML for your purposes.\n\n</p>\n</details>\n\n\n<details>\n<summary>What is the difference between Open Metric Learning and PyTorch Metric Learning?</summary>\n<p>\n\n[PML](https://github.com/KevinMusgrave/pytorch-metric-learning) is the popular library for Metric Learning,\nand it includes a rich collection of losses, miners, distances, and reducers; that is why we provide straightforward\n[examples](https://github.com/OML-Team/open-metric-learning#usage-with-pytorch-metric-learning) of using them with OML.\nInitially, we tried to use PML, but in the end, we came up with our library, which is more pipeline / recipes oriented.\nThat is how OML differs from PML:\n\n* OML has [Config API](https://open-metric-learning.readthedocs.io/en/latest/examples/config.html)\n  which allows training models by preparing a config and your data in the required format\n  (it's like converting data into COCO format to train a detector from [mmdetection](https://github.com/open-mmlab/mmdetection)).\n\n* OML focuses on end-to-end pipelines and practical use cases.\n  It has config based examples on popular benchmarks close to real life (like photos of products of thousands ids).\n  We found some good combinations of hyperparameters on these datasets, trained and published models and their configs.\n  Thus, it makes OML more recipes oriented than PML, and its author\n  [confirms](https://github.com/KevinMusgrave/pytorch-metric-learning/issues/169#issuecomment-670814393)\n  this saying that his library is a set of tools rather the recipes, moreover, the examples in PML are mostly for CIFAR and MNIST datasets.\n\n* OML has the [Zoo](https://github.com/OML-Team/open-metric-learning#zoo) of pretrained models that can be easily accessed from\n  the code in the same way as in `torchvision` (when you type `resnet50(pretrained=True)`).\n\n* OML is integrated with [PyTorch Lightning](https://www.pytorchlightning.ai/), so, we can use the power of its\n  [Trainer](https://pytorch-lightning.readthedocs.io/en/stable/common/trainer.html).\n  This is especially helpful when we work with DDP, so, you compare our\n  [DDP example](https://open-metric-learning.readthedocs.io/en/latest/examples/python.html)\n  and the\n  [PMLs one](https://github.com/KevinMusgrave/pytorch-metric-learning/blob/master/examples/notebooks/DistributedTripletMarginLossMNIST.ipynb).\n  By the way, PML also has [Trainers](https://kevinmusgrave.github.io/pytorch-metric-learning/trainers/), but it's not\n  in the examples and custom `train` / `test` functions are used instead.\n\nWe believe that having Config API, laconic examples, and Zoo of pretrained models sets the entry threshold to a really low value.\n\n</p>\n</details>\n\n\n<details>\n<summary>What is Metric Learning?</summary>\n<p>\n\nMetric Learning problem (also known as *extreme classification* problem) means a situation in which we\nhave thousands of ids of some entities, but only a few samples for every entity.\nOften we assume that during the test stage (or production) we will deal with unseen entities\nwhich makes it impossible to apply the vanilla classification pipeline directly. In many cases obtained embeddings\nare used to perform search or matching procedures over them.\n\nHere are a few examples of such tasks from the computer vision sphere:\n* Person/Animal Re-Identification\n* Face Recognition\n* Landmark Recognition\n* Searching engines for online shops\n and many others.\n</p>\n</details>\n\n\n<details>\n<summary>Glossary (Naming convention) </summary>\n<p>\n\n* `embedding` - model's output (also known as `features vector` or `descriptor`).\n* `query` - a sample which is used as a request in the retrieval procedure.\n* `gallery set` - the set of entities to search items similar to `query` (also known as `reference` or `index`).\n* `Sampler` - an argument for `DataLoader` which is used to form batches\n* `Miner` - the object to form pairs or triplets after the batch was formed by `Sampler`. It's not necessary to form\n  the combinations of samples only inside the current batch, thus, the memory bank may be a part of `Miner`.\n* `Samples`/`Labels`/`Instances` - as an example let's consider DeepFashion dataset. It includes thousands of\n  fashion item ids (we name them `labels`) and several photos for each item id\n  (we name the individual photo as `instance` or `sample`). All of the fashion item ids have their groups like\n  \"skirts\", \"jackets\", \"shorts\" and so on (we name them `categories`).\n  Note, we avoid using the term `class` to avoid misunderstanding.\n* `training epoch` - batch samplers which we use for combination-based losses usually have a length equal to\n  `[number of labels in training dataset] / [numbers of labels in one batch]`. It means that we don't observe all of\n  the available training samples in one epoch (as opposed to vanilla classification),\n  instead, we observe all of the available labels.\n\n</p>\n</details>\n\n\n<details>\n<summary>How good may be a model trained with OML? </summary>\n<p>\n\nIt may be comparable with the current (2022 year) [SotA](https://paperswithcode.com/task/metric-learning) methods,\nfor example, [Hyp-ViT](https://arxiv.org/pdf/2203.10833.pdf).\n*(Few words about this approach: it's a ViT architecture trained with contrastive loss,\nbut the embeddings were projected into some hyperbolic space.\nAs the authors claimed, such a space is able to describe the nested structure of real-world data.\nSo, the paper requires some heavy math to adapt the usual operations for the hyperbolical space.)*\n\nWe trained the same architecture with triplet loss, fixing the rest of the parameters:\ntraining and test transformations, image size, and optimizer. See configs in [Models Zoo](https://github.com/OML-Team/open-metric-learning#zoo).\nThe trick was in heuristics in our miner and sampler:\n\n* [Category Balance Sampler](https://open-metric-learning.readthedocs.io/en/latest/contents/samplers.html#categorybalancesampler)\n  forms the batches limiting the number of categories *C* in it.\n  For instance, when *C = 1* it puts only jackets in one batch and only jeans into another one (just an example).\n  It automatically makes the negative pairs harder: it's more meaningful for a model to realise why two jackets\n  are different than to understand the same about a jacket and a t-shirt.\n\n* [Hard Triplets Miner](https://open-metric-learning.readthedocs.io/en/latest/contents/miners.html#hardtripletsminer)\n  makes the task even harder keeping only the hardest triplets (with maximal positive and minimal negative distances).\n\nHere are *CMC@1* scores for 2 popular benchmarks.\nSOP dataset: Hyp-ViT — 85.9, ours — 86.6. DeepFashion dataset: Hyp-ViT — 92.5, ours — 92.1.\nThus, utilising simple heuristics and avoiding heavy math we are able to perform on SotA level.\n\n</p>\n</details>\n\n<details>\n<summary>How does OML work under the hood? </summary>\n<p>\n\n**Training part** implies using losses, well-established for metric learning, such as the angular losses\n(like *ArcFace*) or the combinations based losses (like *TripletLoss* or *ContrastiveLoss*).\nThe latter benefits from effective mining schemas of triplets/pairs, so we pay great attention to it.\nThus, during the training we:\n   1. Use `DataLoader` + `Sampler` to form batches (for example `BalanceSampler`)\n   2. [Only for losses based on combinations] Use `Miner` to form effective pairs or triplets, including those which utilize a memory bank.\n   3. Compute loss.\n\n**Validation part** consists of several steps:\n  1. Accumulating all of the embeddings (`EmbeddingMetrics`).\n  2. Calculating distances between them with respect to query/gallery split.\n  3. Applying some specific retrieval techniques like query reranking or score normalisation.\n  4. Calculating retrieval metrics like *CMC@k*, *Precision@k* or *MeanAveragePrecision@k*.\n\n</p>\n</details>\n\n\n<details>\n<summary>What about Self-Supervised Learning?</summary>\n<p>\n\nRecent research in SSL definitely obtained great results. The problem is that these approaches\nrequired an enormous amount of computing to train the model. But in our framework, we consider the most common case\nwhen the average user has no more than a few GPUs.\n\nAt the same time, it would be unwise to ignore success in this sphere, so we still exploit it in two ways:\n* As a source of checkpoints that would be great to start training with. From publications and our experience,\n  they are much better as initialisation than the default supervised model trained on ImageNet. Thus, we added the possibility\n  to initialise your models using these pretrained checkpoints only by passing an argument in the config or the constructor.\n* As a source of inspiration. For example, we adapted the idea of a memory bank from *MoCo* for the *TripletLoss*.\n\n</p>\n</details>\n\n\n<details>\n<summary>Do I need to know other frameworks to use OML?</summary>\n<p>\n\nNo, you don't. OML is a framework-agnostic. Despite we use PyTorch Lightning as a loop\nrunner for the experiments, we also keep the possibility to run everything on pure PyTorch.\nThus, only the tiny part of OML is Lightning-specific and we keep this logic separately from\nother code (see `oml.lightning`). Even when you use Lightning, you don't need to know it, since\nwe provide ready to use [Config API](https://github.com/OML-Team/open-metric-learning/blob/main/examples/).\n\nThe possibility of using pure PyTorch and modular structure of the code leaves a room for utilizing\nOML with your favourite framework after the implementation of the necessary wrappers.\n\n</p>\n</details>\n\n\n<details>\n<summary>Can I use OML without any knowledge in DataScience?</summary>\n<p>\n\nYes. To run the experiment with [Config API](https://github.com/OML-Team/open-metric-learning/blob/main/examples/)\nyou only need to write a converter\nto our format (it means preparing the\n`.csv` table with 5 predefined columns).\nThat's it!\n\nProbably we already have a suitable pre-trained model for your domain\nin our *Models Zoo*. In this case, you don't even need to train it.\n</p>\n</details>\n\n## Documentation\n\nDocumentation is available via the [link](https://open-metric-learning.readthedocs.io/en/latest/index.html).\n\n## Installation\n\nOML is available in PyPI:\n\n```shell\npip install -U open-metric-learning\n```\n\nYou can also pull the prepared image from DockerHub...\n\n```shell\ndocker pull omlteam/oml:gpu\ndocker pull omlteam/oml:cpu\n```\n\n...or build one by your own\n\n```shell\nmake docker_build RUNTIME=cpu\nmake docker_build RUNTIME=gpu\n```\n\n## Get started using Config API\n\nUsing configs is the best option if your dataset and pipeline are standard enough or if you are not\nexperienced in Machine Learning or Python. You can find more details in the\n[examples](https://github.com/OML-Team/open-metric-learning/blob/main/examples/).\n\n## Get started using Python\n\nThe most flexible, but knowledge-requiring approach.\nYou are not limited by our project structure and you can use only that part of the functionality which you need.\nYou can start with fully working code snippets below that train and validate the model\non a tiny dataset of\n[figures](https://drive.google.com/drive/folders/1plPnwyIkzg51-mLUXWTjREHgc1kgGrF4?usp=sharing).\nㅤ\n\n**Feature extractor**\n\n<details>\n<summary>Training</summary>\n<p>\n\n[comment]:vanilla-train-start\n```python\nimport torch\nfrom tqdm import tqdm\n\nfrom oml.datasets.base import DatasetWithLabels\nfrom oml.losses.triplet import TripletLossWithMiner\nfrom oml.miners.inbatch_all_tri import AllTripletsMiner\nfrom oml.models.vit.vit import ViTExtractor\nfrom oml.samplers.balance import BalanceSampler\nfrom oml.utils.download_mock_dataset import download_mock_dataset\n\ndataset_root = \"mock_dataset/\"\ndf_train, _ = download_mock_dataset(dataset_root)\n\nmodel = ViTExtractor(\"vits16_dino\", arch=\"vits16\", normalise_features=False).train()\noptimizer = torch.optim.SGD(model.parameters(), lr=1e-6)\n\ntrain_dataset = DatasetWithLabels(df_train, dataset_root=dataset_root)\ncriterion = TripletLossWithMiner(margin=0.1, miner=AllTripletsMiner())\nsampler = BalanceSampler(train_dataset.get_labels(), n_labels=2, n_instances=2)\ntrain_loader = torch.utils.data.DataLoader(train_dataset, batch_sampler=sampler)\n\nfor batch in tqdm(train_loader):\n    embeddings = model(batch[\"input_tensors\"])\n    loss = criterion(embeddings, batch[\"labels\"])\n    loss.backward()\n    optimizer.step()\n    optimizer.zero_grad()\n```\n[comment]:vanilla-train-end\n</p>\n</details>\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1kntDAIdIZ9L40jcndguLAb-XqmCFOgS5?usp=sharing)\n\n<details>\n<summary>Validation</summary>\n<p>\n\n[comment]:vanilla-validation-start\n```python\nimport torch\nfrom tqdm import tqdm\n\nfrom oml.datasets.base import DatasetQueryGallery\nfrom oml.metrics.embeddings import EmbeddingMetrics\nfrom oml.models.vit.vit import ViTExtractor\nfrom oml.utils.download_mock_dataset import download_mock_dataset\n\ndataset_root =  \"mock_dataset/\"\n_, df_val = download_mock_dataset(dataset_root)\n\nmodel = ViTExtractor(\"vits16_dino\", arch=\"vits16\", normalise_features=False).eval()\n\nval_dataset = DatasetQueryGallery(df_val, dataset_root=dataset_root)\n\nval_loader = torch.utils.data.DataLoader(val_dataset, batch_size=4)\ncalculator = EmbeddingMetrics()\ncalculator.setup(num_samples=len(val_dataset))\n\nwith torch.no_grad():\n    for batch in tqdm(val_loader):\n        batch[\"embeddings\"] = model(batch[\"input_tensors\"])\n        calculator.update_data(batch)\n\nmetrics = calculator.compute_metrics()\n```\n[comment]:vanilla-validation-end\n</p>\n</details>\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1O2o3k8I8jN5hRin3dKnAS3WsgG04tmIT?usp=sharing)\n\n<details>\n<summary>Training + Validation [Lightning]</summary>\n<p>\n\n[comment]:lightning-start\n```python\nimport pytorch_lightning as pl\nimport torch\n\nfrom oml.datasets.base import DatasetQueryGallery, DatasetWithLabels\nfrom oml.lightning.modules.retrieval import RetrievalModule\nfrom oml.lightning.callbacks.metric import MetricValCallback\nfrom oml.losses.triplet import TripletLossWithMiner\nfrom oml.metrics.embeddings import EmbeddingMetrics\nfrom oml.miners.inbatch_all_tri import AllTripletsMiner\nfrom oml.models.vit.vit import ViTExtractor\nfrom oml.samplers.balance import BalanceSampler\nfrom oml.utils.download_mock_dataset import download_mock_dataset\n\ndataset_root =  \"mock_dataset/\"\ndf_train, df_val = download_mock_dataset(dataset_root)\n\n# model\nmodel = ViTExtractor(\"vits16_dino\", arch=\"vits16\", normalise_features=False)\n\n# train\noptimizer = torch.optim.SGD(model.parameters(), lr=1e-6)\ntrain_dataset = DatasetWithLabels(df_train, dataset_root=dataset_root)\ncriterion = TripletLossWithMiner(margin=0.1, miner=AllTripletsMiner())\nbatch_sampler = BalanceSampler(train_dataset.get_labels(), n_labels=2, n_instances=3)\ntrain_loader = torch.utils.data.DataLoader(train_dataset, batch_sampler=batch_sampler)\n\n# val\nval_dataset = DatasetQueryGallery(df_val, dataset_root=dataset_root)\nval_loader = torch.utils.data.DataLoader(val_dataset, batch_size=4)\nmetric_callback = MetricValCallback(metric=EmbeddingMetrics())\n\n# run\npl_model = RetrievalModule(model, criterion, optimizer)\ntrainer = pl.Trainer(max_epochs=1, callbacks=[metric_callback], num_sanity_val_steps=0)\ntrainer.fit(pl_model, train_dataloaders=train_loader, val_dataloaders=val_loader)\n```\n[comment]:lightning-end\n</p>\n</details>\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1bVUgdBGWvQgCkba2YtaIRVlUQUz7Q60Z?usp=share_link)\n\n<details>\n<summary>Training + Validation [Lightning Distributed]</summary>\n<p>\n\n[comment]:lightning-ddp-start\n```python\nimport pytorch_lightning as pl\nimport torch\n\nfrom oml.datasets.base import DatasetQueryGallery, DatasetWithLabels\nfrom oml.lightning.modules.retrieval import RetrievalModuleDDP\nfrom oml.lightning.callbacks.metric import MetricValCallbackDDP\nfrom oml.losses.triplet import TripletLossWithMiner\nfrom oml.metrics.embeddings import EmbeddingMetricsDDP\nfrom oml.miners.inbatch_all_tri import AllTripletsMiner\nfrom oml.models.vit.vit import ViTExtractor\nfrom oml.samplers.balance import BalanceSampler\nfrom oml.utils.download_mock_dataset import download_mock_dataset\n\ndataset_root = \"mock_dataset/\"\ndf_train, df_val = download_mock_dataset(dataset_root)\n\n# model\nmodel = ViTExtractor(\"vits16_dino\", arch=\"vits16\", normalise_features=False)\n\n# train\noptimizer = torch.optim.SGD(model.parameters(), lr=1e-6)\ntrain_dataset = DatasetWithLabels(df_train, dataset_root=dataset_root)\ncriterion = TripletLossWithMiner(margin=0.1, miner=AllTripletsMiner())\nbatch_sampler = BalanceSampler(train_dataset.get_labels(), n_labels=2, n_instances=3)\ntrain_loader = torch.utils.data.DataLoader(train_dataset, batch_sampler=batch_sampler)\n\n# val\nval_dataset = DatasetQueryGallery(df_val, dataset_root=dataset_root)\nval_loader = torch.utils.data.DataLoader(val_dataset, batch_size=4)\nmetric_callback = MetricValCallbackDDP(metric=EmbeddingMetricsDDP())  # DDP specific\n\n# run\npl_model = RetrievalModuleDDP(model=model, criterion=criterion, optimizer=optimizer,\n                              loaders_train=train_loader, loaders_val=val_loader  # DDP specific\n                              )\n\nddp_args = {\"accelerator\": \"auto\", \"devices\": 2, \"strategy\": pl.plugins.DDPPlugin(), \"replace_sampler_ddp\": False} # DDP specific\ntrainer = pl.Trainer(max_epochs=1, callbacks=[metric_callback], num_sanity_val_steps=0, **ddp_args)\ntrainer.fit(pl_model)  # we don't pass loaders to .fit() in DDP\n```\n[comment]:lightning-ddp-end\n</p>\n</details>\n\n*Colab: there is no Colab link since it provides only single-GPU machines.*\nㅤ\n\n<details>\n<summary>Using a trained model for retrieval</summary>\n<p>\n\n[comment]:usage-retrieval-start\n```python\nimport torch\n\nfrom oml.const import MOCK_DATASET_PATH\nfrom oml.inference.flat import inference_on_images\nfrom oml.models import ViTExtractor\nfrom oml.registry.transforms import get_transforms_for_pretrained\nfrom oml.utils.download_mock_dataset import download_mock_dataset\nfrom oml.utils.misc_torch import pairwise_dist\n\n_, df_val = download_mock_dataset(MOCK_DATASET_PATH)\ndf_val[\"path\"] = df_val[\"path\"].apply(lambda x: MOCK_DATASET_PATH / x)\nqueries = df_val[df_val[\"is_query\"]][\"path\"].tolist()\ngalleries = df_val[df_val[\"is_gallery\"]][\"path\"].tolist()\n\nmodel = ViTExtractor.from_pretrained(\"vits16_dino\")\ntransform, _ = get_transforms_for_pretrained(\"vits16_dino\")\n\nargs = {\"num_workers\": 0, \"batch_size\": 8}\nfeatures_queries = inference_on_images(model, paths=queries, transform=transform, **args)\nfeatures_galleries = inference_on_images(model, paths=galleries, transform=transform, **args)\n\n# Now we can explicitly build pairwise matrix of distances or save you RAM via using kNN\nuse_knn = True\ntop_k = 3\n\nif use_knn:\n    from sklearn.neighbors import NearestNeighbors\n    knn = NearestNeighbors(algorithm=\"auto\", p=2)\n    knn.fit(features_galleries)\n    dists, ii_closest = knn.kneighbors(features_queries, n_neighbors=top_k, return_distance=True)\n\nelse:\n    dist_mat = pairwise_dist(x1=features_queries, x2=features_galleries)\n    dists, ii_closest = torch.topk(dist_mat, dim=1, k=top_k, largest=False)\n\nprint(f\"Top {top_k} items closest to queries are:\\n {ii_closest}\")\n```\n[comment]:usage-retrieval-end\n</p>\n</details>\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1S2nK6KaReDm-RjjdojdId6CakhhSyvfA?usp=share_link)\nㅤ\n\n**Postprocessing**\n\nYou can also boost retrieval accuracy of your features extractor by adding a postprocessor (we recommend\nto check the examples above first).\nIn the example below we train a siamese model to re-rank top retrieval outputs of the original model\nby performing inference on pairs ``(query, output_i)`` where ``i=1..top_n``.\n\nFor the Config-API analogue of the pipeline below, please, check the\n[config](https://github.com/OML-Team/open-metric-learning/blob/main/examples/sop/configs_experimental/train_postprocessor_sop.yaml).\nThe documentation for related classes is available via the [link](https://open-metric-learning.readthedocs.io/en/latest/contents/postprocessing.html).\n*Note, this functionality is new and a work still in progress.*\n\n<details>\n<summary>Postprocessor: Training + Validation</summary>\n<p>\n\n[comment]:postprocessor-start\n```python\nfrom pprint import pprint\n\nimport torch\nfrom torch.nn import BCEWithLogitsLoss\nfrom torch.utils.data import DataLoader\n\nfrom oml.datasets.base import DatasetWithLabels, DatasetQueryGallery\nfrom oml.inference.flat import inference_on_dataframe\nfrom oml.metrics.embeddings import EmbeddingMetrics\nfrom oml.miners.pairs import PairsMiner\nfrom oml.models.meta.siamese import ConcatSiamese\nfrom oml.models.vit.vit import ViTExtractor\nfrom oml.retrieval.postprocessors.pairwise import PairwiseImagesPostprocessor\nfrom oml.samplers.balance import BalanceSampler\nfrom oml.transforms.images.torchvision import get_normalisation_resize_torch\nfrom oml.utils.download_mock_dataset import download_mock_dataset\n\n# Let's start with saving embeddings of a pretrained extractor for which we want to build a postprocessor\ndataset_root = \"mock_dataset/\"\ndownload_mock_dataset(dataset_root)\n\nextractor = ViTExtractor(\"vits16_dino\", arch=\"vits16\", normalise_features=False)\ntransform = get_normalisation_resize_torch(im_size=64)\n\nembeddings_train, embeddings_val, df_train, df_val = \\\n    inference_on_dataframe(dataset_root, \"df.csv\", extractor=extractor, transforms_extraction=transform)\n\n# We are building Siamese model on top of existing weights and train it to recognize positive/negative pairs\nsiamese = ConcatSiamese(extractor=extractor, mlp_hidden_dims=[100])\noptimizer = torch.optim.SGD(siamese.parameters(), lr=1e-6)\nminer = PairsMiner(hard_mining=True)\ncriterion = BCEWithLogitsLoss()\n\ntrain_dataset = DatasetWithLabels(df=df_train, transform=transform, extra_data={\"embeddings\": embeddings_train})\nbatch_sampler = BalanceSampler(train_dataset.get_labels(), n_labels=2, n_instances=2)\ntrain_loader = DataLoader(train_dataset, batch_sampler=batch_sampler)\n\nfor batch in train_loader:\n    # We sample pairs on which the original model struggled most\n    ids1, ids2, is_negative_pair = miner.sample(features=batch[\"embeddings\"], labels=batch[\"labels\"])\n    probs = siamese(x1=batch[\"input_tensors\"][ids1], x2=batch[\"input_tensors\"][ids2])\n    loss = criterion(probs, is_negative_pair.float())\n\n    loss.backward()\n    optimizer.step()\n    optimizer.zero_grad()\n\n# Siamese re-ranks top-n retrieval outputs of the original model performing inference on pairs (query, output_i)\nval_dataset = DatasetQueryGallery(df=df_val, extra_data={\"embeddings\": embeddings_val}, transform=transform)\nvalid_loader = DataLoader(val_dataset, batch_size=4, shuffle=False)\n\npostprocessor = PairwiseImagesPostprocessor(top_n=3, pairwise_model=siamese, transforms=transform)\ncalculator = EmbeddingMetrics(postprocessor=postprocessor)\ncalculator.setup(num_samples=len(val_dataset))\n\nfor batch in valid_loader:\n    calculator.update_data(data_dict=batch)\n\npprint(calculator.compute_metrics())  # Pairwise inference happens here\n```\n[comment]:postprocessor-end\n</p>\n</details>\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1LBmusxwo8dPqWznmK627GNMzeDVdjMwv?usp=sharing)\n\n## Usage with PyTorch Metric Learning\n\nYou can easily access a lot of content from [PyTorch Metric Learning](https://github.com/KevinMusgrave/pytorch-metric-learning)\nwith our library. You can see that the examples below are different from the basic ones only in a few lines of code:\n\n<details>\n<summary>Training with loss from PML</summary>\n<p>\n\n```python\nimport torch\nfrom tqdm import tqdm\n\nfrom oml.datasets.base import DatasetWithLabels\nfrom oml.losses.triplet import TripletLossWithMiner\nfrom oml.miners.inbatch_all_tri import AllTripletsMiner\nfrom oml.models.vit.vit import ViTExtractor\nfrom oml.samplers.balance import BalanceSampler\nfrom oml.utils.download_mock_dataset import download_mock_dataset\n\nfrom pytorch_metric_learning import losses, distances, reducers, miners\n\ndataset_root = \"mock_dataset/\"\ndf_train, _ = download_mock_dataset(dataset_root)\n\nmodel = ViTExtractor(\"vits16_dino\", arch=\"vits16\", normalise_features=False).train()\noptimizer = torch.optim.SGD(model.parameters(), lr=1e-6)\n\ntrain_dataset = DatasetWithLabels(df_train, dataset_root=dataset_root)\n\n# PML specific\n# criterion = losses.TripletMarginLoss(margin=0.2, triplets_per_anchor=\"all\")\ncriterion = losses.ArcFaceLoss(num_classes=df_train[\"label\"].nunique(), embedding_size=model.feat_dim)  # for classification-like losses\n\nsampler = BalanceSampler(train_dataset.get_labels(), n_labels=2, n_instances=2)\ntrain_loader = torch.utils.data.DataLoader(train_dataset, batch_sampler=sampler)\n\nfor batch in tqdm(train_loader):\n    embeddings = model(batch[\"input_tensors\"])\n    loss = criterion(embeddings, batch[\"labels\"])\n    loss.backward()\n    optimizer.step()\n    optimizer.zero_grad()\n```\n\n</p>\n</details>\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1m66v1qhCyAUciEcXsJlIJtjF6nz6ZLI7?usp=sharing)\n\n<details>\n<summary>Training with distance, reducer, miner and loss from PML</summary>\n<p>\n\n```python\nimport torch\nfrom tqdm import tqdm\n\nfrom oml.datasets.base import DatasetWithLabels\nfrom oml.losses.triplet import TripletLossWithMiner\nfrom oml.miners.inbatch_all_tri import AllTripletsMiner\nfrom oml.models.vit.vit import ViTExtractor\nfrom oml.samplers.balance import BalanceSampler\nfrom oml.utils.download_mock_dataset import download_mock_dataset\n\nfrom pytorch_metric_learning import losses, distances, reducers, miners\n\ndataset_root = \"mock_dataset/\"\ndf_train, _ = download_mock_dataset(dataset_root)\n\nmodel = ViTExtractor(\"vits16_dino\", arch=\"vits16\", normalise_features=False).train()\noptimizer = torch.optim.SGD(model.parameters(), lr=1e-6)\n\ntrain_dataset = DatasetWithLabels(df_train, dataset_root=dataset_root)\n\n# PML specific\ndistance = distances.LpDistance(p=2)\nreducer = reducers.ThresholdReducer(low=0)\ncriterion = losses.TripletMarginLoss()\nminer = miners.TripletMarginMiner(margin=0.2, distance=distance, type_of_triplets=\"all\")\n\nsampler = BalanceSampler(train_dataset.get_labels(), n_labels=2, n_instances=2)\ntrain_loader = torch.utils.data.DataLoader(train_dataset, batch_sampler=sampler)\n\nfor batch in tqdm(train_loader):\n    embeddings = model(batch[\"input_tensors\"])\n    loss = criterion(embeddings, batch[\"labels\"], miner(embeddings, batch[\"labels\"]))  # PML specific\n    loss.backward()\n    optimizer.step()\n    optimizer.zero_grad()\n```\n\n</p>\n</details>\n\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/drive/1MbVmSnQvO16eVgAqy1kcOd1XysgaYVBo?usp=sharing)\n\nNote, during the validation process OpenMetricLearning computes *L2* distances. Thus, when choosing a distance from PML,\nwe recommend you to pick `distances.LpDistance(p=2)`.\n\nTo use content from PyTorch Metric Learning with our Config API just follow the standard\n[tutorial](https://open-metric-learning.readthedocs.io/en/latest/examples/config.html#how-to-use-my-own-implementation-of-loss-model-augmentations-etc)\nof adding custom loss.\n\n## Zoo\n\nBelow are the models trained with OML on 4 public datasets.\nFor more details about the training process and configs, please, visit *examples* submodule and it's\n[Readme](https://github.com/OML-Team/open-metric-learning/blob/main/examples/).\nAll metrics below were obtained on the images with the sizes of **224 x 224**:\n\n|                      model                      | cmc1  |         dataset          |                                              weights                                              |                                          experiment                                          |\n|:-----------------------------------------------:|:-----:|:------------------------:|:-------------------------------------------------------------------------------------------------:|:--------------------------------------------------------------------------------------------:|\n| `ViTExtractor.from_pretrained(\"vits16_inshop\")` | 0.921 |    DeepFashion Inshop    |    [link](https://drive.google.com/file/d/1niX-TC8cj6j369t7iU2baHQSVN3MVJbW/view?usp=sharing)     | [link](https://github.com/OML-Team/open-metric-learning/tree/main/examples/extractor_inshop) |\n|  `ViTExtractor.from_pretrained(\"vits16_sop\")`   | 0.866 | Stanford Online Products |   [link](https://drive.google.com/file/d/1zuGRHvF2KHd59aw7i7367OH_tQNOGz7A/view?usp=sharing)      |  [link](https://github.com/OML-Team/open-metric-learning/tree/main/examples/extractor_sop)   |\n| `ViTExtractor.from_pretrained(\"vits16_cars\")`   | 0.907 |         CARS 196         |   [link](https://drive.google.com/drive/folders/17a4_fg94dox2sfkXmw-KCtiLBlx-ut-1?usp=sharing)    |  [link](https://github.com/OML-Team/open-metric-learning/tree/main/examples/extractor_cars)  |\n|  `ViTExtractor.from_pretrained(\"vits16_cub\")`   | 0.837 |       CUB 200 2011       |   [link](https://drive.google.com/drive/folders/1TPCN-eZFLqoq4JBgnIfliJoEK48x9ozb?usp=sharing)    |  [link](https://github.com/OML-Team/open-metric-learning/tree/main/examples/extractor_cub)   |\n\nWe also provide an integration with the models pretrained by other researchers.\nAll metrics below were obtained on the images with the sizes of **224 x 224**:\n\n|                            model                            | Stanford Online Products | DeepFashion InShop | CUB 200 2011 | CARS 196 |\n|:-----------------------------------------------------------:|:------------------------:|:------------------:|:------------:|:--------:|\n|    `ViTCLIPExtractor.from_pretrained(\"sber_vitb32_224\")`    |          0.547           |       0.514        |    0.448     |  0.618   |\n|    `ViTCLIPExtractor.from_pretrained(\"sber_vitb16_224\")`    |          0.565           |       0.565        |    0.524     |  0.648   |\n|    `ViTCLIPExtractor.from_pretrained(\"sber_vitl14_224\")`    |          0.512           |       0.555        |    0.606     |  0.707   |\n|   `ViTCLIPExtractor.from_pretrained(\"openai_vitb32_224\")`   |          0.612           |       0.491        |    0.560     |  0.693   |\n|   `ViTCLIPExtractor.from_pretrained(\"openai_vitb16_224\")`   |          0.648           |       0.606        |    0.665     |  0.767   |\n|   `ViTCLIPExtractor.from_pretrained(\"openai_vitl14_224\")`   |          0.670           |       0.675        |    0.745     |  0.844   |\n|        `ViTExtractor.from_pretrained(\"vits16_dino\")`        |          0.648           |       0.509        |    0.627     |  0.265   |\n|        `ViTExtractor.from_pretrained(\"vits8_dino\")`         |          0.651           |       0.524        |    0.661     |  0.315   |\n|        `ViTExtractor.from_pretrained(\"vitb16_dino\")`        |          0.658           |       0.514        |    0.541     |  0.288   |\n|        `ViTExtractor.from_pretrained(\"vitb8_dino\")`         |          0.689           |       0.599        |    0.506     |  0.313   |\n|    `ResnetExtractor.from_pretrained(\"resnet50_moco_v2\")`    |          0.493           |       0.267        |    0.264     |  0.149   |\n| `ResnetExtractor.from_pretrained(\"resnet50_imagenet1k_v1\")` |          0.515           |       0.284        |    0.455     |  0.247   |\n\n### How to use models from Zoo?\n\n[comment]:zoo-start\n```python\nfrom oml.const import CKPT_SAVE_ROOT as CKPT_DIR, MOCK_DATASET_PATH as DATA_DIR\nfrom oml.models import ViTExtractor\nfrom oml.registry.transforms import get_transforms_for_pretrained\n\nmodel = ViTExtractor.from_pretrained(\"vits16_dino\")\ntransforms, im_reader = get_transforms_for_pretrained(\"vits16_dino\")\n\nimg = im_reader(DATA_DIR / \"images\" / \"circle_1.jpg\")  # put path to your image here\nimg_tensor = transforms(img)\n# img_tensor = transforms(image=img)[\"image\"]  # for transforms from Albumentations\n\nfeatures = model(img_tensor.unsqueeze(0))\n\n# Check other available models:\nprint(list(ViTExtractor.pretrained_models.keys()))\n\n# Load checkpoint saved on a disk:\nmodel_ = ViTExtractor(weights=CKPT_DIR / \"vits16_dino.ckpt\", arch=\"vits16\", normalise_features=False)\n```\n[comment]:zoo-end\n\n## Contributing guide\n\nWe welcome new contributors! Please, see our:\n* [Contributing guide](https://open-metric-learning.readthedocs.io/en/latest/from_readme/contributing.html)\n* [Kanban board](https://github.com/OML-Team/open-metric-learning/projects/1)\n\n## Extra materials\n\nYou can also read some extra materials related to OML:\n\n* Theory and practice of metric learning with the usage of OML.\n[Post in English on Medium](https://medium.com/@AlekseiShabanov/practical-metric-learning-b0410cda2201) |\n[Post in Russian on Habr](https://habr.com/ru/company/ods/blog/695380/) |\n[Post in Chinese on CSDN](https://blog.csdn.net/fermion0217/article/details/127932087), translated by Chia-Chen Chang.\n\n* The report for Berlin-based meetup: \"Computer Vision in production\". November, 2022.\n[Link](https://drive.google.com/drive/folders/1uHmLU8vMrMVMFodt36u0uXAgYjG_3D30?usp=share_link)\n\n## Acknowledgments\n\n<a href=\"https://github.com/catalyst-team/catalyst\" target=\"_blank\"><img src=\"https://raw.githubusercontent.com/catalyst-team/catalyst-pics/master/pics/catalyst_logo.png\" width=\"100\"/></a>\n\nThe project was started in 2020 as a module for [Catalyst](https://github.com/catalyst-team/catalyst) library.\nI want to thank people who worked with me on that module:\n[Julia Shenshina](https://github.com/julia-shenshina),\n[Nikita Balagansky](https://github.com/elephantmipt),\n[Sergey Kolesnikov](https://github.com/Scitator)\nand others.\n\nI would like to thank people who continue working on this pipeline when it became a separe project:\n[Julia Shenshina](https://github.com/julia-shenshina),\n[Misha Kindulov](https://github.com/b0nce),\n[Aleksei Tarasov](https://github.com/DaloroAT) and\n[Verkhovtsev Leonid](https://github.com/leoromanovich).\n\n<a href=\"https://www.newyorker.de/\" target=\"_blank\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d8/New_Yorker.svg/1280px-New_Yorker.svg.png\" width=\"100\"/></a>\n\nI also want to thank NewYorker, since the part of functionality was developed (and used) by its computer vision team led by me.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/OML-Team/open-metric-learning",
    "keywords": "data-science,computer-vision,deep-learning,pytorch,metric-learning,representation-learning,pytorch-lightning",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "open-metric-learning",
    "package_url": "https://pypi.org/project/open-metric-learning/",
    "platform": null,
    "project_url": "https://pypi.org/project/open-metric-learning/",
    "project_urls": {
      "Bug Tracker": "https://github.com/OML-Team/open-metric-learning/issues",
      "Homepage": "https://github.com/OML-Team/open-metric-learning"
    },
    "release_url": "https://pypi.org/project/open-metric-learning/0.3.14/",
    "requires_dist": [
      "numpy (<1.23.1,>=1.17.2)",
      "torch (<=1.13.0,>=1.10)",
      "torchvision (<=0.14.0,>=0.11)",
      "pytorch-lightning (<1.7.0,>=1.5.9)",
      "albumentations (>=1.0)",
      "opencv-python (>=4.1.1)",
      "pillow (>=8.2)",
      "pandas (<=1.5.2,>=1.0)",
      "matplotlib (<3.6.2,>3.1)",
      "jupyter (>=1.0.0)",
      "grad-cam (>=1.4.6)",
      "omegaconf (<2.3.0,>=2.0.5)",
      "hydra-core (<1.3.0,>=1.2.0)",
      "neptune-client (<1.0.0,>=0.14.2)",
      "pytest (>=7.2)",
      "python-dotenv (>=0.17.0)",
      "validators (>=0.18.0)",
      "gdown (>=4.0)"
    ],
    "requires_python": ">=3.7,<4.0",
    "summary": "OML is a PyTorch-based framework to train and validate the models producing high-quality embeddings.",
    "version": "0.3.14",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17377996,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7384277b29ea4c66440fa562bbcf70c93400d2cacae1398d785610d58319487",
          "md5": "d192310b259151e8170cf7350e241931",
          "sha256": "299c528383a9deaabd9e42271a899f0e5c2897e2e0262e2265fb83c9f6c5ab8e"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d192310b259151e8170cf7350e241931",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 150151,
        "upload_time": "2022-10-06T11:52:08",
        "upload_time_iso_8601": "2022-10-06T11:52:08.194819Z",
        "url": "https://files.pythonhosted.org/packages/e7/38/4277b29ea4c66440fa562bbcf70c93400d2cacae1398d785610d58319487/open_metric_learning-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7eb8a391381db4d61b22061bd4bb351c2b34daf30530d9250bb70e5748bfd8f5",
          "md5": "dadc485cd27389c2b1c14d70fce574ef",
          "sha256": "89b7e8d00fa40b40c8ef7034253eb242738a9300ff425a6041011b64813fd8a7"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dadc485cd27389c2b1c14d70fce574ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 113474,
        "upload_time": "2022-10-06T11:52:09",
        "upload_time_iso_8601": "2022-10-06T11:52:09.639250Z",
        "url": "https://files.pythonhosted.org/packages/7e/b8/a391381db4d61b22061bd4bb351c2b34daf30530d9250bb70e5748bfd8f5/open-metric-learning-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa98e66fbf6a20a85f24e051b6df667ddcb115c960a716e11304bfebf314a7ae",
          "md5": "b76ffcc10e39b81dd3ab5edaa3f4aed2",
          "sha256": "fda1619b615e85b6f95a33578ae2b636d05075736bcb2c7afaa8e5e6e2f7f514"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b76ffcc10e39b81dd3ab5edaa3f4aed2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 154644,
        "upload_time": "2022-10-19T08:30:43",
        "upload_time_iso_8601": "2022-10-19T08:30:43.924563Z",
        "url": "https://files.pythonhosted.org/packages/fa/98/e66fbf6a20a85f24e051b6df667ddcb115c960a716e11304bfebf314a7ae/open_metric_learning-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "440b28ad5566e0684b9d8be3b823c2712ab36db93cf7265b3923439a51c03c99",
          "md5": "d1343dd419bb2c7c1af676fa0161fc37",
          "sha256": "f0ae2e47edebe56e6f8f8c71f52880130e09e3b172372539be4ce3650a80feb7"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d1343dd419bb2c7c1af676fa0161fc37",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 119138,
        "upload_time": "2022-10-19T08:30:46",
        "upload_time_iso_8601": "2022-10-19T08:30:46.023813Z",
        "url": "https://files.pythonhosted.org/packages/44/0b/28ad5566e0684b9d8be3b823c2712ab36db93cf7265b3923439a51c03c99/open-metric-learning-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7a026ba5ad137fe745856baad3e2c0d78db77e3519d411853c9df940103dace",
          "md5": "6f428e396f1bde807af4c52d1ddec296",
          "sha256": "db312cb1971dbe2d2822900c02381a1c0532526a09b0b71ec94ef15080893a22"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f428e396f1bde807af4c52d1ddec296",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 154278,
        "upload_time": "2023-01-31T13:52:52",
        "upload_time_iso_8601": "2023-01-31T13:52:52.481112Z",
        "url": "https://files.pythonhosted.org/packages/a7/a0/26ba5ad137fe745856baad3e2c0d78db77e3519d411853c9df940103dace/open_metric_learning-0.3.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ed58167f1f64ae8af4089722b91c0a080c7f2da8c0b7589396b719c0bcf7681",
          "md5": "e7cabc32fe97aa9424a5f827cbedf5b9",
          "sha256": "948259de5258fa9a0c4d5beb28d782a232997549081065a6a7eb2378f15f4887"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.10.tar.gz",
        "has_sig": false,
        "md5_digest": "e7cabc32fe97aa9424a5f827cbedf5b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 128777,
        "upload_time": "2023-01-31T13:52:54",
        "upload_time_iso_8601": "2023-01-31T13:52:54.031949Z",
        "url": "https://files.pythonhosted.org/packages/8e/d5/8167f1f64ae8af4089722b91c0a080c7f2da8c0b7589396b719c0bcf7681/open-metric-learning-0.3.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5649bca22c4df55aa0f09dc5b13246bf91ba3164d85b8817e6c38b6f920e742e",
          "md5": "c4eae7468e9a6cbd09302e69c7687e94",
          "sha256": "2ec2f715ba76eb700f57dc40903088d7e26afc23498260035b7dc5ddc6a88c33"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4eae7468e9a6cbd09302e69c7687e94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 154963,
        "upload_time": "2023-02-23T17:01:53",
        "upload_time_iso_8601": "2023-02-23T17:01:53.063459Z",
        "url": "https://files.pythonhosted.org/packages/56/49/bca22c4df55aa0f09dc5b13246bf91ba3164d85b8817e6c38b6f920e742e/open_metric_learning-0.3.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27ce79c0aa25b736740f3b365bd6afa0b5132aabe2c9b1e084cc4c4b29af8ab5",
          "md5": "b25a1857f7b9c8030a34fad389208eb2",
          "sha256": "cdb96dd49d8958ca5c9e92340bbb221dbf96a3a5a4d5d5840862417e2ebf02a9"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.11.tar.gz",
        "has_sig": false,
        "md5_digest": "b25a1857f7b9c8030a34fad389208eb2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 130641,
        "upload_time": "2023-02-23T17:01:54",
        "upload_time_iso_8601": "2023-02-23T17:01:54.477444Z",
        "url": "https://files.pythonhosted.org/packages/27/ce/79c0aa25b736740f3b365bd6afa0b5132aabe2c9b1e084cc4c4b29af8ab5/open-metric-learning-0.3.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d575f4c3532116d0e62a5d2b1db3fea67a5aca55fe9a1b0e35c1253447f8dd5b",
          "md5": "7701ad0a4951e2744beacb8633ae66c6",
          "sha256": "4f3f5f240f32ec6b7c16b9bc8b067d7dc66e976d8e47d341839d204070221c14"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7701ad0a4951e2744beacb8633ae66c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 156347,
        "upload_time": "2023-03-14T16:02:12",
        "upload_time_iso_8601": "2023-03-14T16:02:12.050788Z",
        "url": "https://files.pythonhosted.org/packages/d5/75/f4c3532116d0e62a5d2b1db3fea67a5aca55fe9a1b0e35c1253447f8dd5b/open_metric_learning-0.3.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a04f202d69e02db1391726ebba55775c01f243a622d898c6dfa7e74e096fa74f",
          "md5": "61e4288218ce352e8383f7ba99430f09",
          "sha256": "7047bba751c10715749f17fed60c59f1eee75a08756c50c3a7cba3ab5a140660"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.12.tar.gz",
        "has_sig": false,
        "md5_digest": "61e4288218ce352e8383f7ba99430f09",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 132083,
        "upload_time": "2023-03-14T16:02:13",
        "upload_time_iso_8601": "2023-03-14T16:02:13.754366Z",
        "url": "https://files.pythonhosted.org/packages/a0/4f/202d69e02db1391726ebba55775c01f243a622d898c6dfa7e74e096fa74f/open-metric-learning-0.3.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49f71f1a9f05cb4e01fb6f687efdca70eeb4ad3a60ce48b7c2703c2d838ddd4f",
          "md5": "b744052fe3923fbf937f3633d34446c4",
          "sha256": "7ce370c0f8922003d63a75e036120245959381a1be8c2b5c64f9ca4738d54426"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b744052fe3923fbf937f3633d34446c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 156710,
        "upload_time": "2023-03-14T17:36:24",
        "upload_time_iso_8601": "2023-03-14T17:36:24.591783Z",
        "url": "https://files.pythonhosted.org/packages/49/f7/1f1a9f05cb4e01fb6f687efdca70eeb4ad3a60ce48b7c2703c2d838ddd4f/open_metric_learning-0.3.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8f729d0c7ec0cf8b106a1db761bd6f1194965241dc00b55a299821e464ea795",
          "md5": "2f74d418a83bde986581238e035caa7b",
          "sha256": "531dcd8eb159fbfda0d02d01b11279b04e95a6ac1520b5e9cd6a4f5ff1a9be3a"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.13.tar.gz",
        "has_sig": false,
        "md5_digest": "2f74d418a83bde986581238e035caa7b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 133123,
        "upload_time": "2023-03-14T17:36:26",
        "upload_time_iso_8601": "2023-03-14T17:36:26.131534Z",
        "url": "https://files.pythonhosted.org/packages/e8/f7/29d0c7ec0cf8b106a1db761bd6f1194965241dc00b55a299821e464ea795/open-metric-learning-0.3.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c9252e6c4c38122eb85b179666359ee730e0dea992e13d949ac28ff39c8d3666",
          "md5": "7bee45634090d881d97da94450177eff",
          "sha256": "4bef53b8e83f487ff88bb6ff5420d5ba26a671f43705411dd1dec0e2c732020f"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7bee45634090d881d97da94450177eff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 156702,
        "upload_time": "2023-03-21T11:17:17",
        "upload_time_iso_8601": "2023-03-21T11:17:17.688228Z",
        "url": "https://files.pythonhosted.org/packages/c9/25/2e6c4c38122eb85b179666359ee730e0dea992e13d949ac28ff39c8d3666/open_metric_learning-0.3.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7194f82d659f70e0313ef89f71558fd7016a138ff6b6651eb3c7c5411d365ea",
          "md5": "bb14b58f712886669755f65e7c8c6093",
          "sha256": "7984cb510675556a34301a8ea305d0fca72c8b31fd1f84c472daaed06c1f9fc5"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.14.tar.gz",
        "has_sig": false,
        "md5_digest": "bb14b58f712886669755f65e7c8c6093",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 133412,
        "upload_time": "2023-03-21T11:17:19",
        "upload_time_iso_8601": "2023-03-21T11:17:19.692003Z",
        "url": "https://files.pythonhosted.org/packages/b7/19/4f82d659f70e0313ef89f71558fd7016a138ff6b6651eb3c7c5411d365ea/open-metric-learning-0.3.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa822ce3fb6a0610489b547d194e8b6541b5ec0145c93511d7ad90424b2d6849",
          "md5": "c7063a82a1e0e75e02728a56a453de8a",
          "sha256": "d56001db765b56c0429d375e0a98201760009a2755ac841045b9510b6b6f18cb"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7063a82a1e0e75e02728a56a453de8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 154728,
        "upload_time": "2022-10-30T20:48:28",
        "upload_time_iso_8601": "2022-10-30T20:48:28.312431Z",
        "url": "https://files.pythonhosted.org/packages/fa/82/2ce3fb6a0610489b547d194e8b6541b5ec0145c93511d7ad90424b2d6849/open_metric_learning-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73b7b6f94d08b5831012bd1566951ef9401137eb7dadb25a9018f9ee486615f8",
          "md5": "de6aa121ffeb25431fcfb9558e203210",
          "sha256": "c15dea591824f6155a1eb85b1c58a6a9792059f9f2ac8989983ab45107da90cd"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "de6aa121ffeb25431fcfb9558e203210",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 119924,
        "upload_time": "2022-10-30T20:48:29",
        "upload_time_iso_8601": "2022-10-30T20:48:29.945281Z",
        "url": "https://files.pythonhosted.org/packages/73/b7/b6f94d08b5831012bd1566951ef9401137eb7dadb25a9018f9ee486615f8/open-metric-learning-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7a044f3745b477313b8c07d6df9fc189b32fa5b830282cf09b3b1bba8dc522e",
          "md5": "e0022968efebd95c247568be1306a6f7",
          "sha256": "a7be39872bff4ee55a6067c5e1c64d255c7fd3db9a96cbfd497fa819b29aa56c"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e0022968efebd95c247568be1306a6f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 158394,
        "upload_time": "2022-11-06T17:10:47",
        "upload_time_iso_8601": "2022-11-06T17:10:47.746805Z",
        "url": "https://files.pythonhosted.org/packages/c7/a0/44f3745b477313b8c07d6df9fc189b32fa5b830282cf09b3b1bba8dc522e/open_metric_learning-0.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a792735fdf2b248cb86683ef9dc2ca24596f17115285896c98f2cd2498608d6",
          "md5": "95e03ff2ee63a6e22d0b56dae56feb5b",
          "sha256": "ac96bbf6c1ff968896dec4a1dba9a4a5efd0f7c99d82373159c70a5ca06b01e7"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "95e03ff2ee63a6e22d0b56dae56feb5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 122587,
        "upload_time": "2022-11-06T17:10:49",
        "upload_time_iso_8601": "2022-11-06T17:10:49.792459Z",
        "url": "https://files.pythonhosted.org/packages/6a/79/2735fdf2b248cb86683ef9dc2ca24596f17115285896c98f2cd2498608d6/open-metric-learning-0.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4b0ddfd62f10174d4d4a2a78c122965867737b87d3aff08617b5998687d289b",
          "md5": "413697ab9d5bbb458522f0d8fc1701c0",
          "sha256": "7be53060d6062729a7d5a447739629c5d1520adbd6342d2b33dc5bd4d9003c4f"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "413697ab9d5bbb458522f0d8fc1701c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 167785,
        "upload_time": "2022-11-21T19:13:34",
        "upload_time_iso_8601": "2022-11-21T19:13:34.973221Z",
        "url": "https://files.pythonhosted.org/packages/f4/b0/ddfd62f10174d4d4a2a78c122965867737b87d3aff08617b5998687d289b/open_metric_learning-0.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a7c96fd901f43b3b0ec41989335d66d78dd4e75aeabc1cbf50a910450248fa6",
          "md5": "f3a779671f5123969b6975d05870c9c2",
          "sha256": "11fef7470a877184c1a7df78d609e0db5cb58982b0bf3f3403f0092a7cb0712f"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f3a779671f5123969b6975d05870c9c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 138110,
        "upload_time": "2022-11-21T19:13:36",
        "upload_time_iso_8601": "2022-11-21T19:13:36.679144Z",
        "url": "https://files.pythonhosted.org/packages/8a/7c/96fd901f43b3b0ec41989335d66d78dd4e75aeabc1cbf50a910450248fa6/open-metric-learning-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23e0c51ee8dc271b283e5df1009a6fdcd4fedd8382b1bd0284f777ce1c8f8727",
          "md5": "4d3fe1b37ee6348e2a5a7ff898279454",
          "sha256": "93283adfd4e5c4510f4db5a9beb0b47a24d657f2c591de464495d3a402bd228a"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d3fe1b37ee6348e2a5a7ff898279454",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 178877,
        "upload_time": "2022-12-03T00:03:55",
        "upload_time_iso_8601": "2022-12-03T00:03:55.614403Z",
        "url": "https://files.pythonhosted.org/packages/23/e0/c51ee8dc271b283e5df1009a6fdcd4fedd8382b1bd0284f777ce1c8f8727/open_metric_learning-0.3.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7670c71309d21e8bf292e81c365c6407f2531a62f5cb987b0ec67817be4f9b6",
          "md5": "6fd5139ee3956f8594e11a56603613f5",
          "sha256": "6a4421514095280f7716c7c8f47213fc299b8b0d0ae443ed19becb80cedb3991"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "6fd5139ee3956f8594e11a56603613f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 144670,
        "upload_time": "2022-12-03T00:03:57",
        "upload_time_iso_8601": "2022-12-03T00:03:57.420620Z",
        "url": "https://files.pythonhosted.org/packages/e7/67/0c71309d21e8bf292e81c365c6407f2531a62f5cb987b0ec67817be4f9b6/open-metric-learning-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2349d754d89221009ed28cf81aa404592cc2524b7c414ec6a861ad47a3ba003",
          "md5": "d25b99345c9f7418bb06e5bc72b477c3",
          "sha256": "1e0976678216a02d7469381312719c143dab553d65278591a099199c708b270a"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d25b99345c9f7418bb06e5bc72b477c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 182072,
        "upload_time": "2022-12-06T09:30:30",
        "upload_time_iso_8601": "2022-12-06T09:30:30.819812Z",
        "url": "https://files.pythonhosted.org/packages/e2/34/9d754d89221009ed28cf81aa404592cc2524b7c414ec6a861ad47a3ba003/open_metric_learning-0.3.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "017c94d68dfb1f409a626181ad8c636fb07db782a922e20133da53ee746f1fc9",
          "md5": "d1f3b700a2f36e00bd543917becb3af1",
          "sha256": "279a25b91e6de56527165b3c4e80079b7da6661516428361c5c822e65337fef6"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d1f3b700a2f36e00bd543917becb3af1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 147899,
        "upload_time": "2022-12-06T09:30:32",
        "upload_time_iso_8601": "2022-12-06T09:30:32.587848Z",
        "url": "https://files.pythonhosted.org/packages/01/7c/94d68dfb1f409a626181ad8c636fb07db782a922e20133da53ee746f1fc9/open-metric-learning-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1ad6e41ad79a5d5129dce5a490474191271c9cb5d74e019fd650a95be4a299a",
          "md5": "0892c1dc4448b23422341557ef50009e",
          "sha256": "eac5d88026e24509f77922d016f9fabd140ba57e58196f79bbc101c93f83cce3"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0892c1dc4448b23422341557ef50009e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 133628,
        "upload_time": "2022-12-13T11:10:54",
        "upload_time_iso_8601": "2022-12-13T11:10:54.630193Z",
        "url": "https://files.pythonhosted.org/packages/f1/ad/6e41ad79a5d5129dce5a490474191271c9cb5d74e019fd650a95be4a299a/open_metric_learning-0.3.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79b8f7f4724bd28633c005a6decfe8fabaffc57dde42cbd1347c6031df1a11a8",
          "md5": "acf3627d3553a82fad0ec06ddf110dd2",
          "sha256": "0740ac2f1ba9a55cd398631eb9bdb70da7860ac59ab30c847f03e4711eca610f"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "acf3627d3553a82fad0ec06ddf110dd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 114945,
        "upload_time": "2022-12-13T11:10:57",
        "upload_time_iso_8601": "2022-12-13T11:10:57.339703Z",
        "url": "https://files.pythonhosted.org/packages/79/b8/f7f4724bd28633c005a6decfe8fabaffc57dde42cbd1347c6031df1a11a8/open-metric-learning-0.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0c01bdc3a2add6ae0ac00b9f721a98c3ae9bed49ac0c7fa0d8a453402e545a6",
          "md5": "4b4153c8860b4e5c2b76d948b950552e",
          "sha256": "df4192d9da837c8349ed2b5d05b488c088c1d62436f3ed8f74cb234f4f08cb9f"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b4153c8860b4e5c2b76d948b950552e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 145739,
        "upload_time": "2023-01-22T22:47:40",
        "upload_time_iso_8601": "2023-01-22T22:47:40.739913Z",
        "url": "https://files.pythonhosted.org/packages/e0/c0/1bdc3a2add6ae0ac00b9f721a98c3ae9bed49ac0c7fa0d8a453402e545a6/open_metric_learning-0.3.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2156588780c35a8bb4e112ffce3cbbfe4ec4ff0a05c962f858649c373e97e5e",
          "md5": "adc2c70509b62af4b2163647f98e28d9",
          "sha256": "0d67a0b8e67818b9657d319503b5a8c4d2ec844cc16cd85cff64ac406efd0d68"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "adc2c70509b62af4b2163647f98e28d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 122234,
        "upload_time": "2023-01-22T22:47:42",
        "upload_time_iso_8601": "2023-01-22T22:47:42.634924Z",
        "url": "https://files.pythonhosted.org/packages/c2/15/6588780c35a8bb4e112ffce3cbbfe4ec4ff0a05c962f858649c373e97e5e/open-metric-learning-0.3.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cedd192c89c860296e3b2e0e76e1f68456f0811a639e44e54c6f122d73116ea5",
          "md5": "31e4be5b09dd81e43c9d9e725f66e7e9",
          "sha256": "4a468651535e13120fd47fca9a902962015aaefebfae5844dd88ebd786ab351d"
        },
        "downloads": -1,
        "filename": "open_metric_learning-0.3.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31e4be5b09dd81e43c9d9e725f66e7e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 153365,
        "upload_time": "2023-01-31T10:40:58",
        "upload_time_iso_8601": "2023-01-31T10:40:58.504167Z",
        "url": "https://files.pythonhosted.org/packages/ce/dd/192c89c860296e3b2e0e76e1f68456f0811a639e44e54c6f122d73116ea5/open_metric_learning-0.3.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c27103c8e3673f9662350b6256e9aa661c187085baad2448bbe64828a3b60d56",
          "md5": "fd60f939609559e23359eb8b28238e03",
          "sha256": "2f6936c8ea2e0bd525133c65109f79b887cbbaeaa1cfbc9c4a67b99e4159862d"
        },
        "downloads": -1,
        "filename": "open-metric-learning-0.3.9.tar.gz",
        "has_sig": false,
        "md5_digest": "fd60f939609559e23359eb8b28238e03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 126040,
        "upload_time": "2023-01-31T10:41:00",
        "upload_time_iso_8601": "2023-01-31T10:41:00.371120Z",
        "url": "https://files.pythonhosted.org/packages/c2/71/03c8e3673f9662350b6256e9aa661c187085baad2448bbe64828a3b60d56/open-metric-learning-0.3.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c9252e6c4c38122eb85b179666359ee730e0dea992e13d949ac28ff39c8d3666",
        "md5": "7bee45634090d881d97da94450177eff",
        "sha256": "4bef53b8e83f487ff88bb6ff5420d5ba26a671f43705411dd1dec0e2c732020f"
      },
      "downloads": -1,
      "filename": "open_metric_learning-0.3.14-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7bee45634090d881d97da94450177eff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 156702,
      "upload_time": "2023-03-21T11:17:17",
      "upload_time_iso_8601": "2023-03-21T11:17:17.688228Z",
      "url": "https://files.pythonhosted.org/packages/c9/25/2e6c4c38122eb85b179666359ee730e0dea992e13d949ac28ff39c8d3666/open_metric_learning-0.3.14-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b7194f82d659f70e0313ef89f71558fd7016a138ff6b6651eb3c7c5411d365ea",
        "md5": "bb14b58f712886669755f65e7c8c6093",
        "sha256": "7984cb510675556a34301a8ea305d0fca72c8b31fd1f84c472daaed06c1f9fc5"
      },
      "downloads": -1,
      "filename": "open-metric-learning-0.3.14.tar.gz",
      "has_sig": false,
      "md5_digest": "bb14b58f712886669755f65e7c8c6093",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 133412,
      "upload_time": "2023-03-21T11:17:19",
      "upload_time_iso_8601": "2023-03-21T11:17:19.692003Z",
      "url": "https://files.pythonhosted.org/packages/b7/19/4f82d659f70e0313ef89f71558fd7016a138ff6b6651eb3c7c5411d365ea/open-metric-learning-0.3.14.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}