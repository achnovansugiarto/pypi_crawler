{
  "info": {
    "author": "Getpaid Community",
    "author_email": "getpaid-dev@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Purpose\n-------\n\nThis package provides generic payment processor registration methods. Though the code itself is free from Plone dependencies,\nthis documentation covers Plone too.\n\nPreface\n-------\n\nGetPaid provides support for two different kind of payment processors:\n\n- *Synchronous*: Your web server does the payment authorization by doing a remote procedure call to the payment processor server\n  You need to override payment processor checkout-review-pay wizard step to have your own custom form fields\n  needed for the payment submission. The default Products.PloneGetPaid.browser.checkout.CheckoutReviewAndPay\n  provides fields for simple credit card payment.\n\n- *Asynchronous*: The buyer will leave your site for the payment to the payment web server (PayPal) and come back to your site after\n  the payment is completed\n\nInstallation\n------------\n\nInstall GetPaid from trunk. \n\nUse branch following development branches. Note that PayPal changes are in trunk::\n\n\tcd src\n\trm -rf Products.PloneGetPaid\n\trm -rf getpaid.nullpayment\n\trm -rf getpaid.paypal\n\tsvn co https://getpaid.googlecode.com/svn/Products.PloneGetPaid/branches/multiplepaymentprocessors Products.PloneGetPaid\n\tsvn co https://getpaid.googlecode.com/svn/getpaid.nullpayment/branches/multiplepaymentprocessors getpaid.nullpayment\n\tsvn co https://getpaid.googlecode.com/svn/getpaid.paypal/trunk getpaid.paypal\n\t\nAdd *getpaid.paymentprocessers* to your *316.cfg* eggs and develop-eggs sections.\n\nAdministration\n--------------\n\nActive payment processors must be enabled in *Site setup* -> *GetPaid* -> *Payment processor settings*.\n\nYou can manage individual payment processor settings from the same screen.\n\nCheckout wizard steps\n---------------------\n\nA checkout wizard contains a step \"checkout-payment-method\" which allows the user to select \nthe wanted payment method. This step is only available if the site has more than \none active payment processors.\n\nCreating your own payment processor\n-----------------------------------\n\nPayment processor directive\n===========================\n\nPayment processors are registered using a ZCML directive::\n\n    <!-- Register logic class dealing with the actual payment -->\n\n  \t<adapter\n     for=\"getpaid.core.interfaces.IStore\"\n     provides=\"getpaid.core.interfaces.IPaymentProcessor\"\n     factory=\".null.NullPaymentAdapter\"\n     name=\"Testing Processor\"\n     />\n\n    <!-- Register payment processor specific user interface parts -->\n\n    <paymentprocessors:registerProcessor\n       name=\"Testing Processor\"\n\t   i18n_name=\"Test Payment\"\n       selection_view=\"null_payment_button\"\n       review_pay_view=\"null_payment_pay_page\"\n       thank_you_view=\"null_payment_thank_you_page\"\n       settings_view=\"null_payment_settings_page\"\n       />\n\n\nIt is recommended best practice to put paymentprocessor directive into a separate ZCML file in your getpaid extension module\nto maintain backwards compatibility. You can do it using zcml condition::\n\n  <include zcml:condition=\"installed getpaid.paymentprocessors\" file=\"paymentprocessors.zcml\" />\n  \nYou can also maintain backward compatiblity overrides with not-installed directive::\n\n  <include zcml:condition=\"not-installed getpaid.paymentprocessors\" package=\".browser\" file=\"overrides.zcml\" />\n\n\npaymentprocessors:registerProcessor attributes\n++++++++++++++++++++++++++++++++++++++++++++++\n\nBelow is explanation for **registerProcessor** attributes.\n\n**name**: This must match getpaid.core.interfaces.IPaymentProcessor adapter name\n\n**i18_name**: This is the user visible name of the payment processor. It might appear in the summaries and listing.\n  Term \"payment method\" is recommended here for more end user friendly language.\n\n**selection_view**: This is a <browser:page> registration name which renders the payment method selection button on payment\nmethod selection checkout wizard step. The browser view class should be subclasses from Products.GetPaid.browser.checkout.BasePaymentMethodButton.\n\nselection_view template should render a <tr> element which is rendered on the checkout payment method selection page. It contains three columns:\n\n\t- <td> having <input type=\"radio\"> button with accessibility <label>\n\n\t- <td> with payment method name/logo image\n\n\t- <td> with description. You can override this template to have clauses like \"Using PayPal will cost 2$ extra\"\n\nFor example, see getpaid.nullpayment/templates/button.pt\n\n**review_pay_view**: This view renders payment processor specific \"review and pay\" view in the checkout wizard. The attribute\nholds the registered <browser:page> name. This view should be subclass of Products.PloneGetPaid.browser.checkout.CheckoutReviewAndPay.\nTo change the review and pay page template, override template attribute of the class.\n\nUsually review and pay page has two purposes::\n\n\t- Render a <form> which is submitted to the payment authorization server with a callback back to the shop server\n\n\t- Do a HTTP redirect or Javascript redirect and take the user to the payment authorization server for an external review payment page\n\nBecause review_pay_view is based of BaseCheckoutForm class, you need to explitcly subclass it and override\n*template* class attribute to use your own template. Using <browser:page template=\"...\"> does not work.\n\n**settings_view**: This view renders the settings for the payment processor. It should\nbe subclass of Products.PloneGetPaid.admin.PaymentProcessor.\n\n**thank_you_view**: This should point to the <browser:page> which is rendered after the payment processor is complete. It is unused currently.\nPayment processor review_pay_view is itself responsible to point the user back to the shop site after the payment has been authorized.\n\nSee https://getpaid.googlecode.com/svn/getpaid.nullpayment/branches/multiplepaymentprocessors/src/getpaid/nullpayment/paymentprocessors.zcml\nfor more info.\n\nTesting\n-------\n\nUnits tests can be found in *Products.PloneGetPaid.tests.test_payment_processors*. \n\nIt is recommended to take a look these how to programmatically play around with the checkout wizard and\ntest your custom payment methods automatically.\n\nNon-plone related functionality is tested in getpaid.paymentprocessors.tests. \nThis mainly involves testing ZCML validy.\n\nGuidelines for payment processor plug-in authors\n------------------------------------------------\n\n- See getpaid.paypal how to include all related browser/ module extensions, including necessary media files\n\n- In your payment processor README include short, but detailed, instructions\n\n\t- For testing the payment processor in sandbox mode\n\n\t- For settings up the payment processor in production mode\n\n- In your payment processor README include link to payment processor logo usage terms\n\nDeveloper snippets\n-------------------\n\nPayment processors are described by Entry objects which simply hold the information provided by IRegisterPaymentProcessorDirective.\n\nTo get site wide active payment processors call::\n\n\tfrom Products.PloneGetPaid import payment\n\n\tprocessors = payment.getActivePaymentProcessors(context) # context = any Plone site object\n\nIn checkout wizard, you can get the user chosen payment method using the following snippet. You can do this *after* the user\nhas passed payment method selection step::\n\n\tpayment_processor_name = wizard.getActivePaymentProcessor()\n\nTo get the actual payment processor instance by its name call::\n\n\tfrom zope.component import getUtility, getAdapter\n\tfrom Products.CMFCore.utils import getToolByName\n\timport getpaid.core.interfaces\n\n    site_root = getToolByName(self.context, \"portal_url\").getPortalObject()\n\tprocessor = component.getAdapter(site_root, getpaid.core.interfaces.IPaymentProcessor, payment_processor_name)\n\nPayment processor registry is available in getpaid.paymentprocessors.registry.paymentProcessorRegistry. This registry\nholds the data of registered payment processor code objects.\n\nActivated payment processor names are stored in portal_properties as LinesField::\n\n\t# sequence of unicode strings, payment processor names\n\tportal_properties.payment_processor_properties.enabled_processors\n\nAccessing payment information in the stored order::\n\n\tinfo = order.payment_method # IPaymentMethodInformation instance\n\tinfo.payment_processor == u\"Your Processor Name\"\n\nTODO\n----\n\n- Rip off interfaces.IGetPaidManagementOptions(self.context).processor_name from everywhere\n\n- Remove \"Set active processor\" setting and Payment options page in site setup\n\n- Discuss whether it is sensible to use portal_properties to store settings (AFAIK this is the best\n  practice since they can be edited plain text is site setup breaks down)\n\n- Handle validation if user chooses no payment processor\n\n- Remember checked payment processor in the checkout wizard\n\n- There is a bug that wizard.data_manager.payment_method.payment_processor pulls out i18n_name for some reason.\n  Unless fixed payment processor name must be i18n_name.\n\n- How/when asyncronous processors should create Order, toggle workflow states and delete cart?\n\n\nChangelog\n=========\n\n0.1\n----------------\n\n* Initial release",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.plonegetpaid.com",
    "keywords": "",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "getpaid.paymentprocessors",
    "package_url": "https://pypi.org/project/getpaid.paymentprocessors/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/getpaid.paymentprocessors/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://www.plonegetpaid.com"
    },
    "release_url": "https://pypi.org/project/getpaid.paymentprocessors/0.1/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Support multiple payment processors on GetPaid site",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 792368,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d798b656da69bf1cf4b79955da23f7cfc1baf16b478fa81bf29744fda0925052",
          "md5": "a9712efdd87100152cd2e399dc7ed1df",
          "sha256": "c33786bc74b7193e4953d7f887d2a12f7dbe4583b7fd9a21bbf370a89529352c"
        },
        "downloads": -1,
        "filename": "getpaid.paymentprocessors-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a9712efdd87100152cd2e399dc7ed1df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11286,
        "upload_time": "2009-06-29T15:22:44",
        "upload_time_iso_8601": "2009-06-29T15:22:44.674638Z",
        "url": "https://files.pythonhosted.org/packages/d7/98/b656da69bf1cf4b79955da23f7cfc1baf16b478fa81bf29744fda0925052/getpaid.paymentprocessors-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d798b656da69bf1cf4b79955da23f7cfc1baf16b478fa81bf29744fda0925052",
        "md5": "a9712efdd87100152cd2e399dc7ed1df",
        "sha256": "c33786bc74b7193e4953d7f887d2a12f7dbe4583b7fd9a21bbf370a89529352c"
      },
      "downloads": -1,
      "filename": "getpaid.paymentprocessors-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a9712efdd87100152cd2e399dc7ed1df",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11286,
      "upload_time": "2009-06-29T15:22:44",
      "upload_time_iso_8601": "2009-06-29T15:22:44.674638Z",
      "url": "https://files.pythonhosted.org/packages/d7/98/b656da69bf1cf4b79955da23f7cfc1baf16b478fa81bf29744fda0925052/getpaid.paymentprocessors-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}