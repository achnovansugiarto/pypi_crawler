{
  "info": {
    "author": "Andrew Su, Xiao Tan and Quan Nguyen",
    "author_email": "a.su@uqconnect.edu.au, xiao.tan@uq.edu.au, quan.nguyen@uq.edu.au",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/BiomedicalMachineLearning/HEMnet/master?filepath=Development)\n[![launch ImJoy](https://imjoy.io/static/badge/launch-imjoy-badge.svg)](https://imjoy.io/#/app?plugin=https://github.com/BiomedicalMachineLearning/HEMnet/blob/master/Demo/HEMnet_Tile_Predictor.imjoy.html)\n[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/BiomedicalMachineLearning/HEMnet/blob/master/Demo/TCGA_Inference.ipynb)\n\n# HEMnet - Haematoxylin & Eosin and Molecular neural network\n\n## Description\nA deep learning automated cancer diagnosis software using molecular labelling to improve pathological annotation of \nHaematoxylin and Eosin (H&E) stained tissue. \n\n## Installation\n\n1. Docker\n\n    You can download and run the docker image using the following commands:\n\n    ```\n    docker pull andrewsu1/hemnet    \n    docker run -it andrewsu1/hemnet\n    ```\n2. Conda \n\n   Install Openslide (this is necessary to open whole slide images) - download it [here](https://openslide.org/download/)\n\n   Create a conda environment from the `environment.yml` file\n\n   ```\n   conda env create -f environment.yml\n   conda activate HEMnet\n   ```\n\n## Usage\n### Slide Preparation\n\nName slides in the format: `slide_id_TP53` for TP53 slides and `slide_id_HandE` for H&E slides\nThe `TP53` and `HandE` suffix is used by HEMnet to identify the stain used. \n\n### 1. Generate training and testing datasets \n\na. Generate train dataset\n\n`python HEMnet_train_dataset.py -b /path/to/base/directory -s relative/path/to/slides -o relative/path/to/output/directory \n-t relative/path/to/template_slide.svs -v`\n\nb. Generate test dataset\n\n`python HEMnet_test_dataset.py -b /path/to/base/directory -s /relative/path/to/slides -o /relative/path/to/output/directory\n -t relative/path/to/template_slide -m tile_mag -a align_mag -c cancer_thresh -n non_cancer_thresh`\n\n Other parameters:\n * `-t` is the relative path to the template slide from which all other slides will be normalised against. The template \n slide should be the same for each step. \n * `-m` is the tile magnification. e.g. if  the input is `10` then the tiles will be output at 10x\n * `-a` is the align magnification. Paired TP53 and H&E slides will be registered at this magnification. \n To reduce computation time we recommend this be less than the tile magnification - a five times downscale generally works well.\n * `-c` cancer threshold to apply to the DAB channel. DAB intensities less than this threshold indicate cancer.\n * `-n` non-cancer threshold to apply to the DAB channel. DAB intensities greater than this threshold indicate no cancer. \n\n### 2. Train and evaluate model\n\na. Training model  \n\n`python train.py -b /path/to/base/directory -t relative/path/to/training_tile_directory -l relative/path/to/validation_tile_directory\n-o /relative/path/to/output/directory -m cnn_base -g num_gpus -e epochs -a batch_size -s -w -f -v`\n\nOther parameters:\n* `-m` is CNN base model. eg. `resnet50`, `vgg16`, `vgg19`, `inception_v3` and `xception`. \n* `-g` is number of GPUs for training. \n* `-e` is training epochs. Default is `100` epochs.\n* `-a` is batch size. Default is `32`\n* `-s` is option to save the trained model weights.\n* `-w` is option to used transfer learning. Model will used pre-trained weights from ImageNet at the initial stage.\n* `-f` is fine-tuning option. Model will re-train CNN base.\n\nb. Test model prediction\n\n`python test.py  -b /path/to/base/directory -t relative/path/to/test_tile_directory -o /relative/path/to/output/directory\n-w model_weights -m cnn_base -g num_gpus -v`\n\nOther parameters:\n* `-w` is path to trained model. eg. `trained_model.h5`.\n* `-m` is CNN base model (same to training step). \n* `-g` is number of GPUs for prediction.\n\nc. Evaluate model performance and visualise model prediction \n\n`python visualisation.py -b /path/to/base/directory -t /relative/path/to/training_output_directory -p /relative/path/to/test_output_directory \n-o /relative/path/to/output/directory -i sample` \n\nOther parameters:\n* `-t` is path to training outputs.\n* `-p` is path to test outputs.\n* `-i` is name of Whole Slide Image for visualisation.\n\n### 3. Apply model to diagnose new images\n`python HEMnet_inference.py -s '/path/to/new/HE/Slides/' -o '/path/to/output/directory/' -t '/path/to/template/slide/' -nn '/path/to/trained/model/' -v`\n\nPredict on TCGA images with our pretrained model for colorectal cancer using [google colab](https://colab.research.google.com/github/BiomedicalMachineLearning/HEMnet/blob/master/Demo/TCGA_Inference.ipynb)\n## Results\n\n## Citing HEMnet\n\n## The Team\nPlease contact Dr Quan Nguyen (quan.nguyen@uq.edu.au), Andrew Su (a.su@uqconnect.edu.au), \nand Xiao Tan (xiao.tan@uqconnect.edu.au) for issues, suggestions, \nand we are very welcome to collaboration opportunities.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BiomedicalMachineLearning/HEMnet",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "HEMnet",
    "package_url": "https://pypi.org/project/HEMnet/",
    "platform": "",
    "project_url": "https://pypi.org/project/HEMnet/",
    "project_urls": {
      "Bug Tracker": "https://github.com/BiomedicalMachineLearning/HEMnet/issues",
      "Homepage": "https://github.com/BiomedicalMachineLearning/HEMnet"
    },
    "release_url": "https://pypi.org/project/HEMnet/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "HEMnet package",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9806284,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87df306349a9783a6ff24ce3df8761e9fae7637f2ee75343442d35df2477bdc7",
          "md5": "ac3107353206cb3836772b0de98cffa9",
          "sha256": "367e417dd9639ce41ae17f23dab79fd54e67eeb786fe60091cbea952a61aa7c7"
        },
        "downloads": -1,
        "filename": "HEMnet-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac3107353206cb3836772b0de98cffa9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3839,
        "upload_time": "2021-03-18T07:15:23",
        "upload_time_iso_8601": "2021-03-18T07:15:23.414455Z",
        "url": "https://files.pythonhosted.org/packages/87/df/306349a9783a6ff24ce3df8761e9fae7637f2ee75343442d35df2477bdc7/HEMnet-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75a7812515f9ce4c908aaab5850d4801f9e49703bc25627f94d598ca624daa0a",
          "md5": "f0664c6156eabbaf56c6a99a633f0387",
          "sha256": "6aac023efe1b1cff2d7b8fbd1a6f2c157adac00f3a66bc3fde64f42982ef1437"
        },
        "downloads": -1,
        "filename": "HEMnet-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f0664c6156eabbaf56c6a99a633f0387",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3440,
        "upload_time": "2021-03-18T07:15:25",
        "upload_time_iso_8601": "2021-03-18T07:15:25.106122Z",
        "url": "https://files.pythonhosted.org/packages/75/a7/812515f9ce4c908aaab5850d4801f9e49703bc25627f94d598ca624daa0a/HEMnet-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87df306349a9783a6ff24ce3df8761e9fae7637f2ee75343442d35df2477bdc7",
        "md5": "ac3107353206cb3836772b0de98cffa9",
        "sha256": "367e417dd9639ce41ae17f23dab79fd54e67eeb786fe60091cbea952a61aa7c7"
      },
      "downloads": -1,
      "filename": "HEMnet-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ac3107353206cb3836772b0de98cffa9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 3839,
      "upload_time": "2021-03-18T07:15:23",
      "upload_time_iso_8601": "2021-03-18T07:15:23.414455Z",
      "url": "https://files.pythonhosted.org/packages/87/df/306349a9783a6ff24ce3df8761e9fae7637f2ee75343442d35df2477bdc7/HEMnet-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75a7812515f9ce4c908aaab5850d4801f9e49703bc25627f94d598ca624daa0a",
        "md5": "f0664c6156eabbaf56c6a99a633f0387",
        "sha256": "6aac023efe1b1cff2d7b8fbd1a6f2c157adac00f3a66bc3fde64f42982ef1437"
      },
      "downloads": -1,
      "filename": "HEMnet-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f0664c6156eabbaf56c6a99a633f0387",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 3440,
      "upload_time": "2021-03-18T07:15:25",
      "upload_time_iso_8601": "2021-03-18T07:15:25.106122Z",
      "url": "https://files.pythonhosted.org/packages/75/a7/812515f9ce4c908aaab5850d4801f9e49703bc25627f94d598ca624daa0a/HEMnet-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}