{
  "info": {
    "author": "Karim Kanso",
    "author_email": "kaz.kanso@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Security :: Cryptography"
    ],
    "description": "# odd-hash: your digesting friend\n\nSimple tools to *hash* or *dictionary attack* passwords that use\nnon-standard hash schemes like:\n`sha256(md5(sha1($p).sha3_384($s)).$p)`.\n\n## Why was it made?\n\nThere have been a few occasions where I have come across (or wondered\nin a CTF setting if I had come across) hashing schemes that standard\ntools such as [`john`][john] or [`hashcat`][hashcat] do not support\nout of the box. Configuring these tools to deal with non-standard\nformats is often time consuming and requires digging through lots of\ndocumentation, alternatively a throwaway script can be written.\n\nTo improve this situation, these tools aim to have a clean user\ninterface for dealing with non-standard formats to allow the user to\neasily try out different schemes, sadly this does trade lots of\nefficiency when compared to purpose written crackers.\n\n## How to specify\n\nThe following are examples of how formats can be specified:\n\n* `md5($p)`\n* `sha256(sha256($p).sha256_raw($s))`\n* `sha3_384(md5($s).keccak_512(blake2b_224($p)))`\n* `hmac_md5($m)`\n* `sha256(hmac_sha512(keccak_224($s)))`\n\nThe `$p`, `$s` and `$m` are substituted for the *password*, *salt*,\nand *message* respectively. Any algorithm can end in `_raw`, which\nmeans its result will be the raw binary hash (i.e. it has not been\n*hexlified*). Many of the algorithms can be prefixed with `hmac_`, the\nnotable exception to this are the sponge based algorithms like `sha3`\n(which are not vulnerable to length extension attack so `hmac` is of\nless value).\n\nThere are 2 connectives: `.` and `+`. These perform concatenation and\nbitwise xor, respectively. Currently no support has been implemented\nfor padding or truncating values. Finally, There is a special function\n`hex` that hexlifies a byte string, while often not required there are\nsome odd formats that need this.\n\nThis is a fairly self explanatory specification and was inspired by\nthe way [dynamic][john-dynamic] formats are displayed in\n[`john`][john]. However there are some differences as the exact format\nhere encodes an algorithm name that is looked up from\n[PyCryptodome][pycryptodome-hash]'s hash library: `Crypto.Hash`. For\nthis reason, some formats will have an underscore between the digest\nsize and others do not.\n\nThe resolution logic works as follows (segments are separated by `_`):\n\n1. If the first segment is `hmac`, remove it (so the second segment is\n   now the first, i.e. the digest algorithm name).\n\n   1. In the case that it was `hmac`, take the resolved algorithm from\n      the below rules and use it as the digest method in `hmac`.\n\n2. If the first segment of the algorithm name is a module in\n   `Crypto.Hash`. Use that as the algorithm. (e.g. `md5` or `sha256`)\n\n    1. If the second segment is a number, pass this to the `new`\n       function of the hash algorithm as the `digest_bits`\n       parameter. (e.g. `keccak_256`)\n\n3. If the first two segments of the algorithm form a module in\n   `Crypto.Hash`. Use that as the algorithm. (e.g. `sha3_512`)\n\n### Limits\n\nFirst, obviously if the algorithm is not supported by *PyCryptodome*,\nthen it will not be supported by `odd-hash`.\n\nSecondly, *MAC* formats such as `CMAC` follow a slightly different\ninterface (as a secret/key is passed when instantiating the\nalgorithm). Thus, these are not supported. Due to the usefulness of\n`HMAC` special provision has been provided for it.\n\nFinally, both the *SHAKE* formats follow a slightly different\ninterface in that the digest size is not part of the name or passed to\nthe `new` function. This has been left as future work to support.\n\n## The Tools\n\nTwo tools are provided:\n\n* `odd-hash` used for hashing a password [[usage](#odd-hash-usage)] [[examples](#odd-hash-examples)]\n* `odd-crack` used for dictionary attack against a hash (or regex) [[usage](#odd-crack-usage)] [[examples](#odd-crack-examples)]\n\n### Install\n\nFrom [pypi.org][pypi]:\n\n```\npip3 install oddhash\n```\n\nFrom source:\n\n```\npip3 install -r requirements.txt\npython3 setup.py install\n```\n\n### `odd-hash` usage\n\n```\n$ odd-hash -h\nusage: odd-hash [-h] [--salt S] [--message M] [--debug] [--raw] format password\n\n  Configurable password hasher. It is designed to be easy to\n  generate different format hashes using a standard hash\n  specification similar to what is often shown in PHP.\n\n  Selection of supported hash algorithms depends on what is\n  available in the installed version of pycryptodome. See\n  following link for more details:\n\n  https://pycryptodome.readthedocs.io/en/latest/src/hash/hash.html\n\n  Currently it is not possible to use this tool for any of the\n  algorithms that use a different interface, such either of the\n  SHAKEs or the MAC algorithms (with the exception of HMAC). To\n  better understand, compare the usage of these with MD5 on the\n  above link.\n\n  Parameters such as salt and message can be specified with a\n  prefix of: hex, base64, base64urlsafe, utf8.\n\npositional arguments:\n  format       Hash format specification, e.g. \"md5($p)\" or\n               something much more complex such\n               as \"sha3_384(md5($s).keccak_512(blake2b_224($p)))\".\n\n               Any of the algorithm names can be given the suffix\n               with \"_raw\", which does not convert the resulting\n               hash back into base16 before the next hash. E.g.\n               \"sha256(sha256_raw($p))\" will hash the resulting\n               32 bytes of the first hash (instead of turning\n               them into hex first, i.e. 64 chars).\n\n               It is possible to prefix algorithm names\n               with \"hmac_\". This will use the password value as\n               the secret and value passed in between the\n               parameters as the message. E.g.\n               \"hmac_sha256($m)\" or\n               even \"sha256(hmac_md5($s.sha1($p)))\" is\n               possible. Be aware that not all possible\n               combinations of hmac and digest algorithms are\n               supported, this is especially true of sponge based\n               algorithms (e.g. sha3, keccak, blake2b).\n\n               The following is a list of hash functions\n               available from the installed version of\n               pycryptodome: BLAKE2b, BLAKE2s, CMAC, HMAC, MD2,\n               MD4, MD5, Poly1305, RIPEMD, RIPEMD160, SHA, SHA1,\n               SHA224, SHA256, SHA384, SHA3_224, SHA3_256,\n               SHA3_384, SHA3_512, SHA512, SHAKE128, SHAKE256,\n               keccak.\n\n  password     The password to hash\n\n\noptional arguments:\n  -h, --help   show this help message and exit\n\n  --salt S     If needed, specify a salt value: $s\n\n  --message M  If needed, specify a message value: $m\n\n  --debug      Increase verbosity of print messages\n\n  --raw        Dont try and convert hash to utf8 before printing.\n\n\n  oddhash v0.0.6. Copyright (C) 2021 Karim Kanso. All Rights Reserved.\n```\n\n### `odd-hash` examples\n\n\n```\n$ odd-hash 'md5($p)' 'password123'\n482c811da5d5b4bc6d497ffa98491e38\n```\n\n```\n$ odd-hash 'md5($p.sha256($s))' --salt oddhash 'password123'\n86e2e5671b8b7f9f6264ecd6d1d749c3\n```\n\n```\n$ odd-hash 'md5($p.sha256($s))' --salt hex:6f646468617368 'password123'\n86e2e5671b8b7f9f6264ecd6d1d749c3\n```\n\n```\n$ odd-hash 'md5($p.sha256($s))' --salt base64:b2RkaGFzaA== 'password123'\n86e2e5671b8b7f9f6264ecd6d1d749c3\n```\n\n```\n$ odd-hash 'keccak_256(keccak_256_raw($p))' 'password123'\n7e7471197b18c087ce6fd7abdcd1991481eb650e39cb0eeafc82cfb7186c0cfe\n```\n\n```\n$ odd-hash 'hmac_sha256($m)' --message 'gjdkdkic894m' 'password123'\n7de36a5d1374d690ebe19d42be1e89023fe1f7548f38fa0eae89dc91bd8901dd\n```\n\n```\n$ odd-hash 'hex(sha1_raw($p)+sha1_raw($s.sha1_raw(sha1_raw($p))))' password --salt hex:304a5f7d3066515a69015c49637d45712d3e0154\n99dd12ac6830335ab844a97ea78aacb94aa1f4ee\n```\n\n### `odd-crack` usage\n\n```\n$ odd-crack -h\nusage: odd-crack [-h] [--salt S] [--message M] [--debug] format wordlist HASH [HASH ...]\n\n  Configurable password hash cracker. It is designed to be easy\n  to specify different format hashes, however it is not designed\n  to be fast. The tool was created as often serious password\n  crackers (e.g. john or hashcat) can be time consuming to use a\n  format that is not pre-configured.\n\n  Selection of supported hash algorithms depends on what is\n  available in the installed version of pycryptodome. See\n  following link for more details:\n\n  https://pycryptodome.readthedocs.io/en/latest/src/hash/hash.html\n\n  Currently it is not possible to use this tool for any of the\n  algorithms that use a different interface, such either of the\n  SHAKEs or the MAC algorithms (with the exception of HMAC). To\n  better understand, compare the usage of these with MD5 on the\n  above link.\n\n  Parameters such as salt, message and hashes can be specified\n  with a prefix of: hex, base64, base64urlsafe, utf8.\n\npositional arguments:\n  format       Hash format specification, e.g. \"md5($p)\" or\n               something much more complex such\n               as \"sha3_384(md5($s).keccak_512(blake2b_224($p)))\".\n\n               Any of the algorithm names can be given the suffix\n               with \"_raw\", which does not convert the resulting\n               hash back into base16 before the next hash. E.g.\n               \"sha256(sha256_raw($p))\" will hash the resulting\n               32 bytes of the first hash (instead of turning\n               them into hex first, i.e. 64 chars).\n\n               It is possible to prefix algorithm names\n               with \"hmac_\". This will use the password value as\n               the secret and value passed in between the\n               parameters as the message. E.g.\n               \"hmac_sha256($m)\" or\n               even \"sha256(hmac_md5($s.sha1($p)))\" is\n               possible. Be aware that not all possible\n               combinations of hmac and digest algorithms are\n               supported, this is especially true of sponge based\n               algorithms (e.g. sha3, keccak, blake2b).\n\n               The following is a list of hash functions\n               available from the installed version of\n               pycryptodome: BLAKE2b, BLAKE2s, CMAC, HMAC, MD2,\n               MD4, MD5, Poly1305, RIPEMD, RIPEMD160, SHA, SHA1,\n               SHA224, SHA256, SHA384, SHA3_224, SHA3_256,\n               SHA3_384, SHA3_512, SHA512, SHAKE128, SHAKE256,\n               keccak.\n\n  wordlist     Wordlist to use for cracking\n\n  HASH         List of base16 (i.e. hex) hashes to attempt to\n               crack. Caution, no validation is performed on the\n               length. Supports \"base64:\" prefix.\n\n               If a hash begins with \"@\" then it will be treated\n               as a file and hashes read from it.\n\n               If a hash starts with \"regex:\" then it is used to\n               match against computed hashes. All comparisons are\n               done in lowercase hex. E.g. \"regex:^0e\\d+$\" to\n               find a hash vulnerable to php type juggling.\n\n\noptional arguments:\n  -h, --help   show this help message and exit\n\n  --salt S     If needed, specify a salt value: $s\n\n  --message M  If needed, specify a message value: $m\n\n  --debug      Increase verbosity of print messages\n\n\n  oddhash v0.0.6. Copyright (C) 2021 Karim Kanso. All Rights Reserved.\n```\n\n### `odd-crack` examples\n\nWhile its possible to crack a simple `md5` hash as follows, there are\nmany other more efficient tools:\n\n```\n$ odd-crack 'md5($p)' rockyou.txt  482c811da5d5b4bc6d497ffa98491e38\n[*] loading file...\n[*] found password123=482c811da5d5b4bc6d497ffa98491e38\n[*] all hashes found, shutdown requested\n[*] done, tried 1384 passwords\n```\n\n```\n$ odd-crack 'keccak_256(keccak_256_raw($p))' rockyou.txt 7e7471197b18c087ce6fd7abdcd1991481eb650e39cb0eeafc82cfb7186c0cfe\n[*] loading file...\n[*] found password123=7e7471197b18c087ce6fd7abdcd1991481eb650e39cb0eeafc82cfb7186c0cfe\n[*] all hashes found, shutdown requested\n[*] done, tried 1384 passwords\n```\n\n```\n$ odd-crack 'hmac_sha256($m)' --message base64:t4ErHzCg4EaGujcalk2WWg== rockyou.txt base64:UmUuTPTBS3PaOkQGqvubvkYWUA1m2q1QmqUkk7Y/Nbw=\n[*] loading file...\n[*] found password123=52652e4cf4c14b73da3a4406aafb9bbe4616500d66daad509aa52493b63f35bc\n[*] all hashes found, shutdown requested\n[*] done, tried 1384 passwords\n```\n\nThe following can be used to crack a [`mysql_native_password`][mysql]\ncaptured challenge response:\n\n```\n$ odd-crack 'hex(sha1_raw($p)+sha1_raw($s.sha1_raw(sha1_raw($p))))' --salt hex:304a5f7d3066515a69015c49637d45712d3e0154 rockyou.txt 99dd12ac6830335ab844a97ea78aacb94aa1f4ee\n[*] loading file...\n[*] found password=99dd12ac6830335ab844a97ea78aacb94aa1f4ee\n[*] all hashes found, shutdown requested\n[*] done, tried 4 passwords\n```\n\n\n# Other bits\n\nSource code can be found on [GitHub][oddhash].\n\nCopyright (C) 2021 Karim Kanso. All Rights Reserved. Project licensed under GPLv3.\n\n\n[john]: https://www.openwall.com/john/ \"John the Ripper password cracker\"\n[hashcat]: https://hashcat.net/hashcat/ \"hashcat: advanced password recovery\"\n[john-dynamic]: https://github.com/magnumripper/JohnTheRipper/blob/bleeding-jumbo/doc/DYNAMIC \"GitHub.com: John the Ripper Dynamic Mode Documentation\"\n[pycryptodome-hash]: https://pycryptodome.readthedocs.io/en/latest/src/hash/hash.html \"pycryptodome.readthedocs.io: Crypto.Hash package documentation\"\n[oddhash]: https://github.com/kazkansouh/odd-hash \"GitHub.com: odd-hash\"\n[pypi]: https://pypi.org/project/oddhash/ \"PyPI: oddhash\"\n[mysql]: https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_connection_phase_authentication_methods_native_password_authentication.html \"MySQL: Native Authentication\"\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kazkansouh/odd-hash",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "oddhash",
    "package_url": "https://pypi.org/project/oddhash/",
    "platform": "",
    "project_url": "https://pypi.org/project/oddhash/",
    "project_urls": {
      "Homepage": "https://github.com/kazkansouh/odd-hash"
    },
    "release_url": "https://pypi.org/project/oddhash/0.0.6/",
    "requires_dist": [
      "lark-parser",
      "pycryptodome"
    ],
    "requires_python": "",
    "summary": "Tool to hash odd format passwords.",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9145656,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22a02575ca650a28710b27c35e0f852b3119200477ec956d909f90223448383e",
          "md5": "832566c2dabb7227a0f7ff23294408d1",
          "sha256": "8b48b6efd3f650c4c9743008031cde25c7341ed19430542ec8b794950d4d26ee"
        },
        "downloads": -1,
        "filename": "oddhash-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "832566c2dabb7227a0f7ff23294408d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26131,
        "upload_time": "2020-04-08T13:25:49",
        "upload_time_iso_8601": "2020-04-08T13:25:49.069140Z",
        "url": "https://files.pythonhosted.org/packages/22/a0/2575ca650a28710b27c35e0f852b3119200477ec956d909f90223448383e/oddhash-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "101624ca852ec11ccaf29da988aa0315d3ace301e4177a491686054906249c04",
          "md5": "0a9978e301dcb09ba48ef0879a2e4f42",
          "sha256": "788e18b31768b1bb67482c4c62f89d4a503986a61304555e849b11d499d59095"
        },
        "downloads": -1,
        "filename": "oddhash-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0a9978e301dcb09ba48ef0879a2e4f42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10360,
        "upload_time": "2020-04-08T13:25:50",
        "upload_time_iso_8601": "2020-04-08T13:25:50.271396Z",
        "url": "https://files.pythonhosted.org/packages/10/16/24ca852ec11ccaf29da988aa0315d3ace301e4177a491686054906249c04/oddhash-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa7fe2c03d6074267d0de19dd462ee1df0ee8e68fc4942efae367817f07b5f13",
          "md5": "a9c4822f6bccbf7b9e6931f0ffc6ef01",
          "sha256": "99f28d54d8a5d382eac205201353125967de13c1fb226be3fe633779cff2b887"
        },
        "downloads": -1,
        "filename": "oddhash-0.0.4-py3.8.egg",
        "has_sig": false,
        "md5_digest": "a9c4822f6bccbf7b9e6931f0ffc6ef01",
        "packagetype": "bdist_egg",
        "python_version": "3.8",
        "requires_python": null,
        "size": 24140,
        "upload_time": "2020-05-21T13:56:37",
        "upload_time_iso_8601": "2020-05-21T13:56:37.449877Z",
        "url": "https://files.pythonhosted.org/packages/aa/7f/e2c03d6074267d0de19dd462ee1df0ee8e68fc4942efae367817f07b5f13/oddhash-0.0.4-py3.8.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3016063453152b1c22503d9756d090e1b81893c689f1e79bc40e5641be91d445",
          "md5": "0580c29db1ce33afc1a32eb026c055cf",
          "sha256": "6a76982acefc838fe418f437b1e22da4b4879b14f4e3cf4ca91e843b3bc22200"
        },
        "downloads": -1,
        "filename": "oddhash-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0580c29db1ce33afc1a32eb026c055cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26158,
        "upload_time": "2020-05-21T13:56:36",
        "upload_time_iso_8601": "2020-05-21T13:56:36.197123Z",
        "url": "https://files.pythonhosted.org/packages/30/16/063453152b1c22503d9756d090e1b81893c689f1e79bc40e5641be91d445/oddhash-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0642cc587ca1b02704276b14afcfc819d2ce950e80a6e7f02474d14457cf3089",
          "md5": "3f503502bb44a8b123929c6a871d1876",
          "sha256": "a9fc18111276f49254dd8c6797aebb0073e3c6c23def91477aebda966e5eb240"
        },
        "downloads": -1,
        "filename": "oddhash-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3f503502bb44a8b123929c6a871d1876",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13999,
        "upload_time": "2020-05-21T13:56:38",
        "upload_time_iso_8601": "2020-05-21T13:56:38.603981Z",
        "url": "https://files.pythonhosted.org/packages/06/42/cc587ca1b02704276b14afcfc819d2ce950e80a6e7f02474d14457cf3089/oddhash-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "348cba5d3797d89617f83fb3f694656836b08964223b050d8ce01a1e184c0c25",
          "md5": "5d8d4a57a5d9922f152a18f94a8677bd",
          "sha256": "58aca86f11ab02c424eafe0c21961f88e8f23bcc854a3b21a793f09e0253dd1a"
        },
        "downloads": -1,
        "filename": "oddhash-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d8d4a57a5d9922f152a18f94a8677bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26467,
        "upload_time": "2020-06-21T13:26:39",
        "upload_time_iso_8601": "2020-06-21T13:26:39.625299Z",
        "url": "https://files.pythonhosted.org/packages/34/8c/ba5d3797d89617f83fb3f694656836b08964223b050d8ce01a1e184c0c25/oddhash-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a55724a5245669ea92a5f27e309e504fcc8ab3a80ce4225424b33596d5766a37",
          "md5": "0d4bce1e06cd25aca226f97abe691ea4",
          "sha256": "410deaf160e1160f29ba39c089058532c72de8c70f98fb9aad1d15bd4ca2d1ac"
        },
        "downloads": -1,
        "filename": "oddhash-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0d4bce1e06cd25aca226f97abe691ea4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14261,
        "upload_time": "2020-06-21T13:26:40",
        "upload_time_iso_8601": "2020-06-21T13:26:40.768148Z",
        "url": "https://files.pythonhosted.org/packages/a5/57/24a5245669ea92a5f27e309e504fcc8ab3a80ce4225424b33596d5766a37/oddhash-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d49412e453e8cd86c8612ae8c033d90ea331cd2dcaee8db2aebf0b785a72803d",
          "md5": "524cb1caf0cf20d3bc39448d73e497ec",
          "sha256": "e15156fe862529e3f7f453647823dab274447dfca4d833154af07a23b86ec4d9"
        },
        "downloads": -1,
        "filename": "oddhash-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "524cb1caf0cf20d3bc39448d73e497ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27308,
        "upload_time": "2021-01-15T19:14:11",
        "upload_time_iso_8601": "2021-01-15T19:14:11.413586Z",
        "url": "https://files.pythonhosted.org/packages/d4/94/12e453e8cd86c8612ae8c033d90ea331cd2dcaee8db2aebf0b785a72803d/oddhash-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a46baf82ff77ee2acf7da321262c0ff16b536b4532de812e62c6e8e5d43d3fa1",
          "md5": "4a75e3cbe0c4b9ad68c8d3abf577c080",
          "sha256": "995dfd93f93c84269cbd0b7e4fb6e88bb4c0a6d8cbdbbe6b53d90c2db80eef20"
        },
        "downloads": -1,
        "filename": "oddhash-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4a75e3cbe0c4b9ad68c8d3abf577c080",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15719,
        "upload_time": "2021-01-15T19:14:12",
        "upload_time_iso_8601": "2021-01-15T19:14:12.409940Z",
        "url": "https://files.pythonhosted.org/packages/a4/6b/af82ff77ee2acf7da321262c0ff16b536b4532de812e62c6e8e5d43d3fa1/oddhash-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d49412e453e8cd86c8612ae8c033d90ea331cd2dcaee8db2aebf0b785a72803d",
        "md5": "524cb1caf0cf20d3bc39448d73e497ec",
        "sha256": "e15156fe862529e3f7f453647823dab274447dfca4d833154af07a23b86ec4d9"
      },
      "downloads": -1,
      "filename": "oddhash-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "524cb1caf0cf20d3bc39448d73e497ec",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 27308,
      "upload_time": "2021-01-15T19:14:11",
      "upload_time_iso_8601": "2021-01-15T19:14:11.413586Z",
      "url": "https://files.pythonhosted.org/packages/d4/94/12e453e8cd86c8612ae8c033d90ea331cd2dcaee8db2aebf0b785a72803d/oddhash-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a46baf82ff77ee2acf7da321262c0ff16b536b4532de812e62c6e8e5d43d3fa1",
        "md5": "4a75e3cbe0c4b9ad68c8d3abf577c080",
        "sha256": "995dfd93f93c84269cbd0b7e4fb6e88bb4c0a6d8cbdbbe6b53d90c2db80eef20"
      },
      "downloads": -1,
      "filename": "oddhash-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "4a75e3cbe0c4b9ad68c8d3abf577c080",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15719,
      "upload_time": "2021-01-15T19:14:12",
      "upload_time_iso_8601": "2021-01-15T19:14:12.409940Z",
      "url": "https://files.pythonhosted.org/packages/a4/6b/af82ff77ee2acf7da321262c0ff16b536b4532de812e62c6e8e5d43d3fa1/oddhash-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}