{
  "info": {
    "author": "Danilo Guerrera",
    "author_email": "danilo.guerrera@unibas.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development",
      "Topic :: Utilities"
    ],
    "description": "stempel\n=========\n\nStencil TEMPlate Engineering Library\n\nThis tool allows automatic generation of loop kernels for several kind of stencil patterns.\nStempel provides a framework to generate, perform static analysis of the code (exploiting kerncraft),\ngenerate a full C code and parallelize it via openMP and blocking.\n\nFor a detailed documentation see in `<docs/>`_.\n\nInstallation\n============\n\nRemember to setup properly your envirnment in advance. For example, using conda Python:\n\n``conda create -n stempel python=3.4``\n\n``source activate stempel``\n\nClone this repository and run:\n``python ./setup.py install``\n\n\nIf you are unfamiliar with python, here is a tutorial on how to install python packages: https://packaging.python.org/installing/ . The use of virtual enviornments is usually a good choice.\n\nAdditional requirements are:\n * `kerncraft <https://github.com/RRZE-HPC/kerncraft>`_ (used to generate performance models)\n * `Intel Achitecture Code Analyzer (IACA) <https://software.intel.com/en-us/articles/intel-architecture-code-analyzer>`_, with (working) ``iaca.sh`` in PATH environment variable (used by ECM, ECMCPU and RooflineIACA models)\n * `likwid <https://github.com/RRZE-HPC/likwid>`_ (used in Benchmark model)\n * `PROVA! <https://prova.io>`_, in case you want to run a full analysis\n\nUsage\n=====\n\n1. Run stempel C code generator\n\n``stempel gen -D 2 -r 1 -i``\n\nor\n\n``stempel gen -D 2 -r 2 -k box -C variable -p``\n\n2. Run stempel benchmark generator\n\n``stempel bench code.c -m machine_file.yaml -b``\n\n3. Run a full analysis (a stencil is generated, analysed through kerncraft applying ECM/Data, Roofline and Layer Condition models; a project is set up in PROVA! and an experiment is executed. The outputs are stored to the STEMPEL workspace):\n\n``analysis -w ~/Desktop/stempelwork -p ~/PROVA ~/Desktop/provastempel -k star -m BroadwellEP_E5-2697_CoD.yml -r 2 -d 2 -e 5 -t 2 4 8 10 --method_type OpenMP-4.0-GCC-4.9.3-2.25 -C constant -c isotropic -l /apps/likwid/system/include/ /apps/likwid/system/lib/ --iaca``\n\n\nCredits\n=======\n\nImplementation: Danilo Guerrera\n\nkerncraft : Julian Hammer\n\nECM Model (theory): Georg Hager, Holger Stengel, Jan Treibig\n\nLicense\n=======\nAGPLv3\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/RRZE-HPC/stempel",
    "keywords": "hpc performance benchmark analysis stencil",
    "license": "AGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stempel",
    "package_url": "https://pypi.org/project/stempel/",
    "platform": "",
    "project_url": "https://pypi.org/project/stempel/",
    "project_urls": {
      "Homepage": "https://github.com/RRZE-HPC/stempel"
    },
    "release_url": "https://pypi.org/project/stempel/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Stencil TEMPlate Engineering Library",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13893542,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2408ad5c103ad833042d810489412a016ff000377d798eecf38b6c6bc9dbf3bd",
          "md5": "7d4b003ba7cd834e8a399225c6772423",
          "sha256": "f5fe06a8a873b94c58f26a2e7fc8b6d8c6c087adf324b1fb5a1033974cea2e44"
        },
        "downloads": -1,
        "filename": "stempel-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7d4b003ba7cd834e8a399225c6772423",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3445109,
        "upload_time": "2020-08-05T08:45:18",
        "upload_time_iso_8601": "2020-08-05T08:45:18.365037Z",
        "url": "https://files.pythonhosted.org/packages/24/08/ad5c103ad833042d810489412a016ff000377d798eecf38b6c6bc9dbf3bd/stempel-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2408ad5c103ad833042d810489412a016ff000377d798eecf38b6c6bc9dbf3bd",
        "md5": "7d4b003ba7cd834e8a399225c6772423",
        "sha256": "f5fe06a8a873b94c58f26a2e7fc8b6d8c6c087adf324b1fb5a1033974cea2e44"
      },
      "downloads": -1,
      "filename": "stempel-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7d4b003ba7cd834e8a399225c6772423",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3445109,
      "upload_time": "2020-08-05T08:45:18",
      "upload_time_iso_8601": "2020-08-05T08:45:18.365037Z",
      "url": "https://files.pythonhosted.org/packages/24/08/ad5c103ad833042d810489412a016ff000377d798eecf38b6c6bc9dbf3bd/stempel-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}