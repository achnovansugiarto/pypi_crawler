{
  "info": {
    "author": "Egil Moeller",
    "author_email": "egil.moller@piratpartiet.se",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![Python application](https://github.com/redhog/pieshell/workflows/Python%20application/badge.svg)\n\n# About\n\nPieshell is a Python shell environment that combines the\nexpressiveness of shell pipelines with the power of python iterators.\n\nIt can be used in two major ways:\n\n* As an interactive shell replacing e.g. bash\n* As an ordinary python module replacing e.g. subprocess.Popen\n\n# Table of contents\n\n* [Installation](#installation)\n* [As a shell](#as-a-shell)\n  * [Executing basic commands](#executing-basic-commands)\n  * [Full syntax for command lines](#full-syntax-for-command-lines)\n  * [Redirects](#redirects)\n  * [Interfacing between python functions and shell\n    commands](#interfacing-between-python-functions-and-shell-commands)\n  * [Environment variables](#environment-variables)\n  * [Argument expansion](#argument-expansion)\n  * [Processes](#processes)\n  * [Job control](#job-control)\n  * [Error handling](#error-handling)\n  * [Bashsource](#bashsource)\n* [As a python module](#as-a-python-module)\n  * [Environment variables](#environment-variables-1)\n  * [Argument expansion](#argument-expansion-1)\n  * [Pysh modules](#pysh-modules)\n* [Configuration](#configuration)\n* [External tools](#external-tools)\n* [Unit tests](#unit-tests)\n* [Copyright](#copyright)\n\n\n# Installation\n\n    $ pip install pieshell\n\n\n# As a shell\n\n## Executing basic commands\n\nTo start pieshell in interactive mode, just run the command pieshell:\n\n    $ pieshell\n\nThe interactive pieshell environment supports all normal python syntax.\n\n    140:/home/redhog/Projects/beta/pieshell >>> print 3+4\n    7\n\nIn addition, you can run programs just like in any shell by writing\ntheir names\n\n    140:/home/redhog/Projects/beta/pieshell >>> ls\n    build deps dist LICENSE.txt pieshell pieshell.egg-info README.md\n    setup.py\n\nParameters to programs however have to be given as proper python strings\nwithin parenthesis, like a python function call\n\n    140:/home/redhog/Projects/beta/pieshell >>> ls(\"-a\")\n    . .. build deps dist .git .gitignore LICENSE.txt pieshell\n    pieshell.egg-info .#README.md README.md setup.py\n\nPiping the standard output of one command to the standard input of\nanother works just like in bash\n\n    140:/home/redhog/Projects/beta/pieshell >>> ls(\"-a\") | grep(\"-e\", \".py\")\n    setup.py\n\nChanging directory is done using the command cd:\n\n    140:/home/redhog/Projects/beta/pieshell >>> cd(\"..\")\n    140:/home/redhog/Projects/beta >>> \n\n## Full syntax for command lines\n\nTo execute commands that require a path, for example ones in the\ncurrent directory, or commands with a dot in their names\n\n    140:/home/redhog/Projects/beta/pieshell >>> _(\"./setup.py\", \"--help\")\n    Common commands: (see '--help-commands' for more)\n    ...\n\nThe underscore represents the virtual root command that has no\nparameters, not even a command name. In general, there are two\nequivalent syntaxes for parameters: as function parameter strings, and\nas attribute names. The two syntaxes can be mixed freely. All of the\nfollowing are equivalent:\n\n    _(\"foo\", \"bar\", \"fie\")\n    _.foo(\"bar\", \"fie\")\n    _.foo.bar.fie()\n    foo.bar.fie()\n    foo.bar.fie\n\nExample usage:\n\n    git.diff(\"-U\")\n\nIn addition to these two generic syntaxes, there are two more\nspecialized syntaxes for options:\n\nThe function call syntax also supports named parameters, which are\nconverted into \"--name=value\" pairs. Note that the order can not be\nguaranteed as named parameters are sent around as dictionaries inside\npython:\n\n    git.diff(unified=4)\n\nShort options, like `-U` above do not actually need quotes, and can be\nspecified inside or outside the function call syntax:\n\n    git.diff(-U, -w)\n    git.diff-U-w\n\nNotes for programs with wierd parameter syntax, like `find`: `find`\ndoes not use the standard double minus (`--`) before long options, and\ntakes the option value as a separate argument, rather than separating\nthe name and value with `=` like most programs. The above special\nsyntax for short options actually cover this use case too:\n\n    find(\".\", -name, \"*.py\")\n\n## Redirects\n\nStandard out and standard in of a pipeline can be redirected to a file\nby piping to or from a string (the filename). As a special case, None\nis a short hand for \"/dev/null\"\n\n    140:/home/redhog/Projects/beta/pieshell >>> ls | \"foo\"\n\n    140:/home/redhog/Projects/beta/pieshell >>> \"foo\" | cat\n    bar\n    build\n    deps\n    dist\n    foo\n    LICENSE.txt\n    pieshell\n    pieshell.egg-info\n    README.md\n    setup.py\n\n    140:/home/redhog/Projects/beta/pieshell >>> ls | None\n\nRedirects can also be made with a more explicit syntax that allows\nredirecting other file descriptors than stdin and stdout:\n\n    139:/home/redhog/Projects/beta/pieshell >>> cat |\n      Redirect(\"stdin\", \"foo\") | Redirect(\"stdout\", \"bar\")\n\nThe constructor for redirect takes the following arguments:\n\n    Redirect(fd, source, flag=None, mode=0777)\n\nfd can be either an int, or one of \"stdin\", \"stdout\" and \"stderr.\nsource is either a string filename, or an int file descriptor. flag\nand mode have the same semantics as for os.open(). Flags do not have\nto be given for stdin, stdout and stderr / fd 0, 1 and 2 and defaults\nto os.O_RDONLY or os.O_RDONLY | os.O_CREAT.\n\n## Interfacing between python functions and shell commands\n\nShell commands are first class python objects, and their input and\noutput can be interacted with easily from python in the form of\niterators. Iterating over a shell command iterates over the lines of\nits standard out\n\n    140:/home/redhog/Projects/beta/pieshell >>> list(ls(\"-a\"))\n    ['.', '..', 'build', 'deps', 'dist', '.git', '.gitignore',\n     'LICENSE.txt', 'pieshell', 'pieshell.egg-info', '.#README.md',\n     'README.md', 'setup.py']\n    140:/home/redhog/Projects/beta/pieshell >>> for x in ls(\"-a\"):\n    ...   if x.endswith('.py'):\n    ...      print x\n    ... \n    setup.py\n\nPiping an iterator into a shell command, sends its items as lines to\nthe standard in of the shell command\n\n    140:/home/redhog/Projects/beta/pieshell >>> list([\"foo\", \"bar.py\", \"fie.py\"] |\n      grep(\"-e\", \".py\"))\n    ['bar.py', 'fie.py']\n    140:/home/redhog/Projects/beta/pieshell >>> def foo():\n    ...     yield \"hello\"\n    ...     yield \"world\"\n    140:/home/redhog/Projects/beta/pieshell >>> foo() | cat\n    hello\n    world\n\nIn addtion, iterators and pipelines may be used as arguments to\ncommands and will be seen by the command as a filename, which when\nopened and read from will produce the output of that iterator as\nlines, or the standard output of the pipeline.\n\n    140:/home/redhog/Projects/beta/pieshell >>> list(cat([\"foo\", \"bar\"]))\n    ['foo', 'bar']\n    140:/home/redhog/Projects/beta/pieshell >>> list(cat([\"foo\", \"bar\"] | cat))\n    ['foo', 'bar']\n\n## Environment variables\n\nEnvironment variables are available directly in the shell as\nvariables, together with any local python variables. In addition, they\nare available in the dictionary exports.\n\n    140:/home/redhog/Projects/beta/pieshell >>> LANG\n    'en_US.UTF-8'\n\nAssigning to the name of an already exported environment variable\nupdates the value of that variable.\n\n    140:/home/redhog/Projects/beta/pieshell >>> LANG = \"sv_SE.UTF-8\"\n    140:/home/redhog/Projects/beta/pieshell >>> exports[\"LANG\"]\n    'sv_SE.UTF-8'\n\nAssigning to a variable name not already used as an environment\nvariable creates a local python variable.\n\n    140:/home/redhog/Projects/beta/pieshell >>> foo = \"hello\"\n    140:/home/redhog/Projects/beta/pieshell >>> \"foo\" in exports\n    False\n    140:/home/redhog/Projects/beta/pieshell >>> foo\n    'hello'\n\nTo export a new variable, you have to assign it in the exports\ndictionary.\n\n    140:/home/redhog/Projects/beta/pieshell >>> exports[\"bar\"] = \"world\"\n    140:/home/redhog/Projects/beta/pieshell >>> bar\n    'world'\n\n## Argument expansion\n\nAll parameter strings in commands are subject to expansion unless\nwrapped in a call to R(), e.g. R(\"my * string * here\").\n\n  * \"~\" and \"~username\" are expanded using os.path.expanduser()\n\n  * Variable expansion is done using the python % operator on python\n    variables as well as environment variables.\n\n  * Pattern matching is done using glob.glob()\n\n## Processes\n\nA running pipeline is represented by a RunningPipeline instance. This\nobject is returned by the Pipeline.run() and\nPipeline.run_interactive() methods. In interactive shell mode the\nRunningPipeline instance for the last executed pipeline is available\nin the last_pipeline variable.\n\nA RunningPipeline instance can be used to extract events and statuses\nof the processes involved in the pipeline:\n\n* RunningPipeline.processes is a list of RunningItem instances, each\n  representing an external process or a python function.\n\n* RunningPipeline.failed_processes is a list of RunningItem instances\n  for those processes in the pipeline that have failed (returned a\n  non-zero exit status).\n\n* RunningPipeline.pipeline is a (deep) copy of the original pipeline\n  object, with additional run status added, e.g. links to processes,\n  exit status etc.\n\n* RunningPipeline.wait() waits for all processes in the pipeline to\n  terminate.\n\nA RunningItem instance represents an external process or a python\nfunction:\n\n* RunningItem.cmd points to the part of the\n  RunningPipeline.pipeline structure that gave rise to this process.\n\n* RunningItem.is_running is True if the process is still\n  running.\n\n* RunningItem.is_failed is True if the process has failed somehow\n  (process with non-zero exit status, function threw an exception).\n\n* RunningItem.output_content contains a dictionary of the output of\n  any STRING redirection for the process with the file descriptors as\n  keys.\n\n* RunningProcess.iohandler.last_event contains a dictionary of the\n  members of the last event from the process. The members have the\n  same names and meaning as the members of the signalfd_siginfo\n  struct, see \"man signalfd\" for details.\n\n* If `psutil` is installed, a `psutil.Process()` instance is available\n  as `RunningProcess.details`, and most of its members and methods are\n  available directly as members and methods on the `RunningProcess`\n  instance, e.g. `RunningProcess.environ()`, `RunningProcess.exe()`.\n \n## Job control\n\nA pipeline can be started in the background by appending `&True`, or\n`&None` to do the same and also redirect stdout to /dev/null.\n\n`last_pipeline` can be used to access the backgrounded pipeline.\n\nA running pipeline can be stopped by hitting `CTRL-Z`. A stopped\npipeline can be restarted in the background with any of\n\n    bg\n    bg(last_pipeline)\n    last_pipeline.restart()\n\nor in the foreground with\n\n   fg\n   fg(last_pipeline)\n   last_pipeline.wait()\n\n## Error handling\n\nWhen a pipeline fails, e.g. by one of the involved processes exiting\nwith a non-zero status, RunningPipeline.wait() and\nPipeline.run_interactive() will throw a PipelineFailed exception after\nall processes have exited.\n\n* PipelineFailed.pipeline holds a reference to the RunningPipeline\n  instance that generated the exception.\n\nIf a pipeline is interrupted with CTRL-C, a PipelineInterrupted is\nraised.\n\n* PipelineInterrupted.pipeline holds a reference to the\n  RunningPipeline instance.\n\nIf you want to catch errors in a script, you can use normal Python\nexception handling:\n\n    try:\n    except PipelineFailed as e:\n        e.pipeline.failed_processes[0].pipeline\n\n## Bashsource\n\nBash provides the command `source` to run the content of a bash script inside the current shell,\neffectively letting an external script update the environment variables of the running shell.\nThis functionality is often used for setting up local development environments, like `virtualenv`.\n\nPieshell provides a builtin to emulate this functionality, with bash scripts:\n\n    >>> bashsource(\"myscript.sh\")\n\nwill run `myscript.sh` in a bash shell followed by `declare -x`. It parses the output of\n`declare -x` and updates `exports` accordingly. As a special case\n\n    >>> bashsource()\n\nwill do the same, but without running any script first, esentially\njust using whatever variables are set up by your `.bashrc` or\n`.profile`.\n\n\n# As a python module\n\n    >>> from pieshell import *\n\nAll functionality available in the interactive shell is available when\nusing pieshell as an ordinary python module. However, a slighly more\ncumbersome syntax is required.\n\nIn particular, shell commands can not be run just by writing their\nnames. Instead, they have to be accessed as members of the \"env\"\nobject:\n\n    >>> list(env.ls(\"-a\") | env.grep(\"-e\", \"io\"))\n    [\"iterio.py\", \"iterio.pyc\"]\n\nCommands are also not run with standard out to the screen when simply\nprinted using the repr() function but must instead be used as\niterators as is done above using the list() function.\n\nA pipeline can be run in the background (with input/output to the screen) using\n\n    >>>> status = ~(env.ls(\"-a\") | env.grep(\"-e\", \"io\"))\n\nor in the forground (waiting until it exists)\n\n    >>>> status = +(env.ls(\"-a\") | env.grep(\"-e\", \"io\"))\n\n\nThe env object holds the current working directory, which can be changed with\n\n    >>> env.cd(\"..\")    \n\nYou can also create multiple environments and use them\nsiumultaneously, even within the same pipeline\n\n    >>> env2 = env()\n    >>> env2.cd(\"somedir\")\n\n## Environment variables\n\nEnvironment variables are available as a dictionary in env._exports.\n\n## Argument expansion\n\nVariable expansion is only done on environment variables, as there is\nno way for pieshell to find out about the right scope to do variable\nlookups in in any given situation.\n\n## Pysh modules\n\nIn addition to being able to use pieshell code in ordinary python\nmodules using this slightly more verbose syntax, pieshell supports\nimporting modules named modulename.pysh rather than modulename.py.\nPysh modules support the full syntax of the interactive pieshell\nconsole. Pysh modules can be imported using the standard import syntax\nas soon as pieshell itself has been imported, and from the interactive\npieshell.\n\n# Configuration\n\nWhen running pieshell in interactive mode it executes\n~/.config/pieshell at startup if it exists. This file can be used to\nconfigure the interactive environment the same way ~/.bashrc can be\nused to configure the bash shell. For example it can be used to load\npython modules, execute shell pipelines or set environment variables.\nAn example config file is supplied in contrib/cofig.\n\n# Builtins\n\nWhile pieshell lets you pipe to and from ordinary python functions,\nthey don't offer the same syntax and tab-completion as external\ncommands (e.g. 'myfunction.arg1.arg2(name=value)'), they can't modify\nthe environment or do fancy redirects. Builtin commands provide all of\nthis, at the cost of a slightly clumsier syntax:\n\n    class MyMagicBuiltin(pieshell.Builtin):\n        \"\"\"More magic to the people\n        \"\"\"\n        name = \"magic\"\n\n        def _run(self, redirects, sess, indentation = \"\"):\n            # redirects is an instance of pieshell.Redirects\n            #\n            # sess is an opaque data structure that must be passed to\n            # any call to _run() you do yourself from this method (or\n            # any function it calls).\n            #\n            # indentation is a string containing only whitespace, to\n            # be prepended to any debug printing lines you print.\n            #\n            # Returns a list of instances of some pieshell.RunningItem\n            # subclass\n\n            self._cmd = self._env.find(\n                \".\", \"-name\", \"%s.txt\" % self._arg[1]) | self._env.tac\n            return self._cmd._run(redirects, sess, indentation)\n\n\n        # Optional for tab completion\n        def __dir__(self):\n            return [\"light\", \"dark\"]\n    pipeline.BuiltinRegistry.register(CdBuiltin)\n\n# External tools\n\nA short list of tools that might be usefull together with this project:\n\n* [psutil](http://pythonhosted.org/psutil) - python api for getting ps / top style information about a process\n* [ReRedirect](https://github.com/jerome-pouiller/reredirect) - redirect io for an already running process\n* [Reptyr](https://github.com/nelhage/reptyr) - move a running process to a new controlling terminal\n* [Deptyr](https://github.com/antifuchs/deptyr) - forward output for a new process to another controlling terminal\n\n# Unit tests\n\nTo run the unit- and integration tests\n\n    pip install nose2\n    nose2 -s tests\n\n# Copyright\n\nPieshell copyright 2016 Egil Möller <egil.moller@piratpartiet.se>\n\nPieshell is free software: you can redistribute it and/or modify it\nunder the terms of the GNU Lesser General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this program. If not, see\n<http://www.gnu.org/licenses/>.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/redhog/pieshell",
    "keywords": "Python shell pipelines suprocess",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pieshell",
    "package_url": "https://pypi.org/project/pieshell/",
    "platform": null,
    "project_url": "https://pypi.org/project/pieshell/",
    "project_urls": {
      "Homepage": "https://github.com/redhog/pieshell"
    },
    "release_url": "https://pypi.org/project/pieshell/0.1.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Pieshell is a Python shell environment that combines the expressiveness of shell pipelines with the power of python iterators. It can be used both as an interactive shell and as an ordinary python module replacing e.g. subprocess.Popen",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14876795,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c005614343581c17995639650a85da3dfa665f2712ed7e9e27f681525b1d41ca",
          "md5": "5998afcaf26ef8ad491dea46db4e98cf",
          "sha256": "c0c5492e8b53fc000a683c314df5c6216f9e26ff246ea261319ddfcb0de9cd12"
        },
        "downloads": -1,
        "filename": "pieshell-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5998afcaf26ef8ad491dea46db4e98cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4950,
        "upload_time": "2016-07-18T20:33:29",
        "upload_time_iso_8601": "2016-07-18T20:33:29.859302Z",
        "url": "https://files.pythonhosted.org/packages/c0/05/614343581c17995639650a85da3dfa665f2712ed7e9e27f681525b1d41ca/pieshell-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3368a20ce49795e5c28f1c12ed9e0c33fe7d06e019f86f5cab65befd657eb4ba",
          "md5": "7eddb794a15ec02a7d8cbe88b7d7f7ef",
          "sha256": "c8682eb841be205174cb32d39ec280c4db49bffb583dbac6591f71f1c7c3c7cf"
        },
        "downloads": -1,
        "filename": "pieshell-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7eddb794a15ec02a7d8cbe88b7d7f7ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8094,
        "upload_time": "2016-07-24T20:29:55",
        "upload_time_iso_8601": "2016-07-24T20:29:55.602643Z",
        "url": "https://files.pythonhosted.org/packages/33/68/a20ce49795e5c28f1c12ed9e0c33fe7d06e019f86f5cab65befd657eb4ba/pieshell-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "453ef8618559849000832e4aee0e75b49e2590081b34459d3cea129d7cd5b7b7",
          "md5": "4a89a6e157b455e9fb522515e6c2d2ec",
          "sha256": "aee4b81c8547c3ad8a6b76c7d2d1928f8c2de99d8fc7ed78a87d299e40823cd7"
        },
        "downloads": -1,
        "filename": "pieshell-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4a89a6e157b455e9fb522515e6c2d2ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8129,
        "upload_time": "2016-07-24T21:42:04",
        "upload_time_iso_8601": "2016-07-24T21:42:04.097783Z",
        "url": "https://files.pythonhosted.org/packages/45/3e/f8618559849000832e4aee0e75b49e2590081b34459d3cea129d7cd5b7b7/pieshell-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc3f7148248e999aa6d5810ae832cf79f0f741455981d72cfe97fd2cb692e1d0",
          "md5": "96a2ec8badd50c429347b4b4dfe5b106",
          "sha256": "bf5510c8c056fbca7ac7b71d38563f99bccb511706544efd2568cec37a7e7d84"
        },
        "downloads": -1,
        "filename": "pieshell-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "96a2ec8badd50c429347b4b4dfe5b106",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8135,
        "upload_time": "2016-07-24T21:47:14",
        "upload_time_iso_8601": "2016-07-24T21:47:14.799466Z",
        "url": "https://files.pythonhosted.org/packages/cc/3f/7148248e999aa6d5810ae832cf79f0f741455981d72cfe97fd2cb692e1d0/pieshell-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1af600461ea6a755fc1af3f114fb6eaf7d527832f26591211ce995d335864f6b",
          "md5": "5c0927e2605acf12d4c8b3d48b850834",
          "sha256": "f4cac0e24aff2452bb0aa9013f80de3ed050ca57177ecd6687e7592833e1f2e7"
        },
        "downloads": -1,
        "filename": "pieshell-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5c0927e2605acf12d4c8b3d48b850834",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8264,
        "upload_time": "2016-07-25T12:57:44",
        "upload_time_iso_8601": "2016-07-25T12:57:44.911989Z",
        "url": "https://files.pythonhosted.org/packages/1a/f6/00461ea6a755fc1af3f114fb6eaf7d527832f26591211ce995d335864f6b/pieshell-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68dd846b19348a9dbc6c3b1866558fdea020c0d0056d4a3ac81f0659459a3386",
          "md5": "9e94f0651b7cdb137b6911a8abd8bf47",
          "sha256": "ffd79fe10eccc7b99f355fd25c4add20f1ab382a9460db3f536d1e82b9d859c7"
        },
        "downloads": -1,
        "filename": "pieshell-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "9e94f0651b7cdb137b6911a8abd8bf47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13869,
        "upload_time": "2016-08-12T08:47:30",
        "upload_time_iso_8601": "2016-08-12T08:47:30.010722Z",
        "url": "https://files.pythonhosted.org/packages/68/dd/846b19348a9dbc6c3b1866558fdea020c0d0056d4a3ac81f0659459a3386/pieshell-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9726ac1112c2037af59ed1d3d6b6183b62b366fd97a9e6aefc9190b5c3f99e9b",
          "md5": "c70930a274cc6b65a99374d8938faafd",
          "sha256": "55b7caa8b6e7bd24d4b0e0fad15ef9b5034c91f743daa0859194b6c77100967f"
        },
        "downloads": -1,
        "filename": "pieshell-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "c70930a274cc6b65a99374d8938faafd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22701,
        "upload_time": "2017-09-21T13:36:37",
        "upload_time_iso_8601": "2017-09-21T13:36:37.166492Z",
        "url": "https://files.pythonhosted.org/packages/97/26/ac1112c2037af59ed1d3d6b6183b62b366fd97a9e6aefc9190b5c3f99e9b/pieshell-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9a89e7e2094bc9acefe42b1fbc2c218a6e9fbd0a4ebea4f5ce75613e3d51bd0",
          "md5": "15bf2423e8f54b1b8340f42a9735ad22",
          "sha256": "93c350a5bb343272f0109c9b51f37c67fec3392bbcfa5bc4b352d71938a330c0"
        },
        "downloads": -1,
        "filename": "pieshell-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "15bf2423e8f54b1b8340f42a9735ad22",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28915,
        "upload_time": "2021-01-10T18:04:19",
        "upload_time_iso_8601": "2021-01-10T18:04:19.960439Z",
        "url": "https://files.pythonhosted.org/packages/b9/a8/9e7e2094bc9acefe42b1fbc2c218a6e9fbd0a4ebea4f5ce75613e3d51bd0/pieshell-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e31480ba302808b52e30ff710cf59cd299bc4799cafa188921fde59a9aac7514",
          "md5": "5480f476b8f63f6de3015fb1d979f907",
          "sha256": "280db035d0b331de6ffa8e4703a7e51edd65bfb21cf54b0608f1148bd0eea5fe"
        },
        "downloads": -1,
        "filename": "pieshell-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5480f476b8f63f6de3015fb1d979f907",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28930,
        "upload_time": "2021-01-10T18:38:33",
        "upload_time_iso_8601": "2021-01-10T18:38:33.353889Z",
        "url": "https://files.pythonhosted.org/packages/e3/14/80ba302808b52e30ff710cf59cd299bc4799cafa188921fde59a9aac7514/pieshell-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "060884b89b6167e5e67ed41c757dc91eaaad5a1fe484c668f5da45377d49887f",
          "md5": "612535d024c8dec7e32d80a5aa5b6b1d",
          "sha256": "504e11ab1f79a75af3e32f54d6d78e6fb5c6943a042ab1a201db54224c735504"
        },
        "downloads": -1,
        "filename": "pieshell-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "612535d024c8dec7e32d80a5aa5b6b1d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31672,
        "upload_time": "2021-01-10T18:42:08",
        "upload_time_iso_8601": "2021-01-10T18:42:08.278218Z",
        "url": "https://files.pythonhosted.org/packages/06/08/84b89b6167e5e67ed41c757dc91eaaad5a1fe484c668f5da45377d49887f/pieshell-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed99155a3ebf73996221f7949f1abd9b1d6d147529940a5036dba8515c2a59a9",
          "md5": "c3244cbde0dded1e4892c2ee0edd69ab",
          "sha256": "ae66720a6db934c3ab0cbde7e8a13c9b0b89d6fca4f1b2056b96c65bbbee2b49"
        },
        "downloads": -1,
        "filename": "pieshell-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c3244cbde0dded1e4892c2ee0edd69ab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32267,
        "upload_time": "2021-01-10T18:44:10",
        "upload_time_iso_8601": "2021-01-10T18:44:10.234011Z",
        "url": "https://files.pythonhosted.org/packages/ed/99/155a3ebf73996221f7949f1abd9b1d6d147529940a5036dba8515c2a59a9/pieshell-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f15523c5e89ff400e7264a4ae017cf6650dd56ad03b51e27e9ec6a4341586ae",
          "md5": "cb1699310c507bf26ce444d511f3fc16",
          "sha256": "901a054ae4934f5c282ec3fb375b7dd1ed24ac609a9178449670b1536f99e0d0"
        },
        "downloads": -1,
        "filename": "pieshell-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "cb1699310c507bf26ce444d511f3fc16",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32644,
        "upload_time": "2021-01-19T22:23:26",
        "upload_time_iso_8601": "2021-01-19T22:23:26.861818Z",
        "url": "https://files.pythonhosted.org/packages/2f/15/523c5e89ff400e7264a4ae017cf6650dd56ad03b51e27e9ec6a4341586ae/pieshell-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bd4ffedcdfa3543516284dd5dec91dc637a943bf34e7ce25f0ac8c0ca15970f",
          "md5": "95ab8a6e28d298901d82b39866592e12",
          "sha256": "ecbbec26382d72588b90ae4a1ec66dac9181f816172b33f61e6896f3cad180a1"
        },
        "downloads": -1,
        "filename": "pieshell-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "95ab8a6e28d298901d82b39866592e12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33643,
        "upload_time": "2021-01-20T18:00:49",
        "upload_time_iso_8601": "2021-01-20T18:00:49.993538Z",
        "url": "https://files.pythonhosted.org/packages/8b/d4/ffedcdfa3543516284dd5dec91dc637a943bf34e7ce25f0ac8c0ca15970f/pieshell-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2efadf13c441429225ec2625743246f97d89fbdb13651114e5a1b53a09a00424",
          "md5": "820c2eb98d3aaaa6ce03ed0e765aa33a",
          "sha256": "97fd2f392137e03e713e38c964d77111348695ce1255a1bc85f17fa66351ff58"
        },
        "downloads": -1,
        "filename": "pieshell-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "820c2eb98d3aaaa6ce03ed0e765aa33a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37255,
        "upload_time": "2022-08-25T09:38:50",
        "upload_time_iso_8601": "2022-08-25T09:38:50.580351Z",
        "url": "https://files.pythonhosted.org/packages/2e/fa/df13c441429225ec2625743246f97d89fbdb13651114e5a1b53a09a00424/pieshell-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2efadf13c441429225ec2625743246f97d89fbdb13651114e5a1b53a09a00424",
        "md5": "820c2eb98d3aaaa6ce03ed0e765aa33a",
        "sha256": "97fd2f392137e03e713e38c964d77111348695ce1255a1bc85f17fa66351ff58"
      },
      "downloads": -1,
      "filename": "pieshell-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "820c2eb98d3aaaa6ce03ed0e765aa33a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 37255,
      "upload_time": "2022-08-25T09:38:50",
      "upload_time_iso_8601": "2022-08-25T09:38:50.580351Z",
      "url": "https://files.pythonhosted.org/packages/2e/fa/df13c441429225ec2625743246f97d89fbdb13651114e5a1b53a09a00424/pieshell-0.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}