{
  "info": {
    "author": "Erik van Widenfelt",
    "author_email": "ew2789@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 4.1",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10"
    ],
    "description": "|pypi|\n\n\nMETA3 Demo Project\n==================\n\nThis is a demo project of the EDC used by the META3 clinical trial.\n\nThis demo sets up the META3 EDC to run on a Django test server in DEBUG mode on your local machine.\n\nThese are NOT the installation steps for a production system.\n\nSee also:\n\nhttps://www.lstmed.ac.uk/research/departments/international-public-health/respond-africa/meta\n\nhttps://github.com/meta-trial/meta-edc\n\nhttps://github.com/clinicedc\n\nhttps://www.djangoproject.com\n\nInstallation\n------------\n\nYou'll need `mysql` and `conda`.\n\nCreate the database\n\n.. code-block:: bash\n\n  mysql -Bse 'create database meta_example character set utf8;'\n\n\nCreate a working folder and clone the repo\n\n.. code-block:: bash\n\n  mkdir -p ~/projects/ && \\\n  cd ~/projects && \\\n  git clone https://github.com/meta-trial/meta3-sample.git && \\\n  cd ~/projects/meta3-sample\n\n\nCreate a conda environment named \"meta3_sample\" and activate\n\n.. code-block:: bash\n\n  conda create -n meta3_sample python=3.10 && \\\n  conda activate meta3_sample\n\n\nInstall the meta-edc application\n\n.. code-block:: bash\n\n  pip install meta-edc\n\n\nThe application is now installed, but there is more to do.\n\nWe need to make some changes to the configuration. Sensitive config values are stored in the environment (see https://12factor.net) by using an `.env` and `environ`. A sample environment file has been provided. Copy the sample environment file to a working copy\n\n.. code-block:: bash\n\n    cd ~/projects/meta3-sample && cp .env-sample .env\n\n\nEdit the working copy of the environment file (.env). At the top of the file you will find ``DATABASE_URL``. Change the value for ``DATABASE_URL`` to include your mysql user and password. The mysql account will need root or root-like permissions. Since this is a test server running locally, just use `root`.\n\n.. code-block:: bash\n\n  DATABASE_URL=mysql://<username>:<password>@127.0.0.1:3306/meta3_sample\n\n\nNext we need to create the keys used for data encryption. The system encrypts sensitive data (personally identifiable information or PII) using django-crypto-fields.\n\nRun manage.py for the first time to create the encryption keys\n\n.. code-block:: bash\n\n  python manage.py check\n\nGo back and edit the environment file (.env). Change DJANGO_AUTO_CREATE_KEYS to False\n\n.. code-block:: bash\n\n    DJANGO_AUTO_CREATE_KEYS=False\n\nRun manage.py `check` again. You should see a final message \"System check identified 3 issues (1 silenced)\". For the test server, you may ignore these warnings.\n\n.. code-block:: bash\n\n  python manage.py check\n\nNow you are ready to prepare the database.\n\nFor now we will just restore the sample data provided in this repo. (Of course, you may run `python manage.py migrate`\nbut see the note below before going that route.)\n\nThe sample database is the exactly\nwhat you would get if you ran `python manage.py migrate`.\n\nRestore the sample data instead migrating from a clean database\n\n.. code-block:: bash\n\n    cd ~/project/meta3-sample/sample_data && \\\n    tar xczf meta3_sample.sql.tar.gz && \\\n    mysql met3_sample < meta3_sample.sql\n\nNote\n    Running `migrate` on an empty database takes more than 30 min. If you do try to run `migrate` instead of\n    restoring the sample data, in addition to the time it takes, you will run into a few simple problems with\n    the `data` migrations. See the note on `running migrations on an empty database` in **Troubleshooting** below.\n\nNow that our database has the required data schema, we need to run the post-migrate signals. To do this we just\nrun the `migrate` command.\n\n.. code-block:: bash\n\n    # run migrate to trigger the post-migrate signals\n    python manage.py migrate\n\nNext, import the list of holidays that will be used when scheduling appointments.\n\n.. code-block:: bash\n\n    python manage.py import_holidays\n\nNext, create a user. Do this from the command line using the `createsuperuser` command.\n\n.. code-block:: bash\n\n  python manage.py createsuperuser\n\nImportant\n    The new user you just created is a \"superuser\". Once logged in you need to remove the superuser status for\n    this account.\n\nNow start up the test server using the `runserver` command\n\n.. code-block:: bash\n\n  python manage.py runserver\n\n\nOpen your browser and point it to\n\n.. code-block:: bash\n\n  localhost:8000\n\nYou should see the login screen.\n\nType in the credentials of the `superuser` account you just created.\n\nOnce logged in, go to your user account and edit the permissions on your account. You can use the link at the top right corner.\n\n* Under the section **Personal Details**, fill in your name and email.\n* Under the section **Permissions**, uncheck *Superuser status*.\n* At the bottom of section **User Profile** you will see `Roles`. Add yourself to the following roles:\n\n    * Account Manager\n    * Staff\n    * Clinician Super\n\nNow you are ready to screen your first participant.\n\n\nTroubleshooting\n---------------\n\nRunning migrate on an empty database\n++++++++++++++++++++++++++++++++++++\n\nIf you run `migrate` on an empty database, a few of the `data` migrations might fail.\nSince these failed migrations are `data` migrations and not `schema` migrations, it is safe to run migrate until it fails,\nfake the failed `data` migration, and continue.\n\n.. code-block:: bash\n\n    python manage.py migrate\n\n    # fake the data migration\n    python manage.py migrate meta_prn 0035 --fake\n\n    # restart migrate\n    python manage.py migrate\n\n    # fake the data migration\n    python manage.py migrate meta_subject 0107 --fake\n\n    # restart migrate\n    python manage.py migrate\n\n    # fake the data migration\n    python manage.py migrate meta_subject 0132 --fake\n\n    # restart migrate\n    python manage.py migrate\n\n\n.. |pypi| image:: https://img.shields.io/pypi/v/meta3-sample.svg\n    :target: https://pypi.python.org/pypi/meta3-sample\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/meta-trial/meta3-sample",
    "keywords": "django,edc,META3,clinicedc,clinical trials",
    "license": "GPL license, see LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "meta3-sample",
    "package_url": "https://pypi.org/project/meta3-sample/",
    "platform": null,
    "project_url": "https://pypi.org/project/meta3-sample/",
    "project_urls": {
      "Homepage": "https://github.com/meta-trial/meta3-sample"
    },
    "release_url": "https://pypi.org/project/meta3-sample/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "Sample / Demo project for the META3 edc",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15375594,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00437768c4a0e510ea7083dc2263d82f77f12fba79c24b89259ae8e33bb40b84",
          "md5": "9c6b81bb5b7dbb577d239d0ef79950d3",
          "sha256": "3e3b6fda171b460704bc9cc387e0351d4b7272ef4144e96a6a3d9d8a14048017"
        },
        "downloads": -1,
        "filename": "meta3_sample-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c6b81bb5b7dbb577d239d0ef79950d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 22982,
        "upload_time": "2022-10-11T14:59:03",
        "upload_time_iso_8601": "2022-10-11T14:59:03.093757Z",
        "url": "https://files.pythonhosted.org/packages/00/43/7768c4a0e510ea7083dc2263d82f77f12fba79c24b89259ae8e33bb40b84/meta3_sample-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c79d6417a5e375707d477a5fc47884c7be6a8d3a7774838e4c949db888d87bc3",
          "md5": "93038da5292af5974e818bc71432c665",
          "sha256": "38f24c51372486a847915489750ef90a9fd0016ec51fcbb063870c023cd6bf3b"
        },
        "downloads": -1,
        "filename": "meta3-sample-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "93038da5292af5974e818bc71432c665",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 946774,
        "upload_time": "2022-10-11T14:59:05",
        "upload_time_iso_8601": "2022-10-11T14:59:05.064247Z",
        "url": "https://files.pythonhosted.org/packages/c7/9d/6417a5e375707d477a5fc47884c7be6a8d3a7774838e4c949db888d87bc3/meta3-sample-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "00437768c4a0e510ea7083dc2263d82f77f12fba79c24b89259ae8e33bb40b84",
        "md5": "9c6b81bb5b7dbb577d239d0ef79950d3",
        "sha256": "3e3b6fda171b460704bc9cc387e0351d4b7272ef4144e96a6a3d9d8a14048017"
      },
      "downloads": -1,
      "filename": "meta3_sample-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9c6b81bb5b7dbb577d239d0ef79950d3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 22982,
      "upload_time": "2022-10-11T14:59:03",
      "upload_time_iso_8601": "2022-10-11T14:59:03.093757Z",
      "url": "https://files.pythonhosted.org/packages/00/43/7768c4a0e510ea7083dc2263d82f77f12fba79c24b89259ae8e33bb40b84/meta3_sample-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c79d6417a5e375707d477a5fc47884c7be6a8d3a7774838e4c949db888d87bc3",
        "md5": "93038da5292af5974e818bc71432c665",
        "sha256": "38f24c51372486a847915489750ef90a9fd0016ec51fcbb063870c023cd6bf3b"
      },
      "downloads": -1,
      "filename": "meta3-sample-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "93038da5292af5974e818bc71432c665",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 946774,
      "upload_time": "2022-10-11T14:59:05",
      "upload_time_iso_8601": "2022-10-11T14:59:05.064247Z",
      "url": "https://files.pythonhosted.org/packages/c7/9d/6417a5e375707d477a5fc47884c7be6a8d3a7774838e4c949db888d87bc3/meta3-sample-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}