{
  "info": {
    "author": "Ayo Ayibiowu",
    "author_email": "charlesayibiowu@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# NanoCamera [![MIT License](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/thehapyone/NanoCamera/blob/master/LICENSE) [![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/thehapyone/nanocamera/issues) [![HitCount](http://hits.dwyl.com/thehapyone/NanoCamera.svg)](http://hits.dwyl.com/thehapyone/NanoCamera)\n\nA simple to use camera interface for the Jetson Nano for working with USB, CSI, IP and also RTSP cameras or streaming video in Python 3.\n\nIt currently supports the following types of camera or streaming source:\n*  Works with CSI Cameras (Tested and Works)\n*  Works with various USB cameras (Tested with Logitech USB camera)\n*  Works with RTSP streaming camera and video with hardware acceleration (only supports H.264 video codec)\n*  Works with IP Cameras(JPEG codec) or any MJPEG streaming source (Currently, supports CPU acceleration. TODO: Hardware acceleration)\n\nIf you like **NanoCamera** library - give it a star, or fork it and contribute!. Updates are always welcomed.\n\n## Features\n* It is OpenCV ready. The image file can be called directly with OpenCV imshow\n* Image file is a NumPy RGB array.\n* Support different Camera Flip Mode (Counterclockwise, Rotate 180 degrees, Clockwise - 90 degrees, Horizontal Flip, Vertical Flip)\n* Can be used with multiple cameras.\n* Support Frame rate enforcement. *Only available for USB, RTSP, and IP/MJPEG cameras.\n* Frame rate enforcement ensures the cameras work at the given frame rate using GStreamer video rate plugin\n* It is based on [Accelerated GStreamer Plugins](https://developer.download.nvidia.com/embedded/L4T/r32_Release_v1.0/Docs/Accelerated_GStreamer_User_Guide.pdf?uIzwdFeQNE8N-vV776ZCUUEbiJxYagieFEqUoYFM9XSf9tbslxWqFKnVHu8erbZZS20A7ADAIgmSQJvXZTb0LkuGl9GoD5HJz4263HcmYWZW0t2OeFSJKZOfuWZ-lF51Pva2DSDtu2QPs-junm7BhMB_9AMQRwExuDb5zIhf_o8PIbA4KKo)\n* Should work with other Jetson boards like Jetson TX1, TX2 and others (Not tested)\n* Support both Hardware and CPU acceleration.\n* Easily read images as ``numpy`` arrays with ``image = camera.read()``\n* Supports threaded read - available to all camera types. To enable a fast threaded read, you will enable the enforce_fps: ``enforce_fps = True``\n* Check the status of the camera after initialization with ``isReady()`` function. Returns ``True`` if ready and ``False`` if otherwise.\n* Provide debugging support. Added error codes and an optional exception handling. See example in [Debugging](https://github.com/thehapyone/NanoCamera#debugging). Now you can restart the camera if something goes wrong or send an admin notice if your camera goes down.\n* Support multiple CSI cameras using the ``device_id`` parameter. See examples.\n\n## Requirements\nThis library requires OpenCV to be installed to work.\nIf you don't have OpenCV, you can install one with pip:\n```bash\npip3 install opencv-python \n```\n\n## Install\nInstallation is simple. Can be installed in two ways with Pip or Manually.\n##### Pip Installation\n```bash\npip3 install nanocamera \n```\n##### Manual Installation\n```bash\ngit clone https://github.com/thehapyone/NanoCamera\ncd NanoCamera\nsudo python3 setup.py install\n```\n\n## Usage & Example\nUsing NanoCamera is super easy. Below we show some usage examples.  You can find more in the [examples](https://github.com/thehapyone/NanoCamera/tree/master/examples).\n### Working with CSI Camera\nFor CSI Cameras, the ``camera_type = 0``.\n\nFind here for full [CSI camera example](https://github.com/thehapyone/NanoCamera/tree/master/examples/CSI_camera.py)\n\nPython Example - \nCreate a CSI camera using default FPS=30, default image size: 640 by 480 and with no rotation (flip=0)\n```python\nimport nanocamera as nano\n# Create the Camera instance for 640 by 480\ncamera = nano.Camera()\n```\nCustomizing the width and height\n```python\nimport nanocamera as nano\n# Create the Camera instance for No rotation (flip=0) with size of 1280 by 800\ncamera = nano.Camera(flip=0, width=1280, height=800, fps=30)\n```\nif the image is inverted, set ``flip = 2``\n\n#### Multiple CSI Camera support.\nFor Multiple CSI Cameras, set the ``device_id`` to the ID of the camera. \n```python\nimport nanocamera as nano\n# Create the Camera instance for No rotation (flip=0) with size of 1280 by 800\n# Connect to CSI camera with ID 0 (Default)\ncamera_1 = nano.Camera(device_id=0, flip=0, width=1280, height=800, fps=30)\n# Connect to another CSI camera on the board with ID 1\ncamera_2 = nano.Camera(device_id=1, flip=0, width=1280, height=800, fps=30)\n```\n\n### Working with USB Camera\nFor USB Cameras, set the ``camera_type = 1``, and set the ``device_id`` as well.\nFind here for full [USB camera example](https://github.com/thehapyone/NanoCamera/tree/master/examples/USB_camera.py)\n\nPython Example - \nCreate USB camera connected to ``/dev/video1``\n\n```python\nimport nanocamera as nano\n# Create the Camera instance for No rotation (flip=0) with size of 640 by 480\ncamera = nano.Camera(camera_type=1, device_id=1, width=640, height=480, fps=30)\n```\n\nYou can see connected USB cameras by running : \n```bash\nls /dev/video*\n```\n    # for USB camera /dev/video2, the device_id will be 2\n\n### Working with RTSP streaming camera or streaming video\nFor RTSP source, set the ``camera_type = 2``, and set the ``source`` as well.\nFind here for full [RTSP camera example](https://github.com/thehapyone/NanoCamera/tree/master/examples/RTSP_camera.py)\n\nPython Example - \nCreate RTSP receiving camera client. RTSP location example:  ``rtsp://192.168.1.26:8554/stream``\n\n```python\n# a location for the rtsp stream. Stream location without \"rtsp://\"\nrtsp_location = \"192.168.1.26:8554/stream\"\n# Create the Camera instance\ncamera = nano.Camera(camera_type=2, source=rtsp_location, width=640, height=480, fps=30)\n```\n\n### Working with IP or any MJPEG streaming camera or video\nFor IP/MJPEG Cameras, set the ``camera_type = 3``, and set the streaming ``source`` as well.\nFind here for full [MJPEG camera example](https://github.com/thehapyone/NanoCamera/tree/master/examples/MJPEG_camera.py)\n\nPython Example - \nCreate an IP camera client connected to a camera streaming to ``http://192.168.1.26:80/stream``\n\n```python\n# a location for the camera stream. Stream location without \"http://\"\ncamera_stream = \"192.168.1.26:80/stream\"\n# Create the Camera instance\ncamera = nano.Camera(camera_type=3, source=camera_stream, width=640, height=480, fps=30)\n```\n\n### Frame Rate Enforcement\nEnable frame rate enforcement i.e force the camera to work at the given frame rate\n```python\nimport nanocamera as nano\n# enforce the capture frame rate with the enforce_fps=True\ncamera = nano.Camera(camera_type=1, device_id=1, width=640, height=480, fps=30, enforce_fps=True)\n```\n### Reading Camera\n\nCall ``read()`` to read the latest image as a ``numpy.ndarray``. The color format is ``BGR``.\n\n```python\nframe = camera.read()\n```\n\n#### Camera isReady?\nYou can check if the camera is ready for streaming using ``isReady()`` \n```python\nstatus = camera.isReady()\n```\n\nA Simple program to read from the CSI camera and display with OpenCV\n```python\nimport cv2\n#from nanocamera.NanoCam import Camera\nimport nanocamera as nano\n\nif __name__ == '__main__':\n    # Create the Camera instance\n    camera = nano.Camera(flip=0, width=640, height=480, fps=30)\n    print('CSI Camera ready? - ', camera.isReady())\n    while camera.isReady():\n        try:\n            # read the camera image\n            frame = camera.read()\n            # display the frame\n            cv2.imshow(\"Video Frame\", frame)\n            if cv2.waitKey(25) & 0xFF == ord('q'):\n                break\n        except KeyboardInterrupt:\n            break\n\n    # close the camera instance\n    camera.release()\n\n    # remove camera object\n    del camera\n```\n\nA Simple program to read from the IP/MJPEG camera and display with OpenCV\n```python\nimport cv2\n\n# from nanocamera.NanoCam import Camera\nimport nanocamera as nano\n\nif __name__ == '__main__':\n    # requires the Camera streaming url. Something like this: http://localhost:80/stream\n    # For IP/MJPEG camera, the camera_type=3.\n    # This works with only camera steaming MJPEG format and not H.264 codec for now\n\n    # a location for the camera stream\n    camera_stream = \"192.168.1.26:80\"\n\n    # Create the Camera instance\n    camera = nano.Camera(camera_type=3, source=camera_stream, width=640, height=480, fps=30)\n    print('MJPEG/IP Camera is now ready')\n    while camera.isReady():\n        try:\n            # read the camera image\n            frame = camera.read()\n            # display the frame\n            cv2.imshow(\"Video Frame\", frame)\n            if cv2.waitKey(25) & 0xFF == ord('q'):\n                break\n        except KeyboardInterrupt:\n            break\n\n    # close the camera instance\n    camera.release()\n\n    # remove camera object\n    del camera\n```\n\n## Debugging\n\nThe library has some debugging builtin for managing expected, unexpected errors, and exceptions that might occur during the camera acquisition or initialization. \n - Using the ``debug`` parameter to enable raising of exceptions when an error occurred. This is disabled in the default mode so you won't get any error if something goes wrong.\n - Using the ``hasError()`` to read the current error state of the camera with or without debug enabled.\n\n### Errors and Exceptions Handling\nCalling ``camere.hasError()`` at any point in time returns a list of error codes and a boolean value:\n```python\n# status holds a list.\nstatus = camera.hasError()\nprint (status)\n>> ([0, 3], True)\nprint (\"Error codes list : \", status[0])\n>> Error codes list : [0, 3]\nprint (\"Error State : \", status[1])\n>> Error State: True\n```\n\nError codes are\n\n    '''\n    -1 = Unknown error\n    0 = No error\n    1 = Error: Could not initialize camera.\n    2 = Thread Error: Could not read image from camera\n    3 = Error: Could not read image from camera\n    4 = Error: Could not release camera\n    '''\n\nFor example:\n\n```python\nerror_status = camera.hasError()\nif error_status[1] == False: # means no error detected so far\n    # read the camera image\n    frame = camera.read()\n    # print the current error codes\n    print (error_status[0])\n    # display the frame\n    cv2.imshow(\"Video Frame\", frame)\n    if cv2.waitKey(25) & 0xFF == ord('q'):\n        break\nelse:\n    # an error has occured.\n    print (\"An error with the camera. Error code : \", error_status[0])\n\n```\n\nEnabling the ``debug = True`` parameter allows raising an exception to the main program. This might be useful for parallel computing if you running multiple threads. Without the ``debug`` enabled, your program will continue as normal, and worse if you're enabled the frame rate enforcement which uses the thread read function, you will keep getting image data but those images are old/static images.\n\nSee an example using the ``debug`` parameter and handling exceptions at different levels. Find here for full [debugging example](https://github.com/thehapyone/NanoCamera/tree/master/examples/USB_camera_with_debug.py)\n\n```python\nif __name__ == '__main__':\n    # with debug=True. An Exception will be raised if something goes wrong.\n    # Create the Camera instance\n    try:\n        # Create the Camera instance\n        print(\"camera stream\")\n        camera = nano.Camera(camera_type=1, device_id=0, fps=30, debug=True)\n    except Exception as e:\n        # handle the exception from opening camera session\n    else:\n        print('USB Camera ready? - ', camera.isReady())\n        while True:\n            try:\n                # read the camera image\n                frame = camera.read()\n                # do something with frame like: send_to_cloud(frame)\n            except KeyboardInterrupt:\n                break\n            except Exception as e:\n                # handle the exception from reading\n                break\n\n        print(\"done here\")\n        try:\n            # close the camera instance\n            camera.release()\n        except Exception as e:\n            # handle the exception from releasing the camera \n\n```\nIf an error occurred, a Runtime Error will be raised catching the following exceptions:\n```python\nThe except cause might catch the following exceptions:\n>> Exception Type - Error: Could not initialize USB Camera\n>> Exception Type - An error as occurred. Error Value: [0, 3]\n>> Exception Type - Unknown Error has occurred\n>> Exception Type - Error: Could not release camera\n```\nWithout ``debug`` and even if there is error the program runs as nothing happened. The error can still be detected with the ``hasError()`` function.\n\n## Thanks! & Give it a Star\nThank you for downloading and enjoying the NanoCamera library.\nI hope you find it useful. Heck, I wrote it for you- yeah, that's right- you.\n\nContributing to this software is warmly welcomed. Don't forget to give it a star. \n\n## License\nThis project is released under the MIT License.\n\n## See also\n\n- [Platooning Robot](https://github.com/thehapyone/Platooning-Robot) - Resources for building collaborative robots\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thehapyone/NanoCamera",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nanocamera",
    "package_url": "https://pypi.org/project/nanocamera/",
    "platform": "",
    "project_url": "https://pypi.org/project/nanocamera/",
    "project_urls": {
      "Documentation": "https://github.com/thehapyone/NanoCamera/blob/master/README.md",
      "Examples": "https://github.com/thehapyone/NanoCamera/tree/master/examples",
      "Homepage": "https://github.com/thehapyone/NanoCamera",
      "Source Code": "https://github.com/thehapyone/NanoCamera"
    },
    "release_url": "https://pypi.org/project/nanocamera/0.1.5/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "A Python camera interface for the Jetson Nano",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7697485,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76e84568ec81befa7ffc326c00df698954f84af3b7eb8a09f011fd3a59784701",
          "md5": "d3694ee32ea204e56ca94401da2e2b94",
          "sha256": "d45e48aa9c81defa031205746a8659b2d937367e3576a86c8fc93714b1feacef"
        },
        "downloads": -1,
        "filename": "NanoCamera-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3694ee32ea204e56ca94401da2e2b94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 5205,
        "upload_time": "2020-01-12T17:31:02",
        "upload_time_iso_8601": "2020-01-12T17:31:02.453680Z",
        "url": "https://files.pythonhosted.org/packages/76/e8/4568ec81befa7ffc326c00df698954f84af3b7eb8a09f011fd3a59784701/NanoCamera-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8d598adc42ff5ca4a8a471fcf8f9e2c1543613a4e40ca01c1c45e007e29c879",
          "md5": "b44ccaaa3c28b1896e4c820d5f0ee486",
          "sha256": "9f0f597e3ea6fa2f650f64ec1bded0dcafaaf1c502798f32fadadb9427d7b9d2"
        },
        "downloads": -1,
        "filename": "NanoCamera-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b44ccaaa3c28b1896e4c820d5f0ee486",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 4223,
        "upload_time": "2020-01-12T17:31:05",
        "upload_time_iso_8601": "2020-01-12T17:31:05.118613Z",
        "url": "https://files.pythonhosted.org/packages/e8/d5/98adc42ff5ca4a8a471fcf8f9e2c1543613a4e40ca01c1c45e007e29c879/NanoCamera-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19c7604198367cdef4cde3197eaf011cab2dd96b70c0e729b8153120d1d0901d",
          "md5": "dfae4b535283fa9fb88ae159ac9e3e6c",
          "sha256": "0a2f636e30b45286ded2ffee11884122f7ce98c6dec797cbf668ab13b31824fc"
        },
        "downloads": -1,
        "filename": "nanocamera-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfae4b535283fa9fb88ae159ac9e3e6c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 5216,
        "upload_time": "2020-01-15T07:57:43",
        "upload_time_iso_8601": "2020-01-15T07:57:43.838484Z",
        "url": "https://files.pythonhosted.org/packages/19/c7/604198367cdef4cde3197eaf011cab2dd96b70c0e729b8153120d1d0901d/nanocamera-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30331b7105300dc8ad1aef14b9ed5df64654b70d92dc907d906d0336849b2fac",
          "md5": "690da12dd232b5263c16dbfb3f063d42",
          "sha256": "e71347ee86521220cca5afa0858ad27863ecffe9cb466d993dbb24d36a78ac7d"
        },
        "downloads": -1,
        "filename": "nanocamera-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "690da12dd232b5263c16dbfb3f063d42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 4225,
        "upload_time": "2020-01-15T07:57:45",
        "upload_time_iso_8601": "2020-01-15T07:57:45.715694Z",
        "url": "https://files.pythonhosted.org/packages/30/33/1b7105300dc8ad1aef14b9ed5df64654b70d92dc907d906d0336849b2fac/nanocamera-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3e2dfd6c1f51af87b19d110d0c0e49fcc36e9cc5e3dd6bd7944280cb6d4dc41",
          "md5": "fd991510b0afc3f409524073fc73520d",
          "sha256": "506c87e2aa95058103ee0dcee2112124e689aa5dd18f15c4a39354894eb92447"
        },
        "downloads": -1,
        "filename": "nanocamera-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd991510b0afc3f409524073fc73520d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 5669,
        "upload_time": "2020-01-19T16:24:57",
        "upload_time_iso_8601": "2020-01-19T16:24:57.849524Z",
        "url": "https://files.pythonhosted.org/packages/d3/e2/dfd6c1f51af87b19d110d0c0e49fcc36e9cc5e3dd6bd7944280cb6d4dc41/nanocamera-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40dc1e66dc76ce290d52b977b16ae50375e98840a55186dfc23a63faf6661e3f",
          "md5": "1e6b6005b1ecce01e3c956f456fac26c",
          "sha256": "3af3486ae316264a15ee5cda3462329e76a5caf989af4ebd0b2859ad5c2753f6"
        },
        "downloads": -1,
        "filename": "nanocamera-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1e6b6005b1ecce01e3c956f456fac26c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 4692,
        "upload_time": "2020-01-19T16:24:59",
        "upload_time_iso_8601": "2020-01-19T16:24:59.198564Z",
        "url": "https://files.pythonhosted.org/packages/40/dc/1e66dc76ce290d52b977b16ae50375e98840a55186dfc23a63faf6661e3f/nanocamera-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de8b888ec0b85bb6d360123dee98113c845e217ac7e3c67cff2fbae29147cbf4",
          "md5": "c6f657dda0b854372b74b5b01ce67123",
          "sha256": "3a5d3dbca28481bf1b82b01dea4d4c15f807f2a91c368c9a1a726b83aece2095"
        },
        "downloads": -1,
        "filename": "nanocamera-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6f657dda0b854372b74b5b01ce67123",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 6474,
        "upload_time": "2020-05-22T10:12:10",
        "upload_time_iso_8601": "2020-05-22T10:12:10.615421Z",
        "url": "https://files.pythonhosted.org/packages/de/8b/888ec0b85bb6d360123dee98113c845e217ac7e3c67cff2fbae29147cbf4/nanocamera-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2febddef13f0a9d2492099a80eef0fdcc5d44fcb0d0aefab0b6b3ca55d7e6f8d",
          "md5": "32c5da6cdb97c95dca6a5318da9100e2",
          "sha256": "7b6012775c37ff9d0e3ad06dc465c99a654a8e69e02173ac8d0dd40bd54dec08"
        },
        "downloads": -1,
        "filename": "nanocamera-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "32c5da6cdb97c95dca6a5318da9100e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 5633,
        "upload_time": "2020-05-22T10:12:12",
        "upload_time_iso_8601": "2020-05-22T10:12:12.089208Z",
        "url": "https://files.pythonhosted.org/packages/2f/eb/ddef13f0a9d2492099a80eef0fdcc5d44fcb0d0aefab0b6b3ca55d7e6f8d/nanocamera-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d104d6904319520f752668a6f383229cd892db7ae74fb28d03d7e8cdf5de0dd",
          "md5": "bdca22f3094550cca32e2cc7a3a1a6e7",
          "sha256": "13c93e9c3f29ba690ce3668aa4faed7e00642bfca3d681064dab3f944f454fc4"
        },
        "downloads": -1,
        "filename": "nanocamera-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bdca22f3094550cca32e2cc7a3a1a6e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 8732,
        "upload_time": "2020-07-14T11:57:49",
        "upload_time_iso_8601": "2020-07-14T11:57:49.154080Z",
        "url": "https://files.pythonhosted.org/packages/4d/10/4d6904319520f752668a6f383229cd892db7ae74fb28d03d7e8cdf5de0dd/nanocamera-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58efbd6175f945b5d84a4a213442473e7e0c7dd7c1e592ff8e3e2f9d4f21af79",
          "md5": "d83ef9da0f302da0fa0e4390ac9aecdc",
          "sha256": "94bbf9649ea5c4082327a5323c0ebdea4c4fa1468170cf32ea1f5752ee9ecc60"
        },
        "downloads": -1,
        "filename": "nanocamera-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d83ef9da0f302da0fa0e4390ac9aecdc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 8226,
        "upload_time": "2020-07-14T11:57:50",
        "upload_time_iso_8601": "2020-07-14T11:57:50.894225Z",
        "url": "https://files.pythonhosted.org/packages/58/ef/bd6175f945b5d84a4a213442473e7e0c7dd7c1e592ff8e3e2f9d4f21af79/nanocamera-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d104d6904319520f752668a6f383229cd892db7ae74fb28d03d7e8cdf5de0dd",
        "md5": "bdca22f3094550cca32e2cc7a3a1a6e7",
        "sha256": "13c93e9c3f29ba690ce3668aa4faed7e00642bfca3d681064dab3f944f454fc4"
      },
      "downloads": -1,
      "filename": "nanocamera-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bdca22f3094550cca32e2cc7a3a1a6e7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 8732,
      "upload_time": "2020-07-14T11:57:49",
      "upload_time_iso_8601": "2020-07-14T11:57:49.154080Z",
      "url": "https://files.pythonhosted.org/packages/4d/10/4d6904319520f752668a6f383229cd892db7ae74fb28d03d7e8cdf5de0dd/nanocamera-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58efbd6175f945b5d84a4a213442473e7e0c7dd7c1e592ff8e3e2f9d4f21af79",
        "md5": "d83ef9da0f302da0fa0e4390ac9aecdc",
        "sha256": "94bbf9649ea5c4082327a5323c0ebdea4c4fa1468170cf32ea1f5752ee9ecc60"
      },
      "downloads": -1,
      "filename": "nanocamera-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "d83ef9da0f302da0fa0e4390ac9aecdc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 8226,
      "upload_time": "2020-07-14T11:57:50",
      "upload_time_iso_8601": "2020-07-14T11:57:50.894225Z",
      "url": "https://files.pythonhosted.org/packages/58/ef/bd6175f945b5d84a4a213442473e7e0c7dd7c1e592ff8e3e2f9d4f21af79/nanocamera-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}