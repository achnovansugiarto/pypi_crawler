{
  "info": {
    "author": "Kilian Evang",
    "author_email": "kilian.evang@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![Produce logo](https://raw.githubusercontent.com/texttheater/produce/master/img/logo/Produce_Logo_300.png)\n==============================================\n\nProduce is an incremental build system for the command line, like Make or redo,\nbut different: it is scriptable in Python and it supports multiple variable\nparts in file names. This makes it ideal for doing things beyond compiling\ncode, like setting up replicable scientific experiments.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents** \n\n- [Requirements](#requirements)\n- [Installing Produce](#installing-produce)\n- [Usage](#usage)\n- [Motivation](#motivation)\n- [Build automation: basic requirements](#build-automation-basic-requirements)\n- [Make syntax vs. Produce syntax and a tour of the basic features](#make-syntax-vs-produce-syntax-and-a-tour-of-the-basic-features)\n  - [Rules, expansions, escaping and comments](#rules-expansions-escaping-and-comments)\n  - [Named and unnamed dependencies](#named-and-unnamed-dependencies)\n  - [Multiple wildcards, regular expressions and matching conditions](#multiple-wildcards-regular-expressions-and-matching-conditions)\n  - [Special targets vs. special attributes](#special-targets-vs-special-attributes)\n  - [Python expressions and global variables](#python-expressions-and-global-variables)\n- [Running Produce](#running-produce)\n  - [Status and debugging messages](#status-and-debugging-messages)\n  - [Error handling and aborting](#error-handling-and-aborting)\n  - [How targets are matched against rules](#how-targets-are-matched-against-rules)\n- [Advanced usage](#advanced-usage)\n  - [Whitespace and indentation in values](#whitespace-and-indentation-in-values)\n  - [The prelude](#the-prelude)\n  - [`shell`: choosing the recipe interpreter](#shell-choosing-the-recipe-interpreter)\n  - [Running jobs in parallel](#running-jobs-in-parallel)\n  - [Dependency files](#dependency-files)\n  - [Rules with multiple outputs](#rules-with-multiple-outputs)\n    - [“Sideways” dependencies](#sideways-dependencies)\n  - [Producing the outputs for all inputs](#producing-the-outputs-for-all-inputs)\n- [All special attributes at a glance](#all-special-attributes-at-a-glance)\n  - [In rules](#in-rules)\n  - [In the global section](#in-the-global-section)\n- [Getting in touch](#getting-in-touch)\n- [Acknowledgments](#acknowledgments)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\nRequirements\n------------\n\n* A Unix-like operating system such as Linux or Mac OS X. Windows Subsystem for\n  Linux may also work.\n* Python 3.4 or higher\n* Git (for downloading Produce)\n\nInstalling Produce\n------------------\n\nInstall the latest release using pip:\n\n    pip3 install produce\n\nOr get the development version by running the following command in a convenient\nlocation:\n\n    git clone https://github.com/texttheater/produce\n\nThis will create a directory called `produce`. To update to the latest version\nof Produce later, you can just go into that directory and run:\n\n    git pull\n\nThe `produce` directory contains an executable Python script also called\n`produce`. This is all you need to run Produce. Just make sure it is in your\n`PATH`, e.g. by copying it to `/usr/local/bin` or by linking to it from your\n`$HOME/bin` directory.\n\nUsage\n-----\n\nWhen invoked, Produce will first look for a file called `produce.ini` in the\ncurrent working directory. Its format is documented in this document. If you\nwant a quick start, have a look at\n[an example project](https://github.com/texttheater/produce/tree/master/doc/samples/tokenization).\n\nYou may also have a look at the\n[PyGrunn 2014 slides](https://texttheater.github.io/produce-pygrunn2014)\nfor a quick introduction.\n\nMotivation\n----------\n\nProduce is a build automation tool. Build automation is useful whenever you\nhave one or several input files from which one or several output files are\ngenerated automatically – possibly in multiple steps, so that you have\nintermediate files.\n\nThe classic case for this is compiling C programs, where a simple project might\nlook like this:\n\n![example dependency chart for compiling a C program](img/compiling.png)\n\nBut build automation is also useful in other areas, such as science. For\nexample, in the [Groningen Meaning Bank](http://gmb.let.rug.nl/) project, a\nNatural Language Processing pipeline is combined with corrections from human\nexperts to build a collection of texts with linguistic annotations in a\nbootstraping fashion.\n\nIn the following simplified setup, processing starts with a text file\n(`en.txt`) which is first part-of-speech-tagged (`en.pos`), then analyzed\nsyntactically (`en.syn`) by a parser and finally analyzed semantically\n(`en.sem`). Each step is first carried out automatically by an NLP tool\n(`*.auto`) but then corrections by human annotators (`*.corr`) are applied\nto build the main version of the file which then serves as input to further\nprocessing. Every time a new human correction is added, parts of the\npipeline must be re-run:\n\n![example dependency chart for running an NLP pipeline](img/pipeline.png)\n\nOr take running machine learning experiments: we have a collection of labeled\ndata, split into a training portion and testing portions. We have various\nfeature sets and want to know which one produces the best model. So we train a\nseparate model based on each feature set and on the training data, and generate\ncorresponding labeled outputs and evaluation reports based on the development\ntest data:\n\n![example dependency chart for running machine learning experiments](img/ml.png)\n\nA [number](http://kbroman.github.io/minimal_make/)\n[of](http://bost.ocks.org/mike/make/) [articles](http://zmjones.com/make/)\npoint out that build automation is an invaluable help in setting up experiments\nin a self-documenting manner, so that they can still be understood, replicated\nand modified months or years later, by you, your colleagues or other\nresearchers. Many people use Make for this purpose, and so did I, for a while.\nI specifically liked:\n\n* *The declarative notation.* Every step of the workflow is expressed as a\n  _rule_, listing the _target_, its direct dependencies and the command to run\n  (the _recipe_). Together with a good file naming scheme, this almost\n  eliminates the need for documentation.\n* *The Unix philosophy.* Make is, at its core, a thin wrapper around shell\n  scripts. For orchestrating the steps, you use Make, and for executing them,\n  you use the full power of shell scripts. Each tool does one thing, and does\n  it well. This reliance on shell scripts is something that sets Make apart\n  from specialized build tools such as Ant or A-A-P.\n* *The wide availability.* Make is installed by default on almost every Unix\n  system, making it ideal for disseminating and exchanging code because the\n  Makefile format is widely known and can be run everywhere.\n\nSo, if Make has so many advantages, why yet another build automation tool?\nThere are two reasons:\n\n* *Make’s syntax.* Although the basic syntax is extremely simple, as soon as\n  you want to go a _little bit_ beyond what it offers and use more advanced\n  features, things get quite arcane very quickly.\n* *Wildcards are quite limited.* If you want to match on the name of a specific\n  target to generate its dependencies dynamically, you can only use one\n  wildcard. If your names are a bit more complex than that, you have to resort\n  to black magic like Make’s built-in string manipulation functions that don’t\n  compare favorably to languages like Python or even Perl, or rely on external\n  tools. In either case, your Makefiles become extremely hard to read, bugs\n  slip in easily and the simplicity afforded by the declarative paradigm is\n  largely lost.\n\nProduce is thus designed as a tool that copies Make’s virtues and improves a\ngreat deal on its deficiencies by using a still simple, but much more powerful\nsyntax for mapping targets to dependencies. Only the core functionality of Make\nis mimicked – advanced functions of Make such as built-in rules specific to\ncompiling C programs are not covered. Produce is general-purpose.\n\nProduce is written in Python 3 and scriptable in Python 3. Whenever I write\nPython below, I mean Python 3.\n\nBuild automation: basic requirements\n------------------------------------\n\nLet’s review the basic functionality we expect of a build automation tool:\n\n* Allows you to run multiple steps of a workflow with a single command, in the\n  right order.\n* Notices when inputs have changed and runs exactly those steps again that are\n  needed to bring the outputs up to speed, no more or less.\n\nIn addition, some build automation tools satisfy the following requirement\n(Produce currently doesn’t):\n\n* Intermediate files can be deleted without affecting up-to-dateness – if the\n  outputs are newer than the inputs, the workflow will not be re-run.\n\nMake syntax vs. Produce syntax and a tour of the basic features\n---------------------------------------------------------------\n\nWhen you run the `produce` command (usually followed by the targets you want\nbuilt), Produce will look for a file in the current directory, called\n`produce.ini` by default. This is the “Producefile”. Let’s introduce\nProducefile syntax by comparing it to Makefile syntax.\n\n### Rules, expansions, escaping and comments\n\nHere is a Makefile for a tiny C project:\n\n    # Compile\n    %.o : %.c\n    \tcc -c $<\n    \n    # Link\n    % : %.o\n    \tcc -o $@ $<\n\nAnd here is the corresponding `produce.ini`:\n\n    # Compile\n    [%{name}.o]\n    dep.c = %{name}.c\n    recipe = cc -c %{c}\n    \n    # Link\n    [%{name}]\n    dep.o = %{name}.o\n    recipe = cc -o %{target} %{o}\n\nEasy enough, right? Produce syntax is a dialect of the widely known INI syntax,\nconsisting of sections with headings in square brackets, followed by\nattribute-value pairs separated by `=`. In Produce’s case, sections represent\n_rules_, the section headings are _target patterns_ matching _targets_ to\nbuild, and the attribute-value pairs specify the target’s direct dependencies\nand the recipe to run it.\n\nDependencies are typically listed each as one attribute of the form `dep.name`\nwhere `name` stands for a name you give to the dependency – e.g., its file\ntype. This way, you can refer to it in the recipe using an _expansion_.\n\nExpansions have the form `%{...}`. In the target pattern, they are used as\nwildcards. When the rule is invoked on a specific target, they match any string\nand assign it to the variable name specified between the curly braces. In\nattribute values, they are used like variables, expanding to the value\nassociated with the variable name. Besides target matching, values can also be\nassigned to variable names by attribute-value pairs, as with e.g.\n`dep.c = %{name}.c`. Here, `c` is the variable name; the `dep.` prefix just\ntells Produce that this particular value is also a dependency.\n\nIf you need a literal percent sign in some attribute value, you need to escape\nit as `%%`.\n\nThe `target` variable is automatically available when the rule is invoked,\ncontaining the target matched by the target pattern.\n\nLines starting with `#` are for comments and ignored.\n\nSo far, so good – a readable syntax, I hope, but a bit more verbose than that\nof Makefiles. What does this added verbosity buy us? We will see in the next\nsubsections.\n\n### Named and unnamed dependencies\n\nTo see why naming dependencies is a good idea, consider the following Makefile\nrule:\n\n    out/%.pos : out/%.pos.auto out/%.pos.corr\n    \t./src/scripts/apply_corrections $< \\\n            --corrections out/$*.pos.corr > $@\n\nThis could be from the Natural Language Processing project we saw as the second\nexample above: the rule is for making the final `pos` file from the\nautomatically generated `pos.auto` file and the `pos.corr` file with manual\ncorrections, thus it has two direct dependencies, specified on the first line.\nThe recipe refers to the first dependency using the shorthand `$<`, but there\nis no such shorthand for other dependencies. So we have to type out the second\ndependency again in the recipe, taking care to replace the wildcard `%` with\nthe magic variable `$*`. This is ugly because it violates the golden principle\n“Don’t repeat yourself!” If we write something twice in a Makefile, not only is\nit more work to type, but also if we want to change it later, we have to change\nit in two places, and there’s a good chance we’ll forget that.\n\nProduce’s named dependencies avoid this problem: once specified, you can refer\nto every dependency using its name. Here is the Produce rule corresponding to\nthe above Makefile rule:\n\n    [out/%{name}.pos]\n    dep.auto = %{name}.pos.auto\n    dep.corr = %{name}.pos.corr\n    recipe = ./src/scripts/apply_corrections %{auto} %{corr} > %{target}\n\nNote that you don’t _have_ to name dependencies. Sometimes you don’t need to\nrefer back to them. Here is an example rule that compiles a LaTeX document:\n\n    [%{name}.pdf]\n    deps = %{name}.tex bibliography.bib\n    recipe =\n    \tpdflatex %{name}\n    \tbibtex %{name}\n    \tpdflatex %{name}\n    \tpdflatex %{name}\n\nThe TeX tools are smart enough to fill in the file name extension if we just\ngive them the basename that we got by matching the target. In such cases, it\ncan be more convenient not to name the dependencies and list them all on one\nline. This is what the `deps` attribute is for. It is parsed using Python’s\n[`shlex.split`](https://docs.python.org/3/library/shlex.html?highlight=shlex#shlex.split)\nfunction – consult the Python documentation for escaping rules and such. You\ncan also mix `dep.*` attributes and `deps` in one rule.\n\nNote that, as in many INI dialects, attribute values (here: the recipe) can\nspan multiple lines as long as each line after the first is indented. See\n[Whitespace and indentation in values](#whitespace-and-indentation-in-values)\nbelow for details.\n\nNote also that dependency lists can also be generated dynamically – see the\nsection on [dependency files](#dependency-files) below.\n\n### Multiple wildcards, regular expressions and matching conditions\n\nThe ability to use more than one wildcard in target patterns is Produce’s\nkiller feature because not many other build automations tools offer it.\nThe only one I know of so far is [plmake](https://github.com/cmungall/plmake).\nRake and others do offer full regular expressions which are strictly more\npowerful but not as easy to read. Don’t worry, Produce supports them too and\nmore, we will come to that. But first consider the following Produce rule,\nwhich might stem from the third example project we saw in the introduction,\nthe machine learning one:\n\n    [out/%{corpus}.%{portion}.%{fset}.labeled]\n    dep.model = out/%{corpus}.train.%{fset}.model\n    dep.input = out/%{corpus}.%{portion}.feat\n    recipe = wapiti label -m %{model} %{input} > %{target}\n\nLabeled output files here follow a certain naming convention: four parts,\nseparated by periods. The first one specifies the data collection (e.g. a\nlinguistic corpus), the second one the portion of the data that is\nautomatically labeled in this step (either the development portion or the test\nportion), the third one specifies the feature set used and the fourth one is\nthe extension `labeled`. For each of the three first parts, we use a wildcard\nto match it. We can then freely use these three wildcards to specify the\ndependencies: the model we use for labelling depends on the corpus and on the\nfeature set but not on the portion to label: the portion used for training the\nmodel is always the training portion. The input to labelling is a file\ncontaining the data portion to label, together with the extracted features. We\nassume that this file always contains all features we can extract even if we’re\nnot going to use them in a particular model, so this dependency does not depend\non the feature set.\n\nA Makefile rule to achieve something similar would look something like this:\n\n    .SECONDEXPANSION:\n    out/%.labeled : out/$$(subst test,train,$$(subst dev,train,$$*)).model \\\n                    out/$$(basename $$*).feat\n            wapiti label -m $< out/$(basename $*).feat > $@\n\nIf you are like me, this is orders of magnitude less readable than the Produce\nversion. Getting a Makefile rule like this to function properly will certainly\nmake you feel smart, but hopefully also feel miserable about the brain cycles\nwasted getting your head around the bizarre syntax, the double dollars and the\nsecond expansion.\n\nA wildcard will match _anything_. If you need more control about which targets\nare matched, you can use a\n[Python regular expression](https://docs.python.org/3/library/re.html?highlight=re#module-re)\nbetween slashes as the target pattern. For example, if we want to make sure\nthat our rule only matches targets where the second part of the filename is\neither `dev` or `test`, we could do it like this:\n\n    [/out/(?P<corpus>.*)\\.(?P<portion>dev|test)\\.(?P<fset>.*)\\.labeled/]\n    dep.model = out/%{corpus}.train.%{fset}.model\n    dep.input = out/%{corpus}.%{portion}.feat\n    recipe = wapiti label -m %{model} %{input} > %{target}\n\nThe regular expression in this rule’s header is almost precisely what the above\nheader with three wildcards is translated to by Produce internally, with the\ndifference that the subexpression matching the second part is now `dev|test`\nrather than `.*`. We are using a little-known feature of regular expressions\nhere, namely the `(?P<...>)` syntax that allows us to assign names to\nsubexpressions by which you can refer to the matched part later.\n\nNote the slashes at the beginning and end are just a signal to Produce to\ninterpret what is in-between as a regular expressions. You do not have to\nescape slashes within your regular expression.\n\nWhile regular expressions are powerful, they make your Producefile less\nreadable. A better way to write the above rule is by sticking to ordinary\nwildcards and using a separate _matching condition_ to check for `dev|test`:\n\n    [out/%{corpus}.%{portion}.%{fset}.labeled]\n    cond = %{portion in ('dev', 'test')}\n    dep.model = out/%{corpus}.train.%{fset}.model\n    dep.input = out/%{corpus}.%{portion}.feat\n    recipe = wapiti label -m %{model} %{input} > %{target}\n\nA matching condition is specified as the `cond` attribute. We can use any\nPython expression. It is evaluated only if the target pattern matches the\nrequested target. If it evaluates to a “truthy” value, the rule matches and\nthe recipe is executed. If it evaluates to a “falsy” value, the rule does\nnot match, and Produce moves on, trying to match the next rule in the\nProducefile.\n\nNote that the Python expression is given as an expansion. At this point we\nshould explain a few fine points:\n\n1. Whenever we used expansions so far, the variable names inside were actually\n   Python expressions, albeit of a simple kind: single variable names. But as\n   we see now, we can use arbitrary Python expressions. Expansions used as\n   wildcards in the target pattern are an exception, of course: they can only\n   consist of a single variable name.\n2. The variables we use in rules are actually Python variables.\n3. Attribute values are always strings, so if a Python expression is used to\n   generate (part of) an attribute value, not the value of the expression\n   itself is used but whatever its `__str__` method returns. Thus, in the\n   above rule, the value of the `cond` variable is not `True` or `False`, but\n   `'True'` or `'False'`. In order to interpret the value as a Boolean, Produce\n   calls\n   [ast.literal\\_eval](https://docs.python.org/3/library/ast.html?highlight=literal_eval#ast.literal_eval)\n   on the string. So if the string contains anything other than a literal\n   Python expression, this is an error.\n\nAs an exception to what we said about `__str__`, if an expansion evaluates to\nsomething that is not a string but has an `__iter__` method, it will be treated\nas a sequence and rendered as a white-space separated list, the elements\nproperly shell-quoted and escaped. Note also that parentheses are automatically\nadded around an expansion so it is very convenient to use generator expressions\nfor expansions. All of this is illustrated in the following rule:\n\n    [Whole.txt]\n    deps = %{'Part {}.txt'.format(i) for i in range(4)}\n    recipe = cat %{deps} > %{target}\n\n### Special targets vs. special attributes\n\nBesides not naming all dependencies, there is another reason why Make’s syntax\nis too simple for its own good. When some rule needs to have a special\nproperty, Make usually requires a “special target” that syntactically looks\nlike a target but is actually a declaration and has no obvious visual\nconnection to the rule(s) it applies to. We have already seen an example of the\ndreaded `.SECONDEXPANSION`. Another common special target is `.PHONY`, marking\ntargets that are just jobs to be run, without producing an output file. For\nexample:\n\n    .PHONY: clean\n    clean:\n    \trm *.o temp\n\nIt would be easier and more logical if the “phoniness” was declared as part of\nthe rule rather than some external declaration. This is was Produce does. The\nProduce equivalent of declaring targets phony is to set the `type` attribute of\ntheir rule to `task` (the default is `file`). With this the rule above is\nwritten as follows:\n\n    [vacuum]\n    type = task\n    recipe = rm *.o temp\n\nNote that since it is ungrammatical to “produce a clean”, I invented a naming\nconvention according to which the task that cleans up your project directory is\ncalled `vacuum` because it produces a vacuum. It’s silly, I know.\n\nFor other special attributes besides `task`, see [All special attributes at a\nglance](#all-special-attributes-at-a-glance) below.\n\n### Python expressions and global variables\n\nAs we have already seen, Produce’s expansions can contain arbitrary Python\nexpressions. This is not only useful for specifying Boolean matching\nconditions, but also for string manipulation, in particular for playing with\ndependencies. This is a pain in Make, because Make implements its own string\nmanipulation language which from today’s perspective (since we have Python)\nnot only reinvents the wheel, but reinvents it poorly, with a rather dangerous\nsyntax. Consider the following (contrived) example from the GNU Make manual\nwhere you have a list of dependencies in a global variable and filter them to\nretain only those ending in `.c` or `.s`:\n\n    sources := foo.c bar.c baz.s ugh.h\n    foo: $(sources)\n    \tcc $(filter %.c %.s,$(sources)) -o foo\n\nWith Produce, we can just hand the string manipulation to Python, a language\nwe already know and (hopefully) like:\n\n    []\n    sources = foo.c bar.c baz.s ugh.h\n\n    [foo]\n    deps = %{sources}\n    recipe = cc %{f for f in sources.split() \\\n    \t\tif f.endswith('.c') or f.endswith('.s')}\n\nThis example also introduces the _global section_, a section headed by `[]`,\nthus named with the empty string. The attributes here define global variables\naccessible from all rules. The global section may only appear once and only at\nthe beginning of a Producefile.\n\nRunning Produce\n---------------\n\nProduce is invoked from the command line by the command `produce`, usually\nfollowed by the target(s) to produce. These can be omitted if the Producefile\nspecifies one or more default targets. By default, Produce will look for\n`produce.ini` in the current working directory and complain if it does not\nexist.\n\nA number of options can be used to control Produce’s behavior, as listed in its\nhelp message:\n\n    usage: produce [-h] [-B | -b] [-d] [-f FILE] [-j JOBS] [-n] [-u FILE]\n                   [target [target ...]]\n    \n    positional arguments:\n      target                The target(s) to produce - if omitted, default target\n                            from Producefile is used\n    \n    optional arguments:\n      -h, --help            show this help message and exit\n      -B, --always-build    Unconditionally build all specified targets and their\n                            dependencies\n      -b, --always-build-specified\n                            Unconditionally build all specified targets, but treat\n                            their dependencies normally (only build if out of\n                            date)\n      -d, --debug           Print debugging information. Give this option multiple\n                            times for more information.\n      -f FILE, --file FILE  Use FILE as a Producefile\n      -j JOBS, --jobs JOBS  Specifies the number of jobs (recipes) to run\n                            simultaneously\n      -n, --dry-run         Print status messages, but do not run recipes\n      -u FILE, --pretend-up-to-date FILE\n                            Do not rebuild FILE or its dependencies (unless they\n                            are also depended on by other targets) even if out of\n                            date, but make sure that future invocations of Produce\n                            will still treat them as out of date by increasing the\n                            modification times of their changed dependencies as\n                            necessary.\n\n### Status and debugging messages\n\nWhen it starts (re)building a target, Produce will tell you so with a status\nmessage in green where the target is indented according to how deep in the\ndependency graph it is. On successful completion of a target, a similar message\nwith `complete` is printed. If an error occurs while a target is being built,\nProduce instead prints an `incomplete` message in red. The latter indicates\ncontrolled shutdown: the recipe has been killed and incomplete outputs have\nbeen renamed (see below). If you see a `(re)building` message but no\n`(in)complete` message for some target, something went really wrong – this\nshould never happen. In that case, better check for yourself if any incomplete\noutputs are still hanging around.\n\nGiving the `-d`/`--debug` option one, two or three times will cause Produce to\nadditionally flood your terminal with a few, some more or lots of messages that\nmay be helpful for debugging.\n\n### Error handling and aborting\n\nWhen a recipe fails, i.e. its interpreter returns an exit status other than 0,\nthe corresponding target file (if any) may already have been created or\ntouched, potentially leading the next invocation of Produce to believe that it\nis up to date, even though it probably doesn’t have the correct contents. Such\ninconsistencies can lead to users tearing their hair out. In order to avoid\nthis, Produce will, when a recipe fails, make sure that the target file does\nnot stay there. It could just delete it, but that might be unwise because the\nuser might want to inspect the output file of the erroneous recipe for\ndebugging. So, Produce renames the target file by appending a `~` to the\nfilename (a common naming convention for short-lived “backups”).\n\nIf multiple recipes are running in parallel and one fails, Produce will kill\nall of them, do the renaming and abort immediately.\n\nThe same is true if Produce receives an interrupt signal. So you can safely\nabort a production process in your terminal by pressing `Ctrl+C`.\n\n### How targets are matched against rules\n\nWhen producing a target, either because asked to by the user or because the\ntarget is required by another one, Produce will always work through the\nProducefile from top to bottom and use the first rule that matches the target.\nA rule matches a target if both the target pattern matches and the matching\ncondition (if any) subsequently evaluates to true.\n\nNote that unlike most INI dialects, Produce allows for multiple sections with\nthe same heading. It makes sense to have the same target pattern multiple times\nwhen there are matching conditions to make subdistinctions.\n\nIf no rule matches a target, Produce aborts with an error message.\n\nAdvanced usage\n--------------\n\n### Whitespace and indentation in values\n\nAn attribute value can span multiple lines as long as each line after the first\nis indented with some whitespace. The recommended indentation is either one tab\nor four spaces. If you make use of this, it is recommended to leave the first\nline (after the attribute name and the `=`) blank so all lines of the value are\nconsistently aligned.\n\nThe _second_ line of a value (i.e. the first indented one) determines the kind\nand amount of whitespace expected to start each subsequent line. This\nwhitespace will _not_ be part of the attribute value. _Additional_ whitespace\nafter the initial amount is, however, preserved. This is important e.g. for\nPython code and the reason why Produce is no longer using Python’s\n`configparser` module.\n\nAll whitespace at the very beginning and at the very end of an attribute value\nwill be stripped away.\n\nFor example, in the following rule, the recipe spans two lines:\n\n    [paper.pdf]\n    dep.tex = paper.tex\n    dep.bib = paper.bib\n    recipe =\n        pdflatex paper\n        pdflatex paper\n\n### The prelude\n\nIf you use Python expressions in your recipes, you will often need to import\nPython modules or define functions to use in these expressions. You can do this\nby putting the imports, function definitions and other Python code into the\nspecial `prelude` attribute in the [global\nsection](#python-expressions-and-global-variables). For example, put this at\nthe beginning of your Producefile to import the `errno`, `glob` and `os`\nmodules and define a helper function for creating directories.\n\n    []\n    prelude =\n        import errno\n        import glob\n        import os\n\n        def makedirs(path):\n            try:\n                os.makedirs(path)\n            except OSError, error:\n                if error.errno != errno.EEXIST:\n                    raise error\n\n### `shell`: choosing the recipe interpreter\n\nBy default, recipes are (after doing expansions) handed to the `bash` command\nfor execution. If you would rather write your recipe in `zsh`, `perl`, `python`\nor any other language, that’s no problem. Just specify the interpreter in the\n`shell` attribute of the rule.\n\n### Running jobs in parallel\n\nUse the `-j JOBS` command line option to specify the number of jobs Produce\nruns in parallel. By default, Produce reserves one job slot for each recipe.\nFor recipes that run multiple parallel jobs themselves, it is recommended to\nspecify the number of jobs via the `jobs` attribute. Produce will then reserve\nthat many job slots for this recipe (but no more than `JOBS`).\n\nHere is an example where the target `b` is created by a recipe that runs in\nparallel:\n\n    [a]\n    deps = b c d\n    recipe = touch %{target}\n\n    [b]\n    dep.input = input.txt\n    dep.my_script = ./my_script.sh\n    jobs = 8\n    recipe = parallel --gnu -n %{jobs} -k %{my_script} %{input} > %{target}\n\n    [c]\n    dep.my_script = ./my_script.sh\n    recipe = %{my_script} c > %{target}\n\n    [d]\n    dep.my_script = ./my_script.sh\n    recipe = %{my_script} d > %{target}\n\nRunning `produce -j 8 a` will run up to 8 jobs in parallel. In this example,\nthe recipes for `c` and `d` may run in parallel. The recipe for `b` will not\nrun in parallel with any other recipe because it uses all 8 job slots.\n\n### Dependency files\n\nSometimes the question which other files a file depends on is more complex and\nmay change frequently over the lifetime of a project, e.g. in the cases of\nsource files that import other header files, modules etc. In such cases, it\nwould be nice to have the dependencies automatically listed by a script.\nProduce supports this via the `depfile` attribute in rules: here, you can\nspecify the name of a _dependency file_, a text file that contains\ndependencies, one per line. Produce will read them and add them to the list of\ndependencies for the matched target. Also, Produce will try to produce the\ndependency file (i.e. make it up to date) _prior_ to reading it. So you can\nwrite another rule that tells Produce how to generate each dependency file, and\nthe rest is automatic.\n\nFor example, the following rule might be used to generate a dependency file\nlisting the source file and header files required for compiling a C object.\nThis example uses `.d` as the extension for dependency files. It runs `cc -MM`\nto use the C compiler’s dependency discovery feature and then some shell magic\nto convert the output from a Makefile rule into a simple dependency list:\n\n    [%{name}.d]\n    dep.c = %{name}.c\n    recipe =\n        cc -MM -I. %{name} | sed -e 's/.*: //' | sed -e 's/^ *//' | \\\n        perl -pe 's/ (\\\\\\n)?/\\n/g' > %{target}\n\nThe following rule could then be used to create the actual object file. The\n`depfile` attribute makes sure that whenever an included header file changes,\nthe object file will be rebuilt:\n\n    [%{name}.o]\n    dep.src = %{name}.c\n    depfile = %{name}.d\n    recipe =\n        cc -c -o %{target} %{src}\n\nNote that the `.c` file will end up in the dependency list twice, once from\n`dep.src` and once from the dependency file. This does not matter, Produce is\nsmart enough not to do the same thing twice.\n\nWarning: dependency files are made up to date even in dry-run mode!\n\n### Rules with multiple outputs\n\nSometimes you have a command that creates multiple files at once because their\ncreation is inherently linked to the same process – it wouldn’t make sense to\ntry and create them in neatly separated steps. Splitting a file up into\nmultiple chunks is such a case:\n\n    split -n 4 data.txt\n\nThis command creates four files called `xaa`, `xab`, `xac` and `xad`. It gets\ncomplicated when these output files individually are dependencies of further\ntargets, as in this example:\n\n    [split_and_zip]\n    type = task\n    deps = xaa.zip xab.zip xac.zip xad.zip\n\n    [%{name}.zip]\n    dep.file = %{name}\n    recipe = zip %{target} %{file}\n\n    [%{chunk}]\n    dep.txt = data.txt\n    recipe = split -n 4 %{txt}\n\nIf we run the task `split_and_zip`, it will try to create its (indirect)\ndependencies `xaa`, `xab`, `xac` and `xad` independently of each other. Each\ntime, the last rule will match, and each time, the exact same recipe will be\nexecuted. This is unncecessary work, one time would be sufficient because it\ncreates all four files in each case. Worse, if we run Produce in parallel,\nmultiple instances of the recipe may run in parallel and corrupt the data.\n\nThe solution is to explicitly declare which files a rule produces, other than\nthe target. The `outputs` attribute serves this purpose. With it, the last rule\nis rewritten as follows:\n\n    [%{chunk}]\n    outputs = xaa xab xac xad\n    dep.txt = data.txt\n    recipe = split -n 4 %{txt}\n\nAdditionally, it is good style to add a matching condition to prevent that the\nrule accidentally matches something that is not its output:\n\n    [%{chunk}]\n    outputs = xaa xab xac xad\n    cond = %{target in outputs.split()}\n    dep.txt = data.txt\n    recipe = split -n 4 %{txt}\n\nInstead of a single `outputs` attribute, separate attributes with the `out.`\nprefix can be used, and both styles can also be mixed, similar to\n`dep.`/`deps`. Here is an example of a rule using the `out.` style to declare\nthat while producing a `.pdf` file it will also produce an `.aux` file:\n\n    [%{name}.pdf]\n    dep.tex = %{name}.tex\n    out.aux = %{name}.aux\n    recipe =\n        pdflatex %{tex}\n\n#### “Sideways” dependencies\n\nSuppose there is a target A that has some additional output file B. What if a\ntarget C wants to declare a dependency on B? For this to work, there must be a\nrule matching B. B, of course, is produced when A is produced. So, effectively,\nin order to produce B, A must be produced. We can express this as a dependency:\nB depends on A. You can write a rule that will tell Produce to produce A when B\nis requested:\n\n    [B]\n    dep.a = A\n\n(TODO: What if A is up to date but B does not exist?)\n\nSuch a rule only serves to “guide” Produce from B to A. It cannot contain its\nown recipe. This would not make the sense as it is the rule for A that creates\nB. If you included a recipe, Produce would complain about a cyclic dependency.\n\nHere is a more concrete example: the rule for `paper.pdf` produces an\nadditional output `paper.aux`. Another rule, for `paper.info`, depends on\n`paper.aux`. In order for Produce to be able to satisfy this dependency,\n`paper.aux` is declared as depending on `paper.pdf`.\n\n    [paper.info]\n    dep.aux = paper.aux\n    recipe = cat %{aux} | ./my_tool > %{target}\n\n    [paper.aux]\n    dep.pdf = paper.pdf\n\n    [paper.pdf]\n    dep.tex = paper.tex\n    outputs = paper.aux\n    recipe =\n        pdflatex paper\n\nThere is one final problem here: after running the recipe for `paper.pdf`, the\nmodification time of `paper.pdf` may well be greater than that of `paper.aux`.\nSince we declared `paper.aux` dependent on `paper.pdf`, this means that\n`paper.aux` appears as out of date to Produce even though we just produced it.\nA simple and effective way to prevent this is to include `touch %{outputs}` as \nthe last line of any rule with multiple outputs. The last rule above thus\nbecomes:\n\n    [paper.pdf]\n    dep.tex = paper.tex\n    outputs = paper.aux\n    recipe =\n        pdflatex paper\n        touch %{outputs}\n\n### Producing the outputs for all inputs\n\nSuppose you have a number of input files (say `inputs/input001.txt` to\n`inputs/input100.txt`). Each input can be processed to yield an output file\n(say `models/model001` to `models/model100`) – for example, by the following\nrule:\n\n    [models/model%{num}]\n    dep.input = inputs/input%{num}.txt\n    dep.train = bin/train\n    recipe = ./%{train} %{input} %{target}\n\nNow you would like to automatically produce the model for every input that is\nthere. You can do this by writing a _task_, i.e., a rule for a target that is\nnot a file but is just invoked. The task for the example might look like this:\n\n    [all_models]\n    type = task\n    deps = %{'models/{}'.format(i.replace('input', 'model').replace('.txt, \\\n             '') for i in os.listdir('inputs')}\n\nThis task does not need a recipe because all it does is pull in all the models\nthrough its dependencies. The dependencies are specified through an arbitrary\nPython expression, in this case it looks at the inputs directory and returns\nthe names of the models corresponding to each input. It uses the `os` module,\nwhich needs to be imported. So let’s add a global section with a prelude to do\nthis. The whole Producefile then looks like this:\n\n    []\n    prelude =\n        import os\n\n    [models/model%{num}]\n    dep.input = inputs/input%{num}.txt\n    dep.train = bin/train\n    recipe = ./%{train} %{input} %{target}\n\n    [all_models]\n    type = task\n    deps = %{'models/{}'.format(i.replace('input', 'model').replace('.txt, \\\n             '') for i in os.listdir('inputs')}\n\nAnd to produce all models, all you need to do is tell Produce to produce the\n`all_models` task:\n\n    $ produce all_models\n\n## All special attributes at a glance\n\nFor your reference, here are all the rule attributes that currently have a\nspecial meaning to Produce:\n\n### In rules\n\n<dl>\n    <dt><code>target</code></dt>\n    <dd>When a rule matches a target, this variable is always set to that\n    target, mainly so you can refer to it in the recipe. It is illegal to set\n    the <code>target</code> attribute yourself. Also see\n    <a href=\"#rules-expansions-escaping-and-comments\">Rules, expansions, escaping and comments</a>.</dd>\n    <dt><code>cond</code></dt>\n    <dd>Allows to specify a _matching condition_ in addition to the target\n    pattern. Typically it is given as a single expansion with a boolean Python\n    expression. It is expanded immediately after a target matches the rule. The\n    resulting string must be a Python literal. If “truthy”, the rule matches\n    and its expansion/execution continues. If “falsy”, the rule does not match\n    the target and Produce proceeds with the next rule, trying to match the\n    target. Also see <a href=\"#multiple-wildcards-regular-expressions-and-matching-conditions\">Multiple wildcards, regular expressions and matching conditions</a>.</dd>\n    <dt><code>dep.*</code></dt>\n    <dd>The asterisk stands for a name chosen by you, which is the actual name\n    of the variable the attribute value will be assigned to. The <code>dep.</code> prefix,\n    not part of the variable name, tells Produce that this is a dependency,\n    i.e. that the target given by the value must be made up to date before the\n    recipe of this rule can be run. Also see\n    <a href=\"#named-and-unnamed-dependencies\">Named an unnamed depenencies</a>.</dd>\n    <dt><code>deps</code></dt>\n    <dd>Like <code>dep.*</code>, but allows for specifying multiple unnamed dependencies\n    in one attribute value. The format is roughly a space-separated list. For\n    details, see\n    <a href=\"https://docs.python.org/3/library/shlex.html?highlight=shlex#shlex.split\"><code>shlex.split</code></a>.\n    Also see <a href=\"#named-and-unnamed-dependencies\">Named an unnamed depenencies</a>.</dd>\n    <dt><code>depfile</code></dt>\n    <dd>Another way to specify (additional) dependencies: the name of a file\n    from which dependencies are read, one per line. Additionally, Produce will\n    try to make that file up to date prior to reading it. Also see\n    <a href=\"#dependency-files\">Dependency files</a>.</dd>\n    <dt><code>type</code></dt>\n    <dd>Is either <code>file</code> (default) or <code>task</code>. If <code>file</code>, the target is supposed\n    to be a file that the recipe creates/updates if it runs successfully. If\n    <code>task</code>, the target is an arbitrary name given to some task that the recipe\n    executes. Crucially, task-type targets are always assumed to be out of\n    date, regardless of the possible existence and age of a file with the same\n    name. Also see\n    <a href=\"#special-targets-vs-special-attributes\">Special targets vs. special attributes</a></dd>\n    <dt><code>recipe</code></dt>\n    <dd>The command(s) to run to build the target, typically a single shell\n    command or a short shell script. Unlike Make, each line is not run in\n    isolation, but the whole script is passed to the interpreter as a whole,\n    after doing expansions. This way, you can e.g. define a shell variable\n    on one line and use it on the next. Also see\n    <a href=\"#rules-expansions-escaping-and-comments\">Rules, expansions, escaping and comments</a>.</dd>\n    <dt><code>shell</code></dt>\n    <dd>See <a href=\"#shell-choosing-the-recipe-interpreter\"><code>shell</code>: choosing the recipe interpreter</a></dd>\n    <dt><code>out.*</code></dt>\n    <dd>See <a href=\"#rules-with-multiple-outputs\">Rules with multiple outputs</a></dd>\n    <dt><code>outputs</code></dt>\n    <dd>See <a href=\"#rules-with-multiple-outputs\">Rules with multiple outputs</a></dd>\n    <dt><code>jobs</code></dt>\n    <dd>See <a href=\"#running-jobs-in-parallel\">Running jobs in parallel</a></dd>\n</dl>\n\n### In the global section\n\n<dl>\n    <dt><code>default</code></dt>\n    <dd>A list\n    (parsed by <a href=\"https://docs.python.org/3/library/shlex.html?highlight=shlex#shlex.split\"><code>shlex.split</code></a>)\n    of default targets that are produced if the user does not specify any\n    targets when calling Produce.</dd>\n    <dt><code>prelude</code></dt>\n    <dd>See <a href=\"#the-prelude\">The prelude</a></dd>\n</dl>\n\nGetting in touch\n----------------\n\nProduce is being developed by Kilian Evang <%{firstname}@%{lastname}.name>.\nI would love to hear from you if you find it useful, if you have questions, bug\nreports or feature requests.\n\nAcknowledgments\n---------------\n\nThe Produce logo was designed by [Valerio Basile](https://valeriobasile.github.io).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/texttheater/produce",
    "keywords": "make,builder,automation",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "produce",
    "package_url": "https://pypi.org/project/produce/",
    "platform": null,
    "project_url": "https://pypi.org/project/produce/",
    "project_urls": {
      "Homepage": "https://github.com/texttheater/produce"
    },
    "release_url": "https://pypi.org/project/produce/0.7.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Replacement for Make geared towards processing data rather than compiling code",
    "version": "0.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14972707,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cba62c4511d909635e37f41be5652cbb656c858855c574b02a856c204586f656",
          "md5": "c4f5faba00e8c559622063e66926bc49",
          "sha256": "265864c15a81bbb76079dbde2ed76da7746a312821ed92588d3919e2ec36c3d6"
        },
        "downloads": -1,
        "filename": "produce-0.1-py3.6.egg",
        "has_sig": false,
        "md5_digest": "c4f5faba00e8c559622063e66926bc49",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "requires_python": null,
        "size": 11144,
        "upload_time": "2019-04-17T16:42:24",
        "upload_time_iso_8601": "2019-04-17T16:42:24.950831Z",
        "url": "https://files.pythonhosted.org/packages/cb/a6/2c4511d909635e37f41be5652cbb656c858855c574b02a856c204586f656/produce-0.1-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b7674f3492a893d8b9d0136f4a97e6977bbc733748c2146fa666f2d0cfc9e27c",
          "md5": "d6ea2a0bac84b007fa7d18296f3bea37",
          "sha256": "eb3b8f4f53a88cf893637b7cc0e81185f4674f5c3ecc6383960c365890f6637f"
        },
        "downloads": -1,
        "filename": "produce-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6ea2a0bac84b007fa7d18296f3bea37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12180,
        "upload_time": "2019-04-17T16:42:22",
        "upload_time_iso_8601": "2019-04-17T16:42:22.598580Z",
        "url": "https://files.pythonhosted.org/packages/b7/67/4f3492a893d8b9d0136f4a97e6977bbc733748c2146fa666f2d0cfc9e27c/produce-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "942ad3e9ad1a88c0c6d2202a569402d26459dc4746656f3f6aa35ae8e7a18718",
          "md5": "e53efe874e0da43bf9db33ced4f0b654",
          "sha256": "8c614f5a4b42c63995ffe1534970c5e2f5abbdd29a740ec3367c5343ff93316e"
        },
        "downloads": -1,
        "filename": "produce-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e53efe874e0da43bf9db33ced4f0b654",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25941,
        "upload_time": "2019-04-17T16:42:26",
        "upload_time_iso_8601": "2019-04-17T16:42:26.506996Z",
        "url": "https://files.pythonhosted.org/packages/94/2a/d3e9ad1a88c0c6d2202a569402d26459dc4746656f3f6aa35ae8e7a18718/produce-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73083567c1728b679dea0c75e077db89c69ff8b2d56768644d8d3bcc0ee7e817",
          "md5": "f939936e9ddf54946cb3bf1158c563ae",
          "sha256": "bf83c766fb504c0fc7a6f9b43a52d6bd17471335c892f7bfbe8071e9ae0c3007"
        },
        "downloads": -1,
        "filename": "produce-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f939936e9ddf54946cb3bf1158c563ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12097,
        "upload_time": "2020-04-05T16:19:00",
        "upload_time_iso_8601": "2020-04-05T16:19:00.187005Z",
        "url": "https://files.pythonhosted.org/packages/73/08/3567c1728b679dea0c75e077db89c69ff8b2d56768644d8d3bcc0ee7e817/produce-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "929fc457d778cd90b1eaac809b74771a46b2a4a88ddde11f3ff7d5e961f16581",
          "md5": "13a6f2570d6bd39ba0699a1e2bbbc7b6",
          "sha256": "ea0010ec61303ad36fe3d530b44709ed139f79f573e57d7b619537e4040537bb"
        },
        "downloads": -1,
        "filename": "produce-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "13a6f2570d6bd39ba0699a1e2bbbc7b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 25758,
        "upload_time": "2020-04-05T16:19:02",
        "upload_time_iso_8601": "2020-04-05T16:19:02.447826Z",
        "url": "https://files.pythonhosted.org/packages/92/9f/c457d778cd90b1eaac809b74771a46b2a4a88ddde11f3ff7d5e961f16581/produce-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfa43b635866e7eaaaec2153aeb55094930a96020827cdc0a56e8aeed9e8ea84",
          "md5": "a22006bb6ca3869cfc06dd4e89f5adb8",
          "sha256": "00e9523237e8169f0f4cbfd291c9c2fd7e02cc92cda693d75d8f9748388cf646"
        },
        "downloads": -1,
        "filename": "produce-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a22006bb6ca3869cfc06dd4e89f5adb8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27342,
        "upload_time": "2020-04-11T17:11:19",
        "upload_time_iso_8601": "2020-04-11T17:11:19.464188Z",
        "url": "https://files.pythonhosted.org/packages/cf/a4/3b635866e7eaaaec2153aeb55094930a96020827cdc0a56e8aeed9e8ea84/produce-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "000ab37d519a93a58bb217307707814af03922792ca8b0f5ef7cd71e827b5cfa",
          "md5": "92176b6a99ed88d14c0d356d790b05d3",
          "sha256": "c8cec212d3f2de1faa2a225cdcde5b4a586578b2acda47c7eab47ebdcb565614"
        },
        "downloads": -1,
        "filename": "produce-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "92176b6a99ed88d14c0d356d790b05d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56518,
        "upload_time": "2020-04-11T17:11:20",
        "upload_time_iso_8601": "2020-04-11T17:11:20.496906Z",
        "url": "https://files.pythonhosted.org/packages/00/0a/b37d519a93a58bb217307707814af03922792ca8b0f5ef7cd71e827b5cfa/produce-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "363c5efcfd2458e4efda1ba2a5db733a338cc003fda540f320980cb6f08a4648",
          "md5": "6dedf8214c78dd12a68dc45ae2ead0d1",
          "sha256": "642ccbf018ef2c4925f6f7e06a05bd3d077dd19f22ab2dccb38b1a369085f735"
        },
        "downloads": -1,
        "filename": "produce-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6dedf8214c78dd12a68dc45ae2ead0d1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27316,
        "upload_time": "2020-10-17T19:33:09",
        "upload_time_iso_8601": "2020-10-17T19:33:09.699899Z",
        "url": "https://files.pythonhosted.org/packages/36/3c/5efcfd2458e4efda1ba2a5db733a338cc003fda540f320980cb6f08a4648/produce-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c71219b2bb1ce0c83b4f784a70b55d9d041520f79da1a898d562482a72c2144d",
          "md5": "2a7c8b74863dd91a7ab37fa51d6f97b8",
          "sha256": "32037df741dc2305bc827847522542894c320f1c95cdfebe660c1e5f1a6afbef"
        },
        "downloads": -1,
        "filename": "produce-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2a7c8b74863dd91a7ab37fa51d6f97b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56479,
        "upload_time": "2020-10-17T19:33:10",
        "upload_time_iso_8601": "2020-10-17T19:33:10.804554Z",
        "url": "https://files.pythonhosted.org/packages/c7/12/19b2bb1ce0c83b4f784a70b55d9d041520f79da1a898d562482a72c2144d/produce-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b62cf1cf857c449d14b4b2615d30d4d5e309345d77e9c955f56f896be8513bf7",
          "md5": "69fd57d57d61258e25d633411de68ef0",
          "sha256": "02389902a33ab085a0ef6b2c1bded404e1ced91e22bc591c48e32f6af9c43c2c"
        },
        "downloads": -1,
        "filename": "produce-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "69fd57d57d61258e25d633411de68ef0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27394,
        "upload_time": "2021-02-24T14:10:15",
        "upload_time_iso_8601": "2021-02-24T14:10:15.298141Z",
        "url": "https://files.pythonhosted.org/packages/b6/2c/f1cf857c449d14b4b2615d30d4d5e309345d77e9c955f56f896be8513bf7/produce-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4578f58ee167dc567fcbce5ddec258a42282237e8d3349c4f2904667611dc15d",
          "md5": "174263065c0ff443d734155324af0b32",
          "sha256": "304c559761063045cc234d51d9edecf21b1aab8e6cac3dbff5de6f2db36382ed"
        },
        "downloads": -1,
        "filename": "produce-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "174263065c0ff443d734155324af0b32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56538,
        "upload_time": "2021-02-24T14:10:16",
        "upload_time_iso_8601": "2021-02-24T14:10:16.173923Z",
        "url": "https://files.pythonhosted.org/packages/45/78/f58ee167dc567fcbce5ddec258a42282237e8d3349c4f2904667611dc15d/produce-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ebdd419ffe810f00c80d6d9a1333f448605701515e13022e5de70f6f467de318",
          "md5": "1f4ef2337277c7176798cd47d23f2ddb",
          "sha256": "dfd7b0e660469cd30c32a04d8c25784ba21984f772e7993521bff559017d3b7f"
        },
        "downloads": -1,
        "filename": "produce-0.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f4ef2337277c7176798cd47d23f2ddb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27393,
        "upload_time": "2021-02-25T13:28:11",
        "upload_time_iso_8601": "2021-02-25T13:28:11.803260Z",
        "url": "https://files.pythonhosted.org/packages/eb/dd/419ffe810f00c80d6d9a1333f448605701515e13022e5de70f6f467de318/produce-0.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "631066db0fc79033012269673220742fde8b56dcfd07d0a4a42d893e047b7f0b",
          "md5": "e20e9cf678b2bd36baa96cce18bbc83e",
          "sha256": "d1997693ed4eedaa7d7e4af82a406c31487ca0ada542439901ce8c3eb5f43fa0"
        },
        "downloads": -1,
        "filename": "produce-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e20e9cf678b2bd36baa96cce18bbc83e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56552,
        "upload_time": "2021-02-25T13:28:12",
        "upload_time_iso_8601": "2021-02-25T13:28:12.722166Z",
        "url": "https://files.pythonhosted.org/packages/63/10/66db0fc79033012269673220742fde8b56dcfd07d0a4a42d893e047b7f0b/produce-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3e22548b5c3a42b0d74137ebbcb5524ef389d6954614fc86ae4a871ff1c6cde",
          "md5": "b9c6cbeb937b702fea52eaf491a50ad4",
          "sha256": "21fdf7dc21eed5c1143aaf6b91c817ece1bbd0b68724cb5bc54d016d7e33e1c2"
        },
        "downloads": -1,
        "filename": "produce-0.4.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9c6cbeb937b702fea52eaf491a50ad4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27397,
        "upload_time": "2021-02-26T08:23:12",
        "upload_time_iso_8601": "2021-02-26T08:23:12.889499Z",
        "url": "https://files.pythonhosted.org/packages/a3/e2/2548b5c3a42b0d74137ebbcb5524ef389d6954614fc86ae4a871ff1c6cde/produce-0.4.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "475d7a6b5c9da924e451169475930016ff17b530a84988bf10b7217f1b8ef55b",
          "md5": "ef8d16af76a020e1410cfd0978b24a24",
          "sha256": "af3b510e40ea36bed171e36d4790f11d8565f07542fdd422bd57f423b450ca0a"
        },
        "downloads": -1,
        "filename": "produce-0.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ef8d16af76a020e1410cfd0978b24a24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56552,
        "upload_time": "2021-02-26T08:23:13",
        "upload_time_iso_8601": "2021-02-26T08:23:13.891172Z",
        "url": "https://files.pythonhosted.org/packages/47/5d/7a6b5c9da924e451169475930016ff17b530a84988bf10b7217f1b8ef55b/produce-0.4.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ff808462d8fea95b2bca4015239ff84b749e58c2a04a9932e198dbafe2c7761",
          "md5": "16f92a8b91499f6a2f3bd46b7ab49bc6",
          "sha256": "78e075a0602faf51aa9e86cbce8f5025315f143e011a9006434cdfa0478a5a94"
        },
        "downloads": -1,
        "filename": "produce-0.4.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16f92a8b91499f6a2f3bd46b7ab49bc6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27339,
        "upload_time": "2021-05-19T13:42:38",
        "upload_time_iso_8601": "2021-05-19T13:42:38.008232Z",
        "url": "https://files.pythonhosted.org/packages/0f/f8/08462d8fea95b2bca4015239ff84b749e58c2a04a9932e198dbafe2c7761/produce-0.4.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5c04b82b91614cb04b469274ac34c01c079a4fecb24b91f96ed97d102e2208d",
          "md5": "e1d7444167f91391be3c890841c0f3d4",
          "sha256": "b9af348a93b1578beabaf61d4c6b5e7fe5b712301c8ecc9ef471cb4ae87c1c9d"
        },
        "downloads": -1,
        "filename": "produce-0.4.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e1d7444167f91391be3c890841c0f3d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 57215,
        "upload_time": "2021-05-19T13:42:39",
        "upload_time_iso_8601": "2021-05-19T13:42:39.126394Z",
        "url": "https://files.pythonhosted.org/packages/d5/c0/4b82b91614cb04b469274ac34c01c079a4fecb24b91f96ed97d102e2208d/produce-0.4.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c80a25f0da5fdae692669c3a25e3dffe1108c6d0e002ab96c613c39c956e3169",
          "md5": "40271e442011fb301f908a84422c0ddd",
          "sha256": "89f62a5479c73ba468d4d3f5c2cb0ce5093def95c98c12d7406c23073b0caa0a"
        },
        "downloads": -1,
        "filename": "produce-0.4.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40271e442011fb301f908a84422c0ddd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27463,
        "upload_time": "2021-05-31T17:04:27",
        "upload_time_iso_8601": "2021-05-31T17:04:27.521428Z",
        "url": "https://files.pythonhosted.org/packages/c8/0a/25f0da5fdae692669c3a25e3dffe1108c6d0e002ab96c613c39c956e3169/produce-0.4.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4f4012893827cbd6f1527b2f7b97fb0dd30c2c23491a8cc45774b1f80ac67b7",
          "md5": "94b65c9550bc31f7b48cf491594b845c",
          "sha256": "f6842925f5e3a08ace6e739abe36afc186402fb6a616217e6c791cb402cc4242"
        },
        "downloads": -1,
        "filename": "produce-0.4.7.tar.gz",
        "has_sig": false,
        "md5_digest": "94b65c9550bc31f7b48cf491594b845c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55965,
        "upload_time": "2021-05-31T17:04:28",
        "upload_time_iso_8601": "2021-05-31T17:04:28.855509Z",
        "url": "https://files.pythonhosted.org/packages/e4/f4/012893827cbd6f1527b2f7b97fb0dd30c2c23491a8cc45774b1f80ac67b7/produce-0.4.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0c8b0a7ee5657c35ba9ab654b1c3506c7b87ad86b660dff95f177dce7877b61",
          "md5": "ac3059fb5987889e2c989dec4c77b55f",
          "sha256": "ea2345534d2042623efeb1504c1b2b506b1183c2f447b71fb0909a207cfdd40e"
        },
        "downloads": -1,
        "filename": "produce-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac3059fb5987889e2c989dec4c77b55f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27467,
        "upload_time": "2021-07-15T10:24:01",
        "upload_time_iso_8601": "2021-07-15T10:24:01.641684Z",
        "url": "https://files.pythonhosted.org/packages/e0/c8/b0a7ee5657c35ba9ab654b1c3506c7b87ad86b660dff95f177dce7877b61/produce-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "195e533ed6d320ee91b10db9a7e576a6e022d9416f39f720a62d35e1a31aa79b",
          "md5": "730247f750efe04d1c519d218593f4cd",
          "sha256": "fc736b598b9d50f9494f6330f0257140389b2adff953777631a1d56fa816b0d2"
        },
        "downloads": -1,
        "filename": "produce-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "730247f750efe04d1c519d218593f4cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55986,
        "upload_time": "2021-07-15T10:24:02",
        "upload_time_iso_8601": "2021-07-15T10:24:02.931003Z",
        "url": "https://files.pythonhosted.org/packages/19/5e/533ed6d320ee91b10db9a7e576a6e022d9416f39f720a62d35e1a31aa79b/produce-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50ec381cc5e29ea6bd5844bdb106048b0f1523c5c5130dbb309da23dc4d8f0e5",
          "md5": "c630ad21cb7912aacec3ff9c8754b2d0",
          "sha256": "d53bd9433fe9b1d2eaecb164265fffd2e0dafe1026dd67155e9d2ded1603b218"
        },
        "downloads": -1,
        "filename": "produce-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c630ad21cb7912aacec3ff9c8754b2d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27447,
        "upload_time": "2022-01-07T13:25:17",
        "upload_time_iso_8601": "2022-01-07T13:25:17.023183Z",
        "url": "https://files.pythonhosted.org/packages/50/ec/381cc5e29ea6bd5844bdb106048b0f1523c5c5130dbb309da23dc4d8f0e5/produce-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9133f2cc03ee67a4ee6059144b8ff7057e32b546bded054a4e7d3b10073d68ef",
          "md5": "d6e5b3a7957dcd5b9543432a5a0c2295",
          "sha256": "95d873abd42d3dd3ba508fa360c7c76177950b77d8359c8cdce7bae94834232a"
        },
        "downloads": -1,
        "filename": "produce-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d6e5b3a7957dcd5b9543432a5a0c2295",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55952,
        "upload_time": "2022-01-07T13:25:18",
        "upload_time_iso_8601": "2022-01-07T13:25:18.134836Z",
        "url": "https://files.pythonhosted.org/packages/91/33/f2cc03ee67a4ee6059144b8ff7057e32b546bded054a4e7d3b10073d68ef/produce-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d72d39d941b1a55057429d7484eafcd0cd5af132bc83aff2c1c97fb86057c234",
          "md5": "1899686daf84c3d4e53f050a980e0b39",
          "sha256": "a3357c01672241b808d22b5afe1e7806774183bf4bd82926b97dbfaf0b1508e5"
        },
        "downloads": -1,
        "filename": "produce-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1899686daf84c3d4e53f050a980e0b39",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27445,
        "upload_time": "2022-03-03T12:09:50",
        "upload_time_iso_8601": "2022-03-03T12:09:50.482675Z",
        "url": "https://files.pythonhosted.org/packages/d7/2d/39d941b1a55057429d7484eafcd0cd5af132bc83aff2c1c97fb86057c234/produce-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51de4af2b1aff76065c65fa25242f81375084ebc2cfeec813bfce104698a11bd",
          "md5": "484521e98c7d2b279731c50f40b65109",
          "sha256": "b0347c35f0585eb0a82eea3a3645c13f5daebf4a32b5ba7cbb28b55a055a5487"
        },
        "downloads": -1,
        "filename": "produce-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "484521e98c7d2b279731c50f40b65109",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55951,
        "upload_time": "2022-03-03T12:09:52",
        "upload_time_iso_8601": "2022-03-03T12:09:52.052469Z",
        "url": "https://files.pythonhosted.org/packages/51/de/4af2b1aff76065c65fa25242f81375084ebc2cfeec813bfce104698a11bd/produce-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99129d9e53e9d129d25203654185ed24c2cafeb8013b0c566f05bc7260f28f34",
          "md5": "63054c59ca38ac51fd84d5a5ad501c2c",
          "sha256": "4780cfc5e25e64b9328f86f59c9ce5b05266f9805520f88a9f22199c6ed43543"
        },
        "downloads": -1,
        "filename": "produce-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63054c59ca38ac51fd84d5a5ad501c2c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27552,
        "upload_time": "2022-09-02T09:41:15",
        "upload_time_iso_8601": "2022-09-02T09:41:15.864119Z",
        "url": "https://files.pythonhosted.org/packages/99/12/9d9e53e9d129d25203654185ed24c2cafeb8013b0c566f05bc7260f28f34/produce-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d5c57c7594b146a9eae003a01b5f889e845abbc64557fa30dfd6d8eac166dcf",
          "md5": "0dae85ec51eb6254708956b489221ffb",
          "sha256": "5cb32e88f6e178bfdad2610c09473d15a4e3e65e02e5f7824a89a9bc2cec3d12"
        },
        "downloads": -1,
        "filename": "produce-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0dae85ec51eb6254708956b489221ffb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 56111,
        "upload_time": "2022-09-02T09:41:17",
        "upload_time_iso_8601": "2022-09-02T09:41:17.508235Z",
        "url": "https://files.pythonhosted.org/packages/7d/5c/57c7594b146a9eae003a01b5f889e845abbc64557fa30dfd6d8eac166dcf/produce-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "99129d9e53e9d129d25203654185ed24c2cafeb8013b0c566f05bc7260f28f34",
        "md5": "63054c59ca38ac51fd84d5a5ad501c2c",
        "sha256": "4780cfc5e25e64b9328f86f59c9ce5b05266f9805520f88a9f22199c6ed43543"
      },
      "downloads": -1,
      "filename": "produce-0.7.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "63054c59ca38ac51fd84d5a5ad501c2c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 27552,
      "upload_time": "2022-09-02T09:41:15",
      "upload_time_iso_8601": "2022-09-02T09:41:15.864119Z",
      "url": "https://files.pythonhosted.org/packages/99/12/9d9e53e9d129d25203654185ed24c2cafeb8013b0c566f05bc7260f28f34/produce-0.7.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d5c57c7594b146a9eae003a01b5f889e845abbc64557fa30dfd6d8eac166dcf",
        "md5": "0dae85ec51eb6254708956b489221ffb",
        "sha256": "5cb32e88f6e178bfdad2610c09473d15a4e3e65e02e5f7824a89a9bc2cec3d12"
      },
      "downloads": -1,
      "filename": "produce-0.7.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0dae85ec51eb6254708956b489221ffb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 56111,
      "upload_time": "2022-09-02T09:41:17",
      "upload_time_iso_8601": "2022-09-02T09:41:17.508235Z",
      "url": "https://files.pythonhosted.org/packages/7d/5c/57c7594b146a9eae003a01b5f889e845abbc64557fa30dfd6d8eac166dcf/produce-0.7.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}