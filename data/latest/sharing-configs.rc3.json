{
  "info": {
    "author": "Maykin Media",
    "author_email": "support@maykinmedia.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "\nSharing Configs for Django\n=================================================\n\n:Version: 0.1.2\n:Source: https://github.com/maykinmedia/sharing-configs\n:Keywords: ``django``, ``github``\n:PythonVersion: 3.7, 3.8, 3.9\n\n|build-status| |coverage| |black|\n\n|python-versions| |django-versions| |pypi-version|\n\nA reusable Django app to export and import resources using \n`Sharing Configs API`_.\n\nDeveloped by `Maykin Media B.V.`_.\n\nFeatures\n========\n\n* provides client to interact with `Sharing Configs API`_\n* easy download and upload of resources in the Django admin\n\n\nInstallation\n============\n\n1. Install from PyPI\n\n.. code-block:: bash\n\n    pip install sharing-configs\n\n2. Add ``sharing_configs`` to the ``INSTALLED_APPS`` setting.\n3. In the admin page of ``SharingConfigsConfig`` configure access to the \n   Sharing Configs API\n\n\nUsage\n=====\n\nThe Sharing Config Library provides two mixins to add into your ``ModelAdmin`` \nclass to enable the import/export of objects through the Django admin:\n\n* ``SharingConfigsImportMixin`` - to import objects\n* ``SharingConfigsExportMixin`` - to export objects\n* ``SharingConfigsMixin`` - to import and export objects\n\nThe mixins provide custom admin views and request Sharing Configs API under the \nhood. You will need to override the ``get_sharing_configs_import_data`` and\n``get_sharing_configs_export_data`` functions and implement your own \nimport/export behaviour.\n\nYou can furthermore override the import/export forms that are used by \noverriding the class variables ``sharing_configs_export_form`` and \n``sharing_configs_import_form``.\n\n.. code-block:: python\n\n    from sharing_configs.admin import SharingConfigsMixin\n\n    class SomeObjectAdmin(SharingConfigsMixin, admin.ModelAdmin):\n\n        sharing_configs_export_form = SomeObjectExportForm  # Defaults to sharing_configs.forms.ExportToForm\n        sharing_configs_import_form = SomeObjectImportForm  # Defaults to sharing_configs.forms.ImportForm\n\n        def get_sharing_configs_export_data(self, obj: object) -> bytes:\n            \"\"\"\n            Convert ``SomeObject`` to JSON or something.\n            \"\"\"\n            # Your code...\n\n        def get_sharing_configs_import_data(self, content: bytes) -> object:\n            \"\"\"\n            Convert JSON (or whatever was exported by function above) to \n            ``SomeObject``.\n            \"\"\"\n            # Your code...\n\n\nExample\n=======\n\nWe can use the Sharing Configs library to exchange color-themes for the Django \nadmin with other users. For this, we need a model that stores the color-theme, \nand use the Sharing Configs mixins to import and export the color-theme.\n\nCreate two models: ``Configuration`` and ``Theme``\n\n.. code-block:: python\n\n    # models.py  \n\n    from django.db import models\n    from solo.models import SingletonModel\n\n\n    class Configuration(SingletonModel):\n        \"\"\"Configuration that holds the current theme\"\"\"\n\n        theme = models.ForeignKey(\"Theme\", on_delete=models.SET_NULL, null=True, blank=True)\n\n\n    class Theme(models.Model):\n        \"\"\"All attributes used for theming.\"\"\"\n\n        name = models.CharField(\"name\", max_length=100)\n        primary = models.CharField(\"primary color\", max_length=7)\n        secondary = models.CharField(\"secondary color\", max_length=7)\n        accent = models.CharField(\"accent color\", max_length=7)\n        primary_fg = models.CharField(\"primary foreground color\", max_length=7)\n        \n        \nRegister the ``Theme`` model in the admin and include our two mixins to \nintroduce the UI to import and export objects, in this case, themes. Sharing \nConfigs does not know how to import or export your model, so you will need to \nwrite this yourself. You can override the methods introduced by the \nmixins: ``get_sharing_configs_export_data`` and \n``get_sharing_configs_import_data``\n\n.. code-block:: python\n\n    # admin.py\n\n    import json\n\n    from django.contrib import admin\n    from django.forms.models import model_to_dict\n    from django.shortcuts import get_object_or_404\n\n    from sharing_configs.admin import SharingConfigsMixin\n\n    from .models import Configuration, Theme\n\n\n    class ThemeAdmin(SharingConfigsMixin, admin.ModelAdmin):        \n\n        def get_sharing_configs_export_data(self, obj: object) -> bytes:\n            \"\"\"Convert the theme to JSON.\"\"\"\n            theme = get_object_or_404(Theme, id=obj.id)\n            theme_dict = model_to_dict(theme)\n            theme_dict.pop(\"id\", None)\n            dump_json_theme = json.dumps(cleaned_theme_dict, sort_keys=True, default=str)        \n            return dump_json_theme.encode(\"utf-8\")\n\n        def get_sharing_configs_import_data(self, content: bytes) -> object:\n            \"\"\"\n            Convert JSON to a new theme instance. Typically, the JSON that is \n            read here is the same as that the JSON generated by the above \n            function.\n            \"\"\"              \n            decoded_content = content.decode(\"utf-8\")\n            theme_dict = json.loads(decoded_content)        \n            return ColorTheme.objects.create(**theme_dict)       \n\n\nThat takes care of the import and export functionality for exchaning \ncolor-themes. To make it actually working, we complete this example with some \nadditional code. Create a ``context_processors.py`` file, to pass the \ncurrently configured theme to the template context:\n\n.. code-block:: python\n\n    def theme(request:object)->dict:\n        \"\"\"\n        Create a dictionary of color variables to pass to the base_site.html Django admin page\n        \"\"\"\n        conf = Configuration.get_solo()\n\n        return {\n            \"theme\": conf.theme\n        }\n\n\nFinally, pass the theme context variables to an overriden ``base_site.html`` in \nthe templates folder.\n\n.. code-block:: jinja\n\n    {# admin/base_site.html #}\n    {% extends \"admin/base_site.html\" %}\n\n    {% block extrastyle %}\n        {% if theme %}\n            <style type=\"text/css\">\n                :root {\n                    --primary: {{ theme.primary }};\n                    --secondary:{{ theme.secondary }};\n                    --accent:{{ theme.accent }};\n                    --primary_fg:{{ theme.primary_fg }};\n                }\n            </style>\n        {% endif %}\n    {% endblock %}\n\n\nNow you can choose an available color-theme via the configuration inside the \nDjango admin. Ofcourse, this will really shine when you configure a proper\nSharing Configs API to exchange themes with eachother!\n\n\n.. |build-status| image:: https://github.com/maykinmedia/sharing-configs/actions/workflows/ci.yaml/badge.svg?branch=master\n    :alt: Build status\n    :target: https://github.com/maykinmedia/sharing-configs/actions/workflows/ci.yaml?branch=master\n\n.. |coverage| image:: https://codecov.io/gh/maykinmedia/sharing-configs/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/maykinmedia/sharing-configs\n    :alt: Coverage status\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\n.. |python-versions| image:: https://img.shields.io/pypi/pyversions/sharing_configs.svg\n\n.. |django-versions| image:: https://img.shields.io/pypi/djversions/sharing_configs.svg\n\n.. |pypi-version| image:: https://img.shields.io/pypi/v/sharing_configs.svg\n    :target: https://pypi.org/project/sharing_configs/\n\n.. _Maykin Media B.V.: https://www.maykinmedia.nl\n.. _Sharing Configs API: https://github.com/maykinmedia/sharing-configs-api.git\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/maykinmedia/sharing-configs",
    "keywords": "django,github",
    "license": "EUPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sharing-configs",
    "package_url": "https://pypi.org/project/sharing-configs/",
    "platform": null,
    "project_url": "https://pypi.org/project/sharing-configs/",
    "project_urls": {
      "Homepage": "https://github.com/maykinmedia/sharing-configs"
    },
    "release_url": "https://pypi.org/project/sharing-configs/0.1.2/",
    "requires_dist": [
      "django (>=2.2)",
      "django-solo",
      "requests",
      "pytest-cov ; extra == 'coverage'",
      "sphinx ; extra == 'docs'",
      "sphinx-rtd-theme ; extra == 'docs'",
      "flake8 ; extra == 'pep8'",
      "bumpversion ; extra == 'release'",
      "twine ; extra == 'release'",
      "pytest ; extra == 'tests'",
      "pytest-django ; extra == 'tests'",
      "requests-mock ; extra == 'tests'",
      "Faker ; extra == 'tests'",
      "factory-boy ; extra == 'tests'",
      "tox ; extra == 'tests'",
      "black ; extra == 'tests'",
      "isort ; extra == 'tests'"
    ],
    "requires_python": "",
    "summary": "Django admin package to interact with Sharing Configs API",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14226256,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8000017f6821c3b5daaea6835122b412c810c6cd967dfbfc73f09edd8b199120",
          "md5": "59f8fdf6454359b8c9f3f796d0c59050",
          "sha256": "027618aebc3e3fa66b4ba90a1c23188016d477ff15b0b8f56af9f72ca7a4d34c"
        },
        "downloads": -1,
        "filename": "sharing_configs-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "59f8fdf6454359b8c9f3f796d0c59050",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 22310,
        "upload_time": "2022-05-13T14:55:13",
        "upload_time_iso_8601": "2022-05-13T14:55:13.809020Z",
        "url": "https://files.pythonhosted.org/packages/80/00/017f6821c3b5daaea6835122b412c810c6cd967dfbfc73f09edd8b199120/sharing_configs-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "400575f11937424f2a862e3730babfbd1fd959664062868038052a10db974473",
          "md5": "1a05e1cb9ba681c0aa8b810d45d2b53e",
          "sha256": "286c4bc8b0aa0063e1cd4f48e8bd9aa151b1d89bee4748086b0e4d821a9eb05c"
        },
        "downloads": -1,
        "filename": "sharing-configs-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1a05e1cb9ba681c0aa8b810d45d2b53e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21447,
        "upload_time": "2022-05-13T14:55:15",
        "upload_time_iso_8601": "2022-05-13T14:55:15.852884Z",
        "url": "https://files.pythonhosted.org/packages/40/05/75f11937424f2a862e3730babfbd1fd959664062868038052a10db974473/sharing-configs-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b1c5e7257bcdb577e4c6bc1a5f808a60acfab4c692c4a1e882f7c98d6cff1ca",
          "md5": "79a78fa2dfd8cf5332256e5008f46e1a",
          "sha256": "2d2f216e9e5bff19cb8f1b5c0f4c0e91a85d14dd63c37da666b8dad873cc4327"
        },
        "downloads": -1,
        "filename": "sharing_configs-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79a78fa2dfd8cf5332256e5008f46e1a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24481,
        "upload_time": "2022-05-25T08:32:52",
        "upload_time_iso_8601": "2022-05-25T08:32:52.478634Z",
        "url": "https://files.pythonhosted.org/packages/2b/1c/5e7257bcdb577e4c6bc1a5f808a60acfab4c692c4a1e882f7c98d6cff1ca/sharing_configs-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70539a1f1d2a161635c1e3d3d62e1f713f84b8aa0ac5c690c4f4a19b9bf5b2c4",
          "md5": "dd2255e14a03433850dc338cf2f6c90d",
          "sha256": "422f7d8feb730a389dd63605b3bd08d422cc617b38661df81c07b3060038cbd7"
        },
        "downloads": -1,
        "filename": "sharing-configs-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dd2255e14a03433850dc338cf2f6c90d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 23231,
        "upload_time": "2022-05-25T08:32:53",
        "upload_time_iso_8601": "2022-05-25T08:32:53.778060Z",
        "url": "https://files.pythonhosted.org/packages/70/53/9a1f1d2a161635c1e3d3d62e1f713f84b8aa0ac5c690c4f4a19b9bf5b2c4/sharing-configs-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b829c970a5eaad2f5b6f87f275bb238320d40b2e06e6b669d6ab07820ccb8bb7",
          "md5": "d421eea449aed97297ef82ee406282b8",
          "sha256": "24a1cfad98bd015c428fe438f7ee3dc33c53e092e07b9e448fe491f550b57c2e"
        },
        "downloads": -1,
        "filename": "sharing_configs-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d421eea449aed97297ef82ee406282b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 28319,
        "upload_time": "2022-06-23T14:39:44",
        "upload_time_iso_8601": "2022-06-23T14:39:44.031468Z",
        "url": "https://files.pythonhosted.org/packages/b8/29/c970a5eaad2f5b6f87f275bb238320d40b2e06e6b669d6ab07820ccb8bb7/sharing_configs-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87ab6c103d03f435d927cab7f436632925b3da0402247f32d25c160ebad40d0f",
          "md5": "d8c7f20851fa403f89c06c889cf4984b",
          "sha256": "d71da6cfcf9f1905a84bd32a77222d6421049da644b047580bc340b4b1b4cde2"
        },
        "downloads": -1,
        "filename": "sharing-configs-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d8c7f20851fa403f89c06c889cf4984b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26617,
        "upload_time": "2022-06-23T14:39:45",
        "upload_time_iso_8601": "2022-06-23T14:39:45.438987Z",
        "url": "https://files.pythonhosted.org/packages/87/ab/6c103d03f435d927cab7f436632925b3da0402247f32d25c160ebad40d0f/sharing-configs-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b829c970a5eaad2f5b6f87f275bb238320d40b2e06e6b669d6ab07820ccb8bb7",
        "md5": "d421eea449aed97297ef82ee406282b8",
        "sha256": "24a1cfad98bd015c428fe438f7ee3dc33c53e092e07b9e448fe491f550b57c2e"
      },
      "downloads": -1,
      "filename": "sharing_configs-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d421eea449aed97297ef82ee406282b8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 28319,
      "upload_time": "2022-06-23T14:39:44",
      "upload_time_iso_8601": "2022-06-23T14:39:44.031468Z",
      "url": "https://files.pythonhosted.org/packages/b8/29/c970a5eaad2f5b6f87f275bb238320d40b2e06e6b669d6ab07820ccb8bb7/sharing_configs-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "87ab6c103d03f435d927cab7f436632925b3da0402247f32d25c160ebad40d0f",
        "md5": "d8c7f20851fa403f89c06c889cf4984b",
        "sha256": "d71da6cfcf9f1905a84bd32a77222d6421049da644b047580bc340b4b1b4cde2"
      },
      "downloads": -1,
      "filename": "sharing-configs-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d8c7f20851fa403f89c06c889cf4984b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 26617,
      "upload_time": "2022-06-23T14:39:45",
      "upload_time_iso_8601": "2022-06-23T14:39:45.438987Z",
      "url": "https://files.pythonhosted.org/packages/87/ab/6c103d03f435d927cab7f436632925b3da0402247f32d25c160ebad40d0f/sharing-configs-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}