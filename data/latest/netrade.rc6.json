{
  "info": {
    "author": "Rizki Maulana",
    "author_email": "rizkimaulana348@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Netrade\r\nNetrade is an AI trading assistant with human trader approach\r\n\r\n## Table of contents\r\n1. [How it works](#how-it-works)\r\n2. [Performance Result](#performance)\r\n3. [Installation](#installation)\r\n4. [Usage](#usage)\r\n    1. [Training](#training)\r\n4. [Inference Mode or Testing](#inference-mode--testing)\r\n    1. [Prepare Real-time Data](#real-time-data)\r\n    2. [Run in real world and real-time data](#final-preparation)\r\n\r\n## How it works <div id='how-it-works'/>\r\nThis AI model will predict the price will `go up` or `go down` based on chart pattern and candlestick pattern <br/>\r\n\r\nThe data is available [here](https://github.com/rizki4106/netrade/releases)\r\n\r\n### Chart Pattern\r\nChart pattern is enough for analyzing price will go up or go down as usualy traders do, here's some example:\r\n\r\n![chart-pattern](https://cdn.heelmet.com/files/chart-pattern.png)\r\n\r\n### Candle Stick\r\nBechause of chart pattern has a limitation we need candle stick pattern to decide when we should buy or sell, here is some example\r\n\r\n*first row is `bearish` candle stick pattern and the second row `bulish` candle stick*\r\n\r\n![chart-pattern](https://cdn.heelmet.com/files/candle_chart.png)\r\n\r\n### Performance\r\nWe've been tested this model in 1 week and here's the result:\r\n\r\n* model accuracy & loss\r\n\r\n![chart-pattern](https://cdn.heelmet.com/files/model_performance_v2.png)\r\n\r\n* profit\r\n\r\n![chart-pattern](https://cdn.heelmet.com/files/profit_model.png)\r\n\r\n* Win & loss rate ( 61% win 39% loss )\r\n\r\n![chart-pattern](https://cdn.heelmet.com/files/win_and_loss_rate.png)\r\n\r\n# Installation\r\n\r\n* github\r\n    ```bash\r\n    git clone https://github.com/rizki4106/netrade.git\r\n    ```\r\n    ```bash\r\n    cd netrade && pip3 install torch torchmetrics scikit-image Pillow torchvision\r\n    ```\r\n* pypi\r\n    ```bash\r\n    pip3 install netrade\r\n    ```\r\n\r\n# Usage\r\n\r\nThis step devided into 2 step\r\n\r\n## Training\r\n\r\ndownload pre-trained model here [https://github.com/rizki4106/netrade/releases/](https://github.com/rizki4106/netrade/releases/) but\r\nif you want to train with your own data, here's the step\r\n\r\n* Prepare The data <br/>\r\nYou should put your image in this pattern:\r\n\r\n    ```text\r\n    chart:\r\n    ----up:\r\n    ------image1.png\r\n    ------image2.png\r\n    ----down:\r\n    ------image1.png\r\n    ------image2.png\r\n    candle:\r\n    ------image1.png\r\n    ------image2.png\r\n    ----down:\r\n    ------image1.png\r\n    ------image2.png\r\n    ```\r\n* Make csv file that contain this field\r\n\r\n    | chart_name | candle_name | path | label |\r\n    |-|-|-| -|\r\n    | filename.png | filename.png | down | 0 |\r\n    | filename.png | filename.png | up | 1 |\r\n    | filename.png | filename.png | down | 0 |\r\n    | filename.png | filename.png | down | 0 |\r\n    | filename.png | filename.png | up | 1 |\r\n\r\n    you can do it by using data preprocessing helper easly\r\n\r\n    ```python\r\n    from netrade.data import DataPreprocessing\r\n\r\n    # initialize class\r\n    chart = \"/path/to/somwhere/chart/\"\r\n    candle = \"/path/to/somewhere/candle\"\r\n\r\n    prep = DataPreprocessing(chart_path=chart, candle_path=candle)\r\n\r\n    # create dataframe\r\n    frame = prep.create_frame()\r\n    frame.head()\r\n    ```\r\n* Create image transformer\r\n    ```python\r\n    from torchvision import transforms\r\n\r\n    # this is for chart pattern\r\n    chart_transformer = transforms.Compose([\r\n        transforms.Resize((224, 224)),\r\n        transforms.ToTensor()\r\n    ])\r\n\r\n    # this is for candlestick pattern\r\n    candle_transformer = transforms.Compose([\r\n        transforms.Resize((64, 64)),\r\n        transforms.ToTensor()\r\n    ])\r\n    ```\r\n* Load your data with data loader\r\n    ```python\r\n    from netrade.data import NetradeDataLoader\r\n\r\n    # supposed you have created csv file like i mention above\r\n    frame = pd.read_csv(\"file_training.csv\")\r\n\r\n    # load data and turn it into tensor\r\n    train_data = NetradeDataLoader(\r\n        chart_dir=\"/path/to/root/chart-pattern/\",\r\n        candle_dir=\"/path/to/root/candle-stick/\",\r\n        frame=frame,\r\n        chart_transform=chart_transformer,\r\n        candle_transform=candle_transformer\r\n    ) # this data loader will return [chart image, candle image and labels]\r\n    ```\r\n* Create bathes\r\n    ```python\r\n    from torch.utils.data import DataLoader\r\n\r\n    dataloader = DataLoader(\r\n        train_data,\r\n        batch_size=16,\r\n        shuffle=True\r\n    )\r\n    ```\r\n* Run training loop\r\n\r\n    ```python\r\n    from netrade.core import Netrade\r\n    import torch\r\n\r\n    # initialize the model\r\n    netrade = Netrade()\r\n\r\n    # run training\r\n    model, history = netrade.train(X_train=dataloader, epochs=10)\r\n\r\n    # model is pure pytorch nn module that has been trained with your own data you can check it model.parameters()\r\n    # history is the result from training loop\r\n\r\n    print(history)\r\n\r\n    # save the model's state\r\n    torch.save(model.state_dict(), \"name-it.pth\")\r\n    ```\r\n## Inference mode / Testing\r\n### Real-time Data\r\nIf you want to use this model in real time data, you should prepare the comodity price history i.e `bitcoin` or `tesla` stock price. in this example I'll be using `yfinance` to grab the historical data\r\n\r\n```python\r\nfrom netrade.data import data_creation\r\nimport yfinance as yf\r\nimport matplotlib.pyplot as plt\r\n\r\n#\r\nticker = yf.Ticker('BTC-USD')\r\ndata = ticker.history(period=\"7d\", interval=\"15m\")\r\n\r\n# create chart image from realtime history data\r\n# take the last 50 candle stick bar\r\nchart_image = data_creation.create_image(data=data[-50:, :])\r\n\r\n# take the last 3 candle stick bar\r\ncandle_image = data_creation.create_image(data=data[-3:, :])\r\n\r\n# create_image returns PIL image class that you can use directly with pytorch\r\n\r\n# you can show it by the way\r\nplt.imshow(chart_image)\r\nplt.imshow(candle_image)\r\n```\r\n\r\n### Final Preparation\r\nIt's time to predict real - time price, let's put everything together\r\n\r\n```python\r\nfrom netrade.data import data_creation\r\nfrom netrade.core import Netrade\r\nfrom torchvision import transforms\r\nfrom PIL import Image\r\nimport yfinance as yf\r\n\r\n# initialize the model\r\nnetrade = Netrade(saved_state_path=\"path-to-saved-state.pth\")\r\n\r\n# create image transformer\r\n# this is for chart pattern\r\nchart_transformer = transforms.Compose([\r\n    transforms.Resize((224, 224)),\r\n    transforms.ToTensor()\r\n])\r\n\r\n# this is for candlestick pattern\r\ncandle_transformer = transforms.Compose([\r\n    transforms.Resize((64, 64)),\r\n    transforms.ToTensor()\r\n])\r\n\r\n# load realtime data\r\nticker = yf.Ticker('BTC-USD')\r\ndata = ticker.history(period=\"7d\", interval=\"15m\")\r\n\r\n# create chart image from real-time data\r\nchart_image = data_creation.create_image(data=data[-50:, :])\r\ncandle_image = data_creation.create_image(data=data[-3:, :])\r\n\r\n# turn image into tensor\r\nchart_image = chart_transformer(chart_image)\r\ncandle_image = candle_transformer(candle_image)\r\n\r\n# run prediction\r\npreds = netrade.predict(chart_image=chart_image, candle_image=candle_image)\r\n\r\n# print the result\r\nprint(preds.argmax(1)) # 0 price will go down, 1 price will go up\r\n```\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rizki4106/netrade",
    "keywords": "",
    "license": "LICENCE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "netrade",
    "package_url": "https://pypi.org/project/netrade/",
    "platform": null,
    "project_url": "https://pypi.org/project/netrade/",
    "project_urls": {
      "Homepage": "https://github.com/rizki4106/netrade"
    },
    "release_url": "https://pypi.org/project/netrade/1.2.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "AI trading assistant",
    "version": "1.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15757506,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c914108967dfc7844c4adee60c2c4375dcd51427f5ca073bc5c36ad6c4ba1c4",
          "md5": "a1bfe69747f290ae8b04d97909770c6e",
          "sha256": "8a3407963491b2f6c489df3e28458f4f746d71dadd9a2f095130a08983e08957"
        },
        "downloads": -1,
        "filename": "netrade-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a1bfe69747f290ae8b04d97909770c6e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8379,
        "upload_time": "2022-10-26T04:02:22",
        "upload_time_iso_8601": "2022-10-26T04:02:22.583862Z",
        "url": "https://files.pythonhosted.org/packages/8c/91/4108967dfc7844c4adee60c2c4375dcd51427f5ca073bc5c36ad6c4ba1c4/netrade-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcaf85804bf3befc040292a5d2e40e7c3d9023bfb0fb98a6d075ab2794e5996a",
          "md5": "2bd83c052728749a846db984509f4284",
          "sha256": "0f6d54cb38a81c35eec2820d50193bc872dee534ba72534f6631836bfb8c6f9a"
        },
        "downloads": -1,
        "filename": "netrade-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2bd83c052728749a846db984509f4284",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8558,
        "upload_time": "2022-11-05T04:26:15",
        "upload_time_iso_8601": "2022-11-05T04:26:15.353442Z",
        "url": "https://files.pythonhosted.org/packages/bc/af/85804bf3befc040292a5d2e40e7c3d9023bfb0fb98a6d075ab2794e5996a/netrade-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55d006ca1db06a0dbba3149b63ff0595c120ea97b86af8d6dbdb97d768e59f3e",
          "md5": "fac2256a916d0cb246d54b2ac0f3ddf8",
          "sha256": "0f408ee2ccbea9911484815f9304c414083712dd58aacf2e5f7351e97a630e1a"
        },
        "downloads": -1,
        "filename": "netrade-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fac2256a916d0cb246d54b2ac0f3ddf8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8918,
        "upload_time": "2022-11-06T03:27:17",
        "upload_time_iso_8601": "2022-11-06T03:27:17.581567Z",
        "url": "https://files.pythonhosted.org/packages/55/d0/06ca1db06a0dbba3149b63ff0595c120ea97b86af8d6dbdb97d768e59f3e/netrade-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d22528fd427b753ac367114633a588fc2f4dd0c8c4a557030ad670642c074e5",
          "md5": "5d1bc5cb46045f526ad78343fce138a4",
          "sha256": "5f8605916acf304549945b28643a85cbe9346268215debe8dfab5f808ee856ad"
        },
        "downloads": -1,
        "filename": "netrade-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5d1bc5cb46045f526ad78343fce138a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8963,
        "upload_time": "2022-11-06T03:41:04",
        "upload_time_iso_8601": "2022-11-06T03:41:04.150810Z",
        "url": "https://files.pythonhosted.org/packages/8d/22/528fd427b753ac367114633a588fc2f4dd0c8c4a557030ad670642c074e5/netrade-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "071fab712e8831545716fb2d45abad9246e2e9108c4ab638af3a84f51a882d18",
          "md5": "742e5bd02d8eda312084f2d18e1fb51f",
          "sha256": "1cb6eada508d27c6ea35814c57012232002ada6c75410f17179cf1f9c94fec84"
        },
        "downloads": -1,
        "filename": "netrade-1.2.2-py3.10.egg",
        "has_sig": false,
        "md5_digest": "742e5bd02d8eda312084f2d18e1fb51f",
        "packagetype": "bdist_egg",
        "python_version": "1.2.2",
        "requires_python": null,
        "size": 13629,
        "upload_time": "2022-11-14T08:29:10",
        "upload_time_iso_8601": "2022-11-14T08:29:10.690462Z",
        "url": "https://files.pythonhosted.org/packages/07/1f/ab712e8831545716fb2d45abad9246e2e9108c4ab638af3a84f51a882d18/netrade-1.2.2-py3.10.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5473b2441ee54ae2d717ee3644b31f7430a6130d4d6062e004dd20e1d3e5b4b",
          "md5": "d16aba642282d0d0fe2eb72d491590fb",
          "sha256": "1e1b9f0f9c3d38a4ee7f5877f86e43b2c27f148030bf2ca3520ef29cc78beb0c"
        },
        "downloads": -1,
        "filename": "netrade-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d16aba642282d0d0fe2eb72d491590fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12047,
        "upload_time": "2022-11-14T08:29:13",
        "upload_time_iso_8601": "2022-11-14T08:29:13.118954Z",
        "url": "https://files.pythonhosted.org/packages/e5/47/3b2441ee54ae2d717ee3644b31f7430a6130d4d6062e004dd20e1d3e5b4b/netrade-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99a32403e1fa915cccf0f955a82f9d7b6ae86680b5f3d45921568de3701d1641",
          "md5": "e421e1afb85f2892cfb60878a5547b30",
          "sha256": "47ddf7f6929798a7baf44cb2377b6a9a63a251a1a5c88ee807e876b85a260cb2"
        },
        "downloads": -1,
        "filename": "netrade-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e421e1afb85f2892cfb60878a5547b30",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12043,
        "upload_time": "2022-11-14T08:36:17",
        "upload_time_iso_8601": "2022-11-14T08:36:17.033557Z",
        "url": "https://files.pythonhosted.org/packages/99/a3/2403e1fa915cccf0f955a82f9d7b6ae86680b5f3d45921568de3701d1641/netrade-1.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "99a32403e1fa915cccf0f955a82f9d7b6ae86680b5f3d45921568de3701d1641",
        "md5": "e421e1afb85f2892cfb60878a5547b30",
        "sha256": "47ddf7f6929798a7baf44cb2377b6a9a63a251a1a5c88ee807e876b85a260cb2"
      },
      "downloads": -1,
      "filename": "netrade-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "e421e1afb85f2892cfb60878a5547b30",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12043,
      "upload_time": "2022-11-14T08:36:17",
      "upload_time_iso_8601": "2022-11-14T08:36:17.033557Z",
      "url": "https://files.pythonhosted.org/packages/99/a3/2403e1fa915cccf0f955a82f9d7b6ae86680b5f3d45921568de3701d1641/netrade-1.2.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}