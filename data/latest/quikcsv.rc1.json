{
  "info": {
    "author": "Bryn Mck",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# QuikCSV\nPython package for quickly creating temporary csv files to help with testing. The CSV file exists in memory only so you can create files on the fly without needing to cleanup or delete files later. No need to use with statements or close resources, that is taken care of.\n\n## Installation\n\nNot ready just yet.\n\n## Sample\n\nTake a function that takes an open CSV file as its argument. Instead of creating and opening an actual CSV file on the disk, decorate the function.\n\n```python\nfrom quikcsv import QuikCSV\n\n\n@QuikCSV([dict(\n    data=[\n        ['Column A', 'Column B', 'Column C'],\n        ['100',      '101',      '102']\n    ]\n)])\ndef csv_func(csv_file):\n    # Work with csv file here.\n    #\n    # QuikCSV.one will map the data above to mimic a csv file with the \n    # respective columns and rows, passing the file to the csv_file argument\n    # (or by default, the first argument if there are multiple.)\n\n```\n\nIf you want, you can specify the argument that the CSV mock file will be passed to.\n```python\n\n@QuikCSV([dict(\n    data=[\n        ['Column A', 'Column B', 'Column C'],\n        ['100',      '101',      '102']\n    ],\n    arg='csv_file'\n)])\ndef csv_func(first_arg, csv_file, third_arg):\n    # Mock CSV will be accessible on the csv_file variable.\n\n```\n\nOptions can be passed via the opts argument to quickly generate additional rows of data from existing rows.\n```python\n\n@QuikCSV([dict(\n    data=[\n        ['Column A', 'Column B', 'Column C'],\n        ['100',      '101',      '102']\n    ], \n    opts=dict(\n        add_rows=2,\n        row_pattern='copy',\n        base_row_index=1\n    )\n)])\ndef csv_func(csv_file):\n    # Output csv file will look like this:\n    # \n    # Column A, Column B, Column C\n    # 100,      101,      102\n    # 100,      101,      102\n    # 100,      101,      102\n    # \n    # 2 rows of data are added, copied from index 1 of the passed data.\n\n```\n'copy' is a predefined row creation pattern to make things easy, but you can also pass a custom function\n```python\n\n@QuikCSV([dict(\n    data=[\n        ['Column A', 'Column B', 'Column C'],\n        ['100',      '101',      '102']\n    ], \n    opts=dict(\n        add_rows=2,\n        row_pattern=lambda x: [n + 1 for n in x],\n        base_row_index=1\n    )\n)])\ndef csv_func(csv_file):\n    # Output csv file will look like this:\n    # \n    # Column A, Column B, Column C\n    # 100,      101,      102\n    # 101,      102,      103\n    # 101,      102,      103\n    # \n    # The passed function should apply against the row of data, not the \n    # individual element.\n\n```\nThe above example applies the same function to the same row again and again, but by setting the 'incremental' option to True, the function will apply the newly created row of data on the next iteration. \n```python\n\n@QuikCSV([dict(\n    data=[\n        ['Column A', 'Column B', 'Column C'],\n        ['100',      '101',      '102']\n    ], \n    opts=dict(\n        add_rows=2,\n        row_pattern=lambda x: [n + 1 for n in x],\n        base_row_index=1,\n        increment=True\n    )\n)])\ndef csv_func(csv_file):\n    # Output csv file will look like this:\n    # \n    # Column A, Column B, Column C\n    # 100,      101,      102\n    # 101,      102,      103\n    # 102,      103,      104\n    # \n\n```\n\n#### Features in the works\n* Random data generation - completely random or pseudo-random via user defined options\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/PRIV00/quikcsv",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quikcsv",
    "package_url": "https://pypi.org/project/quikcsv/",
    "platform": "",
    "project_url": "https://pypi.org/project/quikcsv/",
    "project_urls": {
      "Homepage": "https://github.com/PRIV00/quikcsv"
    },
    "release_url": "https://pypi.org/project/quikcsv/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Decorator for making quick mock csv files for testing.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8127258,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27025892aba19c48c36860c5aac382b2e5636bde206a438bbc4803dced418a91",
          "md5": "a2c2a5566da097dd8090c5ec3660666e",
          "sha256": "1b32cbc23c59df620622345fb4254a9a208db21012c2f6326ee6cc4a47401486"
        },
        "downloads": -1,
        "filename": "quikcsv-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a2c2a5566da097dd8090c5ec3660666e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8961,
        "upload_time": "2020-09-07T02:58:56",
        "upload_time_iso_8601": "2020-09-07T02:58:56.681416Z",
        "url": "https://files.pythonhosted.org/packages/27/02/5892aba19c48c36860c5aac382b2e5636bde206a438bbc4803dced418a91/quikcsv-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9ffe23d626175a346565f0505ccd4e37f72ca361a030cc576605b3c17ac68ff",
          "md5": "d0dc1bd2b4e174bcf3e3bce13c6f41cd",
          "sha256": "619015c08042bf83625369c4c89c056cf5ad05c315c618cc9b256819985887d8"
        },
        "downloads": -1,
        "filename": "quikcsv-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d0dc1bd2b4e174bcf3e3bce13c6f41cd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6738,
        "upload_time": "2020-09-07T02:58:58",
        "upload_time_iso_8601": "2020-09-07T02:58:58.654785Z",
        "url": "https://files.pythonhosted.org/packages/b9/ff/e23d626175a346565f0505ccd4e37f72ca361a030cc576605b3c17ac68ff/quikcsv-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "27025892aba19c48c36860c5aac382b2e5636bde206a438bbc4803dced418a91",
        "md5": "a2c2a5566da097dd8090c5ec3660666e",
        "sha256": "1b32cbc23c59df620622345fb4254a9a208db21012c2f6326ee6cc4a47401486"
      },
      "downloads": -1,
      "filename": "quikcsv-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a2c2a5566da097dd8090c5ec3660666e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8961,
      "upload_time": "2020-09-07T02:58:56",
      "upload_time_iso_8601": "2020-09-07T02:58:56.681416Z",
      "url": "https://files.pythonhosted.org/packages/27/02/5892aba19c48c36860c5aac382b2e5636bde206a438bbc4803dced418a91/quikcsv-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9ffe23d626175a346565f0505ccd4e37f72ca361a030cc576605b3c17ac68ff",
        "md5": "d0dc1bd2b4e174bcf3e3bce13c6f41cd",
        "sha256": "619015c08042bf83625369c4c89c056cf5ad05c315c618cc9b256819985887d8"
      },
      "downloads": -1,
      "filename": "quikcsv-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d0dc1bd2b4e174bcf3e3bce13c6f41cd",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6738,
      "upload_time": "2020-09-07T02:58:58",
      "upload_time_iso_8601": "2020-09-07T02:58:58.654785Z",
      "url": "https://files.pythonhosted.org/packages/b9/ff/e23d626175a346565f0505ccd4e37f72ca361a030cc576605b3c17ac68ff/quikcsv-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}