{
  "info": {
    "author": "",
    "author_email": "Sanjay S <sanjusuresh2001@gmail.com>, Prathish K V <prathishvijayakumar@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyDigital\n\n[![PyPI version](https://img.shields.io/pypi/v/pydigital?color=44cc11&style=for-the-badge)](https://badge.fury.io/py/pydigital)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pydigital?style=for-the-badge)](https://python.org)\n[![PyPI - Status](https://img.shields.io/pypi/status/django?style=for-the-badge)](https://pypi.org/project/pydigital/)\n![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg?style=for-the-badge)\n\nThis python package __PyDigital__ provides visual representations of digital data line coding 📈 as well as generation of parity bits 🔢 and error detection for binary data.\n\nThe package can be used to prototype and visualize digital data transmission using the various line coding plots and the parity encoding and decoding functionalities.\n\nIf you like the package, feel free to 🌟 the repo and contribute to it! Also find us on Twitter [@PyDigital](https://twitter.com/).\n\n## Installation\n\nInstall using `pip` with the command\n\n```sh\n$ pip install pydigital\n```\n\n## Usage\n### Line Coding\n\n```python\nfrom pydigital import LineCoding\n\nlc = LineCoding()\n\n# Plots differential manchester line coding for the binary string\nlc.diffmanchester('10010110')\n```\n\n> ❗ All line coding methods accept parameters in the form of strings, and arrays/tuples of integers/strings.\n\nDifferent line coding techniques are available, all of which are listed below. \n\n| Method | Return Type |\n| :---   | :---        |\n|`unipolar_nrz (binary_string_literal)` | Plots input binary data in Unipolar NRZ |\n|`unipolar_rz (binary_string_literal)` | Plots input binary data in Unipolar RZ |\n|`polar_nrz (binary_string_literal)` | Plots input binary data in Polar NRZ |\n|`polar_nrzl (binary_string_literal)` | Plots input binary data in Polar NRZL |\n|`polar_nrzi (binary_string_literal)` | Plots input binary data in Polar NRZI |\n|`polar_rz (binary_string_literal)` | Plots input binary data in Polar RZ |\n|`bipolar_nrz (binary_string_literal)` | Plots input binary data in Bipolar NRZ |\n|`bipolar_rz (binary_string_literal)` | Plots input binary data in Bipolar RZ |\n|`pseudoternary (binary_string_literal)` | Plots input binary data in Pseudoternary |\n|`manchester_ieee (binary_string_literal)` | Plots input binary data in IEEE Manchester |\n|`manchester_gethomas (binary_string_literal)` | Plots input binary data in G.E.Thomas Manchester |\n|`diffmanchester (binary_string_literal)` | Plots input binary data in Differential Manchester |\n\n\n### Parity Encoding and Decoding\n\n```python\nfrom pydigital import ParityEncDec\n\npr = ParityEncDec()\n\nvrc = pr.encode_vrc(['10110', '10100'])\nprint(\"VRC :\", vrc[0])\nprint(\"DATA TRANSMITTED :\", vrc[1])\n# VRC : 10\n# DATA TRANSMITTED : 101101 101000\n        \nvrc = pr.decode_vrc('101101 101000', 5, 2, 2)\nprint(vrc)\n# THE DATA TRANSMITTED IS CORRECT\n```\n> ❗ Binary data are passed as string literals. Spaces are optional.\n\nEncoding and decoding methods for four different types of parity techniques are given below.\n\n|Method | Return Type|\n| :---  | :---|\n|`encode_lrc ([binary_string_literals])`| Array [LRC Bits, LRC Encoded Data]|\n|`encode_vrc ([binary_string_literals])`| Array [VRC Bits, VRC Encoded Data]|\n|`encode_crc (binary_string_literal, crc_key_string_literal)`| Array [CRC Bits, CRC Encoded Data]|\n|`encode_checksum ([binary_string_literals])`| Array [Checksum Bits, Checksum Encoded Data]|\n|`decode_lrc (binary_string_literal, bits_per_data_string, number_of_data_strings, return_type)`| Boolean, Decoded Data, or Text |\n|`decode_vrc (binary_string_literal, bits_per_data_string, number_of_data_strings, return_type)`| Boolean, Decoded Data, or Text |\n|`decode_crc (binary_string_literal, crc_key_string_literal, return_type)`| Boolean, Decoded Data, or Text |\n|`decode_checksum (binary_string_literal, bits_per_data_string, number_of_data_strings, return_type)`| Boolean, Decoded Data, or Text |\n\n## Development\n\nTo contribute to the package, first clone the repository and `cd` into it.\n```sh\n$ git clone https://github.com/RapidCompiler/pydigital.git\n$ cd pydigital\n```\n\nMake changes inside the `pydigital` folder located in the `src` directory. You can then test this functionality either by creating a test file and importing the methods into it or by installing the package on your computer.\n\nCreate a virtual environment and activate it before you install the package locally.\n\n```sh\n$ python -m virtualenv env\n$ env\\Scripts\\activate\n$ pip install .\n```\nRun the `pip install .` command in the main project directory.\n\nThis project does not have a `setup.py` file and hence cannot be installed in the editable mode.\n## Issues\n\nYou can report bugs and suggest improvements on this repository's [issue tracker](https://github.com/rapidcompiler/pydigital/issues)\n\n## License\nDesigned and published with ♥ by Prathish K V ([@prathishkv](https://github.com/prathishkv)) and Sanjay S ([@rapidcompiler](https://github.com/rapidcompiler)) under MIT License[]()\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyDigital",
    "package_url": "https://pypi.org/project/PyDigital/",
    "platform": null,
    "project_url": "https://pypi.org/project/PyDigital/",
    "project_urls": {
      "Bug Tracker": "https://github.com/RapidCompiler/pydigital/issues",
      "Documentation": "http://pydigital-docs.readthedocs.io/",
      "Repository": "https://github.com/RapidCompiler/pydigital"
    },
    "release_url": "https://pypi.org/project/PyDigital/1.1.1/",
    "requires_dist": [
      "matplotlib (>=3.6.0)",
      "numpy (>=1.23.3)"
    ],
    "requires_python": ">=3.7",
    "summary": "A python package intended for visualizing digital data line coding, generating parity bits and detecting errors in parity encoded binary data",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15303486,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9ae2a64b2e349dfa114f588e8badcc12019600b99d43754f0ecb1a5173ac0891",
          "md5": "eb3020dea4f131cd624879c342578573",
          "sha256": "823955839d9f96d7893255d4e2ba7e2f03326f756114c75afcc9e055a7f267b1"
        },
        "downloads": -1,
        "filename": "PyDigital-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb3020dea4f131cd624879c342578573",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7844,
        "upload_time": "2022-10-04T13:55:20",
        "upload_time_iso_8601": "2022-10-04T13:55:20.454511Z",
        "url": "https://files.pythonhosted.org/packages/9a/e2/a64b2e349dfa114f588e8badcc12019600b99d43754f0ecb1a5173ac0891/PyDigital-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2adb297eab5d86ebf0b714ec64aa4a7aeae6eda394b557d7c7b57d762add792f",
          "md5": "b4622fe06c334d6f3993cb5198808f62",
          "sha256": "3faae5e377e9a3d0a0516d6d46a81e1f80d9171e15a26ee2785cfdef4b235977"
        },
        "downloads": -1,
        "filename": "PyDigital-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b4622fe06c334d6f3993cb5198808f62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7043,
        "upload_time": "2022-10-04T13:55:21",
        "upload_time_iso_8601": "2022-10-04T13:55:21.997705Z",
        "url": "https://files.pythonhosted.org/packages/2a/db/297eab5d86ebf0b714ec64aa4a7aeae6eda394b557d7c7b57d762add792f/PyDigital-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83e2ea687a30463c45879bb5e1305cefd83df540b348423799a529cd44456f30",
          "md5": "cec76ac93b24f3b2f40cc3e1665093ad",
          "sha256": "dabf32e5668f943406899934c81938aea8cb47ec4ae6b99bd54be39bf38a9693"
        },
        "downloads": -1,
        "filename": "PyDigital-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cec76ac93b24f3b2f40cc3e1665093ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 7878,
        "upload_time": "2022-10-04T14:18:35",
        "upload_time_iso_8601": "2022-10-04T14:18:35.339936Z",
        "url": "https://files.pythonhosted.org/packages/83/e2/ea687a30463c45879bb5e1305cefd83df540b348423799a529cd44456f30/PyDigital-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb37d05c586ad2a6e9d6a884cb0aede13a977031f870e0d5140a9a898d8ab809",
          "md5": "c7e148b5a96c4cabb340c4806a44b1ea",
          "sha256": "27c2e8526eaf578c5876200f6338c4687967070de7ac6c9ae78efa9cccb7d6e7"
        },
        "downloads": -1,
        "filename": "PyDigital-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c7e148b5a96c4cabb340c4806a44b1ea",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 7092,
        "upload_time": "2022-10-04T14:18:37",
        "upload_time_iso_8601": "2022-10-04T14:18:37.086462Z",
        "url": "https://files.pythonhosted.org/packages/fb/37/d05c586ad2a6e9d6a884cb0aede13a977031f870e0d5140a9a898d8ab809/PyDigital-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83e2ea687a30463c45879bb5e1305cefd83df540b348423799a529cd44456f30",
        "md5": "cec76ac93b24f3b2f40cc3e1665093ad",
        "sha256": "dabf32e5668f943406899934c81938aea8cb47ec4ae6b99bd54be39bf38a9693"
      },
      "downloads": -1,
      "filename": "PyDigital-1.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cec76ac93b24f3b2f40cc3e1665093ad",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 7878,
      "upload_time": "2022-10-04T14:18:35",
      "upload_time_iso_8601": "2022-10-04T14:18:35.339936Z",
      "url": "https://files.pythonhosted.org/packages/83/e2/ea687a30463c45879bb5e1305cefd83df540b348423799a529cd44456f30/PyDigital-1.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fb37d05c586ad2a6e9d6a884cb0aede13a977031f870e0d5140a9a898d8ab809",
        "md5": "c7e148b5a96c4cabb340c4806a44b1ea",
        "sha256": "27c2e8526eaf578c5876200f6338c4687967070de7ac6c9ae78efa9cccb7d6e7"
      },
      "downloads": -1,
      "filename": "PyDigital-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c7e148b5a96c4cabb340c4806a44b1ea",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 7092,
      "upload_time": "2022-10-04T14:18:37",
      "upload_time_iso_8601": "2022-10-04T14:18:37.086462Z",
      "url": "https://files.pythonhosted.org/packages/fb/37/d05c586ad2a6e9d6a884cb0aede13a977031f870e0d5140a9a898d8ab809/PyDigital-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}