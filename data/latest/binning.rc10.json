{
  "info": {
    "author": "xkandj",
    "author_email": "lliu606@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# binning and calculate woe，iv value\n\n## binning: better for ai engineer to get bin result. Now it supports distance, frequency, enumerate, chi-square, custom bin. it support parallel compute when numbers of features are greater than one hundred or the number of samples are greater than one million, it has better performance.\n\n### | when the distribution type of feature is \"CONTINUOUS\", we can use distance, frequency, chi-square and custom bin. others, we can use enumerate, chi-square and custom bin\n\n### | we can calculate woe and iv value by the bin result\n\n---\n\n# 特征分箱及 WOE&IV 计算\n\n## 特征分箱，目前支持等距、等频、枚举、卡方、自定义分箱\n\n- 分箱方式\n  - 连续特征\n    - 等距，等频，卡方，自定义\n  - 离散特征\n    - 枚举，卡方，自定义\n- 合并分箱\n  - 根据不同的特征类型进行不同合并分箱，同时支持不进行合并分箱\n  - 合并原则\n    - 连续特征合并分箱根据最小样本量\n    - 离散特征合并分箱根据最小样本量，正负样本比率\n  - 等频和枚举分箱方式不进行合并分箱\n\n---\n\n## Quick Start\n\nInstallation\n\n```python\npip install binning\n```\n\n---\n\n### Example: bins dict\n\n```python\nimport pandas as pd\nfrom binning import __version__\nfrom binning.binprocessing import BinProcessing\n\n# version, 获取版本\nprint(__version__)\n\n# custom log function, 自定义日志函数\ndef log_fun(mess):\n    print(f\"打印日志信息：{mess}\")\n\n# parallel, 是否并行\nparallel = False\n\n# distribution: 1 is continuous, 0 is discrete\n# distance bin, 等距分箱\ndata = {\"feature\": [1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1],\n\"label\": [1, 1, 0, 0, 1, 1, 1, 0, 0, 0]}\ndf = pd.DataFrame(data)\nfeatures = {\"feature\": 1}\nkw_params = {\"label\": \"label\", \"bins\": 3}\n\nbp = BinProcessing(\"DISTANCE_BIN\", features, df, parallel, log_fun, **kw_params)\nbins_dict = bp.get_bins_dict()\nprint(bins_dict)\n\n# frequency bin, 等频分箱\ndata = {\"feature\": [1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1],\n\"label\": [1, 1, 0, 0, 1, 1, 1, 0, 0, 0]}\ndf = pd.DataFrame(data)\nfeatures = {\"feature\": 1}\nkw_params = {\"label\": \"label\", \"q\": 3, \"min_samples\": 10}\n\nbp = BinProcessing(\"FREQUENCY_BIN\", features, df, parallel, log_fun, **kw_params)\nbins_dict = bp.get_bins_dict()\nprint(bins_dict)\n\n# enumerate bin, 枚举分箱\ndata = {\"feature\": [\"A\", \"B\", \"A\", \"B\", \"C\", \"A\", \"C\", \"B\", \"A\", \"C\"],\n\"label\": [1, 1, 0, 0, 1, 1, 1, 0, 0, 0]}\ndf = pd.DataFrame(data)\nfeatures = {\"feature\": 0}\nkw_params = {\"label\": \"label\"}\n\nbp = BinProcessing(\"ENUMERATE_BIN\", features, df, parallel, log_fun, **kw_params)\nbins_dict = bp.get_bins_dict()\nprint(bins_dict)\n\n# chi-square bin, 卡方分箱\ndata = {\"feature\": [\"A\", \"B\", \"A\", \"B\", \"C\", \"A\", \"C\", \"B\", \"A\", \"C\"],\n\"feature2\": [1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1],\n\"label\": [1, 1, 0, 0, 1, 1, 1, 0, 0, 0]}\ndf = pd.DataFrame(data)\nfeatures = {\"feature\": 0, \"feature2\": 1}\nkw_params = {\"label\": \"label\"}\n# 连续特征参数\nkw_params[\"con_bins\"] = 3\nkw_params[\"con_min_samples\"] = 5\nkw_params[\"con_threshold\"] = 3.8\n# 离散特征参数\nkw_params[\"cat_bins\"] = 2\nkw_params[\"cat_min_samples\"] = 5\nkw_params[\"cat_threshold\"] = 3.7\n\nbp = BinProcessing(\"CHIMERGE_BIN\", features, df, parallel, log_fun, **kw_params)\nbins_dict = bp.get_bins_dict()\nprint(bins_dict)\n\n# custome bin, 自定义分箱\ndata = {\"feature\": [\"A\", \"B\", \"A\", \"B\", \"C\", \"A\", \"C\", \"B\", \"A\", \"C\"],\n\"feature2\": [1.1, 2.1, 3.1, 4.1, 5.1, 6.1, 7.1, 8.1, 9.1, 10.1],\n\"label\": [1, 1, 0, 0, 1, 1, 1, 0, 0, 0]}\ndf = pd.DataFrame(data)\nfeatures = {\"feature\": 0, \"feature2\": 1}\nkw_params = {\"label\": \"label\"}\n# 连续特征参数\nkw_params[\"con_param\"] = \"2.1,4.1\"\nkw_params[\"con_min_samples\"] = 5\n# 离散特征参数\nkw_params[\"cat_param\"] = [\"A\", \"C\"]\nkw_params[\"cat_min_samples\"] = 3\nbp = BinProcessing(\"CUSTOM_BIN\", features, df, parallel, log_fun, **kw_params)\nbins_dict = bp.get_bins_dict()\nprint(bins_dict)\n```\n\n---\n\n### Example: feature dict and woe, iv value\n\n```python\nimport pandas as pd\nfrom binning.binprocessing import BinProcessing\nfrom binning.calprocessing import CalProcessing\n\ndef get_features_dict(df: pd.DataFrame,\n                      features: Dict[str, int]) -> Dict[str, Any]:\n    \"\"\"get features dict\n\n      Args:\n          df (pd.DataFrame): 数据源\n          features (Dict[str,int]): 特征集\n\n      Returns:\n          Dict[str,Any]: 特征字典\n    \"\"\"\n    ret_features_dict = {}\n\n    con_features = {k: v for k, v in features.items() if v == 1}\n    cat_features = {k: v for k, v in features.items() if v == 0}\n    if self.con_cut == BinType.DISTINCE_BIN.value and con_features:\n        kw_params = {\"label\": self.label_b, \"bins\": self.con_group,\n                      \"min_samples\": self.con_cut_param[\"minSampleNum\"]}\n        bp = BinProcessing(\"DISTANCE_BIN\", con_features, df, parallel, self._log, **kw_params)\n        ret_dict = bp.get_features_dict()\n        ret_features_dict.update(ret_dict)\n\n    if self.con_cut == BinType.FREQUENCY_BIN.value and con_features:\n        kw_params = {\"label\": self.label_b, \"q\": self.con_group}\n        bp = BinProcessing(\"FREQUENCY_BIN\", con_features, df, parallel, self._log, **kw_params)\n        ret_dict = bp.get_features_dict()\n        ret_features_dict.update(ret_dict)\n\n    if self.cat_cut == BinType.DISCRE_ENUM_BIN.value and cat_features:\n        kw_params = {\"label\": self.label_b}\n        bp = BinProcessing(\"ENUMERATE_BIN\", cat_features, df, parallel, self._log, **kw_params)\n        ret_dict = bp.get_features_dict()\n        ret_features_dict.update(ret_dict)\n\n    if self.is_con_feature_chi2 or self.is_cat_feature_chi2:\n        chi_features = self.get_chi2_features_dict(features, con_features, cat_features)\n        kw_params = {\"label\": self.label_b}\n        if self.is_con_feature_chi2 and self.con_cut_param:\n            kw_params[\"con_bins\"] = self.con_cut_param[\"maxBinNum\"]\n            kw_params[\"con_min_samples\"] = self.con_cut_param[\"minSampleNum\"]\n            kw_params[\"con_threshold\"] = self.con_cut_param[\"threshold\"]\n        if self.is_cat_feature_chi2 and self.cat_cut_param:\n            kw_params[\"cat_bins\"] = self.cat_cut_param[\"maxBinNum\"]\n            kw_params[\"cat_min_samples\"] = self.cat_cut_param[\"minSampleNum\"]\n            kw_params[\"cat_threshold\"] = self.cat_cut_param[\"threshold\"]\n        bp = BinProcessing(\"CHIMERGE_BIN\", chi_features, df, parallel, self._log, **kw_params)\n        ret_dict = bp.get_features_dict()\n        ret_features_dict.update(ret_dict)\n\n    if self.single_cut == BinType.CUSTOM_BIN.value:\n      kw_params = {\"label\": self.label_b}\n      kw_params[\"con_param\"] = self.single_bin_param.get('userDefineParam')\n      kw_params[\"con_min_samples\"] = self.min_sample_num\n      kw_params[\"cat_param\"] = self.single_bin_param.get('discreteDefineParam')\n      kw_params[\"cat_min_samples\"] = self.min_sample_num\n      bp = BinProcessing(\"CUSTOM_BIN\", features, df, parallel, self._log, **kw_params)\n      ret_dict = bp.get_features_dict()\n      ret_features_dict.update(ret_dict)\n\ndef get_woe_iv(con_bin_type: str,\n              cat_bin_type: str,\n              features: Dict[str, int],\n              features_dict: Dict[str, Any],\n              bin_params: Dict[str, Any],\n              min_samples: Dict[str, int],\n              log: Callable) -> Tuple[Dict[str, Any], pd.Series]:\n    \"\"\"get woe, iv value\n\n    Args:\n        con_bin_type (str): 连续特征分箱类型\n        cat_bin_type (str): 离散特征分箱类型\n        features (Dict[str,int]): 特征字典\n        features_dict (Dict[str,Any]): 特征信息\n        bin_params (Dict[str,Any]): 分箱参数\n        min_samples (Dict[str,int]): 最小样本量\n        log (Callable): 日志函数\n\n    Returns:\n        Tuple[Dict[str,Any], pd.Series]: woe, iv\n    \"\"\"\n    kw_params = {\"con_bin_type\": con_bin_type,\n                \"cat_bin_type\": cat_bin_type,\n                \"features\": features,\n                \"features_dict\": features_dict,\n                \"bin_params\": bin_params}\n    if min_samples.get(\"con_min_samples\"):\n        kw_params[\"con_min_samples\"] = min_samples[\"con_min_samples\"]\n    if min_samples.get(\"cat_min_samples\"):\n        kw_params[\"cat_min_samples\"] = min_samples[\"cat_min_samples\"]\n\n    cp = CalProcessing(\"WOEIV\", log, **kw_params)\n    woe, iv = cp.get_cal_val()\n    return (woe, iv)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xkandj/binning",
    "keywords": "feature bin",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "binning",
    "package_url": "https://pypi.org/project/binning/",
    "platform": null,
    "project_url": "https://pypi.org/project/binning/",
    "project_urls": {
      "Homepage": "https://github.com/xkandj/binning"
    },
    "release_url": "https://pypi.org/project/binning/0.1.1/",
    "requires_dist": [
      "pandas (>=1.3)",
      "numpy (>=1.18)",
      "joblib (>=0.13)",
      "concurrent-log (>=1.0)"
    ],
    "requires_python": ">=3.7",
    "summary": "feature bin",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13890504,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8dac91d8e4d862cb4d6240b8b912bcc3aabad2cfc61e78ace0b33b2f7a8f4521",
          "md5": "1e3e1d2b2c3cd73ee6ca9897b0dd35c9",
          "sha256": "dcfeb3101cb3860a5494eee04132a9463e2ce1e851cd8bbbe81db935596bebb8"
        },
        "downloads": -1,
        "filename": "binning-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1e3e1d2b2c3cd73ee6ca9897b0dd35c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30537,
        "upload_time": "2022-05-01T03:40:24",
        "upload_time_iso_8601": "2022-05-01T03:40:24.406577Z",
        "url": "https://files.pythonhosted.org/packages/8d/ac/91d8e4d862cb4d6240b8b912bcc3aabad2cfc61e78ace0b33b2f7a8f4521/binning-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ef4925c7ce8cf234cfef8dcda8d205349d29f76c826dd2cc8b0ccec77edef03",
          "md5": "9adb9909152fe03c2ea687c5924a5de8",
          "sha256": "518b24ce56b20fc7e8177c78f97ed4d9a2620b9efee06a518e1cf4337359adb1"
        },
        "downloads": -1,
        "filename": "binning-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9adb9909152fe03c2ea687c5924a5de8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 30566,
        "upload_time": "2022-05-01T03:57:45",
        "upload_time_iso_8601": "2022-05-01T03:57:45.077275Z",
        "url": "https://files.pythonhosted.org/packages/8e/f4/925c7ce8cf234cfef8dcda8d205349d29f76c826dd2cc8b0ccec77edef03/binning-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1480c8c123e2153f9e44e787f6033cc9e49cea2461323f4375a55a4b98b9fb6b",
          "md5": "5f4b3849d5fcb07cf5b0c74bcdfd6db5",
          "sha256": "b81feb5985fbd6d7b71e9207266a40d561c5113f1834bf7ebf281ecb13d0f8f3"
        },
        "downloads": -1,
        "filename": "binning-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f4b3849d5fcb07cf5b0c74bcdfd6db5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30566,
        "upload_time": "2022-05-01T04:05:23",
        "upload_time_iso_8601": "2022-05-01T04:05:23.087999Z",
        "url": "https://files.pythonhosted.org/packages/14/80/c8c123e2153f9e44e787f6033cc9e49cea2461323f4375a55a4b98b9fb6b/binning-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ede2625158bf027e8c8fe9f8b99ca2f86031af888c29d18b5ac037b84acf385",
          "md5": "69fc95e33d6ef4dc4951bd0ee6c59a41",
          "sha256": "90914dfe188f71eec6d21a9bc473e30f27381c65fde625b2d0c3f7fabc01d40f"
        },
        "downloads": -1,
        "filename": "binning-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "69fc95e33d6ef4dc4951bd0ee6c59a41",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30571,
        "upload_time": "2022-05-01T04:12:33",
        "upload_time_iso_8601": "2022-05-01T04:12:33.638879Z",
        "url": "https://files.pythonhosted.org/packages/3e/de/2625158bf027e8c8fe9f8b99ca2f86031af888c29d18b5ac037b84acf385/binning-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0af11d715943090f7bcd4f6f9aaa7a09fb3d18c639d90cde438120cf68b33237",
          "md5": "0516981b59bd124f8a766a6375779e33",
          "sha256": "9582700add220a0284be3d7f7839dcb0c4e8af3c702cbc71cb703b2d39a0e46a"
        },
        "downloads": -1,
        "filename": "binning-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0516981b59bd124f8a766a6375779e33",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 33025,
        "upload_time": "2022-05-01T04:31:28",
        "upload_time_iso_8601": "2022-05-01T04:31:28.163273Z",
        "url": "https://files.pythonhosted.org/packages/0a/f1/1d715943090f7bcd4f6f9aaa7a09fb3d18c639d90cde438120cf68b33237/binning-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0aaaca694e7b8e5428c6ac28ed8148200d42b4b37533b3c25bb8aea9a62fb7c0",
          "md5": "daa1eec0661633b874442206545dc7c2",
          "sha256": "a5e7c56de28a7a7958952a4ae17c45d2f675299a1e872d65f65c00a48b91d5a1"
        },
        "downloads": -1,
        "filename": "binning-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "daa1eec0661633b874442206545dc7c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 33008,
        "upload_time": "2022-05-01T04:51:28",
        "upload_time_iso_8601": "2022-05-01T04:51:28.325841Z",
        "url": "https://files.pythonhosted.org/packages/0a/aa/ca694e7b8e5428c6ac28ed8148200d42b4b37533b3c25bb8aea9a62fb7c0/binning-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b967de6f225046e6ca09318e53fb2acd94517e917d58fef5e6610a6c82c5cdfd",
          "md5": "1b9af06cd79ba5c55085ce45ee977590",
          "sha256": "3d68b574a6be6555c4c6c5277e3c3326a0113e7c4f76e82363b95a3cba62045e"
        },
        "downloads": -1,
        "filename": "binning-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b9af06cd79ba5c55085ce45ee977590",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 33017,
        "upload_time": "2022-05-01T04:53:35",
        "upload_time_iso_8601": "2022-05-01T04:53:35.973011Z",
        "url": "https://files.pythonhosted.org/packages/b9/67/de6f225046e6ca09318e53fb2acd94517e917d58fef5e6610a6c82c5cdfd/binning-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d84ace0bd5628b97c72680ccb88fc424f42abdfb1b18bc99b07c532af6aa7d2f",
          "md5": "dbd206a872ad5d2658e011a8d89d04b9",
          "sha256": "1a994ba448f913d114bb894778bcc7d57ac81513d755fa87d555231a09d21b1d"
        },
        "downloads": -1,
        "filename": "binning-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dbd206a872ad5d2658e011a8d89d04b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 33034,
        "upload_time": "2022-05-01T04:55:02",
        "upload_time_iso_8601": "2022-05-01T04:55:02.288981Z",
        "url": "https://files.pythonhosted.org/packages/d8/4a/ce0bd5628b97c72680ccb88fc424f42abdfb1b18bc99b07c532af6aa7d2f/binning-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6d33c82fd5bca0f9a37cde849061526a492c6fb08023c1614136d9868bae54af",
          "md5": "6b9e8b2ee755b5f7417de0762da2c7fa",
          "sha256": "84294391358c9186ac43c93e5d0a4875c3ee168b86a21e80f1dc3a5d262809fa"
        },
        "downloads": -1,
        "filename": "binning-0.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6b9e8b2ee755b5f7417de0762da2c7fa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 34072,
        "upload_time": "2022-05-01T06:04:22",
        "upload_time_iso_8601": "2022-05-01T06:04:22.652885Z",
        "url": "https://files.pythonhosted.org/packages/6d/33/c82fd5bca0f9a37cde849061526a492c6fb08023c1614136d9868bae54af/binning-0.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26449ab29777f2b6692d66cfbfe1a3086b0ebeb2a424048453fbcb8040944e65",
          "md5": "9bd8d1ffc4219c8d9a1371cf60e5c868",
          "sha256": "1a405ce95d15369c27ec49bc2a6c8f0ed98d13b09636bf9578a9087711a77473"
        },
        "downloads": -1,
        "filename": "binning-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9bd8d1ffc4219c8d9a1371cf60e5c868",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 39437,
        "upload_time": "2022-05-22T05:40:46",
        "upload_time_iso_8601": "2022-05-22T05:40:46.442295Z",
        "url": "https://files.pythonhosted.org/packages/26/44/9ab29777f2b6692d66cfbfe1a3086b0ebeb2a424048453fbcb8040944e65/binning-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26449ab29777f2b6692d66cfbfe1a3086b0ebeb2a424048453fbcb8040944e65",
        "md5": "9bd8d1ffc4219c8d9a1371cf60e5c868",
        "sha256": "1a405ce95d15369c27ec49bc2a6c8f0ed98d13b09636bf9578a9087711a77473"
      },
      "downloads": -1,
      "filename": "binning-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9bd8d1ffc4219c8d9a1371cf60e5c868",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 39437,
      "upload_time": "2022-05-22T05:40:46",
      "upload_time_iso_8601": "2022-05-22T05:40:46.442295Z",
      "url": "https://files.pythonhosted.org/packages/26/44/9ab29777f2b6692d66cfbfe1a3086b0ebeb2a424048453fbcb8040944e65/binning-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}