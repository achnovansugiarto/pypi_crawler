{
  "info": {
    "author": "HEtothe",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# compynieshouse - a convenient wrapper for the UK Companies House REST API\n## Overview\nThe UK's Companies House publishes the financial returns, lists of officers\netc. of many of the companies registered with it. They now provide some of\nthat information conveniently over a REST API, which is a fantastic resource.\n\nWhile the API and its documentation are fairly intuitive, this module seeks to\nmake it more \"turnkey\" for the user, avoiding headaches over basic auth, the\nrequests library etc.\n\nRequirements:\n\n1. Python 3\n2. [datagrab](https://github.com/HEtothe/datagrab)\n3. A [Companies House API](https://developer.companieshouse.gov.uk/api/docs/) key\n\n## Getting it\nTo download datagrab, either fork this github repo or simply use Pypi via pip.\n\n## Usage\n\n### Retrieve the key information about a specific company\n\nLet's say you're a BI developer and you want an easy way of refreshing your\nthe company key information in your CRM system. You'd first need a way of\neasily checking the Companies House as a single source of truth.\n\nHere's the docstring for the main class, CHCompany:\n\n    Companies House Company\n\n    A way of retrieving data about a target company using the Companies house\n    REST API\n\n    ------------------------\n    args:\n\n        appKey: string\n        Your companies house API key\n\n        company_query_string: string\n        if by==\"id\" then this should be the companies house company ID of the\n        target company, else if by==\"friendly_string\" then it's the long-form\n        name of the target company.\n    ------------------------\n    kwargs:\n\n      by: string\n      Accepts: \"id\" if you are using the companies house ID or \"friendly_string\"\n      if you are using the name of the target company\n\n      zero_results_suppression: bool\n      Accepts: True or False\n      Default: False\n      When set to true, this prints some troubleshooting tips if you run a\n      company search which returns zero results. Setting to True is not\n      recommended for production code.\n\nSo you can see, you just need your Companies House API Key and the company number.    \n\n    >>> from compynieshouse.company_query import CHCompany\n    >>> ch = CHCompany(\"<my_companies_house_API_key\",\n                    company_query_string=\"02557590\",   # What we ask for\n                    by=\"id\", # Search type - can be by \"friendly_string\", or \"id\"\n                    )\n\n    >>> ch.jsonDict\n\n                  {'sic_codes': ['82990'],\n                     'jurisdiction': 'england-wales',\n                     'date_of_creation': '1990-11-12',\n                     'type': 'ltd',\n                     'undeliverable_registered_office_address': False,\n                     'last_full_members_list_date': '2015-11-12',\n                     'registered_office_address': {'postal_code': 'CB1 9NJ',\n                      'address_line_2': 'Cambridge',\n                      'address_line_1': '110 Fulbourn Road',\n                      'locality': 'Cambridgeshire'},\n                     'accounts': {'overdue': False,\n                      'next_made_up_to': '2020-03-31',\n                      'next_accounts': {'overdue': False,\n                       'due_on': '2020-12-31',\n                       'period_end_on': '2020-03-31',\n                       'period_start_on': '2019-04-01'},\n                      'accounting_reference_date': {'day': '31', 'month': '03'},\n                      'last_accounts': {'period_start_on': '2018-04-01',\n                       'period_end_on': '2019-03-31',\n                       'made_up_to': '2019-03-31',\n                       'type': 'group'},\n                      'next_due': '2020-12-31'},\n                     'company_number': '02557590',\n                     'has_been_liquidated': False,\n                     'company_name': 'ARM LIMITED',\n                     'has_insolvency_history': False,\n                     'etag': '7011282471135667318564d3ba8a2c3942359264',\n                     'company_status': 'active',\n                     'has_charges': True,\n                     'previous_company_names': [{'effective_from': '1990-12-03',\n                       'ceased_on': '1998-05-21',\n                       'name': 'ADVANCED RISC MACHINES LIMITED'},\n                      {'effective_from': '1990-11-12',\n                       'ceased_on': '1990-12-03',\n                       'name': 'WIDELOGIC LIMITED'}],\n                     'confirmation_statement': {'next_made_up_to': '2020-11-14',\n                      'overdue': False,\n                      'last_made_up_to': '2019-11-14',\n                      'next_due': '2020-11-28'},\n                     'links': {'self': '/company/02557590',\n                      'filing_history': '/company/02557590/filing-history',\n                      'officers': '/company/02557590/officers',\n                      'charges': '/company/02557590/charges',\n                      'persons_with_significant_control': '/company/02557590/persons-with-significant-control',\n                      'registers': '/company/02557590/registers'},\n                     'registered_office_is_in_dispute': False,\n                     'can_file': True}\n\n`CHCompany` inherits JsonResponseInterpreter class, which is part of the [datagrab library](\n  https://github.com/HEtothe/datagrab\n  ).\nSo we can access attributes like jsonDict and the json_tree_traverse method.\n\nThis is pretty handy if, say, we want to find the city of the registered address.\n\n    >>>>ch.json_tree_traverse([\"registered_office_address\",\"locality\"])         \n    'Cambridgeshire'\n\nIf we're new to the Companies House schema, we can use `ch.visualize_json()` to\nsee the structure.\n\n    Root\n    ├── accounts\n    │   ├── accounting_reference_date\n    │   │   ├── day\n    │   │   └── month\n    │   ├── last_accounts\n    │   │   ├── made_up_to\n    │   │   ├── period_end_on\n    │   │   ├── period_start_on\n    │   │   └── type\n    │   ├── next_accounts\n    │   │   ├── due_on\n    │   │   ├── overdue\n    │   │   ├── period_end_on\n    │   │   └── period_start_on\n    │   ├── next_due\n    │   ├── next_made_up_to\n    │   └── overdue\n    ├── can_file\n    ├── company_name\n    ├── company_number\n    ├── company_status\n    ├── confirmation_statement\n    │   ├── last_made_up_to\n    │   ├── next_due\n    │   ├── next_made_up_to\n    │   └── overdue\n    ├── date_of_creation\n    ├── etag\n    ├── has_been_liquidated\n    ├── has_charges\n    ├── has_insolvency_history\n    ├── jurisdiction\n    ├── last_full_members_list_date\n    ├── links\n    │   ├── charges\n    │   ├── filing_history\n    │   ├── officers\n    │   ├── persons_with_significant_control\n    │   ├── registers\n    │   └── self\n    ├── previous_company_names\n    ├── registered_office_address\n    │   ├── address_line_1\n    │   ├── address_line_2\n    │   ├── locality\n    │   └── postal_code\n    ├── registered_office_is_in_dispute\n    ├── sic_codes\n    ├── type\n    └── undeliverable_registered_office_address\n\n\nLet's imagine now that we want to see if a company name is available. In that\ncase, we'd need to search by a particular substring.\n\nIn that case, set the \"by\" keyword argument to \"friendly_string\":\n\n    >>> ch = CHCompany(\"<my_companies_house_API_key>\",\n                    company_query_string=\"ARM\",   # What we ask for\n                    by=\"friendly_string\", # Search type\n                      )\n\n    >>> ch.json_tree_traverse([\"items\"])[:2]\n    [{'snippet': '',\n      'company_number': '02557590',\n      'description': '02557590 - Incorporated on 12 November 1990',\n      'company_type': 'ltd',\n      'title': 'ARM LIMITED',\n      'date_of_creation': '1990-11-12',\n      'company_status': 'active',\n      'address_snippet': '110 Fulbourn Road, Cambridge, Cambridgeshire, CB1 9NJ',\n      'address': {'premises': '110',\n       'postal_code': 'CB1 9NJ',\n       'address_line_2': 'Cambridge',\n       'address_line_1': 'Fulbourn Road',\n       'locality': 'Cambridgeshire'},\n      'matches': {'title': [1, 3], 'snippet': []},\n      'kind': 'searchresults#company',\n      'links': {'self': '/company/02557590'},\n      'description_identifier': ['incorporated-on']},\n     {'links': {'self': '/company/11551941'},\n      'description_identifier': ['incorporated-on'],\n      'kind': 'searchresults#company',\n      'matches': {'snippet': [1, 3]},\n      'address': {'premises': '3000a',\n       'country': 'United Kingdom',\n       'postal_code': 'PO15 7FX',\n       'address_line_1': 'Parkway Whiteley',\n       'locality': 'Hampshire'},\n      'address_snippet': '3000a Parkway Whiteley, Hampshire, United Kingdom, PO15 7FX',\n      'company_status': 'active',\n      'date_of_creation': '2018-09-04',\n      'title': 'AMR CYBERSECURITY LTD',\n      'company_type': 'ltd',\n      'description': '11551941 - Incorporated on  4 September 2018',\n      'company_number': '11551941',\n      'snippet': 'ARM CYBERSECURITY '}]\n\n\nIt's also useful for identifying the company number of your target entity. So in\nthis case, if you were looking for the chip designer who revolutionised computing,\nyou would be looking for `02557590`.\n\nNow, you've probably noticed that the main payload within the `jsonDict` is under\nthe `\"items\"` key. These `items` are contained in a list -\nbecause it's the list of items returned by the search. That means that our method\n`ch.visualize_json()` produces an `AttributeError`, because `visualize_json`\nassumes a dictionary.\n\nSo `visualize_json` is available as a standalone function\n\n    >>> from datagrab.interpret_response.json_visualize import visualize_json\n    >>> visualize_json(ch.json_tree_traverse([\"items\"])[0])\n    Root\n    ├── address\n    │   ├── address_line_1\n    │   ├── address_line_2\n    │   ├── locality\n    │   ├── postal_code\n    │   └── premises\n    ├── address_snippet\n    ├── company_number\n    ├── company_status\n    ├── company_type\n    ├── date_of_creation\n    ├── description\n    ├── description_identifier\n    ├── kind\n    ├── links\n    │   └── self\n    ├── matches\n    │   ├── snippet\n    │   └── title\n    ├── snippet\n    └── title\n\n## Who has a stake in this company?\n\nCompanies house provides an endpoint to find persons (natural or corporate) with\nsignificant control.\n\nHere's how to access that:\n\n    >>> from compynieshouse.significant_control_query import SignificantControlQuery\n\n    >>> scq = SignificantControlQuery(\n        appKey=\"<my_companies_house_API_key>\",\n        company_code=\"02557590\")\n\n    >>> scq.visualize_json()\n    Root\n    ├── active_count\n    ├── ceased_count\n    ├── items\n    ├── items_per_page\n    ├── links\n    │   └── self\n    ├── start_index\n    └── total_results\n\nNote again that the key payload is under the `\"items\"`, which is effectively\na list of dictionaries.\n\nThis is what such a record looks like:\n\n    >>> visualize_json(scq.json_tree_traverse([\"items\"])[0])\n    Root\n    ├── address\n    │   ├── address_line_1\n    │   ├── country\n    │   ├── locality\n    │   ├── postal_code\n    │   └── premises\n    ├── etag\n    ├── identification\n    │   ├── country_registered\n    │   ├── legal_authority\n    │   ├── legal_form\n    │   ├── place_registered\n    │   └── registration_number\n    ├── kind\n    ├── links\n    │   └── self\n    ├── name\n    ├── natures_of_control\n    └── notified_on\n\n## Who are the company officers?\n\n    >>> from compynieshouse.officer_query import CompanyOfficers\n    >>> from datagrab.interpret_response.json_visualize import visualize_json\n\n    >>> cos = CompanyOfficers(\"<my_companies_house_API_key>\",\n                        \"02557590\",\n                        )\n    >>> cos.visualize_json()\n    Root\n    ├── active_count\n    ├── etag\n    ├── inactive_count\n    ├── items\n    ├── items_per_page\n    ├── kind\n    ├── links\n    │   └── self\n    ├── resigned_count\n    ├── start_index\n    └── total_results\n\n\n    >>> officers_records = cos.json_tree_traverse([\"items\"])[0]\n\n    >>> visualize_json(officers_records)\n    Root\n    ├── address\n    │   ├── address_line_1\n    │   ├── address_line_2\n    │   ├── locality\n    │   └── postal_code\n    ├── appointed_on\n    ├── links\n    │   └── officer\n    │       └── appointments\n    ├── name\n    └── officer_role\n\n## What other appointments does this officer have?\n\nFirst, we need the ID of the officer:\n\n    >>> officers_records[\"links\"]\n    {'officer': {'appointments': '/officers/4yYi8Ok5MbG3QNg8t05GUZF-u-U/appointments'}}\n\n    >>> from compynieshouse.officer_appointments import OfficerAppointments\n\n    >>> oa = OfficerAppointments(\"<my_companies_house_API_key>\",\n                        \"4yYi8Ok5MbG3QNg8t05GUZF-u-U\", # officer ID\n                        )\n    >>> oa.visualize_json()\n    Root\n    ├── etag\n    ├── is_corporate_officer\n    ├── items\n    ├── items_per_page\n    ├── kind\n    ├── links\n    │   └── self\n    ├── name\n    ├── start_index\n    └── total_results\n\n    >>> oa.jsonDict[\"name\"]\n    'Carolyn HERZOG'\n\nHow many appointments does Carolyn Herzog have?\n\n    >>> len(oa.json_tree_traverse([\"items\"]))\n    1\n\nJust the one.\nWhat details about that appointment does Companies House provide us?\n\n    >>> visualize_json(oa.json_tree_traverse([\"items\"])[0])\n    Root\n    ├── address\n    │   ├── address_line_1\n    │   ├── address_line_2\n    │   ├── locality\n    │   └── postal_code\n    ├── appointed_on\n    ├── appointed_to\n    │   ├── company_name\n    │   ├── company_number\n    │   └── company_status\n    ├── links\n    │   └── company\n    ├── name\n    ├── name_elements\n    │   ├── forename\n    │   ├── surname\n    │   └── title\n    └── officer_role",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/HEtothe/compynieshouse",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "compynieshouse",
    "package_url": "https://pypi.org/project/compynieshouse/",
    "platform": "",
    "project_url": "https://pypi.org/project/compynieshouse/",
    "project_urls": {
      "Homepage": "https://github.com/HEtothe/compynieshouse"
    },
    "release_url": "https://pypi.org/project/compynieshouse/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A convenient wrapper for the UK Companies House REST API",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7733775,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64680febbbaae54cb7443588e7c42ce5e8792720f560babf8f7c3e8e9fbf3baa",
          "md5": "e5c6fa251c2c2c46c5d5770096528651",
          "sha256": "8d8863b001ffdabf4458f622d14805b9cc1d2605258cfa779cdbb3577fdc5646"
        },
        "downloads": -1,
        "filename": "compynieshouse-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e5c6fa251c2c2c46c5d5770096528651",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8468,
        "upload_time": "2020-07-19T13:37:43",
        "upload_time_iso_8601": "2020-07-19T13:37:43.790386Z",
        "url": "https://files.pythonhosted.org/packages/64/68/0febbbaae54cb7443588e7c42ce5e8792720f560babf8f7c3e8e9fbf3baa/compynieshouse-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64680febbbaae54cb7443588e7c42ce5e8792720f560babf8f7c3e8e9fbf3baa",
        "md5": "e5c6fa251c2c2c46c5d5770096528651",
        "sha256": "8d8863b001ffdabf4458f622d14805b9cc1d2605258cfa779cdbb3577fdc5646"
      },
      "downloads": -1,
      "filename": "compynieshouse-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "e5c6fa251c2c2c46c5d5770096528651",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8468,
      "upload_time": "2020-07-19T13:37:43",
      "upload_time_iso_8601": "2020-07-19T13:37:43.790386Z",
      "url": "https://files.pythonhosted.org/packages/64/68/0febbbaae54cb7443588e7c42ce5e8792720f560babf8f7c3e8e9fbf3baa/compynieshouse-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}