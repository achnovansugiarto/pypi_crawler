{
  "info": {
    "author": "psilons",
    "author_email": "psilons.quanta@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Python Application Configuration\n\nThis is a configuration tool for application configurations, similar to \n[Spring Framework Core](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html).\n\n\n## Application Settings\n\nNontrivial applications have external settings, such as properties, ini,\nxml, yaml, or others(e.g., config server). we are going to use YAML files since\nit is the current popular way to configure applications. One of the advantages\nwith YAML is that it supports tree structure to avoid duplicated key paths.\nXML is a good option too for complex settings, but it's out of favor because of \nopen/close tags.\n\nAll different formats of settings eventually resolves to key-value pairs.\nThe keys are tree paths for grouping. The values are simple data types, such as \nstring, boolean, int, float, date time, etc. \n\nBesides these setting files, we want to overwrite some settings via command \nline parameters or environment variables. To coordinate settings from different\nsources, we adapt the following:\n- yaml settings is the baseline\n- may refer environment variables through ${env_var_name:default_value}\n- may pass in from command line like -Ekey=value. This could overwrite yaml or\n  environment variable values.\n\nHowever, currently environment variables and command line overwrites treat\nall values as string. One way to get around is to use separate YAML files for\ndifferent cases.\n\nSample YAML file, test.yaml:\n```\ndb:\n    url: 'go://disney'\n    user: 'mickey mouse'\n    server_port: 8080\n    price: 3.1415925\n    begin_date: !!timestamp '2010-11-17 13:12:11'\n    ext_var: ${my_env}\n```\n\nSample Python code:\n```\n# load settings\napp_ctx = IocContext('test')  # It looks for test.yaml\napp_ctx.load_conf_file(current_path) ## need to tell where test.yaml is, current_path\n\n# run with command parameter: -Edb.url=magic_kingdom, os env: set/export my_var=my_value\n# we can get settings:\napp_ctx.get_conf('db.user')        # mickey mouse\napp_ctx.get_conf('db.url')         # magic_kingdom, overwritten by command line\napp_ctx.get_conf('db.server_port') # 8080, int\napp_ctx.get_conf('db.price')       # 3.1415925, float\napp_ctx.get_conf('db.begin_date')  # datetime object for 2010-11-17 13:12:11\napp_ctx.get_conf('db.ext_var')     # my_value, set by environment variable\n```  \n\n## Application Configuration\n\nApplications consist of components, which could consist of other components. So\nwe end up with a component tree where the application is at the top. To assembly\nthese components, we could hardwire them together. A better approach is \n[IoC](https://en.wikipedia.org/wiki/Inversion_of_control) or\n[DIP](https://en.wikipedia.org/wiki/Dependency_injection).\n\n\nOur IoC container has 3 layers:\n- a key-value pair store to work with tree paths, illustrated above.\n- an object container to manage object life cycles and set dependencies.\n- a context to load YAML configurations and inject them to objects.\n\nThere are 2 ways to utilize the lib:\n- use context as a configuration tool. Once the context is loaded with YAML\nfiles, it can be referred elsewhere.\n- use context as an IoC container. Register objects in the container, then\nwe can retrieve objects with dependencies and configurations fully populated.\n\nThe configuration has 3 precedences, from high to low:\n- after loading the configuration, there is a chance to override it because\ninitializing objects. So we can get overrides from command line and overwrite\nsettings.\n- set environment variables and retrieve them in YAML files. This is a more\nrestrictive way than where we blindly overwrite all possible settings in the\nenvironment.\n- YAML files.\n\nThere is an encryption feature for passwords.\n\n##\nPython is a functional language, but there are cases where we need classes.\nPassing all parameters to functions can pollute function interfaces and create\ninformation leaks. For example, passing a database connection around to \nretrieve data results changes to all functions if we switch from database \nstorage to others, e.g., elastic search server. So hiding the connection in\na class (through constructor) and keep the data retrieval interface clean \nwould be a better solution. \n\nDue to the nature of Python, singletons are not as bad as in Java. Especially\nduring application start up, if we can guaranty single threaded, there are \nmore playroom than the Java case.\n\n\n## TODOs\n- Do we need multiple YAML files? If so, here is the way to do it.\nhttps://stackoverflow.com/questions/528281/how-can-i-include-a-yaml-file-inside-another\n- Need performance testing.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/psilons/pypigeonhole-config",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pypigeonhole-config",
    "package_url": "https://pypi.org/project/pypigeonhole-config/",
    "platform": "",
    "project_url": "https://pypi.org/project/pypigeonhole-config/",
    "project_urls": {
      "Homepage": "https://github.com/psilons/pypigeonhole-config"
    },
    "release_url": "https://pypi.org/project/pypigeonhole-config/0.0.3/",
    "requires_dist": [
      "pycryptodome (==3.9.8)",
      "pyyaml (==5.3.1)",
      "pypigeonhole-simple-utils"
    ],
    "requires_python": ">=3.6",
    "summary": "Python YAML based Configuration",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8599996,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb1b03af8d06d86d6aff7497ff9e2d4344b9461213ae983fab6bfaf758fec1c6",
          "md5": "3e084d021edd78bb1d015234fc5804a5",
          "sha256": "2fc91fa2de45d3c36db603ad897e27e49258b92cf2142ec6113d2c2a5e94a64a"
        },
        "downloads": -1,
        "filename": "pypigeonhole_config-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e084d021edd78bb1d015234fc5804a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10826,
        "upload_time": "2020-11-06T21:42:11",
        "upload_time_iso_8601": "2020-11-06T21:42:11.607813Z",
        "url": "https://files.pythonhosted.org/packages/cb/1b/03af8d06d86d6aff7497ff9e2d4344b9461213ae983fab6bfaf758fec1c6/pypigeonhole_config-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5042b71e25452142d29280b1a9077dafbb3678894c5e99d816bbf77def41fade",
          "md5": "2e9a1dfb18622343a41c10daf5b8bf1a",
          "sha256": "2a785480f1351ded1038357ded77cfdb8566310ed69cd9281f35d76991052191"
        },
        "downloads": -1,
        "filename": "pypigeonhole-config-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2e9a1dfb18622343a41c10daf5b8bf1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11331,
        "upload_time": "2020-11-06T21:42:15",
        "upload_time_iso_8601": "2020-11-06T21:42:15.004353Z",
        "url": "https://files.pythonhosted.org/packages/50/42/b71e25452142d29280b1a9077dafbb3678894c5e99d816bbf77def41fade/pypigeonhole-config-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20eb35859c556d1854b511077bf73ffbddba7d3838f93695c9a92cbd25b17647",
          "md5": "8329257d4d538f838c63ecb9be465f21",
          "sha256": "307e8ec00763f9029e6fd6c01b008b79fb94ce17a1c850117c2d3887132a7f4f"
        },
        "downloads": -1,
        "filename": "pypigeonhole_config-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8329257d4d538f838c63ecb9be465f21",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10770,
        "upload_time": "2020-11-06T21:42:13",
        "upload_time_iso_8601": "2020-11-06T21:42:13.941741Z",
        "url": "https://files.pythonhosted.org/packages/20/eb/35859c556d1854b511077bf73ffbddba7d3838f93695c9a92cbd25b17647/pypigeonhole_config-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64253c10847d176ee14fa88bccba71bdf3568d7d2b250cf2dd3ddf8f0227a04e",
          "md5": "48f6850347bd36717e57da204fff8d54",
          "sha256": "cf6424de0ad50b2a0b7d11b5f7b180e1e3c3bbfde10850ca69d07f80d7dc525d"
        },
        "downloads": -1,
        "filename": "pypigeonhole-config-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "48f6850347bd36717e57da204fff8d54",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11282,
        "upload_time": "2020-11-06T21:42:16",
        "upload_time_iso_8601": "2020-11-06T21:42:16.092501Z",
        "url": "https://files.pythonhosted.org/packages/64/25/3c10847d176ee14fa88bccba71bdf3568d7d2b250cf2dd3ddf8f0227a04e/pypigeonhole-config-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "20eb35859c556d1854b511077bf73ffbddba7d3838f93695c9a92cbd25b17647",
        "md5": "8329257d4d538f838c63ecb9be465f21",
        "sha256": "307e8ec00763f9029e6fd6c01b008b79fb94ce17a1c850117c2d3887132a7f4f"
      },
      "downloads": -1,
      "filename": "pypigeonhole_config-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8329257d4d538f838c63ecb9be465f21",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 10770,
      "upload_time": "2020-11-06T21:42:13",
      "upload_time_iso_8601": "2020-11-06T21:42:13.941741Z",
      "url": "https://files.pythonhosted.org/packages/20/eb/35859c556d1854b511077bf73ffbddba7d3838f93695c9a92cbd25b17647/pypigeonhole_config-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "64253c10847d176ee14fa88bccba71bdf3568d7d2b250cf2dd3ddf8f0227a04e",
        "md5": "48f6850347bd36717e57da204fff8d54",
        "sha256": "cf6424de0ad50b2a0b7d11b5f7b180e1e3c3bbfde10850ca69d07f80d7dc525d"
      },
      "downloads": -1,
      "filename": "pypigeonhole-config-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "48f6850347bd36717e57da204fff8d54",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11282,
      "upload_time": "2020-11-06T21:42:16",
      "upload_time_iso_8601": "2020-11-06T21:42:16.092501Z",
      "url": "https://files.pythonhosted.org/packages/64/25/3c10847d176ee14fa88bccba71bdf3568d7d2b250cf2dd3ddf8f0227a04e/pypigeonhole-config-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}