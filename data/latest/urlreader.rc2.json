{
  "info": {
    "author": "Antonio Cavedoni",
    "author_email": "antonio@cavedoni.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: MacOS X",
      "Environment :: MacOS X :: Cocoa",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Programming Language :: Python :: 3",
      "Topic :: Internet"
    ],
    "description": "[<img src=\"https://github.com/verbosus/urlreader/workflows/Tests/badge.svg\" alt=\"Tests\">](https://github.com/verbosus/urlreader/actions)\n\n# URLReader\n\nURLReader is a wrapper around macOS’s NSURLSession, etc. \n\n## Scope & Limitations\n\nURLReader originated from [an effort](https://github.com/robofont-mechanic/mechanic-2/pull/18) to improve the UI responsiveness of [Mechanic](https://robofontmechanic.com/), a package manager for [RoboFont](https://www.robofont.com/). Because of this original use-case, URLReader is meant to be used in PyObjC apps or scripts that need to download and possibly cache relatively small bits of additional data. Technically there is nothing preventing you from using URLReader for other use-cases, larger downloads, etc. but depending what these might be you might be better served by using `NSURLSession` directly.\n\nBeing powered by the system `NSURLSession`, URLReader only works on macOS 10.9+.\n\n## Install\n\nURLReader is [available](https://pypi.org/project/urlreader/) through the Python Packaging Index, so you can ```pip install urlreader```. We recommend using virtual environments, in which case you can add `urlreader` in your `requirements.txt` or `Pipfile` etc.\n\nYou can also install directly from source, in which case you can run:\n\n```shell\n$ python setup.py install\n```\n\nIn case you want run the test suite:\n\n```shell\n$ python setup.py test\n```\n\nURLReader has a small test suite which spins a simple HTTP server in a separate process and runs against it. The test suite is also [hooked up to Github’s actions](https://github.com/verbosus/urlreader/actions), so it runs whenever there’s a push on the repo.\n\n## Basic usage\n\nIn its most basic form, URLReader takes a URL, fetches its contents in the background (so it won’t block your UI) and sends them back on the main thread to a callback you provide. The callback is a regular Python function with three arguments: `url` , `data` and `error` (of types `NSURL`, `NSData` and `NSError`). Like this:\n\n```python\ndef callback(url, data, error):\n    if url and data and not error:\n        print(f\"Received {url} contents, {len(data)} bytes\")\n\nURLReader().fetch(\"http://example.org/\", callback)\n```\n\n## Timeout\n\nYou can set a custom timeout for requests (which by default is 10 seconds):\n\n```python\nURLReader(timeout=2) # in seconds\n```\n\nNotice that this is the total response time, not how long it takes for the initial request to make it to the server. \n\n## Quote URL path and force HTTPS\n\nSometimes people have spaces in their URL paths, like, say, `/Foo Bar`, but forget to quote them. The `NSURLSession` reading machinery really doesn’t like that. By default URLReader quotes the path component of a URL. This behavior can be turned off, if needed:\n\n```python\nURLReader(quote_url_path=False)\n```\n\nAlso, sometimes people try to open `http` URLs, but their apps’ App Security Policy won’t allow that. If the remote server also supports `https`, then you can tell URLReader to promote the URLs from `http` to `https` by calling:\n\n```python\nURLReader(force_https=True)\n```\n\nThis setting won’t affect non-HTTP requests. Technically there is nothing in URL-reader that is HTTP-only, and `NSURLSession` does support other protocols. I haven’t tested it with these, but I’m not aware of anything special that would need to change. \n\n## Usage from scripts\n\nYou can use URLReader in synchronous mode for one-off scripts if you need to. It will block until the response is fully returned to your callback instead of calling it asynchronously like it normally would:\n\n```python\nURLReader(wait_until_done=True)\n```\n\n## Caching\n\nBy default, URLReader follows the caching policy set by the protocol, i.e. [NSURLRequestUseProtocolCachePolicy](https://developer.apple.com/documentation/foundation/nsurlrequestcachepolicy/nsurlrequestuseprotocolcachepolicy) which means it will do whatever the response HTTP caching headers tell it to do (if the request is HTTP.)\n\nIn some cases, however, you might want to cache the response so it’s available to your code even when offline. In these situations, URLReader switches the request cache policy to [NSURLRequestReturnCacheDataElseLoad](https://developer.apple.com/documentation/foundation/nsurlrequestcachepolicy/nsurlrequestreturncachedataelseload) which means it will first check its cache and return data from there no matter what the HTTP headers say. \n\nOn top of the standard `NSURLRequestReturnCacheDataElseLoad` behavior, URLReader adds a little twist: if the original response required one or more redirects, which wouldn’t be cached therefore not available offline, NSURLCache isn’t able to fetch the response from its cache. URLReader adds a cache entry for the response URL *before the redirects* so they are fully accessible offline.\n\nThis all happens with the same code: \n\n```python \nURLReader(use_cache=True) # this switches on the caching mechanism described above\n``` \n\nBy default the cache will be written in `~/Library/Caches/<your app bundle identifier>` but that can be configured like this:\n\n```python\nURLReader(use_cache=True, cache_location=\"/my/cache/path\") # cache_location can be either a string path or an NSURL\n```\n\nOnce a URL is fetched by an URLReader with caching enabled, it stays in the cache indefinitely. You can force-reset a cached entry by setting `invalidate_cache=True` on the `fetch` method:\n\n```python\nreader.fetch(url, callback, invalidate_cache=True)\n```\n\nOr you can remove the cached entry without replacing it with a new one:\n\n```python\nreader.invalidate_cache_for_url(url)\n```\n\nFlushing the cache, removing all the cached entries, is also possible:\n\n```python\nreader.flush_cache()\n```\n\n## Callback\n\nSometimes you just need to fetch some values, quick. You could use a lambda:\n\n```python\nURLReader().fetch('http://example.org',\n    lambda url, data, error: print(f'Received {len(data)} bytes'))\n```\n\nJust remember the lambda would be called asynchronously and the call would return right away. So it’d be no good in a script without an NSRunLoop. In that case, this would work:\n\n```python\nURLReader(wait_until_done=True).fetch('http://example.org',\n    lambda url, data, error: print(f'Received {len(data)} bytes'))\n```\n\nThis would make the call block until the data is received and the lambda has exited. But then again, if you just want to fetch a URL in a blocking fashion with no caches or other accoutrements, either `requests.get(url)` or `urllib.request.urlopen(url)` are probably a better fit.\n\n## And that’s it\n\nThanks for reading, hope this code is useful somehow.\n\n---\n\nURLReader was written by [Antonio Cavedoni](mailto:antonio@cavedoni.org) and is licensed under the terms of the [MIT License](https://github.com/verbosus/urlreader/blob/master/LICENSE).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/verbosus/urlreader",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "urlreader",
    "package_url": "https://pypi.org/project/urlreader/",
    "platform": "",
    "project_url": "https://pypi.org/project/urlreader/",
    "project_urls": {
      "Homepage": "https://github.com/verbosus/urlreader"
    },
    "release_url": "https://pypi.org/project/urlreader/0.1.3/",
    "requires_dist": [
      "pyobjc (>=5.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "URLReader: a wrapper around macOS’s NSURLSession, etc. for PyObjC apps",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6060635,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dbdf6f6004b186555646c71f91ad17e9c9e501b13d0cd73e39e80fb17d64455",
          "md5": "6c000caf377c5b04f331e4844f131c8e",
          "sha256": "60b1da6e0bb08a91ef7335d56853f23f60bc10a65eb18139a6b3c84edce2bb52"
        },
        "downloads": -1,
        "filename": "urlreader-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c000caf377c5b04f331e4844f131c8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7982,
        "upload_time": "2019-10-12T14:36:29",
        "upload_time_iso_8601": "2019-10-12T14:36:29.003031Z",
        "url": "https://files.pythonhosted.org/packages/1d/bd/f6f6004b186555646c71f91ad17e9c9e501b13d0cd73e39e80fb17d64455/urlreader-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "864b857788f17971662557bfcf156d38c594daef746627c9f874924acb780950",
          "md5": "b336783d1172821ed7319f4cbd0eaa6a",
          "sha256": "a570775c7a5e523024e4d61b76b9e19b6ae273c277693430df2fb108aeb71b63"
        },
        "downloads": -1,
        "filename": "urlreader-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b336783d1172821ed7319f4cbd0eaa6a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6822,
        "upload_time": "2019-10-12T14:36:31",
        "upload_time_iso_8601": "2019-10-12T14:36:31.494017Z",
        "url": "https://files.pythonhosted.org/packages/86/4b/857788f17971662557bfcf156d38c594daef746627c9f874924acb780950/urlreader-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dba14de7a2b1a9b3eb6eb8ceff3f7762523f20b0b57cf61cef4e8921ba592cc",
          "md5": "ce507e1be966086d2f339e2c733e2ee4",
          "sha256": "9238de6e1ba9c1895e85704ce303b10c75bc4cb12d95087d25a49101585583a4"
        },
        "downloads": -1,
        "filename": "urlreader-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce507e1be966086d2f339e2c733e2ee4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8192,
        "upload_time": "2019-10-31T21:25:53",
        "upload_time_iso_8601": "2019-10-31T21:25:53.791460Z",
        "url": "https://files.pythonhosted.org/packages/9d/ba/14de7a2b1a9b3eb6eb8ceff3f7762523f20b0b57cf61cef4e8921ba592cc/urlreader-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b18a8870090ce7f50d0ab2a2a0db033acbf9fb3da35bafe5e4a920c2507ccccf",
          "md5": "09215a790b457bdf4a06d6f98dbcf929",
          "sha256": "0cd48ab5cd3f5a67bdbf9a6c2a2c6141f24c550dde03cc6295ed243731c7f01d"
        },
        "downloads": -1,
        "filename": "urlreader-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "09215a790b457bdf4a06d6f98dbcf929",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7072,
        "upload_time": "2019-10-31T21:25:56",
        "upload_time_iso_8601": "2019-10-31T21:25:56.362513Z",
        "url": "https://files.pythonhosted.org/packages/b1/8a/8870090ce7f50d0ab2a2a0db033acbf9fb3da35bafe5e4a920c2507ccccf/urlreader-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9dba14de7a2b1a9b3eb6eb8ceff3f7762523f20b0b57cf61cef4e8921ba592cc",
        "md5": "ce507e1be966086d2f339e2c733e2ee4",
        "sha256": "9238de6e1ba9c1895e85704ce303b10c75bc4cb12d95087d25a49101585583a4"
      },
      "downloads": -1,
      "filename": "urlreader-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ce507e1be966086d2f339e2c733e2ee4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8192,
      "upload_time": "2019-10-31T21:25:53",
      "upload_time_iso_8601": "2019-10-31T21:25:53.791460Z",
      "url": "https://files.pythonhosted.org/packages/9d/ba/14de7a2b1a9b3eb6eb8ceff3f7762523f20b0b57cf61cef4e8921ba592cc/urlreader-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b18a8870090ce7f50d0ab2a2a0db033acbf9fb3da35bafe5e4a920c2507ccccf",
        "md5": "09215a790b457bdf4a06d6f98dbcf929",
        "sha256": "0cd48ab5cd3f5a67bdbf9a6c2a2c6141f24c550dde03cc6295ed243731c7f01d"
      },
      "downloads": -1,
      "filename": "urlreader-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "09215a790b457bdf4a06d6f98dbcf929",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7072,
      "upload_time": "2019-10-31T21:25:56",
      "upload_time_iso_8601": "2019-10-31T21:25:56.362513Z",
      "url": "https://files.pythonhosted.org/packages/b1/8a/8870090ce7f50d0ab2a2a0db033acbf9fb3da35bafe5e4a920c2507ccccf/urlreader-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}