{
  "info": {
    "author": "David Rajaratnam",
    "author_email": "daver@gemarex.com.au",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Clingo ORM (Clorm)\n==================\n\nClorm is a Python library that provides an Object Relational Mapping (ORM)\ninterface to the Clingo Answer Set Programming (ASP) solver.\n\nFor background, ASP is a declarative language for describing, and solving, hard\nsearch problems. `Clingo <https://github.com/potassco/clingo>`_ is a feature\nrich ASP solver with an extensive, but relatively low-level, Python API.\n\nThe goal of this library is to make it easier to integrate Clingo within a\nPython application. It is implemented on top of the official Clingo API so is\ndesigned to supplement and not replace the Clingo API.\n\nWhen integrating an ASP program into an application you typically want to model\nthe domain as a statically written ASP program, but then to generate problem\ninstances and process the results dynamically. Clorm makes this integration\ncleaner, both in terms of code readability but also by providing a framework\nthat makes it easier to refactor the python code as the ASP program evolves.\n\nThe documentation is available online `here <https://clorm.readthedocs.io/>`_.\n\nNote: Clorm works with Python 3.5+ and Clingo 5.4+\n\nInstallation\n------------\n\nClorm requires Python 3.7+ and Clingo 5.4+. It can be installed using either the\n`pip` or `conda` package managers.\n\n`pip` packages can be downloaded from PyPI:\n\n.. code-block:: bash\n\n    $ pip install clorm\n\nThe alternative to install Clorm is with Anaconda. Assuming you have already\ninstalled some variant of Anaconda, first you need to install Clingo:\n\n.. code-block:: bash\n\n    $ conda install -c potassco clingo\n\nThen install Clorm:\n\n.. code-block:: bash\n\n    $ conda install -c potassco clorm\n\n\nQuick Start\n-----------\n\nThe following example highlights the basic features of Clorm. The ASP and Python\nparts of this example are located in the ``examples`` sub-directory in the git\nrepository. The ASP program is ``quickstart.lp`` and the Python program is\n``quickstart.py``. A clingo callable version with embedded Python is also\nprovided and can be run with:\n\n.. code-block:: bash\n\n    $ clingo embedded_quickstart.lp\n\n\nImagine you are running a courier company and you have drivers and items that\nneed to be delivered on a daily basis. An item is delivered during one of four\ntime slots, and you want to assign a driver to deliver each item, while also\nensuring that all items are assigned and drivers aren't double-booked for a time\nslot.\n\nYou also want to apply some optimisation criteria. Firstly, you want to minimise\nthe number of drivers that you use (for example, because bringing a driver on\nfor a day has some fixed cost). Secondly, you want to deliver items as early in\nthe day as possible.\n\nThe above crieria can be encoded with the following simple ASP program:\n\n.. code-block:: prolog\n\n   time(1..4).\n\n   1 { assignment(I, D, T) : driver(D), time(T) } 1 :- item(I).\n   :- assignment(I1, D, T), assignment(I2, D, T), I1 != I2.\n\n   working_driver(D) :- assignment(_,D,_).\n\n   #minimize { 1@2,D : working_driver(D) }.\n   #minimize { T@1,D : assignment(_,D,T) }.\n\nThis above ASP program encodes the *problem domain* and can be used to solve the\nproblem for arbitrary instances by combining it with a *problem instance*\n(i.e., some combination of drivers and items).\n\nWe now use a Python program to dynamically generate the problem instance and to\nprocess the generated solutions. Each solution will be an assignment of drivers\nto items for a time slot.\n\nFirst the relevant libraries need to be imported.\n\n.. code-block:: python\n\n   from clorm import Predicate, ConstantField, IntegerField\n   from clorm.clingo import Control\n\nNote: Importing from ``clorm.clingo`` instead of ``clingo``.\n\n   While it is possible to use Clorm with the raw clingo library, a wrapper\n   library is provided to make the integration seemless. This wrapper (should)\n   behave identically to the original module, except that it extends the\n   functionality to offer integration with Clorm objects. It is also possible to\n   `monkey patch <https://en.wikipedia.org/wiki/Monkey_patch>`_ Clingo if this\n   is your preferred approach (see the `documentation\n   <https://clorm.readthedocs.io/en/stable/>`_).\n\nThe next step is to define a data model that maps the Clingo predicates to\nPython classes. Clorm introduces a number basic concepts for defining the data\nmodel: a ``Predicate`` class that must be sub-classed, and various *Field*\nclasses that correspond to definitions of allowable *logical terms* that form\nthe parameters of predicates.\n\nClorm provides three standard field classes, ``ConstantField``, ``StringField``,\nand ``IntegerField``, that correspond to the standard *logic programming* data\ntypes of integer, constant, and string. These fields are sub-classed from\n``RawField``.\n\n.. code-block:: python\n\n   class Driver(Predicate):\n       name=ConstantField\n\n   class Item(Predicate):\n       name=ConstantField\n\n   class Assignment(Predicate):\n       item=ConstantField\n       driver=ConstantField\n       time=IntegerField\n\nThe above code defines three classes to match the ASP program's input and output\npredicates.\n\n``Driver`` maps to the ``driver/1`` predicate, ``Item`` maps to ``item/1``, and\n``Assignment`` maps to ``assignment/3`` (note: the ``/n`` is a common logic\nprogramming notation for specifying the arity of a predicate or function). A\npredicate can contain zero or more fields.\n\nThe number of fields in the ``Predicate`` declaration must match the predicate\narity and the order in which they are declared must also match the position of\neach term in the ASP predicate.\n\nHaving defined the data model we now show how to dynamically add a problem\ninstance, solve the resulting ASP program, and print the solution.\n\nFirst the Clingo ``Control`` object needs to be created and initialised, and the\nstatic problem domain encoding must be loaded.\n\n.. code-block:: python\n\n    ctrl = Control(unifier=[Driver, Item, Assignment])\n    ctrl.load(\"quickstart.lp\")\n\nThe ``clorm.clingo.Control`` object controls how the ASP solver is run. When the\nsolver runs it generates *models*. These models constitute the solutions to the\nproblem. Facts within a model are encoded as ``clingo.Symbol`` objects. The\n``unifier`` argument defines how these symbols are turned into Predicate\ninstances.\n\nFor every symbol fact in the model, Clorm will successively attempt to *unify*\n(or match) the symbol against the Predicates in the unifier list. When a match\nis found the symbol is used to define an instance of the matching predicate. Any\nsymbol that does not unify against any of the predicates is ignored.\n\nOnce the control object is created and the unifiers specified the static ASP\nprogram is loaded.\n\nNext we generate a problem instance by generating a lists of ``Driver`` and\n``Item`` objects. These items are added to a ``clorm.FactBase`` object.\n\nThe ``clorm.FactBase`` class provides a specialised set-like container for\nstoring facts (i.e., predicate instances). It provides the standard set\noperations but also implements a querying mechanism for a more database-like\ninterface.\n\n.. code-block:: python\n\n    from clorm import FactBase\n\n    drivers = [ Driver(name=n) for n in [\"dave\", \"morri\", \"michael\" ] ]\n    items = [ Item(name=\"item{}\".format(i)) for i in range(1,6) ]\n    instance = FactBase(drivers + items)\n\nThe ``Driver`` and ``Item`` constructors use named parameters that match the\ndeclared field names. Note: while you can use positional arguments to initialise\ninstances, doing so will potentially make the code harder to refactor. So in\ngeneral you should avoid using positional arguments except for a few cases (eg.,\nsimple tuples where the order is unlikely to change).\n\nThese facts can now be added to the control object and the combined ASP program\ngrounded.\n\n.. code-block:: python\n\n    ctrl.add_facts(instance)\n    ctrl.ground([(\"base\",[])])\n\nAt this point the control object is ready to be run and generate\nsolutions. There are a number of ways in which the ASP solver can be run (see\nthe `Clingo API documentation\n<https://potassco.org/clingo/python-api/5.5/clingo/control.html#clingo.control.Control.solve>`_).  For this\nexample, we use a mode where a callback function is specified. This\nfunction will then be called each time a model is found.\n\n\n.. code-block:: python\n\n    solution=None\n    def on_model(model):\n        nonlocal solution        # Note: use `nonlocal` keyword depending on scope\n        solution = model.facts(atoms=True)\n\n    ctrl.solve(on_model=on_model)\n    if not solution:\n        raise ValueError(\"No solution found\")\n\nThe ``on_model()`` callback is triggered for every new model. Because of the ASP\noptimisation statements this callback can potentially be triggered multiple times\nbefore an optimal model is found. Also, note that if the problem is\nunsatisfiable then it will never be called and you should always check for this\ncase.\n\nThe line ``solution = model.facts(atoms=True)`` extracts only instances of the\npredicates that were registered with the ``unifier`` parameter. As mentioned\nearlier, any facts that fail to unify are ignored. In this case it ignores the\n``working_driver/1`` instances. The unified facts are stored and returned in\na ``clorm.FactBase`` object.\n\nThe final step in this Python program involves querying the solution to print out\nthe relevant parts. To do this we call the ``FactBase.select()`` member function\nthat returns a suitable ``Select`` object.\n\n.. code-block:: python\n\n    from clorm import ph1_\n\n    query=solution.query(Assignment)\\\n                  .where(Assignment.driver == ph1_)\\\n                  .order_by(Assignment.time)\n\nA Clorm query can be viewed as a simplified version of a traditional database\nquery, and the function call syntax will be familiar to users of Python ORM's\nsuch as SQLAlchemy or Peewee.\n\nHere we want to find ``Assignment`` instances that match the ``driver`` field to\na special placeholder object ``ph1_`` and to return the results sorted by the\nassignment time. The value of the ``ph1_`` placeholder will be provided when the\nquery is actually executed; separating specification from execution allows the\nquery to be re-run multiple times with different values.\n\nIn particular, we now iterate over the list of drivers and execute the query for\neach driver and print the result.\n\n.. code-block:: python\n\n    for d in drivers:\n        assignments = list(query.bind(d.name).all())\n        if not assignments:\n            print(\"Driver {} is not working today\".format(d.name))\n        else:\n            print(\"Driver {} must deliver: \".format(d.name))\n            for a in assignments:\n                print(\"\\t Item {} at time {}\".format(a.item, a.time))\n\nCalling ``query.bind(d.name)`` first creates a new query with the placeholder\nvalues assigned.  Because ``d.name`` is the first parameter it matches against\nthe placeholder ``ph1_`` in the query definition. Clorm has four predefined\nplaceholders but more can be created using the ``ph_`` function.\n\nRunning this example produces the following results:\n\n.. code-block:: bash\n\n    $ cd examples\n    $ python quickstart.py\n    Driver dave must deliver:\n             Item item5 at time 1\n             Item item4 at time 2\n    Driver morri must deliver:\n             Item item1 at time 1\n             Item item2 at time 2\n             Item item3 at time 3\n    Driver michael is not working today\n\nThe above example shows some of the main features of Clorm and how to match the\nPython data model to the defined ASP predicates. For more details about how to\nuse Clorm see the `documentation <https://clorm.readthedocs.io/en/stable/>`_.\n\nOther Clorm Features\n--------------------\n\nBeyond the basic features outlined above there are many other features of the\nClorm library. These include:\n\n* You can define new sub-classes of ``RawField`` for custom data\n  conversions. For example, you can define a ``DateField`` that represents dates\n  in clingo in a string YYYY-MM-DD format and then use it in a predicate\n  definition.\n\n.. code-block:: python\n\n    from clorm import StringField          # StringField is a sub-class of RawField\n    import datetime\n\n    class DateField(StringField):          # DateField is a sub-class of StringField\n        pytocl = lambda dt: dt.strftime(\"%Y-%m-%d\")\n        cltopy = lambda s: datetime.datetime.strptime(s,\"%Y-%m-%d\").date()\n\n    class Delivery(Predicate):\n        item=ConstantField\n        date=DateField\n\n    dd1=Delivery(item=\"item1\", date=datetime.date(2019,14,5))    # Create delivery\n\n.. code-block:: prolog\n\n    % Corresponding ASP code\n    delivery(item1, \"2019-04-05\").\n\n\n* Clorm supports predicate definitions with complex-terms; using either a\n  ``ComplexTerm`` class (which is in fact an alias for Predicate) or Python\n  tuples. Every defined complex term has an associated ``RawField`` sub-class\n  that can be accessed as a ``Field`` property of the complex term class.\n\n.. code-block:: python\n\n    from clorm import ComplexTerm\n\n    class Event(ComplexTerm):\n        date=DateField\n\tname=StringField\n\n    class Log(Predicate):\n        event=Event.Field\n\tlevel=IntegerField\n\n    l1=Log(event=Event(date=datetime.date(2019,4,5),name=\"goto shops\"),level=0)\n\n.. code-block:: prolog\n\n    % Corresponding ASP code\n    log(event(\"2019-04-05\", \"goto shops\"), 0).\n\n* Function definitions can be decorated with a data conversion signature to\n  perform automatic type conversion for writing Python functions that can be\n  called from an ASP program using the @-syntax.\n\n  For example a function ``add`` can be decorated with an data conversion\n  signature that accepts two input integers and expects an output integer.\n\n.. code-block:: python\n\n    @make_function_asp_callable(IntegerField, IntegerField, IntegerField)\n    def add(a,b): a+b\n\n.. code-block:: prolog\n\n    % Calling the add function from ASP\n    f(@add(5,6)).    % grounds to f(11).\n\n* The data conversion signature can also be specified using Python 3.x function\n  annotations. So for an equivalent specification of ``add`` above:\n\n.. code-block:: python\n\n    @make_function_asp_callable\n    def add(a : IntegerField, b : IntegerField) -> IntegerField: a+b\n\n* Note, the Clingo API does already perform some automatic data\n  conversions. However these conversions are ad-hoc, in the sense that it will\n  automatically convert numbers and strings, but cannot deal with other types\n  such as constants or more complex terms.\n\n  In contrast the Clorm mechanism of a data conversion signatures provide a more\n  complete and transparent approach; it can deal with arbitrary conversions and\n  all data conversions are clear since they are specified as part of the\n  signature.\n\n\nDevelopment\n-----------\n* Python version: Clorm is actively developed using recent Python versions (3.8+)\n* Clingo version: Clorm is typically tested with both Clingo version 5.4 and 5.5\n\nIdeas for the Future\n--------------------\nHere are some thoughts on how to extend the library.\n\n* Add more examples to show how to use the Clorm.\n\n* Build a library of resuable ASP integration components. I've started on this\n  but am unsure how useful it would be. While there are some general concepts\n  that you might consider encoding (e.g., date and time), however, how you\n  actually want to encode them could be application specific. For example,\n  encoding time down to the second or minute level is probably not what you want\n  for a calendar scheduling application. In such a case a higher granularity,\n  say 15 min blocks, is better.\n\n  It could be that rather than a library of components, a set of example\n  templates that could be copied and modified might be more useful.\n\n* Add a debug library. There are two aspects to debugging: debugging your\n  Python-ASP integration code, and debugging the ASP code itself. For the first\n  case, I should at least go through Clorm to make sure that any generated\n  exceptions have meaningful error messages.\n\n  Debugging ASP code itself is trickier. It is often a painful process; when you\n  mess up you often end up with an unsatisfiable problem, which doesn't tell you\n  anything about what went wrong. You then end up commenting out constraints\n  until it becomes satisfiable and you can look at the models being\n  generated. My ideas are only vague at this stage. Maybe a tool that\n  automatically weakens constraints until the problem becomes satisfiable. There\n  are a few papers on debugging ASP so need to chase these up and see if there\n  is something I can use.\n\nAlternatives\n------------\n\nI think an ORM interface provides a natural fit for getting data into and out of\nthe Clingo solver. However, there will be other opinions on this. Also, data IO\nis only one aspect of how you might want to interact with the ASP solver.\n\nSo, here are some other projects for using Python and Clingo:\n\n* `PyASP <https://github.com/sthiele/pyasp>`_\n* `Clyngor <https://github.com/aluriak/clyngor>`_\n\n\nLicense\n-------\n\nThis project is licensed under the terms of the MIT license.\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/potassco/clorm",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Clorm",
    "package_url": "https://pypi.org/project/Clorm/",
    "platform": null,
    "project_url": "https://pypi.org/project/Clorm/",
    "project_urls": {
      "Homepage": "https://github.com/potassco/clorm"
    },
    "release_url": "https://pypi.org/project/Clorm/1.4.1.post1/",
    "requires_dist": [
      "clingo"
    ],
    "requires_python": "",
    "summary": "Clingo ORM (CLORM) provides a ORM interface for interacting with the Clingo Answer Set Programming (ASP) solver",
    "version": "1.4.1.post1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15378940,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27122473a1325709f9153baac0580f9c74a260a3bc22f0ffbb5d0f15427e8896",
          "md5": "eee317fffcdbbcba8e044325e0f08539",
          "sha256": "b012bcd4fdb61797197865521f6bd11b7506b848262704779687aed0217dbc83"
        },
        "downloads": -1,
        "filename": "Clorm-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eee317fffcdbbcba8e044325e0f08539",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 94942,
        "upload_time": "2021-06-15T19:17:38",
        "upload_time_iso_8601": "2021-06-15T19:17:38.942091Z",
        "url": "https://files.pythonhosted.org/packages/27/12/2473a1325709f9153baac0580f9c74a260a3bc22f0ffbb5d0f15427e8896/Clorm-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c45a0e81ea41fb421ac9172d104291407937b0693630acabc7818ecdfe756a82",
          "md5": "46d9fd2c343500fe5c0ca556d1d4441b",
          "sha256": "84f7392ad0e4a128eff45f216e4c0c652545f24d446adc4adce5d345ba72399e"
        },
        "downloads": -1,
        "filename": "Clorm-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "46d9fd2c343500fe5c0ca556d1d4441b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 88379,
        "upload_time": "2021-06-15T19:17:41",
        "upload_time_iso_8601": "2021-06-15T19:17:41.224335Z",
        "url": "https://files.pythonhosted.org/packages/c4/5a/0e81ea41fb421ac9172d104291407937b0693630acabc7818ecdfe756a82/Clorm-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c471de9f15793874b22c54e53d4e67462211ecd68b4ab7b92ae1a528ac43df83",
          "md5": "449b5bc0e8c45caaf3d46d38d66110fb",
          "sha256": "4b0972371e97dc06b0fafd761cd6d2badea59ce521794d52abebd97bf540924a"
        },
        "downloads": -1,
        "filename": "Clorm-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "449b5bc0e8c45caaf3d46d38d66110fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 99207,
        "upload_time": "2021-08-01T10:40:00",
        "upload_time_iso_8601": "2021-08-01T10:40:00.344541Z",
        "url": "https://files.pythonhosted.org/packages/c4/71/de9f15793874b22c54e53d4e67462211ecd68b4ab7b92ae1a528ac43df83/Clorm-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fd0379baff9603a7732f68dc8ab1e558150e89df3cfb6b06675c751c968e3f3",
          "md5": "986549264c5516f43d2d879118ec98d5",
          "sha256": "ffeb08c1bd19b80f14f1425b21216984925e77dbd5c252caa12567e075542bde"
        },
        "downloads": -1,
        "filename": "Clorm-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "986549264c5516f43d2d879118ec98d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 92644,
        "upload_time": "2021-08-01T10:40:02",
        "upload_time_iso_8601": "2021-08-01T10:40:02.565631Z",
        "url": "https://files.pythonhosted.org/packages/6f/d0/379baff9603a7732f68dc8ab1e558150e89df3cfb6b06675c751c968e3f3/Clorm-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a35796b0ecd64ea2788fc63ebfc6fd1d1939ce0c17c0cbc2787927aba6775ede",
          "md5": "14082366c5372c0272650c15f18c806d",
          "sha256": "b2d57709e894ea87b76f84b42e18eeefc3dd85eda08e8a05bf88a5b2df31aa9f"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14082366c5372c0272650c15f18c806d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 103019,
        "upload_time": "2021-09-16T07:12:05",
        "upload_time_iso_8601": "2021-09-16T07:12:05.108523Z",
        "url": "https://files.pythonhosted.org/packages/a3/57/96b0ecd64ea2788fc63ebfc6fd1d1939ce0c17c0cbc2787927aba6775ede/Clorm-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7577f1ffbfffae6b334169be0caf7d65d27267f049c6c589b58e40791fb90346",
          "md5": "c1c86768fbc551599820e8751bba80d7",
          "sha256": "493ea087e35c25fb6f6848aae45ea44ae2153bf02b32f829d027288919006797"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c1c86768fbc551599820e8751bba80d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 96226,
        "upload_time": "2021-09-16T07:12:07",
        "upload_time_iso_8601": "2021-09-16T07:12:07.176365Z",
        "url": "https://files.pythonhosted.org/packages/75/77/f1ffbfffae6b334169be0caf7d65d27267f049c6c589b58e40791fb90346/Clorm-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4ee9b142cf8c35fefa559a5f9b878be2d9462a108541c06241bcc04fb3bb775",
          "md5": "1dd1152ba54a83f846873fa207106234",
          "sha256": "a0e276a8f30d0e941e42334de319648984f2b0e2c357ca569390bd88dc46a08e"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1dd1152ba54a83f846873fa207106234",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 107531,
        "upload_time": "2021-09-29T05:37:45",
        "upload_time_iso_8601": "2021-09-29T05:37:45.353776Z",
        "url": "https://files.pythonhosted.org/packages/a4/ee/9b142cf8c35fefa559a5f9b878be2d9462a108541c06241bcc04fb3bb775/Clorm-1.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7abdcacc59d80f42712b8eadf777c9da0246acdfe70bc9e64e108a1d29e757ca",
          "md5": "fac61b1d10d54fb6a7c9f64cd9d6cd12",
          "sha256": "d07e0b7baa79c8962ad51a2991fd2eaee1777395a0ca3f83ce5010c4fbf4e696"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fac61b1d10d54fb6a7c9f64cd9d6cd12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 100550,
        "upload_time": "2021-09-29T05:37:47",
        "upload_time_iso_8601": "2021-09-29T05:37:47.087555Z",
        "url": "https://files.pythonhosted.org/packages/7a/bd/cacc59d80f42712b8eadf777c9da0246acdfe70bc9e64e108a1d29e757ca/Clorm-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0057ff4543dcb10a4a5aaf1d1c7fe761fa0417f43b51aa4feb626ffdbeaba9ef",
          "md5": "aec75ecce2af0a0e2262761d73a31921",
          "sha256": "00d2afda79084fa6b86b71504c5b91347c4cf5c1b221b555d2e6f3534a368dd1"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aec75ecce2af0a0e2262761d73a31921",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 107940,
        "upload_time": "2021-10-20T12:02:30",
        "upload_time_iso_8601": "2021-10-20T12:02:30.438287Z",
        "url": "https://files.pythonhosted.org/packages/00/57/ff4543dcb10a4a5aaf1d1c7fe761fa0417f43b51aa4feb626ffdbeaba9ef/Clorm-1.3.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2476743473f0009e203f32b6a91922c2aa2cdba2dca34dda364e4608015c191",
          "md5": "28eead508203f07892e4560230cd912e",
          "sha256": "ab104bdfdb0935cc49eafa4aaeefc4f4272bcac9bcd1c8f6158b18708c2e7bc7"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "28eead508203f07892e4560230cd912e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 106657,
        "upload_time": "2021-10-20T12:02:32",
        "upload_time_iso_8601": "2021-10-20T12:02:32.142457Z",
        "url": "https://files.pythonhosted.org/packages/f2/47/6743473f0009e203f32b6a91922c2aa2cdba2dca34dda364e4608015c191/Clorm-1.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da2ab8351bf9ae72619f8bb94ea4f975c62ac576c67b9beb99f9a4c6a56acbbd",
          "md5": "f18576c71daaab8eac7426556e96e468",
          "sha256": "2359f0dab0495374d7665983adb58caa26ec75d6af7a7485f293e5865923afc3"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f18576c71daaab8eac7426556e96e468",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 108390,
        "upload_time": "2021-10-26T23:21:59",
        "upload_time_iso_8601": "2021-10-26T23:21:59.540831Z",
        "url": "https://files.pythonhosted.org/packages/da/2a/b8351bf9ae72619f8bb94ea4f975c62ac576c67b9beb99f9a4c6a56acbbd/Clorm-1.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4ad80aeaa8a10c97d911cb83013797c0284dd47b65826e282c421194a73dc6d",
          "md5": "7a3b4feb701ae4d57d12df983aed1b38",
          "sha256": "d2ffb76fb6d606a1add54fc767b74c70b811dbed46cef8fc8637012e81ad2aca"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7a3b4feb701ae4d57d12df983aed1b38",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 107076,
        "upload_time": "2021-10-26T23:22:01",
        "upload_time_iso_8601": "2021-10-26T23:22:01.470579Z",
        "url": "https://files.pythonhosted.org/packages/b4/ad/80aeaa8a10c97d911cb83013797c0284dd47b65826e282c421194a73dc6d/Clorm-1.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.4.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "460cdf85bbed427c51546202580309d42e816c97551eaebf763130b24e90a3ee",
          "md5": "f7c458bb8d232c298279ba2c4af3d0eb",
          "sha256": "519602126a9faa4c35ff9604c077fba535eb3d22dfbf903202a49f61e1861ed0"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.4.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7c458bb8d232c298279ba2c4af3d0eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 108867,
        "upload_time": "2022-01-09T22:54:53",
        "upload_time_iso_8601": "2022-01-09T22:54:53.952087Z",
        "url": "https://files.pythonhosted.org/packages/46/0c/df85bbed427c51546202580309d42e816c97551eaebf763130b24e90a3ee/Clorm-1.3.4.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7ee4eaa8323548904d8bcb25945624fc05859c0ffd742bb1f015846ce9ede37",
          "md5": "0c40c34bdcdf4781dfdfb06ab82807c6",
          "sha256": "e31a2ae18da15236db37f95a9bc2e9a954e390c30389141bea4e7e96751bb807"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.4.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "0c40c34bdcdf4781dfdfb06ab82807c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 107498,
        "upload_time": "2022-01-09T22:54:55",
        "upload_time_iso_8601": "2022-01-09T22:54:55.381830Z",
        "url": "https://files.pythonhosted.org/packages/c7/ee/4eaa8323548904d8bcb25945624fc05859c0ffd742bb1f015846ce9ede37/Clorm-1.3.4.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1eaa44204ab796dbe926f2d3d1141a86e5d7272fc1efc2e05fec63d64492c5bb",
          "md5": "6ebb451e41f56e6d06b1040354508967",
          "sha256": "f6fc974c57d7e16737ec15bebfa07381adcc0cff485987024f4722ec27ccf029"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ebb451e41f56e6d06b1040354508967",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 108797,
        "upload_time": "2022-01-09T23:25:57",
        "upload_time_iso_8601": "2022-01-09T23:25:57.606781Z",
        "url": "https://files.pythonhosted.org/packages/1e/aa/44204ab796dbe926f2d3d1141a86e5d7272fc1efc2e05fec63d64492c5bb/Clorm-1.3.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b525e193be39f8c8d83f1b6097a23d331a66016a653fedbda36849190abb01a",
          "md5": "4c30a4dcd21b419ab83e00bf0bdd708d",
          "sha256": "a19598404cbe7f79312e82bd0915737af4d2be50609431115c876fe23317594a"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4c30a4dcd21b419ab83e00bf0bdd708d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 107489,
        "upload_time": "2022-01-09T23:25:59",
        "upload_time_iso_8601": "2022-01-09T23:25:59.562276Z",
        "url": "https://files.pythonhosted.org/packages/7b/52/5e193be39f8c8d83f1b6097a23d331a66016a653fedbda36849190abb01a/Clorm-1.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e019974cea728ff47e61af312068becd1f32c723eddbfbc195139b35588e9160",
          "md5": "bd2bcd079dfdb7701f973f4ec3766e2b",
          "sha256": "c229b2a12c86b13b97229cb35b7c212fde4e26d7b100b20eeba125f3c6a0f04c"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd2bcd079dfdb7701f973f4ec3766e2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 135337,
        "upload_time": "2022-01-25T11:51:59",
        "upload_time_iso_8601": "2022-01-25T11:51:59.485999Z",
        "url": "https://files.pythonhosted.org/packages/e0/19/974cea728ff47e61af312068becd1f32c723eddbfbc195139b35588e9160/Clorm-1.3.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b620fe7bffd8baa6ab5d83e4319fec07f9ae66c92995a77cd3d1c2de9319c96",
          "md5": "aba4b06d0da1a632e6f7925d30e400c1",
          "sha256": "4acbec9d7ab8e8697788d669b7af1150f10e571eaa568d3385633cbec76e4f25"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "aba4b06d0da1a632e6f7925d30e400c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 133852,
        "upload_time": "2022-01-25T11:52:01",
        "upload_time_iso_8601": "2022-01-25T11:52:01.875568Z",
        "url": "https://files.pythonhosted.org/packages/9b/62/0fe7bffd8baa6ab5d83e4319fec07f9ae66c92995a77cd3d1c2de9319c96/Clorm-1.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "282da43f29cfed63a12ac4bf1651310785419ad28065d056f569fe17df415949",
          "md5": "78c519866763932bfe25b193c05e3418",
          "sha256": "58a1fe9d10102ebe3d4e48b5b400e9e40d3ee65d0bb71adc9ae6705f50d6a2bd"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "78c519866763932bfe25b193c05e3418",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 135918,
        "upload_time": "2022-02-02T10:21:42",
        "upload_time_iso_8601": "2022-02-02T10:21:42.693427Z",
        "url": "https://files.pythonhosted.org/packages/28/2d/a43f29cfed63a12ac4bf1651310785419ad28065d056f569fe17df415949/Clorm-1.3.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c95168e6492c74b3a6cb0771f50e35dba4bd46b8e0dd88212046c7b2dfe3d93",
          "md5": "4ccfe6bd8ca888b295b8a188320eebe4",
          "sha256": "42c1f8c8d87dc6fd73896e4e91f9e2c1cc978d9a888644e6eb6bdcca9c2cde92"
        },
        "downloads": -1,
        "filename": "Clorm-1.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "4ccfe6bd8ca888b295b8a188320eebe4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 134438,
        "upload_time": "2022-02-02T10:21:44",
        "upload_time_iso_8601": "2022-02-02T10:21:44.045608Z",
        "url": "https://files.pythonhosted.org/packages/7c/95/168e6492c74b3a6cb0771f50e35dba4bd46b8e0dd88212046c7b2dfe3d93/Clorm-1.3.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2af8f9a00154e07f7143d83b6fddccdf4d2dcf13a3f94de75653e8c398a7c09c",
          "md5": "a44d23e85522764bcb576feed93c1c81",
          "sha256": "b1cf14639a0c1ea3a9c27f095d7c3d00eb25f6a99bbb1246bee2a52a8be61697"
        },
        "downloads": -1,
        "filename": "Clorm-1.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a44d23e85522764bcb576feed93c1c81",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 145743,
        "upload_time": "2022-05-30T04:02:43",
        "upload_time_iso_8601": "2022-05-30T04:02:43.821304Z",
        "url": "https://files.pythonhosted.org/packages/2a/f8/f9a00154e07f7143d83b6fddccdf4d2dcf13a3f94de75653e8c398a7c09c/Clorm-1.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56ba50ca746fbf122e54073adfdb3e5a70cfe74041b392ce1bdbde5e585611b0",
          "md5": "37d86faf92dc960166ee7e039986f290",
          "sha256": "0c36b93bbb610daf0d43cf10419ef3af10b6c7626b945c5178c0f27697ba3483"
        },
        "downloads": -1,
        "filename": "Clorm-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "37d86faf92dc960166ee7e039986f290",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 143662,
        "upload_time": "2022-05-30T04:02:45",
        "upload_time_iso_8601": "2022-05-30T04:02:45.955604Z",
        "url": "https://files.pythonhosted.org/packages/56/ba/50ca746fbf122e54073adfdb3e5a70cfe74041b392ce1bdbde5e585611b0/Clorm-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0b5b1201b8e17e196101caa9a16afd7a089e4ae325968c4d0c71fedc0c0432c",
          "md5": "a253ebba18456940cfaa69d6d490fdf8",
          "sha256": "651663e0675cea4451403789705d16d9132f1ddceea8ec4219f7f47c2cb8e050"
        },
        "downloads": -1,
        "filename": "Clorm-1.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a253ebba18456940cfaa69d6d490fdf8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 145746,
        "upload_time": "2022-09-14T12:25:30",
        "upload_time_iso_8601": "2022-09-14T12:25:30.295310Z",
        "url": "https://files.pythonhosted.org/packages/c0/b5/b1201b8e17e196101caa9a16afd7a089e4ae325968c4d0c71fedc0c0432c/Clorm-1.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d044d85b6a628b4abc35a97bcd8246d235dd01315e94b7ceefefcf844913ed7d",
          "md5": "21812f3fee7efff1ab004a2d0bb07315",
          "sha256": "ca6790fe9186da3d97c8f4797104eed4fda0cc462869fe52da30fbe1e222b203"
        },
        "downloads": -1,
        "filename": "Clorm-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "21812f3fee7efff1ab004a2d0bb07315",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 143643,
        "upload_time": "2022-09-14T12:25:31",
        "upload_time_iso_8601": "2022-09-14T12:25:31.980205Z",
        "url": "https://files.pythonhosted.org/packages/d0/44/d85b6a628b4abc35a97bcd8246d235dd01315e94b7ceefefcf844913ed7d/Clorm-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d441997e3f830f35fe60185c9da91e953a2d9881d38e071b7c7aa5304235d01",
          "md5": "928e56f1ddd518bf8d95031fe28c1d54",
          "sha256": "15c5ff9259fbd7e3050329ffbfaf4e97483de83cd34042012c208c46181b6b04"
        },
        "downloads": -1,
        "filename": "Clorm-1.4.1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "928e56f1ddd518bf8d95031fe28c1d54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 145815,
        "upload_time": "2022-10-11T20:43:42",
        "upload_time_iso_8601": "2022-10-11T20:43:42.105970Z",
        "url": "https://files.pythonhosted.org/packages/2d/44/1997e3f830f35fe60185c9da91e953a2d9881d38e071b7c7aa5304235d01/Clorm-1.4.1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a4444d0f898646abcc94d59365cc45dadfceabf1401e4b1024ac51ce594f97c",
          "md5": "db32ded2ee2dfee6028f0f3cf2d29a26",
          "sha256": "312b27325fe58d7e0253e902c1978b732aef2bb0532141833d37337181b1b093"
        },
        "downloads": -1,
        "filename": "Clorm-1.4.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "db32ded2ee2dfee6028f0f3cf2d29a26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 143709,
        "upload_time": "2022-10-11T20:43:44",
        "upload_time_iso_8601": "2022-10-11T20:43:44.116610Z",
        "url": "https://files.pythonhosted.org/packages/3a/44/44d0f898646abcc94d59365cc45dadfceabf1401e4b1024ac51ce594f97c/Clorm-1.4.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d441997e3f830f35fe60185c9da91e953a2d9881d38e071b7c7aa5304235d01",
        "md5": "928e56f1ddd518bf8d95031fe28c1d54",
        "sha256": "15c5ff9259fbd7e3050329ffbfaf4e97483de83cd34042012c208c46181b6b04"
      },
      "downloads": -1,
      "filename": "Clorm-1.4.1.post1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "928e56f1ddd518bf8d95031fe28c1d54",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 145815,
      "upload_time": "2022-10-11T20:43:42",
      "upload_time_iso_8601": "2022-10-11T20:43:42.105970Z",
      "url": "https://files.pythonhosted.org/packages/2d/44/1997e3f830f35fe60185c9da91e953a2d9881d38e071b7c7aa5304235d01/Clorm-1.4.1.post1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a4444d0f898646abcc94d59365cc45dadfceabf1401e4b1024ac51ce594f97c",
        "md5": "db32ded2ee2dfee6028f0f3cf2d29a26",
        "sha256": "312b27325fe58d7e0253e902c1978b732aef2bb0532141833d37337181b1b093"
      },
      "downloads": -1,
      "filename": "Clorm-1.4.1.post1.tar.gz",
      "has_sig": false,
      "md5_digest": "db32ded2ee2dfee6028f0f3cf2d29a26",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 143709,
      "upload_time": "2022-10-11T20:43:44",
      "upload_time_iso_8601": "2022-10-11T20:43:44.116610Z",
      "url": "https://files.pythonhosted.org/packages/3a/44/44d0f898646abcc94d59365cc45dadfceabf1401e4b1024ac51ce594f97c/Clorm-1.4.1.post1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}