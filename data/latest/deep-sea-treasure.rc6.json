{
  "info": {
    "author": "Thomas Cassimon, Reinout Eyckerman",
    "author_email": "thomas.cassimon@uantwerpen.be, reinout.eyckerman@uantwerpen.be",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# DeepSeaTreasure Environment\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.5227091.svg)](https://doi.org/10.5281/zenodo.5227091)\n![animation of submarine search for treasure](/res/Deep-Sea-Treasure-v0.gif \"DeepSeaTreasure v0\")\n\n## Installation\nIn order to get started with this environment, you can install it using the following command:\n```shell\npython3 -m pip install  deep_sea_treasure --upgrade\n```\n\n## Data\nIf you are only interested in obtaining the Pareto-front data, you can find that  on the [data/](data/) folder:\n\n- [2-objective Pareto-front](data/2-objective.json)\n- [3-objective Pareto-front](data/3-objective.json)\n\n## Example\nAfter installing the environment, you can get started using it like this:\n```python\nimport pygame\nimport numpy as np\nimport time\n\nimport deep_sea_treasure\nfrom deep_sea_treasure import DeepSeaTreasureV0\n\n# Make sure experiment are reproducible, so people can use the exact same versions\nprint(f\"Using DST {deep_sea_treasure.__version__.VERSION} ({deep_sea_treasure.__version__.COMMIT_HASH})\")\n\ndst: DeepSeaTreasureV0 = DeepSeaTreasureV0.new(\n\tmax_steps=1000,\n\trender_treasure_values=True\n)\n\ndst.render()\n\nstop: bool = False\ntime_reward: int = 0\n\nwhile not stop:\n\tevents = pygame.event.get()\n\n\taction = (np.asarray([0, 0, 0, 1, 0, 0, 0]), np.asarray([0, 0, 0, 1, 0, 0, 0]))\n\n\tfor event in events:\n\t\tif event.type == pygame.KEYDOWN:\n\t\t\tif event.key == pygame.K_LEFT:\n\t\t\t\taction = (np.asarray([0, 0, 1, 0, 0, 0, 0]), np.asarray([0, 0, 0, 1, 0, 0, 0]))\n\t\t\telif event.key == pygame.K_RIGHT:\n\t\t\t\taction = (np.asarray([0, 0, 0, 0, 1, 0, 0]), np.asarray([0, 0, 0, 1, 0, 0, 0]))\n\t\t\tif event.key == pygame.K_UP:\n\t\t\t\taction = (np.asarray([0, 0, 0, 1, 0, 0, 0]), np.asarray([0, 0, 1, 0, 0, 0, 0]))\n\t\t\telif event.key == pygame.K_DOWN:\n\t\t\t\taction = (np.asarray([0, 0, 0, 1, 0, 0, 0]), np.asarray([0, 0, 0, 0, 1, 0, 0]))\n\n\t\t\tif event.key in {pygame.K_ESCAPE}:\n\t\t\t\tstop = True\n\n\t\tif event.type == pygame.QUIT:\n\t\t\tstop = True\n\n\t_, reward, done, debug_info = dst.step(action)\n\ttime_reward += int(reward[1])\n\n\tif done:\n\t\tprint(f\"Found treasure worth {float(reward[0]):5.2f} after {abs(time_reward)} timesteps!\")\n\t\ttime_reward = 0\n\n\tif not stop:\n\t\tdst.render()\n\t\ttime.sleep(0.25)\n\n\tif done:\n\t\tdst.reset()\n```\n\nThis will allow you to play around in the environment, and move the sub around, finding treasures!\n\n## API\nThis section will provide you with a detailed description of the API we offer, and how you can use it.\nIn general, our API matches that of OpenAI's gym package.\nThis library contains 1 environment (`DeepSeaTreasure-v0`) and 2 wrappers (`FuelWrapper` and `VamplewWrapper`).\nIn order to aid reproducibility, we include a package version, and source-code commit hash in the python code (`deep_sea_treasure.__version__.VERSION` and `deep_sea_treasure.__version__.COMMIT_HASH`).\n\nThe environment we created is a modified version of the environment originally showcased in the paper by [Vamplew et al.](https://doi.org/10.1007/s10994-010-5232-5)\nIn our version, the agent can move around by providing an acceleration on both the x- and y- direction.\nBy default, accelerations are discrete, going from -3 to +3. It is the agent's goal to find the largest possible treasure, in the shortest amount of time.\nThis immediately creates a tricky situation for any agent attempting to learn in this environment,\nsince the agent has to deal with two conflicting objectives: time and treasure. This is also reflected in the reward we return from the environment,\nsince this is a 2-element vector (1 element for each objective).\n\n### Wrappers\nWhen wrapping this environment, users should take care to ensure that their `debug_dict` always contains at least an `env` value,\nidentifying the wrapper that created the dict, and an `inner` value, that contains the debugging information from the wrapped environment.\nThis is important if you want to use the renderer to render debug information,\nsince the renderer is only capable of rendering debug information from the core environment itself.\n\n__Example__\n```python\nfrom typing import Any, Dict, Tuple\n\nclass ExampleWrapper:\n\tdef step(self, action) -> Tuple[Any, Any, bool, Dict[str, Any]]:\n\t\tobs, rew, done, debug_dict = self.env.step(action)\n\n\t\tnew_debug_dict = {\n\t\t\t\"env\": self.__class__.__name__\t# = \"ExampleWrapper\"\n\t\t\t\"inner\": debug_dict\n\t\t}\n\n\t\treturn obs, rew, done, new_debug_dict\n```\n### General\nAll environments and wrappers in this repository provide a `reward_space` attribute,\nsimilar to the `observation_space` and `action_space` attributes normally present in gym environments.\nThe main purpose behind this is to allow an external observer to determine the number of objectives.\n\n\n### [`DeepSeaTreasureV0`](deep_sea_treasure/deep_sea_treasure_v0.py)\n```python\nfrom deep_sea_treasure import DeepSeaTreasureV0\n```\nThis is the core environment, creation is handled by the `new()` static method.\nThis is the recommended way of creating environments, since it provides meaningful arguments for changing the various settings for the environment.\nBeyond this, there is also a constructor that accepts a dictionary of settings, this was mainly done to retain compatibility with RL frameworks like RLLib.\nInternally, the `new()` method simply fills a dictionary, and delegates to the constructor.\nThe constructor uses JSON schemas along with a couple of extra `assert`s to verify the correctness of a given configuration.\nThe exact schema can be found in [deep_sea_treasure.schema.json](deep_sea_treasure/schema/deep_sea_treasure.schema.json), and is also returned by `DeepSeaTreasureV0.schema()`.\nA copy of the default configuration can be obtained through `DeepSeaTreasureV0.default_config()`.\nThe table below describes the various options offered by the `new()` method.\n\n| Option                    | Type                                  | Meaning |\n| ------------------------- | ------------------------------------- | ------- |\n| `treasure_values`         | `List[List[Union[List[int], float]]]` | This option serves two purposes: It shapes the seabed, and determines the value of each treasure. It is an array of `((x, y), treasure)` tuples.\n| `acceleration_levels`     | `List[int]`                           | This option provides a list of discrete acceleration levels. Each level should be a positive integer number. Upon creation, the numbers with inverted sign will be used for accelerating left and up, while the numbers themselves signify acceleration either right (x) or down (y).\n| `implicit_collision_constraint`\t| `bool`\t\t\t\t\t\t| When this option is enabled, the reward function will be reduced to below its minimum when the submarine causes a collision. This is also reflected in the `reward_space.low`, the values in this array will be 1 below the minimum attainable through normal actions in the environment.\n| `max_steps`               | `int`                                 | The environment has 2 ending conditions: 1. The submarine finds a treasure 2. The maximum number of steps is reached, this option sets the maximum allowed number of steps.\n| `max_velocity`            | `float`                               | The environment limits the absolute value of the submarine's maximum velocity to this number, to prevent overflow-related physics shenanigans from occurring.\n| `render_grid`             | `bool`                                | If this option is enabled, a grid will be shown when rendering the environment, showing the discrete spaces where the submarine can reside.\n| `render_treasure_values`  | `bool`                                | If this option is enabled, the value of each treasure will be rendered on top of the treasure, making the rendering slightly clearer.\n| `theme`                   | `Theme`                               | We allow the customization of the rendering through the use of the `Theme` class, in conjunction with the `DeepSeaTreasureV0Renderer`, this option allows the user to specify the `Theme` to use when rendering, the default `Theme` is returned by `Theme.default()`.\n\nIt is possible to pass the `debug_info` dict that the `step()` method returns back to the `render()` method, this will display some useful debugging information on screen.\n\n#### Action Space\nA tuple of 2, 1-hot encoded actions.\n```python\nTuple[Discrete, Discrete]\n```\nThe first action is the acceleration in the X-dimensions, the second action is the acceleration in the Y-dimensions.\nThe number of available actions for each dimension is `(2 * len(acceleration_levels)) + 1`, since `len(acceleration_levels)` defaults to 3, the default number of available action per dimension is 7.\nThe middle action always indicates a no-op (No acceleration, existing velocity will continue to move the submarine), actions with indices lower than the middle move towards the top-left of the world, actions with indices greater than the middle move towards the bottom-right of the world.\nWhen an action would cause a collision the sub's velocity is set to 0 in both dimensions and no action occurs.\n\n#### Observation Space\n```python\nBox\n```\nThe observation in this environment is a 2 x N matrix, with N equal to `len(treasure_values) + 1`.\nThe first column in the matrix (`obs[:, 0]`) contains the submarine's current velocity.\nThe next N columns contain the submarine's position, relative to each of the treasures.\n\n#### Reward Space\n```python\nBox\n```\nThe reward for this environment is a 2-element vector.\nThe first element (`reward[0]`) contains the treasure reward. This will always be 0, unless the submarine is on a treasure square.\nThe second element (`reward[1]`) contains the time reward, this reward is always -1, unless the submarine is on a treasures square.\n\n### [`FuelWrapper`](deep_sea_treasure/fuel_wrapper.py)\n```python\nfrom deep_sea_treasure import FuelWrapper\n```\nThe `FuelWrapper` is a wrapper for the DeepSeaTreasureV0 environment that adds a third objective, fuel consumption.\nFuel consumption is similar to time, in the sense that the reward for this will be negative at each timestep.\nIt differs from time in the sense that the consumed fuel depends on the action taken.\nAccelerating 1 in either dimension will usually cost 1 fuel, but accelerating 3 usually costs 3 fuel.\nThe addition of this mechanic makes high accelerations followed by coasting an attractive strategy.\nCreation of this wrapper is handled by the `new()` static method.\nThis is the recommended way of creating wrappers, since it provides meaningful arguments for changing the various settings for the environment.\nBeyond this, there is also a constructor that accepts a [`gym.Env`](https://gym.openai.com/docs/#environments) and a dictionary of settings,\nthis was mainly done to retain compatibility with RL frameworks like RLLib.\nInternally, the `new()` method simply fills a dictionary, and delegates to the constructor.\nThe constructor uses JSON schemas along with a couple of extra `assert`s to verify the correctness of a given configuration.\nThe exact schema can be found in [fuel_wrapper.schema.json](deep_sea_treasure/schema/fuel_wrapper.schema.json).\n\n| Option      | Type        | Meaning |\n| ----------- | ----------- | ------- |\n| `fuel_cost` | `List[int]` | The cost of each `acceleration_level` in fuel units. The no-op action is always assumed to consume no fuel. The length of this list should always match the length of the `acceleration_levels` list in the core environment.\n\n#### Action Space\n_Same as DeepSeaTreasureV0._\n\n#### Observation Space\n_Same as DeepSeaTreasureV0._\n\n#### Reward Space\n```python\nBox\n```\nThe reward for this environment is a 3-element vector. The first 2 elements are identical to those in the `DeepSeaTreasureV0` environment.\nThe first element (`reward[0]`) contains the treasure reward. This will always be 0, unless the submarine is on a treasure square.\nThe second element (`reward[1]`) contains the time reward, this reward is always -1, unless the submarine is on a treasures square.\nThe third element (`reward[2]`) contains the fuel reward, this reward reflects the fuel consumed by the last action the agent took.\n\n### [`VamplewWrapper`](deep_sea_treasure/vamplew_wrapper.py)\n```python\nfrom deep_sea_treasure import VamplewWrapper\n```\nThe `VamplewWrapper` is a wrapper intended to undo the modifications we made to the core [`DeepSeaTreasureV0`](deep_sea_treasure/deep_sea_treasure_v0.py) environment.\nIt wraps both the action and observation space, to make sure the environment matches the original setup by [Vamplew et al.](https://doi.org/10.1007/s10994-010-5232-5) exactly.\nThis means that the `VamplewWrapper` has a different action and observation space from the original `DeepSeaTreasureV0` environment.\nThe `VamplewWrapper` can wrap the `FuelWrapper`, but not the other way around, due to action-space incompatibility.\nCreation of this wrapper is handled by the `new()` static method.\nThis is the recommended way of creating wrappers, since it provides meaningful arguments for changing the various settings for the environment.\nBeyond this, there is also a constructor that accepts a [`gym.Env`](https://gym.openai.com/docs/#environments) and a dictionary of settings,\nthis was mainly done to retain compatibility with RL frameworks like RLLib.\nInternally, the `new()` method simply fills a dictionary, and delegates to the constructor.\nThe constructor uses JSON schemas along with a couple of extra `assert`s to verify the correctness of a given configuration.\nThe exact schema can be found in [vamplew_wrapper.schema.json](deep_sea_treasure/schema/vamplew_wrapper.schema.json).\n\n\n| Option        | Type   | Meaning |\n| ------------- | ------ | ------- |\n| `enable_idle` | `bool` | When true, this option enables a 5th action in this environment, idle. This allows the submarine to sit still and do nothing.\n\n#### Action Space\nThe action space for the Vamplew wrapper consists of a single 1-hot encoded action.\nThere are 4 or 5 possible actions to take, depending on how the wrapper was configured:\n- Up\n- Right\n- Down\n- Left\n- (Idle)\n\nActions are specified in this order.\nEach action will cancel out all velocity from the previous action, and make the velocity in the desired direction 1.\n\n\n#### Observation Space\n```python\nBox\n```\nThe observation in this environment is a 2-element vector, containing the submarine's current row and column.\n\n#### Reward Space\n_Same as DeepSeaTreasureV0._\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/imec-idlab/deep-sea-treasure",
    "keywords": "deep,sea,treasure,rl,morl,multi,objective",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "deep-sea-treasure",
    "package_url": "https://pypi.org/project/deep-sea-treasure/",
    "platform": "",
    "project_url": "https://pypi.org/project/deep-sea-treasure/",
    "project_urls": {
      "Homepage": "https://github.com/imec-idlab/deep-sea-treasure",
      "github": "https://github.com/imec-idlab/deep-sea-treasure",
      "zenodo": "https://doi.org/10.5281/zenodo.5227091"
    },
    "release_url": "https://pypi.org/project/deep-sea-treasure/2.0.2/",
    "requires_dist": [
      "gym",
      "jsonschema",
      "numpy (>=1.21)",
      "pygame"
    ],
    "requires_python": ">=3.7",
    "summary": "An environment for testing multi-objective reinforcement learning algorithms.",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12253499,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e4a37e9a4aa682a888aaa0c833747f93520b0a3ff68fb5bc2924a9709ffc9ff",
          "md5": "7994540ed836f354fb439e6c8f77e631",
          "sha256": "e09935972fe14c940510e4675944f29f1d3830c038bf388ba97a3980d98eea6f"
        },
        "downloads": -1,
        "filename": "deep_sea_treasure-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7994540ed836f354fb439e6c8f77e631",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 65150,
        "upload_time": "2021-08-20T13:35:47",
        "upload_time_iso_8601": "2021-08-20T13:35:47.133126Z",
        "url": "https://files.pythonhosted.org/packages/4e/4a/37e9a4aa682a888aaa0c833747f93520b0a3ff68fb5bc2924a9709ffc9ff/deep_sea_treasure-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9163539130848171e919d1cdf2e9343473a48cd4cdc779f8a4424d0299f5b207",
          "md5": "b2cfa40190c65e80a57f3ae41cb46caa",
          "sha256": "617ee2411bfffa1936243af691305e9eb8522c98a79e7fdab60e50e34c431b59"
        },
        "downloads": -1,
        "filename": "deep_sea_treasure-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b2cfa40190c65e80a57f3ae41cb46caa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 61532,
        "upload_time": "2021-08-20T13:35:48",
        "upload_time_iso_8601": "2021-08-20T13:35:48.909547Z",
        "url": "https://files.pythonhosted.org/packages/91/63/539130848171e919d1cdf2e9343473a48cd4cdc779f8a4424d0299f5b207/deep_sea_treasure-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99bcf31d8f7a32279fbd920973a82724dba20a2b053cb64963458734e425464b",
          "md5": "128b8f6e8b3835cb691a1d84be9b20fd",
          "sha256": "3434ba9faaada00299567f0bc47c3b6ac6ac97e6074c6aa78f8d33754e430a19"
        },
        "downloads": -1,
        "filename": "deep_sea_treasure-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "128b8f6e8b3835cb691a1d84be9b20fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 65886,
        "upload_time": "2021-09-02T07:57:53",
        "upload_time_iso_8601": "2021-09-02T07:57:53.570218Z",
        "url": "https://files.pythonhosted.org/packages/99/bc/f31d8f7a32279fbd920973a82724dba20a2b053cb64963458734e425464b/deep_sea_treasure-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0af635b403ef605b1a4a6f8bc2e2de0226ed545261c2ccfd8f164771e3dedea",
          "md5": "7124f52b614c13ebb17eece0a918f233",
          "sha256": "f9195d575cd54559077f0018bad5236caf0d2b0039e21e46beef02ee1a09305d"
        },
        "downloads": -1,
        "filename": "deep_sea_treasure-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7124f52b614c13ebb17eece0a918f233",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 62231,
        "upload_time": "2021-09-02T07:57:55",
        "upload_time_iso_8601": "2021-09-02T07:57:55.137308Z",
        "url": "https://files.pythonhosted.org/packages/f0/af/635b403ef605b1a4a6f8bc2e2de0226ed545261c2ccfd8f164771e3dedea/deep_sea_treasure-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d95c6dafafe19147d5187a55b7b08925dbbf23a6f0c963ed956f0d504ab73369",
          "md5": "b549315be34b1f9f53792b646caad541",
          "sha256": "c53f66ae51147ac2dd62305c9f22fd35b3a942f88e5972356c3363b3f247d04c"
        },
        "downloads": -1,
        "filename": "deep_sea_treasure-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b549315be34b1f9f53792b646caad541",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 65959,
        "upload_time": "2021-09-06T10:09:16",
        "upload_time_iso_8601": "2021-09-06T10:09:16.781798Z",
        "url": "https://files.pythonhosted.org/packages/d9/5c/6dafafe19147d5187a55b7b08925dbbf23a6f0c963ed956f0d504ab73369/deep_sea_treasure-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "766bbe5ba137a7f5f08e8607032821bcaa680e387bdadaaca539fbe23051e280",
          "md5": "d5b66c46e1d8c41eaecd651535dbf86c",
          "sha256": "3aef6b5459a4cf97b6966c141a0422d935c6777362ffd45e611a93cf33392eff"
        },
        "downloads": -1,
        "filename": "deep_sea_treasure-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d5b66c46e1d8c41eaecd651535dbf86c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 62460,
        "upload_time": "2021-09-06T10:09:18",
        "upload_time_iso_8601": "2021-09-06T10:09:18.169006Z",
        "url": "https://files.pythonhosted.org/packages/76/6b/be5ba137a7f5f08e8607032821bcaa680e387bdadaaca539fbe23051e280/deep_sea_treasure-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8fb1f642afb446aaa600c9b7bf97492abc41cd060ab309b576b60e341a8144f",
          "md5": "375488fa39e54a4692cfc6afb9c4fa9b",
          "sha256": "604d517c48496bf90cbf200d6cad0c32636970e78bb5ee822214f71d382b0e31"
        },
        "downloads": -1,
        "filename": "deep_sea_treasure-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "375488fa39e54a4692cfc6afb9c4fa9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 66014,
        "upload_time": "2021-09-24T09:36:34",
        "upload_time_iso_8601": "2021-09-24T09:36:34.726827Z",
        "url": "https://files.pythonhosted.org/packages/a8/fb/1f642afb446aaa600c9b7bf97492abc41cd060ab309b576b60e341a8144f/deep_sea_treasure-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "630930008bd1f00bf948bb7eedff55fe68d40543f23101f994a4a94408d661cf",
          "md5": "5d7373c79d60ea4f215644bf16a34af9",
          "sha256": "d7441eca66636af4e739af8240b572ed63f769e0e11c15ada039da2461b038cf"
        },
        "downloads": -1,
        "filename": "deep_sea_treasure-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5d7373c79d60ea4f215644bf16a34af9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 62479,
        "upload_time": "2021-09-24T09:36:36",
        "upload_time_iso_8601": "2021-09-24T09:36:36.304828Z",
        "url": "https://files.pythonhosted.org/packages/63/09/30008bd1f00bf948bb7eedff55fe68d40543f23101f994a4a94408d661cf/deep_sea_treasure-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e1939c56a441dd266d7117f048b1e742736e05e6da08077d731624cc4b1fcb0",
          "md5": "3d60bace8604d3539a8022f71bc85985",
          "sha256": "f829f349f903692bd8d1e95933f6875843d8c65a55fd16c5d42a22d0cac52971"
        },
        "downloads": -1,
        "filename": "deep_sea_treasure-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d60bace8604d3539a8022f71bc85985",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 66011,
        "upload_time": "2021-11-30T13:17:32",
        "upload_time_iso_8601": "2021-11-30T13:17:32.974941Z",
        "url": "https://files.pythonhosted.org/packages/5e/19/39c56a441dd266d7117f048b1e742736e05e6da08077d731624cc4b1fcb0/deep_sea_treasure-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6d2b71e13ce5f18e3ba4c773a6fb29ede4fe909f9ee699e0c2931a71b738447",
          "md5": "1381807b77c2a38838bbaa13994f8314",
          "sha256": "9c881aeb4eecdb2cbc575a4a61b42662de8df618b7d75c883da2340132749de0"
        },
        "downloads": -1,
        "filename": "deep_sea_treasure-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1381807b77c2a38838bbaa13994f8314",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 62488,
        "upload_time": "2021-11-30T13:17:34",
        "upload_time_iso_8601": "2021-11-30T13:17:34.634133Z",
        "url": "https://files.pythonhosted.org/packages/d6/d2/b71e13ce5f18e3ba4c773a6fb29ede4fe909f9ee699e0c2931a71b738447/deep_sea_treasure-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7582d1bb7c9689cfa3f4b43756632c537efa190267b08b016c1ba65033787e24",
          "md5": "b14351161e4f93fc451582cb9d4d2937",
          "sha256": "da685aa3fbefbc006af4e28857ac226c07acdce7aa0d35308268b2d6317d68e5"
        },
        "downloads": -1,
        "filename": "deep_sea_treasure-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b14351161e4f93fc451582cb9d4d2937",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 66015,
        "upload_time": "2021-12-09T09:02:10",
        "upload_time_iso_8601": "2021-12-09T09:02:10.928032Z",
        "url": "https://files.pythonhosted.org/packages/75/82/d1bb7c9689cfa3f4b43756632c537efa190267b08b016c1ba65033787e24/deep_sea_treasure-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9260b71f0d39e213c49a238817dacb94fb4c441a9f680c19368c9744e0d2454b",
          "md5": "0ad0856c4d4fc9a149e765a84ffa5b5e",
          "sha256": "3451838ec6683d39bc015a19760f5d4e4060aeab26275c76a11b686a2f5a5252"
        },
        "downloads": -1,
        "filename": "deep_sea_treasure-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0ad0856c4d4fc9a149e765a84ffa5b5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 62495,
        "upload_time": "2021-12-09T09:02:12",
        "upload_time_iso_8601": "2021-12-09T09:02:12.409507Z",
        "url": "https://files.pythonhosted.org/packages/92/60/b71f0d39e213c49a238817dacb94fb4c441a9f680c19368c9744e0d2454b/deep_sea_treasure-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7582d1bb7c9689cfa3f4b43756632c537efa190267b08b016c1ba65033787e24",
        "md5": "b14351161e4f93fc451582cb9d4d2937",
        "sha256": "da685aa3fbefbc006af4e28857ac226c07acdce7aa0d35308268b2d6317d68e5"
      },
      "downloads": -1,
      "filename": "deep_sea_treasure-2.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b14351161e4f93fc451582cb9d4d2937",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 66015,
      "upload_time": "2021-12-09T09:02:10",
      "upload_time_iso_8601": "2021-12-09T09:02:10.928032Z",
      "url": "https://files.pythonhosted.org/packages/75/82/d1bb7c9689cfa3f4b43756632c537efa190267b08b016c1ba65033787e24/deep_sea_treasure-2.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9260b71f0d39e213c49a238817dacb94fb4c441a9f680c19368c9744e0d2454b",
        "md5": "0ad0856c4d4fc9a149e765a84ffa5b5e",
        "sha256": "3451838ec6683d39bc015a19760f5d4e4060aeab26275c76a11b686a2f5a5252"
      },
      "downloads": -1,
      "filename": "deep_sea_treasure-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0ad0856c4d4fc9a149e765a84ffa5b5e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 62495,
      "upload_time": "2021-12-09T09:02:12",
      "upload_time_iso_8601": "2021-12-09T09:02:12.409507Z",
      "url": "https://files.pythonhosted.org/packages/92/60/b71f0d39e213c49a238817dacb94fb4c441a9f680c19368c9744e0d2454b/deep_sea_treasure-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}