{
  "info": {
    "author": "Adrien Morison",
    "author_email": "adrien.morison@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "parspace\n========\n\nThis module is a simple tool to automatically explore a parameter space.\n\nYou can install parspace with ``pip``::\n\n    $ python3 -m pip install -U --user parspace\n\nUsage as a decorator\n--------------------\n\nThis package provides a class that can be used to aumatically run a function\nover all possible combinations of a given parameter space.\n\nSay that you have a problem controlled by two parameters: an aspect ratio\n``asp`` and a density ``density``.  The following example shows how to use\n``ParSpace`` to automatically explore every combination of the requested values\nfor these two parameters.  If you have a function (here called ``launch_simu``)\nthat performs the desired task for a given value of these two parameters, you\nmerely have to use ``ParSpace`` as a decorator on that function.\n\n.. code:: python\n\n    from parspace import ParSpace\n\n\n    @ParSpace(asp=[0.5, 1, 2],\n              density=[1, 10])\n    def launch_simu(asp, density):\n        print(f\"aspect ratio {asp} and density {density}\")\n\n\n    launch_simu()\n\nThis code will print the following on screen::\n\n    aspect ratio 0.5 and density 1\n    aspect ratio 0.5 and density 10\n    aspect ratio 1 and density 1\n    aspect ratio 1 and density 10\n    aspect ratio 2 and density 1\n    aspect ratio 2 and density 10\n\nIn real use cases, ``launch_simu`` could e.g. perform the desired simulation or\nsubmit a job on a supercomputer.  The order of arguments of ``launch_simu``\ndoes not matter, only their names.  In other words, if its signature is instead\n``def launch_simu(density, asp)``, you would obtain the same result. On the\nother hand, defining it as ``def launch_simu(aspect, density)`` would result in\na ``TypeError`` when calling the function as the ``asp`` argument fed to\n``ParSpace`` does not match any argument of ``launch_simu``.\n\nIf you have a large number of parameters, you might prefer defining\n``launch_simu`` as taking a dictionary of keyword arguments.  Parameter names\nand values are then the keys and values of that dictionary.\n\n.. code:: python\n\n    from parspace import ParSpace\n\n\n    @ParSpace(asp=[0.5, 1, 2],\n              density=[1, 10])\n    def launch_simu(**pars):\n        asp = pars['asp']\n        density = pars['density']\n        print(f\"aspect ratio {asp} and density {density}\")\n\n\n    launch_simu()\n\n\nIterating through returned values\n---------------------------------\n\nIf you care about the returned values of the wrapped function rather than on\nits side effects, you can iterate over the decorated object as shown below.\n\n.. code:: python\n\n    from parspace import ParSpace\n\n\n    @ParSpace(asp=[0.5, 1, 2],\n              density=[1, 10])\n    def calc_mass(asp, density):\n        return asp * density\n\n\n    for pars, mass in calc_mass:\n        asp = pars['asp']\n        density = pars['density']\n        print(f\"Mass for aspect {asp} at density {density}: {mass}\")\n\n\nNote that iterating through a bare ``ParSpace`` instance yields the parameters\ndictionary.\n\n.. code:: python\n\n    from parspace import ParSpace\n\n\n    space = ParSpace(asp=[0.5, 1, 2],\n                     density=[1, 10])\n    for pars in space:\n        print(\"aspect ratio {asp} and density {density}\".format(**pars))\n\n\nExploring the same space on several functions\n---------------------------------------------\n\nProvided that the iterables used to build the ``ParSpace`` instance can be\niterated through any number of times (mind that generators can only be iterated\nthrough *once*), you can use that instance on several functions as follow.\n\n.. code:: python\n\n    from parspace import ParSpace\n\n\n    space = ParSpace(asp=[0.5, 1, 2],\n                     density=[1, 10])\n\n\n    @space\n    def launch_simu(asp, density):\n        print(f\"aspect ratio {asp} and density {density}\")\n\n\n    launch_simu()\n\n\n    for pars, mass in space(lambda asp, density: asp * density):\n        asp = pars['asp']\n        density = pars['density']\n        print(f\"Mass for aspect {asp} at density {density}: {mass}\")\n\n\nRealistic example of a script submitting jobs\n---------------------------------------------\n\nThis script shows a simplistic but realistic example of what ``ParSpace``\nenables you to do.  This script is written for a particular system and is\ntherefore unlikely to work for you as-is but adapting it to your use case\nshould be a fairly simple task.  The function ``submit_jobs`` defines what\nshould be done for one specific job and its decorated version automatically\nexplore the desired parameter space.\n\n.. code:: python\n\n    #!/usr/bin/env python3\n    \"\"\"Submit jobs on a PBS enabled cluster.\n\n    This script is for demonstration purpose only and offers no guarantee, please\n    adapt it to your use case.\n    \"\"\"\n    from functools import lru_cache\n    from pathlib import Path\n    import json\n    import subprocess\n    import textwrap\n\n    from parspace import ParSpace\n\n\n    QSUB = '/usr/local/bin/qsub'\n    BATCH = textwrap.dedent(\"\"\"\\\n        #!/bin/bash\n        #PBS -N jobname\n        #PBS -l nodes=1:ppn=8\n        #PBS -q queuename\n        #PBS -j oe\n        #PBS -V\n        cd {work_dir}\n        mpirun -np 8 /path/to/executable > out.log 2> err.log\n        sync\n        exit\n        \"\"\")\n    ROOT = Path().resolve(strict=True)\n\n\n    # If you need to compute an entry parameter that depends only on a subset of\n    # all the parameters you explore, you might want to cache its result if the\n    # computation is expensive.  This isn't necessary in this simplistic case and\n    # is only for illustrative purposes.\n    @lru_cache(maxsize=None)\n    def n_horiz(aspect_ratio):\n        \"\"\"Compute grid size for a given aspect ratio.\"\"\"\n        return 64 * aspect_ratio\n\n\n    @ParSpace(logra=range(4, 7),\n              aspect_ratio=[2, 4, 8])\n    def submit_jobs(**pars):\n        \"\"\"Create run directory, parameter file, and submit a job.\"\"\"\n        case_name = 'ra_1e{logra}__asp_{aspect_ratio}'.format(**pars)\n        case_dir = ROOT / case_name\n\n        # create run directory, in this case a subdirectory \"output\"\n        # is also created.\n        (case_dir / 'output').mkdir(parents=True, exist_ok=True)\n\n        # generate par file, this assumes a JSON parameter file\n        asp = pars['aspect_ratio']\n        par_content = dict(rayleigh=10**pars['logra'],\n                           aspect_ratio=pars['aspect_ratio'],\n                           ny=n_horiz(asp))\n        par_file = case_dir / 'par.json'\n        with par_file.open('w') as pstream:\n            json.dump(par_content, pstream)\n\n        batch_content = BATCH.format(work_dir=case_dir)\n        batch_file = case_dir / 'batch'\n        batch_file.write_text(batch_content)\n\n        job_sub = subprocess.run((QSUB, str(batch_file)),\n                                 capture_output=True, check=True, text=True)\n        job_id = job_sub.stdout.splitlines()[-1].split('.')[0]\n        print(f\"Case {case_name} treated by {job_id}\")\n\n\n    if __name__ == \"__main__\":\n        submit_jobs()\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/amorison/parspace",
    "keywords": "",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "parspace",
    "package_url": "https://pypi.org/project/parspace/",
    "platform": "",
    "project_url": "https://pypi.org/project/parspace/",
    "project_urls": {
      "Homepage": "https://github.com/amorison/parspace"
    },
    "release_url": "https://pypi.org/project/parspace/1.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Parameter space exploration utiliy.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8732795,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a1be2b18dee88fa4993697681281d13af35443cbe32f26c29b70b3152664f889",
          "md5": "7301c46dbd5ad9358d6847751629a51a",
          "sha256": "6d493a24e5058ed5e085a2c4034b4794015370ec57c6c3360a219fe81c9a5a38"
        },
        "downloads": -1,
        "filename": "parspace-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7301c46dbd5ad9358d6847751629a51a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 3431,
        "upload_time": "2020-11-14T18:03:33",
        "upload_time_iso_8601": "2020-11-14T18:03:33.708462Z",
        "url": "https://files.pythonhosted.org/packages/a1/be/2b18dee88fa4993697681281d13af35443cbe32f26c29b70b3152664f889/parspace-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ccfc68040b06bf13aac7913f58b55147a31e23cb1e6b646969500e45a53a931",
          "md5": "71a3d561755eef6bf0dcf96dde2c03cb",
          "sha256": "4b5b81ee2cbbb62da46c5ce04ca64e1bb4ea627ecb3f23e536c2055c36bbffee"
        },
        "downloads": -1,
        "filename": "parspace-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "71a3d561755eef6bf0dcf96dde2c03cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 3316,
        "upload_time": "2020-11-14T18:03:34",
        "upload_time_iso_8601": "2020-11-14T18:03:34.948870Z",
        "url": "https://files.pythonhosted.org/packages/5c/cf/c68040b06bf13aac7913f58b55147a31e23cb1e6b646969500e45a53a931/parspace-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f42e14c45f2f5433edd8f01cf2da40a9465f84f173476373e2d6b2be80316e7",
          "md5": "5c627fac51359ef80df8ab5399b08896",
          "sha256": "646d75097fa58e63b0169252d0c9d3cf0a82ec5853fee199d3a47a386b507d19"
        },
        "downloads": -1,
        "filename": "parspace-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c627fac51359ef80df8ab5399b08896",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5032,
        "upload_time": "2020-11-23T23:13:18",
        "upload_time_iso_8601": "2020-11-23T23:13:18.216491Z",
        "url": "https://files.pythonhosted.org/packages/4f/42/e14c45f2f5433edd8f01cf2da40a9465f84f173476373e2d6b2be80316e7/parspace-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94038efebd81f2b82b514e103470085c3fb05110a7468029897f1b3bed7c0b87",
          "md5": "c32ab9f16fc1af28d179fbc67236414e",
          "sha256": "404f8622294594ab9f22b92ef8e486f8b4e3323c2c309416ee4d371e1610f9fb"
        },
        "downloads": -1,
        "filename": "parspace-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c32ab9f16fc1af28d179fbc67236414e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5501,
        "upload_time": "2020-11-23T23:13:19",
        "upload_time_iso_8601": "2020-11-23T23:13:19.795700Z",
        "url": "https://files.pythonhosted.org/packages/94/03/8efebd81f2b82b514e103470085c3fb05110a7468029897f1b3bed7c0b87/parspace-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4f42e14c45f2f5433edd8f01cf2da40a9465f84f173476373e2d6b2be80316e7",
        "md5": "5c627fac51359ef80df8ab5399b08896",
        "sha256": "646d75097fa58e63b0169252d0c9d3cf0a82ec5853fee199d3a47a386b507d19"
      },
      "downloads": -1,
      "filename": "parspace-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5c627fac51359ef80df8ab5399b08896",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5032,
      "upload_time": "2020-11-23T23:13:18",
      "upload_time_iso_8601": "2020-11-23T23:13:18.216491Z",
      "url": "https://files.pythonhosted.org/packages/4f/42/e14c45f2f5433edd8f01cf2da40a9465f84f173476373e2d6b2be80316e7/parspace-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94038efebd81f2b82b514e103470085c3fb05110a7468029897f1b3bed7c0b87",
        "md5": "c32ab9f16fc1af28d179fbc67236414e",
        "sha256": "404f8622294594ab9f22b92ef8e486f8b4e3323c2c309416ee4d371e1610f9fb"
      },
      "downloads": -1,
      "filename": "parspace-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c32ab9f16fc1af28d179fbc67236414e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5501,
      "upload_time": "2020-11-23T23:13:19",
      "upload_time_iso_8601": "2020-11-23T23:13:19.795700Z",
      "url": "https://files.pythonhosted.org/packages/94/03/8efebd81f2b82b514e103470085c3fb05110a7468029897f1b3bed7c0b87/parspace-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}