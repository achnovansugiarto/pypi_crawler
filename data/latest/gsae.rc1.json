{
  "info": {
    "author": "Egbert Castro",
    "author_email": "Egbert Castro <egbert.castro@yale.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "\n<div align=\"center\">    \n \n# Uncovering the Folding Landscape of RNA Secondary Structure with Deep Graph Embeddings\n<!-- \n[![Paper](http://img.shields.io/badge/paper-arxiv.2006.06885.svg)](https://arxiv.org/abs/2006.06885)\n\n[![Conference](http://img.shields.io/badge/ICLR-GRL+-2020-4b44ce.svg)](https://papers.nips.cc/book/advances-in-neural-information-processing-systems-31-2018)  \n -->\n\n[![Paper](https://img.shields.io/badge/arxiv-2006.06885-B31B1B.svg)](https://arxiv.org/abs/2006.06885)\n[![Paper](https://img.shields.io/badge/ieee-bigdata2020-blue)](https://ieeexplore.ieee.org/document/9378305)\n\n\n\n<!--  \nConference   \n-->   \n</div>\n \n## Visual Description   \n![visual overview](./assets/overview.png)\n\n## Installation\n```\npip install GSAE\n```   \n\n\nNOTE: You will also need to install PyTorch Geometric. Instructions for doing so can be found [here](https://pytorch-geometric.readthedocs.io/en/latest/notes/installation.html)\n \n\n## Training the models\n\nTo train the GSAE:\n\n    python train_gsae.py\n\nTo train the GAE or GVAE models:\n\n    python train_gnn.py\n\nThe scattering inversion network if found ins \n\n    gsae/models/inv_scattering.py\n \n\n\n \n # Data Processing Workflow\n\n## 1. Loading data from RNAfold\n---\n\n\nFrom RNAfold, we get a file like the following\n\n    rnafold_output.txt\n\nwhich inside looks like\n\n    GGCGUUUUCGCCUUUUGGCGAUUUUUAUCGCC -14.20  10.00\n    (.((...(((((....))))).......)).)  -5.50\n    (.(((..(((((....))))).....).)).)  -4.20\n    ((.....(((((....))))).........))  -5.90\n    ((.((..(((((....))))).....))..))  -5.60\n    ((.(...(((((....))))).......).))  -6.40\n    ((.(.(.(((((....))))).....).).))  -4.20\n    ((.((..(((((....))))).....).).))  -5.10\n    (((....(((((....))))).(...)..)))  -4.30\n    (((....(((((....)))))(....)..)))  -5.30\n\n\nRNAfold output files used in the paper are included in \n\n    data/raw_data/\n\n\nWe can use `rnafold2arrays.py` in `gsae/data_processing` to convert this text file to\n\n- a csv file containing adjacency matrices for each fold (`adjmats_<datestamp>.csv`)\n- a csv file containing the energy scalar for each structure (`energies_<datestamp>.csv`)\n- a text file with the rna sequence (`sequence_<datestamp>.txt`)\n\n`rnafold2arrays.py` usage:\n\n    usage: rnafold2arrays.py [-h] --data DATA --outname OUTNAME\n\n    optional arguments:\n    -h, --help         show this help message and exit\n    --data DATA        RNAfold txt file output to be converted\n    --outname OUTNAME  base name for the outputs\n\nsample usage:\n\n    > python rnafold2arrays.py --data seq4_rnafold_out.txt --outname seq4\n\n\nWhich will produce the following files\n\n    seq4_adjmat_2020-03-04-03.csv\n    seq4_energies_2020_03-04-03.csv\n    seq4_sequence_2020-03-04-03.txt\n\n\n#### If you would like to skip this step, you can also download the processed files from this [box link](https://yale.box.com/s/3r539p1yp6aencpv8hlyexolq27yudpm).  The file is named **processed_data.tar.gz**\n\n\n## 2. Converting adjacency data to scattering coefficients\n---\n\n\nOnce we have the adjacency matrices of the structures we're interested in, we can convert them using scattering transforms to a new, more informative representation\n\nHere we will use diracs centered at each node (i.e. the identity matrix) as our graph signals.\n\nTo convert them, we will use `adj2scatcoeffs.py`\n\n    usage: adj2scatcoeffs.py [-h] --data DATA --outname OUTNAME [--pcs PCS]\n\n    optional arguments:\n    -h, --help         show this help message and exit\n    --data DATA        file (npy or csv) with adjacency matrices\n    --outname OUTNAME  base name for output\n    --pcs PCS          how many principle components to use (if 0, then use raw scattering coefficients)\n\nsample usage:\n\n    > python adj2scatcoeffs.py --data seq4_adjmat_2020-03-04-03.csv --outname seq_4\n\n#### If you would like to skip this step, you can also download the processed files from this [box link](https://yale.box.com/s/3r539p1yp6aencpv8hlyexolq27yudpm). The file is named **scattering_coeffs.tar.gz**\n## 3. Create Splits\n---\n\n\nNow that we've generated all the data our model will use, we can now create the train/test splits\n\nTo convert them, we will use `create_splits.py`\n\n    usage: create_splits.py [-h] --adjs ADJS --coeffs COEFFS --energies ENERGIES --outname OUTNAME\n\n    optional arguments:\n    -h, --help           show this help message and exit\n    --adjs ADJS          file with adjacency matrices\n    --coeffs COEFFS      file with scattering coeffs\n    --energies ENERGIES  file with energy values\n    --outname OUTNAME    base name for output\n\nThe output set of files can be then stored in a directory which we will later refer to as `ROOT_DIR` for the reason mentioned below\n\n#### If you would like to skip this step, you can also download the processed files from this [box link](https://yale.box.com/s/3r539p1yp6aencpv8hlyexolq27yudpm). The file is named **final_splits.tar.gz**\n\n## IMPORTANT: Data loading for models\n\nIn order to ensure that the training scripts in the model files function correctly, the `ROOT_DIR` variable at the top of `load_splits.py` to where the train/test split is located \n\n\n## Data\n\nData for the 4 sequences used in the paper are located in data/\n\n\n    └── raw_data\n        ├── hiv_tar\n        │   ├── hiv_tar_sequence.txt\n        │   ├── hivtar_100k_subp_n_052020.txt\n        ├── hob_seq3\n        │   ├── seq3_100k_subp_n_052020.txt\n        │   └── seq3_sequence.txt\n        ├── hob_seq4\n        │   ├── seq4_100k_subp_n_052020.txt\n        │   └── seq4_sequence.txt\n        └── tebown\n            ├── teb_100k_subp_n_052020.txt\n            └── tebown_sequence.txt\n\n### Citation   \n```\n@inproceedings{castro2020uncovering,\n  title={Uncovering the Folding Landscape of RNA Secondary Structure Using Deep Graph Embeddings},\n  author={Castro, Egbert and Benz, Andrew and Tong, Alexander and Wolf, Guy and Krishnaswamy, Smita},\n  booktitle={2020 IEEE International Conference on Big Data (Big Data)},\n  pages={4519--4528},\n  year={2020},\n  organization={IEEE}\n}\n```   \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KrishnaswamyLab/GSAE",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "GSAE",
    "package_url": "https://pypi.org/project/GSAE/",
    "platform": null,
    "project_url": "https://pypi.org/project/GSAE/",
    "project_urls": {
      "Bug Tracker": "https://github.com/KrishnaswamyLab/GSAE/issues",
      "Homepage": "https://github.com/KrishnaswamyLab/GSAE"
    },
    "release_url": "https://pypi.org/project/GSAE/0.2/",
    "requires_dist": [
      "argparse",
      "numpy (>=1.18.4)",
      "scikit-learn (>=0.23.1)",
      "scipy (>=1.4.1)",
      "torch (>=1.5.0)",
      "pytorch-lightning (>=1.0.3)"
    ],
    "requires_python": ">=3.7",
    "summary": "A small example package",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15981644,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2c28fa46e91ac59258047250441f8c1af574eb288df65b46c7f2b4d8b75f30f",
          "md5": "bc52bfec29b767825197ea37d96f3072",
          "sha256": "0f22a04433e8fbbc96604207e513263f01544638782485dd41a2d7900ea18f84"
        },
        "downloads": -1,
        "filename": "GSAE-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc52bfec29b767825197ea37d96f3072",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 21046,
        "upload_time": "2022-12-03T22:48:18",
        "upload_time_iso_8601": "2022-12-03T22:48:18.540938Z",
        "url": "https://files.pythonhosted.org/packages/f2/c2/8fa46e91ac59258047250441f8c1af574eb288df65b46c7f2b4d8b75f30f/GSAE-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ca23fb395e4d91ecb29a28abb734463f78c24628eea8afd5c83c1e498f69e57",
          "md5": "18749799138c8b1694e448ac081aa93d",
          "sha256": "847b8cbd831eec4e6e35a69a914f2964421005d01b6e4bf6c1b30a634205be8b"
        },
        "downloads": -1,
        "filename": "GSAE-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "18749799138c8b1694e448ac081aa93d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16758,
        "upload_time": "2022-12-03T22:48:20",
        "upload_time_iso_8601": "2022-12-03T22:48:20.516472Z",
        "url": "https://files.pythonhosted.org/packages/4c/a2/3fb395e4d91ecb29a28abb734463f78c24628eea8afd5c83c1e498f69e57/GSAE-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f2c28fa46e91ac59258047250441f8c1af574eb288df65b46c7f2b4d8b75f30f",
        "md5": "bc52bfec29b767825197ea37d96f3072",
        "sha256": "0f22a04433e8fbbc96604207e513263f01544638782485dd41a2d7900ea18f84"
      },
      "downloads": -1,
      "filename": "GSAE-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bc52bfec29b767825197ea37d96f3072",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 21046,
      "upload_time": "2022-12-03T22:48:18",
      "upload_time_iso_8601": "2022-12-03T22:48:18.540938Z",
      "url": "https://files.pythonhosted.org/packages/f2/c2/8fa46e91ac59258047250441f8c1af574eb288df65b46c7f2b4d8b75f30f/GSAE-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ca23fb395e4d91ecb29a28abb734463f78c24628eea8afd5c83c1e498f69e57",
        "md5": "18749799138c8b1694e448ac081aa93d",
        "sha256": "847b8cbd831eec4e6e35a69a914f2964421005d01b6e4bf6c1b30a634205be8b"
      },
      "downloads": -1,
      "filename": "GSAE-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "18749799138c8b1694e448ac081aa93d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 16758,
      "upload_time": "2022-12-03T22:48:20",
      "upload_time_iso_8601": "2022-12-03T22:48:20.516472Z",
      "url": "https://files.pythonhosted.org/packages/4c/a2/3fb395e4d91ecb29a28abb734463f78c24628eea8afd5c83c1e498f69e57/GSAE-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}