{
  "info": {
    "author": "Aljoscha Poertner",
    "author_email": "aljoscha.poertner@fh-bielefeld.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# Swarmrob ![travis_ci](https://travis-ci.com/AljoschaP/SwarmRob.svg?token=gbhG8z3VZ5gzPsveAuLR&branch=master)\n<p align=\"center\"> \n<img src=\"docs/_static/images/SwarmRob_Main_Logo.png\" alt=\"SwarmRob Logo\" width=\"193\" height=\"212\">\n</p>\n\n## Container Orchestration for Robot Applications\nBecause of the very heterogeneous composition of software and hardware in robotics, the reproduction of experiments is a common problem.\nSwarmRob is a python framework that uses container technologies and orchestration to enable the simple sharing of experimental artifacts and improve the reproducibility\nin robotics research.\n\n### General Informations\nThe reproduction of experiments and its results is one of the fundamental problems of robotics. SwarmRob tries to solve it by providing a solution for re-executing and reproducing experiments. The solution allows to run an experiment not only on one robot but also having a cluster of robots run multiple services that communicate with each other. For this purpose, SwarmRob uses container virtualization in combination with an orchestration mechanism that is adapted to the requirements of robotics. The software is oriented along the master-worker-pattern, where a single master manages the experiment together with the participating robots called worker.\n\n<p align=\"center\"> \n<img src=\"docs/_static/images/swarmrob_architecture.png\" alt=\"SwarmRob Architecture\" width=\"421\" height=\"288\">\n</p>\n\n*The Architecture of SwarmRob - The green cubes represent the worker nodes and the red cubes represent the master nodes. Every bounding box illustrates a swarm.The outer box illustrates the local network of the laboratory and the grey boxes illustrates the repositories where the worker can obtain the definition files.*\n\nAn experiment is described using Docker-like configuration files which can be published using private or public repositories and can be obtained by other researchers. The workflow can be subdivided in two phases: the research phase and the review phase.\n\n![Workflow](docs/_static/images/workflow.png)\n*Workflow of SwarmRob - The figure illustrates the research phase (left timeline) and the review phase (right timeline) of the workflow with their related subphases.*\n\nThe research phase is the phase where the experiment is developed and specified by the responsible researchers. Every robot participating in the experiment is specified using a Service Definition File (SDF). The SDF includes the complete functional scope of Docker and should be an executable image of this specific robot. An example of a valid SDF is shown in the following code block.\n\n```\nFROM iotlab/indigo\n# Initialize the catkin workspace\nUSER ros\nWORKDIR /home/ros/src\nRUN /usr/bin/python /opt/ros/indigo/bin/\ncatkin_init_workspace\nRUN git clone --recursive https://gitlab/repository/\nROSMaster.git -b master\nWORKDIR /home/ros\n# Build the catkin workspace\nRUN /opt/ros/indigo/bin/catkin_make\n#...\nENTRYPOINT [\"/home/ros/startup.sh\"]\n```\n\nAfterwards, the researcher can compose the experiment by defining an experiment definition file (EDF) that references the prior defined SDFs. An EDF is a subset of docker-compose adapted to specific requirements of robotics like the definition of required hardware, e.g. camera, laser scanner etc.. The difference between docker-compose and SwarmRob is that the definition of devices is taken into account within the orchestration and allocation process. An example of a valid EDF is shown in the following code block.\n\n```\nservices:\n    rosmaster:\n      #Specifies the location of the image\n      image: repository:5000/ros-master\n      environment:\n        - ROS_IP=hm_rosmaster_1\n    camera:\n      image: repository:5000/ros-smart-camera\n      #Specifies service-specific environment variables\n      environment:\n        - ROS_URI=http://rosmaster_1:11311\n        - CAMERA_NAME=Cam\n      #Specifies the cross-service dependencies\n      depends_on:\n        - \"rosmaster\"\n      #Specifies the required devices\n      devices:\n        - \"/dev/video0:/dev/video0\"\n```\n\nAfterwards, the researchers just need to publish the SDFs and EDFs along with the publication to allow other researchers to get them and reproduce the experiment. As previously described, therefore SwarmRob relies on container virtualization to enable the reproduction of software-intensive multi-robot experiments. A key feature of multi-robot systems is the communicaiton. In order to enable a capsulated and inference-free communication between the robots, SwarmRob makes use of the virtual network feature of Docker based on VXLAN. While the use of container virtualization becomes more common in robotics, especially the networking is a very time-consuming and error-prone procedure. SwarmRob automates this by using a distributed key-value store to spread the correct network configuration to all participating robots. This enables the communication between e.g. ROS nodes via virtual networks on top of the original underlying network. The whole configuration of the swarm is carried out by the software. The researchers only need to initialize a swarm, add the workers and start the swarm.\n<p align=\"center\"> \n<img src=\"docs/_static/images/networking.png\" alt=\"Networking\" width=\"402\" height=\"370\">\n</p>\n\n*System and Inter-Robot Network Architecture using Overlay Networks - The Underlay Network represents the physical network connection between the hosts, the Intra-Swarm Communication represents the commands and information exchanged between the participants of a swarm and the Overlay Network is the communication channel used for the communication between containerized applications*\n\nMore in-depth information can be found in the publication:\n\n> A. Pörtner, M. Hoffmann, S. Zug, and M. König, “SwarmRob: A Toolkit for Reproducibility and Sharing of Experimental Artifacts in Robotics Research,” in 2018 IEEE International Conference on Systems, Man, and Cybernetics (SMC), 2018, p. 325–332. \n\nA good start to connect with SwarmRob is to follow the [Getting started](https://aljoschap.github.io/SwarmRob/).\n\n### Copyright\nCopyright 2018,2019 Aljoscha Pörtner\n\nCopyright 2019 André Kirsch\n\nThis file is part of SwarmRob.\n\nSwarmRob is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nSwarmRob is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with SwarmRob.  If not, see <https://www.gnu.org/licenses/>.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aljoschap/swarmrob",
    "keywords": "",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Swarmrob-Worker",
    "package_url": "https://pypi.org/project/Swarmrob-Worker/",
    "platform": "",
    "project_url": "https://pypi.org/project/Swarmrob-Worker/",
    "project_urls": {
      "Homepage": "https://github.com/aljoschap/swarmrob"
    },
    "release_url": "https://pypi.org/project/Swarmrob-Worker/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "An Orchestration Tool for Container-based Robot Applications",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5937838,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90da9f92b1e8205c3bd8ca17bb6b602762553ca9ada5a5ae035c774ff7f32410",
          "md5": "e38eacc72673611410866613dce25c0e",
          "sha256": "8d003ab62b25df4e677e344c0d09ccbe86100470bb9cd77f0aefe93c7d54d2d0"
        },
        "downloads": -1,
        "filename": "Swarmrob_Worker-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e38eacc72673611410866613dce25c0e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 52829,
        "upload_time": "2019-10-07T09:31:30",
        "upload_time_iso_8601": "2019-10-07T09:31:30.398119Z",
        "url": "https://files.pythonhosted.org/packages/90/da/9f92b1e8205c3bd8ca17bb6b602762553ca9ada5a5ae035c774ff7f32410/Swarmrob_Worker-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "535e0b1f2c31679c0299b35328b82221b4cb1ffe7f3971212fa8f03076426bc2",
          "md5": "960334745d9f1400d182f43b2c126c82",
          "sha256": "f5d3ad16aba6dc0d9d841a09892cf77936366c7d0e196caab0717201dd8b6c69"
        },
        "downloads": -1,
        "filename": "Swarmrob-Worker-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "960334745d9f1400d182f43b2c126c82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30232,
        "upload_time": "2019-10-07T09:31:33",
        "upload_time_iso_8601": "2019-10-07T09:31:33.206780Z",
        "url": "https://files.pythonhosted.org/packages/53/5e/0b1f2c31679c0299b35328b82221b4cb1ffe7f3971212fa8f03076426bc2/Swarmrob-Worker-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "90da9f92b1e8205c3bd8ca17bb6b602762553ca9ada5a5ae035c774ff7f32410",
        "md5": "e38eacc72673611410866613dce25c0e",
        "sha256": "8d003ab62b25df4e677e344c0d09ccbe86100470bb9cd77f0aefe93c7d54d2d0"
      },
      "downloads": -1,
      "filename": "Swarmrob_Worker-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e38eacc72673611410866613dce25c0e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 52829,
      "upload_time": "2019-10-07T09:31:30",
      "upload_time_iso_8601": "2019-10-07T09:31:30.398119Z",
      "url": "https://files.pythonhosted.org/packages/90/da/9f92b1e8205c3bd8ca17bb6b602762553ca9ada5a5ae035c774ff7f32410/Swarmrob_Worker-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "535e0b1f2c31679c0299b35328b82221b4cb1ffe7f3971212fa8f03076426bc2",
        "md5": "960334745d9f1400d182f43b2c126c82",
        "sha256": "f5d3ad16aba6dc0d9d841a09892cf77936366c7d0e196caab0717201dd8b6c69"
      },
      "downloads": -1,
      "filename": "Swarmrob-Worker-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "960334745d9f1400d182f43b2c126c82",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 30232,
      "upload_time": "2019-10-07T09:31:33",
      "upload_time_iso_8601": "2019-10-07T09:31:33.206780Z",
      "url": "https://files.pythonhosted.org/packages/53/5e/0b1f2c31679c0299b35328b82221b4cb1ffe7f3971212fa8f03076426bc2/Swarmrob-Worker-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}