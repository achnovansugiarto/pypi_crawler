{
  "info": {
    "author": "Andriy Yatskovets",
    "author_email": "andriy.yatskovets@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": ".. image:: https://api.codeclimate.com/v1/badges/31682a7859575a4f64b0/maintainability\n    :target: https://codeclimate.com/github/mediapills/dependency-injection/maintainability\n    :alt: Maintainability\n\n.. image:: https://codecov.io/gh/mediapills/dependency-injection/branch/main/graph/badge.svg?token=USMBZ0W54N\n    :target: https://codecov.io/gh/mediapills/dependency-injection\n    :alt: Absolute coverage and coverage changes\n\n.. image:: https://github.com/mediapills/dependency-injection/workflows/CI%20Build/badge.svg?branch=main\n    :target: https://github.com/mediapills/dependency-injection/actions\n    :alt: GitHub Workflow Actions Status\n\n.. image:: https://pypip.in/py_versions/mediapills.dependency_injection/badge.svg\n    :target: https://pypi.python.org/pypi/mediapills.dependency_injection\n    :alt: Supported Python versions\n\n.. image:: https://img.shields.io/pypi/wheel/mediapills.dependency-injection.svg\n    :target: https://pypi.python.org/pypi/mediapills.dependency_injection\n    :alt: Wheel\n\n.. image:: https://static.pepy.tech/personalized-badge/mediapills-dependency-injection?period=month&units=international_system&left_color=black&right_color=orange&left_text=Downloads\n    :target: https://pepy.tech/project/mediapills-dependency-injection\n    :alt: Downloads\n\n.. image:: https://requires.io/github/mediapills/dependency-injection/requirements.svg?branch=main\n     :target: https://requires.io/github/mediapills/dependency-injection/requirements/?branch=main\n     :alt: Requirements Status\n\n.. image:: https://img.shields.io/badge/License-MIT-yellow.svg\n     :target: https://github.com/mediapills/dependency-injection/blob/main/LICENSE.md\n     :alt: License: MIT\n\n\nOverview\n--------\n\n**Dependency Injection** is a technique in which an object receives other\nobjects that it depends on, called dependencies. Typically, the receiving\nobject is called a client and the passed-in ('injected') object is called a\nservice. The code that passes the service to the client is called the injector.\nInstead of the client specifying which service it will use, the injector tells\nthe client what service to use. The 'injection' refers to the passing of a\ndependency (a service) into the client that uses it.\n\nDependency injection solves the following problems:\n\n* How can a class be independent of how the objects on which it depends are created?\n* How can the way objects are created be specified in separate configuration files?\n* How can an application support different configurations?\n\nCreating objects directly within the class commits the class to particular\nimplementations. This makes it difficult to change the instantiation at\nruntime, especially in compiled languages where changing the underlying objects\ncan require re-compiling the source code.\n\nDependency injection separates the creation of a client's dependencies from the\nclient's behavior, which promotes loosely coupled programs and the dependency\ninversion and single responsibility principles. Fundamentally, dependency\ninjection is based on passing parameters to a method.\n\nDependency injection is an example of the more general concept of inversion of\ncontrol.\n\nRoles\n~~~~~\n\nDependency injection involves four roles:\n\n* the service objects to be used\n* the client object, whose behavior depends on the services it uses\n* the interfaces that define how the client may use the services\n* the injector, which constructs the services and injects them into the client\n\nAny object that may be used can be considered a **service**. Any object that\nuses other objects can be considered a **client**. The names relate only to the\nrole the objects play in an injection.\n\nThe **interfaces** are the types the client expects its dependencies to be. The\nclient should not know the specific implementation of its dependencies, only\nknow the interface's name and API. As a result, the client will not need to\nchange even if what is behind the interface changes. Dependency injection can\nwork with true interfaces or abstract classes, but also concrete services,\nthough this would violate the dependency inversion principle and sacrifice the\ndynamic decoupling that enables testing. It is only required that the client\nnever treats its interfaces as concrete by constructing or extending them. If\nthe interface is refactored from a class to an interface type (or vice versa)\nthe client will need to be recompiled. This is significant if the client and\nservices are published separately.\n\nThe **injector** introduces services to the client. Often, it also constructs\nthe client. An injector may connect a complex object graph by treating the same\nobject as both a client at one point and as a service at another. The injector\nitself may actually be many objects working together, but may not be the client\n(as this would create a circular dependency). The injector may be referred to\nas an assembler, provider, container, factory, builder, spring, or construction\ncode.\n\nPros\n~~~~\n\nA basic benefit of dependency injection is decreased coupling between classes\nand their dependencies. By removing a client's knowledge of how its\ndependencies are implemented, programs become more reusable, testable and\nmaintainable.\n\nThis also results in increased flexibility: a client may act on anything that\nsupports the intrinsic interface the client expects.\n\nMany of dependency injection's benefits are particularly relevant to\nunit-testing.\n\nFor example, dependency injection can be used to externalize a system's\nconfiguration details into configuration files, allowing the system to be\nreconfigured without recompilation. Separate configurations can be written for\ndifferent situations that require different implementations of components. This\nincludes testing. Similarly, because dependency injection does not require any\nchange in code behavior it can be applied to legacy code as a refactoring. The\nresult is clients that are more independent and that are easier to unit test in\nisolation using stubs or mock objects that simulate other objects not under\ntest. This ease of testing is often the first benefit noticed when using\ndependency injection.\n\nMore generally, dependency injection reduces boilerplate code, since all\ndependency creation is handled by a singular component.\n\nFinally, dependency injection allows concurrent development. Two developers can\nindependently develop classes that use each other, while only needing to know\nthe interface the classes will communicate through. Plugins are often developed\nby third party shops that never even talk to the developers who created the\nproduct that uses the plugins.\n\nCons\n~~~~\n\nCreates clients that demand configuration details, which can be onerous when\nobvious defaults are available.\n\nMake code difficult to trace because it separates behavior from construction.\n\nIs typically implemented with reflection or dynamic programming. This canhinder\nIDE automation.\n\nTypically requires more upfront development effort.\n\nForces complexity out of classes and into the links between classes which might\nbe harder to manage.\n\nEncourage dependence on a framework.\n\nInstallation\n------------\n\nBefore using mediapills.dependency_injection in your project, add it to your ``requirements.txt``\nfile:\n\n.. code-block:: bash\n\n    $ echo \"-e git+ssh://git@github.com/mediapills/dependency_injection.git@0.0.2#egg=mediapills.dependency_injection\" >> requirements.txt\n\nor\n\n.. code-block:: bash\n\n    $ echo \"mediapills.dependency_injection==0.0.2\" >> requirements.txt\n\n\nUsage\n-----\n\nCreating a injector is a matter of creating a ``Injector`` instance:\n\n.. code-block:: python\n\n    from mediapills.dependency_injection import Injector\n\n    injector = Injector()\n\nAs many other dependency injection containers, mediapills.dependency_injection manages two\ndifferent kind of data: **services** and **parameters**.\n\nDefining Services\n~~~~~~~~~~~~~~~~~\n\nA service is an object that does something as part of a larger system. Examples\nof services: a database connection, a templating engine, or a mailer. Almost\nany object can be a service.\n\nServices are defined by **anonymous functions** that return an instance of an\nobject:\n\n.. code-block:: python\n\n    # define some services\n    injector['session_storage'] = lambda di: (\n        SessionStorage('SESSION_ID')\n    )\n\n    injector['session'] = lambda di: (\n        Session(di['session_storage'])\n    )\n\nNotice that the anonymous function has access to the current injector\ninstance, allowing references to other services or parameters.\n\nAs objects are only created when you get them, the order of the definitions\ndoes not matter.\n\nUsing the defined services is also very easy:\n\n.. code-block:: python\n\n    # get the session object\n    session = injector['session']\n\n    # the above call is roughly equivalent to the following code:\n    # storage = SessionStorage('SESSION_ID')\n    # session = Session(storage)\n\nDefining Factory Services\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, each time you get a service, Injector returns the **same instance**\nof it. If you want a different instance to be returned for all calls, wrap your\nanonymous function with the ``factory()`` method\n\n.. code-block:: python\n\n    injector['session'] = injector.factory(lambda di: (\n        Session(di['session_storage'])\n    ))\n\nNow, each call to ``injector['session']`` returns a new instance of the\nsession.\n\nDefining Parameters\n~~~~~~~~~~~~~~~~~~~\n\nDefining a parameter allows to ease the configuration of your container from\nthe outside and to store global values:\n\n.. code-block:: python\n\n    # define some parameters\n    injector['cookie_name'] = 'SESSION_ID'\n    injector['session_storage_cls'] = SessionStorage\n\nIf you change the ``session_storage`` service definition like below:\n\n.. code-block:: python\n\n    injector['session_storage'] = lambda di: (\n        di['session_storage_cls'](di['cookie_name'])\n    )\n\nYou can now easily change the cookie name by overriding the\n``cookie_name`` parameter instead of redefining the service\ndefinition.\n\nProtecting Parameters\n~~~~~~~~~~~~~~~~~~~~~\n\nBecause Pimple sees anonymous functions as service definitions, you need to\nwrap anonymous functions with the ``protect()`` method to store them as\nparameters:\n\n.. code-block:: php\n\n    injector['random_func'] = lambda i: rand()\n    injector.protect('random_func')\n\nModifying Services after Definition\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn some cases you may want to modify a service definition after it has been\ndefined. You can use the ``extend()`` method to define additional code to be\nrun on your service just after it is created:\n\n.. code-block:: python\n\n    injector['session_storage'] = lambda di: (\n        di['session_storage_class'](di['cookie_name'])\n    )\n\n    def session_storage_ext(storage: Callable, di: Injector):\n        # Do something with base storage using di\n\n        return storage\n\n    injector.extend('session_storage', session_storage_ext)\n\nThe first argument is the name of the service to extend, the second a function\nthat gets access to the object instance and the container.\n\nFetching the Service Creation Function\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen you access an object, Injector automatically calls the anonymous function\nthat you defined, which creates the service object for you. If you want to get\nraw access to this function, you can use the ``raw()`` method:\n\n.. code-block:: python\n\n    injector['session'] = lambda di: (\n        Session(di['session_storage'])\n    )\n\n    sessionFunction = container.raw('session')\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mediapills/dependency_injection",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mediapills.dependency-injection",
    "package_url": "https://pypi.org/project/mediapills.dependency-injection/",
    "platform": "",
    "project_url": "https://pypi.org/project/mediapills.dependency-injection/",
    "project_urls": {
      "Bug Tracker": "https://github.com/mediapills/dependency-injection/issues",
      "Homepage": "https://github.com/mediapills/dependency_injection",
      "Source Code": "https://github.com/mediapills/dependency-injection"
    },
    "release_url": "https://pypi.org/project/mediapills.dependency-injection/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A small Python dependency injection container",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11256367,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "722faa2ee1b938ba141c535ef4503f93953afdf979ff2b4c828eceede1a3f6a1",
          "md5": "20581976ba918f4f9da09d4ebdb2db9c",
          "sha256": "bfe87057f9f841d4cb27df0bfd1e6fef2afbc8a86ad5c97c02916c0b5cb215bb"
        },
        "downloads": -1,
        "filename": "mediapills.dependency_injection-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20581976ba918f4f9da09d4ebdb2db9c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6972,
        "upload_time": "2021-08-22T14:50:03",
        "upload_time_iso_8601": "2021-08-22T14:50:03.450796Z",
        "url": "https://files.pythonhosted.org/packages/72/2f/aa2ee1b938ba141c535ef4503f93953afdf979ff2b4c828eceede1a3f6a1/mediapills.dependency_injection-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a718c598d0b6078ec26532ef50854f9e2497d1607cbf7a7cf658a1197c714ac9",
          "md5": "b39fde09b5463f958a763805f59dd42b",
          "sha256": "a3e9fdd94a472b346e682be00e50f8dd3360f6c2d2d4063c8b0116375a8fc507"
        },
        "downloads": -1,
        "filename": "mediapills.dependency_injection-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b39fde09b5463f958a763805f59dd42b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 8526,
        "upload_time": "2021-08-23T20:38:30",
        "upload_time_iso_8601": "2021-08-23T20:38:30.774117Z",
        "url": "https://files.pythonhosted.org/packages/a7/18/c598d0b6078ec26532ef50854f9e2497d1607cbf7a7cf658a1197c714ac9/mediapills.dependency_injection-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a718c598d0b6078ec26532ef50854f9e2497d1607cbf7a7cf658a1197c714ac9",
        "md5": "b39fde09b5463f958a763805f59dd42b",
        "sha256": "a3e9fdd94a472b346e682be00e50f8dd3360f6c2d2d4063c8b0116375a8fc507"
      },
      "downloads": -1,
      "filename": "mediapills.dependency_injection-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b39fde09b5463f958a763805f59dd42b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 8526,
      "upload_time": "2021-08-23T20:38:30",
      "upload_time_iso_8601": "2021-08-23T20:38:30.774117Z",
      "url": "https://files.pythonhosted.org/packages/a7/18/c598d0b6078ec26532ef50854f9e2497d1607cbf7a7cf658a1197c714ac9/mediapills.dependency_injection-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}