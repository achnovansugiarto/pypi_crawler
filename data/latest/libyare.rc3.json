{
  "info": {
    "author": "",
    "author_email": "Carlo Alessandro Verre <carlo.alessandro.verre@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "```\nHelp on package libyare:\n\nNAME\n    libyare - LIBrary for YARE (Yet Another Regular Expression) pattern match\n\nDESCRIPTION\n\n    CONTENT\n\n        1. Installation\n        2. Help\n        3. Introduction\n        4. String Patterns\n        5. Charset Patterns\n        6. Numeric Patterns\n        7. TGMK Literals\n        8. Compound Patterns\n        9. Three Flavors\n        10. Exceptions\n        11. History\n\n    1. INSTALLATION\n\n    From terminal type:\n\n        $ pip3 install libyare\n\n    2. HELP\n\n    From terminal type:\n\n        $ pydoc libyare\n\n    or, from a Python IDE:\n\n        >>> import libyare\n        >>> help(libyare)\n\n    3. DEFINITIONS\n\n    \"YARE\"  (Yet  Another Regular Expression) is a regular expression format aimed to be more\n    readable (even at the cost of being less powerful) than standard regular expressions.\n\n    A \"pattern\" can be:\n\n        • a \"simple pattern\", which can be:\n            • a \"string pattern\", a classic Unix shell style pattern\n            • a \"charset pattern\", made by:\n                • a backquote '`'\n                • a single-char classic Unix shell style pattern\n            • a \"numeric pattern\", made by:\n                • a comparison operator '=' '>' '<' '>=' '<=' or '<>'\n                • an integer (or TGMK, see later) literal\n        • a  \"compound  pattern\", made combining simple patterns by logical operators '^' '&'\n          and ',' and by parentheses '(' and ')'\n\n    \"Metacharacters\" are:\n\n        • '*' '?' '[' and ']', used in string patterns, out of '[...]'\n        • '!' and '-', used in string patterns, between '[' and ']'\n        • '`' backquote, used at beginning of charset patterns\n        • '^' (not) '&' (and) and ',' (or) logical operators in compound patterns\n        • '('  and  ')' parenthesis altering precedence between logical operators in compound\n          patterns\n\n    4. STRING PATTERNS\n\n    A  \"string pattern\" is a classic Unix shell style patterns, without extensions introduced\n    by bash shell, so, for instance, curly braces '{' and '}' have no special meaning.\n\n        • pattern '*' matches any string\n        • pattern '?' matches any single char\n        • pattern '[ab]' matches 'a' or 'b'\n        • pattern '[!a]' matches any single char except 'a' or 'b'\n        • pattern '[a-z]' matches any single char between 'a' and 'z'\n        • pattern '[!a-z]' matches any single char not between 'a' and 'z'\n        • pattern  '[a-z0-9_]' matches any single char between 'a' and 'z' or between '0' and\n          '9' or equal to '_'\n        • pattern  '[!a-z0-9_]'  matches  any  single  char  not  between 'a' and 'z' and not\n          between '0' and '9' and not equal to '_'\n\n    For further details, look for instance at the Python3 documentation about fnmatch module.\n\n    If  a  metacharacter must belong to a simple string pattern then it must be quoted by '['\n    and ']', more exactly:\n\n        • '*' '?' '[' '^' '&' ',' '(' and ')' must always be quoted\n        • '!' and '-' if not between '[' and ']' have no special meaning and don't need to be\n          quoted\n        • '`'  needs  to be quoted only in first position inside the simple string pattern in\n          order to avoid confusion with charset pattern\n        • '<'  '='  and '>' need to be quoted only in first position inside the simple string\n          pattern in order to avoid confusion with numeric pattern\n        • ']' only can't be quoted, but you shouldn't need it because an unmatched ']' has no\n          special meaning and doesn't raise a syntax error, as unmatched '[' '(' and ')' do\n\n    Some example:\n\n        • pattern '[(]*[)]' matches any string starting with '(' and ending with ')'\n        • pattern '[[]*]' matches any string starting with '[' and ending with ']'\n        • patterns '[`]*`' and '[`]*[`]' both match any string starting and ending with '`'\n        • patterns  '[<]*>'  and '[<]*[>]' both match any string starting with '<' and ending\n          with '>'\n\n    You can quote metacharacter '!' too, but not immediately after '['.\n\n        • pattern '[?!]' matches '?' and '!' only\n        • pattern '[!?]' matches any character except '?'\n\n    You  can  quote  '-'  too, but immediately after '[' or before ']' only, otherwise it's a\n    metacharacter denoting a character interval:\n\n        • patterns '[-pr]' and '[pr-]' match '-' 'p' and 'r'\n        • pattern '[p-r]' matches 'p' 'q' and 'r'\n\n    But '-' stands for itself even after a character interval:\n\n        • pattern '[p-r-x]' matches 'p' 'q' 'r' '-' and 'x'\n        • pattern '[p-r-x-z]' matches 'p' 'q' 'r' '-' 'x' 'y' and 'z'\n\n    Descending character intervals are not allowed:\n\n        • pattern '[z-a]' raises a syntax error\n\n    They  are  only  two  differences  between  patterns  defined  by fnmatch()/fnmatchcase()\n    functions in Python3 fnmatch module and patterns accepted by YARE:\n\n        • unmatched  '['  (as  in pattern 'abc[def') is allowed by fnmatch but is rejected by\n          YARE as a syntax error\n        • null  pattern  ''  is  allowed by fnmatch but is rejected by YARE as a syntax error\n          (see in paragraph 5. COMPOUND PATTERNS for a workaround to match a null string by a\n          not null pattern)\n\n    Simple  string  patterns  can  be  case-sensitive or case-insensitive, depending on which\n    match function you use, see paragraph 6. THREE FLAVOURS.\n\n    5. CHARSET PATTERNS\n\n    A \"charset pattern\" contains:\n\n        • a backquote '`'\n        • a single-char classic Unix shell style pattern\n\n    A  charset pattern matches a string if all chars in string match single-char classic Unix\n    shell style pattern.\n\n    Example:\n\n        • '`[a-z0-9]'  matches  any  string  made  of  zero  or more underscore alphabetic or\n          numeric characters\n\n    Charset patterns are always case-sensitive.\n\n    6. NUMERIC PATTERNS\n\n    A \"numeric pattern\" is made by:\n\n        • a comparison operator (among '=' '<>' '<' '<=' '>' and '>=')\n        • an integer literal (or a TGMK literal, see next paragraph)\n\n    No other comparison operator (as '==' '!=' '><' '!<' or '!>') is allowed.\n\n        • pattern '=x' matches any string whose numeric value is equal to x\n        • pattern '<>x' matches any string whose numeric value is not equal to x\n        • pattern '<x' matches any string whose numeric value is less than x\n        • pattern '<=x' matches any string whose numeric value is less than or equal to x\n        • pattern '>x' matches any string whose numeric value is greater than x\n        • pattern '>=x' matches any string whose numeric value is greater than or equal to x\n\n    where  x  is  any  integer literal (or TGMK literal, see next paragraph), so for instance\n    patterns '>=1024&<2048' and '>=1k&<2k' are equivalent and both match:\n\n        • '1024', '1025' ... '2047', but also:\n        • '1K', '1k1' ... '1k1023'\n\n    Numeric patterns are always case-insensitive,\n\n    7. TGMK LITERALS\n\n    \"TGMK\"  (Tebi-Gibi-Mebi-Kibi)  is  a  human-readable  lossless case-insensitive 1024-base\n    integer representation, suitable for bits and bytes.\n\n    A \"TGMK literal\" is a string containing:\n\n        • zero or more leading blanks\n        • an optional ('+' or '-') \"sign\"\n        • one or more \"1024-base-digits\", each made by:\n            • a  \"mantissa\", a string of one or more decimal digits, representing an unsigned\n              decimal integer constant, as '0', '1' or '100000'.\n            • a \"characteristic\", a letter in 'KMGTPEZY' (or 'kmgtpezy', case has no meaning)\n        • zero or more trailing blanks\n\n    Only last (rightmost) 1024-base-digit can lack characteristic, meaning unities.\n\n    Characteristic letters have the following well-known meanings:\n\n        ╔══════╤══════╤════╤═════╤════╤══════════════════╤═══════╤═════════════════════════╗\n        ║LETTER│PREFIX│BITS│BYTES│LOG2│      LOG10       │LOG1024│          VALUE          ║\n        ╟──────┼──────┼────┼─────┼────┼──────────────────┼───────┼─────────────────────────╢\n        ║'K'   │kibi- │Kib │KiB  │10.0│ 3.010299956639812│    1.0│                     1024║\n        ║'M'   │mebi- │Mib │MiB  │20.0│ 6.020599913279624│    2.0│                  1048576║\n        ║'G'   │gibi- │Gib │GiB  │30.0│ 9.030899869919436│    3.0│               1073741824║\n        ║'T'   │tebi- │Tib │TiB  │40.0│12.041199826559248│    4.0│            1099511627776║\n        ║'P'   │pebi- │Pib │PiB  │50.0│ 15.05149978319906│    5.0│         1125899906842624║\n        ║'E'   │exbi- │Eib │EiB  │60.0│ 18.06179973983887│    6.0│      1152921504606846976║\n        ║'Z'   │zebi- │Zib │ZiB  │70.0│21.072099696478684│    7.0│   1180591620717411303424║\n        ║'Y'   │yobi- │Yib │YiB  │80.0│24.082399653118497│    8.0│1208925819614629174706176║\n        ╚══════╧══════╧════╧═════╧════╧══════════════════╧═══════╧═════════════════════════╝\n\n    Characteristic letters must appear left to right in strictly decreasing value order:\n\n        • '3m5k7' is ok, its value is 3 * 1024 ** 2 + 5 * 1024 + 7 == 3150855\n        • '5k3m7' is wrong\n        • '5k3k7' is wrong too\n\n    In mantissas one or more leading zeros are allowed, while commas are not:\n\n        • '04096m' is ok\n        • '4,096m' is wrong\n\n    For further details, see https://pypi.org/project/libtgmk.\n\n    TGMK literals are always case-insensitive, so YARE numeric patterns are too.\n\n    8. COMPOUND PATTERNS\n\n    In the following examples, p and q are two simple patterns.\n\n    A  \"compound  pattern\" is built aggregating simple patterns by logic operators '^' (not),\n    '&' (and) and ',' (or) and parenthesis '(' and ')':\n\n        • pattern '^p' matches any string not matching pattern p\n        • pattern 'p&q' matches any string matching both pattern p and pattern q\n        • pattern 'p,q' matches any string matching pattern p or pattern q (or both)\n\n    Two '^' characters cancel each other out:\n\n        • pattern '^^*z' matches any string ending with 'z'\n\n    Precedence is of course '^' > '&' > ',':\n\n        • pattern '??,^s*&*t' matches any 2-chars string, or any string not starting with 's'\n          and ending with 't'\n        • pattern  '>=10&<13,>20&<=23'  matches any int (or TGMK) string worth 10 11 12 21 22\n          or 23\n\n    But  precedence can be forced by parenthesis '(' and ')': so for instance, let p and q be\n    two simple patterns, then De Morgan's laws tell us that:\n\n        • patterns '^p&^q' and '^(p,q)' are equivalent\n        • patterns '^p,^q' and '^(p&q)' are equivalent\n\n    As said before, a null pattern '' is not allowed, but if you need to match a null string,\n    then you can use a workaround:\n\n        • pattern '?*' matches everything, except the null string, so...\n        • pattern '^?*' matches the null string, and nothing else\n\n    Be  careful  using  '^'  operator  with charset patterns, for instance the following four\n    patterns have four distict meanings:\n\n        • '`[0-9]' matches strings containing numeric chars only, hence containing:\n            • zero or more numeric chars\n            • zero not numeric chars\n        • '`[!0-9]' matches strings containing not numeric chars only, hence containing:\n            • zero numeric chars\n            • zero or more not numeric chars\n        • '^`[0-9]' matches strings not containing numeric chars only, hence containing:\n            • zero or more numeric chars\n            • one or more not numeric chars\n        • '^`[!0-9]' matches strings not containing not numeric chars only, hence containing:\n            • one or more numeric chars\n            • zero or more not numeric chars\n\n    9. THREE FLAVOURS\n\n    YARE match comes in three flavours:\n\n        • csmatch(string, pattern, case='s') # case-sensitive match\n        • cimatch(string, pattern, case='i') # case-insensitive match\n        • cxmatch(string, pattern, case='d') # case-mixed match\n\n    Of  course  csmatch(string, pattern, case='i') is equivalent to cimatch(string, pattern),\n    and so on.\n\n    In  case-mixed match any simple string pattern can be case-sensitive or case-insensitive,\n    depending on its content:\n\n        • if  the  simple  pattern  contains  one  or  more  lowercase  letters then match is\n          case-sensitive\n        • otherwise the match is case-insensitive\n\n    Example:\n\n        • pattern 'RAM,?*.db' matches 'ram', 'Ram', 'RAM' or 'xyz.db', but not 'xyz.Db'\n\n    A lowercase letter is any letter having a distinct corresponding uppercase letter, so for\n    instance 'å' is said to be a lowercase letter because 'å'.upper() == 'Å' != 'å'.\n\n    The  three  flavors only have to do with string patterns because, as said before, charset\n    patterns are always case-sensitive, and numeric patterns are always case-insensitive.\n\n    10. EXCEPTIONS\n\n        • SyntaxError if pattern is not well-formed\n        • ValueError if an incorrect TGMK literal is found in pattern\n        • ValueError if case is not 's' 'i' or 'x'\n\n    Note  that  if  an  incorrect  TGMK  literal  is  found  in string to be matched, then no\n    exception is raised, but the match returns with a result of False, for example:\n\n        >>> csmatch('3.14', '>3&<4')\n        False\n\n    because '3.14' contains a dot, so it's not a correct TGMK literal.\n\n    11. HISTORY\n\n        • 0.4.3\n            • updated: documentation\n\n        • 0.4.2\n            • updated: documentation\n\n        • 0.4.1\n            • first version published on pypi.org\n\nPACKAGE CONTENTS\n\n\nFUNCTIONS\n    cimatch(string, pattern, case='i')\n        case-insensitive YARE match\n\n    csmatch(string, pattern, case='s')\n        case-sensitive YARE match\n\n    cxmatch(string, pattern, case='x')\n        case-mixed YARE match\n\nDATA\n    __all__ = ['csmatch', 'cimatch', 'cxmatch']\n\nVERSION\n    0.4.3\n\nFILE\n    /home/xxxx/Documents/pypi/libyare/libyare/__init__.py\n\n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "libyare",
    "package_url": "https://pypi.org/project/libyare/",
    "platform": "",
    "project_url": "https://pypi.org/project/libyare/",
    "project_urls": {
      "Home": "https://pypi.org/project/libyare"
    },
    "release_url": "https://pypi.org/project/libyare/0.4.3/",
    "requires_dist": [
      "libtgmk"
    ],
    "requires_python": ">=3.6",
    "summary": "LIBrary for YARE (Yet Another Regular Expression) pattern match",
    "version": "0.4.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12362061,
  "releases": {
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fec2ba128a5556855a99b1ed432b333924f88e8a52d03442521cc368cf0840a",
          "md5": "583d659844555774860fbeeaba3eef93",
          "sha256": "49a5250d8c71cab6c5e1df7eba257e90249785ca57036c02e0dab8e9992f8d5e"
        },
        "downloads": -1,
        "filename": "libyare-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "583d659844555774860fbeeaba3eef93",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11651,
        "upload_time": "2021-12-20T12:15:40",
        "upload_time_iso_8601": "2021-12-20T12:15:40.118474Z",
        "url": "https://files.pythonhosted.org/packages/2f/ec/2ba128a5556855a99b1ed432b333924f88e8a52d03442521cc368cf0840a/libyare-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac67ac7d54fb0a8398ae29fd31c6166a860a589e9ebaa594f06caab8f9e81d1c",
          "md5": "4ea507dca3eb38e1f6f93a30076dc48f",
          "sha256": "91bfc3a8df2a266e3e49201ef36fddd04992acb80e75fb4d74ec04fa227cd606"
        },
        "downloads": -1,
        "filename": "libyare-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4ea507dca3eb38e1f6f93a30076dc48f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8830,
        "upload_time": "2021-12-20T12:15:43",
        "upload_time_iso_8601": "2021-12-20T12:15:43.096017Z",
        "url": "https://files.pythonhosted.org/packages/ac/67/ac7d54fb0a8398ae29fd31c6166a860a589e9ebaa594f06caab8f9e81d1c/libyare-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9a868ca98719e02e9f5a282d8a903f5386aa9fee8cb028e7c8158ce14c4a90e",
          "md5": "c68cbf3543fcf7be79f030f65d3d3206",
          "sha256": "9fa3ddd29ea6d4ab7cda17631c287d51ee6a9901ce0bbb3d7e3dd7335947682a"
        },
        "downloads": -1,
        "filename": "libyare-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c68cbf3543fcf7be79f030f65d3d3206",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11690,
        "upload_time": "2021-12-20T12:22:21",
        "upload_time_iso_8601": "2021-12-20T12:22:21.790654Z",
        "url": "https://files.pythonhosted.org/packages/d9/a8/68ca98719e02e9f5a282d8a903f5386aa9fee8cb028e7c8158ce14c4a90e/libyare-0.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5f37be28a6dda37eeb36ea872a6bae8ba50af5f9815dc7ded9039d19c665438",
          "md5": "2cafec6ee7efed8780494ad7f500e749",
          "sha256": "41dc4c7599557a070bce4880286ebd65a01e78b6cb031c1aefa3dc2588e56899"
        },
        "downloads": -1,
        "filename": "libyare-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2cafec6ee7efed8780494ad7f500e749",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8855,
        "upload_time": "2021-12-20T12:22:24",
        "upload_time_iso_8601": "2021-12-20T12:22:24.371907Z",
        "url": "https://files.pythonhosted.org/packages/c5/f3/7be28a6dda37eeb36ea872a6bae8ba50af5f9815dc7ded9039d19c665438/libyare-0.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21e6fb0cd2ac1e81ba035825840ca4db91dd29602dd7a21cea90e22af0f79c04",
          "md5": "e4c29ff0b6b9d8eb57b2ffbc8bcf3c4d",
          "sha256": "8dafb84668bd7b59460254463dda857dbd02859f1a38164c4a548146df2ef46e"
        },
        "downloads": -1,
        "filename": "libyare-0.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4c29ff0b6b9d8eb57b2ffbc8bcf3c4d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11782,
        "upload_time": "2021-12-20T15:25:07",
        "upload_time_iso_8601": "2021-12-20T15:25:07.505182Z",
        "url": "https://files.pythonhosted.org/packages/21/e6/fb0cd2ac1e81ba035825840ca4db91dd29602dd7a21cea90e22af0f79c04/libyare-0.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01b240be32007a18717aa80275c308dfdea56746b0918a552b1233090478e584",
          "md5": "93060325e9e0666958f9b66ab8c1015b",
          "sha256": "1d3f445c5c806ca83b72cb9c2ab1e1aa8830bbe35e7edc80976f5c68f4e6a19b"
        },
        "downloads": -1,
        "filename": "libyare-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "93060325e9e0666958f9b66ab8c1015b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8967,
        "upload_time": "2021-12-20T15:25:09",
        "upload_time_iso_8601": "2021-12-20T15:25:09.912101Z",
        "url": "https://files.pythonhosted.org/packages/01/b2/40be32007a18717aa80275c308dfdea56746b0918a552b1233090478e584/libyare-0.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21e6fb0cd2ac1e81ba035825840ca4db91dd29602dd7a21cea90e22af0f79c04",
        "md5": "e4c29ff0b6b9d8eb57b2ffbc8bcf3c4d",
        "sha256": "8dafb84668bd7b59460254463dda857dbd02859f1a38164c4a548146df2ef46e"
      },
      "downloads": -1,
      "filename": "libyare-0.4.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e4c29ff0b6b9d8eb57b2ffbc8bcf3c4d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11782,
      "upload_time": "2021-12-20T15:25:07",
      "upload_time_iso_8601": "2021-12-20T15:25:07.505182Z",
      "url": "https://files.pythonhosted.org/packages/21/e6/fb0cd2ac1e81ba035825840ca4db91dd29602dd7a21cea90e22af0f79c04/libyare-0.4.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01b240be32007a18717aa80275c308dfdea56746b0918a552b1233090478e584",
        "md5": "93060325e9e0666958f9b66ab8c1015b",
        "sha256": "1d3f445c5c806ca83b72cb9c2ab1e1aa8830bbe35e7edc80976f5c68f4e6a19b"
      },
      "downloads": -1,
      "filename": "libyare-0.4.3.tar.gz",
      "has_sig": false,
      "md5_digest": "93060325e9e0666958f9b66ab8c1015b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8967,
      "upload_time": "2021-12-20T15:25:09",
      "upload_time_iso_8601": "2021-12-20T15:25:09.912101Z",
      "url": "https://files.pythonhosted.org/packages/01/b2/40be32007a18717aa80275c308dfdea56746b0918a552b1233090478e584/libyare-0.4.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}