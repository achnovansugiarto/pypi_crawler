{
  "info": {
    "author": "Marco Masetti",
    "author_email": "marco.masetti@sky.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "============\nsky-wiremock\n============\n\n\n.. image:: https://img.shields.io/pypi/v/sky_wiremock.svg\n        :target: https://pypi.python.org/pypi/sky_wiremock\n\n.. image:: https://img.shields.io/travis/grubert65/sky_wiremock.svg\n        :target: https://travis-ci.org/grubert65/sky_wiremock\n\n.. image:: https://readthedocs.org/projects/sky-wiremock/badge/?version=latest\n        :target: https://sky-wiremock.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\n\n\nPython HTTP client for wiremock\n\n\nFeatures\n--------\n\nUsage::\n\n    from sky_wiremock.sky_wiremock import Wiremock\n\n    # get a client object\n    w = Wiremock(\"localhost\", 8080)\n\n\n    # get the list of all mappings defined\n    mappings = w.mappings()\n\n    # get a mapping by its id\n    mapping = w.mapping_by_id(id)\n\n    # get a mapping by its request path and method\n    mapping = w.mapping_by_url_and_method(url, method)\n\n    # add a single mapping and get back its id\n    id = w.add_mapping({\n        \"request\": {\n            \"method\": \"GET\",\n            \"url\": \"/some/thing\"\n        },\n        \"response\": {\n            \"status\": 200,\n            \"body\": \"Hello world!\",\n            \"headers\": {\n                \"Content-Type\": \"text/plain\"\n            }\n        } \n    })\n\n    # populate wiremock with a list of mappings and\n    # get their ids\n    ids = w.populate([{\n        \"request\": {\n            \"method\": \"GET\",\n            \"url\": \"/some/thing\"\n        },\n        \"response\": {\n            \"status\": 200,\n            \"body\": \"Hello world!\",\n            \"headers\": {\n                \"Content-Type\": \"text/plain\"\n            }\n        }\n    },{\n        \"request\": {\n            \"method\": \"GET\",\n            \"url\": \"/some/thing/else\"\n        },\n            \"response\": {\n            \"status\": 200,\n            \"body\": \"Hello world again!\",\n            \"headers\": {\n                \"Content-Type\": \"text/plain\"\n            }\n        }\n    }])\n\n    # delete a mapping by its id\n    # returns the deleted mapping id or -1 in \n    # case of errors\n    id = w.delete_mapping(id)\n\n    # add a fixed delay to a mapping\n    delayed_id = w.fixed_delay(url, method, 10000)\n\n    # add a global fixed delay\n    ret = w.global_fixed_delay(300)\n\n    # add a random delay to a mapping dictionary\n    delayed_id = w.random_delay(\n        filter={\n            \"method\": \"GET\",\n            \"url\": \"/some/thing/to/delay\"\n        }, \n        delayDistribution={\n            \"type\": \"lognormal\",\n            \"median\": 80,\n            \"sigma\": 0.4\n        })\n\n    # add a global random delay\n    ret = w.global_random_delay({\n        \"type\": \"lognormal\",\n        \"median\": 90,\n        \"sigma\": 0.1\n    })\n\n    # add a chunked dribble delay to a mapping\n    delayed_id = w.chunked_dribble_delay(mapping, {\n        \"numberOfChunks\": 5,\n        \"totalDuration\": 1000\n    })\n\n    # resets a list of mappings deleting all delays attached to them\n    # returns the list of mapping ids actually reset\n    ids_up = w.up([{\n        \"method\": \"GET\",\n        \"url\": \"/some/thing/to/delete\"\n    }])\n\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.1.0 (2019-02-12)\n------------------\n\n* First release on PyPI.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/grubert65/sky_wiremock",
    "keywords": "sky_wiremock",
    "license": "BSD license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sky-wiremock",
    "package_url": "https://pypi.org/project/sky-wiremock/",
    "platform": null,
    "project_url": "https://pypi.org/project/sky-wiremock/",
    "project_urls": {
      "Homepage": "https://github.com/grubert65/sky_wiremock"
    },
    "release_url": "https://pypi.org/project/sky-wiremock/0.3.11/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python HTTP client for wiremock",
    "version": "0.3.11",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15213466,
  "releases": {
    "0.3.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "880166c5d4dbd703ecf91391d62b5d167ca70285c8111e996e543619e078a106",
          "md5": "406abcb01302ec12c8bc98740922db5c",
          "sha256": "37ad61b5a1b3ad8db9a19a1682b50d0ee3537b30b628d8935a2de94d7049c439"
        },
        "downloads": -1,
        "filename": "sky_wiremock-0.3.11.tar.gz",
        "has_sig": false,
        "md5_digest": "406abcb01302ec12c8bc98740922db5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14032,
        "upload_time": "2022-09-26T10:26:22",
        "upload_time_iso_8601": "2022-09-26T10:26:22.141944Z",
        "url": "https://files.pythonhosted.org/packages/88/01/66c5d4dbd703ecf91391d62b5d167ca70285c8111e996e543619e078a106/sky_wiremock-0.3.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "880166c5d4dbd703ecf91391d62b5d167ca70285c8111e996e543619e078a106",
        "md5": "406abcb01302ec12c8bc98740922db5c",
        "sha256": "37ad61b5a1b3ad8db9a19a1682b50d0ee3537b30b628d8935a2de94d7049c439"
      },
      "downloads": -1,
      "filename": "sky_wiremock-0.3.11.tar.gz",
      "has_sig": false,
      "md5_digest": "406abcb01302ec12c8bc98740922db5c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14032,
      "upload_time": "2022-09-26T10:26:22",
      "upload_time_iso_8601": "2022-09-26T10:26:22.141944Z",
      "url": "https://files.pythonhosted.org/packages/88/01/66c5d4dbd703ecf91391d62b5d167ca70285c8111e996e543619e078a106/sky_wiremock-0.3.11.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}