{
  "info": {
    "author": "IAM CHU Bordeaux France",
    "author_email": "via.issue@only.please",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Text Processing"
    ],
    "description": "# Tokenization for language processing\n\nThis package contains some generic configurable tools allowing to cut a string in sub-parts (cf. [Wikipedia](https://en.wikipedia.org/wiki/Lexical_analysis#Tokenization)), called `ExtractionString`. An `ExtractionString` is a sub-string from a parent string (say the initial complete text), with associated intervals of non-overlaping characters. The number of associated intervals is arbitrary. \n\n`ExtractionString` class allow basic tokenization of text, such as word splitting, n-gram splitting, char-gram splitting of arbitrary size. In addition, it allows to associate several non-overlapping sub-strings into a given `ExtractionString`. One can compare two different `ExtractionString` objects in terms of their intervals. One can also apply basic mathematical operations and logic to them (+, -, *, /) corresponding to the union, difference, intersection and symmetric difference implemented by Python set ; here the sets are the intervals of position from the parent string. Finally, there are some ordering possibilities among the different `ExtractionString` constructed from the same parent string.\n\n## Depositories, and online documentation\n\nThe different sources of informations for this packages are : \n \n - the official Python Package Installation (PyPI) repository is on [https://pypi.org/project/extractionstring](https://pypi.org/project/extractionstring)\n - the official git repository is on [https://framagit.org/nlp/extractionstring](https://framagit.org/nlp/extractionstring)\n - the official documentation is on [https://nlp.frama.io/extractionstring/](https://nlp.frama.io/extractionstring/)\n \n\n## Philosophy of this library\n\nIn `extractionstring`, one thinks of a string as a collection of integers: the position of each character in the string. For instance\n\n```python\n'Simple string for demonstration and for illustration.' # the parent string\n'01234567891123456789212345678931234567894123456789512' # the positions\n\n'       string                       for illustration ' # the ExtractionString es\n'       789112                       678 412345678951 ' # the associated positions\n\n'Simple                                               ' # the ExtractionString es2\n'012345                                               ' # the associated positions\n```\n\nTo define the `ExtractionString` `'string for illustration'` consists in selecting the positions `[7,13, 36,39, 40,52]` from the parent string, and the `ExtractionString` `'simple'` is defined by the positions `[0,6,]`. \n\nIn addition, one can see the above ranges as sets of positins. Then it is quite easy to perform some basic operations on the `Span`, for instance the addition of two `ExtractionString`\n\n```python\nstr(es1 + es2) = 'Simple string for illustration'\n```\n\nis interpreted as the union of their relative sets of positions.\n\nIn addition to these logical operations, there are a few utilities, like the possibility to split or slice a `ExtractionString` object, as long as their are all related to the same parent string.\n\n## Basic example\n\nBelow we give a simple example of usage of the `ExtractionString` class.\n\n```python\nimport re\nfrom extractionstring import ExtractionString\n\nstring = 'Simple string for demonstration and for illustration.'\ninitial_span = ExtractionString(string)\n\n# char-gram generation\nchargrams = initial_span.slice(0, len(initial_span), 3)\nstr(chargrams[2])\n# return 'mpl'\n\n# each char-gram conserves a memory of the initial string\nchargrams[2].string\n# return 'Simple string for demonstration and for illustration.'\n\ncuts = []\nfor r in re.finditer(r'\\W+', string):\n    cuts += [r.start(), r.end()]\nspans = initial_span.split(cuts)\n# this returns a list of ExtractionString objects\n# representing the tokens as if string.split() was applied\n\n\n# an other possibility to keep only the words is to construct it explicitly\ncuts = []\nfor r in re.finditer(r'\\w+', string):\n    cuts += [r.start(), r.end()]\nspans = ExtractionString(string, intervals=cuts).extractions\n# extractions attribute contains the list of sub-tokens\n\n# 2-gram construction\nngram = [ExtractionString(string, intervals=cuts[2*i:2*i+4]) \n         for i in range(len(cuts)//2-1)]\nngram[2]\n# return ExtractionString('for demonstration', [(14,17),(18,31)])\nstr(ngram[2])\n# return 'for demonstration'\nngram[2].intervals\n# return EvenSizedSortedSet[(14,17);(18,31)]\nngram[2].extractions\n# return [ExtractionString('for', [(14,17)]), ExtractionString('demonstration', [(18,31)])]\n\n# are the two 'for' Token the same ?\nspans[2] == spans[-2]\n# return False, because they are not at the same position\n\n# basic operations among Token\nfor_for = spans[2] + spans[-2]\nstr(for_for)\n# return 'for for'\nfor_for.intervals\n# return EvenSizedSortedSet[(14,17);(36,39)]\nfor_for.string\n# return 'Simple string for demonstration and for illustration.'\n# to check the positions of the two 'for' ExtractionString : \n#        '01234567890...456...01234567890.....67890............'\n\n# also available : \n# span1 + span2 : union of the sets of span1.intervals and span2.intervals\n# span1 - span2 : difference of span1.intervals and span2.intervals\n# span1 * span2 : intersection of span1.intervals and span2.intervals\n# span1 / span2 : symmetric difference of span1.intervals and span2.intervals\n\n```\n\nOther examples can be found in the [documentation](https://nlp.frama.io/extractionstring/).\n\n## Comparison with other Python libraries\n\nA comparison with some other NLP librairies (nltk, gensim, spaCy, gateNLP, ...) can be found in the [documentation](https://nlp.frama.io/extractionstring/tutorials/comparison_other_libraries.html)\n\n## Installation\n\nSimply run \n\n```bash\npip install extractionstring\n```\n\nshould install the library from Python Package Index (PIP). The official repository is on https://framagit.org/nlp/extractionstring. To install the package from the repository, run the following command lines \n\n```bash\ngit clone https://framagit.org/nlp/extractionstring.git\ncd extractionstring/\npip install .\n```\n\nOnce installed, one can run some tests using\n\n```bash\ncd tests/\npython3 -m unittest -v\n```\n\n(verbosity `-v` is an option).\n\n## Versions\n\nSee [CHANGES file](CHANGES.md) in this folder.\n\n## About us\n\nPackage developped for Natural Language Processing at IAM : Unité d'Informatique et d'Archivistique Médicale, Service d'Informatique Médicale, Pôle de Santé Publique, Centre Hospitalo-Universitaire (CHU) de Bordeaux, France.\n\nYou are kindly encouraged to contact the authors by issue on the [official repository](https://framagit.org/nlp/extractionstring/-/issues/), and to propose ameliorations and/or suggestions to the authors, via issue or merge requests.\n\nLast version : Jan 3, 2023\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://framagit.org/nlp/extractionstring",
    "keywords": "",
    "license": "GNU GENERAL PUBLIC LICENSE v.3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "extractionstring",
    "package_url": "https://pypi.org/project/extractionstring/",
    "platform": null,
    "project_url": "https://pypi.org/project/extractionstring/",
    "project_urls": {
      "Homepage": "https://framagit.org/nlp/extractionstring"
    },
    "release_url": "https://pypi.org/project/extractionstring/0.8.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Basic tools to tokenize (i.e. to construct atomic-entities/sub-strings of) a string, for Natural Language Processing (NLP). Usefull also for annotation, tree parsing, entity linking, ... (in fact, anything that links a string or its sub-parts to an other object). Key concepts are versatility to other librairies, and freedom to define many concepts on top of a string.",
    "version": "0.8.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16304240,
  "releases": {
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0bc4e1f6c36e66f6f0b682d89aa03835160695e16c38283f1a7423224d42faa7",
          "md5": "4a2f322a9f3bdfd79071bf077fd0da13",
          "sha256": "482b6f5a9bb0f4f2f5b2dcbef9c0b4a4f2c3e39262239469bf809d6b0dfe5e97"
        },
        "downloads": -1,
        "filename": "extractionstring-0.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a2f322a9f3bdfd79071bf077fd0da13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 39531,
        "upload_time": "2023-01-04T16:27:55",
        "upload_time_iso_8601": "2023-01-04T16:27:55.295049Z",
        "url": "https://files.pythonhosted.org/packages/0b/c4/e1f6c36e66f6f0b682d89aa03835160695e16c38283f1a7423224d42faa7/extractionstring-0.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6431fc4ba3a7c7043177c62f938147c143e90d73fab8fd064e194a995defcec",
          "md5": "aa0ea5f16d805961f630ccec3c5aa721",
          "sha256": "c1e5bdf75261f97f3839ac4b424d7bd9f1d66dd40b9b6770f4e9ee0ccc455f93"
        },
        "downloads": -1,
        "filename": "extractionstring-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "aa0ea5f16d805961f630ccec3c5aa721",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34765,
        "upload_time": "2023-01-04T16:27:57",
        "upload_time_iso_8601": "2023-01-04T16:27:57.430607Z",
        "url": "https://files.pythonhosted.org/packages/d6/43/1fc4ba3a7c7043177c62f938147c143e90d73fab8fd064e194a995defcec/extractionstring-0.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0bc4e1f6c36e66f6f0b682d89aa03835160695e16c38283f1a7423224d42faa7",
        "md5": "4a2f322a9f3bdfd79071bf077fd0da13",
        "sha256": "482b6f5a9bb0f4f2f5b2dcbef9c0b4a4f2c3e39262239469bf809d6b0dfe5e97"
      },
      "downloads": -1,
      "filename": "extractionstring-0.8.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4a2f322a9f3bdfd79071bf077fd0da13",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 39531,
      "upload_time": "2023-01-04T16:27:55",
      "upload_time_iso_8601": "2023-01-04T16:27:55.295049Z",
      "url": "https://files.pythonhosted.org/packages/0b/c4/e1f6c36e66f6f0b682d89aa03835160695e16c38283f1a7423224d42faa7/extractionstring-0.8.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6431fc4ba3a7c7043177c62f938147c143e90d73fab8fd064e194a995defcec",
        "md5": "aa0ea5f16d805961f630ccec3c5aa721",
        "sha256": "c1e5bdf75261f97f3839ac4b424d7bd9f1d66dd40b9b6770f4e9ee0ccc455f93"
      },
      "downloads": -1,
      "filename": "extractionstring-0.8.2.tar.gz",
      "has_sig": false,
      "md5_digest": "aa0ea5f16d805961f630ccec3c5aa721",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 34765,
      "upload_time": "2023-01-04T16:27:57",
      "upload_time_iso_8601": "2023-01-04T16:27:57.430607Z",
      "url": "https://files.pythonhosted.org/packages/d6/43/1fc4ba3a7c7043177c62f938147c143e90d73fab8fd064e194a995defcec/extractionstring-0.8.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}