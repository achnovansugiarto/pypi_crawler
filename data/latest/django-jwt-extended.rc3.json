{
  "info": {
    "author": "IML",
    "author_email": "shin10256@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Framework :: Django :: 4.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Django-JWT-Extended\n\n![Python versions](https://img.shields.io/pypi/pyversions/django-jwt-extended) ![License](https://img.shields.io/badge/license-MIT-green) ![Release](https://img.shields.io/pypi/v/django-jwt-extended)\n\nImplement JWT authentication with Django quickly and easily!\n**Inspired by [flask-jwt-extended](https://github.com/vimalloc/flask-jwt-extended).**\n\n\n\n# Installation\n\n**Pip**: `pip install django-jwt-extended`\n\nAfter that, add `django_jwt_extended` to `INSTALLED_APPS` settings.\n\n```\nINSTALLED_APPS = [\n    ...\n    'django_jwt_extended',\n]\n```\n\n\n\n# Get Started\n\n`django-jwt-extended` makes it easy and simple to create authentication feature.\n\n## Startup your project\n\n```shell\n$ pip install django\n$ pip install django-jwt-extended\n$ django-admin startproject example .\n$ python manage.py migrate\n$ python manage.py createsuperuser\n```\n\n## Edit your views\n\n```python\n# views.py\nfrom django.http import JsonResponse\nfrom django_jwt_extended import jwt_required\nfrom django_jwt_extended import create_access_token\nfrom django_jwt_extended import get_jwt_identity\n\ndef login(request):\n    \"\"\"Create JWT Token API\"\"\"\n    return JsonResponse({\n        \"access_token\": create_access_token(identity=\"iml\"),\n    })\n\n@jwt_required()\ndef user(request):\n    \"\"\"JWT Authentication API\"\"\"\n    identity = get_jwt_identity(request) # \"iml\"\n    return JsonResponse({'id': identity,})\n```\n\n\n\n# Advanced Usage\n\nThis section goes into more detail about django-jwt-extended.\n\n## Return with refresh token\n\nIf you want to return not only the access token but also the refresh token, you can use it as follows. `Identity` is input as an argument to generate tokens. \n\nThis `Identity` can contain any object that **can be serialized as json**, and is stored in \"sub\" of JWT Schema.\n\n```python\nfrom django_jwt_extended import create_access_token\nfrom django_jwt_extended import create_refresh_token\n\n# Login and issue tokens\ndef login(request):\n    return JsonResponse({\n        \"access_token\": create_access_token(\"iml\"),\n        'refresh_token': create_refresh_token('iml'),\n    })\n```\n\n## Refresh Token Authentication\n\nWhen you want to perform authentication through refresh token, Set the refresh argument to `True` as shown below.\n\n```python\n# Refresh tokens\n@jwt_required(refresh=True) # refresh token check\ndef refresh(request):\n    identity = get_jwt_identity(request)\n    return JsonResponse({\n        \"access_token\": create_access_token(identity),\n        'refresh_token': create_refresh_token(identity),\n    })\n```\n\n## Parse JWT Payload\n\nThere are two ways to get the contents of jwt token. These are `get_jwt_identity` and `get_jwt`. \n\n `get_jwt_identity` returns the identity value given when creating the token as it is.\n\n`get_jwt` returns the full payload that decoded the jwt token.\n\n```python\n# Authentication access token\n@jwt_required()\ndef user(request):\n    identity = get_jwt_identity(request)\n    payload = get_jwt(request)\n    return JsonResponse({\n        'id': identity,\n        'raw_jwt': payload,\n    })\n```\n\n## Optional Authentication\n\n If the optional argument is `True`, the verification step is passed even if the corresponding token does not exist. However, in this case, even if **identity or jwt payload** is called, `None` is returned.\n\n```python\n# Optional Login example\n@jwt_required(optional=True)\ndef user_optional(request):\n    identity = get_jwt_identity(request)\n    return JsonResponse({'id': identity})\n```\n\n## Custom Decorator Pattern\n\nIf it is cumbersome to implement the `jwt_required` logic repeatedly every time, you can implement a custom decorator as shown below. This is only an example, and more various methods may exist.\n\n```python\n# Authentication access token with Decorator\ndef login_required(func):\n    @jwt_required()\n    def wrapper(request, **path):\n        identity = get_jwt_identity(request)\n        request.META['logined_identity'] = identity # before request\n        response = func(request, **path)\n        request.META.pop('logined_identity') # after request\n        return response\n    return wrapper\n\n@login_required\ndef decorator_user(request):\n    identity = request.META['logined_identity']\n    payload = get_jwt(request)\n    return JsonResponse({\n        'id': identity,\n        'raw_jwt': payload,\n    })\n```\n\n\n\n# Configuration\n\nEven if you don't configure anything, your app works.\n\nBut in `settings.py` in your app, You can customize your app through the following settings. \n\nHere's a good sample.\n\n```python\n# settings.py\n\nSECRET_KEY = \"super-secret\"\n\nJWT_CONFIG = {\n  'ALGORITHM': 'HS256',\n  'LOCATION': ['headers'],\n  'ACCESS_TOKEN_EXPIRES': timedelta(days=2),\n  'REFRESH_TOKEN_EXPIRES': timedelta(days=30),\n  'JWT_NOT_FOUND_MSG': {'msg': \"can't find JWT token.\"}\n}\n...\n```\n\n\n\n## SECRET_KEY\n\nThis is the secret key setting that Django supports by default. \n\n`Django-jwt-extended` also, the key is used when encoding/decoding JWT.\n\n## JWT_CONFIG\n\n`JWT_CONFIG` is a setting added for `django_jwt_extended`. \n\nAdditional settings can be added as follows in the form of a dictionary.\n\n### ALGORITHM\n\n`ALGORITHM: \"HS256\" `\n\n- Default: `HS256`\n- Allowed_values: `HS256`\n\nSelect the encode/decode algorithm to issue tokens. (Currently only '**HS256**' is supported)\n\n### LOCATION\n\n`LOCATION: [\"headers\", ...]`\n\n- default: `[\"headers\"]`\n- allowed_values: `headers`, `cookies`\n\nThis setting determines where to collect the Tokens. The thing to note is that **input is received as a list, not as a single string**. You can pass in a list to check more then one location, for example `[\"headers\", \"cookies\"]`. The order of the list sets the precedence of where JWTs will be looked for.\n\n- **headers**\n\nFor headers, the header name is fixed to **\"Authorization\"**, and the token format is **\"Bearer [token]\"**.\n\n- **cookies**\n\n In the cookie, you can directly specify **the cookie name for the access token** and **the cookie name for the refresh token.**\n\n### ACCESS_TOKEN_COOKIE_NAME\n\n`ACCESS_TOKEN_COOKIE_NAME: access_token`\n\n- Default: `access_token`\n- Allowed_types: `string`\n\nThe name of the cookie that will store the access token.\n\n### REFRESH_TOKEN_COOKIE_NAME\n\n`REFRESH_TOKEN_COOKIE_NAME: refresh_token`\n\n- Default: `refresh_token`\n- Allowed_types: `string`\n\nThe name of the cookie that will store the refresh token.\n\n### ACCESS_TOKEN_EXPIRES\n\n`ACCESS_TOKEN_EXPIRES: 60 * 24 * 2 # 2days`\n\n- Default: `60 * 24 * 2`\n- Allowed_types: `integer`, `datetime.timedelta`\n\nHow long an access token should be valid before it expires. This can be a a number of seconds (`Integer`).\n\n### REFRESH_TOKEN_EXPIRES\n\n`REFRESH_TOKEN_EXPIRES: 60 * 24 * 30 # 1month`\n\n- Default: `60 * 24 * 30`\n- Allowed_types: `integer`, `datetime.timedelta`\n\nHow long a refresh token should be valid before it expires. This can be a number of seconds (`Integer`).\n\n### Custom Error Responses\n\n`<CUSTOM_ERROR_RESONSE>: {msg: \"custom-error\"}`\n\n- Default: `[json-object]`\n- Allowed_types: `Dict (json serializable)`\n\nWhen your app encounters different situations, it returns different error responses with 401.\n\n- **JWT_NOT_FOUND_MSG**\n\nReturned when you can't find the token in any locations.\n\n- **DECODE_ERROR_MSG**\n\nReturned when the Token signature value is invalid.\n\n- **EXPIRED_TOKEN_MSG**\n\nReturned when the corresponding token has expired.\n\n- **INVALID_TOKEN_TYPE_MSG**\n\nReturned when an unexpected token type (access or refresh).\n\n- **TOKEN_TYPE_NOT_FOUND_MSG**\n\nReturned when it doesn't our meet our JWT Standards.\n\n- **INVALID_NBF_MSG**\n\nReturned when the nbf value does not exceed the current time.\n\n- **BEARER_ERROR_MSG**\n\nReturned if token was found in Header, but does not start with Bearer.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/iml1111/django-jwt-extended",
    "keywords": "django jwt extended",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-jwt-extended",
    "package_url": "https://pypi.org/project/django-jwt-extended/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-jwt-extended/",
    "project_urls": {
      "Homepage": "https://github.com/iml1111/django-jwt-extended"
    },
    "release_url": "https://pypi.org/project/django-jwt-extended/1.1.0/",
    "requires_dist": [
      "django"
    ],
    "requires_python": "",
    "summary": "An open source Django extension that provides Simple JWT Authentication.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15251013,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ff10c45ee96f7de65cc404598a930c366e9dc1b27a0d39b616988875a826c28",
          "md5": "371519c914da004190a688be75657f9e",
          "sha256": "df68ecf15b4d325ec70f8270663e4d410bfea5d1914fe89f11dc07be318e3511"
        },
        "downloads": -1,
        "filename": "django_jwt_extended-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "371519c914da004190a688be75657f9e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8174,
        "upload_time": "2022-01-19T08:39:42",
        "upload_time_iso_8601": "2022-01-19T08:39:42.423790Z",
        "url": "https://files.pythonhosted.org/packages/7f/f1/0c45ee96f7de65cc404598a930c366e9dc1b27a0d39b616988875a826c28/django_jwt_extended-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c05f486e674b864578c59ac02ec81b9f9553c7cf3026c38d10b64484715dd5c",
          "md5": "ecfd3d51d0577d9b80f490c57fff224f",
          "sha256": "f03334c430a10b998b166bbf48fc2dfe1c2a18d500649b05acd7cf10f2044fc7"
        },
        "downloads": -1,
        "filename": "django-jwt-extended-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ecfd3d51d0577d9b80f490c57fff224f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6901,
        "upload_time": "2022-01-19T08:39:43",
        "upload_time_iso_8601": "2022-01-19T08:39:43.862425Z",
        "url": "https://files.pythonhosted.org/packages/7c/05/f486e674b864578c59ac02ec81b9f9553c7cf3026c38d10b64484715dd5c/django-jwt-extended-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0328fd14d1b71cfaad875db4c5d8b7e0bfe4243a582d9ae20eec3719507a6bd2",
          "md5": "bb114e39bf31f861ae3c5fca309c83cd",
          "sha256": "4ffdf42956597c5dc71fffafc94df1b200172c51b48d10f0a633071e362dfc6a"
        },
        "downloads": -1,
        "filename": "django_jwt_extended-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb114e39bf31f861ae3c5fca309c83cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10597,
        "upload_time": "2022-08-03T07:55:36",
        "upload_time_iso_8601": "2022-08-03T07:55:36.954114Z",
        "url": "https://files.pythonhosted.org/packages/03/28/fd14d1b71cfaad875db4c5d8b7e0bfe4243a582d9ae20eec3719507a6bd2/django_jwt_extended-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcf8c435d4e15a75f9593bc17af4fc69ae0ecab26f065652077a4d880a64bb60",
          "md5": "2974619caf9e7f28852f12deddd6ed5d",
          "sha256": "172cc898897084cefa25a4a1a7eff9cee8c9703c5b1c8d7cd68694e68658cbec"
        },
        "downloads": -1,
        "filename": "django-jwt-extended-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2974619caf9e7f28852f12deddd6ed5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14565,
        "upload_time": "2022-08-03T07:55:38",
        "upload_time_iso_8601": "2022-08-03T07:55:38.738537Z",
        "url": "https://files.pythonhosted.org/packages/dc/f8/c435d4e15a75f9593bc17af4fc69ae0ecab26f065652077a4d880a64bb60/django-jwt-extended-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b40d451b6e27b93a1bef5e13c6d4035e615b61f97900dee297b68d626a7912d5",
          "md5": "e42b72b83ffbfd317e6269d1fd36bab6",
          "sha256": "66f527e020076a9fe11a996524cf48f237f14b16410e7f782f3298cca2e36370"
        },
        "downloads": -1,
        "filename": "django_jwt_extended-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e42b72b83ffbfd317e6269d1fd36bab6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10749,
        "upload_time": "2022-09-29T08:27:39",
        "upload_time_iso_8601": "2022-09-29T08:27:39.809198Z",
        "url": "https://files.pythonhosted.org/packages/b4/0d/451b6e27b93a1bef5e13c6d4035e615b61f97900dee297b68d626a7912d5/django_jwt_extended-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9791ff987f30b657a108bb73f94a1023951eada7cae5aa4c2914cccd64ceefa",
          "md5": "e09ce8d3db825514dd946a41a372a931",
          "sha256": "c98a0d74353d437a3b1a41cf11d066325c8bad7182b3ee0980acdb938a195316"
        },
        "downloads": -1,
        "filename": "django-jwt-extended-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e09ce8d3db825514dd946a41a372a931",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15470,
        "upload_time": "2022-09-29T08:27:42",
        "upload_time_iso_8601": "2022-09-29T08:27:42.540432Z",
        "url": "https://files.pythonhosted.org/packages/d9/79/1ff987f30b657a108bb73f94a1023951eada7cae5aa4c2914cccd64ceefa/django-jwt-extended-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b40d451b6e27b93a1bef5e13c6d4035e615b61f97900dee297b68d626a7912d5",
        "md5": "e42b72b83ffbfd317e6269d1fd36bab6",
        "sha256": "66f527e020076a9fe11a996524cf48f237f14b16410e7f782f3298cca2e36370"
      },
      "downloads": -1,
      "filename": "django_jwt_extended-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e42b72b83ffbfd317e6269d1fd36bab6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10749,
      "upload_time": "2022-09-29T08:27:39",
      "upload_time_iso_8601": "2022-09-29T08:27:39.809198Z",
      "url": "https://files.pythonhosted.org/packages/b4/0d/451b6e27b93a1bef5e13c6d4035e615b61f97900dee297b68d626a7912d5/django_jwt_extended-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9791ff987f30b657a108bb73f94a1023951eada7cae5aa4c2914cccd64ceefa",
        "md5": "e09ce8d3db825514dd946a41a372a931",
        "sha256": "c98a0d74353d437a3b1a41cf11d066325c8bad7182b3ee0980acdb938a195316"
      },
      "downloads": -1,
      "filename": "django-jwt-extended-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e09ce8d3db825514dd946a41a372a931",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15470,
      "upload_time": "2022-09-29T08:27:42",
      "upload_time_iso_8601": "2022-09-29T08:27:42.540432Z",
      "url": "https://files.pythonhosted.org/packages/d9/79/1ff987f30b657a108bb73f94a1023951eada7cae5aa4c2914cccd64ceefa/django-jwt-extended-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}