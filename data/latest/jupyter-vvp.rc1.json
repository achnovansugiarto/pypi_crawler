{
  "info": {
    "author": "Ververica",
    "author_email": "platform@ververica.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# jupyter-vvp\n\n[![Build Status](https://travis-ci.com/ververica/jupyter-vvp.svg?token=oVi8ssiCvCkv55DAek4y&branch=master)](https://travis-ci.com/ververica/jupyter-vvp)\n\nThis extension to Jupyter lets you write and execute Flink SQL statements right from your Jupyter notebooks. \nIt is backed by Ververica Platform's SQL REST API.\n\n## Prerequisites\n\nIn order to use the Jupyter magics, you will require access to an installation of the Ververica Platform.\n\nTo set up Ververica Platform follow the instructions at https://docs.ververica.com/getting_started/index.html\n\n## Compatibility\n\n| Ververica Platform Version | Jupyter-VVP Version |\n|----------------------------|---------------------|\n| 2.3                        | 0.1.0               |\n\n## Installation\n\nThe package can be installed from PyPi with \n```\npip install jupyter-vvp\n```\n\nJupyter VVP comes with a custom kernel that extends `ipykernel` with code-completion for SQL Code through Ververica Platform.\nIn order to use the kernel you need to install it:\n- First locate the installation directory of the package: `pip show jupyter-vvp`\n- Go to the installation directory and install the kernel: `jupyter-kernelspec install jupytervvp/flinksqlkernel`\n\n## Usage\n\n### Loading the extension\n\nFrom within IPython (`ipython3`) or an IPython3 kernel in any local Jupyter instance,\nrun\n```\n%load_ext jupytervpp\n```\nto load the extension and register the magics.\n\n### Connecting to Ververica Platform\n\nIn order to use the Ververica Platform Jupyter magics, you will first need to connect to a Ververica Platform instance.\nThe `%connect_vvp` magic can be used for that:\n```\n%connect_vvp localhost --port 8080 --namespace default -s <your-session-name>\n```\n\n### SQL Statements\n\nThis will set up your notebook to communicate with the Ververica Platform.\nWe can test this by trying a DDL statement, e.g. to display all existing tables:\n```\n%%flink_sql\nSHOW TABLES\n```\n\nThe `flink_sql` magic can, of course, also be used to execute DML statements via the Ververica Platform:\n```\n%%flink_sql\nCREATE TEMPORARY TABLE my_source_table (\nid INT,\ndata STRING\n) WITH (\n'connector' = 'datagen'\n);\nCREATE TEMPORARY TABLE my_sink_table (\ndata STRING\n) WITH (\n'connector' = 'blackhole'\n);\nINSERT INTO my_sink_table SELECT data FROM my_source_table\n```\n\n### Examples\n\nA few example notebook can be found in the [example_notebooks folder](./example_notebooks)\n\n## Advanced Usage\n\n### Sessions\n\nA connection to a Ververica Platform instance is represented by a *session*, \nspecifying its hostname and port,\nand an API token if required.\nThe session has a name for convenient reference.\n\nFrom within IPython (`ipython3`) or an IPython3 kernel in a Jupyter instance,\nrun\n```\n%connect_vvp localhost -p 8080 -n default -s mysession\n```\nThis will connect and create a session with the name `mysession`.\nThe Ververica Platform host in this example is `localhost` and the port is `8080`.\nThe hostname should be the name under which Ververica Platform is accessible from the Jupyter server.\nTo connect to Ververica Platform through HTTPS, use the `--secure` (or `-S`) parameter.\nIn case Ververica Platform uses a self-signed certificate, it is possible to deactivate certificate checking using \n`--secure_self_signed` instead of `--secure`.\nIf no session exists then this session will be set as the default.\n\nSession names are treated by the magics as strings.\nThe corresponding session object, with that name,\nis found and taken from the local user context.\n\nSession names can be listed by executing\n```python\nfrom vvpmagics import vvpsession\nvvpsession.VvpSession.get_sessions()\n```\n\nWhen executing statements a session can be specified via:\n\n```\n%%flinksql mySession\n...\n```\n\n#### Using API Tokens\n\n- The argument `-k <API-Key>` (or `--key <API-Key>`) \n  will use the given value in `<API-Key>` as the API Key.\n- To avoid having keys in notebooks, \n  the argument `-K` or `--prompt_key` can be specified,\n  which asks the user to enter the key,\n  and overrides any value specified by `-k`.\n\nIf no keys are specified, no API keys are used.\n\n#### Examples:\n```\n%connect_vvp HOSTNAME -n default -s mySession -k 10504c2d-55f0-4969-ba83-26fad5f1640f\n%connect_vvp HOSTNAME -n default -s mySession -K\n```\n\n### Substituting user variables\n\nUser variables defined in the notebook can be referenced in `flink_sql` cells.\nTo reference the variable, surround it with braces.\nFor example, setting\n\n```python\ntopic_name = \"myTopic\"\n```\n\nallows the user (as in the example above) to do\n\n```\n%%flink_sql \n\n    .....\n\n   ...: WITH ( \n   ...:     'connector.topic' = '{topic_name}', \n\n    .....\n\n   ...: ) \n```\n\nThe cell is treated as a string,\nand variables are replaced using Python's `string.format()` method,\nso in principle all variables\nthat have a reasonable representation as a string can be used.\nThe scope is the `user_ns` dictionary,\naccessed by Python via the IPython shell object.\n\nTake care to avoid nesting braced expressions,\nbut note that double-brace placeholders may also be used (double-braced placeholders are used in the Flink configuration, \nfor more information see the Flink configuration section below).\n\n\n### Setting deployment parameters\nDeployments of SQL INSERT jobs can be customised by setting parameters.\nThe possible settings keys are listed in a parameters dictionary in the example notebook,\nand its use is shown there.\nTo use these parameters, the switch `-p [parameters-variable-name]` is used in the `flink_sql` Magic.\nIf no switch is specified, the default variable `vvp_default_parameters` is used.\n\nYou may find the following documentation generally useful:\n- [Deployment Template settings](https://docs.ververica.com/user_guide/deployments/deployment_templates.html)\n- [Lifecycle Management settings](https://docs.ververica.com/user_guide/lifecycle_management/index.html)\n\n#### Important parameters\n\nPlease find some frequently used parameters below:\n\n| Setting                               | Possible values                                               | Comment         | Documentation      |\n|---------------------------------------|---------------------------------------------------------------|-----------------|--------------------|\n|`metadata.name`                        | Arbitrary string                                              | If not specified, then this will be the cell contents. | |\n|`metadata.annotations.license/testing` | Boolean: `True` or `False`                                    | The `flink_sql` magic will set this to `False` if not specified. | |\n|`spec.template.spec.parallelism`       | Integer                                                       | | [Link](https://docs.ververica.com/user_guide/deployments/deployment_templates.html#parallelism-number-of-taskmanagers-and-slots) |\n|`spec.restoreStrategy`                 | String: `\"LATEST_STATE\"`, `\"LATEST_SAVEPOINT\"`, or `\"NONE\"`.  | | [Link](https://docs.ververica.com/user_guide/lifecycle_management/index.html#restore-strategy) |\n|`spec.upgradeStrategy`                 | String: `\"STATELESS\"`, `\"STATEFUL\"`, or `\"NONE\"`.             | | [Link](https://docs.ververica.com/user_guide/lifecycle_management/index.html#upgrade-strategy) |\n\n#### Flink Configuration\nIn the deployment settings,\nkeys of the form \n```\nspec.template.spec.flinkConfiguration.<FlinkConfigurationKey>\n```\ncan be used.\nThe user can specify Flink configuration parameters in place of `<FlinkConfigurationKey>`.\nFor example, \n```\n\"spec.template.spec.flinkConfiguration.state.savepoints.dir\": \"s3://flink/savepoints\"\n```\nSee [here](https://docs.ververica.com/user_guide/deployments/configure_flink.html)\nfor deployment configuration documentation.\n\nNote that the placeholders (e.g., `{{Namespace}}`) appearing in `flinkConfiguration` settings\nare left untouched by `%%flink_sql`, so can be used as normal;\ne.g.:\n```\n\"spec.template.spec.flinkConfiguration.state.savepoints.dir\": \"s3://flink/savepoints/{{ namespace }}\"\n```\nSee [here](https://docs.ververica.com/administration/deployment_defaults.html#placeholders-in-flink-configuration)\nfor further details on placeholders.\n\n### Error messages\n\nBoth the `%connect_vvp` and the `%%flink_sql` magics support the `-d/--debug` flag\nto show full error messages.\nIn case of error results from the Ververica Platform it will display the full JSON response.  \n\n### Code completion\n\nWhen using the FlinkSql kernel, SQL queries in a `%%flink_sql` cell will be completed with suggestions from Ververica Platform.\nIn order for code completion to work, a connect_vvp session needs to exist. \nThe default session will be used to communicate with Ververica Platform unless the another session is set for the `%%flink_sql` cell.\nIf any problems occur in the communication with Ververica Platform, code completion will attempt to use the standard Jupyter completion.\n\n![Code Completion](completion.gif)\n\n\n## Help\n```\n%connect_vvp?\n```\nand\n```\n%%flink_sql?\n```\nwill show help texts for the magics.\n\n## Bugs\n\nReport an issue at https://github.com/ververica/jupyter-vvp/issues",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/ververica/jupyter-vvp",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ververica/jupyter-vvp",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jupyter-vvp",
    "package_url": "https://pypi.org/project/jupyter-vvp/",
    "platform": "",
    "project_url": "https://pypi.org/project/jupyter-vvp/",
    "project_urls": {
      "Download": "https://github.com/ververica/jupyter-vvp",
      "Homepage": "https://github.com/ververica/jupyter-vvp"
    },
    "release_url": "https://pypi.org/project/jupyter-vvp/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Jupyter VVP: Flink SQL in Jupyter Notebooks via Ververica Platform",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8456710,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f61e492b2786ede904593b2a82cb31dce2d79877532fbb2595d76675b185a93d",
          "md5": "83af5943dab6bb435196e2c4a8ef3161",
          "sha256": "933c11484d1603db00882842efae1b3396db7bf02074d339d17bf03f2c350803"
        },
        "downloads": -1,
        "filename": "jupyter-vvp-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "83af5943dab6bb435196e2c4a8ef3161",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18898,
        "upload_time": "2020-10-20T12:25:01",
        "upload_time_iso_8601": "2020-10-20T12:25:01.200271Z",
        "url": "https://files.pythonhosted.org/packages/f6/1e/492b2786ede904593b2a82cb31dce2d79877532fbb2595d76675b185a93d/jupyter-vvp-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f61e492b2786ede904593b2a82cb31dce2d79877532fbb2595d76675b185a93d",
        "md5": "83af5943dab6bb435196e2c4a8ef3161",
        "sha256": "933c11484d1603db00882842efae1b3396db7bf02074d339d17bf03f2c350803"
      },
      "downloads": -1,
      "filename": "jupyter-vvp-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "83af5943dab6bb435196e2c4a8ef3161",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18898,
      "upload_time": "2020-10-20T12:25:01",
      "upload_time_iso_8601": "2020-10-20T12:25:01.200271Z",
      "url": "https://files.pythonhosted.org/packages/f6/1e/492b2786ede904593b2a82cb31dce2d79877532fbb2595d76675b185a93d/jupyter-vvp-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}