{
  "info": {
    "author": "Johannes Bauer",
    "author_email": "joe@johannes-bauer.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# x509sak\n[![Build Status](https://app.travis-ci.com/johndoe31415/x509sak.svg?branch=master)](https://app.travis-ci.com/johndoe31415/x509sak)\n\nX.509 Swiss Army Knife (x509sak) is a toolkit written in Python that acts as a\nboilerplate on top of OpenSSL to ease creation of X.509 certificates,\ncertificate signing requests and CAs. It can automatically find CA chains and\noutput them in a specifically desired format, graph CA hierarchies and more.\n\nThe tool is used similarly to OpenSSL in its syntax. The help page is meant to\nbe comprehensive and self-explanatory. These are the currently available commands:\n\n[//]: # (Begin of summary -- auto-generated, do not edit!)\n```\n$ ./x509sak.py\nError: No command supplied.\nSyntax: ./x509sak.py [command] [options]\n\nAvailable commands:\n\nversion: x509sak v0.0.2\n\nOptions vary from command to command. To receive further info, type\n    ./x509sak.py [command] --help\n    buildchain         Build a certificate chain\n    graph              Graph a certificate pool\n    findcrt            Find a specific certificate\n    createca           Create a new certificate authority (CA)\n    createcsr          Create a new certificate signing request (CSR) or\n                       certificate\n    signcsr            Make a certificate authority (CA) sign a certificate\n                       signing request (CSR) and output the certificate\n    revokecrt          Revoke a specific certificate\n    createcrl          Generate a certificate revocation list (CRL)\n    genbrokenrsa       Generate broken RSA keys for use in penetration testing\n    genbrokendsa       Generate broken DSA parameters for use in penetration\n                       testing\n    dumpkey            Dump a key in text form\n    examinecert        Examine an X.509 certificate\n    forgecert          Forge an X.509 certificate\n    scrape             Scrape input file for certificates, keys or signatures\n    hashpart           Hash all substrings of a file and search for a\n                       particular hash value\n```\n[//]: # (End of summary -- auto-generated, do not edit!)\n\n## Dependencies\nx509sak requires Python3, pyasn1 and pyasn1_modules support. It also relies on\nOpenSSL. If you want graph support, then you also need to install the Graphviz\npackage as well. Note that pyasn1_modules inside the Ubuntu tree (up until\n3'2018, Ubuntu Artful MATE, v0.0.7-0.1) is broken and you'll need to use a\nnewer version (0.2.1 works). In later Ubuntu versions (Bionic) this is already\nincluded by default:\n\n```\n# apt-get install openssl python3-pyasn1 python3-pyasn1-modules graphviz\n```\n\nIf you want to run all the tests, you should also have SoftHSM2, OpenSC and the\nPKCS#11 OpenSSL engine driver installed to be able to do PKCS#11 testing:\n\n```\n# apt-get install opensc softhsm2 libengine-pkcs11-openssl\n```\n\n\n## Using x509sak with hardware tokens\nx509sak works nicely with hardware tokens such as the NitroKey HSM. It does not\nallow key generation for these devices, but can use the pre-generated keys for\nCA management. For example, let's say you used a [tool like\nnitrotool](https://github.com/johndoe31415/nitrotool) to generate an ECC\nkeypair that is called \"my_secure_key\". You now want a CA that's based off that\nkey.  Quite an easy task:\n\n```\n$ ./x509sak.py createca -w \"pkcs11:object=my_secure_key;type=private\" -s \"/CN=My Secure CA\" my_secure_ca\nEnter PKCS#11 token PIN for UserPIN (SmartCard-HSM): 123456\n```\n\nYou enter your Pin, hit return and it's done! The CA has been created:\n\n```\n$ openssl x509 -in my_secure_ca/CA.crt -text -noout\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            c3:86:c2:43:4b:2d:62:12\n        Signature Algorithm: ecdsa-with-SHA256\n        Issuer: CN = My Secure CA\n        Validity\n            Not Before: Jul 14 10:47:49 2018 GMT\n            Not After : Jul 14 10:47:49 2019 GMT\n        Subject: CN = My Secure CA\n        Subject Public Key Info:\n            Public Key Algorithm: id-ecPublicKey\n                Public-Key: (256 bit)\n                pub:\n                    04:8a:8f:c7:99:3b:b1:cf:63:5f:c7:c8:87:50:80:\n                    26:4d:22:96:9f:2f:67:f8:ea:f6:f2:1b:96:e4:e2:\n                    4b:af:15:fe:79:77:52:50:d1:f6:a3:20:7b:ca:ce:\n                    5e:bc:25:5e:30:2d:1a:71:cb:8f:ff:79:46:4f:ec:\n                    58:04:e1:f7:f0\n                ASN1 OID: prime256v1\n                NIST CURVE: P-256\n        X509v3 extensions:\n            X509v3 Basic Constraints: critical\n                CA:TRUE\n            X509v3 Key Usage: critical\n                Digital Signature, Certificate Sign, CRL Sign\n            X509v3 Subject Key Identifier: \n                9B:4E:14:4E:0D:C5:23:D9:06:06:06:7D:39:8F:3C:88:1D:66:35:55\n    Signature Algorithm: ecdsa-with-SHA256\n         30:45:02:20:79:a2:91:1e:ca:2d:18:5b:26:59:14:b1:f1:0c:\n         2f:0f:41:d8:ab:bc:02:2f:e9:c2:dc:97:c1:19:67:9e:c7:8d:\n         02:21:00:ef:73:02:6a:a4:ad:e8:f0:ef:49:02:cf:34:08:b7:\n         2e:fa:82:16:47:8c:44:7f:bb:ad:f0:c0:be:7a:e6:e1:81\n```\n\nIt's similarly easy to create certificates off this hardware-backed CA:\n\n```\n$ ./x509sak.py createcsr -s \"/CN=Software Key Client\" -t tls-client -c my_secure_ca client.key client.crt\nEnter PKCS#11 token PIN for UserPIN (SmartCard-HSM):\n```\n\nAgain, with one command you've created the client certificate:\n\n```\n$ openssl x509 -in client.crt -text -noout\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number: 1 (0x1)\n        Signature Algorithm: ecdsa-with-SHA256\n        Issuer: CN = My Secure CA\n        Validity\n            Not Before: Jul 14 10:50:19 2018 GMT\n            Not After : Jul 14 10:50:19 2019 GMT\n        Subject: CN = Software Key Client\n        Subject Public Key Info:\n            Public Key Algorithm: id-ecPublicKey\n                Public-Key: (384 bit)\n                pub:\n                    04:5a:68:1b:f2:ea:29:71:23:39:66:bd:b7:6a:9c:\n                    0c:69:8d:a9:e8:7f:93:a8:32:21:d7:f2:93:e8:52:\n                    c5:83:65:7b:13:62:04:9f:64:c6:54:fd:24:8a:64:\n                    d2:49:cd:8d:27:61:b3:41:44:d3:89:51:39:78:29:\n                    b2:ff:1a:3a:b6:e0:74:c6:15:92:26:f9:42:2b:0d:\n                    04:74:1b:3d:13:f8:78:53:a5:be:6f:13:04:01:05:\n                    f7:40:4b:6a:89:4c:54\n                ASN1 OID: secp384r1\n                NIST CURVE: P-384\n        X509v3 extensions:\n            X509v3 Authority Key Identifier: \n                keyid:9B:4E:14:4E:0D:C5:23:D9:06:06:06:7D:39:8F:3C:88:1D:66:35:55\n\n            X509v3 Basic Constraints: critical\n                CA:FALSE\n            X509v3 Extended Key Usage: \n                TLS Web Client Authentication\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment, Key Agreement\n            Netscape Cert Type: \n                SSL Client\n            X509v3 Subject Key Identifier: \n                0C:1F:31:4C:BA:E2:C6:33:65:9D:ED:DA:FC:16:29:27:E0:95:AF:E2\n    Signature Algorithm: ecdsa-with-SHA256\n         30:44:02:20:3f:84:40:bb:50:2e:7c:8c:3b:2f:51:80:f9:20:\n         a7:bb:7d:17:58:c6:44:70:20:eb:74:46:5a:ae:95:4e:9e:81:\n         02:20:0c:98:35:63:8d:2f:1b:ad:32:d4:06:2f:c8:e7:2c:8a:\n         79:b7:5a:e0:21:51:63:0b:39:82:9f:ff:8d:ee:c3:e2\n```\n\nFor simplicity, you can specify either a full pkcs11-URI according to RFC7512\nor you can use certain abbreviations that make it easier. All of the following\nwork for a key that's named 'my key' and that has ID 0xabcd:\n\n```\npkcs11:object=my%20key;type=private\npkcs11:id=%ab%cd;type=private\nlabel=my key\nid=0xabcd\nid=43981\n```\n\nThe latter variants (label=..., id=...) will automatically be converted to\npkcs11 URIs internally.\n\n## buildchain\nThe \"buildchain\" command is useful if you want to have a complete (or partial)\ncertificate chain from a given leaf certificate and a bundle of CAs. x509sak\nwill figure out which of the CAs are appropriate (if any) and generate a chain\nin the order you want (root to leaf or leaf to root) including the certs you\nwant (e.g., all certificates, all except root cert, etc.). This is useful if\nyou have, for example, a webserver certificate and want to automatically find\nthe chain of trust that you can use to deploy on your webserver.\n\n[//]: # (Begin of cmd-buildchain -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py buildchain [-s path] [--inform {pem,der}]\n                               [--order-leaf-to-root] [--allow-partial-chain]\n                               [--dont-trust-crtfile]\n                               [--outform {rootonly,intermediates,fullchain,all-except-root,multifile,pkcs12}]\n                               [--private-key filename]\n                               [--pkcs12-legacy-crypto]\n                               [--pkcs12-no-passphrase | --pkcs12-passphrase-file filename]\n                               [-o file] [-v] [--help]\n                               crtfile\n\nBuild a certificate chain\n\npositional arguments:\n  crtfile               Certificate that a chain shall be build for, in PEM\n                        format.\n\noptional arguments:\n  -s path, --ca-source path\n                        CA file (PEM format) or directory (containing\n                        .pem/.crt files) to include when building the chain.\n                        Can be specified multiple times to include multiple\n                        locations.\n  --inform {pem,der}    Specifies input file format for certificate. Possible\n                        options are pem, der. Default is pem.\n  --order-leaf-to-root  By default, certificates are ordered with the root CA\n                        first and intermediate certificates following up to\n                        the leaf. When this option is specified, the order is\n                        inverted and go from leaf certificate to root.\n  --allow-partial-chain\n                        When building the certificate chain, a full chain must\n                        be found or the chain building fails. When this option\n                        is specified, also partial chain matches are\n                        permitted, i.e., not going up to a root CA. Note that\n                        this can have undesired side effects when no root\n                        certificates are found at all (the partial chain will\n                        then consist of only the leaf certificate itself).\n  --dont-trust-crtfile  When there's multiple certificates in the given\n                        crtfile in PEM format, they're by default all added to\n                        the truststore. With this option, only the leaf cert\n                        is taken from the crtfile and they're not added to the\n                        trusted pool.\n  --outform {rootonly,intermediates,fullchain,all-except-root,multifile,pkcs12}\n                        Specifies what to write into the output file. Possible\n                        options are rootonly, intermediates, fullchain, all-\n                        except-root, multifile, pkcs12. Default is fullchain.\n                        When specifying multifile, a %d format must be\n                        included in the filename to serve as a template;\n                        typical printf-style formatting can be used of course\n                        (e.g., %02d).\n  --private-key filename\n                        When creating a PKCS#12 output file, this private key\n                        can also be included. By default, only the\n                        certificates are exported.\n  --pkcs12-legacy-crypto\n                        Use crappy crypto to encrypt a PKCS#12 exported\n                        private key.\n  --pkcs12-no-passphrase\n                        Do not use any passphrase to protect the PKCS#12\n                        private key.\n  --pkcs12-passphrase-file filename\n                        Read the PKCS#12 passphrase from the first line of the\n                        given file. If omitted, by default a random passphrase\n                        will be generated and printed on stderr.\n  -o file, --outfile file\n                        Specifies the output filename. Defaults to stdout.\n  -v, --verbose         Increase verbosity level. Can be specified multiple\n                        times.\n  --help                Show this help page.\n```\n[//]: # (End of cmd-buildchain -- auto-generated, do not edit!)\n\n## graph\nThe graph utility can be used to plot multiple certificates and their\ncertificate hierarchy. Some metadata is displayed within the graph as well.\nHere's an example of some certificates that I've plotted:\n\n![Certificate Graph](https://raw.githubusercontent.com/johndoe31415/x509sak/master/docs/test_graph.png)\n\n[//]: # (Begin of cmd-graph -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py graph [-c {certtype,expiration,keytype,sigtype}]\n                          [--abbreviate-to charcnt] [-l text]\n                          [-f {dot,png,ps,pdf}] -o file [-v] [--help]\n                          crtsource [crtsource ...]\n\nGraph a certificate pool\n\npositional arguments:\n  crtsource             Certificate file (in PEM format) or directory\n                        (containting PEM-formatted .pem or .crt files) which\n                        should be included in the graph.\n\noptional arguments:\n  -c {certtype,expiration,keytype,sigtype}, --color-scheme {certtype,expiration,keytype,sigtype}\n                        Color scheme to use when coloring the certificates.\n                        Can either color by expiration date, by certificate\n                        type (client/server/CA/...), key type (RSA/ECC/etc),\n                        signature type (used hash function) or overall\n                        security level. Defaults to expiration.\n  --abbreviate-to charcnt\n                        Abbreviate each line to this amount of characters.\n                        Defaults to 30 characters.\n  -l text, --label text\n                        Label that is printed in the certificate nodes. Can be\n                        given multiple times to specify multiple lines.\n                        Substitutions that are supported are derhash,\n                        filebasename, filename, subject, subject_rfc2253,\n                        valid_not_after. Defaults to ['%(filebasename)s\n                        (%(derhash)s)', '%(subject)s', '%(valid_not_after)s'].\n  -f {dot,png,ps,pdf}, --format {dot,png,ps,pdf}\n                        Specifies the output file format. Can be one of dot,\n                        png, ps, pdf. When unspecified, the file extension out\n                        the output file is used to determine the file type.\n  -o file, --outfile file\n                        Specifies the output filename. Mandatory argument.\n  -v, --verbose         Increase verbosity level. Can be specified multiple\n                        times.\n  --help                Show this help page.\n```\n[//]: # (End of cmd-graph -- auto-generated, do not edit!)\n\n## findcrt\nWhen looking for a bunch of certificates (some of which might be in PEM format)\nby their authoritative hash (i.e., the SHA256 hash over their\nDER-representation), findcrt can help you out. You specify a bunch of\ncertificates and the hash prefix you're looking for and x509sak will show it to\nyou.\n\n[//]: # (Begin of cmd-findcrt -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py findcrt [-h hash] [-v] [--help] crtsource [crtsource ...]\n\nFind a specific certificate\n\npositional arguments:\n  crtsource             Certificate file (in PEM format) or directory\n                        (containting PEM-formatted .pem or .crt files) which\n                        should be included in the search.\n\noptional arguments:\n  -h hash, --hashval hash\n                        Find only certificates with a particular hash prefix.\n  -v, --verbose         Increase verbosity level. Can be specified multiple\n                        times.\n  --help                Show this help page.\n```\n[//]: # (End of cmd-findcrt -- auto-generated, do not edit!)\n\n## createca\nCreating a CA structure that can be used with \"openssl ca\" is tedious. The\n\"createca\" command does exactly this for you in one simple command. The created\nOpenSSL config file directly works with \"openssl ca\" for manual operation but\ncan also be used with other x509sak commands (e.g., creating or revoking\ncertificates). x509sak takes care that you have all the necessary setup files\nin place (index, serial, etc.) and can just as easily create intermediate CAs\nas it can create root CAs.\n\n[//]: # (Begin of cmd-createca -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py createca [-g keyspec | -w pkcs11uri]\n                             [--pkcs11-so-search path]\n                             [--pkcs11-module sofile] [-p capath] [-s subject]\n                             [-d days] [-h alg] [--serial serial]\n                             [--allow-duplicate-subjects]\n                             [--extension key=value] [-f] [-v] [--help]\n                             capath\n\nCreate a new certificate authority (CA)\n\npositional arguments:\n  capath                Directory to create the new CA in.\n\noptional arguments:\n  -g keyspec, --gen-keyspec keyspec\n                        Private key specification to generate. Examples are\n                        rsa:1024 or ecc:secp256r1. Defaults to ecc:secp384r1.\n  -w pkcs11uri, --hardware-key pkcs11uri\n                        Use a hardware token which stores the private key. The\n                        parameter gives the pkcs11 URI, e.g.,\n                        'pkcs11:object=mykey;type=private'\n  --pkcs11-so-search path\n                        Gives the path that will be searched for the \"dynamic\"\n                        and \"module\" shared objects. The \"dynamic\" shared\n                        object is libpkcs11.so, the \"module\" shared object can\n                        be changed by the --pkcs11-module option. The search\n                        path defaults to\n                        /usr/local/lib:/usr/lib:/usr/lib/x86_64-linux-\n                        gnu:/usr/lib/x86_64-linux-\n                        gnu/openssl-1.0.2/engines:/usr/lib/x86_64-linux-\n                        gnu/engines-1.1.\n  --pkcs11-module sofile\n                        Name of the \"module\" shared object when using PKCS#11\n                        keys. Defaults to opensc-pkcs11.so.\n  -p capath, --parent-ca capath\n                        Parent CA directory. If omitted, CA certificate will\n                        be self-signed.\n  -s subject, --subject-dn subject\n                        CA subject distinguished name. Defaults to /CN=Root\n                        CA.\n  -d days, --validity-days days\n                        Number of days that the newly created CA will be valid\n                        for. Defaults to 365 days.\n  -h alg, --hashfnc alg\n                        Hash function to use for signing the CA certificate.\n                        Defaults to sha384.\n  --serial serial       Serial number to use for root CA certificate.\n                        Randomized by default.\n  --allow-duplicate-subjects\n                        By default, subject distinguished names of all valid\n                        certificates below one CA must be unique. This option\n                        allows the CA to have duplicate distinguished names\n                        for certificate subjects.\n  --extension key=value\n                        Additional certificate X.509 extension to include on\n                        top of the default CA extensions. Can be specified\n                        multiple times.\n  -f, --force           By default, the capath will not be overwritten if it\n                        already exists. When this option is specified the\n                        complete directory will be erased before creating the\n                        new CA.\n  -v, --verbose         Increase verbosity level. Can be specified multiple\n                        times.\n  --help                Show this help page.\n```\n[//]: # (End of cmd-createca -- auto-generated, do not edit!)\n\n## createcsr\nThe \"createcsr\" command can (as the name suggests) create CSRs, but also can\ndirectly generate CRTs that are signed by a previously created CA. The\nadvantage over using OpenSSL manually is that the API is quite simple to\nconfigure the certificate manually for most cases (e.g., webserver certificates\nwith X.509 Subject Alternative Name set), but also is flexible enough for\ncustom stuff by including your custom extensions directly into the extension\nfile configuration used by OpenSSL.\n\n[//]: # (Begin of cmd-createcsr -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py createcsr [-g keyspec] [-k {pem,der,hw}] [-s subject]\n                              [-d days] [-h alg]\n                              [-t {rootca,ca,tls-server,tls-client}]\n                              [--san-dns FQDN] [--san-ip IP]\n                              [--extension key=value] [-f] [-c capath] [-v]\n                              [--help]\n                              in_key_filename out_filename\n\nCreate a new certificate signing request (CSR) or certificate\n\npositional arguments:\n  in_key_filename       Filename of the input private key or PKCS#11 URI (as\n                        specified in RFC7512 in case of a hardware key type.\n  out_filename          Filename of the output certificate signing request or\n                        certificate.\n\noptional arguments:\n  -g keyspec, --gen-keyspec keyspec\n                        Private key specification to generate for the\n                        certificate or CSR when it doesn't exist. Examples are\n                        rsa:1024 or ecc:secp256r1.\n  -k {pem,der,hw}, --keytype {pem,der,hw}\n                        Private key type. Can be any of pem, der, hw. Defaults\n                        to pem.\n  -s subject, --subject-dn subject\n                        Certificate/CSR subject distinguished name. Defaults\n                        to /CN=New Cert.\n  -d days, --validity-days days\n                        When creating a certificate, number of days that the\n                        certificate will be valid for. Defaults to 365 days.\n  -h alg, --hashfnc alg\n                        Hash function to use for signing when creating a\n                        certificate. Defaults to the default hash function\n                        specified in the CA config.\n  -t {rootca,ca,tls-server,tls-client}, --template {rootca,ca,tls-server,tls-client}\n                        Template to use for determining X.509 certificate\n                        extensions. Can be one of rootca, ca, tls-server, tls-\n                        client. By default, no extensions are included except\n                        for SAN.\n  --san-dns FQDN        Subject Alternative DNS name to include in the\n                        certificate or CSR. Can be specified multiple times.\n  --san-ip IP           Subject Alternative IP address to include in the\n                        certificate or CSR. Can be specified multiple times.\n  --extension key=value\n                        Additional certificate X.509 extension to include on\n                        top of the extensions in the template and by the SAN\n                        parameters. Can be specified multiple times.\n  -f, --force           Overwrite the output file if it already exists.\n  -c capath, --create-crt capath\n                        Instead of creating a certificate signing request,\n                        directly create a certificate instead. Needs to supply\n                        the CA path that should issue the certificate.\n  -v, --verbose         Increase verbosity level. Can be specified multiple\n                        times.\n  --help                Show this help page.\n```\n[//]: # (End of cmd-createcsr -- auto-generated, do not edit!)\n\n## signcsr\nThe signcsr command allows you to turn a CSR into a certificate by signing it\nby a CA private key.\n\n[//]: # (Begin of cmd-signcsr -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py signcsr [-s subject] [-d days] [-h alg]\n                            [-t {rootca,ca,tls-server,tls-client}]\n                            [--san-dns FQDN] [--san-ip IP]\n                            [--extension key=value] [-f] [-v] [--help]\n                            capath in_csr_filename out_crt_filename\n\nMake a certificate authority (CA) sign a certificate signing request (CSR) and\noutput the certificate\n\npositional arguments:\n  capath                Directory of the signing CA.\n  in_csr_filename       Filename of the input certificate signing request.\n  out_crt_filename      Filename of the output certificate.\n\noptional arguments:\n  -s subject, --subject-dn subject\n                        Certificate's subject distinguished name. Defaults to\n                        the subject given in the CSR.\n  -d days, --validity-days days\n                        Number of days that the newly created certificate will\n                        be valid for. Defaults to 365 days.\n  -h alg, --hashfnc alg\n                        Hash function to use for signing. Defaults to the\n                        default hash function specified in the CA config.\n  -t {rootca,ca,tls-server,tls-client}, --template {rootca,ca,tls-server,tls-client}\n                        Template to use for determining X.509 certificate\n                        extensions. Can be one of rootca, ca, tls-server, tls-\n                        client. By default, no extensions are included except\n                        for SAN.\n  --san-dns FQDN        Subject Alternative DNS name to include in the\n                        certificate. Can be specified multiple times.\n  --san-ip IP           Subject Alternative IP address to include in the CRT.\n                        Can be specified multiple times.\n  --extension key=value\n                        Additional certificate X.509 extension to include on\n                        top of the extensions in the template and by the SAN\n                        parameters. Can be specified multiple times.\n  -f, --force           Overwrite the output certificate file if it already\n                        exists.\n  -v, --verbose         Increase verbosity level. Can be specified multiple\n                        times.\n  --help                Show this help page.\n```\n[//]: # (End of cmd-signcsr -- auto-generated, do not edit!)\n\n## revokecrt\nWith revokecrt it's possible to easily revoke a certificate that you've\nprevious generated. Simply specify the CA and the certificate that you want to\nrevoke and you're set.\n\n[//]: # (Begin of cmd-revokecrt -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py revokecrt [-v] [--help] capath crt_filename\n\nRevoke a specific certificate\n\npositional arguments:\n  capath         CA which created the certificate.\n  crt_filename   Filename of the output certificate.\n\noptional arguments:\n  -v, --verbose  Increase verbosity level. Can be specified multiple times.\n  --help         Show this help page.\n```\n[//]: # (End of cmd-revokecrt -- auto-generated, do not edit!)\n\n## createcrl\nThe createcrl command does what it suggests: It creates a CRL for a given CA\nthat is valid for a specified duration and that's signed with a given hash\nfunction.\n\n[//]: # (Begin of cmd-createcrl -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py createcrl [-d days] [-h alg] [-v] [--help]\n                              capath crl_filename\n\nGenerate a certificate revocation list (CRL)\n\npositional arguments:\n  capath                CA which should generate the CRL.\n  crl_filename          Filename of the output CRL.\n\noptional arguments:\n  -d days, --validity-days days\n                        Number of days until the CRLs 'nextUpdate' field will\n                        expire. Defaults to 30 days.\n  -h alg, --hashfnc alg\n                        Hash function to use for signing the CRL. Defaults to\n                        sha256.\n  -v, --verbose         Increase verbosity level. Can be specified multiple\n                        times.\n  --help                Show this help page.\n```\n[//]: # (End of cmd-createcrl -- auto-generated, do not edit!)\n\n## genbrokenrsa\nWith genbrokenrsa it is possible to generate deliberately malformed or odd RSA\nkeys. For example, RSA keys with a custom value for the public exponent e, or\nRSA keys which have a very small exponent d (e.g, 3) and a correspondingly\nlarge exponent e. Note that keys generated by this tool are *exclusively for\ntesting purposes* and may not, under any circumstances, be used for actual\ncryptographic applications. They are *not secure*.\n\n[//]: # (Begin of cmd-genbrokenrsa -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py genbrokenrsa [-d path] [-b bits] [-e exp] [--switch-e-d]\n                                 [--accept-unusable-key]\n                                 [--carmichael-totient] [--generator file]\n                                 [--gcd-n-phi-n | --close-q]\n                                 [--q-stepping int] [-o file] [-f] [-v]\n                                 [--help]\n\nGenerate broken RSA keys for use in penetration testing\n\noptional arguments:\n  -d path, --prime-db path\n                        Prime database directory. Defaults to . and searches\n                        for files called primes_{bitlen}.txt in this\n                        directory.\n  -b bits, --bitlen bits\n                        Bitlength of modulus. Defaults to 2048 bits.\n  -e exp, --public-exponent exp\n                        Public exponent e (or d in case --switch-e-d is\n                        specified) to use. Defaults to 0x10001. Will be\n                        randomly chosen from 2..n-1 if set to -1.\n  --switch-e-d          Switch e with d when generating keypair.\n  --accept-unusable-key\n                        Disregard integral checks, such as if gcd(e, phi(n))\n                        == 1 before inverting e. Might lead to an unusable key\n                        or might fail altogether.\n  --carmichael-totient  By default, d is computed as the modular inverse of e\n                        to phi(n), the Euler Totient function. This computes d\n                        as the modular inverse of e to lambda(n), the\n                        Carmichael Totient function, instead.\n  --generator file      When prime database is exhausted, will call the prime\n                        generator program as a subprocess to generate new\n                        primes. Otherwise, and the default behavior, is to\n                        fail.\n  --gcd-n-phi-n         Generate a keypair in which gcd(n, phi(n)) != 1 by\n                        specially constructing the prime q. This will lead to\n                        a size disparity of p and q and requires 3-msb primes\n                        as input.\n  --close-q             Use a value for q that is very close to the value of p\n                        so that search starting from sqrt(n) is\n                        computationally feasible to factor the modulus. Note\n                        that for this, the bitlength of the modulus must be\n                        evenly divisible by two.\n  --q-stepping int      When creating a close-q RSA keypair, q is chosen by\n                        taking p and incrementing it repeatedly by a random\n                        int from 2 to (2 * q-stepping). The larger q-stepping\n                        is therefore chosen, the further apart p and q will\n                        be. By default, q-stepping is the minimum value of 1.\n  -o file, --outfile file\n                        Output filename. Defaults to broken_rsa.key.\n  -f, --force           Overwrite output file if it already exists instead of\n                        bailing out.\n  -v, --verbose         Increase verbosity level. Can be specified multiple\n                        times.\n  --help                Show this help page.\n```\n[//]: # (End of cmd-genbrokenrsa -- auto-generated, do not edit!)\n\n## genbrokendsa\nSimilar to the previous command, this can be used to create DSA domain\nparameters that are insecure and/or undesirable (e.g., because the generator is\nnot verifiable).\n\n[//]: # (Begin of cmd-genbrokendsa -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py genbrokendsa [-d path] [--generator file] [-o file] [-f]\n                                 [-v] [--help]\n                                 L_bits N_bits\n\nGenerate broken DSA parameters for use in penetration testing\n\npositional arguments:\n  L_bits                Bitlength of the modulus p, also known as L.\n  N_bits                Bitlength of q, also known as N.\n\noptional arguments:\n  -d path, --prime-db path\n                        Prime database directory. Defaults to . and searches\n                        for files called primes_{bitlen}.txt in this\n                        directory.\n  --generator file      When prime database is exhausted, will call the prime\n                        generator program as a subprocess to generate new\n                        primes. Otherwise, and the default behavior, is to\n                        fail.\n  -o file, --outfile file\n                        Output filename. Defaults to broken_dsa.key.\n  -f, --force           Overwrite output file if it already exists instead of\n                        bailing out.\n  -v, --verbose         Increase verbosity level. Can be specified multiple\n                        times.\n  --help                Show this help page.\n```\n[//]: # (End of cmd-genbrokendsa -- auto-generated, do not edit!)\n\n## dumpkey\nThe dumpkey facility can be used to dump the public/private key parameters of a\ngiven PEM keyfile into Python-code for further processing.\n\n[//]: # (Begin of cmd-dumpkey -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py dumpkey [-t {rsa,ecc,eddsa}] [-p] [-v] [--help]\n                            key_filename\n\nDump a key in text form\n\npositional arguments:\n  key_filename          Filename of the input key file in PEM format.\n\noptional arguments:\n  -t {rsa,ecc,eddsa}, --key-type {rsa,ecc,eddsa}\n                        Type of private key to import. Can be one of rsa, ecc,\n                        eddsa, defaults to rsa. Disregarded for public keys\n                        and determined automatically.\n  -p, --public-key      Input is a public key, not a private key.\n  -v, --verbose         Increase verbosity level. Can be specified multiple\n                        times.\n  --help                Show this help page.\n```\n[//]: # (End of cmd-dumpkey -- auto-generated, do not edit!)\n\n## examinecert\nUsing the examinecert facility you can plausibilize certificates and check them\nfor all kinds of errors that can happen. It also gives a security estimate of\nthe used algorithms and highlights things that are unusual. For example, RSA\nwith large exponents is something that is entirely safe, but definitely\nunusual. Missing key usage flags or important extensions will also be reported\nalong with standards violations (mainly RFC5280) -- it also gives you the exact\nlocation of the RFC (including section) that has been violated.\n\n[//]: # (Begin of cmd-examinecert -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py examinecert [-p {ca,tls-server,tls-client}] [-n fqdn]\n                                [-f {ansitext,text,json}]\n                                [-i {pemcrt,dercrt,json,host}] [-r pemfile]\n                                [--no-automatic-host-check] [--fast-rsa]\n                                [--include-raw-data] [--pretty-json]\n                                [-o filename] [-v] [--help]\n                                filename/uri [filename/uri ...]\n\nExamine an X.509 certificate\n\npositional arguments:\n  filename/uri          Filename of the input certificate or certificates in\n                        PEM format.\n\noptional arguments:\n  -p {ca,tls-server,tls-client}, --purpose {ca,tls-server,tls-client}\n                        Check if the certificate is fit for the given purpose.\n                        Can be any of ca, tls-server, tls-client, can be\n                        specified multiple times.\n  -n fqdn, --server-name fqdn\n                        Check if the certificate is valid for the given\n                        hostname.\n  -f {ansitext,text,json}, --out-format {ansitext,text,json}\n                        Determine the output format. Can be one of ansitext,\n                        text, json, defaults to ansitext.\n  -i {pemcrt,dercrt,json,host}, --in-format {pemcrt,dercrt,json,host}\n                        Specifies the type of file that is read in. Can be\n                        either certificate files in PEM or DER format, a pre-\n                        processed JSON output from a previous run or a\n                        hostname[:port] combination to query a TLS server\n                        directly (port defaults to 443 if omitted). Valid\n                        choices are pemcrt, dercrt, json, host, defaults to\n                        pemcrt.\n  -r pemfile, --parent-certificate pemfile\n                        Specifies a parent CA certificate that is used to run\n                        additional checks against the certificate.\n  --no-automatic-host-check\n                        By default, when the input format is a given hostname,\n                        the server name is assumed as well and the purpose is\n                        assumed to be a TLS server. When this option is\n                        specified, these automatic checks are omitted.\n  --fast-rsa            Skip some time-intensive number theoretical tests for\n                        RSA moduli in order to speed up checking. Less\n                        thorough, but much faster.\n  --include-raw-data    Add the raw data such as base64-encoded certificate\n                        and signatures into the result as well.\n  --pretty-json         Prettyfy any generated JSON output.\n  -o filename, --output filename\n                        Specify the output file. Defaults to stdout.\n  -v, --verbose         Increase verbosity level. Can be specified multiple\n                        times.\n  --help                Show this help page.\n```\n[//]: # (End of cmd-examinecert -- auto-generated, do not edit!)\n\n## forgecert\nWith the forgecert tool you can forge a certificate chain. The input PEM file\nmust begin with a self-signed root certificate and each following certificate\nmust descend from its predecessor. The functionality is rather simplistic\ncurrently. The purpose is to create certificates which look and feel like their\n\"original\" counterparts, but are obviously fakes. This is for white hat testing\nof implementations.\n\n[//]: # (Begin of cmd-forgecert -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py forgecert [--key_template path] [--cert_template path]\n                              [-r] [-f] [-v] [--help]\n                              crt_filename\n\nForge an X.509 certificate\n\npositional arguments:\n  crt_filename          Filename of the input certificate or certificates PEM\n                        format.\n\noptional arguments:\n  --key_template path   Output template for key files. Should contain '%d' to\n                        indicate element in chain. Defaults to\n                        'forged_%02d.key'.\n  --cert_template path  Output template for certificate files. Should contain\n                        '%d' to indicate element in chain. Defaults to\n                        'forged_%02d.crt'.\n  -r, --recalculate-keyids\n                        By default, Subject Key Identifier and Authority Key\n                        Identifier X.509 extensions are kept as-is in the\n                        forged certificates. Specifying this will recalculate\n                        the IDs to fit the forged keys.\n  -f, --force           Overwrite key/certificate files.\n  -v, --verbose         Increase verbosity level. Can be specified multiple\n                        times.\n  --help                Show this help page.\n```\n[//]: # (End of cmd-forgecert -- auto-generated, do not edit!)\n\n## scrape\nWith the scrape tool you can analyze binary blobs or whole disks and search\nthem for PEM or DER-encoded blobs. This is interesting if, for example, you're\ndoing firmware analysis. DER analysis is quite slow because for every potential\nsequence beginning (0x30), decoding of all supported schema is attempted. It\ncan be sped up if you're only looking for a particular data type instead of all\nof them. In contrast, scanning for PEM data is much faster because PEM markers\nhave a much smaller false positive rate. For every occurrence that is found\ninside the analyzed file, the contents are written to a own file in the output\ndirectory.\n\n[//]: # (Begin of cmd-scrape -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py scrape [--no-pem] [--no-der] [-i class] [-e class]\n                           [--extract-nested] [--keep-original-der]\n                           [--allow-non-unique-blobs]\n                           [--disable-der-sanity-checks] [--outmask mask]\n                           [-w filename] [-o path] [-f] [-s offset]\n                           [-l length] [-v] [--help]\n                           filename\n\nScrape input file for certificates, keys or signatures\n\npositional arguments:\n  filename              File that should be scraped for certificates or keys.\n\noptional arguments:\n  --no-pem              Do not search for any PEM encoded blobs.\n  --no-der              Do not search for any DER encoded blobs.\n  -i class, --include-dertype class\n                        Include the specified DER handler class in the search.\n                        Defaults to all known classes if omitted. Can be\n                        specified multiple times and must be one of crt,\n                        dsa_key, dsa_sig, ec_key, pkcs12, pubkey, rsa_key.\n  -e class, --exclude-dertype class\n                        Exclude the specified DER handler class in the search.\n                        Can be specified multiple times and must be one of\n                        crt, dsa_key, dsa_sig, ec_key, pkcs12, pubkey,\n                        rsa_key.\n  --extract-nested      By default, fully overlapping blobs will not be\n                        extracted. For example, every X.509 certificate also\n                        contains a public key inside that would otherwise be\n                        found as well. When this option is given, any blobs\n                        are extracted regardless if they're fully contained in\n                        another blob or not.\n  --keep-original-der   When finding DER blobs, do not convert them to PEM\n                        format, but leave them as-is.\n  --allow-non-unique-blobs\n                        For all matches, the SHA256 hash is used to determine\n                        if the data is unique and findings are by default only\n                        written to disk once. With this option, blobs that\n                        very likely are duplicates are written to disk for\n                        every occurrence.\n  --disable-der-sanity-checks\n                        For DER serialization, not only is it checked that\n                        deserialization is possible, but additional checks are\n                        performed for some data types to ensure a low false-\n                        positive rate. For example, DSA signatures with short\n                        r/s pairs are discarded by default or implausible\n                        version numbers for EC keys. With this option, these\n                        sanity checks will be disabled and therefore\n                        structurally correct (but implausible) false-positives\n                        are also written.\n  --outmask mask        Filename mask that's used for output. Defaults to\n                        scrape_%(offset)07x_%(type)s.%(ext)s and can use\n                        printf-style substitutions offset, type and ext.\n  -w filename, --write-json filename\n                        Write the stats with detailed information about\n                        matches into the given filename.\n  -o path, --outdir path\n                        Output directory. Defaults to scrape.\n  -f, --force           Overwrite key/certificate files and proceed even if\n                        outdir already exists.\n  -s offset, --seek-offset offset\n                        Offset to seek into file. Supports hex/octal/binary\n                        prefixes and SI/binary SI (k, ki, M, Mi, etc.)\n                        suffixes. Defaults to 0.\n  -l length, --analysis-length length\n                        Amount of data to inspect at max. Supports\n                        hex/octal/binary prefixes and SI/binary SI (k, ki, M,\n                        Mi, etc.) suffixes. Defaults to everything until EOF\n                        is hit.\n  -v, --verbose         Increase verbosity level. Can be specified multiple\n                        times.\n  --help                Show this help page.\n```\n[//]: # (End of cmd-scrape -- auto-generated, do not edit!)\n\n## hashpart\nThe hashpart facility allows the user to have all substrings of a file hashed\nwith different hash algorithms in a brute-force manner. So for example, if you\nhave a three-byte file \"ABC\" then the strings \"A\", \"AB\", \"ABC\", \"BC\" and \"C\"\nwould be hashed by all selected hash functions. A search parameter allows you\nto have the tool only print those hexadecimal hash values which have a\nsubstring match. This makes sense when you for example have a hash value of a\nblob contained inside a larger blob but are unsure which hash function was used\nstarting from which offset and which length the hash is computed over. A simple\nexample is that you know the Subject Key Identifier (SKI) of a DER-encoded\ncertificate and want to bruteforce the offsets over which it is calculated.\n\n[//]: # (Begin of cmd-hashpart -- auto-generated, do not edit!)\n```\nusage: ./x509sak.py hashpart [-h alg] [-o offset] [--max-offset offset]\n                             [-a length] [-l length] [-s hexpattern] [-v]\n                             [--help]\n                             filename\n\nHash all substrings of a file and search for a particular hash value\n\npositional arguments:\n  filename              File that should be hashed.\n\noptional arguments:\n  -h alg, --hash-alg alg\n                        Hash function(s) that should be tried. Can be\n                        specified multiple times and defaults to all available\n                        hash functions. Can be any of blake2b, blake2s, md4,\n                        md5, md5-sha1, ripemd160, sha1, sha224, sha256,\n                        sha384, sha3_224, sha3_256, sha3_384, sha3_512,\n                        sha512, sha512_224, sha512_256, shake_128, shake_256,\n                        sm3, whirlpool, all, but defaults to md5, sha1,\n                        sha256, sha384, sha512. Special value 'all' means all\n                        supported functions.\n  -o offset, --seek-offset offset\n                        Offset to seek into file. Supports hex/octal/binary\n                        prefixes and SI/binary SI (k, ki, M, Mi, etc.)\n                        suffixes. Defaults to 0.\n  --max-offset offset   Largest offset to consider. By default, this is end-\n                        of-file. Supports hex/octal/binary prefixes and\n                        SI/binary SI (k, ki, M, Mi, etc.) suffixes.\n  -a length, --variable-hash-length length\n                        For hash functions which have a variable output\n                        length, try all of these hash lenghts. Length is given\n                        in bits and must be a multiple of 8. Can be supplied\n                        multiple times. Defaults to 128, 256, 384.\n  -l length, --analysis-length length\n                        Amount of data to inspect at max. Supports\n                        hex/octal/binary prefixes and SI/binary SI (k, ki, M,\n                        Mi, etc.) suffixes. Defaults to everything until EOF\n                        is hit.\n  -s hexpattern, --search hexpattern\n                        Hexadecimal pattern that is expected in the hashing.\n  -v, --verbose         Increase verbosity level. Can be specified multiple\n                        times.\n  --help                Show this help page.\n```\n[//]: # (End of cmd-hashpart -- auto-generated, do not edit!)\n\n# License\nGNU GPL-3. Thanks to the [x509test project](https://github.com/google/x509test)\nfor the excellent testsuite of broken certificates (included in the\nx509sak/tests/data/certs/google/ subdirectory).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/johndoe31415/x509sak/archive/v0.0.4.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/johndoe31415/x509sak",
    "keywords": "x509,certificate,toolkit,openssl,pki,pentesting,pkcs11,ca",
    "license": "gpl-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "x509sak",
    "package_url": "https://pypi.org/project/x509sak/",
    "platform": null,
    "project_url": "https://pypi.org/project/x509sak/",
    "project_urls": {
      "Download": "https://github.com/johndoe31415/x509sak/archive/v0.0.4.tar.gz",
      "Homepage": "https://github.com/johndoe31415/x509sak"
    },
    "release_url": "https://pypi.org/project/x509sak/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "X.509 Swiss Army Knife is a toolkit atop OpenSSL to ease generation of CAs and aid white-hat pentesting",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14195804,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8231ee31f06f02426c6e9a9b2205b02df821c034c97ad19943a6826480a4d9d5",
          "md5": "8841184e56c9fcbd7e5c6cf587b75eec",
          "sha256": "08bc5c8ddaddc842cda001f42359dc20df89fb2ffc43e0251a1921e08f43c275"
        },
        "downloads": -1,
        "filename": "x509sak-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8841184e56c9fcbd7e5c6cf587b75eec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2605446,
        "upload_time": "2021-10-26T22:33:01",
        "upload_time_iso_8601": "2021-10-26T22:33:01.589148Z",
        "url": "https://files.pythonhosted.org/packages/82/31/ee31f06f02426c6e9a9b2205b02df821c034c97ad19943a6826480a4d9d5/x509sak-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd8942010ec526f0c817b1513d082a22680016faa0951829d3e308e73c4af99f",
          "md5": "4b3604bf5505500728bbe2303b240e9b",
          "sha256": "f09152da2e1d70d83c22efcbcc375f4e406a4f93acc022c69660603fb181640c"
        },
        "downloads": -1,
        "filename": "x509sak-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4b3604bf5505500728bbe2303b240e9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2353287,
        "upload_time": "2021-12-04T20:22:51",
        "upload_time_iso_8601": "2021-12-04T20:22:51.350913Z",
        "url": "https://files.pythonhosted.org/packages/bd/89/42010ec526f0c817b1513d082a22680016faa0951829d3e308e73c4af99f/x509sak-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7de3c5d532a6254595a33b2679438c83735d7b2c40ae1f6f12f66bee5ae13d05",
          "md5": "c768fbac146bbd019757408062c87441",
          "sha256": "d4d1c50f4f4ed692cebd23a73530ab555c63a80cbc50888adea9fbac9e653825"
        },
        "downloads": -1,
        "filename": "x509sak-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c768fbac146bbd019757408062c87441",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2366828,
        "upload_time": "2022-06-21T07:37:52",
        "upload_time_iso_8601": "2022-06-21T07:37:52.793020Z",
        "url": "https://files.pythonhosted.org/packages/7d/e3/c5d532a6254595a33b2679438c83735d7b2c40ae1f6f12f66bee5ae13d05/x509sak-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7de3c5d532a6254595a33b2679438c83735d7b2c40ae1f6f12f66bee5ae13d05",
        "md5": "c768fbac146bbd019757408062c87441",
        "sha256": "d4d1c50f4f4ed692cebd23a73530ab555c63a80cbc50888adea9fbac9e653825"
      },
      "downloads": -1,
      "filename": "x509sak-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "c768fbac146bbd019757408062c87441",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 2366828,
      "upload_time": "2022-06-21T07:37:52",
      "upload_time_iso_8601": "2022-06-21T07:37:52.793020Z",
      "url": "https://files.pythonhosted.org/packages/7d/e3/c5d532a6254595a33b2679438c83735d7b2c40ae1f6f12f66bee5ae13d05/x509sak-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}