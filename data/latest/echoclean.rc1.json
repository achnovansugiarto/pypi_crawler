{
  "info": {
    "author": "Brendan C. Ward",
    "author_email": "bcward@astutespruce.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Echoclean\n\nA utility to help apply expert rules to sonobat output. However, the program\nis intended to be quite general, and can likely be applied to outputs from other\nautomatic classifiers that produce spreadsheet-like outputs.\n\n## Dependencies:\n\n-   openpyxl (version 2.5.14, not newer!)\n-   click\n\n## Installation\n\n`pip install echoclean`\n\n## Development installation\n\nDownload or clone this repository, then run:\n\n`python setup.py install`\n\n## Usage\n\nFrom the command line, within your activated Python environment:\n\n```\nUsage: echoclean apply [OPTIONS] RULES DATA OUTPUT\n\n  Apply the rules to the input data.\n\nOptions:\n  -v, --verbose  Verbose output\n  --help         Show this message and exit.\n\n```\n\nVerbose option can be doubled `-v -v` to provide even more verbose output.\n\n## How it works\n\nEchoclean works by applying expert rules from the RULES file to the DATA file.\nThe files can be XLSX, CSV, or Tab-delimited. If XLSX and more than one sheet\nis found, you will be prompted to select to correct sheet.\n\nThe program first compares the columns between the DATA and RULES files. Any\ncolumn that is present in both is used to construct a rule. Any column that is\nfound only in the RULE file is used as the result set when that rule is applied\nto a row in DATA. Any column in the DATA file that is not found in the rules\nis copied to the OUTPUT. This flexibility allows you to develop rules for nearly\nany simple data that can be represented as row / column format.\n\n_Note:_ if you run the OUTPUT of this program back through as DATA, you **must**\nrename the columns from the result set, or they will be used for criteria and\nproduce unexpected results.\n\nThis program does not care how you name your columns, but for a rule to apply to\na column in DATA, the names must be exactly the same (including capitalization).\nThis program does not expect any particular column, but if it finds one called\n'Filename' it will use that to attempt to parse out a datestamp (using Sonobat\nformat). These datestamps are then used to determine the night on which the\nfile was recorded, and any time before noon is assumed to be part of the previous\nnight.\n\nRules are applied in sequence, in the order they are read in from the file.\n\nThe OUTPUT file is always an XLSX spreadsheet with multiple sheets. One sheet\nincludes the classification results, which are each row from the DATA file,\npreceded by the result set from the RULES file for the rule that classified\nthat row. For each column in the result set, an additional sheet is created with\nthe count of rows for each unique value of that result which was found in the\nclassification results.\n\n## Rules\n\nA rule is a collection of criteria that must be met to apply that rule. As soon\nas a rule is applied, no other rules are tested.\n\nIt is convenient to think of rules as forming a dichotomous key; as a row from\nDATA fails a given rule, it is tested against the next one, and thus does not\nqualify against **ANY** of the preceding rules. Thus your rules can be additive\nbecause you can safely assume that the row did not meet any of the prior criteria,\nand you should construct your rules from the most strict to the least strict.\n\nExample:\n\nGiven the following rules:\n\nRule 1 `Consensus: 'ANPA'`\nRule 2 `Consensus: 'MYLU'`\n\nThese will be evaluated such that any row from DATA that is tested against Rule 2\nis implicitly **NOT** any of the criteria in Rule 1. So in this case, it is\nequivalent to:\n\n`Consensus is 'MYLU' AND NOT 'ANPA'`.\n\nWe recommend that you number your rules to assist with debugging. Doing so\nmakes it easier to visually compare the values in a given row to the rule\napplied or expected.\n\n_Note:_ this program does not check your rules for validity. You are\nresponsible for making sure that your rules are logically correct and in the\ncorrect order.\n\n### Criteria\n\nThe criteria must be matched against the data type of the column. Range or\nequality comparisons are only appropriate for numeric types.\n\n**any**\nIf a column is left blank in for a given rule, it allows any value for that\ncolumn in the data to match. You can also provide the value 'any' but this is\nunnecessary.\n\n**blank**\nIf you specify 'blank' for a column in a given rule, then that column must be\nblank in the data for it to match.\n\n**numeric types**\nYou can specify equality comparisons like these:\n\n```\n> 10\n< 12\n>= 40\n<= 20\n= 2\n4 - 10   (equivalent to >= 4 AND <= 10)\n```\n\n**text types**\nYou can specify a list of possible values to compare against. The row in the data\nonly needs to contain one of them.\n\nExample:\n\nRule 1 `Consensus: LANO, COTO, TABR, LACI, or Blank`\n\nwould match `COTO` but would not match `EPFU`. This is also a special\ncase where a blank would match, but any value not in the list would fail.\n\nYou can also use a negatory condition, but only one value is allowed:\n\n`Consensus: Not EPFU`",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/brendan-ward/echoclean",
    "keywords": "sonobat,echolocation monitoring",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "echoclean",
    "package_url": "https://pypi.org/project/echoclean/",
    "platform": "",
    "project_url": "https://pypi.org/project/echoclean/",
    "project_urls": {
      "Homepage": "https://github.com/brendan-ward/echoclean"
    },
    "release_url": "https://pypi.org/project/echoclean/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Utility to help apply expert rules to sonobat output",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6809316,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bb8a643ac5a61b7eaa6a3ce1695428e59a21c5bd54a390d464842d9da331885",
          "md5": "b894baba8d55f9736251e0f913f7aa13",
          "sha256": "f6df8960583a58334bbc2921b52974fcc558edf7ce7232035ffe821bc6c76338"
        },
        "downloads": -1,
        "filename": "echoclean-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b894baba8d55f9736251e0f913f7aa13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9385,
        "upload_time": "2020-03-13T23:09:58",
        "upload_time_iso_8601": "2020-03-13T23:09:58.363006Z",
        "url": "https://files.pythonhosted.org/packages/3b/b8/a643ac5a61b7eaa6a3ce1695428e59a21c5bd54a390d464842d9da331885/echoclean-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bb8a643ac5a61b7eaa6a3ce1695428e59a21c5bd54a390d464842d9da331885",
        "md5": "b894baba8d55f9736251e0f913f7aa13",
        "sha256": "f6df8960583a58334bbc2921b52974fcc558edf7ce7232035ffe821bc6c76338"
      },
      "downloads": -1,
      "filename": "echoclean-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b894baba8d55f9736251e0f913f7aa13",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9385,
      "upload_time": "2020-03-13T23:09:58",
      "upload_time_iso_8601": "2020-03-13T23:09:58.363006Z",
      "url": "https://files.pythonhosted.org/packages/3b/b8/a643ac5a61b7eaa6a3ce1695428e59a21c5bd54a390d464842d9da331885/echoclean-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}