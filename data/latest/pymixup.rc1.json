{
  "info": {
    "author": "Richard DeVost",
    "author_email": "richard@devost.org",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development"
    ],
    "description": "Pymixup\r\n=======\r\n*pymixup* is a Python code obfuscator. It takes code that looks like\r\nthis::\r\n\r\n   def mk_formatted_array_string(number_array, decimal='.', separator=',',\r\n                                 is_sort_array=False,\r\n                                 is_strip_unused_decimals=False,\r\n                                 joiner='   '):\r\n       \"\"\"Format an array of numbers into a string of formatted numbers.\r\n\r\n       Parameters\r\n       ----------\r\n       decimal\r\n       is_sort_array\r\n       is_strip_unused_decimals\r\n       joiner\r\n       number_array\r\n       separator\r\n       \"\"\"\r\n       try:\r\n           if is_sort_array:\r\n               number_array_ = np.sort(number_array)\r\n           else:\r\n               number_array_ = number_array\r\n           formatted_string = joiner.join([\r\n               mk_formatted_number(\r\n                   number, is_strip_unused_decimals=is_strip_unused_decimals)\r\n               for number in number_array_\r\n           ])\r\n       except ValueError:\r\n           raise\r\n       if decimal != '.' or separator != ',':\r\n           formatted_string = formatted_string.replace(',', '~'). \\\r\n               replace('.', decimal).replace('~', separator)\r\n       return formatted_string\r\n\r\nand turns it into this::\r\n\r\n   def raiug(enihb,xskrm='.',oqkio=',',fmzcc=False,jkego=False,aidon='   '):\r\n       try:\r\n           if fmzcc:\r\n               voxaq=np.sort(enihb)\r\n           else:\r\n               voxaq=enihb\r\n           zexay=aidon.join([gkmiw(number,jkego=jkego)for number in voxaq])\r\n       except ValueError:\r\n           raise\r\n       if xskrm!='.'or oqkio!=',':\r\n           zexay=zexay.replace(',','~').replace('.',xskrm).replace('~',oqkio)\r\n   return zexay\r\n\r\nWhy Obfuscate?\r\n--------------\r\nPython is a great interpreted language. Its syntax makes the source code easy to read and understand. The deployed code--even in compiled .pyc byte form--is also easy to read.\r\n\r\nFor most programs, there is no reason to deliberately make programs hard to read, but there are exceptions. For example, if you are charging for an app that is installed on a mobile phone, then you do not want competitors to copy your code and resell your app at a lower cost.\r\n\r\nIn this case, it's sensible to make the program as hard as possible for someone else to copy and edit. That's the work of obfuscation.\r\n\r\nBecause of its interpreted nature, there are limits to how much a Python program can be obfuscated, since the program must still be understood by the interpreter. For example, Python reserved names like \"if\" and \"class\" cannot be changed, or Python won't be able to understand them. However, variables and method names you create can be changed--as long as the changes are duplicated throughout the source files.\r\n\r\nThat's what *pymixup* does. It obfuscates non-reserved names into garbled names of random text to make the program harder to understand and follow.\r\n\r\n**CAVEAT**: The obfuscated code can be reverse engineered by deciphering what an obfuscated variable or method does and renaming the garbled term to a meaningful one. That's a potentially labor-intensive process that hopefully discourages those who want to steal your code from attempting it.\r\n\r\nWhat *pymixup* Does\r\n-------------------\r\n*pymixup* will read **all** the python files in a project and obfuscate the file contents, the file names, and the folder names based on rules you specify in the setup lists.\r\n\r\nIn addition, for the cross-platform program Kivy, *pymixup* will also obfuscate the corresponding .kv files.\r\n\r\nOther files may be added in the future; for example, django .html templates.\r\n\r\nInstallation\r\n------------\r\nHow to install *pymixup* is explained `here <docs/install.rst>`_.\r\n\r\nSetup\r\n-----\r\nHow to setup a project is explained `here <docs/setup.rst>`_.\r\n\r\nDocumentation\r\n-------------\r\nVisit the `documentation <http://pymixup.readthedocs.org>`_ for more information.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "http://github.com/rdevost/pymixup",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/rdevost/pymixup",
    "keywords": "python obfuscate pymixup",
    "license": "UNKNOWN",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymixup",
    "package_url": "https://pypi.org/project/pymixup/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pymixup/",
    "project_urls": {
      "Download": "http://github.com/rdevost/pymixup",
      "Homepage": "http://github.com/rdevost/pymixup"
    },
    "release_url": "https://pypi.org/project/pymixup/1.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "An app to obfuscate Python projects",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2159375,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d7b942fdd96e28a7ac6496f9fcd29d75a802cbffa0b2e0e17562e0691eafe04",
          "md5": "82001824f285068a8cdc53b84a4b0549",
          "sha256": "0f76a08adfb1827b82c7e099884742c886079ebc456fb22684f23d689f971d70"
        },
        "downloads": -1,
        "filename": "pymixup-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "82001824f285068a8cdc53b84a4b0549",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 270336,
        "upload_time": "2016-06-07T14:33:20",
        "upload_time_iso_8601": "2016-06-07T14:33:20.184602Z",
        "url": "https://files.pythonhosted.org/packages/1d/7b/942fdd96e28a7ac6496f9fcd29d75a802cbffa0b2e0e17562e0691eafe04/pymixup-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1d7b942fdd96e28a7ac6496f9fcd29d75a802cbffa0b2e0e17562e0691eafe04",
        "md5": "82001824f285068a8cdc53b84a4b0549",
        "sha256": "0f76a08adfb1827b82c7e099884742c886079ebc456fb22684f23d689f971d70"
      },
      "downloads": -1,
      "filename": "pymixup-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "82001824f285068a8cdc53b84a4b0549",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 270336,
      "upload_time": "2016-06-07T14:33:20",
      "upload_time_iso_8601": "2016-06-07T14:33:20.184602Z",
      "url": "https://files.pythonhosted.org/packages/1d/7b/942fdd96e28a7ac6496f9fcd29d75a802cbffa0b2e0e17562e0691eafe04/pymixup-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}