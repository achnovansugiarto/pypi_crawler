{
  "info": {
    "author": "Michael Petro",
    "author_email": "mgpetro99@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PVAW: Python Vehicle API Wrapper\n\nA Python wrapper for the **National Highway Traffic Saftey Association** (NHTSA) [Vehicle API](https://vpic.nhtsa.dot.gov/api/)\n\n# License\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n# Documentation\n\n## Istalling PVAW\n\n```python\npip install pvaw\n```\n\n## Importing PVAW\n\n```python\nimport pvaw as pv\n```\n\n# Vin Decoding\n\nThe NHTSA Vehicle API supports individual and batch decoding.\n\n## Vin Class\n\n### class pvaw.Vin(full_or_partial_vin, model_year=None)\n\n**Parameters:**\n\n**full_or_partial_vin:** string representing a Vehicle Identification Number (VIN). It can be either the full VIN (e.g. \"3C6JR7AT4EG248404\"), or be a subset of the VIN with missing characters replaced by the '\\*' character (e.g. \"5YJSA3DS\\*EF\")\n\n**model_year:** string or integer representing the model year of the vehicle. Defaults to None.\n\n#### Constructing a Vin\n\n```python\n# creating a Vin object from partial vin\nvin_1 = pv.Vin(\"5YJSA3DS*EF\")\n\n# creationg a Vin object from partial vin and year\nvin_2 = pv.Vin(\"5UXWX7C5*BA\", 2011)\n```\n\n## Decoding a Vin\n\n### pvaw.Vin.decode()\n\n**Returns:** A Vehicle object with information about the Vin's associated vehicle\n\n```python\nvehicle = vin_1.decode()\nvehicle\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model_year</th>\n      <th>make</th>\n      <th>manufacturer</th>\n      <th>model</th>\n      <th>full_or_partial_vin</th>\n      <th>vehicle_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5YJSA3DS*EF</td>\n      <td>2014</td>\n      <td>TESLA</td>\n      <td>TESLA, INC.</td>\n      <td>Model S</td>\n      <td>5YJSA3DS*EF</td>\n      <td>PASSENGER CAR</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n**Getting Key Attributes**\n\n```python\nprint(vehicle.model_year)\nprint(vehicle.make)\nprint(vehicle.manufacturer)\nprint(vehicle.model)\nprint(vehicle.full_or_partial_vin)\nprint(vehicle.vehicle_type)\n```\n\n    2014\n    TESLA\n    TESLA, INC.\n    Model S\n    5YJSA3DS*EF\n    PASSENGER CAR\n\n**Getting JSON Results**\n\n```python\nvehicle.get_results()\n```\n\n    {'ABS': '',\n     'ActiveSafetySysNote': '',\n     'AdaptiveCruiseControl': '',\n     'AdaptiveDrivingBeam': '',\n     'AdaptiveHeadlights': '',\n     'AdditionalErrorText': 'The error positions are indicated by ! in Suggested VIN. In the Possible values section, each pair of parenthesis indicate information about each error position in VIN . The Numeric value before the : indicates the position in error and the values after the : indicate the possible values that are allowed in this position Unused position(s): 8;',\n     'AirBagLocCurtain': '',\n     'AirBagLocFront': '1st Row (Driver & Passenger)',\n     ...\n\n**Getting DataFrame**\n\n```python\n# Getting key attribute df dropping nan\nvehicle.get_df()\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model_year</th>\n      <th>make</th>\n      <th>manufacturer</th>\n      <th>model</th>\n      <th>full_or_partial_vin</th>\n      <th>vehicle_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5YJSA3DS*EF</td>\n      <td>2014</td>\n      <td>TESLA</td>\n      <td>TESLA, INC.</td>\n      <td>Model S</td>\n      <td>5YJSA3DS*EF</td>\n      <td>PASSENGER CAR</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n```python\n# Getting full raw data df not dropping nan\nvehicle.get_df(raw=True, drop_na=False)\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ABS</th>\n      <th>ActiveSafetySysNote</th>\n      <th>AdaptiveCruiseControl</th>\n      <th>AdaptiveDrivingBeam</th>\n      <th>AdaptiveHeadlights</th>\n      <th>AdditionalErrorText</th>\n      <th>AirBagLocCurtain</th>\n      <th>AirBagLocFront</th>\n      <th>AirBagLocKnee</th>\n      <th>AirBagLocSeatCushion</th>\n      <th>...</th>\n      <th>VIN</th>\n      <th>ValveTrainDesign</th>\n      <th>VehicleType</th>\n      <th>WheelBaseLong</th>\n      <th>WheelBaseShort</th>\n      <th>WheelBaseType</th>\n      <th>WheelSizeFront</th>\n      <th>WheelSizeRear</th>\n      <th>Wheels</th>\n      <th>Windows</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5YJSA3DS*EF</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>The error positions are indicated by ! in Sugg...</td>\n      <td>NaN</td>\n      <td>1st Row (Driver &amp; Passenger)</td>\n      <td>1st Row (Driver &amp; Passenger)</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>5YJSA3DS*EF</td>\n      <td>NaN</td>\n      <td>PASSENGER CAR</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>1 rows Ã— 145 columns</p>\n</div>\n\n## Batch Decoding\n\n### pvaw.decode_vins(vins)\n\n**Parameters:** **vins:** list of Vin objects\n\n**Returns:** ResultsList object which stores a list of Vehicle objects\n\n```python\nvehicles = pv.decode_vins([vin_1, vin_2])\nvehicles\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model_year</th>\n      <th>make</th>\n      <th>manufacturer</th>\n      <th>model</th>\n      <th>full_or_partial_vin</th>\n      <th>vehicle_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5YJSA3DS*EF</td>\n      <td>2014</td>\n      <td>TESLA</td>\n      <td>TESLA, INC.</td>\n      <td>Model S</td>\n      <td>5YJSA3DS*EF</td>\n      <td>PASSENGER CAR</td>\n    </tr>\n    <tr>\n      <td>5UXWX7C5*BA,2011</td>\n      <td>2011</td>\n      <td>BMW</td>\n      <td>BMW MANUFACTURER CORPORATION / BMW NORTH AMERICA</td>\n      <td>X3</td>\n      <td>5UXWX7C5*BA</td>\n      <td>MULTIPURPOSE PASSENGER VEHICLE (MPV)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n**Accessing each Vehicle**\n\n```python\n# Iterating through vehicles\nfor vehicle in vehicles:\n    display(vehicle)\n\n# Indexing Vehicles\nfirst = vehicles[0]\nlast = vehicles[len(vehicles) - 1]\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model_year</th>\n      <th>make</th>\n      <th>manufacturer</th>\n      <th>model</th>\n      <th>full_or_partial_vin</th>\n      <th>vehicle_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5YJSA3DS*EF</td>\n      <td>2014</td>\n      <td>TESLA</td>\n      <td>TESLA, INC.</td>\n      <td>Model S</td>\n      <td>5YJSA3DS*EF</td>\n      <td>PASSENGER CAR</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model_year</th>\n      <th>make</th>\n      <th>manufacturer</th>\n      <th>model</th>\n      <th>full_or_partial_vin</th>\n      <th>vehicle_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5UXWX7C5*BA,2011</td>\n      <td>2011</td>\n      <td>BMW</td>\n      <td>BMW MANUFACTURER CORPORATION / BMW NORTH AMERICA</td>\n      <td>X3</td>\n      <td>5UXWX7C5*BA</td>\n      <td>MULTIPURPOSE PASSENGER VEHICLE (MPV)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n**Getting JSON Results**\n\n```python\nvehicles.get_results()\n```\n\n    [{'ABS': '',\n      'ActiveSafetySysNote': '',\n      'AdaptiveCruiseControl': '',\n      'AdaptiveDrivingBeam': '',\n      'AdaptiveHeadlights': '',\n      'AdditionalErrorText': 'The error positions are indicated by ! in Suggested VIN. In the Possible values section, each pair of parenthesis indicate information about each error position in VIN . The Numeric value before the : indicates the position in error and the values after the : indicate the possible values that are allowed in this position Unused position(s): 8;',\n      'AirBagLocCurtain': '',\n      'AirBagLocFront': '1st Row (Driver & Passenger)',\n      'AirBagLocKnee': '1st Row (Driver & Passenger)',\n      'AirBagLocSeatCushion': '',\n      ...\n\n**Getting DataFrame**\n\n```python\n# Getting key attribute df dropping nan\nvehicles.get_df()\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>model_year</th>\n      <th>make</th>\n      <th>manufacturer</th>\n      <th>model</th>\n      <th>full_or_partial_vin</th>\n      <th>vehicle_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5YJSA3DS*EF</td>\n      <td>2014</td>\n      <td>TESLA</td>\n      <td>TESLA, INC.</td>\n      <td>Model S</td>\n      <td>5YJSA3DS*EF</td>\n      <td>PASSENGER CAR</td>\n    </tr>\n    <tr>\n      <td>5UXWX7C5*BA,2011</td>\n      <td>2011</td>\n      <td>BMW</td>\n      <td>BMW MANUFACTURER CORPORATION / BMW NORTH AMERICA</td>\n      <td>X3</td>\n      <td>5UXWX7C5*BA</td>\n      <td>MULTIPURPOSE PASSENGER VEHICLE (MPV)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n```python\n# Getting full raw data df not dropping nan\nvehicles.get_df(raw=True, drop_na=False)\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ABS</th>\n      <th>ActiveSafetySysNote</th>\n      <th>AdaptiveCruiseControl</th>\n      <th>AdaptiveDrivingBeam</th>\n      <th>AdaptiveHeadlights</th>\n      <th>AdditionalErrorText</th>\n      <th>AirBagLocCurtain</th>\n      <th>AirBagLocFront</th>\n      <th>AirBagLocKnee</th>\n      <th>AirBagLocSeatCushion</th>\n      <th>...</th>\n      <th>VIN</th>\n      <th>ValveTrainDesign</th>\n      <th>VehicleType</th>\n      <th>WheelBaseLong</th>\n      <th>WheelBaseShort</th>\n      <th>WheelBaseType</th>\n      <th>WheelSizeFront</th>\n      <th>WheelSizeRear</th>\n      <th>Wheels</th>\n      <th>Windows</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5YJSA3DS*EF</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>The error positions are indicated by ! in Sugg...</td>\n      <td>NaN</td>\n      <td>1st Row (Driver &amp; Passenger)</td>\n      <td>1st Row (Driver &amp; Passenger)</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>5YJSA3DS*EF</td>\n      <td>NaN</td>\n      <td>PASSENGER CAR</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <td>5UXWX7C5*BA,2011</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1st Row (Driver &amp; Passenger)</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>5UXWX7C5*BA</td>\n      <td>NaN</td>\n      <td>MULTIPURPOSE PASSENGER VEHICLE (MPV)</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>2 rows Ã— 145 columns</p>\n</div>\n\n# WMI Methods\n\nThe NHTSA Vehicle API supports wmi decoding\n\n## WMI Decoding\n\n#### pvaw.decode_wmi(wmi)\n\n**Parameters: wmi:** str of length 3 representing VIN position 1-3 (e.g. \"1FD\") or 6 representing VIN positions 1-3 & 12-14 (e.g. \"1G9340\")\n\n**Returns:** WMIInfo object with information on wmi\n\n```python\nwmi_info = pv.decode_wmi(\"JTL\")\nwmi_info\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>wmi</th>\n      <th>vehicle_type</th>\n      <th>manufacturer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>JTL</td>\n      <td>JTL</td>\n      <td>Multipurpose Passenger Vehicle (MPV)</td>\n      <td>TOYOTA MOTOR NORTH AMERICA, INC</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n**Getting Key Attributes**\n\n```python\nprint(wmi_info.wmi)\nprint(wmi_info.manufacturer)\nprint(wmi_info.vehicle_type)\n```\n\n    JTL\n    TOYOTA MOTOR NORTH AMERICA, INC\n    Multipurpose Passenger Vehicle (MPV)\n\n**Getting JSON Results**\n\n```python\nwmi_info.get_results()\n```\n\n    {'CommonName': 'Toyota',\n     'CreatedOn': '2015-05-04',\n     'DateAvailableToPublic': '2015-01-01',\n     'Make': 'TOYOTA',\n     'ManufacturerName': 'TOYOTA MOTOR NORTH AMERICA, INC',\n     'ParentCompanyName': 'TOYOTA MOTOR CORPORATION',\n     'URL': 'http://www.toyota.com',\n     'UpdatedOn': None,\n     'VehicleType': 'Multipurpose Passenger Vehicle (MPV)',\n     'WMI': 'JTL'}\n\n**Getting DataFrame**\n\n```python\n# Getting key attribute df dropping nan\nwmi_info.get_df()\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>wmi</th>\n      <th>vehicle_type</th>\n      <th>manufacturer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>JTL</td>\n      <td>JTL</td>\n      <td>Multipurpose Passenger Vehicle (MPV)</td>\n      <td>TOYOTA MOTOR NORTH AMERICA, INC</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n```python\n# Getting full raw data df not dropping nan\nwmi_info.get_df(raw=True, drop_na=False)\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CommonName</th>\n      <th>CreatedOn</th>\n      <th>DateAvailableToPublic</th>\n      <th>Make</th>\n      <th>ManufacturerName</th>\n      <th>ParentCompanyName</th>\n      <th>URL</th>\n      <th>UpdatedOn</th>\n      <th>VehicleType</th>\n      <th>WMI</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>JTL</td>\n      <td>Toyota</td>\n      <td>2015-05-04</td>\n      <td>2015-01-01</td>\n      <td>TOYOTA</td>\n      <td>TOYOTA MOTOR NORTH AMERICA, INC</td>\n      <td>TOYOTA MOTOR CORPORATION</td>\n      <td>http://www.toyota.com</td>\n      <td>None</td>\n      <td>Multipurpose Passenger Vehicle (MPV)</td>\n      <td>JTL</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n## Finding WMIs by Manufacturer\n\n### pvaw.get_wmis(manufacturer_search)\n\n**Parameters: manufacturer_search:** a str representing part or all of the name of a Manufacturer (e.g. \"Honda\")\n\n**Returns:** ResultsList object which stores a list of WMIInfo objects\n\n```python\nwmi_infos = pv.get_wmis(\"Tesla\")\nwmi_infos\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>wmi</th>\n      <th>vehicle_type</th>\n      <th>manufacturer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5YJ</td>\n      <td>5YJ</td>\n      <td>Passenger Car</td>\n      <td>TESLA, INC.</td>\n    </tr>\n    <tr>\n      <td>SFZ</td>\n      <td>SFZ</td>\n      <td>Passenger Car</td>\n      <td>TESLA, INC.</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n**Accessing Each WMI**\n\n```python\n# Iterating through vehicles\nfor wmi_info in wmi_infos:\n    display(wmi_info)\n\n# Indexing Vehicles\nfirst = wmi_infos[0]\nlast = wmi_infos[len(vehicles) - 1]\n\n# Getting Key Attributes\nprint(first.wmi)\nprint(first.manufacturer)\nprint(first.vehicle_type)\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>wmi</th>\n      <th>vehicle_type</th>\n      <th>manufacturer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5YJ</td>\n      <td>5YJ</td>\n      <td>Passenger Car</td>\n      <td>TESLA, INC.</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>wmi</th>\n      <th>vehicle_type</th>\n      <th>manufacturer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>SFZ</td>\n      <td>SFZ</td>\n      <td>Passenger Car</td>\n      <td>TESLA, INC.</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n    5YJ\n    TESLA, INC.\n    Passenger Car\n\n**Getting JSON Results**\n\n```python\nwmi_infos.get_results()\n```\n\n    [{'Country': 'UNITED STATES (USA)',\n      'CreatedOn': '2015-03-04',\n      'DateAvailableToPublic': '2015-01-01',\n      'Id': 955,\n      'Name': 'TESLA, INC.',\n      'UpdatedOn': None,\n      'VehicleType': 'Passenger Car',\n      'WMI': '5YJ'},\n     {'Country': 'UNITED STATES (USA)',\n      'CreatedOn': '2015-04-16',\n      'DateAvailableToPublic': '2015-01-01',\n      'Id': 955,\n      'Name': 'TESLA, INC.',\n      'UpdatedOn': None,\n      'VehicleType': 'Passenger Car',\n      'WMI': 'SFZ'}]\n\n**Getting DataFrame**\n\n```python\n# Getting key attribute df dropping nan\nwmi_infos.get_df()\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>wmi</th>\n      <th>vehicle_type</th>\n      <th>manufacturer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5YJ</td>\n      <td>5YJ</td>\n      <td>Passenger Car</td>\n      <td>TESLA, INC.</td>\n    </tr>\n    <tr>\n      <td>SFZ</td>\n      <td>SFZ</td>\n      <td>Passenger Car</td>\n      <td>TESLA, INC.</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n```python\n# Getting full raw data df not dropping nan\nwmi_infos.get_df(raw=True, drop_na=False)\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>CreatedOn</th>\n      <th>DateAvailableToPublic</th>\n      <th>Id</th>\n      <th>Name</th>\n      <th>UpdatedOn</th>\n      <th>VehicleType</th>\n      <th>WMI</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>5YJ</td>\n      <td>UNITED STATES (USA)</td>\n      <td>2015-03-04</td>\n      <td>2015-01-01</td>\n      <td>955</td>\n      <td>TESLA, INC.</td>\n      <td>None</td>\n      <td>Passenger Car</td>\n      <td>5YJ</td>\n    </tr>\n    <tr>\n      <td>SFZ</td>\n      <td>UNITED STATES (USA)</td>\n      <td>2015-04-16</td>\n      <td>2015-01-01</td>\n      <td>955</td>\n      <td>TESLA, INC.</td>\n      <td>None</td>\n      <td>Passenger Car</td>\n      <td>SFZ</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n## Make Methods\n\n### pvaw.get_makes(manufacturer_name_or_id=None, model_year=None, vehicle_type=None)\n\nFinding Makes by Manufacturer and Year or Vehicle Type\n\n**Parameters: manufacturer_name_or_id:** a str representing part or all of the name of a manufacturer (e.g. \"Honda\") or an integer representing the manufacturer ID\n\n**model_year:** a str or int representing the year makes must exist in (e.g. 2005)\n\n**vehicle_type:** a str representing the type of vehicle that a make produces (e.g. \"car\")\n\n**NOTE**: For this method, you can filter either by manufacturer_name_or_id or by vehicle_type, you cannot filter by both. Additionally, model_year can be passed in with manufacturer_name_or_id, but not with vehicle_type.\n\n**Returns:** ResultsList object which stores a list of Make objects\n\n```python\n# getting makes for manufacturer name search\nmakes = pv.get_makes(\"hyundai\")\n\n# getting makes for manufacturer name search and model year\nmakes_2 = pv.get_makes(\"tesla\", 2020)\n\n# getting makes for manufacturer ID and model year\nmakes_3 = pv.get_makes(988, 2005)\n\n# getting makes by vehicle_type search\nmakes_4 = pv.get_makes(vehicle_type=\"car\")\n```\n\n```python\n# displaying makes\nmakes_3\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>make_id</th>\n      <th>make_name</th>\n      <th>manufacturer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>474-HONDA OF AMERICA MFG., INC.</td>\n      <td>474</td>\n      <td>HONDA</td>\n      <td>HONDA OF AMERICA MFG., INC.</td>\n    </tr>\n    <tr>\n      <td>475-HONDA OF AMERICA MFG., INC.</td>\n      <td>475</td>\n      <td>ACURA</td>\n      <td>HONDA OF AMERICA MFG., INC.</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n**Accessing Each Make**\n\n```python\n# Iterating through makes\nfor m in makes_3:\n    display(m)\n\n# Indexing makes\nfirst = makes_3[0]\nlast = makes_3[len(makes_3) - 1]\n\n# Getting Key Attributes\nprint(first.make_id)\nprint(first.make_name)\nprint(first.manufacturer)\nprint(first.vehicle_type)\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>make_id</th>\n      <th>make_name</th>\n      <th>manufacturer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>474-HONDA OF AMERICA MFG., INC.</td>\n      <td>474</td>\n      <td>HONDA</td>\n      <td>HONDA OF AMERICA MFG., INC.</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>make_id</th>\n      <th>make_name</th>\n      <th>manufacturer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>475-HONDA OF AMERICA MFG., INC.</td>\n      <td>475</td>\n      <td>ACURA</td>\n      <td>HONDA OF AMERICA MFG., INC.</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n    474\n    HONDA\n    HONDA OF AMERICA MFG., INC.\n    None\n\n**Getting JSON Results**\n\n```python\nmakes_3.get_results()\n```\n\n    [{'MakeId': 474,\n      'MakeName': 'HONDA',\n      'MfrId': 988,\n      'MfrName': 'HONDA OF AMERICA MFG., INC.'},\n     {'MakeId': 475,\n      'MakeName': 'ACURA',\n      'MfrId': 988,\n      'MfrName': 'HONDA OF AMERICA MFG., INC.'}]\n\n**Getting DataFrame**\n\n```python\n# Getting key attribute df dropping nan\nmakes_3.get_df()\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>make_id</th>\n      <th>make_name</th>\n      <th>manufacturer</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>474-HONDA OF AMERICA MFG., INC.</td>\n      <td>474</td>\n      <td>HONDA</td>\n      <td>HONDA OF AMERICA MFG., INC.</td>\n    </tr>\n    <tr>\n      <td>475-HONDA OF AMERICA MFG., INC.</td>\n      <td>475</td>\n      <td>ACURA</td>\n      <td>HONDA OF AMERICA MFG., INC.</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n```python\n# Getting full raw data df not dropping nan\nmakes_3.get_df(raw=True, drop_na=False)\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MakeId</th>\n      <th>MakeName</th>\n      <th>MfrId</th>\n      <th>MfrName</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>474-HONDA OF AMERICA MFG., INC.</td>\n      <td>474</td>\n      <td>HONDA</td>\n      <td>988</td>\n      <td>HONDA OF AMERICA MFG., INC.</td>\n    </tr>\n    <tr>\n      <td>475-HONDA OF AMERICA MFG., INC.</td>\n      <td>475</td>\n      <td>ACURA</td>\n      <td>988</td>\n      <td>HONDA OF AMERICA MFG., INC.</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n# Manufacturer Methods\n\n## Getting Manufacturers\n\n### pvaw.get_manufacturers(m_type=None, page=1)\n\n**Parameters: m_type:** a str representing part or all of the manufacturer type (e.g. \"Intermediate\")\n\n**page:** int representing the api page number. Each page returns 100 manufacturers\n\n**Returns:** ResultsList object which stores a list of Manufacturer objects\n\n```python\n# getting manufacturers by api page number\nmanufacturers = pv.get_manufacturers(page=5)\n\n# getting manufacturers by manufacturer type\nmanufacturers_2 = pv.get_manufacturers(m_type=\"complete\", page=1)\n```\n\n## Searching for Specific Manufacturers\n\n### pvaw.get_manufacturer_details(manufacturer_name_or_id)\n\n**Parameters: manufacturer_name_or_id:** a str representing manufacturer name or an int representing the manufacturer ID\n\n**Returns:** ResultsList object which stores a list of Manufacturer objects matching the manufacturer search\n\n```python\n# getting manufacturer(s) from manufacturer name search\nmanufacturers_3 = pv.get_manufacturer_details(\"Toyota\")\n\n# getting manufacturer from manufacturter id\nmanufacturers_4 = pv.get_manufacturer_details(988)\n```\n\n**Accessing Each Manufacturer**\n\n```python\n# Iterating through manufacturers\nfor m in manufacturers[:4]:\n    display(m)\n\n# Indexing manufacturers\nfirst = manufacturers[0]\nlast = manufacturers[len(manufacturers) - 1]\n\n# Getting Key Attributes\nprint(first.id)\nprint(first.common_name)\nprint(first.name)\nprint(first.vehicle_types)\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>vehicle_types</th>\n      <th>id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1387</td>\n      <td>WOOPYONG MOTOR WHEEL LTD</td>\n      <td>[]</td>\n      <td>1387</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>vehicle_types</th>\n      <th>id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1388</td>\n      <td>WORCESTER TANK &amp; EQUIPMENT CO., INC</td>\n      <td>[]</td>\n      <td>1388</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>vehicle_types</th>\n      <th>id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1389</td>\n      <td>WORCESTER WHITE AUTOCAR, INC.</td>\n      <td>[]</td>\n      <td>1389</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>vehicle_types</th>\n      <th>id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1390</td>\n      <td>WORKBENCH, INC.</td>\n      <td>[Trailer]</td>\n      <td>1390</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n    1387\n    None\n    WOOPYONG MOTOR WHEEL LTD\n    []\n\n**Getting JSON Results**\n\n```python\nmanufacturers.get_results()\n```\n\n    [{'Country': '',\n      'Mfr_CommonName': None,\n      'Mfr_ID': 1387,\n      'Mfr_Name': 'WOOPYONG MOTOR WHEEL LTD',\n      'VehicleTypes': []},\n     {'Country': 'UNITED STATES (USA)',\n      'Mfr_CommonName': None,\n      'Mfr_ID': 1388,\n      'Mfr_Name': 'WORCESTER TANK & EQUIPMENT CO., INC',\n      'VehicleTypes': []},\n     ...\n\n**Getting DataFrame**\n\n```python\n# Getting key attribute df dropping nan\nmanufacturers.get_df()\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>vehicle_types</th>\n      <th>id</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1387</td>\n      <td>WOOPYONG MOTOR WHEEL LTD</td>\n      <td>[]</td>\n      <td>1387</td>\n    </tr>\n    <tr>\n      <td>1388</td>\n      <td>WORCESTER TANK &amp; EQUIPMENT CO., INC</td>\n      <td>[]</td>\n      <td>1388</td>\n    </tr>\n    <tr>\n      <td>1389</td>\n      <td>WORCESTER WHITE AUTOCAR, INC.</td>\n      <td>[]</td>\n      <td>1389</td>\n    </tr>\n    <tr>\n      <td>1390</td>\n      <td>WORKBENCH, INC.</td>\n      <td>[Trailer]</td>\n      <td>1390</td>\n    </tr>\n    <tr>\n      <td>1391</td>\n      <td>U-SCREEN U.S.A., INC.</td>\n      <td>[Trailer]</td>\n      <td>1391</td>\n    </tr>\n    <tr>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <td>1479</td>\n      <td>TAZZARI GL SPA</td>\n      <td>[Low Speed Vehicle (LSV)]</td>\n      <td>1479</td>\n    </tr>\n    <tr>\n      <td>1480</td>\n      <td>CHANGZHOU CITY WENMING VEHICLE ACCESSORIES FAC...</td>\n      <td>[]</td>\n      <td>1480</td>\n    </tr>\n    <tr>\n      <td>1481</td>\n      <td>SALSCO, INC.</td>\n      <td>[Trailer]</td>\n      <td>1481</td>\n    </tr>\n    <tr>\n      <td>1482</td>\n      <td>LIFT N LOCK, LLC</td>\n      <td>[]</td>\n      <td>1482</td>\n    </tr>\n    <tr>\n      <td>1483</td>\n      <td>CONTINENTAL BIOMASS INDUSTRIES, INC.</td>\n      <td>[]</td>\n      <td>1483</td>\n    </tr>\n  </tbody>\n</table>\n<p>92 rows Ã— 3 columns</p>\n</div>\n\n```python\n# Getting full raw data df not dropping nan\nmanufacturers.get_df(raw=True, drop_na=False)\n```\n\n<div>\n<table class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Country</th>\n      <th>Mfr_CommonName</th>\n      <th>Mfr_ID</th>\n      <th>Mfr_Name</th>\n      <th>VehicleTypes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1387</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>1387</td>\n      <td>WOOPYONG MOTOR WHEEL LTD</td>\n      <td>[]</td>\n    </tr>\n    <tr>\n      <td>1388</td>\n      <td>UNITED STATES (USA)</td>\n      <td>None</td>\n      <td>1388</td>\n      <td>WORCESTER TANK &amp; EQUIPMENT CO., INC</td>\n      <td>[]</td>\n    </tr>\n    <tr>\n      <td>1389</td>\n      <td>UNITED STATES (USA)</td>\n      <td>None</td>\n      <td>1389</td>\n      <td>WORCESTER WHITE AUTOCAR, INC.</td>\n      <td>[]</td>\n    </tr>\n    <tr>\n      <td>1390</td>\n      <td>UNITED STATES (USA)</td>\n      <td>None</td>\n      <td>1390</td>\n      <td>WORKBENCH, INC.</td>\n      <td>[{'IsPrimary': False, 'Name': 'Trailer'}]</td>\n    </tr>\n    <tr>\n      <td>1391</td>\n      <td>UNITED STATES (USA)</td>\n      <td>None</td>\n      <td>1391</td>\n      <td>U-SCREEN U.S.A., INC.</td>\n      <td>[{'IsPrimary': False, 'Name': 'Trailer'}]</td>\n    </tr>\n    <tr>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <td>1479</td>\n      <td>ITALY</td>\n      <td>None</td>\n      <td>1479</td>\n      <td>TAZZARI GL SPA</td>\n      <td>[{'IsPrimary': True, 'Name': 'Low Speed Vehicl...</td>\n    </tr>\n    <tr>\n      <td>1480</td>\n      <td>CHINA</td>\n      <td>None</td>\n      <td>1480</td>\n      <td>CHANGZHOU CITY WENMING VEHICLE ACCESSORIES FAC...</td>\n      <td>[]</td>\n    </tr>\n    <tr>\n      <td>1481</td>\n      <td>UNITED STATES (USA)</td>\n      <td>None</td>\n      <td>1481</td>\n      <td>SALSCO, INC.</td>\n      <td>[{'IsPrimary': True, 'Name': 'Trailer'}]</td>\n    </tr>\n    <tr>\n      <td>1482</td>\n      <td>UNITED STATES (USA)</td>\n      <td>None</td>\n      <td>1482</td>\n      <td>LIFT N LOCK, LLC</td>\n      <td>[]</td>\n    </tr>\n    <tr>\n      <td>1483</td>\n      <td>UNITED STATES (USA)</td>\n      <td>None</td>\n      <td>1483</td>\n      <td>CONTINENTAL BIOMASS INDUSTRIES, INC.</td>\n      <td>[]</td>\n    </tr>\n  </tbody>\n</table>\n<p>92 rows Ã— 5 columns</p>\n</div>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/michaelmicheal/PythonVehicleAPIWrapper",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pvaw",
    "package_url": "https://pypi.org/project/pvaw/",
    "platform": "",
    "project_url": "https://pypi.org/project/pvaw/",
    "project_urls": {
      "Homepage": "https://github.com/michaelmicheal/PythonVehicleAPIWrapper"
    },
    "release_url": "https://pypi.org/project/pvaw/0.0.3/",
    "requires_dist": [
      "pandas",
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "Python Wrapper for the NHTSA Vehicle API",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9949600,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0f1041bf8d1b90c7bfe00647082913e5347794c31ce8c58d3896e662a79afda",
          "md5": "b85a6702dfdf0bed4ac95b296ad5a899",
          "sha256": "8c40a351fd7ad6bde61726c8caa7743d634e34c06c7cb423ffd4909edf4421e4"
        },
        "downloads": -1,
        "filename": "pvaw-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b85a6702dfdf0bed4ac95b296ad5a899",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11551,
        "upload_time": "2021-03-02T00:16:56",
        "upload_time_iso_8601": "2021-03-02T00:16:56.396803Z",
        "url": "https://files.pythonhosted.org/packages/a0/f1/041bf8d1b90c7bfe00647082913e5347794c31ce8c58d3896e662a79afda/pvaw-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70b796e4a535e2b790301217e051cce005798fcfc92bd15661b9da8e068597fa",
          "md5": "939fd6330b2af7c1188a68ab665728a4",
          "sha256": "24478b5381d982eadb032726617c147687ada681832e28967f4fd888a04dc44d"
        },
        "downloads": -1,
        "filename": "pvaw-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "939fd6330b2af7c1188a68ab665728a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16086,
        "upload_time": "2021-03-02T00:16:58",
        "upload_time_iso_8601": "2021-03-02T00:16:58.091534Z",
        "url": "https://files.pythonhosted.org/packages/70/b7/96e4a535e2b790301217e051cce005798fcfc92bd15661b9da8e068597fa/pvaw-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "638c3ed0e8147a5475531d2384948c2043ecd2da1bb545eed01985983f844381",
          "md5": "630afe96eb8d7cd57aae5cfa9a543b0a",
          "sha256": "c4dc5e0a31dbcf0a402367396db18fb6d62165afe754cbc7393659483b6cd8c8"
        },
        "downloads": -1,
        "filename": "pvaw-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "630afe96eb8d7cd57aae5cfa9a543b0a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11471,
        "upload_time": "2021-03-30T21:33:06",
        "upload_time_iso_8601": "2021-03-30T21:33:06.994111Z",
        "url": "https://files.pythonhosted.org/packages/63/8c/3ed0e8147a5475531d2384948c2043ecd2da1bb545eed01985983f844381/pvaw-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf32b0d8351ddffb94a6bc79f45890769e18adddf55f5d2eb256ac9d552b3ed9",
          "md5": "80e358a27f259bd4f06c47500f50c07f",
          "sha256": "a0473597cf8d69dd787c0273631125f6583a66b1209ad1258507daa1a848809b"
        },
        "downloads": -1,
        "filename": "pvaw-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "80e358a27f259bd4f06c47500f50c07f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16123,
        "upload_time": "2021-03-30T21:33:08",
        "upload_time_iso_8601": "2021-03-30T21:33:08.589557Z",
        "url": "https://files.pythonhosted.org/packages/cf/32/b0d8351ddffb94a6bc79f45890769e18adddf55f5d2eb256ac9d552b3ed9/pvaw-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6beeb35edf55cba3660fd7e7f5197c6104189774e79e49ace9511a6a6e43237b",
          "md5": "e2c97040c537265bdabe25c6786254cf",
          "sha256": "4db732e1a85b6db9aa7c9e525943840b8198381f8a65623d198b5f8daca73345"
        },
        "downloads": -1,
        "filename": "pvaw-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2c97040c537265bdabe25c6786254cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11478,
        "upload_time": "2021-04-01T18:20:10",
        "upload_time_iso_8601": "2021-04-01T18:20:10.218788Z",
        "url": "https://files.pythonhosted.org/packages/6b/ee/b35edf55cba3660fd7e7f5197c6104189774e79e49ace9511a6a6e43237b/pvaw-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6e1dc6929a046305323c52a791ef7bcb1d72853586cb019e8e6f5577ff1abf1",
          "md5": "1b84a81b4c3954d5a9a5bb49a0b25c02",
          "sha256": "2515d4228471bdb3a25edcbba4b3c33b91ab2a27b40013a355d5d196fa87e9ab"
        },
        "downloads": -1,
        "filename": "pvaw-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1b84a81b4c3954d5a9a5bb49a0b25c02",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16112,
        "upload_time": "2021-04-01T18:20:11",
        "upload_time_iso_8601": "2021-04-01T18:20:11.708505Z",
        "url": "https://files.pythonhosted.org/packages/e6/e1/dc6929a046305323c52a791ef7bcb1d72853586cb019e8e6f5577ff1abf1/pvaw-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6beeb35edf55cba3660fd7e7f5197c6104189774e79e49ace9511a6a6e43237b",
        "md5": "e2c97040c537265bdabe25c6786254cf",
        "sha256": "4db732e1a85b6db9aa7c9e525943840b8198381f8a65623d198b5f8daca73345"
      },
      "downloads": -1,
      "filename": "pvaw-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e2c97040c537265bdabe25c6786254cf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11478,
      "upload_time": "2021-04-01T18:20:10",
      "upload_time_iso_8601": "2021-04-01T18:20:10.218788Z",
      "url": "https://files.pythonhosted.org/packages/6b/ee/b35edf55cba3660fd7e7f5197c6104189774e79e49ace9511a6a6e43237b/pvaw-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6e1dc6929a046305323c52a791ef7bcb1d72853586cb019e8e6f5577ff1abf1",
        "md5": "1b84a81b4c3954d5a9a5bb49a0b25c02",
        "sha256": "2515d4228471bdb3a25edcbba4b3c33b91ab2a27b40013a355d5d196fa87e9ab"
      },
      "downloads": -1,
      "filename": "pvaw-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "1b84a81b4c3954d5a9a5bb49a0b25c02",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16112,
      "upload_time": "2021-04-01T18:20:11",
      "upload_time_iso_8601": "2021-04-01T18:20:11.708505Z",
      "url": "https://files.pythonhosted.org/packages/e6/e1/dc6929a046305323c52a791ef7bcb1d72853586cb019e8e6f5577ff1abf1/pvaw-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}