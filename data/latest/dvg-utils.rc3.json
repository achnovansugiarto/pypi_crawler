{
  "info": {
    "author": "JarosÅ‚aw Gilewski",
    "author_email": "jgilewski@jagin.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# dvg-utils\n> Go Deep with your Vision\n\n**dvg-utils** is a set of tools to help you easily build your image and video processing pipeline using OpenCV and Python.\nWith an easy configuration file and implementation modules you can try your computer vision pipeline \non different devices like webcams, RaspberryPi Camera or camera connected to NVIDIA Jetson device (Nano, TX2, XAVIER)\nthrough GStreamer and more.\n\nThe library provides a handful of examples to start from.\n\n## Getting Started\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing \npurposes.\n\n### Prerequisites\n\nI suggest using Python virtual environment. Virtual environments will allow you to run independent Python environments \nin isolation on your system.  \nPlease take a look at [this article on RealPython](https://realpython.com/python-virtual-environments-a-primer/).\n\n    $ pip install tqdm pyyaml numpy\n\nFor OpenCV installation steps please look at [OpenCV Tutorials, Resources, and Guides](https://www.pyimagesearch.com/opencv-tutorials-resources-guides/).\n\nMostly:\n\n    $ pip install opencv-python\n    \nor\n\n    $ pip install opencv-contrib-python\n    \nif you need both main and contrib modules should work.\n\nYou can also try to play hard and [compile OpenCV with CUDA](https://www.pyimagesearch.com/2020/02/03/how-to-use-opencvs-dnn-module-with-nvidia-gpus-cuda-and-cudnn/) (if you got GPU on your board).\n    \n**NVIDIA Jetson** devices with *JetPack SDK* have OpenCV already installed.  \nFor more info about OpenCV on Jetson platform looky [here](https://www.jetsonhacks.com/2019/11/15/5-things-about-opencv-on-jetson/).\n\nFor **Raspberry Pi Buster**, install OpenCV with the help of this article: \n[Install OpenCV 4 on Raspberry Pi 4 and Raspbian Buster](https://www.pyimagesearch.com/2019/09/16/install-opencv-4-on-raspberry-pi-4-and-raspbian-buster/)\nfrom the wonderful [PyImageSearch](https://www.pyimagesearch.com) blog.\n\n### Installation\n\n    $ pip install dvg-utils\n    \n### Development setup\n\nWe can install the package locally (for use on our system), with:\n\n    $ pip install .\n    \nWe can also install the package with a symlink, so that changes to the source files will be\nimmediately available to other users of the package on our system:\n\n    $ pip install -e .   \n\n## Running tests\n\nRunning tests requires `pytest` package to be installed.\n\n    $ pip install pytest\n\n    $ make test\n    \n## Command-line tool\n\nAfter `dvg-utils` installation, you get access to `dvg-utils` command which allows you to:\n\n- convert a video file to set of images:\n\n      $ dvg-utils v2i -i assets/videos/faces.mp4 -o output --display\n    \n- convert a set of frame images to a video file:\n\n      $ dvg-utils i2v -i output -o output/my_new_file.avi --display\n      \n- plot metrics (see examples below):\n\n      $ dvg-utils pm --input output/metrics_1.csv --input output/metrics_2.csv\n \n## Examples\n\n### Preparation\n\n    $ pip install matplotlib\n    $ pip install scipy\n    $ pip install dlib\n\nIf you run examples on Raspberry Pi Camera you will need to:\n\n    $ pip install picamera\n\n### Capture single image\n\n    $ python ./examples/capture_image.py -i assets/images/friends\n\n### Capture video stream \n\n    $ python ./examples/capture_video.py\n    \n### Capture two video stream from web cameras\n\n    $ python ./examples/capture_multi_video.py\n    \n### Detect faces in images\n\n    $ python ./examples/detect_face_image.py -i assets/images/friends\n\n### Detect faces in a video stream:\n    \n    $ python ./examples/detect_face_video.py --metrics output/metrics_no_pipeline.csv\n\nor using pipeline implementation:\n    \n    $ python ./examples/detect_face_video.py --pipeline --metrics output/metrics_with_pipeline.csv\n\n### Compare the collected metrics\n    \n    $ dvg-utils pm --input output/metrics_no_pipeline.csv --input output/metrics_with_pipeline.csv \n    \n### Detect motion in a video stream\n    \n    $ python ./examples/detect_motion_video.py\n\n### Detect object in a video stream\n\n    $ python ./examples/detect_object_video.py\n\n### Track object in a video stream\n\n    $ python ./examples/track_object_video.py\n    \n### Count object in a video stream\n\n    $ python ./examples/count_object_video.py\n\n## Acknowledgments\n\n* [PyImageSearch](https://www.pyimagesearch.com/) for ideas\n* [pixabay](https://pixabay.com/) for assets\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jagin/dvg-utils",
    "keywords": "computer vision,image processing,opencv",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dvg-utils",
    "package_url": "https://pypi.org/project/dvg-utils/",
    "platform": "",
    "project_url": "https://pypi.org/project/dvg-utils/",
    "project_urls": {
      "Homepage": "https://github.com/jagin/dvg-utils"
    },
    "release_url": "https://pypi.org/project/dvg-utils/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "DeepVisionGuru utilities for image/video capturing and processing",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8269999,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "671a19794046f5a97f614c7d12cf29aada246bd2ec178561f0e91d6a49cf6b5d",
          "md5": "c75a44184907195b77a04f733a1960e7",
          "sha256": "63b2a301fda10652b2eacee311067ebdf868fc1a9ae6d320ae6376b9d69a0dca"
        },
        "downloads": -1,
        "filename": "dvg-utils-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c75a44184907195b77a04f733a1960e7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26006,
        "upload_time": "2020-07-19T13:12:25",
        "upload_time_iso_8601": "2020-07-19T13:12:25.345426Z",
        "url": "https://files.pythonhosted.org/packages/67/1a/19794046f5a97f614c7d12cf29aada246bd2ec178561f0e91d6a49cf6b5d/dvg-utils-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "782f4d8ab8bce9ed6b7e0b48c07a8ccf07e17b4a7e8bf893797340617110e2ca",
          "md5": "157b1417d541fb5ab15200bba8e9d21f",
          "sha256": "2cf5ae59a3fb7b3de59911d65602fbad55e188ebd355c79f5195cc5fdf03483d"
        },
        "downloads": -1,
        "filename": "dvg-utils-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "157b1417d541fb5ab15200bba8e9d21f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26005,
        "upload_time": "2020-07-19T13:29:43",
        "upload_time_iso_8601": "2020-07-19T13:29:43.388884Z",
        "url": "https://files.pythonhosted.org/packages/78/2f/4d8ab8bce9ed6b7e0b48c07a8ccf07e17b4a7e8bf893797340617110e2ca/dvg-utils-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8d5b5500f6061d20f495b24d5bc60d2939f439d6bbf02c3e2b77d6c407679a5",
          "md5": "a768748e9c016e3527d09ccfa6628aa7",
          "sha256": "1a6e1400deb93369316c26eef1da14682ec235b92086cab3dfc4d8eaa4b4b10e"
        },
        "downloads": -1,
        "filename": "dvg-utils-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a768748e9c016e3527d09ccfa6628aa7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29140,
        "upload_time": "2020-09-25T09:54:57",
        "upload_time_iso_8601": "2020-09-25T09:54:57.565852Z",
        "url": "https://files.pythonhosted.org/packages/b8/d5/b5500f6061d20f495b24d5bc60d2939f439d6bbf02c3e2b77d6c407679a5/dvg-utils-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b8d5b5500f6061d20f495b24d5bc60d2939f439d6bbf02c3e2b77d6c407679a5",
        "md5": "a768748e9c016e3527d09ccfa6628aa7",
        "sha256": "1a6e1400deb93369316c26eef1da14682ec235b92086cab3dfc4d8eaa4b4b10e"
      },
      "downloads": -1,
      "filename": "dvg-utils-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a768748e9c016e3527d09ccfa6628aa7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 29140,
      "upload_time": "2020-09-25T09:54:57",
      "upload_time_iso_8601": "2020-09-25T09:54:57.565852Z",
      "url": "https://files.pythonhosted.org/packages/b8/d5/b5500f6061d20f495b24d5bc60d2939f439d6bbf02c3e2b77d6c407679a5/dvg-utils-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}