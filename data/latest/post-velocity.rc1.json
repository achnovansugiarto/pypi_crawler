{
  "info": {
    "author": "",
    "author_email": "\"Andrei P. Igoshev\" <ignotur@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# post-velocity\nPackage to compute Bayesian posterior distribution for transversal velocity using parallaxes and proper motions.\nCode is designed for the cases when the parallax uncertainty is significant while proper motion is measured with greater precision.\n\n## Introduction\n\nThe transversal velocities of stars are important in many astrophysical applications such as a search for run-away stars and ultra-high velocity white dwarfs.\nThese velocities are often computed using measured parallaxes and proper motions of stars.\nThe parallax measurements are often have limited accuracy especially for distances of a few kpc.\n\n## Installation\n\nThe package is available at pypi so it can be installed using pip:\n\n```\npip install post_velocity\n```\nExamples of the usage are available in folder examples.\n\n\n## Simple usage\n\nA simple example can be found in example.py. In this code I use parallax and proper motion measurements for Gaia DR3 5703888058542880896.\nParallax is given in milliarcseconds and proper motion is in milliarcseconds per year.\n\n```\nfrom post_velocity import post_velocity\nfrom math import *\nimport matplotlib.pyplot as plt\n\nparallax = 1.3616973828503283\nparallax_error = 0.31826717\npmra = 70.22832802893967\npmra_error = 0.31611034\npmdec = -195.65413513344822\npmdec_error = 0.2825489\nl = radians(245.99334300224004)\nb = radians(13.599432251899845) \n\nmeas = pmra, pmra_error, pmdec, pmdec_error, parallax, parallax_error, l, b\nvtl, pvtl, idx025, idx50, idx975 = post_velocity.compute_posterior (meas)\n\nplt.plot (vtl, pvtl)\nplt.plot ([vtl[idx025], vtl[idx025]], [-0.5,1.1], 'r--')\nplt.plot ([vtl[idx50],  vtl[idx50]],  [-0.5,1.1], 'r-')\nplt.plot ([vtl[idx975], vtl[idx975]], [-0.5,1.1], 'r--')\n\nplt.xlabel(r'$v_t$ (km/s)')\nplt.ylabel(r'Probability density')\nplt.ylim([0,1.02])\nplt.savefig ('posterior_vt.pdf')\nplt.show()\n\n```\n\nThis code produces the following image. The red dashed lines show the five percent credible interval. The red solid line shows median of the posterior distribution. \n\n![Posterior velocity distribution for Gaia DR3 5703888058542880896](https://github.com/ignotur/post-velocity/blob/main/resources/posterior_vt.jpg?raw=true)\n\n## Varying parameters of priors\n\nThe basic function `compute_posterior (meas, Rsun = 8.34, hz = 0.33, hr = 1.70, min_vt = 10, max_vt = 2500, n_step = 100, sigma = 1000)` allows varying parameters of all priors involved in the calculations. Below I show how to change parameters of the velocity prior:\n\n```\nfrom post_velocity import post_velocity\nfrom math import *\nimport matplotlib.pyplot as plt\n\nparallax = 1.3616973828503283   ## mas\nparallax_error = 0.31826717     ## mas\npmra = 70.22832802893967        ## mas/year\npmra_error = 0.31611034         ## mas/year\npmdec = -195.65413513344822     ## mas/year\npmdec_error = 0.2825489         ## mas/year\nl = radians(245.99334300224004) ## degrees to be converted to radians while working with the package\nb = radians(13.599432251899845) ## degrees to be converted to radians while working with the package\n\nmeas = pmra, pmra_error, pmdec, pmdec_error, parallax, parallax_error, l, b\n\n## Posterior will be computed for the velocity range from min_vt to max_vt\nmin_vt = 30   ## km/s\nmax_vt = 3000 ## km/s\n\n## Vary velocity prior\nsigma1000 = 1000.0 ## km/s\nsigma3000 = 3000.0 ## km/s\n\nvtl1, pvtl1, idx025, idx50, idx975 = post_velocity.compute_posterior (meas, min_vt=min_vt, max_vt=max_vt, sigma=sigma1000)\nvtl3, pvtl3, idx025, idx50, idx975 = post_velocity.compute_posterior (meas, min_vt=min_vt, max_vt=max_vt, sigma=sigma3000)\n\nplt.plot (vtl1, pvtl1, 'k-', label=r'$\\sigma=1000$ km/s')\nplt.plot (vtl3, pvtl3, 'b--', label=r'$\\sigma=3000$ km/s')\n\nplt.xlabel(r'$v_t$ (km/s)')\nplt.ylabel(r'Probability density')\nplt.ylim([0,1.02])\nplt.legend()\nplt.savefig ('posterior_vt_sigma.pdf')\nplt.show()\n\n```\n\nWe show the result below.\n\n![Posterior velocity distribution for Gaia DR3 5703888058542880896 varying velocity priors](https://github.com/ignotur/post-velocity/blob/main/resources/posterior_vt_sigma.jpg?raw=true)\n\n## Advanced usage\n\nThe package also provide functions `fD (D, gl, gb, hz, hr, Rsun)` and `g (D, varpi, sigma_varpi)` which can be used to compute posterior for distances only.\n\n```\n\nfrom post_velocity import post_velocity\nfrom math import *\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nparallax = 1.3616973828503283   ## mas\nparallax_error = 0.31826717     ## mas\npmra = 70.22832802893967        ## mas/year\npmra_error = 0.31611034         ## mas/year\npmdec = -195.65413513344822     ## mas/year\npmdec_error = 0.2825489         ## mas/year\nl = radians(245.99334300224004) ## degrees to be converted to radians while working with the package\nb = radians(13.599432251899845) ## degrees to be converted to radians while working with the package\n\n### Setting parameters of the Galactic prior\n\nhz = 0.33   ## kpc\nhr = 1.70   ## kpc\nRsun = 8.34 ## kpc\n\nmeas = pmra, pmra_error, pmdec, pmdec_error, parallax, parallax_error, l, b\n\nvtl, pvtl, idx025, idx50, idx975 = post_velocity.compute_posterior (meas, Rsun = Rsun, hz = hz, hr = hr)\n\n\nvarpi = parallax\nsigma_varpi = parallax_error\n\ndl = []  ## array to keep distances\nggl = [] ## array to keep conditional probability to measure parallax if distances is fixed\nffl = [] ## array to keep Galactic prior\n\n\nfor k in range (1, 10000):\n\n    d = 0.001 * k\n\n    dl.append (d)\n    ggl.append (post_velocity.g (d, varpi, sigma_varpi))  ## \n    ffl.append (post_velocity.fD (d, l, b, hz, hr, Rsun)) ## Galactic prior for distances\n\nggl = np.asarray(ggl) / np.max(ggl)\nffl = np.asarray(ffl) / np.max(ffl)\n\ntt = ggl*ffl ## here we compute posterior for distances\ntt = tt / np.max(tt)\n\nfig, axs = plt.subplots(2)\n\naxs[0].plot (dl, ggl, '--', color='blue', label=r\"$g_D (\\varpi' | D)$\", linewidth=2)\naxs[0].plot (dl, ffl, ':', color='black', label=r'$f_D (D; l, b)$', linewidth=2)\naxs[0].plot (dl, tt, '-', color='red', label=r\"$p_D (D | \\varpi')$\", linewidth=3)\naxs[0].set_xlim([0, 2.5])\naxs[0].set_xlabel('D (kpc)')\naxs[0].set_ylabel('Relative probability')\naxs[0].legend()\n\naxs[1].plot ([vtl[idx025], vtl[idx025]], [-1,1.5], '--', color='red', linewidth=2)\naxs[1].plot ([vtl[idx50],  vtl[idx50]], [-1,1.5], ':',   color='red', linewidth=2)\naxs[1].plot ([vtl[idx975], vtl[idx975]], [-1,1.5], '--', color='red', linewidth=2)\n\naxs[1].plot (vtl, pvtl, color='red', linewidth=3, label=r\"$p(v_t | \\varpi', \\mu_\\alpha', \\mu_\\delta )$\")\n\naxs[1].set_xlabel(r'$v_t$ (km s$^{-1}$)')\naxs[1].set_ylabel('Relative probability')\naxs[1].set_ylim([0.0, 1.1])\naxs[1].legend()\nplt.tight_layout()\nplt.savefig ('posterior_distance_vt.pdf')\nplt.show()\n\n```\n\nThis script produces the following image.\n\n![Posterior distance and velocity distribution for Gaia DR3 5703888058542880896](https://github.com/ignotur/post-velocity/blob/main/resources/posterior_distance_vt.jpg?raw=true)\n\n\n## References\n\nDetails of the calculations can be found in two articles:\n\nIgoshev, Verbunt & Cator (2016) A&A, 591, A123, 10\n\nIgoshev, Perets & Hallakoun (2022) ArXiv: 2209.09915\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "post-velocity",
    "package_url": "https://pypi.org/project/post-velocity/",
    "platform": null,
    "project_url": "https://pypi.org/project/post-velocity/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ignotur/post-velocity/issues",
      "Homepage": "https://github.com/ignotur/post-velocity"
    },
    "release_url": "https://pypi.org/project/post-velocity/0.1.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Package to compute Bayesian posterior distribution for transversal velocity using parallaxes and proper motions.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15724792,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7e74f5c41c13deeb61f87fa8193c42febff32f13912f140a4c4da4c0d0c4d03",
          "md5": "cdb51d82e5be8536a2f5614cf09e9133",
          "sha256": "2fdd4800f285ce9022ea4ae8d26cb4c1a063e81223ab9e7063e6293c30d11f70"
        },
        "downloads": -1,
        "filename": "post_velocity-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cdb51d82e5be8536a2f5614cf09e9133",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 18235,
        "upload_time": "2022-11-10T14:02:40",
        "upload_time_iso_8601": "2022-11-10T14:02:40.709278Z",
        "url": "https://files.pythonhosted.org/packages/a7/e7/4f5c41c13deeb61f87fa8193c42febff32f13912f140a4c4da4c0d0c4d03/post_velocity-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6052a4b7e16f346e083cde64bde8125f91121a1493f287e0a8939dd4321609da",
          "md5": "63186640b71ab8e3bc30c7ac48117030",
          "sha256": "1f06e3eb5d9eed90d8421fdb7f0cc5b45e979f925df63f61159b84040b262fcd"
        },
        "downloads": -1,
        "filename": "post_velocity-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "63186640b71ab8e3bc30c7ac48117030",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17537,
        "upload_time": "2022-11-10T14:02:42",
        "upload_time_iso_8601": "2022-11-10T14:02:42.149403Z",
        "url": "https://files.pythonhosted.org/packages/60/52/a4b7e16f346e083cde64bde8125f91121a1493f287e0a8939dd4321609da/post_velocity-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7e74f5c41c13deeb61f87fa8193c42febff32f13912f140a4c4da4c0d0c4d03",
        "md5": "cdb51d82e5be8536a2f5614cf09e9133",
        "sha256": "2fdd4800f285ce9022ea4ae8d26cb4c1a063e81223ab9e7063e6293c30d11f70"
      },
      "downloads": -1,
      "filename": "post_velocity-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cdb51d82e5be8536a2f5614cf09e9133",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 18235,
      "upload_time": "2022-11-10T14:02:40",
      "upload_time_iso_8601": "2022-11-10T14:02:40.709278Z",
      "url": "https://files.pythonhosted.org/packages/a7/e7/4f5c41c13deeb61f87fa8193c42febff32f13912f140a4c4da4c0d0c4d03/post_velocity-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6052a4b7e16f346e083cde64bde8125f91121a1493f287e0a8939dd4321609da",
        "md5": "63186640b71ab8e3bc30c7ac48117030",
        "sha256": "1f06e3eb5d9eed90d8421fdb7f0cc5b45e979f925df63f61159b84040b262fcd"
      },
      "downloads": -1,
      "filename": "post_velocity-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "63186640b71ab8e3bc30c7ac48117030",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17537,
      "upload_time": "2022-11-10T14:02:42",
      "upload_time_iso_8601": "2022-11-10T14:02:42.149403Z",
      "url": "https://files.pythonhosted.org/packages/60/52/a4b7e16f346e083cde64bde8125f91121a1493f287e0a8939dd4321609da/post_velocity-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}