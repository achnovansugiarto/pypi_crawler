{
  "info": {
    "author": "Vladimir V. Pivovarov",
    "author_email": "admin@p-app.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: aiohttp",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "## [REST collection](https://bitbucket.org/p-app/rest_collection) library client.\nThis package provides bindings for http REST client creation.\nThis package has no complete solutions for http client, because it has much \napplication-specific things usually.\n\n\n### HTTP client creation.\nPackage provides 4 abstract classes for HTTP client:\n1. `AbstractHttpClient` - HTTP client skeleton.\n2. `AbstractGetHttpClient` - HTTP client for GET requests only skeleton.\n3. `AbstractChunkedGetHttpClient` - HTTP client for GET requests, which \nrequest data with chunks (for smaller responses and network performance).\n4. `AbstractAuthenticatedChunkedGetHttpClient` - previos HTTP client, which \ncan send authorization requests before data requests.\n\n#### Example of http client\n```python\n## client.py\nfrom math import ceil\n\nfrom rest_collection_client.http import \\\n    AbstractAuthenticatedChunkedGetHttpClient\n\n\ndef _build_chunk_url(url, start, stop):\n    \"\"\"Some code, that build url.\"\"\"\n\n\ndef _get_chunk_total(chunk):\n    \"\"\"Some code, that get total value.\"\"\"\n    \n    \ndef _make_request(authentication_data):\n    \"\"\"Some code, that make JSON-like data, that will be sended to server.\"\"\"\n    \n\ndef _store_authorization_data(session, response):\n    \"\"\"Some code, that store authorization data to session for next requests.\"\"\"\n\n    \nclass RestCollectionClient(AbstractAuthenticatedChunkedGetHttpClient):\n\n    def _compose_other_chunk_urls(self, url, chunk_size, first_chunk):\n        total = _get_chunk_total(first_chunk)\n\n        for index in range(1, ceil(total / chunk_size)):\n            start = index * chunk_size\n            stop = (index + 1) * chunk_size\n\n            yield _build_chunk_url(url, start, stop)\n\n    def _compose_first_chunk_url(self, url, chunk_size):\n        return _build_chunk_url(url, 0, chunk_size)\n\n    async def _request_authentication(self, authentication_data):\n        url = authentication_data['url']\n\n        request = _make_request(authentication_data)\n\n        async with self._session.post(url, json=request) as resp:\n            if resp.status != 200:\n                return False\n\n            _store_authorization_data(self._session, resp)\n\n        return True\n```\nUsage of this class:\n```python\n## fetch.py\nfrom asyncio import get_event_loop\n\nfrom .client import RestCollectionClient\n\n\nchunk_size = 1000\nauthentication_data = {\n    'url': 'http://example.com/login',\n    'login': 'user',\n    'password': 'secret_password'\n}\ndata_url = 'http://example.com/data'\n\n\nasync def get():    \n    async with RestCollectionClient() as client:\n        return await client.get(\n            data_url, authentication_data, chunk_size=chunk_size\n        )\n\n# we will request data here with chunks and authentication request before.\ndef fetch_data():\n    loop = get_event_loop()\n    raw_response = loop.run_until_complete(get())\n    loop.close()\n    return raw_response   \n```\n\n\n### Join REST response in SQL-like manner.\nData from REST collection API looks like this structure:\n```json\n{\n  \"a\": [\n    {\"id\": 1, \"name\": \"a\"}\n  ],\n  \"b\": [\n    {\"id\": 2, \"a_id\": 1, \"name\": \"b\"}\n  ],\n  \"c\": [\n    {\"id\": 2, \"b_id\": 2, \"name\": \"c\"}\n  ]\n}\n```\nThey are normalized, like tables in SQL database. But, oftenly, we want to \nbuild 2-dimensioned table from them. \n\nIn SQL databases it is possible, when we use JOIN expression. So, we suggest \nto use similar way, built on the top of famous library called \n[pandas](https://pandas.pydata.org/).\n\n\n#### Declare join rules\nFirst of all, we need to declare how our data relates internally. For this \npurpose, this package provides some containers.\n```python\n## join.py\nfrom rest_collection_client.join import RestCollectionJoinColumns, \\\n    RestCollectionJoinRule, RestCollectionJoinSequence\n    \nRESPONSE_JOIN_SEQUENCE = RestCollectionJoinSequence(\n    RestCollectionJoinRule(\n        RestCollectionJoinColumns('a', 'id'),\n        RestCollectionJoinColumns('b', 'a_id')\n    ),\n    RestCollectionJoinRule(\n        RestCollectionJoinColumns('b', 'id'),\n        RestCollectionJoinColumns('c', 'b_id')\n    ),\n)\n\n# we will get 2d-table here\ndef make_table(response):\n    # response must be Mapping object with model names as keys and \n    # `pandas.DataFrame` objects as values.\n    return RESPONSE_JOIN_SEQUENCE.join(response)    \n```\nIn this example, we declare what columns of one model points to some columns \nin another model for each bond. Our relations contains in each case only one \ncolumn pointing to one column, but this package supports multiple columns \ndeclaration for each case as well.\n\n\n\n#### Prepare raw response data for joining.\nWe know, that JSON accepts only simple types of data, like booleans, strings,\n numbers. But we have to transfer more complex data sometimes, like \n datetimes, timedeltas, decimals and others.\n \nSo, we have to deserialize our raw response from server and convert them to \nthe map of `pandas.DataFrame`. This packages provides some containers to \nresolve this issue.\n```python\n## deserialize.py\nfrom rest_collection_client.response import \\\n    RestCollectionDeserializeMap, RestCollectionResponse\n\n\ndef _deserialize_a(a_item):\n    pass\n    \ndef _deserialize_b(b_item):\n    pass\n    \ndef _deserialize_c(c_item):\n    pass\n    \n    \nRESPONSE_DESERIALIZE_MAP = RestCollectionDeserializeMap(\n    a=_deserialize_a,\n    b=_deserialize_b,\n    c=_deserialize_c\n)\n\ndef deserialize_response(raw_response):\n    return RestCollectionResponse.deserialize(\n        raw_response, RESPONSE_DESERIALIZE_MAP\n    )\n```\n`RestCollectionDeserializeMap` creates map of callables for each model, which\n is required for `RestCollectionResponse.deserialize` classmethod.\n \n`RestCollectionResponse` is a `Mapping` object, with model names as keys and \n`pandas.DataFrame` objects as values (as join containers required).\n\n\n#### Rename response model columns.\nAs we see, some models may have equal-named columns, like all models in our \nexample - we talk about \"name\" column. If we join our response in \n2d-table, we will catch 3 columns, that will be called \"name\". It is very unclear, we can not predict what column belongs to some concrete model.\n\nEven worse case, if equal-named columns will appear in \"join\" column. We can \njoin out data in wrong way.\n\nThat\\`s why, `RestCollectionJoinSequence` container requires, that all column\n names must be unique.\n \nBy default, `RestCollectionJoinColumns` concatenates model name and column \nname with dot, like this: `a.name`, `b.a_id`, etc... According to this, we \nshould rename columns in our `RestCollectionResponse` before it will be \njoined by `RestCollectionJoinSequence`.\n\nThis package has default rename factory:\n```python\n## rename.py\nfrom rest_collection_client.response import RestCollectionRenameFactory\n\n\nRESPONSE_RENAME_FACTORY = RestCollectionRenameFactory()\n\ndef rename_response_values(response):\n    return response.rename(RESPONSE_RENAME_FACTORY)\n```\nYou can inherit `RestCollectionRenameFactory` and implement your own factory,\n but it must be related to rename manner of `RestCollectionJoinColumns`.\n \nBoth containers have keyword parameter `delimiter`, to declare concatenate \ndelimiter.\n\n\n### Full usage example\n```python\nfrom .fetch import fetch_data\nfrom .join import make_table\nfrom .deserialize import deserialize_response\nfrom .rename import rename_response_values\n\ndef main():\n    raw_response = fetch_data()\n    response = deserialize_response(raw_response)\n    response = rename_response_values(response)\n    return make_table(response)\n```\nAfter calling `main` function, we will get joined `pandas.DataFrame` \nstructure with requested data.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/p-app/rest_collection_client",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Vladimir V. Pivovarov",
    "maintainer_email": "admin@p-app.ru",
    "name": "rest-collection-client",
    "package_url": "https://pypi.org/project/rest-collection-client/",
    "platform": null,
    "project_url": "https://pypi.org/project/rest-collection-client/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/p-app/rest_collection_client",
      "Repository": "https://bitbucket.org/p-app/rest_collection_client"
    },
    "release_url": "https://pypi.org/project/rest-collection-client/0.7.0/",
    "requires_dist": [
      "aiohttp (>=3.8.0,<4.0.0)",
      "ujson; extra == \"ujson\"",
      "pandas (>=1.2.0,<2.0.0)",
      "collections-extension (>=0.5.0,<0.6.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Rest collection library HTTP client.",
    "version": "0.7.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17113335,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d254dc158fb4f4c74aeac484dc3822c8461458aeda8f9f0834f57cbc56ccfe1d",
          "md5": "f61d8391cfe38d90cd2f46efcbfaf513",
          "sha256": "f7c778b94e907a57917a091eb7ccddee7fcd560a026e0123bdf66de57e60944b"
        },
        "downloads": -1,
        "filename": "rest_collection_client-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f61d8391cfe38d90cd2f46efcbfaf513",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12856,
        "upload_time": "2020-12-01T11:47:37",
        "upload_time_iso_8601": "2020-12-01T11:47:37.923807Z",
        "url": "https://files.pythonhosted.org/packages/d2/54/dc158fb4f4c74aeac484dc3822c8461458aeda8f9f0834f57cbc56ccfe1d/rest_collection_client-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e3780accccd823644b63e0c612014ade224605ec20f28ad1343d597535636ce",
          "md5": "43a7dd0ac49cb66c9435980eca16939e",
          "sha256": "baad01b3c6a513ae4690b1875e831a0b7d41f9337bd4d6fbf8fd1f1ffe461bfe"
        },
        "downloads": -1,
        "filename": "rest_collection_client-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43a7dd0ac49cb66c9435980eca16939e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13066,
        "upload_time": "2020-12-14T08:31:50",
        "upload_time_iso_8601": "2020-12-14T08:31:50.009399Z",
        "url": "https://files.pythonhosted.org/packages/6e/37/80accccd823644b63e0c612014ade224605ec20f28ad1343d597535636ce/rest_collection_client-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cafcbf21971d5607cdacd8217ac7224cfdf2e579e9cfcac7467b195f48c4e110",
          "md5": "1f315bad852b1a8ab82627aed2999984",
          "sha256": "6d85a0c4b220d22a3d487d8681537bf2a3870f87606c7df90cf1324e34777d76"
        },
        "downloads": -1,
        "filename": "rest_collection_client-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1f315bad852b1a8ab82627aed2999984",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 15742,
        "upload_time": "2022-02-19T18:15:23",
        "upload_time_iso_8601": "2022-02-19T18:15:23.796869Z",
        "url": "https://files.pythonhosted.org/packages/ca/fc/bf21971d5607cdacd8217ac7224cfdf2e579e9cfcac7467b195f48c4e110/rest_collection_client-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fbaef6c08e777a783ec3300e8d9cfc4560e4ceed50dd6d6811af297a99be7ed",
          "md5": "13b0c95d165d59616a8a2ba5451c8045",
          "sha256": "2dda6e58ed2e72f355bb9772ecebc504f8d5720ba523f95de5a76f9e660eac8f"
        },
        "downloads": -1,
        "filename": "rest_collection_client-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "13b0c95d165d59616a8a2ba5451c8045",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 16873,
        "upload_time": "2022-08-17T05:03:52",
        "upload_time_iso_8601": "2022-08-17T05:03:52.547085Z",
        "url": "https://files.pythonhosted.org/packages/9f/ba/ef6c08e777a783ec3300e8d9cfc4560e4ceed50dd6d6811af297a99be7ed/rest_collection_client-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6846def617887121139b08b85d43b9aee5a285a5c542125404aedcd2622d12f0",
          "md5": "f0f0c03fb834ebf5eaed958995e9830d",
          "sha256": "c08c8c53b7591af68a9ef0579828ab3e8a0045387486fefb759ada0c8f423719"
        },
        "downloads": -1,
        "filename": "rest_collection_client-0.6.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f0f0c03fb834ebf5eaed958995e9830d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 16892,
        "upload_time": "2022-08-16T14:41:18",
        "upload_time_iso_8601": "2022-08-16T14:41:18.076654Z",
        "url": "https://files.pythonhosted.org/packages/68/46/def617887121139b08b85d43b9aee5a285a5c542125404aedcd2622d12f0/rest_collection_client-0.6.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa80c80cf0a54398dfec5ff07717a9328d5cbe77372122dd4ed8c3239b7dafa0",
          "md5": "3d082b250751a0868b0bc4a12e6e5c04",
          "sha256": "f3aa39f8376e98001389f3e1a654fc220503062e8f6f70aefd04253c39ee0aab"
        },
        "downloads": -1,
        "filename": "rest_collection_client-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d082b250751a0868b0bc4a12e6e5c04",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 16995,
        "upload_time": "2023-03-01T15:44:57",
        "upload_time_iso_8601": "2023-03-01T15:44:57.539892Z",
        "url": "https://files.pythonhosted.org/packages/aa/80/c80cf0a54398dfec5ff07717a9328d5cbe77372122dd4ed8c3239b7dafa0/rest_collection_client-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1746a4623f3c2d88439a28b8cf7dd923c16b190b9a84098251981aaac85de89c",
          "md5": "6f33e2c6bc195f617d631e8875beefc2",
          "sha256": "9e5664afdeabb053111f61d731d0fc688822b69702fd97be4bec62e39fe68f2a"
        },
        "downloads": -1,
        "filename": "rest_collection_client-0.7.0b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f33e2c6bc195f617d631e8875beefc2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 17061,
        "upload_time": "2023-02-28T17:47:23",
        "upload_time_iso_8601": "2023-02-28T17:47:23.432102Z",
        "url": "https://files.pythonhosted.org/packages/17/46/a4623f3c2d88439a28b8cf7dd923c16b190b9a84098251981aaac85de89c/rest_collection_client-0.7.0b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aa80c80cf0a54398dfec5ff07717a9328d5cbe77372122dd4ed8c3239b7dafa0",
        "md5": "3d082b250751a0868b0bc4a12e6e5c04",
        "sha256": "f3aa39f8376e98001389f3e1a654fc220503062e8f6f70aefd04253c39ee0aab"
      },
      "downloads": -1,
      "filename": "rest_collection_client-0.7.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d082b250751a0868b0bc4a12e6e5c04",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 16995,
      "upload_time": "2023-03-01T15:44:57",
      "upload_time_iso_8601": "2023-03-01T15:44:57.539892Z",
      "url": "https://files.pythonhosted.org/packages/aa/80/c80cf0a54398dfec5ff07717a9328d5cbe77372122dd4ed8c3239b7dafa0/rest_collection_client-0.7.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}