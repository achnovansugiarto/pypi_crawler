{
  "info": {
    "author": "Levi Borodenko",
    "author_email": "Levi.borodenko@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python"
    ],
    "description": "# Primify\n\n_Transform any image into a prime number that looks like the image if glanced upon from far away._\n\n![result](https://i.imgur.com/UoMYkVS.png)\n[![Build Status](https://travis-ci.org/joemccann/dillinger.svg?branch=master)](https://travis-ci.org/joemccann/dillinger)\n\n## How does it work\n\nWe proceed in 5 steps:\n\n1. We resize the image to contain at most a `--max-digits` amount of pixels.\n\n2. Run various image processing steps like edge enhancement and smoothing before converting the image into grey-scale.\n\n3. We then quantise the image into just having 5 to 10 greyness levels.\n\n4. Now we map each greyness level to a digit, et voila, we have embedded the picture into a number.\n\n5. It now remains to tweak some of the digits until we find a prime number that still looks like the image.\n\n_Note: According to the prime number theorem, the density of prime numbers is asymptotically of order 1/log(n). Hence, if we have some number n with m digits, the number of primality tests that we expect to do until we hit a prime number is roughly proportional to m. Since we use the Baillie–PSW primality test, the overall expected computational complexity of our prime searching procedure is O(n\\*log(n)³)._\n\n## How to use\n\nSimply get the `primify` command line tool via `pip install primify`.\nYou can also import the `PrimeImage` class from `primify.base` or use `cli.py` as a command-line script.\n\n### Command-line tool\n\n```\nusage: primify [-h] [--image IMAGE_PATH] [--max-digits MAX_DIGITS]\n               [--output-file OUTPUT_FILE]\n\nCommand-line tool for converting images to primes\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --image IMAGE_PATH, -i IMAGE_PATH\n                        Source image to be converted\n  --max-digits MAX_DIGITS, -d MAX_DIGITS\n                        Maximal number of digits the prime can have\n  --output-file OUTPUT_FILE, -o OUTPUT_FILE\n                        File name of the file containing the prime.\n\nMade by Levi B.\n```\n\nThus, if you have the source image at `./source.png` and you want to convert it into a prime contained in `./prime.txt` which has at most 5000 digits. Then you should run:\n\n`primify -v --image ./source.png --max-digits 5000 --output-file prime.txt`\n\n### Importing the PrimeImage class\n\nYou can also simply import the `PrimeImage` class from `primify.base` and use that class in your own code. Check the [documentation](https://primify.readthedocs.io/) for details on how to interact with the underlying API.\n\n### Additional Material\n\n[Daniel Temkin](http://danieltemkin.com/) wrote a lovely article on his blog [esoteric.codes](https://esoteric.codes) giving some interesting insight and background for this tool. You can read it [here](https://esoteric.codes/blog/primify).\n\n\n",
    "description_content_type": "text/markdown; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LeviBorodenko/primify",
    "keywords": "",
    "license": "mit",
    "maintainer": "",
    "maintainer_email": "",
    "name": "primify",
    "package_url": "https://pypi.org/project/primify/",
    "platform": "any",
    "project_url": "https://pypi.org/project/primify/",
    "project_urls": {
      "Documentation": "https://github.com/LeviBorodenko/primify",
      "Homepage": "https://github.com/LeviBorodenko/primify"
    },
    "release_url": "https://pypi.org/project/primify/2.0.0/",
    "requires_dist": [
      "certifi (==2019.3.9)",
      "mpmath (==1.1.0)",
      "Pillow (==8.4.0)",
      "sympy (==1.9)",
      "gmpy2 (==2.1.1)",
      "rich (==10.16.1)",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'"
    ],
    "requires_python": ">=3.8",
    "summary": "Embed any image into a prime number.",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12387992,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2561b9090942832ce1ecd2feb6aeb9dd65ee2ae9d3394ef5c6d53c1c7f220e15",
          "md5": "69e5b420d67efedf22754c08ca56966c",
          "sha256": "3b4336c43d3a37d7fae819526e53131f9fb6684433fb3368b567d6b9256d59d3"
        },
        "downloads": -1,
        "filename": "primify-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "69e5b420d67efedf22754c08ca56966c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1403095,
        "upload_time": "2020-01-05T20:00:38",
        "upload_time_iso_8601": "2020-01-05T20:00:38.078173Z",
        "url": "https://files.pythonhosted.org/packages/25/61/b9090942832ce1ecd2feb6aeb9dd65ee2ae9d3394ef5c6d53c1c7f220e15/primify-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "390932382d249e81e5db0611704b83403a85643ea20a13c2a84095a99eb73466",
          "md5": "e7ddc1e1b4fee2d1a61e1256894d9fc6",
          "sha256": "d73fb24f1a14ec8ffcf2c777b6640069dc5f65995075bb2502911b74cc563520"
        },
        "downloads": -1,
        "filename": "primify-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e7ddc1e1b4fee2d1a61e1256894d9fc6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1403324,
        "upload_time": "2020-01-07T00:06:30",
        "upload_time_iso_8601": "2020-01-07T00:06:30.181746Z",
        "url": "https://files.pythonhosted.org/packages/39/09/32382d249e81e5db0611704b83403a85643ea20a13c2a84095a99eb73466/primify-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f3489ab67b2f2e4cbf214c8bdfa743da4eb23c19ae918de582f8e84933c762d",
          "md5": "cfa7a3afd08fc6edcc0453a2ace2adc4",
          "sha256": "119fef92135f99460782064869653926e5d73d765f7336005ed96bd729092f06"
        },
        "downloads": -1,
        "filename": "primify-2.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cfa7a3afd08fc6edcc0453a2ace2adc4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 8535,
        "upload_time": "2021-12-23T08:31:23",
        "upload_time_iso_8601": "2021-12-23T08:31:23.885041Z",
        "url": "https://files.pythonhosted.org/packages/9f/34/89ab67b2f2e4cbf214c8bdfa743da4eb23c19ae918de582f8e84933c762d/primify-2.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f3489ab67b2f2e4cbf214c8bdfa743da4eb23c19ae918de582f8e84933c762d",
        "md5": "cfa7a3afd08fc6edcc0453a2ace2adc4",
        "sha256": "119fef92135f99460782064869653926e5d73d765f7336005ed96bd729092f06"
      },
      "downloads": -1,
      "filename": "primify-2.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cfa7a3afd08fc6edcc0453a2ace2adc4",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.8",
      "size": 8535,
      "upload_time": "2021-12-23T08:31:23",
      "upload_time_iso_8601": "2021-12-23T08:31:23.885041Z",
      "url": "https://files.pythonhosted.org/packages/9f/34/89ab67b2f2e4cbf214c8bdfa743da4eb23c19ae918de582f8e84933c762d/primify-2.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}