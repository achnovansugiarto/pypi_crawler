{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# apllox-connector-python\n\n# Binance Futures Public API Connector Python\n[![Python 3.6](https://img.shields.io/badge/python-3.6+-blue.svg)](https://www.python.org/downloads/release/python-360/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nThis is a lightweight library that works as a connector to [Apollo Finance public API](https://github.com/apollox-finance/apollox-finance-api-docs)\n\n## Installation\n\n```bash\npip install apollox-connector-python\n```\n\n## Documentation\n\n\n## RESTful APIs\n\nUsage examples:\n```python\nfrom apollox.rest_api import Client \n\n# Get timestamp\nclient = Client()\nprint(client.time())\n\n\nclient = Client(key='<api_key>', secret='<api_secret>')\n\n# Get account information\nprint(client.account())\n\n# Post a new order\nparams = {\n    'symbol': 'BTCUSDT',\n    'side': 'SELL',\n    'type': 'LIMIT',\n    'timeInForce': 'GTC',\n    'quantity': 0.002,\n    'price': 59808\n}\n\nresponse = client.new_order(**params)\nprint(response)\n```\nPlease find `examples` folder to check for more endpoints.\n\n### Base URL\n`https://fapi.apollox.finance`\n\n### Optional parameters\n\nPEP8 suggests _lowercase with words separated by underscores_, but for this connector,\nthe methods' optional parameters should follow their exact naming as in the API documentation.\n\n```python\n# Recognised parameter name\nresponse = client.query_order('BTCUSDT', orderListId=1)\n\n# Unrecognised parameter name\nresponse = client.query_order('BTCUSDT', order_list_id=1)\n```\n\n### RecvWindow parameter\n\nAdditional parameter `recvWindow` is available for endpoints requiring signature.<br/>\nIt defaults to `5000` (milliseconds) and can be any value lower than `60000`(milliseconds).\nAnything beyond the limit will result in an error response from Binance server.\n\n```python\nfrom apollox.rest_api import Client\n\nclient = Client(key, secret)\nresponse = client.query_order('BTCUSDT', orderId=11, recvWindow=10000)\n```\n\n### Timeout\n\n`timeout` is available to be assigned with the number of seconds you find most appropriate to wait for a server response.<br/>\nPlease remember the value as it won't be shown in error message _no bytes have been received on the underlying socket for timeout seconds_.<br/>\nBy default, `timeout` is None. Hence, requests do not time out.\n\n```python\nfrom apollox.rest_api import Client\n\nclient= Client(timeout=1)\n```\n\n### Proxy\nproxy is supported\n\n```python\nfrom bapollo.rest_api import Client\n\nproxies = { 'https': 'http://1.2.3.4:8080' }\n\nclient= Client(proxies=proxies)\n```\n\n### Response Metadata\n\nThe Binance API server provides weight usages in the headers of each response.\nYou can display them by initializing the client with `show_limit_usage=True`:\n\n```python\nfrom apollox.rest_api import Client\n\nclient = Client(show_limit_usage=True)\nprint(client.time())\n```\n\nYou can also display full response metadata to help in debugging:\n\n```python\nclient = Client(show_header=True)\nprint(client.time())\n```\n\nIf `ClientError` is received, it'll display full response meta information.\n\n### Display logs\n\nSetting the log level to `DEBUG` will log the request URL, payload and response text.\n\n### Error\n\nThere are 2 types of error returned from the library:\n- `apollox.error.ClientError`\n    - This is thrown when server returns `4XX`, it's an issue from client side.\n    - It has 4 properties:\n        - `status_code` - HTTP status code\n        - `error_code` - Server's error code, e.g. `-1102`\n        - `error_message` - Server's error message, e.g. `Unknown order sent.`\n        - `header` - Full response header. \n- `apollox.error.ServerError`\n    - This is thrown when server returns `5XX`, it's an issue from server side.\n\n## Websocket\n\n```python\nfrom apollox.websocket.client.stream import WebsocketClient as Client\n\ndef message_handler(message):\n    print(message)\n\nws_client = Client()\nws_client.start()\n\nws_client.mini_ticker(\n    symbol='bnbusdt',\n    id=1,\n    callback=message_handler,\n)\n\n# Combine selected streams\nws_client.instant_subscribe(\n    stream=['bnbusdt@bookTicker', 'ethusdt@bookTicker'],\n    callback=message_handler,\n)\n\nws_client.stop()\n```\nMore websocket examples are available in the `examples` folder\n\n### Heartbeat\n\nOnce connected, the websocket server sends a ping frame every 3 minutes and requires a response pong frame back within\na 10 minutes period. This package handles the pong responses automatically.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/apollox-finance/apollox-connector-python",
    "keywords": "Apollox,Public API",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "apollox-connector-python",
    "package_url": "https://pypi.org/project/apollox-connector-python/",
    "platform": null,
    "project_url": "https://pypi.org/project/apollox-connector-python/",
    "project_urls": {
      "Homepage": "https://github.com/apollox-finance/apollox-connector-python"
    },
    "release_url": "https://pypi.org/project/apollox-connector-python/1.1.0/",
    "requires_dist": [
      "autobahn (>=21.2.1)",
      "Twisted (>=22.2.0)",
      "requests (>=2.25.1)",
      "pyOpenSSL (>=19.0.0)",
      "service-identity (>=21.1.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "This is a lightweight library that works as a connector to Apollox Finance public API.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13875137,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "55e805116cfab7d5f44e16a5b61ccda07c3f8d161e26c16164d6c79f5a2538bf",
          "md5": "eb029af91df5fbf7a6082bdc4a0db1d9",
          "sha256": "d4adc014d615049957fb8dfe4c820d1a8080f1fb95d04689e658e88a76b4a4c0"
        },
        "downloads": -1,
        "filename": "apollox_connector_python-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb029af91df5fbf7a6082bdc4a0db1d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18170,
        "upload_time": "2022-05-20T07:29:57",
        "upload_time_iso_8601": "2022-05-20T07:29:57.842508Z",
        "url": "https://files.pythonhosted.org/packages/55/e8/05116cfab7d5f44e16a5b61ccda07c3f8d161e26c16164d6c79f5a2538bf/apollox_connector_python-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "89c695570b904ed88877d78e2011b38b7b553bd81b1e58854ad25e6ec0fe5059",
          "md5": "3568a9a3056f162bfc993ffa35e1c672",
          "sha256": "23a7bb451fde4b98478555090fd6e29253a462562bbd0562a098a080021ab0d3"
        },
        "downloads": -1,
        "filename": "apollox-connector-python-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3568a9a3056f162bfc993ffa35e1c672",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15916,
        "upload_time": "2022-05-20T07:29:59",
        "upload_time_iso_8601": "2022-05-20T07:29:59.831859Z",
        "url": "https://files.pythonhosted.org/packages/89/c6/95570b904ed88877d78e2011b38b7b553bd81b1e58854ad25e6ec0fe5059/apollox-connector-python-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "55e805116cfab7d5f44e16a5b61ccda07c3f8d161e26c16164d6c79f5a2538bf",
        "md5": "eb029af91df5fbf7a6082bdc4a0db1d9",
        "sha256": "d4adc014d615049957fb8dfe4c820d1a8080f1fb95d04689e658e88a76b4a4c0"
      },
      "downloads": -1,
      "filename": "apollox_connector_python-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eb029af91df5fbf7a6082bdc4a0db1d9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 18170,
      "upload_time": "2022-05-20T07:29:57",
      "upload_time_iso_8601": "2022-05-20T07:29:57.842508Z",
      "url": "https://files.pythonhosted.org/packages/55/e8/05116cfab7d5f44e16a5b61ccda07c3f8d161e26c16164d6c79f5a2538bf/apollox_connector_python-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "89c695570b904ed88877d78e2011b38b7b553bd81b1e58854ad25e6ec0fe5059",
        "md5": "3568a9a3056f162bfc993ffa35e1c672",
        "sha256": "23a7bb451fde4b98478555090fd6e29253a462562bbd0562a098a080021ab0d3"
      },
      "downloads": -1,
      "filename": "apollox-connector-python-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3568a9a3056f162bfc993ffa35e1c672",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15916,
      "upload_time": "2022-05-20T07:29:59",
      "upload_time_iso_8601": "2022-05-20T07:29:59.831859Z",
      "url": "https://files.pythonhosted.org/packages/89/c6/95570b904ed88877d78e2011b38b7b553bd81b1e58854ad25e6ec0fe5059/apollox-connector-python-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}