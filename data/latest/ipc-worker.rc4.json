{
  "info": {
    "author": "ssbuild",
    "author_email": "9727464@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "ipc-worker: Inter-Process Communication , muti Process Woker works by share memory or MQ.\n\n```py\nsupport share memory (py>=3.8 and linux) and mq process worker (py >=3.6)\n\n```\n```py\n# -*- coding: utf-8 -*-\n# @Time    : 2021/11/23 9:35\n\n'''\ndemo share memrory\nrecommended system linux and python >= 3.8\n    recommended linux\n    python 3.8\n\nDo not recommended run in windows , it will report an error as follow\n    RuntimeError:\n            An attempt has been made to start a new process before the\n            current process has finished its bootstrapping phase.\n\n'''\n\nimport multiprocessing\nimport time,os\nfrom ipc_worker.ipc_shm_loader import IPC_shm,SHM_process_worker\n\n\n\nclass My_worker(SHM_process_worker):\n    def __init__(self,config,*args,**kwargs):\n        super(My_worker,self).__init__(*args,**kwargs)\n        #config info , use by yourself\n\n        self._logger.info('Process id {}, group name {} ,shm name {}'.format(self._idx,self._group_name,self._shm_name))\n        self._logger.info(config)\n        self.config = config\n\n\n    #Process begin trigger this func\n    def run_begin(self):\n        self._logger.info('worker pid {}...'.format(os.getpid()))\n        self.handle = None\n        pass\n\n    # Process end trigger this func\n    def run_end(self):\n        if self.handle is not None:\n            pass\n\n    #any data put will trigger this func\n    def run_once(self,request_data):\n        #process request_data\n        if isinstance(request_data,dict):\n            request_data['b']  = 200\n        if self.handle is not None:\n            #do some thing\n            pass\n        return request_data\n\n\nif __name__ == '__main__':\n    config = {\n        \"anything\" : \"anything\",\n        \"aa\": 100\n    }\n\n    evt_quit = multiprocessing.Manager().Event()\n\n    # group_name 为共享内存组名,需唯一\n    # manager is an agent  and act as a load balancing\n    # worker is real doing your work\n    instance = IPC_shm(\n        CLS_worker=My_worker,\n        worker_args=(config,),  # must be tuple\n        worker_num=10,  # number of worker Process\n        manager_num=2,  # number of agent Process\n        group_name='serving_shm',  # share memory name\n        shm_size=1 * 1024 * 1024,  # share memory size\n        queue_size=20,  # recv queue size\n        is_log_time=True,  # whether log compute time\n    )\n\n    instance.start()\n\n    #demo produce and consume message , you can process by http\n    for i in range(10):\n        print('produce message')\n        data = {\"a\" : 100}\n        request_id = instance.put(data)\n        data = instance.get(request_id)\n        print('get process result',data)\n    try:\n        instance.join()\n    except Exception as e:\n        evt_quit.set()\n        instance.terminate()\n\n    del evt_quit\n```\n```py\n# -*- coding: utf-8 -*-\n# @Time    : 2021/11/29 15:06\n# @Author  : wyw\n\n\nimport multiprocessing\nimport os\nfrom ipc_worker.ipc_zmq_loader import IPC_zmq,ZMQ_process_worker\n'''\n    demo ZMQ depend zmq\n    pip install pyzmq\n    \n    test pass >= python3.6\n'''\n\ntmp_dir = './tmp'\nif not os.path.exists(tmp_dir):\n    os.mkdir(tmp_dir)\n\nos.environ['ZEROMQ_SOCK_TMP_DIR'] = tmp_dir\n\nclass My_worker(ZMQ_process_worker):\n    def __init__(self,config,*args,**kwargs):\n        super(My_worker,self).__init__(*args,**kwargs)\n        #config info , use by yourself\n        self._logger.info('Process id {}, group name {} , identity {}'.format(self._idx,self._group_name,self._identity))\n        self._logger.info(config)\n        self.config = config\n\n    #Process begin trigger this func\n    def run_begin(self):\n        self._logger.info('worker pid {}...'.format(os.getpid()))\n        self.handle = None\n        pass\n\n    # Process end trigger this func\n    def run_end(self):\n        if self.handle is not None:\n            pass\n\n    #any data put will trigger this func\n    def run_once(self,request_data):\n        #process request_data\n        if isinstance(request_data,dict):\n            request_data['b'] = 200\n        if self.handle is not None:\n            #do some thing\n            pass\n        return request_data\n\n\nif __name__ == '__main__':\n    config = {\n        \"anything\" : \"anything\",\n        \"aa\": 100\n    }\n\n    evt_quit = multiprocessing.Manager().Event()\n\n    # group_name 为共享内存组名,需唯一\n    # manager is an agent  and act as a load balancing\n    # worker is real doing your work\n    instance = IPC_zmq(\n        CLS_worker=My_worker,\n        worker_args=(config,),  # must be tuple\n        worker_num=10,  # number of worker Process\n        group_name='serving_zmq',  # share memory name\n        evt_quit=evt_quit,\n        queue_size=20,  # recv queue size\n        is_log_time=True,  # whether log compute time\n    )\n    instance.start()\n\n    #demo produce and consume message , you can process by http\n    for i in range(10):\n        data = {\"a\" : 100}\n        request_id = instance.put(data)\n\n        data = instance.get(request_id)\n        print('get process result',request_id,data)\n    try:\n        instance.join()\n    except Exception as e:\n        evt_quit.set()\n        instance.terminate()\n    del evt_quit\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ssbuild",
    "keywords": "ipc-worker,ipc_worker,ipc,process worker,ipc,ipc mq,fast-ipc,process ipc",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ipc-worker",
    "package_url": "https://pypi.org/project/ipc-worker/",
    "platform": "win32_AMD64",
    "project_url": "https://pypi.org/project/ipc-worker/",
    "project_urls": {
      "Homepage": "https://github.com/ssbuild"
    },
    "release_url": "https://pypi.org/project/ipc-worker/0.0.8/",
    "requires_dist": [
      "se-imports (>=0.1.1)"
    ],
    "requires_python": ">=3, <4",
    "summary": "ipc-worker: Inter-Process Communication , muti Process Woker works by share memory or MQ.",
    "version": "0.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16650089,
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6382232edf9f7b66b8da157713f937c4dc7904913dfe3bd24903b365dd6a259",
          "md5": "88635c82a03d29a6fe261583cae12d83",
          "sha256": "1565321afcf8c7a7754ef0469e7334a0bffa49ae3ffc7956f7a161d289782a09"
        },
        "downloads": -1,
        "filename": "ipc_worker-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88635c82a03d29a6fe261583cae12d83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3, <4",
        "size": 26763,
        "upload_time": "2021-12-01T06:14:47",
        "upload_time_iso_8601": "2021-12-01T06:14:47.928676Z",
        "url": "https://files.pythonhosted.org/packages/e6/38/2232edf9f7b66b8da157713f937c4dc7904913dfe3bd24903b365dd6a259/ipc_worker-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edcceb73d855f79872aec7e6d55d5aba284a8b7fc674662bb6a5cb964affb5dd",
          "md5": "21b780b10f1dcc9b9af887fbb0ccdfdf",
          "sha256": "749dbf6b9269d35500311d9fc328ff93b0fd2bd7c8c5c29ed13e5a60785ed8f2"
        },
        "downloads": -1,
        "filename": "ipc_worker-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "21b780b10f1dcc9b9af887fbb0ccdfdf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3, <4",
        "size": 26684,
        "upload_time": "2022-04-07T07:47:54",
        "upload_time_iso_8601": "2022-04-07T07:47:54.824476Z",
        "url": "https://files.pythonhosted.org/packages/ed/cc/eb73d855f79872aec7e6d55d5aba284a8b7fc674662bb6a5cb964affb5dd/ipc_worker-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfc790709ae8c64763fb87678f5b12ff727d962b0d666da9721d4a6f283f5d51",
          "md5": "f882b91ed7c7cf3fe625755037e8abe0",
          "sha256": "ac932a516b8f038099d044e94901ce74d8b91c860ccfefa1a9b8af869dc2dbde"
        },
        "downloads": -1,
        "filename": "ipc_worker-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f882b91ed7c7cf3fe625755037e8abe0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3, <4",
        "size": 26897,
        "upload_time": "2022-09-27T08:35:07",
        "upload_time_iso_8601": "2022-09-27T08:35:07.337424Z",
        "url": "https://files.pythonhosted.org/packages/bf/c7/90709ae8c64763fb87678f5b12ff727d962b0d666da9721d4a6f283f5d51/ipc_worker-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcd0e7ffca827f728ce00fa2fadde8662e61f3a5673ea48298f919f2fcdb2e23",
          "md5": "3b6c403632c47071fa34f22dd6aef076",
          "sha256": "0f10f043f3fbf1703d9866b806a12924c5b1ffd8db3a5f6373acd224e9135421"
        },
        "downloads": -1,
        "filename": "ipc_worker-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b6c403632c47071fa34f22dd6aef076",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3, <4",
        "size": 26938,
        "upload_time": "2023-02-01T12:03:15",
        "upload_time_iso_8601": "2023-02-01T12:03:15.873071Z",
        "url": "https://files.pythonhosted.org/packages/dc/d0/e7ffca827f728ce00fa2fadde8662e61f3a5673ea48298f919f2fcdb2e23/ipc_worker-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dcd0e7ffca827f728ce00fa2fadde8662e61f3a5673ea48298f919f2fcdb2e23",
        "md5": "3b6c403632c47071fa34f22dd6aef076",
        "sha256": "0f10f043f3fbf1703d9866b806a12924c5b1ffd8db3a5f6373acd224e9135421"
      },
      "downloads": -1,
      "filename": "ipc_worker-0.0.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3b6c403632c47071fa34f22dd6aef076",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3, <4",
      "size": 26938,
      "upload_time": "2023-02-01T12:03:15",
      "upload_time_iso_8601": "2023-02-01T12:03:15.873071Z",
      "url": "https://files.pythonhosted.org/packages/dc/d0/e7ffca827f728ce00fa2fadde8662e61f3a5673ea48298f919f2fcdb2e23/ipc_worker-0.0.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}