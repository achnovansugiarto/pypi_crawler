{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Topic :: Security",
      "Topic :: System :: Networking :: Firewalls"
    ],
    "description": "# capirca\n\n[![BuildStatus](https://travis-ci.org/google/capirca.svg?branch=master)](https://travis-ci.org/google/capirca)\n<!-- <a href=\"https://github.com/google/capirca/actions/\" target=\"_blank\"><img src=\"https://github.com/google/capirca/workflows/build/badge.svg?branch=master\"></a> -->\n\n- [About](#about)\n- [The basics](#the-basics)\n  - [Anatomy of a policy file](#anatomy-of-a-policy-file)\n      - [Headers](#headers)\n      - [Terms](#terms)\n      - [Tokens](#tokens)\n  - [Keywords](#keywords)\n      - [Required](#required)\n      - [Optional](#optional)\n  - [Includes](#includes)\n  - [Example](#example)\n      - [Term Keywords By Generator](#term-keywords-by-generator)\n      - [Term Examples](#term-examples)\n      - [Example Policy File](#example-policy-file)\n- [Getting Started](#getting-started)\n  - [Installation](#installation)\n      - [From Source](#from-source)\n      - [Package Manager](#package-manager)\n  - [Basic Usage](#basic-usage)\n  - [Python Package](#python-package)\n  - [Running with Docker](#running-with-docker)\n- [Miscellaneous](#miscellaneous)\n\n## About\n\nCapirca is designed to utilize common definitions of networks, services and\nhigh-level policy files to facilitate the development and manipulation of\nnetwork access control lists (ACLs) for various platforms. It was developed by\nGoogle for internal use, and is now open source.\n\nCapirca consist of `capirca` Python package and the `capirca` tool.\n\nThe typical usage workflow consists of the following steps:\n\n1.  Create **object definitions** containing \"network\" and \"service\" definitions\n1.  Create a **access control policy** defining the desired state of access\n    control and referencing the **object definitions** together with desired\n    firewall platforms\n1.  Generate ACL configurations by running `capirca` command referencing the\n    access control policy and the object definitions. The command triggers a\n    **generator** for each of the firewall platforms.\n\n## The basics\n\nAt a high-level capirca rationalizes objects (networks, services) against a\nsecurity definition (.pol file) to generate a specific device configuration file\nvia a platform specific **ACL generator**. Before getting started some objects\nmust exist, the below table summarizes where objects are stored:\n\npath              | description\n----------------- | -----------------------------------------\n/def/NETWORK.net  | a list of **network objects** definitions\n/def/SERVICES.svc | a list of **service objects** definitions\n\nEach network or service definition file has a very simple structure. A token is\ndefined, e.g. `GUEST_NET`, followed by an equal sign, then followed by a\ndefinition, e.g. `10.10.10.0/24`, and optional description field, e.g. `# guest\nnetwork range`.\n\n```\nGUEST_NET = 10.10.10.0/24      # guest network range\n```\n\nThe tool populates the **access control policy** from `.pol` files in a\nparticular directory, e.g. [`policies/`](./policies/). The tool searches\nrecursively for `.pol` files and add them to the policy, .e.g `.pol` files are\nlocated in [`policies/pol`](./policies/pol).\n\nAdditionally, the `.pol` files MAY reference other policy definition files\nlocated outside of the directory by using `include` directive. Please see\n[Includes](#includes) section for documentation.\n\n### Network Objects\n\nThe files with `.net` extension contain the definitions of network objects, e.g.\nIP networks and hosts. The following definition creates `INTERNAL` and `RFC1918`\nnetwork objects in the object definitions, whether `INTERNAL` references the IP\nranges of RFC 1918 defined in the `RFC1918`.\n\n```\nRFC1918 = 10.0.0.0/8      # non-public\n          172.16.0.0/12   # non-public\n          192.168.0.0/16  # non-public\n\nINTERNAL = RFC1918\n```\n\n[Back to Top](#table-of-contents)\n\n### Service Objects\n\nThe files with `.svc` extension contain the definitions of service objects, e.g.\nports and protocols.\n\n```\nDNS = 53/tcp  # transfers\n      53/udp  # queries\n```\n\n[Back to Top](#table-of-contents)\n\n### Object Nesting\n\nThe nesting of tokens is permitted only when both tokens are of the same type.\nThe referencing of a \"network\" object by \"service\" object is not allowed, and\nvice versa.\n\nThe examples of nesting of the network and service object follow.\n\n```\nHTTP = 80/tcp               # common web\nHTTPS = 443/tcp             # SSL web\nHTTP_8080 = 8080/tcp        #  web on non-standard port\nWEB_SERVICES = HTTP HTTP_8080 HTTPS  # all our web services\nDB_SERVICES = 3306/tcp      # allow db access\n              HTTPS         # and SSL access\nNYC_NETWORK = 200.1.1.0/24  # New York office\nATL_NETWORK = 200.2.1.0/24  # Atlanta office\nDEN_NETWORK = 200.5.1.0/24  # Denver office\nREMOTE_OFFICES = NYC_NETWORK\n                 ATL_NETWORK\n                 DEN_NETWORK\n```\n\nThe network objects may reference both IPv4 and IPv6 addresses at the same time.\n\n```\nLOOPBACK = 127.0.0.1/32          # loopback in IPv4\n           ::1/128               # loopback in IPv6\nLINKLOCAL = FE80::/10            # IPv6 link local address\nNYC_NETWORK = 172.16.1.0/24      # NYC IPv4\n              2620:0:10A1::/48   # NYC IPv6\n```\n\n[Back to Top](#table-of-contents)\n\n### Anatomy of a policy file\n\nA policy file (/policies/pol/something.pol) has the security policy written\nusing capirca specific meta-language and format. There are specific sections\n(e.g: header) that tell capirca how to generate the output configuration of the\nsecurity policy.\n\n#### Headers\n\nThe header section defines:\n\n*   **target** firewall platforms (which ACL generator to use)\n*   passes **additional arguments** to the generator responsible for that\n    platform.\n\nA single header may have many targets within a section. It will result in\nmultiple outputs being generated for that policy.\n\n#### Terms\n\nThe **term** sections defines the access control rules within an ACL, it contains\nkeywords followed by an object (service or network) and policy decision (\"action\" keyword).\n\nThe term section specifies the network flow metadata for ACL matching.\n\n*   Addresses\n*   Ports\n*   Protocols\n*   Action (allow/deny)\n\nInside a `term` a mandatory keyword will be found followed by an object token\nfor rule evaluation.\n\n#### Tokens\n\nTokens are the names of services and networks loaded from the object\ndefinitions. Example:\n\ntoken_name    | definition\n------------- | --------------\n\"HTTPS\"       | 443\n\"NYC_NETWORK\" | 192.168.0.0/24\n\n### Keywords\n\n| keyword  | description                                                      |\n| -------- | ---------------------------------------------------------------- |\n| required | **must be supported by all output policy generators**            |\n| optional | available in a subset of the generators and are intended to      |\n:          : provide additional flexibility when developing policies for that :\n:          : specific target platform                                         :\n\n#### Required\n\n*   **action**\n    *   accept\n    *   deny\n    *   reject\n    *   next\n    *   reject-with-tcp-rst\n*   **comment**\n    *   a text comment enclosed in double-quotes. Comments may span multiple\n        lines if desired.\n*   **destination-address**\n    *   one or more destination address tokens.\n*   **destination-exclude**\n    *   exclude one or more address tokens from the specified\n        destination-address.\n*   **destination-port**\n    *   one or more service definition tokens.\n*   **icmp-type**\n    *   specific icmp-type code to match (IPv4/IPv6 types vary).\n        *   IPv4:\n        *   echo-reply\n        *   unreachable\n        *   source-quench\n        *   redirect\n        *   alternate-address\n        *   echo-request\n        *   router-advertisement\n        *   router-solicitation\n        *   time-exceeded\n        *   parameter-problem\n        *   timestamp-request\n        *   timestamp-reply\n        *   information-request\n        *   information-reply\n        *   mask-request\n        *   mask-reply\n        *   conversion-error\n        *   mobile-redirect\n        *   IPv6:\n        *   destination-unreachable\n        *   packet-too-big\n        *   time-exceeded\n        *   parameter-problem\n        *   echo-request\n        *   echo-reply\n        *   multicast-listener-query\n        *   multicast-listener-report\n        *   multicast-listener-done\n        *   router-solicit\n        *   router-advertisement\n        *   neighbor-solicit\n        *   neighbor-advertisement\n        *   redirect-message\n        *   router-renumbering\n        *   icmp-node-information-query\n        *   icmp-node-information-response\n        *   inverse-neighbor-discovery-solicitation\n        *   inverse-neighbor-discovery-advertisement\n        *   version-2-multicast-listener-report\n        *   home-agent-address-discovery-request\n        *   home-agent-address-discovery-reply\n        *   mobile-prefix-solicitation\n        *   mobile-prefix-advertisement\n        *   certification-path-solicitation\n        *   certification-path-advertisement\n        *   multicast-router-advertisement\n        *   multicast-router-solicitation\n        *   multicast-router-termination\n*   **option**\n    *   connection options.\n        *   **established**\n            *   only permit established connections; implements tcp-established\n                flag if protocol is tcp only, otherwise adds 1024-65535 to\n                required destination-ports.\n        *   **tcp-established**\n            *   only permit established tcp connections, usually checked based\n                on TCP flag settings. If protocol UDP is included in term, only\n                adds 1024-65535 to required destination-ports.\n        *   **sample**\n            *   not supported by all generators. Samples traffic for netflow.\n        *   **intial**\n            *   currently only supported by juniper generator. Appends\n                tcp-initial to the term.\n        *   **rst**\n            *   currently only supported by juniper generator. Appends\n                \"tcp-flags rst\" to the term.\n        *   **first-fragment**\n            *   currently only supported by juniper generator. Appends\n                'first-fragment' to the term.\n*   **protocol**\n    *   network protocols this term will match, such as tcp, udp, icmp, or a\n        numeric value.\n*   **protocol-except**\n    *   network protocols that should be excluded from the protocol\n        specification. This is rarely used.\n*   **source-address**\n    *   one or more source address tokens.\n*   **source-exclude**\n    *   exclude one or more address tokens from the specified source-address.\n*   **source-port**\n    *   one or more service definition tokens.\n*   **verbatim**\n    *   this specifies that the text enclosed within quotes should be rendered\n        into the output without interpretation or modification. This is\n        sometimes used as a temporary workaround while new required features are\n        being added.\n\n#### Optional\n\nWARNING: These terms may or may not function properly on all generators. Always\nrefer to the generator specific documentation and code base.\n\n*   **address**\n    *   one or more network address tokens matches either source or destination.\n*   **counter**\n    *   (Juniper only) enable filter-based generic routing encapsulation (GRE)\n        tunneling using the specified tunnel template.\n*   **destination-prefix**\n    *   (Juniper only) specify destination-prefix matching (e.g. source-prefix`\n        configured-neighbors-only).\n*   **ether-type**\n    *   (Juniper only) specify matching ether-type(e.g. ether-type` arp).\n*   **fragement-offset**\n    *   (Juniper only) specify a fragment offset of a fragmented packet.\n*   **logging**\n    *   (Juniper, speedway/iptables) specify that this packet should be logged\n        via syslog.\n*   **loss-priority**\n    *   (Juniper only) specify loss priority.\n*   **packet-length**\n    *   (Juniper only) specify packet length.\n*   **policer**\n    *   (Juniper only) specify which policer to apply to matching packets.\n*   **precedence**\n    *   (Juniper only) specify precendence.\n*   **qos**\n    *   (Juniper only) apply quality of service classification to matching\n        packets (e.g. qos` af4).\n*   **routing-instance**\n    *   (iptables, speedway only) specify specific interface a term should apply\n        to (e.g. source-interface` eth3).\n*   **source-prefix**\n    *   (Juniper only) specify source-prefix matching (e.g. source-prefix,\n        configured-neighbors-only).\n*   **traffic-type**\n    *   (Juniper only) specify traffic-type.\n\n### Includes\n\nPolicy files support the use of `#include` statements. An include may be used to\navoid duplication of commonly used text, such as a group of terms that permit or\nblock specific types of traffic.\n\nAn include directive will result in the contents of the included file being\ninjected into the current policy file in the exact location of the `#include`\ndirective. An example include:\n\n```\n#include 'includes/untrusted-networks-blocking.inc'\n```\nNOTE: Includes are only read from the subdirectories of your base_directory,\nall other directories will error out.\n\nThe `.inc` file extension and the `includes/` folder is not required but it is\nrecommended to be used as a best practice and for easier readability.\n\n### Example\n\nWARNING: Not all generators have the same configuration options or feature set.\n\n```\nheader {\n  target:: paloalto from-zone internal to-zone external\n}\n\nterm ping-gdns{\n  source-address:: INTERNAL\n  destination-address:: GOOGLE_DNS\n  protocol:: icmp\n  action:: accept\n}\n```\n\nThe above example tells capirca to use paloalto.py to generate a platform\nspecific configuration for Palo Alto.\n\nThe security policy is written within the term section using the meta-language:\n\n*   name/description: ping-gdns\n*   source: any INTERNAL network (check /def/NETWORK.net definition of\n    'INTERNAL')\n*   destination: service object named GOOGLE_DNS\n*   protocol: icmp\n*   action: accept\n\nThe above ACL controls traffic in one direction only (outbound towards the\nservice) and there should be another header and term to control the traffic in\nthe opposite direction. Unless the target generator features the ability to\nautomatically create bi-directional configuration from a single ACL term. Always\ncheck the documentation of the generator or validate the output generated to\nvalidate final configuration and policy interpretation.\n\n#### Term Keywords By Generator\n\nThe following list contains links to the documentation of the individual policy\ngenerators:\n\n<!-- begin-generator-term-links -->\n\n*   [`arista`](./doc/generators/arista.md): Arista\n*   [`aruba`](./doc/generators/aruba.md): Aruba\n*   [`brocade`](./doc/generators/brocade.md): Brocade\n*   [`cisco`](./doc/generators/cisco.md): Cisco\n*   [`ciscoasa`](./doc/generators/ciscoasa.md): Cisco ASA\n*   [`cisconx`](./doc/generators/cisconx.md): Cisco NX\n*   [`ciscoxr`](./doc/generators/ciscoxr.md): Cisco XR\n*   [`cloudarmor`](./doc/generators/cloudarmor.md): cloudarmor\n*   [`gce`](./doc/generators/gce.md): GCE\n*   `gcp_hf`\n*   [`ipset`](./doc/generators/ipset.md): ipset\n*   [`iptables`](./doc/generators/iptables.md): iptables\n*   [`juniper`](./doc/generators/juniper.md): Juniper\n*   [`juniperevo`](./doc/generators/juniperevo.md): Juniper EVO\n*   [`junipermsmpc`](./doc/generators/junipermsmpc.md): Juniper\n*   [`junipersrx`](./doc/generators/junipersrx.md): Juniper SRX\n*   [`k8s`](./doc/generators/k8s.md): Kubernetes NetworkPolicy\n*   [`nftables`](./doc/generators/nftables.md): nftables\n*   [`nsxv`](./doc/generators/nsxv.md): NSX\n*   [`packetfilter`](./doc/generators/packetfilter.md): PacketFilter\n*   [`paloaltofw`](./doc/generators/paloaltofw.md): Palo Alto PANOS\n*   [`pcap`](./doc/generators/pcap.md): PcapFilter\n*   [`sonic`](./doc/generators/sonic.md): SONiC ACLs in config_db.json format\n*   [`speedway`](./doc/generators/speedway.md): Speedway\n*   [`srxlo`](./doc/generators/srxlo.md): Stateless Juniper ACL\n*   [`windows_advfirewall`](./doc/generators/windows_advfirewall.md): Windows\n    Advanced Firewall <!-- begin-generator-term-links -->\n\n[Back to Top](#table-of-contents)\n\n#### Term Examples\n\nThe following are examples of how to construct a term, and assumes that naming\ndefinition tokens used have been defined in the definitions files.\n\n*   Block incoming bogons and spoofed traffic\n\n```\nterm block-bogons {\n  source-address:: BOGONS RFC1918\n  source-address:: COMPANY_INTERNAL\n  action:: deny\n}\n```\n\n*   Permit Public to Web Servers\n\n```\nterm permit-to-web-servers {\n  destination-address:: WEB_SERVERS\n  destination-port:: HTTP\n  protocol:: tcp\n  action:: accept\n}\n```\n\n*   Permit Replies to DNS Servers From Primaries\n\n```\nterm permit-dns-tcp-replies {\n  source-address:: DNS_PRIMARIES\n  destination-address:: DNS_SECONDARIES\n  source-address:: DNS\n  protocol:: tcp\n  option:: tcp-established\n  action:: accept\n}\n```\n\n*   Permit All Corporate Networks, Except New York, to FTP Server\n\nThis will \"subtract\" the `CORP_NYC_NETBLOCK` from the `CORP_NETBLOCKS` token.\nFor example, assume `CORP_NETBLOCKS` includes `200.0.0.0/20`, and\n`CORP_NYC_NETBLOCK` is defined as `200.2.0.0/24`. The `source-exclude` will\nremove the NYC netblock from the permitted source addresses. If the excluded\naddress is not contained with the source address, nothing is changed.\n\n```\nterm allow-inbound-ftp-from-corp {\n  source-address:: CORP_NETBLOCKS\n  source-exclude:: CORP_NYC_NETBLOCK\n  destination-port:: FTP\n  protocol:: tcp\n  action:: accept\n}\n```\n\n[Back to Top](#table-of-contents)\n\n#### Example Policy File\n\nBelow is an example policy file for a Juniper target platform. It contains two\nfilters, each with a handful of terms. This examples assumes that the network\nand service naming definition tokens have been defined.\n\n```\nheader {\n  comment:: \"edge input filter for sample network.\"\n  target:: juniper edge-inbound\n}\nterm discard-spoofs {\n  source-address:: RFC1918\n  action:: deny\n}\nterm permit-ipsec-access {\n  source-address:: REMOTE_OFFICES\n  destination-address:: VPN_HUB\n  protocol:: 50\n  action:: accept\n}\nterm permit-ike-access {\n  source-address:: REMOTE_OFFICES\n  destination-address:: VPN_HUB\n  protocol:: udp\n  destination-port:: IKE\n  action:: accept\n}\nterm permit-public-web-access {\n  destination-address:: WEB_SERVERS\n  destination-port:: HTTP HTTPS HTTP_8080\n  protocol:: tcp\n  action:: accept\n}\nterm permit-tcp-replies {\n  option:: tcp-established\n  action:: accept\n}\nterm default-deny {\n  action:: deny\n}\n\nheader {\n  comment:: \"edge output filter for sample network.\"\n  target:: juniper edge-outbound\n}\nterm drop-internal-sourced-outbound {\n  destination-address:: INTERNAL\n  destination-address:: RESERVED\n  action:: deny\n}\nterm reject-internal {\n  source-address:: INTERNAL\n  action:: reject\n}\nterm default-accept {\n  action:: accept\n}\n```\n\n[Back to Top](#table-of-contents)\n\n## Getting Started\n\n### Installation\n\n#### From Source\n\nIf `setuptools` Python package is not installed on your system, install it: For\nexample, the following commands installs the package with `apt` package manager.\n\n```bash\nsudo apt-get install python3-pip python3-setuptools\n```\n\nNext, to install `capirca` from source, clone the `capirca` repository and run\nits installer:\n\n```bash\ngit clone https://github.com/google/capirca.git\ncd capirca/\npython3 setup.py install --user\n```\n\nTypically, when provided `--user` argument, the installer creates the following\nfiles, where `3.8` is Python version and `2.0.0` is the version of `capirca`:\n\n*   `~/.local/bin/capirca`\n*   `~/.local/lib/python3.8/site-packages/capirca-2.0.0-py3.8.egg`\n\nIf necessary, remove build files:\n\n```bash\nrm -rf build capirca.egg-info dist\n```\n\nNext, test `capirca` by generating sample output filters for Cisco, Juniper,\niptables, and other firewall platforms.\n\n```bash\n~/.local/bin/capirca\n```\n\nThe generation of sample output while in the `capirca`'s source code directory\ndoes not require command line parameters, because `capirca` inherits default\nsettings from the following configuration (see `capirca/utils/config.py`).\n\n```json\n{\n    'base_directory': './policies',\n    'definitions_directory': './def',\n    'policy_file': None,\n    'output_directory': './filters',\n    'optimize': False,\n    'recursive': True,\n    'debug': False,\n    'verbose': False,\n    'ignore_directories': ['DEPRECATED', 'def'],\n    'max_renderers': 10,\n    'shade_check': False,\n    'exp_info': 2\n}\n```\n\nAlthough the `policy_file` is `None`, the tool processes all policies located in\n`base_directory`, i.e. `./policies`. The tool loads network and service\ndefinitions from `definitions_directory`. The tool output generated ACLs to the\nroot of the source directory because `output_directory` is `./filters`.\n\n[Back to Top](#table-of-contents)\n\n#### Package Manager\n\nCurrently, the PyPI is out of date. Nevertheless, a user can install an older\nversion of `capirca` with `pip`:\n\n```py\npip install capirca --user\n```\n\n[Back to Top](#table-of-contents)\n\n### Basic Usage\n\nThere are a number of command-line arguments that can be used with `capirca`.\n\n```\n$ ~/.local/bin/capirca --helpfull\n\n       USAGE: capirca [flags]\nflags:\n\nabsl.app:\n  -?,--[no]help: show this help\n    (default: 'false')\n  --[no]helpfull: show full help\n    (default: 'false')\n  --[no]helpshort: show this help\n    (default: 'false')\n  --[no]helpxml: like --helpfull, but generates XML output\n    (default: 'false')\n  --[no]only_check_args: Set to true to validate args and exit.\n    (default: 'false')\n  --[no]pdb: Alias for --pdb_post_mortem.\n    (default: 'false')\n  --[no]pdb_post_mortem: Set to true to handle uncaught exceptions with PDB post mortem.\n    (default: 'false')\n  --profile_file: Dump profile information to a file (for python -m pstats). Implies --run_with_profiling.\n  --[no]run_with_pdb: Set to true for PDB debug mode\n    (default: 'false')\n  --[no]run_with_profiling: Set to true for profiling the script. Execution will be slower, and the output format might change over time.\n    (default: 'false')\n  --[no]use_cprofile_for_profiling: Use cProfile instead of the profile module for profiling. This has no effect unless --run_with_profiling\n    is set.\n    (default: 'true')\n\nabsl.logging:\n  --[no]alsologtostderr: also log to stderr?\n    (default: 'false')\n  --log_dir: directory to write logfiles into\n    (default: '')\n  --logger_levels: Specify log level of loggers. The format is a CSV list of `name:level`. Where `name` is the logger name used with\n    `logging.getLogger()`, and `level` is a level name  (INFO, DEBUG, etc). e.g. `myapp.foo:INFO,other.logger:DEBUG`\n    (default: '')\n  --[no]logtostderr: Should only log to stderr?\n    (default: 'false')\n  --[no]showprefixforinfo: If False, do not prepend prefix to info messages when it's logged to stderr, --verbosity is set to INFO level,\n    and python logging is used.\n    (default: 'true')\n  --stderrthreshold: log messages at this level, or more severe, to stderr in addition to the logfile.  Possible values are 'debug', 'info',\n    'warning', 'error', and 'fatal'.  Obsoletes --alsologtostderr. Using --alsologtostderr cancels the effect of this flag. Please also note\n    that this flag is subject to --verbosity and requires logfile not be stderr.\n    (default: 'fatal')\n  -v,--verbosity: Logging verbosity level. Messages logged at this level or lower will be included. Set to 1 for debug logging. If the flag\n    was not set or supplied, the value will be changed from the default of -1 (warning) to 0 (info) after flags are parsed.\n    (default: '-1')\n    (an integer)\n\ncapirca.capirca:\n  --base_directory: The base directory to look for acls; typically where you'd find ./corp and ./prod\n    (default: './policies')\n  --config_file: A yaml file with the configuration options for capirca;\n    repeat this option to specify a list of values\n  --[no]debug: Debug messages\n    (default: 'false')\n  --definitions_directory: Directory where the definitions can be found.\n    (default: './def')\n  --exp_info: Print a info message when a term is set to expire in that many weeks.\n    (default: '2')\n    (an integer)\n  --ignore_directories: Don't descend into directories that look like this string\n    (default: 'DEPRECATED,def')\n    (a comma separated list)\n  --max_renderers: Max number of rendering processes to use.\n    (default: '10')\n    (an integer)\n  -o,--[no]optimize: Turn on optimization.\n    (default: 'False')\n  --output_directory: Directory to output the rendered acls.\n    (default: './filters')\n  --policy_file: Individual policy file to generate.\n  --[no]recursive: Descend recursively from the base directory rendering acls\n    (default: 'true')\n  --[no]shade_check: Raise an error when a term is completely shaded by a prior term.\n    (default: 'false')\n  --[no]verbose: Verbose messages\n    (default: 'false')\n\nabsl.flags:\n  --flagfile: Insert flag definitions from the given file into the command line.\n    (default: '')\n  --undefok: comma-separated list of flag names that it is okay to specify on the command line even if the program does not define a flag\n    with that name.  IMPORTANT: flags in this list that have arguments MUST use the --flag=value format.\n    (default: '')\n```\n\nNotably, the `--config_file PATH` argument allows passing one or more yaml\nconfiguration files. These files will be prioritized from left to right, i.e.\nany duplicate configurations will be overriden, not merged.\n\nThe command line arguments take precendence over any settings passed via the\nconfiguration files.\n\nThe default `capirca` configurations in a YAML format follows:\n\n```yaml\n---\nbase_directory: ./policies\ndefinitions_directory: ./def\noutput_directory: ./\noptimize: false\nrecursive: true\ndebug: false\nverbose: false\nignore_directories:\n  - DEPRECATED\n  - def\nmax_renderers: 10\nshade_check: true\nexp_info: 2\n```\n\n[Back to Top](#table-of-contents)\n\n### Python Package\n\nThe `capirca` tool uses `capirca` Python package.\n\nTherefore, there is a way to access `capirca` programmatically.\n\n*   `policies/sample_paloalto.pol`\n*   `def/SERVICES.svc`\n*   `def/NETWORK.net`\n\nProvided you have the following files in your directory, the following code\nsnippets create a `naming` definitions object, policy object, and render\ngenerator filter output.\n\n**NOTE**: Paste the code snippets one line at a time.\n\nFirst, start Python interpreter:\n\n```\n$ python3\nPython 3.8.7 (default, Dec 22 2020, 10:37:26)\n[GCC 10.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n\nNext, import `naming` library and create `naming` object from definitions files\nin `./def` directory.\n\n```py\nfrom pprint import pprint\nfrom capirca.lib import naming\ndefs = naming.Naming('./def')\npprint(defs)\n<capirca.lib.naming.Naming object at 0x7f8421b57280>\n```\n\nThe `defs` object follows:\n\n```\n<capirca.lib.naming.Naming object at 0x7f8421b57280>\n```\n\nThe `Naming` object has various methods. The `GetServiceNames` method returns\nthe service name tokens.\n\n```\n>>> dir(defs)\n['GetIpParents', 'GetNet', 'GetNetAddr', 'GetNetChildren', 'GetServiceNames',\n <...intentionally omitted ..>\n'unseen_networks', 'unseen_services']\n>>>\n\n>>> pprint(defs.GetServiceNames())\n['WHOIS',\n 'SSH',\n <...intentionally omitted ..>\n 'TRACEROUTE']\n>>>\n```\n\nThen, import `policy` library, read in the policy configuration data from\n`./policies/sample_paloalto.pol`, and create a policy object.\n\n```py\nfrom capirca.lib import policy\nconf = open('./policies/sample_paloalto.pol').read()\npol = policy.ParsePolicy(conf, defs, optimize=True)\n```\n\nThe policy object follows:\n\n```\n>>> pprint(pol)\nPolicy: {Target[paloalto], Comments [], Apply groups: [], except: []:[ name: ping-gdns\n  source_address: [IPv4('10.0.0.0/8'), IPv4('172.16.0.0/12'), IPv4('192.168.0.0/16')]\n  destination_address: [IPv4('8.8.4.4/32'), IPv4('8.8.8.8/32'), IPv6('2001:4860:4860::8844/128'), IPv6('2001:4860:4860::8888/128')]\n  protocol: ['icmp']\n  action: ['accept'],  name: dns-gdns\n  source_address: [IPv4('10.0.0.0/8'), IPv4('172.16.0.0/12'), IPv4('192.168.0.0/16')]\n  destination_address: [IPv4('8.8.4.4/32'), IPv4('8.8.8.8/32'), IPv6('2001:4860:4860::8844/128'), IPv6('2001:4860:4860::8888/128')]\n  protocol: ['tcp']\n  destination_port: [(53, 53)]\n  action: ['accept'],  name: allow-web-outbound\n  source_address: [IPv4('10.0.0.0/8'), IPv4('172.16.0.0/12'), IPv4('192.168.0.0/16')]\n  protocol: ['tcp']\n  destination_port: [(80, 80), (443, 443)]\n  action: ['accept']], Target[paloalto], Comments [], Apply groups: [], except: []:[ name: allow-icmp\n  protocol: ['icmp']\n  action: ['accept'],  name: allow-only-pan-app\n  action: ['accept']\n  pan_application: ['http'],  name: allow-web-inbound\n  destination_address: [IPv4('200.1.1.1/32'), IPv4('200.1.1.2/32')]\n  protocol: ['tcp']\n  destination_port: [(80, 80), (443, 443)]\n  action: ['accept']\n  pan_application: ['ssl', 'http']]}\n>>>\n```\n\nNext, import a generator library (here `paloaltofw` for Palo Alto firewalls) and\noutput a policy in the desired format.\n\n```py\nfrom capirca.lib import paloaltofw\nfor header in pol.headers:\n  if 'paloalto' in header.platforms:\n    jcl = True\n  if jcl:\n    output = paloaltofw.PaloAltoFW(pol, 1)\n    print(output)\n```\n\nThe following code initiates Palo Alto firewall ACL model with the default\nexpiration of 1 week.\n\n```\npaloaltofw.PaloAltoFW(pol, 1)\n```\n\n[Back to Top](#table-of-contents)\n\n### Running with Docker\n\nIf your use case is to just use the CLI and you don't want to go through the\nprocess of installing `capirca`, you can use the dockerized version of the tool.\n\nWhen using `docker`, mount your working directory to the `/data` directory of\nthe container and pass command-line arguments in the following way.\n\n```bash\ndocker run -v \"${PWD}:/data\" docker.pkg.github.com/google/capirca/capirca:latest\ndocker run -v \"${PWD}:/data\" docker.pkg.github.com/google/capirca/capirca:latest --helpfull\ndocker run -v \"${PWD}:/data\" docker.pkg.github.com/google/capirca/capirca:latest --config_file /data/path/to/config\n```\n\n[Back to Top](#table-of-contents)\n\n## Miscellaneous\n\n### Security considerations\n\nThe Capirca threat model assumes some control and verification of policy\ndefinitions (in .pol files). This is either through human user verification,\nor that policies are generated by upstream systems that enforce correctness.\n\nIt is recommended that the ACL generated by Capirca is always tested for\ncorrectness before being applied to production. Not all generators support every\nfeature, configuration option or term keywords. When something is unsupported,\nCapirca will error out. But due to the sensitive nature of network ACLs, it is\nalways recommended to test any new generator being used, or new policies being\ngenerated.\n\n### Additional documentation\n\n*   [aclcheck library](./doc/wiki/AclCheck-library.md)\n*   [policy reader library](./doc/wiki/PolicyReader-library.md)\n*   [policy library](./doc/wiki/Policy-library.md)\n*   [naming library](./doc/wiki/Naming-library.md)\n*   [capirca design doc](./doc/wiki/Capirca-design.md)\n\nExternal links, resources and references:\n\n*   [Brief Overview (4 slides):](https://docs.google.com/present/embed?id=dhtc9k26_13cz9fphfb&autoStart=true&loop=true&size=1)\n*   [Nanog49; Enterprise QoS](http://www.nanog.org/meetings/nanog49/presentations/Tuesday/Chung-EnterpriseQoS-final.pdf)\n*   [Capirca Slack at NetworkToCode](https://networktocode.slack.com/)\n\n[Back to Top](#table-of-contents)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/google/capirca/",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "Capirca Team",
    "maintainer_email": "capirca-dev@google.com",
    "name": "capirca",
    "package_url": "https://pypi.org/project/capirca/",
    "platform": null,
    "project_url": "https://pypi.org/project/capirca/",
    "project_urls": {
      "Homepage": "https://github.com/google/capirca/"
    },
    "release_url": "https://pypi.org/project/capirca/2.0.9/",
    "requires_dist": [
      "absl-py",
      "ply",
      "mock",
      "six",
      "PyYAML"
    ],
    "requires_python": ">=3.6",
    "summary": "Capirca",
    "version": "2.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16908757,
  "releases": {
    "1.118": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43e2c93891279060ebfe2ced0030e0497e878b8a3bd8ceb1448d52ebcb03cbc8",
          "md5": "a14e19fac5bd19287a5d012fa7af6080",
          "sha256": "fa81b17d2924790ef966d118e993b7a882328d96a7f833ed9c9cb2c85389ee8b"
        },
        "downloads": -1,
        "filename": "capirca-1.118-1.tar.gz",
        "has_sig": false,
        "md5_digest": "a14e19fac5bd19287a5d012fa7af6080",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 200492,
        "upload_time": "2017-06-03T00:49:10",
        "upload_time_iso_8601": "2017-06-03T00:49:10.523205Z",
        "url": "https://files.pythonhosted.org/packages/43/e2/c93891279060ebfe2ced0030e0497e878b8a3bd8ceb1448d52ebcb03cbc8/capirca-1.118-1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.120": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a20b7658310c927d93422e178e0a9ea3ccf8ef042c0f73cf25c59a6ba206c7a2",
          "md5": "3e4ab419deb3e70d54b4a23d3dc9c8d7",
          "sha256": "9782df8544fcdb96f7c76f3d0671410b91edafc3ff6ea87d691d373f1a0908c2"
        },
        "downloads": -1,
        "filename": "capirca-1.120-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e4ab419deb3e70d54b4a23d3dc9c8d7",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 165250,
        "upload_time": "2018-07-25T20:26:32",
        "upload_time_iso_8601": "2018-07-25T20:26:32.212628Z",
        "url": "https://files.pythonhosted.org/packages/a2/0b/7658310c927d93422e178e0a9ea3ccf8ef042c0f73cf25c59a6ba206c7a2/capirca-1.120-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c837bfcf6bcd347fdaf98537e86dad02dc3b625197bd088dd32890a6e5716655",
          "md5": "9a9521449457c354f8623bc680a1bcef",
          "sha256": "b1a380cb0ab413d40e8c7bf012e13256ae620af24c12b5d11b594222bff0c55a"
        },
        "downloads": -1,
        "filename": "capirca-1.120.tar.gz",
        "has_sig": false,
        "md5_digest": "9a9521449457c354f8623bc680a1bcef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 139544,
        "upload_time": "2018-07-25T20:26:34",
        "upload_time_iso_8601": "2018-07-25T20:26:34.045989Z",
        "url": "https://files.pythonhosted.org/packages/c8/37/bfcf6bcd347fdaf98537e86dad02dc3b625197bd088dd32890a6e5716655/capirca-1.120.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.121": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f0452466de1651d7acc2e172ffbbcd57915b7f3433085dd2a8f115d22559914",
          "md5": "b9344eea55dcb99a08b13564cbe1880b",
          "sha256": "0af1d3d1107a5e8441417461b2fdea091268401c22f49de4fbd5ae3ae9c070bd"
        },
        "downloads": -1,
        "filename": "capirca-1.121.tar.gz",
        "has_sig": false,
        "md5_digest": "b9344eea55dcb99a08b13564cbe1880b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 125799,
        "upload_time": "2018-08-29T22:53:27",
        "upload_time_iso_8601": "2018-08-29T22:53:27.996472Z",
        "url": "https://files.pythonhosted.org/packages/1f/04/52466de1651d7acc2e172ffbbcd57915b7f3433085dd2a8f115d22559914/capirca-1.121.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.122": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a40a676045f27502bb2878a92804fe68444a19ca2c02cc77d7f635b135d22c1",
          "md5": "7b618fd4f4ff81939fadcbadd243fa54",
          "sha256": "90a7400e5e71d70fa4e47af1c059adfe9d75cc07b5e0216dfda38714a8c07375"
        },
        "downloads": -1,
        "filename": "capirca-1.122-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b618fd4f4ff81939fadcbadd243fa54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 163853,
        "upload_time": "2019-05-03T18:36:48",
        "upload_time_iso_8601": "2019-05-03T18:36:48.618778Z",
        "url": "https://files.pythonhosted.org/packages/6a/40/a676045f27502bb2878a92804fe68444a19ca2c02cc77d7f635b135d22c1/capirca-1.122-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e474eec926bde2108840e4f05b5f45473de3014d0fc398179a1b6837bbdd6805",
          "md5": "1ba65021b768883e89f48dd69c00d233",
          "sha256": "6bb403cf302eab7c613b41b6e49b8ed6bbc9df05dd40566fc46ab3dd652086ec"
        },
        "downloads": -1,
        "filename": "capirca-1.122.tar.gz",
        "has_sig": false,
        "md5_digest": "1ba65021b768883e89f48dd69c00d233",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 130634,
        "upload_time": "2019-05-03T18:36:50",
        "upload_time_iso_8601": "2019-05-03T18:36:50.265114Z",
        "url": "https://files.pythonhosted.org/packages/e4/74/eec926bde2108840e4f05b5f45473de3014d0fc398179a1b6837bbdd6805/capirca-1.122.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00942888bc029eee3abe7e75ad927657cec5d574fc8ca81d0b1dce05284e3b0b",
          "md5": "0055742167c0f8fad0acfb315fa4688d",
          "sha256": "65ac558edbe40c598ab6f1695afdcde28e849897683fd5e0e8e62a76fd68e89f"
        },
        "downloads": -1,
        "filename": "capirca-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0055742167c0f8fad0acfb315fa4688d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 185630,
        "upload_time": "2021-02-23T21:44:41",
        "upload_time_iso_8601": "2021-02-23T21:44:41.405838Z",
        "url": "https://files.pythonhosted.org/packages/00/94/2888bc029eee3abe7e75ad927657cec5d574fc8ca81d0b1dce05284e3b0b/capirca-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "853e997e25d0d0a1ff2cee19c3d2c7396dac0329a067b3b1dbdb913d8903f454",
          "md5": "e003ed96511edc3529021e3ed6692676",
          "sha256": "b98bf78eae132ae8899a8d1e628ae26e07456d3bc381482d54049b69e63d4cf8"
        },
        "downloads": -1,
        "filename": "capirca-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e003ed96511edc3529021e3ed6692676",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 147858,
        "upload_time": "2021-02-23T21:44:42",
        "upload_time_iso_8601": "2021-02-23T21:44:42.549985Z",
        "url": "https://files.pythonhosted.org/packages/85/3e/997e25d0d0a1ff2cee19c3d2c7396dac0329a067b3b1dbdb913d8903f454/capirca-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa4f52d14f8ed4f01815e8654214aa19dbdc7a771862f4f8f260bca7efda0536",
          "md5": "5091ede63515dca459cf5425275d73d7",
          "sha256": "abffc3d8ed55cd882327ad2d661f6c2b6fa93084417712f5396243a033cafb82"
        },
        "downloads": -1,
        "filename": "capirca-2.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5091ede63515dca459cf5425275d73d7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 198234,
        "upload_time": "2021-03-13T03:14:55",
        "upload_time_iso_8601": "2021-03-13T03:14:55.367921Z",
        "url": "https://files.pythonhosted.org/packages/aa/4f/52d14f8ed4f01815e8654214aa19dbdc7a771862f4f8f260bca7efda0536/capirca-2.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa740321462356facd66fab0dae0de249b7960b96ce1afa29c21720a2dd39509",
          "md5": "ee626c44c031718256b42291ad3adbb9",
          "sha256": "fd909e7af9bd1b43c1821822f86dd1c4caf40d7e51783505a41a8a69864c0add"
        },
        "downloads": -1,
        "filename": "capirca-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ee626c44c031718256b42291ad3adbb9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 182435,
        "upload_time": "2021-03-13T03:14:56",
        "upload_time_iso_8601": "2021-03-13T03:14:56.743839Z",
        "url": "https://files.pythonhosted.org/packages/fa/74/0321462356facd66fab0dae0de249b7960b96ce1afa29c21720a2dd39509/capirca-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37b9b15460bf6097d6ecc41438f36b0708845ef43434cacf9b3541c696ec6932",
          "md5": "bb2c2f1d0dcb70cc755c3ddd5ab987dd",
          "sha256": "e3175bb5c29ab0c5f79ad400d7332f399627f16cd0d1a05caae47072bbab095d"
        },
        "downloads": -1,
        "filename": "capirca-2.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb2c2f1d0dcb70cc755c3ddd5ab987dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 209677,
        "upload_time": "2021-12-17T01:29:48",
        "upload_time_iso_8601": "2021-12-17T01:29:48.474989Z",
        "url": "https://files.pythonhosted.org/packages/37/b9/b15460bf6097d6ecc41438f36b0708845ef43434cacf9b3541c696ec6932/capirca-2.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38ed839902f69df2626b955b5260399ef12539c3e2ddd892c2672ec9d3018845",
          "md5": "adfda86a93cadb5f25eae7a4bf12ca47",
          "sha256": "6c0d392ef1f370a837431464eb45a8b74fa840003bacd19c39ea084ffd462598"
        },
        "downloads": -1,
        "filename": "capirca-2.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "adfda86a93cadb5f25eae7a4bf12ca47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 181661,
        "upload_time": "2021-12-17T01:29:50",
        "upload_time_iso_8601": "2021-12-17T01:29:50.019929Z",
        "url": "https://files.pythonhosted.org/packages/38/ed/839902f69df2626b955b5260399ef12539c3e2ddd892c2672ec9d3018845/capirca-2.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45ae041faad68bb8c26c85c9b0e9ddf9963806957f4f233a6cb5d371a4d11d39",
          "md5": "0f8cde7eb34c52c50e64a363a361f1e4",
          "sha256": "fac6f45323980fa5852d5e22380d608e4dab9d54eed25d986b8bd762ce52a4ae"
        },
        "downloads": -1,
        "filename": "capirca-2.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f8cde7eb34c52c50e64a363a361f1e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 222303,
        "upload_time": "2022-06-02T01:02:21",
        "upload_time_iso_8601": "2022-06-02T01:02:21.168580Z",
        "url": "https://files.pythonhosted.org/packages/45/ae/041faad68bb8c26c85c9b0e9ddf9963806957f4f233a6cb5d371a4d11d39/capirca-2.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "145ba851e7d02ebca3873378babac3ba83a3b15e18271ee79b8c870346fcff83",
          "md5": "4bb6001060babf7d42a1389d9c4ab666",
          "sha256": "c55f8331ab1f26ce186a5587c1b16edc3d4e624b8fa031f398bb45b8aca77845"
        },
        "downloads": -1,
        "filename": "capirca-2.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4bb6001060babf7d42a1389d9c4ab666",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 192335,
        "upload_time": "2022-06-02T01:02:22",
        "upload_time_iso_8601": "2022-06-02T01:02:22.638108Z",
        "url": "https://files.pythonhosted.org/packages/14/5b/a851e7d02ebca3873378babac3ba83a3b15e18271ee79b8c870346fcff83/capirca-2.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc315fa4f85c8b0d48162deced86d441c5b25f2ae4491d5053144e2557636330",
          "md5": "d95b360e488f3bf14c1222f94382e967",
          "sha256": "ef10e67d0dea8db5e7de11c27a4dce7c76a9fe4ac3dfaa1d570e36c16fe3d4e0"
        },
        "downloads": -1,
        "filename": "capirca-2.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d95b360e488f3bf14c1222f94382e967",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 224367,
        "upload_time": "2022-06-15T19:34:54",
        "upload_time_iso_8601": "2022-06-15T19:34:54.090204Z",
        "url": "https://files.pythonhosted.org/packages/cc/31/5fa4f85c8b0d48162deced86d441c5b25f2ae4491d5053144e2557636330/capirca-2.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "647086a5a35344d0004fd048bb133fffa37e51f6c0dc1d7497cf58c05b0c2d89",
          "md5": "500705a1bf067702633f6d1ab852e36f",
          "sha256": "a24bb05cb3f6d28184892112718a7b4dfb45d2d104f2df46feafa32e9dd33edd"
        },
        "downloads": -1,
        "filename": "capirca-2.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "500705a1bf067702633f6d1ab852e36f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 193897,
        "upload_time": "2022-06-15T19:34:55",
        "upload_time_iso_8601": "2022-06-15T19:34:55.490303Z",
        "url": "https://files.pythonhosted.org/packages/64/70/86a5a35344d0004fd048bb133fffa37e51f6c0dc1d7497cf58c05b0c2d89/capirca-2.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "92063d74e3578d8430961664f0c22655002d35161dfc5b7d729d1fb770f7dbbd",
          "md5": "139c7b8a26ffc81c388e813c0d680e5c",
          "sha256": "3a92454657ff9b0a0bbdf6791d8b45dec75a3222094bd36c27f83e482da18556"
        },
        "downloads": -1,
        "filename": "capirca-2.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "139c7b8a26ffc81c388e813c0d680e5c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 231222,
        "upload_time": "2023-01-17T22:18:26",
        "upload_time_iso_8601": "2023-01-17T22:18:26.457234Z",
        "url": "https://files.pythonhosted.org/packages/92/06/3d74e3578d8430961664f0c22655002d35161dfc5b7d729d1fb770f7dbbd/capirca-2.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5b58d045de899c244ba72dbed2462d08baa52877de48feea015a6f12b784b10",
          "md5": "03f9947a10b8d50ce19c503c78e03dbe",
          "sha256": "e3afb04aabf2478ee63a5f526ce4b16d3d8bfdae31f8203b6311d7a909bb323f"
        },
        "downloads": -1,
        "filename": "capirca-2.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "03f9947a10b8d50ce19c503c78e03dbe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 194682,
        "upload_time": "2023-01-17T22:18:27",
        "upload_time_iso_8601": "2023-01-17T22:18:27.893193Z",
        "url": "https://files.pythonhosted.org/packages/f5/b5/8d045de899c244ba72dbed2462d08baa52877de48feea015a6f12b784b10/capirca-2.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d30e347667ec79f97ea7958e857760472dfc3fe33e853413d999ee0f853d8987",
          "md5": "15c3e681569bfe4b2ec483c958d7ed29",
          "sha256": "9c147920b614b53e41754ffdff7ac187cc0610250cb494ceda297c918cbad93a"
        },
        "downloads": -1,
        "filename": "capirca-2.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15c3e681569bfe4b2ec483c958d7ed29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 231698,
        "upload_time": "2023-01-28T00:41:37",
        "upload_time_iso_8601": "2023-01-28T00:41:37.476011Z",
        "url": "https://files.pythonhosted.org/packages/d3/0e/347667ec79f97ea7958e857760472dfc3fe33e853413d999ee0f853d8987/capirca-2.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee8456296238f09f46e7d5619fe55e887a5bfac540e155189902fd56b48fef14",
          "md5": "39afd67a9e6f65dfc41664a9f0345825",
          "sha256": "40c5d502b3dba314138987ed713d93bd67bc37f9fccbc79ffa04c8422bcb13eb"
        },
        "downloads": -1,
        "filename": "capirca-2.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "39afd67a9e6f65dfc41664a9f0345825",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 195553,
        "upload_time": "2023-01-28T00:41:39",
        "upload_time_iso_8601": "2023-01-28T00:41:39.328137Z",
        "url": "https://files.pythonhosted.org/packages/ee/84/56296238f09f46e7d5619fe55e887a5bfac540e155189902fd56b48fef14/capirca-2.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af2cbf9cdfe6653c0bf93c12fae81c6c3b3e89297609f8766a800f889f34f62d",
          "md5": "87c61ad55d8d5b4822e163ddf3c9f792",
          "sha256": "cf333ac9315f0d61890710f412f6b113950095ff71580530887b48b267fe2a6f"
        },
        "downloads": -1,
        "filename": "capirca-2.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87c61ad55d8d5b4822e163ddf3c9f792",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 232257,
        "upload_time": "2023-02-17T22:32:09",
        "upload_time_iso_8601": "2023-02-17T22:32:09.150031Z",
        "url": "https://files.pythonhosted.org/packages/af/2c/bf9cdfe6653c0bf93c12fae81c6c3b3e89297609f8766a800f889f34f62d/capirca-2.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a212f7a20f2da1f7785f2236fdb4f000e79b5f4cb65eacd09c191700f3c9702",
          "md5": "43c2ad9156be459cb141d4a65c427195",
          "sha256": "48e33e5d06f3a877ff49fe7f3bea94757f8e421d3e2112a7bdc2d02c257ac987"
        },
        "downloads": -1,
        "filename": "capirca-2.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "43c2ad9156be459cb141d4a65c427195",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 205272,
        "upload_time": "2023-02-17T22:32:10",
        "upload_time_iso_8601": "2023-02-17T22:32:10.769688Z",
        "url": "https://files.pythonhosted.org/packages/6a/21/2f7a20f2da1f7785f2236fdb4f000e79b5f4cb65eacd09c191700f3c9702/capirca-2.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af2cbf9cdfe6653c0bf93c12fae81c6c3b3e89297609f8766a800f889f34f62d",
        "md5": "87c61ad55d8d5b4822e163ddf3c9f792",
        "sha256": "cf333ac9315f0d61890710f412f6b113950095ff71580530887b48b267fe2a6f"
      },
      "downloads": -1,
      "filename": "capirca-2.0.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "87c61ad55d8d5b4822e163ddf3c9f792",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 232257,
      "upload_time": "2023-02-17T22:32:09",
      "upload_time_iso_8601": "2023-02-17T22:32:09.150031Z",
      "url": "https://files.pythonhosted.org/packages/af/2c/bf9cdfe6653c0bf93c12fae81c6c3b3e89297609f8766a800f889f34f62d/capirca-2.0.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a212f7a20f2da1f7785f2236fdb4f000e79b5f4cb65eacd09c191700f3c9702",
        "md5": "43c2ad9156be459cb141d4a65c427195",
        "sha256": "48e33e5d06f3a877ff49fe7f3bea94757f8e421d3e2112a7bdc2d02c257ac987"
      },
      "downloads": -1,
      "filename": "capirca-2.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "43c2ad9156be459cb141d4a65c427195",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 205272,
      "upload_time": "2023-02-17T22:32:10",
      "upload_time_iso_8601": "2023-02-17T22:32:10.769688Z",
      "url": "https://files.pythonhosted.org/packages/6a/21/2f7a20f2da1f7785f2236fdb4f000e79b5f4cb65eacd09c191700f3c9702/capirca-2.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}