{
  "info": {
    "author": "Sven Eckelmann",
    "author_email": "sven@narfation.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": ".. SPDX-License-Identifier: MIT\n.. SPDX-FileCopyrightText: Sven Eckelmann <sven@narfation.org>\n\n=================\nqcom-nandc-pagify\n=================\n\nAbout\n=====\n\nThe Qualcomm NAND controller takes care of writing and reading pages from\nthe actual NAND flash chip. It uses a non-standard page layout which splits\nthe data in smaller partitons and saves these as chunks with ECC, bad block\nmarkers and padding over the data+oob area of the nand pages.\n\nThe qcom-nandc-pagify can help to convert a raw image (e.g. Linux, rootfs, ...)\nin the page format which is used by the NAND controller. This can then be used\nwith a NAND flash programmer to initialize the NAND flash chip.\n\nKnown NAND controllers which should work the same way are:\n\n* qcom,ipq806x-nand\n* qcom,ipq4019-nand\n* qcom,ipq6018-nand (tested)\n* qcom,ipq8074-nand (tested)\n* qcom,sdx55-nand\n\n\nUsage\n=====\n\nBuild\n-----\n\nThe package is PEP517 compatible and can be build using python3-build::\n\n  python3 -m build\n\nThe generated wheel  then be installed via pip::\n\n  dist/qcom_nandc_pagify-*-py3-none-any.whl\n\nBut the build is not necessary when all dependencies are already installed\non the system. Then it is possible to directly run in from the source\ndirectory::\n\n  python3 -m qcom_nandc_pagify\n\nUnittest\n--------\n\nThere are a couple of testcases in ``tests/resources``. The ``in-*`` files\nare converted to the ``out-*`` files with various parameters. These should\nreflect common scenarios. The complete unittest can be run via::\n\n  python3 -m unittest\n\nInstallation\n------------\n\nIt can be installed using pip\n`from PyPI <https://pypi.org/project/qcom-nandc-pagify/>`_::\n\n  python3 -m pip install --upgrade qcom-nandc-pagify\n\nOr from the the own build wheel (see avove)::\n\n  python3 -m pip install --upgrade dist/qcom_nandc_pagify-*-py3-none-any.whl\n\nConverting an image\n-------------------\n\nThe arguments are explained as part of the usage help output::\n\n  qcom_nandc_pagify -h\n\nIt is necessary specify an input file and the output file + a couple of\nflash dependent parameters::\n\n  # NAND device with 2048+128 large pages with BCH4 (e.g. for Cypress), 8x bus\n  qcom-nandc-pagify --infile $INPUT --outfile $OUTPUT --pagesize 2048 --oobsize 128 --ecc bch4\n\n  # NAND device with 2048+64 large pages with RS (e.g. for IPQ806x), 8x bus\n  qcom-nandc-pagify --infile $INPUT --outfile $OUTPUT --pagesize 2048 --oobsize 64 --ecc rs\n\n  # NAND device with 2048+64 large pages with RS_SBL (e.g. for IPQ806x, SBL partition), 8x bus\n  qcom-nandc-pagify --infile $INPUT --outfile $OUTPUT --pagesize 2048 --oobsize 64 --ecc rs_sbl\n\n  # NAND device with 4096+256 large pages with BCH8 (e.g. Cypress/Hawkeye), 8x bus\n  qcom-nandc-pagify --infile $INPUT --outfile $OUTPUT --pagesize 4096 --oobsize 128 --ecc bch8\n\n\nPhysical layout\n===============\n\nPage Layout\n-----------\n\nThe data which should be saved in a page is split into 516 byte portions. Only\nthe last portion is smaller - 510 bytes of 2048 byte large pages and 484 bytes\nfor 4096 byte pages. But even the last portion is saved like it would have\nbeen 516 bytes long. The remaining bytes are simply filled with 0xff.\n\nEach data portion is saved with additional data as chunk in the NAND page.\n\nUsually, there are more bytes in the page then chunks. For example,\na 2048 bytes page with 128 bytes OOB will be split like this for 4-bit BCH ECC:\n\n* 516 bytes => 528 bytes for chunk in NAND\n* 516 bytes => 528 bytes for chunk in NAND\n* 516 bytes => 528 bytes for chunk in NAND\n* 510 bytes => 528 bytes for chunk in NAND\n\nThis would leave 64 bytes of the 2176 bytes (2048 + 128) uninitialized. But\nthe remaining bytes in the page can simply filled up with 0xff to make sure\nthat the page has the correct size in the converted image.\n\nMore information about the page layout can be found in Linux's\n``qcom_qcom_nandc.c`` under ``qcom_nand_ooblayout_ecc()``\n\nChunk layout\n------------\n\nA chunk is a complex structure with\n\n* first data part\n* bad block marker (1 byte on 8x wide bus, 2 byte on 16x wide bus)\n* second data part (+padding)\n* ECC data\n* padding\n\nThe first data part and second data part are simply split by a BBM which is\nadded to each chunk - even when it is not used at all. The position of this\nBBM is chosen so that the BBM in the last chunk is at the beginning of the\nOOB region of the flash. This means as size for the first data part:\n\n* 2048 bytes page, 528 byte chunk: 464\n* 2048 bytes page, 532 byte chunk: 452\n* 4096 bytes page, 528 byte chunk: 400\n* 4096 bytes page, 532 byte chunk: 372\n\nThe size of the ECC data depends on the used algorithm. Following are known\n\n* 4-Bit BCH,  8x bus:  7 bytes ECC\n* 4-Bit BCH, 16x bus:  8 bytes ECC\n* 8-Bit BCH,  8x bus: 13 bytes ECC\n* 8-Bit BCH, 16x bus: 14 bytes ECC\n* RS:                 10 bytes ECC\n\nThe chunk is then filled up with 0xff to make sure that it has a predefined\nsize. These size itself depends on the ECC algorithm:\n\n* 4-Bit BCH: 528 byte chunk\n* 8-Bit BCH: 532 byte chunk\n* RS:        528 byte chunk\n\nMore information about the chunk layout can be found in Linux's\n``qcom_qcom_nandc.c`` under ``qcom_nandc_read_cw_raw()``.\n\nIPQ806x SBL pages\n-----------------\n\nThe pages for the secondary bootloader on the IPQ806x didn't had a data\nsize of 516 bytes per chunk. Instead the data was written in 512 byte chunks\nwith Reed-Solomon ECC. A chunk will use 532 bytes (1 byte BBM, 10 bytes ECC, 5\nbytes padding). The rest of the rules from above still apply.\n\nECC\n===\n\nBCH\n---\n\nThe polynomial used for calculating the data is 8219 or::\n\n  x**13 + x**4 + x**3 + x**1 + 1\n\nRS\n--\n\nThe used polynomial for GF(2**10) is 1033 or::\n\n  x ** 10 + x ** 3 + 1\n\nThe generator (first consecutive root) is::\n\n  [1, 510, 51, 323, 663, 928, 58, 587, 836]\n\nThe data itself is encoded with ``(1015 - chunk_data_size)`` 0 bytes at the\nbeginning. The resulting 8 10 bit values are reversed, concatenated to a\nsingle 80 bits string and split again into 8 bits portions for storage on the\nNAND.\n\nRemarks\n=======\n\nThere is currently no official documentation from QCA regarding the NAND\ncontroller. Only available devices could be used to analyze the NAND content.\nFollowing features could not yet be tested:\n\n* Reed Solomon ECC on modern devices\n* 4K pages\n* wide bus mode\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ecsv/qcom-nandc-pagify",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qcom-nandc-pagify",
    "package_url": "https://pypi.org/project/qcom-nandc-pagify/",
    "platform": "",
    "project_url": "https://pypi.org/project/qcom-nandc-pagify/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ecsv/qcom-nandc-pagify/issues",
      "Homepage": "https://github.com/ecsv/qcom-nandc-pagify"
    },
    "release_url": "https://pypi.org/project/qcom-nandc-pagify/0.1/",
    "requires_dist": [
      "bchlib",
      "reedsolo (>=1)"
    ],
    "requires_python": ">=3.5",
    "summary": "Raw Image to Qualcomm NAND controller image converter",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10863234,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9593d8b57c3909104cc28a523ba1f46b71f4844c0d50a22b2f51a3f5eb15431",
          "md5": "be41c65bfeaae60e7a6a4d0eb285b6b4",
          "sha256": "6d8899894b13064e13310d6392f7ff4714bd4f37cc3a9191934d260a257cceff"
        },
        "downloads": -1,
        "filename": "qcom_nandc_pagify-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be41c65bfeaae60e7a6a4d0eb285b6b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 8505,
        "upload_time": "2021-07-09T08:56:39",
        "upload_time_iso_8601": "2021-07-09T08:56:39.831093Z",
        "url": "https://files.pythonhosted.org/packages/f9/59/3d8b57c3909104cc28a523ba1f46b71f4844c0d50a22b2f51a3f5eb15431/qcom_nandc_pagify-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c46991b4be3023795d269dd52511d6dfffdd06e5395670f3d8603fbc2dff5d1b",
          "md5": "b0a817c0cc13fc37be10779c418cdf3c",
          "sha256": "c938257b89f9d3d86a0ff06d2080208060972139e26ace603a64ebc50bc54cd0"
        },
        "downloads": -1,
        "filename": "qcom-nandc-pagify-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b0a817c0cc13fc37be10779c418cdf3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 97256,
        "upload_time": "2021-07-09T08:56:41",
        "upload_time_iso_8601": "2021-07-09T08:56:41.321264Z",
        "url": "https://files.pythonhosted.org/packages/c4/69/91b4be3023795d269dd52511d6dfffdd06e5395670f3d8603fbc2dff5d1b/qcom-nandc-pagify-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9593d8b57c3909104cc28a523ba1f46b71f4844c0d50a22b2f51a3f5eb15431",
        "md5": "be41c65bfeaae60e7a6a4d0eb285b6b4",
        "sha256": "6d8899894b13064e13310d6392f7ff4714bd4f37cc3a9191934d260a257cceff"
      },
      "downloads": -1,
      "filename": "qcom_nandc_pagify-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "be41c65bfeaae60e7a6a4d0eb285b6b4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 8505,
      "upload_time": "2021-07-09T08:56:39",
      "upload_time_iso_8601": "2021-07-09T08:56:39.831093Z",
      "url": "https://files.pythonhosted.org/packages/f9/59/3d8b57c3909104cc28a523ba1f46b71f4844c0d50a22b2f51a3f5eb15431/qcom_nandc_pagify-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c46991b4be3023795d269dd52511d6dfffdd06e5395670f3d8603fbc2dff5d1b",
        "md5": "b0a817c0cc13fc37be10779c418cdf3c",
        "sha256": "c938257b89f9d3d86a0ff06d2080208060972139e26ace603a64ebc50bc54cd0"
      },
      "downloads": -1,
      "filename": "qcom-nandc-pagify-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b0a817c0cc13fc37be10779c418cdf3c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 97256,
      "upload_time": "2021-07-09T08:56:41",
      "upload_time_iso_8601": "2021-07-09T08:56:41.321264Z",
      "url": "https://files.pythonhosted.org/packages/c4/69/91b4be3023795d269dd52511d6dfffdd06e5395670f3d8603fbc2dff5d1b/qcom-nandc-pagify-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}