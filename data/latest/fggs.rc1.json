{
  "info": {
    "author": "",
    "author_email": "David Chiang <dchiang@nd.edu>, Darcey Riley <darcey.riley@nd.edu>, Ken Sible <ksible@nd.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# fggs: Factor Graph Grammars in Python\n![workflow](https://github.com/diprism/fgg-implementation/actions/workflows/ci.yaml/badge.svg)\n\nFactor graph grammars (FGGs) are hyperedge replacement graph grammars for factor graphs. They generate sets of factor graphs and can describe a more general class of models than plate notation and many other formalisms can. Moreover, inference can be done on FGGs without enumerating all the generated factor graphs.\n\nThis library implements FGGs in Python and is compatible with PyTorch (tested with Python >= 3.7 and PyTorch >= 3.8).\n\nFGGs are described in the following paper:\n\nDavid Chiang and Darcey Riley. [Factor graph grammars.](https://arxiv.org/abs/2010.12048) In Proc. NeurIPS. 2020.\n\nThis code is written by David Chiang, Darcey Riley, and Ken Sible, at the University of Notre Dame, and is licensed under the MIT License.\n\n## Installing\n\nRun `pip install fggs`.\n\n## Using\n\nSee `examples/parser/parser.py` for an example of using the package to\ntrain a simple FGG.\n\n### Creating an FGG\n\nThe FGG paper has an example of an FGG for a hidden Markov Model:\n\n![An FGG for an HMM](images/hmm.png)\n\nTo reproduce this example, first create the FGG object, with start symbol `S`:\n\n    fgg = fggs.FGG('S')\n\nNext, we create an empty right-hand side for rule π₁:\n\n    rhs = fggs.Graph()\n\nCreate a node labeled `'T'` and call it `v1`:\n\n    v1 = rhs.new_node('T')\n\nCreate a terminal edge labeled `'is_bos'` and a nonterminal edge labeled `'X'`:\n\n    rhs.new_edge('is_bos', [v1], is_terminal=True)\n    rhs.new_edge('X', [v1], is_nonterminal=True)\n\nFinally, create the rule with left-hand side `'S'` and rhs `rhs`:\n\n    fgg.new_rule('S', rhs)\n\nSimilarly for rules π₂ and π₃. The only thing new about these rules is\nthat their right-hand sides have external nodes, which need to be set.\n\n    rhs = fggs.Graph()\n    v1, v2, v3 = rhs.new_node('T'), rhs.new_node('T'), rhs.new_node('W')\n    rhs.new_edge('transition', [v1, v2], is_terminal=True)\n    rhs.new_edge('observation', [v2, v3], is_terminal=True)\n    rhs.new_edge('X', [v2], is_nonterminal=True)\n    rhs.ext = [v1]\n    fgg.new_rule('X', rhs)\n    \n    rhs = fggs.Graph()\n    v1, v2 = rhs.new_node('T'), rhs.new_node('T')\n    rhs.new_edge('transition', [v1, v2], is_terminal=True)\n    rhs.new_edge('is_eos', [v2], is_terminal=True)\n    rhs.ext = [v1]\n    fgg.new_rule('X', rhs)\n\nThe last step is to create the domains and factors. For the domains,\nwe list out the possible values:\n\n    fgg.new_finite_domain('T', ['BOS', 'EOS', 'IN', 'NNS', 'VBP'])\n    fgg.new_finite_domain('W', ['cats', 'chase', 'dogs', 'that'])\n\nAnd for the factors, we provide weight tensors:\n\n    fgg.new_finite_factor('is_bos', torch.tensor([1.0, 0.0, 0.0, 0.0, 0.0]))\n    fgg.new_finite_factor('is_eos', torch.tensor([0.0, 1.0, 0.0, 0.0, 0.0]))\n    fgg.new_finite_factor('transition',\n        torch.tensor([\n            [0.0, 0.0, 0.0, 1.0, 0.0], # BOS\n            [0.0, 0.0, 0.0, 0.0, 0.0], # EOS\n            [0.0, 0.0, 0.0, 0.0, 1.0], # IN\n            [0.0, 0.5, 0.5, 0.0, 0.0], # NNS\n            [0.0, 0.0, 0.0, 1.0, 0.0], # VBP\n        ])\n    )\n    fgg.new_finite_factor('observation',\n        torch.tensor([\n            [0.0, 0.0, 0.0, 0.0], # BOS\n            [0.0, 0.0, 0.0, 0.0], # EOS\n            [0.0, 0.0, 0.0, 1.0], # IN\n            [0.5, 0.0, 0.5, 0.0], # NNS\n            [0.0, 1.0, 0.0, 0.0], # VBP\n        ])\n    )\n\nUse `fgg_to_json(fgg)` to convert FGG `fgg` to an object writable by\n`json.dump`, and `json_to_fgg(json)` to convert an object read by\n`json.load` to an FGG.\n\n### Factorization\n\nThe function `fggs.factorize_fgg(fgg)` factorizes an FGG's rules into\npossibly smaller rules, making sum-product computations more\nefficient. This function takes an optional argument:\n\n- `method`\n  * `\"min_fill\"`: fast approximate method (default)\n  * `\"quickbb\"`: partial implementation of Gogate and Richter's QuickBB\n  * `\"acb\"`: slow exact method of Arborg, Corneil, and Proskurowski\n\n### Sum-products\n\nThe function `fggs.sum_product(fgg, **opts)` computes the sum-product\nof an FGG with finite domains and factors. It has a lot of options:\n\n- `method`\n  * `\"fixed-point\"`: fixed-point iteration (default)\n  * `\"linear\"`: linear solver (raises exception if FGG is not linear)\n  * `\"newton\"`: Newton's method\n  \n- `semiring`\n  * `fggs.RealSemiring()`: real semiring (default)\n  * `fggs.LogSemiring()`: log semiring\n  * `fggs.ViterbiSemiring()`: max-plus semiring\n  * `fggs.BoolSemiring()`: Boolean semiring\n  * Each of the above can take a `dtype` and/or `device` argument.\n\n- iterative methods stop when all elements change by less than `tol`\n  (default 1e-5), or after `kmax` iterations (default 1000), whichever\n  comes first.\n\nThe return value of `fggs.sum_product` is a tensor. If the start\nnonterminal has no external nodes (as in the original paper), the\ntensor is a scalar. It's also allowed for the start nonterminal to\nhave k > 0 external nodes, so that the tensor has order k.\n\nThe `ViterbiSemiring` gives the log-weight of the highest-weight\nderivation. To get the derivation itself, use `fggs.viterbi(fgg, asst,\n**opts)`, where `asst` is an assignment to the start nonterminal.\n\n    derivation = fggs.viterbi(fgg, ())\n    factorgraph = derivation.derive()\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/diprism/fggs",
    "keywords": "",
    "license": "Copyright (c) 2021 University of Notre Dame Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fggs",
    "package_url": "https://pypi.org/project/fggs/",
    "platform": null,
    "project_url": "https://pypi.org/project/fggs/",
    "project_urls": {
      "Homepage": "https://github.com/diprism/fggs"
    },
    "release_url": "https://pypi.org/project/fggs/0.1/",
    "requires_dist": [
      "torch (>=1.8)",
      "torch-semiring-einsum (>=1.1)",
      "pydot",
      "tqdm"
    ],
    "requires_python": ">=3.7",
    "summary": "Factor Graph Grammars in Python",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15400481,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52601c72e6eb844d7ebe2520f5d947894d15b5bcb04fa25819d3da5d2ac807af",
          "md5": "e4463ff53d8dcbd02d7470d36e84097a",
          "sha256": "2b87ff0f85bcfa16c76f1df330908ff796c8742217b0d3de09699525ab581ce3"
        },
        "downloads": -1,
        "filename": "fggs-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4463ff53d8dcbd02d7470d36e84097a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 37541,
        "upload_time": "2022-10-13T15:33:33",
        "upload_time_iso_8601": "2022-10-13T15:33:33.427577Z",
        "url": "https://files.pythonhosted.org/packages/52/60/1c72e6eb844d7ebe2520f5d947894d15b5bcb04fa25819d3da5d2ac807af/fggs-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be3a81baaf7e7f46c82bd18b43e52ca39a33c30b04291c7bc6d7b1705da21f98",
          "md5": "aef49c477a5a9bdf2ea17e58a1cab281",
          "sha256": "741ae29adcaa7f1e38475d17a4e97f0da795f9c3762d63e2de1b9b2218eb5ae2"
        },
        "downloads": -1,
        "filename": "fggs-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "aef49c477a5a9bdf2ea17e58a1cab281",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46404,
        "upload_time": "2022-10-13T15:33:35",
        "upload_time_iso_8601": "2022-10-13T15:33:35.335364Z",
        "url": "https://files.pythonhosted.org/packages/be/3a/81baaf7e7f46c82bd18b43e52ca39a33c30b04291c7bc6d7b1705da21f98/fggs-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52601c72e6eb844d7ebe2520f5d947894d15b5bcb04fa25819d3da5d2ac807af",
        "md5": "e4463ff53d8dcbd02d7470d36e84097a",
        "sha256": "2b87ff0f85bcfa16c76f1df330908ff796c8742217b0d3de09699525ab581ce3"
      },
      "downloads": -1,
      "filename": "fggs-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e4463ff53d8dcbd02d7470d36e84097a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 37541,
      "upload_time": "2022-10-13T15:33:33",
      "upload_time_iso_8601": "2022-10-13T15:33:33.427577Z",
      "url": "https://files.pythonhosted.org/packages/52/60/1c72e6eb844d7ebe2520f5d947894d15b5bcb04fa25819d3da5d2ac807af/fggs-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be3a81baaf7e7f46c82bd18b43e52ca39a33c30b04291c7bc6d7b1705da21f98",
        "md5": "aef49c477a5a9bdf2ea17e58a1cab281",
        "sha256": "741ae29adcaa7f1e38475d17a4e97f0da795f9c3762d63e2de1b9b2218eb5ae2"
      },
      "downloads": -1,
      "filename": "fggs-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "aef49c477a5a9bdf2ea17e58a1cab281",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 46404,
      "upload_time": "2022-10-13T15:33:35",
      "upload_time_iso_8601": "2022-10-13T15:33:35.335364Z",
      "url": "https://files.pythonhosted.org/packages/be/3a/81baaf7e7f46c82bd18b43e52ca39a33c30b04291c7bc6d7b1705da21f98/fggs-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}