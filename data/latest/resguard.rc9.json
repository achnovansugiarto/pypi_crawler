{
  "info": {
    "author": "Daniel Hilst Selli",
    "author_email": "danielhilst@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "[![Build Status](https://travis-ci.org/dhilst/resguard.svg?branch=master)](https://travis-ci.org/dhilst/resguard)\n\nresguard\n========\n\nThis module provides function for parsing response data, based on\ndataclass defined schemas.\n\nThe user define arbitrary schema using dataclass. One dataclass\ncan refer to others to represent nested structures.\n\n```python\n>>> @dataclass\n... class Foo:\n...     pass\n\n>>> @dataclass\n... class Bar:\n...     foo: Foo\n\n```\n\nWhile made with parsing json decoded data from REST responses in mind, the\napproach is pretty generic and may work for other use cases.\n\nSo suppose that you're in charging to do another API client.. if you started\ndoing this once you know that you'll gonna work with JSON and that JSON become\nplain dicts and lists in python, it's easy to lose the track of these objects\nand start to spread KeyError and IndexError handlers all over the codebase.\n\nIt became usual to me to write representation of the response data as objects\nand instantiating these objects, and with objects I can have some type\nchecking, mutch better than with dicts... and can track what the fields\n\nBut writing ad-hoc classes and parsers from dict -> myobject became boring\ntoo.. so I created this! Much more declarative and type checking friendly\n\nSo let's write an API to cat facts, we can find the docs here\nhttps://alexwohlbruck.github.io/cat-facts/docs/endpoints/facts.html\n\nWe're implementing the /facts/random endpoint. The documentation said that it\nwill respond like this:\n\n```json\n\t{\n\t\t\"_id\": \"591f9894d369931519ce358f\",\n\t\t\"__v\": 0,\n\t\t\"text\": \"A female cat will be pregnant for approximately 9 weeks - between 62 and 65 days from conception to delivery.\",\n\t\t\"updatedAt\": \"2018-01-04T01:10:54.673Z\",\n\t\t\"deleted\": false,\n\t\t\"source\": \"api\",\n\t\t\"used\": false\n\t}\n```\n\nSo is a list of facts, a fact can be defined like this\n\n```python\n>>> from datetime import datetime\n>>> @dataclass\n... class Fact:\n...     _id: str\n...     __v: int\n...     text: str\n...     updatedAt: datetime\n...     deleted: bool\n...     source: str\n...     used: bool\n...     user: Optional[str]\n\n```\n\nTo parse a respone you call `parse_dc`, where `dc` stands for dataclass. You\ncall it with the dataclass and the response data:\n\n```python\n>>> import requests as r\n>>> url = \"https://cat-fact.herokuapp.com\"\n>>> res = r.get(f\"{url}/facts/random\")\n>>> parse_dc(Fact, res.json())\nTraceback (most recent call last):\n...\nTypeError: Unknow field type for Fact(_id,_Fact__v,text,updatedAt,deleted,source,used,user)\n\n```\n\nYou may notice that I put a `user: Optional[str]` on the `Fact` definition too.\nThis is how you express optional fields, that may or may not be present on\nresponse. Missing optinal fields become `None` in dataclass\n\nWhat happens here is that the documentation is outdated, there are a type field\nthat was not expected in response. `parse_dc` raise a TypeError if anything\ngoes out of rails. Let's see in response what we have in `type` field\n```python\n>>> type_ = res.json()['type']\n>>> type_, type(type_)\n('cat', <class 'str'>)\n\n```\n\nWe do not want that our software breaks because the API put a brand new\nfield in the response. You can ignore unknow fields by passing `strict=False`\nto `parse_dc`. If you want this by default you can memoise the parse_dc like\nbelow:\n\n```python\n>>> from functools import partial\n>>> parse_dc = partial(parse_dc, strict=False)\n\n```\n\nSo let's update our `Fact` definition\n\n```python\n>>> @dataclass\n... class Fact:\n...     _id: str\n...     __v: int\n...     text: str\n...     updatedAt: datetime\n...     deleted: bool\n...     source: str\n...     used: bool\n...     user: Optional[str]\n...     type: str # <- we added this\n\n```\n\nAnd parse again. This time it works, but it's doesn't properly initialize the\ndataclasses fields. Well, dataclass don't do runtime type checking. \n```python\n>>> dc = parse_dc(Fact, res.json())\n>>> dc  \nFact(...)\n>>> type(dc.updatedAt)\n<class 'str'>\n\n```\n\nIf you pass it a string, it doens't matter if the field type says datetime,\nconstructor will put the string there and it's done. But the standard library\nprovides a way to handle this. You need to provide an `__post_init__` method.\nIt will not receive any arguments and it.s called by constructor after\ninitializing self.\n\n```python\n>>> @dataclass\n... class Fact:\n...     _id: str\n...     __v: int\n...     text: str\n...     updatedAt: datetime\n...     deleted: bool\n...     source: str\n...     used: bool\n...     user: Optional[str]\n...     type: str\n...\n...     def __post_init__(self):\n...         if isinstance(self.updatedAt, str):\n...             self.updatedAt = datetime.strptime(self.updatedAt, \"%Y-%m-%dT%H:%M:%S.%fZ\")\n\n>>> dc = parse_dc(Fact, res.json())\n>>> dc \nFact(...)\n>>> type(dc.updatedAt)\n<class 'datetime.datetime'>\n\n```\nNow what if we want go to the oposite direction, given somejson, construct\na dataclass. Well resguard can be invoked as `curl something | python -m resguard fromjson`\nand it will output a dataclass definition for that JSON.\n\nThe type inference is pretty simple, but it is already better than writing all\nthat dataclasses by hand. Let's see it in action\n\n```python\n>>> print(print_dc(fromjson(\"Root\", '{\"foo\": \"foo\", \"bar\": { \"bar\": \"bar\" }}')))\n@dataclass\nclass bar:\n   bar: str\n<BLANKLINE>\n<BLANKLINE>\n@dataclass\nclass Root:\n   foo: str\n   bar: bar\n<BLANKLINE>\n\n```\n\nTo use it from command line (much simpler)\n```shell\ncurl -s https://cat-fact.herokuapp.com/facts/random | python -m resguard fromjson\n@dataclass\nclass status:\n   verified: bool\n   sentCount: int\n\n\n@dataclass\nclass Root:\n   used: bool\n   source: str\n   type: str\n   deleted: bool\n   _id: str\n   __v: int\n   text: str\n   updatedAt: str\n   createdAt: str\n   status: status\n   user: str\n\n\n```\n\nThat's it, check below for function docs\n\n\n# parse_dc(dc, data, strict=True)\n\nBuild tree of dataclasses initialized with data\n\nIt don't type checks, just instantiate the dataclasses recursively. Just\nnote that dataclass don't check at runtime too, so, this doesn't typecheck\nbut it works at runtime\n\n>>> from dataclasses import dataclass, asdict\n>>> @dataclass\n... class Foo:\n...     foo: str\n...     __bar: str\n>>> asdict(Foo(foo=1, _Foo__bar=1))\n{'foo': 1, '_Foo__bar': 1}\n\nBut mypy will detect the `foo=1` there.\n\nLet's parse something :-)\n```python\n>>> from enum import Enum\n>>> FooEnum = Enum(\"FooEnum\", \"foo bar\")\n>>> \n>>> @dataclass\n... class Bar:\n...     bar: str\n>>> \n>>> @dataclass\n... class Foo:\n...     foo: str\n...     bar: Bar\n>>> parse_dc(Foo, {\"foo\": \"foo\", \"num\": 1, \"bar\": {\"bar\": \"bar\"}})\nFoo(foo='foo', bar=Bar(bar='bar'))\n\n>>> from datetime import datetime\n>>> @dataclass\n... class Date:\n...     d: datetime\n>>> Date(d=\"20010101T00:00Z\").d\n20010101T00:00Z\n>>> @dataclass\n... class Date:\n...     d: datetime\n...     def __post_init__(self):\n...         if isinstance(self.d, str):\n...             self.d = datetime.strptime(\"%Y%m%dT%H%MZ\")\n>>> Date(d=\"20010101T00:00Z\").d\n\n\n```\n\n# create_base(base)\n\nA function decorator. It replace the function by a class\nwhich call the decorated function in its new method, for\nexample\n\n```python\n>>> from datetime import datetime\n>>> @create_base(datetime)\n... def date_br(s):\n...     return datetime.strptime(s, r\"%d/%m/%Y\")\n>>> issubclass(date_br, datetime)\nTrue\n>>> date_br(\"01/01/2001\")\ndatetime.datetime(2001, 1, 1, 0, 0)\n\n```\n\n# unpack_union(union: Union[~T, Any, NoneType]) -> ~T\n\nTakes an Unin and return another union with the same arguments\nas input, but with None and Any filtered\n\n```python\n>>> unpack_union(Optional[str])\n<class 'str'>\n\n>>> unpack_union(List[str])\n<class 'str'>\n\n```\n\nIt respect concrete types\n```python\n>>> unpack_union(int)\n<class 'int'>\n\n```\n\nIf the input is a literal, it returns itself. Literals are types\nand values at same time, like enums\n```python\n>>> unpack_union(1)\n1\n>>> unpack_union([1,2])\n[1, 2]\n\n```\n\n# Dataclass(*args, **kwds)\n\nDataclass static type\nhttps://stackoverflow.com/a/55240861/652528",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dhilst/resguard",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "resguard",
    "package_url": "https://pypi.org/project/resguard/",
    "platform": "",
    "project_url": "https://pypi.org/project/resguard/",
    "project_urls": {
      "Homepage": "https://github.com/dhilst/resguard"
    },
    "release_url": "https://pypi.org/project/resguard/0.15/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "",
    "version": "0.15",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6566608,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b54e1da3e8a7c781e29c083a54a5b9d889a067d0513d66e925e40c01488d9812",
          "md5": "452f69e029b3458d13adf8b34636bee8",
          "sha256": "68f6dc1feded5632771038049fafc54a1d03ff195551e817268a49ea1677e08c"
        },
        "downloads": -1,
        "filename": "resguard-0.1.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "452f69e029b3458d13adf8b34636bee8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9602,
        "upload_time": "2020-02-02T21:33:55",
        "upload_time_iso_8601": "2020-02-02T21:33:55.616458Z",
        "url": "https://files.pythonhosted.org/packages/b5/4e/1da3e8a7c781e29c083a54a5b9d889a067d0513d66e925e40c01488d9812/resguard-0.1.linux-x86_64.tar.gz",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34002ca44a2350d2407a4eae5aa854813a4b201ffd0beb7274a6850aade04e85",
          "md5": "a7d9eff7e93f44f472565cb1ab367f63",
          "sha256": "8b4c78071f3c861fb5a9e63fd797a8cca55d0cef0abf0a5319df3ef256ca6b24"
        },
        "downloads": -1,
        "filename": "resguard-0.1-py3.6.egg",
        "has_sig": false,
        "md5_digest": "a7d9eff7e93f44f472565cb1ab367f63",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "requires_python": ">=3.6",
        "size": 16150,
        "upload_time": "2020-02-02T21:33:57",
        "upload_time_iso_8601": "2020-02-02T21:33:57.276548Z",
        "url": "https://files.pythonhosted.org/packages/34/00/2ca44a2350d2407a4eae5aa854813a4b201ffd0beb7274a6850aade04e85/resguard-0.1-py3.6.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c305b97a2acde529528dd9f32dc2e5e231be94a77ff0a123c1afb7fd6fc4cc6",
          "md5": "12bc439e6a5270f9916eddc120f41e9e",
          "sha256": "e69d6b93fa6816e927115a5f1cf6f7df27ce840a683fede2aa5ef8295399ee2f"
        },
        "downloads": -1,
        "filename": "resguard-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "12bc439e6a5270f9916eddc120f41e9e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9268,
        "upload_time": "2020-02-02T21:33:52",
        "upload_time_iso_8601": "2020-02-02T21:33:52.767890Z",
        "url": "https://files.pythonhosted.org/packages/8c/30/5b97a2acde529528dd9f32dc2e5e231be94a77ff0a123c1afb7fd6fc4cc6/resguard-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e46b5f9e8eadc8ec195762823476e6246711117cab656d59b7aec7296dec4a6",
          "md5": "c6342cc6d5061defa6f7979a9fab3fac",
          "sha256": "6a347f015750e5f78b139f255099b6183f6b114753399b76ab3ce1a0872107c8"
        },
        "downloads": -1,
        "filename": "resguard-0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "c6342cc6d5061defa6f7979a9fab3fac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9726,
        "upload_time": "2020-02-03T02:15:06",
        "upload_time_iso_8601": "2020-02-03T02:15:06.684700Z",
        "url": "https://files.pythonhosted.org/packages/8e/46/b5f9e8eadc8ec195762823476e6246711117cab656d59b7aec7296dec4a6/resguard-0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e58867f7eac69893489fbf1aec2d6a9f15fc13900a04017b1f13c067e974511e",
          "md5": "5dd94a91e685d22d21b625a898d0125c",
          "sha256": "24331d020e90243248417865237349b109ba5d8ef4e0db8c1257a5f05d65b20e"
        },
        "downloads": -1,
        "filename": "resguard-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "5dd94a91e685d22d21b625a898d0125c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9764,
        "upload_time": "2020-02-03T02:20:04",
        "upload_time_iso_8601": "2020-02-03T02:20:04.372590Z",
        "url": "https://files.pythonhosted.org/packages/e5/88/67f7eac69893489fbf1aec2d6a9f15fc13900a04017b1f13c067e974511e/resguard-0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a6325605be23d1a4fca4d4a6f36d3fa32668d95e31192ffc1523c1244752158",
          "md5": "a1e5a6a08d0ebf069abdcee4149b319c",
          "sha256": "cc7af240d91cd0da4de8bb0d14a085fb71efa7d1ce0042469eb22ea03ce002db"
        },
        "downloads": -1,
        "filename": "resguard-0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "a1e5a6a08d0ebf069abdcee4149b319c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8929,
        "upload_time": "2020-02-04T05:04:59",
        "upload_time_iso_8601": "2020-02-04T05:04:59.009758Z",
        "url": "https://files.pythonhosted.org/packages/8a/63/25605be23d1a4fca4d4a6f36d3fa32668d95e31192ffc1523c1244752158/resguard-0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19784e8b2b1a7eaa6a5926bb65928736f06ca51bedd14f26cb6dea9b23321694",
          "md5": "a6391afcc3f5535ef5afd57d2c084bab",
          "sha256": "a0763d4cae667a100e5f58098879b063a24e69fca9fb67a95408b9f25d86a4b8"
        },
        "downloads": -1,
        "filename": "resguard-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a6391afcc3f5535ef5afd57d2c084bab",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8734,
        "upload_time": "2020-02-02T21:38:15",
        "upload_time_iso_8601": "2020-02-02T21:38:15.322477Z",
        "url": "https://files.pythonhosted.org/packages/19/78/4e8b2b1a7eaa6a5926bb65928736f06ca51bedd14f26cb6dea9b23321694/resguard-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0912337d989aac477856757f54c5ed46c71037ad0d2f9e622fc36f59ccf32a3c",
          "md5": "f14056cd1c646dd961a225ef038e7cf2",
          "sha256": "a83d12c31913e3f1c711e279bb75bfc20ffe614c656774030a3e91cffe5a4aac"
        },
        "downloads": -1,
        "filename": "resguard-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f14056cd1c646dd961a225ef038e7cf2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9287,
        "upload_time": "2020-02-03T01:14:53",
        "upload_time_iso_8601": "2020-02-03T01:14:53.129054Z",
        "url": "https://files.pythonhosted.org/packages/09/12/337d989aac477856757f54c5ed46c71037ad0d2f9e622fc36f59ccf32a3c/resguard-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0bae7704db7219668d3fd4d0f5ca4219d775609f4fb01e9d68d7cf448c6f5e3",
          "md5": "90ba8021e789bcaef971b8bee8b445f2",
          "sha256": "3ee3131ab93af8467ef0e5907901c0562b801459cca3c82309ed12c50565337c"
        },
        "downloads": -1,
        "filename": "resguard-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "90ba8021e789bcaef971b8bee8b445f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9381,
        "upload_time": "2020-02-03T01:19:44",
        "upload_time_iso_8601": "2020-02-03T01:19:44.223536Z",
        "url": "https://files.pythonhosted.org/packages/b0/ba/e7704db7219668d3fd4d0f5ca4219d775609f4fb01e9d68d7cf448c6f5e3/resguard-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62c2b7b09f01aab2fd98d4b058df6caedb235dd07e826e1368268c987d7d8eca",
          "md5": "e90b84fc5c3410480c5c232fda182f90",
          "sha256": "f879c0e60a78dd6860b74d5b32477176b5934f124ee2a72196ccf7e91adba83e"
        },
        "downloads": -1,
        "filename": "resguard-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e90b84fc5c3410480c5c232fda182f90",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9388,
        "upload_time": "2020-02-03T01:31:08",
        "upload_time_iso_8601": "2020-02-03T01:31:08.795014Z",
        "url": "https://files.pythonhosted.org/packages/62/c2/b7b09f01aab2fd98d4b058df6caedb235dd07e826e1368268c987d7d8eca/resguard-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14b69ba6f5d37376106d77c868807a43f7b961bf4bfacff7565f9e27b53812dd",
          "md5": "5c5e8fe57d75f9dc39576753f3a60402",
          "sha256": "9d948225cc4203eb6501c6a2755da0edc0bd80413f488ca75bd1d4fa50962ef3"
        },
        "downloads": -1,
        "filename": "resguard-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "5c5e8fe57d75f9dc39576753f3a60402",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9724,
        "upload_time": "2020-02-03T01:51:43",
        "upload_time_iso_8601": "2020-02-03T01:51:43.504544Z",
        "url": "https://files.pythonhosted.org/packages/14/b6/9ba6f5d37376106d77c868807a43f7b961bf4bfacff7565f9e27b53812dd/resguard-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8a6325605be23d1a4fca4d4a6f36d3fa32668d95e31192ffc1523c1244752158",
        "md5": "a1e5a6a08d0ebf069abdcee4149b319c",
        "sha256": "cc7af240d91cd0da4de8bb0d14a085fb71efa7d1ce0042469eb22ea03ce002db"
      },
      "downloads": -1,
      "filename": "resguard-0.15.tar.gz",
      "has_sig": false,
      "md5_digest": "a1e5a6a08d0ebf069abdcee4149b319c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8929,
      "upload_time": "2020-02-04T05:04:59",
      "upload_time_iso_8601": "2020-02-04T05:04:59.009758Z",
      "url": "https://files.pythonhosted.org/packages/8a/63/25605be23d1a4fca4d4a6f36d3fa32668d95e31192ffc1523c1244752158/resguard-0.15.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}