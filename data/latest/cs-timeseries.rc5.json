{
  "info": {
    "author": "Cameron Simpson",
    "author_email": "Cameron Simpson <cs@cskk.id.au>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Efficient portable machine native columnar file storage of time\nseries data for double float and signed 64-bit integers.\n\n*Latest release 20230217*:\n* TimeSeriesFile.save_to: use atomic_filename() to create the updated file.\n* Other small fixes and updates.\n\nThe core purpose is to provide time series data storage; there\nare assorted convenience methods to export arbitrary subsets\nof the data for use by other libraries in common forms, such\nas dataframes or series, numpy arrays and simple lists.\nThere are also some simple plot methods for plotting graphs.\n\nThree levels of storage are defined here:\n- `TimeSeriesFile`: a single file containing a binary list of\n  float64 or signed int64 values\n- `TimeSeriesPartitioned`: a directory containing multiple\n  `TimeSeriesFile` files, each covering a separate time span\n  according to a supplied policy, for example a calendar month\n- `TimeSeriesDataDir`: a directory containing multiple\n  `TimeSeriesPartitioned` subdirectories, each for a different\n  time series, for example one subdirectory for grid voltage\n  and another for grid power\n\nTogether these provide a hierarchy for finite sized files storing\nunbounded time series data for multiple parameters.\n\nOn a personal basis, I use this as efficient storage of time\nseries data from my solar inverter, which reports in a slightly\nclunky time limited CSV format; I import those CSVs into\ntime series data directories which contain the overall accrued\ndata; see my `cs.splink` module which is built on this module.\n\n## Function `array_byteswapped(ary)`\n\nContext manager to byteswap the `array.array` `ary` temporarily.\n\n## Class `ArrowBasedTimespanPolicy(TimespanPolicy, icontract._metaclass.DBC, HasEpochMixin, TimeStepsMixin, cs.deco.Promotable)`\n\nA `TimespanPolicy` based on an Arrow format string.\n\nSee the `raw_edges` method for the specifics of how these are defined.\n\n## Function `as_datetime64s(times, unit='s', utcoffset=0)`\n\nReturn a Numpy array of `datetime64` values\ncomputed from an iterable of `int`/`float` UNIX timestamp values.\n\nThe optional `unit` parameter (default `'s'`) may be one of:\n- `'s'`: seconds\n- `'ms'`: milliseconds\n- `'us'`: microseconds\n- `'ns'`: nanoseconds\nand represents the precision to preserve in the source time\nwhen converting to a `datetime64`.\nLess precision gives greater time range.\n\n## Function `datetime64_as_timestamp(dt64: numpy.datetime64)`\n\nReturn the UNIX timestamp for the `datetime64` value `dt64`.\n\n## Function `deduce_type_bigendianness(typecode: str) -> bool`\n\nDeduce the native endianness for `typecode`,\nan array/struct typecode character.\n\n## Class `Epoch(Epoch, builtins.tuple, TimeStepsMixin, cs.deco.Promotable)`\n\nThe basis of time references with a starting UNIX time `start`\nand a `step` defining the width of a time slot.\n\n## Function `get_default_timezone_name()`\n\nReturn the default timezone name.\n\n## Class `HasEpochMixin(TimeStepsMixin)`\n\nA `TimeStepsMixin` with `.start` and `.step` derived from `self.epoch`.\n\n## Function `main(argv=None)`\n\nRun the command line tool for `TimeSeries` data.\n\n## Function `plot_events(start, stop, events, value_func, *, utcoffset, figure=None, ax=None, **scatter_kw) -> matplotlib.axes._axes.Axes`\n\nPlot `events`, an iterable of objects with `.unixtime`\nattributes such as an `SQLTagSet`.\nReturn the `Axes` on which the plot was made.\n\nParameters:\n* `events`: an iterable of objects with `.unixtime` attributes\n* `value_func`: a callable to compute the y-axis value from an event\n* `start`: optional start UNIX time, used to crop the events plotted\n* `stop`: optional stop UNIX time, used to crop the events plotted\n* `figure`,`ax`: optional arguments as for `cs.mplutils.axes`\n* `utcoffset`: optional UTC offset for presentation\nOther keyword parameters are passed to `Axes.scatter`.\n\n## Class `PlotSeries(PlotSeries, builtins.tuple, cs.deco.Promotable)`\n\nInformation about a series to be plotted:\n- `label`: the label for this series\n- `series`: an series\n- `extra`: a `dict` of extra information such as plot styling\n\n## Class `TimePartition(TimePartition, builtins.tuple, TimeStepsMixin)`\n\nA `namedtuple` for a slice of time with the following attributes:\n* `epoch`: the reference `Epoch`\n* `name`: the name for this slice\n* `start_offset`: the epoch offset of the start time\n* `end_offset`: the epoch offset of the end time\n\nThese are used by `TimespanPolicy` instances to express the partitions\ninto which they divide time.\n\n## Function `timerange(*da, **dkw)`\n\nA decorator intended for plotting functions or methods which\npresents optional `start` and `stop` leading positional\nparameters and optional `tz` or `utcoffset` keyword parameters.\nThe decorated function will be called with leading `start`\nand `stop` positional parameters and a specific `utcoffset`\nkeyword parameter.\n\nThe as-decorated function is called with the following parameters:\n* `start`: an optional UNIX timestamp positional for the\n  start of the range; if omitted the default is `self.start`;\n  this is a required parameter if the decorator has `needs_start=True`\n* `stop`: an optional UNIX timestamp positional parameter for the end\n  of the range; if omitted the default is `self.stop`;\n  this is a required parameter if the decorator has `needs_stop=True`\n* `tz`: optional timezone `datetime.tzinfo` object or\n  specification as for `tzfor()`;\n  this is used to infer a UTC offset in seconds\n* `utcoffset`: an optional offset from UTC time in seconds\nOther parameters are passed through to the deocrated function.\n\nA decorated *method* is then called as:\n\n    method(self, start, stop, *a, utcoffset=utcoffset, **kw)\n\nwhere `*a` and `**kw` are the additional positional and keyword\nparameters respectively, if any.\n\nA decorated *function* is called as:\n\n    function(start, stop, *a, utcoffset=utcoffset, **kw)\n\nThe `utcoffset` is an offset to apply to UTC-based time data\nfor _presentation_ on the graph, largely because the plotting\nfunctions use `DataFrame.plot` which broadly ignores attempts\nto set locators or formatters because it supplies its own.\nThe plotting function would shift the values of the `DataFrame`\nindex using this value.\n\nIf neither `utcoffset` or `tz` is supplied by the caller, the\n`utcoffset` is `0.0`.\nA specified `utcoffset` is passed through.\nA `tz` is promoted to a `tzinfo` instance via the `tzfor()`\nfunction and applied to the `stop` timestamp to obtain a\n`datetime` from which the `utcoffset` will be derived.\nIt is an error to specify both `utcoffset` and `tz`.\n\n## Class `TimeSeries(cs.resources.MultiOpenMixin, cs.context.ContextManagerMixin, HasEpochMixin, TimeStepsMixin)`\n\nCommon base class of any time series.\n\n## Function `timeseries_from_path(tspath: str, epoch: Optional[cs.timeseries.Epoch] = None, typecode=None)`\n\nTurn a time series filesystem path into a time series:\n* a file: a `TimeSeriesFile`\n* a directory holding `.csts` files: a `TimeSeriesPartitioned`\n* a directory: a `TimeSeriesDataDir`\n\n## Class `TimeSeriesBaseCommand(cs.cmdutils.BaseCommand)`\n\nAbstract base class for command line interfaces to `TimeSeries` data files.\n\nCommand line usage:\n\n    Usage: timeseriesbase subcommand [...]\n      Subcommands:\n        fetch ...\n          Fetch raw data files from the primary source to a local spool.\n          To be implemented in subclasses.\n        help [-l] [subcommand-names...]\n          Print the full help for the named subcommands,\n          or for all subcommands if no names are specified.\n          -l  Long help even if no subcommand-names provided.\n        import ...\n          Import data into the time series.\n          To be implemented in subclasses.\n        info\n          Report information.\n        plot [-f] [-o imgpath.png] [--show] [--tz tzspec] start-time [stop-time] [{glob|fields}...]\n          Plot the data from specified fields for the specified time range.\n          Options:\n            --bare          Strip axes and padding from the plot.\n            -f              Force. -o will overwrite an existing image file.\n            -o imgpath.png  File system path to which to save the plot.\n            --show          Show the image in the GUI.\n            --tz tzspec     Skew the UTC times presented on the graph\n                            The default skew is 0 i.e. UTC.\n                            to emulate the timezone specified by tzspec.\n            --stacked       Stack the plot lines/areas.\n            start-time      An integer number of days before the current time\n                            or any datetime specification recognised by\n                            dateutil.parser.parse.\n            stop-time       Optional stop time, default now.\n                            An integer number of days before the current time\n                            or any datetime specification recognised by\n                            dateutil.parser.parse.\n            glob|fields     If glob is supplied, constrain the keys of\n                            a TimeSeriesDataDir by the glob.\n\n## Class `TimeSeriesCommand(TimeSeriesBaseCommand, cs.cmdutils.BaseCommand)`\n\nCommand line interface to `TimeSeries` data files.\n\nCommand line usage:\n\n    Usage: timeseries [-s ts-step] tspath subcommand...\n        -s ts-step  Specify the UNIX time step for the time series,\n                    used if the time series is new and checked otherwise.\n        tspath      The filesystem path to the time series;\n                    this may refer to a single .csts TimeSeriesFile, a\n                    TimeSeriesPartitioned directory of such files, or\n                    a TimeSeriesDataDir containing partitions for\n                    multiple keys.\n      Subcommands:\n        dump\n          Dump the contents of tspath.\n        fetch ...\n          Fetch raw data files from the primary source to a local spool.\n          To be implemented in subclasses.\n        help [-l] [subcommand-names...]\n          Print the full help for the named subcommands,\n          or for all subcommands if no names are specified.\n          -l  Long help even if no subcommand-names provided.\n        import csvpath datecol[:conv] [import_columns...]\n          Import data into the time series.\n          csvpath   The CSV file to import.\n          datecol[:conv]\n                    Specify the timestamp column and optional\n                    conversion function.\n                    \"datecol\" can be either the column header name\n                    or a numeric column index counting from 0.\n                    If \"conv\" is omitted, the column should contain\n                    a UNIX seconds timestamp.  Otherwise \"conv\"\n                    should be either an identifier naming one of\n                    the known conversion functions or an \"arrow.get\"\n                    compatible time format string.\n          import_columns\n                    An optional list of column names or their derived\n                    attribute names. The default is to import every\n                    numeric column except for the datecol.\n        info\n          Report infomation about the time series stored at tspath.\n        plot [-f] [-o imgpath.png] [--show] [--tz tzspec] start-time [stop-time] [{glob|fields}...]\n          Plot the data from specified fields for the specified time range.\n          Options:\n            --bare          Strip axes and padding from the plot.\n            -f              Force. -o will overwrite an existing image file.\n            -o imgpath.png  File system path to which to save the plot.\n            --show          Show the image in the GUI.\n            --tz tzspec     Skew the UTC times presented on the graph\n                            The default skew is 0 i.e. UTC.\n                            to emulate the timezone specified by tzspec.\n            --stacked       Stack the plot lines/areas.\n            start-time      An integer number of days before the current time\n                            or any datetime specification recognised by\n                            dateutil.parser.parse.\n            stop-time       Optional stop time, default now.\n                            An integer number of days before the current time\n                            or any datetime specification recognised by\n                            dateutil.parser.parse.\n            glob|fields     If glob is supplied, constrain the keys of\n                            a TimeSeriesDataDir by the glob.\n        test [testnames...]\n          Run some tests of functionality.\n\n## Class `TimeSeriesDataDir(TimeSeriesMapping, builtins.dict, cs.resources.MultiOpenMixin, cs.context.ContextManagerMixin, cs.fs.HasFSPath, cs.configutils.HasConfigIni, HasEpochMixin, TimeStepsMixin)`\n\nA directory containing a collection of `TimeSeriesPartitioned` subdirectories.\n\n## Class `TimeSeriesFile(TimeSeries, cs.resources.MultiOpenMixin, cs.context.ContextManagerMixin, HasEpochMixin, TimeStepsMixin, cs.fs.HasFSPath)`\n\nA file containing a single time series for a single data field.\n\nThis provides easy access to a time series data file.\nThe instance can be indexed by UNIX time stamp for time based access\nor its `.array` property can be accessed for the raw data.\n\nThe data file itself has a header indicating the file data big endianness,\nthe datum type and the time type (both `array.array` type codes).\nFollowing these are the start and step sizes in the time type format.\nThis is automatically honoured on load and save.\n\nA new file will use the native endianness, but files of other\nendianness are correctly handled, making a `TimeSeriesFile`\nportable between architectures.\n\nRead only users can just instantiate an instance and access\nits `.array` property, or use the `peek` and `peek_offset` methods.\n\nRead/write users should use the instance as a context manager,\nwhich will automatically update the file with the array data\non exit:\n\n    with TimeSeriesFile(fspath) as ts:\n        ... work with ts here ...\n\nNote that the save-on-close is done with `TimeSeries.flush()`\nwhich only saves if `self.modified`.\nUse of the `__setitem__` or `pad_to` methods set this flag automatically.\nDirect access via the `.array` will not set it,\nso users working that way for performance should update the flag themselves.\n\nA `TimeSeriesFile` has two underlying modes of operation:\nin-memory `array.array` mode and direct-to-file `mmap` mode.\n\nThe in-memory mode reads the whole file into an `array.array` instance,\nand all updates then modify the in-memory `array`.\nThe file is saved when the context manager exits or when `.save()` is called.\nThis maximises efficiency when many accesses are done.\n\nThe `mmap` mode maps the file into memory, and accesses operate\ndirectly against the file contents.\nThis is more efficient for just a few accesses,\nbut every \"write\" access (setting a datum) will make the mmapped page dirty,\ncausing the OS to queue it for disc.\nThis mode is recommended for small accesses\nsuch as updating a single datum, eg from polling a data source.\n\nPresently the mode used is triggered by the access method.\nUsing the `peek` and `poke` methods uses `mmap` by default.\nOther accesses default to use the in-memory mode.\nAccess to the `.array` property forces use of the `array` mode.\nPoll/update operations should usually choose to use `peek`/`poke`.\n\n*Method `TimeSeriesFile.__init__(self, fspath: str, typecode: Optional[cs.timeseries.TypeCode] = None, *, epoch: Optional[cs.timeseries.Epoch] = None, fill=None, fstags=None)`*:\nPrepare a new time series stored in the file at `fspath`\ncontaining machine native data for the time series values.\n\nParameters:\n* `fspath`: the filename of the data file\n* `typecode` optional expected `array.typecode` value of the data;\n  if specified and the data file exists, they must match;\n  if not specified then the data file must exist\n  and the `typecode` will be obtained from its header\n* `epoch`: optional `Epoch` specifying the start time and\n  step size for the time series data in the file;\n  if specified and the data file exists, they must match;\n  if not specified then the data file must exist\n  and the `epoch` will be obtained from its header\n* `fill`: optional default fill values for `pad_to`;\n  if unspecified, fill with `0` for `'q'`\n  and `float('nan')` for `'d'`\n\n## Class `TimeSeriesFileHeader(cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin, HasEpochMixin, TimeStepsMixin)`\n\nThe binary data structure of the `TimeSeriesFile` file header.\n\nThis is 24 bytes long and consists of:\n* the 4 byte magic number, `b'csts'`\n* the file bigendian marker, a `struct` byte order indicator\n  with a value of `b'>'` for big endian data\n  or `b'<'` for little endian data\n* the datum typecode, `b'd'` for double float\n  or `b'q'` for signed 64 bit integer\n* the time typecode, `b'd'` for double float\n  or `b'q'` for signed 64 bit integer\n* a pad byte, value `b'_'`\n* the start UNIX time, a double float or signed 64 bit integer\n  according to the time typecode and bigendian flag\n* the step size, a double float or signed 64 bit integer\n  according to the time typecode and bigendian flag\n\nIn addition to the header values tnd methods this also presents:\n* `datum_type`: a `BinarySingleStruct` for the binary form of a data value\n* `time_type`:  a `BinarySingleStruct` for the binary form of a time value\n\n## Class `TimeSeriesMapping(builtins.dict, cs.resources.MultiOpenMixin, cs.context.ContextManagerMixin, HasEpochMixin, TimeStepsMixin)`\n\nA group of named `TimeSeries` instances, indexed by a key.\n\nThis is the basis for `TimeSeriesDataDir`.\n\n## Class `TimeSeriesPartitioned(TimeSeries, cs.resources.MultiOpenMixin, cs.context.ContextManagerMixin, HasEpochMixin, TimeStepsMixin, cs.fs.HasFSPath)`\n\nA collection of `TimeSeries` files in a subdirectory.\nWe have one of these for each `TimeSeriesDataDir` key.\n\nThis class manages a collection of files\nnamed by the partition from a `TimespanPolicy`,\nwhich dictates which partition holds the datum for a UNIX time.\n\n*Method `TimeSeriesPartitioned.__init__(self, dirpath: str, typecode: Optional[cs.timeseries.TypeCode] = None, *, epoch: Optional[cs.timeseries.Epoch] = None, policy, fstags: Optional[cs.fstags.FSTags] = None)`*:\nInitialise the `TimeSeriesPartitioned` instance.\n\nParameters:\n* `dirpath`: the directory filesystem path,\n  known as `.fspath` within the instance\n* `typecode`: the `array` type code for the data\n* `epoch`: the time series `Epoch`\n* `policy`: the partitioning `TimespanPolicy`\n\nThe instance requires a reference epoch\nbecause the `policy` start times will almost always\nnot fall on exact multiples of `epoch.step`.\nThe reference allows for reliable placement of times\nwhich fall within `epoch.step` of a partition boundary.\nFor example, if `epoch.start==0` and `epoch.step==6` and a\npartition boundary came at `19` due to some calendar based\npolicy then a time of `20` would fall in the partion left\nof the boundary because it belongs to the time slot commencing\nat `18`.\n\nIf `epoch` or `typecode` are omitted the file's\nfstags will be consulted for their values.\nThe `start` parameter will further fall back to `0`.\nThis class does not set these tags (that would presume write\naccess to the parent directory or its `.fstags` file)\nwhen a `TimeSeriesPartitioned` is made by a `TimeSeriesDataDir`\ninstance it sets these flags.\n\n## Class `TimespanPolicy(icontract._metaclass.DBC, HasEpochMixin, TimeStepsMixin, cs.deco.Promotable)`\n\nA class implementing a policy allocating times to named time spans.\n\nThe `TimeSeriesPartitioned` uses these policies\nto partition data among multiple `TimeSeries` data files.\n\nProbably the most important methods are:\n* `span_for_time`: return a `TimePartition` from a UNIX time\n* `span_for_name`: return a `TimePartition` from a partition name\n\n*Method `TimespanPolicy.__init__(self, epoch: cs.timeseries.Epoch)`*:\nInitialise the policy.\n\n## Class `TimespanPolicyAnnual(ArrowBasedTimespanPolicy, TimespanPolicy, icontract._metaclass.DBC, HasEpochMixin, TimeStepsMixin, cs.deco.Promotable)`\n\nA annual time policy.\nPARTITION_FORMAT = 'YYYY'\nARROW_SHIFT_PARAMS = {'years': 1}\n\n## Class `TimespanPolicyDaily(ArrowBasedTimespanPolicy, TimespanPolicy, icontract._metaclass.DBC, HasEpochMixin, TimeStepsMixin, cs.deco.Promotable)`\n\nA daily time policy.\nPARTITION_FORMAT = 'YYYY-MM-DD'\nARROW_SHIFT_PARAMS = {'days': 1}\n\n## Class `TimespanPolicyMonthly(ArrowBasedTimespanPolicy, TimespanPolicy, icontract._metaclass.DBC, HasEpochMixin, TimeStepsMixin, cs.deco.Promotable)`\n\nA monthly time policy.\nPARTITION_FORMAT = 'YYYY-MM'\nARROW_SHIFT_PARAMS = {'months': 1}\n\n## Class `TimespanPolicyWeekly(ArrowBasedTimespanPolicy, TimespanPolicy, icontract._metaclass.DBC, HasEpochMixin, TimeStepsMixin, cs.deco.Promotable)`\n\nA weekly time policy.\nPARTITION_FORMAT = 'W'\nARROW_SHIFT_PARAMS = {'weeks': 1}\n\n## Class `TimespanPolicyYearly(ArrowBasedTimespanPolicy, TimespanPolicy, icontract._metaclass.DBC, HasEpochMixin, TimeStepsMixin, cs.deco.Promotable)`\n\nA annual time policy.\nPARTITION_FORMAT = 'YYYY'\nARROW_SHIFT_PARAMS = {'years': 1}\n\n## Class `TimeStepsMixin`\n\nMethods for an object with `start` and `step` attributes.\n\n## Class `TypeCode(builtins.str, cs.deco.Promotable)`\n\nA valid `array` typecode with convenience methods.\n\n*Method `TypeCode.__new__(cls, t)`*:\nReturn a new `TypeCode` instance from `t`, which may be:\n* a `str`: expected to be an `array` type code\n* `int`: `array` type code `q` (signed 64 bit)\n* `float`: `array` type code `d` (double float)\n\n## Function `tzfor(tzspec: Union[str, datetime.tzinfo, NoneType] = None) -> datetime.tzinfo`\n\nPromote the timezone specification `tzspec` to a `tzinfo` instance.\nIf `tzspec` is an instance of `tzinfo` it is returned unchanged.\nIf `tzspec` is omitted or the string `'local'` this returns\n`dateutil.tz.gettz()`, the local system timezone.\nOtherwise it returns `dateutil.tz.gettz(tzspec)`.\n\n# Release Log\n\n\n\n*Release 20230217*:\n* TimeSeriesFile.save_to: use atomic_filename() to create the updated file.\n* Other small fixes and updates.\n\n*Release 20220918*:\n* TimeSeriesMapping.as_pd_dataframe: rename `keys` to `df_data`, and accept either a time series key or a `(key,series)` tuple.\n* TimeSeriesMapping.as_pd_dataframe: default `key_map`: annotate columns with their original CSV headers if present.\n* TimeSeriesMapping.plot: rename `keys` to `plot_data` as for `as_pd_dataframe`, add `stacked` and `kind` parameters so that we can derive `kind` from `stacked`.\n* as_datetime64s: apply optional utcoffset timeshift.\n* Plumb optional pad=False option through data, data2, as_pd_series.\n* New PlotSeries namedtuple holding a label, a series and an extra dict as common carrier for data which will get plotted.\n\n*Release 20220805*:\n* Rename @plotrange to @timerange since it is not inherently associated with plotting, support both methods and functions.\n* print_figure, save_figure and saved_figure now moved to cs.mplutils.\n* plot_events: use the utcoffset parameter.\n* TimeSeriesBaseCommand.cmd_plot: new --bare option for unadorned plots.\n\n*Release 20220626*:\n* New TypeCode(str) representing an array type code with associated properties and methods.\n* New TimeSeriesMapping.read_csv wrapper for pandas.read_csv to import a CSV file into a TimeSeriesMapping.\n* TimeSeriesFile.save,save_to: open the file for overwrite, not truncate, by default.\n* TimeSeriesFile: new setitems(whens,values) method for fast batch updates.\n* as_datetime64s: accept optional units parameter to trade off range versus precision.\n* @plotrange: accept new optional tz/utcoffset parameters and pass the resulting utcoffset to the wrapped function along with a huge disclaimer about timezones and plots.\n* New tzfor(tzspec) to return a tzinfo object from dateutil.tz.gettz, accepts 'local' for the system local default timezone.\n* TimeSeriesMapping.as_pd_dataframe: accept optional utcoffset to skew the index for the DataFrame, used for time presentation in plots.\n* New TimeSeriesMapping.to_csv(start,stop,f) method to write CSV data between start and stop to a file via DataFrame.to_csv.\n* TimeSeriesBaseCommand: new parsetime and poptime methods, cmd_plot: update to expect start-time and optional stop-time.\n\n*Release 20220606*:\nInitial PyPI release.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/cameron_simpson/css/commits/all",
    "keywords": "python3",
    "license": "GNU General Public License v3 or later (GPLv3+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cs.timeseries",
    "package_url": "https://pypi.org/project/cs.timeseries/",
    "platform": null,
    "project_url": "https://pypi.org/project/cs.timeseries/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/cameron_simpson/css/commits/all",
      "URL": "https://bitbucket.org/cameron_simpson/css/commits/all"
    },
    "release_url": "https://pypi.org/project/cs.timeseries/20230217/",
    "requires_dist": [
      "arrow",
      "cs.binary (>=20230212)",
      "cs.buffer (>=20230212.2)",
      "cs.cmdutils (>=20230212)",
      "cs.configutils (>=20220430)",
      "cs.context (>=20230212)",
      "cs.csvutils (>=20220606)",
      "cs.deco (>=20221106.1)",
      "cs.fileutils (>=20210731)",
      "cs.fs (>=20221221)",
      "cs.fstags (>=20230217)",
      "cs.lex (>=20230217.1)",
      "cs.logutils (>=20230212)",
      "cs.mappings (>=20220912.4)",
      "cs.mplutils (>=20220918)",
      "cs.pfx (>=20221118)",
      "cs.progress (>=20230212)",
      "cs.py.modules (>=20220606)",
      "cs.resources (>=20230217)",
      "cs.result (>=20230212)",
      "cs.upd (>=20230217)",
      "icontract",
      "matplotlib",
      "numpy",
      "python-dateutil",
      "typeguard",
      "pandas ; extra == 'pandas'"
    ],
    "requires_python": "",
    "summary": "Efficient portable machine native columnar file storage of time series data for double float and signed 64-bit integers.",
    "version": "20230217",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16900674,
  "releases": {
    "20220606": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49ff13cc0db89032360851cf09ebb36c8d98872fd28937eac7fec91b35f3954f",
          "md5": "73a4f7984773299d92f04b697c9e7ebf",
          "sha256": "c7c3b7701f479afdde5971f6c4a2587ddfcb2a8fad6008ce277f481064b17e67"
        },
        "downloads": -1,
        "filename": "cs.timeseries-20220606-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73a4f7984773299d92f04b697c9e7ebf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32200,
        "upload_time": "2022-06-06T10:07:19",
        "upload_time_iso_8601": "2022-06-06T10:07:19.391087Z",
        "url": "https://files.pythonhosted.org/packages/49/ff/13cc0db89032360851cf09ebb36c8d98872fd28937eac7fec91b35f3954f/cs.timeseries-20220606-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d04c6bcb2cf9f6441ac23ba1f67f8b43c077ca20e1821b6de863d5b1bf1a4a98",
          "md5": "63b1bb7216807f0ff309af0793c76c0c",
          "sha256": "3d572f4a4f1b348a0227e9b63a1438bdfc32c095acdef29270e9a53cf99ce550"
        },
        "downloads": -1,
        "filename": "cs.timeseries-20220606.tar.gz",
        "has_sig": false,
        "md5_digest": "63b1bb7216807f0ff309af0793c76c0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 43269,
        "upload_time": "2022-06-06T10:07:22",
        "upload_time_iso_8601": "2022-06-06T10:07:22.913017Z",
        "url": "https://files.pythonhosted.org/packages/d0/4c/6bcb2cf9f6441ac23ba1f67f8b43c077ca20e1821b6de863d5b1bf1a4a98/cs.timeseries-20220606.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220626": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01380c955fd308a1a25ff59ae201a0981353860df97faca306540b3d24d87c3a",
          "md5": "6fba13bd01bf1295e35665ac30fe4494",
          "sha256": "e5f7b14eb55d441c15f5fbb1d8c10ce1672bdc15402ccb57683b022172172e99"
        },
        "downloads": -1,
        "filename": "cs.timeseries-20220626-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6fba13bd01bf1295e35665ac30fe4494",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38768,
        "upload_time": "2022-06-26T09:51:28",
        "upload_time_iso_8601": "2022-06-26T09:51:28.573960Z",
        "url": "https://files.pythonhosted.org/packages/01/38/0c955fd308a1a25ff59ae201a0981353860df97faca306540b3d24d87c3a/cs.timeseries-20220626-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "758a09e452c983d81514bce2b8c2726515b70b5109e0475685e917cc25b8cae0",
          "md5": "70a462e3b6afab795906372af2096300",
          "sha256": "e86b25de61ffb53fa216411c4fb55d9171b9138eeceb8b1cff8f5649002f615c"
        },
        "downloads": -1,
        "filename": "cs.timeseries-20220626.tar.gz",
        "has_sig": false,
        "md5_digest": "70a462e3b6afab795906372af2096300",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61199,
        "upload_time": "2022-06-26T09:51:30",
        "upload_time_iso_8601": "2022-06-26T09:51:30.931633Z",
        "url": "https://files.pythonhosted.org/packages/75/8a/09e452c983d81514bce2b8c2726515b70b5109e0475685e917cc25b8cae0/cs.timeseries-20220626.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220805": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "14c61a8963edf5e6842e5570e4cb804ab0eb84372b07727ed4874c2666960bcf",
          "md5": "43b9c6c3aef8037b903d8cad946c46d3",
          "sha256": "384a4e543e9017375aaec1d3a817878c368973b9093bcd1aeb2be32c1e0172b5"
        },
        "downloads": -1,
        "filename": "cs.timeseries-20220805-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43b9c6c3aef8037b903d8cad946c46d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 38525,
        "upload_time": "2022-08-05T00:09:09",
        "upload_time_iso_8601": "2022-08-05T00:09:09.248059Z",
        "url": "https://files.pythonhosted.org/packages/14/c6/1a8963edf5e6842e5570e4cb804ab0eb84372b07727ed4874c2666960bcf/cs.timeseries-20220805-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b86f2c71af93b1f44ef7197a50705a03d661c178ac41bbfa55009acf25e343d",
          "md5": "9f4c208b17478baac034874c74539f9c",
          "sha256": "e904c061a0cd8c06428a2602306f478e4b8cc367097f99d4aed598305c41275c"
        },
        "downloads": -1,
        "filename": "cs.timeseries-20220805.tar.gz",
        "has_sig": false,
        "md5_digest": "9f4c208b17478baac034874c74539f9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 61296,
        "upload_time": "2022-08-05T00:09:11",
        "upload_time_iso_8601": "2022-08-05T00:09:11.681176Z",
        "url": "https://files.pythonhosted.org/packages/4b/86/f2c71af93b1f44ef7197a50705a03d661c178ac41bbfa55009acf25e343d/cs.timeseries-20220805.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220918": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e463d3a97dd317295c3d9cf794da915a81001f41a19e7d1549f927ba77294e6",
          "md5": "2dba3e5a2e647ae1ca8c5dfaf50bd834",
          "sha256": "5695f4f0a3c0f07e83313fe419ae481fec22841fe59bd6f8c27a62c9cc9385b4"
        },
        "downloads": -1,
        "filename": "cs.timeseries-20220918-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2dba3e5a2e647ae1ca8c5dfaf50bd834",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 39740,
        "upload_time": "2022-09-18T00:47:32",
        "upload_time_iso_8601": "2022-09-18T00:47:32.225927Z",
        "url": "https://files.pythonhosted.org/packages/9e/46/3d3a97dd317295c3d9cf794da915a81001f41a19e7d1549f927ba77294e6/cs.timeseries-20220918-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf762f15c473484a3f73e8a43a1661d3b1742f7026d3458243709b62e7f7e759",
          "md5": "f0cb0891b47b7bfdec5380ab834bc842",
          "sha256": "a2793ca6e500613aa8649c77e16219526e942ff2b30cc02563ca865e90b03d68"
        },
        "downloads": -1,
        "filename": "cs.timeseries-20220918.tar.gz",
        "has_sig": false,
        "md5_digest": "f0cb0891b47b7bfdec5380ab834bc842",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63368,
        "upload_time": "2022-09-18T00:47:34",
        "upload_time_iso_8601": "2022-09-18T00:47:34.402645Z",
        "url": "https://files.pythonhosted.org/packages/bf/76/2f15c473484a3f73e8a43a1661d3b1742f7026d3458243709b62e7f7e759/cs.timeseries-20220918.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20230217": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2775610bb4b2b2893c5dee5a3b012080cb62d6b53c118c1982296368a68eda61",
          "md5": "e7279a6a3d931fd0d7a17d2b7b46a1a2",
          "sha256": "76a6f08c8245f5bd7536a51efd22a8a5c8054b36beca8f040dfb280e9e97b76b"
        },
        "downloads": -1,
        "filename": "cs.timeseries-20230217-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7279a6a3d931fd0d7a17d2b7b46a1a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 39936,
        "upload_time": "2023-02-17T09:34:46",
        "upload_time_iso_8601": "2023-02-17T09:34:46.327148Z",
        "url": "https://files.pythonhosted.org/packages/27/75/610bb4b2b2893c5dee5a3b012080cb62d6b53c118c1982296368a68eda61/cs.timeseries-20230217-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81e40a02e09997663e6a2bd2a384722e3c088479176919c0ca7186a6be657107",
          "md5": "9a668d7b847ab872b594c38ea34ab1fb",
          "sha256": "639af930a0b6e6ebdbcbfe229562d41360f904e82e136e68c1d03565ad94b223"
        },
        "downloads": -1,
        "filename": "cs.timeseries-20230217.tar.gz",
        "has_sig": false,
        "md5_digest": "9a668d7b847ab872b594c38ea34ab1fb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 64136,
        "upload_time": "2023-02-17T09:34:49",
        "upload_time_iso_8601": "2023-02-17T09:34:49.480649Z",
        "url": "https://files.pythonhosted.org/packages/81/e4/0a02e09997663e6a2bd2a384722e3c088479176919c0ca7186a6be657107/cs.timeseries-20230217.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2775610bb4b2b2893c5dee5a3b012080cb62d6b53c118c1982296368a68eda61",
        "md5": "e7279a6a3d931fd0d7a17d2b7b46a1a2",
        "sha256": "76a6f08c8245f5bd7536a51efd22a8a5c8054b36beca8f040dfb280e9e97b76b"
      },
      "downloads": -1,
      "filename": "cs.timeseries-20230217-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e7279a6a3d931fd0d7a17d2b7b46a1a2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 39936,
      "upload_time": "2023-02-17T09:34:46",
      "upload_time_iso_8601": "2023-02-17T09:34:46.327148Z",
      "url": "https://files.pythonhosted.org/packages/27/75/610bb4b2b2893c5dee5a3b012080cb62d6b53c118c1982296368a68eda61/cs.timeseries-20230217-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81e40a02e09997663e6a2bd2a384722e3c088479176919c0ca7186a6be657107",
        "md5": "9a668d7b847ab872b594c38ea34ab1fb",
        "sha256": "639af930a0b6e6ebdbcbfe229562d41360f904e82e136e68c1d03565ad94b223"
      },
      "downloads": -1,
      "filename": "cs.timeseries-20230217.tar.gz",
      "has_sig": false,
      "md5_digest": "9a668d7b847ab872b594c38ea34ab1fb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 64136,
      "upload_time": "2023-02-17T09:34:49",
      "upload_time_iso_8601": "2023-02-17T09:34:49.480649Z",
      "url": "https://files.pythonhosted.org/packages/81/e4/0a02e09997663e6a2bd2a384722e3c088479176919c0ca7186a6be657107/cs.timeseries-20230217.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}