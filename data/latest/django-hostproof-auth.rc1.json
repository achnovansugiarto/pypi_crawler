{
  "info": {
    "author": "Jorge Pintado",
    "author_email": "j.pintado89@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "django-hostproof-auth\n======================\n\n.. image:: https://travis-ci.org/jpintado/django-hostproof-auth.png?branch=master\n    :target: https://travis-ci.org/jpintado/django-hostproof-auth\n\nSecure Host-Proof authentication backend for Django-powered sites.\n\nThe password is never transmitted to the server. The server is limited to persisting and retrieving whatever encrypted data is sent to it, and never actually accesses the sensitive data in its plain form.\n\nOverview\n========\n\nRequirements\n------------\n\n- Python 2.6, 2.7, 3.2 or 3.3\n\n- Django (1.6+)\n\n- rsa\n\nInstallation\n============\n\nInstall package\n---------------\n\n- Clone the repository::\n\n    git clone https://github.com/jpintado/django-hostproof-auth.git\n\n- Install the package::\n\n    python setup.py install\n\nYou could require root permissions to execute the previous command.\n    \n\nConfiguration\n-----------\n\n- In **settings.py**:\n\n  - Add ``hostproof_auth`` to ``INSTALLED_APPS``.\n\n  - Add the authentication backend to your application::\n\n      AUTH_USER_MODEL = 'hostproof_auth.User'\n\n      AUTHENTICATION_BACKENDS = (\n          'hostproof_auth.auth.ModelBackend',\n      )\n\n- Include *hostproof_auth* in your **urls.py** with some prefix::\n\n      urlpatterns = patterns('',\n          # ... snip ...\n          url(r'^auth/', include('hostproof_auth.urls')),\n          # ... snip ...\n      )\n\nUsage\n=====\n\n*django-hostproof-auth* provides a JavaScript client to register and login users in your django application. \nYou can easily access to this client in your templates by including the following::\n\n  {% load staticfiles %}\n\n  <script type=\"text/javascript\" src=\"{% static \"hostproof_auth/hostproof_auth.js\" %}\"></script>\n\nThe JavaScript client uses the SJCL library and Jquery_, so in case you don't have already in your project you can use the version included in the package (Jquery 2.0.3):\n\n.. _Jquery: http://www.jquery.com/\n\n::\n\n  <script type=\"text/javascript\" src=\"{% static \"hostproof_auth/sjcl.js\" %}\"></script>\n  <script type=\"text/javascript\" src=\"{% static \"hostproof_auth/jquery-2.0.3.min.js\" %}\"></script>\n  \nThese are examples about the use of this client that you can directly include in your login/registration templates:\n\n**Registration**::\n\n    {% load staticfiles %}\n\n    <script type=\"text/javascript\" src=\"{% static \"hostproof_auth/sjcl.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"hostproof_auth/jquery-2.0.3.min.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"hostproof_auth/hostproof_auth.js\" %}\"></script>\n    <script>\n        function doRegistration() {\n            username = $(\"#id_username\").val();\n            email = $(\"#id_email\").val();\n            password = $(\"#id_password\").val();\n            $.when(\n                register(\"{% url 'hostproof_auth_register' %}\", username, email, password)\n            ).done(function(d) {\n                console.log(d);\n                //Registration completed. Redirect to desired page.\n            }).fail(function(d) {\n                console.log(d);\n                //Registration completed. Show desired message.\n            });\n        }\n    </script>\n\n    <input id=\"id_username\" type=\"text\" name=\"username\" maxlength=\"100\" />\n    <input id=\"id_email\" type=\"text\" name=\"email\" maxlength=\"100\" />\n    <input id=\"id_password\" type=\"password\" name=\"password\" maxlength=\"100\" /></p>\n    <button onclick=\"doRegistration()\">Login</button>\n  \n**Login**::\n\n    {% load staticfiles %}\n\n    <script type=\"text/javascript\" src=\"{% static \"hostproof_auth/sjcl.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"hostproof_auth/jquery-2.0.3.min.js\" %}\"></script>\n    <script type=\"text/javascript\" src=\"{% static \"hostproof_auth/hostproof_auth.js\" %}\"></script>\n    <script>\n        function doLogin() {\n            username = $(\"#id_username\").val();\n            password = $(\"#id_password\").val();\n            $.when(\n                login(\"{% url 'hostproof_auth_challenge' %}\", username, password)\n            ).done(function(d) {\n                console.log(d);\n                //Login completed. Redirect to desired page.\n            }).fail(function(d){\n                console.log(d);\n                //Login Failed. Show desired message.\n            });\n        }\n    </script>\n\n    <input id=\"id_username\" type=\"text\" name=\"username\" />\n    <input id=\"id_password\" type=\"password\" name=\"password\" />\n    <button onclick=\"doLogin()\">Login</button>\n\nAdvanced Usage\n==============\n\nYou may create your own JavaScript client, or create a client in any other language. In that case, you will need to make the necessary requests to register and login users. Below is the documentation for these API requests:\n\nRegistration\n------------\n\n- POST request to the ``hostproof_auth_register`` URL (typically something like */auth/register/*) with the parameters:\n\n  - username\n  - email\n  - encrypted_challenge\n  - challenge\n  \n  The client application needs to generate a random string as challenge, and encrypt that string using a secure algorith (for example, AES-256) with the user password to generate the encrypted challenge.\n\n  Example::\n  \n    username=foobar&email=foobar@domain.com&challenge=randomstring&encrypted_challenge=U2FsdGVkX19ED2i2M8uE3AySNJyKzw8SXtru9JQbNmo=\n\nLogin\n-----\n\n- GET request to the ``challenge`` URL (typically something like */auth/challenge/*) with the parameters.\n\n  - username\n  - format (OPTIONAL): specifies the response format. Supported \"text\" and \"json\". The default value is \"text\".\n\n  Example::\n  \n    /challenge/?username=foobar&format=json\n\n  Response::\n  \n    {\n      \"encrypted_challenge\" : \"U2FsdGVkX19ED2i2M8uE3AySNJyKzw8SXtru9JQbNmo=\"\n    }\n    \n- POST request to the ``challenge`` URL with the parameters:\n\n  - username\n  - challenge: the challenge after the decryption with the user password.\n  - format (OPTIONAL): specifies the response format. Supported \"text\" and \"json\". The default value is \"text\".\n\n  The client application needs to decrypt the encrypted_challenge using the password, and send the original challenge as response to be authenticated.\n  \n  Example::\n\n    username=foobar&challenge=randomstring&format=json\n\n  Response::\n    \n    {\n        \"rsa_public\": \"-----BEGIN RSA PUBLIC KEY-----\\nMEgCQQC6ZV2lMzO50HoJhznNat7pB+cVwY91Qpn58iIC8X4QleNatgyqJfZzu3RdwQQJDr2uUv+sXdEm+wYGBXg0gqZjAgMBAAE=\\n-----END RSA PUBLIC KEY-----\\n\"\n    }",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jpintado/django-hostproof-auth",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django_hostproof_auth",
    "package_url": "https://pypi.org/project/django_hostproof_auth/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django_hostproof_auth/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "https://github.com/jpintado/django-hostproof-auth"
    },
    "release_url": "https://pypi.org/project/django_hostproof_auth/0.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Secure Host-Proof authentication backend for Django-powered sites",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 966418,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37f4c1df3ce096249844afc915f01a590d8d585324bd532dccefe5615acb817d",
          "md5": "9d6c2f9776d1e0a27a841d392d22f37d",
          "sha256": "6ead17614ccce04e0946b30ff0039509add28dfc26dda31cabf43cbe2579bd30"
        },
        "downloads": -1,
        "filename": "django_hostproof_auth-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9d6c2f9776d1e0a27a841d392d22f37d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50029,
        "upload_time": "2014-01-12T04:19:43",
        "upload_time_iso_8601": "2014-01-12T04:19:43.388644Z",
        "url": "https://files.pythonhosted.org/packages/37/f4/c1df3ce096249844afc915f01a590d8d585324bd532dccefe5615acb817d/django_hostproof_auth-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "37f4c1df3ce096249844afc915f01a590d8d585324bd532dccefe5615acb817d",
        "md5": "9d6c2f9776d1e0a27a841d392d22f37d",
        "sha256": "6ead17614ccce04e0946b30ff0039509add28dfc26dda31cabf43cbe2579bd30"
      },
      "downloads": -1,
      "filename": "django_hostproof_auth-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9d6c2f9776d1e0a27a841d392d22f37d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 50029,
      "upload_time": "2014-01-12T04:19:43",
      "upload_time_iso_8601": "2014-01-12T04:19:43.388644Z",
      "url": "https://files.pythonhosted.org/packages/37/f4/c1df3ce096249844afc915f01a590d8d585324bd532dccefe5615acb817d/django_hostproof_auth-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}