{
  "info": {
    "author": "tuxmonk",
    "author_email": "30048080+tuxmonk@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "<img src=\"https://raw.githubusercontent.com/tuxmonk/pupdb/master/logo.png\" alt=\"PupDB Logo\" width=\"400\"/>\n\n[![Build Status](https://travis-ci.org/tuxmonk/pupdb.svg?branch=master)](https://travis-ci.org/tuxmonk/pupdb) [![codecov](https://codecov.io/gh/tuxmonk/pupdb/branch/master/graph/badge.svg)](https://codecov.io/gh/tuxmonk/pupdb) [![PyPI version fury.io](https://badge.fury.io/py/pupdb.svg)](https://pypi.python.org/pypi/pupdb/) [![Supported Python Versions](https://img.shields.io/pypi/pyversions/pupdb.svg)](https://pypi.python.org/pypi/pupdb/)\n\n## What is it?\n\nPupDB is an ernest attempt to create a simple file-based key-value database written in Python.\n\n## Why PupDB?\n\nThe objective behind the creation of PupDB is to create a database system which performs simple persistence operations well and data can be accessed with a minimalist, easy-to-use API with least configuration.\n\n### PupDB is the best choice when:\n\n1. You need a simple NoSQL data store with an interface as simple as a Python `dict`, and want to start storing and retrieving data within a few minutes.\n2. You want to create an application without bothering much about configuration and setup for storing data.\n3. Your database is not very huge i.e. not greater than a few megabytes of data.\n\n### When not to use PupDB:\n\n1. You want to perform advanced queries on your data.\n2. Your database is larger than a few megabytes of data.\n3. You want a database software that supports advanced capabilities like indexing, partitioning etc.\n\n## Salient Features\n\n1. **Multi-processing support**: Same database file can be used across multiple processes concurrently.\n2. **Mult-threading support**: Same database file (with separate `PupDB` instance per thread) can be used concurrently.\n3. **REST-based HTTP Interface**: Apart from using it as a `python` package, you can also use PupDB via a `flask`-based HTTP interface. This way you can use PupDB with programming languages other than Python.\n\n## Installation\n\nPupDB can be installed using `pip`:\n\n```bash\npip install pupdb\n```\n\n## Basic API Documentation and Usage\n\nPupDB can be instantiated as follows:\n```python\nfrom pupdb.core import PupDB\n\n# Specify database file path as an argument to the PupDB constructor. That's it.\ndb = PupDB('db.json')\n```\n\n1. `set(key, value)`: Stores the `value` mapped to `key` in the database file.\n```python\ndb.set('test_key', 'test_value')\n```\n2. `get(key)`: Returns the `value` mapped to `key` in the database file. Returns `None` if `key` is not found.\n```python\ndb.get('test_key')\n```\n3. `remove(key)`: Removes the `key` from the database file. Raises a `KeyError` if `key` is not found in the database file.\n```python\n# Remove the key `test_key` from the db.\ndb.remove('test_key')\n\n# Try doing the same again and it'll raise a `KeyError`,\n# as the key has already been deleted from the db in the above step.\ndb.remove('test_key')\n```\n4. `keys()`: Returns the keys present in the database file. Return type is `list` in Python 2 and [Dictionary view object](https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict-views) (similar to [`dict.keys()`](https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict.keys)) in Python 3.\n```python\n# Python 2\nprint db.keys() # This will print ['key1', ...]\n\n# Python 3\nprint(list(db.keys())) # This will print ['key1', ...]\n```\n5. `values()`: Returns the values of all keys present in the database file. Return type is `list` for Python 2 and [Dictionary view object](https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict-views) (similar to [`dict.values()`](https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict.values)) in Python 3.\n```python\n# Python 2\nprint db.values() # This will print ['value1', ...]\n\n# Python 3\nprint(list(db.values())) # This will print ['value1', ...]\n```\n6. `items()`: Returns the values of all keys present in the database file. Return type is `list` for Python 2 and [Dictionary view object](https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict-views) (similar to [`dict.items()`](https://docs.python.org/3.8/library/stdtypes.html?highlight=keys#dict.items)) in Python 3.\n```python\n# Python 2\nprint db.items() # This will print [('key1', 'value1'), ...]\n\n# Python 3\nprint(list(db.items())) # This will print [('key1', 'value1'), ...]\n```\n7. `dumps()`: Returns a `json` dump of the entire database file sorted by key.\n```python\ndb.dumps() # This will print the database json string.\n```\n8. `truncate_db()`: Removes all data from the database file i.e. truncates the database file.\n```python\ndb.truncate_db()\nprint(db) # Will print an empty database dict '{}', as the database has been truncated.\n```\n\n## Using the PupDB HTTP/REST Interface\n\n**Using the HTTP/REST Interface, all PupDB-related operations can be performed without using PupDB as a Python package. As a result, PupDB can be used in any programming language that can make HTTP requests.**\n\nTo start PupDB's `gunicorn`-based `flask` server:\n\n```python\nfrom pupdb.server import start_http_server\n\n# Start the gunicorn server (with 4 worker threads).\nstart_http_server()\n```\n\nThe server will listen to local port 4000. The server will be available at `http://localhost:4000`.\n\n### HTTP API Endpoints\n\n1. `/get?key=<key-goes-here>` (Method: `GET`): This API endpoint is an interface to PupDB's `get()` method. e.g.:\n\n```bash\ncurl -XGET http://localhost:4000/get?key=test\n```\n\nThe above `curl` request will fetch the result for key `test`.\n\n2. `/set` (Method: `POST`): This API endpoint is an interface to PupDB's `set()` method. e.g.:\n\n```bash\ncurl -XPOST http://localhost:4000/set -H 'Content-Type: application/json' -d '{\"key\": \"test\", \"value\": \"1234\"}'\n```\n\nThe above `curl` request will set the value `1234` to key `test` in the database.\n\n3. `/remove/<key-goes-here>` (Method: `DELETE`): This API endpoint is an interface to PupDB's `remove()` method. e.g.:\n\n```bash\ncurl -XDELETE http://localhost:4000/remove/test\n```\n\nThe above `curl` request will remove the key `test` in the database. It returns a `404 Not Found` if the key does not exist in the database.\n\n4. `/keys` (Method: `GET`): This API endpoint is an interface to PupDB's `keys()` method. e.g.:\n\n```bash\ncurl -XGET http://localhost:4000/keys\n```\n\nThe above `curl` request will return a payload containing the `list` of keys in the database.\n\n5. `/values` (Method: `GET`): This API endpoint is an interface to PupDB's `values()` method. e.g.:\n\n```bash\ncurl -XGET http://localhost:4000/values\n```\n\nThe above `curl` request will return a payload containing the `list` of values of all keys in the database.\n\n6. `/items` (Method: `GET`): This API endpoint is an interface to PupDB's `items()` method. e.g.:\n\n```bash\ncurl -XGET http://localhost:4000/items\n```\n\nThe above `curl` request will return a payload containing the `list` of `[key, value]` pairs in the database.\n\n7. `/dumps` (Method: `GET`): This API endpoint is an interface to PupDB's `dumps()` method. e.g.:\n\n```bash\ncurl -XGET http://localhost:4000/dumps\n```\n\nThe above `curl` request will return a payload containing the string dump of the entire database.\n\n7. `/truncate-db` (Method: `POST`): This API endpoint is an interface to PupDB's `truncate_db()` method. e.g.:\n\n```bash\ncurl -XPOST http://localhost:4000/truncate-db\n```\n\nThe above `curl` request will truncate i.e. remove all key-value pairs from the database.\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning. For the versions available,\nsee the\n[tags on this repository](https://github.com/tuxmonk/pupdb/tags).\n\n## License\n\nThis project is licensed under the MIT License - see the\n[LICENSE.txt](https://github.com/tuxmonk/pupdb/blob/master/LICENSE.txt) file for more details.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/tuxmonk/pupdb/archive/master.zip",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tuxmonk/pupdb",
    "keywords": "file-based,key-value-store,python,database,rest-api,process-safe,cross-language",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pupdb",
    "package_url": "https://pypi.org/project/pupdb/",
    "platform": "",
    "project_url": "https://pypi.org/project/pupdb/",
    "project_urls": {
      "Download": "https://github.com/tuxmonk/pupdb/archive/master.zip",
      "Homepage": "https://github.com/tuxmonk/pupdb"
    },
    "release_url": "https://pypi.org/project/pupdb/0.1.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A simple file-based key-value database written in Python.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6214473,
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c64a722e74aa68925b08095c5f6eea5b1aaefd62ba9eaebc785ff731ce0a048a",
          "md5": "b6c65ddc2ab2408607668f6c4598cdcb",
          "sha256": "e43985218492208a793f4c022625b373b3e6c16acbddfb6c27505d57e4e16593"
        },
        "downloads": -1,
        "filename": "pupdb-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b6c65ddc2ab2408607668f6c4598cdcb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6654,
        "upload_time": "2019-11-28T14:36:16",
        "upload_time_iso_8601": "2019-11-28T14:36:16.111691Z",
        "url": "https://files.pythonhosted.org/packages/c6/4a/722e74aa68925b08095c5f6eea5b1aaefd62ba9eaebc785ff731ce0a048a/pupdb-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c64a722e74aa68925b08095c5f6eea5b1aaefd62ba9eaebc785ff731ce0a048a",
        "md5": "b6c65ddc2ab2408607668f6c4598cdcb",
        "sha256": "e43985218492208a793f4c022625b373b3e6c16acbddfb6c27505d57e4e16593"
      },
      "downloads": -1,
      "filename": "pupdb-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "b6c65ddc2ab2408607668f6c4598cdcb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6654,
      "upload_time": "2019-11-28T14:36:16",
      "upload_time_iso_8601": "2019-11-28T14:36:16.111691Z",
      "url": "https://files.pythonhosted.org/packages/c6/4a/722e74aa68925b08095c5f6eea5b1aaefd62ba9eaebc785ff731ce0a048a/pupdb-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}