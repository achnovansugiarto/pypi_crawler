{
  "info": {
    "author": "Mathew Moon",
    "author_email": "mmoon@quinovas.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "============================\ncognito-assume-role\n============================\n\n\nCurrently supports USER_SRP_AUTH and USER_PASSWORD_AUTH using enhanced Cognito auth flow.\nCustom auth flows or administrative auth are not currently supported although I suppose\nyou could monkey patch the needed code. It was written using only public methods exposed by the boto3/botocore\nAPI's to help ensure that changes to boto3 won't break any (what would be otherwise) monkey patched code.\nThis should also maintain the ability to use this library for your boto3 calls that are not using Cognito within\nthe same script by simply passing a normal boto3 client credential argument.\n\n**USAGE**:\nThis module can insert a botocore.credentials.CredentialProvider into the provider chain.\nUsing this provider we can assume an IAM role through get_credentials_for_identity(). To do this\nwe provide three functions:\n- client (wraps boto3.client())\n- resource (wraps boto3.resource())\n- Session (wraps boto3.session.Session())\n\nAll three of these functions accept all normal boto3 args and kwargs plus some that are specific to this module.\nWe provide three ways of providing the initial credentials.\n\n\n**Env vars**\nThese will take affect before any other credential provider, including the standard env provider that looks for AWS_SECRET_ACCESS_KEY and AWS_ACCESS_KEY_ID.\nIf one or more of the following non-optional variables are found in environ then we will automatically go to env based credential mapping\n\n- COGNITO_USERNAME\n- COGNITO_PASSWORD\n- COGNITO_USER_POOL_ID\n- COGNITO_IDENTITY_POOL_ID\n- COGNITO_APP_ID\n- COGNITO_METADATA (Deserialized and passed as ClientMetadata in boto3.client(\"cognito-idp\").initiate_auth()) - Optional\n- AWS_ROLE_ARN - Optional\n\n\n**Profile**\nCredential file locations, if not specified, will be resolved in the order of <argument to client>, \"COGNITO_CREDENTIALS_FILE\", \"~/.aws/cognito_credentials\".\nConfig files take the following form:\n\n.. code-block:: toml\n\n  [default]\n  username=myusername\n  password=***********\n  app_id=1234567890\n  user_pool_id=abcdefg\n  identity_pool_id=us-east-1:1234567890\n  region=us-east-1\n  metadata={\"foo\": \"bar\"}\n  auth_type=user_srp\n\n\nAll values except for region and metadata are required if using a profile. Using a profile is done by passing the kwarg \"cognito_profile=<profile name>\" to client, Session, or resource.\n\n**Direct configuration**\n\n.. code-block:: json\n\n  {\n    \"username\": \"myusername\",\n    \"password\": \"***********\",\n    \"app_id\": \"1234567890\",\n    \"user_pool_id\": \"abcdefg\",\n    \"identity_pool_id\": \"us-east-1:1234567890\",\n    \"region\": \"us-east-1\",\n    \"metadata\": {\"foo\": \"bar\"},\n    \"auth_type\": \"user_srp\"\n  }\n\nSame rules apply for required values as when using a profile. Direct configuration is done by passing the config dictionary to kwarg cognito_config when creating a client, resource, or Session.\nNote that cognito_profile and cognito_config are mutually exclusive. Trying to use both at once will raise an Assertion exception.\n\n\n**Auth types**\nThe client, resource, and Session functions also accept an argument of auth_type. This can be \"user_srp\" (default) or \"user_password\".\n\n\n**Accessing Cognito tokens from a Session**\nIf creating a Session directly the cognito id, refresh, and access tokens, as well as the expires time are available as properties on the Session object.\nTokens are stored in memory by default, but passing a file name as \"token_cache=/file/path.txt\" into Session() will write cause the tokens to be written to the specified\nfile as JSON. Passing a path to a file that does not exist will raise a FileNotFoundError. Passing a path to a file that is not writeable will raise OSError. Properties\nto access tokens:\n\n- Session().id_token\n- Session().access_token\n- Session().refresh_token\n- Session().token_expires\n- Session().cognito_tokens (All of the above in a dict)\n\nBecause of how boto3 generates clients there is no way to access the \"parent\" session. This means that to use this feature you will need to create a Session()\nobject and then create your clients/resources off of that Session(). Example:\n\n.. code-block:: python\n\n  from cognito_assume_role import Session\n\n  session = Session()\n  s3 = session.s3()\n  s3.list_buckets()\n  print(session.token_expires)\n\n  # Outputs 2020-09-19T23:17:28CDT\n\n\n.. code-block:: python\n\n  from cognito_assume_role import TokenFetcher\n\n  s = TokenFetcher()\n  # Strings shortened for brevity\n  print(s.id_token[-10:-1])\n  print(s.access_token[-10:-1])\n  print(s.refresh_token[-10:-1])\n  print(s.expires)\n\n  \"\"\"\n  Results in:\n    6xAb_vMKv\n    4Ruc_TB_h\n    m3Htft_Op\n    2020-09-19T05:16:31\n  \"\"\"\n\n\n  **Getting Cognito credential tokens without a role**\n  If you don't want to assume a role but would still like to access cognito id tokens directly, for instance to make Appsync calls using the requests library, you\n  can use the TokenFetcher class. It provides the following properties:\n\n  - tokens (dict): A dictionary containing id_token, access_token, token_expires, and refresh_token\n  - id_token\n  - access_token\n  - refresh_token\n  - token_expires\n\n  Methods:\n  - fetch(): Updates and returns self.tokens\n\n  All properties are available upon instantiation. The constructor accepts the same kwargs as Session(), along with option \"server (bool)\". Setting \"server=True\" will start a background process to keep\n  tokens refreshed automatically, which means that your tokens will always be up to date.\n\n  **Example**\n\n  .. code-block:: python\n\n    from cognito_assume_role import TokenFetcher\n\n    cognito_credentials = TokenFetcher()\n    print(cognito_credentials)\n\n    print(cognito_credentials.id_token)\n    print(cognito_credentials.access_token)\n    print(cognito_credentials.token_expires)\n    print(cognito_credentials.refresh_token)\n\n\n\n\n\n**Creating a client that uses a config**\n\n.. code-block:: python\n\n  from cognito_assume_role import client\n\n  client = boto3.client(\"s3\", profile=\"my_profile\")\n  client.list_buckets()\n\n\n**Using resource with env vars and specifying auth_type and region**\n\n.. code-block:: python\n\n  from cognito_assume_role import resource\n\n  resource = boto3.resource(\"s3\", auth_type=\"user_password\", region_name=\"us-east-2\")\n  resource.create_bucket(Bucket=\"my-file-dump-woot-woot\")\n\n\n**Creating a session that we can reuse for multiple clients**\n\n.. code-block:: python\n\n  from cognito_assume_role import Session\n  session = Session(auth_type=\"user_srp\", region_name=\"us-east-2\")\n  s3 = session.client(\"s3\")\n  dynamo = resource(\"dynamodb\")\n  table = dynamo.Table(\"my_table\")\n\n\n**Precedence of CredentialProviders**\nThe order of resolution for credential providers remains unchanged except for setting environment variables for Cognito will take affect\nbefore any AWS credential environment variables.\n\n**Precedence of arguments**\nAny value that can be defined in either an environment variable, explicitly passed as a kwarg ( passed to client, resource, or Session)\nor can be part of a config or profile is resolved in the following order:\n\n- explicit arguments\n- specified by config or profile\n- environment variables\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/QuiNovas/cognito-assume-role",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cognito-assume-role",
    "package_url": "https://pypi.org/project/cognito-assume-role/",
    "platform": "",
    "project_url": "https://pypi.org/project/cognito-assume-role/",
    "project_urls": {
      "Homepage": "https://github.com/QuiNovas/cognito-assume-role"
    },
    "release_url": "https://pypi.org/project/cognito-assume-role/0.0.15/",
    "requires_dist": [
      "boto3",
      "botocore",
      "warrant"
    ],
    "requires_python": ">=3.8",
    "summary": "Assumes an IAM role in boto3 using Cognito credentials",
    "version": "0.0.15",
    "yanked": true,
    "yanked_reason": "No longer maintained. Use cognitoinator package instead."
  },
  "last_serial": 11350161,
  "releases": {
    "0.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e884897caad18a639b6e20b19749e51c01273f952621986b0549ef69665dbafc",
          "md5": "6ccde54023548a99ea4138e7f49d478b",
          "sha256": "7ced6c5acf3012663fe1361c57334b9480e521f793bbd08be8c31511b2e6e8d5"
        },
        "downloads": -1,
        "filename": "cognito_assume_role-0.0.15-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ccde54023548a99ea4138e7f49d478b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.8",
        "size": 13121,
        "upload_time": "2020-09-28T15:45:28",
        "upload_time_iso_8601": "2020-09-28T15:45:28.827640Z",
        "url": "https://files.pythonhosted.org/packages/e8/84/897caad18a639b6e20b19749e51c01273f952621986b0549ef69665dbafc/cognito_assume_role-0.0.15-py2.py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "No longer maintained. Use cognitoinator package instead."
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cea0a2861b6f1b1daab7efaad41d1be7b6310ee418b05dbbe1c5e2e64c819dee",
          "md5": "1ed16124725f6929e0b45390303eb245",
          "sha256": "dec20d48923281439ed4f89db57db9832054b889b432103952614bbb0bd73fb1"
        },
        "downloads": -1,
        "filename": "cognito-assume-role-0.0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "1ed16124725f6929e0b45390303eb245",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12891,
        "upload_time": "2020-09-28T15:45:29",
        "upload_time_iso_8601": "2020-09-28T15:45:29.869180Z",
        "url": "https://files.pythonhosted.org/packages/ce/a0/a2861b6f1b1daab7efaad41d1be7b6310ee418b05dbbe1c5e2e64c819dee/cognito-assume-role-0.0.15.tar.gz",
        "yanked": true,
        "yanked_reason": "No longer maintained. Use cognitoinator package instead."
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e884897caad18a639b6e20b19749e51c01273f952621986b0549ef69665dbafc",
        "md5": "6ccde54023548a99ea4138e7f49d478b",
        "sha256": "7ced6c5acf3012663fe1361c57334b9480e521f793bbd08be8c31511b2e6e8d5"
      },
      "downloads": -1,
      "filename": "cognito_assume_role-0.0.15-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6ccde54023548a99ea4138e7f49d478b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.8",
      "size": 13121,
      "upload_time": "2020-09-28T15:45:28",
      "upload_time_iso_8601": "2020-09-28T15:45:28.827640Z",
      "url": "https://files.pythonhosted.org/packages/e8/84/897caad18a639b6e20b19749e51c01273f952621986b0549ef69665dbafc/cognito_assume_role-0.0.15-py2.py3-none-any.whl",
      "yanked": true,
      "yanked_reason": "No longer maintained. Use cognitoinator package instead."
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cea0a2861b6f1b1daab7efaad41d1be7b6310ee418b05dbbe1c5e2e64c819dee",
        "md5": "1ed16124725f6929e0b45390303eb245",
        "sha256": "dec20d48923281439ed4f89db57db9832054b889b432103952614bbb0bd73fb1"
      },
      "downloads": -1,
      "filename": "cognito-assume-role-0.0.15.tar.gz",
      "has_sig": false,
      "md5_digest": "1ed16124725f6929e0b45390303eb245",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 12891,
      "upload_time": "2020-09-28T15:45:29",
      "upload_time_iso_8601": "2020-09-28T15:45:29.869180Z",
      "url": "https://files.pythonhosted.org/packages/ce/a0/a2861b6f1b1daab7efaad41d1be7b6310ee418b05dbbe1c5e2e64c819dee/cognito-assume-role-0.0.15.tar.gz",
      "yanked": true,
      "yanked_reason": "No longer maintained. Use cognitoinator package instead."
    }
  ],
  "vulnerabilities": []
}