{
  "info": {
    "author": "Tornike Skhulukhia",
    "author_email": "Tornike.Skhulukhia.1@iliauni.edu.ge",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Automate browser the easy way.\n### Python library to automate webbrowser.\n\n**Most functionality is tested on Chrome and Firefox, but may work on others as well.**  \nThis library made my working process of browser automation much easier,\nhope it will help your team too.  \nHere you can see short information about the module, but to see what is available,  \nmake sure to check documentation of available functions.\n***\n\n# Quick examples of usage\n\n\n### 1. Initialize the browser\n\n\n```python\n# at first, initialize BrowserHelper object\nfrom br_helper.br_helper import BrowserHelper\n\nbr =  BrowserHelper(browser=\"chrome\", # you can also use firefox here\n                    driver_path='/home/tornike/Desktop/bin/chromedriver')\n\n# useful notes:\n# it you want to use same browser and driver_path most of the time,\n# after the installation you can run second line without\n# driver_path argument and follow the instructions in terminal/interpreter.\n\n# In this case, module will try to scan your system and find\n# any file with \"chromedriver\" or \"geckodriver\"(in case of firefox) \n# in name, then it lists all matches, and you can choose which one to use\n# by default if no driver_path argument is passed.\n\n# in previous step you can also pass full file path of driver\n# to use, if it is not listed,\n\n# ! make sure you are using appropriate version of \n# chromedriver/geckodriver for your chrome/firefox browser !\n```\n\n\n```python\n# if you want to use proxy, with hidden browser(maybe to run on server without GUI),  \n# and also hide images on pages, and use custom download location, you can supply options  \n# argument when creating an object, with similar form: \nbr = BrowserHelper(\"chrome\",\n                   driver_path='your_driver_file_path',\n                   options={\n                            'proxy': 'ip_address:port_number',\n                            'visibility': False,\n                            'hide_images': True,\n                            'download_location': 'your_folder_path'})\n```\n\n**All keys that you can use in previous step**\n<pre>\n   Key name                 Value                   Value Type       \n--------------------------------------------------------------\n* visibility            - True/False                - boolean\n* download_location     - /path/to/folder           - string\n* window_size           - (width, height)           - tuple\n* hide_images           - True/False                - boolean\n* disable_javascript    - True/False                - boolean\n* proxy                 - ip:port                   - string\n* user_data_dir         - path/to/chrome/profile    - string\n* disable_infobars      - True/False                - boolean\n</pre>\n\n***\n\n### 2. Basic examples\n\n\n```python\n# get a webpage\nbr.get(\"example.com\")\n\n# click on an element with partial text match\nbr.find(\"More\").click()\n# find is a powerfull method, check its documentation ( type: >>>help(br.find) )\n# to see how you can make case insensitive, exact or specific\n# tag-based element searches with just text\n\n# in some cases, it is  better to use the method click,\n# and pass matched element, which will try to click element using\n# javascript, and by default try to click its parent in case of error.\n# see click method for more information (type >>>help(br.click) )\n\n# go back in history\nbr._b()\n# and forward\nbr._f()\n```\n\n\n```python\n# scroll to the bottom\nbr.bottom()\n# go back\nbr.top()\n# refresh\nbr.r()\n\n# log some information\nbr.log_info(\"successfully refreshed the page\")\n# after this step, check new log.txt file in your current working directory.\n# To use different log file, just pass log_file argument when initializing br object,\n# with preferred full path of log file to use later.\n\n# get new page\nbr.get(\"uct.ge\")\n```\n\n```python\n# locating elements to interact with them\n\n# click on first matching element\n# by css selector\nbr.css1(\"a#programming\").click()\n# or use xpath\nbr.xpath1(\"//a[@id='programming']\").click()\n# you will get an IndexError if element was not found,\n# so you can consider using css, or xpath, instead of css1 and xpath1 methods\n# and check if returned list is not empty to continue working.\n```\n\n\n```python\n# locating elements to parse a webpage data\nelements = br.bcss(\".class_of_your_element\")\n# here first 'b' stands for bs4 library, which is used with this method\n# we also have bcss1 to find first match.\n```\n\n\n```python\n# wait until specific loader, or other element disappears\nbr.wait_until_disappears(\"type_your_css_or_xpath_selector_of_loader_here\")\n```\n\n\n```python\n# take a screenshot\nbr.google(\"why to visit Georgia\")\nbr.screenshot(image_name='screenshot.png')\n```\n\n\n```python\n# run javascript code\nreally = br.js('console.log(\"Python is cool\"); return true')\n```\n\n\n```python\n# login to a website\nbr.login(\"facebook.com\", (\"username\", \"password\"))\nbr.login(\"twitter.com/login\", (\"username\", \"password\"))\nbr.login(\"linkedin.com\", (\"username\", \"password\"))\n\n# if you want to check if login was successfull\n# in most basic cases you can rely on returned value of login method\n# otherwise, define your own logic, for example\nif br.login(\"twitter.com/login\", (\"your_username\", \"your_password\")):\n    print(\"Hello, twitter\")\nelse:\n    print(\"Unsuccessfull login\")\n```\n\n\n```python\n# if you are tired, try\nbr.mario()  # we do not have reliable methods to play it yet...\n```\n\n\n```python\n# or have some fun with this few lines of code\nbr.dino() # works for Google Chrome\n\nimport time, random\n\nwhile True:\n    time.sleep(random.randint(1, 5)/10)\n    br.press(\"up\")  # ! this method is still in development !\n```\n\n\n```python\n# Please do not try this!\nbr.get(\"finder.ge\")\nbr._dance()\n```\n\n\n### 3. Run multiple browser instances in parallel(almost)\nModule has helper class, for cases when we want to run more than one instance of browser at the same time. It allows you to automatically split given urls into number of instances that you want to get using browser, get them and call callback function after each request.\nThat specific class uses information about DRIVER_PATH, that was defined earlier, so make sure before using it to define path in modules file itself, or just initialize BrowserHelper class instance without giving driver_path and when it finds correct driver path, type the number of it in terminal to save it in file automatically(this method of getting information will probably change in next releases).\n\nHere is an examples of using it, with explanations:\n\n#### Example 1\n\n\n```python\n'''\n    Code to download multiple files using given urls.\n    Each given url should return file directly, when opened.\n\n    Please take into account the fact that in this example \n    we use very simple lambda expression as our callback argument\n    to just print urls, not waiting until downloads finish,\n    so in real cases, you may want to use a bit more complex function,\n    which also waits before downloads are completed.\n'''\n\nfrom br_helper.br_helper import MultiBr\nimport os\n\n# url pattern to use (I found that site recently to test the functionality)\nurls = ['http://ipv4.download.thinkbroadband.com/1MB.zip' for i in range(100)]\n\n# initialize\nmbr = MultiBr()\n\n# start processes\nmbr.get_with_multi(\n        # use thread\n        multi_type=\"thread\",\n        # number of threads\n        multi_num=5,\n        # options for BrowserHelper instance\n        options={\"download_location\": os.path.abspath(\"downloaded_files\")},\n        # direct download urls\n        urls=urls,\n        # just print url\n        callback=lambda br: print(br.meta['url'])\n    )\n###########\n# Enjoy ! #\n###########\n\n```\n\n#### Example 2\n\n\n```python\n\n'''\n    what test does:\n        Opens few browser instances\n        using separate threads/processes,\n\n        loads finder.ge-website, searches for specific\n        word, parses returned page data and saves\n        results in json lines or csv file.\n\n    # make sure that in br_helper you have already saved driver location #\n'''\n\nfrom br_helper.br_helper import MultiBr\nimport time\n\n# for now, module is mainly designed for get requests\n# but we can do also posts this way\n# not most efficient, but should work\n\n\n##########################################\n# define file format to save results in\n##########################################\n\nCASE = \"csv\"  # comma separated values\n\n# CASE = \"jl\"   # json lines\n\n##########################################\n\n\n# define what words we want search for\nsearch_words = [\"Javascript\", \"C#\", \"PHP\", \"Python\", \"Golang\", \"\"] * 3\n\n# say that we want to get same urls multiple times\nmain_url = \"finder.ge\"\nurls = [main_url for i in search_words]\n\n\n# define callback function\n# it will be called every time browser loads our url\ndef callback(br):\n    '''\n    when called, br_helper object (browser) will be passed here.\n    Also in each case we will have access to requested page-s url\n    with br-s meta dictionary(using url key).\n\n    If we supplied other meta data, in get_with_multi method\n    we will have access to this data here.\n    '''\n\n    # at first, make sure that there are no clicks needed\n    # (site specific - go to finder.ge first time to see it)\n\n    if br.find(\"თანხმობა\", all_=True):\n        br.find(\"თანხმობა\").click()\n        br.find(\"გაგრძელება\").click()\n        br.find(\"აღწერა\").click()\n\n    # search\n    # with urls we also will pass word as meta data, so get it here\n\n    time.sleep(2)  # to avoid dos restriction(503)\n    search_word = br.meta[\"search_word\"]\n\n    # Just in case print check\n    print(br.meta[\"url\"])\n\n    # find input(for different selectors see br_helper's methods)\n    br.css1(\"input[placeholder]\").send_keys(search_word)\n    br.css1(\"input[value='ძიება']\").click()\n    # breakpoint()\n\n    # get data (not the most reliable way)\n    #######################################\n    if CASE == \"jl\":\n        ######################################\n        # jl case (generate dictionary)\n        ######################################\n        data = [{k: j.strip() for j, k in\n                zip(i.text.split(\"\\n\"), \n                    [\"დასახელება\", \"კომპანია\", \"ბოლო ვადა\"])}\n                for i in br.css(\"div.content\")]\n\n        # we can save data here, by hand,\n        # but this time we are going\n        # to set save_results argument to True, so\n        # data returned from this function\n        # will be saved in\n        # jl file named data_CURRENT_TIME.jl\n\n        return {\n            \"search_word\": search_word,\n            \"vacancies_data\": data}\n        ######################################\n    elif CASE == \"csv\":\n        #######################################\n        # csv case (generate list)\n        ######################################\n        data = [[search_word] +\n                i.text.split(\"\\n\") for i in br.css(\"div.content\")]\n        headers = [\"სიტყვა\", \"დასახელება\", \"კომპანია\", \"ბოლო ვადა\"]\n\n        return (headers, data)\n        #######################################\n\n\n# supported save methods for now\nassert CASE in ['jl', 'csv']\n\n# initialize\nmbr = MultiBr(save_format=CASE)  # save jl or csv\n\n# start processes\nmbr.get_with_multi(\n        multi_type=\"thread\",  # we can use process or thread here\n        multi_num=5,           # how many of them\n        options={},            # options to use in browser in br_helper class\n                               # useful if we want to pass different proxies,\n                               # in which case options will be list of\n                               # options dicts\n\n        urls=urls,             # all urls we want to load\n        callback=callback,     # our function above\n        save_results=True,     # do we want to save callback answers in jl\n                               # or csv file?\n\n                               # if we are adding meta data, it should be\n                               # list of dictionaries with same length\n                               # and sequence as urls and all data in\n                               # these dictionaries will be available\n                               # in callback in br.meta dictionary.\n                               # do not use url as keys, it will be added\n                               # with information about requested/\n                               # not redirected(if that is the case)\n                               # url, every time automatically\n        meta=[{\"search_word\": i} for i in search_words]\n    )\n```\n\n# Installation methods\n1. pip install br-helper\n2. git clone https://github.com/Tornike-Skhulukhia/browser_automation_helper\n\n# Dependencies\n1. selenium\n2. beautifulsoup4\n\n### And downloaded\n* chromedriver - if you want to use Chrome\n* geckodriver - if you want to use Firefox\n\n# Python version\nCode is tested on **Python3.6** and above\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Tornike-Skhulukhia/browser_automation_helper",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "br-helper",
    "package_url": "https://pypi.org/project/br-helper/",
    "platform": "",
    "project_url": "https://pypi.org/project/br-helper/",
    "project_urls": {
      "Homepage": "https://github.com/Tornike-Skhulukhia/browser_automation_helper"
    },
    "release_url": "https://pypi.org/project/br-helper/0.1.4/",
    "requires_dist": [
      "selenium (>=3.141.0)",
      "beautifulsoup4 (>=4.6.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Automate browser the easy way",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6210129,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b73c569a053f77c45083b96b6e304eb3f20ebdd1304c6d43195ebd28879c2547",
          "md5": "024a06802388fc24fef0cb66dd95d84e",
          "sha256": "9db60d0d542568e4e41f7ac59e5ce248c4fff3947fe5066976ba48d0062f5bb6"
        },
        "downloads": -1,
        "filename": "br_helper-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "024a06802388fc24fef0cb66dd95d84e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22193,
        "upload_time": "2019-11-26T19:12:07",
        "upload_time_iso_8601": "2019-11-26T19:12:07.301015Z",
        "url": "https://files.pythonhosted.org/packages/b7/3c/569a053f77c45083b96b6e304eb3f20ebdd1304c6d43195ebd28879c2547/br_helper-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa5763c6b447b350c65478906dcbd6e882bf3c62b310ee6025305b72e2119238",
          "md5": "a62938f81f18bf4a92cda8ceca2b234a",
          "sha256": "8f4c3dc0c0985e3dee308d3e3f2c348d8dc9d8df4c9bc67b02c5c60f11392d6b"
        },
        "downloads": -1,
        "filename": "br_helper-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a62938f81f18bf4a92cda8ceca2b234a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25170,
        "upload_time": "2019-11-26T19:12:10",
        "upload_time_iso_8601": "2019-11-26T19:12:10.143367Z",
        "url": "https://files.pythonhosted.org/packages/fa/57/63c6b447b350c65478906dcbd6e882bf3c62b310ee6025305b72e2119238/br_helper-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97a17d671782557049f78abaa534d4ea4b7569aa9fb025308515cae07a5bed1f",
          "md5": "3a3e0ffe1d1f6172e9f0c92506aed67f",
          "sha256": "fdc44076a1f05d8d993b95d6216bad2d2745c1a8706390dfe2ab6a7fab5fc535"
        },
        "downloads": -1,
        "filename": "br_helper-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a3e0ffe1d1f6172e9f0c92506aed67f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22202,
        "upload_time": "2019-11-26T19:20:45",
        "upload_time_iso_8601": "2019-11-26T19:20:45.332892Z",
        "url": "https://files.pythonhosted.org/packages/97/a1/7d671782557049f78abaa534d4ea4b7569aa9fb025308515cae07a5bed1f/br_helper-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59a703f7d8ecb1cd740753257d09386055599dabd945de157aa5e1992721ddba",
          "md5": "083088a2158462c3efe6d87c95faf766",
          "sha256": "26f2cafb8cd8fce19f6125d42c9b6397e266e2ae1daaa29bd240be636665113e"
        },
        "downloads": -1,
        "filename": "br_helper-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "083088a2158462c3efe6d87c95faf766",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25191,
        "upload_time": "2019-11-26T19:20:47",
        "upload_time_iso_8601": "2019-11-26T19:20:47.196709Z",
        "url": "https://files.pythonhosted.org/packages/59/a7/03f7d8ecb1cd740753257d09386055599dabd945de157aa5e1992721ddba/br_helper-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dda57cf16229e7d764e10305183c02315f67e09ed6ca55497af307cade1141d4",
          "md5": "f394c73a4f56795625c423c4b79480c6",
          "sha256": "90ef4543a6d15ddcbcf43a7610503eb590c31c924ee6bb5bc556c5bcc3cebe61"
        },
        "downloads": -1,
        "filename": "br_helper-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f394c73a4f56795625c423c4b79480c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22201,
        "upload_time": "2019-11-26T19:22:49",
        "upload_time_iso_8601": "2019-11-26T19:22:49.530263Z",
        "url": "https://files.pythonhosted.org/packages/dd/a5/7cf16229e7d764e10305183c02315f67e09ed6ca55497af307cade1141d4/br_helper-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f40b2c06c33cb7ce0859ff2d07d50adcfd9b9b38c36c1859308016c6c03306eb",
          "md5": "85598cfe441494e6230c7d903cd5fb77",
          "sha256": "ee1e8e475b5f0c2ba55795b5182cc84afeda8182f32a41266d51210af62c7502"
        },
        "downloads": -1,
        "filename": "br_helper-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "85598cfe441494e6230c7d903cd5fb77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25183,
        "upload_time": "2019-11-26T19:22:51",
        "upload_time_iso_8601": "2019-11-26T19:22:51.585927Z",
        "url": "https://files.pythonhosted.org/packages/f4/0b/2c06c33cb7ce0859ff2d07d50adcfd9b9b38c36c1859308016c6c03306eb/br_helper-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81b9f292f1f32b9bc7e706674a5dd83a21fbd2cceaba8c701c9d2e3d4b30772c",
          "md5": "f4614342758be033da02a532f1c72703",
          "sha256": "94c60ea9a457cf26918dfb05c647cd39d9d7f3fed4bb063dfc3011e3b136afa7"
        },
        "downloads": -1,
        "filename": "br_helper-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4614342758be033da02a532f1c72703",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22197,
        "upload_time": "2019-11-26T19:24:34",
        "upload_time_iso_8601": "2019-11-26T19:24:34.010692Z",
        "url": "https://files.pythonhosted.org/packages/81/b9/f292f1f32b9bc7e706674a5dd83a21fbd2cceaba8c701c9d2e3d4b30772c/br_helper-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b866e9d0b75925fac5b30ebead18ec6c6a38376896ed08bf05898818617bafc",
          "md5": "20cb07d907be444ef51e63fd812aba52",
          "sha256": "051547afec89a94e47b46fe6fc5ec0498e99f61e463dbc6572adb113fe84eeee"
        },
        "downloads": -1,
        "filename": "br_helper-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "20cb07d907be444ef51e63fd812aba52",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25178,
        "upload_time": "2019-11-26T19:24:35",
        "upload_time_iso_8601": "2019-11-26T19:24:35.815511Z",
        "url": "https://files.pythonhosted.org/packages/9b/86/6e9d0b75925fac5b30ebead18ec6c6a38376896ed08bf05898818617bafc/br_helper-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "055a5e778efebe586f13f34f0a391a52d03eedc33ff3341698a09b959497098b",
          "md5": "951a674c373d6ab2dbc94e88bd648cdd",
          "sha256": "3560ed3d99afdc4b64baa59e6740fb4d3fabefb2987b146f733c5aef79f27b9d"
        },
        "downloads": -1,
        "filename": "br_helper-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "951a674c373d6ab2dbc94e88bd648cdd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22296,
        "upload_time": "2019-11-27T18:47:38",
        "upload_time_iso_8601": "2019-11-27T18:47:38.524625Z",
        "url": "https://files.pythonhosted.org/packages/05/5a/5e778efebe586f13f34f0a391a52d03eedc33ff3341698a09b959497098b/br_helper-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d3c90ed5374af5d9a2bc489983106a0e56d9b2b7eef89149ab260c39410488f",
          "md5": "9012bcae1b91de10807099906a864b17",
          "sha256": "077e88dcb01580f142528b4b28151bca7daeb7dde11d297e4ef519f7ff58e912"
        },
        "downloads": -1,
        "filename": "br_helper-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9012bcae1b91de10807099906a864b17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25390,
        "upload_time": "2019-11-27T18:47:41",
        "upload_time_iso_8601": "2019-11-27T18:47:41.936774Z",
        "url": "https://files.pythonhosted.org/packages/7d/3c/90ed5374af5d9a2bc489983106a0e56d9b2b7eef89149ab260c39410488f/br_helper-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "055a5e778efebe586f13f34f0a391a52d03eedc33ff3341698a09b959497098b",
        "md5": "951a674c373d6ab2dbc94e88bd648cdd",
        "sha256": "3560ed3d99afdc4b64baa59e6740fb4d3fabefb2987b146f733c5aef79f27b9d"
      },
      "downloads": -1,
      "filename": "br_helper-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "951a674c373d6ab2dbc94e88bd648cdd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 22296,
      "upload_time": "2019-11-27T18:47:38",
      "upload_time_iso_8601": "2019-11-27T18:47:38.524625Z",
      "url": "https://files.pythonhosted.org/packages/05/5a/5e778efebe586f13f34f0a391a52d03eedc33ff3341698a09b959497098b/br_helper-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7d3c90ed5374af5d9a2bc489983106a0e56d9b2b7eef89149ab260c39410488f",
        "md5": "9012bcae1b91de10807099906a864b17",
        "sha256": "077e88dcb01580f142528b4b28151bca7daeb7dde11d297e4ef519f7ff58e912"
      },
      "downloads": -1,
      "filename": "br_helper-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "9012bcae1b91de10807099906a864b17",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 25390,
      "upload_time": "2019-11-27T18:47:41",
      "upload_time_iso_8601": "2019-11-27T18:47:41.936774Z",
      "url": "https://files.pythonhosted.org/packages/7d/3c/90ed5374af5d9a2bc489983106a0e56d9b2b7eef89149ab260c39410488f/br_helper-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}