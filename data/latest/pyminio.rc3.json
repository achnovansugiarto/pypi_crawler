{
  "info": {
    "author": "Michael Tugendhaft",
    "author_email": "tugmica@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Pyminio\n[![PyPI](https://img.shields.io/pypi/v/pyminio?color=blue&label=pypi%20version)]()\n[![PyPI](https://img.shields.io/pypi/pyversions/pyminio.svg?style=plastic)]()\n[![Downloads](https://pepy.tech/badge/pyminio)](https://pepy.tech/project/pyminio)\n#### Pyminio is a python client wrapped like the `os` module to control minio server.\n\nI have developed pyminio while trying to work with the minio's original python client with a lot of struggles. I had to read and understand minio's implementations to preform the most simple tasks.\n\nPyminio is a wrapper to minio, that is more indecative for the user.\nIt works like `os` module, so you don't need to understand minio's concepts, and just using regular paths.\n\n## Content\n1. [Installation](#Installation)\n2. [Setting up Pyminio](#Setting-up-Pyminio)\n3. [Usage](#Usage)\n4. [Contribute](#Contribute)\n\n## Installation\nUse the package manager [pip](https://pypi.org/project/pyminio/) to install pyminio.\n\n```bash\npip install pyminio\n```\nor\n```bash\ngit clone https://github.com/mmm1513/pyminio.git\ncd pyminio\npython setup.py install\n```\n\n## Setting up Pyminio\n\nFirstly you need to set up your  [Minio Docker](https://hub.docker.com/r/minio/minio/), and acquire an ENDPOINT (URL), ACCESS_KEY, and a SECRET_KEY.\n\n- If you want to add your own minio object you can pass it in the constructor like so:\n\n    Install python's [Minio](https://docs.min.io/docs/python-client-quickstart-guide.html) module.\n\n    ```python\n    from minio import Minio\n    from pyminio import Pyminio\n\n    minio_obj = Minio(\n        endpoint='<your-minio-endpoint>',  # e.g. \"localhost:9000/\"\n        access_key='<your-minio-access-key>',\n        secret_key='<your-minio-secret-key>'\n    )\n    pyminio_client = Pyminio(minio_obj=minio_obj)\n    ```\n\n- If you don't want to handle with minio, you can do this instead:\n\n    ```python\n    from pyminio import Pyminio\n\n    pyminio_client = Pyminio.from_credentials(\n        endpoint='<your-minio-endpoint>',  # e.g. \"localhost:9000/\"\n        access_key='<your-minio-access-key>',\n        secret_key='<your-minio-secret-key>'\n    )\n    ```\n\n## Usage\n- [mkdirs](#mkdirs)\n- [listdir](#listdir)\n- [exists](#exists)\n- [isdir](#isdir)\n- [truncate](#truncate)\n- [rmdir](#rmdir)\n- [rm](#rm)\n- [cp](#cp)\n- [mv](#mv)\n- [get](#get)\n- [get_last_object](#get_last_object)\n- [put_data](#put_data)\n- [put_file](#put_file)\n\n### <a name=\"mkdirs\"></a>mkdirs(self, path: str)\n`Pyminio.mkdirs` will create the given full path if not exists like linux's `mkdir -p`.\n\nThis method must get a directory path or it will raise a ValueError.\n\n```python\n>>> pyminio_client.mkdirs('/foo/bar/baz/')\n>>> pyminio_client.mkdirs('/foo/bar/baz')\nValueError /foo/bar/baz is not a valid directory path. must be absolute and end with /\n```\n\n### <a name=\"listdir\"></a>listdir(self, path: str, files_only: bool = False, dirs_only: bool = False) -> Tuple[str]\n`Pyminio.listdir` will return the directory's content as a tuple of directories and file names. Works like os's `listdir`.\n\nThis method must get a directory path or it will raise a ValueError.\n\n```python\n>>> pyminio_client.listdir('/foo/bar/baz/')\n('file_name_1', 'file_name_2', 'directory_name/')\n```\n\nThere is an option to use the files_only flag to get only files and dirs_only to get only directories from listdir.\n\n```python\n>>> pyminio_client.listdir('/foo/bar/baz/', files_only=True)\n('file_name_1', 'file_name_2')\n>>> pyminio_client.listdir('/foo/bar/baz/', dirs_only=True)\n('directory_name/', )\n```\n\n### <a name=\"exists\"></a>exists(self, path: str) -> bool\n`Pyminio.exists` will return a boolean that confirm rather this path exists or not in the server. Works like os's `path.exists`.\n\n```bash\n/\n├── foo\n│   └── bar\n│       └── baz\n│           ├── file_name_1\n│           └── file_name_2\n```\n\n```python\n>>> pyminio_client.exists('/foo/bar/baz/file_name_1')\nTrue\n>>> pyminio_client.exists('/foo/bar/baz/file_name_3')\nFalse\n>>> pyminio_client.exists('/all/path/wrong/')  # not existing path\nFalse\n```\n\n### <a name=\"isdir\"></a>isdir(self, path: str)\n`Pyminio.isdir` will return True only if the given path exists and is a directory. Works like `os.path.isdir`.\n\n```python\n>>> pyminio_client.isdir('/foo/bar/baz/file_name_1')  # existed file\nFalse\n>>> pyminio_client.isdir('/foo/bar/baz/directory_name/')  # existed directory\nTrue\n>>> pyminio_client.isdir('/all/path/wrong/but/directory/')  # not existed directory\nFalse\n```\n\n### <a name=\"truncate\"></a>truncate(self) -> Pyminio\n`Pyminio.truncate` will delete all minio's content from the root directory.\n\n```python\n>>> pyminio_client.truncate()\n```\n\n### <a name=\"rmdir\"></a>rmdir(self, path: str, recursive: bool = False) -> Pyminio\n`Pyminio.rmdir` will delete the specified directory. Works like linux's `rmdir` / `rm (-r)`.\n\nIt will raise a `DirectoryNotEmptyError` if given directory is not empty, except if the recursive flag is set and then it will delete given directory's path recursively.\n\nThis method must get a directory path or it will raise a ValueError.\n\n```python\n>>> pyminio_client.rmdir('/foo/bar/baz/directory_name/')  # empty directory\n>>> pyminio_client.rmdir('/foo/bar/')  # non-empty directory\nDirectoryNotEmptyError: can not recursively delete non-empty directory\n>>> pyminio_client.rmdir('/foo/bar/', recursive=True)\n```\n\n### <a name=\"rm\"></a>rm(self, path: str, recursive: bool = False) -> Pyminio\n`Pyminio.rm` works like [rmdir](#rmdir) only that it can delete files too. Works like linux's `rm (-r)`.\n\n```python\n>>> pyminio_client.rm('/foo/bar/baz/file_name')\n```\n\n### <a name=\"cp\"></a>cp(self, from_path: str, to_path: str, recursive: bool = False) -> Pyminio\n`Pyminio.cp` will copy one file or directory to given destination. Works like linux's `cp (-r)`.\n\nThis method can only copy recursively when the recursive flag is True. If not, it will raise a ValueError.\n\n### How will the copy accure? (all directories are copied recursively in this examples)\n| src path   | dst path  | dst exists | new dst      | Explain                                                                |\n| ---------- | --------- | ---------- | ------------ | ---------------------------------------------------------------------- |\n| /foo/bar   | /foo/baz  |    ---     | /foo/baz     | The file's name will be copied from bar to baz as well.                |\n| /foo1/bar  | /foo2/    |    True    | /foo/bar     | The file will be copied to '/foo2/bar'                                 |\n| /foo/bar/  | /foo/     |    True    | /foo/        | The content of '/foo/bar/' will be copied to '/foo/'                   |\n| /foo1/bar/ | /foo2/    |   False    | /foo2/bar/   | '/foo1/bar/' will be copied recursively to '/foo2/bar/'                |\n| /foo1/bar/ | /foo2/baz |    ---     |     ---      | ValueError will be raised in attempting to copy directory in to a file |\n\n```python\n>>> pyminio_client.cp('/foo/bar', '/foo/baz')\n>>> pyminio_client.cp('/foo1/bar', '/foo2/')\n>>> pyminio_client.cp('/foo/bar/', '/foo/', recursive=True)\n>>> pyminio_client.cp('/foo1/bar/', '/foo2/', recursive=True)\n>>> pyminio_client.cp('/foo1/bar/', '/foo2/baz', recursive=True)\nValueError: can not activate this method from directory to a file.\n```\n\n### <a name=\"mv\"></a>mv(self, from_path: str, to_path: str, recursive: bool = False) -> Pyminio\n`Pyminio.mv` works like [cp](#cp) only that it removes the source after the transfer has been completed. Works like linux's `mv`.\n\nThis method can only move recursively when the recursive flag is True. If not, it will raise a ValueError.\n\n```python\n>>> pyminio_client.mv('/foo/bar/', '/foo/baz/')\n```\n\n### <a name=\"get\"></a>get(self, path: str) -> ObjectData\n`Pyminio.get` return an object from given path. This object will be returned as a `pyminio.File` object or an `pyminio.Folder` object, that both inherit from `pyminio.ObjectData`.\n\nThis objects will contain metadata, their path and name.\n\n```python\n>>> pyminio_client.get('/foo/bar/baz')\nFile(name='baz', \n     full_path='/foo/bar/baz', \n     metadata=AttrDict({\n         'is_dir': False, \n         'last_modified': time.struct_time(...), \n         'size': ..., \n         'content-type': ...\n     }), \n     data=...)\n```\n\n### <a name=\"get_last_object\"></a>get_last_object(self, path: str) -> File\n`Pyminio.get_last_object` will return the last modified object inside a given directory.\n\nThis method must get a directory path or it will raise a ValueError.\n\n```python\n>>> pyminio_client.get_last_object('/foo/bar/')\nFile(name='baz', \n     full_path='/foo/bar/baz', \n     metadata=AttrDict({\n         'is_dir': False, \n         'last_modified': time.struct_time(...), \n         'size': ..., \n         'content-type': ...\n     }), \n     data=...)\n```\n\n### <a name=\"put_data\"></a>put_data(self, path: str, data: bytes, metadata: Dict = None)\n`Pyminio.put_data` gets a path, data in bytes, and some metadata, and create an object inside the given path.\n\n```python\n>>> data = b'test'\n>>> metadata = {'Pyminio-is': 'Awesome'}\n>>> pyminio_client.put_data(path='/foo/bar/baz', data=data, metadata=metadata)\n```\n\n### <a name=\"put_file\"></a>put_file(self, file_path: str, to_path: str, metadata: Dict = None)\n`Pyminio.put_file` works like [put_data](#put_data) only that instead of data it gets a path to a file in you computer. Then it will copy this file to the given location.\n\n```python\n>>> metadata = {'Pyminio-is': 'Awesome'}\n>>> pyminio_client.put_file(to_path='/foo/bar/baz', file_path='/mnt/some_file', metadata=metadata)\n```\n\n## Contribute\n\nAll contributions are welcome:\n\n- Read the [issues](https://github.com/mmm1513/pyminio/issues), Fork the [project](https://github.com/mmm1513/pyminio) and create a new Pull Request.\n- Request a new feature creating a `New issue` with the `enhancement` tag.\n- Find any kind of errors in the code and create a `New issue` with the details, or fork the project and do a Pull Request.\n- Suggest a better or more pythonic way for existing examples.\n\n### Work environment\n\nAfter forking the project and installing the dependencies, (like specified in the [installations](#Installation) in part 2)\ndownload the [minio docker](https://hub.docker.com/r/minio/minio/) and start an instance in your computer for development and testing.\n\nto run the tests run:\n```bash\npytest\n```\n#### Don't forget to write tests, and to run all the tests before making a pull request.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mmm1513/pyminio",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyminio",
    "package_url": "https://pypi.org/project/pyminio/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyminio/",
    "project_urls": {
      "Homepage": "https://github.com/mmm1513/pyminio"
    },
    "release_url": "https://pypi.org/project/pyminio/0.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python client for Minio",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8422649,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7177215298760c22d05132053dd87cfbc383d6c9b7ac34c048533a4bfe96db9",
          "md5": "c1e5d3f7c0d9d8af0ae057ef3238b9f9",
          "sha256": "bb70fc958cd270276feb7bb161e38bb7cd135b077a6aaf95f6a047bb0552805f"
        },
        "downloads": -1,
        "filename": "pyminio-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c1e5d3f7c0d9d8af0ae057ef3238b9f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 1167,
        "upload_time": "2020-10-09T08:56:26",
        "upload_time_iso_8601": "2020-10-09T08:56:26.123948Z",
        "url": "https://files.pythonhosted.org/packages/f7/17/7215298760c22d05132053dd87cfbc383d6c9b7ac34c048533a4bfe96db9/pyminio-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40fe91de236fd21685d4ccc813002e81d8acbabda26572c4cb1b14d8178b782f",
          "md5": "eb0c4fd81c62d7c55246f388a849c020",
          "sha256": "c430517f6bcb58af0145bc00f6680825d9cf237c3af9fcab2b6ebf88dae315e7"
        },
        "downloads": -1,
        "filename": "pyminio-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "eb0c4fd81c62d7c55246f388a849c020",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 4999,
        "upload_time": "2020-09-26T20:15:25",
        "upload_time_iso_8601": "2020-09-26T20:15:25.866788Z",
        "url": "https://files.pythonhosted.org/packages/40/fe/91de236fd21685d4ccc813002e81d8acbabda26572c4cb1b14d8178b782f/pyminio-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "842c3fb2a2affeb594513e0a8a2ff2dd7e576c904cdb849611552f7e1c907342",
          "md5": "cd3f29073e2c277e6d4b787e7da3c1cb",
          "sha256": "cc6d5813b28f39667a0e867c3ef01443cc4ffe110887fa6428a0c54ca84dae42"
        },
        "downloads": -1,
        "filename": "pyminio-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd3f29073e2c277e6d4b787e7da3c1cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12445,
        "upload_time": "2020-10-15T20:34:36",
        "upload_time_iso_8601": "2020-10-15T20:34:36.761740Z",
        "url": "https://files.pythonhosted.org/packages/84/2c/3fb2a2affeb594513e0a8a2ff2dd7e576c904cdb849611552f7e1c907342/pyminio-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e7090612c5e95eb251945e41dd6367eb2f13d4567a93513979d8d285459cb63",
          "md5": "b0ae79b90055b3871c37c52fe97dd264",
          "sha256": "45b2caf67b1c3c9105956a1b2777f99abf1bc5d0955dd78598770706dfa48f4a"
        },
        "downloads": -1,
        "filename": "pyminio-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b0ae79b90055b3871c37c52fe97dd264",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13954,
        "upload_time": "2020-10-14T16:29:05",
        "upload_time_iso_8601": "2020-10-14T16:29:05.202788Z",
        "url": "https://files.pythonhosted.org/packages/3e/70/90612c5e95eb251945e41dd6367eb2f13d4567a93513979d8d285459cb63/pyminio-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "842c3fb2a2affeb594513e0a8a2ff2dd7e576c904cdb849611552f7e1c907342",
        "md5": "cd3f29073e2c277e6d4b787e7da3c1cb",
        "sha256": "cc6d5813b28f39667a0e867c3ef01443cc4ffe110887fa6428a0c54ca84dae42"
      },
      "downloads": -1,
      "filename": "pyminio-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cd3f29073e2c277e6d4b787e7da3c1cb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12445,
      "upload_time": "2020-10-15T20:34:36",
      "upload_time_iso_8601": "2020-10-15T20:34:36.761740Z",
      "url": "https://files.pythonhosted.org/packages/84/2c/3fb2a2affeb594513e0a8a2ff2dd7e576c904cdb849611552f7e1c907342/pyminio-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3e7090612c5e95eb251945e41dd6367eb2f13d4567a93513979d8d285459cb63",
        "md5": "b0ae79b90055b3871c37c52fe97dd264",
        "sha256": "45b2caf67b1c3c9105956a1b2777f99abf1bc5d0955dd78598770706dfa48f4a"
      },
      "downloads": -1,
      "filename": "pyminio-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b0ae79b90055b3871c37c52fe97dd264",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13954,
      "upload_time": "2020-10-14T16:29:05",
      "upload_time_iso_8601": "2020-10-14T16:29:05.202788Z",
      "url": "https://files.pythonhosted.org/packages/3e/70/90612c5e95eb251945e41dd6367eb2f13d4567a93513979d8d285459cb63/pyminio-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}