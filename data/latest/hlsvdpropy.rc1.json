{
  "info": {
    "author": "Brian J. Soher",
    "author_email": "bsoher@briansoher.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix"
    ],
    "description": "HLSVDPROPY\r\n======\r\n\r\nOverview - Black box fitting of Time Domain Signals\r\n------\r\n\r\nThis is a 'pure Python' implementation of the algorithm provided by the Fortran\r\nbased HLSVDPRO package, version 2.0.0. \r\n\r\nThe HLSVDPROPY package provides code to fit a model function (sum of lorentzians) \r\nto time-domain data via a 'black box' state space approach (see references below). \r\nOne frequent use for this is by the clinical MRS community for residual water \r\nremoval from MRS signals in the time domain.    \r\n\r\nInternally, we use the scipy.linalg SVD libraries for computing the singular \r\nvalue decomposition (SVD) of large and sparse matrices. The calculated singular \r\nvalues and column vectors are subsequently processed into lists of parameters \r\nthat describe the sum of lorentzians that approximate the data based on the \r\npaper by Laudadio (see below). Parameters are numpy arrays of: frequencies, \r\ndamping factors, amplitudes, and phases. \r\n\r\n\r\n**Example:**\r\n\r\n```\r\nimport hlsvdpropy\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\ndata = hlsvdpropy.get_testdata()\r\nnpts = len(data)\r\nindat = hlsvdpropy.TESTDATA   \t\t# this is a built-in dict with test data \r\ndwell = float(indat['step_size'])\r\nnsv_sought = indat['n_singular_values']\r\n\r\nresult = hlsvdpropy.hlsvd(data, nsv_sought, dwell)\r\n\r\nnsv_found, singvals, freq, damp, ampl, phas = result\r\n\r\nprint(\"np.allclose(freq, indat['freq0']) = \", np.allclose(freq, np.array(indat['freq0'])) )\r\n\r\nfid = hlsvdpropy.create_hlsvd_fids(result, npts, dwell, sum_results=True, convert=False)\r\n\r\nchop = ((((np.arange(len(fid)) + 1) % 2) * 2) - 1)\r\ndat = data * chop\r\nfit = fid * chop\r\ndat[0] *= 0.5\r\nfit[0] *= 0.5\r\n\r\nplt.plot(np.fft.fft(dat).real, color='r') \r\nplt.plot(np.fft.fft(fit).real, color='b') \r\nplt.plot(np.fft.fft(dat-fit).real, color='g')\r\nplt.show()\r\n\r\n```\r\n\r\nHLSVDPROPY Methods\r\n------\r\n\r\n- `hlsvdpropy.hlsvdpro(data, nsv_sought, m=None, sparse=True)` - the main method \r\nfor running the hlsvdpro algorithm. It does not require the dwell time of the \r\ntime domain data, but it also does not convert the results to standard units. It\r\ndoes allow the user to specify the dimensions of the Hankel matrix, and whether\r\na sparse SVD is performed or not.\r\n\r\n- `hlsvdpropy.hlsvd(data, nsv_sought, dwell_time)` - provides backwards \r\ncompatibility to the API for HLSVDPRO version 1.x. It calls the hlsvdpro() method\r\nwith default values corresponding to the algorithm used in version 1.x. See \r\ndocstring for more information on the default values used.\r\n\r\nHLSVDPROPY Utility Methods\r\n------\r\n- `hlsvdpropy.create_hlsvd_fids(result, npts, dwell, sum_results=False, convert=True)` - \r\ncan be used to create FIDs from the results tuple from either the `hlsvd()` \r\nor the `hlsvdpro()` methods. It can return either individual FIDs or a sum of \r\nall FIDs as a result.  \r\n\r\n- `hlsvdpropy.convert_hlsvd_result(result, dwell)` - uses the dwell time to \r\nconvert the `hlsvdpro()` result tuple to more standard units. Frequencies \r\nconvert to [kHz], and damping factors to [ms]. Phases convert to [degrees]. \r\nSingular values, amplitudes and row and column matrices are maintained at \r\ntheir same values and output tuple locations. Note - the `hlsvd()` method \r\nautomatically calls this internally, so you don't have to convert values\r\nif you use that method.\r\n\r\n- `hlsvdpropy.get_testdata()` - returns a numpy array of 1024 complex data \r\npoints that represents a real world short TE single voxel PRESS data set.\r\nThis function converts the base64 encoded string saved in the TESTDATA dict\r\ninto a numpy array for you. Additional information about the data and the \r\nknown values for fitting it via the hlsvd() method can be retrieved from \r\nthe TESTDATA dict.  See 'Example' for more usage information.\r\n\r\nTechnical Overview and References\r\n------\r\n\r\nFor complete copyright and license information, see the LICENSE file. The \r\nreferences are for HLSVDPRO and are provided for completeness.\r\n\r\nThe state space approach is described in S.Y. Kung, K.S. Arun and D.V. Bhaskar\r\nRao, J. Opt. Soc. Am. 73, 1799 (1983).\r\n\r\nHLSVDPRO version 1.0.x was implemented based on the paper by W.W.F. Pijnappel, \r\nA. van den Boogaart, R. de Beer, D. van Ormondt, J. Magn. Reson. 97, 122 (1992)\r\nand made use of code from PROPACK version 1.x.\r\n\r\nHLSVDPRO version 2.x was adaptated to use PROPACK library version 2.1 to \r\nimplement the HLSVDPRO algorithm as described in T. Laudadio, N. Mastronardi\r\nL. Vanhamme, P. Van Hecke and S. Van Huffel, \"Improved Lanczos algorithms for \r\nblackbox MRS data quantitation\", Journal of Magnetic Resonance, Volume 157, \r\npages 292-297, 2002. \r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://scion.duhs.duke.edu/projects/hlsvdpro",
    "keywords": "svd,hlsvd,hlsvdpro,propack,time domain,fitting",
    "license": "https://opensource.org/licenses/BSD-3-Clause",
    "maintainer": "Brian J. Soher",
    "maintainer_email": "bsoher@briansoher.com",
    "name": "hlsvdpropy",
    "package_url": "https://pypi.org/project/hlsvdpropy/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/hlsvdpropy/",
    "project_urls": {
      "Homepage": "http://scion.duhs.duke.edu/projects/hlsvdpro"
    },
    "release_url": "https://pypi.org/project/hlsvdpropy/2.0.1/",
    "requires_dist": [
      "setuptools"
    ],
    "requires_python": "",
    "summary": "This is a 'pure Python' implementation of the HLSVDPRO package version 2.0.0. It fits time domain data to a model function that is a set of lorentzian decaying sinusoids using the state space approach.",
    "version": "2.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7565167,
  "releases": {
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b62baceb7e748552fca29df238eb01b7545c2e28d86bd43cc0fbc6d6929c460b",
          "md5": "1d89a4690d4cb077a6ddba404e6311cd",
          "sha256": "dd5fb918ba839c7dc47306d3b5c4fc63f94a9cd436965597fe671bff26228772"
        },
        "downloads": -1,
        "filename": "hlsvdpropy-2.0.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d89a4690d4cb077a6ddba404e6311cd",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 29677,
        "upload_time": "2020-06-26T00:04:46",
        "upload_time_iso_8601": "2020-06-26T00:04:46.573738Z",
        "url": "https://files.pythonhosted.org/packages/b6/2b/aceb7e748552fca29df238eb01b7545c2e28d86bd43cc0fbc6d6929c460b/hlsvdpropy-2.0.1-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b55f53d1007bca6ffed7de51e3c2c6c0525f354589f0a46bdf333b614b24c3c",
          "md5": "36f082f70231213f42ea6fde38165817",
          "sha256": "6bdf2ada33b9b8c3e0a0a71dab08ced13ef642a8b55d84886218fc86d8f1d6d5"
        },
        "downloads": -1,
        "filename": "hlsvdpropy-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36f082f70231213f42ea6fde38165817",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29636,
        "upload_time": "2020-06-26T00:04:47",
        "upload_time_iso_8601": "2020-06-26T00:04:47.684610Z",
        "url": "https://files.pythonhosted.org/packages/3b/55/f53d1007bca6ffed7de51e3c2c6c0525f354589f0a46bdf333b614b24c3c/hlsvdpropy-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b62baceb7e748552fca29df238eb01b7545c2e28d86bd43cc0fbc6d6929c460b",
        "md5": "1d89a4690d4cb077a6ddba404e6311cd",
        "sha256": "dd5fb918ba839c7dc47306d3b5c4fc63f94a9cd436965597fe671bff26228772"
      },
      "downloads": -1,
      "filename": "hlsvdpropy-2.0.1-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "1d89a4690d4cb077a6ddba404e6311cd",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "requires_python": null,
      "size": 29677,
      "upload_time": "2020-06-26T00:04:46",
      "upload_time_iso_8601": "2020-06-26T00:04:46.573738Z",
      "url": "https://files.pythonhosted.org/packages/b6/2b/aceb7e748552fca29df238eb01b7545c2e28d86bd43cc0fbc6d6929c460b/hlsvdpropy-2.0.1-py2-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3b55f53d1007bca6ffed7de51e3c2c6c0525f354589f0a46bdf333b614b24c3c",
        "md5": "36f082f70231213f42ea6fde38165817",
        "sha256": "6bdf2ada33b9b8c3e0a0a71dab08ced13ef642a8b55d84886218fc86d8f1d6d5"
      },
      "downloads": -1,
      "filename": "hlsvdpropy-2.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "36f082f70231213f42ea6fde38165817",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 29636,
      "upload_time": "2020-06-26T00:04:47",
      "upload_time_iso_8601": "2020-06-26T00:04:47.684610Z",
      "url": "https://files.pythonhosted.org/packages/3b/55/f53d1007bca6ffed7de51e3c2c6c0525f354589f0a46bdf333b614b24c3c/hlsvdpropy-2.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}