{
  "info": {
    "author": "Chathura Widanage",
    "author_email": "chathurawidanage@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Setting up IndyCar on Kubernetes\n\n## STEP 1 : Setting up the Kubernetes cluster\n\nA minikube setup can be used to test the distribution locally while it’s recommended to allocate at least  6-8 CPUs and 12-16GB RAM for the minikube VM.\n\nA comprehensive guide on setting up minkube can be found from the blow URL.\n\nhttps://kubernetes.io/docs/setup/learning-environment/minikube/\n\n## STEP 2 : Setting up the Kubernetes Dashboard\n\nClone the IndyCar repository to your machine.\n\n```bash\ngit clone https://github.com/DSC-SPIDAL/IndyCar.git\n```\n\nInside the “containerize” directory, you would find a bash script called “setup_k8.sh”. Navigate to the \"containerize\" directory and execute setup_k8.sh script to set up the kubernetes dashboard.\n\n```bash\n./setup_k8.sh\n```\n\nNow, from a web browser of your choice, you should be able to access the Kubernetes dashboard through below URL.\n\n```bash\nhttp://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login\n```\n\nUse the token printed in the previous step to Sign In.\n\n## STEP 3 : Deploying Zookeeper\n\nWe perform IndyCar anomaly detection using an opensource HTM implementation called HTM Java. We have been running HTM Java networks on Apache Storm for convenience and to handle future data stream preprocessing requirements. Apache Storm relies on Zookeeper for coordination between Nimbus and the Supervisors.\n\nZookeeper can be deployed using kubectl as follows.\n\n```bash\nkubectl create -f zookeeper.json\nkubectl create -f zookeeper-service.json\n```\n\nAllow few minutes to initialize Zookeeper.\n\n## STEP 3 : Deploying Storm Nimbus\n\nStorm nimbus can be deployed as follows.\n\n```bash\nkubectl create -f storm-nimbus.json\nkubectl create -f storm-nimbus-service.json\n```\n\nBy default, this definition maps the following directories to the nimbus. If you want to override the default storm configs, \ncopy a modified storm.yaml configuration file to /nfs/indycar/config directory. Note that this directory will be created inside the minikube VM.\n\n```json\n{\n\"volumes\": [\n      {\n        \"name\": \"topologies\",\n        \"hostPath\": {\n          \"path\": \"/nfs/indycar/data\"\n        }\n      },\n      {\n        \"name\": \"config\",\n        \"hostPath\": {\n          \"path\": \"/nfs/indycar/config\"\n        }\n      }\n    ]\n}\n```\n\n## STEP 4 : Deploying Storm Dashboard(Optional)\n\nStorm dashboard can be deployed as follows.\n\n```bash\nkubectl create -f storm-ui.json\nkubectl create -f storm-ui-service.json\n```\n\nNow execute following command to get the IP of the minikube VM.\n\n```bash\nminikube ip\n```\n\nExecute following command to determine the port that has been assigned for strom ui.\n\n```bash\nkubectl get services\n```\n\nThis should give an output similar to below.\n\n```bash\nstorm-ui                    NodePort    10.98.10.86      <none>        8080:30336/TCP                    5d\n```\n\nNow you should be able to access the storm ui via a web browser.\n\n```bash\nhttp://<minikube ip>:30366\n```\n\n## STEP 5 : Deploy Strom Supervisors\n\nStrom supervisors should be dynamically scalable. So we deploy them as a Kubernetes replication controller.\n\nIn storm-worker-controller.json adjust the resource requirements as per your requirement.\n\n```json\n{\n  \"resources\": {\n              \"limits\": {\n                \"cpu\": \"11\",\n                \"memory\": \"100G\"\n              }\n            }\n}\n```\n\n ```bash\nkubectl create -f storm-worker-controller.json\n```\n\n## STEP 6 : Deploy Apollo Broker\n\nWe use Apache Apollo broker to enable communication between components(Processes, Pods, Nodes).\n\nApollo broker can be deployed as follows.\n\n```bash\nkubectl create -f activemq-apollo.json\nkubectl create -f activemq-apollo-service.json\n```\n\n## STEP 7 : Deploy IndyCar Socket Server\n\nIndyCar socket server will be used as both the log file streamer, and the backend for the IndyCar web application.\n\n```bash\nkubectl create -f socket-server.yaml\n```\n\nChange the below parameters appropriately.\n\n```json\nargs: [\"java\", \"-jar\", \"server.jar\",\"/data/logs/eRPGenerator_TGMLP_20170528_Indianapolis500_Race.log\",\"tcp://activemq-apollo:61613\",\"33\",\"2017\",\"compact_topology_out_2017\"]\n```\n\n``/data/logs/eRPGenerator_TGMLP_20170528_Indianapolis500_Race.log`` is the absolute path to the log file. Copy the log files to the ``/nfs/indycar/datalogs`` of the  minkube VM.\n\n``tcp://activemq-apollo:61613`` is the URL of the apollo broker. This can be kept with this default setting.\n\n``33`` is the number of cars to stream. Reduce this number, if you don't want to stream all 33 cars.\n\n``2017`` is the prefix that will be used when creating broker topics. This can be used to support multiple streams of multiple years within the same cluster.\n\n``compact_topology_out_2017`` is the output topic name. Storm workers should publish the processed data back to this topic.\n\n\nSimilar to the Storm-UI you can determine the port assigned for socket server by executing ``kubectl get services`` command.\n\n## STEP 8 : Building Strom Topology\n\nPre requisite: Apache Maven\n\nNavigate to the ``streaming`` directory at the root of IndyCar repository and execute below command to build the storm topology.\n\n```bash\nmvn clean install\n```\n\nNow copy the ``target/Indycar500-33-HTMBaseline-1.0-SNAPSHOT.jar`` to the ``/nfs/indycar/data`` directory of minikube VM.\n\n## STEP 9 : Starting dashboard client application.\n\nPre requisite: Node Package Manager(NPM)\n\nNavigate to the ``dashboard`` directory at the root of IndyCar repository.\n\nChange the following line of ``src/index.js`` file to point to the IP and the port of the Socket Sever.\n\n```javascript\nlet socketService = new SocketService(\"149.165.150.51\", 31623, store);\n//let socketService = new SocketService(\"<minikube ip>\", <socket server port>, store);\n```\n\nNow execute below command within the ``dashboard``  directory to download the required dependencies.\n\n```bash\nnpm install\n```\n\nNow execute below command to start the dashboard locally.\n\n```bash\nnpm start\n```\n\nNow you will be able to access the dashboard from a web browser.\n\nhttp://localhost:3000\n\n## STEP 8 : Deploy Jupiter Notebook\n\nJupyter notebook can be used to easily deploy the IndyCar anomaly detection cells and test new components.\n\n```bash\nkubectl create -f jupyter.yaml\n```\n\nSimilar to Storm-UI use ``kubectl get services`` command to determine the port assigned for the notebook.\n\nNow upload IndyCar-API.ipynb to your notebook server and use it appropriately.\n\n## STEP 9 : Using python package\n\nAfter completing upto Step 8, you have all the tools deployed to test/run your streaming processing application.\n\nOptionally, you can use iuindycar package to make the deployment easier.\n\n```bash\npip install iuindycar\n```\n\nNow import the iuindycar package to your notebook as follows\n\n```python\nimport iuindycar.Orchestrator as iui\n```\n\nYou can create an instance of Orchestrator as follows.\n\n```python\noc = iui.Orchestrator(iui.Config(<pass your k8 token here>))\n```\n\nThe only mandatory parameter to the Config object is kubernetes token. But you have the flexibility to change\nthe default parameters of the config object. Please refer below URL for more information.\n\nhttps://github.com/DSC-SPIDAL/IndyCar/blob/070bd2ac546a39756f4a5c839dbf1f3a1d700d20/containerize/python/iuindycar/Orchestrator.py#L225\n\n### Deploying a new stream\n\n```python\ncell =  iui.DetectionCell(storm_jar=\"Indycar500-33-HTMBaseline-1.0-SNAPSHOT.jar\",\n                          class_name=\"com.dsc.iu.streaming.LSTMAnomalyDetectionTask\")\noc.deploy_stream(<unique name for the stream>,<input data topic>,<output data topic>, detection_cell=cell)\noc.deploy_stream(\"indycar-22\",\"22\",\"compact_topology_out\")\n```\n\n### Killing an existing stream\n\n```python\noc.kill_stream(<unique name for the stream>)\noc.kill_stream(\"indycar-22\")\n```\n\n### Inspecting a broker topic\n\nTo make the debugging and testing easier, you can listen to the broker topics using the Orchestrator object as follows.\n\n```python\nstream = oc.probe_topic(<topic name>) # stream = oc.probe_topic(\"22\")\nstream.loop_forever()\n```\n\nIn addition to the loop_forver() option, you can use any of the functions provided by paho-mqtt package.\n\nhttps://pypi.org/project/paho-mqtt/\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DSC-SPIDAL/IndyCar",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "iuindycar",
    "package_url": "https://pypi.org/project/iuindycar/",
    "platform": "",
    "project_url": "https://pypi.org/project/iuindycar/",
    "project_urls": {
      "Homepage": "https://github.com/DSC-SPIDAL/IndyCar"
    },
    "release_url": "https://pypi.org/project/iuindycar/0.0.8/",
    "requires_dist": [
      "kubernetes",
      "paho-mqtt"
    ],
    "requires_python": ">=3.6",
    "summary": "This package can be used to communicate with the stream processing kubernetes cluster",
    "version": "0.0.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7545607,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c4791b99b3d105bd0ddeefeafa0b44df4aac80c42407dbd6d2cfe91e789d1af",
          "md5": "79bf4b1731f8b3bb1fde48b49d552fd7",
          "sha256": "447ccd850659542da06c428a4e82b0427b574d72a93c4e0e951623edff88f1e9"
        },
        "downloads": -1,
        "filename": "iuindycar-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79bf4b1731f8b3bb1fde48b49d552fd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7761,
        "upload_time": "2020-06-19T17:58:09",
        "upload_time_iso_8601": "2020-06-19T17:58:09.473675Z",
        "url": "https://files.pythonhosted.org/packages/7c/47/91b99b3d105bd0ddeefeafa0b44df4aac80c42407dbd6d2cfe91e789d1af/iuindycar-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e2e83905b5e825eba52dbeb6eabacbfe52e9318662ad8c1f730380e31d8c499",
          "md5": "ff2af05ae1d048f1f474bbe6181550b0",
          "sha256": "4b40183b60d2acccdf1770e7c8f8b7fc569edceef662e43d2381fd00d255d30d"
        },
        "downloads": -1,
        "filename": "iuindycar-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff2af05ae1d048f1f474bbe6181550b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10931,
        "upload_time": "2020-06-19T18:00:28",
        "upload_time_iso_8601": "2020-06-19T18:00:28.198786Z",
        "url": "https://files.pythonhosted.org/packages/9e/2e/83905b5e825eba52dbeb6eabacbfe52e9318662ad8c1f730380e31d8c499/iuindycar-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e85fafc4eb60b01c73a61e71fd1b9a5718836b5e8377fae6aec9c1978d93acf4",
          "md5": "d0a67a09531292d2f9d15cd1bd1588c6",
          "sha256": "84b26f830f46048bdb5ced30e8c778288e91106fac3568e1fecfbe7cdd9d698c"
        },
        "downloads": -1,
        "filename": "iuindycar-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0a67a09531292d2f9d15cd1bd1588c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10956,
        "upload_time": "2020-06-19T18:08:29",
        "upload_time_iso_8601": "2020-06-19T18:08:29.800347Z",
        "url": "https://files.pythonhosted.org/packages/e8/5f/afc4eb60b01c73a61e71fd1b9a5718836b5e8377fae6aec9c1978d93acf4/iuindycar-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49b864432c317c68c2f582338fa716b1d6f0d1fd70b249ef049c8264537c1807",
          "md5": "76a2e3a660423497355b9f0ca75aa6a1",
          "sha256": "7847735f2b4600f0c07c132177e8e92d419d29163d5dd3dec2be9e304dbfa3a8"
        },
        "downloads": -1,
        "filename": "iuindycar-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76a2e3a660423497355b9f0ca75aa6a1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10955,
        "upload_time": "2020-06-19T18:19:20",
        "upload_time_iso_8601": "2020-06-19T18:19:20.075334Z",
        "url": "https://files.pythonhosted.org/packages/49/b8/64432c317c68c2f582338fa716b1d6f0d1fd70b249ef049c8264537c1807/iuindycar-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe83fbad572c4446b582c46ddffddd1c10689bb883d55bad0525e0416c023797",
          "md5": "2734d3d1cf314e77f74392ac9991d050",
          "sha256": "9c12e91d723cbfc0d0b6408e021a018ea1d2a2ae226cefd7b4e557f56e099bdc"
        },
        "downloads": -1,
        "filename": "iuindycar-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2734d3d1cf314e77f74392ac9991d050",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11532,
        "upload_time": "2020-06-19T18:30:04",
        "upload_time_iso_8601": "2020-06-19T18:30:04.964983Z",
        "url": "https://files.pythonhosted.org/packages/fe/83/fbad572c4446b582c46ddffddd1c10689bb883d55bad0525e0416c023797/iuindycar-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "598dd8659e9e29a22a59150365b3c80738cd52d58d3bb8923b43a4fa2547b00e",
          "md5": "42474700e5028b0307f7eec7b0273c09",
          "sha256": "1465ecb6ea5b39bbdb137a96f751cd442ab0c5f1b544f39b4b9d11a7ad6806e8"
        },
        "downloads": -1,
        "filename": "iuindycar-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "42474700e5028b0307f7eec7b0273c09",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11612,
        "upload_time": "2020-06-23T02:23:41",
        "upload_time_iso_8601": "2020-06-23T02:23:41.669455Z",
        "url": "https://files.pythonhosted.org/packages/59/8d/d8659e9e29a22a59150365b3c80738cd52d58d3bb8923b43a4fa2547b00e/iuindycar-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96eee6078fcfccd76a465d086935de47fa7872dc3a80c895b34b582a9b4074e7",
          "md5": "57b56b4f482b87328c05c779dc68d280",
          "sha256": "8d66948e495181094a7e6ad55fff74ea737619b6fc4863c948eae84de7ae0432"
        },
        "downloads": -1,
        "filename": "iuindycar-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "57b56b4f482b87328c05c779dc68d280",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11606,
        "upload_time": "2020-06-23T02:31:31",
        "upload_time_iso_8601": "2020-06-23T02:31:31.452018Z",
        "url": "https://files.pythonhosted.org/packages/96/ee/e6078fcfccd76a465d086935de47fa7872dc3a80c895b34b582a9b4074e7/iuindycar-0.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da5329e06cfd31a2fb25581c0446f269ab2af1145082a1a647dcacb780e527c7",
          "md5": "fe2a3f7d757255387630dce099f5ab52",
          "sha256": "245b2ae346a2d078c50bd2bee49ff92d882b2136164eeaae74bf0142839ce8e8"
        },
        "downloads": -1,
        "filename": "iuindycar-0.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe2a3f7d757255387630dce099f5ab52",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11768,
        "upload_time": "2020-06-23T20:08:07",
        "upload_time_iso_8601": "2020-06-23T20:08:07.395003Z",
        "url": "https://files.pythonhosted.org/packages/da/53/29e06cfd31a2fb25581c0446f269ab2af1145082a1a647dcacb780e527c7/iuindycar-0.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "da5329e06cfd31a2fb25581c0446f269ab2af1145082a1a647dcacb780e527c7",
        "md5": "fe2a3f7d757255387630dce099f5ab52",
        "sha256": "245b2ae346a2d078c50bd2bee49ff92d882b2136164eeaae74bf0142839ce8e8"
      },
      "downloads": -1,
      "filename": "iuindycar-0.0.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe2a3f7d757255387630dce099f5ab52",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11768,
      "upload_time": "2020-06-23T20:08:07",
      "upload_time_iso_8601": "2020-06-23T20:08:07.395003Z",
      "url": "https://files.pythonhosted.org/packages/da/53/29e06cfd31a2fb25581c0446f269ab2af1145082a1a647dcacb780e527c7/iuindycar-0.0.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}