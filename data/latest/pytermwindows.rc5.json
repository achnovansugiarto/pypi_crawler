{
  "info": {
    "author": "Noah H. Kleinschmidt",
    "author_email": "noah.kleinschmidt@students.unibe.ch",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyTermWindows\n[![PyPI version](https://badge.fury.io/py/pytermwindows.svg)](https://badge.fury.io/py/pytermwindows)\n[![Documentation Status](https://readthedocs.org/projects/pytermwindows/badge/?version=latest)](https://pytermwindows.readthedocs.io/en/latest/?badge=latest)\n[![CodeFactor](https://www.codefactor.io/repository/github/noahhenrikkleinschmidt/pytermwindows/badge)](https://www.codefactor.io/repository/github/noahhenrikkleinschmidt/pytermwindows)\n\n\nThis is `PyTermWindows` a `curses`-based package defining the basic `Window` and `ScrollWindow` classes to display data through a terminal window. The classes are proxies for an `curses.stdscr` (called _window_) and allow easy setup, and access to key properties. Also, through atrributes such as `next_line` or `first_line` they allow readable and dynamic content addition. \n\nThe code of the `ScrollWindow` class was especially inspired by [mingrammer's great scroll window example](https://github.com/mingrammer/python-curses-scroll-example). If you are interested in learning more about scrolling terminal windows, check it out!\n\nInstallation\n------------\n\n```\npip install pytermwindows\n```\n\nExamples\n--------\n\nThe useage is relatively simple. We create a new window class, let it inherit from either `Window` or `ScrollWindow` and define a custom `contents` method to add contents to the window. Then, we can set up a window instance in our code, and use the `run` method to activate the window. \n\n```python\nclass MyWindow( Window ):\n\n    def contents( self, **kwargs ):\n        \"\"\"\n        Here will be our own contents.\n\n        Note\n        ----\n        The kwargs are passed down from the `run` method to the `contents` method...\n\n        \"\"\"\n        # write a header\n        self.write( \n                    # the line to write to\n                    self.to_first_line, \n                    # the position within the line to start writing\n                    0,\n                    # the text to display\n                    \"This is my great window\"\n                )\n        \n        # and an underline\n        self.write( self.to_next_line, 0, \"-\" * 50 )\n\n        # add some responsiveness to the window\n\n        # get the keypress event as a string (we could use self.keycode to get the ord code instead)\n        # both keystring and keycode will be None in case no keys were pressed.\n        key = self.keystring\n\n        if key is not None:\n            self.write( self.to_next_line, 0, f\"You pressed '{key}'...\" )\n            \n        # now let the window quit if we press \"q\"\n        # we could either use the string or the numeric (ord) code\n        self.quit_on( keystring = \"q\" )\n\n        # finally, we need to refresh\n        self.refresh()\n\n\n# and now run our window\nmywindow = MyWindow( height = 10, width = 50 )\nmywindow.run()\n```\n\nThe resulting window looks like this:\n\n```\nThis is my great window\n--------------------------------------------------\nYou pressed 'g'...\n\n```\n\nA more complex example of a ScrollWindow: Let's say we have a data file we wish to read from every few seconds and display the lines in a ScrollWindow. To make that easier, the `Window` class (and by inheritance also the ScrollWindow) offers a `set_update_interval` method that will control an external timer to allow method calling outside of the window-frame updating timescale.\n\n```python\n\nclass MyScroller( ScrollWindow ):\n        \"\"\"\n        This class shall read my log file and display the lines.\n\n        Parameters\n        ----------\n        \n        filename : str\n            The file to read.\n        \n        **kwargs\n            Any keyword arguments to be passed to the ScrollWindow constructor.\n        \"\"\"\n        def __init__( self, filename, **kwargs ):\n            super().__init__( **kwargs )\n            self.file = filename\n            self.file_contents = None # and setup the attribute to store the contents of the log file.\n        \n        def read( self ):\n            \"\"\"\n            Read the given file.\n            \n            Returns\n            -------\n            list\n                A list of lines in the file.\n            \"\"\"\n            with open( self.file, \"r\" ) as f:\n                return f.readlines() \n        \n        def contents( self, **kwargs ):\n            \"\"\"\n            The contents of our Logfile\n            \"\"\"\n\n            # write a nice header again\n            self.write( self.to_first_line, 0, f\"File: {self.file}\" )\n            self.write( self.to_next_line, 0, \"-\" * 50 )\n\n            # now read the file the first time (None), or whenever \n            # our update timer says it's okey to read again.\n            if self.can_update() or self.file_contents is None : \n                self.file_contents = self.read()\n                \n            # now display our data. We need to crop the data to the scroll range in order to only display\n            # a subset of the data \n            data = self.file_contents[ self.scroll_range( as_slice = True ) ]\n            for line in data:\n                self.write( self.to_next_line, 0, line )\n\n            # now we need to enable the scrolling functionality.\n            # ScrollWindow offers the handy method auto_scroll that will adjust the \n            # scroll range for us. Using the restrict argument we make sure that we \n            # keep all of our data in the scrolling window and not scroll out of window...\n            self.auto_scroll( restrict = len(self.file_contents) ) \n\n            # now we make sure we can exit again\n            self.quit_on( keystring = \"q\" )\n\n            # AND we MUST NOT FORGET increment the UPDATE COUNTER for file reading!\n            self.update_counter()\n\n            # finally we can refresh the window and we're done...\n            self.refresh()\n\n\n# now we can use our window as:\nmyscroller = MyScroller( \"my_file.txt\", height = 20, width = 100 )\n\n# setup the update interval as (approx) every 10 seconds\n# hence, our log file contents will be updated every 10 seconds\nmyscroller.set_update_interval( 10 )\n\n# and set the scroll range (i.e. how many data lines to display)\n# let's say 5 lines at a time.\nmyscroller.set_scroll_range( 5 )\n\nmyscroller.run()\n```\n\nThe resulting window looks like this:\n\n```\nFile: ~/GIT/pyTermWindows/my_file.txt\n--------------------------------------------------\n8888757      pall smk-roh- lzeitler PD       0:00      1 (AssocMaxJobsLimit)\n8888758      pall smk-roh- lzeitler PD       0:00      1 (AssocMaxJobsLimit)\n8888734      pall smk-sim- lzeitler PD       0:00      1 (AssocMaxJobsLimit)\n8888735      pall smk-sim- lzeitler PD       0:00      1 (AssocMaxJobsLimit)\n8888736      pall smk-sim- lzeitler PD       0:00      1 (AssocMaxJobsLimit)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NoahHenrikKleinschmidt/PyTermWindows",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytermwindows",
    "package_url": "https://pypi.org/project/pytermwindows/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytermwindows/",
    "project_urls": {
      "Homepage": "https://github.com/NoahHenrikKleinschmidt/PyTermWindows"
    },
    "release_url": "https://pypi.org/project/pytermwindows/0.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A package to generate responsive terminal windows in Python",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14751883,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4293b0e0d76bcb999e0f24e2ad40ad9585796772f47da288ca756b1e2ece4d11",
          "md5": "e8fc2c5eb109de93ece00ad57c89b6b7",
          "sha256": "570105510440f6fd7d0755456554429cb8411914c69f3066dfce20f51e178f3a"
        },
        "downloads": -1,
        "filename": "pytermwindows-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e8fc2c5eb109de93ece00ad57c89b6b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22839,
        "upload_time": "2022-08-13T15:49:34",
        "upload_time_iso_8601": "2022-08-13T15:49:34.060281Z",
        "url": "https://files.pythonhosted.org/packages/42/93/b0e0d76bcb999e0f24e2ad40ad9585796772f47da288ca756b1e2ece4d11/pytermwindows-0.0.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfbd1357dca64e6e34f72a5a2cebe36308359e6b049f2ea3362a99b40d29b52e",
          "md5": "0438e5ab34ca2fb892c2399bb025a076",
          "sha256": "f2ac0236eb9371d404e55e4ff1b89edf4e34a991d64a6ba96c955acfcc06c0db"
        },
        "downloads": -1,
        "filename": "pytermwindows-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0438e5ab34ca2fb892c2399bb025a076",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21203,
        "upload_time": "2022-08-13T15:49:35",
        "upload_time_iso_8601": "2022-08-13T15:49:35.928378Z",
        "url": "https://files.pythonhosted.org/packages/cf/bd/1357dca64e6e34f72a5a2cebe36308359e6b049f2ea3362a99b40d29b52e/pytermwindows-0.0.1.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82d5674d9cffa615dd07d526fd7abe1e5492c8bda20ff09543c6b0c8321cc436",
          "md5": "a7755a265b242e235d7487fb7641ce1c",
          "sha256": "4847888d077580c71f84d23214c973e44c307f1b2dd9ac4aa7229c4c41862370"
        },
        "downloads": -1,
        "filename": "pytermwindows-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7755a265b242e235d7487fb7641ce1c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22928,
        "upload_time": "2022-08-13T16:36:30",
        "upload_time_iso_8601": "2022-08-13T16:36:30.225192Z",
        "url": "https://files.pythonhosted.org/packages/82/d5/674d9cffa615dd07d526fd7abe1e5492c8bda20ff09543c6b0c8321cc436/pytermwindows-0.0.2-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e358e1bdc3342462c53521ef8d6856d4fb9f105a3c69dcc1eaf4019761cc7eda",
          "md5": "ff0f70398d10cd4c60d38cecba80dd98",
          "sha256": "0bc6cc826b19debd7a1919d5866650c7cc6d87e90b894b76ac51c8f89337e74b"
        },
        "downloads": -1,
        "filename": "pytermwindows-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ff0f70398d10cd4c60d38cecba80dd98",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21288,
        "upload_time": "2022-08-13T16:36:33",
        "upload_time_iso_8601": "2022-08-13T16:36:33.956390Z",
        "url": "https://files.pythonhosted.org/packages/e3/58/e1bdc3342462c53521ef8d6856d4fb9f105a3c69dcc1eaf4019761cc7eda/pytermwindows-0.0.2.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb9e352fc1518078857662e874d28e7336b8c937edd483de8f753754c2d5e43c",
          "md5": "b645df7481fd888a6b3eec4030c70dd8",
          "sha256": "7c67f3cd2e19a12e2565aefc05d02b77e043fe313e292977df0e3af1e3bc4805"
        },
        "downloads": -1,
        "filename": "pytermwindows-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b645df7481fd888a6b3eec4030c70dd8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23161,
        "upload_time": "2022-08-13T20:39:55",
        "upload_time_iso_8601": "2022-08-13T20:39:55.615012Z",
        "url": "https://files.pythonhosted.org/packages/bb/9e/352fc1518078857662e874d28e7336b8c937edd483de8f753754c2d5e43c/pytermwindows-0.0.3-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1110b586b07b686c9bb4c79272bdd87b623bd44d93ed0bdf340bfffa34b4a74",
          "md5": "9c42bc6552bcf282d2093b69ee37f54d",
          "sha256": "d63b434d3093e16b1e6a36d775fe5f8229b39a276f7dd70e20c9310a0d1e11d9"
        },
        "downloads": -1,
        "filename": "pytermwindows-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9c42bc6552bcf282d2093b69ee37f54d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21566,
        "upload_time": "2022-08-13T20:39:57",
        "upload_time_iso_8601": "2022-08-13T20:39:57.595481Z",
        "url": "https://files.pythonhosted.org/packages/b1/11/0b586b07b686c9bb4c79272bdd87b623bd44d93ed0bdf340bfffa34b4a74/pytermwindows-0.0.3.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dae9e51540430be418e5c58e40632f3de6067d475d815b060b9bac249ba38d43",
          "md5": "347e12268c460ce6a46bc74fc0aa5ce2",
          "sha256": "15f1f5123fc05b84cdecc13d813df5b309692e2d72b4f06634132f19efbd364a"
        },
        "downloads": -1,
        "filename": "pytermwindows-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "347e12268c460ce6a46bc74fc0aa5ce2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23376,
        "upload_time": "2022-08-13T21:45:47",
        "upload_time_iso_8601": "2022-08-13T21:45:47.527935Z",
        "url": "https://files.pythonhosted.org/packages/da/e9/e51540430be418e5c58e40632f3de6067d475d815b060b9bac249ba38d43/pytermwindows-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "309f714147cf77633f7abff10e0d8ac24c739281754180f08f637bfb7a360094",
          "md5": "10257ba9a82d4a9c935530aa3553b989",
          "sha256": "b52f45e0607ee6e6b1e1ac6d87cf27457daa8847ba6f65327891ec922d90abce"
        },
        "downloads": -1,
        "filename": "pytermwindows-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "10257ba9a82d4a9c935530aa3553b989",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21788,
        "upload_time": "2022-08-13T21:45:49",
        "upload_time_iso_8601": "2022-08-13T21:45:49.106423Z",
        "url": "https://files.pythonhosted.org/packages/30/9f/714147cf77633f7abff10e0d8ac24c739281754180f08f637bfb7a360094/pytermwindows-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ecf755a9abb4538a8e3e3c20a6ff5caabc5ddc0a3824c837aca60370317c5b8",
          "md5": "deea157ee5869117e883e0c2afce1839",
          "sha256": "fc677f0274d412efe0f7b70869d666d74d87246760ba573b72bef4c3cd4c4b52"
        },
        "downloads": -1,
        "filename": "pytermwindows-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "deea157ee5869117e883e0c2afce1839",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23383,
        "upload_time": "2022-08-13T21:58:44",
        "upload_time_iso_8601": "2022-08-13T21:58:44.546204Z",
        "url": "https://files.pythonhosted.org/packages/5e/cf/755a9abb4538a8e3e3c20a6ff5caabc5ddc0a3824c837aca60370317c5b8/pytermwindows-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a80f4a238f056f1c4609c2f8ce4f881e80e82a5b0f08f0e7e3be14866f7bc3a",
          "md5": "98a46497a921876fb0d2b84288be1944",
          "sha256": "49dc9451f73ccbaa2df542ac3ff405f17ba35f808959eae6a11ae9c2a0962086"
        },
        "downloads": -1,
        "filename": "pytermwindows-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "98a46497a921876fb0d2b84288be1944",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21808,
        "upload_time": "2022-08-13T21:58:46",
        "upload_time_iso_8601": "2022-08-13T21:58:46.686721Z",
        "url": "https://files.pythonhosted.org/packages/9a/80/f4a238f056f1c4609c2f8ce4f881e80e82a5b0f08f0e7e3be14866f7bc3a/pytermwindows-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5ecf755a9abb4538a8e3e3c20a6ff5caabc5ddc0a3824c837aca60370317c5b8",
        "md5": "deea157ee5869117e883e0c2afce1839",
        "sha256": "fc677f0274d412efe0f7b70869d666d74d87246760ba573b72bef4c3cd4c4b52"
      },
      "downloads": -1,
      "filename": "pytermwindows-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "deea157ee5869117e883e0c2afce1839",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 23383,
      "upload_time": "2022-08-13T21:58:44",
      "upload_time_iso_8601": "2022-08-13T21:58:44.546204Z",
      "url": "https://files.pythonhosted.org/packages/5e/cf/755a9abb4538a8e3e3c20a6ff5caabc5ddc0a3824c837aca60370317c5b8/pytermwindows-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a80f4a238f056f1c4609c2f8ce4f881e80e82a5b0f08f0e7e3be14866f7bc3a",
        "md5": "98a46497a921876fb0d2b84288be1944",
        "sha256": "49dc9451f73ccbaa2df542ac3ff405f17ba35f808959eae6a11ae9c2a0962086"
      },
      "downloads": -1,
      "filename": "pytermwindows-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "98a46497a921876fb0d2b84288be1944",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21808,
      "upload_time": "2022-08-13T21:58:46",
      "upload_time_iso_8601": "2022-08-13T21:58:46.686721Z",
      "url": "https://files.pythonhosted.org/packages/9a/80/f4a238f056f1c4609c2f8ce4f881e80e82a5b0f08f0e7e3be14866f7bc3a/pytermwindows-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}