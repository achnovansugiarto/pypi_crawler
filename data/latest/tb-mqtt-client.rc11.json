{
  "info": {
    "author": "ThingsBoard",
    "author_email": "info@thingsboard.io",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# ThingsBoard MQTT and HTTP client Python SDK\n[![Join the chat at https://gitter.im/thingsboard/chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/thingsboard/chat?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n<a href=\"https://thingsboard.io\"><img src=\"./logo.png?raw=true\" width=\"100\" height=\"100\"></a>\n\nThingsBoard is an open-source IoT platform for data collection, processing, visualization, and device management.\nThis project ia a Python library that provides convenient client SDK for both Device and [Gateway](https://thingsboard.io/docs/reference/gateway-mqtt-api/) APIs.\n\nSDK supports:\n- Unencrypted and encrypted (TLS v1.2) connection\n- QoS 0 and 1 (MQTT only)\n- Automatic reconnect\n- All [Device MQTT](https://thingsboard.io/docs/reference/mqtt-api/) APIs provided by ThingsBoard\n- All [Gateway MQTT](https://thingsboard.io/docs/reference/gateway-mqtt-api/) APIs provided by ThingsBoard\n- Most [Device HTTP](https://thingsboard.io/docs/reference/http-api/) APIs provided by ThingsBoard\n  - Device Claiming and Firmware updates are not supported yet.\n\nThe [Device MQTT](https://thingsboard.io/docs/reference/mqtt-api/) API and the [Gateway MQTT](https://thingsboard.io/docs/reference/gateway-mqtt-api/) API are base on the Paho MQTT library. The [Device HTTP](https://thingsboard.io/docs/reference/http-api/) API is based on the Requests library.\n\n## Installation\n\nTo install using pip:\n\n```bash\npip3 install tb-mqtt-client\n```\n\n## Getting Started\n\nClient initialization and telemetry publishing\n### MQTT\n```python\nfrom tb_device_mqtt import TBDeviceMqttClient, TBPublishInfo\ntelemetry = {\"temperature\": 41.9, \"enabled\": False, \"currentFirmwareVersion\": \"v1.2.2\"}\nclient = TBDeviceMqttClient(\"127.0.0.1\", \"A1_TEST_TOKEN\")\n# Connect to ThingsBoard\nclient.connect()\n# Sending telemetry without checking the delivery status\nclient.send_telemetry(telemetry) \n# Sending telemetry and checking the delivery status (QoS = 1 by default)\nresult = client.send_telemetry(telemetry)\n# get is a blocking call that awaits delivery status  \nsuccess = result.get() == TBPublishInfo.TB_ERR_SUCCESS\n# Disconnect from ThingsBoard\nclient.disconnect()\n```\n\n### MQTT using TLS\n\nTLS connection to localhost. See https://thingsboard.io/docs/user-guide/mqtt-over-ssl/ for more information about client and ThingsBoard configuration.\n\n```python\nfrom tb_device_mqtt import TBDeviceMqttClient\nimport socket\nclient = TBDeviceMqttClient(socket.gethostname())\nclient.connect(tls=True,\n               ca_certs=\"mqttserver.pub.pem\",\n               cert_file=\"mqttclient.nopass.pem\")\nclient.disconnect()\n```\n\n### HTTP\n\n````python\nfrom tb_device_http import TBHTTPDevice\n\nclient = TBHTTPDevice('https://thingsboard.example.com', 'secret-token')\nclient.connect()\nclient.send_telemetry({'temperature': 41.9})\n````\n\n## Using Device APIs\n\n**TBDeviceMqttClient** provides access to Device MQTT APIs of ThingsBoard platform. It allows to publish telemetry and attribute updates, subscribe to attribute changes, send and receive RPC commands, etc. Use **TBHTTPClient** for the Device HTTP API.\n#### Subscription to attributes\n##### MQTT\n```python\nimport time\nfrom tb_device_mqtt import TBDeviceMqttClient\n\ndef on_attributes_change(client, result, exception):\n    if exception is not None:\n        print(\"Exception: \" + str(exception))\n    else:\n        print(result)\n\nclient = TBDeviceMqttClient(\"127.0.0.1\", \"A1_TEST_TOKEN\")\nclient.connect()\nclient.subscribe_to_attribute(\"uploadFrequency\", on_attributes_change)\nclient.subscribe_to_all_attributes(on_attributes_change)\nwhile True:\n    time.sleep(1)\n```\n\n##### HTTP\nNote: The HTTP API only allows a subscription to updates for all attribute.\n```python\nfrom tb_device_http import TBHTTPClient\nclient = TBHTTPClient('https://thingsboard.example.com', 'secret-token')\n\ndef callback(data):\n    print(data)\n    # ...\n\n# Subscribe\nclient.subscribe('attributes', callback)\n# Unsubscribe\nclient.unsubscribe('attributes')\n```\n\n#### Telemetry pack sending\n##### MQTT\n```python\nimport logging\nfrom tb_device_mqtt import TBDeviceMqttClient, TBPublishInfo\nimport time\ntelemetry_with_ts = {\"ts\": int(round(time.time() * 1000)), \"values\": {\"temperature\": 42.1, \"humidity\": 70}}\nclient = TBDeviceMqttClient(\"127.0.0.1\", \"A1_TEST_TOKEN\")\n# we set maximum amount of messages sent to send them at the same time. it may stress memory but increases performance\nclient.max_inflight_messages_set(100)\nclient.connect()\nresults = []\nresult = True\nfor i in range(0, 100):\n    results.append(client.send_telemetry(telemetry_with_ts))\nfor tmp_result in results:\n    result &= tmp_result.get() == TBPublishInfo.TB_ERR_SUCCESS\nprint(\"Result \" + str(result))\nclient.disconnect()\n```\n##### HTTP\nUnsupported, the HTTP API does not allow the packing of values.\n\n#### Request attributes from server\n##### MQTT\n```python\nimport logging\nimport time\nfrom tb_device_mqtt import TBDeviceMqttClient\n\ndef on_attributes_change(client,result, exception:\n    if exception is not None:\n        print(\"Exception: \" + str(exception))\n    else:\n        print(result)\n\nclient = TBDeviceMqttClient(\"127.0.0.1\", \"A1_TEST_TOKEN\")\nclient.connect()\nclient.request_attributes([\"configuration\",\"targetFirmwareVersion\"], callback=on_attributes_change)\nwhile True:\n    time.sleep(1)\n```\n##### HTTP\n```python\nfrom tb_device_http import TBHTTPClient\nclient = TBHTTPClient('https://thingsboard.example.com', 'secret-token')\n\nclient_keys = ['attr1', 'attr2']\nshared_keys = ['shared1', 'shared2']\ndata = client.request_attributes(client_keys=client_keys, shared_keys=shared_keys)\n```\n\n#### Respond to server RPC call\n##### MQTT\n```python\nimport psutil\nimport time\nimport logging\nfrom tb_device_mqtt import TBDeviceMqttClient\n\n# dependently of request method we send different data back\ndef on_server_side_rpc_request(client, request_id, request_body):\n    print(request_id, request_body)\n    if request_body[\"method\"] == \"getCPULoad\":\n        client.send_rpc_reply(request_id, {\"CPU percent\": psutil.cpu_percent()})\n    elif request_body[\"method\"] == \"getMemoryUsage\":\n        client.send_rpc_reply(request_id, {\"Memory\": psutil.virtual_memory().percent})\n\nclient = TBDeviceMqttClient(\"127.0.0.1\", \"A1_TEST_TOKEN\")\nclient.set_server_side_rpc_request_handler(on_server_side_rpc_request)\nclient.connect()\nwhile True:\n    time.sleep(1)\n```\n\n##### HTTP\n```python\nfrom tb_device_http import TBHTTPClient\nclient = TBHTTPClient('https://thingsboard.example.com', 'secret-token')\n\ndef callback(data):\n    rpc_id = data['id']\n    # ... do something with data['params'] and data['method']...\n    response_params = {'result': 1}\n    client.send_rpc(name='rpc_response', rpc_id=rpc_id, params=response_params)\n\n# Subscribe\nclient.subscribe('rpc', callback)\n# Unsubscribe\nclient.unsubscribe('rpc')\n```\n\n## Using Gateway APIs\n\n**TBGatewayMqttClient** extends **TBDeviceMqttClient**, thus has access to all it's APIs as a regular device.\nBesides, gateway is able to represent multiple devices connected to it. For example, sending telemetry or attributes on behalf of other, constrained, device. See more info about the gateway here: \n#### Telemetry and attributes sending \n```python\nimport time\nfrom tb_gateway_mqtt import TBGatewayMqttClient\ngateway = TBGatewayMqttClient(\"127.0.0.1\", \"GATEWAY_TEST_TOKEN\")\ngateway.connect()\ngateway.gw_connect_device(\"Test Device A1\")\n\ngateway.gw_send_telemetry(\"Test Device A1\", {\"ts\": int(round(time.time() * 1000)), \"values\": {\"temperature\": 42.2}})\ngateway.gw_send_attributes(\"Test Device A1\", {\"firmwareVersion\": \"2.3.1\"})\n\ngateway.gw_disconnect_device(\"Test Device A1\")\ngateway.disconnect()\n```\n#### Request attributes\n```python\nimport logging\nimport time\nfrom tb_gateway_mqtt import TBGatewayMqttClient\n\ndef callback(result, exception):\n    if exception is not None:\n        print(\"Exception: \" + str(exception))\n    else:\n        print(result)\n\ngateway = TBGatewayMqttClient(\"127.0.0.1\", \"TEST_GATEWAY_TOKEN\")\ngateway.connect()\ngateway.gw_request_shared_attributes(\"Test Device A1\", [\"temperature\"], callback)\n\nwhile True:\n    time.sleep(1)\n```\n#### Respond to RPC\n```python\nimport time\n\nfrom tb_gateway_mqtt import TBGatewayMqttClient\nimport psutil\n\ndef rpc_request_response(client, request_id, request_body):\n    # request body contains id, method and other parameters\n    print(request_body)\n    method = request_body[\"data\"][\"method\"]\n    device = request_body[\"device\"]\n    req_id = request_body[\"data\"][\"id\"]\n    # dependently of request method we send different data back\n    if method == 'getCPULoad':\n        gateway.gw_send_rpc_reply(device, req_id, {\"CPU load\": psutil.cpu_percent()})\n    elif method == 'getMemoryLoad':\n        gateway.gw_send_rpc_reply(device, req_id, {\"Memory\": psutil.virtual_memory().percent})\n    else:\n        print('Unknown method: ' + method)\n\ngateway = TBGatewayMqttClient(\"127.0.0.1\", \"TEST_GATEWAY_TOKEN\")\ngateway.connect()\n# now rpc_request_response will process rpc requests from servers\ngateway.gw_set_server_side_rpc_request_handler(rpc_request_response)\n# without device connection it is impossible to get any messages\ngateway.gw_connect_device(\"Test Device A1\")\nwhile True:\n    time.sleep(1)\n```\n## Other Examples\n\nThere are more examples for both [device](https://github.com/thingsboard/thingsboard-python-client-sdk/tree/master/examples/device) and [gateway](https://github.com/thingsboard/thingsboard-python-client-sdk/tree/master/examples/gateway) in corresponding [folders](https://github.com/thingsboard/thingsboard-python-client-sdk/tree/master/examples).\n\n## Support\n\n - [Community chat](https://gitter.im/thingsboard/chat)\n - [Q&A forum](https://groups.google.com/forum/#!forum/thingsboard)\n - [Stackoverflow](http://stackoverflow.com/questions/tagged/thingsboard)\n\n## Licenses\n\nThis project is released under [Apache 2.0 License](./LICENSE).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/thingsboard/thingsboard-python-client-sdk/archive/1.4.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/thingsboard/thingsboard-python-client-sdk",
    "keywords": "",
    "license": "Apache Software License (Apache Software License 2.0)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tb-mqtt-client",
    "package_url": "https://pypi.org/project/tb-mqtt-client/",
    "platform": null,
    "project_url": "https://pypi.org/project/tb-mqtt-client/",
    "project_urls": {
      "Download": "https://github.com/thingsboard/thingsboard-python-client-sdk/archive/1.4.1.tar.gz",
      "Homepage": "https://github.com/thingsboard/thingsboard-python-client-sdk"
    },
    "release_url": "https://pypi.org/project/tb-mqtt-client/1.4.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "ThingsBoard python client SDK",
    "version": "1.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15553557,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7d1bdcd88be8dd985efca2d26f848b15bd4ccf99ab1c55821f1889494db77a4",
          "md5": "df5155b07d387495fb026268637162f3",
          "sha256": "e0ed1116621c3b1752142a0368a7c930424d1b0119e5513301eae669a74efe18"
        },
        "downloads": -1,
        "filename": "tb_mqtt_client-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df5155b07d387495fb026268637162f3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.4*",
        "size": 8771,
        "upload_time": "2019-04-16T15:49:02",
        "upload_time_iso_8601": "2019-04-16T15:49:02.731749Z",
        "url": "https://files.pythonhosted.org/packages/e7/d1/bdcd88be8dd985efca2d26f848b15bd4ccf99ab1c55821f1889494db77a4/tb_mqtt_client-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9158e0e21e4b5fbf767b2ee34e04237e0488d5821cf5c2bf79326336ac8fab66",
          "md5": "2611ecfc434ba13cd024a9b39c5bc4dc",
          "sha256": "81ac24a27d5742ad5f9d32df468c06f2539de18deaa27dcd7406e9cc59ee3f15"
        },
        "downloads": -1,
        "filename": "tb_mqtt_client-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2611ecfc434ba13cd024a9b39c5bc4dc",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.4*",
        "size": 8545,
        "upload_time": "2019-04-17T09:13:18",
        "upload_time_iso_8601": "2019-04-17T09:13:18.363274Z",
        "url": "https://files.pythonhosted.org/packages/91/58/e0e21e4b5fbf767b2ee34e04237e0488d5821cf5c2bf79326336ac8fab66/tb_mqtt_client-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "accd31065b9c3e6ab202fcacbbfbb58a280bbaa1d302109aca67fbc7fdd6167a",
          "md5": "6e5fc1465d7c3b82986a39e7fb5640eb",
          "sha256": "de2625f931f0f124aeef65b6ac65a1040e75b0374304dc699c5f4a2a13887b28"
        },
        "downloads": -1,
        "filename": "tb_mqtt_client-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e5fc1465d7c3b82986a39e7fb5640eb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.4*",
        "size": 8599,
        "upload_time": "2019-04-17T11:48:44",
        "upload_time_iso_8601": "2019-04-17T11:48:44.980040Z",
        "url": "https://files.pythonhosted.org/packages/ac/cd/31065b9c3e6ab202fcacbbfbb58a280bbaa1d302109aca67fbc7fdd6167a/tb_mqtt_client-0.0.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f26c52fae1a9f2f6166c1a0bffcb5e5f2a4d41a73597d149bd467adee9df7401",
          "md5": "b5e1a006b4e04b7563414312bec236a8",
          "sha256": "429fd0a2cc8fd7962852aca9c4072e3cda5d26aa44c1d7d671e26acf20e58a39"
        },
        "downloads": -1,
        "filename": "tb_mqtt_client-0.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b5e1a006b4e04b7563414312bec236a8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.4*",
        "size": 8550,
        "upload_time": "2019-04-17T11:52:33",
        "upload_time_iso_8601": "2019-04-17T11:52:33.022214Z",
        "url": "https://files.pythonhosted.org/packages/f2/6c/52fae1a9f2f6166c1a0bffcb5e5f2a4d41a73597d149bd467adee9df7401/tb_mqtt_client-0.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e92c4c42607ed97028e7228ea4ef86d3447e645bd5702b52e988fe0db0d62600",
          "md5": "81b9906449f8f1d17ff724e836629557",
          "sha256": "f864d604d8a62e518659606ca52579b9602d54c63a7542f635ae51bcc4ea0ee2"
        },
        "downloads": -1,
        "filename": "tb_mqtt_client-0.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81b9906449f8f1d17ff724e836629557",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.4*",
        "size": 8549,
        "upload_time": "2019-04-17T12:25:42",
        "upload_time_iso_8601": "2019-04-17T12:25:42.612917Z",
        "url": "https://files.pythonhosted.org/packages/e9/2c/4c42607ed97028e7228ea4ef86d3447e645bd5702b52e988fe0db0d62600/tb_mqtt_client-0.0.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e668fe7cbefa0300cdbe30de45065f8b7312e09e5e7d2ac6f570835741c02b78",
          "md5": "a8a8a3a5e6b757c89dd9d79f587e1760",
          "sha256": "a9e0ed68bc6ef051201c62bd49637af3b5336e11739bf972d4c5403d0eba72cd"
        },
        "downloads": -1,
        "filename": "tb_mqtt_client-0.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8a8a3a5e6b757c89dd9d79f587e1760",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.4*",
        "size": 8546,
        "upload_time": "2019-04-17T12:28:26",
        "upload_time_iso_8601": "2019-04-17T12:28:26.649324Z",
        "url": "https://files.pythonhosted.org/packages/e6/68/fe7cbefa0300cdbe30de45065f8b7312e09e5e7d2ac6f570835741c02b78/tb_mqtt_client-0.0.6-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ddaad102b8247e2a5f25892deb02f6847c1d15715efdac74c71d539b2c8bbd5",
          "md5": "152d79318a0d14c47e87d3d1e912a7b8",
          "sha256": "6d45a59250a0806fb0fba07258d2fb8915cd3d47a6bd65837dc04db3a48724fa"
        },
        "downloads": -1,
        "filename": "tb_mqtt_client-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "152d79318a0d14c47e87d3d1e912a7b8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.4*",
        "size": 8549,
        "upload_time": "2019-04-17T12:56:31",
        "upload_time_iso_8601": "2019-04-17T12:56:31.895593Z",
        "url": "https://files.pythonhosted.org/packages/8d/da/ad102b8247e2a5f25892deb02f6847c1d15715efdac74c71d539b2c8bbd5/tb_mqtt_client-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a95bf317f6f089019eeebf934f0a04b18226a1dad758a3bf86cd13410b4845d",
          "md5": "619f80018ff01c58c40806107e3611c5",
          "sha256": "ab50fed02a807c92348683c6bc34fe988fd5c3cb2edd8d57eac20e59b4d4164e"
        },
        "downloads": -1,
        "filename": "tb_mqtt_client-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "619f80018ff01c58c40806107e3611c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 12104,
        "upload_time": "2020-12-03T10:27:51",
        "upload_time_iso_8601": "2020-12-03T10:27:51.433516Z",
        "url": "https://files.pythonhosted.org/packages/1a/95/bf317f6f089019eeebf934f0a04b18226a1dad758a3bf86cd13410b4845d/tb_mqtt_client-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "545c8d4080310304841bb81c4c82e6b41c820e22ef2c38aab16889b150414b20",
          "md5": "3e23bd9f9d4757b5882e731e3f2f07f6",
          "sha256": "21f0375956367b43e5529b837c73eabcd7a2442e07e9dce3604a8b22677f3e3d"
        },
        "downloads": -1,
        "filename": "tb_mqtt_client-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e23bd9f9d4757b5882e731e3f2f07f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 13079,
        "upload_time": "2020-12-04T13:04:29",
        "upload_time_iso_8601": "2020-12-04T13:04:29.265273Z",
        "url": "https://files.pythonhosted.org/packages/54/5c/8d4080310304841bb81c4c82e6b41c820e22ef2c38aab16889b150414b20/tb_mqtt_client-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cf219e6a4f09842901deb7fa592f7e8a67884c8e10bee47214447da36138f91",
          "md5": "4917f8ae36169f264b66d2d08fe3ea40",
          "sha256": "4f379fb03e2e993a5ff6875d3255030d74d8bd0f63868b5d5c26c031ebeddbf3"
        },
        "downloads": -1,
        "filename": "tb-mqtt-client-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4917f8ae36169f264b66d2d08fe3ea40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19038,
        "upload_time": "2022-09-07T12:39:16",
        "upload_time_iso_8601": "2022-09-07T12:39:16.793176Z",
        "url": "https://files.pythonhosted.org/packages/1c/f2/19e6a4f09842901deb7fa592f7e8a67884c8e10bee47214447da36138f91/tb-mqtt-client-1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed931474ff1944dbf62459bbb21c11b5c34a9c30f681fda9d2d775d582bdb864",
          "md5": "7cca78f95ede69ab39be90865e76a1c7",
          "sha256": "b280f3233ef23f54eb73d7b618063e15682dee98007a748e281f28242634c4ee"
        },
        "downloads": -1,
        "filename": "tb-mqtt-client-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7cca78f95ede69ab39be90865e76a1c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 19070,
        "upload_time": "2022-10-27T14:16:53",
        "upload_time_iso_8601": "2022-10-27T14:16:53.753508Z",
        "url": "https://files.pythonhosted.org/packages/ed/93/1474ff1944dbf62459bbb21c11b5c34a9c30f681fda9d2d775d582bdb864/tb-mqtt-client-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed931474ff1944dbf62459bbb21c11b5c34a9c30f681fda9d2d775d582bdb864",
        "md5": "7cca78f95ede69ab39be90865e76a1c7",
        "sha256": "b280f3233ef23f54eb73d7b618063e15682dee98007a748e281f28242634c4ee"
      },
      "downloads": -1,
      "filename": "tb-mqtt-client-1.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7cca78f95ede69ab39be90865e76a1c7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 19070,
      "upload_time": "2022-10-27T14:16:53",
      "upload_time_iso_8601": "2022-10-27T14:16:53.753508Z",
      "url": "https://files.pythonhosted.org/packages/ed/93/1474ff1944dbf62459bbb21c11b5c34a9c30f681fda9d2d775d582bdb864/tb-mqtt-client-1.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}