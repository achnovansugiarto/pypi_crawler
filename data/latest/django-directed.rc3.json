{
  "info": {
    "author": "Jack Linke",
    "author_email": "jack@watervize.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Framework :: Django :: 3.1",
      "Framework :: Django :: 3.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Database",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "# django-directed\n\nTools for building, querying, manipulating, and exporting [directed graphs](https://en.wikipedia.org/wiki/Directed_graph) with django.\n\nDocumentation can be found at https://django-directed.readthedocs.io/en/latest/\n\n```{caution} \nThis project is very much a Work In Progress, and is not production-ready. Once it is is a more complete state, it will be moved to the github Watervize organization for long-term development and maintenance.\n```\n\n## Fundamentals\n\nGraphs in django-directed are constructed with three models (or potentially more in case of extended features).\n\n- **Graph**: Represents a connected graph of nodes and edges. It makes it easy to associate metadata with a particular graph and to run commands and queries limited to a subset of all the Edges and Nodes in the database.\n- **Edge**: Connects Nodes to one another within a particular Graph instance.\n- **Node**: A node can belong to more than one Graph. This allows us to represent multi-dimensional or multi-layered graphs.\n\ndjango-directed includes model factories for building various types of directed graphs. As an example, imagine a project in which you display family trees and also provide a searchable interface for research papers about family trees, where papers can be linked to previous papers that they cite. Both of these concepts can be represented by a [Directed Acyclic Graph (DAG)](https://en.wikipedia.org/wiki/Directed_acyclic_graph), and within your project you could create a set of DAG models for the family tree app and another set of DAG models for the academic papers app.\n\n\n## Quickstart\n\nAssuming you have already started a django project and an app named `myapp`\n\n### Install django-directed\n\n```bash\npip install django-directed\n```\n\n### Create the concrete models\n\nUsing the DAG factory, create a set of concrete Graph, Edge, and Node models for your project. Perform the following steps in your app's models.py\n\nBuild a configuration object that will be passed into the factory. Here, we are using the simplest configuration which specifies the model (with `appname.ModelName`), but uses the default values for all other configuration options.\n\n```python\nfrom django_directed.models import GraphConfig\n\nmy_config = GraphConfig(\n    graph_model_name=\"myapp.DAGGraph\",\n    edge_model_name=\"myapp.DAGEdge\",\n    node_model_name=\"myapp.DAGNode\",\n)\n```\n\nCreate the concrete models from a model factory service. In this example, we are adding some fields as an example of what you might do in your own application.\n\n```python\n# Create DAG factory instance\ndag = factory.create(\"DAG\", config=my_config)\n\n# Create concrete models\nclass DAGGraph(dag.graph()):\n    metadata = models.JSONField(default=str, blank=True)\n\n\nclass DAGEdge(dag.edge()):\n    name = models.CharField(max_length=101, blank=True)\n    weight = models.SmallIntegerField(default=1)\n\n    def save(self, *args, **kwargs):\n        self.name = f\"{self.parent.name} {self.child.name}\"\n        super().save(*args, **kwargs)\n\n\nclass DAGNode(dag.node()):\n    name = models.CharField(max_length=50)\n    weight = models.SmallIntegerField(default=1)\n```\n\n```{note}\nThe model names here (DAGGraph, etc) are for example only. You are welcome to use whatever names you like, but the model names should match the names provided in the configuration.\n```\n\n### Migrations\n\nAs usual when working with models in django, we need to make migrations and then run them.\n\n```bash\npython manage.py makemigrations\npython manage.py migrate\n```\n\n### Build out a basic graph\n\n```{tip}\nWe are using the `graph_context_manager` here, which is provided in django-directed for convenience. If you decide not to use this context manager, you need to provide the graph instance when creating or querying with Nodes and Edges.\n```\n\n```bash\nfrom django_directed.context_managers import graph_scope\nfrom myapp.models import DAGGraph, DAGEdge, DAGNode\n\n\n# Create a graph instance\nfirst_graph = DAGGraph.objects.create()\n# Creating a second graph instance, which will share nodes with first_graph\nanother_graph = DAGGraph.objects.create()\n\nwith graph_scope(first_graph):\n\n    # Create several nodes (not yet connected)\n    root = DAGNode.objects.create(name=\"root\")\n\n    a1 = DAGNode.objects.create(name=\"a1\")\n    a2 = DAGNode.objects.create(name=\"a2\")\n    a3 = DAGNode.objects.create(name=\"a3\")\n\n    b1 = DAGNode.objects.create(name=\"b1\")\n    b2 = DAGNode.objects.create(name=\"b2\")\n    b3 = DAGNode.objects.create(name=\"b3\")\n    b4 = DAGNode.objects.create(name=\"b4\")\n\n    c1 = DAGNode.objects.create(name=\"c1\")\n    c2 = DAGNode.objects.create(name=\"c2\")\n\n    # Connect nodes with edges\n    root.add_child(a1)\n    root.add_child(a2)\n\n    # You can add from either side of the relationship\n    a3.add_parent(root)  \n\n    b1.add_parent(a1)\n    a1.add_child(b2)\n    a2.add_child(b2)\n    a3.add_child(b3)\n    a3.add_child(b4)\n\n    b3.add_child(c2)\n    b3.add_child(c1)\n    b4.add_child(c2)\n\nwith graph_scope(another_graph):\n\n    # Connect nodes with edges\n    c1 = DAGNode.objects.get(name=\"c1\")\n    c2 = DAGNode.objects.get(name=\"c2\")\n\n    c1.add_child(c2)\n```\n\n### Resulting Model Data\n\nHere is the resulting data in each model (ignoring the custom fields added in the concrete model definitions).\n\n#### myapp.DAGGraph\n\n     id\n    ----\n      1 \n      2 \n\n#### myapp.DAGNode\n\n     id  | name | graph\n    -----+------+------\n      1  | root |  1\n      2  | a1   |  1\n      3  | a2   |  1\n      4  | a3   |  1\n      5  | b1   |  1\n      6  | b2   |  1\n      7  | b3   |  1\n      8  | b4   |  1\n      9  | c1   |  1\n      10 | c2   |  1\n\n#### myapp.DAGEdge\n\n    id  | parent_id | child_id | name    | graph\n    ----+-----------+----------+---------+------\n     1  |  1        |  2       | root a1 |  1\n     2  |  1        |  3       | root a2 |  1\n     3  |  1        |  4       | root a3 |  1\n     4  |  2        |  5       | a1 b1   |  1\n     5  |  2        |  6       | a1 b2   |  1\n     6  |  3        |  6       | a2 b2   |  1\n     7  |  4        |  7       | a3 b3   |  1\n     8  |  4        |  8       | a3 b4   |  1\n     9  |  7        |  10      | b3 c2   |  1\n     10 |  7        |  9       | b3 c1   |  1\n     11 |  8        |  10      | b4 c2   |  1\n     12 |  9        |  10      | c1 c2   |  2\n\n### Graph visualization\n\n```{note}\nIn the visualized graph below, both of the green nodes (c1) refer to the same Node instance, which is associated with two different graph instances. Likewise, both blue nodes (c2) refer to the same Node instance.\n```\n\n```{note}\nThe mermaid.js diagrams require different markup for GitHub markdown compared to display within ReadTheDocs. Both versions are included here, but one will likely appear as code depending on where you are viewing this file.\n```\n\n#### Graph for display on GitHub\n\n```mermaid\ngraph TD;\n    root((root));\n    a1((a1));\n    a2((a2));\n    a3((a3));\n    b1((b1));\n    b2((b2));\n    b3((b3));\n    b4((b4));\n    c1((c1));\n    c2((c2));\n    c1X((c1));\n    c2X((c2));\n\n    root-->a1;\n    root-->a2;\n    root-->a3;\n    a1-->b1;\n    a1-->b2;\n    a2-->b2;\n    a3-->b3;\n    a3-->b4;\n    b3-->c1;\n    b3-->c2;\n    b4-->c2;\n\n    c1X-->c2X;\n\n    style c1 fill:#48A127,stroke:#333,stroke-width:4px;\n    style c1X fill:#48A127,stroke:#333,stroke-width:4px;\n    style c2 fill:#279BA1,stroke:#333,stroke-width:4px;\n    style c2X fill:#279BA1,stroke:#333,stroke-width:4px;\n\n    linkStyle default fill:none,stroke:gray\n```\n\n#### Graph for display on ReadTheDocs\n\n```{mermaid}\ngraph TD;\n    root((root));\n    a1((a1));\n    a2((a2));\n    a3((a3));\n    b1((b1));\n    b2((b2));\n    b3((b3));\n    b4((b4));\n    c1((c1));\n    c2((c2));\n    c1X((c1));\n    c2X((c2));\n\n    root-->a1;\n    root-->a2;\n    root-->a3;\n    a1-->b1;\n    a1-->b2;\n    a2-->b2;\n    a3-->b3;\n    a3-->b4;\n    b3-->c1;\n    b3-->c2;\n    b4-->c2;\n\n    c1X-->c2X;\n\n    style c1 fill:#48A127,stroke:#333,stroke-width:4px;\n    style c1X fill:#48A127,stroke:#333,stroke-width:4px;\n    style c2 fill:#279BA1,stroke:#333,stroke-width:4px;\n    style c2X fill:#279BA1,stroke:#333,stroke-width:4px;\n\n    linkStyle default fill:none,stroke:gray\n```\n\n### Find the shortest path between two nodes\n\nFirst, let us try to get the shortest path from `c1` and `c2` on `first_graph`, where no path exists:\n\n```python \nwith graph_scope(first_graph):\n    c1 = DAGNode.objects.get(name=\"c1\")\n    c2 = DAGNode.objects.get(name=\"c2\")\n\n    print(c1.shortest_path(c2))\n```\n\n*Output*: `django_directed.models.NodeNotReachableException`\n\nNext, we will perform the same query on `another_graph`, which *does* have a path from `c1` to `c2` through a single Edge. The value returned is a QuerySet of the Nodes in the path.\n\n```python\nwith graph_scope(another_graph):\n    c1 = DAGNode.objects.get(name=\"c1\")\n    c2 = DAGNode.objects.get(name=\"c2\")\n\n    print(c1.shortest_path(c2))\n```\n\n*Output*: `<QuerySet [<NetworkNode: c1>, <NetworkNode: c2>]>`\n\nFor additional methods of querying, see the API docs for [Graph](https://django-directed.readthedocs.io/en/latest/api/graph.html), [Edge](https://django-directed.readthedocs.io/en/latest/api/edge.html), and [Node](https://django-directed.readthedocs.io/en/latest/api/node.html).\n\n## Example apps\n\n```{note}\nThese are in-progress, and not ready for actual use.\n```\n\nA series of example apps demonstrating vaious aspects and techniques of using django-directed.\n\n- **[Airports](https://github.com/jacklinke/django-directed/tree/main/tests/example/airports)** - An app demonstrating one method of working with multidimensional graphs to model airports with a common set of nodes, and edges for each of the connecting airlines.\n- **[Electrical Grids](https://github.com/jacklinke/django-directed/tree/main/tests/example/electrical_grids)** - Demonstrate graphs of neighborhood electrical connections and meters.\n- **[Family Trees](https://github.com/jacklinke/django-directed/tree/main/tests/example/family_tree)** - Demonstrates building family trees for multiple mythological families.\n- **[Forums](https://github.com/jacklinke/django-directed/tree/main/tests/example/forums)** - Forums and threaded comments.\n- **[NetworkX Graphs](https://github.com/jacklinke/django-directed/tree/main/tests/example/networkx_graphs)** - Demonstration of using NetworkX alongside django-directed.\n\nSee the [Example Apps](https://github.com/jacklinke/django-directed/tree/main/tests/example) folder.\n\n## Why not use a graph database instead?\n\n- **Compatibility** - Graph databases don't play very nicely with Django and the Django ORM. There are 3rd party packages to shoehorn in the required functionality, but django is designed for relational databases.\n- **Simplicity** - If most of the work you are doing needs a relational database, mixing an additional entirely different kind of database into the project might not be ideal.\n- **Tradeoffs** - Graph databases are not a panacea. They bring their own set of pros and cons. Maybe a graph database is ideal for your project. But maybe you'll do just as well using django-directed. I encourage you to read up on the benefits graph databases bring, the issues they solve, and also the areas where they do not perform as well as a relational database.\n\n\n# History\n\n\n## 0.1.0 (2022-02-08)\n\n* Built initial readme entry to start documenting project goals.\n\n## 0.1.1 (2022-02-17)\n\n* Continue work on boilerplate to flesh out the foundations of the project.\n\n\n## 0.1.2 (2022-02-21)\n\n* Add terminology documentation.\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jacklinke/django-directed/",
    "keywords": "django-directed,graph,tree,dag,network,directed,acyclic,postgres,cte",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-directed",
    "package_url": "https://pypi.org/project/django-directed/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-directed/",
    "project_urls": {
      "Documentation": "https://django-directed.readthedocs.io/en/latest/",
      "Homepage": "https://github.com/jacklinke/django-directed/",
      "Source": "https://github.com/jacklinke/django-directed/",
      "Tracker": "https://github.com/jacklinke/django-directed/issues"
    },
    "release_url": "https://pypi.org/project/django-directed/0.1.3/",
    "requires_dist": [
      "django (>=2.2)"
    ],
    "requires_python": ">=3.7, <4",
    "summary": "Tools for building, querying, manipulating, and exporting directed graphs with django",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14385471,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26ad6eda20014b3de0bb1f50f53feae45d65924e74a705ad554b930571384d6b",
          "md5": "ae5647c4d6ee414f5874efab264c10a5",
          "sha256": "91962d7200b839e008fa3bbfb766c333dbf04bc17d7f012cf24138c8d8645edb"
        },
        "downloads": -1,
        "filename": "django_directed-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae5647c4d6ee414f5874efab264c10a5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6, <4",
        "size": 13248,
        "upload_time": "2022-02-22T05:21:36",
        "upload_time_iso_8601": "2022-02-22T05:21:36.944622Z",
        "url": "https://files.pythonhosted.org/packages/26/ad/6eda20014b3de0bb1f50f53feae45d65924e74a705ad554b930571384d6b/django_directed-0.1.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1db94f295ddf5c4975b4268da1d0e028202f2d7ea796764b40dbdaba169346bc",
          "md5": "73e4250ed319678e934672beb3f0be69",
          "sha256": "21c3968538a8ac05517671ba87bc8c2ac102574157d6d9b0e5ec327db0bbfc5b"
        },
        "downloads": -1,
        "filename": "django-directed-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "73e4250ed319678e934672beb3f0be69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 15751,
        "upload_time": "2022-02-22T05:21:38",
        "upload_time_iso_8601": "2022-02-22T05:21:38.943405Z",
        "url": "https://files.pythonhosted.org/packages/1d/b9/4f295ddf5c4975b4268da1d0e028202f2d7ea796764b40dbdaba169346bc/django-directed-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08e9683a9a6ae45fed2a489b90a951913b86c3ea5e6cd46be06ce4cfa872d8d7",
          "md5": "f96dd3d4a95c2b712cbf7277f61717a3",
          "sha256": "12b41abc78f5a1aff9a0e8d879b79925b13863edfef1aea27b03f743c8eddb13"
        },
        "downloads": -1,
        "filename": "django_directed-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f96dd3d4a95c2b712cbf7277f61717a3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6, <4",
        "size": 13274,
        "upload_time": "2022-02-22T05:23:55",
        "upload_time_iso_8601": "2022-02-22T05:23:55.696904Z",
        "url": "https://files.pythonhosted.org/packages/08/e9/683a9a6ae45fed2a489b90a951913b86c3ea5e6cd46be06ce4cfa872d8d7/django_directed-0.1.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3e216b9f782a7f1cde0b94e27252e08bc24219ccbb83981bfe17dbb3e843809",
          "md5": "324596915b7eed9cfcc499994beca223",
          "sha256": "2b557f7c795ffd395615da9735cc8c021e3c41131541ca965356edddc8fc2234"
        },
        "downloads": -1,
        "filename": "django-directed-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "324596915b7eed9cfcc499994beca223",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 15790,
        "upload_time": "2022-02-22T05:23:58",
        "upload_time_iso_8601": "2022-02-22T05:23:58.063889Z",
        "url": "https://files.pythonhosted.org/packages/a3/e2/16b9f782a7f1cde0b94e27252e08bc24219ccbb83981bfe17dbb3e843809/django-directed-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0aadd9a934a8ab4ee3c3095e2e0f13120d6e784999777d386090e2daf6bd40d",
          "md5": "945449735629075a9483ab04345842f4",
          "sha256": "38e7a9bd2df1813d38a4297bd454870cac2c8557f83a4770ed75faa6eb03bb67"
        },
        "downloads": -1,
        "filename": "django_directed-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "945449735629075a9483ab04345842f4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.7, <4",
        "size": 23574,
        "upload_time": "2022-03-11T04:08:41",
        "upload_time_iso_8601": "2022-03-11T04:08:41.762918Z",
        "url": "https://files.pythonhosted.org/packages/e0/aa/dd9a934a8ab4ee3c3095e2e0f13120d6e784999777d386090e2daf6bd40d/django_directed-0.1.3-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba4a72ae14dc9cef7d9bbe078b829fc25ec379c798412f61a0274e668391e676",
          "md5": "27478ab8e9d82c431320edcbabb3a5ce",
          "sha256": "a9b21d32ac50f941e5926f5c6793743ec9f59373c2178148d2c3b7b360e68837"
        },
        "downloads": -1,
        "filename": "django-directed-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "27478ab8e9d82c431320edcbabb3a5ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 23590,
        "upload_time": "2022-03-11T04:08:45",
        "upload_time_iso_8601": "2022-03-11T04:08:45.279253Z",
        "url": "https://files.pythonhosted.org/packages/ba/4a/72ae14dc9cef7d9bbe078b829fc25ec379c798412f61a0274e668391e676/django-directed-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e0aadd9a934a8ab4ee3c3095e2e0f13120d6e784999777d386090e2daf6bd40d",
        "md5": "945449735629075a9483ab04345842f4",
        "sha256": "38e7a9bd2df1813d38a4297bd454870cac2c8557f83a4770ed75faa6eb03bb67"
      },
      "downloads": -1,
      "filename": "django_directed-0.1.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "945449735629075a9483ab04345842f4",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.7, <4",
      "size": 23574,
      "upload_time": "2022-03-11T04:08:41",
      "upload_time_iso_8601": "2022-03-11T04:08:41.762918Z",
      "url": "https://files.pythonhosted.org/packages/e0/aa/dd9a934a8ab4ee3c3095e2e0f13120d6e784999777d386090e2daf6bd40d/django_directed-0.1.3-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba4a72ae14dc9cef7d9bbe078b829fc25ec379c798412f61a0274e668391e676",
        "md5": "27478ab8e9d82c431320edcbabb3a5ce",
        "sha256": "a9b21d32ac50f941e5926f5c6793743ec9f59373c2178148d2c3b7b360e68837"
      },
      "downloads": -1,
      "filename": "django-directed-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "27478ab8e9d82c431320edcbabb3a5ce",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <4",
      "size": 23590,
      "upload_time": "2022-03-11T04:08:45",
      "upload_time_iso_8601": "2022-03-11T04:08:45.279253Z",
      "url": "https://files.pythonhosted.org/packages/ba/4a/72ae14dc9cef7d9bbe078b829fc25ec379c798412f61a0274e668391e676/django-directed-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}