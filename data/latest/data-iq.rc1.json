{
  "info": {
    "author": "Nabeel Seedat",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# Data-IQ: Characterizing subgroups with heterogeneous outcomes in tabular data\n\n[![Tests](https://github.com/vanderschaarlab/Data-IQ/actions/workflows/test.yml/badge.svg)](https://github.com/vanderschaarlab/Data-IQ/actions/workflows/test.yml)\n[![Tutorials](https://github.com/vanderschaarlab/Data-IQ/actions/workflows/test_tutorials.yml/badge.svg)](https://github.com/vanderschaarlab/Data-IQ/actions/workflows/test_tutorials.yml)\n[![arXiv](https://img.shields.io/badge/arXiv-2210.13043-b31b1b.svg)](https://arxiv.org/abs/2210.13043)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/vanderschaarlab/Data-IQ/blob/main/LICENSE)\n\n![image](pipeline.png \"Data-IQ pipeline\")\n\nThis repository contains the implementation of Data-IQ, a \"Data-Centric AI\" framework to characterize subgroups with heterogeneous outcomes in tabular data.\n\nData-IQ studies training dynamics and specifically studies the inherent data uncertainty (aleatoric uncertainty), to characterize data examples into the following subgroups: *EASY*, *AMBIGUOUS* and *HARD*.\n\nData-IQ can be used to characterize data using ***any*** machine learning model trained iteratively. We provide an interface for using Data-IQ, which can be used with **Pytorch models**, as well as, **SKLearn style API models** including *XGBoost, LightGBM and CatBoost*.\n\nThe utility of the subgroups extend to a variety of use-cases.\n\nFor more details, please read our [NeurIPS 2022 paper](Link coming soon): *Data-IQ: Characterizing subgroups with heterogeneous outcomes in tabular data*.\n\n## Installation\n1. Clone the repository\n2. Create a new virtual environment with Python 3.7. e.g:\n```shell\n    virtualenv dataiq_env\n```\n3. With the venv activated, run the following command from the repository directory:\n\n- Minimum requirements to run Data-IQ on your own data\n ```shell\npip install data_iq\n ```\nor from source,\n ```shell\npip install .\n ```\n\n- Full requirements to run Data-IQ tests and tutorials\n ```shell\npip install .[testing]\n ```\n\n4. Link the venv to the kernel:\n  ```shell\n python -m ipykernel install --user --name=dataiq_env\n ```\n\n## Use Data-IQ in your projects with 2-lines of code to your training loops!\n\n![image](overview.png \"Overview of Data-IQ: From training dynamics to Data-IQ characteterization\")\n\n### Getting Data-IQ\n\n* **Option 1**: Install as a package (called ``data_iq``) from PyPI using\n ```shell\npip install data_iq\n ```\n or from source using\n ```shell\n    python -m pip install -e .\n ```\n\n* **Option 2**: Import from the ``data_iq`` folder\n\nTwo examples using a neural network (Pytorch-style) and XGBoost (Sklearn-style) is shown below.\n\nThe lines of Data-IQ code that need to be added to your training loops are highlighted with stars in the comments. e.g. ``*** comment ***``\n\n### 1. Data-IQ Example with Pytorch interface (NEURAL NETWORK)\n```python\n\n# Import Data-IQ\n# Option 1 - if package is installed\nfrom data_iq import DataIQ_Torch\n\n# Option 2 - import from folder\nfrom data_iq.dataiq_class import DataIQ_Torch\n\n# Pytorch data loader here\ntrain_loader = DataLoader(dataset=train_data, batch_size=128, shuffle=True)\n\n# Define Pytorch device\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\n# Define Pytorch model\nnet = Example_NN(input_size=X_train.shape[1], nlabels=len(np.unique(y_train)))\nnet.to(device)\n\n# *** Initialize Data-IQ [LINE 1] ***\ndataiq = DataIQ_Torch(X=X_train, y=y_train, sparse_labels=True)\n\n\n\n# Fit Pytorch model [Training loop]\nfor e in range(1, EPOCHS + 1):\n    net.train()\n\n    for X_batch, y_batch in train_loader:\n        ### ADD TRAIN LOOP HERE ###\n\n\n    # *** CALL DATA-IQ on EPOCH END [LINE 2] ***\n    dataiq.on_epoch_end(net, device=device)\n\n\n\n# *** Access metrics ***\naleatoric_uncertainty = dataiq_xgb.aleatoric\nconfidence = dataiq_xgb.confidence\n\n\n```\n\n### 2. Data-IQ Example with Sklearn style interface (XGBOOST)\n```python\n\n# Import Data-IQ\n# Option 1 - if package is installed\nfrom data_iq import DataIQ_SKLearn\n\n# Option 2 - import from folder\nfrom data_iq.dataiq_class import DataIQ_SKLearn\n\n# Arbitrary data loader - numpy arrays\nX_train, X_test, y_train, y_test = load_data()\n\n# *** Initialize Data-IQ [LINE 1] ***\ndataiq_xgb = DataIQ_SKLearn(X=X_train, y=y_train)\n\n# Fit XGBoost\nclf = xgb.XGBClassifier(n_estimators=10)\nclf.fit(X_train, y_train)\n\nfor i in range(1, nest):\n    # *** Characterize with Data-IQ [LINE 2] ***\n    dataiq_xgb.on_epoch_end(clf=clf, iteration=i)\n\n# *** Access metrics ***\naleatoric_uncertainty = dataiq_xgb.aleatoric\nconfidence = dataiq_xgb.confidence\n```\n\n## Getting started\n\nTo get started with Data-IQ on your own data, we provide two tutorial notebooks to illustrate the usage of Data-IQ. Examples are provided both Pytorch style and SKLearn style (XGBoost, Catboost, LightGBM) models.\n\nThese notebooks can be found in the ``/tutorial`` folder. The Adult open-source dataset is given as an example dataset in the tutorials for ease of accessbility.\n\n1. ``tutorial_torch_api.ipynb``\n\n - Example integration of Data-IQ with Pytorch models\n\n2. ``tutorial_sklearn_api.ipynb``\n\n- Example integration of Data-IQ with SKLearn style models trained iteratively (e.g. XGBoost, LigthGBM, CatBoost)\n\n\n## Data-IQ metrics\nThe Data-IQ package provides a wide variety of metrics to characterize training dynamics.\n\nThe primary & suggested metrics are: **Aleatoric uncertainty** and **Predictive confidence**. However, other metrics are also included as part of the package.\n\nThe different metrics available to characterize training dynamics are as follows and can be accessed through the *dataiq* object:\n\n- Aleatoric uncertainty via: `dataiq.aleatoric`\n- Predictive confidence via: `dataiq.confidence`\n- Variability via: `dataiq.variability`\n- Entropy via: `dataiq.entropy`\n- Mutual information via: `dataiq.mi`\n- Correctness over training via: `dataiq.correctness`\n\n\n## Use-cases\n\nWe highlight different use-cases of Data-IQ from understanding learning dynamics, creating characteristic curves, feature acquisition etc as well as, different data modalities in notebooks which can be found in the ``/use_cases`` folder.\n\n\n## Citing\n\nIf you use this code, please cite the associated paper:\n\n```\n@inproceedings\n{seedat2022dataiq,\ntitle={Data-IQ: Characterizing subgroups with heterogeneous outcomes in tabular data},\nauthor={Seedat, Nabeel and Crabbe, Jonathan and Bica, Ioana and van der Schaar, Mihaela},\nbooktitle={Advances in Neural Information Processing Systems},\nyear={2022}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://arxiv.org/abs/2202.08836",
    "keywords": "data-centric AI,data quality,uncertainty",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "data-iq",
    "package_url": "https://pypi.org/project/data-iq/",
    "platform": null,
    "project_url": "https://pypi.org/project/data-iq/",
    "project_urls": {
      "Homepage": "https://arxiv.org/abs/2202.08836"
    },
    "release_url": "https://pypi.org/project/data-iq/0.0.1/",
    "requires_dist": [
      "autograd-lib",
      "numpy",
      "torch (>=1.9.1)",
      "torchvision (>=0.11.1)",
      "importlib-metadata ; python_version < \"3.8\"",
      "SciencePlots ; extra == 'testing'",
      "aum ; extra == 'testing'",
      "autograd-lib ; extra == 'testing'",
      "bandit ; extra == 'testing'",
      "catboost (>=1.1) ; extra == 'testing'",
      "click ; extra == 'testing'",
      "flake8 ; extra == 'testing'",
      "ipykernel ; extra == 'testing'",
      "isort ; extra == 'testing'",
      "lightgbm ; extra == 'testing'",
      "matplotlib ; extra == 'testing'",
      "nbconvert ; extra == 'testing'",
      "nltk ; extra == 'testing'",
      "notebook ; extra == 'testing'",
      "numpy ; extra == 'testing'",
      "pandas (>=1.3.5) ; extra == 'testing'",
      "pre-commit ; extra == 'testing'",
      "protobuf (>=4.21.8) ; extra == 'testing'",
      "py ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-benchmark ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'",
      "pytest-xdist[psutil] ; extra == 'testing'",
      "pytest-xprocess ; extra == 'testing'",
      "scikit-learn (>=1.0.2) ; extra == 'testing'",
      "scipy (>=1.7.3) ; extra == 'testing'",
      "sdv ; extra == 'testing'",
      "seaborn ; extra == 'testing'",
      "tqdm ; extra == 'testing'",
      "umap-learn ; extra == 'testing'",
      "uq360 ; extra == 'testing'",
      "xgboost (>=1.6.2) ; extra == 'testing'",
      "xlrd ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "Data-IQ: Characterizing subgroups with heterogeneous outcomes in tabular data",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15597038,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e64464a97abaf3706464612b4b791df13c49a053acc0010fce01ec604790830f",
          "md5": "d293a194295f8eb43406b05efccd24c2",
          "sha256": "98bcb2c236b35691244e826472b71d3e1e861ab4151feaeed744a4cc1ac31092"
        },
        "downloads": -1,
        "filename": "data_iq-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d293a194295f8eb43406b05efccd24c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20856,
        "upload_time": "2022-10-31T14:11:47",
        "upload_time_iso_8601": "2022-10-31T14:11:47.956282Z",
        "url": "https://files.pythonhosted.org/packages/e6/44/64a97abaf3706464612b4b791df13c49a053acc0010fce01ec604790830f/data_iq-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2339b8d999709c9f93a2b0e95ab5540a0126ee673f941d532f3da0d7b73ac464",
          "md5": "73588be735c58baa84bcbefe5669e887",
          "sha256": "d57ba4a3a23a1f672402258db9771ea42b592b35be1c2b12deecea5a441c03cd"
        },
        "downloads": -1,
        "filename": "data_iq-0.0.1-py3-none-macosx_10_14_x86_64.whl",
        "has_sig": false,
        "md5_digest": "73588be735c58baa84bcbefe5669e887",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 20742,
        "upload_time": "2022-10-31T14:11:12",
        "upload_time_iso_8601": "2022-10-31T14:11:12.328135Z",
        "url": "https://files.pythonhosted.org/packages/23/39/b8d999709c9f93a2b0e95ab5540a0126ee673f941d532f3da0d7b73ac464/data_iq-0.0.1-py3-none-macosx_10_14_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e64464a97abaf3706464612b4b791df13c49a053acc0010fce01ec604790830f",
        "md5": "d293a194295f8eb43406b05efccd24c2",
        "sha256": "98bcb2c236b35691244e826472b71d3e1e861ab4151feaeed744a4cc1ac31092"
      },
      "downloads": -1,
      "filename": "data_iq-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d293a194295f8eb43406b05efccd24c2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20856,
      "upload_time": "2022-10-31T14:11:47",
      "upload_time_iso_8601": "2022-10-31T14:11:47.956282Z",
      "url": "https://files.pythonhosted.org/packages/e6/44/64a97abaf3706464612b4b791df13c49a053acc0010fce01ec604790830f/data_iq-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2339b8d999709c9f93a2b0e95ab5540a0126ee673f941d532f3da0d7b73ac464",
        "md5": "73588be735c58baa84bcbefe5669e887",
        "sha256": "d57ba4a3a23a1f672402258db9771ea42b592b35be1c2b12deecea5a441c03cd"
      },
      "downloads": -1,
      "filename": "data_iq-0.0.1-py3-none-macosx_10_14_x86_64.whl",
      "has_sig": false,
      "md5_digest": "73588be735c58baa84bcbefe5669e887",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 20742,
      "upload_time": "2022-10-31T14:11:12",
      "upload_time_iso_8601": "2022-10-31T14:11:12.328135Z",
      "url": "https://files.pythonhosted.org/packages/23/39/b8d999709c9f93a2b0e95ab5540a0126ee673f941d532f3da0d7b73ac464/data_iq-0.0.1-py3-none-macosx_10_14_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}