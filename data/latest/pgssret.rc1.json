{
  "info": {
    "author": "",
    "author_email": "David Timber <dxdt@dev.snart.me>",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Compass Group PGSS Payslip Retriever\nThis is a Python script that retrieves your pay slips from Compass Group's PGSS\nwebsite and sends to your email. I wrote this script so I don't have to log onto\nthe stupid site every time I want to get my pay slips. What a stupid way to do\nthings.\n\nI could've just filed an OFI to tell them to just email all the pay slips just\nlike any other normal companies do. Yup, that's gonna work because Compass Group\nis more than capable of doing that.\n\n![Snap image: \"Don't do anything that might damage the reputation of Compass\nGroup\"](/docs/snap_policy-rep.png)\n\nWell, sack me then.\n\n## Usage\n```sh\npython3 -m pgssret -f <config>\n```\nWhere `<config>` is the path to the yaml configuration file. The sample is\nlocated at [/docs/configs/sample.yaml](/docs/configs/sample.yaml).\n\n## Setup\n### Installation\nInstall the module using PIP.\n\n```sh\npip install pgssret\n```\n\n### Configuration and Cache Setup\nThe config format is pretty self-explanatory. I copied and pasted into this doc\nbelow for reference.\n\n```yaml\npgss-ret:\n  auth:\n    username: USERNAME\n    password: PASSWORD\n  dir:\n    cache: cache\n    tmp: tmp\n  limits:\n    eml-size: 5242880 # 5 MiB\n    nb-attachments: 20\n  # Initial start up behaviour\n  #   0: Attach only one latest pay slip only (recommended)\n  #   1: Don't email. Pay slips will be sent on the subsequent launches\n  #   2: Email all the pay slips obtainable. A large quantities of pay slips\n  #      will be sent in multiple mails\n  init-mode: 0\n  post:\n    subject: Pay Slip from Compass Group\n    body: See attached.\n    backend: smtplib\n    params:\n      proto: smtp # or 'smtps' or 'lmtp'\n      # from: from@example.com\n      # Allow use of unencrypted session. Set to true if using localhost\n      # allow-plaintext: false\n      # host: smtp.example.com\n      # port:\n      # tlscert:\n      # tlskey:\n      # cred: # smtp auth credentials\n      #   username:\n      #   password:\n    recipients:\n      # - person@example.com\n```\n\nYou won't have to worry about cache and tmp dirs as long as you set the working\ndirectory of the process correctly. I recommend preparing following paths for\nthe working directory of the module.\n\n* Linux\n  * `~/.cache/pgssret` for tmp and cache\n  * `~/.config/pgssret` for the config\n* Windows: `%appdata%\\pgssret` for everything\n\nOr you can use arbitrary directories on your machine and set them using absolute\npaths.\n\nCopy the sample config to a new location. Rename it to `pgssret.yaml` and edit\nit. All you will have to change should be the username and password you use to\nlog onto the website. Then test the config by launching the module.\n\n```sh\n# Linux\ncd ~/.cache/pgssret\npython3 -m pgssret -f ~/.config/pgssret/pgssret.yaml\n```\n```pwsh\n# Windows (Powershell or cmd)\ncd %appdata%\\pgssret\npython3 -m pgssret -f %appdata%\\pgssret\\pgssret.yaml\n```\n\nIf you mess up, debug the config and delete the cache file(named as\nYOUR_EMPLOYEE_NUMBER.json) before relaunching the module. If you manage to get\nthe module to send an email successfully and you've confirmed that the email\nhas reached the inbox, you can move onto setting a scheduled task.\n\n### Schedule Module Launch\nOn Linux, use crond or a Systemd timer to have the module poll your pay slips\nperiodically.\n\nRun `crontab -e` to edit the user crontab like so.\n\n```crontab\n# To get error reports in the event of failure.\n#MAILTO=\n\n# Run pgssret every day at noon. Redirect STDOUT to the null device to get\n# reports on errors only.\n00 12 *  *  * cd ~/.cache/pgssret && python3 -m pgssret -f ~/.config/pgssret/pgssret.yaml > /dev/null\n```\n\nAnd make sure crond is running and you're good to go! Forget that you did all\nthis and let your computer get the pay slips for you from now on.\n\nAnother options is to make the machine run the module every time it boots up by\nmaking a \"oneshot\" Systemd service or dropping a shell script in rc.d.\n\nOn Windows, Task Scheduler can do the trick.\n\n![Task Scheduler dialog \"General\" tab](sched_prop-general.png)\n\n![Task Scheduler dialog \"Trigger\" tab](sched_prop-trigger.png)\n\n![Task Scheduler dialog \"Action\" tab](sched_prop-action.png)\n\n![Task Scheduler dialog \"Settings\" tab](sched_prop-settings.png)\n\n### Gmail Example\nIf you plan to use an external SMTP rather than a local one and set up a mail\nfilter on your email service[^1], here's the example using Gmail SMTP. You will\nneed to create an [App\nPassword](https://support.google.com/accounts/answer/185833) for the module.\n\n```yaml\n# ...\n    params:\n      proto: smtps\n      from: you@gmail.com\n      host: smtp.gmail.com\n      cred:\n        username: you@gmail.com\n        password: THE_APP_PASSWORD\n    recipients:\n\t  - you@gmail.com\n```\n\n[^1]: which is reasonable considering the fact that SMTP daemon implementations\n      are quite heavy and it's tedious to set up a mail filter so that the mails\n      sent from your local machine are not marked as spam\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pgssret",
    "package_url": "https://pypi.org/project/pgssret/",
    "platform": null,
    "project_url": "https://pypi.org/project/pgssret/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ashegoulding/pgss-retriever/issues",
      "Homepage": "https://github.com/ashegoulding/pgss-retriever"
    },
    "release_url": "https://pypi.org/project/pgssret/0.0.1/",
    "requires_dist": [
      "pyyaml",
      "requests"
    ],
    "requires_python": ">=3.9",
    "summary": "Get and email pay slips from PGSS",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16943755,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99240ee52888020992970a97410312ae504673525e253644ec7504455eb3a60a",
          "md5": "c2e8bd93bc9ae2d96c20469f224fc9c6",
          "sha256": "2a831c8f19e3c4ce963983ddb762cafb83e645c0e72129b79ca05e5328e28a28"
        },
        "downloads": -1,
        "filename": "pgssret-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2e8bd93bc9ae2d96c20469f224fc9c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 155827,
        "upload_time": "2023-02-20T14:08:20",
        "upload_time_iso_8601": "2023-02-20T14:08:20.771255Z",
        "url": "https://files.pythonhosted.org/packages/99/24/0ee52888020992970a97410312ae504673525e253644ec7504455eb3a60a/pgssret-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25a2717541888d0ff9249d2e73aec2f61cabcfd6584e19928206a7d8d707e294",
          "md5": "c37a5a4dc999e216141d7d7dec08001f",
          "sha256": "100e13c42a80619acb1a0948648e6127fe65c51610e470aa9ce5cdc3e0bf6467"
        },
        "downloads": -1,
        "filename": "pgssret-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c37a5a4dc999e216141d7d7dec08001f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 153581,
        "upload_time": "2023-02-20T14:08:23",
        "upload_time_iso_8601": "2023-02-20T14:08:23.107469Z",
        "url": "https://files.pythonhosted.org/packages/25/a2/717541888d0ff9249d2e73aec2f61cabcfd6584e19928206a7d8d707e294/pgssret-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "99240ee52888020992970a97410312ae504673525e253644ec7504455eb3a60a",
        "md5": "c2e8bd93bc9ae2d96c20469f224fc9c6",
        "sha256": "2a831c8f19e3c4ce963983ddb762cafb83e645c0e72129b79ca05e5328e28a28"
      },
      "downloads": -1,
      "filename": "pgssret-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c2e8bd93bc9ae2d96c20469f224fc9c6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 155827,
      "upload_time": "2023-02-20T14:08:20",
      "upload_time_iso_8601": "2023-02-20T14:08:20.771255Z",
      "url": "https://files.pythonhosted.org/packages/99/24/0ee52888020992970a97410312ae504673525e253644ec7504455eb3a60a/pgssret-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "25a2717541888d0ff9249d2e73aec2f61cabcfd6584e19928206a7d8d707e294",
        "md5": "c37a5a4dc999e216141d7d7dec08001f",
        "sha256": "100e13c42a80619acb1a0948648e6127fe65c51610e470aa9ce5cdc3e0bf6467"
      },
      "downloads": -1,
      "filename": "pgssret-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c37a5a4dc999e216141d7d7dec08001f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 153581,
      "upload_time": "2023-02-20T14:08:23",
      "upload_time_iso_8601": "2023-02-20T14:08:23.107469Z",
      "url": "https://files.pythonhosted.org/packages/25/a2/717541888d0ff9249d2e73aec2f61cabcfd6584e19928206a7d8d707e294/pgssret-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}