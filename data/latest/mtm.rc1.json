{
  "info": {
    "author": "Laurent Thomas",
    "author_email": "laurent132.thomas@laposte.net",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Image Recognition"
    ],
    "description": "[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/multi-template-matching/mtm-python-oop/main?filepath=tutorials)\n\n# Multi-Template-Matching (mtm) : the object-oriented python implementation  \nMulti-Template-Matching is an accessible method to perform object-detection in images using one or several template images for the search.  \nThe strength of the method compared to previously available single-template matching, is that by combining the detections from multiple templates,\none can improve the range of detectable patterns. This helps if you expect variability of the object-perspective in your images, such as rotation, flipping...  \nThe detections from the different templates are not simply combined, they are filtered using Non-Maxima Suppression (NMS) to prevent overlapping detections.  \n\nThe python implementations of mtm only perform the detection and filtering with NMS.  \nFor the templates, you can provide a list of images to use. You can also perform geometrical transformation (kind of data augmentation) of existing templates if you expect these transformation in the image (ex: rotation/flipping).  \n\nThis implementation relies on the packages scikit-image and shapely, but not on OpenCV contrary to the python implementation originally published (and still available).  \nIt is more object-oriented, especially it should be easier to adapt to other shapes (detection with rectangular template but outlining detected region with a non-rectangular shape), by implementing another type of Detection object.  \nIn this python implementation, the detections are of type `BoundingBox` and hold a reference to a shapely `Polygon` object (a subtype of [geometric object](https://shapely.readthedocs.io/en/latest/manual.html#geometric-objects)).  \nWhile most functions required for multi-template-matching are directly available through the BoundingBox object, you can also use functions and attributes available to shapely Polygon by accessing the `polygon`attribute of a BoundingBox.  \n\nCore functions available in mtm are : \n\n- the main function `mtm.matchTemplates`  \nIt returns the best predicted locations provided a scoreThreshold and an optional number of objects expected in the image.  \nIt performs the search for each template followed by overlap-based Non-Maxima Suppression (NMS) to remove redundant/overlapping detections.  \nIf a number N of expected object is mentioned, it returns at max N detection but potentially less depending on the score threshold.  \n\n- the function `mtm.findMatches`  \nIt performs the search for each template and return all detections above the score-threshold, or a single top-score detection for each template if `singleMatch` is true.  \nContrary to `mtm.matchTemplates`, __it does not perform NMS__ so you will potentially get overlapping detections.  \nUsually one should use directly `mtm.matchTemplates`.  \n\nThe website of the project https://multi-template-matching.github.io/Multi-Template-Matching/ references most of the information, including presentations, posters and recorded talks/tutorials.  \nThe [wiki](https://github.com/multi-template-matching/MultiTemplateMatching-Fiji/wiki) section of this related repository also provides some information about the implementation.  \n\n# Installation  \nOpen a command prompt (or Anaconda prompt if using Anaconda) and type  \n`pip install mtm` \n\nFor development purpose, you can clone/download this repo, open a command prompt in the root directory of the repo and use pip to install the package in editable mode.  \n`pip install -e .`  \nmind the dot specifying to use the active directory (ie the one you open the prompt in).  \nIn editable mode, any change to the source code is directly reflected the next time you import the package.  \n\n# Examples\nCheck out the [jupyter notebook tutorial](https://github.com/multi-template-matching/mtm-python-oop/tree/master/tutorials) for some example of how to use the package.  \nYou can run the tutorials online using Binder, no configuration needed ! (click the Binder banner on top of this page).  \n\nTo run the tutorials locally, install the package using pip as described above, then clone/download the repository and unzip it.  \nFinally open a jupyter-notebook session in the unzipped folder to be able to open and execute the notebooks.  \n\n# Citation\nIf you use this implementation for your research, please cite:\n  \nThomas, L.S.V., Gehrig, J.  \n_Multi-template matching: a versatile tool for object-localization in microscopy images_  \nBMC Bioinformatics 21, 44 (2020). https://doi.org/10.1186/s12859-020-3363-7\n\n# Related projects\nSee this [repo](https://github.com/multi-template-matching/MultiTemplateMatching-Fiji) for the implementation as a Fiji plugin.  \n[Here](https://nodepit.com/workflow/com.nodepit.space%2Flthomas%2Fpublic%2FMulti-Template%20Matching.knwf) for a KNIME workflow using Multi-Template-Matching.\n\n\n# Origin of the work\nThis work has been part of the PhD project of **Laurent Thomas** under supervision of **Dr. Jochen Gehrig** at ACQUIFER.  \n\n<img src=\"https://github.com/multi-template-matching/MultiTemplateMatching-Python/blob/master/images/Acquifer_Logo_60k_cmyk_300dpi.png\" alt=\"ACQUIFER\" width=\"400\" height=\"80\">     \n\n# Funding\nThis project has received funding from the European Unionâ€™s Horizon 2020 research and innovation program under the Marie Sklodowska-Curie grant agreement No 721537 ImageInLife.  \n\n<p float=\"left\">\n<img src=\"https://github.com/multi-template-matching/MultiTemplateMatching-Python/blob/master/images/ImageInlife.png\" alt=\"ImageInLife\" width=\"130\" height=\"100\">\n<img src=\"https://github.com/multi-template-matching/MultiTemplateMatching-Python/blob/master/images/MarieCurie.jpg\" alt=\"MarieCurie\" width=\"130\" height=\"130\">\n</p>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/multi-template-matching/mtm-python-oop",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mtm",
    "package_url": "https://pypi.org/project/mtm/",
    "platform": "",
    "project_url": "https://pypi.org/project/mtm/",
    "project_urls": {
      "Bug Tracker": "https://github.com/multi-template-matching/mtm-python-oop/issues",
      "Homepage": "https://github.com/multi-template-matching/mtm-python-oop"
    },
    "release_url": "https://pypi.org/project/mtm/1.0.0/",
    "requires_dist": [
      "numpy",
      "scikit-image",
      "shapely",
      "matplotlib"
    ],
    "requires_python": ">=3",
    "summary": "Object-recognition in images using multiple templates (object-oriented implementation).",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11964970,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eacaf96768d36badff4fada44715696d2bf5c264829c9ee5d61880ca72411a4b",
          "md5": "172fee066923415aafa5f60b5fe1866a",
          "sha256": "984a21a3c1abc153ca70059861e608c1e3b6b1e476ae9a3e8b7024498c75f747"
        },
        "downloads": -1,
        "filename": "mtm-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "172fee066923415aafa5f60b5fe1866a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 12369,
        "upload_time": "2021-11-08T20:45:47",
        "upload_time_iso_8601": "2021-11-08T20:45:47.425924Z",
        "url": "https://files.pythonhosted.org/packages/ea/ca/f96768d36badff4fada44715696d2bf5c264829c9ee5d61880ca72411a4b/mtm-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eacaf96768d36badff4fada44715696d2bf5c264829c9ee5d61880ca72411a4b",
        "md5": "172fee066923415aafa5f60b5fe1866a",
        "sha256": "984a21a3c1abc153ca70059861e608c1e3b6b1e476ae9a3e8b7024498c75f747"
      },
      "downloads": -1,
      "filename": "mtm-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "172fee066923415aafa5f60b5fe1866a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 12369,
      "upload_time": "2021-11-08T20:45:47",
      "upload_time_iso_8601": "2021-11-08T20:45:47.425924Z",
      "url": "https://files.pythonhosted.org/packages/ea/ca/f96768d36badff4fada44715696d2bf5c264829c9ee5d61880ca72411a4b/mtm-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}