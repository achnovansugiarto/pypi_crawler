{
  "info": {
    "author": "FengLiuFeseliud",
    "author_email": "17351198406@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pycloudmusic163\r\n\r\n​\t\t使用 Python 快速调用网易云音乐 api\r\n\r\n### 参考\r\n\r\n> [NeteaseCloudMusicApi](https://github.com/Binaryify/NeteaseCloudMusicApi)\r\n>\r\n> \r\n\r\n### 安装\r\n\r\n```python\r\npip install pycloudmusic163\r\n```\r\n\r\n\r\n\r\n### 简单使用\r\n\r\n> 获取歌单\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> \r\n> # 默认请求头\r\n> headers = Music163.music163_headers\r\n> headers[\"cookie\"] += \"用户cookie\"\r\n> music163 = Music163(headers=headers)\r\n> \r\n> # https://music.163.com/playlist?id=6843808070\r\n> playlist = music163.playlist(\"6843808070\") # 歌单id\r\n> # 打印歌单标题 歌单作者 歌单简介\r\n> print(playlist.name, playlist.user_str, playlist.description)\r\n> for music in playlist:\r\n> # 打印歌单每一首歌的标题 歌手\r\n> print(music.name_str, music.artist_str)\r\n> ```\r\n>\r\n> 二维码登录\r\n>\r\n> ```python\r\n> from pycloudmusic163 import LoginMusic163\r\n> import time\r\n> \r\n> login = LoginMusic163()\r\n> # 获取key\r\n> key = login.login_qr_key()\r\n> # 打印key\r\n> # ('c13526fa-....', 'https://music.163.com/login?codekey=....')\r\n> # 用第二个地址生成二维码 这里可以去 https://cli.im/ 来生成\r\n> print(key)\r\n> # 轮查二维码 803为登录成功\r\n> while True:\r\n> code, music163, cookie = login.login_qr(key)\r\n> if code == 803:\r\n>   break\r\n> time.sleep(3)\r\n> \r\n> # 验证登录成功 打印用户名称 用户签名 用户id\r\n> my = music163.my()\r\n> print(my.name, my.signature, my.id)\r\n> ```\r\n>\r\n\r\n***\r\n\r\n\r\n\r\n# 使用文档\r\n\r\n**以下很长注意善用搜索 Ctrl+F**（第一次写这么长的文档...，呜，倒了）\r\n\r\n## 0.错误码\r\n\r\n> ```\r\n> 400: 参数错误\r\n> 404: api不存在\r\n> -460: 出现-460 尝试在cookie加上 \"appver=2.7.1.198277; os=pc;\"\r\n> 250: 风险提示 异常\r\n> ```\r\n\r\n## 1.登录\r\n\r\n> `from pycloudmusic163 import LoginMusic163`\r\n>\r\n> **`LoginMusic163() `初始化 login 对象**\r\n>\r\n> ### login 对象\r\n>\r\n> `login.login_email(self, email, password)` 邮箱登录\r\n>\r\n> **参数说明:** \r\n>\r\n> email：邮箱\r\n> password：密码\r\n>\r\n> 错误码：501 未注册 502 密码错误\r\n>\r\n> 成功返回状态码， Music163对象， cookie，失败返回错误码，\"\"，\"\"\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `login.login_captcha(phone, country_code=\"86\")`  发送手机验证码\r\n>\r\n> **参数说明:** \r\n>\r\n> phone： 手机号\r\n\r\n> country_code： 国家码 (用于国外手机号登录)\r\n>\r\n> 成功返回0，失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `login.login_cellphone(phone, password, captcha=False, country_code=\"86\")` 手机/验证码 登录\r\n>\r\n> **参数说明:**\r\n>\r\n> phone： 手机号\r\n> password： 验证参数\r\n> captcha： True 时为验证码登录 password 值为验证码，False 时为密码登录 password 值为密码\r\n> country_code： 国家码 (用于国外手机号登录)\r\n> 成功返回状态码， Music163对象， cookie，失败返回错误码，\"\"，\"\"\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `login.login_qr_key()` 获取二维码 key\r\n>\r\n> `login.login_qr(qr_key)`  二维码登录，查询二维码状态\r\n>\r\n> **参数说明:**\r\n>\r\n> qr_key：二维码 key\r\n>\r\n> 状态码：801 等待扫码， 802 授权中， 800 二维码不存在或已过期， 803 登录成功\r\n> 成功返回状态码, Music163对象, cookie，失败返回状态码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `login.check_captcha(phone, captcha, country_code=\"86\")` 校验验证码\r\n>\r\n> **参数说明:**\r\n>\r\n> phone：手机号\r\n> captcha：验证码\r\n> country_code： 国家码 (用于国外手机号登录)\r\n> 校验成功返回 True ，校验失败返回 False，api 错误返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `login.check_cellphone(phone, country_code=\"86\")` 检查手机号是否被注册\r\n>\r\n> **参数说明:**\r\n>\r\n> phone：手机号\r\n> country_code： 国家码 (用于国外手机号登录)\r\n> 未注册返回  None，被注册返回用户名，api 错误返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `login.register(name, phone, password, captcha, country_code=\"86\")`  手机注册/修改密码\r\n>\r\n> **参数说明:**\r\n>\r\n> name：昵称\r\n>\r\n> phone：手机号\r\n>\r\n> password：密码\r\n>\r\n> captcha：验证码\r\n>\r\n> country_code：国家码 (用于国外手机号)\r\n>\r\n> 成功返回状态码， Music163对象， cookie，失败返回错误码，\"\"，\"\"\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `login.replace_cellphone(phone, captcha, old_captcha, country_code=\"86\")` 更换绑定手机\r\n>\r\n> **参数说明:**\r\n>\r\n> phone：手机号\r\n>\r\n> captcha：新手机验证码\r\n>\r\n> old_captcha：原手机验证码\r\n>\r\n> country_code：国家码 (用于国外手机号)\r\n>\r\n> 没有测试过的接口，返回啥我也不知道\r\n\r\n## 2.获取对象\r\n\r\n> `from pycloudmusic163 import Music163`\r\n>\r\n> **`Music163(headers=headers)` 初始化 music163 对象**\r\n>\r\n> 可以通过 `Music163.music163_headers`  获取一个初始请求头\r\n>\r\n> 然后传入 cookie 登录`headers[\"cookie\"] += \"用户cookie\"`\r\n>\r\n> 使用 login 对象登录成功也会返回 music163 对象\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.my()` 获取当前 cookie 用户信息并实例化 my 对像\r\n>\r\n> cookie 无效返回200，成功返回 my 对像，失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.music(id_)` 获取歌曲并实例化 music 对像\r\n>\r\n> **参数说明:**\r\n>\r\n> id_：歌曲id 支持多 id (使用列表)\r\n>\r\n> 成功返回 music 对像列表， 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.user(id_)` 获取用户并实例化 user 对像\r\n>\r\n> **参数说明:**\r\n>\r\n> id_：用户id\r\n>\r\n> 成功返回 user 对像，失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.my()` 获取当前 cookie 用户信息并实例化 my 对像\r\n>\r\n> **参数说明:**\r\n>\r\n> 成功返回 my 对像，失败返回错误码，cookie 无效返回200\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.playlist(id_)` 获取歌单并实例化 playlist 对像\r\n>\r\n> **参数说明:**\r\n>\r\n> id_：歌单 id\r\n>\r\n> 成功返回 playlist 对像，失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.artist(id_)` 获取歌手并实例化 artist 对像\r\n>\r\n> **参数说明:**\r\n>\r\n> id_：歌手 id\r\n>\r\n> 成功返回 artist 对像，失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.album(id_)` 获取专辑并实例化 album 对像\r\n>\r\n> 该方法实例化的 album 对像只有 id 和专辑相关接口\r\n>\r\n> 暂时没有直接获取专辑信息的方法\r\n>\r\n> 不推荐这样获取 album 对像\r\n>\r\n> **参数说明:**\r\n>\r\n> id_：专辑 id\r\n>\r\n> 返回 album 对像\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.mv(id_)` 获取 mv 并实例化 mv 对像\r\n>\r\n> **参数说明:**\r\n>\r\n> id_：mv id\r\n>\r\n> 成功返回mv对像，失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.dj(id_)` 获取电台并实例化 dj 对像\r\n>\r\n> **参数说明:**\r\n>\r\n> id_：电台 id\r\n>\r\n> 成功返回 dj 对像，失败返回错误码 \r\n>\r\n>  \r\n\r\n## 3.对象方法\r\n\r\n> ## 注意\r\n>\r\n> **歌单，专辑，动态，云盘，歌手**  都支持保存在 `self.music_list` 的数据可以直接遍历该对像获取\r\n>\r\n> **歌曲， 歌单，专辑，MV，动态**  都支持评论，因此都支持以下方法\r\n>\r\n> `comment(hot=True, page=0, limit=20, before_time=0)`  该对象的评论\r\n>\r\n> `comment_floor(comment_id, page=0, limit=20)`  楼层评论\r\n>\r\n> `comment_like(comment_id, in_)`  评论点赞\r\n>\r\n> `comment_add(content)`  发送评论\r\n>\r\n> `comment_delete(comment_id)`  删除评论\r\n>\r\n> `comment_reply(content, comment_id)`  回复评论\r\n>\r\n> **以下是这些方法的参数说明:**\r\n>\r\n> hot：热门评论 True 全部评论 False\r\n>\r\n> before_time：分页参数，取上一页最后一项的 time 获取下一页数据(获取超过5000条评论的时候需要用到)\r\n>\r\n> page：页数\r\n>\r\n> limit：一页获取数量\r\n>\r\n> comment_id：一律为评论id (comment返回的评论中的commentId)\r\n>\r\n> content：一律为评论内容\r\n>\r\n> in_：True 点赞，False 取消点赞\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> **歌单，专辑，MV，歌手，电台**  都支持 收藏，因此支持`self.subscribe`方法\r\n>\r\n> `subscribe(in_)`  对像 收藏/取消收藏\r\n>\r\n> **参数说明:**\r\n>\r\n> in_：True 收藏 False 取消收藏\r\n>\r\n> 成功返回0 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> **MV，歌手，歌曲**  都支持获取相似，因此支持`self.similar`方法\r\n>\r\n> `similar()` 该对象的相似\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **music163 对像**\r\n>\r\n> `music163.search(key, type_=1, page=0, limit=30)` 搜索\r\n>\r\n> 返回的大部分内容都可以直接生成对象，不用二次请求\r\n>\r\n> 从 pycloudmusic163.object 导入类后， 可以这样直接生成 `类(请求头, 一条数据)` \r\n>\r\n> 所有对象都继承于 Link Link.headers 即可以获取用于生成这个对像的请求头\r\n>\r\n> **参数说明:**\r\n>\r\n> key：搜索内容\r\n>\r\n> type_：搜索类型\r\n>\r\n> page：页数\r\n>\r\n> limit：一页获取数量\r\n>\r\n> 成功返回内容 失败返回错误码\r\n>\r\n> type_ 搜索类型如下\r\n>\r\n> ```\r\n> 1: 单曲 \r\n> 10: 专辑\r\n> 100: 歌手\r\n> 1000: 歌单\r\n> 1002: 用户\r\n> 1004: MV\r\n> 1006: 歌词\r\n> 1009: 电台\r\n> 1014: 视频\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.personalized_playlist(limit=30)` 推荐歌单\r\n>\r\n> **参数说明:**\r\n>\r\n> limit：一页获取数量 (不支持 offset)\r\n>\r\n> 成功返回内容 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.personalized_new_song(areaId=0, limit=10)` 推荐新歌\r\n>\r\n> **参数说明:**\r\n>\r\n> limit：一页获取数量 (不支持 offset)\r\n>\r\n> 成功返回内容 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.personalized_dj()` 推荐电台\r\n>\r\n> **参数说明:**\r\n>\r\n> 成功返回内容 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.home_page(refresh=True, cursor=None)` 首页-发现 app 主页信息\r\n>\r\n> **参数说明:**\r\n>\r\n> refresh：是否刷新数据\r\n>\r\n> cursor：上一条数据返回的 cursor\r\n>\r\n> 成功返回内容 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.top_artist_list(type_=1, page=0, limit=100)`  歌手榜\r\n>\r\n> **参数说明:**\r\n>\r\n> type_：地区类型\r\n>\r\n> page：页数\r\n>\r\n> limit：一页获取数量\r\n>\r\n> 成功返回内容 失败返回错误码\r\n>\r\n> ```\r\n> 地区类型\r\n> 1: 华语\r\n> 2: 欧美\r\n> 3: 韩国\r\n> 4: 日本\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music163.top_song(type_=0)`  新歌速递\r\n>\r\n> **参数说明:**\r\n>\r\n> type_：地区类型\r\n>\r\n> ```\r\n> 地区类型\r\n> 全部:0 \r\n> 华语:7 \r\n> 欧美:96 \r\n> 日本:8 \r\n> 韩国:16\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **user 对象**\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import user\r\n> user = user(Music163.music163_headers, {})\r\n> \r\n> # user 对象的属性\r\n> \r\n> # 用户uid\r\n> user.id\r\n> # 用户名称\r\n> user.name\r\n> # 用户签名\r\n> user.signature\r\n> # 用户等级\r\n> user.level\r\n> # 头像\r\n> user.cover\r\n> # 会员 0 无\r\n> user.vip\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `user.like_music()`  获取该 user 对象喜欢的歌曲 (返回 playlist 对象)\r\n>\r\n> `user.playlist(page=0, limit=30)`   获取该 user 对象的歌单\r\n>\r\n> **参数说明:**\r\n>\r\n> page：页数\r\n>\r\n> music_id：一页获得数量\r\n>\r\n> 成功返回 playlist 对象列表，失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `user.record(type_=True, music_object=True)`   获取该 user 对象听歌榜单\r\n>\r\n> **参数说明:**\r\n>\r\n> type_：True 所有时间，False 最近一周\r\n>\r\n> music_object：True 将 song 转为 music 对象返回，False 将 song 以字典返回\r\n>\r\n> 成功返回数据 失败返回错误码\r\n>\r\n> ```json\r\n> 返回数据的格式\r\n> [\r\n> {\r\n> \t播放次数\r\n>   \"song\": music 数据/music 对象\r\n> \t},\r\n> \t{\r\n> \t播放次数\r\n>   \"song\": music 数据/music 对象\r\n> \t},\r\n> ...\r\n> ]\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `user.follow(follow_in=True)`  关注该 user 对象用户 \r\n>\r\n> **参数说明:**\r\n>\r\n> follow_in：True 时关注，False 取消关注\r\n>\r\n> 成功返回0，失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **my 对象**\r\n>\r\n> 该对象继承于 user ，支持 user 所有方法属性\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import my\r\n> my = my(Music163.music163_headers, {})\r\n> \r\n> # my 对象扩展的属性\r\n> \r\n> # 登录ip\r\n> my.login_ip\r\n> # 登录时间戳\r\n> my.login_time\r\n> # 登录时间戳转字符串，格式 \"%Y/%m/%d %H:%M:%S\"\r\n> my.login_time_str\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `my.recommend_playlist()`  获取日推\r\n>\r\n> `my.recommend_resource()`  获取每日推荐歌单\r\n>\r\n> `my.fm()`  私人fm，实例化一个fm对象并返回\r\n>\r\n> `my.message()`  私信，实例化一个message对象并返回\r\n>\r\n> `my.event()`  动态，实例化一个event对象并返回\r\n>\r\n> `my.sublist_artist(page=0, limit=25)`  查看该 my 对象收藏的歌手\r\n>\r\n> `my.sublist_album(page=0, limit=25)`  查看该 my 对象用户收藏的专辑\r\n>\r\n> `my.sublist_dj(page=0, limit=25)`   查看该 my 对象用户收藏的电台\r\n>\r\n> `my.sublist_mv(page=0, limit=25)`  查看该 my 对象用户收藏的 MV\r\n>\r\n> `my.sublist_topic(page=0, limit=50)`  查看该 my 对象用户收藏的专题\r\n>\r\n> **以上 sublist 方法的参数说明:**\r\n>\r\n> page：页数\r\n>\r\n> limit：一页获得数量\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `my.cloud(page=0, limit=30)`  获取云盘数据，并实例化一个cloud对象返回\r\n>\r\n> **参数说明:**\r\n>\r\n> page：页数\r\n>\r\n> music_id：一页获得数量\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `my.sign(type_=True)`  使用该 my 对象签到\r\n>\r\n> **参数说明:**\r\n>\r\n> type_：True 为安卓端签到3点经验，False 为网页签到2点经验\r\n>\r\n> 成功返回0，失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `playmode_intelligence(self, music_id, sid=None, playlist_id=None)`  心动模式/智能播放\r\n>\r\n> **参数说明:**\r\n>\r\n> music_id：歌曲id\r\n>\r\n> sid：可选 要开始播放的歌曲的id\r\n>\r\n> playlist_id：歌单id 默认使用喜欢的歌曲歌单\r\n>\r\n> 成功返回数据 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **message 对象**\r\n>\r\n> 使用 my 对象生成，也可以如下生成\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import message\r\n> \r\n> # 如下生成无法保证 cookie 有效性, 使用 my 对象生成保证了 cookie 有效性\r\n> headers = Music163.music163_headers\r\n> headers[\"cookie\"] += \"用户cookie\"\r\n> message = message(headers, \"用户uid\")\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `message.comments(before_time=-1, limit=30)`  获取回复我\r\n>\r\n> **参数说明:**\r\n>\r\n> before_time：取上一页最后一个歌单的 updateTime，获取下一页数据\r\n>\r\n> limit：一页获取量\r\n>\r\n> 成功返回数据 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `message.forwards(page=0, limit=30)`  获取@我\r\n>\r\n> **参数说明:**\r\n>\r\n> page：页数\r\n>\r\n> limit：一页获取量\r\n>\r\n> 成功返回数据 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `message.notices(last_time=-1, limit=30)`  获取通知\r\n>\r\n> **参数说明:**\r\n>\r\n> last_time：传入上一次返回结果的 time，将会返回下一页的数据\r\n>\r\n> limit：一页获取量\r\n>\r\n> 成功返回数据 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `message.private_new()`  获取最接近联系人\r\n>\r\n> `message.private_history(id_, page=0, limit=30, user_object=True)`  获取指定用户历史私信\r\n>\r\n> **参数说明:**\r\n>\r\n> id_：用户id\r\n>\r\n> page：页数\r\n>\r\n> limit：一页获取量\r\n>\r\n> user_object：True 将 user 转为 user 对象返回，False 将 user 以 json 返回\r\n>\r\n> 成功返回数据 失败返回错误码\r\n>\r\n> ```json\r\n> 返回数据的格式\r\n> [\r\n> {\r\n> \t私信数据\r\n>   \"fromUser\": user 数据/user 对象\r\n>   \"toUser\": user 数据/user 对象\r\n> \t},\r\n> \t{\r\n> \t私信数据\r\n>   \"fromUser\": user 数据/user 对象\r\n>   \"toUser\": user 数据/user 对象\r\n> \t},\r\n> ...\r\n> ]\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `message.private(page=0, limit=30, user_object=True)` 获取私信列表\r\n>\r\n> **参数说明:**\r\n>\r\n> page：页数\r\n>\r\n> limit：一页获取量\r\n>\r\n> user_object：True 将 user 转为 user 对象返回，False 将 user 以 json 返回\r\n>\r\n> 成功返回数据 失败返回错误码\r\n>\r\n> 返回数据的格式同`message.private_history`\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `message.send(msg, to_user_id, user_object=True)`  发送私信\r\n>\r\n> `message.send_music(msg, id_, to_user_id, user_object=True)`  发送私信 带歌曲\r\n>\r\n> `message.send_album(msg, id_, to_user_id, user_object=True)`  发送私信 带专辑\r\n>\r\n> `message.send_playlist(msg, id_, to_user_id, user_object=True)`  发送私信 带歌单\r\n>\r\n> **以上发送私信的参数说明:**\r\n>\r\n> id_：用户id\r\n>\r\n> page：页数\r\n>\r\n> limit：一页获取量\r\n>\r\n> id_：需一起发送的资源 id\r\n>\r\n> user_object：True 将 user 转为 user 对象返回，False 将 user 以 json 返回\r\n>\r\n> 成功返回第一位发送给的用户历史私信 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **event 对象**\r\n>\r\n> 使用 my 对象生成，也可以如下生成\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import event\r\n> \r\n> # 如下生成无法保证 cookie 有效性, 使用 my 对象生成保证了 cookie 有效性\r\n> headers = Music163.music163_headers\r\n> headers[\"cookie\"] += \"用户cookie\"\r\n> event = event(headers)\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `event.event(last_time=-1, limit=30)`  获取下一页动态 保存至self.music_list\r\n>\r\n> 参数说明:\r\n>\r\n> last_time：传入上一次返回结果的 time,将会返回下一页的数据\r\n>\r\n> limit：一页获取量\r\n>\r\n> 成功返回0 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `event.user_event(user_id, last_time=-1, limit=30)`  获取下一页动态 保存至self.music_list\r\n>\r\n> 参数说明:\r\n>\r\n> user_id：用户id\r\n>\r\n> last_time：传入上一次返回结果的 time,将会返回下一页的数据\r\n>\r\n> limit：一页获取量\r\n>\r\n> 成功返回0 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `event.del_(ev_id)` 删除cookie用户动态\r\n>\r\n> 参数说明:\r\n>\r\n> ev_id：动态id\r\n>\r\n> 成功返回0 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `event.send(msg)`  发送动态\r\n>\r\n> `event.send_music(msg, id_)` 发送动态 带歌曲\r\n>\r\n> `event.send_playlist(msg, id_)`  发送动态 带歌单\r\n>\r\n> `event.send_mv(msg, id_)`  发送动态 带MV\r\n>\r\n> `event.send_dj(msg, id_)`  发送动态 带电台\r\n>\r\n> `event.send_dj_music(msg, id_)`  发送动态 带电台节目\r\n>\r\n> **以上发送动态的参数说明:**\r\n>\r\n> msg：内容，140 字限制，支持 emoji，@用户名\r\n>\r\n> id_：需一起发送的资源 id\r\n>\r\n> 成功返回0 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **_event 对象**\r\n>\r\n> 遍历 event 对象时生成，迭代返回\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import _event\r\n> music = _event(Music163.music163_headers, {})\r\n> \r\n> # _event 对象的属性\r\n> \r\n> # 资源类型\r\n> _event.data_type\r\n> # 动态发布用户\r\n> _event.user\r\n> # 动态发布用户转字符串\r\n> _event.user_str\r\n> # 动态内容\r\n> _event.msg\r\n> # 动态图片\r\n> _event.pics\r\n> # 动态话题\r\n> _event.act_name\r\n> # 动态类型\r\n> _event.type\r\n> # 动态类型转字符串\r\n> _event.type_str\r\n> # 动态id\r\n> _event.id\r\n> # 动态id(ev_id)\r\n> _event.ev_id\r\n> # 动态分享数\r\n> _event.share_coun\r\n> # 动态评论数\r\n> _event.comment_count\r\n> # 动态点赞数\r\n> _event.like_count\r\n> # 动态时间\r\n> _event.event_time\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `_event.forward(msg)` 指定该  _event 对象转发到cookie用户\r\n>\r\n> 参数说明:\r\n>\r\n> msg：内容\r\n>\r\n> ev_id：转发动态id\r\n>\r\n> 成功返回0 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **fm对象**\r\n>\r\n> 使用 my 对象生成，也可以如下生成\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import fm\r\n> \r\n> # 如下生成无法保证 cookie 有效性, 使用 my 对象生成保证了 cookie 有效性\r\n> headers = Music163.music163_headers\r\n> headers[\"cookie\"] += \"用户cookie\"\r\n> fm = fm(headers)\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `fm.read()` 获取fm歌曲\r\n>\r\n> `fm.write(id_)` 将歌曲扔进垃圾桶 (优化推荐)\r\n>\r\n> **参数说明:**\r\n>\r\n> id_：歌曲id\r\n>\r\n> 成功返回 (0,垃圾桶歌曲数) 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **cloud 对象**\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import cloud \r\n> cloud = cloud(Music163.music163_headers, {})\r\n> \r\n> # cloud 对象的属性\r\n> \r\n> # 云盘歌曲数\r\n> cloud.cloud_count\r\n> # 云盘最大容量\r\n> cloud.max_size\r\n> # 云盘已用容量\r\n> cloud.size\r\n> # 云盘当时页歌曲数据\r\n> cloud.music_list\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `cloud.get(page=0, limit=30)`  获取云盘数据 保存至self.music_list\r\n>\r\n> **参数说明:**\r\n>\r\n> page：页数\r\n>\r\n> limit：一页获取量\r\n>\r\n> 成功返回0 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `cloud.music(id_)` 获取云盘歌曲详细数据\r\n>\r\n> **参数说明:**\r\n>\r\n> id_：云盘歌曲id 支持多id使用列表 (self.music_list中的songId)\r\n>\r\n> 成功返回数据 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `cloud.del_(id_)` 删除云盘歌曲\r\n>\r\n> **参数说明:**\r\n>\r\n> id_：云盘歌曲id 支持多id使用列表 (self.music_list中的songId)\r\n>\r\n> 成功返回0 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **cloud_music 对象**\r\n>\r\n> 遍历 cloud 对象时生成，迭代返回\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import music\r\n> music = music(Music163.music163_headers, {})\r\n> \r\n> # cloud_music 对象的属性\r\n> \r\n> # 云盘歌曲id\r\n> self.id\r\n> # 标题\r\n> self.name\r\n> # 歌曲大小\r\n> self.file_size\r\n> # 歌曲文件名\r\n> self.file_name\r\n> # 歌手\r\n> self.artist\r\n> # 专辑\r\n> self.album\r\n> # 封面\r\n> self.cover\r\n> # 上传时间\r\n> self.add_time\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `cloud_music.set_music_data(id_, user_id)` 云盘歌曲信息匹配纠正 (不知道怎么用)\r\n>\r\n> **参数说明:**\r\n>\r\n> id_：要匹配的歌曲 id\r\n>\r\n> user_id：用户 id\r\n>\r\n> 成功返回数据 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> 下载该 music 对象歌曲 (使用 app 播放接口)  这个接口相当于在 app 中点击播放\r\n>\r\n> `cloud_music.play(download_path, son_path=\"\", chunk_size=1024, download_callback=None, quality=None)`\r\n>\r\n> **参数说明:**\r\n>\r\n> 参数参考`music.music_download`\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **music 对象**\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import music\r\n> music = music(Music163.music163_headers, {})\r\n> \r\n> # music 对象的属性\r\n> \r\n> # 资源类型\r\n> music.data_type\r\n> # 歌曲id\r\n> music.id\r\n> # 标题列表 [大标题, 副标题]\r\n> music.name\r\n> # 标题转字符串\r\n> music.name_str\r\n> # 作者列表 [作者, 作者, ...]\r\n> music.artist\r\n> # 作者列表转字符串\r\n> music.artist_str\r\n> # 专辑列表\r\n> music.album_data\r\n> # 专辑列表转字符串\r\n> music.album_str\r\n> # 所有音质\r\n> music.quality\r\n> # mv id\r\n> music.mv_id\r\n> # 发表时间\r\n> music.publish_time\r\n> # True时获取完成资源链接后直接返回(不进行下载)\r\n> music.not_download = False\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music.similar_playlist()`  该 music 对象的相似歌单\r\n>\r\n> `music.similar_user()`  最近5个听了这 music 对象的用户\r\n>\r\n> `music.album()`  实例化该对像专辑 album 对像 并返回 album 对像\r\n>\r\n> `music.mv()`  获取该对像 mv 实例化 mv 对像 并返回 mv 对像\r\n>\r\n> `music.like(like)`  红心该 music 对象与取消红心\r\n>\r\n> **参数说明:**\r\n>\r\n> like：红心 True 取消红心 False\r\n>\r\n> 成功返回0 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `music.lyric()` 该 music 对象的歌词\r\n>\r\n> **参数说明:**\r\n>\r\n> 成功返回(类型码,歌词) 失败返回错误码\r\n>\r\n> ```\r\n> 类型码\r\n> 0 滚动歌词 \r\n> 1 不滚动歌词 \r\n> 2 纯音乐 \r\n> 3 暂无歌词\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> 下载该 music 对象歌曲 (使用 app 下载接口) 这个接口相当于在 app 中点击下载\r\n>\r\n> `music.music_download(download_path, son_path=\"\", chunk_size=1024, download_callback=None, quality=None)`\r\n>\r\n> **参数说明:**\r\n>\r\n> download_path：下载目录\r\n>\r\n> son_path：下载至 下载目录下的子目录\r\n>\r\n> chunk_size：字节流大小\r\n>\r\n> download_callback：文件保存前回调 可设置文件名 默认文件名格式  **id_大标题.mp3**\r\n>\r\n> quality：音质\r\n>\r\n> 成功下载返回0 获取下载 url 失败时返回错误码\r\n>\r\n> download_callback 详细使用查看继承类（Link）download 方法说明\r\n>\r\n> 错误码 -105需要会员\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> 下载该 music 对象歌曲 (使用 app 播放接口)  这个接口相当于在 app 中点击播放，会员歌曲返回试听\r\n>\r\n> `music.play(download_path, son_path=\"\", chunk_size=1024, download_callback=None, quality=None)`\r\n>\r\n> **参数说明:**\r\n>\r\n> 参数参考`music.music_download`\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **playlist 对象**\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import playlist\r\n> playlist = playlist(Music163.music163_headers, {})\r\n> \r\n> # playlist 对象的属性\r\n> \r\n> # 资源类型\r\n> playlist.data_type\r\n> # 歌单id\r\n> playlist.id\r\n> # 歌单标题\r\n> playlist.name\r\n> # 歌单封面\r\n> playlist.cover\r\n> # 歌单创建者\r\n> playlist.user\r\n> # 歌单创建者转字符串\r\n> playlist.user_str\r\n> # 歌单tags列表\r\n> playlist.tags\r\n> # 歌单tags转字符串\r\n> playlist.tags_str\r\n> # 歌单描述\r\n> playlist.description\r\n> # 歌单播放量\r\n> playlist.play_count\r\n> # 歌单收藏量\r\n> playlist.subscribed_count\r\n> # 歌单创建时间\r\n> playlist.create_time\r\n> # 歌单歌曲\r\n> playlist.music_list\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `playlist.add(music_id)`  向 playlist 对像添加歌曲\r\n>\r\n> **参数说明:**\r\n>\r\n> music_id：歌曲i d 支持多歌曲 id (使用列表)\r\n>\r\n> 成功返回0，失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `playlist.del_(self, music_id)`  向 playlist 对像删除歌曲\r\n>\r\n> **参数说明:**\r\n>\r\n> music_id：歌曲 id 支持多歌曲 id (使用列表)\r\n>\r\n> 成功返回0，对像剩余歌曲数，失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `playlist.subscribers(page=0, limit=20)`  查看歌单收藏者\r\n>\r\n> **参数说明:**\r\n>\r\n> page：页数\r\n>\r\n> music_id：一页获得数量\r\n>\r\n> 成功返回数据，失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **artist对象**\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import artist\r\n> artist = artist(Music163.music163_headers, {})\r\n> \r\n> # artist 对象的属性\r\n> \r\n> # 歌手id\r\n> artist.id\r\n> # 歌手\r\n> artist.name\r\n> # 歌手简介\r\n> artist.brief_desc_str\r\n> artist.brief_desc\r\n> # 专辑数\r\n> artist.album_size\r\n> # 单曲数\r\n> artist.music_size\r\n> # mv数\r\n> artist.mv_size\r\n> # 头像\r\n> artist.cover\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `artist.song_top()` 获取该对像热门50首 保存至self.music_list\r\n>\r\n> `artist.song(hot=True, page=0, limit=100)`  获取该对像歌曲 保存至self.music_list\r\n>\r\n> **参数说明:**\r\n>\r\n> hot：True 按热度排序 False 按时间排序\r\n>\r\n> page：页数\r\n>\r\n> limit：一页获取数量\r\n>\r\n> 成功返回0 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `artist.album(page=0, limit=30)`  获取该对像专辑\r\n>\r\n> **参数说明:**\r\n>\r\n> page：页数\r\n>\r\n> limit：一页获取数量\r\n>\r\n> 成功返回数据, 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **album对象**\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import album\r\n> album = album(Music163.music163_headers, {})\r\n> \r\n> # album 对象的属性\r\n> \r\n> # 专辑id\r\n> album.id\r\n> # 专辑标题\r\n> album.name\r\n> # 专辑封面\r\n> album.cover\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `album.song()`  获取该对像专辑内容 保存至self.music_list (初始化 album 对象时会调用一次)\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **mv对象**\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import mv\r\n> mv = mv(Music163.music163_headers, {})\r\n> \r\n> # mv 对象的属性\r\n> \r\n> mv.data_type\r\n> # mv id\r\n> mv.id\r\n> # mv标题\r\n> mv.name\r\n> # mv介绍\r\n> mv.desc\r\n> # mv歌手\r\n> mv.artists\r\n> mv.artists_str\r\n> # mv tags\r\n> mv.tags\r\n> mv.tags_str\r\n> # mv封面\r\n> mv.cover\r\n> # mv播放数\r\n> mv.play_count\r\n> # mv收藏数\r\n> mv.subscribe_count\r\n> # mv评论数\r\n> mv.comment_count\r\n> # mv分享数\r\n> mv.share_count\r\n> # mv质量\r\n> mv.quality\r\n> # 发布时间\r\n> mv.publish_time\r\n> # True时获取完成资源链接后直接返回(不进行下载)\r\n> mv.not_download\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> 获取播放该mv对象指定的视频文件 参数参考`music.music_download`\r\n>\r\n> `mv.play(download_path, son_path=\"\", chunk_size=1024, download_callback=None, quality=1080)`\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **dj对象**\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import dj\r\n> dj = dj(Music163.music163_headers, {})\r\n> \r\n> # dj 对象的属性\r\n> \r\n> # 电台标题\r\n> dj.name\r\n> # 电台id\r\n> dj.id\r\n> # 电台封面\r\n> dj.cover\r\n> # 电台创建者\r\n> dj.user\r\n> dj.user_str\r\n> # 电台描述\r\n> dj.description\r\n> # 电台tags\r\n> dj.tags\r\n> # 电台分享量\r\n> dj.share_count\r\n> # 电台收藏量\r\n> dj.subscribed_count\r\n> # 电台单曲数\r\n> dj.music_count\r\n> dj.create_time\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> `dj.music(page=0, limit=30, asc=False)` 获取电台节目 保存在self.music_list\r\n>\r\n> **参数说明:**\r\n>\r\n> page：页数\r\n>\r\n> limit：一页获取数量\r\n>\r\n> asc：False 时间正序 True 时间倒序\r\n>\r\n> 成功返回0, 失败返回错误码\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> ### **dj_music对象**\r\n>\r\n> ```python\r\n> from pycloudmusic163 import Music163\r\n> from pycloudmusic163.object import dj_music\r\n> dj_music = dj(Music163.music163_headers, {})\r\n> \r\n> # dj_music 对象的属性\r\n> \r\n> dj_music.data_type\r\n> # 电台节目id\r\n> dj_music.id\r\n> # 电台节目标题\r\n> dj_music.name\r\n> # 电台节目简介\r\n> dj_music.description\r\n> # 电台节目封面\r\n> dj_music.cover\r\n> # 电台节目创建时间\r\n> dj_music.create_time\r\n> # 电台节目播放量\r\n> dj_music.play_count\r\n> # 电台节目点赞量\r\n> dj_music.like_count\r\n> # 电台节目评论量\r\n> dj_music.comment_count\r\n> ```\r\n>\r\n>  \r\n>\r\n> \r\n>\r\n> 下载该 music 对象歌曲 (使用 app 播放接口)  这个接口相当于在 app 中点击播放\r\n>\r\n> `dj_music.play(download_path, son_path=\"\", chunk_size=1024, download_callback=None, quality=None)`\r\n>\r\n> **参数说明:**\r\n>\r\n> 参数参考`music.music_download`\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FengLiuFeseliud/pycloudmusic163",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycloudmusic163",
    "package_url": "https://pypi.org/project/pycloudmusic163/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pycloudmusic163/",
    "project_urls": {
      "Homepage": "https://github.com/FengLiuFeseliud/pycloudmusic163"
    },
    "release_url": "https://pypi.org/project/pycloudmusic163/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "使用Python快速调用网易云音乐api",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12215502,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3b3e1db273486a5c0fb1b4fe233a8262fcd09df482f8584d588ff86d51f89a19",
          "md5": "1d9a6a338146c50d9e527d4cbf4daf83",
          "sha256": "858cb9310e234d1d07b09aebf2ae832a450f4608642d2fafb771749b20797480"
        },
        "downloads": -1,
        "filename": "pycloudmusic163-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1d9a6a338146c50d9e527d4cbf4daf83",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29541,
        "upload_time": "2021-12-05T12:58:35",
        "upload_time_iso_8601": "2021-12-05T12:58:35.076876Z",
        "url": "https://files.pythonhosted.org/packages/3b/3e/1db273486a5c0fb1b4fe233a8262fcd09df482f8584d588ff86d51f89a19/pycloudmusic163-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "046c90ac9f83d7a4307285310beab936d858de39f164f8408b3950ad3fc6efa3",
          "md5": "f553c69ad310511eaec4a0d7846bd54f",
          "sha256": "204e14046de3233df928a435359d1df26325f707d4e68d718bebf49ee1f9d89d"
        },
        "downloads": -1,
        "filename": "pycloudmusic163-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f553c69ad310511eaec4a0d7846bd54f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29845,
        "upload_time": "2021-12-05T16:29:10",
        "upload_time_iso_8601": "2021-12-05T16:29:10.035749Z",
        "url": "https://files.pythonhosted.org/packages/04/6c/90ac9f83d7a4307285310beab936d858de39f164f8408b3950ad3fc6efa3/pycloudmusic163-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "046c90ac9f83d7a4307285310beab936d858de39f164f8408b3950ad3fc6efa3",
        "md5": "f553c69ad310511eaec4a0d7846bd54f",
        "sha256": "204e14046de3233df928a435359d1df26325f707d4e68d718bebf49ee1f9d89d"
      },
      "downloads": -1,
      "filename": "pycloudmusic163-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f553c69ad310511eaec4a0d7846bd54f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 29845,
      "upload_time": "2021-12-05T16:29:10",
      "upload_time_iso_8601": "2021-12-05T16:29:10.035749Z",
      "url": "https://files.pythonhosted.org/packages/04/6c/90ac9f83d7a4307285310beab936d858de39f164f8408b3950ad3fc6efa3/pycloudmusic163-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}