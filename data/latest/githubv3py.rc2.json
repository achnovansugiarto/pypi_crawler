{
  "info": {
    "author": "Andrew Page",
    "author_email": "andrew.e.page@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Overview \n\nA python3 API for accessing github\n\n# Build Status\n\n![Linux, MacOSX, Windows](https://github.com/AndrewOfC/githubpy/actions/workflows/build_and_test.yml/badge.svg)\n\n# Authentication\n\nAccess tokens are generated by github at this link https://github.com/settings/tokens/new\n\n# Installation\n\n```bash\n$ pip install githubV3py\n```\n\n# [Examples](examples/README.md)\n\n\n\n# Usage\n\n```python\n\nghc = GitHubClient(token=githubtoken)\n\nascii_art = ghc.MetaGetOctocat(\"Hello World\").data.decode('utf-8')\n    \nprint(ascii_art)\n    \nprint(f\"rate-limit remaining={ghc.rateLimitRemaining}\")\n\n```\n\n```raw\n\n               MMM.           .MMM\n               MMMMMMMMMMMMMMMMMMM\n               MMMMMMMMMMMMMMMMMMM      _____________\n              MMMMMMMMMMMMMMMMMMMMM    |             |\n             MMMMMMMMMMMMMMMMMMMMMMM   | Hello World |\n            MMMMMMMMMMMMMMMMMMMMMMMM   |_   _________|\n            MMMM::- -:::::::- -::MMMM    |/\n             MM~:~ 00~:::::~ 00~:~MM\n        .. MMMMM::.00:::+:::.00::MMMMM ..\n              .MM::::: ._. :::::MM.\n                 MMMM;:::::;MMMM\n          -MM        MMMMMMM\n          ^  M+     MMMMMMMMM\n              MMMMMMM MM MM MM\n                   MM MM MM MM\n                   MM MM MM MM\n                .~~MM~MM~MM~MM~~.\n             ~~~~MM:~MM~~~MM~:MM~~~~\n            ~~~~~~==~==~~~==~==~~~~~~\n             ~~~~~~==~==~==~==~~~~~~\n                 :~==~==~==~==~~\n\nrate-limit remaining=4998\n```\n\n# GitHubClient Methods\n\n[GitHubClient Methods](docs/githubclient_methods.md)\n\n# Pagination\n\nMany of github's api calls return a collection of results as a list. For example:\n\n```python\ncommits = ghc.ReposListCommits(\"owner\", \"repo\", per_page=30, page=1)    \n```\n\n[ResposListCommits](https://docs.github.com/rest/reference/repos#list-commits) returns a list of commits for the specified repository.  However, it will only return the first 'per_page' entries.   To get the next set of commits, increment 'page' by 1.\n\n```python\ncommits = ghc.ReposListCommits(\"owner\", \"repo\", per_page=30, page=2)    \n```\n\n## Automatic Pagination\n\nGiven that in many cases all of a particular set of a data is desired, a convenient class method is provided for instance methods that do pagination:\n\n```python\n\ncommits = GitHubClient.paginate(ghc.ReposListCommits, \"owner\", \"repo\", pagination_limit=1000)\n\n```\n\nThe first parameter is the paginating instance method and the remaining parameters are the parameters you would supply the method if calling it discretely.   The optional 'pagination_limit' parameter can be specified to put a limit on the amount of data retrieved.  If not specified GitHubClient.paginate will attempt to retrieve every record.\n\nAn 'extractor' method may be provided for responses that contain a list, as opposed to a list itself, for example:  GitHubClient.ActionsListArtifactsForRepo returns and instance of:\n\n```python\nclass ActionsListArtifactsForRepoSuccess(ResponseBase):\n    def __init__(self, artifacts:list, total_count:int):\n        ResponseBase.__init__(self)\n        self._artifacts = artifacts\n        self._total_count = total_count\n        return\n        \n    def _getartifacts(self):\n        return self._artifacts and [ entry and Artifact(**entry) for entry in self._artifacts ]\n        \n    artifacts = property(_getartifacts)\n```\n\nIn order to paginate the result, the artifacts property must be extracted:\n\n```python\nfrom operator import attrgetter\n\nartifacts = GitHubClient.paginate(ghc.ActionsListArtifactsForRepo, \n                                  owner, reponame, \n                                  extractor=attrgetter('artifacts'))\n\n```\n\n\nUSE THIS METHOD WITH CAUTION.  Have some situational awareness of how much data you will be asking for.   Otherwise the [rate-limit](https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting) on the authentication you're using could be fully consumed. \n\nTo this end another method is provided that provides a [generator object](https://wiki.python.org/moin/Generators) instead.   Iterating over it will still appear as if it were one 'list' but the list is broken up into discrete queries, so that if you're scanning for something you can stop, without having to download the entire collection.\n\n```python\nfor repo in GitHubClient.generate(ghc.ReposListForAuthenticatedUser, type=None):\n    print(f\"{repo.name}\")\n```\n\n# Downloads\n\nSeveral methods download data(Build Artifacts, Logs, tarballs).   The data can be downloaded in several ways:\n\n## Downloading all at once\n\n```python\n    data = ghc.ActionsDownloadArtifact(owner,\n                                       repository,\n                                       artifact_id, 'zip')\n    \n```\n\n## Downloading in chunks\nThis is recommended for very large files.  Specify a 'chunk_size' to a size appropriate for your application.\n\n```python\n\n    out = open(fname, \"wb\")\n    for chunk in ghc.ActionsDownloadArtifact(owner,\n                                             repository,\n                                             artifact_id,\n                                             'zip', chunk_size=1024):\n      out.write(chunk)\n\n```\n\n## Download URL\n\n```python\n    url = ghc.ActionsDownloadArtifact(owner,\n                                      repsitory,\n                                      artifact_id,\n                                      'zip', fetch_url=True)\n        \n    url = urllib.parse.urlparse(url)\n\n```\n\n# Quick Rate Limit Check:\n\n```bash\npython -c \"import githubV3py ;  print(githubV3py.GitHubClient(token='_token_').RateLimitGet().rate.remaining)\"\n```\n\n# Troubleshooting\n## Intellisense not working in WingIDE\nIn order for intellisense to work under WingIDE, the 'main entry point' must import the githubV3py package or import another package/module that does.   \n### Corrective Action:\nright click the file you wish to execute in the 'Project' tab/tool and select \"Set as Main Entry Point\".\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AndrewOfC/githubpy",
    "keywords": "[ github,api,REST,git ]",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "githubV3py",
    "package_url": "https://pypi.org/project/githubV3py/",
    "platform": "",
    "project_url": "https://pypi.org/project/githubV3py/",
    "project_urls": {
      "Bug Tracker": "https://github.com/AndrewOfC/githubpy/issues",
      "Homepage": "https://github.com/AndrewOfC/githubpy"
    },
    "release_url": "https://pypi.org/project/githubV3py/1.0.1/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "Python API for accessing GitHub",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12977150,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be129252ae04a1a322db2cc37ca024d9ce9db7af8ff928932ec9accd59d4e273",
          "md5": "6c57649ff20af1468cea2fa8c9bd073f",
          "sha256": "4981efff6ab9ea31ea81b83f6a0780509eee409af6b7cd7aaede2ea4dd778e27"
        },
        "downloads": -1,
        "filename": "githubV3py-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c57649ff20af1468cea2fa8c9bd073f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 272820,
        "upload_time": "2022-01-30T21:54:22",
        "upload_time_iso_8601": "2022-01-30T21:54:22.021832Z",
        "url": "https://files.pythonhosted.org/packages/be/12/9252ae04a1a322db2cc37ca024d9ce9db7af8ff928932ec9accd59d4e273/githubV3py-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f499efe7764bf767f182c3c736c872f506b0a3376874dabc2c5dc61fb6f3eb7",
          "md5": "060cb558eef43d9fb40cde45cc40346f",
          "sha256": "5ba9f8b08788540918a7f3480ee21f3a0bfd9a123c5886c0b40281cfaacd88f9"
        },
        "downloads": -1,
        "filename": "githubV3py-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "060cb558eef43d9fb40cde45cc40346f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 273793,
        "upload_time": "2022-02-23T00:36:26",
        "upload_time_iso_8601": "2022-02-23T00:36:26.532454Z",
        "url": "https://files.pythonhosted.org/packages/7f/49/9efe7764bf767f182c3c736c872f506b0a3376874dabc2c5dc61fb6f3eb7/githubV3py-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7f499efe7764bf767f182c3c736c872f506b0a3376874dabc2c5dc61fb6f3eb7",
        "md5": "060cb558eef43d9fb40cde45cc40346f",
        "sha256": "5ba9f8b08788540918a7f3480ee21f3a0bfd9a123c5886c0b40281cfaacd88f9"
      },
      "downloads": -1,
      "filename": "githubV3py-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "060cb558eef43d9fb40cde45cc40346f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 273793,
      "upload_time": "2022-02-23T00:36:26",
      "upload_time_iso_8601": "2022-02-23T00:36:26.532454Z",
      "url": "https://files.pythonhosted.org/packages/7f/49/9efe7764bf767f182c3c736c872f506b0a3376874dabc2c5dc61fb6f3eb7/githubV3py-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}