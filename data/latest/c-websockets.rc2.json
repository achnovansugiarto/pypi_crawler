{
  "info": {
    "author": "Cybertron",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP :: Session",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities",
      "Typing :: Typed"
    ],
    "description": "# ws\nWebSocket implementation in Python built on top of websockets python library. Similar to Node.js's ws.\n\nBasic usage.\n\n`server.py`\n```py\nimport ws\n\nserver = ws.ServerSocket()\n\n@server.on('ready')\nasync def on_ready():\n    print(f\"Server is ready listening at ws://{server.address}:{server.port}\")\n\n@server.on('connect')\nasync def on_connect(client, path):\n    print(f\"Client at {client.remote_address} connected.\")\n    await client.send(\n            data={'status':\"Okay\", \"alive\": True, \"ping\": 10.4}\n        )\n\n@server.on('message')\nasync def on_message(message):\n    print(f\"{message.data}\")\n    print(f\"Received from: {message.author.remote_address} at {message.created_at}\")\n\n@server.on('disconnect')\nasync def on_disconnect(client, code, reason):\n    print(f\"Client at {client.remote_address} disconnected with code: \", code, \"and reason: \", reason)\n    print(server.disconnected_clients)\n\n@server.on(\"close\")\nasync def on_close(client, code, reason):\n    print(f\"Client at {client.remote_address} closed connection with code: {code} and reason: {reason}\")\n\nserver.listen(\"localhost\", 3000)\n```\n\n`client.py`\n```py\nimport ws\n\nclient = ws.ClientSocket()\n\n@client.on('connect')\nasync def on_connect():\n    print(f\"Connected to {client.connection.remote_address}\")\n    print(client.connection)\n\n@client.on('message')\nasync def on_message(message):\n    print(f'{message.data}')\n    print(f'Status: {message.data.status} Alive: {message.data.alive} Ping: {message.data.ping}')\n    print(f\"Received from: {message.author.remote_address} at {message.created_at}\")\n    await message.author.send(content=\"Okay received.\")\n\n@client.on('disconnect')\nasync def on_disconnect(code, reason):\n    print(f\"{client.connection} disconnect with code: \", code, \"and reason: \", reason)\n    print(client.disconnection)\n\n@client.on(\"close\")\nasync def on_close(code, reason):\n    print(f\"{client.connection.remote_address} closed connection with code: {code} and reason: {reason}\")\n\nclient.connect(\"ws://localhost:3000\")\n```\n\nEvent collector (.wait_for method) example.\n\n`server.py`\n```py\nimport ws\nimport asyncio\n\nserver = ws.ServerSocket()\n\n@server.on('ready')\nasync def on_ready():\n    print(f\"Server is ready listening at ws://{server.address}:{server.port}\")\n\n@server.on('connect')\nasync def on_connect(websocket, path):\n    print(f\"Client at {websocket.remote_address} connected.\")\n\n@server.on('message')\nasync def on_message(message):\n    print(f\"{message.data}\")\n    if message.data.startswith(\"!confirm\"):\n        await message.author.send(\"Send yes or no?\")\n        try:\n            conmes = await server.wait_for(\n                'message', \n                timeout=300, \n                check=lambda rm: rm.data.lower().strip() in ['yes', 'no'] and rm.author.remote_address == message.author.remote_address)\n            print(conmes.data)\n            if conmes.data.lower().strip() == 'yes':\n                await conmes.author.send(\"done\")\n            else:\n                await conmes.author.send(\"not done\")\n        except asyncio.TimeoutError:\n            await message.author.send(\"Timed out!\")\n\n@server.on('disconnect')\nasync def on_disconnect(client, code, reason):\n    print(f\"{client} disconnect with code:\", code, reason)\n    print(server.disconnected_clients)\n\n@server.on(\"close\")\nasync def on_close(client, code, reason):\n    print(f\"{client.remote_address} closed connection with code: {code} and reason: {reason}\")\n\nserver.listen(\"localhost\", 3000)\n```\n\n`client.py`\n```py\nimport ws\nimport asyncio\n\nclient = ws.ClientSocket()\n\n@client.on('connect')\nasync def on_connect():\n    print(f\"Connected to {client.connection.remote_address}\")\n    await client.send(content=\"!confirm\")\n\n@client.on('message')\nasync def on_message(message):\n    print(f'{message.data}')\n    if message.data in ['done', 'not done']:\n        return\n    await asyncio.sleep(3)\n    await message.author.send(\n         \"This is a random message. This won't be collected by the event collector on the server side due to the check condition.\"\n    )\n    await asyncio.sleep(3)\n    await message.author.send(\n        \"yes\"\n    ) #this will be collected and you would receive a response \"done\" for this, provide \"no\" and you will get \"not done\" response\n\n@client.on('disconnect')\nasync def on_disconnect(code, reason):\n    print(f\"{client.connection} disconnect with code:\", code, reason)\n    print(client.disconnection)\n\n@client.on(\"close\")\nasync def on_close(code, reason):\n    print(f\"{client.connection.remote_address} closed connection with code: {code} and reason: {reason}\")\n\nclient.connect(\"ws://localhost:3000\")\n``` \n\n## FAQ\n### What's the difference between `on_disconnect` and `on_close` event listeners ?\nThe difference isn't huge but it is there. `on_disconnect` event is fired only if the client or the server **did not** closed the connection properly, the TCP Connection was lost suddenly raising the websockets' ConnectionClosedError in the libraries internal message consumer. In such cases the code returned is usually `1006` and there is no reason. While `on_close` event listener is called if the connection was closed properly, that could be done by calling the libraries' ClientSocket or ServerSocket's `.close` method and providing a reason and error code optionally. This causes the internal message consumer task on both sides to exit / return that in turn calls the attached listener functions. \n**Note:** Unlike `on_disconnect` listener, `on_close` is called on both sides that is both on the client and server websocket sides with the same reason and code.\n### Why this exists?\nI made this library because I was fed up of websockets library because it didn't have event based communication like Node.js's ws library and that made it difficult to work about it. Before I was doubtful whether I would work on it anymore or not... but it has went on to become a pretty large library but still not well known as of now... \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AceExpert/ws",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "c-websockets",
    "package_url": "https://pypi.org/project/c-websockets/",
    "platform": "",
    "project_url": "https://pypi.org/project/c-websockets/",
    "project_urls": {
      "Contribute": "https://github.com/AceExpert/ws/pulls",
      "Homepage": "https://github.com/AceExpert/ws",
      "Issue Tracker": "https://github.com/AceExpert/ws/issues"
    },
    "release_url": "https://pypi.org/project/c-websockets/2.1.3/",
    "requires_dist": [
      "websockets (==9.1)"
    ],
    "requires_python": ">=3.8.0",
    "summary": "WebSocket implementation in Python built on top of websockets python library. Similar to Node.js's ws.",
    "version": "2.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11484967,
  "releases": {
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62cec625fdec9197c06fa7387ccb4ccd9879d57fd92b9cd266fb16625747c331",
          "md5": "14920854f7ac6eab50d21938ffc9ec29",
          "sha256": "8622db3281431ddc2b5b95bb052905684514ddecf44a1358884391540b149423"
        },
        "downloads": -1,
        "filename": "c_websockets-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14920854f7ac6eab50d21938ffc9ec29",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 13540,
        "upload_time": "2021-09-09T06:05:01",
        "upload_time_iso_8601": "2021-09-09T06:05:01.321596Z",
        "url": "https://files.pythonhosted.org/packages/62/ce/c625fdec9197c06fa7387ccb4ccd9879d57fd92b9cd266fb16625747c331/c_websockets-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "668e620fb1109d61626b03a1212c27781affbc7f6b927df05ba5cf58c93c419c",
          "md5": "76fad9d5d4a31497261e909437afd498",
          "sha256": "215a3f73738c98531de35010adf64d5a43b2ea81565128a948ecb1e61618add1"
        },
        "downloads": -1,
        "filename": "c-websockets-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "76fad9d5d4a31497261e909437afd498",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.0",
        "size": 9144,
        "upload_time": "2021-09-09T06:05:03",
        "upload_time_iso_8601": "2021-09-09T06:05:03.385350Z",
        "url": "https://files.pythonhosted.org/packages/66/8e/620fb1109d61626b03a1212c27781affbc7f6b927df05ba5cf58c93c419c/c-websockets-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58acdcd408cbafa7522c4d4ca32b156771ac41e858d857d385a98c27c373efd2",
          "md5": "285a71cd9e5000d1775cfbfb5a2800ea",
          "sha256": "e44255d89e06f118c0d3ddd461ebdc9cd1959f0e0949fdb0032ef49a3c7adcc1"
        },
        "downloads": -1,
        "filename": "c_websockets-2.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "285a71cd9e5000d1775cfbfb5a2800ea",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 13791,
        "upload_time": "2021-09-18T06:30:42",
        "upload_time_iso_8601": "2021-09-18T06:30:42.013349Z",
        "url": "https://files.pythonhosted.org/packages/58/ac/dcd408cbafa7522c4d4ca32b156771ac41e858d857d385a98c27c373efd2/c_websockets-2.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03bf7626eafc56a79f2a8c501c8b201875d96019accc89e913ae722a3c559199",
          "md5": "8113942c21a96ea1c41798e3af9727f1",
          "sha256": "0a12964818c11d64d8c4e5ec52a3a15f68fb43efc055c56c127cac22111e140a"
        },
        "downloads": -1,
        "filename": "c-websockets-2.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8113942c21a96ea1c41798e3af9727f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.0",
        "size": 9363,
        "upload_time": "2021-09-18T06:30:43",
        "upload_time_iso_8601": "2021-09-18T06:30:43.917580Z",
        "url": "https://files.pythonhosted.org/packages/03/bf/7626eafc56a79f2a8c501c8b201875d96019accc89e913ae722a3c559199/c-websockets-2.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58acdcd408cbafa7522c4d4ca32b156771ac41e858d857d385a98c27c373efd2",
        "md5": "285a71cd9e5000d1775cfbfb5a2800ea",
        "sha256": "e44255d89e06f118c0d3ddd461ebdc9cd1959f0e0949fdb0032ef49a3c7adcc1"
      },
      "downloads": -1,
      "filename": "c_websockets-2.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "285a71cd9e5000d1775cfbfb5a2800ea",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.0",
      "size": 13791,
      "upload_time": "2021-09-18T06:30:42",
      "upload_time_iso_8601": "2021-09-18T06:30:42.013349Z",
      "url": "https://files.pythonhosted.org/packages/58/ac/dcd408cbafa7522c4d4ca32b156771ac41e858d857d385a98c27c373efd2/c_websockets-2.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "03bf7626eafc56a79f2a8c501c8b201875d96019accc89e913ae722a3c559199",
        "md5": "8113942c21a96ea1c41798e3af9727f1",
        "sha256": "0a12964818c11d64d8c4e5ec52a3a15f68fb43efc055c56c127cac22111e140a"
      },
      "downloads": -1,
      "filename": "c-websockets-2.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8113942c21a96ea1c41798e3af9727f1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.0",
      "size": 9363,
      "upload_time": "2021-09-18T06:30:43",
      "upload_time_iso_8601": "2021-09-18T06:30:43.917580Z",
      "url": "https://files.pythonhosted.org/packages/03/bf/7626eafc56a79f2a8c501c8b201875d96019accc89e913ae722a3c559199/c-websockets-2.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}