{
  "info": {
    "author": "Robin Ramael",
    "author_email": "robin.ramael@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "Django Prepared Properties\n==========================\n\nDeclarative annotations and prefetches for Django models.\n\nWe often find ourselves writing a lot of quite complex annotations and\nprefetches. While these are used across the project, the logic that defines them\nis kind of hidden in a queryset method (or more of them, if the annotations\nrely on eachother). If there's a default/naive implementation as a property,\nthat logic is held in a completely different place. Using these annotations\nrequires you to call each of those queryset methods, which quickly becomes a bit\nof a mess.\n\nThis package attempts to solve this by allowing you to define annotations and\nprefetches as 'prepared' properties, so you can add them to you querysets by\nreferencing the class attribute. The queryset `prepare` method resolves\nannotation dependencies and builds the correct queryset for you.\n\nRequires python 3.6 and django 2.2. It probably works on django 3, but I haven't\ntried it (PRs welcome <3)\n\nAnnotated Properties\n--------------------\n\nTo add an annotated property, you simply need to pass in the\nannotation into either the `AnnotatedProperty` class or `annotated_property`\ndecorator. You can then prepare it by calling `prepare(Model.propery_name)`\non the queryset.\n\nTo avoid cyclic references to models in the annotation (eg. by referring to the\nmodel the property is on in the annotation), you can also pass  the annoation as\na lambda, which will be evaluated when the queryset is annotated.\n\nWhen you use the decorator, the body of the method you decorate  will be used\nwhen the annotation is not present. Using it will emit a warning advising you\nto use the `prepare` querset method.\n\n\n```python\n\nfrom django.db.models import Model, Sum, OuterRef, Manager\nfrom prepared_properties import annotated_property, AnnotatedProperty, PropertiedQuerySet\n\nclass Book(Model):\n    page_number = models.PositiveIntegerField()\n\nclass Author(Model):\n    objects = Manager.from_queryset(PropertiedQuerySet)()\n\n    pages_written = AnnotatedProperty(\n        Subquery(\n            Book.objects.filter(author=OuterRef(\"pk\"))\n            .values(\"author\")\n            .annotate(pages_written=Sum(\"page_number\"))\n            .values(\"page_number\")\n        )\n    )\n\n    # ... or with a default getter:\n\n    @annotated_property(\n        Subquery(\n            Book.objects.filter(author=OuterRef(\"pk\"))\n            .values(\"author\")\n            .annotate(pages_written=Sum(\"page_number\"))\n            .values(\"page_number\")\n        )\n    )\n    def pages_written(self):\n        # a warning is emitted before this is run.\n        return self.book_set.aggregate(pages_written=Sum(\"page_number\"))[\n            \"pages_written\"\n        ]\n\nfor author in Author.objects.prepare(Author.pages_written):\n    print(author.pages_written)\n\n```\n\nDependent Annotated  Properties\n---------------------\n\nOften, annotations might depend on other annotations being present. If you pass\nan array of property names into the property constructor or decorator, all\ndependent annotatations will also be added to the queryset when you prepare the\nproperty using the other one:\n\n```python\n\nclass Author(Model):\n    objects = Manager.from_queryset(PropertiedQuerySet)()\n\n    pages_written = AnnotatedProperty(\n        Subquery(\n            Book.objects.filter(author=OuterRef(\"pk\"))\n            .values(\"author\")\n            .annotate(pages_written=Sum(\"page_number\"))\n            .values(\"page_number\")\n        )\n    )\n\n    twice_the_pages_written = AnnotatedProperty(\n        F(\"pages_written\") * Value(2), depends_on=[\"pages_written\"]\n    )\n\n```\n\nCalling `Book.objects.prepare(Author.twice_the_pages_written)` will now also\nannotate `Book.pages_written`. This allows you to change the underlying\nimplementation of the annotations without changing queryset definitions\neverywhere. Neato.\n\n\nPrefetched properties\n---------------------\n\nA similar, yet less feature-complete thing can be done for prefetches:\n\n```python\n\nclass Author(Model):\n    objects = Manager.from_queryset(PropertiedQuerySet)()\n    short_books = PrefetchedProperty(\n        \"book_set\", Book.objects.filter(page_number__lt=100)\n    )\n\n\nfor author in Author.objects.prepare(Author.pages_written):\n    print(author.short_books)\n\n```\n\nSince prefetches can't depend on eachother the `depends_on` kwarg is not\nsupported for prefetches. The default getter is also not supported for now\n(django checks wether the attribute is present using `hasattr` before doing the\nprefetch, which would always execute the naive getter.)\n\nAs you can see, the prepare method doesn't care wether you pass it prefetches or\nannotations, so a property can change from annotation to prefetch or vice versa\nwithout changing the queryset definition or the model interface!",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/robinramael/prepared_properties",
    "keywords": "prepared_properties",
    "license": "GNU General Public License v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "prepared-properties",
    "package_url": "https://pypi.org/project/prepared-properties/",
    "platform": "",
    "project_url": "https://pypi.org/project/prepared-properties/",
    "project_urls": {
      "Homepage": "https://github.com/robinramael/prepared_properties"
    },
    "release_url": "https://pypi.org/project/prepared-properties/1.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Declarative annotations and prefetches for Django models",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7499007,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfad38c962e24d98f258d3127051b28b5f644ce2a3e4c633b2534fd2462fe972",
          "md5": "6354e659461595b40024beef4591633c",
          "sha256": "00f3d9edc4fa2ab84674ed7648d6d105c77162b574493f93cf35e8a6594cf45d"
        },
        "downloads": -1,
        "filename": "prepared_properties-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6354e659461595b40024beef4591633c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7025,
        "upload_time": "2020-06-15T07:39:16",
        "upload_time_iso_8601": "2020-06-15T07:39:16.430783Z",
        "url": "https://files.pythonhosted.org/packages/bf/ad/38c962e24d98f258d3127051b28b5f644ce2a3e4c633b2534fd2462fe972/prepared_properties-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae458343d8108e4f0891fe7729d76b3578bf26baa460a68c949fcbe8a05f5bca",
          "md5": "fed71617dae9c0793a3eacc84ae7a67e",
          "sha256": "3e27216ddae80f4bcd77e5a6aa97f1ca2b2df7915bc14b5b938c77c7e298bb1a"
        },
        "downloads": -1,
        "filename": "prepared_properties-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fed71617dae9c0793a3eacc84ae7a67e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8518,
        "upload_time": "2020-06-17T15:03:20",
        "upload_time_iso_8601": "2020-06-17T15:03:20.737555Z",
        "url": "https://files.pythonhosted.org/packages/ae/45/8343d8108e4f0891fe7729d76b3578bf26baa460a68c949fcbe8a05f5bca/prepared_properties-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c550615714b883e5b322b19d4b980a7d5e3f1207b29a766dcb1ee745dd94d529",
          "md5": "de1134cdc21ea1667296b1984c8feb84",
          "sha256": "f78b9ff389932ff8351914d2e2886b99d3587c05b574dc054943791a42823e1b"
        },
        "downloads": -1,
        "filename": "prepared_properties-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "de1134cdc21ea1667296b1984c8feb84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8350,
        "upload_time": "2020-06-17T15:05:27",
        "upload_time_iso_8601": "2020-06-17T15:05:27.178273Z",
        "url": "https://files.pythonhosted.org/packages/c5/50/615714b883e5b322b19d4b980a7d5e3f1207b29a766dcb1ee745dd94d529/prepared_properties-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0251f20a60503eb5d3b848cc26395b9bf4a84802f831336582ac59cbb8815206",
          "md5": "ee58129ead966c02a183da7e4fe9c401",
          "sha256": "fe96df3a3810912a2219dd944af6963f3aa2d9e472825848a06a69db4fa10971"
        },
        "downloads": -1,
        "filename": "prepared_properties-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ee58129ead966c02a183da7e4fe9c401",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8335,
        "upload_time": "2020-06-17T16:05:02",
        "upload_time_iso_8601": "2020-06-17T16:05:02.396663Z",
        "url": "https://files.pythonhosted.org/packages/02/51/f20a60503eb5d3b848cc26395b9bf4a84802f831336582ac59cbb8815206/prepared_properties-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a994f08d4ce8e2e1a521ffea9820334febe9a6e19e7cb093df0867c87146c252",
          "md5": "eb2ef840dc9520e1a9c4f16678073e5e",
          "sha256": "2cdcc356a7e43cccf7dea7bc429c0e213a840055efa7b4ec12efb70b5d7fc86b"
        },
        "downloads": -1,
        "filename": "prepared_properties-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "eb2ef840dc9520e1a9c4f16678073e5e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8325,
        "upload_time": "2020-06-17T17:24:51",
        "upload_time_iso_8601": "2020-06-17T17:24:51.233976Z",
        "url": "https://files.pythonhosted.org/packages/a9/94/f08d4ce8e2e1a521ffea9820334febe9a6e19e7cb093df0867c87146c252/prepared_properties-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a994f08d4ce8e2e1a521ffea9820334febe9a6e19e7cb093df0867c87146c252",
        "md5": "eb2ef840dc9520e1a9c4f16678073e5e",
        "sha256": "2cdcc356a7e43cccf7dea7bc429c0e213a840055efa7b4ec12efb70b5d7fc86b"
      },
      "downloads": -1,
      "filename": "prepared_properties-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "eb2ef840dc9520e1a9c4f16678073e5e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8325,
      "upload_time": "2020-06-17T17:24:51",
      "upload_time_iso_8601": "2020-06-17T17:24:51.233976Z",
      "url": "https://files.pythonhosted.org/packages/a9/94/f08d4ce8e2e1a521ffea9820334febe9a6e19e7cb093df0867c87146c252/prepared_properties-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}