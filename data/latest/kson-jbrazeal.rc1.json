{
  "info": {
    "author": "Jacob Brazeal",
    "author_email": "jacob.brazeal@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# KSON: JSON with SQL and Networking\n> Of course it's a good idea: why would you ask?\n\nKSON is a superset of JSON with the following features:\n\n- Remote document references (so you can embed a JSON, KSON, or CSV file available at a public URL or file address)\n- Embedded SQL: Write queries against other objects in your JSON file (including references and deeply nested objects)\n  with the full power of SQLite and have the queries evaluate to JSON\n- Use comments (`/* ... */`) and global named references (`\"foo\": \"bar\" as myRef`).\n- Compiles to JSON: Run `kson file.kson` (see installation instructions below) and boom! you have JSON.\n\nKSON combines the portability of the top data exchange formats (JSON, CSV) with the expressiveness of the leading data\nquerying language\n(SQL), and the flexibility of dynamic embedded references.\n\n## Installation\nRun \n\n```bash\npython3 -m pip install -g kson\n```\n\nThis will create a global executable `kson` which you can run on\n`.kson` files to produce `.json` files:\n\n```bash\nkson file.kson # Sends JSON to stdout\n```\n\nor \n```bash\nkson file.kson > file.json # Pipe the output to a file\n```\n\n## Examples\nYou can find examples in the `examples/` directory. \n\n- [examples/gdp.kson](examples/gdp.kson): Demonstrates how you can query an external data source (in this case, CSV file on GitHub.)\n- [examples/join-gdp-and-population.kson](examples/join-gdp-and-population.kson): Fetch data from _two_ data sources (GDP by country\n  and population by country) and perform a join to see GDP per capita.\n\n\n## FAQ\n\n### How does this work?\n\nIt's pretty simple, actually: First we parse the KSON file via [recursive descent](https://en.wikipedia.org/wiki/Recursive_descent_parser). \nWhere JSON has arrays and\ndictionaries, we throw in a few extra types - refs, aliases, and SQL queries.\n\nTo compile the file, we traverse the tree, making network requests, building appropriately-named SQLite tables, and\nperforming SQL queries as we go, eventually collapsing the whole business to JSON.\n\nSome constraints of this approach are that we make network requests in serial, and that you must define an alias before\nany SQL queries which use it. On the other hand, we achieve a great deal of flexibility in indexing into deeply nested\nremote documents: suppose a remote document has a structure like so:\n\n```json\n{\n  \"foo\": {\n    \"bar\": {\n      \"baz\": [\n        1,\n        2,\n        3,\n        4\n      ]\n    }\n  }\n}\n\n```\n\nIf we alias the document as `doc`, then our SQL queries can acess the contents of the array by querying\n`select * from \"$doc$foo$bar$baz\"`.\n\n### Is this a good idea, and where did you get it?\n\nHaha, well, um. More appropriate adjectives might include \"interesting\", \"tempting\", and \"risky\".\n\nFor reasons which are best elided, I had to write an enormous number of JSON parsers in a short period of time, and then\ngot some additional ideas about the format. It's called \"KSON\" because k comes after j, get it? :-)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/jacob.brazeal/ksonpy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kson-jbrazeal",
    "package_url": "https://pypi.org/project/kson-jbrazeal/",
    "platform": "",
    "project_url": "https://pypi.org/project/kson-jbrazeal/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.com/jacob.brazeal/ksonpy/-/issues",
      "Homepage": "https://gitlab.com/jacob.brazeal/ksonpy"
    },
    "release_url": "https://pypi.org/project/kson-jbrazeal/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "KSON is JSON with embedded SQL and networking",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11086411,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75e3255c49f959b957c2fd94303a03009269cc9f361ebbaf8d06652ddfc0ddc6",
          "md5": "0dff38c16fa9d795af698bed10b64681",
          "sha256": "c314b24bd66f4f8b08bc97e7d86c126fed7727ef960b520dd573559a8cb44599"
        },
        "downloads": -1,
        "filename": "kson_jbrazeal-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0dff38c16fa9d795af698bed10b64681",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 3571,
        "upload_time": "2021-08-04T03:36:38",
        "upload_time_iso_8601": "2021-08-04T03:36:38.354009Z",
        "url": "https://files.pythonhosted.org/packages/75/e3/255c49f959b957c2fd94303a03009269cc9f361ebbaf8d06652ddfc0ddc6/kson_jbrazeal-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9b193f4a6aec833d4ffedc1380112f7f59400c27c5b086edff1dbfda65e9060",
          "md5": "609ddec5bda982acc64287c4f5038da3",
          "sha256": "90244ba336579f255339b824443582ff23597ad503d666390a00a970d911d3da"
        },
        "downloads": -1,
        "filename": "kson-jbrazeal-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "609ddec5bda982acc64287c4f5038da3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 3691,
        "upload_time": "2021-08-04T03:36:39",
        "upload_time_iso_8601": "2021-08-04T03:36:39.414923Z",
        "url": "https://files.pythonhosted.org/packages/b9/b1/93f4a6aec833d4ffedc1380112f7f59400c27c5b086edff1dbfda65e9060/kson-jbrazeal-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75e3255c49f959b957c2fd94303a03009269cc9f361ebbaf8d06652ddfc0ddc6",
        "md5": "0dff38c16fa9d795af698bed10b64681",
        "sha256": "c314b24bd66f4f8b08bc97e7d86c126fed7727ef960b520dd573559a8cb44599"
      },
      "downloads": -1,
      "filename": "kson_jbrazeal-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0dff38c16fa9d795af698bed10b64681",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 3571,
      "upload_time": "2021-08-04T03:36:38",
      "upload_time_iso_8601": "2021-08-04T03:36:38.354009Z",
      "url": "https://files.pythonhosted.org/packages/75/e3/255c49f959b957c2fd94303a03009269cc9f361ebbaf8d06652ddfc0ddc6/kson_jbrazeal-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9b193f4a6aec833d4ffedc1380112f7f59400c27c5b086edff1dbfda65e9060",
        "md5": "609ddec5bda982acc64287c4f5038da3",
        "sha256": "90244ba336579f255339b824443582ff23597ad503d666390a00a970d911d3da"
      },
      "downloads": -1,
      "filename": "kson-jbrazeal-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "609ddec5bda982acc64287c4f5038da3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 3691,
      "upload_time": "2021-08-04T03:36:39",
      "upload_time_iso_8601": "2021-08-04T03:36:39.414923Z",
      "url": "https://files.pythonhosted.org/packages/b9/b1/93f4a6aec833d4ffedc1380112f7f59400c27c5b086edff1dbfda65e9060/kson-jbrazeal-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}