{
  "info": {
    "author": "Bartek Kryza",
    "author_email": "bkryza@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "decorest - decorator heavy REST client for Python\n#################################################\n\n.. image:: https://github.com/bkryza/decorest/actions/workflows/workflow.yml/badge.svg\n    :target: https://github.com/bkryza/decorest/actions/workflows/workflow.yml\n\n.. image:: https://codecov.io/gh/bkryza/decorest/branch/master/graph/badge.svg?token=UGSU07W732\n    :target: https://codecov.io/gh/bkryza/decorest\n\n.. image:: https://img.shields.io/pypi/v/decorest.svg\n    :target: https://pypi.python.org/pypi/decorest\n\n.. image:: https://img.shields.io/pypi/l/decorest.svg\n    :target: https://pypi.python.org/pypi/decorest\n\n.. image:: https://img.shields.io/pypi/pyversions/decorest.svg\n    :target: https://pypi.python.org/pypi/decorest\n\nDeclarative, decorator-based REST client for Python.\n\n.. role:: py(code)\n   :language: python\n\n\n.. contents::\n\nOverview\n========\n\ndecorest_ library provides an easy to use declarative REST API client interface,\nwhere definition of the API methods using decorators automatically produces\na working REST client with no additional code. In practice the library provides\nonly an interface to describe and interact with REST services - the actual work\nis done underneath by either requests_ (default) or httpx_ libraries. Backend\ncan be selected dynamically during creation of client instance.\n\nFor example:\n\n.. code-block:: python\n\n    from decorest import RestClient, GET\n\n    class DogClient(RestClient):\n        @GET('breed/{breed_name}/list')\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\n    client = DogClient('https://dog.ceo/api')\n\n    print(client.list_subbreeds('hound'))\n\n\nor for an async version (please note the :py:`async` keyword in the API method definition):\n\n.. code-block:: python\n\n    import asyncio\n    from decorest import backend, RestClient, GET\n\n    @backend('httpx')\n    class DogClient(RestClient):\n        @GET('breed/{breed_name}/list')\n        async def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\n    async def main():\n        client = DogClient('https://dog.ceo/api')\n\n        print(await client.list_subbreeds('hound'))\n\n    asyncio.run(main())\n\n\nInstallation\n============\n\n**Note:** *As of version `0.1.0`, decorest supports only Python 3.6+.*\n\nUsing pip:\n\n.. code-block:: bash\n\n    pip install decorest\n\nTo install the library with a specific backend, an environment variable must be provided, e.g.:\n\n.. code-block:: bash\n\n    # This will only install requests and its dependencies (default)\n    DECOREST_BACKEND=requests pip install decorest\n\n    # This will only install httpx and its dependencies\n    DECOREST_BACKEND=httpx pip install decorest\n\nOf course both requests_ and httpx_ can be installed together and used exchangeably.\n\nUsage\n=====\n\nBasics\n------\n\nFor most typical cases the usage should be fairly straightforward. Simply create a\nsubclass of :py:`decorest.RestClient` and define methods, which will perform calls\nto the actual REST service. You can declare how each function should perform\nthe request to the service solely using decorators attached to the\nmethod definition. The method itself is not expected to have any implementation,\nexcept for a docstring.\n\nAfter your API client class definition is complete, simply create an instance\nof it and you're good to go. This library relies on the functionality provided\nby either requests_ or httpx_ libraries, which means that any valid named argument,\nwhich could be passed to a requests_ or httpx_ HTTP call can be also passed to the calls\nof the client methods and will be forwarded as is.\n\nFor more information checkout sample clients in `examples`.\n\nChoosing backend\n----------------\n\ndecorest_ supports currently 2 backends:\n  * requests_ (default)\n  * httpx_\n\nTo select a specific backend, simply pass it's name to the constructor of the client:\n\n.. code-block:: python\n\n    client = DogClient('https://dog.ceo/api', backend='httpx')\n\nAnother option is to declare a specific default backend for the client using :py:`@backend()`\ndecorator, for instance:\n\n.. code-block:: python\n\n    @decorest.backend('httpx')\n    class DogClient(decorest.RestClient):\n        @GET('breed/{breed_name}/list')\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\n    client = DogClient('https://dog.ceo/api')\n\nIf no backend is provided, requests_ is used by default. The client usage is largely\nindependent of the backend, however there some minor differences in handling streams\nand multipart messages, please consult tests in `httpbin test suite`_\nand `httpx compatibility guide`_.\n\nPlease note, that :py:`asyncio` is only supported on the httpx_ backend.\n\nDecorators\n----------\n\nBelow is a list of all supported decorators along with short explanation and\nexamples. Some decorators can be attached to both client class as well as\nmethods, in which case the class-level decorator is applied to all HTTP methods\nin that class. Furthermore, each decorator can be overridden directly during\nthe method call by providing a named argument with name equal to the decorator\nname.\n\n\n@GET, @PUT, @POST, @PATCH, @DELETE, @HEAD, @OPTIONS\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMarks the request with a specific HTTP method and the path relative to\nendpoint provided as argument. The path can contain variables enclosed\nin curly brackets, e.g.:\n\n.. code-block:: python\n\n        @GET('breed/{breed_name}/list')\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\nwhich will be replaced by the arguments from the method definition.\nThese decorators apply only to methods.\n\n@query\n~~~~~~\n\nAdds a query parameter to the request. URL encoding will be applied to\nthe value using :py:`urlencode`, e.g.:\n\n.. code-block:: python\n\n        @GET('breed/{breed_name}/list')\n        @query('long_names', 'longNames')\n        @query('limit')\n        def list_subbreeds(self, breed_name, long_names, limit=100):\n            \"\"\"List all sub-breeds\"\"\"\n\nThis decorator can take a single string parameter, which determines the name\nof the method argument whose value will be added as the query argument value\nof the same name.\n\nIn case 2 arguments are provided, the second argument determines the actual\nquery key name, which will be used in the request query (if for some reason\nit should be different than the method argument name).\n\nFurthermore, if a default value is provided in a method declaration, it\nwill be used whenever a value for this argument is not provided during\ninvocation.\n\nFor example, the following invocation of the above method:\n\n.. code-block:: python\n\n    client.list_subbreeds('hound', 1)\n\nwill result in the following query:\n\n.. code-block:: bash\n\n    https://dog.ceo/api/breed/hound?longNames=1&limit=100\n\nThis decorator can be added only to methods.\n\n@form\n~~~~~~\n\nAdds a form parameter to the request. For example:\n\n.. code-block:: python\n\n        @POST('breed')\n        @form('breed_name')\n        @form('breed_url', 'breed_wikipedia_link')\n        def add_breed(self, breed_name, breed_url):\n            \"\"\"Add sub-breed\"\"\"\n\nThis decorator can take a single string parameter, which determines the name\nof the method argument whose value will be added as the query argument value\nof the same name.\n\nIn case 2 arguments are provided, the second argument determines the actual\nform field name, which will be used in the request form (if for some reason\nit cannot be the same as the method argument name).\n\nIf a method has at least one :py:`@form` decorator attached, the `Content-type`\nheader value will be always set to `application/x-www-form-urlencoded`.\n\nThis decorator can be added only to methods.\n\n@multipart\n~~~~~~~~~~\n\nAdds a multipart parameter to the request. For example:\n\n.. code-block:: python\n\n     @POST('post')\n     @multipart('part1')\n     @multipart('part_2', 'part2')\n     @multipart('test')\n     def post_multipart(self, part1, part_2, test):\n         \"\"\"Return multipart POST data.\"\"\"\n\nThe first parameter to the decorator is the name of the variable in the decorated\nmethod and at the same time the name of the part in HTTP request (which will be\nset in the :py:`Content-Disposition` header. In case the method argument name\nshould be different than the part name in the request, a second parameter to the \ndecorator will determine the actual name for the part in the HTTP request.\n\nThe values for the arguments can be either strings, which will be added directly\nas content in the appropriate part, or tuples. In case a tuple is passed, it will\nbe treated as a file, the same way as is treated by both backend libraries. \n\nThe above method can be thus called as follows:\n\n.. code-block:: python\n\n    f = '/tmp/test.dat'\n    res = client.post_multipart('TEST1', 'TEST2',\n                                ('filename', open(f, 'rb'), 'text/plain'))\n\nwhich will generate the following parts:\n  * part `part1` with content `TEST1`\n  * part `part2` with content `TEST2`\n  * part `test` with content read from file `/tmp/test.dat`\n\n@header\n~~~~~~~\n\nAdds a header key-value pair to the request, e.g.:\n\n.. code-block:: python\n\n        @GET('breed/{breed_name}/list')\n        @header('accept', 'application/json')\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\nThis decorator can be added to both methods and client class. The class level\ndecorators will be added to every method and can be overridden using method\nlevel decorators.\n\nDecorated methods can use their arguments to pass header values, if the headers\nname matches one of the arguments, e.g.:\n\n.. code-block:: python\n\n        @GET('breed/{breed_name}/list')\n        @header('accept')\n        @header('user_agent', 'user-agent')\n        def list_subbreeds(self, breed_name, accept, user_agent='decorest'):\n            \"\"\"List all sub-breeds\"\"\"\n\nIn case the first argument of the header decorator matches one of the\nmethod args, it's optional second value determines the actual header\nname that will be send in the request. A default value for the header\nin such case must be provided in the method signature.\n\nMultiple values for the same header can be provided either as separate\ndecorators or as a decorator with a list of values, e.g.:\n\n.. code-block:: python\n\n        @GET('breed/{breed_name}/list')\n        @header('abc', 'a')\n        @header('abc', 'b')\n        @header('abc', 'c')\n        @header('xyz', ['x', 'y', 'z'])\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\nMultiple values will be concatenated to a comma separated list and sent out\nas a single header (according to the rfc2616_).\n\n@body\n~~~~~\n\nBody decorator enables to specify, which of the method parameters should provide\nthe body content to the request, e.g.:\n\n.. code-block:: python\n\n    @POST('pet')\n    @header('content-type', 'application/json')\n    @header('accept', 'application/json')\n    @body('pet')\n    def add_pet(self, pet):\n        \"\"\"Add a new pet to the store\"\"\"\n\n:py:`@body` decorator can take an optional argument which provides a serialization\nhandler, which will be invoked automatically before passing the argument as\nbody content, which can be a simple lambda or a more complex function with some\nlogic. For example:\n\n.. code-block:: python\n\n    @POST('pet')\n    @header('content-type', 'application/json')\n    @header('accept', 'application/json')\n    @body('pet', lambda p: json.dumps(p))\n    def add_pet(self, pet):\n        \"\"\"Add a new pet to the store\"\"\"\n\nThe above code will automatically stringify the dictionary provided as\nvalue of :py:`pet` argument using :py:`json.dumps()` function.\n\n@on\n~~~\n\nBy default the request method will not return requests_ or httpx_ response object,\nbut the response will depend on the content type of the response.\n\nIn case the HTTP request succeeds the following results are expected:\n\n- :py:`response.json()` if the content type of response is JSON\n- :py:`response.content` if the content type is binary\n- :py:`response.text` otherwise\n\nIn case the request fails, :py:`response.raise_for_status()` is called and\nshould be handled in the client code.\n\nIn case another behavior is required, custom handlers can be provided\nfor each method using lambdas or functions. The provided handler is\nexpected to take only a single argument, which is the requests_ or httpx_\nresponse object, e.g.:\n\n.. code-block:: python\n\n        @GET('breed/{breed_name}/list')\n        @header('accept', 'application/json')\n        @on(200, lambda r: r.json())\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\nThis decorator can be applied to both methods and classes, however when\napplied to a class the handler will be called for the method which receives\nthe provided status code.\n\nThe first argument of this decorator must be an :py:`int`. It is\nalso possible to pass :py:`...` (i.e. Ellipsis) object, which is equivalent\nto :py:`HttpStatus.ANY`. Any other value passed for this argument will\nraise :py:`TypeError`.\n\n@content\n~~~~~~~~\nThis decorator is a shortcut for :py:`@header('content-type', ...)`, e.g:\n\n.. code-block:: python\n\n    @POST('pet')\n    @content('application/json')\n    @header('accept', 'application/json')\n    @body('pet', lambda p: json.dumps(p))\n    def add_pet(self, pet):\n        \"\"\"Add a new pet to the store\"\"\"\n\n@accept\n~~~~~~~~\nThis decorator is a shortcut for :py:`@header('accept', ...)`, e.g:\n\n.. code-block:: python\n\n        @GET('breed/{breed_name}/list')\n        @content('application/json')\n        @accept('application/xml')\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\nMultiple :py:`@accept()` decorators can be added and will be joined into\na list, e.g.:\n\n.. code-block:: python\n\n        @GET('breed/{breed_name}/list')\n        @content('application/json')\n        @accept('application/xml')\n        @accept('application/json')\n        @accept('text/plain')\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\nwill submit the following header to the server:\n\n.. code-block:: bash\n\n        Accept: text/plain, application/json, application/xml\n\n@endpoint\n~~~~~~~~~\nThis decorator enables to define a default endpoint for the service,\nwhich then doesn't have to be provided in the client constructor:\n\n.. code-block:: python\n\n        @endpoint('https://dog.ceo/api')\n        class DogClient(RestClient):\n            \"\"\"List all sub-breeds\"\"\"\n            ...\n\nThe endpoint provided in the client constructor will take precedence\nhowever.\n\n\n@timeout\n~~~~~~~~\nSpecifies a default timeout value (in seconds) for a method or entire API.\n\n.. code-block:: python\n\n        @endpoint('https://dog.ceo/api')\n        @timeout(5)\n        class DogClient(RestClient):\n            \"\"\"List all sub-breeds\"\"\"\n            ...\n\n@stream\n~~~~~~~\nThis decorator allows to specify a method which returns binary stream of data.\nAdding this decorator to a method will add a :py:`stream=True`\nargument to the requests_ or httpx_ call and will by default returns entire response\nobject, which then can be accessed for instance using :py:`iter_content()` method.\n\n.. code-block:: python\n\n    ...\n\n    class MyClient(RestClient):\n        ...\n\n        @GET('stream/{n}/{m}')\n        @stream\n        @query('size')\n        @query('offset', 'off')\n        def stream(self, n, m, size, offset):\n            \"\"\"Get data range\"\"\"\n\n    ...\n\n    with client.stream(2,4, 1024, 200) as r:\n        for b in r.iter_content(chunk_size=100):\n            content.append(b)\n\n\nor for an async API:\n\n.. code-block:: python\n\n    ...\n\n    @backend('httpx')\n    class MyClient(RestClient):\n        ...\n\n        @GET('stream/{n}/{m}')\n        @stream\n        @query('size')\n        @query('offset', 'off')\n        async def stream(self, n, m, size, offset):\n            \"\"\"Get data range\"\"\"\n\n    ...\n    async def main():\n        async with client.async_session_() as s:\n            r = await s.stream(5)\n            async for _ in r.aiter_raw(chunk_size=100):\n                content.append(b)\n\n\n@backend\n~~~~~~~~\nSpecifies the default backend to use by the client, currently the only possible\nvalues are :py:`'requests'` (default) and :py:`'httpx'`, e.g.:\n\n.. code-block:: python\n\n        @endpoint('https://dog.ceo/api')\n        @backend('httpx')\n        class DogClient(RestClient):\n            \"\"\"List all sub-breeds\"\"\"\n            ...\n\nThe backend provided in the constructor arguments when creating client instance has precedence\nover the value provided in this decorator. This decorator can only be applied to classes.\n\nSessions\n--------\n\nBased on the functionality provided by the backend HTTP library in the form of\nsession objects, sessions can significantly improve the performance of the\nclient in case multiple responses are performed as well as maintain certain\ninformation between requests such as session cookies.\n\nSessions in decorest_ can either be created and closed manually:\n\n.. code-block:: python\n\n        s = client.session_()\n        s.list_subbreeds('hound')\n        s.list_subbreeds('husky')\n        s.close_()\n\nor can be used via the context manager :py:`with` operator:\n\n.. code-block:: python\n\n        with client.session_() as s:\n            s.list_subbreeds('hound')\n            s.list_subbreeds('husky')\n\nAll session specific methods begin with a single underscore, in order not\nto interfere with any possible API method names defined in the base client\nclass.\n\nIf some additional customization of the session is required, the underlying\n`requests session`_ or `httpx session`object can be retrieved from decorest_\nsession object using :py:`backend_session_` attribute:\n\n.. code-block:: python\n\n        with client.session_() as s:\n            s.backend_session_.verify = '/path/to/cert.pem'\n            s.list_subbreeds('hound')\n            s.list_subbreeds('husky')\n\nAsync sessions can be created in a similar manner, using :py:`async_session_()` method,\nfor instance:\n\n.. code-block:: python\n\n        async def main():\n            async with client.async_session_() as s:\n                await s.list_subbreeds('hound')\n                await s.list_subbreeds('husky')\n\n\nAuthentication\n--------------\n\nSince authentication is highly specific to actual invocation of the REST API,\nand not to it's specification, there is not decorator for authentication,\nbut instead an authentication object (compatible with `requests_`\nor `httpx_` authentication mechanism) can be set in the client object using\n:py:`set_auth_()` method, for example:\n\n.. code-block:: python\n\n        client.set_auth_(HTTPBasicAuth('user', 'password'))\n        with client.session_() as s:\n            s.backend_session_.verify = '/path/to/cert.pem'\n            s.list_subbreeds('hound')\n            s.list_subbreeds('husky')\n\nThe authentication object will be used in both regular API calls, as well\nas when using sessions.\n\nFurthermore, the `auth` object - specific for selected backend - can be also\npassed to the client constructor, e.g.:\n\n.. code-block:: python\n\n        client = DogClient(backend='httpx', auth=httpx.BasicAuth('user', 'password'))\n\n\nError handling\n--------------\n\nDue to the fact, that this library supports multiple HTTP backends, exceptions\nshould be caught through a wrapper class, :py:`decorest.HTTPErrorWrapper`, which\ncontains the original exception raised by the underlying backend.\n\n.. code-block:: python\n\n    try:\n        res = client.update_pet(json.dumps({'id': pet_id, 'status': 'sold'}))\n    except HTTPErrorWrapper as e:\n        # Print original error message\n        print(e.response.text)\n        # Reraise the original exception\n        raise e.wrapped\n\n\nGrouping API methods\n---------------------------\n\nFor larger API's it can be useful to be able to split the API definition\ninto multiple files but still use it from a single instance in the code.\n\nThis can be achieved by creating separate client classes for each group\nof operations and then create a common class, which inherits from all the\ngroup clients and provides entire API from one instance.\n\n.. code-block:: python\n\n    class A(RestClient):\n        \"\"\"API One client\"\"\"\n        @GET('stuff/{sth}')\n        @on(200, lambda r: r.json())\n        def get(self, sth: str) -> typing.Any:\n            \"\"\"Get what\"\"\"\n\n\n    class B(RestClient):\n        \"\"\"API One client\"\"\"\n        @PUT('stuff/{sth}')\n        @body('body')\n        @on(204, lambda _: True)\n        def put_b(self, sth: str, body: bytes) -> typing.Any:\n            \"\"\"Put sth\"\"\"\n\n\n    @endpoint('https://put.example.com')\n    class BB(B):\n        \"\"\"API One client\"\"\"\n        @PUT('stuff/{sth}')\n        @body('body')\n        @on(204, lambda _: True)\n        def put_bb(self, sth: str, body: bytes) -> typing.Any:\n            \"\"\"Put sth\"\"\"\n\n\n    @endpoint('https://patches.example.com')\n    class C(RestClient):\n        \"\"\"API Three client\"\"\"\n        @PATCH('stuff/{sth}')\n        @body('body')\n        @on(204, lambda _: True)\n        @on(..., lambda _: False)\n        def patch(self, sth: str, body: bytes) -> typing.Any:\n            \"\"\"Patch sth\"\"\"\n\n\n    @accept('application/json')\n    @content('application/xml')\n    @header('X-Auth-Key', 'ABCD')\n    @endpoint('https://example.com')\n    @backend('httpx')\n    class InheritedClient(A, BB, C):\n        ...\n\n\nPlease note that the :py:`@endpoint()` decorator can be specified for each\nsub API with a different value if necessary. It will be inherited by methods\nbackwards with respect to the inheritance chain, i.e. the more abstract class\nwill use the first endpoint specified in it's subclass chain. In the above example\nmethod :py:`B.put_b()` will use :py:`'https://put.example.com'` endpoint, and\nmethod :py:`C.patch()` will use :py:`'https://patches.example.com'`.\n\nFor real world example checkout the `Petstore Swagger client example`_.\n\n\nCaveats\n-------\n\nDecorator order\n~~~~~~~~~~~~~~~\n\nDecorators can be basically added in any order, except for the HTTP method\ndecorator (e.g. :py:`@GET()`), which should always be at the top of the given\ndecorator list. Third party decorators should be added above the HTTP method\ndecorators.\n\nName conflicts\n~~~~~~~~~~~~~~\n\nDecorators can sometimes generate conflicts with decorated method or function\nnames in case they have the same name as they get merged into the :py:`__globals__`\ndictionary. In case this is an issue, decorest decorators should be used with full\nmodule namespace:\n\n.. code-block:: python\n\n    @decorest.POST('pet')\n    @decorest.content('application/json')\n    @decorest.header('accept', 'application/json')\n    @decorest.body('pet', lambda p: json.dumps(p))\n    def add_pet(self, pet):\n        \"\"\"Add a new pet to the store\"\"\"\n\n\nCompatibility with other decorators\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn general, decorest_ decorators should work with other decorators, which return\nfunction objects, but your mileage may vary. In general third-party decorators\nshould be added above the HTTP method decorators as only the HTTP decorators\nmake the actual HTTP request. Thus, typical decorators, which try to wrap\nthe actual call should get the HTTP callable returned by HTTP method decorators\nsuch as :py:`@GET()`.\n\nCurrently, it is not possible to add decorators such as :py:`@classmethod`\nor :py:`@staticmethod` to API methods, as the invocation requires an instance\nof client class.\n\nDevelopment\n===========\n\nCreate virtual env\n------------------\n\n.. code-block:: bash\n\n    virtualenv -p /usr/bin/python3 venv\n    source venv/bin/activate\n\n\nFormatting\n----------\n.. code-block:: bash\n\n    yapf -ir decorest tests examples\n\n\nRunning tests\n-------------\n\nAll tests are stored in tests_ directory. Running tests is fully automated using\ntox_ and tox-docker_.\n\n.. code-block:: bash\n\n    python -m tox -e yapf,rstcheck,mypy,flake8,basic,httpbin,asynchttpbin,swaggerpetstore\n\n\nChecking README syntax\n----------------------\n\n.. code-block:: bash\n\n    rstcheck README.rst\n\nLicense\n=======\n\nCopyright 2018-present Bartosz Kryza <bkryza@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n.. _tests: https://github.com/bkryza/decorest/tree/master/tests\n.. _requests: https://github.com/requests/requests\n.. _httpx: https://github.com/encode/httpx\n.. _`requests session`: http://docs.python-requests.org/en/master/user/advanced/#session-objects\n.. _decorest: https://github.com/bkryza/decorest\n.. _`Petstore Swagger client example`: https://github.com/bkryza/decorest/blob/master/examples/swagger_petstore/petstore_client.py\n.. _`httpbin test suite`: https://github.com/bkryza/decorest/blob/master/tests/httpbin_test.py\n.. _tox: https://github.com/tox-dev/tox\n.. _tox-docker: https://github.com/tox-dev/tox-docker\n.. _httpx compatibility guide: https://www.python-httpx.org/compatibility/\n.. _rfc2616: https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/bkryza/decorest",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "decorest",
    "package_url": "https://pypi.org/project/decorest/",
    "platform": "",
    "project_url": "https://pypi.org/project/decorest/",
    "project_urls": {
      "Homepage": "https://github.com/bkryza/decorest"
    },
    "release_url": "https://pypi.org/project/decorest/0.1.0/",
    "requires_dist": [
      "requests",
      "requests-toolbelt"
    ],
    "requires_python": "",
    "summary": "`decorest` library provides an easy to use declarative REST API client interface, where definition of the API methods using decorators automatically gives a working REST client with no additional code.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12555583,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "406109cbdc6d009e9feb6ca8c1beca95d16a5f2a63cb868240940a5a99f4320c",
          "md5": "0bebd956e9de2eb687fd6b375ad7f19c",
          "sha256": "dd0a3c65da986fc3284c62d99f34c1889be1a437eee8787f5a184311183da711"
        },
        "downloads": -1,
        "filename": "decorest-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0bebd956e9de2eb687fd6b375ad7f19c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8115,
        "upload_time": "2018-02-08T01:39:33",
        "upload_time_iso_8601": "2018-02-08T01:39:33.655379Z",
        "url": "https://files.pythonhosted.org/packages/40/61/09cbdc6d009e9feb6ca8c1beca95d16a5f2a63cb868240940a5a99f4320c/decorest-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79a35b35a2db902802ae30dd6fae1f005b86da15c4893f8598d4be50d175fa13",
          "md5": "9b70a5ca614e6b80b87cb4fc45ab690a",
          "sha256": "87702e3c91b81bd3eaf856c6d58ff869705a212a2689a06df3365af2d08478a1"
        },
        "downloads": -1,
        "filename": "decorest-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9b70a5ca614e6b80b87cb4fc45ab690a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13770,
        "upload_time": "2018-02-11T23:25:50",
        "upload_time_iso_8601": "2018-02-11T23:25:50.951672Z",
        "url": "https://files.pythonhosted.org/packages/79/a3/5b35a2db902802ae30dd6fae1f005b86da15c4893f8598d4be50d175fa13/decorest-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13ac07dfd314a33f2b892b3a53d3b71f8ce11c64e8992d92a1ac786279c9c084",
          "md5": "fb0ee1de9f940f5f9f55ecc77593658b",
          "sha256": "e5c05fe4dabd26297f7d27a0f83e840a43c782ef460bbf2f3d36b630492f32ac"
        },
        "downloads": -1,
        "filename": "decorest-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "fb0ee1de9f940f5f9f55ecc77593658b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13607,
        "upload_time": "2018-04-02T12:59:11",
        "upload_time_iso_8601": "2018-04-02T12:59:11.439222Z",
        "url": "https://files.pythonhosted.org/packages/13/ac/07dfd314a33f2b892b3a53d3b71f8ce11c64e8992d92a1ac786279c9c084/decorest-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2b1857a34415a89a6c96026136e16e0709cc8a7b3b0e4a9b2b643a4327c0f04",
          "md5": "481f1319a923ef1336bb9270ce7abc19",
          "sha256": "4c42dc5cea9f22fa878ba0d0a0d0af50e7f59641495aa37bbd39117c935b6c9d"
        },
        "downloads": -1,
        "filename": "decorest-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "481f1319a923ef1336bb9270ce7abc19",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17802,
        "upload_time": "2018-09-08T09:59:29",
        "upload_time_iso_8601": "2018-09-08T09:59:29.713205Z",
        "url": "https://files.pythonhosted.org/packages/b2/b1/857a34415a89a6c96026136e16e0709cc8a7b3b0e4a9b2b643a4327c0f04/decorest-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d90363271bd883f119a9767544728ee2fdc22453fb631bcb7a2b5e0774a5a0ac",
          "md5": "822cb97937ed59f2669926f742929c05",
          "sha256": "44effe0059cd2f54d2269542a97a654b7831c04a2bac0e3f68c2bb80d7381281"
        },
        "downloads": -1,
        "filename": "decorest-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "822cb97937ed59f2669926f742929c05",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 40521,
        "upload_time": "2020-10-06T21:37:33",
        "upload_time_iso_8601": "2020-10-06T21:37:33.587135Z",
        "url": "https://files.pythonhosted.org/packages/d9/03/63271bd883f119a9767544728ee2fdc22453fb631bcb7a2b5e0774a5a0ac/decorest-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bf519bc3c3c6990625350240ecbcb1de2550e2c30a432f2d8d89341854eff6d",
          "md5": "eb3e035928b283cc3aa2a94efe709122",
          "sha256": "ffea9a1f9bc5f1afb16655a063e177e459bb4e9d7269fb24a670e0845ba1a2e2"
        },
        "downloads": -1,
        "filename": "decorest-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "eb3e035928b283cc3aa2a94efe709122",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24182,
        "upload_time": "2021-11-27T12:24:08",
        "upload_time_iso_8601": "2021-11-27T12:24:08.083748Z",
        "url": "https://files.pythonhosted.org/packages/4b/f5/19bc3c3c6990625350240ecbcb1de2550e2c30a432f2d8d89341854eff6d/decorest-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ea256848acc39c226499953ee18117e5dccb334cbf4fe7beb1b05b5ed5d24ba",
          "md5": "68470bc64348db13e6d2f2cf830d403c",
          "sha256": "7fa3d4fe26ba53d8cb2ba3a0fc153cc676c6b075b80f5bcd094f87f77e2026aa"
        },
        "downloads": -1,
        "filename": "decorest-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68470bc64348db13e6d2f2cf830d403c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 52748,
        "upload_time": "2022-01-12T23:20:54",
        "upload_time_iso_8601": "2022-01-12T23:20:54.594013Z",
        "url": "https://files.pythonhosted.org/packages/4e/a2/56848acc39c226499953ee18117e5dccb334cbf4fe7beb1b05b5ed5d24ba/decorest-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ea256848acc39c226499953ee18117e5dccb334cbf4fe7beb1b05b5ed5d24ba",
        "md5": "68470bc64348db13e6d2f2cf830d403c",
        "sha256": "7fa3d4fe26ba53d8cb2ba3a0fc153cc676c6b075b80f5bcd094f87f77e2026aa"
      },
      "downloads": -1,
      "filename": "decorest-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "68470bc64348db13e6d2f2cf830d403c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 52748,
      "upload_time": "2022-01-12T23:20:54",
      "upload_time_iso_8601": "2022-01-12T23:20:54.594013Z",
      "url": "https://files.pythonhosted.org/packages/4e/a2/56848acc39c226499953ee18117e5dccb334cbf4fe7beb1b05b5ed5d24ba/decorest-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}