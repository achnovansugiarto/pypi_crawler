{
  "info": {
    "author": "Dario F. Marzella, Farzaneh M. Parizi, Derek van Tilborg, Li Xue",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# PANDORA\n\n![Build](https://github.com/X-lab-3D/PANDORA/actions/workflows/main.yml/badge.svg)\n[![Coverage Status](https://coveralls.io/repos/github/X-lab-3D/PANDORA/badge.svg?branch=master)](https://coveralls.io/github/X-lab-3D/PANDORA?branch=master)\n[![Anaconda-Server Badge](https://anaconda.org/csb-nijmegen/csb-pandora/badges/version.svg)](https://anaconda.org/csb-nijmegen/csb-pandora)\n[![Documentation Status](https://readthedocs.org/projects/csb-pandora/badge/?version=latest)](http://csb-pandora.readthedocs.io/?badge=latest)\n\n### Peptide ANchored mODelling fRAmework for peptide-MHC complexes\n\n![PANDORA](https://github.com/DarioMarzella/PANDORA/blob/master/images/flowchart_pMHCI.png?raw=true)\n\n### Contents\n\n- [Overview](#overview)\n- [Dependencies](#dependencies)\n- [Installation](#installation)\n- [Tutorial](#tutorial)\n- [Code Design](#code-design)\n- [Output](#output)\n- [License](./LICENSE)\n- [Issues](#issues)\n\n## Overview\n\nPANDORA is anchor restrained modelling pipeline for generating peptide-MHC structures.\n\nIt contains multiple functions to pre-process data and it's able to exploit different crucial domain knowledge provided by the user to guide the modelling.\n\nPANDORA documentation can be found at: https://csb-pandora.readthedocs.io/en/latest/\n\n\n## Dependencies\nPANDORA requires MODELLER, python and some python libraries to be installed.\nThe following installations are required to start PANDORA installation:\n\n- [Python](https://www.python.org/) 3\n- conda\n- pip3\n\nThe installation process will take care of installing the following dependencies (see [Installation](#installation)), no need to install them yourself.\n\n- [BioPython](https://anaconda.org/conda-forge/biopython)\n- [muscle](https://anaconda.org/bioconda/muscle)\n- [Modeller](https://anaconda.org/salilab/modeller) 9.23 or later\n- [pdb2sql](https://github.com/DeepRank/pdb2sql) (Optional, only for RMSD calculation)\n\nThe following dependencies can be used to predict peptide anchor postisions, but have to be manually installed:\n- [NetMHCpan](https://services.healthtech.dtu.dk/software.php) \n- [NetMHCIIpan](https://services.healthtech.dtu.dk/software.php) \n\n## Installation\n### Conda Installation (suggested)\n\n#### 1. Get a Modeller Key License:\nPrior to PANDORA installation, you need to first activate MODELLER's license. Please request MODELLER license at: https://salilab.org/modeller/registration.html\n\nReplace XXXX with your MODELLER License key and run the command:\n\n```\nalias KEY_MODELLER='XXXX'\n```\n\n#### 2. Install PANDORA\n\nInstall with conda:\n```\nconda install -c csb-nijmegen csb-pandora -c salilab -c bioconda\n```\n\n### GitHub / Pypi installation\n\n#### 1. Install Modeller:\nPrior to PANDORA installation, you need to first activate MODELLER's license. Please request MODELLER license at: https://salilab.org/modeller/registration.html\n\nReplace XXXX with your MODELLER License key and run the command:\n```\nalias KEY_MODELLER='XXXX'\n```\n\nThen Install MODELLER with:\n```\nconda install -y -c salilab modeller\n```\n\n#### 2. Install Muscle\nPANDORA relies on muscle (https://anaconda.org/bioconda/muscle) that can be installed via bioconda\n\n```\nconda install -c bioconda muscle\n```\n\n#### 3. Install PANDORA\n\nPypi installation:\n```\npip install csb-pandora\n```\n\n*Alternatively*, GitHub installation:\n\nClone the repository:\n\n```\ngit clone https://github.com/X-lab-3D/PANDORA.git\n```\nEnter the cloned directory and then install the dependencies!\n\n```\ncd PANDORA\npip install -e .\n```\n\n\n## Generate / download template Database\n\nPANDORA needs a PDB template database to work (retrieved from  [IMGT](http://www.imgt.org/3Dstructure-DB/) database). You can download it from https://github.com/X-lab-3D/PANDORA_database (pMHC I only, generated on 23/03/2021) and follow the [instructions](https://github.com/X-lab-3D/PANDORA_database/blob/main/README.md). Please be sure you re-path your database as explained in the instructions.\n\nAlternatively, you can generate your template database(suggested) with the following python3 code:\n\n```python\n## import requested modules\nfrom PANDORA.PMHC import PMHC\nfrom PANDORA.Pandora import Pandora\nfrom PANDORA.Database import Database\n\n## A. Create local Database\ndb = Database.Database()\ndb.construct_database(save='path/to/pandora_Database.pkl')\n```\n\nNote: generating a database can take more than one hour and a half, so we advice to run it as background process or submit it as cluster job.\n\n## (Optional) Install NetMHCpan and/or NetMHCIIpan\n\nPANDORA lets the user if he wants to predict peptide's anchor residues instead of using conventional predefined anchor residues.\nIn that case you need to download [NetMHCpan](https://services.healthtech.dtu.dk/cgi-bin/sw_request) (for peptide:MHC class I) and/or [NetMHCIIpan](https://services.healthtech.dtu.dk/cgi-bin/sw_request) (for peptide:MHC class II).\nTo install, you can simply run:\n```\npython netMHCpan_install.py\n```\n\n## Tutorial\n\n#### Example 1 : Generating a peptide:MHC complex given the peptide sequence\nPANDORA requires at least these information to generate models:\n- Peptide sequence\n- MHC allele\n\nSteps:\nA. Load the template database (see installation, point 4)\n\nB. Creating a Template object based on the given target information\n\nC. Generating *n* number of pMHC models (Default *n=20*)\n\nPlease note that you can specify output directory yourself, otherwise will be generated in a default directory\n```python\n## import requested modules\nfrom PANDORA.PMHC import PMHC\nfrom PANDORA.Pandora import Pandora\nfrom PANDORA.Database import Database\n\n## A. Create local Database\ndb = Database.load('path/to/pandora_Database.pkl')\n\n## B. Create Target object\ntarget = PMHC.Target(id = 'myTestCase'\n    allele_type = 'HLA-A*0201'\n    peptide = 'LLFGYPVYV',\n    anchors = [2,9])\n\n## C. Perform modelling\ncase = Pandora.Pandora(target, db)\ncase.model()\n```\n#### Example 2 : Create multiple loop models in a your given directory\nThere are some options provided that you can input them as arguments to the functions.\n\nFor instance:\n- Generate more models for your modelling case\n- Specify the output directory yourself\n- Give your target a name\n- Predict anchors by NetMHCpan\n\nPlease note that, if *anchors* is not specified or *use_netmhcpan* is set to *False*, PANDORA will automatically assign canonical anchors (P2 and PÎ©).\n\n```python\nfrom PANDORA.PMHC import PMHC\nfrom PANDORA.Pandora import Pandora\nfrom PANDORA.Database import Database\n\n## A. load the pregenerated Database  of all pMHC PDBs as templates\ndb = Database.load('path/to/pandora_Database.pkl')\n\n## B. Create Target object\ntarget = PMHC.Target(id = 'myTestCase'\n    allele_type = ['HLA-B*5301', 'HLA-B*5301'],\n    peptide = 'TPYDINQML',\n    use_netmhcpan = True)\n\n## C. Perform modelling\ncase = Pandora.Pandora(target, db, output_dir = '/your/directory/')\ncase.model(n_loop_models=100)  # Generates 100 models\n```\n\n#### Example 3 : Benchmark PANDORA on one modelling case\n\nEvaluate the framework on a target with a known experimental structure:\n- Provide the PDB ID for the *Target* class\n- Set *benchmark=True* for the modelling\n  (calculates L-RMSD to show how far the model is from the near-native structure)\n\n```python\nfrom PANDORA.PMHC import PMHC\nfrom PANDORA.Pandora import Pandora\nfrom PANDORA.Database import Database\n\n## A. Load pregenerated database of all pMHC PDBs as templates\ndb = Database.load('path/to/pandora_Database.pkl')\n\n## B. Create Target object\ntarget = PMHC.Target('1A1M',\n    db.MHCI_data['1A1M'].allele_type,\n    db.MHCI_data['1A1M'].peptide,\n    anchors = db.MHCI_data['1A1M'].anchors)\n\n## C. Perform modelling\ncase = Pandora.Pandora(target, db)\ncase.model(benchmark=True)\n```\n#### Example 4: Model a peptide:MHCI complex with an alpha helix in the peptide\n\nInput domain secondary structure prediction information (Helix/Beta strand):\n\n```python\nfrom PANDORA.PMHC import PMHC\nfrom PANDORA.Pandora import Pandora\nfrom PANDORA.Database import Database\n\n## A. Load pregenerated database of all pMHC PDBs as templates\ndb = Database.load('path/to/pandora_Database.pkl')\n\n## B. Create Target object\ntarget = PMHC.Target(id = 'myMHCIITestCase'\n    allele_type = ['MH1-B*2101', 'MH1-B*2101'],\n    peptide = 'TAGQSNYDRL',\n    anchors = [2,10],\n    helix = ['4', '9'])\n\n## C. Perform modelling\ncase = Pandora.Pandora(target, db)\ncase.model(helix=target.helix)\n```\n#### Example 5: Benchmark PANDORA on multiple cases (running in parallel on multiple cores)\n\nPANDORA can model large batches of peptides in parallel. You need to provide the following peptide information in a *.tsv* or *.csv* file:\n\n- *Peptide sequence,  MHC Allele name*\nNote: you can also add various information to your file, including anchors for each case, templates, IDs.\n\nThe Wrapper class will take care of generating PANDORA target objects and parallelize the modelling on the given number of cores:\n\n```python\nfrom PANDORA.Pandora import Pandora\nfrom PANDORA.Database import Database\nfrom PANDORA.Wrapper import Wrapper\n\n## A. Load pregenerated database of all pMHC PDBs as templates\ndb = Database.load('path/to/pandora_Database.pkl')\n\n## B. Create the wrapper object\nwrap =  Wrapper()\n\n## C. Create all Target Objects based on peptides in the .tsv file\nwrap.create_targets('datafile.tsv', db)\n\n## C. Perform modelling\nwrap.run_pandora(num_cores=128)\n```\n#### Example 6: Generating a peptide:MHC class II complex given the peptide sequence\n\nTo model a peptide:MHC class II complex, you only need to specify that in *PMHC.Target()* function: as *MHC_class='II'* (By default it is set to model MHC class I).\n\n```python\nfrom PANDORA.PMHC import PMHC\nfrom PANDORA.Pandora import Pandora\nfrom PANDORA.Database import Database\n\n## A. Load pregenerated database of all pMHC PDBs as templates\ndb = Database.load('path/to/pandora_Database.pkl')\n\ntarget = PMHC.Target(id='myMHCIITestCase'\n    MHC_class = 'II',\n    allele_type = ['HLA-DRA*0102', 'HLA-DRA*0101', 'HLA-DRB1*0101'],\n    peptide = 'GELIGILNAAKVPAD',\n    anchors = [4, 7, 9, 12])\n\ncase = Pandora.Pandora(target, db)\ncase.model()\n```\nNote: For MHC II, no canonical anchors can be defined. Therefore the user must either install and use NetMHCIIpan or directly input the anchors positions as *anchors* in *PMHC.Target()*\n\n## Code Design\nPANDORA has been implemented in an Object-Oriented Design(OOD). Resulting in a comprehensible and user-friendly framework.\n\nsee [Class Diagram](https://github.com/DarioMarzella/PANDORA/blob/master/images/class_diagram.png?raw=true)\n\n## Output\n\nThe following file structure is prepared to store the output files for each case. Each modelling case is given a specific name based on target and template ID.\n\nPlease note that the modelling results consisting genretaed models by default are stored in *./PANDORA_files/data/outputs/* directory\n\n- Main outputs: *molpdf_DOPE.tsv, *BL*.pdb, modeller.log(\n- Input files prepared for modelling: *contacs_*.list, *.ali*\n- *.py* files: MODELLER scripts\n- MODELLER by product outputs(Generated during the modelling): *D0*, DL*, *IL*.pdb , , *.ini, *.lrsr, *.rsr, *.sch, ...*\n\n```\nPANDORA_files\n  âââ data\n     âââ outputs                         Default directory to save output\n        âââ <target_name>_<template_id>  Each user's modelling case is given a specific name\n\n           âââ molpdf_DOPE.tsv           Ranking all models by molpdf and DOPE modeller's scoring functions\n           âââ *BL*.pdb                  Final models\n           âââ modeller.log              Printing log file generated by MODELLER, describing modelling steps, or any issues arose along modelling\n\n           âââ *.ali                     Alignment file between template(s) and target used for modelling\n           âââ contacts_*.list           Contact restraints\n\n           âââ MyLoop.py                 MODELLER script to set loop modelling parameters for the peptide\n           âââ cmd_modeller_ini.py       MODELLER script to generate an initial model to extract restraints from\n           âââ cmd_modeller.py           MODELLER script to set the main modelling parameters\n\n           âââ *.ini                     Model generated placing the target atoms at the same coordinate as the template's atoms\n           âââ *IL*.pdb                  Initial loop model\n           âââ ...\n\n\n```\n\n## Issues\n\nIf you have questions or find a bug, please report the issue in the [Github issue channel](https://github.com/X-lab-3D/PANDORA/issues).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/X-lab-3D/PANDORA/tree/master",
    "keywords": "PANDORA",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "csb-pandora",
    "package_url": "https://pypi.org/project/csb-pandora/",
    "platform": null,
    "project_url": "https://pypi.org/project/csb-pandora/",
    "project_urls": {
      "Homepage": "https://github.com/X-lab-3D/PANDORA/tree/master",
      "Issue tracker": "https://github.com/X-lab-3D/PANDORA/issues",
      "Source Code": "https://github.com/X-lab-3D/PANDORA/tree/master"
    },
    "release_url": "https://pypi.org/project/csb-pandora/0.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Model peptide-MHC I complexes using anchor distance restrains in MODELLER",
    "version": "0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15801332,
  "releases": {
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af5b2e98b7d74f4dd7a9d3d84cb591bb38a37922ee793d8735c45b90bf14285b",
          "md5": "f151b9180bfcd1dc8312b45a1efbdff5",
          "sha256": "7e339e94fee4d26c2b1489ea6d27ffcd137eff356815f6a3a4a244b5b045db81"
        },
        "downloads": -1,
        "filename": "csb_pandora-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "f151b9180bfcd1dc8312b45a1efbdff5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60094,
        "upload_time": "2022-03-21T15:53:21",
        "upload_time_iso_8601": "2022-03-21T15:53:21.458662Z",
        "url": "https://files.pythonhosted.org/packages/af/5b/2e98b7d74f4dd7a9d3d84cb591bb38a37922ee793d8735c45b90bf14285b/csb_pandora-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "af5b2e98b7d74f4dd7a9d3d84cb591bb38a37922ee793d8735c45b90bf14285b",
        "md5": "f151b9180bfcd1dc8312b45a1efbdff5",
        "sha256": "7e339e94fee4d26c2b1489ea6d27ffcd137eff356815f6a3a4a244b5b045db81"
      },
      "downloads": -1,
      "filename": "csb_pandora-0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "f151b9180bfcd1dc8312b45a1efbdff5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 60094,
      "upload_time": "2022-03-21T15:53:21",
      "upload_time_iso_8601": "2022-03-21T15:53:21.458662Z",
      "url": "https://files.pythonhosted.org/packages/af/5b/2e98b7d74f4dd7a9d3d84cb591bb38a37922ee793d8735c45b90bf14285b/csb_pandora-0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}