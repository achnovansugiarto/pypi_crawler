{
  "info": {
    "author": "Gary Davenport",
    "author_email": "dovedweller@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PreferredSoundPlayer\nThis is my preferential player when I need to play various sound files in a project.\n\nIt is multi-platform and has no dependencies, other than what comes with Windows 10, the standard Linux kernel, MacOS 10.5 or later, and the Python Standard Library.\n\nIt contains enough functions to be useful, but not too many to be confusing, and I tried to keep the syntax and implementation\nsuper-simple and human readable.\n\nWhen I built this module, I considered many factors that were important to me, \nlike maintenance of code, ease of use, reliability and so forth.  I used these methods below as they seem to be the best \nchoices, considering the above factors.\n\nIn a nutshell:\n\n#### -Windows 10 uses the Windows winmm.dll Multimedia API to play sounds.  \n\n\n#### -Linux will always play .wavs with ALSA\n#### -Otherwise, if file is not .wav:\n#### -Linux will use the first available player in this order: gst-1.0-play, ffmpeg, gst playbin(built on the fly) or ALSA\n-Linux will try to use gst-1.0-play first (usually present), if not present then\n\n-Linux will try to use ffmpeg as its player (usually present), if not present then\n\n-Linux will initialize a gstreamer playbin player (is supposed to always be present), if not present then\n\n-Linux will play the sound with ALSA, and if not a .wav file will sound like white noise.\n\n#### -MacOS uses the afplay module which is present OS X 10.5 and later\n\n#### -For looping, I would recommend only using .wav files, but you can loop mp3s.\n\nIn Windows, the duration of the sound file is calculated and that duration is used to loop the sound file.\nIn Linux, the duration of the sound file is calculated if it is a wav file, otherwise, a loop checks every 0.2 seconds to see if the sound file is playing, if not, it relaunches the sound.  MacOS works similar to the Linux algorithm.  So if you use .wav files instead of mp3s, you avoid a background loop that checks 5 times a second, and also the small gap in sound that can occur when the loop restarts (less than .2 seconds).  See additional notes below about looping in a game loop.\n\nTo use the module simply add:\n```\nfrom preferredsoundplayer import *\n```\nand this will import all its functions.\n\nThe module essentially contains 3 functions for working with sound files:\n```\nyourSound = soundplay(\"yourfilename.mp3\") # or just soundplay(\"yourfilename.mp3\")\n\nstopsound(yourSound)\n\ngetIsPlaying(yourSound)\n```\nAnd a few more for looping .wav files:\n\n```\nbackgroundSong = loopwave(\"yourfilename.wav\")\n\nand\n\nstoploop(backgroundSong)\n```\n\nHere are some examples on how to use them.\nNote that with 'soundplay' it can be used as a standalone function, but if you want to stop the file from playing,\nyou will have to use the return value of soundplay.  Read a little further and the examples hopefully will make sense.\n\n### Examples:\n\n#### To play a sound file:\n```\nsoundplay(\"coolhipstersong.mp3\") #-> this plays the mp3 file\n\nmysong = soundplay(\"coolhipstersong.mp3\") #-> this plays the mp3 and also returns a reference to the song.\n```\n\n#### To stop your song:\n```\nstopsound(mysong) # -> this stops mysong, which you created in the line above\n```\n\n#### To find out if your wave file is playing:\n\n```\nisitplaying = getIsPlaying(mysong) -> sets a variable to True or False, depending on if process is running\n\nprint(getIsPlaying(mysong)) -> prints True or False depending on if process is running\n\nif getIsPlaying(mysong)==True:\n    print(\"Yes, your song is playing\")\nelse:\n    print(\"Your song is not playing\")\n```\n\n#### To play a sound file synchronously (main progam halts while sound plays):\n```\nsoundplay(\"coolhipsong.mp3\",1) #-> this plays the mp3 file synchronously\n\nor\n\nsoundplay(\"coolhipsong.mp3\",block=True)\n\n\n* Note: commands below will work, but you cannot stop the song, because your progam will be blocked until the song is done playing\n\nmysong = soundplay(\"coolhipstersong.mp3\",1) #-> this plays the wav file synchronously and also returns the song reference\n\nor \n\nmysong = soundplay(\"coolhipstersong.mp3\",block=True) #-> this plays the wav file synchronously and also returns the song reference\n\n```\n#### To play a wave file in a continuous loop:\n```\nmyloop = loopwave(\"mybackgroundsong.wav\")\n```\nThis starts a background loop playing, but also returns a reference to the background process so it can be stopped.\n#### To stop the continuous loop from playing:\n```\nstoploop(myloop)\n```\n### Discussion - A little more about why I picked these methods:\n\n### Windows 10\nWindows10 functions use the winmm.dll Windows Multimedia API calls using c function calls to play sounds.\n\nSee references:\n\n“Programming Windows: the Definitive Guide to the WIN32 API, Chapter 22 Sound and Music Section III Advanced Topics ‘The MCI Command String Approach.’” Programming Windows: the Definitive Guide to the WIN32 API, by Charles Petzold, Microsoft Press, 1999. \n\nhttps://stackoverflow.com/questions/22253074/how-to-play-or-open-mp3-or-wav-sound-file-in-c-program\n\nhttps://github.com/michaelgundlach/mp3play\n\n& https://github.com/TaylorSMarks/playsound/blob/master/playsound.py\n\n#### Playing Sounds in Windows:\nThis method of playing sounds allows for multiple simultaneous sounds, works well and has been used successfully in several projects.  As long as this dynamically linked library is bundled with the current version of Windows, I plan to use this as the preferred method of playing sounds unless there is a compelling reason to change.  In this case, I am using the reasoning \"If it's not broke, don't fix it.\".  Another advantage is it plays mp3s and other formats as well, not just .wav files.  It works well, is stable, loads and executes quickly, and has essentially never caused me any problems.\n\nThe Python `winsound` module on the other hand, is at least to me a bit odd in its syntax, less intuitive, and only uses wave files.  You basically can't play more than one wave at a time asynchronously.  This is severely limiting, so I don't prefer it for playing sounds.\n\nCalling the winsound.PlaySound module through the OS system works, but not does not execute as quickly.  This may not be a bad approach, however, for background sounds whose fine-timing is not critical.\n\n#### Looping Sounds in Windows:\n\nIn this latest version, I use the winmm.dll mciSendString calls with additional specifications to loop, rather than using with winsound module, as it allows for multiple simultaneous loops if you would need but more importantly will allow looping of mp3 files, in addition to .wav files.\n\n##### Using OS System calls in Windows to loop sounds.\n\nYou can loop sounds by using OS system calls in the style of using command line instructions.\n\nSee https://pypi.org/project/oswaveplayer/ for an example.\n\nThis is not a bad approach, but there is a little delay with the sound launch using the command line version.  This may not be a big issue for you when playing background music.  Another way to play multiple background sounds at once would be to use another module or to add the oswaveplayer to your project with the import statement:\n\n```\nfrom oswaveplayer import oswaveplayer        #(this can be installed with \"pip install oswaveplayer\")\n```\nthen use:\n```\nbackgroundSong = oswaveplayer.loopwave(\"yourfilename.wav\")\n```\nand\n```\noswaveplayer.stoploop(backgroundSong)\n```\nThis is not a bad approach, but due to the perceptible delay in playing the sound, it is not preferred to me.  You can also look over the source code to see how to launch sounds using this approach, as it is very basic.\n\n### Linux\nAs far as I know the gst-1.0-play command is usually available on linux distributions.  It has almost always has been for me and its part of the gstreamer library.  My understanding is it can be built from the gstreamer library and that library has been included with the standard Linux kernel for a long time.  It may not be built and ready to go in a Linux disto though or even on path.  So I first try this player.  If that does not work, I try to play the file with ffmpeg command from the ffmpeg project.  As far as I know, it is not part of the standard Linux kerrnel, but is usually present on most distros.  If these 2 commands are not present, which is unusual, the program will use the gstreamer library, which should be present to make a playbin player using the gstreamer library.  I do this a little differently than some other players, as I initialize a gst playbin player for each sound.  (Otherwise, you will get quite a few warnings, some critical related to the internal looping of the gst player). If this fails for some reason (maybe in the future, some import statement changes, who knows??) it will play with the ALSA player.  mp3s will not sound right, but like white noise.\n\n\n### MacOS\n\n`afplay` system calls work great on 'MacOS'.  I see no reason to invoke different methods at this point in time.  I do not want to concern myself with trying to make this module work with significantly older versions of MacOS before `afplay` was available.  My perception is that people typically would rather use Linux on an old computer systems instead of loading old versions of MacOS.  `afplay` has been present for some time now on MacOS.  Please contact me if you think this really needs to work on older versions of MacOS.\n\n#### You may not need a looping function to loop sounds:\n##### A note on looping sounds in general:\nIf you using a game loop in game building, you don't actually need to use these looping functions at all (although it may be a little more convenient).  You may notice that this module, and other packages I have written, all contain a function called getIsPlaying(yoursound).  You can simply implement a check in your game loop to see if yoursong is playing.  If it is, don't do anything.  If it is not, play the sound with `yoursound = soundplay(\"yourfilename.wav\")`.  Maybe check every 10 frames or something like that in the game loop.\n\n### Other function references/aliases:\nI have included these aliases, in case this module is dropped in as a replacement for my other 2 sound playing modules, `oswaveplayer` and `preferredwaveplayer`.\nIn other words, if someone has used those modules in a project and they need more functionality, they can import this one and it should work as it contains the same functions, but different implementation.  These 3 function names are available, but they simply are references for backwards compatibility.\n```\nplaywave = soundplay\nstopwave = stopsound\nloopwave = loopsound\n```\n### Notes about using this module as a replacement in the playsound module:\n\nAdditionally, I included an alias/reference to the function named 'playsound', and if used, the default block will be true, or synchronous play.  This way, the\nmodule can be used in place of the playsound module (https://github.com/TaylorSMarks/playsound/blob/master/playsound.py) with the same syntax.  If the playsound module is no longer maintained or otherwise does not work for you, you can load this module and use the import statement.\n\nUse:\n```\nfrom preferredwaveplayer import playsound\n```\nfor backwards compatibility with the playsound module.\n\nI do not worry about playing urls with this module though.\n\n### Update 8/2/2021 -Manual 'Garbage Collection' now being performed in Windows when the winmm.dll module is used.\nI added garbage collection which I believe sorely needed for this module.  Other players which I have cited have used the windows multimedia module to play sounds by issuing c type commands from python to the winmm.dll module.  The problem is that memory is allocated for these sounds using the c language.  The wimm.dll module sounds are supposed to be closed in order to reallocate that memory.  In windows this can be done by using and event listenter to report when the playing of the sound is complete, and then it can be closed.\n\nIt turns out is easy to issue a play command from python using the c commands wrapper.  However, it is much harder to set up an event listener and report it back to Python.  If it can be done at all it would be hard very complicated to do.\n\nSo I created my own garbage collection algorithm from the Python side of things.  Basically, every time a call to the winmm.dll module is called, that alias is added to a list.  Also, all prior aliases in the list are checked to see if the sound is playing.  If it is not, stop and close calls are issued to that sound alias, then the alias is removed from the garbage collection list.\n\nIn short before playing a new sound, prior sounds are checked to see if they have finished and then closed.  There is no event listended for, but cleanup is done at every play of a sound.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/garydavenport73/PreferredSoundPlayer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "preferredsoundplayer",
    "package_url": "https://pypi.org/project/preferredsoundplayer/",
    "platform": "",
    "project_url": "https://pypi.org/project/preferredsoundplayer/",
    "project_urls": {
      "Bug Tracker": "https://github.com/garydavenport73/PreferredSoundPlayer/issues",
      "Homepage": "https://github.com/garydavenport73/PreferredSoundPlayer"
    },
    "release_url": "https://pypi.org/project/preferredsoundplayer/0.0.5/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "I wanted a dependable sound player which is easy to implement, so I made and prefer this one.",
    "version": "0.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11071696,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10e0a12df5d8d2d34a7181c19e85d5b8b249a56594b9525008c4d5dba54b2ff8",
          "md5": "244a1ddd66315ac2e237aae9988bbecd",
          "sha256": "07a314810c3a34485ea0b9fb2c24032fe49d075bb8a94c844aaccbea3eecaf91"
        },
        "downloads": -1,
        "filename": "preferredsoundplayer-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "244a1ddd66315ac2e237aae9988bbecd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11350,
        "upload_time": "2021-07-10T03:23:47",
        "upload_time_iso_8601": "2021-07-10T03:23:47.650088Z",
        "url": "https://files.pythonhosted.org/packages/10/e0/a12df5d8d2d34a7181c19e85d5b8b249a56594b9525008c4d5dba54b2ff8/preferredsoundplayer-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66578a8e40326b3f4c8f5d654b1fa5eaae1b2ef5484feb22cb753d50e8a9c309",
          "md5": "f87c63507d1fba5fa17059c8fcee2382",
          "sha256": "58825ebca34b1af67bdef4089da9e82c6a3884ed5804c4a3938ac9676bc728b4"
        },
        "downloads": -1,
        "filename": "preferredsoundplayer-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f87c63507d1fba5fa17059c8fcee2382",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13901,
        "upload_time": "2021-07-10T03:23:49",
        "upload_time_iso_8601": "2021-07-10T03:23:49.080770Z",
        "url": "https://files.pythonhosted.org/packages/66/57/8a8e40326b3f4c8f5d654b1fa5eaae1b2ef5484feb22cb753d50e8a9c309/preferredsoundplayer-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad4f929205f3340318c121981a65f1687b29e8ea3ae6f3b640d6d8eb7f558478",
          "md5": "56d39fbcfd5919f11040f04102e4ad08",
          "sha256": "610eb4a1cf8940729b101cb418008c2bdf6adb9eee1e71e02b53db52789973a3"
        },
        "downloads": -1,
        "filename": "preferredsoundplayer-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56d39fbcfd5919f11040f04102e4ad08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11060,
        "upload_time": "2021-07-17T16:35:19",
        "upload_time_iso_8601": "2021-07-17T16:35:19.531258Z",
        "url": "https://files.pythonhosted.org/packages/ad/4f/929205f3340318c121981a65f1687b29e8ea3ae6f3b640d6d8eb7f558478/preferredsoundplayer-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7c9a2d761f44c8d5142a3fcd12b70240b2c4dc78815f6179c676f7da16081a1",
          "md5": "ea35c6f4a09c8d7ef6fdbca40a2a394a",
          "sha256": "8e844b1e4d7b751fdeb0bfc5e715e17c9b555b88cc920aa439dbbb1a0803d773"
        },
        "downloads": -1,
        "filename": "preferredsoundplayer-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ea35c6f4a09c8d7ef6fdbca40a2a394a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13664,
        "upload_time": "2021-07-17T16:35:21",
        "upload_time_iso_8601": "2021-07-17T16:35:21.075169Z",
        "url": "https://files.pythonhosted.org/packages/a7/c9/a2d761f44c8d5142a3fcd12b70240b2c4dc78815f6179c676f7da16081a1/preferredsoundplayer-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32c8081d59c555106c74c4c031fa46408a8f3727855644e7ea9b3b32d7380849",
          "md5": "65405ea38138c4c433584c067aec54e7",
          "sha256": "6665fe744d83ac970d2706e91bb3c3b4f8ee563c061fc1f05f51745c0fa81950"
        },
        "downloads": -1,
        "filename": "preferredsoundplayer-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65405ea38138c4c433584c067aec54e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12330,
        "upload_time": "2021-08-02T18:33:16",
        "upload_time_iso_8601": "2021-08-02T18:33:16.523630Z",
        "url": "https://files.pythonhosted.org/packages/32/c8/081d59c555106c74c4c031fa46408a8f3727855644e7ea9b3b32d7380849/preferredsoundplayer-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd9e2ad06b239095d2bcfad3804b6263a75fb3e62f5c71787e970c60c4b8ade9",
          "md5": "df3bd2d40a7e4ee893fa92d9ef725644",
          "sha256": "251d72226dd7402ca732559f7007d616c65d7854b67877aa4024f70f90d568bf"
        },
        "downloads": -1,
        "filename": "preferredsoundplayer-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "df3bd2d40a7e4ee893fa92d9ef725644",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15384,
        "upload_time": "2021-08-02T18:33:17",
        "upload_time_iso_8601": "2021-08-02T18:33:17.985171Z",
        "url": "https://files.pythonhosted.org/packages/dd/9e/2ad06b239095d2bcfad3804b6263a75fb3e62f5c71787e970c60c4b8ade9/preferredsoundplayer-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32c8081d59c555106c74c4c031fa46408a8f3727855644e7ea9b3b32d7380849",
        "md5": "65405ea38138c4c433584c067aec54e7",
        "sha256": "6665fe744d83ac970d2706e91bb3c3b4f8ee563c061fc1f05f51745c0fa81950"
      },
      "downloads": -1,
      "filename": "preferredsoundplayer-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "65405ea38138c4c433584c067aec54e7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12330,
      "upload_time": "2021-08-02T18:33:16",
      "upload_time_iso_8601": "2021-08-02T18:33:16.523630Z",
      "url": "https://files.pythonhosted.org/packages/32/c8/081d59c555106c74c4c031fa46408a8f3727855644e7ea9b3b32d7380849/preferredsoundplayer-0.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dd9e2ad06b239095d2bcfad3804b6263a75fb3e62f5c71787e970c60c4b8ade9",
        "md5": "df3bd2d40a7e4ee893fa92d9ef725644",
        "sha256": "251d72226dd7402ca732559f7007d616c65d7854b67877aa4024f70f90d568bf"
      },
      "downloads": -1,
      "filename": "preferredsoundplayer-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "df3bd2d40a7e4ee893fa92d9ef725644",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15384,
      "upload_time": "2021-08-02T18:33:17",
      "upload_time_iso_8601": "2021-08-02T18:33:17.985171Z",
      "url": "https://files.pythonhosted.org/packages/dd/9e/2ad06b239095d2bcfad3804b6263a75fb3e62f5c71787e970c60c4b8ade9/preferredsoundplayer-0.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}