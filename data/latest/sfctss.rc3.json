{
  "info": {
    "author": "Marcel Blöcher",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# SFC TSS - Traffic Scheduling Simulator\n\n**SFC TSS** - **S**ervice **F**unction **C**hain (SFC) **t**raffic **s**cheduling **s**imulator - is an Apache2 licensed packet-level discrete event simulator.\nSFC TSS simulates the SFC traffic scheduling problem as described in our paper [\"Letting off STEAM: Distributed Runtime Traffic Scheduling for Service Function Chaining\"](https://linwang.info/docs/infocom20-steam.pdf).\nWe refer to this paper for more information on [RFC 7665](https://tools.ietf.org/html/rfc7665) and the features of the simulator.\nSFC TSS simulates scenarios in compliance with [RFC 7665](https://tools.ietf.org/html/rfc7665) including link latencies, packet handling at the various SFC components like SFFs, SFIs and server.\n\nIf you use SFC TSS in your research, please cite our paper:\n\n```\n@inproceedings{bloecher2020steam,\n  title={Letting off STEAM: Distributed Runtime Traffic Scheduling for Service Function Chaining},\n  author={Blöcher, Marcel and Khalili, Ramin and Wang, Lin and Eugster, Patrick},\n  booktitle={IEEE INFOCOM 2020 - IEEE Conference on Computer Communications},\n  pages={824-833},\n  doi = {10.1109/INFOCOM41043.2020.9155404},\n  year={2020}\n}\n```\n\n# Getting Started\n\n\n## Install\n\nTo setup your environment use either [PyPy3](https://pypy.org) or [Python3](https://www.python.org).\nWe **highly** recommend you to use PyPy3.\n\n\n```\npip install sfctss\n```\n\nTested with Ubuntu 19.10 / Mac OS 10.15.\n\n## Experiment setup\n\nSFC TSS provides the essential parts of a SFC traffic simulation and provides many options to configure an experiment. \n\nA minimal configuration requires the following steps\n\n```Python\nimport numpy as np\nimport random\n\nimport sfctss\nfrom sfctss.scheduler.examples import LoadUnawareRoundRobinScheduler\n\nrand = random.Random()\nrand.seed(42) # seed the experiment\n\nsim = sfctss.simulator.Sim(seed=rand.randint(0,1000000))\n\n\n# create a link latency distribution that is used to connect between SFFs-SFIs\nLATENCY_SFF_SFI = 1\nsfctss.model.SFF.setup_latency_distribution(sim=sim, \n                                            id=LATENCY_SFF_SFI, \n                                            values=np.random.poisson(500, 5000)) # 3000µs\n\n# create a link latency distribution that is used to connect between SFFs-SFFs\nLATENCY_SFF_SFF = 2\nsfctss.model.SFF.setup_latency_distribution(sim=sim, \n                                            id=LATENCY_SFF_SFF,\n                                            values=np.random.poisson(3000, 5000)) # 3000µs\n\n# initialize data structures, configure number of sf types\nsfctss.model.SFI.init_data_structure(sim=sim, \n                                     number_of_sf_types=1, \n                                     latency_provider_sff_sfi=LATENCY_SFF_SFI)\n\n# at least one SFF with a scheduler instance\nscheduler_a = LoadUnawareRoundRobinScheduler(sim=sim,\n                                             incremental=True, # schedule one step of a chain per scheduling attempt\n                                             oracle=True) # scheduler has a global view (all sites)\nsff_a = sfctss.model.SFF(sim=sim, \n                         scheduler=scheduler_a)\n\n# at least one Server with a SFI that is connected to the SFF\nserver = sfctss.model.Server(sim=sim, \n                             processing_cap=120, \n                             cpu_policy=sfctss.model.ServerCpuPolicy.one_at_a_time)\nserver.add_sfi(of_type=1, \n               with_sff_id=sff_a.id)\n\n# do the same for ssf_b ...\nscheduler_b = None # ...\nsff_b = None # ...\n\n# configure connections between SFFs\nsfctss.model.SFF.setup_connection(sim=sim, \n                                  source_id=sff_a.id, \n                                  destination_id=sff_b.id,\n                                  bw_cap=100000,\n                                  latency_provider=LATENCY_SFF_SFF,\n                                  bidirectional=True)           \n\n# configure processing speed of sf types\n# the rate gives the number of packets a sfi of this sf type can process in 1 s when using 1 cpu share\nsfctss.model.SFI.setup_sf_processing_rate_per_1s(sim=sim, \n                                                 of_type=1, \n                                                 with_mu=100)\n\n# create at least one packet generator (which could also replay a pcap)\nwl_config = sfctss.workload.SyntheticWorkloadGenerator.get_default_config()\nwl_gen = sfctss.workload.SyntheticWorkloadGenerator(sim=sim,\n                                                    workload_rand=rand,\n                                                    config=wl_config)\nsim.register_packet_generator(packet_generator=wl_gen,\n                              fetch_all=False)\n\n# finally, start simulation\nsim.run_sim(show_progress=True, # print progress on bash\n            interactive=False, # no interactive mode\n            max_sim_time=1500000, # we stop after 1.5s\n            ui=False, # do not show bash ui\n            stop_simulation_when_workload_is_over=True) # stop when max_sim_time is done or when workload is done \n\n```\n\nWe refer to the example `example/main.py` for an example how to use SFC TSS.\n\nYou may also want to create your own scheduler. Simply subclass `BaseScheduler`.\nCheck example schedulers in `sfctss.scheduler.examples` for more information. \n\nYou may also want to create a custom workload provider like a pcap replay. Your workload provider must implement `WorkloadGenerator`.\n\n## Full Example\n\nStart running the example experiment \n\n```Bash\n./example/main.py --show-progress\n```\n\nor with more debugging output or activated statistics dumps\n\n```Bash\n# show progress, write csv logs, active some of the statistics\n./example/main.py --show-progres --write-statistics output --statistics-server --statistics-polling-sfi --statistics-latency-cdf-buckets 50\n\n# with more verbose bash ui\n./example/main.py --show-ui\n\n# debugging mode\n./example/main.py -v --interactive \n```\n\nThe example provides more options...\n\n```\nusage: main.py [-h] [-v] [--sim-time SIM_TIME] [--no-workload-reloading] [--dry] [--show-progress] [--interactive] [--show-ui]\n               [--write-statistics STATISTICS_FILENAME] [--statistics-overview] [--statistics-packets] [--statistics-server] [--statistics-polling-sfi]\n               [--statistics-polling-sff] [--statistics-polling-server] [--statistics-polling-overview]\n               [--statistics-polling-interval STATISTICS_POLLING_INTERVAL] [--statistics-latency-cdf-buckets STATISTICS_PACKETS_CDF_BUCKETS]\n               [--dump-full-workload]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         verbose output\n  --sim-time SIM_TIME   set simulation time (in ns)\n  --no-workload-reloading\n                        if set, load full workload before simulation starts\n  --dry                 do not run the simulation, but test everything if it is functional\n  --show-progress       shows the progress during running the simulation\n  --interactive         run each simulation tick one after another\n  --show-ui             shows a simple bash-ui when running the simulation\n  --write-statistics STATISTICS_FILENAME\n                        if filename is set, activate statistics\n  --statistics-overview\n                        activate overview statistics\n  --statistics-packets  activate packet statistics\n  --statistics-server   activate server statistics\n  --statistics-polling-sfi\n                        activate sfi polling statistics\n  --statistics-polling-sff\n                        activate sff polling statistics\n  --statistics-polling-server\n                        activate server polling statistics\n  --statistics-polling-overview\n                        activate overview polling statistics\n  --statistics-polling-interval STATISTICS_POLLING_INTERVAL\n                        set statistics polling interval (in ns)\n  --statistics-latency-cdf-buckets STATISTICS_PACKETS_CDF_BUCKETS\n                        activate cdf of packet latencies; set # of buckets for cdf, e.g., 50\n  --dump-full-workload  dumps full workload (full packet dump)\n```\n\n\n# Manual Installation / Contribute\n\nRun one of the following lines \n\n```Bash\n./bootstrap-deps-pypy.sh # recommended option\n./bootstrap-deps.sh # fallback with standard Python\n```\n\nto setup your environment either with [PyPy3](https://pypy.org) or [Python3](https://www.python.org).\nWe **highly** recommend you to use PyPy3.\n\nSimply load your python environment by calling one of the following lines\n\n```Bash\nsource env-pypy/bin/activate\nsource env/bin/activate\n```\n\nWe are happy for all kind of contributions, including bug fixes and additional features.\n\n\n# Acknowledgement\n\nThis work has been co-funded by the Federal Ministry of Education and Research ([BMBF](https://www.bmbf.de)) Software Campus grant 01IS17050, the German Research Foundation ([DFG](https://www.dfg.de)) as part of the projects B2 and C7 in the Collaborative Research Center (CRC) 1053 “MAKI” and DFG grant 392046569 (61761136014 for NSFC), and the EU H2020 program under grant ICT-815279 “5G-VINNI” and ERC grant FP7-617805 “LiveSoft”. \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mblo/sfctss",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sfctss",
    "package_url": "https://pypi.org/project/sfctss/",
    "platform": "",
    "project_url": "https://pypi.org/project/sfctss/",
    "project_urls": {
      "Homepage": "https://github.com/mblo/sfctss"
    },
    "release_url": "https://pypi.org/project/sfctss/1.0.0/",
    "requires_dist": [
      "numpy (>=1.19.5)",
      "sortedcontainers (>=2.3.0)",
      "terminaltables (>=3.1.0)"
    ],
    "requires_python": ">=3.6, <4",
    "summary": "A Service Function Chain (SFC) Traffic Scheduling Simulator",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9205447,
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f587968844b4d03762e05d3dba1a0f6fa5de64b5a61ef2a22b15b77de3a14795",
          "md5": "ccab17624ac780574549922bb86893d9",
          "sha256": "573a615f4b40cdfc4a32dc2cbda152475e1a7764d4601d214f6789901415474f"
        },
        "downloads": -1,
        "filename": "sfctss-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ccab17624ac780574549922bb86893d9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 48965,
        "upload_time": "2020-02-03T11:32:06",
        "upload_time_iso_8601": "2020-02-03T11:32:06.296254Z",
        "url": "https://files.pythonhosted.org/packages/f5/87/968844b4d03762e05d3dba1a0f6fa5de64b5a61ef2a22b15b77de3a14795/sfctss-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0074dd18f305832d7ec54f4302083c3da19444c0494284f04d7dcffdfdbd379",
          "md5": "8996cc602725985d8b1cfa95210ce7a5",
          "sha256": "5de639a9e751b21548ab433217859b8890c937791a26a2cafb97ac6eb949fb88"
        },
        "downloads": -1,
        "filename": "sfctss-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8996cc602725985d8b1cfa95210ce7a5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 44239,
        "upload_time": "2020-02-03T11:32:08",
        "upload_time_iso_8601": "2020-02-03T11:32:08.432020Z",
        "url": "https://files.pythonhosted.org/packages/f0/07/4dd18f305832d7ec54f4302083c3da19444c0494284f04d7dcffdfdbd379/sfctss-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e3716634b95e752231d06b0e6d2f196f49c94935f611321a9f48ea4776b0a73",
          "md5": "223a1c5ddec4e13160e8a2ef7eb248f2",
          "sha256": "8318b43316cfd1aa841a19551c446c4fb72d276c344344469a45809e3aab8161"
        },
        "downloads": -1,
        "filename": "sfctss-0.9.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "223a1c5ddec4e13160e8a2ef7eb248f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 49185,
        "upload_time": "2020-10-22T07:05:13",
        "upload_time_iso_8601": "2020-10-22T07:05:13.988984Z",
        "url": "https://files.pythonhosted.org/packages/5e/37/16634b95e752231d06b0e6d2f196f49c94935f611321a9f48ea4776b0a73/sfctss-0.9.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be3915f78e236c1bbfdd7c3c4b1b618b0aeb09a105ce87e955598c6d6dd40ad2",
          "md5": "7e4025e09a6c8f498b4524ae1ee84a4d",
          "sha256": "052f085ea14c5f5c1676247536966803fee99a8e305b25772962955cb12601a0"
        },
        "downloads": -1,
        "filename": "sfctss-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7e4025e09a6c8f498b4524ae1ee84a4d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 44701,
        "upload_time": "2020-10-22T07:05:14",
        "upload_time_iso_8601": "2020-10-22T07:05:14.989333Z",
        "url": "https://files.pythonhosted.org/packages/be/39/15f78e236c1bbfdd7c3c4b1b618b0aeb09a105ce87e955598c6d6dd40ad2/sfctss-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2a0f673b907f49720af83581289abc061c020bd4aabab4834284cf421ea338b",
          "md5": "1b3fc5c75491b64250f7bfe13ba1bcfc",
          "sha256": "e3bcf7b3a461dc0ba9f57e505cb4c5d141848d03b714b1c34b6aeb33128540c6"
        },
        "downloads": -1,
        "filename": "sfctss-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b3fc5c75491b64250f7bfe13ba1bcfc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6, <4",
        "size": 55655,
        "upload_time": "2021-01-22T18:33:12",
        "upload_time_iso_8601": "2021-01-22T18:33:12.703404Z",
        "url": "https://files.pythonhosted.org/packages/d2/a0/f673b907f49720af83581289abc061c020bd4aabab4834284cf421ea338b/sfctss-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4a0c33f8635f407b3dde6a44ee70edbdea124dcc98a17950a2ae1cc2d16ab70",
          "md5": "8bd42d61b4d225e5403ff559c7eff0fe",
          "sha256": "bf8d2aa8fa133216d3a6b1dc7697af6cff60379068811f7743f0c3d52a662d66"
        },
        "downloads": -1,
        "filename": "sfctss-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8bd42d61b4d225e5403ff559c7eff0fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6, <4",
        "size": 51103,
        "upload_time": "2021-01-22T18:33:13",
        "upload_time_iso_8601": "2021-01-22T18:33:13.776759Z",
        "url": "https://files.pythonhosted.org/packages/a4/a0/c33f8635f407b3dde6a44ee70edbdea124dcc98a17950a2ae1cc2d16ab70/sfctss-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2a0f673b907f49720af83581289abc061c020bd4aabab4834284cf421ea338b",
        "md5": "1b3fc5c75491b64250f7bfe13ba1bcfc",
        "sha256": "e3bcf7b3a461dc0ba9f57e505cb4c5d141848d03b714b1c34b6aeb33128540c6"
      },
      "downloads": -1,
      "filename": "sfctss-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1b3fc5c75491b64250f7bfe13ba1bcfc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6, <4",
      "size": 55655,
      "upload_time": "2021-01-22T18:33:12",
      "upload_time_iso_8601": "2021-01-22T18:33:12.703404Z",
      "url": "https://files.pythonhosted.org/packages/d2/a0/f673b907f49720af83581289abc061c020bd4aabab4834284cf421ea338b/sfctss-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a4a0c33f8635f407b3dde6a44ee70edbdea124dcc98a17950a2ae1cc2d16ab70",
        "md5": "8bd42d61b4d225e5403ff559c7eff0fe",
        "sha256": "bf8d2aa8fa133216d3a6b1dc7697af6cff60379068811f7743f0c3d52a662d66"
      },
      "downloads": -1,
      "filename": "sfctss-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8bd42d61b4d225e5403ff559c7eff0fe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6, <4",
      "size": 51103,
      "upload_time": "2021-01-22T18:33:13",
      "upload_time_iso_8601": "2021-01-22T18:33:13.776759Z",
      "url": "https://files.pythonhosted.org/packages/a4/a0/c33f8635f407b3dde6a44ee70edbdea124dcc98a17950a2ae1cc2d16ab70/sfctss-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}