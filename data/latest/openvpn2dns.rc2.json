{
  "info": {
    "author": "Malte Swart",
    "author_email": "mswart@devtation.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2 :: Only",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Communications",
      "Topic :: Internet :: Name Service (DNS)",
      "Topic :: System :: Networking"
    ],
    "description": "OpenVPN 2 DNS\n        =============\n        \n        |Build Status|\n        \n        A pure python DNS server serving the content of OpenVPN status files. It\n        parses the status files of the OpenVPN server to extract the connected\n        clients and their IP addresses. From theses data OpenVPN2DNS creates DNS\n        zones and serving they as DNS server (using Python's twisted module).\n        \n        Afterwards all connected VPN clients have valid DNS entries.\n        \n        The server supports zone transfers (``AXFR``) and zone update notifies\n        and can therefore used as master server.\n        \n        Installation\n        ------------\n        \n        openvpn2dns depends on:\n        \n        -  Python 2.6 or 2.7 (but Python 2.6 support will likely be dropped in\n           the nearer future)\n        -  ```twisted`` python module <https://pypi.python.org/pypi/Twisted/>`__\n           - versions >= 10 working\n        -  ```IPy`` python module <https://pypi.python.org/pypi/IPy/>`__ - at\n           least versions >= 0.73 working\n        \n        On most system all dependencies are available via the package manager -\n        look for package names like ``python``/``python2``/``python2.7``,\n        ``python-twisted``/``python-twisted-names`` and ``python-ipy``. The\n        twisted packages contains multiple submodules but openvpn2dns requires\n        only the ``core`` part and the ``names`` submodule. You do not need to\n        install the whole suite.\n        \n        Currently openvpn2dns is only available via source (but I administrative\n        thinking about building Debian/Ubuntu packages), e.g.:\n        \n        ::\n        \n            git clone git://github.com/mswart/openvpn2dns.git\n        \n        If python is installed the needed Python modules can also be installed\n        via the Python Package Index and package manager like ``pip``\\ (or\n        ``easy_install``), e.g.:\n        \n        ::\n        \n            pip install -r requirements.txt\n            # or\n            pip install twisted IPy\n        \n        Configuration\n        -------------\n        \n        openvpn2dns uses a INI-style file configuration but handles and supports\n        multiple option with the same name per section.\n        \n        ``options`` section - general option\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n        \n        -  **listen**: Specify on which address and port the DNS server should\n           listen. You must specify the a port (DNS default port is 53). This\n           option can be specify multiple times.\n        -  **instance**: Define one OpenVPN instance (one status file that\n           should be served). The value is the name for the zone and the section\n           that contains options above this instance.\n        -  **daemon**: Whether detach and run as daemon\n        -  **drop-privileges**: Whether drop privileges after opened sockets.\n           User and group information needed (via option or config)\n        -  **user**: User id or name to use when dropping privileges after\n           opened sockets (see drop-privileges option)\n        -  **group**: Group id or name to use when dropping privileges after\n           opened sockets (see drop-privileges option)\n        -  **log**: Log destination (file name, ``-`` for stdout or ``syslog``\n           for syslog)\n        -  **pidfile**: Name of the pidfile, recommended for daemon mode\n        -  **reactor**: twisted reactor type for twisted\n        \n        instance section\n        ~~~~~~~~~~~~~~~~\n        \n        This section is used to set up the zone and e.g. ``SOA`` entry for the\n        zone. The section and all its options must be specified.\n        \n        -  **rname**: A which specifies the mailbox of the person responsible\n           for this zone.\n        -  **mname**: The of the name server that was the original or primary\n           source of data for this zone.\n        -  **refresh**: A 32 bit time interval in seconds before the zone should\n           be refreshed. String suffixes like ``h``, ``d`` are supported.\n        -  **retry**: A 32 bit time interval that should elapse before a failed\n           refresh should be retried. String suffixes like ``h``, ``d`` are\n           supported.\n        -  **expire**: A 32 bit time value that specifies the upper limit on the\n           time interval that can elapse before the zone is no longer\n           authoritative. String suffixes like ``h``, ``d`` are supported.\n        -  **minimum**: The unsigned 32 bit minimum TTL field that should be\n           exported with any RR from this zone. String suffixes like ``h``,\n           ``d`` are supported.\n        \n        The following options define needed information about the OpenVPN\n        server:\n        \n        -  **status\\_file**: The path to the OpenVPN status file.\n        -  **subnet4**: ipv4 subnet of the OpenVPN server. If set openvpn2dns\n           serves also reverse lookups.\n        -  **subnet6**: ipv6 subnet of the OpenVPN server. If set openvpn2dns\n           serves also reverse lookups.\n        \n        They can be specify directly or extracted from the OpenVPN server\n        configuration:\n        \n        -  **server\\_config**: The path to the OpenVPN configuration file. The\n           values for **status\\_file**, **subnet4** and **subnet6** are\n           extracted.\n        \n        The following options are optional:\n        \n        -  **notify**: A DNS name or IP address for other DNS server which\n           working as slaves and should be notified via the DNS notify extension\n           above zone updates. This option can be specify multiple times.\n        -  **add\\_entries**: name of one entry section thats records should be\n           added to the zone of this instance.\n        -  **add\\_forward\\_entries**: name of one entry section thats records\n           should be added to the forward zone of this instance.\n        -  **add\\_backward\\_entries**: name of one entry section thats records\n           should be added to the backward zone (IPv4 and IPv6) of this\n           instance.\n        -  **add\\_backward4\\_entries**: name of one entry section thats records\n           should be added to the backward zone (only IPv4) of this instance.\n        -  **add\\_backward6\\_entries**: name of one entry section thats records\n           should be added to the backward zone (only IPv6) of this instance.\n        -  **suffix**: zone suffix that should be appended to all certificate\n           common names - needed if the common names are no full-qualified\n           domain names. The shortcut ``@`` references the zone name.\n        \n        entry section - additional (static) DNS entries\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n        \n        This section contains entries that should be added to the dynamic\n        entries from the status file. This should be administrative entries like\n        name servers (NS) or entries for the VPN server.\n        \n        The option name is the record name. If the name does not end with a dot,\n        the zone name is appended. The ``@`` means the zone name itself.\n        \n        All common types like ``A``, ``AAAA``, ``MX``, ``NS`` are supported.\n        \n        Example\n        ~~~~~~~\n        \n        .. code:: ini\n        \n            [options]\n            # run settings:\n            listen = 192.0.2.1:53\n            listen = 198.51.100.1:53\n            # instances\n            instances = vpn.example.org\n            [vpn.example.org]\n            # data source:\n            status_file = /etc/openvpn/openvpn-status.log\n            # notify slaves:\n            notify = dns.example.org\n            notify = dns-backup.example.com\n            # zone SOA options:\n            rname = dns@example.org\n            mname = vpn.example.org\n            refresh = 1h\n            retry = 5m\n            expire = 2h\n            minimum = 5m\n            # additional zone entries:\n            add_entries = nameservers\n            add_entries = vpn-server\n            [nameservers]\n            @ = NS dns.example.org\n            @ = NS dns-backup.example.com\n            [vpn-server]\n            @ = A 203.0.113.1\n        \n        Starting\n        --------\n        \n        Launch openvpn2dns with ``openvpn2dns`` and pass the file name of your\n        configuration file:\n        \n        ::\n        \n            python2 openvpn2dns <configuration file like openvpn2dns.ini>\n        \n        The most options setting can be specified by command line options. To\n        get a complete list and help run:\n        \n        ::\n        \n            python2 openvpn2dns --help\n        \n        Production Usage\n        ----------------\n        \n        ``openvpn2dns`` is stable and usable for production service.\n        \n        To handle a higher query count run openvpn2dns as hidden master DNS\n        server and use optimized DNS server to handle the query load.\n        ``openvpn2dns`` supports zone transfers and the ``notify`` option pushes\n        chances fast to slave servers.\n        \n        The server is written python and security holes are therefore unlikely.\n        But to be sure it is recommended to specify a ``user`` and ``group`` and\n        set ``drop-privileges`` to ``true``: the process drops all privileges\n        after opened the network sockets.\n        \n        **Warning:** ``openvpn2dns`` does no access control. All clients can\n        query every data from the DNS zone or transfer the entire zone. Adjust\n        the firewall to block unwanted connections.\n        \n        The ``scripts`` directory contains a ``upstart`` and a ``init.d``\n        script. You can copy them. You may want to replace the launch and\n        configuration path inside the scripts.\n        \n        **Info:** The ``init.d`` passes ``--daemon=yes`` and\n        ``--pidfile=/var/run/openvpn2dns.pid`` via command line arguments.\n        Values for these options inside the configuration file have no effect.\n        \n        Contributing\n        ------------\n        \n        1. Fork it\n        2. Create your feature branch (``git checkout -b my-new-feature``)\n        3. Add specs for your feature\n        4. Implement your feature\n        5. Commit your changes (``git commit -am 'Add some feature'``)\n        6. Push to the branch (``git push origin my-new-feature``)\n        7. Create new Pull Request\n        \n        License\n        -------\n        \n        MIT License\n        \n        Copyright (c) 2013 Malte Swart. MIT license, see LICENSE for more\n        details.\n        \n        .. |Build Status| image:: https://travis-ci.org/mswart/openvpn2dns.png?branch=master\n           :target: https://travis-ci.org/mswart/openvpn2dns",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mswart/openvpn2dns",
    "keywords": "openvpn twisted dns",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "openvpn2dns",
    "package_url": "https://pypi.org/project/openvpn2dns/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/openvpn2dns/",
    "project_urls": {
      "Homepage": "https://github.com/mswart/openvpn2dns"
    },
    "release_url": "https://pypi.org/project/openvpn2dns/1.1.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "DNS server in python serving openvpn status files as dns zones",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 1423476,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96862da179b96d652abb813796a460e674242d72dca16fa16868d52f8e03dee1",
          "md5": "fcd252024f23e694225349cb76a13257",
          "sha256": "662e128d35a661b8c486a35c1ca8768995403f2ff29af34e13681d32b6f6306e"
        },
        "downloads": -1,
        "filename": "openvpn2dns-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fcd252024f23e694225349cb76a13257",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15436,
        "upload_time": "2015-02-14T20:31:20",
        "upload_time_iso_8601": "2015-02-14T20:31:20.690893Z",
        "url": "https://files.pythonhosted.org/packages/96/86/2da179b96d652abb813796a460e674242d72dca16fa16868d52f8e03dee1/openvpn2dns-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c09b5a7bb91bdf13084b5196738af56e10af030cb53401e2bf868c627b7edb0f",
          "md5": "2842813cac9ec89897cf70ef9d17c2d8",
          "sha256": "8cc352c6cfcb89ed75cf453c5fc614a7b7e77242f3d777bb701c4710f97b4134"
        },
        "downloads": -1,
        "filename": "openvpn2dns-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2842813cac9ec89897cf70ef9d17c2d8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15770,
        "upload_time": "2015-02-14T20:53:14",
        "upload_time_iso_8601": "2015-02-14T20:53:14.515495Z",
        "url": "https://files.pythonhosted.org/packages/c0/9b/5a7bb91bdf13084b5196738af56e10af030cb53401e2bf868c627b7edb0f/openvpn2dns-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c09b5a7bb91bdf13084b5196738af56e10af030cb53401e2bf868c627b7edb0f",
        "md5": "2842813cac9ec89897cf70ef9d17c2d8",
        "sha256": "8cc352c6cfcb89ed75cf453c5fc614a7b7e77242f3d777bb701c4710f97b4134"
      },
      "downloads": -1,
      "filename": "openvpn2dns-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2842813cac9ec89897cf70ef9d17c2d8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15770,
      "upload_time": "2015-02-14T20:53:14",
      "upload_time_iso_8601": "2015-02-14T20:53:14.515495Z",
      "url": "https://files.pythonhosted.org/packages/c0/9b/5a7bb91bdf13084b5196738af56e10af030cb53401e2bf868c627b7edb0f/openvpn2dns-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}