{
  "info": {
    "author": "Ilya484",
    "author_email": "ucdo854@kemcdo.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3"
    ],
    "description": "# Документация\r\n## Библиотека работает в Python 3.6+ \r\n### Немного терминологии\r\n**Модуль** - это файл с расширением `.py`, находящийся в библиотеке.\r\n\r\nНапример, модуль `constants` - это файл `constants.py`.\r\n\r\n---\r\n### Модуль decorators\r\n#### 1. Декоратор cache\r\nДля чего: *мемоизация работы функции*.\r\n\r\nПример использования:\r\n```python\r\nfrom infEGE import cache\r\n\r\n@cache\r\ndef fib(n):\r\n    if n in {0,1}:\r\n        return 1\r\n    return fib(n - 1) + fib(n - 2)\r\n\r\nfib(50)\r\n```\r\nЕсли убрать `@cache`, то вычисляться будет очень долго.\r\n\r\n---\r\n### Модуль constants\r\nДля чего: *константы для использования в алгоритмах*.\r\n\r\nСодержимое:\r\n```python\r\nE = 2.718281828459045\r\nPI = 3.141592653589793\r\nmaxValue = float('inf')\r\nminValue = float('-inf')\r\n```\r\n---\r\n\r\n### Модуль algebra_logic\r\n#### 1. Функция print_true_table\r\nСинтаксис: **print_true_table(variables: str, expretion: str, value: Union[int, bool, 'all'] = 'all') -> None**\r\n\r\nДля чего: \r\n    \r\n    Вывод таблицы истинности лог.функции expretion от переменных variables.\r\n\r\n    Если value='all', выводятся все строки таблицы;\r\n\r\n    Если value=1 или True, выводятся строки таблицы, где функция истинна;\r\n\r\n    Если value=0 или False, выводятся строки таблицы, где функция ложна.\r\n\r\n    В качестве лог.операций можно использовать обычные операции Python\r\n    или такие эквиваленты:\r\n    {\"&\": \" and \", \"|\": \" or \", \"~\": \" not \", \"->\": \"<=\"}.\r\nПример использования #1:\r\n```python\r\nfrom infEGE import print_true_table\r\n\r\nprint_true_table(\"xy\", \"x->y\", 1)\r\n```\r\nВывод:\r\n```\r\nxy F\r\n00 1\r\n01 1\r\n11 1\r\n```\r\n**Внимание: в Python приоритет <= выше, чем and, or, not! Ставьте скобки!** \r\n\r\nПример использования #2:\r\n```python\r\nfrom infEGE import print_true_table\r\n\r\nprint_true_table(\"xy\", \"x&(y|x)|y\", 0)\r\n```\r\nВывод:\r\n```\r\nxy F\r\n00 0\r\n```\r\n\r\nПример использования #3:\r\n```python\r\nfrom infEGE import print_true_table\r\n\r\nprint_true_table(\"xzy\", \"x or z and (y or not x)\")\r\n```\r\nВывод:\r\n```\r\nxzy F\r\n000 0\r\n001 0\r\n010 1\r\n011 1\r\n100 1\r\n101 1\r\n110 1\r\n111 1\r\n```\r\n---\r\n### Модуль combinatorics\r\n#### 1. Функция permutation_with_repeat\r\nСинтаксис: **permutation_with_repeat(seq: Union[list, tuple, str], repeat: int = 1)**\r\n\r\nДля чего: \r\n\r\n    Возвращает перестановки элкементов итерируемого\r\n    обьекта seq с repeat повторениями.\r\nПример использования:\r\n\r\n```python\r\nfrom infEGE import permutation_with_repeat\r\n\r\nfor el in permutation_with_repeat('123', 2):\r\n    print(el)\r\n```\r\nВывод:\r\n```\r\n('1', '1')\r\n('1', '2')\r\n('1', '3')\r\n('2', '1')\r\n('2', '2')\r\n('2', '3')\r\n('3', '1')\r\n('3', '2')\r\n('3', '3')\r\n```\r\n#### 2. Функция permutations\r\nСинтаксис: **permutations(seq: Union[list, tuple, str]):**\r\n\r\nДля чего: \r\n\r\n    Возвращает перестановки элкементов итерируемого объекта seq.\r\nПример использования:\r\n```python\r\nfrom infEGE import permutations\r\n\r\nfor el in permutations('abc'):\r\n    print(el)\r\n```\r\nВывод:\r\n```\r\nabc\r\nacb\r\nbac\r\nbca\r\ncab\r\ncba\r\n```\r\n---\r\n### Модуль lists_and_other\r\n#### 1. Функция prod\r\nСинтаксис: **prod(seq: Union[list, tuple, set]) -> Union[int, float]**\r\n\r\nДля чего: \r\n\r\n    Возввращает произведение элементов итерируемого объекта seq.\r\nПример использования:\r\n```python\r\nfrom infEGE import prod\r\n\r\nprint(prod([5, 8, 6, 100, 54]))\r\n```\r\nВывод:\r\n```\r\n1296000\r\n```\r\n---\r\n### Модуль string\r\n#### 1. Функция replacing\r\nСинтаксис: **replacing(string: str, substring: str, new_string: str, mode: str = 'обычно', cnt: Union[int, str] = 'all') -> str**\r\n\r\nДля чего: \r\n\r\n    Возвращает строку string с заменённой подстрокой\r\n    substring на  подстроку new_string в количестве cnt.\r\n\r\n    Режим \"обычно\":\r\n                    замена стандартным replace\r\n\r\n    Режим \"целиком\":\r\n                    замена подстроки substring если она не\r\n                    является частью большей подстроки.\r\nПример использования #1:\r\n```python\r\nfrom infEGE import replacing\r\n\r\nprint(replacing(\"Питон плохой тон\", \"тон\", \"нот\"))\r\n```\r\nВывод:\r\n```\r\nПинот плохой нот\r\n```\r\n\r\nПример использования #2:\r\n```python\r\nfrom infEGE import replacing\r\n\r\nprint(replacing(\"Питон плохой тон\", \"тон\", \"нот\", cnt=1))\r\n```\r\nВывод:\r\n```\r\nПинот плохой тон\r\n```\r\n\r\nПример использования #3:\r\n```python\r\nfrom infEGE import replacing\r\n\r\nprint(replacing(\"Питон плохой тон\", \"тон\", \"нот\", \"целиком\"))\r\n```\r\nВывод:\r\n```\r\nПитон плохой нот\r\n```\r\n\r\n#### 2. Функция index_n\r\nСинтаксис: **index_n(string: str, substring: str, n: int = 1) -> int**\r\n\r\nДля чего: \r\n\r\n    Возвращает индекс n-го вхождения СЛЕВА подстроки\r\n    substring в строку string. Если такого вхождения\r\n    нет, возвращается -1000.\r\nПример использования #1:\r\n```python\r\nfrom infEGE import index_n\r\n\r\nprint(index_n(\"01230123\", \"1\"))\r\n```\r\nВывод:\r\n```\r\n1\r\n```\r\n\r\nПример использования #2:\r\n```python\r\nfrom infEGE import index_n\r\n\r\nprint(index_n(\"01230123\", \"1\", 2))\r\n```\r\nВывод:\r\n```\r\n5\r\n```\r\n\r\nПример использования #3:\r\n```python\r\nfrom infEGE import index_n\r\n\r\nprint(index_n(\"01230123\", \"1\", 3))\r\n```\r\nВывод:\r\n```\r\n-1000\r\n```\r\n#### 3. Функция is_number\r\nСинтаксис: **is_number(n: str) -> bool**\r\n\r\nДля чего: \r\n\r\n    Проверяет является ли строка n числом.\r\n    Если да возвращается True, иначе - False.\r\nПример использования #1:\r\n```python\r\nfrom infEGE import is_number\r\n\r\nprint(is_number(\"23\"))\r\n```\r\nВывод:\r\n```\r\nTrue\r\n```\r\n\r\nПример использования #2:\r\n```python\r\nfrom infEGE import is_number\r\n\r\nprint(is_number(\"2n3\"))\r\n```\r\nВывод:\r\n```\r\nFalse\r\n```\r\n---\r\n### Модуль system_count\r\n#### 1. Функция to_base\r\nСинтаксис: **to_base(number: Union[int, str], old_base: int = 10, new_base: int = 10) -> Union[int, str]**\r\n\r\nДля чего: \r\n\r\n    Переводит число number с основанием old_base в число\r\n    с основанием new_base.\r\nПример использования #1:\r\n```python\r\nfrom infEGE import to_base\r\n\r\nprint(to_base(5, new_base=2))\r\n```\r\nВывод:\r\n```\r\n101\r\n```\r\nПример использования #2:\r\n```python\r\nfrom infEGE import to_base\r\n\r\nprint(to_base(15, new_base=16))\r\n```\r\nВывод:\r\n```\r\nF\r\n```\r\nПример использования #3:\r\n```python\r\nfrom infEGE import to_base\r\n\r\nprint(to_base(\"FA32\", old_base=17, new_base=10))\r\n```\r\nВывод:\r\n```\r\n76638\r\n```\r\nПример использования #4:\r\n```python\r\nfrom infEGE import to_base\r\n\r\nprint(to_base(\"FA32\", old_base=17, new_base=6))\r\n```\r\nВывод:\r\n```\r\n1350450\r\n```\r\n---\r\n### Модуль mathematics\r\n#### 1. Функция is_prime\r\nСинтаксис: **is_prime(n: int) -> bool**\r\n\r\nДля чего: \r\n\r\n    Если n - простое, то возващается True, иначе - False.\r\nПример использования #1:\r\n```python\r\nfrom infEGE import is_prime\r\n\r\nprint(is_prime(5))\r\n```\r\nВывод:\r\n```\r\nTrue\r\n```\r\nПример использования #2:\r\n```python\r\nfrom infEGE import is_prime\r\n\r\nprint(is_prime(25))\r\n```\r\nВывод:\r\n```\r\nFalse\r\n```\r\nПример использования #3:\r\n```python\r\nfrom infEGE import is_prime\r\n\r\nprint(is_prime(1))\r\n```\r\nВывод:\r\n```\r\nFalse\r\n```\r\n---\r\n#### 2. Функция is_even\r\nСинтаксис: **is_even(n: int) -> bool**\r\n\r\nДля чего: \r\n\r\n    Если n - чётно, то возващается True, иначе - False.\r\nПример использования #1:\r\n```python\r\nfrom infEGE import is_even\r\n\r\nprint(is_even(12))\r\n```\r\nВывод:\r\n```\r\nTrue\r\n```\r\nПример использования #2:\r\n```python\r\nfrom infEGE import is_even\r\n\r\nprint(is_even(25))\r\n```\r\nВывод:\r\n```\r\nFalse\r\n```\r\n---\r\n#### 3. Функция is_odd\r\nСинтаксис: **is_odd(n: int) -> bool**\r\n\r\nДля чего: \r\n\r\n    Если n - нечётно, то возващается True, иначе - False.\r\nПример использования #1:\r\n```python\r\nfrom infEGE import is_odd\r\n\r\nprint(is_odd(12))\r\n```\r\nВывод:\r\n```\r\nFalse\r\n```\r\nПример использования #2:\r\n```python\r\nfrom infEGE import is_odd\r\n\r\nprint(is_odd(25))\r\n```\r\nВывод:\r\n```\r\nTrue\r\n```\r\n---\r\n#### 4. Функция divided\r\nСинтаксис: **divided(n: int, d: int) -> bool**\r\n\r\nДля чего: \r\n\r\n    Если n нацело делится на d, то возвращается True, иначе - False.\r\nПример использования #1:\r\n```python\r\nfrom infEGE import divided\r\n\r\nprint(divided(12, 5))\r\n```\r\nВывод:\r\n```\r\nFalse\r\n```\r\nПример использования #2:\r\n```python\r\nfrom infEGE import divided\r\n\r\nprint(divided(121, 11))\r\n```\r\nВывод:\r\n```\r\nTrue\r\n```\r\n---\r\n#### 5. Функция not_divisible\r\nСинтаксис: **not_divisible(n: int, d: int) -> bool**\r\n\r\nДля чего: \r\n\r\n    Если n не делится нацело на d, то возвращается True, иначе - False.\r\nПример использования #1:\r\n```python\r\nfrom infEGE import not_divisible\r\n\r\nprint(not_divisible(12, 5))\r\n```\r\nВывод:\r\n```\r\nTrue\r\n```\r\nПример использования #2:\r\n```python\r\nfrom infEGE import not_divisible\r\n\r\nprint(not_divisible(121, 11))\r\n```\r\nВывод:\r\n```\r\nFalse\r\n```\r\n---\r\n#### 6. Функция factorial\r\nСинтаксис: **factorial(n: int) -> int**\r\n\r\nДля чего: \r\n\r\n    Возвращает n! (0! = 1)\r\nПример использования:\r\n```python\r\nfrom infEGE import factorial\r\n\r\nprint(factorial(6))\r\n```\r\nВывод:\r\n```\r\n720\r\n```\r\n---\r\n#### 7. Функция factorize\r\nСинтаксис: **factorize(number: int) -> list**\r\n\r\nДля чего: \r\n\r\n    Возвращает разложение числа number на простые множители в list.\r\nПример использования #1:\r\n```python\r\nfrom infEGE import factorize\r\n\r\nprint(factorize(1))\r\n```\r\nВывод:\r\n```\r\n[]\r\n```\r\nПример использования #2:\r\n```python\r\nfrom infEGE import factorize\r\n\r\nprint(factorize(11))\r\n```\r\nВывод:\r\n```\r\n[11]\r\n```\r\nПример использования #3:\r\n```python\r\nfrom infEGE import factorize\r\n\r\nprint(factorize(55))\r\n```\r\nВывод:\r\n```\r\n[5, 11]\r\n```\r\n---\r\n#### 8. Функция divisors\r\nСинтаксис: **divisors(n: int) -> list**\r\n\r\nДля чего: \r\n\r\n    Возвращает все натуральные делители числа n на интервале (1; n).\r\nПример использования #1:\r\n```python\r\nfrom infEGE import divisors\r\n\r\nprint(divisors(1))\r\n```\r\nВывод:\r\n```\r\n[]\r\n```\r\nПример использования #2:\r\n```python\r\nfrom infEGE import divisors\r\n\r\nprint(divisors(720))\r\n```\r\nВывод:\r\n```\r\n[2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 30, 36, 40, 45, 48, 60, 72, 80, 90, 120, 144, 180, 240, 360]\r\n```\r\n---\r\n#### 9. Функция fib\r\nСинтаксис: **fib(n: int) -> int**\r\n\r\nДля чего: \r\n\r\n    Возвращает n-ый член последовательности Фибоначчи. Нумерация с 0.\r\nПример использования #1:\r\n```python\r\nfrom infEGE import fib\r\n\r\nprint(fib(0))\r\n```\r\nВывод:\r\n```\r\n0\r\n```\r\nПример использования #2:\r\n```python\r\nfrom infEGE import fib\r\n\r\nprint(fib(1))\r\n```\r\nВывод:\r\n```\r\n1\r\n```\r\nПример использования #3:\r\n```python\r\nfrom infEGE import fib\r\n\r\nprint(fib(2))\r\n```\r\nВывод:\r\n```\r\n1\r\n```\r\nПример использования #4:\r\n```python\r\nfrom infEGE import fib\r\n\r\nprint(fib(3))\r\n```\r\nВывод:\r\n```\r\n2\r\n```\r\nПример использования #5:\r\n```python\r\nfrom infEGE import fib\r\n\r\nprint(fib(2001))\r\n```\r\nВывод:\r\n```\r\n6835702259575806647045396549170580107055408029365524565407553367798082454408054014954534318953113802726603726769523447478238192192714526677939943338306101405105414819705664090901813637296453767095528104868264704914433529355579148731044685634135487735897954629842516947101494253575869699893400976539545740214819819151952085089538422954565146720383752121972115725761141759114990448978941370030912401573418221496592822626\r\n```\r\n**Примечание**: Данный алгоритм работает быстрее рекурсивного! Асимптоматика: O(N)\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ilya484/infEGE",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "infEGE",
    "package_url": "https://pypi.org/project/infEGE/",
    "platform": null,
    "project_url": "https://pypi.org/project/infEGE/",
    "project_urls": {
      "Homepage": "https://github.com/Ilya484/infEGE"
    },
    "release_url": "https://pypi.org/project/infEGE/1.9.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Библиотека для ЕГЭ по информатике",
    "version": "1.9.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14908283,
  "releases": {
    "1.9.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aecb898ccd42e23c8277651176e436dfb0893c3fa7d9bee3787d5a90f8eb91a6",
          "md5": "6656ee289012b59cae67c9819894cdeb",
          "sha256": "8f31b1e9481a445fabab7dd2ae0e80848d3630adac9dc445ebc973c3b553a511"
        },
        "downloads": -1,
        "filename": "infEGE-1.9.7.tar.gz",
        "has_sig": false,
        "md5_digest": "6656ee289012b59cae67c9819894cdeb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10587,
        "upload_time": "2022-08-27T10:15:29",
        "upload_time_iso_8601": "2022-08-27T10:15:29.043426Z",
        "url": "https://files.pythonhosted.org/packages/ae/cb/898ccd42e23c8277651176e436dfb0893c3fa7d9bee3787d5a90f8eb91a6/infEGE-1.9.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aecb898ccd42e23c8277651176e436dfb0893c3fa7d9bee3787d5a90f8eb91a6",
        "md5": "6656ee289012b59cae67c9819894cdeb",
        "sha256": "8f31b1e9481a445fabab7dd2ae0e80848d3630adac9dc445ebc973c3b553a511"
      },
      "downloads": -1,
      "filename": "infEGE-1.9.7.tar.gz",
      "has_sig": false,
      "md5_digest": "6656ee289012b59cae67c9819894cdeb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10587,
      "upload_time": "2022-08-27T10:15:29",
      "upload_time_iso_8601": "2022-08-27T10:15:29.043426Z",
      "url": "https://files.pythonhosted.org/packages/ae/cb/898ccd42e23c8277651176e436dfb0893c3fa7d9bee3787d5a90f8eb91a6/infEGE-1.9.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}