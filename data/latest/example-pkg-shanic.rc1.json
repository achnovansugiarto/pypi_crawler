{
  "info": {
    "author": "Example Author",
    "author_email": "author@example.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Example Package\n\nThis is a simple example package. You can use\n[Github-flavored Markdown](https://guides.github.com/features/mastering-markdown/)\nto write your content.\n\n---\n\n### Tutorial Information - all rights reserved :)\nTutorial from: https://packaging.python.org/tutorials/packaging-projects/ :\n```\nPackaging Python Projects\nThis tutorial walks you through how to package a simple Python project. It will show you how to add the necessary files and structure to create the package, how to build the package, and how to upload it to the Python Package Index.\n\nTip If you have trouble running the commands in this tutorial, please copy the command and its output, then open an issue on the packaging-problems repository on GitHub. We’ll do our best to help you!\nSome of the commands require a newer version of pip, so start by making sure you have the latest version installed:\n\n\nUnix/macOS\npython3 -m pip install --upgrade pip\n\nWindows\nA simple project\nThis tutorial uses a simple project named example_package. We recommend following this tutorial as-is using this project, before packaging your own project.\n\nCreate the following file structure locally:\n\npackaging_tutorial/\n└── src/\n    └── example_package/\n        ├── __init__.py\n        └── example.py\n__init__.py is required to import the directory as a package, and should be empty.\n\nexample.py is an example of a module within the package that could contain the logic (functions, classes, constants, etc.) of your package. Open that file and enter the following content:\n\ndef add_one(number):\n    return number + 1\nIf you are unfamiliar with Python’s modules and import packages, take a few minutes to read over the Python documentation for packages and modules.\n\nOnce you create this structure, you’ll want to run all of the commands in this tutorial within the packaging_tutorial directory.\n\nCreating the package files\nYou will now add files that are used to prepare the project for distribution. When you’re done, the project structure will look like this:\n\npackaging_tutorial/\n├── LICENSE\n├── pyproject.toml\n├── README.md\n├── setup.cfg\n├── src/\n│   └── example_package/\n│       ├── __init__.py\n│       └── example.py\n└── tests/\nCreating a test directory\ntests/ is a placeholder for test files. Leave it empty for now.\n\nCreating pyproject.toml\npyproject.toml tells build tools (like pip and build) what is required to build your project. This tutorial uses setuptools, so open pyproject.toml and enter the following content:\n\n[build-system]\nrequires = [\n    \"setuptools>=42\",\n    \"wheel\"\n]\nbuild-backend = \"setuptools.build_meta\"\nbuild-system.requires gives a list of packages that are needed to build your package. Listing something here will only make it available during the build, not after it is installed.\n\nbuild-system.build-backend is the name of Python object that will be used to perform the build. If you were to use a different build system, such as flit or poetry, those would go here, and the configuration details would be completely different than the setuptools configuration described below.\n\nSee PEP 517 and PEP 518 for background and details.\n\nConfiguring metadata\nThere are two types of metadata: static and dynamic.\n\nStatic metadata (setup.cfg): guaranteed to be the same every time. This is simpler, easier to read, and avoids many common errors, like encoding errors.\n\nDynamic metadata (setup.py): possibly non-deterministic. Any items that are dynamic or determined at install-time, as well as extension modules or extensions to setuptools, need to go into setup.py.\n\nStatic metadata (setup.cfg) should be preferred. Dynamic metadata (setup.py) should be used only as an escape hatch when absolutely necessary. setup.py used to be required, but can be omitted with newer versions of setuptools and pip.\n\n\nsetup.cfg (static)\nsetup.cfg is the configuration file for setuptools. It tells setuptools about your package (such as the name and version) as well as which code files to include. Eventually much of this configuration may be able to move to pyproject.toml.\n\nOpen setup.cfg and enter the following content. Change the name to include your username; this ensures that you have a unique package name and that your package doesn’t conflict with packages uploaded by other people following this tutorial.\n\n[metadata]\nname = example-pkg-YOUR-USERNAME-HERE\nversion = 0.0.1\nauthor = Example Author\nauthor_email = author@example.com\ndescription = A small example package\nlong_description = file: README.md\nlong_description_content_type = text/markdown\nurl = https://github.com/pypa/sampleproject\nproject_urls =\n    Bug Tracker = https://github.com/pypa/sampleproject/issues\nclassifiers =\n    Programming Language :: Python :: 3\n    License :: OSI Approved :: MIT License\n    Operating System :: OS Independent\n\n[options]\npackage_dir =\n    = src\npackages = find:\npython_requires = >=3.6\n\n[options.packages.find]\nwhere = src\nThere are a variety of metadata and options supported here. This is in configparser format; do not place quotes around values. This example package uses a relatively minimal set of metadata:\n\nname is the distribution name of your package. This can be any name as long as it only contains letters, numbers, _ , and -. It also must not already be taken on pypi.org. Be sure to update this with your username, as this ensures you won’t try to upload a package with the same name as one which already exists.\n\nversion is the package version. See PEP 440 for more details on versions. You can use file: or attr: directives to read from a file or package attribute.\n\nauthor and author_email are used to identify the author of the package.\n\ndescription is a short, one-sentence summary of the package.\n\nlong_description is a detailed description of the package. This is shown on the package detail page on the Python Package Index. In this case, the long description is loaded from README.md (which is a common pattern) using the file: directive.\n\nlong_description_content_type tells the index what type of markup is used for the long description. In this case, it’s Markdown.\n\nurl is the URL for the homepage of the project. For many projects, this will just be a link to GitHub, GitLab, Bitbucket, or similar code hosting service.\n\nproject_urls lets you list any number of extra links to show on PyPI. Generally this could be to documentation, issue trackers, etc.\n\nclassifiers gives the index and pip some additional metadata about your package. In this case, the package is only compatible with Python 3, is licensed under the MIT license, and is OS-independent. You should always include at least which version(s) of Python your package works on, which license your package is available under, and which operating systems your package will work on. For a complete list of classifiers, see https://pypi.org/classifiers/.\n\nIn the options category, we have controls for setuptools itself:\n\npackage_dir is a mapping of package names and directories. An empty package name represents the “root package” — the directory in the project that contains all Python source files for the package — so in this case the src directory is designated the root package.\n\npackages is a list of all Python import packages that should be included in the distribution package. Instead of listing each package manually, we can use the find: directive to automatically discover all packages and subpackages and options.packages.find to specify the package_dir to use. In this case, the list of packages will be example_package as that’s the only package present.\n\npython_requires gives the versions of Python supported by your project. Installers like pip will look back through older versions of packages until it finds one that has a matching Python version.\n\nThere are many more than the ones mentioned here. See Packaging and distributing projects for more details.\n\n\nsetup.py (dynamic)\nCreating README.md\nOpen README.md and enter the following content. You can customize this if you’d like.\n\n# Example Package\n\nThis is a simple example package. You can use\n[Github-flavored Markdown](https://guides.github.com/features/mastering-markdown/)\nto write your content.\nBecause our configuration loads README.md to provide a long_description, README.md must be included along with your code when you generate a source distribution. Newer versions of setuptools will do this automatically.\n\nCreating a LICENSE\nIt’s important for every package uploaded to the Python Package Index to include a license. This tells users who install your package the terms under which they can use your package. For help picking a license, see https://choosealicense.com/. Once you have chosen a license, open LICENSE and enter the license text. For example, if you had chosen the MIT license:\n\nCopyright (c) 2018 The Python Packaging Authority\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\nIncluding other files\nThe files listed above will be included automatically in your source distribution. If you want to control what goes in this explicitly, see Including files in source distributions with MANIFEST.in.\n\nThe final built distribution will have the Python files in the discovered or listed Python packages. If you want to control what goes here, such as to add data files, see Including Data Files from the setuptools docs.\n\nGenerating distribution archives\nThe next step is to generate distribution packages for the package. These are archives that are uploaded to the Python Package Index and can be installed by pip.\n\nMake sure you have the latest version of PyPA’s build installed:\n\n\nUnix/macOS\npython3 -m pip install --upgrade build\n\nWindows\nTip If you have trouble installing these, see the Installing Packages tutorial.\nNow run this command from the same directory where pyproject.toml is located:\n\n\nUnix/macOS\npython3 -m build\n\nWindows\nThis command should output a lot of text and once completed should generate two files in the dist directory:\n\ndist/\n  example_package_YOUR_USERNAME_HERE-0.0.1-py3-none-any.whl\n  example_package_YOUR_USERNAME_HERE-0.0.1.tar.gz\nThe tar.gz file is a source archive whereas the .whl file is a built distribution. Newer pip versions preferentially install built distributions, but will fall back to source archives if needed. You should always upload a source archive and provide built archives for the platforms your project is compatible with. In this case, our example package is compatible with Python on any platform so only one built distribution is needed.\n\nUploading the distribution archives\nFinally, it’s time to upload your package to the Python Package Index!\n\nThe first thing you’ll need to do is register an account on TestPyPI, which is a separate instance of the package index intended for testing and experimentation. It’s great for things like this tutorial where we don’t necessarily want to upload to the real index. To register an account, go to https://test.pypi.org/account/register/ and complete the steps on that page. You will also need to verify your email address before you’re able to upload any packages. For more details, see Using TestPyPI.\n\nTo securely upload your project, you’ll need a PyPI API token. Create one at https://test.pypi.org/manage/account/#api-tokens, setting the “Scope” to “Entire account”. Don’t close the page until you have copied and saved the token — you won’t see that token again.\n\nNow that you are registered, you can use twine to upload the distribution packages. You’ll need to install Twine:\n\n\nUnix/macOS\npython3 -m pip install --upgrade twine\n\nWindows\nOnce installed, run Twine to upload all of the archives under dist:\n\n\nUnix/macOS\npython3 -m twine upload --repository testpypi dist/*\n\nWindows\nYou will be prompted for a username and password. For the username, use __token__. For the password, use the token value, including the pypi- prefix.\n\nAfter the command completes, you should see output similar to this:\n\nUploading distributions to https://test.pypi.org/legacy/\nEnter your username: [your username]\nEnter your password:\nUploading example_package_YOUR_USERNAME_HERE-0.0.1-py3-none-any.whl\n100%|█████████████████████| 4.65k/4.65k [00:01<00:00, 2.88kB/s]\nUploading example_package_YOUR_USERNAME_HERE-0.0.1.tar.gz\n100%|█████████████████████| 4.25k/4.25k [00:01<00:00, 3.05kB/s]\nOnce uploaded your package should be viewable on TestPyPI, for example, https://test.pypi.org/project/example-pkg-YOUR-USERNAME-HERE\n\nInstalling your newly uploaded package\nYou can use pip to install your package and verify that it works. Create a virtual environment and install your package from TestPyPI:\n\n\nUnix/macOS\npython3 -m pip install --index-url https://test.pypi.org/simple/ --no-deps example-pkg-YOUR-USERNAME-HERE\n\nWindows\nMake sure to specify your username in the package name!\n\npip should install the package from TestPyPI and the output should look something like this:\n\nCollecting example-pkg-YOUR-USERNAME-HERE\n  Downloading https://test-files.pythonhosted.org/packages/.../example-pkg-YOUR-USERNAME-HERE-0.0.1-py3-none-any.whl\nInstalling collected packages: example-pkg-YOUR-USERNAME-HERE\nSuccessfully installed example-pkg-YOUR-USERNAME-HERE-0.0.1\nNote This example uses --index-url flag to specify TestPyPI instead of live PyPI. Additionally, it specifies --no-deps. Since TestPyPI doesn’t have the same packages as the live PyPI, it’s possible that attempting to install dependencies may fail or install something unexpected. While our example package doesn’t have any dependencies, it’s a good practice to avoid installing dependencies when using TestPyPI.\nYou can test that it was installed correctly by importing the package. Make sure you’re still in your virtual environment, then run Python:\n\n\nUnix/macOS\npython3\n\nWindows\nand import the package:\n\n>>> from example_package import example\n>>> example.add_one(2)\n3\nNote that the import package is example_package regardless of what name you gave your distribution package in setup.cfg or setup.py (in this case, example-pkg-YOUR-USERNAME-HERE).\n\nNext steps\nCongratulations, you’ve packaged and distributed a Python project! ✨ 🍰 ✨\n\nKeep in mind that this tutorial showed you how to upload your package to Test PyPI, which isn’t a permanent storage. The Test system occasionally deletes packages and accounts. It is best to use TestPyPI for testing and experiments like this tutorial.\n\nWhen you are ready to upload a real package to the Python Package Index you can do much the same as you did in this tutorial, but with these important differences:\n\nChoose a memorable and unique name for your package. You don’t have to append your username as you did in the tutorial.\n\nRegister an account on https://pypi.org - note that these are two separate servers and the login details from the test server are not shared with the main server.\n\nUse twine upload dist/* to upload your package and enter your credentials for the account you registered on the real PyPI. Now that you’re uploading the package in production, you don’t need to specify --repository; the package will upload to https://pypi.org/ by default.\n\nInstall your package from the real PyPI using python3 -m pip install [your-package].\n\nAt this point if you want to read more on packaging Python libraries here are some things you can do:\n\nRead more about using setuptools to package libraries in Packaging and distributing projects.\n\nRead about Packaging binary extensions.\n\nConsider alternatives to setuptools such as flit, hatch, and poetry.\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pypa/sampleproject",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "example-pkg-shanic",
    "package_url": "https://pypi.org/project/example-pkg-shanic/",
    "platform": "",
    "project_url": "https://pypi.org/project/example-pkg-shanic/",
    "project_urls": {
      "Bug Tracker": "https://github.com/pypa/sampleproject/issues",
      "Homepage": "https://github.com/pypa/sampleproject"
    },
    "release_url": "https://pypi.org/project/example-pkg-shanic/0.0.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A small example package",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11668618,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dec84c2938363d2716856a6bef3f314b9720b10fea5041474ad10274f46f95c",
          "md5": "75f275c0b2dd023e458605351f4f1587",
          "sha256": "6717d0b672426630fa47d09da85b42fe763f1673f98381b6f6c797b6d29ccd2b"
        },
        "downloads": -1,
        "filename": "example_pkg_shanic-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75f275c0b2dd023e458605351f4f1587",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8561,
        "upload_time": "2021-10-08T19:31:09",
        "upload_time_iso_8601": "2021-10-08T19:31:09.644945Z",
        "url": "https://files.pythonhosted.org/packages/1d/ec/84c2938363d2716856a6bef3f314b9720b10fea5041474ad10274f46f95c/example_pkg_shanic-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a84f87fef9affef934a00dfc8d0bea5c98fe42262645850a2623ed7299e5e9f8",
          "md5": "40293bc53d2d5802e1e4dfcc9d802cb6",
          "sha256": "b3dec8dd3af8a6055c984f7510a12971ef788763a10785c29efca9fedeb798c7"
        },
        "downloads": -1,
        "filename": "example-pkg-shanic-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "40293bc53d2d5802e1e4dfcc9d802cb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8001,
        "upload_time": "2021-10-08T19:31:12",
        "upload_time_iso_8601": "2021-10-08T19:31:12.700872Z",
        "url": "https://files.pythonhosted.org/packages/a8/4f/87fef9affef934a00dfc8d0bea5c98fe42262645850a2623ed7299e5e9f8/example-pkg-shanic-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1dec84c2938363d2716856a6bef3f314b9720b10fea5041474ad10274f46f95c",
        "md5": "75f275c0b2dd023e458605351f4f1587",
        "sha256": "6717d0b672426630fa47d09da85b42fe763f1673f98381b6f6c797b6d29ccd2b"
      },
      "downloads": -1,
      "filename": "example_pkg_shanic-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "75f275c0b2dd023e458605351f4f1587",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8561,
      "upload_time": "2021-10-08T19:31:09",
      "upload_time_iso_8601": "2021-10-08T19:31:09.644945Z",
      "url": "https://files.pythonhosted.org/packages/1d/ec/84c2938363d2716856a6bef3f314b9720b10fea5041474ad10274f46f95c/example_pkg_shanic-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a84f87fef9affef934a00dfc8d0bea5c98fe42262645850a2623ed7299e5e9f8",
        "md5": "40293bc53d2d5802e1e4dfcc9d802cb6",
        "sha256": "b3dec8dd3af8a6055c984f7510a12971ef788763a10785c29efca9fedeb798c7"
      },
      "downloads": -1,
      "filename": "example-pkg-shanic-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "40293bc53d2d5802e1e4dfcc9d802cb6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 8001,
      "upload_time": "2021-10-08T19:31:12",
      "upload_time_iso_8601": "2021-10-08T19:31:12.700872Z",
      "url": "https://files.pythonhosted.org/packages/a8/4f/87fef9affef934a00dfc8d0bea5c98fe42262645850a2623ed7299e5e9f8/example-pkg-shanic-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}