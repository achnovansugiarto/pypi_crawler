{
  "info": {
    "author": "Krishnavyshak R",
    "author_email": "krishnavyshak.dev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![The painless way to store session data](https://raw.githubusercontent.com/KrishnaVyshak/storr/main/storr%20cover.png)\n# storr\n### *The painless way to store session data*\n\n`storr` is a Python library for providing a simple and secure way to store session data in a file. With `storr`, you can easily store and retrieve data without worrying about sensitive information being exposed in plain text. `storr` encrypts your data using the `cryptography`  package, ensuring that only authorized parties can access it. Plus, the encrypted data is stored in a file that's protected by your operating system's permissions, providing an additional layer of security. So, whether you're working on a personal project or a professional application, `storr` can help you keep your data secure.\n\n\n## Installation\n\n\nYou can install `storr` using `pip`, the Python package manager:\n\n```bash\npip install storr\n``` \n\n## Usage\n\n### Initialization\n\nTo initialize a `SecureStorage` object, you need to provide a `session_id` parameter. This is a unique identifier for the session. Additionally, you can provide a `file_path` parameter to specify the location of the session file, and a `key` parameter to specify the encryption key.\n\nIf you don't provide a `key` parameter, a new encryption key will be generated automatically.\n\n```python\nfrom storr import SecureStorage\n\nsession_id = \"my-session-id\"\nstorage = SecureStorage(session_id)\n``` \n\n### Storing Data\n\nTo store data in the session, use the `set` method of the `SecureStorage` object. This method takes two parameters: the name of the data (a string), and the value of the data (any type).\n\n```python\nmy_var = \"John Doe\"\nstorage.set(\"name\", my_var)\n``` \n\n### Retrieving Data\n\nTo retrieve data from the session, use the `get` method of the `SecureStorage` object. This method takes one parameter: the name of the data to retrieve (a string).\n\n```python\nmy_var = storage.get(\"name\")\n```\n\nIf the requested data does not exist in the session, the `get` method will return `None`.\n\n### Advanced Usage\n\n#### Custom File Path\n\nIf you want to store the session data in a file other than the default file location, you can provide a `file_path` parameter when initializing the `SecureStorage` object.\n\n```python\nsession_id = \"my-session-id\"\nfile_path = \"/path/to/custom/session.json\"\nstorage = SecureStorage(session_id, file_path)\n``` \n\n#### Custom Encryption Key\n\nIf you want to use a custom encryption key, you can provide a `key` parameter when initializing the `SecureStorage` object.\n\n```python\nfrom storr import SecureStorage\nimport base64\nimport secrets\n\n# create a session ID for the current user (you could use any string here)\nsession_id = '123'\n\n# Generate 32 bytes of random data\ndata = secrets.token_bytes(32)\n\n# Encode the data using base64url encoding\nkey = base64.urlsafe_b64encode(data)\n\n# create an instance of the SecureStorage class for the session\n#create a 32 urlsafe base64-encoded bytes key\nstorage = SecureStorage(session_id, key=key)\n``` \n\n## Example\n\nHere's a basic example usage of `storr`:\n\n```python\nfrom storr import SecureStorage\n\n# initialize the storage with a session ID\nstorage = SecureStorage(session_id='123')\n\n# store a value\nstorage.set('name', 'John Doe')\n\n# retrieve a value\nname = storage.get('name')\n\n# print the value\nprint(name)  # Output: John Doe` \n```\n\nIn the above example, we created a new `SecureStorage` object with a session ID of `'123'`. We then stored the name `'John Doe'` under the key `'name'` and retrieved it back using the same key.\n\n### Using a custom file path\n\nYou can also specify a custom file path for the session data file by passing in the `file_path` parameter to the `SecureStorage` constructor. Here's an example:\n\n```python\nimport storr\n\n# Create a SecureStorage instance with a custom file path\nstorage = storr.SecureStorage('my_session', file_path='/path/to/my/session.json')\n\n# Set a value\nstorage.set('name', 'John Doe')\n\n# Get a value\nname = storage.get('name')\nprint(name)  # Output: John Doe` \n```\n\n### Using a custom encryption key\n\nIf you want to use a custom encryption key for the session data, you can pass it in as a parameter to the `SecureStorage` constructor. Here's an example:\n\n```python\nimport storr\nimport base64\nimport secrets\n\n# Generate 32 bytes of random data\ndata = secrets.token_bytes(32)\n\n# Encode the data using base64url encoding\nmyKey = base64.urlsafe_b64encode(data)\n\n# Create a SecureStorage instance with the custom key\nstorage = storr.SecureStorage('my_session', key=myKey)\n\n# Set a value\nstorage.set('name', 'John Doe')\n\n# Get a value\nname = storage.get('name')\nprint(name)  # Output: John Doe\n```\n\n### Handling missing or invalid values\n\nIf you try to get a value that doesn't exist, the `get` method will return `None`. You can use this to handle missing or invalid values in your code. Here's an example:\n\n```python\nimport storr\n\n# Create a SecureStorage instance\nstorage = storr.SecureStorage('my_session')\n\n# Try to get a value that doesn't exist\nname = storage.get('name')\n\nif name is None:\n    print('Name not found')\nelse:\n    print('Name:', name)\n```\nWe hope these examples help you understand the different features of `storr` and how to use them in your own code.\n\n## Security\n\n`storr` uses the Fernet symmetric encryption algorithm to encrypt all session data. The encryption key is generated automatically, but you can also provide a custom encryption key for added security.\n\n## Version\n### **1.0.0** - *`Latest`*\n\nThis is the first version of `storr`. In future versions, new and advanced features will be added to make session storage even more secure and flexible.\n\n## Conclusion\n\nThis marks the end of the first version of `storr`. We hope that you find it useful for your needs. Please note that this is an open-source project, and we welcome contributions and feedback from the community.\n\nIn future versions, we plan to add new and advanced features to make it even more secure and useful. If you have any suggestions, please feel free to open an issue on the project's GitHub repository or contribute directly to the codebase.\n\nThank you for using `storr`. We hope it serves you well.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/KrishaVyshak/storr",
    "keywords": "secure storage,session management,session data,encryption,data security,data privacy,data storage,data protection,data access,data retrieval,data encryption,data decryption,Fernet encryption,Python module,PyPI,session,storr,storing,store",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "storr",
    "package_url": "https://pypi.org/project/storr/",
    "platform": null,
    "project_url": "https://pypi.org/project/storr/",
    "project_urls": {
      "Homepage": "https://github.com/KrishaVyshak/storr"
    },
    "release_url": "https://pypi.org/project/storr/1.0.0/",
    "requires_dist": [
      "cryptography"
    ],
    "requires_python": "",
    "summary": "A painless way to store session data",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16914283,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2219209915f959910396cc874a660969788800d5781469c8bd704376b840f997",
          "md5": "73d9432c767043f409d80e59b137b64d",
          "sha256": "815c103f5201d8db38c92dd651809fcd1f48e2aac4a37d5948eb621e53809985"
        },
        "downloads": -1,
        "filename": "storr-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73d9432c767043f409d80e59b137b64d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5248,
        "upload_time": "2023-02-18T11:59:58",
        "upload_time_iso_8601": "2023-02-18T11:59:58.272224Z",
        "url": "https://files.pythonhosted.org/packages/22/19/209915f959910396cc874a660969788800d5781469c8bd704376b840f997/storr-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2219209915f959910396cc874a660969788800d5781469c8bd704376b840f997",
        "md5": "73d9432c767043f409d80e59b137b64d",
        "sha256": "815c103f5201d8db38c92dd651809fcd1f48e2aac4a37d5948eb621e53809985"
      },
      "downloads": -1,
      "filename": "storr-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "73d9432c767043f409d80e59b137b64d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5248,
      "upload_time": "2023-02-18T11:59:58",
      "upload_time_iso_8601": "2023-02-18T11:59:58.272224Z",
      "url": "https://files.pythonhosted.org/packages/22/19/209915f959910396cc874a660969788800d5781469c8bd704376b840f997/storr-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}