{
  "info": {
    "author": "Kolapo Olamidun",
    "author_email": "kolapoolamidun@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# py-dojah\n\nAn API wrapper(Library) for dojah.io API. It takes away manual calling of the API endpoints in python by making use of classes and functions.\n\nDojah API allows you to make use of their various services like messaging services, Bills services, Crypto services and others\n\n## Installation\nThe library has been uploaded on PYPI, you can install it from the command line by running:\n\n```\npip install py-dojah\n```\n\n## Usage\n\nTo use this library, import it like this:\n\n```\nfrom pydojah.dojah import PyDojah\n```\n\nYou have to initialize the class you just imported, and you can do that with:\n\n```\nclass_object = PyDojah(app_id, secret_key, sandbox=False)\n```\n\n* app_id is the ID of the app you created in your dojah dashboard.\n\n* secret_key is the secret_key given to you by dojah once you sign up\n\n* sandbox is to indicate which environment you are calling the endpoints from, default is False which means you are calling them in production, if you set it to true it means you are calling them in development.\n\nNOTE: some endpoints only work in production environment, so if you want to test them, remember to change your sandbox value\n\n## Get wallet balance\n\nTo get your wallet balance, simply do the following:\n\n```\nresult = class_object.get_balance()\n\nprint(result)\n```\nremember that class_object is the variable name we gave to the class we instantiated above, we simply are just accessing the method(get_balance()) that will return our wallet balance from Dojah\n\n## Crypto Functions\n\nIf you want to create a crypto wallet, you can do so by calling the create_crypto_wallet method like this:\n\n```\nresult = class_object.create_crypto_wallet(\"BTC\")\n\nprint(result)\n```\nThis method takes in the wallet type e.g BTC, ETH etc....Only BTC and LTC are the wallet types supported in sandbox environment.\n\nTo get details of your crypto wallet, you can do so by calling the crypto_wallet_details method like this:\n\n```\nresult = class_object.crypto_wallet_details(\"wallet_id\")\n\nprint(result)\n```\n\nThis method also takes in an argument which is the wallet_id, remember to replace \"wallet_id\" with your own wallet id\n\nYou can also send crypto to another address of the same currency using the send_crypto method:\n\n```\nresult = class_object.send_crypto(\"sender wallet id\",  amount, \"recipient wallet address\")\n\nprint(result)\n```\nRemember to replace sender wallet id, amount which is an integer and recipient wallet address with the right values.\n\nIf you have more than one wallet of the same cryptocurrency, you can send crypto from one address to another using send_crypto_to_your_wallet() function.\nIt takes in the amount - an integer that you want to send, recipient wallet id i.e the id of your other wallet and the sender wallet id i.e the id of your wallet from which you are sending from. Both recipient and sender wallet id are strings.\n\n\nTo get the details of a crypto transaction you have made, you can call the crypto_transaction_detail method. It takes in the transaction id which can be gotten from the output of send_crypto method:\n\n```\nresult = class_object.crypto_transaction_detail(\"transaction_id\")\n\nprint(result)\n```\n\n## Airtime and Data Functions\nTo buy airtime, make use of the airtime() method. The airtime method takes in amount - an integer, and destination - a string which is the number you want to recharge.\n\n```\nresult = class_object.airtime(100, \"08012345678\")\nprint(result)\n\n```\n\nTo buy data, make use of the data() method. The data method takes in plan which is the bundle you want to subscribe to, and destination - a string which is the number you want to recharge.\n\n```\nresult = class_object.data(\"data_plan\", \"destination\")\nprint(result)\n```\nRemember to replace \"data_plan\" with its value, same for destination.\n\nlist of data plans can be gotten by calling the data_plan() method like this:\n\n```\nresult = class_object.data_plan()\nprint(result)\n```\n\n## OTP and Messaging\nYou can also use this library to send messages and OTP. To send otp, you can call the send_otp() method like this:\n\n```\nresult = class_object.send_otp(\"sender_id\", \"destination\", [\"whatsapp\", \"sms\", \"voice\"], priority=True, expiry=5, length=5)\nprint(result)\n```\n\n* sender_id - a string is the sender id associated with your dojah account, you can request for one using request_for_sender_id(sender_id) method where sender_id is the what you'd like your sender_id to be, it could be your company name or any name you like. For example:\n\n```\nresult = class_object.request_for_sender_id(\"Py-Dojah\")\nprint(result)\n```\nFor the purose of development, you can use \"Dojah\" as the sender id\n\nNote that this will send DOJAH a mail about your request and could take them some time before they get back to you.\nYou can also get all the sender id associated with your dojah account if you have more than one with get_sender_id() method like this:\n\n```\nresult = class_object.get_sender_id()\nprint(result)\n```\n* destination - a string is the number you want to send the OTP code to.\n* The list containing \"whatsapp\", \"sms\", and \"voice\" are the channels with which the destination number can receive the OTP. You can use either of the options, or any two you like or all the options. \nNote that if you will be using whatsapp as a channel be sure to use whatsapp number as the destination.\n* Priority kwargs just tells dojah to treat the request as a priority. It is an optional argument, if you do not give it a boolean value, it defaults to True.\n* expiry is a key word argument for how long you want the OTP to be valid, it is optional, i.e if you don't include it as an argument, the default expiry is used which is 10 minutes.\n* length is also a key word argument that defines how many characters you want the OTP to have, it is also optional i.e if it is not included in the as an argument the default 6 characters will be used.\n\nTo validate OTP, make use of the check_otp() method, like this:\n\n```\nresult = class_object.check_otp(code, reference_id)\nprint(result)\n```\n\n* code is the OTP code you want to validate\n* reference_id is the reference returned as a response when you called ```\nsend_otp()\n```\n\nTo send sms or whatsapp message, call ```\nsend_sms_or_whatsapp()\n``` \nlike this:\n\n```\nresult = class_object.send_sms_or_whatsapp(channel, message, destination, sender_id)\nprint(result)\n```\n\n* channel is a string that indicates where you want message to be sent to; either or any of \"whatsapp\", \"sms\" can be used.\n* message - a string...the actual message you want to send.\n* destination - a string. The number you want the message to be sent to.\n* sender_id - a string is your sender id\n\nTo get the status of your message i.e to know whether it has been sent or not, use \n```\nget_message_status()\n```\nlike this:\n\n```result = class_object.get_message_status(message_id)\nprint(result)\n```\nmessage_id can be gotten from the response of send_sms_or_whatsapp()\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Olamidun/py-dojah",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-dojah",
    "package_url": "https://pypi.org/project/py-dojah/",
    "platform": "",
    "project_url": "https://pypi.org/project/py-dojah/",
    "project_urls": {
      "Documentation": "https://github.com/Olamidun/py-dojah/blob/master/README.md",
      "Homepage": "https://github.com/Olamidun/py-dojah"
    },
    "release_url": "https://pypi.org/project/py-dojah/1.0.1/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "An API wrapper for dojah.io API",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9826290,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2a0baf0b56bd83c33827f380a4cbbe277b9c0c6e2b347bdda6ccb6d57528c65",
          "md5": "f5b6431b53b257d9c947154862b4ea48",
          "sha256": "6e136ab105157af456e4f471d1345dba403a553295de54db6c8be30ebebe4869"
        },
        "downloads": -1,
        "filename": "py_dojah-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5b6431b53b257d9c947154862b4ea48",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7058,
        "upload_time": "2021-03-20T01:10:27",
        "upload_time_iso_8601": "2021-03-20T01:10:27.561819Z",
        "url": "https://files.pythonhosted.org/packages/b2/a0/baf0b56bd83c33827f380a4cbbe277b9c0c6e2b347bdda6ccb6d57528c65/py_dojah-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "544e81512066d32748acbee6e947075e7d5033ea57c927f78fa46e5437eb9c94",
          "md5": "c71134fd66801a2606da6e54046a751f",
          "sha256": "e5a14d020ed565d93711f340cff4a50d3a756dc4e817e7f62bcabdc685154865"
        },
        "downloads": -1,
        "filename": "py_dojah-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c71134fd66801a2606da6e54046a751f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5874,
        "upload_time": "2021-03-20T01:10:29",
        "upload_time_iso_8601": "2021-03-20T01:10:29.226880Z",
        "url": "https://files.pythonhosted.org/packages/54/4e/81512066d32748acbee6e947075e7d5033ea57c927f78fa46e5437eb9c94/py_dojah-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2a0baf0b56bd83c33827f380a4cbbe277b9c0c6e2b347bdda6ccb6d57528c65",
        "md5": "f5b6431b53b257d9c947154862b4ea48",
        "sha256": "6e136ab105157af456e4f471d1345dba403a553295de54db6c8be30ebebe4869"
      },
      "downloads": -1,
      "filename": "py_dojah-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f5b6431b53b257d9c947154862b4ea48",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7058,
      "upload_time": "2021-03-20T01:10:27",
      "upload_time_iso_8601": "2021-03-20T01:10:27.561819Z",
      "url": "https://files.pythonhosted.org/packages/b2/a0/baf0b56bd83c33827f380a4cbbe277b9c0c6e2b347bdda6ccb6d57528c65/py_dojah-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "544e81512066d32748acbee6e947075e7d5033ea57c927f78fa46e5437eb9c94",
        "md5": "c71134fd66801a2606da6e54046a751f",
        "sha256": "e5a14d020ed565d93711f340cff4a50d3a756dc4e817e7f62bcabdc685154865"
      },
      "downloads": -1,
      "filename": "py_dojah-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c71134fd66801a2606da6e54046a751f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 5874,
      "upload_time": "2021-03-20T01:10:29",
      "upload_time_iso_8601": "2021-03-20T01:10:29.226880Z",
      "url": "https://files.pythonhosted.org/packages/54/4e/81512066d32748acbee6e947075e7d5033ea57c927f78fa46e5437eb9c94/py_dojah-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}