{
  "info": {
    "author": "shigebeyond",
    "author_email": "772910474@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "[GitHub](https://github.com/shigebeyond/ExcelBoot) | [Gitee](https://gitee.com/shigebeyond/ExcelBoot)\n\n# ExcelBoot - yaml驱动Excel生成\n\n## 概述\n许多伙伴日常中有很多excel制作的重复性的工作，譬如\n1. 将数据库中的表与字段导出为excel，作为数据结构交付文档；\n2. 统计单张表的数据，并导出为excel\n3. 统计几张表的数据，拼接起来，并导出为excel\n4. 统计单个库的数据，并导出为excel \n5. 统计几个库的数据，拼接起来，并导出为excel \n6. 从几个excel中读取数据，加工，并导出为excel\n7. 从json url中读取数据，加工，并导出为excel\n8. 从库、excel、json url等多个数据源中读取数据，加工，并导出为excel\n9. 各种样式调整，如列宽、行高、字体、颜色等等\n10. 根据数据库数据来生成绘图, 如折线图/条形图/饼图等\n\n这些excel制作的工作繁杂，而且重复性高，可以考虑通过写代码(python)方式来生成excel；\n\n但是大部分伙伴开发能力不足，因此创作了ExcelBoot工具，支持通过yaml配置excel生成步骤（虽然不用写代码，但还是需要写yaml，还是有一定的学习门槛）；\n\n框架通过编写简单的yaml, 就可以执行一系列复杂的excel操作步骤, 如sql查询/sql导出/列变换/定位行、列、单元格/设置样式/修改行高列宽/增删行列/合并单元格/插入图片/插入文件/插入plot绘图/打印变量等，极大的简化了伙伴编写自动化测试脚本的工作量与工作难度，大幅提高人效；\n\n框架通过提供类似python`for`/`if`/`break`语义的步骤动作，赋予伙伴极大的开发能力与灵活性，能适用于广泛的测试场景。\n\n框架提供`include`机制，用来加载并执行其他的步骤yaml，一方面是功能解耦，方便分工，一方面是功能复用，提高效率与质量，从而推进测试整体的工程化。\n\n## 特性\n1. 底层excel操作基于 pandas 与 openpyxl 库来实现 \n2. 使用 selenium-requests 扩展来处理post请求与上传请求\n3. 支持通过yaml来配置执行的步骤，简化了生成代码的开发:\n每个步骤可以有多个动作，但单个步骤中动作名不能相同（yaml语法要求）;\n动作代表excel上的一种操作，如switch_sheet/export_df等等;\n4. 支持类似python`for`/`if`/`break`语义的步骤动作，灵活适应各种场景\n5. 支持`include`引用其他的yaml配置文件，以便解耦与复用\n\n## todo\n1. 支持更多的动作\n\n## 安装\n```\npip3 install ExcelBoot\n```\n\n安装后会生成命令`ExcelBoot`;\n\n注： 对于深度deepin-linux系统，生成的命令放在目录`~/.local/bin`，建议将该目录添加到环境变量`PATH`中，如\n```\nexport PATH=\"$PATH:/home/shi/.local/bin\"\n```\n\n## 使用\n```\n# 1 执行单个文件\nExcelBoot 步骤配置文件.yml\n\n# 2 执行多个文件\nExcelBoot 步骤配置文件1.yml 步骤配置文件2.yml ...\n\n# 3 执行单个目录, 即执行该目录下所有的yml文件\nExcelBoot 步骤配置目录\n\n# 4 执行单个目录下的指定模式的文件\nExcelBoot 步骤配置目录/step-*.yml\n```\n\n如执行 `ExcelBoot example/step-dbschema.yml`，输出如下\n```\nshi@shi-PC:[/home/shi/code/python/ExcelBoot]: ExcelBoot example/step-dbschema.yml \n2022-12-06 19:08:17,916 - boot - DEBUG - Load and run step file: /ohome/shi/code/python/ExcelBoot/example/step-dbschema.yml\n2022-12-06 19:08:17,921 - boot - DEBUG - handle action: connect_db={'ip': '192.168.62.200', 'port': 3306, 'dbname': 'test', 'user': 'root', 'password': 'root', 'echo_sql': True}\n2022-12-06 19:08:17,937 - boot - DEBUG - handle action: start_edit=data/test数据结构.xlsx\n2022-12-06 19:08:17,938 - boot - DEBUG - handle action: switch_sheet=目录\n2022-12-06 19:08:17,938 - boot - DEBUG - handle action: query_db={'tables': \"SELECT\\n    TABLE_COMMENT as 表注释,\\n    TABLE_NAME as 表名\\nFROM\\n    information_schema. TABLES\\nWHERE\\n    TABLE_SCHEMA = 'test'\\n\"}\n2022-12-06 19:08:17,938 - boot - DEBUG - SELECT\n    TABLE_COMMENT as 表注释,\n    TABLE_NAME as 表名\nFROM\n    information_schema. TABLES\nWHERE\n    TABLE_SCHEMA = 'test'\n......\n```\n命令会自动操作并生成excel\n\n## 步骤配置文件及demo\n用于指定多个步骤, 示例见源码 [example](example) 目录下的文件;\n\n顶级的元素是步骤;\n\n每个步骤里有多个动作(如switch_sheet/export_df)，如果动作有重名，就另外新开一个步骤写动作，这是由yaml语法限制导致的，但不影响步骤执行。\n\n简单贴出2个demo\n1. 导出数据库中的表与字段: 详见 [example/step-dbschema.yml](example/step-dbschema.yml)\n\n2. 根据sql来生成各种plot绘图, 支持1 line 折线图 2 bar 条形图 3 barh 横向条形图 4 hist 直方图 5 box 箱线图 6 kde 核密度图 7 pie 饼图;\n详见 [example/step-plot.yml](example/step-plot.yml)\n![plot绘图](img/plot.png)\n\n## 配置详解\n支持通过yaml来配置执行的步骤;\n\n每个步骤可以有多个动作，但单个步骤中动作名不能相同（yaml语法要求）;\n\n动作代表excel上的一种操作，如switch_sheet/export_df等等;\n\n下面详细介绍每个动作:\n\n1. print: 打印, 支持输出变量/函数; \n```yaml\n# 调试打印\nprint: \"总申请数=${dyn_data.total_apply}, 剩余份数=${dyn_data.quantity_remain}\"\n```\n\n2. connect_db: 连接mysql数据库\n```yaml\n- connect_db:\n    ip: 192.168.62.200\n    port: 3306\n    dbname: test\n    user: root\n    password: root\n    echo_sql: true\n```\n\n3. start_edit: 开始编辑excel\n```yaml\n- start_edit: data/test数据结构.xlsx\n```\n\n4. end_edit: 结束编辑excel（保存）\n```yaml\n- end_edit:\n```\n\n5. switch_sheet: 切换sheet\n```yaml\n- switch_sheet: 目录\n```\n\n6. query_db: 查询sql, 并将查询结果放到变量中\n```yaml\n- query_db:\n    # 查询结果放到变量tables\n    tables: > # 查询sql\n        SELECT\n            TABLE_COMMENT as 表注释,\n            TABLE_NAME as 表名\n        FROM\n            information_schema.TABLES\n        WHERE\n            TABLE_SCHEMA = 'test'\n```\n\n7. map_df_cols: DataFrame列转换，其中动作名中()包含的是list或DataFrame类型的变量名\n```yaml\n- map_df_cols(tables):\n      # 新列名:每一行执行的函数表达式\n      # 每一行的函数执行结果组成新列，表达式可以带变量，如 $列名，表示该行中指定列的值\n      序号: add_id() # 加行号\n      表链接: link_sheet($表名) # sheet链接\n      搜索: link(链接, http://baidu.com?wd=$表名) # url链接\n```\n\n8. map_cols: 转换sheet列，相当于map_df_cols，差异在于map_df_cols转换的是变量，map_cols转换的是sheet\n```yaml\n- map_cols:\n      header: true # 是否有表头，表示第一行作为列名\n      # 新列名:每一行执行的函数表达式\n      # 每一行的函数执行结果组成新列，表达式可以带变量，如 $列名，表示该行中指定列的值\n      序号: add_id() # 加行号\n      表链接: link_sheet($表名) # sheet链接\n```\n\n9. export_df: 将变量值导出到当前sheet\n```yaml\n- export_df: tables # 导出变量 tables 的值到当前sheet\n```\n\n10. export_db: 将sql查询结果导出到excel\n```yaml\n- export_db: select * from user # 查询sql\n```\n\n11. get_cell_value: 读取单元格的值\n```yaml\n- get_cell_value:\n      # 变量msg取B2单元格的单个值\n      msg: B2\n      # 变量取list/tuple/set/pd.Series类型的值\n      # 变量col_values取B列的多个值（一维数组）\n      col_values: B\n      # 变量row_values取第1行的多个值（一维数组）\n      row_values: 1\n      # 变量boud_values取B1到D2区域的多个值（二维数组）\n      boud_values: B1:D2\n```\n\n12. set_cell_value: 设置单元格的值\n```yaml\n- set_cell_value:\n      B2: txt\n      # 值是变量表达式\n      B4: $msg\n      # 值是list/tuple/set/pd.Series类型的变量\n      B: $col_values\n      1: $row_values\n```\n\n13. cells: 遍历cell设置样式或值, 其中动作名中()包含的是范围字符串, 支持变量表达式\n```yaml\n- cells(A1:C2): # 指定区域的多个单元格\n    # 设置每个单元格的样式\n    fill: red\n- cells(A): # 指定列的多个单元格\n    fill: red\n- cells(1): # 指定行的多个单元格\n    fill: red\n- cells(A1): # 单个单元格\n    fill: red\n```\n\ncell独有的样式\n```yaml\n- cells(A1):\n    value: test # 设置值\n    style: Hyperlink  # 添加超连接样式\n```\n\nrow/col/cell都支持的样式\n```yaml\n- cells(A1):\n- cols(A):\n- rows(1):\n    # 填充颜色\n    fill: red\n    # 字体\n    font:\n        name: 宋体 # 字体类型\n        size: 14 # 字体大小\n        color: FFFF00 # 字体颜色\n        bold: true # 是否加粗\n        italic: true # 是否斜体\n    # 对齐样式\n    alignment:\n        horizontal: center # 水平对齐模式\n        vertical: center # 垂直对齐模式\n        text_rotation: 45 # 旋转角度\n        wrap_text: true # 是否自动换行\n    # 边框\n    border:\n        style: thick # 边线样式：double/mediumDashDotDot/slantDashDot/dashDotDot/dotted/hair/mediumDashed/dashed/dashDot/thin/mediumDashDot/medium/thick\n        color: FFFF0000 # 边线颜色\n```\n\n14. cols: 遍历col设置样式, 其中动作名中()包含的是范围字符串, 支持变量表达式\n```yaml\n- cols(D:E): # 多列\n    fill: blue\n- cols(D): # 单列\n    fill: blue\n```\n\ncol独有的样式\n```yaml\n- cols(D): # 单列\n    width: 40\n```\n\n15. rows: 遍历row设置样式, 其中动作名中()包含的是范围字符串, 支持变量表达式\n```yaml\n- rows(4:5): # 多行\n    fill: green\n- rows(4): # 单行\n    fill: green\n```\n\nrow独有的样式\n```yaml\n- rows(4):\n    height: 40\n```\n\n16. insert_rows: 插入行\n```yaml\n# 在第1行之上插入3行\n- insert_rows: 1, 3\n```\n\n17. insert_cols: 插入列\n```yaml\n# 在第1列之前插入3列\n- insert_cols: 1, 3\n```\n\n18. delete_rows: 删除行\n```yaml\n# 删除第1-4行\n- delete_rows: 1, 3\n```\n\n19. delete_cols: 删除列\n```yaml\n# 删除第1-4列\n- delete_cols: 1, 3\n```\n\n20. merge_cells: 合并单元格\n```yaml\n# 合并 C1 到 D2 区域的单元格\n- merge_cells: C1:D2\n```\n\n21. unmerge_cells: 取消合并单元格\n```yaml\n# 取消合并 C1 到 D2 区域的单元格\n- unmerge_cells: C1:D2\n```\n\n22. insert_image: 插入图片\n```yaml\n- insert_image: \n    # 在A1单元格处, 插入图片\n    A1: a.png\n    C1:\n      image: c.txt\n      size: 100,90 # 宽度,高度\n```\n\n23. insert_file: 插入文件\n```yaml\n- insert_file: \n    # 在A1单元格处, 插入文件a.txt\n    A1: a.txt\n    C1: c.txt\n```\n\n24. insert_plot: 插入plot绘图, 根据 DataFrame 数据来生成绘图, 图形类型支持: 1 line 折线图 2 bar 条形图 3 barh 横向条形图 4 hist 直方图 5 box 箱线图 6 kde 核密度图 7 pie 饼图 \n```yaml\n# 插入plot绘图\n- insert_plot:\n    A1:\n      df: prices # DataFrame类型的变量名\n      kind: bar # 图形类型支持: 1 line 折线图 2 bar 条形图 3 barh 横向条形图 4 hist 直方图 5 box 箱线图 6 kde 核密度图 7 pie 饼图\n      x: 日期 # x轴列名\n      y: 成交量 # y轴列名,支持多个,用逗号分割,可省(即为所有列)\n```\n\n25. for: 循环; \nfor动作下包含一系列子步骤，表示循环执行这系列子步骤；变量`for_i`记录是第几次迭代（从1开始）,变量`for_v`记录是每次迭代的元素值（仅当是list类型的变量迭代时有效）\n```yaml\n# 循环3次\nfor(3) :\n  # 每次迭代要执行的子步骤\n  - switch_sheet: test\n\n# 循环list类型的变量urls\nfor(urls) :\n  # 每次迭代要执行的子步骤\n  - switch_sheet: test\n\n# 无限循环，直到遇到跳出动作\n# 有变量for_i记录是第几次迭代（从1开始）\nfor:\n  # 每次迭代要执行的子步骤\n  - break_if: for_i>2 # 满足条件则跳出循环\n    switch_sheet: test\n```\n\n26. once: 只执行一次，等价于 `for(1)`; \nonce 结合 moveon_if，可以模拟 python 的 `if` 语法效果\n```yaml\nonce:\n  # 每次迭代要执行的子步骤\n  - moveon_if: for_i<=2 # 满足条件则往下走，否则跳出循环\n    switch_sheet: test\n```\n\n27. break_if: 满足条件则跳出循环; \n只能定义在for/once循环的子步骤中\n```yaml\nbreak_if: for_i>2 # 条件表达式，python语法\n```\n\n28. moveon_if: 满足条件则往下走，否则跳出循环; \n只能定义在for/once循环的子步骤中\n```yaml\nmoveon_if: for_i<=2 # 条件表达式，python语法\n```\n\n29. include: 包含其他步骤文件，如记录公共的步骤，或记录配置数据(如用户名密码); \n```yaml\ninclude: part-common.yml\n```\n\n30. set_vars: 设置变量; \n```yaml\nset_vars:\n  name: shi\n  password: 123456\n  birthday: 5-27\n```\n\n31. print_vars: 打印所有变量; \n```yaml\nprint_vars:\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/shigebeyond/ExcelBoot",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ExcelBoot",
    "package_url": "https://pypi.org/project/ExcelBoot/",
    "platform": null,
    "project_url": "https://pypi.org/project/ExcelBoot/",
    "project_urls": {
      "Homepage": "https://github.com/shigebeyond/ExcelBoot"
    },
    "release_url": "https://pypi.org/project/ExcelBoot/1.0.1/",
    "requires_dist": [
      "PyYAML (==6.0)",
      "jsonpath (==0.82)",
      "lxml (==4.3.2)",
      "mysql-connector (==2.2.9)",
      "pandas (==1.1.5)",
      "SQLAlchemy (==1.4.23)",
      "pyutilb (>=1.0.5)",
      "openpyxl (==3.0.7)"
    ],
    "requires_python": ">=3.6",
    "summary": "ExcelBoot: make an easy way (yaml) to auto generate excel",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16973139,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed67edfd089d32294820dc69d798c23863269627a6fc1487bb528b8584beecfa",
          "md5": "fce418c9e36686b226f876964564d0f7",
          "sha256": "331a431a45db936c26047a0656faa4bba61f1ab6edb727accdd302d00b37083f"
        },
        "downloads": -1,
        "filename": "ExcelBoot-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fce418c9e36686b226f876964564d0f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21582,
        "upload_time": "2022-12-06T11:07:46",
        "upload_time_iso_8601": "2022-12-06T11:07:46.626686Z",
        "url": "https://files.pythonhosted.org/packages/ed/67/edfd089d32294820dc69d798c23863269627a6fc1487bb528b8584beecfa/ExcelBoot-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a6d2bb09873e4253c68687b256c82440d453dbc39663dce27a03dc24621f4bb",
          "md5": "3a27bbf746190c0e9ea5cad8492cf082",
          "sha256": "90f03c1f32bd102091f60d727661facd21c85d4a0aa0ef5b51c4ca1ed0ed2fbf"
        },
        "downloads": -1,
        "filename": "ExcelBoot-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3a27bbf746190c0e9ea5cad8492cf082",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19654,
        "upload_time": "2022-12-06T11:07:49",
        "upload_time_iso_8601": "2022-12-06T11:07:49.633561Z",
        "url": "https://files.pythonhosted.org/packages/1a/6d/2bb09873e4253c68687b256c82440d453dbc39663dce27a03dc24621f4bb/ExcelBoot-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44b7c00b164d49a31450f392d475188e98b43274f4ca82c565aa0bea219b2288",
          "md5": "efb66e078cd074abb9bc9a61f95273a5",
          "sha256": "94386bd25840d9e0329b58ededec94a98333aca88c80ac071e27750dbf050b17"
        },
        "downloads": -1,
        "filename": "ExcelBoot-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "efb66e078cd074abb9bc9a61f95273a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23866,
        "upload_time": "2023-02-22T08:41:43",
        "upload_time_iso_8601": "2023-02-22T08:41:43.546383Z",
        "url": "https://files.pythonhosted.org/packages/44/b7/c00b164d49a31450f392d475188e98b43274f4ca82c565aa0bea219b2288/ExcelBoot-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b5c4138871dc857b4e42c501246300481c7754583bac22af81f17bd837f36e1",
          "md5": "90fd0d52a028266aeffe17dd12468fb5",
          "sha256": "211faf506bf595b5e64a9c47c530e87b6be9806e3319e733dd1d02e8dd44832e"
        },
        "downloads": -1,
        "filename": "ExcelBoot-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "90fd0d52a028266aeffe17dd12468fb5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 21689,
        "upload_time": "2023-02-22T08:41:45",
        "upload_time_iso_8601": "2023-02-22T08:41:45.843619Z",
        "url": "https://files.pythonhosted.org/packages/9b/5c/4138871dc857b4e42c501246300481c7754583bac22af81f17bd837f36e1/ExcelBoot-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "44b7c00b164d49a31450f392d475188e98b43274f4ca82c565aa0bea219b2288",
        "md5": "efb66e078cd074abb9bc9a61f95273a5",
        "sha256": "94386bd25840d9e0329b58ededec94a98333aca88c80ac071e27750dbf050b17"
      },
      "downloads": -1,
      "filename": "ExcelBoot-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "efb66e078cd074abb9bc9a61f95273a5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 23866,
      "upload_time": "2023-02-22T08:41:43",
      "upload_time_iso_8601": "2023-02-22T08:41:43.546383Z",
      "url": "https://files.pythonhosted.org/packages/44/b7/c00b164d49a31450f392d475188e98b43274f4ca82c565aa0bea219b2288/ExcelBoot-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b5c4138871dc857b4e42c501246300481c7754583bac22af81f17bd837f36e1",
        "md5": "90fd0d52a028266aeffe17dd12468fb5",
        "sha256": "211faf506bf595b5e64a9c47c530e87b6be9806e3319e733dd1d02e8dd44832e"
      },
      "downloads": -1,
      "filename": "ExcelBoot-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "90fd0d52a028266aeffe17dd12468fb5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 21689,
      "upload_time": "2023-02-22T08:41:45",
      "upload_time_iso_8601": "2023-02-22T08:41:45.843619Z",
      "url": "https://files.pythonhosted.org/packages/9b/5c/4138871dc857b4e42c501246300481c7754583bac22af81f17bd837f36e1/ExcelBoot-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}