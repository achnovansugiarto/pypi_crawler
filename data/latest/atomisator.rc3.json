{
  "info": {
    "author": "Tarek Ziade",
    "author_email": "tarek@ziade.org",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==========\nAtomisator\n==========\n\nThe big picture\n===============\n\n`Atomisator` is a generic data processing framework that works\nwith plugins. Its purpose is to provide an engine to build a \ndata processing task. \n\n1. You provide the plugins that does the work.\n2. You describe how to combine them in a configuration file.\n3. Atomisator does the work.\n\nAtomisator works in two steps:\n\n- Collecting: data is acquired and filtered, then stored.\n- Rendering: stored data is enhanced and rendered.\n\n.. figure:: http://ziade.org/atomisator/atomisator.png\n    :alt: The big picture\n    \n    The big picture.    \n\nQuick Start\n===========\n\nLet's build a Planet with Atomisator !\n\nTo do it, create a configuration file somewhere, \nusing the -c option::\n\n    $ atomisator -c atomisator.cfg\n\nA default configuration file is generated, \nthat looks like this (comments where removed)::\n\n    [atomisator]\n\n    sources = \n        rss http://tarekziade.wordpress.com/atom \n        rss http://digg.com/rss/index.xml\n\n    filters =\n\n    enhancers =\n\n    outputs =\n        rss atomisator.xml http://atomisator.ziade.org/example \"Meta feed\" \"Automatic feed created by Atomisator.\" \n\n    database = sqlite:///atomisator.db\n\nThis file can be interpreted by Atomisator, with the -f option::\n\n    $ atomisator -f /path/to/atomisator.cfg\n    Reading source http://tarekziade.wordpress.com/atom\n    10 entries read.\n    Reading source http://digg.com/rss/index.xml\n    40 entries read.\n    50 total.\n    Writing feed in atomisator.xml\n    Feed ready.\n\nYou can specify the path as a free argument as well::\n\n    $ atomisator /path/to/atomisator.cfg  \n\n`Atomisator` will read the sources, then generate \nan `atomisator.xml` file.\n\nTwo phases process\n::::::::::::::::::\n\nYou can also call separately the process that fills the database::\n\n    $ atomisator -r -f /path/to/atomisator.cfg\n\nIn this case the feed generation will not occur. \n\nThe -g option can be used to generate the xml file on its own::\n\n    $ atomisator -g -f /path/to/atomisator.cfg\n\nThis is useful to read sources and generate the feed within different process and different time basis.\n\nFor other useful options, run::\n\n    $ atomisator --help\n\nMore details\n============\n \nAs said earlier, Atomisator works in two steps:\n\n- Collecting: data is acquired and filtered, then stored.\n- Rendering: stored data is enhanced and rendered.\n\nCollecting data\n:::::::::::::::\n\nCollecting data is done by reading (1) and filtering (2) data.\nThese two steps are done by invoking plugins.\n\nFor example, if you want to get some data from an RSS feed,\nyou can use the `rss` plugin that is provided by default,\nand use it in an Atomisator configuration file::\n\n    ...\n    sources = \n        rss     http://tarekziade.wordpress.com/atom\n        rss     http://digg.com/rss2.xml\n    ...\n\nThis tells Atomisator to look for the `rss` reader plugin,\nand invoke it with the url as an argument. The plugin has to \nreturn entries.\n\nThe next step is to filter collected entries. Filtering means\neither changing the data on the fly, either discarding it.\n\nFor example, if you want to remove all entries that contains\nparticular expressions, you can use the `stopwords` plugin\nthat is provided by default and use it in an Atomisator\nconfiguration file::\n\n    ...\n    filters =\n        stopwords   word_list.txt\n    ...\n\nThis tells atomisator to look for the `stopwords` plugin and\nto invoke it with collected entries. The plugin uses the word\nlist in the pointed file, and look of the data match the \ngiven regular expressions. If so, the data is discarded.\n\nRendering data\n::::::::::::::\n\nAfter the data has been collected, it is stored in a database.\nYou can now render it, using the enhancers (5) and the outputs\n(6) filters. \n\nFor example, if you want to see if an entry correspond to a \nweb page that has been `digged`, you can use the `digg` plugin::\n\n    ...\n    enhancers =\n        digg\n    ...\n\nThis plugin will be invoked by Atomisator, and it will inject \nDigg comments in the data by querying Digg.com via RPC.\n\nLast the output plugins are called for the final step. For\nexample the `rss` output plugin will render the data in an\nRSS 2.0 XML file::\n\n    ...\n    outputs =\n        rss atomisator.xml http://atomisator.ziade.org/example meta \"Automatic feed created by Atomisator.\" \n    ...\n    \nAll the arguments following the plugin name will be sent to it,\nbesides the entries.\n\nAvailable plugins\n=================\n\nXXX to be written\n\nHow to write a plugin\n=====================\n\nXXX to be written",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://atomisator.ziade.org",
    "keywords": "data mining",
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "Atomisator",
    "package_url": "https://pypi.org/project/Atomisator/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/Atomisator/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://atomisator.ziade.org"
    },
    "release_url": "https://pypi.org/project/Atomisator/1.3/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Expert Python Programming - Data processing framework",
    "version": "1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 783801,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "821f6f918e4186882ca55b6a079612f7d20621d9f3fcf2d1926e719c8333a8c2",
          "md5": "4c1bfe50a9e343aad0475c5249f2d6ff",
          "sha256": "f4bfa4e7ab07a4006b58f95b797e87e2b715a2eb0c49af6a224a75664c79a97b"
        },
        "downloads": -1,
        "filename": "Atomisator-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4c1bfe50a9e343aad0475c5249f2d6ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3298,
        "upload_time": "2008-11-03T05:36:01",
        "upload_time_iso_8601": "2008-11-03T05:36:01Z",
        "url": "https://files.pythonhosted.org/packages/82/1f/6f918e4186882ca55b6a079612f7d20621d9f3fcf2d1926e719c8333a8c2/Atomisator-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66a5a78483404e114f2d54ebf724ac98a807732c8776688dd3657f88038755ce",
          "md5": "819bc98336c549643e356da79a80e016",
          "sha256": "1d93b9e43b1afbc58de02dd3ba8abc2a281015faf83b84ed73615a008456b4b8"
        },
        "downloads": -1,
        "filename": "Atomisator-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "819bc98336c549643e356da79a80e016",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3316,
        "upload_time": "2008-11-08T11:51:44",
        "upload_time_iso_8601": "2008-11-08T11:51:44Z",
        "url": "https://files.pythonhosted.org/packages/66/a5/a78483404e114f2d54ebf724ac98a807732c8776688dd3657f88038755ce/Atomisator-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "955b79d0d80b73154d0f0dece28edde47a791986fef0758ba58bd802d82c46fa",
          "md5": "8b3623b305d67179db46f86da2509fd4",
          "sha256": "ab9439c69cbb300f0152e5da33052d8d4bd1a55af49537d9db57dd2dcb7836fd"
        },
        "downloads": -1,
        "filename": "Atomisator-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8b3623b305d67179db46f86da2509fd4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3323,
        "upload_time": "2008-12-06T18:32:36",
        "upload_time_iso_8601": "2008-12-06T18:32:36Z",
        "url": "https://files.pythonhosted.org/packages/95/5b/79d0d80b73154d0f0dece28edde47a791986fef0758ba58bd802d82c46fa/Atomisator-1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "955b79d0d80b73154d0f0dece28edde47a791986fef0758ba58bd802d82c46fa",
        "md5": "8b3623b305d67179db46f86da2509fd4",
        "sha256": "ab9439c69cbb300f0152e5da33052d8d4bd1a55af49537d9db57dd2dcb7836fd"
      },
      "downloads": -1,
      "filename": "Atomisator-1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8b3623b305d67179db46f86da2509fd4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3323,
      "upload_time": "2008-12-06T18:32:36",
      "upload_time_iso_8601": "2008-12-06T18:32:36Z",
      "url": "https://files.pythonhosted.org/packages/95/5b/79d0d80b73154d0f0dece28edde47a791986fef0758ba58bd802d82c46fa/Atomisator-1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}