{
  "info": {
    "author": "",
    "author_email": "Brook Tarekegn Assefa <brooksideas@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# Monte Carlo Simulator\n\n***Monte Carlo Simulator for different board games such as Coin flips ,\nDice rolls , Roman Alphabet ,Card shuffle and many more.***\n\n# Metadata\n\n### Author: Brook Tarekegn Assefa\n\n### Net UD: rnc3mm\n\n### Project name: Monte Carlo Simulator\n\n# Synopsis\n\n### Installation\n\n```commandline\npip install mcgs\n```\n\n### Importing\n\n```python\nfrom montecarlo import Die, Game, Analyzer \n```\n\n### Creating fair dice objects  all of six sides with the faces 1 through 6\n\n```python\nfrom montecarlo import Die\n\nfair_die_faces = [1, 2, 3, 4, 5, 6]\nfair_die = Die(fair_die_faces)\n```\n\n### Create fair coin object with faces H and T\n\n```python\nfrom montecarlo import Die\n\ncoin_faces = ['H', 'T']\nfair_coin = Die(coin_faces)\n```\n\n### Playing Games with two six sided dice\n\n```python\nfrom montecarlo import Die, Game\n\nfair_die_faces = [1, 2, 3, 4, 5, 6]\nfair_die = Die(fair_die_faces)\n\n# Let us Play a game of 10 rolls with 2 fair dice \ndice = []\ndice.extend([fair_die, fair_die])  # Playing a Two Fair dice \ndice_game = Game(dice)\ndice_game.show(dice_game.play(10), 1)  # Displaying results in Wide Dataframe format (see API List Table)\n```\n\n### Playing Games with two coins\n\n```python\nfrom montecarlo import Die, Game\n\ncoin_faces = ['H', 'T']\nfair_coin = Die(coin_faces)\n\n# Let us Play a game of 10 rolls with 2 fair coins \ncoins = []\ncoins.extend([fair_coin, fair_coin])\ncoin_game = Game(coins)\ncoin_game.show(coin_game.play(10), 1) \n```\n\n### Analyzing games with two six sided dice\n\n```python\nfrom montecarlo import Die, Game, Analyzer\n\nfair_die_faces = [1, 2, 3, 4, 5, 6]\nfair_die = Die(fair_die_faces)\n\n# Let us Play a game of 10 rolls with 2 fair dice \n# This is similar for Coins as well\ndice = []\ndice.extend([fair_die, fair_die])\ndice_game = Game(dice)\ndice_game.show(dice_game.play(10), 1)\n\n# Let us now analyze the game\ndice_analyzer = Analyzer(dice_game)\n\n# Get the face count on each roll event \ndice_analyzer.face_count()\n\n# Get how many times the game resulted in all faces being identical (jackpot)\ndice_analyzer.jackpot()\n\n# Compute the distinct/unique combinations of faces rolled along with their counts\ndice_analyzer.combo()\n\n# Compute how may sequence types were rolled and their counts\ndice_analyzer.permutation()\n```\n\n# API description\n\n### Class Table\n\n| Class Name |                                                                                                                             Method Name                                                                                                                             |ttributes |\n|:-----------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:||\n| Die        |                       <table>  <thead>  <tr>  <th> Methods</th>  </tr>  </thead>  <tbody>  <tr>  <td>__init__</td>  </tr> <tr>  <td>change_weight</td> </tr> <tr><td>roll_die</td> </tr> <tr> <td>show_state</td> </tr>   </tbody>  </table>                        |table>  <thead>  <tr>  <th> Attributes </th>   <th> Description</th> </tr>  </thead>  <tbody>  <tr>  <td>faces</td>  <td>Sides of the dice</td>  </tr>    <tr>  <td>weights</td>  <td>Value of assigned to a face</td>  </tr> <tr>  <td>faces_weights_df</td>  <td>Dataframe of faces and weights</td>  </tr>  </tbody>  </table> |\n| Game       |                                              <table>  <thead>  <tr>  <th> Methods</th>  </tr>  </thead>  <tbody>  <tr>  <td>__init__</td>  </tr> <tr>  <td>play</td> </tr> <tr><td>show</td> </tr>  </tbody>  </table>                                              |table>  <thead>  <tr>  <th> Attributes </th>   <th> Description</th> </tr>  </thead>  <tbody>  <tr>  <td>dice</td>  <td>Die Object List passed from Die class</td>  </tr>    <tr>  <td>cols/columns</td>  <td>Headers of the play result dataframe</td>  </tr> <tr>  <td>play_df</td>  <td>Play result dataframe shape N rolls by M dice </td>  </tr>  <tr> <td> number_of_rolls</td>  <td> The number of times games/rolls played </td> </tr> <tr> <td>play_result_df_list</td>  <td> List form of the play result </td> </tr>  </tbody>  </table> | \n| Analyzer   | <table>  <thead>  <tr>  <th> Methods</th>  </tr>  </thead>  <tbody>  <tr>  <td>__init__</td>  </tr> <tr>  <td>face_count</td> </tr> <tr><td>show</td> </tr> <tr><td>jackpot</td> </tr> <tr><td>combo</td> </tr> <tr> <td> permutation</td></tr>  </tbody>  </table> | <table>  <thead>  <tr>  <th> Attributes </th>   <th> Description</th> </tr>  </thead>  <tbody>  <tr>  <td>game</td>  <td>Game Object passed from Game Class</td>  </tr>    <tr>  <td>game_df_data_type</td>  <td>Holds the primitive type of the Dataframe</td>  </tr> <tr>  <td>game_result / game_result_df </td>  <td> Game result Dataframe shape N rolls by M dice played </td>  </tr>  <tr> <td> face_count_df</td>  <td> Face Count result Dataframe shape N rolls by M die faces </td> </tr> <tr> <td>face_list</td>  <td> List form of the face count result </td> </tr> <tr> <td> jackpot_results_df </td> <td> Jackpot result Dataframe shape N of Jackpots rolls by M die faces</td> </tr> <tr> <td> jackpot_list</td> <td> List form of the jackpot result</td> </tr><tr> <td> jack_pot_indices </td> <td> Index values of where the Jackpot occurred in result Dataframe</td> </tr><tr> <td> combination_df</td> <td> Combination result as multi-columned Dataframe shape X of N rolls by Y die faces with Z number of occurrence.</td> </tr><tr> <td>combination_list </td> <td> Tuple zipped List form of the Combination result</td> </tr><tr> <td> permutation_df</td> <td>Permutation result as multi-columned Dataframe shape X of N rolls by Y die faces with Z number of occurrence. </td> </tr><tr> <td>permutation_list</td> <td>\tTuple zipped List form of the Permutation result</td> </tr> </tbody>  </table> |\n\n### Method Table\n\n| Method Name   |                                                                            Description Docs |                                                                                                                                                                                                                                                                                                      Parameters |                                                                                                                                                                                                                                Return values |                                                                                                                                                                                                                                                                                                       Snapshots |\n|:--------------|--------------------------------------------------------------------------------------------:|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n| change_weight |                                                     Change the weight of a single side/face | <table>  <thead>  <tr>  <th> Data types</th>  <th>Defaults</th>  </tr>  </thead>  <tbody>  <tr>  <td>Face Value **integer,string,float** </td> <td> **integer(1) <br/>string(\"\") <br/>float (1.0)** </td></tr> <tr> <td>New Weight **integer,string,float** </td> <td> **1.0**</td> </tr>    </tbody>  </table> |                                                                                                                                                    Assigns a dataframe (integer,string or float ) with faces and the newly assigned weights. |                                                                                                                                                                                       ![Changed Weights](https://user-images.githubusercontent.com/45931201/199298366-0ac1bdb0-d1a4-4f9c-8c02-ff20921b4f13.png) |\n| roll_die      |                                                              Roll the die one or more times |                                                                                                                               <table>  <thead>  <tr>  <th> Data types</th>  <th>Defaults</th>  </tr>  </thead>  <tbody>  <tr>  <td>Number of rolls **integer** </td> <td> **1** </td></tr>   </tbody>  </table> |                                                                                                                                                         Return a list of outcomes similar to the face types      (integer,string or float ). |                                                                                                                                                                                              ![Roll Die](https://user-images.githubusercontent.com/45931201/199302425-8c552f72-55ae-42d6-bc2e-b49e1b44c488.png) |\n| show_state    |                                             Show the die’s current set of faces and weights |                                                                                                                                                                                                                                                                                               Takes no argument |                                                                                                                                                           Returns the dataframe according to the face types      (integer,string or float ). |                                                                                                                                                                                            ![Show State](https://user-images.githubusercontent.com/45931201/199298366-0ac1bdb0-d1a4-4f9c-8c02-ff20921b4f13.png) |\n| play          |                       Rolls the Dice using the inherited roll_die method from the Die class |                                                                                                                               <table>  <thead>  <tr>  <th> Data types</th>  <th>Defaults</th>  </tr>  </thead>  <tbody>  <tr>  <td>Number of Rolls **integer** </td> <td> **1** </td></tr>   </tbody>  </table> |                                                                                                                                                                   Returns the results of the play as a dataframe of shape N rolls by M dice. |                                                                                                                                                                                             ![Play Game](https://user-images.githubusercontent.com/45931201/199354408-b1d7b93f-6eff-4928-8166-31974ca955d7.png) |\n| show          |                                                    Show the results of the most recent play |                     <table>  <thead>  <tr>  <th> Data types</th>  <th>Defaults</th>  </tr>  </thead>  <tbody>  <tr>  <td>Play Result **DataFrame** </td> <td>  **pd.DataFrame()** </td></tr> <tr>  <td>DataFrame table Form <br/>**integer <br/> Wide (1) or Narrow(2)** </td> <td>  **1**   </tbody>  </table> |                                                                                                                                                      Display the result of the latest play result as a dataframe of shape N rolls by M dice. |                                                                                                                                                                                             ![Show Game](https://user-images.githubusercontent.com/45931201/200888215-086e9fde-fea8-4857-9d55-a92b3b3cfb42.png) |\n| face_count    |                       Method to compute how many times a given face is rolled in each event |                                                                                                                                                                                                                                                                                              Takes no arguments |                         Returns the count for each face displayed according to the initial dice face sides given as a dataframe of shape N rolls by M dice. ***See how the above row show dataframe is displayed by face_count dataframe.*** |                                                                                                                                                                                            ![Face Count](https://user-images.githubusercontent.com/45931201/200888515-a287d140-b3a5-4791-a8ff-c9cad96e5765.png) |\n| jackpot       |             Method to compute how many times the game resulted in all faces being identical |                                                                                                                                                                                                                                                                                              Takes no arguments |                                                                ***Returns the count of how many times the game resulted in all faces being identical. You can also access the Jackpot Dataframe using Analyzer Object.jackpot_results_df.*** |                                                    ![Jackpot Result](https://user-images.githubusercontent.com/45931201/200889207-ccdfe9fd-1b4c-4cc7-b8b3-f4c07b1510f7.png)  ![Jackpot Result Dataframe](https://user-images.githubusercontent.com/45931201/200889751-63b701be-37c5-4e53-b80f-d585f5f100d0.png) |\n| combo         | Method to compute the distinct/unique combinations of faces rolled, along with their counts |                                                                                                                                                                                                                                                                                              Takes no arguments | Returns the count of how many times the Game could result in distinct/unique combinations of faces when dice is played/rolled. ***You can also access the full combination multi-columned Dataframe using Analyzer Object.combination_df.*** |                                   ![Combo Result Highlighted Dataframe](https://user-images.githubusercontent.com/45931201/200894051-5c5a9a68-f0b0-4fe3-821e-36c9c6dba7a4.png) ![Combo Result Dataframe](https://user-images.githubusercontent.com/45931201/200894497-3fe89984-0c0e-436c-86d2-314fa6a1796d.png) |\n| permutation   |                       Method to compute how may sequence types were rolled and their counts |                                                                                                                                                                                                                                                                                              Takes no arguments |                                     ***Returns the count of all the possible combinations of faces present when dice is played/rolled. You can also access the permutation multi-columned Dataframe using Analyzer Object.permutation_df.*** |                            ![Permutation Result Header Dataframe](https://user-images.githubusercontent.com/45931201/200895290-3bf86dad-ac67-4aad-94c9-2162f8b7c0ff.png) ![Permutation Result Dataframe](https://user-images.githubusercontent.com/45931201/200895780-a5466d6a-46f5-48dc-bf7e-1f336a83f710.png) |\n\n \n ## [Montecarlo Simulator Demonstration](montecarlo_demo.ipynb)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "alphabet,carlo,coin,dice,flip,generic,monte,monte carlo generic simulator,monte-carlo,monte-carlo-generic,python,simulator",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mcgs",
    "package_url": "https://pypi.org/project/mcgs/",
    "platform": null,
    "project_url": "https://pypi.org/project/mcgs/",
    "project_urls": {
      "Documentation": "https://github.com/brooksideas/monte-carlo-generic-simulator/blob/main/README.md",
      "Issues": "https://github.com/brooksideas/monte-carlo-generic-simulator/issues",
      "Source": "https://github.com/brooksideas/monte-carlo-generic-simulator"
    },
    "release_url": "https://pypi.org/project/mcgs/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A Simple Monte Carlo Simulator for different board games such as Coin flips , Dice rolls , Roman Alphabet , Card shuffle and many more.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15737764,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f3303667995e2fdf036102f6fb8af99cfff3b97372b1758982241f2947c8d45",
          "md5": "1a6f7611c59ec20f8ed610ad9543aa70",
          "sha256": "064f91ff5dc2d541a3e92a509803214b3ccf7f6a391205e36e9aff26aaf56e0f"
        },
        "downloads": -1,
        "filename": "mcgs-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a6f7611c59ec20f8ed610ad9543aa70",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 1986,
        "upload_time": "2022-10-20T16:40:29",
        "upload_time_iso_8601": "2022-10-20T16:40:29.214365Z",
        "url": "https://files.pythonhosted.org/packages/3f/33/03667995e2fdf036102f6fb8af99cfff3b97372b1758982241f2947c8d45/mcgs-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eaa4f8bea60452f338108de578c8080c1f0b89bf7111adf976a905fe606a8fe9",
          "md5": "7fa99466ed4a0285068aa89b825768c5",
          "sha256": "a7b7becd81e075fbe2f35d146c3a05c7c18da9dc54a97045967918cfb5b49bde"
        },
        "downloads": -1,
        "filename": "mcgs-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7fa99466ed4a0285068aa89b825768c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 8081,
        "upload_time": "2022-10-20T16:40:31",
        "upload_time_iso_8601": "2022-10-20T16:40:31.738969Z",
        "url": "https://files.pythonhosted.org/packages/ea/a4/f8bea60452f338108de578c8080c1f0b89bf7111adf976a905fe606a8fe9/mcgs-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aae7382b88adbf153bf5c2a8b972041df992c77f2628ab0cea88d6c2e1098caf",
          "md5": "af31f26fc9d562c1c679594b24f98836",
          "sha256": "1d63582dfeb98b191f37d7a51816dd419660a083592dfd2bcc1a78f8d0131998"
        },
        "downloads": -1,
        "filename": "mcgs-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af31f26fc9d562c1c679594b24f98836",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 4906,
        "upload_time": "2022-11-11T16:57:57",
        "upload_time_iso_8601": "2022-11-11T16:57:57.912043Z",
        "url": "https://files.pythonhosted.org/packages/aa/e7/382b88adbf153bf5c2a8b972041df992c77f2628ab0cea88d6c2e1098caf/mcgs-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "752b7543b4f7c1cee96f6be238d7e28710b26508c484e3a57b42a079749a9be5",
          "md5": "470c319ba33eef776fab2d6be3d0a951",
          "sha256": "13a90c357bfe5a74f693732029fb63ee90cb3f37c5187e649cb183dfb5ea8e1b"
        },
        "downloads": -1,
        "filename": "mcgs-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "470c319ba33eef776fab2d6be3d0a951",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 60452,
        "upload_time": "2022-11-11T16:58:01",
        "upload_time_iso_8601": "2022-11-11T16:58:01.329920Z",
        "url": "https://files.pythonhosted.org/packages/75/2b/7543b4f7c1cee96f6be238d7e28710b26508c484e3a57b42a079749a9be5/mcgs-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "aae7382b88adbf153bf5c2a8b972041df992c77f2628ab0cea88d6c2e1098caf",
        "md5": "af31f26fc9d562c1c679594b24f98836",
        "sha256": "1d63582dfeb98b191f37d7a51816dd419660a083592dfd2bcc1a78f8d0131998"
      },
      "downloads": -1,
      "filename": "mcgs-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "af31f26fc9d562c1c679594b24f98836",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 4906,
      "upload_time": "2022-11-11T16:57:57",
      "upload_time_iso_8601": "2022-11-11T16:57:57.912043Z",
      "url": "https://files.pythonhosted.org/packages/aa/e7/382b88adbf153bf5c2a8b972041df992c77f2628ab0cea88d6c2e1098caf/mcgs-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "752b7543b4f7c1cee96f6be238d7e28710b26508c484e3a57b42a079749a9be5",
        "md5": "470c319ba33eef776fab2d6be3d0a951",
        "sha256": "13a90c357bfe5a74f693732029fb63ee90cb3f37c5187e649cb183dfb5ea8e1b"
      },
      "downloads": -1,
      "filename": "mcgs-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "470c319ba33eef776fab2d6be3d0a951",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 60452,
      "upload_time": "2022-11-11T16:58:01",
      "upload_time_iso_8601": "2022-11-11T16:58:01.329920Z",
      "url": "https://files.pythonhosted.org/packages/75/2b/7543b4f7c1cee96f6be238d7e28710b26508c484e3a57b42a079749a9be5/mcgs-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}