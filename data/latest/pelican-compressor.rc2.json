{
  "info": {
    "author": "DigitalbÃ¼ro",
    "author_email": "post@digitalbuero.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Framework :: Pelican",
      "Framework :: Pelican :: Plugins",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Pelican plugin for [`web-compressor`](https://codeberg.org/digitalbuero/web-compressor)\n\n`pelican-compress` optimizes any Pelican site's `output` - using sane defaults & insane tools.\n\n\n## Installation\n\nIt's available from [PyPi](https://pypi.org/project/pelican-compressor) using a package manager of your choice:\n\n```text\n# Using 'pip'\npip install pelican-compressor\n\n# Using 'poetry'\npoetry add pelican-compressor\n```\n\n\n## Getting started\n\nUsing `pelican-compressor` is straightforward:\n\n\n### Plugin\n\nAfter installing it, the following features are enabled by default:\n- minification of HTML files & web assets, such as CSS/JS, JSON & XML files\n- cachebusting assets, such as CSS/JS, JSON & XML files, fonts and images\n- creating SRI hashes for `link` & `script` tags\n\nSee 'Configuration' below for full control over these processes and even more features, such as\n- optimizing all JPEG & PNG images\n- converting them to modern file formats such as AVIF/WebP\n- building CSP directives (including nonces for inline scripts & styles)\n\n\n### Commandline\n\nInstalling `pelican-compressor` also gives you access to [`webcompr`](https://codeberg.org/digitalbuero/web-compressor), which might be interesting for more flexibility.\n\n\n## Configuration\n\nThe following settings need to be prepended by `COMPRESSOR_` to work, eg for enabling AVIF/WebP generation, define `COMPRESSOR_ENABLE_MODERN_FORMATS = True` [in your settings](https://docs.getpelican.com/en/latest/settings.html#settings) (most likely `pelicanconf.py`).\n\n\n### General\n\n| Setting      | Type   | Default | Description              |\n| ------------ | ------ | ------- | ------------------------ |\n| `BLOCK_LIST` | `list` | `[]`    | Filenames to be excluded |\n\n\n### Asset minification\n\n| Setting             | Type                   | Default            | Description              |\n| ------------------- | ---------------------- | ------------------ | ------------------------ |\n| `ENABLE_MINIFY`     | `bool`                 | `true`             | Enables/disables feature |\n| `MINIFY_MEDIATYPES` | `list` or `re.Pattern` | HTML, CSS, JS, SVG | Files to be minified     |\n| `MINIFY_OPTIONS`    | `dict`                 | see below          | Minification settings    |\n\nFor available minification settings, see [here](https://github.com/tdewolff/minify/tree/master/bindings/py#usage).\n\n\n### Image optimizations\n\n| Setting                 | Type                   | Default | Description                |\n| ----------------------- | ---------------------- | ------- | -------------------------- |\n| `ENABLE_IMAGEOPTIM`     | `bool`                 | `false` | Enables/disables feature   |\n| `IMAGEOPTIM_MEDIATYPES` | `list` or `re.Pattern` | JPG/PNG | Files to be optimized      |\n| `JPEG_QUALITY`          | `int`                  | `85`    | JPEG output quality        |\n| `STRIP_METADATA`        | `bool`                 | `true`  | Whether to remove metadata |\n\n\n### Asset hashing / \"cachebusting\"\n\n| Setting            | Type                   | Default                      | Description                         |\n| ------------------ | ---------------------- | ---------------------------- | ----------------------------------- |\n`ENABLE_HASHING`     | `bool`                 | `true`                       | Enables/disables feature            |\n`HASHING_MEDIATYPES` | `list` or `re.Pattern` | CSS/JS files, fonts & images | Files to be hashed                  |\n`HASH_LENGTH`        | `int`                  | `10`                         | Length of appended hash string      |\n`HASH_MODIFIED`      | `bool`                 | `false`                      | Hash modified time or file contents |\n\n\n### AVIF / WebP generation\n\n| Setting               | Type   | Default           | Description               |\n| --------------------- | ------ | ----------------- | ------------------------- |\n`ENABLE_MODERN_FORMATS` | `bool` | `false`           | Enables/disables feature  |\n`AVIF_SETTINGS`         | `dict` | `{\"quality\": 90}` | AVIF settings (see below) |\n`WEBP_SETTINGS`         | `dict` | `{\"method\": 6}`   | WebP settings (see below) |\n\nAvailable WebP settings:\n- `lossless`\n- `quality`\n- `method`\n- `icc_profile`\n- `exif`\n\nFor more information, see [`Pillow` docs](https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html?highlight=webp#webp).\n\nAvailable AVIF settings:\n- `advanced`\n- `alpha_premultiplied`\n- `append_images`\n- `codec`\n- `duration`\n- `exif`\n- `icc_profile`\n- `qmax`\n- `qmin`\n- `quality`\n- `range`\n- `speed`\n- `subsampling`\n- `tile_rows`\n- `xmp` / `XML:com.adobe.xmp`\n\n**Note**: AVIF generation is provided through a plugin, which [hasn't made it into `Pillow`'s core yet](https://github.com/python-pillow/Pillow/pull/5201), so consider this feature as being experimental!\n\nFor more information (eg default values), check out the `info.get()` calls inside the `_save()` method, courtesy of the [`pillow_avif` plugin](https://github.com/fdintino/pillow-avif-plugin/blob/master/src/pillow_avif/AvifImagePlugin.py#L114).\n\n\n### Subresource integrity\n\n| Setting    | Type  | Default    | Description                 |\n| ---------- | ----- | ---------- | --------------------------- |\n`ENABLE_SRI` | `str` | `true`     | Enables/disables feature    |\n`SRI_DIGEST` | `str` | `'sha512'` | Cryptographic digest to use |\n\n\n### Content security policy\n\n| Setting        | Type   | Default            | Description                 |\n| -------------- | ------ | ------------------ | --------------------------- |\n`ENABLE_CSP`     | `bool` | `false`            | Enables/disables feature    |\n`CSP_DIGEST`     | `str`  | `'sha512'`         | Cryptographic digest to use |\n`CSP_NONCE`      | `str`  | `uuid.uuid4().hex` | Random nonce to be used     |\n`CSP_DIRECTIVES` | `dict` | `{}`               | CSP directives (see below)  |\n\nWhen creating a [content security policy](https://www.w3.org/TR/CSP3), you might want to start with something restrictive and go from there:\n\n```python\nCOMPRESSOR_ENABLE_CSP = True\nCOMPRESSOR_CSP_DIRECTIVES = {\n    \"default-src\": \"none\",\n    \"script-src\": \"'strict-dynamic'\",\n    \"object-src\": \"none\",\n    \"base-uri\": \"none\",\n},\n```\n\n\n### Hooks\n\nIt's also prossible to assign functions to be called right before this plugin (`PRE_HOOK`) or immediately thereafter (`POST_HOOK`), eg for creating image variants (such as placeholders for lazyloading). Each function receives the argument `asset`, which is a tuple consisting of the `pathlib.Path` to each asset file and a `str` representing its MIME type:\n\n```python\n# pelicanconf.py\n\nCOMPRESSOR_PRE_HOOK = lambda asset: (\n    # Unpack asset file & mediatype\n    file_path, mime_type = asset\n\n    # If image file ..\n    if mime_type == \"image/jpeg\":\n        # .. do something\n)\n```\n\n\n## Roadmap\n\n- [x] Update `README.md`\n- [ ] Add tests\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://digitalbuero.eu",
    "keywords": "pelican,pelican-plugin,cache-busting,cachebusting,csp,content-security-policy,fingerprinting,hashing,imageoptim,minification,minifier,minify,optimization,sri,subresource-integrity",
    "license": "GPL-3.0-only",
    "maintainer": "Martin Folkers",
    "maintainer_email": "hello@twobrain.io",
    "name": "pelican-compressor",
    "package_url": "https://pypi.org/project/pelican-compressor/",
    "platform": null,
    "project_url": "https://pypi.org/project/pelican-compressor/",
    "project_urls": {
      "Documentation": "https://docs.getpelican.com",
      "Funding": "https://donate.getpelican.com/",
      "Homepage": "https://digitalbuero.eu",
      "Issue Tracker": "https://codeberg.org/digitalbuero/pelican-compressor/issues",
      "Repository": "https://codeberg.org/digitalbuero/pelican-compressor"
    },
    "release_url": "https://pypi.org/project/pelican-compressor/0.2.1/",
    "requires_dist": [
      "pelican (>=4.5,<5.0)",
      "web-compressor (>=0.4.2,<0.5.0)",
      "Pillow (>=9.2,<10.0); extra == \"images\"",
      "pillow-avif-plugin (>=1.2,<2.0); extra == \"images\"",
      "tdewolff-minify (>=2,<3); extra == \"minify\""
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Pelican plugin wrapper for 'web-compressor'",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15717332,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "25481b514e4d1374d093536ae659b623bb50b2e88bf4b11349d141b5725cfecb",
          "md5": "185b6fb948a78579013ff10f1cc34c83",
          "sha256": "53751d47c4f62dbf59c64ad695c47d32ab81d7aed4d789773201fc10d5dd6cc5"
        },
        "downloads": -1,
        "filename": "pelican_compressor-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "185b6fb948a78579013ff10f1cc34c83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 15565,
        "upload_time": "2022-10-18T22:37:42",
        "upload_time_iso_8601": "2022-10-18T22:37:42.707908Z",
        "url": "https://files.pythonhosted.org/packages/25/48/1b514e4d1374d093536ae659b623bb50b2e88bf4b11349d141b5725cfecb/pelican_compressor-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a13d928f3d5908b61d246e1972a6e6cff6d3022be7bcbe4402ca72e9bd2df6d",
          "md5": "e43fc7f64f97c7b0ba6438cb394a20f2",
          "sha256": "04a4239b21b800d2de6cb457ae3d0c1d68204238e731dbc275cbb60f5bda1a37"
        },
        "downloads": -1,
        "filename": "pelican-compressor-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e43fc7f64f97c7b0ba6438cb394a20f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 16066,
        "upload_time": "2022-10-18T22:37:40",
        "upload_time_iso_8601": "2022-10-18T22:37:40.662859Z",
        "url": "https://files.pythonhosted.org/packages/1a/13/d928f3d5908b61d246e1972a6e6cff6d3022be7bcbe4402ca72e9bd2df6d/pelican-compressor-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f750a5633edd3e6030d5e2f9a3ccea9aedd49fcc5e8472d0975908f90d403528",
          "md5": "ca8daf68e9c63475eb32df6f805d6cc7",
          "sha256": "b86b7af75c175daabf0305739639e38f44050dbeb41d989590b709da39af4024"
        },
        "downloads": -1,
        "filename": "pelican_compressor-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca8daf68e9c63475eb32df6f805d6cc7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 17901,
        "upload_time": "2022-11-09T22:41:09",
        "upload_time_iso_8601": "2022-11-09T22:41:09.841918Z",
        "url": "https://files.pythonhosted.org/packages/f7/50/a5633edd3e6030d5e2f9a3ccea9aedd49fcc5e8472d0975908f90d403528/pelican_compressor-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ddd75f9916482d58f9e98659d6415fc87a7f329a6d3dc6ef74a58d89a29a58f",
          "md5": "8351727ff03582667ca90cd4465e521e",
          "sha256": "5889cd1ea6cbe6a2c5482e83de89f0baabcb6becdcf6a06d0a339b05d829b40d"
        },
        "downloads": -1,
        "filename": "pelican-compressor-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8351727ff03582667ca90cd4465e521e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 18776,
        "upload_time": "2022-11-09T22:41:08",
        "upload_time_iso_8601": "2022-11-09T22:41:08.096384Z",
        "url": "https://files.pythonhosted.org/packages/4d/dd/75f9916482d58f9e98659d6415fc87a7f329a6d3dc6ef74a58d89a29a58f/pelican-compressor-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f750a5633edd3e6030d5e2f9a3ccea9aedd49fcc5e8472d0975908f90d403528",
        "md5": "ca8daf68e9c63475eb32df6f805d6cc7",
        "sha256": "b86b7af75c175daabf0305739639e38f44050dbeb41d989590b709da39af4024"
      },
      "downloads": -1,
      "filename": "pelican_compressor-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ca8daf68e9c63475eb32df6f805d6cc7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 17901,
      "upload_time": "2022-11-09T22:41:09",
      "upload_time_iso_8601": "2022-11-09T22:41:09.841918Z",
      "url": "https://files.pythonhosted.org/packages/f7/50/a5633edd3e6030d5e2f9a3ccea9aedd49fcc5e8472d0975908f90d403528/pelican_compressor-0.2.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4ddd75f9916482d58f9e98659d6415fc87a7f329a6d3dc6ef74a58d89a29a58f",
        "md5": "8351727ff03582667ca90cd4465e521e",
        "sha256": "5889cd1ea6cbe6a2c5482e83de89f0baabcb6becdcf6a06d0a339b05d829b40d"
      },
      "downloads": -1,
      "filename": "pelican-compressor-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8351727ff03582667ca90cd4465e521e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 18776,
      "upload_time": "2022-11-09T22:41:08",
      "upload_time_iso_8601": "2022-11-09T22:41:08.096384Z",
      "url": "https://files.pythonhosted.org/packages/4d/dd/75f9916482d58f9e98659d6415fc87a7f329a6d3dc6ef74a58d89a29a58f/pelican-compressor-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}