{
  "info": {
    "author": "Elyas Heidari",
    "author_email": "eheidari@student.ethz.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Framework :: Jupyter",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Visualization",
      "Typing :: Typed"
    ],
    "description": "|PyPI|  |Docs|\n\nSageNet: Spatial reconstruction of dissociated single-cell datasets using graph neural networks\n=========================================================================\n.. raw:: html\n\n**SageNet** is a robust and generalizable graph neural network approach that probabilistically maps  dissociated single cells from an scRNAseq dataset to their hypothetical tissue of origin using one or more reference datasets aquired by spatially resolved transcriptomics techniques. It is compatible with both high-plex imaging (e.g., seqFISH, MERFISH, etc.) and spatial barcoding (e.g., 10X visium, Slide-seq, etc.) datasets as the spatial reference. \n\n\n.. raw:: html\n\n    <p align=\"center\">\n        <a href=\"\">\n            <img src=\"https://user-images.githubusercontent.com/55977725/145551267-2611c05f-0f7f-49e5-8859-0e6f5994bdb0.png\"\n             width=\"700px\" alt=\"sagenet logo\">\n        </a>\n    </p>\n\nSageNet is implemented with `pytorch <https://pytorch.org/docs/stable/index.html>`_ and `pytorch-geometric <https://pytorch-geometric.readthedocs.io/en/latest/>`_ to be modular, fast, and scalable. Also, it uses ``anndata`` to be compatible with `scanpy <https://scanpy.readthedocs.io/en/stable/>`_ and `squidpy <https://squidpy.readthedocs.io/en/stable/>`_ for pre- and post-processing steps.\n\n\nInstallation\n============\n\n\n.. note::\n\n  **0.1.0**\nThe dependency ``torch-geometric`` should be installed separately, corresponding the system specefities, look at `this link <https://pytorch-geometric.readthedocs.io/en/latest/notes/installation.html>`_ for instructions. We recommend to use Miniconda.\n\nPyPI\n--------\n\nThe easiest way to get SageNet is through pip using the following command::\n\n    pip install sagenet\n\nDevelopment\n---------------\n\nFirst, clone the repository using ``git``::\n\n    git clone https://github.com/MarioniLab/sagenet\n\nThen, ``cd`` to the sagenet folder and run the install command::\n\n    cd sagenet\n    python setup.py install #or pip install .\n\n\nUsage\n============\n::\n\n\timport sagenet as sg\n\timport scanpy as sc\n\timport squidpy as sq\n\timport anndata as ad\n\timport random\n\trandom.seed(10)\n\t\n\nTraining phase:\n---------------\n\n\n**Input:**\n\n- Expression matrix associated with the (spatial) reference dataset (an ``anndata`` object)\n\n::\n\n\tadata_r = sg.datasets.seqFISH1()\n\n\n- gene-gene interaction network\n\t\t\n\n::\n\n\tglasso(adata_r, [0.5, 0.75, 1])\n\n\n\n\n- one or more partitionings of the spatial reference into distinct connected neighborhoods of cells or spots\n\n::\n\n\tadata_r.obsm['spatial'] = np.array(adata_r.obs[['x','y']])\n\tsq.gr.spatial_neighbors(adata_r, coord_type=\"generic\")\n\tsc.tl.leiden(adata_r, resolution=.01, random_state=0, key_added='leiden_0.01', adjacency=adata_r.obsp[\"spatial_connectivities\"])\n\tsc.tl.leiden(adata_r, resolution=.05, random_state=0, key_added='leiden_0.05', adjacency=adata_r.obsp[\"spatial_connectivities\"])\n\tsc.tl.leiden(adata_r, resolution=.1, random_state=0, key_added='leiden_0.1', adjacency=adata_r.obsp[\"spatial_connectivities\"])\n\tsc.tl.leiden(adata_r, resolution=.5, random_state=0, key_added='leiden_0.5', adjacency=adata_r.obsp[\"spatial_connectivities\"])\n\tsc.tl.leiden(adata_r, resolution=1, random_state=0, key_added='leiden_1', adjacency=adata_r.obsp[\"spatial_connectivities\"])\n\n\n\n**Training:** \n::\n\n\n\tsg_obj = sg.sage.sage(device=device)\n\tsg_obj.add_ref(adata_r, comm_columns=['leiden_0.01', 'leiden_0.05', 'leiden_0.1', 'leiden_0.5', 'leiden_1'], tag='seqFISH_ref', epochs=20, verbose = False)\n\n\n\t\n**Output:**\n\n- A set of pre-trained models (one for each partitioning)\n\n::\n\n\n\t!mkdir models\n\t!mkdir models/seqFISH_ref\n\tsg_obj.save_model_as_folder('models/seqFISH_ref')\t\n\n\n- A concensus scoring of spatially informativity of each gene\n\n::\n\n\n\tind = np.argsort(-adata_r.var['seqFISH_ref_entropy'])[0:12]\n\twith rc_context({'figure.figsize': (4, 4)}):\n\t\tsc.pl.spatial(adata_r, color=list(adata_r.var_names[ind]), ncols=4, spot_size=0.03, legend_loc=None)\n\n\n.. raw:: html\n\n    <p align=\"center\">\n        <a href=\"\">\n            <img src=\"https://user-images.githubusercontent.com/55977725/145543540-23a51e03-c860-422f-b2e5-14da5f07669d.png\"\n             width=\"800px\" alt=\"spatial markers\">\n        </a>\n    </p>\n\n\n\n\nMapping phase\n---------------\n\n**Input:**\n\n- Expression matrix associated with the (dissociated) query dataset (an ``anndata`` object)\n::\n\t\n\tadata_q = sg.datasets.MGA()\n\n\n**Mapping:**\n::\n\n\tsg_obj.map_query(adata_q)\n\n\n**Output:**\n\n- The reconstructed cell-cell spatial distance matrix \n::\n\n\n\tadata_q.obsm['dist_map']\n\n\n- A concensus scoring of mapability (uncertainity of mapping) of each cell to the references\n::\n\n\n\tadata_q.obs\n\n\n::\n\n\n\timport anndata\n\tdist_adata = anndata.AnnData(adata_q.obsm['dist_map'], obs = adata_q.obs)\n\tknn_indices, knn_dists, forest = sc.neighbors.compute_neighbors_umap(dist_adata.X, n_neighbors=50, metric='precomputed')\n\tdist_adata.obsp['distances'], dist_adata.obsp['connectivities'] = sc.neighbors._compute_connectivities_umap(\n\t    knn_indices,\n\t    knn_dists,\n\t    dist_adata.shape[0],\n\t    50, # change to neighbors you plan to use\n\t)\n\tsc.pp.neighbors(dist_adata, metric='precomputed', use_rep='X')\n\tsc.tl.umap(dist_adata)\n\tsc.pl.umap(dist_adata, color='cell_type', palette=celltype_colours)\n\t\t\n\n.. raw:: html\n\n    <p align=\"center\">\n        <a href=\"\">\n            <img src=\"https://github.com/MarioniLab/sagenet/files/7687712/umapeli-11.pdf\"\n             width=\"900px\" alt=\"reconstructed space\">\n        </a>\n    </p>\n\n\nNotebooks\n============\nTo see some examples of our pipeline's capability, look at the `notebooks <https://github.com/MarioniLab/sagenet/notebooks>`_ directory. The notebooks are also avaialble on google colab:\n\n#. `Intro to SageNet <https://colab.research.google.com/drive/1H4gVFfxzZgilk6nbUhzFlrFsa1vEHNTl?usp=sharing>`_\n#. `Using multiple references <https://colab.research.google.com/drive/1H4gVFfxzZgilk6nbUhzFlrFsa1vEHNTl?usp=sharing>`_\n\t\t\nInteractive examples\n============\n* `Spatial mapping of the mouse gastrulation atlas <https://www.dropbox.com/s/krjgp19i62p7nfx/joint_mapping-2_interactive.html?dl=0>`_ \n\n\nSupport and contribute\n============\nIf you have a question or new architecture or a model that could be integrated into our pipeline, you can\npost an `issue <https://github.com/MarioniLab/sagenet/issues/new>`__ or reach us by `email <mailto:eheidari@student.ethz.ch>`_.\n\n\nContributions\n============\nThis work is led by Elyas Heidari and Shila Ghazanfar as a joint effort between `MarioniLab@CRUK@EMBL-EBI <https://www.ebi.ac.uk/research-beta/marioni/>`__ and `RobinsonLab@UZH <https://robinsonlabuzh.github.io>`__.\n\n.. |Docs| image:: https://readthedocs.org/projects/sagenet/badge/?version=latest\n   :target: https://sagenet.readthedocs.io\n   \n.. |PyPI| image:: https://img.shields.io/pypi/v/sagenet.svg\n   :target: https://pypi.org/project/sagenet",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/MarioniLab/sagenet/archive/refs/tags/SageNet_v0.1.0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MarioniLab/sagenet",
    "keywords": "bio-informatics,single-cell,single-cell data analysis,spatial data analysis,spatial transcriptomics",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sagenet",
    "package_url": "https://pypi.org/project/sagenet/",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/sagenet/",
    "project_urls": {
      "Documentation": "https://sagenet.readthedocs.io/en/latest",
      "Download": "https://github.com/MarioniLab/sagenet/archive/refs/tags/SageNet_v0.1.0.1.tar.gz",
      "Homepage": "https://github.com/MarioniLab/sagenet",
      "Source Code": "https://github.com/MarioniLab/sagenet"
    },
    "release_url": "https://pypi.org/project/sagenet/0.1.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Spatial reconstruction of dissociated single-cell data",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12280314,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f94c57e2b0d4a820540f36fce51824d395eaff28912cf6ae0581fb7023103603",
          "md5": "b4061fa6e4aa832ad9ec74bb327007c1",
          "sha256": "4fac4e0e5c19c371b957295b507fc71e2d1a7060d6fa77aecbc789ac48c8d02b"
        },
        "downloads": -1,
        "filename": "sagenet-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b4061fa6e4aa832ad9ec74bb327007c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17118,
        "upload_time": "2021-12-12T09:34:53",
        "upload_time_iso_8601": "2021-12-12T09:34:53.214129Z",
        "url": "https://files.pythonhosted.org/packages/f9/4c/57e2b0d4a820540f36fce51824d395eaff28912cf6ae0581fb7023103603/sagenet-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f56e3f37a37bf55acd9d4f117440b1eed1c7ee35a2c4e874a491c19887a087ce",
          "md5": "ebcbbff31667c725f375ea9ded40c030",
          "sha256": "2153da36744b27a5a6e5330e84acbfa8e83990191d9d6c043290232391c5d235"
        },
        "downloads": -1,
        "filename": "sagenet-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ebcbbff31667c725f375ea9ded40c030",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17222,
        "upload_time": "2021-12-12T10:23:53",
        "upload_time_iso_8601": "2021-12-12T10:23:53.085063Z",
        "url": "https://files.pythonhosted.org/packages/f5/6e/3f37a37bf55acd9d4f117440b1eed1c7ee35a2c4e874a491c19887a087ce/sagenet-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f56e3f37a37bf55acd9d4f117440b1eed1c7ee35a2c4e874a491c19887a087ce",
        "md5": "ebcbbff31667c725f375ea9ded40c030",
        "sha256": "2153da36744b27a5a6e5330e84acbfa8e83990191d9d6c043290232391c5d235"
      },
      "downloads": -1,
      "filename": "sagenet-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ebcbbff31667c725f375ea9ded40c030",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17222,
      "upload_time": "2021-12-12T10:23:53",
      "upload_time_iso_8601": "2021-12-12T10:23:53.085063Z",
      "url": "https://files.pythonhosted.org/packages/f5/6e/3f37a37bf55acd9d4f117440b1eed1c7ee35a2c4e874a491c19887a087ce/sagenet-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}