{
  "info": {
    "author": "Essa Khan",
    "author_email": "contact.essakh@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Pepfeature\n### _A package that consists of functions for calculating epitope/peptide features for prediction purposes_\n\n\n### What is it\n\n**Pepfeature** is a Python package providing routines for calculating peptide features on a given amino acid sequence.\nThese features can be used for macine learning purposes such as classification for epitiope prediction.\n\nThe features it can calculate for a given Amino Acid string sequence are:\n\n| No. |                      Feature                     | Explanation and references to be found in this section of Dissertation.pdf (GitHub repo) | Calculated in Pepfeature package's Python Module |\n|-----|:------------------------------------------------:|----------------------------------------------------------------------|--------------------------------------------------|\n| 1   | Proportion of Individual Amino Acids in sequence | 2.2.1                                                                | aa_proportion.py                                 |\n| 2   | k-mer Composition                                | 2.2.2                                                                | aa_kmer_composition.py                           |\n| 3   | Conjoint Triad Frequencies                       | 2.2.3                                                                | aa_CT.py                                         |\n| 4   | Sequence Entropy                                 | 2.2.4                                                                | aa_seq_entropy.py                                |\n| 5   | Frequency of Amino Acid types                            | 2.2.5                                                                | aa_composition.py                                |\n| 6   | Number of atoms                                  | 2.2.6                                                                | aa_num_of_atoms.py                               |\n| 7   | Molecular Weight                                 | 2.2.7                                                                | aa_molecular_weight.py                           |\n| 8   | Amino Acid Descriptors                                   | 2.2.8                                                                | aa_descriptors.py                                |\n\nAdditionally a module named aa_feat_all.py also exists and it contains functions to calculate all the eight features in one go.\n\n\n## Pepfeature Requirements\n**Required Software/Tools:**  \n- Tested on Python 3.8 (other Python 3 versions probably work too)\n\n**Required Package Dependencies:**  \n(Pepfeature has been tested on these versions of the dependancies. More recent versions of these dependancies may also be compatible with the Package.)\n- et-xmlfile v1.1.0\n- setuptools v56.0.0\n- numpy v1.20.2\n- openpyxl v3.0.7\n- pandas v1.2.4\n- python-dateutil v2.8.1\n- pytz v2021.1\n- six v1.15.0\n\n\n## Installation\n\n```\npip install Pepfeature\n```\n(All dependancies are expected to be automatically installed asswell with this 'pip install pepfeature' command.)\nThe source code is currently hosted on GitHub at: https://github.com/essakh/pepfeature\n\n## Example Use\n**NOTE: The Github contains an 'examples.py' in the root folder with many example use cases**\n\n**Ensure at all times that any lines of code that utilize this package are executed within the code block:**\n```python\nif __name__ == '__main__':\n```\nExample:\n```python\nimport pepfeature as pep\nimport pandas\n\ndf = pd.read_csv('pepfeature/data/Sample_Data.csv')\n\n#Use of pepfeature\nif __name__ == '__main__':\n    #Calculate all features on df\n    df_feat = pep.aa_all_feat.calc_df(dataframe=df, aa_column='Info_window_seq', Ncores=4, k=2)\n\n    print(df_feat) #print the data frame to console\n```\n\n## Understanding the API\n\nThe API interface consists of calling two functions from 9 possibile modules, an overview of the modules and their two callable functions are illustrated in the figure below:\n\n![line of code](pictures/pepfeature_public_modules_and_functions.PNG)\n\nThus, if in your python script you:\n```python\nimport pepfeature\n```\nThen you will have the following possible API interfacing options, as illustrated in the image below:\n\n![line of code](pictures/generic_string.PNG)\nPlease see pepfeature/examples.py on the Github repo for example use cases.\n\n## The Data Frame format to input into interface functions\n\nThe interface functions are calc_csv & calc_df. They have been detailed in respect to each module in the following section \"Functions documentation\",\n\nBoth the interface functions, viz. calc_csv & calc_df always take an argument 'dataframe' and 'aa_column' in all cases.\n\nThe 'dataframe' parameter of both the calc_csv() & calc_df() functions require a pandas Data frame* with at least one column that consists of amino acid sequences; this column's name you must pass as the 'aa_column' parameter into calc_csv() & calc_df() aswell. \n**Note: The Amino Acid sequences to calculate features on can be of varying sizes/lengths.**\n\n*in the example code shown in the 'Example Use' section of this documentation. The line \n```python\ndf = pd.read_csv('pepfeature/data/Sample_Data.csv') \n```\nconverts Sample_Data.csv into a pandas Data Frame to then feed into calc_csv() & calc_df().\nThis Sample_Data.csv exists in the location pepfeature/data/Sample_Data.csv relative from the root of the Github repo. This csv can be used as sample data to try out the package and to gauge what is meant by \"A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\".\n\n## Functions documentation\n### aa_all_feat\nThis module contains methods to Calculate all features that this package is capable of calculating in one go, the functions callable either return results as a pandas DataFrame or are exportes as a CSV.\n\nThe features calculated by the functions are:\n1. Proportion of Individual Amino Acids in sequence\n2. k-mer Composition\n3. Conjoint Triad Frequencies\n4. Sequence Entropy\n5. Frequency of Amino Acid types\n6. Number of atoms\n7. Molecular Weight\n8. Amino Acid descriptors\n\n#### pepfeature.aa_all_feat.calc_csv\n Calculates all 8 features that this package calculates at once chunk by chunk from the inputted 'dataframe'. It saves each processed chunk as a CSV(s).\n\n  This is a Ram efficient way of calculating the Features as the features are calculated on a single chunk of the dataframe (of chunksize number of rows) at a time and when a chunk has been been processed and saved as a CSV, then the chunk is deleted freeing up RAM.\n\n Results appended as a new column to input dataframe.\n```python\npepfeature.aa_all_feat.calc_csv(dataframe, k, save_folder, aa_column = 'Info_window_seq', Ncores = 1, chunksize = None)\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`k`** : `int`\n    - Length of subsequences (this is used to calculate k-mer composition features)\n- **`save_folder`** : `str`\n    - Path to folder for saving the output as CSV\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`chunksize`** : `int`,  `Default=None`\n    - Number of rows to be processed at a time. (Where a 'None' object denotes no chunks but the entire dataframe to be processed)\n\n#### pepfeature.aa_all_feat.calc_df\nCalculate all 8 features that this package calculates at once Results appended as a new column to input dataframe.\n```python\npepfeature.aa_all_feat.calc_df(dataframe, k, Ncores = 1, aa_column= 'Info_window_seq')\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`k`** : `int`\n    - Length of subsequences (this is used to calculate k-mer composition features)\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n\n **Returns:**\n - **`Pandas DataFrame object`**\n    - A Pandas DataFrame containing the calculated features appended as new columns.\n\n\n### aa_composition\nThis module contains functions to calculate Frequency of Amino Acid types for given amino acid sequences.\n#### pepfeature.aa_composition.calc_csv\nCalculates Frequency of Amino Acid types for given amino acid sequences chunk by chunk from the inputted 'dataframe'. It saves each processed chunk as a CSV(s). \n\nThis is a Ram efficient way of calculating the Features as the features are calculated on a single chunk of the dataframe (of chunksize number of rows) at a time and when a chunk has been been processed and saved as a CSV, then the chunk is deleted freeing up RAM.\n\nResults appended as a new columns named feat_Prop_{group-value} e.g. feat_Prop_Tiny, feat_Prop_Small etc. \n```python\npepfeature.aa_composition.calc_csv(dataframe, save_folder, aa_column = 'Info_window_seq', Ncores = 1, chunksize = None)\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`save_folder`** : `str`\n    - Path to folder for saving the output as CSV\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`chunksize`** : `int`,  `Default=None`\n    - Number of rows to be processed at a time. (Where a 'None' object denotes no chunks but the entire dataframe to be processed)\n\n#### pepfeature.aa_composition.calc_df\n\nCalculates Frequency of Amino Acid types for given amino acid sequences For each sequence calculates nine features corresponding to the proportion (out of 1) of each Amino Acid type in the sequences \n\nResults appended as a new columns named feat_Prop_{group-value} e.g. feat_Prop_Tiny, feat_Prop_Small etc.\n```python\npepfeature.aa_all_feat.calc_df(dataframe, Ncores = 1, aa_column= 'Info_window_seq')\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n\n **Returns:**\n - **`Pandas DataFrame object`**\n    - A Pandas DataFrame containing the calculated features appended as new columns.\n\n\n\n\n### aa_CT\nThis module contains functions to calculate conjoint triads features for given amino acid sequences.\n#### pepfeature.aa_CT.calc_csv\nCalculates conjoint triads features chunk by chunk from the inputted 'dataframe'.\nIt saves each processed chunk as a CSV(s).\n\nResults appended as a new column named feat_CT_{subsequence} e.g. feat_CT_305 etc.\n\nThis is a Ram efficient way of calculating the Features as the features are calculated on a single chunk of the dataframe (of chunksize number of rows) at a time and when a chunk has been been processed and saved as a CSV, then the chunk is deleted freeing up RAM.\n```python\npepfeature.aa_CT.calc_csv(dataframe, save_folder, aa_column = 'Info_window_seq', Ncores = 1, chunksize = None)\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`save_folder`** : `str`\n    - Path to folder for saving the output as CSV\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`chunksize`** : `int`,  `Default=None`\n    - Number of rows to be processed at a time. (Where a 'None' object denotes no chunks but the entire dataframe to be processed)\n\n#### pepfeature.aa_CT.calc_df\nCalculates conjoint triads features\n\nResults appended as a new column named feat_CT_{subsequence} e.g. feat_CT_305 etc.\n```python\npepfeature.aa_CT.calc_df(dataframe, Ncores = 1, aa_column= 'Info_window_seq')\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n\n **Returns:**\n - **`Pandas DataFrame object`**\n    - A Pandas DataFrame containing the calculated features appended as new columns.\n\n\n\n### aa_descriptors\nThis module contains functions to calculate Amino Acid descriptors features for given amino acid sequences.\n#### pepfeature.aa_descriptors.calc_csv\nCalculates Amino Acid descriptors features for given amino acid sequences chunk by chunk from the inputted 'dataframe'.\nIt saves each processed chunk as a CSV(s).\n\nResults appended as a new columns named feat_{property} e.g. feat_BLOSUM9\n\nThis is a Ram efficient way of calculating the Features as the features are calculated on a single chunk of the dataframe (of chunksize number of rows) at a time and when a chunk has been been processed and saved as a CSV, then the chunk is deleted freeing up RAM.\n```python\npepfeature.aa_descriptors.calc_csv(dataframe, save_folder, aa_column = 'Info_window_seq', Ncores = 1, chunksize = None)\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`save_folder`** : `str`\n    - Path to folder for saving the output as CSV\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`chunksize`** : `int`,  `Default=None`\n    - Number of rows to be processed at a time. (Where a 'None' object denotes no chunks but the entire dataframe to be processed)\n\n\n#### pepfeature.aa_descriptors.calc_df\nCalculates Amino Acid descriptors features\n\nResults appended as a new columns named feat_{property} e.g. feat_BLOSUM9\n\n```python\npepfeature.aa_descriptors.calc_df(dataframe, Ncores = 1, aa_column= 'Info_window_seq')\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n\n **Returns:**\n - **`Pandas DataFrame object`**\n    - A Pandas DataFrame containing the calculated features appended as new columns.\n\n### aa_kmer_composition\nThis module contains functions to calculate frequency of each k-length contiguous combination of subsequence of amino acid letters in the sequence.\n#### pepfeature.aa_kmer_composition.calc_csv\nCalculates frequency of each k-length contiguous combination of subsequence of amino acid letters in the sequence chunk by chunk from the inputted 'dataframe'. It saves each processed chunk as a CSV(s). \n\nSince there are 20 valid Amino Acid letters, there can be 400 ( 20x20) possible 2-letter combination, 8000 (20x20x20) 3-letter combinations, etc. \n\nResults appended as a new column named feat_Prop_{subsequence} e.g. feat_Prop_AB, feat_Prop_BC etc. \n\nThis is a Ram efficient way of calculating the Features as the features are calculated on a single chunk of the dataframe (of chunksize number of rows) at a time and when a chunk has been been processed and saved as a CSV, then the chunk is deleted freeing up RAM.\n```python\npepfeature.aa_kmer_composition.calc_csv(k, dataframe, save_folder, aa_column = 'Info_window_seq', Ncores = 1, chunksize = None)\n```\n **Parameters:**\n - **`k`** : `int`\n    - Length of subsequences\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`save_folder`** : `str`\n    - Path to folder for saving the output as CSV\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`chunksize`** : `int`,  `Default=None`\n    - Number of rows to be processed at a time. (Where a 'None' object denotes no chunks but the entire dataframe to be processed)\n\n#### pepfeature.aa_kmer_composition.calc_df\nCalculates frequency of each k-length contiguous combination of subsequence of amino acid letters in the sequence. (k-mers in a sequence are all the subsubsequence of length k.) \n\nSince there are 20 valid Amino Acid letters, there can be 400 ( 20x20) possible 2-letter combination, 8000 (20x20x20) 3-letter combinations, etc.\n\nResults appended as a new column named feat_Prop_{subsequence} e.g. feat_Prop_AB, feat_Prop_BC etc.\n```python\npepfeature.aa_kmer_composition.calc_df(k, dataframe, Ncores = 1, aa_column= 'Info_window_seq')\n```\n **Parameters:**\n- **`k`** : `int`\n    - Length of subsequences\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n\n **Returns:**\n - **`Pandas DataFrame object`**\n    - A Pandas DataFrame containing the calculated features appended as new columns.\n\n### aa_molecular_weight\nThis module contains functions to calculate total molecular weight for given amino acid sequences.\n#### pepfeature.aa_molecular_weight.calc_csv\nCalculates total molecular weight of the amino acid sequence chunk by chunk from the inputted 'dataframe'.\nIt saves each processed chunk as a CSV(s).\n\nResults appended as a new column named feat_molecular_weight\nThis is a Ram efficient way of calculating the Features as the features are calculated on a single chunk of the dataframe (of chunksize number of rows) at a time and when a chunk has been been processed and saved as a CSV, then the chunk is deleted freeing up RAM.\n```python\npepfeature.aa_molecular_weight.calc_csv(dataframe, save_folder, aa_column = 'Info_window_seq', Ncores = 1, chunksize = None)\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`save_folder`** : `str`\n    - Path to folder for saving the output as CSV\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`chunksize`** : `int`,  `Default=None`\n    - Number of rows to be processed at a time. (Where a 'None' object denotes no chunks but the entire dataframe to be processed)\n\n\n#### pepfeature.aa_molecular_weight.calc_df\n Calculates total molecular weight of the sequence.\n\nCalculated as a simple weighted sum of amino acid counts, with Amino Acid weights data.\nResults appended as a new column named feat_molecular_weight\n```python\npepfeature.aa_molecular_weight.calc_df(dataframe, Ncores = 1, aa_column= 'Info_window_seq')\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n\n **Returns:**\n - **`Pandas DataFrame object`**\n    - A Pandas DataFrame containing the calculated features appended as new columns.\n\n### aa_num_of_atoms\nThis module contains functions to calculate for each given sequence the total number of atoms of each type in that sequence (which is essentially a weighted sum of the aminoacid numbers).\n#### pepfeature.aa_num_of_atomst.calc_csv\nCalculates for each given sequence the total number of\natoms of each type in that sequence (which is essentially a weighted sum of the aminoacid numbers) chunk by chunk from the inputted 'dataframe'.\nIt saves each processed chunk as a CSV(s).\n\nResults appended as a new columns named feat_C_atoms, feat_H_atoms, feat_N_atoms, feat_O_atoms, feat_S_atoms\n\nThis is a Ram efficient way of calculating the Features as the features are calculated on a single chunk of the dataframe (of chunksize number of rows) at a time and when a chunk has been been processed and saved as a CSV, then the chunk is deleted freeing up RAM.\n```python\npepfeature.aa_num_of_atomst.calc_csv(dataframe, save_folder, aa_column = 'Info_window_seq', Ncores = 1, chunksize = None)\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`save_folder`** : `str`\n    - Path to folder for saving the output as CSV\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`chunksize`** : `int`,  `Default=None`\n    - Number of rows to be processed at a time. (Where a 'None' object denotes no chunks but the entire dataframe to be processed)\n\n\n#### pepfeature.aa_num_of_atoms.calc_df\n Calculates for each given sequence the total number of\natoms of each type in that sequence (which is essentially a weighted sum of the aminoacid numbers)\n\nResults appended as a new columns named feat_C_atoms, feat_H_atoms, feat_N_atoms, feat_O_atoms, feat_S_atoms\n```python\npepfeature.aa_num_of_atoms.calc_df(dataframe, Ncores = 1, aa_column= 'Info_window_seq')\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n\n **Returns:**\n - **`Pandas DataFrame object`**\n    - A Pandas DataFrame containing the calculated features appended as new columns.\n\n### aa_porportion\nThis module contains functions to calculate all the proportion (out of 1) of each Amino Acid in the peptide. \n#### pepfeature.aa_porportion.calc_csv\nCalculates the proportion (out of 1) od each Amino-Acid in the peptides (Amino Acid Sequences) chunk by chunk of the inputted 'dataframe'.\nIt saves each processed chunk as a CSV(s).\n\nThis results in 20 new features per chunk, appended as new columns named feat_Prop_{Amino-Acid letter} e.g. feat_Per_A,\nfeat_Prop_C, ..., feat_Prop_Y.\n\nThis is a Ram efficient way of calculating the Features as the features are calculated on a single chunk of the dataframe (of chunksize number of rows) at a time and when a chunk has been been processed and saved as a CSV, then the chunk is deleted freeing up RAM.\n```python\npepfeature.aa_porportion.calc_csv(dataframe, save_folder, aa_column = 'Info_window_seq', Ncores = 1, chunksize = None)\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`save_folder`** : `str`\n    - Path to folder for saving the output as CSV\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`chunksize`** : `int`,  `Default=None`\n    - Number of rows to be processed at a time. (Where a 'None' object denotes no chunks but the entire dataframe to be processed)\n\n\n#### pepfeature.aa_porportion.calc_df\nCalculates the proportion (out of 1) of each aminoacid in the peptides (Amino Acid Sequences).\n\nResults appended as a new column named feat_Prop_{aa letter} e.g. feat_Prop_A, feat_Prop_C, ..., feat_Prop_Y.\n\n```python\npepfeature.aa_porportion.calc_df(dataframe, Ncores = 1, aa_column= 'Info_window_seq')\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n\n **Returns:**\n - **`Pandas DataFrame object`**\n    - A Pandas DataFrame containing the calculated features appended as new columns.\n\n### aa_seq_entropy\nThis module contains functions to calculate the entropy of given amino acid sequence\n#### pepfeature.aa_seq_entropy.calc_csv\nCalculates the entropy of given amino acid sequences chunk by chunk from the inputted 'dataframe'.\n\nIt saves each processed chunk as a CSV(s).\n\nResults appended as a new column named feat_seq_entropy\n\nThis is a Ram efficient way of calculating the Features as the features are calculated on a single chunk of the dataframe (of chunksize number of rows) at a time and when a chunk has been been processed and saved as a CSV, then the chunk is deleted freeing up RAM.\n```python\npepfeature.aa_seq_entropy.calc_csv(dataframe, save_folder, aa_column = 'Info_window_seq', Ncores = 1, chunksize = None)\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`save_folder`** : `str`\n    - Path to folder for saving the output as CSV\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`chunksize`** : `int`,  `Default=None`\n    - Number of rows to be processed at a time. (Where a 'None' object denotes no chunks but the entire dataframe to be processed)\n\n\n#### pepfeature.aa_seq_entropy.calc_df\nCalculates the entropy of given amino acid sequences\n\nResults appended as a new column named feat_seq_entropy\n```python\npepfeature.aa_seq_entropy.calc_df(dataframe, Ncores = 1, aa_column= 'Info_window_seq')\n```\n **Parameters:**\n- **`dataframe`** : `Pandas DataFrame object`\n    - A pandas DataFrame that contains a column/feature that is composed of purely Amino-Acid sequences (pepides).\n- **`Ncores`** : `int`,  `Default=1`\n    - Number of cores to use for executing function (multiprocessing).\n- **`aa_column`** : `str`,  `Default='Info_window_seq'`\n    - Name of column in dataframe input consisting of the Amino-Acid sequences to process.\n\n **Returns:**\n - **`Pandas DataFrame object`**\n    - A Pandas DataFrame containing the calculated features appended as new columns.\n\n\n\n\n\n\n\n## Contributing to pepfeature\n\nAll contributions, bug reports, bug fixes, documentation improvements, enhancements and ideas are welcome.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/essakh/pepfeature",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Pepfeature",
    "package_url": "https://pypi.org/project/Pepfeature/",
    "platform": "",
    "project_url": "https://pypi.org/project/Pepfeature/",
    "project_urls": {
      "Homepage": "https://github.com/essakh/pepfeature"
    },
    "release_url": "https://pypi.org/project/Pepfeature/1.0.10/",
    "requires_dist": [
      "et-xmlfile (>=1.1.0)",
      "numpy (>=1.20.2)",
      "openpyxl (>=3.0.7)",
      "pandas (>=1.2.4)",
      "setuptools (>=56.0.0)",
      "python-dateutil (>=2.8.1)",
      "pytz (>=2021.1)",
      "six (>=1.15.0)"
    ],
    "requires_python": "",
    "summary": "A package that consists of functions for calculating epitope/peptide features for prediction purposes (Feature calculation/extraction)",
    "version": "1.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10325503,
  "releases": {
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38bf3fc0cf713aa828ab353ab550afbcd06864f6a94e89b878afb65d4fa318a8",
          "md5": "f4bc2079113d869dc991531a1b56d4aa",
          "sha256": "d414c4bfbe751f41129af08e992921298ca70b153dde29413f824cc3754492df"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4bc2079113d869dc991531a1b56d4aa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 75978,
        "upload_time": "2021-05-11T19:08:21",
        "upload_time_iso_8601": "2021-05-11T19:08:21.314526Z",
        "url": "https://files.pythonhosted.org/packages/38/bf/3fc0cf713aa828ab353ab550afbcd06864f6a94e89b878afb65d4fa318a8/Pepfeature-1.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "288b139fdb2dc24befcc4a70acd0c8bd08dac34dd554ea76534783d0dc1c4224",
          "md5": "9a05c86cd29f576be925872fffeac9d0",
          "sha256": "b4f4e0977aa001b45931629d385c4c980a3fa184f57745f4c22cfad52ea03316"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "9a05c86cd29f576be925872fffeac9d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72631,
        "upload_time": "2021-05-11T19:08:23",
        "upload_time_iso_8601": "2021-05-11T19:08:23.063080Z",
        "url": "https://files.pythonhosted.org/packages/28/8b/139fdb2dc24befcc4a70acd0c8bd08dac34dd554ea76534783d0dc1c4224/Pepfeature-1.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26fd556b125f935cc9b347e8e9cd1002ea3e602d01e0db22928d5fe7b7ca5765",
          "md5": "8c9e5764e4e40007776e00938cdd5be8",
          "sha256": "823786e0430d2e0b7dff7f5bc4c474562e1f402c6bda189c54cde6b888694e68"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c9e5764e4e40007776e00938cdd5be8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72149,
        "upload_time": "2021-04-23T04:00:19",
        "upload_time_iso_8601": "2021-04-23T04:00:19.553651Z",
        "url": "https://files.pythonhosted.org/packages/26/fd/556b125f935cc9b347e8e9cd1002ea3e602d01e0db22928d5fe7b7ca5765/Pepfeature-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a1d2aeaacd5d5c23c40d159bb256c5b3a7088ce5aa8a5116a3464c05a1c8355",
          "md5": "c0718401efcfb81da77f4107789f681b",
          "sha256": "6ebf95557ea071e781ae919b1c90078184564bdff77f88b751dfc13a1d4b99e2"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c0718401efcfb81da77f4107789f681b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63028,
        "upload_time": "2021-04-23T04:00:21",
        "upload_time_iso_8601": "2021-04-23T04:00:21.054764Z",
        "url": "https://files.pythonhosted.org/packages/9a/1d/2aeaacd5d5c23c40d159bb256c5b3a7088ce5aa8a5116a3464c05a1c8355/Pepfeature-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a405efb5715bcad44f2ddd6723fdffa25c50180d288afe242615df9fae509247",
          "md5": "c57c3544848f3d7908e831a99c716a0f",
          "sha256": "de48d806f4869b7f3a388d301180f767324464aaf575d76bd298b4d5730474dc"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c57c3544848f3d7908e831a99c716a0f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72138,
        "upload_time": "2021-04-23T04:10:06",
        "upload_time_iso_8601": "2021-04-23T04:10:06.465726Z",
        "url": "https://files.pythonhosted.org/packages/a4/05/efb5715bcad44f2ddd6723fdffa25c50180d288afe242615df9fae509247/Pepfeature-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c71c52b6264632f5cf36e2d6fa5f8e8157e7d7ed118ae144095315019778e92f",
          "md5": "e429cc64d0cc218cfb1e565e80e0a17b",
          "sha256": "ddd288be571993caef5a86a4486232c9a3d48b1e4f134bf308baf733ba4bdae7"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e429cc64d0cc218cfb1e565e80e0a17b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63018,
        "upload_time": "2021-04-23T04:10:07",
        "upload_time_iso_8601": "2021-04-23T04:10:07.533851Z",
        "url": "https://files.pythonhosted.org/packages/c7/1c/52b6264632f5cf36e2d6fa5f8e8157e7d7ed118ae144095315019778e92f/Pepfeature-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "139d9779ed4ba303cad79cd56053d57cf494985265c4ab739cf98cc01ed07908",
          "md5": "0836cd883ae87b18e866d1cfa76372e5",
          "sha256": "1d2996482ab7a1c2285dd0b38324a664744ed2713b1a8e8aa925fc33cf0b56f6"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0836cd883ae87b18e866d1cfa76372e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72149,
        "upload_time": "2021-04-23T04:26:28",
        "upload_time_iso_8601": "2021-04-23T04:26:28.691190Z",
        "url": "https://files.pythonhosted.org/packages/13/9d/9779ed4ba303cad79cd56053d57cf494985265c4ab739cf98cc01ed07908/Pepfeature-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33a27940cb4c514b73935655d987b2d7287c222281966f537b26e0ea04809826",
          "md5": "3095f02ef03832c61aee9c3887928e2b",
          "sha256": "08c45630e43ec6d86354b8dac48830fcc8d16febd3d5b85988a18f7ae2067532"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3095f02ef03832c61aee9c3887928e2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63035,
        "upload_time": "2021-04-23T04:26:30",
        "upload_time_iso_8601": "2021-04-23T04:26:30.077521Z",
        "url": "https://files.pythonhosted.org/packages/33/a2/7940cb4c514b73935655d987b2d7287c222281966f537b26e0ea04809826/Pepfeature-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af0f5445843c182ce69bde5ed4807bdb0723d6563817dbc2cd07d8ea3ae00e9b",
          "md5": "00eb4a1c99c0546e32bfd188994568d5",
          "sha256": "6dd2761ce755f9e2b4909fdfc7d2fbd98cd58e2be08dd40b415098b1b001357e"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00eb4a1c99c0546e32bfd188994568d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72155,
        "upload_time": "2021-04-23T04:32:03",
        "upload_time_iso_8601": "2021-04-23T04:32:03.554466Z",
        "url": "https://files.pythonhosted.org/packages/af/0f/5445843c182ce69bde5ed4807bdb0723d6563817dbc2cd07d8ea3ae00e9b/Pepfeature-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07d9f14300e08903de6221a61bcf8111f3c7a5dce28ab4343941d856134a76c0",
          "md5": "6ed001eff5b013b54cce2db0b5b41ff3",
          "sha256": "6519aa256b8d9956865e18ffea053a4dd3f21167adf9e85710dde84d49c0c1bb"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "6ed001eff5b013b54cce2db0b5b41ff3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63038,
        "upload_time": "2021-04-23T04:32:04",
        "upload_time_iso_8601": "2021-04-23T04:32:04.874223Z",
        "url": "https://files.pythonhosted.org/packages/07/d9/f14300e08903de6221a61bcf8111f3c7a5dce28ab4343941d856134a76c0/Pepfeature-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b833913192252d4288ab43b93810b8cb5afa6633cce4d9ac6f42abf17e34a3f0",
          "md5": "4fc2cd134bbc13b6bc510d60568fc64f",
          "sha256": "01f8e0238eeea3ebea1c8e27f0b4c153fa4a4ae0c2160398922a9a9463f9ef61"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4fc2cd134bbc13b6bc510d60568fc64f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 72788,
        "upload_time": "2021-04-26T12:31:51",
        "upload_time_iso_8601": "2021-04-26T12:31:51.093674Z",
        "url": "https://files.pythonhosted.org/packages/b8/33/913192252d4288ab43b93810b8cb5afa6633cce4d9ac6f42abf17e34a3f0/Pepfeature-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca3a9e325ed92656c7958d3fb1fad3fd30fdc1f56c16fd331c14cec90d7422f0",
          "md5": "b75dc80930787666855ed18f75d34f5c",
          "sha256": "dc875f3324e6fba046cbd49b54c8c26719fc37a7d6480198ca85c6278f54f533"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b75dc80930787666855ed18f75d34f5c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63550,
        "upload_time": "2021-04-26T12:31:52",
        "upload_time_iso_8601": "2021-04-26T12:31:52.380083Z",
        "url": "https://files.pythonhosted.org/packages/ca/3a/9e325ed92656c7958d3fb1fad3fd30fdc1f56c16fd331c14cec90d7422f0/Pepfeature-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "815e818aedff348884f347ce987ebf7e1f8d4dc30127f96cbc956a970d440836",
          "md5": "cb1ab784e1a2af508b06e2148f89aa19",
          "sha256": "a5500930e4897f6d91cd4ef66895495d7c56af537acb61040cdb9453444db7e0"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb1ab784e1a2af508b06e2148f89aa19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 73136,
        "upload_time": "2021-04-26T19:09:15",
        "upload_time_iso_8601": "2021-04-26T19:09:15.423150Z",
        "url": "https://files.pythonhosted.org/packages/81/5e/818aedff348884f347ce987ebf7e1f8d4dc30127f96cbc956a970d440836/Pepfeature-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe9da2ec1dae763c02487c0828c38d9c5bf01c9503b23cb357a98add34d795b6",
          "md5": "222244273043e7ccc4c17f94df639579",
          "sha256": "aa38aa666e861d7da0643a9f16b6363b54268712d02ede00f7b900d77942d6da"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "222244273043e7ccc4c17f94df639579",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63750,
        "upload_time": "2021-04-26T19:09:16",
        "upload_time_iso_8601": "2021-04-26T19:09:16.997211Z",
        "url": "https://files.pythonhosted.org/packages/fe/9d/a2ec1dae763c02487c0828c38d9c5bf01c9503b23cb357a98add34d795b6/Pepfeature-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e15d84c1a291002cfe55303f938f2afcaf5214c947d925ef497475d04ba587ad",
          "md5": "bf9b697d86fd8e11037055e9371b24ab",
          "sha256": "ff08e35c99b3b343917ac721b8f09f6e4e2168008cd5ce1ac7294be4639c71e5"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf9b697d86fd8e11037055e9371b24ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 73098,
        "upload_time": "2021-04-26T23:34:38",
        "upload_time_iso_8601": "2021-04-26T23:34:38.807831Z",
        "url": "https://files.pythonhosted.org/packages/e1/5d/84c1a291002cfe55303f938f2afcaf5214c947d925ef497475d04ba587ad/Pepfeature-1.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2b5038bd85deaa1e10d8de6ae8fa54034d66f118a8c4284f87b7b1093f10bcd",
          "md5": "cd19233164a8eb3c778092c455f25b4a",
          "sha256": "b064b6908c21ead753d465369ad52d2ba057bb62e887b4738e5932c10967a06c"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "cd19233164a8eb3c778092c455f25b4a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 63731,
        "upload_time": "2021-04-26T23:34:40",
        "upload_time_iso_8601": "2021-04-26T23:34:40.202006Z",
        "url": "https://files.pythonhosted.org/packages/f2/b5/038bd85deaa1e10d8de6ae8fa54034d66f118a8c4284f87b7b1093f10bcd/Pepfeature-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cd55db152829b565945423037679329ef89ac56529a88ed3a4f4fd262f381aa",
          "md5": "c1b8b890f207f564e60fc71cbef73c69",
          "sha256": "add6f326b0c76010a34c7eda0f7bc18cba7ce80a15ecc51eb0c9face99c58406"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1b8b890f207f564e60fc71cbef73c69",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 75972,
        "upload_time": "2021-05-11T18:47:19",
        "upload_time_iso_8601": "2021-05-11T18:47:19.101189Z",
        "url": "https://files.pythonhosted.org/packages/7c/d5/5db152829b565945423037679329ef89ac56529a88ed3a4f4fd262f381aa/Pepfeature-1.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "702d01daec89241b3668b734326c15905842e522adab1409b2865918554de21f",
          "md5": "7105dd619017cb22e5f218dd3e7c4f96",
          "sha256": "195f938e632d808cbaa039101a30f44a1c9707e477aeba9f768aa6d0988926fb"
        },
        "downloads": -1,
        "filename": "Pepfeature-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "7105dd619017cb22e5f218dd3e7c4f96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 72566,
        "upload_time": "2021-05-11T18:47:20",
        "upload_time_iso_8601": "2021-05-11T18:47:20.760140Z",
        "url": "https://files.pythonhosted.org/packages/70/2d/01daec89241b3668b734326c15905842e522adab1409b2865918554de21f/Pepfeature-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "38bf3fc0cf713aa828ab353ab550afbcd06864f6a94e89b878afb65d4fa318a8",
        "md5": "f4bc2079113d869dc991531a1b56d4aa",
        "sha256": "d414c4bfbe751f41129af08e992921298ca70b153dde29413f824cc3754492df"
      },
      "downloads": -1,
      "filename": "Pepfeature-1.0.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f4bc2079113d869dc991531a1b56d4aa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 75978,
      "upload_time": "2021-05-11T19:08:21",
      "upload_time_iso_8601": "2021-05-11T19:08:21.314526Z",
      "url": "https://files.pythonhosted.org/packages/38/bf/3fc0cf713aa828ab353ab550afbcd06864f6a94e89b878afb65d4fa318a8/Pepfeature-1.0.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "288b139fdb2dc24befcc4a70acd0c8bd08dac34dd554ea76534783d0dc1c4224",
        "md5": "9a05c86cd29f576be925872fffeac9d0",
        "sha256": "b4f4e0977aa001b45931629d385c4c980a3fa184f57745f4c22cfad52ea03316"
      },
      "downloads": -1,
      "filename": "Pepfeature-1.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "9a05c86cd29f576be925872fffeac9d0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 72631,
      "upload_time": "2021-05-11T19:08:23",
      "upload_time_iso_8601": "2021-05-11T19:08:23.063080Z",
      "url": "https://files.pythonhosted.org/packages/28/8b/139fdb2dc24befcc4a70acd0c8bd08dac34dd554ea76534783d0dc1c4224/Pepfeature-1.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}