{
  "info": {
    "author": "Kersten Henrik Breuer",
    "author_email": "k.breuer@dkfz.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: Microsoft :: Windows :: Windows 8.1",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Medical Science Apps.",
      "Topic :: System :: Distributed Computing"
    ],
    "description": "CWLab - An open-source framework for simplified deployment of the Common Workflow Language using a graphical web interface\n==========================================================================================================================\n\nBackground and Scope:\n---------------------\n\nThe Common Workflow Language (CWL) allows to wrap and link up\nbioinformatic software in a standardized and portable way. However,\nsetting up and operating a CWL-based workflow management system can be a\nlabor-intensive challenge for many data-driven laboratories. To this\nend, we developed CWLab: a framework for simplified, graphical\ndeployment of CWL.\n\nCWLab allows life-science researchers with all levels of computational\nproficiency to create, execute and monitor jobs for CWL-wrapped tools\nand workflows. Input parameters for large sample batches are specified\nusing a simple HTML form or a spreadsheet and are automatically\nvalidated. The integrated webserver allows to remotely control the\nexecution on clusters as well as single workstations. Moreover,\nautomatic infrastructure provisioning and scaling for OpenStack-based\nclouds is being implemented. CWLab can also be used as a local desktop\napplication that supports Linux, MacOS, and Windows by leveraging Docker\ncontainerization. Our Python-based framework is easy to set up and, via\na flexible API, it can be integrated with any CWL runner and adapted to\ncustom software environments.\n\nWith CWLab, we would like to hide the complexity of workflow management\nso that scientific users can focus on their data analyses. This might\npromote the adoption of CWL in multi-professional life-science\nlaboratories.\n\nInstallation and Quick Start:\n-----------------------------\n\n**Attention: CWLab is in alpha state currently and not all features are\navailable yet. However, the core functionalities are working and we are\nhappy if you test it. We are working hard to push out a stable version\nin the coming weeks. Please press the watch button to not miss it.**\n\n| Installation can be done using pip:\n| ``python3 -m pip install cwlab``\n\nPlease see the section \"Configuration\" for a discussion of available\noptions.\n\n| Start the webserver with your custom configuration (or leave out the\n  ``--config`` flag to use the default one):\n| ``cwlab up --config config.yaml``\n\nIf you like to make use of containers for dependency management, you\nneed to install `Docker <https://docs.docker.com/install/>`__ or a\nDocker-compatible containerization solution like\n`singularity <https://singularity.lbl.gov/>`__ or\n`udocker <https://github.com/indigo-dc/udocker>`__. To run on Windows or\nMacOs, please install the dedicated docker versions: `Docker for\nWindows <https://docs.docker.com/docker-for-windows/>`__, `Docker for\nMac <https://docs.docker.com/docker-for-mac/>`__\n\nThe usage of the web interface should be self-explanatory with build-in\ninstruction. The following section gives an overview of the basic usage\nscenario.\n\nSupported Systems:\n------------------\n\nCWLab is written in platform-agnostic python and can therefore be\nexecuted on:\n\n-  **Linux**\n-  **MacOs**\n-  **Windows**\\ \\*\n\nAny CWL runner that has a command-line interface can be integrated into\nCWLab in order to execute CWL workflows or tool-wrappers, such as:\n\n-  **cwltool** (the reference implementation) -\n   https://github.com/common-workflow-language/cwltool\n-  **Toil** (UCSC) - https://github.com/DataBiosphere/toil\n-  **Cromwell** (Broad Institute) -\n   https://github.com/broadinstitute/cromwell\n-  **Reana** (CERN) - https://reana.readthedocs.io/en/latest/index.html\n-  **CWLEXEC** (IBM) - https://github.com/IBMSpectrumComputing/cwlexec\n   (Please find a constantly updated list at:\n   https://www.commonwl.org/#Implementations)\n\nTherefore, CWLab can be used on any infrastructure supported by these\nCWL runners, including:\n\n-  **single workstations**\n-  **HPC clusters** (PBS, LSF, slurm, ...)\n-  **clouds** (AWS, GCP, Azure, OpenStack)\n\n| \\*\\ **Please Note:**\n| Execution on Windows is only supported by cwltool which talks to\n  docker for windows. Therefore, CWL-wrapped tools and workflows which\n  where originally designed for Linux/MacOs can be executed on Windows\n  with a graphical interface provided by CWLab.\n\nUsage:\n------\n\nConnect to the web interface:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOpen a modern browser of your choice like Chrome, Firefox, Safari, or\nEdge (Internet Explorer might be partially incompatible).\n\nType in the URL of your webserver. The URL depends on your\nconfiguration:\n\n-  If the webserver is running on the same machine and uses port 5000 is\n   used (this is the default), type: ``https://localhost:5000/``\n-  If CWLab is running on a remote machine in the same network, type in\n   the machine's IP address and the used port. For instance, if the IP\n   address is 172.22.0.1 and port 5000 is\n   used:\\ ``https://172.22.0.1:5000/``\n\n| You should see a Welcome page like this:\n| |welcome screenshot|\n\nImport a CWL workflow or tool:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n| CWLab can be used to run any workflow or tool that has been wrapped\n  using the Common Workflow Language. Of course, you can write workflows\n  or tool wrappers yourself (we recommend rabix-composer\n  https://rabix.io/), however, for many especially bioinformatic tasks,\n  existing CWL solutions are publicly available. Check the CWL website\n  as a starting point:\n| https://www.commonwl.org/#Repositories\\_of\\_CWL\\_Tools\\_and\\_Workflows.\n\n| To import a CWL document:\n| - Click on the button \"Import CWL Workflow/Tool\" in the top bar -\n  Choose a CWL document (workflow or tool)\\* - Press the import button\n\n| The workflow will be automatically validated:\n| |import screenshot|\n\n| *\\*Please note: Currently, workflows can only be imported in the\n  \"packed\" format. We will add support for the unpacked format soon. To\n  pack a CWL workflow, use:*\n| ``cwltool --pack my_workflow.cwl > my_workflow_packed.cwl``\n\nCreate a new Job:\n~~~~~~~~~~~~~~~~~\n\nTo run a workflow or tool with your data, you have to create a new job.\nOne job may contain multiple runs (for instance multiple samples or\nconditions). CWLab will automatically present you a list of needed input\nparameters. For each parameter, you can choose whether to specify it\nglobally (all runs of a job will get the same value) or per run.\n\n-  Click on the button \"Create New Job\" in the top bar and select the\n   desired CWL document in the sidebar\n-  Specify a descriptive job name (the job ID will be composed of the\n   date, time, and the name)\n-  If the job shall contain multiple runs toggle the \"runs per job\"\n   switch, then:\n\n   -  Specify run names as a comma-separated list in the dedicated text\n      field\n   -  In the parameter list, select which parameters should be\n      run-specific\n\n-  CWLab will automatically create a parameter form for you to fill in:\n\n   -  Export/download the form in the desired format\n   -  Open it in a spreadsheet editor (e.g. Microsoft Excel or Open\n      Office)\n   -  The file may contain the following sheets (depends on the type of\n      input parameters and your selections for \"global\"/\"run-specific\"\n      specification):\n\n      -  ``global single values``: parameters that take only one value\n         and are defined globally (one for all runs)\n      -  ``run-specific single values``: parameters that take only one\n         value but are specified per run\n      -  ``global arrays``: array parameters (takes a list of values)\n         that are defined globally\n      -  A separate sheet will be created for each run-specific array\n         parameter. It will be titled with the parameters name\n      -  ``config``: This sheet contains configuration options that only\n         need adaption in advanced use cases.\n\n   -  Fill in the sheet and import/upload the edited file to CWLab\n      **\\***\n\n-  Your parameter settings are automatically validated. (E.g. it is\n   checked whether the specified values match the parameter's type and\n   whether the paths of specified files or directories exist.)\n-  If valid, you can press the \"create job\" button and head over to \"Job\n   Execution & Results\" in the top bar\n\n**\\* Please note:** For specifying file or directory parameters, there\nare two options: - Either specify the absolute path - Specify a\ncharacter string that can be uniquely matched to a file/directory in the\ndefault input directory (please see the **INPUT\\_DIR** parameter in the\nconfig section).\n\n| This is an example screenshot for creating a job for an ATAC-seq\n  workflow:\n| |create job screenshot|\n\nJob execution:\n~~~~~~~~~~~~~~\n\n-  Click on \"Job Execution & Results\" in the top bar and choose the job\n   of interest in the sidebar\n-  Select the runs you want to start\n-  Select an execution profile (see the \"Configuration\" for details) and\n   press \"start\"\n-  The execution status will be displayed in the run-list\n-  Pressing the \"DetailsResults\" button will show (not implemented yet):\n\n   -  the deployed input parameter\n   -  execution logs (from the CWL runner)\n   -  a QC report\n\n-  Once finished the output can be found in the \"exec\" directory (set in\n   the configuration) along with the used parameter values, CWL\n   document, and log files\n\n| An example screenshot of the execution interface:\n| |execution screenshot|\n\nConfiguration:\n--------------\n\nCWLab is a highly versatile package and makes almost no assumptions on\nyour hard- and software environment used for the execution of CWL. To\nadapt it to your system and use case, a set of configuration options is\navailable:\n\n-  General configs, including:\n\n   -  webserver (hosting IP address and port, remotely or locally\n      available, login protected or not)\n   -  paths of working directories\n\n-  Execution profiles:\n   This flexible API allows you to adapt CWLab to your local software\n   environment and to integrate a CWL runner of your choice (such as\n   Cwltool, Toil, or Cromwell).\n\n| All configuration options can be specified in a single YAML file which\n  is provided to CWLab upon start:\n| ``cwlab up --config my_config.yaml``\n\n| To get an example config file, run the following command:\n| ``cwlab print_config > config.yaml`` (or see the example below)\n\nGeneral Configs:\n~~~~~~~~~~~~~~~~\n\n-  **WEB\\_SERVER\\_HOST**:\n   Specify the host or IP address on which the webserver shall run. Use\n   ``localhost`` for local usage on your machine only. Use ``0.0.0.0``\n   to allow remote accessibility by other machines in the same network.\n   *Default*: ``localhost``\n-  | **WEB\\_SERVER\\_PORT**:\n   | Specify the port used by the webserver.\n   | *Default*: 5000\n\n-  **TEMP\\_DIR**:\n   Directory for temporary files.\n   *Default*: a subfolder \"cwlab/temp\" in the home directory\n-  **WORKFLOW\\_DIR**:\n   Directory for saving CWL documents.\n   *Default*: a subfolder \"cwlab/temp\" in the home directory\n-  **EXEC\\_DIR**:\n   Directory for saving execution data including output files.\n   *Default*: a subfolder \"cwlab/temp\" in the home directory\n-  **DEFAULT\\_INPUT\\_DIR**:\n   Default directory where users can search for input files. You may\n   specify additional input directories using the \"**ADD\\_INPUT\\_DIRS**\"\n   parameter. *Default*: a subfolder \"cwlab/temp\" in the home directory\n-  **DB\\_DIR**:\n   Directory for databases.\n   *Default*: a subfolder \"cwlab/temp\" in the home directory\n-  | **ADD\\_INPUT\\_DIRS**:\n   | In addition to \"**DEFAULT\\_INPUT\\_DIR**\", these directories can be\n     searched by the user for input files.\n   | Please specify them in the format \"*name: path*\" like shown in this\n     example:\n\n   ::\n\n       ADD_INPUT_DIRS:\n           GENOMES_DIR: '/ngs_share/genomes'\n           PUBLIC_GEO_DATA: '/datasets/public/geo'\n\n   *Default*: no additional input dirs.\n-  | **ADD\\_INPUT\\_AND\\_UPLOAD\\_DIRS**:\n   | Users can search these directories for input files (in addition to\n     \"**DEFAULT\\_INPUT\\_DIR**\") and they may also upload their one\n     files.\n   | Please specify them in the format \"*name: path*\" like shown in this\n     example:\n\n   ::\n\n       ADD_INPUT_AND_UPLOAD_DIRS:\n           UPLOAD_SCRATCH: '/scratch/upload'\n           PERMANEN_UPLOAD_STORE: '/datasets/upload'\n\n   *Default*: no additional input dirs.\n\n-  | **DEBUG**:\n   | If set to True, the debugging mode is turned on. Do not use on\n     production systems.\n   | *Default*: False\n\nExec Profiles:\n~~~~~~~~~~~~~~\n\nThis is where you configure how to execute cwl jobs on your system. A\nprofile consists of four steps: pre\\_exec, exec, eval, and post\\_exec\n(only exec required, the rest is optional). For each step, you can\nspecify commands that are executed in bash or cmd terminal.\n\nYou can define multiple execution profile as shown in the config example\nbelow. This allows frontend users to choose between different execution\noptions (e.g. using different CWL runners, different dependency\nmanagement systems, or even choose a between multiple available batch\nexecution infrastructures like lsf, pbs, ...). For each execution\nprofile, following configuration parameters are available (but only\n**type** and **exec** is required):\n\n-  **shell**:\n   Specify which shell to use. For Linux or MacOS use ``bash``. For\n   Windows, use ``powershell``.\n   *Required*.\n-  **max\\_retries**: Specify how many times the execution (all steps) is\n   retried before marking a run as failed.\n-  | **timeout**:\n   | For each step in the execution profile, you can set a timeout\n     limit.\n   | *Default*:\n\n   .. code:: yaml\n\n       prepare: 120\n       exec: 86400\n       eval: 120\n       finalize: 120\n\n-  **pre\\_exec**\\ \\*:\n   Shell commands that are executed before the actual CWL execution. For\n   instance to load required python/conda environments.\n   *Optional*.\n-  **exec**\\ \\*:\n   Shell commands to start the CWL execution. Usually, this is only the\n   command line to execute the CWL runner. The stdout and stderr of the\n   CWL runner should be redirected to the predefined log file.\n   *Required*.\n-  **eval**\\ \\*:\n   The exit status at the end of the *exec* step is automatically\n   checked. Here you can specify shell commands to additionally evaluate\n   the content of the execution log to determine if the execution\n   succeeded. To communicate failure to CWLab, set the ``SUCCESS``\n   variable to ``False``.\n   *Optional*.\n-  **post\\_exec**\\ \\*: Shell commands that are executed after *exec* and\n   *eval*. For instance, this can be used to clean up temporary files.\n\n\\* **Additional notes regarding execution profile steps:**\n\n-  In each step following predefined variables are available:\n\n   -  ``JOB_ID``\n   -  ``RUN_ID`` (please note: is only unique within a job)\n   -  ``WORKFLOW`` (the path to the used CWL document)\n   -  ``RUN_INPUT`` (the path to the YAML file containing input\n      parameters)\n   -  ``OUTPUT_DIR`` (the path of the run-specific output directory)\n   -  ``LOG_FILE`` (the path of the log file that should receive the\n      stdout and stderr of CWL runner)\n   -  ``SUCCESS`` (if set to ``False`` the run will be marked as failed\n      and terminated)\n   -  ``PYTHON_PATH`` (the path to the python interpreter used to run\n      CWLab)\n\n-  The four steps will be executed in the same shell session and\n   therefore can be treated as one connected script. (Between the steps,\n   CWLab communicates the status to the database allowing the user to\n   get status notifications via the front end).\n-  Thus you may define your own variables that will also be available in\n   all downstream steps.\n-  At the end of each step. The exit code is checked. If it is non-zero,\n   the run will be marked as failed. Please note, if a step consists of\n   multiple commands and an intermediate command fails, this will not be\n   recognized by CWLab as long as the final command of the step will\n   succeed. To manually communicate failure to CWLab, please set the\n   ``SUCCESS`` variable to ``False``.\n-  The steps are executed using pexpect\n   (https://pexpect.readthedocs.io/en/stable/overview.html), this allows\n   you also connect to a remote infrastructure via ssh (recommended to\n   use an ssh key). Please be aware that the path of files or\n   directories specified in the input parameter YAML will not be adapted\n   to the new host. We are working on solutions to achieve an automated\n   path correction and/or upload functionality if the execution host is\n   not the CWLab server host.\n-  On Windows, please be aware that each code block (contained in\n   ``{...}``) has to be in one line.\n\nExample configuration files:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBelow, you can find example configurations for local execution of CWL\nworkflows or tools with cwltool.\n\nLinux / MacOs:\n^^^^^^^^^^^^^^\n\n.. code:: yaml\n\n    WEB_SERVER_HOST: localhost \n    WEB_SERVER_PORT: 5000\n\n    DEBUG: False  \n\n    TEMP_DIR: '/home/cwlab_user/cwlab/temp'\n    WORKFLOW_DIR: '/home/cwlab_user/cwlab/workflows'\n    EXEC_DIR: '/datasets/processing_out/'\n    DEFAULT_INPUT_DIR: '/home/cwlab_user/cwlab/input'\n    DB_DIR: '/home/cwlab_user/cwlab/db'\n\n    ADD_INPUT_DIRS:\n        GENOMES_DIR: '/ngs_share/genomes'\n        PUBLIC_GEO_DATA: '/datasets/public/geo'\n\n    ADD_INPUT_AND_UPLOAD_DIRS:\n        UPLOAD_SCRATCH: '/scratch/upload'\n        PERMANEN_UPLOAD_STORE: '/datasets/upload'\n\n    EXEC_PROFILES:\n        cwltool_local:\n            shell: bash\n            max_retries: 2\n            timeout:\n                prepare: 120\n                exec: 86400\n                eval: 120\n                finalize: 120\n            exec: |\n                cwltool --outdir \"${OUTPUT_DIR}\" \"${WORKFLOW}\" \"${RUN_INPUT}\" \\\n                    >> \"${LOG_FILE}\" 2>&1\n            eval: | \n                LAST_LINE=$(tail -n 1 ${LOG_FILE})\n                if [[ \"${LAST_LINE}\" == *\"Final process status is success\"* ]]\n                then\n                    SUCCESS=True\n                else\n                    SUCCESS=False\n                    ERR_MESSAGE=\"cwltool failed - ${LAST_LINE}\"\n                fi\n\nWindows:\n^^^^^^^^\n\n.. code:: yaml\n\n    WEB_SERVER_HOST: localhost\n    WEB_SERVER_PORT: 5000\n\n    DEBUG: False  \n\n    TEMP_DIR: 'C:\\Users\\cwlab_user\\cwlab\\temp'\n    WORKFLOW_DIR: 'C:\\Users\\cwlab_user\\cwlab\\workflows'\n    EXEC_DIR: 'D:\\processing_out\\'\n    DEFAULT_INPUT_DIR: 'C:\\Users\\cwlab_user\\cwlab\\input'\n    DB_DIR: 'C:\\Users\\cwlab_user\\cwlab\\db'\n\n    ADD_INPUT_DIRS:\n        GENOMES_DIR: 'E:\\genomes'\n        PUBLIC_GEO_DATA: 'D:\\public\\geo'\n\n    ADD_INPUT_AND_UPLOAD_DIRS:\n        UPLOAD_SCRATCH: 'E:\\upload'\n        PERMANEN_UPLOAD_STORE: '\\D:\\upload'\n\n    EXEC_PROFILES:\n        cwltool_windows:\n            shell: powershell\n            max_retries: 2\n            timeout:\n                prepare: 120\n                exec: 86400\n                eval: 120\n                finalize: 120\n            exec: |\n                . \"${PYTHON_PATH}\" -m cwltool --debug --default-container ubuntu:16.04 --outdir \"${OUTPUT_DIR}\" \"${CWL}\" \"${RUN_INPUT}\" > \"${LOG_FILE}\" 2>&1\n\n            eval: |\n                $LAST_LINES = (Get-Content -Tail 2 \"${LOG_FILE}\")\n\n                if ($LAST_LINES.Contains(\"Final process status is success\")){$SUCCESS=\"True\"}\n                else {$SUCCESS=\"False\"; $ERR_MESSAGE = \"cwltool failed - ${LAST_LINE}\"}\n\nDocumentation:\n--------------\n\n**Please note: A much more detailed documentation is on the way. In the\nmeantime, please notify us if you have any questions (see the \"Contact\nand Contribution\" section). We are happy to help.**\n\nContact and Contribution:\n-------------------------\n\nIf you have any question or are experiencing problems with CWLab, please\ncontact us at ``k.breuer@dkfz.de`` or open an issue in Github.\n\nIf you would like to contribute to the development and like to extend\nthe functionality of CWLab to meet your requirements, you are more than\nwelcome. We will do our best to support you and your contribution will\nbe acknowledged.\n\nAbout Us:\n---------\n\nCWLab is developed with love at the Division of Cancer Epigenomics of\nthe German Cancer Research Center (DKFZ) in the beautiful university\ncity of Heidelberg. We are an interdisciplinary team with wet-lab\nscientists and bioinformaticians working closely together. Our DNA\nsequencing-driven methodologies produce challenging amounts of data.\nCWLab helps us by giving all members of our team the ability to perform\ncommon bioinformatic analyses autonomously without having to acquire\nprogramming skills. This allows our bioinformatic staff to focus on\nmethod development and interpretation of computationally complex data.\n\nIf you like to know more about us, please visit our website\nhttps://www.dkfz.de/en/CanEpi/contact.html.\n\nLicence:\n--------\n\nThis package is free to use and modify under the Apache 2.0 Licence.\n\n.. |welcome screenshot| image:: https://github.com/CompEpigen/CWLab/blob/master/screenshots/welcome.png?raw=true\n.. |import screenshot| image:: https://github.com/CompEpigen/CWLab/blob/master/screenshots/import.png?raw=true\n.. |create job screenshot| image:: https://github.com/CompEpigen/CWLab/blob/master/screenshots/create_job.png?raw=true\n.. |execution screenshot| image:: https://github.com/CompEpigen/CWLab/blob/master/screenshots/execution.png?raw=true\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "https://github.com/CompEpigen/CWLab",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/CompEpigen/CWLab",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cwlab",
    "package_url": "https://pypi.org/project/cwlab/",
    "platform": "",
    "project_url": "https://pypi.org/project/cwlab/",
    "project_urls": {
      "Download": "https://github.com/CompEpigen/CWLab",
      "Homepage": "https://github.com/CompEpigen/CWLab"
    },
    "release_url": "https://pypi.org/project/cwlab/0.4.1/",
    "requires_dist": [
      "werkzeug (<=0.16.0,>=0.15.2)",
      "flask",
      "flask-wtf",
      "flask-login",
      "flask-sqlalchemy",
      "pyexcel",
      "pyexcel-io",
      "pyexcel-ods",
      "pyexcel-ods3",
      "pyexcel-xls",
      "pyexcel-xlsx (<=0.5.7)",
      "PyYAML (>=5.1)",
      "pexpect",
      "janis-pipelines",
      "cwltool (==3.0.20201203173111)",
      "psutil",
      "miniwdl (>=0.0.5)",
      "requests",
      "path (<13.2.0)",
      "schema-salad (>=7.0.20200811075006)",
      "trs-cli (>=0.3.1)",
      "pydantic",
      "cwlformat (<=2020.5.19)",
      "pytest ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "A platform-agnostic, cloud-ready framework for simplified deployment of the Common Workflow Language using a graphical web interface",
    "version": "0.4.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10001774,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a82553daca92443dce9c7daf9a0c234d21c71a89aba4ba766f01aff24472dffa",
          "md5": "7d4ec033ad7a9f415e338b993760331e",
          "sha256": "1f315f49063bdf4d75d23a64efde2ee20cd77f8b0f3cb1836da3be44506fc56e"
        },
        "downloads": -1,
        "filename": "cwlab-0.1.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d4ec033ad7a9f415e338b993760331e",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 54791,
        "upload_time": "2019-07-11T12:34:29",
        "upload_time_iso_8601": "2019-07-11T12:34:29.037068Z",
        "url": "https://files.pythonhosted.org/packages/a8/25/53daca92443dce9c7daf9a0c234d21c71a89aba4ba766f01aff24472dffa/cwlab-0.1.0-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44672d18871910b3089552fa2c3d8b01a4152b84d2cbfb5fa0b4e798eee1816b",
          "md5": "b4b173cd0c61123fe4e97ebd86f13edd",
          "sha256": "8ddc30d925e49a429e43187f76a70bb5f68b4fb627c9e52d0b29705aa03257f9"
        },
        "downloads": -1,
        "filename": "cwlab-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b4b173cd0c61123fe4e97ebd86f13edd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37065,
        "upload_time": "2019-07-11T12:34:31",
        "upload_time_iso_8601": "2019-07-11T12:34:31.502799Z",
        "url": "https://files.pythonhosted.org/packages/44/67/2d18871910b3089552fa2c3d8b01a4152b84d2cbfb5fa0b4e798eee1816b/cwlab-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c221fb82a25467beac6940286f9231ca0310748238f6dd55a4f995da75822d42",
          "md5": "89a231f4553b8509a2af81b069fb3d9a",
          "sha256": "74d92bad2a186c31426b131d530911054755fd447cad04ad1da7ac8a0bce4c32"
        },
        "downloads": -1,
        "filename": "cwlab-0.1.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "89a231f4553b8509a2af81b069fb3d9a",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "requires_python": null,
        "size": 62801,
        "upload_time": "2019-07-20T10:08:02",
        "upload_time_iso_8601": "2019-07-20T10:08:02.209007Z",
        "url": "https://files.pythonhosted.org/packages/c2/21/fb82a25467beac6940286f9231ca0310748238f6dd55a4f995da75822d42/cwlab-0.1.1-py2-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83ce42447c8d8120811cf122c60255970f344b062f6b005cdac556bd00518f71",
          "md5": "f519f90bcf17c90723d53c896e718168",
          "sha256": "d5002318e8b2231780569f7abd1d5e9c2849498ec4dc262b9291c911ffbca3bb"
        },
        "downloads": -1,
        "filename": "cwlab-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f519f90bcf17c90723d53c896e718168",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 49115,
        "upload_time": "2019-07-20T10:08:03",
        "upload_time_iso_8601": "2019-07-20T10:08:03.994544Z",
        "url": "https://files.pythonhosted.org/packages/83/ce/42447c8d8120811cf122c60255970f344b062f6b005cdac556bd00518f71/cwlab-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae20dbc8051b2749a5cf41ca16a857bcefe4f4e8099943058e66ced453c20652",
          "md5": "0dfeebbdabd7e50ca3168cc5ab87db48",
          "sha256": "1739a779c5a01e923b9c5e023de9ebc12a410fbbd453cdf65592615c57fcc374"
        },
        "downloads": -1,
        "filename": "cwlab-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0dfeebbdabd7e50ca3168cc5ab87db48",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 67516,
        "upload_time": "2019-07-31T13:35:55",
        "upload_time_iso_8601": "2019-07-31T13:35:55.186820Z",
        "url": "https://files.pythonhosted.org/packages/ae/20/dbc8051b2749a5cf41ca16a857bcefe4f4e8099943058e66ced453c20652/cwlab-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd42a808cf5aee92cf1b4abd575bc84e710efa1e167899e643f6f86aa3558580",
          "md5": "87018a43c0e98b4ab90524b469224f40",
          "sha256": "4398c83f653998f4e4955fe29b6e3b084411fdf24aa1e7c158f38b7a3cba1836"
        },
        "downloads": -1,
        "filename": "cwlab-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "87018a43c0e98b4ab90524b469224f40",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 53473,
        "upload_time": "2019-07-31T13:35:57",
        "upload_time_iso_8601": "2019-07-31T13:35:57.386129Z",
        "url": "https://files.pythonhosted.org/packages/dd/42/a808cf5aee92cf1b4abd575bc84e710efa1e167899e643f6f86aa3558580/cwlab-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4143ca0754f6ec072e9771273c336d6527439fdc32d95f373107ecb57528022e",
          "md5": "4505a781a5e8a5b136618317c612a238",
          "sha256": "8fc82e423d6e5e2bfaa56c5faf4d97ec2c383e7f3404981210904ea8ff174114"
        },
        "downloads": -1,
        "filename": "cwlab-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4505a781a5e8a5b136618317c612a238",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 55633,
        "upload_time": "2019-08-08T14:22:57",
        "upload_time_iso_8601": "2019-08-08T14:22:57.483318Z",
        "url": "https://files.pythonhosted.org/packages/41/43/ca0754f6ec072e9771273c336d6527439fdc32d95f373107ecb57528022e/cwlab-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b05d0f6107f2db7e6f368b4116c257e7bfac21a2bf4643a2b4f7e3656ba0e19",
          "md5": "ef804b8eaa58d7ac4bd7adc4b924376a",
          "sha256": "e4762874bb692a3b3328fc196d3e0d0000164b2388edd56dc01160a048f5c3d4"
        },
        "downloads": -1,
        "filename": "cwlab-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ef804b8eaa58d7ac4bd7adc4b924376a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 88073,
        "upload_time": "2019-10-17T11:34:13",
        "upload_time_iso_8601": "2019-10-17T11:34:13.666779Z",
        "url": "https://files.pythonhosted.org/packages/9b/05/d0f6107f2db7e6f368b4116c257e7bfac21a2bf4643a2b4f7e3656ba0e19/cwlab-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "637d9358de3291deb85fabf9635e9e9746acc009491dab4053f80112f7c31dc2",
          "md5": "ef0489cbaee9d85f2741ad9d599a5a2f",
          "sha256": "044d9fd2f1456324a662d984c4faa02a6151b0da877bd316d769c54946f246f2"
        },
        "downloads": -1,
        "filename": "cwlab-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ef0489cbaee9d85f2741ad9d599a5a2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 96403,
        "upload_time": "2019-11-25T21:23:14",
        "upload_time_iso_8601": "2019-11-25T21:23:14.423972Z",
        "url": "https://files.pythonhosted.org/packages/63/7d/9358de3291deb85fabf9635e9e9746acc009491dab4053f80112f7c31dc2/cwlab-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df7eb4723297c9de5131ff3e5e4c1e937cec7e2ceef3847f5f43b44abcfd930b",
          "md5": "413a3a7d34d4352bedd1483c81ceacbf",
          "sha256": "68ac54a906b44cd80ace30646233274b4cff88b320db54b34aac3b162a55ad0d"
        },
        "downloads": -1,
        "filename": "cwlab-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "413a3a7d34d4352bedd1483c81ceacbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 96556,
        "upload_time": "2019-11-26T18:37:40",
        "upload_time_iso_8601": "2019-11-26T18:37:40.343957Z",
        "url": "https://files.pythonhosted.org/packages/df/7e/b4723297c9de5131ff3e5e4c1e937cec7e2ceef3847f5f43b44abcfd930b/cwlab-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68297befe2a2903500f31d6662b67e7241e07e6ecbff9d93af62cbd27d4daf8d",
          "md5": "41752ff9be152dcd9597bca83eaa4804",
          "sha256": "4ab4b4018071272b0f8ebb2096eae5ef4f6ee9fb6aa655c057ffadf4c3a2594c"
        },
        "downloads": -1,
        "filename": "cwlab-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "41752ff9be152dcd9597bca83eaa4804",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 96963,
        "upload_time": "2019-12-11T11:38:38",
        "upload_time_iso_8601": "2019-12-11T11:38:38.568293Z",
        "url": "https://files.pythonhosted.org/packages/68/29/7befe2a2903500f31d6662b67e7241e07e6ecbff9d93af62cbd27d4daf8d/cwlab-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdb0a80246cfff2239f0f115a5cb251b7b8e42bda9d89341342e8d09895ff401",
          "md5": "791b8c0ba9b33877b207aa435e7628ab",
          "sha256": "e8ca738bebbdf47f7f2ff4e01d3b62e975b51b82355061e6ced50df73524570c"
        },
        "downloads": -1,
        "filename": "cwlab-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "791b8c0ba9b33877b207aa435e7628ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13555,
        "upload_time": "2021-04-07T21:56:38",
        "upload_time_iso_8601": "2021-04-07T21:56:38.939664Z",
        "url": "https://files.pythonhosted.org/packages/bd/b0/a80246cfff2239f0f115a5cb251b7b8e42bda9d89341342e8d09895ff401/cwlab-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "594f1e98cd9eb7772d3a747c35bc9c407da14d9b689c76e09becfac7f0e837cc",
          "md5": "3f10b58a0bcff9243b7220135510681d",
          "sha256": "6d39d4f2d4c5bc4ac36540ed74fdc844c9bccd568dfc29a66ff062c10e369638"
        },
        "downloads": -1,
        "filename": "cwlab-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3f10b58a0bcff9243b7220135510681d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 217898,
        "upload_time": "2021-04-07T21:56:41",
        "upload_time_iso_8601": "2021-04-07T21:56:41.039118Z",
        "url": "https://files.pythonhosted.org/packages/59/4f/1e98cd9eb7772d3a747c35bc9c407da14d9b689c76e09becfac7f0e837cc/cwlab-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c73490c1113cd60fc7c7c00b1518615bd55b4a34ce5587ef7930dd59000feaa3",
          "md5": "7d31d1c78e586707fa968ac1c78c9c74",
          "sha256": "5982bb1e75254d61bac447388b80a41b1b057c33409b34882a13431fad2d0938"
        },
        "downloads": -1,
        "filename": "cwlab-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d31d1c78e586707fa968ac1c78c9c74",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 228152,
        "upload_time": "2021-04-07T22:07:33",
        "upload_time_iso_8601": "2021-04-07T22:07:33.111651Z",
        "url": "https://files.pythonhosted.org/packages/c7/34/90c1113cd60fc7c7c00b1518615bd55b4a34ce5587ef7930dd59000feaa3/cwlab-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ec912ca99b06610ef4cf3e0bb6c34e4440a60d6221950f953a1eeb49efc5dea9",
          "md5": "16e4338ee59e4a7b277004dadbdd3881",
          "sha256": "8fbb24955783ac50ebdc9ff4e38a510da83e573c7a3ce444cfab04dda1dd90db"
        },
        "downloads": -1,
        "filename": "cwlab-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "16e4338ee59e4a7b277004dadbdd3881",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 217914,
        "upload_time": "2021-04-07T22:07:35",
        "upload_time_iso_8601": "2021-04-07T22:07:35.195101Z",
        "url": "https://files.pythonhosted.org/packages/ec/91/2ca99b06610ef4cf3e0bb6c34e4440a60d6221950f953a1eeb49efc5dea9/cwlab-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c73490c1113cd60fc7c7c00b1518615bd55b4a34ce5587ef7930dd59000feaa3",
        "md5": "7d31d1c78e586707fa968ac1c78c9c74",
        "sha256": "5982bb1e75254d61bac447388b80a41b1b057c33409b34882a13431fad2d0938"
      },
      "downloads": -1,
      "filename": "cwlab-0.4.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7d31d1c78e586707fa968ac1c78c9c74",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 228152,
      "upload_time": "2021-04-07T22:07:33",
      "upload_time_iso_8601": "2021-04-07T22:07:33.111651Z",
      "url": "https://files.pythonhosted.org/packages/c7/34/90c1113cd60fc7c7c00b1518615bd55b4a34ce5587ef7930dd59000feaa3/cwlab-0.4.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ec912ca99b06610ef4cf3e0bb6c34e4440a60d6221950f953a1eeb49efc5dea9",
        "md5": "16e4338ee59e4a7b277004dadbdd3881",
        "sha256": "8fbb24955783ac50ebdc9ff4e38a510da83e573c7a3ce444cfab04dda1dd90db"
      },
      "downloads": -1,
      "filename": "cwlab-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "16e4338ee59e4a7b277004dadbdd3881",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 217914,
      "upload_time": "2021-04-07T22:07:35",
      "upload_time_iso_8601": "2021-04-07T22:07:35.195101Z",
      "url": "https://files.pythonhosted.org/packages/ec/91/2ca99b06610ef4cf3e0bb6c34e4440a60d6221950f953a1eeb49efc5dea9/cwlab-0.4.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}