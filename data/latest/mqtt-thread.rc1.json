{
  "info": {
    "author": "Didier Orlandi",
    "author_email": "didier.orlandi@wanadoo.fr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "#mqtt_Thread <br />\r\n\r\nConnexion à un server mqtt via un thread <br />\r\nEnvoi et réception des messages mqtt en Python <br />\r\nSauvegarde des données reçues au format csv <br />\r\n\r\nINSTALLATION :<br />\r\n\t\tpy -m pip install mqtt_thread<br />\r\n\t\tou <br />\r\n\t\tpy -m pip install mqtt_thread==x.x.x (mettre numéro de version)<br />\r\n\r\nexemple :<br />\r\nTrace de graphe mathPlotlib temps réel<br />\r\n\r\n---------------------<br />\r\nimport matplotlib.pyplot as plt<br />\r\nimport matplotlib.animation as animation<br />\r\nfrom matplotlib import style<br />\r\nfrom matplotlib.ticker import FormatStrFormatter<br />\r\nimport numpy as np<br />\r\nimport time<br />\r\nimport mqtt_thread as MQTT # bibliothèque pypi<br />\r\n\r\n# Creation de la figure pour la charge<br />\r\nfig = plt.figure(num=1, figsize=(10, 6), dpi=120, facecolor='w', edgecolor='k')# configuration du graphe<br /> \r\nax = fig.add_subplot(1, 1, 1)<br />\r\nlabelGraphe = \"Titre du graphe\"<br />\r\n\r\n\r\ndef messageArrived(): # fonction appelée par le thread MQTT quand un message arrive<br />\r\n    if m.verbose:<br />\r\n        print(\"msg arrivé\")<br />\r\n        try:<br />\r\n            print(\"temp : \",m.lastLinedata[1])<br />\r\n        except:   <br /> \r\n            print(\"pas de dernière ligne\")<br />\r\n\r\ndef acquisition(i, xs, ys):<br />\r\n    # Dessine les graphes<br />\r\n        ax.clear()<br />\r\n        ax.plot(xs, ys, 'r-o', label=labelGraphe)<br />\r\n        ax.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))<br />\r\n    # Format du graphe<br />\r\n        plt.xticks(rotation=45, ha='right')# rotation et alignement du texte axe x<br />\r\n        plt.subplots_adjust(bottom=0.20)<br />\r\n        plt.title('Graphe temps réel avec Python')<br />\r\n        plt.ylabel('Valeur 1')<br />\r\n        plt.xlabel('temps (s)')<br />\r\n        plt.legend()<br />\r\n        plt.grid()# la grille sera affichée<br />\r\n\r\nm = MQTT.MQTT_Thread(\"mqtt.url.fr\",443,\"login\",\"pwd\")        # crée le thread<br />\r\nm.selectTopic([\"node_iot2020/#\",\"FABLAB_21_22/contes/bureau/temperature/out/\"])  # topics auxquels on s'abonne<br />\r\nm.selectKey([[\"ecl\",\"temps\"],[\"temp\",\"pression\"]]) # selection des clés des données voulues , les données seront dans m.data[0][], m.data[1][],... <br />\r\n# le dernier élement de m.data[i] est le temps de réception du message en secondes (donné par python avec la fonction time)<br />\r\nm.messageArrived = messageArrived # personnalisation fonction qui sera appelée à chaque réception de message<br />\r\nm.nomFichier = \"donnees\" # nom du fichier csv sans extension qui enregistrera les données<br />\r\nm.record = True # enregistre les données dans un fichier csv<br />\r\nm.eraseFile = True # efface le fichier csv avant d'enregistrer les données<br />\r\nm.verbose = True # affiche les messages MQTT<br />\r\nm.start()                  # démarre le thread, (exécution indépendante du programme principal)<br />\r\ntime.sleep(1)<br />\r\n#m.client.publish(\"node_iot2020/test/in\",payload=\"{\\\"pression\\\":1024}\",qos=0)#publication d'un message vers MQTT <br />\r\n\r\n# Appelle la fonction animation périodiquement <br />\r\n#m.data[0][1] est une liste !!!<br />\r\nani = animation.FuncAnimation(fig, acquisition, fargs=(m.data[1][2], m.data[1][0]), frames=20,interval=1000,repeat=True)# intervall temps en ms entre 2 animations<br />\r\nplt.show()<br />\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mqtt-thread",
    "package_url": "https://pypi.org/project/mqtt-thread/",
    "platform": null,
    "project_url": "https://pypi.org/project/mqtt-thread/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/mqtt-thread/1.6.0/",
    "requires_dist": [
      "paho-mqtt"
    ],
    "requires_python": ">=3.6",
    "summary": "Connection MQTT with thread",
    "version": "1.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17044456,
  "releases": {
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ca19bd7ebde4cae44039c0847ab642644a56e352bf16e65ea21fe7cf7f6c2de",
          "md5": "8fbe02cd30b3c5e14937ccde84c5d6b9",
          "sha256": "1c20b076f081aab3bfa959c62d3ef3c4646210d4bb71dd1ba2562dc2621e3295"
        },
        "downloads": -1,
        "filename": "mqtt_thread-1.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8fbe02cd30b3c5e14937ccde84c5d6b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8297,
        "upload_time": "2023-02-25T23:17:50",
        "upload_time_iso_8601": "2023-02-25T23:17:50.666029Z",
        "url": "https://files.pythonhosted.org/packages/1c/a1/9bd7ebde4cae44039c0847ab642644a56e352bf16e65ea21fe7cf7f6c2de/mqtt_thread-1.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e20b0517070c1c1efc04cf84c22cb32de5cab75fb0d9bbd035c216f17bc2ff0",
          "md5": "adb8f508836c76e37d8ae5ad078edcc8",
          "sha256": "9d369feed702e833e294c1ee87df173bf7158167ef1679a7266b46177ef60ac6"
        },
        "downloads": -1,
        "filename": "mqtt_thread-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "adb8f508836c76e37d8ae5ad078edcc8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6263,
        "upload_time": "2023-02-25T23:17:52",
        "upload_time_iso_8601": "2023-02-25T23:17:52.684012Z",
        "url": "https://files.pythonhosted.org/packages/4e/20/b0517070c1c1efc04cf84c22cb32de5cab75fb0d9bbd035c216f17bc2ff0/mqtt_thread-1.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ca19bd7ebde4cae44039c0847ab642644a56e352bf16e65ea21fe7cf7f6c2de",
        "md5": "8fbe02cd30b3c5e14937ccde84c5d6b9",
        "sha256": "1c20b076f081aab3bfa959c62d3ef3c4646210d4bb71dd1ba2562dc2621e3295"
      },
      "downloads": -1,
      "filename": "mqtt_thread-1.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8fbe02cd30b3c5e14937ccde84c5d6b9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8297,
      "upload_time": "2023-02-25T23:17:50",
      "upload_time_iso_8601": "2023-02-25T23:17:50.666029Z",
      "url": "https://files.pythonhosted.org/packages/1c/a1/9bd7ebde4cae44039c0847ab642644a56e352bf16e65ea21fe7cf7f6c2de/mqtt_thread-1.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4e20b0517070c1c1efc04cf84c22cb32de5cab75fb0d9bbd035c216f17bc2ff0",
        "md5": "adb8f508836c76e37d8ae5ad078edcc8",
        "sha256": "9d369feed702e833e294c1ee87df173bf7158167ef1679a7266b46177ef60ac6"
      },
      "downloads": -1,
      "filename": "mqtt_thread-1.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "adb8f508836c76e37d8ae5ad078edcc8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6263,
      "upload_time": "2023-02-25T23:17:52",
      "upload_time_iso_8601": "2023-02-25T23:17:52.684012Z",
      "url": "https://files.pythonhosted.org/packages/4e/20/b0517070c1c1efc04cf84c22cb32de5cab75fb0d9bbd035c216f17bc2ff0/mqtt_thread-1.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}