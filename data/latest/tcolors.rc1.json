{
  "info": {
    "author": "Alberto Alcolea",
    "author_email": "albertoalcolea@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Terminals"
    ],
    "description": "# tcolors\n\nSimple and easily-disableable dependency-free library for simplifying your life when working with ANSI colors in the terminal.\n\nWithout dozens of options, methods and combinations. Coloring the terminal should be a simple task.\n\nSupports basic colors, bright colors, 256 ANSI colors, true colors and most of the ANSI text modifiers.\n\n## Motivation\n\nThere are dozens, if not hundreds, of libraries that color the terminal with ANSI escape sequences, why develop another one?\n\nMainly because I always miss a feature in almost all existing libraries: the option to enable or disable the colored automacally.\n\nThis is especially useful when developing command line applications whose output may be *piped* into another. In such cases it is quite practical to have a flag to globally disable coloring (`--no-colors` for example) and make it easier for downstream applications that don't have to deal with data polluted by escape sequences.\n\n## Usage\n\n### Colors\n\n*tcolors* can color text with different color palettes. Take into account that not all terminal emulators support all of them.\n\n**Basic 3-bit colors**\n\n| Color   | Foreground    | Background      |\n|---------|---------------|-----------------|\n| Black   | Color.BLACK   | BgColor.BLACK   |\n| Red     | Color.RED     | BgColor.RED     |\n| Green   | Color.GREEN   | BgColor.GREEN   |\n| Yellow  | Color.YELLOW  | BgColor.YELLOW  |\n| Blue    | Color.BLUE    | BgColor.BLUE    |\n| Magenta | Color.MAGENTA | BgColor.MAGENTA |\n| Cyan    | Color.CYAN    | BgColor.CYAN    |\n| White   | Color.WHITE   | BgColor.WHITE   |\n\n**Bright colors**\n\n| Color   | Foreground           | Background             |\n|---------|----------------------|------------------------|\n| Black   | Color.BRIGHT_BLACK   | BgColor.BRIGHT_BLACK   |\n| Red     | Color.BRIGHT_RED     | BgColor.BRIGHT_RED     |\n| Green   | Color.BRIGHT_GREEN   | BgColor.BRIGHT_GREEN   |\n| Yellow  | Color.BRIGHT_YELLOW  | BgColor.BRIGHT_YELLOW  |\n| Blue    | Color.BRIGHT_BLUE    | BgColor.BRIGHT_BLUE    |\n| Magenta | Color.BRIGHT_MAGENTA | BgColor.BRIGHT_MAGENTA |\n| Cyan    | Color.BRIGHT_CYAN    | BgColor.BRIGHT_CYAN    |\n| White   | Color.BRIGHT_WHITE   | BgColor.BRIGHT_WHITE   |\n\n**Modifiers**\n\n| Modifier      | Description                                                |                 |\n|---------------|------------------------------------------------------------|-----------------|\n| Reset         | Reset all attributes                                       | Mod.RESET       |\n| Bold          | Bold                                                       | Mod.BOLD        |\n| Dimmed        | Faint, decreased intensity, or dim                         | Mod.DIM         |\n| Italic        | Italic                                                     | Mod.ITALIC      |\n| Underline     | Underline                                                  | Mod.UNDERLINE   |\n| Slow blink    | Blink less than 150 times per minute                       | Mod.SLOW_BLINK  |\n| Rapid blink   | Blink more than 150 times per minute. Not widely supported | Mod.RAPID_BLINK |\n| Inverted      | Swap foreground and background colors                      | Mod.INVERT      |\n| Conceal       | Conceal or hide. Not widely supported                      | Mod.CONCEAL     |\n| Strikethrough | Strikethrough                                              | Mod.STRIKE      |\n\n**256 colors**\n\n| Color | Foreground     | Background       |\n|-------|----------------|------------------|\n| N     | Color256.C_{N} | BgColor256.C_{N} |\n\nWhere `{N}` can be any number from 0 to 255.\n\n**True colors**\n\nThere are no built-in colors for the more than 16M of colors of the true color palette, but you can create your own colors just by creating a new instance of `TrueColor` or `BgTrueColor`\n\n```python\nfrom tcolors import TrueColor, BgTrueColor\n\n# Define colors either as hex strings (normal or short) or as rgb values\nBLUE = TrueColor('#1F2041')\nPURPLE = TrueColor('#437')\nGREEN = TrueColor(65, 123, 90)\nBG_COLOR = BgTrueColor(r=63, g=123, b=90)\n```\n\n### Colorize text\n\nYou can add color in two ways:\n\n- `colorize`: given a string it return a new string with the color escape sequences.\n- `cprint`: print applying colors to the printed text.\n\n`cprint` has the same signature as the built-in print function with an extra keyword argument `style` to define the style to apply.\n\n```python\nfrom tcolors import Color, Mod, colorize, cprint\n\ncolorize('Text with colors', Color.RED)\ncprint('Print with color', style=Mod.BOLD)\n```\n\nBoth methods adds the reset modifier at the end automatically.\n\nIn fact you can concatenate styles (all colors and modifiers are instances of the Style class) to any string directly. Just remember that in these cases it is necessary to put the reset modifier manually.\n\n```python\nprint(Color.RED + 'Colored text' + Mod.RESET)\nprint(Color.RED, 'Colored text', Mod.RESET, sep='')\n\nstr1 = 'This is a {}blue{} text'.format(Color.BLUE, Mod.RESET)\nstr2 = 'This is a %syellow%s text' % (Color.YELLOW + Mod.BOLD, Mod.RESET)\nstr3 = f'{Color.RED}{Mod.BOLD}This is a text in bold red{Mod.RESET}'\n```\n\n### Mix styles together\n\nIt is possible to combine styles using the addition operator.\n\n```python\ncprint('This is a warning', style=Color.RED + BgColor.YELLOW + Mod.BOLD + Mod.Italic)\n```\n\nIf you plan to use the same combination frequently you can assign it to a variable:\n\n```python\ntitle_style = Color.BLUE + Mod.UNDERLINE\ncprint('Title 1', style=title_style)\ncolorize('Another title', style=title_style)\n```\n\n### Configuration\n\nYou can configure *tcolors* to enable or disable the colored globally.\n\nIf it is disabled all calls to `colorize` or `cprint` won't color the text.\n\n```python\nfrom tcolors import configure_colors\n\nconfigure_colors(enable_colors=False)\n```\n\nYou can also define a default style that will be added automatically in all calls to `colorize` or `cprint`\n\n```python\nfrom tcolors import configure_colors, Mod\n\n# Put everything in bold\nconfigure_colors(default_style, Mod.BOLD)\n\ncprint('Just an example...', style=Color.GREEN)  # It will be printed in green and bold\ncprint('Only bold')\n```\n\n### Colorizer class\n\nIf you need to colorize several things in a different way use custom instances of the `Colorizer` class.\n\n```python\nfrom tcolors import Colorizer, Mod\n\ncolorizer1 = Colorizer(default_style=Mod.BOLD)\ncolorizer2 = Colorizer(default_style=Mod.ITALIC)\n\ncolorizer1.colorize('The colorizer1 instance always prints text in bold', style=Color.BLUE)\ncolorizer2.colorize('While colorizer2 always prints in italic', style=Color.YELLOW)\n```\n\nAs you can see the behaviour is the same as in the `colorize` and `cprint` functions. That is because *tcolors* uses an instance of the `Colorizer` class internally and exports those methods. Combine custom instances with the internal instance as you will.\n\nIf you want to use some default style only in a certain piece of code you can use `Colorizer` as a context manager:\n\n```python\nfrom tcolors import Colorizer\n\nwith Colorizer(default_style=Color.GREEN) as c:\n    c.cprint('Inside the context manager')\n```\n\n### Examples\n\nYou can find more practical examples in the `examples` directoty.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/albertoalcolea/tcolors",
    "keywords": "tcolors,tcolor,term,terminal,CLI,color,colors,colour,colours,ANSI,ANSI color,ANSI colors,ANSI colour,ANSI colours",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tcolors",
    "package_url": "https://pypi.org/project/tcolors/",
    "platform": null,
    "project_url": "https://pypi.org/project/tcolors/",
    "project_urls": {
      "Homepage": "https://github.com/albertoalcolea/tcolors",
      "Source": "https://github.com/albertoalcolea/tcolors"
    },
    "release_url": "https://pypi.org/project/tcolors/0.0.1/",
    "requires_dist": [
      "flake8 (>=4.0.1) ; extra == 'dev'",
      "tox (>=3.25.0) ; extra == 'dev'",
      "twine (>=4.0.0) ; extra == 'dev'"
    ],
    "requires_python": ">=3.6",
    "summary": "Yet another Python library to work with ANSI colors in the terminal",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13632791,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18bd3258263fe8172dba2040802c68938e8b68c043e676fb1b5bdc2f1f84b27e",
          "md5": "4ef3e0103ed40c4c22c8829bd6f041f3",
          "sha256": "df17686b545730be45610936d4feda2e360ee5378c19800cec911d4af9ad2043"
        },
        "downloads": -1,
        "filename": "tcolors-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ef3e0103ed40c4c22c8829bd6f041f3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.6",
        "size": 8989,
        "upload_time": "2022-04-26T23:00:10",
        "upload_time_iso_8601": "2022-04-26T23:00:10.372401Z",
        "url": "https://files.pythonhosted.org/packages/18/bd/3258263fe8172dba2040802c68938e8b68c043e676fb1b5bdc2f1f84b27e/tcolors-0.0.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9e1044db70d08172f25e04ac993106b3b2ad0ed559b0ec621b23fbfc0f04d69",
          "md5": "145ec3436e4868afadb70b764ef5ea1f",
          "sha256": "e4ff56cef7a7c4b4f295a5e0f279ba1b22c6627ac7d8268524a21f3e71266785"
        },
        "downloads": -1,
        "filename": "tcolors-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "145ec3436e4868afadb70b764ef5ea1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10838,
        "upload_time": "2022-04-26T23:00:12",
        "upload_time_iso_8601": "2022-04-26T23:00:12.325774Z",
        "url": "https://files.pythonhosted.org/packages/f9/e1/044db70d08172f25e04ac993106b3b2ad0ed559b0ec621b23fbfc0f04d69/tcolors-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18bd3258263fe8172dba2040802c68938e8b68c043e676fb1b5bdc2f1f84b27e",
        "md5": "4ef3e0103ed40c4c22c8829bd6f041f3",
        "sha256": "df17686b545730be45610936d4feda2e360ee5378c19800cec911d4af9ad2043"
      },
      "downloads": -1,
      "filename": "tcolors-0.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4ef3e0103ed40c4c22c8829bd6f041f3",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.6",
      "size": 8989,
      "upload_time": "2022-04-26T23:00:10",
      "upload_time_iso_8601": "2022-04-26T23:00:10.372401Z",
      "url": "https://files.pythonhosted.org/packages/18/bd/3258263fe8172dba2040802c68938e8b68c043e676fb1b5bdc2f1f84b27e/tcolors-0.0.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f9e1044db70d08172f25e04ac993106b3b2ad0ed559b0ec621b23fbfc0f04d69",
        "md5": "145ec3436e4868afadb70b764ef5ea1f",
        "sha256": "e4ff56cef7a7c4b4f295a5e0f279ba1b22c6627ac7d8268524a21f3e71266785"
      },
      "downloads": -1,
      "filename": "tcolors-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "145ec3436e4868afadb70b764ef5ea1f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10838,
      "upload_time": "2022-04-26T23:00:12",
      "upload_time_iso_8601": "2022-04-26T23:00:12.325774Z",
      "url": "https://files.pythonhosted.org/packages/f9/e1/044db70d08172f25e04ac993106b3b2ad0ed559b0ec621b23fbfc0f04d69/tcolors-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}