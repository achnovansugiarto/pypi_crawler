{
  "info": {
    "author": "David Finn",
    "author_email": "dfinn@splunk.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# phantom-action-handler\n\nUtilities for simplifying the development of Phantom apps\n\n## Author\n\nDavid Finn: dfinn@splunk.com\n\n## Requirements\n\n* Splunk>Phantom\n* Python 3.6 or higher\n\n## Installation\n\nThis library should generally be specified as a Phantom app pip dependency, and\ntherefore not require manual installation.\n\nIf manual installation on the Phantom instance is desirable:\n\n```sh\nphenv pip3 install phantom-action-handler\n```\n\n## Description\n\nThe `phantom_dev.action_handler` module greatly simplifies the implementation\nof a `phantom.base_connector.BaseConnector` subclass, which is the basis for\nPhantom app development.\n\nEdge cases and \n\n## Quickstart\n\nGiven the following app JSON describing a hypothetical `echo message` action:\n\n```json\n{\n\t...\n\t\"pip_dependencies\": {\n        \"pypi\": [\n\t\t\t...\n\t\t\t{\"module\": \"phantom-action-handler\"},\n\t\t\t...\n\t\t],\n\t\t...\n    },\n\t...\n\t\"actions\": [\n\t\t{\n\t\t\t\"action\": \"echo message\",\n\t\t\t\"identifier\": \"echo_message\",\n\t\t\t\"description\": \"Return the input message\",\n\t\t\t\"verbose\": \"\",\n\t\t\t\"type\": \"test\",\n\t\t\t\"read_only\": true,\n\t\t\t\"parameters\": {\n\t\t\t\t\"message\": {\n\t\t\t\t\t\"description\": \"The message to be echoed\",\n\t\t\t\t\t\"data_type\": \"string\",\n\t\t\t\t\t\"contains\": [\"text\"],\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"primary\": true\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"output\": [\n\t\t\t\t{\n\t\t\t\t\t\"data_path\": \"action_result.data.*\",\n\t\t\t\t\t\"data_type\": \"string\",\n\t\t\t\t\t\"contains\": [\"text\"]\n\t\t\t\t},\n\t\t\t],\n\t\t\t\"versions\": \"EQ(*)\"\n\t\t},\n\t],\n\t...\n}\n\n```\n\nThe corresponding `phantom.base_connector.BaseConnector` could be implemented\nas follows:\n\n```python\nfrom phantom.base_connector import BaseConnector\nfrom phantom_dev.action_handler import (\n\tActionHandler, HandlerMixin, main_connector)\n\n\n@main_connector\nclass MyConnector(HandlerMixin, BaseConnector):\n\t@ActionHandler\n\tdef echo_message(self, message, context=None):\n\t\tyield message\n\n```\n\nAll methods of the `BaseConnector` class are available for use in the action\nhandler logic implementation.\n\n## Details\n\nIn the above example, use of the `ActionHandler` decorator wraps the decorated\n`echo_message` method in the logic required for error handling and results\nreporting.\nThe `param` dictionary is automatically unpacked as keyword arguments to\nhandler method, allowing for quick and explicit argument validation and\nintuitive access to action parameters. `param` contains a `context` entry\n(except for the `test connectivity` action) and the parameters described in the\napp JSON.\n\nHandler methods such as `echo_message` are expected to return iterables of\nresults data.\nThe items from this iterable are added as data objects to the `ActionResult`.\nImplementing handler methods as generators is highly convenient, as this allows\ncustom logic to be run any time before or after data is yielded, but methods\ncan also be implemented as normal functions that return iterable objects.\n\nThe `HandlerMixin` superclass automatically delegates incoming actions to the\ncorrect method based on the action identifier.\n\nThe `main_connector` class decorator simply calls the class's `main` method if\nthe class is defined in the `__main__` module, reproducing the testing\nfunctionality provided by autogenerated app wizard code.\n\n### Summaries\n\nTo add summary information to the result, the `ActionHandler.summary`\ndecorator can be used:\n\n```python\n...\n@main_connector\nclass MyConnector(HandlerMixin, BaseConnector):\n\t@ActionHandler\n\tdef echo_message(self, message, context=None):\n\t\tyield message\n\n\t@echo_message.summary\n\tdef summarise_echo_message(self, results):\n\t\tmessage, = results\n\t\treturn {'message': message}\n\n```\n\nThis will insert the result of the summary method as the action result summary\nobject.\n\n### Signaling Failure\n\nFailure is signaled through raising exceptions.\nIf the handler executes without raising an exception, the action is treated as\na success.\n\nTo implement an `echo fail` action that does the same thing as `echo message`,\nbut always fails after producing results (assuming the correct entries are\nadded to the app JSON):\n\n```python\n...\n@main_connector\nclass MyConnector(HandlerMixin, BaseConnector):\n\t@ActionHandler\n\tdef echo_message(self, message, context=None):\n\t\tyield message\n\n\t@ActionHandler\n\tdef echo_fail(self, **param):\n\t\t# Demonstration of re-packing param; this will be the same as the\n\t\t# original param dictionary, which we can then unpack for the call\n\t\t# to echo_message\n\t\tyield from self.echo_message(**param)\n\t\traise RuntimeError('Failed on purpose')\n\n\t# The same summary method can be decorated multiple times for different\n\t# handlers to duplicate functionality\n\t@echo_fail.summary\n\t@echo_message.summary\n\tdef summarise_echo_message(self, results):\n\t\tmessage, = results\n\t\treturn {'message': message}\n\n```\n\n### Actions with no results\n\n```json\n\t\t...\n\t\t{\n\t\t\t\"action\": \"test connectivity\",\n\t\t\t\"identifier\": \"test_connectivity\",\n\t\t\t\"description\": \"Validate the asset configuration for connectivity using supplied configuration\",\n\t\t\t\"verbose\": \"\",\n\t\t\t\"type\": \"test\",\n\t\t\t\"read_only\": true,\n\t\t\t\"parameters\": {},\n\t\t\t\"output\": [],\n\t\t\t\"versions\": \"EQ(*)\"\n\t\t},\n\t\t...\n```\n\n`test connectivity` is an example of an action which produces no results.\nThe handler method needs only to return an empty iterable, which is easily\naccomplished by returning an empty collection rather than implementing a\ngenerator:\n\n```python\n...\n@main_connector\nclass MyConnector(HandlerMixin, BaseConnector):\n\t@ActionHandler\n\tdef echo_message(self, message, context=None):\n\t\tyield message\n\n\t@ActionHandler\n\tdef echo_fail(self, **param):\n\t\t# Demonstration of re-packing param; this will be the same as the\n\t\t# original param dictionary, which we can then unpack for the call\n\t\t# to echo_message\n\t\tyield from self.echo_message(**param)\n\t\traise RuntimeError('Failed on purpose')\n\n\t# The same summary method can be decorated multiple times for different\n\t# handlers to duplicate functionality\n\t@echo_fail.summary\n\t@echo_message.summary\n\tdef summarise_echo_message(self, results):\n\t\tmessage, = results\n\t\treturn {'message': message}\n\n\t@ActionHandler\n\tdef test_connectivity(self):\n\t\t# The test connectivity action is a special case that does not\n\t\t# receive a param dictionary at all, so there are no arguments to\n\t\t# unpack (not even context)\n\t\ttest_value = 'SOME TEST MESSAGE'\n\t\tresults = []\n\t\ttry:\n\t\t\tfor result in self.echo_fail(test_value):\n\t\t\t\tresults.append(result)\n\t\texcept RuntimeError:\n\t\t\tpass\n\t\telse:\n\t\t\traise RuntimeError('echo fail failed to fail')\n\n\t\tmessage, = results\n\t\tif message != test_value:\n\t\t\traise ValueError('echo fail failed to echo')\n\n\t\treturn []\n\n```\n\nIt would also be possible to achieve this with a `return` statement before a\n`yield` statement in a generator, or by failing before any results are yielded.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/phantom6/phantom-action-handler",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "phantom-action-handler",
    "package_url": "https://pypi.org/project/phantom-action-handler/",
    "platform": "",
    "project_url": "https://pypi.org/project/phantom-action-handler/",
    "project_urls": {
      "Homepage": "https://gitlab.com/phantom6/phantom-action-handler"
    },
    "release_url": "https://pypi.org/project/phantom-action-handler/0.0.1a9/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Utilities to simplify Phantom app development",
    "version": "0.0.1a9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8464993,
  "releases": {
    "0.0.1a9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "241b9ca6a3042c27a23a354dc67260eb54ae2eb3a6b704606256eca1dceb23f5",
          "md5": "872d1363416e0d2e443463816708785f",
          "sha256": "2aef04c580abd75991c841e8f2e35bea5c91b470bccfb9d54df970c3d6999df1"
        },
        "downloads": -1,
        "filename": "phantom_action_handler-0.0.1a9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "872d1363416e0d2e443463816708785f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11952,
        "upload_time": "2020-10-21T10:45:03",
        "upload_time_iso_8601": "2020-10-21T10:45:03.291494Z",
        "url": "https://files.pythonhosted.org/packages/24/1b/9ca6a3042c27a23a354dc67260eb54ae2eb3a6b704606256eca1dceb23f5/phantom_action_handler-0.0.1a9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f9cf6d3212b57460ffd26c7392e7d07c5f31e5f32c75d28addb87b89f69f325",
          "md5": "8e87631ddb6b9f01f3be7fe23c4b4b2e",
          "sha256": "d8dd931f12844cbf96b06b7b95460f72e4dd30032a9e76d446fbedd1e2390711"
        },
        "downloads": -1,
        "filename": "phantom-action-handler-0.0.1a9.tar.gz",
        "has_sig": false,
        "md5_digest": "8e87631ddb6b9f01f3be7fe23c4b4b2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6621,
        "upload_time": "2020-10-21T10:45:06",
        "upload_time_iso_8601": "2020-10-21T10:45:06.504352Z",
        "url": "https://files.pythonhosted.org/packages/6f/9c/f6d3212b57460ffd26c7392e7d07c5f31e5f32c75d28addb87b89f69f325/phantom-action-handler-0.0.1a9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "241b9ca6a3042c27a23a354dc67260eb54ae2eb3a6b704606256eca1dceb23f5",
        "md5": "872d1363416e0d2e443463816708785f",
        "sha256": "2aef04c580abd75991c841e8f2e35bea5c91b470bccfb9d54df970c3d6999df1"
      },
      "downloads": -1,
      "filename": "phantom_action_handler-0.0.1a9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "872d1363416e0d2e443463816708785f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11952,
      "upload_time": "2020-10-21T10:45:03",
      "upload_time_iso_8601": "2020-10-21T10:45:03.291494Z",
      "url": "https://files.pythonhosted.org/packages/24/1b/9ca6a3042c27a23a354dc67260eb54ae2eb3a6b704606256eca1dceb23f5/phantom_action_handler-0.0.1a9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f9cf6d3212b57460ffd26c7392e7d07c5f31e5f32c75d28addb87b89f69f325",
        "md5": "8e87631ddb6b9f01f3be7fe23c4b4b2e",
        "sha256": "d8dd931f12844cbf96b06b7b95460f72e4dd30032a9e76d446fbedd1e2390711"
      },
      "downloads": -1,
      "filename": "phantom-action-handler-0.0.1a9.tar.gz",
      "has_sig": false,
      "md5_digest": "8e87631ddb6b9f01f3be7fe23c4b4b2e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6621,
      "upload_time": "2020-10-21T10:45:06",
      "upload_time_iso_8601": "2020-10-21T10:45:06.504352Z",
      "url": "https://files.pythonhosted.org/packages/6f/9c/f6d3212b57460ffd26c7392e7d07c5f31e5f32c75d28addb87b89f69f325/phantom-action-handler-0.0.1a9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}