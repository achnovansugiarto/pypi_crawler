{
  "info": {
    "author": "Keyi Zhang",
    "author_email": "keyi@cs.stanford.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "This is a modified version of CIRCT that supports source-level debugging via [hgdb](hgdb.dev). Below is the original\nREADME.\n\n---\n\n<p align=\"center\"><img src=\"docs/includes/img/circt-logo.svg\"/></p>\n\n[![](https://github.com/llvm/circt/workflows/Build%20and%20Test/badge.svg?event=push)](https://github.com/llvm/circt/actions?query=workflow%3A%22Build+and+Test%22)\n[![Nightly integration tests](https://github.com/llvm/circt/workflows/Nightly%20integration%20tests/badge.svg)](https://github.com/llvm/circt/actions?query=workflow%3A%22Nightly+integration+tests%22)\n\n[![Track LLVM Changes](https://github.com/llvm/circt/actions/workflows/trackLLVMChanges.yml/badge.svg)](https://github.com/llvm/circt/actions/workflows/trackLLVMChanges.yml) <br>↳ If failing, there exists an upstream LLVM commit which breaks CIRCT.\n\n# ⚡️ \"CIRCT\" / Circuit IR Compilers and Tools\n\n\"CIRCT\" stands for \"Circuit IR Compilers and Tools\".  One might also interpret\nit as the recursively as \"CIRCT IR Compiler and Tools\".  The T can be\nselectively expanded as Tool, Translator, Team, Technology, Target, Tree, Type,\n... we're ok with the ambiguity.\n\nThe CIRCT community is an open and welcoming community.  If you'd like to\nparticipate, you can do so in a number of different ways:\n\n1) Join our [Discourse Forum](https://llvm.discourse.group/c/Projects-that-want-to-become-official-LLVM-Projects/circt/) \non the LLVM Discourse server.  To get a \"mailing list\" like experience click the \nbell icon in the upper right and switch to \"Watching\".  It is also helpful to go \nto your Discourse profile, then the \"emails\" tab, and check \"Enable mailing list \nmode\".  You can also do chat with us on [CIRCT channel](https://discord.com/channels/636084430946959380/742572728787402763) \nof LLVM discord server.\n\n2) Join our weekly video chat.  Please see the\n[meeting notes document](https://docs.google.com/document/d/1fOSRdyZR2w75D87yU2Ma9h2-_lEPL4NxvhJGJd-s5pk/edit#)\nfor more information.\n\n3) Contribute code.  CIRCT follows all of the LLVM Policies: you can create pull\nrequests for the CIRCT repository, and gain commit access using the [standard LLVM policies](https://llvm.org/docs/DeveloperPolicy.html#obtaining-commit-access).\n\n## Motivation\n\nThe EDA industry has well-known and widely used proprietary and open source\ntools.  However, these tools are inconsistent, have usability concerns, and were\nnot designed together into a common platform.  Furthermore\nthese tools are generally built with\n[Verilog](https://en.wikipedia.org/wiki/Verilog) (also\n[VHDL](https://en.wikipedia.org/wiki/VHDL)) as the IRs that they\ninterchange.  Verilog has well known design issues, and limitations, e.g.\nsuffering from poor location tracking support.\n\nThe CIRCT project is an (experimental!) effort looking to apply MLIR and\nthe LLVM development methodology to the domain of hardware design tools.  Many\nof us dream of having reusable infrastructure that is modular, uses\nlibrary-based design techniques, is more consistent, and builds on the best\npractices in compiler infrastructure and compiler design techniques.\n\nBy working together, we hope that we can build a new center of gravity to draw\ncontributions from the small (but enthusiastic!) community of people who work\non open hardware tooling.  In turn we hope this will propel open tools forward,\nenables new higher-level abstractions for hardware design, and\nperhaps some pieces may even be adopted by proprietary tools in time.\n\nFor more information, please see our longer [charter document](docs/Charter.md).\n\n## Setting this up\n\nThese commands can be used to setup CIRCT project:\n\n1) **Install Dependencies** of LLVM/MLIR according to [the\n  instructions](https://mlir.llvm.org/getting_started/), including cmake and \n  ninja.\n\n2) **Check out LLVM and CIRCT repos.**  CIRCT contains LLVM as a git\nsubmodule.  The LLVM repo here includes staged changes to MLIR which\nmay be necessary to support CIRCT.  It also represents the version of\nLLVM that has been tested.  MLIR is still changing relatively rapidly,\nso feel free to use the current version of LLVM, but APIs may have\nchanged.\n\n```\n$ git clone git@github.com:llvm/circt.git\n$ cd circt\n$ git submodule init\n$ git submodule update\n```\n\n*Note:* The repository is set up so that `git submodule update` performs a \nshallow clone, meaning it downloads just enough of the LLVM repository to check \nout the currently specified commit. If you wish to work with the full history of\nthe LLVM repository, you can manually \"unshallow\" the the submodule:\n\n```\n$ cd llvm\n$ git fetch --unshallow\n```\n\n3) **Build and test LLVM/MLIR:**\n\n```\n$ cd circt\n$ mkdir llvm/build\n$ cd llvm/build\n$ cmake -G Ninja ../llvm \\\n    -DLLVM_ENABLE_PROJECTS=\"mlir\" \\\n    -DLLVM_TARGETS_TO_BUILD=\"host\" \\\n    -DLLVM_ENABLE_ASSERTIONS=ON \\\n    -DCMAKE_BUILD_TYPE=DEBUG \\\n    -DCMAKE_EXPORT_COMPILE_COMMANDS=ON\n$ ninja\n$ ninja check-mlir\n```\n\n4) **Build and test CIRCT:**\n\n```\n$ cd circt\n$ mkdir build\n$ cd build\n$ cmake -G Ninja .. \\\n    -DMLIR_DIR=$PWD/../llvm/build/lib/cmake/mlir \\\n    -DLLVM_DIR=$PWD/../llvm/build/lib/cmake/llvm \\\n    -DLLVM_ENABLE_ASSERTIONS=ON \\\n    -DCMAKE_BUILD_TYPE=DEBUG \\\n    -DCMAKE_EXPORT_COMPILE_COMMANDS=ON\n$ ninja\n$ ninja check-circt\n$ ninja check-circt-integration # Run the integration tests.\n```\n\nThe `-DCMAKE_BUILD_TYPE=DEBUG` flag enables debug information, which makes the\nwhole tree compile slower, but allows you to step through code into the LLVM\nand MLIR frameworks. The `-DCMAKE_EXPORT_COMPILE_COMMANDS=ON` flag generates\na `build/compile_commands.json` file, which can be used by editors (or plugins)\nfor autocomplete and/or IDE-like features.\n\nTo get something that runs fast, use `-DCMAKE_BUILD_TYPE=Release` or\n`-DCMAKE_BUILD_TYPE=RelWithDebInfo` if you want to go fast and optionally if\nyou want debug info to go with it.  `Release` mode makes a very large difference\nin performance.\n\nConsult the [Getting Started](docs/GettingStarted.md) page for detailed \ninformation on configuring and compiling CIRCT.\n\nConsult the [Python Bindings](docs/PythonBindings.md) page if you are mainly\ninterested in using CIRCT from a Python prompt or script.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kuree/hgdb-circt",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hgdb-circt",
    "package_url": "https://pypi.org/project/hgdb-circt/",
    "platform": null,
    "project_url": "https://pypi.org/project/hgdb-circt/",
    "project_urls": {
      "Homepage": "https://github.com/Kuree/hgdb-circt"
    },
    "release_url": "https://pypi.org/project/hgdb-circt/0.0.1/",
    "requires_dist": [
      "pytest (>=6.0) ; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "Circt binary patched with hgdb",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16054068,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c98640a2cde75061cbd60338e35e41bae75df82db4b670a7278fbc05cde99e85",
          "md5": "4a97782b657e4846781dc912c09ef44a",
          "sha256": "f468042354bb27e28cd80ef74a015142a4f7f852d1fb1ce3687012c7138e2e5e"
        },
        "downloads": -1,
        "filename": "hgdb_circt-0.0.1-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "4a97782b657e4846781dc912c09ef44a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14551252,
        "upload_time": "2022-12-09T23:12:47",
        "upload_time_iso_8601": "2022-12-09T23:12:47.397647Z",
        "url": "https://files.pythonhosted.org/packages/c9/86/40a2cde75061cbd60338e35e41bae75df82db4b670a7278fbc05cde99e85/hgdb_circt-0.0.1-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c98640a2cde75061cbd60338e35e41bae75df82db4b670a7278fbc05cde99e85",
        "md5": "4a97782b657e4846781dc912c09ef44a",
        "sha256": "f468042354bb27e28cd80ef74a015142a4f7f852d1fb1ce3687012c7138e2e5e"
      },
      "downloads": -1,
      "filename": "hgdb_circt-0.0.1-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "4a97782b657e4846781dc912c09ef44a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14551252,
      "upload_time": "2022-12-09T23:12:47",
      "upload_time_iso_8601": "2022-12-09T23:12:47.397647Z",
      "url": "https://files.pythonhosted.org/packages/c9/86/40a2cde75061cbd60338e35e41bae75df82db4b670a7278fbc05cde99e85/hgdb_circt-0.0.1-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}