{
  "info": {
    "author": "Grant Holtes",
    "author_email": "gwholes@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# SortStream\n#### Grant Holtes 2020\n### A GUI Document Classification Tool\n\nSortstream allows non-technical users to train and distribute AI document sorting models.\n\n### Benefits\n\n#### 1. Your data never leaves your system\nSortStream never sends your data via the internet with all processing happening on your computer, including model training. \nSortStream doesn’t even require an internet connection to run, with the only internet connection required used to verify the product code.\nThis allows you to retain full ownership of your sensitive data and abide by local sovereignty laws\n\n#### 2. Simple to use and incorporate into existing automation solutions\nSortStream uses a simple directory based approach to allow non-technical users to easily adapt their workflows to use SortStream. This allows allows existing automation or RPA tools to use with SortStream without complex APIs.\n\n#### 3. Reliable results\nSortstream provides a confidence when it predicts a document’s type, allowing the user to filter out predictions where the model is uncertain of the results. This confidence level is statistically interpretable as the probability of the document being a certain type, based on the training data used.\n\n## Usage\n\n#### GUI Usage\n\n```python\nfrom sortstream import document_classifier_gui\n\ndocument_classifier_gui() #opens a user interface.\n```\n\n![UniVar Summary](https://github.com/Gholtes/SortStream/blob/master/images/SortStream_screenshot.png)\n\n#### Usual Usage\n\n```python\nfrom sortstream import document_classifier\n\nsorter = document_classifier()\n#data folder defaults to current working directory\nsorter.fit(data_folder = \"/PATH/TO/ROOT/DATA/FOLDER\")\nsorter.predict()\n\n```\n\n## Installation:\n\nUse pip to install SortStream and its dependancies.\n\n```bash\n$ pip install -e git+https://github.com/Gholtes/SortStream.git#egg=sortstream\n```\n\n### Requirements\n\nPython 3.7+. A simply method to install Python is to use install [anaconda](https://docs.anaconda.com/anaconda/install/) or by installing directly from [python.org](https://www.python.org/downloads/)\n\nPython packages: `numpy, sklearn, nltk, requests, PyPDF2`\n\n## Operation\n\nSortStream uses a directory based approch to labelling training data and outputting predictions.\n\nThe training dataset is orgaised as a root folder containing folders for each class or type of document. Each of these subfolders should contain the training examples for each class.\n\nWhen predict is called, sortstream will gather input documents from a folder and attempt to move them into the approporate class subfolder. These class prediction subfolders are in the 'predictions' folder.\n\n### Fit - How to Build a Model:\n\nIn order to sort documents, the system needs to learn how to identify the category of each document. To do this, the user needs to provide a number of examples of each type of document the system would be expected to sort. \n\n1) Find a few examples of each category (between 10 and 100 is a good sample size)\n2) For each category, make a folder that contains all of the examples. The name of this folder will be the name of the category.\n3) Put all of these category example folders in a folder named **data** which is in the same file location as the program.\n4) Open the program and click **build model** or `fit()` The program will learn from the examples in the **data** folder, and build a model. This model is saved alongside the program file. Do not change the folder name of the saved model. \n\nEach time **build model** or `fit()` is used, a new model is created. If multiple models are present in the folder, the program will use the first one it finds.\n\n### Predict - Classifying Documents:\n\n1) Place the documents that need to be classified into **input_files_to_be_sorted** folder. This folder can either be created manually or will be automatically created the first time you press the **predict** button or call the `predict()` method.\n2) Open the program, use the slider to select a confidence value (see Confidence), and click **predict** or call the `predict()`method.\n\nThe files will be sorted from the **input_files_to_be_sorted** folder into subfolders in the **predictions** folder.  Each subfolder contains the documents that belong to a specific category. \n\nIf the system is not confident in a result, it will move the file to a specific subfolder named **NotClassified** in the predictions folder. These need to be sorted manually. \n\nEach time predict is used, a log file is saved to the **logs** folder. This CSV file lists every file classified and includes confidence levels for all categories alongside other logs. \n\n### Sharing Models:\n\nThe model files, which are named **SortStreammodelXXXXX** can be shared between users, and will be used if in the same folder as the **SortStream.py** program file. \n\nEach time **build model** is used, a new model is created. If multiple models are present in the folder, the program will use the first one it finds.\n\n### Confidence: \n\nWhen classifying documents, the user can select the desired confidence level. This is the probability that the classification made by the program is correct, based on the data that the model was trained on. \n\nThe below heuristic can be used:\n\n#### High confidence:\nIt is highly unlikely that the program will classify a document incorrectly. However, it is likely that only a few documents will be classified, with the remaining requiring manual sorting.\n\n#### Low confidence:\nIt is more likely that the program will classify a document incorrectly, but very few documents will require manual sorting.\n\nUltimately the best confidence level to use will change based on the use case, so it is worth inspecting the logs files to see what confidence levels the program is producing on your data. \nIt is also worth considering the cost of misclassification relative to the cost of manually sorting documents when choosing the confidence level. \n\n### Feature Pipeline\n\nI am excited to be working on a number of additional pieces of functionality to make SortStream even more useful. These include:\n1. Support for MS Office documents\n2. Command line interface (CLI) for easy integration into automation solutions\n3. Advanced user settings to customise and evaluate the model\n4. Automatic dataset balancing",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Gholtes/SortStream/archive/v1.2.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Gholtes/SortStream",
    "keywords": "nlp,classification,document,pdf",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SortStream",
    "package_url": "https://pypi.org/project/SortStream/",
    "platform": "",
    "project_url": "https://pypi.org/project/SortStream/",
    "project_urls": {
      "Download": "https://github.com/Gholtes/SortStream/archive/v1.2.tar.gz",
      "Homepage": "https://github.com/Gholtes/SortStream"
    },
    "release_url": "https://pypi.org/project/SortStream/1.2.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "NLP Document Classification Tool.",
    "version": "1.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8488334,
  "releases": {
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48dfe4df7ac59641285cb432f1781a502f64e3593aa2e1cda3caabb8c2b6ea98",
          "md5": "80f674811b0e5868fdad8c5430f7f566",
          "sha256": "d44d975df5491cb9cc5f34b21535c5a55efe171bdebe7bc6cabbeaffbadd68fe"
        },
        "downloads": -1,
        "filename": "SortStream-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "80f674811b0e5868fdad8c5430f7f566",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10121,
        "upload_time": "2020-10-23T23:40:52",
        "upload_time_iso_8601": "2020-10-23T23:40:52.370817Z",
        "url": "https://files.pythonhosted.org/packages/48/df/e4df7ac59641285cb432f1781a502f64e3593aa2e1cda3caabb8c2b6ea98/SortStream-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9ecab149374ec1ba77fdf6d3ed1a7421770f0340070383751c58d07bfce0b6f",
          "md5": "30770c59e7c40fa35821fd1c13ea7b4b",
          "sha256": "406e9a50a46a3b43d349b282c8326bef3f450954561cebe3b166da6a914a3466"
        },
        "downloads": -1,
        "filename": "SortStream-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "30770c59e7c40fa35821fd1c13ea7b4b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11664,
        "upload_time": "2020-10-23T23:55:43",
        "upload_time_iso_8601": "2020-10-23T23:55:43.768360Z",
        "url": "https://files.pythonhosted.org/packages/d9/ec/ab149374ec1ba77fdf6d3ed1a7421770f0340070383751c58d07bfce0b6f/SortStream-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29110d26917d549a7933a20fd5e642108a1e3b184a5cc0d1d555bdfcbc38625f",
          "md5": "22d0aee7d8a24d15cb17d31cfad3ce9c",
          "sha256": "10f609a73696455bd2649729e1b4f8b10bcfbf221dff02141fbd86dad9699d72"
        },
        "downloads": -1,
        "filename": "SortStream-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "22d0aee7d8a24d15cb17d31cfad3ce9c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11746,
        "upload_time": "2020-10-24T00:05:52",
        "upload_time_iso_8601": "2020-10-24T00:05:52.877985Z",
        "url": "https://files.pythonhosted.org/packages/29/11/0d26917d549a7933a20fd5e642108a1e3b184a5cc0d1d555bdfcbc38625f/SortStream-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29110d26917d549a7933a20fd5e642108a1e3b184a5cc0d1d555bdfcbc38625f",
        "md5": "22d0aee7d8a24d15cb17d31cfad3ce9c",
        "sha256": "10f609a73696455bd2649729e1b4f8b10bcfbf221dff02141fbd86dad9699d72"
      },
      "downloads": -1,
      "filename": "SortStream-1.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "22d0aee7d8a24d15cb17d31cfad3ce9c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11746,
      "upload_time": "2020-10-24T00:05:52",
      "upload_time_iso_8601": "2020-10-24T00:05:52.877985Z",
      "url": "https://files.pythonhosted.org/packages/29/11/0d26917d549a7933a20fd5e642108a1e3b184a5cc0d1d555bdfcbc38625f/SortStream-1.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}