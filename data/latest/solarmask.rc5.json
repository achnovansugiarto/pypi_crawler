{
  "info": {
    "author": "Theo Lincke",
    "author_email": "thli2739@colorado.edu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "```python\nimport os\ncmap = \"gray\"\n```\n\n# Guide\n<hr style=\"border:2px solid gray\">\nThis guide will run through the installation and basic usage of the solar mask library.\n\n## Installation\n***\nThe package is availble on pypi [here](https://pypi.org/project/solarmask/). To download, use the latest version of pip:\n\n```bash\n$ python3 -m pip install solarmask\n```\n\nVersioning is being fleshed out so that major bugs don't exist in a version. Currently, the latest release the the most updated version.\n\n## ActiveRegion class\n***\nThe main entry point to solarmask is **active_region**. Active regions have three subclasses: **ActiveRegionParameters** which extracts parameters, **ActiveRegionDerivedFields** which constructs new fields based on the Bz, Bx, By and continuum fields that are stored on the disk (such as horizontal B field Bh or Twist etc.) and **ActiveRegionSegmentation** which only deals with the segmentation of an active region into neutral lines, umbras, penumbras and a background. All of these classes can be called from their respective modules, but the user is encouraged to use all of these subclasses' functionality directly from the ActiveRegion class to avoid confusion.\n\nTo construct an active region, you need a harpnumber, date and root. The harpnumber and date are self explanitory, and the root is the location of the raw data folder containing magnetogram and continuum data.\n\nFirst, let's define our root directory. If you use this code on a different system, change the cell below to your re located data folder - which should look similar to /docs/example_data/raw\n\n\n```python\nroot = \"../example_data/raw\"\nassert os.path.exists(root)\n```\n\nNext, we could manually get a harpnumber and date if we know what is on our system, but solarmask will automatically detect harpnumbers and dates in the root directory. Lets find all of our harpnumbers first:\n\n\n```python\nfrom solarmask.data import get_hnums\nhnums = get_hnums(root)\nprint(hnums)\nhnum = hnums[0]\n```\n\n    [7115]\n\n\nIf we new each date in each harpnumber we are using, we could just manually build a datetime, but solarmask also automatically detects which dates are available in root:\n\n\n```python\nfrom solarmask.data import get_dates\ndates = get_dates(hnum, root)\nprint(dates)\ndate = dates[0]\n```\n\n    [datetime.datetime(2017, 9, 6, 12, 0), datetime.datetime(2017, 9, 1, 22, 0)]\n\n\nNow we have a valid harpnumber and date combo to build our active region with. Of course, we could manually define these two as well:\n\n\n```python\nprint(hnum, date)\n```\n\n    7115 2017-09-06 12:00:00\n\n\nNow let's build an active region:\n\n\n```python\nfrom solarmask.active_region import ActiveRegion\n\nar = ActiveRegion(hnum, date, root)\n```\n\nAn active region alone is just a combination of x, y, z components of magnetic flux and the continuum:\n\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3)\n\nax1.imshow(ar.cont, cmap)\nax1.set_title(\"Continuum\")\nax1.axis(False)\n\nax2.imshow(ar.Bz, cmap)\nax2.set_title(\"Line of sight magnetic field\")\nax2.axis(False)\n\nax3.imshow(ar.Bh, cmap)\nax3.set_title(\"Horizontal magnetic field\")\nax3.axis(False)\n\nfig.set_figwidth(10)\n\nplt.show()\n```\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_14_0.png)\n    \n\n\n### Three Datasets\n\nThe main usage of active region is to extract the three datasets.\n\nEach dataset is a dict with key value corresponding to each feature.\n\n\n```python\nbaseline = ar.baseline_dataset\nprint(\"BASELINE Dataset\")\nprint(baseline)\n```\n\n    BASELINE Dataset\n    {'Bz_tot': 48436571.73000002, 'Bz_totabs': 912665.0699999997, 'itot': 1158731875.8816144, 'itotabs': 513884.65279076196, 'itot_polarity': 69741420.32692963, 'ihtot': 260424630525.3697, 'ihtotabs': 3658852029.034691, 'hctot': 346536044344.56824, 'hctotabs': 152841919638.9422, 'totrho': 21887487.611776374, 'Bz_mean': 2.9610447920992518, 'Bz_std': 353.91205722553934, 'Bz_skew': 0.8624891360407722, 'Bz_kurt': 15.705697123960512, 'Bh_mean': 181.74443637163253, 'Bh_std': 301.11945941453774, 'Bh_skew': 4.275037651713445, 'Bh_kurt': 27.07156202696789, 'gamma_mean': -0.1003125604687583, 'gamma_std': 0.6785771694077445, 'gamma_skew': 0.20137146281062596, 'gamma_kurt': -1.0749836556997958, 'grad_B_mean': 49.819821037258365, 'grad_B_std': 72.48970397795553, 'grad_B_skew': 10.687045428877381, 'grad_B_kurt': 214.83928901171123, 'grad_Bz_mean': 51.636673855447874, 'grad_Bz_std': 81.89618924956946, 'grad_Bz_skew': 9.117129105709143, 'grad_Bz_kurt': 162.31031800893274, 'grad_Bh_mean': 37.43074113475015, 'grad_Bh_std': 59.7594595863308, 'grad_Bh_skew': 14.68324296531682, 'grad_Bh_kurt': 346.624428398112, 'J_mean': 1.667244123724181, 'J_std': 6921.2747549414735, 'J_skew': 5.779373559988659, 'J_kurt': 329.2113441555798, 'Jh_mean': 11870.756427256447, 'Jh_std': 7499866.0437582, 'Jh_skew': 8.102423095067055, 'Jh_kurt': 2704.456210827294, 'twist_mean': -5.383805555755496, 'twist_std': 5431.099285738268, 'twist_skew': 19.27497183475329, 'twist_kurt': 22725.394418643416, 'hc_mean': -495879.35929370264, 'hc_std': 7445779.2243369175, 'hc_skew': -7.804882836278778, 'hc_kurt': 1132.954225325227, 'shear_mean': 1.0360216908634599, 'shear_std': 0.5274806533779264, 'shear_skew': 0.7726592942127313, 'shear_kurt': 0.6151056886795883, 'rho_mean': 1784.7168367601291, 'rho_std': 10948.434868430033, 'rho_skew': 20.25839583283075, 'rho_kurt': 661.463797670551, 'hnum': 7115, 'date': datetime.datetime(2017, 9, 6, 12, 0), 'NOAA_ARS': '12673'}\n\n\n\n```python\nsegmented = ar.segmented_dataset\nprint(\"SEGMENTED Dataset\")\nprint(segmented)\n```\n\n    SEGMENTED Dataset\n    {'nl_Bz_tot': 1730154.0, 'nl_Bz_totabs': 74285.20000000001, 'nl_itot': 72911186.77918473, 'nl_itotabs': 5502452.308782724, 'nl_itot_polarity': 8855326.523065047, 'nl_ihtot': 77831129621.29727, 'nl_ihtotabs': 246844235.33597994, 'nl_hctot': 57063866401.77635, 'nl_hctotabs': 12216768812.036888, 'nl_totrho': 6131235.380608724, 'nl_Bz_mean': -18.233971526755035, 'nl_Bz_std': 723.3068414530032, 'nl_Bz_skew': -0.5455602300328546, 'nl_Bz_kurt': 5.615103176236618, 'nl_Bh_mean': 1132.8273410495333, 'nl_Bh_std': 851.3247532920949, 'nl_Bh_skew': 1.189955019812326, 'nl_Bh_kurt': 1.2650226810732885, 'nl_gamma_mean': 0.0018664835082713447, 'nl_gamma_std': 0.5023637771433762, 'nl_gamma_skew': 0.09755952858633657, 'nl_gamma_kurt': 0.6208295788868163, 'nl_grad_B_mean': 250.90027949302583, 'nl_grad_B_std': 349.3953113840282, 'nl_grad_B_skew': 3.0308016114527065, 'nl_grad_B_kurt': 10.88481453737684, 'nl_grad_Bz_mean': 344.88730013572416, 'nl_grad_Bz_std': 383.2043553122473, 'nl_grad_Bz_skew': 2.6043006508825277, 'nl_grad_Bz_kurt': 8.734908003414137, 'nl_grad_Bh_mean': 228.66409790596367, 'nl_grad_Bh_std': 314.4024010027067, 'nl_grad_Bh_skew': 3.119120396916261, 'nl_grad_Bh_kurt': 12.05226641966389, 'nl_J_mean': 1350.626487182799, 'nl_J_std': 36301.3813703652, 'nl_J_skew': 2.194293677572936, 'nl_J_kurt': 21.150018141171014, 'nl_Jh_mean': 60590.1412213991, 'nl_Jh_std': 54303638.36243972, 'nl_Jh_skew': 1.1000197859869298, 'nl_Jh_kurt': 49.72482179690839, 'nl_twist_mean': -61.65084948422465, 'nl_twist_std': 2743.295376656444, 'nl_twist_skew': -34.21663499485756, 'nl_twist_kurt': 1376.7499380434501, 'nl_hc_mean': -2998715.957790105, 'nl_hc_std': 43745259.95469983, 'nl_hc_skew': -0.8086331706840002, 'nl_hc_kurt': 49.02158246393265, 'nl_shear_mean': 1.312623532458661, 'nl_shear_std': 0.6785921010173062, 'nl_shear_skew': 0.39613934510892995, 'nl_shear_kurt': -0.6563335362453024, 'nl_rho_mean': 37823.945074423544, 'nl_rho_std': 65525.4269683639, 'nl_rho_skew': 3.5897674999601406, 'nl_rho_kurt': 18.422030655832334, 'umbra_Bz_tot': 9331012.15, 'umbra_Bz_totabs': 1249786.09, 'umbra_itot': 111803407.93025757, 'umbra_itotabs': 4292295.019404108, 'umbra_itot_polarity': 56418390.142805316, 'umbra_ihtot': 97321262838.26909, 'umbra_ihtotabs': 5082105337.676033, 'umbra_hctot': 153447868010.19266, 'umbra_hctotabs': 93188857576.94708, 'umbra_totrho': 4821409.698779788, 'umbra_Bz_mean': 202.2307588996764, 'umbra_Bz_std': 1611.3267901902395, 'umbra_Bz_skew': -0.12427922699027029, 'umbra_Bz_kurt': -1.5378657517251197, 'umbra_Bh_mean': 989.816124165762, 'umbra_Bh_std': 807.0218224645637, 'umbra_Bh_skew': 1.7154622517116105, 'umbra_Bh_kurt': 2.7119762905670717, 'umbra_gamma_mean': 0.10581819810686431, 'umbra_gamma_std': 1.0755717081793932, 'umbra_gamma_skew': -0.09957603505864095, 'umbra_gamma_kurt': -1.7010370380634439, 'umbra_grad_B_mean': 215.20990983045684, 'umbra_grad_B_std': 310.39938675031004, 'umbra_grad_B_skew': 3.333556391599753, 'umbra_grad_B_kurt': 13.385700916677653, 'umbra_grad_Bz_mean': 250.3393787235854, 'umbra_grad_Bz_std': 336.7864543342683, 'umbra_grad_Bz_skew': 3.2406671106765095, 'umbra_grad_Bz_kurt': 13.3761180411686, 'umbra_grad_Bh_mean': 203.67107608700925, 'umbra_grad_Bh_std': 284.50508557884376, 'umbra_grad_Bh_skew': 3.255946427787143, 'umbra_grad_Bh_kurt': 13.258087574035653, 'umbra_J_mean': 694.5461196446777, 'umbra_J_std': 33443.170473878774, 'umbra_J_skew': 1.9336158882692378, 'umbra_J_kurt': 20.367532971949995, 'umbra_Jh_mean': 822347.1420187756, 'umbra_Jh_std': 45982380.983916186, 'umbra_Jh_skew': 0.42178433137526916, 'umbra_Jh_kurt': 62.255261875977936, 'umbra_twist_mean': -10.995713821906223, 'umbra_twist_std': 404.8042341501762, 'umbra_twist_skew': -21.326298674508042, 'umbra_twist_kurt': 1471.38847273908, 'umbra_hc_mean': -15079103.16779079, 'umbra_hc_std': 45275193.86233077, 'umbra_hc_skew': -0.16372962408572886, 'umbra_hc_kurt': 33.90613282425271, 'umbra_shear_mean': 0.6014057695713156, 'umbra_shear_std': 0.4826412229661533, 'umbra_shear_skew': 1.9452218188249515, 'umbra_shear_kurt': 4.247818017702721, 'umbra_rho_mean': 19607.64438787464, 'umbra_rho_std': 56499.93589951711, 'umbra_rho_skew': 4.777613377124937, 'umbra_rho_kurt': 29.94096538592833, 'penumbra_Bz_tot': 12700424.08, 'penumbra_Bz_totabs': 3230314.2800000003, 'penumbra_itot': 108267025.28137878, 'penumbra_itotabs': 7984027.216685459, 'penumbra_itot_polarity': 33309689.63478607, 'penumbra_ihtot': 75461077924.0739, 'penumbra_ihtotabs': 2593777447.627201, 'penumbra_hctot': 93397266199.10783, 'penumbra_hctotabs': 50537641462.13954, 'penumbra_totrho': 11264777.669405933, 'penumbra_Bz_mean': 189.5057069107122, 'penumbra_Bz_std': 881.3975435745195, 'penumbra_Bz_skew': -0.18535533071855823, 'penumbra_Bz_kurt': -0.7543991001428036, 'penumbra_Bh_mean': 966.1163153303153, 'penumbra_Bh_std': 387.61354509898604, 'penumbra_Bh_skew': 1.2409064845957734, 'penumbra_Bh_kurt': 5.223827820555844, 'penumbra_gamma_mean': 0.14912841290339413, 'penumbra_gamma_std': 0.711764702496566, 'penumbra_gamma_skew': -0.2198079860927122, 'penumbra_gamma_kurt': -0.846557388222045, 'penumbra_grad_B_mean': 101.36553665378653, 'penumbra_grad_B_std': 114.9622603354428, 'penumbra_grad_B_skew': 7.975374352811998, 'penumbra_grad_B_kurt': 111.12473127738106, 'penumbra_grad_Bz_mean': 143.53862847667747, 'penumbra_grad_Bz_std': 134.67439648618864, 'penumbra_grad_Bz_skew': 3.1300004261657244, 'penumbra_grad_Bz_kurt': 17.72996218088503, 'penumbra_grad_Bh_mean': 80.11997970583656, 'penumbra_grad_Bh_std': 110.31153965658159, 'penumbra_grad_Bh_skew': 8.006431221222302, 'penumbra_grad_Bh_kurt': 109.26675504071154, 'penumbra_J_mean': -468.3812751780746, 'penumbra_J_std': 12138.613985964907, 'penumbra_J_skew': 4.448758547177717, 'penumbra_J_kurt': 139.35564332656756, 'penumbra_Jh_mean': 152163.40769841612, 'penumbra_Jh_std': 15444437.15680623, 'penumbra_Jh_skew': 12.207005871823018, 'penumbra_Jh_kurt': 858.970700647569, 'penumbra_twist_mean': -0.39764611473542794, 'penumbra_twist_std': 504.39754922721795, 'penumbra_twist_skew': -43.067305421673076, 'penumbra_twist_kurt': 3965.8839799010143, 'penumbra_hc_mean': -2964780.092815883, 'penumbra_hc_std': 12276917.815575985, 'penumbra_hc_skew': -9.681804603570226, 'penumbra_hc_kurt': 236.29880663697668, 'penumbra_shear_mean': 0.9615597184466406, 'penumbra_shear_std': 0.46696775654873457, 'penumbra_shear_skew': 0.6049189620751559, 'penumbra_shear_kurt': 0.5251511508392306, 'penumbra_rho_mean': 16608.86672323268, 'penumbra_rho_std': 23194.273646323447, 'penumbra_rho_skew': 5.858877508475619, 'penumbra_rho_kurt': 69.13803682789747, 'hnum': 7115, 'date': datetime.datetime(2017, 9, 6, 12, 0), 'NOAA_ARS': '12673'}\n\n\n\n```python\nsharps = ar.sharps_dataset\nprint(\"SHARPS Dataset\")\nprint(sharps)\n```\n\n    SHARPS Dataset\n    {'USFLUX': 4.533103e+22, 'MEANGAM': 51.792, 'MEANGBT': 110.105, 'MEANGBZ': 126.385, 'MEANGBH': 76.954, 'MEANJZD': -0.31327546, 'TOTUSJZ': 100571700000000.0, 'MEANALP': -0.06190259, 'MEANJZH': -0.03697439, 'TOTUSJH': 7357.481, 'ABSNJZH': 2271.374, 'SAVNCPP': 78371730000000.0, 'MEANPOT': 21630.71, 'TOTPOT': 1.764815e+24, 'MEANSHR': 45.785, 'SHRGT45': 47.17, 'R_VALUE': 5.305}\n\n\n## Segments / Masks\n\n```python\nsolarmask.active_region_segments.ActiveRegionSegments\n``` \n\nis a class that segments the original four data products into an umbra, neutral line, penumbra and background, but as stated, use these with the ActiveRegion class\n\n\n```python\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\nax1.imshow(ar.cont, cmap)\nax1.axis(False)\nax1.set_title(\"Original Continuum\")\n\nax2.imshow(ar.umbra_mask, cmap)\nax2.axis(False)\nax2.set_title(\"Segmented Umbras\")\n\nfig.set_figwidth(20)\nfig.set_figwidth(20)\n\nplt.show()\n```\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_20_0.png)\n    \n\n\n\n```python\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\nax1.imshow(ar.cont, cmap)\nax1.axis(False)\nax1.set_title(\"Original Continuum\")\n\nax2.imshow(ar.penumbra_mask, cmap)\nax2.axis(False)\nax2.set_title(\"Segmented Penumbras\")\n\nfig.set_figwidth(20)\nfig.set_figwidth(20)\n\nplt.savefig(\"./outputs/penumbras.png\")\nplt.show()\n```\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_21_0.png)\n    \n\n\n\n```python\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\nBz = ar.Bz.copy()\nBz[Bz > 0] = 1\nBz[Bz < 0] = -1\npcm = ax1.imshow(Bz, cmap)\nax1.axis(False)\nax1.set_title(\"Original LOS Magnetogram (Binary Pos and Negative Only)\")\nfig.colorbar(pcm, ax = ax1)\n\nax2.imshow(ar.nl_mask, cmap)\nax2.axis(False)\nax2.set_title(\"Segmented Neutral Line\")\n\nfig.set_figwidth(20)\nfig.set_figwidth(20)\n\nplt.savefig(\"./outputs/nl.png\")\nplt.show()\n```\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_22_0.png)\n    \n\n\n\n```python\nfig, (ax1, ax2) = plt.subplots(1, 2)\n\nax1.imshow(ar.cont, cmap)\nax1.axis(False)\nax1.set_title(\"Original Continuum\")\n\nax2.imshow(ar.background_mask, cmap)\nax2.axis(False)\nax2.set_title(\"Segmented Background\")\n\nfig.set_figwidth(20)\nfig.set_figwidth(20)\n\nplt.savefig(\"./outputs/background.png\")\nplt.show()\n```\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_23_0.png)\n    \n\n\n## Derived Fields\n```python\nsolarmask.active_region_derived_fields.ActiveRegionDerivedFields\n``` \n\nHere are the original fields (the raw data that is extracted from the disc).\n\n\n```python\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4)\n\nax1.imshow(ar.cont, cmap)\nax1.axis(False)\nax1.set_title(\"Continuum\")\n\nax2.imshow(ar.Bz, cmap)\nax2.axis(False)\nax2.set_title(\"Bz (line of sight magnetic flux)\")\n\nax3.imshow(ar.Bx, cmap)\nax3.axis(False)\nax3.set_title(\"Bx (x component of magnetic flux)\")\n\nax4.imshow(ar.By, cmap)\nax4.axis(False)\nax4.set_title(\"By (y component of magnetic flux)\")\n\nfig.set_figwidth(20)\nfig.set_figwidth(20)\n\nplt.show()\n```\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_26_0.png)\n    \n\n\nAnd all of the derived fields:\n\n\n```python\nderived_fields = [\"Bh\", \"gamma\", \"B\", \"grad_B_x\", \"grad_B_y\", \"grad_B\", \"grad_Bh\", \"grad_Bh_x\", \"grad_Bh_y\", \"grad_Bz\", \"grad_Bz_x\", \"grad_Bz_y\", \"grad_Bx\", \"grad_Bx_x\", \"grad_Bx_y\", \"grad_By\", \"grad_By_x\", \"grad_By_y\", \"J\", \"Jh\", \"hc\", \"twist\", \"shear\", \"rho\", \"Bpx\", \"Bpy\", \"Bpz\"]\n\nfig, axs = plt.subplots(9, 3)\n\nk = 0\nfor i in range(9):\n    for j in range(3):\n        axs[i][j].imshow(getattr(ar, derived_fields[k]), cmap)\n        axs[i][j].axis(False)\n        axs[i][j].set_title(derived_fields[k])\n        k += 1\n\nfig.set_figwidth(20)\nfig.set_figheight(50)\nplt.show()\n```\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_28_0.png)\n    \n\n\n## Parameters\n```python\nsolarmask.active_region_parameters.ActiveRegionParameters\n``` \n\nParameters are computed using a binary mask. To demonstrate, we will first compute the parameter on the entire region, then on a randomized binary mask\n\nParameters are either single scalars (for example, the sum of flux over the mask), or expressed as the first four statistical moments of a magnetic field (average, standard deviation, skew and kurtosis). \n\n#### Scalar Parameters:\n\n\n```python\nfull_mask = np.ones(ar.shape, dtype = bool)\n\nfor func in ar.scalar_features:\n    rmask = np.random.choice([True, False], ar.shape)\n    \n    full_data = func(full_mask)\n    rmask_data = func(rmask)\n    \n    print(func.__name__)\n    print(f\"    Full Mask: {full_data:.2f}\")\n    print(f\"    Rand Mask: {rmask_data:.2f}\")\n```\n\n    Bz_tot\n        Full Mask: 48436571.73\n        Rand Mask: 24166936.01\n    Bz_totabs\n        Full Mask: 912665.07\n        Rand Mask: 484950.29\n    itot\n        Full Mask: 1158731875.88\n        Rand Mask: 580027916.47\n    itotabs\n        Full Mask: 513884.65\n        Rand Mask: 2932016.42\n    itot_polarity\n        Full Mask: 69741420.33\n        Rand Mask: 36128169.30\n    ihtot\n        Full Mask: 260424630525.37\n        Rand Mask: 131237311628.62\n    ihtotabs\n        Full Mask: 3658852029.03\n        Rand Mask: 3103011378.85\n    hctot\n        Full Mask: 346536044344.57\n        Rand Mask: 172267782225.89\n    hctotabs\n        Full Mask: 152841919638.94\n        Rand Mask: 72413133070.69\n    totrho\n        Full Mask: 21887487.61\n        Rand Mask: 10903698.75\n\n\n#### Stastical Parameters of Fields:\n\n\n```python\nfrom solarmask.utils import stat_moment_label, stat_moment # labels and gets mean, std, skew and kurtosis from a given set of data\n\nfor func in ar.stat_moments:\n    print(func)\n    rmask = np.random.choice([True, False], ar.shape)\n\n    field = getattr(ar, func)\n    \n    plt.hist(field.flatten(), density = True, bins = 200)\n    plt.title(func + \" distribution\")\n    plt.xlabel(func)\n    plt.ylabel(\"Density\")\n    plt.show()\n    \n    \n    labels = stat_moment_label(func)\n    values_full = stat_moment(field[full_mask])\n    values_rand = stat_moment(field[rmask])\n    \n    for label, f, r in zip(labels, values_full, values_rand):\n        print(f\"    {label}\")\n        print(f\"        Full Mask: {f:.2f}\")\n        print(f\"        Rand Mask: {r:.2f}\")\n```\n\n    Bz\n\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_33_1.png)\n    \n\n\n        Bz_mean\n            Full Mask: 2.96\n            Rand Mask: 3.02\n        Bz_std\n            Full Mask: 353.91\n            Rand Mask: 355.30\n        Bz_skew\n            Full Mask: 0.86\n            Rand Mask: 0.82\n        Bz_kurt\n            Full Mask: 15.71\n            Rand Mask: 15.94\n    Bh\n\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_33_3.png)\n    \n\n\n        Bh_mean\n            Full Mask: 181.74\n            Rand Mask: 181.44\n        Bh_std\n            Full Mask: 301.12\n            Rand Mask: 299.84\n        Bh_skew\n            Full Mask: 4.28\n            Rand Mask: 4.23\n        Bh_kurt\n            Full Mask: 27.07\n            Rand Mask: 26.36\n    gamma\n\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_33_5.png)\n    \n\n\n        gamma_mean\n            Full Mask: -0.10\n            Rand Mask: -0.10\n        gamma_std\n            Full Mask: 0.68\n            Rand Mask: 0.68\n        gamma_skew\n            Full Mask: 0.20\n            Rand Mask: 0.20\n        gamma_kurt\n            Full Mask: -1.07\n            Rand Mask: -1.07\n    grad_B\n\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_33_7.png)\n    \n\n\n        grad_B_mean\n            Full Mask: 49.82\n            Rand Mask: 49.69\n        grad_B_std\n            Full Mask: 72.49\n            Rand Mask: 71.83\n        grad_B_skew\n            Full Mask: 10.69\n            Rand Mask: 10.38\n        grad_B_kurt\n            Full Mask: 214.84\n            Rand Mask: 201.05\n    grad_Bz\n\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_33_9.png)\n    \n\n\n        grad_Bz_mean\n            Full Mask: 51.64\n            Rand Mask: 51.64\n        grad_Bz_std\n            Full Mask: 81.90\n            Rand Mask: 82.53\n        grad_Bz_skew\n            Full Mask: 9.12\n            Rand Mask: 9.45\n        grad_Bz_kurt\n            Full Mask: 162.31\n            Rand Mask: 175.72\n    grad_Bh\n\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_33_11.png)\n    \n\n\n        grad_Bh_mean\n            Full Mask: 37.43\n            Rand Mask: 37.44\n        grad_Bh_std\n            Full Mask: 59.76\n            Rand Mask: 59.28\n        grad_Bh_skew\n            Full Mask: 14.68\n            Rand Mask: 14.55\n        grad_Bh_kurt\n            Full Mask: 346.62\n            Rand Mask: 334.47\n    J\n\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_33_13.png)\n    \n\n\n        J_mean\n            Full Mask: 1.67\n            Rand Mask: -7.25\n        J_std\n            Full Mask: 6921.27\n            Rand Mask: 6803.49\n        J_skew\n            Full Mask: 5.78\n            Rand Mask: 4.36\n        J_kurt\n            Full Mask: 329.21\n            Rand Mask: 279.52\n    Jh\n\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_33_15.png)\n    \n\n\n        Jh_mean\n            Full Mask: 11870.76\n            Rand Mask: -3903.42\n        Jh_std\n            Full Mask: 7499866.04\n            Rand Mask: 7291553.43\n        Jh_skew\n            Full Mask: 8.10\n            Rand Mask: -4.79\n        Jh_kurt\n            Full Mask: 2704.46\n            Rand Mask: 3471.61\n    twist\n\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_33_17.png)\n    \n\n\n        twist_mean\n            Full Mask: -5.38\n            Rand Mask: -11.19\n        twist_std\n            Full Mask: 5431.10\n            Rand Mask: 5616.44\n        twist_skew\n            Full Mask: 19.27\n            Rand Mask: -4.17\n        twist_kurt\n            Full Mask: 22725.39\n            Rand Mask: 30353.33\n    hc\n\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_33_19.png)\n    \n\n\n        hc_mean\n            Full Mask: -495879.36\n            Rand Mask: -513499.04\n        hc_std\n            Full Mask: 7445779.22\n            Rand Mask: 7413225.13\n        hc_skew\n            Full Mask: -7.80\n            Rand Mask: -12.93\n        hc_kurt\n            Full Mask: 1132.95\n            Rand Mask: 1220.15\n    shear\n\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_33_21.png)\n    \n\n\n        shear_mean\n            Full Mask: 1.04\n            Rand Mask: 1.04\n        shear_std\n            Full Mask: 0.53\n            Rand Mask: 0.53\n        shear_skew\n            Full Mask: 0.77\n            Rand Mask: 0.77\n        shear_kurt\n            Full Mask: 0.62\n            Rand Mask: 0.61\n    rho\n\n\n\n    \n![png](https://raw.githubusercontent.com/SWxTREC/solarmask/master/docs/guide/output_33_23.png)\n    \n\n\n        rho_mean\n            Full Mask: 1784.72\n            Rand Mask: 1777.62\n        rho_std\n            Full Mask: 10948.43\n            Rand Mask: 10749.47\n        rho_skew\n            Full Mask: 20.26\n            Rand Mask: 19.21\n        rho_kurt\n            Full Mask: 661.46\n            Rand Mask: 554.70\n\n\n## Reading and Writing Binary Masks to the Disk\n\nThe four segments (neutral line, umbra, penumbra and neutral line) can be written to the disk as binary files. This is a very compressed version of the map where the first 8 bytes represent the shape of the data, and the remaining data is a *bitstring* that contains 1's and 0's where pixels are true or false.\n\n\n```python\nnl_mask = ar.nl_mask\num_mask = ar.umbra_mask\npu_mask = ar.penumbra_mask\nbk_mask = ar.background_mask\n\nfrom solarmask.data import write_mask, read_mask\n\nwrite_mask(nl_mask, hnum, date, \"./masks/nl\")\nnl_mask_2 = read_mask(hnum, date, \"./masks/nl\")\nassert np.all(nl_mask == nl_mask_2)\n\nwrite_mask(um_mask, hnum, date, \"./masks/umbra\")\num_mask_2 = read_mask(hnum, date, \"./masks/umbra\")\nassert np.all(um_mask == um_mask_2)\n\nwrite_mask(pu_mask, hnum, date, \"./masks/penumbra\")\npu_mask_2 = read_mask(hnum, date, \"./masks/penumbra\")\nassert np.all(pu_mask == pu_mask_2)\n\nwrite_mask(bk_mask, hnum, date, \"./masks/background\")\nbk_mask_2 = read_mask(hnum, date, \"./masks/background\")\nassert np.all(bk_mask == bk_mask_2)\n```\n\nDon't worry, you don't need to know how the process works below. If you are curious, here is the compression algorithm:\n\nA mask that looked like this:\n\nTrue False True  False True\n\nTrue True  True  True  True\n\nTrue True  True  True  True\n\nTrue True  True  False True\n\nTrue False False True  True\n\nWould be converted to:\n\n1 0 1 0 1\n\n1 1 1 1 1\n\n1 1 1 1 1\n\n1 1 1 0 1\n\n1 0 0 1 1\n\nThen flattened:\n\n1010111111111111110110011\n\nBuffered by 0's so the length is a multiple of 8:\n\n00000001010111111111111110110011\n\n\nConverted to bytes:\n\n00000001 01011111 11111111 10110011\n\n0x01 0x5F 0xFF 0xB3 \n\nThen we add the shape (5 x 5) = (0x00 0x00 0x00 0x05 0x00 0x00 0x00 0x05) to the beginning:\n\n0x00 0x00 0x00 0x05 0x00 0x00 0x00 0x05 0x01 0x5F 0xFF 0xB3 \n\n\nNote that if everything is False, I just have the shape of the mask (no proceeding data)\n\nLet's see this in action. If a mask is size nxm, then the number of bits in the bit string is nm, the number of buffer bits is nm % 8, and the number of prefix bits is 2x4x8 = 64 so the number of bytes is going to be nm + (nm % 8) + 64 plus one null terminator byte\n\nThen the total number of bytes in a file is (nm + (nm % 8) + 64) / 8 + 1\n\n\n```python\nn, m = nl_mask.shape\n\nprint((n*m + ((n * m) % 8) + 64) / 8 + 1)\n\nf_size = os.stat(\"./masks/nl/sharp_7115/mask_7115_20170906_120000.bin\").st_size\n\nprint(f_size)\n```\n\n    38537.0\n    38537\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SWxTREC/solarmask",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "solarmask",
    "package_url": "https://pypi.org/project/solarmask/",
    "platform": null,
    "project_url": "https://pypi.org/project/solarmask/",
    "project_urls": {
      "BugTracker": "https://github.com/SWxTREC/solarmask/issues",
      "Homepage": "https://github.com/SWxTREC/solarmask"
    },
    "release_url": "https://pypi.org/project/solarmask/1.0.5/",
    "requires_dist": [
      "numpy",
      "matplotlib",
      "pandas",
      "torch",
      "scikit-learn",
      "scikit-image",
      "scipy",
      "astropy"
    ],
    "requires_python": ">=3.6",
    "summary": "An active region segmentation library",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13881900,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1faa9ad38cdb19b1e8f63b7f972d9a6d59cf20c811798d4006f7cc5c918856a",
          "md5": "7c871b41f5307e9bfb1dc06e0a4e4346",
          "sha256": "dc4db829c53c87bb469514cb30d7a4a40468d0a1f8944c925a0d05f53e366a66"
        },
        "downloads": -1,
        "filename": "solarmask-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c871b41f5307e9bfb1dc06e0a4e4346",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17105,
        "upload_time": "2022-05-17T16:44:09",
        "upload_time_iso_8601": "2022-05-17T16:44:09.853842Z",
        "url": "https://files.pythonhosted.org/packages/c1/fa/a9ad38cdb19b1e8f63b7f972d9a6d59cf20c811798d4006f7cc5c918856a/solarmask-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b11ce8b6052a9e768870cec283489e39f900b9318b8f37422d4e93a1eebf5221",
          "md5": "99731aa2210082a3d150ca51a9420d97",
          "sha256": "a0d522960d07efe1e81530136b6d2f20e04754e99a253007153a88e62cb5a59c"
        },
        "downloads": -1,
        "filename": "solarmask-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "99731aa2210082a3d150ca51a9420d97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15157,
        "upload_time": "2022-05-17T16:44:11",
        "upload_time_iso_8601": "2022-05-17T16:44:11.252666Z",
        "url": "https://files.pythonhosted.org/packages/b1/1c/e8b6052a9e768870cec283489e39f900b9318b8f37422d4e93a1eebf5221/solarmask-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0a07af4f9f5b51ef096f603425802e7e959a9960df10616bb8a0411b84149ea",
          "md5": "35f5a83e4a0b7c070eb0b69c558b2ffb",
          "sha256": "d5befe73c6ef83c3ed821db1375545749456b033ead6ee207d165f03ae137aca"
        },
        "downloads": -1,
        "filename": "solarmask-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35f5a83e4a0b7c070eb0b69c558b2ffb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16572,
        "upload_time": "2022-05-19T16:22:10",
        "upload_time_iso_8601": "2022-05-19T16:22:10.623757Z",
        "url": "https://files.pythonhosted.org/packages/e0/a0/7af4f9f5b51ef096f603425802e7e959a9960df10616bb8a0411b84149ea/solarmask-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34cd791ef6729bc2a6e108d4dd247d8f25d2e330398472601b368252875cab66",
          "md5": "cbd9e560131cac312e52b80b690c8537",
          "sha256": "62ebfc79010c39da2a3f23eaa5f5a4da5d0873a7e63f70abaa88bf37f4f339b0"
        },
        "downloads": -1,
        "filename": "solarmask-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cbd9e560131cac312e52b80b690c8537",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14692,
        "upload_time": "2022-05-19T16:22:12",
        "upload_time_iso_8601": "2022-05-19T16:22:12.167921Z",
        "url": "https://files.pythonhosted.org/packages/34/cd/791ef6729bc2a6e108d4dd247d8f25d2e330398472601b368252875cab66/solarmask-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4226c8e924b883f19bb6e135f0e88ea09ab8e842aaa19903c197b367f41853dd",
          "md5": "0ea88c24ebf02fb8ba1d4ee855d5c600",
          "sha256": "b0097c5171c1c55b8d8d9008caf404db16e2c2911b5fa751eb73550d21ba6939"
        },
        "downloads": -1,
        "filename": "solarmask-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ea88c24ebf02fb8ba1d4ee855d5c600",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16487,
        "upload_time": "2022-05-19T16:35:59",
        "upload_time_iso_8601": "2022-05-19T16:35:59.425254Z",
        "url": "https://files.pythonhosted.org/packages/42/26/c8e924b883f19bb6e135f0e88ea09ab8e842aaa19903c197b367f41853dd/solarmask-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f304c99f39f475d0901f48e758523851ce30aa62431cc3b8a1c98f9fe96b03e6",
          "md5": "64ca83224538e3ba7b3ba528c05cbcbf",
          "sha256": "92ca4680083370048206c933d85d7d9ec471f6f9dd81258bfb72f1ba639bd5c5"
        },
        "downloads": -1,
        "filename": "solarmask-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "64ca83224538e3ba7b3ba528c05cbcbf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27258,
        "upload_time": "2022-05-19T16:36:01",
        "upload_time_iso_8601": "2022-05-19T16:36:01.339146Z",
        "url": "https://files.pythonhosted.org/packages/f3/04/c99f39f475d0901f48e758523851ce30aa62431cc3b8a1c98f9fe96b03e6/solarmask-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4b03866201a10885cb626d3186063c823b8e88b64c151e4be1a13adc24c3343",
          "md5": "44229f3cfbd46340dcc92ee0c39c5254",
          "sha256": "6ac38a1b8e8988cb1f4c5fc6b79f1654c89033d4ec0eff8eaaae89608b4d264d"
        },
        "downloads": -1,
        "filename": "solarmask-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44229f3cfbd46340dcc92ee0c39c5254",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22928,
        "upload_time": "2022-05-19T16:37:11",
        "upload_time_iso_8601": "2022-05-19T16:37:11.832360Z",
        "url": "https://files.pythonhosted.org/packages/f4/b0/3866201a10885cb626d3186063c823b8e88b64c151e4be1a13adc24c3343/solarmask-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea470a5fe1daed976c22ae01d54a60bca221585aab178f55c8b93449e118f14f",
          "md5": "2460dab23d0fb9482a3c1c886525bda4",
          "sha256": "af056065e4a815cd7a073e7a261aeb2ae379519a27cac1c07e0cc42c27549987"
        },
        "downloads": -1,
        "filename": "solarmask-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2460dab23d0fb9482a3c1c886525bda4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27484,
        "upload_time": "2022-05-19T16:37:15",
        "upload_time_iso_8601": "2022-05-19T16:37:15.818884Z",
        "url": "https://files.pythonhosted.org/packages/ea/47/0a5fe1daed976c22ae01d54a60bca221585aab178f55c8b93449e118f14f/solarmask-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f36f44cef098001d0e0a279c99a5e1d9322b54f05b1c07035ea2fcfcf7fe41c4",
          "md5": "6abead5e4281264013be741ca305b8eb",
          "sha256": "244bcbaf57c7d63cb08d2aeb4bba1633f7ddb0f70f7b0845c3f491aaacfcbe86"
        },
        "downloads": -1,
        "filename": "solarmask-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6abead5e4281264013be741ca305b8eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24938,
        "upload_time": "2022-05-20T21:04:10",
        "upload_time_iso_8601": "2022-05-20T21:04:10.299846Z",
        "url": "https://files.pythonhosted.org/packages/f3/6f/44cef098001d0e0a279c99a5e1d9322b54f05b1c07035ea2fcfcf7fe41c4/solarmask-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3f0e1a0c708280af3e2e9f9958e7c75a0f35e79cf6add555bd9cbdefb91af2f",
          "md5": "b09abee1fed6e936149140854472553b",
          "sha256": "57fc3f894f6c7a306622a07e6765c6357632f26096e5f64f43890ffc9e5feef6"
        },
        "downloads": -1,
        "filename": "solarmask-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b09abee1fed6e936149140854472553b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31611,
        "upload_time": "2022-05-20T21:04:12",
        "upload_time_iso_8601": "2022-05-20T21:04:12.328081Z",
        "url": "https://files.pythonhosted.org/packages/d3/f0/e1a0c708280af3e2e9f9958e7c75a0f35e79cf6add555bd9cbdefb91af2f/solarmask-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f36f44cef098001d0e0a279c99a5e1d9322b54f05b1c07035ea2fcfcf7fe41c4",
        "md5": "6abead5e4281264013be741ca305b8eb",
        "sha256": "244bcbaf57c7d63cb08d2aeb4bba1633f7ddb0f70f7b0845c3f491aaacfcbe86"
      },
      "downloads": -1,
      "filename": "solarmask-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6abead5e4281264013be741ca305b8eb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24938,
      "upload_time": "2022-05-20T21:04:10",
      "upload_time_iso_8601": "2022-05-20T21:04:10.299846Z",
      "url": "https://files.pythonhosted.org/packages/f3/6f/44cef098001d0e0a279c99a5e1d9322b54f05b1c07035ea2fcfcf7fe41c4/solarmask-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3f0e1a0c708280af3e2e9f9958e7c75a0f35e79cf6add555bd9cbdefb91af2f",
        "md5": "b09abee1fed6e936149140854472553b",
        "sha256": "57fc3f894f6c7a306622a07e6765c6357632f26096e5f64f43890ffc9e5feef6"
      },
      "downloads": -1,
      "filename": "solarmask-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "b09abee1fed6e936149140854472553b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 31611,
      "upload_time": "2022-05-20T21:04:12",
      "upload_time_iso_8601": "2022-05-20T21:04:12.328081Z",
      "url": "https://files.pythonhosted.org/packages/d3/f0/e1a0c708280af3e2e9f9958e7c75a0f35e79cf6add555bd9cbdefb91af2f/solarmask-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}