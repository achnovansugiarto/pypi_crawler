{
  "info": {
    "author": "Tony Liu",
    "author_email": "contacttonyliu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Simple Metagenomics\nA BIOF501 term project for inferring protein annotations of metagenome-assembled genomes (MAG) from metagenomic reads hosted on [NCBI's sequence read archive (SRA)](https://www.ncbi.nlm.nih.gov/sra)\n\n-------------------------\n\n## For the Impatient\nSetup:\n```\npip install simple-metagenomics\nsmg setup -r ./ref\n```\nTo run **with default subsampling** (to 1% of the original for improved runtime):\n```\nsmg run -r ./ref -i SRR19573024 -o ./out\n```\nTo run with **no subsampling**:\n```\nsmg run -r ./ref -s 1 -i SRR19573024 -o ./out\n```\n\n## Background and Rationale\n\nThroughout the various biomes of Earth, complex consortia of microorganisms thrive and cycle nutrients at scales ranging from symbiosis to global biogeochemical cycles. The study of these consortia has contributed to advances in many fields, including health in the context of host microbiomes [[1](#references)], renewable energy in the context of biofuels [[2](#references)], and ecology in the context of distributed metabolisms [[3](#references)]. Since only a select few microbes have been successfully cultured in laboratory conditions, the typical approach is to interrogate the microbial gene content of a sample directly using metagenomics.\n\nThe aim of this pipeline is to provide the simplest possible method for downloading and then converting raw metagenomic sequences into meaningful annotations. For additional details, please refer to the [implementation](#implementation) section.\n\n## Usage\n\n### **Manual Dependencies**\n\n- Linux OS/amd64\n- Python, version>=3.4 (so that you also have pip)\n- Singularity\n\n### **Installation**\nWe recommend that you use a virtual environment\n\nvia conda...\n```\n    conda create --no-default-packages --name smg python\n    conda activate smg\n```\n\n**or** via venv\n```\n    pip install venv\n    python -m venv ./smg\n    source ./smg/bin/activate\n\n```\n\nIn the environment, install simple metagenomics\n```\n    pip install simple-metagenomics\n```\n\nSelect a folder to save additional reference resources (`./ref`).\n```\n    smg setup -r ./ref\n```\n\n### **Execution**\n\nObtain the SRA run ID for a whole genome metagenomics sequencing entry. For example, we use `SRR19573024`, which points to reads for a cyanobacteria bioreactor community [[4](#references)]. `./ref` refers to the same folder used in the last installation step.<br>\n[Example search](https://www.ncbi.nlm.nih.gov/sra?term=(%22metagenome%22%5BOrganism%5D)%20AND%20%22wgs%22%5BStrategy%5D)\n\n```\n    smg run -r ./ref -i SRR19573024 -o ./out\n```\n\nOnce complete, look for annotation tables under `./out/SRR19573024/diamond/`.<br>\n*Expected runtime: ~30 minutes with 16 threads and subsampled to 1%.*\n\nExpected output:<br>\n\n    ./out                       # base output path specified with \"-o\"\n    ├── .snakemake              # snakemake generated files, including logs\n    ├── snakemake               # snakemake cache\n    ├── SRR19573024\n        ├── sra_raw             # original fastqs from SRA\n        ├── input               # subsampled fastqs\n        ├── megahit             # intermediate metagenomic assembly\n        ├── maxbin2             # intermediate bins\n        ├── prodigal            # intermediate ORFs per bin\n        ├── diamond\n            ├── 001.fasta.tsv   # annotation table for 1 bin\n            ├── 002.fasta.tsv   # 2 bins should be resolved from SRR19573024 by default\n\nColumns: Query ID (ORF), Subject title (annotation), Percentage of identical matches, Expected value <br>\nInterestingly, photosynthesis genes were found in both bins, including photosystems I and II. Bin 001, however, showed a greater potential to fix nitrogen since nifB, nifS, and nifU were identified which accounts for 3 out of the 4 genes of a known nitrogen fixation operon [[5](#references)]. While the remaining gene, fdxN, was not explicitly identified, a ferredoxin nitrite reductase was found in its' stead. Only nifB was found in bin 002.\n\n[Complete annotation tables](/expected_output/)\n\n## Implementation\n\n<table>\n <tr>\n    <td>\n        <img src=\"https://raw.githubusercontent.com/Tony-xy-Liu/simple-metagenomics/main/resources/dag.svg\" alt=\"(workflow diagram, view on github)\" style=\"min-width:25vw;max-height:75vh\" width=\"700px\"/>\n    </td>\n    <td valign=\"top\">\n        <p>\n            The workflow is managed by snakemake [<a href=\"#references\">6</a>] with all workflow-related dependencies packaged into a Docker container to maximize reproducibiltiy. Due to its' rising popularity, especially in the research community, Singularity [<a href=\"#references\">7</a>] may be used as an alternative to Docker. The container image is hosted on <a href=\"https://quay.io/repository/txyliu/simple-metagenomics\">Quay.io</a> and automatically pulled during setup.\n        </p>\n        <p>\n            <b>sra_download:</b> Using <a href=\"https://github.com/ncbi/sra-tools/wiki\">sra toolkit</a>, we download the paired-paired end fastqs pointed to by the given SRA run ID.\n        </p>\n        <p>\n            <b>subsample:</b> A python script randomly subsamples the fastq reads to the given percentage using <a href=\"https://numpy.org/doc/stable/\">numpy</a>\n        </p>\n        <p>\n            <b>Megahit [<a href=\"#references\">8</a>]:</b> The subsampled reads are assembled into longer segments (contigs).\n        </p>\n        <p>\n            <b>Maxbin2 [<a href=\"#references\">9</a>]:</b> These segments are then clusted into bins based on tetranucleotide frequency and read coverage.\n        </p>\n        <p>\n            <b>Prodigal [<a href=\"#references\">10</a>]:</b> The contigs of each bin are then scanned for open reading frames (ORF) by using a dynamic programming algorithm that takes into account ribosomal binding sites, start & stop codons, and ORF length.\n        </p>\n        <p>\n            <b>Diamond [<a href=\"#references\">11</a>]:</b> Predicted ORFs are annotated based on the degree of homology with known reference sequences in the <b>Clusters of Orthologous Genes (COG)</b> [<a href=\"#references\">12</a>] database.\n        </p>\n    </td>\n </tr>\n</table>\n\n## **Command Line Interface**\n```\n$ smg\nsimple-metagenomics v1.0\nhttps://github.com/Tony-xy-Liu/simple-metagenomics\n\nSyntax: smg COMMAND [OPTIONS]\n\nWhere COMMAND is one of:\nsetup\nrun\n\nfor additional help, use:\nsmg COMMAND -h\n```\n```\n$ smg setup\nusage: smg setup [-h] -r PATH [-c TYPE]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -r PATH     where to save required resources\n  -c TYPE     the resource container type, choose from: \"singularity\"\n              (default) or \"docker\"\n\nthe following arguments are required: -r\n```\n```\n$ smg run\nusage: smg run [-h] -r PATH -i SRA_ID -o PATH [-s DECIMAL] [-t INT] [--mock]\n\noptional arguments:\n  -h, --help  show this help message and exit\n  -r PATH     path to saved required resources from running: smg setup\n  -i SRA_ID   example: SRR19573024\n  -o PATH     output folder\n  -s DECIMAL  subsample fraction for raw reads, set to 1 for no subsampling,\n              default:0.01\n  -t INT      threads, default:16\n  --mock      dry run snakemake\n\nthe following arguments are required: -r, -i, -o\n```\n\n## References\n\n[1] [Thomas S, Izard J, Walsh E, Batich K, Chongsathidkiet P, Clarke G, Sela DA, Muller AJ, Mullin JM, Albert K, Gilligan JP, DiGuilio K, Dilbarova R, Alexander W, Prendergast GC. 2017. The Host Microbiome Regulates and Maintains Human Health: A Primer and Perspective for Non-Microbiologists. Cancer Res 77:1783–1812.](https://doi.org/10.1158/0008-5472.CAN-16-2929)\n\n[2] [Nozzi N, Oliver J, Atsumi S. 2013. Cyanobacteria as a Platform for Biofuel Production. Front Bioeng Biotechnol 1.](https://www.frontiersin.org/articles/10.3389/fbioe.2013.00007/full)\n\n[3] [McCutcheon JP, von Dohlen CD. 2011. An interdependent metabolic patchwork in the nested symbiosis of mealybugs. Curr Biol CB 21:1366–1372.](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3169327/)\n\n[4] [Noonan AJC, Qiu Y, Kieft B, Formby S, Liu T, Dofher K, Koch M, Hallam SJ. 2022. Metagenome-Assembled Genomes for “Candidatus Phormidium sp. Strain AB48” and Co-occurring Microorganisms from an Industrial Photobioreactor Environment. Microbiol Resour Announc 0:e00447-22.](https://doi.org/10.1128/mra.00447-22)\n\n[5] [Mulligan ME, Haselkorn R. 1989. Nitrogen fixation (nif) genes of the cyanobacterium Anabaena species strain PCC 7120. J Biol Chem 264:19200–19207.](https://doi.org/10.1016/S0021-9258(19)47287-6)\n\n[6] [Mölder F, Jablonski KP, Letcher B, Hall MB, Tomkins-Tinch CH, Sochat V, Forster J, Lee S, Twardziok SO, Kanitz A, Wilm A, Holtgrewe M, Rahmann S, Nahnsen S, Köster J. 2021. Sustainable data analysis with Snakemake. 10:33.](https://doi.org/10.12688/f1000research.29032.2)\n\n[7] [Kurtzer GM, Sochat V, Bauer MW. 2017. Singularity: Scientific containers for mobility of compute. PLOS ONE 12:e0177459.](https://doi.org/10.1371/journal.pone.0177459)\n\n[8] [Li D, Liu C-M, Luo R, Sadakane K, Lam T-W. 2015. MEGAHIT: an ultra-fast single-node solution for large and complex metagenomics assembly via succinct de Bruijn graph. Bioinformatics 31:1674–1676.](https://doi.org/10.1093/bioinformatics/btv033)\n\n[9] [Wu Y-W, Simmons BA, Singer SW. 2016. MaxBin 2.0: an automated binning algorithm to recover genomes from multiple metagenomic datasets. Bioinformatics 32:605–607.](https://doi.org/10.1093/bioinformatics/btv638)\n\n[10] [Hyatt D, Chen G-L, LoCascio PF, Land ML, Larimer FW, Hauser LJ. 2010. Prodigal: prokaryotic gene recognition and translation initiation site identification. BMC Bioinformatics 11:119.](https://doi.org/10.1186/1471-2105-11-119)\n\n[11] [Buchfink B, Xie C, Huson DH. 2015. Fast and sensitive protein alignment using DIAMOND. 1. Nat Methods 12:59–60.](https://doi.org/10.1038/nmeth.3176)\n\n[12] [Tatusov RL, Galperin MY, Natale DA, Koonin EV. 2000. The COG database: a tool for genome-scale analysis of protein functions and evolution. Nucleic Acids Res 28:33–36.](https://doi.org/10.1093%2Fnar%2F28.1.33)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Tony-xy-Liu/simple-metagenomics",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simple-metagenomics",
    "package_url": "https://pypi.org/project/simple-metagenomics/",
    "platform": null,
    "project_url": "https://pypi.org/project/simple-metagenomics/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Tony-xy-Liu/simple-metagenomics/issues",
      "Homepage": "https://github.com/Tony-xy-Liu/simple-metagenomics"
    },
    "release_url": "https://pypi.org/project/simple-metagenomics/1.0.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "metagenomics pipline for BIOF501",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16054588,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c75e431824665d00dbe07fd491cb4441ae160b7d360b00e0af6e4be4f61273f4",
          "md5": "71b82dc93a415ea57150a273da806b37",
          "sha256": "9be993aed486c6521767decd4ea2a1d3c53480bf5c3c421b846fff5a8293dba5"
        },
        "downloads": -1,
        "filename": "simple_metagenomics-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71b82dc93a415ea57150a273da806b37",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8385,
        "upload_time": "2022-12-10T00:05:22",
        "upload_time_iso_8601": "2022-12-10T00:05:22.459168Z",
        "url": "https://files.pythonhosted.org/packages/c7/5e/431824665d00dbe07fd491cb4441ae160b7d360b00e0af6e4be4f61273f4/simple_metagenomics-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2cc959b4a858d16998a8c4a86f4897c3f95008be0e189e803a3a5790db00671",
          "md5": "cf35e3fbaa29524d733f7cc873f7e1da",
          "sha256": "6c4256b98b338e7033cf5ed055e6a9ec451f489eac424e9b52f24e3300bfe79e"
        },
        "downloads": -1,
        "filename": "simple_metagenomics-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf35e3fbaa29524d733f7cc873f7e1da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8442,
        "upload_time": "2022-12-10T00:14:04",
        "upload_time_iso_8601": "2022-12-10T00:14:04.368687Z",
        "url": "https://files.pythonhosted.org/packages/c2/cc/959b4a858d16998a8c4a86f4897c3f95008be0e189e803a3a5790db00671/simple_metagenomics-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fd986f69eef8de78b8ddcf063da56bbd2e6e5a47b7853a4b3e0a8887a4e4679",
          "md5": "c4fa10ca90914b7e46d18a2bc0f77207",
          "sha256": "0c0eee509a0de15d86c6cd379ecb5c000900e1fc803c0f2bf769118a254cf9e9"
        },
        "downloads": -1,
        "filename": "simple_metagenomics-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4fa10ca90914b7e46d18a2bc0f77207",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8450,
        "upload_time": "2022-12-10T00:26:47",
        "upload_time_iso_8601": "2022-12-10T00:26:47.163597Z",
        "url": "https://files.pythonhosted.org/packages/2f/d9/86f69eef8de78b8ddcf063da56bbd2e6e5a47b7853a4b3e0a8887a4e4679/simple_metagenomics-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2fd986f69eef8de78b8ddcf063da56bbd2e6e5a47b7853a4b3e0a8887a4e4679",
        "md5": "c4fa10ca90914b7e46d18a2bc0f77207",
        "sha256": "0c0eee509a0de15d86c6cd379ecb5c000900e1fc803c0f2bf769118a254cf9e9"
      },
      "downloads": -1,
      "filename": "simple_metagenomics-1.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c4fa10ca90914b7e46d18a2bc0f77207",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8450,
      "upload_time": "2022-12-10T00:26:47",
      "upload_time_iso_8601": "2022-12-10T00:26:47.163597Z",
      "url": "https://files.pythonhosted.org/packages/2f/d9/86f69eef8de78b8ddcf063da56bbd2e6e5a47b7853a4b3e0a8887a4e4679/simple_metagenomics-1.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}