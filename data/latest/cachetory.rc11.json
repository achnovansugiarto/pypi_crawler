{
  "info": {
    "author": "Pavel Perestoronin",
    "author_email": "pavel.perestoronin@kpn.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet :: WWW/HTTP",
      "Typing :: Typed"
    ],
    "description": "# Cachetory\n\n[![PyPI](https://img.shields.io/pypi/v/cachetory?logo=python&logoColor=yellow)](https://pypi.org/project/cachetory/)\n[![Python versions](https://img.shields.io/pypi/pyversions/cachetory?logo=python&logoColor=yellow)](https://pypi.org/project/cachetory/)\n[![Checks](https://img.shields.io/github/actions/workflow/status/kpn/cachetory/check.yml?label=checks&logo=github)](https://github.com/kpn/cachetory/actions/workflows/check.yml)\n[![Coverage](https://codecov.io/gh/kpn/cachetory/branch/main/graph/badge.svg?token=UNYTTvxiWk)](https://codecov.io/gh/kpn/cachetory)\n[![Code style](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/kpn/cachetory)\n\n## Quickstart\n\n```python\nfrom cachetory import serializers\nfrom cachetory.backends import async_ as async_backends\nfrom cachetory.caches.async_ import Cache\n\n\ncache = Cache[int, bytes](\n    serializer=serializers.from_url(\"pickle://?pickle-protocol=4\"),\n    backend=async_backends.from_url(\"redis://localhost:6379\"),\n)\nasync with cache:\n    await cache.set(\"foo\", 42)\n    assert await cache.get(\"foo\") == 42\n```\n\nℹ️ **Note:** it's perfectly fine not to use the context manager if, for example, you need a cache instance to live through entire application lifetime:\n\n```python\n# caches.py:\ncache = Cache(...)\n\n# app.py:\nfrom caches import cache\nawait cache.set(\"foo\", 42)\n```\n\n### Non-async\n\n```python\nfrom cachetory import serializers\nfrom cachetory.backends import sync as sync_backends\nfrom cachetory.caches.sync import Cache\n\n\ncache = Cache[int, bytes](\n    serializer=serializers.from_url(\"pickle://\"),\n    backend=sync_backends.from_url(\"redis://localhost:6379\"),\n)\nwith cache:\n    cache.set(\"foo\", 42)\n    assert cache.get(\"foo\") == 42\n```\n\n## Tutorial\n\n### Supported operations\n\n| Operation                                         |                                                              |\n|:--------------------------------------------------|:-------------------------------------------------------------|\n| `get(key, default)`                               | **Retrieve** a value (or return a default one)               |\n| `__getitem__(key)`                                | **Retrieve** a value or raise `KeyError` (only sync `Cache`) |\n| `get_many(*keys)`                                 | **Retrieve** many values as a dictionary                     |\n| `set(key, value, *, time_to_live, if_not_exists)` | **Set** a value and return if the value has been changed     |\n| `__setitem__(key, value)`                         | **Set** a value (only sync `Cache`)                          |\n| `set_many(items)`                                 | **Set** many values                                          |\n| `expire_in(key, time_to_live)`                    | **Set** an expiration duration on a key                      |\n| `delete(key)`                                     | **Delete** a key and return whether the key existed          |\n| `__delitem__(key)`                                | **Delete** a key (only sync `Cache`)                         |\n\n### Instantiating a `Cache`\n\nBoth sync and async `Cache`s requires at least these parameters to work:\n\n- `backend`: functions as a storage\n- `serializer`: is responsible for converting actual values from and to something that a backend would be able to store\n\n`Cache` may be annotated with a value type, like this: `Cache[ValueT]`, which provides type hints for the cache methods.\n\n### Instantiating a backend\n\nThere is a few ways to instantiate a backend:\n\n- By **directly instantiating** a backend class via its `__init__`\n- By instantiating a specific backend class **via its `from_url` class method**. In that case the URL is forwarded to underlying client (if any)\n- **By using `cachetory.[sync|async_].from_url` function.** In that case specific backend class is chosen by the URL's scheme (see the scheme badges below), and the URL is forwarded to its `from_url` class method. This is especially useful to configure an arbitrary backend from a single configuration option – instead of hard-coding a specific backend class.\n\n#### Examples\n\n```python\nimport redis\nimport cachetory.backends.sync\nimport cachetory.backends.async_\n\nbackend = cachetory.backends.sync.from_url(\"memory://\")\nbackend = cachetory.backends.async_.from_url(\"dummy://\")\nbackend = cachetory.backends.sync.RedisBackend(redis.Redis(...))\nbackend = cachetory.backends.async_.from_url(\"redis://localhost:6379/1\")\n```\n\n### Instantiating a serializer\n\nInstantiating of a serializer is very much similar to that of a backend. To instantiate it by a URL use `cachetory.serializers.from_url` – unlike the back-end case there are no separate sync and async versions.\n\n`cachetory.serializers.from_url` supports scheme joining with `+`, as in `pickle+zlib://`. In that case multiple serializers are instantiated and applied sequentially (in the example a value would be serialized by `pickle` and the serialized value is then compressed by `zlib`). Deserialization order is, of course, the opposite.\n\n#### Examples\n\n```python\nimport pickle\n\nimport cachetory.serializers\n\nserializer = cachetory.serializers.from_url(\"pickle+zstd://\")\nserializer = cachetory.serializers.from_url(\"pickle+zstd://?pickle-protocol=4&compression-level=3\")\nserializer = cachetory.serializers.from_url(\"null://\")\nserializer = cachetory.serializers.NoopSerializer()\nserializer = cachetory.serializers.PickleSerializer(pickle_protocol=pickle.DEFAULT_PROTOCOL)\n```\n\n### Decorators\n\n#### Decorate a function with `@cached`\n\n`@cached` performs [memoization](https://en.wikipedia.org/wiki/Memoization) of a wrapped function:\n\n```python\nfrom cachetory.caches.sync import Cache\nfrom cachetory.decorators.shared import make_default_key\nfrom cachetory.decorators.sync import cached\n\ncache = Cache[int](backend=..., serializer=...)\nanother_cache = Cache[int](backend=..., serializer=...)\n\n\n@cached(\n    cache,  # may also be a callable that returns a specific cache for each call, e.g.:\n    # `cache=lambda wrapped_callable, *args, **kwargs: cache if … else another_cache`\n\n    # The following parameters are optional (shown the defaults):\n    make_key=make_default_key,  # cache key generator\n    time_to_live=None,  # forwarded to `Cache.set`\n    if_not_exists=False,  # forwarded to `Cache.set`\n)\ndef expensive_function() -> int:\n    return 42\n```\n\nThere's a few `make_key` functions provided by default:\n\n- `cachetory.decorators.shared.make_default_key` builds a human-readable cache key out of decorated function fully-qualified name and stringified arguments. The length of the key depends on the argument values.\n- `cachetory.decorators.shared.make_default_hashed_key` calls `make_default_key` under the hood but hashes the key and returns a hash hex digest – making it a fixed-length key and not human-readable.\n\n## Supported backends\n\nThe badges indicate which schemes are supported by a particular backend, and which package extras are required for it – if any:\n\n### Redis\n\n![scheme: redis](https://img.shields.io/badge/scheme-redis://-important)\n![scheme: rediss](https://img.shields.io/badge/scheme-rediss://-important)\n![scheme: redis+unix](https://img.shields.io/badge/scheme-redis+unix://-important)\n![extra: redis](https://img.shields.io/badge/extra-redis-blue)\n\n| Sync                                   | Async                                    |\n|:---------------------------------------|:-----------------------------------------|\n| `cachetory.backends.sync.RedisBackend` | `cachetory.backends.async_.RedisBackend` |\n\nThe URL is forwarded to the underlying client, which means one can use whatever options the client provides. The only special case is `redis+unix://`: the leading `redis+` is first stripped and the rest is forwarded to the client.\n\nAll the cache operations are **atomic** in both sync and async, including `get_many` and `set_many`.\n\nConsider explicitly adding [`hiredis`](https://github.com/redis/hiredis) to your dependencies for faster performance.\n\n### Memory\n\n![scheme: memory](https://img.shields.io/badge/scheme-memory://-important)\n\n| Sync                                    | Async                                     |\n|:----------------------------------------|:------------------------------------------|\n| `cachetory.backends.sync.MemoryBackend` | `cachetory.backends.async_.MemoryBackend` |\n\nSimple memory backend that stores values in a plain dictionary.\n\nNote the following **caveats**:\n\n- This backend does **not** copy values. Meaning that mutating a stored value mutates it in the backend too. If this is not desirable, consider using another serializer or making up your own serializer which copies values in its `serialize` method.\n- Expired items actually get deleted **only** when accessed. If you put a value into the backend and never try to retrieve it – it'll stay in memory forever.\n\n### Dummy\n\n![scheme: dummy](https://img.shields.io/badge/scheme-dummy://-important)\n\n| Sync                                    | Async                                     |\n|:----------------------------------------|:------------------------------------------|\n| `cachetory.backends.sync.DummyBackend`  | `cachetory.backends.async_.DummyBackend`  |\n\nDummy backend that always succeeds but never stores anything. Any values get forgotten immediately,\nand operations behave as if the cache always is empty.\n\n## Supported serializers\n\n### Pickle\n\n![scheme: pickle](https://img.shields.io/badge/scheme-pickle://-important)\n\nSerializes using the standard [`pickle`](https://docs.python.org/3/library/pickle.html) module.\n\n| Class                                    |\n|:-----------------------------------------|\n| `cachetory.serializers.PickleSerializer` |\n\n| URL parameter     |                                                                                                  |\n|:------------------|--------------------------------------------------------------------------------------------------|\n| `pickle-protocol` | Version of [`pickle` protocol](https://docs.python.org/3/library/pickle.html#data-stream-format) |\n\n### No-operation\n\n![scheme: noop](https://img.shields.io/badge/scheme-noop://-important)\n![scheme: null](https://img.shields.io/badge/scheme-null://-important)\n\n| Class                                   |\n|:----------------------------------------|\n| `cachetory.serializers.NoopSerializer`  |\n\n`NoopSerializer` does nothing and just bypasses value back and forth. Most of the backends don't support that and require some kind of serialization.\n\nHowever, it is possible to use `NoopSerializer` with `MemoryBackend`, because the latter just stores all values in a Python dictionary and doesn't necessarily require values to be serialized.\n\n## Supported compressors\n\n**Compressor** is basically just a partial case of serializer: it's a serializer from `bytes` to and from `bytes`, which by definition provides some kind of data compression.\n\nIt also means that you can use a compressor alone, effectively making a cache of compressed blobs:\n\n```python\nfrom datetime import timedelta\n\nfrom cachetory.caches.sync import Cache\nfrom cachetory.serializers.compressors import ZlibCompressor\nfrom cachetory.backends.sync import RedisBackend\n\ncache = Cache[bytes](\n    serializer=ZlibCompressor(),\n    backend=RedisBackend(...),\n)\ncache.set(\n    \"my-blob\",\n    b\"this huge blob will be compressed and stored in Redis for an hour\",\n    time_to_live=timedelta(hours=1),\n)\n```\n\n## Zlib\n\n![scheme: zlib](https://img.shields.io/badge/scheme-zlib://-important)\n\nUses the built-in [`zlib`](https://docs.python.org/3/library/zlib.html) module.\n\n| Class                                              |\n|:---------------------------------------------------|\n| `cachetory.serializers.compressors.ZlibCompressor` |\n\n| URL parameter         |                                                     |\n|:----------------------|-----------------------------------------------------|\n| `compression-level`   | From `0` (no compression) to `9` (best compression) |\n\n## Zstandard\n\n![scheme: zstd](https://img.shields.io/badge/scheme-zstd://-important)\n![scheme: zstandard](https://img.shields.io/badge/scheme-zstandard://-important)\n![extra: zstd](https://img.shields.io/badge/extra-zstd-blue)\n\nUses [`python-zstd`](https://github.com/sergey-dryabzhinsky/python-zstd) for [Zstandard](https://facebook.github.io/zstd/) compression.\n\n| Class                                              |\n|:---------------------------------------------------|\n| `cachetory.serializers.compressors.ZstdCompressor` |\n\n| URL parameter         |                                                             |\n|:----------------------|-------------------------------------------------------------|\n| `compression-level`   | See: https://github.com/sergey-dryabzhinsky/python-zstd#api |\n| `compression-threads` | See: https://github.com/sergey-dryabzhinsky/python-zstd#api |\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kpn/cachetory",
    "keywords": "cache",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cachetory",
    "package_url": "https://pypi.org/project/cachetory/",
    "platform": null,
    "project_url": "https://pypi.org/project/cachetory/",
    "project_urls": {
      "Homepage": "https://github.com/kpn/cachetory",
      "Repository": "https://github.com/kpn/cachetory"
    },
    "release_url": "https://pypi.org/project/cachetory/2.0.2/",
    "requires_dist": [
      "pydantic (>=1.10.4,<2.0.0)",
      "typing-extensions (>=4.4.0,<5.0.0)",
      "redis (>=4.4.2,<5.0.0) ; extra == \"redis\"",
      "zstd (>=1.5.2.6,<2.0.0.0) ; extra == \"zstd\""
    ],
    "requires_python": ">=3.7.0,<4.0.0",
    "summary": "Caching library with support for multiple cache backends",
    "version": "2.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17214383,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "103fc3d67938905cc6a27d70c82c1840ebecd6a3b9ca49a191503a0370be0898",
          "md5": "fd12b55c9c1b0322b5c541d97c9ef76b",
          "sha256": "def33478df342970bf2f4c9237e2cadbf4b44d4516e4c448300dd1937ac3ab81"
        },
        "downloads": -1,
        "filename": "cachetory-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd12b55c9c1b0322b5c541d97c9ef76b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0,<4.0.0",
        "size": 31749,
        "upload_time": "2023-02-02T15:59:52",
        "upload_time_iso_8601": "2023-02-02T15:59:52.090781Z",
        "url": "https://files.pythonhosted.org/packages/10/3f/c3d67938905cc6a27d70c82c1840ebecd6a3b9ca49a191503a0370be0898/cachetory-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "556bb54394cc29c3773339d0e6a0ef8dd842a8560ef86c0e33fe8d287774ee7b",
          "md5": "28d847cbf6e3b3250c7cb194a6499d96",
          "sha256": "7a973fa7a6246768cb52fe7be1b7c26f2d81f1765f5b4d7fd37d011db6f487f4"
        },
        "downloads": -1,
        "filename": "cachetory-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "28d847cbf6e3b3250c7cb194a6499d96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0,<4.0.0",
        "size": 22890,
        "upload_time": "2023-02-02T15:59:53",
        "upload_time_iso_8601": "2023-02-02T15:59:53.193689Z",
        "url": "https://files.pythonhosted.org/packages/55/6b/b54394cc29c3773339d0e6a0ef8dd842a8560ef86c0e33fe8d287774ee7b/cachetory-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "267383a6e443c13767567d2222c9ea70cab6fe490a2e079009c728b0d56d22de",
          "md5": "6b1ffd0b512cd6525a0c6b9819c7da9a",
          "sha256": "5ded4e348a5b214a182bcc7f1f63a1f0233ed42a9b4c309ddad8465e7233676d"
        },
        "downloads": -1,
        "filename": "cachetory-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6b1ffd0b512cd6525a0c6b9819c7da9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 30744,
        "upload_time": "2022-07-14T15:06:52",
        "upload_time_iso_8601": "2022-07-14T15:06:52.511183Z",
        "url": "https://files.pythonhosted.org/packages/26/73/83a6e443c13767567d2222c9ea70cab6fe490a2e079009c728b0d56d22de/cachetory-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "90fd8ea361c0f6f1c39ab645bd57c3f7b0eb0585b8c651f62aa17c47e3b53f09",
          "md5": "6f509c47555b2ec2aa6f65db8f0cb247",
          "sha256": "1ff6564e4d7dd5bdeb63afc2811d9b0f0b670322e56b48edf65ba6db30dadfe7"
        },
        "downloads": -1,
        "filename": "cachetory-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f509c47555b2ec2aa6f65db8f0cb247",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 31279,
        "upload_time": "2022-07-18T10:58:42",
        "upload_time_iso_8601": "2022-07-18T10:58:42.623612Z",
        "url": "https://files.pythonhosted.org/packages/90/fd/8ea361c0f6f1c39ab645bd57c3f7b0eb0585b8c651f62aa17c47e3b53f09/cachetory-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ff0b6e4086ef4d9a439c846b390553125e9614397e8deb60f05d2f148fddbee",
          "md5": "b9e53a16fc2830946da232bf7a70231e",
          "sha256": "6e848752cec7187eff5f62c8d10caed8eadd6baf76b04482f192df7f3f4fe480"
        },
        "downloads": -1,
        "filename": "cachetory-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b9e53a16fc2830946da232bf7a70231e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28308,
        "upload_time": "2022-07-18T10:58:44",
        "upload_time_iso_8601": "2022-07-18T10:58:44.256015Z",
        "url": "https://files.pythonhosted.org/packages/6f/f0/b6e4086ef4d9a439c846b390553125e9614397e8deb60f05d2f148fddbee/cachetory-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1428f258991e1e444b93c66854ed534025735baf3ba2d9ffef88d8adaaf7a4f7",
          "md5": "90586301a6eb2c9c45ba40e1a2c33589",
          "sha256": "b58d17c6d62b1634f1d05e7a3839df3dcd9debddf19b1b398d50e1b4bdd1b471"
        },
        "downloads": -1,
        "filename": "cachetory-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90586301a6eb2c9c45ba40e1a2c33589",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 31340,
        "upload_time": "2022-07-18T14:18:01",
        "upload_time_iso_8601": "2022-07-18T14:18:01.811847Z",
        "url": "https://files.pythonhosted.org/packages/14/28/f258991e1e444b93c66854ed534025735baf3ba2d9ffef88d8adaaf7a4f7/cachetory-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5e2e27603f64ca2a891136fe3e9fbd5d6b6d4ff611572b179de7b784fda746e",
          "md5": "e0248a5f03bd927d19671a16b72007c7",
          "sha256": "ad448cf8f4bbc9cca0c717954fbe0ef396f9fd89d120fc5350ea5b3c1477e89a"
        },
        "downloads": -1,
        "filename": "cachetory-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e0248a5f03bd927d19671a16b72007c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28424,
        "upload_time": "2022-07-18T14:18:03",
        "upload_time_iso_8601": "2022-07-18T14:18:03.390623Z",
        "url": "https://files.pythonhosted.org/packages/e5/e2/e27603f64ca2a891136fe3e9fbd5d6b6d4ff611572b179de7b784fda746e/cachetory-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cd1355d338fa99dc31376c1fb52055fc1cd3706da0a27f31c2a848a0d765085",
          "md5": "a641bcb1dcf176d6946c33d4cefc3b8e",
          "sha256": "90bcb2b5518567a91d9f462f5c3b8864f1b1f1fb421f8c877da7d3095a0eedfa"
        },
        "downloads": -1,
        "filename": "cachetory-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a641bcb1dcf176d6946c33d4cefc3b8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 31340,
        "upload_time": "2022-07-19T14:42:51",
        "upload_time_iso_8601": "2022-07-19T14:42:51.996732Z",
        "url": "https://files.pythonhosted.org/packages/6c/d1/355d338fa99dc31376c1fb52055fc1cd3706da0a27f31c2a848a0d765085/cachetory-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe32c31fc1e2bc69ca2478657c30a6c58e6f3f92cfecf7a1cae4007c1b1a1885",
          "md5": "4197f5ff6fcc567cbe0e133c14a0dd74",
          "sha256": "c447f6defea2497be2fa58b8dfc432d7d0708dba779a6644bf253034b1cea11c"
        },
        "downloads": -1,
        "filename": "cachetory-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4197f5ff6fcc567cbe0e133c14a0dd74",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28420,
        "upload_time": "2022-07-19T14:42:53",
        "upload_time_iso_8601": "2022-07-19T14:42:53.110793Z",
        "url": "https://files.pythonhosted.org/packages/fe/32/c31fc1e2bc69ca2478657c30a6c58e6f3f92cfecf7a1cae4007c1b1a1885/cachetory-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2315ac4fda368966d16d4bfc53ac3d2a68e04de5479d3ec47cb3af3be4e62c73",
          "md5": "f6552709dc2ec30df8ebb99d66a5aa6e",
          "sha256": "d635e70959bbb5bbdf197c3291564795135b8185f382914a2d4030d60440c707"
        },
        "downloads": -1,
        "filename": "cachetory-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f6552709dc2ec30df8ebb99d66a5aa6e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 31350,
        "upload_time": "2022-07-20T10:16:15",
        "upload_time_iso_8601": "2022-07-20T10:16:15.684040Z",
        "url": "https://files.pythonhosted.org/packages/23/15/ac4fda368966d16d4bfc53ac3d2a68e04de5479d3ec47cb3af3be4e62c73/cachetory-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d34e48a53b785d17ff2a1a0c3b1dcaf6fd5686a839d47db1e773d4c816e8ea5e",
          "md5": "9e5d46b0ceaf34203bcaa3a3063f5f84",
          "sha256": "3cac04a909f7e897e2db86e2f97c7f5e02bcbdcdc1f633b2eed68b4170e13b19"
        },
        "downloads": -1,
        "filename": "cachetory-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9e5d46b0ceaf34203bcaa3a3063f5f84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28414,
        "upload_time": "2022-07-20T10:16:17",
        "upload_time_iso_8601": "2022-07-20T10:16:17.316903Z",
        "url": "https://files.pythonhosted.org/packages/d3/4e/48a53b785d17ff2a1a0c3b1dcaf6fd5686a839d47db1e773d4c816e8ea5e/cachetory-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9660fb7a33a0723158055a24629ece08ca064a5c2a3fcaa3bf880795d4ccc5ec",
          "md5": "951abe91f9a4eab3bb46aedf600086b3",
          "sha256": "71fc77b82b7514ff3519c883a3542a40d171f8dc4d3584ec342816af5c80ef6e"
        },
        "downloads": -1,
        "filename": "cachetory-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "951abe91f9a4eab3bb46aedf600086b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 31364,
        "upload_time": "2022-07-21T14:06:36",
        "upload_time_iso_8601": "2022-07-21T14:06:36.083961Z",
        "url": "https://files.pythonhosted.org/packages/96/60/fb7a33a0723158055a24629ece08ca064a5c2a3fcaa3bf880795d4ccc5ec/cachetory-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a052a2afb2e867f2d8109f543dd58df0917af2a4c10d5afff6fc68ff7fa4e635",
          "md5": "eb329103b4a90b1661b4f2a91d0447fe",
          "sha256": "efabf6c2d57f977ab6bf39987142d861b81f1f8be989658820e3d7409b67653a"
        },
        "downloads": -1,
        "filename": "cachetory-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "eb329103b4a90b1661b4f2a91d0447fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28438,
        "upload_time": "2022-07-21T14:06:37",
        "upload_time_iso_8601": "2022-07-21T14:06:37.585401Z",
        "url": "https://files.pythonhosted.org/packages/a0/52/a2afb2e867f2d8109f543dd58df0917af2a4c10d5afff6fc68ff7fa4e635/cachetory-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f33086803eebcb710e71fcc235f7d79464cac8f609c74346e92feced851dc885",
          "md5": "1b2eb6a95364466446e3cfe5da43efa0",
          "sha256": "91afa5179ac36a53204d905a5c91c736ce72f956aa808ffc487d981406c1f72c"
        },
        "downloads": -1,
        "filename": "cachetory-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b2eb6a95364466446e3cfe5da43efa0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 31625,
        "upload_time": "2022-07-28T15:20:02",
        "upload_time_iso_8601": "2022-07-28T15:20:02.797698Z",
        "url": "https://files.pythonhosted.org/packages/f3/30/86803eebcb710e71fcc235f7d79464cac8f609c74346e92feced851dc885/cachetory-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e58b568458b2f2f7a4801ed6f628d9fc02107002d8e363183c0d1c87322cd052",
          "md5": "bd3c25c3a992c670bd0c7e7a20ec0482",
          "sha256": "133299bde015f2678d009627e58a540e28cd5c41dfa972ddfe18b37022e8a172"
        },
        "downloads": -1,
        "filename": "cachetory-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bd3c25c3a992c670bd0c7e7a20ec0482",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29142,
        "upload_time": "2022-07-28T15:20:04",
        "upload_time_iso_8601": "2022-07-28T15:20:04.302281Z",
        "url": "https://files.pythonhosted.org/packages/e5/8b/568458b2f2f7a4801ed6f628d9fc02107002d8e363183c0d1c87322cd052/cachetory-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3227d65ed6a4e525f86c3ba8a7e9dee75e5496409c77f1aea40d08da3d559cd",
          "md5": "a3cb01d4708377b8854fcd54d47a84f1",
          "sha256": "a1e51ba6b98002df16f5899ffe750f8f783ca8adaeaab11e8c3627e00073cf6f"
        },
        "downloads": -1,
        "filename": "cachetory-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3cb01d4708377b8854fcd54d47a84f1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 31562,
        "upload_time": "2022-11-02T13:15:05",
        "upload_time_iso_8601": "2022-11-02T13:15:05.107412Z",
        "url": "https://files.pythonhosted.org/packages/a3/22/7d65ed6a4e525f86c3ba8a7e9dee75e5496409c77f1aea40d08da3d559cd/cachetory-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f03210fd8e83e5c4e79fab6713153a58888b468bdc322d9e9716caa7ac4a9c0d",
          "md5": "0516a3c84e6cbabec7ceb4ffcddb09bd",
          "sha256": "fe8c65c333092db0e53d8e83a0c04926e9be874f4025ebbc9a1782fdf413b5ad"
        },
        "downloads": -1,
        "filename": "cachetory-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0516a3c84e6cbabec7ceb4ffcddb09bd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 29030,
        "upload_time": "2022-11-02T13:15:06",
        "upload_time_iso_8601": "2022-11-02T13:15:06.978005Z",
        "url": "https://files.pythonhosted.org/packages/f0/32/10fd8e83e5c4e79fab6713153a58888b468bdc322d9e9716caa7ac4a9c0d/cachetory-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6d42d21dd9975dbd9a0c64f35e7a7e3fe65a70f7088e2d1e4927541cb691a66",
          "md5": "bc057541033f086d1291170ec9439447",
          "sha256": "687f130fdc77f079414b83d7fe330bddbc9085e46db968d06867e10994c7b7ff"
        },
        "downloads": -1,
        "filename": "cachetory-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc057541033f086d1291170ec9439447",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0,<4.0.0",
        "size": 31748,
        "upload_time": "2023-02-02T16:20:32",
        "upload_time_iso_8601": "2023-02-02T16:20:32.436457Z",
        "url": "https://files.pythonhosted.org/packages/e6/d4/2d21dd9975dbd9a0c64f35e7a7e3fe65a70f7088e2d1e4927541cb691a66/cachetory-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3767615b98f502a876d128d4389ead27076d81c661403794867f84750a20dee",
          "md5": "cfb1ec6916d99cc11b91bf3efe4230a2",
          "sha256": "73071ed94ad9b35fffaba8d6e544eec0e703139e58582ddb2e1dea9474ddf805"
        },
        "downloads": -1,
        "filename": "cachetory-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cfb1ec6916d99cc11b91bf3efe4230a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0,<4.0.0",
        "size": 22911,
        "upload_time": "2023-02-02T16:20:33",
        "upload_time_iso_8601": "2023-02-02T16:20:33.770868Z",
        "url": "https://files.pythonhosted.org/packages/a3/76/7615b98f502a876d128d4389ead27076d81c661403794867f84750a20dee/cachetory-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db61a702a0a9e207ed59ffbe70bbb5f3a6a222f0be2cf104f29c39c2ab8f556b",
          "md5": "ad8786425c44972ee780949d8579b84f",
          "sha256": "a516ed969c8ac153871bcd125f2e587dd286c15fba71fa3d7f466c474eae87a3"
        },
        "downloads": -1,
        "filename": "cachetory-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad8786425c44972ee780949d8579b84f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0,<4.0.0",
        "size": 32059,
        "upload_time": "2023-03-08T22:29:25",
        "upload_time_iso_8601": "2023-03-08T22:29:25.249954Z",
        "url": "https://files.pythonhosted.org/packages/db/61/a702a0a9e207ed59ffbe70bbb5f3a6a222f0be2cf104f29c39c2ab8f556b/cachetory-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fff91ba5d37cc52db48f81391847622b9a5e924264ad1301e26f4913c8947834",
          "md5": "4a67ca8bef95033fa75669f93877da18",
          "sha256": "1fd47741ef1eb9db31f505bf129543d9918075721675cdb44e710cf49a28dd34"
        },
        "downloads": -1,
        "filename": "cachetory-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4a67ca8bef95033fa75669f93877da18",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0,<4.0.0",
        "size": 22178,
        "upload_time": "2023-03-08T22:29:26",
        "upload_time_iso_8601": "2023-03-08T22:29:26.796223Z",
        "url": "https://files.pythonhosted.org/packages/ff/f9/1ba5d37cc52db48f81391847622b9a5e924264ad1301e26f4913c8947834/cachetory-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db61a702a0a9e207ed59ffbe70bbb5f3a6a222f0be2cf104f29c39c2ab8f556b",
        "md5": "ad8786425c44972ee780949d8579b84f",
        "sha256": "a516ed969c8ac153871bcd125f2e587dd286c15fba71fa3d7f466c474eae87a3"
      },
      "downloads": -1,
      "filename": "cachetory-2.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ad8786425c44972ee780949d8579b84f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0,<4.0.0",
      "size": 32059,
      "upload_time": "2023-03-08T22:29:25",
      "upload_time_iso_8601": "2023-03-08T22:29:25.249954Z",
      "url": "https://files.pythonhosted.org/packages/db/61/a702a0a9e207ed59ffbe70bbb5f3a6a222f0be2cf104f29c39c2ab8f556b/cachetory-2.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fff91ba5d37cc52db48f81391847622b9a5e924264ad1301e26f4913c8947834",
        "md5": "4a67ca8bef95033fa75669f93877da18",
        "sha256": "1fd47741ef1eb9db31f505bf129543d9918075721675cdb44e710cf49a28dd34"
      },
      "downloads": -1,
      "filename": "cachetory-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4a67ca8bef95033fa75669f93877da18",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0,<4.0.0",
      "size": 22178,
      "upload_time": "2023-03-08T22:29:26",
      "upload_time_iso_8601": "2023-03-08T22:29:26.796223Z",
      "url": "https://files.pythonhosted.org/packages/ff/f9/1ba5d37cc52db48f81391847622b9a5e924264ad1301e26f4913c8947834/cachetory-2.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}