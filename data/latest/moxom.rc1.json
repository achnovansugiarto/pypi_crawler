{
  "info": {
    "author": "Mykyta Sikriier",
    "author_email": "sikrinick@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Moxom\nPython library to build simple user-friendly CLI API for your Python scripts.  \nAllows mapping commands to classes, class methods and functions.  \nSupports both `def` and `async def`.  \n\nLet's assume we have script `dumb_ci` with next class:\n```python\nfrom asyncio import sleep\n\nclass Computer:\n    def __init__(self, computer_name: str = \"Default\"):\n        self.computer_name = computer_name\n\n    async def compile_code(self, project_name: str = \"TestProject\"):\n        await sleep(2) # build something\n        print(f\"Built finished for {self.computer_name} {project_name}\")\n```\nAnd next function:\n```python\nfrom asyncio import sleep\n\nasync def deploy_code(project_name: str = \"TestProject\"):\n     await sleep(1)\n     print(f\"Deployed {project_name}\")\n```\n\nWith this library you are able to create simple API for CLI.\n```shell script\n./dumb_ci computer compile_code\n```\n\nLibrary allows passing parameters.\n```shell script\n./dumb_ci computer '\"Build server #2\"' compile_code '\"MegaProject\"'\n```\n\nYou can order commands using basic shell tools\n```shell script\n./dumb_ci computer compile_code && ./dumb_ci deploy_code\n./dumb_ci computer compile_code '\"Project1\"' & ./dumb_ci computer compile_code '\"Project2\"'\n```\n\nAdditionally, you can use operators `and` (asynchronous), `then` (synchronous) and parentheses.\n```shell script\n./dumb_ci computer compile_code then deploy_code\n./dumb_ci (computer compile_code then deploy_code) and (computer '\"2\"' compile_code '\"Project2\"' then deploy_code '\"Project2\"')\n```\n\nTo list all available commands there is a `help` operator. \n```python\n./dumb_ci help\n> computer\n> computer compile_code\n> deploy_code\n```\n\nTo obtain help for a specific command just add `help` before command.\nIf no help text provided in command definition, the one received with Python `help` command will be used.\n```python\n./dumb_ci deploy_code\n> Deploys code\n./dumb_ci computer compile_code\n> Compiles code\n```\n\n## Integration\n\nAssuming we have class `Computer` and function `deploy_code` from example above entire integration would look like this: \n```python\nimport sys\nfrom moxom import Moxom, Routine, create_routines\n\nroutines = create_routines(            # Utility function to create Dict[str, Routine]\n    Routine(                           # Class representation of a command in CLI\n        \"deploy_code\",                 # Command name\n        deploy_code,                   # Function to call\n        help=\"Deploys code to AWS\"     # Text for help\n    ),\n    Routine(                           # Class representation of a command in CLI\n        \"computer\",                    # Command name\n        Computer,                      # Constructor of class Computer and it is a function \n        subroutines=create_routines(   # As we want to invoke methods of Computer, we can specify subroutines \n            Routine(                   # which are represented by Computer class methods\n                \"compile_code\",        # Subroutine name. \"computer compile_code\"\n                Computer.compile_code, # Method of Computer to be called,\n                help=\"Compiles code\"   # which will receive instance created by \"computer\" as `self`\n            )                          \n        )\n    )\n)\n\nif __name__ == '__main__':\n    moxom = Moxom(routines)\n    arguments = sys.argv[1:]\n    moxom.execute(\" \".join(arguments))\n```\n\nTo increase comfortability you may want to have simple interactive mode\n```python\nif __name__ == '__main__':\n    moxom = Moxom(routines)\n\n    arguments = sys.argv[1:]\n\n    if len(arguments) == 0:\n        # interactive mode\n        print(\"Interactive mode\")\n        while True:\n            moxom.execute(input(\"> \"))\n    else:\n        # single line mode\n        moxom.execute(\" \".join(arguments))\n```\n\n## Example\nExample of usage and integration is [here](example/__main__.py).\n\n## Basic usage\nTo integrate library into existing Python project, just import as in next line:\n```python\nfrom moxom import Moxom, Routine, create_routines\n```\n### Moxom\n`Moxom` - library entry-point.  \nExpects to receive `Dict[str, Routine]` on construction.\nOptionally you can pass environment file path.  \nCall `execute(line)` to process a single line of input.  \n\n### Routine\n`Routine` - class representation of a single command.  \nIt must have a name and a function to call.  \nOptionally you may set subroutines and `help` text.\n\n### create_routines  \n`create_routines` - Utility function to create `Dict[str, Routine]`.\n\n## Operators\n### And\nAllows running commands asynchronously, `&` in Shell, maps to `asyncio.gather`.  \n```\n# Starts computers simultaneously\ncomputer \"1\" start and computer \"2\" start\n```\n\n### Then\nAllows running commands consequently, `&&` in Shell, maps to consequent code with `await`.  \n```\n# Starts computer 1, waits for it to start, and then starts computer 2\ncomputer \"1\" start then computer \"2\" start\n```  \n\n### Parentheses\nTo specify higher precedence of operation, you can use parentheses.\n```\n# Start computer 1 and computer 2 simultaneously.\n# Wait for both to start.\n# Then shut down both computers 1 and 2 simultaneously.\n(computer \"1\" start and computer \"2\" start) then (computer \"1\" shutdown and computer \"2\" shutdown)\n```\n\n### Help\nTo list all available commands there is a `help` operator. \n```python\n./dumb_ci help\n> computer\n> computer compile_code\n> deploy_code\n```\n\nTo obtain help for a specific command just add `help` before command.\nIf no help text provided in routine definition, the one received with Python `help` command will be used.\n```python\n./dumb_ci deploy_code\n> Deploys code\n./dumb_ci computer compile_code\n> Compiles code\n```\n\n\n## Declarations\nCommands and variables can be declared with `=` operator.  \nIt can be a declaration of an argument.  \n```\n> mega_project = \"MegaProject\"\n\n# returns \"MegaProject\"\n> mega_project\n```\nOr of a function.  \n```\n> comp2_mega_full_ci = computer \"Comp2\" compile_code \"MegaProject\" then deploy_code \"MegaProject\"\n\n# runs code\n> comp2_mega_full_ci   \n```\nAdditionally, you can provide arguments for a function.\n```\n> full_ci comp proj = computer comp compile_code proj then deploy_code proj\n\n# runs full ci on Comp2 for MegaProject\n> full_ci \"Comp2\" \"MegaProject\" \n\n# declares a function\n> comp2_mega_full_ci = full_ci \"Comp2\" \"MegaProject\"\n\n# runs full ci on Comp2 for MegaProject\n> comp2_mega_full_ci\n```\n\n\n## Known issues\nWhen strings are passed from shell to python, shell removes quotes.     \n`./dumb_ci computer \"Build server #2\" compile_code` is parsed as `computer Build server #2 compile_code` and leads to exception.\n\nUsing from Shell you have to wrap strings twice with double quotation marks, or with quotes and escaping \nor by using both single quotes and double quotes:\n```shell script\n./dumb_ci computer '\"Build server #2\"' compile_code\n``` \n\n## Environment\nIf you want to create simple scenarios with Moxom syntax or just to specify variables on script startup, \nyou can create a file with commands, which will be executed on Moxom initialization.\n```python\nenv_file = os.path.join(os.path.dirname(__file__), \"example_mox_env.ini\")\nmoxom = Moxom(routines, moxom_env=env_file)\n```\n\nYou can find example of environment file in [example_mox_env.ini](example/example_mox_env.ini) \nand integration in [example module](example/__main__.py).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sikrinick/moxom",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "moxom",
    "package_url": "https://pypi.org/project/moxom/",
    "platform": "",
    "project_url": "https://pypi.org/project/moxom/",
    "project_urls": {
      "Homepage": "https://github.com/sikrinick/moxom"
    },
    "release_url": "https://pypi.org/project/moxom/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Library to build simple user-friendly CLI API for your Python scripts",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11164178,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d3e10d9f10bce1525d4c4128c23a07c5a7dfec92ca985b761347ba4f5fc5d79",
          "md5": "6dd8f902654ff07993c95cfd37a88cb2",
          "sha256": "d3ad3c0df973d1e3fe37d1eeef06d35dce1b70822b57b9e5b9352241bef5e85a"
        },
        "downloads": -1,
        "filename": "moxom-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6dd8f902654ff07993c95cfd37a88cb2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13652,
        "upload_time": "2021-08-12T19:57:59",
        "upload_time_iso_8601": "2021-08-12T19:57:59.307341Z",
        "url": "https://files.pythonhosted.org/packages/5d/3e/10d9f10bce1525d4c4128c23a07c5a7dfec92ca985b761347ba4f5fc5d79/moxom-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d3e10d9f10bce1525d4c4128c23a07c5a7dfec92ca985b761347ba4f5fc5d79",
        "md5": "6dd8f902654ff07993c95cfd37a88cb2",
        "sha256": "d3ad3c0df973d1e3fe37d1eeef06d35dce1b70822b57b9e5b9352241bef5e85a"
      },
      "downloads": -1,
      "filename": "moxom-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6dd8f902654ff07993c95cfd37a88cb2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13652,
      "upload_time": "2021-08-12T19:57:59",
      "upload_time_iso_8601": "2021-08-12T19:57:59.307341Z",
      "url": "https://files.pythonhosted.org/packages/5d/3e/10d9f10bce1525d4c4128c23a07c5a7dfec92ca985b761347ba4f5fc5d79/moxom-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}