{
  "info": {
    "author": "The Eclipse BaSyx Authors",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Eclipse BaSyx Python SDK\n\n(formerly known as PyI40AAS – Python Industry 4.0 Asset Administration Shell)\n\nThe Eclipse BaSyx Python project focuses on providing a Python implementation of the Asset Administration Shell (AAS) for Industry 4.0 Systems,\ncompliant with the meta model and interface specification provided in\n[the document “Details of the Asset Administration Shell” (v2.0.1)](https://www.plattform-i40.de/IP/Redaktion/DE/Downloads/Publikation/Details_of_the_Asset_Administration_Shell_Part1_V2.html).\nIt currently adheres to version 2.0.1 of the specification.\nAn updated version with support for version 3.0RC01 is already in preparation and will be made available on an additional branch of this repository and in a future major release.\n\n## Features\n\n* Modelling of AASs as Python objects (according to DotAAS sec. 4)\n    * **except for**: Security extension of the metamodel (according to DotAAS sec. 5), *HasDataSpecification*\n* Reading and writing of AASX package files (according to DotAAS sec. 6)\n* (De-)serialization of AAS objects into/from JSON and XML (according to DotAAS sec. 7) \n* Storing of AAS objects in CouchDB, Backend infrastructure for easy expansion \n* Compliance checking of AAS XML and JSON files\n\n\n### Project Structure\n\nThe BaSyx Python SDK project provides the `basax.aas` Python package with 6 submodules:\n\n* `basyx.aas.model`: The AAS metamodel implemented in python\n* `basyx.aas.adapter`: Adapters for various file formats \n* `basyx.aas.backend`: Backend infrastructure for storing and retrieving AAS objects\n* `basyx.aas.compliance_tool`: Compliance checker for AAS files\n* `basyx.aas.util`: Provides utilities\n* `basyx.aas.examples`: Example data and tutorials\n\n\n## License\n\nThe BaSyx Python SDK project is licensed under the terms of the MIT License.\n\nSPDX-License-Identifier: MIT\n\nFor more information, especially considering the licenses of included third-party works, please consult the `NOTICE`\nfile.\n\n\n## Dependencies\n\nThe BaSyx Python SDK requires the following Python packages to be installed for production usage. These dependencies are listed in\n`setup.py` to be fetched automatically when installing with `pip`:\n* `lxml` (BSD 3-clause License, using `libxml2` under MIT License)\n* `python-dateutil` (BSD 3-clause License)\n* `pyecma376-2` (Apache License v2.0)\n* `urllib3` (MIT License)\n\nOptional production usage dependencies:\n* For using the Compliance Tool to validate JSON files against the JSON Schema: `jsonschema` and its\ndependencies (MIT License, Apache License, PSF License)\n\nDevelopment/testing/example dependencies (see `requirements.txt`):\n* `jsonschema` and its dependencies (MIT License, Apache License, PSF License)\n* `psutil` (BSD 3-clause License)\n\n\n## Getting Started\n\n### Installation\n\nEclipse BaSyx Python SDK can be installed from PyPI, the Python Package Index, just as nearly every other Python package:\n```bash\npip install basyx-python-sdk\n``` \n\nFor working with the current development version, you can also install the package directly from GitHub, using Pip's Git feature:\n```bash\npip install git+https://github.com/eclipse-basyx/basyx-python-sdk.git@main\n```\n\nYou may want to use a Python's `venv` or a similar tool to install BaSyx Python SDK and its dependencies only in a project-specific local environment. \n\n\n### Example\n\nThe following code example shows how to create a `Submodel` with a `Property` serialize it into an XML file using the\nEclipse BaSyx Python SDK:\n\nCreate a `Submodel`:\n```python\nfrom basyx.aas import model  # Import all BaSyx Python SDK classes from the model package\n\nidentifier = model.Identifier('https://acplt.org/Simple_Submodel', model.IdentifierType.IRI)\nsubmodel = model.Submodel(identification=identifier)\n```\n\nCreate a `Property` and add it to the `Submodel`:\n```python\n# create a global reference to a semantic description of the property\nsemantic_reference = model.Reference(\n    (model.Key(\n        type_=model.KeyElements.GLOBAL_REFERENCE,\n        local=False,\n        value='http://acplt.org/Properties/SimpleProperty',\n        id_type=model.KeyType.IRI\n    ),)\n)\nproperty = model.Property(\n    id_short='ExampleProperty',  # Identifying string of the element within the submodel namespace\n    value_type=model.datatypes.String,  # Data type of the value\n    value='exampleValue',  # Value of the property\n    semantic_id=semantic_reference  # set the semantic reference\n)\nsubmodel.submodel_element.add(property)\n```\n\nSerialize the `Submodel` to XML:\n```python\nfrom basyx.aas.adapter import write_aas_xml_file\n\ndata: model.DictObjectStore[model.Identifiable] = model.DictObjectStore()\ndata.add(submodel)\nwith open('Simple_Submodel.xml', 'w', encoding='utf-8') as f:\n    write_aas_xml_file(file=f, data=data)\n```\n\n\n### Examples and Tutorials\n\nFor further examples and tutorials, check out the `basyx.aas.examples`-package. Here is a quick overview:\n\n* [`tutorial_create_simple_aas`](./basyx/aas/examples/tutorial_create_simple_aas.py): Create an Asset Administration Shell, including an Asset object and a Submodel\n* [`tutorial_storage`](./basyx/aas/examples/tutorial_storage.py): Manage a larger number of Asset Administration Shells in an ObjectStore and resolve references\n* [`tutorial_serialization_deserialization`](./basyx/aas/examples/tutorial_serialization_deserialization.py): Use the JSON and XML serialization/deserialization for single objects or full standard-compliant files\n* [`tutorial_aasx`](./basyx/aas/examples/tutorial_aasx.py): Export Asset Administration Shells with related objects and auxiliary files to AASX package files\n* [`tutorial_backend_couchdb`](./basyx/aas/examples/tutorial_backend_couchdb.py): Use the *Backends* interface (`update()/commit()` methods) to manage and retrieve AAS objects in a CouchDB document database\n\n\n### Documentation\n\nA detailed, complete API documentation is available on Read the Docs: https://basyx-python-sdk.readthedocs.io\n\n### Compliance Tool\n\nThe Eclipse BaSyx Python SDK project contains a compliance tool for testing xml and json files is provided in the \n`basyx.aas.compliance_tool`-package. Following functionalities are supported:\n\n* create an xml or json file compliant to the official schema containing example Asset Administration Shell elements\n* create an aasx file with xml or json files compliant to the official schema containing example Asset Administration \nShell elements\n* check if a given xml or json file is compliant to the official schema\n* check if a given xml, json or aasx file is readable even if it is not compliant to the offical schema\n* check if the data in a given xml, json or aasx file is the same as the example data\n* check if two given xml, json or aasx files contain the same Asset Administration Shell elements in any order \n\nInvoking should work with either `python -m basyx.aas.compliance_tool.cli` or (when installed correctly and PATH is set \ncorrectly) with `aas-compliance-check` on the command line.\n\nFor further usage information consider the `basyx.aas.compliance_tool`-package or invoke with \n`python -m basyx.aas.compliance_tool.cli --help` respectively `aas-compliance-check --help`.\n\n## Development\n\n### Codestyle and Testing\n\nOur code follows the [PEP 8 -- Style Guide for Python Code](https://www.python.org/dev/peps/pep-0008/).\nAdditionally, we use [PEP 484 -- Type Hints](https://www.python.org/dev/peps/pep-0484/) throughout the code to enable type checking the code.\n\nBefore submitting any changes, make sure to let `mypy` and `pycodestyle` check your code and run the unit tests with\nPython's builtin `unittest`. To install the required tools, use:\n```bash\npip install mypy pycodestyle\n```\n\nRunning all checks:\n```bash\nmypy basyx test\npycodestyle --max-line-length 120 basyx test\npython -m unittest\n```\n\nWe aim to cover our code with test by at least 80%. To check test coverage, you can use `coverage`:\n\n```bash\npip install coverage\ncoverage run --source basyx --branch -m unittest\ncoverage report -m\n```\n\n### Eclipse Contributor Agreement\n\nTo contribute code to this project you need to sign the [Eclipse Contributor Agreement (ECA)](https://www.eclipse.org/legal/ECA.php).\nThis is done by creating an Eclipse account for your git e-mail address and then submitting the following form: https://accounts.eclipse.org/user/eca\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eclipse-basyx/basyx-python-sdk",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "basyx-python-sdk",
    "package_url": "https://pypi.org/project/basyx-python-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/basyx-python-sdk/",
    "project_urls": {
      "Homepage": "https://github.com/eclipse-basyx/basyx-python-sdk"
    },
    "release_url": "https://pypi.org/project/basyx-python-sdk/0.2.2/",
    "requires_dist": [
      "python-dateutil (<3,>=2.8)",
      "lxml (<5,>=4.2)",
      "urllib3 (>=1.26<2.0)",
      "pyecma376-2 (>=0.2.4)"
    ],
    "requires_python": ">=3.6",
    "summary": "The Eclipse BaSyx Python SDK, an implementation of the Asset Administration Shell for Industry 4.0 systems",
    "version": "0.2.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14012397,
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01214d90b774933580c8fc406e1778b8f0b48370ddbbfe77e9bea55d5b351124",
          "md5": "a0bd134b8026c464aefa44c4e9d5ead5",
          "sha256": "5b535311369537235a4678ba995f8ef50ca9d52b3cc7e8318a1586f6120f2d2b"
        },
        "downloads": -1,
        "filename": "basyx_python_sdk-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0bd134b8026c464aefa44c4e9d5ead5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 166531,
        "upload_time": "2022-06-02T13:28:27",
        "upload_time_iso_8601": "2022-06-02T13:28:27.504352Z",
        "url": "https://files.pythonhosted.org/packages/01/21/4d90b774933580c8fc406e1778b8f0b48370ddbbfe77e9bea55d5b351124/basyx_python_sdk-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb3f52336ab9b421706aaacce85f03dfc0fb6296f05727aa9425f163a08e0d6f",
          "md5": "073b177b9984cf87e906d4bddaf47c63",
          "sha256": "e1fe8891f05a2079bf03c8bb39ae9016461778d291374b400a58e4210ef290af"
        },
        "downloads": -1,
        "filename": "basyx-python-sdk-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "073b177b9984cf87e906d4bddaf47c63",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 140721,
        "upload_time": "2022-06-02T13:28:29",
        "upload_time_iso_8601": "2022-06-02T13:28:29.104502Z",
        "url": "https://files.pythonhosted.org/packages/fb/3f/52336ab9b421706aaacce85f03dfc0fb6296f05727aa9425f163a08e0d6f/basyx-python-sdk-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "01214d90b774933580c8fc406e1778b8f0b48370ddbbfe77e9bea55d5b351124",
        "md5": "a0bd134b8026c464aefa44c4e9d5ead5",
        "sha256": "5b535311369537235a4678ba995f8ef50ca9d52b3cc7e8318a1586f6120f2d2b"
      },
      "downloads": -1,
      "filename": "basyx_python_sdk-0.2.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a0bd134b8026c464aefa44c4e9d5ead5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 166531,
      "upload_time": "2022-06-02T13:28:27",
      "upload_time_iso_8601": "2022-06-02T13:28:27.504352Z",
      "url": "https://files.pythonhosted.org/packages/01/21/4d90b774933580c8fc406e1778b8f0b48370ddbbfe77e9bea55d5b351124/basyx_python_sdk-0.2.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fb3f52336ab9b421706aaacce85f03dfc0fb6296f05727aa9425f163a08e0d6f",
        "md5": "073b177b9984cf87e906d4bddaf47c63",
        "sha256": "e1fe8891f05a2079bf03c8bb39ae9016461778d291374b400a58e4210ef290af"
      },
      "downloads": -1,
      "filename": "basyx-python-sdk-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "073b177b9984cf87e906d4bddaf47c63",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 140721,
      "upload_time": "2022-06-02T13:28:29",
      "upload_time_iso_8601": "2022-06-02T13:28:29.104502Z",
      "url": "https://files.pythonhosted.org/packages/fb/3f/52336ab9b421706aaacce85f03dfc0fb6296f05727aa9425f163a08e0d6f/basyx-python-sdk-0.2.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}