{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# wkd\n\nWhich-key via dmenu, wkd.\n\n## Why?\n\n- I like keychords\n- I like which-key\n- I like dmenu\n\nIf you like these things too then you may like wkd.\n\n# Demo\n\n![Simple usage of wkd](https://codeberg.org/johndovern/wkd/raw/branch/master/media/simple.webm)\n\n![Usage of wkd -p KEY](https://codeberg.org/johndovern/wkd/raw/branch/master/media/auto_press.webm)\n\n## Disclaimer\n\nThe version of dmenu that I am using is **heavily** patched to provide\nthe functionality shown.\n\nWorry not, I provide\n[copies](https://codeberg.org/johndovern/wkd/src/branch/master/dmenu/patches)\nto the individual patches that I am using. There are is also a\n[README](./dmenu/patches/README.md) with some more info about each\npatch.\n\n# Install\n\nThe usual way:\n\n``` python\npip install wkd\n```\n\nRequires python3.\n\n# Getting started\n\n`wkd` is what you make it. So lets see how you can configure it.\n\n## wkdrc\n\nHere are the following configuration settings, a description of what\nthey do, and their default values:\n\n``` conf\n# \"prompt_cmd\" is the program to use to display the availible binds. This\n# setting supports fzf, or rofi instead of dmenu but you'll have to experiment\n# with those. If you do please let me know how it goes and how I can better\n# support usage of wkd with those programs.\nprompt_cmd = dmenu\n\n# Default args to use when running your prompt_cmd. This supports any arg\n# that your version of dmenu supports.\nbind_args = None\n\n# Separator between your keybind and the description. A space will get added on\n# each side between the key and description.\nseparator = ->\n\n# If shell is True then your keybind will execute in a shell. Becareful if you\n# set this to True.\nshell = False\n\n# You can create pretty intricate binds for wkd, but if you perfer multiple\n# smaller binds/keys files you can set which dir wkd should look for input/output\n# files here. The full path for these defaults would be $XDG_CONFIG_HOME/wkd/binds\n# for the binds_dir.\nbinds_dir = binds\nkeys_dir  = keys\n\n# If you have the grid patch applied to dmenu you can specify the number of columns\n# to show. If a value is set then wkd will calculate the needed lines to show all the\n# binds at a given level. This is mostly aesthetic but it makes a big difference imo\n# as dmenu fills in a column with options before moving to the next column instead of\n# filling in all columns in a line and moving to the next line.\ncolumns = 0\n```\n\n## bindsrc\n\nThe `bindsrc` file is the default source when updating your keybinds.\nThe syntax for this file is fairly simple but it is not (to my\nknowledge) common so let's go over it!\n\n### Top level keybinds\n\nThe following is a top level keybind:\n\n``` conf\n# This is a comment, nothing new.\nk This is a description == echo \"Everything past == is a command.\"\n```\n\nWhen you run `wkd` and press `k` the command will run.\n\nSome things to note:\n\n- White space only matters between the keybind and the description.\n- The keybind can only be a single key.\n- `wkd` will fail to parse bindsrc if the keybind is not a single key.\n- Everything past the first `==` is treated a command.\n\n### Prefixes\n\nTop level keybinds are nice but they really aren't much different than a\nnormal keybind. A prefix is a keybind that contains more\nkeybinds/prefixes. Prefixes are a great thing, let's cover them:\n\n``` conf\n# The next line is a prefix\np No command allowed\n    :s Sub keybind == echo \"Notice the colon.\"\n    # The next line is another prefix\n    :i Inner prefix\n        ::t A keybind! == echo \"We reached the end.\"\n```\n\nThings to note:\n\n- A prefix has no command, just a keybind and a description.\n- The `:` is not just for looks.\n- If a keybind/prefix is `n` number of prefixes deep, then `n` colons\n  are required for that keybind/prefix.\n\nAnd that's pretty much it. Let's look at how this translates to a\n`keys.json` file.\n\n### The result\n\nYou can run `wkd -u` to update your `keys.json` file from your `bindsrc`\nfile. *Side note*, the default `bindsrc` file is located at\n`$XDG_CONFIG_HOME/wkd` along with the resulting `keys.json` file.\n\nLet's say this is your `bindsrc` file:\n\n``` conf\n# Browsers prefix\nb Browsers\n    :f Firefox == firefox\n    # Profiles prefix\n    :F Firefox profiles\n        ::f Focus == firefox -P Focus\n        ::l Learning == firefox -P Learning\n        ::e Entertainment == firefox -P Entertainment\n    # Sites prefix\n    :s Sites\n        ::m My site == firefox \"https://www.my-site.org\"\n        ::o Other site == firefox \"https://www.my-other-site.org\"\n# emacs prefix\ne Emacs\n    :e Open emacs == emacs\n    # Projects prefix\n    :p Projects\n        ::m My project == emacs \"~/Projects/My Project\"\n        ::o Other project == emacs \"~/Projects/My Other Project\"\n# mpv prefix\nm mpv\n    :m My music == mpv \"~/Music/my_playlist.m3u\"\n    :e Empty mpv == mpv --idle=yes\n```\n\nAfter running `wkd -u` your `keys.json` file will look like this:\n\n``` json\n{\n    \"b -> Browsers\": {\n        \"f -> Firefox\": \"firefox\",\n        \"F -> Firefox profiles\": {\n            \"f -> Focus\": \"firefox -P Focus\",\n            \"l -> Learning\": \"firefox -P Learning\",\n            \"e -> Entertainment\": \"firefox -P Entertainment\"\n        },\n        \"s -> Sites\": {\n            \"m -> My site\": \"firefox \\\"https://www.my-site.org\\\"\",\n            \"o -> Other site\": \"firefox \\\"https://www.my-other-site.org\\\"\"\n        }\n    },\n    \"e -> Emacs\": {\n        \"e -> Open emacs\": \"emacs\",\n        \"p -> Projects\": {\n            \"m -> My project\": \"emacs \\\"~/Projects/My Project\\\"\",\n            \"o -> Other project\": \"emacs \\\"~/Projects/My Other Project\\\"\"\n        }\n    },\n    \"m -> mpv\": {\n        \"m -> My music\": \"mpv \\\"~/Music/my_playlist.m3u\\\"\",\n        \"e -> Empty mpv\": \"mpv --idle=yes\"\n    }\n}\n```\n\nThe `keys.json` file is what is used when running `wkd` so you can pick\nyour poison.\n\nI prefer to set my keybinds through the `bindsrc` file as I can add\ncomments and I find it easier to work with.\n\n## Usage\n\nHere is the help page for `wkd`:\n\n``` example\nusage: wkd [-h] [-d] [-i FILE] [-o FILE] [-p KEYs] [-r FILE | -u]\n\nWhich-key via dmenu.\n\noptions:\n  -h, --help            show this help message and exit\n  -d, --debug           Instead of (re)writing your keys.json when updating prints to screen.\n  -i FILE, --input FILE\n                        Can be used with --update to read a different bindsrc file.\n  -o FILE, --output FILE\n                        Can be used with --update to output to a different keys.json file.\n  -p KEY(s), --press KEY(s)\n                        Effectively presses KEY(s) after launching.\n  -r FILE, --read FILE  Read an alternate keys.json file. If FILE is a relative path wkd assumes\n                        it is in the $XDG_CONFIG_HOME/wkd/keys directory.\n  -u, --update          Update keybinds using bindsrc. See --input and --output for additional\n                        options.\n```\n\n# dmenu\n\nSo far `wkd` has really only been tested with dmenu. However, it works\nvery, very well with dmenu. Please read the\n[README](./dmenu/patches/README.md) in the `dmenu/patches` directory in\nthis repo for recommended configuration of dmenu.\n\n# Thanks for reading\n\nHope you like `wkd`, I sure do.\n\nThere are some pretty cool things you can do with it, let me know what\nyou come up with or what you think could be improved!\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "dmenu",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wkd",
    "package_url": "https://pypi.org/project/wkd/",
    "platform": null,
    "project_url": "https://pypi.org/project/wkd/",
    "project_urls": {
      "repository": "https://codeberg.org/johndovern/wdk"
    },
    "release_url": "https://pypi.org/project/wkd/0.0.2/",
    "requires_dist": [
      "loadconf",
      "promptx"
    ],
    "requires_python": "",
    "summary": "Which key via dmenu.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15236971,
  "releases": {
    "0.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b594e638ab5893c4ef588b1583ceebb6f463277015fe28fc3822e73d8d4fe06c",
          "md5": "85d6ea4f3317afcdc9999967dff358e6",
          "sha256": "061af459d425e517d0801df38bbd0e0854080588e8ec1a21088c6c79b8dac8c2"
        },
        "downloads": -1,
        "filename": "wkd-0.0.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85d6ea4f3317afcdc9999967dff358e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 3561,
        "upload_time": "2022-09-22T16:55:55",
        "upload_time_iso_8601": "2022-09-22T16:55:55.962249Z",
        "url": "https://files.pythonhosted.org/packages/b5/94/e638ab5893c4ef588b1583ceebb6f463277015fe28fc3822e73d8d4fe06c/wkd-0.0.0b1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f07c012f620f0a2f0c1df79bb28d52adafe87525f920d718f30c509469a49b3",
          "md5": "cdfccfc2e05f0fb9edba3615a365669c",
          "sha256": "569e0707f1ace024b875485aa5cf12834854a37a423e12af3fe95f302a73570b"
        },
        "downloads": -1,
        "filename": "wkd-0.0.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "cdfccfc2e05f0fb9edba3615a365669c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2667,
        "upload_time": "2022-09-22T16:55:58",
        "upload_time_iso_8601": "2022-09-22T16:55:58.491582Z",
        "url": "https://files.pythonhosted.org/packages/5f/07/c012f620f0a2f0c1df79bb28d52adafe87525f920d718f30c509469a49b3/wkd-0.0.0b1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d141df153ea1f0345ad8381f5831c1c7d4893c9fb14b8ac4312aa84caceb8527",
          "md5": "373d0517028bc1c195467295cc655930",
          "sha256": "308b700668bef20279130ebaa4db82532734a68afc8d1ae1f58d3c0b2dae38a8"
        },
        "downloads": -1,
        "filename": "wkd-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "373d0517028bc1c195467295cc655930",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 21641,
        "upload_time": "2022-09-28T06:15:43",
        "upload_time_iso_8601": "2022-09-28T06:15:43.001053Z",
        "url": "https://files.pythonhosted.org/packages/d1/41/df153ea1f0345ad8381f5831c1c7d4893c9fb14b8ac4312aa84caceb8527/wkd-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cfd295e2b54b2829477bcb624935c5e16bcebe53799404e2999e5a7e9a49d3c",
          "md5": "debb08b9bf4b2cd007038cdf0d4888b6",
          "sha256": "98113cc5634112558782e528256e6a7591e29ad7a5dd7f85f54ab30051ce9387"
        },
        "downloads": -1,
        "filename": "wkd-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "debb08b9bf4b2cd007038cdf0d4888b6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22733,
        "upload_time": "2022-09-28T06:15:44",
        "upload_time_iso_8601": "2022-09-28T06:15:44.875143Z",
        "url": "https://files.pythonhosted.org/packages/8c/fd/295e2b54b2829477bcb624935c5e16bcebe53799404e2999e5a7e9a49d3c/wkd-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d141df153ea1f0345ad8381f5831c1c7d4893c9fb14b8ac4312aa84caceb8527",
        "md5": "373d0517028bc1c195467295cc655930",
        "sha256": "308b700668bef20279130ebaa4db82532734a68afc8d1ae1f58d3c0b2dae38a8"
      },
      "downloads": -1,
      "filename": "wkd-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "373d0517028bc1c195467295cc655930",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 21641,
      "upload_time": "2022-09-28T06:15:43",
      "upload_time_iso_8601": "2022-09-28T06:15:43.001053Z",
      "url": "https://files.pythonhosted.org/packages/d1/41/df153ea1f0345ad8381f5831c1c7d4893c9fb14b8ac4312aa84caceb8527/wkd-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8cfd295e2b54b2829477bcb624935c5e16bcebe53799404e2999e5a7e9a49d3c",
        "md5": "debb08b9bf4b2cd007038cdf0d4888b6",
        "sha256": "98113cc5634112558782e528256e6a7591e29ad7a5dd7f85f54ab30051ce9387"
      },
      "downloads": -1,
      "filename": "wkd-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "debb08b9bf4b2cd007038cdf0d4888b6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22733,
      "upload_time": "2022-09-28T06:15:44",
      "upload_time_iso_8601": "2022-09-28T06:15:44.875143Z",
      "url": "https://files.pythonhosted.org/packages/8c/fd/295e2b54b2829477bcb624935c5e16bcebe53799404e2999e5a7e9a49d3c/wkd-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}