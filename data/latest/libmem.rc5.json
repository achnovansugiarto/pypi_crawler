{
  "info": {
    "author": "rdbo",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![libmem-logo](https://raw.githubusercontent.com/rdbo/libmem/master/LOGO.png)  \n### Made by rdbo\n#  \n\n## Discord Server\nhttps://discord.com/invite/Qw8jsPD99X\n\n## License\nThis project is licensed under the `GNU AGPLv3.0`\nRead `LICENSE` for more information\n\n## Features\n- Cross Platform (Windows/Linux/FreeBSD)\n- Cross Architecture (x86/x64)\n\n`libmem` can:\n- *Find Processes*\n- *Find Modules*\n- *Find Symbols*\n- *Read/Write/Set Memory*\n- *Allocate/Protect Memory*\n- *Scan Memory by Pattern/Signature*\n- *Hook/Unhook Functions*\n- *Assemble/Dissassemble Code (JIT)*\n- *Do VMT Hooking/Unhooking*\n- *Load/Unload Modules*\n- *Get Page Information*\n- *Enumerate Process Threads*\n\n***And much more!***\n\n## Examples\n\nFor more examples and API manual, access the [documentation](https://github.com/rdbo/libmem/blob/master/docs/DOCS.md)\n\n### C/C++\n```c\n#include <libmem/libmem.h>\n\nint main()\n{\n\tlm_module_t mod;\n\tlm_address_t main_sym;\n\n\tLM_FindModule(\"mygamemodule.so\", &mod);\n\tmain_sym = LM_FindSymbolAddress(&mod, \"main\");\n\tprintf(\"[*] Module Name: %s\\n\", mod.name);\n\tprintf(\"[*] Module Path: %s\\n\", mod.path);\n\tprintf(\"[*] Module Base: %p\\n\", mod.base);\n\tprintf(\"[*] Module Size: %p\\n\", mod.size);\n\tprintf(\"[*] Module End:  %p\\n\", mod.end);\n\tprintf(\"[*] Main Addr:   %p\\n\"), main_sym);\n\n    return 0;\n}\n```\n\n### Rust\n```rust\nuse libmem::*;\n\nfn some_function() {\n    // ...\n}\n\nfn hk_some_function() {\n    // ...\n}\n\nunsafe fn test() {\n    // reading/writing memory\n    let number : i32 = 0;\n    let number_addr = &number as *const i32 as lm_address_t;\n    let value : i32 = 1337;\n    LM_WriteMemory(number_addr, &value).unwrap(); // write 1337 to number\n    let read_number : i32 = LM_ReadMemory(number_addr).unwrap();\n    println!(\"[*] Number Value: {}\", read_number); // it will show 1337\n\n    // hooking/detouring functions\n    let func_addr = some_function as *const () as lm_address_t;\n    let hk_addr = hk_some_function as *const () as lm_address_t;\n    println!(\"[*] Hooking 'some_function'\");\n    println!(\"[*] Original Address: {:#x}\", func_addr);\n\n    let trampoline = LM_HookCode(func_addr, hk_addr).unwrap();\n    println!(\"[*] Trampoline: {:#x?}\", trampoline);\n\n    some_function(); // this will call 'hk_some_function'\n\n    // restore the original code from 'some_function'\n    LM_UnhookCode(some_function_addr, trampoline).unwrap();\n\n    println!(\"[*] Unhooked 'some_function'\");\n    some_function(); // call 'some_function' to see if it has been unhooked\n}\n\nfn main() {\n    unsafe {\n        test();\n    }\n}\n```\n\n### Python\n```py\nfrom libmem import *\n\n# Assemble/Disassemble code\nprint(\"[*] Assembly\")\ninst = LM_Assemble(\"mov eax, ebx\")\nprint(f\"{code} : {inst.bytes}\")\n\nprint(\"[*] Disassembly:\")\ninst = LM_Disassemble(bytearray(b\"\\x55\"))\nprint(f\"{inst.bytes} : {inst.mnemonic} {inst.op_str}\")\n```\n\n## Installing\n\n### Windows\n**Note**: If you download a binary version of libmem in the GitHub releases, you only need to install the Windows SDK. Building is not necessary, just add `libmem/include` to your project's include directories and link it against the binary you downloaded.\n\n1. Install the Windows SDK: [Windows 7](https://www.microsoft.com/en-us/download/details.aspx?id=8279) - [Windows 10/11](https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/)\n\n2. Install [Python 3](https://python.org/downloads) (Check the option to add Python to PATH) (Use [Python 3.8.9](https://python.org/downloads/release/python-389) for Windows 7)\n\n3. Install [Visual Studio](https://visualstudio.microsoft.com/) 2022 or newer (with C++ support and CMake) (older versions might work, but they were not tested)\n\n4. Install [CMake](https://cmake.org/download)\n\n5. Install [Git Bash](https://git-scm.com/downloads)\n\n6. Run a Visual Studio `Developer Command Prompt` as Administrator\n\n7. Run the following command to append libmem's destination directory to your `%PATH%` user variable:\n\n        setx PATH \"%PATH%;%ProgramFiles%\\libmem\\include;%ProgramFiles%\\libmem\\lib\"\n\n8. Continue reading at `Build and Install`\n\n### Linux\n**Note**: The following commands are for Debian/Ubuntu based distributions. Make sure to find the appropriate commands for your Linux distribution.\n\n1. Open a terminal\n\n2. Install GCC, G++, Git, CMake, Make, Python 3, and the Linux headers:\n\n        sudo apt install gcc g++ git cmake make python3 linux-headers\n\n3. Continue reading at `Build and Install`\n\n### FreeBSD\n\n1. Add a mountpoint for the `procfs` filesystem in your `/etc/fstab` by appending the following line:\n\n        proc\t\t/proc\t\tprocfs\trw\t0\t0\n\n2. Manually mount the `procfs`. This will only be necessary if you don't reboot. If you reboot, it will be automatically mounted because of the line at `/etc/fstab`. Run the following command (as root):\n\n        mount -t procfs proc /proc\n\n3. Install Git, CMake and Python3 (run as root) (clang, clang++ and make should already be installed):\n\n        pkg install git cmake python3\n\n4. Continue reading at `Build and Install`\n\n### Build and Install\n**Note**: Run the following commands on Git Bash (Windows) or a terminal (Linux/FreeBSD).\n\nClone the repository:\n```\ngit clone https://github.com/rdbo/libmem\n```\nInitialize and update the submodules:\n```\ngit submodule init\ngit submodule update\n```\nGenerate the CMake cache:\n```\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=Release\n```\n\nCompile libmem:\n\n*Windows*: `nmake`\n\n*Unix-like*: `make -j 4`\n\nInstall libmem (run as root or as Administrator):\n\n*Windows*: `nmake install`\n\n*Unix-like*: `make install`\n\nAfter installing, follow the the proper `Usage` section for your programming language\n\n## Usage (C/C++)\n\nAdd `#include <libmem/libmem.h>` (C/C++) or `#include <libmem/libmem.hpp>` (C++) to your source code.\nLink the generated libmem library against your binary (`libmem.so` for Unix-like or `libmem.dll` for Windows).\n*For GCC-like compilers*: add the flag `-llibmem` to your compiler and it should link it.\n```c\n#include <libmem/libmem.h> /* C/C++ */\n#include <libmem/libmem.hpp> /* Force C++ */\n```\n\n## Usage (Rust)\nAdd the following line to your `Cargo.toml` under `[dependencies]`:\n```toml\nlibmem = \"4.0\"\n```\nImport libmem in your Rust source code:\n```rust\nuse libmem::*;\n```\n\n## Usage (Python)\nMake sure to have Python >= 3.6 active  \nEither install the `libmem` package from PyPi by running the following command:  \n```\npip install --upgrade libmem\n```\nOr build and install it yourself by running the following commands:\n```\ncd libmem-py\npython configure.py\npython setup.py install\n```\nNow to import libmem, just do the following in your Python code:\n```py\nfrom libmem import *\n```\n\n## Dependencies\nAll:\n- capstone (included in root project)\n- keystone (included in root project)\n- LIEF (included in root project)\n- libstdc++ (used in keystone and LIEF)\n- libmath (used in keystone)\n\nWindows:  \n- Windows SDK (-luser32, -lpsapi) \n\nLinux/Android:  \n- libdl (-ldl)\n\nBSD:  \n- libdl (-ldl)  \n- libkvm (-lkvm)\n- libprocstat (-lprocstat)    \n- libelf (-lelf)\n  \n## API Overview\n```\nLM_EnumProcesses\nLM_GetProcess\nLM_GetProcessEx\nLM_FindProcess\nLM_IsProcessAlive\nLM_GetSystemBits\n\nLM_EnumThreads\nLM_EnumThreadsEx\nLM_GetThread\nLM_GetThreadEx\nLM_GetThreadProcess\n\nLM_EnumModules\nLM_EnumModulesEx\nLM_FindModule\nLM_FindModuleEx\nLM_LoadModule\nLM_LoadModuleEx\nLM_UnloadModule\nLM_UnloadModuleEx\n\nLM_EnumSymbols\nLM_FindSymbolAddress\n\nLM_EnumPages\nLM_EnumPagesEx\nLM_GetPage\nLM_GetPageEx\n\nLM_ReadMemory\nLM_ReadMemoryEx\nLM_WriteMemory\nLM_WriteMemoryEx\nLM_SetMemory\nLM_SetMemoryEx\nLM_ProtMemory\nLM_ProtMemoryEx\nLM_AllocMemory\nLM_AllocMemoryEx\nLM_FreeMemory\nLM_FreeMemoryEx\n\nLM_DataScan\nLM_DataScanEx\nLM_PatternScan\nLM_PatternScanEx\nLM_SigScan\nLM_SigScanEx\n\nLM_HookCode\nLM_HookCodeEx\nLM_UnhookCode\nLM_UnhookCodeEx\n\nLM_Assemble\nLM_AssembleEx\nLM_FreeCodeBuffer\nLM_Disassemble\nLM_DisassembleEx\nLM_FreeInstructions\nLM_CodeLength\nLM_CodeLengthEx\n\nLM_VmtNew\nLM_VmtHook\nLM_VmtUnhook\nLM_VmtGetOriginal\nLM_VmtReset\nLM_VmtFree\n```\n\n## Projects\nMade with libmem:  \n- ![AssaultCube Multihack](https://github.com/rdbo/AssaultCube-Multihack)  \n- ![X-Inject](https://github.com/rdbo/x-inject)  \n- ![DirectX9 BaseHook](https://github.com/rdbo/DX9-BaseHook)  \n- ![DirectX11 BaseHook](https://github.com/rdbo/DX11-BaseHook)  \n- ![OpenGL BaseHook](https://github.com/rdbo/GL-BaseHook)  \n- ![Counter-Strike 1.6 BaseHook](https://github.com/rdbo/cstrike-basehook)  \n- ![Crazymem - NodeJS Memory Library](https://github.com/karliky/Crazymem)  \n  \n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rdbo/libmem",
    "keywords": "gamehacking memory process hooking detouring hacking winapi linux freebsd",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "libmem",
    "package_url": "https://pypi.org/project/libmem/",
    "platform": null,
    "project_url": "https://pypi.org/project/libmem/",
    "project_urls": {
      "Bug Tracker": "https://github.com/rdbo/libmem/issues",
      "Discord Server": "https://discord.com/invite/Qw8jsPD99X",
      "Documentation": "https://github.com/rdbo/libmem/blob/master/docs/DOCS.md",
      "Homepage": "https://github.com/rdbo/libmem"
    },
    "release_url": "https://pypi.org/project/libmem/4.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Game Hacking Library (Windows/Linux/FreeBSD)",
    "version": "4.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16555315,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a26b2bf8fff469ec4fe709e50e19d9d95bad979474311127328ed64c2928064",
          "md5": "067739f193977982ed9d2c7a98c7c018",
          "sha256": "b0a4ba5abfa7a93cade1b5f23f280e71e7b6a51f3b65182602dbceb419806f40"
        },
        "downloads": -1,
        "filename": "libmem-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "067739f193977982ed9d2c7a98c7c018",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30509,
        "upload_time": "2021-08-23T14:03:15",
        "upload_time_iso_8601": "2021-08-23T14:03:15.754800Z",
        "url": "https://files.pythonhosted.org/packages/8a/26/b2bf8fff469ec4fe709e50e19d9d95bad979474311127328ed64c2928064/libmem-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc9b2eefb1dd2db8c13ca51e97f2b3ac7c8d902779d8ac17cdb4f31cc507a638",
          "md5": "460149165b8abd972b46beaae855470b",
          "sha256": "86ab50ba7292e4a7006dcc653061089091c1bb9d176ee50582517a9595c4ff9c"
        },
        "downloads": -1,
        "filename": "libmem-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "460149165b8abd972b46beaae855470b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31223,
        "upload_time": "2021-08-24T12:50:21",
        "upload_time_iso_8601": "2021-08-24T12:50:21.976327Z",
        "url": "https://files.pythonhosted.org/packages/fc/9b/2eefb1dd2db8c13ca51e97f2b3ac7c8d902779d8ac17cdb4f31cc507a638/libmem-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29f0b5895234b676ca1f4f66cdc55c94ef4e5bcb4a36f73483c1fda60c0773e5",
          "md5": "49c4a51dc9bf18301b1efc1729a6c42f",
          "sha256": "155a6801393d81756792d19855a8172f487fdc8c3e51e9b41fc95565f87c8e94"
        },
        "downloads": -1,
        "filename": "libmem-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "49c4a51dc9bf18301b1efc1729a6c42f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31267,
        "upload_time": "2021-08-24T13:02:54",
        "upload_time_iso_8601": "2021-08-24T13:02:54.375473Z",
        "url": "https://files.pythonhosted.org/packages/29/f0/b5895234b676ca1f4f66cdc55c94ef4e5bcb4a36f73483c1fda60c0773e5/libmem-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "88e1eabd771d2d0f19e5472d9cd3bd1596598808709e6bd0053d9b427b8f453e",
          "md5": "fc378e213229f221b3050b5276fd53a8",
          "sha256": "4943c781a68f494f73976d14b97d9ffda849784126a2b2470b85f08e17d7dfe8"
        },
        "downloads": -1,
        "filename": "libmem-4.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fc378e213229f221b3050b5276fd53a8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16066,
        "upload_time": "2023-01-22T10:51:42",
        "upload_time_iso_8601": "2023-01-22T10:51:42.669836Z",
        "url": "https://files.pythonhosted.org/packages/88/e1/eabd771d2d0f19e5472d9cd3bd1596598808709e6bd0053d9b427b8f453e/libmem-4.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5897c3687b337260c46cfaee01f8c4bf10ca1793700cd8cdcc5ad6854f5bbd8",
          "md5": "ae8a26b58adc717d3e5aa83f85f5a2de",
          "sha256": "6a39ab32d23522f8e59f863bce5ab30f91d2dd884c776b58a4878257eb1f0353"
        },
        "downloads": -1,
        "filename": "libmem-4.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ae8a26b58adc717d3e5aa83f85f5a2de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16558,
        "upload_time": "2023-01-25T01:25:54",
        "upload_time_iso_8601": "2023-01-25T01:25:54.641401Z",
        "url": "https://files.pythonhosted.org/packages/e5/89/7c3687b337260c46cfaee01f8c4bf10ca1793700cd8cdcc5ad6854f5bbd8/libmem-4.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e5897c3687b337260c46cfaee01f8c4bf10ca1793700cd8cdcc5ad6854f5bbd8",
        "md5": "ae8a26b58adc717d3e5aa83f85f5a2de",
        "sha256": "6a39ab32d23522f8e59f863bce5ab30f91d2dd884c776b58a4878257eb1f0353"
      },
      "downloads": -1,
      "filename": "libmem-4.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ae8a26b58adc717d3e5aa83f85f5a2de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16558,
      "upload_time": "2023-01-25T01:25:54",
      "upload_time_iso_8601": "2023-01-25T01:25:54.641401Z",
      "url": "https://files.pythonhosted.org/packages/e5/89/7c3687b337260c46cfaee01f8c4bf10ca1793700cd8cdcc5ad6854f5bbd8/libmem-4.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}