{
  "info": {
    "author": "Michael DÃ¶rflinger",
    "author_email": "michaeldoerflinger93@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# Python openHAB CRUD\nA simple `CRUD` for accessing the openHAB REST API. Whether via the cloud or locally. The `CRUD` can be used only for openHAB `Items`. `CRUD` means that you can run `Create`, `Read`, `Update` and `Delete` on `Items`. The openHAB Cloud does not allow to use `Create` and `Delete`. This is the case for security reasons. In this case you have to create or delete an item locally.\n\n## Installation\n\nYou can install it by using `pip`:\n\n```\npython3 -m pip install python-openhab-crud\n```\n\n## Usage\n\n`CRUD` means that you can run `Create`, `Read`, `Update` and `Delete` on `Items`. `Reading` an `Item` can have two different meanings: You can `Read` the whole `Item` or only the `State` of an `Item`. The latter can be done with the `getState` function. Also can `Updating` an `Item` have two different meanings. In openHAB you can change an `State` by using `sendCommand` or `postUpdate`. The function `update` is an alias for `sendCommand` or `postUpdate`. You can specify `sendCommand` or `postUpdate` as parameters for `update`. If no parameter is specified, `postUpdate` is used automatically.\n\nAt first you have to import the `CRUD` module:\n\n```\nfrom openhab import CRUD\n```\n\n### Create connection to the openHAB Cloud (as example myopenhab.org)\n\nIf you want to create a connection to the `openHAB Cloud` you have to run:\n\n```\ncrud = CRUD(\"https://myopenhab.org\", \"<your_email>@<your_provider>\", \"<email_password>\")\n```\n\nPlease make sure to replace `<your_email>@<your_provider>` with your email address and `<email_password>` with your password that you used for your `openHAB Cloud account`.\n\n### Create connection to your local openHAB instance\n\nIf you want to create a connection to your local `openHAB` instance you have to replace `<username>` and `<password>` with the username and password of your local `openHAB account`:\n\n```\ncrud = CRUD(\"http://<your_ip>:8080\", \"<username>\", \"<password>\")\n```\n\n### Get all Items\n\nIf you want to retrieve all Items via the `REST API` of `openHAB` you can run:\n\n```\nitems = crud.getAllItems()\n```\n\nThe return value is a `list` of `dictionaries` (`dict`). Each item is represented as `dict`. You can check it by using `type`:\n\n```\nprint(type(items))\n```\n\nYou can print each item separately by running:\n\n```\nfor item in items:\n    print(item)\n```\n\nAnd of course you can access each property by using the `get` method:\n\n```\nfor item in items:\n    item_type = item.get(\"type\")\n    item_name = item.get(\"name\")\n    item_state = item.get(\"state\")\n\n    print(\"Received item type \" + item_type + \" with name \" + item_name + \" and state \" + item_state)\n```\n\n### Creating new items\n\nYou can only create a new `Item` if you have access to your local `openHAB` instance. For security reasons, this is prohibited via the cloud.\n\nAn `Item` must contain minimum its [Name](https://www.openhab.org/docs/configuration/items.html#name) and its [Type](https://www.openhab.org/docs/configuration/items.html#type). A [Label](https://www.openhab.org/docs/configuration/items.html#label), a given [State](https://www.openhab.org/docs/configuration/items.html#state) or [Groups](https://www.openhab.org/docs/configuration/items.html#groups) will be optional.\n\nSo at least you can run as example following:\n\n```\ncrud.create(\"testItem\", \"String\", \"my test string\", [\"testGroup\"], \"ON\")\ncrud.create(\"testItem2\", \"String\", \"my test string\", [\"testGroup\"])\ncrud.create(\"testItem3\", \"Switch\", \"my test switch\")\ncrud.create(\"testItem4\", \"Switch\")\n```\n\nOf course you can use a different order:\n\n```\ncrud.create(state=\"ON\", type=\"String\", name=\"testItem\")\n```\n\n`Groups` must be passed as a `list`, since an `Item` can be assigned to several `Groups`:\n\n```\ncrud.create(\"testItem\", \"String\", \"my test string\", [\"group1\", \"group2\", \"group3\"])\n```\n\nThe function automatically checks if the `Type` of the `Item` exists in openHAB and thus can be created. If you want to set a `State` for this `Item`, it is also automatically checked whether the `State` is consistently valid for this `Type`.\n\nThere will be no response if it is correct!\n\n### Reading an item\n\n`Reading` an `Item` means that all information about this `Item` is queried and not only the `State`. You can do this as follows:\n\n```\ntestItem = crud.read(\"testItem\")\n```\n\nYou will receive an `Item` as a `dictionary` (`dict`):\n\n```\nprint(type(testItem))\n```\n\nAnd of course you can access each property by using the `get` method:\n\n```\nitem_type = testItem.get(\"type\")\nitem_name = testItem.get(\"name\")\nitem_state = testItem.get(\"state\")\n\nprint(\"Received item type \" + item_type + \" with name \" + item_name + \" and state \" + item_state)\n```\n\n### Updating an item\n\n`Updating` an `Item` have two different meanings. In openHAB you can change an `State` by using `sendCommand` or `postUpdate`. The function `update` is an alias for `sendCommand` or `postUpdate`. You can specify `sendCommand` or `postUpdate` as parameters for `update`. If no parameter is specified, `postUpdate` is used automatically.\n\nSo you can run as example\n\n```\ncrud.update(\"testItem\", \"Hello World\")\n```\n\nor\n\n```\ncrud.update(\"testItem\", \"Hello World\", \"postUpdate\")\n```\n\ninstead of\n\n```\ncrud.postUpdate(\"testItem\", \"Hello World\")\n```\n\nOr if you want to use `sendCommand` in `openHAB` you can run\n\n```\ncrud.update(\"testItem\", \"Lorem ipsum\", \"sendCommand\")\n```\n\ninstead of\n\n```\ncrud.sendCommand(\"testItem\", \"Lorem ipsum\")\n```\n\nNote: `postUpdate` and `sendCommand` have validation capabilities. With `type` you can set the `type` of the `Item`. This will call a function which checks that the `value` which should change the `State` of the `Item` is `persistent`. However, this does not mean that you are checking the correct `Type`, because `openHAB` may have a different `Type` than the one you want to update. If you will set the `validate` variable to `True` the `Item` is queried via the `REST API` and the `Type` is checked.\n\nFor checking if you put a right value for the `State` of the assumed `Type` you can run as example\n\n```\ncrud.sendCommand(\"testItem\", \"Lorem ipsum\", \"Switch\")\n```\n\nor\n\n```\ncrud.postUpdate(\"testItem\", \"Hello World\", \"Switch\")\n```\n\nIf you want to check if the actual `Type` on openHAB is correct and you can set the `State` to this value you can run:\n\n\n```\ncrud.sendCommand(\"testItem\", \"Lorem ipsum\", None, True)\n```\n\nor\n\n```\ncrud.postUpdate(\"testItem\", \"Hello World\", None, True)\n```\n\nAnother possibility is: name:str, value, type:str = None, validate:bool = None):\n\n```\ncrud.sendCommand(\"testItem\", \"Lorem ipsum\", validate=True)\n```\n\nor\n\n```\ncrud.postUpdate(\"testItem\", \"Hello World\", validate=True)\n```\n\nOf course you can change the order as example to:\n\n```\ncrud.postUpdate(validate=True, type=\"Switch\", name=\"testItem\")\n```\n\nThere will be no response if it is correct!\n\n### Deleting new items\n\nYou can only delete an `Item` if you have access to your local `openHAB` instance. For security reasons, this is prohibited via the cloud.\n\nIn this case you can run following:\n\n```\ncrud.delete(\"testItem\")\n```\n\nThere will be no response if it is correct!\n\n### Getting the state of an item\n\nIn most cases you only want to query the current `State` of an `Item` and not get all informations of an `Item`. The `getState` function can be used for this purpose:\n\n```\nstate = crud.getState(\"testItem\")\n```\n\nYou get the state as a string:\n\n```\nprint(type(state))\n```\n\nThis is due to the data transmission via `http`. Numerical values must be parsed. `openHAB` specific values like `UP`, `DOWN`, `PLAY`, `PAUSE`, `ON`, `OFF` etc. have no data type in Python, i.e. here a string (`str`) still makes sense. Here the capitalization must be considered!\n\nAt least you can print the `State` with:\n\n```\nprint(state)\n```\n\n### Close session\n\nSince we may want to make several requests in a row, a `session` is opened when the CRUD `object` is created. This can of course also be terminated at the end:\n\n```\ncrud.close()\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Michdo93/python-openhab-crud",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Michdo93/python-openhab-crud",
    "keywords": "openHAB",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-openhab-crud",
    "package_url": "https://pypi.org/project/python-openhab-crud/",
    "platform": null,
    "project_url": "https://pypi.org/project/python-openhab-crud/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Michdo93/python-openhab-crud/issues",
      "Documentation": "https://github.com/Michdo93/python-openhab-crud/blob/main/README.md",
      "Download": "https://github.com/Michdo93/python-openhab-crud",
      "Homepage": "https://github.com/Michdo93/python-openhab-crud",
      "Source Code": "https://github.com/Michdo93/python-openhab-crud"
    },
    "release_url": "https://pypi.org/project/python-openhab-crud/1.0.0/",
    "requires_dist": [
      "requests (>=2.28.1)"
    ],
    "requires_python": ">=3.5",
    "summary": "A simple CRUD for accessing the openHAB REST API. Whether via the cloud or locally.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15204934,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a68afc4f4427879ac2ac853a167ad07991e411665607bf5a20882bf946a1658d",
          "md5": "e6010e0bd5de9b6de46b35fbdd8fc181",
          "sha256": "0b3b9d8fb11ad2f075ff5a2486951fa7ef0a2b723a0e51c29f0eb5dbed739ce9"
        },
        "downloads": -1,
        "filename": "python_openhab_crud-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6010e0bd5de9b6de46b35fbdd8fc181",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7391,
        "upload_time": "2022-09-23T10:46:08",
        "upload_time_iso_8601": "2022-09-23T10:46:08.767555Z",
        "url": "https://files.pythonhosted.org/packages/a6/8a/fc4f4427879ac2ac853a167ad07991e411665607bf5a20882bf946a1658d/python_openhab_crud-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "914237173818f3ef84ff2cc5252460686b7bb5c0b8b25f426f3ce2145130f7ca",
          "md5": "d00bc980c3d2a805a8558caca76562ad",
          "sha256": "806d9a392c272e5d4f50fb57ca6bbc88f74373f07bc070f7a5862599d0c9a002"
        },
        "downloads": -1,
        "filename": "python_openhab_crud-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d00bc980c3d2a805a8558caca76562ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7609,
        "upload_time": "2022-09-23T15:14:22",
        "upload_time_iso_8601": "2022-09-23T15:14:22.559553Z",
        "url": "https://files.pythonhosted.org/packages/91/42/37173818f3ef84ff2cc5252460686b7bb5c0b8b25f426f3ce2145130f7ca/python_openhab_crud-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72c2b3c1a5b88f1a359d48af0f64ca5bfda3df10ba5fae12b2fc6ee85e47f72b",
          "md5": "90fbc432755f09cfef29eac0a5a54876",
          "sha256": "8d043a8f77550561e8b8adb69bfd1fbe66a8814e8f47c140e637acbfbe20905f"
        },
        "downloads": -1,
        "filename": "python_openhab_crud-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "90fbc432755f09cfef29eac0a5a54876",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7301,
        "upload_time": "2022-09-25T13:44:00",
        "upload_time_iso_8601": "2022-09-25T13:44:00.885603Z",
        "url": "https://files.pythonhosted.org/packages/72/c2/b3c1a5b88f1a359d48af0f64ca5bfda3df10ba5fae12b2fc6ee85e47f72b/python_openhab_crud-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6f2ef18d3c625b278e079c9b0ee83c2d9e3be81487a339fdc7de4dee7f62d5b",
          "md5": "6d9eb8b239a1d39a5de0256cb861af1e",
          "sha256": "12535a6c371df571443c1e9875d6399b8a3f5ecbe89d0a020337dd2386be703f"
        },
        "downloads": -1,
        "filename": "python_openhab_crud-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d9eb8b239a1d39a5de0256cb861af1e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7303,
        "upload_time": "2022-09-25T13:59:33",
        "upload_time_iso_8601": "2022-09-25T13:59:33.020526Z",
        "url": "https://files.pythonhosted.org/packages/e6/f2/ef18d3c625b278e079c9b0ee83c2d9e3be81487a339fdc7de4dee7f62d5b/python_openhab_crud-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f6bd5de60e659d76da871c7347823a99abed84efcf2546c00efb5a3a3315246",
          "md5": "9350e6c09b586ed27d8d757ec211e03d",
          "sha256": "8f230d8318256700cc251863aa94900d484d97a46de12b0c04f3cd29fe129431"
        },
        "downloads": -1,
        "filename": "python_openhab_crud-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9350e6c09b586ed27d8d757ec211e03d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 7685,
        "upload_time": "2022-09-25T14:06:37",
        "upload_time_iso_8601": "2022-09-25T14:06:37.815966Z",
        "url": "https://files.pythonhosted.org/packages/8f/6b/d5de60e659d76da871c7347823a99abed84efcf2546c00efb5a3a3315246/python_openhab_crud-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8f6bd5de60e659d76da871c7347823a99abed84efcf2546c00efb5a3a3315246",
        "md5": "9350e6c09b586ed27d8d757ec211e03d",
        "sha256": "8f230d8318256700cc251863aa94900d484d97a46de12b0c04f3cd29fe129431"
      },
      "downloads": -1,
      "filename": "python_openhab_crud-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9350e6c09b586ed27d8d757ec211e03d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 7685,
      "upload_time": "2022-09-25T14:06:37",
      "upload_time_iso_8601": "2022-09-25T14:06:37.815966Z",
      "url": "https://files.pythonhosted.org/packages/8f/6b/d5de60e659d76da871c7347823a99abed84efcf2546c00efb5a3a3315246/python_openhab_crud-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}