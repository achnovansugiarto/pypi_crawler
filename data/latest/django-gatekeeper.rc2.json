{
  "info": {
    "author": "Jeremy Carbaugh",
    "author_email": "jcarbaugh@sunlightfoundation.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "=================\ndjango-gatekeeper\n=================\n\nDjango application for moderation of model instances.\n\nProvides convenience methods and an admin interface for moderating instances of registered Django models.\n\ndjango-gatekeeper is a project of Sunlight Labs (c) 2008.\nWriten by Jeremy Carbaugh <jcarbaugh@sunlightfoundation.com>\n\nAll code is under a BSD-style license, see LICENSE for details.\n\nHomepage: http://pypi.python.org/pypi/django-gatekeeper/\n\nSource: http://github.com/sunlightlabs/django-gatekeeper/\n\n\nRequirements\n============\n\npython >= 2.4\n\ndjango >= 1.0\n\n\nInstallation\n============\n\nTo install run\n\n    ``python setup.py install``\n\nwhich will install the application into python's site-packages directory.\n\n\nQuick Setup\n===========\n\n\nsettings.py\n-----------\n\nAdd to INSTALLED_APPS:\n\n\t``gatekeeper``\n\t\nBe sure to place gatekeeper above any application which contains models that will be moderated.\n\nAdd to MIDDLEWARE_CLASSES:\n\n    ``gatekeeper.middleware.GatekeeperMiddleware``\n\nAdd to urls.py:\n\n    url(r'^admin/gatekeeper/', include('gatekeeper.urls')),\n    \n    \nRegister Models\n---------------\n\n    >>> from django.db import models\n    >>> import gatekeeper\n    >>> class MyModel(models.Model):\n    ...     pass\n    >>> gatekeeper.register(MyModel)\n\n``gatekeeper.register`` optionally takes some extra parameters for advanced configuration, see `advanced register options`_ for details.\n\n\nAdmin Moderation Queue\n----------------------\n\nInclude the following in urls.py BEFORE the default admin:\n\n    ``url(r'^admin/gatekeeper/', include('gatekeeper.urls')),``\n\n\nAccessing Moderated Models\n--------------------------\n\nModels registered with ``gatekeeper.register`` are given a custom manager that adds several extra fields.  (As documented in `advanced register options`_ all of these fields can be renamed via special parameters to ``gatekeeper.register`` but for simplicity they will be referred to by their default names throughout this document.)\n\nModel Instance Convenience Fields\n.................................\n\nEvery model instance accessed via the custom manager ('objects' by default) has a few extra read-only fields tacked on:\n\n* moderation_status - current moderation status (APPROVED_STATUS, PENDING_STATUS, or REJECTED_STATUS)\n* flagged - flag status (True or False)\n\nIn addition, ``moderation_object`` is provided as a shortcut to access the actual ``ModeratedObject`` instance.  The first access of this attribute incurs a database hit but the instance is then cached for the object lifetime.\n\nGatekeeperQuerySet\n..................\n\nThe custom manager returns a special GatekeeperQuerySet with a few extra filters:\n\n    >>> MyModel.objects.all().approved()     # approved by moderator\n    >>> MyModel.objects.all().pending()      # pending in moderation queue\n    >>> MyModel.objects.all().rejected()     # rejected by moderator\n    >>> MyModel.objects.all().flagged()      # flagged \n    >>> MyModel.objects.all().not_flagged()  # not flagged\n\nThese are implemented on the `GatekeeperQuerySet` itself so that they can be chained:\n\n    >>> MyModel.objects.filter(spam=eggs).rejected().flagged()\n\n\nDeletion of Moderated Objects\n-----------------------------\n\nWhen a moderated object instance is deleted, the associated ModeratedObject instance is deleted as well.\n\n\nAdvanced Usage\n==============\n\n\nAuto-Moderation\n---------------\n\nIt can be hassle to have to manually moderate objects when there is a simple ruleset used to determine how an object will be moderated. In order to use auto-moderation, the following needs to be added to settings.py:\n\n    ``GATEKEEPER_ENABLE_AUTOMODERATION = True``\n\nGatekeeper provides two methods of auto-moderation. First, if the user that saves a moderated object has permission to moderate that object, it will be automatically approved. This will always happen if GATEKEEPER_ENABLE_AUTOMODERATION is set to true in settings.py. The second form of auto-moderation allows a moderation method to be written. This method should return True to approve, False to reject, or None to pass on for manual moderation. The auto-moderation function is pass as an argument when registering a Model.\n\n    >>> class MyModel(models.Model):\n    ...     pass\n    >>> def myautomod(obj):\n    ...     pass\n    >>> gatekeeper.register(MyModel, auto_moderator=myautomod)\n\nIf the auto-moderation function returns None or is not specified for a model, the first form of auto-moderation will be attempted.\n\n\nLong Description\n----------------\n\nWhen registering a model, a long_desc parameter may be specified that is used to render descriptive text about the instance that is being moderated. The long description is used in emails and in the admin interface.\n\n\t>>> class Book(models.Model):\n\t...     title = models.CharField(max_length=128)\n\t...\t\tauthor = models.CharField(max_length=128)\n\t>>> def booklongdesc(obj):\n\t...     return u\"%s written by %s\" % (obj.title, obj.author)\n\t>>> gatekeeper.register(MyModel, long_desc=booklongdesc)\n\nThe long_desc parameter accepts either a method or a string. If a method is passed, it will be invoked with the object as the only parameter. If a string is used, gatekeeper will first look on the object for a method with the same name, then an attribute if no method is found. If neither are found, or no long_desc parameter is specified, the objects __unicode__() method will be called.\n\n\nDefault Moderation\n------------------\n\nBy default, moderated model instances will be marked as pending and placed on the moderation queue when created. This behavior can be overridden by specifying GATEKEEPER_DEFAULT_STATUS in settings.py.\n\n    * ``gatekeeper.PENDING_STATUS`` - mark objects as pending and place on the moderation queue\n    * ``gatekeeper.APPROVED_STATUS`` - mark objects as approved and bypass the moderation queue\n    * ``gatekeeper.REJECTED_STATUS`` - mark objects as rejected and bypass the moderation queue\n\nModeration On Flagging\n----------------------\n\nFlagging is provided as a simple mechanism to allow for users to flag content generally for further review.  By default flagging an object does not change it's moderation status, but GATEKEEPER_STATUS_ON_FLAG is available toalter this behavior.  If GATEKEEPER_STATUS_ON_FLAG is set to one of the status constants (see `Default Moderation`_) the given status will be set for an object when ``ModeratedObject.flag`` is called.\n\nImport Unmoderated Objects\n--------------------------\n\nIf gatekeeper is added to an existing application, objects already in the database will not be registered with gatekeeper. You can register existing objects with gatekeeper by passing true to the ``import_unmoderated`` parameter of the registration method. The imported objects will be set to the state specified by GATEKEEPER_DEFAULT_STATUS in settings.py or pending if GATEKEEPER_DEFAULT_STATUS is not set. \n\n    >>> gatekeeper.register(MyModel, import_unmoderated=True)\n\n\nModeration Queue Notifications\n------------------------------\n\nGatekeep will send a notification email to a list of recipients when a new object is placed on the moderation queue. Specify GATEKEEPER_MODERATOR_LIST in settings.py to enable notifications.\n\n    ``GATEKEEPER_MODERATOR_LIST = ['moderator@mysite.com','admin@yoursite.com']``\n\n\nPost-moderation Signal\n----------------------\n\nMany applications will want to execute certain tasks once an object is moderated. Gatekeeper provides a signal that is fired when an object is manually or automatically moderated.\n\n    ``gatekeeper.post_moderation``\n\nAdvanced Register Options\n-------------------------\n\n``gatekeeper.register`` takes a few optional parameters:\n\nmanager_name:\n    name of manager to add/replace on model (defaults to objects)\nstatus_name:\n    name of moderation status field to add to model instances (defaults to ``moderation_status``)\nflagged_name:\n    name of flagged field to add to model instances (defaults to ``flagged``)\nmoderation_object_name:\n    name of moderation_object accessor to add to model instances (defaults to ``moderation_object``)\nbase_manager:\n    Manager for contributed manager placed at ``manager_name`` to inherit from.  Default behavior is to attempt to inherit from same class as the manager already in place or fall back to ``models.Manager`` if no manager exists.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/sunlightlabs/django-gatekeeper/",
    "keywords": null,
    "license": "BSD License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-gatekeeper",
    "package_url": "https://pypi.org/project/django-gatekeeper/",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-gatekeeper/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "http://github.com/sunlightlabs/django-gatekeeper/"
    },
    "release_url": "https://pypi.org/project/django-gatekeeper/0.3.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Django object moderation",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 789717,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49a9e57ef8de2fb3542eecebe76af0742dd95b41f0aa809bf81ab0409de2da03",
          "md5": "d2516105b189abe6bc2aea7c9a2f945d",
          "sha256": "b0accdfed22a41ca3adcf09324deb09bbd14eec80e9ac13d931854dcc8e39c64"
        },
        "downloads": -1,
        "filename": "django-gatekeeper-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d2516105b189abe6bc2aea7c9a2f945d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7539,
        "upload_time": "2008-12-18T22:45:47",
        "upload_time_iso_8601": "2008-12-18T22:45:47Z",
        "url": "https://files.pythonhosted.org/packages/49/a9/e57ef8de2fb3542eecebe76af0742dd95b41f0aa809bf81ab0409de2da03/django-gatekeeper-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7943c098e97e427b02e2c46b1a48e4c754e3f1ade1d7dd06c31db0cf584142c",
          "md5": "30a35dffc7339e5dbbaf46ce7ffff805",
          "sha256": "4ac0fcfebd95c4e0b6e143808aef5d24c55606a43b0a8cb33ba5451e6d31fd54"
        },
        "downloads": -1,
        "filename": "django-gatekeeper-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "30a35dffc7339e5dbbaf46ce7ffff805",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10637,
        "upload_time": "2009-10-26T15:43:18",
        "upload_time_iso_8601": "2009-10-26T15:43:18.890616Z",
        "url": "https://files.pythonhosted.org/packages/c7/94/3c098e97e427b02e2c46b1a48e4c754e3f1ade1d7dd06c31db0cf584142c/django-gatekeeper-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c7943c098e97e427b02e2c46b1a48e4c754e3f1ade1d7dd06c31db0cf584142c",
        "md5": "30a35dffc7339e5dbbaf46ce7ffff805",
        "sha256": "4ac0fcfebd95c4e0b6e143808aef5d24c55606a43b0a8cb33ba5451e6d31fd54"
      },
      "downloads": -1,
      "filename": "django-gatekeeper-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "30a35dffc7339e5dbbaf46ce7ffff805",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10637,
      "upload_time": "2009-10-26T15:43:18",
      "upload_time_iso_8601": "2009-10-26T15:43:18.890616Z",
      "url": "https://files.pythonhosted.org/packages/c7/94/3c098e97e427b02e2c46b1a48e4c754e3f1ade1d7dd06c31db0cf584142c/django-gatekeeper-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}