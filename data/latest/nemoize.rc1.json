{
  "info": {
    "author": "spoorn",
    "author_email": "spookump@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Code Generators",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# nemoize\nSimple Python Memoizer decorator for classes, functions, and methods.\n\n# Installation\nnemoize is available on PyPi\n\n```commandline\npython3 -m pip install nemoize\n```\n\nOr you can install manually via the built distribution (wheel)/source dist from [PyPi](pypi.org/project/nemoize) or [github](https://github.com/spoorn/nemoize).\n\n\n# How to Use\n\nImport\n\n```python\nfrom nemoize import memoize\n```\n\nThen use the `@memoize` decorator on various entities as seen below\n\n### Using on a Class\n\n```python\n@memoize\nclass Test:\n    def __init__(self, value):\n        self._value = value\n\n    @property\n    def value(self):\n        return self._value\n```\n\n### Using on a function\n\n```python\n@memoize\ndef test_func():\n    return \"hoot\"\n```\n\n### Using on an instance method\n\n```python\nclass Owl:\n    def __init__(self):\n        self.food = 1337\n        pass\n\n    @memoize(max_size)\n    def eat(self, num):\n        self.food -= num\n```\n\n## Configuration\n\nThere are also various configuration parameters to `memoize()`:\n\n- `@memoize(max_size=13)` : Max number of entries to keep in the cache: \n- `@memoize(cache_exceptions=True)` : Also cache exceptions, so any raised Exceptions will be the exact same Exception instance: \n- `@memoize(max_size=13, cache_exceptions=True)` : Together\n- `@memoize(arg_hash_function=str)` : Changes the hash function on arg and each keyword-arg to use the str() function, which can make lists \"hashable\"\n\n# Testing\nThe unit tests in `test/unit/test_memoize.py` run through various use cases of using the @memoize annotation on classes, functions, and instance methods.\n\n# Benchmarking\nThere is a benchmarking utility under [`benchmark/`](https://github.com/spoorn/nemoize/tree/main/benchmark) that is used for benchmarking nemoize performance against other options and non-memoized scenarios.\n\nExample numbers:\n\n```commandline\nBenchmark test for Memoized vs Non-memoized classes with [1000] computations in their__init__() methods for [1000000] iterations\nNon-memoized class creation + empty method call average time (ms): 0.01550699806213379\nMemoized class creation + empty method call average time (ms): 0.0012589995861053468\n\nBenchmark test for @memoize, non-memoized, a @simplified_memoize, and @functools.lru_cache comparison usingfunction calculating fibonacci sum for [100] fib numbers, for [10000000] iterations\n@simplified_memoize fib average time (ms): 0.0001555999994277954\n@memoize fib average time (ms): 4.4699978828430175e-05\n@memoize(cache_exceptions=True) (to avoid delegation to functools.lru_cache) fib average time (ms): 0.00034309999942779544\n@functools.lru_cache fib average time (ms): 4.440000057220459e-05\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/spoorn/nemoize",
    "keywords": "memoize,utility,decorator,decorators",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nemoize",
    "package_url": "https://pypi.org/project/nemoize/",
    "platform": null,
    "project_url": "https://pypi.org/project/nemoize/",
    "project_urls": {
      "Homepage": "https://github.com/spoorn/nemoize",
      "Repository": "https://github.com/spoorn/nemoize"
    },
    "release_url": "https://pypi.org/project/nemoize/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "Decorator utility to memoize a class, function, or method",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13877178,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52a27b2c7e4483bc4f9971c005de0a2742555c1e3a7955c648b3e604499f3fff",
          "md5": "df13a243549f59cd08ddaff3db15754d",
          "sha256": "3aa1a02a456120f9bbad39a8859bfc1877a9bc0c271cb3def526ab84b78cf5cf"
        },
        "downloads": -1,
        "filename": "nemoize-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df13a243549f59cd08ddaff3db15754d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 5462,
        "upload_time": "2022-05-20T12:01:48",
        "upload_time_iso_8601": "2022-05-20T12:01:48.071486Z",
        "url": "https://files.pythonhosted.org/packages/52/a2/7b2c7e4483bc4f9971c005de0a2742555c1e3a7955c648b3e604499f3fff/nemoize-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fa15a16d6bdca8d6ce894c95d121add51c4fa2c87450793811fda9b9b51a644",
          "md5": "3c32200ddd4702478080c9d1b408e161",
          "sha256": "4f3a6380e34d84f2bc96819ddec84d82fe13c81d91605323676e2207e6f25a4b"
        },
        "downloads": -1,
        "filename": "nemoize-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3c32200ddd4702478080c9d1b408e161",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 5545,
        "upload_time": "2022-05-20T12:01:49",
        "upload_time_iso_8601": "2022-05-20T12:01:49.797900Z",
        "url": "https://files.pythonhosted.org/packages/7f/a1/5a16d6bdca8d6ce894c95d121add51c4fa2c87450793811fda9b9b51a644/nemoize-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52a27b2c7e4483bc4f9971c005de0a2742555c1e3a7955c648b3e604499f3fff",
        "md5": "df13a243549f59cd08ddaff3db15754d",
        "sha256": "3aa1a02a456120f9bbad39a8859bfc1877a9bc0c271cb3def526ab84b78cf5cf"
      },
      "downloads": -1,
      "filename": "nemoize-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "df13a243549f59cd08ddaff3db15754d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 5462,
      "upload_time": "2022-05-20T12:01:48",
      "upload_time_iso_8601": "2022-05-20T12:01:48.071486Z",
      "url": "https://files.pythonhosted.org/packages/52/a2/7b2c7e4483bc4f9971c005de0a2742555c1e3a7955c648b3e604499f3fff/nemoize-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7fa15a16d6bdca8d6ce894c95d121add51c4fa2c87450793811fda9b9b51a644",
        "md5": "3c32200ddd4702478080c9d1b408e161",
        "sha256": "4f3a6380e34d84f2bc96819ddec84d82fe13c81d91605323676e2207e6f25a4b"
      },
      "downloads": -1,
      "filename": "nemoize-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3c32200ddd4702478080c9d1b408e161",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 5545,
      "upload_time": "2022-05-20T12:01:49",
      "upload_time_iso_8601": "2022-05-20T12:01:49.797900Z",
      "url": "https://files.pythonhosted.org/packages/7f/a1/5a16d6bdca8d6ce894c95d121add51c4fa2c87450793811fda9b9b51a644/nemoize-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}