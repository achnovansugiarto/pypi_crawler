{
  "info": {
    "author": "Cameron Simpson",
    "author_email": "Cameron Simpson <cs@cskk.id.au>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Multimedia :: Video"
    ],
    "description": "Facilities for ISO14496 files - the ISO Base Media File Format,\nthe basis for several things including MP4 and MOV.\n\n*Latest release 20230212*:\n* Drop cs.context.StackableState in favour of cs.threads.State.\n* MP4Command.cmd_autotag: use @uses_fstags for the fstags parameter.\n\nISO make the standard available here:\n* [link](http://standards.iso.org/ittf/PubliclyAvailableStandards/index.html)\n* [link](http://standards.iso.org/ittf/PubliclyAvailableStandards/c068960_ISO_IEC_14496-12_2015.zip)\n\n## Function `add_body_class(klass)`\n\nRegister a box body class in KNOWN_BOXBODY_CLASSES.\n\n## Function `add_body_subclass(superclass, box_type, section, desc)`\n\nCreate and register a new BoxBody class that is simply a subclass of\nanother.  Returns the new class.\n\n## Function `add_generic_sample_boxbody(box_type, section, desc, struct_format_v0, sample_fields, struct_format_v1=None, has_inferred_entry_count=False)`\n\nCreate and add a specific Time to Sample box - section 8.6.1.\n\n## Function `add_time_to_sample_boxbody(box_type, section, desc)`\n\nAdd a Time to Sample box - section 8.6.1.\n\n## Class `Box(cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nBase class for all boxes - ISO14496 section 4.2.\n\nThis has the following fields:\n* `header`: a `BoxHeader`\n* `body`: a `BoxBody` instance, usually a specific subclass\n* `unparsed`: any unconsumed bytes from the `Box` are stored as here\n\n## Class `BoxBody(cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nAbstract basis for all `Box` bodies.\n\n## Class `BoxHeader(cs.binary.BoxHeader, cs.binary._BinaryMultiValue_Base, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nAn ISO14496 Box header packet.\n\n## Class `BTRTBoxBody(BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nBitRateBoxBody - section 8.5.2.2.\n\n## Class `CO64BoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA 'c064' Chunk Offset box - section 8.7.5.\n\n## Class `ContainerBoxBody(BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nCommon subclass of several things with `.boxes`.\n\n## Class `CPRTBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA 'cprt' Copyright box - section 8.10.2.\n\n## Class `CSLGBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA 'cslg' Composition to Decode box - section 8.6.1.4.\n\n## Function `decode_itunes_date_field(data)`\n\nThe iTunes 'Date' meta field: a year or an ISO timestamp.\n\n## Function `deref_box(B, path)`\n\nDereference a path with respect to this Box.\n\n## Class `DREFBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA 'dref' Data Reference box containing Data Entry boxes - section 8.7.2.1.\n\n## Function `dump_box(B, indent='', fp=None, crop_length=170, indent_incr=None)`\n\nRecursively dump a Box.\n\n## Class `ELNGBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA ELNGBoxBody is a Extended Language Tag box - ISO14496 section 8.4.6.\n\n## Class `ELSTBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nAn 'elst' Edit List FullBoxBody - section 8.6.6.\n\n## Class `FallbackBoxBody(BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA `BoxBody` subclass which parses nothing for unimplemented `Box` types,\nused by `pick_boxbody_class()`.\n\n## Class `FREEBoxBody(BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA 'free' or 'skip' box - ISO14496 section 8.1.2.\nNote the length and discard the data portion.\n\n## Class `FTYPBoxBody(BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nAn 'ftyp' File Type box - ISO14496 section 4.3.\nDecode the major_brand, minor_version and compatible_brands.\n\n## Class `FullBoxBody(BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA common extension of a basic BoxBody, with a version and flags field.\nISO14496 section 4.2.\n\n## Class `HDLRBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA HDLRBoxBody is a Handler Reference box - ISO14496 section 8.4.3.\n\n## Function `ILSTAofBSchema(attribute_name)`\n\nAttribute name and type for ILST \"A of B\" schema.\n\n## Class `ILSTBoxBody(ContainerBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nApple iTunes Information List, container for iTunes metadata fields.\n\nThe basis of the format knowledge here comes from AtomicParsley's\ndocumentation here:\n\n    http://atomicparsley.sourceforge.net/mpeg-4files.html\n\nand additional information from:\n\n    https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata\n\n## Function `ILSTISOFormatSchema(attribute_name)`\n\nAttribute name and type for ILST ISO format schema.\n\n## Function `ILSTRawSchema(attribute_name)`\n\nAttribute name and type for ILST raw schema.\n\n## Function `ILSTTextSchema(attribute_name)`\n\nAttribute name and type for ILST text schema.\n\n## Function `ILSTUInt32BESchema(attribute_name)`\n\nAttribute name and type for ILST UInt32BE schema.\n\n## Function `ILSTUInt8Schema(attribute_name)`\n\nAttribute name and type for ILST UInt8BE schema.\n\n## Class `itunes_media_type(builtins.tuple)`\n\nitunes_media_type(type, stik)\n\n*Method `itunes_media_type.__new__(_cls, type, stik)`*:\nCreate new instance of itunes_media_type(type, stik)\n\n## Class `itunes_store_country_code(builtins.tuple)`\n\nitunes_store_country_code(country_name, iso_3166_1_code, itunes_store_code)\n\n*Method `itunes_store_country_code.__new__(_cls, country_name, iso_3166_1_code, itunes_store_code)`*:\nCreate new instance of itunes_store_country_code(country_name, iso_3166_1_code, itunes_store_code)\n\n## Function `main(argv=None)`\n\nCommand line mode.\n\n## Class `MDATBoxBody(BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA Media Data Box - ISO14496 section 8.1.1.\n\n## Class `MDHDBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA MDHDBoxBody is a Media Header box - ISO14496 section 8.4.2.\n\n## Class `METABoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA 'meta' Meta BoxBody - section 8.11.1.\n\n## Class `MOOVBoxBody(ContainerBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nAn 'moov' Movie box - ISO14496 section 8.2.1.\nDecode the contained boxes.\n\n## Class `MP4Command(cs.cmdutils.BaseCommand)`\n\nCommand line usage:\n\nUsage: mp4 subcommand [...]\n  Subcommands:\n    autotag autotag [-n] [-p prefix] [--prefix=prefix] paths...\n      Tag paths based on embedded MP4 metadata.\n      -n  No action.\n      -p prefix, --prefix=prefix\n          Set the prefix of added tags, default: 'mp4'\n    deref ...\n        Dereference a Box specification against ISO14496 files.\n    extract extract [-H] filename boxref output\n      Extract the referenced Box from the specified filename into output.\n      -H  Skip the Box header.\n    help [-l] [subcommand-names...]\n      Print the full help for the named subcommands,\n      or for all subcommands if no names are specified.\n      -l  Long help even if no subcommand-names provided.\n    info info [{-|filename}]...]\n      Print informative report about each source.\n    parse [parse [{-|filename}]...]\n      Parse the named files (or stdin for \"-\").\n    tags path\n      Report the tags of `path` based on embedded MP4 metadata.\n    test [testnames...]\n      Run self tests.\n\n## Class `MVHDBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nAn 'mvhd' Movie Header box - ISO14496 section 8.2.2.\n\n## Class `OverBox(cs.binary.BinaryListValues, cs.binary.AbstractBinary, cs.binary.BinaryMixin, HasBoxesMixin)`\n\nA fictitious `Box` encompassing all the Boxes in an input buffer.\n\n## Function `parse(o)`\n\nReturn the `OverBox` from a source (str, int, bytes, file).\n\nThe leading `o` parameter may be one of:\n* `str`: a filesystem file pathname\n* `int`: a OS file descriptor\n* `bytes`: a `bytes` object\n* `file`: if not `int` or `str` the presumption\n  is that this is a file-like object\n\nKeyword arguments are as for `OverBox.from_buffer`.\n\n## Function `parse_deref_path(path, offset=0)`\n\nParse a `path` string from `offset`.\nReturn the path components and the offset where the parse stopped.\n\nPath components:\n* _identifier_: an identifier represents a Box field or if such a\n  field is not present, a the first subbox of this type\n* `[`_index_`]`: the subbox with index _index_\n\nExamples:\n\n    >>> parse_deref_path('.abcd[5]')\n    ['abcd', 5]\n\n## Function `parse_fields(bfr, copy_offsets=None, **kw)`\n\nParse an ISO14496 stream from the CornuCopyBuffer `bfr`,\nyield top level OverBoxes.\n\nParameters:\n* `bfr`: a `CornuCopyBuffer` provided the stream data,\n  preferably seekable\n* `discard_data`: whether to discard unparsed data, default `False`\n* `copy_offsets`: callable to receive Box offsets\n\n## Function `parse_tags(path, tag_prefix=None)`\n\nParse the tags from `path`.\nYield `(box,tags)` for each subbox with tags.\n\nThe optional `tag_prefix` parameter\nmay be specified to prefix each tag name with a prefix.\nOther keyword arguments are passed to `parse()`\n(typical example: `discard_data=True`).\n\n## Class `PDINBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA 'pdin' Progressive Download Information box - ISO14496 section 8.1.3.\n\n## Function `pick_boxbody_class(box_type: bytes)`\n\nInfer a `BoxBody` subclass from the 4-byte bytes `box_type`.\nReturns `FallbackBoxBody` for unimplemented types.\n\n## Function `report(box, indent='', fp=None, indent_incr=None)`\n\nReport some human friendly information about a box.\n\n## Class `SMHDBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA 'smhd' Sound Media Headerbox - section 12.2.2.\n\n## Class `STCOBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA 'stco' Chunk Offset box - section 8.7.5.\n\n## Class `STSCBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\n'stsc' (Sample Table box - section 8.7.4.1.\n\n## Class `STSZBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA 'stsz' Sample Size box - section 8.7.3.2.\n\n## Class `STZ2BoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA 'stz2' Compact Sample Size box - section 8.7.3.3.\n\n## Class `TimeStamp32(cs.binary.UInt32BE, cs.binary.UInt32BE, builtins.tuple, cs.binary.AbstractBinary, cs.binary.BinaryMixin, TimeStampMixin)`\n\nThe 32 bit form of an ISO14496 timestamp.\n\n## Class `TimeStamp64(cs.binary.UInt64BE, cs.binary.UInt64BE, builtins.tuple, cs.binary.AbstractBinary, cs.binary.BinaryMixin, TimeStampMixin)`\n\nThe 64 bit form of an ISO14496 timestamp.\n\n## Class `TimeStampMixin`\n\nMethods to assist with ISO14496 timestamps.\n\n## Class `TKHDBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA 'tkhd' Track Header box - ISO14496 section 8.2.2.\n\n## Class `TrackGroupTypeBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA TrackGroupTypeBoxBody contains a track group id - ISO14496 section 8.3.3.2.\n\n## Class `TrackReferenceTypeBoxBody(BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA TrackReferenceTypeBoxBody contains references to other tracks - ISO14496 section 8.3.3.2.\n\n## Class `TREFBoxBody(ContainerBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nTrack Reference BoxBody, container for trackReferenceTypeBoxes - ISO14496 section 8.3.3.\n\n## Class `TTSB_Sample(builtins.tuple)`\n\nTTSB_Sample(count, delta)\n\n*Method `TTSB_Sample.__new__(_cls, count, delta)`*:\nCreate new instance of TTSB_Sample(count, delta)\n\n## Class `URL_BoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nAn 'url ' Data Entry URL BoxBody - section 8.7.2.1.\n\n## Class `URN_BoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nAn 'urn ' Data Entry URL BoxBody - section 8.7.2.1.\n\n## Class `UTF8or16Field(cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nAn ISO14496 UTF8 or UTF16 encoded string.\n\n## Class `VMHDBoxBody(FullBoxBody, BoxBody, cs.binary.SimpleBinary, types.SimpleNamespace, cs.binary.AbstractBinary, cs.binary.BinaryMixin)`\n\nA 'vmhd' Video Media Headerbox - section 12.1.2.\n\n# Release Log\n\n\n\n*Release 20230212*:\n* Drop cs.context.StackableState in favour of cs.threads.State.\n* MP4Command.cmd_autotag: use @uses_fstags for the fstags parameter.\n\n*Release 20220606*:\nUpdate obsolete use of Tag.with_prefix.\n\n*Release 20210306*:\n* Huge refactor of the Box classes to the new Binary* classes from cs.binary.\n* mp4: new \"tags\" subcommand to print the tags parsed from a file.\n* BoxHeader: fix the definition of MAX_BOX_SIZE_32.\n* BoxBody: new parse_boxes utility method to part the remainder of a Box as subBoxes.\n* MP4.cmd_parse: run the main parse in discard_data=True mode.\n* METABoxBody.__getattr__: fix ILST typo.\n* MP4Command: update for new cs.cmdutils.BaseCommand API.\n* Many small fixes and tweaks.\n\n*Release 20200229*:\n* ILST: recognise @cpy as copyright, sfID as itunes_store_country_code.\n* ILST: new SFID_ISO_3166_1_ALPHA_3_CODE and STIK_MEDIA_TYPES providing context data for various field values, as yet unused.\n* Make various list fields of some boxes deferred because they are expensive to parse (uses new cs.binary deferred_field).\n* add_generic_sample_boxbody: drop __iter__, causes dumb iterators to parse the samples.\n* ILST: iTunes \"Date\" metadata seem to contain plain years or ISO8601 datestamps.\n* mp4 autotag: add -n (no action) and -p,--prefix (set tag prefix, default 'mp4') options.\n* mp4 autotag: use \"mp4.\" as the tag prefix.\n\n*Release 20200130*:\n* Parsing of ILST boxes (iTunes metadata).\n* Command line: new \"info\" subcommand reporting metadata, \"autotag\" applying metadata to fstags.\n* Box tree walk, ancestor, iteration.\n* Assorted cleanups and internal changes.\n\n*Release 20190220*:\nparse_buffer yields instead of returns; some small bugfixes.\n\n*Release 20180810*:\n* parse_fd(): use a mmap to access the descriptor if a regular file and not discard_data;\n* this lets us use the mmapped file as backing store for the data, a big win for the media sections.\n\n*Release 20180805*:\nInitial PyPI release.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bitbucket.org/cameron_simpson/css/commits/all",
    "keywords": "python3",
    "license": "GNU General Public License v3 or later (GPLv3+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cs.iso14496",
    "package_url": "https://pypi.org/project/cs.iso14496/",
    "platform": null,
    "project_url": "https://pypi.org/project/cs.iso14496/",
    "project_urls": {
      "Homepage": "https://bitbucket.org/cameron_simpson/css/commits/all",
      "URL": "https://bitbucket.org/cameron_simpson/css/commits/all"
    },
    "release_url": "https://pypi.org/project/cs.iso14496/20230212/",
    "requires_dist": [
      "cs.binary (>=20230212)",
      "cs.buffer (>=20230212.2)",
      "cs.cmdutils (>=20230212)",
      "cs.fstags (>=20230212)",
      "cs.lex (>=20230210)",
      "cs.logutils (>=20230212)",
      "cs.pfx (>=20221118)",
      "cs.py.func (>=20230210)",
      "cs.tagset (>=20230212)",
      "cs.threads (>=20230212)",
      "cs.units",
      "cs.upd (>=20230212)"
    ],
    "requires_python": "",
    "summary": "Facilities for ISO14496 files - the ISO Base Media File Format, the basis for several things including MP4 and MOV.",
    "version": "20230212",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16817794,
  "releases": {
    "20180805": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "427712891de2bef355ce6b00679078ce39b0a99a40e76e33d478acba6b117665",
          "md5": "826dc218b4d61ac7a8184e1af6d3ffe7",
          "sha256": "0eb0a684dca806020196ebc287b74537796f55d32ea7cc8de333d5a9573c0021"
        },
        "downloads": -1,
        "filename": "cs.iso14496-20180805.tar.gz",
        "has_sig": false,
        "md5_digest": "826dc218b4d61ac7a8184e1af6d3ffe7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15354,
        "upload_time": "2018-08-05T11:16:06",
        "upload_time_iso_8601": "2018-08-05T11:16:06.457866Z",
        "url": "https://files.pythonhosted.org/packages/42/77/12891de2bef355ce6b00679078ce39b0a99a40e76e33d478acba6b117665/cs.iso14496-20180805.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20180810": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "91bd07d8712990016a6de04c969bd56bd50fd48e1f2035679b2a6a8f3c4e0f8d",
          "md5": "ad277f5ac7224bc99a382c7317765cdb",
          "sha256": "2db51b8719f5b19e55854ed630f2ecdb695b51e3a4fd691fd10771c897be0984"
        },
        "downloads": -1,
        "filename": "cs.iso14496-20180810.tar.gz",
        "has_sig": false,
        "md5_digest": "ad277f5ac7224bc99a382c7317765cdb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15396,
        "upload_time": "2018-08-09T23:15:02",
        "upload_time_iso_8601": "2018-08-09T23:15:02.085616Z",
        "url": "https://files.pythonhosted.org/packages/91/bd/07d8712990016a6de04c969bd56bd50fd48e1f2035679b2a6a8f3c4e0f8d/cs.iso14496-20180810.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20190220": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "639d6858e38f7f4cea6577dc9382b0064e366536e7366022875319fc24b1cdcd",
          "md5": "246ca433591d4892c0bcbfd4bbe87d79",
          "sha256": "e0e07b685d58eded1b277049f3a7e95a9dd9728b7150deddeec86a2f6377932d"
        },
        "downloads": -1,
        "filename": "cs.iso14496-20190220.tar.gz",
        "has_sig": false,
        "md5_digest": "246ca433591d4892c0bcbfd4bbe87d79",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15418,
        "upload_time": "2019-02-20T09:18:05",
        "upload_time_iso_8601": "2019-02-20T09:18:05.127008Z",
        "url": "https://files.pythonhosted.org/packages/63/9d/6858e38f7f4cea6577dc9382b0064e366536e7366022875319fc24b1cdcd/cs.iso14496-20190220.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200130": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "579457c861c6b7aba5ed3815b3945de6f9e616ac72de399078ff296c8e8e0a3f",
          "md5": "9ba0e24ef5f2b1a6a841214e049bc84c",
          "sha256": "b38028fbce6ca3605b590eea2b6b984191d5ab3920a85840b454ab22cc68d004"
        },
        "downloads": -1,
        "filename": "cs.iso14496-20200130.tar.gz",
        "has_sig": false,
        "md5_digest": "9ba0e24ef5f2b1a6a841214e049bc84c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26530,
        "upload_time": "2020-01-30T06:17:31",
        "upload_time_iso_8601": "2020-01-30T06:17:31.687975Z",
        "url": "https://files.pythonhosted.org/packages/57/94/57c861c6b7aba5ed3815b3945de6f9e616ac72de399078ff296c8e8e0a3f/cs.iso14496-20200130.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20200229": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3e15b3792f281405f3d0bbcb01e0a3673f2c31c4c4b82539a4f408299a8e16b",
          "md5": "9d092a210ad59c857fd738c6383b75b2",
          "sha256": "9650ce8a0178d863f7a5ff44fabac66af73551a7292fd94a68ee736d2f4699d4"
        },
        "downloads": -1,
        "filename": "cs.iso14496-20200229.tar.gz",
        "has_sig": false,
        "md5_digest": "9d092a210ad59c857fd738c6383b75b2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28768,
        "upload_time": "2020-02-29T05:04:11",
        "upload_time_iso_8601": "2020-02-29T05:04:11.939069Z",
        "url": "https://files.pythonhosted.org/packages/b3/e1/5b3792f281405f3d0bbcb01e0a3673f2c31c4c4b82539a4f408299a8e16b/cs.iso14496-20200229.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20210306": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21dd8baf26b1c53c1f5776d77c31a20bc11a1fa80731ba80f1c35f77cf094d04",
          "md5": "e4e5a2f77b3921a13068fbcb9c785aff",
          "sha256": "b36c84c35a7763b60111640f3de6c8485e0a0164e10678d22be47cdf58b465b2"
        },
        "downloads": -1,
        "filename": "cs.iso14496-20210306.tar.gz",
        "has_sig": false,
        "md5_digest": "e4e5a2f77b3921a13068fbcb9c785aff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 45342,
        "upload_time": "2021-03-06T00:50:28",
        "upload_time_iso_8601": "2021-03-06T00:50:28.438234Z",
        "url": "https://files.pythonhosted.org/packages/21/dd/8baf26b1c53c1f5776d77c31a20bc11a1fa80731ba80f1c35f77cf094d04/cs.iso14496-20210306.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20220606": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0ba194a6530ad34014d0cb759c16e7afd0880fac78dc600fc65145afe05f698",
          "md5": "db943feb6495be340be2500f7ce84090",
          "sha256": "ba5810f36245c3b8bcda0299ca932259474864421b7d2c29ed463775b4aa884d"
        },
        "downloads": -1,
        "filename": "cs.iso14496-20220606-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "db943feb6495be340be2500f7ce84090",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26908,
        "upload_time": "2022-06-06T09:01:20",
        "upload_time_iso_8601": "2022-06-06T09:01:20.666269Z",
        "url": "https://files.pythonhosted.org/packages/f0/ba/194a6530ad34014d0cb759c16e7afd0880fac78dc600fc65145afe05f698/cs.iso14496-20220606-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eea3f7d1469b978e4dd61ecc6af4cad0d975bec51101a092e38175914d66a74e",
          "md5": "e3a2e36db2cc6855b2d2157aa7429b6f",
          "sha256": "47608bb168263b45ee19617a705a46a3d0c66da159ab57763855ccca5cfb23c7"
        },
        "downloads": -1,
        "filename": "cs.iso14496-20220606.tar.gz",
        "has_sig": false,
        "md5_digest": "e3a2e36db2cc6855b2d2157aa7429b6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33896,
        "upload_time": "2022-06-06T09:01:24",
        "upload_time_iso_8601": "2022-06-06T09:01:24.200898Z",
        "url": "https://files.pythonhosted.org/packages/ee/a3/f7d1469b978e4dd61ecc6af4cad0d975bec51101a092e38175914d66a74e/cs.iso14496-20220606.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "20230212": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c16da1d4b94ef75b9658c9e9cb723cc5e7a265d856850b7ba2c05624343bb124",
          "md5": "6a4d56fcd8c9a85a1dc94bf29007e454",
          "sha256": "69e2826e7cfe1b9f631b3ae7d6b85ba85c76707f04df0a73789f0b6e2a6ea409"
        },
        "downloads": -1,
        "filename": "cs.iso14496-20230212-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a4d56fcd8c9a85a1dc94bf29007e454",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26943,
        "upload_time": "2023-02-12T04:14:33",
        "upload_time_iso_8601": "2023-02-12T04:14:33.773083Z",
        "url": "https://files.pythonhosted.org/packages/c1/6d/a1d4b94ef75b9658c9e9cb723cc5e7a265d856850b7ba2c05624343bb124/cs.iso14496-20230212-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d502515570a0b8d77728527eb1d137cf92b2e420afee199590fe194c1ae70db",
          "md5": "e6d5917f4090c8219d05a4432da3e8f2",
          "sha256": "ed34fc54a3c0b2e8b6715684dedafdda84a7efbfa54f99c96d39570d5035e813"
        },
        "downloads": -1,
        "filename": "cs.iso14496-20230212.tar.gz",
        "has_sig": false,
        "md5_digest": "e6d5917f4090c8219d05a4432da3e8f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 34057,
        "upload_time": "2023-02-12T04:14:36",
        "upload_time_iso_8601": "2023-02-12T04:14:36.087049Z",
        "url": "https://files.pythonhosted.org/packages/5d/50/2515570a0b8d77728527eb1d137cf92b2e420afee199590fe194c1ae70db/cs.iso14496-20230212.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c16da1d4b94ef75b9658c9e9cb723cc5e7a265d856850b7ba2c05624343bb124",
        "md5": "6a4d56fcd8c9a85a1dc94bf29007e454",
        "sha256": "69e2826e7cfe1b9f631b3ae7d6b85ba85c76707f04df0a73789f0b6e2a6ea409"
      },
      "downloads": -1,
      "filename": "cs.iso14496-20230212-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6a4d56fcd8c9a85a1dc94bf29007e454",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 26943,
      "upload_time": "2023-02-12T04:14:33",
      "upload_time_iso_8601": "2023-02-12T04:14:33.773083Z",
      "url": "https://files.pythonhosted.org/packages/c1/6d/a1d4b94ef75b9658c9e9cb723cc5e7a265d856850b7ba2c05624343bb124/cs.iso14496-20230212-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5d502515570a0b8d77728527eb1d137cf92b2e420afee199590fe194c1ae70db",
        "md5": "e6d5917f4090c8219d05a4432da3e8f2",
        "sha256": "ed34fc54a3c0b2e8b6715684dedafdda84a7efbfa54f99c96d39570d5035e813"
      },
      "downloads": -1,
      "filename": "cs.iso14496-20230212.tar.gz",
      "has_sig": false,
      "md5_digest": "e6d5917f4090c8219d05a4432da3e8f2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 34057,
      "upload_time": "2023-02-12T04:14:36",
      "upload_time_iso_8601": "2023-02-12T04:14:36.087049Z",
      "url": "https://files.pythonhosted.org/packages/5d/50/2515570a0b8d77728527eb1d137cf92b2e420afee199590fe194c1ae70db/cs.iso14496-20230212.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}