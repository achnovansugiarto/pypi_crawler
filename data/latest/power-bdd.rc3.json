{
  "info": {
    "author": "",
    "author_email": "Ingo Wilms <ingo.wilms@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# power_bdd\nLet $N=\\{1,2,..,n\\}$ be a set of voters, each with a voting weight of $w_i$, who vote *yes* or *no* over a proposal. A coalition $S\\in 2^N$ of yes-voters is considered winning if $\\sum_{i\\in S} w_i$ is greater or equal to a quota $q$. What is the voting power of each voter?\n\nOne very intuitive definition of the voting power of a voter is the probability that she/he influences the outcome by her/his vote given an assumed voting behaviour of all other voters. This leads to the notion of power indices. The most well known two are those according to Banzhaf/Penrose and Shapley/Shubik.\n\nOne very cool way to calculated them is by using binary decision diagrams.\n\nThis package creates the reduced ordered binary decision diagram (\"ROBDD\") of a weighted game and calculates power indices according to Banzhaf/Penrose and Shapley/Shubik.\nThis method allows to easily connect bdds with AND or OR and is also suited for voting systems with multiple layers.\nThe method was published by S. Bolus:\n* [Bolus, S., 2011. Power indices of simple games and vector-weighted majority games by means of binary decision diagrams. European J. Oper. Res. 210 (2), 258â€“272.](https://www.sciencedirect.com/science/article/abs/pii/S0377221710006181)\n* If you are interested in calculating power indices you should also check out the [website](https://www.informatik.uni-kiel.de/~progsys/simple_games/lab/lab.html), which offers a javascript-version with a lot more features.\n\n# Usage\n\n## Installation\n    pip install power_bdd\n\n## Import\n    from power_bdd.bdd import BDD, WeightedGame\n\n## one-tier games\nThis example calculates the power indices for the electoral college, 1996.\n\n    w = [54, 33, 32, 25, 23, 22, 21, 18, 15, 14, 13, 13, 12, 12, 11, 11, 11, 11, 10, 10, 9, 9, 8, 8, 8, 8, 8, 8, 7, 7, 7, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3]                \n    q = 270\n    game = WeightedGame(q, w)\n    bdd = BDD(game)\n    banzhaf = bdd.calc_banzhaf()\n    shapley = bdd.calc_shapley()\n    print(banzhaf)\n    print(shapley)\n\n## multi-tier games\nThis example calculates the power-indices for the U.S. federal system, which can represented by the weighted voting systems\n\n$G$ = ($G_1$ and $G_2$ and $G_3$) or ($G_1$ and $G_4$ and $G_5$ and $G_3$) or ($G_6$ and $G_7$), \n\nsee https://www.fernuni-hagen.de/stochastik/downloads/voting.pdf.\n\n    game1 = WeightedGame(218, [0, 0] + [0] * 100 + [1] * 435)\n    game2 = WeightedGame(51,  [0, 0] + [1] * 100 + [0] * 435)\n    game3 = WeightedGame(1,   [1, 0] + [0] * 100 + [0] * 435)\n    game4 = WeightedGame(50,  [0, 0] + [1] * 100 + [0] * 435)\n    game5 = WeightedGame(1,   [0, 1] + [0] * 100 + [0] * 435)\n    game6 = WeightedGame(290, [0, 0] + [0] * 100 + [1] * 435)\n    game7 = WeightedGame(67,  [0, 0] + [1] * 100 + [0] * 435)\n\n    federal_system = BDD(game1) & BDD(game2) & BDD(game3) | BDD(game1) & BDD(game4) & BDD(game5) & BDD(game3) | BDD(game6) & BDD(game7)\n    banzhaf = federal_system.calc_banzhaf()\n    print(banzhaf)\n\n# Complexities\nListed complexities are expected complexities for the computation of all voters. At first glance, the complexities seem partly worse than other methods (e.g. using *dynamic programming*), but there are several hidden benefitial properties, for instance $q$ is not necessary the $q$ input $q$, but the smallest integer that is possible to use as quota to represent the game (with any weights).\n\n## one-tier games:\n\npower-index     |time            | space       \n--------------- | -------------- | ---------\nBanzhaf/Penrose | $O(nq \\log(q))$ | $O(nq)$\nShapley/Shubik  | $O(n^3q)$      | $O(n^2q)$\n\n\n## multi-tier games with _m_ tiers:\n\npower-index     | time                       | space       \n--------------- | -------------------------- | --------------------------\nBanzhaf/Penrose | $O(n \\prod\\limits_{t=1}^m q^t)$   | $O(n \\prod\\limits_{t=1}^m q^t)$\nShapley/Shubik  | $O(n^3 \\prod\\limits_{t=1}^m q^t)$ | $O(n^2 \\prod\\limits_{t=1}^m q^t)$\n\n# Remarks\n* My java-version is much faster (somewhere between 10-100 times) so there should be plenty of room for optimization in python. Although beautiful is better than ugly, I guess fast is better than slow... and we need more trees! Not just to save the planet, but also in python.\n* The original version uses an AVL-tree for the _create_-method. I have replaced that by a _SortedList_ form the _sortedcontainers_-library.    ",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Copyright (c) 2022 Ingo Wilms  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "power-bdd",
    "package_url": "https://pypi.org/project/power-bdd/",
    "platform": null,
    "project_url": "https://pypi.org/project/power-bdd/",
    "project_urls": {
      "Bug Tracker": "https://github.com/oceanwhiskey/power_bdd/issues",
      "Homepage": "https://github.com/oceanwhiskey/power_bdd"
    },
    "release_url": "https://pypi.org/project/power-bdd/1.0.0/",
    "requires_dist": [
      "sortedcontainers>=2.0"
    ],
    "requires_python": ">=3.7",
    "summary": "Calculates power indices (Banzhaf/Penrose, Shapley/Shubik) via binary decision diagrams",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15946466,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a376200dc62e0ee40ffb6b0aa66d7bc8b807e5d6d660f9cd325ddb4f0ea87505",
          "md5": "a06be30bdde90af0213e211e0f2ca56b",
          "sha256": "eb458bcb5f52b400cca381404a6fbdd8c6749055df15f349c6978bd0f9bb1a99"
        },
        "downloads": -1,
        "filename": "power_bdd-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a06be30bdde90af0213e211e0f2ca56b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22066,
        "upload_time": "2020-11-29T11:50:28",
        "upload_time_iso_8601": "2020-11-29T11:50:28.641267Z",
        "url": "https://files.pythonhosted.org/packages/a3/76/200dc62e0ee40ffb6b0aa66d7bc8b807e5d6d660f9cd325ddb4f0ea87505/power_bdd-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d559f58bf705a26db3aa4268939b62a23c065d7e9458d7d89481de653fd4a734",
          "md5": "bc350384fd6af972ac32f54bd658fb6f",
          "sha256": "547cd4035ac6b04221ec1e0ae38297edc5703c0f480314fb13385b9f75de26da"
        },
        "downloads": -1,
        "filename": "power-bdd-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bc350384fd6af972ac32f54bd658fb6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9966,
        "upload_time": "2020-11-29T11:50:29",
        "upload_time_iso_8601": "2020-11-29T11:50:29.784708Z",
        "url": "https://files.pythonhosted.org/packages/d5/59/f58bf705a26db3aa4268939b62a23c065d7e9458d7d89481de653fd4a734/power-bdd-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59134a08b63af59edbe06cc549e701a655d50dad662628a6a7bb5d33a26caa5f",
          "md5": "be4b1ea412d9f9c053f56406a3528c8c",
          "sha256": "6f2a028fd626fcf13c54b4092c4d86fe044487268bcd875adf054e7b3c863670"
        },
        "downloads": -1,
        "filename": "power_bdd-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be4b1ea412d9f9c053f56406a3528c8c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11169,
        "upload_time": "2022-10-03T19:00:07",
        "upload_time_iso_8601": "2022-10-03T19:00:07.057119Z",
        "url": "https://files.pythonhosted.org/packages/59/13/4a08b63af59edbe06cc549e701a655d50dad662628a6a7bb5d33a26caa5f/power_bdd-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96c859972586af468c4e3b9f13afcd1fcec361c7dd749d20b64ace56a28efd51",
          "md5": "567644461175ba7513ee94689b370588",
          "sha256": "095121a75e3e8d5dad53a17f14354be65b69137804587d361a2674b1d4742d01"
        },
        "downloads": -1,
        "filename": "power_bdd-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "567644461175ba7513ee94689b370588",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10089,
        "upload_time": "2022-10-03T19:00:08",
        "upload_time_iso_8601": "2022-10-03T19:00:08.408118Z",
        "url": "https://files.pythonhosted.org/packages/96/c8/59972586af468c4e3b9f13afcd1fcec361c7dd749d20b64ace56a28efd51/power_bdd-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c16ca75c5a77de9ba2c36584766857b2a7de2d4a6cf46cd26df70284ad3d65c",
          "md5": "2e609e88f18ff50616826b1aff5c0ba4",
          "sha256": "f2cc7c7ccf1610cb1ff9cadff6d6b5c0563bcdce1b460239c27092ad538519d2"
        },
        "downloads": -1,
        "filename": "power_bdd-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e609e88f18ff50616826b1aff5c0ba4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 11168,
        "upload_time": "2022-11-30T19:25:23",
        "upload_time_iso_8601": "2022-11-30T19:25:23.102634Z",
        "url": "https://files.pythonhosted.org/packages/6c/16/ca75c5a77de9ba2c36584766857b2a7de2d4a6cf46cd26df70284ad3d65c/power_bdd-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "030f63e0a5caac5b22f2a6e1fb12284e0843b4fffb4eba16367a5fb057e6160f",
          "md5": "8c1d375b6e98bdaba9ba5524899b587b",
          "sha256": "9def30629e227aac531da2c1edd8b0672f0862a5baa45942201a1f0883c6f746"
        },
        "downloads": -1,
        "filename": "power_bdd-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8c1d375b6e98bdaba9ba5524899b587b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10086,
        "upload_time": "2022-11-30T19:25:24",
        "upload_time_iso_8601": "2022-11-30T19:25:24.455597Z",
        "url": "https://files.pythonhosted.org/packages/03/0f/63e0a5caac5b22f2a6e1fb12284e0843b4fffb4eba16367a5fb057e6160f/power_bdd-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c16ca75c5a77de9ba2c36584766857b2a7de2d4a6cf46cd26df70284ad3d65c",
        "md5": "2e609e88f18ff50616826b1aff5c0ba4",
        "sha256": "f2cc7c7ccf1610cb1ff9cadff6d6b5c0563bcdce1b460239c27092ad538519d2"
      },
      "downloads": -1,
      "filename": "power_bdd-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2e609e88f18ff50616826b1aff5c0ba4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 11168,
      "upload_time": "2022-11-30T19:25:23",
      "upload_time_iso_8601": "2022-11-30T19:25:23.102634Z",
      "url": "https://files.pythonhosted.org/packages/6c/16/ca75c5a77de9ba2c36584766857b2a7de2d4a6cf46cd26df70284ad3d65c/power_bdd-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "030f63e0a5caac5b22f2a6e1fb12284e0843b4fffb4eba16367a5fb057e6160f",
        "md5": "8c1d375b6e98bdaba9ba5524899b587b",
        "sha256": "9def30629e227aac531da2c1edd8b0672f0862a5baa45942201a1f0883c6f746"
      },
      "downloads": -1,
      "filename": "power_bdd-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8c1d375b6e98bdaba9ba5524899b587b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10086,
      "upload_time": "2022-11-30T19:25:24",
      "upload_time_iso_8601": "2022-11-30T19:25:24.455597Z",
      "url": "https://files.pythonhosted.org/packages/03/0f/63e0a5caac5b22f2a6e1fb12284e0843b4fffb4eba16367a5fb057e6160f/power_bdd-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}