{
  "info": {
    "author": "Shreyas Parab",
    "author_email": "shreyas.parab16@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# Image Extractor\n\nImage Extractor library is useful to help the user download any kind of Images at any date and time over the internet. These images will get downloaded as a job and then let user know that the images have been downloaded.\n\n## Appendix\n\nThere are often a times, we need bunch images to work. We can consider the example such as training the Machine learning model over the Cat and Dog images or having those hundreds of beautiful desktop/mobile wallpaper on our laptop with just single click. In such scenario’s we need hundreds of images right away. This problem can be solved using the Image Extractor Library. The following use cases can be implemented: \n  \n## Features\n\n- Upto 2000 images on single click\n- Cross platform\n\n## Run Locally\n\n### To download the Image Extractor, either fork this<a href= 'https://github.com/Sparab16/ImageExtractor'></a> github repo or simply use Pypi via pip.\n\n```bash\n$ pip install ImageExtractor\n```\n\n### Code Demonstration\n\n```python\n\nfrom flask import Flask\nfrom flask_cors import cross_origin\nfrom ImageExtractor.Extractor import ImageExtractorClass\nimport datetime\nimport threading\nimport time\nimport os\n\napp = Flask(__name__)\n\n\nclass ThreadClass:\n\n    def __init__(self, req_id, time_to_sleep,):\n        self.req_id = str(req_id)\n        self.time_to_sleep = time_to_sleep\n        self.thread = threading.Thread(target = self.sleep)\n        self.thread.start()\n\n    def sleep(self):\n        try:\n            # Sleep for the given time\n            time.sleep(self.time_to_sleep)\n\n            # Wait until the zip file is not ready\n            while not os.path.exists(self.req_id + '_zipfile.zip'):\n                print('File not exists')\n                time.sleep(5)\n                \n            print('File exists now')\n            time.sleep(30)\n\n            # Deleting the file after 10 seconds\n            ImageExtractorClass.delete_file(self.req_id)\n            print('Files are deleted')\n        except Exception as e:\n            print(e)\n\n# Home page route\n@app.route('/', methods = ['GET'])\n@cross_origin()\ndef index():\n    try:\n\n        # Creating the object of ImageExtractorClass\n        image_extractor = ImageExtractorClass()\n\n        # Current datetime\n        current = datetime.datetime.now()\n        \n        # The scheduled datetime\n        date_inserted = current + datetime.timedelta(minutes=5)\n\n        date_str = str(date_inserted.year) + '-' + str(date_inserted.month) + '-' + str(date_inserted.day)\n        time_str = str(date_inserted.hour) + ':' + str(date_inserted.minute)\n\n        req_id, time_to_sleep = image_extractor.schedule_job('some_sample_query', date_str, time_str, 54)\n\n        # Time to sleep the thread\n        time_to_sleep = current + datetime.timedelta(seconds=time_to_sleep)\n        total_seconds_sleep = time_to_sleep - datetime.datetime.now()\n        \n        # Total seconds to sleep the thread\n        total_seconds_sleep = int(total_seconds_sleep.total_seconds())\n\n        ThreadClass(req_id, total_seconds_sleep)\n        \n        return '<h1> req id is ' + str(req_id) +' and time_to_sleep is ' + str(total_seconds_sleep) + ' seconds</h1>'\n\n    except Exception as e:\n        return \"<h1> Error is \" + str(e) + \"</h1>\"\n\nif __name__ == '__main__':\n    app.debug = True\n    app.run()\n\n```\nAnd you are ready to go! At this point, at the given date and time, the images will start downloading.\n  \n## Usage\n\n### Development\n\nWant to contribute? Great!\n\nTo fix a bug or enhance an existing module, follow these steps:\n\n<li> Fork the repo\n<li> Create a new branch\n\n```bash\n git checkout -b new-feature\n```\n<li> Make the appropriate changes in the file\n<li> Commit your changes\n\n```bash\ngit commit -am \"New feature added\"\n```\n\n<li> Push to the branch\n\n```bash\ngit push origin new-feature\n```\n\n<li> Create a pull request\n\n### Bug/Feature Request\nIf you find any bug or have some idea about a new feature that can be implemented, you can either open an issue <a href='https://github.com/Sparab16/Extractor/issues' target=\"_blank\">here</a> or you can directly mail us at advance-image-downloader@gmail.com.\n\nPlease include the sample queries and their corresponding results.\n\n## Tech Stack\n\n### Project is built with:-\n\n**Client:** \n- <a href='python.org' target=\"_blank\">Python </a>\n</a>\n  \n**Server:** \n- <a href='https://flask.palletsprojects.com/en/2.0.x/' target=\"_blank\">Flask</a>\n- <a href='https://www.selenium.dev/' target=\"_blank\">Selenium</a>\n\n\n  \n## Authors\n\n- [@Shreyas](https://github.com/Sparab16)\n- [@Harshad](https://github.com/harshad5498)\n  \n## Optimizations\n\n<li>Since the upto 2000 images are supported the filesize can get very large. That's why we have used the zip functionality to reduce the file size.</li>\n<li>It is scalable as many users can request for images at the same time.</li>\n\n\n## Feedback\n\nIf you have any feedback, please reach out to us at advance-image-downloader@gmail.com\n\n  \n## FAQ\n\n#### Do user have to wait until images get downloaded?\n\nAns - No. User can simply submit the job and continue doing other tasks. Once the task ends zip file will get created at the user's end.\n\n#### How much images can be downloaded at single go?\n\nAns - Upto 2000 images can be downloaded at single time. If more required we can simple submit the query again.\n\n\n## Documentation\n\n[High level design documentation](Docs/Advance_Image_Generator-HLD.pdf)<br>\n\n[Low level design documentation](Docs/Advance_Image_Generator-LLD.pdf)<br>\n\n[Wireframe](Docs/Advance-Image-Downloader_Wireframe.pdf)<br>\n\n[Architecture](Docs/Advance_Image_Downloader-Architecture.pdf)\n\n## License\nMIT License\n\nCopyright (c) [2021] [Shreyas Parab]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n### Thanks for reading out till the end. Hello, I'm Shreyas! 👨🏼‍💻\n  \n## 🔗 Links\n[![linkedin](https://img.shields.io/badge/linkedin-0A66C2?style=for-the-badge&logo=linkedin&logoColor=white)](https://www.linkedin.com/in/shrey16/)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Sparab16/Extractor/archive/refs/tags/v1.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Sparab16/Extractor",
    "keywords": "Python,Selenium,Flask,Scheduling,Extract,Image Extract",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ImageExtractor",
    "package_url": "https://pypi.org/project/ImageExtractor/",
    "platform": "",
    "project_url": "https://pypi.org/project/ImageExtractor/",
    "project_urls": {
      "Download": "https://github.com/Sparab16/Extractor/archive/refs/tags/v1.1.tar.gz",
      "Homepage": "https://github.com/Sparab16/Extractor"
    },
    "release_url": "https://pypi.org/project/ImageExtractor/1.2.1/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "ImageExtractor library is useful to help the user download any kind of Images at any date and time over the internet. These images will get downloaded as a job and then let user know that the images have been downloaded.",
    "version": "1.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11444478,
  "releases": {
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7146335afb59bf0e0a22c78f0ae734b8ad3f2e97578e2efa660a75180bf4fc5",
          "md5": "933deb59c97f5fd3b358085485a4c467",
          "sha256": "cb833ca6d4a49d6c89ea037729d55c5e52688618b61232e8101573847df4b4c9"
        },
        "downloads": -1,
        "filename": "ImageExtractor-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "933deb59c97f5fd3b358085485a4c467",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10270,
        "upload_time": "2021-09-12T15:27:51",
        "upload_time_iso_8601": "2021-09-12T15:27:51.151852Z",
        "url": "https://files.pythonhosted.org/packages/a7/14/6335afb59bf0e0a22c78f0ae734b8ad3f2e97578e2efa660a75180bf4fc5/ImageExtractor-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86639fa9624f13b15a346ece2c0741b5e4cb5edf596c9e795a79f72726c77452",
          "md5": "a411f52843e1b9650da48900562fc0d9",
          "sha256": "977960bd9790194f2669202b87ea4b16682e13b3b6b36fcc67adc5f1aea0773c"
        },
        "downloads": -1,
        "filename": "ImageExtractor-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a411f52843e1b9650da48900562fc0d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10309,
        "upload_time": "2021-09-14T05:48:53",
        "upload_time_iso_8601": "2021-09-14T05:48:53.067383Z",
        "url": "https://files.pythonhosted.org/packages/86/63/9fa9624f13b15a346ece2c0741b5e4cb5edf596c9e795a79f72726c77452/ImageExtractor-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "86639fa9624f13b15a346ece2c0741b5e4cb5edf596c9e795a79f72726c77452",
        "md5": "a411f52843e1b9650da48900562fc0d9",
        "sha256": "977960bd9790194f2669202b87ea4b16682e13b3b6b36fcc67adc5f1aea0773c"
      },
      "downloads": -1,
      "filename": "ImageExtractor-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a411f52843e1b9650da48900562fc0d9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10309,
      "upload_time": "2021-09-14T05:48:53",
      "upload_time_iso_8601": "2021-09-14T05:48:53.067383Z",
      "url": "https://files.pythonhosted.org/packages/86/63/9fa9624f13b15a346ece2c0741b5e4cb5edf596c9e795a79f72726c77452/ImageExtractor-1.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}