{
  "info": {
    "author": "libcommon",
    "author_email": "libcommon@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# sqlalchemy-dbutils-py\n\n## Overview\n\n[SQLAlchemy](https://www.sqlalchemy.org/) has two high-level components: Core and ORM. Core provides (not surprisingly)\nthe core functionality of SQLAlchemy's SQL abstraction layer. The ORM (\"Object-Relational Mapper\") component offers\nthe ability to map between Python and database types. `sqlalchemy-dbutils-py` offers a number of utilities built upon\nthe ORM component, including:\n* Views and materialized views as regular database tables (`view` module)\n* Default types for common database engines (`schema` module)\n* Database connection/session management (`manager` module)\n\n## Installation\n\n### Install from PyPi (preferred method)\n\n```bash\npip install lc-sqlalchemy-dbutils\n```\n\n### Install from GitHub with Pip\n\n```bash\npip install git+https://github.com/libcommon/sqlalchemy-dbutils-py.git@vx.x.x#egg=lc_sqlalchemy_dbutils\n```\n\nwhere `x.x.x` is the version you want to download.\n\n## Install by Manual Download\n\nTo download the source distribution and/or wheel files, navigate to\n`https://github.com/libcommon/sqlalchemy-dbutils-py/tree/releases/vx.x.x/dist`, where `x.x.x` is the version you want to install,\nand download either via the UI or with a tool like wget. Then to install run:\n\n```bash\npip install <downloaded file>\n```\n\nDo _not_ change the name of the file after downloading, as Pip requires a specific naming convention for installation files.\n\n## Dependencies\n\n`sqlalchemy-dbutils-py` depends on, and is designed to work with, [SQLAlchemy](https://www.sqlalchemy.org/). Only Python\nversions >= 3.6 are officially supported.\n\n## Getting Started\n\n### Views\n\nThe `view` module exposes a function, `create_view`, for creating (materialized) views that act like ORM tables.\n\n```python\nfrom sqlalchemy import Column, Integer, Text\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.sql import select\n\nfrom lc_sqlalchemy_dbutils.view import create_view\n\n\nBaseTable = declarative_base()\n\n\nclass User(BaseTable):\n    id = Column(Integer, primary_key=True)\n    name = Column(Text, nullable=False)\n    email_address = Column(Text, nullable=False)\n\n\n# Creates view named \"vuser_names\" as \"SELECT id, name FROM user\"\nUserNames = create_view(\"vuser_names\", select([User.id, User.name]), BaseTable.metadata)\n```\n\nThe `UserNames` type, which points to the `vuser_names` view in the database, can be used like any other ORM table class.\nFor Postgres databases, the `materialized` parameter to `create_view` can be set to `True` to make a `MATERIALIZED VIEW`. For\nmore information about the difference from a standard SQL view, see https://www.postgresql.org/docs/current/rules-materializedviews.html.\n\n### Database Types\n\nThe `schema` module defines a type to generate database expressions for default datetime/timestamp values.\nA common database design pattern is to use datetime/timestamp columns to track when records are created and/or modified.\nThe `TimestampDefaultExpression` type can be used with the `server_default` parameter to the\n[Column constructor](https://docs.sqlalchemy.org/en/13/core/metadata.html#sqlalchemy.schema.Column.params.server_default).\n\n```python\nfrom sqlalchemy import Column, Integer, Text, TIMESTAMP\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.sql import select\n\nfrom lc_sqlalchemy_dbutils.schema import TimestampDefaultExpression\n\n\nBaseTable = declarative_base()\n\n\nclass User(BaseTable):\n    id = Column(Integer, primary_key=True)\n    name = Column(Text, nullable=False)\n    email_address = Column(Text, nullable=False)\n    created_at = Column(TIMESTAMP(True), nullable=False, server_default=TimestampDefaultExpression())\n```\n\nNote the use of `TIMESTAMP(True)`, as the `TimestampDefaultExpression` type will attempt to generate an expression to\nretrieve a UTC timestamp in all cases.\n\n### Database Connection Management\n\nThe `manager` module exposes a class, `DBManager`, for managing database connections and sessions with higher-level methods.\nSimply create an instance of `DBManager` with an RFC-1738 compliant connection URL, and with that instance you can\nconnect to the datbase server, generate ORM [Sessions](https://docs.sqlalchemy.org/en/13/orm/session_api.html#session-and-sessionmaker),\nbuild queries using ORM objects, add and remove records from the active session, and commit or rollback transactions.\n\n```python\nimport sys\n\nfrom sqlalchemy import Column, Integer, Text\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.sql import select\n\nfrom lc_sqlalchemy_dbutils.manager import DBManager\n\n\nBaseTable = declarative_base()\n\n\nclass User(BaseTable):\n    id = Column(Integer, primary_key=True)\n    name = Column(Text, nullable=False)\n    email_address = Column(Text, nullable=False)\n\n\ndef main() -> int:\n    # Get commandline arguments\n    config_path_str = sys.argv[1]\n    name_filter = sys.argv[2]\n\n    # Create DB manager from connection URL in config file\n    # and attach MetaData object from BaseTable\n    manager = (DBManager\n               .from_file(config_path_str)\n               .with_metadata(BaseTable.metadata))\n\n    # Connect to database (but don't generate a session yet)\n    manager.connect()\n    # NOTE: connect() is effectively equivalent to\n    # manager.create_engine().create_session_factory(), but it can also\n    # call the bootstrap_db() method to create all tables in the database.\n    # The caveat with using connect() is that you cannot pass specific kwargs\n    # to create_engine() or create_session_factory().\n\n    # Create an active database Session\n    manager.gen_session()\n    # Query the \"user\" table for the name specified on the commandline\n    matching_user = manager.query(User, name=name_filter).first()\n    if matching_user:\n        print(\"Found matching user with name {} (ID: {})\", name_filter, matching_user.id)\n    else:\n        print(\"Did not find matching user with name {}\", name_filter)\n\n    # Close active session and dispose of database engine (which closes all connections)\n    # NOTE: close_engine() automatically calls close_session()\n    manager.close_engine()\n    return 0\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThe script above will read the database connection URL from the provided config filepath, connect to the database\nand generate a `Session`, run a query to find the first `User` record where `name` matches the provided name filter,\nand print the results. This is just an (heavily commented) example to show easy session management can be with the `DBManager`\nclass.\n\n## Contributing/Suggestions\n\nContributions and suggestions are welcome! To make a feature request, report a bug, or otherwise comment on existing\nfunctionality, please file an issue. For contributions please submit a PR, but make sure to lint, type-check, and test\nyour code before doing so. Thanks in advance!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/libcommon/sqlalchemy-dbutils-py",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lc-sqlalchemy-dbutils",
    "package_url": "https://pypi.org/project/lc-sqlalchemy-dbutils/",
    "platform": "",
    "project_url": "https://pypi.org/project/lc-sqlalchemy-dbutils/",
    "project_urls": {
      "Homepage": "https://github.com/libcommon/sqlalchemy-dbutils-py",
      "Issue Tracker": "https://github.com/libcommon/sqlalchemy-dbutils-py/issues",
      "Releases": "https://github.com/libcommon/sqlalchemy-dbutils-py/releases"
    },
    "release_url": "https://pypi.org/project/lc-sqlalchemy-dbutils/0.1.0/",
    "requires_dist": [
      "sqlalchemy (>=1.3)"
    ],
    "requires_python": ">=3.6",
    "summary": "",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7469851,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b79d696eff02a3434adf60760b03023f578ff78482a61c7dfd9db184d382ca0e",
          "md5": "6379e67e05dffb055cae64907e67277a",
          "sha256": "4fc0b5254a5ee7c9249c185b2e5aae747f6f6172d6baf8dce479dcad7f29b011"
        },
        "downloads": -1,
        "filename": "lc_sqlalchemy_dbutils-0.1.0-2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6379e67e05dffb055cae64907e67277a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14809,
        "upload_time": "2020-06-13T21:07:26",
        "upload_time_iso_8601": "2020-06-13T21:07:26.738229Z",
        "url": "https://files.pythonhosted.org/packages/b7/9d/696eff02a3434adf60760b03023f578ff78482a61c7dfd9db184d382ca0e/lc_sqlalchemy_dbutils-0.1.0-2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5408e99ad05555e1a56d35ce80c4bc5b6fa6a73b88d4dc085f5389e25de00b32",
          "md5": "7c5d2e821fc7ff57cc2f603c10430186",
          "sha256": "f6bc6219a3a36fab240b90de3b12e68238442d24571a65c5408f204b255df603"
        },
        "downloads": -1,
        "filename": "lc_sqlalchemy_dbutils-0.1.0-2.tar.gz",
        "has_sig": false,
        "md5_digest": "7c5d2e821fc7ff57cc2f603c10430186",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11857,
        "upload_time": "2020-06-13T21:07:28",
        "upload_time_iso_8601": "2020-06-13T21:07:28.053200Z",
        "url": "https://files.pythonhosted.org/packages/54/08/e99ad05555e1a56d35ce80c4bc5b6fa6a73b88d4dc085f5389e25de00b32/lc_sqlalchemy_dbutils-0.1.0-2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b79d696eff02a3434adf60760b03023f578ff78482a61c7dfd9db184d382ca0e",
        "md5": "6379e67e05dffb055cae64907e67277a",
        "sha256": "4fc0b5254a5ee7c9249c185b2e5aae747f6f6172d6baf8dce479dcad7f29b011"
      },
      "downloads": -1,
      "filename": "lc_sqlalchemy_dbutils-0.1.0-2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6379e67e05dffb055cae64907e67277a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14809,
      "upload_time": "2020-06-13T21:07:26",
      "upload_time_iso_8601": "2020-06-13T21:07:26.738229Z",
      "url": "https://files.pythonhosted.org/packages/b7/9d/696eff02a3434adf60760b03023f578ff78482a61c7dfd9db184d382ca0e/lc_sqlalchemy_dbutils-0.1.0-2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5408e99ad05555e1a56d35ce80c4bc5b6fa6a73b88d4dc085f5389e25de00b32",
        "md5": "7c5d2e821fc7ff57cc2f603c10430186",
        "sha256": "f6bc6219a3a36fab240b90de3b12e68238442d24571a65c5408f204b255df603"
      },
      "downloads": -1,
      "filename": "lc_sqlalchemy_dbutils-0.1.0-2.tar.gz",
      "has_sig": false,
      "md5_digest": "7c5d2e821fc7ff57cc2f603c10430186",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11857,
      "upload_time": "2020-06-13T21:07:28",
      "upload_time_iso_8601": "2020-06-13T21:07:28.053200Z",
      "url": "https://files.pythonhosted.org/packages/54/08/e99ad05555e1a56d35ce80c4bc5b6fa6a73b88d4dc085f5389e25de00b32/lc_sqlalchemy_dbutils-0.1.0-2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}