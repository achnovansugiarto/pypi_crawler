{
  "info": {
    "author": "National Geospatial-Intelligence Agency",
    "author_email": "Wade.C.Schwartzkopf@nga.mil",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "SarPy\n=====\nSarPy is a basic Python library to read, write, and do simple processing\nof complex SAR data using the NGA SICD format *(standards linked below)*. \nIt has been released by NGA to encourage the use of SAR data standards\nthroughout the international SAR community. SarPy complements the\n[SIX](https://github.com/ngageoint/six-library) library (C++) and the\n[MATLAB SAR Toolbox](https://github.com/ngageoint/MATLAB_SAR), which are\nimplemented in other languages but have similar goals.\n\nSome sample SICD files can be found \n[here](https://github.com/ngageoint/six-library/wiki/Sample-SICDs).\n\nRelevant Standards Documents\n----------------------------\nA variety of SAR format standard are mentioned throughout this ReadMe, here are \nassociated references. \n\n*Sensor Independent Complex Data (SICD)* - latest version (1.3.0; 2021-11-30)\n\n1. [Volume 1, Design & Implementation Description Document](https://nsgreg.nga.mil/doc/view?i=5381)\n2. [Volume 2, File Format Description Document](https://nsgreg.nga.mil/doc/view?i=5382)\n3. [Volume 3, Image Projections Description Document](https://nsgreg.nga.mil/doc/view?i=5383)\n4. [Schema](https://nsgreg.nga.mil/doc/view?i=5418)\n\n*Sensor Independent Derived Data (SIDD)* - latest version (3.0; 2021-11-30)\n1. [Volume 1, Design and Implementation Description Document](https://nsgreg.nga.mil/doc/view?i=5440)\n2. [Volume 2, NITF File Format Description Document]( https://nsgreg.nga.mil/doc/view?i=5441)\n3. [Volume 3, GeoTIFF File Format Description Document](https://nsgreg.nga.mil/doc/view?i=5442)\n4. [Schema](https://nsgreg.nga.mil/doc/view?i=5231)\n\n*Compensated Phase History Data (CPHD)* - latest version (1.1.0; 2021-11-30)\n1. [Design & Implementation Description](https://nsgreg.nga.mil/doc/view?i=5388)\n2. [Design & Implementation Schema](https://nsgreg.nga.mil/doc/view?i=5421)\n\nBoth SICD and SIDD files are NITF files following specific guidelines\n*Basic Image Interchange Format (BIFF)* - latest edition (2021.2; 2021-04-20)\n1. [National Imagery Transmission Format](https://nsgreg.nga.mil/doc/view?i=5262)\n\nFor other NGA standards inquiries, the standards registry can be searched\n\n[here](https://nsgreg.nga.mil/registries/search/index.jsp?registryType=doc).\n \nBasic Capability\n----------------\nThe basic capabilities provided in SarPy is generally SAR specific, and largely \ngeared towards reading and manipulating data provided in NGA SAR file formats. \nFull support for reading and writing SICD, SIDD, CPHD, and CRSD (standard pending) \nand associated metadata structures is currently provided, and this is the main \nfocus of this project.\n\nThere is additionally support for reading data from complex data formats analogous \nto SICD format, *usually called Single Look Complex (SLC) or Level 1*, from a \nvariety of commercial or other sources including \n- Capella (**partial support**)\n- COSMO-SkyMed (1st and 2nd generation)\n- GFF (Sandia format)\n- ICEYE\n- NISAR\n- PALSAR2\n- RadarSat-2\n- Radar Constellation Mission (RCM)\n- Sentinel-1\n- TerraSAR-X.\n\nFor this SLC format data, it is read directly as though it were coming from a SICD \nfile. *This ability to read does not generally apply to data products other \nthan the SLC or Level 1 product, and there is typically no direct NGA standard \nanalog for these products.*\n\nSome general TIFF and NITF reading support is provided, but this is not the main \ngoal of the SarPy library.\n\nDocumentation\n-------------\nDocumentation for the project is available at \n[readthedocs](https://sarpy.readthedocs.io/en/latest/).\n\nIf this documentation is inaccessible, it can be built locally after checking out \nthis repository using sphinx via the command `python setup.py build_sphinx`. \nThis depends on python packages `sphinx` and `sphinxcontrib-napoleon`.\n\nOrigins\n-------\nSarPy was developed at the National Geospatial-Intelligence Agency (NGA). The \nsoftware use, modification, and distribution rights are stipulated within the \nMIT license.\n\nDependencies\n------------\nThe core library functionality depends only on `numpy >= 1.11.0` and `scipy`. \n\nOptional Dependencies and Behavior\n----------------------------------\nThere are a small collection of dependencies representing functionality which may \nnot be core requirements for much of the sarpy targeted tasks. The tension between\nrequiring the least extensive list of dependencies possible for core functionality \nand not having surprise unstated dependencies which caused unexpected failures is \nevident here. It is evident that there are many viable arguments for making any \nor all of these formally stated dependencies. The choices made here are guided by \npractical realities versus what is generally considered best practices.\n\nFor all packages on this list, the import is tried (where relevant), and any \nimport errors for these optional dependencies are caught and handled. In other words, \na missing optional dependency **will not** be presented as import time. Excepting \nthe functionality requiring `h5py`, this import error handling is probably silent. \n\nEvery module in sarpy can be successfully imported, provided that numpy and scipy \nare in the environment. Attempts at using functionality depending on a missing \noptional dependency will generate an error **at run time** with accompanying \nmessage indicating the missing optional dependency.\n\n- Support for reading single look complex data from certain sources which provide \n  data in hdf5 format require the `h5py` package, this includes Cosmo-Skymed, ICEYE, \n  and NISAR data.\n\n- Reading an image segment in a NITF file using jpeg or jpeg 2000 compression \n  and/or writing a kmz image overlay requires the `pillow` package.\n\n- CPHD consistency checks, presented in the `sarpy.consistency` module, depend on \n  `lxml>=4.1.1`, `networkx>=2.5`, `shapely>=1.6.4`, and `pytest>=3.3.2`. Note that these\n  are the versions tested for compliance.\n\n- Some less commonly used (in the sarpy realm) NITF functionality requires the use \n  and interpretation of UTM coordinates, and this requires the `pyproj` package. \n\n- Building sphinx documentation (mentioned below) requires packages `sphinx`, \n  `sphinxcontrib-napoleon`, and `sphinx_gallery`.\n\n- Optional portions of running unit tests (unlikely to be of relevance to anyone \n  not performing development on the core sarpy package itself) require the `lxml`\n  package\n\nInstallation\n------------\nFrom PyPI, install using pip (may require escalated privileges e.g. sudo):\n```bash\npip install sarpy\n```\nNote that here `pip` represents the pip utility for the desired Python environment.\n\nFor verbose instructions for installing from source, see \n[here](https://docs.python.org/3/install/index.html). It is recommended that \nstill the package is built locally and installed using pip, which allows a proper \npackage update mechanism, while `python setup.py install` **does not**.\n\nIssues and Bugs\n---------------\nSupport for Python 2 has been dropped. The core sarpy functionality has been \ntested for Python 3.6, 3.7, 3.8, 3.9, and 3.10. \n\nChanges to sarpy for the sole purpose of supporting a Python version beyond \nend-of-life are unlikely to be considered.\n\nInformation regarding any discovered bugs would be greatly appreciated, so please\nfeel free to create a GitHub issue. If more appropriate, contact wade.c.schwartzkopf@nga.mil.\n\nPull Requests\n-------------\nEfforts at direct contribution to the project are certainly welcome, and please\nfeel free to make a pull request. Note that any and all contributions to this \nproject will be released under the MIT license.\n\nSoftware source code previously released under an open source license and then \nmodified by NGA staff is considered a \"joint work\" (see 17 USC 101); it is partially \ncopyrighted, partially public domain, and as a whole is protected by the copyrights \nof the non-government authors and must be released according to the terms of the \noriginal open source license.\n\nAssociated GUI Capabilities\n---------------------------\nSome associated SAR specific graphical user interface tools are maintained in the \n[sarpy_apps project](https://github.com/ngageoint/sarpy_apps). \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/davidraleigh/sarpy",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sarpy-d",
    "package_url": "https://pypi.org/project/sarpy-d/",
    "platform": "any",
    "project_url": "https://pypi.org/project/sarpy-d/",
    "project_urls": {
      "Homepage": "https://github.com/davidraleigh/sarpy"
    },
    "release_url": "https://pypi.org/project/sarpy-d/1.3.23/",
    "requires_dist": [
      "numpy (>=1.11.0)",
      "scipy"
    ],
    "requires_python": "",
    "summary": "Python tools for reading, writing, and simple processing of complex SAR data and other associated data.",
    "version": "1.3.23",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17117460,
  "releases": {
    "1.3.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dfccb46522784dc5fb8f0ddc2eab1e748af6f3e78d0606b956001f802c0def03",
          "md5": "94bc9b7e47ca65809b4e9f7e4b203085",
          "sha256": "ae0c8230103335031a6014059e2232a974d1c0c8c734f43866227389aabef462"
        },
        "downloads": -1,
        "filename": "sarpy_d-1.3.23-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94bc9b7e47ca65809b4e9f7e4b203085",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 1279998,
        "upload_time": "2023-03-01T20:16:46",
        "upload_time_iso_8601": "2023-03-01T20:16:46.346036Z",
        "url": "https://files.pythonhosted.org/packages/df/cc/b46522784dc5fb8f0ddc2eab1e748af6f3e78d0606b956001f802c0def03/sarpy_d-1.3.23-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "dfccb46522784dc5fb8f0ddc2eab1e748af6f3e78d0606b956001f802c0def03",
        "md5": "94bc9b7e47ca65809b4e9f7e4b203085",
        "sha256": "ae0c8230103335031a6014059e2232a974d1c0c8c734f43866227389aabef462"
      },
      "downloads": -1,
      "filename": "sarpy_d-1.3.23-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "94bc9b7e47ca65809b4e9f7e4b203085",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 1279998,
      "upload_time": "2023-03-01T20:16:46",
      "upload_time_iso_8601": "2023-03-01T20:16:46.346036Z",
      "url": "https://files.pythonhosted.org/packages/df/cc/b46522784dc5fb8f0ddc2eab1e748af6f3e78d0606b956001f802c0def03/sarpy_d-1.3.23-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}