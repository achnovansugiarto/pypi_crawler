{
  "info": {
    "author": "Charles Jekel",
    "author_email": "jekel1@llnl.gov",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# spdlayers\n\nSymmetric Positive Definite (SPD) enforcement layers for PyTorch.\n\nRegardless of the input, the output of these layers will always be a SPD tensor!\n\n## Installation\n\nInstall with pip\n\n```\npython -m pip install spdlayers\n```\n\n## About\n\nThe `Cholesky` layer uses a cholesky factorization to enforce SPD, and the `Eigen` layer uses an eigendecomposition to enforce SPD or symmetric semi-definite predictions. Use the `n_zero_eigvals` option with the `Eigen` layer to enforce the exact number of zero eigenvalues that you should expect.\n\nBoth layers take in some tensor of shape `[batch_size, input_shape]` and output a SPD tensor of shape `[batch_size, output_shape, output_shape]`. The relationship between input and output is defined by the following.\n\n```python\ninput_shape = sum([i for i in range(output_shape + 1)])\n```\n\nThe layers have no learnable parameters, and merely serve to transform a vector space to a SPD matrix space.\n\nThe initialization options for each layer are:\n```\nArgs:\n    output_shape (int): The dimension of square tensor to produce,\n        default output_shape=6 results in a 6x6 tensor\n    symmetry (str): 'anisotropic' or 'orthotropic'. Anisotropic can be\n        used to predict for any shape tensor, while 'orthotropic' is a\n        special case of symmetry for a 6x6 tensor.\n    positive (str): The function to perform the positive\n        transformation of the diagonal of the lower triangle tensor.\n        Choices are 'Abs' (default), 'Square', 'Softplus', 'ReLU',\n        'ReLU6', '4', and 'Exp'.\n    min_value (float): The minimum allowable value for a diagonal\n        component. Default is 1e-8.\n```\n\n## Examples\n\nThis is the simplest neural network using 1 hidden layer of size 100. There are 2 input features to the model (`n_features = 2`), and model outputs a `6 x 6` spd tensor.\n\nUsing the Cholesky factorization as the SPD layer:\n```python\nimport torch.nn as nn\nimport spdlayers\n\nhidden_size = 100\nn_features = 2\nout_shape = 6\nin_shape = spdlayers.in_shape_from(out_shape)\n\nmodel = nn.Sequential(\n          nn.Linear(n_features, hidden_size),\n          nn.Linear(hidden_size, in_shape),\n          spdlayers.Cholesky(output_shape=out_shape)\n        )\n```\n\nOr with the eigendecomposition as the SPD layer:\n```python\nimport torch.nn as nn\nimport spdlayers\n\nhidden_size = 100\nn_features = 2\nout_shape = 6\nin_shape = spdlayers.in_shape_from(out_shape)\n\nmodel = nn.Sequential(\n          nn.Linear(n_features, hidden_size),\n          nn.Linear(hidden_size, in_shape),\n          spdlayers.Eigen(output_shape=out_shape)\n        )\n```\n\n[examples/train_sequential_model.py](https://github.com/LLNL/spdlayers/blob/main/examples/train_sequential_model.py) trains this model on the orthotropic stiffness trensor from the 2D Isotruss.\n\n## API\n\nThe API has the following import structure.\n\n```\nspdlayers\n    ├── Cholesky\n    ├── Eigen\n    ├── in_shape_from\n    ├── layers\n    │   ├── Cholesky\n    │   ├── Eigen\n    ├── tools.py\n    │   ├── in_shape_from\n```\n\n## Documentation\n\nYou can use pdoc to build API documentation, or view the [online documentation](https://software.llnl.gov/spdlayers).\n\n```\npdoc3 --html spdlayers\n```\n\n## Requirements\n\nFor basic usage:\n\n```\npython>=3.6\ntorch>=1.9.0\n```\n\nAdditional dependencies for testing:\n\n```\npytest\npytest-cov\nnumpy\n```\n\n## Changelog\n\nChanges are documented in [CHANGELOG.md](https://github.com/LLNL/spdlayers/blob/main/CHANGELOG.md)\n\n## Citations\n\n### Cholesky\n\nIf you use the Cholesky method, you should cite the following paper.\n\n```bib\n@article{XU2021110072,\ntitle = {Learning constitutive relations using symmetric positive definite neural networks},\njournal = {Journal of Computational Physics},\nvolume = {428},\npages = {110072},\nyear = {2021},\nissn = {0021-9991},\ndoi = {https://doi.org/10.1016/j.jcp.2020.110072},\nurl = {https://www.sciencedirect.com/science/article/pii/S0021999120308469},\nauthor = {Kailai Xu and Daniel Z. Huang and Eric Darve},\nkeywords = {Neural networks, Plasticity, Hyperelasticity, Finite element method, Multiscale homogenization}\n}\n```\n\nWhat this paper proposed is that you do a Cholesky decomposition on each data point in your dataset, and then train a NN to learn the lower triangular form. This is a great paper because the method is so simple that it is very easy for every researcher to use!\n\nWhat we proposed you do instead with this method is not to perform a Cholesky decomposition on your data, but rather include the `LL^T` operation as a transformation within your NN. We believe this subtle difference provides for the following advantages:\n- no transformation of your dataset is needed\n- evaluate the training performance on the real data\n- eases production use of the model (i.e. a single pytorch model does the black-box mapping of `x`→`C`)\n\n### Eigendecomposition\n\nIf you use the Eigendecomposition method, you should cite the following paper.\n\n```bib\n@article{https://doi.org/10.1002/nme.2681,\nauthor = {Amsallem, David and Cortial, Julien and Carlberg, Kevin and Farhat, Charbel},\ntitle = {A method for interpolating on manifolds structural dynamics reduced-order models},\njournal = {International Journal for Numerical Methods in Engineering},\nvolume = {80},\nnumber = {9},\npages = {1241-1258},\nkeywords = {reduced-order modeling, matrix manifolds, real-time prediction, surrogate modeling, linear structural dynamics},\ndoi = {https://doi.org/10.1002/nme.2681},\nurl = {https://onlinelibrary.wiley.com/doi/abs/10.1002/nme.2681},\neprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/nme.2681}\n}\n```\nWhat this paper proposed is that you perform an Eigendecomposition on each data point in your dataset. You could then fit a linear model in a tangent space that will always be SPD (and it is pure mathematical beauty).\n\nWe proposed you should abstract this method into a NN layer. This subtle change allows for the following advantages:\n- no transformation of your dataset is needed\n- evaluate the training performance in the real space\n- easily fit any non-linear regression model\n- allows for many more transitional maps other than just the exponential\n- eases production use of the model (i.e. a single pytorch model does the black-box mapping of `x`→`C`)\n\n### spdlayers\n\nIf you find our abstractions and presentation useful, please cite our paper. Our paper demonstrated that the inclusion of these `spdlayers` increased model accuracy.\n\n```bib\n@article{jekel2022neural,\n  title={Neural Network Layers for Prediction of Positive Definite Elastic Stiffness Tensors},\n  author={Jekel, Charles F and Swartz, Kenneth E and White, Daniel A and Tortorelli, Daniel A and Watts, Seth E},\n  journal={arXiv preprint arXiv:2203.13938},\n  year={2022}\n}\n```\n\n## License\n\nsee [LICENSE](https://github.com/LLNL/spdlayers/blob/main/LICENSE) and [NOTICE](https://github.com/LLNL/spdlayers/blob/main/NOTICE)\n\nSPDX-License-Identifier: MIT\n\nLLNL-CODE-829369\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/LLNL/spdlayers",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spdlayers",
    "package_url": "https://pypi.org/project/spdlayers/",
    "platform": "any",
    "project_url": "https://pypi.org/project/spdlayers/",
    "project_urls": {
      "Homepage": "https://github.com/LLNL/spdlayers"
    },
    "release_url": "https://pypi.org/project/spdlayers/0.3.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Symmetric Positive Definite (SPD) enforcement layers for PyTorch",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14428403,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e4b64646bf558efd011d43453331079545ef2dc20792eced7404b4b18cc0208",
          "md5": "9ec276167bd19949a18861953d5b759c",
          "sha256": "9ff8bb43c93c3e4de48e4e30b27bad45e1ecf154a60f13b8803f751a2ddf1a3d"
        },
        "downloads": -1,
        "filename": "spdlayers-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9ec276167bd19949a18861953d5b759c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5360,
        "upload_time": "2021-11-19T21:44:47",
        "upload_time_iso_8601": "2021-11-19T21:44:47.245210Z",
        "url": "https://files.pythonhosted.org/packages/8e/4b/64646bf558efd011d43453331079545ef2dc20792eced7404b4b18cc0208/spdlayers-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b26dc5b7a74756d5ef2afa8201e1f09ea346687bd681f6e28bed214264d39c3",
          "md5": "f46c6aa21fea662e10fda3e96776ad4e",
          "sha256": "b1fc2cce439e72f5fce50b2e1e4cb826897cdaf192e779fe19a15fef424178e0"
        },
        "downloads": -1,
        "filename": "spdlayers-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f46c6aa21fea662e10fda3e96776ad4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5417,
        "upload_time": "2021-12-02T18:14:31",
        "upload_time_iso_8601": "2021-12-02T18:14:31.555257Z",
        "url": "https://files.pythonhosted.org/packages/5b/26/dc5b7a74756d5ef2afa8201e1f09ea346687bd681f6e28bed214264d39c3/spdlayers-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f75f0832b01d892b7db778ff0de9c5a3ade132c54c6bf3076b49994333d4a4e",
          "md5": "ee3d0555e2a84692d0b47c3fdcb7fb8b",
          "sha256": "25a8e57873474e473f706cf7a930d213c8f4f18cf04eef20fd8fa5125945463b"
        },
        "downloads": -1,
        "filename": "spdlayers-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ee3d0555e2a84692d0b47c3fdcb7fb8b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5497,
        "upload_time": "2022-02-06T23:05:11",
        "upload_time_iso_8601": "2022-02-06T23:05:11.260022Z",
        "url": "https://files.pythonhosted.org/packages/1f/75/f0832b01d892b7db778ff0de9c5a3ade132c54c6bf3076b49994333d4a4e/spdlayers-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0642335e8f3b0cac85148de147a3246c318a36f16ae305e11c3f3b679edba376",
          "md5": "c07d3dca8a081b10e412e11f32d916b0",
          "sha256": "df9a2ceb74bfc3f1685e624c2fe8110d2fe061fc20aa797f46190d880dae097f"
        },
        "downloads": -1,
        "filename": "spdlayers-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c07d3dca8a081b10e412e11f32d916b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5492,
        "upload_time": "2022-03-24T23:43:05",
        "upload_time_iso_8601": "2022-03-24T23:43:05.192579Z",
        "url": "https://files.pythonhosted.org/packages/06/42/335e8f3b0cac85148de147a3246c318a36f16ae305e11c3f3b679edba376/spdlayers-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e215b51667f7bdb4fa9086fc392c39cdb8bcc4cea44029e7d8cd350815872cf7",
          "md5": "9c30ec1667ca7b9901adae9cae6786df",
          "sha256": "7914ed508b36d3eb0e9ca1784d7c69714e2bdda4da3f00be82338f67ca6a37a4"
        },
        "downloads": -1,
        "filename": "spdlayers-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9c30ec1667ca7b9901adae9cae6786df",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 5666,
        "upload_time": "2022-04-01T14:43:43",
        "upload_time_iso_8601": "2022-04-01T14:43:43.230928Z",
        "url": "https://files.pythonhosted.org/packages/e2/15/b51667f7bdb4fa9086fc392c39cdb8bcc4cea44029e7d8cd350815872cf7/spdlayers-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f6a7c49ce293b5e14ca70555dedd5af8f59968715dc7495ec4d7b4dc4a3b5a1",
          "md5": "9a23b1e9927db4d8285cb49041df4e17",
          "sha256": "c6c6c7f91e45e20a72145e777f30430225e8a66836e128bed0839bfcc52cdcd6"
        },
        "downloads": -1,
        "filename": "spdlayers-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9a23b1e9927db4d8285cb49041df4e17",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6870,
        "upload_time": "2022-06-23T18:27:31",
        "upload_time_iso_8601": "2022-06-23T18:27:31.847257Z",
        "url": "https://files.pythonhosted.org/packages/8f/6a/7c49ce293b5e14ca70555dedd5af8f59968715dc7495ec4d7b4dc4a3b5a1/spdlayers-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0594bd4fa4050ae0f333a999ac28942f6e2d6601f250415717c395aee98e8ea8",
          "md5": "00505c07015ab2251ee6d0cdee9059ef",
          "sha256": "0fc3819b0e04331ab010d0b71596c9dce748682c0ff6fb930c5dbf270f15f5ba"
        },
        "downloads": -1,
        "filename": "spdlayers-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "00505c07015ab2251ee6d0cdee9059ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7355,
        "upload_time": "2022-07-13T23:19:54",
        "upload_time_iso_8601": "2022-07-13T23:19:54.771289Z",
        "url": "https://files.pythonhosted.org/packages/05/94/bd4fa4050ae0f333a999ac28942f6e2d6601f250415717c395aee98e8ea8/spdlayers-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0594bd4fa4050ae0f333a999ac28942f6e2d6601f250415717c395aee98e8ea8",
        "md5": "00505c07015ab2251ee6d0cdee9059ef",
        "sha256": "0fc3819b0e04331ab010d0b71596c9dce748682c0ff6fb930c5dbf270f15f5ba"
      },
      "downloads": -1,
      "filename": "spdlayers-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "00505c07015ab2251ee6d0cdee9059ef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7355,
      "upload_time": "2022-07-13T23:19:54",
      "upload_time_iso_8601": "2022-07-13T23:19:54.771289Z",
      "url": "https://files.pythonhosted.org/packages/05/94/bd4fa4050ae0f333a999ac28942f6e2d6601f250415717c395aee98e8ea8/spdlayers-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}