{
  "info": {
    "author": "Szymon Pilkowski",
    "author_email": "szymon.pilkowski@molecule.one",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Molecule One Batch Scoring API Wrapper\n\n## Usage:\n\n### Installation:\n\n```\npip install git+https://github.com/molecule-one/m1wrapper-python\n```\n\n### Initialization:\n\n```py\nfrom m1wrapper import MoleculeOneWrapper\nm1wrapper = MoleculeOneWrapper(api_token, 'https://app.molecule.one')\n```\n\n- _api_token_: API token you'll need to authorize in our system. You can\n  generate yours at https://app.molecule.one/dashboard/user/api-tokens\n- _api_base_url_ (optional): URI of the batch scoring service. Defaults to Molecule One's public\n  server, but you will need to provide custom value if you're using a dedicated solution.\n\n### Getting a list of batch scoring requests:\n\n```py\nsearches = m1wrapper.list_batch_searches()\n```\n\n### Running new batch scoring request:\n\n```py\nsearch = m1wrapper.run_batch_search(\n    targets=['cc', 'O=C(Nc1cc(Nc2nc(-c3cnccc3)ccn2)c(cc1)C)c3ccc(cc3)CN3CCN(CC3)C'],\n    parameters={'model': 'gat'}\n)\n```\n\n- _targets_: list of target compounds in SMILES format\n- _parameters_ (optional): additional configuration for your batch\n  scoring request. See [Batch Scoring API](https://github.com/molecule-one/api/blob/master/api-v2.md) for more information.\n- _detail_level_ (optional): [detail level of the batch request](#batch-scoring-detail-level)\n- _priority_ (optional): [priority of the batch request](#batch-scoring-priorities)\n- _invalid_target_strategy_ (optional): if set to `InvalidTargetStrategy.PASS`, targets that cannot be canonized by our SMILES parser won't cause the whole batch request to be rejected. Defaults to `InvalidTargetStrategy.REJECT`.\n- _starting_materials_ (optional): list of available compounds in SMILES format\n- _name_ (optional): name of your batch request\n\n### Batch scoring detail level\n\nDetail level determines how much information about each target synthesis you'll get. We define it as a `DetailLevel` enum with two variants:\n\n- `DetailLevel.SCORE` (default) - useful when you're not interested in full synthesis json/UI preview, but only numerical values\n- `DetailLevel.SYNTHESIS` - when you're also interested in reactions and compounds leading to the target product\n\n#### Example:\n\n```py\nfrom m1wrapper import MoleculeOneWrapper, DetailLevel\nm1wrapper = MoleculeOneWrapper(api_token, 'https://app.molecule.one')\nsearch = m1wrapper.run_batch_search(\n    targets=['cc', 'O=C(Nc1cc(Nc2nc(-c3cnccc3)ccn2)c(cc1)C)c3ccc(cc3)CN3CCN(CC3)C'],\n    parameters={'model': 'gat', },\n    detail_level=DetailLevel.SCORE\n)\n```\n\n### Batch scoring priorities\n\nPriorities are defined as integers in a range of 1 to 10. Requests with higher priority will be processed before those with lower priority.\nFor convenience, we also define a `Priority` enum with the following variants:\n\n- `Priority.LOWEST` (1)\n- `Priority.LOW` (3)\n- `Priority.NORMAL` (5, default)\n- `Priority.HIGH` (8)\n- `Priority.HIGHEST` (10)\n\n#### Example:\n\n```py\nfrom m1wrapper import MoleculeOneWrapper, Priority\nm1wrapper = MoleculeOneWrapper(api_token, 'https://app.molecule.one')\nsearch = m1wrapper.run_batch_search(\n    targets=['cc', 'O=C(Nc1cc(Nc2nc(-c3cnccc3)ccn2)c(cc1)C)c3ccc(cc3)CN3CCN(CC3)C'],\n    parameters={'model': 'gat'},\n    priority=Priority.HIGH\n)\n```\n\n### Batch scoring request with compound metadata\n`run_batch_search_with_metadata(targets_with_metadata, parameters, detail_level, priority, invalid_target_strategy, starting_materials, name)`\n- *targets_with_metadata*: list of target compounds with metadata. Each target compound should be a dictionary object of shape `{ 'smiles': str, 'name': str}` where the only required field is `smiles`.\n- *parameters* (optional): additional configuration for your batch\n  scoring request. See [Batch Scoring API](https://github.com/molecule-one/api/blob/master/api-v2.md) for more information.\n- _detail_level_ (optional): [detail level of the batch request](#batch-scoring-detail-level)\n- _priority_ (optional): [priority of the batch request](#batch-scoring-priorities)\n- _invalid_target_strategy_ (optional): if set to `InvalidTargetStrategy.PASS`, targets that cannot be canonized by our SMILES parser won't cause the whole batch request to be rejected. Defaults to `InvalidTargetStrategy.REJECT`.\n- _starting_materials_ (optional): list of available compounds in SMILES format\n- _name_ (optional): name of your batch request\n\n```py\nrun_batch_search_with_metadata(\n  targets_with_metadata=[{'name': 'compound1', 'smiles': 'cc'}, {'smiles': 'O=C(Nc1cc(Nc2nc(-c3cnccc3)ccn2)c(cc1)C)c3ccc(cc3)CN3CCN(CC3)C'}, {'name': 'compound3', 'smiles': 'CC'}],\n  priority=Priority.HIGH\n)\n```\n\n### Getting exisiting scoring request by id:\n\n```py\nsearch = m1wrapper.get_batch_search(id)\n```\n\n### Checking if your scoring request processing is finished:\n\n```py\nsearch.is_finished()\n```\n\n### Checking full search status:\n\n```py\nstatus = search.get_status()\n```\n\nIn response, youâ€™ll get information about your batch scoring processing progress, i.e.:\n`{\"queued\":92,\"running\":4,\"finished\":104,\"error\":0}`\n\n### Getting partial results:\n\nResults are made available as soon as they are processed. This method\nprovided a way to start working with some of your results without waiting until all targets are processed.\nThis usually means implementing some kind of polling/scheduling on your side.\n\n```py\nresults = search.get_partial_results(precision=5, only=[\"target_smiles\", \"result\"])\n```\n\n- _precision_ (optional): format the floating point scores returned by the system (certainty, result, price) to given number of significant digits.\n- _only_ (optional): fetch only a subset of values. Defaults to\n  all values.\n\nReturns JSON object of the following shape:\nReturns an object of the following shape:\n\n```python\n    [\n      {\n        'target_smiles': 'Cc1ccc(cc1Nc2nccc(n2)c3cccnc3)NC(=O)c4ccc(cc4)CN5CCN(CC5)C',\n        'result': '7.53000'\n      },\n      ...\n    ]\n```\n\n#### All values:\n\n```py\nresults = search.get_partial_results(precision=5)\n```\n\nReturns JSON object of the following shape:\n\n```python\n    [\n      {\n        'target_smiles': 'Cc1ccc(cc1Nc2nccc(n2)c3cccnc3)NC(=O)c4ccc(cc4)CN5CCN(CC5)C',\n        'status': 'ok',\n        'result': '7.53000',\n        'certainty': '0.581',\n        'price': '5230',\n        'reaction_count': 5,\n        'timed_out': False,\n        'started_at': '2021-09-13T14:45:31.012Z',\n        'finished_at': '2021-09-13T14:46:39.199Z',\n        'running_time': 68.187,\n        'url': 'https://app.molecule.one/dashboard/synthesis-plans/batch/b787bf5f-6736-443c-bef1-8f10a37da246/result/0e3c6e13-fce1-46ba-9811-8fe66e0e4122'\n      },\n      ...\n    ]\n```\n\nSee [Batch Scoring API](https://github.com/molecule-one/api/blob/master/api-v2.md) for a full explaination of returned fields.\n\n### Getting complete results:\n\n```py\nresults = search.get_results(precision=5, only=[\"target_smiles\", \"result\"])\n```\n\nIf you don't want to implement scheduling on your own, this method\nprovides a simple way to wait until all targets are processed (sending periodical checks using\n`search.is_finished()`), and execute only when all results are available. It's a\nblocking operation.\nParameters and returned JSON are the same as with `get_partial_results()`.\n\n### Deleting your data:\n\n```py\nm1wrapper.delete_batch_search(search.search_id)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/molecule-one/m1wrapper-python",
    "keywords": "",
    "license": "# todo: license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "m1-api-wrapper",
    "package_url": "https://pypi.org/project/m1-api-wrapper/",
    "platform": "",
    "project_url": "https://pypi.org/project/m1-api-wrapper/",
    "project_urls": {
      "Homepage": "https://github.com/molecule-one/m1wrapper-python"
    },
    "release_url": "https://pypi.org/project/m1-api-wrapper/2.1.0/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": "",
    "summary": "Molecule One API Wrapper",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17481899,
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "00d7ead893b772bb806156a29768bfcc89dbd099de44d0763b95798e69560bf4",
          "md5": "35b92a59e6f3f72bc1f0b89cf21e9067",
          "sha256": "82049068ac9203dd9f97adf5e2e5f8b7b699ec2581f701f5762fc7c0be9f583c"
        },
        "downloads": -1,
        "filename": "m1_api_wrapper-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35b92a59e6f3f72bc1f0b89cf21e9067",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7594,
        "upload_time": "2021-09-17T14:12:06",
        "upload_time_iso_8601": "2021-09-17T14:12:06.358782Z",
        "url": "https://files.pythonhosted.org/packages/00/d7/ead893b772bb806156a29768bfcc89dbd099de44d0763b95798e69560bf4/m1_api_wrapper-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "140bbc78a24c512fce4d3d89a07ae7712e52c37c89c227ea204e59bab539fbf7",
          "md5": "37a32799faa11aa4bc342d9ab1ff57b7",
          "sha256": "4eeb59636328398ae13f4ed716ba52a5fc7360edf07ddfb0da5ecb67c274a39a"
        },
        "downloads": -1,
        "filename": "m1_api_wrapper-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "37a32799faa11aa4bc342d9ab1ff57b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6164,
        "upload_time": "2021-09-17T14:12:07",
        "upload_time_iso_8601": "2021-09-17T14:12:07.985219Z",
        "url": "https://files.pythonhosted.org/packages/14/0b/bc78a24c512fce4d3d89a07ae7712e52c37c89c227ea204e59bab539fbf7/m1_api_wrapper-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "46d2a6a0322908ca9959a359bac4be9e97928bddeb31cafbcdbac5350bbe8a09",
          "md5": "e40e8acf386e2695e8284a8b7c5f770c",
          "sha256": "78339ffdf91ceffbce20a358e5628a4a957add50e19fc425ac21462a67fa3bdf"
        },
        "downloads": -1,
        "filename": "m1_api_wrapper-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e40e8acf386e2695e8284a8b7c5f770c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 7589,
        "upload_time": "2021-09-21T10:40:18",
        "upload_time_iso_8601": "2021-09-21T10:40:18.441809Z",
        "url": "https://files.pythonhosted.org/packages/46/d2/a6a0322908ca9959a359bac4be9e97928bddeb31cafbcdbac5350bbe8a09/m1_api_wrapper-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efea52be46f6526e8674c43e4444e9ae8487bef6bf83e06d27789b39783a9f82",
          "md5": "a21563e347555d01a7b4b5d644234984",
          "sha256": "5e375cb118bdb1ff3dedb86b398740a9faa971e716d6fa702b97e3aeb1f82fd5"
        },
        "downloads": -1,
        "filename": "m1_api_wrapper-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a21563e347555d01a7b4b5d644234984",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6140,
        "upload_time": "2021-09-21T10:40:19",
        "upload_time_iso_8601": "2021-09-21T10:40:19.746786Z",
        "url": "https://files.pythonhosted.org/packages/ef/ea/52be46f6526e8674c43e4444e9ae8487bef6bf83e06d27789b39783a9f82/m1_api_wrapper-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "267374a5f85a8f367587892bd34d50f7b00f4c9ed1733881c29572076713bf17",
          "md5": "f63ba7f4764c795059ea6497438f6679",
          "sha256": "43874ca929d356ffed6b66625ab34408786ba4fa9b0beda3648d3c148dda5259"
        },
        "downloads": -1,
        "filename": "m1_api_wrapper-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f63ba7f4764c795059ea6497438f6679",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 8012,
        "upload_time": "2022-01-14T23:57:17",
        "upload_time_iso_8601": "2022-01-14T23:57:17.489758Z",
        "url": "https://files.pythonhosted.org/packages/26/73/74a5f85a8f367587892bd34d50f7b00f4c9ed1733881c29572076713bf17/m1_api_wrapper-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbc077ec21155fc73f544da42194c484b3b899fe8e2e0122b9b21ebe81e64e6a",
          "md5": "dceaa6daef23e8aa892c998840506344",
          "sha256": "5b1c18ae839fa15a4641e822ba2158807bd74278a2a21e58d242b8ffc631ad2e"
        },
        "downloads": -1,
        "filename": "m1_api_wrapper-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dceaa6daef23e8aa892c998840506344",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6494,
        "upload_time": "2022-01-14T23:57:18",
        "upload_time_iso_8601": "2022-01-14T23:57:18.988518Z",
        "url": "https://files.pythonhosted.org/packages/fb/c0/77ec21155fc73f544da42194c484b3b899fe8e2e0122b9b21ebe81e64e6a/m1_api_wrapper-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "267374a5f85a8f367587892bd34d50f7b00f4c9ed1733881c29572076713bf17",
        "md5": "f63ba7f4764c795059ea6497438f6679",
        "sha256": "43874ca929d356ffed6b66625ab34408786ba4fa9b0beda3648d3c148dda5259"
      },
      "downloads": -1,
      "filename": "m1_api_wrapper-2.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f63ba7f4764c795059ea6497438f6679",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 8012,
      "upload_time": "2022-01-14T23:57:17",
      "upload_time_iso_8601": "2022-01-14T23:57:17.489758Z",
      "url": "https://files.pythonhosted.org/packages/26/73/74a5f85a8f367587892bd34d50f7b00f4c9ed1733881c29572076713bf17/m1_api_wrapper-2.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fbc077ec21155fc73f544da42194c484b3b899fe8e2e0122b9b21ebe81e64e6a",
        "md5": "dceaa6daef23e8aa892c998840506344",
        "sha256": "5b1c18ae839fa15a4641e822ba2158807bd74278a2a21e58d242b8ffc631ad2e"
      },
      "downloads": -1,
      "filename": "m1_api_wrapper-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dceaa6daef23e8aa892c998840506344",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 6494,
      "upload_time": "2022-01-14T23:57:18",
      "upload_time_iso_8601": "2022-01-14T23:57:18.988518Z",
      "url": "https://files.pythonhosted.org/packages/fb/c0/77ec21155fc73f544da42194c484b3b899fe8e2e0122b9b21ebe81e64e6a/m1_api_wrapper-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}