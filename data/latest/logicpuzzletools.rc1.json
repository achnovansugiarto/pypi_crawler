{
  "info": {
    "author": "Daniel L. Bates",
    "author_email": "danbates@verizon.net",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# logicpuzzletools Package\nlast change 20-Mar-2022\n### An collection of tools to aid in solving logic puzzle problems with Python 3.x .\nThis does not use sophisticated Artificial Intelligence methods. Instead it helps to generate\npermutations and tools to filter these permuations. Finally, a ready made way of outputing \nthose solution(s).\n### Author: Daniel L. Bates\t(dan.bates)\n## The pypi module logicpuzzletools\n## What kind of logic puzzle problems?\nThe kind of logic puzzle problem the tools help solve are also called logic grid puzzles.\nThe logic grid puzzle has two or more categories. Each category is a set of something, Often one\ncategory is people with a set of names, although this is not always true. Each set has the same\ncardinality. \n\nThe elements are sometimes the same as the formulation. In this set of tools they must be unique.\nIf the problem has 5 girls who are friends each naming there pet after one of there 4 friends you\nhave to go through the gymnastics of making them different. For instance 'diane' and 'diane_pet'.\n\nYou can always find one category not to permute. This is our fixed category. It is good to pick some\ncategory which has some order to it, like house numbers or floor numbers in a hotel (yes you can leave\nout floor 13).\n\nCategories are global or nonlocal such that all the solution code has access to them.\n\nThere are also a set of rules describing relationships between elements of disparate (or the same)\ncategory. The are commonly solved with the upper left of a matrix which\nincludes the lower left to upper right diagonal. In the columns typically one category is left out.\nIn the rows typically a different category is left out.\nThe set element names label the rows and columns.\n\n!(see[A Simple example from the Brainzilla website.](https://www.brainzilla.com/logic/logic-grid/superheroes/))\n\n### The Einstein puzzle.\nOn December 17, 1962 *Life International* published a logic grid puzzle called \"Who owns the zebra\". This has\nbeen called the Zebra puzzle. The problem was allegedly invented by Albert Einstein, so it is also\ncalled the Einstein puzzle. A more recent incarnation of the problem, without the Zebra is stated here:\n\n| Categories | House #s | colors | nationalites | drinks | Pets  | Smokes      |\n| ---------- | -------- | ------ | ------------ | ------ | ----  | ------      | \n|  indexes   |    1     | yellow |    swede     | beer   | fish  | bluemasters |\n|            |    2     | red    |    dane      | coffee | birds | dunhills    |\n|            |    3     | green  |    german    | milk   | horses| princes     |\n|            |    4     | blue   |    brit      | tea    | cats  | blends      |\n|            |    5     | white  |    norwegian | water  | dogs  | pallmalls   |\n\nRules:\n```\n    There are five houses in a row in different colors.\n    In each house lives a person with a different nationality.\n    The five owners drink a different drink,\n    smoke a different brand of cigar\n    and keep a different pet, one of which is a Walleye Pike.\n    \n     1. The Brit lives in the red house.\n     2. The Swede keeps dogs as pets.\n     3. The Dane drinks tea.\n     4. The green house is on the left of the white house.\n              4. has to be interpreted as immediatly to the left of\n              or there is more than one solution\n     5. The green house owner drinks coffee.\n     6. The person who smokes Pall Malls keeps birds.\n     7. The owner of the yellow house smokes Dunhills.\n     8. The man living in the house right in the center drinks milk.\n     9. The man who smokes Blends lives next to the one who keeps cats.\n    10. The Norwegian lives in the first house.\n    11. The man who keeps horses lives next to the one who smokes Dunhills.\n    12. The owner who smokes Bluemasters drinks beer.\n    13. The German smokes Princes.\n    14. The Norwegian lives next to the blue house.\n    15. The man who smokes Blends has a neighbor who drinks water.\n              15. has to be interpreted as lives adjacent to.  or there\n              is more than one solution.\n    The question is-- who owns the fish?\n```\n\nThe code I give you to solve this does not use a grid. It is instead a\nconstraint satisfaction method. This generates permutations, Not all permutatations are completly examined\nas some are pruned. There are permutations for each category. Elements are related to\nelements of different categories by there index in their own category.\n\nThese permutations are taken through filters which are the rules.\n\nBecause position is important for each category we use lists instead of sets to represent them.\n\nHere is the code using logic_puzzle_tools for the Einstein problem:\n```\nfrom logic_puzzle_tools import *\n...\ndef einstein ():\n    '''\n    Einstein puzzle\n\n    There are five houses in a row in different colors.\n    In each house lives a person with a different nationality.\n    The five owners drink a different drink,\n    smoke a different brand of cigar\n    and keep a different pet, one of which is a Walleye Pike.\n    \n     1. The Brit lives in the red house.\n     2. The Swede keeps dogs as pets.\n     3. The Dane drinks tea.\n     4. The green house is on the left of the white house.\n              4. has to be interpreted as immediatly to the left of\n              or there is more than one solution\n     5. The green house owner drinks coffee.\n     6. The person who smokes Pall Malls keeps birds.\n     7. The owner of the yellow house smokes Dunhills.\n     8. The man living in the house right in the center drinks milk.\n     9. The man who smokes Blends lives next to the one who keeps cats.\n    10. The Norwegian lives in the first house.\n    11. The man who keeps horses lives next to the one who smokes Dunhills.\n    12. The owner who smokes Bluemasters drinks beer.\n    13. The German smokes Princes.\n    14. The Norwegian lives next to the blue house.\n    15. The man who smokes Blends has a neighbor who drinks water.\n              15. has to be interpreted as lives adjacent to.  or there\n              is more than one solution.\n    The question is-- who owns the fish?\n    '''\n    logic_puzzle_setup()\n    houseposition = [1, 2, 3, 4, 5] # This is fixed Left:1 2 3 4 5:Right\n    # these belong to scope of einstein\n    nationalities = [None] * 5\n    drinks        = [None] * 5\n    housecolor    = [None] * 5\n    pets          = [None] * 5\n    smokes        = [None] * 5\n\n    def choose_nationalities():\n        nonlocal nationalities\n        permute_nationalities = permute('norwegian, brit, swede, dane, german', nationalities)\n        for p in permute_nationalities:\n            category(nationalities, p)\n            if fails(is_associated('norwegian', 1)):                    #R10\n                continue\n            choose_drinks()\n\n    def choose_drinks ():\n        nonlocal drinks\n        permute_drinks = permute('coffee, milk, beer, tea, water', drinks)\n        for p in permute_drinks:\n            category(drinks, p)\n            if fails(is_associated('dane', 'tea')):                     # R3\n                continue\n            if fails(is_associated('milk', 3)):                         # R8\n                continue\n            choose_housecolor()\n\n    def choose_housecolor ():\n        nonlocal housecolor\n        permute_housecolor = permute('blue, green, white, red, yellow', housecolor)\n        for p in permute_housecolor:\n            category(housecolor, p)\n            if fails(is_associated('brit', 'red')):                     # R1\n                continue\n            if fails(is_just_left_of('green', 'white')):                # R4\n                continue\n            if fails(is_associated('green', 'coffee')):                 # R5\n                continue\n            if fails(is_adjacent_to('norwegian', 'blue')):              # R14\n                continue\n            choose_pets()\n            \n    def choose_pets ():\n        nonlocal pets\n        permute_pets = permute('fish, birds, dogs, horses, cats', pets)\n        for p in permute_pets:\n            category(pets, p)\n            if fails(is_associated('swede', 'dogs')):                   # R2\n                continue\n            choose_smokes()\n\n    def choose_smokes ():\n        nonlocal smokes\n        permute_smokes = permute('blends, pallmalls, bluemasters, dunhills, princes', smokes)\n        for p in permute_smokes:\n            category(smokes, p)\n            if fails(is_associated('pallmalls', 'birds')):              # R6\n                continue\n            if fails(is_associated('yellow', 'dunhills')):              # R7\n                continue\n            if fails(is_adjacent_to('blends', 'cats')):                 # R9\n                continue\n            if fails(is_adjacent_to('horses', 'dunhills')):             # R11\n                continue\n            if fails(is_associated('bluemasters', 'beer')):             # R12\n                continue\n            if fails(is_associated('german', 'princes')):               # R13\n                continue\n            if fails(is_adjacent_to('blends', 'water')):                # R15\n                continue\n            a_solution()\n\n    def a_solution ():\n        # a_solution. If not enough constraints, there will be more\n        # than one. If too many constraint, there will be none.\n        fmt1 = '%7s %11s %8s %11s %8s %12s'\n        fmt2 = '%7d %11s %8s %11s %8s %12s'\n        print(fmt1%('house #','nationality','drinks','housecolor','pet','smokes'))\n        print('=' * 70)\n        PrintSolution(fmt2, houseposition, nationalities, drinks, housecolor, pets, smokes)\n        # who owns the fish\n        print('the', nationalities[idx('fish')],'owns the fish, (the Walleye Pike)')\n\n    fixed_cat(houseposition)\n    choose_nationalities()  # einstein() back to the first function at the top\n```\nThe soloution produced is:\n```\nhouse # nationality   drinks  housecolor      pet       smokes\n======================================================================\n      1   norwegian    water      yellow     cats     dunhills\n      2        dane      tea        blue   horses       blends\n      3        brit     milk         red    birds    pallmalls\n      4      german   coffee       green     fish      princes\n      5       swede     beer       white     dogs  bluemasters\nthe german owns the fish, (the Walleye Pike)\n```\n## First step if you are solving more than one puzzle.\n\nIf you are going to solve more than one puzzle, you must call\nlogic_puzzle_setup() for all but the first one. It will do no harm\nto call this for the first puzzle as well.\n\nThe form this takes on is to loop over permutations making each permution\nthe category. The body of the loop tests such criteria as can be determined\nby the categories that have been defined. When a rule has been broken we\ncontinue with the next permutation. At the very end of the loop we bring another\ncategory into play (most easily by calling another function). Rather than\nactually negate each rule there is a function fails(rule) which make the\ncode read better but does very little. The fails(rule) is equivalent to\nnot (rule). This lets the code match the verbage of the rule.\n\nThe means of making a permutation is by calling the function \ncategory(cat : list, permutation : list). This function keeps all the\nreferences to that particular category valid. This does an element by element\ncopy all the elements of permutation to the elements of category.\n\nThere is always one category you do not permute. To set the fixed category\nyou call the following:\n\nfixed_cat (cat: list) -> None\n\nEach item in cat is linked back to category cat through a dictionary.\n\n## Making a generator for the permutations of each category.\nThe tool permute uses itertools.permute to create a generator for a category\nand to return it. All the categories except one need to be permuted. The generator\nalso associates element name with the category which contains it.\n\ndef permute (things : str, cat : list) -> list:\n\nReturn a generator which gives new permutations of things.  \nAnd map each element to the category cat.\n\nExample:\tpermute_housecolor = permute('blue, green, white, red, yellow', housecolor)\n\n## Tools for filtering.\n\nUnlike a much earlier version of this package, you do not ever need to\nspecify a category.\n\nIn most of the following rule related helpers the string arg1 and arg2 are elements. They\nusually to different categorys. These are predicates which return True if the relationship\nis True and False otherwise. The relationships are for the indexes of the elements within\nthere respective categories. All these should be thought of as the relationship by\nthe associated fixed category. These are:\n\n\n#### is_associated (arg1 : str, arg2 : str) -> bool:\nReturns True when arg1 is the same as arg2 like 'green' and 'coffee'.\n#### is_not_associated (arg1 : str, arg2 : str) -> bool:\nReturns False when arg1 is not the same as arg2 like 'green' and 'coffee'.\n\nFor is_associated and is_not_associated to make sense, arg1 and arg2 must\nbe in seperate categories. Ex: is_associated('green', 'green') will always be True and\nis_not_associated('green', 'green') will always be False.\n\n#### is_just_left_of (arg1 : str, arg2 : str) -> bool:\n#### is_just_below (arg1 : str, arg2 : str) -> bool:\nThese two are identical. Use the one which best matches the verbage of the rule.\nThe truth of idx(arg2) - idx(arg1) == 1.\n#### is_just_right_of (arg1 : str, arg2 : str) -> bool:\n#### is_just_above (arg1 : str, arg2 : str) -> bool:\nThese are also identical. Pick what reads the best. The truth of idx(arg2) - idx(arg1) == -1. \n#### is_below (arg1 : str, arg2 : str) -> bool:\nThe truth of idx(arg1) < idx(arg2).\n#### is_above (arg1 : str, arg2 : str) -> bool:\nThe truth of idx(arg1) > idx(arg2)\n#### is_adjacent_to (arg1 : str, arg2 : str) -> bool:\nThe truth of abs(idx(arg1) - idx(arg2)) == 1.\n#### is_not_adjacent_to (arg1 : str, arg2 : str) -> bool:\nThe truth of abs(idx(arg1) - idx(arg2)) != 1.\n#### after (arg1 : str, arg2 : str) -> bool:\nThe same as is_above.\n#### before (arg1 : str, arg2 : str) -> bool:\nThe same as is_below. Use the most natural form.\n#### just_after (arg1 : str, arg2 : str) -> bool:\nThe same as is_just_right_of.\n#### just_before (arg1 : str, arg2 : str) -> bool:\nThe same as is_just_left_of.\n\n#### idx (element : str) -> int:\nNo matter how many primitives are provided here, a problem will arise where they\ndo not suffice. The function idx uses the category of element and returns the\nindex of element within that category. With this you can build the rule you need.\n\n## Outputing a solution\nTo help output the solution a function PrintSolution (fmt_str, *ListSet) is provided.\nthe parameter fmt_str is a C printf style format string for one row.\nListSet are categories to be the columns. An example is the a_solution function\nin the einstein code.\n\n## Watch for:\nThis topic is discussed in more detail in a book I have written.\nI will update this with information when the book is published.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/DanLBates/LogicPuzzleTools",
    "keywords": "'Logic','Grid','Puzzle','Problem','Tool'",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logicpuzzletools",
    "package_url": "https://pypi.org/project/logicpuzzletools/",
    "platform": null,
    "project_url": "https://pypi.org/project/logicpuzzletools/",
    "project_urls": {
      "Homepage": "https://github.com/DanLBates/LogicPuzzleTools"
    },
    "release_url": "https://pypi.org/project/logicpuzzletools/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A collection of tools to aid in solving logic grid puzzles",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13232718,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b26ea789196c3543cd07747f1a62ee1d8458bc57f0011e17e81e42cd0f2a552",
          "md5": "5253bba408c1084108c74a5efde63c90",
          "sha256": "5f331e638d0413484121850535516cc70efb8d1b2e44b6ff5f1fd840d798a018"
        },
        "downloads": -1,
        "filename": "logicpuzzletools-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5253bba408c1084108c74a5efde63c90",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13509,
        "upload_time": "2022-03-20T22:08:16",
        "upload_time_iso_8601": "2022-03-20T22:08:16.266123Z",
        "url": "https://files.pythonhosted.org/packages/7b/26/ea789196c3543cd07747f1a62ee1d8458bc57f0011e17e81e42cd0f2a552/logicpuzzletools-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "948b04b2b84e0fccd07d5ce5c3d0b212d368b417e033762ab40ebb673076e339",
          "md5": "74edefe09200490bca8712e815d9277b",
          "sha256": "9c38a88b361da55ba5bcf36bc937977663a2c82705954f1d5e5fe912daf4662b"
        },
        "downloads": -1,
        "filename": "logicpuzzletools-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "74edefe09200490bca8712e815d9277b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15322,
        "upload_time": "2022-03-20T22:08:18",
        "upload_time_iso_8601": "2022-03-20T22:08:18.148311Z",
        "url": "https://files.pythonhosted.org/packages/94/8b/04b2b84e0fccd07d5ce5c3d0b212d368b417e033762ab40ebb673076e339/logicpuzzletools-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b26ea789196c3543cd07747f1a62ee1d8458bc57f0011e17e81e42cd0f2a552",
        "md5": "5253bba408c1084108c74a5efde63c90",
        "sha256": "5f331e638d0413484121850535516cc70efb8d1b2e44b6ff5f1fd840d798a018"
      },
      "downloads": -1,
      "filename": "logicpuzzletools-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5253bba408c1084108c74a5efde63c90",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13509,
      "upload_time": "2022-03-20T22:08:16",
      "upload_time_iso_8601": "2022-03-20T22:08:16.266123Z",
      "url": "https://files.pythonhosted.org/packages/7b/26/ea789196c3543cd07747f1a62ee1d8458bc57f0011e17e81e42cd0f2a552/logicpuzzletools-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "948b04b2b84e0fccd07d5ce5c3d0b212d368b417e033762ab40ebb673076e339",
        "md5": "74edefe09200490bca8712e815d9277b",
        "sha256": "9c38a88b361da55ba5bcf36bc937977663a2c82705954f1d5e5fe912daf4662b"
      },
      "downloads": -1,
      "filename": "logicpuzzletools-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "74edefe09200490bca8712e815d9277b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 15322,
      "upload_time": "2022-03-20T22:08:18",
      "upload_time_iso_8601": "2022-03-20T22:08:18.148311Z",
      "url": "https://files.pythonhosted.org/packages/94/8b/04b2b84e0fccd07d5ce5c3d0b212d368b417e033762ab40ebb673076e339/logicpuzzletools-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}