{
  "info": {
    "author": "",
    "author_email": "\"Tristin Alexander S.\" <trystyn.alxander@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Unitment\n\nThe `unitment` module provides support for dynamic unit (and error) management through `Unit` and `Measure` classes.\nThe guiding philosophy of the module is to focus users on their maths, not units or code.\nThe module is built to allow users to forget about units and unit management. \nTo that end, the module is extremely dynamic in many ways that provide notable advantages over other unit management modules:\n\n - Unit Compatibility. This module works with *almost any* units. \n While metric units are used by default, imperial units are defined as a class constant (`Measure(\"degF\",Unit.IMPERIAL_UNITS)`). \n Arbitrary units can be used as their own (non-physical) dimension without being explicitly defined - albeit without prefixes, conversion-functions, or decompositions. \n More advanced units can easily be loaded or defined for automatic conversion to base-units and the unit definitions propagate with the units themselves.\n Indeed, some advanced units (pH, Celsius) are already defined.\n \n - Intuitive Instantiation. Units and Measures are made with easy constructors in this package: e.g. `Measure(\"5 m\")`, `Measure(5,\"m\")`, `Measure(value=5,units=\"m\")`, etc.\n Users needn't familiarize themselves with a cluttered or convoluted namespace or even understand much python or coding in general. \n Again, the goal is to allow the users to focus on their maths in abstract-terms that maintain perspective on their problem, rather than dragging unit-hell into coding. \n \n - Math in Dimensions. Each Unit and Measure automatically decomposes and simplifies to base-unit form prior to preforming mathematical operations.\n This allows math to be done in terms of the actual base-dimensions, which is crucial for some units (e.g. ℃). \n Where possible, the original units are retained for the final result. \n As a result, users needn't think in terms of units after they've been defined. \n Users may focus on doing math in the more abstract terms or at the level of the dimension. \n \n - Propagation of Error. Propagation of error is built into every operator.\n While this is a worst-case (non-abstract) error calculation, it helps users gain a grasp on the reliability-of and precision-needed-for their system.\n\n - Low Over-head. A lot of effort was put into preventing the module from being slow. \n While it could be faster at cost of code maintainability or usability, it is quite fast for what it does.\n Moreover, the module's only dependencies are in the Python Standard Library (Mostly the `math` and `decimal` modules). \n Overall, this module is well suited for scripting purposes. \n\nAll that said, the choice of unit management module does depend on use-case. \nThe general advise for users is to use this module for scripting simple math or conversions. \nWhile this module may work for surprisingly complicated things, we recommend removing units altogether for advanced applications. \nIn such cases, this module may still be useful as a parser. \n\n____________________________________________________________\n\nConsider supporting unitment on [patreon](https://www.patreon.com/user?u=83796428).\n\n____________________________________________________________\n\n# Quick Install\n\n`pip install unitment`\n\n# Quick Start Example\n\n    from unitment import Unit,Measure\n    \n    distance = Measure(\"25 m\")\n    time     = Measure(\"5 s\")\n    speed    = distance / time\n    \n\n____________________________________________________________\n\n\n## Measure\n\n`Measure` is the primary class in this package. Measures have a value, a unit, and an error. The error is often implied. \nThis class reflects the logical structure in its properties: `value`, `units`, and `error`. Likewise, the error is inferred if not explicitly provided. \nThe value and unit properties are numbers. The unit is defined more extensively below.\n\n**Instantiation:** \nThis class is built to be instantiated casually and intuitively, e.g. `Measure(\"25 m\")`, so reasonable string inputs should be processed as expected.\nThat said, care should be taken to leave a space between symbols as milliseconds (`\"ms\"`) are quite different from meter seconds (`\"m s\"`).\nBeyond that, the parser is fairly robust. It is generally capable of handling exponents and error notations. \nThe class can also be instantiated with the keywords `value`, `error`, and `unit` or `units`.\n\n**Dominant:** The Measure class dominates in mathematical operations, so a float * Measure = Measure. \nFor very large programs with very large numbers of operations, this will slow down the program. \nFor maximum efficiency, it's always better to use this package as a parser and converter then cast the measure as a float.\n\nFor example:\n\n    x_raw    = \"2583 cm\"\n    x_meters = float(Measure(x_raw).convert(\"m\"))\n\n### Value\n\nThe class will accept and Number or would-be number as a value. This includes Decimals, floats, ints, and strings that can be converted to decimals.\nInternally the class will preserve Decimals until it encounters a float mathematical operations, at which point all internal values will convert to floats. \nIf inputting the value as an argument rather than a keyword or parsed string, the first number will be considered the value, the second the error.\n\n### Error\n\n**Definition of Error:** This module defines error as the square root of the variance: the standard deviation.\n\n**Numerical Error Assumption:**\nSince the module is not context-aware, propagation of error occurs with the assumption of numerical (and thus non-canceling) inputs for every operation.\nThis worse-case assumption is used because the module cannot be aware of its analytical context.\nFor example, analytically one knows that a - b + b = a.\nWithout context-awareness, the 'big-picture' cannot be observed and the module must operate numerically.\nThe module (like most code) sees (a-b), solves this as c, sees (c+b), and solves that. Propagation of error occurs at each step.\nAs a result, extra propagation of error occurs where none should exist in analytical contexts.\n\n**Propagation of Error Equations:** \nThe propagation of error equation (the taylor-series expansion of the statistical moments) for a function with two inputs is as follows:\n\nvar(f) = (∂f/∂x)^2 var(x) + (∂f/∂x) (∂f/∂y) covar(x) + (∂f/∂y)^2 var(y)\n\nSince the module is not context-aware, it must assume independent inputs; thus, this equation is more appropriate:\n\nvar(f) = (∂f/∂x)^2 var(x) + (∂f/∂y)^2 var(y)\n\nThat is the equation used by the module. For edification of the reader, this equation can be extended to multi-input function as follows:\n\nvar(f) = Σ (∂f/∂xi)^2 var(xi)\n\n**Propagation of Error Failures:** \nSince each of these are essentially the same equation all-be-it in slightly different contexts, they share the requirements of taylor-series expansions. \nNamely, the functions must be sufficiently differentiable and the approximations must be sufficiently local. \nThe floor, ceil, and round functions are not sufficiently differentiable for the taylor series expansions for the moments to be valid. \nGiven this and that most users would not be using them in a mathematically rigorous context, these functions do not propagate error properly. \nThe modulo function is defined in terms of the floor function (i.e. x % y = x-y*floor(x/y)); thus, it also does not propagate error properly. \nOther non-linear functions (such as log) are likely accurate locally (for very small errors), but are at greater risk of inaccuracies as values increase.\n\n**Implied Errors:**\nFor implied errors of given values (i.e. `Measure(10.0,\"m\")`), the module gives it's best guess by converting the value to a string.\nThis can produce incorrect results with floats (e.g. `Measure(float(10),\"m\")`). \nAs such, if concerned with error inputting values as strings or Decimal is recommended when not defining the error explicitly with keywords.\n\n\n### Restrictions on Mathematics\n\nRestrictions are put on the mathematics due to the presence of units. These should all be fairly intuitive.\nThe most obvious restriction is that measurements with different units cannot be added together. \nOne can use a simple taylor series to show that this restriction implies that units must cancel in exponents. \n\n## Units\n\nUnits are labels for self-consistent chunks of dimensions. \nThese dimensions can be physical, non-physical, or even complex abstractions. \nDespite the possible dimensions, units have a consistent logic-structure. \nThis allows them to be defined and categorized by complexity:\n\n- **Base Unit:**     Base     Units are singular and cannot be converted into other units. Examples: `\"m\"`, `\"fish\"`.\n- **Derived Unit:**  Derived  Units are singular but can    be converted into other units. Examples: `\"cm\"`, `\"J\"`.\n- **Compound Unit:** Compound Units are multiple logically related units. Examples: `\"cm / fish\"`, `\"J / m\"`\n\nThe `Unit` class is for base, derived, or compound units with multiple base-dimensions and/or magnitude modifiers. \nHere, the term \"symbol\" or \"symbols\" refers to a singular unit (base-unit or derived-unit) regardless of the length of the string. \nTo that end, the class is ultimately composed of a tuple of string symbols, a magnitude, and up-to one conversion function.\n\n**Instantiation:**\nThis class is built to be instantiated casually and intuitively, e.g. `Unit(\"m\")`, so reasonable string inputs should be processed as expected.\nThat said, care should be taken to leave a space between symbols as milliseconds (`\"ms\"`) are quite different from meter seconds (`\"m s\"`).\nOf-course, the class can also be instantiated more formally. Unit has three keywords for defining symbols: `numerators` and `denominators`, or `symbols`. \nThese keywords accept tuples of string-units, e.g. `(\"m\",\"s\")`, or tuples of string-unit exponent tuple pairs, e.g. `( (\"m\",1), (\"s\",-1) )`. \nThe keyword `magnitude` accepts numbers to define the magnitude of a unit. \n\nAs an example, each of the following instantiated units have the same symbols\n\n    Unit(\"m/s\")\n    Unit(\"m s^-1\")\n    Unit(numerators=(\"m\",),denominators=(\"s\",))\n    Unit(numerators=((\"m\",1),),denominators=((\"s\",1),))\n    Unit(symbols=((\"m\",1),(\"s\",-1),))\n\nAs an example, each of the following instantiated units have the same magnitudes:\n\n    Unit(\"1e6 fish\")\n    Unit(\"fish\", magnitude=1e6)\n    Unit(\"1000000 fish\")\n    Unit(\"10^6 fish\")\n\n### Defining Units\n\nGenerally, users do not need to define custom units. If a user wants to use some arbitrary unit such as `Unit(\"fish\")`, the module is fully capable of managing that. \nIt is also trivial to add magnitudes to arbitrary units (e.g. `Unit(\"10^6 fish\")`), so some users may find it simpler to replace prefixes `.replace(\"Mfish\",\"10^6 fish\")`.\nMoreover, the module has a number of predefined sets of non-standard units `Unit.IMPERIAL_UNITS`, `Unit.PRESSURE_UNITS`, `Unit.CONCENTRATION_UNITS` that can be loaded into the Unit or Measure class with an additional argument or the keywords `defs` or `definitions`.\n\n    u = Unit(\"ft\",Unit.IMPERIAL_UNITS)\n    m = Measure(\"3 ft\",Unit.IMPERIAL_UNITS)\n\nWhile arbitrary units are handled on the fly, some users may need to define custom units when dealing with non-standard derived units or prefixed units. \nOf course units are handled dynamically in the module, so units only need to be defined for simplifications, decompositions, or conversions.\nAgain, metric units are defined by default, so defining units is generally unnecessary. Still, users can define arbitrary derived or prefixed units:\n\n    weird_unit_dict = {\n      # Symbol      Mult              Base-Symbol   Function\n      'mu'       : ( Decimal(\"1e-3\"), (('u',1),),  None),\n      'ku'       : ( Decimal(\"1e3\"),  (('u',1),),  None),\n      }\n    x = Measure(\"5 ku\",weird_unit_dict).convert(\"u\")\n    y = Measure(\"5 ku\",weird_unit_dict).convert(\"mu\",weird_unit_dict)\n\nIf defining a derived unit in terms of metric units it's worth noting that the module considers metric base units to be units without a prefix (except kg). \nThis is important. Any unit defined in terms of prefixed-metric base-units (except kg's) may have unexpected behavior. kg, not g, is considered the base unit of mass.\n\n    weird_unit_dict = {\n      # Symbol      Mult             Base-Symbol   Function\n      'u'       : ( Decimal(1),      (('kg',-1),),  None),\n      'v'       : ( Decimal(\"1e3\"),  (('s',-2),),  None),\n      }\n    \n    x = Measure(\"5 u\",weird_unit_dict).convert(\"kg-1\")\n    x = Measure(\"5 v\",weird_unit_dict).convert(\"s-2\")\n\n**Context Dependent Units:**\nSome function units, most notably the Decibel (dB) or Bel (B), have a context dependent meaning; thus, the user is responsible for defining them prior to use.\nThe Decibel has multiple definitions depending on whether it is a power (`10*((val/ref).log10)`) or amplitude (`20*((val/ref).log10)`) measurement.\nMoreover, the reference (`ref`) is extremely context specific. For example, a milli-watt microbel (uBmW) is a context independent power measurement defined with respect to a milli-watt reference. \nDespite its context independence, it is considered obscure and non-metric (even when using a metric reference); thus, the user is responsible for defining such units prior to use. \n\nTo define a context dependent unit the magnitude, base units, and selector-conversion functions are required. \nThe selector function simply determines the behavior (the conversion functions used) given the exponent. \nThe conversion functions are to and from base units. As an example:\n\n    def DECIBEL_SELECTOR(exponent):\n      \"\"\"\n      In non-under-water Acoustics the decible is defined as follows: \n        dB = 20 log10( value / 20 uPa )\n      In base units: \n        dB = 20 log10( value / (20e-6 kg^1 m^-1 s^-2 ) )\n      \n      To reverse this calculation solve for the initial value: \n        value = 10^(dB / 20) * 20e-6 kg^1 m^-1 s^-2\n      \"\"\"\n      \n      # Decibel Functions\n      def NUMERATOR_FROM_DECIBEL_TO_BASE(val):\n        val,scale,ref = unitment._type_corrections_(val,Decimal(\"20\"),Decimal(\"20e-6\"))\n        return 10**(val/scale) * ref\n      def NUMERATOR_TO_DECIBEL_FROM_BASE(val):\n        val,scale,ref = unitment._type_corrections_(val,Decimal(\"20\"),Decimal(\"20e-6\"))\n        return scale * (val/ref).log10()\n      # Most Function Units behave like normal units when on the denominator.\n      def DENOMINATOR_FROM_DECIBEL_TO_BASE(val):\n        return val\n      def DENOMINATOR_TO_DECIBEL_FROM_BASE(val):\n        return val\n      \n      # Select & Return Correct Function\n      if(exponent == 0): return (lambda x:x,lambda x:x)\n      if(exponent == 1):  return (   NUMERATOR_FROM_DECIBEL_TO_BASE ,   NUMERATOR_TO_DECIBEL_FROM_BASE )\n      if(exponent == -1): return ( DENOMINATOR_FROM_DECIBEL_TO_BASE , DENOMINATOR_TO_DECIBEL_FROM_BASE )\n      else:\n        raise ValueError(f\"Failed to Decompose: Exponent of dB != 1,0,-1. Cannot Deconvolute.\")\n    \n    dB_dict = {\n      # Symbol      Mult        Base-Symbol                    Function\n      'dB'       : ( 1,         (('kg',1),('m',-1),('s',-2)),  DECIBEL_SELECTOR),\n      }\n    \n    x = Measure(\"5 dB\",dB_dict).convert(\"uPa\")\n\n\n***If you make your a unit dictionary you'd like included in the package, please reach out to me.***\n\n____________________________________________________________\n\n# Frequently Asked Questions\n\n## Can the module be used with NumPy/cmath? \n\nYes, but the extra efficiency from NumPy is lost. \nIf you're using the module for scripting purposes and are unconcerned about efficiency, simply use the argument `dtype=numpy.dtype(Measure)` in your NumPy array.\nIf you are creating a more high performance program, use this module to parser/convert your initial input into your preferred units, then take the value of measures (as floats if they aren't already).\n\nExample:\n\n    m = Measure(\"5 mm\")\n    a = numpy.array([m,m,m],dtype=numpy.dtype(Measure))\n\n\n## What Types of numbers does it work with?\n\nThoroughly tested with Decimals, ints, floats. Might work with complex numbers from cmath, but not tested. \nIt might not fail with other Numbers, but no guarantees. \n\n\n## Propagation (Domination) of the Measure class. \n\nWhen using the measure in maths you may find that most things convert to the measure class in the final result. \nSometimes this makes sense, a scalar times a measure should be a measure. Other times this may seem annoying, as in unitless values. \nUnitless Measures are returned to help track the propagation of error. \nOne can always access the value via the value property or by casting the measure as a float. \n\n## How does the module handle Celsius and Fahrenheit?\n\nJust like every other unit, Celsius and Fahrenheit are decomposed (into Kelvin) prior to any math being done. \nMost unit managers do not do this because it is difficult to code addition into conversion functions. \nThis module manages the difficult part; however, certain non-base units are invalid because they cannot be decomposed: e.g. `Measure(\"10 degC m\")` will throw an error.\nThe reason is the module cannot know what portion of the unit belongs to each component: e.g. `Measure(\"2 m\") * Measure(\"5 degC\") != Measure(\"5 m\") * Measure(\"2 degC\")`.\nNotice the module doesn't fail calculating `Measure(\"2 m\") * Measure(\"5 degC\")`. It simply doesn't back-convert to Celsius.\nNote: The unit \"C\" is reserved for Coulomb, but the module recognizes the degrees symbol. \n\n## Conversions to Non-Metric Units: E.g. Feet(ft) to Inches(in)?\n\nOne common gripe about the `convert` function is that it doesn't propagate unit definitions. \nThis results in situations where a conversion of inches to feet might be interpreted as an attempt to convert inches to femto-tonnes, resulting in an error: `Measure(\"12 in\",Unit.IMPERIAL_UNITS).convert(\"ft\")` throws a UnitException for incompatible units.\nThis is because the user failed to re-define `\"ft\"` in the conversion function. \nThe proper way to convert to any non-metric unit is to define the unit in either convert or in the passed unit: `Measure(\"12 in\",Unit.IMPERIAL_UNITS).convert(\"ft\",Unit.IMPERIAL_UNITS)` or `Measure(\"12 in\",Unit.IMPERIAL_UNITS).convert(Unit(\"ft\",Unit.IMPERIAL_UNITS))`.\n\n# Less Frequently Asked Questions\n\n## Can the module be made Faster?\n\nOne thing you can do to improve speed is to decompose units or simplify measures as early as possible.\nThe Decompose, Convert, and Simplify functions remove unit definitions, and propagation of unit-definitions slows the module.\nThis is not an issue for purely metric units because they are the default (thus never passed in propagation). \nThe notable down side in removing the unit definitions is that you'll have to re-introduce the definitions if you intend to use them later. \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "unitment",
    "package_url": "https://pypi.org/project/unitment/",
    "platform": null,
    "project_url": "https://pypi.org/project/unitment/",
    "project_urls": {
      "Bug Tracker": "https://github.com/TristynAlxander/unitment/issues",
      "Homepage": "https://github.com/TristynAlxander/unitment"
    },
    "release_url": "https://pypi.org/project/unitment/0.0.6/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Dynamic unit management through `Unit` and `Measure` classes.",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17532980,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "67b921d391561502a00b9658b09cc6a7043d716cbe7d020b02d1702e50507184",
          "md5": "2b03a9d7a647e95eb5035f2816361c1d",
          "sha256": "c5f55e18c9e73f87eb301ebe6ea94ca5c17462731fda23291414286aa38c26d5"
        },
        "downloads": -1,
        "filename": "unitment-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b03a9d7a647e95eb5035f2816361c1d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 33310,
        "upload_time": "2022-12-11T09:11:31",
        "upload_time_iso_8601": "2022-12-11T09:11:31.720415Z",
        "url": "https://files.pythonhosted.org/packages/67/b9/21d391561502a00b9658b09cc6a7043d716cbe7d020b02d1702e50507184/unitment-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "afe1f39e3fe61cab24f4afa1e55a3632d5767fff8a2e63819febc3227f9e3dca",
          "md5": "01f636ab14510110625cb793efd7ee4e",
          "sha256": "54007665be5080b65104068173bb58bc80ddb08713dbe7cca22781ed696ed307"
        },
        "downloads": -1,
        "filename": "unitment-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "01f636ab14510110625cb793efd7ee4e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 150279,
        "upload_time": "2022-12-11T09:11:33",
        "upload_time_iso_8601": "2022-12-11T09:11:33.391087Z",
        "url": "https://files.pythonhosted.org/packages/af/e1/f39e3fe61cab24f4afa1e55a3632d5767fff8a2e63819febc3227f9e3dca/unitment-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b72631c6853307072429f4a02704ece307c4c39dfa78f7b9cca4087bc815637",
          "md5": "5117180da60cdc0a41c342465ab3018a",
          "sha256": "77534310ebc6f10fbbf741b623e7392fbedbf52376b4bb1e3c7eeef89e4bb29d"
        },
        "downloads": -1,
        "filename": "unitment-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5117180da60cdc0a41c342465ab3018a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 33415,
        "upload_time": "2022-12-11T10:21:43",
        "upload_time_iso_8601": "2022-12-11T10:21:43.849439Z",
        "url": "https://files.pythonhosted.org/packages/4b/72/631c6853307072429f4a02704ece307c4c39dfa78f7b9cca4087bc815637/unitment-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c1bd3066233d19bb6fa135fb76a5eba491d1a408956dbfe150d0f299ea13939",
          "md5": "927c85e9fd9b957d127d7968470c3fc2",
          "sha256": "c47b30e217dd6d4653a2db3182a28a4ec70223500ac4563bda09d208ae5b0032"
        },
        "downloads": -1,
        "filename": "unitment-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "927c85e9fd9b957d127d7968470c3fc2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 150392,
        "upload_time": "2022-12-11T10:21:46",
        "upload_time_iso_8601": "2022-12-11T10:21:46.634718Z",
        "url": "https://files.pythonhosted.org/packages/4c/1b/d3066233d19bb6fa135fb76a5eba491d1a408956dbfe150d0f299ea13939/unitment-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "15d698ffde4697f3bc0be9d1a5648e776855839a44670d05d0c54d80dbe41b37",
          "md5": "2477670a3ce44ad4bce5114a7781cdaf",
          "sha256": "77e622d14d1b0da269a057130417102ddf03d901bb226bfbcd12d975a441747b"
        },
        "downloads": -1,
        "filename": "unitment-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2477670a3ce44ad4bce5114a7781cdaf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 33414,
        "upload_time": "2022-12-23T17:28:14",
        "upload_time_iso_8601": "2022-12-23T17:28:14.621572Z",
        "url": "https://files.pythonhosted.org/packages/15/d6/98ffde4697f3bc0be9d1a5648e776855839a44670d05d0c54d80dbe41b37/unitment-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "222da124be9bff38e28408abd03a8ba59d50ed72679144059cbbf2079871f9d0",
          "md5": "5742eca4b90cfdeaaf5cb34deb9ed2d7",
          "sha256": "c035e6cdbd17a90a83a5e5414a66012c19933cfcc6b0c55f0b0e70baeb2dce87"
        },
        "downloads": -1,
        "filename": "unitment-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5742eca4b90cfdeaaf5cb34deb9ed2d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 163373,
        "upload_time": "2022-12-23T17:28:17",
        "upload_time_iso_8601": "2022-12-23T17:28:17.305842Z",
        "url": "https://files.pythonhosted.org/packages/22/2d/a124be9bff38e28408abd03a8ba59d50ed72679144059cbbf2079871f9d0/unitment-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bcd49feb09338386fd272576d597478b406542cd444e7cce536a59d82b4dd44",
          "md5": "7d60a23f017e80da3a2ec1d3ae15da5d",
          "sha256": "0429986a1990bfcd1a09edfb0fba9fe62eeb78285f99439d8d6c6618b254e85a"
        },
        "downloads": -1,
        "filename": "unitment-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d60a23f017e80da3a2ec1d3ae15da5d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 33532,
        "upload_time": "2023-03-31T21:02:20",
        "upload_time_iso_8601": "2023-03-31T21:02:20.594566Z",
        "url": "https://files.pythonhosted.org/packages/3b/cd/49feb09338386fd272576d597478b406542cd444e7cce536a59d82b4dd44/unitment-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ec4561e2a534c8d4a21e83f9f7bf7d92ab662803e211fd868d6de4176c22c0d",
          "md5": "030aaed3b07dc846e3ca3496e62bc3ac",
          "sha256": "dc3da14ac8a50ffec1ecd42aa1967e47ddd0b00012802287a1c94554ccc93da4"
        },
        "downloads": -1,
        "filename": "unitment-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "030aaed3b07dc846e3ca3496e62bc3ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 163654,
        "upload_time": "2023-03-31T21:02:24",
        "upload_time_iso_8601": "2023-03-31T21:02:24.416999Z",
        "url": "https://files.pythonhosted.org/packages/8e/c4/561e2a534c8d4a21e83f9f7bf7d92ab662803e211fd868d6de4176c22c0d/unitment-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bcd49feb09338386fd272576d597478b406542cd444e7cce536a59d82b4dd44",
        "md5": "7d60a23f017e80da3a2ec1d3ae15da5d",
        "sha256": "0429986a1990bfcd1a09edfb0fba9fe62eeb78285f99439d8d6c6618b254e85a"
      },
      "downloads": -1,
      "filename": "unitment-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7d60a23f017e80da3a2ec1d3ae15da5d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 33532,
      "upload_time": "2023-03-31T21:02:20",
      "upload_time_iso_8601": "2023-03-31T21:02:20.594566Z",
      "url": "https://files.pythonhosted.org/packages/3b/cd/49feb09338386fd272576d597478b406542cd444e7cce536a59d82b4dd44/unitment-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8ec4561e2a534c8d4a21e83f9f7bf7d92ab662803e211fd868d6de4176c22c0d",
        "md5": "030aaed3b07dc846e3ca3496e62bc3ac",
        "sha256": "dc3da14ac8a50ffec1ecd42aa1967e47ddd0b00012802287a1c94554ccc93da4"
      },
      "downloads": -1,
      "filename": "unitment-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "030aaed3b07dc846e3ca3496e62bc3ac",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 163654,
      "upload_time": "2023-03-31T21:02:24",
      "upload_time_iso_8601": "2023-03-31T21:02:24.416999Z",
      "url": "https://files.pythonhosted.org/packages/8e/c4/561e2a534c8d4a21e83f9f7bf7d92ab662803e211fd868d6de4176c22c0d/unitment-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}