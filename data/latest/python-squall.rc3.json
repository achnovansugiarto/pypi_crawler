{
  "info": {
    "author": "",
    "author_email": "Stanislav Dubrovskyi <s.dubrovskyi@cleverdec.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "<p align=\"center\">\n    <a href=\"https://github.com/mtag-dev/squall/\">\n        <img src=\"https://github.com/mtag-dev/squall/raw/master/docs/assets/squall-logo.png\" alt=\"Squall\" width=\"300\"/>\n    </a>\n</p>\n<p align=\"center\">\n    <em>Squall, API framework which looks ahead</em>\n</p>\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://pycqa.github.io/isort/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Coverage](https://img.shields.io/codecov/c/github/mtag-dev/squall?color=%2334D058)](https://pypi.org/project/python-squall/)\n[![Test](https://github.com/mtag-dev/squall/workflows/Test/badge.svg?event=push&branch=master)](https://github.com/mtag-dev/squall/actions/workflows/test.yml)\n[![PyPi](https://img.shields.io/pypi/v/python-squall?color=%2334D058&label=pypi%20package)](https://pypi.org/project/python-squall/)\n[![PyVersions](https://img.shields.io/pypi/pyversions/python-squall.svg?color=%2334D058)](https://pypi.org/project/python-squall/)\n\n--- \n#### Navigation\n\n- [About](#about)\n  - [Motivation](#motivation)\n  - [Performance](#performance)\n  - [ASAP and batching](#asap-and-batching)\n- [Usage](#usage)\n  - [Install](#install)\n  - [Quick start](#quick-start)\n  - [OpenAPI](#openapi-generation)\n  - [Routing](#routing)\n  - [Compression](#compression)\n  - [HEAD parameters](#head-parameters)\n    - [Path](#path)\n    - [Query](#query)\n    - [Header](#header)\n    - [Cookie](#cookie)\n    - [Parameters configuration](#parameters-configuration)\n    - [Parameters validation](#parameters-validation)\n  - [Body processing](#body-processing)\n    - [Response serialization](#response-serialization)\n    - [Response deserialization serialization](#response-deserialization-serialization)\n  - [Opentelemetry usage](#opentelemetry-usage)\n- [Acknowledgments](#acknowledgments)\n- [Roadmap](#roadmap)\n- [Dependencies](#dependencies)\n- [Versioning](#versioning)\n- [License](#license)\n\n\n## About\n### Motivation\n\nInitially, it was a library for ASGI frameworks for publishing RBAC routing information to the MTAG API-Gateway. \nAfter some research, we have decided that this is the most expensive way and made a decision to create a framework\n which will deliver the best experience in the development of applications behind the API-Gateway.\n\nEventually, Squall is a part of the e2e solution for modern high-performance stacks.\n\n\n### Performance\n\n**1Kb no schema**\n![1kb no schema](https://github.com/mtag-dev/squall/raw/master/docs/assets/bench-raw-1kb.png)\n\n**30Kb no schema**\n![30kb no schema](https://github.com/mtag-dev/squall/raw/master/docs/assets/bench-raw-30kb.png)\n\n**1Kb schema**\n![1kb schema](https://github.com/mtag-dev/squall/raw/master/docs/assets/bench-dataclass-1kb.png)\n\n**30Kb schema**\n![30kb schema](https://github.com/mtag-dev/squall/raw/master/docs/assets/bench-dataclass-30kb.png)\n\n\nMore results and benchmark methodology [here](https://github.com/mtag-dev/py-rest-stress-testing)\n\n### ASAP and batching\n\nSquall following own MTAG/Squall ASAP pattern. The idea of the ASAP pattern is pretty simple to understand.\nIf you have all necessaries to do something you can do in the next steps, you should do it now.\n\nBe careful. This pattern is mind-changing.\n\nThe batch operation is always better than a lot of small ones.\n\n## Usage\n### Install\n\n```shell\npip3 install python-squall\n```\n\nYou also need some ASGI server. Let's install Uvicorn, the most popular one.\n\n```shell\npip3 install uvicorn\n```\n\n### Quick start\n\nCreate `example.py` with the following content\n\n```Python\nfrom typing import List, Optional\nfrom dataclasses import dataclass\nfrom squall import Squall\n\napp = Squall()\n\n\n@dataclass\nclass Item:\n    name: str\n    value: Optional[int] = None\n\n\n@app.get(\"/get\", response_model=List[Item])\nasync def handle_get() -> List[Item]:\n    return [\n        Item(name=\"null_value\"),\n        Item(name=\"int_value\", value=8)\n    ]\n\n\n@app.post(\"/post\", response_model=Item)\nasync def handle_post(data: Item) -> Item:\n    return data\n```\n\nAnd run it\n\n```shell\nuvicorn example:app\n```\n\nNow, we are able to surf our GET endpoint on: http://127.0.0.1:8000/get\n\nAnd let's play with `curl` on POST endpoint\n\n```shell\n# curl -X 'POST' 'http://127.0.0.1:8000/post' -H 'Content-Type: application/json' -d '{\"name\": \"string\", \"value\": 234}'\n{\n  \"name\": \"string\",\n  \"value\": 234\n}\n```\n\nType checking and validation is done by [apischema](https://wyfo.github.io/apischema/) for both, Request and Response.\n\n\n```shell\n# curl -X 'POST' 'http://127.0.0.1:8000/post' -H 'Content-Type: application/json' -d '{\"name\": \"string\", \"value\": \"not_an_int\"}'\n{\n  \"details\": [\n    {\n      \"loc\": [\n        \"value\"\n      ],\n      \"msg\": \"expected type integer, found string\"\n    },\n    {\n      \"loc\": [\n        \"value\"\n      ],\n      \"msg\": \"expected type null, found string\"\n    }\n  ]\n}\n```\n\n\n### OpenAPI generation\n\nOpenAPI for your app generates automatically based on route parameters and schema you have defined.\n\nThere are support for ReDoc and Swagger out of the box. You can reach it locally once your application started:\n\n- Swagger: http://127.0.0.1:8000/doc\n- ReDoc: http://127.0.0.1:8000/redoc\n\n![Example Get](https://github.com/mtag-dev/squall/raw/master/docs/assets/openapi-example.png)\n\n\n### Routing\n\nSquall provides familiar decorators for any method route registration on both, application itself and on nested routers.\n\n| Method   |      app      |  router * |\n|:----------|:--------------|:------|\n| GET | @app.get | @router.get |\n| PUT | @app.put   | @router.put |\n| POST | @app.post | @router.post |\n| DELETE | @app.delete | @router.delete |\n| OPTIONS | @app.options | @router.options |\n| HEAD | @app.head | @router.head |\n| PATCH | @app.patch | @router.patch |\n| TRACE | @app.trace | @router.trace |\n\n__* `router = squall.Router()`__\n\nNested routers supports prefixes and further nesting.\n\n```Python\nfrom squall import Router, Squall\n\nanimals_router = Router(prefix=\"/animals\")\n\n\n@animals_router.get(\"/\")\nasync def get_animals():\n    return []\n\n\n@animals_router.get(\"/cat\")\nasync def get_cat():\n    return []\n\ndogs_router = Router(prefix=\"/dogs\")\n\n\n@dogs_router.get(\"/list\")\nasync def get_all_dogs():\n    return []\n\n\nanimals_router.include_router(dogs_router)\n\napp = Squall()\napp.include_router(animals_router)\n```\n\nWill give us\n\n![Animals routing](https://github.com/mtag-dev/squall/raw/master/docs/assets/animals-routing.png)\n\nNested routing is usually used for splitting applications into files and achieving better project structure.\n\n### Compression\n\nSquall provides built-in blazing-fast compression based on Intel® Intelligent Storage Acceleration Library (Intel® ISA-L) using awesome Python's [isal](https://pypi.org/project/isal/) library as binding.\n\nCompared to Python's builtins ISA-L can deliver up to 20 times faster compression. Such in-app performance does game-changing opportunities for the entire system set up,\n\nIn order to enable compression you have to path compression config to Squall app\n\n```Python\nfrom squall import Squall\nfrom squall.compression import Compression\n\napp = Squall(compression=Compression())\n\n```\nFor more details check [compression settings](https://github.com/mtag-dev/squall/blob/master/squall/compression.py#L20-L47)\n\n[Accept-Encoding](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding#directives) header also required. Squall supports gzip, deflate options for it.\n\n\n\n\n### HEAD parameters\n\nThere are four kinds of parameters that developers can get from HTTP headers. Squall offers an interface for their conversion and validation.\n\n#### Path\n\n\"Path\" is a dynamic value specified by developers in the route URL.\n\n```Python\nfrom squall import Squall, Path\n\napp = Squall()\n\n\n@app.get(\"/company/{company_id}/employee/{employee_id}\")\nasync def get_company_employee(company_id: int, employee_id = Path()):\n    return {\n        \"company_id\": company_id,\n        \"employee_id\": employee_id,\n    }\n```\n\nSquall determinate affiliation of the variable with path by any of following ways:\n\n- Default parameter value is `Path` instance  \n- Parameter default name equal to route pattern\n\nSpecifics:\n- Allows only the following annotations: `str`, `bytes`, `int`, `float`\n- `Union`, `Optional`, not allowed. Because a path can't have an undefined value. Also, parameters must have a strong conversion contract.\n- If an annotation isn't set parameter will arrive as `str`\n\nShares common configuration contract for head entities. Please, read more [here](#parameters-configuration).\n\n\n#### Query\n\n\"Query\" is a way get query string parameters value(s).\n\n```Python\nfrom typing import List\nfrom squall import Squall, Query\n\napp = Squall()\n\n\n@app.get(\"/\")\nasync def get_company_employee(company_id: int = Query(), employee_ids: List[int] = Query()):\n    return {\n        \"company_id\": company_id,\n        \"employee_ids\": employee_ids,\n    }\n```\n\nSpecifics:\n- Allowed annotations: `str`, `bytes`, `int`, `float`, `Optional`, `List`\n- If it is a getting of multiple values for the same key, at the moment, [value validation](#parameters-validation) cannot be applied.\n\n#### Header\n\n\"Header\" is a way to get header value(s). Shares common behavior with Query\n\n```Python\nfrom typing import List\nfrom squall import Squall, Header\n\napp = Squall()\n\n\n@app.get(\"/\")\nasync def get_company_employee(company_id: int = Header(), employee_ids: List[int] = Header()):\n    return {\n        \"company_id\": company_id,\n        \"employee_ids\": employee_ids,\n    }\n```\n\nSpecifics:\n- Allowed annotations: `str`, `bytes`, `int`, `float`, `Optional`, `List`\n- If it is a getting of multiple values for the same key, at the moment, [value validation](#parameters-validation) cannot be applied.\n\n\n#### Cookie\n\n\"Cookie\" is a way get cookie value.\n\n```Python\nfrom typing import List\nfrom squall import Squall, Cookie\n\napp = Squall()\n\n\n@app.get(\"/\")\nasync def get_company_employee(user_id: int = Cookie()):\n    return {\n        \"user_id\": user_id,\n    }\n```\n\nSpecifics:\n- Allowed annotations: `str`, `bytes`, `int`, `float`, `Optional`\n\n\n#### Parameters configuration\n\nAll head fields share common configuration pattern which include the following list of parameters:\n\n- `default`, default value to assign\n- `alias`, replaces source key where to get the value from\n- `title`, title for schema specification\n- `description`, description for schema specification\n- `valid`, instance of validator, `squall.Num` or `squall.Str`\n- `example`, example for schema specification\n- `examples`, multiple examples for schema specification\n- `deprecated`, mark parameter as deprecated, will appear in specification\n\n\n#### Parameters validation\n\nAt the moment, Squall provides following validators that developer can apply to HEAD parameters values:\n\n- `squall.Num` - `int`, `float` validator. Following conditions are supported: `gt`, `ge`, `lt`, `le`\n- `squall.Str` - `str`, `bytes` validator. Following conditions are supported: `min_len`, `max_len`\n\nPlease, take a look at the [related test suite](https://github.com/mtag-dev/squall/blob/master/tests/test_validation/test_head_validation.py)\n\n\n### Body processing\n\nSchema defined using dataclasses behind the scene validated by awesome [apischema](https://wyfo.github.io/apischema/).\nPlease follow their documentation for build validation.\n\nThere are things strictly important to remember:\n\n#### Response serialization\n\nIf response_model is equal to the handler return annotation Squall expects exactly these types and will not perform mutations to dataclasses, etc.\nType checking will be done during serialization.\n\nHandy to save some resources working with ORM. For instance [SQL Alchemy dataclass mapping](https://docs.sqlalchemy.org/en/14/orm/mapping_styles.html#example-one-dataclasses-with-imperative-table)\n\n```Python\nfrom typing import List, Optional\nfrom dataclasses import dataclass\nfrom squall import Squall\n\napp = Squall()\n\n\n@dataclass\nclass Item:\n    name: str\n    value: Optional[int] = None\n\n\n@app.get(\"/get\", response_model=List[Item])\nasync def handle_get() -> List[Item]:\n    return [\n        Item(name=\"null_value\"),\n        Item(name=\"int_value\", value=8)\n    ]\n```\n\n#### Response deserialization-serialization\n\nThe following example demonstrates a different scenario. Where response expects to receive from handler Python primitives and Sequences/Maps only.\nWith this scenario, all response data will be processed through the filling of the relevant model.\n\n\n```Python\nfrom typing import List, Optional\nfrom dataclasses import dataclass\nfrom squall import Squall\n\napp = Squall()\n\n\n@dataclass\nclass Item:\n    name: str\n    value: Optional[int] = None\n\n\n@app.get(\"/get\", response_model=List[Item])\nasync def handle_get():\n    return [\n        {\"name\": \"null_value\"},\n        {\"name\": \"int_value\", \"value\": 8}\n    ]\n```\n\n\n### OpenTelemetry usage\n\nTo trace internal actions next packages must be installed:\n\n```buildoutcfg\npip install opentelemetry-api opentelemetry-sdk\n```\n\nHaving installed libs initial application and OpenTelemetry configuration should be performed as shown bellow:\n\n```python\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import (\n    BatchSpanProcessor,\n    ConsoleSpanExporter,\n)\nfrom squall import Squall\n\ntrace.set_tracer_provider(TracerProvider())\ntrace.get_tracer_provider().add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))\n\napp = Squall(trace_internals=True)\n\n@app.get(\"/get\")\nasync def handle_get() -> dict:\n    return {\"Hello\": \"World\"}\n```\n\nFor detailed config have a look at [Opentelemetry docs](https://opentelemetry-python.readthedocs.io/en/latest/exporter/otlp/otlp.html)\n\n\n## Acknowledgments\n\nMany thanks to [@tiangolo](https://github.com/tiangolo) and the entire [FastAPI community](https://fastapi.tiangolo.com/fastapi-people/). Squall development started from hard-forking this superior developers-friendly framework.\n\n## Roadmap\n\n`0.1.x` - Initial project publication\n\n`0.2.x` - Intel® [ISA-L](https://www.intel.com/content/www/us/en/developer/tools/isa-l/overview.html) based compression\n\n`0.3.x` - Observability based on [OpenTelemetry](https://opentelemetry.io/) with switchable Squall internals tracing.\n\n`0.4.x` - [Dependency Injector](https://python-dependency-injector.ets-labs.org/) integration\n\n`0.5.x` - [YARL](https://pypi.org/project/yarl/) and [aio-MultiDict](https://multidict.readthedocs.io/en/stable/) integration\n\n`0.6.x` - Fine-tuning for `__slots__`, LEGB, attribute access.\n\n`0.7.x` - MTAG integration\n\n`0.8.x` - Starts new SGI initiative\n\n\n\n## Dependencies\n\n### [isal](https://pypi.org/project/isal/)\n\nLicense: MIT\n\nFaster zlib and gzip compatible compression and decompression by providing python bindings for the ISA-L library.\n\n### [apischema](https://pypi.org/project/orjson/)\n\nLicense: MIT\n\nJSON (de)serialization, GraphQL and JSON schema generation using Python typing.\n\napischema makes your life easier when dealing with API data.\n\n### [orjson](https://pypi.org/project/orjson/)\n\nLicense: MIT or Apache 2.0\n\norjson is a fast, correct JSON library for Python. It benchmarks as the fastest Python library for JSON and is more correct than the standard json library or other third-party libraries. It serializes dataclass, datetime, numpy, and UUID instances natively.\n\n### [Starlette](https://www.starlette.io/)\n\nLicense: BSD 3\n\nStarlette is a lightweight ASGI framework/toolkit, which is ideal for building high performance async services.\n\n## Versioning\n\nSquall follows the next versioning contract:\n\n`AA.BB.CC`\n\n- `AA` - Major changes, backward compatibility breaks\n- `BB` - Minor changes, new features\n- `CC` - Patch, bug fixes\n\n## License\n\nMIT\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "Stanislav Dubrovskyi <s.dubrovskyi@cleverdec.com>, Vitalii Kovalchuk <naviot96@gmail.com>, Svitlana Kost <s.kost@cleverdec.com>",
    "name": "python-squall",
    "package_url": "https://pypi.org/project/python-squall/",
    "platform": "",
    "project_url": "https://pypi.org/project/python-squall/",
    "project_urls": {
      "Documentation": "https://github.com/mtag-dev/squall",
      "Source": "https://github.com/mtag-dev/squall"
    },
    "release_url": "https://pypi.org/project/python-squall/0.3.0/",
    "requires_dist": [
      "squall-router ==0.1.1",
      "starlette ==0.16.0",
      "orjson >=3.6.4,<4.0.0",
      "apischema >=0.17.0,<1.0.0",
      "isal >=0.11.1,<1.0.0",
      "requests >=2.24.0,<3.0.0 ; extra == \"all\"",
      "jinja2 >=2.11.2,<4.0.0 ; extra == \"all\"",
      "python-multipart >=0.0.5,<0.0.6 ; extra == \"all\"",
      "itsdangerous >=1.1.0,<3.0.0 ; extra == \"all\"",
      "pyyaml >=5.3.1,<6.0.0 ; extra == \"all\"",
      "orjson >=3.6.4,<4.0.0 ; extra == \"all\"",
      "email_validator >=1.1.1,<2.0.0 ; extra == \"all\"",
      "uvicorn[standard] >=0.12.0,<0.16.0 ; extra == \"all\"",
      "python-jose[cryptography] >=3.3.0,<4.0.0 ; extra == \"dev\"",
      "passlib[bcrypt] >=1.7.2,<2.0.0 ; extra == \"dev\"",
      "autoflake >=1.4.0,<2.0.0 ; extra == \"dev\"",
      "flake8 >=3.8.3,<4.0.0 ; extra == \"dev\"",
      "uvicorn[standard] >=0.12.0,<0.16.0 ; extra == \"dev\"",
      "mkdocs >=1.1.2,<2.0.0 ; extra == \"doc\"",
      "mkdocs-material >=7.1.9,<8.0.0 ; extra == \"doc\"",
      "mdx-include >=1.4.1,<2.0.0 ; extra == \"doc\"",
      "mkdocs-markdownextradata-plugin >=0.1.7,<0.3.0 ; extra == \"doc\"",
      "typer-cli >=0.0.12,<0.0.13 ; extra == \"doc\"",
      "pyyaml >=5.3.1,<6.0.0 ; extra == \"doc\"",
      "pydantic >=1.8.2,<2.0.0 ; extra == \"doc\"",
      "pytest >=6.2.4,<7.0.0 ; extra == \"test\"",
      "pytest-cov >=2.12.0,<4.0.0 ; extra == \"test\"",
      "pytest-mock >=3.6.1,<4.0.0 ; extra == \"test\"",
      "mypy ==0.910 ; extra == \"test\"",
      "flake8 >=3.8.3,<4.0.0 ; extra == \"test\"",
      "black ==21.9b0 ; extra == \"test\"",
      "isort >=5.0.6,<6.0.0 ; extra == \"test\"",
      "requests >=2.24.0,<3.0.0 ; extra == \"test\"",
      "httpx >=0.14.0,<0.19.0 ; extra == \"test\"",
      "email_validator >=1.1.1,<2.0.0 ; extra == \"test\"",
      "sqlalchemy >=1.3.18,<1.5.0 ; extra == \"test\"",
      "peewee >=3.13.3,<4.0.0 ; extra == \"test\"",
      "databases[sqlite] >=0.3.2,<0.6.0 ; extra == \"test\"",
      "python-multipart >=0.0.5,<0.0.6 ; extra == \"test\"",
      "flask >=1.1.2,<3.0.0 ; extra == \"test\"",
      "anyio[trio] >=3.2.1,<4.0.0 ; extra == \"test\"",
      "types-orjson ==3.6.0 ; extra == \"test\"",
      "types-dataclasses ==0.1.7 ; extra == \"test\" and ( python_version<'3.7')"
    ],
    "requires_python": ">=3.9.0",
    "summary": "Squall ASGI REST framework",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12446323,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5999646f69ab61373fad318fc1658a7f1a5e4e124da4aa81f8ecb84fe5a3102",
          "md5": "f2af5e77c3158eb042aa0e56d495bb9d",
          "sha256": "4673bff570bece3125d6ac3c4a30a14159d7daafa03f12f4552b58b45a2a83de"
        },
        "downloads": -1,
        "filename": "python_squall-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2af5e77c3158eb042aa0e56d495bb9d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9.0",
        "size": 47134,
        "upload_time": "2021-12-05T15:37:33",
        "upload_time_iso_8601": "2021-12-05T15:37:33.777725Z",
        "url": "https://files.pythonhosted.org/packages/b5/99/9646f69ab61373fad318fc1658a7f1a5e4e124da4aa81f8ecb84fe5a3102/python_squall-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "980e154dca8bc73ecb5b35b1d85093b9669bb9a8e4abc383f5471a8134ec162f",
          "md5": "687c8349375860bf4079ee317efeec64",
          "sha256": "692f4100ebef14622530469c6fb5f5425038d08ae88d452a48fbb8cd21c6052a"
        },
        "downloads": -1,
        "filename": "python-squall-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "687c8349375860bf4079ee317efeec64",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9.0",
        "size": 5548479,
        "upload_time": "2021-12-05T15:37:40",
        "upload_time_iso_8601": "2021-12-05T15:37:40.822361Z",
        "url": "https://files.pythonhosted.org/packages/98/0e/154dca8bc73ecb5b35b1d85093b9669bb9a8e4abc383f5471a8134ec162f/python-squall-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bdcb0f368e2b96d9363f740de0625f8d2add6c7495b58197c0ca6eee51bb0568",
          "md5": "8c0bb3cabb855514dee8ac358bdd59c8",
          "sha256": "1fc74767227ef589bc80fda41d11dc04c2105ba52c9718b236d3378a34c889f1"
        },
        "downloads": -1,
        "filename": "python_squall-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c0bb3cabb855514dee8ac358bdd59c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9.0",
        "size": 48519,
        "upload_time": "2021-12-12T16:25:03",
        "upload_time_iso_8601": "2021-12-12T16:25:03.216404Z",
        "url": "https://files.pythonhosted.org/packages/bd/cb/0f368e2b96d9363f740de0625f8d2add6c7495b58197c0ca6eee51bb0568/python_squall-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9539af9e9978b16cb849b97e7b5a452170d81562a929fc2bd7a3b788815b42fb",
          "md5": "d6b98321cd7a3c54c18aae3ea403d6d4",
          "sha256": "a42c36abc1c4a122a4e5e708792602f875bdb8903b3e4d777f8339e05e2c6d5f"
        },
        "downloads": -1,
        "filename": "python-squall-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d6b98321cd7a3c54c18aae3ea403d6d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9.0",
        "size": 5551246,
        "upload_time": "2021-12-12T16:25:10",
        "upload_time_iso_8601": "2021-12-12T16:25:10.210677Z",
        "url": "https://files.pythonhosted.org/packages/95/39/af9e9978b16cb849b97e7b5a452170d81562a929fc2bd7a3b788815b42fb/python-squall-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d5cee640043a8973badf306bddbf5589053c55325627ffb55f655c73c0c5c4a7",
          "md5": "6f352068fb385d5931b1dd69e5ffdb89",
          "sha256": "dcdfc344fa2769110858f005562597552233cda1d0e0c7810f8a2f93bca50c7e"
        },
        "downloads": -1,
        "filename": "python_squall-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6f352068fb385d5931b1dd69e5ffdb89",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9.0",
        "size": 51936,
        "upload_time": "2021-12-31T08:27:31",
        "upload_time_iso_8601": "2021-12-31T08:27:31.368385Z",
        "url": "https://files.pythonhosted.org/packages/d5/ce/e640043a8973badf306bddbf5589053c55325627ffb55f655c73c0c5c4a7/python_squall-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff34f666b2472ad6095ee22f5cb7633bdc6691611b35e1c94486fba7cf7d1ca9",
          "md5": "20cbf00acc725e6a2bc07a350e35a375",
          "sha256": "12a5c5cdb63051982b761abc0ea5ac7ce16c01370922256cbd5185ec221f8a0d"
        },
        "downloads": -1,
        "filename": "python-squall-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "20cbf00acc725e6a2bc07a350e35a375",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9.0",
        "size": 5548884,
        "upload_time": "2021-12-31T08:27:49",
        "upload_time_iso_8601": "2021-12-31T08:27:49.740007Z",
        "url": "https://files.pythonhosted.org/packages/ff/34/f666b2472ad6095ee22f5cb7633bdc6691611b35e1c94486fba7cf7d1ca9/python-squall-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d5cee640043a8973badf306bddbf5589053c55325627ffb55f655c73c0c5c4a7",
        "md5": "6f352068fb385d5931b1dd69e5ffdb89",
        "sha256": "dcdfc344fa2769110858f005562597552233cda1d0e0c7810f8a2f93bca50c7e"
      },
      "downloads": -1,
      "filename": "python_squall-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6f352068fb385d5931b1dd69e5ffdb89",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9.0",
      "size": 51936,
      "upload_time": "2021-12-31T08:27:31",
      "upload_time_iso_8601": "2021-12-31T08:27:31.368385Z",
      "url": "https://files.pythonhosted.org/packages/d5/ce/e640043a8973badf306bddbf5589053c55325627ffb55f655c73c0c5c4a7/python_squall-0.3.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff34f666b2472ad6095ee22f5cb7633bdc6691611b35e1c94486fba7cf7d1ca9",
        "md5": "20cbf00acc725e6a2bc07a350e35a375",
        "sha256": "12a5c5cdb63051982b761abc0ea5ac7ce16c01370922256cbd5185ec221f8a0d"
      },
      "downloads": -1,
      "filename": "python-squall-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "20cbf00acc725e6a2bc07a350e35a375",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9.0",
      "size": 5548884,
      "upload_time": "2021-12-31T08:27:49",
      "upload_time_iso_8601": "2021-12-31T08:27:49.740007Z",
      "url": "https://files.pythonhosted.org/packages/ff/34/f666b2472ad6095ee22f5cb7633bdc6691611b35e1c94486fba7cf7d1ca9/python-squall-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}