{
  "info": {
    "author": "Carlos Alexis Gomez Ruiz",
    "author_email": "alexis@portermetrics.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "===========\nPorter CLI\n===========\n\n.. image:: https://camo.githubusercontent.com/247df727afd21bc86b1e63bdc5e465092e46b1c4d5b78c2e40447a59f8247313/68747470733a2f2f63646e632e696d6768617374652e636f6d2f706f727465726d6574726963732e636f6d2f77702d636f6e74656e742f75706c6f6164732f323032302f30362f6c6f676f2d636c6f75642d6461726b2e706e67\n   :target: https://portermetrics.com\n   :alt: Porter Logo\n\n\nPorter is a chalice framework adapted to porter requirements for writing serverless apps in python. It allows\nyou to quickly create and deploy applications that use AWS Lambda and Dockers.  It provides:\n\n* A command line tool for creating, deploying, and managing your app\n* A decorator based API for integrating with Amazon API Gateway, Amazon S3,\n  Amazon SNS, Amazon SQS, and other AWS services.\n* Automatic IAM policy generation\n\n\nYou can create Rest APIs:\n\n.. code-block:: python\n\n    from porter import Porter\n\n    app = Porter(app_name=\"helloworld\")\n\n    @app.route(\"/\")\n    def index():\n        return {\"hello\": \"world\"}\n\nTasks that run on a periodic basis:\n\n.. code-block:: python\n\n    from porter import Porter, Rate\n\n    app = Porter(app_name=\"helloworld\")\n\n    # Automatically runs every 5 minutes\n    @app.schedule(Rate(5, unit=Rate.MINUTES))\n    def periodic_task(event):\n        return {\"hello\": \"world\"}\n\n\nYou can connect a lambda function to an S3 event:\n\n.. code-block:: python\n\n    from porter import Porter\n\n    app = Porter(app_name=\"helloworld\")\n\n    # Whenever an object is uploaded to 'mybucket'\n    # this lambda function will be invoked.\n\n    @app.on_s3_event(bucket='mybucket')\n    def handler(event):\n        print(\"Object uploaded for bucket: %s, key: %s\"\n              % (event.bucket, event.key))\n\nAs well as an SQS queue:\n\n.. code-block:: python\n\n    from porter import Porter\n\n    app = Porter(app_name=\"helloworld\")\n\n    # Invoke this lambda function whenever a message\n    # is sent to the ``my-queue-name`` SQS queue.\n\n    @app.on_sqs_message(queue='my-queue-name')\n    def handler(event):\n        for record in event:\n            print(\"Message body: %s\" % record.body)\n\n\nAnd several other AWS resources.\n\nOnce you've written your code, you just run ``porter deploy``\nand Porter takes care of deploying your app.\n\n::\n\n    $ porter deploy\n    ...\n    https://endpoint/dev\n\n    $ curl https://endpoint/api\n    {\"hello\": \"world\"}\n\nUp and running in less than 30 seconds.\nGive this project a try and share your feedback with us here on Github.\n\nThe documentation is available\n`here <http://aws.github.io/porter/>`__.\n\nQuickstart\n==========\n\n.. quick-start-begin\n\nIn this tutorial, you'll use the ``porter`` command line utility\nto create and deploy a basic REST API.  This quickstart uses Python 3.8,\nPorter doesn't supports all versions of python supported by AWS Lambda,\nonly supports python3.8.\nYou can find the latest versions of python on the\n`Python download page <https://www.python.org/downloads/>`_.\n\nTo install Porter, we'll first create and activate a virtual environment\nin python3.8::\n\n    $ python3 --version\n    Python 3.8.0\n    $ python3 -m venv venv38\n    $ . venv38/bin/activate\n\nNext we'll install Porter using ``pip``::\n\n    $ python3 -m pip install porter-cli\n\nYou can verify you have porter installed by running::\n\n    $ porter --help\n    Usage: porter [OPTIONS] COMMAND [ARGS]...\n    ...\n\n\nCredentials\n-----------\n\nBefore you can deploy an application, be sure you have\ncredentials configured.  If you have previously configured your\nmachine to run boto3 (the AWS SDK for Python) or the AWS CLI then\nyou can skip this section.\n\nIf this is your first time configuring credentials for AWS you\ncan follow these steps to quickly get started::\n\n    $ mkdir ~/.aws\n    $ cat >> ~/.aws/config\n    [default]\n    aws_access_key_id=YOUR_ACCESS_KEY_HERE\n    aws_secret_access_key=YOUR_SECRET_ACCESS_KEY\n    region=YOUR_REGION (such as us-west-2, us-west-1, etc)\n\nIf you want more information on all the supported methods for\nconfiguring credentials, see the\n`boto3 docs\n<http://boto3.readthedocs.io/en/latest/guide/configuration.html>`__.\n\n\nCreating Your Project\n---------------------\n\nThe next thing we'll do is use the ``porter`` command to create a new\nproject::\n\n    $ porter new-project helloworld\n\nThis will create a ``helloworld`` directory.  Cd into this\ndirectory.  You'll see several files have been created for you::\n\n    $ cd helloworld\n    $ ls -la\n    drwxr-xr-x   .porter\n    -rw-r--r--   app.py\n    -rw-r--r--   requirements.txt\n\nYou can ignore the ``.chalice`` directory for now, the two main files\nwe'll focus on is ``app.py`` and ``requirements.txt``.\n\nLet's take a look at the ``app.py`` file:\n\n.. code-block:: python\n\n    from porter import Porter\n\n    app = Porter(app_name='helloworld')\n\n\n    @app.route('/')\n    def index():\n        return {'hello': 'world'}\n\n\nThe ``new-project`` command created a sample app that defines a\nsingle view, ``/``, that when called will return the JSON body\n``{\"hello\": \"world\"}``.\n\n\nDeploying\n---------\n\nLet's deploy this app.  Make sure you're in the ``helloworld``\ndirectory and run ``porter deploy``::\n\n    $ porter deploy\n    Creating deployment package.\n    Creating IAM role: helloworld-dev\n    Creating lambda function: helloworld-dev\n    Creating Rest API\n    Resources deployed:\n      - Lambda ARN: arn:aws:lambda:us-west-2:12345:function:helloworld-dev\n      - Rest API URL: https://abcd.execute-api.us-west-2.amazonaws.com/api/\n\nYou now have an API up and running using API Gateway and Lambda::\n\n    $ curl https://qxea58oupc.execute-api.us-west-2.amazonaws.com/api/\n    {\"hello\": \"world\"}\n\nTry making a change to the returned dictionary from the ``index()``\nfunction.  You can then redeploy your changes by running ``porter deploy``.\n\n.. quick-start-end\n\nNext Steps\n----------\n\nYou've now created your first app using ``porter``.  You can make\nmodifications to your ``app.py`` file and rerun ``porter deploy`` to\nredeploy your changes.\n\nAt this point, there are several next steps you can take.\n\n* `Tutorials <https://aws.github.io/porter/tutorials/index.html>`__\n  - Choose from among several guided tutorials that will\n  give you step-by-step examples of various features of Porter.\n* `Topics <https://aws.github.io/porter/topics/index.html>`__ - Deep\n  dive into documentation on specific areas of Porter.\n  This contains more detailed documentation than the tutorials.\n* `API Reference <https://aws.github.io/porter/api.html>`__ - Low level\n  reference documentation on all the classes and methods that are part of the\n  public API of Porter.\n\nIf you're done experimenting with Porter and you'd like to cleanup, you can\nuse the ``porter delete`` command, and Porter will delete all the resources\nit created when running the ``porter deploy`` command.\n\n::\n\n    $ porter delete\n    Deleting Rest API: abcd4kwyl4\n    Deleting function aws:arn:lambda:region:123456789:helloworld-dev\n    Deleting IAM Role helloworld-dev\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "https://github.com/portermetrics/porter_cli/archive/1.0.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/portermetrics/porter_cli",
    "keywords": "",
    "license": "Proprietary License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "porter-cli",
    "package_url": "https://pypi.org/project/porter-cli/",
    "platform": "",
    "project_url": "https://pypi.org/project/porter-cli/",
    "project_urls": {
      "Download": "https://github.com/portermetrics/porter_cli/archive/1.0.0.tar.gz",
      "Homepage": "https://github.com/portermetrics/porter_cli"
    },
    "release_url": "https://pypi.org/project/porter-cli/1.0.6/",
    "requires_dist": [
      "chalice",
      "click (<8.0,>=7)",
      "botocore"
    ],
    "requires_python": ">=3.8",
    "summary": "A simple command line app for managing and deploying taps projects",
    "version": "1.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10942227,
  "releases": {
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1735b6f066fda9abd97e3797c4bb02eed142acf6c5270227d06ff6e34127361b",
          "md5": "35ca38249b1c04faee114126779f283d",
          "sha256": "2cc4366e69aa15b00da74c392b168819f2fc6b415532996ad606050b8ff30303"
        },
        "downloads": -1,
        "filename": "porter_cli-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35ca38249b1c04faee114126779f283d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 5693,
        "upload_time": "2021-07-19T01:09:15",
        "upload_time_iso_8601": "2021-07-19T01:09:15.479840Z",
        "url": "https://files.pythonhosted.org/packages/17/35/b6f066fda9abd97e3797c4bb02eed142acf6c5270227d06ff6e34127361b/porter_cli-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bbfdef1cf462c1c36983cb1e62714f9077434d6a25fe621f4327ef6314ae80fa",
          "md5": "45f0cc0ec1aa8f6fecfe28678662d039",
          "sha256": "7cbfee29df90169b1f832bdb1937b83c0c879f6f10bf46ca10c45c22d583f201"
        },
        "downloads": -1,
        "filename": "porter-cli-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "45f0cc0ec1aa8f6fecfe28678662d039",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7094,
        "upload_time": "2021-07-19T01:09:17",
        "upload_time_iso_8601": "2021-07-19T01:09:17.228272Z",
        "url": "https://files.pythonhosted.org/packages/bb/fd/ef1cf462c1c36983cb1e62714f9077434d6a25fe621f4327ef6314ae80fa/porter-cli-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1735b6f066fda9abd97e3797c4bb02eed142acf6c5270227d06ff6e34127361b",
        "md5": "35ca38249b1c04faee114126779f283d",
        "sha256": "2cc4366e69aa15b00da74c392b168819f2fc6b415532996ad606050b8ff30303"
      },
      "downloads": -1,
      "filename": "porter_cli-1.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "35ca38249b1c04faee114126779f283d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 5693,
      "upload_time": "2021-07-19T01:09:15",
      "upload_time_iso_8601": "2021-07-19T01:09:15.479840Z",
      "url": "https://files.pythonhosted.org/packages/17/35/b6f066fda9abd97e3797c4bb02eed142acf6c5270227d06ff6e34127361b/porter_cli-1.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bbfdef1cf462c1c36983cb1e62714f9077434d6a25fe621f4327ef6314ae80fa",
        "md5": "45f0cc0ec1aa8f6fecfe28678662d039",
        "sha256": "7cbfee29df90169b1f832bdb1937b83c0c879f6f10bf46ca10c45c22d583f201"
      },
      "downloads": -1,
      "filename": "porter-cli-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "45f0cc0ec1aa8f6fecfe28678662d039",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 7094,
      "upload_time": "2021-07-19T01:09:17",
      "upload_time_iso_8601": "2021-07-19T01:09:17.228272Z",
      "url": "https://files.pythonhosted.org/packages/bb/fd/ef1cf462c1c36983cb1e62714f9077434d6a25fe621f4327ef6314ae80fa/porter-cli-1.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}