{
  "info": {
    "author": "Christer Dreierstad",
    "author_email": "christerdr@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# run-torch-model\nSimple program to run a pytorch compatible model. Includes a tools function which has support for creating dataloader objects required for training/testing/validation.\n\n# Requirements\n- torch\n- torchmetrics\n- scikit-learn\n\n# Install \nInstall using pip:\n```\npip install run-torch-model\n```\n\n# Usage\nUse create_dataloader to initiate datasets for training and testing:\n```\nfrom run_torch_model import create_dataloader\n\ndataloader_train, dataloader_test = create_dataloader(features=features, \n                                                      targets=targets,\n                                                      batch_size=batch_size,\n                                                      train_size=train_size,\n                                                      test_size=test_size)\n```\n\nTo run a model we define the optimizer, its arguments and a criterion, feed into the class and perform a call for training.\n\n```\nimport torch\nfrom run_torch_model import RunTorchNN\n\noptimizer = 'torch.optim.Adam'  # Must be string, if CUDA we initiate the optimizer after calling .cuda for speed-up\noptimizer_args = {'lr': 0.001'} # Initialize some arguments for the optimizer\ncriterion = torch.nn.MSELoss()\n\nrun_model = RunTorchNN(model, # Some pytorch model\n                          epochs=100, \n                          optimizer=optimizer,\n                          optimizer_args=optimizer_args,\n                          dataloaders=(dataloader_train, dataloader_test), \n                          criterion=criterion)\n \nrun_model() # Executes the training\n```\n\nTo fetch metrics:\n```\nR2 = run_model.get_r2score()\nloss = run_model.get_average_loss()\n```\n\nTo evaluate the trained model on a different set of features:\n```\npredictions, loss = run_model.predict(new_features)\n```\n\nTo evaluate the model on a validation set:\n```\nloss, r2 = run_model.evaluate(dataloader_validation)\npredictions = run_model.get_predictions()  # To get predictions, if necessary \n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chdre/run-torch-model",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "run-torch-model",
    "package_url": "https://pypi.org/project/run-torch-model/",
    "platform": "",
    "project_url": "https://pypi.org/project/run-torch-model/",
    "project_urls": {
      "Homepage": "https://github.com/chdre/run-torch-model"
    },
    "release_url": "https://pypi.org/project/run-torch-model/1.0.2/",
    "requires_dist": [
      "torch",
      "torchmetrics",
      "scikit-learn"
    ],
    "requires_python": ">=3.6",
    "summary": "Package for training and evaluating neural network models made using pytorch",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12858966,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f1fac9987bafdbe16ff5b3321d826cf2b97b16eddc3f1af6b1a073213420b97",
          "md5": "ed42aa88b5b98c05d347dbda9af68be9",
          "sha256": "ca15c26bfcaddb4cbf57a49b233d0c62b6aee3553f916ff1be334149f2545875"
        },
        "downloads": -1,
        "filename": "run_torch_model-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed42aa88b5b98c05d347dbda9af68be9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8503,
        "upload_time": "2022-02-10T13:36:25",
        "upload_time_iso_8601": "2022-02-10T13:36:25.651092Z",
        "url": "https://files.pythonhosted.org/packages/5f/1f/ac9987bafdbe16ff5b3321d826cf2b97b16eddc3f1af6b1a073213420b97/run_torch_model-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c70cc347c314dcc59d48e2dc60e1ade2d7a0d77f62afd6ec7710180c46ea6402",
          "md5": "25af0fbc61f711e053fbb1b9ab965950",
          "sha256": "87a9c052970b00f940fcfa17c4acd5c86f447330678f8f457d1a070bb7130d11"
        },
        "downloads": -1,
        "filename": "run_torch_model-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "25af0fbc61f711e053fbb1b9ab965950",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7905,
        "upload_time": "2022-02-10T13:36:28",
        "upload_time_iso_8601": "2022-02-10T13:36:28.209859Z",
        "url": "https://files.pythonhosted.org/packages/c7/0c/c347c314dcc59d48e2dc60e1ade2d7a0d77f62afd6ec7710180c46ea6402/run_torch_model-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f1fac9987bafdbe16ff5b3321d826cf2b97b16eddc3f1af6b1a073213420b97",
        "md5": "ed42aa88b5b98c05d347dbda9af68be9",
        "sha256": "ca15c26bfcaddb4cbf57a49b233d0c62b6aee3553f916ff1be334149f2545875"
      },
      "downloads": -1,
      "filename": "run_torch_model-1.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ed42aa88b5b98c05d347dbda9af68be9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8503,
      "upload_time": "2022-02-10T13:36:25",
      "upload_time_iso_8601": "2022-02-10T13:36:25.651092Z",
      "url": "https://files.pythonhosted.org/packages/5f/1f/ac9987bafdbe16ff5b3321d826cf2b97b16eddc3f1af6b1a073213420b97/run_torch_model-1.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c70cc347c314dcc59d48e2dc60e1ade2d7a0d77f62afd6ec7710180c46ea6402",
        "md5": "25af0fbc61f711e053fbb1b9ab965950",
        "sha256": "87a9c052970b00f940fcfa17c4acd5c86f447330678f8f457d1a070bb7130d11"
      },
      "downloads": -1,
      "filename": "run_torch_model-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "25af0fbc61f711e053fbb1b9ab965950",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7905,
      "upload_time": "2022-02-10T13:36:28",
      "upload_time_iso_8601": "2022-02-10T13:36:28.209859Z",
      "url": "https://files.pythonhosted.org/packages/c7/0c/c347c314dcc59d48e2dc60e1ade2d7a0d77f62afd6ec7710180c46ea6402/run_torch_model-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}