{
  "info": {
    "author": "Parviz Khavari",
    "author_email": "me@parviz.pw",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "===========\nconvclasses\n===========\n\n.. image:: https://img.shields.io/github/workflow/status/zeburek/convclasses/Test%20package/master\n    :target: https://github.com/zeburek/convclasses/actions\n\n.. image:: https://badge.fury.io/py/convclasses.svg\n    :target: https://badge.fury.io/py/convclasses\n\n.. image:: https://img.shields.io/pypi/dm/convclasses.svg\n    :target: https://pypi.python.org/pypi/convclasses/\n\n.. image:: https://img.shields.io/pypi/l/convclasses.svg\n    :target: https://pypi.python.org/pypi/convclasses/\n\n.. image:: https://img.shields.io/pypi/pyversions/convclasses.svg\n    :target: https://pypi.python.org/pypi/convclasses/\n\n.. image:: https://readthedocs.org/projects/convclasses/badge/?version=stable\n    :target: https://convclasses.readthedocs.io/en/stable/\n\n\n----\n\n``convclasses`` is an open source Python library for structuring and unstructuring\ndata. ``convclasses`` works best with ``dataclasses`` classes and the usual Python\ncollections, but other kinds of classes are supported by manually registering\nconverters.\n\nPython has a rich set of powerful, easy to use, built-in data types like\ndictionaries, lists and tuples. These data types are also the lingua franca\nof most data serialization libraries, for formats like json, msgpack, yaml or\ntoml.\n\nData types like this, and mappings like ``dict`` s in particular, represent\nunstructured data. Your data is, in all likelihood, structured: not all\ncombinations of field names are values are valid inputs to your programs. In\nPython, structured data is better represented with classes and enumerations.\n``dataclasses`` is an excellent library for declaratively describing the structure of\nyour data, and validating it.\n\nWhen you're handed unstructured data (by your network, file system, database...),\n``convclasses`` helps to convert this data into structured data. When you have to\nconvert your structured data into data types other libraries can handle,\n``convclasses`` turns your classes and enumerations into dictionaries, integers and\nstrings.\n\nHere's a simple taste. The list containing a float, an int and a string\ngets converted into a tuple of three ints.\n\n.. code-block:: python\n\n    >>> import convclasses\n    >>> from typing import Tuple\n    >>>\n    >>> convclasses.structure([1.0, 2, \"3\"], Tuple[int, int, int])\n    (1, 2, 3)\n\n``convclasses`` works well with ``dataclasses`` classes out of the box.\n\n.. code-block:: python\n\n    >>> import convclasses\n    >>> from dataclasses import dataclass\n    >>> from typing import Any\n    >>> @dataclass(frozen=True)  # It works with normal classes too.\n    ... class C:\n    ...     a: Any\n    ...     b: Any\n    ...\n    >>> instance = C(1, 'a')\n    >>> convclasses.unstructure(instance)\n    {'a': 1, 'b': 'a'}\n    >>> convclasses.structure({'a': 1, 'b': 'a'}, C)\n    C(a=1, b='a')\n\nHere's a much more complex example, involving ``dataclasses`` classes with type\nmetadata.\n\n.. code-block:: python\n\n    >>> from enum import unique, Enum\n    >>> from typing import Any, List, Optional, Sequence, Union\n    >>> from convclasses import structure, unstructure\n    >>> from dataclasses import dataclass\n    >>>\n    >>> @unique\n    ... class CatBreed(Enum):\n    ...     SIAMESE = \"siamese\"\n    ...     MAINE_COON = \"maine_coon\"\n    ...     SACRED_BIRMAN = \"birman\"\n    ...\n    >>> @dataclass\n    ... class Cat:\n    ...     breed: CatBreed\n    ...     names: Sequence[str]\n    ...\n    >>> @dataclass\n    ... class DogMicrochip:\n    ...     chip_id: Any\n    ...     time_chipped: float\n    ...\n    >>> @dataclass\n    ... class Dog:\n    ...     cuteness: int\n    ...     chip: Optional[DogMicrochip]\n    ...\n    >>> p = unstructure([Dog(cuteness=1, chip=DogMicrochip(chip_id=1, time_chipped=10.0)),\n    ...                  Cat(breed=CatBreed.MAINE_COON, names=('Fluffly', 'Fluffer'))])\n    ...\n    >>> print(p)\n    [{'cuteness': 1, 'chip': {'chip_id': 1, 'time_chipped': 10.0}}, {'breed': 'maine_coon', 'names': ('Fluffly', 'Fluffer')}]\n    >>> print(structure(p, List[Union[Dog, Cat]]))\n    [Dog(cuteness=1, chip=DogMicrochip(chip_id=1, time_chipped=10.0)), Cat(breed=<CatBreed.MAINE_COON: 'maine_coon'>, names=['Fluffly', 'Fluffer'])]\n\nConsider unstructured data a low-level representation that needs to be converted\nto structured data to be handled, and use ``structure``. When you're done,\n``unstructure`` the data to its unstructured form and pass it along to another\nlibrary or module. Use `dataclasses type metadata <https://docs.python.org/3/library/dataclasses.html>`_\nto add type metadata to attributes, so ``convclasses`` will know how to structure and\ndestructure them.\n\n* Free software: MIT license\n* Documentation: https://convclasses.readthedocs.io.\n* Python versions supported: 3.7 and up.\n\n\nFeatures\n--------\n\n* Converts structured data into unstructured data, recursively:\n\n  * ``dataclasses`` classes are converted into dictionaries in a way similar to ``dataclasses.asdict``,\n    or into tuples in a way similar to ``dataclasses.astuple``.\n  * Enumeration instances are converted to their values.\n  * Other types are let through without conversion. This includes types such as\n    integers, dictionaries, lists and instances of non-``dataclasses`` classes.\n  * Custom converters for any type can be registered using ``register_unstructure_hook``.\n\n* Converts unstructured data into structured data, recursively, according to\n  your specification given as a type. The following types are supported:\n\n  * ``typing.Optional[T]``.\n  * ``typing.List[T]``, ``typing.MutableSequence[T]``, ``typing.Sequence[T]`` (converts to a list).\n  * ``typing.Tuple`` (both variants, ``Tuple[T, ...]`` and ``Tuple[X, Y, Z]``).\n  * ``typing.MutableSet[T]``, ``typing.Set[T]`` (converts to a set).\n  * ``typing.FrozenSet[T]`` (converts to a frozenset).\n  * ``typing.Dict[K, V]``, ``typing.MutableMapping[K, V]``, ``typing.Mapping[K, V]`` (converts to a dict).\n  * ``dataclasses`` classes with simple attributes and the usual ``__init__``.\n\n    * Simple attributes are attributes that can be assigned unstructured data,\n      like numbers, strings, and collections of unstructured data.\n\n  * All `dataclasses` classes with the usual ``__init__``, if their complex attributes\n    have type metadata.\n  * ``typing.Union`` s of supported ``dataclasses`` classes, given that all of the classes\n    have a unique field.\n  * ``typing.Union`` s of anything, given that you provide a disambiguation\n    function for it.\n  * Custom converters for any type can be registered using ``register_structure_hook``.\n\nCredits\n-------\n\nMajor credits and best wishes for the original creator of this concept - Tinche_,\nhe developed cattrs_ which this project is fork of.\n\nMajor credits to Hynek Schlawack for creating attrs_ and its predecessor,\ncharacteristic_.\n\n``convclasses`` is tested with Hypothesis_, by David R. MacIver.\n\n``convclasses`` is benchmarked using perf_, by Victor Stinner.\n\n.. _attrs: https://github.com/hynek/attrs\n.. _characteristic: https://github.com/hynek/characteristic\n.. _Hypothesis: http://hypothesis.readthedocs.io/en/latest/\n.. _perf: https://github.com/haypo/perf\n.. _cattrs: https://github.com/Tinche/cattrs\n.. _Tinche: https://github.com/Tinche\n\n\n=======\nHistory\n=======\n\n2.0.0\n------------------\n* Add support for modifiers\n    * Add dataclass field name modifier\n* Add support for generic types (ported from cattrs)\n\n1.1.0\n------------------\n* Removed Python 3.6 support\n* Added Python 3.9 support\n\n1.0.0\n------------------\n* Rename ``cattrs`` into ``conclasses``\n* Move convclasses from ``attrs`` usage onto ``dataclasses``\n* Fix incorrect structuring/unstructuring of private fields\n* Change ``pendulum`` in docs onto ``arrow``\n\ncattrs history\n==============\n\n0.9.1 (2019-10-26)\n------------------\n* Python 3.8 support.\n\n0.9.0 (2018-07-22)\n------------------\n* Python 3.7 support.\n\n0.8.1 (2018-06-19)\n------------------\n* The disambiguation function generator now supports unions of ``attrs`` classes and NoneType.\n\n0.8.0 (2018-04-14)\n------------------\n* Distribution fix.\n\n0.7.0 (2018-04-12)\n------------------\n\n* Removed the undocumented ``Converter.unstruct_strat`` property setter.\n* Removed the ability to set the ``Converter.structure_attrs`` instance field.\n  As an alternative, create a new ``Converter``:\n\n.. code-block:: python\n\n    >>> converter = cattr.Converter(unstruct_strat=cattr.UnstructureStrategy.AS_TUPLE)\n\n* Some micro-optimizations were applied; a ``structure(unstructure(obj))`` roundtrip\n  is now up to 2 times faster.\n\n0.6.0 (2017-12-25)\n------------------\n* Packaging fixes.\n  (`#17 <https://github.com/Tinche/cattrs/pull/17>`_)\n\n0.5.0 (2017-12-11)\n------------------\n\n* structure/unstructure now supports using functions as well as classes for deciding the appropriate function.\n* added `Converter.register_structure_hook_func`, to register a function instead of a class for determining handler func.\n* added `Converter.register_unstructure_hook_func`, to register a function instead of a class for determining handler func.\n* vendored typing is no longer needed, nor provided.\n* Attributes with default values can now be structured if they are missing in the input.\n  (`#15 <https://github.com/Tinche/cattrs/pull/15>`_)\n* `Optional` attributes can no longer be structured if they are missing in the input.\n\nIn other words, this no longer works:\n\n.. code-block:: python\n\n    @attr.s\n    class A:\n        a: Optional[int] = attr.ib()\n\n    >>> cattr.structure({}, A)\n\n* ``cattr.typed`` removed since the functionality is now present in ``attrs`` itself.\n  Replace instances of ``cattr.typed(type)`` with ``attr.ib(type=type)``.\n\n0.4.0 (2017-07-17)\n------------------\n\n* `Converter.loads` is now `Converter.structure`, and `Converter.dumps` is now `Converter.unstructure`.\n* Python 2.7 is supported.\n* Moved ``cattr.typing`` to ``cattr.vendor.typing`` to support different vendored versions of typing.py for Python 2 and Python 3.\n* Type metadata can be added to ``attrs`` classes using ``cattr.typed``.\n\n\n0.3.0 (2017-03-18)\n------------------\n\n* Python 3.4 is no longer supported.\n* Introduced ``cattr.typing`` for use with Python versions 3.5.2 and 3.6.0.\n* Minor changes to work with newer versions of ``typing``.\n\n  * Bare Optionals are not supported any more (use ``Optional[Any]``).\n\n* Attempting to load unrecognized classes will result in a ValueError, and a helpful message to register a loads hook.\n* Loading ``attrs`` classes is now documented.\n* The global converter is now documented.\n* ``cattr.loads_attrs_fromtuple`` and ``cattr.loads_attrs_fromdict`` are now exposed.\n\n\n0.2.0 (2016-10-02)\n------------------\n\n* Tests and documentation.\n\n0.1.0 (2016-08-13)\n------------------\n\n* First release on PyPI.\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zeburek/convclasses",
    "keywords": "convclasses",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "convclasses",
    "package_url": "https://pypi.org/project/convclasses/",
    "platform": "",
    "project_url": "https://pypi.org/project/convclasses/",
    "project_urls": {
      "Homepage": "https://github.com/zeburek/convclasses"
    },
    "release_url": "https://pypi.org/project/convclasses/2.0.0/",
    "requires_dist": [
      "bumpversion ; extra == 'dev'",
      "wheel ; extra == 'dev'",
      "watchdog ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "coverage ; extra == 'dev'",
      "Sphinx ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "hypothesis ; extra == 'dev'",
      "arrow ; extra == 'dev'",
      "isort ; extra == 'dev'",
      "black ; extra == 'dev'"
    ],
    "requires_python": "~=3.7",
    "summary": "Complex custom class converters for dataclasses",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8621736,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8ae8f2b14900f814f7ef4850ffe0f161df0d2e166b1d9a42fe5b4d20ea3fa6f",
          "md5": "642986e304613963e49206be056e6c1c",
          "sha256": "9abdea84534f42217d9a85ad1fcfee505b4cf6fcdb5578013ad75739c1b89118"
        },
        "downloads": -1,
        "filename": "convclasses-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "642986e304613963e49206be056e6c1c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 14737,
        "upload_time": "2019-12-02T19:20:12",
        "upload_time_iso_8601": "2019-12-02T19:20:12.462236Z",
        "url": "https://files.pythonhosted.org/packages/f8/ae/8f2b14900f814f7ef4850ffe0f161df0d2e166b1d9a42fe5b4d20ea3fa6f/convclasses-1.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e90e39b9771dc55d54d4f99a76c01000232a60e8e413a0b0a27202a94960f21d",
          "md5": "650d8d91df53850b9ecd1f5291b309c9",
          "sha256": "c508df90ad347e07d116d62366beb8a4fda0dc5c7a4eb6e596f6c0da71bd4471"
        },
        "downloads": -1,
        "filename": "convclasses-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "650d8d91df53850b9ecd1f5291b309c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 31016,
        "upload_time": "2019-12-02T19:20:14",
        "upload_time_iso_8601": "2019-12-02T19:20:14.897246Z",
        "url": "https://files.pythonhosted.org/packages/e9/0e/39b9771dc55d54d4f99a76c01000232a60e8e413a0b0a27202a94960f21d/convclasses-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19cfc81b9e961e9d8d902e13909347b8476f9f05cde4939c7aa54ff8405ac0c8",
          "md5": "b2d0c3ba7abad426083570cd2512c882",
          "sha256": "717b877a987c09822ea2cd7afa94ed5b63415fe52fc370592ff0961e805a28f7"
        },
        "downloads": -1,
        "filename": "convclasses-1.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b2d0c3ba7abad426083570cd2512c882",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": "~=3.7",
        "size": 14819,
        "upload_time": "2020-11-08T18:32:29",
        "upload_time_iso_8601": "2020-11-08T18:32:29.866781Z",
        "url": "https://files.pythonhosted.org/packages/19/cf/c81b9e961e9d8d902e13909347b8476f9f05cde4939c7aa54ff8405ac0c8/convclasses-1.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe603d657e2d8240cf50ab351c86b54309ffe4f9d2f9c5ef1e65968e1d86ee4f",
          "md5": "c59b307c88500ba0c9a795c21e735e0b",
          "sha256": "8c7b2feeda60dc138ce2e7a2019c005e6889153477ec5c91a905fbe3b511d86d"
        },
        "downloads": -1,
        "filename": "convclasses-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c59b307c88500ba0c9a795c21e735e0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 31454,
        "upload_time": "2020-11-08T18:32:32",
        "upload_time_iso_8601": "2020-11-08T18:32:32.750777Z",
        "url": "https://files.pythonhosted.org/packages/fe/60/3d657e2d8240cf50ab351c86b54309ffe4f9d2f9c5ef1e65968e1d86ee4f/convclasses-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "df271cee7c07018e3219ad5533006afda30f514a1cb3e50cf02e8c91f98bfb6d",
          "md5": "000b10ecd039abdd0b1c651ffef494ce",
          "sha256": "8a2bfd35f19d3a3f7eb62426f42fe839bf454ba8a7ee729f640a0258d685f711"
        },
        "downloads": -1,
        "filename": "convclasses-2.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "000b10ecd039abdd0b1c651ffef494ce",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": "~=3.7",
        "size": 16476,
        "upload_time": "2020-11-10T09:24:20",
        "upload_time_iso_8601": "2020-11-10T09:24:20.766081Z",
        "url": "https://files.pythonhosted.org/packages/df/27/1cee7c07018e3219ad5533006afda30f514a1cb3e50cf02e8c91f98bfb6d/convclasses-2.0.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94b67d27bd15ff23da59b9d4a680eea48158d5b762daaf891798abfdaaabb243",
          "md5": "f67b0621e7ba0f8f17d5c1567231803f",
          "sha256": "3284e214e32536a68f7e916cb22b74d842cd2c3e9696eab52ada72ff85ad9245"
        },
        "downloads": -1,
        "filename": "convclasses-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f67b0621e7ba0f8f17d5c1567231803f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": "~=3.7",
        "size": 33167,
        "upload_time": "2020-11-10T09:24:22",
        "upload_time_iso_8601": "2020-11-10T09:24:22.193894Z",
        "url": "https://files.pythonhosted.org/packages/94/b6/7d27bd15ff23da59b9d4a680eea48158d5b762daaf891798abfdaaabb243/convclasses-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "df271cee7c07018e3219ad5533006afda30f514a1cb3e50cf02e8c91f98bfb6d",
        "md5": "000b10ecd039abdd0b1c651ffef494ce",
        "sha256": "8a2bfd35f19d3a3f7eb62426f42fe839bf454ba8a7ee729f640a0258d685f711"
      },
      "downloads": -1,
      "filename": "convclasses-2.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "000b10ecd039abdd0b1c651ffef494ce",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": "~=3.7",
      "size": 16476,
      "upload_time": "2020-11-10T09:24:20",
      "upload_time_iso_8601": "2020-11-10T09:24:20.766081Z",
      "url": "https://files.pythonhosted.org/packages/df/27/1cee7c07018e3219ad5533006afda30f514a1cb3e50cf02e8c91f98bfb6d/convclasses-2.0.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94b67d27bd15ff23da59b9d4a680eea48158d5b762daaf891798abfdaaabb243",
        "md5": "f67b0621e7ba0f8f17d5c1567231803f",
        "sha256": "3284e214e32536a68f7e916cb22b74d842cd2c3e9696eab52ada72ff85ad9245"
      },
      "downloads": -1,
      "filename": "convclasses-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f67b0621e7ba0f8f17d5c1567231803f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": "~=3.7",
      "size": 33167,
      "upload_time": "2020-11-10T09:24:22",
      "upload_time_iso_8601": "2020-11-10T09:24:22.193894Z",
      "url": "https://files.pythonhosted.org/packages/94/b6/7d27bd15ff23da59b9d4a680eea48158d5b762daaf891798abfdaaabb243/convclasses-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}