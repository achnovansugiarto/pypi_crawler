{
  "info": {
    "author": "Anthony Post",
    "author_email": "postanthony3000@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Qactuar <img src=\"Qactuar.png\" width=\"100\" title=\"Qactuar\">\n\nAn ASGI compliant web server the goal of which is to support multiple\nasynchronous models. This started as a companion project to the\n[Tonberry](https://github.com/Ayehavgunne/Tonberry) ASGI framework.\n\n##### 1. Post-Fork Multiprocessing\nThe first strategy is a post-fork model creating a new process for every \nrequest. This is the only model available right now.\n\n##### 2. Async/Await\nThe second strategy is one that a lot of current ASGI servers already do. In a\nsingle process just handle requests using asyncio/uvloop.\n\n##### 3. Pre-Fork Multiprocessing with Async/Await\nStart up a pool of processes which can share a socket and each take a set number\nof requests and then handle them internally with async.\n\n## Installing\nJust do the usual\n```bash\n$ pip install qactuar\n```\n\n## Usage\nDuring the install it creates a command line app.\n\n### Command Line\n```bash\n$ qactuar module:app\n```\nIf your module is in the python path then it will get imported and any ASGI\ncompatible object in the module can be called. If the apps are setup in the\nconfig (see Configuration section below) then you can just start up qactuar\nwithout any arguments.\n```bash\n$ qactuar\n```\n\n### Programmatically\n```python\nfrom tonberry import create_app, expose\nfrom tonberry.content_types import TextPlain\n\nimport qactuar\n\nclass Root:\n    @expose.get\n    async def index(self) -> TextPlain:\n        return \"Hello, world!\"\n\n\nif __name__ == \"__main__\":\n    app = create_app(Root)\n    qactuar.run(app=app)\n    # other keyword arguments for run() are host, port and conf\n```\nFor a nice ASGI framework, check out\n[Tonberry](https://github.com/Ayehavgunne/Tonberry)!\n\n## Configuration\nFile and programatic based configurations are supported. For a config file just\ncreate an environment variable `QACTUAR_CONFIG` and set the value to the\nabsolute or relative path of a JSON file. This file can overwride any of the\ndefault values listed here. Only the values you wish to override need to be\nprovided.\n\n- HOST: `str` = \"localhost\"\n- PORT: `int` = 8000\n- ADMIN_HOST: `str` = \"localhost\"\n- ADMIN_PORT: `int` = 1986\n- CHECK_PROCESS_INTERVAL: `int` = 1\n- SELECT_SLEEP_TIME: `float` = 0.025\n- RECV_TIMEOUT: `float` = 0.001\n- RECV_BYTES: `int` = 65536\n- MAX_PROCESSES: `int` = 500\n- GATHER_PROC_STATS: `bool` = False\n- REQUEST_TIMEOUT: `float` = 5\n- APPS: `Dict[str, str]` = {}\n- LOGS: `Dict[str, Any]` = *default_log_setup (see below)*\n\nThe `APPS` dictionary takes a `route` as the key and a `module:app` style string\nas the value. Multiple applications can be hosted at the same time by\nregistering each at its own route. A basic example can be seen in the\n[qactuar_config.json](https://github.com/Ayehavgunne/Qactuar/blob/develop/tests/qactuar_config.json)\nfile.\n\n### The Config dataclass\nThe config is managed in a dataclass object and can be created programmatically.\nAll arguments are optional and are defined above.\n```python\nconfig = qactuar.Config(HOST='0.0.0.0')\nqactuar.run(app=app, conf=config)\n```\n\nThe `LOGS` dictionary is for the logging.config setup as detailed in the Python\ndocumentation [here](https://docs.python.org/3/library/logging.config.html). It\nuses logging.config.dictConfig to set the logging configs. The loggers used\nthrought the code are `qt_server` (used by the parent process), `qt_child` (used\nin the child processes), `qt_access` (used to log each request), `qt_exception`\n(used to log any exceptions)\n\n### Default Log Setup\n```json\n{\n    \"version\": 1,\n    \"disable_existing_loggers\": false,\n    \"formatters\": {\n        \"standard\": {\n            \"format\": \"{asctime} {levelname} {message}\",\n            \"style\": \"{\"\n        },\n        \"access\": {\n            \"format\": \"{asctime} ACCESS {message}\",\n            \"style\": \"{\"\n        }\n    },\n    \"handlers\": {\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n            \"level\": \"DEBUG\",\n            \"formatter\": \"standard\",\n            \"stream\": \"ext://sys.stdout\"\n        },\n        \"access\": {\n            \"class\": \"logging.StreamHandler\",\n            \"level\": \"INFO\",\n            \"formatter\": \"access\",\n            \"stream\": \"ext://sys.stdout\"\n        },\n        \"exception\": {\n            \"class\": \"logging.StreamHandler\",\n            \"level\": \"ERROR\",\n            \"formatter\": \"standard\",\n            \"stream\": \"ext://sys.stderr\"\n        }\n    },\n    \"loggers\": {\n        \"qt_server\": {\n            \"handlers\": [\"console\"],\n            \"level\": \"DEBUG\"\n        },\n        \"qt_child\": {\n            \"handlers\": [\"console\"],\n            \"level\": \"DEBUG\"\n        },\n        \"qt_access\": {\n            \"handlers\": [\"access\"],\n            \"level\": \"INFO\"\n        },\n        \"qt_exception\": {\n            \"handlers\": [\"exception\"],\n            \"level\": \"ERROR\"\n        }\n    }\n}\n```\nIf changing the `LOGS` config then the whole dictionary needs to be replaced.\nIndividual parts of the log config cannot be changed by themselves.\n\n### Future Config Options\n\n- ASYNCRONOUS_MODEL: `Enum` = 1\n- SSL_CERT_PATH: `str` = \"\"\n- SSL_KEY_PATH: `str` = \"\"\n\n## Tornado Apps\nIncluded is a utility wrapper to take a Tornado Request Handler and make it work\nwith ASGI. See\n[tornado_app.py](https://github.com/Ayehavgunne/Qactuar/blob/develop/tests/tornado_app.py)\nfor an example.\n\n## Admin\nThe plan is to support an extra socket connection that can accept connections\nfor adminitrative purposes. Maybe for viewing system recources, viewing the\nprocesses and current load, changing configs on the fly, installing new apps\nvia git clone without restarting the server. This is still in the works.\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of\nconduct, and the process for submitting pull requests.\n\n## Versioning\n\n[SemVer](http://semver.org/) is used for versioning. For the versions available,\nsee the [tags on this repository](https://github.com/Ayehavgunne/Qactuar/tags).\n\n### Authors\n\n* **Anthony Post** - [Ayehavgunne](https://github.com/Ayehavgunne)\n\n## License\n\nThis project is licensed under the MIT License - see the\n[LICENSE.txt](LICENSE.txt) file for details\n\n## TODO\n- Admin socket\n- [UPD](https://channels.readthedocs.io/en/1.x/asgi/udp.html) support\n- WebSockets\n- Send http.disconnect to app when each socket closes\n- Filter HTTP/2-3 pseudo headers\n- Client streaming, check \"more_body\" in send method\n- Async only model\n- Pre-Fork model\n- TESTS!!!\n- Docs",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Ayehavgunne/Qactuar/",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Qactuar",
    "package_url": "https://pypi.org/project/Qactuar/",
    "platform": "",
    "project_url": "https://pypi.org/project/Qactuar/",
    "project_urls": {
      "Homepage": "https://github.com/Ayehavgunne/Qactuar/"
    },
    "release_url": "https://pypi.org/project/Qactuar/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "ASGI compliant web server",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6620967,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa7b01ac7de99b226fca4a8853660c4f7d3f52b49a5e8a002e8749b3a4baddc5",
          "md5": "b5416ed3e6d089c5aba7184e2bece36d",
          "sha256": "a989cb1a1a8a8a02ea78eb419e8eb68920d2be581ada905c0227b125bcc57d84"
        },
        "downloads": -1,
        "filename": "Qactuar-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b5416ed3e6d089c5aba7184e2bece36d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 1119,
        "upload_time": "2020-02-01T03:59:41",
        "upload_time_iso_8601": "2020-02-01T03:59:41.130092Z",
        "url": "https://files.pythonhosted.org/packages/fa/7b/01ac7de99b226fca4a8853660c4f7d3f52b49a5e8a002e8749b3a4baddc5/Qactuar-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c4b49b7fd6dd4444012e87e6acd0062713a399b0579076b10eda39f0157bd88f",
          "md5": "6e231e1243bce0334e66093507e3b0a7",
          "sha256": "d78e8546ed0c8f16d62385616cb0dfb8e574763c64ef9a84794431c95a3766d1"
        },
        "downloads": -1,
        "filename": "Qactuar-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6e231e1243bce0334e66093507e3b0a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 9136,
        "upload_time": "2020-02-06T06:49:09",
        "upload_time_iso_8601": "2020-02-06T06:49:09.357819Z",
        "url": "https://files.pythonhosted.org/packages/c4/b4/9b7fd6dd4444012e87e6acd0062713a399b0579076b10eda39f0157bd88f/Qactuar-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4e94ea256e184731cb018d9f9596802b38b54945e1e24974a033f23dd7733d3",
          "md5": "c9f894c6028ce021fe46e09c8368e463",
          "sha256": "c8ab6cb7cec0056f0bd9b6bd44c337f338e7bcd1c73043a3d05a8b4ffd303084"
        },
        "downloads": -1,
        "filename": "Qactuar-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c9f894c6028ce021fe46e09c8368e463",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 16435,
        "upload_time": "2020-02-13T03:56:04",
        "upload_time_iso_8601": "2020-02-13T03:56:04.984722Z",
        "url": "https://files.pythonhosted.org/packages/b4/e9/4ea256e184731cb018d9f9596802b38b54945e1e24974a033f23dd7733d3/Qactuar-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b4e94ea256e184731cb018d9f9596802b38b54945e1e24974a033f23dd7733d3",
        "md5": "c9f894c6028ce021fe46e09c8368e463",
        "sha256": "c8ab6cb7cec0056f0bd9b6bd44c337f338e7bcd1c73043a3d05a8b4ffd303084"
      },
      "downloads": -1,
      "filename": "Qactuar-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c9f894c6028ce021fe46e09c8368e463",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 16435,
      "upload_time": "2020-02-13T03:56:04",
      "upload_time_iso_8601": "2020-02-13T03:56:04.984722Z",
      "url": "https://files.pythonhosted.org/packages/b4/e9/4ea256e184731cb018d9f9596802b38b54945e1e24974a033f23dd7733d3/Qactuar-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}