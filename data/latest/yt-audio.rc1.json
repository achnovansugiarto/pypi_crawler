{
  "info": {
    "author": "pseudoroot",
    "author_email": "pseudoroot@protonmail.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Multimedia :: Sound/Audio"
    ],
    "description": "# yt-audio\nA simple, configurable, cross-platform youtube-dl wrapper for downloading and managing youtube audio (with added features).\n\n\n## Installation\n- Requires [Python3](https://www.python.org/downloads/) (>=3.5), [youtube-dl](https://github.com/ytdl-org/youtube-dl) and [ffmpeg](https://www.ffmpeg.org/)/[avconv](https://libav.org/) as dependencies.\n\nyt-audio can be installed via [pip](pip_link_here). Arch Linux users can use [AUR](link) as well.\n\n`$ [sudo] pip3 install --upgrade yt-audio`\n\n## Description and Features\nyt-audio is a command-line program that is used download and manage audio from youtube.com. It is a youtube-dl wrapper program, which means it uses youtube-dl as backend for downloading audio. yt-audio tries to make audio/playlist management easy for users. It is cross-platform (Windows/Linux/MacOS).\n\n### Features\n- Configure/Setup your own command-line arguments for managing titles/playlists (See [usage](link) below)\n- Ability to save each audio/playlist to a different directory (directory specified in argument).\n- Option to keep track of already-downloaded playlist titles **with or without archive file**.\n- Manage single/playlist audio(s).\n\n\n## Usage\n    usage: YTAudio.py [OPTIONS] REQUIRED_ARGS\n\n    A simple, configurable youtube-dl wrapper for downloading and managing youtube audio.\n\n    Required Arguments (Any/all):\n    URL[::DIR]            Video/Playlist URL with (optional) save directory [URL::dir]\n    -e, --example1        Example playlist [Custom]\n    --all                 All [Custom] Arguments\n\n    Optional Arguments:\n    -h, --help            show this help message and exit\n    -v, --version         show version and exit\n    --use-archive         use archive file to track downloaded titles\n    --use-metadata        use metadata to track downloaded titles\n    --output-format [OUTPUT_FORMAT]\n                            File output format\n    --ytdl-args [YTDL_ADDITIONAL_ARGS]\n                            youtube-dl additional arguments\n\n**yt-audio requires either URL or custom argument(s) (or both) as mandatory input(s).**\n\n### Custom Arguments\nyt-audio gives user the ability to setup their own custom arguments for managing/synchronizing audio/playlists. Custom arguments can be configured in yt-audio's *(config.ini)* configuration file.\n\n**NOTE (pip users): The user, if required, will have to copy the [configuration file](https://github.com/pseudoroot/yt-audio/blob/development/config.ini) as it is not copied during installation.**\n\n**Unix/Linux Users:**\nThe default config location is **$XDG_CONFIG_HOME/yt-audio/** directory. In case *$XDG_CONFIG_HOME* is not set, the file can be placed in **$HOME/.config/yt-audio/** directory.\n\n**Windows Users:** The default config location is **C:\\\\Users\\\\\\<user>\\\\.config\\\\yt-audio**\n\n**Setting up custom arguments**\n\nThe config file *config.ini* has URL_LIST[] option where users can specify arguments with corresponding URL and (optional) save directory. It's format is as follows:\n\n    URL_LIST = [\n                    # \"['-short_arg1','--long_arg1','Help Text/Description']::URL::PATH\"\n\n                    # PATH (optional) specifies output directory for that particular playlist\n                    # PATH should be absoulte directory path\n                    # URL: Complete youtube title/playlist URL\n                    # These arguments are visible in --help\n\n                    # \"['-e','--example1','Example playlist']::URL::PATH\",\n               ]\n\nURL_LIST takes comma-separated string values. Each string value is formed from 3 components:\n\n- CLI Argument - Argument to register. It is written in form: ['-short_arg','--long_arg','Help Text/Description']\n- URL: Youtube playlist/title URL.\n- PATH (optional): Path where this particular playlist/title will be saved. Provide absolute PATH here.\n\nAll custom arguments are visible in --help [`$ yt-audio --help`]\n\nThe default save PATH is **$HOME/Music**.  PATH can be configured by user in config file (OUTPUT_DIRECTORY = \\<dir>). For playlists, one more directory of \\<PlaylistName> is created where all playlist records are saved.\n\n#### Keeping track of downloaded titles/playlists\nyt-audio has an added feature of keeping track of audio files using **file's metadata**. This removes the requirement of additional archive file to store title(s) info (option provided by youtube-dl).\n\nUser can specify any of the two ways to keep track of downloaded titles. (By default, downloaded titles are **not tracked**)\n\n\n_**Using File Metadata**_\n\nTo use file's metadata, pass `--use-metadata` argument to yt-audio. To use metadata everytime, you can set `USE_METADATA = 1` in config file. Metadata method requires following to work:\n- `--add-metadata` argument to youtube-dl (`--add-metadata` argument is added by yt-audio by default. If you don't want this, you can re-configure youtube-dl command in config).\n\n\n_Known limitations of using metadata method_\n- I have tried this method with both MP3 and M4A format. MP3 works fine. M4a does not work.\n\n\n**_Using Archive File_**\n\nTo use archive file method, pass `--use-archive` argument to yt-audio. To use archive file everytime with yt-audio, you can set `USE_ARCHIVE = 1` in config file. This will create 'records.txt' file in title's download location.\n\n`--use-archive` flag simply passes youtube-dl's `--download-archive FILE` argument to youtube-dl. You can pass your own filename to youtube-dl as well with `--ytdl-args \\\"--download-archive FILE\\\"`. More info about ['--ytdl-args']() argument.\n\n    # Enable metadata\n    $ yt-audio --use-metadata [URL/custom_args]\n\n    # Enable archive file - creates records.txt file\n    $ yt-audio --use-archive [URL/custom_args]\n\n    # Enable archive file - creates archive.txt file\n    $ yt-audio --ytdl-args \\\"--download-archive FILE\\\" [URL/custom_args]\n\n\n_If both metadata and archive file are enabled, archive file method is used_\n\n\n#### Title/Playlist-specific PATH\nUser can also specify any arbitrary path for a particular playlist/title. This PATH can be specified as URL::PATH. If PATH is not provided, PATH from config file is used. If no path is present in config, **$HOME/Music** path is used\n\n#### Changing output format\nDownloaded file's output format can be specified with `--output-format` argument. [Output Template](https://github.com/ytdl-org/youtube-dl/blob/master/README.md#output-template). Default output format is `\"%(title)s.%(ext)s\"`\n\n#### Passing additional paramaters to youtube-dl\nyt-audio gives user the flexibility to pass additional parameters to youtube-dl directly from command-line. Additional arguments can be provided with `--ytdl-arguments` yt-audio argument. Arguments passed to `ytdl-arguments` are passed as-it-is to youtube-dl.\n\n    $ yt-audio `--ytdl-args \\\"--download-archive FILE --user-agent UA\\\"`\n\n**NOTE:** Make sure to escape double-quotes **\"** when passing arguments to `--ytdl-args`. Else the arguments passed to `--ytdl-args` will be read as input arguments to yt-audio.\n\n#### Modifying default youtube-dl/helper commands\nThe commands used by yt-audio can be modified from config file. Unusual parameters might break the program. If the parameter is legit and should have (ideally) worked but it didn't, please [raise an issue](https://github.com/pseudoroot/yt-audio/issues/new).\n\n## Usage Examples\n\n    # Synchronizes/downloads --custom1 and --custom2 custom argument URLs and download specified URL as well.\n    $ yt-audio --custom1 --custom2 https://youtube.com/playlist?list=abcxyz\n\n    # Saves playlist to /my/path/p1/<PlaylistName>/ and single audio to /some/another/path\n    $ yt-audio https://youtube.com/playlist?list=abcxyz::/my/path/p1 https://www.youtube.com/watch?v=abcxyz::/some/another/path\n\n    # Adding additional youtube-dl arguments\n    # This will append additional arguments to youtube-dl download command\n    $ yt-audio --ytdl-args \\\"arg1 arg2\\\" https:youtube.com/abc https://youtube.com/xyz::DIR\n\n    # Different output format\n    $ yt-audio --output-format \"%(display_id)s.%(ext)s\" https://youtube.com/...\n\n\n## yt-audo defaults\nThe following commands are used by yt-audio to download and manage audio. The commands are configurable using config file.\n\n**youtube-dl audio download**\n\n    # (-x --print-json -o \"$OUTPUT$\" $URL$) are mandatory\n    $ youtube-dl -x --print-json --audio-format mp3 --audio-quality 0 --add-metadata --embed-thumbnail -o \"$OUTPUT$\" $URL$\n\n**get playlist/URL info**\n\n    $ youtube-dl --flat-playlist -J $PLAYLIST_URL$\n\n**get file's metadata** (used when downloaded titles are tracked using metadata)\n\n    $ ffprobe -v quiet -print_format json -show_format -hide_banner \"$PATH$\"\n\n\n## Limitations\n- Keeping track of downloaded tracks works with youtube.com only (for now).\n\n## Bugs/Issues\nPlease [create](https://github.com/pseudoroot/yt-audio/issues/new) issue for the same.\nI'm open to suggestions as well :)\n\n## Contact\nFeel free get in touch with me via [Twitter](https://twitter.com/pseud0root) or [Email](mailto:pseudoroot@protonmail.ch).\n\n# License\n[MIT](https://github.com/pseudoroot/yt-audio/blob/master/LICENSE)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pseudoroot/yt-audio",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yt-audio",
    "package_url": "https://pypi.org/project/yt-audio/",
    "platform": "",
    "project_url": "https://pypi.org/project/yt-audio/",
    "project_urls": {
      "Homepage": "https://github.com/pseudoroot/yt-audio"
    },
    "release_url": "https://pypi.org/project/yt-audio/0.1/",
    "requires_dist": [
      "youtube-dl"
    ],
    "requires_python": ">=3.5",
    "summary": "A simple, configurable youtube-dl wrapper to download and manage youtube audio (with added features)",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6477266,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edf25b4afacebd9ce7a8d7ca396cf6f7b99b2ffe80a6b9619ded9d63bbd4fbb4",
          "md5": "9ac70975f01afbcefd6af0ba4ea9a086",
          "sha256": "cad36122d65a67decddb4eaa080f017f1a78d9bab59863dd51c980418f5793d4"
        },
        "downloads": -1,
        "filename": "yt_audio-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ac70975f01afbcefd6af0ba4ea9a086",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 11661,
        "upload_time": "2020-01-18T07:46:32",
        "upload_time_iso_8601": "2020-01-18T07:46:32.028004Z",
        "url": "https://files.pythonhosted.org/packages/ed/f2/5b4afacebd9ce7a8d7ca396cf6f7b99b2ffe80a6b9619ded9d63bbd4fbb4/yt_audio-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd69257d62b10e79fa330610ccc146a23f2bedf3be072958839224fe08906e92",
          "md5": "13a2535b49555c89a9bab71da5502334",
          "sha256": "47601313370a479433eac5d6c414872728c79a03b31565b1ad5502931687385f"
        },
        "downloads": -1,
        "filename": "yt-audio-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "13a2535b49555c89a9bab71da5502334",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 14388,
        "upload_time": "2020-01-18T07:46:34",
        "upload_time_iso_8601": "2020-01-18T07:46:34.764418Z",
        "url": "https://files.pythonhosted.org/packages/bd/69/257d62b10e79fa330610ccc146a23f2bedf3be072958839224fe08906e92/yt-audio-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edf25b4afacebd9ce7a8d7ca396cf6f7b99b2ffe80a6b9619ded9d63bbd4fbb4",
        "md5": "9ac70975f01afbcefd6af0ba4ea9a086",
        "sha256": "cad36122d65a67decddb4eaa080f017f1a78d9bab59863dd51c980418f5793d4"
      },
      "downloads": -1,
      "filename": "yt_audio-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9ac70975f01afbcefd6af0ba4ea9a086",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 11661,
      "upload_time": "2020-01-18T07:46:32",
      "upload_time_iso_8601": "2020-01-18T07:46:32.028004Z",
      "url": "https://files.pythonhosted.org/packages/ed/f2/5b4afacebd9ce7a8d7ca396cf6f7b99b2ffe80a6b9619ded9d63bbd4fbb4/yt_audio-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bd69257d62b10e79fa330610ccc146a23f2bedf3be072958839224fe08906e92",
        "md5": "13a2535b49555c89a9bab71da5502334",
        "sha256": "47601313370a479433eac5d6c414872728c79a03b31565b1ad5502931687385f"
      },
      "downloads": -1,
      "filename": "yt-audio-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "13a2535b49555c89a9bab71da5502334",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 14388,
      "upload_time": "2020-01-18T07:46:34",
      "upload_time_iso_8601": "2020-01-18T07:46:34.764418Z",
      "url": "https://files.pythonhosted.org/packages/bd/69/257d62b10e79fa330610ccc146a23f2bedf3be072958839224fe08906e92/yt-audio-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}