{
  "info": {
    "author": "",
    "author_email": "Christoph Emonds <chris+git@kant.ai>",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Multimeter\n\n [![pipeline status](https://gitlab.com/kantai/multimeter/badges/mainline/pipeline.svg)](https://gitlab.com/kantai/multimeter/-/commits/mainline)\n [![coverage report](https://gitlab.com/kantai/multimeter/badges/mainline/coverage.svg)](https://gitlab.com/kantai/multimeter/-/commits/mainline)\n\nMultimeter is a python library that allows easy capturing of in-process run-time metrics\nfor specific code parts. It is meant for tracking the behavior of a python script in terms\nof memory usage, cpu load or disk and network consumption as long as a specific part of\nthe code is being run.\n\n## What it does\n\nWithin a python script an object of type `Multimeter` can be used to start measurements\nthat run a background thread and automatically capture values at a fixed schedule for\ndifferent metrics. When the measurement ends, the captured values can be automatically\nstored in a file or send to time series databases.\n\n## How it works\n\nThe easiest way to measure the behavior of specific code is by wrapping it in a context\nmanager:\n\n```python\nimport multimeter\n\n...\n\nmm = multimeter.Multimeter(multimeter.ResourceProbe())\nwith mm.measure(identifier='measurement-id') as measurement:\n    # Here the code whose performance should be measured\n    ...\n\nresult = measurement.result\nprint(f\"Start {result.start}\")\nprint(f\"End {result.end}\")\nprint(f\"Duration {result.duration}\")\nprint(f\"CPU avg values: {result.values('process.cpu_rate_user')}\")\n```\n\nAfter the with statement the results can be taken from the measurement. The `Result` type\nprovides access to the captured metrics and the individual data points.\n\nBy providing a `Storage` object, the results can automatically be stored in the file\nsystem or in time series databases:\n\n```python\nmm = multimeter.Multimeter(multimeter.ResourceProbe())\nmm.set_storage(multimeter.JsonFileStorage(save_directory=os.path.dirname(__file__)))\n```\n\nFor more information take a look at the latest [user guide](https://docs.kant.ai/multimeter/latest/user_guide/).\n\n## Develop\n\nMultimeter uses [tox](https://tox.wiki/en/latest/index.html) to build and test the library.\nTox runs all tests on different python versions, can generate the documentation and run\nlinters and style checks to improve the code quality.\nIn order to install all the necessary python modules, please run:\n\n```bash\npip install tox\n```\n\nAfterwards the tests can be run by just calling\n\n```bash\ntox\n```\n\nfrom the project directory. For this to work, you need to have multiple python\ninterpreters installed. If you don't want to run the tests on all supported platforms\njust edit the tox.ini file and set\n```\nenvlist = py36,py37,py38\n```\nto contain only the python version you want to use. Another option is to run tox with\nthe additional command line argument\n['--skip_missing_interpreters'](https://tox.wiki/en/latest/config.html#conf-skip_missing_interpreters)\nwhich skips python versions that aren't installed.\n\n\n## Documentation\n\nThe latest version of the documentation can always be found under https://docs.kant.ai/multimeter/latest.\nThe documentation is written in [Markdown](https://daringfireball.net/projects/markdown/)\nand is located in the `docs` directory of the project.\nIt can be built into static HTML by using [MkDocs](https://www.mkdocs.org/).\nIn order to manually generate the documentation we can use tox to build the HTML pages from our markdown.\n\n```bash\ntox -e docs\n```\n\n## Release\n\n### Releasing a new package version\n\nReleasing new versions of multimeter is done using [flit](https://flit.readthedocs.io/en/latest/).\n\n```bash\npip install flit\n```\n\nIn order to be able to publish a new release, you need an account with PyPI or their\nrespective test environment.\n\nAdd those accounts into your `~.pypirc`:\n```\n[distutils]\nindex-servers =\n  pypi\n  pypitest\n\n[pypi]\nusername: <my-user>\n\n[pypitest]\nrepository: https://test.pypi.org/legacy/\nusername: <my-test-user>\n```\n\n\n### Publishing a new release to test\n\n```bash\nflit publish --repository pypitest\n```\n\n### Releasing a new version of the documentation\n\nThe package uses [mike](https://github.com/jimporter/mike)\nto manage multiple versions of the documentation. The already generated documentation is kept\nin the `docs-deployment` branch and will be automatically deployed, if the branch is pushed to\nthe repository.\n\nIn order to build a new version of the documentation, we need to use the corresponding tox environment:\n\n```bash\nVERSION_TAG='<my-version>' tox -e docs-release\n```\n\nThe `VERSION_TAG` environment variable should be set to the new version in format '<major>.<minor>'.\nThis will build the documentation and add it as new commits to the `docs-deployment` branch.\n\nBy pushing the updated branch to the gitlab repository, the documentation will be automatically\ndeployed to [the official documentation website](https://docs.kant.ai/multimeter).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "machine learning,process,profile,measure,cpu,memory,io,network,resources,track,metrics,time series",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "multimeter",
    "package_url": "https://pypi.org/project/multimeter/",
    "platform": "",
    "project_url": "https://pypi.org/project/multimeter/",
    "project_urls": {
      "Documentation": "https://docs.kant.ai/multimeter/latest/",
      "Source": "https://gitlab.com/kantai/multimeter/"
    },
    "release_url": "https://pypi.org/project/multimeter/0.1/",
    "requires_dist": [
      "tox ; extra == \"docs\"",
      "influxdb-client ; extra == \"influxdb\"",
      "flit ; extra == \"release\"",
      "tox ; extra == \"test\""
    ],
    "requires_python": ">=3.6",
    "summary": "Measure resource usage of your python code",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12353197,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a998d6d11238dade2423ecf0c70eda965c37ea412b662111f16abb7378a9726",
          "md5": "9fd0b574ef56734b97bf5c0f778372e8",
          "sha256": "c7df1a52d32476af29eda9e1a66bc67e5bcd64d46fc4b027d872ed753be7c3ad"
        },
        "downloads": -1,
        "filename": "multimeter-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9fd0b574ef56734b97bf5c0f778372e8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 25645,
        "upload_time": "2021-12-19T12:50:50",
        "upload_time_iso_8601": "2021-12-19T12:50:50.051067Z",
        "url": "https://files.pythonhosted.org/packages/9a/99/8d6d11238dade2423ecf0c70eda965c37ea412b662111f16abb7378a9726/multimeter-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7908c8b395b173eed6a7b01285e38ece38dad22b3db6c8f225968238012394c7",
          "md5": "5cde601abc317350f5c97ff335f41158",
          "sha256": "f795e9746c14936da6af004bcae377c8a7e60ea6c6b821abb4d2f7d123f4ef29"
        },
        "downloads": -1,
        "filename": "multimeter-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5cde601abc317350f5c97ff335f41158",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 237769,
        "upload_time": "2021-12-19T12:50:52",
        "upload_time_iso_8601": "2021-12-19T12:50:52.052837Z",
        "url": "https://files.pythonhosted.org/packages/79/08/c8b395b173eed6a7b01285e38ece38dad22b3db6c8f225968238012394c7/multimeter-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9a998d6d11238dade2423ecf0c70eda965c37ea412b662111f16abb7378a9726",
        "md5": "9fd0b574ef56734b97bf5c0f778372e8",
        "sha256": "c7df1a52d32476af29eda9e1a66bc67e5bcd64d46fc4b027d872ed753be7c3ad"
      },
      "downloads": -1,
      "filename": "multimeter-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9fd0b574ef56734b97bf5c0f778372e8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 25645,
      "upload_time": "2021-12-19T12:50:50",
      "upload_time_iso_8601": "2021-12-19T12:50:50.051067Z",
      "url": "https://files.pythonhosted.org/packages/9a/99/8d6d11238dade2423ecf0c70eda965c37ea412b662111f16abb7378a9726/multimeter-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7908c8b395b173eed6a7b01285e38ece38dad22b3db6c8f225968238012394c7",
        "md5": "5cde601abc317350f5c97ff335f41158",
        "sha256": "f795e9746c14936da6af004bcae377c8a7e60ea6c6b821abb4d2f7d123f4ef29"
      },
      "downloads": -1,
      "filename": "multimeter-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5cde601abc317350f5c97ff335f41158",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 237769,
      "upload_time": "2021-12-19T12:50:52",
      "upload_time_iso_8601": "2021-12-19T12:50:52.052837Z",
      "url": "https://files.pythonhosted.org/packages/79/08/c8b395b173eed6a7b01285e38ece38dad22b3db6c8f225968238012394c7/multimeter-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}