{
  "info": {
    "author": "5elenay",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<img alt=\"logo\" src=\"https://raw.githubusercontent.com/5elenay/datagoose/main/logo.png\">\r\n\r\n**Datagoose**\r\n===\r\nDatagoose is an __easy to use__ JSON based database for python.\r\n\r\n[![Version](https://badge.fury.io/py/datagoose.svg)](https://pypi.python.org/pypi/datagoose)\r\n[![Downloads](https://img.shields.io/pypi/dm/datagoose.svg)](https://pypi.python.org/pypi/datagoose)\r\n![Stars](https://img.shields.io/github/stars/5elenay/datagoose)\r\n![Commits](https://img.shields.io/github/commit-activity/w/5elenay/datagoose)\r\n\r\n# With Datagoose:\r\n- Best performance. Datagoose is a lightweight database.\r\n- Methods that makes your job easier.\r\n- Regex supports.\r\n  - You must enable `USE_REGEX` option.\r\n- Safe to use.\r\n- Auto or manual save, for who wants better performance.\r\n- Easy to use database. Created for everyone.\r\n- Rich options. includes hash keys, database path, regexp and more.\r\n- Auto backup\r\n- Can be dumped, also can load a data from JSON file.\r\n  - `<Datagoose>.load()`\r\n  - `<Datagoose>.dump()`\r\n\r\n# Update (1.6.0)\r\n- Added `PIN` option for encryption.\r\n  - If you used `1.5.0` encryption, use PIN `2` or dump your database and make a new one. \r\n- Added `.replace`, `.replace_one` methods.\r\n- Added 3 new event.\r\n- Added `ENCRYPTED` option for auto-backup.\r\n- Removed `.save_with_indent` method.\r\n\r\n# Download\r\nYou can download with `pip install -U datagoose` ([PyPi Page](https://pypi.org/project/datagoose/)) or, you can use with source code.\r\n\r\n**Note**: Current stable version is `1.6.1`. You can download stable version with `pip install datagoose==1.6.1` ([PyPi](https://pypi.org/project/datagoose/1.6.1/)).\r\n\r\n**Quick Documentation**\r\n===\r\n# Before Start\r\n## You should know these things before using datagoose;\r\n- Datagoose keeps data in **memory**, _not in a file_.\r\n  - You can save with `<Datagoose>.save()` for remember the database next time.\r\n  - Also now you can enable `AUTO_SAVE` option for auto-saving.\r\n  \r\n- Datagoose is not a professional database.\r\n\r\n<br>\r\n\r\n# Performance\r\nTest Result (Auto-Save Enabled):\r\n- 100 Data with insert many:\r\n  - ```\r\n    Starting Insert...\r\n    Inserting Finished in  0:00:00.007002\r\n    ```\r\n- 1,000 Data with insert many:\r\n  - ```\r\n    Starting Insert...\r\n    Inserting Finished in  0:00:00.032004\r\n    ```\r\n- 10,000 Data with insert many:\r\n  - ```\r\n    Starting Insert...\r\n    Inserting Finished in  0:00:00.278020\r\n    ```\r\n- 100,000 Data with insert many:\r\n  - ```\r\n    Starting Insert...\r\n    Inserting Finished in  0:00:02.808687\r\n    ```\r\n- 1,000,000 Data with insert many:\r\n  - ```\r\n    Starting Insert...\r\n    Inserting Finished in  0:00:31.908481\r\n    ```\r\n\r\n# Methods\r\n## Quick Start\r\n\r\n```\r\n[] - Optinal\r\n[argument_name:argument_type:argument_default_value] - Optinal Argument Name | Optional Argument Type | Optional Argument Default Value\r\n\r\n{} - Normal\r\n{argument_name:argument_type} - Argument Name | Argument Type\r\n\r\n* - Args\r\n```\r\n```py\r\nfrom datagoose import Datagoose\r\n\r\ndatabase = Datagoose(\"example\")\r\n```\r\n\r\n## Options\r\n```py\r\n# Options must be a dict. lets get informations about current options.\r\n\r\n# PATH:\r\n  # Type: String\r\n  # Description: Custom path for JSON file.\r\n  # Note: please add path like: \"databases/datagoose\" not \"./databases/datagoose/\"\r\n  # Default: datagoose_files\r\n# AUTO_SAVE:\r\n  # Type: Bool\r\n  # Description: When enabled, auto-saves the database when an action performed.\r\n  # Default: False\r\n# HASHING:\r\n  # Type: List\r\n  # Description: Key list for replace data with sha256 hash when inserted.\r\n  # Default: []\r\n# SAFE_MODE:\r\n  # Type: Bool\r\n  # Description: Enable/Disable safe mode. do not recommending to disable this option. if you know what are you doing, then good luck. \r\n  # Default: True\r\n# USE_REGEX:\r\n  # Type: Bool\r\n  # Description: Enable/Disable regex option. \r\n  # Default: False\r\n# ENCRYPTED:\r\n  # Type: Bool\r\n  # Description: Enable/Disable encrypting data. \r\n  # Default: False\r\n# PIN:\r\n  # Type: Int\r\n  # Description: Decryption key for encryption. you should not expose this key.\r\n  # Default: 2\r\n\r\n# Example:\r\ndatabase = Datagoose(\"example\", {\r\n    \"AUTO_SAVE\": True,\r\n    \"USE_REGEX\": True,\r\n    \"ENCRYPTED\": True,\r\n    \"PIN\": 69 * 420,\r\n    \"HASHING\": [\r\n        \"PASSWORD\"\r\n    ]\r\n})\r\n```\r\n\r\n```py\r\n# <Datagoose>.read() -> Returns the entire data\r\n  # Return Type: List\r\n  # Example(s):\r\n    full_database = database.read()\r\n\r\n# <Datagoose>.info -> Returns database info\r\n  # Return Type: Dict\r\n  # Example(s):\r\n    print(database.info)\r\n\r\n# <Datagoose>.length -> Returns total data count\r\n  # Return Type: Integer\r\n  # Example(s):\r\n    print(database.length)\r\n\r\n# <Datagoose>.uptime -> Returns database uptime\r\n  # Return Type: datetime.timedelta\r\n  # Example(s):\r\n    print(database.uptime)\r\n\r\n# <Datagoose>.save() -> Saves the database\r\n  # Return Type: Bool\r\n  # Example(s): \r\n    database.save()\r\n\r\n# <Datagoose>.clear() -> Clears the entire database\r\n  # Return Type: Bool\r\n  # Example(s): \r\n    database.clear()\r\n```\r\n# Inserting Data\r\n```py\r\n# <Datagoose>.insert_one({data:dict}) -> Insert one data to database\r\n  # Return Type: Dict\r\n  # Argument: data\r\n    # Description: The data will be inserted into database.\r\n  # Example(s):\r\n    database.insert_one({\r\n        \"name\": \"John\",\r\n        \"lastname\": \"Doe\",\r\n        \"age\": 25,\r\n        \"city\": \"New York\",\r\n        \"country\": \"USA\",\r\n        \"job\": \"Doctor\"\r\n    })\r\n\r\n# <Datagoose>.insert_many(*{data:dict}) -> Insert many data to database\r\n  # Return Type: Bool\r\n  # Args:\r\n    # Description: The data(s) will be inserted into database.\r\n  # Example(s):\r\n    database.insert_many({\r\n        \"user\": 1,\r\n        \"nickname\": \"normal_guy_100\"\r\n    }, {\r\n        \"user\": 2,\r\n        \"nickname\": \"user_555\"\r\n    })\r\n```\r\n\r\n<p style=\"font-size: 18px;\">Note: Datagoose adds unique hash (\"_id\") to every document that inserted. Make sure do not add same \"_id\" to documents.</p>\r\n\r\n```py\r\n# Example\r\n\r\ndatabase.insert_one({ \"_id\": 1, \"name\": \"an_user\" })\r\ndatabase.insert_one({ \"_id\": 1, \"name\": \"another_user\" })\r\n# This example will not give an error. But when you use delete or update, datagoose may confuse while find the object.\r\n```\r\n# Finding Data\r\n```py\r\n# <Datagoose>.find({data:dict}) -> Find data from database\r\n  # Return Type: Generator? (Dict Yield)\r\n  # Argument: data\r\n    # Description: The data will find from database.\r\n  # Example(s):\r\n    found = database.find({\r\n        \"age\": 25\r\n    }) # -> {'name': 'test', 'age': 25}, {'name': 'test2', 'age': 25} ...\r\n\r\n    for result in found:\r\n      print(result)\r\n\r\n# <Datagoose>.query({check:function}) -> Query data from database with function. *New in 1.4.1*\r\n  # Return Type: Generator? (Dict Yield)\r\n  # Argument: check\r\n    # Description: Functions for check, must return bool.\r\n  # Example(s):\r\n    for i in database.query(lambda data: 'POINT' in data and data['POINT'] >= 1337):\r\n      print(i)\r\n\r\n# <Datagoose>.find_one({data:dict}) -> Find one data from database\r\n  # Return Type: Dict\r\n  # Argument: data\r\n    # Description: The data will find from database.\r\n  # Example(s):\r\n    result = database.find_one({\r\n        \"user_id\": 295818619\r\n    })\r\n    print(result[\"nickname\"])\r\n```\r\n# Updating Data\r\n```py\r\n# <Datagoose>.update({data:dict}, {new_data:dict}) -> Update data from database\r\n  # Return Type: List\r\n  # Argument: data\r\n    # Description: The data will find from database.\r\n  # Argument: new_data\r\n    # Description: The data will be changed with found data.\r\n  # Example(s):\r\n    database.update({\r\n        \"age\": 25\r\n    }, {\r\n        \"age\": 26\r\n    }) # Now every data has 'age' and 'age' key value is 25, changed with 'age' = 26 \r\n    \r\n# <Datagoose>.update_one({data:dict}, {new_data:dict}) -> Update one data from database\r\n  # Return Type: Dict\r\n  # Argument: data\r\n    # Description: The data will find from database.\r\n  # Argument: new_data\r\n    # Description: The data will be changed with found data.\r\n  # Example(s):\r\n    database.update_one({\r\n        \"user_id\": 2486718956\r\n    }, {\r\n        \"banned\": True,\r\n        \"ban_time\": \"30d\"\r\n    }) # Now only one data updated.\r\n```\r\n\r\n<p style=\"font-size: 18px;\">Note: When you add new key and value to new_data dictionary, it will insert into data.</p>\r\n\r\n```py\r\n# Example\r\n\r\ndatabase.insert_one({ \"_id\": 1, \"name\": \"an_user\" })\r\ndatabase.update_one({\r\n    \"_id\": 1\r\n}, {\r\n    \"total_kill\": 16\r\n})\r\n# Now our data is:\r\n{\r\n    \"_id\": 1,\r\n    \"name\": \"an_user\",\r\n    \"total_kill\": 16\r\n}\r\n```\r\n# Replace Data\r\n```py\r\n# <Datagoose>.replace({data:dict}, {new_data:dict}) -> Replace data from database\r\n  # Return Type: List\r\n  # Argument: data\r\n    # Description: The data will find from database.\r\n  # Argument: new_data\r\n    # Description: The data will be replaced with found data.\r\n  # Example(s):\r\n    database.replace({\r\n        \"age\": 25\r\n    }, {\r\n        \"thing\": True, \r\n        \"age\": 26\r\n    }) # Now every data has 'age' and 'age' key value is 25, changed with new data.\r\n    \r\n# <Datagoose>.replace_one({data:dict}, {new_data:dict}) -> Replace one data from database\r\n  # Return Type: Dict\r\n  # Argument: data\r\n    # Description: The data will find from database.\r\n  # Argument: new_data\r\n    # Description: The data will be replaced with found data.\r\n  # Example(s):\r\n    database.replace_one({\r\n        \"user_id\": 2486718956\r\n    }, {\r\n        \"banned\": True,\r\n        \"ban_time\": \"30d\",\r\n        \"user_id\": 2486718956\r\n    }) # Now only one data replaced.\r\n```\r\n\r\n<p style=\"font-size: 18px;\">Note: The difference between update and replace, replace changes the entire data with new one. update only updates the key that given.</p>\r\n\r\n# Deleting Data\r\n```py\r\n# <Datagoose>.delete({data:dict}) -> Delete data from database\r\n  # Return Type: List\r\n  # Argument: data\r\n    # Description: The data will be deleted from database.\r\n  # Example(s):\r\n    database.delete({\r\n        \"total_hours\": 1\r\n    }) # Now datagoose deleted all data contains key 'total_hours' and key value is 1\r\n\r\n# <Datagoose>.delete_one({data:dict}) -> Delete one data from database\r\n  # Return Type: Dict\r\n  # Argument: data\r\n    # Description: The data will be deleted from database.\r\n  # Example(s):\r\n    database.delete_one({\r\n        \"user_id\": 6811\r\n    })\r\n```\r\n# Count & Exists\r\n```py\r\n# <Datagoose>.count({data:dict}) -> Count all data contains data argument\r\n  # Return Type: Integer\r\n  # Argument: data\r\n    # Description: The data will count.\r\n  # Example(s):\r\n    database.count({\r\n        \"name\": \"John\",\r\n        \"age\": 40\r\n    }) # -> 6157\r\n\r\n# <Datagoose>.exists({data:dict}) -> Checks data exists\r\n  # Return Type: Bool\r\n  # Argument: data\r\n    # Description: The data will be checked.\r\n  # Example(s):\r\n    result = database.exists({\r\n        \"name\": \"a_guy_11\"\r\n    })\r\n\r\n    if result:\r\n        database.delete_one({ \"name\": \"a_guy_11\" })\r\n```\r\n\r\n<p style=\"font-size: 18px;\">Note: \"has\" is an alias for exists.</p>\r\n\r\n```py\r\n# Example\r\n\r\nresult = database.has({\r\n    \"name\": \"a_guy_11\"\r\n})\r\n\r\nif result:\r\n    database.delete_one({ \"name\": \"a_guy_11\" })\r\n\r\n# is same with:\r\n\r\nresult = database.exists({\r\n    \"name\": \"a_guy_11\"\r\n})\r\n\r\nif result:\r\n    database.delete_one({ \"name\": \"a_guy_11\" })\r\n```\r\n# Using Regex\r\n```py\r\n# Quick example for using regex in datagoose.\r\n# You must enable USE_REGEX option for using regex in datagoose.\r\n\r\nfor i in db.find({\"ANSWER\": r\"yes|y\"}):\r\n    print(i)\r\n```\r\n# Load & Dump\r\n```py\r\n# <Datagoose>.dump({location:str}, [encoding:str:utf-8]) -> Dumps the database to JSON file.\r\n  # Return Type: None\r\n  # Argument: location\r\n    # Description: The location that will dump.\r\n  # Argument: encoding\r\n    # Description: Encoding while write.\r\n  # Example(s):\r\n    database.dump(\"./dump.json\")\r\n\r\n# <Datagoose>.load({location:str}, [encoding:str:utf-8], [overwrite:bool:True]) -> Load database from JSON file.\r\n  # Return Type: Dict\r\n  # Argument: location\r\n    # Description: The location that will dump.\r\n  # Argument: encoding\r\n    # Description: Encoding while write.\r\n  # Argument: overwrite\r\n    # Description: If True, it will delete old data and paste loaded one. Else, it will extend data with loaded JSON.\r\n  # Example(s):\r\n    # 1.\r\n      database.load(\"./old_database.json\", overwrite=False)\r\n    # 2.\r\n      database.load(\"./old_database.json\")\r\n```\r\n\r\n<p style=\"font-size: 18px;\">Note: for .load(), the JSON will loaded must have 'database' key and value must be a list. Also in list, values must be dict.</p>\r\n\r\n<p style=\"font-size: 18px;\">Note: \"export\" is an aliases for .dump().</p>\r\n\r\n```py\r\n# Example\r\n\r\ndatabase.export(\"./dump.json\", indent=4)\r\n\r\n# is same with:\r\n\r\ndatabase.dump(\"./dump.json\", indent=4)\r\n```\r\n# Copying Data\r\n```py\r\n# <Datagoose>.copy({data:dict}, [repeat:int:1]) -> Copy data to database\r\n  # Return Type: Bool\r\n  # Argument: data\r\n    # Description: The data will be copied to database.\r\n  # Argument: repeat\r\n    # Description: Repeat number for copy. Must be between 1 - 100000\r\n  # Example(s):\r\n    database.copy({\r\n        \"total_hours\": 1\r\n    }) # Now datagoose copied all data contains these informations.\r\n\r\n# <Datagoose>.repeat_one({data:dict}) -> Copy one data to database\r\n  # Return Type: Dict\r\n  # Argument: data\r\n    # Description: The data will be copied to database.\r\n  # Example(s):\r\n    database.copy_one({\r\n        \"user_id\": 6811\r\n    })\r\n```\r\n# Collecting Garbage Data\r\n```py\r\n# <Datagoose>.collect_garbage() -> Returns all garbage data in database\r\n  # Return Type: Generator\r\n  # Example(s):\r\n    getgc = database.collect_garbage()\r\n    for garbage in getgc:\r\n      print(\"Found Garbage Data: \", garbage)\r\n\r\n# <Datagoose>.clear_garbage() -> Clear all garbage data in database\r\n  # Return Type: Bool\r\n  # Example(s):\r\n    database.clear_garbage()\r\n```\r\n# Sorting Database\r\n```py\r\n# <Datagoose>.sort_for_key({key:str}, [reverse:bool:False]) -> Sort database for key.\r\n  # Return Type: List\r\n  # Argument: key\r\n    # Description: The key for sort.\r\n  # Argument: reverse\r\n    # Description: Reverse the result.\r\n  # Example(s):\r\n    point_list = database.sort_for_key(\"point\", reverse=True)\r\n    winner = point_list[0]\r\n\r\n    print(f\"Congrats, {winner['name']}. You won the game!\")\r\n\r\n# <Datagoose>.find_and_sort({data:dict}, {key:str}, [reverse:bool:False]) -> Find and sort database for key.\r\n  # Return Type: List\r\n  # Argument: data\r\n    # Description: The data for find.\r\n  # Argument: key\r\n    # Description: The key for sort.\r\n  # Argument: reverse\r\n    # Description: Reverse the result.\r\n  # Example(s):\r\n    finished = database.find_and_sort({\"finished\": True}, \"time\", reverse=True)\r\n    winner = finished[0]\r\n\r\n    print(f\"Congrats, {winner['name']}. You won the game!\")\r\n```\r\n\r\n<p style=\"font-size: 18px;\">Note: .sort_for_key() not changes the database, just returns sorted version of database.</p>\r\n\r\n# Auto-Backup\r\n```py\r\n# <Datagoose>.start_backup([options:dict:{}]) -> Starts backup for every x second. Raises error when already started.\r\n  # Return Type: None\r\n  # Argument: options\r\n    # Description: Options for auto-backup\r\n  # Example(s):\r\n    database.start_backup({\r\n      \"TIME\": 60, # Second for repeat time. Minimum 30 second, Maximum 31,557,600 (1 year) second.\r\n      \"PATH\": \"database/backups\", # Path for backup files.\r\n      \"ENCRYPTED\": True # Encryption for database.\r\n    })\r\n\r\n# <Datagoose>.stop_backup() -> Stops backup loop. Will not effect if already stopped.\r\n  # Return Type: Bool\r\n  # Example(s):\r\n    database.stop_backup()\r\n\r\n# <Datagoose>.is_backup_open -> Returns backup status.\r\n  # Return Type: Bool\r\n  # Example(s):\r\n    if not database.is_backup_open:\r\n      print(\"Backup Disabled.\")\r\n```\r\n# Using Events\r\n```py\r\n# You can use an event with .on(event_name, function).\r\n# Example:\r\n\r\ndatabase.on(\"before_insert\", lambda v: print(\"Starting to insert data: {0}\".format(v)))\r\n# Or:\r\ndef before_insert_function(value):\r\n    # ...\r\n    print(\"Starting to insert value: {0}\".format(value))\r\n\r\ndatabase.on(\"before_insert\", before_insert_function)\r\n```\r\n# Event List\r\nAll events and quick descriptions;\r\n```py\r\n{\r\n  \"before_insert\": lambda value: None, # Runs before insert.\r\n  \"should_insert\": lambda value: True, # Check method for should value insert.\r\n  \"after_insert\": lambda value: None, # Runs after insert.\r\n\r\n  \"before_update\": lambda now, changes: None, # Runs before update.\r\n  \"should_update\": lambda now, changes: True, # Check method for should data update.\r\n  \"after_update\": lambda now, old: None, # Runs after update.\r\n\r\n  \"before_replace\": lambda now, new: None, # Runs before replace.\r\n  \"should_replace\": lambda now, new: True, # Check method for should data replace.\r\n  \"after_replace\": lambda now, old: None, # Runs after replace.\r\n\r\n  \"before_delete\": lambda value: None, # Runs before delete.\r\n  \"should_delete\": lambda value: True, # Check method for should data delete.\r\n  \"after_delete\": lambda value: None, # Runs after delete.\r\n\r\n  \"before_copy\": lambda value: None, # Runs before copy.\r\n  \"should_copy\": lambda value: True, # Check method for should data copy.\r\n  \"after_copy\": lambda value: None, # Runs after copy.\r\n\r\n  \"before_save\": lambda: None, # Runs before save.\r\n  \"after_save\": lambda: None, # Runs after save.\r\n\r\n  \"before_export\": lambda: None, # Runs before using .dump() (export)\r\n  \"after_export\": lambda: None, # Runs after using .dump() (export)\r\n\r\n  \"before_import\": lambda: None, # Runs before using .load() (import)\r\n  \"after_import\": lambda: None, # Runs after using .load() (import)\r\n\r\n  \"backup_start\": lambda: None, # Runs when auto-backup starts.\r\n  \"backup\": lambda: None, # Runs when backup data.\r\n  \"backup_finish\": lambda: None, # Runs when auto-backup finish\r\n\r\n  \"before_garbage_clear\": lambda: None, # Runs before garbage clear.\r\n  \"after_garbage_clear\": lambda: None # Runs after garbage clear.\r\n}\r\n```\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/5elenay/datagoose/",
    "keywords": "database,lightweight,json,python-database,json-database,fast,secure",
    "license": "GNU General Public License v3 (GPLv3)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "datagoose",
    "package_url": "https://pypi.org/project/datagoose/",
    "platform": "",
    "project_url": "https://pypi.org/project/datagoose/",
    "project_urls": {
      "Bug Tracker": "https://github.com/5elenay/datagoose/issues",
      "Homepage": "https://github.com/5elenay/datagoose/"
    },
    "release_url": "https://pypi.org/project/datagoose/1.6.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Easy to use 👋 fast & lightweight ☄️ secure 🔐 JSON based database for python! 🐍.",
    "version": "1.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10548812,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3734fe848b5555f38acd7fd43b60fcf877a8d94a5f3ad4fba8012ea110e64fd",
          "md5": "d4fe426a3b0dddd94b40103208aea165",
          "sha256": "7027db2457647bf0938eb804cd7fc6cb88641564038e4334092df8af935b1ebe"
        },
        "downloads": -1,
        "filename": "datagoose-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d4fe426a3b0dddd94b40103208aea165",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15729,
        "upload_time": "2021-04-04T11:08:46",
        "upload_time_iso_8601": "2021-04-04T11:08:46.695169Z",
        "url": "https://files.pythonhosted.org/packages/d3/73/4fe848b5555f38acd7fd43b60fcf877a8d94a5f3ad4fba8012ea110e64fd/datagoose-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc6e64a0f0881eb2d941aaa9ed22ae83af988e0272166b5fcd83847b197d6343",
          "md5": "2366e9135da02a1455cc8bf9f57c0271",
          "sha256": "62de8853e8e71d2f2313ba0bb2d004691e1b49ba567dfbbc5fddca4757314ee5"
        },
        "downloads": -1,
        "filename": "datagoose-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2366e9135da02a1455cc8bf9f57c0271",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5489,
        "upload_time": "2021-04-27T07:03:19",
        "upload_time_iso_8601": "2021-04-27T07:03:19.187268Z",
        "url": "https://files.pythonhosted.org/packages/cc/6e/64a0f0881eb2d941aaa9ed22ae83af988e0272166b5fcd83847b197d6343/datagoose-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "459c2311c7e4d06ff3577258c5d5ca1d3936670367602ede4537c1b3f130e92c",
          "md5": "2ca18197f519b1fe3e567385ffed27c9",
          "sha256": "f1647ae000a812f107a73abe606a73da77a72457203b80b9039754b894ccc876"
        },
        "downloads": -1,
        "filename": "datagoose-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2ca18197f519b1fe3e567385ffed27c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5485,
        "upload_time": "2021-04-27T07:08:35",
        "upload_time_iso_8601": "2021-04-27T07:08:35.805094Z",
        "url": "https://files.pythonhosted.org/packages/45/9c/2311c7e4d06ff3577258c5d5ca1d3936670367602ede4537c1b3f130e92c/datagoose-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb2163ddd790a016c90b31f896c901804b97175402844585548f819c5e308fb4",
          "md5": "69777e2d8aeb043886a4c7ee62ee8605",
          "sha256": "1071a766c51a3b2dc2d26da048f639cf539f25b94317edce828a1b3fab3e18b3"
        },
        "downloads": -1,
        "filename": "datagoose-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "69777e2d8aeb043886a4c7ee62ee8605",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7185,
        "upload_time": "2021-04-27T22:20:36",
        "upload_time_iso_8601": "2021-04-27T22:20:36.274142Z",
        "url": "https://files.pythonhosted.org/packages/cb/21/63ddd790a016c90b31f896c901804b97175402844585548f819c5e308fb4/datagoose-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51f76ea6d889a6b3242e9d94547a777d12e86cde2fd8de02f472b206c89665d6",
          "md5": "8aee28e3804630a1618d1936188a4f6b",
          "sha256": "cc96d47c179162eeb8206a0af5b905df8c223759d527c48a4e6c9cd727577773"
        },
        "downloads": -1,
        "filename": "datagoose-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8aee28e3804630a1618d1936188a4f6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7289,
        "upload_time": "2021-04-30T11:22:11",
        "upload_time_iso_8601": "2021-04-30T11:22:11.660757Z",
        "url": "https://files.pythonhosted.org/packages/51/f7/6ea6d889a6b3242e9d94547a777d12e86cde2fd8de02f472b206c89665d6/datagoose-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7db595558232350b8fb9d7fd91687082d9412b3cdab5f805f7e7aac300efe29",
          "md5": "71b084d04b37eb7be6676c1686f8ee62",
          "sha256": "7cbc32772ee4df8b9ca04e8c7690feb0b82c4863cfe6da1cc17f1b490ad0155e"
        },
        "downloads": -1,
        "filename": "datagoose-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "71b084d04b37eb7be6676c1686f8ee62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7341,
        "upload_time": "2021-04-30T11:28:15",
        "upload_time_iso_8601": "2021-04-30T11:28:15.401088Z",
        "url": "https://files.pythonhosted.org/packages/a7/db/595558232350b8fb9d7fd91687082d9412b3cdab5f805f7e7aac300efe29/datagoose-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30d20381a6cfe68a9a85a1c46276e0c17badbb5976baa859e68ff5643d305097",
          "md5": "10c967660b2efb182ec641c6b35251d5",
          "sha256": "771befd7fabbf2de848d018d0314cda9b9074aaf4b63a1a24a4c25b95f68c6c1"
        },
        "downloads": -1,
        "filename": "datagoose-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "10c967660b2efb182ec641c6b35251d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11683,
        "upload_time": "2021-05-03T22:18:25",
        "upload_time_iso_8601": "2021-05-03T22:18:25.073484Z",
        "url": "https://files.pythonhosted.org/packages/30/d2/0381a6cfe68a9a85a1c46276e0c17badbb5976baa859e68ff5643d305097/datagoose-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abe04295e9c969c5fc96e5cdfca98c205ac98dca8234ba25220d131cc9236bc5",
          "md5": "145b380ad8e1649b89e487cf781dc40a",
          "sha256": "c09ba3b7931e4711490e564c15378abe7bf940b49eddafcf83ff2c35a41f104e"
        },
        "downloads": -1,
        "filename": "datagoose-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "145b380ad8e1649b89e487cf781dc40a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12932,
        "upload_time": "2021-05-05T21:38:40",
        "upload_time_iso_8601": "2021-05-05T21:38:40.870051Z",
        "url": "https://files.pythonhosted.org/packages/ab/e0/4295e9c969c5fc96e5cdfca98c205ac98dca8234ba25220d131cc9236bc5/datagoose-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b42c56003f10b456e2f6249033b29ee88a78ff7b087654869dd916b1e13f4042",
          "md5": "41a914b5da2342a8073225dadc3b33ec",
          "sha256": "2d731ac43377a6aea10db363ae3dfeef8ffa3cccd0e767c4ad9c2f3b11e5b1e3"
        },
        "downloads": -1,
        "filename": "datagoose-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "41a914b5da2342a8073225dadc3b33ec",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13185,
        "upload_time": "2021-05-09T03:40:25",
        "upload_time_iso_8601": "2021-05-09T03:40:25.215082Z",
        "url": "https://files.pythonhosted.org/packages/b4/2c/56003f10b456e2f6249033b29ee88a78ff7b087654869dd916b1e13f4042/datagoose-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfdec8c0924be342211268ece5e19f2e53df22b6ad9cdada2c6d3b64a5c2e239",
          "md5": "1a0772ed9351e5d3e624eac63eb3ec82",
          "sha256": "d48f7666a06b6c132e414021bfab5237c24c855e7802a7bc6ba08465ea2774f9"
        },
        "downloads": -1,
        "filename": "datagoose-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1a0772ed9351e5d3e624eac63eb3ec82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14150,
        "upload_time": "2021-05-10T02:26:55",
        "upload_time_iso_8601": "2021-05-10T02:26:55.795091Z",
        "url": "https://files.pythonhosted.org/packages/bf/de/c8c0924be342211268ece5e19f2e53df22b6ad9cdada2c6d3b64a5c2e239/datagoose-1.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c058de2b6bdc3d344b9b0ac33d242b30020e1ba952750a59bda1bd78600ce24f",
          "md5": "6b00014df300e6ac59aaf9bce6b45a9e",
          "sha256": "baf2dd5fc1dc751be4370e2e2c1ca6fdd88f53910bd3024307dd20433d2b36a0"
        },
        "downloads": -1,
        "filename": "datagoose-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6b00014df300e6ac59aaf9bce6b45a9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14174,
        "upload_time": "2021-05-10T18:46:12",
        "upload_time_iso_8601": "2021-05-10T18:46:12.486781Z",
        "url": "https://files.pythonhosted.org/packages/c0/58/de2b6bdc3d344b9b0ac33d242b30020e1ba952750a59bda1bd78600ce24f/datagoose-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa5b9b17ebd2efadc5f84c04d31439d572577a2a4da527ec4852639acd553de0",
          "md5": "471fb7ff15d2597056647aa1675dea0a",
          "sha256": "16f4faa4a32e98a31d1e4d5824d46542c23cac95322f2c2007f90fb3df344e66"
        },
        "downloads": -1,
        "filename": "datagoose-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "471fb7ff15d2597056647aa1675dea0a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16557,
        "upload_time": "2021-05-14T20:19:40",
        "upload_time_iso_8601": "2021-05-14T20:19:40.205446Z",
        "url": "https://files.pythonhosted.org/packages/aa/5b/9b17ebd2efadc5f84c04d31439d572577a2a4da527ec4852639acd553de0/datagoose-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4fe2d4157afc59468c12b60d3cc297d1e6d8c77b84c4a24eebd2c68bbd62ad5",
          "md5": "1d2471da06974341a44e0cd98ee7907a",
          "sha256": "56e7b9e46e6275dc75ef91482d2d8e8ed809c91676d8f05d6deea8830876539a"
        },
        "downloads": -1,
        "filename": "datagoose-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1d2471da06974341a44e0cd98ee7907a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16383,
        "upload_time": "2021-05-18T16:28:23",
        "upload_time_iso_8601": "2021-05-18T16:28:23.150692Z",
        "url": "https://files.pythonhosted.org/packages/a4/fe/2d4157afc59468c12b60d3cc297d1e6d8c77b84c4a24eebd2c68bbd62ad5/datagoose-1.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b39fb37bcd591a02360da1df7e99f506cf0796a554cbae224922ba3cb54bc4e4",
          "md5": "098a86e2ac47362617c771d313e2b0b1",
          "sha256": "be0a469a2d9bc40921c685d114b69ecdbbf4269e471c681432ad03b51215f75d"
        },
        "downloads": -1,
        "filename": "datagoose-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "098a86e2ac47362617c771d313e2b0b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17309,
        "upload_time": "2021-05-21T22:28:19",
        "upload_time_iso_8601": "2021-05-21T22:28:19.236099Z",
        "url": "https://files.pythonhosted.org/packages/b3/9f/b37bcd591a02360da1df7e99f506cf0796a554cbae224922ba3cb54bc4e4/datagoose-1.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ec3e566c431eb2dd45ead5d42d04fed0fdff077865bf8237a1d86d43efba211",
          "md5": "0684438e23cc04b808c8b9937d986aba",
          "sha256": "ee7008d4e2f3dd90dc512a566e19567d21e51382dde419ea216f00e466b17513"
        },
        "downloads": -1,
        "filename": "datagoose-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0684438e23cc04b808c8b9937d986aba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18230,
        "upload_time": "2021-05-25T20:13:01",
        "upload_time_iso_8601": "2021-05-25T20:13:01.014091Z",
        "url": "https://files.pythonhosted.org/packages/4e/c3/e566c431eb2dd45ead5d42d04fed0fdff077865bf8237a1d86d43efba211/datagoose-1.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0b5fb43890c9e7ba60ea46fa89d6218af6706bfa817b48f2f32424ed7d2e92b",
          "md5": "722cbb4a568f490475c3b3199e822ab8",
          "sha256": "74d4193ab6507d3aa0c59a420ef2d9dbad09b2b568939e6b6ae2514b72d98390"
        },
        "downloads": -1,
        "filename": "datagoose-1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "722cbb4a568f490475c3b3199e822ab8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16310,
        "upload_time": "2021-06-03T13:58:32",
        "upload_time_iso_8601": "2021-06-03T13:58:32.773422Z",
        "url": "https://files.pythonhosted.org/packages/e0/b5/fb43890c9e7ba60ea46fa89d6218af6706bfa817b48f2f32424ed7d2e92b/datagoose-1.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e0b5fb43890c9e7ba60ea46fa89d6218af6706bfa817b48f2f32424ed7d2e92b",
        "md5": "722cbb4a568f490475c3b3199e822ab8",
        "sha256": "74d4193ab6507d3aa0c59a420ef2d9dbad09b2b568939e6b6ae2514b72d98390"
      },
      "downloads": -1,
      "filename": "datagoose-1.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "722cbb4a568f490475c3b3199e822ab8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16310,
      "upload_time": "2021-06-03T13:58:32",
      "upload_time_iso_8601": "2021-06-03T13:58:32.773422Z",
      "url": "https://files.pythonhosted.org/packages/e0/b5/fb43890c9e7ba60ea46fa89d6218af6706bfa817b48f2f32424ed7d2e92b/datagoose-1.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}