{
  "info": {
    "author": "Tomasz Sieprawski",
    "author_email": "tomasz@sieprawski.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "= What it is =\r\n\r\nUbjsonstream is a pure 100% Python-3.x library for dealing with UBJSON ([1]) format.\r\n\r\nIt contains:\r\n* an asynchronous deserializer built upon something-like-state-machine concept - you give it a callback, you pass it data, callback gets called as soon as any valid data is parsed.\r\n\tOf course you can pass it a regular string/bytearray with data, and it will parse it for you. But in case you have very large data, you can leave this asynchronous.\r\n* a regular serializer - you give it an object, you get pure data,\r\n* and serializer can also pretty-print objects.\r\n\r\nThis library does not neccessarily adhere 1-to-1 to proposed drafts, but covers pretty much.\r\n\r\n= What is covered =\r\n\r\nTypes:\r\n* `null` <=> `None`\r\n* `noop` <=> custom `ubjsonstream.NOOP` singleton\r\n* `true`/`false` <=> `True`/`False`\r\n* `uint8`/`int8`/`int16`/`int32`/`int64` <=> int\r\n\t* Serializer chooses the best ubjson type depending on the value. See `src/ubjsonstream/writer.py` `IntMatcher`.\r\n* `float32`/`float64` <=> `float`\r\n\t* Currently serializer hardcodes to `float64`. Don't have now the idea how to check whether float32 is better for a number.\r\n* `char` <=> 1-length `str`, only in deserializer\r\n* high-precision-number <=> Python's `Decimal`\r\n\t* Note: As the draft says, deserializer first parses an integer length for the HPNs. Currently there is no limit for that (aka both uint8 and int64 can be parsed), and there is no security around that. Be warned.\r\n* `string` <=> `str`\r\n\t* Same as for HPNs.\r\n* `array` <=> `list`\r\n\t* Deserializer supports both optimized formats (known length + known type).\r\n\t* Serializer deduces which format to use.\r\n\t\t* Optimized formats are used always for length>3. Did not think that type/count is worth for shorter ones. But I did not make any statistics towards that. There is no switch for that.\r\n\t\t* If all elements are exact same type, the array will be typed. By exact I mean that array of int8 and int64 will be left untyped for now.\r\n\t\t* Not sure whether this is legal, but... Typed array of unoptimized arrays are supported!\r\n\t\t* Of course, typed arrays of 512-nulls are supported. And they are very short!\r\n* `object` <=> `dict`\r\n\t* Optimized formats supported same way as for arrays.\r\n\r\n= Stuff to be done =\r\n* Probably more hardcore test suite...\r\n* User-defined custom markers (and their de/serializers).\r\n\t* Maybe a preludium to some kinky RPC?\r\n\t* This may be helpful in some high-enterprisy internal projects with already defined 50 data types.\r\n* Maybe migrate some code to C? I think that 99,999% of this code does not require objects, inheritance nor duck-typing.\r\n* Promoting int/float values when optimizing containers. For now array of 99x int8 and 1x int64 will remain unoptimized. Ok, the example might be bad, you can reverse the numbers.\r\n* loads() and dumps(). Python nerds will love it.\r\n* Add type hints from PEP-484 into code.\r\n* Or maybe forcing optimizations on containers? Probably some new Python types for that would help.\r\n* I am not proud of the design of it all. Lots of classes and state-machine oriented it is, but not neccessarily this is readible. But it works.\r\n\r\n= Structure =\r\nObviously `src` contains all sources:\r\n* `src/ubjsonstream/reader.py` is the deserializing stuff,\r\n* `src/ubjsonstream/writer.py` is the serializing stuff, \r\n* `src/test` contain tests for all of these. These are not unit ones, but... I think they test throughly the whole library. Among these are:\r\n\t* Generated tests for all primitives\r\n\t* Generated tests for containers:\r\n\t\t* unoptimized, optimized with count, optimized with type\r\n\t\t* arrays, objects\r\n\t\t* empty, with one element, with n elements of one type (not only primitives), with 1 elements per type, with n x n\r\n\t\t* up to 3rd level\r\n\t* Some basic corner cases (e.g. no array-end marker allowed after array-type marker).\r\n\r\n= Requirements =\r\n\r\n* Python >= 3.x. Library uses `unittest.mock`.\r\n\t* No sign of generators here!\r\n* Optional: `pip install coverage`\r\n\r\n= Building =\r\n\r\nProbably:\r\n\r\n\tpython setup.py install\r\n\r\nOr, if you want to build some eggs/wheels:\r\n\r\n\tpython setup.py bdist_egg\r\n\tpython setup.py bdist_wheel # If you have wheel installed of course.\r\n\r\n= Usage =\r\n\r\nTo follow someday... For now, you can adhere to tests in `src/test/__init__.py`:\r\n\t* `TestCornerCases` - some corner cases. These hardcoded inputs are bad and invalid.\r\n\t* `TestReadWriteVariousCombinations` - ok, this does not show you example objects to (de)serialize (they are generated by `generate_reader_tests` - you are brave, you will understand these), but basic usage is visible pretty much,\r\n\r\nRunning'em:\r\n\r\n\tpython setup.py test\r\n\r\nIf you have `coverage` tool, you can see how badly written this is:\r\n\r\n\tpython setup.py coverage\r\n\r\nAnd then check `covhtml/index.html`.\r\n\r\n= Contact =\r\n* Tomasz Sieprawski <tomasz@sieprawski.eu>\r\n\r\n[1] http://ubjson.org/",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": "ubjson",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "ubjsonstream",
    "package_url": "https://pypi.org/project/ubjsonstream/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/ubjsonstream/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/ubjsonstream/0.0.2/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "A library for serializing and async deserializing UBJSON",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2039061,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf638c2cd4008154588a56b10f1127025f59cc5dea0ca770a368b649ce3acf99",
          "md5": "7f426c6ffba80bf6ad1e5a7764fa3813",
          "sha256": "f242c38af9a8106cca22314281f5c2ba011764ef40e920084fb2a81e70b2dd83"
        },
        "downloads": -1,
        "filename": "ubjsonstream-0.0.2.zip",
        "has_sig": false,
        "md5_digest": "7f426c6ffba80bf6ad1e5a7764fa3813",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15977,
        "upload_time": "2016-03-31T22:08:47",
        "upload_time_iso_8601": "2016-03-31T22:08:47.269919Z",
        "url": "https://files.pythonhosted.org/packages/bf/63/8c2cd4008154588a56b10f1127025f59cc5dea0ca770a368b649ce3acf99/ubjsonstream-0.0.2.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bf638c2cd4008154588a56b10f1127025f59cc5dea0ca770a368b649ce3acf99",
        "md5": "7f426c6ffba80bf6ad1e5a7764fa3813",
        "sha256": "f242c38af9a8106cca22314281f5c2ba011764ef40e920084fb2a81e70b2dd83"
      },
      "downloads": -1,
      "filename": "ubjsonstream-0.0.2.zip",
      "has_sig": false,
      "md5_digest": "7f426c6ffba80bf6ad1e5a7764fa3813",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15977,
      "upload_time": "2016-03-31T22:08:47",
      "upload_time_iso_8601": "2016-03-31T22:08:47.269919Z",
      "url": "https://files.pythonhosted.org/packages/bf/63/8c2cd4008154588a56b10f1127025f59cc5dea0ca770a368b649ce3acf99/ubjsonstream-0.0.2.zip",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}