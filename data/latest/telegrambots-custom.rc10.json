{
  "info": {
    "author": "immmdreza",
    "author_email": "ir310022@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Custom TelegramBots\n\n_I'll make you excited!_\n\nA set of custom classes and helpers to work with telegram bots.\n\n_Enjoy strongly typed and heavily type hinted things._\n\n## Installation\n\nThe package is available at [PYPI](https://pypi.org/project/telegrambots-custom/)\n\n## Simple usage example\n\n_Package is in preview state and theses are all in preview and may change later._\n\nSee [Wiki](https://github.com/python-telegrambots/custom-telegrambots/wiki/) for more working examples.\n\n```py\nfrom telegrambots.custom import (\n    TelegramBot,\n    MessageContext,\n    message_filters as mf,\n)  # -> filters for each update type are in separate modules.\n\n\n# Create main bot object, this object may contains all available api methods.\nbot = TelegramBot(\"BOT_TOKEN\")\n\n# Dispatcher is to process updates and dispatches them to handlers.\ndp = bot.dispatcher  # By default, the dispatcher will process updates sequentially.\n\ndp.add_default_exception_handler()  # Simple err handler that prints error message.\n\n\n# Use decorator to register handler for each update type.\n# You can use filters and combine them.\n@dp.add.handlers.via_decorator.message(mf.Regex(\"^/start\") & mf.private)\nasync def handle_message(\n    context: MessageContext,\n):  # -> async callback function to handle update\n    await context.reply_text(\n        \"Started\"\n    )  # -> bound method for messages, only available in `MessageContext`\n\n\nif __name__ == \"__main__\":\n    # Fire up the event loop.\n    dp.unlimited()\n\n```\n\n### Process updates in parallel\n\nDispatcher processes updates sequentially by default. but you can change the behavior.\n\n```py\n# ---- sniff ----\n\nfrom src.telegrambots.custom.processor import ParallelProcessor\n\n# ---- sniff ----\n\n# Dispatcher is to process updates and dispatches them to handlers.\ndp = Dispatcher(\n    bot,\n    processor_type=ParallelProcessor,  # Now the dispatcher will use ParallelProcessor.\n    # And it will process updates in parallel.\n)\n```\n\n### Manage propagation of handlers\n\nStop processing this handler or all of pending handlers.\n\n```py\n@dp.add.handlers.via_decorator.message(mf.regex(\"^/start\") & mf.private)\nasync def handle_message(context: MessageContext):\n    await context.reply_text(\n        \"Started\"\n    )\n\n    context.propagation.stop()  # -> stop propagating this update to other handlers.\n\n    # ---- or ----\n\n    context.propagation.resume()  # -> continue propagating this update to other handlers.\n\n```\n\n### Custom filters\n\nYou can create custom filters for any type of update.\n\n#### Abstractly ( Slow, Featured )\n\nCreate a class that inherit from `Filter`, then setup your filter.\n\n```py\nfrom typing import Optional\n\nfrom src.telegrambots.custom.filters import Filter\nfrom telegrambots.wrapper.types.objects import Message\n\n\nclass AdvancedMessageFilter(Filter[Message]):\n    def __init__(self) -> None:\n        super().__init__()\n        # ---- do your initialization here ----\n\n    def __check__(self, update: Optional[Message]) -> bool:\n        # ---- check if update is a valid for your case ----\n        self._set_metadata(\"balh\", \"Ablah\")\n        return True\n\n    # ---- or anything you like ----\n\n# @dp.add.handlers.via_decorator.message(AdvancedMessageFilter())\n#    ---- sniff ----\n\n    context[\"balh\"] # Ablah\n```\n\n#### Using factories ( Fast, Low options )\n\nOr you can use filter factories ( available for each type of update ) to quickly create filter.\n\n```py\nimport re\n\nfrom src.telegrambots.custom.filters.messages import message_filter_factory\n\n\ndef regex(pattern: str | re.Pattern[str]):\n    if isinstance(pattern, str):\n        ap = re.compile(pattern)\n    else:\n        ap = pattern\n\n    return message_filter_factory(\n        lambda message: message.text is not None and ap.match(message.text) is not None\n    )\n\n# @dp.add.handlers.via_decorator.message(regex('start'))\n#    ...\n```\n\n### Let have some fun\n\nSo, it's a happy day and you're creating a new handler to receive some info from user.\n\nHere's how you do it to get user's name ( as before ).\n\n``` py\n\n# ---- sniff ----\n\n@dp.add.handlers.via_decorator.message(mf.regex(\"^/start\") & mf.private)\nasync def handle_message(\n    context: MessageContext,\n):  # -> async callback function to handle update\n    await context.reply_text(\"Please gimme you name ...\")\n\n```\n\nThis is where you may go deep thinking ... Where should i get that name ?\n\nMaybe you need another handler to receive what user sends after.\n\n``` py\n\n# ---- sniff ----\n\n@dp.add.handlers.via_decorator.message(mf.regex(\"^/give\") & mf.private)\nasync def handle_message(\n    context: MessageContext,\n):  # -> async callback function to handle update\n    await context.reply_text(\"Please gimme you name ...\")\n\n\n@dp.add.handlers.via_decorator.message(mf.text_message & mf.private)\nasync def gimme_name(\n    context: MessageContext,\n):  # -> async callback function to handle update\n    await context.reply_text(f\"Then your name is {context.update.text}!\")\n\n```\n\nBut this is not right, is it?\n\n- How do we know the text message is related to `/give` command ?\n- The second handler is called on every text message!\n- ...\n\nSo you need a way to keep track of a user, right?\n\nHere's where this package mages!!\n\nYou can use `@context.continue_with.this.message` decorator inside your handler.\n\nIt's much likely similar to `@dp.register_message_handler`, except it takes one more parameter before filter. And it's a `keys`.\n\nKey resolver helps us know \"what should we track?\" in this case it's user's id from message.\n\nLet's get to work:\n\n``` py\n@dp.add.handlers.via_decorator.message(mf.regex(\"^/give\") & mf.private)\nasync def handle_message(\n    context: MessageContext,\n):  # -> async callback function to handle update\n    await context.reply_text(\"Please gimme you name ...\")\n\n    if context.update.from_user: # make sure the message has a user to track the id.\n\n        @context.continue_with.this.message( # this is the actual mage! it make these two handlers related to each other.\n            keys=[MessageSenderId(context.update.from_user.id)], # keep track of user using it's unique id.\n            filter=mf.text_message & mf.private, # any text message is ok here!\n            tag=\"give_name\", # It's optional! you can name the function below instead.\n        )\n        async def _(context: MessageContext):\n            # Now you're 100% sure that this callback function is called only after a call to parent callback \"handle_message\".\n            # Then it's what you actually want.\n            await context.reply_text(f\"Ahh, your name is {context.update.text}!\")\n\n```\n\nAmazing ? it's not finished yet!\n\nWhat if you need another info? like user's age? NO PROBLEM! repeat what you did before.\n\n``` py\n@dp.add.handlers.via_decorator.message(mf.regex(\"^/give\") & mf.private)\nasync def handle_message(\n    context: MessageContext,\n):  # -> async callback function to handle update\n    await context.reply_text(\"Please gimme you name ...\")\n\n    if context.update.from_user:\n\n        @context.continue_with.this.message(\n            keys=[MessageSenderId(context.update.from_user.id)],\n            filter=mf.text_message & mf.private,\n            tag=\"give_name\"\n        )\n        async def _(context: MessageContext):\n            await context.reply_text(f\"Ahh, your name is {context.update.text}!\")\n\n            # ---- new code ----\n            # Let's ask for user's age\n            await context.reply_text(f\"What's your age then?\")\n\n            if context.update.from_user:\n\n                # Again\n                @context.continue_with.this.message_from( # same as keys=[MessageSenderId(context.update from_user.id)],\n\n                    filter=mf.text_message & mf.private,\n                    tag=\"give_age\", # Another name, it's important!\n                    name=context.update.text,  # -> you can pass custom data to handler. they're available in callback's *args or **kwargs.\n                )\n                async def _(context: MessageContext, *args: Any, **kwargs: Any):\n                    await context.reply_text(\n                        f\"So {kwargs['name']}, your age is {context.update.text}!\"\n                    )\n```\n\n#### What about fallback or something\n\nSometimes, you need to apply a fallback for user. as example: when user sends something unrelated, you wanna tell him try again or something.\n\nTo do this, your starter handler should continue with two or more other handlers: one for requested response and other for unrelated updates. And you can do this as well!\n\nThis approach is different from previous. the only difference is that you can't create handlers inside current handlers and they should be created like normal handlers.\n\nLet's create our three handlers\n\n- Starter handler\n- Requested response handler\n- Unrelated update handler\n\n``` py\n\n# ---- sniff ----\n\n# Our starter handler.\n@dp.add.handlers.via_decorator.message(mf.regex(\"^/start\") & mf.private)\nasync def handle_message(context: MessageContext):\n    await context.reply_text(\"Please gimme you name ...\")\n\n# Here we excepted a valid text message.\n@dp.add.handlers.via_decorator.message(filter=mf.text_message)\nasync def give_name(context: MessageContext):\n    await context.reply_text(f\"Ahh, your name is {context.update.text}!\")\n\n# All other type of messages ( non-text ) should go here.\n@dp.add.handlers.via_decorator.message(filter=mf.any_message)\nasync def unrelated(context: MessageContext):\n    await context.reply_text(\"Please try again with a text message.\")\n\n```\n\n#### Let's make these three related\n\nHere you can use method `context.continue_with_many`, it allows an handler to be continued with more than one handlers\n\n> You need to import `from telegrambots.custom.contexts import ContinueWithInfo` in other to add your handlers to this.\n\nLet's modify starter handler:\n\n``` py\n# Use decorator to register handler for each update type.\n# You can use filters and combine them.\n@dp.add.handlers.via_decorator.message(mf.regex(\"^/start\") & mf.private)\nasync def handle_message(context: MessageContext):\n    await context.reply_text(\"Please gimme you name ...\")\n\n    if context.update.from_user:\n        keys = [MessageSenderId(context.update.from_user.id)] # keys is same for both. ( it should be a list )\n        context.continue_with.many(\n            ContinueWithInfo.with_message(\"give_name\", keys, priority=1), # first of all try to continue with `\"give_name\"` if possible ( filters should pass )\n            # If this handler is invoked, we'll stop propagation! so the next one is not triggered.\n            ContinueWithInfo.with_message(\"unrelated\", keys, priority=0), # If the first handler is not triggered and we reached this point, it means the update is unrelated.\n        )\n```\n\nNext, we should tell other two handler, to only be triggered after our starter handler.\n\n```py\n@dp.add.handlers.via_decorator.message(filter=mf.text_message, continue_after=[\"handle_message\"]) # continue only after `\"handle_message\"`\nasync def give_name(context: MessageContext):\n    await context.reply_text(f\"Ahh, your name is {context.update.text}!\")\n    context.propagation.stop() # At this point we received what we needed. then stop.\n\n\n@dp.add.handlers.via_decorator.message(filter=mf.any_message, continue_after=[\"handle_message\"]) # continue only after `\"handle_message\"`\nasync def unrelated(context: MessageContext):\n    await context.reply_text(\"Please try again with a text message.\")\n\n```\n\nNow it's a working example, but it works only ones. ( I the update is unrelated, we just notify user all things are over ).\n\nBut we need our customer to have chances to retry.\n\nIn order to do that, we can tell our unrelated handler to continue with `\"give_name\"` and even itself!\n\nLet's modify unrelated method.\n\n```py\n@dp.add.handlers.via_decorator.message(\n    filter=mf.any_message, continue_after=[\"handle_message\", \"unrelated\"] # notice we added this methods name to `continue_after`, so it can be continued with after itself ( user sends multiple unrelated updates in a row )\n\n    # You can use allow_continue_after_self = True, which dose the same.\n)\nasync def unrelated(context: MessageContext):\n    await context.reply_text(\"Please try again with a text message.\")\n    if context.update.from_user:\n        # Used to resolve the key for the context.\n        keys = [MessageSenderId(context.update.from_user.id)]\n        context.continue_with.many( # now this method can also trigger `\"give_name\"` or itself based on received update. It creates a loop till we get our right answer.\n            ContinueWithInfo.with_message(\"give_name\", keys, priority=1),\n            ContinueWithInfo.with_message(\"unrelated\", keys, priority=0),\n        )\n```\n\nYou need to add `\"unrelated\"` to `\"give_name\"`'s `continue_after` parameter, so it can be continued after `\"unrelated\"` for a \"try again\".\n\n```py\n@dp.add.handlers.via_decorator.message(\n    filter=mf.text_message, continue_after=[\"handle_message\", \"unrelated\"]\n)\nasync def give_name(context: MessageContext):\n    await context.reply_text(f\"Ahh, your name is {context.update.text}!\")\n    context.propagation.stop()\n```\n\nnow everything is ready! fast and clear.\n\nLet see full example\n\n```py\nfrom telegrambots.custom import (\n    TelegramBot,\n    message_filters as mf,\n    ContinueWithInfo,\n    MessageContext,\n)\n\n\nbot = TelegramBot(\"BOT_TOKEN\")\ndp = bot.dispatcher\n\ndp.add_default_exception_handler()\n\n\n@dp.add.handlers.via_decorator.message(\n    filter=mf.text_message & mf.private, continue_after=[\"handle_message\", \"unrelated\"]\n)\nasync def give_name(context: MessageContext):\n    await context.reply_text(f\"Ahh, your name is {context.update.text}!\")\n    context.propagation.stop()\n\n\n@dp.add.handlers.via_decorator.message(\n    filter=mf.any_message & mf.private,\n    continue_after=[\"handle_message\"],\n    allow_continue_after_self=True,\n)\nasync def unrelated(context: MessageContext):\n    await context.reply_text(\"Please try again with a text message.\")\n\n    if context.update.from_user:\n        user_id = context.update.from_user.id\n        context.continue_with.many(\n            ContinueWithInfo.with_message_from(\"give_name\", user_id, priority=1),\n            ContinueWithInfo.with_message_from(\"unrelated\", user_id, priority=0),\n        )\n\n\n@dp.add.handlers.via_decorator.message(mf.Regex(\"^/start\") & mf.private)\nasync def handle_message(context: MessageContext):\n    await context.reply_text(\"Please gimme you name ...\")\n\n    if context.update.from_user:\n        user_id = context.update.from_user.id\n        context.continue_with.many(\n            ContinueWithInfo.with_message_from(\"give_name\", user_id, priority=1),\n            ContinueWithInfo.with_message_from(\"unrelated\", user_id, priority=0),\n        )\n\n\nif __name__ == \"__main__\":\n    dp.unlimited()\n\n```\n\n> Remember, all continue_with like methods stop execution of the current handler. and nothing after them is gonna work inside handler.\n\n_Are you excited now?_\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/python-telegrambots/custom-telegrambots",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "telegrambots-custom",
    "package_url": "https://pypi.org/project/telegrambots-custom/",
    "platform": null,
    "project_url": "https://pypi.org/project/telegrambots-custom/",
    "project_urls": {
      "Bug Tracker": "https://github.com/python-telegrambots/custom-telegrambots/issues",
      "Homepage": "https://github.com/python-telegrambots/custom-telegrambots"
    },
    "release_url": "https://pypi.org/project/telegrambots-custom/0.0.7rc3/",
    "requires_dist": [
      "aiohttp (==3.8.1)",
      "telegrambots (==0.0.13rc0)"
    ],
    "requires_python": ">=3.10",
    "summary": "A custom extension packages for telegrambots.",
    "version": "0.0.7rc3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13828780,
  "releases": {
    "0.0.1rc0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a418694757186bc885d3e5c2d779b70b5fc1457f58208fe055a95043f8a689be",
          "md5": "3b889dc1af31a7c37dc04c6ba4ad73d0",
          "sha256": "38d860c17e0fd44395ffa1664147abf5786921f8ab5ce67ce3634acca9b563e1"
        },
        "downloads": -1,
        "filename": "telegrambots_custom-0.0.1rc0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b889dc1af31a7c37dc04c6ba4ad73d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 2244,
        "upload_time": "2022-04-30T18:35:11",
        "upload_time_iso_8601": "2022-04-30T18:35:11.624123Z",
        "url": "https://files.pythonhosted.org/packages/a4/18/694757186bc885d3e5c2d779b70b5fc1457f58208fe055a95043f8a689be/telegrambots_custom-0.0.1rc0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f827021ecde07221b6f3c4a0c115d7eb021d17da53409258c6ea95ef5950e29e",
          "md5": "1e54a745128503f4b0078bd2068c3747",
          "sha256": "66bf7ef099538f18f2d77a2877505a9ffe4efcceccdc16a1e8bd2f1bf2af224b"
        },
        "downloads": -1,
        "filename": "telegrambots-custom-0.0.1rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "1e54a745128503f4b0078bd2068c3747",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 2159,
        "upload_time": "2022-04-30T18:35:13",
        "upload_time_iso_8601": "2022-04-30T18:35:13.628371Z",
        "url": "https://files.pythonhosted.org/packages/f8/27/021ecde07221b6f3c4a0c115d7eb021d17da53409258c6ea95ef5950e29e/telegrambots-custom-0.0.1rc0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2rc0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58f959687f2fa4d47546dda28584b2c76a9dae7ac845c651a0d714ac78da15e4",
          "md5": "69a0446e9a1588930101a85523f0d8c1",
          "sha256": "030ae5fe8f26cee233caeebfe52532b80f17ebcd167ed40c91880e5efcbbec94"
        },
        "downloads": -1,
        "filename": "telegrambots_custom-0.0.2rc0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "69a0446e9a1588930101a85523f0d8c1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 3830,
        "upload_time": "2022-04-30T18:46:47",
        "upload_time_iso_8601": "2022-04-30T18:46:47.172576Z",
        "url": "https://files.pythonhosted.org/packages/58/f9/59687f2fa4d47546dda28584b2c76a9dae7ac845c651a0d714ac78da15e4/telegrambots_custom-0.0.2rc0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce1fc37c7053f630455b0d7822a44fa2d17ca60cc528c071d530b9ae26e45dd1",
          "md5": "6a8491c02502832330b3133fa93eb333",
          "sha256": "a35c2d5cce658b5d2c1abc25db2df115eea8881eee6fe865aa79d9b3496d7a1f"
        },
        "downloads": -1,
        "filename": "telegrambots-custom-0.0.2rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "6a8491c02502832330b3133fa93eb333",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 3240,
        "upload_time": "2022-04-30T18:46:48",
        "upload_time_iso_8601": "2022-04-30T18:46:48.783441Z",
        "url": "https://files.pythonhosted.org/packages/ce/1f/c37c7053f630455b0d7822a44fa2d17ca60cc528c071d530b9ae26e45dd1/telegrambots-custom-0.0.2rc0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4rc0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e2a8fbe2878e57e16efd832b0bc17d70f37b547445d986eadcf9cb0d991bc35",
          "md5": "331895b0eca69ddc0a53aee45021fc27",
          "sha256": "e614a6818c3d79bb051c6ce59382589fb0bd1bcd4dc4e116f6e10ae158f674bb"
        },
        "downloads": -1,
        "filename": "telegrambots_custom-0.0.4rc0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "331895b0eca69ddc0a53aee45021fc27",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 18100,
        "upload_time": "2022-05-02T14:16:09",
        "upload_time_iso_8601": "2022-05-02T14:16:09.540196Z",
        "url": "https://files.pythonhosted.org/packages/5e/2a/8fbe2878e57e16efd832b0bc17d70f37b547445d986eadcf9cb0d991bc35/telegrambots_custom-0.0.4rc0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "043c641c83439d44ad8e6b5a2e785dfad6a0c9dff1ebc26ef7a9874a362f0e1b",
          "md5": "7bf2ed69033f74553b9bb783ab5f2386",
          "sha256": "16a3607d945eb4fd9dbc9ed540cacdccc55710165836dedec16d231a9ce7d52a"
        },
        "downloads": -1,
        "filename": "telegrambots-custom-0.0.4rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "7bf2ed69033f74553b9bb783ab5f2386",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 12096,
        "upload_time": "2022-05-02T14:16:11",
        "upload_time_iso_8601": "2022-05-02T14:16:11.570274Z",
        "url": "https://files.pythonhosted.org/packages/04/3c/641c83439d44ad8e6b5a2e785dfad6a0c9dff1ebc26ef7a9874a362f0e1b/telegrambots-custom-0.0.4rc0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5rc0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "897507dd6650a344f55e7e6f52424e6503c07c7597f4557942d9f4334aee5507",
          "md5": "8bfdd4adf41d8ee6a264882b8ea0a961",
          "sha256": "98f03ddf62fb6cbab6ad3dae2f675cb1be41bbfeb3a0fe0a37e8617720c6a3d2"
        },
        "downloads": -1,
        "filename": "telegrambots_custom-0.0.5rc0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8bfdd4adf41d8ee6a264882b8ea0a961",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 37423,
        "upload_time": "2022-05-08T09:58:07",
        "upload_time_iso_8601": "2022-05-08T09:58:07.982731Z",
        "url": "https://files.pythonhosted.org/packages/89/75/07dd6650a344f55e7e6f52424e6503c07c7597f4557942d9f4334aee5507/telegrambots_custom-0.0.5rc0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d02c7ce9395f0e5b6af6c484b30d405aa1f59a20980adb9941a421a515e8159",
          "md5": "943d8e301b53e0239e4b2d4a8cdbc45f",
          "sha256": "fd64ae3a5ea6beb3d87ee68fbb53d90e62502c0410b62562779e93e02d625e0e"
        },
        "downloads": -1,
        "filename": "telegrambots-custom-0.0.5rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "943d8e301b53e0239e4b2d4a8cdbc45f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 31918,
        "upload_time": "2022-05-08T09:58:10",
        "upload_time_iso_8601": "2022-05-08T09:58:10.247128Z",
        "url": "https://files.pythonhosted.org/packages/2d/02/c7ce9395f0e5b6af6c484b30d405aa1f59a20980adb9941a421a515e8159/telegrambots-custom-0.0.5rc0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6rc0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b9c2cc8fa41a832b7da2275ad067202d419589369e1f4b87303c71382dd9d3c",
          "md5": "a6df665c937c679c1dcdfb4dbcb52cbf",
          "sha256": "c76f885bf6f6c9259c77fc53a86362621bcc6c03118745bb34511d2f85e0e455"
        },
        "downloads": -1,
        "filename": "telegrambots_custom-0.0.6rc0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6df665c937c679c1dcdfb4dbcb52cbf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 44546,
        "upload_time": "2022-05-10T19:16:49",
        "upload_time_iso_8601": "2022-05-10T19:16:49.501860Z",
        "url": "https://files.pythonhosted.org/packages/6b/9c/2cc8fa41a832b7da2275ad067202d419589369e1f4b87303c71382dd9d3c/telegrambots_custom-0.0.6rc0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d8b828bb5ef75eac808a9924884efd84855811f719a74022b9b61f084b0b49b",
          "md5": "a505a57587ed4267cc626fd4790c0163",
          "sha256": "c1a28d64a6ca0cb11b6691f7152e2d9b4eff3cb9661aaa65d0d5f75e4b4d0667"
        },
        "downloads": -1,
        "filename": "telegrambots-custom-0.0.6rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "a505a57587ed4267cc626fd4790c0163",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 36597,
        "upload_time": "2022-05-10T19:16:52",
        "upload_time_iso_8601": "2022-05-10T19:16:52.185226Z",
        "url": "https://files.pythonhosted.org/packages/5d/8b/828bb5ef75eac808a9924884efd84855811f719a74022b9b61f084b0b49b/telegrambots-custom-0.0.6rc0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cce19391f083c907131155a56c58092f68cd1a994d08c027d9e01c3f627978af",
          "md5": "367baf13636d1cb5cd453609bee723ec",
          "sha256": "0f32ebe8cf8d352442af3539fdef174a26748e508918e7daec200e64dd5adb2c"
        },
        "downloads": -1,
        "filename": "telegrambots_custom-0.0.6rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "367baf13636d1cb5cd453609bee723ec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 46227,
        "upload_time": "2022-05-11T20:21:08",
        "upload_time_iso_8601": "2022-05-11T20:21:08.823387Z",
        "url": "https://files.pythonhosted.org/packages/cc/e1/9391f083c907131155a56c58092f68cd1a994d08c027d9e01c3f627978af/telegrambots_custom-0.0.6rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ec2d19f7fa4cf5d07d9e4e2f44dc82b37ec65d784cdd654da3842b60a1c03ff",
          "md5": "9bf09dd163452fd569e8adedfccd8a44",
          "sha256": "7155d2e6cbe7afe2c7c28f916a0ea9c515c7f75a955c805b91ce593553051187"
        },
        "downloads": -1,
        "filename": "telegrambots-custom-0.0.6rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "9bf09dd163452fd569e8adedfccd8a44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 37734,
        "upload_time": "2022-05-11T20:21:11",
        "upload_time_iso_8601": "2022-05-11T20:21:11.459317Z",
        "url": "https://files.pythonhosted.org/packages/6e/c2/d19f7fa4cf5d07d9e4e2f44dc82b37ec65d784cdd654da3842b60a1c03ff/telegrambots-custom-0.0.6rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a703cfa44f574d0d5c967cb63ec6cff5c4fdaa16cfec8a9e3e5fd3345a458848",
          "md5": "5f0d7a36d80ba7b74d850d19ec06b246",
          "sha256": "7bfffa599a360247681ff88893be7d38d467d549ee59cb113207cb8c0cc49b27"
        },
        "downloads": -1,
        "filename": "telegrambots_custom-0.0.6rc2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f0d7a36d80ba7b74d850d19ec06b246",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 46349,
        "upload_time": "2022-05-12T08:22:14",
        "upload_time_iso_8601": "2022-05-12T08:22:14.401299Z",
        "url": "https://files.pythonhosted.org/packages/a7/03/cfa44f574d0d5c967cb63ec6cff5c4fdaa16cfec8a9e3e5fd3345a458848/telegrambots_custom-0.0.6rc2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa9bc3878e5499360e82af90670913af607501fcc063a0ba518001e5e2ee8630",
          "md5": "90cfcb7b161779fa8cb93cd69b4d53d3",
          "sha256": "b8e9ed14674a267ec4a007c8758b8bca0c374748734cb9a5056d0708b7a2e808"
        },
        "downloads": -1,
        "filename": "telegrambots-custom-0.0.6rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "90cfcb7b161779fa8cb93cd69b4d53d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 37712,
        "upload_time": "2022-05-12T08:22:16",
        "upload_time_iso_8601": "2022-05-12T08:22:16.776727Z",
        "url": "https://files.pythonhosted.org/packages/fa/9b/c3878e5499360e82af90670913af607501fcc063a0ba518001e5e2ee8630/telegrambots-custom-0.0.6rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7rc0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0799028e302f5846f860bdfcb21465c55bfb597909cee3f5cae6037ffa37577c",
          "md5": "203157b295f315f098fea091aa8cba54",
          "sha256": "72b1ba7cb09285d762c3d01ef3750b3c1d0530454eadf48ba0bf85b3e077510f"
        },
        "downloads": -1,
        "filename": "telegrambots_custom-0.0.7rc0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "203157b295f315f098fea091aa8cba54",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 45773,
        "upload_time": "2022-05-12T15:52:22",
        "upload_time_iso_8601": "2022-05-12T15:52:22.752140Z",
        "url": "https://files.pythonhosted.org/packages/07/99/028e302f5846f860bdfcb21465c55bfb597909cee3f5cae6037ffa37577c/telegrambots_custom-0.0.7rc0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "da79091ac64ff6b39a1d21d4ebc98cfd91225de866f8a7fbd4ba445ef8cefb5e",
          "md5": "00e24ed80be05615c1dedcca9b3055b7",
          "sha256": "c1777eae0333ab426d999f14aef1e6e7202db97adf238c743d38b9a8115c22d2"
        },
        "downloads": -1,
        "filename": "telegrambots-custom-0.0.7rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "00e24ed80be05615c1dedcca9b3055b7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 37355,
        "upload_time": "2022-05-12T15:52:24",
        "upload_time_iso_8601": "2022-05-12T15:52:24.678402Z",
        "url": "https://files.pythonhosted.org/packages/da/79/091ac64ff6b39a1d21d4ebc98cfd91225de866f8a7fbd4ba445ef8cefb5e/telegrambots-custom-0.0.7rc0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7653c2f70ea8775111ab7ff462c2d777fce20090c047defd3a0c7e78681b225",
          "md5": "1dc5276093d283f2e9dc6ba8eda9b4a8",
          "sha256": "81c9712ea050572fe3bce7bdf0036a26336e83b4ede378af2f66de4e58111880"
        },
        "downloads": -1,
        "filename": "telegrambots_custom-0.0.7rc2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1dc5276093d283f2e9dc6ba8eda9b4a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 47560,
        "upload_time": "2022-05-16T10:47:21",
        "upload_time_iso_8601": "2022-05-16T10:47:21.766176Z",
        "url": "https://files.pythonhosted.org/packages/f7/65/3c2f70ea8775111ab7ff462c2d777fce20090c047defd3a0c7e78681b225/telegrambots_custom-0.0.7rc2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f15489d3236a9c36341ec8814c3894b7d2e4c3cdb95dcd3f9e7fff7a77a5394d",
          "md5": "de17af2654e6579c8b94997f09f18cc2",
          "sha256": "25464f03a46e14d9ecf88f78fdcb54535dd06a0c5daadfe4f6bdf43dde16d97c"
        },
        "downloads": -1,
        "filename": "telegrambots-custom-0.0.7rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "de17af2654e6579c8b94997f09f18cc2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 38620,
        "upload_time": "2022-05-16T10:47:24",
        "upload_time_iso_8601": "2022-05-16T10:47:24.534421Z",
        "url": "https://files.pythonhosted.org/packages/f1/54/89d3236a9c36341ec8814c3894b7d2e4c3cdb95dcd3f9e7fff7a77a5394d/telegrambots-custom-0.0.7rc2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7rc3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a49b06f26eced429dfb2df50b484d331198ebaa6b7865e43d90fc73cc155b5a",
          "md5": "5a53e43a760b8467acbdc2e1832ea2b9",
          "sha256": "cde581860fe0925b2c30485c2b2375a76612245492b556d7d776252542fc851a"
        },
        "downloads": -1,
        "filename": "telegrambots_custom-0.0.7rc3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a53e43a760b8467acbdc2e1832ea2b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 47697,
        "upload_time": "2022-05-16T11:21:17",
        "upload_time_iso_8601": "2022-05-16T11:21:17.839210Z",
        "url": "https://files.pythonhosted.org/packages/2a/49/b06f26eced429dfb2df50b484d331198ebaa6b7865e43d90fc73cc155b5a/telegrambots_custom-0.0.7rc3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "99d2c209fb835fc2bece13320bc58de0a097f849d2e60bede6be2d19124c7768",
          "md5": "ad0c5aa8ec0fb32d5883aa1d70e8465d",
          "sha256": "f9c082929284844564a291ee10f85e78bfddfccde54f5ae5376c2a54b1528aaa"
        },
        "downloads": -1,
        "filename": "telegrambots-custom-0.0.7rc3.tar.gz",
        "has_sig": false,
        "md5_digest": "ad0c5aa8ec0fb32d5883aa1d70e8465d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 38732,
        "upload_time": "2022-05-16T11:21:20",
        "upload_time_iso_8601": "2022-05-16T11:21:20.096320Z",
        "url": "https://files.pythonhosted.org/packages/99/d2/c209fb835fc2bece13320bc58de0a097f849d2e60bede6be2d19124c7768/telegrambots-custom-0.0.7rc3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2a49b06f26eced429dfb2df50b484d331198ebaa6b7865e43d90fc73cc155b5a",
        "md5": "5a53e43a760b8467acbdc2e1832ea2b9",
        "sha256": "cde581860fe0925b2c30485c2b2375a76612245492b556d7d776252542fc851a"
      },
      "downloads": -1,
      "filename": "telegrambots_custom-0.0.7rc3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a53e43a760b8467acbdc2e1832ea2b9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 47697,
      "upload_time": "2022-05-16T11:21:17",
      "upload_time_iso_8601": "2022-05-16T11:21:17.839210Z",
      "url": "https://files.pythonhosted.org/packages/2a/49/b06f26eced429dfb2df50b484d331198ebaa6b7865e43d90fc73cc155b5a/telegrambots_custom-0.0.7rc3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "99d2c209fb835fc2bece13320bc58de0a097f849d2e60bede6be2d19124c7768",
        "md5": "ad0c5aa8ec0fb32d5883aa1d70e8465d",
        "sha256": "f9c082929284844564a291ee10f85e78bfddfccde54f5ae5376c2a54b1528aaa"
      },
      "downloads": -1,
      "filename": "telegrambots-custom-0.0.7rc3.tar.gz",
      "has_sig": false,
      "md5_digest": "ad0c5aa8ec0fb32d5883aa1d70e8465d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 38732,
      "upload_time": "2022-05-16T11:21:20",
      "upload_time_iso_8601": "2022-05-16T11:21:20.096320Z",
      "url": "https://files.pythonhosted.org/packages/99/d2/c209fb835fc2bece13320bc58de0a097f849d2e60bede6be2d19124c7768/telegrambots-custom-0.0.7rc3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}