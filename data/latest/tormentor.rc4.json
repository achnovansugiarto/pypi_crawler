{
  "info": {
    "author": "Anguelos Nicolaou",
    "author_email": "anguelos.nicolaou@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering"
    ],
    "description": ".. raw:: html\n\n  <p align=\"center\">\n    <img width=\"50%\" src=\"https://github.com/anguelos/tormentor/blob/master/docs/source/_static/img/tormentor_logo.svg\" />\n  </p>\n\n--------------------------------------------------------------------------------\n\npyTORch augMENTOR\n-----------------\n\n\n.. image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n    :target: https://opensource.org/licenses/Apache-2.0\n\n.. image:: https://badge.fury.io/py/tormentor.svg\n    :target: https://badge.fury.io/py/tormentor\n\n.. image:: https://codecov.io/gh/anguelos/tormentor/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/anguelos/tormentor/\n    :alt: Testing Coverage\n\n.. image:: https://readthedocs.org/projects/tormentor/badge/?version=latest\n    :target: https://tormentor.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n\n\nImage data augmentation with pytorch\n\nInstalation:\n============\n\nInstaling current version with pip:\n\n.. code:: bash\n    \n    pip install tormentor\n    #pip3 install --user --upgrade git+https://github.com/anguelos/tormentor\n\nUse Cases:\n==========\n\nAugment single sample:\n----------------------\n.. code-block:: python\n\n    python import torch, tormentor\n    img = torch.rand(3, 119,137)\n    mask = torch.ones([1, 119,137])\n    pc = (torch.rand(9),torch.rand(9))\n    aug = tormentor.Perspective()\n    new_img = aug(img)\n    aug(pc, img) # augment pointcloud and respective image\n    aug(pc, img, compute_img=False) # augment only pointcloud, img passed for dimensions\n    aug(pc, torch.empty([1, 320, 240]), compute_img=False) # augment only pointcloud, tensor passed for dimensions\n    aug(mask, is_mask=True) # augment mask\n\n\nAugment batch:\n--------------\n\n.. code-block:: python\n\n    python import torch, tormentor\n    img = torch.rand(7,3, 119,137)\n    mask = torch.ones([7,1, 119,137])\n    pcl = [(torch.rand(9), torch.rand(9)) for _ in range(7)]\n    aug = tormentor.Rotate()\n    new_pcl, new_img = aug(pcl, img) # augment pointcloud and respective image\n    aug(pcl, img, compute_img=False) # augment only pointcloud, img passed for dimensions\n    aug(pcl, torch.empty([7, 1, 320, 240]), compute_img=False) # augment only pointcloud, tensor passed for dimensions\n    aug(mask, is_mask=True) # augment mask\n\n\nAugment MSCoco compliant Dataset:\n---------------------------------\n\n.. code-block:: python\n\n   import torchvision, tormentor\n   ds = torchvision.datasets.CocoDetection(root=\"./tmp_data/coco/val2017\",\n                                           annFile=\"./tmp_data/coco/annotations/instances_val2017.json\",\n                                           transform=torchvision.transforms.ToTensor());\n   aug_ds = tormentor.AugmentedCocoDs(ds, tormentor.Wrap(), device=\"cpu\", add_mask=True)\n   inputs, target, validity = aug_ds[3] # accesing a single sample\n   aug_ds.show_augmentation(3)\n\n.. figure:: docs/source/_static/img/example.png\n\nIf the device is a GTX 980 Ti time is 0.1 sec. for larger images, the GPU efficiency grows up to x10.\n\n\nChange Augmentation Distributions:\n----------------------------------\n\n.. code-block:: python\n\n   import math, tormentor, torch, torchvision\n   tile = lambda x: torchvision.transforms.ToPILImage()(torchvision.utils.make_grid(x.cpu(), nrow=12))\n   generic_aug = tormentor.Rotate()\n   RotateABit = tormentor.Rotate.override_distributions(radians = tormentor.Uniform((0., math.pi / 8)))\n   custom_aug = RotateABit()\n   batch = torch.rand(24, 3, 32, 38, device=\"cuda\")\n   tile(torch.cat([batch, generic_aug(batch), custom_aug(batch)], dim=0)).show()\n\n.. figure:: docs/source/_static/img/rotation.png\n  :alt: Rotation Example\n\n\nRandom Augmentation Type:\n-------------------------\n\n.. code-block:: python\n\n   import math, tormentor, torch, torchvision\n   tile = lambda x: torchvision.transforms.ToPILImage()(torchvision.utils.make_grid(x.cpu(), nrow=12))\n   augmentation_types = [tormentor.Perspective, tormentor.Wrap, tormentor.PlasmaBrightness]\n   CustomAugmentation = tormentor.AugmentationChoice.create(augmentation_types)\n   aug = CustomAugmentation()\n   batch = torch.rand(24, 3, 64, 64, device=\"cuda\")\n   tile(aug(batch)).show()\n   # checkup on determinism:\n   tile(aug(batch)).show()\n\n.. figure:: docs/source/_static/img/choice.png\n\n\nAugmentation Cascade:\n---------------------\n\n.. code-block:: python\n\n   import math, tormentor, torch, torchvision\n   tile = lambda x: torchvision.transforms.ToPILImage()(torchvision.utils.make_grid(x.cpu(), nrow=12))\n   augmentation_types = [tormentor.Perspective, tormentor.PlasmaBrightness]\n   CustomAugmentation = tormentor.AugmentationCascade.create(augmentation_types)\n   aug = CustomAugmentation()\n   batch = torch.rand(24, 3, 64, 64, device=\"cuda\")\n   tile(aug(batch)).show()\n\n.. figure:: docs/source/_static/img/cascade.png\n\n\nCreate Custom Augmentation Class:\n---------------------------------\n\n.. code-block:: python\n\n    python import tormentor\n\n    class Lense(tormentor.SpatialImageAugmentation):\n        center_x = tormentor.Uniform((-.3, .3))\n        center_y = tormentor.Uniform((-.3, .3))\n        gamma = tormentor.Uniform((1., 1.))\n\n        def generate_batch_state(self, sampling_tensors):\n            batch_sz = sampling_tensors[0].size(0)\n            gamma = type(self).gamma(batch_sz, device=sampling_tensors[0].device).view(-1)\n            center_x = type(self).center_x(batch_sz, device=sampling_tensors[0].device).view(-1)\n            center_y = type(self).center_y(batch_sz, device=sampling_tensors[0].device).view(-1)\n            return center_x, center_y, gamma\n\n        @classmethod\n        def functional_sampling_field(cls, sampling_field, center_x, center_y, gamma):\n            field_x, field_y = sampling_field\n            center_x = center_x.unsqueeze(dim=1).unsqueeze(dim=1)\n            center_y = center_y.unsqueeze(dim=1).unsqueeze(dim=1)\n            gamma = gamma.unsqueeze(dim=1).unsqueeze(dim=1)\n            distance = ((center_x - field_x)**2 + (center_y - field_y)**2) ** .5\n            #distance = 1/(1+distance)\n            field_x, field_y = (field_x + field_x * distance ** gamma) , (field_y + field_y * distance ** gamma)\n            return field_x, field_y\n\n.. figure:: docs/source/_static/img/lence.png\n\nDesign Principles\n=================\n\n-  Simplify the definition of augmentations\n-  Every instance of every augmentation class is deterministic.\n-  Inputs and Outputs are pytorch tensors and pytorch is prefered for\n   all computation.\n-  All data are by default 4D: [batch x channel x width x height].\n-  Single sample augmentation: batch-size must always be 1.\n-  Threadsafety: Every augmentation instance must be threadsafe.\n-  Input/Output is restricted to one or more channels of 2D images.\n-  Augmentations either preserve channels or the preserve pixels\n   (space).\n-  The augmentation class has also its factory as a classmethod\n-  Restrict dependencies on torch and kornia (at least for the core\n   packages).\n\nFactory Dictates Constructor\n============================\n\nIn order to minimize the code needed to define an augmentation. The\nfactory defines the random distributions from wich augmentation sample.\nThe inherited constructor handles random seeds. The method\nforward\\_sample\\_img samples from the random distributions\naug\\_parameters and employs them.\n\nInternal Conventions\n====================\n\n-  Pointclouds are represented in image coordinates Sampling fields in\n   normalised -1,1 coordinates\n-  By default we write code for batch processing\n-  Determinism is strictly handled by BaseAugmentation and all\n   augment\\_\\*\\*\\* methods.\n-  An augmentation must reside in a single device\n-  All randomness must be coming from pytorch\n-  Spatial augmentation samplingfields are normalised to -1, 1 so their\n   effect magnitude is proporsional to image size (They are top down).\n\nCite\n====\n\n.. code-block:: python\n\n    @misc{tormentor,\n        doi = {10.48550/ARXIV.2204.03776},\n        url = {https://arxiv.org/abs/2204.03776},\n        author = {Nicolaou, Anguelos and Christlein, Vincent and Riba, Edgar and Shi, Jian and Vogeler, Georg and Seuret, Mathias},\n        keywords = {Computer Vision and Pattern Recognition (cs.CV), Artificial Intelligence (cs.AI), FOS: Computer and information sciences, FOS: Computer and information sciences},\n        title = {TorMentor: Deterministic dynamic-path, data augmentations with fractals},\n        publisher = {arXiv},\n        year = {2022},\n        copyright = {Creative Commons Attribution 4.0 International}\n    }\n\n\nAccepted at `ECV 2022\n<https://sites.google.com/view/ecv2022/home>`_ .\n\nDownload `(pdf)\n<https://arxiv.org/pdf/2204.03776.pdf>`_\n.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/anguelos/tormentor/archive/0.1.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/anguelos/tormentor",
    "keywords": "pytorch,augmentation,kornia,image segmentation,computer vision",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tormentor",
    "package_url": "https://pypi.org/project/tormentor/",
    "platform": null,
    "project_url": "https://pypi.org/project/tormentor/",
    "project_urls": {
      "Download": "https://github.com/anguelos/tormentor/archive/0.1.0.tar.gz",
      "Homepage": "https://github.com/anguelos/tormentor"
    },
    "release_url": "https://pypi.org/project/tormentor/0.1.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Image Data Augmentation with Pytorch and Kornia",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13480538,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb40854218964b22704dba6b3ffa89b83fbdbf6c0a23021564fff524d44a1147",
          "md5": "be5c6962e03687b594ac75a0b0dce2e0",
          "sha256": "098074631737c7667277c1adcc4fa29cde7e1f308d1624b61f5b28def7524b0a"
        },
        "downloads": -1,
        "filename": "tormentor-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be5c6962e03687b594ac75a0b0dce2e0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 32137,
        "upload_time": "2020-07-20T07:31:33",
        "upload_time_iso_8601": "2020-07-20T07:31:33.147645Z",
        "url": "https://files.pythonhosted.org/packages/eb/40/854218964b22704dba6b3ffa89b83fbdbf6c0a23021564fff524d44a1147/tormentor-0.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef252d4f3d87b2aa1ec8145e226e86fbf4b5a9f733a2307a2a69b379b1478ffe",
          "md5": "af321b7c3d1c69a8fba9fcec6ce2d7ee",
          "sha256": "abce6ef0ef4d526c9ff83294d0add038f4a9d8f0c7c328eee7dd4dae896fd6cc"
        },
        "downloads": -1,
        "filename": "tormentor-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "af321b7c3d1c69a8fba9fcec6ce2d7ee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30362,
        "upload_time": "2020-07-20T07:31:35",
        "upload_time_iso_8601": "2020-07-20T07:31:35.563577Z",
        "url": "https://files.pythonhosted.org/packages/ef/25/2d4f3d87b2aa1ec8145e226e86fbf4b5a9f733a2307a2a69b379b1478ffe/tormentor-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c035ac8e59ec6b791b85b5c86978910bc879629a7b2715f7b752d4bdc63b5e3",
          "md5": "d8b83dfbb27ba0ef885f151d9fa536e9",
          "sha256": "c0b6c753a62b87241eeb09c9dd71511a339bcd9acb92957c40bdc8b6636868dd"
        },
        "downloads": -1,
        "filename": "tormentor-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d8b83dfbb27ba0ef885f151d9fa536e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37158,
        "upload_time": "2021-02-07T06:56:08",
        "upload_time_iso_8601": "2021-02-07T06:56:08.783840Z",
        "url": "https://files.pythonhosted.org/packages/5c/03/5ac8e59ec6b791b85b5c86978910bc879629a7b2715f7b752d4bdc63b5e3/tormentor-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8a2ce17b229f828adb64c9b7ae2ec4c5fc2dbaa3bec99d45464883ca44a3efa",
          "md5": "1d3780ba634092fee5379b7e5b16a4ef",
          "sha256": "7ce1ed6893ac9a6ff0e90a597a0267d1bf06362ec078c4621ad8aaf358bb2208"
        },
        "downloads": -1,
        "filename": "tormentor-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1d3780ba634092fee5379b7e5b16a4ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 37936,
        "upload_time": "2021-02-24T04:22:43",
        "upload_time_iso_8601": "2021-02-24T04:22:43.805308Z",
        "url": "https://files.pythonhosted.org/packages/d8/a2/ce17b229f828adb64c9b7ae2ec4c5fc2dbaa3bec99d45464883ca44a3efa/tormentor-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7945c6f8ea6487cbe08b63b5ec9b4e3381dd73dad95a7ada2887c09e6932a545",
          "md5": "93a97f3a117ca41776c6143593125630",
          "sha256": "4b3c01d99476bcafc91c51f141065ad39348d6b45e358cf4db8688bfeec7d9bc"
        },
        "downloads": -1,
        "filename": "tormentor-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "93a97f3a117ca41776c6143593125630",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 50501,
        "upload_time": "2022-04-11T17:26:13",
        "upload_time_iso_8601": "2022-04-11T17:26:13.071873Z",
        "url": "https://files.pythonhosted.org/packages/79/45/c6f8ea6487cbe08b63b5ec9b4e3381dd73dad95a7ada2887c09e6932a545/tormentor-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7945c6f8ea6487cbe08b63b5ec9b4e3381dd73dad95a7ada2887c09e6932a545",
        "md5": "93a97f3a117ca41776c6143593125630",
        "sha256": "4b3c01d99476bcafc91c51f141065ad39348d6b45e358cf4db8688bfeec7d9bc"
      },
      "downloads": -1,
      "filename": "tormentor-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "93a97f3a117ca41776c6143593125630",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 50501,
      "upload_time": "2022-04-11T17:26:13",
      "upload_time_iso_8601": "2022-04-11T17:26:13.071873Z",
      "url": "https://files.pythonhosted.org/packages/79/45/c6f8ea6487cbe08b63b5ec9b4e3381dd73dad95a7ada2887c09e6932a545/tormentor-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}