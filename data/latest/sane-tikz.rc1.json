{
  "info": {
    "author": "Renato Negrinho",
    "author_email": "renato.negrinho@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "\n\n# Overview\n\n`sane_tikz` follows a draw-and-place philosophy.\nYou draw on the canvas and then use functionality to place the visual elements.\nThere is no distinction between auxiliary code that you write and the code of `sane_tikz` so always consider creating functions to help you accomplish things when creating your figures.\n\nEvery program starts with\n```\nimport sane_tikz as stz\nimport formatting as fmt\n```\nwhich imports the drawing, grouping, alignment, distribution, and coordinate computation functionalities of the library.\n`formatting` contains functionality to generate the TikZ formatting strings that are used for different purposes (e.g., making lines dashed or dotted, or changing the opacity of a fill).\nEventually, every example ends with a call to `stz.draw_to_tikz_standalone` which generates the code for a TikZ figure to a file.\nThis draw function unpacks a visual element into its components and draws them individually.\n\nPerhaps the most useful concept in `sane_tikz` is grouping.\nIf you have visual elements `e1` and `e2`, you can group them to create a new visual element `e_grouped = [e1, e2]`, i.e., by wrapping the visual elements in a list.\nThe new element `e_grouped` will be manipulated as a visual element in its own right, meaning that its bounding box is updated accordingly, and therefore all functions that rely on bounding box computations have their behavior updated.\nThe order that elements are grouped matters when drawing them to the canvas.\nA visual element is decomposed into its sub-elements (if any) by going top to bottom and left to right.\nEvery element can be eventually decomposed down to basic visual elements such as math equations, line segments, circles, rectangles, and so on.\nThis recursive decomposition can be inspected in the `stz.draw_to_tikz` function which is used by the `stz.draw_to_tikz_standalone`.\nThis means that we can impose a drawing ordering simply by ordering the elements correctly in the grouping.\nIn the call to `stz.draw_to_tikz_standalone`, all the elements of the figure are grouped.\nOftentimes for figures, there is no particular ordering that must be imposed because the sub-elements don't overlap.\n\nOther important concepts are moving existing elements and computing coordinates of interest.\n\n# Simple example\n\nThe following example is drawn by the code below, which will be broken down into pieces for explaining its purpose.\nThis code corresponds to [this](https://github.com/negrinho/sane_tikz/blob/master/examples/pentagon.pdf) figure.\n\nImporting the library and defining some basic values for specifying the figure.\nIn examples, we often use this format which allows us to change some high-level characteristics of the figure and regenerate the output.\nThis is great compared to what you would need to do in a WYSIWYG editor to change high-level aspects of the figure (e.g., spacing or line width).\n```\nimport sane_tikz as stz\nimport formatting as fmt\n\nlabel_spacing = 0.25\npentagon_radius = 1.2\nx_axis_length = 4.0\ny_axis_length = 3.0\nextra_length = 0.4\na_circle_radius = 0.08\ns_fmt = fmt.arrow_heads(\"end\")\nf_fmt = fmt.line_and_fill_colors('black', 'black')\n```\n\nThis defines the coordinates of the vertices of the pentagon and finally generates the representation for the pentagon through the call to `stz.closed_path`.\n```\ncs = [\n   stz.coords_on_circle([0, 0], pentagon_radius, 90.0 + i * (360.0 / 5))\n   for i in range(5)\n]\ne = stz.closed_path(cs)\n```\n\nThis is the computation of the coordinates for placing various labels in the figure.\nNote that the computation of these coordinates is done with respect to the vertices of the pentagon by translating them in appropriate directions.\n```\norigin_cs = stz.translate_coords_horizontally(cs[2], -1.0)\nx_end_cs = stz.translate_coords_horizontally(origin_cs, x_axis_length)\ny_end_cs = stz.translate_coords_vertically(origin_cs, y_axis_length)\nx_start_cs = stz.translate_coords_horizontally(origin_cs, -extra_length)\ny_start_cs = stz.translate_coords_vertically(origin_cs, -extra_length)\nx_label_cs = stz.translate_coords_vertically(x_end_cs, -label_spacing)\ny_label_cs = stz.translate_coords_horizontally(y_end_cs, -label_spacing)\norigin_label_cs = stz.translate_coords_diagonally(origin_cs, -label_spacing)\n```\n\nCreate the representation of the axes.\nNote that they are grouped together.\nA formatting string is used to create a line segment with an arrowhead.\nSee `formatting` for other options.\n```\naxes = [\n   stz.line_segment(x_start_cs, x_end_cs, s_fmt),\n   stz.line_segment(y_start_cs, y_end_cs, s_fmt)\n]\n```\n\nCreates the representations of the labels in the figure along with a filled circle on point A.\n```\nlabels = [\n   stz.latex([cs[0][0], cs[0][1] + label_spacing], \"$C$\"),\n   stz.latex([cs[1][0] - label_spacing, cs[1][1]], \"$B$\"),\n   stz.latex([cs[2][0], cs[2][1] - a_circle_radius - label_spacing],\n             \"$A(1, 0)$\"),\n   stz.latex([cs[3][0], cs[3][1] - label_spacing], \"$E$\"),\n   stz.latex([cs[4][0] + label_spacing, cs[4][1]], \"$D$\"),\n   stz.circle(cs[2], a_circle_radius, f_fmt),\n   stz.latex(x_label_cs, \"$x$\"),\n   stz.latex(y_label_cs, \"$y$\"),\n   stz.latex(origin_label_cs, \"$O$\"),\n]\n```\n\nFinally, all the elements in the figure are grouped into a single one (i.e., `[e, axes, labels]`, which represents the pentagon, the axes, and the labels, respectively).\nThe compilation of this figure into TikZ code is done by `stz.draw_to_tikz_standalone`.\nThe resulting tex file can then be compiled by a Latex compiler (e.g., pdflatex) to generate the visual output (see [here](https://github.com/negrinho/sane_tikz/blob/master/examples/pentagon.tex) for the result for this figure).\nAll figures are drawn in a lazy fashion, where first we define the representation of the figure in terms of basic visual elements and then compile them to TikZ code.\nThis allows us to define visual elements and move them around before generating the final visual output.\nGrouping is a very powerful feature.\nFor example, in the call below, we could have omitted all labels by simply passing `[e, axes]` instead of `[e, axes, labels]`.\nWe are also free to keep adding elements and generating new figures with them, even after the call to `stz.draw_to_tikz_standalone`.\nThis makes it easy to generate many related figures.\n```\nstz.draw_to_tikz_standalone([e, labels, axes], \"pentagon.tex\")\n```\n\n# Design overview\n\n## Naming\n\nWe often prefix or suffix variable names with `cs` when they refer to coordinates, which are simply a list with a pair of numbers, which is a coordinate of a point in the canvas.\nFunctions that return coordinates often contain the substring `coords` in their names, e.g., `stz.translate_coords_horizontally` and `stz.coords_on_circle`.\nThese functions are often useful for computing coordinates of interest, such as coordinates on a circle, on a line segment, or on a rectangle.\nFor example, if you wanted the coordinates that are 45 degrees outside the origin at a distance of 5cm, you would call `stz.coords_on_circle([0, 0], 5.0, 45.0)`, which would output the desired values.\nThese functions mimic some of the hand drawing procedures that you do with a ruler, compass, and protractor.\n\nFor visual elements, we often use the variable `e` (or `e_lst`) to denote them.\nThese are elements that can eventually be converted to a TikZ representation.\nContrary to coordinates, there isn't a single substring that appears in a function name when it produces elements to be drawn.\nExamples of this are `stz.circle` and `stz.line_segment`.\nThese do not draw directly an element, simply they return a representation of the element to be drawn (i.e., a representation from which the TikZ string representing the object can be drawn).\nThe representation of an element to draw is, if we are talking about the most basic elements, a dictionary from strings to values that contains enough information to generate the TikZ representation for that element, and if more complex, a list of nested lists containing many visual elements (i.e., these are created through grouping).\n\n## Grouping\n\nGrouping is one of the most important functionalities of the language, and one of the most powerful, especially when combined with the placement and alignment functionalities that use bounding box computations.\nGrouping corresponds to lumping various elements into a new element.\nThis is done easily by wrapping the elements into a list and passing the list around.\nThis new element will function as an element in its own right with respect to bounding box computations.\n\n## Translation and alignment\n\nGiven various elements, often regular such as multiple circles of the same size, there is often the need of aligning them (horizontally or vertically) or distributing them (horizontally or vertically).\nThese needs are met by functions that take visual elements (grouped or not) and translate them around to implement the desired transformation.\nNote that these functions have side-effects, meaning that the state of the visual elements passed to the functions will change to implement the desired transformations.\nTranslation and alignment functions operate on visual elements (grouped or not) and usually have movement-related terms in their function name (e.g., `translate`, `place`, `align`, and `distribute`).\nThe fact that they take elements can often be determined by the names of arguments of the functions, e.g., `e` or `e_lst`.\nSome functions take reference elements that are used to compute quantities that are then used to specify a placement, e.g., `place_above_and_align_to_the_center` takes `e`, `e_ref`, and `spacing`; `e` is the element to be placed above `e_ref` such that the bounding boxes of `e` and `e_ref` are at a distance `spacing` from each other and their centers are aligned; only `e` is moved with respect to `e_ref`.\nMany functions of this type exist such as `place_below_and_align_to_the_center`, `distribute_vertically_with_spacing`, any many more.\nI recommend reading the source code for these functions which are often short and rely on high-level functionality (see immediately below for one example).\n```\ndef distribute_vertically_with_spacing(e_lst, spacing):\n   for i in range(1, len(e_lst)):\n       e = e_lst[i]\n       e_prev = e_lst[i - 1]\n       cs = bbox(e)[1]\n       cs_prev = bbox(e_prev)[0]\n       delta_y = cs_prev[1] - cs[1] + spacing\n       translate(e, 0, delta_y)\n```\n\nThere exist also functions of this type that work over coordinates rather than elements (i.e., they take coordinates).\nThese functions usually have `cs` in the name of the arguments and `coords` in the name of the function (e.g., `translate_coords_horizontally`).\n\n## Bounding boxes\n\nBounding boxes are convenient summaries when working with figures.\nThey are used widely in translation and alignment functionalities.\nThe figures are summarized into a pair of coordinates of the top left corner and the bottom right corner of the bounding box.\nThe computation of the bounding box for an element is done by ungrouping recursively an element until it is expressed into basic elements for which we can compute the bounding box and then put back together through logic on how to combine multiple bounding boxes into a single bounding box (see `stz.bbox`).\nThis function is widely used, both in functionality within sane_tikz (e.g., `place_to_the_right`, `distribute_vertically_with_spacing`, and many others) and in drawing specific figures.\nBounding box computation may fail in cases where the grouped element contains a basic element which doesn’t yet have functionality to compute its bounding box.\n\n## Coordinates\n\nCoordinates are the starting point for much of what is done in this library.\nCoordinates are used in specifying different visual elements, for example rectangles (i.e., `stz.rectangle` which is specified through the coordinates of the top left corner and the bottom corner and an optional formatting string (e.g., for changing the colors of the line or the fill)). Examples of functions in this category are\n`coords_on_circle`, `antipodal_coords`, `coords_on_ellipse`, `coords_on_rectangle`, `coords_on_line_segment`, `coords_on_line_segment`, `coords_on_line_with_x_value`, `coords_on_line_with_y_value`, `coords_from_deltas`, and `coords_on_grid`.\nCoordinate computation is also important for moving elements to specific places.\n\nOcasionally, coordinates are computed with respect to other elements or other coordinates, e.g., `center_coords` and `coords_from_bbox_fn` compute the coordinates of the center of the bounding box of an element and the coordinates that are the output of a function of the coordinates of the bounding box, respectively.\n\n## LaTex support\n\nLatex typesetting is accomplished through `stz.latex` which takes both a string (in math mode or otherwise) and the coordinates of where that string is to be placed.\nFormatting options using `anchor` and `alignment` are often useful for specifying the placement of the string relative to the coordinates specified.\nThis implementation allows to write LaTex code in a fairly transparent way, e.g., any string that would be possible to write in math mode (between `$` or `$$`) is valid and so are environments (although additional trial and error may be necessary here in case errors are thrown).\nThe conversion of the LaTex string to the TiKz code is fairly transparent as it is done through a node placed at the coordinates specified.\n\n## Formatting\n\nMost formatting is delegated to the `formatting` library.\nThe functionality of this library was designed to help generate TikZ formatting strings given a set of options.\nThese can be options for fill, line width, line style, opacity, defining new colors, using color maps, and so on.\nMultiple formatting strings can be combined into a single one using `fmt.combine_tikz_strs`.\nThis string is then passed as an argument (often called `tikz_str` in the function signature) to define appropriate options (e.g., in `stz.rectangle`).\nThere is little enforcement of the correctness of the string; the functions there serve mostly as a way of making clear what are the most common options available and providing guidance in assigning values to them.\n`formatting` is not comprehensive; any valid formatting string that you would use in TikZ is valid and can be plugged in directly, rather than going through functions in `formatting`.\nSee the figures in the example folder for more information about their usage.\n\n# A more complex example\n\nHere is an explanation for [tree.py](https://github.com/negrinho/sane_tikz/blob/master/examples/tree.py) which produces [tree.pdf](https://github.com/negrinho/sane_tikz/blob/master/examples/tree.pdf).\nThis example shows the use of many of the functionalities discussed in this tutorial such as grouping, placement, and coordinate computation.\n```\n# reproduction of https://en.wikipedia.org/wiki/Binary_search_algorithm#/media/File:Binary_search_tree_search_4.svg\n\nimport sane_tikz as stz\nimport formatting as fmt\n```\n\nBasic formatting options for the figure.\nChanges to the figure can be accomplished by changing the values for these parameters and regenerating the TikZ code.\n```\nnode_radius = 0.30\nvertical_node_spacing = 1.4 * node_radius\nfirst_level_horizontal_node_spacing = 1.8\narrow_angle = 30.0\nbbox_spacing = 0.1\nlabel_spacing = 0.4\nline_width = 1.2 * fmt.standard_line_width\n\ns_lw = fmt.line_width(line_width)\n```\n\nAuxiliary function to draw a circle with Latex annotation at `(0, 0)`.\n```\nfn = lambda expr: [\n   stz.circle([0, 0], node_radius, s_lw),\n   stz.latex([0, 0], expr)\n]\n```\n\nAuxiliary function to place the node horizontally in its place.\n```\ndef place(e, lst):\n   delta = 0.0\n   for i, sign in enumerate(lst):\n       delta += sign * (node_radius + first_level_horizontal_node_spacing /\n                           (2 * (i + 1.0)))\n   stz.translate_horizontally(e, delta)\n```\n\nAuxiliary function to connect two nodes (with optional color for line). `line_segment_between_circles` returns a line segment that you can draw.\n```\ndef connect(e_from, e_to, color_name=\"black\"):\n   s_fmt = fmt.combine_tikz_strs(\n       [fmt.arrow_heads(\"end\"),\n           fmt.line_color(color_name), s_lw])\n   from_cs = stz.center_coords(e_from)\n   to_cs = stz.center_coords(e_to)\n   out_angle = stz.vector_to_angle([from_cs, to_cs])\n   in_angle = out_angle + 180.0\n   return stz.line_segment_between_circles(from_cs, node_radius, out_angle,\n                                           to_cs, node_radius, in_angle, s_fmt)\n```\n\nAuxiliary function to compute the bounding box of `e_lst` and expand it additivively to draw the dashed bounding box.\n```\ndef dashed_bbox(e_lst):\n   s_fmt = fmt.combine_tikz_strs([fmt.line_style(\"dashed\"), s_lw])\n   top_left_cs, bottom_right_cs = stz.bbox(e_lst)\n   return stz.rectangle_from_additive_resizing(top_left_cs, bottom_right_cs,\n                                               2.0 * bbox_spacing,\n                                               2.0 * bbox_spacing, s_fmt)\n```\n\nAuxiliary function to label a node to the left and the right at some spacing from it.\n```\ndef label_right(e, expr):\n   cs = stz.coords_from_bbox_with_fn(e, stz.right_center_coords)\n   cs = stz.translate_coords(cs, label_spacing, 0.1)\n   return stz.latex(cs, \"\\\\scriptsize{%s}\" % expr)\n\ndef label_left(e, expr):\n   cs = stz.coords_from_bbox_with_fn(e, stz.left_center_coords)\n   cs = stz.translate_coords(cs, -label_spacing, 0.1)\n   return stz.latex(cs, \"\\\\scriptsize{%s}\" % expr)\n```\n\nCreates all the nodes.\nThey aren't yet in the right positions.\n```\nnodes = []\nfor i in [8, 3, 10, 1, 6, 14, 4, 7, 13]:\n   if i == 4:\n       s = \"\\\\textbf{%s}\" % str(i)\n   else:\n       s = str(i)\n   nodes.append(fn(s))\n```\n\nDistributes them vertically.\nNote that the nodes are grouped by level.\n```\nstz.distribute_vertically_with_spacing(\n   [nodes[0:1], nodes[1:3], nodes[3:6], nodes[6:9]][::-1], vertical_node_spacing)\n```\n\nFixes the horizontal spacing between the nodes of the tree at each level.\n```\nplace(nodes[1], [-1])\nplace(nodes[2], [1])\nplace(nodes[3], [-1, -1])\nplace(nodes[4], [-1, 1])\nplace(nodes[5], [1, 1])\nplace(nodes[6], [-1, 1, -1])\nplace(nodes[7], [-1, 1, 1])\nplace(nodes[8], [1, 1, -1])\n```\n\nDraws all the connections.\n```\nconnections = [\n   connect(nodes[0], nodes[1], \"blue\"),\n   connect(nodes[0], nodes[2]),\n   connect(nodes[1], nodes[3]),\n   connect(nodes[1], nodes[4], \"blue\"),\n   connect(nodes[2], nodes[5]),\n   connect(nodes[4], nodes[6], \"blue\"),\n   connect(nodes[4], nodes[7]),\n   connect(nodes[5], nodes[8]),\n]\n```\n\nHighlight the node that you care about by changing the TikZ formatting string for it.\n(Kind of low-level, but can be done by accessing directly the dictionary representations of the basic visual elements).\n```\nnodes[-3][0][\"tikz_str\"] = fmt.combine_tikz_strs(\n   [nodes[-3][0][\"tikz_str\"],\n       fmt.line_and_fill_colors(\"mygreen\", \"mygreen\")])\nnodes[-3][1][\"tikz_str\"] = fmt.combine_tikz_strs(\n   [nodes[-3][0][\"tikz_str\"], \"text=white\"])\n```\n\nDraw the dashed boxes, which will be in the right places.\n```\nbb1 = dashed_bbox([nodes[6]])\nbb2 = dashed_bbox([bb1, nodes[4], nodes[7]])\nbb3 = dashed_bbox([bb2, nodes[1], nodes[3]])\nbboxes = [bb1, bb2, bb3]\n```\n\nDraw the labels.\n```\nlabels = [\n   label_left(nodes[0], \"4 < 8\"),\n   label_left(nodes[1], \"4 > 3\"),\n   label_left(nodes[4], \"4 < 6\"),\n]\n```\n\nDefine the colors that you going to use in the figure in RGB.\nThese are then passed in `draw_to_tikz_standalone` to specify the user-defined colors used in the figure.\n```\nname2color = {\"mygreen\": (2, 129, 0)}\n```\n\nGrouping all the visual elements of the figure.\nThis is really powerful in general, e.g., you can compute the coordinates of the group by simply doing `stz.bbox([nodes, connections, bboxes, labels])`.\n```\ne = [nodes, connections, bboxes, labels]\n```\n\nFinally, compile to TikZ, i.e., generate the TikZ code.\nIf any user-defined colors are needed for the figure, they need to be defined through a string to RGB tuple dictionary passed to the function (i.e., `name2color`).\n```\nstz.draw_to_tikz_standalone(e, \"tree.tex\", name2color)\n```\n\nTwo recurring patterns we have observed above are the creation of auxiliary functions that take arguments corresponding to some parametrization of a visual element and then return the visual element in the right place (e.g., `dashed_bbox` and `connect`) and functions that take existing visual elements and place them in the right place (often as a function of some parametrization, e.g., `place`.\nThese functions could be very well present in the main library `sane_tikz`.\nThe main deciding factor in developing a function in a user file or in a library file is its expected widespread use.\nIf we expect a function to be useful for a wide variety of figures, then we include it in the main library.\nOtherwise, it is kept in the local file for the figure.\n\nAdditional examples are available in the [examples](https://github.com/negrinho/sane_tikz/tree/master/examples) folder.\nInspecting the intermediate states of the figures should also give insight about what each function accomplishes, both in terms of creating new visual elements and of moving existing elements to the right place.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/negrinho/sane_tikz",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sane-tikz",
    "package_url": "https://pypi.org/project/sane-tikz/",
    "platform": "",
    "project_url": "https://pypi.org/project/sane-tikz/",
    "project_urls": {
      "Homepage": "http://github.com/negrinho/sane_tikz"
    },
    "release_url": "https://pypi.org/project/sane-tikz/0.1/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": ">=3.6",
    "summary": "Python to TikZ transpiler",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8691245,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9280a96c80274b28c05d525d86b7d1eb6207ae58fab39d3ec8dcd81efa81f6b",
          "md5": "121fb9a0157f33d9545d65b8be65ef83",
          "sha256": "03260c1c30349c16f1fef867a7fee649d3d08113c4baec5d3c31352f90e846fb"
        },
        "downloads": -1,
        "filename": "sane_tikz-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "121fb9a0157f33d9545d65b8be65ef83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26988,
        "upload_time": "2020-11-18T16:37:00",
        "upload_time_iso_8601": "2020-11-18T16:37:00.602778Z",
        "url": "https://files.pythonhosted.org/packages/b9/28/0a96c80274b28c05d525d86b7d1eb6207ae58fab39d3ec8dcd81efa81f6b/sane_tikz-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cfdbec629d5dd85c2075c1ea71299e534b6fce39e232eacb74950c5eccc58fb9",
          "md5": "a1555e18c18639fa6f6cdcce37b85650",
          "sha256": "0b98ab96168e38a72f272610f213a2935a101ecba24bd4928f3d2caed3c5ae53"
        },
        "downloads": -1,
        "filename": "sane_tikz-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a1555e18c18639fa6f6cdcce37b85650",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 34189,
        "upload_time": "2020-11-18T16:37:01",
        "upload_time_iso_8601": "2020-11-18T16:37:01.742148Z",
        "url": "https://files.pythonhosted.org/packages/cf/db/ec629d5dd85c2075c1ea71299e534b6fce39e232eacb74950c5eccc58fb9/sane_tikz-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9280a96c80274b28c05d525d86b7d1eb6207ae58fab39d3ec8dcd81efa81f6b",
        "md5": "121fb9a0157f33d9545d65b8be65ef83",
        "sha256": "03260c1c30349c16f1fef867a7fee649d3d08113c4baec5d3c31352f90e846fb"
      },
      "downloads": -1,
      "filename": "sane_tikz-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "121fb9a0157f33d9545d65b8be65ef83",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 26988,
      "upload_time": "2020-11-18T16:37:00",
      "upload_time_iso_8601": "2020-11-18T16:37:00.602778Z",
      "url": "https://files.pythonhosted.org/packages/b9/28/0a96c80274b28c05d525d86b7d1eb6207ae58fab39d3ec8dcd81efa81f6b/sane_tikz-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cfdbec629d5dd85c2075c1ea71299e534b6fce39e232eacb74950c5eccc58fb9",
        "md5": "a1555e18c18639fa6f6cdcce37b85650",
        "sha256": "0b98ab96168e38a72f272610f213a2935a101ecba24bd4928f3d2caed3c5ae53"
      },
      "downloads": -1,
      "filename": "sane_tikz-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a1555e18c18639fa6f6cdcce37b85650",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 34189,
      "upload_time": "2020-11-18T16:37:01",
      "upload_time_iso_8601": "2020-11-18T16:37:01.742148Z",
      "url": "https://files.pythonhosted.org/packages/cf/db/ec629d5dd85c2075c1ea71299e534b6fce39e232eacb74950c5eccc58fb9/sane_tikz-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}