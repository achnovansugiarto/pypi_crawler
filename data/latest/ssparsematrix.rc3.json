{
  "info": {
    "author": "Anton Antonov",
    "author_email": "antononcube@posteo.net",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Sparse matrices with named rows and columns\n\n## Introduction\n\nThis Python package provides the class `SSparseMatrix` the objects of which a sparse matrices with named rows and columns.\n\nWe can say the package attempts to cover as many as possible of the functionalities for \nsparse matrix objects that are provided by R’s library [Matrix](http://matrix.r-forge.r-project.org). ([R](https://en.wikipedia.org/wiki/R_(programming_language)) is a implementation of [S](https://en.wikipedia.org/wiki/S_(programming_language)). S introduced named data structures for statistical computations, [RB1], hence the name `SSparseMatrix`.)\n\nThe package builds on top of the [`scipy` sparse matrices](https://scipy.github.io/devdocs/reference/sparse.html). (The added functionalities though are general -- other sparse matrix implementations could be used.)\n\nHere is a list of functionalities provided for `SSparseMatrix`:\n\n- Sub-matrix extraction by row and column names:\n   - Single element access\n   - Subsets of row names and column names\n- Slices (with integers)\n- Row and column names propagation for dot products with:\n   - Lists\n   - Dense vectors (`numpy.array`)\n   - `scipy` sparse matrices\n   - `SSparseMatrix` objects\n- Row and column sums \n   - Vector form\n   - Dictionary form\n- Transposing\n- Representation:\n  - Tabular, matrix form (\"pretty printing\")\n  - String and `repr` forms\n- Row and column binding of `SSparseMatrix` objects\n- \"Export\" functions\n  - Triplets\n  - Row-dictionaries\n  - Column-dictionaries\n  - Wolfram Language full form representation\n\nThe full list of features and development status can be found in the \n[org-mode](https://orgmode.org)\nfile\n[SSparseMatrix-work-plan.org](https://github.com/antononcube/Python-packages/blob/main/org/SSparseMatrix-work-plan.org).\n\nThis package more or less follows the design of the\nMathematica package\n[SSparseMatrix.m](https://github.com/antononcube/MathematicaForPrediction/blob/master/SSparseMatrix.m).\n\nThe usage examples below can be also run through the file [\"examples.py\"](./examples.py).\n\n### Usage in other packages\n\nThe class `SSparseMatrix` is foundational in the packages\n[SparseMatrixRecommender](https://github.com/antononcube/Python-packages/tree/main/SparseMatrixRecommender)\nand\n[LatentSemanticAnalyzer](https://github.com/antononcube/Python-packages/tree/main/LatentSemanticAnalyzer).\n(The implementation of those packages was one of the primary motivations to develop `SSparseMatrix`.)\n\nThe package\n[RandomSparseMatrix](https://github.com/antononcube/Python-packages/tree/main/RandomSparseMatrix)\ncan be used to generate random sparse matrices (`SSparseMatrix` objects.)\n\n------\n\n## Installation\n\n### Install from GitHub\n\n```shell\npip install -e git+https://github.com/antononcube/Python-packages.git#egg=SSparseMatrix-antononcube\\&subdirectory=SSparseMatrix\n```\n\n### From PyPi\n\n```shell\npip install SSparseMatrix\n```\n\n\n------\n\n## Setup\n\nImport the package:\n\n\n```python\nfrom SSparseMatrix import *\n```\n\nThe import command above is equivalent to the import commands:\n\n```python\nfrom SSparseMatrix.SSparseMatrix import SSparseMatrix\nfrom SSparseMatrix.SSparseMatrix import make_s_sparse_matrix\nfrom SSparseMatrix.SSparseMatrix import is_s_sparse_matrix\nfrom SSparseMatrix.SSparseMatrix import column_bind\n```\n\n-----\n\n## Creation\n\nCreate a sparse matrix with named rows and columns (a `SSparseMatrix` object):\n\n\n```python\nmat = [[1, 0, 0, 3], [4, 0, 0, 5], [0, 3, 0, 5], [0, 0, 1, 0], [0, 0, 0, 5]]\nsmat = SSparseMatrix(mat)\nsmat.set_row_names([\"A\", \"B\", \"C\", \"D\", \"E\"])\nsmat.set_column_names([\"a\", \"b\", \"c\", \"d\"])\n```\n\n\n\n\n    <5x4 SSparseMatrix (sparse matrix with named rows and columns) of type '<class 'numpy.int64'>'\n    \twith 8 stored elements in Compressed Sparse Row format, and fill-in 0.4>\n\n\n\nPrint the created sparse matrix:\n\n\n```python\nsmat.print_matrix()\n```\n\n    ===================================\n      |       a       b       c       d\n    -----------------------------------\n    A |       1       .       .       3\n    B |       4       .       .       5\n    C |       .       3       .       5\n    D |       .       .       1       .\n    E |       .       .       .       5\n    ===================================\n\n\nAnother way to create using the function `make_s_sparse_matrix`:\n\n\n```python\nssmat=make_s_sparse_matrix(mat)\nssmat\n```\n\n\n\n\n    <5x4 SSparseMatrix (sparse matrix with named rows and columns) of type '<class 'numpy.int64'>'\n    \twith 8 stored elements in Compressed Sparse Row format, and fill-in 0.4>\n\n\n\n------\n\n## Structure\n\nThe `SSparseMatrix` objects have a simple structure. Here are the attributes:\n- `_sparseMatrix`\n- `_rowNames`\n- `_colNames`\n- `_dimNames`\n\nHere are the methods to \"query\" `SSparseMatrix` objects:\n- `sparse_matrix()`\n- `row_names()` and `row_names_dict()`\n- `column_names()` and `column_names_dict()`\n- `shape()`\n- `dimension_names()`\n\n`SSparseMatrix` over-writes the methods of `scipy.sparse.csr_matrix` that might require the handling of row names and column names.\n\nMost of the rest of the `scipy.sparse.csr_matrix`\n[methods](https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.html)\nare delegated to the `_sparseMatrix` attribute.\n\nFor example, for a given `SSparseMatrix` object `smat` the dense version of `smat`'s sparse matrix attribute\ncan be obtained by accessing that attribute first and then using the method `todense`:\n\n\n```python\nprint(smat.sparse_matrix().todense())\n```\n\n    [[1 0 0 3]\n     [4 0 0 5]\n     [0 3 0 5]\n     [0 0 1 0]\n     [0 0 0 5]]\n\n\nAlternatively, we can use the \"delegated\" form and directly invoke `todense` on `smat`:\n\n\n```python\nprint(smat.todense())\n```\n\n    [[1 0 0 3]\n     [4 0 0 5]\n     [0 3 0 5]\n     [0 0 1 0]\n     [0 0 0 5]]\n\n\nHere is another example showing a direct application of the element-wise operation `sin` through\nthe `scipy.sparse.csr_matrix` method `sin`:\n\n\n```python\nsmat.sin().print_matrix(n_digits=20)\n```\n\n    ===================================================================================\n      |                   a                   b                   c                   d\n    -----------------------------------------------------------------------------------\n    A |  0.8414709848078965                   .                   .  0.1411200080598672\n    B | -0.7568024953079282                   .                   . -0.9589242746631385\n    C |                   .  0.1411200080598672                   . -0.9589242746631385\n    D |                   .                   .  0.8414709848078965                   .\n    E |                   .                   .                   . -0.9589242746631385\n    ===================================================================================\n\n\n------\n## Representation\n\nHere the function `print` uses the string representation of `SSparseMatrix` object:\n\n\n```python\nprint(smat)\n```\n\n      ('A', 'a')\t1\n      ('A', 'd')\t3\n      ('B', 'a')\t4\n      ('B', 'd')\t5\n      ('C', 'b')\t3\n      ('C', 'd')\t5\n      ('D', 'c')\t1\n      ('E', 'd')\t5\n\n\nHere we print the representation obtained with [`repr`](https://docs.python.org/3.4/library/functions.html?highlight=repr#repr):\n\n\n```python\nprint(repr(smat))\n```\n\n    <5x4 SSparseMatrix (sparse matrix with named rows and columns) of type '<class 'numpy.int64'>'\n    \twith 8 stored elements in Compressed Sparse Row format, and fill-in 0.4>\n\n\nHere is the matrix form (\"pretty printing\" ):\n\n\n```python\nsmat.print_matrix()\n```\n\n    ===================================\n      |       a       b       c       d\n    -----------------------------------\n    A |       1       .       .       3\n    B |       4       .       .       5\n    C |       .       3       .       5\n    D |       .       .       1       .\n    E |       .       .       .       5\n    ===================================\n\n\nThe method `triplets` can be used to obtain a list of `(row, column, value)` triplets:\n\n\n```python\nsmat.triplets()\n```\n\n\n\n\n    [('A', 'a', 1),\n     ('A', 'd', 3),\n     ('B', 'a', 4),\n     ('B', 'd', 5),\n     ('C', 'b', 3),\n     ('C', 'd', 5),\n     ('D', 'c', 1),\n     ('E', 'd', 5)]\n\n\n\nThe method `row_dictionaries` gives a dictionary with keys that are row-names and values that are column-name-to-matrix-value dictionaries:\n\n\n```python\nsmat.row_dictionaries()\n```\n\n\n\n\n    {'A': {'a': 1, 'd': 3},\n     'B': {'a': 4, 'd': 5},\n     'C': {'b': 3, 'd': 5},\n     'D': {'c': 1},\n     'E': {'d': 5}}\n\n\n\nSimilarly, the method `column_dictionaries` gives a dictionary with keys that are column-names and values that are row-name-to-matrix-value dictionaries:\n\n\n```python\nsmat.column_dictionaries()\n```\n\n\n\n\n    {'a': {'A': 1, 'B': 4},\n     'b': {'C': 3},\n     'c': {'D': 1},\n     'd': {'A': 3, 'B': 5, 'C': 5, 'E': 5}}\n\n\n\n------\n\n## Multiplication\n\nMultiply with the transpose and print:\n\n\n```python\nssmat2 = ssmat.dot(smat.transpose())\nssmat2.print_matrix()\n```\n\n    ===========================================\n      |       A       B       C       D       E\n    -------------------------------------------\n    0 |      10      19      15       .      15\n    1 |      19      41      25       .      25\n    2 |      15      25      34       .      25\n    3 |       .       .       .       1       .\n    4 |      15      25      25       .      25\n    ===========================================\n\n\nMultiply with a list-vector:\n\n\n```python\nsmat3 = smat.dot([1, 2, 1, 0])\nsmat3.print_matrix()\n```\n\n    ===========\n      |       0\n    -----------\n    A |       1\n    B |       4\n    C |       6\n    D |       1\n    E |       .\n    ===========\n\n\n**Remark:** The type of the `.dot` argument can be:\n- `SSparseMatrix`\n- `list`\n- `numpy.array`\n- `scipy.sparse.csr_matrix`\n\n------\n\n## Slices\n\nSingle element access:\n\n\n```python\nprint(smat[\"A\", \"d\"])\nprint(smat[0, 3])\n```\n\n    3\n    3\n\n\nGet sub-matrix of rows using row names:\n\n\n```python\nsmat[[\"A\", \"D\", \"B\"], :].print_matrix()\n```\n\n    ===================================\n      |       a       b       c       d\n    -----------------------------------\n    A |       1       .       .       3\n    D |       .       .       1       .\n    B |       4       .       .       5\n    ===================================\n\n\nGet sub-matrix using row indices:\n\n\n```python\nsmat[[0, 3, 1], :].print_matrix()\n```\n\n    ===================================\n      |       a       b       c       d\n    -----------------------------------\n    A |       1       .       .       3\n    D |       .       .       1       .\n    B |       4       .       .       5\n    ===================================\n\n\nGet sub-matrix with columns names:\n\n\n```python\nsmat[:, ['a', 'c']].print_matrix()\n```\n\n    ===================\n      |       a       c\n    -------------------\n    A |       1       .\n    B |       4       .\n    C |       .       .\n    D |       .       1\n    E |       .       .\n    ===================\n\n\nGet sub-matrix with columns indices:\n\n\n```python\nsmat[:, [0, 2]].print_matrix()\n```\n\n    ===================\n      |       a       c\n    -------------------\n    A |       1       .\n    B |       4       .\n    C |       .       .\n    D |       .       1\n    E |       .       .\n    ===================\n\n\n**Remark:** The current implementation of `scipy` (1.7.1) does not allow retrieval\nof sub-matrices by specifying *both* row and column ranges or slices. \n\n**Remark:** \"Standard\" slices with integers also work. \n\n-------\n\n## Row and column sums\n\nRow sums and dictionary of row sums:\n\n\n```python\nprint(smat.row_sums())\nprint(smat.row_sums_dict())\n```\n\n    [4, 9, 8, 1, 5]\n    {'A': 4, 'B': 9, 'C': 8, 'D': 1, 'E': 5}\n\n\nColumn sums and dictionary of column sums:\n\n\n```python\nprint(smat.column_sums())\nprint(smat.column_sums_dict())\n```\n\n    [5, 3, 1, 18]\n    {'a': 5, 'b': 3, 'c': 1, 'd': 18}\n\n\n------\n\n## Column and row binding\n\n### Column binding\n\nHere we create another `SSparseMatrix` object:\n\n\n```python\nmat2=smat.sparse_matrix().transpose()\nsmat2 = SSparseMatrix(mat2, row_names=list(\"ABCD\"), column_names=\"c\")\nsmat2.print_matrix()\n```\n\n    ===========================================\n      |      c0      c1      c2      c3      c4\n    -------------------------------------------\n    A |       1       4       .       .       .\n    B |       .       .       3       .       .\n    C |       .       .       .       1       .\n    D |       3       5       5       .       5\n    ===========================================\n\n\nHere we column-bind two SSparseMatrix objects:\n\n\n```python\nsmat[list(\"ABCD\"), :].column_bind(smat2).print_matrix()\n```\n\n    ===========================================================================\n      |       a       b       c       d      c0      c1      c2      c3      c4\n    ---------------------------------------------------------------------------\n    A |       1       .       .       3       1       4       .       .       .\n    B |       4       .       .       5       .       .       3       .       .\n    C |       .       3       .       5       .       .       .       1       .\n    D |       .       .       1       .       3       5       5       .       5\n    ===========================================================================\n\n\n**Remark:** If during column-binding some column names are duplicated then to the column names of both matrices are\nadded suffixes that designate to which matrix each column belongs to.\n\n### Row binding\n\nHere we rename the column names of `smat` to be the same as `smat2`:\n\n\n```python\nsmat3 = smat.copy()\nsmat3.set_column_names(smat2.column_names()[0:4])\nsmat3 = smat3.impose_column_names(smat2.column_names())\nsmat3.print_matrix()\n```\n\n    ===========================================\n      |      c0      c1      c2      c3      c4\n    -------------------------------------------\n    A |       1       .       .       3       .\n    B |       4       .       .       5       .\n    C |       .       3       .       5       .\n    D |       .       .       1       .       .\n    E |       .       .       .       5       .\n    ===========================================\n\n\nHere we row-bind `smat2` and `smat3`:\n\n\n```python\nsmat2.row_bind(smat3).print_matrix()\n\n```\n\n    =============================================\n        |      c0      c1      c2      c3      c4\n    ---------------------------------------------\n    A.1 |       1       4       .       .       .\n    B.1 |       .       .       3       .       .\n    C.1 |       .       .       .       1       .\n    D.1 |       3       5       5       .       5\n    A.2 |       1       .       .       3       .\n    B.2 |       4       .       .       5       .\n    C.2 |       .       3       .       5       .\n    D.2 |       .       .       1       .       .\n    E.2 |       .       .       .       5       .\n    =============================================\n\n\n**Remark:** If during row-binding some row names are duplicated then to the row names of both matrices are added\nsuffixes that designate to which matrix each row belongs to.\n\n------\n\n## In place computations\n\n- The methods for setting row- and column-names are \"in place\" methods -- no new `SSparseMatrix` objects a created.\n\n- The dot product, arithmetic, and transposing methods have an optional argument whether to do computations in place or not.\n    - The optional argument is `copy`, which corresponds to argument with the same name and function in `scipy.sparse`.\n    - By default, the computations are *not* in place: new objects are created.\n    - I.e. `copy=True` default.\n\n- The class `SSparseMatrix` has the method `copy()` that produces deep copies when invoked.\n\n-------\n\n## Unit tests\n\nThe unit tests (so far) are broken into functionalities; see the folder\n[./tests](https://github.com/antononcube/Python-packages/tree/main/SSparseMatrix/tests).\nSimilar unit tests are given in [AAp2].\n\n-------\n\n## References\n\n### Articles\n\n[AA1] Anton Antonov,\n[\"RSparseMatrix for sparse matrices with named rows and columns\"](https://mathematicaforprediction.wordpress.com/2015/10/08/rsparsematrix-for-sparse-matrices-with-named-rows-and-columns/),\n(2015),\n[MathematicaForPrediction at WordPress](https://mathematicaforprediction.wordpress.com).\n\n[RB1] Richard Becker, \n[“A Brief History of S”](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.131.1428&rep=rep1&type=pdf),\n(2004).\n\n### Packages\n\n[AAp1] Anton Antonov,\n[SSparseMatrix.m](https://github.com/antononcube/MathematicaForPrediction/blob/master/SSparseMatrix.m),\n(2018),\n[MathematicaForPrediction at GitHub](https://github.com/antononcube/MathematicaForPrediction).\n\n[AAp2] Anton Antonov,\n[SSparseMatrix Mathematica unit tests](https://github.com/antononcube/MathematicaForPrediction/blob/master/UnitTests/SSparseMatrix-tests.wlt),\n(2018),\n[MathematicaForPrediction at GitHub](https://github.com/antononcube/MathematicaForPrediction).\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/antononcube/Python-packages/tree/main/SSparseMatrix",
    "keywords": "sparse,matrix,r,s,s-plus,linear algebra,linear,algebra,row names,column names,named rows,named columns",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SSparseMatrix",
    "package_url": "https://pypi.org/project/SSparseMatrix/",
    "platform": "",
    "project_url": "https://pypi.org/project/SSparseMatrix/",
    "project_urls": {
      "Homepage": "https://github.com/antononcube/Python-packages/tree/main/SSparseMatrix"
    },
    "release_url": "https://pypi.org/project/SSparseMatrix/0.3.2/",
    "requires_dist": [
      "numpy",
      "scipy"
    ],
    "requires_python": ">=3.7",
    "summary": "SSparseMatrix package based on SciPy sparse matrices.",
    "version": "0.3.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12209062,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7886c9696bee1d1f79deb6e913bfd45c4fc6587273e040bda628458ef95c2945",
          "md5": "5ae1fbd43ac1543715493ee43e892bc4",
          "sha256": "c3216babeabad7ea59a612e3cd146cff8065defbf2f7c99d6b309ea225c56628"
        },
        "downloads": -1,
        "filename": "SSparseMatrix-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ae1fbd43ac1543715493ee43e892bc4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13421,
        "upload_time": "2021-11-30T09:19:28",
        "upload_time_iso_8601": "2021-11-30T09:19:28.495973Z",
        "url": "https://files.pythonhosted.org/packages/78/86/c9696bee1d1f79deb6e913bfd45c4fc6587273e040bda628458ef95c2945/SSparseMatrix-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8225d523fbc3fd0acd57d4704162aa8a27b38b5ce9ce2fb13cc3ba016e87cec5",
          "md5": "7640ead26d08b8f47059b72455dbc781",
          "sha256": "c904224148a88de2130352492bf79c3fd1005b8b74681406e7c50fd3ed5596de"
        },
        "downloads": -1,
        "filename": "SSparseMatrix-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7640ead26d08b8f47059b72455dbc781",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17338,
        "upload_time": "2021-11-30T09:19:30",
        "upload_time_iso_8601": "2021-11-30T09:19:30.592887Z",
        "url": "https://files.pythonhosted.org/packages/82/25/d523fbc3fd0acd57d4704162aa8a27b38b5ce9ce2fb13cc3ba016e87cec5/SSparseMatrix-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54d0ea772ddb9672140f96d16277b579d81ee90d3a76f3db9b7758042d7b547b",
          "md5": "87f697f29aa7b782f4c6b2b745fc1632",
          "sha256": "fc8186ddf3073585469fdef332ddcef3839e51f36bae0cbf077409a5e7b4d61f"
        },
        "downloads": -1,
        "filename": "SSparseMatrix-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87f697f29aa7b782f4c6b2b745fc1632",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13537,
        "upload_time": "2021-12-03T16:57:16",
        "upload_time_iso_8601": "2021-12-03T16:57:16.031506Z",
        "url": "https://files.pythonhosted.org/packages/54/d0/ea772ddb9672140f96d16277b579d81ee90d3a76f3db9b7758042d7b547b/SSparseMatrix-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a43762eb7a0494c4fcbb9925ba44463f61982742882a3fd4efe0ce3d603df8bb",
          "md5": "fd91227cc50ebd784cf5263136756391",
          "sha256": "5d8b4dfe9c05be234c5ae589848931b36a4d2b6511f0d718e3952a1024a6b9b3"
        },
        "downloads": -1,
        "filename": "SSparseMatrix-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fd91227cc50ebd784cf5263136756391",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17582,
        "upload_time": "2021-12-03T16:57:18",
        "upload_time_iso_8601": "2021-12-03T16:57:18.022219Z",
        "url": "https://files.pythonhosted.org/packages/a4/37/62eb7a0494c4fcbb9925ba44463f61982742882a3fd4efe0ce3d603df8bb/SSparseMatrix-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93ed8e5952632029fc28f3157d32cb228e1f2a91bf64a6c9755e6c26054fb25e",
          "md5": "5a2210d00d5ba7e7de046652ecc44d4f",
          "sha256": "df2e5fd3ad7894e4937ac073f4d652b6994d332ebbb0fa9577b10a6c9b00e74d"
        },
        "downloads": -1,
        "filename": "SSparseMatrix-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a2210d00d5ba7e7de046652ecc44d4f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13591,
        "upload_time": "2021-12-04T14:10:59",
        "upload_time_iso_8601": "2021-12-04T14:10:59.218168Z",
        "url": "https://files.pythonhosted.org/packages/93/ed/8e5952632029fc28f3157d32cb228e1f2a91bf64a6c9755e6c26054fb25e/SSparseMatrix-0.3.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd90de368c0a3670057ce236901aef5a0f45356111e097fb26083afcda0d705f",
          "md5": "29c9b501f34f901684a7c6927bc787f5",
          "sha256": "36ee7278086235bdb89388315be717de76ee1142dd45fc4ccb9f4beb0a48ebe2"
        },
        "downloads": -1,
        "filename": "SSparseMatrix-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "29c9b501f34f901684a7c6927bc787f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17639,
        "upload_time": "2021-12-04T14:11:01",
        "upload_time_iso_8601": "2021-12-04T14:11:01.289241Z",
        "url": "https://files.pythonhosted.org/packages/cd/90/de368c0a3670057ce236901aef5a0f45356111e097fb26083afcda0d705f/SSparseMatrix-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "93ed8e5952632029fc28f3157d32cb228e1f2a91bf64a6c9755e6c26054fb25e",
        "md5": "5a2210d00d5ba7e7de046652ecc44d4f",
        "sha256": "df2e5fd3ad7894e4937ac073f4d652b6994d332ebbb0fa9577b10a6c9b00e74d"
      },
      "downloads": -1,
      "filename": "SSparseMatrix-0.3.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a2210d00d5ba7e7de046652ecc44d4f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 13591,
      "upload_time": "2021-12-04T14:10:59",
      "upload_time_iso_8601": "2021-12-04T14:10:59.218168Z",
      "url": "https://files.pythonhosted.org/packages/93/ed/8e5952632029fc28f3157d32cb228e1f2a91bf64a6c9755e6c26054fb25e/SSparseMatrix-0.3.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cd90de368c0a3670057ce236901aef5a0f45356111e097fb26083afcda0d705f",
        "md5": "29c9b501f34f901684a7c6927bc787f5",
        "sha256": "36ee7278086235bdb89388315be717de76ee1142dd45fc4ccb9f4beb0a48ebe2"
      },
      "downloads": -1,
      "filename": "SSparseMatrix-0.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "29c9b501f34f901684a7c6927bc787f5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 17639,
      "upload_time": "2021-12-04T14:11:01",
      "upload_time_iso_8601": "2021-12-04T14:11:01.289241Z",
      "url": "https://files.pythonhosted.org/packages/cd/90/de368c0a3670057ce236901aef5a0f45356111e097fb26083afcda0d705f/SSparseMatrix-0.3.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}