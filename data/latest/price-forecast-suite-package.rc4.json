{
  "info": {
    "author": "ZhangLe",
    "author_email": "zhangle@example.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "## price_forecast_suite_package\n\nA library containing common tools for data processing, feature engineering and model training and prediction.\n\n***package***:  - /dist/price_forecast_suite_package-0.0.31-py3-none-any.whl\n\nPick a supported environment and install the package.\n```  \npip install price_forecast_suite_package-0.0.31-py3-none-any.whl\n```\n\nDocument:  \n[document for using the library](http://wiki.envisioncn.com/display/~le.zhang/DS+Common+Tool)  \n  \n\n## Functions included in data processing:\n\n### 1. remove_outlier  \nHelps filter outlier from a specified column, and will return a new dataframe \n```\ndef remove_outlier(df, column_name, n_outlier=0.25):\n    ...\n    return new_df\n``` \nArguments table\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---| \n|df|DataFrame|Required|-|  \n|column_name|string|Required|-|\n|n_outlier|float|Optional|0.25|\n \n  \n### 2. add_period_to_time  \nUsed to add 'period' column as a time interval into the 'date' column\n```\ndef add_period_to_time(df, \n                       date_column_name='DATE', \n                       period_column_name='PERIOD', \n                       period_minutes=30):\n    ...\n    return new_df\n```\nArguments table\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---|  \n|df|dataframe|Required|-|  \n|date_column_name|string|Optional|'DATE'|  \n|period_column_name|string|Optional|'PERIOD'|  \n|period_minutes|int|Optional|30|  \n\n  \n### 3. show_draft_plot\nUsed to display the plot for a list of data, this function has no return.\n```\ndef show_draft_plot(datas, x_label, title, legend, picture_size=[18, 5]):\n    ...\n```\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---|  \n|datas|nparray[]|Required |-|  \n|x_label|nparray[]|Required ***same length as the list of data***|-|  \n|title|string|Optional|''|  \n|picture_size|[int, int]|Optional|[18,5]|     \n  \nexample:  \n```\nfrom ds_common_tool import suite_data  \n  \nlstmModel = dasuite_data.show_draft_plot(datas = [df['column1'], df['column2']], x_label = df.index, title='Compare 2 features values', legend=['column1_data', 'column2_data'], picture_size=[18, 5])\n``` \n  \n### 4. get_n_rolling\nGet N days rolling mean/max/min/median  \n```\ndef get_n_rolling(df, target_column_name, n = 30, method = 'mean') :\n    ...\n    return new_df\n```\n  \n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---|  \n|df|DataFrame|Required|-|  \n|target_column_name|string|Required|-|  \n|n|int|Optional|30|  \n|method|string|Optional, accpect: 'mean', 'max', 'min', 'median', 'std'|'mean'|     \n  \n  \n### 5. read_data_external\nUsed for reading external dataframes \n```\ndef read_data_external(df,  main_df, date_column = 'DATE', fillna_limit_n=5):\n    ...\n    return new_df\n```\n\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---|  \n|df|DataFrame|Required|-|  \n|main_df|DataFrame|Required|-| \n|date_column|string[]|Optional|'DATE'|   \n|fillna_limit_n|int|Optional|5|     \n   \n### 6. merge_dfs\nUsed for merging multiple dataframes\n```\ndef merge_dfs(df_list = [], on_column = 'DATE', method_na = 'dropna', fill_customize_value = 0):\n    ...\n    return new_df\n```\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---|  \n|df_list|DataFrame[]|Required ***NOTE:*** first item should be the main target df|-|  \n|on_column|string|Optional|'DATE'|        \n|method_na|string|Optional, accept: 'dropna', 'fill_customize'|'dropna'| \n|fill_customize_value|int|Optional, only needed if method_na='fill_customize'|0| \n\n  \n### 7. shift_row\nAdd a new shifted column to the dataframe based on an existing column \n```\ndef shift_row(df, target_columns, shift_n_list = [], method_na = 'dropna'):\n    ...\n    return new_df\n```\n\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---| \n|df|dataframe|Required|-|\n|target_columns|string|Required|-|\n|shift_n_list|int[]|Optional, **Note:** Number of shifts required, e.g. [-20, -30]|[]|\n|method_na|dataframe|Optional, accept: 'bfill', 'ffill'|'dropna'|\n\n### 8. get_trend_mean\nAdd 'Month', 'WeekOfYear' and 'DayOfWeek' as dummy variables to dataframe\n```\ndef get_trend_mean(df, date_column_name = 'DATE'):\n    ...\n    return new_df\n```\n  \n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---| \n|df|dataframe|Required|-|\n|date_column_name|str[]|Optional|'DATE'|\n\n### 9. get_dummy\nAdd dummy variables based on a specified column \n```\ndef get_dummy(df, dummy_columns = ['PERIOD']):\n    ...\n    return new_df\n```\n  \n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---| \n|df|dataframe|Required|-|\n|dummy_columns|str[]|Optional|['Period']|\n\n\n### 10. switch_y_column\nMove the label_column to the last column\n```\ndef switch_y_column(df, column_name):\n    ...\n    return new_df\n```\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---| \n|df|dataframe|Required|-|\n|column_name|string|Required|-|\n\n### 11. time_split_dataset\nTimeSeriesSplit the test data into test and validation data\n```\ntime_split_dataset(X, y, split_n = 30, print_shape=True):\n    ...\n    return X_train_seq, y_train_seq, X_val_seq, y_val_seq\n```\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---| \n|X|nparray|Required|-|\n|y|nparray|Required|-|\n|Split_n|int|Optional|30|\n|print_shape|bool|Optional|True|\n\n### 12. get_df_sql\nGet data from SQL\n```\nget_df_sql(query, engine_path):\n    ...\n    return result_df\n```\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---| \n|query|string|Required|-|\n|engine_path|string|Required|-|\n\n\n\n\n## Functions included in model:\n\n### 1. model_with_data_split\n```\ndef model_with_data_split(df, \n                          label_column, \n                          train_start, train_end, \n                          look_back, look_forward, \n                          column_set_index = 'DATE', split_n = 30, \n                          n_neurons = [128], \n                          transformer_args = [5, 256, 256, 256], \n                          print_model_summary = True, \n                          dropout = 0.5, \n                          epochs = 30, patience = 5, \n                          early_stop = True, \n                          save_model = False, model_path = '', checkpoint_path = '', \n                          model_name = 'lstm', \n                          enable_optuna = False, epochs_each_try = 10, n_trials = 10, \n                          show_loss = True)\n\n```\nArguments Table\n\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---|  \n|df|Dataframe|Required|-|\n|label_column|string|Required|-|\n|train_start|Same as index|Required|-|\n|train_end|Same as index|Required|-|\n|look_back|int|Required|-|\n|look_forward|int|Required|-|\n|column_set_index|string|Optional|'DATE'|\n|split_n|int|Optional|30|\n|n_neurons|int[]|Optional|[128]|\n|transformer_args|int[]|Optional|[5, 256, 256, 256]|\n|print_model_summary|bool|Optional|True|\n|dropout|float|Optional|0.5|\n|epochs|int|Optional|30|\n|patience|int|Optional|5|\n|early_stop|bool|Optional|True|\n|save_model|bool|Optional ***Note:*** If True, both model_path and checkpoint_path must be given|False|\n|model_path|string|Optional|''|\n|checkpoint_path|string|Optional|''|\n|model_name|string|Optional|'lstm'|\n|enable_optuna|bool|Optional|False|\n|epcochs_each_try|int|Optional|10|\n|n_trials|int|Optional|10|\n|show_loss|bool|Optional|True|\n\n\n### 2. linear_model_with_optuna\n\n```\nlinear_model_with_optuna(df, \n                         label_column, \n                         column_set_index = 0, \n                         start_index = '', \n                         end_index = '', \n                         print_data_shape = True, \n                         save_model = False, \n                         model_path = '', \n                         enable_optuna = True, \n                         n_trials = 20, \n                         model_name = 'elasticnet', \n                         alpha = 0.1, \n                         l1 = 0.5)\n```\nArguments Table\n\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---|  \n|df|DataFrame|Required|-|\n|column_set_index|string|Optional|0|\n|start_index|string|Optional|''|\n|end_index|string|Optional|''|\n|print_data_shape|bool|Optional|True|\n|save_model|bool|Optional|False|\n|model_path|bool|Optional, Required if save_model=True|''|\n|enable_optuna|bool|Optional|True|\n|n_trials|int|Optional|20|\n|model_name|string|Optional|'elasticnet'|\n|alpha|int|Optional|0.1|\n|l1|int|Optional|0.5|\n\n### 3. xgb_with_optuna\n```\nxgb_with_optuna(df, \n                label_column, \n                column_set_index = 0, \n                start_index = '0', \n                end_index = '1', \n                save_model = False, \n                model_path = '', \n                enable_optuna = True, \n                n_trials =10)\n```\nArguments Table\n\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---|  \n|df|DataFrame|Required|-|\n|label_column|string|Required|-|\n|column_set_index|string|Optional|0|\n|start_index|string|Optional|'0'|\n|end_index|string|Optional|'1'|\n|save_model|bool|Optional|False|\n|model_path|bool|Optional, Required if save_model=True|''|\n|enable_optuna|bool|Optional|True|\n|n_trials|int|Optional|10|\n\n### 4. test_result\n```\ntest_result(df, \n            target_column , \n            model_path=[], \n            model_type=[], \n            look_back = 1, \n            look_forward = 1, \n            display_metrix = True, \n            display_plot = True, \n            display_title = '', \n            display_legend = ['pred', 'real'])\n```\nArguments Table\n\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---|  \n|df|DataFrame|Required|-|\n|target_column|string|Required|-|\n|model_path|model|Optional|[]|\n|model_type|str[]|Optional, accpet: 'lstm', 'tcn', 'transformer'|[]|\n|look_back|int|Optional|1|\n|look_forward|int|Optional|1|\n|display_metrix|bool|Optional|True|\n|display_plot|bool|Optional|True|\n|display_title|string|Optional|''|\n|display_legend|str[]|Optional|['pred', 'real']|\n\n### 5. predict_result\n```\npredict_result(predict_data_list = [], \n                model_path=[], \n                model_type=['lstm'])\n```\nArguments Table\n\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---|  \n|predict_data_list|int[]|Optional|[]|\n|model_path|model|Optional|[]|\n|model_type|str[]|Optional, accept: ['lstm', 'tcn', 'transformer']|['lstm']|\n\n\n## Functions included in feature_engineer:\n\n### 1. sg_long_term_feature_engineering\n```\nsg_long_term_feature_engineering(df, \n                                brent_df, \n                                gas_df, \n                                weather_df, \n                                filter_columns, \n                                target_column)\n```\n\nArugments Table\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---|  \n|df|DataFrame|Required|-|\n|brent_df|DataFrame|Required|-|\n|gas_df|DataFrame|Required|-|\n|weather_df|DataFrame|Required|-|\n|filter_columns|string|Required|-|\n|target_column|string|Required|-|\n\n### 2. sg_short_term_feature_engineering\n```\nsg_short_term_feature_engineering(dpr_df, \n                                    reg_df, \n                                    advisory_df_dummy, \n                                    targetvariable, \n                                    main_features)\n```\n\nArugments Table\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---|  \n|dpr_df|DataFrame|Required|-|\n|reg_df|DataFrame|Required|-|\n|advisory_df_dummy|DataFrame|Required|-|\n|targetvariable|string|Required|-|\n|main_features|list|Required|-|\n\n### 3. shandong_feature_engineering\n```\nshandong_feature_engineering(data, \n                            feature_columns, \n                            start_index, \n                            end_index, \n                            predict=False)\n```\nArugments Table\n|**Argument Name**|**Data Type**|**Required/Optional**|**Default Value**|\n|:---|:---|:---|:---|  \n|data|DataFrame|Required|-|\n|feature_columns|str[]|Required|-|\n|start_index|string|Required|-|\n|end_index|string|Required|-|\n|predict|bool|Optional|False|\n\n\n\n\n\n\n\n\n\n\n\n\n### OLD ###\n### 1. lstm model customized  \n### suite_model.lstm_model_custmize(look_back, look_forward, n_features, dropout=0.5, print_summary=False, n_neurons = [128])  \n  \n|parameter|data type|description|default value|  \n|:---|:---|:---|:---|  \n|**look_back**|int|input size|-|  \n|**look_forward**|int|output size|-|  \n|**n_features**|int|number of features|-|  \n|**dropout**|float|range (0,1)|0.5| \n|**n_neurons**|int[]|number of neurons in each layer, eg. [256, 128, 64]|[128]| \n|**print_summary**|boolean|True: print model summary. |False|    \n|**return**|Model|lstm model|-|  \n  \nexample:    \n```\nfrom ds_common_tool import suite_model  \n  \nlstmModel = suite_model.lstm_model_custmize(look_back=30, look_forward=30, n_features=4, dropout=0.5, print_summary=False, n_neurons = [128])\n```  \n\n### 2. train the model  \n### suite_model.train_model(model, X_train_seq, y_train_seq, X_val_seq, y_val_seq, epochs=100, early_stop = True, patience=10, save_model = False, model_path='', checkpoint_path='', show_loss = True)  \n   \n|parameter|data type|description|default value|  \n|:---|:---|:---|:---|  \n|**model**|int|input size|-|  \n|**X_train_seq**|same type as model||-|  \n|**y_train_seq**|same type as model||-|  \n|**X_val_seq**|same type as model||-| \n|**y_val_seq**|same type as model||-| \n|**epochs**|int epochs for traning||100|    \n|**early_stop**|boolean|True: to use early_stop|True|     \n|**patience**|int| range(10, +), patience needed if early_stop=True|10|  \n|**save_model**|boolean|True: save model and weight|False|  \n|**model_path**|string|path where the model is saved, e.g. model_path = '../../model/LSTM_longterm_usep.hdf5'|''|  \n|**checkpoint_path**|string|path where the checkpoint(weight) is saved, e.g. checkpoint_path = '../../model/checkpoint/cp-lstm-longterm-usep.ckpt'|''|  \n|**show_loss**|boolean|True: plot loss for each epoch|True|  \n|**return**|Model|updated model|-|  \n  \nexample:    \n```\nfrom ds_common_tool import suite_model  \n  \nlstmModel = suite_model.train_model(lstmModel, X_train_seq, y_train_seq, X_val_seq, y_val_seq, \n                          epochs=3, \n                          early_stop = True, \n                          patience=3, \n                          save_model = True, \n                          model_path = '../../model/LSTM_longterm_usep.hdf5',\n                          show_loss = True)\n```  \n\n### 3. LSTM model with split sequences\n### suite_model.lstm_model_with_data_split(df, label_column, train_start, train_end, test_start, test_end, look_back, look_forward, column_set_index = 0,split_n = 30, lstm_n_neurons = [128], print_model_summary = True, dropout = 0.5, epochs = 30, patience = 5,early_stop = True, save_model = False, model_path = '', checkpoint_path = '', show_loss = True, show_result_plot = True, plot_title = '',evauate_metric = ['mape']) \n   \n|parameter|data type|description|default value|  \n|:---|:---|:---|:---|  \n|df|Dataframe|df to be processed|-|\n|label_column|nparray[]|target column for prediction|-|\n|train_start|string|Starting train date|-|\n|train_end|string|Ending train date|-|\n|test_start|string|Starting test date|-|\n|test_end|string|Ending test date|-|\n|look_back|int|input size|-|\n|look_forward|int|output size|-|\n|column_set_index|int|Set an index column to specified index|0|\n|split_n|int|Number of splits for TimeSeriesSplit|30|\n|lstm_n_neurons|int[]|Neurons needed per layer|[128]|\n|print_model_summary|bool|Print summary if True|True|\n|dropout|float|range(0, 1)|0.5|\n|epochs|int|Number of epochs|30|\n|patience|int|Patience for early_stop|5|\n|early_stop|bool|Enable early_stop if True|True|\n|save_model|bool|Enable to save model ***Note:*** If True, both model_path and checkpoint_path must be given|False|\n|model_path|string|Path to save model|''|\n|checkpoint_path|string|Path to save checkpoint|''|\n|show_loss|bool|Loss plot will be printed if True|True|\n|show_result_plot|bool|Result plot will be shown if True|True|\n|plot_title|string|Include plot title|''|\n|evaluate_metric|str[]|Metrics to be evaluate|['mape']|\n|**return**|Model, mae, mape, prediction|-|-|  \n\nexample:    \n```\nfrom ds_common_tool import suite_model \n  \nlstmModel, mae, mape, prediction_data = suite_model.lstm_model_with_data_split(df = all_data, \n                                                                               label_column = 'mean_30', \n                                                                               train_start = '2017-02-01', \n                                                                               train_end = '2020-12-31', \n                                                                               test_start = '2020-12-01', \n                                                                               test_end = '2021-01-31', \n                                                                               look_back = 31, \n                                                                               look_forward = 31, \n                                                                               column_set_index = 'DATE',\n                                                                               split_n = 30, \n                                                                               lstm_n_neurons = [128, 64],\n                                                                               print_model_summary = True,\n                                                                               dropout = 0.5,\n                                                                               epochs = 30,\n                                                                               patience = 5,\n                                                                               early_stop = True,\n                                                                               save_model = False,\n                                                                               show_loss = True,\n                                                                               show_result_plot = True,\n                                                                               plot_title = '',\n                                                                               evauate_metric = ['mape'])\n```  \n\n### 4. Check metrics: mae, mape\n### check_result_metric(y_true, y_pred, methods=['mae'], print_result=True)\n\n|parameter|data type|description|default value|  \n|:---|:---|:---|:---| \n|y_true|nparray|Same type as model|-|\n|y_pred|nparray|Same type as model|-|\n|methods|str[]|Specify metrics in a list. Available metrics: ['mae', 'mape']|['mae']|\n|print_result|bool|Print result if True|True|\n\n### 5. TCN\n### tcn_model(look_back, n_features, look_forward, batch_size=None, print_summary=True, n_neurons=[128])\n\n|parameter|data type|description|default value|  \n|:---|:---|:---|:---| \n|look_back|int|Input size|-|\n|n_features|int|Number of features|-|\n|look_forward|int|Output size|-|\n|batch_size|int|Specifies batch size|None|\n|print_summary|bool|Print if True|True|\n|n_neurons|int[]|To specify number of neurons|[128]|\n\n### 6. LSTM with Optuna\n### optuna_lstm(epochs_each_try, n_trials, look_back, look_forward, n_features, X_train_seq, y_train_seq, X_val_seq, y_val_seq, print_best_trail = True)\n\n|parameter|data type|description|default value|  \n|:---|:---|:---|:---| \n|epochs_each_try|int|Number of epochs to run during each trial|-|\n|n_trials|int|Number of trials to run for Optuna|-|\n|look_back|int|Input size|-|\n|look_forward|int|Output size|-|\n|n_features|int|Number of features|-|\n|X_train_seq|Same type as model||-|\n|y_train_seq|Same type as model||-|\n|X_val_seq|Same type as model||-|\n|y_val_seq|Same type as model||-|\n|print_best_trial|bool|Print out the best trial if True|True|\n|**return**|List of neurons, dropout|-|-| \n\nexample:    \n```\nfrom ds_common_tool import suite_model \n  \nn_neurons, dropout = suite_model.optuna_lstm(epochs_each_try = 5, \n                                 n_trials = 10, \n                                 look_back = 31, \n                                 look_forward = 31, \n                                 n_features = 82, \n                                 X_train_seq = X_train_seq, \n                                 y_train_seq = y_train_seq, \n                                 X_val_seq = X_val_seq, \n                                 y_val_seq = y_val_seq, \n                                 print_best_trail = True)\n```  \n\n## [pypi](https://pypi.org/project/ds-common-tool/#description)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://doc.com",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "price-forecast-suite-package",
    "package_url": "https://pypi.org/project/price-forecast-suite-package/",
    "platform": null,
    "project_url": "https://pypi.org/project/price-forecast-suite-package/",
    "project_urls": {
      "Bug Tracker": "https://doc.com",
      "Homepage": "https://doc.com"
    },
    "release_url": "https://pypi.org/project/price-forecast-suite-package/0.1.65/",
    "requires_dist": [
      "pandas (>=0.25.1)",
      "numpy (>=1.21.5)",
      "DateTime (>=4.4)",
      "tensorflow (>=2.2.0)",
      "xgboost (>=1.2.0)",
      "scikit-learn (>=1.0)",
      "keras-tcn (>=3.4.0)",
      "matplotlib (>=3.1.1)",
      "pickleshare (>=0.7.5)",
      "cloudpickle (>=1.2.2)",
      "optuna (>=2.10.0)",
      "SQLAlchemy (>=1.3.9)"
    ],
    "requires_python": ">=3.6",
    "summary": "suite_data processing & modeling function",
    "version": "0.1.65",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13455074,
  "releases": {
    "0.1.33": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2a3d58b0a45cdd49f2874af8e55e82f74d10953ed58a8c4716f2de1d9f9be4f",
          "md5": "a45d986518c6193a1aacc0e70d2d5e36",
          "sha256": "89491526ea35171e77a86660e4618f8784c15eaa4f455dec8bdf371bc474a91d"
        },
        "downloads": -1,
        "filename": "price_forecast_suite_package-0.1.33-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a45d986518c6193a1aacc0e70d2d5e36",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 35563,
        "upload_time": "2022-04-05T03:59:45",
        "upload_time_iso_8601": "2022-04-05T03:59:45.187489Z",
        "url": "https://files.pythonhosted.org/packages/f2/a3/d58b0a45cdd49f2874af8e55e82f74d10953ed58a8c4716f2de1d9f9be4f/price_forecast_suite_package-0.1.33-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd68ee0433c2f67c71da5f98ded1b4dce263c0c9552a1da7e9ecadff09fcaeed",
          "md5": "511b3d2c9c51446cb1469e5ec7ef9da5",
          "sha256": "23efbbfc19010516dff1f0fe52925f4ed8c6ff3189d9b46e3de5ce380b57cd7a"
        },
        "downloads": -1,
        "filename": "price_forecast_suite_package-0.1.33.tar.gz",
        "has_sig": false,
        "md5_digest": "511b3d2c9c51446cb1469e5ec7ef9da5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32758,
        "upload_time": "2022-04-05T03:59:47",
        "upload_time_iso_8601": "2022-04-05T03:59:47.872479Z",
        "url": "https://files.pythonhosted.org/packages/bd/68/ee0433c2f67c71da5f98ded1b4dce263c0c9552a1da7e9ecadff09fcaeed/price_forecast_suite_package-0.1.33.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.57": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5ec193822d41af77e3c1f5673e40a60abb3882ab97699a03ccdc6afdf2e32c8",
          "md5": "f7b6314be9293a614e522a69babb0673",
          "sha256": "52defc8a79f19f7e1e6da4e50f904f6042991ee67883f42182c64729e8e3765d"
        },
        "downloads": -1,
        "filename": "price_forecast_suite_package-0.1.57-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7b6314be9293a614e522a69babb0673",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 44307,
        "upload_time": "2022-04-07T13:47:34",
        "upload_time_iso_8601": "2022-04-07T13:47:34.838575Z",
        "url": "https://files.pythonhosted.org/packages/e5/ec/193822d41af77e3c1f5673e40a60abb3882ab97699a03ccdc6afdf2e32c8/price_forecast_suite_package-0.1.57-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43a6c2ebc4b3b38beee9bca82866ad0aef762b2e01b5157df790304315fcab9e",
          "md5": "4a7abb8a423570f174c6ee14bf658746",
          "sha256": "0030fec38ab71e7f862528bd9387bdd78a2ec810883aeef90c0cc43726652e2c"
        },
        "downloads": -1,
        "filename": "price_forecast_suite_package-0.1.57.tar.gz",
        "has_sig": false,
        "md5_digest": "4a7abb8a423570f174c6ee14bf658746",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 39566,
        "upload_time": "2022-04-07T13:47:36",
        "upload_time_iso_8601": "2022-04-07T13:47:36.860255Z",
        "url": "https://files.pythonhosted.org/packages/43/a6/c2ebc4b3b38beee9bca82866ad0aef762b2e01b5157df790304315fcab9e/price_forecast_suite_package-0.1.57.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.63": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fcc7177367342743b8b98f5e455bc7db1b538a3519a9c5aa00283e52f97e45a8",
          "md5": "8677fec6795f6e2a47d3ae88a7af2737",
          "sha256": "0fb14eb20d89bde29b07c5139187802515b4a4df861491fa24cd391aa39f5ecc"
        },
        "downloads": -1,
        "filename": "price_forecast_suite_package-0.1.63-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8677fec6795f6e2a47d3ae88a7af2737",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 45900,
        "upload_time": "2022-04-08T09:29:06",
        "upload_time_iso_8601": "2022-04-08T09:29:06.753361Z",
        "url": "https://files.pythonhosted.org/packages/fc/c7/177367342743b8b98f5e455bc7db1b538a3519a9c5aa00283e52f97e45a8/price_forecast_suite_package-0.1.63-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06ac7ecbbb64c16cc2c98d8a02e8082746920c80a409b92b40e78ab24bdfafb9",
          "md5": "4280de36ab2415b1c335055f5354b033",
          "sha256": "217dcdfd27aae49b662d224700ffb10f76fefed51fcaebbcddd602112583c81e"
        },
        "downloads": -1,
        "filename": "price_forecast_suite_package-0.1.63.tar.gz",
        "has_sig": false,
        "md5_digest": "4280de36ab2415b1c335055f5354b033",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40767,
        "upload_time": "2022-04-08T09:29:08",
        "upload_time_iso_8601": "2022-04-08T09:29:08.640384Z",
        "url": "https://files.pythonhosted.org/packages/06/ac/7ecbbb64c16cc2c98d8a02e8082746920c80a409b92b40e78ab24bdfafb9/price_forecast_suite_package-0.1.63.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.65": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f3f8df2c88c3b0bc04a8ddcd6b373b0f64325946df3522dd2585a5a898e6ee6",
          "md5": "254b8b1d0dfb47a931fbe9919e8d66c8",
          "sha256": "b3f946de280a82535d58f78d6bd92d30a477287d0d4d52025e15108cb9b94ac7"
        },
        "downloads": -1,
        "filename": "price_forecast_suite_package-0.1.65-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "254b8b1d0dfb47a931fbe9919e8d66c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 45900,
        "upload_time": "2022-04-08T15:46:17",
        "upload_time_iso_8601": "2022-04-08T15:46:17.567453Z",
        "url": "https://files.pythonhosted.org/packages/2f/3f/8df2c88c3b0bc04a8ddcd6b373b0f64325946df3522dd2585a5a898e6ee6/price_forecast_suite_package-0.1.65-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cca02446fbdde91fd15b83d13568de6fd80f4fb69a5352141756da553b694b7c",
          "md5": "52237e450bd82db2f32e9f4aa55aa7b3",
          "sha256": "0cf320fdb0e2747a9096b53ad49928d95927fec2afd447cff42dd13ab3e9eea6"
        },
        "downloads": -1,
        "filename": "price_forecast_suite_package-0.1.65.tar.gz",
        "has_sig": false,
        "md5_digest": "52237e450bd82db2f32e9f4aa55aa7b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 40773,
        "upload_time": "2022-04-08T15:46:19",
        "upload_time_iso_8601": "2022-04-08T15:46:19.818715Z",
        "url": "https://files.pythonhosted.org/packages/cc/a0/2446fbdde91fd15b83d13568de6fd80f4fb69a5352141756da553b694b7c/price_forecast_suite_package-0.1.65.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2f3f8df2c88c3b0bc04a8ddcd6b373b0f64325946df3522dd2585a5a898e6ee6",
        "md5": "254b8b1d0dfb47a931fbe9919e8d66c8",
        "sha256": "b3f946de280a82535d58f78d6bd92d30a477287d0d4d52025e15108cb9b94ac7"
      },
      "downloads": -1,
      "filename": "price_forecast_suite_package-0.1.65-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "254b8b1d0dfb47a931fbe9919e8d66c8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 45900,
      "upload_time": "2022-04-08T15:46:17",
      "upload_time_iso_8601": "2022-04-08T15:46:17.567453Z",
      "url": "https://files.pythonhosted.org/packages/2f/3f/8df2c88c3b0bc04a8ddcd6b373b0f64325946df3522dd2585a5a898e6ee6/price_forecast_suite_package-0.1.65-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cca02446fbdde91fd15b83d13568de6fd80f4fb69a5352141756da553b694b7c",
        "md5": "52237e450bd82db2f32e9f4aa55aa7b3",
        "sha256": "0cf320fdb0e2747a9096b53ad49928d95927fec2afd447cff42dd13ab3e9eea6"
      },
      "downloads": -1,
      "filename": "price_forecast_suite_package-0.1.65.tar.gz",
      "has_sig": false,
      "md5_digest": "52237e450bd82db2f32e9f4aa55aa7b3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 40773,
      "upload_time": "2022-04-08T15:46:19",
      "upload_time_iso_8601": "2022-04-08T15:46:19.818715Z",
      "url": "https://files.pythonhosted.org/packages/cc/a0/2446fbdde91fd15b83d13568de6fd80f4fb69a5352141756da553b694b7c/price_forecast_suite_package-0.1.65.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}