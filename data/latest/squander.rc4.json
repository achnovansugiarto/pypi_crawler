{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Programming Language :: C",
      "Programming Language :: C++"
    ],
    "description": "[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.4508680.svg)](https://doi.org/10.5281/zenodo.4508680)\n <a href=\"https://trackgit.com\">\n<img src=\"https://us-central1-trackgit-analytics.cloudfunctions.net/token/ping/l0sfey1m19at85951dwl\" alt=\"trackgit-views\" />\n</a>\n\n# Sequential Quantum Gate Decomposer (SQUANDER)\n\n\nThe Sequential Quantum Gate Decomposer (SQUANDER) package provides a novel solution to decompose any n-qubit unitaries into a sequence of one-qubit rotations and two-qubit controlled gates (such as controlled NOT or controlled phase gate). SQUANDER utilizes two novel gate synthesis techniques reported in Refereces [1] and [2].\n(i) To synthesize general unitaries SQUANDER applies periodic layers of two-qubit and parametric one-qubit gates to an n-qubit unitary such that the resulting unitary is 1-qubit decoupled, i.e., is a tensor product of an (n-1)-qubit and a 1-qubit unitary. Continuing the decoupling procedure sequentially one arrives at the end to a full decomposition of the original unitary into 1- and 2-qubit gates. SQUANDER provides lower CNOT counts for generic n-qubit unitaries (up to n=6)  than the previously provided lower bounds.\n(ii) An adaptive circuit compression is used to optimize quantum circuit by the application of parametric two-qubit gates in the synthesis process. The utilization of these parametric two-qubit gates in the circuit design allows one to transform the discrete combinatorial problem of circuit synthesis into an optimization problem over continuous variables. The circuit is then compressed by a sequential removal of two-qubit gates from the design, while the remaining building blocks are continuously adapted to the reduced gate structure by iterated learning cycles.\n\n\nThe SQUANDER library is written in C/C++ providing a Python interface via [C++ extensions](https://docs.python.org/3/library/ctypes.html).\nThe present package is supplied with Python building script and CMake tools to ease its deployment.\nThe SQUANDER package can be built with both Intel and GNU compilers, and can be link against various CBLAS libraries installed on the system.\n(So far the CLBAS libraries of the GNU Scientific Library, OpenBLAS and the Intel MKL packages were tested.)\nIn the following we briefly summarize the steps to build, install and use the SQUANDER package. \n\n\nThe project was supported by grant OTKA PD123927 and by the Ministry of Innovation and Technology and the National Research, Development and Innovation\nOffice within the Quantum Information National Laboratory of Hungary.\n\nFind the documantation of the SQUANDER package at [CodeDocs[xyz]](https://codedocs.xyz/rakytap/sequential-quantum-gate-decomposer/)\n\n\n\n### Contact Us\n\nHave a question about the SQUANDER package? Don't hesitate to contact us at the following e-mails:\n\n* Zoltán Zimborás (researcher): zimboras.zoltan@wigner.hu\n* Peter Rakyta (developer): peter.rakyta@ttk.elte.hu\n\n\n\n### Dependencies\n\nThe optimization algorithm of SQUANDER relies on the [multimin](https://www.gnu.org/software/gsl/doc/html/multimin.html) component of the [GNU Scientific Library](https://www.gnu.org/software/gsl/doc/html/index.html). \nWe developed and tested the SQUANDER package with GNU Scientific Library of version 2.5, 2.6 and 2.7.\nThe dependencies necessary to compile and build the SQUANDER package are the followings:\n\n* [CMake](https://cmake.org/) (>=3.10.2)\n* [GNU Scientific Library](https://www.gnu.org/software/gsl/doc/html/index.html) (>=2.5, shipped with the gsl python package)\n* C++/C [Intel](https://software.intel.com/content/www/us/en/develop/tools/compilers/c-compilers.html) (>=14.0.1) or [GNU](https://gcc.gnu.org/) (>=v4.8.1) compiler\n* [TBB](https://github.com/oneapi-src/oneTBB) library (shipped with tbb-devel Python package)\n* [Intel MKL](https://software.intel.com/content/www/us/en/develop/tools/math-kernel-library.html) (optional)\n* [OpenBlas](https://www.openblas.net/) (optional, recommended)\n* [LAPACKE](https://www.netlib.org/lapack/lapacke.html)\n* [Doxygen](https://www.doxygen.nl/index.html) (optional)\n\nThe Python interface of SQUANDER was developed and tested with Python 3.6-3.9.\nThe SQUANDER Python interface needs the following packages to be installed on the system:\n\n* [Qiskit](https://qiskit.org/documentation/install.html)\n* [Numpy](https://numpy.org/install/)\n* [scipy](https://www.scipy.org/install.html)\n* [scikit-build](https://scikit-build.readthedocs.io/en/latest/)\n* [tbb-devel](https://pypi.org/project/tbb-devel/) (containing the TBB Library)\n* [gsl](https://anaconda.org/conda-forge/gsl) (containing the GNU Scientific Library)\n\n\n\n\n### How to obtain GNU Scientific Library\n\nIn order to build and use the SQUANDER we recommend the Anaconda virtual python environment providing all the required dependencies for SQUANDER.\nOne can easily install the GNU Scientific Library for local users by the command\n\n$ conda install -c conda-forge gsl\n\nAlternatively, a python binding project alongside the GNU GSL library is accessible via pypi repository:\n\n$ pip install numpy swig\n\n$ pip install pygsl\n\nHere we describe an alternative way to deploy GNU Scientific Library from source by the end user without administrative privileges. \nThe GNU Scientific Library can be downloaded from the site [https://www.gnu.org/software/gsl/](https://www.gnu.org/software/gsl/).\nAfter the downloaded package is extracted somewhere in the home directory of the user (**path/to/gsl/source**), one should configure the building environment using the **configure** tool.\nDepending on the individual settings the default compiler to be invoked might be different from HPC to HPC. \nTo ensure the usage of the GNU compiler, the following shell command should be executed inside the directory **path/to/gsl/source**:\n\n$ ./configure --prefix=path/to/gsl FC=gfortran CC=gcc CXX=g++\n\n(Similarly, Intel compiler can be forced by setting FC=ifort CC=icc and CXX=icpc.)\nThe installation directory of the compiled GNU Scientific Library is given by **--prefix=path/to/gsl** (which is different from the directory path of \nthe source files given by **path/to/gslsource**).\nTo install GNU Scientific Library the user should have read and write permissions on the path **path/to/gsl** (which might be for example /home/username/gsl).\nAfter the successful configuration the GNU Scientific Library can be compiled by the shell command\n\n$ make\n\nThe compilation of the GNU Scientific Library takes some time. When the compilation is done, the package (including the C header files and the static and shared libraries) is installed into the directory **path/to/gsl** by the shell command:\n\n$ make install\n\n### Install SQUANDER from Python Package Index (PyPI)\n\nSince version 1.7.1 the SQUANDER package is accessible at Python Package Index (PyPI). The package can be installed on linux systems following the steps outlined below:\n\n$ pip install numpy swig tbb-devel wheel scikit-build ninja qiskit\n\n$ pip install pygsl\n\n$ pip install squander\n\n\n\n### Download the SQUANDER package\n\nThe developer version of the Quantum Gate Decomposer package can be downloaded from github repository [https://github.com/rakytap/quantum-gate-decomposer/tree/master](https://github.com/rakytap/quantum-gate-decomposer/tree/master).\nAfter the package is downloaded into the directory **path/to/SQUANDER/package** (which would be the path to the source code of the SQUANDER package), one can proceed to the compilation steps described in the next section.\n\n### How to build the SQUANDER package\n\nThe SQUANDER package is equipped with a Python build script and CMake tools to ease the compilation and the deployment of the package.\nTo ensure that SQUANDER package would find the necessary libraries and header files during compilation time it is advised to define the following environment variables:\n\n$ export GSL_LIB_DIR=path/to/gsl/lib(64)\n\n$ export GSL_INC_DIR=path/to/gsl/include\n\nThe SQUANDER package is parallelized via Threading Building Block (TBB) libraries. If TBB is not present in the system, it can be easily installed via python package [tbb-devel](https://pypi.org/project/tbb-devel/).\nAlternatively the TBB libraries can be installed via apt or yum utility (sudo apt install libtbb-dev) or it can be downloaded from [https://github.com/oneapi-src/oneTBB](https://github.com/oneapi-src/oneTBB)   and built from source. \nIn this case one should supply the necessary environment variables pointing to the header and library files of the TBB package. For newer\nIntel compilers the TBB package is part of the Intel compiler package, similarly to the MKL package. If the TBB library is located at non-standrad path or the SQUANDER package is compiled with GNU compiler, then setting the\n\n$ export TBB_LIB_DIR=path/to/TBB/lib(64)\n\n$ export TBB_INC_DIR=path/to/TBB/include\n\nenvironment variables are sufficient for successful compilation. \nWhen the TBB library is installed via a python package, setting the environment variables above is not necessary.\nThe SQUANDER package with C++ Python extensions can be compiled via the Python script **setup.py** located in the root directory of the SQUANDER package.\nThe script automatically finds out the CBLAS library working behind the numpy package and uses it in further linking. \nThe **setup.py** script also build the C++ library of the SQUANDER package by making the appropriate CMake calls. \n\n\n\n### Developer build\n\n\nWe recommend to install the SQUANDER package in the Anaconda environment. In order to install the necessary requirements, follow the steps below:\n\nCreating new python environment: \n\n$ conda create -n qgd\n\nActivate the new anaconda environment\n\n$ conda activate qgd\n\nInstall dependencies:\n\n$ conda install numpy scipy pip pytest scikit-build tbb-devel\n\n$ conda install -c conda-forge gsl\n\n$ pip install qiskit matplotlib \n\nAfter the basic environment variables are set and the dependencies are installed, the compilation of the package can be started by the Python command:\n\n$ python3 setup.py build_ext\n\nThe command above starts the compilation of the SQUANDER C++ library and builds the necessary C++ Python interface extensions of the SQUANDER package in place.\nAfter a successful build, one can register the SQUANDER package in the Python distribution in developer (i.e. editable) mode by command:\n\n$ python -m pip install -e .\n\n\n### Binary distribution\n\nAfter the environment variables are set it is possible to build wheel binaries of the SQUANDER package. \nIn order to launch the compilation process from python, **[scikit-build](https://scikit-build.readthedocs.io/en/latest/)** package is necessary.\n(It is optional to install the ninja package which speeds up the building process by parallel compilation.)\nThe binary wheel can be constructed by command\n\n$ python3 setup.py bdist_wheel\n\nin the root directory of the SQUADER package.\nThe created SQUANDER wheel can be installed on the local machine by issuing the command from the directory **path/to/SQUANDER/package/dist**\n\n$ pip3 install qgd-*.whl\n\nWe notice, that the created wheel is not portable, since it contains hard coded link to external libraries (TBB and CBLAS).\n\n\n### Source distribution\n\nA portable source distribution of the SQUANDER package can be created by a command launched from the root directory of the SQUANDER package:\n\n$ python3 setup.py sdist\n\nIn order to create a source distribution it is not necessary to set the environment variables, since this script only collects the necessary files and pack them into a tar ball located in the directory **path/to/SQUANDER/package/dist**. \nIn order to install the SQUANDER package from source tar ball, see the previous section discussing the initialization of the environment variables.\nThe package can be compiled and installed by the command\n\n$ pip3 install qgd-*.tar.gz\n\nissued from directory **path/to/SQUANDER/package/dist**\n(It is optional to install the ninja package which speeds up the building process by parallel compilation.)\n\n\n### How to use\n\nThe algorithm implemented in the SQUANDER package intends to transform the given unitary into an identity matrix via a sequence of two-qubit and one-qubit gate operations applied on the unitary. \nThus, in order to get the decomposition of a unitary, one should rather provide the complex transpose of this unitary as the input for the SQUANDER decomposing process, as can be seen in the examples.\n\n\n## Python Interface\n\nThe SQUANDER package contains a Python interface allowing the access of the functionalities of the SQUANDER package from Python. \nThe usage of the SQUANDER Python interface is demonstrated in the example files in the directory **examples** located in the directory **path/to/SQUANDER/package**, or in test files located in sub-directories of **path/to/SQUANDER/package/qgd_python/*/test**. \nThe example files import the necessary **qgd_python** modules containing the wrapper classes to interface with the C++ SQUANDER library. \n(So the SQUANDER package need to be installed or the compiled package needs to be added to the Python search path.)\n\n\n### How to cite us\n\nIf you have found our work useful for your research project, please cite us by\n\n[1] Péter Rakyta, Zoltán Zimborás, Approaching the theoretical limit in quantum gate decomposition, Quantum 6, 710 (2022). <br>\n[2] Péter Rakyta, Zoltán Zimborás, Efficient quantum gate decomposition via adaptive circuit compression, arXiv:2203.04426. <br>\n[3] Peter Rakyta, Gregory Morse, Jakab Nádori, Zita Majnay-Takács, Oskar Mencer, Zoltán Zimborás, Highly optimized quantum circuits synthesized via data-flow engines, arXiv:2211.07685\n\n\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rakytap/sequential-quantum-gate-decomposer",
    "keywords": "test,cmake,extension",
    "license": "GNU General Public License v3.0",
    "maintainer": "Peter Rakyta",
    "maintainer_email": "peter.rakyta@ttk.elte.hu",
    "name": "squander",
    "package_url": "https://pypi.org/project/squander/",
    "platform": null,
    "project_url": "https://pypi.org/project/squander/",
    "project_urls": {
      "Homepage": "https://github.com/rakytap/sequential-quantum-gate-decomposer"
    },
    "release_url": "https://pypi.org/project/squander/1.7.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "The C++ binding for the SQUANDER package",
    "version": "1.7.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16860458,
  "releases": {
    "1.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd82fb02e3118157b950362c802e2a282cf6cdb20a6efe58dcfd23d1f82f9230",
          "md5": "38efbdf6d1d8b7813836c80a289ed58b",
          "sha256": "95d84086786410acad6732973a44a1e9dbadda188817c10eb3097b360e5a7754"
        },
        "downloads": -1,
        "filename": "squander-1.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "38efbdf6d1d8b7813836c80a289ed58b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 199357,
        "upload_time": "2023-02-04T13:04:19",
        "upload_time_iso_8601": "2023-02-04T13:04:19.363376Z",
        "url": "https://files.pythonhosted.org/packages/fd/82/fb02e3118157b950362c802e2a282cf6cdb20a6efe58dcfd23d1f82f9230/squander-1.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3842fe4055cfcb4fef760635d6889c4ab72c8ee83038786462d30137915af680",
          "md5": "8cd20d46ced21ab908d0c970f500e295",
          "sha256": "b9c39b3b16c6c6df46edc9383b1a0fe82451f297d236ba46efe4ac4a78588664"
        },
        "downloads": -1,
        "filename": "squander-1.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8cd20d46ced21ab908d0c970f500e295",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 199723,
        "upload_time": "2023-02-04T13:26:02",
        "upload_time_iso_8601": "2023-02-04T13:26:02.123619Z",
        "url": "https://files.pythonhosted.org/packages/38/42/fe4055cfcb4fef760635d6889c4ab72c8ee83038786462d30137915af680/squander-1.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad66f27c864302f59cc149d3a8846843cea4ec48a82afbcca356855845f0e2de",
          "md5": "33c9bbf5de6db7bad4c7347a48a39704",
          "sha256": "7fc14153bd2ec9cd2e98a97210212f6fef66efc06504c8fc1fe1d5d7301787a8"
        },
        "downloads": -1,
        "filename": "squander-1.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "33c9bbf5de6db7bad4c7347a48a39704",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 199756,
        "upload_time": "2023-02-04T15:42:18",
        "upload_time_iso_8601": "2023-02-04T15:42:18.784486Z",
        "url": "https://files.pythonhosted.org/packages/ad/66/f27c864302f59cc149d3a8846843cea4ec48a82afbcca356855845f0e2de/squander-1.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "292e529235204ae4cda85d83458a3f44279677254f30704fb7657a1357758f58",
          "md5": "6356f15fb93f6ca2a5d99b6e29279b29",
          "sha256": "4ec54fbfee010c2dfbf2a23d69bf044d537be179fa98dda3a83dda952d36581f"
        },
        "downloads": -1,
        "filename": "squander-1.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6356f15fb93f6ca2a5d99b6e29279b29",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 199001,
        "upload_time": "2023-02-14T20:05:57",
        "upload_time_iso_8601": "2023-02-14T20:05:57.736764Z",
        "url": "https://files.pythonhosted.org/packages/29/2e/529235204ae4cda85d83458a3f44279677254f30704fb7657a1357758f58/squander-1.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "292e529235204ae4cda85d83458a3f44279677254f30704fb7657a1357758f58",
        "md5": "6356f15fb93f6ca2a5d99b6e29279b29",
        "sha256": "4ec54fbfee010c2dfbf2a23d69bf044d537be179fa98dda3a83dda952d36581f"
      },
      "downloads": -1,
      "filename": "squander-1.7.4.tar.gz",
      "has_sig": false,
      "md5_digest": "6356f15fb93f6ca2a5d99b6e29279b29",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 199001,
      "upload_time": "2023-02-14T20:05:57",
      "upload_time_iso_8601": "2023-02-14T20:05:57.736764Z",
      "url": "https://files.pythonhosted.org/packages/29/2e/529235204ae4cda85d83458a3f44279677254f30704fb7657a1357758f58/squander-1.7.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}