{
  "info": {
    "author": "Lubos Matl",
    "author_email": "matllubos@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: Czech",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Internet :: WWW/HTTP :: Site Management"
    ],
    "description": "Prolog\n======\n\n`Django-context-cache` extends the Django framework with a context cache that caches data per request or per decorated block.\n\nInstallation\n------------\n\n- Install `django-context-cache` with the `pip` command:\n\n```bash\npip install django-context-cache\n```\n\n- Add `'context_cache.middleware.ContextCacheMiddleware'` to your `MIDDLEWARE`:\n\n```python\nMIDDLEWARE = [\n    'context_cache.middleware.ContextCacheMiddleware',\n    ...\n]\n```\n\nUsage\n-----\nImagine having an function or method which result you want to cache per request:\n\n    import random\n    import string\n    from context_cache.decorators import cache_for_context\n    \n    @cache_for_context\n    def get_random_string():\n        letters = string.ascii_lowercase\n        return ''.join(random.choice(letters) for i in range(10))\n\n\nIf you call function get_random_string more times the value will be get from cache:\n\n    def view(request):\n        get_random_string() == get_random_string() # should return True\n\nIf you want to cache an function out of requests, for example in the django command you can use the decorator `init_context_cache`. The decorator can be used as a context processor too:\n\n    from django.core.management.base import BaseCommand, CommandError\n    from context_cache.decorators import init_context_cache\n    \n    class Command(BaseCommand):\n        \n        @init_context_cache\n        def handle(self, *args, **options):\n            get_random_string() == get_random_string() # should return True",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/druids/django-context-cache",
    "keywords": "django,cache,request cache",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-context-cache",
    "package_url": "https://pypi.org/project/django-context-cache/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-context-cache/",
    "project_urls": {
      "Homepage": "https://github.com/druids/django-context-cache"
    },
    "release_url": "https://pypi.org/project/django-context-cache/0.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django context cache library.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7120261,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9fa43657b124cf7a088c2eb8f3e388f7a4bb01d3f7f62fd0c4b820946c106d9e",
          "md5": "277ecc65ecba2697d1dbdda67ea8cabd",
          "sha256": "20bacb4787cad8e4f345916d26eb45b77f7f531dcb7e7f43d3bc2afe20362492"
        },
        "downloads": -1,
        "filename": "django-context-cache-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "277ecc65ecba2697d1dbdda67ea8cabd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7414,
        "upload_time": "2020-04-28T13:02:17",
        "upload_time_iso_8601": "2020-04-28T13:02:17.943336Z",
        "url": "https://files.pythonhosted.org/packages/9f/a4/3657b124cf7a088c2eb8f3e388f7a4bb01d3f7f62fd0c4b820946c106d9e/django-context-cache-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7eef2cf5a09a965df797969cfd7d4a50937ee47ea68bee8d4d225688104ca28c",
          "md5": "969450fad4ed421ace6d8ef8191f3d01",
          "sha256": "55db3d85698a5ef053b6e4aaf01cd1e2d84958411c684b41041f0b97c03637da"
        },
        "downloads": -1,
        "filename": "django-context-cache-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "969450fad4ed421ace6d8ef8191f3d01",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7627,
        "upload_time": "2020-04-28T13:04:06",
        "upload_time_iso_8601": "2020-04-28T13:04:06.519360Z",
        "url": "https://files.pythonhosted.org/packages/7e/ef/2cf5a09a965df797969cfd7d4a50937ee47ea68bee8d4d225688104ca28c/django-context-cache-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7eef2cf5a09a965df797969cfd7d4a50937ee47ea68bee8d4d225688104ca28c",
        "md5": "969450fad4ed421ace6d8ef8191f3d01",
        "sha256": "55db3d85698a5ef053b6e4aaf01cd1e2d84958411c684b41041f0b97c03637da"
      },
      "downloads": -1,
      "filename": "django-context-cache-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "969450fad4ed421ace6d8ef8191f3d01",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 7627,
      "upload_time": "2020-04-28T13:04:06",
      "upload_time_iso_8601": "2020-04-28T13:04:06.519360Z",
      "url": "https://files.pythonhosted.org/packages/7e/ef/2cf5a09a965df797969cfd7d4a50937ee47ea68bee8d4d225688104ca28c/django-context-cache-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}