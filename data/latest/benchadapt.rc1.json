{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Python {benchadapt}\n\nA small python package with utilities for getting benchmark results into a Conbench server.\n\n## Useful components in this package\n\n### `BenchmarkResult` and `BenchmarkRun` dataclasses\n\nThe `BenchmarkResult` and `BenchmarkRun` dataclasses are designed to make it easy to\npopulate JSON payloads to post to a Conbench server. Their structure corresponds to the\ncorresponding POST endpoint; they each have a `.to_publishable_dict()` method that\nproduces a dict to post.\n\nRegardless of how you are using them, the docstrings of these two objects will be useful\nas you try to assemble your results to get them in Conbench. All fields are documented,\nas are interactions between them and what you likely need to specify.\n\nThe objects try to help you fill in your payloads correctly, including some defaults,\nlike populating `machine_info` with metadata on the current machine. If you are running\non a cluster instead, you will need to populate `cluster_info` yourself, and\n`machine_info` will remain empty.\n\nThere is light validation, but [for now] the API is the ultimate validator; it is\npossible to make payloads that will be rejected.\n\nIf you need to interact directly with a Conbench webapp's API instead of letting adapters\n(see below) or another tool manage sending results for you, you can use\n[benchclients.ConbenchClient](https://github.com/conbench/conbench/blob/main/benchclients/python/benchclients/conbench.py)\nto make requests. As benchclients is a dependency of benchadapt, you should not need to\ninstall anything new, and it is nicely set up to handle auth and such for you.\n\n### Adapters\n\nThe concept of Conbench adapters is for when you already have a benchmarking method that\nproduces a pile of results (say in JSON files, though anything works), and you need to\ntransform them into an appropriate form that can be posted to a Conbench API.\n\nThe `benchadapt.adapters.BenchmarkAdapter` abstract class defines a basic workflow:\n\n1. Call an arbitrary `command` shell command, presumably to run benchmarks. If results\nare already guaranteed to exist, this can be set to do nothing.\n2. Transform results produced by the benchmarks into a list of `BenchmarkResult` instances.\n3. Postprocess results to ensure a consistent `run_id` and override any metadata fields\nnot already set correctly.\n4. Post each result to a Conbench API.\n\nClasses that inherit from the abstract class need to define\n\n1. How to get results, including what `command` should be (though it can be defined later\nby the user, if desired) and how to get the raw results (e.g. if they are in a file or\ndirectory of files, where they are and how to read them in).\n2. How to transform the results into a list of `BenchmarkResult` instances ((2) above) in\nthe `._transform_results()` method.\n\n(3) and (4) are handled by the abstract class.\n\nVarious adapters are alrady defined in the `adapters` submodule, including ones for\nGoogle Benchmark and Folly, as well as a generic `CallableAdapter`, which takes a Python\n`Callable` instance (a function or class with a `__call__()` method) that returns a list\nof `BenchmarkResult` instances directly instead of a shell command. Many more adapters\nare possible; if you create one corresponding to a benchmarking tool, please make a PR!\n\n#### Running an adapter\n\nAdapters have separate `.run()` and `.publish_results()` methods; the former runs the\nbenchmarks, transforms the results, and stores them in a `.results` attribute of the\ninstance. It does not post them, so is useful for looking at results interactively before\nsending them. `.publish_results()` takes the results from the `.results` attribute and\nposts them to a Conbench API.\n\nThe whole instance also has a `__call__()` method defined so it can be called like a\nfunction that both runs and publishes, so a somewhat minimal script for running\nbenchmarks in CI might look like\n\n``` python\nimport os\n\nfrom benchadapt.adapters import GoogleBenchmarkAdapter\n\nadapter = GoogleBenchmarkAdapter(\n    command=[\"bash\", \"./run-benchmarks.sh\"],\n    result_file=\"benchmarks.json\",\n    result_fields_override={\n        \"run_reason\": os.getenv(\"CONBENCH_RUN_REASON\")\n    },\n    result_fields_append={\n        \"info\": {\"build_version\": os.getenv(\"MY_BUILD_VERSION\")},\n        \"context\": {\"compiler_flags\": os.getenv(\"MY_COMPILER_FLAGS\")}\n    }\n)\nadapter()\n```\n\nOf note:\n\n- `result_fields_override` will replace the whole attribute with a new value. This works\nwith all types (strings, dicts, etc.), so here `run_reason` will be set for all results.\n- `result_fields_append` will append the new values to dicts which may already have data.\nHere, `build_version` will be appended to the `info` dict. In this case it is an empty\ndict anyway, so this is equivalent to\n`result_fields_override={\"info\": {\"build_version\": os.getenv(\"MY_BUILD_VERSION\")}})`.\nBut the `context` dict will already contain a `\"benchmark_language\"` key; this will be\nretained, and `compiler_flags` will be appended.\n- For this to work, a lot of environment variables have to be set! This includes ones\nwith information about the Conbench server and the current git metadata. See the\n\"Environment Variables\" section below for a full list.\n\n\n## Environment variables\n\nSome operations of benchadapt rely on a number of environment variables. The Conbench API\nones (`CONBENCH_*`) are used by `benchclients.ConbenchClient`; the git ones\n(`CONBENCH_PROJECT_*`) are used to populate run and result metadata if not specified\ndirectly; and `CONBENCH_MACHINE_INFO_NAME` is for overriding the machine name in\nautomatically gathered machine info when necessary:\n\n- `CONBENCH_URL`: Required. The URL of the Conbench API without a trailing\nslash, e.g. `https://conbench.example.com`\n- `CONBENCH_EMAIL`: The email to use for Conbench login\n- `CONBENCH_PASSWORD`: The password to use for Conbench login\n- `CONBENCH_PROJECT_REPOSITORY`: The repository name (in the format `org/repo`) or the\nURL (in the format `https://github.com/org/repo`)\n- `CONBENCH_PROJECT_PR_NUMBER`: [recommended] The number of the GitHub pull request that\nis running this benchmark. Do not supply this for a runs on the default branch.\n- `CONBENCH_PROJECT_COMMIT`: The 40-character commit SHA of the repo being benchmarked\n- `CONBENCH_MACHINE_INFO_NAME`: By default, the running machine host name (sent in\n`machine_info.name` when posting runs and benchmarks) will be obtained with\n`platform.node()`, but in circumstances where consistency is needed (e.g.\nrunning in CI or on cloud runners), a value for host name can be specified via\nthis environment variable instead.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/conbench/conbench/tree/main/benchadapt",
    "keywords": "",
    "license": "",
    "maintainer": "Voltron Data",
    "maintainer_email": "conbench@voltrondata.com",
    "name": "benchadapt",
    "package_url": "https://pypi.org/project/benchadapt/",
    "platform": null,
    "project_url": "https://pypi.org/project/benchadapt/",
    "project_urls": {
      "Homepage": "https://github.com/conbench/conbench/tree/main/benchadapt"
    },
    "release_url": "https://pypi.org/project/benchadapt/2023.2.8/",
    "requires_dist": [
      "benchclients"
    ],
    "requires_python": ">=3.8",
    "summary": "Adapters for Running and Tracking Benchmarks",
    "version": "2023.2.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16757217,
  "releases": {
    "2023.2.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8beefe3e35cc7bd4707699bb4d7ba1d674ad5a68d4b7afb020341ed49b902c1c",
          "md5": "e578e1ea55f22f028d55d7f33ee803c4",
          "sha256": "812005a9a56bcb7ac1fc8cbb98c609c28a46b11ae011fc40524c6bdbd841aa32"
        },
        "downloads": -1,
        "filename": "benchadapt-2023.2.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e578e1ea55f22f028d55d7f33ee803c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 35528,
        "upload_time": "2023-02-08T21:33:08",
        "upload_time_iso_8601": "2023-02-08T21:33:08.806570Z",
        "url": "https://files.pythonhosted.org/packages/8b/ee/fe3e35cc7bd4707699bb4d7ba1d674ad5a68d4b7afb020341ed49b902c1c/benchadapt-2023.2.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6648aaf67402825bb67a67ce104cb2f7de1ecf61702105492505cd8f9273657",
          "md5": "a3b366a422b7cb05292c206c571ca7bf",
          "sha256": "eaf5d365b03b85c081fad07a92a856aa283027149e752cbdb330d0e4db0c9cdf"
        },
        "downloads": -1,
        "filename": "benchadapt-2023.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a3b366a422b7cb05292c206c571ca7bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 27355,
        "upload_time": "2023-02-08T21:33:11",
        "upload_time_iso_8601": "2023-02-08T21:33:11.423745Z",
        "url": "https://files.pythonhosted.org/packages/e6/64/8aaf67402825bb67a67ce104cb2f7de1ecf61702105492505cd8f9273657/benchadapt-2023.2.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8beefe3e35cc7bd4707699bb4d7ba1d674ad5a68d4b7afb020341ed49b902c1c",
        "md5": "e578e1ea55f22f028d55d7f33ee803c4",
        "sha256": "812005a9a56bcb7ac1fc8cbb98c609c28a46b11ae011fc40524c6bdbd841aa32"
      },
      "downloads": -1,
      "filename": "benchadapt-2023.2.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e578e1ea55f22f028d55d7f33ee803c4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 35528,
      "upload_time": "2023-02-08T21:33:08",
      "upload_time_iso_8601": "2023-02-08T21:33:08.806570Z",
      "url": "https://files.pythonhosted.org/packages/8b/ee/fe3e35cc7bd4707699bb4d7ba1d674ad5a68d4b7afb020341ed49b902c1c/benchadapt-2023.2.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6648aaf67402825bb67a67ce104cb2f7de1ecf61702105492505cd8f9273657",
        "md5": "a3b366a422b7cb05292c206c571ca7bf",
        "sha256": "eaf5d365b03b85c081fad07a92a856aa283027149e752cbdb330d0e4db0c9cdf"
      },
      "downloads": -1,
      "filename": "benchadapt-2023.2.8.tar.gz",
      "has_sig": false,
      "md5_digest": "a3b366a422b7cb05292c206c571ca7bf",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 27355,
      "upload_time": "2023-02-08T21:33:11",
      "upload_time_iso_8601": "2023-02-08T21:33:11.423745Z",
      "url": "https://files.pythonhosted.org/packages/e6/64/8aaf67402825bb67a67ce104cb2f7de1ecf61702105492505cd8f9273657/benchadapt-2023.2.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}