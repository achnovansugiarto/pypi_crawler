{
  "info": {
    "author": "UNKNOWN",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "fluncrunner runs flunc tests (suites of twill scripts with variables) through the web.\n\nThe API\n=======\n\nThere is a web API for running a flunc test.\n\nExecuting a test\n----------------\n\nTo execute a test, POST to the test's execution URI.\n\nTo execute a test with global variable overrides, provide a www-form-urlencoded \nset of key=value pairs in the request body.\n\n For example::\n\nPOST /basic_test/ HTTP/1.1\nContent-Type: application/x-www-form-urlencoded\n    username=lammy&password=testy&name_of_friend=bob\n\n will execute a command like::\n\nflunc -D username=lammy,password=testy,name_of_friend=bob basic_test\n\nInspecting a test\n-----------------\n\nTo discover the available variables in a test, GET the test's inspection URI.\n\nAn HTML form will be returned, suitable for POSTing back to the server.\n\nIf available, default values (from the test's corresponding .conf) will be\ndetailed in the form fields' pre-filled values.\n\nConfiguring the server\n======================\n\nThe fluncrunner server uses Paste Deploy for configuration.\n\nA sample configuration, suitable for forking, can be found in\n\n /docs/devel_config.ini\n\nAn app_factory is provided. It implements the test execution API\nand requires one piece of configuration: a filesystem path that\npoints to a directory of flunc tests that may be run. This is\nequivalent to flunc's -p option on the command line::\n\n [app:flunc]\n use = egg:fluncrunner\n search_path = %(here)s/ftests/\n\nYou will want to configure this app to respond to POST requests.\nA composite_factory `request_method` is provided which will\ndispatch requests to applications based on request method::\n\n [composite:main]\n use = egg:fluncrunner#request_method\n post = flunc\n\nNo automated implementation of the test inspection API is provided.\nIf you have a directory of static HTML forms that implement the API\nfor your flunc tests, you may want to configure a static file server\nto respond to GET requests::\n\n [composite:main]\n use = egg:fluncrunner#request_method\n post = flunc\n get = static\n\n [app:static]\n use = egg:Paste#static\n document_root = %(here)s/ftest_forms/\n\nThe Paste static file server infers Content-type from file extensions,\nso if you want to serve flunc test forms that don't have *.html names\nyou may want to use the provided `force_html` filter_factory which\nsets Content-type: text/html on all responses::\n\n [app:static]\n use = egg:Paste#static\n document_root = %(here)s/ftest_forms/\n filter-with = force_html\n\n [filter:force_html]\n use = egg:fluncrunner#force_html\n\nIf you are not serving fluncrunner from Paste, you can configure\nthis WSGI pipeline in code. You can find the needed WSGI factories\nin `fluncrunner`'s `main.py`, `force_html.py` and `request_method.py`.\n\nGenerating flunc test forms\n===========================\n\nThis section wants writing.\n\ntwill.js\n========\n\nThere's http://bitbucket.org/ianb/twilljs/ which executes simple\ntwill scripts (no variables, no suites)\n\nA similar API could transform flunc tests into twill scripts.\nSomehow that feels more friendly to me than variables in twill.js.\n\nA server would be responsible for interpolating variables provided\nby the requesting client and serving a \"standard\" twill script.\n\nFlunc suites could also be compiled down to twill scripts this way.",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": "",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "fluncrunner",
    "package_url": "https://pypi.org/project/fluncrunner/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/fluncrunner/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/fluncrunner/0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Run flunc tests through the web",
    "version": "0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 792083,
  "releases": {
    "0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf92e51dcb7fa71d2cd8cd82290de0ee4b85f9894e04e0c7d54dd7d8e3464aa3",
          "md5": "6bf8704fd90dcca6addaecb8813d9690",
          "sha256": "b1bb4338c541edba72a9ae914cf3cb8fcb1c8d51dfc116e5fde3cb484a474b3b"
        },
        "downloads": -1,
        "filename": "fluncrunner-0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6bf8704fd90dcca6addaecb8813d9690",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4237,
        "upload_time": "2010-08-19T19:14:12",
        "upload_time_iso_8601": "2010-08-19T19:14:12.779148Z",
        "url": "https://files.pythonhosted.org/packages/cf/92/e51dcb7fa71d2cd8cd82290de0ee4b85f9894e04e0c7d54dd7d8e3464aa3/fluncrunner-0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cf92e51dcb7fa71d2cd8cd82290de0ee4b85f9894e04e0c7d54dd7d8e3464aa3",
        "md5": "6bf8704fd90dcca6addaecb8813d9690",
        "sha256": "b1bb4338c541edba72a9ae914cf3cb8fcb1c8d51dfc116e5fde3cb484a474b3b"
      },
      "downloads": -1,
      "filename": "fluncrunner-0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6bf8704fd90dcca6addaecb8813d9690",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4237,
      "upload_time": "2010-08-19T19:14:12",
      "upload_time_iso_8601": "2010-08-19T19:14:12.779148Z",
      "url": "https://files.pythonhosted.org/packages/cf/92/e51dcb7fa71d2cd8cd82290de0ee4b85f9894e04e0c7d54dd7d8e3464aa3/fluncrunner-0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}