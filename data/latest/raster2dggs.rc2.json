{
  "info": {
    "author": "James Ardo",
    "author_email": "ardoj@landcareresearch.co.nz",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: GIS",
      "Topic :: Scientific/Engineering :: Image Processing",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "# raster2dggs\n\n[![pypi](https://img.shields.io/pypi/v/raster2dggs?label=raster2ddgs)](https://pypi.org/project/raster2dggs/)\n\nPython-based CLI tool to index raster files to DGGS in parallel, writing out to Parquet.\n\nCurrently only supports H3 DGGS, and probably has other limitations since it has been developed for a specific internal use case, though it is intended as a general-purpose abstraction. Contributions, suggestions, bug reports and strongly worded letters are all welcome.\n\n![Example use case for raster2dggs, showing how an input raster can be indexed at different H3 resolutions, while retaining information in separate, named bands](docs/imgs/raster2dggs-example.png \"Example use case for raster2dggs, showing how an input raster can be indexed at different H3 resolutions, while retaining information in separate, named bands\")\n\n## Installation\n\n`pip install raster2dggs`\n\n## Usage\n\n```\nraster2dggs h3 --help\n\nUsage: raster2dggs h3 [OPTIONS] RASTER_INPUT OUTPUT_DIRECTORY\n\n  Ingest a raster image and index it to the H3 DGGS.\n\n  RASTER_INPUT is the path to input raster data; prepend with protocol like\n  s3:// or hdfs:// for remote data. OUTPUT_DIRECTORY should be a directory,\n  not a file, as it will be the write location for an Apache Parquet data\n  store, with partitions equivalent to parent cells of target cells at a fixed\n  offset. However, this can also be remote (use the appropriate prefix, e.g.\n  s3://).\n\nOptions:\n  -v, --verbosity LVL             Either CRITICAL, ERROR, WARNING, INFO or\n                                  DEBUG  [default: INFO]\n  -r, --resolution [0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15]\n                                  H3 resolution to index  [required]\n  -u, --upscale INTEGER           Upscaling factor, used to upsample input\n                                  data on the fly; useful when the raster\n                                  resolution is lower than the target DGGS\n                                  resolution. Default (1) applies no\n                                  upscaling. The resampling method controls\n                                  interpolation.  [default: 1]\n  -c, --compression [snappy|gzip|zstd]\n                                  Name of the compression to use when writing\n                                  to Parquet.  [default: snappy]\n  -t, --threads INTEGER           Number of threads to use when running in\n                                  parallel. The default is determined based\n                                  dynamically as the total number of available\n                                  cores, minus one.  [default: 7]\n  -a, --aggfunc [count|mean|sum|prod|std|var|min|max|median]\n                                  Numpy aggregate function to apply when\n                                  aggregating cell values after DGGS indexing,\n                                  in case of multiple pixels mapping to the\n                                  same DGGS cell.  [default: mean]\n  -d, --decimals INTEGER          Number of decimal places to round values\n                                  when aggregating. Use 0 for integer output.\n                                  [default: 1]\n  -o, --overwrite\n  --warp_mem_limit INTEGER        Input raster may be warped to EPSG:4326 if\n                                  it is not already in this CRS. This setting\n                                  specifies the warp operation's memory limit\n                                  in MB.  [default: 12000]\n  --resampling [nearest|bilinear|cubic|cubic_spline|lanczos|average|mode|gauss|max|min|med|q1|q3|sum|rms]\n                                  Input raster may be warped to EPSG:4326 if\n                                  it is not already in this CRS. Or, if the\n                                  upscale parameter is greater than 1, there\n                                  is a need to resample. This setting\n                                  specifies this resampling algorithm.\n                                  [default: average]\n  --help                          Show this message and exit.\n```\n\n## Visualising output\n\nOutput is in the Apache Parquet format, a directory with one file per partition. Partitions are based on parent cell IDs, with the parent resolution determined as an offset from the target DGGS resolution.\n\nFor a quick view of your output, you can read Apache Parquet with pandas, and then use h3-pandas and geopandas to convert this into a GeoPackage for visualisation in a desktop GIS, such as QGIS. The Apache Parquet output is indexed by the DGGS column, so it should be ready for association with other data prepared in the same DGGS.\n\n```python\n>>> import pandas as pd\n>>> import h3pandas\n>>> o = pd.read_parquet('./tests/data/output/9/Sen2_Test')\n>>> o\nband             B02  B03  B04  B05  B06  B07  B08  B8A  B11  B12\nh3_09                                                            \n89bb0981003ffff    9   27   16   62  175  197  228  247  102   36\n89bb0981007ffff   10   30   17   66  185  212  238  261  113   40\n89bb098100bffff   10   26   15   60  169  190  228  241  103   37\n89bb098100fffff   11   29   17   66  181  203  243  257  109   39\n89bb0981013ffff    8   26   16   58  172  199  220  244   98   34\n...              ...  ...  ...  ...  ...  ...  ...  ...  ...  ...\n89bb0d6eea7ffff   10   18   15   41  106  120  140  146  102   47\n89bb0d6eeabffff   12   19   15   39   95  107  125  131   84   39\n89bb0d6eeafffff   12   21   17   43  101  115  134  141  111   51\n89bb0d6eeb7ffff   10   20   14   45  120  137  160  165  111   48\n89bb0d6eebbffff   15   28   20   56  146  166  198  202  108   47\n\n[5656 rows x 10 columns]\n>>> o.h3.h3_to_geo_boundary().to_file('~/Downloads/Sen2_Test_h3-9.gpkg', driver='GPKG')\n```\n\n## Installation\n\n<!-- TODO: package raster2dggs and make available on PyPI -->\n<!-- TODO: package raster2dggs and make available on Conda -->\n\n### For development\n\nIn brief, to get started:\n\n- Install [Poetry](https://python-poetry.org/docs/basic-usage/)\n- Install [GDAL](https://gdal.org/)\n    - If you're on Windows, `pip install gdal` may be necessary before running the subsequent commands.\n    - On Linux, install GDAL 3.6+ according to your platform-specific instructions, including development headers, i.e. `libgdal-dev`.\n- Create the virtual environment with `poetry init`. This will install necessary dependencies.\n- Subsequently, the virtual environment can be re-activated with `poetry shell`.\n\nIf you run `poetry install`, the CLI tool will be aliased so you can simply use `raster2dggs` rather than `poetry run raster2dggs`, which is the alternative if you do not `poetry install`.\n\n#### Code formatting\n\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nPlease run `black .` before committing.\n\n#### Testing\n\nTwo sample files have been uploaded to an S3 bucket with `s3:GetObject` public permission.\n\n- `s3://raster2dggs-test-data/Sen2_Test.tif` (sample Sentinel 2 imagery, 10 bands, rectangular, Int16, LZW compression, ~10x10m pixels, 68.6 MB)\n- `s3://raster2dggs-test-data/TestDEM.tif` (sample LiDAR-derived DEM, 1 band, irregular shape with null data, Float32, uncompressed, 10x10m pixels, 183.5 MB)\n\nYou may use these for testing. However you can also test with local files too, which will be faster.\n\n## Example commands\n\n```bash\nraster2dggs h3 --resolution 11 -d 0 s3://raster2dggs-test-data/Sen2_Test.tif ./tests/data/output/11/Sen2_Test\n```\n\n```\nraster2dggs h3 --resolution 13 --compression zstd --resampling nearest -a median -d 1 -u 2 s3://raster2dggs-test-data/TestDEM.tif ./tests/data/output/13/TestDEM\n```\n\n## Citation\n\n```bibtex\n@software{raster2dggs,\n  title={{raster2dggs}},\n  author={Ardo, James and Law, Richard},\n  url={https://github.com/manaakiwhenua/raster2dggs},\n  version={0.1.1},\n  date={2023-02-09}\n}\n```\n\nAPA/Harvard\n\n> Ardo, J., & Law, R. (2023). raster2dggs (0.1.1) [Computer software]. https://github.com/manaakiwhenua/raster2dggs \n\n[![manaakiwhenua-standards](https://github.com/manaakiwhenua/raster2dggs/workflows/manaakiwhenua-standards/badge.svg)](https://github.com/manaakiwhenua/manaakiwhenua-standards)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/manaakiwhenua/raster2dggs",
    "keywords": "dggs,raster,h3,cli",
    "license": "LGPL-3.0-or-later",
    "maintainer": "Richard Law",
    "maintainer_email": "lawr@landcareresearch.co.nz",
    "name": "raster2dggs",
    "package_url": "https://pypi.org/project/raster2dggs/",
    "platform": null,
    "project_url": "https://pypi.org/project/raster2dggs/",
    "project_urls": {
      "Homepage": "https://github.com/manaakiwhenua/raster2dggs",
      "Repository": "https://github.com/manaakiwhenua/raster2dggs"
    },
    "release_url": "https://pypi.org/project/raster2dggs/0.1.1/",
    "requires_dist": [
      "gdal (>=3.6.2,<4.0.0)",
      "geopandas (>=0.12.2,<0.13.0)",
      "h3pandas (>=0.2.3,<0.3.0)",
      "rioxarray (>=0.13.4,<0.14.0)",
      "dask-geopandas (>=0.3.0,<0.4.0)",
      "pyarrow (>=11.0.0,<12.0.0)",
      "dask (>=2023.3.0,<2024.0.0)",
      "click (>=8.1.3,<9.0.0)",
      "boto3 (>=1.26.85,<2.0.0)",
      "tqdm (>=4.65.0,<5.0.0)",
      "click-log (>=0.4.0,<0.5.0)",
      "rasterio (>=1.3.6,<2.0.0)"
    ],
    "requires_python": ">=3.10,<4.0",
    "summary": "",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17411592,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f573a82151fe6f5387f1bfe7873eedf5374ae8fba200273abe67648c8d630d1",
          "md5": "fa77dbbfe7f4371ed53b77b4663db124",
          "sha256": "b19bb5987c38fd975b7479d8b6184c00fdd47c195c36dd82c03c6f4dd99dac4d"
        },
        "downloads": -1,
        "filename": "raster2dggs-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa77dbbfe7f4371ed53b77b4663db124",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 25425,
        "upload_time": "2023-03-15T20:39:30",
        "upload_time_iso_8601": "2023-03-15T20:39:30.615731Z",
        "url": "https://files.pythonhosted.org/packages/4f/57/3a82151fe6f5387f1bfe7873eedf5374ae8fba200273abe67648c8d630d1/raster2dggs-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85883e64c04181574291157405414790e71356d033bf8412ab764fe41f754b3b",
          "md5": "2411ab4f9bfd0c5fa96e28a5b0f7e4e3",
          "sha256": "6044004681af91326c96b046f76478e59657b6366d05220cf9b4f9de2a000318"
        },
        "downloads": -1,
        "filename": "raster2dggs-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2411ab4f9bfd0c5fa96e28a5b0f7e4e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 11355,
        "upload_time": "2023-03-15T20:39:32",
        "upload_time_iso_8601": "2023-03-15T20:39:32.358168Z",
        "url": "https://files.pythonhosted.org/packages/85/88/3e64c04181574291157405414790e71356d033bf8412ab764fe41f754b3b/raster2dggs-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c0d7e32c7a3bb512da9b4eff486e2bdd0f7c1c641262df3fc04500d17869d8d4",
          "md5": "0949d625757b62b0824c37376e0df695",
          "sha256": "50606fd325d1fa2f18b3a5f548b11d230c575781fd2966b374389c2e29458742"
        },
        "downloads": -1,
        "filename": "raster2dggs-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0949d625757b62b0824c37376e0df695",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 25586,
        "upload_time": "2023-03-23T07:36:12",
        "upload_time_iso_8601": "2023-03-23T07:36:12.060963Z",
        "url": "https://files.pythonhosted.org/packages/c0/d7/e32c7a3bb512da9b4eff486e2bdd0f7c1c641262df3fc04500d17869d8d4/raster2dggs-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d18de62c82332cff2a45cccb0132eca4d9a9c54cfaf262151f0123fb6e6ad393",
          "md5": "41da7692c653ebb0bb34ffd8b0803be6",
          "sha256": "c5329e6519d0ba80ced65dd2e37a0ecfacbc2038f05b8cf30e8da751938c75ab"
        },
        "downloads": -1,
        "filename": "raster2dggs-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "41da7692c653ebb0bb34ffd8b0803be6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 11576,
        "upload_time": "2023-03-23T07:36:14",
        "upload_time_iso_8601": "2023-03-23T07:36:14.221966Z",
        "url": "https://files.pythonhosted.org/packages/d1/8d/e62c82332cff2a45cccb0132eca4d9a9c54cfaf262151f0123fb6e6ad393/raster2dggs-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c0d7e32c7a3bb512da9b4eff486e2bdd0f7c1c641262df3fc04500d17869d8d4",
        "md5": "0949d625757b62b0824c37376e0df695",
        "sha256": "50606fd325d1fa2f18b3a5f548b11d230c575781fd2966b374389c2e29458742"
      },
      "downloads": -1,
      "filename": "raster2dggs-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0949d625757b62b0824c37376e0df695",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 25586,
      "upload_time": "2023-03-23T07:36:12",
      "upload_time_iso_8601": "2023-03-23T07:36:12.060963Z",
      "url": "https://files.pythonhosted.org/packages/c0/d7/e32c7a3bb512da9b4eff486e2bdd0f7c1c641262df3fc04500d17869d8d4/raster2dggs-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d18de62c82332cff2a45cccb0132eca4d9a9c54cfaf262151f0123fb6e6ad393",
        "md5": "41da7692c653ebb0bb34ffd8b0803be6",
        "sha256": "c5329e6519d0ba80ced65dd2e37a0ecfacbc2038f05b8cf30e8da751938c75ab"
      },
      "downloads": -1,
      "filename": "raster2dggs-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "41da7692c653ebb0bb34ffd8b0803be6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 11576,
      "upload_time": "2023-03-23T07:36:14",
      "upload_time_iso_8601": "2023-03-23T07:36:14.221966Z",
      "url": "https://files.pythonhosted.org/packages/d1/8d/e62c82332cff2a45cccb0132eca4d9a9c54cfaf262151f0123fb6e6ad393/raster2dggs-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}