{
  "info": {
    "author": "Paul Martin",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Django Stripe\n\nThis library is designed to make it as easy as possible for Django web developers to manage Stripe Subscriptions. \n\nThere are three ways to use ```django-stripe```:\n\n1) A full featured Rest Framework API allowing end users to view products and prices and manage their subsciptions, payment methods and invoices.\n\n2) A self-hosted alternative to Stripe Checkout optimized for subscriptions.\n\n3) Functions which can easily be utilized in Django views for building custom checkouts are for checking a user's subscription status\n\nThe library is built with a particular focus on Django users which are central to everything. For example, users are restricted from accessing private objects not belonging to them.\n\nHere's an example of how the self-hosted checkout may look. The prices text can be overridden in the Stripe Dashboard by adding metadata. As it's a Django template everything can be overridden using blocks.\n\n![Checkout image here](https://raw.githubusercontent.com/primal100/django_stripe/master/docs/images/checkout.png)\n\nAt least for now, there are no webhooks used and no additional models. Anytime Stripe data is needed it is requested from the Stripe API. Caching is implemented in some cases to reduce the number of requests.\n\n## Getting Started\n\nTo install:\n\n```shell\npip install django-stripe-subs\n```\n\nYou must have a ```User``` model which implements the ```stripe_customer_id``` property:\n\n```python\nfrom django.db.contrib.auth import User\nfrom django.db import models\n\n\nclass StripeUser(User):\n    stripe_customer_id = models.CharField(max_length=255, blank=True, null=True, unique=True)\n\n```\n\n```Django Stripe``` also provides a built-in AbstractModel with the ```stripe_customer_id``` included. Because it's abstract it will not be enabled by default but can be subclassed:\n\n```python\nfrom django_stripe.models import StripeCustomerUser\n\nclass User(StripeCustomerUser):\n    pass\n```\n\n\nIf you already have a database field for storing a customer id or prefer a different field name, you can add a property:\n\n```python\nfrom django.db.contrib.auth import User\nfrom django.db import models\n\n\nclass StripeUser(User):\n    customer_id = models.CharField(max_length=255)\n\n    @property\n    def stripe_customer_id(self):\n        return self.customer_id\n```\n\nThere is a feature in ```django_stripe``` which allows users to be given temporary free access. To enable this feature, add the ```allowed_access_until``` field:\n\n\n```python\nfrom django.db import models\nfrom django_stripe.models import StripeCustomerUser\n\n\nclass User(StripeCustomerUser):\n    allowed_access_until = models.DateTimeField(blank=True, null=True)\n```\n\nNow, configure some settings in your web project settings.py file:\n\n1) Add ```rest_framework``` and ```django_stripe``` to INSTALLED_APPS.\n2) Set AUTH_USER_MODEL to your custom user\n3) In Stripe Dashboard create at least one subscription-based product and one price. In the price add the following metadata which will appear in the custom checkout: \n\n- additional_info\n- more_additional_info\n- price_header\n\nAdd your test api keys and product id to your app.\n\n```python\nINSTALLED_APPS = [\n    ...,\n    'rest_framework',\n    'django_stripe'\n\nAUTH_USER_MODEL = \"django_stripe_testapp.User\"\n\nSTRIPE_SECRET_KEY=\"sk_test...\"\nSTRIPE_PUBLISHABLE_KEY=\"pk_test...\"\nSTRIPE_DEFAULT_SUBSCRIPTION_PRODUCT_ID=\"prod_...\"\n```\n\n\nThe three Stripe settings can also be provided with environment variables (recommended for production).\n\nThere are many optional settings which will be covered later.\n\nFinally, let's add some paths to urls.py. This example shows how to enable all the URLs but you can pick and choose which ones you need.\n\n```python\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.urls import re_path\nfrom django_stripe.views import (\n    GoToSetupCheckoutView, GoToCheckoutView, GoToBillingPortalView, SubscriptionPortalView, SubscriptionHistoryView)\n\nurlpatterns = [\n    path('admin/', admin.site.urls),                                                                                            # The Django Admin\n    path('api/', include(\"django_stripe.urls\")),                                                                                # The Rest APIs\n    re_path(r'^api-auth/', include('rest_framework.urls')),                                                                     # Login and logout\n    re_path('^checkout/(?P<price_id>.*)/', GoToCheckoutView.as_view(), name='go-to-checkout'),                                  # Redirect a Stripe Checkout to allow a user to subscribe\n    re_path(r'^setup-checkout/(?:/(?P<subscription_id>.*)/)?', GoToSetupCheckoutView.as_view(), name='go-to-setup-checkout'),   # Redirect a Stripe Checkout to allow a user to subscribe\n    re_path(r'^billing-portal/', GoToBillingPortalView.as_view(), name='go-to-billing-portal'),                                 # Redirect to Stripe Billing Portal, needs to be enabled on Stripe.com\n    path(r'subscriptions/', SubscriptionHistoryView.as_view(), name='subscription-history'),                                    # Part of the django-stripe subscription portal showing subscription status and invoices\n    path(r'', SubscriptionPortalView.as_view(), name='subscription-portal'),                                                    # The django-stripe subscription portal\n]\n```\n\n\nThe url paths can be changed but the view names should be consistent. \nThe ```SubscriptionPortalView and``` ```SubscriptionHistoryView need``` must be used together and require at minimum the ```StripeSetupIntentView``` and ```StripeSubscriptionView``` API Views (included in ```django_stripe.urls```) to be enabled.\n\nThen, prepare your app and start it:\n\n```shell\npython manage.py makemigrations\npython manage.py migrate\npython manage.py runserver\n```\n\nYou should now see the custom checkout when you browse to ```localhost:8000```. It will look best if you create 2 or 3 prics with metadata ```price_header``` and ```additional_info``` set in the Stripe dashboard.\n\n## Rest API\n\nMost of the offical Stripe APIs are intended to be run server-side (the Secret API Key is required). The ```Django Stripe``` rest APIs are built on top of those and are designed to be run from the client. They convert the client request including authentication details into a server-side request to the Stripe API and return only data that is relevant to the user. They also prevent users viewing information belonging to other users by checking their customer id.\n\nThe Rest APIs are implemented using ```Django Rest Framework```. The easiest way to get familiar with the APIs is to use the ```rest-framework``` browsable API by opening a browser and going to the API URL.\n\nMost resources have a combination of resource URLs (for creating and listing) and instance URLs (for viewing, modifying and deleting objects).\n\nURLs listed in this tutorial assume the Getting Started procedure was followed but can easily by adjusted if the urls were changed.\n\n### Products\n\nMethods supported: GET\n\nProducts are read-only over the API. They can be created and changed on the Stripe Dashboard.\n\nThe view is included in ```django_stripe.urls``` or can be added individually:\n\n```python\nfrom django.urls import re_path\nfrom django_stripe.views import StripeProductsView\n\nurlpatterns = [\n    re_path(r'^products/(?:(?P<obj_id>.*)/)?', StripeProductsView.as_view(), name=\"products\")\n]\n```\n\nTo list products:\n\nhttp://localhost:8000/api/products/\n\nThe following filters can be applied by including with json data in the request:\n\n```\n- ids: List[str]\n```\n\nTo retrieve a single product:\n\nhttp://localhost:8000/api/prices/prod_Jo3KY017h0SZ1x/\n\nExample list request:\n\n```http request\nGET /api/products\nHTTP 200 OK\nAllow: GET, HEAD, OPTIONS\nContent-Type: application/json\nVary: Accept\n\n[\n    {\n        \"id\": \"prod_Jo3KY017h0SZ1x\",\n        \"images\": [],\n        \"metadata\": {},\n        \"name\": \"API Subscription\",\n        \"prices\": [\n            {\n                \"id\": \"price_1JB9PtCz06et8VuzfLu1Z9bf\",\n                \"recurring\": {\n                    \"aggregate_usage\": null,\n                    \"interval\": \"year\",\n                    \"interval_count\": 1,\n                    \"trial_period_days\": null,\n                    \"usage_type\": \"licensed\"\n                },\n                \"type\": \"recurring\",\n                \"currency\": \"eur\",\n                \"unit_amount\": 99999,\n                \"unit_amount_decimal\": \"99999\",\n                \"nickname\": \"Gold\",\n                \"metadata\": {\n                    \"additional_info\": \"Includes Everything\",\n                    \"price_header\": \"Gold\"\n                },\n                \"subscription_info\": {\n                    \"subscribed\": true,\n                    \"cancel_at\": null,\n                    \"current_period_end\": 1664832172\n                }\n            }\n        ],\n        \"shippable\": null,\n        \"subscription_info\": {\n            \"subscribed\": true,\n            \"cancel_at\": null,\n            \"current_period_end\": 1664832172\n        },\n        \"type\": \"service\",\n        \"unit_label\": null,\n        \"url\": null\n    },\n]\n```\n\n### Prices\n\nMethods supported: GET\n\nPrices are read-only over the API. They can be created and changed on the Stripe Dashboard.\n\nThe view is included in ```django_stripe.urls``` or can be added individually:\n\n```python\nfrom django.urls import re_path\nfrom django_stripe.views import StripePricesView\n\nurlpatterns = [\n    re_path(r'^prices/(?:(?P<obj_id>.*)/)?', StripePricesView.as_view(), name=\"prices\"),\n]\n```\n\n\nTo list prices:\n\nhttp://localhost:8000/api/prices/\n\nThe following filters can be applied by including with json data in the request:\n\n```\n- currency: str\n- product: str\n```\n\nTo retrieve a single price:\n\nhttp://localhost:8000/api/prices/price_1JB9PtCz06et8VuzfLu1Z9bf/\n\nExample list request:\n```http request\nGET /api/prices/\n\nHTTP 200 OK\nAllow: GET, HEAD, OPTIONS\nContent-Type: application/json\nVary: Accept\n\n[\n    {\n        \"id\": \"price_1JB9PtCz06et8VuzfLu1Z9bf\",\n        \"recurring\": {\n            \"aggregate_usage\": null,\n            \"interval\": \"month\",\n            \"interval_count\": 1,\n            \"trial_period_days\": null,\n            \"usage_type\": \"licensed\"\n        },\n        \"type\": \"recurring\",\n        \"currency\": \"usd\",\n        \"unit_amount\": 129,\n        \"unit_amount_decimal\": \"129\",\n        \"nickname\": null,\n        \"metadata\": {\n            \"additional_info\": \"Includes Everything\",\n            \"price_header\": \"Gold\"\n        },\n        \"product\": \"price_1JB9PtCz06et8VuzfLu1Z9bf\",\n        \"subscription_info\": {\n            \"subscribed\": false,\n            \"current_period_end\": null,\n            \"cancel_at\": null\n        }\n    }\n]\n```\n\n\n### Stripe Checkouts\n\nMethods supported: POST\n\nThis view is included in ```django_stripe.urls``` or can be added individually:\n\n```python\nfrom django.urls import re_path\nfrom django_stripe.views import StripePriceCheckoutView\n\nurlpatterns = [\n    re_path(r'^checkout/(?P<price_id>.*)/', StripePriceCheckoutView.as_view(), name=\"checkout\")\n]\n```\n\nCreate a Stripe checkout by making a POST request to the following URL including the ```price_id``` of the price the user wishes to subscribe to:\n\n```http request\nPOST /api/checkout/price_1JB9PtCz06et8VuzfLu1Z9bf/\n\nHTTP 201 Created\nAllow: POST, OPTIONS\nContent-Type: application/json\nVary: Accept\n\n{\n    \"id\": \"cs_test_a1vlrEt9aMdfpo42C6zuqWIXEpZdkjw0ESKga4K7tmdwYhwxknD5mnOxDS\"\n}\n```\nThe user can then be re-directed the new checkout using the ```stripe.js stripe.redirectToCheckout``` method. See the built-in checkout.html template for an example.\n\n### Stripe Setup Checkouts\n\nMethods supported: POST\n\nThis view is included in ```django_stripe.urls``` or can be added individually:\n\n```python\nfrom django.urls import re_path\nfrom django_stripe.views import StripeSetupCheckoutView\n\nurlpatterns = [\n    re_path(r'^setup-checkout/', StripeSetupCheckoutView.as_view(), name=\"setup-checkout\")\n]\n```\n\nCreate a Stripe Setup Checkout for adding payments details for future usage by making a POST request to the following URL:\n\n```http request\nPOST /api/setup-checkout/\n\nHTTP 201 Created\nAllow: POST, OPTIONS\nContent-Type: application/json\nVary: Accept\n\n{\n    \"id\": \"cs_test_c1U7FS4ro1GP9ic7iOUQInwcRLhoU6tIB00K0g4h0K2LROoL3dYe9Vr920\"\n}\n```\n\nThe user can then be re-directed the new checkout session using the ```stripe.js stripe.redirectToCheckout``` method. See the built-in checkout.html template for an example.\n\n\n### Stripe Billing Portal\n\nMethods supported: POST\n\nThis view is included in ```django_stripe.urls``` or can be added individually:\n\n```python\nfrom django.urls import re_path\nfrom django_stripe.views import StripeBillingPortalView\n\nurlpatterns = [\n    re_path(r'^billing/', StripeBillingPortalView.as_view(), name=\"billing\")\n]\n```\n\nCreate a Stripe Billing Portal subscriptions by making a post request to the following URL:\n\n```http request\nPOST /api/billing/\n\nHTTP 201 Created\nAllow: POST, OPTIONS\nContent-Type: application/json\nVary: Accept\n\n{\n    \"url\": \"https://billing.stripe.com/session/_KNoJpxaBUCxpjZYkNNu4INQzyeJfvf6\"\n}\n```\n\nBilling Portals must be enabled from the Stripe Dashboard.\n\nThe user can then be re-directed to the given URL.\n\n\n### Stripe Setup Intent\n\nMethods supported: POST\n\nThis view is included in ```django_stripe.urls``` or can be added individually:\n\n```python\nfrom django.urls import re_path\nfrom django_stripe.views import StripeSetupIntentView\n\nurlpatterns = [\n    re_path(r'^setup-intents', StripeSetupIntentView.as_view(), name=\"setup-intents\")\n]\n```\n\nCreate a Stripe Setup Intent by making a post request to the following URL:\n\n```http request\nPOST /api/setup-intents/\n\nHTTP 201 Created\nAllow: POST, OPTIONS\nContent-Type: application/json\nVary: Accept\n\n{\n    \"id\": \"seti_1Jj2iaCz06et8VuzkxkWgrkb\",\n    \"client_secret\": \"seti_1Jj2iaCz06et8VuzkxkWgrkb_secret_KNoL0pH9o4nY9PvJf9grD0SKQKltjfH\",\n    \"payment_method_types\": [\n        \"card\"\n    ]\n```\n\nThe ```client_secret``` can then be used to creating a new payment method with ```stripe.js stripe.confirmCardSetup``` method.\n\nThe payment method types support can be customized using in settings.py with ```STRIPE_PAYMENT_METHOD_TYPES```.\n\n\n### Invoices\n\nMethods supported: GET\n\nInvoices are read-only over the API. They are generated automatically and managed by Stripe.\n\nThis view is included in ```django_stripe.urls``` or can be added individually:\n\n```python\nfrom django.urls import re_path\nfrom django_stripe.views import StripeInvoiceView\n\nurlpatterns = [\n    re_path(r'^invoices/(?:(?P<obj_id>.*)/)?', StripeInvoiceView.as_view(), name=\"invoices\")\n]\n```\n\nTo list the authenticated user's invoices:\n\nhttp://localhost:8000/api/invoices/\n\nThe following filters can be applied by including with json data in the request:\n\n```\n- status: str (one of draft, open, paid, uncollectible, void)\n- subscription: str\n```\n\nTo retrieve a single invoice:\n\nhttp://localhost:8000/api/invoices/in_1Jj2tFCz06et8Vuzu3vzIdFJ/\n\nExample list request:\n\n```http request\nGET /api/invoices/\n\nHTTP 200 OK\nAllow: GET, HEAD, OPTIONS\nContent-Type: application/json\nVary: Accept\n\n[\n    {\n        \"id\": \"in_1Jj2tFCz06et8Vuzu3vzIdFJ\",\n        \"amount_due\": 29999,\n        \"amount_paid\": 29999,\n        \"amount_remaining\": 0,\n        \"billing_reason\": \"subscription_create\",\n        \"created\": 1633563554,\n        \"hosted_invoice_url\": \"https://invoice.stripe.com/i/acct_....\",\n        \"invoice_pdf\": \"https://pay.stripe.com/invoice/acct_....\",\n        \"next_payment_attempt\": null,\n        \"status\": \"paid\",\n        \"subscription\": \"sub_IMxfbzPJTsf22d\"\n    },\n]\n```\n\n\n### Payment Methods\n\nMethods Supported: GET, PUT, DELETE\n\nThis view is included in ```django_stripe.urls``` or can be added individually:\n\n```python\nfrom django.urls import re_path\nfrom django_stripe.views import StripePaymentMethodView\n\nurlpatterns = [\n    re_path(r'^payment-methods/(?:(?P<obj_id>.*)/)?', StripePaymentMethodView.as_view(), name=\"payment-methods\")\n]\n```\n\nPaymend methods can be read, modified or detached from a customer over the Rest API. To create a payment method, use the Stripe official Checkout or Billing Portal, ```django-stripe``` checkout or the Setup Intent API and ```stripe.js```.\n\nTo list the authenticated user's payment methods:\n\nhttp://localhost:8000/api/payment-methods/\n\nTo retrieve a single payment method:\n\nhttp://localhost:8000/api/payment-methods/pm_1Jj2tFCz06et8Vuzu3vzIdFJ/\n\nExample list request:\n\n```http request\nGET /api/payment-methods/\n\nHTTP 200 OK\nAllow: GET, PUT, DELETE, HEAD, OPTIONS\nContent-Type: application/json\nVary: Accept\n\n\n[\n    {\n        \"id\": \"pm_1Jj2tFCz06et8Vuzu3vzIdFJ\",\n        \"billing_details\": {\n            \"address\": {\n                \"city\": \"Dublin\",\n                \"country\": \"IE\",\n                \"line1\": \"O'Connell Street\",\n                \"line2\": null,\n                \"postal_code\": \"\",\n                \"state\": \"Dublin\"\n            },\n            \"email\": null,\n            \"name\": \"Jane Doe\",\n            \"phone\": null\n        },\n        \"card\": {\n            \"brand\": \"visa\",\n            \"checks\": {\n                \"address_line1_check\": \"pass\",\n                \"address_postal_code_check\": null,\n                \"cvc_check\": \"pass\"\n            },\n            \"country\": \"IE\",\n            \"exp_month\": 4,\n            \"exp_year\": 2055,\n            \"fingerprint\": \"4fs8d0OveGSOiKRG\",\n            \"funding\": \"credit\",\n            \"generated_from\": null,\n            \"last4\": \"4242\",\n            \"networks\": {\n                \"available\": [\n                    \"visa\"\n                ],\n                \"preferred\": null\n            },\n            \"three_d_secure_usage\": {\n                \"supported\": true\n            },\n            \"wallet\": null\n        },\n        \"created\": 1633563553,\n        \"type\": \"card\",\n        \"default\": false\n    },   \n]\n```\n\nDetach a Payment Method from the authenticated user:\n```http request\nDELETE /api/payment-methods/pm_1Jj2tFCz06et8Vuzu3vzIdFJ/\n\nHTTP 204 No Content\nAllow: GET, PUT, DELETE, HEAD, OPTIONS\nContent-Type: application/json\nVary: Accept\n```\n\nDetach all Payment Methods for the authenticated user:\n```http request\nDELETE /api/payment-methods/*/\n\nHTTP 204 No Content\nAllow: GET, PUT, DELETE, HEAD, OPTIONS\nContent-Type: application/json\nVary: Accept\n```\n\n\nTo update a Payment Method for the authenticated user, send the following request with one or all of the following data keys:\n\n```\n- set_as_default: bool\n- billing_details: JSON\n```\n\n\n```http request\nPUT /api/payment-methods/pm_1Jj2tFCz06et8Vuzu3vzIdFJ/\n\nHTTP 200 OK\nAllow: GET, PUT, DELETE, HEAD, OPTIONS\nContent-Type: application/json\nVary: Accept\n\n{\n    \"id\": \"pm_1Jj2tFCz06et8Vuzu3vzIdFJ\",\n    \"billing_details\": {\n          \"address\": {\n                \"city\": \"Dublin\",\n                \"country\": \"IE\",\n                \"line1\": \"O'Connell Street\",\n                \"line2\": null,\n                \"postal_code\": \"\",\n                \"state\": \"Dublin\"\n            },\n        \"email\": null,\n        \"name\": \"Jane Doe\",\n        \"phone\": null\n    },\n    \"card\": {\n        \"brand\": \"visa\",\n        \"checks\": {\n            \"address_line1_check\": null,\n            \"address_postal_code_check\": null,\n            \"cvc_check\": \"pass\"\n        },\n        \"country\": \"US\",\n        \"exp_month\": 5,\n        \"exp_year\": 2025,\n        \"fingerprint\": \"4fs8d0OveGSOiKRG\",\n        \"funding\": \"credit\",\n        \"generated_from\": null,\n        \"last4\": \"4242\",\n        \"networks\": {\n            \"available\": [\n                \"visa\"\n            ],\n            \"preferred\": null\n        },\n        \"three_d_secure_usage\": {\n            \"supported\": true\n        },\n        \"wallet\": null\n    },\n    \"created\": 1633293765,\n    \"type\": \"card\"\n}\n```\n\n\n### Subscriptions\n\nMethods Supported: POST, GET, PUT, DELETE\n\nThis view is included in ```django_stripe.urls``` or can be added individually:\n\n```python\nfrom django.urls import re_path\nfrom django_stripe.views import StripeSubscriptionView\n\nurlpatterns = [\n    re_path(r'^subscriptions/(?:(?P<obj_id>.*)/)?', StripeSubscriptionView.as_view(), name=\"subscriptions\")\n]\n```\n\nTo list the authenticated user's subscriptions:\n\nhttp://localhost:8000/api/subscriptions/\n\nTo retrieve a single subscription:\n\nhttp://localhost:8000/api/payment-methods/sub_1JhjheCz06et8VuzyEbux9T4/\n\n\n```http request\nGET /api/subscriptions/\nHTTP 200 OK\nAllow: GET, POST, PUT, DELETE, HEAD, OPTIONS\nContent-Type: application/json\nVary: Accept\n\n[\n    {\n        \"id\": \"sub_1JhjheCz06et8VuzyEbux9T4\",\n        \"created\": 1633563554,\n        \"product\": \"prod_Jo3KY017h0SZ1x\",\n        \"price\": \"price_1JB9PtCz06et8VuzfLu1Z9bf\",\n        \"cancel_at\": null,\n        \"current_period_end\": 1665099554,\n        \"current_period_start\": 1633563554,\n        \"days_until_due\": null,\n        \"default_payment_method\": null,\n        \"latest_invoice\": \"in_1Jj2tFCz06et8Vuzu3vzIdFJ\",\n        \"start_date\": 1633563554,\n        \"status\": \"active\",\n        \"trial_end\": null,\n        \"trial_start\": null\n    }\n]\n\n```\n\nTo create a subscription for the authenticated user, send a POST request to the following URL with the following paramaters:\n\n```\nprice_id: str\ndefault_payment_method: str\nset_as_default_payment_method: bool\n```\n\nThe ```price_id``` parameter is mandatory.\n\nThe ```default_payment_method``` parameter is mandatory if the customer does not already have a ```default_payment_method``` attached.\n\nThe ```set_as_default_payment_method``` parameter can be optionally set to true in which case the ```default_payment_method``` given for the subscription will become the ```set_as_default_payment_method``` for the customer also.\n\n\n```http request\nPOST /api/subscriptions/\n\nHTTP 201 Created\nAllow: GET, POST, PUT, DELETE, HEAD, OPTIONS\nContent-Type: application/json\nVary: Accept\n\n{\n    \"id\": \"sub_1Jj4ozCz06et8VuzZEEgJno2\",\n    \"created\": 1633883061,\n    \"product\": \"prod_Jo3EMrpYBKmHiM\",\n    \"price\": \"price_1JAR86Cz06et8VuzO1sER9MR\",\n    \"cancel_at\": null,\n    \"current_period_end\": 1665419061,\n    \"current_period_start\": 1633883061,\n    \"days_until_due\": null,\n    \"default_payment_method\": \"pm_1JgbWDCz06et8VuzKdb4KdZy\",\n    \"latest_invoice\": \"in_1Jj4ozCz06et8VuzUTSsTBT7\",\n    \"start_date\": 1633883061,\n    \"status\": \"active\",\n    \"trial_end\": null,\n    \"trial_start\": null\n}\n```\n\nTo update a Subscription for the authenticated user, send a PUT request to the instance url with one or all of the following data keys:\n\n```\n- default_payment_method: bool\n- billing_details: set_as_default_payment_method\n```\n\nTo cancel a Subscription for the authenticated user, send a DELETE request:\n\n```http request\nDELETE /api/subscriptions/sub_1Jj4ozCz06et8VuzZEEgJno2/\n\nHTTP 200 OK\nAllow: GET, POST, PUT, DELETE, HEAD, OPTIONS\nContent-Type: application/json\nVary: Accept\n\n{\n    \"id\": \"sub_1Jj4ozCz06et8VuzZEEgJno2\",\n    \"created\": 1633883061,\n    \"product\": \"prod_Jo3EMrpYBKmHiM\",\n    \"price\": \"price_1JAR86Cz06et8VuzO1sER9MR\",\n    \"cancel_at\": null,\n    \"current_period_end\": 1665419061,\n    \"current_period_start\": 1633883061,\n    \"days_until_due\": null,\n    \"default_payment_method\": \"pm_1JgbWDCz06et8VuzKdb4KdZy\",\n    \"latest_invoice\": \"in_1Jj4ozCz06et8VuzUTSsTBT7\",\n    \"start_date\": 1633883061,\n    \"status\": \"canceled\",\n    \"trial_end\": null,\n    \"trial_start\": null\n}\n\n\n```\n\n## Function Reference\n\n### Check User Subscription Status\n\n```python\nfrom django_stripe.payments import is_subscribed_and_cancelled_time, is_subscribed, is_subscribed_with_cache\n\n\ndef is_subscribed_and_cancelled_time(user, product_id: str = None) -> SubscriptionInfoWithEvaluation:\n    \"\"\"\n    Return first active subscription for a specific product to quickly check if a user is subscribed.\n    If the user object has attribute allowed_access_until, will check if set and valid.\n    \"\"\"\n\n\ndef is_subscribed(user, product_id: str = None) -> bool:\n    \"\"\"\n    Return a single bool value to check if a user is subscribed to the given product.\n    If the user object has attribute allowed_access_until, will check if set and if set and valid return True.\n    \"\"\"\n\ndef is_subscribed_with_cache(user, product_id: str = None) -> bool:\n    \"\"\"\n    Return first active subscription for a specific product to quickly check if a user is subscribed.\n    If the user object has attribute allowed_access_until, will check if set and valid.\n    Stores value in a cache for a a period of time set by settings.STRIPE_SUBSCRIPTION_CHECK_CACHE_TIMEOUT_SECONDS.\n    This reduces the number of queries needed to the Stripe API.\n    \"\"\"\n```\n### Manage Customers\n\nFor more information see https://stripe.com/docs/api/customers\n\n```python\nfrom django_stripe.payments import create_customer, modify_customer\n\ndef create_customer(user: DjangoUserProtocol, **kwargs):\n    \"\"\"\n    Creates a new customer over the stripe API using the user data. The customer id is saved to the user object.\n    The new_customer signal is sent.\n    The method is typically called automatically via the add_stripe_customer_if_not_existing decorator on most functions in the django_stripe.payments module.\n    \"\"\"\n\ndef modify_customer(user: DjangoUserProtocol, **kwargs) -> stripe.Customer:\n    \"\"\"\n    Modifies a customer over the stripe API.\n    The customer_modified signal is sent.\n    \"\"\"\n```\n\n### Create Stripe Checkout and Billing Portal Sessions\n\nThese functions create Stripe Checkouts sessions.\n\nUse stripe.js to redirect to the given sessionId or url.\n\nSee here for more info:\nhttps://stripe.com/docs/payments/checkout\n\n\n```python\nfrom django_stripe.payments import create_checkout, create_subscription_checkout, create_setup_checkout\n\ndef create_checkout(user: DjangoUserProtocol, method: Callable, **kwargs) -> stripe.checkout.Session:\n    \"\"\"\n    Creates a new Stripe checkout session for this user.\n    Recommended to call create_subscription_checkout or create_setup_checkout instead.\n    A checkout_created signal is sent.\n    \"\"\"\n\ndef create_subscription_checkout(user: DjangoUserProtocol, price_id: str, rest: bool = False,\n                                 **kwargs) -> stripe.checkout.Session:\n    \"\"\"\n    Creates a new Stripe subscription checkout session for this user for the given price.\n    An exception will be raised if the price does not exist. If rest is True, this will be a Rest Framework exception.\n    A checkout_created signal is sent.\n    \"\"\"\n\ndef create_setup_checkout(user: DjangoUserProtocol, rest: bool = False, **kwargs) -> stripe.checkout.Session:\n    \"\"\"\n    Creates a new Stripe setup checkout session for this user, allowing them to add a new payment method for future use.\n    Rest argument needed for consistency with create_subscription_checkout but there is no equivalent exception.\n    A checkout_created signal is sent.\n    \"\"\"\n\ndef create_billing_portal(user: DjangoUserProtocol) -> stripe.billing_portal.Session:\n    \"\"\"\n    Creates a new Stripe Billing Portal session for this user.\n    A billing_portal_created signal is sent.\n    \"\"\"\n```\n\n\n### View Products and Prices\n\nFor more info see: https://stripe.com/docs/billing/prices-guide\n\n\n```python\nfrom django_stripe.payments import get_products, get_prices, retrieve_product, retrieve_price\n\ndef get_products(user, ids: List[str] = None, price_kwargs: Dict[str, Any] = None, rest: bool = False,\n                 **kwargs) -> List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of products.\n    Ids a is list of product_ids to filter on.\n    If settings.STRIPE_ALLOW_DEFAULT_PRODUCT_ONLY is True and ids contains another product, then permission denied exception is raised.\n    If rest is True, this is a Rest Framework Exception.\n    \"\"\"\n\ndef get_prices(user, product: str = None, currency: str = None, rest: bool = False, **kwargs) -> List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of products.\n    Ids a is list of product_ids to filter on.\n    Currency allows to filter on currency.\n    If settings.STRIPE_ALLOW_DEFAULT_PRODUCT_ONLY is True, and product is another id, an exception is raised. If rest is True, this is a Rest Framework Exception.\n    \"\"\"\n\n\ndef retrieve_product(user, obj_id: str, price_kwargs: Optional[Dict[str, Any]] = None,\n                     rest: bool = False) -> Dict[str, Any]:\n    \"\"\"\n    Retrieve a single product with prices and subscription information included in the result.\n    price_kwargs is a list of filters provided to stripe.Price.list\n    \"\"\"\n\ndef retrieve_price(user, obj_id: str, rest: bool = False) -> Dict[str, Any]:\n    \"\"\"\n    Retrieve a single price with subscription info\n    \"\"\"\n```\n\n\n### Creating Setup Intents\n\nSetup Intents are the first step to creating a paying method which can later be used for paying for subscriptions.\n\nFor more information see:\nhttps://stripe.com/docs/api/setup_intents\n\n```python\nfrom django_stripe.payments import create_setup_intent\n\ndef create_setup_intent(user, **kwargs) -> stripe.SetupIntent:\n    \"\"\"\n    Create a setup intent, the first step in adding a payment method which can later be used for paying subscriptions.\n    price_kwargs is a list of filters provided to stripe.SetupIntent.create\n    Generates a setup_intent_created signal\n    \"\"\"\n```\n\n\n### Managing Payment Methods\n\nFor more info on Payment Methods in Stripe see: https://stripe.com/docs/payments/payment-methods\n\n```python\nfrom django_stripe.payments import list_payment_methods, detach_payment_method, detach_all_payment_methods, modify_payment_method\n\ndef list_payment_methods(user, types: List[PaymentMethodType] = None, **kwargs) -> Generator[stripe.PaymentMethod, None, None]:\n    \"\"\"\n    Returns a generator which contains all payment methods for the user.\n    Stripe only allows to retrieve payment methods for a single type at a time.\n    This functions gathers payment methods from multiple types by making parallel requests to the Stripe API.\n    kwargs is additional filters to pass to stripe.PaymentMethod.list\n    \"\"\"\n\ndef detach_payment_method(user, pm_id: str) -> stripe.PaymentMethod:\n    \"\"\"\n    Detach a user's payment method.\n    It is needed to retrieve the payment method first to check the customer id.\n    If a customer attempts to detach an object belonging to another customer, StripeWrongCustomer exception is raised.\n    The payment_method_detached signal is sent.\n    \"\"\"\n\n\ndef detach_all_payment_methods(user, types: List[PaymentMethodType] = None, **kwargs) -> List[stripe.PaymentMethod]:\n    \"\"\"\n    Detach all of a user's payment methods of the given types.\n    The payment_method_detached signal is sent.\n    \"\"\"\n\ndef modify_payment_method(user: DjangoUserProtocol, obj_id: str, set_as_default: bool = False, **kwargs) -> stripe.PaymentMethod:\n    \"\"\"\n    Modifies a payment method over the stripe API using the user data.\n    If set_as_default is True, the payment method is set as the default for this customer.\n    The modified customer is returned.\n    The customer_modified signal is sent.\n    A StripeWrongCustomer exception is raised if a customer attempts to access a payment method belonging to another customer.\n    \"\"\"\n```\n\n### Manage Subscriptions\n\nFor more info see: https://stripe.com/docs/api/subscriptions\n\n```python\nfrom django_stripe.payments import create_subscription, modify_subscription, cancel_subscription, cancel_subscription_for_product\n\ndef create_subscription(user, price_id: str, set_as_default_payment_method: bool = False, **kwargs) -> stripe.Subscription:\n    \"\"\"\n    Create a new subscription for the given user and price_id. A payment method must already be created.\n    If set_as_default_payment_method is true, the given payment method will be set as the default for this customer.\n    kwargs is a list of parameters to provide to stripe.Subscription.create in the Stripe API.\n    The signal subscription_created is sent.\n    \"\"\"\n    \ndef modify_subscription(user, sub_id: str, set_as_default_payment_method: bool = False, **kwargs) -> stripe.Subscription:\n    \"\"\"\n    Modify a user's subscription\n    kwargs is the parameters to modify.\n    If payment_method is given in kwargs and set_as_default_payment_method is true, the default payment method is changed to that payment method for all subscriptions.\n    Raises StripeWrongCustomer is a user tries to modify a subscription belonging to another customer.\n    The signal subscription_modified is sent.\n    \"\"\"\n    \n    \ndef cancel_subscription(user, subscription_id: str) -> stripe.Subscription:\n    \"\"\"\n    Allow a user to cancel their subscription.\n    If a user attempts to cancel a subscription belonging to another customer, StripeWrongCustomer will be raised.\n    \"\"\"\n    \ndef cancel_subscription_for_product(user, product_id: str) -> bool:\n    \"\"\"\n    Allow a user to cancel their subscription by the id of the product they are subscribed to, if such a subscription exists.\n    Returns True if the subscription exists for that user, otherwise False.\n    \"\"\"\n```\n\n\n### Generic Functions for Interacting with the Stripe API\n\nThese functions mirror the retrieve, delete and modify methods of Stripe resources, but also check that the user owns the requested object. An exception will be raised otherwise. \n\n\n```python\nfrom django_stripe.payments import list_customer_resource, retrieve, delete, modify\n\ndef list_customer_resource(user: DjangoUserProtocol, obj_cls: Type, **kwargs) -> List[Dict[str, Any]]:\n    \"\"\"\n    Generic method for listing on the given Stripe resource filtered by items owned by the user kwargs\n    obj_cls could be stripe.Subscription, stripe.PaymentMethod, stripe.Invoice, etc.\n    \"\"\"\n\ndef retrieve(user: DjangoUserProtocol, obj_cls: Type, obj_id: str):\n    \"\"\"\n    Retrieve an object over Stripe API for the given obj_id and obj_cls.\n    obj_cls could be stripe.Subscription, stripe.PaymentMethod, stripe.Invoice, etc.\n    If a customer attempts to retrieve an object belonging to another customer, StripeWrongCustomer exception is raised.\n    \"\"\"\n\ndef delete(user, obj_cls: Type, obj_id: str) -> Dict[str, Any]:\n    \"\"\"\n    Delete an object over Stripe API with given obj_id for obj_cls.\n    obj_cls could be stripe.Subscription, stripe.PaymentMethod, stripe.Invoice, etc.\n    It is needed to retrieve the obj first to check the customer id.\n    If a customer attempts to delete an object belonging to another customer, StripeWrongCustomer exception is raised.\n    An appropriate signal is sent for the given resource deletion.\n    \"\"\"\n\ndef modify(user: DjangoUserProtocol, obj_cls: Type, obj_id: str, **kwargs: Dict[str, Any]):\n    \"\"\"\n    Modify an object over Stripe API with given obj_id for obj_cls.\n    obj_cls could be stripe.Subscription, stripe.PaymentMethod, stripe.Invoice, etc.\n    It is needed to retrieve the obj first to check the customer id.\n    If a customer attempts to modify an object belonging to another customer, StripeWrongCustomer exception is raised.\n    kwargs are the parameters to be modified.\n    An appropriate signal is sent for the given resource modification.\n    \"\"\"\n```\n\n## Settings\n\nThe following settings can be configured in settings.py or where mentioned, as an environment variable.\n\n- ```STRIPE_SECRET_KEY: str```: The Stripe Secret Key as shown in the Stripe Dashboard. Environment variable recommended for production.\n\n- ```STRIPE_PUBLISHABLE_KEY: str```: The Stripe Publishable Key as shown in the Stripe Dashboard. Can also be set wih an environment variable.\n\n- ```STRIPE_APP_DATA: str```: Optional data to send with Stripe API requests\n\n- ```STRIPE_CHECKOUT_SUCCESS_URL: str```: URL to redirect to after Stripe Checkout is completed \n\n- ```STRIPE_CHECKOUT_CANCEL_URL: str```: URL to redirect to if a Stripe Checkout is cancelled\n\n- ```STRIPE_PAYMENT_METHOD_TYPES: str```: List of payment methods supported by checkout sessions and Setup Intents.\n\n- ```STRIPE_KEEP_CUSTOMER_DETAILS_UPDATED: str```: When a user's name or email is changed, whether the value is also updated for the customer over the Stripe API\n\n- ```STRIPE_NEW_CUSTOMER_GET_KWARGS: str```: A function which provides additional parameters to the Stripe API when creating a customer. \n\n\nThe function signature is:\n\n```python\n        def additional_customer_parameters(user: User, **kwargs) -> Dict[str, Any]:\n``````\n\n- ```STRIPE_BILLING_PORTAL_RETURN_URL: str```: The URL to return users to after they complete a Stripe Billing Portal Session.\n\n- ```STRIPE_FREE_ACCESS_PRICE_ID: str```: If a user has been given free access, this is the price_id they are being given free access to which will be returned in the responses.\n\n- ```STRIPE_DEFAULT_SUBSCRIPTION_PRODUCT_ID: str```: The default product_id for subscriptions. Used to select prices for the django-stripe checkout. Can also be set wih an environment variable.\n\n- ```STRIPE_ALLOW_DEFAULT_PRODUCT_ONLY: str```: If set to True, users will be restricting from accessing any product_id other than the default one.\n\n- ```STRIPE_CREDIT_CARD_HIDE_POSTAL_CODE: str```: Whether to show the Postal Code field in Stripe Elements in the ```django_stripe``` checkout.\n\n- ```STRIPE_CHECKOUT_TITLE: str```:  Title of the ```django_stripe``` checkout page.\n\n- ```STRIPE_CHECKOUT_DEV_MODE: str```: Show additional information such as test credit card numbers in the ```django_stripe``` checkout page. This will be overridden as False if test does not appear in the Stripe Publishable key so it is safe to always leave this as True.\n\n- ```STRIPE_CHECKOUT_DEFAULT_COUNTRY: str```: The default country to set the Billing Details form to in the ```django_stripe``` checkout page.\n\n- ```COUNTRY_HEADER: str```:  If a two-letter country code exists as a header in the request, set the header name here and the value of the header will be used as the default country in the django-stripe checkout page. For example, if requests pass through Cloudflare, set this value to ```'HTTP_CF_IPCOUNTRY'```. If this header is available, it takes priority, otherwise ```STRIPE_CHECKOUT_DEFAULT_COUNTRY``` is used.\n\n- ```STRIPE_SUBSCRIPTION_CACHE_NAME: str```: Caching can be used when checking if a user is subscribed. This is the cache name to use for storing subscriptions.\n\n- ```STRIPE_SUBSCRIPTION_CHECK_CACHE_TIMEOUT_SECONDS: str```:  How long to store keys in the Stripe Subscription Cache.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/primal100/django_stripe",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-stripe-subs",
    "package_url": "https://pypi.org/project/django-stripe-subs/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-stripe-subs/",
    "project_urls": {
      "Homepage": "https://github.com/primal100/django_stripe"
    },
    "release_url": "https://pypi.org/project/django-stripe-subs/0.3/",
    "requires_dist": [
      "django",
      "djangorestframework",
      "inflect",
      "stripe",
      "stripe-subscriptions",
      "typing-extensions (>=3.10.0.0) ; python_version < \"3.8\""
    ],
    "requires_python": "",
    "summary": "Easier management of subscriptions with Stripe in Django",
    "version": "0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11736754,
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e39392c482a4f71ebb67272d19cd2e59a928c13ef26e64b394cedd89a0dfb188",
          "md5": "8d82e7a808ecee78065d0b6c5b8c437c",
          "sha256": "572413286cf7a5efc9efda80b7d4b004ea5274f29e44a119cbbad97121ca9a1a"
        },
        "downloads": -1,
        "filename": "django_stripe_subs-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d82e7a808ecee78065d0b6c5b8c437c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30823,
        "upload_time": "2021-10-11T13:14:05",
        "upload_time_iso_8601": "2021-10-11T13:14:05.623712Z",
        "url": "https://files.pythonhosted.org/packages/e3/93/92c482a4f71ebb67272d19cd2e59a928c13ef26e64b394cedd89a0dfb188/django_stripe_subs-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32e9cd8b5d0dfaf3b50b310a7ccdf88c8289519f0248054314331c4601dd412c",
          "md5": "d6bbe86471c4f067d5daaa9b13775805",
          "sha256": "8992f23908c7ea3842ea5c3ecf91b9b01b789ea85c97b341f0b372174c10d0ab"
        },
        "downloads": -1,
        "filename": "django_stripe_subs-0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6bbe86471c4f067d5daaa9b13775805",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30885,
        "upload_time": "2021-10-15T14:56:50",
        "upload_time_iso_8601": "2021-10-15T14:56:50.340891Z",
        "url": "https://files.pythonhosted.org/packages/32/e9/cd8b5d0dfaf3b50b310a7ccdf88c8289519f0248054314331c4601dd412c/django_stripe_subs-0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "32e9cd8b5d0dfaf3b50b310a7ccdf88c8289519f0248054314331c4601dd412c",
        "md5": "d6bbe86471c4f067d5daaa9b13775805",
        "sha256": "8992f23908c7ea3842ea5c3ecf91b9b01b789ea85c97b341f0b372174c10d0ab"
      },
      "downloads": -1,
      "filename": "django_stripe_subs-0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d6bbe86471c4f067d5daaa9b13775805",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30885,
      "upload_time": "2021-10-15T14:56:50",
      "upload_time_iso_8601": "2021-10-15T14:56:50.340891Z",
      "url": "https://files.pythonhosted.org/packages/32/e9/cd8b5d0dfaf3b50b310a7ccdf88c8289519f0248054314331c4601dd412c/django_stripe_subs-0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}