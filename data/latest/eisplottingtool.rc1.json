{
  "info": {
    "author": "Ulrich Sauter",
    "author_email": "usauterv@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Chemistry"
    ],
    "description": "# eisplottingtools\n\nThis package was created during my civil service at EMPA. to process, plot and fit electrochemical impedance\nspectroscopy (EIS) data.\n\nThis package itself centered around the class `EISFrame`, which itself is a wrapper around\na [`pandas.DataFrame`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html). The `EISFrame` contains\nadditional methods to plot, fit and manipulate EIS data and also other electrochemical data.\n\n## Installation\n\nThis package is currently not on [PyPI](https://pypi.org/).  \nTo install and use this package fork or clone the repository on [GitHub](https://github.com/ileu/eisplottingtool). Move\nto the folder where the repository is located on your local machine and open a Terminal.\n\nTo install run:\n\n```bash\n> py -m pip install .\n```\n\nto install and editable version use:\n\n```bash\n> py -m pip install -e .\n```\n\n## Example Usage\n\n### Step 1: Import data & create EISFrame\n\nTo load data and to create an `EISFrame`the `load_data`function can be used.  \nThe following file types are supported to load data from: `csv`, `txt`, `mpr`, `mpt`.\n\n```python\nimport eisplottingtool as ept\n\ndata = ept.load_data(\"Example_Data.mpr\")\n```\n\n### Step 2: Manipulate Data\n\nAn `EISFrame` is essentially a wrapper around a `pandas.DataFrame` with additional functionality.  \nLike a `DataFrame` the data in an `EisFrame` can be accessed directly with the index operator `[...]`.  \n- int for accessing cycles\n- \n\n\n### Step 3: Define an equivalent circuit\n\nTo fit our data an equivalent circuit is needed, defined as a string.  \nTo combine Elements  are combined in series by a dash (`-`) is used. Elements in parallel are wrapped by `p( , )`.  \nAn element is defined by a symbol made of letters followed by a digit. Implemented components are:\n\nFor example the following circuit would be defined as:\n\n#### Implemented components\n\n| Name                          | Symbol | Parameters | Default Bounds | Units        |\n|-------------------------------|--------|------------|----------------|--------------|\n| Resistor                      | R      | R          | (1e-6, 1e6)    | Ohm          |\n| Capacitance                   | C      | C          | (1e-20, 1)     | Farad        |\n| Constant Phase Element        | CPE    | CPE_Q      | (1e-20, 1)     | Ohm^-1 s^n   |\n|                               |        | CPE_n      | (0, 1)         |              |\n| Warburg element               | W      | W          | (0, 1e10)      | Ohm^-1 s^0.5 |\n| Warburg short element         | Ws     | Ws_R       | (0, 1e10)      | Ohm          |\n|                               |        | Ws_T       | (1e-10, 1e10)  | s            |\n| Warburg open element          | Wo     | Wo_R       | (0, 1e10)      | Ohm          |\n|                               |        | Wo_T       | (1e-10, 1e10)  | s            |\n| Warburg short element special | Wss    | Wss_R      | (0, 1e10)      | Ohm          |\n|                               |        | Wss_T      | (1e-10, 1e10)  | s            |\n|                               |        | Wss_n      | (0, 1)         |              |\n| Warburg open element special  | Wos    | Wos_R      | (0, 1e10)      | Ohm          |\n|                               |        | Wos_T      | (1e-10, 1e10)  | s            |\n|                               |        | Wos_n      | (0, 1)         |              |\n\n### Step 4: Fit the data\n\nLeast_squares is a good fitting method but will get stuck in local minima. For this reason, the Nelder-Mead-Simplex\nalgorithm is used to get out of these local minima. The fitting routine is inspired by Relaxis 3 fitting procedure. More\ninformation about it can be found on page 188 of revision 1.25\nof [Relaxis User Manual](https://www.rhd-instruments.de/download/manuals/relaxis_manual.pdf).\n\n### Step 5: visualize the data\n\n## Functions\n\nExtended Backusâ€“Naur form (EBNF) parser for a circuit string.\n\nImplements an extended Backusâ€“Naur form (EBNF)  to parse a string that describes a circuit Already implemented circuit\nelements are located in CircuitComponents.py To use a component in the circuit string use its symbol. The symbol can be\nfollowed by a digit to differentiate similar components.\n\nTo put elements in series connect them through '-' Parallel elements are created by p(Elm1, Elm2,...)\n\nThe syntax of the EBNF is given by:\n- circuit = element | element-circuit - element = component | parallel - parallel = p(circuit {,circuit})\n- component = a circuit component defined in ``circuit_components``\n\nFrom this an equation for the impedance is generated and evaluated.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ileu/EISFrame",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eisplottingtool",
    "package_url": "https://pypi.org/project/eisplottingtool/",
    "platform": null,
    "project_url": "https://pypi.org/project/eisplottingtool/",
    "project_urls": {
      "Bug Tracker": "https://github.com/ileu/EISFrame/issues",
      "Homepage": "https://github.com/ileu/EISFrame"
    },
    "release_url": "https://pypi.org/project/eisplottingtool/0.1.5/",
    "requires_dist": [
      "numpy",
      "pandas",
      "eclabfiles (>=0.4.0)",
      "pint",
      "scipy",
      "matplotlib",
      "schemdraw (>=0.12)"
    ],
    "requires_python": ">=3.9",
    "summary": "A tool used to plot EIS data and other battery related data",
    "version": "0.1.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13149024,
  "releases": {
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ebd47ad8d358578aaaca6c823276cdca3eecafcea4b0ab422a9028f71f256c2",
          "md5": "5d8acc8d58d8e71d5576246dc204d757",
          "sha256": "90e18aabcdec1826494f63c625b1dbf9f8f6ab380fc50ee25ba305cdf7d9bcdd"
        },
        "downloads": -1,
        "filename": "eisplottingtool-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d8acc8d58d8e71d5576246dc204d757",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 43487,
        "upload_time": "2022-03-11T12:14:15",
        "upload_time_iso_8601": "2022-03-11T12:14:15.546068Z",
        "url": "https://files.pythonhosted.org/packages/1e/bd/47ad8d358578aaaca6c823276cdca3eecafcea4b0ab422a9028f71f256c2/eisplottingtool-0.1.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d89efe235346aafc330507619c0e8fc65f24054bf7008d6bdecda95c2ca658ff",
          "md5": "ef5e288ad5014e4890aca6ff933046d6",
          "sha256": "d999b8f1d8375b4b45c6bd05f3f1db1ddb54053f0e4ba03191b94222b20eefdc"
        },
        "downloads": -1,
        "filename": "eisplottingtool-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ef5e288ad5014e4890aca6ff933046d6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 38929,
        "upload_time": "2022-03-11T12:14:19",
        "upload_time_iso_8601": "2022-03-11T12:14:19.042359Z",
        "url": "https://files.pythonhosted.org/packages/d8/9e/fe235346aafc330507619c0e8fc65f24054bf7008d6bdecda95c2ca658ff/eisplottingtool-0.1.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1ebd47ad8d358578aaaca6c823276cdca3eecafcea4b0ab422a9028f71f256c2",
        "md5": "5d8acc8d58d8e71d5576246dc204d757",
        "sha256": "90e18aabcdec1826494f63c625b1dbf9f8f6ab380fc50ee25ba305cdf7d9bcdd"
      },
      "downloads": -1,
      "filename": "eisplottingtool-0.1.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5d8acc8d58d8e71d5576246dc204d757",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 43487,
      "upload_time": "2022-03-11T12:14:15",
      "upload_time_iso_8601": "2022-03-11T12:14:15.546068Z",
      "url": "https://files.pythonhosted.org/packages/1e/bd/47ad8d358578aaaca6c823276cdca3eecafcea4b0ab422a9028f71f256c2/eisplottingtool-0.1.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d89efe235346aafc330507619c0e8fc65f24054bf7008d6bdecda95c2ca658ff",
        "md5": "ef5e288ad5014e4890aca6ff933046d6",
        "sha256": "d999b8f1d8375b4b45c6bd05f3f1db1ddb54053f0e4ba03191b94222b20eefdc"
      },
      "downloads": -1,
      "filename": "eisplottingtool-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "ef5e288ad5014e4890aca6ff933046d6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 38929,
      "upload_time": "2022-03-11T12:14:19",
      "upload_time_iso_8601": "2022-03-11T12:14:19.042359Z",
      "url": "https://files.pythonhosted.org/packages/d8/9e/fe235346aafc330507619c0e8fc65f24054bf7008d6bdecda95c2ca658ff/eisplottingtool-0.1.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}