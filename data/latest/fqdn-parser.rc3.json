{
  "info": {
    "author": "John Conwell",
    "author_email": "john@iamjohn.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python"
    ],
    "description": "===========\nFQDN Parser\n===========\n\n-------------------\nUpdate: March, 2023\n-------------------\n\nI'm thinking about adding in a whole bunch of other OSINT'y functionality related to domain names. Kind of a\none stop shop for \"*get all the things about this FQDN*\".\n\n- x509 cert collection and parsing\n- WHOIS (via asyncwhois) to get Registrar and registration date, and maybe other fields\n- NameServer collection\n- Full URL parsing and support for other protocols (maybe)\n- DNS record collection and parsing\n- *Anything else? Create an issue and I'll consider adding it*\n\n-------\nInstall\n-------\n\nTo install via Pypi\n\n:code:`pip install fqdn-parser`\n\n--------\nOverview\n--------\n\nFQDN Parser (Fully Qualified Domain Name Parser) is a library used to parse FQDNs into their component parts,\nincluding subdomains, domain names, and their `Public Suffix <https://publicsuffix.org/list/public_suffix_list.dat>`_.\n\nIt also provides additional contextual metadata about the domain's TLD including:\n\n- International TLDs in both unicode and puny code format\n- The TLD type: generic, generic-restricted, country-code, sponsored, test, infrastructure, and host_suffix (.onion)\n- The date the TLD was registered with ICANN\n- In the case of multi-label effective TLDs, is it public like :code:`.co.uk` which is owned by a Registrar or private like :code:`.duckdns.org` which is owned by a private company\n- If the TLD (or any label in the FQDN) is puny code encoded, the ascii'ification of the unicode. This can be useful for identifying registrable domains that use unicode characters that are very similar to ascii characters used by legitimate domains, a common phishing technique.\n\nThe TLD metadata can be used as contextual features for machine learning models that generate predictions about domain names and FQDNs.\n\n---------------------------------\nData sources used by FQDN Parser:\n---------------------------------\n\n- TLD metadata comes from the `IANA Root Zone Database <https://www.iana.org/domains/root/db>`_\n- Multi-label suffix data comes from the `Mozilla Public Suffix List <https://publicsuffix.org/list/public_suffix_list.dat>`_\n\nThe first time fqdn_parser is run, it will perform two http calls to the links above to pull down the latest ICANN and\nPublic Suffix List information. This may take a few seconds to pull the data down, parse, and persist into a cache file.\nSubsequent calls to fqdn_parser will use the existing cache file and be much faster. The cache file can be managed via\narguments to the :code:`Suffixes` class constructor.\n\nNote: As of the last commit there are 9 country code TLDs listed in the Mozilla Public Suffix List that are `not` listed\nin the IANA Root Zone Database for some reason. These TLDs are added to the parsing cache file, but you will see a\nwarning for each TLD like:\n\n    :code:`WARNING: 澳门 not in IANA root zone database. Adding to list of TLDs`\n\n-----------\nTerminology\n-----------\n\nComing up with a consistent naming convention for each specific part of a FQDN can get a little inconsistent and\nconfusing.\n\nTake for example :code:`somedomain.co.jp`; many people would call :code:`somedomain` the second level domain, or SLD,\nbut actually the `2nd` level domain is :code:`.co` and :code:`somedomain` is the `3rd` level domain. But since\nmost domain names have only 2 levels a lot of people have standardized on SLD. But when writing code logic to parse FQDNs\nit is way more clear to be pedantic about naming.\n\nThis library uses a very specific naming convention in order to be explicitly clear about what every label means.\n\n    :code:`tld` - the actual top level domain of the FQDN. This is the domain that is controlled by IANA.\n\n    :code:`effective_tld` - this is the full domain suffix, which can be made up of 1 to many labels. The effective\n    TLD is the thing a person chooses to register a domain under and is controlled by a Registrar, or in the case of\n    private domain suffixes the company that owns the private suffix (like DuckDNS).\n\n    :code:`registrable_domain` - this is the full domain name that a person registers with a Registrar and includes the\n    effective tld.\n\n    :code:`registrable_domain_host` - this is the label of the registrable domain without the effective tld. Most people\n    call this the second level domain, but as you can see this can get confusing.\n\n    :code:`fqdn` (Fully Qualified Domain Name) - this is the full list of labels.\n\n    :code:`pqdn` (Partially Qualified Domain Name) - this is the  list of sub-domains in a FQDN, not including the\n    registrable domain and the effective TLD.\n\nTo give a concrete example of these names, take the FQDN :code:`test.integration.api.somedomain.co.jp`\n\n    :code:`tld` - jp\n\n    :code:`effective_tld` - co.jp\n\n    :code:`registrable_domain` - somedomain.co.jp\n\n    :code:`registrable_domain_host` - somedomain\n\n    :code:`fqdn` - test.integration.api.somedomain.co.jp\n\n    :code:`pqdn` - test.integration.api\n\n--------------\nUsage Examples\n--------------\n\nParse the registrable domain host from a FQDN:\n\n.. code-block:: python\n\n    from fqdn_parser.suffixes import Suffixes\n    suffixes = Suffixes(read_cache=True)\n    fqdn = \"login.mail.stuffandthings.co.uk\"\n    result = suffixes.parse(fqdn)\n    # TLD metadata\n    print(f\"tld: {result.tld}\")\n    print(f\"tld type: {result.tld_type}\")\n    print(f\"tld registry: {result.tld_registry}\")\n    print(f\"tld create date: {result.tld_create_date}\")\n    print(f\"tld punycode: {result.is_tld_punycode}\")\n    print(f\"is tld punycode: {result.tld_puny}\")\n    print(f\"effective tld: {result.effective_tld}\")\n    print(f\"is tld multi part: {result.is_tld_multi_part}\")\n    # domain name info\n    print(f\"registrable domain: {result.registrable_domain}\")\n    print(f\"registrable domain host: {result.registrable_domain_host}\")\n    print(f\"fqdn: {result.fqdn}\")\n    print(f\"pqdn: {result.pqdn}\")\n    print(f\"is fqdn (vs ip address): {result.is_fqdn}\")\n    print(f\"is ip (vs fqdn): {result.is_ip}\")\n    # private suffix\n    print(f\"private suffix: {result.private_suffix}\")\n\n.. code-block:: bash\n\n    tld: uk\n    tld type: country-code\n    tld registry: Nominet UK\n    tld create date: 1985-07-24\n    tld punycode: False\n    is tld punycode: None\n    effective tld: co.uk\n    is tld multi part: True\n    registrable domain: stuffandthings.co.uk\n    registrable domain host: stuffandthings\n    fqdn: login.mail.stuffandthings.co.uk\n    pqdn: login.mail\n    is fqdn (vs ip address): True\n    is ip (vs fqdn): False\n    private suffix: None\n\n----------------\nPrivate Suffixes\n----------------\n\nThe \"Public Suffix List\" also has a section of \"Private Suffixes\". These are not considered TLDs, but instead are\ndomain names privately owned by companies that people can purchase or register subdomains under.\nA good example of this are Dynamic DNS providers. ``duckdns.org`` is a Dynamic DNS provider and you can\nregister subdomains under ``duckdns.org``.\n\nPrivate Suffixes can be identified by inspecting the :code:`ParsedResult.private_suffix` property.\n\nFor example, using the above code the FQDN ``api.fake_aws_login.duckdns.org`` will return the following output:\n\n.. code-block:: bash\n\n    tld: org\n    tld type: generic\n    tld registry: Public Interest Registry (PIR)\n    tld create date: 1985-01-01\n    tld punycode: False\n    is tld punycode: None\n    effective tld: org\n    is tld multi part: False\n    registrable domain: duckdns.org\n    registrable domain host: duckdns\n    fqdn: api.fake_aws_login.duckdns.org\n    pqdn: api.fake_aws_login\n    is fqdn (vs ip address): True\n    is ip (vs fqdn): False\n    private suffix: duckdns.org\n\nSome private suffixes have 3 or more labels. For example, using the private suffix ``cdn.prod.atlassian-dev.net``\nthe following is the output for the FQDN ``assets.some_company.cdn.prod.atlassian-dev.net``\n\n.. code-block:: bash\n\n    tld: net\n    tld type: generic\n    tld registry: VeriSign Global Registry Services\n    tld create date: 1985-01-01\n    tld punycode: False\n    is tld punycode: None\n    effective tld: net\n    is tld multi part: False\n    registrable domain: atlassian-dev.net\n    registrable domain host: atlassian-dev\n    fqdn: assets.some_company.cdn.prod.atlassian-dev.net\n    pqdn: assets.some_company.cdn.prod\n    is fqdn (vs ip address): True\n    is ip (vs fqdn): False\n    private suffix: cdn.prod.atlassian-dev.net\n\n--------------------------------------\nDomain Name & FQDN Entropy Calculation\n--------------------------------------\n\nThe entropy of a domain name or FQDN can be contextually useful when trying to assess if the domain or FQDN is malicious or not, i.e. if it was generated by a DGA (Domain Generation Algorithm).\n\nI'm not going to go into the details of how entropy is calculated, but if you're interested in learning more about it, check out RedCanary's great `post on using entropy in threat hunting <https://redcanary.com/blog/threat-hunting-entropy/>`_.\n\nOne important aspect when calculating entropy is that it's done using an appropriate probability distribution. This means for domains and FQDNs you need a probability distribution of characters pulled from a large representative sample of internet traffic.\n\nThe following code example downloads the Cisco Umbrella Top 1 Million FQDNs and calculate the character probability distribution for both domain names and FQDNs to be used in entropy calculations, it then caches it for future uses.\n\n.. code-block:: python\n\n    from entropy.char_probabilities import update_char_probabilities\n    from fqdn_parser.suffixes import Suffixes\n    char_probs_file = \"char_probs.cache\"\n    suffixes = Suffixes()\n    char_probs = update_char_probabilities(suffixes, cache_path=char_probs_file)\n    print(\"Domain Name Character Probability Distribution\")\n    print(char_probs.domain_char_probs)\n    print(\"FQDN Character Probability Distribution\")\n    print(char_probs.fqdn_char_probs)\n\n.. code-block:: bash\n\n    Domain Name Character Probability Distribution\n    {'-': 0.009153964706906638, '0': 0.0016562571439772676, '1': 0.0023782284412904448, '2': 0.0022458500651963502, '3': 0.0016058515315414393, '4': 0.0013960827201923356, '5': 0.001050371499546604, '6': 0.0009709444738901473, '7': 0.0007672854337453864, '8': 0.0009154473854507, '9': 0.0008355112121938813, 'a': 0.08520788751096577, 'b': 0.02146515368365743, 'c': 0.04584874141258929, 'd': 0.03435829836762188, 'e': 0.10087130428849932, 'f': 0.016597702624197647, 'g': 0.02409795592512883, 'h': 0.025066354661017164, 'i': 0.07043395159126445, 'j': 0.0039570951500127035, 'k': 0.015794267710826565, 'l': 0.048940794789587114, 'm': 0.033398555140939694, 'n': 0.061210742810708596, 'o': 0.06914784475275029, 'p': 0.03190777096708004, 'q': 0.0024668201237534157, 'r': 0.06578085167155703, 's': 0.06751399010318894, 't': 0.06583125728399286, 'u': 0.02948931986536101, 'v': 0.01482383238453678, 'w': 0.013819284169022747, 'x': 0.006708528782368422, 'y': 0.017273341489877893, 'z': 0.005012558125562927}\n    FQDN Character Probability Distribution\n    {'-': 0.03935146304604875, '0': 0.01137667745062195, '1': 0.015695464981033407, '2': 0.010750418092344973, '3': 0.008382589095779713, '4': 0.0075158871514849086, '5': 0.006856249546264456, '6': 0.0060167866356360235, '7': 0.005506159061413232, '8': 0.005164806882403787, '9': 0.004782506746876184, 'a': 0.07701803986960072, 'b': 0.02079500546986022, 'c': 0.048182095503032235, 'd': 0.04067491053735759, 'e': 0.08384591790596323, 'f': 0.017997669959947296, 'g': 0.02456907193095662, 'h': 0.01635373169396868, 'i': 0.05605912336564308, 'j': 0.00319274852816832, 'k': 0.012453364330598661, 'l': 0.03980957948534796, 'm': 0.030834407298296743, 'n': 0.05459673892143202, 'o': 0.061688603128709975, 'p': 0.03616217155059957, 'q': 0.002987829933540334, 'r': 0.05214641797170645, 's': 0.06301449438452718, 't': 0.05198459307804299, 'u': 0.026606098658707066, 'v': 0.01602358506929026, 'w': 0.015229659624134714, 'x': 0.008538811212277663, 'y': 0.011672849788232905, 'z': 0.006163472110150122}\n\n\nNote: generating character probabilities will takes a few minutes. If you don't want to wait this repo has a cache file checked into it. Feel free to download the file ``char_probs.cache`` to use for the character probability distribution, but note it will not be up to date.\n\nLoad cached character probability distributions from file:\n\n.. code-block:: python\n\n    from entropy.char_probabilities import load_char_probabilities\n    char_probs_file = \"char_probs.cache\"\n    char_probs = load_char_probabilities(cache_path=char_probs_file)\n\nCalculate entropy of domain names. Note the higher entropy score for the random keyboard-smash domain name):\n\n.. code-block:: python\n\n    from entropy.char_probabilities import load_char_probabilities\n    from entropy.domain_entropy import domain_entropy\n    from fqdn_parser.suffixes import Suffixes\n    char_probs_file = \"char_probs.cache\"\n    char_probs = load_char_probabilities(cache_path=char_probs_file)\n    suffixes = Suffixes()\n    # normal domain name\n    result = suffixes.parse(\"amazon.com\")\n    entropy = domain_entropy(result, char_probs)\n    print(f\"Entropy for {result.registrable_domain_host}: {entropy}\")\n    # random keyboard smash domain name\n    result = suffixes.parse(\"lk3k3l24jlk23.com\")\n    entropy = domain_entropy(result, char_probs)\n    print(f\"Entropy for {result.registrable_domain_host}: {entropy}\")\n\n.. code-block:: bash\n\n    Entropy for amazon: 2.3374190580082232\n    Entropy for lk3k3l24jlk23: 4.775453277222541\n\nCalculate entropy of the full FQDNs:\n\n.. code-block:: python\n\n    from entropy.char_probabilities import load_char_probabilities\n    from entropy.domain_entropy import fqdn_entropy\n    from fqdn_parser.suffixes import Suffixes\n    char_probs_file = \"char_probs.cache\"\n    char_probs = load_char_probabilities(cache_path=char_probs_file)\n    suffixes = Suffixes()\n    # normal FQDN labels\n    result = suffixes.parse(\"stuff.things.amazon.com\")\n    entropy = fqdn_entropy(result, char_probs)\n    print(f\"Entropy for fqdn {result.fqdn}: {entropy}\")\n    # random chars for FQSN labels\n    result = suffixes.parse(\"sdlfkjj.slkfdjs.lk3k3l24jlk23.com\")\n    entropy = fqdn_entropy(result, char_probs)\n    print(f\"Entropy for fqdn {result.fqdn}: {entropy}\")\n\n.. code-block:: bash\n\n    Entropy for fqdn stuff.things.amazon.com: 1.2618222896338356\n    Entropy for fqdn sdlfkjj.slkfdjs.lk3k3l24jlk23.com: 2.9639747128498106\n\nCalculating the entropy of each label in a FQDN separately can be useful when DGAs are used to generate subdomains on non-DGA domain names:\n\n.. code-block:: python\n\n    from entropy.char_probabilities import load_char_probabilities\n    from entropy.domain_entropy import relative_entropy\n    from fqdn_parser.suffixes import Suffixes\n    char_probs_file = \"char_probs.cache\"\n    char_probs = load_char_probabilities(cache_path=char_probs_file)\n    suffixes = Suffixes()\n    # normal domain name with DGA looking subdomain labels\n    result = suffixes.parse(\"h3ksd7.8c3hs.somecooldomain.com\")\n    for label in result.host_labels:\n        entropy = relative_entropy(label, char_probs.fqdn_char_probs)\n        print(f\"Entropy for label {label}: {entropy}\")\n\n.. code-block:: bash\n\n    Entropy for label h3ksd7: 3.293799636685838\n    Entropy for label 8c3hs: 3.4367171238803156\n    Entropy for label somecooldomain: 1.1479845021804367\n\nNote the higher entropy scores for the DGA looking subdomain labels compared to the entropy of the registrable domain name.\n",
    "description_content_type": "text/x-rst; charset=UTF-8",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jconwell/fqdn_parser/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fqdn-parser",
    "package_url": "https://pypi.org/project/fqdn-parser/",
    "platform": "any",
    "project_url": "https://pypi.org/project/fqdn-parser/",
    "project_urls": {
      "Changelog": "https://github.com/jconwell/fqdn_parser/blob/master/CHANGELOG.rst",
      "Documentation": "https://github.com/jconwell/fqdn_parser/",
      "Download": "https://pypi.org/project/fqdn_parser/#files",
      "Homepage": "https://github.com/jconwell/fqdn_parser/",
      "Source": "https://github.com/jconwell/fqdn_parser/tree/master/fqdn_parser"
    },
    "release_url": "https://pypi.org/project/fqdn-parser/2.1.6/",
    "requires_dist": [
      "requests (<3.0,>=2.2)",
      "bs4",
      "unidecode (>=1.3.6)",
      "tranco (>=0.6)",
      "pandas",
      "importlib-metadata ; python_version < \"3.8\"",
      "setuptools ; extra == 'testing'",
      "pytest ; extra == 'testing'",
      "pytest-cov ; extra == 'testing'"
    ],
    "requires_python": "",
    "summary": "Library to download and use the latest set of TLDs and public multi label domain suffixes from IANA and ICANN",
    "version": "2.1.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17325762,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f58e541772f0c4f2bb70e1864dae84e6830b6779dbfb60afa32ac026d993ab63",
          "md5": "b0dd1982c2ca63763b65237463b3d00e",
          "sha256": "4cfe7573061c668bfb1778c2afac9c17309c3815b4844366b2897a41668d9627"
        },
        "downloads": -1,
        "filename": "fqdn_parser-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0dd1982c2ca63763b65237463b3d00e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25253,
        "upload_time": "2023-02-06T19:02:27",
        "upload_time_iso_8601": "2023-02-06T19:02:27.302521Z",
        "url": "https://files.pythonhosted.org/packages/f5/8e/541772f0c4f2bb70e1864dae84e6830b6779dbfb60afa32ac026d993ab63/fqdn_parser-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f5cdbd57b7bf9ea30194d4badafedf048058aef417d1ef7a20a50d3d24e1815",
          "md5": "364ba6c28a1199d387722137db891ae0",
          "sha256": "88bc1744f25f2ef9afaebfc44cf22492a786a924d90e953aa9c08d23721beb5f"
        },
        "downloads": -1,
        "filename": "fqdn_parser-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "364ba6c28a1199d387722137db891ae0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 60841,
        "upload_time": "2023-02-06T19:02:29",
        "upload_time_iso_8601": "2023-02-06T19:02:29.844447Z",
        "url": "https://files.pythonhosted.org/packages/4f/5c/dbd57b7bf9ea30194d4badafedf048058aef417d1ef7a20a50d3d24e1815/fqdn_parser-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cc0629c5d3438ef625773ab9b86166b19325a7a7228451bcdc81be60a5aa4fd",
          "md5": "164dd89321b718b0fe6083b81a8ed157",
          "sha256": "9732e0811f75271eebfc36459c74e5c3073a937e7b3e5e615e406fdd4913445b"
        },
        "downloads": -1,
        "filename": "fqdn_parser-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "164dd89321b718b0fe6083b81a8ed157",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 12821,
        "upload_time": "2023-02-14T22:06:45",
        "upload_time_iso_8601": "2023-02-14T22:06:45.326568Z",
        "url": "https://files.pythonhosted.org/packages/0c/c0/629c5d3438ef625773ab9b86166b19325a7a7228451bcdc81be60a5aa4fd/fqdn_parser-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "410dd70f94242d2f433778b2bf9d1b4c9f952f4ed2fd90feb73a0bd229d7ff2b",
          "md5": "294e17b88eb6b91945f7bed932fcfacd",
          "sha256": "9574c55a2a4a4421a101afcf95fdfe900baa3baf085984aaf3799d65b76affd2"
        },
        "downloads": -1,
        "filename": "fqdn_parser-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "294e17b88eb6b91945f7bed932fcfacd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 67843,
        "upload_time": "2023-02-14T22:06:47",
        "upload_time_iso_8601": "2023-02-14T22:06:47.889857Z",
        "url": "https://files.pythonhosted.org/packages/41/0d/d70f94242d2f433778b2bf9d1b4c9f952f4ed2fd90feb73a0bd229d7ff2b/fqdn_parser-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75f5f0dd74b41172e5d2a5be78b761cdb237e5a1469e2cd56d75da9153fd54c2",
          "md5": "3c225ca0fc601d6c172d6d0ce6980f2c",
          "sha256": "86a1e20e5f84d2d8cd39e95cd50d2a7b624860e654eb5492986ca191afbc498b"
        },
        "downloads": -1,
        "filename": "fqdn_parser-2.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c225ca0fc601d6c172d6d0ce6980f2c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30991,
        "upload_time": "2023-03-16T23:32:52",
        "upload_time_iso_8601": "2023-03-16T23:32:52.595024Z",
        "url": "https://files.pythonhosted.org/packages/75/f5/f0dd74b41172e5d2a5be78b761cdb237e5a1469e2cd56d75da9153fd54c2/fqdn_parser-2.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8693a2c68b6b285f9c5d3768dade9c52aefd0d3a6f75da3721d460de94a96f4",
          "md5": "32317f82f10aa95e7a3b64e5ba21ffdb",
          "sha256": "87a2b8d341a3d4b2cf33c72e29c97957631ad64ea9fd15abc047be97a7d7a610"
        },
        "downloads": -1,
        "filename": "fqdn_parser-2.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "32317f82f10aa95e7a3b64e5ba21ffdb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 76010,
        "upload_time": "2023-03-16T23:32:55",
        "upload_time_iso_8601": "2023-03-16T23:32:55.955379Z",
        "url": "https://files.pythonhosted.org/packages/e8/69/3a2c68b6b285f9c5d3768dade9c52aefd0d3a6f75da3721d460de94a96f4/fqdn_parser-2.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75f5f0dd74b41172e5d2a5be78b761cdb237e5a1469e2cd56d75da9153fd54c2",
        "md5": "3c225ca0fc601d6c172d6d0ce6980f2c",
        "sha256": "86a1e20e5f84d2d8cd39e95cd50d2a7b624860e654eb5492986ca191afbc498b"
      },
      "downloads": -1,
      "filename": "fqdn_parser-2.1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3c225ca0fc601d6c172d6d0ce6980f2c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30991,
      "upload_time": "2023-03-16T23:32:52",
      "upload_time_iso_8601": "2023-03-16T23:32:52.595024Z",
      "url": "https://files.pythonhosted.org/packages/75/f5/f0dd74b41172e5d2a5be78b761cdb237e5a1469e2cd56d75da9153fd54c2/fqdn_parser-2.1.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e8693a2c68b6b285f9c5d3768dade9c52aefd0d3a6f75da3721d460de94a96f4",
        "md5": "32317f82f10aa95e7a3b64e5ba21ffdb",
        "sha256": "87a2b8d341a3d4b2cf33c72e29c97957631ad64ea9fd15abc047be97a7d7a610"
      },
      "downloads": -1,
      "filename": "fqdn_parser-2.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "32317f82f10aa95e7a3b64e5ba21ffdb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 76010,
      "upload_time": "2023-03-16T23:32:55",
      "upload_time_iso_8601": "2023-03-16T23:32:55.955379Z",
      "url": "https://files.pythonhosted.org/packages/e8/69/3a2c68b6b285f9c5d3768dade9c52aefd0d3a6f75da3721d460de94a96f4/fqdn_parser-2.1.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}