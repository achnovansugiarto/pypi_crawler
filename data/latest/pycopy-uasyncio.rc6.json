{
  "info": {
    "author": "Paul Sokolovsky",
    "author_email": "pycopy-dev@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "uasyncio\n========\n\nuasyncio is a minimalist asynchronous scheduling library, roughly\nmodeled after CPython's asyncio. uasyncio is intended to be used with\n`Pycopy <https://github.com/pfalcon/pycopy>`_, a lightweight and\nminimalist Python implementation.\n\nuasyncio doesn't use naive always-iterating scheduling algorithm,\nbut performs a real time-based scheduling, which allows it (and\nthus the whole system) to sleep when there is nothing to do (actual\nimplementation of that depends on I/O scheduling algorithm which\nactually performs the wait operation).\n\nMajor conceptual differences to asyncio:\n\n* Avoids defining a notion of Future, and especially wrapping coroutines\n  in Futures, like CPython asyncio does. uasyncio works directly with\n  coroutines (and callbacks).\n* Methods provided are more consistently coroutines.\n* uasyncio uses wrap-around millisecond timebase (as native to all\n  Pycopy ports.)\n* Instead of single large package, number of subpackages are provided\n  (each installable separately).\n\nSpecific differences:\n\n* For millisecond scheduling, ``loop.call_later_ms()`` and\n  ``uasyncio.sleep_ms()`` are provided.\n* As there's no monotonic time, ``loop.call_at()`` is not provided.\n  Instead, there's ``loop.call_at_()`` which is considered an internal\n  function and has slightly different signature.\n* ``call_*`` funcions don't return Handle and callbacks scheduled by\n  them aren't cancellable. If they need to be cancellable, they should\n  accept an object as an argument, and a \"cancel\" flag should be set\n  in the object, for a callback to test.\n* ``Future`` object is not available.\n* ``ensure_future()`` and ``Task()`` perform just scheduling operations\n  and return a native coroutine, not Future/Task objects.\n* Some other functions are not (yet) implemented.\n* StreamWriter method(s) are coroutines. While in CPython asyncio,\n  StreamWriter.write() is a normal function (which potentially buffers\n  unlimited amount of data), uasyncio offers coroutine StreamWriter.awrite()\n  instead. Also, both StreamReader and StreamWriter have .aclose()\n  coroutine method.\n\nAdvanced topics\n---------------\n\nTerminology:\n\n* Task - a top-level coroutine, scheduled in an event loop using its\n  ``create_task()`` method. (Or, as a uasyncio extension, a couroutine\n  object passed to the \"yield\" statement by another coroutine, this\n  is equivalent to the ``create_task()`` call). Different tasks run\n  concurrently in a cooperative manner. Each task can also call\n  another coroutine recursively (in which case calling coroutine\n  will \"await\" (literally) completion of the called coroutine). More\n  formally, a task is a coroutine call tree routed in the top-level\n  coroutine passed to ``create_task()``, and identified by it.\n\nNotes on resource sharing between the tasks\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nJust as sharing resources between preemptive threads, sharing resources\nbetween uasyncio cooperative tasks has its peculiarities and limitations.\nActually, due to I/O scheduling implementation, there're additional\npeculiarities to consider. But let's start with stating that resource\nsharing between tasks/threads is usually an error. For example, if both\ntasks write to the resource, their output would be interspersed, possibly\nin an unpredictable way. Reading is even more problematic: different tasks\nmay get partial input, or one can get all and other none at all. If tasks\nimplement some protocol, i.e. I/O dialog, that would lead to incorrect\nbehavior and/or deadlock. Thus, the rule is: don't share the same I/O\nobjects, in particular StreamReader and StreamWriter objects, among\ndifferent tasks. (Of course, they can be passed to subcourotines of the\ncurrent task).\n\nAn extreme case of the above is trying to use reader part of the same\nStreamReader/StreamWriter part in one task, while writer - in another.\nThis may be only speculative use, and isn't supported either:\nStreamReader and StreamWriter represent half-duplex parts of the same\nI/O stream, and both must be used within one task. If you need something\nlike the above, you need to create different StreamReader/Writer pairs\n(likely, from different underlying I/O objects).\n\nWhile StreamReader/StreamWriter are given as examples above, it applies\nto other I/O objects too. For example, uasyncio.udp socket just the\nsame should not be passed to 2 different tasks. If you need this, 2\ndifferent sockets should be used.\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pfalcon/pycopy-lib",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycopy-uasyncio",
    "package_url": "https://pypi.org/project/pycopy-uasyncio/",
    "platform": "",
    "project_url": "https://pypi.org/project/pycopy-uasyncio/",
    "project_urls": {
      "Homepage": "https://github.com/pfalcon/pycopy-lib"
    },
    "release_url": "https://pypi.org/project/pycopy-uasyncio/3.7/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Lightweight asyncio-like library for Pycopy, built around native Python coroutines.",
    "version": "3.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7593211,
  "releases": {
    "3.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "73eff5c8a4a9ed2bd20e615d1c638b0547ef1487e4cb0c11533b94dead9191ee",
          "md5": "be9d3ae6ceaa6136dbb21dc1b6bb5173",
          "sha256": "666c77486c8cf5c8f8e173e2df6efb75b0b8897814e40c30598df6da7c97e8d0"
        },
        "downloads": -1,
        "filename": "pycopy-uasyncio-3.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "be9d3ae6ceaa6136dbb21dc1b6bb5173",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5027,
        "upload_time": "2019-08-11T07:38:43",
        "upload_time_iso_8601": "2019-08-11T07:38:43.951271Z",
        "url": "https://files.pythonhosted.org/packages/73/ef/f5c8a4a9ed2bd20e615d1c638b0547ef1487e4cb0c11533b94dead9191ee/pycopy-uasyncio-3.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a51d3c436a463adc7752d6009bbcba9527ad95e35433349240f0e02ed28e5f8",
          "md5": "f79c1d876c5d2d3132aff6d9ba27590d",
          "sha256": "b61c4c025df825ee3d9ffc3f1d6973dcff0e451d52fea9ab76fe7f0c5b1c8924"
        },
        "downloads": -1,
        "filename": "pycopy-uasyncio-3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f79c1d876c5d2d3132aff6d9ba27590d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5055,
        "upload_time": "2019-10-06T13:04:14",
        "upload_time_iso_8601": "2019-10-06T13:04:14.698023Z",
        "url": "https://files.pythonhosted.org/packages/2a/51/d3c436a463adc7752d6009bbcba9527ad95e35433349240f0e02ed28e5f8/pycopy-uasyncio-3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2993e745b303a1d8f9c56cf92d66fda849c7e20f4ddabff708f42a6f62ef0084",
          "md5": "2a9efb195a55af34462605ea2e6a0537",
          "sha256": "06d4d2b365eb6601716c093dca18efbdc616e8be24e92e9c49eba505be8b692e"
        },
        "downloads": -1,
        "filename": "pycopy-uasyncio-3.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2a9efb195a55af34462605ea2e6a0537",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7737,
        "upload_time": "2019-12-25T12:32:05",
        "upload_time_iso_8601": "2019-12-25T12:32:05.992559Z",
        "url": "https://files.pythonhosted.org/packages/29/93/e745b303a1d8f9c56cf92d66fda849c7e20f4ddabff708f42a6f62ef0084/pycopy-uasyncio-3.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c1ee0953531408f1d237456bcb324b14c1b84218ad7ee5702a3022e7cde7a71",
          "md5": "7a82eceaa7c5b96a291f68595c4cf2a2",
          "sha256": "fdaa7245207097c2a3de59f90b774fc5bfd23fef9c6520b7a3ebf6ff426225ba"
        },
        "downloads": -1,
        "filename": "pycopy-uasyncio-3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7a82eceaa7c5b96a291f68595c4cf2a2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4916,
        "upload_time": "2019-12-26T13:16:09",
        "upload_time_iso_8601": "2019-12-26T13:16:09.776879Z",
        "url": "https://files.pythonhosted.org/packages/3c/1e/e0953531408f1d237456bcb324b14c1b84218ad7ee5702a3022e7cde7a71/pycopy-uasyncio-3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f983e92363d7d19e6733c4aaa0dcd388f684ae46b024d5bff92a192efcede702",
          "md5": "e52031163395f0efdd29267fbd8b918a",
          "sha256": "ba60f9775fd541f4419b2501378757efebdc0f18e44f6c0518bd2ca636ecfeef"
        },
        "downloads": -1,
        "filename": "pycopy-uasyncio-3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e52031163395f0efdd29267fbd8b918a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4936,
        "upload_time": "2020-03-24T22:32:17",
        "upload_time_iso_8601": "2020-03-24T22:32:17.438190Z",
        "url": "https://files.pythonhosted.org/packages/f9/83/e92363d7d19e6733c4aaa0dcd388f684ae46b024d5bff92a192efcede702/pycopy-uasyncio-3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e55880b8b403c52ea88d44844570dbe487d7a4b3045ae0ecad0c9f4dbac0d104",
          "md5": "a44bb0bb583c839a1325a9a697277775",
          "sha256": "97fb8abdcf7ec7fc9ee7a67150e78a5827973b0e3b6f3ff321f7b658f4b6210f"
        },
        "downloads": -1,
        "filename": "pycopy-uasyncio-3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "a44bb0bb583c839a1325a9a697277775",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4966,
        "upload_time": "2020-06-30T05:19:15",
        "upload_time_iso_8601": "2020-06-30T05:19:15.032990Z",
        "url": "https://files.pythonhosted.org/packages/e5/58/80b8b403c52ea88d44844570dbe487d7a4b3045ae0ecad0c9f4dbac0d104/pycopy-uasyncio-3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e55880b8b403c52ea88d44844570dbe487d7a4b3045ae0ecad0c9f4dbac0d104",
        "md5": "a44bb0bb583c839a1325a9a697277775",
        "sha256": "97fb8abdcf7ec7fc9ee7a67150e78a5827973b0e3b6f3ff321f7b658f4b6210f"
      },
      "downloads": -1,
      "filename": "pycopy-uasyncio-3.7.tar.gz",
      "has_sig": false,
      "md5_digest": "a44bb0bb583c839a1325a9a697277775",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4966,
      "upload_time": "2020-06-30T05:19:15",
      "upload_time_iso_8601": "2020-06-30T05:19:15.032990Z",
      "url": "https://files.pythonhosted.org/packages/e5/58/80b8b403c52ea88d44844570dbe487d7a4b3045ae0ecad0c9f4dbac0d104/pycopy-uasyncio-3.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}