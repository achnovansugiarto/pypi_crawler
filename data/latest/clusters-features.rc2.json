{
  "info": {
    "author": "Simon Bertrand",
    "author_email": "simonbertrand.contact@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Clusters-Features : a Python module to evaluate the quality of clustering #\n\n<div align=\"center\">\n<img src=\"https://user-images.githubusercontent.com/84455908/128029707-0bf27b40-0570-4f13-8b04-cfaa6c2b560e.png\" height=\"121\" width=\"400\" style=\"display: block; margin-left:auto; margin-right: auto; width: 50%;\" /><br />\n <i> This package is made for unsupervised learning. All criterias are used with internal validation and make no use of ground-truth labels.  </i>\n\n # Official documentation : <a href=\"https://simonbertrand.pages.unistra.fr/Clusters-Features/\" alt=\"Official documentation\">simonbertrand.pages.unistra.fr/Clusters-Features </a> #\n</div>\n\n# Table of contents\n\n1. [Introduction](#introduction) <br />\n2. [Command Line Interface](#CLI)<br />\n3. [Data](#Data)<br />\n4. [Score](#Score) <br />\n5. [Confusion Hypersphere](#CH) <br />\n6. [Info](#Info) <br />\n7. [Density](#Info) <br />\n8. [Utils](#Utils) <br />\n9. [Graphs](#Graph) <br />\n\n\n\n## Introduction <a name=\"introduction\"></a>\nClusters-Features is a package that computes many operations using only the dataset and the target vector. \n<br /><br /><b> Data </b><br />\nThe package provides all the usefull data such as pairwise distances  or distances between every elements and the centroid of given cluster. You can also check for the maximum/minimum distances between two elements of different clusters or even each intercentroid distances. But you can also get different radius for each centroids and analyse them to firstly understand the shape of the clusters. The distribution of all radius for each cluster is also available. All informative data is contained inside the subclass Data.\n<br /><br /><b> Score </b><br />\nApproximatively 40 different internal indices have been implemented in Python :<i><b> Ball-Hall Index, Dunn Index, Generalized Dunn Indexes (18 indexes), C Index, Banfeld-Raftery Index, Davies-Bouldin Index, Calinski-Harabasz Index, Ray-Turi Index, Xie-Beni Index, Ratkowsky Lance Index, SD Index, Mclain Rao Index, Scott-Symons Index, PBM Index, Point biserial Index, Det Ratio Index, Log SumSquare Ratio Index, Wemmert-Gançarski Index.</b></i> We use two systems to generate these index, the first is caching each computed index and the other directly compute them.\nAll these score are defined in the main reference, check for the [Score](#Score) section to find the reference. \n<br /><br /><b> Confusion Hypersphere </b><br />\nClusters-Features also provides a deep analysis of the multidimensionnal space. Confusion Hypersphere consists of counting the number of element contained in several hyperspheres centered on different positions and with different radius. This feature allows users to understand which clusters are confused (in the sense of the Euclidean norm) with other clusters. These indicators make it possible to determine which clusters are the most separated from the others and this is clearly adapted to convex clusters since the hypersphere is convex.\n<br /><br /><b> Info </b><br />\nInfo gives two kind of boards such as clusters board which gives you information for each clusters. The general board gives informations at a general scale of the dataset .\n<br /><br /><b> Density </b><br />\nThis section uses a meshgrid to estimate a density by summing n-dim (for n=2 or n=3) Gaussian distrubution centred on each dataset points. We put the minimum contour as a given percentile of the current density. If percentile is 99% then only 1% of the highest density values will be retained. We can make it for 2D grid or 3D grid but it is quickly limited due to the large number of combinations needed to generate an n-dim grid.\n<br /><br /><b> Utils </b><br />\nImplement external packages and utils to the current dataset.\n<br /><br /><b> Graph (Falcutative) </b><br />\nGraph allows users to plot few kind of data generated by Clusters-Features. As Plotly is used to plot, this section is facultative in the case where user only need to get the different data and matrix to plot with their own module. In order to disable this section, you will have to go to settings.py and put to False the variable \"Activated_Graph\" and then re-build the package using setuptools. All requirements.txt are going to be generated in consequences of these settings.\n\n## Dependencies ##\nNative dependencies : \n- [Numpy](https://pypi.org/project/numpy/)\n- [Pandas](https://pypi.org/project/pandas/) \n- [Scikit-learn](https://pypi.org/project/scikit-learn/) \n- [Scipy](https://pypi.org/project/scipy/)\n\nFalcultative dependencies (may cause errors if the user forces the use of the method of these falcultative dependencies without having installed the correct libraries) :\n- Graph : [Plotly](https://pypi.org/project/plotly/)\n- Utils : [umap-learn](https://pypi.org/project/umap-learn/), [Numba](https://pypi.org/project/numba/), [statsmodels](https://pypi.org/project/statsmodels/)\n\nGraph is dependent of Utils to correctly work but the reciprocal is not true.\n\n\n## Command Line Interface <a name=\"CLI\"></a>\nThis package provides a command line interface that is available by running this command\n```bash\npython3 ./clustersfeatures-cli.py -h\n```\nThe documentation for the CLI is contained inside the script. Just use --help arguments to understand what it does.\n\n\n\n## Import the module ## \n```python\nfrom ClustersFeatures import *\n```\n\n## Load a random data set ##\nWe choose here the scikit-learn digits data set because it is in high dimension (64) and has a large number of observations.\n\n```python\nfrom sklearn.datasets import load_digits\nimport pandas as pd\ndigits = load_digits()\npd_df=pd.DataFrame(digits.data)\npd_df['target'] = digits.target\npd_df\n```\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>...</th>\n      <th>55</th>\n      <th>56</th>\n      <th>57</th>\n      <th>58</th>\n      <th>59</th>\n      <th>60</th>\n      <th>61</th>\n      <th>62</th>\n      <th>63</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>13.0</td>\n      <td>9.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>13.0</td>\n      <td>10.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>12.0</td>\n      <td>13.0</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>11.0</td>\n      <td>16.0</td>\n      <td>10.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>15.0</td>\n      <td>12.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>11.0</td>\n      <td>16.0</td>\n      <td>9.0</td>\n      <td>0.0</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>7.0</td>\n      <td>15.0</td>\n      <td>13.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>7.0</td>\n      <td>13.0</td>\n      <td>13.0</td>\n      <td>9.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>11.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>16.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1792</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>10.0</td>\n      <td>13.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>14.0</td>\n      <td>15.0</td>\n      <td>9.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>1793</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>16.0</td>\n      <td>13.0</td>\n      <td>11.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>16.0</td>\n      <td>14.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1794</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>11.0</td>\n      <td>15.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>9.0</td>\n      <td>13.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>1795</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>10.0</td>\n      <td>7.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>12.0</td>\n      <td>16.0</td>\n      <td>12.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>1796</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>10.0</td>\n      <td>14.0</td>\n      <td>8.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>8.0</td>\n      <td>12.0</td>\n      <td>14.0</td>\n      <td>12.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n<p>1797 rows × 65 columns</p>\n</div>\n\nThe important thing is that the given \"pd_df\" dataframe in the following argument has to be concatenated with the target vector.\nThen, just specify as second argument which column name has the target. The program is making automatically the separation :\n```python\nCC=ClustersCharacteristics(pd_df,label_target=\"target\")\n```\n\n## Data tools <a name=\"Data\"></a>\n\nThe ClustersCharacteristics object creates attributes that define clusters. We can find for example the barycenter.\n\n\n```python\nCC.data_barycenter\n```\n\n    0      0.000000\n    1      0.303840\n    2      5.204786\n    3     11.835838\n    4     11.848080\n              ...    \n    59    12.089037\n    60    11.809126\n    61     6.764051\n    62     2.067891\n    63     0.364496\n    Length: 64, dtype: float64\n\n\nBut also centroids, where the column j of the following matrix correspond to the coordinates of centroid of cluster j.\n```python\nCC.data_centroids\n```\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>target</th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.022472</td>\n      <td>0.010989</td>\n      <td>0.932203</td>\n      <td>0.644809</td>\n      <td>0.000000</td>\n      <td>0.967033</td>\n      <td>0.000000</td>\n      <td>0.167598</td>\n      <td>0.143678</td>\n      <td>0.144444</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.185393</td>\n      <td>2.456044</td>\n      <td>9.666667</td>\n      <td>8.387978</td>\n      <td>0.453039</td>\n      <td>9.983516</td>\n      <td>1.138122</td>\n      <td>5.100559</td>\n      <td>5.022989</td>\n      <td>5.683333</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>13.095506</td>\n      <td>9.208791</td>\n      <td>14.186441</td>\n      <td>14.169399</td>\n      <td>7.055249</td>\n      <td>13.038462</td>\n      <td>11.165746</td>\n      <td>13.061453</td>\n      <td>11.603448</td>\n      <td>11.833333</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11.297753</td>\n      <td>10.406593</td>\n      <td>9.627119</td>\n      <td>14.224044</td>\n      <td>11.497238</td>\n      <td>13.895604</td>\n      <td>9.585635</td>\n      <td>14.245810</td>\n      <td>12.402299</td>\n      <td>11.255556</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>59</th>\n      <td>13.561798</td>\n      <td>9.137363</td>\n      <td>13.966102</td>\n      <td>14.650273</td>\n      <td>7.812155</td>\n      <td>14.736264</td>\n      <td>10.685083</td>\n      <td>11.659218</td>\n      <td>12.695402</td>\n      <td>12.044444</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>13.325843</td>\n      <td>13.027473</td>\n      <td>13.118644</td>\n      <td>13.972678</td>\n      <td>11.812155</td>\n      <td>9.362637</td>\n      <td>15.093923</td>\n      <td>2.206704</td>\n      <td>13.011494</td>\n      <td>13.144444</td>\n    </tr>\n    <tr>\n      <th>61</th>\n      <td>5.438202</td>\n      <td>8.576923</td>\n      <td>11.796610</td>\n      <td>8.672131</td>\n      <td>1.955801</td>\n      <td>2.532967</td>\n      <td>13.044199</td>\n      <td>0.011173</td>\n      <td>6.735632</td>\n      <td>8.894444</td>\n    </tr>\n    <tr>\n      <th>62</th>\n      <td>0.275281</td>\n      <td>3.049451</td>\n      <td>8.022599</td>\n      <td>1.409836</td>\n      <td>0.000000</td>\n      <td>0.197802</td>\n      <td>4.480663</td>\n      <td>0.000000</td>\n      <td>1.206897</td>\n      <td>2.094444</td>\n    </tr>\n    <tr>\n      <th>63</th>\n      <td>0.000000</td>\n      <td>1.494505</td>\n      <td>1.932203</td>\n      <td>0.065574</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.093923</td>\n      <td>0.000000</td>\n      <td>0.011494</td>\n      <td>0.055556</td>\n    </tr>\n  </tbody>\n</table>\n<p>64 rows × 10 columns</p>\n</div>\n\n\nWe can show the list of clusters labels :\n\n```python\nCC.labels_clusters\n```\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nAnd look for the data with the same label target. For example we take here the first cluster label of the above list.\n\n```python\nCluster=CC.labels_clusters[0]\nCC.data_clusters[Cluster]\n```\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>...</th>\n      <th>54</th>\n      <th>55</th>\n      <th>56</th>\n      <th>57</th>\n      <th>58</th>\n      <th>59</th>\n      <th>60</th>\n      <th>61</th>\n      <th>62</th>\n      <th>63</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>13.0</td>\n      <td>9.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>13.0</td>\n      <td>10.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>9.0</td>\n      <td>15.0</td>\n      <td>11.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>10.0</td>\n      <td>13.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>3.0</td>\n      <td>13.0</td>\n      <td>11.0</td>\n      <td>7.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>12.0</td>\n      <td>13.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>10.0</td>\n      <td>14.0</td>\n      <td>11.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>11.0</td>\n      <td>16.0</td>\n      <td>12.0</td>\n      <td>3.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>36</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>14.0</td>\n      <td>10.0</td>\n      <td>2.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>7.0</td>\n      <td>16.0</td>\n      <td>11.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1739</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>10.0</td>\n      <td>11.0</td>\n      <td>7.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>7.0</td>\n      <td>12.0</td>\n      <td>8.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1745</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>7.0</td>\n      <td>14.0</td>\n      <td>8.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>13.0</td>\n      <td>7.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1746</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>9.0</td>\n      <td>15.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>2.0</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>8.0</td>\n      <td>15.0</td>\n      <td>11.0</td>\n      <td>4.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1768</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>5.0</td>\n      <td>16.0</td>\n      <td>10.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>5.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>4.0</td>\n      <td>15.0</td>\n      <td>16.0</td>\n      <td>8.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1793</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>16.0</td>\n      <td>13.0</td>\n      <td>11.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>6.0</td>\n      <td>16.0</td>\n      <td>14.0</td>\n      <td>6.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>178 rows × 64 columns</p>\n</div>\n\n\nUsers are able to get a pairwise distance matrix generated by the Scipy library (fast). \nIf (xi,j)i,j is the returned matrix, then xi,j is the distance between element of index i and element of index j. The matrix is symetric as we use Euclidian norm to evaluate distances.\n```python\nCC.data_every_element_distance_to_every_element\n```\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>...</th>\n      <th>1787</th>\n      <th>1788</th>\n      <th>1789</th>\n      <th>1790</th>\n      <th>1791</th>\n      <th>1792</th>\n      <th>1793</th>\n      <th>1794</th>\n      <th>1795</th>\n      <th>1796</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.000000</td>\n      <td>59.556696</td>\n      <td>54.129474</td>\n      <td>47.571000</td>\n      <td>50.338852</td>\n      <td>43.908997</td>\n      <td>48.559242</td>\n      <td>56.000000</td>\n      <td>44.395946</td>\n      <td>40.804412</td>\n      <td>...</td>\n      <td>39.874804</td>\n      <td>49.749372</td>\n      <td>52.640289</td>\n      <td>51.458721</td>\n      <td>49.989999</td>\n      <td>36.249138</td>\n      <td>26.627054</td>\n      <td>50.378567</td>\n      <td>37.067506</td>\n      <td>47.031904</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>59.556696</td>\n      <td>0.000000</td>\n      <td>41.629317</td>\n      <td>45.475268</td>\n      <td>47.906158</td>\n      <td>47.127487</td>\n      <td>40.286474</td>\n      <td>50.960769</td>\n      <td>48.620983</td>\n      <td>52.820451</td>\n      <td>...</td>\n      <td>52.009614</td>\n      <td>48.969378</td>\n      <td>42.965102</td>\n      <td>32.572995</td>\n      <td>47.707442</td>\n      <td>51.390661</td>\n      <td>59.177699</td>\n      <td>38.587563</td>\n      <td>48.569538</td>\n      <td>50.328918</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>54.129474</td>\n      <td>41.629317</td>\n      <td>0.000000</td>\n      <td>53.953684</td>\n      <td>52.096065</td>\n      <td>55.443665</td>\n      <td>45.650849</td>\n      <td>49.335586</td>\n      <td>42.602817</td>\n      <td>54.836119</td>\n      <td>...</td>\n      <td>59.076222</td>\n      <td>47.927028</td>\n      <td>46.335731</td>\n      <td>39.191836</td>\n      <td>46.936127</td>\n      <td>51.826634</td>\n      <td>52.009614</td>\n      <td>38.340579</td>\n      <td>50.774009</td>\n      <td>43.954522</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>47.571000</td>\n      <td>45.475268</td>\n      <td>53.953684</td>\n      <td>0.000000</td>\n      <td>51.215232</td>\n      <td>33.660065</td>\n      <td>47.254629</td>\n      <td>56.824291</td>\n      <td>42.449971</td>\n      <td>45.166359</td>\n      <td>...</td>\n      <td>37.934153</td>\n      <td>55.569776</td>\n      <td>50.099900</td>\n      <td>43.988635</td>\n      <td>58.566202</td>\n      <td>40.286474</td>\n      <td>55.551778</td>\n      <td>49.527770</td>\n      <td>44.147480</td>\n      <td>41.267421</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>50.338852</td>\n      <td>47.906158</td>\n      <td>52.096065</td>\n      <td>51.215232</td>\n      <td>0.000000</td>\n      <td>54.147945</td>\n      <td>36.959437</td>\n      <td>59.481089</td>\n      <td>52.507142</td>\n      <td>55.054518</td>\n      <td>...</td>\n      <td>48.620983</td>\n      <td>26.172505</td>\n      <td>55.794265</td>\n      <td>48.723711</td>\n      <td>31.416556</td>\n      <td>53.981478</td>\n      <td>51.449004</td>\n      <td>46.882833</td>\n      <td>52.668776</td>\n      <td>50.970580</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1792</th>\n      <td>36.249138</td>\n      <td>51.390661</td>\n      <td>51.826634</td>\n      <td>40.286474</td>\n      <td>53.981478</td>\n      <td>29.325757</td>\n      <td>52.191953</td>\n      <td>55.605755</td>\n      <td>40.037482</td>\n      <td>36.262929</td>\n      <td>...</td>\n      <td>31.749016</td>\n      <td>54.543561</td>\n      <td>55.758407</td>\n      <td>48.083261</td>\n      <td>55.488738</td>\n      <td>0.000000</td>\n      <td>41.940434</td>\n      <td>46.151923</td>\n      <td>23.537205</td>\n      <td>40.963398</td>\n    </tr>\n    <tr>\n      <th>1793</th>\n      <td>26.627054</td>\n      <td>59.177699</td>\n      <td>52.009614</td>\n      <td>55.551778</td>\n      <td>51.449004</td>\n      <td>49.325450</td>\n      <td>45.354162</td>\n      <td>60.456596</td>\n      <td>48.041649</td>\n      <td>47.265209</td>\n      <td>...</td>\n      <td>43.416587</td>\n      <td>45.912961</td>\n      <td>53.272882</td>\n      <td>52.449976</td>\n      <td>46.324939</td>\n      <td>41.940434</td>\n      <td>0.000000</td>\n      <td>46.957428</td>\n      <td>42.438190</td>\n      <td>46.465041</td>\n    </tr>\n    <tr>\n      <th>1794</th>\n      <td>50.378567</td>\n      <td>38.587563</td>\n      <td>38.340579</td>\n      <td>49.527770</td>\n      <td>46.882833</td>\n      <td>46.904158</td>\n      <td>33.466401</td>\n      <td>54.516053</td>\n      <td>34.885527</td>\n      <td>49.929951</td>\n      <td>...</td>\n      <td>45.077711</td>\n      <td>46.421978</td>\n      <td>33.896903</td>\n      <td>29.189039</td>\n      <td>42.602817</td>\n      <td>46.151923</td>\n      <td>46.957428</td>\n      <td>0.000000</td>\n      <td>44.158804</td>\n      <td>28.879058</td>\n    </tr>\n    <tr>\n      <th>1795</th>\n      <td>37.067506</td>\n      <td>48.569538</td>\n      <td>50.774009</td>\n      <td>44.147480</td>\n      <td>52.668776</td>\n      <td>32.557641</td>\n      <td>48.207883</td>\n      <td>55.928526</td>\n      <td>37.000000</td>\n      <td>28.827071</td>\n      <td>...</td>\n      <td>38.183766</td>\n      <td>50.507425</td>\n      <td>54.359912</td>\n      <td>47.265209</td>\n      <td>48.754487</td>\n      <td>23.537205</td>\n      <td>42.438190</td>\n      <td>44.158804</td>\n      <td>0.000000</td>\n      <td>39.420807</td>\n    </tr>\n    <tr>\n      <th>1796</th>\n      <td>47.031904</td>\n      <td>50.328918</td>\n      <td>43.954522</td>\n      <td>41.267421</td>\n      <td>50.970580</td>\n      <td>38.496753</td>\n      <td>40.224371</td>\n      <td>56.267220</td>\n      <td>28.337255</td>\n      <td>40.926764</td>\n      <td>...</td>\n      <td>38.288379</td>\n      <td>50.941143</td>\n      <td>38.820098</td>\n      <td>38.600518</td>\n      <td>49.223978</td>\n      <td>40.963398</td>\n      <td>46.465041</td>\n      <td>28.879058</td>\n      <td>39.420807</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>1797 rows × 1797 columns</p>\n</div>\n\nWhile centroids are not elements of the dataset, we can also compute the distance between each element to each centroid.\n```python\nCC.data_every_element_distance_to_centroids\n```\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>14.013361</td>\n      <td>47.567376</td>\n      <td>43.896678</td>\n      <td>39.554151</td>\n      <td>40.407399</td>\n      <td>36.647929</td>\n      <td>41.599287</td>\n      <td>43.074401</td>\n      <td>37.369109</td>\n      <td>32.423583</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>54.059820</td>\n      <td>19.017525</td>\n      <td>38.701490</td>\n      <td>42.313696</td>\n      <td>38.269485</td>\n      <td>42.273369</td>\n      <td>44.388144</td>\n      <td>40.861554</td>\n      <td>33.800663</td>\n      <td>44.312148</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>47.757029</td>\n      <td>32.206345</td>\n      <td>37.375370</td>\n      <td>45.438311</td>\n      <td>43.187064</td>\n      <td>50.233787</td>\n      <td>43.272912</td>\n      <td>41.584089</td>\n      <td>33.846710</td>\n      <td>45.754658</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>44.250476</td>\n      <td>36.468356</td>\n      <td>33.283540</td>\n      <td>22.386098</td>\n      <td>48.069136</td>\n      <td>36.198086</td>\n      <td>41.894212</td>\n      <td>45.404349</td>\n      <td>36.063988</td>\n      <td>31.605201</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>45.592148</td>\n      <td>39.322928</td>\n      <td>52.408033</td>\n      <td>51.138040</td>\n      <td>28.340976</td>\n      <td>48.653228</td>\n      <td>39.984571</td>\n      <td>48.264247</td>\n      <td>44.208386</td>\n      <td>48.142841</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1792</th>\n      <td>34.293071</td>\n      <td>41.151239</td>\n      <td>43.677849</td>\n      <td>30.575459</td>\n      <td>45.769008</td>\n      <td>36.516206</td>\n      <td>46.428263</td>\n      <td>42.576472</td>\n      <td>33.327387</td>\n      <td>16.959423</td>\n    </tr>\n    <tr>\n      <th>1793</th>\n      <td>20.429465</td>\n      <td>48.646926</td>\n      <td>47.491512</td>\n      <td>45.995613</td>\n      <td>40.876460</td>\n      <td>40.516369</td>\n      <td>41.939685</td>\n      <td>46.740119</td>\n      <td>40.285358</td>\n      <td>40.804954</td>\n    </tr>\n    <tr>\n      <th>1794</th>\n      <td>44.631741</td>\n      <td>29.885611</td>\n      <td>38.886808</td>\n      <td>43.396579</td>\n      <td>36.316532</td>\n      <td>42.594489</td>\n      <td>37.825320</td>\n      <td>42.725794</td>\n      <td>25.598846</td>\n      <td>42.437926</td>\n    </tr>\n    <tr>\n      <th>1795</th>\n      <td>34.565247</td>\n      <td>39.389382</td>\n      <td>43.806621</td>\n      <td>35.557630</td>\n      <td>41.311856</td>\n      <td>38.202818</td>\n      <td>41.673728</td>\n      <td>42.664164</td>\n      <td>32.926630</td>\n      <td>25.207579</td>\n    </tr>\n    <tr>\n      <th>1796</th>\n      <td>41.031409</td>\n      <td>37.724803</td>\n      <td>37.444086</td>\n      <td>36.772758</td>\n      <td>42.390657</td>\n      <td>40.799218</td>\n      <td>33.921312</td>\n      <td>45.775584</td>\n      <td>28.071988</td>\n      <td>35.917805</td>\n    </tr>\n  </tbody>\n</table>\n<p>1797 rows × 10 columns</p>\n</div>\n\nIt is possible to generate a matrix of intercentroid distance.\nIf (xi,j)i,j is the returned matrix, then xi,j is the distance between centroid of cluster i to centroid of cluster j.\nThese distances are not related to points of the dataset. We put NaN into the diagonal terms in order to facilitate the manipulation of min/max.\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>nan</td>\n      <td>42.026024</td>\n      <td>39.274919</td>\n      <td>37.062579</td>\n      <td>35.981220</td>\n      <td>34.078029</td>\n      <td>34.274506</td>\n      <td>41.772576</td>\n      <td>32.909593</td>\n      <td>29.617374</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>42.026024</td>\n      <td>nan</td>\n      <td>28.949723</td>\n      <td>31.742287</td>\n      <td>28.674700</td>\n      <td>32.469295</td>\n      <td>34.570287</td>\n      <td>31.187817</td>\n      <td>20.950348</td>\n      <td>32.126942</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>39.274919</td>\n      <td>28.949723</td>\n      <td>nan</td>\n      <td>26.489600</td>\n      <td>42.689686</td>\n      <td>32.375712</td>\n      <td>36.657425</td>\n      <td>35.570382</td>\n      <td>25.605848</td>\n      <td>32.960968</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>37.062579</td>\n      <td>31.742287</td>\n      <td>26.489600</td>\n      <td>nan</td>\n      <td>43.499594</td>\n      <td>29.822474</td>\n      <td>41.152654</td>\n      <td>33.369483</td>\n      <td>25.511462</td>\n      <td>21.103269</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>35.981220</td>\n      <td>28.674700</td>\n      <td>42.689686</td>\n      <td>43.499594</td>\n      <td>nan</td>\n      <td>35.577158</td>\n      <td>30.756650</td>\n      <td>33.444921</td>\n      <td>31.858925</td>\n      <td>38.689544</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>34.078029</td>\n      <td>32.469295</td>\n      <td>32.375712</td>\n      <td>29.822474</td>\n      <td>35.577158</td>\n      <td>nan</td>\n      <td>35.573804</td>\n      <td>32.098017</td>\n      <td>25.867262</td>\n      <td>28.060732</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>34.274506</td>\n      <td>34.570287</td>\n      <td>36.657425</td>\n      <td>41.152654</td>\n      <td>30.756650</td>\n      <td>35.573804</td>\n      <td>nan</td>\n      <td>43.514148</td>\n      <td>31.227114</td>\n      <td>39.306699</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>41.772576</td>\n      <td>31.187817</td>\n      <td>35.570382</td>\n      <td>33.369483</td>\n      <td>33.444921</td>\n      <td>32.098017</td>\n      <td>43.514148</td>\n      <td>nan</td>\n      <td>27.364089</td>\n      <td>33.513179</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>32.909593</td>\n      <td>20.950348</td>\n      <td>25.605848</td>\n      <td>25.511462</td>\n      <td>31.858925</td>\n      <td>25.867262</td>\n      <td>31.227114</td>\n      <td>27.364089</td>\n      <td>nan</td>\n      <td>24.630553</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>29.617374</td>\n      <td>32.126942</td>\n      <td>32.960968</td>\n      <td>21.103269</td>\n      <td>38.689544</td>\n      <td>28.060732</td>\n      <td>39.306699</td>\n      <td>33.513179</td>\n      <td>24.630553</td>\n      <td>nan</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n## Scores <a name=\"Score\"></a>\nThere are many indices that allow users to evaluate the quality of clusters, such as internal cluster validation indices. In Python development, some libraries compute such scores, but it is not completely done. In this library, these scores have been implemented :\n- Total dispersion matrix\n- Within cluster dispersion matrixes\n- Between group dispersion matrix\n- Total sum square\n- Pooled within cluster dispersion\n\nThe implemented indexes are :\n- Ball-Hall Index\n- Dunn Index\n- Generalized Dunn Indexes (18 indexes)\n- C Index\n- Banfeld-Raftery Index\n- Davies-Bouldin Index\n- Calinski-Harabasz Index\n- Ray-Turi Index\n- Xie-Beni Index\n- Ratkowsky Lance Index\n- SD Index\n- Mclain Rao Index\n- Scott-Symons Index\n- PBM Index\n- Point biserial Index\n- Det Ratio Index\n- Log SumSquare Ratio Index\n- Silhouette Index (computed with scikit-learn)\n- Wemmert-Gançarski Index (Thanks to M.Gançarski for this intership)\n\nMain reference for all these scores :\n\nClustering Indices\n\nBernard Desgraupes, University Paris Ouest - Lab Modal’X , November 2017 \n\nhttps://cran.r-project.org/web/packages/clusterCrit/vignettes/clusterCrit.pdf \n\n\n#### In this library, there are two types of methods to calculate these scores: Using IndexCore which automatically caches the already calculated indexes or calculating directly using the \"score_index_\" methods. The second method can make the calculation of the same index repetitive, which can be very slow because we know that some of these indexes have a very high computational complexity. ####\n\n\n### First method using IndexCore (faster) ###\n\n\n```python\nCC.compute_every_index()\n```\n    {'general': {'max': {'Between-group total dispersion': 908297.1736053203,\n    'Mean quadratic error': 696.0267765360618,\n    'Silhouette Index': 0.16294320522575195,\n    'Dunn Index': 0.25897601382124175,\n    'Generalized Dunn Indexes': {'GDI (1, 1)': 0.25897601382124175,\n    'GDI (1, 2)': 0.9076143747196692,\n    'GDI (1, 3)': 0.3158503201955148,\n    'GDI (2, 1)': 0.25897601382124175,\n    'GDI (2, 2)': 0.9076143747196692,\n    'GDI (2, 3)': 0.3158503201955148,\n    'GDI (3, 1)': 0.5790691834873279,\n    'GDI (3, 2)': 2.0294215944379173,\n    'GDI (3, 3)': 0.7062398726473335,\n    'GDI (4, 1)': 0.2875582147985151,\n    'GDI (4, 2)': 1.0077843328765126,\n    'GDI (4, 3)': 0.35070952278095474,\n    'GDI (5, 1)': 0.28515682596025516,\n    'GDI (5, 2)': 0.9993683603053982,\n    'GDI (5, 3)': 0.34778075952490317,\n    'GDI (6, 1)': 0.6033066382644287,\n    'GDI (6, 2)': 2.1143648370097905,\n    'GDI (6, 3)': 0.735800169522378},\n    'Wemmert-Gancarski Index': 0.2502241827215019,\n    'Calinski-Harabasz Index': 144.1902786959258,\n    'Ratkowsky-Lance Index': nan,\n    'Point Biserial Index': -4.064966952313242,\n    'PBM Index': 34.22417733472788},\n    'max diff': {'Trace WiB Index': nan, 'Trace W Index': 1250760.117435303},\n    'min': {'Banfeld-Raftery Index': 11718.207536490032,\n    'Ball Hall Index': 695.801129352618,\n    'C Index': 0.1476415026698158,\n    'Ray-Turi Index': 1.5857819700225737,\n    'Xie-Beni Index': 1.9551313947642188,\n    'Davies Bouldin Index': 2.1517097380390937,\n    'SD Index': [array([0.627482, 0.070384])],\n    'Mclain-Rao Index': 0.7267985756237975,\n    'Scott-Symons Index': nan},\n    'min diff': {'Det Ratio Index': nan,\n    'Log BGSS/WGSS Index': -0.3199351306684197,\n    'S_Dbw Index': nan,\n    'Nlog Det Ratio Index': nan}},\n    'clusters': {'max': {'Centroid distance to barycenter': [26.422334274375757,\n    20.184062405495773,\n    22.958470492954795,\n    21.71559561353746,\n    25.717240507145213,\n    20.283308612864644,\n    26.419951469008378,\n    24.426658073844308,\n    13.44306158441342,\n    19.876908956223936],\n    'Between-group Dispersion': [124268.87523421964,\n    74146.1402843885,\n    93295.17202553005,\n    86296.77799167577,\n    119709.13913372548,\n    74877.09470781704,\n    126340.5042480812,\n    106802.4308135141,\n    31444.567428645732,\n    71116.47173772276],\n    'Average Silhouette': [0.3608993843537291,\n    0.05227459502398472,\n    0.14407593888502124,\n    0.15076708301431302,\n    0.16517001390130848,\n    0.1194825125348905,\n    0.28763816949713245,\n    0.19373598833558672,\n    0.08488231267929798,\n    0.07117051617968871],\n    'KernelDensity mean': [-87.26207798353086,\n    -102.79627948741418,\n    -118.2807433740146,\n    -102.80193279131969,\n    -102.79094365877583,\n    -102.79645332546204,\n    -87.27879146450985,\n    -102.77983243274437,\n    -118.2636521439672,\n    -118.29755528330563],\n    'Ball Hall Index': [396.35042923873254,\n    940.6359437266029,\n    751.2059752944557,\n    633.6276389262146,\n    736.2863160465186,\n    757.3853701243812,\n    512.8915478770488,\n    734.7467931712492,\n    741.1588717135685,\n    753.7224074074073]},\n    'min': {'Within-Cluster Dispersion': [70550.3764044944,\n    171195.74175824173,\n    132963.45762711865,\n    115953.85792349727,\n    133267.82320441987,\n    137844.13736263738,\n    92833.37016574583,\n    131519.67597765362,\n    128961.64367816092,\n    135670.03333333333],\n    'Largest element distance': [54.543560573178574,\n    72.85602240034794,\n    67.0,\n    62.3377895020348,\n    71.69379331573968,\n    66.53570470055908,\n    61.155539405682624,\n    67.93379129711516,\n    61.171888968708494,\n    63.773035054010094],\n    'Inter-element mean distance': [27.495251790928528,\n    41.577045912127325,\n    37.66525398978789,\n    34.81272464303223,\n    37.28558306007683,\n    38.08288651715454,\n    31.222158502521683,\n    37.241230341156786,\n    37.938810358062234,\n    37.830620986872184],\n    'Davies Bouldin Index': array([1.55628353, 2.70948787, 2.09498538, 2.43120015, 1.96455875,\n          2.09074874, 1.58102612, 1.94811882, 2.70948787, 2.43120015]),\n    'C Index': [0.15780619270180213,\n    0.4626045226116365,\n    0.37889533673771314,\n    0.31459485530776515,\n    0.3693066184157008,\n    0.38636193134197444,\n    0.23717385124578905,\n    0.36902306811086555,\n    0.3857833597084178,\n    0.3815092165505222]}},\n    'radius': {'min': {'Radius min': {0: 11.963104233270684,\n    1: 16.495963249417844,\n    2: 17.228366828448973,\n    3: 15.096075210359995,\n    4: 15.943646753449636,\n    5: 16.46455777853301,\n    6: 12.786523861254974,\n    7: 14.61523732739271,\n    8: 18.374826032773953,\n    9: 16.317673899226},\n    'Radius mean': {0: 19.364954,\n    1: 29.868519,\n    2: 26.747682,\n    3: 24.578193,\n    4: 26.464614,\n    5: 27.18575,\n    6: 22.162453,\n    7: 26.412302,\n    8: 26.896195,\n    9: 26.728077},\n    'Radius median': {0: 19.090152,\n    1: 27.705495,\n    2: 25.299287,\n    3: 23.495162,\n    4: 26.434238,\n    5: 27.194139,\n    6: 21.579562,\n    7: 25.358031,\n    8: 26.982504,\n    9: 25.201186},\n    'Radius 75th Percentile': {0: 22.142983,\n    1: 35.627396,\n    2: 30.263862,\n    3: 27.808539,\n    4: 29.727508,\n    5: 29.221274,\n    6: 24.736136,\n    7: 30.21675,\n    8: 30.137334,\n    9: 29.966933},\n    'Radius max': {0: 35.381597,\n    1: 48.76808,\n    2: 48.6619,\n    3: 40.02036,\n    4: 51.535976,\n    5: 40.584931,\n    6: 42.250871,\n    7: 44.424333,\n    8: 38.175815,\n    9: 45.985382}}}}\n\nWe can take the corresponding code in the indices.json file with this call\n```python\nCC._get_all_index\n```\n`\n{'general': {'max': {'Between-group total dispersion': 'G-Max-01',\n       'Mean quadratic error': 'G-Max-02',\n       'Silhouette Index': 'G-Max-03',\n       'Dunn Index': 'G-Max-04',\n       'Generalized Dunn Indexes': 'G-Max-GDI',\n       'Wemmert-Gancarski Index': 'G-Max-05',\n       'Calinski-Harabasz Index': 'G-Max-06',\n       'Ratkowsky-Lance Index': 'G-Max-07',\n       'Point Biserial Index': 'G-Max-08',\n       'PBM Index': 'G-Max-09'},\n      'max diff': {'Trace WiB Index': 'G-MaxD-01', 'Trace W Index': 'G-MaxD-02'},\n      'min': {'Banfeld-Raftery Index': 'G-Min-01',\n       'Ball Hall Index': 'G-Min-02',\n       'C Index': 'G-Min-03',\n       'Ray-Turi Index': 'G-Min-04',\n       'Xie-Beni Index': 'G-Min-05',\n       'Davies Bouldin Index': 'G-Min-06',\n       'SD Index': 'G-Min-07',\n       'Mclain-Rao Index': 'G-Min-08',\n       'Scott-Symons Index': 'G-Min-09'},\n      'min diff': {'Det Ratio Index': 'G-MinD-01',\n       'Log BGSS/WGSS Index': 'G-MinD-02',\n       'S_Dbw Index': 'G-MinD-03',\n       'Nlog Det Ratio Index': 'G-MinD-04'}},\n     'clusters': {'max': {'Centroid distance to barycenter': 'C-Max-01',\n       'Between-group Dispersion': 'C-Max-02',\n       'Average Silhouette': 'C-Max-03',\n       'KernelDensity mean': 'C-Max-04',\n       'Ball Hall Index': 'C-Max-05'},\n      'min': {'Within-Cluster Dispersion': 'C-Min-01',\n       'Largest element distance': 'C-Min-02',\n       'Inter-element mean distance': 'C-Min-03',\n       'Davies Bouldin Index': 'C-Min-04',\n       'C Index': 'C-Min-05'}},\n     'radius': {'min': {'Radius min': 'R-Min-01',\n       'Radius mean': 'R-Min-02',\n       'Radius median': 'R-Min-03',\n       'Radius 75th Percentile': 'R-Min-04',\n       'Radius max': 'R-Min-05'}}}\n`\n\nThese codes are usefull when you want to generate a single index using IndexCore : \n\n```python\nCC.generate_output_by_info_type(\"general\", \"max\", \"G-Max-01\")\n908297.1736053203\n```\n\n### Second method using \"score_index_\" methods ###\n\n```python\nCC.score_between_group_dispersion()\n908297.1736053203\n```\nMake the same result as above but it computes a second time the same score.\n\n\n### Speed test of different scores\n\n```\npd_df :  \nshape - (1797, 65) \n total elements=116805 \n\nColumns types:\npd_df.dtypes.value_counts() : 64 x float64 + 1 x Int32\n\nscore_index_ball_hall \n\n5.06 ms ± 79.9 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\nscore_index_banfeld_Raftery\n\n5.02 ms ± 39.2 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\nscore_index_c\n\n104 ms ± 550 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nscore_index_c_for_each_cluster\n\n95.5 ms ± 720 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nscore_index_calinski_harabasz \n\n16.5 ms ± 257 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\nscore_index_davies_bouldin \n\n12.3 ms ± 76.5 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\nscore_index_davies_bouldin_for_each_cluster \n\n12.3 ms ± 300 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\nscore_index_det_ratio \n\n181 ms ± 4.09 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n\nscore_index_dunn\n\n19.6 ms ± 1.06 ms per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\nscore_index_generalized_dunn_matrix\n\n994 ms ± 41.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n\nscore_index_Log_Det_ratio\n\n180 ms ± 2.86 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nscore_index_log_ss_ratio \n\n16.3 ms ± 249 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\nscore_index_mclain_rao \n\n63.5 ms ± 6.55 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nscore_index_PBM \n\n23.5 ms ± 3.84 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nscore_index_point_biserial\n\n50.3 ms ± 434 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nscore_index_ratkowsky_lance \n\n12.3 ms ± 254 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\nscore_index_ray_turi \n\n23.2 ms ± 889 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nscore_index_scott_symons\n\n153 ms ± 6.25 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nscore_index_SD \n\n211 ms ± 4.37 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n\nscore_index_trace_WiB \n\n138 ms ± 2.69 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nscore_index_wemmert_gancarski \n\n8.13 ms ± 93 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\nscore_index_xie_beni\n\n85.8 ms ± 1.31 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```\n\n## Confusion Hypersphere <a name=\"CH\"></a>\nThe confusion hypersphere subclass counts the number of element contained inside a n-dim sphere (hypersphere) of given radius and centered on each cluster centroid.\nThe given radius is the same for each hypersphere.\n\nArgs : \"counting_type=\" : ('including' or 'excluding') - If including, then the elements belonging cluster i and contained inside the hypersphere of centroid i are counted (for i=j). If excluding, then they're not counted.\n\"proportion=\" : (bool) Return the proportion of element. Default option = False.\n\n\n\n#### self.confusion_hypersphere_matrix\n```python\nCC.confusion_hypersphere_matrix(radius=35, counting_type=\"including\", proportion=True)\n```\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>C:0</th>\n      <th>C:1</th>\n      <th>C:2</th>\n      <th>C:3</th>\n      <th>C:4</th>\n      <th>C:5</th>\n      <th>C:6</th>\n      <th>C:7</th>\n      <th>C:8</th>\n      <th>C:9</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>H:0</th>\n      <td>0.994382</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.010929</td>\n      <td>0.000000</td>\n      <td>0.032967</td>\n      <td>0.060773</td>\n      <td>0.000000</td>\n      <td>0.005747</td>\n      <td>0.211111</td>\n    </tr>\n    <tr>\n      <th>H:1</th>\n      <td>0.000000</td>\n      <td>0.736264</td>\n      <td>0.090395</td>\n      <td>0.103825</td>\n      <td>0.187845</td>\n      <td>0.016484</td>\n      <td>0.110497</td>\n      <td>0.055866</td>\n      <td>0.574713</td>\n      <td>0.022222</td>\n    </tr>\n    <tr>\n      <th>H:2</th>\n      <td>0.000000</td>\n      <td>0.142857</td>\n      <td>0.881356</td>\n      <td>0.355191</td>\n      <td>0.000000</td>\n      <td>0.005495</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.310345</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>H:3</th>\n      <td>0.000000</td>\n      <td>0.005495</td>\n      <td>0.225989</td>\n      <td>0.950820</td>\n      <td>0.000000</td>\n      <td>0.258242</td>\n      <td>0.000000</td>\n      <td>0.016760</td>\n      <td>0.327586</td>\n      <td>0.666667</td>\n    </tr>\n    <tr>\n      <th>H:4</th>\n      <td>0.050562</td>\n      <td>0.032967</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.928177</td>\n      <td>0.027473</td>\n      <td>0.154696</td>\n      <td>0.027933</td>\n      <td>0.028736</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>H:5</th>\n      <td>0.095506</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.103825</td>\n      <td>0.005525</td>\n      <td>0.950549</td>\n      <td>0.022099</td>\n      <td>0.005587</td>\n      <td>0.293103</td>\n      <td>0.133333</td>\n    </tr>\n    <tr>\n      <th>H:6</th>\n      <td>0.089888</td>\n      <td>0.027473</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.033149</td>\n      <td>0.021978</td>\n      <td>0.983425</td>\n      <td>0.000000</td>\n      <td>0.068966</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>H:7</th>\n      <td>0.000000</td>\n      <td>0.071429</td>\n      <td>0.028249</td>\n      <td>0.071038</td>\n      <td>0.060773</td>\n      <td>0.005495</td>\n      <td>0.000000</td>\n      <td>0.882682</td>\n      <td>0.201149</td>\n      <td>0.055556</td>\n    </tr>\n    <tr>\n      <th>H:8</th>\n      <td>0.044944</td>\n      <td>0.423077</td>\n      <td>0.293785</td>\n      <td>0.431694</td>\n      <td>0.011050</td>\n      <td>0.170330</td>\n      <td>0.110497</td>\n      <td>0.184358</td>\n      <td>0.977011</td>\n      <td>0.394444</td>\n    </tr>\n    <tr>\n      <th>H:9</th>\n      <td>0.421348</td>\n      <td>0.000000</td>\n      <td>0.005650</td>\n      <td>0.759563</td>\n      <td>0.000000</td>\n      <td>0.351648</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.356322</td>\n      <td>0.872222</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\nTo interpret this, if (xi,j)i,j is the returned matrix, then xi,j is the number of elements belonging cluster j that are contained inside the hypersphere with given radius centered on centroid of cluster i . If proportion is on True, then the number of elements becomes the proportion of elements belonging cluster j.\n\n\n\n\n\n#### self.confusion_hypersphere_for_linspace_radius_each_element\nThis method returns the results of the above method for a linear radius space. \"n_pts=\" allows users to set the radius range.\n```python\nCC.confusion_hypersphere_for_linspace_radius_each_element(radius=35, counting_type=\"excluding\", n_pts=10)\n```\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n    </tr>\n    <tr>\n      <th>Radius</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0.0000</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7.1578</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14.3155</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>21.4733</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>28.6311</th>\n      <td>3</td>\n      <td>10</td>\n      <td>3</td>\n      <td>36</td>\n      <td>1</td>\n      <td>24</td>\n      <td>1</td>\n      <td>0</td>\n      <td>34</td>\n      <td>30</td>\n    </tr>\n    <tr>\n      <th>35.7889</th>\n      <td>192</td>\n      <td>171</td>\n      <td>161</td>\n      <td>398</td>\n      <td>71</td>\n      <td>211</td>\n      <td>122</td>\n      <td>68</td>\n      <td>473</td>\n      <td>325</td>\n    </tr>\n    <tr>\n      <th>42.9466</th>\n      <td>1004</td>\n      <td>747</td>\n      <td>802</td>\n      <td>1023</td>\n      <td>641</td>\n      <td>940</td>\n      <td>837</td>\n      <td>765</td>\n      <td>1285</td>\n      <td>950</td>\n    </tr>\n    <tr>\n      <th>50.1044</th>\n      <td>1567</td>\n      <td>1346</td>\n      <td>1397</td>\n      <td>1470</td>\n      <td>1318</td>\n      <td>1536</td>\n      <td>1534</td>\n      <td>1369</td>\n      <td>1558</td>\n      <td>1479</td>\n    </tr>\n    <tr>\n      <th>57.2622</th>\n      <td>1602</td>\n      <td>1625</td>\n      <td>1589</td>\n      <td>1636</td>\n      <td>1624</td>\n      <td>1638</td>\n      <td>1629</td>\n      <td>1603</td>\n      <td>1566</td>\n      <td>1614</td>\n    </tr>\n    <tr>\n      <th>64.4200</th>\n      <td>1602</td>\n      <td>1638</td>\n      <td>1593</td>\n      <td>1647</td>\n      <td>1629</td>\n      <td>1638</td>\n      <td>1629</td>\n      <td>1611</td>\n      <td>1566</td>\n      <td>1620</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n#### confusion_hyperphere_around_specific_point_for_two_clusters \nThis method returns the number of elements belonging given Cluster1 or given Cluster2 that are contained inside the hypersphere of given radius and centered on given Point.\n\n```python\nPoint= CC.data_features.iloc[0] #Choose an  observation  of the dataset\nCluster1= CC.labels_clusters[0] #Choose the cluster 1\nCluster2=CC.labels_clusters[1] #Choose the cluster 2\nradius=110 #Large radius to capture the total of both clusters, the result should be the sum of data_clusters[Cluster1] and data_clusters[Cluster2] cardinals\n\nCC.confusion_hyperphere_around_specific_point_for_two_clusters(Point,Cluster1,Cluster2, radius)\n```\n    0    360 \n    dtype: int64\n\n360 elements belonging Cluster or Cluster2 are contained inside this hypersphere.\n\n## Info <a name=\"Info\"></a>\nThe Info subclass shows two different informative boards that gives many kinds of informations about the general dataset and the clusters.\nThe type column can be : \"max\", \"min\", \"max diff\", \"min diff\". If 'max' (respect. 'min'), then higher (respect. lower) is the score, the better is the clustering.\nFor \"max diff\" and \"min diff\", it is usefull to use them when you need to find the best number of clusters. Max diff will correspond to the maximum difference between clustering 1 with K clusters and clustering 2 with K' clusters (K!=K'). See the Bernard Desgraupes reference for more explanations.\n\n```python\nCC.general_info(hide_nan=False)\n```\n\n    Current NaN Index :\n\n    Ratkowsky-Lance Index    -          G-Max-07\n    Trace WiB Index          -          G-MaxD-01\n    Scott-Symons Index       -          G-Min-09\n    Det Ratio Index          -          G-MinD-01\n    S_Dbw Index              -          G-MinD-03\n    Nlog Det Ratio Index     -          G-MinD-04\n\n\n<div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>General Informations</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Between-group total dispersion</th>\n      <th>max</th>\n      <td>908297.173605</td>\n    </tr>\n    <tr>\n      <th>Mean quadratic error</th>\n      <th>max</th>\n      <td>696.026777</td>\n    </tr>\n    <tr>\n      <th>Silhouette Index</th>\n      <th>max</th>\n      <td>0.162943</td>\n    </tr>\n    <tr>\n      <th>Dunn Index</th>\n      <th>max</th>\n      <td>0.258976</td>\n    </tr>\n    <tr>\n      <th>Wemmert-Gancarski Index</th>\n      <th>max</th>\n      <td>0.250224</td>\n    </tr>\n    <tr>\n      <th>Calinski-Harabasz Index</th>\n      <th>max</th>\n      <td>144.190279</td>\n    </tr>\n    <tr>\n      <th>Point Biserial Index</th>\n      <th>max</th>\n      <td>-4.064967</td>\n    </tr>\n    <tr>\n      <th>PBM Index</th>\n      <th>max</th>\n      <td>34.224177</td>\n    </tr>\n    <tr>\n      <th>Trace W Index</th>\n      <th>max diff</th>\n      <td>1250760.117435</td>\n    </tr>\n    <tr>\n      <th>Banfeld-Raftery Index</th>\n      <th>min</th>\n      <td>11718.207536</td>\n    </tr>\n    <tr>\n      <th>Ball Hall Index</th>\n      <th>min</th>\n      <td>695.801129</td>\n    </tr>\n    <tr>\n      <th>C Index</th>\n      <th>min</th>\n      <td>0.147642</td>\n    </tr>\n    <tr>\n      <th>Ray-Turi Index</th>\n      <th>min</th>\n      <td>1.585782</td>\n    </tr>\n    <tr>\n      <th>Xie-Beni Index</th>\n      <th>min</th>\n      <td>1.955131</td>\n    </tr>\n    <tr>\n      <th>Davies Bouldin Index</th>\n      <th>min</th>\n      <td>2.15171</td>\n    </tr>\n    <tr>\n      <th>SD Index</th>\n      <th>min</th>\n      <td>[[0.627482, 0.070384]]</td>\n    </tr>\n    <tr>\n      <th>Mclain-Rao Index</th>\n      <th>min</th>\n      <td>0.726799</td>\n    </tr>\n    <tr>\n      <th>Log BGSS/WGSS Index</th>\n      <th>min diff</th>\n      <td>-0.319935</td>\n    </tr>\n    <tr>\n      <th>GDI (1, 1)</th>\n      <th>max</th>\n      <td>0.258976</td>\n    </tr>\n    <tr>\n      <th>GDI (1, 2)</th>\n      <th>max</th>\n      <td>0.907614</td>\n    </tr>\n    <tr>\n      <th>GDI (1, 3)</th>\n      <th>max</th>\n      <td>0.31585</td>\n    </tr>\n    <tr>\n      <th>GDI (2, 1)</th>\n      <th>max</th>\n      <td>0.258976</td>\n    </tr>\n    <tr>\n      <th>GDI (2, 2)</th>\n      <th>max</th>\n      <td>0.907614</td>\n    </tr>\n    <tr>\n      <th>GDI (2, 3)</th>\n      <th>max</th>\n      <td>0.31585</td>\n    </tr>\n    <tr>\n      <th>GDI (3, 1)</th>\n      <th>max</th>\n      <td>0.579069</td>\n    </tr>\n    <tr>\n      <th>GDI (3, 2)</th>\n      <th>max</th>\n      <td>2.029422</td>\n    </tr>\n    <tr>\n      <th>GDI (3, 3)</th>\n      <th>max</th>\n      <td>0.70624</td>\n    </tr>\n    <tr>\n      <th>GDI (4, 1)</th>\n      <th>max</th>\n      <td>0.287558</td>\n    </tr>\n    <tr>\n      <th>GDI (4, 2)</th>\n      <th>max</th>\n      <td>1.007784</td>\n    </tr>\n    <tr>\n      <th>GDI (4, 3)</th>\n      <th>max</th>\n      <td>0.35071</td>\n    </tr>\n    <tr>\n      <th>GDI (5, 1)</th>\n      <th>max</th>\n      <td>0.285157</td>\n    </tr>\n    <tr>\n      <th>GDI (5, 2)</th>\n      <th>max</th>\n      <td>0.999368</td>\n    </tr>\n    <tr>\n      <th>GDI (5, 3)</th>\n      <th>max</th>\n      <td>0.347781</td>\n    </tr>\n    <tr>\n      <th>GDI (6, 1)</th>\n      <th>max</th>\n      <td>0.603307</td>\n    </tr>\n    <tr>\n      <th>GDI (6, 2)</th>\n      <th>max</th>\n      <td>2.114365</td>\n    </tr>\n    <tr>\n      <th>GDI (6, 3)</th>\n      <th>max</th>\n      <td>0.7358</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n```python\nCC.clusters_info\n```\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n    </tr>\n    <tr>\n      <th>index</th>\n      <th>Type</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Centroid distance to barycenter</th>\n      <th>max</th>\n      <td>26.42</td>\n      <td>20.18</td>\n      <td>22.95</td>\n      <td>21.71</td>\n      <td>25.71</td>\n      <td>20.28</td>\n      <td>26.41</td>\n      <td>24.42</td>\n      <td>13.44</td>\n      <td>19.87</td>\n    </tr>\n    <tr>\n      <th>Between-group Dispersion</th>\n      <th>max</th>\n      <td>124268</td>\n      <td>74146</td>\n      <td>93295</td>\n      <td>86296</td>\n      <td>119709</td>\n      <td>74877</td>\n      <td>126340</td>\n      <td>106802</td>\n      <td>31444</td>\n      <td>71116</td>\n    </tr>\n    <tr>\n      <th>Average Silhouette</th>\n      <th>max</th>\n      <td>0.36</td>\n      <td>0.05</td>\n      <td>0.14</td>\n      <td>0.15</td>\n      <td>0.16</td>\n      <td>0.11</td>\n      <td>0.28</td>\n      <td>0.19</td>\n      <td>0.08</td>\n      <td>0.07</td>\n    </tr>\n    <tr>\n      <th>KernelDensity mean</th>\n      <th>max</th>\n      <td>-87.26</td>\n      <td>-102.79</td>\n      <td>-118.28</td>\n      <td>-102.80</td>\n      <td>-102.79</td>\n      <td>-102.79</td>\n      <td>-87.27</td>\n      <td>-102.77</td>\n      <td>-118.26</td>\n      <td>-118.29</td>\n    </tr>\n    <tr>\n      <th>Ball Hall Index</th>\n      <th>max</th>\n      <td>396.35</td>\n      <td>940.63</td>\n      <td>751.20</td>\n      <td>633.62</td>\n      <td>736.28</td>\n      <td>757.38</td>\n      <td>512.89</td>\n      <td>734.74</td>\n      <td>741.15</td>\n      <td>753.72</td>\n    </tr>\n    <tr>\n      <th>Within-Cluster Dispersion</th>\n      <th>min</th>\n      <td>70550</td>\n      <td>171195</td>\n      <td>132963</td>\n      <td>115953</td>\n      <td>133267</td>\n      <td>137844</td>\n      <td>92833</td>\n      <td>131519</td>\n      <td>128961</td>\n      <td>135670</td>\n    </tr>\n    <tr>\n      <th>Largest element distance</th>\n      <th>min</th>\n      <td>54.54</td>\n      <td>72.85</td>\n      <td>67.00</td>\n      <td>62.33</td>\n      <td>71.69</td>\n      <td>66.53</td>\n      <td>61.15</td>\n      <td>67.93</td>\n      <td>61.17</td>\n      <td>63.77</td>\n    </tr>\n    <tr>\n      <th>Inter-element mean distance</th>\n      <th>min</th>\n      <td>27.49</td>\n      <td>41.57</td>\n      <td>37.66</td>\n      <td>34.81</td>\n      <td>37.28</td>\n      <td>38.08</td>\n      <td>31.22</td>\n      <td>37.24</td>\n      <td>37.93</td>\n      <td>37.83</td>\n    </tr>\n    <tr>\n      <th>Davies Bouldin Index</th>\n      <th>min</th>\n      <td>1.55</td>\n      <td>2.70</td>\n      <td>2.09</td>\n      <td>2.43</td>\n      <td>1.96</td>\n      <td>2.09</td>\n      <td>1.58</td>\n      <td>1.94</td>\n      <td>2.70</td>\n      <td>2.43</td>\n    </tr>\n    <tr>\n      <th>C Index</th>\n      <th>min</th>\n      <td>0.15</td>\n      <td>0.46</td>\n      <td>0.37</td>\n      <td>0.31</td>\n      <td>0.36</td>\n      <td>0.38</td>\n      <td>0.23</td>\n      <td>0.36</td>\n      <td>0.38</td>\n      <td>0.38</td>\n    </tr>\n    <tr>\n      <th>Radius min</th>\n      <th>min</th>\n      <td>11.96</td>\n      <td>16.49</td>\n      <td>17.22</td>\n      <td>15.09</td>\n      <td>15.94</td>\n      <td>16.46</td>\n      <td>12.78</td>\n      <td>14.61</td>\n      <td>18.37</td>\n      <td>16.31</td>\n    </tr>\n    <tr>\n      <th>Radius mean</th>\n      <th>min</th>\n      <td>19.36</td>\n      <td>29.86</td>\n      <td>26.74</td>\n      <td>24.57</td>\n      <td>26.46</td>\n      <td>27.18</td>\n      <td>22.16</td>\n      <td>26.41</td>\n      <td>26.89</td>\n      <td>26.72</td>\n    </tr>\n    <tr>\n      <th>Radius median</th>\n      <th>min</th>\n      <td>19.09</td>\n      <td>27.70</td>\n      <td>25.29</td>\n      <td>23.49</td>\n      <td>26.43</td>\n      <td>27.19</td>\n      <td>21.57</td>\n      <td>25.35</td>\n      <td>26.98</td>\n      <td>25.20</td>\n    </tr>\n    <tr>\n      <th>Radius 75th Percentile</th>\n      <th>min</th>\n      <td>22.14</td>\n      <td>35.62</td>\n      <td>30.26</td>\n      <td>27.80</td>\n      <td>29.72</td>\n      <td>29.22</td>\n      <td>24.73</td>\n      <td>30.21</td>\n      <td>30.13</td>\n      <td>29.96</td>\n    </tr>\n    <tr>\n      <th>Radius max</th>\n      <th>min</th>\n      <td>35.38</td>\n      <td>48.76</td>\n      <td>48.66</td>\n      <td>40.02</td>\n      <td>51.53</td>\n      <td>40.58</td>\n      <td>42.25</td>\n      <td>44.42</td>\n      <td>38.17</td>\n      <td>45.98</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n## Density  <a name=\"Density\"></a>\nThe Density subclass is based on projection 2D or 3D using dimensionnality reductors such as PCA or UMAP. As UMAP is only possible in 2D, we will only use PCA for 3D Density graphs. The main idea for approximating density is about summing Gaussian Distribution n-dim laws centered on each dataset point on a meshgrid corresponding to 2D or 3D.\nThis section returns a lot of data that are packed in a native Python dict. Each element returned (excluding the main return) inside the dict has to be activated by its own argument. See the following example:\n\n#### self.density_projection_2D\nArgs: \n- reduction_method : \"PCA\" or \"UMAP\"\n- percentile : percentile of density that corresponds to the minimum value to show\n- return_data :If True, return 2D PCA Data\n- return_clusters_density : If True, return the 2D Grid with the Z values for each cluster\n- \n```python\nCC.density_projection_2D(\"PCA\", 95, return_data=True, return_clusters_density=True)\n```\n\n\n    {'Z-Grid':             -27.494448  -27.205068  -26.915688  -26.626307  -26.336927  \\\n     -31.169904    0.000000    0.000000    0.000000    0.000000    0.000000   \n     -30.853975    0.000000    0.000000    0.000000    0.000000    0.000000   \n     -30.538045    0.000000    0.000000    0.000000    0.000000    0.000000   \n     -30.222115    0.000000    0.000000    0.000000    0.000000    0.000000   \n     -29.906185    0.000000    0.000000    0.000000    0.000000    0.000000   \n     ...                ...         ...         ...         ...         ...         \n     30.436407     0.000000    0.000000    0.000000    0.000000    0.000000  \n     30.752337     0.000000    0.000000    0.000000    0.000000    0.000000  \n     31.068267     0.000000    0.000000    0.000000    0.000000    0.000000  \n     31.384197     0.000000    0.000000    0.000000    0.000000    0.000000  \n     31.700126     0.000000    0.000000    0.000000    0.000000    0.000000  \n\n     [200 rows x 200 columns],\n     'Clusters Density': {0: array([[0.00000000e+000, 0.00000000e+000, 0.00000000e+000, ...,\n              2.26543202e-251, 6.72200949e-253, 1.80509292e-254],\n             [0.00000000e+000, 0.00000000e+000, 0.00000000e+000, ...,\n              2.39644309e-090, 2.99562311e-092, 3.38890645e-094]]),\n      1: array([[1.22473352e-190, 9.95843640e-187, 7.32812819e-183, ...,\n              1.89152820e-043, 5.31903131e-045, 1.35364451e-046],\n             [6.13307159e-189, 4.98686467e-185, 3.66969092e-181, ...,\n             [2.18683154e-176, 3.42747973e-173, 4.86168499e-170, ...,\n              6.11416273e-291, 1.45371826e-293, 3.12806562e-296]]),\n      2: array([[9.82858841e-081, 1.91715088e-079, 4.01121949e-078, ...,\n              3.95263976e-164, 6.05314934e-167, 8.38934205e-170],\n             [1.15888672e-078, 2.15624607e-077, 3.99557766e-076, ...,\n              0.00000000e+000, 0.00000000e+000, 0.00000000e+000],\n             [2.14277916e-156, 6.99479702e-154, 2.07015420e-151, ...,\n              0.00000000e+000, 0.00000000e+000, 0.00000000e+000]]),\n                                  ...\n              1.34702113e-296, 1.14119413e-299, 8.74977734e-303]]),\n      8: array([[3.68438507e-120, 1.91948293e-117, 9.05015769e-115, ...,\n              1.78634585e-151, 1.09968510e-153, 6.12666390e-156],\n             [1.19395354e-118, 6.22023065e-116, 2.93277042e-113, ...,        \n             [2.30028280e-221, 1.12585950e-218, 4.98917831e-216, ...,\n              3.82113467e-265, 9.90939747e-269, 2.32570436e-272]]),\n      9: array([[5.32990773e-136, 8.38778107e-133, 1.19461196e-129, ...,\n              3.98260675e-172, 2.88650900e-175, 1.89334938e-178],\n             [5.65560268e-135, 8.90033385e-132, 1.26761124e-128, ...,\n             [3.33187669e-070, 4.02748126e-069, 4.64453319e-068, ...,\n              1.02174508e-253, 1.38205190e-256, 1.69183696e-259]])},\n     '2D PCA Data':            PCA0       PCA1\n     0     -1.259467  21.274883\n     1      7.957610 -20.768700\n     ...            ...\n     1795  -4.872099  12.423954\n     1796  -0.344388   6.365550\n\n     [1797 rows x 2 columns]}\n\n#### self.density_projection_3D\nUse PCA 3D to project the dataset and make a 3D meshgrid to estimate the density on it with the 3D Gaussian distribution.\nArgs: \n- percentile : percentile of density that corresponds to the minimum value to show\n- return_grid :If True, return 3D Grid\n- return_clusters_density : If True, return the 3D Grid with the A values for each cluster\n\n```python\nCC.density_projection_3D(99, return_grid=True, return_clusters_density=True)\n```\n    {'A-Grid': array([[[3.48581797e-15, 1.62080230e-14, 6.90041904e-14, ...,\n              5.83374041e-13, 1.92066889e-13, 5.70629214e-14],\n             [6.60425258e-16, 6.17767595e-15, 5.01029852e-14, ...,\n              3.52400611e-12, 5.50927146e-13, 7.45284376e-14]]]),\n     'Clusters Density': {0: array([[[3.40385502e-48, 3.36307101e-47, 2.87017113e-46, ...,\n               6.07579853e-65, 1.97018960e-66, 5.51854095e-68],\n              [6.12214966e-32, 7.73521170e-31, 8.44230524e-30, ...,\n               6.56667612e-49, 8.52648274e-51, 9.59653245e-53]],\n             [[1.30566741e-19, 7.34944932e-19, 3.57377188e-18, ...,\n               3.11782459e-28, 1.14260012e-29, 3.68476733e-31],\n              [6.32366666e-22, 6.00865462e-21, 4.93929478e-20, ...,\n               4.28020934e-27, 2.75837798e-28, 1.53709049e-29]]]),\n      1: array([[[8.98310922e-30, 6.71213878e-29, 5.03213279e-28, ...,\n               2.87124806e-29, 8.73589680e-30, 2.29930435e-30]\n              [5.02339294e-21, 2.49290742e-20, 1.30264666e-19, ...,\n               2.55638337e-14, 4.29622018e-15, 6.43949192e-16]],\n              [2.83167266e-35, 8.65300585e-35, 2.28427319e-34, ...,\n               8.11025209e-33, 1.61201265e-33, 2.82711740e-34]]]),\n      2: array([[[1.36203887e-28, 9.67318866e-28, 5.96928017e-27, ...,\n               1.54322295e-14, 5.09928476e-15, 1.48590282e-15],\n                                  ...\n      8: array([[[6.84981203e-33, 1.26631274e-31, 2.37110234e-30, ...,\n               9.64415278e-27, 5.73382414e-28, 3.22330467e-29],\n              [1.74336209e-34, 9.68068937e-34, 4.64782487e-33, ...,\n               1.05223775e-37, 1.79602795e-38, 2.64802829e-39]]]),\n      9: array([[[3.60638003e-23, 1.23523984e-22, 5.16583215e-22, ...,\n               5.75818352e-33, 1.73152931e-34, 4.49760341e-36],\n               2.86151947e-52, 3.19445757e-53, 3.40743714e-54]]])},\n     '3D Grid': {'X': array([[[-37.40388626, -37.40388626, -37.40388626, ..., -37.40388626,\n               -37.40388626, -37.40388626],\n              [ 38.04015058,  38.04015058,  38.04015058, ...,  38.04015058,\n                38.04015058,  38.04015058]]]),\n      'Y': array([[[-32.99333756, -32.99333756, -32.99333756, ..., -32.99333756,\n               -32.99333756, -32.99333756],\n                36.11064515,  36.11064515]]]),\n      'Z': array([[[-35.1620997 , -33.64347275, -32.12484579, ...,  36.21336725,\n                37.73199421,  39.25062116],\n              [-35.1620997 , -33.64347275, -32.12484579, ...,  36.21336725,\n                37.73199421,  39.25062116]]])}}\n\n\n ## Utils  <a name=\"Utils\"></a>\n This section uses other modules to apply to the current self object. For example, PCA from scikit-learn is implemented. We also use UMAP from umap-learn. The list for utils methods :\n - self.utils_KernelDensity - https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KernelDensity.html#sklearn.neighbors.KernelDensity\n - self.utils_PCA - https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html?highlight=pca#sklearn.decomposition.PCA\n - self.utils_ts_filtering_STL - https://www.statsmodels.org/devel/generated/statsmodels.tsa.seasonal.STL.html\n - self.utils_UMAP - https://umap-learn.readthedocs.io/en/latest/\n\n ## Graphs  <a name=\"Graph\"></a>\n This subsclass uses Plotly to plot to different data computed with the module.\n\n```python\nCC.graph_boxplots_distances_to_centroid(0)\n```\n![Distance to centroid](https://user-images.githubusercontent.com/84455908/128026108-2be83b69-2811-403a-9b55-109ddedeefa1.png)\n\n```python\nCC.graph_PCA_3D()\n```\n![PCA_3D](https://user-images.githubusercontent.com/84455908/128026133-213a167b-d1ab-4e2d-b616-2482aa06f857.png)\n\n```python\nCC.graph_reduction_2D(\"UMAP\")\n```\n![UMAP](https://user-images.githubusercontent.com/84455908/128026203-83f793c0-1417-44ec-8057-4278f6e40cf7.png)\n\n\n```python\nCC.graph_reduction_2D(\"PCA\")\n```\n\n![PCA2D](https://user-images.githubusercontent.com/84455908/128026228-fc387a70-61dc-481b-9163-8fe920f0a749.png)\n\n```python\nCC.graph_reduction_density_2D(\"PCA\", 99, \"contour\")\n```\n![reduction_density_2D](https://user-images.githubusercontent.com/84455908/128026292-0855586b-20b3-48ae-9ba0-559b3f683275.png)\n\n\n```python\nCC.graph_reduction_density_2D(\"UMAP\", 99, \"contour\")\n```\n![reduction_density_2D](https://user-images.githubusercontent.com/84455908/128026342-f1fe5a1e-de61-4698-a38e-e0506d8b3af3.png)\n\n\n```python\nCC.graph_reduction_density_2D(\"PCA\", 99, \"interactive\")\n```\n![reduction_density_2D](https://user-images.githubusercontent.com/84455908/128026412-ba29a0a2-1639-473d-a4bd-8fe10aeb605e.png)\n![reduction_density_2D](https://user-images.githubusercontent.com/84455908/128026432-02456492-e2e2-4432-b5a9-591186291b0e.png)\n\n\n```python\nCC.graph_reduction_density_3D(99)\n```\n![reduction_density_3D](https://user-images.githubusercontent.com/84455908/128026439-9379f00c-23ed-444b-add0-daf6b0efecbd.png)\n\n\n```python\nCC.graph_reduction_density_3D(99,clusters=[0,1])\n```\n ![reduction_density_3D](https://user-images.githubusercontent.com/84455908/128026462-77d28ddf-debc-4940-b200-1ff3dcd3f999.png)\n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Simon-Bertrand",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Clusters-Features",
    "package_url": "https://pypi.org/project/Clusters-Features/",
    "platform": "",
    "project_url": "https://pypi.org/project/Clusters-Features/",
    "project_urls": {
      "Cluster-Features": "https://github.com/Simon-Bertrand/Clusters-Features",
      "Homepage": "https://github.com/Simon-Bertrand"
    },
    "release_url": "https://pypi.org/project/Clusters-Features/1.0.3/",
    "requires_dist": [
      "numpy",
      "pandas",
      "scipy",
      "scikit-learn",
      "plotly",
      "numba",
      "umap-learn (>=0.5.1)",
      "statsmodels",
      "Pillow"
    ],
    "requires_python": ">=3.8",
    "summary": "The Clusters-Features package allows data science users to compute high-level linear algebra operations on any type of data set.",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11294348,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "010e424e4849c31a625fd61a603e91ddb9f1b606b26c04aa269f4527f21dd52b",
          "md5": "107073111831ea9e63804555bf21165d",
          "sha256": "ca67655b50d83271428219599400fe3e3e2a77f845ee0b2bbef45a98fbaa88fb"
        },
        "downloads": -1,
        "filename": "Clusters_Features-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "107073111831ea9e63804555bf21165d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 65648,
        "upload_time": "2021-08-27T11:56:38",
        "upload_time_iso_8601": "2021-08-27T11:56:38.640117Z",
        "url": "https://files.pythonhosted.org/packages/01/0e/424e4849c31a625fd61a603e91ddb9f1b606b26c04aa269f4527f21dd52b/Clusters_Features-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84538f4f615a1505728785d76cff090f0558607257d006b9ff2fc53e54ef2e9e",
          "md5": "3c7e5895fcc4d1794fabc8e6a5d3e9de",
          "sha256": "6fea31627a763385feee9368f8dcaeaf0499d872131946094abceef5d3b19663"
        },
        "downloads": -1,
        "filename": "Clusters_Features-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c7e5895fcc4d1794fabc8e6a5d3e9de",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 65643,
        "upload_time": "2021-08-27T12:11:33",
        "upload_time_iso_8601": "2021-08-27T12:11:33.734964Z",
        "url": "https://files.pythonhosted.org/packages/84/53/8f4f615a1505728785d76cff090f0558607257d006b9ff2fc53e54ef2e9e/Clusters_Features-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "84538f4f615a1505728785d76cff090f0558607257d006b9ff2fc53e54ef2e9e",
        "md5": "3c7e5895fcc4d1794fabc8e6a5d3e9de",
        "sha256": "6fea31627a763385feee9368f8dcaeaf0499d872131946094abceef5d3b19663"
      },
      "downloads": -1,
      "filename": "Clusters_Features-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3c7e5895fcc4d1794fabc8e6a5d3e9de",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 65643,
      "upload_time": "2021-08-27T12:11:33",
      "upload_time_iso_8601": "2021-08-27T12:11:33.734964Z",
      "url": "https://files.pythonhosted.org/packages/84/53/8f4f615a1505728785d76cff090f0558607257d006b9ff2fc53e54ef2e9e/Clusters_Features-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}