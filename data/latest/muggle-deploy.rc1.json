{
  "info": {
    "author": "kerlomz",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# 1. 部署项目\r\n\r\n| 文件                      | 功能                                                         |\r\n| ------------------------- | ------------------------------------------------------------ |\r\n| fastapi_app.py            | FastAPI 服务应用堆栈，包括服务的路由定义等等，可在这里修改API路由 |\r\n| config.py                 | 配置文件，定义一些基本传参，详细见附录                       |\r\n| constants.py              | 静态变量定义，原本这个框架是包含授权，试用模式，加密，网络验证等等的，还有配置文件化，不过因为是加密的，与项目无关，就都优化掉了，只保留最基本的几个配置，需要关注的只有 modules_enabled，该模式也方便后续自己添加中间件，控制开启或关闭。 |\r\n| engine/*                  | 包含运行时引擎，模型引擎，项目引擎，会话引擎等引擎基类       |\r\n| entity.py                 | 这块主要是针对点选拓展的，基础数据结构如坐标这些的           |\r\n| exception.py              | 自定义异常                                                   |\r\n| handler.py                | WEB服务的核心逻辑，最精简实现可以参考SDK核心逻辑             |\r\n| logger.py                 | 日志                                                         |\r\n| main.py                   | Web服务启动文件                                              |\r\n| sdk.py                    | SDK服务的核心逻辑                                            |\r\n| utils.py                  | 系统工具类，动态加载中间件，WEB服务参数解析等                |\r\n| requirements.txt          | 依赖声明，使用pip install -r requirements.txt 一键安装依赖   |\r\n| logic/base.py             | 逻辑模块的基本逻辑                                           |\r\n| logic/cls.py              | Cls 模型逻辑                                                 |\r\n| logic/ctc.py              | CTC 模型逻辑                                                 |\r\n| logic/click.py            | 点选逻辑                                                     |\r\n| middleware                | 中间件，包括展示页面（主要方便测试），授权逻辑等，目前该项目没用到，图像展示 (Draw) 默认开启。http://127.0.0.1:19199/preview 可以访问测试页面。 |\r\n| /projects/*               | 工程路径， 路径下的文件夹即为实际调用时的项目名 [project_name] 参数 |\r\n| /ext/engine/*             | 附加模型引擎的实现类                                         |\r\n| /logic/*                  | 附加项目逻辑的实现类                                         |\r\n| server/gunicorn_server.py | gunicorn server, 通过config.py启动参数控制                   |\r\n\r\n\r\n\r\n| 项目工程（Projects） |       |\r\n|----------------|-------|\r\n| xxx            | xxx识别 |\r\n\r\n\r\n\r\n## 1.1 系统要求\r\n\r\n最低：Windows 2012 内核以上 / Ubuntu18以上\r\n\r\n| Linux                     | Windows                      |\r\n| ------------------------- | ---------------------------- |\r\n| Ubuntu 20/18；CentOS 7.6+ | Windows 2012/2016/2019/10/11 |\r\n\r\n\r\n\r\n\r\n## 1.2 环境要求\r\n\r\nPython3.9 (:=表达式所以最低只能3.8)\r\n\r\n\r\n\r\n## 1.3 项目部署核心流程\r\n\r\n1. 安装 Python3.9\r\n\r\n2. ```pip install muggle-deploy-1.0.0.tar.gz -i https://mirrors.cloud.tencent.com/pypi/simple ``` 在自己的项目中，安装项目依赖。\r\n\r\n3. 服务部署：\r\n\r\n   1. SDK方式调用：参考 test_sdk.py\r\n\r\n   2. WEB部署：``` python test_server.py --port 19199 ``` 启动项目主服务\r\n\r\n4. 编译可执行文件（可移植无需Python运行环境部署框架）：\r\n\r\n    ```python3.9 test_compile.py --projects 项目1 项目2``\r\n\r\n   默认编译路径在 %TEMP%/muggle_dist 下。\r\n\r\n\r\n\r\n**test_server.py**\r\n\r\n```python\r\n#!/usr/bin/env python3\r\n# -*- coding:utf-8 -*-\r\nfrom muggle import serve\r\n\r\nif __name__ == '__main__':\r\n    serve()\r\n```\r\n\r\n\r\n\r\n### 1.3.1 CentOS部署全流程\r\n\r\n```shell\r\n# 工作路径为 muggle-deploy-1.0.0 项目中\r\n\r\n# 1. 安装 Python3.9.9 环境\r\nsudo yum -y update\r\nsudo yum install gcc openssl-devel bzip2-devel libffi-devel zlib-devel git -y\r\n\r\ncd muggle/package/lib && tar -xvf Python-3.9.9.tar.gz && cd Python-3.9.9/\r\nsudo ./configure --enable-optimizations --enable-shared\r\nmake clean &&  make altinstall\r\n\r\n# 配置环境变量 & 安装 muggle 模块\r\ncd ../../../../ && echo \"/usr/local/lib\" >> /etc/ld.so.conf && ldconfig -v\r\npython3.9 -m pip install muggle-deploy-1.0.0.tar.gz -i https://mirrors.cloud.tencent.com/pypi/simple\r\n\r\n# 2. 把 projects / logic 结构的模型和相关配置放置于项目根目录\r\n\r\n# 3.1 前台启动，用于测试环境安装是否有误 \r\n# python3.9 test_server.py --port 19199 \r\n# 3.2 后台启动\r\nnohup python3.9 test_server.py --port 19199 &\r\n\r\n# 4. 查看 nohup 日志\r\ntail -f -n 100 nohup.out 查看实时日志\r\n```\r\n\r\n\r\n\r\n### 1.3.2 Ubuntu部署流程\r\n\r\n```bash\r\n# 工作路径为 muggle-deploy-1.0.0 项目中\r\n\r\n# 1. 安装 Python3.9.9 环境\r\nsudo wget -O /etc/apt/sources.list http://mirrors.cloud.tencent.com/repo/ubuntu20_sources.list\r\nsudo apt-get clean all\r\nsudo apt-get update\r\nsudo apt install software-properties-common -y\r\nsudo add-apt-repository ppa:deadsnakes/ppa -y\r\nsudo apt update\r\nsudo apt install python3.9 -y\r\nsudo apt install python3.9-dev -y\r\nsudo apt install python3-pip -y\r\nsudo apt-get install ccache -y\r\nsudo apt install chrpath -y\r\nsudo apt-get install patchelf\r\n\r\n# 配置环境变量 & 安装 muggle 模块\r\npython3.9 -m pip install git+git://github.com/benoitc/gunicorn.git --no-cache-dir --force-reinstall\r\npython3.9 -m pip install muggle-deploy-1.0.0.tar.gz -i https://mirrors.cloud.tencent.com/pypi/simple\r\n\r\n# 2. 把 projects / logic  结构的模型和相关配置放置于项目根目录\r\n\r\n# 3.1 前台启动，用于测试环境安装是否有误 \r\n# python3.9 test_server.py --port 19199 \r\n# 3.2 后台启动\r\nnohup python3.9 test_server.py --port 19199 &\r\n\r\n# 4. 查看 nohup 日志\r\ntail -f -n 100 nohup.out 查看实时日志\r\n```\r\n\r\n\r\n\r\n### 1.3.3 Linux编译版部署\r\n\r\n```shell\r\ncd main.dist\r\n\r\n# 1. 把 projects / logic 结构的模型和相关配置放置于项目根目录\r\n\r\n# 2.1 前台启动，用于测试环境安装是否有误 \r\n# ./main --port 19199 \r\n# 2.2 后台启动\r\nnohup ./main.bin --port 19199 &\r\n\r\n# 3. 查看 nohup 日志\r\ntail -f -n 100 nohup.out 查看实时日志\r\n```\r\n\r\n\r\n\r\n\r\n\r\n### 1.3.2 启动参数附录\r\n\r\n| 启动参数 | 介绍                        |\r\n| -------- | --------------------------- |\r\n| host     | 服务监听地址，默认为0.0.0.0 |\r\n| port     | 服务监听端口，默认为19199   |\r\n| workers  | 进程数                      |\r\n| threads  | 线程数                      |\r\n\r\n\r\n\r\n## 1.4 服务调用\r\n\r\n服务启动之后根据服务日志可见提示：\r\n\r\n调用文档：http://127.0.0.1:19199/runtime/api/guide，端口号若自定义需自行修改（调用文档请使用该地址访问，因为生成之后的文档有一定的时效，若404请刷新该引导页面重试。\r\n\r\n\r\n\r\nSDK调用方式（可用于嵌入Python的跨语言调用）：\r\n\r\n```python\r\nimport os\r\n\r\nimport PIL.Image\r\nfrom muggle import SDK\r\n\r\n# 演示项目中获取demo图片示例\r\nproject_name = \"项目名\"\r\nproject_dir = rf\"projects/{project_name}/demo\"\r\nimage_path = [os.path.join(project_dir, name) for name in os.listdir(project_dir) if name.startswith(\"image\")][0]\r\ntitle_paths = [os.path.join(project_dir, name) for name in os.listdir(project_dir) if name.startswith(\"title\")]\r\n\r\nif len(title_paths) > 1:\r\n    title = [PIL.Image.open(path) for path in title_paths]\r\nelif len(title_paths) == 1:\r\n    title = PIL.Image.open(title_paths[0])\r\nelse:\r\n    title = None\r\n    \r\nimage = PIL.Image.open(image_path)\r\n\r\n# 这部分开始才是核心调用，\r\n# image 是 [主图: PIL.Image 格式]， \r\n# title 看具体项目逻辑，可以是List[PIL.Image]/PIL.Image/None/str，视具体情况而定\r\n\r\n# 初始化项目SDK，如果调用循环调用预测函数，那么sdk必须在循环以外避免重复初始化\r\nsdk = SDK.get(project_name)\r\n\r\n# 预测函数\r\npredictions, score = sdk.execute(image, title=title)\r\nprint(predictions, score)\r\n```\r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kerlomz",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "muggle-deploy",
    "package_url": "https://pypi.org/project/muggle-deploy/",
    "platform": null,
    "project_url": "https://pypi.org/project/muggle-deploy/",
    "project_urls": {
      "Homepage": "https://github.com/kerlomz"
    },
    "release_url": "https://pypi.org/project/muggle-deploy/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.9,<3.11",
    "summary": "muggle-deploy",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16063166,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d9a635478d089a24586e88b132f5142b63dfd4a906c3add3679f29d90b580ac",
          "md5": "78cd727477579dbd0b8e402b6394b350",
          "sha256": "a3880a8eca26dc5dfb76f2a3ca21038cb724f234b028a96496c40a85e9e8608a"
        },
        "downloads": -1,
        "filename": "muggle-deploy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "78cd727477579dbd0b8e402b6394b350",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<3.11",
        "size": 69953464,
        "upload_time": "2022-12-11T07:36:18",
        "upload_time_iso_8601": "2022-12-11T07:36:18.684258Z",
        "url": "https://files.pythonhosted.org/packages/3d/9a/635478d089a24586e88b132f5142b63dfd4a906c3add3679f29d90b580ac/muggle-deploy-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d9a635478d089a24586e88b132f5142b63dfd4a906c3add3679f29d90b580ac",
        "md5": "78cd727477579dbd0b8e402b6394b350",
        "sha256": "a3880a8eca26dc5dfb76f2a3ca21038cb724f234b028a96496c40a85e9e8608a"
      },
      "downloads": -1,
      "filename": "muggle-deploy-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "78cd727477579dbd0b8e402b6394b350",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<3.11",
      "size": 69953464,
      "upload_time": "2022-12-11T07:36:18",
      "upload_time_iso_8601": "2022-12-11T07:36:18.684258Z",
      "url": "https://files.pythonhosted.org/packages/3d/9a/635478d089a24586e88b132f5142b63dfd4a906c3add3679f29d90b580ac/muggle-deploy-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}