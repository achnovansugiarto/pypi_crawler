{
  "info": {
    "author": "Yaroslav Polyakov",
    "author_email": "yaroslaff@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# WS-Emit\n\nWS-Emit is simple microservice app to send instant messages (websocket events) from backend to frontend web applications running in browser (one way). ws-emit handles CORS configuration and authentication mechanism for different *room-spaces*.\n\nExample usages:\n- ecommerce website may update prices, stock and orders information on page in realtime, without need to refresh. \n- social network may show user if someone is writing new comment right now and display comment when it will be submitted\n- backend may update frontend about status of long-running requests, such as 'build is N% ready', 'deploying'\n\nWS-Emit benefits:\n- Isolated microservice, not requires any integration with your application\n- Compatible with application in any programming languages (if they can send HTTP requests or publish data to redis), any frameworks, any application web server \n\nWS-Emit is based on [Flask-SocketIO](https://github.com/miguelgrinberg/Flask-SocketIO) and sending message is as simple as in any other flask-socketio application:\n\n~~~python3\nsocketio.emit('update', data, room='time')\n~~~\n\nor via HTTP interface (see below):\n~~~\ncurl -d @x.json -H \"Content-Type: application/json\" -X POST http://localhost:8899/emit\n~~~\n\n## Screencast\nSee below for detailed explanation what every example does.\n\n[![ws-emit screencast](https://img.youtube.com/vi/yQCIBFuogg4/0.jpg)](https://www.youtube.com/watch?v=yQCIBFuogg4)\n\n## Installation\n~~~\npip3 install ws-emit\n~~~\nor, install right from github repo:\n~~~\npip3 install git+https://github.com/yaroslaff/ws-emit\n~~~\n\nIf you want to install as systemd service:\n~~~\ncp /usr/local/ws-emit/contrib/ws-emit /etc/default/\ncp /usr/local/ws-emit/contrib/ws-emit.service /etc/systemd/system/\nsystemctl daemon-reload\nsystemctl enable ws-emit\nsystemctl start ws-emit\n~~~\nIf you want to adjust CORS, ADDRESS or SECRET settings, edit /etc/default/ws-emit and restart service.\n\nIf you want to run manually from shell:\n~~~\n# specify default parameters\nws-emit.py -a 0.0.0.0:8899 --cors http://localhost:7788 --secret 123\n~~~\n\n## Authentication and room-spaces\nRoom name optionally may have format roomspace::roomname (separated by '::'). When client wants to join such room it must provide secret matching redis key ws-emit::room_secret::*roomspace*. If secrets aren't match, join request is ignored. All rooms in same roomspace shares same secret.  Backend must set this key in redis (e.g. `SET ws-emit::room_secret::myroom MySecret_123`) and pass secret to frontend.\n\nRooms without '::' in name, are public, anyone can join it. They are not suited to send any sensitive info.\n\n## Emitting messages over HTTP(s)\nIt's possible to emit messages from any sources (any programming languages, even from PHP or Perl or shell scripts. really.) using HTTP interface. Here is simple example how to emit websocket events right from shell using curl.\n\nHTTP emitting requres secret, like:\n~~~\n./ws-emit.py --secret MySecret\n~~~\n\nor set `SECRET=MySecret` in /etc/default/ws-emit and restart ws-emit service.\n\nJSON file `x.json`:\n~~~\n{\n\t\"event\": \"update\",\n\t\"room\": \"time\",\n\t\"data\": {\n\t\t\"time\": 111111\n\t},\n\t\"namespace\": null,\n\t\"secret\": \"123\"\n}\n~~~\n\ncommand:\n~~~\ncurl -d @x.json -H \"Content-Type: application/json\" -X POST http://localhost:8899/emit\n~~~\n\nYou may run `time.py` example (see below) and execute this curl statement, it will send time 111111 and it will be displayed in browser for short time (less then 1s) until overwritten by next update.\n\n\n## Examples\n\n### time\nTime is simplest example. No authentication at all.\n\nStart `/usr/local/ws-emit/example/time.py` in console. Navigate browser to http://localhost:7788/. You will see current system unixtime, it will update every second. \n\nMake sure addresses are exactly matching to CORS value in ws-emit (--cors option or CORS= parameter in /etc/default/ws-emit), http://localhost:7788 (default) and http://127.0.0.1:7788 are different\n\n### dir2web\nDir2web is more complex example with authentication and room-spaces.\n\nCreate test web directory, e.g. `mkdir /tmp/ws-emit`.\nStart `/usr/local/ws-emit/example/dir2web.py /tmp/ws-emit` in console and open http://localhost:7788 in browser. You will see all files in this directory, if you will create new file (`echo aaa > /tmp/ws-emit/aaa.txt`), it will be immediately listed in browser. You can open file in browser, and if you will change file content  (`echo aaa2 > /tmp/ws-emit/aaa.txt`) it will be immediately updated in browser.\n\ndir2web uses roomspace `dir` and sets access key to this roomspace as redis-key `ws-emit::room_secret::dir`. This key is provided to JS code running in browser, and then JS code send key when join rooms inside this roomspace.\n\n### subspy\nSubspy `/usr/local/ws-emit/example/subspy.py` it simple utility to *sniff* traffic in publish/subscribe redis channel.\n\nExample output (from time.py example):\n~~~\n# /usr/local/ws-emit/example/subspy.py \nAll channels: [b'flask-socketio']\nINT: 1\n{'method': 'emit', 'event': 'update', 'data': {'time': 1639178370}, 'namespace': '/', 'room': 'time', 'skip_sid': None, 'callback': None, 'host_id': 'ce56fbc176624c7e8511a583cd5030a8'}\n{'method': 'emit', 'event': 'update', 'data': {'time': 1639178371}, 'namespace': '/', 'room': 'time', 'skip_sid': None, 'callback': None, 'host_id': 'ce56fbc176624c7e8511a583cd5030a8'}\n~~~\n\nYou may use subspy to generate websocket events in other languages (But messages must be serialized in python [pickle](https://docs.python.org/3/library/pickle.html) format).\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/yaroslaff/ws-emit",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ws-emit",
    "package_url": "https://pypi.org/project/ws-emit/",
    "platform": "",
    "project_url": "https://pypi.org/project/ws-emit/",
    "project_urls": {
      "Homepage": "https://github.com/yaroslaff/ws-emit"
    },
    "release_url": "https://pypi.org/project/ws-emit/0.0.3/",
    "requires_dist": [
      "eventlet",
      "flask-socketio",
      "inotify",
      "redis",
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "Easily emit websocket events from any sources using redis or HTTP interface",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12781826,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8955935c2fc54e014d6e525d0ac87e37b77c6449ea37113c1f992a7c8fb9e712",
          "md5": "068ed49a764800763395349844995d1f",
          "sha256": "99d80149270692a632027da6671a461aa60b1e06e056eedcb7d2c8daa3e37c61"
        },
        "downloads": -1,
        "filename": "ws_emit-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "068ed49a764800763395349844995d1f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13598,
        "upload_time": "2021-12-13T12:39:48",
        "upload_time_iso_8601": "2021-12-13T12:39:48.501010Z",
        "url": "https://files.pythonhosted.org/packages/89/55/935c2fc54e014d6e525d0ac87e37b77c6449ea37113c1f992a7c8fb9e712/ws_emit-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "868bd6724233e3640e1ecf602bd4f85661ef0dece9df1e1518c3b2d70e33a105",
          "md5": "11414fddf09e26e8e3a9505f483c4aee",
          "sha256": "464696d2c283f8fabc92d18214c0b1e9861dc243497d9f04008981c818347266"
        },
        "downloads": -1,
        "filename": "ws_emit-0.0.1.post1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11414fddf09e26e8e3a9505f483c4aee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13794,
        "upload_time": "2021-12-13T12:53:49",
        "upload_time_iso_8601": "2021-12-13T12:53:49.473449Z",
        "url": "https://files.pythonhosted.org/packages/86/8b/d6724233e3640e1ecf602bd4f85661ef0dece9df1e1518c3b2d70e33a105/ws_emit-0.0.1.post1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd54000d61c0b6ad5bc329e37f7b1fa23b8a272133acd679aca5442ce1ecdd35",
          "md5": "a4f020afb03e7132fc88cfb266fee9db",
          "sha256": "5a0e6e96149750af1aeebcb3aea84763e1fd28eada02e2a2d895083952c4c8b6"
        },
        "downloads": -1,
        "filename": "ws_emit-0.0.1.post2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4f020afb03e7132fc88cfb266fee9db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13751,
        "upload_time": "2021-12-13T13:02:12",
        "upload_time_iso_8601": "2021-12-13T13:02:12.954192Z",
        "url": "https://files.pythonhosted.org/packages/bd/54/000d61c0b6ad5bc329e37f7b1fa23b8a272133acd679aca5442ce1ecdd35/ws_emit-0.0.1.post2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f9ccf4f8f1da228fbd5e69245000f51a3252691432fa86a8f995313e3599ace",
          "md5": "76ce2a5afff045f553a8b1d6c0fea453",
          "sha256": "8a9c7a9c2be508b1b92523ede419aea33604e1cbfea87413b68e237cfcc9ebeb"
        },
        "downloads": -1,
        "filename": "ws_emit-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76ce2a5afff045f553a8b1d6c0fea453",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13626,
        "upload_time": "2022-01-27T22:12:21",
        "upload_time_iso_8601": "2022-01-27T22:12:21.639934Z",
        "url": "https://files.pythonhosted.org/packages/7f/9c/cf4f8f1da228fbd5e69245000f51a3252691432fa86a8f995313e3599ace/ws_emit-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06ab57d4089a853063f87c8c84fec111a60bd4cd13d09f41cfcaf3c2cc0695b1",
          "md5": "99e2ff90cfe6ebffb6b3e498f857cb33",
          "sha256": "ad5af013f8e8146c7c1dd7a86e0823d71d4da083261963862ffb06de087a2dd5"
        },
        "downloads": -1,
        "filename": "ws_emit-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "99e2ff90cfe6ebffb6b3e498f857cb33",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13658,
        "upload_time": "2022-02-03T23:11:29",
        "upload_time_iso_8601": "2022-02-03T23:11:29.983998Z",
        "url": "https://files.pythonhosted.org/packages/06/ab/57d4089a853063f87c8c84fec111a60bd4cd13d09f41cfcaf3c2cc0695b1/ws_emit-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "06ab57d4089a853063f87c8c84fec111a60bd4cd13d09f41cfcaf3c2cc0695b1",
        "md5": "99e2ff90cfe6ebffb6b3e498f857cb33",
        "sha256": "ad5af013f8e8146c7c1dd7a86e0823d71d4da083261963862ffb06de087a2dd5"
      },
      "downloads": -1,
      "filename": "ws_emit-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "99e2ff90cfe6ebffb6b3e498f857cb33",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13658,
      "upload_time": "2022-02-03T23:11:29",
      "upload_time_iso_8601": "2022-02-03T23:11:29.983998Z",
      "url": "https://files.pythonhosted.org/packages/06/ab/57d4089a853063f87c8c84fec111a60bd4cd13d09f41cfcaf3c2cc0695b1/ws_emit-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}