{
  "info": {
    "author": "Cottage Labs",
    "author_email": "richard@cottagelabs.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# SWORDv3 Client\n\n[![Documentation Status](https://readthedocs.org/projects/sword3-clientpy/badge/?version=latest)](https://sword3-clientpy.readthedocs.io/en/latest/?badge=latest)\n\nThis client library provides all the basic features of SWORDv3 as a Python API.\n\n## Example Usage\n\nCreate a new instance of the client\n\n```python\nfrom sword3client import SWORD3Client\nclient = SWORD3Client()\n```\n\nSee the object definitions for full details of all operations available.  Examples of common usage would be:\n\n* Create an object with metadata only:\n\n```python\nfrom sword3common import Metadata\nfrom sword3client import SWORD3Client\nclient = SWORD3Client()\n\nSERVICE = \"http://example.com/service-document\"\nmetadata = Metadata()\nmetadata.add_dc_field(\"creator\", \"Test\")\nresponse = client.create_object_with_metadata(SERVICE, metadata)\n```\n\n* Create an object with a package:\n\n```python\nfrom sword3common import constants\nfrom sword3client import SWORD3Client\nclient = SWORD3Client()\n\npackage_path = \"/path/to/file.zip\"\ndigest = {constants.DIGEST_SHA_256: \"digest....\"}\nSERVICE = \"http://example.com/service-document\"\nwith open(package_path, \"rb\") as stream:\n    response = client.create_object_with_package(\n                    SERVICE,\n                    stream,\n                    \"test.zip\",\n                    digest,\n                    content_type=\"application/zip\",\n                    packaging=constants.PACKAGE_SWORDBAGIT,\n                )\n```\n\n* Retrieve the Object's status:\n\n```python\nfrom sword3client import SWORD3Client\nclient = SWORD3Client()\n\nOBJ_URL = \"http://example.com/object/1\"\nstatus = client.get_object(OBJ_URL)\n```\n\n* Append a binary file:\n\n```python\nfrom sword3client import SWORD3Client\nclient = SWORD3Client()\n\nOBJ_URL = \"http://example.com/object/1\"\nfile_path = \"/path/to/binary.bin\"\ndigest = {sword3common.constants.DIGEST_SHA_256: \"digest....\"}\nwith open(file_path, \"rb\") as stream:\n    response = client.add_binary(OBJ_URL, stream, \"test.bin\", digest)\n```\n\n* Delete the object:\n\n```python\nfrom sword3client import SWORD3Client\nclient = SWORD3Client()\n\nOBJ_URL = \"http://example.com/object/1\"\nresponse = client.delete_object(OBJ_URL)\n```\n\n* Create an object by reference:\n\n```python\nfrom sword3common import ByReference\nfrom sword3client import SWORD3Client\nclient = SWORD3Client()\n\nSERVICE = \"http://example.com/service-document\"\n\nbr = ByReference()\nbr.add_file(\"http://example.com/file.pdf\",\n            \"file.pdf\",\n            \"application/pdf\",\n            True)\n\nresponse = client.create_object_by_reference(SERVICE, br)\n```\n\n* Upload a large file by segments\n\n```python\nfrom io import BytesIO\nfrom sword3common import constants\nfrom sword3client import SWORD3Client\nclient = SWORD3Client()\n\nSERVICE = \"http://example.com/service-document\"\nFILE_SIZE = 1000000\nSEGMENT_COUNT = 10\nSEGMENT_SIZE = 100000\nDIGEST = {constants.DIGEST_SHA_256: \"digest....\"}\nLARGE_FILE = \"/path/to/large/file.zip\"\n\n# get the service document, which tells us important details on segmented uploads\nservice_document = client.get_service(SERVICE)\n\n# initialise the upload, to get a temporary url\nresp = client.initialise_segmented_upload(\n    service_document,\n    assembled_size=FILE_SIZE,\n    segment_count=SEGMENT_COUNT,\n    segment_size=SEGMENT_SIZE,\n    digest=DIGEST\n)\ntemporary_url = resp.location\n\n# send each segment to the temporary url\nwith open(LARGE_FILE, \"rb\") as f:\n    for i in range(SEGMENT_COUNT):\n        segment = f.read(SEGMENT_SIZE)\n        stream = BytesIO(segment)\n        segment_response = client.upload_file_segment(temporary_url, stream, i)\n```\n\n* Retrieve information about a segmented upload\n\n```python\nfrom sword3client import SWORD3Client\nclient = SWORD3Client()\n\n# Temporary URL obtained from initialisation of segmented upload step (see above)\nTEMPORARY_URL = \"http://example.com/temporary_url\"\n\nupload_status = client.segmented_upload_status(TEMPORARY_URL)\n\nprint(upload_status.received)\nprint(upload_status.expecting)\nprint(upload_status.size)\nprint(upload_status.segment_size)\n```\n\n* Deposit a file uploaded by segments\n\n```python\nfrom sword3client import SWORD3Client\nclient = SWORD3Client()\n\nSERVICE = \"http://example.com/service-document\"\n\n# Temporary URL obtained from initialisation of segmented upload step (see above)\nTEMPORARY_URL = \"http://example.com/temporary_url\"\n\nresp = client.create_object_with_temporary_file(SERVICE, \n                                                TEMPORARY_URL, \n                                                \"test.zip\", \n                                                \"application/zip\")\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://cottagelabs.com/",
    "keywords": "",
    "license": "Apache2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sword3client",
    "package_url": "https://pypi.org/project/sword3client/",
    "platform": "",
    "project_url": "https://pypi.org/project/sword3client/",
    "project_urls": {
      "Homepage": "http://cottagelabs.com/"
    },
    "release_url": "https://pypi.org/project/sword3client/0.1/",
    "requires_dist": [
      "sword3common",
      "Sphinx ; extra == 'docs'",
      "sphinx-autodoc-annotation ; extra == 'docs'",
      "nose ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "SWORDv3 Client Library",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9385429,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1526f93eced3059340c59cd3233b1b584135d56d43dc929208bdba5d570f5af",
          "md5": "96ea8f46b3a3689cc316ef3fa0dde1ee",
          "sha256": "a4a868ff394004c53b1fecc73ad98a99d87ae47ab80afb406a9e75353f8831ba"
        },
        "downloads": -1,
        "filename": "sword3client-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96ea8f46b3a3689cc316ef3fa0dde1ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 26557,
        "upload_time": "2020-07-17T16:58:51",
        "upload_time_iso_8601": "2020-07-17T16:58:51.984675Z",
        "url": "https://files.pythonhosted.org/packages/e1/52/6f93eced3059340c59cd3233b1b584135d56d43dc929208bdba5d570f5af/sword3client-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de14a4975b2cce068b964c71f44ff1e0ce6dffee199f2597843b31a5d11a89d2",
          "md5": "5b2e031fff81143bd011145059be70f1",
          "sha256": "3bd452ec37afc6ef12068a6c7d11ca6601ab55debf2b96c2dbf1d028642949c8"
        },
        "downloads": -1,
        "filename": "sword3client-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5b2e031fff81143bd011145059be70f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20246,
        "upload_time": "2020-07-17T16:58:54",
        "upload_time_iso_8601": "2020-07-17T16:58:54.726132Z",
        "url": "https://files.pythonhosted.org/packages/de/14/a4975b2cce068b964c71f44ff1e0ce6dffee199f2597843b31a5d11a89d2/sword3client-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1526f93eced3059340c59cd3233b1b584135d56d43dc929208bdba5d570f5af",
        "md5": "96ea8f46b3a3689cc316ef3fa0dde1ee",
        "sha256": "a4a868ff394004c53b1fecc73ad98a99d87ae47ab80afb406a9e75353f8831ba"
      },
      "downloads": -1,
      "filename": "sword3client-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "96ea8f46b3a3689cc316ef3fa0dde1ee",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 26557,
      "upload_time": "2020-07-17T16:58:51",
      "upload_time_iso_8601": "2020-07-17T16:58:51.984675Z",
      "url": "https://files.pythonhosted.org/packages/e1/52/6f93eced3059340c59cd3233b1b584135d56d43dc929208bdba5d570f5af/sword3client-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "de14a4975b2cce068b964c71f44ff1e0ce6dffee199f2597843b31a5d11a89d2",
        "md5": "5b2e031fff81143bd011145059be70f1",
        "sha256": "3bd452ec37afc6ef12068a6c7d11ca6601ab55debf2b96c2dbf1d028642949c8"
      },
      "downloads": -1,
      "filename": "sword3client-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5b2e031fff81143bd011145059be70f1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20246,
      "upload_time": "2020-07-17T16:58:54",
      "upload_time_iso_8601": "2020-07-17T16:58:54.726132Z",
      "url": "https://files.pythonhosted.org/packages/de/14/a4975b2cce068b964c71f44ff1e0ce6dffee199f2597843b31a5d11a89d2/sword3client-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}