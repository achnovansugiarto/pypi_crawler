{
  "info": {
    "author": "Michael Aigner, Florian Preis",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "This library builds a graph-representation of the content of PDFs. The graph is then clustered, resulting page segments are classified and returned. Tables are retrieved formatted in a CSV-style.\n\nHow-to\n========\n\n* Pass the path of the PDF file (as a string) which is wanted to be converted to ``PDFSegmenter``.\n\n* Call the function ``segment_document()``.\n\n* The function ``get_labeled_graphs()`` returns page-wise document graph representations as a list of ``networkx`` graphs. The labels indicate a clustering assignment.\n\n* ``segments2json()`` returns a JSON representation of the segmented document.\n\n* ``segments2text()`` returns a textual representation of the segmented document. This can be either annotated (lists, text and tables are supported) or not and controlled via the boolean parameter ``annotate``.\n\n* Media boxes of a PDF can be accessed using ``get_media_boxes()``, the page count over ``get_page_count()``.\n\nExample call: \n\n\tsegmenter = PDFSegmenter(pdf)\n\n\tsegmenter.segment\\_document()\n\n\tresult = segmenter.segments2json()\n\n\ttext = segmenter.segments2text()\n\n\tgraphs = get\\_labeled\\_graphs()\n\nA file is the only parameter mandatory for the page segmentation.\n\nBeside the graph conversion, media boxes of a document can be accessed using ``get_media_boxes()`` and the page count over ``get_page_count()``.\n\n\nJSON\n=======\n\ntbd\n\nAnnotated text\n=================\n\ntbd\n\nSettings\n==========\n\nClustering\n=============\n\ntbd\n\nMerging\n==========\n\ntbd\n\nClassification\n=================\n\ntbd\n\nGraph\n========\n\nGeneral parameters:\n\n* ``file``: file name\n\n* ``merge_boxes``: indicating if PDF text boxes should be graph nodes, based on visual rectangles present in documents.\n\n* ``regress_parameters``: indicating if graph parameters are regressed or used as a priori optimized default ones.\n\nEdge restrictions:\n\n* ``use_font``: differing font size\n\n* ``use_width``: differing width\n\n* ``use_rect``: nodes contained in differing visual structures\n\n* ``use_horizontal_overlap``: indicating if horizontal edges should be built on overlap. If not, default deltas are used.\n\n* ``use_vertical_overlap``: indicating if vertical edges should be built on overlap. If not, default deltas are used.\n\nEdge thresholds:\n\n* ``page_ratio_x``: maximal relative horizontal distance of two nodes where an edge can be created\n\n* ``page_ratio_y``: maximal relative vertical distance of two nodes where an edge can be created\n\n* ``x_eps``: alignment epsilon for vertical edges in points if ``use_horizontal_overlap`` is not enabled\n\n* ``y_eps``: alignment epsilon for horizontal edges in points if ``use_vertical_overlap`` is not enabled\n\n* ``font_eps_h``: indicates how much font sizes of nodes are allowed to differ as a constraint for building horizontal edges when ``use_font`` is enabled\n\n* ``font_eps_v``: indicates how much font sizes of nodes are allowed to differ as a constraint for building vertical edges when ``use_font`` is enabled\n\n* ``width_pct_eps``: relative width difference of nodes as a condition for vertical edges if ``use_width`` is enabled\n\n* ``width_page_eps``: indicating at which maximal width of a node the width should act as an edge condition if ``use_width`` is enabled\n\nProject Structure\n===================\n\ntbd\n\nOutput Format\n===============\n\nJSON\n=======\n\ntbd\n\nText\n=======\n\ntbd\n\nGraph\n========\n\nAs a result, a list of ``networkx`` graphs is returned.\n\nEach graph encapsulates a structured representation of a single page.\n\nEdges are attributed with the following features:\n\n* ``direction``: shows the direction of an edge.\n\n\t\\* ``v``: Vertical edge\n\n\t\\* ``h``: Horizontal edge\n\n\t\\* ``l``: Rectangular loop. This represents a novel concept encapsulating structural characteristics of document segments by observing if two different paths end up in the same node.\n\n* ``length``: Scaled length of an edge\n\n* ``lengthx_phys``: Horizontal edge length\n\n* ``lengthy_phys``: Vertical edge length\n\n* ``weight``: Scaled total length\n\nAll nodes contain the following content attributes:\n\n* ``id``: unique identifier of the PDF element\n\n* ``page``: page number, starting with 0\n\n* ``text``: text of the PDF element\n\n* ``x_0``: left x coordinate\n\n* ``x_1``: right x coordinate\n\n* ``y_0``: top y coordinate\n\n* ``y_1``: bottom y coordinate\n\n* ``pos_x``: center x coordinate\n\n* ``pos_y``: center y coordinate\n\n* ``abs_pos``: tuple containing a page independent representation of ``(pos_x,pos_y)`` coordinates\n\n* ``original_font``: font as extracted by pdfminer\n\n* ``font_name``: name of the font extracted from ``original_font``\n\n* ``code``: font code as provided by pdfminer\n\n* ``bold``: factor 1 indicating that a text is bold and 0 otherwise\n\n* ``italic``: factor 1 indicating that a text is italic and 0 otherwise\n\n* ``font_size``: size of the text in points\n\n* ``masked``: text with numeric content substituted as #\n\n* ``frequency_hist``: histogram of character type frequencies in a text, stored as a tuple containing percentages of textual, numerical, text symbolic and other symbols\n\n* ``len_text``: number of characters\n\n* ``n_tokens``: number of words\n\n* ``tag``: tag for key-value pair extractions, indicating keys or values based on simple heuristics\n\n* ``box``: box extracted by pdfminer Layout Analysis\n\n* ``in_element_ids``: contains IDs of surrounding visual elements such as rectangles or lists. They are stored as a list [left, right, top, bottom]. -1 is indicating that there is no adjacent visual element.\n\n* ``in_element``: indicates based on in_element_ids whether an element is stored in a visual rectangle representation (stored as \"rectangle\") or not (stored as \"none\").\n\n* ``is_loop``: indicates whether or not a node is connected via a rectangular loop\n\nThe media boxes possess the following entries in a dictionary:\n\n* ``x0``: Left x page crop box coordinate\n\n* ``x1``: Right x page crop box coordinate\n\n* ``y0``: Top y page crop box coordinate\n\n* ``y1``: Bottom y page crop box coordinate\n\n* ``x0page``: Left x page coordinate\n\n* ``x1page``: Right x page coordinate\n\n* ``y0page``: Top y page coordinate\n\n* ``y1page``: Bottom y page coordinate\n\nAcknowledgements\n==================\n\n* Example PDFs are obtained from the ICDAR Table Recognition Challenge 2013 https://roundtrippdf.com/en/data-extraction/pdf-table-recognition-dataset/.\n\nAuthors\n=========\n\n* Michael Benedikt Aigner\n\n* Florian Preis",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/MBAigner/PDFSegmenter/archive/v0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MBAigner/PDFSegmenter",
    "keywords": "pdf,document-processing,python,page-segmentation,layout-analysis,cluster-analysis,annotations,csv,table,detection-model",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PDFSegmenter",
    "package_url": "https://pypi.org/project/PDFSegmenter/",
    "platform": "",
    "project_url": "https://pypi.org/project/PDFSegmenter/",
    "project_urls": {
      "Download": "https://github.com/MBAigner/PDFSegmenter/archive/v0.1.tar.gz",
      "Homepage": "https://github.com/MBAigner/PDFSegmenter"
    },
    "release_url": "https://pypi.org/project/PDFSegmenter/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This library builds a graph-representation of the content of PDFs. The graph is then clustered, resulting page segments are classified and returned. Tables are retrieved formatted as a CSV.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8162437,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36c2c6f5d53033d02ea0819f28e6c7c8669d98896ae5696cbed6d2095c932207",
          "md5": "04a2b36e6859b47de2ea5537ee5b9f39",
          "sha256": "80d9a0b4be7d194588ffba4fb7a165bc5681c085a35aa08cbdcf00c7a560f081"
        },
        "downloads": -1,
        "filename": "PDFSegmenter-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "04a2b36e6859b47de2ea5537ee5b9f39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10545,
        "upload_time": "2020-09-11T07:48:55",
        "upload_time_iso_8601": "2020-09-11T07:48:55.122228Z",
        "url": "https://files.pythonhosted.org/packages/36/c2/c6f5d53033d02ea0819f28e6c7c8669d98896ae5696cbed6d2095c932207/PDFSegmenter-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "36c2c6f5d53033d02ea0819f28e6c7c8669d98896ae5696cbed6d2095c932207",
        "md5": "04a2b36e6859b47de2ea5537ee5b9f39",
        "sha256": "80d9a0b4be7d194588ffba4fb7a165bc5681c085a35aa08cbdcf00c7a560f081"
      },
      "downloads": -1,
      "filename": "PDFSegmenter-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "04a2b36e6859b47de2ea5537ee5b9f39",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 10545,
      "upload_time": "2020-09-11T07:48:55",
      "upload_time_iso_8601": "2020-09-11T07:48:55.122228Z",
      "url": "https://files.pythonhosted.org/packages/36/c2/c6f5d53033d02ea0819f28e6c7c8669d98896ae5696cbed6d2095c932207/PDFSegmenter-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}