{
  "info": {
    "author": "CryptAPI",
    "author_email": "info@cryptapi.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "[<img src=\"https://i.imgur.com/IfMAa7E.png\" width=\"300\"/>](image.png)\n\n\n# CryptAPI's Python Library\nPython implementation of CryptAPI's payment gateway\n\n## Requirements:\n\n```\nPython >= 3.0\nRequests >= 2.20\n```\n\n## Install\n\n```shell script\npip install python-cryptapi\n```\n\n[on pypi](https://pypi.python.org/pypi/python-cryptapi)\nor\n[on GitHub](https://github.com/cryptapi/python-cryptapi)\n\n## Usage\n\n### Importing in your project file\n\n```python\nfrom cryptapi import CryptAPIHelper\n```\n\n### Generating a new Address\n\n```python\nfrom cryptapi import CryptAPIHelper\n\nca = CryptAPIHelper(coin, myAddress, callbackUrl, params, cryptapiParams)\n\naddress = ca.getAddress()['address_in']\n```\n\nWhere:\n\n* `coin` is the coin you wish to use, from CryptAPI's supported currencies (e.g 'btc', 'eth', 'erc20_usdt', ...).\n* `myAddress` is your own crypto address, where your funds will be sent to.\n* `callbackUrl` is the URL that will be called upon payment.\n* `params` is any parameter you wish to send to identify the payment, such as `{orderId: 1234}`.\n* `cryptapiParams` parameters that will be passed to CryptAPI _(check which extra parameters are available here: https://docs.cryptapi.io/#operation/create).\n* `address` is the newly generated address, that you will show your users in order to receive payments.\n\n### Getting notified when the user pays\n\n> Once your customer makes a payment, CryptAPI will send a callback to your `callbackUrl`. This callback information is by default in ``GET`` but you can se it to ``POST`` by setting ``post: 1`` in ``cryptapiParams``. The parameters sent by CryptAPI in this callback can be consulted here: https://docs.cryptapi.io/#operation/confirmedcallbackget\n\n### Checking the logs of a request\n\n```python\nfrom cryptapi import CryptAPIHelper\n\nca = CryptAPIHelper(coin, myAddress, callbackUrl, params, cryptapiParams)\n\ndata = ca.get_logs()\n```\n> Same parameters as before, the ```data``` returned can b e checked here: https://docs.cryptapi.io/#operation/logs\n\n### Generating a QR code\n\n```python\nfrom cryptapi import CryptAPIHelper\n\nca = CryptAPIHelper(coin, myAddress, callbackUrl, params, cryptapiParams)\n\n###\n\nqr_code = ca.get_qrcode(value, size)\n```\nFor object creation, same parameters as before. You must first call ``getAddress` as this method requires the payment address to have been created.\n\nFor QR Code generation:\n\n* ``value`` is the value requested to the user in the coin to which the request was done. **Optional**, can be empty if you don't wish to add the value to the QR Code.\n* ``size`` Size of the QR Code image in pixels. Optional, leave empty to use the default size of 512.\n\n> Response is an object with `qr_code` (base64 encoded image data) and `payment_uri` (the value encoded in the QR), see https://docs.cryptapi.io/#operation/qrcode for more information.\n\n### Estimating transaction fees\n\n```python\nfrom cryptapi import CryptAPIHelper\n\nfees = CryptAPIHelper.get_estimate(coin, addresses, priority)\n```\nWhere: \n* ``coin`` is the coin you wish to check, from CryptAPI's supported currencies (e.g 'btc', 'eth', 'erc20_usdt', ...)\n* ``addresses`` The number of addresses to forward the funds to. Optional, defaults to 1.\n* ``priority`` Confirmation priority, (check [this](https://support.cryptapi.io/article/how-the-priority-parameter-works) article to learn more about it). Optional, defaults to ``default``.\n\n> Response is an object with ``estimated_cost`` and ``estimated_cost_usd``, see https://docs.cryptapi.io/#operation/estimate for more information.\n\n### Converting between coins and fiat\n\n```python\nfrom cryptapi import CryptAPIHelper\n\nconversion = CryptAPIHelper.get_conversion(value, from_coin)\n```\nWhere:\n* ``coin`` the target currency to convert to, from CryptAPI's supported currencies (e.g 'btc', 'eth', 'erc20_usdt', ...)\n* ``value`` value to convert in `from`.\n* ``from_coin`` currency to convert from, FIAT or crypto.\n\n> Response is an object with ``value_coin`` and ``exchange_rate``, see https://docs.cryptapi.io/#operation/convert for more information.\n\n### Getting supported coins\n```python\nfrom cryptapi import CryptAPIHelper\n\nsupportedCoins = CryptAPIHelper.get_supported_coins()\n```\n\n> Response is an array with all supported coins.\n\n## Help\n\nNeed help?  \nContact us @ https://cryptapi.io/contacts/\n\n\n### Changelog\n\n#### 1.0.0\n* Initial Release\n\n#### 1.0.1\n* Minor fixes\n\n#### 1.0.2\n* Minor fixes\n\n#### 1.0.3\n* Minor fixes\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cryptapi/python-cryptapi",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-cryptapi",
    "package_url": "https://pypi.org/project/python-cryptapi/",
    "platform": null,
    "project_url": "https://pypi.org/project/python-cryptapi/",
    "project_urls": {
      "Homepage": "https://github.com/cryptapi/python-cryptapi"
    },
    "release_url": "https://pypi.org/project/python-cryptapi/1.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python Library for CryptAPI payment gateway",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17223949,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d504c9bba686861d607c9b2dc5586e026db746da04bfa622caed54e7d12a8884",
          "md5": "5c652d614a1bc3a2782a19b423a8d99b",
          "sha256": "737df7f9c0bfd6567bcb9e8f10e7c65d898e6a4e2ef9ed071e6cb5d2152ca53d"
        },
        "downloads": -1,
        "filename": "python-cryptapi-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5c652d614a1bc3a2782a19b423a8d99b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 2994,
        "upload_time": "2023-01-31T10:04:15",
        "upload_time_iso_8601": "2023-01-31T10:04:15.429098Z",
        "url": "https://files.pythonhosted.org/packages/d5/04/c9bba686861d607c9b2dc5586e026db746da04bfa622caed54e7d12a8884/python-cryptapi-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1aac296b72443088c5d841ceff139e8cd2daba27292db24c925a1ef0d38b6c2",
          "md5": "8f187a95c77dd80398164ab667acc1b0",
          "sha256": "ab1b7b8ec648e1cd5f15f507299cc32e31dbaddd2ce6fb4b06402a38f6a30f03"
        },
        "downloads": -1,
        "filename": "python-cryptapi-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8f187a95c77dd80398164ab667acc1b0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3094,
        "upload_time": "2023-03-09T12:15:59",
        "upload_time_iso_8601": "2023-03-09T12:15:59.671898Z",
        "url": "https://files.pythonhosted.org/packages/d1/aa/c296b72443088c5d841ceff139e8cd2daba27292db24c925a1ef0d38b6c2/python-cryptapi-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edf1fa4facce6934fa29cf41a878928b87d827b2ef7e0e308f5af927af66e289",
          "md5": "0d09c419504acd73b14e4f9616f021dc",
          "sha256": "b45f20515e53119e3e6565acbb2aa5969ca0895b0d5dc313106f65b31d1229b3"
        },
        "downloads": -1,
        "filename": "python-cryptapi-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0d09c419504acd73b14e4f9616f021dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4176,
        "upload_time": "2023-03-09T13:07:06",
        "upload_time_iso_8601": "2023-03-09T13:07:06.270848Z",
        "url": "https://files.pythonhosted.org/packages/ed/f1/fa4facce6934fa29cf41a878928b87d827b2ef7e0e308f5af927af66e289/python-cryptapi-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edf1fa4facce6934fa29cf41a878928b87d827b2ef7e0e308f5af927af66e289",
        "md5": "0d09c419504acd73b14e4f9616f021dc",
        "sha256": "b45f20515e53119e3e6565acbb2aa5969ca0895b0d5dc313106f65b31d1229b3"
      },
      "downloads": -1,
      "filename": "python-cryptapi-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0d09c419504acd73b14e4f9616f021dc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4176,
      "upload_time": "2023-03-09T13:07:06",
      "upload_time_iso_8601": "2023-03-09T13:07:06.270848Z",
      "url": "https://files.pythonhosted.org/packages/ed/f1/fa4facce6934fa29cf41a878928b87d827b2ef7e0e308f5af927af66e289/python-cryptapi-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}