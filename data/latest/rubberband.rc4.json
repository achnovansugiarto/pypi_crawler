{
  "info": {
    "author": "Julian Porter",
    "author_email": "julian@porternet.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Artistic Software",
      "Topic :: Multimedia :: Sound/Audio",
      "Topic :: Multimedia :: Sound/Audio :: Analysis",
      "Topic :: Multimedia :: Sound/Audio :: Editors",
      "Topic :: Multimedia :: Sound/Audio :: Speech"
    ],
    "description": "README for rubberband Python3 Module\n====================================\n\nIntroduction\n------------\n\n**rubberband** is a simple Python3 wrapper around the well-known librubberband_ sound stretching / pitch-shifting library.  Unlike existing Python wrappers (e.g. pyrubberband_) this is a true native extension.\n\nThe initial release provides a single function that will stretch a mono audio stream by multiplying its duration by a provided factor.  Future versions may include pitch shifting, and more complex processing based on data maps.\n\nInstallation\n------------\n\nThe module is available only for MacOS and Linux.  The code may compile on Windows, but it has not been tested. Dependencies are:\n\n - Python 3 (preferably 3.6 or greater)\n - librubberband_ (> 1.8)\n - libsndfile_ (> 1.0)\n\nAssuming these dependencies are met, then installation is simplicity itself::\n\n    pip3 install rubberband\n\n\nThe install script does check for the required libraries, and will complain vociferously if they cannot be located.  Information on obtaining them is available from the links above.\n\nAPI\n---\n\nAudio stream formatting\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe module exposes a single function **rubberband.stretch** which applies the librubberband_ algorithm to a mono audio stream, encoded in one of the following formats, each of which has a corresponding constant, as set out in the third column:\n\n.. table::\n\n   =======  ===========================  ================\n   Format   Description                  Constant\n   =======  ===========================  ================\n   PCM_U8   unsigned 8-bit               rubberband.uint8\n   PCM_S8   signed 8-bit                 rubberband.int8\n   PCM_16   signed 16-bit                rubberband.int16\n   PCM_32   signed 32-bit                rubberband.int32\n   FLOAT    *normalised* 32-bit float    rubberband.float32\n   =======  ===========================  ================\n\nNote that floating point data is assumed to be normalised, so all samples lie in the range [-1,1).\n\nAudio data can be passed to **rubberband.stretch** in any of three ways:\n\n  **Typed array**\n    A 1-dimensional NUMPY_ typed **array** object, whose **dtype** is one of ``numpy.uint8``,\n    ``numpy.int8``, ``numpy.int16``, ``numpy.int32`` or ``numpy.float32``.  The type of the audio\n    data is deduced from this, using the strangely convenient fact that if **T** is one of ``uint8``, \n    ``int8``, ``int16``, ``int32``, ``float32`` then\n\n    .. code:: python\n\n      numpy.dtype(numpy.T).num == rubberband.T \n\n  **List**\n    A simple Python **list**, all of whose elements are of a type implicitly convertible to **float**.  \n    In this case, the audio format cannot be deduced, so it must be specified using the *format* argument\n    to **rubberband.stretch** (see below).\n\n  **Raw bytestream**\n    A Python **bytes** object, whose content is the raw PCM byte stream (note: audio file metadata, \n    e.g. WAV file headers, must be stripped, so only PCM data remains).  Again, in this case, the audio\n    format cannot be deduced, so it must be specified using the *format* argument\n    to **rubberband.stretch** (see below).\n\nIn all cases, the output from **rubberband.stretch** has the same PCM format, and is stored in the same\nkind of object, as the input.  So, for example, given a **bytes** object representing a **PCM_16** \naudio channel, **rubberband.stretch** returns **bytes** object representing a **PCM_16** \nstretched audio channel.\n\nMethod signature\n~~~~~~~~~~~~~~~~\n\n\n**rubberband.stretch** (*input*, *format* = **rubberband.float32**, *rate* = **48000** , *ratio* = **1** , *crispness* = **5** , *formants* = **False**, *precise* = **True** )\n\nArguments   \n\n      *input*\n            The input is assumed to represent a single channel of PCM audio data, encoded with one \n            of the schemes listed above.  It can be any of the types set out above. \n\n      *format*\n            The PCM format of the data, specified using one of the constants set out above.  This \n            value is *ignored* if *input* is a NUMPY typed array, in which case the format is deduced \n            from its **dtype**.\n\n      *rate*\n            The frame rate of the input audio stream (so bit rate divided by sample size).\n\n      *ratio*\n            The ratio of output length to input length (in seconds / number of samples).\n\n      *crispness*\n            Integer 0 - 6, default 5: measure of performance - see the `rubberband-cli documentation`_ \n            for more details.\n\n      *formants*\n            Boolean, default **False** : whether or not to preserve formants - see the \n            `rubberband-cli documentation`_ for more details.\n            \n      *precise*\n            Boolean, default **True** : whether or not to use the precise stretching algorithm - \n            see the `rubberband-cli documentation`_ for more details.\n\nReturn value\n      An object containing the stretched audio data, represented using the same PCM encoding as the\n      *input*. Samples are normalised to lie in the expected range for the format. \n\n\nExample\n-------\n\n  .. code:: python\n\n   import rubberband \n   import soundfile\n\n   data,rate=soundfile.read('infile.wav',dtype='int16')\n   bitrate=rate*16\n   nFrames=len(data)\n   print(f'Raw input type is : {type(data)}')\n\n   oldDuration=nFrames/rate\n   newDuration=6\n   ratio=newDuration/oldDuration\n  \n   out=rubberband.stretch(data,rate=rate,ratio=ratio,crispness=5,formants=False,precise=True)\n   soundfile.write('outfile.wav',out,rate,'PCM_16')\n\n\n\n\n.. _librubberband: https://breakfastquay.com/rubberband/\n.. _pyrubberband: https://pypi.org/project/pyrubberband/\n.. _libsndfile: http://www.mega-nerd.com/libsndfile/\n.. _`rubberband-cli documentation`: https://breakfastquay.com/rubberband/usage.txt\n.. _NUMPY: https://numpy.org",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/jdstmporter/rband.git",
    "keywords": "audio stretch,rubberband,voice processing",
    "license": "BSD3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rubberband",
    "package_url": "https://pypi.org/project/rubberband/",
    "platform": "MacOS",
    "project_url": "https://pypi.org/project/rubberband/",
    "project_urls": {
      "Homepage": "https://gitlab.com/jdstmporter/rband.git"
    },
    "release_url": "https://pypi.org/project/rubberband/1.0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Simple wrapper for librubberband",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7050579,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8d9e50d9605cc28fa891831b36673a1b62a1ef1ba508a96b28ec906df31c18d8",
          "md5": "b733b73c7da01e3c77afcea088d59d8d",
          "sha256": "389f450e2b139b72c00254004e3cc99eb1de45d5162e537f5a4f285aa01006cf"
        },
        "downloads": -1,
        "filename": "rubberband-0.2.0-cp37-cp37m-macosx_10_9_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b733b73c7da01e3c77afcea088d59d8d",
        "packagetype": "bdist_wheel",
        "python_version": "cp37",
        "requires_python": null,
        "size": 19105,
        "upload_time": "2019-11-22T18:39:05",
        "upload_time_iso_8601": "2019-11-22T18:39:05.037980Z",
        "url": "https://files.pythonhosted.org/packages/8d/9e/50d9605cc28fa891831b36673a1b62a1ef1ba508a96b28ec906df31c18d8/rubberband-0.2.0-cp37-cp37m-macosx_10_9_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cdba78184d65f8f0d5773f720a8ae9c99f8f2a34ea536ec3393888b4dff700c1",
          "md5": "619a4e68a670d5eed102be57544a931e",
          "sha256": "9f01681ce89555283bb0d38ff900571a18fe9f9e2e518c66145fa5f63087b847"
        },
        "downloads": -1,
        "filename": "rubberband-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "619a4e68a670d5eed102be57544a931e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 93179,
        "upload_time": "2019-11-22T18:39:07",
        "upload_time_iso_8601": "2019-11-22T18:39:07.586781Z",
        "url": "https://files.pythonhosted.org/packages/cd/ba/78184d65f8f0d5773f720a8ae9c99f8f2a34ea536ec3393888b4dff700c1/rubberband-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5a1e0826cbeee7dfcb3827ef97e31d50573c74ce3a31c77b8f35eafb48bf2ea2",
          "md5": "4be9ea1401b3b509f952b817f490efc6",
          "sha256": "8b58c946699b57bd3cf87030dc7bcfc2959025a39e2bf43e23c6ddb888697669"
        },
        "downloads": -1,
        "filename": "rubberband-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4be9ea1401b3b509f952b817f490efc6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 99319,
        "upload_time": "2020-04-08T21:57:20",
        "upload_time_iso_8601": "2020-04-08T21:57:20.085804Z",
        "url": "https://files.pythonhosted.org/packages/5a/1e/0826cbeee7dfcb3827ef97e31d50573c74ce3a31c77b8f35eafb48bf2ea2/rubberband-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9abb2193c0e425a60a743c3ad9a7e7ae0bea5a22c1b6ca8734a43e655898d2ac",
          "md5": "ddd6ec2c0378687e79b84a9f7a105d03",
          "sha256": "34a51f31fb944403e0899b948d5a727d1535745a9e78e5c76e44aa980dca0873"
        },
        "downloads": -1,
        "filename": "rubberband-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ddd6ec2c0378687e79b84a9f7a105d03",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 99445,
        "upload_time": "2020-04-09T16:37:13",
        "upload_time_iso_8601": "2020-04-09T16:37:13.839246Z",
        "url": "https://files.pythonhosted.org/packages/9a/bb/2193c0e425a60a743c3ad9a7e7ae0bea5a22c1b6ca8734a43e655898d2ac/rubberband-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2840955257a03c46146fe2fc523323bbf9f0a7dbc84812dc4f0161c622b0a951",
          "md5": "424cbcf22ac3f66b2db3b6ca09defb2f",
          "sha256": "c569c1017be16f712a26cce45914ee6da3832f062fedd2aa08e2377580a93e12"
        },
        "downloads": -1,
        "filename": "rubberband-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "424cbcf22ac3f66b2db3b6ca09defb2f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 99425,
        "upload_time": "2020-04-18T23:07:04",
        "upload_time_iso_8601": "2020-04-18T23:07:04.635495Z",
        "url": "https://files.pythonhosted.org/packages/28/40/955257a03c46146fe2fc523323bbf9f0a7dbc84812dc4f0161c622b0a951/rubberband-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2840955257a03c46146fe2fc523323bbf9f0a7dbc84812dc4f0161c622b0a951",
        "md5": "424cbcf22ac3f66b2db3b6ca09defb2f",
        "sha256": "c569c1017be16f712a26cce45914ee6da3832f062fedd2aa08e2377580a93e12"
      },
      "downloads": -1,
      "filename": "rubberband-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "424cbcf22ac3f66b2db3b6ca09defb2f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 99425,
      "upload_time": "2020-04-18T23:07:04",
      "upload_time_iso_8601": "2020-04-18T23:07:04.635495Z",
      "url": "https://files.pythonhosted.org/packages/28/40/955257a03c46146fe2fc523323bbf9f0a7dbc84812dc4f0161c622b0a951/rubberband-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}