{
  "info": {
    "author": "Guardian",
    "author_email": "zhling2012@live.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "python GUI 流程操作工具\n====\n\n## 介绍：  \n\n<ul>  \n    <li>    <h5>让你的双手从重复的敲键盘点鼠标中解放！</h5></li>    \n    <li>    <h5>基于 pyautogui 开发，加入了图像匹配和颜色匹配功能，构造了使用鼠标键盘和屏幕进行自动流程操作的微平台</h5></li>    \n    <li>    <h5>用 json 文件进行任务安排，文件具体格式见下方</h5></li>    \n    <li>    <h5>在 linux 上功能更丰富</h5></li>    \n</ul>  \n\n---\n\n### 简要使用说明：\n\n#### &nbsp;&nbsp; 安装：  \n\n```\n$ pip install flowoperate  \n```\n\n#### &nbsp;&nbsp; 终端命令：    \n\n```  \n$ flowopt /path_to_your/mission1.json [-l --loop] [-s --start_time] [-e --end_time]\n  \n# 显示帮助：  \n$ flowopt -h  \n```    \n\n<ul style=\"font-size:30\">  \n    <li>     <h5>参数解释：</h5>   \n        <ul style=\"none\">  \n<li><b>-l --loop</b> 是否循环执行</li>  \n<li><b>-s --start_time</b> 循环执行的开始时间</li>  \n<li><b>-e --end_time</b> 循环执行的结束时间</li>  \n        </ul></li>  \n</ul>  \n  \n\n#### &nbsp;&nbsp; 代码中调用：    \n  \n```  \nfrom flow_operate.flow_operation import FlowTool  \n  \n# 参数 operate_list 即为上面 json 文件 loads 后的列表\nft = FlowTool(operate_list=mission_list)  \nft.start()  \n```\n\n#### &nbsp;&nbsp; json文件（任务文件）格式：  \n```  \n[  \n  {  \n    \"name\": \"step1: search image and click\",  \n    \"method\": \"SearchClick\",  \n    \"(other_args)\": \"......\",  \n  },\n  {  \n    \"name\": \"step2: search image and drag\",  \n    \"method\": \"SearchDrag\",  \n    \"(other_args)\": \"......\",  \n  },\n  {......}\n]\n```  \n\n### &nbsp;&nbsp; 目前支持的 step 方法：  \n#### &nbsp;&nbsp; &nbsp;&nbsp; 目前集成的所有方法：\n|method|说明|\n|--|--|\n|[SearchClick](#SearchClick)| 搜寻目标并点击 |\n|[SearchDrag](#SearchDrag)| 搜寻目标并拖动 |\n|[MulSearchClick](#MulSearchClick)| SearchClick 的批量 \"或\" 搜索匹配方法 |\n|[MulSearchDrag](#MulSearchDrag)| SearchDrag 的批量 \"或\" 搜索匹配方法 |\n|[EnterUrl](#EnterUrl)| linux 专用，打开 chrome 浏览器，输入指定的 url 并访问 |\n|[WaitIcon](#WaitIcon)| 等待屏幕出现某个图标 |\n|[WaitIconGone](#WaitIconGone)| 等待屏幕的某个图标消失 |\n|[SaveWithVim](#SaveWithVim)| linux 专用，打开终端，使用 vim 打开指定的文件，写入剪贴板内容 |\n|[TermCommand](#TermCommand)| linux 专用，打开终端执行命令 |\n|[Click](#Click)| 模拟鼠标点击 |\n|[Drag](#Drag)| 模拟鼠标拖动 |\n|[HotKey](#HotKey)| 按下快捷键 |\n|[InputABC](#InputABC)| 输入字符（仅限英文） |\n\n - <span id=\"SearchClick\">SearchClick</span></br>\n  <span>搜寻目标并点击</span></br>\n  <span>标准配置(json Object)，使用时请去掉后面的注释以防出错：</span></br>\n\n```  \n{\n  \"name\": \"step1: ......\",    //[缺省] 自定义的步骤名\n  \"method\": \"SearchClick\",    //[必须] 此步骤的方法，注意不要拼写错误\n  \"take_method\": \"random\",    //[缺省] 参数列表取出方式: only, order, all, random, pop_all, pop_order 和 pop_random\n                                //order: 按序循环使用参数列表的元素，每次运行到此步骤则自动取下一个\n                                //all: 每次都全部取出使用\n                                //[默认] random: 每次都是随机取出使用\n                                //only: 每次只取第一个\n                                //pop_all: 一次性不放回取出全部，下次运行到此步骤自动跳出\n                                //pop_order: 按序不放回取出一个，直至用完跳出\n                                //pop_random: 随机不放回取出一个，直至用完跳出\n  \"data_list\": [              //[必须] 本步骤需要使用的参数资源列表，放入直接的图片文件路径列表\n    \"/path/to/icon1.png\",          \n    \"/path/to/resoures_file.txt\", // 但如果文件太多，可以放在一个或多个txt文件内，一行一个，然后将txt文件名放入列表\n    \"resource_redis_key1\",        // 也可以将资源文件名放入 redis 数据库内,在此处填入对应的 key，注意只能是其中一种方式,取决于下面 \"data_list_type\" 的值\n    \"......\"\n  ],\n  \"data_list_type\": \"array\",//[缺省] 上面资源列表的类型，默认 \"array\", 同时也支持文件路径\"file\"和数据库\"redis\"\n                               // 当 data_list_type 为 \"array\" 的时候, data_list 为直接的资源列表;\n                               // 当值为 \"file\" 时, data_list 内放入存放资源的文件全路径的列表;\n                               // 当值为 \"redis\" 时, data_list 内放入存放资源的 redis key\n  \"search_method\": \"shape\", //[缺省] 搜寻方式，\"shape\" 或者 \"color\"\n                                //[默认] shape: 按资源列表的图像形状搜寻\n                                // color: 按图像颜色搜寻\n  \"match_options\": {        //[缺省] 图像匹配的选项\n  \n    //如果是 search_method 是 shape 的方式：\n    \"threshold_value\": 90,            //[缺省] 匹配的阈值，默认 90\n    \"as_gray\": true,                //[缺省] 以灰度方式匹配（影响速度大，准确度有所下降）默认 true\n    \"as_binary\": false,                //[缺省] 以二值化方式匹配（影响速度大，准确度下降大）默认 false\n    \"img_shape_times\": 1.0,            //[缺省] 缩放率，0-n，以缩放n倍的方式匹配（影响速度较大，准确度下降大），默认 1.0 即不缩放\n    \"check_region\": [0,0,1920,1080] //[缺省] 指定搜索范围，[屏幕左距离, 屏幕上距离, 宽度, 高度]，默认整个屏幕搜索（影响速度大，准确度看查找范围对不对）\n\n    //如果是 search_method 是 color 的方式：\n    \"color_tolerance\": 0,            //[缺省] 色彩容差，1-128，容差越大包含的颜色范围越广\n    \"color_purity\": 1,                //[缺省] 色彩纯净度，大于1的整数，根据图像大小和复杂性调整，推荐一般图片设置为 1-50 之间\n    \"choice_method\": \"random\",        //[缺省] 匹配中多个点时的取点方式，默认随机取点，填其他字符则取第一个匹配到的点\n    \"check_region\": [0,0,1920,1080] //[缺省] 同上\n  },\n  \"deviation\": [0, 0]        //[缺省] 搜寻到目标后，点击时的偏移位置，[往上偏移量(负数往下), 往右偏移量(负数往左)]\n  \"speed\": 0.5,              //[缺省] 搜寻到目标后点击的速度，默认0.5s\n  \"click_times\": 1,            //[缺省] 点击次数，默认 1 次\n  \"click_sep\": 0.2,            //[缺省] 多次点击的间隔时间，默认 0.2s\n  \"pre_delay\": 0,              //[缺省] 本步骤开始前的等待时间，默认 0\n  \"sub_delay\": 0.2,          //[缺省] 本步骤开始前的等待时间，默认 0\n  \"search_only\": false,      //[缺省] 只搜寻，不点击，将搜寻坐标传入下一步骤，默认 false\n  \"not_locate\": \"exit\"      //[缺省] 若无法匹配时的方法，默认 \"exit\"(退出)，其他选项：jumpN，backN，nextN\n                                //[默认] exit，匹配不中则退出整个流程\n                                //jumpN，N 为整数，跳到第 N 步\n                                //backN，N 为整数，以当前步骤为基数，回退 N 步\n                                //nextN，N 为整数，以当前步骤为基数，往下 N 步\n}\n```\n - <span id=\"SearchDrag\">SearchDrag</span>  \n```  \n{\n  \"name\": \"step1: ......\",    //[缺省] 同 SearchClick\n  \"method\": \"SearchDrag\",    //[必须] 此步骤的方法，注意不要拼写错误\n  \"take_method\": \"random\",    //[缺省] 同 SearchClick\n  \"data_list\": [            //[必须] 同 SearchClick\n    \"/path/to/icon1.png\",\n    \"/path/to/resoures_file.txt\",\n    \"......\"\n  ],\n  \"data_list_type\": \"array\",//[缺省] 同 SearchClick\n  \"search_method\": \"shape\", //[缺省] 同 SearchClick\n  \"match_options\": {        //[缺省] 同 SearchClick\n    //如果是 search_method 是 shape 的方式：\n    \"threshold_value\": 90,\n    \"as_gray\": true,\n    \"as_binary\": false,\n    \"img_shape_times\": 1.0,\n    \"check_region\": [0,0,1920,1080]\n    \n    //如果是 search_method 是 color 的方式：\n    \"color_tolerance\": 0,\n    \"color_purity\": 1,\n    \"choice_method\": \"random\",\n    \"check_region\": [0,0,1920,1080]\n  },\n  \"deviation\": [0, 0]        //[缺省] 同 SearchClick\n  \"speed\": 0.5,              //[缺省] 同 SearchClick\n  \"start_position\": [0,0],    //[缺省] 拖动的开始位置，默认本步骤搜索到的位置，可以是 [X, Y] 的形式，X、Y可以是整数坐标，或者 \"pre_step\"\n                                //[\"pre_step\", Y] 的形式：x坐标由上一步骤传递下来的，y坐标由本步骤定位\n                                //[\"pre_step\", \"pre_step\"] 的形式：x、y坐标均由上一步传递\n  \"end_position\": [0,0],    //[缺省] 拖动的结束位置，默认本步骤搜索到的位置，格式同 start_position\n  \"pre_delay\": 0,              //[缺省] 同 SearchClick\n  \"sub_delay\": 0.2,          //[缺省] 同 SearchClick\n  \"search_only\": false,      //[缺省] 同 SearchClick\n  \"not_locate\": \"exit\"      //[缺省] 同 SearchClick\n}\n```\n - <span id=\"MulSearchClick\">MulSearchClick</span></br>\n  <span>SearchClick 的批量 \"或\" 搜索匹配方法，即取出全部的 data_list 参数资源进行批量搜索，直到搜索中其中一个，或者全部都不中；</span></br>\n  <span>除了 \"take_method\" 默认为 \"all\" 以外，其他参数与 SearchClick 一样；</span></br>\n  <span>MulSearchClick 方法比使用 SearchClick 时设置 \"take_method\" 为 \"all\" 要快，在批量\"或\"搜索时建议使用前者</span></br>\n```\n{\n  \"name\": \"step1: ......\",        //[缺省] 同 SearchClick\n  \"method\": \"MulSearchClick\",\n  \"......\": \".......\"            //其他同 SearchClick\n}\n```\n - <span id=\"MulSearchDrag\">MulSearchDrag</span></br>\n  <span>SearchDrag 的批量 \"或\" 搜索匹配方法，即取出全部的 data_list 参数资源进行批量搜索，直到搜索中其中一个，或者全部都不中；  </span></br>\n  <span>除了 \"take_method\" 默认为 \"all\" 以外，其他参数与 SearchDrag 一样；  </span></br>\n  <span>MulSearchDrag 方法比使用 SearchDrag 时设置 \"take_method\" 为 \"all\" 要快，在批量\"或\"搜索时建议使用前者  </span></br>\n```\n{\n  \"name\": \"step1: ......\",\n  \"method\": \"MulSearchDrag\",\n  \"......\": \".......\"            //其他同 SearchDrag\n}\n```  \n - <span id=\"EnterUrl\">EnterUrl</span></br>\n  <span>打开 chrome 浏览器，输入指定的 url 并访问  </span></br>\n```\n{\n  \"name\": \"step1: ......\",\n  \"method\": \"EnterUrl\",\n  \"chrome_icon\": \"/path/to/chrome_icon.png\",    //[缺省] chrome 浏览器的截图图标，默认使用内置的图片模板\n  \"data_list\": [                                //[必须] url 列表，或放 url 的txt文件，注意每行一个\n        \"http://meesee.top\",\n        \"http://meesee.top/ip\",\n        \"/path/to/url_file.txt\"\n    ],\n  \"data_list_type\": \"array\",                    //[缺省] 同上\n  \"take_method\": \"order\",                        //[缺省] 同上\n  \"pre_delay\": 0,                                  //[缺省] 同上\n  \"sub_delay\": 0,                                  //[缺省] 同上\n  \"search_only\": false,                          //[缺省] 同上\n  \"not_locate\": \"exit\"                          //[缺省] 同上\n}\n```\n - <span id=\"WaitIcon\">WaitIcon</span></br>\n<span>等待屏幕出现某个图标</span></br>\n```\n{\n  \"name\": \"step1: ......\",\n  \"method\": \"WaitIcon\",\n  \"match_options\": {            //[缺省] 搜索匹配选项，解释同上\n        \"threshold_value\": 90,\n        \"as_gray\": true,\n        \"as_binary\": false,\n        \"img_shape_times\": 1.0,\n        \"check_region\": [0,0,1920,1080]\n    },\n  \"data_list\": [                //[必须] 图标文件列表，或放图标路径的txt文件，注意每行一个\n        \"/path/to/icon1.png\",\n        \"/path/to/icons_file.txt\"\n    ],\n  \"data_list_type\": \"array\",    //[缺省] 同上\n  \"take_method\": \"order\",        //[缺省] 同上\n  \"interval\": 1.0,                //[缺省] 搜索间隔，默认 1.0s\n  \"after_showed\": \"next1\"        //[缺省] 若匹配到了则往下多少步，默认 1 步\n  \"time_out\": 120,                //[缺省] 超时时间，超过此时间没有匹配到则进入超时逻辑（if_timeout），默认 120s\n  \"if_timeout\": \"exit\",            //[缺省] 若超时则退出或者跳转到哪一步（jumpN，backN，nextN），同 SearchClick 的 not_locate，默认 exit\n  \"pre_delay\": 0,                  //[缺省] 同上\n  \"sub_delay\": 0,                  //[缺省] 同上\n  \"search_only\": false,          //[缺省] 同上\n  \"not_locate\": \"exit\"          //[缺省] 同上\n}\n```\n - <span id=\"WaitIconGone\">WaitIconGone</span></br>\n<span>等待屏幕的某个图标消失</span></br>\n```\n{\n  \"name\": \"step1: ......\",\n  \"method\": \"WaitIconGone\",\n  \"match_options\": {            //[缺省] 搜索匹配选项，解释同上\n        \"threshold_value\": 90,\n        \"as_gray\": true,\n        \"as_binary\": false,\n        \"img_shape_times\": 1.0,\n        \"check_region\": [0,0,1920,1080]\n    },\n  \"data_list\": [                //[必须] 图标文件列表，或放图标路径的txt文件，注意每行一个\n        \"/path/to/icon1.png\",\n        \"/path/to/icons_file.txt\"\n    ],\n  \"data_list_type\": \"array\",    //[缺省] 同上\n  \"take_method\": \"order\",        //[缺省] 同上\n  \"interval\": 1.0,                //[缺省] 搜索间隔，默认 1.0s\n  \"after_gone\": \"next1\"            //[缺省] 若图标消失了则往下多少步，默认 1 步\n  \"time_out\": 120,                //[缺省] 超时时间，超过此时间没有消失则进入超时逻辑（if_timeout），默认 120s\n  \"if_timeout\": \"exit\",            //[缺省] 若超时则退出或者跳转到哪一步（jumpN，backN，nextN），同 SearchClick 的 not_locate，默认 exit\n  \"pre_delay\": 0,                  //[缺省] 同上\n  \"sub_delay\": 0,                  //[缺省] 同上\n  \"search_only\": false,          //[缺省] 同上\n  \"not_locate\": \"exit\"          //[缺省] 同上\n}\n```\n - <span id=\"SaveWithVim\">SaveWithVim</span></br>\n<span>linux 系统专用方法，打开终端，使用 vim 打开指定的文件，写入剪贴板内容</span></br>\n```\n{\n  \"name\": \"step1: ......\",\n  \"method\": \"WaitIconGone\",\n  \"file_full_path\": \"/path/to/save/test.file\",    //[必须] 保存的文件名\n                                                    //若文件名需要携带上一步的结果，则在需要携带的地方加上 \"[NAME]\"，系统会自动替换\n                                                    //例如 \"/home/my_file_[NAME].txt\"，而上一步传递下来的结果有{\"flow_name\": \"001\"}，则此文件名会替换为 \"/home/my_file_001.txt\"\n  \"pre_delay\": 0,                  //[缺省] 同上\n  \"sub_delay\": 0,                  //[缺省] 同上\n  \"after\": \"next1\"              //[缺省] 保存结束后跳转到下面的第几步，还有 jumpN，backN，nextN，与上面解释一致\n}\n```\n - <span id=\"TermCommand\">TermCommand</span></br>\n<span>linux 专用方法，打开终端执行命令</span></br>\n```\n{\n  \"name\": \"step1: ......\",\n  \"method\": \"TermCommand\",\n  \"root_password\": \"xxxxxx\",    //[缺省] root用户密码，如果执行的指令需要用到超级用户的话，则此项必须\n  \"data_list\": [                //[必须] cmd 列表，或者放 cmd 命令的txt文件名\n        \"systemctl restart redis\",\n        \"systemctl stop redis\",\n        \"/path/to/cmd_list_file.txt\",\n    ],\n  \"take_method\": \"order\",        //[缺省] cmd列表取出方式，默认 order，其他的 only, all, random, pop_all, pop_order 和 pop_random，解释同上\n  \"data_list_type\": \"array\",    //[缺省] data_list 的元素的类型，file 或者 array，默认 array\n  \"after\": \"next1\",                //[缺省] 完成命令后跳到第几步，其他的 jumpN，backN，nextN，与上面解释一致\n  \"pre_delay\": 0,                  //[缺省] 同上\n  \"sub_delay\": 0,                  //[缺省] 同上\n}\n```\n - <span id=\"Click\">Click</span></br>\n<span>模拟鼠标点击</span></br>\n```\n{\n  \"name\": \"step1: ......\",\n  \"method\": \"Click\",\n  \"data_list\": [            //[必须] 点击位置的列表，可以是直接的x，y坐标，也可以是关键字\n                                //x可以是：left/center/right/pre_step或者整数 N(不超过屏幕宽度)\n                                //y可以是：top/center/bottom/pre_step或者整数 M(不超过屏幕高度)\n                                //设置为 pre_step 时，将使用从上一步流转下来的坐标，如果上步没有，则使用当前鼠标坐标\n        [\"right\", \"bottom\"],\n        [\"pre_step\", \"center\"],\n        [1000, 500]\n  ],\n  \"take_method\": \"only\",    //[缺省] 坐标列表取出方式，默认为 only，其他的 order, all, random, pop_all, pop_order 和 pop_random，解释同上\n  \"data_list_type\": \"array\",    //[缺省] data_list 的元素的类型，file 或者 array，默认 array\n  \"click_side\": \"left\",        //[缺省] 点击鼠标的左键 left 或者右键 right，或者中键 middle，默认左键\n  \"click_times\": 1,            //[缺省] 点击多少次，默认1次\n  \"click_sep\": 0.2,            //[缺省] 点击间隔，默认 0.2s\n  \"after\": \"next1\",            //[缺省] 完成命令后跳到第几步，其他的 jumpN，backN，nextN，与上面解释一致\n  \"pre_delay\": 0,              //[缺省] 同上\n  \"sub_delay\": 0,              //[缺省] 同上\n}\n```\n - <span id=\"Drag\">Drag</span></br>\n<span>模拟鼠标拖动</span></br>\n```\n{\n  \"name\": \"step1: ......\",\n  \"method\": \"Click\",\n  \"data_list\": [            //[必须] 拖动开始位置到结束位置的列表，可以是直接的x，y坐标，也可以是关键字\n                                //x可以是：left/center/right/pre_step或者整数 N(不超过屏幕宽度)\n                                //y可以是：top/center/bottom/pre_step或者整数 M(不超过屏幕高度)\n                                //设置为 pre_step 时，将使用从上一步流转下来的坐标，如果上步没有，则使用当前鼠标坐标\n        [[\"right\", \"bottom\"], [\"right\", \"top\"]],\n        [[\"center\", \"center\"], [\"pre_step\", \"center\"]],\n        [[1000, 500], [\"pre_step\", \"pre_step\"]]\n  ],\n  \"take_method\": \"only\",    //[缺省] 坐标列表取出方式，默认为 only，其他的 order, all, random, pop_all, pop_order 和 pop_random，解释同上\n  \"data_list_type\": \"array\",//[缺省] data_list 的元素的类型，file 或者 array，默认 array\n  \"drag_speed\": 0.5,        //[缺省] 拖动速度，默认0.5s\n  \"after\": \"next1\",            //[缺省] 完成命令后跳到第几步，其他的 jumpN，backN，nextN，与上面解释一致\n  \"pre_delay\": 0,              //[缺省] 同上\n  \"sub_delay\": 0,              //[缺省] 同上\n}\n```\n - <span id=\"HotKey\">HotKey</span></br>\n<span>按下快捷键</span></br>\n```\n{\n  \"name\": \"step1: ......\",\n  \"method\": \"HotKey\",\n  \"data_list\": [            //[必须] 快捷键名称列表，注意每个元素为一个快捷键名（对应键盘上的名称）\n        [\"ctrl\", \"c\"],            //复制\n        [\"ctrl\", \"atl\", \"t\"],    //打开终端（linux）\n        [\"A\"]                    //按下键盘的A键\n  ],\n  \"take_method\": \"order\",    //[缺省] 坐标列表取出方式，默认为 order，其他的 only, all, random, pop_all, pop_order 和 pop_random，解释同上\n  \"data_list_type\": \"array\",//[缺省] data_list 的元素的类型，file 或者 array，默认 array\n  \"after\": \"next1\",            //[缺省] 完成命令后跳到第几步，其他的 jumpN，backN，nextN，与上面解释一致\n  \"pre_delay\": 0,              //[缺省] 同上\n  \"sub_delay\": 0,              //[缺省] 同上\n}\n```\n - <span id=\"InputABC\">InputABC</span></br>\n<span>输入字符（仅限英文）</span></br>\n```\n{\n  \"name\": \"step1: ......\",\n  \"method\": \"InputABC\",\n  \"data_list\": [            //[必须] 需要输入的字符的列表，支持使用上一步的 flow_name 进行关键字替换\n        \"This is the test txt\",\n        \"can be any English words, sentences\",\n        \"LiMing's class number is [NAME]\"    //关键字替换\n  ],\n  \"take_method\": \"order\",    //[缺省] 坐标列表取出方式，默认为 order，其他的 only, all, random, pop_all, pop_order 和 pop_random，解释同上\n  \"data_list_type\": \"array\",//[缺省] data_list 的元素的类型，file 或者 array，默认 array\n  \"after\": \"next1\",            //[缺省] 完成命令后跳到第几步，其他的 jumpN，backN，nextN，与上面解释一致\n  \"pre_delay\": 0,              //[缺省] 同上\n  \"sub_delay\": 0,              //[缺省] 同上\n}\n```\n\n### 其他集成方法有待开发\n  \n\n***  \n  \n### 集成的测试小工具  \nflowopt 安装后附带两个终端工具  \n - ilocate  （形状定位工具）\n - clocate  （颜色定位工具）\n\n#### 1. 形状定位工具  \n```shell  \n$ ilocate template_img_path.jpg [-h] [-tr TEMPLATE_RESIZE] [-th THRESHOLD_VALUE] [-ag] [-ab] [-ip IMAGE_PATH] [-ir IMAGE_RESIZE] [-ssr SCREENSHOT_REGION] [-d DELAY]\n```  \n一个必要位置参数：\n - template_img_path  样本图片存放位置\n\n其他可选参数：\n - --help  -h：显示可用参数\n - --template_resize  -tr： 样本图片放大多少倍（大于零），小于1时缩小，大于1放大\n - --threshold_value  -th： 定位阈值（0-100）\n - --as_gray  -ag： 以灰度图像处理，速度会加快，准确率会稍微降低\n - --as_binary  -ab： 以二极图像处理，速度非常快，准确率比较低，适用于对比鲜明的图像\n - --image_path  -ip： 待匹配图片的路径，默认不需要传入，程序会截取当前屏幕作为输入\n - --image_resize  -ir： 待匹配图片放大多少倍，与 -tr 参数一样\n - --screenshot_region  -ssr： 待匹配图片的搜索范围，传入四组数字，'屏幕左距离,屏幕上距离,宽度,高度'，以英文逗号分隔\n - --delay  -d：延时多少秒开始\n \n 例如：\n```shell  \n$ ilocate 昵图网.png -ag -ssr 1920,100,1920,980\nsearching ...\ndelay [ 0.0 ] seconds ...\n[ 2021-11-12 16:03:47 ]\n     matching image: [ ScreenShot ]\n     using template: [ 昵图网.png ]\n     >>> locate success! score: 100.0\n```  \n<img src=\"https://guardian-angel.oss-cn-shenzhen.aliyuncs.com/flowopt/Figure_1.png\" alt=\"ilocate 样例\">\n\n#### 2. 颜色定位工具  \n```shell  \n$ clocate template_color_img_path.jpg [-h] [-ct COLOR_TOLERANCE] [-cp COLOR_PURITY] [-ip IMAGE_PATH] [-ir IMAGE_RESIZE] [-ssr SCREENSHOT_REGION] [-d DELAY]\n```  \n一个必要位置参数：\n - template_color_img_path  颜色样本图片存放位置，最好是纯色\n\n其他可选参数：\n - --help  -h：显示可用参数\n - --color_tolerance  -ct： 颜色容差（0-127）越大匹配范围越宽，越小越精细\n - --color_purity  -cp： 色彩纯净度，大于1的整数，根据图像大小和复杂性调整，推荐一般图片设置为 1-50 之间\n - --image_path  -ip： 待匹配图片的路径，默认不需要传入，程序会截取当前屏幕作为输入\n - --image_resize  -ir： 待匹配图片放大多少倍，与 -tr 参数一样\n - --screenshot_region  -ssr： 待匹配图片的搜索范围，传入四组数字，'屏幕左距离,屏幕上距离,宽度,高度'，以英文逗号分隔\n - --delay  -d：延时多少秒开始\n\n \n 例如：\n```shell  \n$ clocate 蓝色.png -ct 50 -cp 6 -ssr 2020,100,1820,880\nsearching ...\ndelay [ 0.0 ] seconds ...\npositions:\n    [904, 227]\n```  \n其中 positions 为匹配图像的中心点（可能有多个），即下图的黄色加号 + 的位置点\n\n<img src=\"https://guardian-angel.oss-cn-shenzhen.aliyuncs.com/flowopt/Figure_2.png\" alt=\"clocate 样例\">\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ga1008/flow_operate",
    "keywords": "",
    "license": "",
    "maintainer": "Guardian",
    "maintainer_email": "zhling2012@live.com",
    "name": "flowopt",
    "package_url": "https://pypi.org/project/flowopt/",
    "platform": "",
    "project_url": "https://pypi.org/project/flowopt/",
    "project_urls": {
      "Homepage": "https://github.com/ga1008/flow_operate"
    },
    "release_url": "https://pypi.org/project/flowopt/0.1.2/",
    "requires_dist": [
      "matplotlib",
      "numpy (==1.19.3)",
      "pyautogui",
      "requests",
      "basecolors (==0.0.2)",
      "pillow",
      "scikit-image",
      "redis"
    ],
    "requires_python": "",
    "summary": "control the mouse and keyboard todo repeat jobs",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12024303,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a661f2602694a4cf981ff374713222327a42785c813c78363c22eaeeef508d7c",
          "md5": "d0471abbc2347e54f523cc0fa804f0e0",
          "sha256": "69561f72af753d3a4d44e8c1e298fe8d79c35282af842d191315e6cb991200f6"
        },
        "downloads": -1,
        "filename": "flowopt-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0471abbc2347e54f523cc0fa804f0e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32117,
        "upload_time": "2021-11-15T08:14:15",
        "upload_time_iso_8601": "2021-11-15T08:14:15.948631Z",
        "url": "https://files.pythonhosted.org/packages/a6/61/f2602694a4cf981ff374713222327a42785c813c78363c22eaeeef508d7c/flowopt-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb18a88cedff30230d7e68b94bfa8188713d22f48643317ad4768cfed9ce8a60",
          "md5": "d836da67c7f9094d7af8495677f219b9",
          "sha256": "14c7f0f44f238ae8bd052a87ee2628d0975f5c1bdf5afa8a321f38d065a8576c"
        },
        "downloads": -1,
        "filename": "flowopt-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d836da67c7f9094d7af8495677f219b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32568,
        "upload_time": "2021-11-15T08:14:18",
        "upload_time_iso_8601": "2021-11-15T08:14:18.096823Z",
        "url": "https://files.pythonhosted.org/packages/bb/18/a88cedff30230d7e68b94bfa8188713d22f48643317ad4768cfed9ce8a60/flowopt-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a661f2602694a4cf981ff374713222327a42785c813c78363c22eaeeef508d7c",
        "md5": "d0471abbc2347e54f523cc0fa804f0e0",
        "sha256": "69561f72af753d3a4d44e8c1e298fe8d79c35282af842d191315e6cb991200f6"
      },
      "downloads": -1,
      "filename": "flowopt-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d0471abbc2347e54f523cc0fa804f0e0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 32117,
      "upload_time": "2021-11-15T08:14:15",
      "upload_time_iso_8601": "2021-11-15T08:14:15.948631Z",
      "url": "https://files.pythonhosted.org/packages/a6/61/f2602694a4cf981ff374713222327a42785c813c78363c22eaeeef508d7c/flowopt-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb18a88cedff30230d7e68b94bfa8188713d22f48643317ad4768cfed9ce8a60",
        "md5": "d836da67c7f9094d7af8495677f219b9",
        "sha256": "14c7f0f44f238ae8bd052a87ee2628d0975f5c1bdf5afa8a321f38d065a8576c"
      },
      "downloads": -1,
      "filename": "flowopt-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d836da67c7f9094d7af8495677f219b9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32568,
      "upload_time": "2021-11-15T08:14:18",
      "upload_time_iso_8601": "2021-11-15T08:14:18.096823Z",
      "url": "https://files.pythonhosted.org/packages/bb/18/a88cedff30230d7e68b94bfa8188713d22f48643317ad4768cfed9ce8a60/flowopt-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}