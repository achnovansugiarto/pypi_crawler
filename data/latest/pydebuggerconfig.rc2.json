{
  "info": {
    "author": "Microchip Technology",
    "author_email": "support@microchip.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Embedded Systems"
    ],
    "description": "# pydebuggerconfig\npydebuggerconfig is a utility for accessing the configuration information stored inside the PKOB nano on-board debugger,\ntypically found on Curiosity Nano kits.\n\n## Who should use pydebuggerconfig?\nKit designers who are ready to personalize their new kit\n\n## Prerequisite knowledge\nIn order for the PKOB nano on-board debugger to be aware of the properties and capabilities of the board in which\nit is mounted, as well as the target device it will operate with, a \"board configuration\" and \"device configuration\"\nis necessary.  This information is stored separately to the PKOB nano firmware, allowing field upgrades to be\nperformed with identical firmware on all deployed kits without any customization required.\n\nThe parameters stored in the configuration include PKOB nano features, program/debug interface capability,\nboard and manufacturer names and USB serial number as well as device specific parameters required for device\nprogramming through drag and drop.\n\nThe configuration information is stored in flash memory and can be modified freely.  However, it is recommended\nthat this information is programmed into the PKOB nano during the kit manufacturing process and not altered\nafter deployment.\n\nFor board specific configuration data there are two identical sections in the configuration memory.  One section\nis intended for factory settings programmed during production and one for settings that have been changed by the user.\nThe user section can be reverted to the factory settings by using the pydebuggerconfig utility.\n\n### Device and Board XML files\nThe actual configuration data to be programmed into the PKOB nano debugger's configuration space is stored in XML files,\none file for the data concerning the debugger and kit itself and one file with data concerning the target device.\nThe board related files are stored in the _pydebuggerconfig/board-configs_ folder and the device specific files\nare stored in the _pydebuggerconfig/device-configs_ folder.  pydebuggerconfig also supports XML files stored in\nother folders by providing the full path to the files.\n\nThe specifications for the config XML files are stored in the _pydebuggerconfig/config-specification_ folder.\nEach configuration file specifies which specification version to be used by the version registers in the XML file.\nThese are called CONFIG_FORMAT_MAJOR, CONFIG_FORMAT_MINOR and CONFIG_FORMAT_BUILD for board configuration files and\nDEVICE_CONFIG_MAJOR, DEVICE_CONFIG_MINOR and DEVICE_CONFIG_BUILD for device configuration files.  The version of\nthe specification files are given by the file name.  Example:\nA board config XML file with the following version registers\n```\n    <register name=\"CONFIG_FORMAT_MAJOR\" value=\"1\"/>\n    <register name=\"CONFIG_FORMAT_MINOR\" value=\"5\"/>\n    <register name=\"CONFIG_FORMAT_BUILD\" value=\"47\"/>\n```\nwill refer to specification files _board_config_defines-1.5.47.xml_ and _board_config_defines-1.5.47.xsd_\n\n## Usage\npydebuggerconfig can be used as a command-line interface or a library\n\n### Command-line\nfor help, use:\n```\npydebuggerconfig --help\n```\n\n#### Important note on order of command line arguments\nIt is recommended to put the action next to pydebuggerconfig on the command line.  This is in some cases important as\nsome of the command line arguments takes a list of values and if the action is placed next to such an argument the\naction will be interpreted as one of the argument values.  Example:\n```\nWRONG: pydebuggerconfig -b board-configs/PIC16F18446-CNANO.xml -d device-configs/PIC16F18446-device-blob.xml -p SERNUM write\n```\nThis will not work as the ``-p`` argument takes a list of registers, so ``write`` is interpreted as a register to preserve and no\naction is found\n```\nCORRECT: pydebuggerconfig write -b board-configs/PIC16F18446-CNANO.xml -d device-configs/PIC16F18446-device-blob.xml -p SERNUM\n```\nThis will work as the action comes first so it is not seen as a part of any of the arguments\n\n\n#### Action: read\nreads out the config from a board\n* use -f to read from factory section instead of user section for board config\n```\npydebuggerconfig read\n```\nThis will read out both board and device config from the kit and print it in a human readable format\n\n#### Action: write\nwrites config from board and/or device files\n* use -b to specify board config XML file\n* use -d to specify device config XML file\n* use -f to write to factory section in addition to user section of board config\n* use -p to preserve the value of one or more registers\n```\npydebuggerconfig write -b board-configs/ATmega4809-CNANO.xml -d device-configs/ATmega4809-device-blob.xml\n```\n\n#### Action: replace\nreplaces the value of one or more registers in config\n* use -r to specify which registers to update\n```\npydebuggerconfig replace -r SERNUM=MCHP0000111122223333 KITNAME=\"My new kit\"\n```\n\n#### Action: show\nto print the content of config xml files in a human readable format\n* use -b to specify board config XML file\n* use -d to specify device config XML file\n```\npydebuggerconfig show -b board-configs/ATmega4809-CNANO.xml -d device-configs/ATmega4809-device-blob.xml\n```\n\n#### Action: verify\nto compare the content of config XML files with the config on a kit\n* use -b to specify board config XML file\n* use -d to specify device config XML file\n```\npydebuggerconfig verify -b board-configs/ATmega4809-CNANO.xml -d device-configs/ATmega4809-device-blob.xml\n```\n\n#### Action: restore\nto restore board config to factory settings\n```\npydebuggerconfig restore\n```\nThis will copy the board config on the kit from the factory section to the user section\n\n#### Action: version-update\nto update the version of the board config in a kit\n```\npydebuggerconfig version-update\n```\nThis will update the version registers in the board config to the latest available spec version to allow new\nregisters to be supported. It  depends on back-compatibility, i.e. minor version updates only.  Note that this command\nwill not change the actual config settings.\n\n#### Action: generate-hex\nto generate a hex file from config xml files\n* use -b to specify board config XML file\n* use -d to specify device config XML file\n```\npydebuggerconfig generate-hex -b board-configs/ATmega4809-CNANO.xml -d device-configs/ATmega4809-device-blob.xml\n```\nThis will generate an Intel-hex file with the XML files contents.  This file can then be programmed directly into the debugger.\nThis feature is most useful when making pre-programmed debuggers.\n\n### Command-line switches\nMany of these switches are optional, and some only apply to certain actions.  See the action details above.\n* -b BOARD to specify board XML file.  Some actions require at least either a board XML file or a device XML file but\n    not necessarily both.  Can be either an absolute path or a path relative to pydebuggerconfig folder,\n    i.e. _board-configs/ATmega4809-CNANO.xml_.\n* -d DEVICE to specify device XML file.  Some actions require at least either a device XML file or a board XML file but\n    not necessarily both.  Can be either an absolute path or a path relative to pydebuggerconfig folder,\n    i.e. _device-configs/ATmega4809-device-blob.xml_.\n* -s SERIALNUMBER to specify the USB serial number of the kit/debugger to connect to when reading and writing config data.\n    This is not the USB serial number to program into the config, it is the serial number of the debugger before any config\n    has been written.  Sub-string matching on end of serial number is supported.  If this argument is omitted or set to an\n    empty string pydebuggerconfig will connect to any PKOB nano debugger connected to the host if there is only one connected.\n    If there are more than one matching debugger connected, pydebuggerconfig will just terminate with an error message.\n* -S CONFIG_SERIALNUMBER to specify the USB serial number to program to the kit.  The serial number should be 20 ASCII characters.\n    This option makes it possible to program a custom serial number to a kit while fetching the rest of the config parameters\n    from a board config XML file.  Without this option the serial number will be fetched from the board config XML file\n    (usually set to \"FFFFFFFFFFFFFFFFFFFF\").  Note that the new serial number will not latch (be used) until the debugger\n    is rebooted.\n* -p PRESERVE [PRESERVE ...] to specify registers that should not be updated when writing config data to the kit.  These registers\n    will keep their current values even if new values are given in the provided config XML files.\n* -r REGISTER [REGISTER ...] to specify register values to replace.  Only used with ``replace`` action.\n* -f to access factory board config section.  For ``read`` it means read factory board config while for ``write`` it means\n    write both factory and user board config.  There is no factory section for device config.\n* -v to enable verbose output.\n* -vv to enable debug output.\n* -V to print pydebuggerconfig version number and exit.\n* -R to print pydebuggerconfig release details and exit.\n\n### Library\npydebuggerconfig can be used as a library using its \"backend API\".  For example:\n```\n# Instantiate backend (if more than one kit is connected a serial number must be provided as parameter to the Backend constructor)\nfrom pydebuggerconfig.backend import Backend\npb = Backend()\n\n# Write board configuration data to a kit, preserving KITNAME and setting custom USB serial number\nboard_config_string = pb.write_board_config(\"board-configs/ATmega4809-CNANO.xml\", serial_number=\"MYSERIALNUMBER012345\", preserve=['KITNAME'])\nprint(\"Written board config to kit:\")\nprint(board_config_string)\n\n# Write device configuration data to a kit\ndevice_config_string = pb.write_device_config(\"device-configs/ATmega4809-device-blob.xml)\nprint(\"Written device config to kit:\")\nprint(device_config_string)\n\n# Update the name and serial number of a kit\nregisters = {'KITNAME': 'My new kitname', 'SERNUM': 'MYNEWSERIAL012345678'}\npb.replace(registers)\n\n# Read out and print board configuration data from a kit\nboard_config_string = pb.read_board_config_as_string(\"board-configs/ATmega4809-CNANO.xml\")\nprint(\"Board config from kit:\")\nprint(board_config_string)\n\n# Read out and print device configuration data from a kit\ndevice_config_string = pb.read_device_config_as_string()\nprint(\"Device config from kit:\")\nprint(device_config_string)\n\n# Print the pydebuggerconfig package version\nfrom pydebuggerconfig.version import VERSION as pydebuggerconfig_version\nprint(\"pydebuggerconfig version {}\".format(pydebuggerconfig_version))\n\n# In addition, the CLI-backend API is versioned for convenience\nprint(\"pydebuggerconfig backend API version: {}\".format(pb.get_api_version()))\n```\n\n## Dependencies\npydebuggerconfig depends on pyedbglib for its transport protocol.  pyedbglib requires a USB transport library like libusb.\nSee pyedbglib package for more information.\n\n## Supported tools\npydebuggerconfig only supports PKOB nano (nEDBG) debuggers.  These are typically found on Curiosity Nano kits.\n\n## Linux systems\nThis package uses pyedbglib and other libraries for USB transport and some udev rules are required.  For details see the pyedbglib package: https://pypi.org/project/pyedbglib\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.microchip.com",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pydebuggerconfig",
    "package_url": "https://pypi.org/project/pydebuggerconfig/",
    "platform": "",
    "project_url": "https://pypi.org/project/pydebuggerconfig/",
    "project_urls": {
      "Homepage": "http://www.microchip.com"
    },
    "release_url": "https://pypi.org/project/pydebuggerconfig/3.9.2.121/",
    "requires_dist": [
      "crcmod",
      "packaging",
      "IntelHex",
      "PyYAML",
      "appdirs",
      "pyedbglib (>=2.15)",
      "xmlschema (==1.0.18) ; python_version < \"3\"",
      "pathlib2 ; python_version < \"3\"",
      "xmlschema ; python_version > \"2\"",
      "pylint ; extra == 'dev'",
      "mock ; extra == 'dev'",
      "pytest ; extra == 'dev'"
    ],
    "requires_python": "",
    "summary": "A collection of tools to configure Microchip PKOB nano on-board debuggers",
    "version": "3.9.2.121",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12264342,
  "releases": {
    "3.5.4.86": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d755eb85f3e708996e4dcd1947a35f0e2891042d78a4a02c2bf7f3a423f35cb",
          "md5": "4f1739c47ad29925b9d5caaa9928eefb",
          "sha256": "1e6ee032bd69c07fd9cae080779dada7939a1a3dbcebd98971c75355a834c9af"
        },
        "downloads": -1,
        "filename": "pydebuggerconfig-3.5.4.86-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f1739c47ad29925b9d5caaa9928eefb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 153303,
        "upload_time": "2020-10-08T10:49:24",
        "upload_time_iso_8601": "2020-10-08T10:49:24.398158Z",
        "url": "https://files.pythonhosted.org/packages/1d/75/5eb85f3e708996e4dcd1947a35f0e2891042d78a4a02c2bf7f3a423f35cb/pydebuggerconfig-3.5.4.86-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.9.2.121": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9bbf5f135e3ec581e82cd6516d65dd5c0638e06c0f875a9baa1c1afe5a5ededa",
          "md5": "75326d1bbbbabd1dbde1d1034574f8eb",
          "sha256": "4ab1836965b43abf001706f5e3cc4e19f290b93bf766869c537ad916b93cb6f3"
        },
        "downloads": -1,
        "filename": "pydebuggerconfig-3.9.2.121-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75326d1bbbbabd1dbde1d1034574f8eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 217519,
        "upload_time": "2021-12-10T07:23:28",
        "upload_time_iso_8601": "2021-12-10T07:23:28.209524Z",
        "url": "https://files.pythonhosted.org/packages/9b/bf/5f135e3ec581e82cd6516d65dd5c0638e06c0f875a9baa1c1afe5a5ededa/pydebuggerconfig-3.9.2.121-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9bbf5f135e3ec581e82cd6516d65dd5c0638e06c0f875a9baa1c1afe5a5ededa",
        "md5": "75326d1bbbbabd1dbde1d1034574f8eb",
        "sha256": "4ab1836965b43abf001706f5e3cc4e19f290b93bf766869c537ad916b93cb6f3"
      },
      "downloads": -1,
      "filename": "pydebuggerconfig-3.9.2.121-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "75326d1bbbbabd1dbde1d1034574f8eb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 217519,
      "upload_time": "2021-12-10T07:23:28",
      "upload_time_iso_8601": "2021-12-10T07:23:28.209524Z",
      "url": "https://files.pythonhosted.org/packages/9b/bf/5f135e3ec581e82cd6516d65dd5c0638e06c0f875a9baa1c1afe5a5ededa/pydebuggerconfig-3.9.2.121-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}