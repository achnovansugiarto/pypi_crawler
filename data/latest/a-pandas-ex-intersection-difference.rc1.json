{
  "info": {
    "author": "Johannes Fischer",
    "author_email": "<aulasparticularesdealemaosp@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Editors :: Text Processing",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: General",
      "Topic :: Text Processing :: Indexing",
      "Topic :: Utilities"
    ],
    "description": "\n### Computes the intersection/symmetric difference of n DataFrames/Series\n\n\n\n#### Installation\n\n\n\n```python\n\npip install a-pandas-ex-intersection-difference\n\n```\n\n\n\n#### Usage\n\n\n\n```python\n\nfrom  a_pandas_ex_intersection_difference import pd_add_set\n\npd_add_set()\n\nimport pandas as pd\n\n```\n\n\n\n##### THE CODE ABOVE WILL ADD SOME METHODS TO! YOU CAN USE PANDAS LIKE YOU DID BEFORE, BUT YOU WILL HAVE A COUPLE OF METHODS MORE:\n\n\n\n\n\n\n\n- pandas.DataFrame.**ds_set_intersections** / pandas.Series.**ds_set_intersections**\n\n- pandas.DataFrame.**ds_set_symmetric_difference** / pandas.Series.**ds_set_symmetric_difference**\n\n- pandas.**DataFrame.ds_set_union** / **pandas.Series.ds_set_union**\n\n- pandas.DataFrame.**ds_value_counts_to_column** / pandas.Series.**ds_value_counts_to_column**\n\n\n\n\n\n\n\n##### pandas.DataFrame.**ds_set_intersections** / pandas.Series.**ds_set_intersections**\n\n\n\n```python\n\n    #Computes the intersection of n DataFrames/Series\n\n\n\n    #Example\n\n    df = pd.read_csv(\"https://raw.githubusercontent.com/pandas-dev/pandas/main/doc/data/titanic.csv\")\n\n\n\n    #Let's create some DataFrames with random data from df\n\n\n\n    df1 = df.sample(len(df) - len(df)//2).copy()\n\n    df2 = df.sample(len(df) - len(df)//2).copy()\n\n    df3 = df.sample(len(df) - len(df)//2).copy()\n\n    df4 = df.sample(len(df) - len(df)//2).copy()\n\n    df5 = df.sample(len(df) - len(df)//2).copy()\n\n\n\n    \n\n    df1.ds_set_intersections(df2) #Comparing 2 DataFrames\n\n    Out[14]:\n\n         Parch  PassengerId      Fare  Survived  ...  SibSp Embarked     Sex Cabin\n\n    0        1          802   26.2500         1  ...      1        S  female   NaN\n\n    1        0          506  108.9000         0  ...      1        C    male   C65\n\n    2        0          386   73.5000         0  ...      0        S    male   NaN\n\n    3        0          621   14.4542         0  ...      1        C    male   NaN\n\n    4        1          273   19.5000         1  ...      0        S  female   NaN\n\n    ..     ...          ...       ...       ...  ...    ...      ...     ...   ...\n\n    439      0          240   12.2750         0  ...      0        S    male   NaN\n\n    440      0          235   10.5000         0  ...      0        S    male   NaN\n\n    441      1          269  153.4625         1  ...      0        S  female  C125\n\n    442      0          394  113.2750         1  ...      1        C  female   D36\n\n    443      0          400   12.6500         1  ...      0        S  female   NaN\n\n    [444 rows x 12 columns]     \n\n    \n\n    \n\n    df1.ds_set_intersections(df2,df3)  #Comparing 3 DataFrames   \n\n    Out[15]:\n\n         Parch  PassengerId      Fare  Survived  ...  SibSp Embarked     Sex Cabin\n\n    0        0          506  108.9000         0  ...      1        C    male   C65\n\n    1        1          480   12.2875         1  ...      0        S  female   NaN\n\n    2        1          581   30.0000         1  ...      1        S  female   NaN\n\n    3        1          447   19.5000         1  ...      0        S  female   NaN\n\n    4        0           16   16.0000         1  ...      0        S  female   NaN\n\n    ..     ...          ...       ...       ...  ...    ...      ...     ...   ...\n\n    340      2          154   14.5000         0  ...      0        S    male   NaN\n\n    341      0          668    7.7750         0  ...      0        S    male   NaN\n\n    342      0          702   26.2875         1  ...      0        S    male   E24\n\n    343      0          610  153.4625         1  ...      0        S  female  C125\n\n    344      0          450   30.5000         1  ...      0        S    male  C104\n\n    [345 rows x 12 columns]    \n\n    \n\n    \n\n    df1.ds_set_intersections(df2,df3, df4)  #Comparing 4 DataFrames \n\n    Out[16]:\n\n         Parch  PassengerId      Fare  Survived  ...  SibSp Embarked     Sex Cabin\n\n    0        0          506  108.9000         0  ...      1        C    male   C65\n\n    1        1          581   30.0000         1  ...      1        S  female   NaN\n\n    2        0          283    9.5000         0  ...      0        S    male   NaN\n\n    3        0          488   29.7000         0  ...      0        C    male   B37\n\n    4        0          610  153.4625         1  ...      0        S  female  C125\n\n    ..     ...          ...       ...       ...  ...    ...      ...     ...   ...\n\n    227      0           23    8.0292         1  ...      0        Q  female   NaN\n\n    228      1          619   39.0000         1  ...      2        S  female    F4\n\n    229      2          473   27.7500         1  ...      1        S  female   NaN\n\n    230      0          253   26.5500         0  ...      0        S    male   C87\n\n    231      0          618   16.1000         0  ...      1        S  female   NaN\n\n    [232 rows x 12 columns]   \n\n    \n\n    \n\n    df1.ds_set_intersections(df2,df3, df4, df5)  #Comparing 5 DataFrames\n\n    Out[17]:\n\n         Parch  PassengerId      Fare  Survived  ...  SibSp Embarked     Sex Cabin\n\n    0        0          506  108.9000         0  ...      1        C    male   C65\n\n    1        1          581   30.0000         1  ...      1        S  female   NaN\n\n    2        1           17   29.1250         0  ...      4        Q    male   NaN\n\n    3        2           59   27.7500         1  ...      1        S  female   NaN\n\n    4        0          463   38.5000         0  ...      0        S    male   E63\n\n    ..     ...          ...       ...       ...  ...    ...      ...     ...   ...\n\n    140      2          166   20.5250         1  ...      0        S    male   NaN\n\n    141      0          705    7.8542         0  ...      1        S    male   NaN\n\n    142      1           51   39.6875         0  ...      4        S    male   NaN\n\n    143      0          833    7.2292         0  ...      0        C    male   NaN\n\n    144      2          154   14.5000         0  ...      0        S    male   NaN\n\n    [145 rows x 12 columns]\n\n```\n\n\n\n##### pandas.DataFrame.**ds_set_symmetric_difference** / pandas.Series.**ds_set_symmetric_difference**\n\n\n\n```python\n\n    #Computes the symmetric difference of n DataFrames/Series\n\n\n\n    #Example\n\n    df = pd.read_csv(\"https://raw.githubusercontent.com/pandas-dev/pandas/main/doc/data/titanic.csv\")\n\n\n\n    #Let's create some DataFrames with random data from df\n\n\n\n    df1 = df.sample(len(df) - len(df)//2).copy()\n\n    df2 = df.sample(len(df) - len(df)//2).copy()\n\n    df3 = df.sample(len(df) - len(df)//2).copy()\n\n    df4 = df.sample(len(df) - len(df)//2).copy()\n\n    df5 = df.sample(len(df) - len(df)//2).copy()\n\n\n\n    df1.ds_set_symmetric_difference(df2) #Comparing 2 DataFrames\n\n    Out[18]:\n\n         Parch  PassengerId      Fare  ...  Embarked     Sex        Cabin\n\n    0        0          567    7.8958  ...         S    male          NaN\n\n    1        0           46    8.0500  ...         S    male          NaN\n\n    2        2          342  263.0000  ...         S  female  C23 C25 C27\n\n    3        0          845    8.6625  ...         S    male          NaN\n\n    4        0            1    7.2500  ...         S    male          NaN\n\n    ..     ...          ...       ...  ...       ...     ...          ...\n\n    219      0          865   13.0000  ...         S    male          NaN\n\n    220      5          639   39.6875  ...         S  female          NaN\n\n    221      0           30    7.8958  ...         S    male          NaN\n\n    222      0          332   28.5000  ...         S    male         C124\n\n    223      0          884   10.5000  ...         S    male          NaN\n\n    [448 rows x 12 columns]\n\n    \n\n    \n\n    df1.ds_set_symmetric_difference(df2,df3)  #Comparing 3 DataFrames\n\n    Out[19]:\n\n         Parch  PassengerId     Fare  Survived  ...  SibSp Embarked     Sex Cabin\n\n    0        0          567   7.8958         0  ...      0        S    male   NaN\n\n    1        0           46   8.0500         0  ...      0        S    male   NaN\n\n    2        0          845   8.6625         0  ...      0        S    male   NaN\n\n    3        0          142   7.7500         1  ...      0        S  female   NaN\n\n    4        0          579  14.4583         0  ...      1        C  female   NaN\n\n    ..     ...          ...      ...       ...  ...    ...      ...     ...   ...\n\n    106      0          430   8.0500         1  ...      0        S    male   E10\n\n    107      1          363  14.4542         0  ...      0        C  female   NaN\n\n    108      1          531  26.0000         1  ...      1        S  female   NaN\n\n    109      0          748  13.0000         1  ...      0        S  female   NaN\n\n    110      0          876   7.2250         1  ...      0        C  female   NaN\n\n    [339 rows x 12 columns]\n\n    \n\n    \n\n    df1.ds_set_symmetric_difference(df2,df3,df4)  #Comparing 4 DataFrames\n\n    Out[20]:\n\n        Parch  PassengerId      Fare  Survived  ...  SibSp Embarked     Sex Cabin\n\n    0       0          567    7.8958         0  ...      0        S    male   NaN\n\n    1       0           46    8.0500         0  ...      0        S    male   NaN\n\n    2       0          142    7.7500         1  ...      0        S  female   NaN\n\n    3       0          579   14.4583         0  ...      1        C  female   NaN\n\n    4       0          365   15.5000         0  ...      1        Q    male   NaN\n\n    ..    ...          ...       ...       ...  ...    ...      ...     ...   ...\n\n    39      2          551  110.8833         1  ...      0        C    male   C70\n\n    40      0           19   18.0000         0  ...      1        S  female   NaN\n\n    41      0          615    8.0500         0  ...      0        S    male   NaN\n\n    42      0          204    7.2250         0  ...      0        C    male   NaN\n\n    43      1          375   21.0750         0  ...      3        S  female   NaN\n\n    [204 rows x 12 columns]\n\n    df1.ds_set_symmetric_difference(df2,df3,df4,df5)  #Comparing 5 DataFrames\n\n    Out[21]:\n\n        Parch  PassengerId     Fare  Survived  ...  SibSp Embarked     Sex Cabin\n\n    0       0          567   7.8958         0  ...      0        S    male   NaN\n\n    1       0          579  14.4583         0  ...      1        C  female   NaN\n\n    2       0          365  15.5000         0  ...      1        Q    male   NaN\n\n    3       0          644  56.4958         1  ...      0        S    male   NaN\n\n    4       0          708  26.2875         1  ...      0        S    male   E24\n\n    ..    ...          ...      ...       ...  ...    ...      ...     ...   ...\n\n    25      0          343  13.0000         0  ...      0        S    male   NaN\n\n    26      0          656  73.5000         0  ...      2        S    male   NaN\n\n    27      0          407   7.7500         0  ...      0        S    male   NaN\n\n    28      0          301   7.7500         1  ...      0        Q  female   NaN\n\n    29      0          819   6.4500         0  ...      0        S    male   NaN\n\n    [125 rows x 12 columns]\n\n\n\n    \n\n    \n\n        Parameters\n\n            args: Union[pd.Series, pd.DataFrame]\n\n                DataFrames or Series, how many you want\n\n            accept_df_with_different_columns: bool=True\n\n                Let's say you have one DataFrame whose columns are:  [Parch,  PassengerId, Fare, Survived, SibSp,Embarked,  Sex, Cabin]\n\n                If you want to compare it to: [Flight, Fare, Survived, SibSp,Embarked,  Sex, Cabin]\n\n                It won't work, unless you pass accept_df_with_different_columns=True\n\n                Only the columns that are in all dataframes will be compared\n\n\n\n        Returns\n\n            pd.DataFrame\n\n```\n\n\n\n##### pandas.**DataFrame.ds_set_union** / **pandas.Series.ds_set_union**\n\n\n\n```python\n\n    df = pd.read_csv(\"https://raw.githubusercontent.com/pandas-dev/pandas/main/doc/data/titanic.csv\")\n\n\n\n    #Let's create some DataFrames with random data from df\n\n\n\n    df1 = df.sample(len(df) - len(df)//2).copy()\n\n    df2 = df.sample(len(df) - len(df)//2).copy()\n\n    df3 = df.sample(len(df) - len(df)//2).copy()\n\n    df4 = df.sample(len(df) - len(df)//2).copy()\n\n    df5 = df.sample(len(df) - len(df)//2).copy()\n\n\n\n\n\n    df1[['PassengerId','Survived','Name']].ds_set_union(df2[['Pclass','Cabin','Name']])\n\n    Out[17]:\n\n                                                      Name\n\n    0                                Carbines, Mr. William\n\n    1                            Sundman, Mr. Johan Julian\n\n    2                                     Dimic, Mr. Jovan\n\n    3                          Harder, Mr. George Achilles\n\n    4                                 Rice, Master. Eugene\n\n    ..                                                 ...\n\n    887                       Carlsson, Mr. August Sigfrid\n\n    888                       Hoyt, Mr. Frederick Maxfield\n\n    889                      Somerton, Mr. Francis William\n\n    890                     Francatelli, Miss. Laura Mabel\n\n    891  Thayer, Mrs. John Borland (Marian Longstreth M...\n\n\n\n\n\n    #If, for whatever reason, you don't want to use pd.concat(), you can use this method.\n\n    #Don't use this method if you can use pd.concat\n\n\n\n        Parameters\n\n            args: Union[pd.Series, pd.DataFrame]\n\n                DataFrames or Series, how many you want\n\n            accept_df_with_different_columns: bool=True\n\n                Let's say you have one DataFrame whose columns are:  [Parch,  PassengerId, Fare, Survived, SibSp,Embarked,  Sex, Cabin]\n\n                If you want to compare it to: [Flight, Fare, Survived, SibSp,Embarked,  Sex, Cabin]\n\n                It won't work, unless you pass accept_df_with_different_columns=True\n\n                Only the columns that are in all dataframes will be compared\n\n\n\n        Returns\n\n            pd.DataFrame\n\n```\n\n\n\n##### pandas.DataFrame.**ds_value_counts_to_column** / pandas.Series.ds_value_counts_to_column\n\n\n\n```python\n\n    df = pd.read_csv(\"https://raw.githubusercontent.com/pandas-dev/pandas/main/doc/data/titanic.csv\")\n\n\n\n    df2.Sex.ds_value_counts_to_column()\n\n         PassengerId  Survived  Pclass  ...      Fare Cabin  Embarked\n\n    504          505         1       1  ...   86.5000   B79         S\n\n    781          782         1       1  ...   57.0000   B20         S\n\n    855          856         1       3  ...    9.3500   NaN         S\n\n    552          553         0       3  ...    7.8292   NaN         Q\n\n    777          778         1       3  ...   12.4750   NaN         S\n\n    ..           ...       ...     ...  ...       ...   ...       ...\n\n    756          757         0       3  ...    7.7958   NaN         S\n\n    224          225         1       1  ...   90.0000   C93         S\n\n    488          489         0       3  ...    8.0500   NaN         S\n\n    309          310         1       1  ...   56.9292   E36         C\n\n    581          582         1       1  ...  110.8833   C68         C\n\n    [446 rows x 12 columns]\n\n\n\n    df2.Sex.ds_value_counts_to_column()\n\n    Out[22]:\n\n    0      152\n\n    1      152\n\n    2      152\n\n    3      294\n\n    4      152\n\n          ...\n\n    441    294\n\n    442    294\n\n    443    294\n\n    444    152\n\n    445    152\n\n    Name: 0, Length: 446, dtype: int64\n\n\n\n    This method could also be useful, when you are comparing DataFrames, since it counts the different values in a Series\n\n    and returns a DataFrame that you can merge with your original DataFrame\n\n        Parameters\n\n            df: pd.Series\n\n        Returns\n\n            pd.DataFrame\n\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hansalemaos/a_pandas_ex_intersection_difference",
    "keywords": "pandas,set,compare,intersection,difference",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "a-pandas-ex-intersection-difference",
    "package_url": "https://pypi.org/project/a-pandas-ex-intersection-difference/",
    "platform": null,
    "project_url": "https://pypi.org/project/a-pandas-ex-intersection-difference/",
    "project_urls": {
      "Homepage": "https://github.com/hansalemaos/a_pandas_ex_intersection_difference"
    },
    "release_url": "https://pypi.org/project/a-pandas-ex-intersection-difference/0.1/",
    "requires_dist": [
      "a-pandas-ex-df-to-string",
      "a-pandas-ex-plode-tool",
      "pandas"
    ],
    "requires_python": "",
    "summary": "Computes the intersection/symmetric difference of n DataFrames/Series",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15316427,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3eacab93b0c5bf05f381ab650ad0ab113a8c3f49c4864f282f294fc3b5079c8f",
          "md5": "28cf362525eac0b86daee25497929f0c",
          "sha256": "44191fbf8a9d466a2a42334666fa44d9fd82ca2e749b4860eacb882b2ca0bf2d"
        },
        "downloads": -1,
        "filename": "a_pandas_ex_intersection_difference-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "28cf362525eac0b86daee25497929f0c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 14997,
        "upload_time": "2022-10-05T21:34:10",
        "upload_time_iso_8601": "2022-10-05T21:34:10.307190Z",
        "url": "https://files.pythonhosted.org/packages/3e/ac/ab93b0c5bf05f381ab650ad0ab113a8c3f49c4864f282f294fc3b5079c8f/a_pandas_ex_intersection_difference-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee68b5c43aca4d2720ef3912e1f40f4c26242ee27af74bfc77f6da2277310c4f",
          "md5": "8d8ae2bb1ec1fac13a2499555a17cb75",
          "sha256": "e54e69d05b335b302c50965a1f0d4d67150b9f64b55fa82850676131a6ca1cc1"
        },
        "downloads": -1,
        "filename": "a_pandas_ex_intersection_difference-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8d8ae2bb1ec1fac13a2499555a17cb75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11564,
        "upload_time": "2022-10-05T21:34:12",
        "upload_time_iso_8601": "2022-10-05T21:34:12.405447Z",
        "url": "https://files.pythonhosted.org/packages/ee/68/b5c43aca4d2720ef3912e1f40f4c26242ee27af74bfc77f6da2277310c4f/a_pandas_ex_intersection_difference-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3eacab93b0c5bf05f381ab650ad0ab113a8c3f49c4864f282f294fc3b5079c8f",
        "md5": "28cf362525eac0b86daee25497929f0c",
        "sha256": "44191fbf8a9d466a2a42334666fa44d9fd82ca2e749b4860eacb882b2ca0bf2d"
      },
      "downloads": -1,
      "filename": "a_pandas_ex_intersection_difference-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "28cf362525eac0b86daee25497929f0c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 14997,
      "upload_time": "2022-10-05T21:34:10",
      "upload_time_iso_8601": "2022-10-05T21:34:10.307190Z",
      "url": "https://files.pythonhosted.org/packages/3e/ac/ab93b0c5bf05f381ab650ad0ab113a8c3f49c4864f282f294fc3b5079c8f/a_pandas_ex_intersection_difference-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee68b5c43aca4d2720ef3912e1f40f4c26242ee27af74bfc77f6da2277310c4f",
        "md5": "8d8ae2bb1ec1fac13a2499555a17cb75",
        "sha256": "e54e69d05b335b302c50965a1f0d4d67150b9f64b55fa82850676131a6ca1cc1"
      },
      "downloads": -1,
      "filename": "a_pandas_ex_intersection_difference-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8d8ae2bb1ec1fac13a2499555a17cb75",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11564,
      "upload_time": "2022-10-05T21:34:12",
      "upload_time_iso_8601": "2022-10-05T21:34:12.405447Z",
      "url": "https://files.pythonhosted.org/packages/ee/68/b5c43aca4d2720ef3912e1f40f4c26242ee27af74bfc77f6da2277310c4f/a_pandas_ex_intersection_difference-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}