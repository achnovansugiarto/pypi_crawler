{
  "info": {
    "author": "fredzhang",
    "author_email": "slzhang08@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2"
    ],
    "description": "===========================\ndjdg PYTHON COMMON AUTH SDK\n===========================\n\n.. toctree::\n   :maxdepth: 2\n\n\nHow To Install:\n---------------\ncommand ::\n\n    pip install djdg_python_common_verify_SDK\n\ndatabase model description:\n---------------------------\n\n    1. VerifiedUser_model_\n    2. BankInfo_model_\n    3. BankVerify_model_\n\n\n.. _VerifiedUser_model:\n\nVerifiedUser model\n^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    class VerifiedUser(models.Model):\n        TYPE_REAL_NAME_VALIDATE = 0\n        TYPE_UPLOAD_VALIDATE = 1\n        CHOICE_TYPE = (\n            (TYPE_REAL_NAME_VALIDATE, '实名认证'),\n            (TYPE_UPLOAD_VALIDATE, '上传认证')\n        )\n        STATUS_AUDIT_PASS = 0\n        STATUS_AUDIT = 1\n        STATUS_NOT_USE = 2\n        STATUS_RE_AUDIT = 4\n        CHOICE_STATUS = (\n            (STATUS_AUDIT_PASS, '认证成功'),\n            (STATUS_AUDIT, '待审核'),\n            (STATUS_NOT_USE, '未使用'),\n            (STATUS_RE_AUDIT, '认证失败')\n        )\n        user = models.OneToOneField(User, related_name=\"common_verified_user\")\n        id_name = models.CharField(u\"身份证姓名\", max_length=64, null=True)\n        id_card_no = models.CharField(u\"身份证号码\", max_length=32, null=True)\n        type = models.SmallIntegerField(u\"认证类型\", default=0, choices=CHOICE_TYPE)\n        id_card_img1 = models.CharField(u\"身份证正面\", max_length=128, null=True)\n        id_card_img2 = models.CharField(u\"身份证反而\", max_length=128, null=True)\n        status = models.SmallIntegerField(u\"认证状态\", default=0, choices=CHOICE_STATUS)\n        stime = models.DateTimeField(u\"状态时间\", auto_now=True)\n        ctime = models.DateTimeField(u\"创建时间\", auto_now_add=True)\n        pay_password = models.CharField(u\"支付密码\", max_length=128, null=True, blank=True)\n\n\n.. _BankInfo_model:\n\nBankInfo model\n^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    class BankInfo(models.Model):\n        name = models.CharField(u\"银行名称\", max_length=32)\n        logo = models.CharField(u\"银行LOGO URL\", max_length=255)\n        color = models.CharField(u\"银行卡底色\", max_length=8, default='FFFFFF')\n\n\n.. _BankVerify_model:\n\nBankVerify model\n^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    class BankVerify(models.Model):\n            TYPE_BANK_BOOK = 0\n            TYPE_DEBIT_CARD = 1\n            TYPE_CREDIT_CARD = 2\n            CHOICE_TYPE = (\n                (TYPE_BANK_BOOK, '存折'),\n                (TYPE_DEBIT_CARD, '借记卡'),\n                (TYPE_CREDIT_CARD, '信用卡')\n            )\n            STATUS_AUDIT_PASS = 0\n            STATUS_AUDIT = 1\n            STATUS_NOT_USE = 2\n            STATUS_RE_AUDIT = 4\n            CHOICE_STATUS = (\n                (STATUS_AUDIT_PASS, '绑定成功'),\n                (STATUS_AUDIT, '绑定中'),\n                (STATUS_NOT_USE, \"未使用\"),\n                (STATUS_RE_AUDIT, '绑定失败')\n            )\n            user = models.ForeignKey(User)\n            bank_info = models.ForeignKey(BankInfo, related_name=\"dealer_bank_card\", null=True, default=None,\n                                          on_delete=models.SET_NULL)\n            card_branch = models.TextField(\"开户支行\", max_length=64, null=True)\n            province = models.CharField(\"省份\", max_length=32, default='')\n            city = models.CharField(\"城市\", max_length=16, default='')\n            card_no = models.CharField(\"卡号\", max_length=64)\n            card_tel = models.CharField(\"预留手机\", max_length=16)\n            type = models.SmallIntegerField(\"卡类型\", default=1, choices=CHOICE_TYPE)\n            status = models.SmallIntegerField(\"卡状态\", default=0, choices=CHOICE_STATUS)\n            stime = models.DateTimeField(\"状态时间\", auto_now=True)\n            ctime = models.DateTimeField(\"创建时间\", auto_now_add=True)\n\n\nSetting Config:\n    - INSTALLED_APPS_.\n    - JAVA_COMMON_SYSTEM_.\n    - RESPONSE_CONFIG_.\n    - REDIS_.\n    - LOGGING_.\n    - DATABASE_.\n\n.. _INSTALLED_APPS:\n\nINSTALLED_APPS\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        \"**\",\n        \"djdg_common_verify\"\n    ]\n    # INSTALLED_APPS 增加如上app\n    # 然后运行python manage.py migrate djdg_common_verify\n    # 生成数据库的表，以及插入bankinfo的信息\n\n.. _JAVA_COMMON_SYSTEM:\n\nJAVA_COMMON_SYSTEM\n\n.. code-block:: python\n\n    JAVA_COMMON_SYSTEM = {\n    'host': 'localhost', 'protocol': 'http',\n    'base_url': '/ja/common/v1/',\n    'appid': 'abc', 'secret': '123'}\n    # 需要在settings.py增加java common模块的配置，具体的配置信息如上\n\n.. _RESPONSE_CONFIG:\n\nRESPONSE_CONFIG\n\n.. code-block:: python\n\n    RESPONSE_CONFIG = {\n        'STATUS_PARAM': 'statusCode',\n        'MSG_PARAM': 'msg',\n        'DATA_PARAM': 'data',\n        'OK_STATUS': 0,\n        'OK_MSG': 'success'\n    }\n    # 配置RESPONSE_CONFIG， 主要用于系统间的http请求\n\n.. _REDIS:\n\nREDIS\n\n.. code-block:: python\n\n    REDIS = {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'DB': 0,\n        'PASSWORD': '123',\n    }\n    # 配置redis\n\n.. _LOGGING:\n\nLOGGING\n\n.. code-block:: python\n\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'formatters': {\n            'verbose': {\n                'format': '%(asctime)s [%(levelname)s] [%(process)d:%(thread)d] [%(name)s] [%(module)s.%(funcName)s:%(lineno)d] - %(message)s'\n            },\n            'middle': {\n                'format': '%(asctime)s [%(levelname)s] [%(module)s.%(funcName)s:%(lineno)d] - %(message)s'\n            },\n            'simple': {\n                'format': '%(levelname)s %(message)s'\n            },\n        },\n        'filters': {\n            'require_debug_false': {\n                '()': 'django.utils.log.RequireDebugFalse'\n            }\n        },\n        'handlers': {\n            'null': {\n                'level': 'DEBUG',\n                'class': 'logging.NullHandler',\n                },\n            'console': {\n                'level': 'DEBUG',\n                'class': 'logging.StreamHandler',\n                'formatter': 'middle'\n            },\n            'testlog': {\n                'level': 'DEBUG',\n                'class': 'logging.handlers.RotatingFileHandler',\n                'formatter': 'verbose',\n                'filename': os.path.join(BASE_DIR, 'test.log'),\n                'maxBytes': '1024 * 1024 * 10',\n                'backupCount': '5'\n            },\n        },\n        'loggers': {\n            'django': {\n                'handlers': ['testlog'],\n                'propagate': True,\n                'level': 'INFO',\n                },\n            'djdg_common_verify': {\n                'handlers': ['testlog'],\n                'propagate': False,\n                'level': 'DEBUG',\n                },\n        }\n    }\n    # 如果需要将认证的信息保存到log里面，需要在loggers里面设置djdg_common_verify，具体配置可参考上述代码\n\n\n.. _DATABASE:\n\nDATABASE migrate\n\n.. code-block:: python\n\n   python manage.py migrate djdg_common_verify\n\nRun Test:\n\nTest Command\n\n.. code-block:: python\n\n    # first config setting file.\n    # 在DATABASE里面加入类似的如下代码\n    # 由于有中文，必须设置编码\n    DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'verifycommon',\n        'USER': 'root',\n        'PASSWORD': '123456',\n        'HOST': '127.0.0.1',\n        'PORT': '3306',\n        'TEST': {\n                'NAME': 'mytestdatabase',\n                'CHARSET': 'utf8',\n                'COLLATION': 'utf8_general_ci',\n                },\n        },\n    }\n    # 然后运行下面的代码，执行测试用例,\n    # 不要频繁去跑测试用例，由于java的接口直接对接第三方的付费服务， 只要保证功能正常即可\n    python manage.py test djdg_common_verify\n\n\nFunction list:\n    - idcardauth_example_.\n    - bankcardauth_example_.\n    - paypasswordauth_example_.\n\n\n.. _idcardauth_example:\n\nIdCardUserAuther Example:\n\n\n1. 用户获取实名认证信息\n\n导入工具类 ::\n\n   from djdg_common_verify.idcard_auth import IdCardUserAuther\n\n创建实例对象 ::\n\n    Auther = IdCardUserAuther(user_id=1)\n\n2. 获取序列化之后的信息 ::\n\n    Auther.serializer()\n\n2.1 返回信息为dict\n\n2.1.1 未通过认证::\n\n    {\"statusCode\": 5000, \"msg\": \"用户暂未通过认证\", \"data\":{}}\n\n2.1.2 通过认证::\n\n    {\"statusCode\": 0, \"msg\": \"成功\", \"data\":{\"name\":\"张三\", \"identity\":1234}}\n\n3. 传参进行认证 ::\n\n    Auther = IdCardUserAuther(user_id=1, auth_data={\"name\":\"张三\", \"identity\":\"123456789\"})\n\n3.1 调用认证方法 ::\n\n    Auther.auth()\n\n3.2 获取序列化之后的信息 ::\n\n    Auther.serializer()\n\n3.3 返回信息为dict\n\n3.3.1 未通过认证 ::\n\n    {\"statusCode\": 5000, \"msg\": \"用户暂未通过认证\", \"data\":{}}\n\n3.3.2 通过认证 ::\n\n    {\"statusCode\": 0, \"msg\": \"成功\", \"data\":{\"name\":\"张三\", \"identity\":1234}}\n\n\n\n.. _bankcardauth_example:\n\nbankcardauth Example:\n\n导入工具类 ::\n\n   from djdg_common_verify.bankcard_auth import BankCardUserAuther\n\n用户获取银行卡绑定信息 ::\n\n    Auther = BankCardUserAuther(user_id=1)\n\n获取序列化之后的信息  ::\n\n    Auther.serializer()\n\n返回信息为dict ::\n\n    # 未通过认证\n    {\"statusCode\": 5000, \"msg\": \"银行卡暂未通过认证\", \"data\": {}}\n    # 通过认证\n    {\"statusCode\": 0, \"msg\": \"成功\",\n        \"data\": {\n        \"bankcard\": \"\", \"bank_branch_name\": \"\",\n        \"type\": \"\",  \"province\": \"\",\n        \"city\": \"\", \"tel\": \"\",\n        \"bank_name\": \"\", \"bank_logo\": \"\",\n        \"color\": \"\", \"name\": \"\", \"identity\": \"\"\n     }\n    }\n\n传参进行认证 ::\n\n    Auther = BankCardUserAuther(user_id=1, auth_data={\n        \"bankcard\": \"\", \"bank_branch_name\": \"\",\n        \"type\": \"\", \"province\": \"\", \"city\": \"\",\n        \"tel\": \"\", \"bank_name\": \"\", \"bank_logo\": \"\",\n        \"color\": \"\", \"name\": \"\", \"identity\": \"\"\n     }\n\n绑定或修改银行卡 ::\n\n\n    auth_data={\n        \"name\": \"张三\", \"bankcard\": \"1234567890\", \"tel\":\"13112345678\"\n     }\n    # \"name\":姓名， \"bankcard\":银行卡号， \"tel\":电话号码 三个字段不能为空\n\n\n修改银行卡支行信息 ::\n\n    auth_data={\n    \"province\": \"广东\", \"city\":\"深圳\", \"bank_branch_name\": \"科技园支行\"\n     }\n    # \"province\":省份， \"city\":城市， \"bank_branch_name\":支行名称 三个字段不能为空\n\n\n调用认证方法 ::\n\n    Auther.auth()\n\n获取序列化之后的信息 ::\n\n    Auther.serializer()\n\n返回信息为dict ::\n\n    # 未通过认证\n    {\"statusCode\": 5000, \"msg\": \"用户暂未通过认证\", \"data\":{}}\n\n    # 通过认证\n    {\"statusCode\": 0, \"msg\": \"成功\",\n        \"data\": {\n        \"bankcard\": \"\", \"bank_branch_name\": \"\",\n        \"type\": \"\", \"province\": \"\", \"city\": \"\",\n        \"tel\": \"\", \"bank_name\": \"\", \"bank_logo\": \"\",\n        \"color\": \"\", \"name\": \"\", \"identity\": \"\"\n     }\n    }\n\n\n.. _paypasswordauth_example:\n\npaypasswordauth Example:\n\n导入工具类 ::\n\n   from djdg_common_verify.bankcard_auth import BankCardUserAuther\n\n用户获取银行卡绑定信息 ::\n\n    Auther = UserPasswordAuther(user_id=1)\n\n获取序列化之后的信息 ::\n\n    Auther.serializer()\n\n返回信息为dict ::\n\n    {\"statusCode\": 0, \"msg\": \"成功\", \"data\": {\"password\": \"设置的密码\"}}\n\n    # 已经设置密码\n\n    {\"statusCode\": 5000, \"msg\": \"用户暂未设置交易密码\", \"data\": {}}\n\n    # 未设置密码\n\n传参进行认证\n\n设置交易密码 (之前尚未设置交易密码) ::\n\n    Auther = UserPasswordAuther(user_id=1)\n    # 调用认证方法\n    Auther.auth()\n    # 获取序列化之后的信息\n    Auther.serializer()\n    # 返回信息为dict\n    {\"statusCode\": 5006, \"msg\": \"密码无效或者为空\", \"data\": {}}  # 未通过认证\n    {\"statusCode\": 0, \"msg\": \"成功\", \"data\": {\"password\": \"设置的密码\"}} # 通过认证\n\n\n修改交易密码 (之前已经设置交易密码) ::\n\n    # 第一步获取settingtoken\n    Auther = UserPasswordAuther(user_id=1, auth_data={\"identity\":\"身份证号码\"})\n    # 调用获取settingtoken方法\n    Auther.get_settingtoken()\n    # 返回信息为dict\n    {\"statusCode\": 5003, \"msg\": \"用户身份证信息未通过校验\", \"data\": {}}\n    {\"statusCode\": 5000, \"msg\": \"用户暂未设置交易密码\", \"data\": {}}\n    {\"statusCode\": 0,\n                \"msg\": \"验证身份信息成功\",\n                \"data\": {\n                    \"settingToken\": settingtoken.token\n                }}  # 获取成功返回信息\n    # 第一步获取settingtoken\n    Auther = UserPasswordAuther(user_id=1, \\\n    auth_data={\"password\":\"设置的交易密码\", \"setttingtoken\":\"通过第一步获取的settingtoken\"})\n    # 调用认证方法\n    Auther.auth()\n    # 获取序列化之后的信息\n    Auther.serializer()\n    # 返回信息为dict\n    {\"statusCode\": 5001, \"msg\": \"setting token未通过校验\", \"data\": {}} # 未通过认证\n    {\"statusCode\": 5005, \"msg\": \"settingtoken失效\", \"data\": {}} # 未通过认证\n    {\"statusCode\": 0, \"msg\": \"成功\", \"data\": {\"password\": \"设置的密码\"}} # 通过认证\n\n\n\nVersion Log ::\n\n    # version 0.0.5\n    修正验证银行卡的流程\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://pypi.python.org/pypi/djdg-common-verify",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djdg_python_common_verify_SDK",
    "package_url": "https://pypi.org/project/djdg_python_common_verify_SDK/",
    "platform": "",
    "project_url": "https://pypi.org/project/djdg_python_common_verify_SDK/",
    "project_urls": {
      "Homepage": "https://pypi.python.org/pypi/djdg-common-verify"
    },
    "release_url": "https://pypi.org/project/djdg_python_common_verify_SDK/0.0.6/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "djdg common verify",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 2508251,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17b1d3d9d684978f3a8999f621ff1516ff4dbbb1bf9106f71167318aab92e15c",
          "md5": "bd27a7a4dd6a3a1d8386ae5fb1ea6c59",
          "sha256": "7fd85c2f324f1602ec76a50fead3ce9a10eab71a8a6b4c6ba80f763e584c2f8f"
        },
        "downloads": -1,
        "filename": "djdg_python_common_verify_SDK-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bd27a7a4dd6a3a1d8386ae5fb1ea6c59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15992,
        "upload_time": "2016-10-18T04:26:10",
        "upload_time_iso_8601": "2016-10-18T04:26:10.892167Z",
        "url": "https://files.pythonhosted.org/packages/17/b1/d3d9d684978f3a8999f621ff1516ff4dbbb1bf9106f71167318aab92e15c/djdg_python_common_verify_SDK-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f136cebd344370a3d95f300e3fd862e2eb215352f3d306ed0361339e7056edb3",
          "md5": "44b4ea5f280e71f0002a043adb9dddf0",
          "sha256": "1c8f1f4c3f22addae3d70457ea06575e8c7fdf8057d201c8b26db6e5c10c8f09"
        },
        "downloads": -1,
        "filename": "djdg_python_common_verify_SDK-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "44b4ea5f280e71f0002a043adb9dddf0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17746,
        "upload_time": "2016-10-18T08:24:13",
        "upload_time_iso_8601": "2016-10-18T08:24:13.060648Z",
        "url": "https://files.pythonhosted.org/packages/f1/36/cebd344370a3d95f300e3fd862e2eb215352f3d306ed0361339e7056edb3/djdg_python_common_verify_SDK-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fac394772666731ea65d16cb0c791b1181dc5a4167167dd1b63697b1097c4257",
          "md5": "326c72bd42fe2dae273fb0b9ab54eee1",
          "sha256": "3cc71f23e5ebaa889ea0d0fe02f78201befdf452adea1cb0c6d2eac81fa9669c"
        },
        "downloads": -1,
        "filename": "djdg_python_common_verify_SDK-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "326c72bd42fe2dae273fb0b9ab54eee1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18056,
        "upload_time": "2016-10-19T03:52:06",
        "upload_time_iso_8601": "2016-10-19T03:52:06.591771Z",
        "url": "https://files.pythonhosted.org/packages/fa/c3/94772666731ea65d16cb0c791b1181dc5a4167167dd1b63697b1097c4257/djdg_python_common_verify_SDK-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "633c6066ebaf60d6e1e810a0b3adecb8fff5a31ba32ebf3d0a3c693f9e865dc7",
          "md5": "fa061bee7caca45f84444549a749cdf4",
          "sha256": "223ccab6ff58146d266927a33a99695b06984234a3aee5acc8c09078588fba87"
        },
        "downloads": -1,
        "filename": "djdg_python_common_verify_SDK-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fa061bee7caca45f84444549a749cdf4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18072,
        "upload_time": "2016-10-31T07:24:19",
        "upload_time_iso_8601": "2016-10-31T07:24:19.869904Z",
        "url": "https://files.pythonhosted.org/packages/63/3c/6066ebaf60d6e1e810a0b3adecb8fff5a31ba32ebf3d0a3c693f9e865dc7/djdg_python_common_verify_SDK-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36db915f56bc89778e3625d28dd67ae59ec84d838671a26858cff9ff24cfd0aa",
          "md5": "a998c488a8e0bd16eeb63e4d1464503e",
          "sha256": "6abeeeb520c3acabeb09a32d36679a61ca58f6989fa1c4d1f57dc0409d30921d"
        },
        "downloads": -1,
        "filename": "djdg_python_common_verify_SDK-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a998c488a8e0bd16eeb63e4d1464503e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18284,
        "upload_time": "2016-11-08T10:32:16",
        "upload_time_iso_8601": "2016-11-08T10:32:16.211991Z",
        "url": "https://files.pythonhosted.org/packages/36/db/915f56bc89778e3625d28dd67ae59ec84d838671a26858cff9ff24cfd0aa/djdg_python_common_verify_SDK-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3caabaa004e083bc630977b1d2dae61fcc81dbcf254a85c6fd21ae80c36534d7",
          "md5": "882d0c73ecf852f2b1370b7d17a0981f",
          "sha256": "edaf2a947cf2d47e509512f6e87d2b70772b099d6d4f66406110896e9604699e"
        },
        "downloads": -1,
        "filename": "djdg_python_common_verify_SDK-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "882d0c73ecf852f2b1370b7d17a0981f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18374,
        "upload_time": "2016-12-09T06:43:57",
        "upload_time_iso_8601": "2016-12-09T06:43:57.659194Z",
        "url": "https://files.pythonhosted.org/packages/3c/aa/baa004e083bc630977b1d2dae61fcc81dbcf254a85c6fd21ae80c36534d7/djdg_python_common_verify_SDK-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3caabaa004e083bc630977b1d2dae61fcc81dbcf254a85c6fd21ae80c36534d7",
        "md5": "882d0c73ecf852f2b1370b7d17a0981f",
        "sha256": "edaf2a947cf2d47e509512f6e87d2b70772b099d6d4f66406110896e9604699e"
      },
      "downloads": -1,
      "filename": "djdg_python_common_verify_SDK-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "882d0c73ecf852f2b1370b7d17a0981f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18374,
      "upload_time": "2016-12-09T06:43:57",
      "upload_time_iso_8601": "2016-12-09T06:43:57.659194Z",
      "url": "https://files.pythonhosted.org/packages/3c/aa/baa004e083bc630977b1d2dae61fcc81dbcf254a85c6fd21ae80c36534d7/djdg_python_common_verify_SDK-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}