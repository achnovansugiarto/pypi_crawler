{
  "info": {
    "author": "Paul Landes",
    "author_email": "landes@mailc.net",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# MIMIC-III corpus parsing and section prediction with MedSecId\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.7150451.svg)](https://doi.org/10.5281/zenodo.7150451)\n[![PyPI][pypi-badge]][pypi-link]\n[![Python 3.9][python39-badge]][python39-link]\n[![Python 3.10][python310-badge]][python310-link]\n\nThis repository contains the a Python package to automatically segment and\nidentify sections of medical notes.  It also provides access to the MedSecId\nsection annotations with MIMIC-III corpus parsing from the paper [A New Public\nCorpus for Clinical Section Identification: MedSecId].  See the [medsecid\nrepository] to reproduce the results from the paper.\n\nThis package provides the following:\n\n* The same access to MIMIC-III data as provided in the [mimic package].\n* Access to the annotated MedSecId notes as an easy to use Python object graph.\n* The pretrained model inferencing, which produces a similar Python object\n  graph to the annotations (provides the class `PredictedNote` instead of an\n  `AnnotatedNote` class.\n\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->\n## Table of Contents\n\n- [Obtaining](#obtaining)\n- [Documentation](#documentation)\n- [Installation](#installation)\n- [Usage](#usage)\n    - [Prediction Usage](#prediction-usage)\n    - [Annotation Access](#annotation-access)\n- [Differences from the Paper Repository](#differences-from-the-paper-repository)\n- [Training](#training)\n    - [Preprocessing Step](#preprocessing-step)\n    - [Training and Testing](#training-and-testing)\n- [Training Usable Models](#training-usable-models)\n- [Models](#models)\n    - [Performance Metrics](#performance-metrics)\n- [Citation](#citation)\n- [Changelog](#changelog)\n- [License](#license)\n\n<!-- markdown-toc end -->\n\n\n\n## Obtaining\n\nThe easiest way to install the command line program is via the `pip` installer:\n```bash\npip3 install zensols.mimicsid\n```\n\nBinaries are also available on [pypi].\n\n\n## Documentation\n\nSee the [full documentation](https://plandes.github.io/mimicsid/index.html).\nThe [API reference](https://plandes.github.io/mimicsid/api.html) is also\navailable.\n\n\n## Installation\n\nIf you only want to predict sections using the pretrained model, you need only\nto [install](#obtaining) the package.  However, if you want to access the\nannotated notes, you must install a Postgres MIMIC-III database as [mimic\npackage install section].\n\n\n## Usage\n\nThis package provides models to predict sections of a medical note and access\nto the MIMIC-III section annotations available on [Zenodo].  The first time it\nis run it will take a while to download the annotation set and the pretrained\nmodels.\n\nSee the [examples](example) for the complete code and additional documentation.\n\n\n### Prediction Usage\n\nThe `SectionPredictor` class creates section annotation span IDs/types and\nheader token spans.  See the example below:\n\n```python\nfrom zensols.nlp import FeatureToken\nfrom zensols.mimic import Section\nfrom zensols.mimicsid import PredictedNote, ApplicationFactory\nfrom zensols.mimicsid.pred import SectionPredictor\n\nif (__name__ == '__main__'):\n    # get the section predictor from the application context in the app\n    section_predictor: SectionPredictor = ApplicationFactory.section_predictor()\n\n    # read in a test note to predict\n    with open('../../test-resources/note.txt') as f:\n        content: str = f.read().strip()\n\n    # predict the sections of read in note and print it\n    note: PredictedNote = section_predictor.predict([content])[0]\n    note.write()\n\n    # iterate through the note object graph\n    sec: Section\n    for sec in note.sections.values():\n        print(sec.id, sec.name)\n\n    # concepts or special MIMIC tokens from the addendum section\n    sec = note.sections_by_name['addendum'][0]\n    tok: FeatureToken\n    for tok in sec.body_doc.token_iter():\n        print(tok, tok.mimic_, tok.cui_)\n```\n\n\n### Annotation Access\n\nAnnotated notes are provided as a Python [Note class], which contains most of\nthe MIMIC-III data from the `NOTEEVENTS` table.  This includes not only the\ntext, but parsed `FeatureDocument` instances.  However, you must build a\nPostgres database and provide a login to it in the application as detailed\nbelow:\n\n```python\nfrom zensols.config import IniConfig\nfrom zensols.mimic import Section\nfrom zensols.mimicsid import ApplicationFactory\nfrom zensols.mimic import Note\nfrom zensols.mimicsid import AnnotatedNote, NoteStash\n\nif (__name__ == '__main__'):\n    # create a configuration with the Postgres database login\n    config = IniConfig('db.conf')\n    # get the `dict` like data structure that has notes by `row_id`\n    note_stash: NoteStash = ApplicationFactory.note_stash(\n        **config.get_options(section='mimic_postgres_conn_manager'))\n\n    # get a note by `row_id`\n    note: Note = note_stash[14793]\n\n    # iterate through the note object graph\n    sec: Section\n    for sec in note.sections.values():\n        print(sec.id, sec.name)\n```\n\n\n## Differences from the Paper Repository\n\nThe paper [medsecid repository] has quite a few differences, mostly around\nreproducibility.  However, this repository is designed to be a package used for\nresearch that applies the model.  To reproduce the results of the paper, please\nrefer to the [medsicid repository].  To use the best performing model\n(BiLSTM-CRF token model) from that paper, then use this repository.\n\nPerhaps the largest difference is that this repository has a pretrained model\nand code for header tokens.  This is a separate model whose header token\npredictions are \"merged\" with the section ID/type predictions.\n\nThe differences in performance between the section ID/type models and metrics\nreported involve several factors.  The primary difference being that released\nmodels were trained on the test data with only validation performance metrics\nreported to increase the pretrained model performance.  Other changes include:\n\n* Uses the [mednlp package], which uses [MedCAT] to parse clinical medical\n  text.  This includes changes such as fixing misspellings and expanding\n  acronyms.\n* Uses the [mimic package], which builds on the [mednlp package] and parses\n  [MIMIC-III] text by configuring the [spaCy] tokenizer to deal with pseudo\n  tokens (i.e. `[**First Name**]`).  This is a significant change given how\n  these tokens are treated between the models and term mapping (`Pt.` becomes\n  `patient`).  This was changed so the model will work well on non-MIMIC data.\n* Feature sets differences such as provided by the [Zensols Deep NLP package].\n* Model changes include LSTM hidden layer parameter size and activation\n  function.\n* White space tokens are removed in [medsecid repository] and added back in\n  this package to give additional cues to the model on when to break a\n  section.  However, this might have had the opposite effect.\n\nThere are also changes in the libraries used:\n\n* PyTorch was upgraded from 1.9.1 to 1.12.1\n* [spaCy] was upgraded from 3.0.7 to 3.2.4\n* Python version 3.9 to 3.10.\n\n\n## Training\n\nThis document explains how to create and package models for distribution.\n\n\n### Preprocessing Step\n\n1. To train the model, first install the MIMIC-III Postgres database per the [mimic\n   package] instructions in the *Installation* section.\n2. Add the MIMIC-III Postgres credentials and database configuration to\n   `etc/batch.conf`.\n2. Vectorize the batches: `./mimicsid batch -c etc/batch.conf`.  This also\n   creates cached hospital admission and spaCy data parse files.\n\n\n### Training and Testing\n\nTo get performance metrics on the test set by training on the training, use the\ncommand: `./mimicsid traintest -c models/glove300.conf` for the section ID\nmodel.  The configuration file can be any of those in the `models` directory.\nFor the header model use:\n\n```bash\n./mimicsid traintest -c models/glove300.conf --override mimicsid_default.model_type=header\n```\n\n\n## Training Usable Models\n\nTo train models used in your projects, train the model on both the training and\ntest sets.  This still leaves the validation set to inform when to save for\nepochs where the loss decreases:\n\n1. Train section ID/type the model: `./mimicsid trainprod -p`\n2. Package the model creating a distribution file: `./mimicsid pack`\n3. Do the same for the header model:\n```bash\n$ ./mimicsid trainprod -c models/glove300.conf -p --override mimicsid_default.model_type=header\n$ ./mimicsid pack -c models/glove300.conf --override mimicsid_default.model_type=header\n```\n\n\n## Models\n\nYou can mix and match models across section vs. header models (see [Performance\nMetrics](#performance-metrics)).  By default the package uses the best\nperforming models but you can select the model you want by adding a\nconfiguration file and specifying it on the command line with `-c`:\n\n```ini\n[mimicsid_default]\nsection_prediction_model = bilstm-crf-tok-fasttext\nheader_prediction_model = bilstm-crf-tok-glove-300d\n```\n\nThe resources live on [Zenodo] and are automatically downloaded on the first\ntime the program is used in the `~/.cache` directory (or similar home directory\non Windows).\n\n\n### Performance Metrics\n\nThe distributed models add in the test set to the training set to improve the\nperformance for inferencing, which is why only the validation metrics are\ngiven.  Only version 0.0.2 results are given.  The validation set performance\nof the pretrained models are given below, where:\n\n* **wF1** is the weighted F1\n* **mF1** is the micro F1\n* **Mf1** is the macro F1\n* **acc** is the accuracy\n\n| Name                          | Type    | Id                                     | wF1   | mF1   | MF1   | acc   |\n|-------------------------------|---------|----------------------------------------|-------|-------|-------|-------|\n| `BiLSTM-CRF_tok (fastText)`   | Section | bilstm-crf-tok-fasttext-section-type   | 0.918 | 0.925 | 0.797 | 0.925 |\n| `BiLSTM-CRF_tok (GloVE 300D)` | Section | bilstm-crf-tok-glove-300d-section-type | 0.917 | 0.922 | 0.809 | 0.922 |\n| `BiLSTM-CRF_tok (fastText)`   | Header  | bilstm-crf-tok-fasttext-header         | 0.996 | 0.996 | 0.959 | 0.996 |\n| `BiLSTM-CRF_tok (GloVE 300D)` | Header  | bilstm-crf-tok-glove-300d-header       | 0.996 | 0.996 | 0.962 | 0.996 |\n\n\n## Citation\n\nIf you use this project in your research please use the following BibTeX entry:\n\n```bibtex\n@inproceedings{landes-etal-2022-new,\n    title = \"A New Public Corpus for Clinical Section Identification: {M}ed{S}ec{I}d\",\n    author = \"Landes, Paul  and\n      Patel, Kunal  and\n      Huang, Sean S.  and\n      Webb, Adam  and\n      Di Eugenio, Barbara  and\n      Caragea, Cornelia\",\n    booktitle = \"Proceedings of the 29th International Conference on Computational Linguistics\",\n    month = oct,\n    year = \"2022\",\n    address = \"Gyeongju, Republic of Korea\",\n    publisher = \"International Committee on Computational Linguistics\",\n    url = \"https://aclanthology.org/2022.coling-1.326\",\n    pages = \"3709--3721\"\n}\n```\n\nAlso please cite the [Zensols Framework]:\n\n```bibtex\n@article{Landes_DiEugenio_Caragea_2021,\n  title={DeepZensols: Deep Natural Language Processing Framework},\n  url={http://arxiv.org/abs/2109.03383},\n  note={arXiv: 2109.03383},\n  journal={arXiv:2109.03383 [cs]},\n  author={Landes, Paul and Di Eugenio, Barbara and Caragea, Cornelia},\n  year={2021},\n  month={Sep}\n}\n```\n\n\n## Changelog\n\nAn extensive changelog is available [here](CHANGELOG.md).\n\n\n## License\n\n[MIT License](LICENSE.md)\n\nCopyright (c) 2022 Paul Landes\n\n\n<!-- links -->\n[pypi]: https://pypi.org/project/zensols.mimicsid/\n[pypi-link]: https://pypi.python.org/pypi/zensols.mimicsid\n[pypi-badge]: https://img.shields.io/pypi/v/zensols.mimicsid.svg\n[python39-badge]: https://img.shields.io/badge/python-3.9-blue.svg\n[python39-link]: https://www.python.org/downloads/release/python-390\n[python310-badge]: https://img.shields.io/badge/python-3.10-blue.svg\n[python310-link]: https://www.python.org/downloads/release/python-3100\n\n[MedCat]: https://github.com/CogStack/MedCAT\n[spaCy]: https://spacy.io\n\n[mednlp package]: https://github.com/plandes/mednlp\n[mimic package]: https://github.com/plandes/mimic\n[mimic package install section]: https://github.com/plandes/mimic#installation\n[medsecid repository]: https://github.com/uic-nlp-lab/medsecid\n[Zensols Deep NLP package]: https://github.com/plandes/deepnlp\n[Zensols Framework]: https://github.com/plandes/deepnlp\n\n[annotation example]: example/anon/anon.py\n[A New Public Corpus for Clinical Section Identification: MedSecId]: https://aclanthology.org/2022.coling-1.326.pdf\n[Zenodo]: https://zenodo.org/record/7150451#.Yz30BS2B3Bs\n\n[Note class]: https://plandes.github.io/mimic/api/zensols.mimic.html#zensols.mimic.note.Note\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/plandes/mimicsid/releases/download/v1.0.0/zensols.mimicsid-1.0.0-py3-none-any.whl",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/plandes/mimicsid",
    "keywords": "tooling",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zensols.mimicsid",
    "package_url": "https://pypi.org/project/zensols.mimicsid/",
    "platform": null,
    "project_url": "https://pypi.org/project/zensols.mimicsid/",
    "project_urls": {
      "Download": "https://github.com/plandes/mimicsid/releases/download/v1.0.0/zensols.mimicsid-1.0.0-py3-none-any.whl",
      "Homepage": "https://github.com/plandes/mimicsid"
    },
    "release_url": "https://pypi.org/project/zensols.mimicsid/1.0.0/",
    "requires_dist": [
      "zensols.deepnlp (~=1.7.0)",
      "zensols.mimic (~=1.0.0)"
    ],
    "requires_python": "",
    "summary": "Use the MedSecId section annotations with MIMIC-III corpus parsing.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16794429,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "857be5abe62dd0de5bc8fcc66c683b9f1cf068a7dc87002a4b18edf3b263ac12",
          "md5": "e286bc896a8c6e6fc4be37fd0dcfbcf1",
          "sha256": "4dd3a4651bda9bf93aa10e83155b0a792b0bb11d845083b94665118172fb6b49"
        },
        "downloads": -1,
        "filename": "zensols.mimicsid-0.0.1-py3.10.egg",
        "has_sig": false,
        "md5_digest": "e286bc896a8c6e6fc4be37fd0dcfbcf1",
        "packagetype": "bdist_egg",
        "python_version": "0.0.1",
        "requires_python": null,
        "size": 49496,
        "upload_time": "2022-10-13T02:58:03",
        "upload_time_iso_8601": "2022-10-13T02:58:03.763837Z",
        "url": "https://files.pythonhosted.org/packages/85/7b/e5abe62dd0de5bc8fcc66c683b9f1cf068a7dc87002a4b18edf3b263ac12/zensols.mimicsid-0.0.1-py3.10.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72bec5421a8b4fa7861fb4de39bf32e67baea0b6a11e280953519d27e6f072bf",
          "md5": "3d0d205175d3464ba86e0839304fa388",
          "sha256": "d5ce46be5af727a738b734c27422dbd9f33c59bec94397adb38dcd29111d9287"
        },
        "downloads": -1,
        "filename": "zensols.mimicsid-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d0d205175d3464ba86e0839304fa388",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29855,
        "upload_time": "2022-10-13T02:58:01",
        "upload_time_iso_8601": "2022-10-13T02:58:01.119608Z",
        "url": "https://files.pythonhosted.org/packages/72/be/c5421a8b4fa7861fb4de39bf32e67baea0b6a11e280953519d27e6f072bf/zensols.mimicsid-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d25c9de1046cb119021774d442268c88468f268114f1de48b82e41be001eea2",
          "md5": "910e8c79556f4ed6df78d2909354eb36",
          "sha256": "b33dbf852da8116b2733562136aefe5ec118f8b045c70149051bed7226fe031e"
        },
        "downloads": -1,
        "filename": "zensols.mimicsid-1.0.0-py3.10.egg",
        "has_sig": false,
        "md5_digest": "910e8c79556f4ed6df78d2909354eb36",
        "packagetype": "bdist_egg",
        "python_version": "1.0.0",
        "requires_python": null,
        "size": 52716,
        "upload_time": "2023-02-10T17:41:04",
        "upload_time_iso_8601": "2023-02-10T17:41:04.172503Z",
        "url": "https://files.pythonhosted.org/packages/2d/25/c9de1046cb119021774d442268c88468f268114f1de48b82e41be001eea2/zensols.mimicsid-1.0.0-py3.10.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6605e6235c54fc2cea9733b76e079396926cf88b65aa69835dc4c854caa1701c",
          "md5": "2062f11599d0130d410cd40c30510e12",
          "sha256": "42121558c668f90b68ca3450de4ee537ce442537f0f4b52de194bb06d1ae4626"
        },
        "downloads": -1,
        "filename": "zensols.mimicsid-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2062f11599d0130d410cd40c30510e12",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32973,
        "upload_time": "2023-02-10T17:41:01",
        "upload_time_iso_8601": "2023-02-10T17:41:01.719124Z",
        "url": "https://files.pythonhosted.org/packages/66/05/e6235c54fc2cea9733b76e079396926cf88b65aa69835dc4c854caa1701c/zensols.mimicsid-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2d25c9de1046cb119021774d442268c88468f268114f1de48b82e41be001eea2",
        "md5": "910e8c79556f4ed6df78d2909354eb36",
        "sha256": "b33dbf852da8116b2733562136aefe5ec118f8b045c70149051bed7226fe031e"
      },
      "downloads": -1,
      "filename": "zensols.mimicsid-1.0.0-py3.10.egg",
      "has_sig": false,
      "md5_digest": "910e8c79556f4ed6df78d2909354eb36",
      "packagetype": "bdist_egg",
      "python_version": "1.0.0",
      "requires_python": null,
      "size": 52716,
      "upload_time": "2023-02-10T17:41:04",
      "upload_time_iso_8601": "2023-02-10T17:41:04.172503Z",
      "url": "https://files.pythonhosted.org/packages/2d/25/c9de1046cb119021774d442268c88468f268114f1de48b82e41be001eea2/zensols.mimicsid-1.0.0-py3.10.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6605e6235c54fc2cea9733b76e079396926cf88b65aa69835dc4c854caa1701c",
        "md5": "2062f11599d0130d410cd40c30510e12",
        "sha256": "42121558c668f90b68ca3450de4ee537ce442537f0f4b52de194bb06d1ae4626"
      },
      "downloads": -1,
      "filename": "zensols.mimicsid-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2062f11599d0130d410cd40c30510e12",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 32973,
      "upload_time": "2023-02-10T17:41:01",
      "upload_time_iso_8601": "2023-02-10T17:41:01.719124Z",
      "url": "https://files.pythonhosted.org/packages/66/05/e6235c54fc2cea9733b76e079396926cf88b65aa69835dc4c854caa1701c/zensols.mimicsid-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}