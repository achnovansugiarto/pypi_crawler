{
  "info": {
    "author": "思文伟",
    "author_email": "hotswwkyo@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Natural Language :: Chinese (Simplified)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# stest\n 基于unittest开发的测试框架，更友好、更灵活的编写、管理与运行测试，生成更加美观的独立单文件HTML报告。内置参数化测试数据存取方案，省去设计的烦恼，节省更多的时间，从而更快的投入到编写用例阶段。\n * 现已支持的功能\n    >* 支持命名测试方法且不与方法的doc string（文档字符串）冲突\n    >* 支持设置测试方法编写人，修改人，最后修改人以及最后一次修改时间等额外记录信息\n    >* 支持设置测试方法的执行顺序\n    >* 支持参数化功能\n    >* 支持数据驱动测试\n    >* 支持设置用例依赖\n    >* 内置参数化数据存取方案(使用excel（xlsx或xls格式）存取和管理维护参数化测试数据，简洁直观，易于修改维护)\n    >* 支持生成更加简洁美观且可作为独立文件发送的HTML测试报告\n    >* 支持生成jenkins junit xml 格式测试报告，用于jenkins集成\n    >* 支持自动查找并载入项目下的settings.py配置文件\n    >* 支持灵活控制测试失败自动截图并附加到测试报告中\n    >* 支持page object模式，内置一套易于维护的解决方案\n    >* 驱动管理器（DRIVER_MANAGER）更加便捷的管理打开的驱动会话\n    >* 对selenium、appium、minium（微信小程序自动化测试库）以及WinAppDriver（微软官方提供的一款用于做Window桌面应用程序的界面（UI）自动化测试工具）做了底层集成支持\n    >    ![](https://github.com/hotswwkyo/stest/blob/main/img/htmlreport.png)\n\n\n## 安装\n\npip方式安装\n> pip install stest\n\n源码方式安装(注意以管理员方式执行)\n> python setup.py install\n\n## 执行测试\n命令行执行\n> python -m stest -v -html D:\\temp\\tms_apitest.html calculation_test.py\n\n查看命令行参数\n> python -m stest -h\n\n代码中调stest.main()执行\n\n```python\n#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n\nimport stest\nfrom stest import AbstractTestCase\nfrom stest import Test as testcase\n\n\ndef get_testdatas(test_class_name, test_method_name, *args, **kwargs):\n\n    return [[1,2,3], [3,4,7]]\n\n\nclass Demo1Test(AbstractTestCase):\n\n    @testcase(priority=1, enabled=True, data_provider=get_testdatas, author='思文伟', description='两数加法测试01')\n    def integer_addition_02(self, number_1, number_2, expected):\n\n        result = number_1 + number_2\n        self.assertEqual(result, expected)\nif __name__ == '__main__':\n    # Demo1Test.run_test()\n    stest.main()\n```\n\n## 快速开始\n\n1. 导入抽象测试类（AbstractTestCase）和测试方法装饰器（Test）\n2. 编写继承自AbstractTestCase的测试子类，子类提供以下实用方法\n    - collect_testcases()\n        > 获取类下所有使用Test装饰的enable为True，并根据priority排序后的测试用例对象列表\n    - build_self_suite()\n        > 构建该类测试用例构成的测试套件\n    - run_test()\n        > 执行该类所有使用Test装饰的enable为True，并根据priority排序后的测试用例\n3. 使用Test标记测试方法。\n4. 直接调用测试类的run_test()执行测试\n* 简单示例\n    ```python\n    #!/usr/bin/env python\n    # -*- encoding: utf-8 -*-\n\n    from stest import AbstractTestCase\n    from stest import Test as testcase\n\n\n    def get_testdatas(test_class_name, test_method_name, *args, **kwargs):\n\n        return [[1,2,3], [3,4,7]]\n\n\n    class Demo1Test(AbstractTestCase):\n\n        @testcase(priority=1, enabled=True, data_provider=get_testdatas, author='思文伟', description='两数加法测试01')\n        def integer_addition_02(self, number_1, number_2, expected):\n\n            result = number_1 + number_2\n            self.assertEqual(result, expected)\n    if __name__ == '__main__':\n        Demo1Test.run_test()\n    ```\n\n* 综合示例（来自源码包下的samples/calculation_test.py）\n\n    ```python\n    #!/usr/bin/env python\n    # -*- encoding: utf-8 -*-\n    '''\n    @Author: 思文伟\n    @Date: 2021/03/30 15:49:32\n    '''\n    import os\n\n    from stest import settings\n    from stest import AbstractTestCase\n    from stest import Test as testcase\n\n\n    class DataProvider01(object):\n        def get_testdatas(self, testclass, testmethod, *args, **kwargs):\n\n            datas = [\n                {'加数1':1,'加数2':2,'预期':3},\n                {'加数1':4,'加数2':5,'预期':9}\n            ]\n            return datas\n\n    class DataProvider02(object):\n        def get_testdatas(self, testclass, testmethod, *args, **kwargs):\n\n            datas = [\n                [{'加数1':7}, {'加数2':5}, {'预期':12}],\n                [{'加数1':10}, {'加数2':5}, {'预期':15}]\n            ]\n            return datas\n\n    TEST_DATA_FILE_DIRPATH = os.path.dirname(os.path.abspath(__file__))\n\n\n    class CalculationTest(AbstractTestCase):\n        \"\"\"数学运算测试\"\"\"\n        @classmethod\n        def setUpClass(cls):\n            pass\n\n        def setUp(self):\n            pass\n\n        @testcase(priority=1, enabled=True, data_provider=DataProvider01().get_testdatas, author='思文伟', description='整数加法测试01')\n        def integer_addition_01(self, testdata):\n            \"\"\"自定义数据提供者 - 测试方法一个参数化示例\"\"\"\n\n            number_1 = testdata.get(\"加数1\")\n            number_2 = testdata.get(\"加数2\")\n            expected = testdata.get(\"预期\")\n\n            result = number_1 + number_2\n            self.assertEqual(result, expected)\n\n        @testcase(priority=2, enabled=True, data_provider=DataProvider02().get_testdatas, author='思文伟', description='整数加法测试02')\n        def integer_addition_02(self, testdata_01, testdata_02, testdata_03):\n            \"\"\"自定义数据提供者 - 测试方法多个参数化示例\"\"\"\n\n            number_1 = testdata_01.get(\"加数1\")\n            number_2 = testdata_02.get(\"加数2\")\n            expected = testdata_03.get(\"预期\")\n\n            result = number_1 + number_2\n            self.assertEqual(result, expected)\n\n        @testcase(priority=3, enabled=True, author='思文伟', description='整数减法测试01')\n        def integer_subtraction_01(self):\n            \"\"\"不参数化示例\"\"\"\n\n            number_1 = 21\n            number_2 = 10\n            result = number_1 - number_2\n            expected = 11\n            self.assertEqual(result, expected)\n\n        @testcase(priority=4, enabled=True, author='思文伟', data_provider_kwargs={'data_file_dir_path':TEST_DATA_FILE_DIRPATH}, description='整数减法测试02')\n        def integer_subtraction_02(self, testdata):\n            \"\"\"使用内置的数据提供者 - 传入测试数据文件所在的目录路径\"\"\"\n\n            number_1 = testdata.get(\"减数1\")\n            number_2 = testdata.get(\"减数2\")\n            expected = testdata.get(\"预期\")\n\n            result = int(number_1) - int(number_2)\n            self.assertEqual(result, int(expected))\n\n        @testcase(priority=5, enabled=True, author='思文伟', description='整数减法测试03')\n        def integer_subtraction_03(self,testdata):\n            \"\"\"使用内置的数据提供者 - 不传入测试数据文件所在的目录路径,\n            则会检测settings.SEVEN_DATA_PROVIDER_DATA_FILE_DIR 是否设置\n            ，没有设置则会使用该方法所属的测试类所在的模块目录路径作为测试数据文件的查找目录\n            \"\"\"\n\n            number_1 = testdata.get(\"减数1\")\n            number_2 = testdata.get(\"减数2\")\n            expected = testdata.get(\"预期\")\n\n            result = int(number_1) - int(number_2)\n            self.assertEqual(result, int(expected))\n\n        def tearDown(self):\n            pass\n\n        @classmethod\n        def tearDownClass(cls):\n            pass\n\n    if __name__ == '__main__':\n        CalculationTest.run_test()\n\n    ```\n\n## settings.py配置文件\n可以通过命令行参数-sfile指定配置文件路径或者指定查找配置文件的开始目录路径，如果未指定，则框架会自动递归遍历项目目录（根据用例所在目录往外推，第一个非python包的目录即被认定为项目目录）及其子孙目录，查找settings.py配置文件，找到则会在收集用例测试数据之前自动导入该文件。可通过from stest import settings 导入配置对象，然后通过settings对象访问配置文件中的配置字段（字段必须是大写的,如：settings.SCREENSHOT）\n* 框架使用的配置\n    | 字段 | 描述 |\n    | ---- | ---- |\n    | SCREENSHOT | 控制测试失败后是否自动截图 |\n    | ATTACH_SCREENSHOT_TO_REPORT | 控制截图后是否附加到测试报告中，如果附加到报告中，则截图转base64数据附加到报告中 |\n    | SCREENSHOT_SAVE_DIR | 以后将用到的字段，截图存放目录 |\n    | SEVEN_DATA_PROVIDER_DATA_FILE_DIR | 内置参数化数据提供者(SevenDataProvider)读取的测试数据文件所在的目录路径，不设置则自动获取测试用例所在模块的目录路径作为测试数据文件所在的目录路径，内置参数化数据提供者会从该目录路径查找用例测试数据文件 |\n    | TEST_REPORT_DIR | 测试报告存放目录，优先级低于从命令行参数传入的。命令行没有传入以及配置文件没有设置，则获取模块所在的目录作为存放目录，如果测试模块也没有传入，则不生成测试报告 |\n    | TEST_REPORT_NAME | 测试报告名称，优先级低于从命令行参数传入的。命令行没有传入以及配置文件没有设置，则获取模块名称作为报告名，如果连测试模块也没有给，则获取命令行设置的测试任务名作为报告名称，任务名也未设置则用测试开始时间作为报告名称 |\n    | EXECUTOR | 任务执行人，命令行没有传入则取该设置 |\n    | PROJECT_NAME | 项目名称，命令行没有传入则取该设置 |\n    | DESCRIPTION | 描述，命令行没有传入则取该设置 |\n\n* stestdemo\n    >    ![](https://github.com/hotswwkyo/stest/blob/main/img/project_dirs.png)\n\n## Test参数说明\n\n| 参数 | 类型 | 描述 |\n| ---- | ---- | ---- |\n| author | 字符串 | 用例编写者 |\n| editors | 列表 | 修改者列表 |\n| dname | 字符串或列表 | 用于给用例起一个用于设置依赖的名称 |\n| depends | 列表 | 用于设置用例依赖，是一个用例依赖列表 |\n| groups | 列表 | 方法所属的组的列表|\n| enabled | 布尔值 | 是否启用执行该测试方法 |\n| priority | 整数 | 测试方法的执行优先级，数值越小执行越靠前 |\n| alway_run | 布尔值 | 如果设置为True，不管依赖它所依赖的其他用例结果如何都始终运行，为False时，则它所依赖的其他用例不成功，就不会执行，默认值为False |\n| description | 字符串 | 测试用例名称 |\n| data_provider | object | 测试方法的参数化数据提供者，默认值是None，AbsractDataProvider的子类或者一个可调用的对象，返回数据集列表（当测试方法只有一个参数化时，应返回一维列表，多个参数化时返回二维列表） |\n| data_provider_args | 元祖 | 数据提供者变长位置参数(args) |\n| data_provider_kwargs | 字典 | 数据提供者变长关键字参数(kwargs) |\n| screenshot | 布尔值 | 控制该用例测试失败是否截图，该设置优先级大于配置文件中的截图设置 |\n| attach_screenshot_to_report | 布尔值 | 控制该用例是否附加测试失败的截图到测试报告中，优先级大于配置文件中的截图设置 |\n| last_modifyied_by | 字符串 | 最后修改者 |\n| last_modified_time | 字符串 | 最后一次修改的时间 |\n| enable_default_data_provider | 布尔值 | 是否使用内置数据提供者(SevenDataProvider)，默认值是True，未设置data_provider，且该值为True 才会使用内置数据提供者(SevenDataProvider) |\n\n## 用例依赖设置\n用例依赖于其它用例成功后执行，如用例所依赖的用例不成功或没有执行，则该用例会被设置为失败。在实际当中，有时会需要用到两个或多个测试用例依赖运行，比如这一种场景：添加和删除设备，如果只有一台设备，那么添加和删除这两个用例就会共用测试数据，就会产生依赖（即：删除设备用例依赖于添加设备用例成功后执行）\n\n* dname和depends参数使用示例\n\n    ```python\n    #!/usr/bin/env python\n    # -*- encoding: utf-8 -*-\n    '''\n    @Author: 思文伟\n    @Date: 2021/09/29\n    '''\n\n    import stest\n    from stest import AbstractTestCase\n    from stest import Test as testcase\n\n\n    class DependTest(AbstractTestCase):\n        \"\"\"依赖设置测试\"\"\"\n        @classmethod\n        def setUpClass(cls):\n            pass\n\n        def setUp(self):\n            pass\n\n        @testcase(priority=1, enabled=True, author='思文伟', description='dtest1', depends=['vnctest.py'])\n        def dtest1(self):\n            \"\"\" 用例依赖于vnctest.py模块中的所有用例 \"\"\"\n\n            pass\n\n        @testcase(priority=2, enabled=True, author='思文伟', description='dtest2', depends=['vnctest.py.LoginTest'])\n        def dtest2(self):\n            \"\"\" 用例依赖于vnctest.py模块中LoginTest类的所有用例 \"\"\"\n\n            pass\n\n        @testcase(priority=2, enabled=True, author='思文伟', description='dtest3', depends=['vnctest.py.LoginTest.login'])\n        def dtest3(self):\n            \"\"\" 用例依赖于vnctest.py模块中LoginTest类的login用例 \"\"\"\n            pass\n\n        @testcase(priority=2, enabled=True, author='思文伟', description='dtest4', dname='four')\n        def dtest4(self):\n            \"\"\" 命名用例为 four \"\"\"\n            pass\n\n        @testcase(priority=2, enabled=True, author='思文伟', description='dtest5', depends=['dtest6'])\n        def dtest5(self):\n            \"\"\" 用例依赖于当前类的dtest6用例 \"\"\"\n            pass\n\n        @testcase(priority=2, enabled=True, author='思文伟', description='dtest6', depends=['four'])\n        def dtest6(self):\n            \"\"\" 用例依赖于当前类的命名为four的dtest4用例 \"\"\"\n            pass\n\n        def tearDown(self):\n            pass\n\n        @classmethod\n        def tearDownClass(cls):\n            pass\n\n\n    if __name__ == '__main__':\n        stest.main()\n\n    ```\n\n## 参数化数据提供者(data provider)\n\n 测试方法装饰器Test会调用数据提供者(data provider), 传测试类名称和测试方法名称给data provider的前两个固定位置参数, data_provider_args参数传给data provider的变长位置参数，data_provider_kwargs参数传给data provider的变长关键字参数\n\n### 内置参数化数据提供者 - SevenDataProvider\n\n实现了参数化测试数据存取方案，使用excel（xlsx或xls格式）存取和管理维护参数化测试数据，简洁直观，易于修改维护。数据在文件中以用例数据块的方式存储。\n\n* 数据块定义：\n    >- 所有行中的第一列是标记列，第一行第一列是数据块开始标记\n    >- 第一行: 用例名称信息(标记列的下一列是用例方法名称列，之后是用例名称列)\n    >- 第二行: 用例数据标题\n    >- 第三行 开始 每一行都是一组完整的测试数据直至遇见空行或者下一个数据块\n\n    >![](https://github.com/hotswwkyo/stest/blob/main/img/testcase_data_excel_file.png)\n\n* kwargs变长关键字参数接收参数:\n    >- data_file_name - 数据文件名称\n    >- data_file_dir_path - 数据文件所在目录路径\n    >- sheet_name_or_index - 数据文件中数据所在的工作表索引(从0开始)或名称\n\n* 返回值\n    测试数据行信息字典构成的一维列表, 如：\n    > [{\"减数1\": \"36\", \"减数2\": \"10\", \"预期\": \"26\"}, {\"减数1\": \"57\", \"减数2\": \"30\", \"预期\": \"27\"}]\n    >![](https://github.com/hotswwkyo/stest/blob/main/img/testcase_data_excel_file.png)\n\n* 使用\n    框架是默认启用内置的数据提供者（SevenDataProvider）所以不需要做任何设置，返回值是测试数据行信息字典构成的一维列表，所以测试方法统一接收一个参数化参数\n    - 启用条件\n        >- 测试方法装饰器Test参数enable_default_data_provider 为True，默认值是True\n        >- 测试方法装饰器Test参数data_provider 为None（即未设置数据提供者），默认值是True为None\n\n    - 数据文件存放目录\n        stest.settings.SEVEN_DATA_PROVIDER_DATA_FILE_DIR 是否设置，设置了则取该值作为参数化测试数据文件的查找目录，否则以被装饰的测试方法所在的模块目录作为查找目录\n        > data_provider_kwargs={'data_file_dir_path':'E:\\\\mytestdatas'}\n\n    - 数据文件名\n        通过测试方法装饰器Test参数data_provider_kwargs传入data_file_name，如果没有传入，则取测试方法所属的测试类名作为测试数据文件名称\n        > data_provider_kwargs={'data_file_name':'mytest'}\n\n* 示例\n```python\nclass CalculationTest(AbstractTestCase):\n        @classmethod\n        def setUpClass(cls):\n            pass\n\n        def setUp(self):\n            pass\n\n        @testcase(priority=4, enabled=True, author='思文伟', data_provider_kwargs={'data_file_dir_path':'E:\\\\alltest'}, description='整数减法测试02')\n        def integer_subtraction_02(self, testdata):\n            \"\"\"使用内置的数据提供者 - 传入测试数据文件所在的目录路径\"\"\"\n\n            number_1 = testdata.get(\"减数1\")\n            number_2 = testdata.get(\"减数2\")\n            expected = testdata.get(\"预期\")\n\n            result = int(number_1) - int(number_2)\n            self.assertEqual(result, int(expected))\n\n        @testcase(priority=5, enabled=True, author='思文伟', description='整数减法测试03')\n        def integer_subtraction_03(self,testdata):\n            \"\"\"使用内置的数据提供者 - 不传入测试数据文件所在的目录路径,\n            则会检测settings.SEVEN_DATA_PROVIDER_DATA_FILE_DIR 是否设置\n            ，没有设置则会使用该方法所属的测试类所在的模块目录路径作为测试数据文件的查找目录\n            \"\"\"\n\n            number_1 = testdata.get(\"减数1\")\n            number_2 = testdata.get(\"减数2\")\n            expected = testdata.get(\"预期\")\n\n            result = int(number_1) - int(number_2)\n            self.assertEqual(result, int(expected))\n\n        def tearDown(self):\n            pass\n\n        @classmethod\n        def tearDownClass(cls):\n            pass\n\n    if __name__ == '__main__':\n        CalculationTest.run_test()\n```\n\n\n### 自定义参数化数据提供者\n\n自定义参数化数据提供者，可以是AbsractDataProvider的子类或者一个可调用的对象，返回数据集列表（当测试方法只有一个参数化时，应返回一维列表，多个参数化时返回二维列表），必须接收两个固定位置参数，变长位置参数(args)和变长关键字参数(kwargs)，固定位置参数，第一个是测试类名，第二个是测试方法名。\n\n* 返回值\n    > 返回测试方法的参数化测试数据列表\n    >- 测试方法只有一个参数化时, 返回一维列表 如: demotest(self, testdata), data provider 返回 [{'name':'zhansan', 'age':17}, {'name':'xiaoming', 'age':18}]，方法demotest会执行两次，第一次参数testdata是：{'name':'zhansan', 'age':17}，\n    第二次则是：{'name':'xiaoming', 'age':18}\n    >- 测试方法有多个参数化时，返回二维列表 如: demotest(self, name, age), data provider 返回 [['zhansan', 17], ['xiaoming', 18]], 方法demotest会执行两次，第一次参数name和age的值分别是：'zhansan', 18，\n    第二次则是：'xiaoming', 18\n\n* 实现方式\n    >- 继承AbsractDataProvider，实现get_testdatas(self, test_class_name, test_method_name, *args, **kwargs)方法\n    >- 其他类型的类似接收以下参数的可调用对象 ------> get_testdatas(test_class_name, test_method_name, *args, **kwargs)\n\n* 使用\n    > 通过测试方法装饰器Test参数data_provider来设置为自己的数据提供者（data provider）, 参数data_provider_args和data_provider_kwargs分别用来传给数据提供者（data provider）对应的变长位置参数(args)和变长关键字参数(kwargs)\n\n* 示例\n    > 继承自AbsractDataProvider的数据提供者示例(来自内置数据提供者 - SevenDataProvider)\n    ```python\n    #!/usr/bin/env python\n    # -*- encoding: utf-8 -*-\n    '''\n    @Author: 思文伟\n    '''\n\n    import os\n    from stest import utils\n    from stest.attrs_marker import AttributeMarker\n    from stest.abstract_data_provider import AbsractDataProvider\n    from stest.excel_file_reader import TestCaseExcelFileReader as ExcelReader\n\n\n    class SevenDataProvider(AbsractDataProvider):\n\n        FILE_EXT = AttributeMarker(\".xlsx\", True, \"数据文件拓展名\")\n        BLOCK_FLAG = AttributeMarker(\"用例名称\", True, \"用例分隔标记\")\n        DEFAULT_SHEET_INDEX = AttributeMarker(0, True, \"默认从索引为0的工作表读取数据\")\n\n        # get_datasets方法变长字典参数kwargs接收的参数的键名\n        PARAM_DATA_FILE_NAME = AttributeMarker(\"data_file_name\", True, \"数据文件名称参数\")\n        PARAM_DATA_FILE_DIR_PATH = AttributeMarker(\"data_file_dir_path\", True, \"数据文件所在目录路径参数\")\n        PARAM_SHEET_NAME_OR_INDEX = AttributeMarker(\"sheet_name_or_index\", True, \"数据文件中数据所在的工作表索引(从0开始)或名称参数\")\n        KWARGS_NAMES = AttributeMarker((PARAM_DATA_FILE_NAME, PARAM_DATA_FILE_DIR_PATH, PARAM_SHEET_NAME_OR_INDEX), True, \"接收的参数名\")\n\n        def _get_data_file_name(self, kwargs, default_value=None):\n\n            param = self.PARAM_DATA_FILE_NAME\n            filename = kwargs.get(param, default_value)\n            if utils.is_blank_space(filename):\n                raise ValueError(\"数据文件名必须是字符串类型且不能为空\")\n            return filename\n\n        def _get_data_file_dir_paht(self, kwargs):\n\n            param = self.PARAM_DATA_FILE_DIR_PATH\n            if param not in kwargs.keys():\n                raise AttributeError(\"没有传入数据文件目录\")\n            dirpath = kwargs[param]\n            if utils.is_blank_space(dirpath):\n                raise ValueError(\"数据文件目录必须是字符串类型且不能为空\")\n            return dirpath\n\n        def _get_sheet_name_or_index(self, kwargs):\n            return kwargs.get(self.PARAM_SHEET_NAME_OR_INDEX, self.DEFAULT_SHEET_INDEX)\n\n        def _build_file_full_path(self, data_file_dir_path, data_file_name):\n            \"\"\"构建完整的excel数据文件路径\n\n            Args:\n                data_file_dir_path: 文件目录\n                data_file_name: 文件名称\n            \"\"\"\n\n            name = data_file_name\n            ext = self.FILE_EXT\n            if utils.is_blank_space(data_file_dir_path):\n                raise ValueError(\"传入的数据文件目录路径不能为空：{}\".format(data_file_dir_path))\n            dir_path = data_file_dir_path\n            if name and not utils.is_blank_space(name):\n                full_name = name if name.endswith(ext) else name + ext\n            else:\n                raise ValueError(\"无效数据文件名称：{}\".format(name))\n            return os.path.join(dir_path, full_name)\n\n        def get_testdatas(self, test_class_name, test_method_name, *args, **kwargs):\n            \"\"\"根据文件名从指定的excel文件(xlsx文件格式)读取出数据, 返回一维列表，每个元素是excel表中一行测试数据信息字典.\n            eg: [{\"减数1\": \"36\", \"减数2\": \"10\", \"预期\": \"26\"}, {\"减数1\": \"57\", \"减数2\": \"30\", \"预期\": \"27\"}]\n\n            Args:\n                kwargs:\n                    file_name 数据文件名, 不提供则测试类名称作为文件名\n                    file_dir_path 数据文件所在目录路径\n                    sheet_index_or_name Excel工作表索引(从0开始)或名称,不提供则默认取索引0的工作表\n            \"\"\"\n\n            datasets = []\n\n            filename = self._get_data_file_name(kwargs, test_class_name)\n            dirpath = self._get_data_file_dir_paht(kwargs)\n            full_file_path = self._build_file_full_path(dirpath, filename)\n\n            reader = ExcelReader(full_file_path, testcase_block_separators=self.BLOCK_FLAG, sheet_index_or_name=self._get_sheet_name_or_index(kwargs))\n            datas_blocks = reader.load_testcase_data()\n            for block in datas_blocks:\n                if block.name == test_method_name:\n                    for row in block.datas:\n                        line = {}\n                        for cell in row:\n                            for title, value in cell.items():\n                                if title in line.keys():\n                                    continue\n                                else:\n                                    line[title] = value\n                        datasets.append(line)\n                    break\n            return datasets\n\n\n    class CalculationTest(AbstractTestCase):\n        @classmethod\n        def setUpClass(cls):\n            pass\n\n        def setUp(self):\n            pass\n\n        @testcase(priority=1, enabled=True, data_provider=SevenDataProvider, data_provider_kwargs={'data_file_dir_path':'E:\\\\mytestdatas'}, author='思文伟', description='整数加法测试01')\n        def integer_addition_01(self, testdata):\n            \"\"\"自定义数据提供者 - 测试方法一个参数化示例\"\"\"\n\n            number_1 = testdata.get(\"加数1\")\n            number_2 = testdata.get(\"加数2\")\n            expected = testdata.get(\"预期\")\n\n            result = number_1 + number_2\n            self.assertEqual(result, expected)\n\n        def tearDown(self):\n            pass\n\n        @classmethod\n        def tearDownClass(cls):\n            pass\n\n    if __name__ == '__main__':\n        CalculationTest.run_test()\n\n    ```\n\n    > 非AbsractDataProvider子类数据提供者示例\n    ```python\n    #!/usr/bin/env python\n    # -*- encoding: utf-8 -*-\n    '''\n    @Author: 思文伟\n    '''\n\n    from stest import AbstractTestCase\n    from stest import Test as testcase\n\n\n    class Demo1DataProvider(object):\n\n        def get_testdatas(self, test_class_name, test_method_name, *args, **kwargs):\n\n            return [[1,2,3],[3,4,7]]\n\n\n    class Demo1Test(AbstractTestCase):\n\n        @testcase(priority=1, enabled=True, data_provider=Demo1DataProvider().get_testdatas, author='思文伟', description='两数加法测试01')\n        def integer_addition_02(self, number_1, number_2, expected):\n\n            result = number_1 + number_2\n            self.assertEqual(result, expected)\n\n    if __name__ == '__main__':\n\n        Demo1Test.run_test()\n    ```\n\n    > 函数数据提供者示例\n    ```python\n    #!/usr/bin/env python\n    # -*- encoding: utf-8 -*-\n    '''\n    @Author: 思文伟\n    '''\n\n    from stest import AbstractTestCase\n    from stest import Test as testcase\n\n\n    def get_testdatas(test_class_name, test_method_name, *args, **kwargs):\n\n        return [[1,2,3], [3,4,7]]\n\n\n    class Demo1Test(AbstractTestCase):\n\n        @testcase(priority=1, enabled=True, data_provider=get_testdatas, author='思文伟', description='两数加法测试01')\n        def integer_addition_02(self, number_1, number_2, expected):\n\n            result = number_1 + number_2\n            self.assertEqual(result, expected)\n\n    if __name__ == '__main__':\n\n        Demo1Test.run_test()\n    ```\n\n## Page object 实现方案\n\n*  web页面、app页面和window应用程序页面封装\n    > 封装的页面类应继承自抽象页面类AbstractPage。页面需要有两个内部类Elements（元素类）和Actions（动作类）,分别继承自抽象也的AbstractPage.Elements（元素类）和AbstractPage.Actions（动作类），分别用于封装页面的元素和页面动作。实例化页面的时候会自动实例化Elements（元素类）和Actions（动作类），分别赋给页面实例属性elements和actions。页面类属性DRIVER_MANAGER指向驱动管理器，WIN_APP_DRIVER_HELPER指向启动和关闭WinAppDriver.exe助手。\n* 微信小程序页面封装\n    > 封装的页面类应继承自抽象页面类AbstractMiniumPage。页面需要有两个内部类Elements（元素类）和Actions（动作类）,分别继承自抽象也的AbstractMiniumPage.Elements（元素类）和AbstractMiniumPage.Actions（动作类），分别用于封装页面的元素和页面动作。实例化页面的时候会自动实例化Elements（元素类）和Actions（动作类），分别赋给页面实例属性elements和actions。页面类属性WECHAT_MANAGER指向驱动管理器\n\n### Web页面示例\n```python\n#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n'''\n@Author: 思文伟\n'''\n\nfrom stest.testobjs.abstract_page import AbstractPage\n\n\nclass LoginPage(AbstractPage):\n    \"\"\"登录页面\"\"\"\n    def init(self):\n        \"\"\"其实不需要这个，页面会自省的去自动创建元素和动作，这样做只是为了开发工具可以使用.引出相关的元素和动作方法\"\"\"\n        cls = self.__class__\n        self.elements = cls.Elements(self)\n        self.actions = cls.Actions(self)\n\n    class Elements(AbstractPage.Elements):\n        @property\n        def username(self):\n\n            name = \"用户名\"\n            xpath = '//div[@id=\"app\"]//div[@class=\"loginBox\"]//form//label[normalize-space()=\"{}\"]/following-sibling::div//input'.format(name)\n            return self.page.find_element_by_xpath(xpath)\n\n        @property\n        def password(self):\n\n            name = \"密码\"\n            xpath = '//div[@id=\"app\"]//div[@class=\"loginBox\"]//form//label[normalize-space()=\"{}\"]/following-sibling::div//input'.format(name)\n            return self.page.find_element_by_xpath(xpath)\n\n        @property\n        def login(self):\n\n            name = \"登录\"\n            xpath = '//div[@id=\"app\"]//div[@class=\"loginBox\"]//form//button//span[normalize-space()=\"{}\"]'.format(name)\n            return self.page.find_element_by_xpath(xpath)\n\n    class Actions(AbstractPage.Actions):\n        def username(self, name):\n\n            self.page.elements.username.clear()\n            self.page.elements.username.send_keys(name)\n            return self\n\n        def password(self, pwd):\n\n            self.page.elements.password.clear()\n            self.page.elements.password.send_keys(pwd)\n            return self\n\n        def login(self):\n\n            self.page.elements.login.click()\n            return self\n\n```\n```python\n#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n'''\n@Author: 思文伟\n'''\n\nimport stest\nfrom stest import settings\nfrom stest import AbstractTestCase\nfrom stest import Test as testcase\n\n# 驱动管理器\nfrom stest.dm import DRIVER_MANAGER\n\nfrom ..pages.web.login_page import LoginPage\n\n\nclass WebLoginPageTest(AbstractTestCase):\n    \"\"\" 登录页面测试 \"\"\"\n    @classmethod\n    def setUpClass(cls):\n        pass\n\n    def setUp(self):\n        pass\n\n    @testcase(priority=1, enabled=True, screenshot=True, author='思文伟', description='用正确账号密码登录测试')\n    def login_with_right_user_and_password(self, testdata):\n\n        user = testdata.get(\"用户名\")\n        pwd = testdata.get(\"用户密码\")\n        url = settings.URLS.get('登录页面url')\n        LoginPage().chrome(url, executable_path=settings.CHROME_DRIVER_PATH).maximize_window().actions.username(user).sleep(2).password(pwd).login().sleep(7)\n\n    def tearDown(self):\n        pass\n\n    @classmethod\n    def tearDownClass(cls):\n\n        DRIVER_MANAGER.close_all_drivers()\n\n\nif __name__ == '__main__':\n    # WebLoginPageTest.run_test()\n    stest.main()\n\n```\n### APP页面示例\n```python\n#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n'''\n@Author: 思文伟\n'''\n\nfrom stest.testobjs.abstract_page import AbstractPage\n\n\nclass LoginPage(AbstractPage):\n    \"\"\" APP登录页面 \"\"\"\n    class Elements(AbstractPage.Elements):\n        @property\n        def continue_btn(self):\n            \"\"\"授权页->继续按钮\"\"\"\n\n            xpath = 'UiSelector().resourceId(\"com.android.permissioncontroller:id/continue_button\")'\n            return self.page.find_element_by_android_uiautomator(xpath)\n\n        @property\n        def confirm_btn(self):\n            \"\"\"更新提示->确定按钮\"\"\"\n\n            xpath = 'UiSelector().resourceId(\"android:id/button1\")'\n            return self.page.find_element_by_android_uiautomator(xpath)\n\n        @property\n        def username(self):\n            \"\"\"用户名输入框\"\"\"\n\n            xpath = 'UiSelector().resourceId(\"userName\")'\n            return self.page.find_element_by_android_uiautomator(xpath)\n\n        @property\n        def password(self):\n            \"\"\"密码输入框\"\"\"\n\n            xpath = 'UiSelector().resourceId(\"password\")'\n            return self.page.find_element_by_android_uiautomator(xpath)\n\n        @property\n        def login(self):\n            \"\"\"登录按钮\"\"\"\n\n            xpath = 'UiSelector().resourceId(\"submit\")'\n            return self.page.find_element_by_android_uiautomator(xpath)\n\n        @property\n        def reminder(self):\n            \"\"\"下次提醒\"\"\"\n\n            xpath = 'UiSelector().resourceId(\"android:id/button1\")'\n            return self.page.find_element_by_android_uiautomator(xpath)\n\n    class Actions(AbstractPage.Actions):\n        def click_continue_btn(self):\n            self.page.elements.continue_btn.click()\n            return self\n\n        def click_confirm_btn(self):\n            self.page.elements.confirm_btn.click()\n            return self\n\n        def username(self, name):\n            \"\"\"输入用户名\"\"\"\n\n            self.page.elements.username.clear()\n            self.page.elements.username.send_keys(name)\n            return self\n\n        def password(self, pwd):\n            \"\"\"输入密码\"\"\"\n\n            self.page.elements.password.clear()\n            self.page.elements.password.send_keys(pwd)\n            return self\n\n        def login(self):\n            \"\"\"点击登录按钮\"\"\"\n\n            self.page.elements.login.click()\n            return self\n\n        def reminder(self):\n            \"\"\"下次提醒\"\"\"\n\n            self.page.elements.reminder.click()\n            return self\n\n```\n```python\n#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n'''\n@Author: 思文伟\n'''\n\nimport stest\nfrom stest import AbstractTestCase\nfrom stest import Test as testcase\nfrom stest.dm import DRIVER_MANAGER\n\nfrom ..pages.app.login_page import LoginPage\nfrom ..pages.app.home_page import HomePage\nfrom ..pages.app.main_page import SettlementMainPage\n\n\nclass AppLoginPageTest(AbstractTestCase):\n    \"\"\"APP登录页面测试\"\"\"\n    @classmethod\n    def setUpClass(cls):\n\n        cls.desired_caps = {\n            'platformName': 'Android',  # 平台名称\n            'platformVersion': '10.0',  # 系统版本号\n            'deviceName': 'P10 Plus',  # 设备名称。如果是真机，在'设置->关于手机->设备名称'里查看\n            'appPackage': 'com.ddnapalon.calculator.gp',  # apk的包名\n            'appActivity': 'com.ddnapalon.calculator.gp.ScienceFragment',  # activity 名称\n            # 'automationName': \"uiautomator2\"\n        }\n        cls.desired_caps[\"appPackage\"] = \"com.zgdygf.zygfpfapp\"\n        cls.desired_caps[\"appActivity\"] = \"io.dcloud.PandoraEntry\"\n        cls.server_url = \"http://127.0.0.1:4723/wd/hub\"\n        # adb shell am start -W -n com.zgdygf.zygfpfapp/io.dcloud.PandoraEntry\n\n    def setUp(self):\n        pass\n\n    @testcase(priority=1, enabled=True, screenshot=True, author='思文伟', description='成功登录测试')\n    def test_successfully_login(self, testdata):\n\n        name = testdata.get(\"用户名\")\n        pwd = testdata.get(\"密码\")\n\n        page = LoginPage()\n        page.open_app(self.server_url, desired_capabilities=self.desired_caps, implicit_wait_timeout=10)\n        page.actions.click_continue_btn().sleep(2).click_confirm_btn().sleep(2).username(name).password(pwd).login().sleep(2).reminder().sleep(21)\n        # HomePage().elements.settlement_tab\n        HomePage().actions.sleep(2).click_settlement_tab()\n        sp = SettlementMainPage()\n        sp.actions.sleep(7).swipe_to_select_year(\"2019年\").sleep(7).input_film_name(\"单行道\").click_search().sleep(3)\n        page.hide_keyboard()\n        sp.actions.click_film_item(\"单行道\")\n\n    def tearDown(self):\n        pass\n\n    @classmethod\n    def tearDownClass(cls):\n\n        DRIVER_MANAGER.close_all_drivers()\n\n\nif __name__ == \"__main__\":\n    # AppLoginPageTest.run_test()\n    stest.main()\n\n```\n### 微信小程序页面示例\n```python\n# -*- coding:utf-8 -*-\n\nfrom stest.testobjs.abstract_minium_page import AbstractMiniumPage\n\n\nclass ADBasketPage(AbstractMiniumPage):\n    \"\"\" 广告篮页面 \"\"\"\n    class Elements(AbstractMiniumPage.Elements):\n        @property\n        def do_ad_btn(self):\n            \"\"\"去投放广告\"\"\"\n\n            selector = '#cart'\n            inner_text = '去投放广告'\n            return self.page.get_element(selector).get_element('view').get_element('view').get_element('button', inner_text=inner_text)\n\n        @property\n        def tabbar(self):\n            \"\"\"首页下方tab工具栏\"\"\"\n\n            selector = '.mp-tabbar'\n            return self.page.get_element(selector)\n\n        @property\n        def home_tab(self):\n            \"\"\"首页 标签\"\"\"\n\n            selector = '.weui-tabbar__label'\n            inner_text = \"首页\"\n            return self.tabbar.get_element(selector, inner_text=inner_text)\n\n        @property\n        def ad_tab(self):\n            \"\"\"广告篮 标签\"\"\"\n\n            selector = '.weui-tabbar__label'\n            inner_text = \"广告篮\"\n            return self.tabbar.get_element(selector, inner_text=inner_text)\n\n        @property\n        def order_tab(self):\n            \"\"\"订单 标签\"\"\"\n\n            selector = '.weui-tabbar__label'\n            inner_text = \"订单\"\n            return self.tabbar.get_element(selector, inner_text=inner_text)\n\n        @property\n        def my_tab(self):\n            \"\"\"我的 标签\"\"\"\n\n            selector = '.weui-tabbar__label'\n            inner_text = \"我的\"\n            return self.tabbar.get_element(selector, inner_text=inner_text)\n\n        @property\n        def _ad_cart(self):\n            \"\"\"广告购物车\"\"\"\n\n            s = 'view>cart#cart'\n            el_cart = self.page.get_element(s)\n            el_cart.click()\n            self.page.sleep(1)\n            return el_cart\n\n        def cinema_checkbox(self, cinema):\n            \"\"\"影院复选框\n\n            Args:\n                cinema: 影院\n            \"\"\"\n\n            s1 = 'view.container.car>view.cinema-list>view.backgroud-float>view.flex-row>view.cinema-title'\n            # 影院名\n            s2 = 'text'\n            # 复选框\n            s8 = 'view>image.cart-icon'\n            el_cts = self._ad_cart.get_elements(s1)\n            el_cb = None\n            for el_ct in el_cts:\n                el_cinema = el_ct.get_element(s2)\n                if el_cinema and el_cinema.inner_text == cinema:\n                    el_cb = el_ct.get_element(s8)\n                    if el_cb:\n                        break\n            return el_cb\n\n        @property\n        def all_schedules(self):\n            \"\"\"所有影院排期, 未调试，误用\n\n            Args:\n                cinema: 影院\n            \"\"\"\n\n            s1 = 'view.container.car>view.cinema-list>view.backgroud-float'\n            # 影院名\n            s2 = 'view.flex-row>view.cinema-title>text.cinema-Name'\n            # 放映日期\n            s3 = 'view.cart--cinema-time'\n            # 排期列表\n            s4 = 'view.cart--cart-goods'\n            # 影片名称\n            s5 = 'view.cart-img>view.cart-message>view.name>text.filmName'\n            # 放映时间\n            s6 = 'view.cart-img>view.cart-message>view.common-flex>text.playTime'\n            # 影厅\n            s7 = 'view.cart-img>view.cart-message>view.common-flex>text.filmType'\n\n            el_cinemaboxs = self._ad_cart.get_elements(s1)\n            schedules = {}\n            # {\n            # 'el_cinema': {\n            # 'el_showdate': [\n            # (el_film, el_showtime, el_hall),...\n            # ]\n            # }\n            # }\n            for el_cinemabox in el_cinemaboxs:\n                el_cinema = el_cinemabox.get_element(s2)\n                if el_cinema:\n                    cinema_schedules = {}  # 影院排期\n                    el_cart_boxes = el_cinemabox.get_elements('view>view.cart--cart-box')\n                    for el_cart_box in el_cart_boxes:\n                        el_showdate = el_cinemabox.get_element(s3)\n                        if not el_showdate:\n                            continue\n                        el_cart_goods = el_cart_box.get_element(s4)\n                        one_day_schedules = []\n                        for el_cart_good in el_cart_goods:\n                            el_film = el_cart_good.get_element(s5)\n                            el_showtime = el_cart_good.get_element(s6)\n                            el_hall = el_cart_good.get_element(s7)\n                            if el_film and el_showtime and el_hall:\n                                one_day_schedules.append((el_film, el_showtime, el_hall))\n                        cinema_schedules[el_showdate] = one_day_schedules\n                    schedules[el_cinema] = cinema_schedules\n            return schedules\n\n        def schedule_checkbox(self, cinema, film, hall, showdate, showtime):\n            \"\"\"排期复选框\n\n            Args:\n                film: 影片\n                cinema: 影院\n                hall: 影厅\n                showdate: 放映日期\n                showtime: 放映时间\n            \"\"\"\n\n            s1 = 'view.container.car>view.cinema-list>view.backgroud-float'\n            # 影院名\n            s2 = 'view.flex-row>view.cinema-title>text'\n            # 放映日期\n            s3 = 'view>view.cart--cart-box>view.cart--cinema-time'\n            # 排期列表\n            s4 = 'view>view.cart--cart-box>view.cart--cart-goods'\n            # 影片名称\n            s5 = 'view.cart-img>view.cart-message>view.name>text'\n            # 放映时间\n            s6 = 'view.cart-img>view.cart-message>view.common-flex>text'\n            # 影厅\n            s7 = 'view.cart-img>view.cart-message>view.common-flex>text'\n            # 复选框\n            s8 = 'view>image'\n            el_cinemaboxs = self._ad_cart.get_elements(s1)\n            el_cb = None\n            for el_cinemabox in el_cinemaboxs:\n                el_cinema = el_cinemabox.get_element(s2, inner_text=cinema)\n                if el_cinema:\n                    el_showdate = el_cinemabox.get_element(s3, inner_text=showdate)\n                    if el_cinema and el_showdate:\n                        el_goods = el_cinemabox.get_elements(s4)\n                        for el_good in el_goods:\n\n                            el_film = el_good.get_element(s5, inner_text=film)\n                            el_showtime = el_good.get_element(s6, inner_text=showtime)\n                            el_halls = el_good.get_elements(s7)\n                            el_rhall = None\n                            for el_hall in el_halls:\n                                if el_hall.inner_text.strip().startswith(hall):\n                                    el_rhall = el_hall\n                                    break\n\n                            if el_film and el_showtime and el_rhall:\n                                el_cb = el_good.get_element(s8)\n                                if el_cb:\n                                    break\n                if el_cb:\n                    break\n            return el_cb\n\n        @property\n        def select_all_btn(self):\n            \"\"\"全选按钮\"\"\"\n\n            inner_text = '全选'\n            s = 'view.container.car>view.cart-bottom>view.car-pay>view.cart-bottom-select>text'\n            return self._ad_cart.get_element(s, inner_text=inner_text)\n\n        @property\n        def org_price(self):\n            \"\"\"原价结算金额\"\"\"\n\n            inner_text = '原价结算'\n            s1 = 'view.container.car>view.cart-bottom>view.car-pay>view.cart-bottom-pay>view.cart-btn'\n            s2 = 'view'\n\n            el_p_btn = None\n            el_btns = self._ad_cart.get_elements(s1)\n            for el_btn in el_btns:\n                el_yj = el_btn.get_element(s2, inner_text=inner_text)\n                if el_yj:\n                    el_views = el_btn.get_elements(s2)\n                    el_p_btn = el_views[0]\n            return el_p_btn\n\n        @property\n        def org_price_btn(self):\n            \"\"\"原价结算按钮\"\"\"\n\n            inner_text = '原价结算'\n            s = 'view.container.car>view.cart-bottom>view.car-pay>view.cart-bottom-pay>view.cart-btn>view'\n            return self._ad_cart.get_element(s, inner_text=inner_text)\n\n        @property\n        def pt_price(self):\n            \"\"\"拼团结算金额\"\"\"\n\n            inner_text = '拼团结算'\n            s1 = 'view.container.car>view.cart-bottom>view.car-pay>view.cart-bottom-pay>view.cart-btn'\n            s2 = 'view'\n\n            el_p_btn = None\n            el_btns = self._ad_cart.get_elements(s1)\n            for el_btn in el_btns:\n                el_yj = el_btn.get_element(s2, inner_text=inner_text)\n                if el_yj:\n                    el_views = el_btn.get_elements(s2)\n                    el_p_btn = el_views[0]\n            return el_p_btn\n\n        @property\n        def pt_price_btn(self):\n            \"\"\"拼团结算按钮\"\"\"\n\n            inner_text = '拼团结算'\n            s = 'view.container.car>view.cart-bottom>view.car-pay>view.cart-bottom-pay>view.cart-btn>view'\n            return self._ad_cart.get_element(s, inner_text=inner_text)\n\n    class Actions(AbstractMiniumPage.Actions):\n        def click_do_ad_btn(self):\n            \"\"\"点击去投放广告按钮\"\"\"\n\n            self.page.elements.do_ad_btn.click()\n            return self\n\n        def click_tabbar(self):\n            \"\"\"点击下方标签工具栏\"\"\"\n\n            self.page.elements.tabbar.click()\n            return self\n\n        def click_home_tab(self):\n            \"\"\"点击下方首页标签\"\"\"\n\n            self.page.elements.home_tab.click()\n            return self\n\n        def click_ad_tab(self):\n            \"\"\"点击下方广告篮标签\"\"\"\n\n            self.page.elements.ad_tab.click()\n            return self\n\n        def click_order_tab(self):\n            \"\"\"点击下方订单标签\"\"\"\n\n            self.page.elements.order_tab.click()\n            return self\n\n        def click_my_tab(self):\n            \"\"\"点击下方我的标签\"\"\"\n\n            self.page.elements.my_tab.click()\n            return self\n\n        def click_cinema_checkbox(self, cinema):\n            \"\"\"点击 影院复选框\"\"\"\n\n            self.page.elements.cinema_checkbox(cinema).click()\n            return self\n\n        def click_schedule_checkbox(self, cinema, film, hall, showdate, showtime):\n            \"\"\"点击 排期复选框\"\"\"\n\n            self.page.elements.schedule_checkbox(cinema, film, hall, showdate, showtime).click()\n            return self\n\n        def select_all(self):\n            \"\"\"点击全选按钮\"\"\"\n\n            self.page.elements.select_all_btn.click()\n            return self\n\n        def org_price_equals(self, price, prefix='￥'):\n            \"\"\"检查原价结算金额是否正确\"\"\"\n\n            ptext = self.page.elements.org_price.inner_text\n            a_price = ptext.strip().lstrip(prefix)\n            if a_price != price:\n                self.page.fail('原价结算金额实际({})显示与预期({})不等'.format(a_price, price))\n            return self\n\n        def click_org_price(self):\n            \"\"\"点击原价结算按钮\"\"\"\n\n            self.page.elements.org_price_btn.click()\n            return self\n\n        def pt_price_equals(self, price, prefix='￥'):\n            \"\"\"检查拼团结算金额是否正确\"\"\"\n\n            ptext = self.page.elements.pt_price.inner_text\n            a_price = ptext.strip().lstrip(prefix)\n            if a_price != price:\n                self.page.fail('拼团结算金额实际({})显示与预期({})不等'.format(a_price, price))\n            return self\n\n        def click_pt_price(self):\n            \"\"\"点击拼团结算按钮\"\"\"\n\n            self.page.elements.pt_price_btn.click()\n            return self\n\n```\n```python\n#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n'''\n@Author: 思文伟\n'''\n\nimport datetime\n\nimport stest\nfrom stest import AbstractTestCase\nfrom stest import Test as testcase\nfrom stest.dm import DRIVER_MANAGER\n\nfrom ..pages.wechat_mini.ad_basket_page import ADBasketPage\nfrom ..pages.wechat_mini.index_page import IndexPage\nfrom ..pages.wechat_mini.my_adlist_page import MyAdListPage\nfrom ..pages.wechat_mini.cinema_list_page import CinemaListPage\nfrom ..pages.wechat_mini.cinema_detail_page import CinemaDetailPage\n\n\nclass WechatMiniPageTest(AbstractTestCase):\n    \"\"\"微信小程序页面示例\"\"\"\n    @classmethod\n    def setUpClass(cls):\n\n        cls.minium_config = {\n            \"platform\": \"ide\",\n            \"debug_mode\": \"info\",\n            \"close_ide\": False,\n            \"no_assert_capture\": False,\n            \"auto_relaunch\": False,\n            \"device_desire\": {},\n            \"report_usage\": True,\n            \"remote_connect_timeout\": 180,\n            \"use_push\": True\n        }\n\n    def setUp(self):\n        pass\n\n    @testcase(priority=1, enabled=True, author='思文伟', description='广告投放界面->广告视频显示的正确性 - 影院列表>加入广告栏')\n    def test_add_ad_to_ad_basket_in_cinemalist(self, testdata):\n\n        ad_name = testdata.get('广告名')\n        cinema = testdata.get('影院名称')\n        film = testdata.get('影片名称')\n        hall = testdata.get('影厅名称')\n        showdate = testdata.get('放映日期')\n        showtime = testdata.get('放映时间')\n        showdate_fmt = testdata.get('放映日期格式', '%Y-%m-%d')\n\n        month_day = datetime.datetime.strptime(showdate, showdate_fmt).strftime('%m-%d')\n        ipage = IndexPage('/pages/index/index', minium_config=self.minium_config)\n        ipage.actions.click_tabbar().sleep(1).click_home_tab().sleep(1)\n        ipage.actions.click_cinema_ad_btn()\n\n        clpage = CinemaListPage()\n        clpage.actions.sleep(1).is_page_self('/pages/cinema/cinema')\n        clpage.actions.upload_ad().sleep(2)\n\n        p = MyAdListPage()\n        p.actions.is_page_self().click_ad_checkbox(ad_name).sleep(1).to_launch().sleep(2)\n        clpage.actions.click_cinema_item(cinema).sleep(1)\n\n        cdp = CinemaDetailPage()\n        cdp.actions.click_film(film).select_day(month_day).sleep(1).click_schedule(film, hall, showtime).sleep(1).confirm().sleep(2)\n        clpage.actions.join_to_ad_basket().sleep(1).shopping_basket().sleep(1)\n\n        bp = ADBasketPage()\n        bp.actions.click_schedule_checkbox(cinema, film, hall, showdate, showtime)\n\n    def tearDown(self):\n        pass\n\n    @classmethod\n    def tearDownClass(cls):\n\n        DRIVER_MANAGER.close_all_drivers()\n\n\nif __name__ == \"__main__\":\n    # WechatMiniPageTest.run_test()\n    stest.main()\n\n```\n### window应用程序页面示例\n```python\n#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n'''\n@Author: 思文伟\n'''\n\nfrom stest.testobjs.abstract_page import AbstractPage\n\n\nclass VNCViewerPage(AbstractPage):\n    \"\"\"VNCViewer页面\"\"\"\n    def init(self):\n        \"\"\"其实不需要这个，页面会自省的去自动创建元素和动作，这样做只是为了开发工具可以使用.引出相关的元素和动作方法\"\"\"\n        cls = self.__class__\n        self.elements = cls.Elements(self)\n        self.actions = cls.Actions(self)\n\n    class Elements(AbstractPage.Elements):\n        @property\n        def server_ip(self):\n            \"\"\"ip地址输入框\"\"\"\n\n            return self.page.find_element_by_accessibility_id('1001')\n\n        @property\n        def ok(self):\n            \"\"\"ok按钮\"\"\"\n\n            return self.page.find_element_by_name(\"OK\")\n\n        @property\n        def pwd(self):\n            \"\"\"密码输入框\"\"\"\n\n            locator = \"./*\"\n            childrens = self.page.find_elements_by_xpath(locator)  # 获取当前窗口下的所有子元素\n            element = None\n            for c in childrens:\n                # print(\"c.get_attribute(\"IsEnabled\")=\", c.get_attribute(\"IsEnabled\"))\n                if c.get_attribute(\"IsEnabled\") == \"true\":  # 通过界面我们知道 只有输入密码框是可编辑的，所以使用该条件来判断是否密码输入框元素\n                    element = c\n                    break\n            if element is None:\n                message = \"{} with locator '{}' not found.\".format(\"xpath\", locator)\n                self.page.raise_no_such_element_exc(message)\n            return element\n\n    class Actions(AbstractPage.Actions):\n        def server_ip(self, ip):\n            \"\"\"输入ip\"\"\"\n\n            element = self.page.elements.server_ip\n            element.clear()\n            element.send_keys(ip)\n            return self\n\n        def ok(self):\n            \"\"\"点击ok按钮\"\"\"\n\n            self.page.elements.ok.click()\n            return self\n\n        def pwd(self, password):\n\n            element = self.page.elements.pwd\n            element.clear()\n            element.send_keys(password)\n            return self\n\n```\n```python\n#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n'''\n@Author: 思文伟\n'''\n\nimport stest\n# from stest import settings\nfrom stest import AbstractTestCase\nfrom stest import Test as testcase\nfrom stest.dm import DRIVER_MANAGER\nfrom stest.dm import WIN_APP_DRIVER_HELPER\n\nfrom ..pages.winapp.vncviewer_page import VNCViewerPage\n\n\nclass VNCViewerPageTest(AbstractTestCase):\n    \"\"\" 使用WinAppDriver.exe测试Window应用程序VNCViewer示例 \"\"\"\n    @classmethod\n    def setUpClass(cls):\n\n        WIN_APP_DRIVER_HELPER.startup_winappdriver(r\"E:\\Program Files (x86)\\Windows Application Driver\\WinAppDriver.exe\")\n\n    def setUp(self):\n        pass\n\n    @testcase(priority=1, enabled=True, screenshot=True, author='思文伟', description='用正确账号密码登录测试')\n    def connect_remote_pc_desktop(self, testdata):\n\n        ip = testdata.get(\"远程桌面登录账户\")\n        pwd = testdata.get(\"远程桌面登录密码\")\n        vnc_title = \"VNC Viewer : Authentication [No Encryption]\"\n        desired_capabilities = {}\n        desired_capabilities[\"app\"] = r\"C:\\Users\\siwenwei\\Desktop\\vnc-4_1_2-x86_win32_viewer.exe\"  # vnc viewer 的执行路径\n        server_url = \"http://127.0.0.1:4723\"\n        page = VNCViewerPage()\n        page.open_window_app(server_url, desired_capabilities)\n\n        page.actions.sleep(5).server_ip(ip).sleep(1).ok()\n        # 上面点击ok后，到下一个界面显示出来需要时间，所以这里设置延时等待\n        page.switch_window_by_title(vnc_title, timeout=20).actions.pwd(pwd).sleep(2).ok()\n\n    def tearDown(self):\n        pass\n\n    @classmethod\n    def tearDownClass(cls):\n\n        DRIVER_MANAGER.close_all_drivers()\n        WIN_APP_DRIVER_HELPER.shutdown_winappdriver()\n\n\nif __name__ == '__main__':\n    # VNCViewerPageTest.run_test()\n    stest.main()\n\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hotswwkyo/stest",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stest",
    "package_url": "https://pypi.org/project/stest/",
    "platform": null,
    "project_url": "https://pypi.org/project/stest/",
    "project_urls": {
      "Homepage": "https://github.com/hotswwkyo/stest"
    },
    "release_url": "https://pypi.org/project/stest/1.0.5/",
    "requires_dist": [
      "xlrd (==1.2.0)"
    ],
    "requires_python": ">=3",
    "summary": "基于unittest开发的测试框架，更友好、更灵活的编写、管理与运行测试，生成更加美观的独立单文件HTML报告。内置参数化测试数据存取方案，省去设计的烦恼，节省更多的时间，从而更快的投入到编写用例阶段",
    "version": "1.0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16698739,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3156d3c3ba6966c9c307395cc7a23f5d22c9e7a160ce074bc9a6811f0ef6bf76",
          "md5": "4de370e346e18016e33ae485a8c758a8",
          "sha256": "01db0a81b3e5063cac8869e9a8fafaa254c9c68e0d9996354d2f2bf604b1bcb1"
        },
        "downloads": -1,
        "filename": "stest-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4de370e346e18016e33ae485a8c758a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 215450,
        "upload_time": "2021-10-07T04:49:03",
        "upload_time_iso_8601": "2021-10-07T04:49:03.374586Z",
        "url": "https://files.pythonhosted.org/packages/31/56/d3c3ba6966c9c307395cc7a23f5d22c9e7a160ce074bc9a6811f0ef6bf76/stest-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c6a36372bcf90f1383f570ce9376eece4326571e852656d682b2dbce0d1f702",
          "md5": "1cf8219e07ab6474def8f773e6e051b1",
          "sha256": "a932e8d46fa4c15d1ca68b89303a18adb0ff9cbf2f5d6e416471db05d5a21c95"
        },
        "downloads": -1,
        "filename": "stest-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1cf8219e07ab6474def8f773e6e051b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 211750,
        "upload_time": "2021-10-07T04:49:05",
        "upload_time_iso_8601": "2021-10-07T04:49:05.804274Z",
        "url": "https://files.pythonhosted.org/packages/3c/6a/36372bcf90f1383f570ce9376eece4326571e852656d682b2dbce0d1f702/stest-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f84164fa761ca36c31180d9a54f0bebd3d277c32660c7a00e34683d97cd9259",
          "md5": "2dce52205a1cf0d0060a4f4e720ed7f4",
          "sha256": "6013941055d1c6ae6bfbd2795d1c532cc845a54d8b0f1bb09962fab0d4b4acab"
        },
        "downloads": -1,
        "filename": "stest-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2dce52205a1cf0d0060a4f4e720ed7f4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 358126,
        "upload_time": "2021-10-13T03:03:56",
        "upload_time_iso_8601": "2021-10-13T03:03:56.791986Z",
        "url": "https://files.pythonhosted.org/packages/6f/84/164fa761ca36c31180d9a54f0bebd3d277c32660c7a00e34683d97cd9259/stest-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b70c4db4b628d280ff9e9819f33f06011013c2600302bf4844e63b82c642dfe",
          "md5": "2e3dd327490a0e21ee8ad5d31e9d1ec0",
          "sha256": "51af86723ef13a015eee7ef750bbe2b89b8eeea4378b043d690e1363509a55b3"
        },
        "downloads": -1,
        "filename": "stest-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2e3dd327490a0e21ee8ad5d31e9d1ec0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 644726,
        "upload_time": "2021-10-13T03:04:00",
        "upload_time_iso_8601": "2021-10-13T03:04:00.857089Z",
        "url": "https://files.pythonhosted.org/packages/5b/70/c4db4b628d280ff9e9819f33f06011013c2600302bf4844e63b82c642dfe/stest-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7816b3fb9446b5183b2bee9766ce2212630e9e576b7b01b6fbf749d268bc0979",
          "md5": "c7a0c5b2296f1443f2cbaa90f7657bda",
          "sha256": "6ac2836db1dbb5e2c58879cbbad59d386a2202161ce79e30cb6a61330ec77fbe"
        },
        "downloads": -1,
        "filename": "stest-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7a0c5b2296f1443f2cbaa90f7657bda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 215814,
        "upload_time": "2021-10-20T09:32:21",
        "upload_time_iso_8601": "2021-10-20T09:32:21.050388Z",
        "url": "https://files.pythonhosted.org/packages/78/16/b3fb9446b5183b2bee9766ce2212630e9e576b7b01b6fbf749d268bc0979/stest-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac2532c2263737f31080501c3a7ac982248d7190ed570e92c51b9613e865e3d8",
          "md5": "c0b018a7cc010901dca08ec3f9ba787b",
          "sha256": "cf0504ea9f747a76e2d08139117dd3afa44da7f115c152fd123e115fb58fd919"
        },
        "downloads": -1,
        "filename": "stest-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c0b018a7cc010901dca08ec3f9ba787b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 212076,
        "upload_time": "2021-10-20T09:32:23",
        "upload_time_iso_8601": "2021-10-20T09:32:23.907219Z",
        "url": "https://files.pythonhosted.org/packages/ac/25/32c2263737f31080501c3a7ac982248d7190ed570e92c51b9613e865e3d8/stest-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "128cc55946b893f84ff53c4a782ed10bba7fc9f3e3adc8f2c85119dc49c1a103",
          "md5": "b03f3bf14623ea452e3f20a40c0fb1ae",
          "sha256": "d54a5d8263133a229c7b2e090bb6c1e73027d6bbf4616e05a393df8a46eda0b0"
        },
        "downloads": -1,
        "filename": "stest-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b03f3bf14623ea452e3f20a40c0fb1ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 260682,
        "upload_time": "2022-04-08T14:41:14",
        "upload_time_iso_8601": "2022-04-08T14:41:14.884416Z",
        "url": "https://files.pythonhosted.org/packages/12/8c/c55946b893f84ff53c4a782ed10bba7fc9f3e3adc8f2c85119dc49c1a103/stest-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87d0729c2f70c027d49f61047ea67f7922ed8aa710182da3b6076cd1cd4c7adb",
          "md5": "53dbd7e63632b99eb91e1016c153b5f5",
          "sha256": "a3ecaec0e971580e6816163ed6addcbefb9eba8b4078b3bfb3d3bb13ea9d21f6"
        },
        "downloads": -1,
        "filename": "stest-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "53dbd7e63632b99eb91e1016c153b5f5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 268571,
        "upload_time": "2022-04-08T14:41:19",
        "upload_time_iso_8601": "2022-04-08T14:41:19.120542Z",
        "url": "https://files.pythonhosted.org/packages/87/d0/729c2f70c027d49f61047ea67f7922ed8aa710182da3b6076cd1cd4c7adb/stest-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8dd11e533f2b9a88e87b168f1e3dcfd18af95ab37c1561fde29b864666a052e",
          "md5": "762c0a9ec12c36cfb5ddbe219ed96be1",
          "sha256": "f2ba2435b8493072bc336dab13d80fae4aa137fcbf0518f6190285536998114a"
        },
        "downloads": -1,
        "filename": "stest-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "762c0a9ec12c36cfb5ddbe219ed96be1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 261105,
        "upload_time": "2022-04-23T07:26:36",
        "upload_time_iso_8601": "2022-04-23T07:26:36.707849Z",
        "url": "https://files.pythonhosted.org/packages/f8/dd/11e533f2b9a88e87b168f1e3dcfd18af95ab37c1561fde29b864666a052e/stest-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "074edba767edde0a6f0cb0ac200581216814559d546511f32141963d4a167bd5",
          "md5": "0d37d57133c2ee21d29017a137a26481",
          "sha256": "7dcb52dd62f05ee8dad47eda4b84c0395ed6b367eb6d97ca411fad6a18d418a3"
        },
        "downloads": -1,
        "filename": "stest-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0d37d57133c2ee21d29017a137a26481",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 269042,
        "upload_time": "2022-04-23T07:26:39",
        "upload_time_iso_8601": "2022-04-23T07:26:39.875158Z",
        "url": "https://files.pythonhosted.org/packages/07/4e/dba767edde0a6f0cb0ac200581216814559d546511f32141963d4a167bd5/stest-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "834132ff3be5a9113a06536a00bbd22e0e5dd971a5b5a0326f26afbb3f57db19",
          "md5": "365aeafd9e19eae8436b6f606e6d1d04",
          "sha256": "5dbe6567b29cfb1f459b869b8f8b06f8199a2e974bc356944e41aff2e3b8b079"
        },
        "downloads": -1,
        "filename": "stest-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "365aeafd9e19eae8436b6f606e6d1d04",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 261574,
        "upload_time": "2023-02-05T06:30:26",
        "upload_time_iso_8601": "2023-02-05T06:30:26.705533Z",
        "url": "https://files.pythonhosted.org/packages/83/41/32ff3be5a9113a06536a00bbd22e0e5dd971a5b5a0326f26afbb3f57db19/stest-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77be6c97fb51448d7a956e4b8ea42ec94bd1ba9639638d6916a12b859688c1cf",
          "md5": "f0d904995539bcd8d6009d80ad5f7bc8",
          "sha256": "c038635a91f70743c6ba54e31511c45453ff3d1d4873f446f7bd5c75cedbc954"
        },
        "downloads": -1,
        "filename": "stest-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "f0d904995539bcd8d6009d80ad5f7bc8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 269685,
        "upload_time": "2023-02-05T06:30:29",
        "upload_time_iso_8601": "2023-02-05T06:30:29.624097Z",
        "url": "https://files.pythonhosted.org/packages/77/be/6c97fb51448d7a956e4b8ea42ec94bd1ba9639638d6916a12b859688c1cf/stest-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "834132ff3be5a9113a06536a00bbd22e0e5dd971a5b5a0326f26afbb3f57db19",
        "md5": "365aeafd9e19eae8436b6f606e6d1d04",
        "sha256": "5dbe6567b29cfb1f459b869b8f8b06f8199a2e974bc356944e41aff2e3b8b079"
      },
      "downloads": -1,
      "filename": "stest-1.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "365aeafd9e19eae8436b6f606e6d1d04",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 261574,
      "upload_time": "2023-02-05T06:30:26",
      "upload_time_iso_8601": "2023-02-05T06:30:26.705533Z",
      "url": "https://files.pythonhosted.org/packages/83/41/32ff3be5a9113a06536a00bbd22e0e5dd971a5b5a0326f26afbb3f57db19/stest-1.0.5-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "77be6c97fb51448d7a956e4b8ea42ec94bd1ba9639638d6916a12b859688c1cf",
        "md5": "f0d904995539bcd8d6009d80ad5f7bc8",
        "sha256": "c038635a91f70743c6ba54e31511c45453ff3d1d4873f446f7bd5c75cedbc954"
      },
      "downloads": -1,
      "filename": "stest-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "f0d904995539bcd8d6009d80ad5f7bc8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 269685,
      "upload_time": "2023-02-05T06:30:29",
      "upload_time_iso_8601": "2023-02-05T06:30:29.624097Z",
      "url": "https://files.pythonhosted.org/packages/77/be/6c97fb51448d7a956e4b8ea42ec94bd1ba9639638d6916a12b859688c1cf/stest-1.0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}