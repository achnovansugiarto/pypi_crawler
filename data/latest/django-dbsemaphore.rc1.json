{
  "info": {
    "author": "nullenenenen",
    "author_email": "nullenenenen@gavagai.eu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Database",
      "Topic :: Software Development"
    ],
    "description": "# Django-DBSemaphore\n\nThis gives you multi-ticket DB-defined semaphores implemented on top of DB row locks.\n\n# Alternatives\n\nThe orthodox alternatives are:\n- Posix semaphores (eg using [posix_ipc](https://pypi.org/project/posix-ipc/))\n- SysV semaphores (eg using [sysv-ipc](https://pypi.org/project/sysv-ipc/))\n\n## Why not use those then?\nIf a process which holds a Posix or SysV mutex ticket crashes while holding the ticket, it can't return it to the semaphore.\nThus, you can leak tickets.\nBut if a process which holds a ticket from Django-DBSemaphore crashes, its database connection goes with it, which terminates the DB transaction and frees the ticket. Crashing processes don't leak tickets.\n\n## And why not a lockfile?\nLocked files (or locked byte ranges) disappear when a process crashes; its file descriptors are gone thus so are its locks.\nThat's a great property. However, file locks are not multi-ticket. The file (or byterange therein) is either locked or not.\nThe OS file locking APIs are good to implement *mutexes* with, but not *semaphores* — except, trivially, a 1-ticket semaphore — which is a mutex ;-).\n\n# Quirks\n- In contrast to Posix/SysV semaphores and `lockf`-based approaches, with django-dbsemaphore you can't block until a ticket becomes available.\n- From within the same transaction you can acquire tickets you already have over and over. In fact, it's currently impossible to get new tickets of a semaphore on a transaction that already has a ticket of that same semaphore. Typically, you won't need multiple tickets of the same semaphore in the same transaction, but a future version of this software might make it possible. In the meantime, consider using multiple semaphores for your multistage semaphore needs.\n- They work within transactions. You'll need to structure your ticket acquisitions around DB transactions, and close those transactions (rollback or commit) to return the tickets. There's no other way to return a ticket.\n\n# Compatibility\nCurrently this is tested on PostgreSQL 14 and Django 3.2.\n- It currently doesn't work on SQLite due to the way in which tables are locked in `semaphore.make()`\n- MySQL, Oracle: Untested.\n- (neat) Patches welcome!\n\n# Installing\n1. `pip install django-dbsemaphore`\n2. add 'dbsemaphore' to your Django's `settings.INSTALLED_APPS`.\n3. run `./manage.py migrate dbsemaphore` or some variation of such\n\n# How to use it\n\nRun the Django test, or read `test.py`, or have a look at the below:\n\n```python\nfrom dbsemaphore import semaphore as sem\n\n# Semaphore management\n\n# Creates a semaphore called 'test' with 3 tickets\n>>> sem.make('test', 3)\n\n# Increases the number of tickets of semaphore 'test' to 4.\n# Blocks on concurrent calls of `make`.\n# If 'test' doesn't exist, it will be created (with 4 tickets).\n>>> sem.make('test', 4)\n\n# Decreases the number of tickets of semaphore 'test' to 2.\n# This can block, in the worst case until all tickets have been returned.\n# As `make` calls block on eachother, this thus also blocks any *increase* of tickets until this decrease has succeeded.\n>>> sem.make('test', 2)\n\n# Returns a dictionary of available semaphores, with their ticket counts.\n>>> sem.list()\n{'test', 2}\n\n# Destroys the semaphore. Blocks until all its tickets have been returned.\n>>> sem.destroy('test')\n\n\n# Acquiring tickets; what we're here for!\n\nfrom django.db import transaction\n\n@transaction.atomic\ndef do_something_potentially_from_many_processes_or_threads_but_not_too_many_at_the_same_time():\n    if ticket := sem.acquire('test'):\n        do_that_something()\n\n# When the transaction terminates, the ticket is returned to the semaphore.\n# In fact, there isn't any API function to explicitly return a ticket...\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://hub.sr.ht/~nullenenenen/django-dbsemaphore/",
    "keywords": "Django semaphore",
    "license": "LGPL-3.0+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-dbsemaphore",
    "package_url": "https://pypi.org/project/django-dbsemaphore/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-dbsemaphore/",
    "project_urls": {
      "Documentation": "https://git.sr.ht/~nullenenenen/django-dbsemaphore/tree/master/item/README.md",
      "Homepage": "https://hub.sr.ht/~nullenenenen/django-dbsemaphore/",
      "Source": "https://git.sr.ht/~nullenenenen/django-dbsemaphore/"
    },
    "release_url": "https://pypi.org/project/django-dbsemaphore/0.0.1/",
    "requires_dist": [
      "Django (>=3.2.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "django-dbsemaphore — multi-ticket semaphores implemented on top of DB row locks",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14939829,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "94bb47d25330858aaa88095dead1efdc10f363aa19d07c790192cd05d7eee69a",
          "md5": "d345d5d48f946c6511161ba9a2864589",
          "sha256": "569e55e9cebe94a6128ea426e12ba903f0332d3b6bf2cf994fc688838ada6932"
        },
        "downloads": -1,
        "filename": "django_dbsemaphore-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d345d5d48f946c6511161ba9a2864589",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10730,
        "upload_time": "2022-08-30T20:34:51",
        "upload_time_iso_8601": "2022-08-30T20:34:51.749555Z",
        "url": "https://files.pythonhosted.org/packages/94/bb/47d25330858aaa88095dead1efdc10f363aa19d07c790192cd05d7eee69a/django_dbsemaphore-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "172dc5af2876bb9ecaad9cb993a0bf6faa83fb2612b6fe011bf39611fe56bcac",
          "md5": "5ddddf17d327b12cb36079ced63255d4",
          "sha256": "329bcd90e19397bcd775e43435fd2184ab29a20ed810b6a9dc339ce0a726861a"
        },
        "downloads": -1,
        "filename": "django-dbsemaphore-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5ddddf17d327b12cb36079ced63255d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 10979,
        "upload_time": "2022-08-30T20:34:56",
        "upload_time_iso_8601": "2022-08-30T20:34:56.655015Z",
        "url": "https://files.pythonhosted.org/packages/17/2d/c5af2876bb9ecaad9cb993a0bf6faa83fb2612b6fe011bf39611fe56bcac/django-dbsemaphore-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "94bb47d25330858aaa88095dead1efdc10f363aa19d07c790192cd05d7eee69a",
        "md5": "d345d5d48f946c6511161ba9a2864589",
        "sha256": "569e55e9cebe94a6128ea426e12ba903f0332d3b6bf2cf994fc688838ada6932"
      },
      "downloads": -1,
      "filename": "django_dbsemaphore-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d345d5d48f946c6511161ba9a2864589",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 10730,
      "upload_time": "2022-08-30T20:34:51",
      "upload_time_iso_8601": "2022-08-30T20:34:51.749555Z",
      "url": "https://files.pythonhosted.org/packages/94/bb/47d25330858aaa88095dead1efdc10f363aa19d07c790192cd05d7eee69a/django_dbsemaphore-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "172dc5af2876bb9ecaad9cb993a0bf6faa83fb2612b6fe011bf39611fe56bcac",
        "md5": "5ddddf17d327b12cb36079ced63255d4",
        "sha256": "329bcd90e19397bcd775e43435fd2184ab29a20ed810b6a9dc339ce0a726861a"
      },
      "downloads": -1,
      "filename": "django-dbsemaphore-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5ddddf17d327b12cb36079ced63255d4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 10979,
      "upload_time": "2022-08-30T20:34:56",
      "upload_time_iso_8601": "2022-08-30T20:34:56.655015Z",
      "url": "https://files.pythonhosted.org/packages/17/2d/c5af2876bb9ecaad9cb993a0bf6faa83fb2612b6fe011bf39611fe56bcac/django-dbsemaphore-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}