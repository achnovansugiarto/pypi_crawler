{
  "info": {
    "author": "Nico Coetzee",
    "author_email": "nicc777@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "An easy to use wrapper around [PyJWT](https://pyjwt.readthedocs.io/en/stable/index.html) for authentication and authorization.\n\n- [Why this may be useful](#why-this-may-be-useful)\n- [Quick Start](#quick-start)\n  - [Installation](#installation)\n  - [Implement your own `BackEndAuthenticator`](#implement-your-own-backendauthenticator)\n  - [Authenticating a user that supplies a username and password](#authenticating-a-user-that-supplies-a-username-and-password)\n  - [Authorize an API request using the `access_token` from Authentication](#authorize-an-api-request-using-the-access_token-from-authentication)\n  - [Important Parameters](#important-parameters)\n    - [Using the password salt](#using-the-password-salt)\n    - [Using the JWT secret](#using-the-jwt-secret)\n  - [Using the Refresh Token](#using-the-refresh-token)\n- [Implementation](#implementation)\n  - [Authentication](#authentication)\n  - [The JSON Web Token (generated from `pyjwt_wrapper.authentication`)](#the-json-web-token-generated-from-pyjwt_wrapperauthentication)\n    - [Access Token](#access-token)\n    - [User Token](#user-token)\n  - [Authorization (as implemented by from `pyjwt_wrapper.authorization`)](#authorization-as-implemented-by-from-pyjwt_wrapperauthorization)\n  - [Logging](#logging)\n- [Testing from Source](#testing-from-source)\n- [To Do](#to-do)\n\n**_Note_**: The development is still in an early stage, and therefore documentation should improve over time. Right now, only some basic concepts are covered.\n\n# Why this may be useful\n\nPyJWT is a really solid library and a very useful tool for creating and using JSON Web tokens (JWT) in applications. Check out https://jwt.io/ for more info around JSON Web Tokens.\n\nThis library is a wrapper around PyJWT that creates a standard `access token` and `user token`.\n\n**_Note_**: Refresh tokens to come soon...\n\n# Quick Start\n\n## Installation \n\n```shell\npip install pyjwt-wrapper\n```\n\nPyPi page: https://pypi.org/project/pyjwt-wrapper/ \n\n## Implement your own `BackEndAuthenticator`\n\nBelow is a quick example of how you would implement your own password based authentication. In stead of users being in a dictionary, you would typically connect to a database.\n\n**_Note_**: The example below assumes the password is encoded using SHA256. However, when a user enters a password, we will receive it in normal text format which means it also needs to be SHA256 converted in order to compare to the password on record.\n\nYou would typically implement in this code in the application/API that handles authentication.\n\n```python\nfrom pyjwt_wrapper import Logger, BackEndAuthenticator, AuthenticationResult, generate_jwt, PASSWORD_SALT\nimport traceback\nimport hashlib\n\n\nclass MyBackEndAuthenticator(BackEndAuthenticator):\n    def __init__(self, logger: Logger=Logger()):\n        super().__init__(logger=logger)\n    def authenticate(self, input: dict, request_id: str=None)->AuthenticationResult:\n        my_hard_coded_users = {\n            'user1': {\n                'password': hashlib.sha256('!paSsWord123!{}'.format(PASSWORD_SALT).encode('utf-8')).hexdigest(),\n                'permissions': ['p1', 'p2'],\n                'active': True\n            }\n        }\n        result = AuthenticationResult(\n            success=False,\n            userid=None,\n            permissions=list()\n        )\n        try:\n            input_password_hashed = hashlib.sha256('{}{}'.format(input['password'], PASSWORD_SALT).encode('utf-8')).hexdigest()\n            if input['username'] in my_hard_coded_users:\n                if my_hard_coded_users[input['username']]['active']:\n                    if input_password_hashed == my_hard_coded_users[input['username']]['password']:\n                        result.success = True\n                        result.userid = input['username']\n                        result.permissions = my_hard_coded_users[input['username']]['permissions']\n                        self.logger.info(message='LOGIN SUCCESS for user \"{}\"'.format(input['username']), request_id=request_id)\n                    else:\n                        self.logger.error(message='LOGIN FAIL for user \"{}\" - incorrect password'.format(input['username']), request_id=request_id)\n                else:\n                    self.logger.error(message='LOGIN FAIL for user \"{}\" - user not active'.format(input['username']), request_id=request_id)\n            else:\n                self.logger.error(message='LOGIN FAIL for user \"{}\" - user not found'.format(input['username']), request_id=request_id)\n        except:\n            self.logger.error(message='EXCEPTION: {}'.format(traceback.format_exc()), request_id=request_id)\n        return result\n```\n\n## Authenticating a user that supplies a username and password\n\nYou would also implement in this code in the application/API that handles authentication.\n\n```python\nfrom pyjwt_wrapper.authentication import  authenticate_using_user_credentials\n\n# This part would tyically be implemented in a function that receives the username and password\nresult = authenticate_using_user_credentials(\n    application_name='my_awesome_app',\n    username='user1',\n    password='!paSsWord123!',\n    request_id='test123',\n    backend=MyBackEndAuthenticator()\n)\n\n# Return the result to the client...\n```\n\nThe result may look something like this:\n\n```python\n{\n    'user_token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJteV9hd2Vzb21lX2FwcCIsInN1YiI6InVzZXIxIiwiY29udGV4dCI6Im15X2F3ZXNvbWVfYXBwIn0.qylm2cpukiUzCAjeDhO99iTMAWwdjuJKt4Jb2q0np2A', \n    'access_token': 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJteV9hd2Vzb21lX2FwcCIsInN1YiI6InVzZXIxIiwiYXVkIjoibXlfYXdlc29tZV9hcHAiLCJleHAiOjE2MTYzMTg1MTYsIm5iZiI6MTYxNjIzMjExNiwiaWF0IjoxNjE2MjMyMTE2LCJqdGkiOiJ0ZXN0MTIzIiwicHJtIjpbInAxIiwicDIiXX0.3UXG_fasgaj88ujbltHKqNUgJA1DJX9O6C6-i0Y1cIU', \n    'request_id': 'test123'\n}\n```\n\nYou should then use the `access_token` in every API call you make.\n\n## Authorize an API request using the `access_token` from Authentication\n\nThe authorization code is implemented in applications/API that receives requests from the user, which is why each request must include the `access_token`.\n\n```python\nfrom pyjwt_wrapper.authorization import authorize_token\n\nauthorized = authorize_token(\n    token=result['access_token'], \n    application_name='my_awesome_app',\n    request_id='api123'\n)\n```\n\nThe resulting value from `authorized` should be `True`\n\n## Important Parameters\n\nThere are two parameters that are important to take note of:\n\n* `PASSWORD_SALT` - The salt used for added protection when storing passwords.\n* `JWT_SECRET` - The secret required to encrypt and validate a JWT\n\n### Using the password salt\n\nDepending on your `BackEndAuthenticator` implementation, the `PASSWORD_SALT` may be considered optional. It's provided as a convenient way to include the parameter.\n\nWhen your user register, your application should add some salt to ensure the password is even better protected when storing it in a database.\n\nFirst, in the environment your application run, ensure the `PASSWORD_SALT` is set as an environment variable. This can be done using the following shell command on Linux like operating systems:\n\n```shell\nexport PASSWORD_SALT=\"some really random text and special characters.\"\n```\n\nTypically, you will salt the password with something like:\n\n```python\nuser_password = '....' # Store the user's password in a variable \nhashed_password = hashlib.sha256('{}{}'.format(user_password, PASSWORD_SALT).encode('utf-8')).hexdigest()\n\n# You can now save the hashed_password in a database\n```\n\nIf you want to generate a strong salt once-off, you can run the following shell command:\n\n```shell\npython3 -c \"from pyjwt_wrapper import generate_random_string; print('{}'.format(generate_random_string(length=60)))\"\n```\n\n**_Important_**: You need to safely and securely store your salt value as any password validation will be rendered useless if you don't have the original salt it was hashed with\n\n### Using the JWT secret\n\nThe JWT secret is required and as with the password salt, you need to store it safely and securely. If you ever need to change the secret, any existing tokens created with the previous secret will not pass validation and all users would have to re-authenticate to get new tokens issued with the new secret.\n\nAgain, you can use the following one-liner utility to generate the secret:\n\n```shell\npython3 -c \"from pyjwt_wrapper import generate_random_string; print('{}'.format(generate_random_string(length=60)))\"\n```\n\nSet the following environment variable in your application environment:\n\n```shell\nexport JWT_SECRET=\"some really random text and special characters.\"\n```\n\n## Using the Refresh Token\n\nIf your front-end application gets an authorization error and you have a refresh token, you need to use the refresh token to get another set of access and refresh tokens. \n\nOnly once the refresh token have also reached expiry, must the application re-authenticate the user to get a fresh set of tokens. Form the front-end, this action can be triggered when both an API request and a refresh tokens request returned an error.\n\nThe refresh token by default only does the following basic checks in order to decide if the access token can be refreshed:\n\n* Validate the supplied access token checksum is equal to the original calculated checksum\n* Validate that the refresh token has not expired\n\nIf you need to do some additional validation, for example checking a back-end to see that the user account is still active, you can implement a function to do tat and pass it to the `refresh_tokens` function as a parameter. Here is an example:\n\n```python\nfrom pyjwt_wrapper.authentication import refresh_tokens\nimport traceback\n\ndef my_validation_function(*args)->bool:\n    final_result = False # fail safely\n    application_name = args[9]\n    decoded_access_token = args[1]\n    decoded_refresh_token = args[2]\n    logger = args[3]\n    request_id = args[4]\n    secret_str = args[5]\n    try:\n        # Do your own checks here....\n        pass\n    except:\n        logger.error(message='EXCEPTION: {}'.format(traceback.format_exc()), request_id=request_id)\n    return final_result\n\n\n# Later, call the refresh tokens function.\n#\n# In this example, if the validation function throws an exception, the default \n# behavior is changed to still force a success\n#\n# The access_token and _refresh_token is supplied by the calling client to your refresh API\nrefresh_tokens(\n    application_name='your-great-app',\n    access_token=access_token,\n    refresh_token=refresh_token,\n    request_id=request_id,\n    user_validation_function=my_validation_function,\n    default_user_validation_function_result_on_exception=True\n)\n```\n\n# Implementation\n\nThis library can be used in two different contexts:\n\n1. During user authentication which will result in a `access_token` and `user_token` being issues\n2. During API requests, where a previously issued `access_token` is validated and some tests are done before the request is authorized.\n\nFor the authentication portion, you will probably implement this library at the authentication API end-point.\n\nFor authorization, you would typically implement this library in your API Gateway or proxy server in the authorization leg.\n\n## Authentication\n\nYou will still need to implement the actual method of authentication. This process is facilitated by the `BackEndAuthenticator` class which you need to extend with your own implementation of the `authenticate` method.\n\nThe `authenticate` method returns a `AuthenticationResult` which contains enough information to finally construct the dictionary that will hold the `access token` and `user token`.\n\n## The JSON Web Token (generated from `pyjwt_wrapper.authentication`)\n\nThus far, this library only support `username` and `password` authentication in a function called `authenticate_using_user_credentials` (name may change in future).\n\n### Access Token\n\nThe access token is typically used by one application that is requesting resources from another application to authorize the first application. The authorization is usually done by some kind of a proxy in front of the second application. A web page rendered in a user's web browser that requests some data from an application hosted on the Internet is a typical example of this setup. In this case the web page will include the `access_token` with each request to the application API. Each request has to pass the authorization check before the application will respond with the requested data.\n\nThere are a number of resources on the Internet that will explain in a lot more detail the mechanics of authorization, but Auth0 has a very good [lightweight explanation](https://auth0.com/docs/tokens/json-web-tokens/validate-json-web-tokens) of how the process would work.\n\nThe `access_token` contains the following elements:\n\n* `iss` - The [issuer claim](https://tools.ietf.org/html/rfc7519#section-4.1.1) which is the value of the `application_name` parameter. In web applications you could derive this from the `Host` header.\n* `sub` - The [subject claim](https://tools.ietf.org/html/rfc7519#section-4.1.2) is currently mapped to the `username` in username/passwords authentication\n* `aud` - The [audience claim](https://tools.ietf.org/html/rfc7519#section-4.1.3) which is also mapped to the `application_name` parameter at the moment.\n* `exp` - The [expiration time claim](https://tools.ietf.org/html/rfc7519#section-4.1.4) which is the Unix timestamp (UTC) after which this token is no longer considered valid.\n* `nbf` - The [not before claim](https://tools.ietf.org/html/rfc7519#section-4.1.5) which is set to the Unix timestamp (UTC) of token creation\n* `iat` - The [issued at claim](https://tools.ietf.org/html/rfc7519#section-4.1.6) which is set to the Unix timestamp (UTC) of token creation\n* `jti` - The [JWT ID claim](https://tools.ietf.org/html/rfc7519#section-4.1.7) which is mapped to the `request_id` parameter\n* `prm` - A list of permission names (strings) that was valid for the user at the time of authentication. This may be useful in some front-end application to decide which components to render. For example, only provide administrator controls/components to the users that have admin rights.\n* `extra` - An optional parameter that will only be present if the `BackEndAuthenticator` included extra data to include in the token. This is a standard dictionary and should only contain primitives.\n\n### User Token\n\nThe user token (also known as the ID token) contains basic user profile information. \n\nThe `access_token` contains the following elements:\n\n* `iss` - The [issuer claim](https://tools.ietf.org/html/rfc7519#section-4.1.1) which is the value of the `application_name` parameter. In web applications you could derive this from the `Host` header.\n* `sub` - The [subject claim](https://tools.ietf.org/html/rfc7519#section-4.1.2) is currently mapped to the `username` in username/passwords authentication\n* `context` - This value is from the `application_name` parameter.\n* `extra` - An optional parameter that will only be present if the `BackEndAuthenticator` included extra data to include in the token. This is a standard dictionary and should only contain primitives.\n\n## Authorization (as implemented by from `pyjwt_wrapper.authorization`)\n\nDuring the authorization phase, PyJWT is used for the general token validation.\n\nIn addition, the `authorize_token` takes a number of other parameters used in the authorization process:\n\n* `application_name`, which will be used to validate the `aud` claim\n* `required_permission` which is a parameter you pass in based on the type of request. The function will test if this value is present in the `prm` claim values.\n\n## Logging\n\nThe library utilizes the standard [Python logging framework](https://docs.python.org/3/library/logging.html) and by default will use a STDOUT log handler.\n\nMost functions takes a `logger` parameter which implements the `Logger` class. If you create your own [handler](https://docs.python.org/3/howto/logging.html#useful-handlers), just create it yourself and initialize `Logger` with your handler. \n\nExample:\n\n```python\nfrom pyjwt_wrapper import Logger\nimport logging\n\nfh = logging.FileHandler('spam.log')\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfh.setFormatter(formatter)\n\nmy_logger = Logger(logging_handler=fh)\n\n# later usage...\nfrom pyjwt_wrapper.authentication import authenticate_using_user_credentials\n\nauth_result = authenticate_using_user_credentials(\n    application_name='my_aoo',\n    username='some_user@example.tld',\n    password='the world strongest password',\n    logger=my_logger,\n)\n\n# Use the logger in your own app:\nmy_logger.info(message='This is a test', request_id='some-request-reference...')\n```\n\n# Testing from Source\n\nBasic steps:\n\n1. Clone the repository\n2. Create a Python Virtual Environment\n3. Install dependencies\n4. Run the unit tests\n5. Get teh coverage reports\n\nThe steps above can all be summarized in the following list of Unix commands (bash or zsh):\n\n```shell\n# Clone the repository\ngit clone https://github.com/nicc777/pyjwt-wrapper.git\n\ncd pyjwt-wrapper\n\n# Create a Python Virtual Environment\npython -m venv venv\n\n. venv/bin/activate\n\n# Install dependencies\npip install pyjwt coverage\n\n# Run the unit tests\ncoverage run --source ./src -m unittest discover\n\n# Get teh coverage reports\ncoverage report -m\n```\n\n# To Do\n\n* Create a customizable authorization class\n* Create authorization caching feature\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/nicc777/pyjwt-wrapper",
    "keywords": "jwt,pyjwt,library",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyjwt-wrapper",
    "package_url": "https://pypi.org/project/pyjwt-wrapper/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyjwt-wrapper/",
    "project_urls": {
      "Bug Reports": "https://github.com/nicc777/pyjwt-wrapper/issues",
      "Homepage": "https://github.com/nicc777/pyjwt-wrapper",
      "Source": "https://github.com/nicc777/pyjwt-wrapper"
    },
    "release_url": "https://pypi.org/project/pyjwt-wrapper/0.6.0/",
    "requires_dist": [
      "pyjwt",
      "check-manifest ; extra == 'dev'",
      "coverage ; extra == 'test'"
    ],
    "requires_python": ">=3.7, <4",
    "summary": "An easy to use wrapper around PyJWT for authentication and authorization.",
    "version": "0.6.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9834454,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6ca29011abcc4b6ffef172dc419eea476784047196b64ecc46f4e0161256ae6a",
          "md5": "9dc1388adb809c42ae2085c5f0a6fc94",
          "sha256": "e5eac9034941dcf17bbc0e39d04a99f061970f1d6d2d57e058ee2f377057ffa6"
        },
        "downloads": -1,
        "filename": "pyjwt_wrapper-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9dc1388adb809c42ae2085c5f0a6fc94",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <4",
        "size": 7719,
        "upload_time": "2021-03-20T08:45:13",
        "upload_time_iso_8601": "2021-03-20T08:45:13.816768Z",
        "url": "https://files.pythonhosted.org/packages/6c/a2/9011abcc4b6ffef172dc419eea476784047196b64ecc46f4e0161256ae6a/pyjwt_wrapper-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74845a2e22bf23d13ea2674ef0474cff55ed27dde400b956e9cdffc2e48e2f0a",
          "md5": "7b207989a87f5261341db7cd08799f3c",
          "sha256": "fa565243f21a3b683e20370c4f580a841906e8548fbf5ca97fa1a15b61d15a5f"
        },
        "downloads": -1,
        "filename": "pyjwt-wrapper-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7b207989a87f5261341db7cd08799f3c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5, <4",
        "size": 10510,
        "upload_time": "2021-03-20T08:45:15",
        "upload_time_iso_8601": "2021-03-20T08:45:15.516219Z",
        "url": "https://files.pythonhosted.org/packages/74/84/5a2e22bf23d13ea2674ef0474cff55ed27dde400b956e9cdffc2e48e2f0a/pyjwt-wrapper-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07563d998de4b77ef66bb06b5874145b656e0dfb4befae8b63314926770a9d22",
          "md5": "bfb26c5c8ad324157b37f454dadcae5a",
          "sha256": "568875f927916267a737aeaf22309e4d5866238f096ae1fe64f0bd25b77889bb"
        },
        "downloads": -1,
        "filename": "pyjwt_wrapper-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bfb26c5c8ad324157b37f454dadcae5a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5, <4",
        "size": 9307,
        "upload_time": "2021-03-20T09:40:09",
        "upload_time_iso_8601": "2021-03-20T09:40:09.347630Z",
        "url": "https://files.pythonhosted.org/packages/07/56/3d998de4b77ef66bb06b5874145b656e0dfb4befae8b63314926770a9d22/pyjwt_wrapper-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5dc5cdc8f3a7681b3bfc608e0058b977badbeaf6f2e6b6af18ed6263233b0c81",
          "md5": "05f0d63a75c790908337d2b9a935c312",
          "sha256": "b91c496838cd4d8f98fc63e1551cb2cdf111766a3e208596bc9e91eb44bc1960"
        },
        "downloads": -1,
        "filename": "pyjwt-wrapper-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "05f0d63a75c790908337d2b9a935c312",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5, <4",
        "size": 13788,
        "upload_time": "2021-03-20T09:40:11",
        "upload_time_iso_8601": "2021-03-20T09:40:11.596380Z",
        "url": "https://files.pythonhosted.org/packages/5d/c5/cdc8f3a7681b3bfc608e0058b977badbeaf6f2e6b6af18ed6263233b0c81/pyjwt-wrapper-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "efc1728f2cf86ab64dd5e7e5a77d9db10e07e5ebceb3e8557ea41785e6732b0d",
          "md5": "29dd99c98953a47ef17364447b8af3be",
          "sha256": "3dbd7e7cdd94bf07c501124172fb0de5f6ff3a3d50eaee1527cd40748575bdd0"
        },
        "downloads": -1,
        "filename": "pyjwt_wrapper-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29dd99c98953a47ef17364447b8af3be",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 12203,
        "upload_time": "2021-03-21T10:41:46",
        "upload_time_iso_8601": "2021-03-21T10:41:46.810266Z",
        "url": "https://files.pythonhosted.org/packages/ef/c1/728f2cf86ab64dd5e7e5a77d9db10e07e5ebceb3e8557ea41785e6732b0d/pyjwt_wrapper-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "250422009a6f632a258b386b23852284d243a48c644b6e9890eae792c5f39b77",
          "md5": "196fdad35ecf58cb7793c4c1f7d3ff9e",
          "sha256": "e923db5fb531c9a14c4c68ea4faf9405be1cb7fdfc628d48587d8101685ec6f7"
        },
        "downloads": -1,
        "filename": "pyjwt-wrapper-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "196fdad35ecf58cb7793c4c1f7d3ff9e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 18201,
        "upload_time": "2021-03-21T10:41:49",
        "upload_time_iso_8601": "2021-03-21T10:41:49.751786Z",
        "url": "https://files.pythonhosted.org/packages/25/04/22009a6f632a258b386b23852284d243a48c644b6e9890eae792c5f39b77/pyjwt-wrapper-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "efc1728f2cf86ab64dd5e7e5a77d9db10e07e5ebceb3e8557ea41785e6732b0d",
        "md5": "29dd99c98953a47ef17364447b8af3be",
        "sha256": "3dbd7e7cdd94bf07c501124172fb0de5f6ff3a3d50eaee1527cd40748575bdd0"
      },
      "downloads": -1,
      "filename": "pyjwt_wrapper-0.6.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "29dd99c98953a47ef17364447b8af3be",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7, <4",
      "size": 12203,
      "upload_time": "2021-03-21T10:41:46",
      "upload_time_iso_8601": "2021-03-21T10:41:46.810266Z",
      "url": "https://files.pythonhosted.org/packages/ef/c1/728f2cf86ab64dd5e7e5a77d9db10e07e5ebceb3e8557ea41785e6732b0d/pyjwt_wrapper-0.6.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "250422009a6f632a258b386b23852284d243a48c644b6e9890eae792c5f39b77",
        "md5": "196fdad35ecf58cb7793c4c1f7d3ff9e",
        "sha256": "e923db5fb531c9a14c4c68ea4faf9405be1cb7fdfc628d48587d8101685ec6f7"
      },
      "downloads": -1,
      "filename": "pyjwt-wrapper-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "196fdad35ecf58cb7793c4c1f7d3ff9e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <4",
      "size": 18201,
      "upload_time": "2021-03-21T10:41:49",
      "upload_time_iso_8601": "2021-03-21T10:41:49.751786Z",
      "url": "https://files.pythonhosted.org/packages/25/04/22009a6f632a258b386b23852284d243a48c644b6e9890eae792c5f39b77/pyjwt-wrapper-0.6.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}