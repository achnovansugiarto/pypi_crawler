{
  "info": {
    "author": "Andrey Fedoseev",
    "author_email": "andrey.fedoseev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "========================\ndjango-asset-definitions\n========================\n\n.. image:: https://circleci.com/gh/andreyfedoseev/django-asset-definitions.svg?style=shield\n    :target: https://circleci.com/gh/andreyfedoseev/django-asset-definitions\n    :alt: Build Status\n\n.. image:: https://codecov.io/github/andreyfedoseev/django-asset-definitions/coverage.svg?branch=master\n    :target: https://codecov.io/github/andreyfedoseev/django-asset-definitions?branch=master\n    :alt: Code Coverage\n\nAsset definitions are collections of static files (JavaScript, CSS) defined in Python code and (re)used in Django views\nand templates.\n\nAn example of asset definition is ``Media`` class that you can\n`define in Django forms <https://docs.djangoproject.com/en/1.11/topics/forms/media/>`_.\n\n``django-asset-definitions`` aim to extend the application of asset definitions beyond forms and use them as the main\nway to describe and organize JavaScript and CSS files.\n\nInstallation\n============\n\n.. code-block:: sh\n\n    pip install django-asset-definitions\n\n\nUsage\n=====\n\nDefine:\n-------\n\n.. code-block:: python\n\n  import asset_definitions\n\n  my_media = asset_definitions.Media(\n      js=(\n          \"media.js\",\n          \"\"\"<script>window.addEventListener(\"load\", function() {console.log(\"Loaded!\");});</script>\"\"\",\n      ),\n      css={\n          \"all\": (\n              \"media.css\",\n          ),\n      }\n  )\n\nCombine:\n--------\n\n.. code-block:: python\n\n  extended_media = my_media + asset_definitions.Media(\n      js=(\"extension.js\", )\n  )\n\n\nDefine in views:\n----------------\n\n.. code-block:: python\n\n  import asset_definitions\n\n  class MyView(asset_definitions.MediaDefiningView, ...):\n\n      class Media:\n          js = (\n              \"media.js\",\n          )\n          css = {\n              \"all\": (\n                  \"media.css\",\n              ),\n          }\n\n      ...\n\nForm media is added to view media automatically:\n\n.. code-block:: python\n\n  import asset_definitions\n  from django.views.generic import FormView\n\n  class MyFormView(asset_definitions.MediaDefiningView, FormView):\n      ...\n\nUse in templates:\n-----------------\n\n.. code-block:: django\n\n  {{ view.media.render }}\n\nOr:\n\n.. code-block:: django\n\n  {{ view.media.js.render }}\n  {{ view.media.css.render }}\n\n\nSee an extended example below.\n\n\n``asset_definitions.Media`` and ``django.forms.Media``\n======================================================\n\n1. ``asset_definitions.Media`` provides the same API as ``django.forms.Media``. In fact, it is inherited from\n   ``django.forms.Media``.\n2. It is safe to combine ``asset_definitions.Media`` with ``django.forms.Media``.\n3. ``asset_definitions.Media`` objects are lazy. If two or more instances of ``asset_definitions.Media`` are combined,\n   the result is computed only when media is rendered. It is safe to use ``reverse_lazy()`` with\n   ``asset_definitions.Media``. It is important if you define your assets on a module level.\n4. ``Media`` class in ``MediaDefiningView`` does not support ``extend`` option. To add to the media defined in a parent\n   view class, you should override ``get_media`` method and use ``super(MyView, self).get_media()``.\n\nExample:\n========\n\n``myapp/urls.py``:\n\n.. code-block:: python\n\n  urlpatterns = (\n      url(\"/\", MyView.as_view()),\n      url(\"/global-variables.js\", global_js_variables, name=\"global_js_variables\"),\n  )\n\n\n``myapp/views.py``:\n\n.. code-block:: python\n\n  import asset_definitions\n  from . import assets\n\n\n  class MyView(assets_definition.MediaDefiningView, TemplateView):\n\n      template_name = \"template.html\"\n\n      class Media:\n          js = (\"media.js\", )\n          css = {\"all\": (\"media.css\", )}\n\n      def get_media():\n          return (\n            assets.global_js_variables +\n            assets.jquery +\n            super(MyView, self).get_media()\n          )\n\n  def global_js_variables(request):\n      js_content = 'const CURRENT_USER=\"{}\";'.format(request.user)\n      return HttpResponse(js_content, content_type=\"application/javascript\")\n\n``myapp/assets.py``:\n\n.. code-block:: python\n\n  import asset_definitions\n  from django.core import urlresolvers\n\n\n  global_js_variables = asset_definition.Media(\n      js=urlresolvers.reverse_lazy(\"global_js_variables\"),\n  )\n\n\n  jquery = asset_definitions.Media(\n      js=\"jquery.js\"\n  )\n\n\n``myapp/templates/template.html``:\n\n.. code-block:: django\n\n  <html>\n    <head>\n      {{ view.media.css.render }}\n    </head>\n    <body>\n      ...\n      {{ view.media.js.render }}\n    </body>\n  </html>\n\n\n\n\n=======\nChanges\n=======\n\n1.0.0\n=====\n\n- Add Django 3.x and 4.x compatibility\n- Drop support for Python 2\n- Python 3.6 is the minimum requirement\n\n0.3\n===\n\n- Add Django 2.0 compatibility\n- Extract ``MediaDefiningClass`` base class from ``MediaDefiningView``\n\n0.2\n===\n\n- Specify different requirements in ``setup.py`` based on the current Python version\n- Allow using inline JavaScript in media definitions (wrap with ``<script>`` tag)\n\n0.1\n===\n\n- Initial release\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/andreyfedoseev/django-asset-definitions",
    "keywords": "django",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-asset-definitions",
    "package_url": "https://pypi.org/project/django-asset-definitions/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-asset-definitions/",
    "project_urls": {
      "Homepage": "https://github.com/andreyfedoseev/django-asset-definitions"
    },
    "release_url": "https://pypi.org/project/django-asset-definitions/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "django-asset-definitions allows to define collections of static files (JavaScript, CSS) in Python code and (re)use them in Django views and templates.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12795535,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a18d0930fd95e7b9d2535fc0828870b855f1a546faf1e2293af67eba74478d4",
          "md5": "9b0ea2884e0faba67eae0f35301e827d",
          "sha256": "c1bc31931aee859fae34826855a88f5f5ed0954bc2c3563589471b071b4a3635"
        },
        "downloads": -1,
        "filename": "django-asset-definitions-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9b0ea2884e0faba67eae0f35301e827d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5263,
        "upload_time": "2017-05-23T04:42:01",
        "upload_time_iso_8601": "2017-05-23T04:42:01.628686Z",
        "url": "https://files.pythonhosted.org/packages/2a/18/d0930fd95e7b9d2535fc0828870b855f1a546faf1e2293af67eba74478d4/django-asset-definitions-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "31512c51b889513ea7a37dcee6e1a8a5201da4e67994faf0d7e59271e7df8ae3",
          "md5": "542d708d5646d94d70ef1ef24b1b31c3",
          "sha256": "b00accecf5f0de22d192e23c077b1bc2b31023387c25106a94ce6498e1a9e634"
        },
        "downloads": -1,
        "filename": "django-asset-definitions-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "542d708d5646d94d70ef1ef24b1b31c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5748,
        "upload_time": "2018-02-06T20:21:44",
        "upload_time_iso_8601": "2018-02-06T20:21:44.732920Z",
        "url": "https://files.pythonhosted.org/packages/31/51/2c51b889513ea7a37dcee6e1a8a5201da4e67994faf0d7e59271e7df8ae3/django-asset-definitions-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63a18bd1bf89504005fb888a36a7886bb1cbb067837db87d3b7ee2f552db44f6",
          "md5": "2c96376f18da9458b93a493c90f2ef6c",
          "sha256": "cfc6cf4cf116f18c7b62e26719011fa92f2829a440120ca3bcbb70cfbe5df5a4"
        },
        "downloads": -1,
        "filename": "django-asset-definitions-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2c96376f18da9458b93a493c90f2ef6c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5722,
        "upload_time": "2018-02-08T21:40:33",
        "upload_time_iso_8601": "2018-02-08T21:40:33.296522Z",
        "url": "https://files.pythonhosted.org/packages/63/a1/8bd1bf89504005fb888a36a7886bb1cbb067837db87d3b7ee2f552db44f6/django-asset-definitions-0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3bf6cdc7424ee6722d3aa42a5dde0719157b0543a9d870d107a02702c69e0a39",
          "md5": "06f4805e930ba3b6a6dd9652320b2686",
          "sha256": "9873d77f15f902cd123f74ee5b397db8c46739ad7c5bcc5998c1db1379677a9c"
        },
        "downloads": -1,
        "filename": "django-asset-definitions-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "06f4805e930ba3b6a6dd9652320b2686",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5837,
        "upload_time": "2022-02-05T11:02:17",
        "upload_time_iso_8601": "2022-02-05T11:02:17.827160Z",
        "url": "https://files.pythonhosted.org/packages/3b/f6/cdc7424ee6722d3aa42a5dde0719157b0543a9d870d107a02702c69e0a39/django-asset-definitions-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3bf6cdc7424ee6722d3aa42a5dde0719157b0543a9d870d107a02702c69e0a39",
        "md5": "06f4805e930ba3b6a6dd9652320b2686",
        "sha256": "9873d77f15f902cd123f74ee5b397db8c46739ad7c5bcc5998c1db1379677a9c"
      },
      "downloads": -1,
      "filename": "django-asset-definitions-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "06f4805e930ba3b6a6dd9652320b2686",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5837,
      "upload_time": "2022-02-05T11:02:17",
      "upload_time_iso_8601": "2022-02-05T11:02:17.827160Z",
      "url": "https://files.pythonhosted.org/packages/3b/f6/cdc7424ee6722d3aa42a5dde0719157b0543a9d870d107a02702c69e0a39/django-asset-definitions-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}