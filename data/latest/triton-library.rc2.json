{
  "info": {
    "author": "The Triton's community",
    "author_email": "tritonlibrary@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: C++",
      "Programming Language :: Python :: 3",
      "Topic :: Security",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "<p align=\"center\"><img width=\"50%\" src=\"https://triton-library.github.io/files/triton2.png\"/></p>\n\n**Triton** is a dynamic binary analysis library. It provides internal components that allow you to build your program analysis tools,\nautomate reverse engineering, perform software verification or just emulate code.\n\n* Dynamic **symbolic** execution\n* Dynamic **taint** analysis\n* AST representation of the **x86**, **x86-64**, **ARM32** and **AArch64** ISA semantic\n* Expressions **synthesis**\n* SMT **simplification** passes\n* **Lifting** to **LLVM** as well as **Z3** and back\n* **SMT solver** interface to **Z3** and **Bitwuzla**\n* **C++** and **Python** API\n\n<p align=\"center\">\n    <img src=\"https://triton-library.github.io/files/triton_v09_architecture.svg\" width=\"80%\"/></br>\n    <img src=\"https://triton-library.github.io/files/triton_multi_os.png\"/>\n</p>\n\nAs **Triton** is a kind of a part-time project, please, **don't blame us** if it is not fully reliable. [Open issues](https://github.com/JonathanSalwan/Triton/issues) or\n[pull requests](https://github.com/JonathanSalwan/Triton/pulls) are always better than trolling =). However, you can follow the development on twitter\n[@qb_triton](https://twitter.com/qb_triton).\n\n<p align=\"center\">\n  <a href=\"https://github.com/JonathanSalwan/Triton/actions/workflows/linux.yml/\">\n    <img src=\"https://img.shields.io/github/workflow/status/JonathanSalwan/Triton/Tests%20on%20Linux/master?label=Linux&logo=linux&logoColor=white\">\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/JonathanSalwan/Triton/actions/workflows/osx.yml/\">\n    <img src=\"https://img.shields.io/github/workflow/status/JonathanSalwan/Triton/Tests%20on%20OSX/master?label=OSX&logo=apple\">\n  </a>\n  &nbsp;\n  <a href=\"https://ci.appveyor.com/project/JonathanSalwan/triton\">\n    <img src=\"https://img.shields.io/appveyor/ci/JonathanSalwan/triton/master.svg?label=Windows&logo=windows\">\n  </a>\n  &nbsp;\n  <a href=\"https://codecov.io/gh/JonathanSalwan/Triton\">\n    <img src=\"https://codecov.io/gh/JonathanSalwan/Triton/branch/master/graph/badge.svg\" alt=\"Codecov\" />\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/JonathanSalwan/Triton/releases\">\n    <img src=\"https://img.shields.io/github/v/release/JonathanSalwan/Triton?logo=github\">\n  </a>\n  &nbsp;\n  <a href=\"https://github.com/jonathansalwan/Triton/tree/dev-v1.0\">\n    <img src=\"https://img.shields.io/static/v1?label=dev&message=v1.0&logo=github&color=blue\">\n  </a>\n  &nbsp;\n  <a href=\"https://twitter.com/qb_triton\">\n   <img src=\"https://img.shields.io/twitter/follow/qb_triton?color=1da1f2&label=Follow&logo=twitter&logoColor=white&style=square\">\n  </a>\n</p>\n\n# Quick start\n\n* [Installation](#install)\n* [Python API](https://triton-library.github.io/documentation/doxygen/py_triton_page.html)\n* [C++ API](https://triton-library.github.io/documentation/doxygen/annotated.html)\n* [Python Examples](https://github.com/JonathanSalwan/Triton/tree/master/src/examples/python)\n* [They already used Triton](#they-already-used-triton)\n\n## Getting started\n\n```python\nfrom triton import *\n\n>>> # Create the Triton context with a defined architecture\n>>> ctx = TritonContext(ARCH.X86_64)\n\n>>> # Define concrete values (optional)\n>>> ctx.setConcreteRegisterValue(ctx.registers.rip, 0x40000)\n\n>>> # Symbolize data (optional)\n>>> ctx.symbolizeRegister(ctx.registers.rax, 'my_rax')\n\n>>> # Execute instructions\n>>> ctx.processing(Instruction(b\"\\x48\\x35\\x34\\x12\\x00\\x00\")) # xor rax, 0x1234\n>>> ctx.processing(Instruction(b\"\\x48\\x89\\xc1\")) # mov rcx, rax\n\n>>> # Get the symbolic expression\n>>> rcx_expr = ctx.getSymbolicRegister(ctx.registers.rcx)\n>>> print(rcx_expr)\n(define-fun ref!8 () (_ BitVec 64) ref!1) ; MOV operation - 0x40006: mov rcx, rax\n\n>>> # Solve constraint\n>>> ctx.getModel(rcx_expr.getAst() == 0xdead)\n{0: my_rax:64 = 0xcc99}\n\n>>> # 0xcc99 XOR 0x1234 is indeed equal to 0xdead\n>>> hex(0xcc99 ^ 0x1234)\n'0xdead'\n```\n\n\n## Install\n\nTriton relies on the following dependencies:\n\n```\n* libcapstone                >= 4.0.x   https://github.com/capstone-engine/capstone\n* libboost      (optional)   >= 1.68\n* libpython     (optional)   >= 3.6\n* libz3         (optional)   >= 4.6.0   https://github.com/Z3Prover/z3\n* libbitwuzla   (optional)   n/a        https://github.com/bitwuzla/bitwuzla\n* llvm          (optional)   >= 12\n```\n\n\n### Linux and MacOS\n\n```console\n$ git clone https://github.com/JonathanSalwan/Triton\n$ cd Triton\n$ mkdir build ; cd build\n$ cmake ..\n$ make -j3\n$ sudo make install\n```\n\nBy default, LLVM and Bitwuzla are not compiled. If you want to enjoy the full power of Triton, the cmake compile is:\n\n```console\n$ cmake -DLLVM_INTERFACE=ON -DCMAKE_PREFIX_PATH=$(llvm-config --prefix) -DBITWUZLA_INTERFACE=ON ..\n```\n\n#### MacOS M1 Note:\n\nIn case if you get compilation errors like:\n\n```\nCould NOT find PythonLibs (missing: PYTHON_LIBRARIES PYTHON_INCLUDE_DIRS)\n```\n\nTry to specify `PYTHON_EXECUTABLE`, `PYTHON_LIBRARIES` and `PYTHON_INCLUDE_DIRS` for your specific Python version:\n\n```console\ncmake -DCMAKE_INSTALL_PREFIX=/opt/homebrew/ \\\n      -DPYTHON_EXECUTABLE=/opt/homebrew/bin/python3 \\\n      -DPYTHON_LIBRARIES=/opt/homebrew/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/libpython3.10.dylib \\\n      -DPYTHON_INCLUDE_DIRS=/opt/homebrew/opt/python@3.10/Frameworks/Python.framework/Versions/3.10/include/python3.10/ \\\n      ..\n```\n\nThis information you can get out from this snippet:\n\n```python\nfrom sysconfig import get_paths\ninfo = get_paths()\nprint(info)\n```\n\n### Windows\n\nYou can use cmake to generate the .sln file of libTriton.\n\n```console\n> git clone https://github.com/JonathanSalwan/Triton.git\n> cd Triton\n> mkdir build\n> cd build\n> cmake -G \"Visual Studio 14 2015 Win64\" \\\n  -DBOOST_ROOT=\"C:/Users/jonathan/Works/Tools/boost_1_61_0\" \\\n  -DPYTHON_INCLUDE_DIRS=\"C:/Python36/include\" \\\n  -DPYTHON_LIBRARIES=\"C:/Python36/libs/python36.lib\" \\\n  -DZ3_INCLUDE_DIRS=\"C:/Users/jonathan/Works/Tools/z3-4.6.0-x64-win/include\" \\\n  -DZ3_LIBRARIES=\"C:/Users/jonathan/Works/Tools/z3-4.6.0-x64-win/bin/libz3.lib\" \\\n  -DCAPSTONE_INCLUDE_DIRS=\"C:/Users/jonathan/Works/Tools/capstone-4.0.2-win64/include\" \\\n  -DCAPSTONE_LIBRARIES=\"C:/Users/jonathan/Works/Tools/capstone-4.0.2-win64/capstone.lib\" ..\n```\n\nHowever, if you prefer to directly download the precompiled library, check out our AppVeyor's [artefacts](https://ci.appveyor.com/project/JonathanSalwan/triton/history).\nNote that if you use AppVeyor's artefacts, you probably have to install the [Visual C++ Redistributable](https://www.microsoft.com/en-US/download/details.aspx?id=30679)\npackages for Visual Studio 2012.\n\n\n### Installing from vcpkg\n\nThe Triton port in vcpkg is kept up to date by Microsoft team members and community contributors.\nThe url of vcpkg is: https://github.com/Microsoft/vcpkg. You can download and install Triton using\nthe vcpkg dependency manager:\n\n```console\n$ git clone https://github.com/Microsoft/vcpkg.git\n$ cd vcpkg\n$ ./bootstrap-vcpkg.sh  # ./bootstrap-vcpkg.bat for Windows\n$ ./vcpkg integrate install\n$ ./vcpkg install triton\n```\n\nIf the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\n\n# Contributors\n\nTriton is strongly powered by [Quarkslab](https://quarkslab.com) for years but also by several contributors:\n\n* [**Alberto Garcia Illera**](https://twitter.com/algillera) - Cruise Automation\n* [**Alexey Vishnyakov**](https://vishnya.xyz/) - ISP RAS\n* [**Black Binary**](https://github.com/black-binary) - n/a\n* [**Christian Heitman**](https://github.com/cnheitman) - Quarkslab\n* [**Daniil Kuts**](https://github.com/apach301) - ISP RAS\n* [**Jessy Campos**](https://github.com/ek0) - n/a\n* [**Matteo F.**](https://twitter.com/fvrmatteo) - n/a\n* [**Pierrick Brunet**](https://github.com/pbrunet) - Quarkslab\n* [**PixelRick**](https://github.com/PixelRick) - n/a\n* [**Romain Thomas**](https://twitter.com/rh0main) - Quarkslab\n* [**And many more**](https://github.com/JonathanSalwan/Triton/graphs/contributors)\n\n\n## They already used Triton\n\n### Tools\n\n* [Ponce](https://github.com/illera88/Ponce): IDA 2016 plugin contest winner! Symbolic Execution just one-click away!\n* [QSynthesis](https://github.com/quarkslab/qsynthesis): Greybox Synthesizer geared for deobfuscation of assembly instructions.\n* [Pimp](https://github.com/kamou/pimp): Triton based R2 plugin for concolic execution and total control.\n* [Exrop](https://github.com/d4em0n/exrop): Automatic ROPChain Generation.\n\n### Papers and conference\n\n<ul dir=\"auto\">\n<li>\n<b>Strong Optimistic Solving for Dynamic Symbolic Execution</b><br />\n <b>Talk at</b>: Ivannikov Memorial Workshop, Kazan, Russia, 2022. [<a href=\"publications/IVMEM2022-strong-optimistic-parygina.pdf\">paper</a>] [<a href=\"publications/IVMEM2022-slide-strong-optimistic-parygina.pdf\">slide</a>]<br />\n <b>Authors</b>: Parygina D., Vishnyakov A., Fedotov A.<br />\n <b>Abstract</b>: <em>Dynamic symbolic execution (DSE) is an effective method\n for automated program testing and bug detection. It is increasing the code\n coverage by the complex branches exploration during hybrid fuzzing. DSE tools\n invert the branches along some execution path and help fuzzer examine\n previously unavailable program parts. DSE often faces over- and underconstraint\n problems. The first one leads to significant analysis complication while the\n second one causes inaccurate symbolic execution.\n We propose strong optimistic solving method that eliminates irrelevant path\n predicate constraints for target branch inversion. We eliminate such symbolic\n constraints that the target branch is not control dependent on. Moreover, we\n separately handle symbolic branches that have nested control transfer\n instructions that pass control beyond the parent branch scope, e.g. return,\n goto, break, etc. We implement the proposed method in our dynamic symbolic\n execution tool Sydr.\n We evaluate the strong optimistic strategy, the optimistic strategy that\n contains only the last constraint negation, and their combination. The results\n show that the strategies combination helps increase either the code coverage or\n the average number of correctly inverted branches per one minute. It is optimal\n to apply both strategies together in contrast with other configurations.</em>\n</li><br/>\n<li>\n<b>Greybox Program Synthesis: A New Approach to Attack Dataflow Obfuscation</b><br />\n <b>Talk at</b>: Blackhat USA, Las Vegas, Nevada, 2021. [<a href=\"publications/BHUSA2021-David-Greybox-Program-Synthesis.pdf\">slide</a>]<br />\n <b>Authors</b>: Robin David<br />\n <b>Abstract</b>: <em>This talk presents the latest advances in program synthesis applied for deobfuscation. It aims at demystifying this analysis technique\n by showing how it can be put into action on obfuscation. Especially the implementation Qsynthesis released for this talk shows a complete end-to-end workflow\n to deobfuscate assembly instructions back in optimized (deobfuscated) instructions reassembled back in the binary.</em>\n</li><br/>\n<li>\n<b>From source code to crash test-case through software testing automation</b><br />\n <b>Talk at</b>: C&ESAR, Rennes, France, 2021. [<a href=\"publications/CESAR2021_robin-david-paper.pdf\">paper</a>] [<a href=\"publications/CESAR2021_robin-david-slide.pdf\">slide</a>]<br />\n <b>Authors</b>: Robin David, Jonathan Salwan, Justin Bourroux<br />\n <b>Abstract</b>: <em>This paper present an approach automating the software testing process from a source code to the dynamic testing of the compiled program.  More specifically, from a static\n analysis report indicating alerts on source lines it enables testing to cover these lines dynamically and opportunistically checking whether  whether or not they can trigger\n a crash. The result is a test corpus allowing to cover alerts and to trigger them if they happen to be true positives. This paper discuss the  methodology employed to track\n alerts down in the compiled binary, the testing engines selection process and the results obtained on a TCP/IP stack implementation for embedded  and IoT systems.</em>\n</li><br/>\n<li>\n<b>Symbolic Security Predicates: Hunt Program Weaknesses</b><br />\n <b>Talk at</b>: Ivannikov ISP RAS Open Conference, Moscow, Russia, 2021. [<a href=\"publications/ISPOPEN2021-security-predicates-vishnyakov.pdf\">paper</a>] [<a href=\"publications/ISPOPEN2021-slide-security-predicates-vishnyakov.pdf\">slide</a>]<br />\n <b>Authors</b>: A.Vishnyakov, V.Logunova, E.Kobrin, D.Kuts, D.Parygina, A.Fedotov<br />\n <b>Abstract</b>: <em>Dynamic symbolic execution (DSE) is a powerful method for\n path exploration during hybrid fuzzing and automatic bug detection. We propose\n security predicates to effectively detect undefined behavior and memory access\n violation errors. Initially, we symbolically execute program on paths that\n don’t trigger any errors (hybrid fuzzing may explore these paths). Then we\n construct a symbolic security predicate to verify some error condition. Thus, we\n may change the program data flow to entail null pointer dereference, division\n by zero, out-of-bounds access, or integer overflow weaknesses. Unlike static\n analysis, dynamic symbolic execution does not only report errors but also\n generates new input data to reproduce them. Furthermore, we introduce function\n semantics modeling for common C/C++ standard library functions. We aim to model\n the control flow inside a function with a single symbolic formula. This assists\n bug detection, speeds up path exploration, and overcomes overconstraints in\n path predicate. We implement the proposed techniques in our dynamic symbolic\n execution tool Sydr. Thus, we utilize powerful methods from Sydr such as path\n predicate slicing that eliminates irrelevant constraints.\n We present Juliet Dynamic to measure dynamic bug detection tools accuracy. The\n testing system also verifies that generated inputs trigger sanitizers. We\n evaluate Sydr accuracy for 11 CWEs from Juliet test suite. Sydr shows 95.59%\n overall accuracy. We make Sydr evaluation artifacts publicly available to\n facilitate results reproducibility.</em>\n</li><br/>\n<li>\n<b>Towards Symbolic Pointers Reasoning in Dynamic Symbolic Execution</b><br />\n <b>Talk at</b>: Ivannikov Memorial Workshop, Nizhny Novgorod, Russia, 2021. [<a href=\"publications/IVMEM2021-symbolic-pointers-kuts.pdf\">paper</a>] [<a href=\"publications/IVMEM2021-slide-symbolic-pointers-kuts.pdf\">slide</a>]<br />\n <b>Authors</b>: Daniil Kuts<br />\n <b>Abstract</b>: <em>Dynamic symbolic execution is a widely used technique for\n automated software testing, designed for execution paths exploration and\n program errors detection. A hybrid approach has recently become widespread,\n when the main goal of symbolic execution is helping fuzzer increase program\n coverage. The more branches symbolic executor can invert, the more useful it is\n for fuzzer. A program control flow often depends on memory values, which are\n obtained by computing address indexes from user input. However, most DSE tools\n don't support such dependencies, so they miss some desired program branches. We\n implement symbolic addresses reasoning on memory reads in our dynamic symbolic\n execution tool Sydr. Possible memory access regions are determined by either\n analyzing memory address symbolic expressions, or binary searching with\n SMT-solver. We propose an enhanced linearization technique to model memory\n accesses. Different memory modeling methods are compared on the set of\n programs. Our evaluation shows that symbolic addresses handling allows to\n discover new symbolic branches and increase the program coverage.</em>\n</li><br/>\n<li>\n<b>QSynth: A Program Synthesis based Approach for Binary Code Deobfuscation</b><br />\n <b>Talk at</b>: BAR, San Diego, California, 2020. [<a href=\"publications/BAR2020-qsynth-robin-david.pdf\">paper</a>]<br />\n <b>Authors</b>: Robin David, Luigi Coniglio, Mariano Ceccato<br />\n <b>Abstract</b>: <em>We present a generic approach leveraging both DSE and program synthesis to successfully synthesize programs  obfuscated with Mixed-Boolean-Arithmetic, Data-Encoding\n or Virtualization. The synthesis algorithm proposed is an offline enumerate synthesis primitive guided by top-down breath-first search.  We shows its effectiveness\n against a state-of-the-art obfuscator and its scalability as it supersedes other similar approaches based on synthesis. We also show its effectiveness in presence of\n composite obfuscation (combination of various techniques). This ongoing work enlightens the effectiveness of synthesis to target certain kinds of obfuscations and\n opens the way to more robust algorithms and simplification strategies.</em>\n</li><br/>\n<li>\n<b>Sydr: Cutting Edge Dynamic Symbolic Execution</b><br />\n <b>Talk at</b>: Ivannikov ISP RAS Open Conference, Moscow, Russia, 2020. [<a href=\"publications/ISPRAS2020-sydr.pdf\">paper</a>] [<a href=\"publications/ISPOPEN2020-slide-sydr-vishnyakov.pdf\">slide</a>] [<a href=\"https://www.ispras.ru/conf/2020/video/compiler-technology-11-december.mp4#t=6021\">video</a>]<br />\n <b>Authors</b>: A.Vishnyakov, A.Fedotov, D.Kuts, A.Novikov, D.Parygina, E.Kobrin, V.Logunova, P.Belecky, S.Kurmangaleev<br />\n <b>Abstract</b>: <em>Dynamic symbolic execution (DSE) has enormous amount of applications in computer  security (fuzzing, vulnerability discovery, reverse-engineering, etc.). We propose\n several performance and accuracy improvements for dynamic symbolic execution.  Skipping non-symbolic instructions allows to build a path predicate 1.2--3.5 times faster.\n Symbolic engine simplifies formulas during symbolic execution. Path  predicate slicing eliminates irrelevant conjuncts from solver queries. We handle each jump table\n (switch statement) as multiple branches and describe the method for symbolic execution of multi-threaded programs. The proposed solutions were implemented in Sydr tool.\n Sydr performs inversion of branches in path predicate. Sydr combines DynamoRIO dynamic binary instrumentation tool with Triton symbolic engine.</em>\n</li><br/>\n<li>\n<b>Symbolic Deobfuscation: From Virtualized Code Back to the Original</b><br />\n <b>Talk at</b>: DIMVA, Paris-Saclay, France, 2018. [<a href=\"publications/DIMVA2018-deobfuscation-salwan-bardin-potet.pdf\">paper</a>] [<a href=\"publications/DIMVA2018-slide-deobfuscation-salwan-bardin-potet.pdf\">slide</a>]<br />\n <b>Authors</b>: Jonathan Salwan, Sébastien Bardin, Marie-Laure Potet<br />\n <b>Abstract</b>: <em>Software protection has taken an important place during the last decade in order to protect legit software against reverse engineering or tampering.\n Virtualization is considered as one of the very best defenses against such attacks. We present a generic approach based on symbolic path exploration, taint and\n recompilation allowing to recover, from a virtualized code, a devirtualized code semantically identical to the original one and close in size. We define criteria\n and metrics to evaluate the relevance of the deobfuscated results in terms of correctness and precision. Finally we propose an open-source setup allowing to evaluate\n the proposed approach against several forms of virtualization.</em>\n</li><br/>\n<li>\n<b>Deobfuscation of VM based software protection </b><br />\n <b>Talk at</b>: SSTIC, Rennes, France, 2017. [<a href=\"publications/SSTIC2017-French-Article-desobfuscation_binaire_reconstruction_de_fonctions_virtualisees-salwan_potet_bardin.pdf\">french paper</a>] [<a href=\"publications/SSTIC2017_Deobfuscation_of_VM_based_software_protection.pdf\">english slide</a>] [<a href=\"https://static.sstic.org/videos2017/SSTIC_2017-06-07_P08.mp4\">french video</a>]<br />\n <b>Authors</b>: Jonathan Salwan, Sébastien Bardin, Marie-Laure Potet<br />\n <b>Abstract</b>: <em>In this presentation we describe an approach which consists to automatically analyze virtual machine based software protections and which recompiles a new\n version of the binary without such protections. This automated approach relies on a symbolic execution guide by a taint analysis and some concretization policies, then\n on a binary rewriting using LLVM transition.</em>\n</li><br/>\n<li>\n<b>How Triton can help to reverse virtual machine based software protections</b><br />\n <b>Talk at</b>: CSAW SOS, NYC, New York, 2016. [<a href=\"publications/CSAW2016-SOS-Virtual-Machine-Deobfuscation-RThomas_JSalwan.pdf\">slide</a>]<br />\n <b>Authors</b>: Jonathan Salwan, Romain Thomas<br />\n <b>Abstract</b>: <em>The first part of the talk is going to be an introduction to the Triton framework to expose its components and to explain how they work together.\n Then, the second part will include demonstrations on how it's possible to reverse virtual machine based protections using taint analysis, symbolic execution, SMT\n simplifications and LLVM-IR optimizations.</em>\n</li><br/>\n<li>\n<b>Dynamic Binary Analysis and Obfuscated Codes</b><br  />\n <b>Talk at</b>: St'Hack, Bordeaux, France, 2016. [<a href=\"publications/StHack2016_Dynamic_Binary_Analysis_and_Obfuscated_Codes_RThomas_JSalwan.pdf\">slide</a>]<br  />\n <b>Authors</b>: Jonathan Salwan, Romain Thomas<br />\n <b>Abstract</b>: <em>At this presentation we will talk about how a DBA (Dynamic Binary Analysis) may help a reverse engineer to reverse obfuscated code. We will first\n introduce some basic obfuscation techniques and then expose how it's possible to break some stuffs (using our open-source DBA framework - Triton) like detect opaque\n predicates, reconstruct CFG, find the original algorithm, isolate sensible data and many more... Then, we will conclude with a demo and few words about our future work.</em>\n</li><br/>\n<li>\n<b>How Triton may help to analyse obfuscated binaries</b><br  />\n <b>Publication at</b>: MISC magazine 82, 2015. [<a href=\"publications/MISC-82_French_Paper_How_Triton_may_help_to_analyse_obfuscated_binaries_RThomas_JSalwan.pdf\">french article</a>]<br  />\n <b>Authors</b>: Jonathan Salwan, Romain Thomas<br />\n <b>Abstract</b>: <em>Binary obfuscation is used to protect software's intellectual property. There exist different kinds of obfucation but roughly, it transforms a binary\n structure into another binary structure by preserving the same semantic. The aim of obfuscation is to ensure that the original information is \"drown\" in useless information\n that will make reverse engineering harder. In this article we will show how we can analyse an ofbuscated program and break some obfuscations using the Triton framework.</em>\n</li><br/>\n<li>\n<b>Triton: A Concolic Execution Framework</b><br  />\n <b>Talk at</b>: SSTIC, Rennes, France, 2015. [<a href=\"publications/SSTIC2015_French_Paper_Triton_Framework_dexecution_Concolique_FSaudel_JSalwan.pdf\">french paper</a>] [<a href=\"publications/SSTIC2015_English_slide_detailed_version_Triton_Concolic_Execution_FrameWork_FSaudel_JSalwan.pdf\">detailed english slide</a>] <br />\n <b>Authors</b>: Jonathan Salwan, Florent Saudel<br />\n <b>Abstract</b>: <em>This talk is about the release of Triton, a concolic execution framework based on Pin. It provides components like a taint engine, a dynamic symbolic execution\n engine, a snapshot engine, translation of x64 instruction to SMT2, a Z3 interface to solve constraints and Python bindings. Based on these components, Triton offers the possibility\n to build tools for vulnerabilities research or reverse-engineering assistance.</em>\n</li><br/>\n<li>\n<b>Dynamic Behavior Analysis Using Binary Instrumentation</b><br  />\n <b>Talk at</b>: St'Hack, Bordeaux, France, 2015. [<a href=\"publications/StHack2015_Dynamic_Behavior_Analysis_using_Binary_Instrumentation_Jonathan_Salwan.pdf\">slide</a>]<br  />\n <b>Authors</b>: Jonathan Salwan<br />\n <b>Abstract</b>: <em>This talk can be considered like the part 2 of our talk at SecurityDay. In the previous part, we talked about how it was possible to cover a targeted function\n in memory using the DSE (Dynamic Symbolic Execution) approach. Cover a function (or its states) doesn't mean find all vulnerabilities, some vulnerability doesn't crashes the program.\n That's why we must implement specific analysis to find specific bugs. These analysis are based on the binary instrumentation and the runtime behavior analysis of the program. In this\n talk, we will see how it's possible to find these following kind of bugs : off-by-one, stack / heap overflow, use-after-free, format string and {write, read}-what-where.</em>\n</li><br/>\n<li>\n<b>Covering a function using a Dynamic Symbolic Execution approach</b><br  />\n <b>Talk at</b>: Security Day, Lille, France, 2015. [<a href=\"publications/SecurityDay2015_dynamic_symbolic_execution_Jonathan_Salwan.pdf\">slide</a>]<br  />\n <b>Authors</b>: Jonathan Salwan<br />\n <b>Abstract</b>: <em>This talk is about binary analysis and instrumentation. We will see how it's possible to target a specific function, snapshot the context memory/registers before the\n function, translate the instrumentation into an intermediate representation,apply a taint analysis based on this IR, build/keep formulas for a Dynamic Symbolic Execution (DSE), generate\n a concrete value to go through a specific path, restore the context memory/register and generate another concrete value to go through another path then repeat this operation until the\n target function is covered.</em>\n</li>\n</ul>\n\n\n## Cite Triton\n\n```latex\n@inproceedings{SSTIC2015-Saudel-Salwan,\n  author    = {Saudel, Florent and Salwan, Jonathan},\n  title     = {Triton: A Dynamic Symbolic Execution Framework},\n  booktitle = {Symposium sur la s{\\'{e}}curit{\\'{e}} des technologies de l'information\n               et des communications},\n  series    = {SSTIC},\n  pages     = {31--54},\n  address   = {Rennes, France},\n  month     = jun,\n  year      = {2015},\n}\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache License Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "triton-library",
    "package_url": "https://pypi.org/project/triton-library/",
    "platform": null,
    "project_url": "https://pypi.org/project/triton-library/",
    "project_urls": {
      "Homepage": "https://triton-library.github.io/",
      "Source": "https://github.com/jonathansalwan/Triton"
    },
    "release_url": "https://pypi.org/project/triton-library/1.0.0rc2/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Triton is a dynamic binary analysis library",
    "version": "1.0.0rc2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16281527,
  "releases": {
    "1.0.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aeaae0464a3fb99e990111dac8996aab01b12b77c3c70b9bc478fadfb82d4b65",
          "md5": "b410285dd2b9ebdf536098e80bbc7cca",
          "sha256": "92d8a2051a91cf618eec56d1773d2ad33fc91fecee35c74c17383cc2f3f3db2a"
        },
        "downloads": -1,
        "filename": "triton_library-1.0.0rc1-cp310-cp310-manylinux_2_24_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b410285dd2b9ebdf536098e80bbc7cca",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.6",
        "size": 48015082,
        "upload_time": "2022-07-26T01:13:49",
        "upload_time_iso_8601": "2022-07-26T01:13:49.075953Z",
        "url": "https://files.pythonhosted.org/packages/ae/aa/e0464a3fb99e990111dac8996aab01b12b77c3c70b9bc478fadfb82d4b65/triton_library-1.0.0rc1-cp310-cp310-manylinux_2_24_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8573c9e22ac26f87c9dbadf4c69724a6d5740a2dd9fe0b2177c3d28e49c9db98",
          "md5": "aae356ac2003fc2446592b87440e0eb2",
          "sha256": "c27afbf91c238643a3d860cc3007a41b822e2e648e6df270852f0a7bb907d98c"
        },
        "downloads": -1,
        "filename": "triton_library-1.0.0rc1-cp310-cp310-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "aae356ac2003fc2446592b87440e0eb2",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.6",
        "size": 14610420,
        "upload_time": "2022-08-28T22:51:11",
        "upload_time_iso_8601": "2022-08-28T22:51:11.139380Z",
        "url": "https://files.pythonhosted.org/packages/85/73/c9e22ac26f87c9dbadf4c69724a6d5740a2dd9fe0b2177c3d28e49c9db98/triton_library-1.0.0rc1-cp310-cp310-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f38247f183167fe67f5c9937fcff423c3f87a888fbc0c5a6affeb5798273868",
          "md5": "b78ab6a13818054a8e5879add6118c20",
          "sha256": "ce4d1ca3f3dabc3aee5f55ecbc7d39ae23531dfae179a7a23c753a92f9d8ece4"
        },
        "downloads": -1,
        "filename": "triton_library-1.0.0rc1-cp38-cp38-manylinux_2_24_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b78ab6a13818054a8e5879add6118c20",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.6",
        "size": 48014647,
        "upload_time": "2022-07-26T01:12:14",
        "upload_time_iso_8601": "2022-07-26T01:12:14.331893Z",
        "url": "https://files.pythonhosted.org/packages/3f/38/247f183167fe67f5c9937fcff423c3f87a888fbc0c5a6affeb5798273868/triton_library-1.0.0rc1-cp38-cp38-manylinux_2_24_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc3125439130832ff5288c01e41a797ded239fa10b927e9e910843bc02e902cd",
          "md5": "efc657ad0ba0cdbb336b2d0e4871f8a1",
          "sha256": "3b2a8d884809c85b38c483ed9805c55ad8a91973dc1670d416b1a6b299af2c44"
        },
        "downloads": -1,
        "filename": "triton_library-1.0.0rc1-cp38-cp38-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "efc657ad0ba0cdbb336b2d0e4871f8a1",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.6",
        "size": 14610735,
        "upload_time": "2022-08-28T22:52:38",
        "upload_time_iso_8601": "2022-08-28T22:52:38.860600Z",
        "url": "https://files.pythonhosted.org/packages/dc/31/25439130832ff5288c01e41a797ded239fa10b927e9e910843bc02e902cd/triton_library-1.0.0rc1-cp38-cp38-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "300b42376c64dc36ee57073343a8b3e058d6acf047f0d23bbd36a3b1cde3014d",
          "md5": "02dc1351d124ad8cd9aef3b39a51b839",
          "sha256": "6e6b82b8e86d9ad6e45d8e487266767eb411f0ba7bfea77bdcf58066c01291da"
        },
        "downloads": -1,
        "filename": "triton_library-1.0.0rc1-cp39-cp39-manylinux_2_24_x86_64.whl",
        "has_sig": false,
        "md5_digest": "02dc1351d124ad8cd9aef3b39a51b839",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.6",
        "size": 48015111,
        "upload_time": "2022-07-26T01:13:11",
        "upload_time_iso_8601": "2022-07-26T01:13:11.963284Z",
        "url": "https://files.pythonhosted.org/packages/30/0b/42376c64dc36ee57073343a8b3e058d6acf047f0d23bbd36a3b1cde3014d/triton_library-1.0.0rc1-cp39-cp39-manylinux_2_24_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9452c810430c30a9491f42206db5a45a8a145a9dff20d0e18b2690358eac48a",
          "md5": "17588dad39c76f6f3e372c243b14eaac",
          "sha256": "a4f6e839aadfb617fc3ce72166db9d7fcad6907d2864fa2987cdcd1cdc6c2c5d"
        },
        "downloads": -1,
        "filename": "triton_library-1.0.0rc1-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "17588dad39c76f6f3e372c243b14eaac",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.6",
        "size": 14610950,
        "upload_time": "2022-08-28T22:52:15",
        "upload_time_iso_8601": "2022-08-28T22:52:15.104067Z",
        "url": "https://files.pythonhosted.org/packages/a9/45/2c810430c30a9491f42206db5a45a8a145a9dff20d0e18b2690358eac48a/triton_library-1.0.0rc1-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0rc2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5b31acb7986ab59fbd931a6001ef1b9d6ed3561e96a472be2c883a9e3fdf61e6",
          "md5": "e07da34ea22631b138848d7444c3cfa6",
          "sha256": "22457792a3250def668ff63297fac3251f266fdcdf8af7b42074fbced4c56f76"
        },
        "downloads": -1,
        "filename": "triton_library-1.0.0rc2-cp310-cp310-manylinux_2_24_x86_64.whl",
        "has_sig": false,
        "md5_digest": "e07da34ea22631b138848d7444c3cfa6",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.6",
        "size": 48290249,
        "upload_time": "2022-12-23T19:20:57",
        "upload_time_iso_8601": "2022-12-23T19:20:57.370986Z",
        "url": "https://files.pythonhosted.org/packages/5b/31/acb7986ab59fbd931a6001ef1b9d6ed3561e96a472be2c883a9e3fdf61e6/triton_library-1.0.0rc2-cp310-cp310-manylinux_2_24_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a5c01c78938eb4e0b82036888a539884f5ebf871c695394b23c80b16991b550",
          "md5": "daf0836bc73af236a8891fdd0d514959",
          "sha256": "ce51e294fc8b40346a56b567393a42423f274fcdd2cc0ef92a13a7f371b333dc"
        },
        "downloads": -1,
        "filename": "triton_library-1.0.0rc2-cp310-cp310-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "daf0836bc73af236a8891fdd0d514959",
        "packagetype": "bdist_wheel",
        "python_version": "cp310",
        "requires_python": ">=3.6",
        "size": 15355710,
        "upload_time": "2022-12-23T20:46:47",
        "upload_time_iso_8601": "2022-12-23T20:46:47.696019Z",
        "url": "https://files.pythonhosted.org/packages/7a/5c/01c78938eb4e0b82036888a539884f5ebf871c695394b23c80b16991b550/triton_library-1.0.0rc2-cp310-cp310-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4215890630adc760a5771fbd70fdbc92f894d64ae21532a6be7aed102e6e6a61",
          "md5": "6b484bcf957b20ee06705fe5cccd29b1",
          "sha256": "e3afaf8d8261c932b98c3ef17993795f8c66118fe5076e96655ea9f6c99fc3a6"
        },
        "downloads": -1,
        "filename": "triton_library-1.0.0rc2-cp311-cp311-manylinux_2_24_x86_64.whl",
        "has_sig": false,
        "md5_digest": "6b484bcf957b20ee06705fe5cccd29b1",
        "packagetype": "bdist_wheel",
        "python_version": "cp311",
        "requires_python": ">=3.6",
        "size": 48291069,
        "upload_time": "2023-01-02T19:00:27",
        "upload_time_iso_8601": "2023-01-02T19:00:27.650032Z",
        "url": "https://files.pythonhosted.org/packages/42/15/890630adc760a5771fbd70fdbc92f894d64ae21532a6be7aed102e6e6a61/triton_library-1.0.0rc2-cp311-cp311-manylinux_2_24_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "252ded6dec13c73d224071781c5ce157fa76ea714299e8971f2a63291b7981b5",
          "md5": "809435c35e2abc2aa17984774a0d93e2",
          "sha256": "e99469878518c81d5415cc18048d7e5c46df55f56521d314b151266bf256181e"
        },
        "downloads": -1,
        "filename": "triton_library-1.0.0rc2-cp311-cp311-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "809435c35e2abc2aa17984774a0d93e2",
        "packagetype": "bdist_wheel",
        "python_version": "cp311",
        "requires_python": ">=3.6",
        "size": 15356084,
        "upload_time": "2023-01-02T19:01:22",
        "upload_time_iso_8601": "2023-01-02T19:01:22.833099Z",
        "url": "https://files.pythonhosted.org/packages/25/2d/ed6dec13c73d224071781c5ce157fa76ea714299e8971f2a63291b7981b5/triton_library-1.0.0rc2-cp311-cp311-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d5f01abab91ced6c4b19d40938fedfbbb6b16b773d4ea0c70281e964363c66f",
          "md5": "28f382349878c6404b0273b56fd564be",
          "sha256": "f81d9a9bcadf323598a148d77e55f002ecf8190c1e6f41d7226ea363d853e6c4"
        },
        "downloads": -1,
        "filename": "triton_library-1.0.0rc2-cp38-cp38-manylinux_2_24_x86_64.whl",
        "has_sig": false,
        "md5_digest": "28f382349878c6404b0273b56fd564be",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.6",
        "size": 48290027,
        "upload_time": "2022-12-23T19:19:14",
        "upload_time_iso_8601": "2022-12-23T19:19:14.857763Z",
        "url": "https://files.pythonhosted.org/packages/4d/5f/01abab91ced6c4b19d40938fedfbbb6b16b773d4ea0c70281e964363c66f/triton_library-1.0.0rc2-cp38-cp38-manylinux_2_24_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4999900a8761786620abd6876a842e0188643d6c3f542bac713458d429760fa5",
          "md5": "173a7212e44950caa0bdc4d3c3501042",
          "sha256": "647a632ba763fa0a19649e44184e93be1dc69d5b06dca16d3649822af151b7ab"
        },
        "downloads": -1,
        "filename": "triton_library-1.0.0rc2-cp38-cp38-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "173a7212e44950caa0bdc4d3c3501042",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.6",
        "size": 15355761,
        "upload_time": "2022-12-23T20:45:23",
        "upload_time_iso_8601": "2022-12-23T20:45:23.076709Z",
        "url": "https://files.pythonhosted.org/packages/49/99/900a8761786620abd6876a842e0188643d6c3f542bac713458d429760fa5/triton_library-1.0.0rc2-cp38-cp38-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f0aa6e4bd4c4772e11c3fc0592576334ca6990a080530aff642c8603ae4bb701",
          "md5": "1cc1fbb7c537e7a51e038f5b20a8c1de",
          "sha256": "9d0742bde2dc2be4ab597bb252df7b5f6b7b104cba180fd71ef0a0bf9921e2f7"
        },
        "downloads": -1,
        "filename": "triton_library-1.0.0rc2-cp39-cp39-manylinux_2_24_x86_64.whl",
        "has_sig": false,
        "md5_digest": "1cc1fbb7c537e7a51e038f5b20a8c1de",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.6",
        "size": 48290306,
        "upload_time": "2022-12-23T19:20:01",
        "upload_time_iso_8601": "2022-12-23T19:20:01.486732Z",
        "url": "https://files.pythonhosted.org/packages/f0/aa/6e4bd4c4772e11c3fc0592576334ca6990a080530aff642c8603ae4bb701/triton_library-1.0.0rc2-cp39-cp39-manylinux_2_24_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad6e7449b994926279ebc96949a418117744a90e923c9ff9394d495edbed4777",
          "md5": "2574260e8564d23930454fc9e9a48202",
          "sha256": "c4370850295474c6b9c68ad0783aaa27cbe65d908e9cb369aaee78f3c3504356"
        },
        "downloads": -1,
        "filename": "triton_library-1.0.0rc2-cp39-cp39-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "2574260e8564d23930454fc9e9a48202",
        "packagetype": "bdist_wheel",
        "python_version": "cp39",
        "requires_python": ">=3.6",
        "size": 15355750,
        "upload_time": "2022-12-23T20:46:22",
        "upload_time_iso_8601": "2022-12-23T20:46:22.950230Z",
        "url": "https://files.pythonhosted.org/packages/ad/6e/7449b994926279ebc96949a418117744a90e923c9ff9394d495edbed4777/triton_library-1.0.0rc2-cp39-cp39-win_amd64.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5b31acb7986ab59fbd931a6001ef1b9d6ed3561e96a472be2c883a9e3fdf61e6",
        "md5": "e07da34ea22631b138848d7444c3cfa6",
        "sha256": "22457792a3250def668ff63297fac3251f266fdcdf8af7b42074fbced4c56f76"
      },
      "downloads": -1,
      "filename": "triton_library-1.0.0rc2-cp310-cp310-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "e07da34ea22631b138848d7444c3cfa6",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": ">=3.6",
      "size": 48290249,
      "upload_time": "2022-12-23T19:20:57",
      "upload_time_iso_8601": "2022-12-23T19:20:57.370986Z",
      "url": "https://files.pythonhosted.org/packages/5b/31/acb7986ab59fbd931a6001ef1b9d6ed3561e96a472be2c883a9e3fdf61e6/triton_library-1.0.0rc2-cp310-cp310-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a5c01c78938eb4e0b82036888a539884f5ebf871c695394b23c80b16991b550",
        "md5": "daf0836bc73af236a8891fdd0d514959",
        "sha256": "ce51e294fc8b40346a56b567393a42423f274fcdd2cc0ef92a13a7f371b333dc"
      },
      "downloads": -1,
      "filename": "triton_library-1.0.0rc2-cp310-cp310-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "daf0836bc73af236a8891fdd0d514959",
      "packagetype": "bdist_wheel",
      "python_version": "cp310",
      "requires_python": ">=3.6",
      "size": 15355710,
      "upload_time": "2022-12-23T20:46:47",
      "upload_time_iso_8601": "2022-12-23T20:46:47.696019Z",
      "url": "https://files.pythonhosted.org/packages/7a/5c/01c78938eb4e0b82036888a539884f5ebf871c695394b23c80b16991b550/triton_library-1.0.0rc2-cp310-cp310-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4215890630adc760a5771fbd70fdbc92f894d64ae21532a6be7aed102e6e6a61",
        "md5": "6b484bcf957b20ee06705fe5cccd29b1",
        "sha256": "e3afaf8d8261c932b98c3ef17993795f8c66118fe5076e96655ea9f6c99fc3a6"
      },
      "downloads": -1,
      "filename": "triton_library-1.0.0rc2-cp311-cp311-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "6b484bcf957b20ee06705fe5cccd29b1",
      "packagetype": "bdist_wheel",
      "python_version": "cp311",
      "requires_python": ">=3.6",
      "size": 48291069,
      "upload_time": "2023-01-02T19:00:27",
      "upload_time_iso_8601": "2023-01-02T19:00:27.650032Z",
      "url": "https://files.pythonhosted.org/packages/42/15/890630adc760a5771fbd70fdbc92f894d64ae21532a6be7aed102e6e6a61/triton_library-1.0.0rc2-cp311-cp311-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "252ded6dec13c73d224071781c5ce157fa76ea714299e8971f2a63291b7981b5",
        "md5": "809435c35e2abc2aa17984774a0d93e2",
        "sha256": "e99469878518c81d5415cc18048d7e5c46df55f56521d314b151266bf256181e"
      },
      "downloads": -1,
      "filename": "triton_library-1.0.0rc2-cp311-cp311-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "809435c35e2abc2aa17984774a0d93e2",
      "packagetype": "bdist_wheel",
      "python_version": "cp311",
      "requires_python": ">=3.6",
      "size": 15356084,
      "upload_time": "2023-01-02T19:01:22",
      "upload_time_iso_8601": "2023-01-02T19:01:22.833099Z",
      "url": "https://files.pythonhosted.org/packages/25/2d/ed6dec13c73d224071781c5ce157fa76ea714299e8971f2a63291b7981b5/triton_library-1.0.0rc2-cp311-cp311-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d5f01abab91ced6c4b19d40938fedfbbb6b16b773d4ea0c70281e964363c66f",
        "md5": "28f382349878c6404b0273b56fd564be",
        "sha256": "f81d9a9bcadf323598a148d77e55f002ecf8190c1e6f41d7226ea363d853e6c4"
      },
      "downloads": -1,
      "filename": "triton_library-1.0.0rc2-cp38-cp38-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "28f382349878c6404b0273b56fd564be",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6",
      "size": 48290027,
      "upload_time": "2022-12-23T19:19:14",
      "upload_time_iso_8601": "2022-12-23T19:19:14.857763Z",
      "url": "https://files.pythonhosted.org/packages/4d/5f/01abab91ced6c4b19d40938fedfbbb6b16b773d4ea0c70281e964363c66f/triton_library-1.0.0rc2-cp38-cp38-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4999900a8761786620abd6876a842e0188643d6c3f542bac713458d429760fa5",
        "md5": "173a7212e44950caa0bdc4d3c3501042",
        "sha256": "647a632ba763fa0a19649e44184e93be1dc69d5b06dca16d3649822af151b7ab"
      },
      "downloads": -1,
      "filename": "triton_library-1.0.0rc2-cp38-cp38-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "173a7212e44950caa0bdc4d3c3501042",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.6",
      "size": 15355761,
      "upload_time": "2022-12-23T20:45:23",
      "upload_time_iso_8601": "2022-12-23T20:45:23.076709Z",
      "url": "https://files.pythonhosted.org/packages/49/99/900a8761786620abd6876a842e0188643d6c3f542bac713458d429760fa5/triton_library-1.0.0rc2-cp38-cp38-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f0aa6e4bd4c4772e11c3fc0592576334ca6990a080530aff642c8603ae4bb701",
        "md5": "1cc1fbb7c537e7a51e038f5b20a8c1de",
        "sha256": "9d0742bde2dc2be4ab597bb252df7b5f6b7b104cba180fd71ef0a0bf9921e2f7"
      },
      "downloads": -1,
      "filename": "triton_library-1.0.0rc2-cp39-cp39-manylinux_2_24_x86_64.whl",
      "has_sig": false,
      "md5_digest": "1cc1fbb7c537e7a51e038f5b20a8c1de",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.6",
      "size": 48290306,
      "upload_time": "2022-12-23T19:20:01",
      "upload_time_iso_8601": "2022-12-23T19:20:01.486732Z",
      "url": "https://files.pythonhosted.org/packages/f0/aa/6e4bd4c4772e11c3fc0592576334ca6990a080530aff642c8603ae4bb701/triton_library-1.0.0rc2-cp39-cp39-manylinux_2_24_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ad6e7449b994926279ebc96949a418117744a90e923c9ff9394d495edbed4777",
        "md5": "2574260e8564d23930454fc9e9a48202",
        "sha256": "c4370850295474c6b9c68ad0783aaa27cbe65d908e9cb369aaee78f3c3504356"
      },
      "downloads": -1,
      "filename": "triton_library-1.0.0rc2-cp39-cp39-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "2574260e8564d23930454fc9e9a48202",
      "packagetype": "bdist_wheel",
      "python_version": "cp39",
      "requires_python": ">=3.6",
      "size": 15355750,
      "upload_time": "2022-12-23T20:46:22",
      "upload_time_iso_8601": "2022-12-23T20:46:22.950230Z",
      "url": "https://files.pythonhosted.org/packages/ad/6e/7449b994926279ebc96949a418117744a90e923c9ff9394d495edbed4777/triton_library-1.0.0rc2-cp39-cp39-win_amd64.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}