{
  "info": {
    "author": "UNKNOWN",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "EasyCouch – ORM объертка вокруг python-couchdb.\n\nОсновной причиной создания велосипеда стала необходимость переосмысления работы с документ-ориентированными базами данных. Существующие решения в значительной степени копируют реляционный подход к хранению и доступу к данным, где крайне важным является такое понятие как схема данных. В отличии от реляционных БД, CouchDB позволяет вольно обращаться со структурой документа, что даёт свои преимущества. Так, например, разные расширения одного фреймворка могут использовать один и тот же документ БД для хранения своих данных, при этом удаление одного из расширений не должно преводить к сбою БД, как и установка.\n\nНеобходимость описания структуры документа (или его части) при использовании CouchDB возникает только из-за необходимости преобразовывать данные в строки для хранения в БД (кодировать) и обратно (декодировать). В случае простых типов данных (str, int, float) python делает эту работу за нас, но есть типы, например datetime, для которых подобное преобразование следует производить вручную. Необходимость проверять данные на соответствие ожиданиям, на мой взгляд, – дело библиотеки для работы с формами, такой как WTForms.\n\nЕщё одна проблема, которую известные мне библиотеки не решают – вложеность документов. Это позволит работать с отдельными нодами документа как с самостоятельными документами.\n\nПример\n======\n\n'''\nfrom easycouch import EasyCouch, Document, InlineDocument\nfrom easycouch.properies import DateTimeProperty\n\nclass BlogPost(Document):\n\tcreated_at = DateTimeProperty(auto_create_now = True)\n\nclass Comment(InlineDocument):\n\tcreated_at = DateTimeProperty(auto_create_now = True)\n\ndb = EasyCouch()\n\ndb.register_document(BlogPost)\ndb.register_document(Comment)\n\np = BlogPost(title = \"Test post\", text = \"Post content\")\np.comments = [\n\t\tComment(text = \"First Comment\", comments = [Comment(text = \"First comment child\"),]), \t\t\n\t\tComment(text = \"Second comment\")\n]\np.save()\n\np.comments[0].text\n=> \"Fist Comment\"\np.comments[0].comments[0].created_at\n=> datetime.datetime() object\n'''",
    "description_content_type": null,
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "UNKNOWN",
    "keywords": null,
    "license": "Creative Commons Attribution-Noncommercial-Share Alike license",
    "maintainer": null,
    "maintainer_email": null,
    "name": "EasyCouch",
    "package_url": "https://pypi.org/project/EasyCouch/",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/EasyCouch/",
    "project_urls": {
      "Download": "UNKNOWN",
      "Homepage": "UNKNOWN"
    },
    "release_url": "https://pypi.org/project/EasyCouch/0.3dev/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "UNKNOWN",
    "version": "0.3dev",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 406543,
  "releases": {
    "0.3dev": []
  },
  "urls": [],
  "vulnerabilities": []
}