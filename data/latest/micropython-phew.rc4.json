{
  "info": {
    "author": "Jonathan Williamson",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# **phew!** the Pico (or Python) HTTP Endpoint Wrangler\n\n> :warning: **Heads up! This is a very new project and should be considered, at best,\nalpha stage.**\n\nA small webserver and templating library specifically designed for MicroPython\non the Pico W. It aims to provide a complete toolkit for easily creating high\nquality web based interfaces for your projects.\n\n**phew!** is ideal for creating web based provisioning interfaces for connected projects\nusing the [Raspberry Pi Pico W](https://shop.pimoroni.com/products/raspberry-pi-pico-w).\n\n- [What **phew!** does](#what-phew-does)\n- [Basic example](#basic-example)\n- [Function reference](#function-reference)\n  - [server module](#server_module)\n    - [add_route](#add_route)\n    - [set_catchall](#set_catchall)\n    - [run](#run)\n  - [Types](#types)\n    - [Request type](#request)\n    - [Response type](#response)\n      - [Shorthand](#shorthand)\n  - [Templates](#templates)\n    - [render_template](#render_template)\n    - [Template expressions](#template-expressions)\n      - [Variables](#variables)\n      - [Conditional display](#conditional-display)\n      - [Includes](#includes)\n  - [dns module](#dns_module)\n    - [run_catchall](#run_catchall)\n\n## What **phew!** does:\n\n- a basic web server\n- optimised for speed (at `import` and during execution)\n- minimal use of memory\n- parameterised routing rules `/greet/<name>`\n- templating engine that allows inline python expressions `{{name.lower()}}`\n- `GET`, `POST` request methods\n- query string decoding and parsing\n- catchall handler for unrouted requests\n- `multipart/form-data`, `x-www-form-urlencoded`, and JSON `POST` bodies\n- string, byte, or generator based responses\n- `connect_to_wifi` convenience method\n\nWhere possible **phew!** tries to minimise the amount of code and setup that you,\nthe developer, has to do in favour of picking sane defaults and hiding away bits\nof minutiae that rarely needs to be tweaked.\n\n## Basic example\n\nAn example web server that returns a random number between 1 and 100 (or optionally\nthe range specified by the callee) when requested:\n\n```python\nfrom phew import server, connect_to_wifi\n\nconnect_to_wifi(\"<ssid>\", \"<password>\")\n\n@server.route(\"/random\", methods=[\"GET\"])\ndef random_number(request):\n  import random\n  min = int(request.query.get(\"min\", 0))\n  max = int(request.query.get(\"max\", 100))\n  return str(random.randint(min, max))\n\n@server.catchall()\ndef catchall(request):\n  return \"Not found\", 404\n\nserver.run()\n```\n\n**phew** is designed specifically with performance and minimal resource use in mind.\nGenerally this means it will prioritise doing as little work as possible including \nassuming the correctness of incoming requests.\n\n---\n\n## Function reference\n  \n### server module\n\nThe `server` module provides all functionality for running a web server with \nroute handlers.\n\n#### add_route\n\n```python\nserver.add_route(path, handler, methods=[\"GET\"])\n```\n\nAdds a new route into the routing table. When an incoming request is received the server checks each route to find the most specific one that matches the request based on the path and method. If a route is found then the `handler` function is called with a `request` parameter\nthat contains details about the request.\n\n```python\ndef my_handler(request):\n  return \"I got it!\", 200\n\nserver.add_route(\"/testpath\", my_handler, methods=[\"GET\"])\n```\n\nOr, alternatively, using a decorator:\n\n```python\n@server.route(\"/testpath\", methods=[\"GET\"])\ndef my_handler(request):\n  return \"I got it!\", 200\n```\n\n#### set_catchall\n\n```python\nserver.set_catchall(handler)\n```\n\nProvide a catchall method for requests that didn't match a route.\n\n```python\ndef my_catchall(request):\n  return \"No matching route\", 404\n\nserver.set_catchall(my_catchall)\n```\n\nOr, alternatively, using a decorator:\n\n```python\n@server.set_catchall()\ndef my_catchall(request):\n  return \"No matching route\", 404\n```\n\n#### run\n\n```python\nserver.run(host=\"0.0.0.0\", port=80)\n```\n\nStarts up the web server and begins handling incoming requests. \n\n```python\nserver.run()\n```\n\n### Types \n\n#### Request\n\nThe `Request` object contains all of the information that was parsed out of the\nincoming request including form data, query string parameters, HTTP method, path,\nand more.\n\nHandler functions provided to `add_route` and `set_catchall` will recieve a \n`Request` object as their first parameter.\n\n|member|example|type|description|\n|---|---|---|---|\n|protocol|`\"HTTP/1.1\"`|string|protocol version|\n|method|`\"GET\"` or `\"POST\"`|string|HTTP method used for this request|\n|uri|`\"/path/to/page?parameter=foo\"`|string|full URI of the request|\n|path|`\"/path/to/page\"`|string|just the path part of the URI|\n|query_string|`\"parameter=foo\"`|string|just the query string part of the URI|\n|form|`{\"foo\": \"bar\", \"name\": \"geoff\"}`|dict|`POST` body parsed as `multipart/form-data`|\n|data|`[{\"name\": \"jenny\"}, {\"name\": \"geoff\"}]`|any|`POST` body parsed as JSON|\n|query|`{\"parameter\": \"foo\"}`|dict|result of parsing the query string|\n\nAt the time your route handler is being called the request has been fully parsed and you can access any properties that are relevant to the request (e.g. the `form` dictionary for a `multipart/form-data` request) any irrelevant properties will be set to `None`.\n\n```python\n@server.add_route(\"/login\", [\"POST\"])\ndef login_form(request):\n  username = request.form.get(\"username\", None)\n  password = request.form.get(\"password\", None)\n\n  # check the user credentials with your own code\n  # for example: \n  # \n  # logged_in = authenticate_user(username, password)\n\n  if not logged_in:\n    return \"Username or password not recognised\", 401\n\n  return \"Logged in!\", 200\n```\n\n#### Response\n\nThe `Response` object encapsulates all of the attributes of your programs response\nto an incoming request. This include the status code of the result (e.g. 200 OK!)\n, the data to return, and any associated headers.\n\nHandler functions can create and return a `Response` object explicitly or use a couple\nof shorthand forms to avoid writing the boilerplate needed.\n\n|member|example|type|description|\n|---|---|---|---|\n|status|`200`|int|HTTP status code|\n|headers|`{\"Content-Type\": \"text/html\"}`|dict|dictionary of headers to return|\n|body|`\"this is the response body\"`|string or generator|the content to be returned|\n\n```python\n@server.add_route(\"/greeting/<name>\", [\"GET\"])\ndef user_details(request):\n  return Response(f\"Hello, {name}\", status=200, {\"Content-Type\": \"text/html\"})\n```\n\n##### Shorthand\n\nAs shorthand instead of returning a `Response` object the handle may also return a `tuple` with between\none and three values:\n\n- body - either a string or generator method\n- status code - defaults to `200` if not provided\n- headers - defaults to `{\"Content-Type\": \"text/html\"}` if not provided\n\nFor example:\n\n```python\n@server.add_route(\"/greeting/<name>\", [\"GET\"])\ndef user_details(request, name):\n  return f\"Hello, {name}\", 200\n```\n\n### Templates\n\nA web server isn't much use without something to serve. While it's straightforward \nto serve the contents of a file or some generated JSON things get more complicated\nwhen we want to present a dynamically generated web page to the user.\n\n**phew!** provides a templating engine which allows you to write normal HTML with \nfragments of Python code embedded to output variable values, parse input, or dynamically\nload assets.\n\n#### render_template\n\n```python\nrender_template(template, param1=\"foo\", param2=\"bar\", ...):\n```\n\nThe `render_template` method takes a path to a template file on the filesystem and \na list of named paramaters which will be passed into the template when parsing.\n\nThe method is a generator which yields the parsing result in chunks, minimising the\namount of memory used to hold the results as they can be streamed directly out rather\nthan having to build the entire result as a string first.\n\nGenerally you will call `render_template` to create the body of a `Response` in one\nof your handler methods.\n\n#### Template expressions\n\nTemplates are not much use if you can't inject dynamic data into them. With **phew!**\nyou can embed Python expressions with `{{<expression here>}}` which will be evaluated \nduring parsing.\n\n##### Variables\n\nIn the simplest form you can embed a simple value by just enclosing it in double curly braces. \nIt's also possible to perform more complicated transformations using any built in Python method.\n\n```html\n  <div id=\"name\">{{name}}</div>\n\n  <div id=\"name\">{{name.upper()}}</div>\n  \n  <div id=\"name\">{{\"/\".join(name.split(\" \"))}}</div>\n```\n\n##### Conditional display\n\nIf you want to show a value only if some other condition is met then you can use the\n(slightly clunky) Python tenary operator.\n\n```html\n<div>\n  You won\n  {{\"1st\" if prize == 1 else \"\"}}\n  {{\"2nd\" if prize == 2 else \"\"}}\n  {{\"3rd\" if prize == 3 else \"\"}}\n  prize!\n</div>\n```\n\nor\n\n```html\n<div>\n  You won\n  {{[\"1st\", \"2nd\", \"3rd\"][prize]}}\n  prize!\n</div>\n```\n\nWhile a bit unweildy this methods works. An alternative would be to select the appropriate\nvalue in your handler and simply pass it into the template as a parameter however that\nwould mean having some of your copy embedded into your Python code rather than all of it\nin one place in the template file.\n\n##### Includes\n\nYou can include another template by calling `render_template()` again within your outer template.\n\n`include.html`\n```html\nHello there {{name}}!\n```\n\n`main.html`\n```html\n<!DOCTYPE html>\n<body>\n  {{render_template(\"include.html\", name=name)}}\n</body>\n```\n\n:warning: Note: you need to explicitly pass through template parameters into the included template - they are not available by default.\n\n### dns module\n\nTo make implementing device provisioning interfaces (via captive portal) simple **phew!** provides a catchall DNS server.\n\nIf you put the Pico W into access point mode and then run the catchall DNS server it will route all DNS requests back to the local device so that they can be handled.\n\n#### run_catchall\n\n```python\ndns.run_catchall(ip_address)\n```\n\nPass in the IP address of your device once in access point mode.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Phil Howard",
    "maintainer_email": "phil@pimoroni.com",
    "name": "micropython-phew",
    "package_url": "https://pypi.org/project/micropython-phew/",
    "platform": null,
    "project_url": "https://pypi.org/project/micropython-phew/",
    "project_urls": {
      "GitHub": "https://github.com/pimoroni/phew"
    },
    "release_url": "https://pypi.org/project/micropython-phew/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A small webserver and templating library specifically designed for MicroPython on the Pico W.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15841978,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb51f8aa48bb441e92f89853a19b2a17d6c6352b53a1837ff64727233087c785",
          "md5": "476f452f7dcfa8b677053301290d33ba",
          "sha256": "c5cd6e80b2f199f5366eaf1fce75d69ce0a8e67530442571fef6b0c34690eb79"
        },
        "downloads": -1,
        "filename": "micropython-phew-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "476f452f7dcfa8b677053301290d33ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10944,
        "upload_time": "2022-08-10T15:25:34",
        "upload_time_iso_8601": "2022-08-10T15:25:34.966814Z",
        "url": "https://files.pythonhosted.org/packages/fb/51/f8aa48bb441e92f89853a19b2a17d6c6352b53a1837ff64727233087c785/micropython-phew-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e29020512f7f85a46bddce8bf22f20779c7d4aecec9b2c8354d3693799c38962",
          "md5": "404c4c40dbac65ba58757e6bd2b920a7",
          "sha256": "a741d84ca2b0ee21261d09ec2fcfc1e65867bf3456553f149bc82f7c2698ab6c"
        },
        "downloads": -1,
        "filename": "micropython-phew-0.0.1.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "404c4c40dbac65ba58757e6bd2b920a7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11008,
        "upload_time": "2022-08-10T15:28:12",
        "upload_time_iso_8601": "2022-08-10T15:28:12.239610Z",
        "url": "https://files.pythonhosted.org/packages/e2/90/20512f7f85a46bddce8bf22f20779c7d4aecec9b2c8354d3693799c38962/micropython-phew-0.0.1.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "188dc3323d6d7e17c95e8e94b2c9fb96d88a8cbbd2c45c65f909b276c78761c2",
          "md5": "9c21c10dcb46ef14efa8b6156f8c5402",
          "sha256": "3edff71f7f43548db3fbf7a5852b4ef114ed197e5335529f9b380da08de7514a"
        },
        "downloads": -1,
        "filename": "micropython-phew-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9c21c10dcb46ef14efa8b6156f8c5402",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11031,
        "upload_time": "2022-08-18T12:41:36",
        "upload_time_iso_8601": "2022-08-18T12:41:36.508913Z",
        "url": "https://files.pythonhosted.org/packages/18/8d/c3323d6d7e17c95e8e94b2c9fb96d88a8cbbd2c45c65f909b276c78761c2/micropython-phew-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bd5b33cf6b29a436f5c1bc34d3649d0e9c577edb9f216c49c541d1fa14e8d13",
          "md5": "00d42ad3661ef6897bf8d0d58d1dab3a",
          "sha256": "ac2740e5f5b1cb26b6717846352c29d01717a13eef70c54a6a0e9c962cc99e24"
        },
        "downloads": -1,
        "filename": "micropython-phew-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "00d42ad3661ef6897bf8d0d58d1dab3a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11976,
        "upload_time": "2022-11-21T15:01:55",
        "upload_time_iso_8601": "2022-11-21T15:01:55.398371Z",
        "url": "https://files.pythonhosted.org/packages/2b/d5/b33cf6b29a436f5c1bc34d3649d0e9c577edb9f216c49c541d1fa14e8d13/micropython-phew-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2bd5b33cf6b29a436f5c1bc34d3649d0e9c577edb9f216c49c541d1fa14e8d13",
        "md5": "00d42ad3661ef6897bf8d0d58d1dab3a",
        "sha256": "ac2740e5f5b1cb26b6717846352c29d01717a13eef70c54a6a0e9c962cc99e24"
      },
      "downloads": -1,
      "filename": "micropython-phew-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "00d42ad3661ef6897bf8d0d58d1dab3a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11976,
      "upload_time": "2022-11-21T15:01:55",
      "upload_time_iso_8601": "2022-11-21T15:01:55.398371Z",
      "url": "https://files.pythonhosted.org/packages/2b/d5/b33cf6b29a436f5c1bc34d3649d0e9c577edb9f216c49c541d1fa14e8d13/micropython-phew-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}