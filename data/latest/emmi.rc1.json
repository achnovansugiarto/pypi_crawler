{
  "info": {
    "author": "Florin Boariu",
    "author_email": "florin.pt@rootshell.ro",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "# The EPIC Monday-Morning Integration Toolkit\n\n[![pipeline status](https://codebase.helmholtz.cloud/emmitools/emmi/badges/master/pipeline.svg)](https://codebase.helmholtz.cloud/emmitools/emmi/-/commits/master)\n[![coverage report](https://codebase.helmholtz.cloud/emmitools/emmi/badges/master/coverage.svg)](https://codebase.helmholtz.cloud/emmitools/emmi/-/commits/master)\n[![Latest Release](https://codebase.helmholtz.cloud/emmitools/emmi/-/badges/release.svg)](https://codebase.helmholtz.cloud/emmitools/emmi/-/releases)\n[![pylint](https://codebase.helmholtz.cloud/emmitools/emmi/-/badges/pylint.svg)](https://codebase.helmholtz.cloud/emmitools/emmi/-/lint/)\n\nEMMItool is the \"Swiss army knife\" for rapid ad-hoc integration of\nscientific instrumentation into [EPICS](https://epics.anl.gov/)-based\n[beamline control sytems](https://blueskyproject.io/).\n\n## Concepts and Components\n\nEMMI is separated in different layers of which either can be used\nfor specific types of integrations, ranging from rapid \"Monday morning\"\nhacks for attaching an existing non-EPICS capable device to a beamline,\nto a writing full-fledged EPICS-IOC support for your device:\n\n  - [The EMMI Device Architecture (EMA)](#emmi-device-architecture) offers\n    abstraction layers for access to motors, signals and switches\n  \n  - [EMMIdaemon](#emmi-daemon) is a stand-alone application that runs\n    and presents an ad-hoc IOC on one side, with a REST-like HTTPS API\n\tsupport on the other side\n\n### EMMI Device Architecture\n\n#### Controlling Motors\n\nEMMI uses a simple yet extensible motor interface. The philosophy is that\nwe're considering an *ideal* motor in our model. We don't concern ourselves\nwith backlash compensation, acclereation ramps etc. We care about ***what** the\nmotor is supposed to do*, as opposed to ***how** it is going to do it*.\n\nFor this, we consider the following properties:\n  \n  - `position`: R/W property which returns the current motor values,\n    respectively moves to the specified absolute value when written to\n\n  - `position_relative`: R/W property that facilitates a movement relative\n     to the current position when written to; always returns 0.\n\n  - `state`: a R/W property that indicates the current state of the\n    (abstract) motor device; can be explicitly set within specific\n\tparameters to advance to specific states.\n\t\nThe state diagram of a motor looks like this in its most simple form:\n```\n          ┌──────────┐\n          │   INIT   ├┄┄┄┄┄┄┄┄┄┄┄┄►┄┄┐\n          └────┬─────┘               ┊\n               ▼                     ┊\n          ┌────┴─────┐               ┊\n          │          ├┄┄┄┄┄┄┄┄┄┄┄┄►┄┄┤\n  ┌───►───│   IDLE   ├┄┄┄┄┄►┄┄┐      ┊\n  │       └────┬─────┘        ┊      ┊\n  │            ▼              ┊      ┊\n  │   ┌┈┈┈┈┈┈┈┈┴┈┈┈┈┈┈┈┈┈┐    ┊      ┊\n  │   ┊                  ├┄┄┄┄┄┄┄┄►┄┄┤\n  │   ┊     BUSY...      ├    ┤      ┊\n  │   ┊                  ┊    ┊      ┊\n  │   └┈┈┈┈┈┈┈┈┬┈┈┈┈┈┈┈┈┈┘    ┊      ┊\n  │            ▼              ┊      ┊\n  │       ┌────┴─────┐        ┊      ┊\n  ├───◄───┤          ├┄┄┄┄┄◄┄┄┘      ┊\n  │       │   STOP   ├┄┄┄┄┄┄┄┄┄┄┄┄►┄┄┤\n  │       └────┬─────┘               ┊\n  │            ▼                     ▼\n  │       ┌────┴─────┐           ┌───┴────┐\n  └───◄───┤  ERROR   ├┄┄┄┄┄┄┄┄►┄┄┤  FAIL  │\n          └──────────┘           └────────┘\n```\n\nWhich translates to:\n\n  - `INIT` is the initial states after startup, device is undergoing\n    custom configuration and is not ready yet.\n\n  - `IDLE` device is ready to perform according to commands\n\t \n  - `BUSY` is the state in which device is performing, most likely moving\n  \n  - `STOP` is the state in which the device is decelerating with the\n    intention of coming to a standstill. This can be part of a regular\n    `IDLE`-`BUSY` cycle (i.e. returning to `IDLE` once standstill is reached),\n\tor can be an intermediate state towards an `ERROR` state, ensuring\n\tthat the device is stopped for handling of errors.\n    \n  - `ERROR` is a well-defined state which represents the device *not*\n    peforming, but which is still part of the \"well defined\" behavior of\n\tthe device. Such a state, for instance, is reaching hardware limits\n\tor impossibility to execute a command (e.g. because coordinates are\n\toutside of allowed range). The device is always in a standstill\n\twhen in `ERROR`, which is ensured by the fact that `ERROR` is only\n\tentered through `STOP`. `ERROR` can be entered from all \"regular\"\n\toperational states (`IDLE`, `BUSY` or `STOP`), but not from `INIT`\n\t-- initialisation errors result in `FAIL`.\n    \n  - `FAIL` is the state of a fatal error, incompatible with \"defined\n    behavior\" of the device. It is a terminal state, meaning that there\n\tis no system-supported from this state. A complete reinitialisation,\n\ttypically encompanied by a power cycle or hardware reset is the\n\taction to be performed to advance from `FAIL`. It can be entered\n\tfrom any other state.\n\n\nThe `BUSY` state deserves extra explanation, as it's the main mechanism\nfor extending the functionality of a motor.\n\nIn its most simple form, a motor has only one task: to move an (abstract)\naxis to a specified value. However, slightly more complex real-world\napplications may differentiate more strictly on the type of movement\nto be performed:\n\n  - a **slewing** movement is performed autonomously with maximum\n    speed within parameters, towards a specific target;\n\n  - a **jogging** movement, e.g. triggered by a joystick, is performed\n    with a predefined speed as long as a condition (button press)\n\tactively persists;\n\t\n  - a **tracking** movement is a movement that is bound to time\n    constraints, e.g. hitting specific coordinates at specific times;\n\t\n  - a **homing** movement may be used to define a slewing towards\n    a hard-coded parking position;\n\t\n  - a **dialing** or **tweaking** movement may be a manual correction\n    on top of a predefined tracking path, etc.\n\nEven more complex moves require several stacked types of movements\n(e.g. a *tracking* requires a *slewing* into position first, and\naccept *tweaking* input while performing the actual tracking).\n\nAs far as EMMI is concerned, we don't care about the complexity of\nthe movement itself, we only care about representing high-level\nstates of operation at an EPICS interface level -- roughly speaking,\nto us, the motor \"does\" or \"doesn't do\" anything. To model this,\nwe allow splitting the `BUSY` state into sub-states, hiearchically\ndenoted (e.g. `BUSY.SLEW` or `BUSY.TRACK`...). The restriction is\nthat they all must either end in `STOP`, before returning to `IDLE`\nor entering `ERROR`, or must definitively fail directly into `FAIL`.\n\nThese supplementary states my be controlled by variables and properties\nwhich EMMI will happily manage and pass through to the EPICS interface,\nbut will not understand or touch -- e.g. speed limits, accelerations,\nhoming coordinates etc.\n\nHowever, as it is customary with EPICS, EMMI will manage designated\nboolean PVs to trigger these states and indicate the successful\nperformance of the action. This allows to a certain degree easy\nimplementation of the \"HOMF/D\", \"TWF/D\" or \"JOG\" class of commands of\nan [EPICS motor record](https://epics.anl.gov/bcda/synApps/motor/R7-1/motorRecord.html).\n\nThis results in a 4-layer architecture that leads from the hardware\ncontrols to the EPICS variables:\n \n  - The **Axis Control** is the layer (within Python) which\n    directly serves the hardware interface API, e.g. typically a \n\tlass wrapped around a pySerial interface.\n\t\n  - The **Engine** is a layer which enforces an API compatible\n    the state diagram above, with the properties `position`, `position_relative`\n\tand `state` as described.\n\t\n  - The **Connector** is a translator between the motor engine and \n    a generic EPICS IOC generator, e.g. as provided by pythonSoftIOC.\n\t\n  - The **IOC Generator** is a library that does the actual EPICS work.\n  \nIn the spirit of \"integration\", we acknowledge that typically the first\nlayer has already been written, and there is legitimate concern to reuse\nit. The only restriction EMMI imposes is for the *Axis Control*\nto not block. For the last layer, EMMI makes heavy use of pythonSoftIOC.\n\t\nWhat remains is the *Engine* and *Connector*, which EMMI\nimplements in the classes [`MotorEngine`]() and [`MotorConnector`]()\nwithin [`emmi.eda`](./src/emmi/eda.py).\n\nTypically, `MotorConnector` needs to specifically dock to user-supplied\n*Axis Control* code. There are three ways to do this:\n  \n  1. Write from scratch or re-write your *Axis Control* to be *Engine*\n     compatible. This is, of course, the preferred method, but not\n\t always available.\n\t \n  2. Use the supplied `MotorConnector`, which is a highly configurable\n     template that makes heavy use of Python's \"duck typing\" to attach\n\t to a more-or-less compatible *Axis Control*. This has the advantage\n\t that it doesn't require tampering with \"tried and true\" hardware\n\t control code of the *Axis Control* layer.\n\t \n  3. Write your own *Motor Controller* from scratch, paying attention\n     to reflect the *Engine* API, as described above.\n\t \nAs a side note, this architecture also gives a natural layer at which\nto attach useful, yet hardware-independent, unit testing: by replacing\nthe `MotorConnector` with a mock-up class that behaves as it's supposed\nto, all the layers between there and the EPICS interface can be tested\nin a suitable, automated CI/CD environment.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "emmi",
    "package_url": "https://pypi.org/project/emmi/",
    "platform": null,
    "project_url": "https://pypi.org/project/emmi/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.com/codedump2/emmi/-/issues",
      "Homepage": "https://emmi.rootshell.ro",
      "Source Code": "https://gitlab.com/codedump2/emmi/"
    },
    "release_url": "https://pypi.org/project/emmi/0.0.10/",
    "requires_dist": [
      "pyvisa",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'",
      "softioc ; extra == 'test'",
      "pyepics ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "A Selection of Tools for EPICS Monday-Morning Integrations",
    "version": "0.0.10",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15868142,
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12db0c3c81ac17c07664f8f19f3a31179ece4d8f819635fe065dcfa50b8ce23b",
          "md5": "61029ef00e579b3094fd56ccc98571e6",
          "sha256": "01270e8713c5f45ec88664bc6433c1dd0da4f98bea34ec40de0e2c16b98f9ad1"
        },
        "downloads": -1,
        "filename": "emmi-0.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61029ef00e579b3094fd56ccc98571e6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30856,
        "upload_time": "2022-11-23T14:43:30",
        "upload_time_iso_8601": "2022-11-23T14:43:30.196775Z",
        "url": "https://files.pythonhosted.org/packages/12/db/0c3c81ac17c07664f8f19f3a31179ece4d8f819635fe065dcfa50b8ce23b/emmi-0.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ccd7256d89ee7d8b458d1308ab7ffcda2da886e12f4cf06883792345764afe94",
          "md5": "6669913fe54d4b9d18203d8d9a744b12",
          "sha256": "19ab0060376da6b5f344003687f7d24d71a1609be4655ab6e8cac8fc4cd78967"
        },
        "downloads": -1,
        "filename": "emmi-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "6669913fe54d4b9d18203d8d9a744b12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36239,
        "upload_time": "2022-11-23T14:43:32",
        "upload_time_iso_8601": "2022-11-23T14:43:32.107400Z",
        "url": "https://files.pythonhosted.org/packages/cc/d7/256d89ee7d8b458d1308ab7ffcda2da886e12f4cf06883792345764afe94/emmi-0.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "12db0c3c81ac17c07664f8f19f3a31179ece4d8f819635fe065dcfa50b8ce23b",
        "md5": "61029ef00e579b3094fd56ccc98571e6",
        "sha256": "01270e8713c5f45ec88664bc6433c1dd0da4f98bea34ec40de0e2c16b98f9ad1"
      },
      "downloads": -1,
      "filename": "emmi-0.0.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "61029ef00e579b3094fd56ccc98571e6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 30856,
      "upload_time": "2022-11-23T14:43:30",
      "upload_time_iso_8601": "2022-11-23T14:43:30.196775Z",
      "url": "https://files.pythonhosted.org/packages/12/db/0c3c81ac17c07664f8f19f3a31179ece4d8f819635fe065dcfa50b8ce23b/emmi-0.0.10-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ccd7256d89ee7d8b458d1308ab7ffcda2da886e12f4cf06883792345764afe94",
        "md5": "6669913fe54d4b9d18203d8d9a744b12",
        "sha256": "19ab0060376da6b5f344003687f7d24d71a1609be4655ab6e8cac8fc4cd78967"
      },
      "downloads": -1,
      "filename": "emmi-0.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "6669913fe54d4b9d18203d8d9a744b12",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36239,
      "upload_time": "2022-11-23T14:43:32",
      "upload_time_iso_8601": "2022-11-23T14:43:32.107400Z",
      "url": "https://files.pythonhosted.org/packages/cc/d7/256d89ee7d8b458d1308ab7ffcda2da886e12f4cf06883792345764afe94/emmi-0.0.10.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}