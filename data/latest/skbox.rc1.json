{
  "info": {
    "author": "Hanmi Cheng",
    "author_email": "jxmt089659g@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# skBox使用说明文档\n\n目录\n\n[TOC]\n\n## 一、基本信息\n\n|   版本   |      v0.26.2       |\n| :------: | :----------------: |\n|   作者   |    Hanmi Cheng     |\n| 版本时间 |     2020.02.01     |\n| 联系邮箱 | jxmt089659@163.com |\n\n本包致力于为数据科学工作者提供一些辅助性的工具，其原点是数据分析、机器学习建模及其工程化过程中有许多反复造轮子的代码，基本面上许多其他开源工具已经提供了很好的支持，但总有一些使用不方便的问题。有许多的常见、常用函数也需要进行反复造轮子，代码其实非常容易如根据时间计算年龄之类的，所以本项目致力于以下几个方面:\n\n- 一些基本模块的简化封装以及底层问题的解决\n- 常用的计算逻辑，但又不耦合与业务的部分的封装\n- pandas dataframe及其周围衍生包的常用函数封装以及开发额外的功能\n\n## 二、工具介绍\n\n### 1. skBox.DfTool： pd.DataFrame工具\n\n提供pandas的一些简化的代码操作封装\n\n```python\nfrom skBox.DfTool import DataFrameDf\n\ndfd = DataFrameDf(df=df)\n# 重新获取df\ndf = dfd.df\n```\n\n#### 1.1 数据列base64解码与编码\n\n```python\n# 对指定列进行base64解码\ndfd.base64_decoder(names=['col1', 'col2'])\n# 对指定列进行base64编码\ndfd.base64_encoder(names=['col1', 'col2'])\n```\n\n#### 1.2 常规操作\n\n```python\ndfd.drop(name=['col1', 'col2'])\ndfd.rename(rename_dict={'改名前': '改名后'})\n```\n\n#### 1.3 自动对列中的json格式数据进行递归拆解行转列\n\n目前只做到对单列进行拆解。对于最后{k: v}格式数据 ，如果为list, 且list内数据不再包含另一个dict, 则数据不会进行继续拆分，防止数据从数据意义上做了没有必要的行转列。对于json格式内，一个dict内平级包含2个value为列表的数据，数据直接会计算笛卡尔积，可能造成错误，请尽量避免这种情况发生。如·``'{\"一年一班\": [{\"姓名\": \"张三\"}, {\"姓名\": \"李四\"}],\"一年二班\":[{\"姓名\": \"张三\"}, {\"姓名\": \"李四\"}]}'``\n\n```python\ndfd.json_sep_entance(ex_col='RESP_MSG')\n```\n\n### 2. skBox.DocxApi：python写word文档\n\n提供对python-docx的封装，利用python快速生产word文档(当然，内容得自己写)\n\n```python\nfrom skBox.DocxApi import Docxer\n\ndoc = Docxer()\n```\n\n#### 2.1 增加标题\n\n```python\ndoc.add_heading(\"我是谁\")\n```\n\n#### 2.2 增加段落\n\n```python\ndoc.add_paragraph(\"今天我去哪了\", alignment='居中') # 目前只做了默认靠左和居中，其他还没写\n```\n\n#### 2.3 根据pandas的df创建表格\n\n```\ndf = pd.DataFrame({\"aa\": range(10), \"bb\":range(10, 20)}, index=range(-10, 0))\ndf.index.name = '我是索引'\ndoc.add_table(df, index=True)\n```\n\n#### 2.4 插入图片\n\n```python\nadd_picture(\"e:/temp/test.jpg\", width=6, height=None) # 目前支持单位 英尺（Inches)\n```\n\n### 3. 邮件发送模块\n\n目前只支持腾讯企业邮箱，其他还没做，要做的话可能API会改. 目前代码结构还是有点问题的。\n\n#### 3.1. 一键使用方式\n\n```\nfrom skBox.MailTool import ExMail\nmail = ExMail(user=user, passwd=passwd)\nmail.send_email(self, to_list, cc_list, tag=None, body=None, doc=None, subtype=None):\n```\n\n### 4. skBox.skLogger：日志记录模块\n\nskLogger为魔改封装版logging模块。提供一键默认配置，多进程日志打印，自定义日志格式，格式内自定义输出等功能。\n\n#### 4.1 线程安全的日志打印(功能最强)\n\n```python\nfrom skBox.Toolbox import get_logger_prod, LoggerAdapter\n# 快速初始化\nlogger = get_logger(log_file_name, level=\"info\", log_dir=None, daily_handler=False, keep=1095, compress=True)\n\n# 进阶用法，自定义Fomatter的参数，并且overwrite Logger类中的extra属性\nlogger = get_logger_prod('requestQualifier',\n                         daily_handler=True,\n                         level='debug',\n                         log_fmt='%(asctime)s File \\\"%(filename)s\\\" [%(thread)d-%(reqId)s] %(levelname)s: %(message)s')\nlogger = LoggerAdapter(logger, extra={'reqId': 2333})\nlogger.info(\"我可以\")\n```\n\n#### 4.2 多进程下日志打印\n\n##### 4.2.1 多进程日志会有什么问题?\n\n​       logging模块是线程安全的，但大多数python脚本都是cpu密集型运算。意味着在GIL机制下，python并不能有效利用多线程这种机制，需要开启多进程才能真正利用多核CPU。这一限制带来了许多问题，日志打印就是其中之一。\n\n​        以 TimedRotatingFileHandler 这个类的问题作为例子。这个Handler本来的作用是：按天切割日志文件。（当天的文件是xxxx.log 昨天的文件是xxxx.log.2016-06-01）。这样的好处是，一来可以按天来查找日志，二来可以让日志文件不至于非常大, 过期日志也可以按天删除。在每一个日志stream进行打印的时候logger会进行判断，是否需要rotation。以按天rotation为例子，如果Process-1在00:01收到一条日志记录请求，会判断当前时间是否满足routation条件，即logger类的rolloverAt属性所代表的时间，如果满足条件就会进行rotation，所以你会发现被rotated的日志文件的最后修改时间是在rolloverAt之后的第一条日志请求的时间点。\n\n​       阅读源码会发现，rotation的时候会先判断是否有目标文件，如果有则进行删除，然后重命名(没有rotater的情况下). 但是问题来了，如果是用多进程来输出日志，每个进程在何时收到日志请求并不确定。假设process1在00:00:01进行了rotation,  process2在00:01:01进行了rotation。最终结果会是process2删除了前一天所有的日志，并且把process1创建的当前日志文件重命名为昨天的时间戳，其日志内容为 process1 在00:00:01-00:01:00之间打印的日志内容。\n\n关于其他实现，参考 https://www.jianshu.com/p/d615bf01e37b，但本实现并没有完美解决多进程日志问题，在多个进程同时进行rotation的时候会因为文件被锁无法重命名导致一系列问题。文中提到的加文件锁的方法，确实暂时没有找到同时可以在Window,Linux平台下同时可以实现的办法，且实现复杂。\n\n##### 4.2.2 同一个主进程下多进程安全日志打印\n\n总体思想是利用multiprocessing模块中的Queue进行进程间通讯，再利用一个独立的进程进行日志接受与打印工作，保证了日志的唯一性。功能同4.2类似\n\n实现参考了官方logging文档进行了封装加工 https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes。\n\n```python\nfrom skBox.skLogger import get_sender_logger, log_listener\nimport multiprocessing\nimport time\n\nclass LogTest(object):\n    def __init__(self, ilogger, process_no):\n        self.logger = ilogger\n        self.process_no = process_no\n\n    def run_test(self):\n        for i in range(100):\n            self.logger.info(\"count %s, process %s\" % (i, self.process_no))\n            time.sleep(0.5)\n\n\ndef work_starter(queue, no):\n    logger = get_sender_logger(queue, \"test_worker\")\n    LT = LogTest(ilogger=logger, process_no=no)\n    LT.run_test()\n\n\nif __name__ == '__main__':\n    queue = multiprocessing.Queue()\n    # 启动监听logger进程\n    listener = multiprocessing.Process(target=log_listener,\n                                       args=(queue, \"test_listener\"),\n                                       kwargs={'log_dir': r'E:\\code_work\\skBox\\temp\\temp_log',                                                'daily_handler': True})\n    listener.start()\n    for i in range(3):\n        p = multiprocessing.Process(target=work_starter, args=(queue, i, ))\n        p.start()\n```\n\n##### 4.2.3 多个独立进程下的多进程日志打印\n\nmultiprocessing的队列对于多个独立进程下的日志打印就束手无策了，针对这个问题，写了一个在此种情况下安全的日志打印功能。\n\n但由于用的是直接寻找当前输出文件目录的办法，无法进行原来logging模块意义上的rotation和压缩，因为每个进程不会去判断是否应该rotation,而是直接去正确的文件打印日志（不关心其他进程在干嘛）。如果对于日志压缩有需求，目前想到的优化是，单独做一个定时日志压缩的服务来解决这个问题。且本模块，目前只支持俺天进行日志分割（本质上不会进行分割). 日志会被记录到log_dir/name_log.current_date文件下\n\n```python\nfrom skBox.skLogger import get_save_daily_logger\nlogger = get_save_daily_logger(name, level='info', log_dir=\"/home/test/log\", log_fmt=None)\nlogger.info(\"测试\") # 在/home/test/log.{current_date} 文件下打印日志\n```\n\n#### 4.3 小小的计时器？\n\n目前是个玩具功能，一个简单的装饰器来记录类下函数的运行时间。\n\n```python\nfrom skBox.skLogger import logger_time_it, get_logger_prod\nimport time\n\nclass Test(object):\n    def __init__(self):\n        self.logger = get_logger_prod(\"test_log\")\n        \n    def my_test_func(self):\n        time.sleep(20)\n\nif __name__ == '__main__':  \n    t = Test()\n    t.my_test_func()\n```\n\n### 5. 杂项工具\n\n一些常用的计算函数\n\n```python\nfrom skBox.Toolbox import *\n```\n\n#### 5.1 获得本机IP(内外网)\n\n```python\nip = get_host_ip(inner=True)\n```\n\n#### 5.2 根据生日计算年龄\n\n```python\n# born为出生日期,字符串 yyyyMMdd、yyyy-MM-dd、yyyy/MM/dd\n# 默认用当前时间计算年龄，也可输入end_date=datetime.today()，支持同上的字符串以及datetime格式\n# 小于1周年=0岁\nage = calculate_age(born)\n```\n\n#### 5.3 从二代身份证中抽取年龄和性别信息\n\n首先会进行身份证合规性校验，如果不合规会返回None.\n\n```python\nIE = IdnExtractor()\nage = IE.extract_age(card_no)\ngender = IE.extract_gender(card_no) # 1男，女\n```\n\n#### 5.4 检查手机号合规性\n\n如果合规返回手机号，不然返回空。可选在合规情况下返回运营商。目前可能会有覆盖不全的问题\n\n```python\nPC = PhoneCheck()\nphone = PC.check(phone)\n```\n\n#### 5.5 根据时间起止与时间间隔创造时间列表\n\n输入为字符串格式时间，开始和结束时间必须抱持格式一致。\n\n```python\ndate_list = create_assist_date(datestart=None, dateend=None,\n                               infmt='%Y-%m-%d', ofmt='%Y-%m-%d',\n                               unit='days', interval=1):\n```\n\n#### 5.6 字符串全半角相互转换\n\n```python\nres = strQ2B(ister) # 全角转半角\nres = strB2Q(ister) # 半角转全角\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "skBox",
    "package_url": "https://pypi.org/project/skBox/",
    "platform": "",
    "project_url": "https://pypi.org/project/skBox/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/skBox/0.26.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "super kit box",
    "version": "0.26.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7143429,
  "releases": {
    "0.26.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0de6f2fe7041fee78ff512716123c0caa16e9eb5a93939aa12fd37f1e7c3da2",
          "md5": "4edfd7f5cde8470a89bd26447d96768e",
          "sha256": "3a4ecfce8fca5d3566c525902d25145c433f094f88443f38d9abb8016acd1ecb"
        },
        "downloads": -1,
        "filename": "skBox-0.26.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4edfd7f5cde8470a89bd26447d96768e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20767,
        "upload_time": "2020-05-01T08:38:48",
        "upload_time_iso_8601": "2020-05-01T08:38:48.876420Z",
        "url": "https://files.pythonhosted.org/packages/b0/de/6f2fe7041fee78ff512716123c0caa16e9eb5a93939aa12fd37f1e7c3da2/skBox-0.26.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b0de6f2fe7041fee78ff512716123c0caa16e9eb5a93939aa12fd37f1e7c3da2",
        "md5": "4edfd7f5cde8470a89bd26447d96768e",
        "sha256": "3a4ecfce8fca5d3566c525902d25145c433f094f88443f38d9abb8016acd1ecb"
      },
      "downloads": -1,
      "filename": "skBox-0.26.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4edfd7f5cde8470a89bd26447d96768e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20767,
      "upload_time": "2020-05-01T08:38:48",
      "upload_time_iso_8601": "2020-05-01T08:38:48.876420Z",
      "url": "https://files.pythonhosted.org/packages/b0/de/6f2fe7041fee78ff512716123c0caa16e9eb5a93939aa12fd37f1e7c3da2/skBox-0.26.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}