{
  "info": {
    "author": "Elias Dorneles",
    "author_email": "eliasdorneles@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "==========\nBeyond VCR\n==========\n\nBeyondVCR helps you to write tests for code doing HTTP requests\n\nIt uses custom HTTP methods for communicating to server to setup mocking\nrequests, reset the mock or retrieve the recorded requests.\n\nIn a nutshell:\n\n* Tiny and lightweight mock HTTP server\n* Setup mock requests with custom HTTP methods (``MOCK_GET``, ``MOCK_POST``, ...)\n* Reset the mock server with custom HTTP method ``MOCK_RESET``\n* Fetch all recorded requests made to the server with a HTTP request ``MOCK_RETRIEVE``\n* Free software: MIT license\n\n\nUsing BeyondVCR\n###############\n\nYou can choose to either run the server with Docker, or run the Python module.\n\nRunning the server\n==================\n\nOption 1: Running the Python module directly\n--------------------------------------------\n\nOnce you've installed ``beyondvcr`` with ``pip install beyondvcr``, you can start the mock server with::\n\n    python -m beyondvcr.server\n\nIt will show a message like:\n\n```\nStarting mock server on http://0.0.0.0:7777, use <Ctrl-C> to stop\n```\n\nThis means that the server is ready to be used.\n\n\nOption 2: Running with Docker\n-----------------------------\n\nRun::\n\n    docker run --rm -p 7777:80 registry.gitlab.com/eliasdorneles/beyondvcr\n\nThis will download the Docker image and run it. When you see a a message like:\n\n```\nStarting mock server on http://0.0.0.0:80, use <Ctrl-C> to stop\n```\n\nThis means that the server is ready to be used.\n\n.. note:: Note however that you'll have to be mindful of which HTTP port to use\n   to make the HTTP calls, if you're connecting from the host to the server,\n   you'll need to use the port ``7777``, if you're connecting from another\n   container you need to link the containers and use the ``80`` port.\n\n\nUsing the mock server\n=====================\n\nOnce you've got the server running, you can make calls to the server.\n\nBy default, when we haven't told the mock server what to answer, it will answer\nany regular HTTP request with a ``404`` error and a response like this::\n\n    $ curl -D - http://localhost:7777/hello\n    HTTP/1.0 404 Not Found\n    Server: BaseHTTP/0.6 Python/3.10.4\n    Date: Mon, 13 Jun 2022 20:18:31 GMT\n\n    Mock server got unexpected request:\n    {\n      \"path\": \"/hello\",\n      \"query\": \"\",\n      \"method\": \"GET\",\n      \"body\": \"\",\n      \"headers\": {\n        \"Host\": \"localhost:7777\",\n        \"User-Agent\": \"curl/7.81.0\",\n        \"Accept\": \"*/*\"\n      }\n    }\n\n\nPreparing a canned response\n---------------------------\n\nTo setup the mock server so that it sends a canned response when you do a GET\nrequest to the path ``/hello``, we will send a MOCK_GET request\nlike so::\n\n    $ curl -X MOCK_GET -D - http://localhost:7777/hello -d '{\"hello\": \"Elias\"}'\n    HTTP/1.0 200 OK\n    Server: BaseHTTP/0.6 Python/3.10.4\n    Date: Mon, 13 Jun 2022 20:32:14 GMT\n\n    GET mock recorded\n\nNow, when we do our ``GET /hello`` again, we will see the body that we recorded with MOCK_GET::\n\n    $ curl -D - http://localhost:7777/hello\n    HTTP/1.0 200 OK\n    Server: BaseHTTP/0.6 Python/3.10.4\n    Date: Mon, 13 Jun 2022 20:32:16 GMT\n\n    {\"hello\": \"Elias\"}\n\nAsking the server about which requests were made\n------------------------------------------------\n\nThe mock server tracks in memory information about every regular HTTP request\nsent to it, until you reset it.\n\nYou can ask the server to send you information about these requests using the\n``MOCK_RETRIEVE`` custom HTTP method::\n\n    $ curl -s -X MOCK_RETRIEVE http://localhost:7777 | python3 -m json.tool\n    [\n        {\n            \"path\": \"/hello\",\n            \"query\": \"\",\n            \"method\": \"GET\",\n            \"body\": \"\",\n            \"headers\": {\n                \"Host\": \"localhost:7777\",\n                \"User-Agent\": \"curl/7.81.0\",\n                \"Accept\": \"*/*\"\n            }\n        }\n    ]\n\nYou can use this feature to make assertions on your test code to verify which\nHTTP calls were made by the code being exercised.\n\nResetting the mock server\n-------------------------\n\nTo tell the mock server to forget all canned responses that were setup and all the recorded requests, use the ``MOCK_RESET`` HTTP method::\n\n    $ curl -X MOCK_RESET -D - http://localhost:7777\n    HTTP/1.0 200 OK\n    Server: BaseHTTP/0.6 Python/3.10.4\n    Date: Mon, 13 Jun 2022 20:37:35 GMT\n\n    Mock resetted\n\nAt this point, it's like if we had just started the server, and if you send a ``MOCK_RETRIEVE`` it will return empty::\n\n    $ curl -s -X MOCK_RETRIEVE http://localhost:7777\n    []\n\n\n=======\nHistory\n=======\n\n0.1.0a1 (2020-06-09)\n####################\n\n* First release on PyPI.\n\n\n0.1.1 (2022-06-13)\n##################\n\n* Added basic documentation.\n* Added linters, and improved maintenance tooling.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/eliasdorneles/beyondvcr",
    "keywords": "beyondvcr",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "beyondvcr",
    "package_url": "https://pypi.org/project/beyondvcr/",
    "platform": null,
    "project_url": "https://pypi.org/project/beyondvcr/",
    "project_urls": {
      "Homepage": "https://gitlab.com/eliasdorneles/beyondvcr"
    },
    "release_url": "https://pypi.org/project/beyondvcr/0.1.1/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "BeyondVCR helps you to write tests for code that does HTTP calls",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14119809,
  "releases": {
    "0.1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fce3ae4809c02a0491f8cba68adfe2b11e71b249756c7909869e8607ccd8895",
          "md5": "a58c6e856d4bfdb4cea56d072431ad88",
          "sha256": "bd913b60b039afcedf2ced823cf5dc18d7d7a7861ce932d5e9cb0bb85770e748"
        },
        "downloads": -1,
        "filename": "beyondvcr-0.1.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a58c6e856d4bfdb4cea56d072431ad88",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 4876,
        "upload_time": "2020-06-09T09:53:05",
        "upload_time_iso_8601": "2020-06-09T09:53:05.095612Z",
        "url": "https://files.pythonhosted.org/packages/3f/ce/3ae4809c02a0491f8cba68adfe2b11e71b249756c7909869e8607ccd8895/beyondvcr-0.1.0a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34724d69a704b8b04eb7e1d3021d76906dc91e7bae539e4429028797c8b10135",
          "md5": "8e7a443f4c8a98be45a6501860974d9b",
          "sha256": "022f84f0007647b85d3a9954ec4a32c6cdaf533e0965ad1338efa02695608f5b"
        },
        "downloads": -1,
        "filename": "beyondvcr-0.1.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "8e7a443f4c8a98be45a6501860974d9b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 3505,
        "upload_time": "2020-06-09T09:53:07",
        "upload_time_iso_8601": "2020-06-09T09:53:07.001355Z",
        "url": "https://files.pythonhosted.org/packages/34/72/4d69a704b8b04eb7e1d3021d76906dc91e7bae539e4429028797c8b10135/beyondvcr-0.1.0a1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fed5798dc29665733e46f0b0be8dbe4b28c733e9849fc5613a6c8d965e75d0be",
          "md5": "911b04a836bfd0f7d3c8b16fffb3d4fb",
          "sha256": "a31e161e9adf9b523208475b48479d55bfa5c96145d1065b3deb0ca1aa21fb38"
        },
        "downloads": -1,
        "filename": "beyondvcr-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "911b04a836bfd0f7d3c8b16fffb3d4fb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 6449,
        "upload_time": "2022-06-13T21:03:31",
        "upload_time_iso_8601": "2022-06-13T21:03:31.027443Z",
        "url": "https://files.pythonhosted.org/packages/fe/d5/798dc29665733e46f0b0be8dbe4b28c733e9849fc5613a6c8d965e75d0be/beyondvcr-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f26d67bca4109a2914e8ca760323c27226e4ec1bba93cfd61b3c5669dc7716b",
          "md5": "9cd6351098f213da10dd94799fb9a49a",
          "sha256": "a1321711ccf011d08bd51c4d2308689fa4b82814551ce5b3ca92fa98fe4a9d33"
        },
        "downloads": -1,
        "filename": "beyondvcr-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9cd6351098f213da10dd94799fb9a49a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6048,
        "upload_time": "2022-06-13T21:03:33",
        "upload_time_iso_8601": "2022-06-13T21:03:33.293914Z",
        "url": "https://files.pythonhosted.org/packages/6f/26/d67bca4109a2914e8ca760323c27226e4ec1bba93cfd61b3c5669dc7716b/beyondvcr-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fed5798dc29665733e46f0b0be8dbe4b28c733e9849fc5613a6c8d965e75d0be",
        "md5": "911b04a836bfd0f7d3c8b16fffb3d4fb",
        "sha256": "a31e161e9adf9b523208475b48479d55bfa5c96145d1065b3deb0ca1aa21fb38"
      },
      "downloads": -1,
      "filename": "beyondvcr-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "911b04a836bfd0f7d3c8b16fffb3d4fb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 6449,
      "upload_time": "2022-06-13T21:03:31",
      "upload_time_iso_8601": "2022-06-13T21:03:31.027443Z",
      "url": "https://files.pythonhosted.org/packages/fe/d5/798dc29665733e46f0b0be8dbe4b28c733e9849fc5613a6c8d965e75d0be/beyondvcr-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f26d67bca4109a2914e8ca760323c27226e4ec1bba93cfd61b3c5669dc7716b",
        "md5": "9cd6351098f213da10dd94799fb9a49a",
        "sha256": "a1321711ccf011d08bd51c4d2308689fa4b82814551ce5b3ca92fa98fe4a9d33"
      },
      "downloads": -1,
      "filename": "beyondvcr-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9cd6351098f213da10dd94799fb9a49a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6048,
      "upload_time": "2022-06-13T21:03:33",
      "upload_time_iso_8601": "2022-06-13T21:03:33.293914Z",
      "url": "https://files.pythonhosted.org/packages/6f/26/d67bca4109a2914e8ca760323c27226e4ec1bba93cfd61b3c5669dc7716b/beyondvcr-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}