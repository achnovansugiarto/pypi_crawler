{
  "info": {
    "author": "David Montaner",
    "author_email": "david.montaner@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Scientific/Engineering",
      "Topic :: Utilities"
    ],
    "description": "# Pandas Save Profiler\n\n`pandas_save_profiler` helps you evaluating and comparing the performance of different pandas read and write methods.\n\n## Install\n\n    pip install pandas-save-profiler\n\n## Usage\n\nLoad pandas and a dataframe you want to save.\n\n    import pandas as pd\n    data = pd.util.testing.makeMissingDataframe()\n\nLoad `pandas_save_profiler` and use it to evaluate pandas performance saving a _pickle_ file:\n\n    import pandas_save_profiler\n    data.save_profiler('to_pickle')\n\nThe output is a pandas series:\n\n```\nformat                                                 pickle\nwriter                                              to_pickle\nreader                                            read_pickle\nwriter_args                      {'path': '/tmp/tmppk7nkivk'}\nreader_args        {'filepath_or_buffer': '/tmp/tmppk7nkivk'}\nwriter_time                                         0.0798338\nreader_time                                         0.0294895\nwriter_memory                                     1.09087e+08\nreader_memory                                     1.09118e+08\ndf_memory                                                 288\nfile_size                                                1122\nwriter_memory_h                                      109.1 MB\nreader_memory_h                                      109.1 MB\ndf_memory_h                                         288 Bytes\nfile_size_h                                            1.1 kB\nrepeats                                                     5\nreads_the_same                                           True\ndtype: object\n```\n\nValues in the series indicate:\n\n- The __format__ used to persist the dataframe and the writing and reading options.\n- Writing and reading __times__ in seconds.\n- Writing and reading __memory__ increment.\n- Size of the dataframe in memory.\n- __Size__ of the saved file.\n\nMemory values are in __bytes__ but a \"humanized\" version is also reported.\nThe saving and reloading process is __repeated__ 5 times and average values are returned.\nThe flag `reads_the_same` indicates whether the reloaded file is exactly the same as the original one or has some differences.\n\n\nTo __compare several writing options__ you can use the `save_profiler` function on each of them\nand combine the results into a results dataframe:\n\n```\npd.DataFrame([\n    data.save_profiler('to_csv'),\n    data.save_profiler('to_pickle'),\n    data.save_profiler('to_parquet'),\n])\n\n```\n\nreturns:\n\n```\n    format      writer        reader                          writer_args  \\\n0      csv      to_csv      read_csv  {'path_or_buf': '/tmp/tmpsedehjob'}   \n1   pickle   to_pickle   read_pickle         {'path': '/tmp/tmp_vhue2q7'}   \n2  parquet  to_parquet  read_parquet         {'path': '/tmp/tmp0zn8qsnk'}   \n\n                                  reader_args  writer_time  reader_time  \\\n0  {'filepath_or_buffer': '/tmp/tmpsedehjob'}     0.031842     0.039830   \n1  {'filepath_or_buffer': '/tmp/tmp_vhue2q7'}     0.025705     0.028469   \n2                {'path': '/tmp/tmp0zn8qsnk'}     0.039009     0.052447   \n\n   writer_memory  reader_memory  df_memory  file_size writer_memory_h  \\\n0    110149632.0    110599372.8        288        139        110.1 MB   \n1    110813184.0    110813184.0        288       1122        110.8 MB   \n2    116892467.2    118014771.2        288       3449        116.9 MB   \n\n  reader_memory_h df_memory_h file_size_h  repeats  reads_the_same  \n0        110.6 MB   288 Bytes   139 Bytes        5           False  \n1        110.8 MB   288 Bytes      1.1 kB        5            True  \n2        118.0 MB   288 Bytes      3.4 kB        5            True  \n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/dmontaner/pandas_save_profiler",
    "keywords": "pandas,save,profile",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pandas-save-profiler",
    "package_url": "https://pypi.org/project/pandas-save-profiler/",
    "platform": "",
    "project_url": "https://pypi.org/project/pandas-save-profiler/",
    "project_urls": {
      "Documentation": "https://github.com/dmontaner/pandas_save_profiler",
      "Homepage": "https://github.com/dmontaner/pandas_save_profiler",
      "Issue Tracker": "https://github.com/dmontaner/pandas_save_profiler/issues",
      "Source Code": "https://github.com/dmontaner/pandas_save_profiler"
    },
    "release_url": "https://pypi.org/project/pandas-save-profiler/0.0.0/",
    "requires_dist": [
      "pandas",
      "humanize",
      "memory-profiler (>=0.57.0)",
      "pyarrow",
      "SQLAlchemy",
      "xlwt",
      "xlrd",
      "openpyxl"
    ],
    "requires_python": ">=3.6",
    "summary": "Tools to evaluate pandas performance when saving dataframes in different file formats.",
    "version": "0.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7364749,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5aa902661d379ec8c3157d59b55da6db5456b7f01551bfa0c67730131ea8a493",
          "md5": "be9f6d8ec940ea11163837534d2a5374",
          "sha256": "382d58eaa03f48dabf1777cfcdcb916a3dc1d4ebe0bcdf35eff200c8d3e27aa1"
        },
        "downloads": -1,
        "filename": "pandas_save_profiler-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be9f6d8ec940ea11163837534d2a5374",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7542,
        "upload_time": "2020-05-31T14:57:14",
        "upload_time_iso_8601": "2020-05-31T14:57:14.660282Z",
        "url": "https://files.pythonhosted.org/packages/5a/a9/02661d379ec8c3157d59b55da6db5456b7f01551bfa0c67730131ea8a493/pandas_save_profiler-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a8cfb310a64edad0627cd37e9af9cc7d090d0242aef4c2f73c2a8e69d7bb610",
          "md5": "4da50201ea4ee42aab633f6c8d5bc993",
          "sha256": "dd11dc5cd2ca4245e675d05adccd4f5a44518dbada0efd974c81540e1bfa5ca5"
        },
        "downloads": -1,
        "filename": "pandas_save_profiler-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4da50201ea4ee42aab633f6c8d5bc993",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 6104,
        "upload_time": "2020-05-31T14:57:16",
        "upload_time_iso_8601": "2020-05-31T14:57:16.772221Z",
        "url": "https://files.pythonhosted.org/packages/4a/8c/fb310a64edad0627cd37e9af9cc7d090d0242aef4c2f73c2a8e69d7bb610/pandas_save_profiler-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5aa902661d379ec8c3157d59b55da6db5456b7f01551bfa0c67730131ea8a493",
        "md5": "be9f6d8ec940ea11163837534d2a5374",
        "sha256": "382d58eaa03f48dabf1777cfcdcb916a3dc1d4ebe0bcdf35eff200c8d3e27aa1"
      },
      "downloads": -1,
      "filename": "pandas_save_profiler-0.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "be9f6d8ec940ea11163837534d2a5374",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7542,
      "upload_time": "2020-05-31T14:57:14",
      "upload_time_iso_8601": "2020-05-31T14:57:14.660282Z",
      "url": "https://files.pythonhosted.org/packages/5a/a9/02661d379ec8c3157d59b55da6db5456b7f01551bfa0c67730131ea8a493/pandas_save_profiler-0.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a8cfb310a64edad0627cd37e9af9cc7d090d0242aef4c2f73c2a8e69d7bb610",
        "md5": "4da50201ea4ee42aab633f6c8d5bc993",
        "sha256": "dd11dc5cd2ca4245e675d05adccd4f5a44518dbada0efd974c81540e1bfa5ca5"
      },
      "downloads": -1,
      "filename": "pandas_save_profiler-0.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4da50201ea4ee42aab633f6c8d5bc993",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 6104,
      "upload_time": "2020-05-31T14:57:16",
      "upload_time_iso_8601": "2020-05-31T14:57:16.772221Z",
      "url": "https://files.pythonhosted.org/packages/4a/8c/fb310a64edad0627cd37e9af9cc7d090d0242aef4c2f73c2a8e69d7bb610/pandas_save_profiler-0.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}