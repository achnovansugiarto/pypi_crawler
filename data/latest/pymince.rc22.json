{
  "info": {
    "author": "rmoralespp",
    "author_email": "rmoralespp@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# pymince\n\n[![CI](https://github.com/rmoralespp/pymince/workflows/CI/badge.svg)](https://github.com/rmoralespp/pymince/actions?query=event%3Arelease+workflow%3ACI)\n[![pypi](https://img.shields.io/pypi/v/pymince.svg)](https://pypi.python.org/pypi/pymince)\n[![versions](https://img.shields.io/pypi/pyversions/pymince.svg)](https://github.com/rmoralespp/pymince)\n[![codecov](https://codecov.io/gh/rmoralespp/pymince/branch/main/graph/badge.svg)](https://app.codecov.io/gh/rmoralespp/pymince)\n[![license](https://img.shields.io/github/license/rmoralespp/pymince.svg)](https://github.com/rmoralespp/pymince/blob/main/LICENSE)\n[![Downloads](https://pepy.tech/badge/pymince)](https://pepy.tech/project/pymince)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Linter: ruff](https://img.shields.io/badge/linter-_ruff-orange)](https://github.com/charliermarsh/ruff)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit)](https://github.com/pre-commit/pre-commit)\n\n### About\npymince is a collection of useful tools that are \"missing\" from the Python standard library.\n\n\n### Installation (via pip)\n\n```pip install pymince```\n\n### Tests\n\n```\n(env)$ pip install -r requirements.txt   # Ignore this command if it has already been executed\n(env)$ pytest tests/\n(env)$ pytest --cov pymince # Tests with coverge\n```\n\n### Usage\n| PyModules  | Tools  |\n| :--------  | :----- |\n| **algorithm.py** |[*fibonacci*](#fibonacci), [*luhn*](#luhn), [*sieve_of_eratosthenes*](#sieve_of_eratosthenes)|\n| **boolean.py** |[*string2bool*](#string2bool)|\n| **dates.py** |[*IsoWeekDay*](#IsoWeekDay), [*WeekDay*](#WeekDay), [*irange*](#irange), [*string2year*](#string2year)|\n| **dictionary.py** |[*DigestGetter*](#DigestGetter), [*all_true_values*](#all_true_values), [*find_leaf_value*](#find_leaf_value), [*from_objects*](#from_objects), [*frozendict*](#frozendict)|\n| **file.py** |[*decompress*](#decompress), [*ensure_directory*](#ensure_directory), [*is_empty_directory*](#is_empty_directory), [*match_from_zip*](#match_from_zip), [*replace_extension*](#replace_extension)|\n| **functional.py** |[*caller*](#caller), [*classproperty*](#classproperty), [*identity*](#identity), [*once*](#once), [*pipe*](#pipe), [*retry_if_errors*](#retry_if_errors), [*retry_if_none*](#retry_if_none), [*set_attributes*](#set_attributes), [*suppress*](#suppress)|\n| **iterator.py** |[*all_distinct*](#all_distinct), [*all_equal*](#all_equal), [*all_equals*](#all_equals), [*all_identical*](#all_identical), [*centroid*](#centroid), [*consume*](#consume), [*grouper*](#grouper), [*has_only_one*](#has_only_one), [*ibool*](#ibool), [*in_all*](#in_all), [*in_any*](#in_any), [*ipush*](#ipush), [*mul*](#mul), [*pad_end*](#pad_end), [*pad_start*](#pad_start), [*replacer*](#replacer), [*splitter*](#splitter), [*sub*](#sub), [*truediv*](#truediv), [*uniquer*](#uniquer), [*uniques*](#uniques)|\n| **json.py** |[*JSONEncoder*](#JSONEncoder), [*dump_from_csv*](#dump_from_csv), [*dump_into*](#dump_into), [*dump_into_zip*](#dump_into_zip), [*load_from*](#load_from), [*load_from_zip*](#load_from_zip)|\n| **logging.py** |[*StructuredFormatter*](#StructuredFormatter), [*timed_block*](#timed_block)|\n| **std.py** |[*bind_json_std*](#bind_json_std)|\n| **text.py** |[*are_anagram*](#are_anagram), [*fullstr*](#fullstr), [*get_random_secret*](#get_random_secret), [*get_random_string*](#get_random_string), [*is_binary*](#is_binary), [*is_email_address*](#is_email_address), [*is_int*](#is_int), [*is_negative_int*](#is_negative_int), [*is_palindrome*](#is_palindrome), [*is_payment_card*](#is_payment_card), [*is_percentage*](#is_percentage), [*is_positive_int*](#is_positive_int), [*is_roman*](#is_roman), [*is_url*](#is_url), [*multireplace*](#multireplace), [*multireplacer*](#multireplacer), [*remove_decimal_zeros*](#remove_decimal_zeros), [*remove_number_commas*](#remove_number_commas), [*replace*](#replace)|\n| **warnings.py** |[*deprecated*](#deprecated)|\n| **xml.py** |[*iterparse*](#iterparse)|\n\n#### algorithm.py\n\n##### fibonacci\n```\nfibonacci(n=None)\n\nReturns a generator with fibonacci series up to n.\nRuns indefinitely if n is specified as None.\n\n:param Optional[int] n: Must be None or number.\n:rtype: Generator[int]\n```\n##### luhn\n```\nluhn(value: str) -> bool\n\nThe Luhn algorithm or Luhn formula, also known as the \"modulus 10\" or \"mod 10\" algorithm,\nnamed after its creator, IBM scientist Hans Peter Luhn,\nis a simple checksum formula used to validate a variety of\nidentification numbers, such as credit card numbers, IMEI numbers, National Provider Identifier numbers\n\nBased on: https://en.wikipedia.org/wiki/Luhn_algorithm\n```\n##### sieve_of_eratosthenes\n```\nsieve_of_eratosthenes(n)\n\nPrimes less than n.\nBased on: https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\n:param int n: n an integer n > 1\n:rtype: Generator[int]. All prime numbers from 2 through n.\n\nExamples:\n    from pymince.algorithm import sieve_of_eratosthenes as primes\n    primes(30) # --> 2, 3, 5, 7, 11, 13, 17, 19, 23, 29\n```\n#### boolean.py\n\n##### string2bool\n```\nstring2bool(value, ignorecase=False)\n\nFunction to convert a string representation of\ntruth to True or False.\n\n:param str value: value to convert.\n:param bool ignorecase: Uppercase/lowercase letters of given \"value\" are ignored.\n\n:raise: \"ValueError\" if \"value\" is anything else.\n:rtype: bool\n\nExamples:\n    from pymince.boolean import string2bool\n\n    string2bool(\"true\") # --> True\n    string2bool(\"false\") # --> False\n\n    string2bool(\"TRUE\") # --> ValueError\n    string2bool(\"TRUE\", ignorecase=True) # --> True\n\n    string2bool(\"FALSE\") # --> ValueError\n    string2bool(\"FALSE\", ignorecase=True) # --> False\n```\n#### dates.py\n\n##### IsoWeekDay\n```\nIsoWeekDay(value, names=None, *, module=None, qualname=None, type=None, start=1)\n\nPython Enum containing Days of the Week, according to ISO,\nwhere Monday == 1 ... Sunday == 7.\n\nProvides a 'of' method can be used to verbalize a datetime.datetime.isoweekday\nreturn value.\n\nExample:\n     from pymince.dates import IsoWeekDay\n\n    friday = datetime.datetime(2023, 2, 17)\n    IsoWeekDay.of(friday)  #  pymince.dates.IsoWeekDay.FRIDAY\n```\n##### WeekDay\n```\nWeekDay(value, names=None, *, module=None, qualname=None, type=None, start=1)\n\nPython Enum containing Days of the Week,\nwhere Monday == 0 ... Sunday == 6.\n\nProvides a 'of' method can be used to verbalize a datetime.datetime.weekday\nreturn value.\n\nExample:\n    from pymince.dates import WeekDay\n\n    friday = datetime.datetime(2023, 2, 17)\n    WeekDay.of(friday)  #  pymince.dates.WeekDay.FRIDAY\n```\n##### irange\n```\nirange(start_date, stop_date=None, time_step=None)\n\nReturns a generator that produces a sequence of datetime's from \"start_date\" (inclusive)\nto \"stop_date\" (exclusive) by \"time_step\".\n\n:param datetime.datetime start_date: Inclusive.\n:param datetime.datetime stop_date: Exclusive. `utcnow` is used by default.\n:param datetime.delta time_step: one-day `timedelta` is used by default.\n\n Examples:\n    import datetime\n\n    from pymince.dates import irange\n\n    ini = datetime.datetime.fromisoformat(\"2022-10-31\")\n    end = datetime.datetime.fromisoformat(\"2022-11-02\")\n    day = datetime.timedelta(days=1)\n\n    it = irange(ini, stop_date=end, time_step=day)\n\n    next(it) # --> datetime.datetime(2022, 10, 31, 0, 0)\n    next(it) # --> datetime.datetime(2022, 11, 1, 0, 0)\n    next(it) # --> raise StopIteration\n```\n##### string2year\n```\nstring2year(value, gte=None, lte=None, shift=None)\n\nFunction to convert a string year representation to integer year.\n\n:param str value: Value to convert.\n:param Optional[int] gte: if it is specified is required that: year >= gte\n:param Optional[int] lte: if it is specified is required that: year <= lte\n:param Optional[int] shift: use a two-digit year on shift\n\n:raise: \"ValueError\" if \"value\" cannot be converted.\n:rtype: int\n\nExamples:\n    from pymince.dates import string2year\n\n    string2year(\"53\", shift=None) # --> 2053\n    string2year(\"53\", shift=1953) # --> 1953\n    string2year(\"52\", shift=1953) # --> 2052\n    string2year(\"54\", shift=1953) # --> 1954\n\n    string2year(\"1954\") # --> 1954\n\n    string2year(\"123\") # --> ValueError\n    string2year(\"1955\", gte=1956) # --> ValueError\n    string2year(\"1955\", lte=1954) # --> ValueError\n```\n#### dictionary.py\nUseful functions that use dictionaries.\n##### DigestGetter\n```\nDigestGetter(include_keys=None, exclude_keys=None)\n\nCalculate a digest of a \"jsonified\" python dictionary.\n\n:param include_keys: dictionary keys to exclude\n:param exclude_keys: dictionary keys to include\n:rtype: str\n\nExamples:\n    from pymince.dictionary import DigestGetter\n\n    getter = DigestGetter(include_keys=(\"a\",))\n    getter({\"a\": 1, \"b\": 1}) # --> bb6cb5c68df4652941caf652a366f2d8\n    getter({\"a\": 1}) # --> bb6cb5c68df4652941caf652a366f2d8\n```\n##### all_true_values\n```\nall_true_values(dictionary, keys)\n\nCheck if a dictionary has all the specified keys and if all its\nevaluated key-related values are True.\n\n:param dict dictionary:\n:param keys: keys sequence\n:rtype: bool\n\nExamples:\nfrom pymince.dictionary import all_true_values\n\nall_true_values({\"a\": 1, \"b\": 2}, (\"a\", \"b\")) # --> True\nall_true_values({\"a\": 1, \"b\": 0}, (\"a\", \"b\")) # --> False\nall_true_values({\"a\": 1, \"b\": 0}, (\"a\",)) # --> True\n```\n##### find_leaf_value\n```\nfind_leaf_value(key, dictionary)\n\nFind leaf value in mapping.\n\n:param Any key: key to find\n:param dict dictionary:\n\nExamples:\n    from pymince.dictionary import find_leaf_value\n\n    find_leaf_value('a', {}) # --> 'a'\n    find_leaf_value('a', {'a': 'b', 'b': 'c'}) # --> 'c'\n    find_leaf_value('a', {'a': 'a'}) # --> 'a'\n```\n##### from_objects\n```\nfrom_objects(iterable, key_getter, value_getter)\n\nCreate a new dictionary with elements generated from\nthe \"key_getter\" and \"value_getter\" callbacks applied to each element of the iterable.\n\n:param Iterable[any] iterable:\n:param Callable key_getter:\n    Dictionary keys getter.\n    It is called with each element of \"iterable\" passing it as an argument.\n:param Callable value_getter:\n    Dictionary values getter.\n    It is called with each element of \"iterable\" passing it as an argument.\n\n:raise: ValueError if any generated key is duplicate.\n:rtype: dict\n\nExamples:\n    from pymince.dictionary import from_objects\n\n    keygetter = operator.itemgetter(0)\n    valgetter = operator.itemgetter(1, 2)\n\n    values = iter([(1, \"a\", \"b\"), (2, \"a\", \"b\")])\n    from_objects(values, keygetter, valgetter) # --> {1: ('a', 'b'), 2: ('a', 'b')}\n```\n##### frozendict\n```\nfrozendict(*args, **kwargs)\n\nReturns a \"MappingProxyType\" from a dictionary built according to given parameters.\nAdd immutability only on a first level.\n\nExamples:\n    from pymince.dictionary import frozendict\n\n    my_dict = frozendict(a=1, b=2)\n    my_dict[\"a\"] # --> 1\n    list(my_dict.items())  # --> [(\"a\", 1), (\"b\", 2)]\n    my_dict[\"c\"] = 3  # --> TypeError\n```\n#### file.py\n\n##### decompress\n```\ndecompress(src_path, dst_path, size=65536)\n\nDecompress given file in blocks using gzip.\n\n:param str src_path: source file path\n:param str dst_path: destination file(unzipped) path\n:param int size: Read up to size bytes from src_path for each block.\n:return: dst_path\n\n Examples:\n    from pymince.file import decompress\n\n    decompress(\"/foo/src.txt.gz\", \"/baz/dst.txt\")  # --> \"/baz/dst.txt\"\n```\n##### ensure_directory\n```\nensure_directory(path, cleaning=False)\n\nMake sure the given file path is an existing directory.\nIf it does not exist, a new directory will be created.\n\n:param str path:\n:param bool cleaning:\n    If \"cleaning\" is True and a directory already exists,\n    this directory and the files contained in it will be deleted.\n\n    If \"cleaning\" is True and a file already exists,\n    this file will be deleted.\n```\n##### is_empty_directory\n```\nis_empty_directory(path)\n\nCheck if the given path is an empty directory.\n```\n##### match_from_zip\n```\nmatch_from_zip(zip_file, pattern)\n\nMake an iterator that returns file names in the zip file that\nmatch the given pattern.\nUppercase/lowercase letters are ignored.\n\n:param zip_file: ZipFile object or zip path.\n:param pattern: \"re.Pattern\" to filter filename list\n:return: Iterator with the filenames found\n\nExamples:\n    import pymince.file\n    pymince.file.match_from_zip(\"archive.zip\", \"^file\") # --> file1.log file2.txt\n    pymince.file.match_from_zip(zipfile.ZipFile(\"archive.zip\"), \"^file\") # --> file1.log file2.txt\n```\n##### replace_extension\n```\nreplace_extension(filename, old_ext=None, new_ext=None)\n\nReplace filename \"old_ext\" with \"new_ext\".\n\n:param str filename:\n:param Optional[str] old_ext:\n:param Optional[str] new_ext:\n\nExamples:\n    from pymince.file import replace_extension\n\n    # remove extensions\n    replace_extension(\"/home/user/file.old\") # --> \"/home/user/file\"\n    replace_extension(\"/home/user/file.old\", old_ext=\".old\") # --> \"/home/user/file\"\n    replace_extension(\"/home/user/file.old\", old_ext=\".new\") # --> \"/home/user/file.old\"\n\n    # replace extensions\n    replace_extension(\"/home/user/file.old\", new_ext=\".new\") # --> \"/home/user/file.new\"\n    replace_extension(\"/home/user/file.old\", old_ext=\".old\", new_ext=\".new\") # --> \"/home/user/file.new\"\n    replace_extension(\"/home/user/file.old\", old_ext=\".new\", new_ext=\".new\") # --> \"/home/user/file.old\"\n```\n#### functional.py\n\n##### caller\n```\ncaller(*args, **kwargs)\n\nReturn a callable that calls with given params.\n\nExamples:\n    import pymince.functional\n\n    caller = pymince.functional.caller(range(5))\n    caller(len)   #  5\n    caller(list)  # [0, 1, 2, 3, 4]\n```\n##### classproperty\n```\nclassproperty(method=None)\n\nDecorator that converts a method with a single cls argument into a property\nthat can be accessed directly from the class.\n\nExamples:\n    from pymince.functional import classproperty\n\n    class MyClass:\n        __foo = \"var\"\n\n        @classproperty\n        def foo(cls):\n            return cls.__foo\n```\n##### identity\n```\nidentity(x)\n\nTakes a single argument and returns it unchanged.\nIdentity function, as defined in https://en.wikipedia.org/wiki/Identity_function.\n```\n##### once\n```\nonce(fn)\n\nDecorator to execute a function only once.\n\nExamples:\n    from pymince.functional import once\n\n    @once\n    def inc_once():\n        global n\n        n += 1\n        return 'anything'\n\n    n = 0\n    inc_once()  #  --> 'anything'\n    inc_once()  #  --> 'anything'\n    inc_once()  #  --> 'anything'\n    print(n)    #  --> 1\n```\n##### pipe\n```\npipe(*fns)\n\nCompose functions from left to right.\n\n:param fns: Functions to compose.\n:rtype: Callable[[Any], Any]\n\nExamples:\n    from pymince.functional import pipe\n\n    addtwo = lambda n: n + 2\n    double = lambda n: n * 2\n    square = lambda n: n * n\n\n    fn = pipe(addtwo, double, square)\n    fn(1) # --> 36\n```\n##### retry_if_errors\n```\nretry_if_errors(*exceptions, delay=0, tries=1)\n\nDecorator that retries to call the wrapped function\nif any of given exceptions are thrown.\n\n:param exceptions: Lists of exceptions that trigger a retry attempt.\n:param int delay: seconds delay between attempts. default: 0.\n:param int tries: number of attempts. default: 1\n\nExamples:\n@retry_if_errors(ValueError, TypeError, delay=0, tries=1)\ndef foo():\n    return 1\n```\n##### retry_if_none\n```\nretry_if_none(delay=0, tries=1)\n\nDecorator that retries to call the wrapped function\nif it returns None.\n\n:param int delay: seconds delay between attempts. default: 0.\n:param int tries: number of attempts. default: 1\n\nExamples:\n    @retry_if_none(delay=0, tries=1)\n    def foo():\n        return 1\n```\n##### set_attributes\n```\nset_attributes(**kwargs)\n\nDecorator to set attributes on functions and classes.\n\nExamples:\n    from pymince.functional import set_attributes\n\n    @set_attributes(short_description=\"dummy function\")\n    def foo():\n        pass\n\n    print(foo.short_description)  # \"dummy function\"\n\nBased on: https://github.com/wolph/python-utils/ (set_attributes)\n```\n##### suppress\n```\nsuppress(*exceptions, default=None)\n\nDecorator to suppress the specified exceptions and return the\ndefault value instead.\n\nExamples:\n    from pymince.functional import suppress\n\n    @suppress(FileNotFoundError, default=False)\n    def remove(somefile):\n         os.remove(somefile)\n\n    remove(\"no_found.txt\")  # False\n```\n#### iterator.py\nFunctions that use iterators for efficient loops.\n##### all_distinct\n```\nall_distinct(iterable, key=None)\n\nCheck if all the elements of a key-based iterable are distinct.\n\n:param iterable:\n:param key: None or \"Callable\" to compare if iterable items.\n:rtype: bool\n\nExamples:\n    from pymince.iterator import all_distinct\n\n    all_distinct([1, 1]) # --> False\n    all_distinct([1, 2]) # --> True\n```\n##### all_equal\n```\nall_equal(iterable, key=None)\n\nCheck if all the elements of a key-based iterable are equals.\n\n:param iterable:\n:param key: None or \"Callable\" to compare if iterable items.\n:rtype: bool\n\nExamples:\n    from pymince.iterator import all_equal\n\n    all_equal([1, 1]) # --> True\n    all_equal([1, 2]) # --> False\n```\n##### all_equals\n```\nall_equals(*iterables, key=None)\n\nCheck if the iterables are equal.\nIf the \"iterables\" are empty, it returns True.\n\n:param iterables:\n:param key: None or \"Callable\" to compare if iterable items.\n:rtype: bool\n\nExamples:\n    from pymince.iterator import all_equals\n\n    all_equals() # --> True\n    all_equals(range(1, 4), (1, 2, 3), {1, 2, 3}) # --> True\n    all_equals((1, 2), (1, 2, 3)) # --> False\n```\n##### all_identical\n```\nall_identical(left, right)\n\nCheck that the items of `left` are the same objects\nas those in `right`.\n\n:param Iterable[Any] left:\n:param Iterable[Any] right:\n:rtype: bool\n\nExamples:\n    from pymince.iterator import all_identical\n\n    a, b = object(), object()\n    all_identical([a, b, a], [a, b, a]) # --> True\n    all_identical([a, b, [a]], [a, b, [a]])  # --> False *new list object, while \"equal\" is not \"identical\"*\n```\n##### centroid\n```\ncentroid(coordinates)\n\nCalculate the centroid of a set of n-dimensional coordinates.\nIn Cartesian coordinates, the centroid is\njust the mean of the components.\n\n:param Iterable[Iterable[int]] coordinates: Iterable of n-dimensional coordinates.\n:rtype: Generator[int]\n\n Examples:\n    from pymince.iterator import centroid\n\n    coord = (((2, 2), (4, 4)))\n    tuple(centroid(coord))  # --> (3, 3)\n```\n##### consume\n```\nconsume(iterator, n=None)\n\nAdvance *iterator* by *n* steps. If *n* is ``None``, consume it\nentirely.\n\nExamples:\n    from pymince.iterator import consume\n    it = iter([1, 2])\n    consume(it)\n    next(it) # --> StopIteration\n```\n##### grouper\n```\ngrouper(iterable, size)\n\nMake a generator that returns each element being iterable\nwith \"size\" as the maximum number of elements.\n\n:param iterable:\n:param int size: maximum size of element groups.\n:rtype: Generator\n\nExamples:\n    from pymince.iterator import grouper\n\n    groups = grouper([1, 2, 3, 4, 5], 2)\n    list(list(g) for g in groups) # --> [[1, 2], [3, 4], [5]]\n```\n##### has_only_one\n```\nhas_only_one(iterable)\n\nCheck if given iterable has only one element.\n\n:param iterable:\n:rtype: bool\n\nExamples:\n    from pymince.iterator import has_only_one\n\n    has_only_one([1]) # --> True\n    has_only_one([1, 2]) # --> False\n    has_only_one([]) # --> False\n```\n##### ibool\n```\nibool(iterable)\n\nIterator class supporting ´__bool__´.\n\nExamples:\n    from pymince.iterator import ibool\n\n    it = ibool((1, 2, 3))\n    bool(it) # --> True\n    list(it) # --> [1, 2, 3]\n```\n##### in_all\n```\nin_all(obj, iterables)\n\nCheck if the object is contained in all the given iterables.\nIf the \"iterables\" are empty, return True.\n\n:param Any obj:\n:param iterables: iterable of iterables\n:rtype: bool\n\nExamples:\n    from pymince.iterator import in_all\n\n    in_all(\"a\", ((\"a\", \"b\"), \"bcd\")) # --> False\n    in_all(\"a\", ((\"a\", \"b\"), \"abc\")) # --> True\n    in_all(\"a\", ()) # --> True\n```\n##### in_any\n```\nin_any(obj, iterables)\n\nCheck if the object is contained in any of the given iterables.\n\n:param Any obj:\n:param iterables: iterable of iterables\n:rtype: bool\n\nExamples:\n    from pymince.iterator import in_any\n\n    in_any(\"a\", ((\"a\", \"b\"), \"bcd\")) # --> True\n    in_any(\"a\", ((\"b\", \"b\"), \"def\")) # --> False\n    in_any(\"a\", ()) # --> False\n```\n##### ipush\n```\nipush(iterable)\n\nIterator class supporting ´append´ and ´prepend´.\n\nExamples:\n    from pymince.iterator import ipush\n\n    it = ipush(iter([2, 3])\n\n    it.append(4)\n    it.append(5)\n\n    it.prepend(1)\n    it.prepend(0)\n\n    list(it)  # --> [0, 1, 2, 3, 4, 5]\n```\n##### mul\n```\nmul(iterable, start=1)\n\nReturn the multiplication of a 'start' value (default: 1)\nplus an iterable of numbers.\n\nWhen the iterable is empty, return the start value.\n```\n##### pad_end\n```\npad_end(iterable, length, fill_value=None)\n\nThe function adds \"fill_value\" at the finishing of the iterable,\nuntil it reaches the specified length.\nIf the value of the \"length\" param is less than the length of\nthe given \"iterable\", no filling is done.\n\n:param iterable:\n:param int length: A number specifying the desired length of the resulting iterable.\n:param Any fill_value: Any value to fill the given iterable.\n:rtype: Generator\n\n Examples:\n    from pymince.iterator import pad_end\n\n    pad_end((\"a\", \"b\"), 3, fill_value=\"1\") # --> \"a\" \"b\" \"1\"\n    pad_end((\"a\", \"b\"), 3) # --> \"a\" \"b\" None\n    pad_end((\"a\", \"b\", \"c\"), 3) # --> \"a\" \"b\" \"c\"\n```\n##### pad_start\n```\npad_start(iterable, length, fill_value=None)\n\nThe function adds \"fill_value\" at the beginning of the iterable,\nuntil it reaches the specified length.\nIf the value of the \"length\" param is less than the length of\nthe given \"iterable\", no filling is done.\n\n:param iterable:\n:param int length: A number specifying the desired length of the resulting iterable.\n:param Any fill_value: Any value to fill the given iterable.\n:rtype: Generator\n\n Examples:\n    from pymince.iterator import pad_start\n\n    pad_start((\"a\", \"b\"), 3, fill_value=\"1\") # --> \"1\" \"a\" \"b\"\n    pad_start((\"a\", \"b\"), 3) # --> None \"a\" \"b\"\n    pad_start((\"a\", \"b\", \"c\"), 3) # --> \"a\" \"b\" \"c\"\n```\n##### replacer\n```\nreplacer(iterable, matcher, new_value, count=-1)\n\nMake a generator that yields all occurrences of the old \"iterable\"\nreplaced by \"new_value\".\n\n:param iterable:\n:param matcher: Callable to find occurrences. It is an occurrence if the matcher returns True.\n:param new_value: Any value to replace found occurrences.\n:param int count:\n    Maximum number of occurrences to replace.\n    -1 (the default value) means replace all occurrences.\n:rtype: Generator\n\nExamples:\n    from pymince.iterator import replacer\n\n    is_one = lambda n: n == 1\n    replacer([1,2,3,1,2,3], is_one, None) # --> None 2 3 None 2 3\n    replacer([1,2,3,1,2,3], is_one, None, count=1) # --> None 2 3 1 2 3\n```\n##### splitter\n```\nsplitter(iterable, sep, key=None, maxsplit=-1, container=None)\n\nSplits an iterable based on a separator.\nA separator will never appear in the output.\n\n:param iterable:\n:param sep: The delimiter to split the iterable.\n:param key\n    A function to compare the equality of each element with the given delimiter.\n    If the key function is not specified or is None, the element itself is used for compare.\n:param maxsplit:\n    Maximum number of splits to do.\n    -1 (the default value) means no limit.\n:param container: Callable to save the splits. By default tuple is used.\n\n:return: Generator with consecutive splits of \"iterable\" without the delimiter item.\n\nExamples:\n    from pymince.iterator import splitter\n\n    data = (\"a\", \"b\", \"c\", \"d\", \"b\", \"e\")\n    split_n = splitter(data, \"b\")  # --> (\"a\",) (\"c\", \"d\") (\"e\",)\n    split_1 = splitter(data, \"b\", maxsplit=1)  # --> (\"a\",) (\"c\", \"d\", \"b\", \"e\")\n```\n##### sub\n```\nsub(iterable)\n\nReturn the subtraction of a non-empty iterable of numbers and sets.\n```\n##### truediv\n```\ntruediv(iterable)\n\nReturn the division of an non-empty iterable of numbers.\n```\n##### uniquer\n```\nuniquer(iterable, key=None)\n\nMake a generator that returns each element from iterable only once\nrespecting the input order.\n\nExamples:\n    from pymince.iterator import uniquer\n\n    uniquer([1, 2, 3, 2]) # --> 1 2 3\n```\n##### uniques\n```\nuniques(iterable, key=None)\n\nCheck if all the elements of a key-based iterable are unique.\n\n:param iterable:\n:param key: None or \"Callable\" to compare if iterable items.\n:rtype: bool\n\nExamples:\n    from pymince.iterator import uniques\n\n    uniques([1,2]) # --> True\n    uniques([1,1]) # --> False\n```\n#### json.py\nUseful functions for working with JSONs.\n##### JSONEncoder\n```\nJSONEncoder(*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)\n\nJSON encoder that handles additional types compared\nto `json.JSONEncoder`\n\n- `datetime` and `date` are serialized to strings according to the isoformat.\n- `decimal.Decimal` is serialized to a string.\n- `uuid.UUID` is serialized to a string.\n- `dataclasses.dataclass` is passed to `dataclasses.asdict`.\n- `frozenset` and `set` are serialized by ordering their values.\n```\n##### dump_from_csv\n```\ndump_from_csv(csv_path, json_path, /, *, fieldnames=None, start=0, stop=None, strip=True, encoding='utf-8', **kwargs)\n\nDump CSV file to a JSON file using \"utf-8\" encoding.\n\n:param str csv_path:\n:param str json_path:\n:param fieldnames: list of keys for the JSON\n:param int start:\n    If start is specified, will skip all preceding elements;\n    otherwise, start defaults to zero.\n:param int stop:\n:param bool strip:\n    Whether or not white space should be removed from the\n    beginning and end of field values.\n:param str encoding: utf-8 is used by default.\n```\n##### dump_into\n```\ndump_into(filename, payload, encoding='utf-8', **kwargs)\n\nDump JSON to a file using \"utf-8\" encoding.\n\nExamples:\n    from pymince.json import dump_into\n\n    dump_into(\"foo.json\", {\"key\": \"value\"})\n```\n##### dump_into_zip\n```\ndump_into_zip(zip_path, arcname, payload, **kwargs)\n\nDump JSON into the zip archive under the name arcname.\n\nExamples:\n    from pymince.json import dump_into_zip\n\n    dump_into_zip(\"archive.zip\", \"foo.json\", {\"key\": \"value\"})\n```\n##### load_from\n```\nload_from(filename, encoding='utf-8')\n\nLoad JSON from a file using \"utf-8\" encoding.\n\nExamples:\n    from pymince.json import load_from\n\n    dictionary = load_from(\"foo.json\")\n```\n##### load_from_zip\n```\nload_from_zip(zip_path, arcname)\n\nLoad JSON from a file named \"arcname\" inside a zip archive.\n\nExamples:\n    from pymince.json import load_from_zip\n\n    dictionary = load_from_zip(\"archive.zip\", \"foo.json\")\n```\n#### logging.py\n\n##### StructuredFormatter\n```\nStructuredFormatter(fmt=None, datefmt=None, style='%', validate=True)\n\nImplementation of JSON structured logging that works\nfor most handlers.\n\nExamples:\n    import logging\n    import sys\n    from pymince.logging import StructuredFormatter\n\n    # Config\n    logger = logging.getLogger()\n    logger.setLevel(logging.DEBUG)\n    formatter = StructuredFormatter('%(message)s')\n    handler = logging.StreamHandler(sys.stdout)\n    handler.setLevel(logging.DEBUG)\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n\n    # Usage\n    logger.debug('', {\"string\": \"value1\", \"number\": 1})\n    logger.debug('', {\"string\": \"value2\", \"number\": 2})\n\n    >>Output<<\n    {\"timestamp\":\"2022-06-17 18:37:48,789\",\"level\":\"DEBUG\",\"payload\":{\"string\":\"value1\",\"number\":1}}\n    {\"timestamp\":\"2022-06-17 18:37:48,789\",\"level\":\"DEBUG\",\"payload\":{\"string\":\"value2\",\"number\":2}}\n```\n##### timed_block\n```\ntimed_block(name, logger=None)\n\nLogger the duration of the handled context.\n\nExamples:\n    import logging\n    from pymince.logging import timed_block\n\n    logging.basicConfig(level=logging.DEBUG)\n    with timed_block(\"sleeping\"):\n        time.sleep(1)\n\n    >>Output<<\n    INFO:root:Generating [sleeping]\n    DEBUG:root:Finished [sleeping in 1.002 s]\n```\n#### std.py\n\n##### bind_json_std\n```\nbind_json_std(encoding='utf-8')\n\nDecorator to call \"function\" passing the json read from\n\"stdin\" in the keyword parameter \"data\" and dump the json that the callback returns\nto \"stdout\".\n\nExamples:\nfrom pymince.std import bind_json_std\n\n@bind_json_std()\ndef foo(data=None):\n    print(\"Processing data from sys.stdin\", data)\n\n    result = data and {**data, \"new\": \"value\"}\n\n    print(\"Result to write in sys.stdout\", result)\n    return result\n```\n#### text.py\nUseful functions for working with strings.\n##### are_anagram\n```\nare_anagram(text1, text2)\n\nCheck if two strings are anagram.\n\nExamples:\n    from pymince.text import are_anagram\n\n    are_anagram(\"listen\", \"silent\")      # --> True\n    are_anagram(\"they see\", \"the eyes\")  # --> True\n```\n##### fullstr\n```\nfullstr()\n\nCustom string inheriting from \"str\" which adds\nthe following methods:\n\n- is_url(self, schemes=None, hostnames=None)\n- is_int(self)\n- is_positive_int(self)\n- is_negative_int(self)\n- is_payment_card(self)\n- is_binary(self)\n- is_percentage(self)\n- is_palindrome(self)\n- is_email_address(self)\n- is_roman(self)\n- are_anagram(self, other)\n```\n##### get_random_secret\n```\nget_random_secret(length, alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\nGenerate a cryptographically secure random string.\nUseful for creating temporary passwords.\n```\n##### get_random_string\n```\nget_random_string(length, alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\nGenerate random string.\n```\n##### is_binary\n```\nis_binary(text)\n\nCheck if the string is binary or not.\n```\n##### is_email_address\n```\nis_email_address(text)\n\nCheck if the string is an email address.\n\nThis solution does a very simple check. It only validates that the string contains an at sign (@)\nthat is preceded and followed by one or more non whitespace characters.\n```\n##### is_int\n```\nis_int(text)\n\nCheck if the string is the representation of\na integer number.\n\nTrue:\n \"10\",   \"10.\",   \"10.0\",\n\"+10\",  \"+10.\",  \"+10.0\",\n\"-10\",  \"-10.\",  \"-10.0\"\n```\n##### is_negative_int\n```\nis_negative_int(text)\n\nCheck if the string is the representation of\nnegative integer number.\n\nTrue:\n\"-10\",  \"-10.\",  \"-10.0\"\n```\n##### is_palindrome\n```\nis_palindrome(text)\n\nCheck if the string is palindrome or not.\nA string is said to be palindrome if the reverse of the string is the same as string\n```\n##### is_payment_card\n```\nis_payment_card(text)\n\nCheck if the string is a valid payment\ncard number.\n\nhttps://en.wikipedia.org/wiki/Payment_card_number#Issuer_identification_number_(IIN)\n```\n##### is_percentage\n```\nis_percentage(text)\n\nCheck if the string is a valid percentage\n\nTrue: \"100%\", \"100 %\", \"100&nbsp;%\", 100.0 %\",\n```\n##### is_positive_int\n```\nis_positive_int(text)\n\nCheck if the string is the representation of\npositive integer number.\n\nTrue:\n \"10\",   \"10.\",   \"10.0\",\n\"+10\",  \"+10.\",  \"+10.0\",\n```\n##### is_roman\n```\nis_roman(text)\n\nCheck if the string is a valid roman numeral.\n```\n##### is_url\n```\nis_url(text, schemes=None, hostnames=None)\n\nCheck if the string is a URL according to the\ngiven schemes and host-names.\n\n:param str text:\n:param Optional[Container[str]] schemes: (\"http\", \"https\")\n:param Optional[Container[str]] hostnames: (\"www.python.org\", \"github.com\", \"localhost\")\n:rtype: bool\n\nExamples:\n    from pymince.text import is_url\n\n    # True\n    is_url(\"https://github.com/\")\n    is_url(\"https://github.com/\", hostnames=(\"github.com\",))\n    is_url(\"https://github.com/\", hostnames=(\"github.com\",), schemes=(\"https\",))\n\n    # False\n    is_url(\"https://github.com/\", schemes=(\"http\",))\n    is_url(\"https://github.com/\", hostnames=(\"www.python.org\", \"localhost\"))\n```\n##### multireplace\n```\nmultireplace(text, replacements)\n\nGiven a string and a replacement map, it returns the replaced string.\n\n:param str text: string to execute replacements on.\n:param Union[dict[str, str], tuple[tuple[str, str], ...] replacements:\n    2-dict or 2-tuples with value to find and value to replace\n:rtype: str\n\n Examples:\n    from pymince.text import multireplace\n\n    mapping = {\",\": \"\", \"cry\": \"smile\"}\n    multireplace(\"No, woman, no cry\", mapping) # --> \"No woman no smile\"\n```\n##### multireplacer\n```\nmultireplacer(replacements)\n\nGiven a replacement map, returns a function that can be reused to replace any string.\n\n:param Union[dict[str, str], tuple[tuple[str, str], ...] replacements:\n    2-dict or 2-tuples with value to find and value to replace\n:rtype: Callable[[str], str]\n\n Examples:\n    from pymince.text import multireplacer\n\n    mapping = ((\"abc\", \"123\"), (\"def\", \"456\"))\n    replace = multireplacer(mapping)\n\n    replace(\"...def...\")  # --> \"...456...\"\n    replace(\"...abc...\")  # --> \"...123...\"\n    replace(\"...abc...def...\")  # --> \"...123...456...\"\n```\n##### remove_decimal_zeros\n```\nremove_decimal_zeros(value, decimal_sep='.', min_decimals=None)\n\nRemoves non-significant decimal zeros from a formatted text number.\n\nExamples:\n    from pymince.text import remove_decimal_zeros\n\n    remove_decimal_zeros(\"2.000100\", \".\") # --> \"2.0001\"\n    remove_decimal_zeros(\"2.000000\", \".\") # --> \"2\"\n    remove_decimal_zeros(\"2.000000\", \".\", min_decimals=2) # --> \"2.00\"\n```\n##### remove_number_commas\n```\nremove_number_commas(s)\n\nRemoves commas from a formatted text number having commas\nas group separator.\n\n:param str s:\n:rtype str\n\nExamples:\n    from pymince.text import remove_number_commas\n    remove_number_commas('1,234,567.8') # --> '1234567.8'\n```\n##### replace\n```\nreplace(value, old_values, new_value, count=-1)\n\nReplace matching values ​​in the given string with new_value.\n\n:param str value:\n:param old_values: iterable of values ​​to replace.\n:param str new_value: replacement value.\n:param int count:\n    Maximum number of occurrences to replace.\n    -1 (the default value) means replace all occurrences.\n:rtype: str\n\nExamples:\n    from pymince.text import replace\n\n    replace(\"No, woman, no cry\", [\",\"], \";\") # --> \"No; woman; no cry\"\n    replace(\"No, woman, no cry\", [\",\"], \";\", count=1) # --> \"No; woman, no cry\"\n```\n#### warnings.py\n\n##### deprecated\n```\ndeprecated(fn)\n\nThis is a decorator which can be used to mark functions\nas deprecated. It will result in a warning being emitted\nwhen the function is used.\nhttp://code.activestate.com/recipes/391367-deprecated/?in=lang-python\n\nExamples:\n    from pymince.warnings import deprecated\n\n    @deprecated\n    def check_function():\n        pass\n\n    class SomeClass:\n        @deprecated\n        def check_method(self):\n            pass\n\n    @deprecated\n    class CheckClass:\n        pass\n\n    >> check_function() # DeprecationWarning  --> 'Deprecated \"check_function\".'\n    >> SomeClass().check_method() #  DeprecationWarning --> 'Deprecated \"check_method\".'\n    >> CheckClass() # DeprecationWarning  --> 'Deprecated \"CheckClass\".'\n```\n#### xml.py\n\n##### iterparse\n```\niterparse(filename)\n\nIncrementally parse XML document into ElementTree.\n\nThis function is based on: https://github.com/python/cpython/issues/93618\n\n'Fix misleading hint for original ElementTree.iterparse.'\n'''\nThe code below deletes a root child once it is completed, then processes and removes\nit from the memory (if nothing more references to it ofc).\nThis allows to process 7GB XML with with a memory usage up to 10MB (in case of great number of root children).\n'''\n\n:param str filename: XML filename\n:rtype: Generator\n\n Examples:\n    from pymince.xml import iterparse\n\n    for event, obj in iterparse(\"countries.xml\")\n        if event == 'start'\n            print(obj, obj.tag, obj.attrib, obj.text)\n\n    >>Output<<\n    <Element 'country' at 0x0000018ADF9D0CC0> country {'code': 'as', 'iso': '16'} American Samoa\n    <Element 'country' at 0x0000018ADF9D0C70> country {'code': 'ad', 'iso': '20'} Andorra\n```\n### Upgrade README.md\n\nUpgrade README.md `Usage` section according to current *pymince* code.\n```\n(env) python upgrade_readme_usage.py\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rmoralespp/pymince",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymince",
    "package_url": "https://pypi.org/project/pymince/",
    "platform": null,
    "project_url": "https://pypi.org/project/pymince/",
    "project_urls": {
      "Homepage": "https://github.com/rmoralespp/pymince"
    },
    "release_url": "https://pypi.org/project/pymince/2.5.0/",
    "requires_dist": null,
    "requires_python": ">=3.8",
    "summary": "Python shredded utilities",
    "version": "2.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16903845,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca2e0bdb492578694b634fe327411b942b0a51da5778518f59eb2ad633303dff",
          "md5": "9aa30bd195741b7dc17b741fc862c4f6",
          "sha256": "af6f98afe681d414a366771fde7bd71e1fe6a71550ecd48412f1f3000fbb0960"
        },
        "downloads": -1,
        "filename": "pymince-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9aa30bd195741b7dc17b741fc862c4f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6156,
        "upload_time": "2022-06-03T11:27:12",
        "upload_time_iso_8601": "2022-06-03T11:27:12.557266Z",
        "url": "https://files.pythonhosted.org/packages/ca/2e/0bdb492578694b634fe327411b942b0a51da5778518f59eb2ad633303dff/pymince-1.0.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": "Deprecated"
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "244d1fbfcc506fafcd7b3a264c6dbc243b6e85385dfc6e07721ecf4e29b26111",
          "md5": "25bbda773cf29553b1463a5e76cf88dd",
          "sha256": "b01b092559111ba397e96d91c409d404bfeb364a2200586b1a317254247b66cc"
        },
        "downloads": -1,
        "filename": "pymince-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "25bbda773cf29553b1463a5e76cf88dd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 4710,
        "upload_time": "2022-06-03T11:27:13",
        "upload_time_iso_8601": "2022-06-03T11:27:13.631716Z",
        "url": "https://files.pythonhosted.org/packages/24/4d/1fbfcc506fafcd7b3a264c6dbc243b6e85385dfc6e07721ecf4e29b26111/pymince-1.0.1.tar.gz",
        "yanked": true,
        "yanked_reason": "Deprecated"
      }
    ],
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4129ed6c1e5dd5eadb93871aa3b838a7b6b64b57ea3b6c47bc3948edabebd791",
          "md5": "45300f645915d206819a4e8774a2f004",
          "sha256": "0c8f33f888e4cb2c22afe666e89d598a5fc985fc4810a20f558eaccbd363b0e2"
        },
        "downloads": -1,
        "filename": "pymince-1.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "45300f645915d206819a4e8774a2f004",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 15929,
        "upload_time": "2022-06-23T07:57:13",
        "upload_time_iso_8601": "2022-06-23T07:57:13.657299Z",
        "url": "https://files.pythonhosted.org/packages/41/29/ed6c1e5dd5eadb93871aa3b838a7b6b64b57ea3b6c47bc3948edabebd791/pymince-1.0.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f87448e67c1cf472ef2f529218334ebb4d52379a769833bf34a5fe66c5165059",
          "md5": "a7db4e683764b832996d905422c07ed5",
          "sha256": "ef9762729a81db6b66379174923eb76028cf51eabcfb22c1875b7984263b4c8b"
        },
        "downloads": -1,
        "filename": "pymince-1.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "a7db4e683764b832996d905422c07ed5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15842,
        "upload_time": "2022-06-23T07:57:15",
        "upload_time_iso_8601": "2022-06-23T07:57:15.094430Z",
        "url": "https://files.pythonhosted.org/packages/f8/74/48e67c1cf472ef2f529218334ebb4d52379a769833bf34a5fe66c5165059/pymince-1.0.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "33a1d2a040b8da30f9b45b45189710a6946f7c6b715aecf2352d2c7d63e3f19d",
          "md5": "367e67b699936f642fe770ce21333a26",
          "sha256": "b1c1f030bbc0ba57a7c7760a4124dc1efcea88e6fdf34bed26350fc84ff3ab5f"
        },
        "downloads": -1,
        "filename": "pymince-1.0.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "367e67b699936f642fe770ce21333a26",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 18267,
        "upload_time": "2022-06-27T14:07:50",
        "upload_time_iso_8601": "2022-06-27T14:07:50.168897Z",
        "url": "https://files.pythonhosted.org/packages/33/a1/d2a040b8da30f9b45b45189710a6946f7c6b715aecf2352d2c7d63e3f19d/pymince-1.0.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e891c834fa1a33d4d17d757673865addb22e8afa2a807647d74a8f031079c1b7",
          "md5": "aee211f55d6a93b2fcb446158683e4cf",
          "sha256": "450c57bed611b4a902d063419bd9e37ae1c2858621f1944c7b2d91c6cbbbf6ef"
        },
        "downloads": -1,
        "filename": "pymince-1.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "aee211f55d6a93b2fcb446158683e4cf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 18882,
        "upload_time": "2022-06-27T14:08:00",
        "upload_time_iso_8601": "2022-06-27T14:08:00.247477Z",
        "url": "https://files.pythonhosted.org/packages/e8/91/c834fa1a33d4d17d757673865addb22e8afa2a807647d74a8f031079c1b7/pymince-1.0.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "76a4bf33f75d4989954ce6c5cd39fd17fa14ff6df7f4e50d879e9a949bbe0d95",
          "md5": "30f234f9d33eeba6565fef30c2490d91",
          "sha256": "7252f08fe392a5bd2ec192034d606c7fe384aafceaba78d0277bb00166f51b89"
        },
        "downloads": -1,
        "filename": "pymince-1.0.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30f234f9d33eeba6565fef30c2490d91",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 20386,
        "upload_time": "2022-09-08T09:19:22",
        "upload_time_iso_8601": "2022-09-08T09:19:22.277953Z",
        "url": "https://files.pythonhosted.org/packages/76/a4/bf33f75d4989954ce6c5cd39fd17fa14ff6df7f4e50d879e9a949bbe0d95/pymince-1.0.12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1b283c11cf769dace19a8ff8949e6b8aea6792725a9aa4275d19fec0c4b7090",
          "md5": "3ab3ccc4b985d94a011919e5a628202b",
          "sha256": "8c96310c50c4b930a84eddc3eeb9af90bd5d6121c51732855c3ef0b4d5d79f0d"
        },
        "downloads": -1,
        "filename": "pymince-1.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "3ab3ccc4b985d94a011919e5a628202b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 22246,
        "upload_time": "2022-09-08T09:19:23",
        "upload_time_iso_8601": "2022-09-08T09:19:23.453876Z",
        "url": "https://files.pythonhosted.org/packages/f1/b2/83c11cf769dace19a8ff8949e6b8aea6792725a9aa4275d19fec0c4b7090/pymince-1.0.12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.13": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aadd8c0f813b9d6f9ed7c7ddc3c3291e6ea5fa4783dba7465aa080bdae7a1a28",
          "md5": "6009cc4e84a0e68fe419af444a5c12a5",
          "sha256": "183251764d3afc292a8ef39eefa37393530eb3f129addf93bd8f249715f80fdd"
        },
        "downloads": -1,
        "filename": "pymince-1.0.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6009cc4e84a0e68fe419af444a5c12a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 21312,
        "upload_time": "2022-10-14T09:59:52",
        "upload_time_iso_8601": "2022-10-14T09:59:52.232575Z",
        "url": "https://files.pythonhosted.org/packages/aa/dd/8c0f813b9d6f9ed7c7ddc3c3291e6ea5fa4783dba7465aa080bdae7a1a28/pymince-1.0.13-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c729ee9022aa6d3d16e05c5bcd5c9d8bd851f3cbfd178d24a1344559c9c9c2b1",
          "md5": "b88210530efdf58bf33dcfcd2ea7d506",
          "sha256": "bb7073ec0cf17278f3bf41fbdc4414c8b92a5017f5badf28de58e0dda84aee44"
        },
        "downloads": -1,
        "filename": "pymince-1.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "b88210530efdf58bf33dcfcd2ea7d506",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 23331,
        "upload_time": "2022-10-14T09:59:53",
        "upload_time_iso_8601": "2022-10-14T09:59:53.517509Z",
        "url": "https://files.pythonhosted.org/packages/c7/29/ee9022aa6d3d16e05c5bcd5c9d8bd851f3cbfd178d24a1344559c9c9c2b1/pymince-1.0.13.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.14": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64752298d2a322dfc44c8c9f42d5a0e664851d670997d1b204e558af5cc8959e",
          "md5": "113c36dceba978e5413124802a380ae7",
          "sha256": "25ea17b85a5414d110988ec532da1e509de6d4682c648e915b682cc59237be6b"
        },
        "downloads": -1,
        "filename": "pymince-1.0.14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "113c36dceba978e5413124802a380ae7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 24482,
        "upload_time": "2022-12-05T17:43:11",
        "upload_time_iso_8601": "2022-12-05T17:43:11.124554Z",
        "url": "https://files.pythonhosted.org/packages/64/75/2298d2a322dfc44c8c9f42d5a0e664851d670997d1b204e558af5cc8959e/pymince-1.0.14-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cd1973c2088afc50ed26cb53d1edf02e75f407a287d512b3eb1d51c166f39548",
          "md5": "00aea003d3a1a50792f3ae1b96a2d21b",
          "sha256": "ea4f1dc9ee6cec2b392e5737344b11feea898a4ffd33b37f15f84b8c02aa3dd4"
        },
        "downloads": -1,
        "filename": "pymince-1.0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "00aea003d3a1a50792f3ae1b96a2d21b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 26885,
        "upload_time": "2022-12-05T17:43:12",
        "upload_time_iso_8601": "2022-12-05T17:43:12.665462Z",
        "url": "https://files.pythonhosted.org/packages/cd/19/73c2088afc50ed26cb53d1edf02e75f407a287d512b3eb1d51c166f39548/pymince-1.0.14.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3e08043032698678e639cd118b0a7c81792473dea3e10d1d3f73d34e001fcf74",
          "md5": "e6213d17c760222873204d0544b78fd7",
          "sha256": "38e88b7ad790776567b51911a320e538ccb4471c71f059f9ecaf380f923c43b3"
        },
        "downloads": -1,
        "filename": "pymince-1.0.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6213d17c760222873204d0544b78fd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 25733,
        "upload_time": "2022-12-12T17:45:44",
        "upload_time_iso_8601": "2022-12-12T17:45:44.628285Z",
        "url": "https://files.pythonhosted.org/packages/3e/08/043032698678e639cd118b0a7c81792473dea3e10d1d3f73d34e001fcf74/pymince-1.0.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a55b314939423b248b3fbecb2ea83c8e8f8337a2ca19ae0e781796c04f6ba159",
          "md5": "1c4959ef6b0d3fa68e3957b3c6ba9948",
          "sha256": "8dbad6716aa834f85c82b868a2d1e1746260bb4ee107417ae9561d5f8c0d84e6"
        },
        "downloads": -1,
        "filename": "pymince-1.0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "1c4959ef6b0d3fa68e3957b3c6ba9948",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 29217,
        "upload_time": "2022-12-12T17:45:45",
        "upload_time_iso_8601": "2022-12-12T17:45:45.973287Z",
        "url": "https://files.pythonhosted.org/packages/a5/5b/314939423b248b3fbecb2ea83c8e8f8337a2ca19ae0e781796c04f6ba159/pymince-1.0.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ed557652c3243211dc0047833fda0c21a3d7dd778ac018019e9b7ddd6e6fa9e",
          "md5": "f538a79909cb36a76b785c75b8cd7426",
          "sha256": "9afdf5d15ff19de02504f350cddf29d2073e0fc93d375a0ab3b1d4e8df7dc746"
        },
        "downloads": -1,
        "filename": "pymince-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f538a79909cb36a76b785c75b8cd7426",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 6153,
        "upload_time": "2022-06-03T15:03:42",
        "upload_time_iso_8601": "2022-06-03T15:03:42.974507Z",
        "url": "https://files.pythonhosted.org/packages/3e/d5/57652c3243211dc0047833fda0c21a3d7dd778ac018019e9b7ddd6e6fa9e/pymince-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "86c52e17ae3643e2db7ae4df2e292c956220c561d3842f062856926a56664878",
          "md5": "e0c59d8e071e846f79e78153549cc087",
          "sha256": "0fc37028e3f0485a40a54f1c8a01bf2c7d24a6ed5cc6f00ba0cf7fe3e934b86a"
        },
        "downloads": -1,
        "filename": "pymince-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e0c59d8e071e846f79e78153549cc087",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 5223,
        "upload_time": "2022-06-03T15:03:44",
        "upload_time_iso_8601": "2022-06-03T15:03:44.259108Z",
        "url": "https://files.pythonhosted.org/packages/86/c5/2e17ae3643e2db7ae4df2e292c956220c561d3842f062856926a56664878/pymince-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2435aaeb5d056914f443dd6cf82aac56f866f0b36a1232ea4ae69ff3590ed3f",
          "md5": "6c20f06f34e98079e9bab3b13c0b64ae",
          "sha256": "9cc231ab37343d0ce8b1717763ce533977794d06ca53fc5c4feb9d46a80ae04c"
        },
        "downloads": -1,
        "filename": "pymince-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c20f06f34e98079e9bab3b13c0b64ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 6760,
        "upload_time": "2022-06-06T16:13:40",
        "upload_time_iso_8601": "2022-06-06T16:13:40.613218Z",
        "url": "https://files.pythonhosted.org/packages/f2/43/5aaeb5d056914f443dd6cf82aac56f866f0b36a1232ea4ae69ff3590ed3f/pymince-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb04de2037651a4c7e4c1bb2afa4c87c93a42020be625c99f6c3beb287372edb",
          "md5": "842255c0ca8308b7a1152f08e76ddee9",
          "sha256": "00e96dbe0803bf76bfa34cbf9111660a7746c4d7697cae9f40766130dfad2fd6"
        },
        "downloads": -1,
        "filename": "pymince-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "842255c0ca8308b7a1152f08e76ddee9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 5853,
        "upload_time": "2022-06-06T16:13:41",
        "upload_time_iso_8601": "2022-06-06T16:13:41.756264Z",
        "url": "https://files.pythonhosted.org/packages/cb/04/de2037651a4c7e4c1bb2afa4c87c93a42020be625c99f6c3beb287372edb/pymince-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee75f1a8c530999688918005f9cf1dc9e21b3beda0e3d8b29bc54691a937c820",
          "md5": "f2cf468315d71b38b1b41e9b0612994a",
          "sha256": "dbabb71013054c74ae4e9f4abe0df8a27db4e051ea297334407390ac11df233a"
        },
        "downloads": -1,
        "filename": "pymince-1.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2cf468315d71b38b1b41e9b0612994a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 9996,
        "upload_time": "2022-06-07T14:29:02",
        "upload_time_iso_8601": "2022-06-07T14:29:02.683409Z",
        "url": "https://files.pythonhosted.org/packages/ee/75/f1a8c530999688918005f9cf1dc9e21b3beda0e3d8b29bc54691a937c820/pymince-1.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e70734032189ea8a290e19bef7aba4f9b0c0d1e7d4d4b61bbe0758382727f08e",
          "md5": "cea1ed748480c3054cdd9c98d3195fe3",
          "sha256": "30768e394d95bc8f585c0ac7c43efa5fdd3b8b416e5e9f490c892c35cba01390"
        },
        "downloads": -1,
        "filename": "pymince-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "cea1ed748480c3054cdd9c98d3195fe3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 8410,
        "upload_time": "2022-06-07T14:29:04",
        "upload_time_iso_8601": "2022-06-07T14:29:04.353785Z",
        "url": "https://files.pythonhosted.org/packages/e7/07/34032189ea8a290e19bef7aba4f9b0c0d1e7d4d4b61bbe0758382727f08e/pymince-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17d6d54e0f5539606f5e3b86408ec8db94efa32f690e08100d6be6e1c718d876",
          "md5": "67211d1735a6e464b4c1cc9ff90787b6",
          "sha256": "ded5cc36e8156a9aa7ce47fd720a58fcb079b377213e80f764de398f6f6840dd"
        },
        "downloads": -1,
        "filename": "pymince-1.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67211d1735a6e464b4c1cc9ff90787b6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 10422,
        "upload_time": "2022-06-07T16:16:36",
        "upload_time_iso_8601": "2022-06-07T16:16:36.675127Z",
        "url": "https://files.pythonhosted.org/packages/17/d6/d54e0f5539606f5e3b86408ec8db94efa32f690e08100d6be6e1c718d876/pymince-1.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca52fc1809f68b107435f7ef37ca788390b8fedc5ad4b0dea32467a20510659a",
          "md5": "d0439fe53b3431b14720846f9cc44860",
          "sha256": "ba37ff82bbad89e7eb916ea9cb256804755dc7809223acb66a5a6b506e58e49d"
        },
        "downloads": -1,
        "filename": "pymince-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d0439fe53b3431b14720846f9cc44860",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 8926,
        "upload_time": "2022-06-07T16:16:37",
        "upload_time_iso_8601": "2022-06-07T16:16:37.859504Z",
        "url": "https://files.pythonhosted.org/packages/ca/52/fc1809f68b107435f7ef37ca788390b8fedc5ad4b0dea32467a20510659a/pymince-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0096c4a09f5ab23e959b09c59dbc8b4c97a17e446f5a2cc2d5c23493e5e52365",
          "md5": "cf0e4f520cab5c00d1501f6d9d6ec1b9",
          "sha256": "282e93448e27993f02afc7f2bc77bae8d6bc8d07c119b01f98c6524487978ee4"
        },
        "downloads": -1,
        "filename": "pymince-1.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf0e4f520cab5c00d1501f6d9d6ec1b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10419,
        "upload_time": "2022-06-07T16:20:19",
        "upload_time_iso_8601": "2022-06-07T16:20:19.930902Z",
        "url": "https://files.pythonhosted.org/packages/00/96/c4a09f5ab23e959b09c59dbc8b4c97a17e446f5a2cc2d5c23493e5e52365/pymince-1.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d759cf386d8a2b698db6c6aa9cd5926d537a2fa9899bda5ae1cbdacd86ab891e",
          "md5": "c9e7de7ee7bf24bc9c97a97b3da95896",
          "sha256": "c466d1113ce56febc7aae67d232ed581bd927a9cc1c2f08fd824ed7fbe899a75"
        },
        "downloads": -1,
        "filename": "pymince-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "c9e7de7ee7bf24bc9c97a97b3da95896",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 8881,
        "upload_time": "2022-06-07T16:20:22",
        "upload_time_iso_8601": "2022-06-07T16:20:22.686146Z",
        "url": "https://files.pythonhosted.org/packages/d7/59/cf386d8a2b698db6c6aa9cd5926d537a2fa9899bda5ae1cbdacd86ab891e/pymince-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b218479a9fbf2a026564c13c8a85f6e8bab084d62c44f036aa7f47a20ee10526",
          "md5": "43af26fca7ea59a1adfaca3f36426099",
          "sha256": "d3a0692096181e92e0ecb37a3c446d4f0f22f3b39f0a81e300a064e0162c446f"
        },
        "downloads": -1,
        "filename": "pymince-1.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43af26fca7ea59a1adfaca3f36426099",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10617,
        "upload_time": "2022-06-09T14:03:31",
        "upload_time_iso_8601": "2022-06-09T14:03:31.900608Z",
        "url": "https://files.pythonhosted.org/packages/b2/18/479a9fbf2a026564c13c8a85f6e8bab084d62c44f036aa7f47a20ee10526/pymince-1.0.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8ef149bd088465674a00db5e96483a2616f0bb9294d3826aa27d5612688edf4",
          "md5": "c2b743b24f555beb6ded66ec7575e814",
          "sha256": "dea8d111f8675ba20a246d717a8ed20825edfaa1bf494e91d2a22634ffbca82a"
        },
        "downloads": -1,
        "filename": "pymince-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "c2b743b24f555beb6ded66ec7575e814",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9198,
        "upload_time": "2022-06-09T14:03:34",
        "upload_time_iso_8601": "2022-06-09T14:03:34.706641Z",
        "url": "https://files.pythonhosted.org/packages/e8/ef/149bd088465674a00db5e96483a2616f0bb9294d3826aa27d5612688edf4/pymince-1.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2465ad862670beaccbb344db18c7ac6713220f55f6de59d98a9fb35ecf3ce8cd",
          "md5": "8cb3a08f998115c6a79533409a51cb7c",
          "sha256": "15d50beeb6dfc339df72594b7a7f86dcb4c7352f86cdf62be14833182b4ec8b7"
        },
        "downloads": -1,
        "filename": "pymince-1.0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8cb3a08f998115c6a79533409a51cb7c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 11705,
        "upload_time": "2022-06-17T10:06:18",
        "upload_time_iso_8601": "2022-06-17T10:06:18.133070Z",
        "url": "https://files.pythonhosted.org/packages/24/65/ad862670beaccbb344db18c7ac6713220f55f6de59d98a9fb35ecf3ce8cd/pymince-1.0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b332409fd71c06b03939ce3c704096558489bedfee3ba19dd106499aaf3d4ffd",
          "md5": "580468d6e67b5ec25697d5ca4ab7607d",
          "sha256": "21044687b18861a74226f73a5c15c07bdfa50a4049df58933e8b6edc5f6fc219"
        },
        "downloads": -1,
        "filename": "pymince-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "580468d6e67b5ec25697d5ca4ab7607d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 10367,
        "upload_time": "2022-06-17T10:06:19",
        "upload_time_iso_8601": "2022-06-17T10:06:19.574862Z",
        "url": "https://files.pythonhosted.org/packages/b3/32/409fd71c06b03939ce3c704096558489bedfee3ba19dd106499aaf3d4ffd/pymince-1.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58d3ca575610f36626a80bcb526786618a6f78fd882a8897da8546dc3139f96d",
          "md5": "6701a572224718bc18a991cd5c4d3d85",
          "sha256": "61c872ad9141de484e469594e407abce8be281ec36337b2f2519497b17e23bc5"
        },
        "downloads": -1,
        "filename": "pymince-1.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6701a572224718bc18a991cd5c4d3d85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13003,
        "upload_time": "2022-06-17T14:13:37",
        "upload_time_iso_8601": "2022-06-17T14:13:37.240888Z",
        "url": "https://files.pythonhosted.org/packages/58/d3/ca575610f36626a80bcb526786618a6f78fd882a8897da8546dc3139f96d/pymince-1.0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edbe0a50371ab2c97badea906f58ede2b0fac91d5981d29e8693698947aba4bb",
          "md5": "9d178fec45e6cbdc69aa9d7c25fbdc89",
          "sha256": "a433a77fde427a80f7fe976aeed2abe40bf8fba62bd620cfe6bf81755abf8a56"
        },
        "downloads": -1,
        "filename": "pymince-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "9d178fec45e6cbdc69aa9d7c25fbdc89",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12485,
        "upload_time": "2022-06-17T14:13:38",
        "upload_time_iso_8601": "2022-06-17T14:13:38.298538Z",
        "url": "https://files.pythonhosted.org/packages/ed/be/0a50371ab2c97badea906f58ede2b0fac91d5981d29e8693698947aba4bb/pymince-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03b0cdb848c55d834eb4c49e14cf0b7664668be3d6eee2efbc172af816aa3091",
          "md5": "3a2605fa5bb97b56ad88b567faa9aa34",
          "sha256": "fdbf14a202790b0ff38505c0b61774a9d4cf66a550195417e80c1bc30c1a8038"
        },
        "downloads": -1,
        "filename": "pymince-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3a2605fa5bb97b56ad88b567faa9aa34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 26666,
        "upload_time": "2022-12-22T14:26:03",
        "upload_time_iso_8601": "2022-12-22T14:26:03.614731Z",
        "url": "https://files.pythonhosted.org/packages/03/b0/cdb848c55d834eb4c49e14cf0b7664668be3d6eee2efbc172af816aa3091/pymince-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78ba53055a8038e32be8151072dff796e37e7097c3cc4dc94bfcc59c452715c0",
          "md5": "761becadc772a6ff1cb0195bb77ccb88",
          "sha256": "71587e2534ce6be67c85ba23a2ed5e589c4bc3f5c4f5cdb1363e1cd9f905f92f"
        },
        "downloads": -1,
        "filename": "pymince-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "761becadc772a6ff1cb0195bb77ccb88",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 31525,
        "upload_time": "2022-12-22T14:26:05",
        "upload_time_iso_8601": "2022-12-22T14:26:05.157031Z",
        "url": "https://files.pythonhosted.org/packages/78/ba/53055a8038e32be8151072dff796e37e7097c3cc4dc94bfcc59c452715c0/pymince-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cb63fd20ecb85dd0d130621271ae9be744674895394f8e5e2105f22fd961e07",
          "md5": "8bfbaf2b236864e965945d953ca9a586",
          "sha256": "b54f26bf79a2756b82a39bf017044cfdfa701f74e61fc570b62f8bba8b07c236"
        },
        "downloads": -1,
        "filename": "pymince-2.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8bfbaf2b236864e965945d953ca9a586",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 28115,
        "upload_time": "2022-12-28T11:41:37",
        "upload_time_iso_8601": "2022-12-28T11:41:37.327975Z",
        "url": "https://files.pythonhosted.org/packages/0c/b6/3fd20ecb85dd0d130621271ae9be744674895394f8e5e2105f22fd961e07/pymince-2.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "101446776fad42b5d24a0e87b38b60c74e83a03adc3284f1a94b2c333d937a8c",
          "md5": "4a06a3d8abea60d3f120a1e8485791b9",
          "sha256": "b919237cbeaeead2f2e8348e1d4d0423805f46562446d7189f103ed6089279e2"
        },
        "downloads": -1,
        "filename": "pymince-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4a06a3d8abea60d3f120a1e8485791b9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 33508,
        "upload_time": "2022-12-28T11:41:38",
        "upload_time_iso_8601": "2022-12-28T11:41:38.556859Z",
        "url": "https://files.pythonhosted.org/packages/10/14/46776fad42b5d24a0e87b38b60c74e83a03adc3284f1a94b2c333d937a8c/pymince-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43cfe4c446af89c18a02b8b1bde3781738c5defde25673df8ab483079b965894",
          "md5": "d884ed20b96d6a0aae5456efeac3119a",
          "sha256": "cdcc359ee08cf64cbddea457a85870d493b7f8e36bd171b03be43d2d1c4e653a"
        },
        "downloads": -1,
        "filename": "pymince-2.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d884ed20b96d6a0aae5456efeac3119a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 19900,
        "upload_time": "2023-01-12T10:35:04",
        "upload_time_iso_8601": "2023-01-12T10:35:04.776192Z",
        "url": "https://files.pythonhosted.org/packages/43/cf/e4c446af89c18a02b8b1bde3781738c5defde25673df8ab483079b965894/pymince-2.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d261a2240d0d89d5e3cf3d6e3003e481a0ff1a209dfb2b01939a4da0fd26f4b3",
          "md5": "6a5ebf1a0cba6a36758cf04a19fc8a65",
          "sha256": "fe5f820f901e44ee54093d9d2772c754786e638baf95de0740f2c1977c302df9"
        },
        "downloads": -1,
        "filename": "pymince-2.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6a5ebf1a0cba6a36758cf04a19fc8a65",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 17054,
        "upload_time": "2023-01-12T10:35:05",
        "upload_time_iso_8601": "2023-01-12T10:35:05.988851Z",
        "url": "https://files.pythonhosted.org/packages/d2/61/a2240d0d89d5e3cf3d6e3003e481a0ff1a209dfb2b01939a4da0fd26f4b3/pymince-2.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43adabc7b03715b753006b9deed7c75934847187626b0284d7ce0092a9dc51f4",
          "md5": "a51a887ac27d231dca9c5b4c52e04336",
          "sha256": "5a426a1d55e3906684654a29b0a221e033e56e4a0dd22b79c721ee973f37b10f"
        },
        "downloads": -1,
        "filename": "pymince-2.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a51a887ac27d231dca9c5b4c52e04336",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 28867,
        "upload_time": "2023-01-12T10:47:05",
        "upload_time_iso_8601": "2023-01-12T10:47:05.391592Z",
        "url": "https://files.pythonhosted.org/packages/43/ad/abc7b03715b753006b9deed7c75934847187626b0284d7ce0092a9dc51f4/pymince-2.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "03a465173eff1ad4ad3e2d39d3b8941edb05776a073e78bc7ce64a5c95417780",
          "md5": "6100a595fc5a6fb4fb80884c99b21a62",
          "sha256": "6e7888cc8e0cf1afa8bca52c19d4df68a0636a0dd09f4b9293d98bf28684d706"
        },
        "downloads": -1,
        "filename": "pymince-2.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6100a595fc5a6fb4fb80884c99b21a62",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 42457,
        "upload_time": "2023-01-12T10:47:06",
        "upload_time_iso_8601": "2023-01-12T10:47:06.683744Z",
        "url": "https://files.pythonhosted.org/packages/03/a4/65173eff1ad4ad3e2d39d3b8941edb05776a073e78bc7ce64a5c95417780/pymince-2.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4082ab8ed754bb5a4bb970ce142865f7bf4f952eb2c7a614742da4894db20ceb",
          "md5": "200a9048590a4107df3fb981c044be1b",
          "sha256": "f7bdc618c35605fbca2e23b35dca1c22cd337aa17d12f1ac96d90195fd3d3f7d"
        },
        "downloads": -1,
        "filename": "pymince-2.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "200a9048590a4107df3fb981c044be1b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 29823,
        "upload_time": "2023-01-13T16:35:27",
        "upload_time_iso_8601": "2023-01-13T16:35:27.418614Z",
        "url": "https://files.pythonhosted.org/packages/40/82/ab8ed754bb5a4bb970ce142865f7bf4f952eb2c7a614742da4894db20ceb/pymince-2.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6159b5c485a1f3569c55d454631b9063b945cdbd7f5cf57cfc680fccef0eb9f",
          "md5": "a9fb6ab0f3f981fdb3d8530bd154dfef",
          "sha256": "adb5e9d747ecc3241c69d3e36e31caa2cad41fcb5f0d161017de17367134e8e7"
        },
        "downloads": -1,
        "filename": "pymince-2.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a9fb6ab0f3f981fdb3d8530bd154dfef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 44599,
        "upload_time": "2023-01-13T16:35:29",
        "upload_time_iso_8601": "2023-01-13T16:35:29.022243Z",
        "url": "https://files.pythonhosted.org/packages/d6/15/9b5c485a1f3569c55d454631b9063b945cdbd7f5cf57cfc680fccef0eb9f/pymince-2.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e14c878ba0bc825b474b078c760a74a93af552cb898edb1cc6ab899cc645ab6b",
          "md5": "fa59fa865263b811f9618f16b43d3df5",
          "sha256": "b9f2e7af5f2cde4e15b6a5bf7289383e42597cf745a59fc484106deefc1a75b5"
        },
        "downloads": -1,
        "filename": "pymince-2.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa59fa865263b811f9618f16b43d3df5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 30003,
        "upload_time": "2023-01-30T13:21:08",
        "upload_time_iso_8601": "2023-01-30T13:21:08.140497Z",
        "url": "https://files.pythonhosted.org/packages/e1/4c/878ba0bc825b474b078c760a74a93af552cb898edb1cc6ab899cc645ab6b/pymince-2.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdb1257483596737d775fd38ed3c2eea948a72ad89f8fb86a6081bfd41e9810a",
          "md5": "01c8b960fb804446cea4ed94dfe386f7",
          "sha256": "3f3d12de65be22e8e35df591b073a0fea53fe1204ec2c46b21233586a60559aa"
        },
        "downloads": -1,
        "filename": "pymince-2.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "01c8b960fb804446cea4ed94dfe386f7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 45814,
        "upload_time": "2023-01-30T13:21:09",
        "upload_time_iso_8601": "2023-01-30T13:21:09.288687Z",
        "url": "https://files.pythonhosted.org/packages/fd/b1/257483596737d775fd38ed3c2eea948a72ad89f8fb86a6081bfd41e9810a/pymince-2.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "68344d4e7e6d71a9ecde1ee1613458277eb06a18b2b8513091d11bdbae0655fb",
          "md5": "57198fe0d48ee0a9bd1d6c58c6b18d89",
          "sha256": "670a0dab918931893d0d36fb7224d60fe9de4d2cbb8edf189f626cd86261d5f1"
        },
        "downloads": -1,
        "filename": "pymince-2.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "57198fe0d48ee0a9bd1d6c58c6b18d89",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 31583,
        "upload_time": "2023-02-17T14:52:08",
        "upload_time_iso_8601": "2023-02-17T14:52:08.087300Z",
        "url": "https://files.pythonhosted.org/packages/68/34/4d4e7e6d71a9ecde1ee1613458277eb06a18b2b8513091d11bdbae0655fb/pymince-2.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "930ed98e680b34e8edcf96a7a4883357ce6444706cfbcc68d88e321703e69234",
          "md5": "ba47c9df1bd8aab8922d09a3c1d820c9",
          "sha256": "f48dd426b015494bf6e0997300222039da30e505a577e41d5d7cd27c245950be"
        },
        "downloads": -1,
        "filename": "pymince-2.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ba47c9df1bd8aab8922d09a3c1d820c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 48715,
        "upload_time": "2023-02-17T14:52:09",
        "upload_time_iso_8601": "2023-02-17T14:52:09.755973Z",
        "url": "https://files.pythonhosted.org/packages/93/0e/d98e680b34e8edcf96a7a4883357ce6444706cfbcc68d88e321703e69234/pymince-2.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "68344d4e7e6d71a9ecde1ee1613458277eb06a18b2b8513091d11bdbae0655fb",
        "md5": "57198fe0d48ee0a9bd1d6c58c6b18d89",
        "sha256": "670a0dab918931893d0d36fb7224d60fe9de4d2cbb8edf189f626cd86261d5f1"
      },
      "downloads": -1,
      "filename": "pymince-2.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "57198fe0d48ee0a9bd1d6c58c6b18d89",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 31583,
      "upload_time": "2023-02-17T14:52:08",
      "upload_time_iso_8601": "2023-02-17T14:52:08.087300Z",
      "url": "https://files.pythonhosted.org/packages/68/34/4d4e7e6d71a9ecde1ee1613458277eb06a18b2b8513091d11bdbae0655fb/pymince-2.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "930ed98e680b34e8edcf96a7a4883357ce6444706cfbcc68d88e321703e69234",
        "md5": "ba47c9df1bd8aab8922d09a3c1d820c9",
        "sha256": "f48dd426b015494bf6e0997300222039da30e505a577e41d5d7cd27c245950be"
      },
      "downloads": -1,
      "filename": "pymince-2.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ba47c9df1bd8aab8922d09a3c1d820c9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 48715,
      "upload_time": "2023-02-17T14:52:09",
      "upload_time_iso_8601": "2023-02-17T14:52:09.755973Z",
      "url": "https://files.pythonhosted.org/packages/93/0e/d98e680b34e8edcf96a7a4883357ce6444706cfbcc68d88e321703e69234/pymince-2.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}