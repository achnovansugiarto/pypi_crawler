{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Natural Language :: English",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Unix Shell",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# xenon-view-sdk\nThe Xenon View Python SDK is the Python SDK to interact with [XenonView](https://xenonview.com).\n\n**Table of contents:** <a id='contents'></a>\n\n* [What's New](#whats-new)\n* [Introduction](#intro)\n* [Steps To Get Started](#getting-started)\n  * [Identify Business Outcomes](#step-1)\n  * [Identify Customer Journey Milestones](#step-2)\n  * [Enumerate Technical Stack](#step-3)\n  * [Installation](#step-4)\n  * [Instrument Business Outcomes](#step-5)\n  * [Instrument Customer Journey Milestones](#step-6)\n  * [Determine Commit Points](#step-7)\n  * [(Optional) Group Customer Journeys](#step-8)\n  * [Analysis](#step-9)\n  * [Perform Experiments](#step-10)\n* [Detailed Usage](#detailed-usage)\n  * [Installation](#installation)\n  * [Initialization](#instantiation)\n  * [Service/Subscription/SaaS Business Outcomes](#saas)\n  * [Ecommerce Business Outcomes](#ecom)\n  * [Customer Journey Milestones](#milestones)\n    * [Features Usage](#feature-usage)\n    * [Content Interaction](#content-interaction)\n  * [Commit Points](#commiting)\n  * [Heartbeats](#heartbeat)\n  * [Platforming](#platforming)\n  * [Experiments](#experiments)\n  * [Customer Journey Grouping](#deanonymizing-journeys)\n  * [Other Considerations](#other)\n    * [(Optional) Error Handling](#errors)\n    * [(Optional) Custom Customer Journey Milestones](#custom)\n    * [(Optional) Journey Identification](#cuuid)\n* [License](#license)\n\n<br/>\n\n## What's New <a id='whats-new'></a>\n* v0.1.4 - Rename tag to variant\n* v0.1.3 - Readme update\n* v0.1.2 - typo fixed\n* v0.1.1 - duplicates for new SDK handled\n* v0.1.0 - SDK redesign\n\n<br/>\n\n\n## Introduction <a id='intro'></a>\nEveryone should have access to world-class customer telemetry.\n\nYou should be able to identify the most pressing problems affecting your business quickly.\nYou should be able to determine if messaging or pricing, or technical challenges are causing friction for your customers.\nYou should be able to answer questions like:\n1. Is my paywall wording or the price of my subscriptions causing my customers to subscribe less?\n2. Is my website performance or my application performance driving retention?\n3. Is purchasing a specific product or the product portfolio driving referrals?\n\nWith the correct approach to instrumentation coupled with AI-enhanced analytics, you can quickly answer these questions and much more.\n\n<br/>\n\n[back to top](#contents)\n\n## Get Started With The Following Steps: <a id='getting-started'></a>\nThe Xenon View SDK can be used in your application to provide a new level of customer telemetry. You'll need to embed the instrumentation into your website/application via this SDK.\n\nInstrumentation will vary based on your use case; are you offering a service/subscription (SaaS) or selling products (Ecom)?\n\nIn a nutshell, the steps to get started are as follows:\n1. Identify Business Outcomes and Customer Journey Milestones leading to those Outcomes.\n2. Instrument the Outcomes/Milestones.\n3. Analyze the results.\n\n<br/>\n\n\n### Step 1 - Business Outcomes <a id='step-1'></a>\n\nRegardless of your business model, your first step will be identifying your desired business outcomes.\n\n**Example - Service/Subscription/SaaS**:\n1. Lead Capture\n2. Account Signup\n3. Initial Subscription\n4. Renewed Subscription\n5. Upsold Subscription\n6. Referral\n\n**Example - Ecom**:\n1. Place the product in the cart\n2. Checkout\n3. Upsold\n4. Purchase\n\n> :memo: Note: Each outcome has an associated success and failure.\n\n<br/>\n\n\n### Step 2 - Customer Journey Milestones <a id='step-2'></a>\n\nFor each Business Outcome, identify potential customer journey milestones leading up to that business outcome.\n\n**Example - Service/Subscription/SaaS for _Lead Capture_**:\n1. View informational content\n2. Asks question in the forum\n3. Views FAQs\n4. Views HowTo\n5. Requests info product\n\n**Example - Ecom for _Place product in cart_** :\n1. Search for product information\n2. Learns about product\n3. Read reviews\n\n<br/>\n\n### Step 3 - Enumerate Technical Stack <a id='step-3'></a>\n\nNext, you will want to figure out which SDK to use. We have some of the most popular languages covered.\n\nStart by listing the technologies involved and what languages your company uses. For example:\n1. Front end - UI (Javascript - react)\n2. Back end - API server (Java)\n3. Mobile app - iPhone (Swift)\n4. Mobile app - Android (Android Java)\n\nNext, figure out how your outcomes spread across those technologies. Below are pointers to our currently supported languages:\n* [React](https://github.com/xenonview-com/view-js-sdk)\n* [Angular](https://github.com/xenonview-com/view-js-sdk)\n* [HTML](https://github.com/xenonview-com/view-js-sdk)\n* [Plain JavaScript](https://github.com/xenonview-com/view-js-sdk)\n* [iPhone/iPad](https://github.com/xenonview-com/view-swift-sdk)\n* [Mac](https://github.com/xenonview-com/view-swift-sdk)\n* [Java](https://github.com/xenonview-com/view-java-sdk)\n* [Android Java](https://github.com/xenonview-com/view-java-sdk)\n* [Python](https://github.com/xenonview-com/view-python-sdk)\n\nFinally, continue the steps below for each technology and outcome.\n\n\n### Step 4 - Installation <a id='step-4'></a>\n\nAfter you have done the prework of [Step 1](#step-1) and [Step 2](#step-2), you are ready to [install Xenon View](#installation).\nOnce installed, you'll need to [initialize the SDK](#instantiation) and get started instrumenting.\n\n\n<br/>\n<br/>\n\n\n### Step 5 - Instrument Business Outcomes <a id='step-5'></a>\n\nWe have provided several SDK calls to shortcut your instrumentation and map to the outcomes identified in [Step 1](#step-1).  \nThese calls will roll up into the associated Categories during analysis. These rollups allow you to view each Category in totality.\nAs you view the categories, you can quickly identify issues (for example, if there are more Failures than Successes for a Category).\n\n**[Service/Subscription/SaaS Related Outcome Calls](#saas)**  (click on a call to see usage)\n\n| Category | Success | Failure | \n| --- | --- | --- |\n| Lead Capture | [`leadCaptured()`](#saas-lead-capture) | [`leadCaptureDeclined()`](#saas-lead-capture-fail) | \n| Account Signup | [`accountSignup()`](#saas-account-signup) | [`accountSignupDeclined()`](#saas-account-signup-fail) | \n| Application Installation | [`applicationInstalled()`](#saas-application-install) |  [`applicationNotInstalled()`](#saas-application-install-fail) | \n| Initial Subscription | [`initialSubscription()`](#saas-initial-subscription) | [`subscriptionDeclined()`](#saas-initial-subscription-fail) |\n| Subscription Renewed | [`subscriptionRenewed()`](#saas-renewed-subscription) | [`subscriptionCanceled()`](#saas-renewed-subscription-fail) | \n| Subscription Upsell | [`subscriptionUpsold()`](#saas-upsell-subscription) | [`subscriptionUpsellDeclined()`](#saas-upsell-subscription-fail) | \n| Referral | [`referral()`](#saas-referral) | [`referralDeclined()`](#saas-referral-fail) | \n\n\n**[Ecom Related Outcome Calls](#ecom)** (click on a call to see usage)\n\n| Category | Success | Failure |\n| --- | --- | --- | \n| Lead Capture | [`leadCaptured()`](#ecom-lead-capture) | [`leadCaptureDeclined()`](#ecom-lead-capture-fail) | \n| Account Signup | [`accountSignup()`](#ecom-account-signup) | [`accountSignupDeclined()`](#ecom-account-signup-fail) | \n| Add To Cart | [`productAddedToCart()`](#ecom-product-to-cart) | [`productNotAddedToCart()`](#ecom-product-to-cart-fail) |\n| Product Upsell | [`upsold()`](#ecom-upsell) | [`upsellDismissed()`](#ecom-upsell-fail) | \n| Checkout | [`checkedOut()`](#ecom-checkout) | [`checkoutCanceled()`](#ecom-checkout-fail)/[`productRemoved()`](#ecom-checkout-remove) | \n| Purchase | [`purchased()`](#ecom-purchase) | [`purchaseCanceled()`](#ecom-purchase-fail) | \n| Promise Fulfillment | [`promiseFulfilled()`](#ecom-promise-fulfillment) | [`promiseUnfulfilled()`](#ecom-promise-fulfillment-fail) | \n| Product Disposition | [`productKept()`](#ecom-product-outcome) | [`productReturned()`](#ecom-product-outcome-fail) |\n| Referral | [`referral()`](#ecom-referral) | [`referralDeclined()`](#ecom-referral-fail) |\n\n<br/>\n\n### Step 6 - Instrument Customer Journey Milestones <a id='step-6'></a>\n\nNext, you will want to instrument your website/application/backend/service for the identified Customer Journey Milestones [Step 2](#step-2).\nWe have provided several SDK calls to shortcut your instrumentation here as well.  \n\nDuring analysis, each Milestone is chained together with the proceeding and following Milestones.\nThat chain terminates with an Outcome (described in [Step 4](#step-4)).\nAI/ML is employed to determine Outcome correlation and predictability for the chains and individual Milestones.\nDuring the [analysis step](#step-8), you can view the correlation and predictability as well as the Milestone chains\n(called Customer Journeys in this guide).\n\nMilestones break down into two types (click on a call to see usage):\n\n| Features | Content |\n| --- | --- |\n| [`featureAttempted()`](#feature-started) | [`contentViewed()`](#content-viewed) |\n| [`featureFailed()`](#feature-failed) | [`contentEdited()`](#content-edited) |\n| [`featureCompleted()`](#feature-complete) | [`contentCreated()`](#content-created) |\n| | [`contentDeleted()`](#content-deleted) |\n| | [`contentRequested()`](#content-requested)|\n| | [`contentSearched()`](#content-searched)|\n\n<br/>\n\n### Step 7 - Commit Points <a id='step-7'></a>\n\n\nOnce instrumented, you'll want to select appropriate [commit points](#commit). Committing will initiate the analysis on your behalf by Xenon View.\n\n<br/>\n<br/>\n\n### Step 8 (Optional) - Group Customer Journeys <a id='step-8'></a>\n\nAll the customer journeys (milestones and outcomes) are anonymous by default.\nFor example, if a Customer interacts with your brand in the following way:\n1. Starts on your marketing website.\n2. Downloads and uses an app.\n3. Uses a feature requiring an API call.\n\n\n*Each of those journeys will be unconnected and not grouped.*\n\nTo associate those journeys with each other, you can [deanonymize](#deanonymizing-journeys) the Customer. Deanonymizing will allow for a deeper analysis of a particular user.\n\nDeanonymizing is optional. Basic matching of the customer journey with outcomes is valuable by itself. Deanonymizing will add increased insight as it connects Customer Journeys across devices.\n\n<br/>\n\n### Step 9 - Analysis <a id='step-9'></a>\n\n\nOnce you have released your instrumented code, you can head to [XenonView](https://xenonview.com/) to view the analytics.\n\n<br/>\n\n### Step 10 - Perform Experiments <a id='step-10'></a>\n\nThere are multiple ways you can experiment using XenonView. We\"ll focus here on three of the most common: time, platform, and variant based cohorts.\n\n#### Time-based cohorts\nEach Outcome and Milestone is timestamped. You can use this during the analysis phase to compare timeframes. A typical example is making a feature change.\nKnowing when the feature went to production, you can filter in the XenonView UI based on the timeframe before and the timeframe after to observe the results.\n\n#### Variant-based cohorts\nYou can identify a journey collection as an [experiment](#experiments) before collecting data. This will allow you to run A/B testing-type experiments (of course not limited to two).\nAs an example, let\"s say you have two alternate content/feature variants and you have a way to direct half of the users to Variant A and the other half to Variant B.\nYou can name each variant before the section of code that performs that journey. After collecting the data, you can filter in the XenonView UI based on each variant to\nobserve the results.\n\n#### Platform-based cohorts\nYou can [Platform](#platforming) any journey collection before collecting data. This will allow you to experiment against different platforms:\n* Operating System Name\n* Operating System version\n* Device model (Pixel, iPhone 14, Docker Container, Linux VM, Dell Server, etc.)\n* A software version of your application.\n\nAs an example, let's say you have an iPhone and Android mobile application and you want to see if an outcome is more successful on one device verse the other.\nYou can platform before the section of code that performs that flow. After collecting the data, you can filter in the XenonView UI based on each platform to\nobserve the results.\n\n<br/>\n<br/>\n<br/>\n\n[back to top](#contents)\n\n## Detailed Usage <a id='detailed-usage'></a>\nThe following section gives detailed usage instructions and descriptions.\nIt provides code examples for each of the calls.\n\nThe SDK supports Python 3+.\n\n<br/>\n\n### Installation <a id='installation'></a>\n\nYou can install the View Python SDK from [PyPI](https://pypi.org/project/xenon-view-sdk):\n\n```bash\n    pip install xenon-view-sdk\n```\n\n<br/>\n\n[back to top](#contents)\n\n### Instantiation <a id='instantiation'></a>\n\nThe View SDK is a JS module you'll need to include in your application. After inclusion, you'll need to init the singleton object:\n\n\n```python\nfrom xenon_view_sdk import Xenon\n\n# start by initializing Xenon View\nXenon('<API KEY>')\n```\n\n-OR-\n\n```python\nfrom xenon_view_sdk import Xenon\n\n# to initialize Xenon View after construction\nXenon('TBD')\nXenon().key('<API KEY>')\n```\n\nOf course, you'll have to make the following modifications to the above code:\n- Replace `<API KEY>` with your [api key](https://xenonview.com/api-get)\n\n<br/>\n\n[back to top](#contents)\n\n### Service/Subscription/SaaS Related Business Outcomes <a id='saas'></a>\n\n<br/>\n\n#### Lead Capture  <a id='saas-lead-capture'></a>\nUse this call to track Lead Capture (emails, phone numbers, etc.)\nYou can add a specifier string to the call to differentiate as follows:\n\n<br/>\n\n##### ```leadCaptured()```\n```python\nfrom xenon_view_sdk import Xenon\n\nemailSpecified = \"Email\"\nphoneSpecified = \"Phone Number\"\n\n# Successful Lead Capture of an email\nXenon().leadCaptured(emailSpecified)\n# ...\n# Successful Lead Capture of a phone number\nXenon().leadCaptured(phoneSpecified)\n```\n<br/>\n\n##### ```leadCaptureDeclined()``` <a id='saas-lead-capture-fail'></a>\n> :memo: Note: You want to be consistent between success and failure and match the specifiers\n```python\nfrom xenon_view_sdk import Xenon\n\nemailSpecified = \"Email\"\nphoneSpecified = \"Phone Number\" \n\n# Unsuccessful Lead Capture of an email\nXenon().leadCaptureDeclined(emailSpecified)\n# ...\n# Unsuccessful Lead Capture of a phone number\nXenon().leadCaptureDeclined(phoneSpecified)\n```\n\n<br/>\n\n#### Account Signup  <a id='saas-account-signup'></a>\nUse this call to track when customers signup for an account.\nYou can add a specifier string to the call to differentiate as follows:\n\n<br/>\n\n##### ```accountSignup()```\n```python\nfrom xenon_view_sdk import Xenon\n\nviaFacebook = \"Facebook\"\nviaGoogle = \"Google\"\nviaEmail = \"Email\"\n\n# Successful Account Signup with Facebook\nXenon().accountSignup(viaFacebook)\n# ...\n# Successful Account Signup with Google\nXenon().accountSignup(viaGoogle)\n# ...\n# Successful Account Signup with an Email\nXenon().accountSignup(viaEmail)\n```\n\n<br/>\n\n##### ```accountSignupDeclined()``` <a id='saas-account-signup-fail'></a>\n> :memo: Note: You want to be consistent between success and failure and match the specifiers\n```python\nfrom xenon_view_sdk import Xenon\n\nviaFacebook = \"Facebook\"\nviaGoogle = \"Google\"\nviaEmail = \"Email\"\n\n# Unsuccessful Account Signup with Facebook\nXenon().accountSignupDeclined(viaFacebook)\n# ...\n# Unsuccessful Account Signup with Google\nXenon().accountSignupDeclined(viaGoogle)\n# ...\n# Unsuccessful Account Signup with an Email\nXenon().accountSignupDeclined(viaEmail)\n```\n\n<br/>\n\n#### Application Installation  <a id='saas-application-install'></a>\nUse this call to track when customers install your application.\n\n<br/>\n\n##### ```applicationInstalled()```\n```python\nfrom xenon_view_sdk import Xenon\n\n# Successful Application Installation\nXenon().applicationInstalled()\n```\n\n<br/>\n\n##### ```applicationNotInstalled()``` <a id='saas-application-install-fail'></a>\n> :memo: Note: You want consistency between success and failure.\n```python\nfrom xenon_view_sdk import Xenon\n\n# Unsuccessful or not completed Application Installation\nXenon().applicationNotInstalled()\n```\n\n<br/>\n\n#### Initial Subscription  <a id='saas-initial-subscription'></a>\nUse this call to track when customers initially subscribe.\nYou can add a specifier string to the call to differentiate as follows:\n\n<br/>\n\n##### ```initialSubscription()```\n```python\nfrom xenon_view_sdk import Xenon\n\ntierSilver = \"Silver Monthly\"\ntierGold = \"Gold\"\ntierPlatium = \"Platium\"\nannualSilver = \"Silver Annual\"\nmethod = \"Stripe\" # optional\n\n# Successful subscription to the lowest tier with Stripe\nXenon().initialSubscription(tierSilver, method)\n# ...\n# Successful subscription to the middle tier\nXenon().initialSubscription(tierGold)\n# ...\n# Successful subscription to the top tier\nXenon().initialSubscription(tierPlatium)\n# ...\n# Successful subscription of an annual period\nXenon().initialSubscription(annualSilver)\n```\n\n<br/>\n\n##### ```subscriptionDeclined()``` <a id='saas-initial-subscription-fail'></a>\n> :memo: Note: You want to be consistent between success and failure and match the specifiers\n```python\nfrom xenon_view_sdk import Xenon\n\ntierSilver = \"Silver Monthly\"\ntierGold = \"Gold\"\ntierPlatium = \"Platium\"\nannualSilver = \"Silver Annual\"\nmethod = \"Stripe\" # optional\n\n# Unsuccessful subscription of the lowest tier\nXenon().subscriptionDeclined(tierSilver)\n# ...\n# Unsuccessful subscription of the middle tier\nXenon().subscriptionDeclined(tierGold)\n# ...\n# Unsuccessful subscription to the top tier\nXenon().subscriptionDeclined(tierPlatium)\n# ...\n# Unsuccessful subscription of an annual period with Stripe\nXenon().subscriptionDeclined(annualSilver, method)\n```\n\n<br/>\n\n#### Subscription Renewal  <a id='saas-renewed-subscription'></a>\nUse this call to track when customers renew.\nYou can add a specifier string to the call to differentiate as follows:\n\n<br/>\n\n##### ```subscriptionRenewed()```\n```python\nfrom xenon_view_sdk import Xenon\n\ntierSilver = \"Silver Monthly\"\ntierGold = \"Gold\"\ntierPlatium = \"Platium\"\nannualSilver = \"Silver Annual\"\nmethod = \"Stripe\" #optional\n\n# Successful renewal of the lowest tier with Stripe\nXenon().subscriptionRenewed(tierSilver, method)\n# ...\n# Successful renewal of the middle tier\nXenon().subscriptionRenewed(tierGold)\n# ...\n# Successful renewal of the top tier\nXenon().subscriptionRenewed(tierPlatium)\n# ...\n# Successful renewal of an annual period\nXenon().subscriptionRenewed(annualSilver)\n```\n\n<br/>\n\n##### ```subscriptionCanceled()``` <a id='saas-renewed-subscription-fail'></a>\n> :memo: Note: You want to be consistent between success and failure and match the specifiers\n```python\nfrom xenon_view_sdk import Xenon\n\ntierSilver = \"Silver Monthly\"\ntierGold = \"Gold\"\ntierPlatium = \"Platium\"\nannualSilver = \"Silver Annual\"\nmethod = \"Stripe\" #optional\n\n# Canceled subscription of the lowest tier\nXenon().subscriptionCanceled(tierSilver)\n# ...\n# Canceled subscription of the middle tier\nXenon().subscriptionCanceled(tierGold)\n# ...\n# Canceled subscription of the top tier\nXenon().subscriptionCanceled(tierPlatium)\n# ...\n# Canceled subscription of an annual period with Stripe\nXenon().subscriptionCanceled(annualSilver, method)\n```\n\n<br/>\n\n#### Subscription Upsold  <a id='saas-upsell-subscription'></a>\nUse this call to track when a Customer upgrades their subscription.  \nYou can add a specifier string to the call to differentiate as follows:\n\n<br/>\n\n##### ```subscriptionUpsold()```\n```python\nfrom xenon_view_sdk import Xenon\n\ntierGold = \"Gold Monthly\"\ntierPlatium = \"Platium\"\nannualGold = \"Gold Annual\"\nmethod = \"Stripe\" #optional\n\n# Assume already subscribed to Silver\n\n# Successful upsell of the middle tier with Stripe\nXenon().subscriptionUpsold(tierGold, method)\n# ...\n# Successful upsell of the top tier\nXenon().subscriptionUpsold(tierPlatium)\n# ...\n# Successful upsell of middle tier - annual period\nXenon().subscriptionUpsold(annualGold)\n```\n\n<br/>\n\n##### ```subscriptionUpsellDeclined()``` <a id='saas-upsell-subscription-fail'></a>\n> :memo: Note: You want to be consistent between success and failure and match the specifiers\n```python\nfrom xenon_view_sdk import Xenon\n\ntierGold = \"Gold Monthly\"\ntierPlatium = \"Platium\"\nannualGold = \"Gold Annual\"\nmethod = \"Stripe\" #optional\n\n\n# Assume already subscribed to Silver\n\n# Rejected upsell of the middle tier\nXenon().subscriptionUpsellDeclined(tierGold)\n# ...\n# Rejected upsell of the top tier\nXenon().subscriptionUpsellDeclined(tierPlatium)\n# ...\n# Rejected upsell of middle tier - annual period\nXenon().subscriptionUpsellDeclined(annualGold, method)\n```\n\n<br/>\n\n#### Referrals  <a id='saas-referral'></a>\nUse this call to track when customers refer someone to your offering.\nYou can add a specifier string to the call to differentiate as follows:\n\n<br/>\n\n##### ```referral()```\n```python\nfrom xenon_view_sdk import Xenon\n\nkind = \"Share\"\ndetail = \"Review\" #optional\n\n# Successful referral by sharing a review\nXenon().referral(kind, detail)\n# -OR-\nXenon().referral(kind)\n```\n\n<br/>\n\n##### ```referralDeclined()``` <a id='saas-referral-fail'></a>\n> :memo: Note: You want to be consistent between success and failure and match the specifiers\n```python\nfrom xenon_view_sdk import Xenon\n\nkind = \"Share\"\ndetail = \"Review\" #optional\n\n# Customer declined referral \nXenon().referralDeclined(kind, detail)\n# -OR-\nXenon().referralDeclined(kind)\n```\n\n<br/>\n\n[back to top](#contents)\n\n### Ecommerce Related Outcomes <a id='ecom'></a>\n\n\n<br/>\n\n#### Lead Capture  <a id='ecom-lead-capture'></a>\nUse this call to track Lead Capture (emails, phone numbers, etc.)\nYou can add a specifier string to the call to differentiate as follows:\n\n<br/>\n\n##### ```leadCaptured()```\n```python\nfrom xenon_view_sdk import Xenon\n\nemailSpecified = \"Email\"\nphoneSpecified = \"Phone Number\"\n\n# Successful Lead Capture of an email\nXenon().leadCaptured(emailSpecified)\n# ...\n# Successful Lead Capture of a phone number\nXenon().leadCaptured(phoneSpecified)\n```\n\n<br/>\n\n##### ```leadCaptureDeclined()``` <a id='ecom-lead-capture-fail'></a>\n> :memo: Note: You want to be consistent between success and failure and match the specifiers\n```python\nfrom xenon_view_sdk import Xenon\n\nemailSpecified = \"Email\"\nphoneSpecified = \"Phone Number\" \n\n# Unsuccessful Lead Capture of an email\nXenon().leadCaptureDeclined(emailSpecified)\n# ...\n# Unsuccessful Lead Capture of a phone number\nXenon().leadCaptureDeclined(phoneSpecified)\n```\n\n<br/>\n\n#### Account Signup  <a id='ecom-account-signup'></a>\nUse this call to track when customers signup for an account.\nYou can add a specifier string to the call to differentiate as follows:\n\n<br/>\n\n##### ```accountSignup()```\n```python\nfrom xenon_view_sdk import Xenon\n\nviaFacebook = \"Facebook\"\nviaGoogle = \"Facebook\"\nviaEmail = \"Email\"\n\n# Successful Account Signup with Facebook\nXenon().accountSignup(viaFacebook)\n# ...\n# Successful Account Signup with Google\nXenon().accountSignup(viaGoogle)\n# ...\n# Successful Account Signup with an Email\nXenon().accountSignup(viaEmail)\n```\n\n<br/>\n\n##### ```accountSignupDeclined()``` <a id='ecom-account-signup-fail'></a>\n> :memo: Note: You want to be consistent between success and failure and match the specifiers\n```python\nfrom xenon_view_sdk import Xenon\n\nviaFacebook = \"Facebook\"\nviaGoogle = \"Facebook\"\nviaEmail = \"Email\"\n\n# Unsuccessful Account Signup with Facebook\nXenon().accountSignupDeclined(viaFacebook)\n# ...\n# Unsuccessful Account Signup with Google\nXenon().accountSignupDeclined(viaGoogle)\n# ...\n# Unsuccessful Account Signup with an Email\nXenon().accountSignupDeclined(viaEmail)\n```\n\n<br/>\n\n#### Add Product To Cart  <a id='ecom-product-to-cart'></a>\nUse this call to track when customers add a product to the cart.\nYou can add a specifier string to the call to differentiate as follows:\n\n<br/>\n\n##### ```productAddedToCart()```\n```python\nfrom xenon_view_sdk import Xenon\n\nlaptop = \"Dell XPS\"\nkeyboard = \"Apple Magic Keyboard\"\n\n# Successful adds a laptop to the cart\nXenon().productAddedToCart(laptop)\n# ...\n# Successful adds a keyboard to the cart\nXenon().productAddedToCart(keyboard)\n```\n\n<br/>\n\n##### ```productNotAddedToCart()``` <a id='ecom-product-to-cart-fail'></a>\n> :memo: Note: You want to be consistent between success and failure and match the specifiers\n```python\nfrom xenon_view_sdk import Xenon\n\nlaptop = \"Dell XPS\"\nkeyboard = \"Apple Magic Keyboard\"\n\n# Doesn't add a laptop to the cart\nXenon().productNotAddedToCart(laptop)\n# ...\n# Doesn't add a keyboard to the cart\nXenon().productNotAddedToCart(keyboard)\n```\n\n<br/>\n\n#### Upsold Additional Products  <a id='ecom-upsell'></a>\nUse this call to track when you upsell additional product(s) to customers.\nYou can add a specifier string to the call to differentiate as follows:\n\n<br/>\n\n##### ```upsold()```\n```python\nfrom xenon_view_sdk import Xenon\n\nlaptop = \"Dell XPS\"\nkeyboard = \"Apple Magic Keyboard\"\n\n# upsold a laptop\nXenon().upsold(laptop)\n# ...\n# upsold a keyboard\nXenon().upsold(keyboard)\n```\n\n<br/>\n\n##### ```upsellDismissed()``` <a id='ecom-upsell-fail'></a>\n> :memo: Note: You want to be consistent between success and failure and match the specifiers\n```python\nfrom xenon_view_sdk import Xenon\n\nlaptop = \"Dell XPS\"\nkeyboard = \"Apple Magic Keyboard\"\n\n# Doesn't add a laptop during upsell\nXenon().upsellDismissed(laptop)\n# ...\n# Doesn't add a keyboard during upsell\nXenon().upsellDismissed(keyboard)\n```\n\n<br/>\n\n#### Customer Checks Out  <a id='ecom-checkout'></a>\nUse this call to track when your Customer is checking out.\n\n<br/>\n\n##### ```checkedOut()```\n```python\nfrom xenon_view_sdk import Xenon\n\n# Successful Checkout\nXenon().checkedOut()\n```\n\n<br/>\n\n##### ```checkoutCanceled()``` <a id='ecom-checkout-fail'></a>\n```python\nfrom xenon_view_sdk import Xenon\n\n# Customer cancels check out.\nXenon().checkoutCanceled()\n\n```\n\n<br/>\n\n##### ```productRemoved()``` <a id='ecom-checkout-remove'></a>\n```python\nfrom xenon_view_sdk import Xenon\n\nlaptop = \"Dell XPS\"\nkeyboard = \"Apple Magic Keyboard\"\n\n# Removes a laptop during checkout\nXenon().productRemoved(laptop)\n# ...\n# Removes a keyboard during checkout\nXenon().productRemoved(keyboard)\n```\n\n<br/>\n\n#### Customer Completes Purchase  <a id='ecom-purchase'></a>\nUse this call to track when your Customer completes a purchase.\n\n<br/>\n\n##### ```purchased()```\n```python\nfrom xenon_view_sdk import Xenon\n\nmethod = \"Stripe\"\n\n# Successful Purchase\nXenon().purchased(method)\n```\n\n<br/>\n\n##### ```purchaseCanceled()``` <a id='ecom-purchase-fail'></a>\n```python\nfrom xenon_view_sdk import Xenon\n\nmethod = \"Stripe\" #optional\n\n# Customer cancels the purchase.\nXenon().purchaseCanceled()\n# -OR-\nXenon().purchaseCanceled(method)\n```\n\n<br/>\n\n#### Purchase Shipping  <a id='ecom-promise-fulfillment'></a>\nUse this call to track when your Customer receives a purchase.\n\n<br/>\n\n##### ```promiseFulfilled()```\n```python\nfrom xenon_view_sdk import Xenon\n\n# Successfully Delivered Purchase\nXenon().promiseFulfilled()\n```\n\n<br/>\n\n##### ```promiseUnfulfilled(()``` <a id='ecom-promise-fulfillment-fail'></a>\n```python\nfrom xenon_view_sdk import Xenon\n\n# Problem Occurs During Shipping And No Delivery\nXenon().promiseUnfulfilled()\n```\n\n<br/>\n\n#### Customer Keeps or Returns Product  <a id='ecom-product-outcome'></a>\nUse this call to track if your Customer keeps the product.\nYou can add a specifier string to the call to differentiate as follows:\n\n<br/>\n\n##### ```productKept()```\n```python\nfrom xenon_view_sdk import Xenon\n\nlaptop = \"Dell XPS\"\nkeyboard = \"Apple Magic Keyboard\"\n\n# Customer keeps a laptop\nXenon().productKept(laptop)\n# ...\n# Customer keeps a keyboard\nXenon().productKept(keyboard)\n```\n\n<br/>\n\n##### ```productReturned()``` <a id='ecom-product-outcome-fail'></a>\n> :memo: Note: You want to be consistent between success and failure and match the specifiers\n```python\nfrom xenon_view_sdk import Xenon\n\nlaptop = \"Dell XPS\"\nkeyboard = \"Apple Magic Keyboard\"\n\n# Customer returns a laptop\nXenon().productReturned(laptop)\n# ...\n# Customer returns a keyboard\nXenon().productReturned(keyboard)\n```\n\n<br/>\n\n#### Referrals  <a id='ecom-referral'></a>\nUse this call to track when customers refer someone to your offering.\nYou can add a specifier string to the call to differentiate as follows:\n\n<br/>\n\n##### ```referral()```\n```python\nfrom xenon_view_sdk import Xenon\n\nkind = \"Share Product\"\ndetail = \"Dell XPS\"\n\n# Successful referral by sharing a laptop\nXenon().referral(kind, detail)\n```\n\n<br/>\n\n##### ```referralDeclined()``` <a id='ecom-referral-fail'></a>\n> :memo: Note: You want to be consistent between success and failure and match the specifiers\n```python\nfrom xenon_view_sdk import Xenon\n\nkind = \"Share Product\"\ndetail = \"Dell XPS\"\n\n# Customer declined referral \nXenon().referralDeclined(kind, detail)\n```\n\n<br/>\n\n[back to top](#contents)\n\n### Customer Journey Milestones <a id='milestones'></a>\n\nAs a customer interacts with your brand (via Advertisements, Marketing Website, Product/Service, etc.), they journey through a hierarchy of interactions.\nAt the top level are business outcomes. In between Outcomes, they may achieve other milestones, such as interacting with content and features.\nProper instrumentation of these milestones can establish correlation and predictability of business outcomes.\n\nAs of right now, Customer Journey Milestones break down into two categories:\n1. [Feature Usage](#feature-usage)\n2. [Content Interaction](#content-interaction)\n\n<br/>\n\n#### Feature Usage  <a id='feature-usage'></a>\nFeatures are your product/application/service's traits or attributes that deliver value to your customers.\nThey differentiate your offering in the market. Typically, they are made up of and implemented by functions.\n\n<br/>\n\n##### ```featureAttempted()``` <a id='feature-started'></a>\nUse this function to indicate the start of feature usage.\n```python\nfrom xenon_view_sdk import Xenon\n\nname = \"Scale Recipe\"\ndetail = \"x2\"   # optional\n\n# Customer initiated using a feature \nXenon().featureAttempted(name, detail)\n# -OR-\nXenon().featureAttempted(name)\n```\n\n<br/>\n\n##### ```featureCompleted()``` <a id='feature-complete'></a>\nUse this function to indicate the successful completion of the feature.\n```python\nfrom xenon_view_sdk import Xenon\n\nname = \"Scale Recipe\"\ndetail = \"x2\"  # optional\n# ...\n# Customer used a feature \nXenon().featureCompleted(name)\n\n# -OR-\n\n# Customer initiated using a feature \nXenon().featureAttempted(name, detail)\n# ...\n# feature code/function calls\n# ...\n# feature completes successfully \nXenon().featureCompleted(name, detail)\n# -OR-\nXenon().featureCompleted(name)\n```\n\n<br/>\n\n##### ```featureFailed()``` <a id='feature-failed'></a>\nUse this function to indicate the unsuccessful completion of a feature being used (often in the exception handler).\n```python\nfrom xenon_view_sdk import Xenon\n\n\nname = \"Scale Recipe\"\ndetail = \"x2\"  # optional\n\n\n# Customer initiated using a feature \nXenon().featureAttempted(name, detail)\ntry:\n    # feature code that could fail\nexcept Exception as e:\n    # feature completes unsuccessfully \n    Xenon().featureFailed(name, detail)\n    # -OR-\n    Xenon().featureFailed(name)\n```\n\n<br/>\n\n[back to top](#contents)\n\n#### Content Interaction  <a id='content-interaction'></a>\nContent is created assets/resources for your site/service/product.\nIt can be static or dynamic. You will want to mark content that contributes to your Customer's experience or buying decision.\nTypical examples:\n* Blog\n* Blog posts\n* Video assets\n* Comments\n* Reviews\n* HowTo Guides\n* Charts/Graphs\n* Product/Service Descriptions\n* Surveys\n* Informational product\n\n<br/>\n\n##### ```contentViewed()``` <a id='content-viewed'></a>\nUse this function to indicate a view of specific content.\n```python\nfrom xenon_view_sdk import Xenon\n\ncontentType = \"Blog Post\"\nidentifier = \"how-to-install-xenon-view\" # optional\n\n# Customer view a blog post \nXenon().contentViewed(contentType, identifier)\n# -OR-\nXenon().contentViewed(contentType)\n```\n\n<br/>\n\n##### ```contentEdited()``` <a id='content-edited'></a>\nUse this function to indicate the editing of specific content.\n```python\nfrom xenon_view_sdk import Xenon\n\ncontentType = \"Review\"\nidentifier = \"Dell XPS\" # optional\ndetail = \"Rewrote\" # optional\n\n# Customer edited their review about a laptop\nXenon().contentEdited(contentType, identifier, detail)\n# -OR-\nXenon().contentEdited(contentType, identifier)\n# -OR-\nXenon().contentEdited(contentType)\n```\n\n<br/>\n\n##### ```contentCreated()``` <a id='content-created'></a>\nUse this function to indicate the creation of specific content.\n```python\nfrom xenon_view_sdk import Xenon\n\ncontentType = \"Blog Comment\"\nidentifier = \"how-to-install-xenon-view\" # optional\n\n# Customer wrote a comment on a blog post\nXenon().contentCreated(contentType, identifier)\n# -OR- \nXenon().contentCreated(contentType)\n```\n\n<br/>\n\n##### ```contentDeleted()``` <a id='content-deleted'></a>\nUse this function to indicate the deletion of specific content.\n```python\nfrom xenon_view_sdk import Xenon\n\ncontentType = \"Blog Comment\"\nidentifier = \"how-to-install-xenon-view\" # optional\n\n# Customer deleted their comment on a blog post \nXenon().contentDeleted(contentType, identifier)\n# -OR- \nXenon().contentDeleted(contentType)\n```\n\n<br/>\n\n##### ```contentRequested()``` <a id='content-requested'></a>\nUse this function to indicate the request for specific content.\n```python\nfrom xenon_view_sdk import Xenon\n\ncontentType = \"Info Product\"\nidentifier = \"how-to-efficiently-use-google-ads\" # optional\n\n# Customer requested some content\nXenon().contentRequested(contentType, identifier)\n# -OR- \nXenon().contentRequested(contentType)\n```\n\n<br/>\n\n##### ```contentSearched()``` <a id='content-searched'></a>\nUse this function to indicate when a user searches.\n```python\nfrom xenon_view_sdk import Xenon\n\ncontentType = \"Info Product\"\n\n# Customer searched for some content\nXenon().contentSearched(contentType)\n```\n\n\n<br/>\n\n[back to top](#contents)\n\n### Commit Points   <a id='commiting'></a>\n\n\nBusiness Outcomes and Customer Journey Milestones are tracked locally in memory until you commit them to the Xenon View system.\nAfter you have created (by either calling a milestone or outcome) a customer journey, you can commit it to Xenon View for analysis as follows:\n\n<br/>\n\n#### `commit()`\n```python\nfrom xenon_view_sdk import Xenon\n\n# you can commit a journey to Xenon View\nXenon().commit()\n```\nThis call commits a customer journey to Xenon View for analysis.\n\n\n\n<br/>\n\n[back to top](#contents)\n\n### Heartbeats   <a id='heartbeat'></a>\n\n\nBusiness Outcomes and Customer Journey Milestones are tracked locally in memory until you commit them to the Xenon View system.\nYou can use the heartbeat call if you want to commit in batch.\nAdditionally, the heartbeat call will update a last-seen metric for customer journeys that have yet to arrive at Business Outcome. The last-seen metric is useful when analyzing stalled Customer Journeys.\n\nUsage is as follows:\n\n<br/>\n\n#### `heartbeat()`\n```python\nfrom xenon_view_sdk import Xenon\n\n# you can heartbeat to Xenon View\nXenon().heartbeat()\n```\nThis call commits any uncommitted journeys to Xenon View for analysis and updates the last accessed time.\n\n\n<br/>\n\n[back to top](#contents)\n\n### Platforming  <a id='platforming'></a>\n\nAfter you have initialized Xenon View, you can optionally specify platform details such as:\n\n- Operating System Name\n- Operating System version\n- Device model (Pixel, Docker Container, Linux VM, Dell Server, etc.)\n- A software version of your application.\n\n<br/>\n\n#### `platform()`\n```python\nfrom xenon_view_sdk import Xenon\n\nsoftwareVersion = \"5.1.5\"\ndeviceModel = \"Pixel 4 XL\"\noperatingSystemVersion = \"12.0\"\noperatingSystemName = \"Android\"\n\n# you can add platform details to outcomes\nXenon().platform(softwareVersion, deviceModel, operatingSystemName, operatingSystemVersion)\n```\nThis adds platform details for each outcome ([Saas](#saas)/[Ecom](#ecom)). Typically, this would be set once at initialization:\n```python\nfrom xenon_view_sdk import Xenon\n\nXenon().init('<API KEY>')\nsoftwareVersion = \"5.1.5\"\ndeviceModel = \"Pixel 4 XL\"\noperatingSystemVersion = \"12.0\"\noperatingSystemName = \"Android\"\nXenon().platform(softwareVersion, deviceModel, operatingSystemName, operatingSystemVersion)\n```\n<br/>\n\n[back to top](#contents)\n\n### Experiments  <a id=\"experiments\"></a>\n\nAfter you have initialized Xenon View, you can optionally name variants of customer journeys.\nNamed variants facilitate running experiments such as A/B or split testing.\n\n> :memo: Note: You are not limited to just 2 (A or B); there can be many. Additionally, you can have multiple variant names.\n\n<br/>\n\n#### `variant()`\n```python\nfrom xenon_view_sdk import Xenon\n\nvariant = \"subscription-variant-A\"\n\n# you can add variant details to outcomes\nXenon().variant([variant])\n```\nThis adds variant names to each outcome while the variant in play ([Saas](#saas)/[Ecom](#ecom)).\nTypically, you would name a variant once you know the active experiment for this Customer:\n```python\nfrom xenon_view_sdk import Xenon\n\nXenon().init('<API KEY>')\nexperimentName = getExperiment()\nXenon().variant([experimentName])\n```\n<br/>\n\n#### `resetVariants()`\n```python\nfrom xenon_view_sdk import Xenon\n\n# you can clear all variant names with the resetVariants method\nXenon().resetVariants()\n```\n<br/>\n\n[back to top](#contents)\n\n### Customer Journey Grouping <a id='deanonymizing-journeys'></a>\n\n\nXenon View supports both anonymous and grouped (known) journeys.\n\nAll the customer journeys (milestones and outcomes) are anonymous by default.\nFor example, if a Customer interacts with your brand in the following way:\n1. Starts on your marketing website.\n2. Downloads and uses an app.\n3. Uses a feature requiring an API call.\n\n*Each of those journeys will be unconnected and not grouped.*\n\nTo associate those journeys with each other, you can use `deanonymize()`. Deanonymizing will allow for a deeper analysis of a particular user.\n\nDeanonymizing is optional. Basic matching of the customer journey with outcomes is valuable by itself. Deanonymizing will add increased insight as it connects Customer Journeys across devices.\n\nUsage is as follows:\n\n<br/>\n\n#### `deanonymize()`\n```python\nfrom xenon_view_sdk import Xenon\n\n# you can deanonymize before or after you have committed the journey (in this case, after):\nperson = {\n    'name': 'Python Testing',\n    'email': 'pytest@example.com'\n}\nXenon().deanonymize(person)\n\n# you can also deanonymize with a user ID:\nperson = {\n    'UUID': \"<some unique ID>\"\n}\nXenon().deanonymize(person)\n```\nThis call deanonymizes every journey committed to a particular user.\n\n> **:memo: Note:** With journeys that span multiple platforms (e.g., Website->Android->API backend), you can group the Customer Journeys by deanonymizing each.\n\n\n<br/>\n\n[back to top](#contents)\n\n### Other Operations <a id='other'></a>\n\nThere are various other operations that you might find helpful:\n\n<br/>\n<br/>\n\n#### Error handling <a id='errors'></a>\nIn the event of an API error, an exception occurs with the response from the API as [Requests response object](https://docs.python-requests.org/en/latest/user/quickstart/#response-content):\n\n> **:memo: Note:** The default handling of this situation will restore the journey (appending newly added pageViews, events, etc.) for future committing. If you want to do something special, you can do so like this:\n\n```python\nfrom xenon_view_sdk import Xenon, ApiException\n\ntry:\n    Xenon().commit()\n\nexcept ApiException as e:\n    print(str(e.apiResponse().status_code))\n```\n\n<br/>\n\n#### Custom Milestones <a id='custom'></a>\n\nYou can add custom milestones if you need more than the current Customer Journey Milestones.\n\n<br/>\n\n##### `milestone()`\n```python\nfrom xenon_view_sdk import Xenon\n\n# you can add a custom milestone to the customer journey\ncategory = \"Function\"\noperation = \"Called\"\nname = \"Query Database\"\ndetail = \"User Lookup\"\nXenon().milestone(category, operation, name, detail)\n```\nThis call adds a custom milestone to the customer journey.\n\n<br/>\n\n#### Journey IDs <a id='cuuid'></a>\nEach Customer Journey has an ID akin to a session.\nAfter committing an Outcome, the ID remains the same to link all the Journeys.\nIf you have a previous Customer Journey in progress and would like to append to that, you can get/set the ID.\n\n> **:memo: Note:** For Python, the Xenon object is a singleton. Subsequent Outcomes for multiple threads or async operations will reuse the Journey ID.\n\nAfter you have initialized the Xenon singleton, you can:\n1. Use the default UUID\n2. Set the Customer Journey (Session) ID\n3. Regenerate a new UUID\n4. Retrieve the Customer Journey (Session) ID\n\n<br/>\n\n##### `id()`\n```python\nfrom xenon_view_sdk import Xenon\n\n# by default has Journey ID\nprint(str(Xenon().id()))\n\n# you can also set the id\ntestId = '<some random uuid>'\nXenon().id(testId)\nassert Xenon().id() == testId\n\n# Lastly, you can generate a new Journey ID (useful for serialized async operations that are for different customers)\nXenon().newId()\n```\n\n\n<br/>\n\n[back to top](#contents)\n\n## License  <a name=\"license\"></a>\n\nApache Version 2.0\n\nSee [LICENSE](https://github.com/xenonview-com/view-js-sdk/blob/main/LICENSE)\n\n[back to top](#contents)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/xenonview-com/view-python-sdk/tarball/1.0",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/xenonview-com/view-python-sdk",
    "keywords": "",
    "license": "",
    "maintainer": "Luke Woydziak",
    "maintainer_email": "lwoydziak@gmail.com",
    "name": "xenon-view-sdk",
    "package_url": "https://pypi.org/project/xenon-view-sdk/",
    "platform": "any",
    "project_url": "https://pypi.org/project/xenon-view-sdk/",
    "project_urls": {
      "Download": "https://github.com/xenonview-com/view-python-sdk/tarball/1.0",
      "Homepage": "https://github.com/xenonview-com/view-python-sdk"
    },
    "release_url": "https://pypi.org/project/xenon-view-sdk/0.1.4/",
    "requires_dist": [
      "singleton3",
      "requests",
      "pytz"
    ],
    "requires_python": ">=3",
    "summary": "Python access to Xenon View.",
    "version": "0.1.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16956034,
  "releases": {
    "0.0.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3618cf8e7884579cd7dc47bccae935d901e1a3907b6ec108c37891390990d7b",
          "md5": "07f1e07573b15b1e0bee710662a10fca",
          "sha256": "4d7070f5717d8e63b82c8fd9eb343e0f4846dd6310f439a1db54fa0ea6b83277"
        },
        "downloads": -1,
        "filename": "xenon_view_sdk-0.0.19-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "07f1e07573b15b1e0bee710662a10fca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 9850,
        "upload_time": "2022-08-05T04:48:16",
        "upload_time_iso_8601": "2022-08-05T04:48:16.006125Z",
        "url": "https://files.pythonhosted.org/packages/e3/61/8cf8e7884579cd7dc47bccae935d901e1a3907b6ec108c37891390990d7b/xenon_view_sdk-0.0.19-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "74bd796c548a1fb3466e91350bd81f088accff03378f9bcad25f392ff7038281",
          "md5": "3602d360ab2b655d29331f045c030025",
          "sha256": "578bc9096d810be51d9bf3515c8349653d7d7474756f14df61dd3b3de52badf2"
        },
        "downloads": -1,
        "filename": "xenon-view-sdk-0.0.19.tar.gz",
        "has_sig": false,
        "md5_digest": "3602d360ab2b655d29331f045c030025",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 5530,
        "upload_time": "2022-08-05T04:48:17",
        "upload_time_iso_8601": "2022-08-05T04:48:17.875907Z",
        "url": "https://files.pythonhosted.org/packages/74/bd/796c548a1fb3466e91350bd81f088accff03378f9bcad25f392ff7038281/xenon-view-sdk-0.0.19.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cffde794901787bbaba5803ee33c27958c471301217437d8efd23ede7a0b1d82",
          "md5": "a4eb580a1e4f3fa152e4412900c65fb3",
          "sha256": "466de7fc9b6bce9c2216d17e5a46767f3e3b00fac185c07db982cb40a302ddda"
        },
        "downloads": -1,
        "filename": "xenon_view_sdk-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4eb580a1e4f3fa152e4412900c65fb3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 18936,
        "upload_time": "2022-11-18T18:37:22",
        "upload_time_iso_8601": "2022-11-18T18:37:22.091269Z",
        "url": "https://files.pythonhosted.org/packages/cf/fd/e794901787bbaba5803ee33c27958c471301217437d8efd23ede7a0b1d82/xenon_view_sdk-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b7b34748a295b70f0da42b1e3d688e473610113af42f50b944b6ba273411a38",
          "md5": "40814fe7adc8c23fff15b28a1d40fbbb",
          "sha256": "2eac12a6c98187f9800e8a244c84a5d995ecf56145863d347e36aed75953f343"
        },
        "downloads": -1,
        "filename": "xenon-view-sdk-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "40814fe7adc8c23fff15b28a1d40fbbb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 26938,
        "upload_time": "2022-11-18T18:37:24",
        "upload_time_iso_8601": "2022-11-18T18:37:24.787611Z",
        "url": "https://files.pythonhosted.org/packages/1b/7b/34748a295b70f0da42b1e3d688e473610113af42f50b944b6ba273411a38/xenon-view-sdk-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "181fcd62c8d18775043fd14883be372df7c3a4ef39ff81ff3dda7708742165ed",
          "md5": "f3f90bbb2b397b061b6855564218ce0b",
          "sha256": "994c7a0e751d204896234be79d028bc852dfbd33d532a4f5ccff0316f485dab2"
        },
        "downloads": -1,
        "filename": "xenon_view_sdk-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f3f90bbb2b397b061b6855564218ce0b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 19304,
        "upload_time": "2022-12-20T05:12:42",
        "upload_time_iso_8601": "2022-12-20T05:12:42.356593Z",
        "url": "https://files.pythonhosted.org/packages/18/1f/cd62c8d18775043fd14883be372df7c3a4ef39ff81ff3dda7708742165ed/xenon_view_sdk-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06836f96958972e4ece85e2fd0908735b8ab8a2fc00d280e75664c7eb50f8b32",
          "md5": "6219e0c2189df6785cfa5786fd082694",
          "sha256": "d471e26d996c8fa8b8e94f1d683627ceb31de9da54bced256d3be7019dcd6da3"
        },
        "downloads": -1,
        "filename": "xenon-view-sdk-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6219e0c2189df6785cfa5786fd082694",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 27192,
        "upload_time": "2022-12-20T05:12:44",
        "upload_time_iso_8601": "2022-12-20T05:12:44.789570Z",
        "url": "https://files.pythonhosted.org/packages/06/83/6f96958972e4ece85e2fd0908735b8ab8a2fc00d280e75664c7eb50f8b32/xenon-view-sdk-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7fb7a0e5fac84c8f649f33e42b52ffacdfbeed6b8441070b7dbd6ea450509f0",
          "md5": "7a55574dc1dca408ced9bba58e7cbd0e",
          "sha256": "6083973430df7cc990873963fa4fe76ba46c1ec24254069a97cb0766490de56c"
        },
        "downloads": -1,
        "filename": "xenon_view_sdk-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7a55574dc1dca408ced9bba58e7cbd0e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 19308,
        "upload_time": "2022-12-29T07:43:14",
        "upload_time_iso_8601": "2022-12-29T07:43:14.060853Z",
        "url": "https://files.pythonhosted.org/packages/e7/fb/7a0e5fac84c8f649f33e42b52ffacdfbeed6b8441070b7dbd6ea450509f0/xenon_view_sdk-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af2c340e461f4c28bc8832b641819bc95c630766c54ddd572678c094d0ed5547",
          "md5": "7f80d30d34baaacb6f86399873b2acbd",
          "sha256": "0f335657af2083769a966cfbcd47231fc69bb97fc1f46bf1150af6db117a8283"
        },
        "downloads": -1,
        "filename": "xenon-view-sdk-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7f80d30d34baaacb6f86399873b2acbd",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 27223,
        "upload_time": "2022-12-29T07:43:16",
        "upload_time_iso_8601": "2022-12-29T07:43:16.389883Z",
        "url": "https://files.pythonhosted.org/packages/af/2c/340e461f4c28bc8832b641819bc95c630766c54ddd572678c094d0ed5547/xenon-view-sdk-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf8d4330b62bb49f5bd6553a5481841e861df3fe8f2d2ffdd1111506bb65fb17",
          "md5": "fcebe0e86cb8f36d9f60dadd1153cfc5",
          "sha256": "c637a390f454f15def2752b0fc7382d7fe8239efc9174f0c416f729460b8b785"
        },
        "downloads": -1,
        "filename": "xenon_view_sdk-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fcebe0e86cb8f36d9f60dadd1153cfc5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 20186,
        "upload_time": "2023-01-05T15:56:13",
        "upload_time_iso_8601": "2023-01-05T15:56:13.314867Z",
        "url": "https://files.pythonhosted.org/packages/cf/8d/4330b62bb49f5bd6553a5481841e861df3fe8f2d2ffdd1111506bb65fb17/xenon_view_sdk-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a480f819c5f1d005f7dbc0ea1f1c5a0b6fc9c5ee46602bd9f9ef79f2211a03da",
          "md5": "131a24f0a8f55153e589cdae124d5e11",
          "sha256": "f7d6289d627cbe90fcd8b47459ab4f3c0b51508c1d272f232c8ed04378b06427"
        },
        "downloads": -1,
        "filename": "xenon-view-sdk-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "131a24f0a8f55153e589cdae124d5e11",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 30040,
        "upload_time": "2023-01-05T15:56:15",
        "upload_time_iso_8601": "2023-01-05T15:56:15.418502Z",
        "url": "https://files.pythonhosted.org/packages/a4/80/f819c5f1d005f7dbc0ea1f1c5a0b6fc9c5ee46602bd9f9ef79f2211a03da/xenon-view-sdk-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c186ce1a78fe8b217d95a9d0fb7b2ca0407dd66564c9a43ce93f1a4bdf3ffa4a",
          "md5": "262e21a76268b65579637bb70db2c9d2",
          "sha256": "391fcc21a91103d17383b0b24b93ba767c5fe9e747d80555bcab49af25c837f3"
        },
        "downloads": -1,
        "filename": "xenon_view_sdk-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "262e21a76268b65579637bb70db2c9d2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 20269,
        "upload_time": "2023-02-21T05:09:58",
        "upload_time_iso_8601": "2023-02-21T05:09:58.107923Z",
        "url": "https://files.pythonhosted.org/packages/c1/86/ce1a78fe8b217d95a9d0fb7b2ca0407dd66564c9a43ce93f1a4bdf3ffa4a/xenon_view_sdk-0.1.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3eb050e193febe4e73d220941f85ffd0ecef1ccf0321acd752729445870e59a",
          "md5": "d222309753c552fee242a1fa6aa2a120",
          "sha256": "e2ac3c52b147a5bccd3b0cc49cd2330b91ebcf6956cb3f58a96b83e8b75acbf4"
        },
        "downloads": -1,
        "filename": "xenon-view-sdk-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d222309753c552fee242a1fa6aa2a120",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 30287,
        "upload_time": "2023-02-21T05:10:00",
        "upload_time_iso_8601": "2023-02-21T05:10:00.575463Z",
        "url": "https://files.pythonhosted.org/packages/d3/eb/050e193febe4e73d220941f85ffd0ecef1ccf0321acd752729445870e59a/xenon-view-sdk-0.1.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c186ce1a78fe8b217d95a9d0fb7b2ca0407dd66564c9a43ce93f1a4bdf3ffa4a",
        "md5": "262e21a76268b65579637bb70db2c9d2",
        "sha256": "391fcc21a91103d17383b0b24b93ba767c5fe9e747d80555bcab49af25c837f3"
      },
      "downloads": -1,
      "filename": "xenon_view_sdk-0.1.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "262e21a76268b65579637bb70db2c9d2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 20269,
      "upload_time": "2023-02-21T05:09:58",
      "upload_time_iso_8601": "2023-02-21T05:09:58.107923Z",
      "url": "https://files.pythonhosted.org/packages/c1/86/ce1a78fe8b217d95a9d0fb7b2ca0407dd66564c9a43ce93f1a4bdf3ffa4a/xenon_view_sdk-0.1.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d3eb050e193febe4e73d220941f85ffd0ecef1ccf0321acd752729445870e59a",
        "md5": "d222309753c552fee242a1fa6aa2a120",
        "sha256": "e2ac3c52b147a5bccd3b0cc49cd2330b91ebcf6956cb3f58a96b83e8b75acbf4"
      },
      "downloads": -1,
      "filename": "xenon-view-sdk-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "d222309753c552fee242a1fa6aa2a120",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 30287,
      "upload_time": "2023-02-21T05:10:00",
      "upload_time_iso_8601": "2023-02-21T05:10:00.575463Z",
      "url": "https://files.pythonhosted.org/packages/d3/eb/050e193febe4e73d220941f85ffd0ecef1ccf0321acd752729445870e59a/xenon-view-sdk-0.1.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}