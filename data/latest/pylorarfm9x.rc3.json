{
  "info": {
    "author": "Edwin Peters",
    "author_email": "edwin.g.w.peters@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries",
      "Topic :: System :: Hardware"
    ],
    "description": "# pyLoraRFM9x\n\nThis project is a fork of [raspi-lora](https://gitlab.com/the-plant/raspi-lora) project.\n\npyLoraRFM9x is a interrupt based Python library for using HopeRF RFM95/96/97/98 LoRa radios with a Raspberry Pi. The design was inspired by the [RadioHead](http://www.airspayce.com/mikem/arduino/RadioHead) project that is popular on Arduino-based platforms. Several handy features offered by RadioHead are present here, including encryption, addressing, optional acknowledgments and retransmission. The motivation of this project is to allow Raspberry Pis to communicate with devices using the [RadioHead RF95](http://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html) driver.\n\nThis fork fixes bugs in the interrupt handling, and supports both acknowledged and unacknowledged transfers with the use of flags in the packet header.\n\n# Usage\n### Installation\nRequires Python >= 3.5. [RPi.GPIO](https://pypi.python.org/pypi/RPi.GPIO) and [spidev](https://pypi.python.org/pypi/spidev) will be installed as requirements\n```bash\npip install --upgrade pyLoraRFM9x\n```\n\n### Wiring\nExample wiring for the [HopeRF RFM95W](https://www.hoperf.com/modules/lora/RFM95.html) and the Raspberry Pi:\n\n| RFM module pin    | Raspberry Pi GPIO pin|\n|:-----------------:|:--------------------:|\n| MISO              | MISO                 |\n| MOSI              | MOSI                 |\n| NSS/CS            | CE1                  |\n| CLK               | SCK                  |\n| RESET             | GPIO 25              |\n| DIO0              | GPIO 5               |   \n| 3.3V              | 3.3V                 |\n| GND               | GND                  |\n\nRemember to connect an antenna or a quarter wavelength wire to the RFM modules ANT pin.\n\n### Getting Started\nFirst ensure that SPI is enabled on your Raspberry Pi:\n```bash\nsudo raspi-config\n```\nGo to **5 Interfacing Options**, select **P4 SPI** and select **Yes** to enable.\n\nReboot and verify that you see two devices when writing\n```bash\nls -l /dev/spidev*\n```\nin the terminal.\n\nNext, here is a quick example that sets things up and sends a message:\n```python\nfrom pyLoraRFM9x import LoRa, ModemConfig\n\n# This is our callback function that runs when a message is received\ndef on_recv(payload):\n    print(\"From:\", payload.header_from)\n    print(\"Received:\", payload.message)\n    print(\"RSSI: {}; SNR: {}\".format(payload.rssi, payload.snr))\n\n# Use chip select 1. GPIO pin 5 will be used for interrupts and set reset pin to 25\n# The address of this device will be set to 2\nlora = LoRa(1, 5, 2, reset_pin = 25, modem_config=ModemConfig.Bw125Cr45Sf128, tx_power=14, acks=True)\nlora.on_recv = on_recv\n\n# Send a message to a recipient device with address 10\n# Retry sending the message twice if we don't get an  acknowledgment from the recipient\nmessage = \"Hello there!\"\nstatus = lora.send_to_wait(message, 10, retries=2)\nif status is True:\n    print(\"Message sent!\")\nelse:\n    print(\"No acknowledgment from recipient\")\n```\n\n### Encryption\nIf you'd like to send and receive encrypted packets, you'll need to install the [PyCrypto](https://www.dlitz.net/software/pycrypto/) package. If you're working with devices running RadioHead with RHEncryptedDriver, I recommend using the AES cipher.\n```bash\npip install pycrypto\n```\n\nand in your code:\n```python\nfrom Crypto.Cipher import AES\ncrypto = AES.new(\"my-secret-encryption-key\")\n```\nthen pass in `crypto` when instantiating the `LoRa` object:\n```python\nlora = LoRa(0, 17, 2, crypto=crypto)\n```\n\n### Configuration\n##### Initialization\n```python\nLoRa(channel, interrupt, this_address, reset_pin=reset_pin, freq=915, tx_power=14,\n      modem_config=ModemConfig.Bw125Cr45Sf128, acks=False, crypto=None)\n```\n**`channel`** SPI channel to use (either 0 or 1, if your LoRa radio if connected to CE0 or CE1, respectively)\n\n**`interrupt`** GPIO pin (BCM-style numbering) to use for the interrupt\n\n**`this_address`** The address number (0-254) your device will use when sending and receiving packets.\n\n**`reset_pin`** The pin that resets the module. Defaults to None\n\n**`freq`** Frequency used by your LoRa radio. Defaults to 915Mhz\n\n**`tx_power`** Transmission power level from 5 to 23. Keep this as low as possible. Defaults to 14\n\n**`model_config`** Modem configuration. See [RadioHead docs](http://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html#ab9605810c11c025758ea91b2813666e3). Default to Bw125Cr45Sf128.\n\n**`acks`** If `True`, send an acknowledgment packet when a message is received and wait for an acknowledgment when transmitting a message. This is equivalent to using RadioHead's RHReliableDatagram\n\n**`crypto`** An instance of [PyCrypto Cipher.AES](https://www.dlitz.net/software/pycrypto/api/current/Crypto.Cipher.AES-module.html) (see above example)\n\n\n##### Other options:\nA `LoRa` instance also has the following attributes that can be changed:\n- **cad_timeout** Timeout for channel activity detection. Default is 1 second\n- **retry_timeout** Time to wait for an acknowledgment before attempting a retry. Defaults to 0.5 seconds\n- **wait_packet_sent_timeout** Timeout for waiting for a packet to transmit. Default is 0.5 seconds\n\n##### Methods\n###### `send_to_wait(data, header_to, header_flags=0)`\nSend a message and block until an acknowledgment is received or a timeout occurs. Returns `True` if successful\n- ``data`` Your message. Can be a string or byte string\n- ``header_to`` Address of recipient (0-255). If address is 255, the message will be broadcast to all devices and **`send_to_wait`** will return `True` without waiting for acknowledgments\n- ``header_flags`` Bitmask that can contain flags specific to your application\n\n###### `send(data, header_to, header_id=0, header_flags=0)`\nSimilar to `send_to_wait` but does not block or wait for acknowledgments and will always return `True`\n- ``data`` Your message. Can be a string or byte string\n- ``header_id`` Unique ID of message (0-255)\n- ``header_to`` Address of recipient (0-255). If address is 255, the message will be broadcast to all devices\n- ``header_flags`` Bitmask that can contain flags specific to your application\n\n###### `set_mode_rx()`\nSet radio to RX continuous mode\n\n###### `set_mode_tx()`\nSet radio to TX mode\n\n###### `set_mode_idle()`\nSet radio to idle (disabling receiving or transmitting)\n\n###### `sleep()`\nSet radio to low-power sleep mode\n\n###### `wait_packet_sent()`\nBlocks until a packet has finished transmitting. Returns `False` if a timeout occurs\n\n###### `close()`\nCleans up GPIO pins and closes the SPI connection. This should be called when your program exits.\n\n\n##### Callbacks\n`on_recv(payload)` \nCallback function that runs when a message is received\n`payload` has the following attributes:\n`header_from`, `header_to`, `header_id`, `header_flags`, `message`, `rssi`, `snr`\n\n# Resources\n[RadioHead](http://www.airspayce.com/mikem/arduino/RadioHead/) - The RadioHead project. Very useful source of information on working with LoRa radios.\n\n[Forked version of RadioHead for Raspberry Pi](https://github.com/hallard/RadioHead) - A fork of the original RadioHead project that better accommodates the Raspberry Pi. Currently is a few years out of date.\n\n[pySX127x](https://github.com/mayeranalytics/pySX127x) - Another Python LoRa library that allows for a bit more configuration. \n\n[Adafruit CircuitPython module for the RFM95/6/7/8](https://github.com/adafruit/Adafruit_CircuitPython_RFM9x) - LoRa library for CircuitPython\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mugpahug/pyLoraRFM9x",
    "keywords": "lora rfm95 rfm9x rfm96 rfm97 rfm98 hardware raspberrypi",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyLoraRFM9x",
    "package_url": "https://pypi.org/project/pyLoraRFM9x/",
    "platform": "",
    "project_url": "https://pypi.org/project/pyLoraRFM9x/",
    "project_urls": {
      "Homepage": "https://github.com/mugpahug/pyLoraRFM9x"
    },
    "release_url": "https://pypi.org/project/pyLoraRFM9x/0.9.2/",
    "requires_dist": [
      "RPi.GPIO",
      "spidev"
    ],
    "requires_python": "",
    "summary": "Interrupt driven LoRa RFM9x library for Raspberry Pi inspired by RadioHead",
    "version": "0.9.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7904599,
  "releases": {
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17f5976a6ed7e525cb6372771fee13f8a95fab89b525b27c164842576246d379",
          "md5": "d193189a78083e8caf3deae53f612bf7",
          "sha256": "5cbb21fea1fe4a16611ba6d79784d63499170bd114ea30b7a862973a2a56d3aa"
        },
        "downloads": -1,
        "filename": "pyLoraRFM9x-0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d193189a78083e8caf3deae53f612bf7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9366,
        "upload_time": "2020-08-05T04:19:09",
        "upload_time_iso_8601": "2020-08-05T04:19:09.300183Z",
        "url": "https://files.pythonhosted.org/packages/17/f5/976a6ed7e525cb6372771fee13f8a95fab89b525b27c164842576246d379/pyLoraRFM9x-0.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce8de8b3793b7afe344f332c714e10a80bc98cfe17f5faf87e0234ac07b76d23",
          "md5": "faf79f3c5a90854811da022b691c27f8",
          "sha256": "fb79c2c672e9c06eb7d8d82e769885e92cd02c35717d937538fb70071fe8524e"
        },
        "downloads": -1,
        "filename": "pyLoraRFM9x-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "faf79f3c5a90854811da022b691c27f8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9528,
        "upload_time": "2020-08-05T04:19:11",
        "upload_time_iso_8601": "2020-08-05T04:19:11.851879Z",
        "url": "https://files.pythonhosted.org/packages/ce/8d/e8b3793b7afe344f332c714e10a80bc98cfe17f5faf87e0234ac07b76d23/pyLoraRFM9x-0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0d46388ec2904c498b3ca8b54f9fda2e8d0b883bcafd0bfef05c976eba49fc3",
          "md5": "4068ab42f6135fea7e27e16b8c64b7a3",
          "sha256": "a1c92182c6449918a2798198b2597ae1b868ec53c0962108cda7574bcd91d918"
        },
        "downloads": -1,
        "filename": "pyLoraRFM9x-0.9.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4068ab42f6135fea7e27e16b8c64b7a3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9385,
        "upload_time": "2020-08-05T04:25:50",
        "upload_time_iso_8601": "2020-08-05T04:25:50.205737Z",
        "url": "https://files.pythonhosted.org/packages/d0/d4/6388ec2904c498b3ca8b54f9fda2e8d0b883bcafd0bfef05c976eba49fc3/pyLoraRFM9x-0.9.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61d2504df1c5b1eebebb64a79e2ec1617a9ce61a1d2ea005f56c33ab1b024818",
          "md5": "ce0e97c9a6d5e4c3cb2a5c63e98f29e3",
          "sha256": "4065b142ccf9acfc526b514f00ee3aac17fd162c505bf22bc34903e505fb3d65"
        },
        "downloads": -1,
        "filename": "pyLoraRFM9x-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce0e97c9a6d5e4c3cb2a5c63e98f29e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9550,
        "upload_time": "2020-08-05T04:25:51",
        "upload_time_iso_8601": "2020-08-05T04:25:51.729203Z",
        "url": "https://files.pythonhosted.org/packages/61/d2/504df1c5b1eebebb64a79e2ec1617a9ce61a1d2ea005f56c33ab1b024818/pyLoraRFM9x-0.9.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "db87da92d31b1fb6a4d719686070486838aac87b4d8ff925716cd280e7e1034b",
          "md5": "f1155e6594316a968465f06255a63826",
          "sha256": "91eaf4e3616b49d08f84b998f4c0d2df6788031c820108b812094648ad793fa4"
        },
        "downloads": -1,
        "filename": "pyLoraRFM9x-0.9.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1155e6594316a968465f06255a63826",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9384,
        "upload_time": "2020-08-07T02:29:55",
        "upload_time_iso_8601": "2020-08-07T02:29:55.958248Z",
        "url": "https://files.pythonhosted.org/packages/db/87/da92d31b1fb6a4d719686070486838aac87b4d8ff925716cd280e7e1034b/pyLoraRFM9x-0.9.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3d655ff58e099077d058d0d678d886a9b73b7bf9fa89179b5221092ec074e27",
          "md5": "11c711192c8fdc1d9ae69badec997165",
          "sha256": "d6abf31c930dfbb8ff2d306d9ad6b19d7610da5e1b04d3e9c288b41738b6822a"
        },
        "downloads": -1,
        "filename": "pyLoraRFM9x-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "11c711192c8fdc1d9ae69badec997165",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9523,
        "upload_time": "2020-08-07T02:29:57",
        "upload_time_iso_8601": "2020-08-07T02:29:57.481966Z",
        "url": "https://files.pythonhosted.org/packages/b3/d6/55ff58e099077d058d0d678d886a9b73b7bf9fa89179b5221092ec074e27/pyLoraRFM9x-0.9.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "db87da92d31b1fb6a4d719686070486838aac87b4d8ff925716cd280e7e1034b",
        "md5": "f1155e6594316a968465f06255a63826",
        "sha256": "91eaf4e3616b49d08f84b998f4c0d2df6788031c820108b812094648ad793fa4"
      },
      "downloads": -1,
      "filename": "pyLoraRFM9x-0.9.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f1155e6594316a968465f06255a63826",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9384,
      "upload_time": "2020-08-07T02:29:55",
      "upload_time_iso_8601": "2020-08-07T02:29:55.958248Z",
      "url": "https://files.pythonhosted.org/packages/db/87/da92d31b1fb6a4d719686070486838aac87b4d8ff925716cd280e7e1034b/pyLoraRFM9x-0.9.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b3d655ff58e099077d058d0d678d886a9b73b7bf9fa89179b5221092ec074e27",
        "md5": "11c711192c8fdc1d9ae69badec997165",
        "sha256": "d6abf31c930dfbb8ff2d306d9ad6b19d7610da5e1b04d3e9c288b41738b6822a"
      },
      "downloads": -1,
      "filename": "pyLoraRFM9x-0.9.2.tar.gz",
      "has_sig": false,
      "md5_digest": "11c711192c8fdc1d9ae69badec997165",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9523,
      "upload_time": "2020-08-07T02:29:57",
      "upload_time_iso_8601": "2020-08-07T02:29:57.481966Z",
      "url": "https://files.pythonhosted.org/packages/b3/d6/55ff58e099077d058d0d678d886a9b73b7bf9fa89179b5221092ec074e27/pyLoraRFM9x-0.9.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}