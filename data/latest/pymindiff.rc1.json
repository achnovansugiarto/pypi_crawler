{
  "info": {
    "author": "ClÃ©ment Lombard",
    "author_email": "clementlombard@orange.fr",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pymindiff\n\npymindiff is a Python 3 package that can be used to assign elements to a\nspecified number of groups and minimize differences between created\ngroups.\n\nThis package is inspired (but not a direct portage !) by the equivalent package in R : https://github.com/m-Py/minDiff.\n\n## Installation\n\n## Usage\n\n``` \nfrom pymindiff.groups import create_groups\n\nres = create_groups(data, criteria=['example'], n_groups=2, n_iter = 100, equalize = [np.mean])\n```\n\nTo reproduce the examples found in this documentation, use the Tips dataset\n```\nimport pandas as pd\n\ndata = pd.read_csv(\n    \"https://raw.githubusercontent.com/pandas-dev/pandas/master/doc/data/tips.csv\",\n)\n```\n\nThe `tips` dataset contains study data regarding the amount tipped in restaurant depending on different factors.\nIn this data, each row represents a customer, and information regarding this customer\n and the amount tipped and billed by the restaurant.\n\nImagine you wish to assign customers to three different categories and want to create a similar \ngroups of customers in each category. As a first step, we might want to match average customer tip values.\n\nTo do so, we pass our data set to the function `create_groups` and\nspecify which variable should be made equal in how many sets.\n\n```\nresult = create_groups(data, criteria=['tip'], n_groups=3, n_iter=100)\n```\n\nBy passing the column `tip` to the argument `criteria` we inform\n`create_groups` that tip is a continuous variable, for which we want to\nminimize the differences between groups. `create_groups` returns a\n`pandas.DataFrame` that is saved into the object `result`. `result` is actually\nthe same as the input data, but it has one additional column:\n`groups` - this is the group assignment variable that was created.\n\nLet's see the result : \n\n```\nresult.groupby('groups').tip.mean()\n\n> groups\n> 0    2.992195\n> 1    2.987531\n> 2    3.015185\n> Name: tip, dtype: float64\n```\n\nNot bad ! But how did this work ? In the function call above, we specified another parameter, `n_iter=100` (which is also the default value if we do not specify a value for n_iter). This means that the function randomly assigned all cases (i.e. customers) to three groups 100 times, and returned the most equal group assignment. In the default case, what is considered most equal is the assignment that has the minimum difference in group means; but we can specify different criteria if we want to (see below). By varying the parameter `n_iter` we can increase our chances of creating equal groups. If we conduct 10,000 repetitions, the groups will be very similar with regards to tip. Note that it is possible to pass a data set that has been optimized previously; in this case, the program does not start all over, but only tries find more similar groups than the previous best assignment:\n\n### Considering multiple columns\n\nWe can pass more than one criteria to `create_groups`. Let's imagine we\nalso want customers to have been billed a similar amount:\n\n```\nresult = create_groups(data, criteria=['tip', 'total_bill'], n_groups=3, n_iter=100)\n\nresult.groupby('groups')[['tip', 'total_bill']].mean()\n\n>\ttip\ttotal_bill\n> groups\t\t\n> 0\t3.037927\t19.656220\n> 1\t3.036667\t19.661852\n> 2\t2.919753\t20.041358\n```\n\n### Considering categorical columns\n\nWe might also want to make groups such that there is an even number of smokers in each group. Using the `criteria_nominal` and `nominal_tolerance` arguments, we can specify which categorical columns should be used, and what is the maximal tolerated frequency deviation between groups for each categorical variable.\n\nFor instance, if we choose to create two groups with a similar number of smokers we could use\n\n```\nresult = create_groups(data, criteria_nominal=['smoker'], nominal_tolerance=[1], n_groups=2, n_iter=100)\n\nresult.groupby(['groups', 'smoker']).size()\n\n> groups  smoker\n> 0       No        76\n>         Yes       46\n> 1       No        75\n>         Yes       47\n> dtype: int64\n```\n\nIf we wish to limit the deviation in frequency of smokers to 3 between groups, we can replace the `nominal_tolerance` with the value `[3]`\n\nThe `nominal_tolerance` argument takes an array of the same length as `criteria_nominal` containing the\n maximal frequency deviation for each column between groups.\n\n### Use more than one categorical column\n\nIt is possible to use multiple categorical columns the same way you would use multiple continuous columns : \n\n```\nresult = create_groups(data, criteria_nominal=['smoker', 'sex'], nominal_tolerance=[4,2],n_groups=2, n_iter=100)\n```\n\n*WARNING* : Sometimes, it is impossible to find a group verifying the tolerance constraint defined,\nespecially when there are numerous categorical columns to consider, prefer starting with large\n`nominal_tolerances` values and reducing it afterwards\n\n### Specifying the equalizing function\n\nYou can specify which equalizing function to use by passing it in the `equalize` argument. The function will \nbe used in a groupby operation and thus must allow for a pd.Serie or np.array input and return a single value.\n\nHere is an example using the numpy.sum function :\n\n```\nresult = create_groups(data, criteria=['tip'], n_groups=3, n_iter=100, equalize=[numpy.sum])\n\nresult.groupby('groups').tip.sum()\n\n> groups\n> 0    244.06\n> 1    244.65\n> 2    242.87\n> Name: tip, dtype: float64\n```\n\n*WARNING* : Be careful of the way the equalizing functions handle missing data, this can cause unexpected behaviors.\n\n### Using more than one function\n\nMaybe you realized that a list is actually passed into the `equalize` argument and not a function, this is because we can pass as many equalizing functions as needed.\n\nImagine we wish to create groups with similar average tip values, but also want to make sure that the standard deviation of tips in each group is similar : \n\n```\nresult = create_groups(data, criteria=['tip'], n_groups=3, n_iter=100, equalize=[numpy.sum, numpy.std])\n```\n\n### Finding the exact solution\n\nUntil then, we minimized the difference between groups by randomly assigning customers to groups and checking which random grouping returned the lowest difference. But it is also possible to compute the exact solution that will try every possible group configuration to find the best one in regard to the criterias to minimize. This can be done by setting the `exact` argument to `True`. As the number of possible assignments grow exponentially with  the number of customers (rows) and groups, this option is reserved for small datasets.\n\nThis code produces the best assignment for the first 20 customers into 2 groups.\n\n```\nresult = create_groups(data.iloc[:20], criteria=['tip'], n_groups=2, exact=True)\nresult.groupby('groups').tip.mean()\n\n> groups\n> 0    2.928\n> 1    2.928\n> Name: tip, dtype: float64\n\nCPU times: user 6.03 s, sys: 127 ms, total: 6.15 s\n```\n\nWARNING : When conducting random group assignments, the number of customers in each group will be made as \nequal as possible, but when `exact=True`, the function will return the best possible assignment without trying to \nequalize the number of customers in each group.\n\n### Scaling the continuous columns\n\nIt is useful to scale the continuous criteria to avoid that columns with large values make up for most \nof the difference between groups. For instance, let's say we wish to minimize the difference between average `tips` and `total_bill` value between groups, tips' unit is in `$`, and total bill's unit is in `cents`.\n\nMost of the time, due to total bill's values being bigger, the difference between the average total bill for each group will be larger than the difference between tips. This causes total bill to be more or less the only criteria considered when minimizing difference between groups. This is the case because of how the difference between groups is calculated (see below). Scaling the columns addresses this problem by scaling the columns before computing the differences between groups. The output data remains the same because the data is descaled before being returned.\n\n## How is the difference value of an assignment calculated ?\n\nThe difference between groups is calculated by summing the maximum difference between groups over all criterias and all equalizing functions. This operation is done only for assignments that respect the given tolerance over categorical columns (`criteria_nominal` and `nominal_tolerance` arguments)\n\n## Feedback / Reporting bugs / Contributing / Get in touch\n\nThis package was done as a side project on my free time, and may receive changes in the future. Any feedback/Bug report/Contribution is appreciated.\nGet in touch at clementlombard@orange.fr or directly on Github.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Simbamoureux/pymindiff",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymindiff",
    "package_url": "https://pypi.org/project/pymindiff/",
    "platform": "",
    "project_url": "https://pypi.org/project/pymindiff/",
    "project_urls": {
      "Homepage": "https://github.com/Simbamoureux/pymindiff"
    },
    "release_url": "https://pypi.org/project/pymindiff/1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "A Python-package to create fair groups having minimal differences",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7204850,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f52493f93766fde3b88e6302d36f365f8616d3394d7cf6df6de2b6aa035aa1b",
          "md5": "72c12bc10c56150d56106448460ecfd7",
          "sha256": "df3f160dc5345fa3095f0e868eb17592ac504d860dba8becc04e0de71e34920d"
        },
        "downloads": -1,
        "filename": "pymindiff-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72c12bc10c56150d56106448460ecfd7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9141,
        "upload_time": "2020-05-09T18:13:33",
        "upload_time_iso_8601": "2020-05-09T18:13:33.036640Z",
        "url": "https://files.pythonhosted.org/packages/5f/52/493f93766fde3b88e6302d36f365f8616d3394d7cf6df6de2b6aa035aa1b/pymindiff-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1a963c606b4ad126a0d94b5713d74c438d7ff29ae077f7e185dd8edc9de169e",
          "md5": "b9b0d872004cd419d5c5286b0027220d",
          "sha256": "ef26639d2d20e17a3cf6ad7ebd1434b5e415e2099c94c8d29a686ad163437077"
        },
        "downloads": -1,
        "filename": "pymindiff-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b9b0d872004cd419d5c5286b0027220d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7804,
        "upload_time": "2020-05-09T18:13:35",
        "upload_time_iso_8601": "2020-05-09T18:13:35.212756Z",
        "url": "https://files.pythonhosted.org/packages/f1/a9/63c606b4ad126a0d94b5713d74c438d7ff29ae077f7e185dd8edc9de169e/pymindiff-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f52493f93766fde3b88e6302d36f365f8616d3394d7cf6df6de2b6aa035aa1b",
        "md5": "72c12bc10c56150d56106448460ecfd7",
        "sha256": "df3f160dc5345fa3095f0e868eb17592ac504d860dba8becc04e0de71e34920d"
      },
      "downloads": -1,
      "filename": "pymindiff-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "72c12bc10c56150d56106448460ecfd7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9141,
      "upload_time": "2020-05-09T18:13:33",
      "upload_time_iso_8601": "2020-05-09T18:13:33.036640Z",
      "url": "https://files.pythonhosted.org/packages/5f/52/493f93766fde3b88e6302d36f365f8616d3394d7cf6df6de2b6aa035aa1b/pymindiff-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1a963c606b4ad126a0d94b5713d74c438d7ff29ae077f7e185dd8edc9de169e",
        "md5": "b9b0d872004cd419d5c5286b0027220d",
        "sha256": "ef26639d2d20e17a3cf6ad7ebd1434b5e415e2099c94c8d29a686ad163437077"
      },
      "downloads": -1,
      "filename": "pymindiff-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b9b0d872004cd419d5c5286b0027220d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7804,
      "upload_time": "2020-05-09T18:13:35",
      "upload_time_iso_8601": "2020-05-09T18:13:35.212756Z",
      "url": "https://files.pythonhosted.org/packages/f1/a9/63c606b4ad126a0d94b5713d74c438d7ff29ae077f7e185dd8edc9de169e/pymindiff-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}