{
  "info": {
    "author": "Vladislav Bakaev <vlad@bakaev.tech>, Dmitry Orlov <me@mosquito.su>",
    "author_email": "vlad@bakaev.tech, me@mosquito.su",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: Russian",
      "Operating System :: MacOS",
      "Operating System :: Microsoft",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": ".. image:: https://raw.githubusercontent.com/aiokitchen/hasql/master/resources/logo.svg\n   :width: 365\n   :height: 265\n\nhasql\n=====\n\n``hasql`` is a library for acquiring actual connections to masters and replicas\nin high available PostgreSQL clusters.\n\n.. image:: https://raw.githubusercontent.com/aiokitchen/hasql/master/resources/diagram.svg\n\nFeatures\n========\n\n* completely asynchronous api\n* automatic detection of the host role in the cluster\n* health-checks for each host and automatic traffic outage for\n  unavailable hosts\n* autodetection of hosts role changes, in case replica\n  host will be promoted to master\n* different policies for load balancing\n* support for ``asyncpg``, ``psycopg3``, ``aiopg``, ``sqlalchemy`` and ``asyncpgsa``\n\n\nUsage\n=====\n\nSome useful examples\n\nCreating connection pool\n************************\n\nWhen acquiring a connection, the connection object of the used driver is\nreturned (``aiopg.connection.Connection`` for **aiopg** and\n``asyncpg.pool.PoolConnectionProxy`` for **asyncpg** and **asyncpgsa**)\n\n\nDatabase URL specirication rules\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Multiple hosts should be passed comma separated\n\n  * multihost example:\n\n    * ``postgresql://db1,db2,db3/``\n  * split result:\n\n    * ``postgresql://db1:5432/``\n    * ``postgresql://db2:5432/``\n    * ``postgresql://db3:5432/``\n* The non-default port for each host might be passed after hostnames. e.g.\n\n  * multihost example:\n\n    * ``postgresql://db1:1234,db2:5678,db3/``\n  * split result:\n\n    * ``postgresql://db1:1234/``\n    * ``postgresql://db2:5678/``\n    * ``postgresql://db3:5432/``\n* The special case for non-default port for all hosts\n\n  * multihost example:\n\n    * ``postgresql://db1,db2,db3:6432/``\n  * split result:\n\n    * ``postgresql://db1:6432/``\n    * ``postgresql://db2:6432/``\n    * ``postgresql://db3:6432/``\n\n\nFor ``aiopg`` or ``aiopg.sa``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**aiopg** must be installed as a requirement.\n\nCode example using ``aiopg``:\n\n.. code-block:: python\n\n    from hasql.aiopg import PoolManager\n\n    hosts = \",\".join([\n        \"master-host:5432\",\n        \"replica-host-1:5432\",\n        \"replica-host-2:5432\",\n    ])\n\n    multihost_dsn = f\"postgresql://user:password@{hosts}/dbname\"\n\n    async def create_pool(dsn) -> PoolManager:\n        pool = PoolManager(multihost_dsn)\n\n        # Waiting for 1 master and 1 replica will be available\n        await pool.ready(masters_count=1, replicas_count=1)\n        return pool\n\nCode example using ``aiopg.sa``:\n\n.. code-block:: python\n\n    from hasql.aiopg_sa import PoolManager\n\n    hosts = \",\".join([\n        \"master-host:5432\",\n        \"replica-host-1:5432\",\n        \"replica-host-2:5432\",\n    ])\n\n    multihost_dsn = f\"postgresql://user:password@{hosts}/dbname\"\n\n    async def create_pool(dsn) -> PoolManager:\n        pool = PoolManager(multihost_dsn)\n\n        # Waiting for 1 master and 1 replica will be available\n        await pool.ready(masters_count=1, replicas_count=1)\n        return pool\n\nFor ``asyncpg``\n~~~~~~~~~~~~~~~\n\n**asyncpg** must be installed as a requirement\n\n.. code-block:: python\n\n    from hasql.asyncpg import PoolManager\n\n    hosts = \",\".join([\n        \"master-host:5432\",\n        \"replica-host-1:5432\",\n        \"replica-host-2:5432\",\n    ])\n\n    multihost_dsn = f\"postgresql://user:password@{hosts}/dbname\"\n\n    async def create_pool(dsn) -> PoolManager:\n        pool = PoolManager(multihost_dsn)\n\n        # Waiting for 1 master and 1 replica will be available\n        await pool.ready(masters_count=1, replicas_count=1)\n        return pool\n\nFor ``sqlalchemy``\n~~~~~~~~~~~~~~~~~~\n\n**sqlalchemy[asyncio] & asyncpg** must be installed as requirements\n\n.. code-block:: python\n\n    from hasql.asyncsqlalchemy import PoolManager\n\n    hosts = \",\".join([\n        \"master-host:5432\",\n        \"replica-host-1:5432\",\n        \"replica-host-2:5432\",\n    ])\n\n    multihost_dsn = f\"postgresql://user:password@{hosts}/dbname\"\n\n\n    async def create_pool(dsn) -> PoolManager:\n        pool = PoolManager(\n            multihost_dsn,\n\n            # Use master for acquire_replica, if no replicas available\n            fallback_master=True,\n\n            # You can pass pool-specific options\n            pool_factory_kwargs=dict(\n                pool_size=10,\n                max_overflow=5\n            )\n        )\n\n        # Waiting for 1 master and 1 replica will be available\n        await pool.ready(masters_count=1, replicas_count=1)\n        return pool\n\n\nFor ``asyncpgsa``\n~~~~~~~~~~~~~~~~~\n\n**asyncpgsa** must be installed as a requirement\n\n.. code-block:: python\n\n    from hasql.asyncpgsa import PoolManager\n\n    hosts = \",\".join([\n        \"master-host:5432\",\n        \"replica-host-1:5432\",\n        \"replica-host-2:5432\",\n    ])\n\n    multihost_dsn = f\"postgresql://user:password@{hosts}/dbname\"\n\n    async def create_pool(dsn) -> PoolManager:\n        pool = PoolManager(multihost_dsn)\n\n        # Waiting for 1 master and 1 replica will be available\n        await asyncio.gather(\n            pool.wait_masters_ready(1),\n            pool.wait_replicas_ready(1)\n        )\n        return pool\n\n\nFor ``psycopg3``\n~~~~~~~~~~~~~~~~\n\n**psycopg3** must be installed as a requirement (package name is `psycopg`)\n\n.. code-block:: python\n\n    from hasql.psycopg3 import PoolManager\n\n\n    hosts = \",\".join([\n        \"master-host:5432\",\n        \"replica-host-1:5432\",\n        \"replica-host-2:5432\",\n    ])\n    multihost_dsn = f\"postgresql://user:password@{hosts}/dbname\"\n\n    async def create_pool(dsn) -> PoolManager:\n        pool = PoolManager(multihost_dsn)\n\n        # Waiting for 1 master and 1 replica will be available\n        await pool.ready(masters_count=1, replicas_count=1)\n        return pool\n\n\nAcquiring connections\n*********************\n\nConnections should be acquired with async context manager:\n\nAcquiring master connection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    async def do_something():\n        pool = await create_pool(multihost_dsn)\n        async with pool.acquire(read_only=False) as connection:\n            ...\n\nor\n\n.. code-block:: python\n\n    async def do_something():\n        pool = await create_pool(multihost_dsn)\n        async with pool.acquire_master() as connection:\n            ...\n\nAcquiring replica connection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    async def do_something():\n        pool = await create_pool(multihost_dsn)\n        async with pool.acquire(read_only=True) as connection:\n            ...\n\nor\n\n.. code-block:: python\n\n    async def do_something():\n        pool = await create_pool(multihost_dsn)\n        async with pool.acquire_replica() as connection:\n            ...\n\nWithout context manager (really not recommended)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    async def do_something():\n        pool = await create_pool(multihost_dsn)\n        connection = await pool.acquire(read_only=False)\n        await pool.release(connection)\n\nor more useful\n\n.. code-block:: python\n\n    async def do_something():\n        pool = await create_pool(multihost_dsn)\n        try:\n            connection = await pool.acquire(read_only=False)\n        finally:\n            await pool.release(connection)\n\nHow it works?\n=============\n\nFor each host from dsn string, a connection pool is created. From each pool one\nconnection is reserved, which is used to check the availability of the host and\nits role. The minimum and maximum number of connections in the pool increases\nby 1 (to reserve a system connection).\n\nFor each pool a background task is created, in which the host availability and\nits role (master or replica) is checked once every `refresh_delay` second.\n\nWhen switching hosts roles, hasql detects this with a slight delay.\n\nFor PostgreSQL, when switching the master, all connections to all hosts are\nbroken (the details of implementing PostgreSQL).\n\nIf there are no available hosts, the methods acquire(), acquire_master(), and\nacquire_replica() wait until the host with the desired role startup.\n\nOverview\n========\n\n* hasql.base.BasePoolManager\n    * ``__init__(dsn, acquire_timeout, refresh_delay, refresh_timeout, fallback_master, master_as_replica_weight, balancer_policy, pool_factory_kwargs)``:\n\n        * ``dsn: str`` - Connection string used by the connection.\n\n        * ``acquire_timeout: Union[int, float]`` - Default timeout (in seconds)\n          for connection operations. 1 sec by default.\n\n        * ``refresh_delay: Union[int, float]`` - Delay time (in seconds)\n          between host polls. 1 sec by default.\n\n        * ``refresh_timeout: Union[int, float]`` - Timeout (in seconds) for\n          trying to connect and get the host role. 1 sec by default.\n\n        * ``fallback_master: bool`` - Use connections from master if replicas\n          are missing. False by default.\n\n        * ``master_as_replica_weight: float`` - Probability of using the master\n          as a replica (from 0. to 1.; 0. - master is not used as a replica;\n          1. - master can be used as a replica).\n\n        * ``balancer_policy: type`` - Connection pool balancing policy\n          (`hasql.balancer_policy.GreedyBalancerPolicy`,\n          `hasql.balancer_policy.RandomWeightedBalancerPolicy` or\n          `hasql.balancer_policy.RoundRobinBalancerPolicy`).\n\n        * ``stopwatch_window_size: int`` - Window size for calculating the\n          median response time of each pool.\n\n        * ``pool_factory_kwargs: Optional[dict]`` - Connection pool creation\n          parameters that are passed to pool factory.\n\n    * ``get_pool_freesize(pool)``\n      Getting the number of free connections in the connection pool. Returns\n      number of free connections in the connection pool.\n\n        * ``pool`` - Pool for which you to be getting the number of\n          free connections.\n\n    * coroutine async-with ``acquire_from_pool(pool, **kwargs)``\n      Acquire a connection from pool. Returns connection to the database.\n\n        * ``pool`` - Pool from which you to be acquiring the connection.\n\n        * ``kwargs`` - Arguments to be passed to the pool acquire() method.\n\n    * coroutine ``release_to_pool(connection, pool, **kwargs)``\n      A coroutine that reverts connection conn to pool for future recycling.\n\n        * ``connection`` - Connection to be released.\n\n        * ``pool`` - Pool to which you are returning the connection.\n\n        * ``kwargs`` - Arguments to be passed to the pool release() method.\n\n    * ``is_connection_closed(connection)``\n      Returns True if connection is closed.\n\n    * ``get_last_response_time(pool)``\n      Returns database host last response time (in seconds).\n\n    * coroutine async-with\n      ``acquire(read_only, fallback_master, timeout, **kwargs)``\n      Acquire a connection from free pool.\n\n        * ``readonly: bool`` - ``True`` if need return connection to replica,\n          ``False`` - to master. False by default.\n\n        * ``fallback_master: Optional[bool]`` - Use connections from master\n          if replicas are missing. If None, then the default value is used.\n\n        * ``master_as_replica_weight: float`` - Probability of using the master\n          as a replica (from 0. to 1.; 0. - master is not used as a replica;\n          1. - master can be used as a replica).\n\n        * ``timeout: Union[int, float]`` - Timeout (in seconds) for connection\n          operations.\n\n        * ``kwargs`` - Arguments to be passed to the pool acquire() method.\n\n    * coroutine async-with ``acquire_master(timeout, **kwargs)``\n      Acquire a connection from free master pool.\n      Equivalent ``acquire(read_only=False)``\n\n        * ``timeout: Union[int, float]`` - Timeout (in seconds) for\n          connection operations.\n\n        * ``kwargs`` - Arguments to be passed to the pool acquire() method.\n\n    * coroutine async-with\n      ``acquire_replica(fallback_master, timeout, **kwargs)``\n      Acquire a connection from free master pool.\n      Equivalent ``acquire(read_only=True)``\n\n        * ``fallback_master: Optional[bool]`` - Use connections from master if\n          replicas are missing. If None, then the default value is used.\n\n        * ``master_as_replica_weight: float`` - Probability of using the master\n          as a replica (from 0. to 1.; 0. - master is not used as a replica;\n          1. - master can be used as a replica).\n\n        * ``timeout: Union[int, float]`` - Timeout (in seconds) for connection\n          operations.\n\n        * ``kwargs`` - Arguments to be passed to the pool acquire() method.\n\n    * coroutine ``release(connection, **kwargs)``\n      A coroutine that reverts connection conn to pool for future recycling.\n\n        * ``connection`` - Connection to be released.\n        * ``kwargs`` - Arguments to be passed to the pool release() method.\n\n    * coroutine ``close()``\n      Close pool. Mark all pool connections to be closed on getting back to\n      pool. Closed pool doesn’t allow to acquire new connections.\n\n    * coroutine ``terminate()``\n      Terminate pool. Close pool with instantly closing all acquired\n      connections also.\n\n    * coroutine ``wait_next_pool_check(timeout)``\n      Waiting for the next step to update host roles.\n\n    * coroutine ``ready(masters_count, replicas_count, timeout)``\n      Waiting for a connection to the database hosts. If masters_count is\n      ``None`` and replicas_count is None, then connection to all hosts\n      is expected.\n\n        * ``masters_count: Optional[int]`` - Minimum number of master hosts.\n          ``None`` by default.\n\n        * ``replicas_count: Optional[int]`` - Minimum number of replica hosts.\n          ``None`` by default.\n\n        * ``timeout: Union[int, float]`` - Timeout for database connections.\n          10 seconds by default.\n\n    * coroutine ``wait_all_ready()```\n      Waiting to connect to all database hosts.\n\n    * coroutine ``wait_masters_ready(masters_count)``\n      Waiting for connection to the specified number of\n      database master servers.\n\n        * ``masters_count: int`` - Minimum number of master hosts.\n\n    * coroutine `wait_replicas_ready(replicas_count)`\n      Waiting for connection to the specified number of\n      database replica servers.\n\n        * ``replicas_count: int`` - Minimum number of replica hosts.\n\n    * coroutine ``get_pool(read_only, fallback_master)``\n      Returns connection pool with the maximum number of free connections.\n\n        * ``readonly: bool`` - True if need return replica pool,\n          ``False`` - master pool.\n\n        * ``fallback_master: Optional[bool]`` - Returns master pool if\n          replicas are missing. False by default.\n\n    * coroutine ``get_master_pools()``\n      Returns a list of all master pools.\n\n    * coroutine ``get_replica_pools(fallback_master)``\n      Returns a list of all replica pools.\n\n        * ``fallback_master: Optional[bool]`` - Returns a list of all master\n          pools if replicas are missing. False by default.\n\n    * ``pool_is_master(pool)``\n      Returns True if connection is master.\n\n    * ``pool_is_replica(pool)``\n      Returns True if connection is replica.\n\n    * ``register_connection(connection, pool)``\n      Match connection with the pool from which it was taken.\n      It is necessary for the release() method to work correctly.\n\n* ``hasql.aiopg.PoolManager``\n\n* ``hasql.aiopg_sa.PoolManager``\n\n* ``hasql.asyncpg.PoolManager``\n\n* ``hasql.asyncpgsa.PoolManager``\n\n* ``hasql.psycopg3.PoolManager``\n\nBalancer policies\n=================\n\n* ``hasql.balancer_policy.GreedyBalancerPolicy``\n  Chooses pool with the most free connections. If there are several such pools,\n  a random one is taken.\n\n* ``hasql.balancer_policy.RandomWeightedBalancerPolicy``\n  Chooses random pool according to their weights. The weight is inversely\n  proportional to the response time of the database of the respective pool \n  (faster response - higher weight).\n\n* ``hasql.balancer_policy.RoundRobinBalancerPolicy``\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache 2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hasql",
    "package_url": "https://pypi.org/project/hasql/",
    "platform": "all",
    "project_url": "https://pypi.org/project/hasql/",
    "project_urls": {
      "Documentation": "https://github.com/aiokitchen/hasql/blob/master/README.rst",
      "Source": "https://github.com/aiokitchen/hasql",
      "Tracker": "https://github.com/aiokitchen/hasql/issues"
    },
    "release_url": "https://pypi.org/project/hasql/0.5.9/",
    "requires_dist": [
      "aiopg ; extra == 'aiopg'",
      "aiopg[sa] ; extra == 'aiopg_sa'",
      "asyncpg ; extra == 'asyncpg'",
      "asyncpgsa ; extra == 'asyncpgsa'",
      "async-timeout ; extra == 'develop'",
      "psycopg[pool] (<4,>=3.0) ; extra == 'develop'",
      "aiopg[sa] (~=1.3.2) ; extra == 'develop'",
      "asyncpg (~=0.24.0) ; extra == 'develop'",
      "pytest (~=6.2.5) ; extra == 'develop'",
      "pytest-cov (~=3.0.0) ; extra == 'develop'",
      "pylama (~=7.7.1) ; extra == 'develop'",
      "aiomisc (~=15.2.4) ; extra == 'develop'",
      "mock (~=4.0.3) ; extra == 'develop'",
      "sqlalchemy[asyncio] (~=1.4.27) ; extra == 'develop'",
      "black (~=21.9b0) ; extra == 'develop'",
      "tox (~=3.24) ; extra == 'develop'",
      "twine ; extra == 'develop'",
      "wheel ; extra == 'develop'",
      "psycopg[pool] (<4,>=3) ; extra == 'psycopg'",
      "async-timeout ; extra == 'test'",
      "psycopg[pool] (<4,>=3.0) ; extra == 'test'",
      "aiopg[sa] (~=1.3.2) ; extra == 'test'",
      "asyncpg (~=0.24.0) ; extra == 'test'",
      "pytest (~=6.2.5) ; extra == 'test'",
      "pytest-cov (~=3.0.0) ; extra == 'test'",
      "aiomisc (~=15.2.4) ; extra == 'test'",
      "mock (~=4.0.1) ; extra == 'test'",
      "sqlalchemy[asyncio] (~=1.4.27) ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "hasql is a module for acquiring actual connections with masters and replicas",
    "version": "0.5.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17412567,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9f2fff9c1474a6342eaf19055df123f3338dc06fa3f562f655078ee64322dee",
          "md5": "f1e0dad15970469333e109e776f30c8a",
          "sha256": "0b5aa91021796bb79f7590f2e640d094910a33413852eaa73301ea508c07e2e0"
        },
        "downloads": -1,
        "filename": "hasql-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f1e0dad15970469333e109e776f30c8a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21717,
        "upload_time": "2022-07-29T13:58:07",
        "upload_time_iso_8601": "2022-07-29T13:58:07.619341Z",
        "url": "https://files.pythonhosted.org/packages/a9/f2/fff9c1474a6342eaf19055df123f3338dc06fa3f562f655078ee64322dee/hasql-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "204518d2d521941eec545f2ee4f1cf9b57a591dfc0c10660a0e049c210397f98",
          "md5": "323466f102d81a7397c97cfe79774122",
          "sha256": "9435f2f36e8a205c8ebffa776840d5d5a60a9a21945cbc84eb5e410f5f8b96d0"
        },
        "downloads": -1,
        "filename": "hasql-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "323466f102d81a7397c97cfe79774122",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21810,
        "upload_time": "2022-07-29T14:00:51",
        "upload_time_iso_8601": "2022-07-29T14:00:51.912104Z",
        "url": "https://files.pythonhosted.org/packages/20/45/18d2d521941eec545f2ee4f1cf9b57a591dfc0c10660a0e049c210397f98/hasql-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "01f5994eba6e4579d33b1bb9e6504f5fb06e83665c8dcaa801a8ab7130356fe8",
          "md5": "16c6337177274de5fc12bb4d2facd10c",
          "sha256": "e7988130a86ac16a638efe8a7ac59c7dac4f807ef9fc7237a5a6568df29d54aa"
        },
        "downloads": -1,
        "filename": "hasql-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "16c6337177274de5fc12bb4d2facd10c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21955,
        "upload_time": "2022-07-29T14:03:52",
        "upload_time_iso_8601": "2022-07-29T14:03:52.378032Z",
        "url": "https://files.pythonhosted.org/packages/01/f5/994eba6e4579d33b1bb9e6504f5fb06e83665c8dcaa801a8ab7130356fe8/hasql-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edccb58f7513c55e167708ba205ded892875f14c4b6e6ebaf2114c58b79d9988",
          "md5": "c3054c220f4a4f1579fec75b63709374",
          "sha256": "e1fc8bb3512132c9e3de5f14b069d9e072c7d07bb2fec1f59cf10881a4e928c7"
        },
        "downloads": -1,
        "filename": "hasql-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c3054c220f4a4f1579fec75b63709374",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21951,
        "upload_time": "2022-07-29T14:10:52",
        "upload_time_iso_8601": "2022-07-29T14:10:52.154047Z",
        "url": "https://files.pythonhosted.org/packages/ed/cc/b58f7513c55e167708ba205ded892875f14c4b6e6ebaf2114c58b79d9988/hasql-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e27b6d622bc3d57d37920af20af7edf0ccbd1103de8d7735ca92d2c89e1c3b69",
          "md5": "007e325e4e064d9bccca8bff1143b354",
          "sha256": "bf9003b0550052ead5a840a01fb597b428e164ef2121871cb1c530ecc7edde01"
        },
        "downloads": -1,
        "filename": "hasql-0.5.4.tar.gz",
        "has_sig": false,
        "md5_digest": "007e325e4e064d9bccca8bff1143b354",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21925,
        "upload_time": "2022-07-29T14:13:24",
        "upload_time_iso_8601": "2022-07-29T14:13:24.171354Z",
        "url": "https://files.pythonhosted.org/packages/e2/7b/6d622bc3d57d37920af20af7edf0ccbd1103de8d7735ca92d2c89e1c3b69/hasql-0.5.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "53badf9d60a7a173664ae69058cbe9edb71e39358b5a3f99b0f1ed37c016e799",
          "md5": "356185337290e469b9349b2db7fc4a1f",
          "sha256": "7474cf1e5100566f5e09517ca1f543acf375f1abd70afdcdd74b4f4e6fff0da2"
        },
        "downloads": -1,
        "filename": "hasql-0.5.5.tar.gz",
        "has_sig": false,
        "md5_digest": "356185337290e469b9349b2db7fc4a1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21943,
        "upload_time": "2022-07-29T14:14:39",
        "upload_time_iso_8601": "2022-07-29T14:14:39.464229Z",
        "url": "https://files.pythonhosted.org/packages/53/ba/df9d60a7a173664ae69058cbe9edb71e39358b5a3f99b0f1ed37c016e799/hasql-0.5.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcf47ea54588ab91dd57d99c7889edb93ffc7edc3ae0c1ad9445645a5e230a0a",
          "md5": "8c27d93d22f13c4dd6d95b7e03428eb5",
          "sha256": "4b6a076b9afc85b4e6283b505e5307c650bee030ba23375b10f3af6a6d73db91"
        },
        "downloads": -1,
        "filename": "hasql-0.5.6.tar.gz",
        "has_sig": false,
        "md5_digest": "8c27d93d22f13c4dd6d95b7e03428eb5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21947,
        "upload_time": "2022-07-29T14:27:34",
        "upload_time_iso_8601": "2022-07-29T14:27:34.641917Z",
        "url": "https://files.pythonhosted.org/packages/bc/f4/7ea54588ab91dd57d99c7889edb93ffc7edc3ae0c1ad9445645a5e230a0a/hasql-0.5.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f93eaec325aa4f15092fe313dd6e0b84a855a2d90f70277d23dfa863f3f52065",
          "md5": "beb7001d040fd26b2a2bda5b876e55d5",
          "sha256": "066e7c039eebb12053061beea26f6fead4a48c22aa89b1d1d0214e469d5f588a"
        },
        "downloads": -1,
        "filename": "hasql-0.5.7.tar.gz",
        "has_sig": false,
        "md5_digest": "beb7001d040fd26b2a2bda5b876e55d5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 21964,
        "upload_time": "2022-07-30T17:27:42",
        "upload_time_iso_8601": "2022-07-30T17:27:42.889745Z",
        "url": "https://files.pythonhosted.org/packages/f9/3e/aec325aa4f15092fe313dd6e0b84a855a2d90f70277d23dfa863f3f52065/hasql-0.5.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb75a09f961b2daab93633dad8926d0c9754d9612f7e6ee4930865752450914c",
          "md5": "eec10ef9878366ff0497e1c4081549c8",
          "sha256": "a022d039ac65c4a09cbb758ddd64395749cff701d44a6edc45aa18e6dc837307"
        },
        "downloads": -1,
        "filename": "hasql-0.5.8.tar.gz",
        "has_sig": false,
        "md5_digest": "eec10ef9878366ff0497e1c4081549c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22046,
        "upload_time": "2022-08-01T15:45:31",
        "upload_time_iso_8601": "2022-08-01T15:45:31.701539Z",
        "url": "https://files.pythonhosted.org/packages/bb/75/a09f961b2daab93633dad8926d0c9754d9612f7e6ee4930865752450914c/hasql-0.5.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "acceaf887b2d2ea1ea7e9d4ffa5ac84c96fbe4b2fe286448a9dbfd27d17444d7",
          "md5": "136f95d72fa0688de7f06667ea907c2d",
          "sha256": "453cb28b6649fe798d40e1186e5ca9f43507f8663d67a4be337e69e49380ac0a"
        },
        "downloads": -1,
        "filename": "hasql-0.5.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "136f95d72fa0688de7f06667ea907c2d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24083,
        "upload_time": "2023-03-23T09:03:51",
        "upload_time_iso_8601": "2023-03-23T09:03:51.103058Z",
        "url": "https://files.pythonhosted.org/packages/ac/ce/af887b2d2ea1ea7e9d4ffa5ac84c96fbe4b2fe286448a9dbfd27d17444d7/hasql-0.5.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4985c675a072381e6a77a40db96cc6ae5c88d98fe313d990a0b41575823382a0",
          "md5": "260cb2639e165f52266841d7ead5f7cc",
          "sha256": "06070698d24749ccf00140774f233905e7b6a4fa652cddb935081762a8ef1aac"
        },
        "downloads": -1,
        "filename": "hasql-0.5.9.tar.gz",
        "has_sig": false,
        "md5_digest": "260cb2639e165f52266841d7ead5f7cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22296,
        "upload_time": "2023-03-23T09:03:54",
        "upload_time_iso_8601": "2023-03-23T09:03:54.193694Z",
        "url": "https://files.pythonhosted.org/packages/49/85/c675a072381e6a77a40db96cc6ae5c88d98fe313d990a0b41575823382a0/hasql-0.5.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "acceaf887b2d2ea1ea7e9d4ffa5ac84c96fbe4b2fe286448a9dbfd27d17444d7",
        "md5": "136f95d72fa0688de7f06667ea907c2d",
        "sha256": "453cb28b6649fe798d40e1186e5ca9f43507f8663d67a4be337e69e49380ac0a"
      },
      "downloads": -1,
      "filename": "hasql-0.5.9-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "136f95d72fa0688de7f06667ea907c2d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24083,
      "upload_time": "2023-03-23T09:03:51",
      "upload_time_iso_8601": "2023-03-23T09:03:51.103058Z",
      "url": "https://files.pythonhosted.org/packages/ac/ce/af887b2d2ea1ea7e9d4ffa5ac84c96fbe4b2fe286448a9dbfd27d17444d7/hasql-0.5.9-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4985c675a072381e6a77a40db96cc6ae5c88d98fe313d990a0b41575823382a0",
        "md5": "260cb2639e165f52266841d7ead5f7cc",
        "sha256": "06070698d24749ccf00140774f233905e7b6a4fa652cddb935081762a8ef1aac"
      },
      "downloads": -1,
      "filename": "hasql-0.5.9.tar.gz",
      "has_sig": false,
      "md5_digest": "260cb2639e165f52266841d7ead5f7cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22296,
      "upload_time": "2023-03-23T09:03:54",
      "upload_time_iso_8601": "2023-03-23T09:03:54.193694Z",
      "url": "https://files.pythonhosted.org/packages/49/85/c675a072381e6a77a40db96cc6ae5c88d98fe313d990a0b41575823382a0/hasql-0.5.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}