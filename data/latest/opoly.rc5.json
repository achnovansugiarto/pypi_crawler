{
  "info": {
    "author": "Giacomo Aloisi (GiackAloZ)",
    "author_email": "giacomo.aloisi1998@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Compilers"
    ],
    "description": "# OPoly\nPolyhedral compilation library for automatic code parallelization in OpenMP written in python.\n\n## Dependencies\n\nPython 3.9+ is required in order to use OPoly and to install it.\n\nThe python dependecies are included in the installation with `pip` and are listed here:\n- [numpy](https://github.com/numpy/numpy) (>=1.19)\n- [sympy](https://github.com/sympy/sympy) (>=1.7)\n- [pymzn](https://github.com/paolodragone/pymzn) (>=0.18.3)\n\n### Minizinc\n\nThe only non-python dependency which you have to take care of is the [Minizinc](https://www.minizinc.org/) CLI tool that is used to model and solve the constraint programming problems of the polyhedral approach. The easiest way to install MiniZinc is to download the MiniZincIDE package, which contains both the MiniZinc binaries and several solvers. To install it, follow [this](https://www.minizinc.org/doc-2.5.0/en/installation.html) guide. After installation, be sure that the executables are set in your `PATH` environment variable. One way to make sure about this is to try to execute the `minizinc` command from the console.\n\n## Installation\n\nThe recommended way to install OPoly is to install it with `pip` from the [PyPI](https://pypi.org/project/opoly/) repository:\n\n```\npip install opoly\n```\n\nYou can also install OPoly from the source code available on [GitHub](https://github.com/GiackAloZ/OPoly) also with `pip`:\n```\npip install .\n```\nor the old way:\n```\npython setup.py install\n```\n\n*Note*: consider using a `virtualenv` or a `conda` environment to install OPoly into.\n\n## Usage\n\nAfter installing OPoly, you will have access to the command line tool `opoly`. This script reads a file containing code that needs to be parallelized. The code must be given in a properly formatted, pseudocode language that will be described later.\n\nThe script will parse this file, detect the loop-carried dependencies and perform the polyhedral optimization using the method described by Lamport in his famous article [*The Parallel Execution of DO Loops*](https://www.microsoft.com/en-us/research/uploads/prod/2016/12/The-Parallel-Execution-of-DO-Loops.pdf).\n\nThe script will then generate the parallelized version of the code in the same pseudocode language or in C syntax, adding OpenMP directives where needed.\n\nSuppose that the file containing the input code is named `example1.psc`, then the command required to generate the parallel code is:\n```\nopoly example1.psc\n```\nBy default, `opoly` will output in the standard output the generated code in C syntax (with OMP directives).\nTo output the code in pseudocode syntax, one can use the `-f` or `--format` option to specify the format of the resulting code to `PSEUDO`:\n```\nopoly example1.psc -f PSEUDO\n```\nThe `-o` or `--output` argument can be used to specify a custom file in which the resulting code should be written, instead of the standard output:\n```\nopoly example1.psc -o omp-example1.c\n```\n\nFor more information about the `opoly` command line tool, read the help with:\n```\nopoly -h\n```\n\n## Description\n\nThe most common usage of the `opoly` tool is to read a file containing the nested loop(s) that needs to be parallelized. Let's say that the file contains this code:\n```\nFOR k FROM 1 TO q {\n    FOR i FROM 1 TO n-2 {\n        STM a[i] = (a[i-1] + a[i] + a[i+1]) / 3.0;\n    }\n}\n```\nLet's not care too much now about the syntax of the pseudocode as it will be described later, but to get a grasp of what this code is representing, we are going to describe it in a few words.\n\nFirst, there are 2 nested loops: the outer loop iterates through variable `k` that assumes integer values from `1` to `q`; the inner loop iterates through variable `i` from `1` to `n-2`. There is a statement regarding vector `a` that assigns the element in position `i` to the sum of the elements in position `i-1`, `i` and `i+1` divided by `3`, at iteration `i` of the inner loop.\n\nWe can see that this code is not parallelizable just yet, because there are loop-carried dependecies regarding the computation of certain values of vector `a`. For example, we cannot compute `a[i]` and `a[i-1]` in parallel, since one value depends on the other.\n\n`opoly` is able to rewrite the loops in a way that the second one can be parallelized without changing the result of the computation. The pseudocode version of the rewritten code is:\n```\nFOR new_k FROM 3 TO n + 2 * q - 2 STEP 1 {\n    FOR CONC new_i FROM fmax(1, ceil((1.0 / 2.0) * (-n + new_k + 2))) TO fmin(q, floor((1.0 / 2.0) * (new_k - 1))) STEP 1 {\n        VAR k = new_i;\n        VAR i = -2 * new_i + new_k;\n        STM a[i] = (a[i - 1] + a[i] + a[i + 1]) / 3.0;\n    }\n}\n```\nTwo new index variables are introduced: `new_k` and `new_i`. These new indexes assume values in new ranges, which alltogether form the lattice of points inside the resulting polyhedron.\n\nThe values of the original variables are recomputed inside the innermost loop with the statements:\n```\n...\nVAR k = new_i;\nVAR i = -2 * new_i + new_k;\n...\n```\nThe statement that perform the computation remains unchanged.\n\nThere are a few functions in the loop range that compute the maximum (`fmax`), minimum (`fmin`), ceiling (`ceil`) and floor (`floor`) of their arguments.\n\n`opoly` can also rewrite the code in C syntax and add OMP directives to perform parallel loops. The C version of the rewritten code is:\n```c++\nfor(int new_k = 3; new_k <= n + 2 * q - 2; new_k++) {\n    int new_i_lb = fmax(1, ceil((1.0 / 2.0) * (-n + new_k + 2)));\n    int new_i_ub = fmin(q, floor((1.0 / 2.0) * (new_k - 1)));\n    #pragma omp parallel for\n    for(int new_i = new_i_lb; new_i <= new_i_ub; new_i++) {\n        int k = new_i;\n        int i = -2 * new_i + new_k;\n        a[i] = (a[i - 1] + a[i] + a[i + 1]) / 3.0;\n    }\n}\n```\nNotice that the values of the lower and upper bounds of the inner loop are computed before the loop statement in this version. The result is a more readable code, not impacting performance.\n\n## Pseudocode syntax\n\nWe will now describe the syntax of the pseudocode.\n\nWe must first define the difference between indexes, parameters and vectors:\n- an *index* is a for loop index variable (eg. `i` or `k` in the examples above).\n- a *parameter* is every variable in the program for which the value is know at the time of execution and its value does not change during the execution (eg. `q` or `n` in the examples above).\n- a *vector* is a multi-dimensional variable that appears in assigments and it is used to store computation results (eg. `a` in the examples above).\n\nWe will discuss more about the restrictions each variable has in order to extract the dependecies and rewrite the loops later in this section.\n\n\\\nThe for loop statement syntax is:\n\n> **FOR** *var_idx* **FROM** *lb_const* **TO** *ub_expr* {\n> \n> &emsp; *loop_body*\n> \n> }\n\nwhere:\n- *var_idx* is the name of the variable representing the loop's index (eg. `i`, `j` or `k`).\n- *lb_const* is a positive constant integer (eg. `0`, `1` or `42`) representing the initial value of the index variable.\n- *ub_expr* is an expression representing the last value of the index variable. There are 3 possible kind of expression that can be written:\n    - a positive constant integer\n    - a parameter name\n    - a two-term expression with a parameter name, an operator (`+` or `-`) and a constant integer (eg. `n-2`).\n- *loop_body* are other statements (possibly for loops) contained in the loop body. If there are nested loops, the loops must be perfectly nested, which means that no other statements must be present in the loop body containing another for loop.\n\n*NOTE*: each index variable name must be unique for every for loop.\n\n\\\nThe assigment statement syntax is:\n\n> **STM** *left_term* **=** *right_term* **;**\n\nwhere:\n- *left_term* is a vector expression, indexed by one or more index variables (eg. `a[i]`). A two-term expression can be present as index, but it must contain only one index variable, an operator (`+` or `-`) and a constant integer (eg. `a[i+2]`).\n- *right_term* is a general expression containing vectors, parameters, indexes and constants.\n\n*NOTE*: please note the `;` at the end of the statement.\n\nThe vector expression syntax is:\n\n> *vector_name*__[__*index_expr*__]__...\n\nwhere:\n- *vector_name* is the name of the vector (eg. `a`)\n- *index_expr* is an expression containing only one index variable (eg. `i`, `i+1`, `i-2`, etc...). There can be multiple indexes expression, one for each vector's dimension.\n\nFor example, a correct vector expression is `a[i+1][j-1]` and an incorrect vector expression is `a[i+j][j]` because `i` and `j` are both present in the first dimension index of the vector.\n\nAlso, vectors with the same name cannot be indexed with different index variables or in different order. For example, if `x[i][j]` is present, `x[j][i]` cannot be present as well as `x[i]`.\n\n\\\nA general expression is a list of other expression with an operator between each of them. For example, `a + 1` is an expression of two terms `a` and `1` with an operator `+` in between them. In general, an expression can be described by the following syntax:\n\n> *expr* [*op* *other_expr*]...\n\nwhere:\n- *expr* and *other_expr* are expressions\n- *op* is an operator. Supported operators are `+` (addition), `-` (subtraction), `*` (multiplication) and `/` (division).\n\nThere can be also round brackets `()` around an expression.\n\nAn example of a correct expression is:\n```\na + v[i] * (1 - v[i-1]) / 3.0\n```\n\n### Examples\n\nLet's look at a simplified relaxation algorithm also used as an example in [*The Parallel Execution of DO Loops*](https://www.microsoft.com/en-us/research/uploads/prod/2016/12/The-Parallel-Execution-of-DO-Loops.pdf).\nThe algorithm takes every point of an input matrix `u` of size `M` by `N` and compute its value as the mean of the adjacent points' value. This computation is done `L` times.\n\nWe can describe this algorithm with the following pseudocode:\n```\nFOR i FROM 1 TO L {\n    FOR j FROM 2 TO M-1 {\n        FOR k FROM 2 TO N-1 {\n            STM u[j][k] = (u[j+1][k] + u[j][k+1] + u[j-1][k] + u[j][k-1]) * 0.25;\n        }\n    }\n}\n```\nsupposing that the matrix `u` is accessed with one-based index fashion.\n\nIf we let `opoly` rewrite this code, we will get this (in C syntax with OMP directives):\n```c++\nfor(int new_i = 4; new_i <= 2 * L + M + N - 2; new_i++) {\n    int new_j_lb = fmax(1, ceil((1.0 / 2.0) * (-M - N + new_i + 2)));\n    int new_j_ub = fmin(L, floor((1.0 / 2.0) * (new_i - 2)));\n    #pragma omp parallel for\n    for(int new_j = new_j_lb; new_j <= new_j_ub; new_j++) {\n        int new_k_lb = fmax(1, -M + new_i - 2 * new_j + 1);\n        int new_k_ub = fmin(N - 1, new_i - 2 * new_j - 1);\n        for(int new_k = new_k_lb; new_k <= new_k_ub; new_k++) {\n            int i = new_j;\n            int j = new_i - 2 * new_j - new_k;\n            int k = new_k;\n            u[j][k] = (u[j + 1][k] + u[j][k + 1] + u[j - 1][k] + u[j][k - 1]) * 0.25;\n        }\n    }\n}\n```\n\n\\\nLet's look at another example. We have a computation involving three one-dimensional vectors `a`, `b` and `c` that needs to be done `q` times. Each vector is containing `n` values (zero-based indexing). We iterate through each `i` from `1` to `n-2` and we compute the following three statements:\n- firstly, we compute the sum of `b[i+1]` and `c[i]` and assign it to `a[i]`.\n- then, we compute the inverse of `a[i]` and assign it to `a[i-1]`.\n- lastly, we update `b[i]` to the value of `a[i]`\n\nThere are a lot of dependecies in this code, but we don't have to worry since `opoly` will do the job of detecting them for us. We only need to write the pseudocode for this algorithm:\n```\nFOR k FROM 1 TO q {\n    FOR i FROM 1 TO n-2 {\n        STM a[i] = b[i+1] + c[i];\n        STM a[i-1] = 1.0 / a[i];\n        STM b[i] = a[i];\n    }\n}\n```\nAnd the resulting code will be:\n```c++\nfor(int new_k = 3; new_k <= n + 2 * q - 2; new_k++) {\n    int new_i_lb = fmax(1, ceil((1.0 / 2.0) * (-n + new_k + 2)));\n    int new_i_ub = fmin(q, floor((1.0 / 2.0) * (new_k - 1)));\n    #pragma omp parallel for\n    for(int new_i = new_i_lb; new_i <= new_i_ub; new_i++) {\n        int k = new_i;\n        int i = -2 * new_i + new_k;\n        a[i] = b[i + 1] + c[i];\n        a[i - 1] = 1.0 / a[i];\n        b[i] = a[i];\n    }\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/GiackAloZ/OPoly",
    "keywords": "compiler polyhedral optimization parallel omp c",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "opoly",
    "package_url": "https://pypi.org/project/opoly/",
    "platform": "",
    "project_url": "https://pypi.org/project/opoly/",
    "project_urls": {
      "Homepage": "https://github.com/GiackAloZ/OPoly"
    },
    "release_url": "https://pypi.org/project/opoly/0.1.3/",
    "requires_dist": [
      "numpy (>=1.19)",
      "sympy (>=1.7)",
      "pymzn (>=0.18.3)"
    ],
    "requires_python": ">=3.9",
    "summary": "OPoly: a simple OpenMP polyhedral compilator",
    "version": "0.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9569839,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e57714caad0bccb994e01fa9a1ceecb443957690948dd5b49dc8faf2b6e904b6",
          "md5": "8d5e56a6c1591df91e0b8802eb846913",
          "sha256": "d1512fc5b6b8d3343685a6adde313d970e3e30655b0d43cfac9ef4e64c96242e"
        },
        "downloads": -1,
        "filename": "opoly-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d5e56a6c1591df91e0b8802eb846913",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 50928,
        "upload_time": "2021-02-11T14:40:14",
        "upload_time_iso_8601": "2021-02-11T14:40:14.525624Z",
        "url": "https://files.pythonhosted.org/packages/e5/77/14caad0bccb994e01fa9a1ceecb443957690948dd5b49dc8faf2b6e904b6/opoly-0.0.3-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cb84be7e779edc86b0256976b5107bdbac8e453b8e06ea15973affc8f2f078e",
          "md5": "94707ad8c38b5699491b43f26faf4b85",
          "sha256": "19c7302f852e4322743e807f5cd064493aab733fa98284f7da88cb2617409493"
        },
        "downloads": -1,
        "filename": "opoly-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "94707ad8c38b5699491b43f26faf4b85",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 26708,
        "upload_time": "2021-02-11T14:40:17",
        "upload_time_iso_8601": "2021-02-11T14:40:17.016628Z",
        "url": "https://files.pythonhosted.org/packages/2c/b8/4be7e779edc86b0256976b5107bdbac8e453b8e06ea15973affc8f2f078e/opoly-0.0.3.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "450e66b8c0ddaeab1c58d49135e2848216b9c1e515079a5e2cd9ef54d28877e6",
          "md5": "5c798689a8cf05ae6d284977703382ba",
          "sha256": "ed53e3de24c3f4a981a5707e56687bb2329199873b716e4e0cf12d9c6fa300d6"
        },
        "downloads": -1,
        "filename": "opoly-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c798689a8cf05ae6d284977703382ba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 54963,
        "upload_time": "2021-02-12T21:05:55",
        "upload_time_iso_8601": "2021-02-12T21:05:55.255218Z",
        "url": "https://files.pythonhosted.org/packages/45/0e/66b8c0ddaeab1c58d49135e2848216b9c1e515079a5e2cd9ef54d28877e6/opoly-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e4401131e6eef3cb315e02cdbac1dcee7f7e00b8c24b5ed0407c52817a45b23a",
          "md5": "0c6ef390db5855e94aaa8c5b801fa1c7",
          "sha256": "489606dfdffa6958b8d38909e7e2519cbab089cdf51551f3cf4486a228a57982"
        },
        "downloads": -1,
        "filename": "opoly-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0c6ef390db5855e94aaa8c5b801fa1c7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 35267,
        "upload_time": "2021-02-12T21:05:56",
        "upload_time_iso_8601": "2021-02-12T21:05:56.845151Z",
        "url": "https://files.pythonhosted.org/packages/e4/40/1131e6eef3cb315e02cdbac1dcee7f7e00b8c24b5ed0407c52817a45b23a/opoly-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc6c5c92e2c661632627dbdba5374a8fb2c2843c4af1e98df5b1ecb5dabf04c5",
          "md5": "8c7a14b2b5795197ddb87c19bbea22eb",
          "sha256": "3597fc079f54dd1905dcd5f06d115260aa3af6e97afd6372daa017930f7fa157"
        },
        "downloads": -1,
        "filename": "opoly-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c7a14b2b5795197ddb87c19bbea22eb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 56526,
        "upload_time": "2021-03-01T14:07:09",
        "upload_time_iso_8601": "2021-03-01T14:07:09.049039Z",
        "url": "https://files.pythonhosted.org/packages/dc/6c/5c92e2c661632627dbdba5374a8fb2c2843c4af1e98df5b1ecb5dabf04c5/opoly-0.1.1-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "848aacf3a1ec0f8c721bb178dbe09476da52dc4156ebf1bc33328d9087595e83",
          "md5": "f4d60b88064b8747afcf2a49eabbc1ed",
          "sha256": "5a647a61c8e0e5c87986cd2d79c8bffb57d6c5ce38712b365b6b8b033d1c135c"
        },
        "downloads": -1,
        "filename": "opoly-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f4d60b88064b8747afcf2a49eabbc1ed",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 36524,
        "upload_time": "2021-03-01T14:07:10",
        "upload_time_iso_8601": "2021-03-01T14:07:10.405654Z",
        "url": "https://files.pythonhosted.org/packages/84/8a/acf3a1ec0f8c721bb178dbe09476da52dc4156ebf1bc33328d9087595e83/opoly-0.1.1.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf6e9a3b59d659e7d7526c6c7f5c09cf57ba05567a73640ec8b41d7bb61af1b1",
          "md5": "750e944483e439079b0848e85c2c75a6",
          "sha256": "df0855e41ad3562b7ae646ffdbae1d0ca8b47da59a48aa55e35390403b02a3b2"
        },
        "downloads": -1,
        "filename": "opoly-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "750e944483e439079b0848e85c2c75a6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 56528,
        "upload_time": "2021-03-01T14:10:49",
        "upload_time_iso_8601": "2021-03-01T14:10:49.538392Z",
        "url": "https://files.pythonhosted.org/packages/bf/6e/9a3b59d659e7d7526c6c7f5c09cf57ba05567a73640ec8b41d7bb61af1b1/opoly-0.1.2-py3-none-any.whl",
        "yanked": true,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c6afb1ee60e0f0489fcfb6a1b813da3abacb018d8d1cc233d91167eee2fe3fe",
          "md5": "2b3636dc624122ab3c7ed7eec1f9c529",
          "sha256": "34de81a53adf20a7518e5c99f6eebb39981a9156d9f801c8de12771f45c0f0fd"
        },
        "downloads": -1,
        "filename": "opoly-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2b3636dc624122ab3c7ed7eec1f9c529",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 36536,
        "upload_time": "2021-03-01T14:10:50",
        "upload_time_iso_8601": "2021-03-01T14:10:50.754637Z",
        "url": "https://files.pythonhosted.org/packages/0c/6a/fb1ee60e0f0489fcfb6a1b813da3abacb018d8d1cc233d91167eee2fe3fe/opoly-0.1.2.tar.gz",
        "yanked": true,
        "yanked_reason": null
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e6874af254a30be97357ee63494aee6ca06a2d6d167610340c1d80c911533f8",
          "md5": "e1314575e112d7ac793355f8e34a54f8",
          "sha256": "f51d2f9149537b94132c18c95fc1931291351789f7e7d7908f2abf16fc4c3d4e"
        },
        "downloads": -1,
        "filename": "opoly-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1314575e112d7ac793355f8e34a54f8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 56520,
        "upload_time": "2021-03-01T15:28:17",
        "upload_time_iso_8601": "2021-03-01T15:28:17.740460Z",
        "url": "https://files.pythonhosted.org/packages/8e/68/74af254a30be97357ee63494aee6ca06a2d6d167610340c1d80c911533f8/opoly-0.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66517e5d6c1e8c43c47edf422af874a7f17210dd00da901a970b1bfafc0e33b4",
          "md5": "6696612eac9cf51daef893dad6b61ddb",
          "sha256": "d5ec4fec3792ad1476c264233e0bfe6f644a9513910eafa8a192ae6832d6fb38"
        },
        "downloads": -1,
        "filename": "opoly-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6696612eac9cf51daef893dad6b61ddb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 36529,
        "upload_time": "2021-03-01T15:28:18",
        "upload_time_iso_8601": "2021-03-01T15:28:18.835388Z",
        "url": "https://files.pythonhosted.org/packages/66/51/7e5d6c1e8c43c47edf422af874a7f17210dd00da901a970b1bfafc0e33b4/opoly-0.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8e6874af254a30be97357ee63494aee6ca06a2d6d167610340c1d80c911533f8",
        "md5": "e1314575e112d7ac793355f8e34a54f8",
        "sha256": "f51d2f9149537b94132c18c95fc1931291351789f7e7d7908f2abf16fc4c3d4e"
      },
      "downloads": -1,
      "filename": "opoly-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e1314575e112d7ac793355f8e34a54f8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 56520,
      "upload_time": "2021-03-01T15:28:17",
      "upload_time_iso_8601": "2021-03-01T15:28:17.740460Z",
      "url": "https://files.pythonhosted.org/packages/8e/68/74af254a30be97357ee63494aee6ca06a2d6d167610340c1d80c911533f8/opoly-0.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "66517e5d6c1e8c43c47edf422af874a7f17210dd00da901a970b1bfafc0e33b4",
        "md5": "6696612eac9cf51daef893dad6b61ddb",
        "sha256": "d5ec4fec3792ad1476c264233e0bfe6f644a9513910eafa8a192ae6832d6fb38"
      },
      "downloads": -1,
      "filename": "opoly-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "6696612eac9cf51daef893dad6b61ddb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 36529,
      "upload_time": "2021-03-01T15:28:18",
      "upload_time_iso_8601": "2021-03-01T15:28:18.835388Z",
      "url": "https://files.pythonhosted.org/packages/66/51/7e5d6c1e8c43c47edf422af874a7f17210dd00da901a970b1bfafc0e33b4/opoly-0.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}