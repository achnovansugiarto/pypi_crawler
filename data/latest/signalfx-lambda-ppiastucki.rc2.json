{
  "info": {
    "author": "SignalFx, Inc",
    "author_email": "info@signalfx.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "SignalFx Python Lambda Wrapper\n==============================\n\nSignalFx Python Lambda Wrapper.\n\nUsage\n-----\n\nThe SignalFx Python Lambda Wrapper is a wrapper around an AWS Lambda\nPython function handler, used to instrument execution of the function\nand send metrics and traces to SignalFx.\n\nInstallation\n~~~~~~~~~~~~\n\nTo install from PyPi\n\n.. code::\n\n    pip install signalfx_lambda\n\nConfiguring the ingest endpoint\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, this function wrapper will send to the ``us0`` realm. If you are\nnot in this realm you will need to set the ``SIGNALFX_INGEST_ENDPOINT`` environment\nvariable to the correct realm ingest endpoint (``https://ingest.{REALM}.signalfx.com``).\nTo determine what realm you are in, check your profile page in the SignalFx\nweb application (click the avatar in the upper right and click My Profile).\n\n\nEnvironment Variables\n~~~~~~~~~~~~~~~~~~~~~\n\n**Note: the environment variables ``SIGNALFX_INGEST_ENDPOINT`` and ``SIGNALFX_AUTH_TOKEN`` are being deprecated and will not be supported in future releases.**\n\n.. code:: bash\n\n    SIGNALFX_ACCESS_TOKEN=access token\n\n    # endpoint for both metrics and tracer. Overridden by SIGNALFX_METRICS_URL\n    # and SIGNALFX_TRACING_URL if set\n    SIGNALFX_ENDPOINT_URL=http://<my_gateway>:8080\n\n    # optional metrics and tracing configuration\n\n    SIGNALFX_METRICS_URL=ingest endpoint [ default: https://pops.signalfx.com ]\n    SIGNALFX_SEND_TIMEOUT=timeout in seconds for sending datapoint [ default: 0.3 ]\n\n    SIGNALFX_TRACING_URL=tracing endpoint [ default: https://ingest.signalfx.com/v1/trace ]\n\n``SIGNALFX_ENDPOINT_URL`` can be used to configure a common endpoint for metrics and\ntraces, as is the case when forwarding with the Smart Gateway. The path ``/v1/trace``\nwill automatically be added to the endpoint for traces.\n\nIf either ``SIGNALFX_TRACING_URL`` or ``SIGNALFX_METRICS_URL`` are set, they will take\nprecendence over ``SIGNALFX_ENDPOINT_URL`` for their respective components.\n\nFor example, if only ``SIGNALFX_ENDPOINT_URL`` is set:\n\n.. code:: bash\n\n    SIGNALFX_ENDPOINT_URL=http://<my_gateway>:8080\n\nBoth metrics and traces will be sent to the gateway address.\n\nIf ``SIGNALFX_ENDPOINT_URL`` and ``SIGNALFX_METRICS_URL`` are set:\n\n.. code:: bash\n\n    SIGNALFX_METRICS_URL=https://pops.signalfx.com\n    SIGNALFX_ENDPOINT_URL=http://<my_gateway>:8080\n\nTraces will be sent to the gateway and metrics will go through POPS.\n\nWrapping a function\n~~~~~~~~~~~~~~~~~~~\n\nThere are two wrappers provided.\n\nFor metrics, decorate your handler with @signalfx_lambda.emits_metrics\n\n.. code:: python\n\n    import signalfx_lambda\n\n    @signalfx_lambda.emits_metrics\n    def handler(event, context):\n        # your code\n\nFor tracing, use the @signalfx_lambda.is_traced decorator\n\n.. code:: python\n\n    import signalfx_lambda\n\n    @signalfx_lambda.is_traced\n    def handler(event, context):\n        # your code\n\nThe decorators can be used individually or together.\n\nMetrics and dimensions sent by the metrics wrapper\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe Lambda wrapper sends the following metrics to SignalFx:\n\n+-----------------------+-----------------------+-----------------------+\n| Metric Name           | Type                  | Description           |\n+=======================+=======================+=======================+\n| function.invocations  | Counter               | Count number of       |\n|                       |                       | Lambda invocations    |\n+-----------------------+-----------------------+-----------------------+\n| function.cold_starts  | Counter               | Count number of cold  |\n|                       |                       | starts                |\n+-----------------------+-----------------------+-----------------------+\n| function.errors       | Counter               | Count number of       |\n|                       |                       | errors from           |\n|                       |                       | underlying Lambda     |\n|                       |                       | handler               |\n+-----------------------+-----------------------+-----------------------+\n| function.duration     | Gauge                 | Milliseconds in       |\n|                       |                       | execution time of     |\n|                       |                       | underlying Lambda     |\n|                       |                       | handler               |\n+-----------------------+-----------------------+-----------------------+\n\nThe Lambda wrapper adds the following dimensions to all data points sent\nto SignalFx:\n\n+----------------------------------+----------------------------------+\n| Dimension                        | Description                      |\n+==================================+==================================+\n| lambda_arn                       | ARN of the Lambda function       |\n|                                  | instance                         |\n+----------------------------------+----------------------------------+\n| aws_region                       | AWS Region                       |\n+----------------------------------+----------------------------------+\n| aws_account_id                   | AWS Account ID                   |\n+----------------------------------+----------------------------------+\n| aws_function_name                | AWS Function Name                |\n+----------------------------------+----------------------------------+\n| aws_function_version             | AWS Function Version             |\n+----------------------------------+----------------------------------+\n| aws_function_qualifier           | AWS Function Version Qualifier   |\n|                                  | (version or version alias if it  |\n|                                  | is not an event source mapping   |\n|                                  | Lambda invocation)               |\n+----------------------------------+----------------------------------+\n| event_source_mappings            | AWS Function Name (if it is an   |\n|                                  | event source mapping Lambda      |\n|                                  | invocation)                      |\n+----------------------------------+----------------------------------+\n| aws_execution_env                | AWS execution environment        |\n|                                  | (e.g. AWS_Lambda_python3.6)      |\n+----------------------------------+----------------------------------+\n| function_wrapper_version         | SignalFx function wrapper        |\n|                                  | qualifier                        |\n|                                  | (e.g. signalfx_lambda_0.0.2)     |\n+----------------------------------+----------------------------------+\n| metric_source                    | The literal value of             |\n|                                  | ‘lambda_wrapper’                 |\n+----------------------------------+----------------------------------+\n\nTraces and tags sent by the Tracing wrapper\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe tracing wrapper creates a span for the wrapper handler. This span has the following tags:\n\n+----------------------------------+----------------------------------+\n| Tag                              | Description                      |\n+==================================+==================================+\n| aws_request_id                   | AWS Request ID                   |\n+----------------------------------+----------------------------------+\n| lambda_arn                       | ARN of the Lambda function       |\n|                                  | instance                         |\n+----------------------------------+----------------------------------+\n| aws_region                       | AWS Region                       |\n+----------------------------------+----------------------------------+\n| aws_account_id                   | AWS Account ID                   |\n+----------------------------------+----------------------------------+\n| aws_function_name                | AWS Function Name                |\n+----------------------------------+----------------------------------+\n| aws_function_version             | AWS Function Version             |\n+----------------------------------+----------------------------------+\n| aws_function_qualifier           | AWS Function Version Qualifier   |\n|                                  | (version or version alias if it  |\n|                                  | is not an event source mapping   |\n|                                  | Lambda invocation)               |\n+----------------------------------+----------------------------------+\n| event_source_mappings            | AWS Function Name (if it is an   |\n|                                  | event source mapping Lambda      |\n|                                  | invocation)                      |\n+----------------------------------+----------------------------------+\n| aws_execution_env                | AWS execution environment        |\n|                                  | (e.g. AWS_Lambda_python3.6)      |\n+----------------------------------+----------------------------------+\n| function_wrapper_version         | SignalFx function wrapper        |\n|                                  | qualifier                        |\n|                                  | (e.g. signalfx_lambda_0.0.2)     |\n+----------------------------------+----------------------------------+\n| component                        | The literal value of             |\n|                                  | ‘python-lambda-wrapper’          |\n+----------------------------------+----------------------------------+\n\nSending custom metric from the Lambda function\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    import signalfx_lambda\n\n    # sending application_performance metric with value 100 and dimension abc:def\n    signalfx_lambda.send_gauge('application_performance', 100, {'abc':'def'})\n\n    # sending counter metric with no dimension\n    signalfx_lambda.send_counter('database_calls', 1)\n\nAdding manual tracing to the Lambda function\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nManual instrumentation can be added to trace critical parts of your handler\nfunction.\n\n.. code:: python\n\n    import opentracing\n\n    tracer = opentracing.tracer\n\n    def some_function():\n        with tracer.start_active_span(\"span_name\", tags=tags) as scope:\n\n            # do some work\n\n            span = scope.span\n            span.set_tag(\"example_tag\", \"example_value\")\n\nMore examples and usage information can be found in the Jaeger Python Tracer\n`documentation <https://github.com/signalfx/jaeger-client-python>`_.\n\nTesting it out locally\n~~~~~~~~~~~~~~~~~~~~~~\n\nUse python-lambda-local\n\n.. code::\n\n    pip install python-lambda-local\n\n.. code::\n\n    python-lambda-local tests/test.py tests/event.json -a 'arn:aws:lambda:us-east-1:accountId:function:functionNamePython:$LATEST'\n\nPackaging\n~~~~~~~~~\n\n.. code::\n\n    python setup.py bdist_wheel --universal\n\nLicense\n~~~~~~~\n\nApache Software License v2. Copyright © 2014-2019 SignalFx\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/signalfx/lambda-python",
    "keywords": "",
    "license": "Apache Software License v2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "signalfx-lambda-ppiastucki",
    "package_url": "https://pypi.org/project/signalfx-lambda-ppiastucki/",
    "platform": "",
    "project_url": "https://pypi.org/project/signalfx-lambda-ppiastucki/",
    "project_urls": {
      "Homepage": "https://github.com/signalfx/lambda-python"
    },
    "release_url": "https://pypi.org/project/signalfx-lambda-ppiastucki/0.2.1/",
    "requires_dist": [
      "signalfx (>=1.0.16)",
      "sfx-jaeger-client (>=3.13.1.dev0)",
      "six (>=1.4.0)"
    ],
    "requires_python": "",
    "summary": "SignalFx Lambda Python Wrapper",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6271884,
  "releases": {
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bf460758067d99e802c9f6964c3b7f8e824cf78afbb21f512c4b0d7124fae3c5",
          "md5": "965488ba89abad53053b47258c6533f4",
          "sha256": "53488e08d68ad6b025f65eb871cd16b9029b4f6abff8f8ffb83dc6377e00a20b"
        },
        "downloads": -1,
        "filename": "signalfx_lambda_ppiastucki-0.1.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "965488ba89abad53053b47258c6533f4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 12017,
        "upload_time": "2019-12-05T09:46:48",
        "upload_time_iso_8601": "2019-12-05T09:46:48.314794Z",
        "url": "https://files.pythonhosted.org/packages/bf/46/0758067d99e802c9f6964c3b7f8e824cf78afbb21f512c4b0d7124fae3c5/signalfx_lambda_ppiastucki-0.1.5-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7b9d815f4306903283b92f40c6127d61cb80a00fcb0865ac893b96171754d0dd",
          "md5": "4c30787b65bc01a103f66d36e009491f",
          "sha256": "45dfb6b5840bb075e7616474df1fdb73afbb2eeff10fb8db601171ddf8429263"
        },
        "downloads": -1,
        "filename": "signalfx_lambda_ppiastucki-0.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c30787b65bc01a103f66d36e009491f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 11995,
        "upload_time": "2019-12-10T10:01:51",
        "upload_time_iso_8601": "2019-12-10T10:01:51.140394Z",
        "url": "https://files.pythonhosted.org/packages/7b/9d/815f4306903283b92f40c6127d61cb80a00fcb0865ac893b96171754d0dd/signalfx_lambda_ppiastucki-0.2.1-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7b9d815f4306903283b92f40c6127d61cb80a00fcb0865ac893b96171754d0dd",
        "md5": "4c30787b65bc01a103f66d36e009491f",
        "sha256": "45dfb6b5840bb075e7616474df1fdb73afbb2eeff10fb8db601171ddf8429263"
      },
      "downloads": -1,
      "filename": "signalfx_lambda_ppiastucki-0.2.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4c30787b65bc01a103f66d36e009491f",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 11995,
      "upload_time": "2019-12-10T10:01:51",
      "upload_time_iso_8601": "2019-12-10T10:01:51.140394Z",
      "url": "https://files.pythonhosted.org/packages/7b/9d/815f4306903283b92f40c6127d61cb80a00fcb0865ac893b96171754d0dd/signalfx_lambda_ppiastucki-0.2.1-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}