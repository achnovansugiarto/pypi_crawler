{
  "info": {
    "author": "Erik Soares e Fernando Santos",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Criptografia Enigma\r\nEste projeto consiste em uma implementaÃ§Ã£o de um cifrador e decifrador Enigma, um famoso dispositivo de criptografia usado pela Alemanha nazista durante a Segunda Guerra Mundial. O objetivo desse dispositivo era codificar mensagens militares e protegÃª-las contra interceptaÃ§Ã£o e decodificaÃ§Ã£o pelos inimigos.\r\n\r\n## EquaÃ§Ãµes Implementadas\r\nAs equaÃ§Ãµes utilizadas foram manipulaÃ§Ãµes e multiplicaÃ§Ãµes matriciais. Utilizamos matrizes de transformaÃ§Ã£o (matriz identidade com linhas permutadas), para a realizaÃ§Ã£o da cifragem da mensagem. Para isso, seguimos uma determinada regra de multiplicaÃ§Ã£o: a mensagem, antes, Ã© transformada para uma matriz one hot,e iteramos em cada coluna dessa matriz one-hot, fazendo uma multiplicÃ£o por uma matriz de transformaÃ§Ã£o *E*. Para cada coluna *i > 1* multiplicamos *i - 1* vezes a matriz *E* pela mensagem em one-hot. Com isso, ficamos com uma matriz que serÃ¡ usada para a cifragem da mensagem. \r\n\r\nUtilizamos o conceito de matriz inversa, para poder decifrar a mensagem cifrada. Para isso, fizemos a inversa da matriz *P* e *E* (ambas matrizes  de permutaÃ§Ãµes, utilizadas para a cifragem da mensagem) e multiplicamos por uma matriz, que representa a matriz one-hot da mensagem, seguindo uma regra. A regra Ã© que para  coluna *j* da matriz one-hot, multiplicamos a inversa de *E*  pela coluna  *j*  *(j - 1)* vezes e aá¹•Ã³s isso, multiplicamos por *P*. Dessa forma, conseguimos obter uma matriz, que serÃ¡ convertida na mensagem original. \r\n\r\n\r\n\r\n## Como baixar \r\n\r\nA biblioteca \"criptografia\" estÃ¡ disponÃ­vel para baixar utilizando o pip do python, basta executar:\r\n`pip install criptografiaferik`\r\n<p>ApÃ³s isso, vocÃª poderÃ¡ utilizar os seguintes mÃ©todos:</p>\r\n\r\n`cifrar(msg : str, P : np.array):`\r\nAplica uma cifra simples em uma mensagem recebida como entrada e retorna a mensagem cifrada. P Ã© a matriz de permutaÃ§Ã£o que realiza a cifra.\r\n- Deve ser realizada uma multiplicaÃ§Ã£o matricial entre a matriz de permutaÃ§Ã£o e a mensagem.\r\n\r\n\r\n`de_cifrar(msg : str, P : np.array):`\r\nRecupera uma mensagem cifrada, recebida como entrada, e retorna a mensagem original. P Ã© a matriz de permutaÃ§Ã£o que realiza a cifra.\r\n- Deve ser realizada uma multiplicaÃ§Ã£o matricial entre a inversa da matriz de permutaÃ§Ã£o e a mensagem, efetuando o caminho inverso da cifra.\r\n\r\n\r\n`enigma(msg : str, P : np.array, E : np.array):`\r\nFaz a cifra Enigma na mensagem de entrada usando o cifrador P e o cifrador auxiliar E, ambos representados como matrizes de permutaÃ§Ã£o.\r\n- Deve ser realizada uma multiplicaÃ§Ã£o matricial entre o P, E0 * E1*...Ei (sendo i o indice correspondente a letra da mensagem) e a mensagem.\r\n\r\n\r\n`de_enigma(msg : str, P : np.array, E : np.array):`\r\nRecupera uma mensagem cifrada como Enigma assumindo que ela foi cifrada usando o cifrador P e o cifrador auxiliar E, ambos representados como matrizes de permutaÃ§Ã£o.\r\n- Deve ser realizada uma multiplicaÃ§Ã£o matricial E0 * E1*...Ei (sendo i o indice correspondente a letra da mensagem), o P, e a mensagem .\r\n\r\nPara utilizar cada uma das funÃ§Ãµes da biblioteca segue as expliÃ§Ãµes:\r\n\r\n- cifrar: Passe a sua mensagem original como mÃ©todo da funÃ§Ã£o, e a sua matriz permutaÃ§Ã£o, sendo essa Ãºltima opcional, haja vista que jÃ¡ possui uma pre-definida.\r\n- de_cifrar: Passe a sua mensagem cifrada como mÃ©todo da funÃ§Ã£o, e a matriz permutaÃ§Ã£o, sendo essa Ãºltima opcional, haja vista que jÃ¡ possui uma pre-definida.\r\n- enigma: Passe a sua mensagem original como mÃ©todo da funÃ§Ã£o, a matriz permutaÃ§Ã£o, e a matriz permutaÃ§Ã£o auxiliar, sendo as duas Ãºltimas opcionais, haja vista que elas estÃ£o pre-definidas.\r\n- de_enigma: Passe o seu enigma como mÃ©todo da funÃ§Ã£o, a matriz permutaÃ§Ã£o, e a matriz permutaÃ§Ã£o auxiliar, sendo as duas Ãºltimas opcionais, haja vista que elas estÃ£o pre-definidas.\r\n\r\n\r\n## Como Rodar o demo.py\r\n\r\nPrimeiramente, verifique se vocÃª estÃ¡ na pasta criptografia, apÃ³s isso, abra o seu terminal e execute o seguinte comando: python demo.py\r\nSerÃ¡ exibido em seu terminal alguns testes de cada uma das funÃ§Ãµes que foram implementadas.\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/eriksoaress/Criptografia",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "criptografiaferik",
    "package_url": "https://pypi.org/project/criptografiaferik/",
    "platform": null,
    "project_url": "https://pypi.org/project/criptografiaferik/",
    "project_urls": {
      "Homepage": "https://github.com/eriksoaress/Criptografia"
    },
    "release_url": "https://pypi.org/project/criptografiaferik/0.5/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Uma biblioteca para criptografia de mensagens",
    "version": "0.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17259779,
  "releases": {
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d2d0cdda7c822f4e453eb50cceb8d46c0b7b87d83e1960ff802a59909c69e455",
          "md5": "6839b69d7c031878116da3406ed92241",
          "sha256": "dd2a91f1b7cbe443de697cc52405b887cf204b8eee311aaae040228e53b2eb7f"
        },
        "downloads": -1,
        "filename": "criptografiaferik-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "6839b69d7c031878116da3406ed92241",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5868,
        "upload_time": "2023-03-12T11:11:19",
        "upload_time_iso_8601": "2023-03-12T11:11:19.100701Z",
        "url": "https://files.pythonhosted.org/packages/d2/d0/cdda7c822f4e453eb50cceb8d46c0b7b87d83e1960ff802a59909c69e455/criptografiaferik-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d2d0cdda7c822f4e453eb50cceb8d46c0b7b87d83e1960ff802a59909c69e455",
        "md5": "6839b69d7c031878116da3406ed92241",
        "sha256": "dd2a91f1b7cbe443de697cc52405b887cf204b8eee311aaae040228e53b2eb7f"
      },
      "downloads": -1,
      "filename": "criptografiaferik-0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "6839b69d7c031878116da3406ed92241",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5868,
      "upload_time": "2023-03-12T11:11:19",
      "upload_time_iso_8601": "2023-03-12T11:11:19.100701Z",
      "url": "https://files.pythonhosted.org/packages/d2/d0/cdda7c822f4e453eb50cceb8d46c0b7b87d83e1960ff802a59909c69e455/criptografiaferik-0.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}