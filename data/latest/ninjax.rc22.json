{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "[![PyPI](https://img.shields.io/pypi/v/ninjax.svg)](https://pypi.python.org/pypi/ninjax/#history)\n\n# ðŸ¥·  Ninjax: General Modules for JAX\n\nNinjax is a general module system for [JAX][jax]. It gives the user complete\nand transparent control over updating the state of each module, bringing the\nflexibility of PyTorch and TensorFlow to JAX. Moreover, Ninjax makes it easy to\nmix and match modules from different libraries, such as [Flax][flax] and\n[Haiku][flax].\n\n[jax]: https://github.com/google/jax\n[flax]: https://github.com/google/flax\n[haiku]: https://github.com/deepmind/dm-haiku\n\n## Motivation\n\nExisting deep learning libraries for JAX provide modules, but those modules\nonly specify neural networks and cannot easily implement training logic.\nOrchestrating training all in one place, outside of the modules, is fine for\nsimple code bases. But it becomes a problem when there are many modules with\ntheir own training logic and optimizers.\n\nNinjax solves this problem by giving each `nj.Module` full read and write\naccess to its state. This means modules can have train functions to\nimplement custom training logic, and call each other's train functions. Ninjax\nis intended to be used with one or more neural network libraries, such as\n[Haiku][haiku] and [Flax][flax].\n\nThe main differences to existing deep learning libraries are:\n\n- Ninjax does not need separate `apply()`/`init()` functions. Instead, the\n  first function call creates variables automatically.\n- Ninjax lets you access and update model parameters inside of impure\n  functions, so modules can handle their own optimizers and update logic.\n- Natural support for modules with multiple functions without need for\n  Flax's `setup()` function or Haiku's `hk.multi_transform()`.\n- Ninjax' flexible state handling makes it trivial to mix and match\n  modules from other deep learning libraries in your models.\n\n## Installation\n\nNinjax is [a single file][file], so you can just copy it to your project\ndirectory. Or you can install the package:\n\n```\npip install ninjax\n```\n\n[file]: https://github.com/danijar/ninjax/blob/main/ninjax/ninjax.py\n\n## Quickstart\n\n```python3\nimport functools\n\nimport haiku as hk\nimport jax\nimport jax.numpy as jnp\nimport ninjax as nj\n\n# Ninjax supports all Haiku and Flax modules and new libraries are easy to add.\nLinear = functools.partial(nj.HaikuModule, hk.Linear)\n\n\nclass MyModel(nj.Module):\n\n  def __init__(self, size, lr=0.01, act=jax.nn.relu):\n    self.size = size\n    self.lr = lr\n    self.act = act\n    # Define submodules upfront.\n    self.h1 = Linear(128, name='h1')\n    self.h2 = Linear(128, name='h2')\n\n  def __call__(self, x):\n    x = self.act(self.h1(x))\n    x = self.act(self.h2(x))\n    # Define submodules inline.\n    x = self.get('h3', Linear, self.size, with_bias=False)(x)\n    # Create state entries of array values.\n    x += self.get('bias', jnp.array, 0.0)\n    return x\n\n  def train(self, x, y):\n    # Compute gradient with respect to all parameters in this module.\n    loss, params, grad = nj.grad(self.loss, self)(x, y)\n    # Update the parameters with gradient descent.\n    state = jax.tree_util.tree_map(lambda p, g: p - self.lr * g, params, grad)\n    # Update multiple state entries of this module.\n    self.putm(state)\n    return loss\n\n  def loss(self, x, y):\n    return ((self(x) - y) ** 2).mean()\n\n\n# The complete state is stored in a flat dictionary. Ninjax automatically\n# applies scopes to the string keys based on the module names.\nstate = {}\nmodel = MyModel(8, name='model')\ntrain = nj.pure(model.train)  # nj.jit(...), nj.pmap(...)\nmain = jax.random.PRNGKey(0)\n\n# Let's train on some example data.\ndataset = [(jnp.ones((64, 32)), jnp.ones((64, 8)))] * 10\nfor x, y in dataset:\n  rng, main = jax.random.split(main)\n  # Variables are automatically initialized on the first call. This adds them\n  # to the state dictionary.\n  loss, state = train(state, rng, x, y)\n  # To look at parameters, simply use the state dictionary.\n  assert state['/model/bias'].shape == ()\n  print('Loss:', float(loss))\n```\n\n## Tutorial\n\n### How can I create state entries?\n\nNinjax gives modules full control over reading and updating their state\nentries. Use `self.get(name, ctor, *args, **kwargs)` to define state entries.\nThe first call creates the entry as `ctor(*args, **kwargs)`. Later calls return\nthe current value:\n\n```python3\nclass Module(nj.Module):\n\n  def compute(self, x):\n    init = jax.nn.initializers.variance_scaling(1, 'fan_avg', 'uniform')\n    weights = self.get('weights', init, nj.rng(), (64, 32))\n    bias = self.get('bias', jnp.zeros, (32,), jnp.float32)\n    print(self.getm())  # {'/path/to/module/weights': ..., '/path/to/module/bias': ...}\n    return x @ weights + bias\n```\n\n### How can I update state entries?\n\nTo update the state entries of a module, use `self.put(name, value)` for\nindividual entries of `self.putm(mapping)` to update multiple values:\n\n```python3\nclass Module(nj.Module):\n\n  def counting(self):\n    counter = nj.get('counter', jnp.zeros, (), jnp.int32)\n    self.put('counter', counter + 1)\n    print(self.get('counter'))  # 1\n    state = self.getm()\n    state['counter'] += 1\n    self.putm(state)\n    print(self.getm()['counter'])  # 2\n    print(self.get('counter'))  # 2\n```\n\n### How can I use JIT compilation?\n\nThe `nj.pure()` function makes the state your JAX code uses explicit, so it can\nbe transformed freely:\n\n```python3\nmodel = Model()\ntrain = jax.jit(nj.pure(model.train))\nparams = {}\nresult, params = train(param, rng, ...)\n```\n\nCalling the pure function will create any parameters that are not yet in the\n`params` dictionary and return the new parameters alongside the function\noutput.\n\nYou can speed up the first function call (where parameters are created) by\nusing `nj.jit` instead of `jax.jit`. Internally, this avoids compiling two\nversions of the function.\n\n### How can I compute gradients?\n\nYou can use `jax.grad` as normal for computing gradients with respect to\nexplicit inputs of your function. To compute gradients with respect to Ninjax\nstate, use `nj.grad(fn, keys)`:\n\n```python3\nclass Module(nj.Module):\n\n  def train(self, x, y):\n    params = self.getm('.*')\n    loss, grads = nj.grad(self.loss, params.keys())(x, y)\n    params = jax.tree_map(lambda p, g: p - 0.01 * g, params, grads)\n    self.putm(params)\n```\n\nThe `self.getm(filter='.*')` method optionally accepts a regex pattern to select\nonly a subset of the state dictionary. It also returns only state entries of\nthe current module. To access the global state, use `nj.state()`.\n\n### How can I define modules compactly?\n\nYou can use `self.get(name, ctor, *args, **kwargs)` inside methods of your\nmodules. When called for the first time, it creates a new state entry from the\nconstructor `ctor(*args, **kwargs)`. Later calls return the existing entry:\n\n```python3\nclass Module(nj.Module):\n\n  def __call__(self, x):\n    x = jax.nn.relu(self.get('h1', Linear, 128)(x))\n    x = jax.nn.relu(self.get('h2', Linear, 128)(x))\n    x = self.get('h3', Linear, 32)(x)\n    return x\n```\n\n### How can I use Haiku modules?\n\nThere is nothing special about using external libraries with Ninjax. Haiku\nrequires its modules to be passed through `hk.transform` and the initialized\nvia `transformed.init(rng, batch)`. For convenience, Ninjax provides\n`nj.HaikuModule` to do this for you:\n\n```python3\nclass Module(nj.Module):\n\n  def __init__(self):\n    self.mlp = nj.HaikuModule(hk.nets.MLP, [128, 128, 32])\n\n  def __call__(self, x):\n    return self.mlp(x)\n```\n\nYou can also predefine a list of aliases for Haiku modules that you want to use\nfrequently:\n\n```python3\nLinear = functools.partial(nj.HaikuModule, hk.Linear)\nConv2D = functools.partial(nj.HaikuModule, hk.Conv2D)\nMLP = functools.partial(nj.HaikuModule, hk.nets.MLP)\n# ...\n```\n\n### How can I use Flax modules?\n\nThere is nothing special about using external libraries with Ninjax. Flax\nrequires its modules to be initialized via `params = model.init(rng, batch)`\nand used via `model.apply(params, data)`. For convenience, Ninjax provides\n`nj.FlaxModule` to do this for you:\n\n```python3\nclass Module(nj.Module):\n\n  def __init__(self):\n    self.linear = nj.FlaxModule(nn.Dense, 128)\n\n  def __call__(self, x):\n    return self.linear(x)\n```\n\nYou can also predefine a list of aliases for Flax modules that you want to use\nfrequently:\n\n```python3\nDense = functools.partial(nj.FlaxModule, nn.Dense)\nConv = functools.partial(nj.FlaxModule, nn.Conv)\n# ...\n```\n\n### How can I use Optax optimizers?\n\nThere is nothing special about using external libraries like Optax with Ninjax.\nOptax requires its optimizers to be initialized, their state to be passed\nthrough the optimizer call, and the resulting updates to be applied. For\nconvenience, Ninjax provides `nj.OptaxModule` to do this for you:\n\n```python3\nclass Module(nj.Module):\n\n  def __init__(self):\n    self.mlp = MLP()\n    self.opt = nj.OptaxModule(optax.adam, 1e-3)\n\n  def train(self, x, y):\n    self.mlp(x)  # Ensure paramters are created.\n    metrics = self.opt(self.mlp.getm('.*'), self.loss, x, y)\n    return metrics  # {'loss': ..., 'grad_norm': ...}\n\n  def loss(self, x, y):\n    return ((self.mlp(x) - y) ** 2).mean()\n```\n\n## Questions\n\nIf you have a question, please [file an issue][issues].\n\n[issues]: https://github.com/danijar/ninjax/issues\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/danijar/ninjax",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ninjax",
    "package_url": "https://pypi.org/project/ninjax/",
    "platform": null,
    "project_url": "https://pypi.org/project/ninjax/",
    "project_urls": {
      "Homepage": "http://github.com/danijar/ninjax"
    },
    "release_url": "https://pypi.org/project/ninjax/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "General Modules for JAX",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16976215,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77062ce34dfe9859fd8f70264d3781838bdaa092df4013e5d3f7bc2b6e3289fe",
          "md5": "09c37b5e86b20877e19d9810b8fd9488",
          "sha256": "4c43a1878f3acc26945d84a715eedb41db4cb7a61f178c7f30480976102243e1"
        },
        "downloads": -1,
        "filename": "ninjax-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "09c37b5e86b20877e19d9810b8fd9488",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1176,
        "upload_time": "2022-05-23T04:03:22",
        "upload_time_iso_8601": "2022-05-23T04:03:22.598236Z",
        "url": "https://files.pythonhosted.org/packages/77/06/2ce34dfe9859fd8f70264d3781838bdaa092df4013e5d3f7bc2b6e3289fe/ninjax-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "820149d32bb611887222ae14ab5bc41a5984cee0e8643db7fc73a39f8176c26e",
          "md5": "739c23dd05073f7e90f12bdb103908ff",
          "sha256": "cb454d200cc1aecab7acaece445750ba141ceb56f695f64a4f7465ad509d1e5e"
        },
        "downloads": -1,
        "filename": "ninjax-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "739c23dd05073f7e90f12bdb103908ff",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4651,
        "upload_time": "2022-05-24T08:02:04",
        "upload_time_iso_8601": "2022-05-24T08:02:04.373172Z",
        "url": "https://files.pythonhosted.org/packages/82/01/49d32bb611887222ae14ab5bc41a5984cee0e8643db7fc73a39f8176c26e/ninjax-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9d687546d078d420cfb66fb21483d0da60f5208c0bdf15266ff0f5b5d75cc1da",
          "md5": "ceeb901ef7a66ac95243935e9f8c9e2a",
          "sha256": "bf6c118fccc05cdae437b4a29e727e7060cbce1343110fbd1cea196f792bbd57"
        },
        "downloads": -1,
        "filename": "ninjax-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ceeb901ef7a66ac95243935e9f8c9e2a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4753,
        "upload_time": "2022-05-24T08:07:07",
        "upload_time_iso_8601": "2022-05-24T08:07:07.124058Z",
        "url": "https://files.pythonhosted.org/packages/9d/68/7546d078d420cfb66fb21483d0da60f5208c0bdf15266ff0f5b5d75cc1da/ninjax-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "684c25a289e1c2f70d5756e4ba85af988242427fdbc326749854f148c0f49efc",
          "md5": "168f624fef026bf10eae51c99e937bb7",
          "sha256": "42af4ed76d40365843a016ce9c8d7c1e7fec5795acefb39bd2a60a6bc4498ff3"
        },
        "downloads": -1,
        "filename": "ninjax-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "168f624fef026bf10eae51c99e937bb7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4769,
        "upload_time": "2022-05-24T08:08:39",
        "upload_time_iso_8601": "2022-05-24T08:08:39.331286Z",
        "url": "https://files.pythonhosted.org/packages/68/4c/25a289e1c2f70d5756e4ba85af988242427fdbc326749854f148c0f49efc/ninjax-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56ff868c46cb46a794c6d4a0e50f225c9ea2bcb7b3549d93d827b40fa9b5f957",
          "md5": "d656b58504a95af40181dc109b6b410a",
          "sha256": "242be36ed0afcdfd5d7569d785f6a14ef28198fb0a2b0b71b3bc1a43427654e4"
        },
        "downloads": -1,
        "filename": "ninjax-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d656b58504a95af40181dc109b6b410a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4768,
        "upload_time": "2022-05-24T08:09:19",
        "upload_time_iso_8601": "2022-05-24T08:09:19.493367Z",
        "url": "https://files.pythonhosted.org/packages/56/ff/868c46cb46a794c6d4a0e50f225c9ea2bcb7b3549d93d827b40fa9b5f957/ninjax-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "342645b3707b692c42f989161c1093a56db01f981723008326c97db5ed3d45b5",
          "md5": "a891f05026b30f641a2cc9f50453d66d",
          "sha256": "3767e7cbd0a6179e3c7e6f8834e0cf3c629774b242f744d10aa10099d96fb9b7"
        },
        "downloads": -1,
        "filename": "ninjax-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a891f05026b30f641a2cc9f50453d66d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6432,
        "upload_time": "2022-05-24T20:01:10",
        "upload_time_iso_8601": "2022-05-24T20:01:10.871395Z",
        "url": "https://files.pythonhosted.org/packages/34/26/45b3707b692c42f989161c1093a56db01f981723008326c97db5ed3d45b5/ninjax-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d899695ccef28f426194cb8f96e407f0e5e1cd9b018293152398f47995d74330",
          "md5": "3740caab49772b90e384e89dc7745e13",
          "sha256": "c22f295d15f78bf3ef46da2368d9d28294c61ef11953b5eef3d6be51c026d773"
        },
        "downloads": -1,
        "filename": "ninjax-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3740caab49772b90e384e89dc7745e13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 6535,
        "upload_time": "2022-05-24T20:37:40",
        "upload_time_iso_8601": "2022-05-24T20:37:40.169109Z",
        "url": "https://files.pythonhosted.org/packages/d8/99/695ccef28f426194cb8f96e407f0e5e1cd9b018293152398f47995d74330/ninjax-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9ff61b5fa408af534f3b4ce83fa7ff45cbf993cf7bb364a095c7aa249ca1ed3",
          "md5": "2eb5a6ccc7f5cedca89235ad8fe3057f",
          "sha256": "26a517d4258959da8348ebc907bf39e6f09b943ca5093335f3123fa1c39c300b"
        },
        "downloads": -1,
        "filename": "ninjax-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2eb5a6ccc7f5cedca89235ad8fe3057f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7536,
        "upload_time": "2022-05-30T00:39:43",
        "upload_time_iso_8601": "2022-05-30T00:39:43.597998Z",
        "url": "https://files.pythonhosted.org/packages/a9/ff/61b5fa408af534f3b4ce83fa7ff45cbf993cf7bb364a095c7aa249ca1ed3/ninjax-0.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7d698cd9f85111f1e51aca0337e1a32735b7a8592bcd6b338ae0d40b53028cec",
          "md5": "c51024e3efaaf4cd24c95ffc4a8b4ab6",
          "sha256": "93ef4b1169ddcda815bff15e485060e6138fe27d4083b834ef0854c8830e5e1f"
        },
        "downloads": -1,
        "filename": "ninjax-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c51024e3efaaf4cd24c95ffc4a8b4ab6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7978,
        "upload_time": "2022-07-30T16:14:13",
        "upload_time_iso_8601": "2022-07-30T16:14:13.632436Z",
        "url": "https://files.pythonhosted.org/packages/7d/69/8cd9f85111f1e51aca0337e1a32735b7a8592bcd6b338ae0d40b53028cec/ninjax-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7527ad6d2cd25b85f0f6440f0377819eb5866d2089c2d2feb00585b9b3352767",
          "md5": "0e6c8683137cbf4587cb1a179474bc59",
          "sha256": "247790d43401b44991b1a68d8c6c9e88e6f7a9426cb257cfb281117d06c09b1e"
        },
        "downloads": -1,
        "filename": "ninjax-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0e6c8683137cbf4587cb1a179474bc59",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8082,
        "upload_time": "2022-07-30T18:23:03",
        "upload_time_iso_8601": "2022-07-30T18:23:03.850907Z",
        "url": "https://files.pythonhosted.org/packages/75/27/ad6d2cd25b85f0f6440f0377819eb5866d2089c2d2feb00585b9b3352767/ninjax-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cb2a3cbbeb74fdd44bf40e4604d2fd4c9cadde226f3c0d1751e587b591ed285",
          "md5": "307c42ac2ba9300fd4598848ed0fce12",
          "sha256": "bd07fc7d0dc21a096e44b9430b3463a75bf5c4ae3ff94a706dda540e2e261499"
        },
        "downloads": -1,
        "filename": "ninjax-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "307c42ac2ba9300fd4598848ed0fce12",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8355,
        "upload_time": "2022-08-08T17:00:53",
        "upload_time_iso_8601": "2022-08-08T17:00:53.241170Z",
        "url": "https://files.pythonhosted.org/packages/2c/b2/a3cbbeb74fdd44bf40e4604d2fd4c9cadde226f3c0d1751e587b591ed285/ninjax-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fe139d17ea9b8fa4f5c69379be0d18ad5e3cc932431130eab2270cc56a491f33",
          "md5": "f80dea8fb5fc074f575b0bba7333e482",
          "sha256": "0a68d1b1d570b004cff85efbb4bc0190a5ee37d3e49f4c13d7d07e35ebbed6e0"
        },
        "downloads": -1,
        "filename": "ninjax-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f80dea8fb5fc074f575b0bba7333e482",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9552,
        "upload_time": "2022-08-11T13:29:25",
        "upload_time_iso_8601": "2022-08-11T13:29:25.987321Z",
        "url": "https://files.pythonhosted.org/packages/fe/13/9d17ea9b8fa4f5c69379be0d18ad5e3cc932431130eab2270cc56a491f33/ninjax-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f35afd50cf954319c7aa961dc563c7411fefe82aeb1a94dbeba057ab130c169",
          "md5": "d810d13bf79944384e53b15f3f7130d9",
          "sha256": "75a830fa2b13f6dafed9242eb3bd19bec4dec9b7bd2cd0aa2cf5048250fab2ae"
        },
        "downloads": -1,
        "filename": "ninjax-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d810d13bf79944384e53b15f3f7130d9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12252,
        "upload_time": "2022-08-11T17:45:10",
        "upload_time_iso_8601": "2022-08-11T17:45:10.078752Z",
        "url": "https://files.pythonhosted.org/packages/5f/35/afd50cf954319c7aa961dc563c7411fefe82aeb1a94dbeba057ab130c169/ninjax-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48a2028467843429eb29f41594e3989dfe7b1b835bb935e9c6c10252a0424345",
          "md5": "136cba07a454a10daddf90965f4830c3",
          "sha256": "9ae41803573c68ee0e27fcbfeeb34190a298d972dbfd47653d074aff5346d707"
        },
        "downloads": -1,
        "filename": "ninjax-0.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "136cba07a454a10daddf90965f4830c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12274,
        "upload_time": "2022-08-11T18:11:40",
        "upload_time_iso_8601": "2022-08-11T18:11:40.888371Z",
        "url": "https://files.pythonhosted.org/packages/48/a2/028467843429eb29f41594e3989dfe7b1b835bb935e9c6c10252a0424345/ninjax-0.6.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17f68e5a8baabe36b260dddf88d590ede6ccba3cce9441e28a58e2e9da811372",
          "md5": "6fabb8c993be9fcc084b67bd659d27f0",
          "sha256": "beb50af38b0ffca732439b82f2b999cebb8949dd313595d5e520e8b3453a89e2"
        },
        "downloads": -1,
        "filename": "ninjax-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6fabb8c993be9fcc084b67bd659d27f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12819,
        "upload_time": "2022-08-12T18:15:03",
        "upload_time_iso_8601": "2022-08-12T18:15:03.372288Z",
        "url": "https://files.pythonhosted.org/packages/17/f6/8e5a8baabe36b260dddf88d590ede6ccba3cce9441e28a58e2e9da811372/ninjax-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cac796d3bee72f3895d6d6931fcda6dc18bf90e038d9f52a2228221ce15d5417",
          "md5": "370e9ad446b21c5889cfceffd4af04eb",
          "sha256": "e96f7607e4f492c32a0ac716a1a822133da177f7696097dddf0836dda90fbf95"
        },
        "downloads": -1,
        "filename": "ninjax-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "370e9ad446b21c5889cfceffd4af04eb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12737,
        "upload_time": "2022-08-12T19:03:03",
        "upload_time_iso_8601": "2022-08-12T19:03:03.688005Z",
        "url": "https://files.pythonhosted.org/packages/ca/c7/96d3bee72f3895d6d6931fcda6dc18bf90e038d9f52a2228221ce15d5417/ninjax-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c957a6e0cc7d6863a64d4b1175e605a6a03ca0d7a0aab2025874ddc2591c22e",
          "md5": "08c3e7f5962d3aa14e4444e164fa36c3",
          "sha256": "62d01429044feb2f6be883b690d0f8cb6e6798c5a3257e4e530d0fbd570ddfa9"
        },
        "downloads": -1,
        "filename": "ninjax-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "08c3e7f5962d3aa14e4444e164fa36c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12767,
        "upload_time": "2022-08-14T14:55:33",
        "upload_time_iso_8601": "2022-08-14T14:55:33.299665Z",
        "url": "https://files.pythonhosted.org/packages/7c/95/7a6e0cc7d6863a64d4b1175e605a6a03ca0d7a0aab2025874ddc2591c22e/ninjax-0.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e75f4af47c44017c00c18c4f7ea56c05c3393a6b83d87d1b2dc3e2ccfcc5a071",
          "md5": "48423708a95730ffe00b19a36ed4757f",
          "sha256": "b5a03c01547825a57e92f2debf39e64aba493b735f6b1d1a2d9505f8e93a772a"
        },
        "downloads": -1,
        "filename": "ninjax-0.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "48423708a95730ffe00b19a36ed4757f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12773,
        "upload_time": "2022-09-20T23:59:05",
        "upload_time_iso_8601": "2022-09-20T23:59:05.562039Z",
        "url": "https://files.pythonhosted.org/packages/e7/5f/4af47c44017c00c18c4f7ea56c05c3393a6b83d87d1b2dc3e2ccfcc5a071/ninjax-0.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ed44481ceb68143a4e2715fc483f7be447662b54ffaad81608b6935dfca9ea8",
          "md5": "2535d2d25afc832c55630e0005dd27b1",
          "sha256": "df9b9f6f1f7e12fc6dc43b144eaadd73e21995a32ff952efa516774109bb6a8e"
        },
        "downloads": -1,
        "filename": "ninjax-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2535d2d25afc832c55630e0005dd27b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12762,
        "upload_time": "2022-11-21T21:44:45",
        "upload_time_iso_8601": "2022-11-21T21:44:45.451856Z",
        "url": "https://files.pythonhosted.org/packages/7e/d4/4481ceb68143a4e2715fc483f7be447662b54ffaad81608b6935dfca9ea8/ninjax-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37ee0d256168021470afec751d0c213338c4d508f18826413e6256842d986bc3",
          "md5": "88847707a4806313f70090f35240ab6f",
          "sha256": "32c4a571725a94853c1ce4339b2791f8fc54c240c2a708a0e66cfda381b6a405"
        },
        "downloads": -1,
        "filename": "ninjax-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "88847707a4806313f70090f35240ab6f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12768,
        "upload_time": "2022-11-21T21:48:47",
        "upload_time_iso_8601": "2022-11-21T21:48:47.456581Z",
        "url": "https://files.pythonhosted.org/packages/37/ee/0d256168021470afec751d0c213338c4d508f18826413e6256842d986bc3/ninjax-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c13ccb722de3e0957e82dcdf51e67144bebd40043f1af0d4537a648eb6769896",
          "md5": "876a2e60cee198221e55a59b78ed6a84",
          "sha256": "32fe727e2dea79cb375eddc8796b232af8d8507a9517c663d09b6389c28c717e"
        },
        "downloads": -1,
        "filename": "ninjax-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "876a2e60cee198221e55a59b78ed6a84",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12767,
        "upload_time": "2022-11-24T15:50:56",
        "upload_time_iso_8601": "2022-11-24T15:50:56.075420Z",
        "url": "https://files.pythonhosted.org/packages/c1/3c/cb722de3e0957e82dcdf51e67144bebd40043f1af0d4537a648eb6769896/ninjax-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a901d18e87cfb9801b1fae82ad0ec48b5edbff6fb9c77081ce46bd1485ee7eec",
          "md5": "e362da60c76195e79992ceb8879c9d9a",
          "sha256": "d80e6e3b7919385ef664026996e87a98f9962ea475c7cb0da8bdeba14cf3503e"
        },
        "downloads": -1,
        "filename": "ninjax-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e362da60c76195e79992ceb8879c9d9a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13278,
        "upload_time": "2023-02-22T13:35:09",
        "upload_time_iso_8601": "2023-02-22T13:35:09.129630Z",
        "url": "https://files.pythonhosted.org/packages/a9/01/d18e87cfb9801b1fae82ad0ec48b5edbff6fb9c77081ce46bd1485ee7eec/ninjax-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a901d18e87cfb9801b1fae82ad0ec48b5edbff6fb9c77081ce46bd1485ee7eec",
        "md5": "e362da60c76195e79992ceb8879c9d9a",
        "sha256": "d80e6e3b7919385ef664026996e87a98f9962ea475c7cb0da8bdeba14cf3503e"
      },
      "downloads": -1,
      "filename": "ninjax-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e362da60c76195e79992ceb8879c9d9a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13278,
      "upload_time": "2023-02-22T13:35:09",
      "upload_time_iso_8601": "2023-02-22T13:35:09.129630Z",
      "url": "https://files.pythonhosted.org/packages/a9/01/d18e87cfb9801b1fae82ad0ec48b5edbff6fb9c77081ce46bd1485ee7eec/ninjax-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}