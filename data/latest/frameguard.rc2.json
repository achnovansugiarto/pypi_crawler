{
  "info": {
    "author": "Hannah White",
    "author_email": "hannah.white@tutanota.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/hnnhvwht/frameguard/master/docs/img/frameguard-logo.png\">\n</p>\n\n<h2 align=\"center\">Validated Pandas DataFrames</h2>\n\nFrameGuard is a wrapper class around the Pandas DataFrame that stores and manages schema to ensure the integrity of the underlying data. The FrameGuard API allows you to append instances to the underlying DataFrame&mdash;but only if they have been successfully validated against the schema. FrameGuard checks for:\n- data type equality,\n- boundary conditions (minimum/maximum) on numerical features,\n- set membership for categorical features,\n- regex pattern matching,\n- and more!\n\nFrameGuard is presently in the alpha stage and more features and tests are being developed actively. Please send bug reports and feature requests to the [author](mailto:hannah.white@tutanota.com) or post them as [issues](https://github.com/hnnhvwht/frameguard/issues).\n\n## Quick Start\n\n### Installation\n\nInstall FrameGuard, e.g., from PyPI:\n\n```bash\n$ python -m pip install frameguard\n```\n\nFrameGuard depends on `numpy`, `pandas` and `pyyaml`.\n\n### Usage\n\nIn this example, we'll use the iris flower dataset:\n\n```python\nimport pandas as pd\nfrom sklearn.datasets import load_iris\n\niris = load_iris()\ndf = pd.DataFrame(iris[\"data\"], columns=iris[\"feature_names\"])\ntarget = pd.DataFrame(iris[\"target\"], columns=[\"species\"])\ndf = pd.concat([df, target], axis=1)\n```\n\nWe begin by importing and instantiating the `FrameGuard` class:\n\n```python\nfrom frameguard.frameguard import FrameGuard\nfg = FrameGuard(df, auto_detect=True, categories=[\"species\"])\n```\n\n```\nBuilding schema...\n=============================================================================\nSchema for feature 'sepal length (cm)':\n{'data_type': 'float64', 'allow_null': False}\n=============================================================================\nSchema for feature 'sepal width (cm)':\n{'data_type': 'float64', 'allow_null': False}\n=============================================================================\nSchema for feature 'petal length (cm)':\n{'data_type': 'float64', 'allow_null': False}\n=============================================================================\nSchema for feature 'petal width (cm)':\n{'data_type': 'float64', 'allow_null': False}\n=============================================================================\nSchema for feature 'species':\n{'data_type': 'int32', 'levels': array([0, 1, 2]), 'allow_null': False}\n=============================================================================\nDone! Created constraints for 5 features.\n```\n\nWe instructed FrameGuard to generate the schema automatically, indicating that the `\"species\"` column represents a categorical variable.\n\nSo far, so good. Let's see what happens when we try to append bad data:\n\n```python\nbatch = pd.DataFrame({\n    \"sepal length (cm)\": [4.8, 5.2, 4.7],\n    \"sepal width (cm)\": [3.3, 3.4, 3.0],\n    \"petal length (cm)\": [1.4, 1.2, 1.3],\n    \"petal width (cm)\": [0.2, 0.2, 0.3],\n    \"species\": [0, 0, 3] # Bad target label\n})\nfg.append(batch)\n```\n\n```\n---------------------------------------------------------------------------\n[...]\nValidationError: Incorrect type for 'species' in batch.\n\nDuring handling of the above exception, another exception occurred:\n[...]\nFrameGuardError: Batch does not satisfy schema. Operation cancelled...\n```\n\nThus, the integrity of the underlying DataFrame is assured.\n\nPresently, automatic schema detection is perhaps too simple for most real-world use cases. FrameGuard allows you to add and update constraints manually:\n\n```python\nfg = FrameGuard(df)\nfg.add_constraint(\n    features=[\n      \"sepal length (cm)\",\n      \"sepal width (cm)\",\n      \"petal length (cm)\",\n      \"petal width (cm)\"\n    ],\n    data_type=\"float64\",\n    allow_null=False\n)\nfg.add_constraint(\n    features=[\"species\"],\n    data_type=\"int32\",\n    levels=[0, 1, 2],\n    allow_null=False\n)\n```\n\nModifications to schemata will not be accepted if they do not match the data:\n\n```python\nfg.add_constraint(\n    features=[\"species\"],\n    data_type=\"str\",\n    levels=[\"setosa\", \"versicolor\", \"virginica\"],\n    allow_null=False\n)\n```\n\n```\nSchemaWarning: Type mismatch for 'species'. Skipping...\n```\n\nWhen we're satisfied, we can export our schema in JSON or YAML form. By default, schema are exported to the current working directory in YAML format:\n\n```python\nfg.export_schema()\n```\n\n```\nSchema exported successfully to schema-2020-11-21-162209.yml.\n```\n\nThis is what the output looks like:\n\n```yaml\nfeatures:\n  petal length (cm):\n    allow_null: false\n    data_type: float64\n  petal width (cm):\n    allow_null: false\n    data_type: float64\n  sepal length (cm):\n    allow_null: false\n    data_type: float64\n  sepal width (cm):\n    allow_null: false\n    data_type: float64\n  species:\n    allow_null: false\n    data_type: int32\n    levels:\n    - 0\n    - 1\n    - 2\n```\n\nJust as well, we may import a schema after initialization. The DataFrame will be checked automatically against the schema provided that the schema was loaded correctly:\n\n```python\nfg = FrameGuard(df)\nfg.import_schema(\"schema-2020-11-21-162209.yml\")\n```\n\n```\nSchema loaded successfully!\nValidating DataFrame...\n\nChecking feature 'sepal length (cm)'...\n\tDone checking feature 'sepal length (cm)'.\n\tFound 0 integrity violation(s).\n\nChecking feature 'sepal width (cm)'...\n\tDone checking feature 'sepal width (cm)'.\n\tFound 0 integrity violation(s).\n\nChecking feature 'petal length (cm)'...\n\tDone checking feature 'petal length (cm)'.\n\tFound 0 integrity violation(s).\n\nChecking feature 'petal width (cm)'...\n\tDone checking feature 'petal width (cm)'.\n\tFound 0 integrity violation(s).\n\nChecking feature 'species'...\n\tDone checking feature 'species'.\n\tFound 0 integrity violation(s).\n\nDone validating DataFrame. Found 0 integrity violation(s).\n```\n\nAlternatively, if you have a schema in the form of a mapping, YAML or JSON object in memory, you could load it using the `load_schema()` method.\n\n### Constraints\n\nPresently, the following constraints are supported:\n- `\"data_type\"` &ndash; the data type (NumPy types only);\n- `\"min\"` &ndash; the minimum value for numerical features;\n- `\"max\"` &ndash; the maximum value for numerical features;\n- `\"levels\"` &ndash; the allowed levels for categorical features;\n- `\"pattern\"` &ndash; a pattern for matching regular expressions;\n- `\"all_unique\"` &ndash; whether duplicated values are permitted; and\n- `\"allow_null\"` &ndash; whether null values are allowed.\n\n## Planned Updates\n\n- Write more tests and complete documentation\n- Improve automatic detection of schema\n- Add support for datetime detection and formatting\n- Add support for conformity of numeric features to statistical distributions\n\n## Authors\n\nFrameGuard is written and maintained by [Hannah White](mailto:hannah.white@tutanota.com).\n\n## Acknowledgements\n\nThe FrameGuard logo is set in Google's [Roboto Bold 700 Italic](https://fonts.google.com/specimen/Roboto).\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hnnhvwht/frameguard",
    "keywords": "pandas dataframe validation",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "frameguard",
    "package_url": "https://pypi.org/project/frameguard/",
    "platform": "",
    "project_url": "https://pypi.org/project/frameguard/",
    "project_urls": {
      "Homepage": "https://github.com/hnnhvwht/frameguard",
      "Source": "https://github.com/hnnhvwht/frameguard"
    },
    "release_url": "https://pypi.org/project/frameguard/0.1.1/",
    "requires_dist": [
      "numpy (>=1.19.1)",
      "pandas (>=1.1.0)",
      "pyyaml (>=5.3.1)"
    ],
    "requires_python": ">=3.7",
    "summary": "Validated Pandas DataFrames",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8717293,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3568eff5443259284cd3da9a4c5402f4158edee73638b10dc11a857a3e2bbc7",
          "md5": "0cabeddbf2457c915cc66b365be4fd4b",
          "sha256": "7fcf593b3f149b698bf6e5e4479b817ce5c123226ac6ac0ab5b5e7cd29048495"
        },
        "downloads": -1,
        "filename": "frameguard-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0cabeddbf2457c915cc66b365be4fd4b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10296,
        "upload_time": "2020-08-13T17:13:49",
        "upload_time_iso_8601": "2020-08-13T17:13:49.214103Z",
        "url": "https://files.pythonhosted.org/packages/d3/56/8eff5443259284cd3da9a4c5402f4158edee73638b10dc11a857a3e2bbc7/frameguard-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b396859b5210c117d816bff42d6d62d6ff2c7a3349d8630ef878527994fa86bd",
          "md5": "8724fc82bd030461185c6315dcd8f905",
          "sha256": "fa88bd68aca519fafd7a0b8b4028da20cf77acb5ef94072a12ce38ac15ac6880"
        },
        "downloads": -1,
        "filename": "frameguard-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8724fc82bd030461185c6315dcd8f905",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 12011,
        "upload_time": "2020-08-13T17:13:51",
        "upload_time_iso_8601": "2020-08-13T17:13:51.729006Z",
        "url": "https://files.pythonhosted.org/packages/b3/96/859b5210c117d816bff42d6d62d6ff2c7a3349d8630ef878527994fa86bd/frameguard-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac85906b1451ced08b4dff80e24a55378e173110942f7b88b4f7d6060b26b317",
          "md5": "4319d493030dd82531de676c50d4a14e",
          "sha256": "6cd08f95287a15d80c9c69c2c387d2a03883e2270aa9958c4c30895024a946a1"
        },
        "downloads": -1,
        "filename": "frameguard-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4319d493030dd82531de676c50d4a14e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 10306,
        "upload_time": "2020-11-21T21:52:22",
        "upload_time_iso_8601": "2020-11-21T21:52:22.389322Z",
        "url": "https://files.pythonhosted.org/packages/ac/85/906b1451ced08b4dff80e24a55378e173110942f7b88b4f7d6060b26b317/frameguard-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b152c3a4693ead02171db2fe33cccdf6808fbe0b9700fa6132e68dc8396547d1",
          "md5": "ca9a413d6d877de268cd8cc9b5f6e6f9",
          "sha256": "9da49033d5bf3bc1271ebe8a5d11d6611f80b2c400162d3e7f87ae4c62f244f2"
        },
        "downloads": -1,
        "filename": "frameguard-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ca9a413d6d877de268cd8cc9b5f6e6f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11782,
        "upload_time": "2020-11-21T21:52:23",
        "upload_time_iso_8601": "2020-11-21T21:52:23.568510Z",
        "url": "https://files.pythonhosted.org/packages/b1/52/c3a4693ead02171db2fe33cccdf6808fbe0b9700fa6132e68dc8396547d1/frameguard-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ac85906b1451ced08b4dff80e24a55378e173110942f7b88b4f7d6060b26b317",
        "md5": "4319d493030dd82531de676c50d4a14e",
        "sha256": "6cd08f95287a15d80c9c69c2c387d2a03883e2270aa9958c4c30895024a946a1"
      },
      "downloads": -1,
      "filename": "frameguard-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4319d493030dd82531de676c50d4a14e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 10306,
      "upload_time": "2020-11-21T21:52:22",
      "upload_time_iso_8601": "2020-11-21T21:52:22.389322Z",
      "url": "https://files.pythonhosted.org/packages/ac/85/906b1451ced08b4dff80e24a55378e173110942f7b88b4f7d6060b26b317/frameguard-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b152c3a4693ead02171db2fe33cccdf6808fbe0b9700fa6132e68dc8396547d1",
        "md5": "ca9a413d6d877de268cd8cc9b5f6e6f9",
        "sha256": "9da49033d5bf3bc1271ebe8a5d11d6611f80b2c400162d3e7f87ae4c62f244f2"
      },
      "downloads": -1,
      "filename": "frameguard-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ca9a413d6d877de268cd8cc9b5f6e6f9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 11782,
      "upload_time": "2020-11-21T21:52:23",
      "upload_time_iso_8601": "2020-11-21T21:52:23.568510Z",
      "url": "https://files.pythonhosted.org/packages/b1/52/c3a4693ead02171db2fe33cccdf6808fbe0b9700fa6132e68dc8396547d1/frameguard-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}