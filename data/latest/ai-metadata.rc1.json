{
  "info": {
    "author": "AutoDeployAI",
    "author_email": "autodeploy.ai@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# AI-Metadata\n\n_AI-Metadata_ is a helper library to detect and extract metadata about AI/ML models for deployment and visualization.\n\n## Features\nIt's critical that an inference system needs to know their metadata information of each deployed model when it serves many AI/ML models.\nFor a single model, its model type, runtime, serialization method, inputs and outputs schema, and other informative fields for visualization, like model metrics, training optimization params, and so on. \n\nAI-metadata provides a unified API to detect and extract metadata automatically, it supports the following models by default, and more types will be added to the list.\n* Scikit-learn\n* XGBoost\n* LightGBM\n* Keras and Tensorflow(tf.keras)\n* Pytorch\n* PySpark\n* PMML\n* ONNX\n* Custom\n\n## Prerequisites\n - Python 2.7 or >= 3.5\n\n## Dependencies\n  - numpy\n  - pandas\n  - scikit-learn\n  - pypmml\n  - onnxruntime\n\n## Installation\n\n```bash\npip install pypmml\n```\n\nOr install the latest version from github:\n\n```bash\npip install --upgrade git+https://github.com/autodeployai/ai-metadata.git\n```\n\n## Usage\nWrap the built model by the static method `wrap` of [`MetadataModel`](ai_metadata/base.py) with several optional arguments.\n```python\nfrom ai_metadata import MetadataModel\n\nMetadataModel.wrap(model,\n                   mining_function: 'MiningFunction' = None,\n                   x_test=None,\n                   y_test=None,\n                   data_test=None,\n                   source_object=None,\n                   **kwargs)\n```\n\n### Data preparation for the following examples except of Spark:\n```python\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\n\nX, y = datasets.load_iris(return_X_y=True, as_frame=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n```\n\n### 1. Example: scikit learn model\n```python\nfrom sklearn.svm import SVC\n\n# Train a SVC model\nsvc = SVC(probability=True)\nsvc.fit(X_train, y_train)\n\n# Wrap the model with test datasets\nmodel = MetadataModel.wrap(svc,\n                           x_test=X_test,\n                           y_test=y_test)\nmodel_metadata = model.model_metadata(as_json=True, indent=2)\n```\n\nModel metadata example of the SVC model in json:\n```json\n{\n  \"runtime\": \"Python3.10\",\n  \"type\": \"scikit-learn\",\n  \"framework\": \"Scikit-learn\",\n  \"framework_version\": \"1.1\",\n  \"function_name\": \"classification\",\n  \"serialization\": \"joblib\",\n  \"algorithm\": \"SVC\",\n  \"metrics\": {\n    \"accuracy\": 0.9736842105263158\n  },\n  \"inputs\": [\n    {\n      \"name\": \"sepal length (cm)\",\n      \"sample\": 5.0,\n      \"type\": \"float64\"\n    },\n    {\n      \"name\": \"sepal width (cm)\",\n      \"sample\": 3.2,\n      \"type\": \"float64\"\n    },\n    {\n      \"name\": \"petal length (cm)\",\n      \"sample\": 1.2,\n      \"type\": \"float64\"\n    },\n    {\n      \"name\": \"petal width (cm)\",\n      \"sample\": 0.2,\n      \"type\": \"float64\"\n    }\n  ],\n  \"targets\": [\n    {\n      \"name\": \"target\",\n      \"sample\": 0,\n      \"type\": \"int64\"\n    }\n  ],\n  \"outputs\": [],\n  \"object_source\": null,\n  \"object_name\": null,\n  \"params\": {\n    \"C\": \"1.0\",\n    \"break_ties\": \"False\",\n    \"cache_size\": \"200\",\n    \"class_weight\": \"None\",\n    \"coef0\": \"0.0\",\n    \"decision_function_shape\": \"ovr\",\n    \"degree\": \"3\",\n    \"gamma\": \"scale\",\n    \"kernel\": \"rbf\",\n    \"max_iter\": \"-1\",\n    \"probability\": \"True\",\n    \"random_state\": \"None\",\n    \"shrinking\": \"True\",\n    \"tol\": \"0.001\",\n    \"verbose\": \"False\"\n  }\n}\n```\n\n### 2. Example: PMML model\n```python\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom nyoka import skl_to_pmml # Export the pipeline of scikit-learn to PMML\n\n# Train a pipeline \npipeline = Pipeline([\n    (\"scaler\", StandardScaler()),\n    (\"model\", DecisionTreeClassifier())\n])\npipeline.fit(X_train, y_train)\n\n# Export to PMML\npmml_model = './pmml-cls.xml'\nskl_to_pmml(pipeline, X_train.columns, y_train.name, pmml_model)\n\n# Wrap the model with test datasets\nmodel = MetadataModel.wrap(pmml_model,\n                           x_test=X_test,\n                           y_test=y_test)\nmodel_metadata = model.model_metadata(as_json=True, indent=2)\n```\n\nModel metadata example of the PMML model in json:\n```json\n{\n  \"runtime\": \"PyPMML\",\n  \"type\": \"pmml\",\n  \"framework\": \"PMML\",\n  \"framework_version\": \"4.4.1\",\n  \"function_name\": \"classification\",\n  \"serialization\": \"pmml\",\n  \"algorithm\": \"TreeModel\",\n  \"metrics\": {\n    \"accuracy\": 0.9736842105263158\n  },\n  \"inputs\": [\n    {\n      \"name\": \"sepal length (cm)\",\n      \"sample\": 5.0,\n      \"type\": \"double\"\n    },\n    {\n      \"name\": \"sepal width (cm)\",\n      \"sample\": 3.2,\n      \"type\": \"double\"\n    },\n    {\n      \"name\": \"petal length (cm)\",\n      \"sample\": 1.2,\n      \"type\": \"double\"\n    },\n    {\n      \"name\": \"petal width (cm)\",\n      \"sample\": 0.2,\n      \"type\": \"double\"\n    }\n  ],\n  \"targets\": [\n    {\n      \"name\": \"target\",\n      \"sample\": 0,\n      \"type\": \"integer\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"name\": \"probability_0\",\n      \"type\": \"double\"\n    },\n    {\n      \"name\": \"probability_1\",\n      \"type\": \"double\"\n    },\n    {\n      \"name\": \"probability_2\",\n      \"type\": \"double\"\n    },\n    {\n      \"name\": \"predicted_target\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"object_source\": null,\n  \"object_name\": null,\n  \"params\": {}\n}\n```\n\n### 3. Example: ONNX model\n```python\nfrom sklearn.linear_model import LogisticRegression\nimport onnxmltools # Export to ONNX\nfrom onnxmltools.convert.common.data_types import FloatTensorType\n\n# Train a Logistic Regression model\nclf = LogisticRegression()\nclf.fit(X_train, y_train)\n\n# Export to ONNX\ninitial_types = [('X', FloatTensorType([None, X_test.shape[1]]))]\nonnx_model = onnxmltools.convert_sklearn(clf, initial_types=initial_types)\n\n# Wrap the model with test datasets\nmodel = MetadataModel.wrap(onnx_model,\n                           x_test=X_test,\n                           y_test=y_test)\nmodel_metadata = model.model_metadata(as_json=True, indent=2)\n```\n\nModel metadata example of the ONNX model in json:\n```json\n{\n  \"runtime\": \"ONNXRuntime\",\n  \"type\": \"onnx\",\n  \"framework\": \"ONNX\",\n  \"framework_version\": \"8\",\n  \"function_name\": \"classification\",\n  \"serialization\": \"onnx\",\n  \"algorithm\": \"LinearClassifier\",\n  \"metrics\": {\n    \"accuracy\": 1.0\n  },\n  \"inputs\": [\n    {\n      \"name\": \"X\",\n      \"type\": \"tensor(float)\",\n      \"shape\": [\n        null,\n        4\n      ],\n      \"sample\": [\n        [\n          5.0,\n          3.2,\n          1.2,\n          0.2\n        ]\n      ]\n    }\n  ],\n  \"targets\": [],\n  \"outputs\": [\n    {\n      \"name\": \"output_label\",\n      \"type\": \"tensor(int64)\",\n      \"shape\": [\n        null\n      ]\n    },\n    {\n      \"name\": \"output_probability\",\n      \"type\": \"seq(map(int64,tensor(float)))\",\n      \"shape\": []\n    }\n  ],\n  \"object_source\": null,\n  \"object_name\": null,\n  \"params\": {}\n}\n```\n\n### 4. Example: Spark MLlib model\n```python\nfrom pyspark.sql import SparkSession\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.ml import Pipeline\n\n# Convert pandas dataframe to the dataframe of Spark\nspark = SparkSession.builder.getOrCreate()\niris = datasets.load_iris(as_frame=True)\ndf = spark.createDataFrame(iris.frame)\ndf_train, df_test = df.randomSplit([0.75, 0.25])\n\n# Train a pipeline of Spark\nassembler = VectorAssembler(inputCols=iris.feature_names,\n                            outputCol='features')\nlr = LogisticRegression().setLabelCol(iris.target.name)\npipeline = Pipeline(stages=[assembler, lr])\npipeline_model = pipeline.fit(df_train)\n\n# Wrap the model with test dataset\nmodel = MetadataModel.wrap(pipeline_model,\n                           data_test=df_test)\nmodel_metadata = model.model_metadata(as_json=True, indent=2)\n```\n\nModel metadata example of the Spark model in json:\n```json\n{\n  \"runtime\": \"Python3.10\",\n  \"type\": \"mllib\",\n  \"framework\": \"Spark\",\n  \"framework_version\": \"3.3\",\n  \"function_name\": \"classification\",\n  \"serialization\": \"spark\",\n  \"algorithm\": \"PipelineModel\",\n  \"metrics\": {\n    \"accuracy\": 0.8780487804878049\n  },\n  \"inputs\": [\n    {\n      \"name\": \"sepal length (cm)\",\n      \"sample\": 4.8,\n      \"type\": \"float\"\n    },\n    {\n      \"name\": \"sepal width (cm)\",\n      \"sample\": 3.4,\n      \"type\": \"float\"\n    },\n    {\n      \"name\": \"petal length (cm)\",\n      \"sample\": 1.6,\n      \"type\": \"float\"\n    },\n    {\n      \"name\": \"petal width (cm)\",\n      \"sample\": 0.2,\n      \"type\": \"float\"\n    }\n  ],\n  \"targets\": [\n    {\n      \"name\": \"target\",\n      \"sample\": 0.0,\n      \"type\": \"float\"\n    }\n  ],\n  \"outputs\": [],\n  \"object_source\": null,\n  \"object_name\": null,\n  \"params\": {\n    \"VectorAssembler_43c37a968944\": {\n      \"outputCol\": \"features\",\n      \"handleInvalid\": \"error\",\n      \"inputCols\": [\n        \"sepal length (cm)\",\n        \"sepal width (cm)\",\n        \"petal length (cm)\",\n        \"petal width (cm)\"\n      ]\n    },\n    \"LogisticRegression_98944bb4d096\": {\n      \"aggregationDepth\": 2,\n      \"elasticNetParam\": 0.0,\n      \"family\": \"auto\",\n      \"featuresCol\": \"features\",\n      \"fitIntercept\": true,\n      \"labelCol\": \"target\",\n      \"maxBlockSizeInMB\": 0.0,\n      \"maxIter\": 100,\n      \"predictionCol\": \"prediction\",\n      \"probabilityCol\": \"probability\",\n      \"rawPredictionCol\": \"rawPrediction\",\n      \"regParam\": 0.0,\n      \"standardization\": true,\n      \"threshold\": 0.5,\n      \"tol\": 1e-06\n    }\n  }\n}\n```\n\n\nYou can refer to the tests of different model types for more details.\n\n\n## Support\nIf you have any questions about the _AI-Metadata_ library, please open issues on this repository.\n\n## License\n_AI-metadata_ is licensed under [APL 2.0](http://www.apache.org/licenses/LICENSE-2.0).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/autodeployai/ai-metadata/archive/v1.0.0.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/autodeployai/ai-metadata",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ai-metadata",
    "package_url": "https://pypi.org/project/ai-metadata/",
    "platform": null,
    "project_url": "https://pypi.org/project/ai-metadata/",
    "project_urls": {
      "Download": "https://github.com/autodeployai/ai-metadata/archive/v1.0.0.tar.gz",
      "Homepage": "https://github.com/autodeployai/ai-metadata"
    },
    "release_url": "https://pypi.org/project/ai-metadata/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Detect and extract metadata about AI/ML models for deployment and visualization",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16575686,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "484eff8911eaaefbf3a9624872dbf6c261c4bc9474f6d53ee21cdd84ae094039",
          "md5": "53001bc4aa00b26594487449180dc06d",
          "sha256": "e2ad9c3b139c71d9b2783408bd4cae08bca4349afb87da7ed7d9bde481ecf6e4"
        },
        "downloads": -1,
        "filename": "ai-metadata-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "53001bc4aa00b26594487449180dc06d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29087,
        "upload_time": "2023-01-26T13:43:18",
        "upload_time_iso_8601": "2023-01-26T13:43:18.163887Z",
        "url": "https://files.pythonhosted.org/packages/48/4e/ff8911eaaefbf3a9624872dbf6c261c4bc9474f6d53ee21cdd84ae094039/ai-metadata-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "484eff8911eaaefbf3a9624872dbf6c261c4bc9474f6d53ee21cdd84ae094039",
        "md5": "53001bc4aa00b26594487449180dc06d",
        "sha256": "e2ad9c3b139c71d9b2783408bd4cae08bca4349afb87da7ed7d9bde481ecf6e4"
      },
      "downloads": -1,
      "filename": "ai-metadata-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "53001bc4aa00b26594487449180dc06d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 29087,
      "upload_time": "2023-01-26T13:43:18",
      "upload_time_iso_8601": "2023-01-26T13:43:18.163887Z",
      "url": "https://files.pythonhosted.org/packages/48/4e/ff8911eaaefbf3a9624872dbf6c261c4bc9474f6d53ee21cdd84ae094039/ai-metadata-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}