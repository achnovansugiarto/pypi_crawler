{
  "info": {
    "author": "lit",
    "author_email": "tt137378245@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Rado_InterFace_test\n\n基于pytest + requests + excel/json/yaml + locust + allure 的接口测试与接口性能自动化测试框架。\n\n>执行前置条件 - 读取接口信息（请求方法、URL、参数）- 发送请求 - 验证结果（checkpoints、validate）- 执行后置收尾工作。\n\n\n\n## 功能介绍\n\n| 读取excel中测试用例                                          |\n| ------------------------------------------------------------ |\n| 读取json中测试用例                                           |\n| 读取测试管理平台数据库中测试用例                             |\n| 读取ymal中测试用例                                           |\n| 读取excel中测试用例数据通过提前定义的模板自动生成            |\n| 读取json中测试用例数据通过提前定义的模板自动生成             |\n| 读取测试管理平台数据库中测试用例数据通过提前定义的模板自动生成 |\n| 读取ymal中测试用例数据通过提前定义的模板自动生成             |\n| 手动编写测试用例代码（需要符合PyTest规范）                   |\n| 支持HTTP协议的不同方式请求，如GET、POST、PUT、DELETE、PATCH等请求方式。 |\n| 支持RPC协议的不同方式请求，如                                |\n| HTTP请求支持URL请求参数及BODY请求参数                        |\n| HTTP请求支持JSON格式的请求                                   |\n| HTTP请求支持XML等数据格式的请求                              |\n| 仅验证status_code                                            |\n| 验证status_code + response_body的整体验证                    |\n| 验证status_code + response_body指定字段的验证（使用默认字段查找路径） |\n| 验证status_code + response_body指定字段的验证（在validator中给定字段查找路径） |\n| == 验证                                                      |\n| in验证                                                       |\n| len验证                                                      |\n| key验证                                                      |\n| 用例执行log                                                  |\n| 用例执行结果json文件记录                                     |\n| 用例执行结果数据库记录                                       |\n| excel/json/ymal/数据库四种方式维护的测试用例相互转换（导入、导出工具） |\n| 通过配置文件进行测试配置管理                                 |\n| 从SWAGGER或者其他支持HAR标准，抓包工具测试工具中解析接口信息自动生成基本测试用例工具 |\n| 提供项目脚手架，能够通过cli等方式自动生成通用性较高的测试项目结构 |\n| 一键执行，能够指定执行特定用例。                             |\n| allure测试报告生成，导出。                                   |\n| 支持容器方式运行。                                           |\n| 集成locust， 能够进行基本的接口性能测试。                    |\n|                                                              |\n\n\n\n## QuikStart\n\n- 命令行接口\n- 项目结构\n- 测试用例编写\n- 测试代码编写\n- 执行测试\n- 生成测试报告\n\n\n\n### 命令行接口\n\n```\n# rado --help\nUsage: rado [OPTIONS] COMMAND [ARGS]...\n\n  Rado.\n\n  The interface test and interface performance automation test framework\n  based on pytest + requests + excel/json/yaml + locust + allure.\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  check   Check your testcase file(excel).\n  create  Create a new project.\n  gen     Generate init test code based on code template\n  run     Execute test cases.\n\n```\n\n\n\n### 项目结构\n\n生成的测试项目结构如下\n\n> ├── conftest.py  \n> ├── core  \n> │   └── __init__.py  \n> ├── docker-compose.yml  \n> ├── __init__.py  \n> ├── logs  \n> │   └── __init__.py  \n> ├── preparedData  \n> │   ├── __init__.py  \n> │   └── Project_ModelName_test_data.xlsx  \n> ├── Readme.md  \n> ├── Result  \n> │   └── __init__.py  \n> ├── test_case  \n> │   └── __init__.py  \n> └── utilse  \n>     └── __init__.py  \n\n其中：\n\n - preparedData: 存放测试用例信息，当前使用Excel进行管理。\n\n - test_case: 存放测试用例代码。\n\n   > File: test_case.py —— 相当于功能模块/组件/业务场景级别的TestSuite。  \n   >\n   > ​\tClass: TestCase —— 相当于单个接口级别TestSuite。\n   >\n   > ​\t\tMethod： test_case() —— 测试用例\n\n- result： 存放测试数据、日志及测试报告。\n\n- utilse： 存放在编写测试用例代码时需要使用到的工具函数，例如读取从Excel中读取数据。\n\n- core： 存放自定义的Exception，Logger等实例，避免部分模块的循环导入。\n\n- 顶层__init__.py: 存放BaseTest类，所有的测试用例均基于该类，提供如下特殊方法：\n\n  1. `setup_class()`: 在执行TestCase Class中所有测试用例之前进行一些准备工作，例如准备测试数据、登录系统等操作。\n\n  2. `teardown_class`: 在执行TestCase Class中所有测试用例之后进行一些收尾工作，例如清除测试数据、重新初始化环境等操作。\n\n  3. `setup_method()`: 在执行某个测试用例之前进行一些准备工作，例如准备测试数据、登录系统等操作。`\n\n  4. `teardown_method`: 在执行单个测试用例之后进行一些收尾工作，例如清除测试数据、重新初始化环境等操作。\n\n  5. `make_requests()`:  根据测试用例描述信息，使用Request模块发送对应http请求，包含主要请求参数method、url等的简单校验。\n\n  6. `diff_respons()`:  比对接口返回结果与测试用例中描述的预期返回结果。\n\n     > 当前主要对Respons状态码，Body进行对比。\n\n\n\n### 编写测试用例\n\n- 接口测试用例编写（Excel）\n- 测试用例代码编写\n\n#### 接口测试用例编写\n\n基于要因分析表编写测试用例，包含接口相关信息，如请求方法、URL、参数、预期返回值等信息。\n\n其中，Excel至少包含如下18个字段，并且顺序与名称需要相同。\n\n| 测试用例番号 | 测试用例名     | level | 预置条件       | 测试内容                     | 预期结果                          | category | automated | caseid | method | url                                                      | data | status_code | checkpoints                                                  | validate | parameterize | result |\n| ------------ | -------------- | ----- | -------------- | ---------------------------- | --------------------------------- | -------- | --------- | ------ | ------ | -------------------------------------------------------- | ---- | ----------- | ------------------------------------------------------------ | -------- | ------------ | ------ |\n| Insert_001   | 插入接口空参数 | 1     | 1.插入接口可用 | 1.调用数据插入接口 2.插入{ } | 1.插入失败 2.respones消息提示正确 | 异常系   | 2         | 9033   | GET    | [/api/tests/](http://192.168.20.47:8080/datanode/simple) | {}   | 422         | {   \"code\":\"422\",   \"detail\":    {     \"test_para_a\":[\"Missing data for required field.\"],     \"test_para_b\":[\"Missing data for required field.\"]    },   \"message\":\"\\u8bf7\\u6c42\\u6570\\u636e\\u6821\\u9a8c\\u5931\\u8d25\" } |          |              |        |\n|              |                |       |                |                              |                                   |          |           |        |        |                                                          |      |             |                                                              |          |              |        |\n\n\n\n- level：测试用例等级，一般正常系为`1`，异常系为`2`以上，其中测试等级为1的测试用例用于指派冒烟测试\n- automated：该值为`2`表示该条用例为自动执行，值为`1`表示手动执行（这么设计是为了适应Testlink的神逻辑）\n\n- data： 该用例的接口请求参数\n- caseid：测试用例id，在测试用例上传测试用例管理平台后获得（当前为testlink给出）\n- method： 接口请求方法\n-   url： 接口的endpoint\n- status_code： 接口返回的状态码\n- checkpoints ：为接口预期返回结果检查项。若为字典，会将该字典中的每个key：vcalue取出与返回的body进行逐项对比，若为列表或空，会进行全等对比\n- validate： 标记结果验证器的验证方式，枚举值。可填0/1\n\n- parameterize :  该条用例是否需要进行参数化. 值为`1`需要参数化,值为`0`不需要参数化\n- result：标记用例执行结果，枚举，可选值：成功/失败/阻塞/未执行\n\n#### 实例：\n\n需测试接口信息：\n\n```\nurl：/api/tests\n\nparameters:\n\t\"test_para_a\"\n\t\tdescription: \"the tests api's first para\"\n\t\trequired: true\n\t\ttype: string\n\n\t\"test_para_b\"\n\t\tdescription: \"the tests api's first para\"\n\t\trequired: true\n\t\ttype: int\n\nrespons:\n\t200:\n\t\t{\n        \t\"status_code\": 200,\n            \"content\": {\n            \t\"para_a\":\"sys.cpu.nice\",\n             \t\"para_b\":1531719554123\n            }\n        }\n\n\t422:\n\t\t{\n        \t\"code\":\"422\",\n          \t\"detail\":\n           \t{\n            \t\"test_para_a\":[\"Missing data for required field.\"],\n            \t\"test_para_b\":[\"Missing data for required field.\"]\n           \t},\n          \t\"message\":\"\\u8bf7\\u6c42\\u6570\\u636e\\u6821\\u9a8c\\u5931\\u8d25\"\n         \t}\n\t\t}\n\n```\n\n\n\n接口测试用例编写：\n\n| 测试用例番号 | 测试用例名              | level | 预置条件       | 测试内容                                                     | 预期结果                          | category | automated | caseid | method | url                                                      | data                                                         | status_code | checkpoints                                                  | validate                                                     | result | 关联JIRA |\n| ------------ | ----------------------- | ----- | -------------- | ------------------------------------------------------------ | --------------------------------- | -------- | --------- | ------ | ------ | -------------------------------------------------------- | ------------------------------------------------------------ | ----------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------ | -------- |\n| Insert_001   | 插入接口空参数          | 1     | 1.插入接口可用 | 1.调用数据插入接口 2.插入{ }                                 | 1.插入失败 2.respones消息提示正确 | 异常系   | 2         | 9033   | GET    | [/api/tests/](http://192.168.20.47:8080/datanode/simple) | {}                                                           | 422         | {   \"code\":\"422\",   \"detail\":    {     \"test_para_a\":[\"Missing data for required field.\"],     \"test_para_b\":[\"Missing data for required field.\"]    },   \"message\":\"\\u8bf7\\u6c42\\u6570\\u636e\\u6821\\u9a8c\\u5931\\u8d25\" } | {     \"code\": [\"==\"],     \"detail\": [\"==\", \"len_2\"],     \"message\": [\"==\"] } |        |          |\n| Insert_002   | 测试value参数缺失插入   | 1     | 1.插入接口可用 | 1.调用数据插入接口 2.插入{\"metric\":\"cpu\", \"timestamp\":14785269422,  tags:{\"tag1\":\"name1\" } } | 1.插入失败 2.respones消息提示正确 | 异常系   | 2         | 9036   | GET    | [/api/tests/](http://192.168.20.47:8080/datanode/simple) | {           \"test_para_a\": \"sys.cpu.nice\" }                  | 422         | {   \"code\":\"422\",   \"detail\":    {     \"test_para_a\":[\"Missing data for required field.\"],     \"test_para_b\":[\"Missing data for required field.\"]    },   \"message\":\"\\u8bf7\\u6c42\\u6570\\u636e\\u6821\\u9a8c\\u5931\\u8d25\" } | {     \"code\": [\"==\"],     \"detail\": [\"in\", \"len_1\"],     \"message\": [\"==\"] } |        |          |\n| Insert_003   | 测试value为值为null插入 | 2     | 1.插入接口可用 | 1.调用数据插入接口 2.插入{\"metric\":\"cpu\", \"timestamp\":14785269422, \"value\":null \"tags\":{\"tag1\":\"name2\" } } | 1.插入失败 2.respones消息提示正确 | 异常系   | 2         | 9039   | GET    | [/api/tests/](http://192.168.20.47:8080/datanode/simple) | {           \"test_para_a\": \"sys.cpu.nice\",           \"test_para_b\": 1531719554123 } | 200         | {   \"para_a\":\"sys.cpu.nice\",   \"para_b\":1531719554123  }     |                                                              |        |          |\n\n\n\n### 编写测试代码\n\n\n\n```\n\n```\n\n\n\n\n\n### 执行测试\n\n- 准备运行测试所需的依赖环境\n- 执行测试\n\n\n\n#### 准备运行环境（只需要在首次运行时执行）\n\n- 激活虚拟环境：`pipenv shell`，若报错则指定Python解释器的路径`pipenv shell --python /path/to/python`。\n\n- 安装依赖包：`pipenv install`\n\n\n\n#### 执行测试\n\n- 方式一： 执行`rado run --test_case /test_case/UserManager `  \n\n- 方式二： \n```\npy.test -vv --junitxml=Result/result_{datetime.now().time()}.xml --alluredir=Result/result_{datetime.now().time()}/\n```\n\n> 上述两种执行方式等价。\n\n- `--junitxml=Result/result_{datetime.now().time()}.xml` 将junitxml格式的测试结果文件保存在Result目录下的result_当前时间.xml\n- `alluredir=Result/result_{datetime.now().time()}/`  将Allure所需的结果数据文件保存在Result目录下的result_当前时间点/目录下。\n\n实例:\n\n```\n\n```\n\n\n\n\n\n### 生成报告\n\n> 该部分还存在问题，参数化之后的报告展示结果不符合预期结果。\n\n```\ndocker-compose up -d allure\n```\n\n上述命令执行成功后，本地浏览器访问`http://127.0.0.1:4040`\n\n\n\n\n\n##  validate\n\n- 验证原理\n- 验证方式\n- 实例\n\n### 验证原理\n\n```\n# 全等验证（validate不填写）\n# 接口实际返回值resp_body:\n{\n\t\"code\":\"422\",\n    \"detail\":\n    {\n    \t\"test_para_a\":[\"Missing data for required field.\"],\n        \"test_para_b\":[\"Missing data for required field.\"]\n    },\n    \"message\":\"\\u8bf7\\u6c42\\u6570\\u636e\\u6821\\u9a8c\\u5931\\u8d25\"\n}\n\n# checkpoints:\n{\n\t\"code\":\"422\",\n  \t\"detail\":\n   \t{\n    \t\"test_para_a\":[\"Missing data for required field.\"],\n    \t\"test_para_b\":[\"Missing data for required field.\"]\n   \t},\n  \t\"message\":\"\\u8bf7\\u6c42\\u6570\\u636e\\u6821\\u9a8c\\u5931\\u8d25\"\n}\n\n```\n\n\n```\n# 部分验证（validate=0）\n# 接口实际返回值resp_body:\n{\n\t\"code\":\"422\",\n    \"detail\":\n    {\n    \t\"test_para_a\":[\"Missing data for required field.\"],\n        \"test_para_b\":[\"Missing data for required field.\"]\n    },\n    \"message\":\"\\u8bf7\\u6c42\\u6570\\u636e\\u6821\\u9a8c\\u5931\\u8d25\"\n}\n\n# checkpoints:\n{\n\t\"code\":\"422\",\n  \t\"test_para_a\":[\"Missing data for required field.\"],\n  \t\"test_para_b\":[\"Missing data for required field.\"]\n}\n\n```\n\n\n\n\n### 验证方式\n\n- 全等验证\n- 部分验证\n\n\n\n#### 全等验证\n\n\n\n- checkpoints 与 resp_body 做整体全等验证\n\n  当validate 列的值为“1”时, 对整体进行全等验证\n\n  > assert 语句为: `assert resp_body == checkpoints`\n\n\n\n\n\n\n#### 部分验证\n\n`validate= 0`, 验证resp_body 中的某个key 的value是否包含在checkpoints对应key的value中.\n\n> step1：先取到 需要验证的 key，即checkpoints.keys()\n>\n> step2：在resp_body 对获取key的value值如下，$..key获取resp_body 所有key的值\n>\n> `resp_data = jsonpath(\"resp_body\", \"$..key\")`\n>\n> step3：对于唯一key，去全等验证，对于存在重复key ，适用于\"==\"或者\"in\"，如下例中id填写一个也可以\n\n\n```\n部分验证，在 返回的response中带有 随机id 的场景就比较方便，或者返回中response内容比较多\n而我们需要去 check一些比较重要的字段。\n\n部分验证，对于返回的response 有多个重复 字段的， 用列表处理，如 \n# 接口实际返回值resp_body:\n{\n\t\"code\":\"200\",\n    \"data\":[{\n        \"id\":\"123456\"\n    },\n    {\n        \"id\":\"654321\"\n    }\n    ]\n}\n# checkpoints:\n{\n\t\"code\":\"200\",\n  \t\"id\":[\"123456\",\"654321\"] # ”==“\n}\n{\n\t\"code\":\"200\",\n  \t\"id\":[\"123456\"] # ”in“\n}\n\n```\n\n\n\n\n\n## 架构\n\n暂无。\n\n\n\n\n\n## RoadMap\n\n### 1.0.0\n\n| 读取excel中测试用例                                          |\n| ------------------------------------------------------------ |\n| 读取excel中测试用例数据通过提前定义的模板自动生成            |\n| 手动编写测试用例代码（需要符合PyTest规范）                   |\n| 支持HTTP协议的不同方式请求，如GET、POST、PUT、DELETE、PATCH等请求方式。 |\n| HTTP请求支持URL请求参数及BODY请求参数                        |\n| HTTP请求支持JSON格式的请求                                   |\n| 仅验证status_code                                            |\n| 验证status_code + response_body的整体验证                    |\n| 验证status_code + response_body指定字段的验证（使用默认字段查找路径） |\n| == 验证                                                      |\n| 用例执行log                                                  |\n| 提供项目脚手架，能够通过cli等方式自动生成通用性较高的测试项目结构 |\n| 托管至PyPI，文档托管至readthedocs                            |\n\n\n\n### 1.1.0\n\n| 读取测试管理平台数据库中测试用例                             |\n| ------------------------------------------------------------ |\n| 读取测试管理平台数据库中测试用例数据通过提前定义的模板自动生成 |\n| 验证status_code + response_body指定字段的验证（在validator中给定字段查找路径） |\n| 用例执行结果数据库记录                                       |\n| 通过配置文件进行测试配置管理                                 |\n\n\n\n\n\n## 详细设计\n\n\n\n### 功能详细设计\n\n(暂无)\n\n\n\n### 接口详细设计\n\n(暂无)\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/TheoTT/my_doc",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Rado",
    "package_url": "https://pypi.org/project/Rado/",
    "platform": "",
    "project_url": "https://pypi.org/project/Rado/",
    "project_urls": {
      "Homepage": "https://github.com/TheoTT/my_doc"
    },
    "release_url": "https://pypi.org/project/Rado/0.0.2/",
    "requires_dist": [
      "allure-pytest (==2.6.5)",
      "Click (==7.0)",
      "colorama (==0.4.1)",
      "colorlog (==4.0.2)",
      "datatest (==0.9.6)",
      "jsonpath (==0.81)",
      "paramiko (==2.5.0)",
      "xlrd (==1.2.0)",
      "requests (==2.22.0)"
    ],
    "requires_python": "",
    "summary": "The InterFace Test Framework based on PyTest, Request and Allure",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 5409326,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1623d9bfaa7afd5efa812cf34b07e84cc525e28c5f445b2705387d9000f08b93",
          "md5": "ab6d940e7ca44cd3cf15b48d3bd80e62",
          "sha256": "9b6f3af60ed4638b534f4708b98861beca54b0915ff6d9b694971177ad0cf244"
        },
        "downloads": -1,
        "filename": "Rado-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab6d940e7ca44cd3cf15b48d3bd80e62",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 13059,
        "upload_time": "2019-06-13T11:27:17",
        "upload_time_iso_8601": "2019-06-13T11:27:17.295733Z",
        "url": "https://files.pythonhosted.org/packages/16/23/d9bfaa7afd5efa812cf34b07e84cc525e28c5f445b2705387d9000f08b93/Rado-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a0f786c95a6cc5505165a48f7f2d1109244742651f9d8d7f639b60015b927bf",
          "md5": "e353f29e6bf0d64357f12fa94e0deb2e",
          "sha256": "082c82af2e73043a2141b31608f9c5b6f67d0a1531070915e8ad25fc6ea5faf5"
        },
        "downloads": -1,
        "filename": "Rado-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e353f29e6bf0d64357f12fa94e0deb2e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8646,
        "upload_time": "2019-06-13T11:27:20",
        "upload_time_iso_8601": "2019-06-13T11:27:20.004076Z",
        "url": "https://files.pythonhosted.org/packages/2a/0f/786c95a6cc5505165a48f7f2d1109244742651f9d8d7f639b60015b927bf/Rado-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c6b997b31c851f6d48c09a5f7e97a4a6afbe61e9133e469a3e0f87360d335502",
          "md5": "b3304bb1fab49f1416fbc32100766351",
          "sha256": "c93e420e000d1d564c5e56b94d1a91d1eab401f82a562407a7a6a96eb944bdd1"
        },
        "downloads": -1,
        "filename": "Rado-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3304bb1fab49f1416fbc32100766351",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 17400,
        "upload_time": "2019-06-17T09:31:21",
        "upload_time_iso_8601": "2019-06-17T09:31:21.458225Z",
        "url": "https://files.pythonhosted.org/packages/c6/b9/97b31c851f6d48c09a5f7e97a4a6afbe61e9133e469a3e0f87360d335502/Rado-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70d55d444aa91a9e59f25d38c7a2fc7bfc0158e1d834a0041ac732506d80c17e",
          "md5": "7a953bb51c924dd4c2e96111fbb9bee6",
          "sha256": "2cf6b42b8f8951eab995da640dad27e71c04719a0a118e71433d28a812a8d929"
        },
        "downloads": -1,
        "filename": "Rado-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7a953bb51c924dd4c2e96111fbb9bee6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16152,
        "upload_time": "2019-06-17T09:31:23",
        "upload_time_iso_8601": "2019-06-17T09:31:23.154811Z",
        "url": "https://files.pythonhosted.org/packages/70/d5/5d444aa91a9e59f25d38c7a2fc7bfc0158e1d834a0041ac732506d80c17e/Rado-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c6b997b31c851f6d48c09a5f7e97a4a6afbe61e9133e469a3e0f87360d335502",
        "md5": "b3304bb1fab49f1416fbc32100766351",
        "sha256": "c93e420e000d1d564c5e56b94d1a91d1eab401f82a562407a7a6a96eb944bdd1"
      },
      "downloads": -1,
      "filename": "Rado-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b3304bb1fab49f1416fbc32100766351",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 17400,
      "upload_time": "2019-06-17T09:31:21",
      "upload_time_iso_8601": "2019-06-17T09:31:21.458225Z",
      "url": "https://files.pythonhosted.org/packages/c6/b9/97b31c851f6d48c09a5f7e97a4a6afbe61e9133e469a3e0f87360d335502/Rado-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "70d55d444aa91a9e59f25d38c7a2fc7bfc0158e1d834a0041ac732506d80c17e",
        "md5": "7a953bb51c924dd4c2e96111fbb9bee6",
        "sha256": "2cf6b42b8f8951eab995da640dad27e71c04719a0a118e71433d28a812a8d929"
      },
      "downloads": -1,
      "filename": "Rado-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7a953bb51c924dd4c2e96111fbb9bee6",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16152,
      "upload_time": "2019-06-17T09:31:23",
      "upload_time_iso_8601": "2019-06-17T09:31:23.154811Z",
      "url": "https://files.pythonhosted.org/packages/70/d5/5d444aa91a9e59f25d38c7a2fc7bfc0158e1d834a0041ac732506d80c17e/Rado-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}