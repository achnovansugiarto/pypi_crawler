{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# freezeyt\n\nStatic web page generator created by the Czech Python community.\n\n\n## What this does\n\nFreezeyt is a static webpage *freezer*.\nIt takes a Python web application and turns it into a set of files\nthat can be served by a simple server like [GitHub Pages] or\nPython's [http.server].\n\n[GitHub Pages]: https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages\n[http.server]: https://docs.python.org/3/library/http.server.html\n\nFreezeyt is compatible with all Python web frameworks that use the common\n[Web Server Gatweay Interface] (WSGI)\n\n[Web Server Gatweay Interface]: https://www.python.org/dev/peps/pep-3333/\n\n\n## Installation\n\nFreezeyt requires Python 3.6 or above.\n\nIt is highly recommended to create and activate a separate virtual\nenvironment for this project.\nYou can use [`venv`], `virtualenv`, Conda, containers or any other kind\nof virtual environment.\n\n[`venv`]: https://docs.python.org/3/library/venv.html?highlight=venv#module-venv\n\nThe tool can be installed using:\n\n```\n$ python -m pip install .\n```\n\n\n## Usage\n\nTo use freezeyt, you need a Python web application.\nYou can use the [example Flask app].\n\n[example Flask app]: https://flask.palletsprojects.com/en/1.1.x/quickstart/\n\nYour WSGI application should be named `app`.\nBoth the application and Freezeyt must be importable (installed)\nin your environment.\n\nRun freezeyt with the name of your application and the\noutput directory. For example:\n\n```shell\n$ python -m freezeyt my_app _build\n```\n\nFreezeyt may overwrite the build directory (here, `_build`),\nremoving all existing files from it.\n\nFor more options, see Configuration below.\n\n\n### Python API\n\nFreezeyt also has a Python API, the `freeze` function\nthat takes an application to freeze and a configuration dict:\n\n```python\nfrom freezeyt import freeze\nfreeze(app, config)\n```\n\nThe `config` should be a dict as if read from a YAML configuration\nfile (see Configuration below).\n\nFrom asynchronous code running in an `asyncio` event loop,\nyou can call `freeze_async` instead of `freeze`.\n\n\n## Configuration\n\nWhile common options can be given on the command line,\nyou can have full control over the freezing process with a YAML\nconfiguration file or a variable with the configuration.\nYou can specify a config file using the `-c/--config` option,\nfor example:\n\n```shell\n$ python -m freezeyt my_app _build -c freezeyt.yaml\n```\n\nThe configuration variable should be a dictionary.\nTo pass the config variable, use the `-C/--import-config` option,\nfor example:\n\n```shell\n$ python -m freezeyt my_app _build -C my_app:freezeyt_config\n```\n\nHere is an example configuration file:\n\n```yaml\noutput: ./_build/   # The website will be saved to this directory\nprefix: https://mysite.example.com/subpage/\nextra_pages:\n    # Let freezeyt know about URLs that are not linked from elsewhere\n    /robots.txt\n    /easter-egg.html\nextra_files:\n    # Include additional files in the output:\n    # Static files\n    static:\n        copy_from: static/\n    # Web host configuration\n    CNAME: https://mysite.example.com/\n    \".nojekyll\": ''\n    googlecc704f0f191eda8f.html:\n        copy_from: google-verification.html\nstatus_handlers:\n    # If a redirect page (HTTP status 3xx) is found, warn but don't fail\n    \"3xx\": warn\n```\n\nThe following options are configurable:\n\n### Module Name\n\nThe module that contains the application must be given on the\ncommand line.\nIn it, Freezyt looks for the variable `app`.\nA different variable can be specified using `:`.\n\nExamples:\n\n    application\nor\n\n    folder1.folder2.application\nor\n\n    my_app:wsgi_application\n\n\n### Output\n\nTo outupt the frozen website to a directory, specify\nthe directory name:\n\n```yaml\noutput: ./_build/\n```\n\nOr use the full form – using the `dir` *saver*:\n\n```yaml\noutput:\n    type: dir\n    dir: ./_build/\n```\n\nIf output is not specified in the configuration file,\nyou must specify the oputput directory on the command line.\nSpecifying it both on the command line and in the config file\nis an error.\n\nIf there is any existing content in the output directory,\nfreezeyt will either remove it (if the content looks like a previously\nfrozen website) or raise an error.\nBest practice is to remove the output directory before freezing.\n\n\n\n#### Output to dict\n\nFor testing, `freezeyt` can output to a dictionary rather than save\nfiles to the disk.\nThis can be configured with:\n\n```yaml\noutput:\n    type: dict\n```\n\nIn this case, the `freeze()` function returns a dictionary of filenames\nand their contents.\nFor example, a site with `/`, `/second_page/` and `/images/smile.png`\nwill be represented as:\n\n```python\n{\n    'index.html': b'<html>...',\n    'second_page': {\n        'index.html': b'<html>...',\n    },\n    'images': {\n        'smile.png': b'\\x89PNG\\r\\n\\x1a\\n\\x00...',\n    },\n}\n```\n\nThis is not useful in the CLI, as the return value is lost.\n\n\n### Prefix\n\nThe URL where the application will be deployed can be\nspecified with:\n\n```yaml\nprefix: http://localhost:8000/\n```\nor\n```yaml\nprefix: https://mysite.example.com/subpage/\n```\n\nFreezeyt will freeze all pages starting with `prefix` that\nit finds.\n\nThe prefix can also be specified on thecommand line with e.g.:\n`--prefix=http://localhost:8000/`.\nThe CLI argument has priority over the config file.\n\n\n### Extra pages\n\nURLs of pages that are not reachable by following links from the homepage\ncan specified as “extra” pages in the configuration:\n\n```yaml\nextra_pages:\n    - /extra/\n    - /extra2.html\n```\n\nFreezeyt will freeze these pages in addition to those it\nfinds by following links.\n\nExtra pages may also be given on the command line,\ne.g. `--extra-page /extra/ --extra-page /extra2.html`.\nThe lists from CLI and the config file are merged together.\n\nYou can also specify extra pages using a Python generator,\nspecified using a module name and function name as follows:\n\n```yaml\nextra_pages:\n    - generator: my_app:generate_extra_pages\n```\n\nThe `generate_extra_pages` function should take the application\nas argument and return an iterable of URLs.\n\nWhen using the Python API, a generator for extra pages can be specified\ndirectly as a Python object, for example:\n\n```python\nconfig = {\n   ...\n   'extra_pages': [{'generator': my_generator_function}],\n}\nanother_config = {\n   ...\n   'extra_pages': [my_generator_function],\n}\n```\n\n\n### Extra files\n\nExtra files to be included in the output can be specified,\nalong with their content.\n\nThis is useful for configuration of your static server.\n(For pages that are part of your website, we recommend\nadding them to your application rather than as extra files.)\n\nFor example, the following config will add 3 files to\nthe output:\n\n```yaml\nextra_files:\n      CNAME: mysite.example.com\n      \".nojekyll\": ''\n      config/xyz: abc\n```\n\nYou can also specify extra files using Base64 encoding or\na file path, like so:\n\n\n```yaml\nextra_files:\n    config.dat:\n        base64: \"YWJjZAASNA==\"\n    config2.dat:\n        copy_from: included/config2.dat\n```\n\nIt's possible to recursively copy an entire directory using `copy_from`,\nas in:\n\n\n```yaml\nextra_files:\n    static:\n        copy_from: static/\n```\n\nExtra files cannot be specified on the CLI.\n\n\n### Clean up\n\nIf an error occurs during the \"freeze\" process, Freezeyt will delete the incomplete output directory.\nThis prevents, for example, uploading incomplete results to a web hosting by mistake.\n\nIf you want to keep the incomplete directory (for example,\nto help debugging), you can use the `--no-cleanup` switch\nor the `cleanup` key  in the configuration file:\n\n```yaml\ncleanup: False\n```\n\nThe command line switch has priority over the configuration.\nUse `--no-cleanup` to override `cleanup: False` from the config.\n\n\n### Comparison of MIME type and file type\n\nFreezeyt checks whether the file extensions in its output\ncorrespond to the MIME types served by the app.\nIf there's a mismatch, freezeyt fails, because this means a server\nwouldn't be able to serve the page correctly.\n\n#### Default MIME type\n\nIt is possible to specify the MIME type used for files without an extension.\nFor example, if your server of static pages defaults to plain text files,\nuse:\n\n```yaml\ndefault_mimetype=text/plain\n```\n\nIf the default MIME type isn't explicitly configured in YAML configuration,\nthen the `freezeyt` uses value `application/octet-stream`.\n\nThe default mimetype cannot be specified on the CLI.\n\n#### Recognizing file types from extensions\n\nThere is possibility to modify the way how to determine file type\nfrom file extension.\nYou can setup your own `get_mimetype` function.\n\nFreezeyt will register your own function, if you specify it in configuration\nYAML file as:\n\n```yaml\nget_mimetype=module:your_function\n```\n\nIf the `get_mimetype` is not defined in configuration file,\nthen `freezeyt` calls the python function `mimetypes.guess_type`\nand uses the mimetype (the first element) it returns.\n\n`get_mimetype` can be defined as:\n* strings in the form `\"module:function\"`, which name the function to call,\n* Python functions (if configuring `freezeyt` from Python, e.g. as a `dict`,\n  rather than YAML).\n\nThe `get_mimetype`:\n* gets one argument - the `filepath` as `str`\n\n* returns file MIME types as a `list` of MIME types\n  (e.g. `[\"text/html\"]` or `[\"audio/wav\", \"audio/wave\"]`).\n\nIf `get_mimetype` returns `None`, `freezeyt` will use the configured `default_mimetype`\n(see *Default MIME type* above).\n\nThe get_mimetype function cannot be specified on the CLI.\n\n\n#### Using a mime-db database\n\nThere is an option to use [the MIME type database from the `jshttp` project](https://github.com/jshttp/mime-db/blob/master/db.json),\nor a database with the same structure.\n(This is the database used by GitHub Pages).\nThe database will be used to get file MIME type from file suffix.\n\nTo use this database, add the path to the JSON file to `freezeyt` configuration:\n```yaml\nmime_db_file=path/to/mime-db.json\n```\nThis is equivalent to setting `get_mimetype` to a function that maps\nextensions to filetypes according to the database.\n\nThe mime_db file cannot be specified on the CLI.\n\n\n### Progress bar and logging\n\nThe CLI option `--progress` controls what `freezeyt` outputs as it\nhandles pages:\n\n* `--progress=log`: Output a message about each frozen page to stdout.\n* `--progress=bar`: Draw a status bar in the terminal. Messages about\n  each frozen page are *also* printed to stdout.\n* `--progress=none`: Don't do any of this.\n\nThe default is `bar` if stdout is a terminal, and `log` otherwise.\n\nIt is possible to configure this in the config file using the plugins\n`freezeyt.progressbar:ProgressBarPlugin` and `freezeyt.progressbar:LogPlugin`.\nSee below on how to enable plugins.\n\n### Configuration version\n\nTo ensure that your configuration will work unchanged in newer versions of freezeyt,\nyou should add the current version number, `1`, to your configuration like this:\n\n```yaml\nversion: 1\n```\n\nThis is not mandatory. If the version is not given, the configuration may\nnot work in future versions of freezeyt.\n\nThe version parameter is not accepted on the command line.\n\n### Plugins\n\nIt is possible to extend `freezeyt` with *plugins*, either ones that\nship with `freezeyt` or external ones.\n\nPlugins are added using configuration like:\n\n```yaml\nplugins:\n    - freezeyt.progressbar:ProgressBar\n    - mymodule:my_plugin\n```\n\n#### Custom plugins\n\nA plugin is a function that `freezeyt` will call before starting to\nfreeze pages.\n\nIt is passed a `FreezeInfo` object as argument (see the `start` hook below).\nUsually, the plugin will call `freeze_info.add_hook` to register additional\nfunctions.\n\n\n### Hooks\n\nIt is possible to register *hooks*, functions that are called when\nspecific events happen in the freezing process.\n\nFor example, if `mymodule` defines functions `start` and `page_frozen`,\nyou can make freezeyt call them using this configuration:\n\n```yaml\nhooks:\n    start:\n        - mymodule:start\n    page_frozen:\n        - mymodule:page_frozen\n```\n\nWhen using the Python API, a function can be used instead of a name\nlike `mymodule:start`.\n\n#### `start`\n\nThe function will be called when the freezing process starts,\nbefore any other hooks.\n\nIt is passed a `FreezeInfo` object as argument.\nThe object has the following attributes:\n\n* `add_url(url, reason=None)`: Add the URL to the set of pages to be frozen.\n  If that URL was frozen already, or is outside the `prefix`, does nothing.\n  If you add a `reason` string, it will be used in error messages as the reason\n  why the added URL is being handled.\n* `add_hook(hook_name, callable)`: Register an additional hook function.\n* `total_task_count`: The number of pages `freezeyt` currently “knows about” –\n  ones that are already frozen plus ones that are scheduled to be frozen.\n* `done_task_count`: The number of pages that are done (either successfully\n  frozen, or failed).\n* `failed_task_count`: The number of pages that failed to freeze.\n\n#### `page_frozen`\n\nThe function will be called whenever a page is processed successfully.\nIt is passed a `TaskInfo` object as argument.\nThe object has the following attributes:\n\n* `get_a_url()`: returns a URL of the page, including `prefix`.\n  Note that a page may be reachable via several URLs; this function returns\n  an arbitrary one.\n* `path`: the relative path the content is saved to.\n* `freeze_info`: a `FreezeInfo` object. See the `start` hook for details.\n* `exception`: for failed tasks, the exception raised;\n  `None` otherwise.\n* `reasons`: A list of strings explaining why the given page was visited.\n  (Note that as the freezing progresses, new reasons may be added to\n  existing tasks.)\n\n\n#### `page_failed`\n\nThe function will be called whenever a page is not saved due to an\nexception.\nIt is passed a `TaskInfo` object as argument (see the `page_frozen` hook).\n\n\n### Status handling\n\nThe `status_handlers` option defines the way to handle HTTP statuses.\nFor example, the default reaction to a `404 NOT FOUND` status is to quit with an error,\nbut you can customize `freezeyt` to ignore the default error.\n\n```yaml\nstatus_handlers:\n    '404': ignore\n```\n\n`freezeyt` includes a few pre-defined handlers:\n* `'warn'`: will save the content and send warn message to stdout\n* `'save'`: `freezeyt` will save the body of the page.\n  This is the default for status `200 OK`.\n* `'follow'`: `freezeyt` will save content from the redirected location\n  (this requires a `Location` header, which is usually added for redirects – `3xx` statuses).\n  Redirects to external pages are not supported.\n* `'ignore'`: `freezeyt` will not save any content for the page\n* `'error'`: fail; the page will not be saved and `freeze()` will raise\n  an exception.\n\nThe user can also define a custom handler as:\n* a string in the form `'my_module:custom_handler'`, which names a handler\n  function to call,\n* a Python function (if configuring `freezeyt` from Python rather than from\n  YAML).\n\nThe handler function takes one argument, `task` (TaskInfo): information about the freezing task.\nSee the `TaskInfo` hook for a description.\nA custom handler should call one of the pre-defined handlers (e.g. `freezeyt.status_handlers.follow`) and return the return value from it.\n\nFreezeyt's default functions, like `follow`, can be imported from `freezeyt.status_handlers` and used\nfrom the custom handlers.\n\nFor example, `status_handlers` would be specified as:\n\n```yaml\nstatus_handlers:\n    '202': warn\n    '301': follow\n    '404': ignore\n    '418': my_module:custom_handler\n    '429': ignore\n    '5xx': error\n```\n\nNote that the status code must be a string, so it needs to be quoted in the YAML file.\n\nA range of statuses can be specified as a number (`1-5`) followed by lowercase `xx`.\n(Other \"wildcards\" like `50x` are not supported.)\n\nStatus handlers cannot be specified in the CLI.\n\n\n### URL finding\n\n`freezeyt` discovers new links in the application by URL finders. URL finders\nare functions whose goal is to find url of specific MIME type.\n`freezeyt` offers different configuration options to use URL finders:\n\n* use predefined URL finders for `text/html` or `text/css` (default),\n* define your own URL finder as your function,\n* turn off some of finders (section below)\n\nExample of configuration:\n\n```yaml\nurl_finders:\n    text/html: get_html_links\n    text/css: get_css_links\n```\n\nKeys in the `url_finders` dict are MIME types;\n\nValues are URL finders, which can be defined as:\n* strings in the form `\"module:function\"`, which name the finder\n  function to call,\n* strings like `get_html_links`, which name a function from the\n  `freezeyt.url_finders` module, or\n* Python functions (if configuring `freezeyt` from Python rather than\n  YAML).\n\n\nAn URL finder gets these arguments:\n* page content `BinaryIO`,\n* the absolute URL of the page, as a `string`,\n* the HTTP headers, as a list of tuples (WSGI).\n\nThe function should return an iterator of all URLs (as strings) found\nin the page's contents, as they would appear in `href` or `src` attributes.\nSpecifically:\n\n- The URLs can be relative.\n- External URLs (i.e. those not beginning with `prefix`) should be included.\n\nFinder functions may be asynchronous:\n- The function can be defined with `async def` (i.e. return a\n  coroutine). If it is, freezeyt will use the result after `await`.\n- The function may be an asynchronous generator (defined with `async def`\n  and use `yield`). If so, freezeyt will use async iteration to handle it.\n\nThe `freezeyt.url_finders` module includes the default finders `get_html_links`\nand `get_css_links`, and their asynchronous variants `get_html_links_async`\nand `get_css_links_async`.\n\nURL finders cannot be specified in the CLI.\n\n#### Default `get_html_links`\n\nThe default URL finder for HTML pages looks in `src` and `href` attributes\nof all tags in the document.\nIt currently does not handle other links, such as embedded CSS, but it\nmay be improved in the future.\n\n#### Default `get_css_links`\n\nThe default URL finder for CSS uses the `css_parser` library to find all\nlinks in a stylesheet.\n\n#### Disabling default URL finders\n\nIf a finder is not explictly specified in the configuration file, `freezeyt` will use the\ndefault for certain MIME type. For example, if you specify\n`text/html: my_custom_finder` only, `freezeyt` will use the default finder\nfor `text/css`.\n\nYou can disable this behaviour:\n\n```yaml\nuse_default_url_finders: false\n```\n\n### Path generation\n\nIt is possible to customize the filenames that URLs are saved under\nusing the `url_to_path` configuration key, for example:\n\n```yaml\nurl_to_path: my_module:url_to_path\n```\n\nThe value can be:\n* a strings in the form `\"module:function\"`, which names the\n  function to call (the function can be omitted along with the colon,\n  and defaults to `url_to_path`), or\n* a Python function (if configuring `freezeyt` from Python rather than\n  YAML).\n\nThe function receives the *path* of the URL to save, relative to the `prefix`,\nand should return a path to the saved file, relative to the build directory.\n\nThe default function, available as `freezeyt.url_to_path`, adds `index.html`\nif the URL path ends with `/`.\n\n`url_to_path` cannot be specified in the CLI.\n\n\n## Examples of CLI usage\n\n```shell\n$ python -m freezeyt my_app _build/\n```\n\n```shell\n$ python -m freezeyt my_app _build/ --prefix https://pyladies.cz/\n```\n\n```shell\n$ python -m freezeyt my_app _build/ -c config.yaml\n```\n\n```shell\n$ python -m freezeyt my_app _build/ --prefix https://pyladies.cz/ --extra-page /extra1/ --extra-page /extra2/\n```\n\n```shell\n$ python -m freezeyt my_app _build/ --prefix https://pyladies.cz/ --extra-page /extra1/ --extra-page /extra2/ --config path/to/config.yaml\n```\n\n\n## Contributing\n\nAre you interested in this project? Awesome!\nAnyone who wants to be part of this project and who's willing\nto help us is very welcome.\nJust started with Python? Good news!\nWe're trying to target mainly the beginner Pythonistas who\nare seeking opportunities to contribute to (ideally open source)\nprojects and who would like to be part of an open source community\nwhich could give them a head start in their\n(hopefully open source :)) programming careers.\n\nSoo, what if you already have some solid Python-fu?\nFirst, there's always something new to learn, and second,\nwe'd appreciate if you could guide the “rookies” and pass on\nsome of the knowledge onto them.\n\nContributions, issues and feature requests are welcome.\nFeel free to check out the [issues] page if you'd like to\ncontribute.\n\n[issues]: https://github.com/encukou/freezeyt/issues\n\n\n## How to contribute\n\n1. Clone this repository to your local computer:\n\n```shell\n$ git clone https://github.com/encukou/freezeyt\n```\n\n2. Then fork this repo to your GitHub account\n3. Add your forked repo as a new remote to your local computer:\n\n```shell\n$ git remote add <remote_label> https://github.com/<username>/freezeyt\n```\n\n4. Create a new branch at your local computer\n\n```shell\n$ git branch <branch_name>\n```\n\n5. Switch to your new branch\n\n```shell\n$ git switch <branch_name>\n```\n\n6. Update the code\n7. Push the changes to your forked repo on GitHub\n\n```shell\n$ git push <remote_label> <branch_name>\n```\n\n8. Finally, make a pull request from your GitHub account to origin\n\n\n### Installing for development\n\n`freezeyt` can be installed from the current directory:\n\n```shell\n$ python -m pip install -e .\n```\n\nIt also has several groups of extra dependecies:\n* `blog` for the project blog\n* `dev` for development and running tests\n* `typecheck` for mypy type checks\n\nEach group can be installed separately:\n\n```shell\n$ python -m pip install -e .\"[typecheck]\"\n```\n\nor you can install more groups at once:\n```shell\n$ python -m pip install -e .\"[blog, dev, typecheck]\"\n```\n\n\n### Using an in-development copy of freezeyt\n\n* Set `PYTHONPATH` to the directory with `freezeyt`, for example:\n  * Unix: `export PYTHONPATH=\"/home/name/freezeyt\"`\n  * Windows: `set PYTHONPATH=C:\\Users\\Name\\freezeyt`\n\n* Install the web application you want to freeze. Either:\n  * install the application using `pip`, if possible, or\n  * install the application's dependencies and `cd` to the app's directory.\n\n* Run freezeyt, for example:\n  * `python -m freezeyt demo_app_url_for _build --prefix http://freezeyt.test/foo/`\n\n\n\n### Tests\n\nFor testing the project it's necessary to install additional requirements:\n\n```\n$ python -m pip install .[dev]\n```\n\nTo run tests in your current environment, use pytest:\n\n```\n$ python -m pytest\n```\n\nTo run tests with multiple Python versions (if you have them installed),\ninstall `tox` using `python -m pip install tox` and run it:\n\n```\n$ tox\n```\n\n#### Environ variables for tests\n\nSome test scenarios compare freezeyt's results with expected output.\nWhen the files with expected output don't exist yet,\nthey can be created by setting the environment variable\n`TEST_CREATE_EXPECTED_OUTPUT` to `1`:\n\n**Unix**\n\n```shell\n$ export TEST_CREATE_EXPECTED_OUTPUT=1\n```\n\n**Windows**\n\n```shell\n> set TEST_CREATE_EXPECTED_OUTPUT=1\n```\n\nIf you set the variable to any different value or leave it unset\nthen the files will not be recreated\n(tests will fail if the files are not up to date).\n\nWhen output changes, you need to first delete the expected output,\nregenerate it by running tests with `TEST_CREATE_EXPECTED_OUTPUT=1`,\nand check that the difference is correct.\n\n### Tools and technologies used\n\n* [PEP 3333 - Python WSGI](https://www.python.org/dev/peps/pep-3333/)\n* [flask](https://flask.palletsprojects.com/en/1.1.x/)\n* [pytest](https://docs.pytest.org/en/latest/)\n* [html5lib](https://html5lib.readthedocs.io/en/latest/)\n\n\n### How to watch progress\nUnfortunately our progress of development can be watched only in Czech language.\n\nWatch the progress:\n\n* [Youtube playlist](https://www.youtube.com/playlist?list=PLFt-PM7J_H3EU5Oez3ZSVjY5pZJttP2lT)\n\nOther communication channels and info can be found here:\n* [Google doc in Czech](https://tinyurl.com/freezeyt)\n\n\n### Freezeyt Blog\n\nWe keep a blog about the development of Freezeyt.\nIt is available [here](https://encukou.github.io/freezeyt/).\n\n**Be warned:** some of it is in the Czech language.\n\n#### Blog development\n\nThe blog was tested on Python version 3.8.\n\nThe blog is a Flask application.\nTo run it, install additional dependecies with\n`python -m pip install .[blog]`.\nThen, set the environment variable `FLASK_APP` to the path of the\nblog app.\nAlso set `FLASK_ENV` to \"development\" for easier debugging.\nThen, run the Flask server.\n\n1. On Microsoft Windows:\n\n```shell\n> python -m pip install .[blog]\n> set FLASK_APP=freezeyt_blog/app.py\n> set FLASK_ENV=development\n> flask run\n```\n\n2. On UNIX:\n\n```shell\n$ python -m pip install .[blog]\n$ export FLASK_APP=freezeyt_blog/app.py\n$ export FLASK_ENV=development\n$ flask run\n```\n\nThe URL where your blog is running will be printed on the terminal.\n\nOnce you're satisfied with how the blog looks, you can freeze it with:\n\n```shell\n$ python -m freezeyt freezeyt_blog.app freezeyt_blog/build\n```\n\n#### Adding new articles to freezeyt blog\n\nArticles are writen in the `Markdown` language.\n\n**Article** - save to directory `../freezeyt/freezeyt_blog/articles`\n\n**Images to articles** - save to directory `../freezeyt/freezeyt_blog/static/images`\n\nIf te files are saved elsewhere, the blog will not work correctly.\n\n\n## History\n\n### Why did the project start?\n\nThe Czech Python community uses a lot of static web pages that\nare generated from a web application for community purposes.\nFor example, organizing and announcing workshops, courses,\nor meetups.\n\nThe community has been so far relying on [Frozen Flask] and [elsa]\nin order to generate the static web content.\nThe new [freezer] ought to be used with any arbitrary Python Web\napplication framework ([Flask], [Django], [Tornado], etc.).\nSo the community won't be limited by one web app technology for\ngenerating static pages anymore.\n\n[Frozen Flask]: https://pythonhosted.org/Frozen-Flask/\n[elsa]: https://github.com/pyvec/elsa/\n[freezer]: https://github.com/encukou/freezeyt\n[Flask]: https://flask.palletsprojects.com/en/1.1.x/\n[Django]: https://www.djangoproject.com/\n[Tornado]: https://www.tornadoweb.org/en/stable/\n\n\n## Authors\nSee GitHub history for all [contributors](https://github.com/encukou/freezeyt/graphs/contributors).\n\n\n## License\n\nThis project is licensed under the [MIT License](LICENCE.MIT).\nMay it serve you well.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/encukou/freezeyt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "freezeyt",
    "package_url": "https://pypi.org/project/freezeyt/",
    "platform": null,
    "project_url": "https://pypi.org/project/freezeyt/",
    "project_urls": {
      "Homepage": "https://github.com/encukou/freezeyt"
    },
    "release_url": "https://pypi.org/project/freezeyt/1.0/",
    "requires_dist": [
      "html5lib",
      "click",
      "css-parser",
      "pyyaml",
      "Werkzeug",
      "enlighten",
      "dataclasses ; python_version < \"3.7\"",
      "flask ; extra == 'blog'",
      "markdown-it-py ; extra == 'blog'",
      "pygments ; extra == 'blog'",
      "pytest (>=6.2.0) ; extra == 'dev'",
      "flask ; extra == 'dev'",
      "pyflakes ; extra == 'dev'",
      "Django ; extra == 'dev'",
      "bottle ; extra == 'dev'",
      "falcon ; extra == 'dev'",
      "mypy ; extra == 'typecheck'",
      "types-click ; extra == 'typecheck'",
      "types-PyYAML ; extra == 'typecheck'",
      "types-Werkzeug ; extra == 'typecheck'",
      "types-html5lib ; extra == 'typecheck'"
    ],
    "requires_python": "",
    "summary": "Generate static web pages from WSGI apps",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13701422,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bcaeef8d32b252b4be394c8c76d2e399b020c9fc334aca21862a604331d09605",
          "md5": "a3be9cc3a59273cf2a905b16ea99fc10",
          "sha256": "ece0f31eb5e657b3977e721b64a04f50b2fe2ac7f2e8c136b1a68705ec12f268"
        },
        "downloads": -1,
        "filename": "freezeyt-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3be9cc3a59273cf2a905b16ea99fc10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 19305,
        "upload_time": "2021-08-18T17:50:51",
        "upload_time_iso_8601": "2021-08-18T17:50:51.259051Z",
        "url": "https://files.pythonhosted.org/packages/bc/ae/ef8d32b252b4be394c8c76d2e399b020c9fc334aca21862a604331d09605/freezeyt-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a8f182ffec6830406bed977175ced30bdffd07fcb990ba090d6f090eb393b85d",
          "md5": "75d795654e9dd5892b758079378f6e67",
          "sha256": "4dba0d99d04e748702ed5829f0a188aadab2866b1a335ddd6c91409955936b81"
        },
        "downloads": -1,
        "filename": "freezeyt-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75d795654e9dd5892b758079378f6e67",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 29384,
        "upload_time": "2022-05-03T17:10:14",
        "upload_time_iso_8601": "2022-05-03T17:10:14.898706Z",
        "url": "https://files.pythonhosted.org/packages/a8/f1/82ffec6830406bed977175ced30bdffd07fcb990ba090d6f090eb393b85d/freezeyt-1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "331e2e4ccc0b61db9e77e2d85f6365bb13e580d4f1f817e33b52adc22b5e76ee",
          "md5": "5cfa535ee22e8b9676f08f31b00f231f",
          "sha256": "f24632a58d5e5e79dd586d5e9bf4cd62ebea1ddf30ca65f5e5a536eeb4ecfe6f"
        },
        "downloads": -1,
        "filename": "freezeyt-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5cfa535ee22e8b9676f08f31b00f231f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 35106,
        "upload_time": "2022-05-03T17:10:18",
        "upload_time_iso_8601": "2022-05-03T17:10:18.104655Z",
        "url": "https://files.pythonhosted.org/packages/33/1e/2e4ccc0b61db9e77e2d85f6365bb13e580d4f1f817e33b52adc22b5e76ee/freezeyt-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a8f182ffec6830406bed977175ced30bdffd07fcb990ba090d6f090eb393b85d",
        "md5": "75d795654e9dd5892b758079378f6e67",
        "sha256": "4dba0d99d04e748702ed5829f0a188aadab2866b1a335ddd6c91409955936b81"
      },
      "downloads": -1,
      "filename": "freezeyt-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "75d795654e9dd5892b758079378f6e67",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 29384,
      "upload_time": "2022-05-03T17:10:14",
      "upload_time_iso_8601": "2022-05-03T17:10:14.898706Z",
      "url": "https://files.pythonhosted.org/packages/a8/f1/82ffec6830406bed977175ced30bdffd07fcb990ba090d6f090eb393b85d/freezeyt-1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "331e2e4ccc0b61db9e77e2d85f6365bb13e580d4f1f817e33b52adc22b5e76ee",
        "md5": "5cfa535ee22e8b9676f08f31b00f231f",
        "sha256": "f24632a58d5e5e79dd586d5e9bf4cd62ebea1ddf30ca65f5e5a536eeb4ecfe6f"
      },
      "downloads": -1,
      "filename": "freezeyt-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5cfa535ee22e8b9676f08f31b00f231f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 35106,
      "upload_time": "2022-05-03T17:10:18",
      "upload_time_iso_8601": "2022-05-03T17:10:18.104655Z",
      "url": "https://files.pythonhosted.org/packages/33/1e/2e4ccc0b61db9e77e2d85f6365bb13e580d4f1f817e33b52adc22b5e76ee/freezeyt-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}