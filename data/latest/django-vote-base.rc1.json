{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "License :: Public Domain",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "<!--\nhttps://readme42.com\n-->\n\n\n[![](https://img.shields.io/pypi/v/django-vote-base.svg?maxAge=3600)](https://pypi.org/project/django-vote-base/)\n[![](https://img.shields.io/badge/License-Unlicense-blue.svg?longCache=True)](https://unlicense.org/)\n\n### Installation\n```bash\n$ [sudo] pip install django-vote-base\n```\n\n##### `settings.py`\n```python\nINSTALLED_APPS+=['django_vote_base']\n```\n\n##### `models.py`\n```python\nfrom django.db import models\nfrom django_vote_base.models import VoteModel\n\nclass CollectionVote(VoteModel):\n    obj = models.ForeignKey(\n        'Collection', related_name=\"vote_set\", on_delete=models.CASCADE)\n\n    class Meta:\n        unique_together = [('obj', 'created_by')]\n\nclass Collection(models.Model):\n    votes_up_count = models.IntegerField(null=True)\n    votes_down_count = models.IntegerField(null=True)\n    votes_score = models.IntegerField(null=True)\n\n    def get_vote_down_url(self):\n        return '/vote/collection/down/%s' % (self.pk,)\n\n    def get_vote_up_url(self):\n        return '/vote/collection/up/%s' % (self.pk,)\n```\n\n##### `urls.py`\n```python\nfrom django.urls import include, path\n\nimport views\n\nurlpatterns = [\n    path('vote/collection/down/<int:pk>', views.VoteDownView.as_view(), name='down'),\n    path('vote/collection/up/<int:pk>', views.VoteUpView.as_view(), name='up')\n]\n```\n\n##### `views.py`\n`DetailView` - context variables `{{ vote_obj }}` and `{{ vote }}`\n```python\nfrom apps.collections.models import Collection, CollectionVote\nfrom django_vote_base.views import VoteViewMixin\n\nclass VoteDetailView(BookmarkViewMixin):\n    vote_model = CollectionVote\n```\n\n`XMLHttpRequest` view\n```python\nfrom django_vote_base.views import VoteDownView, VoteUpView\nfrom apps.core.collections.models import Collection, CollectionVote\n\nclass CollectionVoteViewMixin:\n    vote_model = CollectionVote\n\n    def get_data(self):\n        collection = Collection.objects.get(pk=self.kwargs['pk'])\n        return {\n            'vote': self.vote,\n            'votes_up_count': collection.votes_up_count,\n            'votes_down_count': collection.votes_down_count,\n            'votes_score': collection.votes_score\n        }\n\nclass VoteDownView(CollectionVoteViewMixin, VoteDownView):\n    pass\n\nclass VoteUpView(CollectionVoteViewMixin, VoteUpView):\n    pass\n\n```\n\n`ListView` prefetch user bookmarks\n```python\nfrom django.db.models import Prefetch\nfrom django.views.generic.list import ListView\nfrom apps.collections.models import Collection, CollectionVote\n\nclass CollectionListView(ListView):\n    def get_queryset(self, **kwargs):\n        qs = Collection.objects.all()\n        if self.request.user.is_authenticated:\n            qs = qs.prefetch_related(\n                Prefetch(\"vote_set\", queryset=CollectionVote.objects.filter(created_by=self.request.user),to_attr='votes')\n            )\n        return qs\n```\n\n##### Templates\n```html\n<a data-id=\"{{ vote_obj.pk }}\" class=\"vote-up-btn {% if vote and vote.vote > 0 %}selected{% endif %}\" {% if request.user.is_authenticated %}data-href=\"{{ vote_obj.get_vote_up_url }}\"{% else %}href=\"{% url 'login' %}?next={{ request.path }}\"{% endif %}>\n</a>\n\n<a data-id=\"{{ vote_obj.pk }}\" class=\"votes-score\">{{ vote_obj.votes_score|default:\"0\" }}</a>\n\n<a data-id=\"{{ vote_obj.pk }}\" class=\"vote-down-btn {% if vote and vote.vote < 0 %}selected{% endif %}\" {% if request.user.is_authenticated %}data-href=\"{{ vote_obj.get_vote_down_url }}\"{% else %}href=\"{% url 'login' %}?next={{ request.path }}\"{% endif %}>\n</a>\n```\n\n##### JavaScript\n```javascript\nconst vote_buttons = document.querySelectorAll(\"a.vote-up-btn, a.vote-down-btn\");\nfor (const button of vote_buttons) {\n  button.addEventListener('click', function(event) {\n    event.preventDefault();\n    data_id = button.getAttribute('data-id');\n\n    var vote_down_btn = document.querySelector(\".vote-down-btn[data-id='\"+data_id+\"']\");\n    var vote_up_btn = document.querySelector(\".vote-up-btn[data-id='\"+data_id+\"']\");\n    var votes_score = document.querySelector(\".votes-score[data-id='\"+data_id+\"']\");\n\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', button.getAttribute('data-href'));\n    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    xhr.responseType = 'json';\n    xhr.onload = function() {\n        if (xhr.status != 200) {\n            console. error(`Error ${xhr.status}: ${xhr.statusText}`);\n        }\n        if (xhr.status == 200) {\n            votes_score.innerHTML=xhr.response.votes_score;\n        }\n    };\n    xhr.send();\n  })\n}\n```\n\n<p align=\"center\">\n    <a href=\"https://readme42.com/\">readme42.com</a>\n</p>",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/andrewp-as-is/django-vote-base.py",
    "keywords": "django vote",
    "license": "Unlicense",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-vote-base",
    "package_url": "https://pypi.org/project/django-vote-base/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-vote-base/",
    "project_urls": {
      "Homepage": "https://github.com/andrewp-as-is/django-vote-base.py"
    },
    "release_url": "https://pypi.org/project/django-vote-base/2020.7.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Django vote base models and views",
    "version": "2020.7.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7706224,
  "releases": {
    "2020.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52715420e620fbd0db69deabf97b47daaa739761352788f153d78925f3a2dcec",
          "md5": "f5da61d9f05a41b012772cf30a3d47b1",
          "sha256": "b9a015823aa5e4a25d69a74a7b6c67bfdc6ebe02058695cfb1ab97b0492f3cd0"
        },
        "downloads": -1,
        "filename": "django-vote-base-2020.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f5da61d9f05a41b012772cf30a3d47b1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 3578,
        "upload_time": "2020-07-15T15:00:12",
        "upload_time_iso_8601": "2020-07-15T15:00:12.177662Z",
        "url": "https://files.pythonhosted.org/packages/52/71/5420e620fbd0db69deabf97b47daaa739761352788f153d78925f3a2dcec/django-vote-base-2020.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52715420e620fbd0db69deabf97b47daaa739761352788f153d78925f3a2dcec",
        "md5": "f5da61d9f05a41b012772cf30a3d47b1",
        "sha256": "b9a015823aa5e4a25d69a74a7b6c67bfdc6ebe02058695cfb1ab97b0492f3cd0"
      },
      "downloads": -1,
      "filename": "django-vote-base-2020.7.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f5da61d9f05a41b012772cf30a3d47b1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 3578,
      "upload_time": "2020-07-15T15:00:12",
      "upload_time_iso_8601": "2020-07-15T15:00:12.177662Z",
      "url": "https://files.pythonhosted.org/packages/52/71/5420e620fbd0db69deabf97b47daaa739761352788f153d78925f3a2dcec/django-vote-base-2020.7.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}