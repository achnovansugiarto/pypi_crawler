{
  "info": {
    "author": "Antonio Lepore, Biagio Palumbo, Gianluca Sposito",
    "author_email": "antonio.lepore@unina.it, biagio.palumbo@unina.it, gianluca.sposito@unina.it",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Manufacturing",
      "Intended Audience :: Science/Research",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3"
    ],
    "description": "NN4MSP \n================\n\nThis repository contains Python code and data of the paper of Lepore, Palumbo and Sposito \n*Neural network based control charting for multiple stream processes with an application to \nHVAC systems in passenger railway vehicles*. Note that this work has been done in the framework \nof the R&D project of the multiregional investment programme REINForce:REsearch to INspire the Future \n(CDS000609) with Hitachi Rail STS (https://www.hitachirail.com/), supported by the Italian Ministry \nfor Economic Development (MISE) through the Invitalia agency.\n\nThis repository contains the following files:\n\n-   NN4MSP/data contains the HVAC data set\n-   NN4MSP/dataset.py allows the user to access the HVAC data set from the `NN4MSP`package\n-   NN4MSP/functions.py is the source code of the Python package `NN4MSP` \n-   NN4MSP_tutorial.ipynb is the Jupyter Notebook performing all the analysis shown in\n    the Section \"*A real-case study*\" of the paper\n\nMoreover, in the following Section we provide a tutorial to show how to implement in Python \nthe proposed methodology used in the paper to the real-case study.\n\n# Neural network based control charting for multiple stream processes with an application to HVAC systems in passenger railway vehicles\n\n## Introduction\n\nThis tutorial shows how to implement in Python the proposed methodology to the \nreal-case study to monitor the HVAC systems installed on board of passenger railway vehicles. \nThe operational data were acquired and made available by the rail transport company Hitachi \nRail STS based in Italy.\nHVAC data set contains the data analyzed in the paper and can be loaded by using the function `load_HVAC_data()`. \nAlternatively, one can use another data set and apply this methodology to any multiple stream process.\n\nYou can install the development version of the Python package `NN4MSP` from GitHub with\n\n``` python\npip install git+https://github.com/unina-sfere/NN4MSP#egg=NN4MSP\n```\n\nYou can install the Python package `NN4MSP` using pip\n\n``` python\npip install NN4MSP\n```\n\n``` python\n\n# Import libraries\n\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn import preprocessing\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.model_selection import train_test_split\nfrom itertools import combinations\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom matplotlib.ticker import ScalarFormatter, AutoMinorLocator\n\nfrom keras import Sequential\nfrom keras.layers import Dense\n\nfrom NN4MSP.functions import *\nimport NN4MSP.dataset\n\n```\n## Neural Network training\n\nSet the simulation parameters to properly generate the data set to train the Neaural Network (NN).\n\n``` python\n\n# Simulation parameters\n\ns = 6 # number of streams\nk = 5 # subgroup size\nnum_neg_samples = 55800 # number of negative samples of k observations\nnum_pos_samples = 300 # number of positive samples of k observations for each OC scenario\n\nloc_res = 0 # Mean of the distribution of the residuals\nscale_res = 1 # Standard deviation of the distribution of the residuals\n\n```\nThen, call the function `dataset_generator` from the `MSPforNN` package to generate the data set, simulated according to the procedure \ndescribed in the simulation section of the paper, and the corresponding vector of classes 0 (negative sample) and 1 (positive sample)\n\n``` python\n\nX, y = dataset_generator(s = s, k = k, num_neg_samples = num_neg_samples, num_pos_samples = num_pos_samples, loc_res = loc_res, \n                scale_res = scale_res, set_seed = 0)\n\n```\nSplit the simulated data set into 70% training set and 30% validation set. \n\n``` python\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, stratify = y ,random_state=27)\n\n```\nStandardize the features by removing the mean and scaling to unit variance.\n\n``` python\n\nscaler = preprocessing.StandardScaler().fit(X_train)\nX_train = scaler.transform(X_train)\nX_val = scaler.transform(X_val)\n\n```\n\nSet the NN hyperparameters and train the NN with the function `NN_model` from the `MSPforNN` package. \n\n``` python\n\n# NN hyperparameters\n\nnum_hidden_layer = 1 # Number of hidden layers\nhidden_activation_function = ['relu'] # activation function in the hidden layer\nnumber_hidden_neuron = [5] # number of neurons in the hidden layer\n\nepochs = 10 # Number of epochs to train the model. An epoch is an iteration over the entire data set provided\nbatch_size = 256 # Number of samples per gradient update\n\n# NN Training \n\nclassifier = NN_model(hidden_activation_function = hidden_activation_function,\n                   num_hidden_layer = num_hidden_layer, num_hidden_neuron = number_hidden_neuron) \n\n# Compiling the neural network\n\nclassifier.compile(optimizer ='adam', loss='binary_crossentropy', metrics = ['accuracy']) # Configures the model for training\n\n# Fitting \n\nhistory = classifier.fit(X_train, y_train, batch_size = batch_size, epochs = epochs, validation_data=(X_val, y_val)) # Trains the model\n\n```\n![](https://github.com/unina-sfere/NN4MSP/blob/main/README_Figure/NN_fitting_history.PNG)\n\n``` python\n\n# History of training and validation accuracy\n\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'], loc='lower right')\nplt.show()\n\n```\n\n![](https://github.com/unina-sfere/NN4MSP/blob/main/README_Figure/model_accuracy.png)\n\nPlot the Receiver Operating Characteristic (ROC) curve and compute the Area Under the Curve (AUC)\nas performance measure to manually tune the typical NN hyperparameters. \nUse the function `ROC_AUC_plot` from the `MSPforNN` package.\n\n``` python\n\nfig_size = (5, 5)\nf = plt.figure(figsize=fig_size)\nf = ROC_AUC_plot(classifier, X_val, y_val, f, xlabel = 'False Positive Rate', ylabel = 'True Positive Rate')\n\n```\n\n![](https://github.com/unina-sfere/NN4MSP/blob/main/README_Figure/ROC_AUC_plot.png)\n\n## Set the cut-off value of the neuron in the output layer\n\nTo allow fair comparison with the traditional statistical control charting procedures, the cut-off value (CV) of the neuron in the output layer\nmust be set and can be regarded as the key threshold to set the Type-I and Type-II errors.\nA table of the CVs of the proposed NN corresponding to typical false alarm rate values is provided in the paper. Additionally, using the function `set_cv_alpha` from the `MSPforNN` package, you can compute the Type-I error corresponding to any CV. \n\n``` python\n\nset_seed = 0\ncv = 0.940 # cut-off value\nn = 100000 # number of samples of 5 observations\n\nalpha = set_cv_alpha(n = n, s = s, k = k, loc_res = loc_res, scale_res = scale_res , scaler = scaler, classifier = classifier, cv = cv, set_seed = set_seed)\nprint(alpha)\n\n```\n\n0.0027 \\\\\nwhich is the default value for a Shewhart control chart in the 6-sigma quality approach.\n\n## Real-case study: HVAC systems in passenger railway vehicles \n\nImport the HVAC datavset. Data have already been cleaned to remove unsteady working conditions and sensor\nmeasurement errors and validated by domain expert.\n\n``` python\n\nHVAC_data = NN4MSP.dataset.load_HVAC_data()\n\n```\n### Phase I \n\nFilter `Vehicle` by Train_1 and consider 10 days of operational data from \"07-27\" to \"08-08\" for mean and variance estimations.\n\n``` python\n\ntrain_1_data = HVAC_data[HVAC_data[\"Vehicle\"] == \"Train_1\"]\ntrain_1_data = train_1_data.loc[(train_1_data['Timestamp'] >= '07-27')\n                     & (train_1_data['Timestamp'] < '08-08')]\n                     \n```\n\nSelect only the DeltaTemp variables and compute the mean every 5 rows.   \n\n``` python\n\ntrain_1_data = train_1_data.iloc[:,-6:]\ntrain_1_data = train_1_data.to_numpy() # Convert pandas dataframe to NumPy array\ntrain_1_data_mean = train_1_data.transpose().reshape(-1,k).mean(1).reshape(s,-1).transpose() \n\n```\n\nPlot the average value of the DeltaTemp signals of all of the coaches of train 1 over 50 subgroup (10 minutes worth of data).\n\n``` python\n\nfig = plt.figure(figsize=(12, 6))\n\nx = np.arange(1,51,1)\n\nplt.plot(x,train_1_data_mean[210:260,0], label = 'Coach 1', color='black', ls='-', marker='*')\nplt.plot(x,train_1_data_mean[210:260,1], label = 'Coach 2', color='blue', ls='-', marker='.')\nplt.plot(x,train_1_data_mean[210:260,2], label = 'Coach 3', color='red', ls='-.', marker= 's')\nplt.plot(x,train_1_data_mean[210:260,3], label = 'Coach 4', color='green', ls='-', marker='D')\nplt.plot(x,train_1_data_mean[210:260,4], label = 'Coach 5', color='orange', ls='-', marker='+')\nplt.plot(x,train_1_data_mean[210:260,5], label = 'Coach 6', color='violet', ls='-', marker='P')\nplt.xlabel('Subgroup', fontsize=12)\nplt.ylabel('$ \\Delta$T', fontsize=12)\nplt.legend(fontsize=10)\n\nplt.xlim([0,51])\nplt.tick_params(axis='both', which='major', size = 7, width = 1 , direction = 'out', labelsize = 10)\n\nplt.show()\n\n```\n![](https://github.com/unina-sfere/NN4MSP/blob/main/README_Figure/plot_DeltaT_PhaseI_train_1.png)\n\nCompute the residuals from each train coach and then calculate the mean and the variance.\n\n``` python\n\ntrain_1_residual = train_1_data_mean - np.mean(train_1_data_mean, axis = 1, keepdims= True) \n\nmean_res = np.mean(train_1_residual)\nstd_res = np.std(train_1_residual)\n\n```\n\n### Phase II\n\n#### Train 2 \n\nThe following figure shows a MSP data in which we clearly see that the process is out of control \nand that an assignable cause affects the output from one stream\n\n``` python\n\ntrain_2_data = HVAC_data[HVAC_data[\"Vehicle\"] == \"Train_2\"] # Filter Vehicle by Train 2 \ntrain_2_data = train_2_data.iloc[0:-4,-6:] # Select the DeltaTemp variables \ntrain_2_data = train_2_data.to_numpy()\ntrain_2_data_mean = train_2_data.transpose().reshape(-1,k).mean(1).reshape(s,-1).transpose() # Average every 5 rows \n\n# Plot the ╬öT signals from the six train coaches \n\nfig = plt.figure(figsize=(12, 6))\n\nx = np.arange(1,31,1)\n\nplt.plot(x,train_2_data_mean[235:265,0], label = 'Coach 1', color='black', ls='-', marker='*')\nplt.plot(x,train_2_data_mean[235:265,1], label = 'Coach 2', color='blue', ls='-', marker='.')\nplt.plot(x,train_2_data_mean[235:265,2], label = 'Coach 3', color='red', ls='-.', marker= 's')\nplt.plot(x,train_2_data_mean[235:265,3], label = 'Coach 4', color='green', ls='-', marker='D')\nplt.plot(x,train_2_data_mean[235:265,4], label = 'Coach 5', color='orange', ls='-', marker='+')\nplt.plot(x,train_2_data_mean[235:265,5], label = 'Coach 6', color='violet', ls='-', marker='P')\nplt.xlabel('Subgroup', fontsize=12)\nplt.ylabel('$ \\Delta$T', fontsize=12)\nplt.legend(fontsize=10)\n\nplt.xlim([0,31])\nplt.tick_params(axis='both', which='major', size = 7, width = 1 , direction = 'out', labelsize = 10)\n\nplt.show()\n\n```\n![](https://github.com/unina-sfere/NN4MSP/blob/main/README_Figure/plot_DeltaT_PhaseII_train_2.png)\n\nAfter computing and standardizing the residuals from each coach, the range of the subgroup means of\nthe residuals and the overall mean at each sample time are calculated. \n\n``` python\n\n# Definton of the input vector\n\ntrain_2_residual = train_2_data_mean - np.mean(train_2_data_mean, axis = 1, keepdims= True)\ntrain_2_mean_std = (train_2_residual - mean_res)/std_res\noverall_mean = train_2_mean_std.mean(axis=1) \nsample_range = train_2_mean_std.max(axis=1) - train_2_mean_std.min(axis=1) \ntrain_2_mean_std = np.c_[train_2_mean_std,overall_mean,sample_range]\n\n```\nThen the input vector is given as input to the NN.\n\n``` python\n\ntrain_2_mean_std = scaler.transform(train_2_mean_std)\ntrain_2_mean_std_pred = classifier.predict(train_2_mean_std)\n\n```\n\nFinally, you can plot the control chart based on the NN predicted probability by calling the function \n`control_chart` from the `MSPforNN` package.\n\n``` python\n\nfig_size = (12, 6)\nfig_control_chart = plt.figure(figsize=fig_size)\nfig_control_chart = control_chart(NN_pred = train_2_mean_std_pred[235:265], fig_control_chart = fig_control_chart, \n                                  CV = cv, xlabel = \"Subgroup\", ylabel = \"Probability\")\n\n```\n\n![](https://github.com/unina-sfere/NN4MSP/blob/main/README_Figure/PhaseII_train_2_controlchart.png)\n\nThe time-series plot of the residuals for each coach is displayed to help the practioner to identify how many and which stream(s) have shifted.\n\n``` python\n\nfig = plt.figure(figsize=(12, 6))\n\nx = np.arange(1,31,1)\n\nplt.plot(x,train_2_mean_std[235:265,0], label = 'Coach 1', color='black', ls='-', marker='*')\nplt.plot(x,train_2_mean_std[235:265,1], label = 'Coach 2', color='blue', ls='-', marker='.')\nplt.plot(x,train_2_mean_std[235:265,2], label = 'Coach 3', color='red', ls='-.', marker= 's')\nplt.plot(x,train_2_mean_std[235:265,3], label = 'Coach 4', color='green', ls='-', marker='D')\nplt.plot(x,train_2_mean_std[235:265,4], label = 'Coach 5', color='orange', ls='-', marker='+')\nplt.plot(x,train_2_mean_std[235:265,5], label = 'Coach 6', color='violet', ls='-', marker='P')\nplt.xlabel('Subgroup', fontsize=12)\nplt.ylabel('$ X_{tj} $', fontsize=12)\nplt.legend(fontsize=10)\n\nplt.xlim([0,31])\nplt.tick_params(axis='both', which='major', size = 7, width = 1 , direction = 'out', labelsize = 10)\n\nplt.show()\n\n```\n![](https://github.com/unina-sfere/NN4MSP/blob/main/README_Figure/plot_residuals_PhaseII_train_2.png)\n\nWe can see that the coach 5 residuals are significantly higher than the other residuals, thus the HVAC system installed on-board coach 5 perform badly\nand is not able to meet the required European regulations and ensure passenger thermal comfort.\n\n#### Train 3 \n\nThe following figure shows a MSP data in which we clearly see that the process is out of control \nand that an assignable cause affects the output from four streams\n\n``` python\n\ntrain_3_data = HVAC_data[HVAC_data[\"Vehicle\"] == \"Train_3\"]\n\ntrain_3_data = train_3_data.loc[(train_3_data['Timestamp'] >= '07-25')\n                     & (train_3_data['Timestamp'] < '07-26')]\n\ntrain_3_data = train_3_data.iloc[0:-3,-6:]\n\ntrain_3_data = train_3_data.to_numpy()\ntrain_3_data_mean = train_3_data.transpose().reshape(-1,k).mean(1).reshape(s,-1).transpose() \n\n# Plot the ╬öT signals from the six train coaches\n\nfig = plt.figure(figsize=(12, 6))\n\nx = np.arange(1,41,1)\n\nplt.plot(x,train_3_data_mean[15:55,0], label = 'Coach 1', color='black', ls='-', marker='*')\nplt.plot(x,train_3_data_mean[15:55,1], label = 'Coach 2', color='blue', ls='-', marker='.')\nplt.plot(x,train_3_data_mean[15:55,2], label = 'Coach 3', color='red', ls='-.', marker= 's')\nplt.plot(x,train_3_data_mean[15:55,3], label = 'Coach 4', color='green', ls='-', marker='D')\nplt.plot(x,train_3_data_mean[15:55,4], label = 'Coach 5', color='orange', ls='-', marker='+')\nplt.plot(x,train_3_data_mean[15:55,5], label = 'Coach 6', color='violet', ls='-', marker='P')\nplt.xlabel('Subgroup', fontsize=12)\nplt.ylabel('$ \\Delta$T', fontsize=12)\nplt.legend(fontsize=10)\n\nplt.xlim([0,41])\nplt.tick_params(axis='both', which='major', size = 7, width = 1 , direction = 'out', labelsize = 10)\n\nplt.show()\n\n```\n![](https://github.com/unina-sfere/NN4MSP/blob/main/README_Figure/plot_DeltaT_PhaseII_train_3.png)\n\nAfter computing and standardizing the residuals from each coach, the\nrange of the subgroup means of the residuals and the overall mean at each sample time are calculated. \n\n``` python\n\ntrain_3_data_mean = train_3_data_mean - np.mean(train_3_data_mean, axis = 1, keepdims= True)\ntrain_3_mean_std = (train_3_data_mean - mean_res)/std_res\n\noverall_mean = train_3_mean_std.mean(axis=1) \nsample_range = train_3_mean_std.max(axis=1) - train_3_mean_std.min(axis=1) \ntrain_3_mean_std = np.c_[train_3_mean_std,overall_mean,sample_range]\n\n```\nThen the range, the overall mean and the six residuals for each coach are given as input to the NN.\n\n``` python\n\ntrain_3_mean_std = scaler.transform(train_3_mean_std)\ntrain_3_mean_std_pred = classifier.predict(train_3_mean_std)\n\n```\n\nFinally, you can plot the control chart by calling the function `control_chart` from the `MSPforNN` package\n\n``` python\n\nfig_size = (12, 6)\nfig_control_chart = plt.figure(figsize=fig_size)\nfig_control_chart = control_chart(NN_pred = train_3_mean_std_pred[15:55], fig_control_chart = fig_control_chart, \n                                  CV = cv, xlabel = \"Subgroup\", ylabel = \"Probability\")\n\n```\n![](https://github.com/unina-sfere/NN4MSP/blob/main/README_Figure/PhaseII_train_3_controlchart.png)\n\nWe can plot the residuals from each coach of the train 3.\n\n``` python\n\nfig = plt.figure(figsize=(12, 6))\n\nx = np.arange(1,41,1)\n\nplt.plot(x,train_3_mean_std[15:55,0], label = 'Coach 1', color='black', ls='-', marker='*')\nplt.plot(x,train_3_mean_std[15:55,1], label = 'Coach 2', color='blue', ls='-', marker='.')\nplt.plot(x,train_3_mean_std[15:55,2], label = 'Coach 3', color='red', ls='-.', marker= 's')\nplt.plot(x,train_3_mean_std[15:55,3], label = 'Coach 4', color='green', ls='-', marker='D')\nplt.plot(x,train_3_mean_std[15:55,4], label = 'Coach 5', color='orange', ls='-', marker='+')\nplt.plot(x,train_3_mean_std[15:55,5], label = 'Coach 6', color='violet', ls='-', marker='P')\nplt.xlabel('Subgroup', fontsize=12)\nplt.ylabel('$ X_{tj} $', fontsize=12)\nplt.legend(fontsize=10)\n\nplt.xlim([0,41])\nplt.tick_params(axis='both', which='major', size = 7, width = 1 , direction = 'out', labelsize = 10)\n\nplt.show()\n\n```\n![](https://github.com/unina-sfere/NN4MSP/blob/main/README_Figure/plot_residuals_PhaseII_train_3.png)\n\nThe above plot shows that coaches 1,2,4,5 of the train 3 perform differently from the other two coaches and helps \nthe practitioner to obtain a correct interpretation of the OC situation.\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/unina-sfere/NN4MSP",
    "keywords": "Multiple stream process,Artificial neural networks,Statistical process control,Multilayer perceptron,Railway HVAC systems",
    "license": "GNU General Public License v3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "NN4MSP",
    "package_url": "https://pypi.org/project/NN4MSP/",
    "platform": null,
    "project_url": "https://pypi.org/project/NN4MSP/",
    "project_urls": {
      "Homepage": "https://github.com/unina-sfere/NN4MSP"
    },
    "release_url": "https://pypi.org/project/NN4MSP/2.28/",
    "requires_dist": [
      "numpy",
      "matplotlib",
      "sklearn",
      "tensorflow",
      "keras"
    ],
    "requires_python": "",
    "summary": "Neural network based control charting for multiple stream processes",
    "version": "2.28",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13335298,
  "releases": {
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ce20b161c2d45c99905f5dbf07f3c3baa1fcfb357100538f9f9ac06a2f2d870",
          "md5": "b9bd47c7526a2e77ccf8e1e1b24466dd",
          "sha256": "d80ede79dd81b6e04f783bde9a6455da1cf5265994c728737eaf692362b15050"
        },
        "downloads": -1,
        "filename": "NN4MSP-2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9bd47c7526a2e77ccf8e1e1b24466dd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1616108,
        "upload_time": "2022-03-29T12:47:47",
        "upload_time_iso_8601": "2022-03-29T12:47:47.020672Z",
        "url": "https://files.pythonhosted.org/packages/3c/e2/0b161c2d45c99905f5dbf07f3c3baa1fcfb357100538f9f9ac06a2f2d870/NN4MSP-2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "82d7101beec0522819e98eabc4361f7de3c2fb3cf35aeb4d7a1ec66485ad9f15",
          "md5": "fac2396c917cb929d1e3ad7fb8aef7f3",
          "sha256": "d5c52c908f956e2a05cde9668ff0a8610af9be8bf6c3cf61b4947ef3e1d820e9"
        },
        "downloads": -1,
        "filename": "NN4MSP-2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fac2396c917cb929d1e3ad7fb8aef7f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20669,
        "upload_time": "2022-03-29T12:47:48",
        "upload_time_iso_8601": "2022-03-29T12:47:48.559041Z",
        "url": "https://files.pythonhosted.org/packages/82/d7/101beec0522819e98eabc4361f7de3c2fb3cf35aeb4d7a1ec66485ad9f15/NN4MSP-2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.10": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0642d5aa79b0705c6f2e59662b5dfc10e832bfc0a9ea570f97bcb4f0e815ca86",
          "md5": "a7de0f8e877bfaa3e9067cec54315be7",
          "sha256": "44c90495c2c8ebc0f92f20fabfed36d1c90a97315fe3dcb854e9b8cfcbe22af2"
        },
        "downloads": -1,
        "filename": "NN4MSP-2.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7de0f8e877bfaa3e9067cec54315be7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1608317,
        "upload_time": "2022-03-29T14:41:57",
        "upload_time_iso_8601": "2022-03-29T14:41:57.519683Z",
        "url": "https://files.pythonhosted.org/packages/06/42/d5aa79b0705c6f2e59662b5dfc10e832bfc0a9ea570f97bcb4f0e815ca86/NN4MSP-2.10-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d6d0d0809c5c6dd5adcbc6ca0f7d3c6276ce15d15410b82bf8f821ac12552b6",
          "md5": "e677c1e849ed6bd9de1816152f857149",
          "sha256": "2a3a08f671d02f0184b296af168ed706c15034f8770856594dee0d9b8cf2898d"
        },
        "downloads": -1,
        "filename": "NN4MSP-2.10.tar.gz",
        "has_sig": false,
        "md5_digest": "e677c1e849ed6bd9de1816152f857149",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9967,
        "upload_time": "2022-03-29T14:41:59",
        "upload_time_iso_8601": "2022-03-29T14:41:59.955058Z",
        "url": "https://files.pythonhosted.org/packages/1d/6d/0d0809c5c6dd5adcbc6ca0f7d3c6276ce15d15410b82bf8f821ac12552b6/NN4MSP-2.10.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.11": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a4db7cccda89c64605b194ddc1d5948061fb2f75e3a37c7be6fb2129c2f8c7b0",
          "md5": "240e22b1739d4e322cf050b93e4764e1",
          "sha256": "13a856a2551d15fdcb27daab8e1fbe1ef1f273c0b557d258dd6ca50eaf7ed42e"
        },
        "downloads": -1,
        "filename": "NN4MSP-2.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "240e22b1739d4e322cf050b93e4764e1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1608312,
        "upload_time": "2022-03-29T14:51:42",
        "upload_time_iso_8601": "2022-03-29T14:51:42.077058Z",
        "url": "https://files.pythonhosted.org/packages/a4/db/7cccda89c64605b194ddc1d5948061fb2f75e3a37c7be6fb2129c2f8c7b0/NN4MSP-2.11-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "942bc3648c90b0a29162a65477eb4aee27bbd613c94d6a66968c66eb05c04dbf",
          "md5": "b723e31f0bf81482d1f61a06fccb726c",
          "sha256": "6de9f149e7eb21671e2894a57d744d5ad0c4a51c98b2912b0614704d5ee727a9"
        },
        "downloads": -1,
        "filename": "NN4MSP-2.11.tar.gz",
        "has_sig": false,
        "md5_digest": "b723e31f0bf81482d1f61a06fccb726c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9962,
        "upload_time": "2022-03-29T14:51:45",
        "upload_time_iso_8601": "2022-03-29T14:51:45.623881Z",
        "url": "https://files.pythonhosted.org/packages/94/2b/c3648c90b0a29162a65477eb4aee27bbd613c94d6a66968c66eb05c04dbf/NN4MSP-2.11.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.15": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b8a551164fe252f7d6f7173483aa0012c95b9382110fcfe7e3db62818b04148c",
          "md5": "075e868eccf87a63b55c8d36ff6f7de7",
          "sha256": "ebea02b2952faf9bd33e5d364b5ff6743ba80d352e26946de6fe502eec0a9358"
        },
        "downloads": -1,
        "filename": "NN4MSP-2.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "075e868eccf87a63b55c8d36ff6f7de7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1608320,
        "upload_time": "2022-03-29T14:57:26",
        "upload_time_iso_8601": "2022-03-29T14:57:26.508259Z",
        "url": "https://files.pythonhosted.org/packages/b8/a5/51164fe252f7d6f7173483aa0012c95b9382110fcfe7e3db62818b04148c/NN4MSP-2.15-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aabf741e71a026f2eec9c8478230dbb933a28107d0ea5b9fc556df45677c6b07",
          "md5": "6fcbb7a9f6daa6cc3c0457889182e0d1",
          "sha256": "42982c1e8a7c3a631fbd55303a3c31791ce8296297a53220d8a7f515a875ea7e"
        },
        "downloads": -1,
        "filename": "NN4MSP-2.15.tar.gz",
        "has_sig": false,
        "md5_digest": "6fcbb7a9f6daa6cc3c0457889182e0d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9993,
        "upload_time": "2022-03-29T14:57:29",
        "upload_time_iso_8601": "2022-03-29T14:57:29.571475Z",
        "url": "https://files.pythonhosted.org/packages/aa/bf/741e71a026f2eec9c8478230dbb933a28107d0ea5b9fc556df45677c6b07/NN4MSP-2.15.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.27": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bf55857c1db143b4adc21f230581faa10b238f3905b601266c040c8fe06aa77",
          "md5": "fa6ab1521f3f20805ad51e2aeca30eab",
          "sha256": "d3f6dabd7b2a34ee89b0283990223e4f246c72c5aea4d37b87e83992a8319474"
        },
        "downloads": -1,
        "filename": "NN4MSP-2.27-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa6ab1521f3f20805ad51e2aeca30eab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1620627,
        "upload_time": "2022-03-29T15:35:08",
        "upload_time_iso_8601": "2022-03-29T15:35:08.573339Z",
        "url": "https://files.pythonhosted.org/packages/8b/f5/5857c1db143b4adc21f230581faa10b238f3905b601266c040c8fe06aa77/NN4MSP-2.27-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f108fb9064405073c081ed69b843a4562b574c37a238a0a264883c7861e4f634",
          "md5": "d87178d28ec7bb6cb374f30e74f06404",
          "sha256": "deb9a596561d63c0f65abe41a4d58977278dc82ff748de968de821986a04d438"
        },
        "downloads": -1,
        "filename": "NN4MSP-2.27.tar.gz",
        "has_sig": false,
        "md5_digest": "d87178d28ec7bb6cb374f30e74f06404",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22098,
        "upload_time": "2022-03-29T15:35:10",
        "upload_time_iso_8601": "2022-03-29T15:35:10.904631Z",
        "url": "https://files.pythonhosted.org/packages/f1/08/fb9064405073c081ed69b843a4562b574c37a238a0a264883c7861e4f634/NN4MSP-2.27.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.28": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "45cabefe638814a2ddc077d534874a98708e9715f2b4779ff57a6e0161227753",
          "md5": "6058131c7bf7ab9fd2a0b7a8006f6c89",
          "sha256": "c8996b5a3715f139c0bd564272e9c3ebe7b432d94c7c538138ee8b814d4b4566"
        },
        "downloads": -1,
        "filename": "NN4MSP-2.28-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6058131c7bf7ab9fd2a0b7a8006f6c89",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1620590,
        "upload_time": "2022-03-29T15:58:13",
        "upload_time_iso_8601": "2022-03-29T15:58:13.991140Z",
        "url": "https://files.pythonhosted.org/packages/45/ca/befe638814a2ddc077d534874a98708e9715f2b4779ff57a6e0161227753/NN4MSP-2.28-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a58bd2ddca6875bda061647db0fe6c6cd9154d00fc4dc7be3a0ada8b753a3465",
          "md5": "9932af6b0edeb7a230388b8e8a4c82fe",
          "sha256": "fe5e181b1fc5ac5f31f6af4c1b3fa67032bcd4a63bfa7bcaa2386b2c2f284a35"
        },
        "downloads": -1,
        "filename": "NN4MSP-2.28.tar.gz",
        "has_sig": false,
        "md5_digest": "9932af6b0edeb7a230388b8e8a4c82fe",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22058,
        "upload_time": "2022-03-29T15:58:16",
        "upload_time_iso_8601": "2022-03-29T15:58:16.448992Z",
        "url": "https://files.pythonhosted.org/packages/a5/8b/d2ddca6875bda061647db0fe6c6cd9154d00fc4dc7be3a0ada8b753a3465/NN4MSP-2.28.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "45cabefe638814a2ddc077d534874a98708e9715f2b4779ff57a6e0161227753",
        "md5": "6058131c7bf7ab9fd2a0b7a8006f6c89",
        "sha256": "c8996b5a3715f139c0bd564272e9c3ebe7b432d94c7c538138ee8b814d4b4566"
      },
      "downloads": -1,
      "filename": "NN4MSP-2.28-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6058131c7bf7ab9fd2a0b7a8006f6c89",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 1620590,
      "upload_time": "2022-03-29T15:58:13",
      "upload_time_iso_8601": "2022-03-29T15:58:13.991140Z",
      "url": "https://files.pythonhosted.org/packages/45/ca/befe638814a2ddc077d534874a98708e9715f2b4779ff57a6e0161227753/NN4MSP-2.28-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a58bd2ddca6875bda061647db0fe6c6cd9154d00fc4dc7be3a0ada8b753a3465",
        "md5": "9932af6b0edeb7a230388b8e8a4c82fe",
        "sha256": "fe5e181b1fc5ac5f31f6af4c1b3fa67032bcd4a63bfa7bcaa2386b2c2f284a35"
      },
      "downloads": -1,
      "filename": "NN4MSP-2.28.tar.gz",
      "has_sig": false,
      "md5_digest": "9932af6b0edeb7a230388b8e8a4c82fe",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22058,
      "upload_time": "2022-03-29T15:58:16",
      "upload_time_iso_8601": "2022-03-29T15:58:16.448992Z",
      "url": "https://files.pythonhosted.org/packages/a5/8b/d2ddca6875bda061647db0fe6c6cd9154d00fc4dc7be3a0ada8b753a3465/NN4MSP-2.28.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}