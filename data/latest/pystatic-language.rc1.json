{
  "info": {
    "author": "Shahaf Frank-Shapir",
    "author_email": "shahaffrs@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# pystatic\r\n\r\n> This package is a collection of methods and classes for making python more secure, robust, and reliable.\r\n> This could be achieved through the simple usage of decorators, function calls and inheritance of base classes.\r\n> Generally, this package can make python a programming language, closer to other static-typed languages, \r\n> without losing python's dynamic powerful features and.\r\n\r\nfirst of all\r\n------------\r\n\r\n#### specifics:\r\n\r\n- writen and owned by: Shahaf Frank-Shapir\r\n- all the rights are saved for: Shahaf Frank-Shapir\r\n- program version: 0.0.0\r\n- programming languages: python 3.9.12 (100%)\r\n\r\nbefore we start\r\n---------------\r\n\r\n#### description:\r\n\r\n> This package contains the following systems to be embedded in any python codebase:\r\n> \r\n> - overloading: Functions and methods (static, class and instance) \r\n> can have the same name yet different arguments' signature \r\n> (different arguments - different names or same names and difference \r\n> in type hints.) through the usage of the overload decorator on top \r\n> of the base function\\method and inherit from the overloading \r\n> protocol class, when the usage is made in a class.\r\n>\r\n> - privacy: Attributes of classes and instances can now be private \r\n> in a way that prevents getting access to them in the traditional \r\n> ways, as well as the more shady ones This can be used whn a class \r\n> inherits from the private property protocol, or the private attributes \r\n> being defined as private using the private descriptor.\r\n>\r\n> - cleaning: Cleaning of unnecessary objects, values, imported namespaces \r\n> from your modules, so an object imported into a module cannot be \r\n> imported with anything else that is written inside the module. \r\n> Essentially, enforcing what can and cannot be imported from you modules.\r\n>\r\n> - scope protection: The protection of attributes that are being accessed \r\n> from outside their class scope, so they couldn't be modified there.\r\n>\r\n> - automatic dynamic type checking and enforcement: decorators \r\n> and functions to check at run-time is the type, and structure of \r\n> types of the object equals to any type hint This can be done for \r\n> functions at every call for all the parameters, sing a decorator, \r\n> or manually, calling a function on a variable.\r\n\r\n#### dependencies:\r\n\r\n- opening:\r\n  As for this is a really complex program, which uses a lot of modules, there are required dependencies needed\r\n  in order to run the program. keep in mined the program was writen in python 3.9, so any python version lower\r\n  than 3.8 might not work properly. Moreover, built-in python modules are being used, so keep that in mind.\r\n\r\n- install app dependencies by writing the \"-r\" option to install the requirements\r\n  writen in a file, and write the following line in the project directory:\r\n````\r\npip install -r requirements.txt\r\n````\r\n\r\nrun a test\r\n-----------\r\n\r\n#### run from windows command line (inside the project directory)\r\n- run with python by writing to the command line in the project directory:\r\n````\r\npython test.py\r\n````\r\n\r\n- An example of the usage of runtime type-enforcement, private attributes and method overloading.\r\n```python\r\nimport time\r\nimport warnings\r\n\r\nfrom pystatic.overload import OverloadProtocol, overload\r\nfrom pystatic.types import statictypes\r\nfrom pystatic.private import private, PrivatePropertyProtocol\r\nfrom pystatic.casting import Castable, cast\r\n\r\nclass Demo1(Castable):\r\n\r\n  def __init__(self, a, b, c, x=None):\r\n\r\n    self.a = a\r\n    self.b = b\r\n    self.c = c\r\n    self.x = x\r\n\r\nclass Demo2(Castable):\r\n\r\n  def __init__(self, a, b, c, x=None, y=None, z=None):\r\n\r\n    self.a = a\r\n    self.b = b\r\n    self.c = c\r\n    self.x = x\r\n    self.y = y\r\n    self.z = z\r\n\r\ndemo2 = Demo2(0, 1, 2, 3, 4, 5)\r\ndemo1 = cast(Demo1, demo2)\r\n\r\nprint(demo2, demo2.dict)\r\nprint(demo1, demo1.dict)\r\n\r\n# noinspection PyNestedDecorators\r\nclass Foo(OverloadProtocol, PrivatePropertyProtocol):\r\n\r\n    c = private()\r\n\r\n    def __init__(self):\r\n\r\n        print(\"\\nclass Foo:\\n\\n\\tdef __init__(self):\\n\")\r\n\r\n        self.c = 1\r\n        print(\"\\t\\t>>> self.c = 1\")\r\n        print(\"\\t\\t>>> print(self.c)\")\r\n        print(f\"\\t\\t{self.c}\\n\")\r\n\r\n        self.__d = 1\r\n        print(\"\\t\\t>>> self.__d = 1\")\r\n        print(\"\\t\\t>>> print(self.__d)\")\r\n        print(f\"\\t\\t{self.__d}\\n\")\r\n\r\n        self.c = 0\r\n        print(\"\\t\\t>>> self.c = 0\")\r\n        print(\"\\t\\t>>> print(self.c)\")\r\n        print(f\"\\t\\t{self.c}\\n\")\r\n\r\n        self.__d = 0\r\n        print(\"\\t\\t>>> self.__d = 0\")\r\n        print(\"\\t\\t>>> print(self.__d)\")\r\n        print(f\"\\t\\t{self.__d}\\n\")\r\n\r\n    @overload\r\n    def a(self, x: int):\r\n        print(\"\\n\\tdef a(self, x: int):\")\r\n        print(f\"\\n\\t\\t>>> print(type(x))\")\r\n        print(f\"\\t\\t{type(x)}\\n\")\r\n\r\n    @a.overload\r\n    @staticmethod\r\n    def a(x: float):\r\n        print(\"\\n\\t@staticmethod\\n\\tdef a(x: float):\")\r\n        print(f\"\\n\\t\\t>>> print(type(x))\")\r\n        print(f\"\\t\\t{type(x)}\\n\")\r\n\r\n    @a.overload\r\n    @classmethod\r\n    def a(cls, x: float):\r\n        print(\"\\n\\t@classmethod\\n\\tdef a(cls, x: float):\")\r\n        print(f\"\\n\\t\\t>>> print(type(x))\")\r\n        print(f\"\\t\\t{type(x)}\\n\")\r\n\r\n    @statictypes(crush=False)\r\n    def b(self, x: int):\r\n        print(\"\\n\\t@statictypes(crush=False)\\n\\tdef b(self, x: int):\")\r\n        print(f\"\\n\\t\\t>>> print(type(x))\")\r\n        print(f\"\\t\\t{type(x)}\\n\")\r\n\r\nfoo = Foo()\r\n\r\nfoo.a(0)\r\nfoo.a(0.0)\r\n\r\nFoo.a(0)\r\nFoo.a(0.0)\r\n\r\nfoo.b(0)\r\n# noinspection PyTypeChecker\r\nfoo.b(0.0)\r\n\r\ntime.sleep(0.2)\r\n\r\ntry:\r\n    print(\"\\n>>> print(Foo.c)\")\r\n    print(Foo.c)\r\n\r\nexcept AttributeError as e:\r\n    warnings.warn(str(e))\r\n# end try\r\n\r\ntime.sleep(0.2)\r\n\r\ntry:\r\n    print(\"\\n>>> print(foo.c)\")\r\n    print(foo.c)\r\n\r\nexcept AttributeError as e:\r\n    warnings.warn(str(e))\r\n# end try\r\n\r\ntime.sleep(0.2)\r\n\r\ntry:\r\n    print(\"\\n>>> print(foo._Foo__d)\")\r\n    # noinspection PyProtectedMember\r\n    print(foo._Foo__d)\r\n\r\nexcept AttributeError as e:\r\n    warnings.warn(str(e))\r\n# end try\r\n\r\ntime.sleep(0.2)\r\n```\r\n- Output:\r\n````python\r\n<__main__.Demo2 object at 0x000001E16DB3F650> {'a': 0, 'b': 1, 'c': 2, 'x': 3, 'y': 4, 'z': 5}\r\n<__main__.Demo1 object at 0x000001E16DB3F750> {'a': 0, 'b': 1, 'c': 2, 'x': 3, 'y': 4, 'z': 5}\r\n\r\nclass Foo:\r\n\r\n        def __init__(self):\r\n\r\n                >>> self.c = 1\r\n                >>> print(self.c)\r\n                1\r\n\r\n                >>> self.__d = 1\r\n                >>> print(self.__d)\r\n                1\r\n\r\n                >>> self.c = 0\r\n                >>> print(self.c)\r\n                0\r\n\r\n                >>> self.__d = 0\r\n                >>> print(self.__d)\r\n                0\r\n\r\n\r\n        def a(self, x: int):\r\n\r\n                >>> print(type(x))\r\n                <class 'int'>\r\n\r\n\r\n        @staticmethod\r\n        def a(x: float):\r\n\r\n                >>> print(type(x))\r\n                <class 'float'>\r\n\r\n\r\n        def a(self, x: int):\r\n\r\n                >>> print(type(x))\r\n                <class 'int'>\r\n\r\n\r\n        @staticmethod\r\n        def a(x: float):\r\n\r\n                >>> print(type(x))\r\n                <class 'float'>\r\n\r\n\r\n        @statictypes(crush=False)\r\n        def b(self, x: int):\r\n\r\n                >>> print(type(x))\r\n                <class 'int'>\r\n\r\ntypes.py:166: RuntimeTypeWarning: Unexpected type <class 'float'> was passed to x when calling <function Foo.b at 0x0000021974C54A40>, but should have been <class 'int'> instead.\r\n        @statictypes(crush=False)\r\n        def b(self, x: int):\r\n\r\n                >>> print(type(x))\r\n                <class 'float'>\r\n\r\n\r\n>>> print(Foo.c)\r\ntest.py:85: UserWarning: object of type <class 'NoneType'> has no attribute 'c'\r\n\r\n>>> print(foo.c)\r\ntest.py:95: UserWarning: object of type <class '__main__.Foo'> has no attribute 'c'\r\n\r\n>>> print(foo._Foo__d)\r\ntest.py:106: UserWarning: object of type <class '__main__.Foo'> has no attribute '_Foo__d'\r\n````\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Shahaf-F-S/pystatic",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pystatic-language",
    "package_url": "https://pypi.org/project/pystatic-language/",
    "platform": null,
    "project_url": "https://pypi.org/project/pystatic-language/",
    "project_urls": {
      "Homepage": "https://github.com/Shahaf-F-S/pystatic"
    },
    "release_url": "https://pypi.org/project/pystatic-language/1.0.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "This package is a collection of methods and classes for making python more secure, robust, and reliable. This could be achieved through the simple usage of decorators, function calls and inheritance of base classes. Generally, this package can make python a programming language, closer to other static-typed languages, without losing python's dynamic powerful features and.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17476252,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cca5e4354678339913084bdafe1e4e208b67f4207abdf72cf6efafaeb1e55b4f",
          "md5": "7cb7cc788bcdc8a0e7eb005822f516e4",
          "sha256": "f870b600b7b797956c1027553ab0e67d8b1e57fda0b4b0c4ef3f1923aaedae43"
        },
        "downloads": -1,
        "filename": "pystatic-language-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7cb7cc788bcdc8a0e7eb005822f516e4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16525,
        "upload_time": "2023-03-28T10:21:54",
        "upload_time_iso_8601": "2023-03-28T10:21:54.325115Z",
        "url": "https://files.pythonhosted.org/packages/cc/a5/e4354678339913084bdafe1e4e208b67f4207abdf72cf6efafaeb1e55b4f/pystatic-language-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "cca5e4354678339913084bdafe1e4e208b67f4207abdf72cf6efafaeb1e55b4f",
        "md5": "7cb7cc788bcdc8a0e7eb005822f516e4",
        "sha256": "f870b600b7b797956c1027553ab0e67d8b1e57fda0b4b0c4ef3f1923aaedae43"
      },
      "downloads": -1,
      "filename": "pystatic-language-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7cb7cc788bcdc8a0e7eb005822f516e4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16525,
      "upload_time": "2023-03-28T10:21:54",
      "upload_time_iso_8601": "2023-03-28T10:21:54.325115Z",
      "url": "https://files.pythonhosted.org/packages/cc/a5/e4354678339913084bdafe1e4e208b67f4207abdf72cf6efafaeb1e55b4f/pystatic-language-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}