{
  "info": {
    "author": "Vladimir Ivanov",
    "author_email": "ivanov.vladimir.mail@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Education",
      "Topic :: Security"
    ],
    "description": "python-libmsf\n===================\n\n[![Site][site-label]][site-link]\n[![Required OS][os-label]][os-link]\n[![Python3 version][python3-versions-label]][python3-versions-link]\n[![License][license-label]][license-link]\n[![Version][version-label]][version-link]\n\n[site-label]: https://python-libmsf.github.io/images/labels/site.svg\n[site-link]: https://python-libmsf.github.io/\n[os-label]: https://python-libmsf.github.io/images/labels/os.svg\n[os-link]: https://en.wikipedia.org/wiki/Operating_system\n[python3-versions-label]: https://python-libmsf.github.io/images/labels/python3.svg\n[python3-versions-link]: https://www.python.org/downloads/release/python-360/\n[license-label]: https://python-libmsf.github.io/images/labels/license.svg\n[license-link]: https://github.com/python-libmsf/python-libmsf/blob/main/LICENSE\n[version-label]: https://python-libmsf.github.io/images/labels/version.svg\n[version-link]: https://github.com/python-libmsf/python-libmsf/releases\n\n## Description\n\nlibmsf is a python library for working with Metasploit web service and parse Metasploit exported files.\n\nWith MsfRestApi you can work with Metasploit REST API objects such as:\n\n - [Workspaces](#workspaces)\n - [Hosts](#hosts)\n - [Services](#services)\n - [Vulnerabilities](#vulnerabilities)\n - [Loots](#loots)\n - [Notes](#notes)\n - [Credentials](#credentials-and-logins)\n - [Logins](#credentials-and-logins)\n\nMsfRestApi easy to use:\n\n```shell\n>>> from libmsf import Msf\n>>> from libmsf.rest import MsfRestApi\n>>> msf_rest_api = MsfRestApi(api_key='cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460', api_url='https://localhost:5443')\n>>> workspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\n>>> workspace\nMsf.Workspace(id=-1, name='test_workspace', created_at=None, updated_at=None, boundary=None, description=None, owner_id=None, limit_to_network=False, import_fingerprint=False)\n>>> workspace.id = msf_rest_api.create_workspace(workspace)\n>>> msf_rest_api.get_workspace_by_id(workspace.id)\nMsf.Workspace(id=197, name='test_workspace', created_at='2021-04-16T11:26:49.900Z', updated_at='2021-04-16T11:26:49.900Z', boundary=None, description=None, owner_id=None, limit_to_network=False, import_fingerprint=False)\n```\n\nWith MsfParser you can parse Metasploit exported files\n\nMsfParser easy to use:\n\n```shell\n>>> from libmsf import MsfData\n>>> from libmsf.parser import MsfParser\n>>>\n>>> msf_parser: MsfParser = MsfParser()\n>>> msf_data: MsfData = msf_parser.parse_file(file_name='tests/msf_db_export.xml')\n>>> msf_data.workspace\n'unit_test_workspace'\n>>> msf_data.hosts\n[Msf.Host(id=246, workspace='unit_test_workspace', created_at='2021-04-17 14:12:22 UTC', host='None', address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=241, updated_at='2021-04-17 14:12:22 UTC', purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=1, vuln_count=1, service_count=1, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix'), Msf.Host(id=247, workspace='unit_test_workspace', created_at='2021-04-17 14:12:22 UTC', host='None', address='192.168.1.2', mac='00:11:22:33:44:56', comm='unittest2', name='unit.test2.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=241, updated_at='2021-04-17 14:12:22 UTC', purpose='device', info='Host for unit tests 2', comments='Host for unit tests 2', scope='unit tests scope', virtual_host='unittest', note_count=1, vuln_count=1, service_count=1, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix')]\n>>> msf_data.services\n[Msf.Service(id=271, workspace='unit_test_workspace', host='192.168.1.1', host_id=246, created_at='2021-04-17 14:12:22 UTC', port=12345, proto='tcp', state='open', name='http', updated_at='2021-04-17 14:12:22 UTC', info='Unit test'), Msf.Service(id=272, workspace='unit_test_workspace', host='192.168.1.2', host_id=247, created_at='2021-04-17 14:12:22 UTC', port=12346, proto='tcp', state='open', name='http', updated_at='2021-04-17 14:12:22 UTC', info='Unit test 2')]\n>>> msf_data.vulns\n[Msf.Vuln(id=285, workspace='unit_test_workspace', host='192.168.1.1', host_id=246, port=12345, service_id=271, created_at='2021-04-17 14:12:22 UTC', name='Unit test vuln name', updated_at='2021-04-17 14:12:22 UTC', info='Unit test vuln info', exploited_at='', vuln_detail_count=0, vuln_attempt_count=0, origin_id='', origin_type='', refs=['CVE-2020-2020', 'URL-https://unit.test.com/vuln'], module_refs='None'), Msf.Vuln(id=286, workspace='unit_test_workspace', host='192.168.1.2', host_id=247, port=12346, service_id=272, created_at='2021-04-17 14:12:22 UTC', name='Unit test vuln name 2', updated_at='2021-04-17 14:12:22 UTC', info='Unit test vuln info 2', exploited_at='', vuln_detail_count=0, vuln_attempt_count=0, origin_id='', origin_type='', refs=['CVE-2020-2021', 'URL-https://unit.test.com/vuln2'], module_refs='None')]\n>>> msf_data.notes\n[Msf.Note(id=53, workspace='unit_test_workspace', workspace_id=241, host='192.168.1.1', host_id=246, service_id=-1, vuln_id=-1, port=-1, created_at='2021-04-17 14:12:22 UTC', updated_at='2021-04-17 14:12:22 UTC', ntype='host.comments', data='Unit test host comment', critical=False, seen=False), Msf.Note(id=54, workspace='unit_test_workspace', workspace_id=241, host='192.168.1.2', host_id=247, service_id=-1, vuln_id=-1, port=-1, created_at='2021-04-17 14:12:22 UTC', updated_at='2021-04-17 14:12:22 UTC', ntype='host.comments', data='Unit test host comment 2', critical=False, seen=False)]\n```\n\n## Python versions\n\n - Python 3.6\n - Python 3.7\n - Python 3.8\n - Python 3.9\n\n## Dependencies\n\n - [requests](https://pypi.org/project/requests/)\n - [urllib3](https://pypi.org/project/urllib3/)\n - [dataclasses](https://pypi.org/project/dataclasses/)\n - [marshmallow](https://pypi.org/project/marshmallow/)\n - [configparser](https://pypi.org/project/configparser/)\n\n## Installing\n\nlibmsf can be installed with [pip](https://pypi.org/project/libmsf/):\n```shell\npip3 install libmsf\n```\n\nAlternatively, you can grab the latest source code from [github](https://github.com/python-libmsf/python-libmsf.git):\n```shell\ngit clone https://github.com/python-libmsf/python-libmsf.git\ncd python-libmsf\npython3 setup.py install\n```\n\n## Metasploit web service settings\n\nMetasploit web service wiki: [https://github.com/rapid7/metasploit-framework/wiki/Metasploit-Web-Service](https://github.com/rapid7/metasploit-framework/wiki/Metasploit-Web-Service)\n\nInit Metasploit web service and database: `msfdb init`\n\nInit Metasploit web service: `msfdb --component webservice init`\n\nStart Metasploit web service to listen all network interfaces: `msfdb --component webservice --address 0.0.0.0 start`\n\n<details><summary>Init MSF webservice:</summary>\n\n<pre lang=\"shell\"><code>\n$ msfdb --component webservice init\nRunning the 'init' command for the webservice:\n[?] Initial MSF web service account username? [user]: user\n[?] Initial MSF web service account password? (Leave blank for random password):\nGenerating SSL key and certificate for MSF web service\nAttempting to start MSF web service...success\nMSF web service started and online\nCreating MSF web service user user\n\n    ############################################################\n    ##              MSF Web Service Credentials               ##\n    ##                                                        ##\n    ##        Please store these credentials securely.        ##\n    ##    You will need them to connect to the webservice.    ##\n    ############################################################\n\nMSF web service username: user\nMSF web service password: password\nMSF web service user API token: cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460\n\n\nMSF web service configuration complete\nThe web service has been configured as your default data service in msfconsole with the name \"local-https-data-service\"\n\nIf needed, manually reconnect to the data service in msfconsole using the command:\ndb_connect --token cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460 --cert /home/user/.msf4/msf-ws-cert.pem --skip-verify https://localhost:5443\n\nThe username and password are credentials for the API account:\nhttps://localhost:5443/api/v1/auth/account\n\n====================================================================\n</code></pre>\n\n</details>\n\nMetasploit web service user API token stored in file: `~/.msf4/config`\n\n<details><summary>MSF webservice config:</summary>\n\n<pre lang=\"shell\"><code>\n$ cat ~/.msf4/config\n[framework/database]\ndefault_db=local-https-data-service\n\n[framework/database/local-https-data-service]\nurl=https://localhost:5443\ncert=/home/user/.msf4/msf-ws-cert.pem\nskip_verify=true\napi_token=cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460\n</code></pre>\n\n</details>\n\nMetasploit web service swagger page: `https://localhost:5443/api/v1/api-docs`\n\n## MsfRestApi\n\n### Workspaces\n\n```python\nfrom libmsf import Msf\nfrom libmsf.rest import MsfRestApi\nfrom typing import List\n\nmsf_api_key: str = 'cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460'\nmsf_api_url: str = 'https://localhost:5443'\nmsf_rest_api: MsfRestApi = MsfRestApi(api_key=msf_api_key, api_url=msf_api_url)\n\nprint('Create workspace:\\n')\nworkspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\n\nworkspace.id = msf_rest_api.create_workspace(workspace=workspace)\nprint(f'New workspace: {workspace}\\n')\n\nall_workspaces: List[Msf.Workspace] = msf_rest_api.get_workspaces()\nprint(f'All workspaces: {all_workspaces}\\n')\n\nremoved_workspace: Msf.Workspace = msf_rest_api.delete_workspace(workspace_name=workspace.name)\nprint(f'Removed workspace: {removed_workspace}\\n')\n\n```\n\nCreate workspace: \n\n<details><summary>Example:</summary>\n\n<pre language=\"shell\"><code class=\"language-shell\">\n>>> from libmsf import Msf\n>>> from libmsf.rest import MsfRestApi\n>>> from typing import List\n>>>\n>>> msf_api_key: str = 'cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460'\n>>> msf_api_url: str = 'https://localhost:5443'\n>>> msf_rest_api: MsfRestApi = MsfRestApi(api_key=msf_api_key, api_url=msf_api_url)\n>>>\n>>> print('Create workspace:\\n')\nCreate workspace:\n\n>>> workspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\n>>>\n>>> workspace.id = msf_rest_api.create_workspace(workspace=workspace)\n>>> print(f'New workspace: {workspace}\\n')\nNew workspace: Msf.Workspace(id=210, name='test_workspace', created_at=None, updated_at=None, boundary=None, description=None, owner_id=None, limit_to_network=False, import_fingerprint=False)\n</code></pre>\n\n<img src=\"https://python-libmsf.github.io/images/create_workspace.png\" alt=\"Create workspace\">\n\n</details>\n\nGet workspaces:\n\n<details>\n  <summary>Example:</summary>\n\n\n<pre lang=\"shell\"><code>\n>>> all_workspaces: List[Msf.Workspace] = msf_rest_api.get_workspaces()\n>>> print(f'All workspaces: {all_workspaces}\\n')\nAll workspaces: [Msf.Workspace(id=1, name='default', created_at='2021-02-16T16:47:41.137Z', updated_at='2021-02-16T16:47:41.137Z', boundary=None, description=None, owner_id=None, limit_to_network=False, import_fingerprint=False), Msf.Workspace(id=210, name='test_workspace', created_at='2021-04-16T13:28:17.841Z', updated_at='2021-04-16T13:28:17.841Z', boundary=None, description=None, owner_id=None, limit_to_network=False, import_fingerprint=False)]\n</code></pre>\n\n</details>\n\nDelete workspace:\n\n<details>\n  <summary>Example:</summary>\n\n\n<pre lang=\"shell\"><code>\n>>> removed_workspace: Msf.Workspace = msf_rest_api.delete_workspace(workspace_name=workspace.name)\n>>> print(f'Removed workspace: {removed_workspace}\\n')\nRemoved workspace: Msf.Workspace(id=210, name='test_workspace', created_at='2021-04-16T13:28:17.841Z', updated_at='2021-04-16T13:28:17.841Z', boundary=None, description=None, owner_id=None, limit_to_network=False, import_fingerprint=False)\n</code></pre>\n\n<img src=\"https://python-libmsf.github.io/images/delete_workspace.png\" alt=\"Delete workspace\">\n\n</details>\n\n### Hosts\n\n```python\nfrom libmsf import Msf\nfrom libmsf.rest import MsfRestApi\nfrom typing import List\n\nmsf_api_key: str = 'cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460'\nmsf_api_url: str = 'https://localhost:5443'\nmsf_rest_api: MsfRestApi = MsfRestApi(api_key=msf_api_key, api_url=msf_api_url)\n\nworkspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\n\nhost: Msf.Host = Msf.Host()\nhost.workspace = workspace.name\nhost.address = '192.168.1.1'\nhost.mac = '00:11:22:33:44:55'\nhost.name = 'unit.test.com'\nhost.os_name = 'linux'\nhost.os_family = 'posix'\nhost.os_flavor = 'test'\nhost.os_sp = 'test'\nhost.os_lang = 'English'\nhost.purpose = 'device'\nhost.info = 'Host for unit tests'\nhost.comments = 'Host for unit tests'\nhost.scope = 'unit tests scope'\nhost.virtual_host = 'unittest'\nhost.arch = 'x86'\nhost.state = 'alive'\nhost.comm = 'unittest'\n\nhost.id = msf_rest_api.create_host(host=host)\nprint(f'New host: {host}\\n')\n\nnew_host: Msf.Host = msf_rest_api.get_host_by_id(workspace=workspace.name, host_id=host.id)\nprint(f'New host by id: {new_host}\\n')\n\nall_hosts: List[Msf.Host] = msf_rest_api.get_hosts(workspace=workspace.name)\nprint(f'All hosts: {all_hosts}\\n')\n\nremoved_hosts: List[Msf.Host] = msf_rest_api.delete_hosts(ids=[host.id])\nprint(f'Removed hosts: {removed_hosts}\\n')\n\n```\n\nCreate host:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> from libmsf import Msf\n>>> from libmsf.rest import MsfRestApi\n>>> from typing import List\n>>>\n>>> msf_api_key: str = 'cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460'\n>>> msf_api_url: str = 'https://localhost:5443'\n>>> msf_rest_api: MsfRestApi = MsfRestApi(api_key=msf_api_key, api_url=msf_api_url)\n>>>\n>>> workspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\n>>>\n>>> host: Msf.Host = Msf.Host()\n>>> host.workspace = workspace.name\n>>> host.address = '192.168.1.1'\n>>> host.mac = '00:11:22:33:44:55'\n>>> host.name = 'unit.test.com'\n>>> host.os_name = 'linux'\n>>> host.os_family = 'posix'\n>>> host.os_flavor = 'test'\n>>> host.os_sp = 'test'\n>>> host.os_lang = 'English'\n>>> host.purpose = 'device'\n>>> host.info = 'Host for unit tests'\n>>> host.comments = 'Host for unit tests'\n>>> host.scope = 'unit tests scope'\n>>> host.virtual_host = 'unittest'\n>>> host.arch = 'x86'\n>>> host.state = 'alive'\n>>> host.comm = 'unittest'\n>>>\n>>> host.id = msf_rest_api.create_host(host=host)\n>>> print(f'New host: {host}\\n')\nNew host: Msf.Host(id=220, workspace='test_workspace', created_at=None, host=None, address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=-1, updated_at=None, purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=0, vuln_count=0, service_count=0, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch=None, os_family='posix')\n</code></pre>\n\n<img src=\"https://python-libmsf.github.io/images/create_host.png\" alt=\"Create host\">\n\n</details>\n\nGet hosts:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> new_host: Msf.Host = msf_rest_api.get_host_by_id(workspace=workspace.name, host_id=host.id)\n>>> print(f'New host by id: {new_host}\\n')\nNew host by id: Msf.Host(id=220, workspace=None, created_at='2021-04-16T13:03:43.816Z', host=None, address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=206, updated_at='2021-04-16T13:03:43.816Z', purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=0, vuln_count=0, service_count=0, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix')\n\n>>>\n>>> all_hosts: List[Msf.Host] = msf_rest_api.get_hosts(workspace=workspace.name)\n>>> print(f'All hosts: {all_hosts}\\n')\nAll hosts: [Msf.Host(id=220, workspace=None, created_at='2021-04-16T13:03:43.816Z', host=None, address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=206, updated_at='2021-04-16T13:03:43.816Z', purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=0, vuln_count=0, service_count=0, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix')]\n</code></pre>\n\n</details>\n\nDelete host:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> removed_hosts: List[Msf.Host] = msf_rest_api.delete_hosts(ids=[host.id])\n>>> print(f'Removed hosts: {removed_hosts}\\n')\nRemoved hosts: [Msf.Host(id=220, workspace=None, created_at='2021-04-16T13:03:43.816Z', host=None, address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=206, updated_at='2021-04-16T13:03:43.816Z', purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=0, vuln_count=0, service_count=0, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix')]\n</code></pre>\n\n<img src=\"https://python-libmsf.github.io/images/delete_host.png\" alt=\"Delete host\">\n\n</details>\n\n### Services\n\n```python\nfrom libmsf import Msf\nfrom libmsf.rest import MsfRestApi\nfrom typing import List\n\nmsf_api_key: str = 'cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460'\nmsf_api_url: str = 'https://localhost:5443'\nmsf_rest_api: MsfRestApi = MsfRestApi(api_key=msf_api_key, api_url=msf_api_url)\n\nworkspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\nhost: Msf.Host = Msf.Host(address='192.168.1.1')\n\nservice: Msf.Service = Msf.Service()\nservice.workspace = workspace.name\nservice.host = host.address\nservice.port = 12345\nservice.proto = 'tcp'\nservice.state = 'open'\nservice.name = 'http'\nservice.info = 'Unit test'\n\nservice.id = msf_rest_api.create_service(service=service)\nprint(f'New service: {service}\\n')\n\nnew_service: Msf.Service = msf_rest_api.get_service_by_id(workspace=workspace.name, service_id=service.id)\nprint(f'New service by id: {new_service}\\n')\n\nall_services: List[Msf.Service] = msf_rest_api.get_services(workspace=workspace.name)\nprint(f'All services: {all_services}\\n')\n\nremoved_services: List[Msf.Service] = msf_rest_api.delete_services(ids=[service.id])\nprint(f'Removed services: {removed_services}\\n')\n\n```\n\nCreate service:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> from libmsf import Msf\n>>> from libmsf.rest import MsfRestApi\n>>> from typing import List\n>>>\n>>> msf_api_key: str = 'cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460'\n>>> msf_api_url: str = 'https://localhost:5443'\n>>> msf_rest_api: MsfRestApi = MsfRestApi(api_key=msf_api_key, api_url=msf_api_url)\n>>>\n>>> workspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\n>>> host: Msf.Host = Msf.Host(address='192.168.1.1')\n>>>\n>>> service: Msf.Service = Msf.Service()\n>>> service.workspace = workspace.name\n>>> service.host = host.address\n>>> service.port = 12345\n>>> service.proto = 'tcp'\n>>> service.state = 'open'\n>>> service.name = 'http'\n>>> service.info = 'Unit test'\n>>>\n>>> service.id = msf_rest_api.create_service(service=service)\n>>> print(f'New service: {service}\\n')\nNew service: Msf.Service(id=249, workspace='test_workspace', host='192.168.1.1', host_id=-1, created_at=None, port=12345, proto='tcp', state='open', name='http', updated_at=None, info='Unit test')\n</code></pre>\n\n<img src=\"https://python-libmsf.github.io/images/create_service.png\" alt=\"Create service\">\n\n</details>\n\nGet services:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> new_service: Msf.Service = msf_rest_api.get_service_by_id(workspace=workspace.name, service_id=service.id)\n>>> print(f'New service by id: {new_service}\\n')\nNew service by id: Msf.Service(id=249, workspace=None, host=Msf.Host(id=224, workspace=None, created_at='2021-04-16T13:35:50.565Z', host=None, address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=212, updated_at='2021-04-16T13:35:50.565Z', purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=0, vuln_count=0, service_count=1, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix'), host_id=224, created_at='2021-04-16T13:36:13.731Z', port=12345, proto='tcp', state='open', name='http', updated_at='2021-04-16T13:36:13.731Z', info='Unit test')\n\n>>>\n>>> all_services: List[Msf.Service] = msf_rest_api.get_services(workspace=workspace.name)\n>>> print(f'All services: {all_services}\\n')\nAll services: [Msf.Service(id=249, workspace=None, host=Msf.Host(id=224, workspace=None, created_at='2021-04-16T13:35:50.565Z', host=None, address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=212, updated_at='2021-04-16T13:35:50.565Z', purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=0, vuln_count=0, service_count=1, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix'), host_id=224, created_at='2021-04-16T13:36:13.731Z', port=12345, proto='tcp', state='open', name='http', updated_at='2021-04-16T13:36:13.731Z', info='Unit test')]\n</code></pre>\n\n</details>\n\nDelete service:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> removed_services: List[Msf.Service] = msf_rest_api.delete_services(ids=[service.id])\n>>> print(f'Removed services: {removed_services}\\n')\nRemoved services: [Msf.Service(id=249, workspace=None, host=None, host_id=224, created_at='2021-04-16T13:36:13.731Z', port=12345, proto='tcp', state='open', name='http', updated_at='2021-04-16T13:36:13.731Z', info='Unit test')]\n</code></pre>\n\n<img src=\"https://python-libmsf.github.io/images/delete_service.png\" alt=\"Delete service\">\n\n</details>\n\n### Vulnerabilities\n\n```python\nfrom libmsf import Msf\nfrom libmsf.rest import MsfRestApi\nfrom typing import List\n\nmsf_api_key: str = 'cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460'\nmsf_api_url: str = 'https://localhost:5443'\nmsf_rest_api: MsfRestApi = MsfRestApi(api_key=msf_api_key, api_url=msf_api_url)\n\nworkspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\nhost: Msf.Host = Msf.Host(address='192.168.1.1')\nservice: Msf.Service = Msf.Service(port=12345)\n\nvuln: Msf.Vuln = Msf.Vuln()\nvuln.workspace = workspace.name\nvuln.host = host.address\nvuln.port = service.port\nvuln.name = 'Unit test vuln name'\nvuln.info = 'Unit test vuln info'\nvuln.refs = ['CVE-2020-2020', 'URL-https://unit.test.com/vuln']\n\nvuln.id = msf_rest_api.create_vuln(vuln=vuln)\nprint(f'New vuln: {vuln}\\n')\n\nnew_vuln: Msf.Vuln = msf_rest_api.get_vuln_by_id(workspace=workspace.name, vuln_id=vuln.id)\nprint(f'New vuln by id: {new_vuln}\\n')\n\nall_vulns: List[Msf.Vuln] = msf_rest_api.get_vulns(workspace=workspace.name)\nprint(f'All vulns: {all_vulns}\\n')\n\nremoved_vulns: List[Msf.Vuln] = msf_rest_api.delete_vulns(ids=[vuln.id])\nprint(f'Removed vulns: {removed_vulns}\\n')\n\n```\n\nCreate vulnerability:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> from libmsf import Msf\n>>> from libmsf.rest import MsfRestApi\n>>> from typing import List\n>>>\n>>> msf_api_key: str = 'cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460'\n>>> msf_api_url: str = 'https://localhost:5443'\n>>> msf_rest_api: MsfRestApi = MsfRestApi(api_key=msf_api_key, api_url=msf_api_url)\n>>>\n>>> workspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\n>>> host: Msf.Host = Msf.Host(address='192.168.1.1')\n>>> service: Msf.Service = Msf.Service(port=12345)\n>>>\n>>> vuln: Msf.Vuln = Msf.Vuln()\n>>> vuln.workspace = workspace.name\n>>> vuln.host = host.address\n>>> vuln.port = service.port\n>>> vuln.name = 'Unit test vuln name'\n>>> vuln.info = 'Unit test vuln info'\n>>> vuln.refs = ['CVE-2020-2020', 'URL-https://unit.test.com/vuln']\n>>>\n>>> vuln.id = msf_rest_api.create_vuln(vuln=vuln)\n>>> print(f'New vuln: {vuln}\\n')\nNew vuln: Msf.Vuln(id=272, workspace='test_workspace', host='192.168.1.1', host_id=-1, port=12345, service_id=-1, created_at=None, name='Unit test vuln name', updated_at=None, info='Unit test vuln info', exploited_at=None, vuln_detail_count=0, vuln_attempt_count=0, origin_id=None, origin_type=None, refs=['CVE-2020-2020', 'URL-https://unit.test.com/vuln'], module_refs=None)\n</code></pre>\n\n<img src=\"https://python-libmsf.github.io/images/create_vuln.png\" alt=\"Create vuln\">\n\n</details>\n\nGet vulnerabilities:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> new_vuln: Msf.Vuln = msf_rest_api.get_vuln_by_id(workspace=workspace.name, vuln_id=vuln.id)\n>>> print(f'New vuln by id: {new_vuln}\\n')\nNew vuln by id: Msf.Vuln(id=272, workspace=None, host=Msf.Host(id=226, workspace=None, created_at='2021-04-16T13:46:17.284Z', host=None, address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=214, updated_at='2021-04-16T13:46:17.284Z', purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=0, vuln_count=1, service_count=1, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix'), host_id=226, port=-1, service_id=251, created_at='2021-04-16T13:47:50.763Z', name='Unit test vuln name', updated_at='2021-04-16T13:47:50.763Z', info='Unit test vuln info', exploited_at=None, vuln_detail_count=0, vuln_attempt_count=0, origin_id=None, origin_type=None, refs=[{'id': 8, 'ref_id': None, 'created_at': '2021-04-15T22:57:21.274Z', 'name': 'CVE-2020-2020', 'updated_at': '2021-04-15T22:57:21.274Z'}, {'id': 9, 'ref_id': None, 'created_at': '2021-04-15T22:57:21.279Z', 'name': 'URL-https://unit.test.com/vuln', 'updated_at': '2021-04-15T22:57:21.279Z'}], module_refs=[])\n\n>>>\n>>> all_vulns: List[Msf.Vuln] = msf_rest_api.get_vulns(workspace=workspace.name)\n>>> print(f'All vulns: {all_vulns}\\n')\nAll vulns: [Msf.Vuln(id=272, workspace=None, host=Msf.Host(id=226, workspace=None, created_at='2021-04-16T13:46:17.284Z', host=None, address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=214, updated_at='2021-04-16T13:46:17.284Z', purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=0, vuln_count=1, service_count=1, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix'), host_id=226, port=-1, service_id=251, created_at='2021-04-16T13:47:50.763Z', name='Unit test vuln name', updated_at='2021-04-16T13:47:50.763Z', info='Unit test vuln info', exploited_at=None, vuln_detail_count=0, vuln_attempt_count=0, origin_id=None, origin_type=None, refs=[{'id': 8, 'ref_id': None, 'created_at': '2021-04-15T22:57:21.274Z', 'name': 'CVE-2020-2020', 'updated_at': '2021-04-15T22:57:21.274Z'}, {'id': 9, 'ref_id': None, 'created_at': '2021-04-15T22:57:21.279Z', 'name': 'URL-https://unit.test.com/vuln', 'updated_at': '2021-04-15T22:57:21.279Z'}], module_refs=[])]\n</code></pre>\n\n</details>\n\nDelete vulnerability:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> removed_vulns: List[Msf.Vuln] = msf_rest_api.delete_vulns(ids=[vuln.id])\n>>> print(f'Removed vulns: {removed_vulns}\\n')\nRemoved vulns: [Msf.Vuln(id=272, workspace=None, host=Msf.Host(id=226, workspace=None, created_at='2021-04-16T13:46:17.284Z', host=None, address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=214, updated_at='2021-04-16T13:46:17.284Z', purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=0, vuln_count=0, service_count=1, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix'), host_id=226, port=-1, service_id=251, created_at='2021-04-16T13:47:50.763Z', name='Unit test vuln name', updated_at='2021-04-16T13:47:50.763Z', info='Unit test vuln info', exploited_at=None, vuln_detail_count=0, vuln_attempt_count=0, origin_id=None, origin_type=None, refs=[], module_refs=[])]\n</code></pre>\n\n<img src=\"https://python-libmsf.github.io/images/delete_vuln.png\" alt=\"Delete vuln\">\n\n</details>\n\n### Loots\n\n```python\nfrom libmsf import Msf\nfrom libmsf.rest import MsfRestApi\nfrom typing import List\n\nmsf_api_key: str = 'cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460'\nmsf_api_url: str = 'https://localhost:5443'\nmsf_rest_api: MsfRestApi = MsfRestApi(api_key=msf_api_key, api_url=msf_api_url)\n\nworkspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\nhost: Msf.Host = Msf.Host(address='192.168.1.1')\nservice: Msf.Service = Msf.Service(port=12345)\n\nloot: Msf.Loot = Msf.Loot()\nloot.workspace = workspace.name\nloot.host = host.address\nloot.port = service.port\nloot.ltype = 'unit.test.type'\nloot.data = 'dGVzdA=='\nloot.name = '/tmp/unit.test'\nloot.info = 'Unit test file'\nloot.content_type = 'text/plain'\nloot.path = 'path.txt'\n\nloot.id = msf_rest_api.create_loot(loot=loot)\nprint(f'New loot: {loot}\\n')\n\nnew_loot: Msf.Loot = msf_rest_api.get_loot_by_id(workspace=workspace.name, loot_id=loot.id)\nprint(f'New loot by id: {new_loot}\\n')\n\nall_loots: List[Msf.Loot] = msf_rest_api.get_loots(workspace=workspace.name)\nprint(f'All loots: {all_loots}\\n')\n\nremoved_loots: List[Msf.Loot] = msf_rest_api.delete_loots(ids=[loot.id])\nprint(f'Removed loots: {removed_loots}\\n')\n\n```\n\nCreate loot:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> from libmsf import Msf\n>>> from libmsf.rest import MsfRestApi\n>>> from typing import List\n>>>\n>>> msf_api_key: str = 'cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460'\n>>> msf_api_url: str = 'https://localhost:5443'\n>>> msf_rest_api: MsfRestApi = MsfRestApi(api_key=msf_api_key, api_url=msf_api_url)\n>>>\n>>> workspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\n>>> host: Msf.Host = Msf.Host(address='192.168.1.1')\n>>> service: Msf.Service = Msf.Service(port=12345)\n>>>\n>>> loot: Msf.Loot = Msf.Loot()\n>>> loot.workspace = workspace.name\n>>> loot.host = host.address\n>>> loot.port = service.port\n>>> loot.ltype = 'unit.test.type'\n>>> loot.data = 'dGVzdA=='\n>>> loot.name = '/tmp/unit.test'\n>>> loot.info = 'Unit test file'\n>>> loot.content_type = 'text/plain'\n>>> loot.path = 'path.txt'\n>>>\n>>> loot.id = msf_rest_api.create_loot(loot=loot)\n>>> print(f'New loot: {loot}\\n')\nNew loot: Msf.Loot(id=61, workspace='test_workspace', workspace_id=-1, host='192.168.1.1', host_id=-1, port=12345, service_id=-1, created_at=None, updated_at=None, ltype='unit.test.type', path='path.txt', data='dGVzdA==', content_type='text/plain', name='/tmp/unit.test', info='Unit test file', module_run_id=None)\n</code></pre>\n\n<img src=\"https://python-libmsf.github.io/images/create_loot.png\" alt=\"Create loot\">\n\n</details>\n\nGet loots:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> new_loot: Msf.Loot = msf_rest_api.get_loot_by_id(workspace=workspace.name, loot_id=loot.id)\n>>> print(f'New loot by id: {new_loot}\\n')\nNew loot by id: Msf.Loot(id=61, workspace=None, workspace_id=215, host=Msf.Host(id=227, workspace=None, created_at='2021-04-16T13:55:53.310Z', host=None, address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=215, updated_at='2021-04-16T13:55:53.310Z', purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=0, vuln_count=0, service_count=1, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix'), host_id=227, port=-1, service_id=None, created_at='2021-04-16T13:56:16.838Z', updated_at='2021-04-16T13:56:16.838Z', ltype='unit.test.type', path='/Users/vladimir/.msf4/loot/6f8c35d43dc702b3b866-path.txt', data='dGVzdA==', content_type='text/plain', name='/tmp/unit.test', info='Unit test file', module_run_id=None)\n\n>>>\n>>> all_loots: List[Msf.Loot] = msf_rest_api.get_loots(workspace=workspace.name)\n>>> print(f'All loots: {all_loots}\\n')\nAll loots: [Msf.Loot(id=61, workspace=None, workspace_id=215, host=Msf.Host(id=227, workspace=None, created_at='2021-04-16T13:55:53.310Z', host=None, address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=215, updated_at='2021-04-16T13:55:53.310Z', purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=0, vuln_count=0, service_count=1, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix'), host_id=227, port=-1, service_id=None, created_at='2021-04-16T13:56:16.838Z', updated_at='2021-04-16T13:56:16.838Z', ltype='unit.test.type', path='/Users/vladimir/.msf4/loot/6f8c35d43dc702b3b866-path.txt', data='dGVzdA==', content_type='text/plain', name='/tmp/unit.test', info='Unit test file', module_run_id=None)]\n</code></pre>\n\n</details>\n\nDelete loot:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> removed_loots: List[Msf.Loot] = msf_rest_api.delete_loots(ids=[loot.id])\n>>> print(f'Removed loots: {removed_loots}\\n')\nRemoved loots: [Msf.Loot(id=None, workspace=None, workspace_id=215, host=None, host_id=227, port=-1, service_id=None, created_at=None, updated_at=None, ltype='unit.test.type', path='/Users/vladimir/.msf4/loot/6f8c35d43dc702b3b866-path.txt', data='dGVzdA==', content_type='text/plain', name='/tmp/unit.test', info='Unit test file', module_run_id=None)]\n</code></pre>\n\n<img src=\"https://python-libmsf.github.io/images/delete_loot.png\" alt=\"Delete loot\">\n\n</details>\n\n### Notes\n\n```python\nfrom libmsf import Msf\nfrom libmsf.rest import MsfRestApi\nfrom typing import List\n\nmsf_api_key: str = 'cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460'\nmsf_api_url: str = 'https://localhost:5443'\nmsf_rest_api: MsfRestApi = MsfRestApi(api_key=msf_api_key, api_url=msf_api_url)\n\nworkspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\nhost: Msf.Host = Msf.Host(address='192.168.1.1')\nservice: Msf.Service = Msf.Service(port=12345)\n\nnote: Msf.Note = Msf.Note()\nnote.workspace = workspace.name\nnote.host = host.address\nnote.ntype = 'host.comments'\nnote.data = 'Unit test host comment'\n\nnote.id = msf_rest_api.create_note(note=note)\nprint(f'New note: {note}\\n')\n\nnew_note: Msf.Note = msf_rest_api.get_note_by_id(workspace=workspace.name, note_id=note.id)\nprint(f'New note by id: {new_note}\\n')\n\nall_notes: List[Msf.Note] = msf_rest_api.get_notes(workspace=workspace.name)\nprint(f'All notes: {all_notes}\\n')\n\nremoved_notes: List[Msf.Note] = msf_rest_api.delete_notes(ids=[note.id])\nprint(f'Removed notes: {removed_notes}\\n')\n\n```\n\nCreate note:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> from libmsf import Msf\n>>> from libmsf.rest import MsfRestApi\n>>> from typing import List\n>>>\n>>> msf_api_key: str = 'cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460'\n>>> msf_api_url: str = 'https://localhost:5443'\n>>> msf_rest_api: MsfRestApi = MsfRestApi(api_key=msf_api_key, api_url=msf_api_url)\n>>>\n>>> workspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\n>>> host: Msf.Host = Msf.Host(address='192.168.1.1')\n>>> service: Msf.Service = Msf.Service(port=12345)\n>>>\n>>> note: Msf.Note = Msf.Note()\n>>> note.workspace = workspace.name\n>>> note.host = host.address\n>>> note.ntype = 'host.comments'\n>>> note.data = 'Unit test host comment'\n>>>\n>>> note.id = msf_rest_api.create_note(note=note)\n>>> print(f'New note: {note}\\n')\nNew note: Msf.Note(id=40, workspace='test_workspace', workspace_id=-1, host='192.168.1.1', host_id=-1, service_id=-1, created_at=None, updated_at=None, ntype='host.comments', data='Unit test host comment', critical=False, seen=False)\n</code></pre>\n\n<img src=\"https://python-libmsf.github.io/images/create_note.png\" alt=\"Create note\">\n\n</details>\n\nGet notes:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> new_note: Msf.Note = msf_rest_api.get_note_by_id(workspace=workspace.name, note_id=note.id)\n>>> print(f'New note by id: {new_note}\\n')\nNew note by id: Msf.Note(id=40, workspace=None, workspace_id=215, host=Msf.Host(id=227, workspace=None, created_at='2021-04-16T13:55:53.310Z', host=None, address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=215, updated_at='2021-04-16T13:55:53.310Z', purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=1, vuln_count=0, service_count=1, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix'), host_id=227, service_id=None, created_at='2021-04-16T14:03:46.116Z', updated_at='2021-04-16T14:03:46.116Z', ntype='host.comments', data='Unit test host comment', critical=None, seen=None)\n\n>>>\n>>> all_notes: List[Msf.Note] = msf_rest_api.get_notes(workspace=workspace.name)\n>>> print(f'All notes: {all_notes}\\n')\nAll notes: [Msf.Note(id=40, workspace=None, workspace_id=215, host=Msf.Host(id=227, workspace=None, created_at='2021-04-16T13:55:53.310Z', host=None, address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=215, updated_at='2021-04-16T13:55:53.310Z', purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=1, vuln_count=0, service_count=1, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix'), host_id=227, service_id=None, created_at='2021-04-16T14:03:46.116Z', updated_at='2021-04-16T14:03:46.116Z', ntype='host.comments', data='Unit test host comment', critical=None, seen=None)]\n</code></pre>\n\n</details>\n\nDelete note:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> removed_notes: List[Msf.Note] = msf_rest_api.delete_notes(ids=[note.id])\n>>> print(f'Removed notes: {removed_notes}\\n')\nRemoved notes: [Msf.Note(id=40, workspace=None, workspace_id=215, host=None, host_id=227, service_id=None, created_at='2021-04-16T14:03:46.116Z', updated_at='2021-04-16T14:03:46.116Z', ntype='host.comments', data='Unit test host comment', critical=None, seen=None)]\n</code></pre>\n\n<img src=\"https://python-libmsf.github.io/images/delete_note.png\" alt=\"Delete note\">\n\n</details>\n\n### Credentials and logins\n\n```python\nfrom libmsf import Msf\nfrom libmsf.rest import MsfRestApi\nfrom typing import List\n\nmsf_api_key: str = 'cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460'\nmsf_api_url: str = 'https://localhost:5443'\nmsf_rest_api: MsfRestApi = MsfRestApi(api_key=msf_api_key, api_url=msf_api_url)\n\nworkspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\nworkspace.id = msf_rest_api.get_workspace_id_by_name(workspace.name)\nhost: Msf.Host = Msf.Host(address='192.168.1.1')\nservice: Msf.Service = Msf.Service(port=12345, name='http', proto='tcp')\n\ncred: Msf.Cred = Msf.Cred()\ncred.workspace_id = workspace.id\ncred.address = host.address\ncred.port = service.port\ncred.username = 'UnitTestUser'\ncred.private_data = 'UnitTestPassword'\ncred.private_type = 'password'\ncred.module_fullname = 'auxiliary/scanner/http/http_login'\ncred.service_name = service.name\ncred.protocol = service.proto\ncred.origin_type = 'service'\n\nlogin: Msf.Login = Msf.Login()\nlogin.workspace_id = workspace.id\nlogin.address = host.address\nlogin.port = service.port\nlogin.last_attempted_at = '2021-01-01T11:11:11.111Z'\nlogin.service_name = service.name\nlogin.protocol = service.proto\nlogin.status = 'Successful'\nlogin.access_level = 'admin'\n\ncred.id = msf_rest_api.create_cred(cred=cred)\nprint(f'New cred: {cred}\\n')\n\nlogin.core_id = cred.id\nlogin.id = msf_rest_api.create_login(login=login)\nprint(f'New login: {login}\\n')\n\nnew_login: Msf.Login = msf_rest_api.get_login_by_id(login_id=login.id)\nprint(f'New login by id: {new_login}\\n')\n\nnew_cred: Msf.Cred = msf_rest_api.get_cred_by_id(workspace=workspace.name, cred_id=cred.id)\nprint(f'New cred by id: {new_cred}\\n')\n\nall_logins: List[Msf.Login] = msf_rest_api.get_logins()\nprint(f'All logins: {all_logins}\\n')\n\nall_creds: List[Msf.Cred] = msf_rest_api.get_creds(workspace=workspace.name)\nprint(f'All creds: {all_creds}\\n')\n\nremoved_logins: List[Msf.Login] = msf_rest_api.delete_logins(ids=[login.id])\nprint(f'Removed logins: {removed_logins}\\n')\n\nremoved_creds: List[Msf.Cred] = msf_rest_api.delete_creds(ids=[cred.id])\nprint(f'Removed creds: {removed_creds}\\n')\n\n```\n\nCreate credentials and login:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> from libmsf import Msf\n>>> from libmsf.rest import MsfRestApi\n>>> from typing import List\n>>>\n>>> msf_api_key: str = 'cf2dbb7f9d1f92839a84f9c165ee9afef3dd3a3116bc99badf45be4ae5655168c9c2c3c58621b460'\n>>> msf_api_url: str = 'https://localhost:5443'\n>>> msf_rest_api: MsfRestApi = MsfRestApi(api_key=msf_api_key, api_url=msf_api_url)\n>>>\n>>> workspace: Msf.Workspace = Msf.Workspace(name='test_workspace')\n>>> workspace.id = msf_rest_api.get_workspace_id_by_name(workspace.name)\n>>> host: Msf.Host = Msf.Host(address='192.168.1.1')\n>>> service: Msf.Service = Msf.Service(port=12345, name='http', proto='tcp')\n>>>\n>>> cred: Msf.Cred = Msf.Cred()\n>>> cred.workspace_id = workspace.id\n>>> cred.address = host.address\n>>> cred.port = service.port\n>>> cred.username = 'UnitTestUser'\n>>> cred.private_data = 'UnitTestPassword'\n>>> cred.private_type = 'password'\n>>> cred.module_fullname = 'auxiliary/scanner/http/http_login'\n>>> cred.service_name = service.name\n>>> cred.protocol = service.proto\n>>> cred.origin_type = 'service'\n>>>\n>>> login: Msf.Login = Msf.Login()\n>>> login.workspace_id = workspace.id\n>>> login.address = host.address\n>>> login.port = service.port\n>>> login.last_attempted_at = '2021-01-01T11:11:11.111Z'\n>>> login.service_name = service.name\n>>> login.protocol = service.proto\n>>> login.status = 'Successful'\n>>> login.access_level = 'admin'\n>>>\n>>> cred.id = msf_rest_api.create_cred(cred=cred)\n>>> print(f'New cred: {cred}\\n')\nNew cred: Msf.Cred(id=68, workspace_id=215, username='UnitTestUser', private_data='UnitTestPassword', private_type='password', jtr_format=None, address='192.168.1.1', port=12345, service_name='http', protocol='tcp', origin_type='service', module_fullname='auxiliary/scanner/http/http_login', created_at=None, updated_at=None, origin_id=-1, private_id=-1, public_id=-1, realm_id=-1, logins_count=-1, logins=None, public=None, private=None, origin=None)\n\n>>>\n>>> login.core_id = cred.id\n>>> login.id = msf_rest_api.create_login(login=login)\n>>> print(f'New login: {login}\\n')\nNew login: Msf.Login(id=78, workspace_id=215, core_id=68, service_id=-1, last_attempted_at='2021-01-01T11:11:11.111Z', address='192.168.1.1', service_name='http', port=12345, protocol='tcp', status='Successful', access_level='admin', public=None, private=None, created_at=None, updated_at=None)\n</code></pre>\n\n<img src=\"https://python-libmsf.github.io/images/create_cred.png\" alt=\"Create cred\">\n\n</details>\n\nGet credentials and logins:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> new_login: Msf.Login = msf_rest_api.get_login_by_id(login_id=login.id)\n>>> print(f'New login by id: {new_login}\\n')\nNew login by id: Msf.Login(id=78, workspace_id=-1, core_id=68, service_id=252, last_attempted_at='2021-01-01T11:11:11.111Z', address=None, service_name='ssh', port=-1, protocol='tcp', status='Successful', access_level='admin', public=None, private=None, created_at='2021-04-16T14:16:05.151Z', updated_at='2021-04-16T14:16:05.151Z')\n\n>>>\n>>> new_cred: Msf.Cred = msf_rest_api.get_cred_by_id(workspace=workspace.name, cred_id=cred.id)\n>>> print(f'New cred by id: {new_cred}\\n')\nNew cred by id: Msf.Cred(id=68, workspace_id=215, username=None, private_data=None, private_type=None, jtr_format=None, address=None, port=-1, service_name=None, protocol=None, origin_type='Metasploit::Credential::Origin::Service', module_fullname=None, created_at='2021-04-16T14:15:36.173Z', updated_at='2021-04-16T14:15:36.173Z', origin_id=77, private_id=2, public_id=5, realm_id=None, logins_count=1, logins=[Msf.Login(id=78, workspace_id=-1, core_id=68, service_id=252, last_attempted_at='2021-01-01T11:11:11.111Z', address=None, service_name='ssh', port=-1, protocol='tcp', status='Successful', access_level='admin', public=None, private=None, created_at='2021-04-16T14:16:05.151Z', updated_at='2021-04-16T14:16:05.151Z')], public=Msf.Public(id=5, username='UnitTestUser', created_at='2021-04-15T22:57:21.572Z', updated_at='2021-04-15T22:57:21.572Z', type='Metasploit::Credential::Username'), private=Msf.Private(id=2, data='UnitTestPassword', created_at='2021-04-15T22:57:21.548Z', updated_at='2021-04-15T22:57:21.548Z', jtr_format=None, type='Metasploit::Credential::Password'), origin=Msf.Origin(id=77, service_id=252, module_full_name='auxiliary/scanner/http/http_login', created_at='2021-04-16T14:11:06.627Z', updated_at='2021-04-16T14:11:06.627Z', type='Metasploit::Credential::Origin::Service'))\n\n>>>\n>>> all_logins: List[Msf.Login] = msf_rest_api.get_logins()\n>>> print(f'All logins: {all_logins}\\n')\nAll logins: [Msf.Login(id=78, workspace_id=-1, core_id=68, service_id=252, last_attempted_at='2021-01-01T11:11:11.111Z', address=None, service_name='ssh', port=-1, protocol='tcp', status='Successful', access_level='admin', public=None, private=None, created_at='2021-04-16T14:16:05.151Z', updated_at='2021-04-16T14:16:05.151Z')]\n\n>>>\n>>> all_creds: List[Msf.Cred] = msf_rest_api.get_creds(workspace=workspace.name)\n>>> print(f'All creds: {all_creds}\\n')\nAll creds: [Msf.Cred(id=68, workspace_id=215, username=None, private_data=None, private_type=None, jtr_format=None, address=None, port=-1, service_name=None, protocol=None, origin_type='Metasploit::Credential::Origin::Service', module_fullname=None, created_at='2021-04-16T14:15:36.173Z', updated_at='2021-04-16T14:15:36.173Z', origin_id=77, private_id=2, public_id=5, realm_id=None, logins_count=1, logins=[Msf.Login(id=78, workspace_id=-1, core_id=68, service_id=252, last_attempted_at='2021-01-01T11:11:11.111Z', address=None, service_name='ssh', port=-1, protocol='tcp', status='Successful', access_level='admin', public=None, private=None, created_at='2021-04-16T14:16:05.151Z', updated_at='2021-04-16T14:16:05.151Z')], public=Msf.Public(id=5, username='UnitTestUser', created_at='2021-04-15T22:57:21.572Z', updated_at='2021-04-15T22:57:21.572Z', type='Metasploit::Credential::Username'), private=Msf.Private(id=2, data='UnitTestPassword', created_at='2021-04-15T22:57:21.548Z', updated_at='2021-04-15T22:57:21.548Z', jtr_format=None, type='Metasploit::Credential::Password'), origin=Msf.Origin(id=77, service_id=252, module_full_name='auxiliary/scanner/http/http_login', created_at='2021-04-16T14:11:06.627Z', updated_at='2021-04-16T14:11:06.627Z', type='Metasploit::Credential::Origin::Service'))]\n</code></pre>\n\n</details>\n\nDelete credentials and login:\n\n<details>\n  <summary>Example:</summary>\n\n<pre lang=\"shell\"><code>\n>>> removed_logins: List[Msf.Login] = msf_rest_api.delete_logins(ids=[login.id])\n>>> print(f'Removed logins: {removed_logins}\\n')\nRemoved logins: [Msf.Login(id=78, workspace_id=-1, core_id=68, service_id=252, last_attempted_at='2021-01-01T11:11:11.111Z', address=None, service_name='ssh', port=-1, protocol='tcp', status='Successful', access_level='admin', public=None, private=None, created_at='2021-04-16T14:16:05.151Z', updated_at='2021-04-16T14:16:05.151Z')]\n\n>>>\n>>> removed_creds: List[Msf.Cred] = msf_rest_api.delete_creds(ids=[cred.id])\n>>> print(f'Removed creds: {removed_creds}\\n')\nRemoved creds: [Msf.Cred(id=68, workspace_id=215, username=None, private_data=None, private_type=None, jtr_format=None, address=None, port=-1, service_name=None, protocol=None, origin_type='Metasploit::Credential::Origin::Service', module_fullname=None, created_at='2021-04-16T14:15:36.173Z', updated_at='2021-04-16T14:15:36.173Z', origin_id=77, private_id=2, public_id=5, realm_id=None, logins_count=0, logins=None, public=None, private=None, origin=None)]\n</code></pre>\n\n<img src=\"https://python-libmsf.github.io/images/delete_cred.png\" alt=\"Delete cred\">\n\n</details>\n\n\n## MsfParser\n\nCode example:\n\n```python\nfrom libmsf import MsfData\nfrom libmsf.parser import MsfParser\n\nmsf_parser: MsfParser = MsfParser()\nmsf_data: MsfData = msf_parser.parse_file(file_name='tests/msf_db_export.xml')\n\nprint(f'Workspace: {msf_data.workspace}')\nprint(f'Hosts: {msf_data.hosts}')\nprint(f'Services: {msf_data.services}')\nprint(f'Vulnerabilities: {msf_data.vulns}')\nprint(f'Notes: {msf_data.notes}')\n```\n\nResult example:\n\n```shell\nWorkspace: unit_test_workspace\nHosts: [Msf.Host(id=246, workspace='unit_test_workspace', created_at='2021-04-17 14:12:22 UTC', host='None', address='192.168.1.1', mac='00:11:22:33:44:55', comm='unittest', name='unit.test.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=241, updated_at='2021-04-17 14:12:22 UTC', purpose='device', info='Host for unit tests', comments='Host for unit tests', scope='unit tests scope', virtual_host='unittest', note_count=1, vuln_count=1, service_count=1, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix'), Msf.Host(id=247, workspace='unit_test_workspace', created_at='2021-04-17 14:12:22 UTC', host='None', address='192.168.1.2', mac='00:11:22:33:44:56', comm='unittest2', name='unit.test2.com', state='alive', os_name='linux', os_flavor='test', os_sp='test', os_lang='English', arch='x86', workspace_id=241, updated_at='2021-04-17 14:12:22 UTC', purpose='device', info='Host for unit tests 2', comments='Host for unit tests 2', scope='unit tests scope', virtual_host='unittest', note_count=1, vuln_count=1, service_count=1, host_detail_count=0, exploit_attempt_count=0, cred_count=0, detected_arch='', os_family='posix')]\nServices: [Msf.Service(id=271, workspace='unit_test_workspace', host='192.168.1.1', host_id=246, created_at='2021-04-17 14:12:22 UTC', port=12345, proto='tcp', state='open', name='http', updated_at='2021-04-17 14:12:22 UTC', info='Unit test'), Msf.Service(id=272, workspace='unit_test_workspace', host='192.168.1.2', host_id=247, created_at='2021-04-17 14:12:22 UTC', port=12346, proto='tcp', state='open', name='http', updated_at='2021-04-17 14:12:22 UTC', info='Unit test 2')]\nVulnerabilities: [Msf.Vuln(id=285, workspace='unit_test_workspace', host='192.168.1.1', host_id=246, port=12345, service_id=271, created_at='2021-04-17 14:12:22 UTC', name='Unit test vuln name', updated_at='2021-04-17 14:12:22 UTC', info='Unit test vuln info', exploited_at='', vuln_detail_count=0, vuln_attempt_count=0, origin_id='', origin_type='', refs=['CVE-2020-2020', 'URL-https://unit.test.com/vuln'], module_refs='None'), Msf.Vuln(id=286, workspace='unit_test_workspace', host='192.168.1.2', host_id=247, port=12346, service_id=272, created_at='2021-04-17 14:12:22 UTC', name='Unit test vuln name 2', updated_at='2021-04-17 14:12:22 UTC', info='Unit test vuln info 2', exploited_at='', vuln_detail_count=0, vuln_attempt_count=0, origin_id='', origin_type='', refs=['CVE-2020-2021', 'URL-https://unit.test.com/vuln2'], module_refs='None')]\nNotes: [Msf.Note(id=53, workspace='unit_test_workspace', workspace_id=241, host='192.168.1.1', host_id=246, service_id=-1, vuln_id=-1, port=-1, created_at='2021-04-17 14:12:22 UTC', updated_at='2021-04-17 14:12:22 UTC', ntype='host.comments', data='Unit test host comment', critical=False, seen=False), Msf.Note(id=54, workspace='unit_test_workspace', workspace_id=241, host='192.168.1.2', host_id=247, service_id=-1, vuln_id=-1, port=-1, created_at='2021-04-17 14:12:22 UTC', updated_at='2021-04-17 14:12:22 UTC', ntype='host.comments', data='Unit test host comment 2', critical=False, seen=False)]\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://python-libmsf.github.io/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "libmsf",
    "package_url": "https://pypi.org/project/libmsf/",
    "platform": "",
    "project_url": "https://pypi.org/project/libmsf/",
    "project_urls": {
      "Homepage": "https://python-libmsf.github.io/"
    },
    "release_url": "https://pypi.org/project/libmsf/0.2.4/",
    "requires_dist": [
      "requests",
      "urllib3",
      "dataclasses",
      "marshmallow",
      "configparser"
    ],
    "requires_python": ">=3.6",
    "summary": "Python Metasploit Library",
    "version": "0.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10695631,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9237d6956601b2828a10ecd487c665d75ae1c4400a2740c3f9aedcc6e8e54e84",
          "md5": "4ffeaec29fd5fee86d7e1e5c5068678c",
          "sha256": "8383689cf92dbd3521ea37e6286ba85b14e319fc37220bdeeb7dfb28b4e5aad5"
        },
        "downloads": -1,
        "filename": "libmsf-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ffeaec29fd5fee86d7e1e5c5068678c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17661,
        "upload_time": "2021-04-16T18:17:30",
        "upload_time_iso_8601": "2021-04-16T18:17:30.897771Z",
        "url": "https://files.pythonhosted.org/packages/92/37/d6956601b2828a10ecd487c665d75ae1c4400a2740c3f9aedcc6e8e54e84/libmsf-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "857c3ffae6132733340b71f9f5410adf51ab98bc4b365ddf5047ed22e67e507a",
          "md5": "8a867ee093c0ae2b4f26ab1f877ab75e",
          "sha256": "001a03e244fdca1e7766bf5751ae11ad963220be66e3e1de3d3aece172645963"
        },
        "downloads": -1,
        "filename": "libmsf-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8a867ee093c0ae2b4f26ab1f877ab75e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27620,
        "upload_time": "2021-04-16T18:17:32",
        "upload_time_iso_8601": "2021-04-16T18:17:32.554629Z",
        "url": "https://files.pythonhosted.org/packages/85/7c/3ffae6132733340b71f9f5410adf51ab98bc4b365ddf5047ed22e67e507a/libmsf-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51aa36cc02b592c595c90082cbe0a67d738b73aeaf2d0998ec05f45140463498",
          "md5": "34fd85d9f771285f0cf62729c7958f1c",
          "sha256": "1fb7dcb331da6e5193bc78c7724c865ab2b050f7292d68ebcf8292ec7b5ace68"
        },
        "downloads": -1,
        "filename": "libmsf-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34fd85d9f771285f0cf62729c7958f1c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17660,
        "upload_time": "2021-04-16T18:38:11",
        "upload_time_iso_8601": "2021-04-16T18:38:11.367011Z",
        "url": "https://files.pythonhosted.org/packages/51/aa/36cc02b592c595c90082cbe0a67d738b73aeaf2d0998ec05f45140463498/libmsf-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80eba225433f0a92c87eecf9900cb3c12e71754cf18c1d180b495d5389c35132",
          "md5": "df7e77dc033558f18e01c41a42ffc477",
          "sha256": "d0405f7747e657397e3fe575ad0fdab971ea4b18d4e014d27337e0156991e654"
        },
        "downloads": -1,
        "filename": "libmsf-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "df7e77dc033558f18e01c41a42ffc477",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27622,
        "upload_time": "2021-04-16T18:38:13",
        "upload_time_iso_8601": "2021-04-16T18:38:13.356574Z",
        "url": "https://files.pythonhosted.org/packages/80/eb/a225433f0a92c87eecf9900cb3c12e71754cf18c1d180b495d5389c35132/libmsf-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b31c74d8989e840f4943f92c98742ea4a2080dc43518624cd5a8efddea9a5fa9",
          "md5": "79c15cd4c9e9e18ec36df99f95d0db0b",
          "sha256": "54dd108c20681ebc86132c8afe6e85f683a8b6ca04f8a5aca1927d7479902f47"
        },
        "downloads": -1,
        "filename": "libmsf-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79c15cd4c9e9e18ec36df99f95d0db0b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17640,
        "upload_time": "2021-04-16T19:53:50",
        "upload_time_iso_8601": "2021-04-16T19:53:50.178794Z",
        "url": "https://files.pythonhosted.org/packages/b3/1c/74d8989e840f4943f92c98742ea4a2080dc43518624cd5a8efddea9a5fa9/libmsf-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d010c61a663a41f35dac13e18b820f0f2aafb000031d0e84d67c741d40964da9",
          "md5": "544fc6472345b3acbc71fcf460c4ee55",
          "sha256": "fe2f7707ec348400d9dbec661c0953b11c66b013fc025f40964fa1efe8366895"
        },
        "downloads": -1,
        "filename": "libmsf-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "544fc6472345b3acbc71fcf460c4ee55",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27565,
        "upload_time": "2021-04-16T19:53:51",
        "upload_time_iso_8601": "2021-04-16T19:53:51.925771Z",
        "url": "https://files.pythonhosted.org/packages/d0/10/c61a663a41f35dac13e18b820f0f2aafb000031d0e84d67c741d40964da9/libmsf-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa513be0938e760eb6d96add4a56996be6a2c2f702abb2aede78bbc5dab1ae8d",
          "md5": "97c70309698e506c53e3716e0a97729d",
          "sha256": "7c748c181db4595cd6415865915d1af0c2251b21a634c2922c7d998410bd90da"
        },
        "downloads": -1,
        "filename": "libmsf-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "97c70309698e506c53e3716e0a97729d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 17621,
        "upload_time": "2021-04-16T20:01:37",
        "upload_time_iso_8601": "2021-04-16T20:01:37.573788Z",
        "url": "https://files.pythonhosted.org/packages/fa/51/3be0938e760eb6d96add4a56996be6a2c2f702abb2aede78bbc5dab1ae8d/libmsf-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f4611f42f2481f624260d3175452df470b3dcf222ab7868bcbccd4a2bcfc43f8",
          "md5": "6b54dd876f7191b6c7a0d2e96d698a2c",
          "sha256": "a63b527eea647c40430b705b23520d628fddbe7a2a43ffc5d17ea12cae6e5b8c"
        },
        "downloads": -1,
        "filename": "libmsf-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "6b54dd876f7191b6c7a0d2e96d698a2c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27534,
        "upload_time": "2021-04-16T20:01:39",
        "upload_time_iso_8601": "2021-04-16T20:01:39.012654Z",
        "url": "https://files.pythonhosted.org/packages/f4/61/1f42f2481f624260d3175452df470b3dcf222ab7868bcbccd4a2bcfc43f8/libmsf-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a91b3ed7fd0ad839b58525899c6f233ab9f482a090871225df7def63dab41b7",
          "md5": "d3c99b6c4c002db7420ce1604a2bd7ae",
          "sha256": "64ceed88717d0df25f4f6195da3ba223cfc1bfb9f7f96bc87ed291cf07f6217f"
        },
        "downloads": -1,
        "filename": "libmsf-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3c99b6c4c002db7420ce1604a2bd7ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20326,
        "upload_time": "2021-04-19T14:39:57",
        "upload_time_iso_8601": "2021-04-19T14:39:57.655707Z",
        "url": "https://files.pythonhosted.org/packages/9a/91/b3ed7fd0ad839b58525899c6f233ab9f482a090871225df7def63dab41b7/libmsf-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dd920556aa05a8774c0ebe3ef2c58db2129e49f3bf429154b503d81f8a2291e",
          "md5": "2dbbd3d20c05d14c8e2766e513dda42a",
          "sha256": "58c0b70e5f92fc37659fe23dc8766118c9446c00220371ec14772249836d1af7"
        },
        "downloads": -1,
        "filename": "libmsf-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2dbbd3d20c05d14c8e2766e513dda42a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31062,
        "upload_time": "2021-04-19T14:39:59",
        "upload_time_iso_8601": "2021-04-19T14:39:59.646592Z",
        "url": "https://files.pythonhosted.org/packages/1d/d9/20556aa05a8774c0ebe3ef2c58db2129e49f3bf429154b503d81f8a2291e/libmsf-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0005b51cf2f8dba91e51be55e6ce4f8ab96b1d66ab6ba44d230877737a053a7d",
          "md5": "355f1452901f0152ee029ea963d3b038",
          "sha256": "4b46d7db953d80e4e0a32bbf564369121bfb0e0bc92c06dfb33b0c30a7958ad3"
        },
        "downloads": -1,
        "filename": "libmsf-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "355f1452901f0152ee029ea963d3b038",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 20333,
        "upload_time": "2021-04-21T15:47:59",
        "upload_time_iso_8601": "2021-04-21T15:47:59.827129Z",
        "url": "https://files.pythonhosted.org/packages/00/05/b51cf2f8dba91e51be55e6ce4f8ab96b1d66ab6ba44d230877737a053a7d/libmsf-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d72ef0e53d36ae9a47d7e7182da2331450efa45005e9e75cc7625e3611b72f5e",
          "md5": "2f6b31ba34824c2736b74e2a22781436",
          "sha256": "a90a4257fe57c8d4bf7b005edb93e650351ab32b323791fbb3da289008ab82b0"
        },
        "downloads": -1,
        "filename": "libmsf-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2f6b31ba34824c2736b74e2a22781436",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 31049,
        "upload_time": "2021-04-21T15:48:02",
        "upload_time_iso_8601": "2021-04-21T15:48:02.264985Z",
        "url": "https://files.pythonhosted.org/packages/d7/2e/f0e53d36ae9a47d7e7182da2331450efa45005e9e75cc7625e3611b72f5e/libmsf-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bed85a08032c8bd79b677a41060294a2e42d17650db0d16140143eec5a2aaddf",
          "md5": "c35bd314fdf9e04d5f5f67bf89ebe524",
          "sha256": "b119106e6aeade759e4dd5a150d9437479ff206eb9d69b0ea0efffa4dc275fed"
        },
        "downloads": -1,
        "filename": "libmsf-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c35bd314fdf9e04d5f5f67bf89ebe524",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21344,
        "upload_time": "2021-06-11T13:22:28",
        "upload_time_iso_8601": "2021-06-11T13:22:28.395364Z",
        "url": "https://files.pythonhosted.org/packages/be/d8/5a08032c8bd79b677a41060294a2e42d17650db0d16140143eec5a2aaddf/libmsf-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b547d9f7ba5728036a6a4736d25b70e649a0dad860642266392bc3938ed66e78",
          "md5": "0571f59500e8ab06963c50b8c13aeb7d",
          "sha256": "c1b60c169455c8915528a5b74ce457437f631746e901be03094636a388a63ecc"
        },
        "downloads": -1,
        "filename": "libmsf-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0571f59500e8ab06963c50b8c13aeb7d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33048,
        "upload_time": "2021-06-11T13:22:30",
        "upload_time_iso_8601": "2021-06-11T13:22:30.978098Z",
        "url": "https://files.pythonhosted.org/packages/b5/47/d9f7ba5728036a6a4736d25b70e649a0dad860642266392bc3938ed66e78/libmsf-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e8911a5a42c2c7a805629ff215fb7941ec35632db0e383f2a39251f62149fe3",
          "md5": "9580bcac592ad3028e5ef20e5b08bc9b",
          "sha256": "6cdd20aded9a7ca0af6eb0a2da1d83b861f8c48cd5659e579aa9805cd5299386"
        },
        "downloads": -1,
        "filename": "libmsf-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9580bcac592ad3028e5ef20e5b08bc9b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21450,
        "upload_time": "2021-06-16T20:47:12",
        "upload_time_iso_8601": "2021-06-16T20:47:12.261613Z",
        "url": "https://files.pythonhosted.org/packages/1e/89/11a5a42c2c7a805629ff215fb7941ec35632db0e383f2a39251f62149fe3/libmsf-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c314c3442b312f6a886acb2b1fa0f0d9fe13903a08a4494798c2d2258a3ff4b",
          "md5": "899c3a39a9e6114794d958b42e232f38",
          "sha256": "490ae93fd2a5df45ddc6b00a4f8317cc6b41ca9aa1f4a826862fed02a35e3d5e"
        },
        "downloads": -1,
        "filename": "libmsf-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "899c3a39a9e6114794d958b42e232f38",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33165,
        "upload_time": "2021-06-16T20:47:14",
        "upload_time_iso_8601": "2021-06-16T20:47:14.721531Z",
        "url": "https://files.pythonhosted.org/packages/3c/31/4c3442b312f6a886acb2b1fa0f0d9fe13903a08a4494798c2d2258a3ff4b/libmsf-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6fc8f020d2a148895a2f21529290f68a6675bc7ca8a140cd0f67f3ac8e2f8151",
          "md5": "e290f30de3a0849cc12c671c4ac58368",
          "sha256": "21d9e548cff9c486b7045fd430eecf5702164c60b0f8eaf410c1a7b3979b47a6"
        },
        "downloads": -1,
        "filename": "libmsf-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e290f30de3a0849cc12c671c4ac58368",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21522,
        "upload_time": "2021-06-20T18:15:18",
        "upload_time_iso_8601": "2021-06-20T18:15:18.303943Z",
        "url": "https://files.pythonhosted.org/packages/6f/c8/f020d2a148895a2f21529290f68a6675bc7ca8a140cd0f67f3ac8e2f8151/libmsf-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cc6a15dd73a8d0bae7977b629398c6ee1b82518d15cfb55bfcc663fd0b3c2b1",
          "md5": "3ff30dc796ca1d528b59d79ae4a9a743",
          "sha256": "429baed0b8c8a0a537b1be7ea6137b201640ea2de05fb17829da36e02ec52762"
        },
        "downloads": -1,
        "filename": "libmsf-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3ff30dc796ca1d528b59d79ae4a9a743",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33232,
        "upload_time": "2021-06-20T18:15:20",
        "upload_time_iso_8601": "2021-06-20T18:15:20.320924Z",
        "url": "https://files.pythonhosted.org/packages/0c/c6/a15dd73a8d0bae7977b629398c6ee1b82518d15cfb55bfcc663fd0b3c2b1/libmsf-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6fc8f020d2a148895a2f21529290f68a6675bc7ca8a140cd0f67f3ac8e2f8151",
        "md5": "e290f30de3a0849cc12c671c4ac58368",
        "sha256": "21d9e548cff9c486b7045fd430eecf5702164c60b0f8eaf410c1a7b3979b47a6"
      },
      "downloads": -1,
      "filename": "libmsf-0.2.4-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e290f30de3a0849cc12c671c4ac58368",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 21522,
      "upload_time": "2021-06-20T18:15:18",
      "upload_time_iso_8601": "2021-06-20T18:15:18.303943Z",
      "url": "https://files.pythonhosted.org/packages/6f/c8/f020d2a148895a2f21529290f68a6675bc7ca8a140cd0f67f3ac8e2f8151/libmsf-0.2.4-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0cc6a15dd73a8d0bae7977b629398c6ee1b82518d15cfb55bfcc663fd0b3c2b1",
        "md5": "3ff30dc796ca1d528b59d79ae4a9a743",
        "sha256": "429baed0b8c8a0a537b1be7ea6137b201640ea2de05fb17829da36e02ec52762"
      },
      "downloads": -1,
      "filename": "libmsf-0.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "3ff30dc796ca1d528b59d79ae4a9a743",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 33232,
      "upload_time": "2021-06-20T18:15:20",
      "upload_time_iso_8601": "2021-06-20T18:15:20.320924Z",
      "url": "https://files.pythonhosted.org/packages/0c/c6/a15dd73a8d0bae7977b629398c6ee1b82518d15cfb55bfcc663fd0b3c2b1/libmsf-0.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}