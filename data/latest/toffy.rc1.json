{
  "info": {
    "author": "Noah Frey Greenwald",
    "author_email": "nfgreen@stanford.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Apache Software License",
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# toffy\nThe toffy repo is designed to simplify the process of generating and processing data on the MIBIScope platform.\n\nThis repo is currently in beta testing. None of the code has been published yet, and we will be making breaking changes frequently. If you find bugs, please [open an issue](https://github.com/angelolab/toffy/issues/new/choose). If you have questions or want to collaborate, please reach out to Noah (nfgreen@stanford.edu)\n\n## Table of Contents\n- [Overview](#overview)\n  - [1. Using toffy for the first time](#1-using-toffy-for-the-first-time)\n  - [2. Setting up a MIBI run](#2-setting-up-a-mibi-run)\n  - [3. Evaluating a MIBI run](#3-evaluating-a-mibi-run)\n  - [4. Processing data after a MIBI run](#4-processing-mibi-data)\n  - [5. Formatting data for downstream analysis](#5-formatting-mibi-runs-for-analysis)\n- [Installation](#installation)\n  - [Requirements for specific operating systems](#requirements-for-specific-operating-systems)\n    - [Windows](#windows)\n    - [macOS](#macos)\n  - [Setting up the virtual environment](#setting-up-the-virtual-environment)\n  - [Using the repo](#using-the-repo)\n  - [Updating the repo](#updating-the-repo)\n- [Directory structure](#directory-structure)\n- [Panel format](#panel-format)\n- [Median Pulse Height](#median-pulse-height)\n- [Questions?](#questions)\n\n## Overview\nThe repo has four main parts, with associated code and jupyter notebooks for each.\nWe have also recorded workshop talks which complement the repository. [MIBI Workshop (Pre-Recorded Lectures) Playlist](https://www.youtube.com/playlist?list=PLjNbkEm4vA27f8-EB7q9u_lDPI7oxohhn).\n\n### 1. Using toffy for the first time\nThe first time you use toffy on one of the commercial instruments, you'll need to perform some basic tasks to ensure everything is working properly. The [set up](./templates/1_set_up_toffy.ipynb) jupyter notebook will guide you through this process and the resulting directory structure is explained below ([directory structure](#directory-structure)).\nFor more information, see the [setup toffy walkthrough](https://youtu.be/ZEtqSptJP1M).\n\n### 2. Setting up a MIBI run\nFor large MIBI runs, it is often convenient to automatically generate the JSON file containing the individual FOVs. There are two notebooks for this task, one for large tiled regions, the second for TMAs. If you will be tiling multiple adjacent FOVs together into a single image, the [tiling](./templates/2_create_tiled_mibi_run.ipynb) notebook can automate this process. You provide the location of the top corner of the tiled region, along with the number of fovs along the rows and columns, and it will automatically create the appropriate JSON file.\n\nThe [second notebook](./templates/2_create_tma_mibi_run.ipynb) is for TMAs. This notebook is run after you have selected the appropriate cores from the TMA. It will generate an overlay with the image of the TMA and the locations you picked to ensure you selected the correct cores. It will then check that they are named correctly and that there are no duplicates.\n\nFor more information, see the [MIBI tiling walkthrough](https://www.youtube.com/watch?v=U0C_nMT9CBQ&list=PLjNbkEm4vA27f8-EB7q9u_lDPI7oxohhn&index=2).\n\n\n### 3. Evaluating a MIBI run\nThere are a number of different computational tasks to complete once a MIBI run has finished to ensure everything went smoothly.\n\n- 3a: real time monitoring. The [MIBI monitoring](./templates/3a_monitor_MIBI_run.ipynb) notebook will monitor an ongoing MIBI run, and begin processing the image data as soon as it is generated. This notebook is being continually be updated as we move more of our processing pipeline to happen in real time as the data is generated.\nFor more information, see the [real-time monitoring walkthrough](https://www.youtube.com/watch?v=o1nHJ5dGcTQ&list=PLjNbkEm4vA27f8-EB7q9u_lDPI7oxohhn&index=4).\n- 3b - 3e: post-run monitoring. For each step in the monitoring notebook, we have a dedicated notebook that can perform the same tasks once a run is complete.\nFor more information, see the [image processing and extraction walkthrough](https://www.youtube.com/watch?v=QSzjW-cuZtg&list=PLjNbkEm4vA27f8-EB7q9u_lDPI7oxohhn&index=3).\n  - 3b: [image extraction notebook](./templates/3b_extract_images_from_bin.ipynb) will extract images from bin files that have not already been processed\n  - 3c: [qc metrics notebook](./templates/3c_generate_qc_metrics.ipynb) computes and visualizes the QC metrics for the images\n  - 3d: [median pulse heights notebook](./templates/3d_compute_median_pulse_height.ipynb) generates plots showing median pulse heights for each FOV, along with estimated run time\n  - 3e: [stitch images notebook](./templates/3e_stitch_images.ipynb) creates a single stitched image for each channel in your panel across all of the FOVs in your run\n\n### 4. Processing MIBI data\nOnce your run has finished, you can begin to process the data to make it ready for analysis. To remove background signal contamination, as well as compensate for channel crosstalk, you can use the [compensation](./templates/4a_compensate_image_data.ipynb) notebook. This will guide you through the Rosetta algorithm, which uses a flow-cytometry style compensation approach to remove spurious signal.\n\nFollowing compensation, you will want to normalize your images to ensure consistent intensity across the run. You can use the [normalization](./templates/4b_normalize_image_data.ipynb) notebook to perform this step.\n\n### 5. Formatting MIBI runs for analysis\nAfter the image processing and cleanup from *toffy* is complete, the final step is to format your data to faciliate easy downstream analysis. The [reorganization](./templates/5_rename_and_reorganize.ipynb) notebook will walk you through the process of renaming FOVs, combining partial runs, and consolidating your images.\nFor more information, see the [reorganizing your data walkthrough](https://www.youtube.com/watch?v=nKYGWQ7GXC4&list=PLjNbkEm4vA27f8-EB7q9u_lDPI7oxohhn&index=5).\n\n## Pipeline Flowchart\n\n![flow-chart](templates/img/toffy_processing.png)\n\n## Installation\nIn order to get toffy working, you'll need to first install some dependencies and the repository itself. For more information, see the  [toffy setup walkthrough](https://www.youtube.com/watch?v=g52-oqP_QjA&list=PLjNbkEm4vA27f8-EB7q9u_lDPI7oxohhn&index=1)\n\n### Requirements for specific operating systems\nThe process of setting up is largely the same for different operating systems. However, there are a few key differences.\n\n#### Windows\n\n- You must have **C++ Build Tools** (VS19) installed.\nGo to  https://visualstudio.microsoft.com/visual-cpp-build-tools/ and click 'Download Build Tools'.\nOpen the installer and make sure you are installing the package labeled *C++ build tools*, then follow the prompts.\n    - **(If installing on CAC, you will need the admin password and must contact support@ionpath.com)**\n    - **Git - CAC:** We highly recommend installing git system-wide on the CAC, by downloading the installation utility [here](https://git-scm.com/downloads).\n       1. Under Standalone Installer, click the 64-bit Git for Windows Setup link to download the proper installer.\n       2. Run the Git setup `.exe` file. It should be version 2.37.1 or higher.\n       3. Click `Yes` to allow Git to make the necessary changes.\n       4. Click `Next` to accept the GNU License.\n       5. Click `Next` to save Git in it's default location. ![alt text](templates/img/git_install/step_01.png \"Select Destination Location\")\n       6. Next, the installer will give you a list of options for each menu. Leave everything to it's default. **We recommend to not change anything, unless you are confident on what you are doing.**\n       7. The last menu, will ask if you would like to use any experimental options. Click `Install`, and leave the experimental options unchecked. This will now install Git. ![alt text](templates/img/git_install/step_02.png).\n       8.  Open the Windows Terminal, and within the Powershell Tab type `Git` and hit enter. If you see the following output, you're good to go! ![alt text](templates/img/git_install/step_03.png)\n\n- You will need the latest version of Anaconda (**Miniconda** preferred).\nDownload here: https://docs.conda.io/en/latest/miniconda.html and select the appropriate download for your system.\nChoose \"Just Me\" option for installation, and do not need to select the \"Tutorial\" or \"Getting Started\" options.\nContinue with the installation.\n\n#### macOS\n- You will need the latest version of Anaconda (**Miniconda** preferred).\nDownload here: https://docs.conda.io/en/latest/miniconda.html and select the appropriate download for your system.\nChoose \"Just Me\" option for installation, and do not need to select the \"Tutorial\" or \"Getting Started\" options.\nContinue with the installation.\n\n### Setting up the virtual environment\n* For Windows, you will need open the Anaconda powershell prompt instead of the regular powershell prompt for the following.\n<p align=\"center\">\n<img height=\"400\" src=\"templates/img/conda_powershell.png\" width=\"500\"/>\n</p>\n\n* If macOS user, open terminal.\n\nIf you do not already have git installed, run\n```\nconda install git\n```\nNavigate to the desired location (ex: Documents) and clone the repo.\n```\ncd .\\Documents\\\ngit clone https://github.com/angelolab/toffy.git\n```\n\nMove into directory and build the environment\n\n```\ncd toffy\nconda env create -f environment.yml\n```\n\nThis creates a *Python 3.8* environment named `toffy_env`. You can view everything that gets installed by looking at the `environment.yml` file.\n\n### Using the repo\nOnce you're ready to use the repo, enter the following commands.\n\nFirst, activate the environment:\n\n```\nconda activate toffy_env\n```\n\nOnce activated, notebooks can be used via this command for Windows:\n\n```start_jupyter.sh```\n\nor this command for macOS:\n\n```./start_jupyter.sh```\n\nYou can leave the jupyter notebook running once you're done. If it ever gets closed or you need to reopen it, just follow the steps above.\n\n### Updating the repo\n\nThe toffy repo is constantly being updated. In order to get those changes to your version, you'll need to tell git to update with the following command:\n\n```\ngit pull\n```\n\nAfter performing the above command, you will sometimes need to update your environment:\n\n```\nconda remove --name toffy_env --all\nconda env create -f environment.yml\n```\n\nTo update the notebooks, run this command for Windows:\n\n```\nstart_jupyter.sh -u\n```\n\nor this command for macOS:\n\n```\n./start_jupyter.sh -u\n```\n\n## Directory structure\nData from each run on the MIBI will be stored in the default base directory `D:\\\\Data`, in a subdirectory labeled with the run name.\nThe [set up](./templates/1_set_up_toffy.ipynb) jupyter notebook creates the following folders that will be used throughout toffy.\n<br> <br>\nFour new folders are created on the D drive:\n- `Extracted_Images`: stores the raw images extracted from the bin files in either the [MIBI monitoring notebook](./templates/3a_monitor_MIBI_run.ipynb) or the [extraction notebook](./templates/3b_extract_images_from_bin.ipynb).\n- `Rosetta_Compensated_Images`: contains the images after being processed with the Rosetta algorithm in the [compensate image data notebook](./templates/4a_compensate_image_data.ipynb)\n- `Normalized_Images`: contains the images after accounting for intensity normalization in the [normalization notebook](./templates/4b_normalize_image_data.ipynb)\n- `Cohorts`: final location of your completely processed image data after renaming the folders and files in the [renaming and reorganizing notebook](./templates/5_rename_and_reorganize.ipynb)\n\n<figcaption align = \"center\"><b>Directories in D drive</b></figcaption>\n\n![D directories](templates/img/D_dirs.png)\n\nWithin `C:\\\\Users\\\\Customer.ION\\\\Documents` are directories that store necessary files used to set up and monitor a MIBI run.\n- `normalization_curve`: directory which stores the normalization curve file for the machine that was produced by the [set up notebook](./templates/1_set_up_toffy.ipynb) and necessary for [notebook 4b](./templates/4b_normalize_image_data.ipynb)\n- `tiled_image_jsons`: stores all files used to set up a tiled run in the [tiling notebook](./templates/2_create_tiled_mibi_run.ipynb)\n- `autolabeled_tma_jsons`: stores all files used to set up a tma run in the [tma notebook](./templates/2_create_tma_mibi_run.ipynb)\n- `panel_files`: directory containing the run panel file, needed for notebooks 3a, 3b, 4a, and 4b.\n- `watcher_logs`: contains the log file of FOVs which have been processed in the [monitoring notebook](./templates/3a_monitor_MIBI_run.ipynb)\n- `run_metrics`: contains the data files produced by the [QC](./templates/3c_generate_qc_metrics.ipynb) and [MPH notebooks](./templates/3d_compute_median_pulse_height.ipynb)\n- `rosetta_matrices`: directory containing the finalized compensation matrix generated in the [compensation notebook](./templates/4a_compensate_image_data.ipynb)\n- `rosetta_testing`: directory which stores the necessary files for and output of rosetta testing completed in the [compensation notebook](./templates/4a_compensate_image_data.ipynb)\n\n<figcaption align = \"center\"><b>Directories in C drive</b></figcaption>\n\n![C directories](templates/img/C_dirs.png)\n\n<br><br>\nYou can see below how to pin a folder to Quick Access, which can then be easily located in the section of the same name on the left side of File Explorer.\n\nWe suggest pinning the following folders: `tiled_image_jsons`, `autolabeled_jsons`, `run_metrics`.\n\n![Quick Access](templates/img/quick_access.gif)\n\n\n## Panel format\nMany of the scripts in toffy require a panel file, identifying which targets have been put on which masses. You can download your panel online from the Ionpath MibiTracker under the resources tab. In the panels section, open your panel and click `Download csv`.\n\n![panel download](templates/img/panel_download.png)\n\nYou should then copy the file to the `C:\\\\Users\\\\Customer.ION\\\\Documents\\panel_files` directory, and rename the file to be descriptive of your run.\nThe toffy notebooks expect the panel files to be formatted slightly differently than the Ionpath default. The first time your panel is read in to one of the notebooks, it will be automatically modified by our scripts to contain the necessary information for toffy processing. This includes adding additional channels which are used for compensation, a full list of which can be found in the [example panel file](https://github.com/angelolab/toffy/blob/main/files/example_panel_file.csv).\n\n## Median Pulse Height\nThe median pulse height (MPH) provides a way to assess the sensitivity of the detector, independent of the specific sample being acquired. It uses characteristics of the output from the detector itself to determine what fraction of maximum sensitivity the instrument is currently running at. We use this fraction of the maximum sensitivity to determine 1) when the detector needs to be swept again and 2) how much to normalize our images by after the fact the correct for this change in sensitivity. The minimum MPH required to still have acceptable signal will depend in part on the markers in your panel, the settings of the instrument, and other factors. However, we often find that the miniumum is somewhere between 5,000 and 6,000 MPH.\n\n\n## Development Notes\n\n### Requirements\n* [Python Poetry](https://python-poetry.org)\n  * Recommended to install it with either:\n    * [**Official Installer:**](https://python-poetry.org/docs/master/#installing-with-the-official-installer)\n        ```sh\n        curl -sSL https://install.python-poetry.org | python3 -\n        ```\n    * [**pipx**](https://python-poetry.org/docs/master/#installing-with-pipx), (requires [`pipx`](https://pypa.github.io/pipx/))\n      * If you are using `pipx`, run the following installation commands\n        ```sh\n        brew install pipx\n        pipx ensurepath\n        ```\n* [pre-commit](https://pre-commit.com)\n    ```sh\n    brew isntall pre-commit\n    ```\n\n## Setup\n\n1. Clone the repo: `git clone https://github.com/angelolab/toffy.git`\n2. `cd` into `toffy`.\n3. Install the pre-commit hooks with `pre-commit install --install-hooks`\n4. Set up Poetry for `toffy`\n   1. Run `poetry install` to install `alpineer` into your virtual environment (this will create a local virtual environment).\n      1. Poetry utilizes [Python's Virtual Environments](https://docs.python.org/3/tutorial/venv.html))\n   2. Run `poetry install --with test`: Installs all the [dependencies needed for tests](pyproject.toml) (labeled under `tool.poetry.group.test.dependencies`)\n   3. Run `poetry install --with dev`: Installs all the [dependencies needed for development](pyproject.coml) (labeled under `tool.poetry.group.dev.dependencies`)\n   4. You may combine these as well with `poetry install --with dev,test`. Installing the base dependencies and the two optional groups.\n5. In order to test to see if Poetry is working properly, run `poetry show --tree`. This will output the dependency tree for the base dependencies (labeled under `tool.poetry.dependencies`).\n6. All tests can be run with `poetry run pytest`\n7. For every commit, *pre-commit* will format your changes to be complient with `pycodestyle`.\n\n## Questions?\n\nIf you have a general question or are having trouble with part of the repo, head to the [discussions](https://github.com/angelolab/toffy/discussions) tab to get help. If you've found a bug with the codebase, first make sure there's not already an [open issue](https://github.com/angelolab/toffy/issues), and if not, you can then [open an issue](https://github.com/angelolab/toffy/issues/new/choose) describing the bug.\n\nBefore opening, please double check and see that someone else hasn't opened an issue for your question already.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/angelolab/toffy",
    "keywords": "",
    "license": "Modified Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "toffy",
    "package_url": "https://pypi.org/project/toffy/",
    "platform": null,
    "project_url": "https://pypi.org/project/toffy/",
    "project_urls": {
      "Documentation": "https://toffy.readthedocs.io",
      "Homepage": "https://github.com/angelolab/toffy",
      "Repository": "https://github.com/angelolab/toffy"
    },
    "release_url": "https://pypi.org/project/toffy/0.1.2/",
    "requires_dist": [
      "alpineer (>=0.1.5,<0.2.0)",
      "ipywidgets (>=8,<9)",
      "mibi-bin-tools (>=0.2.8,<0.3.0)",
      "natsort (>=8,<9)",
      "numpy (>=1.0.0,<2.0.0)",
      "scikit-learn (>=1,<2)",
      "seaborn (>=0.12,<0.13)",
      "tqdm (>=4,<5)",
      "watchdog (>=3,<4)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Scripts for interacting with and generating data from the commercial MIBIScope.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17388020,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "227f515c2ebf5bcf00c138e73b336d4c5f61669580f9968ac06c4e2647679575",
          "md5": "66289faab7e9f3bb6a9839c4d8dd81b0",
          "sha256": "dfd918c332195b19ec60a4b876525c1fd17e914c5ffaff061cf69ca8935e6845"
        },
        "downloads": -1,
        "filename": "toffy-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66289faab7e9f3bb6a9839c4d8dd81b0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 84851,
        "upload_time": "2023-03-21T20:25:12",
        "upload_time_iso_8601": "2023-03-21T20:25:12.138746Z",
        "url": "https://files.pythonhosted.org/packages/22/7f/515c2ebf5bcf00c138e73b336d4c5f61669580f9968ac06c4e2647679575/toffy-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2fc610489dc8f50073ba8a29d0a791d5c08c45693bf7f0f60a95b4e2d6ba844",
          "md5": "088aad809e2bc50e520cd02cfe45be1a",
          "sha256": "a2ee800acb5bdc216e8e70dfbc07681f9cd7c9c1319428182a5510ff82467785"
        },
        "downloads": -1,
        "filename": "toffy-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "088aad809e2bc50e520cd02cfe45be1a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 82524,
        "upload_time": "2023-03-21T20:25:14",
        "upload_time_iso_8601": "2023-03-21T20:25:14.367341Z",
        "url": "https://files.pythonhosted.org/packages/c2/fc/610489dc8f50073ba8a29d0a791d5c08c45693bf7f0f60a95b4e2d6ba844/toffy-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "227f515c2ebf5bcf00c138e73b336d4c5f61669580f9968ac06c4e2647679575",
        "md5": "66289faab7e9f3bb6a9839c4d8dd81b0",
        "sha256": "dfd918c332195b19ec60a4b876525c1fd17e914c5ffaff061cf69ca8935e6845"
      },
      "downloads": -1,
      "filename": "toffy-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "66289faab7e9f3bb6a9839c4d8dd81b0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 84851,
      "upload_time": "2023-03-21T20:25:12",
      "upload_time_iso_8601": "2023-03-21T20:25:12.138746Z",
      "url": "https://files.pythonhosted.org/packages/22/7f/515c2ebf5bcf00c138e73b336d4c5f61669580f9968ac06c4e2647679575/toffy-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c2fc610489dc8f50073ba8a29d0a791d5c08c45693bf7f0f60a95b4e2d6ba844",
        "md5": "088aad809e2bc50e520cd02cfe45be1a",
        "sha256": "a2ee800acb5bdc216e8e70dfbc07681f9cd7c9c1319428182a5510ff82467785"
      },
      "downloads": -1,
      "filename": "toffy-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "088aad809e2bc50e520cd02cfe45be1a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 82524,
      "upload_time": "2023-03-21T20:25:14",
      "upload_time_iso_8601": "2023-03-21T20:25:14.367341Z",
      "url": "https://files.pythonhosted.org/packages/c2/fc/610489dc8f50073ba8a29d0a791d5c08c45693bf7f0f60a95b4e2d6ba844/toffy-0.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}