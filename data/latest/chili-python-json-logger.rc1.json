{
  "info": {
    "author": "Cosimo Meli",
    "author_email": "cosimo.meli@chili.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: System :: Logging"
    ],
    "description": "[![Build Status](https://travis-ci.org/madzak/python-json-logger.svg?branch=master)](https://travis-ci.org/madzak/python-json-logger)\n[![License](https://img.shields.io/pypi/l/python-json-logger.svg)](https://pypi.python.org/pypi/python-json-logger/)\n[![Version](https://img.shields.io/pypi/v/python-json-logger.svg)](https://pypi.python.org/pypi/python-json-logger/)\n\nOverview\n=======\nThis library is provided to allow standard python logging to output log data as json objects. With JSON we can make our logs more readable by machines and we can stop writing custom parsers for syslog type records.\n\nNews\n=======\nHi, I see this package is quiet alive and I am sorry for ignoring it so long. I will be stepping up my maintenance of this package so please allow me a week to get things back in order (and most likely a new minor version) and i'll post and update here once I am caught up.\n\nInstalling\n==========\nPip:\n\n    pip install python-json-logger\n\nPypi:\n\n   https://pypi.python.org/pypi/python-json-logger\n\nManual:\n\n    python setup.py install\n\nUsage\n=====\n\n## Integrating with Python's logging framework\n\nJson outputs are provided by the JsonFormatter logging formatter. You can add the custom formatter like below:\n\n**Please note: version 0.1.0 has changed the import structure, please update to the following example for proper importing**\n\n```python\n    import logging\n    from pythonjsonlogger import jsonlogger\n\n    logger = logging.getLogger()\n\n    logHandler = logging.StreamHandler()\n    formatter = jsonlogger.JsonFormatter()\n    logHandler.setFormatter(formatter)\n    logger.addHandler(logHandler)\n```\n\n## Customizing fields\n\nThe fmt parser can also be overidden if you want to have required fields that differ from the default of just `message`.\n\nThese two invocations are equivalent:\n\n```python\nclass CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def parse(self):\n        return self._fmt.split(';')\n\nformatter = CustomJsonFormatter('one;two')\n\n# is equivalent to:\n\nformatter = jsonlogger.JsonFormatter('%(one)s %(two)s')\n```\n\nYou can also add extra fields to your json output by specifying a dict in place of message, as well as by specifying an `extra={}` argument.\n\nContents of these dictionaries will be added at the root level of the entry and may override basic fields.\n\nYou can also use the `add_fields` method to add to or generally normalize the set of default set of fields, it is called for every log event. For example, to unify default fields with those provided by [structlog](http://www.structlog.org/) you could do something like this:\n\n```python\nclass CustomJsonFormatter(jsonlogger.JsonFormatter):\n    def add_fields(self, log_record, record, message_dict):\n        super(CustomJsonFormatter, self).add_fields(log_record, record, message_dict)\n        if not log_record.get('timestamp'):\n            # this doesn't use record.created, so it is slightly off\n            now = datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n            log_record['timestamp'] = now\n        if log_record.get('level'):\n            log_record['level'] = log_record['level'].upper()\n        else:\n            log_record['level'] = record.levelname\n\nformatter = CustomJsonFormatter('%(timestamp)s %(level)s %(name)s %(message)s')\n```\n\nItems added to the log record will be included in *every* log message, no matter what the format requires.\n\n## Adding custom object serialization\n\nFor custom handling of object serialization you can specify default json object translator or provide a custom encoder\n\n```python\ndef json_translate(obj):\n    if isinstance(obj, MyClass):\n        return {\"special\": obj.special}\n\nformatter = jsonlogger.JsonFormatter(json_default=json_translate,\n                                     json_encoder=json.JSONEncoder)\nlogHandler.setFormatter(formatter)\n\nlogger.info({\"special\": \"value\", \"run\": 12})\nlogger.info(\"classic message\", extra={\"special\": \"value\", \"run\": 12})\n```\n\n## Using a Config File\n\nTo use the module with a config file using the [`fileConfig` function](https://docs.python.org/3/library/logging.config.html#logging.config.fileConfig), use the class `pythonjsonlogger.jsonlogger.JsonFormatter`. Here is a sample config file.\n\n```ini\n[loggers]\nkeys = root,custom\n\n[logger_root]\nhandlers =\n\n[logger_custom]\nlevel = INFO\nhandlers = custom\nqualname = custom\n\n[handlers]\nkeys = custom\n\n[handler_custom]\nclass = StreamHandler\nlevel = INFO\nformatter = json\nargs = (sys.stdout,)\n\n[formatters]\nkeys = json\n\n[formatter_json]\nformat = %(message)s\nclass = pythonjsonlogger.jsonlogger.JsonFormatter\n```\n\nExample Output\n==============\n\nSample JSON with a full formatter (basically the log message from the unit test). Every log message will appear on 1 line like a typical logger.\n\n```json\n{\n    \"threadName\": \"MainThread\",\n    \"name\": \"root\",\n    \"thread\": 140735202359648,\n    \"created\": 1336281068.506248,\n    \"process\": 41937,\n    \"processName\": \"MainProcess\",\n    \"relativeCreated\": 9.100914001464844,\n    \"module\": \"tests\",\n    \"funcName\": \"testFormatKeys\",\n    \"levelno\": 20,\n    \"msecs\": 506.24799728393555,\n    \"pathname\": \"tests/tests.py\",\n    \"lineno\": 60,\n    \"asctime\": [\"12-05-05 22:11:08,506248\"],\n    \"message\": \"testing logging format\",\n    \"filename\": \"tests.py\",\n    \"levelname\": \"INFO\",\n    \"special\": \"value\",\n    \"run\": 12\n}\n```\n\nExternal Examples\n=================\n\n- [Wesley Tanaka - Structured log files in Python using python-json-logger](https://wtanaka.com/node/8201)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chilispa/python-json-logger",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chili-python-json-logger",
    "package_url": "https://pypi.org/project/chili-python-json-logger/",
    "platform": "",
    "project_url": "https://pypi.org/project/chili-python-json-logger/",
    "project_urls": {
      "Homepage": "https://github.com/chilispa/python-json-logger"
    },
    "release_url": "https://pypi.org/project/chili-python-json-logger/2.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.4",
    "summary": "A python library adding a json log formatter",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10072334,
  "releases": {
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "425ac4578c3fed1caa26099760540a7bdb0ad6a107ea6d2e864a676ca1734874",
          "md5": "39e6d3d5d1a2c513428201b188af8634",
          "sha256": "45ca30a15ce0d436d29fb7b1718731de63a88712810ad839b6005cd99b5191f2"
        },
        "downloads": -1,
        "filename": "chili_python_json_logger-2.1.0-py34-none-any.whl",
        "has_sig": false,
        "md5_digest": "39e6d3d5d1a2c513428201b188af8634",
        "packagetype": "bdist_wheel",
        "python_version": "py34",
        "requires_python": ">=3.4",
        "size": 7482,
        "upload_time": "2021-04-15T10:13:38",
        "upload_time_iso_8601": "2021-04-15T10:13:38.503821Z",
        "url": "https://files.pythonhosted.org/packages/42/5a/c4578c3fed1caa26099760540a7bdb0ad6a107ea6d2e864a676ca1734874/chili_python_json_logger-2.1.0-py34-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a23ed04d13231678be895a40d49b6267cc3a4e11af24cdd94ffe9b9e14b58a6",
          "md5": "697bbea65c2328033003a97fc295bf47",
          "sha256": "7a36459e6be07a37f1fc056ddcd5a09a7993de2ac78841e4da21e8a46cf4a73f"
        },
        "downloads": -1,
        "filename": "chili-python-json-logger-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "697bbea65c2328033003a97fc295bf47",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 9284,
        "upload_time": "2021-04-15T10:13:40",
        "upload_time_iso_8601": "2021-04-15T10:13:40.047689Z",
        "url": "https://files.pythonhosted.org/packages/6a/23/ed04d13231678be895a40d49b6267cc3a4e11af24cdd94ffe9b9e14b58a6/chili-python-json-logger-2.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "425ac4578c3fed1caa26099760540a7bdb0ad6a107ea6d2e864a676ca1734874",
        "md5": "39e6d3d5d1a2c513428201b188af8634",
        "sha256": "45ca30a15ce0d436d29fb7b1718731de63a88712810ad839b6005cd99b5191f2"
      },
      "downloads": -1,
      "filename": "chili_python_json_logger-2.1.0-py34-none-any.whl",
      "has_sig": false,
      "md5_digest": "39e6d3d5d1a2c513428201b188af8634",
      "packagetype": "bdist_wheel",
      "python_version": "py34",
      "requires_python": ">=3.4",
      "size": 7482,
      "upload_time": "2021-04-15T10:13:38",
      "upload_time_iso_8601": "2021-04-15T10:13:38.503821Z",
      "url": "https://files.pythonhosted.org/packages/42/5a/c4578c3fed1caa26099760540a7bdb0ad6a107ea6d2e864a676ca1734874/chili_python_json_logger-2.1.0-py34-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a23ed04d13231678be895a40d49b6267cc3a4e11af24cdd94ffe9b9e14b58a6",
        "md5": "697bbea65c2328033003a97fc295bf47",
        "sha256": "7a36459e6be07a37f1fc056ddcd5a09a7993de2ac78841e4da21e8a46cf4a73f"
      },
      "downloads": -1,
      "filename": "chili-python-json-logger-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "697bbea65c2328033003a97fc295bf47",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 9284,
      "upload_time": "2021-04-15T10:13:40",
      "upload_time_iso_8601": "2021-04-15T10:13:40.047689Z",
      "url": "https://files.pythonhosted.org/packages/6a/23/ed04d13231678be895a40d49b6267cc3a4e11af24cdd94ffe9b9e14b58a6/chili-python-json-logger-2.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}