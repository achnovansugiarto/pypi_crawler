{
  "info": {
    "author": "Martin Winks",
    "author_email": "cat@snejugal.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\ngarnet\n######\n\nAbout\n*****\n\ngarnet is a ridiculously simple library created mainly for managing your stateful telegram bots written with Telethon.\n\n.. invisible-content\n.. _aiogram: https://github.com/aiogram/aiogram\n\n\n\n***************\nHow to install?\n***************\n\nAlthough, garnet is ``garnet``, it is named ``telegram-garnet`` on the PyPI, you'll have to tell that to pip.\n\n``pip install -U telegram-garnet``\n\n\n*************\nLet's dive in\n*************\n\n.. code:: python\n\n    # export BOT_TOKEN, APP_ID, APP_HASH, SESSION_DSN env vars.\n    from garnet import ctx\n    from garnet.events import Router\n    from garnet.filters import State, text, group\n    from garnet.storages import DictStorage\n\n    router = Router()\n    UserStates = group.Group.from_iter([\"echo\"])  # declare users states\n\n    # register handler for \"/start\" commands for users with none yet set state\n    @router.message(text.commands(\"start\"), State.entry)\n    async def entrypoint(event):\n        await event.reply(\"You entered echo zone!\\n/cancel to exit\")\n        fsm = ctx.CageCtx.get()\n        await fsm.set_state(UserStates.echo)\n\n    # register handler for \"/cancel\" commands for users that have entered any state\n    @router.message(text.commands(\"cancel\"), State.any)\n    async def cancel(event):\n        await event.reply(\"Cancelled :)\\n/start to restart\")\n        await ctx.CageCtx.get().set_state(None)\n\n    # handle any message from users with state=UserState.echo\n    @router.message(State.exact(UserStates.echo))\n    async def echo(event):\n        await event.reply(event.text)\n\n    if __name__ == \"__main__\":\n        from garnet.runner import run, launch\n        launch(\"my-first-garnet-app\", run(router, DictStorage()))\n\n************\nKey features\n************\n\nFilters\n=======\n\nBasically ``Filter`` is a \"lazy\" callable which holds an optional single-parameter function.\nFilters are event naive and event aware. Filters are mutable, they can migrate from event-naive to event-aware in garnet.\n\nPublic methods\n--------------\n\n- ``.is_event_naive -> bool``\n- ``.call(e: T, /) -> Awaitable[bool]``\n\nInitializer\n^^^^^^^^^^^\n\n``Filter(function[, event_builder])``\n\nValue of the parameter ``function`` must be function that takes exactly one argument with type `Optional[Some]` and\nreturns ``bool`` either True or False.\n\nPossible operations on Filter instances\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n(those are, primarily logical operators)\n\nBinary\n\"\"\"\"\"\"\n\n- ``&`` is a logical AND for two filters\n- ``|`` is a logical OR for two filters\n- ``^`` is a logical XOR for two filters\n\nUnary\n\"\"\"\"\"\n\n- ``~`` is a logical NOT for a filter\n\nExamples\n---------\n\n.. code:: python3\n\n    from garnet import Filter, events\n\n    async def fun(_): ...\n\n    # example of event aware filter\n    Filter(fun, events.NewMessage)\n\n    # example of event-naive\n    Filter(fun)\n\nBy default ``Filter`` is event-naive, however when using with ``garnet::Router`` for handlers it may be changed.\n\nFilters \"from the box\"\n----------------------\n\nText filters\n^^^^^^^^^^^^\n\nOperations on ``Filter((e: Some) -> bool); Some.raw_text or Some.text``\n\nImport\n\"\"\"\"\"\"\n\n``from garnet.filters import text``\n\nLittle journey\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n- ``text.Len`` is a special class for ``len(Some.raw_text ... \"\")`` operations. Supports logical comparison operations, such are ``==``, ``>``, ``>=``, ``<``, ``<=``\n\n- ``text.startswith(prefix: str, /)`` will evaluates to ``Some.raw_text.startswith(prefix)``\n\n- ``text.commands(*cmds: str, prefixes=\"/\", to_set=True)`` will evaluate to check if command is within ``cmd`` (ignores mentions, and works on `Some.text`)\n\n- ``text.match(rexpr: str, flags=0, /)`` will evaluate to ``re.compile(rexpr, flags).match(Some.raw_text)``\n\n- ``text.between(*texts: str, to_set=True)`` will evaluate to ``Some.raw_text in texts``\n\n- ``text.can_be_int(base=10)`` will evaluate to ``try{int(Some.raw_text);return True;}except(ValueError){return False;}``\n\n- ``text.can_be_float()`` similarly to ``text.can_be_int`` but for floats.\n\n\nState filters\n^^^^^^^^^^^^^\n\nOperations on users' states.\n\nImport\n\"\"\"\"\"\"\n\n``from garnet.filters import State``\n\nLittle journey\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n- ``State.any`` will evaluate to match any state but not ``None``\n- ``State.entry`` will evaluate to ``True`` if only current state is ``None``\n- ``State.exact(state: GroupT | M | \"*\")`` when \"*\" is passed will use ``State.any``, when states group is passed will check if current state is any states from the group, when state group member (``M``) passed will check if current state is exactly this state\n- ``State == {some}`` will call ``State.exact(state=some)``\n\nNote\n\"\"\"\"\n\nState filter has effect on ``garnet.ctx.MCtx``.\nAnd if you're not sure what are you doing try not to apply logical operators on ``State`` filters.\nSimply, don't do ``~State.any`` or ``~State.exact(...some...)``\n\n\nStates declaration\n^^^^^^^^^^^^^^^^^^\n\nImport\n\"\"\"\"\"\"\n\n``from garnet.filters import group``\n\ngroup.M (state group Member)\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n*yes, \"M\" stands for member.*\n\n- ``.next`` return the next ``M`` in the group or raise ``group.NoNext`` exception\n- ``.prev`` return the previous ``M`` in the group or raise ``group.NoPrev`` exception\n- ``.top`` return the top (head) ``M`` in the group or raise ``group.NoTop`` exception\n\ngroup.Group\n\"\"\"\"\"\"\"\"\"\"\"\n\nGroup of state members declared as a class (can be nested)\n\n- ``.first`` returns (``M``) the first declared member\n- ``.last`` returns (``M``) the last declared member\n\n**Note**\n``.first`` and ``.last`` are reserved \"keywords\" for state\n\nUsage\n\"\"\"\"\"\n\n.. code:: python\n\n    from garnet.filters import group, State\n\n    class Users(group.Group):\n        ask_name = group.M()\n        ask_age = group.M()\n\n        class Pet(group.Group):\n            ask_name = group.M()\n            ask_age = group.M()\n\n        class Hobby(group.Group):\n            frequency = group.M()\n            ask_if_popular = group.M()\n\n    # ðŸ’« just imagine we already have router ðŸ’«\n\n    @router.default(State.exact(Users))  # will handle all states in \"Users\"\n    # --- some code ---\n    @router.default(State.exact(Users.Pet.ask_age))  # will handle only if current state is equal to \"Users.Pet.ask_age\"\n    # --- some code ---\n\n\nNote\n\"\"\"\"\n\nThink of groups as an immutable(not really...) linked list of connected group members\nAs you can see in the example above we use nested states groups.\nOne thing about about ``M.[next/prev/top]``.\nWe can go to ``Users.Pet.ask_name`` from ``Users.ask_age`` using ``Users.ask_age.next``,\nbut not backwards as someone could expect with ``Users.Pet.ask_name.prev`` (will actually raise ``NoPrev``)\nNested group members do not know anything about upper members, but they have \"owners\" which have access to their parent groups and\nin order to access parent of owner of ``x = Users.Pet.ask_name``, we would use ``x.owner``\n\nCallback query (QueryBaker)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nOperations on callback queries. Baker is a `callback_data` string generator/parser/validator. ``garnet.ctx::Query`` has\ncontext value which is set after every successful validation.\n\nImport\n\"\"\"\"\"\"\n\n``from garnet.filters import QueryBaker``\n\nLittle journey\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n- ``(prefix:str, /, *args:str, [ignore:Iterable[QItem]=(),][sep:str=\"\\n\",][maxlen:int=64])`` initializer function, if you want to have custom types in QueryDict\n- ``.filter(extend_ignore:Iterable[str]=(), /, **config)`` will make sure user given callback data is valid by given config.\n- ``.get_checked(**non_ignored:Any)`` will return a string based on passed passed args\n\nUsage\n\"\"\"\"\"\n\n.. code:: python\n\n    from garnet.filters import QueryBaker\n\n    qb = QueryBaker(\n        \"v\",  # set v string as identity(prefix) for our baker\n        (\"id\", uuid.UUID),  # make uuid.UUID a factory for id arg\n        \"act\",\n        ignore=(\"id\",),  # mark id arg as `optional`\n        sep=\":\",  # set a separator for arg values, better not change\n        maxlen=64,  # get_checked will check the length of generated callback and tell you if it's more than maxlen\n    )\n    # create v:{id}:{act} pattern\n\n    qb.filter(act=\"apply\")\n    # will be a filter to match queries like \"v:(.*):apply\"\n\n    qb.get_checked(id=\"51b3f442-a9f6-4dcc-918e-1f08b1189386\", act=\"clear\")\n    # will produce a \"safe\" string pattern v:51b3f442-a9f6-4dcc-918e-1f08b1189386:clear\n\n    # Where you may want to use .get_checked\n    Button.inline(..., data=qb.get_checked(id=<...>, act=\"mpa\"))\n\nNote\n\"\"\"\"\n\nDon't use separator string inside your arg values.\n\nTo reuse validated data from filter, use `Query (validated dict)`_\n\nRouters\n=======\n\nRouter (routing table) is a collection of handlers.\n\nPublic methods\n--------------\n\nThose consist mainly from decorators.\n\nInitializer\n^^^^^^^^^^^\n\n``Router(default_event=None, *filters)``\n\n- ``default_event`` default event builder for router\n- ``*filters`` router filters, in order to get into handlers, event should pass these filters.\n\nDecorators\n^^^^^^^^^^\n\nDepending on ``event_builder`` of a decorator, filters inherit that event builder mutating themselves.\n\n- ``.default(*filters)`` event builder is default Router(**this**, ...), should not be None, must implement ``telethon.common::EventBuilder``\n\n- ``.message(*filters)`` shortcut decorator for event builder ``garnet.events::NewMessage``\n\n- ``.callback_query(*filters)`` shortcut decorator for event builder ``garnet.events::CallbackQuery``\n\n- ``.chat_action(*filters)`` shortcut decorator for event builder ``garnet.events::ChatAction``\n\n- ``.message_edited(*filters)`` shortcut decorator for event builder ``garnet.events::MessageEdited``\n\n- ``.on(event_builder, /, *filters)`` pass any event builder (preferably from ``garnet.events::*``)\n\n- ``.use()`` use this decorator for intermediates that are called after filters\n\netc.\n^^^^\n\n- ``.add_use(intermediate, /)`` register an intermediate which will be called after filters for handlers\n- ``.register(handler, filters, event_builder)`` register handler with binding filters and event_builder to it.\n- ``.include(router, /)`` \"include\" passed router in the callee as its child router\n\n\nExamples\n--------\n\nSimple cases\n^^^^^^^^^^^^\n\n.. code:: python\n\n    from garnet import Router, events, Filter\n\n    router = Router(events.NewMessage, Filter(lambda _: True), Filter(lambda _: True))\n\n    @router.default(Filter(lambda _: True))\n    async def handler(_): pass\n\nNested routers and a little intermediate\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from my_project.routers import public_router, admin_router\n    from my_project.logging import put_event\n\n    from garnet import Router, events\n\n    common_router = Router().include(public_router).include(admin_router)\n\n    @common_router.use()\n    async def intermediate(handler, event):\n        await put_event(event, nowait=True)\n        await handler(event)\n\n\nContext variables\n=================\n\nUsers states\n------------\n\n``from garnet.ctx import StateCtx, MCtx``\n\n``MCtx`` is context variable that points to the current states group member (use it carefully)\nit's set in ``State`` filters\n\n\n``StateCtx`` points to ``garnet.event::UserCage``\n\n\nUser and chat IDs\n-----------------\n\n``from garnet.ctx import UserIDCtx, ChatIDCtx``\n\nThose will be set after router filters and before handler filters and handlers calls.\n\nHandler\n-------\n\n``from garnet.ctx import HandlerCtx``\n\n``HandlerCtx`` points to currently executing handler.\n\nQuery (validated dict)\n----------------------\n\nData that is stored in Dict[str(arg name), T(arg type from arg-factory(arg-str)->T)]\n\n``from garnet.ctx import Query``\n\n\nNote\n----\n\nUsual contextual variables, with ``.get()``, ``.set()``, ``.reset()`` methods. You'll always end up using ``.get()``.\nWork with those only in handlers or handler filters.\n\nAlso every event builder in ``garnet.events`` is \"contextfull\", but for ``get``, ``set``, ``reset`` you shall add ``_current``\npostfix.\n\nTry to use context variables everywhere not depending on other mechanisms, because they work as you want.\n\n******************\nðŸ¦¾ Hacking garnet\n******************\n\nGarnet consists of two interfaces `_garnet` and `garnet`, `garnet` is a \"public\" interface that should have somewhat stable interfaces\nand `_garnet` which is `internal` and considered as `non-public`\n\nInstall and get started\n=======================\n\n::\n\n    git clone git@github.com:ukinti/garnet.git garnet\n    poetry install --dev\n    poetry shell\n\n\nApplying code-style\n===================\n\n::\n\n    # simply\n    make lint\n\n\n*********************\nðŸ’¬ Contacts/Community\n*********************\n\nJoin our small `group <https://t.me/tg_garnet>`_\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/uwinx/garnet",
    "keywords": "telegram,telethon,telegram-bot,bot",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "telegram-garnet",
    "package_url": "https://pypi.org/project/telegram-garnet/",
    "platform": "",
    "project_url": "https://pypi.org/project/telegram-garnet/",
    "project_urls": {
      "Homepage": "https://github.com/uwinx/garnet",
      "Repository": "https://github.com/uwinx/garnet"
    },
    "release_url": "https://pypi.org/project/telegram-garnet/0.5.2/",
    "requires_dist": [
      "Telethon (>=1.10.8,<2.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "garnet - cool add-on for Telethon",
    "version": "0.5.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10255718,
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10c497a9a073d970dd4d1e0023118d1f0c68b87ab7cf60b6e837a0223ecfeb3e",
          "md5": "d6f415df852ddf31483036ff4835e66e",
          "sha256": "c3248c5dad371450bcb327cf43b344adae0968b64061ef2d235c8e09d200e78d"
        },
        "downloads": -1,
        "filename": "telegram_garnet-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6f415df852ddf31483036ff4835e66e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 32235,
        "upload_time": "2020-04-06T00:35:33",
        "upload_time_iso_8601": "2020-04-06T00:35:33.432919Z",
        "url": "https://files.pythonhosted.org/packages/10/c4/97a9a073d970dd4d1e0023118d1f0c68b87ab7cf60b6e837a0223ecfeb3e/telegram_garnet-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab457d8b7c0d80661f72c12d218d4c27eff5004f7762db820b7522842ebb2b73",
          "md5": "0776e50f15e1a3f695b91bf76afca58a",
          "sha256": "e4180b4c827d5a01771df629c736e83236695867c61dedea9f1fb7bfe67e4357"
        },
        "downloads": -1,
        "filename": "telegram-garnet-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0776e50f15e1a3f695b91bf76afca58a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 26077,
        "upload_time": "2020-04-06T00:35:30",
        "upload_time_iso_8601": "2020-04-06T00:35:30.325990Z",
        "url": "https://files.pythonhosted.org/packages/ab/45/7d8b7c0d80661f72c12d218d4c27eff5004f7762db820b7522842ebb2b73/telegram-garnet-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "85cc7ec352952bd96757334ff8cdb6291f6541e5c4fedf39a0234abb1dc69365",
          "md5": "5d6090470864d9d611a4572917748471",
          "sha256": "46e8fbe405b988bce0120185c3b5be562f91d1df9e4afcf1eda514bd9b6eaa02"
        },
        "downloads": -1,
        "filename": "telegram_garnet-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d6090470864d9d611a4572917748471",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 32085,
        "upload_time": "2020-04-14T05:10:30",
        "upload_time_iso_8601": "2020-04-14T05:10:30.897344Z",
        "url": "https://files.pythonhosted.org/packages/85/cc/7ec352952bd96757334ff8cdb6291f6541e5c4fedf39a0234abb1dc69365/telegram_garnet-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13a3f12d58bba3b487c2797da0a7edb7becae8d5cd28f6da3689aa3546946419",
          "md5": "31aefab41547c1bdaf46b14c384553a6",
          "sha256": "dc6c396c560b011f342272529f19370eab95fb54dd8e18c6e6983a0c4bce69a4"
        },
        "downloads": -1,
        "filename": "telegram-garnet-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "31aefab41547c1bdaf46b14c384553a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 25923,
        "upload_time": "2020-04-14T05:10:29",
        "upload_time_iso_8601": "2020-04-14T05:10:29.176105Z",
        "url": "https://files.pythonhosted.org/packages/13/a3/f12d58bba3b487c2797da0a7edb7becae8d5cd28f6da3689aa3546946419/telegram-garnet-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b3b26101b966ecbb37060f1c329565f0c95cce0e5858d61b09a93bc25c4c88cc",
          "md5": "3096d424d5671c81e2c4a6515cec9274",
          "sha256": "c97f5d5a0d8894c8d38c8431cb84b8f364acc98a4cc89e18b1939173c2f1b48c"
        },
        "downloads": -1,
        "filename": "telegram_garnet-0.2.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3096d424d5671c81e2c4a6515cec9274",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 32054,
        "upload_time": "2020-04-14T05:49:09",
        "upload_time_iso_8601": "2020-04-14T05:49:09.709165Z",
        "url": "https://files.pythonhosted.org/packages/b3/b2/6101b966ecbb37060f1c329565f0c95cce0e5858d61b09a93bc25c4c88cc/telegram_garnet-0.2.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1568751c64067e1fe3ec90c5e265df63e513f889e513f131e15175a478773a3c",
          "md5": "0f047d312f50b1c2b1aa5c291d7b37d1",
          "sha256": "0808811ed755c39a0af0d551e1ca9b3f3a5d9d0878d2486c55e61940157912e5"
        },
        "downloads": -1,
        "filename": "telegram-garnet-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0f047d312f50b1c2b1aa5c291d7b37d1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 25909,
        "upload_time": "2020-04-14T05:49:07",
        "upload_time_iso_8601": "2020-04-14T05:49:07.344715Z",
        "url": "https://files.pythonhosted.org/packages/15/68/751c64067e1fe3ec90c5e265df63e513f889e513f131e15175a478773a3c/telegram-garnet-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "708a1a5bf10b55878f411cd79f0a8a9f407af6da31079b49206ed909969473e2",
          "md5": "7207ed86cd1e759f2c2e8569c801543a",
          "sha256": "3d1241cfc1afb18dd8a647dab18a54659014e072ee40a9eb846b2b441c29fd68"
        },
        "downloads": -1,
        "filename": "telegram_garnet-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7207ed86cd1e759f2c2e8569c801543a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 31747,
        "upload_time": "2020-06-07T08:29:50",
        "upload_time_iso_8601": "2020-06-07T08:29:50.194490Z",
        "url": "https://files.pythonhosted.org/packages/70/8a/1a5bf10b55878f411cd79f0a8a9f407af6da31079b49206ed909969473e2/telegram_garnet-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e5af2943c9215c263a2e39af2f0cde6c97f6bda2ffe3da629715b37612cda9fa",
          "md5": "e7f6374a83499f0a64922ae42e11fb97",
          "sha256": "12f74e2e307642f7a612f7930d0ac3f441e0446f04869a2f3393756117c199bc"
        },
        "downloads": -1,
        "filename": "telegram-garnet-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e7f6374a83499f0a64922ae42e11fb97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 25509,
        "upload_time": "2020-06-07T08:29:48",
        "upload_time_iso_8601": "2020-06-07T08:29:48.062202Z",
        "url": "https://files.pythonhosted.org/packages/e5/af/2943c9215c263a2e39af2f0cde6c97f6bda2ffe3da629715b37612cda9fa/telegram-garnet-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a0a92bbed6278164fda5a7be252b17e2a6c05403dad5b65cb2411bd23115fc3a",
          "md5": "f2cb93a9adbd9c6a8fa80a5d9fbc6a67",
          "sha256": "5a783f5faa47dc2688fbf6179f38a0a405212639a0a86dd98ea76917a241821e"
        },
        "downloads": -1,
        "filename": "telegram_garnet-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2cb93a9adbd9c6a8fa80a5d9fbc6a67",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 33705,
        "upload_time": "2020-11-22T02:48:55",
        "upload_time_iso_8601": "2020-11-22T02:48:55.163913Z",
        "url": "https://files.pythonhosted.org/packages/a0/a9/2bbed6278164fda5a7be252b17e2a6c05403dad5b65cb2411bd23115fc3a/telegram_garnet-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cfdf1d760dfaa259054a03a4c5c5743f3232cbb3ea9a4bd537cd52a7b335985",
          "md5": "f2f04293e5d40103ff3809145a82362f",
          "sha256": "98456c1bae58a5c1d9de864669fe2445e5e90b949346668f0f6c46811690d969"
        },
        "downloads": -1,
        "filename": "telegram-garnet-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f2f04293e5d40103ff3809145a82362f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 31075,
        "upload_time": "2020-11-22T02:48:53",
        "upload_time_iso_8601": "2020-11-22T02:48:53.170241Z",
        "url": "https://files.pythonhosted.org/packages/0c/fd/f1d760dfaa259054a03a4c5c5743f3232cbb3ea9a4bd537cd52a7b335985/telegram-garnet-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50bcf4da2dffcc9fb6d37ab47c452af1e55a2ad370f7c19ce0ddc1f5e306ada6",
          "md5": "5f959caab5aa04f9c76b616d9ab8d70a",
          "sha256": "d89ba8648c50272eb2609d653fed436a2cf5739c212006bb696eda6772ae093e"
        },
        "downloads": -1,
        "filename": "telegram_garnet-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f959caab5aa04f9c76b616d9ab8d70a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 33776,
        "upload_time": "2021-05-04T15:22:05",
        "upload_time_iso_8601": "2021-05-04T15:22:05.698780Z",
        "url": "https://files.pythonhosted.org/packages/50/bc/f4da2dffcc9fb6d37ab47c452af1e55a2ad370f7c19ce0ddc1f5e306ada6/telegram_garnet-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c52ceb6ace9634229af9204a77ebe845f1ae78b69cf0afb7d72432d75bd79034",
          "md5": "60240150833c0d27250fb02611428d73",
          "sha256": "018710fc220221be1752f3daeb6d84af240eeb8b1e14df05e9104dbf87871ac6"
        },
        "downloads": -1,
        "filename": "telegram-garnet-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "60240150833c0d27250fb02611428d73",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 30622,
        "upload_time": "2021-05-04T15:22:03",
        "upload_time_iso_8601": "2021-05-04T15:22:03.573858Z",
        "url": "https://files.pythonhosted.org/packages/c5/2c/eb6ace9634229af9204a77ebe845f1ae78b69cf0afb7d72432d75bd79034/telegram-garnet-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2daf78df5c56d056659c92313648c8fdc03b780c9dbb90841916f12fa0ac72de",
          "md5": "bb7236262ccd5321b63ae141de68de8a",
          "sha256": "4f1dbe7e9ce21040f2116da2093f42beaf27c82060531cf70decd3d1979d5d32"
        },
        "downloads": -1,
        "filename": "telegram_garnet-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb7236262ccd5321b63ae141de68de8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 33851,
        "upload_time": "2021-05-04T16:14:02",
        "upload_time_iso_8601": "2021-05-04T16:14:02.743322Z",
        "url": "https://files.pythonhosted.org/packages/2d/af/78df5c56d056659c92313648c8fdc03b780c9dbb90841916f12fa0ac72de/telegram_garnet-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "682411357a5e90b49c6eac2e56eeff152cfa889938673b3d67a403892ab227f5",
          "md5": "dc267a3d0d039bacf7a1035be824cea1",
          "sha256": "7fd942e584ba6745dc60ec09463bbe92fe6ec6f492207355aa3f6ec8e05ca4ea"
        },
        "downloads": -1,
        "filename": "telegram-garnet-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dc267a3d0d039bacf7a1035be824cea1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 30659,
        "upload_time": "2021-05-04T16:14:00",
        "upload_time_iso_8601": "2021-05-04T16:14:00.250797Z",
        "url": "https://files.pythonhosted.org/packages/68/24/11357a5e90b49c6eac2e56eeff152cfa889938673b3d67a403892ab227f5/telegram-garnet-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2daf78df5c56d056659c92313648c8fdc03b780c9dbb90841916f12fa0ac72de",
        "md5": "bb7236262ccd5321b63ae141de68de8a",
        "sha256": "4f1dbe7e9ce21040f2116da2093f42beaf27c82060531cf70decd3d1979d5d32"
      },
      "downloads": -1,
      "filename": "telegram_garnet-0.5.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bb7236262ccd5321b63ae141de68de8a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 33851,
      "upload_time": "2021-05-04T16:14:02",
      "upload_time_iso_8601": "2021-05-04T16:14:02.743322Z",
      "url": "https://files.pythonhosted.org/packages/2d/af/78df5c56d056659c92313648c8fdc03b780c9dbb90841916f12fa0ac72de/telegram_garnet-0.5.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "682411357a5e90b49c6eac2e56eeff152cfa889938673b3d67a403892ab227f5",
        "md5": "dc267a3d0d039bacf7a1035be824cea1",
        "sha256": "7fd942e584ba6745dc60ec09463bbe92fe6ec6f492207355aa3f6ec8e05ca4ea"
      },
      "downloads": -1,
      "filename": "telegram-garnet-0.5.2.tar.gz",
      "has_sig": false,
      "md5_digest": "dc267a3d0d039bacf7a1035be824cea1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 30659,
      "upload_time": "2021-05-04T16:14:00",
      "upload_time_iso_8601": "2021-05-04T16:14:00.250797Z",
      "url": "https://files.pythonhosted.org/packages/68/24/11357a5e90b49c6eac2e56eeff152cfa889938673b3d67a403892ab227f5/telegram-garnet-0.5.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}