{
  "info": {
    "author": "ADB Web Designs",
    "author_email": "enquiries@adbwebdesigns.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# zulint\n\n![CI](https://github.com/adambirds/adamlint/workflows/CI/badge.svg)\n\nzulint is a lightweight linting framework designed for complex\napplications using a mix of third-party linters and custom rules.\n\n## Why zulint\n\nModern full-stack web applications generally involve code written in\nseveral programming languages, each of which have their own standard\nlinter tools.  For example, [Zulip](https://zulip.com) uses Python\n(mypy/pyflake/pycodestyle), JavaScript (eslint), CSS (stylelint),\npuppet (puppet-lint), shell (shellcheck), and several more.  For many\ncodebases, this results in linting being an unpleasantly slow\nexperience, resulting in even more unpleasant secondary problems like\ndevelopers merging code that doesn't pass lint, not enforcing linter\nrules, and debates about whether a useful linter is \"worth the time\".\n\nZulint is the linter framework we built for Zulip to create a\nreliable, lightning-fast linter experience to solve these problems.\nIt has the following features:\n\n- Integrates with `git` to only checks files in source control (not\n  automatically generated, untracked, or .gitignore files).\n- Runs the linters in parallel, so you only have to wait for the\n  slowest linter.  For Zulip, this is a ~4x performance improvement\n  over running our third-party linters in series.\n- Produduces easy-to-read, clear terminal output, with each\n  independent linter given its own color.\n- Can check just modified files, or even as a `pre-commit` hook, only\n  checking files that have changed (and only starting linters which\n  check files that have changed).\n- Handles all the annoying details of flushing stdout and managing\n  color codes.\n- Highly configurable.\n  - Integrate a third-party linter with just a couple lines of code.\n  - Every feature supports convenient include/exclude rules.\n  - Add custom lint rules with a powerful regular expression\n    framework.  E.g. in Zulip, we want all access to `Message` objects\n    in views code to be done via our `access_message_by_id` functions\n    (which do security checks to ensure the user the request is being\n    done on behalf of has access to the message), and that is enforced\n    in part by custom regular expression lint rules.  This system is\n    optimized Python: Zulip has a few hundred custom linter rules of\n    this type.\n  - Easily add custom options to check subsets of your codebase,\n    subsets of rules, etc.\n- Has a nice automated testing framework for custom lint rules, so you\n  can make sure your rules actually work.\n\nThis codebase has been in production use in Zulip for several years,\nbut only in 2019 was generalized for use by other projects.  Its API\nto be beta and may change (with notice in the release notes) if we\ndiscover a better API, and patches to further extend it for more use\ncases are encouraged.\n\n## Using adamlint\n\nOnce a project is setup with zulint, you'll have a top-level linter\nscript with at least the following options:\n\n```\n$ ./example-lint --help\nusage: example-lint [-h] [--modified] [--verbose-timing] [--skip SKIP]\n                    [--only ONLY] [--list] [--list-groups] [--groups GROUPS]\n                    [--verbose] [--fix]\n                    [targets [targets ...]]\n\npositional arguments:\n  targets               Specify directories to check\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --modified, -m        Only check modified files\n  --verbose-timing, -vt\n                        Print verbose timing output\n  --skip SKIP           Specify linters to skip, eg: --skip=mypy,gitlint\n  --only ONLY           Specify linters to run, eg: --only=mypy,gitlint\n  --list, -l            List all the registered linters\n  --list-groups, -lg    List all the registered linter groups\n  --groups GROUPS, -g GROUPS\n                        Only run linter for languages in the group(s), e.g.:\n                        --groups=backend,frontend\n  --verbose, -v         Print verbose output where available\n  --fix                 Automatically fix problems where supported\n```\n\n### pre-commit hook mode\n\nSee https://github.com/adambirds/xkcd-password-gen/blob/master/tools/pre-commit for an\nexample pre-commit hook.\n\n## Development\n\nRun the following commands in a terminal to install zulint.\n```\ngit clone git@github.com:adambirds/adamlint.git\npython3 -m venv venv\nsource venv/bin/activate\npython3 setup.py install\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/adambirds/adamlint",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "adamlint",
    "package_url": "https://pypi.org/project/adamlint/",
    "platform": "",
    "project_url": "https://pypi.org/project/adamlint/",
    "project_urls": {
      "Homepage": "https://github.com/adambirds/adamlint"
    },
    "release_url": "https://pypi.org/project/adamlint/1.0.0/",
    "requires_dist": [
      "pyflakes",
      "pycodestyle",
      "typing-extensions"
    ],
    "requires_python": ">=3.5",
    "summary": "A linter launcher for projects that have multiple source languages.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12997581,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "472aa8596bc1eac753143d22817ece34c4a5c2077aa03709cf30f64ebf7e4182",
          "md5": "a0c46345ce5b59d24bf7153d5766e9a8",
          "sha256": "bb44b786130132352ee8754c08cbc529ca0412f61b53d659f710b0cef3a35ecb"
        },
        "downloads": -1,
        "filename": "adamlint-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0c46345ce5b59d24bf7153d5766e9a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 16957,
        "upload_time": "2022-02-24T15:39:54",
        "upload_time_iso_8601": "2022-02-24T15:39:54.519592Z",
        "url": "https://files.pythonhosted.org/packages/47/2a/a8596bc1eac753143d22817ece34c4a5c2077aa03709cf30f64ebf7e4182/adamlint-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed8ff7926fb0fe977e6100527e0621b360a0cc473244cea2025ee0bbc04f1409",
          "md5": "5de544a7b24af616ea3960316ee73b14",
          "sha256": "52fe206536df73bed78475d4c005467f1ebb8d90562693176bb84160b6079353"
        },
        "downloads": -1,
        "filename": "adamlint-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5de544a7b24af616ea3960316ee73b14",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 15170,
        "upload_time": "2022-02-24T15:39:55",
        "upload_time_iso_8601": "2022-02-24T15:39:55.595907Z",
        "url": "https://files.pythonhosted.org/packages/ed/8f/f7926fb0fe977e6100527e0621b360a0cc473244cea2025ee0bbc04f1409/adamlint-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "472aa8596bc1eac753143d22817ece34c4a5c2077aa03709cf30f64ebf7e4182",
        "md5": "a0c46345ce5b59d24bf7153d5766e9a8",
        "sha256": "bb44b786130132352ee8754c08cbc529ca0412f61b53d659f710b0cef3a35ecb"
      },
      "downloads": -1,
      "filename": "adamlint-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a0c46345ce5b59d24bf7153d5766e9a8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 16957,
      "upload_time": "2022-02-24T15:39:54",
      "upload_time_iso_8601": "2022-02-24T15:39:54.519592Z",
      "url": "https://files.pythonhosted.org/packages/47/2a/a8596bc1eac753143d22817ece34c4a5c2077aa03709cf30f64ebf7e4182/adamlint-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed8ff7926fb0fe977e6100527e0621b360a0cc473244cea2025ee0bbc04f1409",
        "md5": "5de544a7b24af616ea3960316ee73b14",
        "sha256": "52fe206536df73bed78475d4c005467f1ebb8d90562693176bb84160b6079353"
      },
      "downloads": -1,
      "filename": "adamlint-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5de544a7b24af616ea3960316ee73b14",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 15170,
      "upload_time": "2022-02-24T15:39:55",
      "upload_time_iso_8601": "2022-02-24T15:39:55.595907Z",
      "url": "https://files.pythonhosted.org/packages/ed/8f/f7926fb0fe977e6100527e0621b360a0cc473244cea2025ee0bbc04f1409/adamlint-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}