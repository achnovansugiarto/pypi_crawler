{
  "info": {
    "author": "edo0xff",
    "author_email": "edo0xff@pronton.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Topic :: Utilities"
    ],
    "description": "# Yuri\n\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](https://choosealicense.com/licenses/mit/)\n\nA task automation tool written in python. Yuri it's an API that lets you automate those boring and repetitive commands.\n\n![Yuri Atomation tool](https://i.imgur.com/VzyxhkK.png)\n\n## Installation\n\nInstall yuri with pip:\n\n```bash\npip install yuri\n```\n\nInstalling from source:\n\n```bash\ngit clone <repo_url>\ncd yuri\npip install setuptools\npip install .\n```\n\n## Usage/Examples\n\n```python\n# task_automation.py\nimport yuritasks as yuri\n\nyuri.do.var('source_dir', 'C:\\\\foo\\bar\\baz')\n\n@yuri.task\ndef myproject_commit_source(_args):\n    \"\"\"\n    Commit changes in my project\n    \"\"\"\n    yuri.do.cd('$source_dir')\\\n        .run('git add -A')\\\n        .run_with_input('git commit -m \"{i}\"', 'Your changes: ')\\\n        .run('git pull')\\\n        .run('git push -u origin develop')\n\n@yuri.task\ndef myproject_clean_up_source(_args):\n    \"\"\"\n    Clean up pyc files from source\n    \"\"\"\n    yuri.do.cd('$source_dir')\n\n    pyc_files = yuri.do.filter(yuri.do.files_list(), ['.pyc'])\n\n    yuri.do.delete(pyc_files)\n\nif __name__ == '__main__':\n    yuri.run()\n```\n\nThen run on terminal:\n\n```bash\npython task_automation.py\n```\n\nSo you will be hable to see yuri's namespace menu first:\n\n![Yuri namespace menu](https://i.imgur.com/cTqStCQ.png)\n\nSo choose the namespace to work on, 0 in this case, and you will se the available tasks:\n\n![Yuri tasks menu](https://i.imgur.com/RtUwyEg.png)\n\nNow just enter the task id of the task you want to run!\n\n### Tasks name conventions\n\nYou should name yours tasks as follows:\n\n```python\nimport yuritasks as yuri\n\n@yuri.task\ndef YOURNAMESPACE_task_name(_args):\n    \"\"\"Your task help here\n    \"\"\"\n    pass\n\n@yuri.task\ndef YOURNAMESPACE_second_task_name(_args):\n    \"\"\"Your task help here\n    \"\"\"\n    pass\n\n@yuri.task\ndef OTHERNAMESPACE_task_name(_args):\n    \"\"\"Your task help here\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    yuri.run()\n```\n\nAs you may noticed, tasks' functions must be named with `namespace` then `_` undersocore and finally the task name. A namespace is a way to organize different tasks in common sections.\n\n### Task arguments\n\nYou can pass arguments to your tasks via cli, just as follows:\n\n```python\nimport yuritasks as yuri\n\n@yuri.task\ndef foo_bar_task(args):\n    print(args)\n\nif __name__ == '__main__':\n    yuri.run()\n```\n\nWhen you runs bar_task put your arguments before task id:\n\n![Task arguments](https://i.imgur.com/05gFSCJ.png)\n\n![Task arguments](https://i.imgur.com/drYIu3l.png)\n\n### Extra configs\n\nYou can make a shortcut to quick run your tasks automations:\n\n![Windows shorcut](https://i.imgur.com/fOPW6PA.png)\n\n## API Reference\n\n`yuri.do <yuki.Tasker object>`\n\nThis object contains the command excecution methods.\n___\n\n`yuri.do.pause() -> Tasker`\n\nTasker waits until enter key is pressed.\n___\n\n`yuri.do.waifu_print(message: str) -> Tasker`\n\nPrints an string using the waifu banner.\n\n> ### Args\n> - `string` String to display.\n___\n\n`yuri.do.log_print(message: str) -> Tasker`\n\nPrints an string but also displays the current working folder.\n\n> ### Args\n> - `string` String to display.\n___\n\n`yuri.do.ignore_errors() -> Tasker`\n\nTasker will keep excecuting the following tasks even prev tasks could fail.\n___\n\n`yuri.do.var(name: str, val: Any=None) -> Any`\n\nStores a var that could be used like $var_name in the tasker method arguments strings.\n\n> By example, if you set `yuri.do.var('foo_dir', 'c:\\\\bar')` then you can do `yuri.do.cd('$foo_dir')`.\n\n> ### Args\n> - `name` The var name. \n> - `val` The value of the var.\n___\n\n`yuri.do.clear() -> Tasker`\n\nClears the console.\n___\n\n`yuri.do.dirs_list() -> list`\n\nReturns the directories lists of the current working dir.\n___\n\n`yuri.do.files_list() -> list`\n\nReturns the files lists of the current working dir.\n___\n\n`yuri.do.terminate() -> None`\n\nTerminates the running task.\n___\n\n`yuri.do.cd(dir: str) -> Tasker`\n\nChanges the current working dir.\n\n> ### Args\n> - `dir` Directory to move on.\n___\n\n`yuri.do.navto(url: str) -> Tasker`\n\nOpens the url in a webbrowser.\n\n> ### Args\n> - `url` Url to open.\n___\n\n`yuri.do.run(cmd: str) -> Tasker`\n\nExcecutes a system command.\n\n> ### Args\n> - `cmd` Command to execute.\n___\n\n`yuri.do.get_input(msg: str, default: str=None, can_be_null: bool=False) -> str`\n\nRead keyboard input with an optional default value.\n\n> ### Args\n> - `msg` Text to display when input request.\n> - `default` Default value used if user do not type anything.\n> - `can_be_null` If true, input can be empty.\n\n`yuri.do.run_with_input(cmd: str, msg: str) -> Tasker`\n\nRuns a command but request an keyboard input and `{i}` string in the command line is replaced by the input result before excecute the command.\n\n> By example. `yuri.do.run_with_input(\"cd {i}\", \"Type a directory: \")`\n> will run `cd the_typed_directory`.\n\n> ### Args\n> - `cmd` Comand to run. it must contain '{i}' string to be replaced with  the input result.\n> - `msg` Message showed to request the input.\n\n`yuri.do.copy(elements: list, destiny: str) -> Tasker`\n\nCopies files or directories to the destiny directory. If\nthe element that is beeing copied it's a directory its content\nwill be copied recursively.\n\n> ### Args\n> - `elements` It could be a list of files, directories or both.\n> - `destiny` Path where elements will be copied.\n\n`yuri.do.delete(elements: list) -> Tasker`\n\nDeletes files or directories.\n\n> ### Args\n> - `elements` A list of files, directories or both to delete.\n\n`yuri.do.filter(elements: list, filters: list) -> list`\n\nRemoves the elements from a list that does not contains any of the string in the filters list.\n\n> By example. `yuri.do.filter([\"foo.png\", \"bar.jpg\", \"baz.mp3\"], [\" png\", \".jpg\"])` will return `[\"foo.png\", \"bar.png\"]`.\n\n> ### Args\n> - `elements` List of elements that will be filtered.\n> - `filters` List of strings that elements must contain.\n\n`yuri.do.subprocess(cmd: str)  -> Tasker`\n\nRuns a command in a new console using a secondary thread. This means that command excecuted by this way will not interrupt tasks execution even if that command havent finished yet.\n\n## Authors\n\n- [@edo0xff](https://github.com/edo0xff)\n\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n\n# CHANGELOG\n\n## Version 0.0.1 25/09/2022\n1. First release\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/edo0xff/yuri",
    "keywords": "Task automation,Tool",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yuritasks",
    "package_url": "https://pypi.org/project/yuritasks/",
    "platform": null,
    "project_url": "https://pypi.org/project/yuritasks/",
    "project_urls": {
      "Homepage": "https://github.com/edo0xff/yuri"
    },
    "release_url": "https://pypi.org/project/yuritasks/0.0.1/",
    "requires_dist": [
      "colorama"
    ],
    "requires_python": "",
    "summary": "Task automation tool, automate those boring and repetitive tasks.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15235411,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b53964442bd47bf7b3670df123ce2498672722d06a1e9cd2dccadb9150e7ff15",
          "md5": "9ac3c9373d6bb59da490487c03812299",
          "sha256": "d18d693fc4e9c55527a6260ba88e585b9312df508b452a81803bfd8af1dbf7a1"
        },
        "downloads": -1,
        "filename": "yuritasks-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ac3c9373d6bb59da490487c03812299",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10480,
        "upload_time": "2022-09-28T01:04:30",
        "upload_time_iso_8601": "2022-09-28T01:04:30.977459Z",
        "url": "https://files.pythonhosted.org/packages/b5/39/64442bd47bf7b3670df123ce2498672722d06a1e9cd2dccadb9150e7ff15/yuritasks-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "947cc399c013c93d350acd67007998a10e72867ba0901547b02d62bb6a864037",
          "md5": "ed8b5614b72378579aa537a543c099ad",
          "sha256": "a09ac5e708aa40b222b282d66d991346eeb2959eea119a2ef9475d08d74a535a"
        },
        "downloads": -1,
        "filename": "yuritasks-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ed8b5614b72378579aa537a543c099ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 11272,
        "upload_time": "2022-09-28T01:04:33",
        "upload_time_iso_8601": "2022-09-28T01:04:33.121594Z",
        "url": "https://files.pythonhosted.org/packages/94/7c/c399c013c93d350acd67007998a10e72867ba0901547b02d62bb6a864037/yuritasks-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b53964442bd47bf7b3670df123ce2498672722d06a1e9cd2dccadb9150e7ff15",
        "md5": "9ac3c9373d6bb59da490487c03812299",
        "sha256": "d18d693fc4e9c55527a6260ba88e585b9312df508b452a81803bfd8af1dbf7a1"
      },
      "downloads": -1,
      "filename": "yuritasks-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9ac3c9373d6bb59da490487c03812299",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10480,
      "upload_time": "2022-09-28T01:04:30",
      "upload_time_iso_8601": "2022-09-28T01:04:30.977459Z",
      "url": "https://files.pythonhosted.org/packages/b5/39/64442bd47bf7b3670df123ce2498672722d06a1e9cd2dccadb9150e7ff15/yuritasks-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "947cc399c013c93d350acd67007998a10e72867ba0901547b02d62bb6a864037",
        "md5": "ed8b5614b72378579aa537a543c099ad",
        "sha256": "a09ac5e708aa40b222b282d66d991346eeb2959eea119a2ef9475d08d74a535a"
      },
      "downloads": -1,
      "filename": "yuritasks-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ed8b5614b72378579aa537a543c099ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 11272,
      "upload_time": "2022-09-28T01:04:33",
      "upload_time_iso_8601": "2022-09-28T01:04:33.121594Z",
      "url": "https://files.pythonhosted.org/packages/94/7c/c399c013c93d350acd67007998a10e72867ba0901547b02d62bb6a864037/yuritasks-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}