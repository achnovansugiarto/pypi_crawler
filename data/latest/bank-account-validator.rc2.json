{
  "info": {
    "author": "Filipe Waitman",
    "author_email": "filwaitman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": ".. image:: https://travis-ci.com/filwaitman/bank-account-validator.svg?branch=master\n    :target: https://travis-ci.com/filwaitman/bank-account-validator\n\n.. image:: https://codecov.io/gh/filwaitman/bank-account-validator/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/filwaitman/bank-account-validator\n\n\nBank Account Validator\n=======================\n\nPython implementation for bank account validation.\n\nCurrently, the biggest Brazilian banks are implemented - and so being validated. There is no other countries' banks implemented, but the code is modular and it can be done easily.\n\nUsage:\n\n.. code:: python\n\n    from bank_account_validator.core import Bank\n    bank_class = Bank.get('bank_code', 'country_code')\n    bank_class(branch='branch', branch_digit='branch_digit',\n               account='account', account_digit='account_digit').execute()\n\n\n\nExamples:\n\n.. code:: python\n\n    from bank_account_validator.core import Bank, BrazilianBank\n\n    # Account below is correct, so nothing is raised by calling execute()\n    bank_class = Bank.get('237', 'BR')\n    bank_class(branch='1769', branch_digit='8', account='200040', account_digit='7').execute()\n\n    # Account below has invalid branch so InvalidBranch will be raised\n    bank_class = BrazilianBank.get('237')\n    bank_class(branch='1769', branch_digit='0', account='200040', account_digit='7').execute()\n    # InvalidBranch: Branch \"1769-0\" is wrong.\n\n    # Account below has invalid account so InvalidAccount will be raised\n    bank_class = BrazilianBank.get('237')\n    bank_class(branch='1769', branch_digit='8', account='200040', account_digit='0').execute()\n    # InvalidAccount: Account \"0200040-0\" is wrong.\n\n    # Sometimes there is not an unitary validation for both branch and account\n    # I mean, the full combination is evaluated at once.\n    bank_class = BrazilianBank.get('033')\n    bank_class(branch='2006', branch_digit='', account='01008407', account_digit='1').execute()\n    # InvalidBranchAndAccountCombination: Combination (branch=\"2006\", account=\"01008407-1\") does not match.\n\n    # It also validates wether digits must be supplied or not, as well as branch/account lengths\n    bank_class = BrazilianBank.get('237')\n    bank_class(branch='111769', branch_digit='8', account='200040', account_digit='7').execute()\n    # InvalidBranchlength: For bank code \"237\", branches length must be 4.\n\n    bank_class(branch='1769', branch_digit='8', account='11200040', account_digit='7').execute()\n    # InvalidAccountlength: For bank code \"237\", accounts length must be 7.\n\n    bank_class(branch='1769', branch_digit='', account='200040', account_digit='7').execute()\n    # MissingBranchDigit: For bank code \"237\", branches must have a digit, of length 1.\n\n    bank_class(branch='1769', branch_digit='11', account='200040', account_digit='7').execute()\n    # UnexpectedBranchDigit: For bank code \"237\", branches must have 1 digits.\n\n    bank_class(branch='1769', branch_digit='8', account='200040', account_digit='').execute()\n    # MissingAccountDigit: For bank code \"237\", accounts must have a digit, of length 1.\n\n    bank_class(branch='1769', branch_digit='8', account='200040', account_digit='11').execute()\n    # UnexpectedAccountDigit: For bank code \"237\", accounts must have 1 digits.\n\n\n\nContribute\n----------\n\nDid you think in some interesting feature, or have you found a bug? Please let me know!\n\nOf course you can also download the project and send me some `pull requests <https://github.com/filwaitman/bank-account-validator/pulls>`_.\n\n\nYou can send your suggestions by `opening issues <https://github.com/filwaitman/bank-account-validator/issues>`_.\n\nYou can contact me directly as well. Take a look at my contact information at `http://filwaitman.github.io/ <http://filwaitman.github.io/>`_ (email is preferred rather than mobile phone).\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bank-account-validator",
    "package_url": "https://pypi.org/project/bank-account-validator/",
    "platform": "",
    "project_url": "https://pypi.org/project/bank-account-validator/",
    "project_urls": {
      "Source": "https://github.com/filwaitman/bank-account-validator"
    },
    "release_url": "https://pypi.org/project/bank-account-validator/0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Python implementation for bank account validation.",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7316519,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4ab28b328f789efa9c80a91fb39e282705162b1a73e92efcc74ae6136568d4af",
          "md5": "7c6a27e20265664b8a41cdae690125d4",
          "sha256": "18b2b26bf67f0970d8d194724691cf688290dae9a4e277f7ef46424371ea4109"
        },
        "downloads": -1,
        "filename": "bank-account-validator-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7c6a27e20265664b8a41cdae690125d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15538,
        "upload_time": "2016-02-14T19:42:45",
        "upload_time_iso_8601": "2016-02-14T19:42:45.221593Z",
        "url": "https://files.pythonhosted.org/packages/4a/b2/8b328f789efa9c80a91fb39e282705162b1a73e92efcc74ae6136568d4af/bank-account-validator-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83d2560a3367179d3dc59669999833f50d1d60b8a0b9742dd3600fb09d4afac5",
          "md5": "e2f7fbede52ff2f2a89f898830f9aff9",
          "sha256": "23fd68eda9a365a69509b15e9e914a88ed86f475a6f32af19565ecfaa00f23f5"
        },
        "downloads": -1,
        "filename": "bank_account_validator-0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2f7fbede52ff2f2a89f898830f9aff9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 6575,
        "upload_time": "2020-05-25T03:14:38",
        "upload_time_iso_8601": "2020-05-25T03:14:38.994244Z",
        "url": "https://files.pythonhosted.org/packages/83/d2/560a3367179d3dc59669999833f50d1d60b8a0b9742dd3600fb09d4afac5/bank_account_validator-0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d17fb8005802f2dc3161bae388cfbcdd7461648244fcf84736aedbb6ee587206",
          "md5": "85ad9a180dd8ca52c124a02424e468fa",
          "sha256": "fc1a33f05b4e88a70014bf71d193225d57c66a4ba13dfe08de9342b51d9d337c"
        },
        "downloads": -1,
        "filename": "bank-account-validator-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "85ad9a180dd8ca52c124a02424e468fa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18113,
        "upload_time": "2020-05-25T03:14:40",
        "upload_time_iso_8601": "2020-05-25T03:14:40.507595Z",
        "url": "https://files.pythonhosted.org/packages/d1/7f/b8005802f2dc3161bae388cfbcdd7461648244fcf84736aedbb6ee587206/bank-account-validator-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "83d2560a3367179d3dc59669999833f50d1d60b8a0b9742dd3600fb09d4afac5",
        "md5": "e2f7fbede52ff2f2a89f898830f9aff9",
        "sha256": "23fd68eda9a365a69509b15e9e914a88ed86f475a6f32af19565ecfaa00f23f5"
      },
      "downloads": -1,
      "filename": "bank_account_validator-0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e2f7fbede52ff2f2a89f898830f9aff9",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 6575,
      "upload_time": "2020-05-25T03:14:38",
      "upload_time_iso_8601": "2020-05-25T03:14:38.994244Z",
      "url": "https://files.pythonhosted.org/packages/83/d2/560a3367179d3dc59669999833f50d1d60b8a0b9742dd3600fb09d4afac5/bank_account_validator-0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d17fb8005802f2dc3161bae388cfbcdd7461648244fcf84736aedbb6ee587206",
        "md5": "85ad9a180dd8ca52c124a02424e468fa",
        "sha256": "fc1a33f05b4e88a70014bf71d193225d57c66a4ba13dfe08de9342b51d9d337c"
      },
      "downloads": -1,
      "filename": "bank-account-validator-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "85ad9a180dd8ca52c124a02424e468fa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18113,
      "upload_time": "2020-05-25T03:14:40",
      "upload_time_iso_8601": "2020-05-25T03:14:40.507595Z",
      "url": "https://files.pythonhosted.org/packages/d1/7f/b8005802f2dc3161bae388cfbcdd7461648244fcf84736aedbb6ee587206/bank-account-validator-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}