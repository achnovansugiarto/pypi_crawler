{
  "info": {
    "author": "",
    "author_email": "Elnaril <elnaril_dev@caramail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Uniswap Universal Router Decoder & Encoder v0.8.0\n⚠ This version introduces breaking changes compared to v0.7 !\n\n---\n\n#### Project Information\n[![Tests & Lint](https://github.com/Elnaril/uniswap-universal-router-decoder/actions/workflows/tests.yml/badge.svg)](https://github.com/Elnaril/uniswap-universal-router-decoder/actions/workflows/tests.yml)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/uniswap-universal-router-decoder)](https://pypi.org/project/uniswap-universal-router-decoder/)\n[![GitHub release (latest by date)](https://img.shields.io/github/v/release/Elnaril/uniswap-universal-router-decoder)](https://github.com/Elnaril/uniswap-universal-router-decoder/releases)\n[![PyPi Repository](https://img.shields.io/badge/repository-pipy.org-blue)](https://pypi.org/project/uniswap-universal-router-decoder/)\n[![GitHub](https://img.shields.io/github/license/Elnaril/uniswap-universal-router-decoder)](https://github.com/Elnaril/uniswap-universal-router-decoder/blob/master/LICENSE)\n\n#### Code Quality\n[![CodeQL](https://github.com/elnaril/uniswap-universal-router-decoder/workflows/CodeQL/badge.svg)](https://github.com/Elnaril/uniswap-universal-router-decoder/actions/workflows/github-code-scanning/codeql)\n[![Test Coverage](https://img.shields.io/badge/dynamic/json?color=blueviolet&label=coverage&query=%24.totals.percent_covered_display&suffix=%25&url=https%3A%2F%2Fraw.githubusercontent.com%2FElnaril%2Funiswap-universal-router-decoder%2Fmaster%2Fcoverage.json)](https://github.com/Elnaril/uniswap-universal-router-decoder/blob/master/coverage.json)\n[![Imports: isort](https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&labelColor=ef8336)](https://pycqa.github.io/isort/)\n[![Type Checker: mypy](https://img.shields.io/badge/%20type%20checker-mypy-%231674b1?style=flat&labelColor=ef8336)](https://mypy-lang.org/)\n[![Linter: flake8](https://img.shields.io/badge/%20linter-flake8-%231674b1?style=flat&labelColor=ef8336)](https://flake8.pycqa.org/en/latest/)\n\n---\n\n## Release Notes\n### V0.8.0\n - Breaking changes because of refactoring\n - Command chaining extension: all supported UR functions can now be chained in a single transaction\n### V0.7.1\n -  Fix issue [#1](https://github.com/Elnaril/uniswap-universal-router-decoder/issues/1) - v3 path decoding fails for some paths \n### V0.7.0\n - Add support for encoding V2_SWAP_EXACT_OUT\n - Add support for encoding V3_SWAP_EXACT_OUT\n - Fix V3_SWAP_EXACT_OUT ABI\n - Fix typos in README\n### V0.6.0\n - Breaking changes: use Web3.py v6 i/o v5\n - Add support for the PERMIT2_PERMIT function\n - Add support for chaining PERMIT2_PERMIT and V2_SWAP_EXACT_IN in the same transaction\n\n---\n\n## Overview and Points of Attention\n\nThe object of this library is to decode & encode the transaction input sent to the Uniswap universal router (UR)\n(address [`0xEf1c6E67703c7BD7107eed8303Fbe6EC2554BF6B`](https://etherscan.io/address/0xEf1c6E67703c7BD7107eed8303Fbe6EC2554BF6B) \non Ethereum Mainnet). It is based on, and is intended to be used with [web3.py](https://github.com/ethereum/web3.py)\n\n⚠ This library has not been audited, so use at your own risk !\n\n⚠ At this stage, there is no guarantee of compatibility between 2 versions: consider forcing the version in your dependency requirements.\n\n⚠ This project is a work in progress so not all commands are decoded yet. Below the list of the already implemented ones.\n\n| Command Id | Function Name | Decode | Encode\n| ---------- | ------------- |:------:|:------:\n| 0x00 | V3_SWAP_EXACT_IN | ✅ | ✅\n| 0x01 | V3_SWAP_EXACT_OUT | ✅ | ✅\n| 0x02 - 0x06 |  | ❌ | ❌\n| 0x07 | placeholder  | N/A | N/A\n| 0x08 | V2_SWAP_EXACT_IN | ✅ | ✅\n| 0x09 | V2_SWAP_EXACT_OUT | ✅ | ✅\n| 0x0a | PERMIT2_PERMIT | ✅ | ✅\n| 0x0b | WRAP_ETH | ✅ | ✅\n| 0x0c | UNWRAP_WETH | ✅ | ❌\n| 0x0d | PERMIT2_TRANSFER_FROM_BATCH | ❌ | ❌\n| 0x0e - 0x0f | placeholders | N/A | N/A\n| 0x10 - 0x1d |  | ❌ | ❌\n| 0x1e - 0x3f | placeholders | N/A | N/A\n\n---\n\n## Installation\nA good practice is to use [Python virtual environments](https://python.readthedocs.io/en/latest/library/venv.html), here is a [tutorial](https://www.freecodecamp.org/news/how-to-setup-virtual-environments-in-python/).\n\nThe library can be pip installed from [pypi.org](https://pypi.org/project/uniswap-universal-router-decoder/) as usual:\n\n```bash\n# update pip to latest version if needed\npip install -U pip\n\n# install the decoder from pypi.org\npip install uniswap-universal-router-decoder\n```\n\n---\n\n## Usage\n\nThe library exposes a class, `RouterCodec` with several public methods that can be used to decode or encode UR data.\n\n### How to decode a transaction input\nTo decode a transaction input, use the `decode.function_input()` method as follows:\n\n```python\nfrom uniswap_universal_router_decoder import RouterCodec\n\ntrx_input = \"0x3593564c000000000000000000 ... 90095b5c4e9f5845bba\"  # the trx input to decode\ncodec = RouterCodec()\ndecoded_trx_input = codec.decode.function_input(trx_input)\n```\n\nExample of decoded input returned by `decode.function_input()`:\n```python\n(\n    <Function execute(bytes,bytes[],uint256)>,  # the UR function that executes all commands\n    {\n        'commands': b'\\x0b\\x00',  # the list of commands sent to the UR\n        'inputs': [  # the inputs used for each command\n            (\n                <Function WRAP_ETH(address,uint256)>,  # the function corresponding to the first command\n                {                                      # and its parameters\n                    'recipient': '0x0000000000000000000000000000000000000002',  # code indicating the recipient of this command is the router\n                    'amountMin': 4500000000000000000  # the amount in WEI to wrap\n                }\n            ),\n            (\n                <Function V3_SWAP_EXACT_IN(address,uint256,uint256,bytes,bool)>,  # the function corresponding to the second command\n                {                                                                 # and its parameters\n                    'recipient': '0x0000000000000000000000000000000000000001',  # code indicating the sender will receive the output of this command\n                    'amountIn': 4500000000000000000,  # the exact amount sent\n                    'amountOutMin': 6291988002,  # the min amount expected of the bought token for the swap to be executed \n                    'path': b\"\\xc0*\\xaa9\\xb2#\\xfe\\x8d\\n\\x0e\\\\O'\\xea\\xd9\\x08<ul\\xc2\"  # the V3 path (tokens + pool fees)\n                           b'\\x00\\x01\\xf4\\xa0\\xb8i\\x91\\xc6!\\x8b6\\xc1\\xd1\\x9dJ.'  # can be decoded with the method decode.v3_path()\n                           b'\\x9e\\xb0\\xce6\\x06\\xebH',\n                    'payerIsSender': False  # a bool indicating if the input tokens come from the sender or are already in the UR\n                }\n            )\n        ],\n        'deadline': 1678441619  # The deadline after which the transaction is not valid any more.\n    }\n)\n```\n\n### How to decode a transaction\nIt's also possible to decode the whole transaction, given its hash \nand providing the codec has been built with either a valid `Web3` instance or the link to a rpc endpoint:\n\n```python\n# Using a web3 instance\nfrom web3 import Web3\nfrom uniswap_universal_router_decoder import RouterCodec\nw3 = Web3(...)  # your web3 instance\ncodec = RouterCodec(w3=w3)\n```\n\n```python\n# Using a rpc endpoint\nfrom web3 import Web3\nfrom uniswap_universal_router_decoder import RouterCodec\nrpc_link = \"https://...\"  # your rpc endpoint\ncodec = RouterCodec(rpc_endpoint=rpc_link)\n```\n\nAnd then the decoder will get the transaction from the blockchain and decode it, along with its input data:\n```python\ntrx_hash = \"0x52e63b7 ... 11b979dd9\"\ndecoded_transaction = codec.decode.transaction(trx_hash)\n```\n\n### How to decode an Uniswap V3 swap path\nThe `RouterCodec` class exposes also the method `decode.v3_path` which can be used to decode a given Uniswap V3 path.\n\n```python\nfrom uniswap_universal_router_decoder import RouterCodec\n\nuniswap_v3_path = b\"\\xc0*\\xaa9\\xb2#\\xfe\\x8d\\n\\x0e ... \\xd7\\x89\"  # bytes or str hex\nfn_name = \"V3_SWAP_EXACT_IN\"  # Or V3_SWAP_EXACT_OUT\ncodec = RouterCodec()\ndecoded_path = codec.decode.v3_path(fn_name, uniswap_v3_path)\n```\nThe result is a tuple, starting with the \"in-token\" and ending with the \"out-token\", with the pool fees between each pair.\n\n\n### How to encode\nThe UR allows the chaining of several functions in the same transaction.\nThis codec supports it (at least for supported functions) and exposes public methods that can be chained.\n\nThe chaining starts with the `encode.chain()` method and ends with the `build()` one which return the full encoded data to be included in the transaction.\nBelow some examples of encoded input for one function and one example for 2 functions.\n\nDefault values for deadlines and expirations can be computed with the static methods `get_default_deadline()` and `get_default_expiration()` respectively.\n```python\nfrom uniswap_universal_router_decoder import RouterCodec\n\ndefault_deadline = RouterCodec.get_default_deadline()\ndefault_expiration = RouterCodec.get_default_expiration()\n\n```\nThese 2 functions accept a custom duration in seconds as argument.\n\n\n### How to encode a call to the function WRAP_ETH\nThis function can be used to convert eth to weth using the UR.\n```python\nfrom uniswap_universal_router_decoder import FunctionRecipient, RouterCodec\n\ncodec = RouterCodec()\nencoded_data = codec.encode.chain().wrap_eth(FunctionRecipient.SENDER, amount_in_wei).build(1676825611)  # to convert amount_in_wei eth to weth, and send them to the transaction sender.\n\n# then in your transaction dict:\ntransaction[\"data\"] = encoded_data\n\n# you can now sign and send the transaction to the UR\n```\n\n\n### How to encode a call to the function V2_SWAP_EXACT_IN\nThis function can be used to swap tokens on a V2 pool. Correct allowances must have been set before using sending such transaction.\n```python\nfrom uniswap_universal_router_decoder import FunctionRecipient, RouterCodec\n\ncodec = RouterCodec()\nencoded_data = codec.encode.chain().v2_swap_exact_in(\n        FunctionRecipient.SENDER,  # the output tokens are sent to the transaction sender\n        amount_in,  # in Wei\n        min_amount_out,  # in Wei\n        [\n            in_token_address,  # checksum address of the token sent to the UR \n            out_token_address,  # checksum address of the received token\n        ],\n    ).build(timestamp)  # unix timestamp after which the trx will not be valid any more\n\n# then in your transaction dict:\ntransaction[\"data\"] = encoded_data\n\n# you can now sign and send the transaction to the UR\n```\n\n### How to encode a call to the function V2_SWAP_EXACT_OUT\nThis function can be used to swap tokens on a V2 pool. Correct allowances must have been set before using sending such transaction.\n```python\nfrom uniswap_universal_router_decoder import FunctionRecipient, RouterCodec\n\ncodec = RouterCodec()\nencoded_data = codec.encode.chain().v2_swap_exact_out(\n        FunctionRecipient.SENDER,\n        amount_out,  # in Wei\n        max_amount_in,  # in Wei\n        [\n            in_token_address,\n            out_token_address,\n        ],\n    ).build(timestamp)  # unix timestamp after which the trx will not be valid any more\n\n# then in your transaction dict:\ntransaction[\"data\"] = encoded_data\n# you can now sign and send the transaction to the UR\n```\n\n### How to encode a call to the function V3_SWAP_EXACT_IN\nThis function can be used to swap tokens on a V3 pool. Correct allowances must have been set before using sending such transaction.\n```python\nfrom uniswap_universal_router_decoder import FunctionRecipient, RouterCodec\n\ncodec = RouterCodec()\nencoded_data = codec.encode.chain().v3_swap_exact_in(\n        FunctionRecipient.SENDER,\n        amount_in,  # in Wei\n        min_amount_out,  # in Wei\n        [\n            in_token_address,\n            pool_fee,\n            out_token_address,\n        ],\n    ).build(timestamp)  # unix timestamp after which the trx will not be valid any more\n\n# then in your transaction dict:\ntransaction[\"data\"] = encoded_data\n\n# you can now sign and send the transaction to the UR\n```\n\n### How to encode a call to the function V3_SWAP_EXACT_OUT\nThis function can be used to swap tokens on a V3 pool. Correct allowances must have been set before using sending such transaction.\n```python\nfrom uniswap_universal_router_decoder import FunctionRecipient, RouterCodec\n\ncodec = RouterCodec()\nencoded_data = codec.encode.chain().v3_swap_exact_out(\n        FunctionRecipient.SENDER,\n        amount_out,  # in Wei\n        max_amount_in,  # in Wei\n        [\n            in_token_address,\n            pool_fee,\n            out_token_address,\n        ],\n    ).build(timestamp)  # unix timestamp after which the trx will not be valid any more\n\n# then in your transaction dict:\ntransaction[\"data\"] = encoded_data\n# you can now sign and send the transaction to the UR\n```\n\n### How to encode a call to the function PERMIT2_PERMIT\nThis function is used to give an allowance to the universal router thanks to the Permit2 contract (([`0x000000000022D473030F116dDEE9F6B43aC78BA3`](https://etherscan.io/address/0x000000000022D473030F116dDEE9F6B43aC78BA3)).\nIt is also necessary to approve the Permit2 contract using the token approve function.\n```python\nfrom uniswap_universal_router_decoder import RouterCodec\n\ncodec = RouterCodec()\ndata, signable_message = codec.create_permit2_signable_message(\n    token_address,\n    amount,  # max = 2**160 - 1\n    expiration,\n    nonce,  # Permit2 nonce\n    spender,  # UR\n    deadline,\n    1,  # chain id\n)\n\n# Then you need to sign the message:\nsigned_message = acc.sign_message(signable_message)  # where acc is your LocalAccount\n\n# And now you can encode the data:\nencoded_data = codec.encode.chain().permit2_permit(data, signed_message).build(deadline)\n\n# Then in your transaction dict:\ntransaction[\"data\"] = encoded_data\n\n# you can now sign and send the transaction to the UR\n```\nAfter that, you can swap tokens using the Uniswap universal router.\n\n### How to chain a call to PERMIT2_PERMIT and V2_SWAP_EXACT_IN in the same transaction\nDon't forget to give a token allowance to the Permit2 contract as well.\n\n```python\nfrom uniswap_universal_router_decoder import FunctionRecipient, RouterCodec\n\ncodec = RouterCodec()\n\n# Permit signature\ndata, signable_message = codec.create_permit2_signable_message(\n    token_address,\n    amount,  # max = 2**160 - 1\n    expiration,\n    nonce,  # Permit2 nonce\n    spender,  # UR\n    deadline,\n    1,  # chain id\n)\n\n# Then you need to sign the message:\nsigned_message = acc.sign_message(signable_message)  # where acc is your LocalAccount\n\n# Permit + v2 swap encoding\npath = [token_in_address, token_out_address]\nencoded_data = (\n    codec\n        .encode\n        .chain()\n        .permit2_permit(data, signed_message)\n        .v2_swap_exact_in(FunctionRecipient.SENDER, Wei(10**18), Wei(0), path)\n        .build(deadline)\n)\n\n# Then in your transaction dict:\ntransaction[\"data\"] = encoded_data\n\n# you can now sign and send the transaction to the UR\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "blockchain,ethereum,uniswap,universal router,decoder,encoder",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "uniswap-universal-router-decoder",
    "package_url": "https://pypi.org/project/uniswap-universal-router-decoder/",
    "platform": null,
    "project_url": "https://pypi.org/project/uniswap-universal-router-decoder/",
    "project_urls": {
      "Bug Tracker": "https://github.com/Elnaril/uniswap-universal-router-decoder/issues",
      "Fiverr": "https://www.fiverr.com/elnaril",
      "Homepage": "https://github.com/Elnaril/uniswap-universal-router-decoder"
    },
    "release_url": "https://pypi.org/project/uniswap-universal-router-decoder/0.8.0/",
    "requires_dist": [
      "web3 (>=6.0.0b11)"
    ],
    "requires_python": ">=3.8",
    "summary": "Decode & Encode transaction data sent to Uniswap universal router",
    "version": "0.8.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17345385,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "925575864bdf1c85910fd71ff646b5c249250caaf15b1f7ca0b13d72ab561fd5",
          "md5": "09d987ec3b3f71a5e1bad781d4fd859b",
          "sha256": "770628882dbf96b61b1f78277951c079eaa42a685331225a4ef85bb91b9e735d"
        },
        "downloads": -1,
        "filename": "uniswap_universal_router_decoder-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09d987ec3b3f71a5e1bad781d4fd859b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8, <4",
        "size": 5900,
        "upload_time": "2023-02-10T15:12:22",
        "upload_time_iso_8601": "2023-02-10T15:12:22.480311Z",
        "url": "https://files.pythonhosted.org/packages/92/55/75864bdf1c85910fd71ff646b5c249250caaf15b1f7ca0b13d72ab561fd5/uniswap_universal_router_decoder-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66c533545874dfb15a83f230e4e5749c4918d51feda7060c2b9dbc765cc4ffe7",
          "md5": "7bae0efb704cb545d3742e33a5ca56e2",
          "sha256": "3bff995a41b56b9b89d6a75e8de044d4782e179edae7757cb711af8d35985117"
        },
        "downloads": -1,
        "filename": "uniswap-universal-router-decoder-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7bae0efb704cb545d3742e33a5ca56e2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8, <4",
        "size": 6993,
        "upload_time": "2023-02-10T15:12:24",
        "upload_time_iso_8601": "2023-02-10T15:12:24.472214Z",
        "url": "https://files.pythonhosted.org/packages/66/c5/33545874dfb15a83f230e4e5749c4918d51feda7060c2b9dbc765cc4ffe7/uniswap-universal-router-decoder-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f2c9649d7e256e54c84b861221b1d2df0ca10164536fb83cbfb179188a98c916",
          "md5": "d53719a3e24982eb606707945dbf28d6",
          "sha256": "6868cf3ef496e2e52f635e701db033ec13987e236e8f9645ad139411cacd8991"
        },
        "downloads": -1,
        "filename": "uniswap_universal_router_decoder-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d53719a3e24982eb606707945dbf28d6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6168,
        "upload_time": "2023-02-11T16:33:53",
        "upload_time_iso_8601": "2023-02-11T16:33:53.962244Z",
        "url": "https://files.pythonhosted.org/packages/f2/c9/649d7e256e54c84b861221b1d2df0ca10164536fb83cbfb179188a98c916/uniswap_universal_router_decoder-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed41df6703b250d472e07e70f84c79a19912164f0627a34fca77403aa36cf5c0",
          "md5": "4e786cef34460d71acfb3e035aec4223",
          "sha256": "e3a9fd0be0f57e7bfe07b7ac66046f0064b2684804140e5e3d3b8e2fe45a725e"
        },
        "downloads": -1,
        "filename": "uniswap-universal-router-decoder-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4e786cef34460d71acfb3e035aec4223",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7470,
        "upload_time": "2023-02-11T16:33:55",
        "upload_time_iso_8601": "2023-02-11T16:33:55.568853Z",
        "url": "https://files.pythonhosted.org/packages/ed/41/df6703b250d472e07e70f84c79a19912164f0627a34fca77403aa36cf5c0/uniswap-universal-router-decoder-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d83167240a0053abc38d66ce7d0e2e9b70a913288a164bff9d6b5d4acbcd6fd1",
          "md5": "4f8654e79b2f925aca14fe141f2646d5",
          "sha256": "c568e1797a2e4fb9c3963a6cca9aedd0f37c421e7fe250c85a1a14bdcb0032f4"
        },
        "downloads": -1,
        "filename": "uniswap_universal_router_decoder-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f8654e79b2f925aca14fe141f2646d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 6888,
        "upload_time": "2023-02-14T17:06:25",
        "upload_time_iso_8601": "2023-02-14T17:06:25.344729Z",
        "url": "https://files.pythonhosted.org/packages/d8/31/67240a0053abc38d66ce7d0e2e9b70a913288a164bff9d6b5d4acbcd6fd1/uniswap_universal_router_decoder-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb5f5292d81a7bc02f54db4e288e0156524178aba0dc88de84a706e899b9f3e4",
          "md5": "c2989b41d2829e0a6c616eef604bb712",
          "sha256": "5927e4bda5d5ca37b640bb7b87ade28b4553922fe4ccbf62614e5bfa28566e61"
        },
        "downloads": -1,
        "filename": "uniswap-universal-router-decoder-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c2989b41d2829e0a6c616eef604bb712",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9183,
        "upload_time": "2023-02-14T17:06:28",
        "upload_time_iso_8601": "2023-02-14T17:06:28.121739Z",
        "url": "https://files.pythonhosted.org/packages/cb/5f/5292d81a7bc02f54db4e288e0156524178aba0dc88de84a706e899b9f3e4/uniswap-universal-router-decoder-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "874aeb98960e67821d686659c1cbe8cf753d4e40d1fae2502557471b3b90ab61",
          "md5": "64efdc3a507d7a6647b8944990287600",
          "sha256": "5969dd6fd20a1a853bab08879bb41c80c140079af5137ba87bb88502b7877112"
        },
        "downloads": -1,
        "filename": "uniswap_universal_router_decoder-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64efdc3a507d7a6647b8944990287600",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 8896,
        "upload_time": "2023-02-20T19:43:46",
        "upload_time_iso_8601": "2023-02-20T19:43:46.340633Z",
        "url": "https://files.pythonhosted.org/packages/87/4a/eb98960e67821d686659c1cbe8cf753d4e40d1fae2502557471b3b90ab61/uniswap_universal_router_decoder-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c8aa61e4fb2a8493074735f9d9dd0edf015ded5694a15e78e5f86d8eb9dacc6",
          "md5": "ad93e4658ad086e849f95a2c23de047a",
          "sha256": "7c50cead14ebd794f32ad31c16934f17d63c1a0a798c8e833f2765ba6a110928"
        },
        "downloads": -1,
        "filename": "uniswap-universal-router-decoder-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ad93e4658ad086e849f95a2c23de047a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 12446,
        "upload_time": "2023-02-20T19:43:49",
        "upload_time_iso_8601": "2023-02-20T19:43:49.359459Z",
        "url": "https://files.pythonhosted.org/packages/6c/8a/a61e4fb2a8493074735f9d9dd0edf015ded5694a15e78e5f86d8eb9dacc6/uniswap-universal-router-decoder-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2612782f48b95e845ac4a7d0771c72c85ccc472320dd6cb47e2f389f4f9a9d41",
          "md5": "cd66fdf00378b2b5e0f1946a6ed6d0cf",
          "sha256": "1fa812ea592812b851c6c8da07f9f079bea3f42e8af4ed19b7bbe3d5970d1305"
        },
        "downloads": -1,
        "filename": "uniswap_universal_router_decoder-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd66fdf00378b2b5e0f1946a6ed6d0cf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9943,
        "upload_time": "2023-02-22T18:52:28",
        "upload_time_iso_8601": "2023-02-22T18:52:28.209337Z",
        "url": "https://files.pythonhosted.org/packages/26/12/782f48b95e845ac4a7d0771c72c85ccc472320dd6cb47e2f389f4f9a9d41/uniswap_universal_router_decoder-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "554d673985e77042eaecef24abfb178f987aaed1f30d499fc9a4c8a6b1ea93bd",
          "md5": "849b07c5ec4f173f45ad5b15214c8855",
          "sha256": "157e20e65c74513e27ba2f90ada9e44e51a6b62b3f4eba6f7bf33ec184ee9d2a"
        },
        "downloads": -1,
        "filename": "uniswap-universal-router-decoder-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "849b07c5ec4f173f45ad5b15214c8855",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14193,
        "upload_time": "2023-02-22T18:52:29",
        "upload_time_iso_8601": "2023-02-22T18:52:29.887479Z",
        "url": "https://files.pythonhosted.org/packages/55/4d/673985e77042eaecef24abfb178f987aaed1f30d499fc9a4c8a6b1ea93bd/uniswap-universal-router-decoder-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7738c3d4335d1de81e5747c1cf1502c56d0546fd20f7e360fac8bbf6c3203ae1",
          "md5": "6ca457fe390e7f83595b562a568fb343",
          "sha256": "5850863b0e37735f4b679521c593847ab7de21d76bd0fc42c062942fc1caf3fd"
        },
        "downloads": -1,
        "filename": "uniswap_universal_router_decoder-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ca457fe390e7f83595b562a568fb343",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10182,
        "upload_time": "2023-03-03T14:24:52",
        "upload_time_iso_8601": "2023-03-03T14:24:52.574776Z",
        "url": "https://files.pythonhosted.org/packages/77/38/c3d4335d1de81e5747c1cf1502c56d0546fd20f7e360fac8bbf6c3203ae1/uniswap_universal_router_decoder-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "073f0b836590770c8c6e28e4d717b1f372e37d30da65dca5b2470823305e3d1a",
          "md5": "1d887a71358ab39345f7d16aafb1ba92",
          "sha256": "447b91c8cdc3a328f4396c99aa99d8815bf5c2d75bc71ab07a7dd9f7188548d8"
        },
        "downloads": -1,
        "filename": "uniswap-universal-router-decoder-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1d887a71358ab39345f7d16aafb1ba92",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14656,
        "upload_time": "2023-03-03T14:24:54",
        "upload_time_iso_8601": "2023-03-03T14:24:54.355983Z",
        "url": "https://files.pythonhosted.org/packages/07/3f/0b836590770c8c6e28e4d717b1f372e37d30da65dca5b2470823305e3d1a/uniswap-universal-router-decoder-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cb39ba63b3ddaec7ca2e6b2436ef849560be36f24dde0aebfbc6ad3f0093208d",
          "md5": "fee6ef157f58a3e6a90c9700b05c4e83",
          "sha256": "a2817dee34c235831b115703c54e6e309a02f7fd3338011634b87a94e9b6133f"
        },
        "downloads": -1,
        "filename": "uniswap_universal_router_decoder-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fee6ef157f58a3e6a90c9700b05c4e83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10397,
        "upload_time": "2023-03-09T14:41:32",
        "upload_time_iso_8601": "2023-03-09T14:41:32.227713Z",
        "url": "https://files.pythonhosted.org/packages/cb/39/ba63b3ddaec7ca2e6b2436ef849560be36f24dde0aebfbc6ad3f0093208d/uniswap_universal_router_decoder-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dc956125126db269f01b42b311e420eb9b4bfb48cda9c08ccdac506ae0d47021",
          "md5": "0e2186fde28f32dfb53c42055a0a98d2",
          "sha256": "2a7e583ea6ae6266b064fcd82818ea50b5370cd29194bde47f22531ce69a47c7"
        },
        "downloads": -1,
        "filename": "uniswap-universal-router-decoder-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0e2186fde28f32dfb53c42055a0a98d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15519,
        "upload_time": "2023-03-09T14:41:34",
        "upload_time_iso_8601": "2023-03-09T14:41:34.277749Z",
        "url": "https://files.pythonhosted.org/packages/dc/95/6125126db269f01b42b311e420eb9b4bfb48cda9c08ccdac506ae0d47021/uniswap-universal-router-decoder-0.5.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6e4b0e7b86000546511941fb5a23e30e709a3ca678b014def8dba8d4ee461e18",
          "md5": "a7a56912d967f71125ccbb8c4e94988a",
          "sha256": "1c9a1d0fd06c8015e101c7d18a64d08a26f18d803dfd00e460885e1c8021d6cf"
        },
        "downloads": -1,
        "filename": "uniswap_universal_router_decoder-0.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7a56912d967f71125ccbb8c4e94988a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 10416,
        "upload_time": "2023-03-10T15:08:34",
        "upload_time_iso_8601": "2023-03-10T15:08:34.783040Z",
        "url": "https://files.pythonhosted.org/packages/6e/4b/0e7b86000546511941fb5a23e30e709a3ca678b014def8dba8d4ee461e18/uniswap_universal_router_decoder-0.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a040cb495a9fafebfed47b612faa1fc1be60ce40ff8147cdc10cdeb16d10c589",
          "md5": "5a26aad0e345395077004528cc45c726",
          "sha256": "4a044f999fa2ff7bad5851fb70fb5a386eb67dcbb9da2c2f45ccfb546788ab31"
        },
        "downloads": -1,
        "filename": "uniswap-universal-router-decoder-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5a26aad0e345395077004528cc45c726",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 15636,
        "upload_time": "2023-03-10T15:08:36",
        "upload_time_iso_8601": "2023-03-10T15:08:36.576262Z",
        "url": "https://files.pythonhosted.org/packages/a0/40/cb495a9fafebfed47b612faa1fc1be60ce40ff8147cdc10cdeb16d10c589/uniswap-universal-router-decoder-0.5.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5a0a335c553b6bdb1516d442e1dc6620dbb841f1ad889d934453994643ca839",
          "md5": "1604dd0cc01cf9cb1e060f080126503c",
          "sha256": "7adb0da6489ae83185d2e7ec3c12d1398d62301ce41fd6bf0552091b937e5f28"
        },
        "downloads": -1,
        "filename": "uniswap_universal_router_decoder-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1604dd0cc01cf9cb1e060f080126503c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 11967,
        "upload_time": "2023-03-01T20:53:43",
        "upload_time_iso_8601": "2023-03-01T20:53:43.508750Z",
        "url": "https://files.pythonhosted.org/packages/b5/a0/a335c553b6bdb1516d442e1dc6620dbb841f1ad889d934453994643ca839/uniswap_universal_router_decoder-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "369faa1791f7f30a41e7278c61aa5008e42fbe3fadc8e9b614a0a91d3744d0de",
          "md5": "128384ae2b795e00a37801e20648cf53",
          "sha256": "4c5065a78270692e22f8180cdcba4faf813ebb284606f1309a676006c57e0621"
        },
        "downloads": -1,
        "filename": "uniswap-universal-router-decoder-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "128384ae2b795e00a37801e20648cf53",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 17919,
        "upload_time": "2023-03-01T20:53:45",
        "upload_time_iso_8601": "2023-03-01T20:53:45.293666Z",
        "url": "https://files.pythonhosted.org/packages/36/9f/aa1791f7f30a41e7278c61aa5008e42fbe3fadc8e9b614a0a91d3744d0de/uniswap-universal-router-decoder-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e018ab79633755e2acb8281f5084e90007044f41e9aedae5739dc22fd6ef94df",
          "md5": "1bc11a7f0b7744ac2e49cf274e18e505",
          "sha256": "0f6144a746ce172c292271da37592cc48b00932cc0341c995723b2be76745323"
        },
        "downloads": -1,
        "filename": "uniswap_universal_router_decoder-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1bc11a7f0b7744ac2e49cf274e18e505",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12267,
        "upload_time": "2023-03-09T16:57:46",
        "upload_time_iso_8601": "2023-03-09T16:57:46.500125Z",
        "url": "https://files.pythonhosted.org/packages/e0/18/ab79633755e2acb8281f5084e90007044f41e9aedae5739dc22fd6ef94df/uniswap_universal_router_decoder-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7bc90395e2697b228b2796d8174378a6de9e475ae0c8a171883888a032a06d77",
          "md5": "095e86ea854ef681b4947396b74f015b",
          "sha256": "350b105060c4eef9c9eb7bc9786bf1e947c68b5abe979724c3e6d0bc456864b2"
        },
        "downloads": -1,
        "filename": "uniswap-universal-router-decoder-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "095e86ea854ef681b4947396b74f015b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 18852,
        "upload_time": "2023-03-09T16:57:48",
        "upload_time_iso_8601": "2023-03-09T16:57:48.552323Z",
        "url": "https://files.pythonhosted.org/packages/7b/c9/0395e2697b228b2796d8174378a6de9e475ae0c8a171883888a032a06d77/uniswap-universal-router-decoder-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b0bdd79c83cd50cbf4c0de04077462a6d37630c85921e7eed66984047dc21a66",
          "md5": "478b4986490870feb24a48d4f00e01ef",
          "sha256": "35404ca142300fc975c32e4add92f823acf609c568bcc2d4a5bb7a69c503e47a"
        },
        "downloads": -1,
        "filename": "uniswap_universal_router_decoder-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "478b4986490870feb24a48d4f00e01ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 12853,
        "upload_time": "2023-03-10T15:15:10",
        "upload_time_iso_8601": "2023-03-10T15:15:10.221615Z",
        "url": "https://files.pythonhosted.org/packages/b0/bd/d79c83cd50cbf4c0de04077462a6d37630c85921e7eed66984047dc21a66/uniswap_universal_router_decoder-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "040021a5267d52de8718f88d6d90928122a473a44093beb1077b3ba0a5e301e2",
          "md5": "134fb10c678bb35dd47360f0d250850e",
          "sha256": "d26130b8b451f4b15cca69b22b1b3f285a40a5f802099e79aae80df456d3d425"
        },
        "downloads": -1,
        "filename": "uniswap-universal-router-decoder-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "134fb10c678bb35dd47360f0d250850e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 20210,
        "upload_time": "2023-03-10T15:15:12",
        "upload_time_iso_8601": "2023-03-10T15:15:12.147474Z",
        "url": "https://files.pythonhosted.org/packages/04/00/21a5267d52de8718f88d6d90928122a473a44093beb1077b3ba0a5e301e2/uniswap-universal-router-decoder-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9276375d365df5124557373b4d8d60dcbd7a17460368c51a74e83eff11de0a2e",
          "md5": "e76fc34b5f2aaef1ef4d2f7d51a93c1a",
          "sha256": "20c9d8f06290e67f39224a8189d2fb7fcfa7084225a3fb74273c5d9a2390ad6e"
        },
        "downloads": -1,
        "filename": "uniswap_universal_router_decoder-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e76fc34b5f2aaef1ef4d2f7d51a93c1a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 17101,
        "upload_time": "2023-03-18T13:08:54",
        "upload_time_iso_8601": "2023-03-18T13:08:54.346376Z",
        "url": "https://files.pythonhosted.org/packages/92/76/375d365df5124557373b4d8d60dcbd7a17460368c51a74e83eff11de0a2e/uniswap_universal_router_decoder-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b9429ac9990df4a6981e3279bbf81a65105472fc45ca0a624e48d691a3fd5bf9",
          "md5": "6a16409684e83b8ec87527b8b26e10d2",
          "sha256": "81bf7193ef64eea4b983f6daf20fc7aad811b66d2eeb26fa67c1e8bd5a918b3e"
        },
        "downloads": -1,
        "filename": "uniswap-universal-router-decoder-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6a16409684e83b8ec87527b8b26e10d2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 22228,
        "upload_time": "2023-03-18T13:08:56",
        "upload_time_iso_8601": "2023-03-18T13:08:56.135971Z",
        "url": "https://files.pythonhosted.org/packages/b9/42/9ac9990df4a6981e3279bbf81a65105472fc45ca0a624e48d691a3fd5bf9/uniswap-universal-router-decoder-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9276375d365df5124557373b4d8d60dcbd7a17460368c51a74e83eff11de0a2e",
        "md5": "e76fc34b5f2aaef1ef4d2f7d51a93c1a",
        "sha256": "20c9d8f06290e67f39224a8189d2fb7fcfa7084225a3fb74273c5d9a2390ad6e"
      },
      "downloads": -1,
      "filename": "uniswap_universal_router_decoder-0.8.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e76fc34b5f2aaef1ef4d2f7d51a93c1a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 17101,
      "upload_time": "2023-03-18T13:08:54",
      "upload_time_iso_8601": "2023-03-18T13:08:54.346376Z",
      "url": "https://files.pythonhosted.org/packages/92/76/375d365df5124557373b4d8d60dcbd7a17460368c51a74e83eff11de0a2e/uniswap_universal_router_decoder-0.8.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b9429ac9990df4a6981e3279bbf81a65105472fc45ca0a624e48d691a3fd5bf9",
        "md5": "6a16409684e83b8ec87527b8b26e10d2",
        "sha256": "81bf7193ef64eea4b983f6daf20fc7aad811b66d2eeb26fa67c1e8bd5a918b3e"
      },
      "downloads": -1,
      "filename": "uniswap-universal-router-decoder-0.8.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6a16409684e83b8ec87527b8b26e10d2",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 22228,
      "upload_time": "2023-03-18T13:08:56",
      "upload_time_iso_8601": "2023-03-18T13:08:56.135971Z",
      "url": "https://files.pythonhosted.org/packages/b9/42/9ac9990df4a6981e3279bbf81a65105472fc45ca0a624e48d691a3fd5bf9/uniswap-universal-router-decoder-0.8.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}