{
  "info": {
    "author": "Ryan Parry-Jones",
    "author_email": "Ryan.Parry-Jones@ampcontrolgroup.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Manufacturing",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# pyAWARE\n\nPython middleware for AWARE Gateway.\nThis is to be installed on an edge device for reading data from non-iot devices, aggregating the data and then publishes\nthe data to either the cloud or to a local network via MQTT.\n\nThere are sections of this readme which will diverge between legacy and current implementation. See below devices that \nrequire our legacy steps vs the current steps,\n##### Current\n- [MOXA UC-2100](https://www.moxa.com/en/products/industrial-computing/arm-based-computers/uc-2100-series)\n- [MOXA V2403](https://www.moxa.com/en/products/industrial-computing/x86-computers/v2403-series)\n##### Legacy\n- [Siemens IOT2040](https://new.siemens.com/global/en/products/automation/pc-based/iot-gateways/iot2000.html)\n___________\n# Contents\n- [Installation](#markdown-header-installation)\n- [Building new releases](#markdown-header-building-new-releases)\n- [Field Production Installation](#markdown-header-field-production-installation)\n- [Production Image Installation](#markdown-header-production-image-installation)\n- [Dev Installation](#markdown-header-dev-installation)\n- [Online Installation](#markdown-header-online-installation)\n- [Offline Installation](#markdown-header-offline-installation)\n- [Service Installation](#markdown-header-service-installation)\n- [Usage](#markdown-header-usage)\n    - [Folder Structure](#markdown-header-folder-structure)\n    - [Gateway Config (gateway.yaml)](#markdown-header-gateway-config-gatewayyaml)\n    - [MQTT Connection Config (connection.yaml)](#markdown-header-mqtt-connection-config-connectionyaml)\n    - [Translation Config (translation.yaml)](#markdown-header-translation-config-translationyaml)\n- [Deploying Gateway](#markdown-header-deploying-gateway)\n- [Creating new devices](#markdown-header-creating-new-devices)\n    - [Sources](#markdown-header-sources)\n    - [Transformations](#markdown-header-transformations)\n    - [Parameters](#markdown-header-parameters)\n___________\n\n# Installation\n\nInstall is recommended on a virtual environment on python 3.7 or above.\n```console\npip install virtualenv\nvirtualenv /path/to/new/env -p /path/to/python  \n```\nActivate the environment to do commands such as pip\n```console\n/path/to/new/env/Scripts/activate\nor\n/path/to/ENV/bin/activate\n```\nOr run the python directly\n```console\n/path/to/new/env/Scripts/python\nor\n/path/to/ENV/bin/python\n```\n\n---------------------\nRunning the test suite\n---------------------\n\nTo run the test suite (with an activated venv)\n\n```\npip install -e .\npip install -r requirements.txt\npip install -r requirements-test.txt\npytest\n```\n\nIt should take ~30 seconds for all tests to run.\n\n---------------------\nBuilding new releases\n---------------------\nIn order to do a new release follow the following checklist:\n- Create a release branch\n- Set the current working directory to the top level folder of pyAWARE\n- Update ReleaseNotes.md to include the major changes in this revision (review git logs)\n- Update `__version__` string in `__init__.py` in the top level folder\n- Run\n```bash\npython setup.py bdist_wheel\n```\n- The output .whl folder should be in the dist/* folder (empty this folder before running as there may be issues with\n  other whl files with the same name in this directory)\n- Open it with 7zip or similar and check that the python files, non-python files and scripts are included as expected.\n- Test the features and fixes that have been introduced in this revision. With this test the core functionality of \n  pyAWARE i.e. modbus comms, MQTT comms, cloud comms etc.\n- Create, approve and merge into both the 'develop' branch and the 'production' branch\n\n------------------------\nField Production Installation\n------------------------\nNOTE: If unit doesn't have access to the internet, follow the offline installation instructions for getting the \ndependencies installed.\n##### Current Install\nFor rolling out updates. If it is a pure python release update, copy the wheel file via SCP to /usr/share/aware\nthen use \n```base\npip install pyaware-<version>-py3-non-any.whl\n```\n##### Legacy Install\nFor rolling out updates. If it is a pure python release update, copy the wheel file via SCP to /etc/AWARE\nthen use \n```base\npip install pyaware-<version>-py3-non-any.whl\n```\n\n----------------\nProduction Image Installation\n----------------\n- Retrieve the current system image from [Subversion](http://prwivsvn0.primatec.local/svn/automation/Ampcontrol%20IOT%20Images)  \n  for your device.\n##### Current\n- Install the image onto a USB Drive.\n- Enter uBoot and install the image to the IPC.\n- Update the pyAWARE install and dependencies.\n##### Legacy\n- Burn this to an SD card to be installed onto your device.\n- Install the SD card into your device and perform an initial boot. \n- Update the pyAWARE install and dependencies.\n\n--------------------\nDev Installation\n--------------------\n- Have python 3.7.X installed\n- Check out the pyAWARE project\n- Open terminal or cmd prompt and navigate to the checked out project\n```console\npip install -e .\npip install -r requirements.txt\n```\nThis will connect to the internet and download the necessary packages\n\n--------------------\nOnline Installation\n--------------------\n- Have python 3.7.X installed\n- Check out the pyaware project\n- Open terminal or cmd prompt and navigate to the checked out project\n```console\npip install .\npip install -r requirements.txt\n```\nThis will connect to the internet and download the necessary packages\n\n--------------------\nOffline Installation\n--------------------\nInstalling can take a long time on embedded devices such as the IOT 2040\nTo speed up this process do the following,\n- Have python 3.7 or above installed\n- Check out the pyAWARE project\n- Open terminal or cmd prompt and navigate to the checked out project\n- Download the required packages by doing the following (Note: The platform and index will change based on the architecture )\nFor the moxa we are using the piwheels cache which has prebuilt wheels for the arm architecture. \nOn a desktop (tested on python 3.9) we need to get other packages to support the install that pip doesn't download on the other architecture.\n```console\npip download pyaware wheel pip importlib_metadata ruamel.yaml.clib zipp --extra-index-url https://www.piwheels.org/simple --platform linux_armv7l --python-version 3.7 --only-binary=:all: -d pkgs\n```\n\nOn moxa device\nActivate a python 3.7 environment. This is required as hbmqtt does not have a distribution release for 3.7 so specifying 3.7 doesn't work.\nBy using the natural 3.7 environment we get the 3.4-3.5 package which is still compatible.\n```\npip download pyaware pip wheel -d pkgs --extra-index-url https://www.piwheels.org/simple --only-binary=:all:\n```\n- Copy the pkgs directory to the target device\n- Activate the virtual environment  \n- Install the packages\n```console\npip install --upgrade pip wheel --no-index --find-links=\"pkgs\" && pip install --upgrade pyaware --no-index --find-links=\"pkgs\"\n```\n\nDownload and install only source files and platform agnostic files.\nDo this on the device so that it will not download x86 binaries.\n```\npip download setuptools wheel pip pyaware cython -d pkgs --no-cache\n```\nOffline install from source\n```\npip install --upgrade pip wheel --no-index --find-links=\"pkgs\" && pip install --upgrade pyaware --no-index --find-links=\"pkgs\"\n```\n\n------------------\nService Installation\n------------------\n##### Current\n**NOTE**: This only is to be performed if pyaware.service is not found at this location -> /etc/systemd/system\n- Create a service file called *pyaware.service* which contains the below,\n```\n[unit]\nDescription=pyaware\nAfter=network.target\n\n[Service]\nType=simple\nRestart=always\nRestartSec=1\nExecStart=/usr/share/aware/venv/bin/python -m pyaware /etc/aware/\n\n[Install]WantedBy=multi-user.target\n```\n- Put this file in `/etc/systemd/system`\n\nThis service should start on boot and will restart if it errors out. To explicitly start/stop/restart this service use \nthe commands below,\n```console\nsudo systemctl [cmd] pyaware\n\nwhere cmd can be -> status, start, stop, restart etc.\n```\n\n##### Legacy\n**NOTE**: This only is to be performed if inittab does not contain the lines below.\n- Append to the file at `/etc/inittab` the following lines\n\n```console\n# Start the aware process\nAWAR:2345:respawn:/usr/bin/env AWAREPATH=/etc/AWARE python3 /etc/AWARE/main.py\n```\n\n------------------\nExample Configuration:\n------------------\npyAWARE has example configuration files available to use through deployment. In the event of an installation of pyAWARE,\npyAWARE will place the configuration files at the base of your python deployment in a folder called `pyaware_example_config`.\n\n-----\nUsage\n-----\npyAWARE uses config files to take inputs into the program. These are read in on pyAWARE boot and will require a restart\nto the program in order for any changes to occur. The config files are written in yaml and are required to be in a\nspecific folder structure. All config files should be placed in /etc/AWARE (on Linux).\n\n### Folder Structure\nA generic folder structure is shown below that details the path each config file should be found in. Starting at the \nAWAREPATH i.e. `/etc/AWARE` (on Linux).\n```console\n.\n├── config\n|   ├── connection.yaml\n|   ├── gateway.yaml\n|   └── translation.yaml\n└── credentials\n    ├── google_roots.pem\n    └── rsa_private.pem\n```\n### Gateway Config (gateway.yaml)\nGateway config is the heart of pyAWARE and is the config file responsible for using pyAWARE's core features. An example \ngateway.yaml file is shown below,\n```yaml\naware_version: manual\nscheduled_restart:\n  hour: 14\ndatabase:\n  max_size: 500MB\n  memory: true\n#  relative_directory: db\n#  absolute_directory: \"C:\\dev\\Ampcontrol IOT\\Device Management\\Deployments\\tempdb\"\nbacklog_enable: true\ncommunication:\n  - name: ...\n    type: ...\n    version: 1\n    params:\n      ...\ndevices: [...]\n```\n\n#### Options\n- **aware_version** - Specifies what pyAWARE version to use either put in the exact version required or one of the\n  options below. Defaults to *latest*. NOTE: To update the system requires internet access. \n      - *manual* - pyAWARE will not attempt to update.\n      - *latest* - pyAWARE will attempt to update to the latest version.\n- **scheduled_restart** - Specifies if pyAWARE should restart after a period of time. Defaults to never restart.\n     - *hour* - Integer specifying the time in hours when pyAWARE should restart after starting up.\n- **database** - Specifies a database to backup unsent MQTT data. Defaults to initialising a 500MB database using in \n  memory SQLite. Will only use one of the memory options below with the following priority *memory* -> \n  *absolute_directory* -> *relative_directory*.\n     - *max_size* - Maximum size of the database in the format *XXXMB*.\n     - *memory* - Specifies pyAWARE to use in memory SQLite for intialising the database. Value is to be *true* or *false*\n     - *absolute_directory* - Specifies the absolute directory.\n     - *relative_directory* - Specifies the relative directory. Identifies the folder structure from the AWAREPATH.\n- **backlog_enable** - Specifies whether or not to use the backlog to retain MQTT messages if the broker can not be \n  reached. This defaults to *false*. Value is to be *true* or *false*.   \n- **communication** - Specifies the communication options required in the current deployment. \n      - *name* - Name of the communication. This is a config only reference to be used throughout the config file.\n      - *type* - Type of pyAWARE supported communication. \n      - *version* - Version of the communication method to be used. \n      - *params* - Parameters to be passed to the communication. These are communication specific and are detailed in\n      [Communication Parameters](#markdown-header-communication-parameters).\n- **devices** - Specifies the devices that are currently in use by communication reference name. This is written in \nconfig as an array of names. This is currently only required by the cloud MQTT.\n##### Communication Types\nCommunication types describe servers, clients and devices that make up the core of pyAWARE. The types of communication \nand their config [parameters](#markdown-header-communication-parameters) will be specified here. \n\n\n- **modbus_rtu** - Pymodbus' Modbus RTU Serial Client.\n    - Required:\n        - *port* - Name of the serial port to use. i.e. COM# (for windows) OR /dev/ttyS# (for linux), where # is the number \n        of the port.\n        - *stopbits* - Number of stop bits.\n        - *parity* - Type of parity. e.g. 'N' for None, 'E' for Even Or 'O' for Odd.\n        - *baudrate* - The baudrate of the communication.\n    - Optional:  \n        - *bytesize* - The number of bits in a byte of serial data (defaults to 8).\n        - *timeout* - The timeout for loss of communication in seconds (defaults to 3 s).\n- **modbus_rtu2** - AioModbus' Modbus RTU Serial Client.\n    - Required:\n        - *port* - Name of the serial port to use. i.e. COM# (for windows) OR /dev/ttyS# (for linux), where # is the number \n          of the port.\n        - *stopbits* - Number of stop bits.\n        - *parity* - Type of parity. e.g. 'N' for None, 'E' for Even Or 'O' for Odd.\n        - *baudrate* - The baudrate of the communication.\n    - Optional:  \n        - *bytesize* - The number of bits in a byte of serial data (defaults to 8).\n        - *default_unit_id* The modbus unit id to use if there is no unit id present on the child device to this client\n          (defaults to 0).\n- **modbus_tcp** - Pymodbus' Modbus TCP Client.\n    - Required:\n        - *host* - Hostname / IP address of the client.\n    - Optional:\n        - *port* - Port to set up the client connection (defaults to 502).\n        - *client_port* - Port of the connected device (defaults to 0 or listen on all ports).\n- **modbus_tcp2** - AioModbus' Modbus TCP Client.\n    - Required:\n        - *host* - Hostname / IP address of the client.\n    - Optional:\n        - *port* - Port to set up the client connection (defaults to 502).\n        - *client_port* - Port of the connected device (defaults to 0 or listen on all ports).\n        - *auto_reconnect_after* - Time to automatically reconnect to the client on a disconnect event in seconds \n          (defaults to None i.e. does not try to reconnect). \n        - *default_timeout* - Timeout from a client to disconnect in seconds (defaults to 0.2).\n        - *max_active_request* - Maximum number of requests on which to disconnect (defaults to None).\n        - *default_unit_id* - The modbus unit id to use if there is no unit id present on the child device to this client\n          (defaults to 0).\n- **modbus_tcp_server** - Pymodbus' Modbus TCP Server.\n    - Required:\n        - *host* - Modbus TCP Server Hostname / IP Address.\n        - *server_id* - ID of the server as a string. This is to be used to map devices into the server.\n    - Optional:\n        - *port* - Port to set up the server connection (defaults to 502).\n        - *coil_register_blocks* - The contiguous blocks of coil registers to intialise the server as arrays of ints written \n          in the form [start, end], (defaults to None i.e. initialises 0-65535 with zeros).\n        - *discrete_register_blocks* - The contiguous blocks of discrete registers to intialise the server as arrays of ints \n          written in the form [start, end], (defaults to None i.e. initialises 0-65535 with zeros).  \n        - *holding_register_blocks* - The contiguous blocks of holding registers to intialise the server as arrays of ints \n          written in the form [start, end], (defaults to None i.e. initialises 0-65535 with zeros).\n        - *input_register_blocks* - The contiguous blocks of input registers to intialise the server as arrays of ints \n          written in the form [start, end], (defaults to None i.e. initialises 0-65535 with zeros).\n- **sp_pro** - SP PRO Serial Client using AioSPPRO. Communicates with Selectronic devices that speak the SPPRO Protocol.\n    - Required:\n        - *port* - Name of the serial port to use. i.e. COM# (for windows) OR /dev/ttyS# (for linux), where # is the number \n          of the port.\n        - *stopbits* - Number of stop bits.\n        - *parity* - Type of parity. e.g. 'N' for None, 'E' for Even Or 'O' for Odd.\n        - *baudrate* - The baudrate of the communication.\n    - Optional:\n        - *bytesize* - The number of bits in a byte of serial data (defaults to 8).\n        - *default_timeout* - The timeout for loss of communication in seconds (defaults to 0.2 s).\n        - *password* - The SP PRO password to use to log into the unit (defaults to Selectronic SP PRO).\n        - *auto_reconnect_after* - Time to automatically reconnect to the client on a disconnect event in seconds \n          (defaults to None i.e. does not try to reconnect).\n        - *retry_failed_login* - Flag to retry a failed login attempt on the SP PRO (defaults to True).\n        - *login_attempts* - The number of attempts to try and login to the SP PRO (defaults to 3). \n- **imac2_auto_detect** - Establishes the IMAC 2 Protocol and begins the auto detection process. Also performs topology \n  functionality.\n    - Required:\n        - *client_ser* - Modbus RTU Serial Client that the IMAC 2 is using to make connection.\n        - *client_eth* - Modbus TCP Client that the IMAC 2 is using to make connection.\n    - Optional:\n        - *unit* - Modbus unit number of the iMAC (defaults to 1).\n- **translator** - The translator controller. This translates data from / to devices from / to servers. Uses a separate \n  [translation config file](#markdown-header-translation-config-translationyaml) to determine mappings.\n    - Required:\n        - *config* - Translation configuration file.\n        - *devices* - List of device ID's to be used.\n        - *servers* - List of server ID's to be used.\n- **modbus_device** - A generic modbus device definition.\n    - Required:\n        - *client* - Modbus Client as defined in previous communication. i.e. Either modbus_rtu. modbus_rtu2, modbus_tcp\n        modbus_tcp2.\n        - *device_id* - Device Identifier to use throughout the program. This has to be the same name as the cloud id for \n        cloud implementation.\n        - *config* - Device Config file. This can either be a file defined in pyAWARE (located in src/pyaware/devices) or a\n        self defined config file.\n    - Optional:\n        - *unit* - Modbus Unit ID (defaults to 0).\n        - *address_shift* - Integer value to shift all device parameter addresses from the ones defined in config \n          (defaults to 0).\n        - *poll_intervals* - Sets the interval of the poll in seconds to read data from the device. The device config file \n          may have different polls, so the interval has to be defined as poll specific in the form {\"poll1\": 1} (defaults to \n          None).\n- **comap_device** - A ComAP device that is inherited from Modbus device and has all the parameters defined within that \n  along with the additional functionality to execute ComAp device.\n    - Required:\n        - Refer to required parameters of modbus_device.\n    - Optional:\n        - Refer to optional parameters of modbus_device.\n- **sp_pro_device** - A Selectronic, SP PRO device.\n    - Required:\n        - *client* - SP PRO serial client as defined in previous communication i.e. sp_pro\n        - *device_id* - Device Identifier to use throughout the program. This has to be the same name as the cloud id for \n        cloud implementation.\n        - *config* - Device Config file. This can either be a file defined in pyAWARE (located in src/pyaware/devices) or \n          a self defined config file.\n    - Optional:\n        - *poll_intervals* - Sets the interval of the poll in seconds to read data from the device. The device config file \n          may have different polls, so the interval has to be defined as poll specific in the form {\"poll1\": 1} (defaults to \n          None). \n- **solar_cube** - Solar Cube deployment. Establishes internal heartbeat and internal mqtt watchdogs for cloud mqtt.\n    - Required:\n        - *device_id* - Device Identifier to use throughout the program. This has to be the same name as the cloud id for \n        cloud implementation.\n    - Optional:\n        - *cloud_broker* - Instance of the cloud MQTT broker for the watchdogs to monitor.\n\n##### Communication Parameters\nEach communication type has a list of parameters. These parameters are specific to the communication option chosen \n(e.g. A device may need a device_id as an input and will error until you define this in config). \nEach parameter has a type and value. Parameter types tell PyAWARE how to interpret the parameter value and the \nparameter value is what you would like to set as that parameter. As you will see this can be either a specified value, \nfunction or reference. Example config can be seen below detailing how to write this in config,\n```yaml\ncommunication:\n  - name: ref_comms_name # Comms protocol e.g. modbus or similar\n    ...\n  - name: ref_dev_name # Device defintion e.g. power-meter\n    ...\n  - name: ...\n    type: ...\n    # This is an example communication option which makes use of each different communication parameter type\n    params: \n      param1: \n        type: value\n        value: \"This is my parameter value\"\n      param2:\n        type: ref_comms\n        value: ref_comms_name # This is the reference name of a comms protocol in the config file\n      param3:\n        type: ref_path\n        value: ref/path/from/AWAREPATH # This is the reference path from AWAREPATH\n      param4:\n        type: ref_device\n        value: ref_dev_name # This is the reference name of a device in the config file\n      param5: \n        type: ref_comms_param \n        value: ref_comms_name\n        key: ref_comms_param_name # Parameter name from the reference device object\n      param6:\n        type: ref_translation_config\n        value: translation/location # Location of the translation.yaml file from AWAREPATH\n      param7:\n        type: ref_translation\n        value: [...] # List of reference config names to pass through to translation\n      param8: \n        type: ref_mac_address\n        value: ethx # Adapter name to get MAC Address from\n```\n\n- **value** - The most common option. This is just a value that is interpreted raw. It can be a string, number, etc.\n- **ref_comms** - Reference to a communication protocol elsewhere in the config file. e.g. If you have a modbus TCP \n  client defined with the name 'modbus_client' this parameter will take the object instantiated during that process as \n  the reference parameter.\n- **ref_path** - This parameter is interpreted as a path from the AWAREPATH. e.g. If you defined a path 'location/here'\n  the path this parameter becomes is AWAREPATH/location/here.\n- **ref_device** - Reference to a device definition elsewhere in the config file. e.g. If you have a modbus device \n  defined with the name 'modbus_device_1' this parameter will take the object instantiated during that process as the \n  reference parameter.\n- **ref_comms_param** - Reference to a parameter belonging to a communication protocol elsewhere in the config file. \n  e.g. If you have a modbus TCP client defined with the name 'modbus_client' and it has a parameter called 'client_id' \n  this parameter will take the object instantiated during that process as the reference object and retrieve the \n  parameter with the name defined in *key* which in this case lets say 'client_id' and store it as that parameter on the \n  current item.  \n- **ref_translation_config** - Reference to the location of the translation config file (*translation.yaml*). e.g. If \n  you defined a path 'location/here' the path this parameter becomes is AWAREPATH/config/location/here.\n- **ref_translation** - List of object references in the current config file to put into a parameter. \n- **ref_mac_address** - The adapter name that you wish to retrieve the parameter mac address from. This has to be the \n  name your platform has given the adapter and has to be a valid adapter on the machine.\n  \n### MQTT Connection Config (connection.yaml)\nConnection.yaml specifies the all the requirements for connecting to an appropriate mqtt broker. This is separated from\ngateway.yaml in order to provide robustness to failure when a user uploads an invalid configuration, \npyaware will still connect in order to receive a new configuration.\nAn example connection.yaml file is shown \nbelow,\n```yaml\ndefaults: 'gcp'\n# feature_flags:\n#   feature_mqtt: true\ndevice-id: 'gateway-id'\nproject_id: 'project-id'\nregistry_id: 'registry-id'\ncloud_region: 'gcp-region'\n```\n#### Options\n- **defaults** - Chooses which base configuration defaults to use\n    - *gcp* - Use the Google Cloud Defaults\n    - *local* - Use the local on-premises mqtt broker default\n- **feature_flags** - Set of core pyAWARE features to enable or disable.\n    - *feature_mqtt* - Enables or disables the use of an mqtt broker. Defaults to *true*.\n\nAll options can be provided in the dynamic form as can be specified [Communication Parameters](#markdown-header-communication-parameters).. \nNote: Any parameters that rely on information retrieved from devices in gateway.yaml will delay the final connection to \nthe broker until all of gateway.yaml is processed.\nAny invalid gateway.yaml will then cause connection.yaml to not be processed and pyaware never connecting to the broker.\n  \n##### Local Configurations\n###### Required\n- **device_id** - Device ID of the device that is required to be connected to.\n  \n###### Optional\n- **gateway_id** - Gateway ID to publish / subscribe to via MQTT (defaults to \"\").\n- **serial_number** - Serial Number to publish / subscribe to via MQTT (defaults to \"\").\n- **authentication_required** - Determines whether authentication is required to connect to the Local Broker (defaults\n  to False).\n- **host** - Hostname or IP address of the local MQTT broker (defaults to 127.0.0.1).\n- **port** - The port number of the Local MQTT broker (defaults to 1883).\n- **keepalive** - The number of seconds to keep the MQTT connection alive (defaults to 60).\n- **bind_address** - The IP address of a local network interface to bind this client to, assuming multiple interfaces \n  exist (defaults to \"\").\n- **clean_session** - A boolean that determines the client type. If True, the broker will remove all information about \n  this client when it disconnects. If False, the client is a durable client and subscription information and queued \n  messages will be retained when the client disconnects (defaults to False).\n- **parsers** - A dictionary containing additional MQTT parsers for the broker. A full list of the current parsers are \n  found in src\\pyaware\\mqtt\\config as default_local_parsers() (defaults to the list of local parsers). e.g. \n  {\"topic\": \"my/MQTT/topic/{variable_name}/here\"}\n- **disable_parsers** - A list containing the keys representing the MQTT parsers to remove on the broker. A full list \n  of the current parsers are found in src\\pyaware\\mqtt\\config as default_local_parsers().\n- **subscribe_qos** - Topic subscription qos (defaults to 1).\n- **publish_qos** - Topic publish qos (defaults to 1).\n- **token_life** - Life of an MQTT token in seconds (defaults to 0).\n- **batch** - Batch MQTT messages enable (defaults to True).\n- **batch_hold_off** - Time window to batch MQTT messages in seconds (defaults to 5).\n- **max_message_queue_size** - Maximum number of messages to have in the queue (defaults to 100).\n- **max_in_flight_messages** - Maximum number of in-flight MQTT messages (defaults to 100).\n- **backlog_enable** - Enable to backlog mqtt messages if not sent to MQTT broker (defaults to false).\n- **parsers_default** - Select the topic parser defaults that can be overridden by parsers. (defaults to 'local')\n\n##### GCP Configurations\n###### Required\n- **device_id** - Device ID of the device as configured in GCP IOT Core\n\n###### Optional\n- **project_id** - Project ID on google cloud platform (defaults to aware-iot).\n- **registry_id** - Registry ID on google cloud platform (defaults to aware-iot).\n- **token_life** - Life of an MQTT token in seconds (defaults to 60).\n- **cloud_region** - Cloud region on google cloud platform (defaults to asia-east1). \n- **host** - Hostname or IP address of the GCP broker (defaults to mqtt.googleapis.com).\n- **port** - The port number of the Local MQTT broker (defaults to 8883).\n- **keepalive** - The number of seconds to keep the MQTT connection alive (defaults to 60).\n- **bind_address** - The IP address of a local network interface to bind this client to, assuming multiple interfaces \n  exist (defaults to \"\").\n- **clean_session** - A boolean that determines the client type. If True, the broker will remove all information about \n  this client when it disconnects. If False, the client is a durable client and subscription information and queued \n  messages will be retained when the client disconnects (defaults to False).\n- **parsers** - A dictionary containing additional MQTT parsers for the broker. A full list of the current parsers are \n  found in src\\pyaware\\mqtt\\config as default_gcp_parsers() (defaults to the list of local parsers). e.g. \n  {\"topic\": \"my/MQTT/topic/{variable_name}/here\"}\n- **disable_parsers** - A list containing the keys representing the MQTT parsers to remove on the broker. A full list \n  of the current parsers are found in src\\pyaware\\mqtt\\config as default_gcp_parsers().  \n- **private_key_path** - Path to the private key file \"rsa_private.pem\" (defaults to \n  AWAREPATH/credentials/rsa_private.pem). \n- **ca_cert_path** - Path to the Google Cloud Platform ca certificate file \"google_roots.pem\" (defaults to \n  AWAREPATH/credentials/google_roots.pem).\n- **authentication_required** - Determines whether authentication is required to connect to the Local Broker (defaults\n  to False).\n- **subscribe_qos** - Topic subscription qos (defaults to 1).\n- **publish_qos** - Topic publish qos (defaults to 1).\n- **batch** - Batch MQTT messages enable (defaults to True).\n- **batch_hold_off** - Time window to batch MQTT messages in seconds (defaults to 5).\n- **max_message_queue_size** - Maximum number of messages to have in the queue (defaults to 100).\n- **max_in_flight_messages** - Maximum number of in-flight MQTT messages (defaults to 100).\n- **backlog_enable** - Enable to backlog mqtt messages if not sent to MQTT broker (defaults to false).\n- **parsers_default** - Select the topic parser defaults that can be overridden by parsers. (defaults to 'gcp')  \n\n### Translation Config (translation.yaml)\nPyAWARE can also be used to host data in a server. In order to pass data from / to devices from / to servers, pyAWARE \nuses this translation configuration to determine how the data is to be mapped from point A to point B and vice versa. \nAn example translation.yaml is shown below. This shows how a server 'server_1' can pass data to / from a device \n'device_1'.\n```yaml\nserver-translation:\n  server_1:\n    devices:\n      device_1:\n        transformations:\n          - rename_keys:\n              definition:\n                reg-0: zero\n                reg-1: one\n                reg-2: two\n                reg-3: three\n                reg-4: four\n                reg-5: five\n                reg-6: six\n                reg-7: seven\n                reg-8: eight\n                reg-9: nine\n    registers:\n      holding: \n        zero:\n          form:\n            type: ParamCType\n            address: 1000\n            idx: zero\n            data_type: ushort    \n        one:\n          form:\n            type: ParamCType\n            address: 1001\n            idx: one\n            data_type: ushort  \n        two:\n          form:\n            type: ParamCType\n            address: 1002\n            idx: two\n            data_type: ushort   \n        three:\n          form:\n            type: ParamCType\n            address: 1003\n            idx: three\n            data_type: ushort   \n        four:\n          form:\n            type: ParamCType\n            address: 1004\n            idx: four\n            data_type: ushort\n        five:\n          form:\n            type: ParamCType\n            address: 1005\n            idx: five\n            data_type: ushort\n        six:\n          form:\n            type: ParamCType\n            address: 1006\n            idx: six\n            data_type: ushort\n        seven:\n          form:\n            type: ParamCType\n            address: 1007\n            idx: seven\n            data_type: ushort\n        eight:\n          form:\n            type: ParamCType\n            address: 1008\n            idx: eight\n            data_type: ushort\n        nine:\n          form:\n            type: ParamCType\n            address: 1009\n            idx: nine\n            data_type: ushort\ndevice-translation:\n  device_1: \n    servers:\n      server_1:\n        transformations:\n          - rename_keys:\n              definition:\n                zero: reg-0\n                one: reg-1\n                two: reg-2\n                three: reg-3\n                four: reg-4\n                five: reg-5\n                six: reg-6\n                seven: reg-7\n                eight: reg-8\n                nine: reg-9\n```\nThere are two key parts to this config file. We have a server translation that maps how data is recieved from the device\nand placed into the server. We also have a device translation which does the opposite i.e. takes data from a server and\nmaps it back to the device. This relationship can be from any number of servers to/from any number of devices.\n#### Registers\nThis defines how the selected server will layout its registers and map each of its parameters to an address. **NOTE**: \nThis is similar how devices layout their parameters. An example is below,\n```yaml\n...\nregisters:\n      holding: \n        zero:\n          form:\n            type: ParamCType\n            address: 1000\n            idx: zero\n            data_type: ushort    \n        one:\n          form:\n            type: ParamCType\n            address: 1001\n            idx: one\n            data_type: ushort  \n        two:\n          form:\n            type: ParamCType\n            address: 1002\n            idx: two\n            data_type: ushort   \n        three:\n          form:\n            type: ParamCType\n            address: 1003\n            idx: three\n            data_type: ushort   \n        four:\n          form:\n            type: ParamCType\n            address: 1004\n            idx: four\n            data_type: ushort\n        five:\n          form:\n            type: ParamCType\n            address: 1005\n            idx: five\n            data_type: ushort\n        six:\n          form:\n            type: ParamCType\n            address: 1006\n            idx: six\n            data_type: ushort\n        seven:\n          form:\n            type: ParamCType\n            address: 1007\n            idx: seven\n            data_type: ushort\n        eight:\n          form:\n            type: ParamCType\n            address: 1008\n            idx: eight\n            data_type: ushort\n        nine:\n          form:\n            type: ParamCType\n            address: 1009\n            idx: nine\n            data_type: ushort\n...\n```\nThe parameter directly under 'registers' is the type of register to be defined, there are four registers in a Modbus\nregisters to be defined with the names below. Under each register type here is a list of server parameters with their \nform which includes the type of parameter, address and data type. **NOTE**: Each register must have been defined already\nunder the server in gateway.yaml. \n\n\n- *holding* - Modbus Holding Register\n- *input* - Modbus Input Register\n- *coil* - Modbus Coil Register\n- *discrete* - Modbus Discrete Register  \n\n#### Transformations\nThis describes how the data is to be transformed before entering either the server or the device depending on if it is\ndefined under the server or device. The list of transformations is described below,\n\n\n- **rename_keys** - Takes a dictionary of key mapping to map parameters by.\n```yaml\n...\ntransformations:\n  ...\n  - rename_keys: \n    definitions:\n      device_or_server_param_name: new_server_or_device_param_name\n      ...\n```  \n- **remove_keys** - Takes a set of keys to be removed from the param pool. \n```yaml\n...\ntransformations:\n  ...\n  - remove_keys: \n    definitions:\n      - device_or_server_param_name_to_remove\n      ...\n``` \n- **scale_values** - Takes a dictionary of parameter-scale value mapping. Returns a dictionary of scaled parameters.\n```yaml\n...\ntransformations:\n  ...\n  - scale_values: \n    definitions:\n      device_or_server_param_name_to_scale: scale_factor\n      ...\n``` \n- **multiply_params** - Takes a dictionary of parameter-parameter mapping. Returns a dictionary of multiplied \n  parameters.\n```yaml\n...\ntransformations:\n  ...\n  - multiply_params:\n    definitions:\n      device_or_server_param_to_multiply: [device_or_server_param_to_multiply]\n      # We can also multiply a param by itself by below\n      device_param1: [device_param1]\n      # Or between multiple params and itself\n      device_param2: [device_param2, device_param1, device_param3]\n      ...\n```  \n- **group_params** - Takes a dictionary of the parameter name to map to and a list of param names to group.\n```yaml\n...\ntransformations:\n  ...\n  - group_params:\n    definitions:\n      device_or_server_param_to_map_top_level: [device_or_server_param1, device_or_server_param2, ..., \n                                                device_or_server_paramN]\n      ...\n```  \n\n### System commands\nThere are system commands that target the gateway instead of the attached devices.\nThey can be sent by using the usual command topic under the subtopic system.\nEg.\n/devices/gateway1/events/commands/system/...\n\n#### Live Debugging /system/debug\npyAWARE supports live debug logging.\nThe purpose of this is to increase the amount of logging detail on an already running instance.\nThis is managed through the MQTT connection through commands.\n\nThe content of the message will be a JSON list of values. Any values that are not present will be disabled.\nEg. sending [] payload will turn off runtime logging. If any logging option is enabled then log level DEBUG will be enabled throughout the program.\nThe options available in the message are\n\n- all : Turns on all available logging\n- core: Will turn the global debugging level to DEBUG instead of INFO. \nThis option is enabled by default when any other option is set.\nThis will update std out and the AWARE.log file with the new debug messages.\n- modbus : Turns on modbus logging. This will be present in separate files from the AWARE.log\n- mqtt: Turns on mqtt logging. This will be present in separate files from the AWARE.log\n- triggers : Turns on the triggers logging. Provides logging for each run of the triggers against the new data.\n- state_changes: Turns on the state changes. This will provide logging for all changes to the current state, event state and send state of each device. This will increase the performance impact as it tries to form \ncopies of the current state and new state in order to provide more insightful logs.\n\n#### Stop /system/stop\nStops the pyaware process. This will result in a restart of pyaware if it is an enabled linux service.\nThe payload is ignored.\n\n-----------------\nDeploying Gateway\n-----------------\nFor any new deployment on an embedded device, an image needs to be generated. All images for deployment can be found \non [Subversion](http://prwivsvn0.primatec.local/svn/automation/Ampcontrol%20IOT%20Images).\n\nAfter the device is set up with all the correct dependencies (as per offline installation), \nan image should be stored for reuse. This can be done by doing the following.\n\n[Generating reusable SD card image](https://www.howtogeek.com/341944/how-to-clone-your-raspberry-pi-sd-card-for-foolproof-backup/).\n\n[Setting up an new SD card with the image](https://www.howtogeek.com/170794/ask-htg-how-can-i-reclaim-the-full-capacity-of-an-sd-card/).\n\nOnce the image is loaded, test your new deployment by, \n- Inserting the new SD card / Booting the device with the new image.\n- Installing the latest pyAWARE as per installation instructions.\n- Copying over the new config files.\n- Generating credentials for Google Cloud and putting them in /etc/AWARE/credentials\n- Validate it works by running python -m pyaware /etc/AWARE\n- Restart IOT Device\n\n--------------------\nCreating new devices\n--------------------\nDevice configs are stored in src/pyaware/devices.\nAn example device config can be seen below,\n```yaml\nsources:\n  poll:\n    type: poll\n    handle: holding\n    poll_interval: 0\n    blocks:\n      - [0, 10]\n  poll_input:\n    type: poll\n    handle: input\n    poll_interval: 5\n    blocks:\n      - [0, 10]\nparameters:\n  reg-0:\n    source: poll\n    form:\n      type: Param\n      address: 0\n      idx: reg-0\n    triggers:\n      process:\n        send:\n          - [state]\n  reg-1:\n    source: poll\n    form:\n      type: Param\n      address: 1\n      idx: reg-1\n    triggers:\n      process:\n        send:\n          - [state]\n  reg-2:\n    source: poll\n    form:\n      type: Param\n      address: 2\n      idx: reg-2\n    triggers:\n      process:\n        send:\n          - [value, 50]\n  reg-3:\n    source: poll\n    form:\n      type: Param\n      address: 3\n      idx: reg-3\n    triggers:\n      process:\n        send:\n          - [time, 5]\n  reg-4:\n    source: poll\n    form:\n      type: Param\n      address: 4\n      idx: reg-4\n    triggers:\n      process:\n        send:\n          - [state]\n          - [time, 60]\n  reg-5:\n    source: poll\n    form:\n      type: Param\n      address: 5\n      idx: reg-5\n    triggers:\n      process:\n        send:\n          - [state]\n          - [time, 60]\n  reg-6:\n    source: poll\n    form:\n      type: Param\n      address: 6\n      idx: reg-6\n    triggers:\n      process:\n        send:\n          - [state]\n          - [time, 60]\n  reg-7:\n    source: poll\n    form:\n      type: Param\n      address: 7\n      idx: reg-7\n    triggers:\n      process:\n        send:\n          - [state]\n          - [time, 60]\n  reg-8:\n    source: poll\n    form:\n      type: Param\n      address: 8\n      idx: reg-8\n    triggers:\n      process:\n        send:\n          - [state]\n          - [time, 60]\n  reg-9:\n    source: poll\n    form:\n      type: Param\n      address: 9\n      idx: reg-9\n    triggers:\n      process:\n        send:\n          - [state]\n          - [time, 60]\n   reg-input-0:\n     source: poll_input\n     form:\n       type: Param\n       address: 0\n       idx: reg-input-0\n     triggers:\n       process:\n         send:\n           - [state]\n           - [time, 60]\n   reg-input-1:\n     source: poll_input\n     form:\n       type: Param\n       address: 1\n       idx: reg-input-1\n     triggers:\n       process:\n         store:\n           - [always]\n         send:\n           - [state]\n           - [time, 60]\n   reg-input-2:\n     source: poll_input\n     form:\n       type: Param\n       address: 2\n       idx: reg-input-2\n     triggers:\n       process:\n         store:\n           - [always]\n         send:\n           - [state]\n           - [time, 60]\n   reg-input-3:\n     source: poll_input\n     form:\n       type: Param\n       address: 3\n       idx: reg-input-3\n     triggers:\n       process:\n         store:\n           - [always]\n         send:\n           - [state]\n           - [time, 60]\n   reg-input-4:\n     source: poll_input\n     form:\n       type: Param\n       address: 4\n       idx: reg-input-4\n     triggers:\n       process:\n         store:\n           - [always]\n         send:\n           - [state]\n           - [time, 60]\n   reg-input-5:\n     source: poll_input\n     form:\n       type: Param\n       address: 5\n       idx: reg-input-5\n     triggers:\n       process:\n         store:\n           - [always]\n         send:\n           - [state]\n           - [time, 60]\n   reg-input-6:\n     source: poll_input\n     form:\n       type: Param\n       address: 6\n       idx: reg-input-6\n     triggers:\n       process:\n         store:\n           - [always]\n         send:\n           - [state]\n           - [time, 60]\n   reg-input-7:\n     source: poll_input\n     form:\n       type: Param\n       address: 7\n       idx: reg-input-7\n     triggers:\n       process:\n         store:\n           - [always]\n         send:\n           - [state]\n           - [time, 60]\n   reg-input-8:\n     source: poll_input\n     form:\n       type: Param\n       address: 8\n       idx: reg-input-8\n     triggers:\n       process:\n         store:\n           - [always]\n         send:\n           - [state]\n           - [time, 60]\n   reg-input-9:\n     source: poll_input\n     form:\n       type: Param\n       address: 9\n       idx: reg-input-9\n     triggers:\n       process:\n         store:\n           - [always]\n         send:\n           - [state]\n           - [time, 60]\ntransformations:\n  - scale_values:\n      definition:\n        reg-input-9: 3.052e-5\n```\nThere are a few key areas of device config, sources, transformations & parameters.\n### Sources\nSources represent all of the device blocks to be polled along side the names of each poll. Under each poll we have the\nfollowing parameters to define,\n\n\n- Required\n    - *blocks* - This defines each contiguous block of addresses to read for each device in the form \n    [start_address, end_address].\n- Optional:\n    - *poll_interval* - The poll interval in seconds in which to read this data (Defaults to 5).\n### Transformations\nThese are identical to transformations defined in translation.yaml except they only apply to the device and the result \nwill be sent directly to MQTT. See translation.yaml for more details.\n### Parameters\nThese are the core of each device, they detail the parameters of each device, what data types the parameters are made \nup of and what address(es) they belong to.\n\n- Conditionally Required:\n    - *source* - The poll this parameter currently belongs to. Required on at least the parent parameter.\n    - *form* - What the parameter looks like. These are defined in [parameter types](#parameter-types). \n      Required on at least the children parameters.\n    \n- Optional:\n    - *children* - Parameters that are related to the parent parameter. See [parameter hierarchy](#parameter-types)\n#### Parameter Types \n- *Param* - Raw parameter value taken from a single address. Scaling and rounding to the significant figures is \n  provided.\n    - Required:\n        - *address* - The start address of the parameter. **NOTE**: This is required to be within the source address blocks.  \n        - *idx* - The actual name of the parameter. \n     - Optional:    \n        - *scale* - Factor to multiply the parameter value with (Defaults to 1).\n        - *significant_figures* - Number of significant figures to round to (defaults to None).\n- *ParamStatic* - This is a 'virtual' constant parameter where the user defines its value and it is not read from the \n  device.\n    - Required:\n        - *value* - Value of the parameter.\n        - *idx* - The actual name of the parameter. \n- *ParamBoolArray* - Converts the list of addresses to an array of integer values either 1 or 0. Gives the parameter \n  name 'idx' to all these values.\n    - Required:\n        - *address* - The addresses of the parameter as a block. **NOTE**: This is required to be within the source address \n          blocks.  \n        - *idx* - The actual name of the parameter. \n        - *length* - Length of the array.\n- *ParamEnumBoolArray* - The table initialises all parameters in it to False. If a parameter name is found in the list\n  of addresses it then sets this to false until a terminator is reached (if one is provided) or it ends the collection.\n    - Required:\n        - *address* - The addresses of the parameter as a block. **NOTE**: This is required to be within the source address \n          blocks.\n        - *table* - Dictionary of each number with its corresponding value.\n    - Optional:  \n        - *terminator* - Character to stop reading the addresses on (Defaults to None).\n- *ParamText* - Converts parameter to text. \n    - Required:\n        - *address* - The start address the parameter is located. \n        - *idx* - The actual name of the parameter. \n        - *length* - Length of the text to read from the start address.\n    - Optional:\n        - *padding* - Padding that the text is padded with from the addresses read (Defaults to b\"\\x00\").\n        - *swap_bytes* - Enable to indicate if the bytes are to be swapped (Defaults to False)\n        - *strip_leading* - Text to strip from the start of the string (Defaults to \"\").\n        - *strip_lagging* - Text to strip from the end of the string (Defaults to \"\").\n- *ParamDict* - Parameter to be decoded as a json object.\n    - Required:\n        - *key* - Parameter key to fetch from the json object.\n        - *idx* - Name to rename the json object.\n    - Optional:\n        - *table* - Table representing the json structure (Defaults to an empty dict)\n- *ParamBits* - Parameter bitmask register. \n  NOTE: This is legacy and should use the hierarchical pattern for new devices that implement the new parameter pattern.\n    - Required:\n        - *address* - The start address the parameter is located. \n        - *bitmask* - A dictionary presenting the bitmask of the parameter written as {0: \"stop\", 1:\"start\", ...}\n    - Optional:\n        - *idx* - Name of the total bitmask register (Defaults to None).\n- *ParamMask* - Applies a mask to the parameter after read. \n    - Required:\n        - *address* - The start address the parameter is located. \n        - *idx* - The actual name of the parameter.\n    - Optional:\n        - *mask* - Mask to apply to the parameter (Defaults to 0xFFFF).\n        - *rshift* - Shifts the bits to the right by the int provided (Defaults to 0).\n- *ParamOffset* - Treats the Parameter as a ParamMask but also provides an offset.  \n    - Optional:\n        - *offset* - Offset to apply to the parameter (Defaults to 0).\n- *ParamMaskBool* - Treats the Parameter as a ParamMask but returns all the values as bools instead of ints.\n- *ParamMaskScale* -  Applies a mask to the parameter after read and scales the result.\n    - Required: \n        - *address* - The start address the parameter is located. \n        - *idx* - The actual name of the parameter.\n    - Optional:\n        - *mask* - Mask to apply to the parameter (Defaults to 0xFFFF).\n        - *rshift* - Shifts the bits to the right by the int provided (Defaults to 0).\n        - *scale* - Scale factor to scale the parameter by (Defaults to 1).\n        - *significant_figures* - Number of significant figures to round to (defaults to None).\n- *ParamLookup* - For the value read from the address will apply the result to a table and return the result similar to\n  and Enum.\n    - Required\n        - *address* - The start address the parameter is located. \n        - *idx* - The actual name of the parameter.\n        - *table* - Dictionary of each number with its corresponding value.\n        - *table* - Inversed dictionary of each number with its corresponding value.\n    - Optional:\n        - *mask* - Mask to apply to the parameter (Defaults to 0xFFFF).\n        - *rshift* - Shifts the bits to the right by the int provided (Defaults to 0).\n- *ParamCType* - This is used for most Parameters, this enforces a parameter to be a particular data type from the \n  registers provided and returns an exception if the data binding cannot be performed.\n    - Required:\n        - *type* - ParamCType\n        - *address* - The start address of the parameter. **NOTE**: This is required to be within the source address blocks.  \n        - *idx* - The actual name of the parameter. \n    - Optional:    \n        - *data_type* - The data type of the parameter (Defaults to ushort). The data types are detailed \n          [here](https://docs.python.org/3/library/struct.html#format-characters). These types are written as below,\n          - *char*\n          - *schar* \n          - *bool* \n          - *short*\n          - *ushort*\n          - *int*\n          - *uint*\n          - *long*\n          - *ulong*\n          - *longlong*\n          - *ulonglong*\n          - *float*\n          - *double*\n          - *char[]*\n        - *byte_order* - Order of each byte (Defaults to >) e.g. '>' big endian, '<' little endian. \n        - *word_order* - Order of each word (Defaults to >) e.g. '>' big endian, '<' little endian.\n- *ParamCTypeScale* - Treats the parameter as a ParamCType but applies scaling to the parameter after decode and removes\n  scaling during the encode.\n    - Optional:\n        - *scale* - Scale factor to scale the parameter by (Defaults to 1).\n- *ParamCTypeScaleModulus* - Treats the parameter as a ParamCType but applies scaling and modulus to the parameter after \n  decode and removes scaling and modulus operations during the encode.\n    - Optional:\n        - *scale* - Scale factor to scale the parameter by (Defaults to 1).\n        - *modulus* - Modulus to apply (Defaults to 65535).\n        - *invert_on_overflow* - Enable to invert the parameter sign on overflow (Defaults to False).\n- *ParamArray* - Treats the parameter as an array of uint16 values from a starting address for a specified count\n    - Required\n        - *address* - The start address the parameter is located. \n        - *idx* - The actual name of the parameter.\n        - *count* - The number of addresses starting at *address* to include in the array.\n    \n### Parameter Hierarchy\n\nParameters can be defined in a hierarchical pattern. This allows you to define parameters that need to be related for\npurposes of managing reads/writes by parameter name. The hierarchy is defined by setting the children on the parent \nparameter. If there are children on the parameter then the form becomes optional. Caution must be made when not \nspecifying the form on the parent as writes to the children parameters will ignore the current state of any \nbits/registers that are not explicitly defined in the heirarchy.\n\nFor example\n```yaml\n  reg-3:\n    source: poll\n    form:\n      type: Param\n      address: 3\n      idx: reg-3\n    children:\n      reg-3-bit-0:\n        form:\n          type: ParamBit\n          address: 3\n          idx: reg-3-bit-0\n          bit: 0\n        triggers:\n          process:\n            send:\n              - [always]\n          write:\n            validators:\n              - trig_type: writable\n      reg-3-bit-1:\n        form:\n          type: ParamBit\n          address: 3\n          idx: reg-3-bit-1\n          bit: 1\n        triggers:\n          write:\n            validators:\n              - trig_type: writable\n      reg-3-bit-2:\n        form:\n          type: ParamBit\n          address: 3\n          idx: reg-3-bit-2\n          bit: 2\n        triggers:\n          write:\n            validators:\n              - trig_type: writable\n    triggers:\n      process:\n#        send:\n#          - [time, 5]\n        send:\n          - [always]\n```\n\nIf the reg-3 initial state is 0xFFFF and a write parameters to reg-3-bit-1 is False, then the register's final state \nwould be 0xFFFD. However, if reg-3 did not have the form specified (capturing the whole register) then the final value \nwould be 0x0005. \n\n### Triggers\nTriggers are applied to parameter data to determine different operations that are required to trigger to certain inputs.\nAn example of triggers can be seen in the sample device parameter file below, \n```yaml\n...\nparameters:\n  reg-0:\n    source: poll\n    form:\n      type: Param\n      address: 0\n      idx: reg-0\n    triggers:\n      process:\n        store:\n          - [always]\n        event:\n          - [state]\n        send:\n          - [state]\n          - [time, 30]\n      write:\n        validators:\n          - trig_type: range\n            min: 0\n            max: 255\n          - trig_type: comparison\n            ref_name: current_state\n            ref_key: mode\n            comp_type: e\n            comp_value: 1  \n          - trig_type: in_list\n            lst:\n              - 0\n              - 1\n      collect:\n        read:\n          - [deadline, 3600]\n...\n```\nThere are three trigger types, [process](#markdown-header-process), [write](#markdown-header-write) and \n[collect](#markdown-header-collect). \n\n#### Process\nProcess triggers are triggers which when called process the parameter data. They can have 3 different states \n(send, event, store). Each process trigger states have different types. Process types describe when these events will \ntrigger.\n\n\n- **Send** - A send state will send the data on this trigger.\n- **Event** - An event state will trigger an event.\n- **Store** - A store state will store the data on this trigger.\n\n##### Process Trigger Types\n- *state* - When the parameter data changes state (i.e. value), this will trigger.\n- *time* - When a specified period of time has passed (in seconds) this will trigger.\n- *delta* - When the parameter data has changed by a specified amount (delta) this will trigger.\n- *always* - This will always trigger when the triggers are fired.\n- *and* - This will perform an and operation on the data. Fires when the result of this operation is true.\n- *comparison* - Compares this parameter with another parameter on the same device. Triggers when the result is true. \nCurrent supported operations are, greater than (g), greater than equal to (ge), less than (l), less than equal to\n  (le), equal (e).\n  \n#### Write\nWrite triggers are triggers which when called write the parameter data to a device. They can have 1 state(validators). \nEach process trigger states have different types. Write types describe when these events will trigger.\n\n\n- **Validators** - Validators will validate the parameter write trigger based on the trigger types passed to it. \n\n##### Write Trigger Types\n- *range* - Triggers when the data to write is within the range specified. \n- *in_list* - Triggers when the data is in the list of values provided.\n- *comparison* - Compares this parameter with another parameter on the same device. Triggers when the result is true. \nCurrent supported operations are, greater than (g), greater than equal to (ge), less than (l), less than equal to\n  (le), equal (e).\n\n#### Collect\nCollect triggers are triggers which when called collect the parameter data. They can have 1 state \n(read). This can have one trigger type.\n\n\n- **Read** - A read state will collect the parameter data on a read operation.\n\n##### Collect Trigger Types\n- *deadline* - When a deadline is reached this will trigger.\n\n\n## Sequencing\n\nAllows for sequencing operations for parameter operations\n\n### Write Sequencing\nParameters that need to have a special way to be written can use write sequencing.\nWrite sequencing is called after the validators are passed.\nThis allows a small subset of operations that can be done every time the write_parameters call is done either through \ncode or MQTT Commands such as \"set-parameters\"\n```yaml\n  system-reset:\n    #...\n    sequences: # Negative pulse trigger (>100ms)\n      write:\n        - type: write_value\n          value: 1\n        - type: write_value\n          value: 0\n        - type: wait\n          seconds: 0.2\n        - type: write_value\n          value: 1\n```\n\n#### Write Sequencing Types\n- *write* - Writes the value as specified in the payload. This is the default operation if no sequence is specified\n- *write_value* - Writes a specified value to the parameter overriding the value set in the parameter payload.\n\n    - *value* - The value to set to the parameter \n- *wait* - Waits the specified number of seconds before moving to the next step\n  \n    - *seconds* - The seconds to wait\n- *write_parameter_value* - Writes a specified value to another parameter by name\n\n    - *parameter* - The parameter name to write to\n    - *value* - The value to write to the parameter\n    \n- *write_parameter* - Writes the value from this parameter to another parameter by name\n\n    - *parameter* - The parameter name to write to\n    \n### Aggregations\nAggregates can be applied to parameter data before being sent onwards to its destination. An example use of aggregation \ncan be seen in the sample device parameter file below,\n```yaml\n...\nparameters:\n  reg-0:\n    source: poll\n    form:\n      type: Param\n      address: 0\n      idx: reg-0\n    triggers:\n      process:\n        send:\n          - [state]\n          - [time, 30]\n      aggregations:\n        - latest\n        - samples\n        - min\n        - max\n        - sum\n...\n```\nAggregations is a list passed from the parameter to pyAWARE to inform pyAWARE that these aggregations are to be \nperformed.  \nCurrently supported aggregations (**NOTE**: If aggregations are not defined, the default aggregation operations \nperformed are samples and latest),\n\n\n- **samples** - Returns the total number of samples taken (poll intervals) for the current sending operation as defined \n  in triggers.\n- **latest** - Returns the latest sample for the current sending operation as defined in triggers.\n- **sum** - Returns the sumation of all samples for the current sending operation as defined in triggers.\n- **min** - Returns the minimum of all samples for the current sending operation as defined in triggers.\n- **max** - Returns the maximum of all samples for the current sending operation as defined in triggers.\n\n\n# Release Notes\n\n-----\nRelease 6.0.0 - Store and Forward\n-----\n\n#### AWARE-1316 Store and Forward data separation\n- Backlog implementation\n- Updated error message that should no longer be reached\n- Added docker compose dev environment\n- Updated backlog manager to more efficiently package messages\n- Added artificial delay to message publishing to avoid clogging gglserver\n- Added random delays to mqtt backlog manager to ensure that multiple moxas starting at the same time will not flood the server\n\n#### AWARE-1836\n- Added rex640.jinja2\n\n#### AWARE-1837\n- Added data type support for PM180\n- Added pm180.yaml\n\n#### AWARE-1838\n- Added hpb.jinja2\n\n#### AWARE-1839\n- Added ret615.jinja2\n\n#### AWARE-1941 GCP to Azure Migration\n- Cleaner error handling and logging\n- Sync twin is now properly called on connection\n- Increased robustness around missing configuration files and azure connect logic\n- Added gateway state\n- Fixed issue where multiple topic types in backlog would only do the first one.\n- AWARE-1941\n- Updated payload to include topic type for azure message filtering\n- Implemented store and forward for azure\n- Added confirmation for gateway configuration for digital twin\n- Reduced client side throttling\n- Fixed issue where child parameters would not correctly execute read-parameters\n- Added azure device commands\n- Fixed bug in database message ack'ing\n- Fixed batch ack's to avoid maximum sql parameterisation of 999\n- Created new azure example\n\n#### AWARE-1960 Support changes to connection.yaml from gateway.yaml\n- Updated ability for gateway.yaml to update connection.yaml\n- Added connection.yaml backup when updated\n- Restores connection.yaml from backup if badly formed or doesn't get a connection within 10 minutes\n- Deletes backup connection.yaml if the current connection.yaml is validated to connect within 10 minutes\n- Updated gcp example to use production test sandbox using current naming schemes\n- Updated config manipulation to be in a more nice reading yaml format\n\n#### AWARE-2008 Store and Forward roll out\n- Changed backlog_enable to feature_backfill to fit other feature flags\n- Added gglive example with backfill so that the config can be shipped with pyaware\n\n#### AWARE-2015\n- Fixes for RET615\n\n-----\nRelease 5.4.0 - Integration Service Update\n-----\n\n#### AWARE-1895\n- Updated the mqtt receive message loop to sleep for 1sec if the client could not receive feedback from the broker. This stops a fast tight loop and spamming the logs with error messages.\n\n#### AWARE-1891\n- Updated the raw integration data to include registers 0 - 1697\n- Extended the modbus TCP read blocks to include a continuous range from 0 to 0x6a2 so that raw integration data doesn't have gaps\n- Fixed modbus ranges on the Imac Master Controller\n- Updated pipelines to conform to PEP440 naming conventions that are now enforced by setuptools\n\n-----\nRelease 5.3.0 - Memory leak fixes\n-----\n\n#### AWARE-1802 - HISAPS comissioning\n- Updated device specs for Solar Qube devices as per testing on site.\n- Updated Sungrow SH-5K addresses to align with datasheet.\n\n#### AWARE-1828 - Remote telemetry tests timing out\n- Added tracking of parent object to subscriptions so parent object can unsubscribe itself explicitly.\n- Added explicit unsubscription of events on imac modules when they are disconnected.\n- Fixed issue with unsubscribe events not matching correctly on id\n\n#### AWARE-1846\n- Various issues in https://github.com/Yakifo/amqtt/pull/127 \n- Using fork amqtt-pazzarpj which incorporates this fix \n- Updating mqtt client to use fork with fixes\n- Updating requirements for websockets as there is conflict with amqtt\n- Packing version pinned as there is an api break\n\n#### AWARE 1848 - Duplicate triggers on long running system\n- Added weak reference implementation to stop event holding onto event callbacks when the module is removed.\n- Fixed references to imac modules still staying after being \"removed\"\n- Updated documentation to describe the various module references in code to ensure new updates do not interfere.\n- Fixed tests\n- Fixed address reference for linearity-test-last-points\n- Updated event triggers to reset priority of parameters instead of directly reading them\n\n#### AWARE 1852 - Detector type unknown does not stick\n- Updated detector-type to be a virtual parameter so that data read from detector will first check if the data is valid before returning the detector-type read from the gg2\n- Fixed issue with packaging new update not accepting arbitrary versions\n- Fixed issue where it was not collecting the detector-type-raw on detector head being re-attached\n- Updated the deadline for the collect triggers to give opportunity for other parameters to push themselves even higher than the first reads for other parameters\n\n-----\nRelease 5.2.0\n-----\n\n##### AWARE-1788 Refresh data is failing on GG2\n- Removed parameter_poll_reader and replaced with removing the send_state so that the parameter will trigger next read.\n- Updated parameter commands to not validate as now it is not guaranteed that the parameters will be returned in the case of poll parameters.\n- Updated read parameters to not error with missing parameter handler\n- Fixed issue with shutdown code that would error on Modbus Serial client\n- Fixed tests to match the new functionality\n- Added IO Error failure if no parameters are returned.\n\n-----\nRelease 5.1.0\n-----\n\n##### AWARE-1786\n- Updated the topology request loop to explicitly request the topology each interval instead of sending the last topology\n- Changed interval topology to only log new topology\n- Changed interval topology to only send one message\n\n-----\nRelease 5.0.1\n-----\n\n##### AWARE-1782\n- Reverted touchpro to only support 12 channels as the base firmware will error if modbus registers are out of range.\n\n-----\nRelease 5.0.0\n-----\n\n##### AWARE-749\n- Updated requirements.txt to include known working versions of dependencies of hbmqtt 0.9.6 as per commit b2d75d7 for issue AWARE-742.\n- Updated client.py to include memory leak fix for hbmqtt. As per commit c3cd85f for issue AWARE-730.\n- Updated ipc.py to include gateway heartbeat fix. As per commit 41c13c7 as part of issue AWARE-693.\n- Updated release notes and bumped version. Updated formatting.\n- Updated formatting.\n\n##### AWARE-853\n- Changed Selectroniv alarm values to fix firmware update issues with Selectronic alarming.\n- Updated versioning and release notes.\n- Added remote start/stop procedure for Comap Intelilite MRS-16. Updated release notes.\n- Updated formatting black.\n- Code Cleanup\n- Updated release notes.\n\n##### AWARE-891 \n- Added a solar cube example config.\n- Updated version number and release notes.\n\n##### AWARE-926\n- Fixed issue with parameters not being updated from collect schedule when a related parameter was read.\n- Added test to ensure correct calls are made when checking which parameter reads failed and which are new\n\n##### AWARE-1474 Update pyaware to include additional solar inverter\n- Added Second Solar Inverter to Selectronic device specification and updated scaling.\n- Updated release notes.\n- Updated formatting.\n\n##### AWARE-1482 Live Pyaware Debugging\n- Updated to cleanly remove a module as it was staying in the subcommand memory when removed\n- Added command to turn on debugging on/off an already running pyaware instance\n- Updated modbus library to support logging\n- Updated debug logger to handle modbus logging\n- Added a logging class to clean up the different logging options\n- Added state logger to monitor updates to the state dictionary\n- Fixed import errors\n- Updated logger initialisation to use existing logger instead of new logger to file\n- Added helper functions for the logger to determine the state objects\n- Updated state objects to use a wrappable dictionary as the default cannot be overridden.\n- Added debug statement for poll loop time\n- Updated debug command based on feedback\n- Updated readme to describe command\n- Fixed issue where logging tried to log triggers for device_id on imac modules when it doesn't exist\n\n##### AWARE-1487 Customer Factory Acceptance Testing\n- Updated the comap engine state and breaker state enums.\n- Updated release notes and version number\n- Updated test framework\n\n##### AWARE-1591 Produce versioned ARM artifacts \n- Update pipelines to support arm builds for each branch type to preserve versioning within the package\n\n##### AWARE-1612 Detector Latched Bit\n- Added Configs for Feature Bits + Latched Trip\n- Added handler for clearing Latch\n- Added test for configuration files\n- Added feature flags to RTS\n- Fixed comment block on clear_latch_at_address\n\n##### AWARE-1614 iMAC address bypass off by one\n- Fixing off-by-one error in address-bypass\n- address-bypass is addresses 1-40\n\n##### AWARE-1621 Add Sungrow inverter\n- Added Sungrow SH5K-30 modbus spec to pyaware devices.\n- Removed store triggers as they are already triggerred on send. Removed daily parameters as it depends on the clock of the device not the clock of the MOXA unit. Removed co2 reduction as it is to be calculated by aware.\n\n##### AWARE-1624 Bleeder Fan Trip\n- Added configuration for bleeder fan\n- Added command to RTS to set Bleeder on/off\n- Fixed addresses\n- Fixed off by one error from latched trip\n- Changed set_bleeder implementation\n\n##### AWARE-1638 Calibration Cup data not updated on user calibration\n- Added event trigger to read calibration data whenever the cal cup is removed. Adds 20 second delay, just in case GG2 hasn't processed yet\n\n##### AWARE-1651 Devices not correctly being removed\n- Added check connected method on imac modules. It uses block 0 to check if a module still exists.\n- Added check connected calls for missing modules on system roll call and roll call address\n- Added watchdog to parameter block read or write to run the check connected method on exception with a 100000 second timeout.\n- Removed test for delete missing modules at address as the functionality has changed\n\n##### AWARE-1652 Devices sending telemetry when not connected to the bus\n- Fixed issue where devices were sending telemetry when not connected to the bus.\n\n##### AWARE-1673 Solar Qube - Alarms not clearing when occurring in quick succession\n- Updated timing of comap alarm clearing check to ensure it is always cleared in the event the alarms are fired in quick succession. \n- Updated version number and release notes.\n\n##### AWARE-1675 RTS is sending topology as an iMAC\n- Removed topology message from RTS Controllers\n\n##### AWARE-1683 Check connected erroring on RTS module\n- Fixed issue where RTS module was erroring on check_connected method\n\n##### AWARE-1684 Migrate Solar Qube release branch into develop branch of pyaware\n- Updated release notes.\n- Updated solar qube names to reflect branding changes.\n- Updated solar qube configuration to align with current pyaware version.\n\n##### AWARE-1694 Update pyaware to support 16 channels for Touch Pro\n- Added jinja templates to allow for dynamic devices such as touchpro amount of channels\n- Changed so all yaml parsing goes through pyaware.config.load_yaml as it is cached and works with templating\n- Added tests for parsing touchpro templates\n- Updated tests to auto include a loop cleanup fixture so the tests don't hang or bleed into other tests\n- Fixed modbus holding register range to support up to 48 channels of input values\n- Updated manifest to explicitly include the jinja templates\n\n##### AWARE-1736 Add shunt resistance to iMAC screen\n- Added shunt resistance to spec file.\n\n##### AWARE-1752 RTS incorrectly being removed from topology messages\n- Removed module watchdog setup (block read) for modules of type \"imac-controller-rts\" as they do not have block reads.\n\n\nRelease 4.8.1\n-----\n#### AWARE-1610 iMAC failed to read block errors\n- Changed set_bit used in read and write parameters to skip the checked bit as it is a race condition against the iMAC\n\n-----\nRelease 4.8.0\n-----\n\n#### AWARE-1324 \n- Added timeouts to SNMP functions. Wrapped SNMP blocking functions so that they do not block the event loop.\n- Removed unused import. Updated formatting black.\n- Updated version number of release. Commented out tests to be fixed.\n- Fixed tests. Updated snmp to use partial functions over positional arguments.\n- Updated the system flags to send the data correctly\n- Fixed tests. Updated version number to align with develop.\n- Reformatted black.\n\n#### AWARE-1447\n- Added DO4-4 Parameter Spec and module.\n- Updated DO4-4 Parameter Spec\n- Removed unnecessary DO4-4 comments from spec. Updated roll-callable and online address for DO4-4.\n- Updated DO4-4 Parameter spec.\n- Updated DO4-4 online and roll-callable parameter names.\n- Updated DO4-4 parameter spec to remove status from names.\n\n#### AWARE-1459 \n- Updated imac master commands to include a clear error counts, a clear offline count and clear clash count for an imac address.\n- Reformatted.\n- Updated the clear all error counts command to clear all error registers.\n- Removed address 0 from imac master specific commands. You no longer can clear address 0, or clear counts on address 0.\n\n#### AWARE-1464\n- Added new GasGuard command to set the front panel lockout.\n- Updated set-front-panel-lockout to use SetParameters command procedure to set the command rather than write and validate.\n- Changed name from front-panel-lockout to ui-lockout. Updated with respect to customer comments.\n- Reformatted.\n\n#### AWARE-1556\n- Updated triggers to match requirements\n\n#### AWARE-1577\n- Reading the detector type when detector data invalid triggers to False will no longer block until the detector type is read.\n- Default gas value for safegas set to -2000\n\n-----\nRelease 4.7.0\n-----\n#### AWARE-1310\n- Added optional parameter to set the topology interval\n- Set the default topology interval to 60 seconds\n\n#### AWARE-1313\n- Add timestamp to gateway state\n\n#### AWARE-1315\n- Updated iMAC input modules to send polled data at most once per hour\n\n-----\nRelease 4.6.0\n-----\n#### AWARE-996 Specify eth adapter for GGLive\n- Updated gateway_id in gglive example config to always be the external facing ethernet adapter mac address.\n\n#### AWARE-997 Connection.yaml to fully resolve before attempting to initialise devices\n- Changed start up logic to remove a bunch of async functions that can be synchronous\n- Changed the device state message to not be cached as it was waiting for the DB to be initialised before sending.\n- Changed the device state message to send on each connection in case it gets lost due to cache not storing the message.\n- Fixed issue where state was sent twice at start up\n- Fixed issue where waiting for remote config would still happen even after receiving a blank config\n- Changed error reporting on MQTT setup tasks cancellation as it was not compatible with python 3.7\n- Run Modbus Device creation in a thread to prevent event loop locking up. Particularly for siemens boxes.\n- Fixed deferred gateway topics update reference\n\n-----\nRelease 4.5.0\n-----\n\n#### AWARE-949 Update documentation for offline preparation and installation\n- Added instructions for downloading the python installation various ways\n- Added bitbucket custom pipeline to generate bundled packages\n- Renamed package build to armv7 to indicate architecture\n- Added package build to production pipeline\n\n#### AWARE-952 Update bypass logic\n- Send all bypass status every minute\n\n#### AWARE-962 Pyaware start-up needs to subscribe to config topic before waiting for remote configuration\n- Fixed a bug where remote configuration was never being used in GCP applications.\n- Fixed a bug where remote configuration would not restart pyaware.\n- Updated tests.\n- Updated formatting.\n- Added logging for missing configuration files. Updated local remote configuration timeout to 2 seconds so that the remote config would update gateway.yaml before the local was parsed. Small timing fixes on start up to ensure the database was correctly initiated before actioned on. Updated mqtt config handling to take in the correct gateway config topic depending on gcp or local mqtt.\n- Removed logging configuration in gateway.yaml. This is to be revisited if it is required at some stage. Reverted change to restart pyaware on remote configuration received.\n- Reintroduced a pyaware stop when we receive new configuration from a config topic after config parsing.\n- Added setup waits to disk storage to ensure it is initialised before running\n\n#### AWARE-973 Pim Integration\n- Added PIM module\n- Added collect triggers for pim\n\n#### AWARE-980 Change Schneider Power Meters to IEC Power Factor\n- Changed from 4Q_FP_PF to the IEC Float version\n\n#### AWARE-988 Gateway id from mac address to be deterministic\n- Put a check in to ensure that the configuration parameter for gateway_id was used over the default setting. If none is set then the program will attempt to be deterministic by selecting the last mac address that is not a loopback adapter to use.\n- Added a solution for an error state where gateway_id is never set.\n\n#### AWARE-992\n- Fixed issue where data files weren't included on linux\n\n#### AWARE-994\n- Added error check to parsing mac address from config so that it doesn't crash pyaware when processing gateway.yaml with invalid configuration.\n\n-----\nRelease 4.4.0\n-----\n\n#### AWARE-619 - RTGM - RTS Auto restart if Fieldbus 0\n- Moved gateway state and heartbeat from gateway_ipc into mqtt client. These will be started by default when pyaware is started.\n- Added connection.yaml feature flag functionality.\n- Updated the mqtt client setup to send the network details to topology when state is changed.\n- Moved topology to gateway configuration. Moved GatewayIPC to Solar Cube dependant functionality as gateway configuration. Removed gateway IPC.\n- Fixed timing of sending topology messages. Further decoupled the topology messages from gateway IPC.\n- Gateway Heartbeat and State messages made default.\n- Moved Topology into imac auto_detect functionality.\n- Changed the gateway_id to the last mac address read from the device.\n- Fixed sequencing of mqtt storage database so that gateway state messages can be sent on startup.\n\n#### AWARE-880 - Potential pyaware defaults can cause issues with the defaults not being processed\n- Updated README with the correct database config information.\n- Added the ability to disable MQTT parsers. Made the ability to update MQTT parsers more explicit. Added documentation to the README for the above changes.\n- Re-enabled the ability for users to change the logging configuration through gateway yaml. Removed the unnecessary log_config dictionary of logging config.\n- Fixed comms params parsing to account for NoneTypes on read. This assumes that NoneTypes are not valid types to set to comms params.\n- Fixed an error where if a key error was present in parse_comms_params this did not always indicate a deferred parameter.\n- Fixed database defaults parsing issue if no config was present. Changed the object default database size from unlimited to a hard 500MB limit.\n\n#### AWARE-885 - PyAware - Safegas MQTT Messages - Add AIM as Sensor type\n- Updated process_safe_gas function documentation.\n- Added AIM module support for safegas data.\n\n#### AWARE-888 - RTGM - Missing MQTT messages from Pyaware\n- Added device_message flag to mqtt topics to allow for certain topics to be sent even though gateway config parsing is not complete. \n- Added warning to gateway config parsing in the event the commands topic is never established. \n- Increased mqtt timeout to 60 seconds due to this config parsing change.\n- Moved mqtt setup functions outside of setup loop. Kept mqtt network setup inside of setup loop. Improved error handling.\n- Added error messages for gateway command topic parsing errors. In the event of an error a topic subscription is still setup.\n- Added device_message flag to GCP state message so that it is sent on startup before device mqtt setup. \n- Removed state message from setup tasks as it is not a setup task.\n\n#### AWARE-891 - Pyaware - Add Config Files\n- Added the ability for config files to be added to the wheel file.\n- Added local mqtt example config. Added README for local mqtt config.\n- Added gcp example. Added README for gcp example.\n- Changed recursive-include to recursive-exclude for .git files. Added a GGL example in example configs. \n\n#### AWARE-898 - RTGM - How do we manage old version of pyaware sitting on spares shelf?\n- Removed unused MQTT models and topics. Added version strings to all MQTT messages. Made a note to migrate old version of MQTT models into new models when appropriate.\n- Repositioned `__version__` to align with PEP8 module level dunder names. Provided `__version__` on the state message mqtt model. Fixed mqtt model imports to align with new names.\n- Added version numbers to command request to ensure that there will be no validation errors with GCP. In theory, API should send this, overriding this field.\n- Removed snake-casing from MQTT models for camel casing. Updated tests.\n\n#### AWARE-904 - Pyaware has a dictionary modified while it is being iterated. Investigate\n- Fixed issue where the processing of the controller data would fail if a new module was added during processing.\n\n#### AWARE-917 - RTGM - AIM module address change causes data to stop sending\n - Added logging for block and roll call lock acquire and release. \n - Forced all address roll calls to happen in sequence with no other block reads allowed.\n - Broke imac addresses out into two states, online and rollcallable. This logical breakout is to solve iMAC modules going offline when there are only one of its addresses going offline for multi-address modules.\n\n-----\nRelease 4.3.0\n-----\nThis release removes the requirement for a gateway.yaml on startup and moves to connection.yaml as the primary way to\nset up the mqtt connection.\n\n#### AWARE-448 - Remove pymodbus client\n- Removed pymodbus and associated legacy code\n\n#### AWARE-750 - Move mqtt details out of gateway.yaml\n- Added parse_mqtt to config which will run before aware updates\n- Added connection.yaml as a base config for aware\n- Added gateway_config_received event to indicate when the configuration has been received.\n- Updated configuration parsing to more closely match the function\n- Updated MQTT to use configuration as raw\n- Improved error reporting\n- Changed logging order so it will log the mqtt connection information\n- Removed logging parameters from config as it is not loaded at this point\n- Fixed a bug where disk_storage would import None if the mqtt client was initialised before the database\n- Changed the mqtt local config topic to replace the device_id with gateway_id for the gateway. This allows us to target the gateway with configuration updates\n- Added default id for client_id for local mqtt\n- Added build_connection_yaml to build the new connection configuration from available data\n- Added a new parameter to mqtt config to set how long to wait for a remote gateway config before loading from disk\n- Fixed existing tests around configuration parsing\n- Added tests for auto generating connection.yaml\n- Added ability to change the default parsers more simply in connection.yaml\n- Added backwards compatibility to ensure that gateway_id can still be populated when only device_id is provided by legacy cloud.yaml\n- Added error checking for missing configuration file\n\n#### AWARE-784 - Command write parameters errors on invalid handles\n- Changed the parameter handles to have a default of holding register when not present in the config file\n- Changed the write handle to not error when there is no existing handle\n- Fixed issues with Async mocking\n\n#### AWARE-789 - Substation PLC Configuration Updates\n- Updated configuration file to correctly distinguish between coil and input registers\n- Updated address_shift to work with parameters with blank addresses\n- Added missing address for outlet-5-eflo-trip\n- Changed uint to float type\n- Added commission3.py to be compatible with async configuration loading\n- Updated requirements for aiomodbus fixed on coil reads\n- Changed the byte ordering based on hst feedback\n- Changed the variable names to line up with requests from HST\n\n#### AWARE-798 - Local/Remote Bypass indication not working\n- Fixed a bug with config parsing where mqtt config parameters that rely on information in gateway.yaml were not being parsed.\n- Fixed a bug where the bypass status was not correctly set when the unit was in local bypass.\n- Changed the subscription topics so that mqtt commands are done only if there is enough information to do so. General code cleanup.\n- Added an option to disable MQTT for instances of pyAWARE without it. This is contained in connection.yaml and is an explicit parameter called disable_mqtt.\n- Removed disable_mqtt if set to False as its not used in comms param parsing.\n- Updated formatting black. Removed duplicate import from requirements-test.txt\n- Changed the local and remote bypass bits to their correct values. Moved connection yaml parsing outside of mqtt_parse. Added type hinting. Changed update function on mqtt config dataclass to check that keys exist before updating.\n- Fixed a bug where commands topic was not being subscribed to if a connection.yaml was present that did not depend on gateway.yaml\n- Updated a test that required parse_mqtt to have parameter added to its import.\n\n#### AWARE-804 - RTGM third party integration\n- Added raw imac data to safegas message\n- Updated safegas to use 60 detectors\n- Grouped iMAC tests\n- Basic test to check that parameters exist as expected\n\n#### AWARE-811 - Fixes to connection.yaml topic parsers\n- Fixed issue where adding parsers to config would override all default parsers\n- Updated the config parsing flow so it only evaluates parameters it was unable to last pass\n\n-----\nRelease 4.2.0\n-----\n\n##### AWARE-690 Write sequencing support for commands\n- Added controller base class to implement common parameter operations such as \"set-parameters\" and \"get-parameters\"\n- Added run_write_sequence which skips parameters that are written in a group\n- Added first pass Parameter implementation for generic read/write control across all parameters\n- Config parsing for the parameters\n- Added support for parameter validation\n- Changed parameter read/write handles to be properties that the controller has to set\n- Updated the Modbus Controller to parse the read/write handlers\n- Write parameters will look to the parent parameter to set it\n- Added get-parameters command to modbus controller\n- Fixed bugs found by test failures\n- Writes will now use current state for grouped parameters to ensure that they are not overwritten\n- Write sequences now work\n- Write parameter sequence now respects the target parameters write sequence\n- Added ParamBit\n- Parent/children parameters added\n- Documentation updates on TCP connections for modbus\n- Fixed bug where address masking was resulting in bits not clearing from the appropriate address\n- Changed parameter current state to refer to the same current state as the parent\n- Changed the current state to update every decode cycle as the parameters are not explicitly read when called from a block poll of the controller.\n- Test on ParamBit more able to pick up bitwise issues in encode/decode\n- Added multiple addresses return for datatypes that have multiple addresses\n- Added better data validation for missing parameters in set-parameters\n- Added ParamBool for coil registers\n- Added austech touchpro device configuration file\n- Fixed issue where the addresses were returned incorrectly for ParamCType\n- Updated documentation on parameter hierarchy and write sequencing\n- Removing dead code from controller sequences as they are implemented in the new parameter model\n- Fixed issues with trigger and aggregation parsing not working on children parameters\n- Fixed issues channel setup addresses\n- Added assertion to enforce contiguous addresses for the current implementation [No ParamBoolArray like in imac)\n- Black formatted\n- Made commands more robust to invalid payloads\n- Changed command ordering so that ack is sent if the message makes it though before trying to process it.\n- Updated command request model to have multiple data types\n- Updated CommandRequest model for cloud based to have the optional list type for parameter parsing\n- Fixed ParamText to return the appropriate amount of addresses\n- Fixed GetParameters to work correctly with dict and list\n- Trimmed touchpro mapping to 4 channels\n##### AWARE-713 SNMP Implementation\n- Refactored data types into its own module.\n- Added namespace for modbus to modbus parameters\n- Moved ParamDict to common as it is not a modbus parameter\n- Initial design idea. Added snmp to list of controllers. Added puresnmp to list of required packages. Added autocard.yaml.\n- Initial design idea. Added snmp to list of controllers. Added puresnmp to list of required packages. Added autocard.yaml.\n- Moved ParamStatic to Common data types.\n- Added SNMP datatypes integer32 and string. Added tests for these datatypes. Added these datatypes to parameter types list. Refactored shelfkit.yaml.\n- Initial shelfkit implementation for autocard 1.\n- Updated the SNMP datatypes to use the paramform base class. Implemented a bare bones snmp read controller.\n- Added controller methods. Added get_parameter method. Added a test method for this get_parameter method.\n- Added test for snmp controller read_parameters method. This resulted in a fix of the device config as it was incorrectly written. Fixed doc strings for read_parameters method on Modbus and SNMP controller.\n- Refactored naming on snmp decode encode methods.\n- Refactored naming of read_multi.\n- Added tests for read_multiple on SNMP device.\n- Added a write multiple parameters method to SNMP. Changed the encoding/decoding of SNMP to use puresnmp types as when encoded the data needs to use puresnmp types.\n- Implemented a write parameters and a set parameters command for snmp.\n- Implemented the get_parameters method, set_parameters method & set_parameter method on snmp device controller.\n- Implemented a test for the get_parameters method on the snmp controller.\n- Added tests for the snmp set parameter and set parameters methods.\n- Added test for write parameters on snmp device. Made the encoder factory optional for the parameter writer to remove necessary AddressMapUint16 encoder from global default.\n- Added documentation & typing for the snmp controller and snmp datatype.\n- Added documentation & typing for the snmp controller and snmp datatype.\n- Formatted black.\n- Added the rest of the nine autocards to shelfkit.yaml.\n- Added the rest of the 5 autocards to shelfkit.yaml.\n- Updated the send intervals in shelfkit.yaml\n- Updated the name of the shelf kit\n- Added link to the shelf kit MIB file in shelf_kit.yaml\n- Formatted black.\n- Changing patch to patch object to potentially fix a failed pipeline test\n- Put device inside test_get_parameter_not_strict_success method. To achieve isolation.\n- Changing patch to patch object to potentially fix a failed pipeline test\n- Attempt to fix test pipeline.\n- Reformatted black.\n- Removed autocard.yaml.\n- Removed AsyncMock from test_snmp_controller.py as it is not used.\n##### AWARE-745 Update Safegas Implementation\n- Added Scaled gas array for GG2 (not AIM)\n- Added address status array based on ModuleStatus Enum\n- Added ParamArray to have an array type for the address-data\n- Updated iMAC controller to process address-data\n- Updated safe-gas to use the address-data as a base for the analog values\n- Updated default flags register to 0xffff\n- Changed address-data to start at address 0 to match the address-status array\n- Reworked the poll loop so that process_safe_gas happens in the same thread to prevent a race condition when looping over the modules. This could cause an error during roll call if a module was discovered at the same time that safe gas was processing.\n- Updated the comments to more accurately reflect the payload contents\n- Updated documentation for ParamArray\n- Update aware safe gas array to use analog registers instead of flag registers\n\n-----\nVersion 4.1.1\n-----\nThis is release fixes the slow memory leak in the mqtt client\n##### AWARE-730\n- Improved memory profile snapshots\n- Added fix for a memory leak on the hbmqtt client\n- A more correct implementation of the mqtt fix so that cleanup on shutdown is successful\n##### AWARE-731\n- Changed the ordering of watchdog bindings so that if the protocol_lost or protocol_connected is called before it gets to add the watchdog it will not fail.\n- Tries to read 50 times to overcome issue with iMAC in recently discovered failure state which causes pyaware to never be able to read from it. Should restart in 1 minute if not available to read.\n##### AWARE-740\n- CommandRequestV1 now has data as an optional field to be complaint with commands that don't use the field\n##### AWARE-742\n- Updated requirements.txt to include known working versions of dependencies of hbmqtt 0.9.6\n##### AWARE-751\n- Changed imac_heartbeat_poll to still send mqtt messages even if the modbus reads are failing\n- Added a new parameter to watchdog.watch to allow the watchdog to be fed on entry to the function instead of just successfully completing the function\n\n-----\nVersion 4.1.0\n-----\nThis is the minimum required version for Real-time Gas Monitoring (RTGM).\n##### AWARE-693 RTGM - Gateway Heartbeat not Validating through Pydantic\n- Fixed a bug where the ip address was never being updated on network changes. \n- Stopped the gateway state message from being sent twice on startup. Now only sent when valid IP Address is received.\n##### AWARE-691 Pyaware - Safegas array logic\n- Added enforcing of gas value index for safegas to ensure that gas values are within the 40 address range.\n- Added AIM module to safegas message. AIM module in the address range 41-80 should have a Gasguard 1 detector connected. This is not enforced through code, only through documentation.\n- Added raw data flags to the AIM module so that they can be read in and sent via safegas.\n##### AWARE-685 Add set-parameters command to modbus device\n- Add set-parameters to modbus device\n- Added command input validation\n- Changed sub topics to be a max of 3 topics as GCP seems to ignore topics in subscription messages after the fourth subscription.\n- Commands will get sent to the appropriate device based on command topic name\n- Added command response. Tested against aware-development pubsub topics  \n- Changed created_at in model from string to datetime\n- Fixed a bug where the subscriptions wouldn't happen if anything other than the device_id needed to be populated into the topic name\n\n-----\nVersion 4.0.1\n-----\n##### AWARE-672 Update with PLC Device\n- Added hst substation plc device.\n- Updated PLC flag sending time to 5 minutes or change of state.\n##### AWARE-671 Update HST config for faster device data\n- Removed raw_values from TelemetryV1 and TelemetryV3 as it was causing a bug that prevented any aggregation other than samples and latest to be sent. Added a test for this specific case.\n\n-----\nVersion 4.0.0\n-----\n##### AWARE-664 GG2 Telemetry Test Causing other GG2 detectors values to change\n- Changed Telemetry Test With timestamp to without due to an error with asyncio locks. The lock was released too soon resulting in the imac and associated modules being put in an unknown state. This resulted in random data being written to modules on the bus.\n##### AWARE-605 Review Bugs\n- Change of fieldbus address breaks RTS\n- Fixed issue where serial number changes would stop parameter triggers working\n- Changed rts schema matching to ensure that the address is inside the schema range before testing if all the addresses are online\n- Force RTS to restart pyaware if fieldbus address is 0\n##### AWARE-624 Bypass Behaviour\n- Added event for address-flags changing\n- Removed faulty code in update_specs for setting the remote and local bypass\n- Added parameter trigger for updating the remote and local bypass on address-flags change\n- Added meta field to parameters to house data specific to the implementation.\n- Imac modules now check the meta field of a parameter to check if the ignore-status field is set for parsing data in offline addresses.\n- bypass-local has the ignore-status set so that when a di4 moves addresses, the local bypass will clear when the module goes offline at the previous address.\n##### AWARE-612 Retain Messages Review\n- Changed all retain mqtt messages to not retained\n##### AWARE-647 Roll call on offline and remove devices on failure to respond\n- Added any address online to ImacModule to determine if the module needs to be disconnected on failed roll call\n- Now updates topology on removal of device\n- Now roll calls offline addresses to make sure that they will remove devices that are no longer connected\n- Added delete_missing_modules_at_address to force roll call\n- Added tests for roll call module deletion\n##### AWARE-648 Schedule roll call of system addresses and remove devices on failure to respond\n- Removed duplicate topology message from IPC\n- Added scheduled daily read of all system owned addresses\n- Changed it to only call remove_devices if a device is to be removed so that topology is not spammed\n##### AWARE-630 'Remote Bypass' Address clear\n- Added Address-Bypass addresses from 0-40 on the imac controller master.\n- Changed the address-bypass values from True/False to 1/0 for ease of reading. \n- Changed the range of addresses read so that the array length is definitely 40 with 0 always false.\n##### AWARE-655 'SCADA' Integration using EIP CIP Library\n- Added a custom device topic to local MQTT parsers. This is to allow devices to publish specific topics dependent on their operation. Hence this use case is for writing gas values to safe gas. \n- Pointed process_safe_gas to an appropriate MQTT custom topic.\n- Added data-flags register to safe-gas mqtt messages. \n- Included the bypass flag at the end of the 16 bit value as a combination of local and remote bypass flags. \n- Added int wrappers around address values in modules. \n- Added comments to safegas function and data-flags initialisation so it is more easily picked up again if required.\n- Enforced address to be an int.\n- Added a way for local MQTT parsers to be defined in config. Removed the custom device topic from MQTT parsers.\n- Ensured that the default local MQTT parsers are overwritten with config defined parsers if config defined parsers are available.\n\n-----\nVersion 3.6.4.solarcube\n-----\n\n##### AWARE-1673\n- AWARE-1673 Updated timing of comap alarm clearing check to ensure it is always cleared in the event the alarms are fired in quick succession.\n\n-----\nVersion 3.6.3.solarcube\n-----\n\n##### AWARE-1487\n- AWARE-1487 Updated the comap engine state and breaker state enums.\n\n------\nVersion 3.6.2.solarcube\n-----\n##### AWARE-1474\n- AWARE-874 Added Second Solar Inverter to Selectronic device specification and updated scaling.\n\n-----\nVersion 3.6.1.solarcube\n-----\n\n##### AWARE-891\n- AWARE-891 Added a solar cube example config.\n\n----\nVersion 3.6.0.solarcube\n-----\n\n##### AWARE-853\n- AWARE-853 Added remote start/stop procedure for Comap Intelilite MRS-16.\n- AWARE-853 Changed Selectronic alarm values to fix firmware update issues with Selectronic alarming.\n\n-----\nVersion 3.5.9.solarcube\n-----\n\n##### HOTFIX-AWARE-749\n- AWARE-749 Updated requirements.txt to include known working versions of dependencies of hbmqtt 0.9.6 as per commit b2d75d7 for issue AWARE-742.\n- AWARE-749 Updated client.py to include memory leak fix for hbmqtt. As per commit c3cd85f for issue AWARE-730.\n- AWARE-749 Updated ipc.py to include gateway heartbeat fix. As per commit 41c13c7 as part of issue AWARE-693.\n\n-----\nVersion 3.5.8\n-----\n\n##### AWARE-378 Modbus TCP Server Creation\n- Created Modbus TCP Server and allowed it to run successfully in isolation.\n- Updated the modbus TCP server with dummy data, basic scaling and enum converting.\n- Implemented the encode method for ParamCType and a test case for the method.\n- Added support for Address maps in renaming keys. Created a test for this case. Created an eq method tied to Address maps that compares that the buffer objects are equal.\n- Added a test case for ParamCType Decode method to prove that it will support one and two length modbus addresses.\n- Added an overwrite option to the Address Map. This allows for current addresses to be overwritten if required else will raise a ValueError if there is overlap. Overwrite is set to False by default.\n- Updated typehinting on transformation \"rename_keys\".\n- Updated encode method for ParamCType to ensure the bytes and words are in the correct order.\n- Added an update server function in modbus device to update the server based on a mapping.\n- Removed overwrite option from AddressMap merge and added update functionality to the AddressMap.\n- Updated the modbus protocol with a server translator to separate the modbus server from all devices.\n- Added server translator to communications parsing.\n- Fixed comments on address map merge.\n- Reworked server and device translator.\n- Reworked rename keys transformations to apply to individual devices.\n- Added support for NemoD4Le Power Meter on Modbus TCP Server. Reformatted the file.\n- Updated ParamCType encode method to work with data types that are not multiples of 2.\n- Added an ethernet comms status for modbus devices which can be enabled through config. Enabled comms status for nemo-d4 Le power meter.\n- Updated the nemo powermeter to update on change of state. Moved read handle to cope with disconnect and reconnect events.\n- Allowed the device translator to set a poll interval for each device. Allowed the modbus client to tell all of its devices its connection state. Captured an error where the modbus device never recovered upon disconnection by giving it 1 second to attempt reconnect before next read. Renamed the horizon test power meter to match its cloud id.\n- Moved poll_pipeline to outside of Attribute Error exception. This ensures we still capture Attribute errors of poll_pipeline in logs.\n- Ensured integer is encoded on server translator.\n- Added a parambits test for encoding and initialised the input address map with the parameter address so that bitwise operations can be performed.\n- Added a grouping for parameters as a transform. This was specifically done to create a list of parameters to put into a bitmask. Added a test to test this function as well.\n- Added an error message to the ParamCType encode method to improve debugging. Fixed an issue with the group params transformation where the list of parameters would not reset with each grouping and instead continue growing for each parameter required to be grouped.\n- Added IPC heartbeat to modbus server. Heartbeat is stored as EPOCH time.\n- Added the generator controller for horizon into device config.\n- Added the generator controller to the modbus server.\n- Added a test for ParamLookup.\n- Added an option for bytes to be input into ParamLookup encode function. This was to allow ParamCType chars to be encoded into an ENUM without breaking the way it currently works. This is proven through the test.\n- Added a comms status flag for the ipc comms with google cloud mqtt.\n- Fixed a bug where if two instances of telemetry were running, validation checks would fail and not send data.\n- Added comms status to mdobus devices, ipc cloud mqtt and sp pro devices.\n- Updated modbus server table.\n- Added a new datatype. This is to take an array of addresses and interpret each address as the same enum. If the enum is in the data set that parameter to true else return false for that parameter. Returns enum as a bool dict.\n- Updated the SP PRO protocol to include service reason codes. Added these changes to the modbus server.\n- Moved modbus server address initialisation to config. Built to mirror device address map definitions. Updated NotImplementedError for ParamEnumBoolArray.\n- Moved server translator definitions to config.\n- Updated selectronic scaling.\n- Updated storage on sppro devices.\n- Fixed a bug where the cloud never connected due to an ondisconnect event.\n- Updated data type tests.\n- Updated ParamCType encode method to ensure no errors arise with unsigned and signed chars.\n- Updated storage triggers for Nemo D4-Le, SP Pro 2i, Intelilite MRS-16. Removed event trigger for serial comms status as it is not being used.\n- Removed cloud comms status awaiting introduction of watchdogs.\n- Added events enable to ModbusDevice.\n- Made comms parsing functions that are being used async. This is to reflect changes made in previous revisions of pyaware.\n- Updated poll interval for sp pro device and ModbusDevice. Set numeric type on modbus device and sp pro device by removing it from the if statement (was false on startup). Add read handle to modbus device with sleep time based on disconnect.\n- Preserved the ModbusTCPClient protocol if it had been intialised already. Moved the read handle in Modbus device to account for this and client disconnect event in the read loop.\n- Removed read handles. Replaced with read_registers, with a register type received from config. Added a client disconnect check while reading the modbus device, so that logs are not constantly generated from failed reads. Waits for restablished comms before attempting to read again.\n- Added watchdog to monitor ethernet comms status of all modbus devices. Added watchdog to monitor serial comms status of SP PRO devices. Added watchdog to monitor cloud communications status with gatewayipc only available if a reference to the cloud broker is added in config.\n- Added watchdog to monitor ethernet comms status on Modbus Device.\n##### AWARE-380 Add Selectronic Addresses to PyAWARE\n- Added selectronic devices to the modbus server. BMS parameters are the only parameters being read in at this stage.\n- Added Solar Inverter to selectronic Modbus Server Table.\n- Added the battery inverter addresses to the modbus server.\n##### AWARE-311 PyAWARE Slave Start Up Tasks\n- First pass at separating the definition between controllers (Which actuate the protocol) and protocol (Which is the line actuator)\n- Recreated the imac2 protocol to be more protocol specific and used it in the imac2 controller logic.\n- Updated the config file names and locations to work with the new setup\n- Renaming the Imac2Protocol to Imac2MasterController\n- Disabled RTS config parsing until it is fixed\n- Wait for the protocol to connect before doing a read\n- Created ImacControllerDevice for a stripped down imac functions.\n- Updated imac parameter spec file to match the code version and tested\n- Fixed imac protocol tests\n- Added tests for rest data\n- Improved auto detect so it returns the imac2 master controller if the SLP version matches\n- Added pytest mock to test requirements\n##### AWARE-312 RTS/iMAC update telemetry topic names - Slave\n- Removing the device_id from trigger_send and putting it as a parameter.\n- Now can format topic with all **kwargs (including device_id)\n- Command response also uses device_id as a parameter instead of a topic name\n- Topic formatting will now raise an error if it is missing a parameter\n- Added telemetry_serial which puts the serial number in the topic path\n- Fixed tests so they don't break the event loop on run causing it to hang\n- Fixed issue where swapped bytes could leave a null character in the string\n- Fixed a test where the serial number was not parsed to the controller correctly\n- Added new reference parameter so that the gateway can pull parameters from another parsed communication device. Eg get the serial number from an imac controller\n- Fixed the IPC to be able to send topics based on referenced devices with optional serial numbers in the topic names\n- Removed set fieldbus address from master\n- Removed start up fieldbus set from config for master.py\n- Removed RTS dynamic load and ip address config\n- Added RTS controller device\n- Fixed an issue where the client host configuration files were writing up too many folder levels now that the architecture has changed\n- Changed master-fieldbus-address location as we are no longer writing to it. This also keeps the same location between both the master and the rts\n- Added update_topology to RTS\n- Updated IPC to store the recent topology messages for each unique top level device (ones that send topology messages).\n- Added event message to ask for all the topologies for devices that are active in pyaware. This should allow us to invalidate old devices if needed.\n- Added rts migration tests\n- Migrating legacy imac into the tests to give permanance\n- Some fixes from the tests\n- Added RTS module in tests so we can separate the RTS that will live on the imac bus vs the RTS reporting directly via a moxa unit\n- Some fixes from the tests\n- Added recursive form parsing for deeply embedded parameters. Eg. bitmask parameters\n- Added recursive parameter parsing for lists\n- RTS Config now matches the original polling data\n- Updated the roll call to return the new RTS module\n- Separated controller logic from the device logic\n- Updated RTS triggers to send relay state more often and controller temperature less\n- Fixed issues related to RTS roll call not having enough parameters\n- Reverted change by delta on controller temperature back to change of state\n- Fixed issue where roll call address could be greater than 255 due to some imac quirk\n- Commands now have an optional destination so that you can address imac controllers and rts controllers by serial number\n- Added init method to all controllers and updated the _main method to call these on start-up. This allows us to sequence the start-up more sequentially allowing things like having the imac controller auto detect but not having messages missed because it read data and \"sent\" it before the mqtt broker was set up\n- Fixed issue with command destination not working for top level controller\n- Changing parameters so that the module type and controller type of RTS will reuse the same parameters.\n- Fixed issue where roll call would fail if the bit cleared before checking the bit was written correctly\n- All parameters on the imac module are now prefixed with l1 to indicate that the data is coming from the l1 bus\n- Moved imac controller device logic back into the RTS\n- Added static data polling to RTS so that parameters such as config addresses are published\n- Moved commands for remote bypass and remote trip from RTS Controller to RTS Module as they cannot be actuated on the RTS comms\n- Added last trip parameters\n- Changed all rts controller parameters that were prefix with l1 to postfix with l1 to avoid naming confusion with the parameters on the rts module\n- Added PLC heartbeat to RTS\n- Updated RTS device id to lower case to match topic names\n- Added resolve_static_data_types so that things like rts-config-address can resolve before the rest of the config that may depend on this addres\n- Added static data processing to imac module\n- All rts parameters now coming through MQTT\n- Fixed the tests around RTS parameters to match what was agreed to for the renaming of parameter from before the migration.\n##### AWARE-313 RTS Slave listen for relevant commands\n- Fixed issue where the trip reset was not correctly being executed\n- Changed the command destination to match the logical name of the RTS. This is so the same destination can be used whether it goes via the imac controller via l1 bus or directly to the moxa on the rts\n- Fixed a bug where porting the command from the rts controller to module did not fix the logical number not being part of an imac module.\n- Fixed a bug where the switch status was looking at the dip switches instead of the input switches\n##### AWARE-308 Changes as result of updated architecture\n- Added scaling to aim module power set points\n- Fixing rebase issues with config and storage\n- Added dev tag to the pipelines build\n- Fixing rebase issues related to retain messages not being sent\n- Fixing rebase issues related to retain messages not being sent\n- Added batchable parameter to force topics to not batch even when batching is set to true\n- Added write_by_serial_number_no_check\n- Fixed tests\n- Fixed issues with refactoring\n- Added client id to storage\n- Fixed issues with batchable topics\n- Fixed issues with batchable topics tests\n- Removed aiosppro driver from requirements\n- Added exception count to starve on exception\n- Changed watchdogs to more reasonable times for serial and ethernet\n- Fixed bitbucket-pipelines.yml develop build to have a more semantic versioning\n##### AWARE-411 Update comms status to push into heartbeat\n- Adding watchdog structure to set up watchdogs for communication statuses\n- WIP aggregated watchdog\n- Fixed issue with warnings being shown that the event wasn't scheduled\n- Stopping development and tests on aggregated watchdogs\n- Added watchdog manager\n- Added watch and watch_starve decorators to attach to a function\n- Added string formatting for watched dogs to match based on instance variables\n- Added watchdog call backs to be async\n- Added more tests for watchdog on classes\n- Implemented watchdogs on imac controller and rts controller\n- Updated tests to be less flaky for watch dog fed tests\n##### AWARE-414 Gateway state should be retained due to low frequency of messages on that topic\n- Changed form_message to support retained messages\n- Changed state and state_serial topology messages to retain\n- Added mqtt connected status that will send gateways/{device_id}/mqtt with {\"connected\": true} once setup and {\"connected\": false} once disconnected using the last will and testament mqtt connection packet\n##### AWARE-415 Gasguard sensor type sometimes displays as unknown\n- Removed detector-gas-analog as per request\n- Changed behaviour so that gasguard 2 doesn't send detector symbol units etc. Unless explicitly having read the detector type first\n- Changed start-up behaviour to read detector-type on startup so that gas values can be pushed through asap\n##### AWARE-416 IO errors during roll call can stop it completing or retrying\n- Added find-system command which will do a full system roll call like what is done at start up\n- Catches any error during system roll call and reschedules another system roll call\n- Each failed address based roll call will now reschedule that address to be roll called\n##### AWARE-417 Mqtt status message doesn't match the serial number type from other gateway messages\n- Updated mqtt broker to be able to use serial number as well as the logical device_id. Prefers serial number\n- Fixed temperature, humidity scaling on GG2\n- Fixed power set point alarms on aim\n##### AWARE-425 Feedback for Release 1 - pyAWARE\n- Detector gas value now sent on change of state or every 6 minutes. Only send if valid sensor head connected.\n- Added address-offline-count and address-clash-count\n- Changed address-resistance to have 0 resistance at address 0 instead of EOL resistance as it is misleading\n- Changed l1-data-block-just-complete to send every 60 seconds\n- Added write triggers for hysteresis config\n- Fixing an issue where sometimes the iMAC will report some bits in the high register of the address field causing the address to display wrong and it error on reads.\n- Fixed issue with rtd1 where address-flags and address-temp were the same address\n- Fixed issue where SIMP would not send the address\n- Add write validator triggers to RO4 to fix issue where the energize mask wouldn't write\n- Properly shift the relay timers\n- Fixed issue where relay timers could not be disabled (set to 0)\n- Fixed SIM-P command for updating parameters\n- Changed t90 test result to scale to seconds\n- Fixed issue where the detector-gas-value was returning as a list of values\n- Removed legacy RTS\n- Scaled last-t90-test-result\n##### AWARE-438 Slave Testing Feedback\n- Fixed a bug in non-batched mode which didn't have the appropriate topic parser\n- Turn off batching by default in local config as telemetry test results were delayed\n##### AWARE-441 Store and forward topic retrieval is pushing topic type back instead of topic name\n- Fixed issue where the backlog was storing the topic type instead of the topic in the topic field\n##### AWARE-440 Exception count watchdog addition doesn't seem to work\n- Discovered there is no issue with the starve on exception calling code. Added a test\n##### AWARE-439 Aiomodbus doesn't work after rebase\n- Added aiomodbus functionality to gglive just need to specify the client port in the config file\n##### AWARE-442 Add ability to mark certain topics to not be cached on disk such as heartbeats\n- Added optional cache parameter to config\n- Added feature to allow some messages to not get inserted into the database\n##### AWARE-432 Make rotary switch changes on RTS controller kill the pyaware process\n- Added rotary-sw event to kill pyaware if the switch position changes\n##### AWARE-444 Timestamp no longer encoding in latest develop\n- Updated ctype encode method to work with multiple parameters\n- Updated postbox reader to correctly return the parameters read\n##### AWARE-443 Add ability to only batch up responses from backlog and not from normal telemetry per topic\n- Added new parameter to mqtt config \"batchable_backlog\"\n- Changed the backlog and batch message manager to discriminate between backlog messages and normal messages for the purpose of batching.\n##### AWARE-446 Memory leak on slave when MQTT disconnected\n- Fixed issue where telemetry was v3 for local telemetry as uid are not provided\n- Fixed issue where memory leak happened when the mqtt broker was disconnected because it would block on adding it to the message manager queue and basically all messages remained in memory until the mqtt was cleared\n- Added basic memory line profiler to command line args\n- Changed the memory profile directory to match the cpu profile directory\n- Optimised form message by removing \"remove_keys\" and delegating it to the pydantic library. Reduces cpu usage from form_message for telemetry by 66%\n- Remove deepcopy for memory storage element for increased performance\n- Improved run_triggers performance by remoing iteration on every data item if it doesn't exist in the triggers\n- Parsing status was consuming significant CPU cycles. By moving to a lookup table we use slightly more RAM to gain big CPU improvements\n- Yanked network cables can cause cancelled errors to bubble up from underlying libraries. Catching this for purposes of cleanup can cause half shutdowns. Now relies fully on the stop event being set to clean up.\n##### AWARE-451 Changing detector type head result in very delayed updates and false representation of data\n- Fixed bug where imac modules would subscribe to parameter triggers multiple times if they were roll called more than once.\n- Added update detector method to GG2 to force scans of detector type when a hardware fault is cleared\n- Updated the detector type to unknown during a hardware fault\n##### AWARE-472 DI4 and RO4 are inconsistent in the relay representation\n- Fixed issue where relay status was inverting when RO4 does not actuate the line.\n##### AWARE-482 RTD Module causing Phantom RTS to appear\n- Added tests for roll call by address\n- Added failing case that must pass to change the RTS detection to rely on all addresses being online in the schema.\n- Added multiple address lookups for rts to improve robustness\n##### AWARE-489 Topology Message is being sent to the cloud\n- Updated the release notes. Removed topology message from gcp parsers.\n##### AWARE-454 Feedback for testing round 27-10-2020\n- Added retry to set parameters for the mismatched parameters for if the parameters in the module are not correctly set before being read back\n- Added state parameters to process_static_data so that current state objects can be sent on a poll loop.\n- Change logical_number to a state parameter so it doesn't change during the lifetime of the process\n- Updated gasguard triggers to reduce storage usage\n- Added error for when there is no module as the indicated address\n- Added test for bound method watchdog call\n- Added gas-value-invalid as it can be set without the hardware-fault being set when removing the gas head.\n- Added starve on exception for imac_eth_status and imac_ser_status\n- Improved response time for serial communication status to come back online. Reduced heartbeat 30->10 seconds\n- Only create RTSs if no modules are roll called and the address is online\n- Added check in system roll call to ensure that the online address in the RTS address range is actually an RTS\n- Changed from gas-value-invalid to detector-data-invalid for detection of change of head\n- Changed imac_module triggers to resolve all event triggers and modify the device data based on the return values. This allows things like changing the detector type to 0 to propagate into the current data processing.\n- Fixed issue where rts was returning as upper case instead of lower case making commands not work\n- Fixed issue set parameters were returning more parameters than were set was raising a mismatch error\n##### AWARE-430 Add write commands to Modbus TCP Server\n- Fixed missed error handling where if there was an attribute error in a comms object it would pass. Now it will be raised and the program will exit.\n- Added process write to modbus.py\n- Removed unused imports.\n- Moved translator to translator.py and reworked translator config.\n- Fixed encoding method inputs in translator and modbus writes.\n- Moved SP Pro device and translator to controllers. Updated translator publish and subscribe events to reference the id of their objects rather than their device/server ids given in config. This was to ensure uniqueness regardless of config.\n- Updated comap intelilite addresses from commissioning data. Added the ability for modbus devices to read discrete addresses from commissioning discoveries involving the binary input addresses on the comap intelilite controller.\n- Updated comap intelilite addresses from commissioning data. Fixed the discrete registers for pymodbus as they are read in as bits not addresses. Changed wording of \"modbus-eth-status\" to \"modbus-comms-status\" as serial devices use the same connection.\n- Tidied up read handle function on ModbusDevice. Added a TODO to remove pymodbus read functions in the future and exclusively use aiomodbus.\n- Fixed a spelling mistake with the pymodbus async wrapper for reading coils.\n- Added the ability for the ModbusDevice Client to use transformations. If no transforms exist in config the transformation pipeline will just pass the data through unchanged.\n- Fixed a bug where ParamCType's were not being encoded if data was a char.\n- Added support to aiomodbus for writing to addresses on ModbusDevice and integrated change with pymodbus in the form of wrapper functions. Tidied up translator write & modbusdevice process_write code.\n- Updated SP PRO device with same device process_write changes as the ModbusDevice and reformatted with black.\n- Updated write on sp pro device with comments.\n- Updated Selectronic and ComAp Gen Controller from commissioning.\n- Updated ParamBits encode method to work with previous pyAWARE changes.\n- Added a ParamBits encode change to ensure that server can read and write to these params. Changed the ParamBits test to include a decode aswell testing full functionality of the parameter. Fixed a bug where the blocks to write to where unordered causing errors in writing to modbus addresses.\n- Renamed pymodbus wrapper functions to indicate that they are private functions and part of pymodbus. Removed comments surrounding these.\n- Updated translator to use pyaware.transformations.transform.\n- Updated SP PRO config to include bms current param multiplication.\n- Hooked into Pymodbus set values method, to take advantage of server wirtes.\n- Added write addresses to both the Intelilite MRS16 and sppro 2i.\n- Fixed a bug on the ParamCType encode method where chars were not encoded back to integers for sending. This might need to be revised to determine whether unsigned or signed chars are best in this case. Unsigned chars have been chosen for now.\n- Added a new config reader to transformations.py to allow transformations to be built from a reference dictionary.\n- Added a reference for objects associated with translator.\n- Added modbus server writes to the translator, modbus devices and sp pro devices. Allowed for different modbus server register types.\n##### AWARE-473 AIM power set points command isn't scaled correctly\n- Changed aim power set point write triggers to match scaling on commands received\n- Fixed issue where scaling has to be done with integers\n- Fixed issue with ParamLookup datatype erroring if the parameter is not present\n##### AWARE-493 RTGM - Test RTD and LIM Modules\n- Updated rtd parameter specs to match datasheet\n- Cleaned up RTD module to use the imac module defaults\n- Changed comp_value in RTD1 to comp_ref_value to directly compare the value\n- Fixed issue where voltage-l1 was reading as address-flags\n- Fixed issue write validator was using the wrong comparison value\n- Fixed voltage-l1 scale for rtd1\n- Fixed ParamCTypeScale for encoding\n- Added some data_type tests\n##### AWARE-496 RTS module in imac are all responding to the remote bypass command. Make sure that the remote bypass is targeted\n- Fixed issue where remote trip and remote bypass were sending the command to all RTSs including phantom ones\n- Added l1 scan debug parameters. Sending on change of state as they only update at the end of the polling cycle.\n- Fixed topic name\n##### AWARE-497 Data returned from devices not on the bus after being disconnected physically\n- Added \"remove-devices\" command that can remove all references to the device from the polling and autodiscover\n##### AWARE-530 Add Support for Bender NGRM700\n- Add Device Bender NGRM\n##### AWARE-552 Industrial PC controller (IPC) causing cannot allocate memory error when getting IP address\n- Setting close_fds to True in case it isn't the default in order to potentially fix a file descriptor leak.\n##### AWARE-460 Horizon Solar Cube Commissioning\n- Added parameters to IME Nemo power meter for horizon's complete modbus table.\n- Updated intelilite MRS16 with complete horizon modbus table parameters.\n- Added complete horizon modbus table parameters to the sp pro battery inverter.\n- Removed send triggers from SP PRO parameters that are required locally but not for the cloud.\n- Removed send trigger from nemo power meter parameter as it is not required for the cloud, only locally.\n- Removed send triggers from intelilite_mrs16 parameters that are not required for cloud implementation only local.\n- Removed unnecessary parameters from intelilite_mrs16.yaml and sppro2i_spmc482_au.yaml.\n- Removed change of state triggers on parameters that did not need to be monitored continuously. These changes were made on intelilite_mrs16.yaml, nemo-d4Le.yaml and sppro2i_spmc482_au.yaml.\n- Updated intelite MRS-16 config file to correct formatting errors and remove address blocks that are not required.\n- Removed unused address blocks from sppro2i_spmc482_au.yaml\n- Fixed address blocks and data types for parameters in intelilite_mrs16.yaml and sppro2i_spmc482_au.yaml\n- Renamed watchdog ethernet to watchdog comms on ModbusDevice as comms encompasses the serial or tcp nature of the ModbusDevices.\n- Added a new datatype for decoding due to changes with the generator controller. Takes a list of string block addresses and determines whether an identifier is in them to set the parameter true or false.\n- Removed ParamTextToBool as it is no longer required.\n- Added alarms list to intelilite_mrs16.yaml config file so we know what alarms to trigger the fault reset alarm on. Added the fault reset button to acknowledge triggered alarms. Changed discrete poll to coils poll so they can be written to if required.\n- Changed the process_write function in ModbusDevice to allow writing from different registers. It will now use the handle given to the device in config to determine which register type to write to instead of using the register type it is given via events.publish. This way it is always guaranteed to be written to the right address.\n- Added a comap specific device to trigger on alarm events to acknowledge their occurance.\n- Updated the nemo-d4Le and intelilite_mrs16 to allow comms status to be retrieved via GCP.\n- Updated the intelilite_mrs16 to allow fault reset.\n- Added intelilite_mrs16.yaml fault reset command procedure to acknowledge alarms.\n- Added sp pro parameters that are being used on the CPS test device. This is to mainly maintain consistency.\n- Added warning logs for the Comap Alarm Acknowledgement process.\n- Moved fault reset command to the device class.\n- Added a metadata field to parameters. This is parsed separately from other parameter information. At this stage parameter kind is all that is stored here.\n- Moved ComApInteliliteMRS16 password definition to gateway.yaml as this is dependant upon user information.\n- Move the comap acknowledge alarm function into two logical pieces. The command execution and the alarm acknowledgement. Added function comments to comap commands.\n- Removed subprocesses from gateway heartbeat in replacement of ifaddr package. This is compatible with Linux and Windows.\n##### AWARE-555 On Fieldbus value change reboot Slave\n- Added stop on change of state for rts: fieldbus, serial_number, logical_number\n- Added stop on change of state for imac: fieldbus, serial_number\n- Removed telemetry for rts: fieldbus, serial_number, logical_number\n- Removed telemetry for imac: fieldbus, serial_number \n##### AWARE-562 Update to Heartbeats\n- Added mac address param to config\n- Changed mqtt config to behave like a dictionary when unpacking (**self.config)\n- Changed the topic names to include the gateway_id in local topic names\n- Sub topics and form message now can use all the parameters in the mqtt config\n- Refactored mac address to not use subprocess. Non-linux ignores the interface parameter and bases it off the primary network adapter\n- Added break to interfaces so it doesn't go through all the interfaces\n- Removed mqtt retained status messages as per request\n- Fixed issue with watchdog where an exception on callback would cause pyaware to get stuck in an infinite loop\n- Changed the default callback function in watchdog to be a callable that does nothing\n- Added an Empty Payload model which returns a 0 length string no matter the message content\n- Added device heartbeats with data source\n- Added device watchdog heartbeats to imac and rts controllers\n- Fixed heartbeat not working on imac master\n- Fixed devices heartbeat topic prefix from gateways to devices\n- Changed the command topics to use the logical name with serial instead of the gateway id as the front end doesn't know where it is targeting.\n##### AWARE-583 Gateway IP Address not validating correctly\n- Ensured that the gateway fetch_ip address function returns the IP address as a string, not the IP object.\n##### AWARE-526 Test Fault Reset on Gen Controller\n- Fixed a bug where await was called outside of an asynchronous function.\n- Stopped modbus reads for write only addresses.\n- Updated fault reset addresses and removed the need for a password.\n- Updated comap fault reset functions.\n- Updated comap alarms.\n- Updated comap alarms to include global alarm acknowledgement parameter.\n- Updated the alarm acknowledgement parameters.\n##### AWARE-615 Test 3.5.8 release\n- Added tests for newly added transformation functions.\n- Added config read tests.\n- Added tests for comap commands. This is currently implemented in the Horizon Power Solar Cube.\n-----\nVersion 3.5.7\n-----\n##### HOTFIX-AWARE-574\n- Added a config flag to disable initialising the backlog manager.\n\n-----\nVersion 3.5.6\n-----\n##### HOTFIX-AWARE-544\n- Corrected insulation-fail mapping in IPC Device\n- added outlet-run in IPC Device\n-----\nVersion 3.5.5\n-----\n##### HOTFIX-AWARE-540\n- Replaced the pip search with raw html parsing of pypi.org/simple/pyaware\n- Added beautifulsoup to requirements to parse the raw html\n- Added index_url optional parameter to config file to set where to search and update pyaware\n- Added try_except block around updates to ensure that a failed update will still run pyaware\n- Fixed tests to not lock up when calling init_db\n- Changed regex to use raw strings\n-----\nVersion 3.5.4\n-----\n##### HOTFIX-AWARE-488\n- Added a DbVersionManager to do database migrations.\n- Made the default migration to delete the current database and start fresh.\n- Removed the WAL files as well to ensure that transactions in the WAL are not committed to db.\n-----\nVersion 3.5.3\n-----\n##### HOTFIX-AWARE-489\n- Deletes store and forward db on startup to clear old messages \n\n-----\nVersion 3.5.2\n-----\n##### HOTFIX-3.5.2\n- Removed topology messages from default gcp parsers. \n\n-----\nVersion 3.5.1\n-----\n##### HOTFIX-3.5.1\n- Remove aiosppro from requirements.txt\n- Updated aiomodbus in requirements.txt\n-----\nVersion 3.5.0\n-----\n##### AWARE-286 Store and forward\n- Renamed storage to memory_storage to better indicate that it isn't on-disk storage- Moved memory storage to it's own file- Preliminary skeleton structure for on disk management- Added delayed commits to prevent every message being pushed to disk- Added UUID to the disk storage- Added UUID to the disk storage\n- Updated acking to delete the reference in the db\n- Added UUID as unique constraint to the DB and ignored duplicate entries as already being ready for recall in the database (allows for new attempts at messages to not need to touch the files)- Moved most of the publish disk storage logic to the send method\n- Separated batch send vs single send methods (batch send yet to be implemented)\n- Now correctly sends single messages and puts into DB when delayed and clears once sent- Batching and cache to disk now works for standard mqtt send commands- Changed RuntimeError to StopException to stop catching RuntimeErrors that were not anticipated- Added max queue size for batched messages\n- Added task_done calls to the queue for better clean up in the future- Renamed hbmqtt to client as we are only running one client variant now\n- Moved the batch and single message handling into their own classes to make it easier to test and reason about- Added id back in as a primary key for easier sorting\n- Get all unsent now has batched queries and returns a dictionary- Changed from sqlalchemy to aiosqlite improves performance by order of magnitude\n- Memory usage is optimised for get_all_unsent 1000 batch_size is about 5MB extra memory see Jira issue comments for benchmarks- Changed default message retrieval from 100 messages to 1000\n- Added unique constraint on UUID- Implemented the backlog manager\n- Refactored the batch processing so it can do batch hold off for each topic\n- Added max in flight messages limit to prevent ever exploding RAM when doing the backlog processing\n- Added configurable path locations from config\n- Added disk storage manager\n- SQLite set to autocommit mode so that simultaneous queries will not all join into the same transaction.\n- Database Size Manager can hard limit the size of the database\n- Database Size Manager will delete a portion of the old messages as set by clean_up_portion\n- Failed inserts that hit the hard limit will wait for the clean up and then retry\n- Added clarifying comments\n- Adding storage tests\n- Added pytest mock to test requirements\n- Added test and fixed bug with page_count calculations\n- Added test for database clean up\n- Added storage clean up tests\n- Added mqtt insert test\n- Moved from global reference to disk storage to explicit function reference parsed into the class\n- Added aiosqlite to requirements\n- Added in flight messages limit to handle single messages\n- Added aiosqlite to requirements\n- Added in flight messages limit to handle single messages\n- Moving more of the publish logic to the message manage\n- Clearing in flight messages on disconnect so they get resent after the device setup is complete\n- Reworked setup event to work in message handler\n- Added disconnect callback to client to do clean up\n- Fixed bug where I accidentally had disconnect code in the connect code meaning that it would never connect properly\n- Backlog manager now waits for the mqtt device setup to be on before queueing messages to send\n- Improved logging for backlog manager to show how many messages it queued\n- Fixed a bug where the scheduled disconnect would conflict with the on_disconnect tasks\n- Refactored message managers to use a base class\n- Changed modbus timeouts to not log tracebacks as it was polluting the logs\n- Added ability for hbmqtt gcp to parse the config file parameters\n- Fixed issue with pyaware not correctly shutting down due to excessive exception capturing. Look to removing all BaseException captures when the errors are known.\n- Added batching to GCP\n- Attempt to fix issue with windows not getting the clean up signals\n- Removed sqlalchemy from requirements as now using exclusively aiosqlite\n- Updated black formatting\n- Added database cleanup so it doesn't hang on shutdown\n- Added default config to database initialisation to store in memory and limit it to 500MB\n- Fixed bug in store and forward where the CancelledError was raised at the top level not allowing the poll loops to continue after a cancelled failure. This was introduced trying to help the clean up functions.\n- Added better error handling to attempt to fix issue related to backlog messages not being sent on error\n##### AWARE-348 Telemetry Test Command\n- Added command response model and timestamp\n- Fixed strange bug where imac address would have a bit in the high byte set causing the whole roll call to not work. Needs to be fixed on the iMAC\n- Added reset to idle\n- Added unsafe parameter writing to get a more accurate start time for telemetry test\n- Added timestamp to telemetry test the moment the data is set to start the test\n- Added checks to make sure actions don't take place when another action is ongoing\n- Fixed tests to account for timestamp in commands\n##### AWARE-377 Add Power Meter Nemo D4-Le \n- Added Power Meter Nemo D4-Le config file.\n- Fixed addressing and parameter naming conventions.\n- Removed scaling from nemo-d4Le config file. Scaling for this is moved to the front-end.\n##### AWARE-379 Add Selectronic Protocol SP-PRO\n- Added an SP Pro protocol device to device protocols. Updated config to parse this device from config.\n- Added a mock SP PRO device which is imported in place of pyserial. This is synchronous for the time being but replies with the expected responses. NOTE: This has been tested to work in place of an SP Pro device.\n- Added a test for the crc calculate function and read request creator function for the SP Pro protocol.\n- Added a read response validator for SP PRO protocol.\n- Updated the SP PRO device reference. Added a parse in config for the SP PRO client. Added aiosppro to list of dependencies.\n- Added Selectronic SP PRO 2i Battery Inverter SPMC48-AU config file.\n- Updated selectronic sp pro config file to fix formatting errors.\n- Added a reading poll interval to the SP PRO device mirrored from modbus device.\n- Added additional error checking for SP PRO read.\n- Added identify method to the SP PRO device so that it will appear on Topology call.\n- Updated trigger_send to prevent errors.\n- Updated the sppro config file to fix missing parameters and allow transformations.\n- Added transformations to allow pipeline functions to eb performed on each device.\n- Added a transformation pipeline on the SP PRO device. This allows for scaling, multiplying and removal of keys.\n- Removed SP PRO tests from test files as they are included in aiosppro.\n- Updated formatting.\n- Updated config file to remove the remove keys stage from transformation pipeline and added in change of state.\n- Added comments to transformation functions.\n-----\nVersion 3.4.0\n-----\n##### AWARE-136 Telemetry Test\n- Fixed a bug in action-remote-telemetry-test where there would be an error if the payload did not include data.\n- hbmqtt port\n- topic name filters and fixes\n- Topology now working in topic separation\n- Commands and command responses now working in topic separation\n##### AWARE-230 iMAC module additions\n- Added ability to parse config file format into parameters grouped by data source\n- Added spec files for iMAC to approprite directory (Not moved yet as still moving over parsing the configs)\n- Added Parameter form to imac_module_parameter_spec mirroring the generic modbus parameter spec\n- Refactored block_specs into parameters[\"block\"]\n- Updated default iMAC module to parse and store the config in the device\n- Updated default iMAC module to parse the param data types from the config file when present\n- Refactored imac controller and modules to use the config files in devices/ampcontrol/imac\n- Fixed issue in events where if there was no futures it would error when calling first or all\n- Added Lim parameter spec file\n- Fixed issue where ValidateParams would not validate due to block_specs no longer existing\n- Added proof of concept trigger for more trigger uses\n- Transitioning triggers to more powerful setup to accommodate the LIM\n- Moving triggers to legacy by default until new triggers implemented\n- Refactored triggers to return bools and update process_triggers to produce the desired output\n- New triggers with legacy definition working with modbus protocol test device\n- Added comparison and and triggers\n- Updated Lim to use comparison triggers so that digital and analog parameters are only sent in the appropriate mode\n- Moving imac to new triggers\n- Fixed triggers for imac modules\n- Added ability to add references to other parameters for the parameter form arguments\n- Updated the base ImacModule to parse the parameter specs on the update_specs() call so that address information can be encoded into the parameters\n- Removed event trigger from lim mode as the event methods are no longer needed\n- Added Sim-P using new address based parameter config parsing\n- Added missing meta field for modbus devices\n- Fixed issue with default imac module referencing data outside the modbus block ranges\n- Fixed some issues with config file data_type parsing\n- SIMG is now implemented in config\n- Added DO4\n- Added AIM Module\n- Fixed issues with detectors being mislabeled as infra-red when they were actually electrochemical\n- Removing legacy code\n- Refactored triggers into separate files\n- Removed legacy triggers\n- Fixed issue where process triggers were missing\n- Added write validator triggers so that the set-parameters command can use these triggers instead of custom code per device\n- Added write triggers for set-parameters command on imac modules\n- Update set parameters command to update_specs\n- Fixed config file where process triggers were blank\n- Fixed issue where write triggers were not being parsed correctly\n- Changed scheduled reads to retry once on failure and then schedule for 10 minutes in the future if it still fails. This ignores the configured deadlines in the config files\n- Fixes for parameter scheduling updates\n- Added 10 minute deadline to failed reads\n- Collect triggers refactor\n- Fixed an issue where the trigger_heartbeat did not stop when pyaware was meant to stop causing the program close to hang\n- Made auto discover more reliable by logging warnings instead of stopping the process when modules do not find the missing starting data. This can prevent issues where a module misbehaves for the missing data (eg. a GG2 without a sensor head)\n- Updated scheduled reads and collect triggers to work together\n- Changed write triggers so it can process multiple triggers in a list\n- Changed the validation error to InvalidCommandData so it raises the appropriate error code for the command\n- Fixed issue where it would error if the command was already processed (edge case of repeated command sends)\n- Code linting\n- Added read only parameter blocks for set point and display format configuration for SIM-G\n- Fixed process comparison function names\n- Added write comparison trigger\n- Updated comparison trigger to be able to trigger against set values instead of just the command values\n- Updated the LIM to have write validators\n- Updated the SIM-G to clarify that it is a modbus slave address and\n- Added write triggers to SIM-G\n- Changed range_int to range to closer represent that it now supports steps\n- Updated RO4 to use new parameter spec file\n- Removed RO4 code that is now handled by config\n- Fixed issues parsing by comparison found during testing\n- Fixed RO4 definitions to match datasheet\n- Fixed scaling range when scale was None\n- Fixed misnamed parameters in sim-g\n- Added flag parameter triggers\n- Removed store triggers when the send trigger was always\n- Added better feedback for failed lint checks\n- Fixed indentation issue with black linting that didn't appear on windows\n- Moxa only has openssl 1.0.1 installed. Cryptography 3.0 requires 1.1.1. Reverting until we can compile latest openssl for moxa box\n##### AWARE-258 Bugfix Gasguard Timestamp mismatch\n- Converted from ampcontrol timestamps to using integers packed into 32 bit registers for the timestamp\n- Removed unused imports\n- Converted from ampcontrol timestamps to using integers packed into 32 bit registers for the timestamp\n- Fixed issue where the timestamp didn't subtract the diff but just added the current time to the stamp\n- Code linting\n##### AWARE-267 Add pyaware linter\n- Reformatting with black\n- Added code format checks to the build process\n##### AWARE-270 Bugfix Linearity test time due no longer works\n- Removed linearity-test-time-due parameter. We can’t send through these values with the Moxa / Server architecture we will have. So we will remove this telemetry value (which was originally a helper function for the front end). The front end will now have to compensate it with the timestamp parsing logic that was done as part of AWARE-258\n##### AWARE-271 Bugfix topics missing slash when moving to hbmqtt\n- Added leading slashes back\n##### AWARE-272 Bugfix roll call system gets stuck in some hardware arrangements\n- Fixed issue with roll calling that could cause the imac2 to get in an infinite roll call loop. There is now a conditional lock during roll calls, enforces block reads only from the current generation in the roll call sequence\n##### AWARE-273 Bugfix Commands with hbmqtt don't work\n- Fixed the commands topic to include the device_id\n##### AWARE-276 Cleanup unused code and packages\n- First pass at deleting unused code\n- Removed sync vs async where it would swap based on the execution path\n- Updating requirements to remove all the additional packages and update the versions in order to test compatibility breaks\n- Removed some dead scripts\n- Reverted the removal of pymodbus config parsing as it is used in imac2 currently\n- Added cryptography back into requirements\n- Code linting\n##### AWARE-286 Store and forward\n- Added write validators to GG2 for set-parameters command\n- Fixed issue with gg2 config error\n- Added generic get parameters command\n- Added address-status-raw for unparsed address status reads\n- Changed the module status parser to be more explicit and only look at L1 line\n- L1 Mask removed as hard coded binary number and added as bitwise combination\n- Changed parse_status to match the logic in the javascript implementation on the imac controller\n- Changed parse_status to match the logic in the javascript implementation on the imac controller\n- Updated parse_status to cover all test cases and changed the logic to match\n##### AWARE-293 Remove leading slashes for topic names\n- Removed leading slashes in local topic definitions\n- Added send gateway heartbeat function that operates under imac2 protocol for now. Sends IP address (hard-coded for now) and timestamp every 30s via MQTT.\n- Error handling required for the function in future commits.\n- Function to be moved to gateway protocol in future commits.\n- Added error handling & logging around gateway heartbeat\n- Added ip address fetcher to fetch ip address from device command line. This is currently only supported on linux systems, in future to be supported on windows systems.\n- Updated the Topology MQTT message to include a top level Gateway device with the devices attached to it. Added support for generic gateway_ipc Added fetch function for gateway mac address. The gateway heartbeat in IMAC2 is to be removed, but is there for the sake of testing.\n- Removed gateway heartbeat from IMAC protocol into GatewayIPC. Updated device id of gateway to be the set id OR the id of the device it is connected to. Use Case: RTGM. Updated the topology to be updated with the IP-Address of the gateway.\n- Identify gateway during post init to remove invalid unconfigured mqtt messages through heartbeat.\n- Updated formatting -> black\n- Updated MQTT GCP topics to include state of device/gateway that is to be sent on startup or on change of ip address.\n- Added topics topology and gateway heartbeat to gcp mqtt to reduce errors. These can be removed if required.\n- Added device state to MQTT local parsers.\n##### AWARE-304 Slave ip address reporting\n- Remove slashes from topics\n##### AWARE-329 Bugfix AIM module not sending through analog data\n- Send through data-analog and data-power\n##### AWARE-330 Remove Slash from State topic\n- Removed reference to a dictionary where the data expected is an array.\n- Removed the gateway heartbeat from GCP Parsers as this is not required in these applications.\n- Added a check in topology factory to ensure that devices are in a List.\n- Refactored the topology message to ensure that the message is formatted correctly through the use of a pydantic model.\n- Updated checking if device has any data.\n- Updated identify method on modbus to work with current topology framework\n- Updated formatting\n- Changed topic name to gateways\n##### AWARE-343 Update the module status to match the iMAC 2 webpage\n- Fixed bug where numbers bigger than 8 bit would cause an error\n##### AWARE-346 Add build pipeline for develop and PRs\n- Add build steps for develop and all PRs (no pyz builds)\n- Added branch name to the pyaware version string\n##### AWARE-350 Bugfix IPM modbus mapping trip status 1 and 2\n- Updated trip status 1 & 2 to the correct trip bits.\n- Reformmatted code for pipeline\n##### AWARE-351 Bugfix Add Relay Running Status to IPM\n- Added Relay Running Status to IPM\n##### AWARE-361 Bugfix DI4 edit address not working\n- Simplified DI4 to more closely match RO4 configuration.\n- Fixed issue with edit address not working\n- Updated black formatting\n##### AWARE-374 Bugfix Gateway state message not sending to cloud\n- Fixed a bug where the state message was not sending via GCP. \n- Fixed a bug where if a message had a topic that wasn't allowed for, it would attempt to send anyway.\n- Fixed formatting.\n-----\nVersion 3.3.0\n-----\n##### AWARE-164\n- Fixed issue where adding a topic during a publish would cause a RuntimeError due to the dictionary changing size during the publish\n- Added system wide roll call on start-up\n- Delete various sync implementations (we only use async) to clean up code\n- Added special lock synchronisation object that will publish internal topics when acquired and release\n- Added roll-call-active to this new lock\n- Fixed issue where some parameters were returning 0-1 instead of False-True\n- Fixed issue ParamMaskBool would fail if the decoded data didn't exist\n##### AWARE-229\n- Added new fault states\n- Separated safe-gas integration as its own parameter\n- Removed detector-analog-diagnostic-state as it is a duplication of gas-value-invalid\n- Fixed issue with logged error raising it's own error\n- Changed find_missing_addresses to find_missing_starting_data.\n- Added base method to iMAC module for find_missing_starting_data that uses starting params so that each module doesn't need to implement the method individually\n##### AWARE-230\n- Added B30 config\n- Optimised ranges to read less data\n- Removed current-in-thd as per ben request\n-----\nVersion 3.2.0\n-----\n##### AWARE-161\n- Refactored code to allow for multiple sources to schedule reads\n- Added postbox read to gasguard 2\n- Added postbox triggers for reading and sending\n- Refactored timestamp commands to use the new read parameters\n- Removed sync read/write versions from modules.py as they are no longer used and were clogging up the file\n- Renamed telemetry-time to telemetry-test-time to be clearer on the parameter naming\n- Renamed calibration-time to linearity-test-time to be clearer on the parameter naming\n- Fixed test due to changed command name\n- Added linearity test due parameter which is 6 months from the last linearity test\n- Refactored modbus config parsing to be able to parse multiple sources and specify which modbus read type to use\n- Changed from partial functions to a factory functions as partial functions were showing warnings during shutdown that they were not scriptable (This issue is fixed in python 3.8)\n##### AWARE-206\n- Cleaned up modbus read handler so it doesn't need to be grabbed each loop\n- Added EMAX2 config file\n- Added ekipelsig.yaml\n- Fixed some scaling factors to match datasheet\n- Added m2m.yaml\n- Fixed modbus blocks as there are empty registers in m2m data table\n- Parses through config parameters so you can point to a networked network broker\n- Added frequency to m2m as it is in cloud but not in confluence\n- Fixed word order and frequency scaling\n- Removed scaling in order to do it on the front end\n- Added the correct block read for total positive energy\n- Removed scaling from EKIPELSIG to move to front end scaling\n- Added little endian word order to EKIPELSIG\n- Removed scaling factors from ABB M2M\n##### AWARE-212 \n- First draft of IPD.yaml\n- Fixed issue where sum could cause an error when summing a string\n- Updated IPD addressing to match datasheet\n- Fixed references from IPB to IPD\n- Apparently IPSIs are weird and ignore your starting address. Eg. reading from address 258 as your start address will actually return address 257 but reading from address 257 will return 257. I've adjusted the block start to address 1 so that the modbus addresses line up the data sheet.\n- Updating IPB and IPC to use the numerical over current curve instead of strings\n- Removing sum aggregate as it should not be done here but should use aggregation framework\n- Updated over-current-curve to Param as it is now parsed on the cloud as an enum\n- Fixed IP relay mappings for IPSI\n##### AWARE-214\n- Fixes for unreliable reads from the m2m locking up the asyncio task\n##### AWARE-217\n- Added voltage-3-phase and phase to phase currents for m2m\n- Added phase to phase currents for i33\n- Added phase to phase currents for i35\n- Added PM710.yaml\n- Fixes for PM710.yaml based on testing\n- Added new datatype to support the signed power factor unsigned int\n##### AWARE-220\n- Fixed issue with imac protocol not using the correct aggregation method\n- Fixed issues with imac modules not parsing the config file for aggregations\n- Fixed issue where I was assuming that all params had an idx. ParamBits did not. Changing it so it doesn't rely on that parameter.\n- Added frequency\n- Fixed modbus blocks to stop illegal address errors due to devices not having modbus blocks throughout the whole address space\n##### AWARE-227\n- Updated to use modbus library with fixes to timeouts\n- Updated modbus to parse through address_shift to fix issue with IPDs not reading\n##### RTGM-232\n- Added aggregations to build from config\n- Added aggregations to devices before sending\n- Updated the MQTT models and factories to accommodate the changes\n- Changed the default aggregations to the test device to check all the aggregation types\n- Added some config tests\n- Updated dev_gcp config to use manual aware_version\n- Added the aggregation tests\n- Modified the all aggregation for more performance\n- Updated config files to always store data for substation monitoring devices\n- Added more tests for auto update so that dev versions don't get updated if they are a higher version but do update if it is the same version\n- Updated the storage triggers on most imac modules to take advantage of the send aggregations\n- Updated config files to no longer do unnecessary storage triggers as the send trigger will now correctly store the current data.\n-----\nVersion 3.1.0\n-----\n- Cloud and modbus reliability fixes and optimisations. \n- Auto restart added.\n##### AWARE-103\n- IPM Config fixes\n- Token disconnection and qos fixes for hbmqtt\n##### AWARE-119\n- Dev setup to test the mqtt disconnect logic\n- Created an auto disconnection after a specified interval from config\n- Fixed an issue where the performance degraded over time. Every time it reconnected to the server, a new virtual device was created. This meant that each reconnect would send more and more messages, breaking the devices over time\n- Hides the error that happens when the client schedules a disconnect before the jwt expires.\n- Added token life parameter so that the token expiry can be set via config\n- Updated dev config to match the local and cloud broker\n- Backported the virtual device accumulation fix to paho client\n- Improved logging showing resolved messages. Still seems to duplicate logs\n- Increased token life back to 60 minutes\n##### AWARE-142\n- Fixed issues with modbus race conditions (new aiomodbus)\n- Fixed issue with subscriptions from GCP errors\n- Changed the modbus device poll to only sleep the poll interval after the first round of reads\n- Changed logging config to print to console instead of file due to unresolved issues with logging\n- Updated H035 to have config files store always to fit with new dev version of send aggregates\n- Updated aiomodbus requirements\n- Refactored to optimise imports and hopefully speed up start-up time on Siemens boxes\n- Optimised imports so pymodbus isn't imported unless directly required\n- Optimised mqtt client to no longer need virtual devices\n- Removed issue where jwt token would generate twice\n- Optimised subscriptions into one packet instead of 3 per device\n- Added logging for the config initialisation\n- Revert version bump commit\n- Added optional profiler to aware to debug H035 issues\n- Added optional profiler to requirements\n- Added profiler run for H035 for debugging purposes\n- Updated config handling to cache the configurations read until a configuration save happens\n- Updated hbmqtt config handling to do string comparison instead of element by element to save CPU time\n- Removed json prettier formatting for output logs to optimise CPU usage\n- Fixed bug where the send data was sending empty payloads\n- Fixed bug where lru_cache was returning the exact same object dictionary which would modify it across all devices resulting in devices not having parameters parsed correctly\n- Added triggers config load to the use config loader\n- Changed json encoder and decoder to use orjson\n- Fixed issue with copying lru cache not having ability to clear the cache\n- Replacing orjson with rapidjson as orjson doesn't have a precompiled 32 bit wheel and requires rust installed to compile.\n- Changed rapidjson to an optional import as the performance benefits didn't play out for our current workloads\n- Added profiler dumps for H-035\n- Updated devices to always store so that the send aggregations reflect the samples taken\n##### AWARE-158\n- Fixed naming for current-thd parameters\n##### AWARE-175\n- Fixed modbus block range to include the full total-positive-energy register\n- Added phase to phase voltages\n##### AWARE-172\n- Removed deployments folder and moved to http://prwivsvn0.primatec.local/svn/automation/Ampcontrol IOT/Device Management/Deployments\n##### AWARE-174\n- Removing deployment data from H035 merged request\n##### AWARE-175\n- Added pm5110.yaml\n##### AWARE-191\n- Fixed issue with logger that did not correctly override the root logger settings to log to file and console\n- Fixed issue in hbmqtt where the resolved mqtt message was not showing in logging\n- Added config file logging parameters to be able to disable certain logging functions logging: to_file: true # Setting to false will stop the AWARE.log default logging to happen to_stdout: true # Setting to false will stop it showing in the console or journalctl mqtt_log: true # Setting to false will stop the mqtt messages logging to individual topic files and will be hidden from the other loggers\n- Added scheduled restart\n- Refactored auto update into maintenance\n- Fixed auto update tests\n- Added hour parameter for future proofing more refined scheduled restarts\n##### RTGM-200\n- Added ability for command data to be parsed to the topic task. Allows for responding with data and pulling out specific command metadata\n- Added command response success on completion of discover process with data payload determining if the module was found or not; as per comments on RTGM-200 issue.\n- Fixed a bug where if the send data trigger was not stored beforehand, the send trigger would happen repeatedly\n- Added the send_data to the payload even if it had not triggered a storage\n##### RTGM-203\n- Fixed DI4 and RO4 relay and switch status telemetry\n- Updated tests for storage to check for patching items\n- Updated triggers to use latest sample in the reference dictionary instead of the first in order to be able to more simply store the values in send state and store state\n- Update generic modbus device to store the data and pull from storage when triggering send\n- Updated test device to store always\n- Updated imac controller and modules to use storage data for triggering\n##### RTGM-224\n- Fixed Param lookup to check against scaled values in the lookup instead of raw\n- Streamlined ParamLookup decoder\n##### RTGM-230\n- Added the ability to push the topic to subscribers (helps with wildcard subscriptions)\n- Added peek to get storage results non-destructively\n- Added arbitrary nested dictionary storage\n-----\nVersion 3.0.4\n-----\nCloud reconnect fixes\n##### AWARE-103\n- Updating H335 standard config to use integrated IPM config instead of local IPM config\n- Updating H335 standard config to include Outlet4 I33\n- Updating remaining IPM config based devices to use the installed IPM config\n- Added credentials for H334\n- Added credentials for H314\n- Added credentials for H330\n- Added credentials for H332\n- Added credentials and config for SS002\n- Added IPC config file\n- Added H270 Config file\n- Added H316 Credentials\n- Removing H270 IPC devices until added to the library and cloud\n##### AWARE-119\n- Dev setup to test the mqtt disconnect logic\n- Created an auto disconnection after a specified interval from config\n- Fixed an issue where the performance degraded over time. Every time it reconnected to the server, a new virtual device was created. This meant that each reconnect would send more and more messages, breaking the devices over time\n- Hides the error that happens when the client schedules a disconnect before the jwt expires.\n- Added token life parameter so that the token expiry can be set via config\n- Updated dev config to match the local and cloud broker\n- Backported the virtual device accumulation fix to paho client\n- Improved logging showing resolved messages. Still seems to duplicate logs\n- Increased token life back to 60 minutes\n##### RTGM-203\n- Fixed DI4 and RO4 relay and switch status telemetry\n##### RTGM-224\n- Fixed Param lookup to check against scaled values in the lookup instead of raw\n- Streamlined ParamLookup decoder\n-----\nVersion 3.0.3\n-----\nIPM Config Fixes\n##### AWARE-103\n- IPM Config fixes\n- Added missing I33 for H324\n-----\nVersion 3.0.2\n-----\nWCX3 Config\n##### AWARE-103\n- Added IPM Config file\n- Added Config for WCX3 Underground Substations and DCBs\n-----\nVersion 3.0.1\n-----\nFixes for auto update\n##### AWARE-37 \n- H-266 update to config\n##### AWARE-114\n- Added wheel to the pip install requirements as pip 20.1 needs wheel installed to build some packages\n- Added aware_version: \"manual\" which will skip auto updates no matter what is installed\n- Added better error handling for pyaware.stop() to hbmqtt so it can escape during setup.\n- Added better logging for pyaware.stop() for hbmqtt client\n- pyaware.stop() will now raise an error the currently running task as well. This ensures that the process doesn't have to wait for an await signal to start cleaning up.\n- Added a _stopping variable to ensure that only one shutdown method attempts to happen at once. A second stop can happen after the first shutdown fails to complete.\n- Catches RuntimeError to prevent attempting to stop multiple times\n- Fixed Hbmqtt error regarding downloading config from GCP\n-----\nVersion 3.0.0\n-----\nMajor release for auto update feature.\n##### AWARE-7 \n- test 035 with best case connection settings\n- Added configurable QOS, keep alive, and clean session for cloud.yaml to override\n- Added keep alive to hbmqtt.py\n- Added example on how to override parameters for mqtt clients\n- Fixed reference to correct config for qos parameters\n##### AWARE-18 \n- Added H-546 commission files\n- Add Main.py for HST H-546\n- Added RSA key for H-546\n- H-546 Remove Main.py update credentials update config\n##### AWARE-107\n- H-233 added gateway.yaml and Commission file\n- Updated H-234 Config\n##### AWARE-108\n- Added subscriptions to system/reboot which will kill the pyaware process for gateway devices\n- Added example configuration with local MQTT and simple modbus device for easy testing\n- Fixed hbmqtt so it can now receive commands\n- Added error handling on main startup so if invalid config is present it doesn't lock up pyaware\n- Added topic wildcard matching for hbmqtt subscription callbacks\n- Now ignores commands in the default command handler with no payload as there is no correlation ID to work with.\n- Renaming reboot to stop to reflect the actual action taking place and leaving reboot available for OS reboot\n##### AWARE-110\n- Fixed issue with total-positive-energy scaling incorrectly\n##### AWARE-113\n- Created awaresupport accounts to pypi\n- Updated bitbucket-pipelines.yaml to include deployment to pypi\n- Tested integration to pypi and test pypi\n- Added Secured API tokens to bitbucket\n- Tried and removed atlassian/pypi-publish:0.2.13 integration as it doesn't work\n- Tested builds deploy to test pypi\n##### AWARE-114\n- Added version checker auto update using pip and pypi.org\n- Auto update uses the version logic as specified in AWARE-114 issue description\n- Added unit tests to check the auto update logic\n- Tested the auto update logic manually and confirmed to work\n##### RTGM-205 \n- Changed name of L1 Short circuit to include status\n\n-----\nVersion 2.4.0\n-----\n##### AWARE-7\n- Setup now retries if an exception is raised (Does not resend message on timeout as that is not in MQT3.1.1 spec so I'm going to trust it)\n- Added file logging to AWARE.log for main entry point for config file based setups\n- Updated aiomodbus requirements\n- Added delay for failed setup\n##### AWARE-19 \n- updated gateway.yaml\n##### AWARE-37\n- Added Config file for IPB\n- Added no-authentication mode to hbmqtt for local debugging\n- aiomodbus rtu config parsing\n- Added address shifting to generic modbus device to support IPSI addressing\n- Updated IPB config to include processing triggers on the status register\n- Added Gateway config for H266\n- Updated ParamLookup to not return if the lookup value is invalid\n- Updated config to have separate comms parameter parsing\n- Changed the logging of modbus_device pipeline to only log on start and not each iteration\n- Bumped the aiomodbus version\n- Added commission2.py which does a full raw read based on the config files\n- Changed the cloud broker to hbmqtt\n- Fixed issue where changing the broker uri wasn't enough to get a clean session to GCP. Now has a fresh session each connect\n##### AWARE-44 \n- Update/Create all commission files for HST SS003\n##### AWARE-55 \n- Added main.py for H-270\n- Credentials added\n- Updates to H-270 deployment files\n##### AWARE-68\n- Added config parsers for local and cloud mqtt brokers for hbmqtt paho and gmqtt.py\n- Added on_connect and overrode connection method to allow for generating the uri username password for each reconnect\n- Moved paho client into it's own module WIP GMQTT basic implementation but does not work with GCP in current form\n- Added paho import for legacy entry point\n- Replaced the connected event with the one linked with the hbmqtt client.\n- Added error handling to the hbmqtt receive loop\n##### RTGM-200\n- Added find module by serial command method\n- Fixed issue with connect not checking the is_set correctly as it was left over from using it as a flag instead of an event\n- Added a clearer error message when the module doesn't appear to exist\n##### RTGM-203\n- add Raw DI values\n- Added switch-status and relay-status to reflect the switch and relay state without the inversion present from the invert bit\n- Added explicit read for invert status on module discovery\n- The processed relay-status and switch-status now only complete if invert-status is known\n##### RTGM-221\n- Added group validators for set-parameters\n- Added WriteAndValidateParams to do the writing, reading and validating parameters is one step\n- Updated the modules to use Group validators and WriteAndValidateParams for set-parameters command\n- Fixed the validators to work with 0 values and true/false\n-----\nVersion 2.3.0\n-----\n- Added GCP config parsing\n- Improved logging throughout\n- Fixed issue with triggers always firing\n- Added HBMqtt as an alternate client\n- Added aiomodbus as an alternate client\n- Added configuration file device definition for substation monitoring\n- Refactored config and mqtt code\n-----\nVersion 2.2.0\n-----\n- Address 0 Status will always be System Owned \n- Set-Parameters no longer throws error for undefined parameters\n-----\nVersion 2.0.0\n-----\n- Ensham first release\n- RTGM setup for phase 1 deployment\n- Huge changes overall, maintains backward compatibility with Substation Monitoring through legacy API (main.py)\n- Builds available for zip app deployment\n-----\nVersion 1.2\n-----\n- Added GCP client\n- Added iMAC protocol\n- Skeleton structures\n and implementation in preparation for Architecture 2.0\n- Added more parameters to I35\n- Added HpbSubPlc to devices\n- Cloud loading of configuration\n- Cleaner shutdowns\n- Saves and shutdown after new gateway configuration\n-----\nVersion 1.1.1\n-----\n- Updated device data_info to new naming convention\n- Updated script to update database from configuration file\n- H363 specific deployment information\n-----\nVersion 1.1\n-----\nThis release is aimed at targeting the Real Time Gas Monitoring demo and will reflect the state of the library of the demo as it is deployed.\n\n\n- Added measurement scaling to SI units\n- Added Modbus device write/update\n- Added ModbusBitMask to break down registers into labelled individual bits\n- Added configuration files to eventually substitute main.py\n- Added ModbusTCP\n- Added better error handling and cleanup to the scheduler\n- Changed the default byte and word order of modbus to fit industry standard\n- Created script for updating mongodb from deployment configuration\n- Added the median aggregation\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyaware",
    "package_url": "https://pypi.org/project/pyaware/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyaware/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/pyaware/6.0.0/",
    "requires_dist": [
      "aiomodbus (>=0.5.2)",
      "amqtt-pazzarpj (==0.10.1.dev1)",
      "transitions (==0.8.7)",
      "websockets (==9.1)",
      "passlib (==1.7.4)",
      "docopt (==0.6.2)",
      "PyYAML (==5.4.1)",
      "pymodbus (==2.3.0)",
      "cryptography (==2.8)",
      "PyJWT (==1.7.1)",
      "ruamel.yaml (==0.16.10)",
      "deepdiff (==5.0.1)",
      "pydantic (==1.6.1)",
      "aiohttp (==3.6.2)",
      "python-dateutil (==2.8.1)",
      "packaging (==21.3)",
      "yappi (==1.2.5)",
      "janus (==0.5.0)",
      "aiosqlite (==0.17.0)",
      "beautifulsoup4 (==4.9.3)",
      "requests (==2.25.0)",
      "ifaddr (==0.1.7)",
      "puresnmp (==1.10.2.post1)",
      "MarkupSafe (==2.1.1)",
      "jinja2 (==3.1.2)",
      "methodtools (==0.4.5)",
      "azure-iot-device (==2.12.0)"
    ],
    "requires_python": ">=3.7.0",
    "summary": "Framework for reading connected devices and publishing to the AWARE cloud",
    "version": "6.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17391127,
  "releases": {
    "2.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5c3b73bed8f1f1c46a3e4e2839dfb680d7933d4b07f571c09ad343cc120e8bbb",
          "md5": "c8c1e75d9d904e2c78166425abfabba2",
          "sha256": "a2f24aa0cc130861bcb5f564567ed7634c16c715a47c02678af40a0fc5aa7c50"
        },
        "downloads": -1,
        "filename": "pyaware-2.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c8c1e75d9d904e2c78166425abfabba2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 123125,
        "upload_time": "2020-04-27T23:57:56",
        "upload_time_iso_8601": "2020-04-27T23:57:56.865596Z",
        "url": "https://files.pythonhosted.org/packages/5c/3b/73bed8f1f1c46a3e4e2839dfb680d7933d4b07f571c09ad343cc120e8bbb/pyaware-2.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "66206acb9372b681a871149135dad11c3ee361e30a317dbd4e90903f9411aa86",
          "md5": "1a0b2dcc5d0aba8c760abf61b5b94a05",
          "sha256": "97fd79d66bf4faca89c15b112e1858bbd227f16b35df361bad76502a07e5cb36"
        },
        "downloads": -1,
        "filename": "pyaware-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a0b2dcc5d0aba8c760abf61b5b94a05",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 122290,
        "upload_time": "2020-04-29T03:20:35",
        "upload_time_iso_8601": "2020-04-29T03:20:35.326537Z",
        "url": "https://files.pythonhosted.org/packages/66/20/6acb9372b681a871149135dad11c3ee361e30a317dbd4e90903f9411aa86/pyaware-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c2671595ae3bfd970471661de4a81cc67e960dbdc0f714e432e698b4e5ca8ace",
          "md5": "3d293317bedf6ef62b621ede8219a10e",
          "sha256": "866513c2a6a960bcb96b88b4af94124402348181db225799203a41d9124de78b"
        },
        "downloads": -1,
        "filename": "pyaware-3.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d293317bedf6ef62b621ede8219a10e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 122479,
        "upload_time": "2020-04-30T03:30:16",
        "upload_time_iso_8601": "2020-04-30T03:30:16.753751Z",
        "url": "https://files.pythonhosted.org/packages/c2/67/1595ae3bfd970471661de4a81cc67e960dbdc0f714e432e698b4e5ca8ace/pyaware-3.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a412ac2237beb9a78e4e3a04a1684155d3aba872cf845ab72b4301ae3770bbd8",
          "md5": "d08cb0d59c602e9dac614405c3d71155",
          "sha256": "f275907f8bc9df9b51fbe9e9f2d02b6ff6b440c1658e4ca45df849ae71db6bee"
        },
        "downloads": -1,
        "filename": "pyaware-3.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d08cb0d59c602e9dac614405c3d71155",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 123636,
        "upload_time": "2020-05-05T02:21:52",
        "upload_time_iso_8601": "2020-05-05T02:21:52.928062Z",
        "url": "https://files.pythonhosted.org/packages/a4/12/ac2237beb9a78e4e3a04a1684155d3aba872cf845ab72b4301ae3770bbd8/pyaware-3.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b8f923b9e5f4ebc9dc65b70556cb728d0a07dbe5e051de38504eeacf7efccd4",
          "md5": "b66bb865aae0efcb85d6888aa6abbe08",
          "sha256": "c079e514153c103bfcf5089f3f6a724e943b4aa9d891111578a5df497bebc219"
        },
        "downloads": -1,
        "filename": "pyaware-3.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b66bb865aae0efcb85d6888aa6abbe08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 123636,
        "upload_time": "2020-05-05T04:25:26",
        "upload_time_iso_8601": "2020-05-05T04:25:26.039254Z",
        "url": "https://files.pythonhosted.org/packages/4b/8f/923b9e5f4ebc9dc65b70556cb728d0a07dbe5e051de38504eeacf7efccd4/pyaware-3.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87fe9beb5f27fb5aaed3c9eb9b3fb7fa4cc6cd50d9c1a9fa472aaffadd6bdabb",
          "md5": "14fc31bffb837656339d212165610dd4",
          "sha256": "ba7964ca77365f5bf032a6f17fed21a05f92dd56d60e480183f7578337f683df"
        },
        "downloads": -1,
        "filename": "pyaware-3.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14fc31bffb837656339d212165610dd4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 125140,
        "upload_time": "2020-05-11T23:29:50",
        "upload_time_iso_8601": "2020-05-11T23:29:50.801296Z",
        "url": "https://files.pythonhosted.org/packages/87/fe/9beb5f27fb5aaed3c9eb9b3fb7fa4cc6cd50d9c1a9fa472aaffadd6bdabb/pyaware-3.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3a6dfcd31dc965a2a75adf99e29fd99d4cc122c8a59a00784b453f8cbcb7676",
          "md5": "c0e4331d0ec1e1a1c25c4e8bfcd2ba8a",
          "sha256": "f590fd7f3a136a83e97beb5ec4083e3a5740445512328d769e3cf1e41b090158"
        },
        "downloads": -1,
        "filename": "pyaware-3.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0e4331d0ec1e1a1c25c4e8bfcd2ba8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 125242,
        "upload_time": "2020-06-12T00:58:33",
        "upload_time_iso_8601": "2020-06-12T00:58:33.040862Z",
        "url": "https://files.pythonhosted.org/packages/c3/a6/dfcd31dc965a2a75adf99e29fd99d4cc122c8a59a00784b453f8cbcb7676/pyaware-3.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "055fe82dd7fa968eaef23fb1f677f590dbe9aa421a7ca3c612f38aeae78885a7",
          "md5": "ea35b1b5cd39cab21cdc658f8f629931",
          "sha256": "976e86cf9efa36ad0b8d055fc26e19423e5925c3d6a99af55137d4e3b2d16d0f"
        },
        "downloads": -1,
        "filename": "pyaware-3.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea35b1b5cd39cab21cdc658f8f629931",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 130035,
        "upload_time": "2020-06-24T04:48:21",
        "upload_time_iso_8601": "2020-06-24T04:48:21.149630Z",
        "url": "https://files.pythonhosted.org/packages/05/5f/e82dd7fa968eaef23fb1f677f590dbe9aa421a7ca3c612f38aeae78885a7/pyaware-3.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8acbe822d65ef15eda47580d90670d2e3d79bb673e1840a9431b160abba99348",
          "md5": "4cfdfe4c61694ad5bc56334345d73970",
          "sha256": "9755b3fc551889cf005aa32a1db8df8c737ac426d8c00ebe47f481f14e3db22e"
        },
        "downloads": -1,
        "filename": "pyaware-3.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4cfdfe4c61694ad5bc56334345d73970",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 130840,
        "upload_time": "2020-07-14T05:31:57",
        "upload_time_iso_8601": "2020-07-14T05:31:57.063050Z",
        "url": "https://files.pythonhosted.org/packages/8a/cb/e822d65ef15eda47580d90670d2e3d79bb673e1840a9431b160abba99348/pyaware-3.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "17ffa0398e658a07db46379b2b6fd944996582fca7aec4912ba959b90a6beafc",
          "md5": "5814748afcb7a690b9be59eff89b8995",
          "sha256": "942a28e38b6c2b68aba14282b6fadc0d6c811cc963b878b7901390e76b50040f"
        },
        "downloads": -1,
        "filename": "pyaware-3.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5814748afcb7a690b9be59eff89b8995",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 107163,
        "upload_time": "2020-09-22T06:08:05",
        "upload_time_iso_8601": "2020-09-22T06:08:05.791448Z",
        "url": "https://files.pythonhosted.org/packages/17/ff/a0398e658a07db46379b2b6fd944996582fca7aec4912ba959b90a6beafc/pyaware-3.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43e1d9c5aab54196646830055bdb7337fddef00d601971b6ccdabe187591ec4f",
          "md5": "5dad44ab659513d1ca896da9610ba240",
          "sha256": "974f0ea7d70269325ba62c7b9257be743c85301fa0ab3512714d5b95c1c1bb12"
        },
        "downloads": -1,
        "filename": "pyaware-3.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5dad44ab659513d1ca896da9610ba240",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 122853,
        "upload_time": "2020-10-12T23:37:38",
        "upload_time_iso_8601": "2020-10-12T23:37:38.279459Z",
        "url": "https://files.pythonhosted.org/packages/43/e1/d9c5aab54196646830055bdb7337fddef00d601971b6ccdabe187591ec4f/pyaware-3.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7466ba48b8b140bfb47ea478c22e2351b89025b4ce710f912d8286e8600a928d",
          "md5": "edcd54b3f39226c8eaad0389219299e7",
          "sha256": "2d183a8ba5943abf5fbb04bb3238e2b0fe5cff29d6fd49e16bab775aa1fa548b"
        },
        "downloads": -1,
        "filename": "pyaware-3.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edcd54b3f39226c8eaad0389219299e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 122847,
        "upload_time": "2020-10-20T01:36:34",
        "upload_time_iso_8601": "2020-10-20T01:36:34.019254Z",
        "url": "https://files.pythonhosted.org/packages/74/66/ba48b8b140bfb47ea478c22e2351b89025b4ce710f912d8286e8600a928d/pyaware-3.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9128d3c1bd1257ea3e40db94cd30f6e98299ed49f0a12057a0892ca590bb9a96",
          "md5": "876c598ca80d64d41d2fa308001cbf2b",
          "sha256": "7f4b5abb681fce5cecbe2c6f3e9ef2039290b4e17307ea543d995e26ccabc607"
        },
        "downloads": -1,
        "filename": "pyaware-3.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "876c598ca80d64d41d2fa308001cbf2b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 122842,
        "upload_time": "2020-11-16T23:07:05",
        "upload_time_iso_8601": "2020-11-16T23:07:05.954268Z",
        "url": "https://files.pythonhosted.org/packages/91/28/d3c1bd1257ea3e40db94cd30f6e98299ed49f0a12057a0892ca590bb9a96/pyaware-3.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.5.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dc05236a524ea09746c86e8a1a22f39f264e6d6da0762b5051f1877e183106e",
          "md5": "4effeec7c2f1ffc99e70110029784709",
          "sha256": "797fb30d2c5f69d5663fed1cf5f00bd523ba76e585c4358a19774146b4250797"
        },
        "downloads": -1,
        "filename": "pyaware-3.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4effeec7c2f1ffc99e70110029784709",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 122896,
        "upload_time": "2020-11-17T01:10:21",
        "upload_time_iso_8601": "2020-11-17T01:10:21.130506Z",
        "url": "https://files.pythonhosted.org/packages/1d/c0/5236a524ea09746c86e8a1a22f39f264e6d6da0762b5051f1877e183106e/pyaware-3.5.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.5.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f6ea3a62586ea646cd6b8eba68a86d47ccaff84cba597d2edf6c9257ba935d81",
          "md5": "b06ee3e25acf888e8548681cb3619b73",
          "sha256": "fe5e0b99bd26088ded970fac9e2fb97250c387b082b65d2abaa2463c54a953e4"
        },
        "downloads": -1,
        "filename": "pyaware-3.5.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b06ee3e25acf888e8548681cb3619b73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 123379,
        "upload_time": "2020-12-13T23:15:39",
        "upload_time_iso_8601": "2020-12-13T23:15:39.222790Z",
        "url": "https://files.pythonhosted.org/packages/f6/ea/3a62586ea646cd6b8eba68a86d47ccaff84cba597d2edf6c9257ba935d81/pyaware-3.5.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.5.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "13baac9f6d3a467a2f66d072ac5f1b0efcb61d564661373d26d51e61ec57c40e",
          "md5": "7c2998237b1b9b408f3a8c4f03d17bba",
          "sha256": "408052845eef69ed5bdab37ae3e74c73b4152d2b5b0754fece3d6516463b7248"
        },
        "downloads": -1,
        "filename": "pyaware-3.5.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7c2998237b1b9b408f3a8c4f03d17bba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 124006,
        "upload_time": "2020-12-15T02:30:38",
        "upload_time_iso_8601": "2020-12-15T02:30:38.764609Z",
        "url": "https://files.pythonhosted.org/packages/13/ba/ac9f6d3a467a2f66d072ac5f1b0efcb61d564661373d26d51e61ec57c40e/pyaware-3.5.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.5.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffa0f951ca4ed97aedb7b1076ae15a1d20379e46f5f2326874742104de05fc42",
          "md5": "f0b0f26c44350b04fd28ec1b2a629e97",
          "sha256": "e26568cf648ed35350d2d77eae853d45725ce55a9783c4fcb5d6de36391465d2"
        },
        "downloads": -1,
        "filename": "pyaware-3.5.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f0b0f26c44350b04fd28ec1b2a629e97",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 124024,
        "upload_time": "2020-12-17T04:47:17",
        "upload_time_iso_8601": "2020-12-17T04:47:17.966898Z",
        "url": "https://files.pythonhosted.org/packages/ff/a0/f951ca4ed97aedb7b1076ae15a1d20379e46f5f2326874742104de05fc42/pyaware-3.5.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.5.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab90414cb11e4ab9c0110c2519f6744b5b288899f202e81ff1c72b6a7d4c4057",
          "md5": "dfc381cf705ab857751d31cfdfdbed56",
          "sha256": "1808f3fcac60846916fdd948ac201f121ddbd1b5a8188d81eb08f360134e02ac"
        },
        "downloads": -1,
        "filename": "pyaware-3.5.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dfc381cf705ab857751d31cfdfdbed56",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 124065,
        "upload_time": "2021-01-11T02:36:16",
        "upload_time_iso_8601": "2021-01-11T02:36:16.356320Z",
        "url": "https://files.pythonhosted.org/packages/ab/90/414cb11e4ab9c0110c2519f6744b5b288899f202e81ff1c72b6a7d4c4057/pyaware-3.5.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.5.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f1aebe7055f01f2544ed99e2d87a3d35d916d0b59bf3125882dd5c1a7574d28",
          "md5": "977805ae1aa5f74e0d9341267387b8f2",
          "sha256": "9aba39eab3d6686477be2524bd62cebbd00e747f2ece8fcacbed4b4abdffd657"
        },
        "downloads": -1,
        "filename": "pyaware-3.5.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "977805ae1aa5f74e0d9341267387b8f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 142157,
        "upload_time": "2021-03-01T03:37:46",
        "upload_time_iso_8601": "2021-03-01T03:37:46.738144Z",
        "url": "https://files.pythonhosted.org/packages/6f/1a/ebe7055f01f2544ed99e2d87a3d35d916d0b59bf3125882dd5c1a7574d28/pyaware-3.5.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.5.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c64d40b9d8756a3793f6faf82d3abb7d847111e98d610e8a2b74dd7f87840740",
          "md5": "c45d8c19a86df0a67fce430fbf413eae",
          "sha256": "b07d2b490a3d89f96713b173d574bf44e2dd3c373155919cdf2f0d2842215eac"
        },
        "downloads": -1,
        "filename": "pyaware-3.5.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c45d8c19a86df0a67fce430fbf413eae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 142899,
        "upload_time": "2021-06-07T07:10:58",
        "upload_time_iso_8601": "2021-06-07T07:10:58.105080Z",
        "url": "https://files.pythonhosted.org/packages/c6/4d/40b9d8756a3793f6faf82d3abb7d847111e98d610e8a2b74dd7f87840740/pyaware-3.5.9-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56bbd6cceccfa25d5f2803533eca013a8f69b1e4581a7a94254f63f13cd48028",
          "md5": "5beb63817c36dac941b81cb8bda8c414",
          "sha256": "1a16063e29215a7495995011f5d81643d2cb0282856cdbdfb3f0c151e769e61d"
        },
        "downloads": -1,
        "filename": "pyaware-4.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5beb63817c36dac941b81cb8bda8c414",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 144128,
        "upload_time": "2021-03-17T00:37:47",
        "upload_time_iso_8601": "2021-03-17T00:37:47.806809Z",
        "url": "https://files.pythonhosted.org/packages/56/bb/d6cceccfa25d5f2803533eca013a8f69b1e4581a7a94254f63f13cd48028/pyaware-4.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38d2382c245636888c4956e014a768ae1699fa951b44be93bf85feef6df8843b",
          "md5": "993489691ad83ee6d923072fba495819",
          "sha256": "81a929dd98b0f4baa7da58bceb3de9a42052845a53aa8c0222c1e50ad52746e0"
        },
        "downloads": -1,
        "filename": "pyaware-4.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "993489691ad83ee6d923072fba495819",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 145705,
        "upload_time": "2021-03-29T01:56:04",
        "upload_time_iso_8601": "2021-03-29T01:56:04.528053Z",
        "url": "https://files.pythonhosted.org/packages/38/d2/382c245636888c4956e014a768ae1699fa951b44be93bf85feef6df8843b/pyaware-4.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "635c7f2b575509d2cc07b0a8d720afde0ce5ab9b1b5bc29bef91c6a60dd104f5",
          "md5": "247fc67adc13719de0ed0d57ed91d04c",
          "sha256": "afac829abcc7cc095a82aa6c62de8cfac2dbf41f5a8918f15294cabb983d4276"
        },
        "downloads": -1,
        "filename": "pyaware-4.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "247fc67adc13719de0ed0d57ed91d04c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 146958,
        "upload_time": "2021-04-29T01:48:27",
        "upload_time_iso_8601": "2021-04-29T01:48:27.130325Z",
        "url": "https://files.pythonhosted.org/packages/63/5c/7f2b575509d2cc07b0a8d720afde0ce5ab9b1b5bc29bef91c6a60dd104f5/pyaware-4.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "661afdc1d2368b1b195cccba34db50475497a7873829028cefa865c6a4c8fbb2",
          "md5": "f87aa5cbca98a10c549dc25eed5622e7",
          "sha256": "b3edd1c3b97528be2f7314adff5726c7e2f38714b7e3f5d5f08e9289aae10bd4"
        },
        "downloads": -1,
        "filename": "pyaware-4.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f87aa5cbca98a10c549dc25eed5622e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 185294,
        "upload_time": "2021-06-15T00:05:23",
        "upload_time_iso_8601": "2021-06-15T00:05:23.136698Z",
        "url": "https://files.pythonhosted.org/packages/66/1a/fdc1d2368b1b195cccba34db50475497a7873829028cefa865c6a4c8fbb2/pyaware-4.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2692b8110f91bb46dd9f8524f1f3a05465564a424e457824c232b7d79c02b4a7",
          "md5": "e6678ac179cbf695563077c2bfd845fd",
          "sha256": "6849fb037c4a4f68fb839776facbca83c071a21d1c7cae3c8e7913e08db22120"
        },
        "downloads": -1,
        "filename": "pyaware-4.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6678ac179cbf695563077c2bfd845fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 208929,
        "upload_time": "2021-06-23T23:26:28",
        "upload_time_iso_8601": "2021-06-23T23:26:28.744445Z",
        "url": "https://files.pythonhosted.org/packages/26/92/b8110f91bb46dd9f8524f1f3a05465564a424e457824c232b7d79c02b4a7/pyaware-4.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be73086cffcf62d4b21aaab986465b20b9d7eea857ef39deaac20fe7a51000bf",
          "md5": "a180aee7e8e74acbb91c4d3aef997897",
          "sha256": "dfe31b11a0c9ed850f0639279d2c13f77710d2c6a29c5f6788b9569fb52c81c8"
        },
        "downloads": -1,
        "filename": "pyaware-4.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a180aee7e8e74acbb91c4d3aef997897",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 201491,
        "upload_time": "2021-08-17T02:04:39",
        "upload_time_iso_8601": "2021-08-17T02:04:39.920340Z",
        "url": "https://files.pythonhosted.org/packages/be/73/086cffcf62d4b21aaab986465b20b9d7eea857ef39deaac20fe7a51000bf/pyaware-4.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48645256f7c725bd08dc20170862bb68c15eacb3c8a727339384deaae831e813",
          "md5": "59038960d7a2f4b310bb0a7279bf81fd",
          "sha256": "c0b4b9d2d32a36c05f3fef25f96ce054a175849cfb8e51b457ba2151eebf91bf"
        },
        "downloads": -1,
        "filename": "pyaware-4.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "59038960d7a2f4b310bb0a7279bf81fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 205432,
        "upload_time": "2021-11-22T00:21:44",
        "upload_time_iso_8601": "2021-11-22T00:21:44.455258Z",
        "url": "https://files.pythonhosted.org/packages/48/64/5256f7c725bd08dc20170862bb68c15eacb3c8a727339384deaae831e813/pyaware-4.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "64547428a41ec799035c006a2869f1270cf57ddac8735911672509b349871eed",
          "md5": "2ffd942c62d049633013f22a823cfd6b",
          "sha256": "8b6d6ae8e800062c30b2ab8fde574603869b58f5fd0d56b968cfaf92573d6763"
        },
        "downloads": -1,
        "filename": "pyaware-4.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ffd942c62d049633013f22a823cfd6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 215520,
        "upload_time": "2022-02-10T06:10:54",
        "upload_time_iso_8601": "2022-02-10T06:10:54.629641Z",
        "url": "https://files.pythonhosted.org/packages/64/54/7428a41ec799035c006a2869f1270cf57ddac8735911672509b349871eed/pyaware-4.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c9e6f8da49190becea23b097b431b444aa45fc388a895583b56e58321b65aeb",
          "md5": "aec2b50756b9cb38bd16f576f822329f",
          "sha256": "1f1dff23dc2558a8d8df33005fd7f5eccf18943ea7a290589e16b40138476bda"
        },
        "downloads": -1,
        "filename": "pyaware-4.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "aec2b50756b9cb38bd16f576f822329f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 216121,
        "upload_time": "2022-06-03T03:42:56",
        "upload_time_iso_8601": "2022-06-03T03:42:56.997020Z",
        "url": "https://files.pythonhosted.org/packages/2c/9e/6f8da49190becea23b097b431b444aa45fc388a895583b56e58321b65aeb/pyaware-4.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7964ff77bf61586f3fadb0ffe67e5d440500d239774280047004e95bfa96745f",
          "md5": "4e6407f63cc689795a7f4c864113ea85",
          "sha256": "b99c7fb37ca8609c7da577a55d51fe219241fad1119258b702bb75bad85e65a0"
        },
        "downloads": -1,
        "filename": "pyaware-4.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e6407f63cc689795a7f4c864113ea85",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 217900,
        "upload_time": "2022-07-07T00:12:50",
        "upload_time_iso_8601": "2022-07-07T00:12:50.384933Z",
        "url": "https://files.pythonhosted.org/packages/79/64/ff77bf61586f3fadb0ffe67e5d440500d239774280047004e95bfa96745f/pyaware-4.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "4.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e301908bc96d291fcd3a4c9de45f8a9d39adbab953eba3b6eb33e046e3675fdb",
          "md5": "6723b810a2791ae5b7733b355cbd48ef",
          "sha256": "647b1cf5de6fc9b0cbe719919110b40902aa1f841a0dd16104ba30606916f6c4"
        },
        "downloads": -1,
        "filename": "pyaware-4.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6723b810a2791ae5b7733b355cbd48ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5.2",
        "size": 217934,
        "upload_time": "2022-08-01T01:07:39",
        "upload_time_iso_8601": "2022-08-01T01:07:39.642634Z",
        "url": "https://files.pythonhosted.org/packages/e3/01/908bc96d291fcd3a4c9de45f8a9d39adbab953eba3b6eb33e046e3675fdb/pyaware-4.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "5.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e8f07d94e341dcd122c7168a4a198d270d6f60020b7bb06df570080a76bc2563",
          "md5": "8104f860a97ff64e3220438d1fb3a975",
          "sha256": "3adf86703c6719473a8714e7f08a9d6e0bbfa7f854b1f719d17fa66c107c82b2"
        },
        "downloads": -1,
        "filename": "pyaware-5.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8104f860a97ff64e3220438d1fb3a975",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 238013,
        "upload_time": "2022-10-11T05:45:52",
        "upload_time_iso_8601": "2022-10-11T05:45:52.748550Z",
        "url": "https://files.pythonhosted.org/packages/e8/f0/7d94e341dcd122c7168a4a198d270d6f60020b7bb06df570080a76bc2563/pyaware-5.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "5.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83b23393a683503bc04a9f6a898a116147bfe205ef25230784b053da16c0111a",
          "md5": "afe7fd6efbbc3f4c7dca889ed8f428e0",
          "sha256": "b877ba396afd83f9a95160fd6d96f22e22aab6fc9fe0a93a850c19a418f986a2"
        },
        "downloads": -1,
        "filename": "pyaware-5.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "afe7fd6efbbc3f4c7dca889ed8f428e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 238050,
        "upload_time": "2022-10-21T03:27:23",
        "upload_time_iso_8601": "2022-10-21T03:27:23.503615Z",
        "url": "https://files.pythonhosted.org/packages/83/b2/3393a683503bc04a9f6a898a116147bfe205ef25230784b053da16c0111a/pyaware-5.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "5.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a466e363ac38bf229d9e35a048357c3a7f3c9a0bf8f755b72a379812b6dacf8e",
          "md5": "e494401359388b3e9a5e59ba205b4523",
          "sha256": "09c23905e31b95d942c5213135d97fe09622321ede115b95925eb6608b8fc613"
        },
        "downloads": -1,
        "filename": "pyaware-5.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e494401359388b3e9a5e59ba205b4523",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 238192,
        "upload_time": "2022-10-25T02:24:04",
        "upload_time_iso_8601": "2022-10-25T02:24:04.857435Z",
        "url": "https://files.pythonhosted.org/packages/a4/66/e363ac38bf229d9e35a048357c3a7f3c9a0bf8f755b72a379812b6dacf8e/pyaware-5.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "5.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "06f10b697d5f2eb28085e50d1861fa9bd82b97d284aa85a83f266d86781a58cc",
          "md5": "8405c628bd309535a95b99bc11aeb976",
          "sha256": "af29bd01c91c9c54d7fd263d98db219aa7b8428f004e5ef897193cbb24cf8a56"
        },
        "downloads": -1,
        "filename": "pyaware-5.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8405c628bd309535a95b99bc11aeb976",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 238334,
        "upload_time": "2022-10-31T05:44:46",
        "upload_time_iso_8601": "2022-10-31T05:44:46.512550Z",
        "url": "https://files.pythonhosted.org/packages/06/f1/0b697d5f2eb28085e50d1861fa9bd82b97d284aa85a83f266d86781a58cc/pyaware-5.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "5.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2115abc9906a56e1704eacfae7a73071c193498371027156202744280a622410",
          "md5": "7f17bfcc99f3a8b748b0d96e939b5a73",
          "sha256": "c82c737eceb32b82d2f7adf7a81337e9d7f80379fe6f6df8aa72f09e23eea620"
        },
        "downloads": -1,
        "filename": "pyaware-5.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f17bfcc99f3a8b748b0d96e939b5a73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 242166,
        "upload_time": "2023-01-15T23:53:55",
        "upload_time_iso_8601": "2023-01-15T23:53:55.100495Z",
        "url": "https://files.pythonhosted.org/packages/21/15/abc9906a56e1704eacfae7a73071c193498371027156202744280a622410/pyaware-5.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "5.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56806e7c1f2d90f53b63e0e211eca78348090ff6f8da2a8eb5912ec19ac060e0",
          "md5": "a7c805631b47ca2e77f3921aee56490c",
          "sha256": "029b22de2f099e0ba5b8e2db3558f7409c915ce7d8911d713f0e09abaa531057"
        },
        "downloads": -1,
        "filename": "pyaware-5.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a7c805631b47ca2e77f3921aee56490c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 242428,
        "upload_time": "2023-02-13T04:47:08",
        "upload_time_iso_8601": "2023-02-13T04:47:08.989460Z",
        "url": "https://files.pythonhosted.org/packages/56/80/6e7c1f2d90f53b63e0e211eca78348090ff6f8da2a8eb5912ec19ac060e0/pyaware-5.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "6.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4fb81772d6e4f01ff6f958303e3f543ca6a40c0316205b77d205434b9be8e3a6",
          "md5": "1eeb9d9f226f004dfe03f533096aa0fc",
          "sha256": "eddd9f11b23d8651c3121e1ea5ef72b692186b79b7207ccfb3d75a83d587d295"
        },
        "downloads": -1,
        "filename": "pyaware-6.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1eeb9d9f226f004dfe03f533096aa0fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7.0",
        "size": 298853,
        "upload_time": "2023-03-22T01:11:38",
        "upload_time_iso_8601": "2023-03-22T01:11:38.408489Z",
        "url": "https://files.pythonhosted.org/packages/4f/b8/1772d6e4f01ff6f958303e3f543ca6a40c0316205b77d205434b9be8e3a6/pyaware-6.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4fb81772d6e4f01ff6f958303e3f543ca6a40c0316205b77d205434b9be8e3a6",
        "md5": "1eeb9d9f226f004dfe03f533096aa0fc",
        "sha256": "eddd9f11b23d8651c3121e1ea5ef72b692186b79b7207ccfb3d75a83d587d295"
      },
      "downloads": -1,
      "filename": "pyaware-6.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1eeb9d9f226f004dfe03f533096aa0fc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7.0",
      "size": 298853,
      "upload_time": "2023-03-22T01:11:38",
      "upload_time_iso_8601": "2023-03-22T01:11:38.408489Z",
      "url": "https://files.pythonhosted.org/packages/4f/b8/1772d6e4f01ff6f958303e3f543ca6a40c0316205b77d205434b9be8e3a6/pyaware-6.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}