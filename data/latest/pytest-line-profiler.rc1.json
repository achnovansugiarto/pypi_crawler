{
  "info": {
    "author": "Martín Gaitán",
    "author_email": "gaitan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# pytest-line-profiler\n\n[![PyPI version][]][1]\n\n[![Python versions][]][1]\n\n[![See Build Status on Travis CI][]][2]\n\n\nline-by-line profiling for code executed by pytest, using [line-profiler](https://github.com/pyutils/line_profiler).\n\n## Why?\n\nLine profiler is a wonderful tool to easily identify bottlenecks inside specific functions of your code, and quantity\nthe improvements after a refactor. \n\nUsing it is straightforward but required to instrument the functions you want to profile with a \"virtual decorator\"\nand then execute \"a trigger script\" (some code that call the decorated functions somehow) via `kernprof.py` which works as a python wrapper that undertand that decorator and register the functions to be profiled.  \n\nAltought it does its job, is a bit invasive: you need to have an special \"instrumented\" version of your code, \nand execute it in a way that potentially clashes with the way you do normally (for instance, through a shortcut command from your editor, another script, etc.)   \n\nMoreover, frequently in real case scenarios, \"a trigger script\" isn't just a simple function call. \nYou need to prepare input data, connect to external resources, etc.  And that's exactly what a test can do, right?    \n\n\n## Installation \n\nYou can install \"pytest-line-profiler\" via [pip][] from [PyPI][]:\n\n```\n$ pip install pytest-line-profiler\n```\n\n## Usage\n\n\nMark your test passing the functions you wants to profile as positional arguments, \nlike `@pytest.mark.line_profile.with_args(function1, function2, [...])`\n\nIf your test exercises any of those functions, you'll get the profile result as a report.  \n\nFor example, consider this example\n\n```python\nimport pytest\n\ndef f(i):\n    return i * 10\n\ndef g(n=10):\n    return sum(f(i) for i in range(10))\n\n\n@pytest.mark.line_profile.with_args(f, g)\ndef test_as_mark():\n    assert g() == 450\n\n```\n\n\nAfter that test is executed, you'll get the stats from the line profiler instance. \n\n```\n============ Line Profile result for tests/test_line_profiler.py::test_as_mark ============\nTimer unit: 1e-06 s\n\nTotal time: 4e-06 s\nFile: /home/tin/lab/pytest-line-profiler/tests/test_line_profiler.py\nFunction: f at line 4\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     4                                           def f(i):\n     5        10          4.0      0.4    100.0      return i * 10\n\nTotal time: 3e-05 s\nFile: /home/tin/lab/pytest-line-profiler/tests/test_line_profiler.py\nFunction: g at line 7\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     7                                           def g(n=10):\n     8         1         30.0     30.0    100.0      return sum(f(i) for i in range(10))\n```\n\n\nAlternatively, you can run any test passing the function/s to profile from the command line\n\n```\n$ pytest --line-profile path.to.function_to_be profiled [...] \n```\n\n\n## Contributing\n\nContributions are very welcome. Tests can be run with [pytest][], please\nensure the coverage at least stays the same before you submit a pull\nrequest.\n\n## License\n\nDistributed under the terms of the [MIT][] license,\n\"pytest-line-profiler\" is free and open source software\n\n## Issues\n\nIf you encounter any problems, please [file an issue][] along with a\ndetailed description.\n\n  [PyPI version]: https://img.shields.io/pypi/v/pytest-line-profiler.svg\n  [1]: https://pypi.org/project/pytest-line-profiler\n  [Python versions]: https://img.shields.io/pypi/pyversions/pytest-line-profiler.svg\n  [See Build Status on Travis CI]: https://travis-ci.org/mgaitan/pytest-line-profiler.svg?branch=master\n  [2]: https://travis-ci.org/mgaitan/pytest-line-profiler\n  [pip]: https://pypi.org/project/pip/\n  [PyPI]: https://pypi.org/project\n  [pytest]: https://github.com/pytest-dev/pytest\n  [MIT]: http://opensource.org/licenses/MIT\n  [file an issue]: https://github.com/mgaitan/pytest-line-profiler/issues\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/mgaitan/pytest-line-profiler",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Martín Gaitán",
    "maintainer_email": "gaitan@gmail.com",
    "name": "pytest-line-profiler",
    "package_url": "https://pypi.org/project/pytest-line-profiler/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-line-profiler/",
    "project_urls": {
      "Homepage": "https://github.com/mgaitan/pytest-line-profiler"
    },
    "release_url": "https://pypi.org/project/pytest-line-profiler/0.1.0/",
    "requires_dist": [
      "pytest (>=3.5.0)",
      "line-profiler"
    ],
    "requires_python": ">=3.6",
    "summary": "Profile code executed by pytest",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10240317,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0cd52e197454a67cf9f086087b77fe9ff523e727d8dbcaf46a82a42692de0330",
          "md5": "09bb140b56a7c4eb1fd5f96ee498e1a2",
          "sha256": "7f8600713c3e2d895022f274c4c8ad3851c6b10ba25363c73fccb195334a05ef"
        },
        "downloads": -1,
        "filename": "pytest_line_profiler-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "09bb140b56a7c4eb1fd5f96ee498e1a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 5138,
        "upload_time": "2021-05-03T13:29:17",
        "upload_time_iso_8601": "2021-05-03T13:29:17.076475Z",
        "url": "https://files.pythonhosted.org/packages/0c/d5/2e197454a67cf9f086087b77fe9ff523e727d8dbcaf46a82a42692de0330/pytest_line_profiler-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0cd52e197454a67cf9f086087b77fe9ff523e727d8dbcaf46a82a42692de0330",
        "md5": "09bb140b56a7c4eb1fd5f96ee498e1a2",
        "sha256": "7f8600713c3e2d895022f274c4c8ad3851c6b10ba25363c73fccb195334a05ef"
      },
      "downloads": -1,
      "filename": "pytest_line_profiler-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "09bb140b56a7c4eb1fd5f96ee498e1a2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 5138,
      "upload_time": "2021-05-03T13:29:17",
      "upload_time_iso_8601": "2021-05-03T13:29:17.076475Z",
      "url": "https://files.pythonhosted.org/packages/0c/d5/2e197454a67cf9f086087b77fe9ff523e727d8dbcaf46a82a42692de0330/pytest_line_profiler-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}