{
  "info": {
    "author": "Chris Oberdalhoff",
    "author_email": "cober91130@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "Prefix-List Operations (Coming Soon!)\n==============\nDescription\n--------------\n\nPrefix-List Ops has the following features:\n\n+ View prefix-list\n+ Find prefix by prefix or prefix length\n+ Find overlapping prefixes in the same list (ge, le)\n+ Find duplicate prefixes in different list\n\nDepedency Modules\n__________\n\n+ ipaddress\n+ re\n+ collections\n+ xmltodict\n+ ncclient\n+ socket\n\nDevice Modules Tested\n---------------\n\n**Different device modules return different configuration/XML. I've tested on the following**\n\n+ ISR 4331\n+ ASR 1001-X\n+ Catalyst 3850\n\nUsage\n--------------\n\n**Import**\n            >>> import IPOperations.isr_lists as ipops\n\n**Create Objects/Call Class**\n\n            >>> call_class = ipops.IpOps(host=\"10.48.1.130\", username=\"cisco\", password=\"cisco\")\n            print(call_class)\n            <IPOperations.isr_lists.IpOps object at 0x0000024A786C8248>\n\n**View Prefix Lists**\n\n            >>> call_class.view_prefix_list()\n            local-prefixes\n            5 permit 1.1.1.0/24 25\n            10 permit 3.1.1.0/26 27\n            15 permit 2.1.1.0/26 27\n\n**Find Prefix Length**\n\n            >>> call_class.find_prefix_length(length=\"25\")\n            defaultdict(<class 'list'>, {'test22': [{'seq': '25', 'prefix': '1.1.1.0/25'},\n            {'seq': '30', 'prefix': '2.2.2.0/25'}],\n            'test23': [{'seq': '25', 'prefix': '1.1.1.0/25'},\n            {'seq': '30', 'prefix': '2.2.2.0/25'}]})\n\n**Find Perfix**\n\n            >>> call_class.find_prefix(prefix=\"1.1.1.0/24\")\n            defaultdict(<class 'list'>, {'local-prefixes': [{'seq': '5', 'prefix': '1.1.1.0/24'}],\n            'test22': [{'seq': '5', 'prefix': '1.1.1.0/24'}],\n            'test23': [{'seq': '5', 'prefix': '1.1.1.0/24'}]})\n\n**Find Overlapping Prefixes**\n\n            call_class.find_overlapping_prefixes()\n            defaultdict(<class 'list'>,\n            {'local-prefixes': [OrderedDict([('prefix', '1.1.1.0/24'), ('overlapping-seq', '5'), ('ge', '25'), ('le', '32'), ('overlapping-prefixes', ['1.1.1.0/25', '1.1.1.0/26', '1.1.1.0/27', '1.1.1.0/28', '1.1.1.0/29', '1.1.1.0/30', '1.1.1.0/31', '1.1.1.0/32'])]),\n            OrderedDict([('prefix', '1.1.1.0/25'), ('overlapping-seq', '5'), ('ge', '25'), ('le', '32'), ('overlapping-prefixes', ['1.1.1.0/25', '1.1.1.0/26', '1.1.1.0/27', '1.1.1.0/28', '1.1.1.0/29', '1.1.1.0/30', '1.1.1.0/31', '1.1.1.0/32'])]),\n            OrderedDict([('prefix', '1.0.0.0/8'), ('overlapping-seq', '5'), ('ge', '25'), ('le', '32'), ('overlapping-prefixes', ['1.1.1.0/25', '1.1.1.0/26', '1.1.1.0/27', '1.1.1.0/28', '1.1.1.0/29', '1.1.1.0/30', '1.1.1.0/31', '1.1.1.0/32'])]),\n            OrderedDict([('prefix', '3.1.1.0/26'), ('overlapping-seq', '10'), ('ge', '27'), ('le', '32'), ('overlapping-prefixes', ['3.1.1.0/27', '3.1.1.0/28', '3.1.1.0/29', '3.1.1.0/30', '3.1.1.0/31', '3.1.1.0/32'])]),\n            OrderedDict([('prefix', '2.1.1.0/26'), ('overlapping-seq', '15'), ('ge', '27'), ('le', '32'), ('overlapping-prefixes', ['2.1.1.0/27', '2.1.1.0/28', '2.1.1.0/29', '2.1.1.0/30', '2.1.1.0/31', '2.1.1.0/32'])]),\n            OrderedDict([('prefix', '4.1.1.0/26'), ('overlapping-seq', '20'), ('ge', '27'), ('le', '32'), ('overlapping-prefixes', ['4.1.1.0/27', '4.1.1.0/28', '4.1.1.0/29', '4.1.1.0/30', '4.1.1.0/31', '4.1.1.0/32'])]),\n            OrderedDict([('prefix', '5.1.1.0/26'), ('overlapping-seq', '25'), ('ge', '27'), ('le', '32'), ('overlapping-prefixes', ['5.1.1.0/27', '5.1.1.0/28', '5.1.1.0/29', '5.1.1.0/30', '5.1.1.0/31', '5.1.1.0/32'])]),\n            OrderedDict([('prefix', '6.1.1.0/26'), ('overlapping-seq', '30'), ('ge', '27'), ('le', '32'), ('overlapping-prefixes', ['6.1.1.0/27', '6.1.1.0/28', '6.1.1.0/29', '6.1.1.0/30', '6.1.1.0/31', '6.1.1.0/32'])]),\n            OrderedDict([('prefix', '7.1.1.0/26'), ('overlapping-seq', '35'), ('le', '27'), ('overlapping-prefixes', ['7.1.1.0/27', '7.1.1.0/25', '7.1.1.0/24'])])],\n\n        **View Overlapping Prefixes, Formatted**\n\n        >>> call_class.view_overlapping_prefixes()\n        local-prefixes\n        Prefix: 1.1.1.0/24\n        Overlapping Sequence: 5\n        Range: GE: 25\n        Range: LE 32\n        Overlapping Prefixes: 1.1.1.0/25, 1.1.1.0/26, 1.1.1.0/27, 1.1.1.0/28, 1.1.1.0/29, 1.1.1.0/30, 1.1.1.0/31, 1.1.1.0/32\n        Prefix: 1.1.1.0/25\n        Overlapping Sequence: 5\n        Range: GE: 25\n        Range: LE 32\n        Overlapping Prefixes: 1.1.1.0/25, 1.1.1.0/26, 1.1.1.0/27, 1.1.1.0/28, 1.1.1.0/29, 1.1.1.0/30, 1.1.1.0/31, 1.1.1.0/32\n        Prefix: 1.0.0.0/8\n        Overlapping Sequence: 5\n        Range: GE: 25\n        Range: LE 32\n        Overlapping Prefixes: 1.1.1.0/25, 1.1.1.0/26, 1.1.1.0/27, 1.1.1.0/28, 1.1.1.0/29, 1.1.1.0/30, 1.1.1.0/31, 1.1.1.0/32\n\n**View Duplicate Prefixes**\n\n        >>> call_class.duplicate_prefix()\n        defaultdict(<class 'list'>, {'prefixes': [defaultdict(<class 'list'>,\n        {'local-prefixes': [{'seq': '5', 'prefix': '1.1.1.0/24'}],\n        'test22': [{'seq': '5', 'prefix': '1.1.1.0/24'}],\n        'test23': [{'seq': '5', 'prefix': '1.1.1.0/24'}]})\n\n**View Routing Prefixes (No next hop)**\n**Example only shows local and connected. The method will display all routing protocols and types if configured**\n\n        >>> call_class.get_routing_table()\n        >>> call_class.routing_prefixes\n        {'1.0.0.0/8': 'C', '1.1.1.1/32': 'L', '4.0.0.0/8': 'L', '4.4.4.0/24': 'C', '4.4.4.4/32': 'L', '5.0.0.0/8': 'L',\n            '5.5.5.0/24': 'C', '5.5.5.5/32': 'L', '6.0.0.0/8': 'L', '6.6.6.0/24': 'C', '6.6.6.6/32': 'L', '7.0.0.0/8': 'L',\n        '7.7.7.0/24': 'C', '7.7.7.7/32': 'L', '8.0.0.0/8': 'L', '8.8.8.0/24': 'C', '8.8.8.8/32': 'L', '9.0.0.0/8': 'L',\n        '9.9.9.0/24': 'C', '9.9.9.9/32': 'L', '10.0.0.0/8': 'L', '10.1.3.0/24': 'S', '10.10.10.0/24': 'C', '10.10.10.10/32': 'L',\n        '10.10.11.0/24': 'C', '10.10.11.1/32': 'L', '192.168.1.0/24': 'C'}\n\n**Sending Prefixes**\n\n    **Send with prefix only**\n\n            >>> call_class.send_prefix_list(name=\"HelpMe\", prefix=\"192.168.1.0/24\", seq=\"5\", action=\"permit\")\n            HelpMe\n                5 permit 192.168.1.0/24\n\n    **Send with prefix and ge**\n\n            >>> call_class.send_prefix_list(name=\"HelpMe\", prefix=\"192.168.2.0/24\", seq=\"10\", action=\"permit\", ge=\"26\")\n            HelpMe\n                5 permit 192.168.1.0/24\n                10 permit 192.168.2.0/24 26\n\n    **Send with prefix, ge, le**\n\n            >>> call_class.send_prefix_list(name=\"HelpMe\", prefix=\"192.168.3.0/24\", seq=\"15\", action=\"permit\", ge=\"26\", le=\"32\")\n            HelpMe\n                5 permit 192.168.1.0/24\n                10 permit 192.168.2.0/24 26\n                15 permit 192.168.3.0/24 26 32\n\n**When sending new prefixes, the following checks will be done**\n\n    **Seqeunce Check**\n\n        >>> call_class.send_prefix_list(name=\"HelpMe\", prefix=\"172.16.1.0/24\", seq=\"5\", action=\"permit\")\n        Traceback (most recent call last):\n          File \"<input>\", line 1, in <module>\n          File \"C:\\Users\\JoeSmo\\PycharmProjects\\IPOperations\\IPOperations\\isr_lists.py\", line 422, in send_prefix_list\n            raise ValueError(\"Sequence Exist\")\n        ValueError: Sequence Exist\n\n    **Prefix Check**\n\n        >>> call_class.send_prefix_list(name=\"HelpMe\", prefix=\"192.168.1.0/24\", seq=\"20\", action=\"permit\")\n            Traceback (most recent call last):\n              File \"<input>\", line 1, in <module>\n              File \"C:\\Users\\JoeSmo\\PycharmProjects\\IPOperations\\IPOperations\\isr_lists.py\", line 424, in send_prefix_list\n                raise ValueError(\"Prefix Exist\")\n            ValueError: Prefix Exist\n\n    **Overlapping Prefix Check**\n\n        >>> call_class.send_prefix_list(name=\"HelpMe\", prefix=\"192.168.1.0/26\", seq=\"20\", action=\"permit\")\n            Traceback (most recent call last):\n              File \"<input>\", line 1, in <module>\n              File \"C:\\Users\\JoeSmo\\PycharmProjects\\IPOperations\\IPOperations\\isr_lists.py\", line 502, in send_prefix_list\n                self._find_dups_internal(prefix=kwargs[\"prefix\"])\n              File \"C:\\JoeSmo\\PycharmProjects\\IPOperations\\IPOperations\\isr_lists.py\", line 561, in _find_dups_internal\n                raise ValueError(\"{} overlapps with {}\".format(kwargs[\"prefix\"], network))\n            ValueError: 192.168.1.0/26 overlaps with 192.168.1.0/24\n\n    **Routing Table Check**\n    **Using netmiko to get the routing table, the prefix is compared to the destination prefixes. If the prefix is**\n    **external the program will warn you of this. If your selection no, the prefix will be cancled and an expection will**\n    **be thrown. If yes, the prefix will be added to the list.**\n\n        >>> call_class.send_prefix_list(name=\"HelpMe\", prefix=\"10.10.12.0/24\", seq=\"30\", action=\"permit\")\n        Prefix is external/not local, Are you sure you want to add (yes/no)?\n        no\n        Traceback (most recent call last):\n          File \"<input>\", line 1, in <module>\n          File \"C:\\Users\\JoeSmo\\PycharmProjects\\IPOperations\\IPOperations\\isr_lists.py\", line 442, in send_prefix_list\n            raise ValueError(\"Prefix configuration aborted\")\n        ValueError: Prefix configuration aborted",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/cober2019/Network-Automation/tree/master/NETCONF-YANG/Prefix-List_Ops",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Prefix-list-Ops",
    "package_url": "https://pypi.org/project/Prefix-list-Ops/",
    "platform": "",
    "project_url": "https://pypi.org/project/Prefix-list-Ops/",
    "project_urls": {
      "Homepage": "https://github.com/cober2019/Network-Automation/tree/master/NETCONF-YANG/Prefix-List_Ops"
    },
    "release_url": "https://pypi.org/project/Prefix-list-Ops/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Perform operations on network prefix-list",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7565974,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8972e06ae449642c7ed8d1045dbb7955008ddefd100c08decf344447312adb22",
          "md5": "40c1e65bdb5f3b53432bf31f46b53167",
          "sha256": "79fa5e15b231c127e1053e358f94ff55115478220b1ea774d36f2c9782e3c7d6"
        },
        "downloads": -1,
        "filename": "Prefix_list_Ops-1.0.0-py3.7.egg",
        "has_sig": false,
        "md5_digest": "40c1e65bdb5f3b53432bf31f46b53167",
        "packagetype": "bdist_egg",
        "python_version": "3.7",
        "requires_python": ">=3.6",
        "size": 28779,
        "upload_time": "2020-06-26T02:46:44",
        "upload_time_iso_8601": "2020-06-26T02:46:44.161023Z",
        "url": "https://files.pythonhosted.org/packages/89/72/e06ae449642c7ed8d1045dbb7955008ddefd100c08decf344447312adb22/Prefix_list_Ops-1.0.0-py3.7.egg",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "54fe417263ea3cdb630e4574d1ea756921c111d953e65f757f136b589e697a0d",
          "md5": "538f812078eeddb2bca9e4d676cd657b",
          "sha256": "6f65752b71ccb368a3c1d287d883e64af8579b59c0c07672dda5c9a58b6c451c"
        },
        "downloads": -1,
        "filename": "Prefix-list_Ops-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "538f812078eeddb2bca9e4d676cd657b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11789,
        "upload_time": "2020-06-26T02:46:42",
        "upload_time_iso_8601": "2020-06-26T02:46:42.022724Z",
        "url": "https://files.pythonhosted.org/packages/54/fe/417263ea3cdb630e4574d1ea756921c111d953e65f757f136b589e697a0d/Prefix-list_Ops-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8972e06ae449642c7ed8d1045dbb7955008ddefd100c08decf344447312adb22",
        "md5": "40c1e65bdb5f3b53432bf31f46b53167",
        "sha256": "79fa5e15b231c127e1053e358f94ff55115478220b1ea774d36f2c9782e3c7d6"
      },
      "downloads": -1,
      "filename": "Prefix_list_Ops-1.0.0-py3.7.egg",
      "has_sig": false,
      "md5_digest": "40c1e65bdb5f3b53432bf31f46b53167",
      "packagetype": "bdist_egg",
      "python_version": "3.7",
      "requires_python": ">=3.6",
      "size": 28779,
      "upload_time": "2020-06-26T02:46:44",
      "upload_time_iso_8601": "2020-06-26T02:46:44.161023Z",
      "url": "https://files.pythonhosted.org/packages/89/72/e06ae449642c7ed8d1045dbb7955008ddefd100c08decf344447312adb22/Prefix_list_Ops-1.0.0-py3.7.egg",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "54fe417263ea3cdb630e4574d1ea756921c111d953e65f757f136b589e697a0d",
        "md5": "538f812078eeddb2bca9e4d676cd657b",
        "sha256": "6f65752b71ccb368a3c1d287d883e64af8579b59c0c07672dda5c9a58b6c451c"
      },
      "downloads": -1,
      "filename": "Prefix-list_Ops-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "538f812078eeddb2bca9e4d676cd657b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11789,
      "upload_time": "2020-06-26T02:46:42",
      "upload_time_iso_8601": "2020-06-26T02:46:42.022724Z",
      "url": "https://files.pythonhosted.org/packages/54/fe/417263ea3cdb630e4574d1ea756921c111d953e65f757f136b589e697a0d/Prefix-list_Ops-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}