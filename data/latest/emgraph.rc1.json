{
  "info": {
    "author": "Soran Ghaderi",
    "author_email": "soran.gdr.cd@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "License :: Other/Proprietary License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<h1><b>Emgraph</b></h1>\n<div>\n\n[//]: # (<a href=\"https://badge.fury.io/py/emgraph\"><img src=\"https://badge.fury.io/py/emgraph.svg\" alt=\"PyPI version\" height=\"18\"></a>)\n\n[//]: # (<a href=\"https://www.codacy.com/gh/bi-graph/emgraph/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=bi-graph/emgraph&amp;utm_campaign=Badge_Grade\"><img src=\"https://app.codacy.com/project/badge/Grade/e320ed8c06a3466aa9711a138085b9d2\" alt=\"PyPI version\" height=\"18\"></a>)\n\n[//]: # (<img alt=\"PyPI - Python Version\" src=\"https://img.shields.io/pypi/pyversions/emgraph\">)\n\n[comment]: <> (<img alt=\"PyPI - Downloads\" src=\"https://img.shields.io/pypi/dw/emgraph\">)\n\n[comment]: <> (<img alt=\"PyPI - Downloads\" src=\"https://img.shields.io/pypi/dm/emgraph\">)\n\n[comment]: <> (<img alt=\"GitHub search hit counter\" src=\"https://img.shields.io/github/search/bi-graph/emgraph/hit\">)\n\n[comment]: <> (<img alt=\"GitHub search hit counter\" src=\"https://img.shields.io/github/search/bi-graph/emgraph/goto\">)\n\n[comment]: <> (<img alt=\"PyPI - Implementation\" src=\"https://img.shields.io/pypi/implementation/emgraph\">)\n\n[comment]: <> (<img alt=\"GitHub commit activity\" src=\"https://img.shields.io/github/commit-activity/m/bi-graph/emgraph\">)\n\n[comment]: <> (<img alt=\"GitHub last commit\" src=\"https://img.shields.io/github/last-commit/bi-graph/emgraph\">)\n<img alt=\"GitHub Repo stars\" src=\"https://img.shields.io/github/stars/bi-graph/emgraph?style=social\">\n</div>\n<p><b>Emgraph</b> is a Python toolkit for graph embedding.</p>\n\n\n[//]: # (<ul>)\n\n[//]: # (    <li><b>Bug reports:</b> https://github.com/bi-graph/emgraph/issues</li>)\n\n[//]: # (</ul>)\n\n[//]: # (> Node based similarities and Katz has been implemented. you can find algorithms in emgraph module. Algorithms implemented so far:)\n\n<div align=\"center\">\n<table>\n<caption><b>Algorithms table</b></caption>\n    <tr>\n        <td><b>Number</b></td>\n        <td align=\"center\"><b>Algorithm</b></td>\n    </tr>\n    <tr>\n        <td align=\"center\">1</td>\n        <td><code><b>TransE</b></code></td>\n    </tr>\n    <tr>\n        <td align=\"center\">2</td>\n        <td><code><b>ComplEx</b></code></td>\n    </tr>\n    <tr>\n        <td align=\"center\">3</td>\n        <td><code><b>HolE</b></code></td>\n    </tr>\n    <tr>\n        <td align=\"center\">4</td>\n        <td><code><b>DistMult</b></code></td>\n    </tr>\n    <tr>\n        <td align=\"center\">5</td>\n        <td><code><b>ConvE</b></code></td>\n    </tr>\n    <tr>\n        <td align=\"center\">6</td>\n        <td><code><b>ConvKB</b></code></td>\n    </tr>\n    <tr>\n        <td align=\"center\">7</td>\n        <td><code><b>RandomBaseline</b></code></td>\n    </tr>\n</table>\n</div>\n\n<div>\n  <h2>Installation</h2>\n  <p>Install the latest version of <b>Emgraph</b>:</p>\n\n  <pre>$ pip install emgraph</pre>\n</div>\n\n<div>\n<h2>Documentation</h2>\n<p>Soon</p>\n\n[//]: # (<p> <a href=\"https://emgraph.readthedocs.io/en/latest/index.html\">https://emgraph.readthedocs.io/en/latest/</a></p>)\n\n</div>\n\n<h2>Simple example</h2>\n<p>Embedding wordnet11 graph using \n<code><b>TransE</b></code> model:</p>\n\n```python\nfrom sklearn.metrics import brier_score_loss, log_loss\nfrom scipy.special import expit\nfrom emgraph.datasets import BaseDataset, DatasetType\nfrom emgraph.models import TransE\n\n\ndef train_transe():\n    X = BaseDataset.load_dataset(DatasetType.WN11)\n    model = TransE(batches_count=64, seed=0, epochs=20, k=100, eta=20,\n                   optimizer='adam', optimizer_params={'lr': 0.0001},\n                   loss='pairwise', verbose=True, large_graphs=False)\n\n    model.fit(X['train'])\n\n    scores = model.predict(X['test'])\n\n    print(\"Scores: \", scores)\n    print(\"Brier score loss:\", brier_score_loss(X['test_labels'], expit(scores)))\n\n\n# Executing the function\n\nif __name__ == '__main__':\n    train_transe()\n```\n\n<p>Evaluating <code><b>ComplEx</b></code> model after training:<br>\n\n```python\nimport numpy as np\nfrom emgraph.datasets import BaseDataset, DatasetType\nfrom emgraph.models import ComplEx\nfrom emgraph.evaluation import evaluate_performance\n\n\ndef complex_performance():\n    X = BaseDataset.load_dataset(DatasetType.WN18)\n    model = ComplEx(batches_count=10, seed=0, epochs=20, k=150, eta=1,\n                    loss='nll', optimizer='adam')\n    model.fit(np.concatenate((X['train'], X['valid'])))\n    filter_triples = np.concatenate((X['train'], X['valid'], X['test']))\n    ranks = evaluate_performance(X['test'][:5], model=model,\n                                 filter_triples=filter_triples,\n                                 corrupt_side='s+o',\n                                 use_default_protocol=False)\n    return ranks\n\n\n# Executing the function\n\nif __name__ == '__main__':\n    ranks = complex_performance()\n    print(\"ranks {}\".format(ranks))\n```\n\n<div>\n<h2>Call for Contributions</h2>\n<p>The <b>Emgraph</b> project welcomes your expertise and enthusiasm!</p>\n\n<p>Ways to contribute to <b>Emgraph</b>:</p>\n<ul>\n  <li>Writing code</li>\n  <li>Review pull requests</li>\n  <li>Develop tutorials, presentations, and other educational materials</li>\n  <li>Translate documentation and readme contents</li>\n</ul>\n</div>\n\n<div>\n  <h2>Issues</h2>\n  <p>If you happened to encounter any issue in the codes, please report it\n    <a href=\"https://github.com/bi-graph/emgraph/issues\">here</a>. \n    A better way is to fork the repository on <b>Github</b> and/or create a pull request.</p>\n\n</div>\n\n\n[//]: # (<h3>Metrics</h3>)\n\n[//]: # (<p>Metrics that are calculated during evaluation:</p>)\n\n[//]: # ()\n\n[//]: # (> * For further usages and calculating different metrics)\n\n[//]: # ()\n\n[//]: # (<h3>Dataset format</h3>)\n\n[//]: # (<p>Your dataset should be in the following format &#40;Exclude the 'Row' column&#41;:</p>)\n\n<h3>More examples</h3>\n<p>Embedding wordnet11 graph using \n<code><b>DistMult</b></code> model:</p>\n\n```python\nfrom sklearn.metrics import brier_score_loss, log_loss\nfrom scipy.special import expit\nfrom emgraph.datasets import BaseDataset, DatasetType\nfrom emgraph.models import DistMult\n\n\ndef train_dist_mult():\n    X = BaseDataset.load_dataset(DatasetType.WN11)\n    model = DistMult(batches_count=1, seed=555, epochs=20, k=10, loss='pairwise',\n                     loss_params={'margin': 5})\n\n    model.fit(X['train'])\n\n    scores = model.predict(X['test'])\n\n    print(\"Scores: \", scores)\n    print(\"Brier score loss:\", brier_score_loss(X['test_labels'], expit(scores)))\n\n\n# Executing the function\n\nif __name__ == '__main__':\n    train_dist_mult()\n\n```\n\n[//]: # (<h3>References</h3>)\n\n[//]: # (<div>)\n\n[//]: # (<table>)\n\n[//]: # (<caption><b>References table</b></caption>)\n\n[//]: # (    <tr>)\n\n[//]: # (        <td><b>Number</b></td>)\n\n[//]: # (        <td align=\"center\"><b>Reference</b></td>)\n\n[//]: # (        <td align=\"center\"><b>Year</b></td>)\n\n[//]: # (    </tr>)\n\n[//]: # (    <tr>)\n\n[//]: # (        <td align=\"center\">1</td>)\n\n[//]: # (        <td><code>Yang, Y., Lichtenwalter, R.N. & Chawla, N.V. Evaluating link prediction methods. Knowl Inf Syst 45, 751â€“782 &#40;2015&#41;.</code> <a href=\"https://doi.org/10.1007/s10115-014-0789-0\")\n\n[//]: # (target=\"_blank\">https://doi.org/10.1007/s10115-014-0789-0</a></td>)\n\n[//]: # (        <td align=\"center\"><b>2015</b></td>)\n\n[//]: # (    </tr>)\n\n[//]: # (    <tr>)\n\n[//]: # (        <td align=\"center\">2</td>)\n\n[//]: # (        <td><code>Liben-nowell, David & Kleinberg, Jon. &#40;2003&#41;. The Link Prediction Problem for Social Networks. Journal of the American Society for Information Science and Technology.</code><a href=\"https://doi.org/58.10.1002/asi.20591\")\n\n[//]: # (target=\"_blank\">https://doi.org/58.10.1002/asi.20591</a></td>)\n\n[//]: # (        <td align=\"center\"><b>2003</b></td>)\n\n[//]: # (    </tr>)\n\n[//]: # (    <tr>)\n\n[//]: # (        <td align=\"center\">2</td>)\n\n[//]: # (        <td><code>...</code></td>)\n\n[//]: # (        <td align=\"center\"><b>...</b></td>)\n\n[//]: # (    </tr>)\n\n[//]: # (</table>)\n\n[//]: # (</div>)\n\n<h3>Future work</h3>\n\n- [x] Modulate the functions\n- [ ] Add more algorithms\n- [x] Run on CUDA cores\n- [x] Make it faster using vectorization etc.\n- [x] Add more preprocessors\n- [ ] Add dataset, graph, and dataframe manipulations\n- [x] Unify and reconstruct the architecture and eliminate redundancy\n\n<h2>If you found it helpful, please give us a <span>:star:</span></h2>\n\n<h2>License</h3>\n<p>Released under the BSD license</p>\n<div class=\"footer\"><pre>Copyright &copy; 2019-2022 <b>Emgraph</b> Developers\n<a href=\"https://www.linkedin.com/in/soran-ghaderi/\">Soran Ghaderi</a> (soran.gdr.cs@gmail.com)\n<a href=\"https://uk.linkedin.com/in/taleb-zarhesh\">Taleb Zarhesh</a> (taleb.zarhesh@gmail.com)</pre>\n</div>\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://bi-graph.github.io/Emgraph",
    "keywords": "tensorflow,python,graph,knowledge graph,representation learning,graph representation learning,deep learning",
    "license": "BSD",
    "maintainer": "Soran Ghaderi",
    "maintainer_email": "soran.gdr.cd@gmail.com",
    "name": "emgraph",
    "package_url": "https://pypi.org/project/emgraph/",
    "platform": null,
    "project_url": "https://pypi.org/project/emgraph/",
    "project_urls": {
      "Homepage": "https://bi-graph.github.io/Emgraph",
      "Repository": "https://github.com/bi-graph/Emgraph"
    },
    "release_url": "https://pypi.org/project/emgraph/1.0.0rc1/",
    "requires_dist": [
      "tqdm (>=4.64.0,<5.0.0)",
      "numpy (>=1.23.1,<2.0.0)",
      "pandas (>=1.4.3,<2.0.0)",
      "scipy (>=1.9.0,<2.0.0)",
      "tensorflow (>=2.8.0,<3.0.0)",
      "pytest (>=7.1.2,<8.0.0)",
      "rdflib (>=6.2.0,<7.0.0)",
      "pydantic (>=1.9.1,<2.0.0)"
    ],
    "requires_python": ">=3.10,<3.11",
    "summary": "A Python library for knowledge graph representation learning (graph embedding)",
    "version": "1.0.0rc1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14600742,
  "releases": {
    "1.0.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61a8d94dbe956d227f219dd107cd95f05a737bbd3ccd3fcf4a944a792af79673",
          "md5": "037ddbc5eecccdafa8a44052db83fbf7",
          "sha256": "cd5e7ade7d1e12e18f886ff9e9501e3ba9b215aca2fdda41757c70164f3e9441"
        },
        "downloads": -1,
        "filename": "emgraph-1.0.0rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "037ddbc5eecccdafa8a44052db83fbf7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<3.11",
        "size": 157189,
        "upload_time": "2022-07-30T20:33:47",
        "upload_time_iso_8601": "2022-07-30T20:33:47.372902Z",
        "url": "https://files.pythonhosted.org/packages/61/a8/d94dbe956d227f219dd107cd95f05a737bbd3ccd3fcf4a944a792af79673/emgraph-1.0.0rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f447658b77a018b506aab44dca94b6101d47a4e26d0d8c2be52d781f2102d146",
          "md5": "952ceb475b5ba59e53c562abe45065f9",
          "sha256": "df91d3c1958e88a3c65e286ba433dfec5200fdaa131d4a804117b937b469c0aa"
        },
        "downloads": -1,
        "filename": "emgraph-1.0.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "952ceb475b5ba59e53c562abe45065f9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<3.11",
        "size": 122013,
        "upload_time": "2022-07-30T20:33:53",
        "upload_time_iso_8601": "2022-07-30T20:33:53.906461Z",
        "url": "https://files.pythonhosted.org/packages/f4/47/658b77a018b506aab44dca94b6101d47a4e26d0d8c2be52d781f2102d146/emgraph-1.0.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61a8d94dbe956d227f219dd107cd95f05a737bbd3ccd3fcf4a944a792af79673",
        "md5": "037ddbc5eecccdafa8a44052db83fbf7",
        "sha256": "cd5e7ade7d1e12e18f886ff9e9501e3ba9b215aca2fdda41757c70164f3e9441"
      },
      "downloads": -1,
      "filename": "emgraph-1.0.0rc1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "037ddbc5eecccdafa8a44052db83fbf7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<3.11",
      "size": 157189,
      "upload_time": "2022-07-30T20:33:47",
      "upload_time_iso_8601": "2022-07-30T20:33:47.372902Z",
      "url": "https://files.pythonhosted.org/packages/61/a8/d94dbe956d227f219dd107cd95f05a737bbd3ccd3fcf4a944a792af79673/emgraph-1.0.0rc1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f447658b77a018b506aab44dca94b6101d47a4e26d0d8c2be52d781f2102d146",
        "md5": "952ceb475b5ba59e53c562abe45065f9",
        "sha256": "df91d3c1958e88a3c65e286ba433dfec5200fdaa131d4a804117b937b469c0aa"
      },
      "downloads": -1,
      "filename": "emgraph-1.0.0rc1.tar.gz",
      "has_sig": false,
      "md5_digest": "952ceb475b5ba59e53c562abe45065f9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<3.11",
      "size": 122013,
      "upload_time": "2022-07-30T20:33:53",
      "upload_time_iso_8601": "2022-07-30T20:33:53.906461Z",
      "url": "https://files.pythonhosted.org/packages/f4/47/658b77a018b506aab44dca94b6101d47a4e26d0d8c2be52d781f2102d146/emgraph-1.0.0rc1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}