{
  "info": {
    "author": "",
    "author_email": "\"path.to.file\" <python@tofile.dev>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Simple DictPath\nProvides a simple path-like access to nested dictionary elements\n\n# Install\n```bash\npip install simple-dictpath\n```\n\n# Examples\n```python\nfrom dictpath import dictp\n\n# First declare a dictp, just like a regular dict.\ntestval = dictp({\n    \"first\": {\n        \"second\": {\n            \"animals\": [\n                {\n                    \"type\": \"cat\",\n                    \"name\": \"meow1\",\n                    \"children\": 2\n                },\n                {\n                    \"type\": \"cat\",\n                    \"name\": \"meow1\",\n                    \"children\": 4\n                },\n                {\n                    \"type\": \"cat\",\n                    \"name\": \"meow1\",\n                    \"children\": 6\n                },\n                {\n                    \"type\": \"dog\",\n                    \"name\": \"dog1\",\n                    \"eye_colour\": \"blue\"\n                },\n                {\n                    \"type\": \"dog\",\n                    \"name\": \"dog2\",\n                    \"eye_colour\": \"green\"\n                },\n            ]\n        }\n    }\n})\n\n# dictps can behave just like regular dicts when needed:\n# prints: 'meow1'\nprint(testval[\"first\"][\"second\"][\"animals\"][0][\"name\"])\n\n# But the power comes in cleanly accessing nested elements.\n# To use, just call the dictp value like a function with '()' syntax:\nanimals = testval(\"first/second/animals\")\nprint(animals)\n\n# If a any key is missing, whole thing just returns None:\ncars = testval(\"first/third/cars\")\nassert(cars is None)\n\n# To force a keyError, use raise_if_missing:\n# This throws: KeyError: 'third'\ntestval(\"first/third/cars\", raise_if_missing=True)\n\n# You can use list indexes to only get certain elements in a nested list\n# prints: 'cat'\nfirst = testval(\"first/second/animals/0/type\")\nprint(first)\n\n# Uses list comprehension, e.g. \"1:2\", \":-1\", \":\", etc.\nlast_two = testval(\"first/second/animals/-2:/type\")\nmiddle_cats = testval(\"first/second/animals/1:-2/name\")\nall_animals = testval(\"first/second/animals\")\nall_types = testval(\"first/second/animals/:/type\")\n\n# If key actually is a string with \":\", use raw_index option\ntestval(\"real/key/:/a\", raw_index=True)\n\n# To only get list items that have a specific subkey, use drop_missing:\n# This returns [None, None, None, 'blue', 'green']\ntestval(\"first/second/animals/:/eye_colour\")\n# This returns ['blue', 'green']\ntestval(\"first/second/animals/:/eye_colour\", drop_missing=True)\n\n# You can also set a overide the value if missing:\n# This returns ['unknown', 'unknown', 'unknown', 'blue', 'green']\ntestval(\"first/second/animals/:/eye_colour\", value_if_missing=\"unknown\")\n\n# These both return \"no cars\"\ntestval(\"first/second/cars\", value_if_missing=\"no cars\")\ntestval(\"first/second/cars/0/type\", value_if_missing=\"no cars\")\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simple-dictpath",
    "package_url": "https://pypi.org/project/simple-dictpath/",
    "platform": null,
    "project_url": "https://pypi.org/project/simple-dictpath/",
    "project_urls": {
      "Bug Tracker": "https://github.com/pathtofile/dictpath/issues",
      "Homepage": "https://github.com/pathtofile/dictpath"
    },
    "release_url": "https://pypi.org/project/simple-dictpath/1.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.10",
    "summary": "Provides path-like access to nested dictionary elements",
    "version": "1.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15771267,
  "releases": {
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee5e50d4acc48f6d50c7a07d39d04d5f9b95016145b994ee2102bbad0c47853c",
          "md5": "cf39aa7ecd529b2dc398735b0bd0aeb4",
          "sha256": "92766c571215eea6c7ddfd3fa29b060a3d0c7d9d3ca3acc771618492c21641ba"
        },
        "downloads": -1,
        "filename": "simple_dictpath-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf39aa7ecd529b2dc398735b0bd0aeb4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 4349,
        "upload_time": "2022-11-15T05:22:31",
        "upload_time_iso_8601": "2022-11-15T05:22:31.824887Z",
        "url": "https://files.pythonhosted.org/packages/ee/5e/50d4acc48f6d50c7a07d39d04d5f9b95016145b994ee2102bbad0c47853c/simple_dictpath-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18c99a02d979d4975b368ce3634b01258a69be0181fa5464119faa11ec03f8e8",
          "md5": "a95f6b4cf123016db3bc7deeae53c43a",
          "sha256": "9780871b19ca19500e33bdc4dfa99f546d1f21c069a875ce8eb0a0717ef10345"
        },
        "downloads": -1,
        "filename": "simple-dictpath-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a95f6b4cf123016db3bc7deeae53c43a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 3890,
        "upload_time": "2022-11-15T05:22:34",
        "upload_time_iso_8601": "2022-11-15T05:22:34.004303Z",
        "url": "https://files.pythonhosted.org/packages/18/c9/9a02d979d4975b368ce3634b01258a69be0181fa5464119faa11ec03f8e8/simple-dictpath-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ee5e50d4acc48f6d50c7a07d39d04d5f9b95016145b994ee2102bbad0c47853c",
        "md5": "cf39aa7ecd529b2dc398735b0bd0aeb4",
        "sha256": "92766c571215eea6c7ddfd3fa29b060a3d0c7d9d3ca3acc771618492c21641ba"
      },
      "downloads": -1,
      "filename": "simple_dictpath-1.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cf39aa7ecd529b2dc398735b0bd0aeb4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 4349,
      "upload_time": "2022-11-15T05:22:31",
      "upload_time_iso_8601": "2022-11-15T05:22:31.824887Z",
      "url": "https://files.pythonhosted.org/packages/ee/5e/50d4acc48f6d50c7a07d39d04d5f9b95016145b994ee2102bbad0c47853c/simple_dictpath-1.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "18c99a02d979d4975b368ce3634b01258a69be0181fa5464119faa11ec03f8e8",
        "md5": "a95f6b4cf123016db3bc7deeae53c43a",
        "sha256": "9780871b19ca19500e33bdc4dfa99f546d1f21c069a875ce8eb0a0717ef10345"
      },
      "downloads": -1,
      "filename": "simple-dictpath-1.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a95f6b4cf123016db3bc7deeae53c43a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 3890,
      "upload_time": "2022-11-15T05:22:34",
      "upload_time_iso_8601": "2022-11-15T05:22:34.004303Z",
      "url": "https://files.pythonhosted.org/packages/18/c9/9a02d979d4975b368ce3634b01258a69be0181fa5464119faa11ec03f8e8/simple-dictpath-1.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}