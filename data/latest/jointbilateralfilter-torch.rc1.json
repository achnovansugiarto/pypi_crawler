{
  "info": {
    "author": "Fabian Wagner",
    "author_email": "fabian.wagner@fau.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Trainable Joint Bilateral Filter Layer (PyTorch)\n================================================\n\nThis repository implements a GPU-accelerated trainable joint bilateral filter layer (guidance image + three spatial and one range filter dimension) that can be directly included in any Pytorch graph, just as any conventional layer (FCL, CNN, ...). By calculating the analytical derivative of the joint bilateral filter with respect to its parameters, the guidance image, and the input, the (so far) hyperparameters can be automatically optimized via backpropagation for a calculated loss.\n\nOur corresponding paper `Trainable Joint Bilateral Filters for Enhanced Prediction Stability in Low-dose CT <https://arxiv.org/pdf/2207.07368.pdf>`__ can be found on `arXiv <https://arxiv.org/abs/2207.07368>`__ (pre-print).\n\nCitation:\n~~~~~~~~~\n\nIf you find our code useful, please cite our work\n\n::\n\n   @article{wagner2022trainable,\n     title={Trainable Joint Bilateral Filters for Enhanced Prediction Stability in Low-dose CT},\n     author={Wagner, Fabian and Thies, Mareike and Denzinger, Felix and Gu, Mingxuan and Patwari, Mayank and Ploner, Stefan and Maul, Noah and Pfaff, Laura and Huang, Yixing and Maier, Andreas},\n     journal={arXiv preprint arXiv:2207.07368},\n     year={2022},\n     doi={https://arxiv.org/abs/2207.07368}\n    }\n\nSetup:\n~~~~~~\n\nThe C++/CUDA implemented forward and backward functions are compiled via\nthe setup.py script using setuptools:\n\n1. Create and activate a python environment (python>=3.7).\n2. Install `Torch <https://pytorch.org/get-started/locally/>`__ (tested versions: 1.7.1, 1.9.0).\n3. Install the joint bilateral filter layer via pip:\n\n.. code:: bash\n\n   pip install jointbilateralfilter_torch\n\nIn case you encounter problems with 3. install the layer directly from our\n`GitHub repository <https://github.com/faebstn96/trainable-joint-bilateral-filter-source>`__:\n\n3. Download the repository.\n4. Navigate into the extracted repo.\n5. Compile/install the joint bilateral filter layer by calling\n\n.. code:: bash\n\n   python setup.py install\n\nExample scripts:\n~~~~~~~~~~~~~~~~\n-  Can be found in our `GitHub repository <https://github.com/faebstn96/trainable-joint-bilateral-filter-source>`__\n-  Try out the forward pass by running the example_filter.py (requires\n   `Matplotlib <https://matplotlib.org/stable/users/installing.html>`__\n   and\n   `scikit-image <https://scikit-image.org/docs/stable/install.html>`__).\n-  Run the gradcheck.py script to verify the correct gradient\n   implementation.\n-  Run example_optimization.py to optimize the parameters of a joint bilateral\n   filter layer to automatically denoise an image.\n\nOptimized joint bilateral filter prediction:\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. image:: https://github.com/faebstn96/trainable-joint-bilateral-filter-source/blob/main/out/example_optimization.png?raw=true\n\nImplementation:\n~~~~~~~~~~~~~~~\n\nThe general structure of the implementation follows the PyTorch\ndocumentation for `creating custom C++ and CUDA\nextensions <https://pytorch.org/tutorials/advanced/cpp_extension.html>`__.\nThe forward pass implementation of the layer is based on code from the\n`Project MONAI <https://docs.monai.io/en/latest/networks.html>`__\nframework, originally published under the `Apache License, Version\n2.0 <https://www.apache.org/licenses/LICENSE-2.0>`__. The correct\nimplementation of the analytical forward and backward pass can be\nverified by running the gradcheck.py script, comparing numerical\ngradients with the derived analytical gradient using the PyTorch\nbuilt-in `gradcheck\nfunction <https://pytorch.org/docs/stable/generated/torch.autograd.gradcheck.html>`__.\n\nTroubleshooting\n~~~~~~~~~~~~~~~\n\nnvcc-related errors:\n^^^^^^^^^^^^^^^^^^^^\n\n1. Compiling the filter layers requires the Nvidia CUDA toolkit. Check\n   its version\n\n   .. code:: bash\n\n      nvcc --version\n\n   or install it via, e.g.,\n\n   .. code:: bash\n\n      sudo apt update\n      sudo apt install nvidia-cuda-toolkit\n\n2. The NVIDIA CUDA toolkit 11.6 made some problems on a Windows machine\n   in combination with pybind. Downgrading the toolkit to version 11.3\n   fixed the problem (see\n   `this <https://discuss.pytorch.org/t/cuda-11-6-extension-problem/145830>`__\n   discussion).\n\nWindows-related problems:\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n1. Make sure the\n   `cl.exe <https://docs.microsoft.com/en-us/cpp/build/reference/compiler-options?view=msvc-170>`__\n   environment variable is correctly set.\n",
    "description_content_type": null,
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/faebstn96/trainable-joint-bilateral-filter-source",
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "jointbilateralfilter_torch",
    "package_url": "https://pypi.org/project/jointbilateralfilter_torch/",
    "platform": null,
    "project_url": "https://pypi.org/project/jointbilateralfilter_torch/",
    "project_urls": {
      "Homepage": "https://github.com/faebstn96/trainable-joint-bilateral-filter-source"
    },
    "release_url": "https://pypi.org/project/jointbilateralfilter_torch/1.0.0/",
    "requires_dist": null,
    "requires_python": null,
    "summary": "Trainable Joint Bilateral Filter Layer (PyTorch)",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14613624,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b607f5f2746f60c8d43b30f43c7a57496c07808d3f6ff0199471da317a85a0a",
          "md5": "732a53391dbce488e4a42eea6d6f2807",
          "sha256": "29cce6457901b82288c501c1df5f10694e46e7c866991258a2dd5dd2268a94bb"
        },
        "downloads": -1,
        "filename": "jointbilateralfilter_torch-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "732a53391dbce488e4a42eea6d6f2807",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 20411,
        "upload_time": "2022-08-01T14:38:43",
        "upload_time_iso_8601": "2022-08-01T14:38:43.742829Z",
        "url": "https://files.pythonhosted.org/packages/1b/60/7f5f2746f60c8d43b30f43c7a57496c07808d3f6ff0199471da317a85a0a/jointbilateralfilter_torch-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1b607f5f2746f60c8d43b30f43c7a57496c07808d3f6ff0199471da317a85a0a",
        "md5": "732a53391dbce488e4a42eea6d6f2807",
        "sha256": "29cce6457901b82288c501c1df5f10694e46e7c866991258a2dd5dd2268a94bb"
      },
      "downloads": -1,
      "filename": "jointbilateralfilter_torch-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "732a53391dbce488e4a42eea6d6f2807",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 20411,
      "upload_time": "2022-08-01T14:38:43",
      "upload_time_iso_8601": "2022-08-01T14:38:43.742829Z",
      "url": "https://files.pythonhosted.org/packages/1b/60/7f5f2746f60c8d43b30f43c7a57496c07808d3f6ff0199471da317a85a0a/jointbilateralfilter_torch-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}