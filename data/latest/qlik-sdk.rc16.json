{
  "info": {
    "author": "qlik-sdk",
    "author_email": "dev.thulhu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Qlik SDK\n\nQlik's Python SDK allows you to leverage the APIs of Qlik Cloud platform from the comfort of python.\n\n---\n\n- [qlik-sdk-python](#qlik-sdk-python)\n  - [Install](#install)\n  - [Getting started](#getting-started)\n  - [Authentication options](#authentication-options)\n    - [API keys](#api-keys)\n  - [Changelog](#changelog)\n  - [Contributing](#contributing)\n    - [Bugs](#bugs)\n    - [Features](#features)\n    - [Developing](#developing)\n  - [Examples](#examples)\n    - [apps_items.py](#apps_itemspy)\n    - [flask_oauth.py](#flask_oauthpy)\n    - [import_export.py](#import_exportpy)\n    - [rpc basics example_custom_type.py](#rpc-basics-example_custom_typepy)\n    - [rpc basics lists app_object_list app_object_list.py](#rpc-basics-lists-app_object_list-app_object_listpy)\n    - [rpc basics lists field_list field_list.py](#rpc-basics-lists-field_list-field_listpy)\n    - [rpc basics lists variable_list variable_list.py](#rpc-basics-lists-variable_list-variable_listpy)\n    - [rpc data hypercubes pivot hypercube_pivot.py](#rpc-data-hypercubes-pivot-hypercube_pivotpy)\n    - [rpc data hypercubes stacked hypercube_stacked.py](#rpc-data-hypercubes-stacked-hypercube_stackedpy)\n    - [rpc data hypercubes straight hypercube_straight.py](#rpc-data-hypercubes-straight-hypercube_straightpy)\n    - [rpc rpc.py](#rpc-rpcpy)\n\n---\n\n## Install\n\n```bash\npython3 -m pip install --upgrade qlik-sdk\n```\n\n## Getting started\n\nThe lowest supported python version is `3.8`.\nA good place to start is our [examples](./examples/). Take a look and learn how to authorize and use our REST and RPC clients to access the APIs. If you're in a real hurry, the essence of our examples is shown below.\n\n```python\nfrom qlik_sdk import Auth, AuthType, Config\n\napi_key = \"<MY_API_KEY>\"\nbase_url = \"<URL_TO_MY_TENANT>\" # E.g. https://foo.qlikcloud.eu.com\n\nq = Qlik(config=Config(host=base_url, auth_type=AuthType.APIKey, api_key=api_key))\n\nuser = q.users.get_me()\nprint(\"Logged in as: \" + user.name)\n# For REST calls: auth.rest\n# For RPC calls: auth.rpc\n```\n\n## Authentication options\n\n### API keys\n\nAn API key is a token representing a user in your tenant. Anyone may interact with the platform programmatically using the API key. The token contains the user context, respecting the access control privileges the user has in your tenant. More info can be found on [Qlik Dev Portal](https://qlik.dev/basics/authentication-options#api-keys).\n\nFor a step-by-step guide on how to get an API key for your tenant, check this [tutorial](https://qlik.dev/tutorials/generate-your-first-api-key).\n\n### OAuth2\n\nOAuth is a standard security protocol for authorization and delegation. It allows third party applications to access API resources without disclosing the end-user credentials.\n\nFor a step-by-step guide on how to create an OAuth client for your tenant, check [Creating and managing OAuth clients](https://help.qlik.com/en-US/cloud-services/Subsystems/Hub/Content/Sense_Hub/Admin/mc-create-oauth-client.htm)\n\n```py\n# Authorization\n  # Create auth object\n  config = Config(\n        host='my-tenant.qlikcloud.com',\n        auth_type=AuthType.OAuth2,\n        client_id='<clientId>',\n        client_secret='<clientSecret>',\n        redirect_url='<redirectUrl>',\n        scope='<scopes>',\n    )\n  auth = Auth(config=config)\n\n  # for login redirect to authorization uri for OAuth exchange token flow\n  # which will call callback endpoint with credentials\n  redirect(auth.generate_authorization_url(), code=301)\n\n  # on callback endpoint (redirectUri), exachange the creadentials with token\n  auth.authorize(request.full_path)\n\n  # fetch a resource\n  user = auth.rest(path=\"/users/me\")\n\n  # refreshing token\n  auth.refresh_token()\n\n  # deauthorization\n  auth.deauthorize()\n```\n\n## Examples\n\n### apps_items.py\n\n```py\n\nimport os\nimport uuid\nfrom dataclasses import asdict\n\nfrom dotenv import dotenv_values\n\nfrom qlik_sdk import (\n    AppAttributes,\n    AppUpdateAttributes,\n    AuthType,\n    Config,\n    CreateApp,\n    Qlik,\n    UpdateApp,\n)\n\n# get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this script\nfile_dir = os.path.dirname(os.path.abspath(__file__))\ndotenv_path = os.path.join(file_dir, \".env\")\nif not os.path.exists(dotenv_path):\n    print(\"Missing .env file: \" + dotenv_path)\nenv_values = dotenv_values(dotenv_path=dotenv_path)\nhost = env_values.get(\"QCS_SERVER\", False)\napi_key = env_values.get(\"QCS_API_KEY\", False)\n\nconfig = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)\nq = Qlik(config=config)\n\nuser = q.users.get_me()\nprint(\"Logged in as: \" + user.name)\n\n\ndef log_req(req):\n    print(\"request:\", req.method, req.url)\n    return req\n\n\ndef log_res(res):\n    print(\"response:\", res.request.method, res.request.url, \"->\", res.status_code)\n    return res\n\n\nq.apps.auth.rest.interceptors[\"response\"].use(log_res)\nq.apps.auth.rest.interceptors[\"request\"].use(log_req)\n\n# The body parameter can be either an object or a dict\n# The recommended way is to use an object\n\n# create apps - 2 methods - dict body or obj body\n# create app - dict body\nrandom_app_name1 = str(uuid.uuid1())\napp_dict_body = q.apps.create(data={\"attributes\": {\"name\": random_app_name1}})\napp_dict_body.delete()\n\n# create app - obj body\nrandom_app_name2 = str(uuid.uuid1())\napp = q.apps.create(\n    data=CreateApp(\n        attributes=AppAttributes(name=random_app_name2, description=\"desc\", spaceId=\"\")\n    ),\n)\n\n# Convert app object to dict\napp_asdict = asdict(app)\n\n# set load script, reload and evaluate expression\nwith app.open():\n    script = \"Load RecNo() as N autogenerate(200);\"\n    app.set_script(script)\n    app.do_reload()\n    eval = app.evaluate(\"SUM([N])\")\n    print(eval)\n\n\n# Set attribute\n# body: dict\napp.set(data={\"attributes\": {\"name\": \"set-name-dict\"}})\n# body: obj\nupdate_name = str(uuid.uuid1())\napp.set(\n    UpdateApp(\n        attributes=AppUpdateAttributes(description=\"new description\", name=update_name)\n    )\n)\n\n\n# items list - query param name\nitems0 = q.items.get_items(name=update_name)\napp.delete()\nitems1 = q.items.get_items(name=update_name)\n# get_items using an app name query param, result-length before and after delete\nprint(\n    f\"found items matching: {update_name}, before and after delete: {len(items0)}, {len(items1)}\"\n)\n\n\nitems = q.items.get_items()\nfirst_100_item_names = []\nfor item in items.pagination:\n    if len(first_100_item_names) < 100:\n        first_100_item_names.append(item.name)\n    else:\n        break\n\n```\n\n### flask_oauth.py\n\n```py\n\nimport os\nimport random\n\nfrom dotenv import dotenv_values\nfrom flask import Flask, redirect, render_template, request\n\n# src. should be removed when example is public\nfrom src.qlik_sdk import Auth, AuthType, Config\n\n# get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this script\nfile_dir = os.path.dirname(os.path.abspath(__file__))\ndotenv_path = os.path.join(file_dir, \".env\")\nif not os.path.exists(dotenv_path):\n    print(\"Missing .env file: \" + dotenv_path)\nenv_values = dotenv_values(dotenv_path=dotenv_path)\nhost = env_values.get(\"QCS_SERVER_OAUTH\", False)\nclient_id = env_values.get(\"CLIENT_ID_WEB\", False)\nclient_secret = env_values.get(\"CLIENT_SECRET_WEB\", False)\nredirect_url = \"http://localhost:3000/login/callback\"\n\n\nconfig = Config(\n    host=host,\n    auth_type=AuthType.OAuth2,\n    client_id=client_id,\n    client_secret=client_secret,\n    redirect_url=redirect_url,\n    scope=[\"offline_access\"],\n)\nauth = Auth(config=config)\n\napp = Flask(__name__)\n\ntemplate_data = {\"is_logged_in\": False, \"user\": \"\", \"eval_result\": \"\"}\n\n\n@app.route(\"/\")\ndef index():\n    try:\n        user = auth.rest(path=\"/users/me\")\n        user = user.json()\n        template_data[\"is_logged_in\"] = True\n        template_data[\"user\"] = f\"User: {user['name']} is logged in\"\n    except Exception:\n        template_data[\"is_logged_in\"] = False\n        template_data[\"user\"] = \"\"\n    return render_template(\"index.html\", template_data=template_data)\n\n\n@app.route(\"/login\")\ndef login():\n    return redirect(auth.generate_authorization_url(), code=301)\n\n\n@app.route(\"/login/callback\")\ndef callback():\n    auth.authorize(request.full_path)\n    return redirect(\"/\", code=301)\n\n\n@app.route(\"/logout\")\ndef logout():\n    auth.deauthorize()\n    template_data[\"is_logged_in\"] = False\n    template_data[\"user\"] = \"\"\n    return redirect(\"/\", code=301)\n\n\n@app.route(\"/refresh\")\ndef refresh():\n    auth.refresh_token()\n    return redirect(\"/\", code=301)\n\n\n@app.route(\"/websocket\")\ndef websocket():\n    random_id = random.randint(1, 1000)\n    app_id = f\"SessionApp_{random_id}\"\n    try:\n        # Open a websocket for a session app using RpcClient\n        rpc_session = auth.rpc(app_id)\n        try:\n            rpc_session.open()\n            app_handle = (rpc_session.send(\"GetActiveDoc\", -1))[\"qReturn\"][\"qHandle\"]\n            rpc_session.send(\n                \"SetScript\",\n                app_handle,\n                \"Load RecNo() as N autogenerate(10)\",\n            )\n            rpc_session.send(\"DoReload\", app_handle)\n            eval_result = rpc_session.send(\"Evaluate\", app_handle, \"SUM([N])\")\n            template_data[\"is_logged_in\"] = True\n            template_data[\"eval_result\"] = eval_result[\"qReturn\"]\n        except Exception as err:\n            print(f\"rpc_session error occured: {err}\")\n            return redirect(\"/\", code=500)\n        finally:\n            rpc_session.close()\n            print(\"rpc_connection closed\")\n    except Exception as err:\n        print(f\"error occured while setting up auth: {err}\")\n        return redirect(\"/\", code=500)\n    return redirect(\"/\", code=301)\n\n\nif __name__ == \"__main__\":\n    app.run(host=\"localhost\", port=3000, debug=True)\n\n```\n\n### import_export.py\n\n```py\n\nimport json\nimport os\nimport shutil\nimport uuid\n\nfrom dotenv import dotenv_values\n\nfrom qlik_sdk import AuthType, Config, Qlik\n\n# get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this script\nfile_dir = os.path.dirname(os.path.abspath(__file__))\ndotenv_path = os.path.join(file_dir, \".env\")\nif not os.path.exists(dotenv_path):\n    print(\"Missing .env file: \" + dotenv_path)\nenv_values = dotenv_values(dotenv_path=dotenv_path)\nhost = env_values.get(\"QCS_SERVER\", False)\napi_key = env_values.get(\"QCS_API_KEY\", False)\n\nwith open(os.path.join(file_dir, \"sheetListDef.json\")) as json_file:\n    sheet_list_def = json.load(json_file)\n\n\nconfig = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)\nq = Qlik(config=config)\n\n# Print user name\nuser = q.users.get_me()\nprint(\"Logged in as: \" + user.name)\n\n# Create a managed space\nspace_name = \"publish-apps-sdk-test\" + str(uuid.uuid1())\nshared_space = q.spaces.create(\n    {\n        \"name\": space_name,\n        \"description\": \"space used for testing\",\n        \"type\": \"managed\",\n    }\n)\nprint(f\"created space with name {space_name} and id {shared_space.id}\")\n\n# Import app - (app with multiple sheets)\nqvf_file = os.path.join(file_dir, \"two-sheets.qvf\")\napp_name = \"import-test\" + str(uuid.uuid1())\nwith open(qvf_file, \"rb\") as qvf_data:\n    imported_app = q.apps.import_app(data=qvf_data, name=app_name)\n\nprint(f\"imported app with name {app_name} and id {imported_app.attributes.id}\")\n\n# Publish each sheet\nprint(f\"open app with id {imported_app.attributes.id} and publish all sheets\")\nwith imported_app.open():\n    session_obj = imported_app.create_session_object(sheet_list_def)\n    sheet_list_layout = session_obj.get_layout()\n    sheet_id_list = [q.qInfo.qId for q in sheet_list_layout.qAppObjectList.qItems]\n    for sheet_id in sheet_id_list:\n        print(f\"publishing sheet with id {sheet_id}\")\n        sheet_obj = imported_app.get_object(sheet_id)\n        sheet_obj.publish()\n\n# Publish the app\nprint(\n    f\"publish app with id {imported_app.attributes.id} to space with id {shared_space.id}\"\n)\npublished_app = imported_app.publish({\"spaceId\": shared_space.id})\nprint(f\"published app id {published_app.attributes.id}\")\n\n# export app\nlocal_filename = f\"exported{uuid.uuid1()}.qvf\"\ntemp_contents_url = imported_app.export()\n# download app streaming to file\nwith q.auth.rest(path=temp_contents_url, method=\"get\", stream=True) as r:\n    with open(local_filename, \"wb\") as f:\n        shutil.copyfileobj(r.raw, f)\nprint(f\"Exported {published_app.attributes.name} to {local_filename}\")\n\next_file_path = env_values.get(\"EXTENSION_ZIP_PATH\", False)\n# Upload extension\nwith open(ext_file_path, \"rb\") as ext_file:\n    ext = q.extensions.create(file=ext_file)\n\n\n# TODO\n# set properties - change sheet name\n# upload theme\n# apply themes on the app\n# import datafiles\n\n# Delete everything created\nprint(\"cleaning up\")\next.delete()\nimported_app.delete()\npublished_app.delete()\nshared_space.delete()\nos.remove(local_filename)\n\n```\n\n### rpc basics example_custom_type.py\n\n```py\n\nimport os\nimport sys\nimport uuid\n\nfrom dotenv import dotenv_values\n\nfrom qlik_sdk import Apps, Auth, AuthType, Config\n\n# get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this script\nfile_dir = os.path.dirname(os.path.abspath(__file__))\ndotenv_path = os.path.join(file_dir, \"../../.env\")\nif not os.path.exists(dotenv_path):\n    print(\"Missing .env file: \" + dotenv_path)\nenv_values = dotenv_values(dotenv_path=dotenv_path)\nhost = env_values.get(\"QCS_SERVER\", False)\napi_key = env_values.get(\"QCS_API_KEY\", False)\n\nconfig = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)\n\n\nauth = Auth(config)\napps = Apps(config)\n\nsession_app_id = \"SessionApp_\" + str(uuid.uuid1())\nsession_app = apps.create_session_app(session_app_id)\nwith session_app.open():\n    # create a generic object of a custom type\n    properties = {\n        \"qInfo\": {\"qType\": \"custom-object\"},\n    }\n\n    obj = session_app.create_session_object(properties)\n\n    # set a custom property i.e. a property not defined in GenericObjectProperties\n    properties[\"CustomProperty\"] = \"custom-property-value\"\n    obj.set_properties(properties)\n\n    # fetch the properties and validate that the custom property is returned\n    new_props = obj.get_properties()\n    if new_props.qInfo.qType != \"custom-object\":\n        sys.exit(1)\n    if new_props.CustomProperty != \"custom-property-value\":\n        sys.exit(1)\n\n```\n\n### rpc basics lists app_object_list app_object_list.py\n\n```py\n\nimport os\nimport sys\nimport uuid\n\nfrom dotenv import dotenv_values\n\nfrom src.qlik_sdk import Apps, AuthType, Config, GenericObjectProperties\nfrom src.qlik_sdk.apis.Apps import JsonObject\nfrom src.qlik_sdk.apis.Qix import AppObjectListDef, NxInfo\n\n\nclass CustomObjectProperties(GenericObjectProperties):\n    meta: dict[str, str] = None\n\n\ndef list_app_objects():\n    # get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this script\n    file_dir = os.path.abspath(\"\")\n    dotenv_path = os.path.join(file_dir + \"/examples\", \".env\")\n    if not os.path.exists(dotenv_path):\n        print(\"Missing .env file: \" + dotenv_path)\n    env_values = dotenv_values(dotenv_path=dotenv_path)\n    host = env_values.get(\"QCS_SERVER\", False)\n    api_key = env_values.get(\"QCS_API_KEY\", False)\n\n    config = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)\n    apps = Apps(config)\n\n    session_app_id = \"SessionApp_\" + str(uuid.uuid1())\n    session_app = apps.create_session_app(session_app_id)\n\n    with session_app.open():\n        for i in range(10):\n            properties = CustomObjectProperties(\n                qInfo=NxInfo(qType=\"my-object\"),\n                meta=dict({\"title\": f\"my-object-{i}\"}),\n            )\n            session_app.create_object(properties)\n        list_properties = GenericObjectProperties(\n            qInfo=NxInfo(qType=\"my-list\"),\n            qAppObjectListDef=AppObjectListDef(\n                qType=\"my-object\", qData=JsonObject(title=\"/meta/title\")\n            ),\n        )\n        try:\n            object = session_app.create_object(qProp=list_properties)\n            layout = object.get_layout()\n            return layout.qAppObjectList.qItems.__len__()\n        except ValueError as e:\n            print(e.__class__)\n\n\nif list_app_objects() != 10:\n    print(\"Error in number of objects .....\")\n    sys.exit(1)\n\n```\n\n### rpc basics lists field_list field_list.py\n\n```py\n\nimport os\nimport sys\nimport uuid\n\nfrom dotenv import dotenv_values\n\nfrom src.qlik_sdk import Apps, AuthType, Config, GenericObjectProperties\nfrom src.qlik_sdk.apis.Qix import FieldListDef, NxInfo\n\nscript = \"\"\"\nTempTable:\nLoad\nRecNo() as Field1,\nRand() as Field2,\nRand() as Field3\nAutoGenerate 100\n\"\"\"\n\n\n# get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this script\nfile_dir = os.path.abspath(\"\")\ndotenv_path = os.path.join(file_dir + \"/examples\", \".env\")\nif not os.path.exists(dotenv_path):\n    print(\"Missing .env file: \" + dotenv_path)\nenv_values = dotenv_values(dotenv_path=dotenv_path)\nhost = env_values.get(\"QCS_SERVER\", False)\napi_key = env_values.get(\"QCS_API_KEY\", False)\n\nconfig = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)\napps = Apps(config)\n\nsession_app_id = \"SessionApp_\" + str(uuid.uuid1())\nsession_app = apps.create_session_app(session_app_id)\n\nwith session_app.open():\n    # Load in some data into the session document:\n    session_app.set_script(script)\n    session_app.do_reload()\n\n    # Create a field list using qFieldListDef and list all fields available in the document.\n\n    object = session_app.create_session_object(\n        GenericObjectProperties(\n            qInfo=NxInfo(qType=\"my-field-list\"),\n            qFieldListDef=FieldListDef(),\n        )\n    )\n    layout = object.get_layout()\n    print(\"field-list \", layout.qFieldList.qItems)\n    items = layout.qFieldList.qItems\n    if (\n        items.__len__() != 3\n        or items[0].qName != \"Field1\"\n        or items[1].qName != \"Field2\"\n        or items[2].qName != \"Field3\"\n    ):\n        print(\"Error generated qFieldsLists ......\")\n        sys.exit(1)\n\n```\n\n### rpc basics lists variable_list variable_list.py\n\n```py\n\nimport os\nimport sys\nimport uuid\n\nfrom dotenv import dotenv_values\n\nfrom src.qlik_sdk import Apps, AuthType, Config, GenericObjectProperties\nfrom src.qlik_sdk.apis.Apps import JsonObject\nfrom src.qlik_sdk.apis.Qix import NxInfo, VariableListDef\n\nscript = \"\"\"\nTempTable:\nLoad\nRecNo() as Field1,\nRand() as Field2,\nRand() as Field3\nAutoGenerate 100\n\"\"\"\n\n\n# get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this script\nfile_dir = os.path.abspath(\"\")\ndotenv_path = os.path.join(file_dir + \"/examples\", \".env\")\nif not os.path.exists(dotenv_path):\n    print(\"Missing .env file: \" + dotenv_path)\nenv_values = dotenv_values(dotenv_path=dotenv_path)\nhost = env_values.get(\"QCS_SERVER\", False)\napi_key = env_values.get(\"QCS_API_KEY\", False)\n\nconfig = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)\napps = Apps(config)\n\nsession_app_id = \"SessionApp_\" + str(uuid.uuid1())\nsession_app = apps.create_session_app(session_app_id)\n\nwith session_app.open():\n    # Load in some data into the session document:\n    session_app.set_script(script)\n    session_app.do_reload()\n    session_app.create_variable_ex(\n        GenericObjectProperties(\n            qInfo=NxInfo(qType=\"variable\"),\n            qComment=\"sample comment\",\n            qDefinition=\"=Count(Field1)\",\n            qName=\"vVariableName\",\n        )\n    )\n    variable = session_app.get_variable_by_id(\"vVariableName\")\n    object = session_app.create_session_object(\n        GenericObjectProperties(\n            qInfo=NxInfo(qType=\"VariableList\"),\n            qVariableListDef=VariableListDef(\n                qType=\"variable\",\n                qData=JsonObject(tags=\"/tags\"),\n                qShowSession=True,\n                qShowConfig=True,\n                qShowReserved=True,\n            ),\n        )\n    )\n    layout = object.get_layout()\n    layout.qVariableList.qItems\n    print(\"variable-list: \", layout.qVariableList.qItems)\n    for item in layout.qVariableList.qItems:\n        if item.qName == \"vVariableName\":\n            sys.exit(0)\n    sys.exit(1)\n\n```\n\n### rpc data hypercubes pivot hypercube_pivot.py\n\n```py\n\nimport os\nimport sys\nimport uuid\n\nfrom dotenv import dotenv_values\n\nfrom src.qlik_sdk import Apps, AuthType, Config\nfrom src.qlik_sdk.apis.Qix import (\n    GenericObjectProperties,\n    HyperCubeDef,\n    NxDimension,\n    NxInfo,\n    NxInlineDimensionDef,\n    NxInlineMeasureDef,\n    NxMeasure,\n    NxPage,\n    NxSelectionCell,\n)\n\nscript = \"\"\"\nTempTable:\nLoad\nRecNo() as ID,\nRecNo()+1 as ID2,\nRand() as Value\nAutoGenerate 100\n\"\"\"\n\n# get QCS_SERVER and QCS_API_KEY from .env file\nfile_dir = os.path.dirname(os.path.abspath(__file__))\ndotenv_path = os.path.join(file_dir, \"../../../../.env\")\nif not os.path.exists(dotenv_path):\n    print(\"Missing .env file: \" + dotenv_path)\nenv_values = dotenv_values(dotenv_path=dotenv_path)\nhost = env_values.get(\"QCS_SERVER\", False)\napi_key = env_values.get(\"QCS_API_KEY\", False)\n\nconfig = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)\napps = Apps(config)\n\nsession_app_id = \"SessionApp_\" + str(uuid.uuid1())\nsession_app = apps.create_session_app(session_app_id)\nwith session_app.open():\n    # Load in some data into the session document:\n    session_app.set_script(script)\n    session_app.do_reload()\n\n    obj = session_app.create_object(\n        GenericObjectProperties(\n            qInfo=NxInfo(qType=\"my-pivot-hypercube\"),\n            qHyperCubeDef=HyperCubeDef(\n                qDimensions=[\n                    NxDimension(qDef=NxInlineDimensionDef(qFieldDefs=[\"ID\"])),\n                    NxDimension(qDef=NxInlineDimensionDef(qFieldDefs=[\"ID2\"])),\n                ],\n                qMeasures=[\n                    NxMeasure(\n                        qDef=NxInlineMeasureDef(\n                            qDef=\"Sum(Value)\",\n                        )\n                    )\n                ],\n                qMode=\"EQ_DATA_MODE_PIVOT\",\n                qAlwaysFullyExpanded=True,\n            ),\n        )\n    )\n    data = obj.get_hyper_cube_pivot_data(\n        \"/qHyperCubeDef\",\n        [\n            NxPage(\n                qHeight=5,\n                qLeft=0,\n                qTop=0,\n                qWidth=2,\n            )\n        ],\n    )\n\n    print(\"HyperCude object data: \", data)\n\n    obj.select_pivot_cells(\n        \"/qHyperCubeDef\", [NxSelectionCell(qType=\"D\", qRow=1, qCol=0)], False, False\n    )\n\n    data = obj.get_hyper_cube_pivot_data(\n        \"/qHyperCubeDef\",\n        [\n            NxPage(\n                qHeight=5,\n                qLeft=0,\n                qTop=0,\n                qWidth=2,\n            )\n        ],\n    )\n\n    print(\"Hypercube data pages after selection: \", data)\n    if not (\n        len(data) == 1\n        and len(data[0].qData) == 1\n        and len(data[0].qTop) == 1\n        and data[0].qTop[0].qText == \"Sum(Value)\"\n    ):\n        print(\"Error in generated stack pages ......\")\n        sys.exit(1)\n\n```\n\n### rpc data hypercubes stacked hypercube_stacked.py\n\n```py\n\nimport os\nimport sys\nimport uuid\n\nfrom dotenv import dotenv_values\n\nfrom src.qlik_sdk import Apps, AuthType, Config\nfrom src.qlik_sdk.apis.Qix import (\n    GenericObjectProperties,\n    HyperCubeDef,\n    NxDimension,\n    NxInfo,\n    NxInlineDimensionDef,\n    NxInlineMeasureDef,\n    NxMeasure,\n    NxPage,\n    NxSelectionCell,\n)\n\nscript = \"\"\"\nTempTable:\nLoad\nRecNo() as ID,\nRecNo()+1 as ID2,\nRand() as Value\nAutoGenerate 100\n\"\"\"\n\n# get QCS_SERVER and QCS_API_KEY from .env file\nfile_dir = os.path.dirname(os.path.abspath(__file__))\ndotenv_path = os.path.join(file_dir, \"../../../../.env\")\nif not os.path.exists(dotenv_path):\n    print(\"Missing .env file: \" + dotenv_path)\nenv_values = dotenv_values(dotenv_path=dotenv_path)\nhost = env_values.get(\"QCS_SERVER\", False)\napi_key = env_values.get(\"QCS_API_KEY\", False)\n\nconfig = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)\napps = Apps(config)\n\nsession_app_id = \"SessionApp_\" + str(uuid.uuid1())\nsession_app = apps.create_session_app(session_app_id)\nwith session_app.open():\n    # Load in some data into the session document:\n    session_app.set_script(script)\n    session_app.do_reload()\n\n    obj = session_app.create_object(\n        GenericObjectProperties(\n            qInfo=NxInfo(\n                qType=\"my-stacked-hypercube\",\n            ),\n            qHyperCubeDef=HyperCubeDef(\n                qDimensions=[\n                    NxDimension(qDef=NxInlineDimensionDef(qFieldDefs=[\"ID\"])),\n                    NxDimension(qDef=NxInlineDimensionDef(qFieldDefs=[\"ID2\"])),\n                ],\n                qMeasures=[\n                    NxMeasure(\n                        qDef=NxInlineMeasureDef(\n                            qDef=\"Sum(Value)\",\n                        )\n                    )\n                ],\n                qMode=\"EQ_DATA_MODE_PIVOT_STACK\",\n                qAlwaysFullyExpanded=True,\n            ),\n        )\n    )\n    data = obj.get_hyper_cube_stack_data(\n        \"/qHyperCubeDef\",\n        [\n            NxPage(\n                qHeight=5,\n                qLeft=0,\n                qTop=0,\n                qWidth=2,\n            )\n        ],\n        10000,\n    )\n\n    print(\"HyperCude stack data: \", data)\n\n    obj.select_pivot_cells(\n        \"/qHyperCubeDef\",\n        [\n            NxSelectionCell(\n                qType=\"D\",\n                qRow=1,\n                qCol=0,\n            )\n        ],\n        False,\n        False,\n    )\n\n    data = obj.get_hyper_cube_stack_data(\n        \"/qHyperCubeDef\",\n        [\n            NxPage(\n                qHeight=5,\n                qLeft=0,\n                qTop=0,\n                qWidth=2,\n            )\n        ],\n        10000,\n    )\n    print(\"Hypercube stack data pages after selection: \", data)\n    if not (\n        len(data) == 1\n        and len(data[0].qData) == 1\n        and len(data[0].qData[0].qSubNodes) == 1\n        and len(data[0].qData[0].qSubNodes[0].qSubNodes) == 1\n    ):\n        print(\"Error in generated stack pages ......\")\n        sys.exit(1)\n\n```\n\n### rpc data hypercubes straight hypercube_straight.py\n\n```py\n\nimport os\nimport sys\nimport uuid\n\nfrom dotenv import dotenv_values\n\nfrom src.qlik_sdk import Apps, AuthType, Config\nfrom src.qlik_sdk.apis.Qix import (\n    GenericObjectProperties,\n    HyperCubeDef,\n    NxDimension,\n    NxInfo,\n    NxInlineDimensionDef,\n    NxInlineMeasureDef,\n    NxMeasure,\n    NxPage,\n)\n\nscript = \"\"\"\nTempTable:\nLoad\nRecNo() as ID,\nRand() as Value\nAutoGenerate 100\n\"\"\"\n\n# get QCS_SERVER and QCS_API_KEY from .env file\nfile_dir = os.path.dirname(os.path.abspath(__file__))\ndotenv_path = os.path.join(file_dir, \"../../../../.env\")\nif not os.path.exists(dotenv_path):\n    print(\"Missing .env file: \" + dotenv_path)\nenv_values = dotenv_values(dotenv_path=dotenv_path)\nhost = env_values.get(\"QCS_SERVER\", False)\napi_key = env_values.get(\"QCS_API_KEY\", False)\n\nconfig = Config(host=host, auth_type=AuthType.APIKey, api_key=api_key)\napps = Apps(config)\n\nsession_app_id = \"SessionApp_\" + str(uuid.uuid1())\nsession_app = apps.create_session_app(session_app_id)\nwith session_app.open():\n    # Load in some data into the session document:\n    session_app.set_script(script)\n    session_app.do_reload()\n    obj = session_app.create_object(\n        GenericObjectProperties(\n            qInfo=NxInfo(\n                qType=\"my-straight-hypercube\",\n            ),\n            qHyperCubeDef=HyperCubeDef(\n                qDimensions=[NxDimension(qDef=NxInlineDimensionDef(qFieldDefs=[\"ID\"]))],\n                qMeasures=[\n                    NxMeasure(\n                        qDef=NxInlineMeasureDef(\n                            qDef=\"=Sum(Value)\",\n                        )\n                    )\n                ],\n                qInitialDataFetch=[NxPage(qHeight=5, qWidth=2)],\n            ),\n        )\n    )\n    layout = obj.get_layout()\n    print(\"Hypercube data pages: \", layout)\n    data = obj.select_hyper_cube_cells(\"/qHyperCubeDef\", [0, 2, 4], [0], False, False)\n    print(\"After selection (notice the `qState` values)\")\n    print(\"HyperCude object data: \", data)\n    layout = obj.get_layout()\n    print(layout)\n    if not (\n        len(layout.qHyperCube.qDimensionInfo[0].qGroupFieldDefs) == 1\n        and layout.qHyperCube.qDimensionInfo[0].qGroupFieldDefs[0] == \"ID\"\n        and layout.qInfo.qType == \"my-straight-hypercube\"\n    ):\n        print(\"Error in generated layout ......\")\n        sys.exit(1)\n\n```\n\n### rpc rpc.py\n\n```py\n\nimport os\nimport uuid\n\nfrom dotenv import dotenv_values\n\nfrom qlik_sdk import Auth, AuthType, Config, Qlik\nfrom qlik_sdk.rpc import RequestObject\n\n# get QCS_SERVER and QCS_API_KEY from .env file in the same folder as this script\nfile_dir = os.path.dirname(os.path.abspath(__file__))\ndotenv_path = os.path.join(file_dir, \"../.env\")\nif not os.path.exists(dotenv_path):\n    print(\"Missing .env file: \" + dotenv_path)\nenv_values = dotenv_values(dotenv_path=dotenv_path)\nhost = env_values.get(\"QCS_SERVER\", False)\napi_key = env_values.get(\"QCS_API_KEY\", False)\n\nauth = Auth(Config(host=host, auth_type=AuthType.APIKey, api_key=api_key))\nq = Qlik(Config(host=host, auth_type=AuthType.APIKey, api_key=api_key))\n\n\ndef log_request_interceptor(request: RequestObject) -> RequestObject:\n    print(\"request: \" + str(request))\n    return request\n\n\ndef log_qreturn_response_interceptor(response):\n    if \"result\" in response and \"qReturn\" in response[\"result\"]:\n        qreturn = str(response[\"result\"][\"qReturn\"])\n        print(f\"qReturn: {qreturn}\")\n    return response\n\n\n# register interceptors\nauth.rpc.interceptors[\"request\"].use(log_request_interceptor)\nauth.rpc.interceptors[\"response\"].use(log_qreturn_response_interceptor)\n\nsession_app_id = \"SessionApp_\" + str(uuid.uuid1())\nrpc_session = auth.rpc(app_id=session_app_id)\n\nwith rpc_session.open() as rpc_client:\n    app = rpc_client.send(\"OpenDoc\", -1, session_app_id)\n    handle = app[\"qReturn\"][\"qHandle\"]\n    script = \"Load RecNo() as N autogenerate(200);\"\n    # set load script and reload\n    rpc_client.send(\"SetScript\", handle, script)\n    rpc_client.send(\"DoReload\", handle)\n\n    # parameters can be passed without name which will be sent positional in an array\n    count_expr = \"COUNT([N])\"\n    positional_eval = rpc_client.send(\"Evaluate\", handle, count_expr)\n    print(f\"Evaluate {count_expr} = {positional_eval}\")\n\n    # parameters can also be passed with name which will be sent as an object\n    sum_expr = \"SUM([N])\"\n    keyword_eval = rpc_client.send(\"Evaluate\", handle, qExpression=sum_expr)\n    print(f\"Evaluate {sum_expr} = {keyword_eval}\")\n\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qlik-sdk",
    "package_url": "https://pypi.org/project/qlik-sdk/",
    "platform": null,
    "project_url": "https://pypi.org/project/qlik-sdk/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/qlik-sdk/0.14.0/",
    "requires_dist": [
      "requests (==2.27.1)",
      "websocket-client (==1.3.2)",
      "PyJWT[crypto] (==2.4.0)"
    ],
    "requires_python": ">=3.8",
    "summary": "Software Development Kit for Qlik Cloud",
    "version": "0.14.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17395387,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7fd31f26ee59c249972bc5dc4b05b418232effae1f91b70325c73a891dd6bdcd",
          "md5": "cff491e31c51626906437eaacc135893",
          "sha256": "a2906fe17c620e47fda6b750fdf60ce29f7e016794cb1dd621f3483ef4126cdb"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cff491e31c51626906437eaacc135893",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8038,
        "upload_time": "2022-03-02T11:52:44",
        "upload_time_iso_8601": "2022-03-02T11:52:44.666514Z",
        "url": "https://files.pythonhosted.org/packages/7f/d3/1f26ee59c249972bc5dc4b05b418232effae1f91b70325c73a891dd6bdcd/qlik_sdk-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40a60032947cfea9f71aa10e8738fb6dd7c68019d06aef19b0b66715d6d58f5d",
          "md5": "d572ab232c1c78d93a34015f99e7edb7",
          "sha256": "741a6cb6990bd4b57c0cb7559b5e471ccb73b19646ee6619991b3438b3ed1336"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d572ab232c1c78d93a34015f99e7edb7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7705,
        "upload_time": "2022-03-02T11:52:46",
        "upload_time_iso_8601": "2022-03-02T11:52:46.465283Z",
        "url": "https://files.pythonhosted.org/packages/40/a6/0032947cfea9f71aa10e8738fb6dd7c68019d06aef19b0b66715d6d58f5d/qlik-sdk-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.10.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9308cd5b618262f8f90fbf2824a1721f24511730a0a256d8a55202abad449d83",
          "md5": "7510f1ac0ff6dff09d180468077d90bc",
          "sha256": "9700198ed300bd279b65d9b4d8acb7ca85b00e69188a2f4d35d34326ca7294f9"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.10.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7510f1ac0ff6dff09d180468077d90bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 201984,
        "upload_time": "2022-11-04T14:03:56",
        "upload_time_iso_8601": "2022-11-04T14:03:56.605551Z",
        "url": "https://files.pythonhosted.org/packages/93/08/cd5b618262f8f90fbf2824a1721f24511730a0a256d8a55202abad449d83/qlik_sdk-0.10.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e30d02cbc1cabf94adbdedd41cd511445f9535562cb3b58025222c78d7672ba",
          "md5": "df5024e10e06607e77618624c11098c5",
          "sha256": "81ad1e5f85a5ac1a60c873705033f3878ce6cfcb03a9717d723bc8aeaa3caa3b"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.10.2.tar.gz",
        "has_sig": false,
        "md5_digest": "df5024e10e06607e77618624c11098c5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 187696,
        "upload_time": "2022-11-04T14:03:57",
        "upload_time_iso_8601": "2022-11-04T14:03:57.939005Z",
        "url": "https://files.pythonhosted.org/packages/4e/30/d02cbc1cabf94adbdedd41cd511445f9535562cb3b58025222c78d7672ba/qlik-sdk-0.10.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a089c18a002b328ceaf093673190047293a2910cc5a0a357a347425ba632d5c2",
          "md5": "8ee79a052f0a63d66a1a5ff8b5fd998b",
          "sha256": "d1ca0fb0d7821f6801cdc26f8d67af65ca26d7c7c05d9b475cd4f6e08fedb96e"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.11.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ee79a052f0a63d66a1a5ff8b5fd998b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 255921,
        "upload_time": "2022-12-13T12:08:21",
        "upload_time_iso_8601": "2022-12-13T12:08:21.709181Z",
        "url": "https://files.pythonhosted.org/packages/a0/89/c18a002b328ceaf093673190047293a2910cc5a0a357a347425ba632d5c2/qlik_sdk-0.11.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e0b69ca701f473eb6eba6449f17194008279f1502a482dee0b0bc934108beb41",
          "md5": "8d311a6e25ab53551752561b22ee25dc",
          "sha256": "8cbaa948938be1424b83b5b926055a6aca3fa03f9d1fd7a21b4e9f0345b6eadc"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8d311a6e25ab53551752561b22ee25dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 239961,
        "upload_time": "2022-12-13T12:08:24",
        "upload_time_iso_8601": "2022-12-13T12:08:24.418949Z",
        "url": "https://files.pythonhosted.org/packages/e0/b6/9ca701f473eb6eba6449f17194008279f1502a482dee0b0bc934108beb41/qlik-sdk-0.11.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.12.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f985cc1ec0067b8d512dd6d06275dfd64db3740ee4fad2ddf6a355594fd1c43",
          "md5": "c73684cae20ca4312f926e95606275f6",
          "sha256": "a24d93f92e326effb5dc1904c3504747743a38f2dadf7354210ac739fa7450ef"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.12.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c73684cae20ca4312f926e95606275f6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 226431,
        "upload_time": "2023-01-04T13:22:27",
        "upload_time_iso_8601": "2023-01-04T13:22:27.426858Z",
        "url": "https://files.pythonhosted.org/packages/3f/98/5cc1ec0067b8d512dd6d06275dfd64db3740ee4fad2ddf6a355594fd1c43/qlik_sdk-0.12.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bd834914444095e87fcb126baa714b4f8ba45ca600b0d73ac82db7f9c5962929",
          "md5": "38abcecab0813a875da5d165f5c226f2",
          "sha256": "5e7a72ba3b032bf79589e15d7e76776b954dba60a17564de2b93764a69fc1ff5"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.12.0.tar.gz",
        "has_sig": false,
        "md5_digest": "38abcecab0813a875da5d165f5c226f2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 209155,
        "upload_time": "2023-01-04T13:22:29",
        "upload_time_iso_8601": "2023-01-04T13:22:29.308163Z",
        "url": "https://files.pythonhosted.org/packages/bd/83/4914444095e87fcb126baa714b4f8ba45ca600b0d73ac82db7f9c5962929/qlik-sdk-0.12.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.13.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9c45908d996653840676ed07e2ac6a589ec7145066973e1855597c85372ba748",
          "md5": "785d24b42c50b64c954beb53eb862eb8",
          "sha256": "aecb5a03101f22371b88c661366a86907b928a2bd7c22c2299a8d2d1b9965c6c"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.13.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "785d24b42c50b64c954beb53eb862eb8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 242982,
        "upload_time": "2023-02-21T14:18:26",
        "upload_time_iso_8601": "2023-02-21T14:18:26.069716Z",
        "url": "https://files.pythonhosted.org/packages/9c/45/908d996653840676ed07e2ac6a589ec7145066973e1855597c85372ba748/qlik_sdk-0.13.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ef257fc042b5b9cfac6ee6ad8166b3c55fa7a2909ca8f2105953225b8e37cccf",
          "md5": "599d670d27b67897dec4e61463970751",
          "sha256": "9f62a1e2c07f4cc3be2965d14af350ab03ab9d5a3f0f288cc6e8f82e19f84dcb"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.13.0.tar.gz",
        "has_sig": false,
        "md5_digest": "599d670d27b67897dec4e61463970751",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 224757,
        "upload_time": "2023-02-21T14:18:27",
        "upload_time_iso_8601": "2023-02-21T14:18:27.994739Z",
        "url": "https://files.pythonhosted.org/packages/ef/25/7fc042b5b9cfac6ee6ad8166b3c55fa7a2909ca8f2105953225b8e37cccf/qlik-sdk-0.13.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.14.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffe5a38e1bd52a2af0a88c8127a61aeea8865dd1b38410805b2b6ccdc0c54883",
          "md5": "238fb7a65c86605942774119ed6a2bb9",
          "sha256": "88d43dd22a2c74c7e96536478d9834ba453e21e573a5559b8706649ea87415f1"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.14.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "238fb7a65c86605942774119ed6a2bb9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 242586,
        "upload_time": "2023-03-22T09:18:52",
        "upload_time_iso_8601": "2023-03-22T09:18:52.697142Z",
        "url": "https://files.pythonhosted.org/packages/ff/e5/a38e1bd52a2af0a88c8127a61aeea8865dd1b38410805b2b6ccdc0c54883/qlik_sdk-0.14.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26113ceaec42be53d851b8b0bebfdee86f045b7f1f6e57bcf7d2f5c37e735d4f",
          "md5": "60718beeeb264a9194fa1bdfc54583ad",
          "sha256": "2b7dd2af1dcc5fee45ab2c9e42571e9250a4655a9b72670f68949a2f909ef4d8"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.14.0.tar.gz",
        "has_sig": false,
        "md5_digest": "60718beeeb264a9194fa1bdfc54583ad",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 224156,
        "upload_time": "2023-03-22T09:18:54",
        "upload_time_iso_8601": "2023-03-22T09:18:54.856879Z",
        "url": "https://files.pythonhosted.org/packages/26/11/3ceaec42be53d851b8b0bebfdee86f045b7f1f6e57bcf7d2f5c37e735d4f/qlik-sdk-0.14.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a276ab8a7f976a762194856e1ee5f71919906760e572d58fe13e8047afbf09f9",
          "md5": "73d911540983892ee8f1668b36529a9e",
          "sha256": "f0fc1db86006e1fb758c4ca9f3a4d5b7d5775b321d9975f8de61aef0fe7deef7"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73d911540983892ee8f1668b36529a9e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8795,
        "upload_time": "2022-03-16T11:57:21",
        "upload_time_iso_8601": "2022-03-16T11:57:21.139092Z",
        "url": "https://files.pythonhosted.org/packages/a2/76/ab8a7f976a762194856e1ee5f71919906760e572d58fe13e8047afbf09f9/qlik_sdk-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4133d120af023f79944280259ec16d8f707e254cf7ceafb97434a62a0e22443d",
          "md5": "1b4e353f06f7e81e41d62b0ef09aad7a",
          "sha256": "4483c8a441cbabf2b2dfea8a795ab16fb4ad6d1dd42f89a6c8e4867d70acb9ef"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1b4e353f06f7e81e41d62b0ef09aad7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 8439,
        "upload_time": "2022-03-16T11:57:22",
        "upload_time_iso_8601": "2022-03-16T11:57:22.805399Z",
        "url": "https://files.pythonhosted.org/packages/41/33/d120af023f79944280259ec16d8f707e254cf7ceafb97434a62a0e22443d/qlik-sdk-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "50c152a418848a7d379007e1784bd630d19b121d271e64103eeaf582cf47e2a3",
          "md5": "152ad1efb41748d36534bc2e71935ae8",
          "sha256": "f232f11e6fd2a38db20a3f419fdff7db969a21e502328ee74b5a8c28834e3b52"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "152ad1efb41748d36534bc2e71935ae8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9718,
        "upload_time": "2022-03-22T12:39:47",
        "upload_time_iso_8601": "2022-03-22T12:39:47.543135Z",
        "url": "https://files.pythonhosted.org/packages/50/c1/52a418848a7d379007e1784bd630d19b121d271e64103eeaf582cf47e2a3/qlik_sdk-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98315a80d81ab7e53f3de665bed9febbd57e007e715777d241f8f4c8472bbfbd",
          "md5": "cf92a2052435c4755ab41df64d6c2da6",
          "sha256": "2de0943837c90ca5113429edb700760e5678f01c0aac18f13d8432c021847824"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cf92a2052435c4755ab41df64d6c2da6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9035,
        "upload_time": "2022-03-22T12:39:49",
        "upload_time_iso_8601": "2022-03-22T12:39:49.013235Z",
        "url": "https://files.pythonhosted.org/packages/98/31/5a80d81ab7e53f3de665bed9febbd57e007e715777d241f8f4c8472bbfbd/qlik-sdk-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "320027f87d6413f9deb13c8a2cf6fc3752608cc6c439a52864ec2e170ecfbe20",
          "md5": "6e7edac78d1a204f09776920c5621d6a",
          "sha256": "d0169cbb4d30402d712e1e9dd87fd8bfb363bcea9760389dc0ea9f9ca09bfd3e"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e7edac78d1a204f09776920c5621d6a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10712,
        "upload_time": "2022-04-22T08:27:32",
        "upload_time_iso_8601": "2022-04-22T08:27:32.605262Z",
        "url": "https://files.pythonhosted.org/packages/32/00/27f87d6413f9deb13c8a2cf6fc3752608cc6c439a52864ec2e170ecfbe20/qlik_sdk-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f547294bfd4e85ecdb5ca94d267d37675ae0c537e146a8e17a88671c6635c9b9",
          "md5": "99b15db3f83751c03f05b25d1d5b4a42",
          "sha256": "9a768254c98d19f87c62445903be32af0b502880ae7355b0e2cb9a017b7cc3ae"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "99b15db3f83751c03f05b25d1d5b4a42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9665,
        "upload_time": "2022-04-22T08:27:33",
        "upload_time_iso_8601": "2022-04-22T08:27:33.622076Z",
        "url": "https://files.pythonhosted.org/packages/f5/47/294bfd4e85ecdb5ca94d267d37675ae0c537e146a8e17a88671c6635c9b9/qlik-sdk-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd80114e3a062bb1947cc9cf752dd9a34411600e9219498d6dab8cf62128bebe",
          "md5": "26b0919086d1c2bb733c320fa323bf84",
          "sha256": "54f8d89cf1c7a98e079246ba72dd061615feaf415aa8241cdde9a8683f4911f9"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26b0919086d1c2bb733c320fa323bf84",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 146942,
        "upload_time": "2022-05-09T10:31:02",
        "upload_time_iso_8601": "2022-05-09T10:31:02.403883Z",
        "url": "https://files.pythonhosted.org/packages/dd/80/114e3a062bb1947cc9cf752dd9a34411600e9219498d6dab8cf62128bebe/qlik_sdk-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9a9cbe2d725a5b2c0ab73b6bc0e8a0d662023d0ebeb651dc20117e0e77e6a9b6",
          "md5": "16cfe47f3e45fd618b91a455ca130328",
          "sha256": "b7955a0ec36eae6352c60414bfd442e8ab397926eec164f4f6d9b1a10db9846e"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "16cfe47f3e45fd618b91a455ca130328",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 141649,
        "upload_time": "2022-05-09T10:31:03",
        "upload_time_iso_8601": "2022-05-09T10:31:03.592825Z",
        "url": "https://files.pythonhosted.org/packages/9a/9c/be2d725a5b2c0ab73b6bc0e8a0d662023d0ebeb651dc20117e0e77e6a9b6/qlik-sdk-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "459bf6fa7847603ab3493538d4a88f13190340b080aacb782170a470a6e4ebc9",
          "md5": "28b629f95a1975b0e62543e5c3b68a6b",
          "sha256": "36939eb1c48a44f8efbbee8418d8131a7e87816ae824c3363d3eff11b1fd0e77"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "28b629f95a1975b0e62543e5c3b68a6b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 147120,
        "upload_time": "2022-05-13T09:33:27",
        "upload_time_iso_8601": "2022-05-13T09:33:27.992608Z",
        "url": "https://files.pythonhosted.org/packages/45/9b/f6fa7847603ab3493538d4a88f13190340b080aacb782170a470a6e4ebc9/qlik_sdk-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c6bbdc2a9943a30a64b3a834455b59dd44d8932cac4542a4f73b28911f0391c",
          "md5": "0053b1d18ff81a0040a2097f9e402fa2",
          "sha256": "66a230a23b988804853dc5c675f6e1b5c09ff278fac12262bfd75df79267fb76"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0053b1d18ff81a0040a2097f9e402fa2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 141756,
        "upload_time": "2022-05-13T09:33:29",
        "upload_time_iso_8601": "2022-05-13T09:33:29.560314Z",
        "url": "https://files.pythonhosted.org/packages/8c/6b/bdc2a9943a30a64b3a834455b59dd44d8932cac4542a4f73b28911f0391c/qlik-sdk-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1047d527f52a95e9e6e1ad3d041b17cd418f3738e124b85628908d180328d8d3",
          "md5": "735c34376341d41d90e6b4336ba73fa8",
          "sha256": "7cfaa20c5e75b709a6a5933acd3c4c9f841664466b80ae85946ba1c29c2d5360"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "735c34376341d41d90e6b4336ba73fa8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 155070,
        "upload_time": "2022-05-20T09:09:21",
        "upload_time_iso_8601": "2022-05-20T09:09:21.790999Z",
        "url": "https://files.pythonhosted.org/packages/10/47/d527f52a95e9e6e1ad3d041b17cd418f3738e124b85628908d180328d8d3/qlik_sdk-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "37a8336abeb779b10dc1b4e92093b557ae41ecc1a5de7661a34d4c4a5a32aa38",
          "md5": "6b5fa0d92d8882976e568ce3c5217696",
          "sha256": "da95c604a6ea97a39113e443fc5889edeb5a076156c9010b3b0b5ae5c13f09a8"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6b5fa0d92d8882976e568ce3c5217696",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 149160,
        "upload_time": "2022-05-20T09:09:23",
        "upload_time_iso_8601": "2022-05-20T09:09:23.159576Z",
        "url": "https://files.pythonhosted.org/packages/37/a8/336abeb779b10dc1b4e92093b557ae41ecc1a5de7661a34d4c4a5a32aa38/qlik-sdk-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb6a993d63daf888dc1f93af60bce9f74a32e681f8cb1385be72d671e6a7b405",
          "md5": "c408f53f2e8347f3e5d6089bf6adce3d",
          "sha256": "3d5860143f26593ef069a2cb9aefa1cd286ab202f6396c3cc058a186b90c1635"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.7.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c408f53f2e8347f3e5d6089bf6adce3d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 167453,
        "upload_time": "2022-06-09T07:24:52",
        "upload_time_iso_8601": "2022-06-09T07:24:52.330078Z",
        "url": "https://files.pythonhosted.org/packages/eb/6a/993d63daf888dc1f93af60bce9f74a32e681f8cb1385be72d671e6a7b405/qlik_sdk-0.7.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1d23701634b6edd60d780b51eb5870e9034efe848c34cd7482de455afe59c306",
          "md5": "e8fef4b9102c1c9026ebbd83b1b5a4ca",
          "sha256": "efd7b066aa068e0554b5eecb6a55730badd739eef5e0a128248a759ac25f3226"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e8fef4b9102c1c9026ebbd83b1b5a4ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 158880,
        "upload_time": "2022-06-09T07:24:53",
        "upload_time_iso_8601": "2022-06-09T07:24:53.451577Z",
        "url": "https://files.pythonhosted.org/packages/1d/23/701634b6edd60d780b51eb5870e9034efe848c34cd7482de455afe59c306/qlik-sdk-0.7.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0959c0c45ced678b39e33b06246736222544b948e0234e014e702219db1d71ef",
          "md5": "72d387b15632217d36ab33c016a80294",
          "sha256": "96af6056eb1b8867ca0cda1115af60870058d7fa0fe2c7041d9bf97f02a1ef22"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.7.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "72d387b15632217d36ab33c016a80294",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 168625,
        "upload_time": "2022-06-16T08:28:37",
        "upload_time_iso_8601": "2022-06-16T08:28:37.779563Z",
        "url": "https://files.pythonhosted.org/packages/09/59/c0c45ced678b39e33b06246736222544b948e0234e014e702219db1d71ef/qlik_sdk-0.7.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f9ff5f966a8e10a0139c40fe3bcbad0a421a9bf9e4ae02c379d22920af5af59",
          "md5": "8c7a30e5c87072f758f2dab85a743763",
          "sha256": "94c5cb75dade3445df5a14f4533934bdce340eeb8b3563a1c76f51994fb46d5a"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8c7a30e5c87072f758f2dab85a743763",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 160101,
        "upload_time": "2022-06-16T08:28:39",
        "upload_time_iso_8601": "2022-06-16T08:28:39.733575Z",
        "url": "https://files.pythonhosted.org/packages/5f/9f/f5f966a8e10a0139c40fe3bcbad0a421a9bf9e4ae02c379d22920af5af59/qlik-sdk-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "954764150c2ebf0b3f98be3341446fff591ec19c76ea93a9adf655fba8517166",
          "md5": "3ae5972d3d884cebf4bfc23558b5fb81",
          "sha256": "df9bb00959cbf33b2289e6bb3e1e2b7d62885dc29f7c56a171e962f5a4e98c84"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ae5972d3d884cebf4bfc23558b5fb81",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 167935,
        "upload_time": "2022-07-19T12:15:03",
        "upload_time_iso_8601": "2022-07-19T12:15:03.701359Z",
        "url": "https://files.pythonhosted.org/packages/95/47/64150c2ebf0b3f98be3341446fff591ec19c76ea93a9adf655fba8517166/qlik_sdk-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38cdf6f1602ac36a7edcff034d4643dcfadb37bebb7a37e486a5985637b00804",
          "md5": "e962987664a2a373389c23bd57372bcb",
          "sha256": "b2612a6232a215edcff4f626f18ddfc49e231ce5d492addb0d2318141eceb7b1"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e962987664a2a373389c23bd57372bcb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 158745,
        "upload_time": "2022-07-19T12:15:05",
        "upload_time_iso_8601": "2022-07-19T12:15:05.222820Z",
        "url": "https://files.pythonhosted.org/packages/38/cd/f6f1602ac36a7edcff034d4643dcfadb37bebb7a37e486a5985637b00804/qlik-sdk-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "59d1c614b7eb6a779d8a8dd29b813f649c9ff2cc08ff3c494fee8488be7ee913",
          "md5": "ab8e8769deb318a8e188106e9f34bd4e",
          "sha256": "089fb8834d58dac6551d26934c6ac2a82c898e1be4190eb8ebee0ea54ff5129e"
        },
        "downloads": -1,
        "filename": "qlik_sdk-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab8e8769deb318a8e188106e9f34bd4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 169785,
        "upload_time": "2022-07-22T13:19:22",
        "upload_time_iso_8601": "2022-07-22T13:19:22.788809Z",
        "url": "https://files.pythonhosted.org/packages/59/d1/c614b7eb6a779d8a8dd29b813f649c9ff2cc08ff3c494fee8488be7ee913/qlik_sdk-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9170a876e7d4f6f158807542814231d08b68d2f0f3f4e8657b300aa4460fc683",
          "md5": "c91e71abaa300597f1112a98e035fce2",
          "sha256": "67697b45005fa97d296b3c366d3da9ae4ee275c52bb247d56f187ac646121ba7"
        },
        "downloads": -1,
        "filename": "qlik-sdk-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c91e71abaa300597f1112a98e035fce2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 160569,
        "upload_time": "2022-07-22T13:19:27",
        "upload_time_iso_8601": "2022-07-22T13:19:27.422119Z",
        "url": "https://files.pythonhosted.org/packages/91/70/a876e7d4f6f158807542814231d08b68d2f0f3f4e8657b300aa4460fc683/qlik-sdk-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ffe5a38e1bd52a2af0a88c8127a61aeea8865dd1b38410805b2b6ccdc0c54883",
        "md5": "238fb7a65c86605942774119ed6a2bb9",
        "sha256": "88d43dd22a2c74c7e96536478d9834ba453e21e573a5559b8706649ea87415f1"
      },
      "downloads": -1,
      "filename": "qlik_sdk-0.14.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "238fb7a65c86605942774119ed6a2bb9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 242586,
      "upload_time": "2023-03-22T09:18:52",
      "upload_time_iso_8601": "2023-03-22T09:18:52.697142Z",
      "url": "https://files.pythonhosted.org/packages/ff/e5/a38e1bd52a2af0a88c8127a61aeea8865dd1b38410805b2b6ccdc0c54883/qlik_sdk-0.14.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26113ceaec42be53d851b8b0bebfdee86f045b7f1f6e57bcf7d2f5c37e735d4f",
        "md5": "60718beeeb264a9194fa1bdfc54583ad",
        "sha256": "2b7dd2af1dcc5fee45ab2c9e42571e9250a4655a9b72670f68949a2f909ef4d8"
      },
      "downloads": -1,
      "filename": "qlik-sdk-0.14.0.tar.gz",
      "has_sig": false,
      "md5_digest": "60718beeeb264a9194fa1bdfc54583ad",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 224156,
      "upload_time": "2023-03-22T09:18:54",
      "upload_time_iso_8601": "2023-03-22T09:18:54.856879Z",
      "url": "https://files.pythonhosted.org/packages/26/11/3ceaec42be53d851b8b0bebfdee86f045b7f1f6e57bcf7d2f5c37e735d4f/qlik-sdk-0.14.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}