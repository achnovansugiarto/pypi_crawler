{
  "info": {
    "author": "Ross Jacobs",
    "author_email": "rj@swit.sh",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# pre-commit hooks\n\n![Ubuntu Build](https://github.com/pocc/pre-commit-hooks/actions/workflows/gh_actions_ubuntu.yml/badge.svg)\n![Macos Build](https://github.com/pocc/pre-commit-hooks/actions/workflows/gh_actions_macos.yml/badge.svg)\n![Windows Build](https://github.com/pocc/pre-commit-hooks/actions/workflows/gh_actions_windows.yml/badge.svg)\n\n\nThis is a [pre-commit](https://pre-commit.com) hooks repo that\nintegrates two C/C++ code formatters:\n> [clang-format](https://clang.llvm.org/docs/ClangFormatStyleOptions.html),\n[uncrustify](http://uncrustify.sourceforge.net/),\n\nand five C/C++ static code analyzers:\n> [clang-tidy](https://clang.llvm.org/extra/clang-tidy/),\n[oclint](http://oclint.org/),\n[cppcheck](http://cppcheck.sourceforge.net/),\n[cpplint](https://github.com/cpplint/cpplint),\n[include-what-you-use](https://github.com/include-what-you-use/include-what-you-use)\n\nThis repo's hooks do more than passthrough arguments to provide these features:\n\n* Relay correct pass/fail to pre-commit, even when some commands exit 0 when they should not. Some versions of oclint, clang-tidy, and cppcheck have this behavior.\n* Honor `--` arguments, which pre-commit [has problems with](https://github.com/pre-commit/pre-commit/issues/1000)\n* Optionally [enforce a command version](https://github.com/pocc/pre-commit-hooks#special-flags-in-this-repo) so your team gets code formatted/analyzed the same way\n* Formatters clang-format and uncrustify will error with diffs of what has changed\n\n## Example Usage\n\nWith this [err.c](tests/test_repo/err.c)\n\n```c\n#include <stdio.h>\nint main(){int i;return;}\n```\n\nand using this `.pre-commit-config.yaml`:\n\n```yaml\nfail_fast: false\nrepos:\n  - repo: https://github.com/pocc/pre-commit-hooks\n    rev: master\n    hooks:\n      - id: clang-format\n        args: [--style=Google]\n      - id: clang-tidy\n      - id: oclint\n      - id: uncrustify\n      - id: cppcheck\n      - id: cpplint\n      - id: include-what-you-use\n```\n\nAll seven linters should fail on commit with these messages.\nFull text is at [media/all_failed.txt](media/all_failed.txt).\n\n<details>\n  <summary>clang-format error (indentation)</summary>\n\n```\nclang-format.............................................................Failed\n- hook id: clang-format\n- exit code: 1\n\nerr.c\n====================\n--- original\n\n+++ formatted\n\n@@ -1,3 +1,6 @@\n\n #include <stdio.h>\n-int main(){int i;return;}\n+int main() {\n+  int i;\n+  return;\n+}\n\n```\n</details>\n<details>\n  <summary>clang-tidy error (non-void main should return a value)</summary>\n\n```\nclang-tidy...............................................................Failed\n- hook id: clang-tidy\n- exit code: 1\n\n/tmp/temp/err.c:2:18: error: non-void function 'main' should return a value [clang-diagnostic-return-type]\nint main(){int i;return;}\n                 ^\n1 error generated.\nError while processing /tmp/temp/err.c.\nFound compiler error(s).\n\n```\n</details>\n<details>\n  <summary>oclint error (non-void main should return a value)</summary>\n\n```\noclint...................................................................Failed\n- hook id: oclint\n- exit code: 6\n\nCompiler Errors:\n(please be aware that these errors will prevent OCLint from analyzing this source code)\n\n/tmp/temp/err.c:2:18: non-void function 'main' should return a value\n\nClang Static Analyzer Results:\n\n/tmp/temp/err.c:2:18: non-void function 'main' should return a value\n\n\nOCLint Report\n\nSummary: TotalFiles=0 FilesWithViolations=0 P1=0 P2=0 P3=0\n\n\n[OCLint (https://oclint.org) v21.05]\n\n```\n</details>\n<details>\n  <summary>uncrustify error (indentation)</summary>\n\n```\nuncrustify...............................................................Failed\n- hook id: uncrustify\n- exit code: 1\n\nerr.c\n====================\n--- original\n\n+++ formatted\n\n@@ -1,3 +1,5 @@\n\n #include <stdio.h>\n-int main(){int i;return;}\n+int main(){\n+  int i; return;\n+}\n\n```\n</details>\n<details>\n  <summary>cppcheck error (unused variable i)</summary>\n\n```\ncppcheck.................................................................Failed\n- hook id: cppcheck\n- exit code: 1\n\nerr.c:2:16: style: Unused variable: i [unusedVariable]\nint main(){int i;return;}\n               ^\n\n```\n</details>\n<details>\n  <summary>cpplint error (no copyright message, bad whitespace)</summary>\n\n```\ncpplint..................................................................Failed\n- hook id: cpplint\n- exit code: 1\n\nDone processing err.c\nTotal errors found: 4\nerr.c:0:  No copyright message found.  You should have a line: \"Copyright [year] <Copyright Owner>\"  [legal/copyright] [5]\nerr.c:2:  More than one command on the same line  [whitespace/newline] [0]\nerr.c:2:  Missing space after ;  [whitespace/semicolon] [3]\nerr.c:2:  Missing space before {  [whitespace/braces] [5]\n\n```\n</details>\n<details>\n  <summary>include-what-you-use error (remove unused #include <stdio.h>)</summary>\n\n```\ninclude-what-you-use.....................................................Failed\n- hook id: include-what-you-use\n- exit code: 3\n\nerr.c:2:18: error: non-void function 'main' should return a value [-Wreturn-type]\nint main(){int i;return;}\n                 ^\n\nerr.c should add these lines:\n\nerr.c should remove these lines:\n- #include <stdio.h>  // lines 1-1\n\nThe full include-list for err.c:\n---\n\n```\n</details>\n\n_Note that for your config yaml, you can supply your own args or remove the args line entirely,\ndepending on your use case._\n\nYou can also clone this repo and then run the test_repo to see all of the linters at work to produce this output,\n\n```bash\ngit clone https://github.com/pocc/pre-commit-hooks\ncd pre-commit-hooks/tests/test_repo\ngit init\npre-commit install\npre-commit run\n```\n\n## Using this repo\n\n### Special flags in this repo\n\nThere are 2 flags, `--version` and `--no-diff` that can be added to `args:` for a pre-commit hook.\nThey will be removed and not be passed on to the command.\n\nSome linters change behavior between versions. To enforce a linter version\n8.0.0, for example, add `--version=8.0.0` to `args:` for that linter. Note that\nthis is a pre-commit hook arg and will be filtered before args are passed to the linter.\n\nYou can add `--no-diff` to the `args:` for clang-format and uncrustify\nif you would like there to be no diff output for these commands.\n\n### Default Options\n\nThese options are automatically added to enable all errors or are required.\n\n* oclint: `[\"-enable-global-analysis\", \"-enable-clang-static-analyzer\", \"-max-priority-3\", \"0\"]`\n* uncrustify: `[\"-c\", \"defaults.cfg\", \"-q\"]` (options added, and a defaults.cfg generated, if -c is missing)\n* cppcheck: `[\"-q\" , \"--error-exitcode=1\", \"--enable=all\", \"--suppress=unmatchedSuppression\", \"--suppress=missingIncludeSystem\", \"--suppress=unusedFunction\"]` (See https://github.com/pocc/pre-commit-hooks/pull/30)\n* cpplint: `[\"--verbose=0\"]`\n\nIf any of these options are supplied in `args:`, they will override the above defaults (use `-<flag>=<option>` if possible when overriding).\n\n### Compilation Database\n\n`clang-tidy` and `oclint` both expect a\n[compilation database](https://clang.llvm.org/docs/JSONCompilationDatabase.html).\nBoth of the hooks for them will ignore the error for not having one.\n\nYou can generate with one `cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON <dir>` if you\nhave a cmake-based project.\n\n## Information about the Commands\n\nPython3.6+ is required to use these hooks as all 5 invoking scripts are written in it.\nAs this is also the minimum version of pre-commit, this should not be an issue.\n\n### Installation\n\n_You will need to install these utilities in order to use them. Your package\nmanager may already have them. Below are the package names for each package manager, if available:_\n\n* `apt install clang clang-format clang-tidy uncrustify cppcheck iwyu` [1] [2]\n* `yum install llvm uncrustify cppcheck iwyu` [2]\n* `brew install llvm oclint uncrustify cppcheck include-what-you-use` [3]\n* `choco install llvm uncrustify cppcheck inlcude-what-you-use` [4]\n\ncpplint can be installed everywhere with `pip install cpplint`.\n\n[1]: `clang` is a required install for `clang-format` or `clang-tidy` to work.\n\n[2]: oclint takes a couple hours to compile. I've compiled and tarred\n[oclint-v0.15](https://dl.dropboxusercontent.com/s/nu474emafxj2nn5/oclint.tar.gz)\nfor those using linux who want to skip the wait (built on Ubuntu-18.04).\nYou can also download the older [oclint-v0.13.1](https://github.com/oclint/oclint/releases/download/v0.13.1/oclint-0.13.1-x86_64-linux-4.4.0-112-generic.tar.gz)\nfor linux from oclint's github page (see [releases](https://github.com/oclint/oclint/releases)).\n\n[3]: Depending on your brew installation, you may need to install\noclint with `brew cask install oclint`.\n\n[4]: oclint is not available on windows.\n\nIf your package manager is not listed here, it will have similar names for these tools.\nYou can build all of these from source.\n\n### Hook Info\n\n| Hook Info                                                                | Type                 | Languages                             |\n| ------------------------------------------------------------------------ | -------------------- | ------------------------------------- |\n| [clang-format](https://clang.llvm.org/docs/ClangFormatStyleOptions.html) | Formatter            | C, C++, ObjC, ObjC++, Java            |\n| [clang-tidy](https://clang.llvm.org/extra/clang-tidy/)                   | Static code analyzer | C, C++, ObjC                          |\n| [oclint](http://oclint.org/)                                             | Static code analyzer | C, C++, ObjC                          |\n| [uncrustify](http://uncrustify.sourceforge.net/)                         | Formatter            | C, C++, C#, ObjC, D, Java, Pawn, Vala |\n| [cppcheck](http://cppcheck.sourceforge.net/)                             | Static code analyzer | C, C++                                |\n| [cpplint](https://github.com/cpplint/cpplint)                            | Style checker        | C, C++                                |\n| [include-what-you-use](https://github.com/include-what-you-use/include-what-you-use) | Static code analyzer | C, C++                    |\n\n### Hook Option Comparison\n\n| Hook Options                                                             | Fix In Place | Enable all Checks                             | Set key/value |\n| ------------------------------------------------------------------------ | ------------ | --------------------------------------------- | --------------- |\n| [clang-format](https://clang.llvm.org/docs/ClangFormatStyleOptions.html) | `-i`         |                   | |\n| [clang-tidy](https://clang.llvm.org/extra/clang-tidy/)                   | `--fix-errors` [1] | `-checks=*` `-warnings-as-errors=*` [2] | |\n| [oclint](http://oclint.org/)                                             |  | `-enable-global-analysis` `-enable-clang-static-analyzer` `-max-priority-3 0` [3] | `-rc=<key>=<value>` |\n| [uncrustify](http://uncrustify.sourceforge.net/)                         | `--replace` `--no-backup` [4] |  | `--set key=value` |\n| [cppcheck](http://cppcheck.sourceforge.net/)                             |  | `-enable=all` | |\n| [cpplint](https://github.com/cpplint/cpplint)                            |  | `--verbose=0` |  |\n| [include-what-you-use](https://github.com/include-what-you-use/include-what-you-use) | | `--verbose=3` | |\n\n\n[1]: `-fix` will fail if there are compiler errors. `-fix-errors` will `-fix`\nand fix compiler errors if it can, like missing semicolons.\n\n[2]: Be careful with `-checks=*`.  can have self-contradictory rules in newer versions of llvm (9+):\nmodernize wants to use [trailing return type](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-trailing-return-type.html)\nbut Fuchsia [disallows it](https://clang.llvm.org/extra/clang-tidy/checks/fuchsia-trailing-return.html).\n*Thanks to @rambo.*\n\n[3]: The oclint pre-commit hook does the equivalent of `-max-priority-3 0` by default, which returns an error code when any check fails.\nSee [oclint error codes](https://docs.oclint.org/en/stable/manual/oclint.html#exit-status-options) for more info on partially catching failed checks.\n\n[4]: By definition, if you are using `pre-commit`, you are using version control.\nTherefore, it is recommended to avoid needless backup creation by using `--no-backup`.\n\n## Development\n\nSee [README_dev.md](README_dev.md)\n\n## Additional Resources\n\n### clang-format\n\n* [Official Docs](https://clang.llvm.org/docs/ClangFormatStyleOptions.html)\n* [clang-format\n  Guide](https://embeddedartistry.com/blog/2017/10/23/creating-and-enforcing-a-coding-standard-with-clang-format) -\n  a good overview and a great place to get started\n* [clang-format Configurator](https://zed0.co.uk/clang-format-configurator/) - Website to\n  interactively design your config while\n* [clang-format Options Explorer](https://zed0.co.uk/clang-format-configurator/) - Website to interactively\n  understand various options\n* [Source Code](https://github.com/llvm-mirror/clang/tree/master/tools/clang-format)\n\n### clang-tidy\n\n* [Official Docs](https://clang.llvm.org/extra/clang-tidy/)\n* [clang-tidy\n  guide](https://www.kdab.com/clang-tidy-part-1-modernize-source-code-using-c11c14/) -\n  Good place to start\n* [Example\n  usage](https://github.com/KratosMultiphysics/Kratos/wiki/How-to-use-Clang-Tidy-to-automatically-correct-code) -\n  Explanation of how to use clang-tidy by the creators of Kratos\n* [Add your own\n  checks](https://devblogs.microsoft.com/cppblog/exploring-clang-tooling-part-1-extending-clang-tidy/) -\n  Function names must be _awesome_!\n* [Source Code](https://github.com/llvm-mirror/clang-tools-extra/tree/master/clang-tidy)\n\n### oclint\n\n* [Official Docs](http://oclint.org/)\n* [Fastlane Integration](https://docs.fastlane.tools/actions/oclint/)\n* [Source Code](https://github.com/oclint/oclint)\n\n### uncrustify\n\n* [Official Docs](http://uncrustify.sourceforge.net/)\n* [Getting Started with Uncrustify](https://patrickhenson.com/2018/06/07/uncrustify-configuration.html)\n* [Source Code](https://github.com/uncrustify/uncrustify)\n\n### cppcheck\n\n* [Official Docs](http://cppcheck.sourceforge.net/)\n* [Using Cppcheck](https://katecpp.wordpress.com/2015/08/04/cppcheck/)\n* [Source Code](https://github.com/danmar/cppcheck)\n\n### cpplint\n\n* [Google C++ style guide (basis of cpplint)](https://google.github.io/styleguide/cppguide.html)\n* [Source Code](https://github.com/cpplint/cpplint)\n\n### include-what-you-use\n\n* [Official Docs](https://include-what-you-use.org/)\n* [Using include-what-you-use](https://www.incredibuild.com/blog/include-what-you-use-how-to-best-utilize-this-tool-and-avoid-common-issues)\n* [Source Code](https://github.com/include-what-you-use/include-what-you-use)\n\n## License\n\nApache 2.0",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/pocc/pre-commit-hooks",
    "keywords": "",
    "license": "Apache2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "CLinters",
    "package_url": "https://pypi.org/project/CLinters/",
    "platform": "",
    "project_url": "https://pypi.org/project/CLinters/",
    "project_urls": {
      "Homepage": "https://github.com/pocc/pre-commit-hooks"
    },
    "release_url": "https://pypi.org/project/CLinters/1.3.5/",
    "requires_dist": null,
    "requires_python": ">=3.6.1",
    "summary": "pre-commit hooks for C linters",
    "version": "1.3.5",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12389170,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce21797f27c28783db44d6c4c5b706ebde58d408cef5b2248bde4a594596362b",
          "md5": "8c6ae26bcebdf9811d0ff6f2089d8aa8",
          "sha256": "42a5419c8927ac4ae6654273ad3ad790f20e8d8256fbea6dfc4e7b12d9e873e1"
        },
        "downloads": -1,
        "filename": "CLinters-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8c6ae26bcebdf9811d0ff6f2089d8aa8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1",
        "size": 7074,
        "upload_time": "2020-03-22T19:08:21",
        "upload_time_iso_8601": "2020-03-22T19:08:21.450656Z",
        "url": "https://files.pythonhosted.org/packages/ce/21/797f27c28783db44d6c4c5b706ebde58d408cef5b2248bde4a594596362b/CLinters-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4b3302275cde1d086f7b007091e4bbbba68f6ac1d54368cb32dca47f4a4cfed",
          "md5": "0e480d3053ae6009bb6e9deffdeac857",
          "sha256": "423e5accfae47b9c29b78414f75d5d1e33314311dea9ccb6419388d0ee904a88"
        },
        "downloads": -1,
        "filename": "CLinters-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0e480d3053ae6009bb6e9deffdeac857",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1",
        "size": 14430,
        "upload_time": "2020-04-21T04:43:17",
        "upload_time_iso_8601": "2020-04-21T04:43:17.436461Z",
        "url": "https://files.pythonhosted.org/packages/b4/b3/302275cde1d086f7b007091e4bbbba68f6ac1d54368cb32dca47f4a4cfed/CLinters-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "20bf3c4b17978939a623ebe7fb88912a6135356fb92363fedfdd47989a35f9c7",
          "md5": "bb8c531c84e7d2d2201be3b9d2a8553a",
          "sha256": "4a99122373c3b587ff94d9f340bd9b32ffb8fa5e40741253c25c7018bf45fd2f"
        },
        "downloads": -1,
        "filename": "CLinters-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bb8c531c84e7d2d2201be3b9d2a8553a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1",
        "size": 18458,
        "upload_time": "2021-09-02T01:13:53",
        "upload_time_iso_8601": "2021-09-02T01:13:53.225466Z",
        "url": "https://files.pythonhosted.org/packages/20/bf/3c4b17978939a623ebe7fb88912a6135356fb92363fedfdd47989a35f9c7/CLinters-1.3.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6374c4538291d40bd16c3a439df02275525099a20b911d6bdccac23da02ecbce",
          "md5": "4b10bb5ed23a706aac3bf4d6cf13bc00",
          "sha256": "e408b41e3c606477e6f67494f7faecfdd5cb874aad4f3f4a3339d5e3bb663c2f"
        },
        "downloads": -1,
        "filename": "CLinters-1.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4b10bb5ed23a706aac3bf4d6cf13bc00",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1",
        "size": 18439,
        "upload_time": "2021-09-03T09:20:24",
        "upload_time_iso_8601": "2021-09-03T09:20:24.536946Z",
        "url": "https://files.pythonhosted.org/packages/63/74/c4538291d40bd16c3a439df02275525099a20b911d6bdccac23da02ecbce/CLinters-1.3.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2a912b12e93bb9311b9ebbdb67666f206b53044c270f86ac873d125bcb40e7a1",
          "md5": "7ba1a745ba6f80eaffaa2bdc78d7a224",
          "sha256": "3f2d1a2684b0da4aa4e304d390da8758ea993775f6d9ea0d8a67b80e821d80dd"
        },
        "downloads": -1,
        "filename": "CLinters-1.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7ba1a745ba6f80eaffaa2bdc78d7a224",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1",
        "size": 18935,
        "upload_time": "2021-09-11T07:05:05",
        "upload_time_iso_8601": "2021-09-11T07:05:05.879007Z",
        "url": "https://files.pythonhosted.org/packages/2a/91/2b12e93bb9311b9ebbdb67666f206b53044c270f86ac873d125bcb40e7a1/CLinters-1.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6626d04eb4da2e68afe9565b28a1c50e84df5143702561d5e29b93cfd01d120",
          "md5": "55032fcf294fadb324d15006bcb96335",
          "sha256": "525af5a5f7741d2f22d34d5f8f2fe50687ff79e8ad40a9128fc5ac16c9bebc95"
        },
        "downloads": -1,
        "filename": "CLinters-1.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "55032fcf294fadb324d15006bcb96335",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.1",
        "size": 21042,
        "upload_time": "2021-12-23T11:45:27",
        "upload_time_iso_8601": "2021-12-23T11:45:27.832433Z",
        "url": "https://files.pythonhosted.org/packages/e6/62/6d04eb4da2e68afe9565b28a1c50e84df5143702561d5e29b93cfd01d120/CLinters-1.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6626d04eb4da2e68afe9565b28a1c50e84df5143702561d5e29b93cfd01d120",
        "md5": "55032fcf294fadb324d15006bcb96335",
        "sha256": "525af5a5f7741d2f22d34d5f8f2fe50687ff79e8ad40a9128fc5ac16c9bebc95"
      },
      "downloads": -1,
      "filename": "CLinters-1.3.5.tar.gz",
      "has_sig": false,
      "md5_digest": "55032fcf294fadb324d15006bcb96335",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.1",
      "size": 21042,
      "upload_time": "2021-12-23T11:45:27",
      "upload_time_iso_8601": "2021-12-23T11:45:27.832433Z",
      "url": "https://files.pythonhosted.org/packages/e6/62/6d04eb4da2e68afe9565b28a1c50e84df5143702561d5e29b93cfd01d120/CLinters-1.3.5.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}