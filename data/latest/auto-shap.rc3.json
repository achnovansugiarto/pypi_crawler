{
  "info": {
    "author": "Micah Melling",
    "author_email": "micahmelling@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# auto-shap\nThe auto-shap library is your best friend when calculating SHAP values!\n\n[SHAP](https://christophm.github.io/interpretable-ml-book/shap.html) is a\nstate-of-the-art technique for explaining model predictions.\nModel explanation can be valuable in many regards. For one, understanding\nhow a model devised a prediction can engender trust. Conversely, it could\ninform us if our model is using features in a nonsensical or unrealistic way,\npotentially helping us to catch leakage issues. Likewise, feature importance\nscores can be useful for external presentations. For further details on SHAP\nvalues and their underlying mathematical properties, see the hyperlink at the\nbeginning of this paragraph.\n\nThe Python [SHAP library](https://shap.readthedocs.io/en/latest/index.html)\nis often the go-to source for computing SHAP values. It's handy and can\nexplain virtually any model we would like. However, we must be aware of the\nfollowing when using the library.\n\n* The correct type of explainer class must be declared.\n* Our code for extracting SHAP values will be slightly different when we\nhave a regression model compared to when we have a classifier.\n* SHAP cannot natively handel scikit-learn's CalibratedClassifierCV, voting models,\nor stacking models.\n* Boosting models often have distinct behavior when it comes to SHAP values.\n\nLikewise, the native SHAP library does not take advantage of multiprocessing.\nThe auto-shap library will run SHAP calculations in parallel to speed them\nup when possible! When we are using a Tree or Linear Explainer, we can calculate our\nSHAP values in parallel without issue. The results will be the same compared\nto when we run our calculations on a single core. Such situations are heavily\ntested in tests/tests.py in the\n[GitHub Repo](https://github.com/micahmelling/auto-shap). However, the situation\nis slightly different when we are using the KernelExplainer. The KernelExplainer\nis not deterministic, even when we are not using parallel processing. In fact,\nespecially on small datasets, if we re-run the KernelExplain back-to-back on the\nsame data with the same model, we won't get the exact same feature-level attribution,\nthough the total attribution will stay the same (which is tested in tests/tests.py).\nThe foregoing points can be substantiated by looking at the\n[SHAP documentation](https://shap-lrjball.readthedocs.io/en/latest/generated/shap.KernelExplainer.html#shap.KernelExplainer.shap_values).\n[This article](https://edden-gerber.github.io/shapley-part-2/) discusses the deterministic\nnature of certain SHAP calculations.\nIn auto-shap, we still employ multiprocessing when using the KernelExplainer, knowing\nthat our results would still not be perfectly deterministic even on a single core,\nand by using multiprocessing, we get a nice speed improvement. Additionally, there\nis a pickle error when using multiprocessing with a scikit-learn Voting or\nStacking model with SHAP. Therefore, no multiprocessing is used in such cases.\n\nAt a high level, the library will automatically detect the type of model\nthat has been trained (regressor vs. classifier, boosting model vs. other\nmodel, etc.) and apply the correct handling. If your model is not accurately\nidentified by the library, it's easy to specify how it should be handled.\n\n## Installation\nThe easiest way to install the library is with pip.\n\n```buildoutcfg\n$ pip3 install auto-shap\n```\n## Quick Example\nOnce installed, SHAP values can be calculated as follows.\n\n```buildoutcfg\n$ python3\n>>> from auto_shap.auto_shap import generate_shap_values\n>>> from sklearn.datasets import load_breast_cancer\n>>> from sklearn.ensemble import ExtraTreesClassifier\n>>> x, y = load_breast_cancer(return_X_y=True, as_frame=True)\n>>> model = ExtraTreesClassifier()\n>>> model.fit(x, y)\n>>> shap_values_df, shap_expected_value, global_shap_df = generate_shap_values(model, x)\n```\n\nThere you have it!\n* A dataframe of SHAP values for every row in the x predictors dataframe.\n* The expected value of the SHAP explainer (in the above, the average\npredicted positive probability).\n* A dataframe of the global SHAP values covering every feature in the x dataframe.\n\nWhat's more, you can change to a completely new model without changing any\nof the auto-shap code.\n\n```buildoutcfg\n$ python3\n>>> from auto_shap.auto_shap import generate_shap_values\n>>> from sklearn.datasets import load_diabetes\n>>> from sklearn.ensemble import GradientBoostingRegressor\n>>> x, y = load_diabetes(return_X_y=True, as_frame=True)\n>>> model = GradientBoostingRegressor()\n>>> model.fit(x, y)\n>>> shap_values_df, shap_expected_value, global_shap_df = generate_shap_values(model, x)\n```\nauto-shap detected this was a boosted regressor and handled such a case\nappropriately.\n\n## Saving Output\nThe library also provides a helper function for saving output and plots to a\nlocal directory.\n\n```buildoutcfg\n$ python3\n>>> from auto_shap.auto_shap import produce_shap_values_and_summary_plots\n>>> from sklearn.datasets import load_diabetes\n>>> from sklearn.ensemble import GradientBoostingRegressor\n>>> x, y = load_diabetes(return_X_y=True, as_frame=True)\n>>> model = GradientBoostingRegressor()\n>>> model.fit(x, y)\n>>> produce_shap_values_and_summary_plots(model=model, x_df=x, save_path='shap_output')\n```\nThe above code will save three files into a \"files\" subdirectory in the specified\nsave_path directory.\n* A csv of SHAP values for every row in x_df.\n* A txt file containing the expected value of the SHAP explainer.\n* A csv of the global SHAP values covering every feature in x_df.\n\nLikewise, two plots will be saved into a \"plots\" subdirectory.\n* A bar plot of the top global SHAP values.\n* A dot plot of SHAP values to show the influence of features across observations\nin x_df.\n\n## Multiprocessing Support\nBy default, the maximum number of cores available is used to calculate SHAP\nvalues in parallel. To manually set the number of cores to use, you can do\nthe following.\n\n```buildoutcfg\n>>> generate_shap_values(model, x_df, n_jobs=4)\n```\n\nFor small datasets, multiprocessing may not add much in terms of performance and\ncould even slow down computation times due to the overhead of spinning up a\nmultiprocessing pool. To turn off multiprocessing, set n_jobs=1.\n\n## Overriding Auto-Detection\nUsing generate_shap_values() or produce_shap_values_and_summary_plots() will\nleverage auto-detection of certain model characteristics. Those characteristics\nare as follows, which are all controlled with Booleans:\n* linear_model\n* tree_model\n* boosting_model\n* calibrated_model\n* regression_model\n* voting_or_stacking_model\n\nThough auto-shap will natively handle most common models, it is not yet\ntuned to handle every possible type of model. Therefore, in some cases, you may\nhave to manually set one or more of the above Booleans in the function calls.\nAt present and at minimum, auto-shap will work with the following models.\n* XGBClassifier\n* XGBRegressor\n* CatBoostClassifier\n* CatBoostRegressor\n* LGBMClassifier\n* LGBMRegressor\n* ExtraTreesClassifier\n* ExtraTreesRegressor\n* GradientBoostingClassifier\n* GradientBoostingRegressor\n* RandomForestClassifier\n* RandomForestRegressor\n* ElasticNet\n* Lasso\n* LinearRegression\n* LogisticRegression\n* Ridge\n* DecisionTreeClassifier\n* DecisionTreeRegressor\n* VotingClassifier\n* VotingRegressor\n* StackingClassifier\n* StackingRegressor\n\n## CalibratedClassifierCV\nThe auto-shap library provides support for scikit-learn's CalibratedClassifierCV.\nThis implementation will extract the SHAP values for every base estimator in the\ncalibration ensemble. The SHAP values will then be averaged. For details on the\nCalibratedClassifierCV, please go to the\n[documentation](https://scikit-learn.org/stable/modules/generated/sklearn.calibration.CalibratedClassifierCV.html).\nSince we are extracting only the SHAP values for the base estimator, we will miss\nsome detail since we are not using the full calibrator pair. Therefore, while\nthese SHAP values will still be instructive, they will not be perfectly precise.\nFor more precision, we would need to use the KernelExplainer. The main benefit of\naveraging the results of the base estimators is computational as the\nKernelExplainer can be quite slow.\n\nTo use KernelShap, one can do the following. More or less, this will ignore the\nauto-generated model qualities.\n\n```buildoutcfg\n>>> generate_shap_values(model, x_df, use_kernel=True)\n```\n\n## Voting and Stacking Models\nIf auto-shap detects a voting or stacking model, it will automatically use the\nKernel Explainer. The Kernel SHAP is computationally expensive, so you may\nwant to use a sample of x_df. Additionally, there is a pickle error when using\nmultiprocessing with a scikit-learn Voting or Stacking model with SHAP. Therefore, no\nmultiprocessing is used in such cases, which is more motivation for subsetting\nx_df.\n\n## Other Potentially Useful Functionality\nThe generate_shap_values function relies on a few underlying functions that can\nbe accessed directly and have the corresponding arguments and datatypes.\n\n```buildoutcfg\nget_shap_expected_value(explainer: callable, boosting_model: bool, linear_model) -> float\n\ngenerate_shap_global_values(shap_values: np.array, x_df: pd.DataFrame) -> pd.DataFrame\n\nproduce_shap_output_with_kernel_explainer(model: callable, x_df: pd.DataFrame, boosting_model: bool,\n                                          regression_model: bool, linear_model: bool,\n                                          return_df: bool = True, n_jobs: int = None) -> tuple\n\nproduce_shap_output_with_tree_explainer(model: callable, x_df: pd.DataFrame, boosting_model: bool,\n                                        regression_model: bool, linear_model: bool,\n                                        return_df: bool = True, n_jobs: int = None) -> tuple\n\nproduce_shap_output_with_linear_explainer(model: callable, x_df: pd.DataFrame, regression_model: bool,\n                                          linear_model: bool, return_df: bool = True, n_jobs: int = None) -> tuple\n\nproduce_shap_output_for_calibrated_classifier(model: callable, x_df: pd.DataFrame, boosting_model: bool,\n                                              linear_model: bool, n_jobs: int = None) -> tuple\n\nproduce_raw_shap_values(model: callable, x_df: pd.DataFrame, use_kernel: bool, linear_model: bool, tree_model: bool,\n                        calibrated_model: bool, boosting_model: bool, regression_model: bool,\n                        voting_or_stacking_model: bool, n_jobs: int = None) -> tuple\n\n\ngenerate_shap_summary_plot(shap_values: np.array, x_df: pd.DataFrame, plot_type: str, save_path: str,\n                           file_prefix: str = None)\n```\n\n## The End\nEnjoy explaining your models with auto-shap! Feel free to report any issues.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/micahmelling/auto-shap",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "auto-shap",
    "package_url": "https://pypi.org/project/auto-shap/",
    "platform": null,
    "project_url": "https://pypi.org/project/auto-shap/",
    "project_urls": {
      "Homepage": "https://github.com/micahmelling/auto-shap"
    },
    "release_url": "https://pypi.org/project/auto-shap/0.1.1/",
    "requires_dist": [
      "shap (>=0.35.0)",
      "pandas (>=1.1.5)",
      "numpy (>=1.19.4)",
      "matplotlib (>=3.2.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "Calculate SHAP values in parallel and automatically detect what explainer to use",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14985826,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "059c9f5e3e685eb80f854a722812b9ca877ada02f19a4363373a6a411a5739f3",
          "md5": "f161565393136a9c13c4d36f6b51c40b",
          "sha256": "36b989b40a2048dd5a7635027405fe361b7a1bb7bc864eb38600895ab25c64be"
        },
        "downloads": -1,
        "filename": "auto_shap-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f161565393136a9c13c4d36f6b51c40b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11053,
        "upload_time": "2022-03-27T22:34:03",
        "upload_time_iso_8601": "2022-03-27T22:34:03.875930Z",
        "url": "https://files.pythonhosted.org/packages/05/9c/9f5e3e685eb80f854a722812b9ca877ada02f19a4363373a6a411a5739f3/auto_shap-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eaddb0e19dfe20817bad3e4e13a106b3641bed9e42d35d17cf95d71a698d4386",
          "md5": "126d117f357001ce7afd8252f5f51fe8",
          "sha256": "5d3807482c65ca77060cad9d3f16cdcd21dc9b0db70e313c346ed59c003ddce0"
        },
        "downloads": -1,
        "filename": "auto_shap-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "126d117f357001ce7afd8252f5f51fe8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11622,
        "upload_time": "2022-03-27T22:34:06",
        "upload_time_iso_8601": "2022-03-27T22:34:06.272618Z",
        "url": "https://files.pythonhosted.org/packages/ea/dd/b0e19dfe20817bad3e4e13a106b3641bed9e42d35d17cf95d71a698d4386/auto_shap-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca07052a3d4c2bc9c39bd2e7307700f2e65d649148db19442542b633b5327830",
          "md5": "6b6d970b365d54c202280e56ccf1de43",
          "sha256": "f465ccf635b32e0ee95078ec8232cea15a123e7132a6b286870efa763e847f23"
        },
        "downloads": -1,
        "filename": "auto_shap-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6b6d970b365d54c202280e56ccf1de43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13795,
        "upload_time": "2022-09-04T03:23:52",
        "upload_time_iso_8601": "2022-09-04T03:23:52.885221Z",
        "url": "https://files.pythonhosted.org/packages/ca/07/052a3d4c2bc9c39bd2e7307700f2e65d649148db19442542b633b5327830/auto_shap-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "75fdfd0c40e38dcec803a30248d343870b5705c1588a7a4f87c1bbbf9ce955e5",
          "md5": "b34d03afb8fefeb66d9be0beebda4338",
          "sha256": "28eef604895704efc9c46a145fa43c4debb0152265f945f8e12e78b6d634f056"
        },
        "downloads": -1,
        "filename": "auto_shap-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b34d03afb8fefeb66d9be0beebda4338",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12794,
        "upload_time": "2022-09-04T03:42:59",
        "upload_time_iso_8601": "2022-09-04T03:42:59.990585Z",
        "url": "https://files.pythonhosted.org/packages/75/fd/fd0c40e38dcec803a30248d343870b5705c1588a7a4f87c1bbbf9ce955e5/auto_shap-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6990e380dea3ac1af82390abbbccaf5fae98aa045b47d2d88eba42606986cc3a",
          "md5": "33a9b36fb957df2c8d480c0f0d8f4b61",
          "sha256": "0c50fd0e947235fdbeb6ea5b0349c296960bdded1acf3c321f2d9446fca25204"
        },
        "downloads": -1,
        "filename": "auto_shap-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "33a9b36fb957df2c8d480c0f0d8f4b61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 13788,
        "upload_time": "2022-09-04T03:43:01",
        "upload_time_iso_8601": "2022-09-04T03:43:01.872222Z",
        "url": "https://files.pythonhosted.org/packages/69/90/e380dea3ac1af82390abbbccaf5fae98aa045b47d2d88eba42606986cc3a/auto_shap-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "75fdfd0c40e38dcec803a30248d343870b5705c1588a7a4f87c1bbbf9ce955e5",
        "md5": "b34d03afb8fefeb66d9be0beebda4338",
        "sha256": "28eef604895704efc9c46a145fa43c4debb0152265f945f8e12e78b6d634f056"
      },
      "downloads": -1,
      "filename": "auto_shap-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b34d03afb8fefeb66d9be0beebda4338",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12794,
      "upload_time": "2022-09-04T03:42:59",
      "upload_time_iso_8601": "2022-09-04T03:42:59.990585Z",
      "url": "https://files.pythonhosted.org/packages/75/fd/fd0c40e38dcec803a30248d343870b5705c1588a7a4f87c1bbbf9ce955e5/auto_shap-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6990e380dea3ac1af82390abbbccaf5fae98aa045b47d2d88eba42606986cc3a",
        "md5": "33a9b36fb957df2c8d480c0f0d8f4b61",
        "sha256": "0c50fd0e947235fdbeb6ea5b0349c296960bdded1acf3c321f2d9446fca25204"
      },
      "downloads": -1,
      "filename": "auto_shap-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "33a9b36fb957df2c8d480c0f0d8f4b61",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 13788,
      "upload_time": "2022-09-04T03:43:01",
      "upload_time_iso_8601": "2022-09-04T03:43:01.872222Z",
      "url": "https://files.pythonhosted.org/packages/69/90/e380dea3ac1af82390abbbccaf5fae98aa045b47d2d88eba42606986cc3a/auto_shap-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}