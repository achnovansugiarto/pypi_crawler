{
  "info": {
    "author": "Marshall Ward",
    "author_email": "flint@marshallward.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Programming Language :: Python :: 3.9",
      "Topic :: Utilities"
    ],
    "description": "=====\nflint\n=====\nFlint is a framework for building Fortran code analysis tools in Python.  It\nincludes a basic command line tool for linting and code checks, and also\nprovides a framework for developing custom tests.\n\nMore generally, flint provides an interface to a Fortran source code project\nwithin a Python environment.\n\nFlint is in the early stages of development, but currently provides some basic\nfunctionality.\n\n\nInstallation\n============\n\nIn most cases, flint can be installed with ``setup.py``\n\n.. code:: python\n\n   python setup.py install --user\n\nIf you want to install it in your system directories (and have permission):\n\n.. code:: python\n\n   python setup.py install\n\nThis may not work for some users, and more elegant installation methods ought\nto be available in the future, depending on how well-received this project\nbecomes.\n\n\nBasic usage\n===========\n\nCurrent functionality is described below.  During this very early stage of\ndevelopment, features may change, expand, or be dropped without any notice.\n\n\nCommands\n--------\n\nUse ``flint`` to invoke the CLI.  The following tools have been implemented\nwith limited features.\n\n``flint report``\n   Apply a generic linter and static analysis to a Fortran project.\n\n   The following tests are included:\n\n   * Trailing whitespace\n   * Indents with mixed tabs and spaces\n   * Tabs within statements\n   * Excessive line length (both with and without comments)\n\n``flint gendoc``\n   Generates a reST documentation file based on docstrings in the source code.\n   Currently follows the Doxygen convention.\n\n``flint format``\n   In principle, this will provide a formatted version of an input source code.\n   Currently, it returns each statement with whitespace and comments removed.\n\n``flint tag``\n   Return the input files, with statements tagged based on type.  For example,\n   a ``module`` statement is tagged with the letter ``M``.\n\n   This is primarily a debugging tool, but might be of interest to users.\n\n\nDevelopment API\n---------------\n\nFlint provides an interface to the details of the source code, which can be\nused to develop tools which are customized to your project.\n\nTo parse the source code, create a ``Project`` and call ``parse()`` over the\ntop-level directory of the project.\n\n.. code:: python\n\n   from flint.project import Project\n\n   proj = Project()\n   proj.parse('path/to/source')\n\nThe ``proj`` in this example will contain several containers describing the\ncontents of the source code.  (*NOTE: This is limited to the current needs of\nthe developers, but is expected to grow over time.*)\n\nFor example, the following code block will return a list of all the modules and\nits derived types.\n\n.. code:: python\n\n   for mod in proj.modules:\n       for dtype in mod.derived_types:\n           print(dtype.name)\n\n(More concrete examples to follow)\n\nFor more examples, inspect the ``flint/tools`` directory, which describe the\ncommand line tools.\n\n\nHow it Works\n============\n\nFlint is broken into three stages, which closely resemble compiler frontends.\n\n1. The ``Scanner`` object takes an input stream and returns the \"lexemes\", the\n   \"words\" of the grammar.  No semantic meaning is attached to them at this\n   stage.\n\n   One important feature of ``Scanner`` is that it also preserves the\n   nonsemantic lexemes.  Examples include grouped whitespace, endlines, and\n   comments.\n\n   Users would generally not use the ``Scanner`` since it is a component of the\n   ``Lexer``, which is described below.\n\n\n2. The lexemes are passed to the ``Lexer``, which is structured as an iterator.\n   It has three major responsibilities:\n\n   1. Lexemes are identified as either semantic or *liminal*, which is our term\n      for non-semantic tokens such as whitespace, comments, or statement\n      separators (``;``).\n\n   2. Lexemes are converted from lines to ``Statements``.  A statement may span\n      many lines (``&``), or a line may contain many statements (``;``).  The\n      ``Lexer`` will resolve these cases and return the next semantic\n      ``Statement``.\n\n   3. Preprocessing is applied at this stage.  Macro substitutions are applied,\n      but the original macro name is preserved.\n\n   Each iteration of the lexer returns a ``Statement``, which is a ``list``\n   subclass containing the ``Token`` lexemes.\n\n   Each ``Token`` contains a ``head`` and ``tail``, which point to lists of the\n   \"liminals\" inbewteen the semantic lexemes.  This includes whitespace\n   (including endlines), line breaks (``&``), statement terminators (``;``),\n   and comments.  Each ``Token`` preserves its original case, but uses\n   lowercase for general operations, such as comparison tests or dictionary\n   keys.\n\n   There is also a ``PToken`` subclass from preprocessed content.  These tokens\n   display as the original unprocessed lexemes, but are evaluated as the\n   postprocessed value.  For example, macros appear unchanged but use their\n   substituted value in comparison tests.  Values from an ``#include``\n   statement appear as empty strings but are returned as semantically valid\n   statements.\n\n   Although we call these \"tokens\", they are not quite equivalent to the tokens\n   produced by a compiler's parser, since we do not yet classify them into, for\n   example, identifiers or operators.  There is some advantage in deferring\n   this, since most Fortran keywords can also be used as identifiers.\n\n   As with the ``Scanner``, most users will never need to interact with the\n   ``Lexer``, which is a component of the ``Parser`` described below.\n\n\n3. Finally, the ``Lexer`` output is passed to the ``Parser``, which interprets\n   the semantic contents to recreate an abstraction of the source code and its\n   components.\n\n   This is where modules, subprograms, variables, and other content are\n   organized into equivalent data structures which can be probed and traversed\n   for further analysis.\n\n   The ``Parser`` is contained with the ``Source`` objects, which represent\n   abstractions of the source code (aka \"translation units\" in compiler-talk).\n\n   If working as intended, this should be the only level at which the user is\n   required to interact with the parser.\n\n   This is currently the least developed part of flint, so at this point I will\n   just say to watch this space for future work.\n\n\nUnimplemented Features\n======================\n\nThe \"unknown unknowns\" probably exceed the \"known unknowns\" at this stage, but\nwe are aware of the following issues.\n\n* The Fortran expressions themselves remain unparsed beyond identification of\n  its tokens.  Further parsing such as AST generation is not yet attempted.\n\n* Expressions inside of an ``#if`` or ``#elif`` statement are not parsed, and\n  for simplicity are currently assumed to always be false.\n\n  To fix this would require a full expression parser, which is not yet\n  available.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/marshallward/flint",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flint",
    "package_url": "https://pypi.org/project/flint/",
    "platform": "",
    "project_url": "https://pypi.org/project/flint/",
    "project_urls": {
      "Homepage": "http://github.com/marshallward/flint"
    },
    "release_url": "https://pypi.org/project/flint/0.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Fortran code analysis tool",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11270088,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7cd5af2db204960a475e480e9e6b0c38569d7fe496c64fb4da37ea65ec3f099",
          "md5": "ee69bbbf97d3590c174525793cbf6f5d",
          "sha256": "508e28d4ebe7042a6ee2d4deb111fdd0b2cba24edb84646e84e9cfd67c554cd2"
        },
        "downloads": -1,
        "filename": "flint-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ee69bbbf97d3590c174525793cbf6f5d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 32442,
        "upload_time": "2021-08-25T06:18:48",
        "upload_time_iso_8601": "2021-08-25T06:18:48.897066Z",
        "url": "https://files.pythonhosted.org/packages/a7/cd/5af2db204960a475e480e9e6b0c38569d7fe496c64fb4da37ea65ec3f099/flint-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a7cd5af2db204960a475e480e9e6b0c38569d7fe496c64fb4da37ea65ec3f099",
        "md5": "ee69bbbf97d3590c174525793cbf6f5d",
        "sha256": "508e28d4ebe7042a6ee2d4deb111fdd0b2cba24edb84646e84e9cfd67c554cd2"
      },
      "downloads": -1,
      "filename": "flint-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ee69bbbf97d3590c174525793cbf6f5d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 32442,
      "upload_time": "2021-08-25T06:18:48",
      "upload_time_iso_8601": "2021-08-25T06:18:48.897066Z",
      "url": "https://files.pythonhosted.org/packages/a7/cd/5af2db204960a475e480e9e6b0c38569d7fe496c64fb4da37ea65ec3f099/flint-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}