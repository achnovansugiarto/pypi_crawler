{
  "info": {
    "author": "Philipp Eller",
    "author_email": "peller.phys@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# spherical_opt\n\nModule providing spherically aware optimization routines\n\n## Installation\n\n`pip install spherical-opt`\n\n## Usage\n\nWe minimize as an exmple a function `f` that takes as input a 4d array and outputs a scalar. Two of the 4 input dimesnions (indices 2 & 3) are angles on a sphere.\n\n```python\nfrom spherical_opt import spherical_opt\n\ninitial_points = np.zeros(4)\n\nresult = spherical_opt.spherical_opt(f,\n                                     method=\"CRS2\",\n                                     initial_points=initial_points,\n                                     spherical_indices=((2,3),))\n```\n\nAvailable methods are \"Nelder-Mead\" and \"CRS2\", for local and global optimization, respectively. More options, convergence criteria, and batch parallelization are available. This is the list of parameters the `spherical_opt` function accepts:\n\n```\nParameters:\n-----------\nfunc : callable\n    objective function\n    if batch_size == 1, func should be a scalar function\n    if batch_size >  1, func should be a vector function\nmethod : string\n    choices of 'Nelder-Mead' and 'CRS2'\ninital_points : array\n    providing the initial points for the algorithm, shape (N_points, N_dim)\nspherical_indices : iterable of tuples\n    indices of spherical coordinates in pairs of (azimuth, zenith) e.g.\n    `[[0,1], [7,8]]` would identify indices 0 as azimuth and 1 as zenith as\n    spherical coordinates and 7 and 8 another pair of independent spherical\n    coordinates\nparam_boundaries : iterable of tuples\n    hard param boundaries. For Cartesian coordinates only. Tuples should be of form\n    `(param_index, (low_limit, high_limit))`. Use `None` for high or low limit\n    to omit the check on that side. The optimizer will clip the param at param_index to\n    the specified limits.\nbatch_size : int, optional \n    the number of new points proposed at each algorithm iteration\n    batch_size > 1 is only supported for the CRS2 method\nmax_iter : int\n    maximum number of iterations\nmax_calls : int\n    maximum number of function calls\nmax_noimprovement : int\n    break condition, maximum iterations without improvement\nfstdthresh : float\n    break condition, if std(f(p_i)) for all current points p_i drops below\n    fstdthresh, minimization terminates\ncstdthresh : array\n    break condition, if std(p_i) for all non-spherical coordinates current\n    points p_i drops below cstdthresh, minimization terminates, for\n    negative values, coordinate will be ignored\nsstdthresh : array\n    break condition, if std(p_i) for all spherical coordinates current\n    points p_i drops below sstdthresh, minimization terminates, for\n    negative values, coordinate will be ignored\nverbose : bool\nrand : numpy random state or generator (optional)```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/philippeller/spherical_opt",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spherical-opt",
    "package_url": "https://pypi.org/project/spherical-opt/",
    "platform": "",
    "project_url": "https://pypi.org/project/spherical-opt/",
    "project_urls": {
      "Homepage": "https://github.com/philippeller/spherical_opt"
    },
    "release_url": "https://pypi.org/project/spherical-opt/0.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11905661,
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "638ba89d31305d409a0d294698f207f366b2e1d41d2be2d8f562929fe4e03831",
          "md5": "055b40b518d19b2c909857af14db888f",
          "sha256": "5d13f37c31332c791180854e3e15f129e0dbb5905e3ee77b636cb56884b31c24"
        },
        "downloads": -1,
        "filename": "spherical_opt-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "055b40b518d19b2c909857af14db888f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12868,
        "upload_time": "2021-11-02T16:44:55",
        "upload_time_iso_8601": "2021-11-02T16:44:55.733811Z",
        "url": "https://files.pythonhosted.org/packages/63/8b/a89d31305d409a0d294698f207f366b2e1d41d2be2d8f562929fe4e03831/spherical_opt-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "638ba89d31305d409a0d294698f207f366b2e1d41d2be2d8f562929fe4e03831",
        "md5": "055b40b518d19b2c909857af14db888f",
        "sha256": "5d13f37c31332c791180854e3e15f129e0dbb5905e3ee77b636cb56884b31c24"
      },
      "downloads": -1,
      "filename": "spherical_opt-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "055b40b518d19b2c909857af14db888f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12868,
      "upload_time": "2021-11-02T16:44:55",
      "upload_time_iso_8601": "2021-11-02T16:44:55.733811Z",
      "url": "https://files.pythonhosted.org/packages/63/8b/a89d31305d409a0d294698f207f366b2e1d41d2be2d8f562929fe4e03831/spherical_opt-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}