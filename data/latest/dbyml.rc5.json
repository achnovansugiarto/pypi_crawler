{
  "info": {
    "author": "git-ogawa",
    "author_email": "stu1232541964@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# docker-build-yaml (dbyml)\n\n![License](https://img.shields.io/github/license/git-ogawa/dbyml)\n[![Version](https://img.shields.io/pypi/v/dbyml)](https://pypi.python.org/pypi/dbyml/)\n[![Python versions](https://img.shields.io/pypi/pyversions/dbyml)](https://pypi.python.org/pypi/dbyml/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\nDocker-build-yaml (dbyml) is a CLI tool to build a docker image with build options loaded from yaml. Instead of running the `docker build` with many options, write options in config file, build your docker image with them. It helps you to manage build process more readable and flexible.\n\n# Table of contents\n- [Table of contents](#table-of-contents)\n- [Install](#install)\n- [Usage](#usage)\n    - [Preparation](#preparation)\n    - [Create Dockerfile and Configuration file.](#create-dockerfile-and-configuration-file)\n    - [Build](#build)\n    - [Build-args and Labels](#build-args-and-labels)\n    - [(Experimental) Multi-platform build](#experimental-multi-platform-build)\n        - [Example](#example)\n- [Configuration](#configuration)\n    - [Config file](#config-file)\n        - [Update from v1.2.0](#update-from-v120)\n    - [Docker host](#docker-host)\n    - [ENV variables](#env-variables)\n    - [Multi-stage build](#multi-stage-build)\n    - [Push to repository](#push-to-repository)\n    - [Using TLS](#using-tls)\n    - [Multi-platform build](#multi-platform-build-1)\n    - [Other settings](#other-settings)\n\n\n# Install \n```\n$ pip install dbyml\n```\n\n# Usage\n\n## Preparation\nTo use dbyml, Docker Engine must be installed on host for build and run docker commands without root privileges (as non-root user) on client. Refer to [Manage Docker as a non-root user](https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user) or [Docker rootless mode](https://docs.docker.com/engine/security/rootless/) for non-root user setting.\n\n## Create Dockerfile and Configuration file\nTo build your image from Dockerfile, you must make Dockerfile and config file where the build options to be passed to docker command are listed . For example, we will make the following `Dockerfile` and `dbyml.yml` in the same directory.\n\n- Dockerfile\n    - Dbyml does not required any settings about Dockerfile, so you can write according to [Dockerfile reference](https://docs.docker.com/engine/reference/builder/).\n\n```Dockerfile\nFROM alpine:latest\nARG key1\nRUN echo \"$key1\" > arg.txt && \\\n    cat arg.txt && \\\n    rm arg.txt\n\n# You can write any process\n```\n\n- dbyml.yml\n    - This is a config file used by dbyml.\n    - The image name field `name` is required. \n    - The image tag field `tag` is optional. Default value is `latest`.\n    - To set `ARG key1` in the Dockerfile, Set `build_args` field and key name and its value in config. \n```yaml\n---\nimage:\n    name: myimage\n    tag: v1.0\n    build_args:\n        key1: \"This is set by dbyml.\"\n```\n\n\n## Build \nRun dbyml to build the image from your Dockerfile. \n\n```\n$ dbyml \n```\n\nThe image `myimage:v1.0` will be created after successfully build.\n\nIf Dockerfile and config file are not in the same directory, you must set path to the Dockerfile with `path` field in the config.\n```yaml\n---\nimage:\n    name: myimage\n    tag: v1.0\n    path: path/to/Dockerfile\n```\n\nDbyml has other options for build. See each subsection for more details.\n\n- [Set build-args and labels in image](#build-args-and-labels)\n- [Push the image to a private registry](#push-to-repository)\n- [Multi-platform build](#experimental-multi-platform-build)\n\n\n## Build-args and Labels\nIf you want to set build-args and labels on building, Set `build-args` and `label` fields as list of key-value pairs in config.\n\n```yaml\n---\nimage:\n    name: myimage\n    tag: v1.0\n    build-args:\n        myarg1: aaa\n        myarg2: bbb\n    label:\n        mylabel: ccc\n        author: me\n        \"my.domain.com\": corporations\n```\n\nThe above configuration is corresponding to the following `docker build` command.\n```\ndocker build -t myimage:v1.0 . \\\n    --build-arg myarg1=aaa --build-arg myarg2=bbb \\\n    --label mylabel=ccc --label author=me --label my.domain.com=corporations\n```\n\n\n## (Experimental) Multi-platform build\nDbyml can build multi-platform image with docker buildx. At first, you need to install buildx in order to enable this feature (See [docker docs buildx](https://docs.docker.com/buildx/working-with-buildx/) for installation). After installing, make sure that can run buildx commands such as `docker buildx version` with no error. \n\nThe multi-platform build on dbyml are executed with docker buildx by the follow steps.\n\n1. Create an instance and node for multi-platform building with `docker buildx create`.\n1. Build an image on the node with `docker buildx build`.\n1. Push the image to a private registry written in config file.\n1. Pull the image from the registry (optional).\n1. Remove the instance (optional).\n\nTo build your image with multi-platform by dbyml, The `buildx` and the `registry` fields are required in config. See example below.\n\n## Example\nIf you want to make an image that works for `linux/amd64`, `linux/arm64` and `linux/arm/v7`, Set list of these values in `buildx.platform` in config. The example config is the following. You will make the image with the tag `myregistry:5000/dbyml-sample:latest`, push it to the private registry `myregistry:5000`.\n\n```yaml\nimage:\n  name: dbyml-sample\n  path: .\n  dockerfile: Dockerfile\n\nregistry:\n  enabled: true\n  host: \"myregistry.com\"\n  port: \"5000\"\n\nbuildx:\n  enabled: true\n  instance: multi-builder\n  use_existing_instance: false\n  platform:                        \n    - linux/amd64\n    - linux/arm64\n    - linux/arm/v7\n  type: registry\n  pull_output: true\n  remove_instance: false\n```\n\nIf save the configuration above as `dbyml.yml`, you can run simply dbyml command to build the image.\n```shell\n# In the same directory as dbyml.yml\n$ dbyml\n\n# In the different directory\n$ dbyml -c path/to/dbyml.yml\n```\n\nAfter successfully building the image, The image `myregistry:5000/dbyml-sample:latest` will be pushed to the registry and pull automatically from the registry on your host when set `pull_output` true. So check that the image manifest includes platforms `amd64`, `arm64` and `arm/v7`.\n\n```yaml\n$ docker manifest inspect myregistry:5000/dbyml-sample:latest\n{\n   \"schemaVersion\": 2,\n   \"mediaType\": \"application/vnd.docker.distribution.manifest.list.v2+json\",\n   \"manifests\": [\n      {\n         \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n         \"size\": 739,\n         \"digest\": \"sha256:1bc3ae24a9c6322a628254ad06accf994334f9e9609764d45dc904ae4d8f1a2a\",\n         \"platform\": {\n            \"architecture\": \"amd64\",\n            \"os\": \"linux\"\n         }\n      },\n      {\n         \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n         \"size\": 739,\n         \"digest\": \"sha256:4afc068927d499f90f6a8721d0f819daa1654dff3250383fd7300d03855b1e85\",\n         \"platform\": {\n            \"architecture\": \"arm64\",\n            \"os\": \"linux\"\n         }\n      },\n      {\n         \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n         \"size\": 739,\n         \"digest\": \"sha256:eca5fe836c0014d253004cc538e3bf3df77a3a897cf62fb15f407cced704336f\",\n         \"platform\": {\n            \"architecture\": \"arm\",\n            \"os\": \"linux\",\n            \"variant\": \"v7\"\n         }\n      }\n   ]\n}\n```\n\n\nThe instance used for build `multi-builder` and its node `multi-builder0` remain after successfully build since set `remove_instance: false` in config. The build caches will be used on the build of the image including the same layers. If automatically remove these instance after build, set `remove_instance: true`.\n```\n$ docker buildx ls\nNAME/NODE        DRIVER/ENDPOINT             STATUS  PLATFORMS\nmulti-builder *  docker-container                    \n  multi-builder0 unix:///var/run/docker.sock running linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/amd64/v4, linux/386\n```\n\n### Settings for registry\nThe addition fields may be required in config file according to the registry settings.\n\n### Insecure registry\nIf the registry are insecure such as HTTP registry, set `config.http: true` under `buildx` field in config file as below.\n```yaml\nregistry:\n  enabled: true\n  host: \"my-insecure-registry.com\"\n  port: \"5000\"\n\nbuildx:\n  enabled: true\n  instance: multi-builder\n  use_existing_instance: false\n  platform:\n    - linux/amd64\n    - linux/arm64\n    - linux/arm/v7\n  type: registry\n  pull_output: true\n  remove_instance: false\n  config:\n    http: true\n```\n\n### Self-signed certificates\nIf the registry uses self-signed certificates, set path to the CA certificate in `ca_cert` under `registry` field in config file as below.\n```yaml\nregistry:\n  enabled: true\n  host: \"self-signed_registry.com\"\n  port: \"5000\"\n  ca_cert: certs/ca_cert.pem\n\nbuildx:\n  enabled: true\n  instance: multi-builder\n  use_existing_instance: false\n  platform:\n    - linux/amd64\n    - linux/arm64\n    - linux/arm/v7\n  type: registry\n  pull_output: true\n  remove_instance: false\n```\n\n### Resolve registry IP\nBuild and push are executed on buildx node (docker container), so the node may fail to resolve IP address of the registry. There are two ways to resolve it.\n\n1. Set `driver_opt.network: host` under `buildx` field in config file as below. With this config, hosts in `/etc/hosts` on host will be added into /etc/hosts in the node.\n1. Set List of hostname and ip address in `add_host` under`buildx` field in config file. The list will be addedd into `/etc/hosts` in the node.\n\n```yaml\nregistry:\n  enabled: true\n  host: \"myregistry.com1\"\n  port: \"5000\"\n\nbuildx:\n  enabled: true\n  instance: multi-builder\n  use_existing_instance: false\n  platform:\n    - linux/amd64\n    - linux/arm64\n    - linux/arm/v7\n  type: registry\n  pull_output: true\n  remove_instance: false\n  driver_opt:\n    network: host\n  add_host:\n    myregistry.com1: 192.168.3.100\n```\n\n\n\n# Configuration\nThe behavior of dbyml is managed by the config file written in yaml syntax. \n\n\n## Config file\nDbyml automatically searches for config file `dbyml.yml` or `dbyml.yaml` in the execution directory. If you want to use other filename or path, you need run dbyml with `-c` option to specify path to the config.\n\n```\n$ dbyml -c [path_to_config_file]\n```\n\n\nTo gerenate a sample config to build your docker image in local, run `dbyml --init`. The config `dbyml.yml` will be generated in the current directory by interactively specifying the values of the fields. You can edit the contents of the config later.\n```\n$ dbyml --init\n```\n\nRun `dbyml` with `--init -q` options to generate the config non-interactively.\n```\n$ dbyml --init -q\n```\n\n### Update from v1.2.0\nThe contents and syntax in config file has changed since v1.3.0. To Run `--convert` option in order to convert old config to the new one. The converted config `dbyml.yml` will be generated, so edit it according to your configuration.\n\n```\n$ dbyml --convert [path/to/old/config]\n```\n\n\n## Docker host\nDocker_host under image field specify a docker daemon to connect from client. The default value is `unix:/var/run/docker.sock`, which means connect to docker daemon on local. Set hostname (or ip address) including protocol and port if you want to build your image on remote docker host.\n\n```yaml\n# Example\nimage:\n    # Connect to docker daemon on local.\n    docker_host: \"unix:/var/run/docker.sock\"\n\n    # Connect to 10.10.10.20:2375 with tcp.\n    # docker_host: \"tcp://10.10.10.20:2375\"\n```\n\n\n\n## ENV variables\nYou can use environment variable expressions in config. `${VAR_NAME}` and setting default_value `${VAR_NAME:-default_value}` are supported. Error occurs when the specified env is undefined.\n\n```yaml\nimage:\n    name: ${BASEIMAGE_NAME}\n    tag: ${VERSION:-latest}\n```\n\n## Multi-stage build\n`Target` field specify the name of the phase to build in multi-stage builds. See [Use multi-stage builds](https://docs.docker.com/develop/develop-images/multistage-build/) for more details on multi-stage builds.\n\n```yaml\nimage:\n    name: myimage\n    tag: v1.0\n    target: init-stage\n```\n\n\n## Push to repository\nDbyml supports to push the image to [docker registry v2](https://hub.docker.com/_/registry) in local. \n\n\nTo push the image to be built from your Dockerfile, The `registry` fields are required in config. You must set the hostname (or ip address) and port of the registry. Setting `enabled` to true enables these settings. Setting to false disables the settings, which means dose not push the image after building.\n\n```yaml\nimage:\n    name: myimage\n    tag: v1.0\n\nregistry:\n    enabled: true\n    host: \"myregistry\" # Registry hostname or ip address \n    port: \"5000\" # Registry port\n```\n\nRunning `dbyml` with the config will make the docker image `myimage:v1.0`, then push it to the registry as the image name of `myregistry:5000/myimage:v1.0`.\nYou can check that the image has been successfully pushed to the registry such as [registry API](https://docs.docker.com/registry/spec/api/).\n\n\nIf you want to add more hierarchy in repository, set `namespace` field in config. The image will be pushed as `{hostname}:{port}/{namespace}/{name}:{tag}`.\n\n```yaml\nimage:\n    name: myimage\n    tag: v1.0\n\nregistry:\n    enabled: true\n    host: \"myregistry\" # Registry hostname or ip address \n    port: \"5000\" # Registry port\n    namespace: myspace\n```\n\n\nIf you use the basic authentication to access to the registry build by [Native basic auth](https://docs.docker.com/registry/deploying/#native-basic-auth), you need set `username` and `password` fields under push in the config. \n\n```yaml\nimage:\n    name: myimage\n    tag: v1.0\n\nregistry:\n    enabled: true\n    username: ${username}\n    password: ${password}\n    host: \"myregistry\" # Registry hostname or ip address \n    port: \"5000\" # Registry port\n```\n\n\n## Using TLS\nTo build your image on docker host using TLS (HTTPS), Set the paths to the CA certificate, client certificate and key in each field and enabled to true under `tls` field. See [Docker documentation](https://docs.docker.com/engine/security/protect-access/#use-tls-https-to-protect-the-docker-daemon-socket) about connection to TLS docker daemon.\n\n```yaml\ntls:\n  enabled: true\n  ca_cert: ca.pem\n  client_cert: cert.pem\n  client_key: key.pem\n```\n\n## Multi-platform build\nDbyml uses [docker buildx](https://github.com/docker/buildx) for multi-platform build. The settings about are managed by `buildx` section in config file. The supported fields are below. See [sample.yml](sample/sample.yml#L121) to check how to write these values.\n\n| key | type | required | description |\n| - | - | - | - |\n| enabled | bool | required | Whether to enable buildx |\n| type | str | required | Output type of build image. Only `registry` is supported now. | \n| platform | list | required | List of platforms | \n| instance | str | optional | An instance name used on build | \n| use_existing_instance | bool | optional | Whether to use the instance with the same name as specified in `instance` field if exists. When false, the instance will be recreated. | \n| pull_output | bool | optional | Whether to pull the image from the registry after build. |\n| remove_instance | bool | optional | Whether to remove an instance after build. | \n\n\n## Other settings\nSee [sample.yml](sample/sample.yml) for supported fields.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "docker,python",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dbyml",
    "package_url": "https://pypi.org/project/dbyml/",
    "platform": null,
    "project_url": "https://pypi.org/project/dbyml/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/dbyml/1.4.0/",
    "requires_dist": [
      "docker (>=5.0.0)",
      "jinja2 (>=2.11.3)",
      "prompt-toolkit (>=3.0.29)",
      "requests (>=2.27.1)",
      "ruamel.yaml (>=0.17.16)",
      "wheel (>=0.36.0)",
      "black ; extra == 'dev'",
      "flake8 ; extra == 'dev'",
      "mypy ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "pytest-cov ; extra == 'dev'",
      "pytest-docker ; extra == 'dev'",
      "pytest-html ; extra == 'dev'",
      "pytest-mock ; extra == 'dev'",
      "tox ; extra == 'dev'",
      "types-requests ; extra == 'dev'",
      "yamllint ; extra == 'dev'"
    ],
    "requires_python": ">=3.8",
    "summary": "\"CLI tool for building docker image\"",
    "version": "1.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13830302,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57cbee66c13f27610a999bfe5c74423017b31dcba33b834d9fd4cf8d572f0d63",
          "md5": "3e55650468bc0f8caf4347e3bb5f3804",
          "sha256": "ceb2f4e58dfd6fc1e66bbb33289710c0408d81ec629b98679819a16aa52e9ed8"
        },
        "downloads": -1,
        "filename": "dbyml-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e55650468bc0f8caf4347e3bb5f3804",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7403,
        "upload_time": "2022-04-28T17:29:03",
        "upload_time_iso_8601": "2022-04-28T17:29:03.757368Z",
        "url": "https://files.pythonhosted.org/packages/57/cb/ee66c13f27610a999bfe5c74423017b31dcba33b834d9fd4cf8d572f0d63/dbyml-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8b17c91d712beee902c6561897a77725a73ffe2c7836379edb145dabc0fbd4f",
          "md5": "6c83a6dfb399c18fe798bd71a4bda281",
          "sha256": "7614dcff8b262551607ef3308c11c3f3c06c363d63d8a6cdb056fa1f5cf08bd8"
        },
        "downloads": -1,
        "filename": "dbyml-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6c83a6dfb399c18fe798bd71a4bda281",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 7377,
        "upload_time": "2022-04-28T17:29:06",
        "upload_time_iso_8601": "2022-04-28T17:29:06.113226Z",
        "url": "https://files.pythonhosted.org/packages/d8/b1/7c91d712beee902c6561897a77725a73ffe2c7836379edb145dabc0fbd4f/dbyml-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa95373e452f7da87f8dd87973b4adb9ed209b3ed7327a18f79c4165182f312a",
          "md5": "7f7a6f5cab90dd8ae45b385cddaa4972",
          "sha256": "ca9bbb6b302e5e9a48e4accf460c15a904f6662560d5034e8593b5fa7fd9d6e9"
        },
        "downloads": -1,
        "filename": "dbyml-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f7a6f5cab90dd8ae45b385cddaa4972",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 9263,
        "upload_time": "2022-05-01T16:36:51",
        "upload_time_iso_8601": "2022-05-01T16:36:51.154843Z",
        "url": "https://files.pythonhosted.org/packages/aa/95/373e452f7da87f8dd87973b4adb9ed209b3ed7327a18f79c4165182f312a/dbyml-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5bfe8b4f815f6e4b72a68cd464b485f2a12b530819b9e0abbfdbfe913af1ce7",
          "md5": "a315dd0f8422230fc25df4b8a983789d",
          "sha256": "6d562ddcd4b128af4c76cafe7a771acff150a0496196cd8f6b7b114d75e46102"
        },
        "downloads": -1,
        "filename": "dbyml-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a315dd0f8422230fc25df4b8a983789d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 9356,
        "upload_time": "2022-05-01T16:36:53",
        "upload_time_iso_8601": "2022-05-01T16:36:53.094842Z",
        "url": "https://files.pythonhosted.org/packages/a5/bf/e8b4f815f6e4b72a68cd464b485f2a12b530819b9e0abbfdbfe913af1ce7/dbyml-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb4f3a2b83145c1f4bf250658a0f1f929103d94378e33e1f9807078aebd8a494",
          "md5": "83c2c7fc46eacf28f7cb3deba75b88a9",
          "sha256": "3bae00495a8e57add81d0b4ae62b792ae1b59f537a2ca3c1d1add5ddd151b20a"
        },
        "downloads": -1,
        "filename": "dbyml-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "83c2c7fc46eacf28f7cb3deba75b88a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 13585,
        "upload_time": "2022-05-04T18:08:43",
        "upload_time_iso_8601": "2022-05-04T18:08:43.017588Z",
        "url": "https://files.pythonhosted.org/packages/eb/4f/3a2b83145c1f4bf250658a0f1f929103d94378e33e1f9807078aebd8a494/dbyml-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "855552d390f7bb04fa726fff831d81a62ed1e34e4dd9eba8ae38f83ff6074798",
          "md5": "c63fe43e926a8d771685a1f549e0c49e",
          "sha256": "fd8ad7cbe9732c28c1e5c77336a393e26ad89e0ee5c94e38804ddf074662ce57"
        },
        "downloads": -1,
        "filename": "dbyml-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c63fe43e926a8d771685a1f549e0c49e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 14549,
        "upload_time": "2022-05-04T18:08:45",
        "upload_time_iso_8601": "2022-05-04T18:08:45.277284Z",
        "url": "https://files.pythonhosted.org/packages/85/55/52d390f7bb04fa726fff831d81a62ed1e34e4dd9eba8ae38f83ff6074798/dbyml-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6991549553b738152376dd6eaee6816fc54f53bdf949be88650df498f289c3ef",
          "md5": "718a2abac56ac8dc23ebbfb2fea86957",
          "sha256": "df4fffe693d55d2e1a4a48a0a96203e4d40efb3337f64e4899649964ae43463d"
        },
        "downloads": -1,
        "filename": "dbyml-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "718a2abac56ac8dc23ebbfb2fea86957",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 16333,
        "upload_time": "2022-05-07T16:35:08",
        "upload_time_iso_8601": "2022-05-07T16:35:08.700562Z",
        "url": "https://files.pythonhosted.org/packages/69/91/549553b738152376dd6eaee6816fc54f53bdf949be88650df498f289c3ef/dbyml-1.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "203b890dca8d3a2008c92243378acdba74c2d09aad4460a90293ca3e512a329b",
          "md5": "f222e57102dca94c05d6bbed7ef1a9e1",
          "sha256": "bfd6534242465dcafda14d68e993e076d843acbf0cf52d006d61a7387c6f7580"
        },
        "downloads": -1,
        "filename": "dbyml-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f222e57102dca94c05d6bbed7ef1a9e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 16062,
        "upload_time": "2022-05-07T16:35:10",
        "upload_time_iso_8601": "2022-05-07T16:35:10.946559Z",
        "url": "https://files.pythonhosted.org/packages/20/3b/890dca8d3a2008c92243378acdba74c2d09aad4460a90293ca3e512a329b/dbyml-1.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b167c9cc8400705c6b0d8d65487af02dfb1a22ec7a2c7099fd9fc9230e98dc2e",
          "md5": "3d6fe6efc7bfc299f3bab82520219272",
          "sha256": "3c76b28252401daa452aed08281dd5768c19da2856693208d975191c1f467bc0"
        },
        "downloads": -1,
        "filename": "dbyml-1.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3d6fe6efc7bfc299f3bab82520219272",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 25596,
        "upload_time": "2022-05-16T14:11:23",
        "upload_time_iso_8601": "2022-05-16T14:11:23.444726Z",
        "url": "https://files.pythonhosted.org/packages/b1/67/c9cc8400705c6b0d8d65487af02dfb1a22ec7a2c7099fd9fc9230e98dc2e/dbyml-1.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7948ca33660a722b053da4ea9bab9884fcbd99c4173f0a0afd022b1c18a3d6b7",
          "md5": "ee4d35ac53142ddeacb255e4918f70c8",
          "sha256": "b41d392bec3332a84c419942eb256fb84bfb6e51e775a4d035b3938a8275d1c4"
        },
        "downloads": -1,
        "filename": "dbyml-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ee4d35ac53142ddeacb255e4918f70c8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 27032,
        "upload_time": "2022-05-16T14:11:26",
        "upload_time_iso_8601": "2022-05-16T14:11:26.210616Z",
        "url": "https://files.pythonhosted.org/packages/79/48/ca33660a722b053da4ea9bab9884fcbd99c4173f0a0afd022b1c18a3d6b7/dbyml-1.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b167c9cc8400705c6b0d8d65487af02dfb1a22ec7a2c7099fd9fc9230e98dc2e",
        "md5": "3d6fe6efc7bfc299f3bab82520219272",
        "sha256": "3c76b28252401daa452aed08281dd5768c19da2856693208d975191c1f467bc0"
      },
      "downloads": -1,
      "filename": "dbyml-1.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3d6fe6efc7bfc299f3bab82520219272",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 25596,
      "upload_time": "2022-05-16T14:11:23",
      "upload_time_iso_8601": "2022-05-16T14:11:23.444726Z",
      "url": "https://files.pythonhosted.org/packages/b1/67/c9cc8400705c6b0d8d65487af02dfb1a22ec7a2c7099fd9fc9230e98dc2e/dbyml-1.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7948ca33660a722b053da4ea9bab9884fcbd99c4173f0a0afd022b1c18a3d6b7",
        "md5": "ee4d35ac53142ddeacb255e4918f70c8",
        "sha256": "b41d392bec3332a84c419942eb256fb84bfb6e51e775a4d035b3938a8275d1c4"
      },
      "downloads": -1,
      "filename": "dbyml-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ee4d35ac53142ddeacb255e4918f70c8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 27032,
      "upload_time": "2022-05-16T14:11:26",
      "upload_time_iso_8601": "2022-05-16T14:11:26.210616Z",
      "url": "https://files.pythonhosted.org/packages/79/48/ca33660a722b053da4ea9bab9884fcbd99c4173f0a0afd022b1c18a3d6b7/dbyml-1.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}