{
  "info": {
    "author": "Paweł Kusiński",
    "author_email": "KusinskiP@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# ArgChooser\n\nArgChooser is Python module which allows for fast and easy creation of function chooser.\n\n  - Gives end-user an option to choose which functions to execute by cmdline args or cmdline menu \n  - Just add flag names and functions\n  - Execute and watch magic!\n\n## Table of Contents\n\n1. [Documentation](#documentation)  \n    1. [Installation](#installation)  \n    2. [Quick Start](#quick-start)  \n    3. [Examples](#examples)\n2. [License](#license)\n\n## Documentation\n\n### Installation\n\nSimply use pip to install the ArgChooser package\n```shell script\npip install argchoose\n```\n\n### Quick Start\n\nUsing ArgChooser is as simple as possible. Simple three steps:\n+ **Create** object of ArgChooser\n+ **Bind** methods with flags using add_argument\n+ **Execute** ArgChooser!\n\n```python\nfrom argchoose import ArgChooser\n\n\ndef foo():\n    print('bar')\n\n\nac = ArgChooser()\nac.add_argument('-f', '--foo', method=foo)\nac.execute()\n```\n\nNow You are able to run your program from cmdline like that to execute method:\n\n```python\npython example.py -f\n```\nOr without flags to see this:\n\n![Quickstart menu example](https://raw.githubusercontent.com/Djkusik/ArgChooser/master/docs/images/quickstart_menu.png)\n\n### Examples\n\n1. [Adding arguments](#adding-arguments)\n2. [Changing default ArgChooser parameters](#changing-default-argchooser-parameters)\n\n#### Adding arguments\n\n``add_argument`` - allows to bind flag (or flags) with chosen method.\nIt is possible to also specify category and help prompt.\n\nTakes ``*flags: str``, ``method: Callable`` [, ``help: str``, ``category: str``]\n\nReturns nothing.\n\nExample is based on [This](./examples/default_usage.py \"This\").\n\nCategories allows to make menu clearer.\n\n![Default menu example](https://raw.githubusercontent.com/Djkusik/ArgChooser/master/docs/images/default_menu_example.png)\n\nAs You can see, ``help`` also makes it more descriptive, but also could be printed using -h flag like cmdline tools usually do!\n\n```shell script\npython default_usage.py -h\n```\n\n![Default help](https://raw.githubusercontent.com/Djkusik/ArgChooser/master/docs/images/default_help.png)\n\nTo execute chosen methods, end-user has to choose, if they want to use it straight from cmdline or menu:\n\n![Default menu results](https://raw.githubusercontent.com/Djkusik/ArgChooser/master/docs/images/default_menu_results.png)\n\n![Default cmdline](https://raw.githubusercontent.com/Djkusik/ArgChooser/master/docs/images/default_cmdline.png)\n\n#### Changing default ArgChooser parameters\n\n``ArgChooser`` could be initialized without any parameters, but gives possibility to change a few little things as shown [Here](./examples/init_arguments.py \"Here\").\n\nTakes [``category_style: str``, ``default_category_name: str``, ``style: Dict[Token, str]``, ``validation_func: Callable(List) -> bool``, ``validation_error: str``].\n\n``category_style`` is string on which is used format method with category name.  \n ``{}`` must be included in string.  \n Default is ``== {} ==``.\n\n``default_category_name`` is string which will be used as category name for every uncategorized methods.\nDefault is ``Other``.\n\n``style`` is dictionary made from ``Token``s and strings which represents hex colors with textformatting keywords (like ``bold``).\n\n``validation_func`` is function used for validating answers at the end of parsing (for example for checking if amount of answers is bigger than two).  \nThis function must take one argument which is ``List`` and must return ``bool`` value.  \nDefault functions checks if any answer is chosen.\n\n``validation_error`` is string which will be printed if ``validation_func`` returned ``False``.  \nDefault is ``You must choose at least one module.``.\n\n![Example](https://raw.githubusercontent.com/Djkusik/ArgChooser/master/docs/images/init_args.png)\n\nWhen ``validation_func`` return ``False``, ``validation_error`` is printed like that:\n\n![Error](https://raw.githubusercontent.com/Djkusik/ArgChooser/master/docs/images/validation_error.png)\n\nThis is going to be changed to this, after releasing new version of PyInquirer with fixed ``validation`` parameter:\n\n![Correct error](https://raw.githubusercontent.com/Djkusik/ArgChooser/master/docs/images/correct_error.png)\n\n\n## License\nCopyright (c) 2020 PaweĹ‚ KusiĹ„ski  \nDistributed under the MIT License. See ``LICENSE`` for more information.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/Djkusik/ArgChooser/archive/v0.1.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Djkusik/ArgChooser",
    "keywords": "cmdline,function,parser,menu,commandline,execute,create,args,arguments,easy,fast",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "argchoose",
    "package_url": "https://pypi.org/project/argchoose/",
    "platform": "",
    "project_url": "https://pypi.org/project/argchoose/",
    "project_urls": {
      "Download": "https://github.com/Djkusik/ArgChooser/archive/v0.1.tar.gz",
      "Homepage": "https://github.com/Djkusik/ArgChooser"
    },
    "release_url": "https://pypi.org/project/argchoose/0.1/",
    "requires_dist": [
      "PyInquirer",
      "argparse"
    ],
    "requires_python": "",
    "summary": "Choose which functions to execute by simply creating clear cmdline menu and cmdline args parser in one step",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7680954,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "167e2c139990ab216d69e4245e9c4b8d1cc22b103e2165ca36a5cea01ecbd57b",
          "md5": "dc242514d8bde09a9e48cc8c7fed0677",
          "sha256": "ee55656542d54bd5deb57f93712efd2d7dee6456db6ce8871b0bc3ccbfa1e9ab"
        },
        "downloads": -1,
        "filename": "argchoose-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dc242514d8bde09a9e48cc8c7fed0677",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5998,
        "upload_time": "2020-07-11T15:38:14",
        "upload_time_iso_8601": "2020-07-11T15:38:14.471523Z",
        "url": "https://files.pythonhosted.org/packages/16/7e/2c139990ab216d69e4245e9c4b8d1cc22b103e2165ca36a5cea01ecbd57b/argchoose-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "167e2c139990ab216d69e4245e9c4b8d1cc22b103e2165ca36a5cea01ecbd57b",
        "md5": "dc242514d8bde09a9e48cc8c7fed0677",
        "sha256": "ee55656542d54bd5deb57f93712efd2d7dee6456db6ce8871b0bc3ccbfa1e9ab"
      },
      "downloads": -1,
      "filename": "argchoose-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "dc242514d8bde09a9e48cc8c7fed0677",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5998,
      "upload_time": "2020-07-11T15:38:14",
      "upload_time_iso_8601": "2020-07-11T15:38:14.471523Z",
      "url": "https://files.pythonhosted.org/packages/16/7e/2c139990ab216d69e4245e9c4b8d1cc22b103e2165ca36a5cea01ecbd57b/argchoose-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}