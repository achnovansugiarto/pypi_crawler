{
  "info": {
    "author": "Loadero Team",
    "author_email": "support@loadero.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Quality Assurance"
    ],
    "description": "# Loadero-Python\n\nPython client for managing [Loadero](https://loadero.com) tests.\n\nLoadero-Python provides easy-to-use programmatic access to Loadero API. Allows\nto manage tests, participants, asserts, runs and other Loadero resources, start\nand stop tests and extract test run results. Example usage might be running\nLoadero tests as a part of CI/CD.\n\n## Table of Contents\n\n<!-- generate with https://luciopaiva.com/markdown-toc/ -->\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [API Access](#api-access)\n  - [Initialization](#initialization)\n  - [Working with Existing Resources](#working-with-existing-resources)\n  - [Creating a Test](#creating-a-test)\n  - [Running a Test](#running-a-test)\n    - [Polling](#polling)\n    - [Stopping Test Execution](#stopping-test-execution)\n  - [Getting Results](#getting-results)\n    - [Participant Results](#participant-results)\n      - [Log Retrieval](#log-retrieval)\n      - [Extracting Failed Asserts](#extracting-failed-asserts)\n      - [Checking metrics](#checking-metrics)\n  - [Filtering and Pagination](#filtering-and-pagination)\n    - [Filtering](#filtering)\n    - [Pagination](#pagination)\n- [Structure](#structure)\n  - [API client](#api-client)\n  - [Resources](#resources)\n  - [Resource Params](#resource-params)\n  - [Constants](#constants)\n  - [Resource API](#resource-api)\n- [Contributing](#contributing)\n\n## Installation\n\nLoadero-Python is available on [PyPI](https://pypi.org/project/loadero-python/)\nand can be installed by running\n\n```bash\npip install loadero-python\n```\n\n## Usage\n\n### API Access\n\nBefore using the Loadero-Python client an API access token needs to be acquired.\nCurrently, this can be done by contacting support. More information about the\nAPI can be found in the\n[Loadero wiki](https://wiki.loadero.com/loadero-usage/api/).\n\nBefore using Loadero-Python client an API access token needs to be acquired.\nCurrently, this can be done by contacting\n[support](mailto:support@loadero.com?subject=I%20want%20to%20request%20project%20access%20token%20for%20API).\nMore information about the API can be found in the\n[Loadero wiki](https://wiki.loadero.com/loadero-usage/api/)\n\n**Note** Access tokens are project specific and cannot be used across multiple\nprojects. Make sure to specify the project ID in the request for an access\ntoken.\n\n### Initialization\n\nAfter acquiring the access token Loadero-Python needs to be initialized with it.\nLoadero-Python uses a singleton object `APIClient` from\n`loadero_python.api_client` module to perform all requests to the API. Since\n`APIClient` is a singleton it needs to be initialized once like so\n\n```py\nfrom loadero_python.api_client import APIClient\n\nAPIClient(\n    project_id=1234,\n    access_token=\"your_access_token\",\n)\n```\n\nFurther examples will not include `APIClient` initialization. It is assumed that\nthe client has been initialized at an earlier step.\n\n### Working with Existing Resources\n\nLoadero resources have a tree-like structure hence there can be child and parent\nresources.\n\n```\nproject\n   |\n   |----tests----groups-----participants\n   |      |\n   |      |------asserts----assert_preconditions\n   |\n   |----files\n   |\n   |----runs-----results\n```\n\nEvery parent resource can read all of its child resources.\n\n`Project` class from `loadero_python.resources.project` module provides an entry\npoint to access all resources.\n\n`Project` class can be imported with\n\n```py\nfrom loadero_python.resources.project import Project\n```\n\nAll tests in a project can be read with\n\n```py\ntests, pagination, filters = Project().tests()\n```\n\nNotice, that project ID was not specified in this example, this is because the\n`APIClient` has already been initialized with the project ID and corresponding\naccess token.\n\n- `tests` is a list of `Test` objects from `loadero_python.resources.test`\n  module\n- `pagination` is a `PaginationParams` object from\n  `loadero_python.resources.pagination` module.\n- `filters` is a python dictionary of applied filters.\n\nA more detailed explanation of `pagination` and `filters` return values is\navailable in the [Filtering and Pagination](#filtering-and-pagination) section.\n\n### Creating a Test\n\nWith an initialized `APIClient` Loadero-Python can now manage resources in the\nproject. Test is a resource one of many in Loadero-Python. More information\nabout all the resources that Loadero-Python provides can be found in the\n[Structure](#structure) section. This usage guide cannot demonstrate all of\nLoadero-Python's functionality hence will cover only common use case scenarios\nstarting with creating a test.\n\nTest resource is contained within the `loadero_python.resources.test` module.\nFrom it `Test`, `TestParams`, and `Script` classes need to be imported.\n\n```py\nfrom loadero_python.resources.test import Test, TestParams, Script\n```\n\nAdditionally, `TestMode` and `IncrementStrategy` classificator constant\nenumerations need to be imported from `loadero_python.resources.classificator`.\nThey will be used for test attribute definitions.\n\n```py\nfrom loadero_python.resources.classificator import TestMode, IncrementStrategy\n```\n\nTest attributes can be specified in two ways. Directly as arguments in params\ninitialization.\n\n```py\ntest = Test(\n    params=TestParams(\n        name=\"my first loadero python test\",\n        start_interval=1,\n        participant_timeout=10 * 60, # ten minutes\n        mode=TestMode.TM_LOAD,\n        increment_strategy=IncrementStrategy.IS_LINEAR,\n        script=Script(content='print(\"hello test script\")'),\n    )\n).create()\n```\n\nor with builder methods.\n\n```py\ntest = Test(\n    params=TestParams()\n    .with_name(\"my second loadero python test\")\n    .with_start_interval(1)\n    .with_participant_timeout(10 * 60) # ten minutes\n    .with_mode(TestMode.TM_PERFORMANCE)\n    .with_increment_strategy(IncrementStrategy.IS_RANDOM)\n    .with_script(Script(content='print(\"hello test script\")'))\n).create()\n```\n\nResource create and update operations have required and optional attributes. If\na required attribute is missing the API call will fail. Loadero-Python checks if\nall of the required attributes have been populated before making the API call\nand raises an exception if one or more required attributes are missing.\n\nFor test resources, the required attributes are:\n\n- `name`\n- `start_interval`\n- `participant_timeout`\n- `mode`\n- `increment_strategy`\n\nAfter the create operation completes the `test` object will have a few more of\nits attributes populated. Any resource attributes can be simply printed.\n\n```py\nprint(test)\n```\n\nThis will output a JSON object representation of the resource.\n\n```json\n{\n  \"id\": 1234,\n  \"name\": \"my first loadero python test\",\n  \"start_interval\": 1,\n  \"participant_timeout\": 600,\n  \"mode\": \"load\",\n  \"increment_strategy\": \"linear\",\n  \"script\": \"print(\\\"hello test script\\\")\",\n  \"created\": \"2022-08-25 15:33:04+00:00\",\n  \"updated\": \"2022-08-25 15:33:04+00:00\",\n  \"script_file_id\": 12345\n}\n```\n\nDifferent output formats can be achieved by using `to_dict` and `to_dict_full`\nresource params methods. Both methods return a python dictionary representation\nof the resource. `to_dict` will return only the required attributes and optional\nattributes if present. `to_dict_full` will return all attributes present.\n**Note** `to_dict` will raise an exception if one or more required attribute is\nmissing.\n\n```py\nimport yaml\n\nprint(yaml.dump(test.params.to_dict_full()))\n```\n\n```yaml\ncreated: \"2022-08-25 15:33:04+00:00\"\nid: 1234\nincrement_strategy: linear\nmode: load\nname: my first loadero python test\nparticipant_timeout: 600\nscript: print(\"hello test script\")\nscript_file_id: 12345\nstart_interval: 1\nupdated: \"2022-08-25 15:33:04+00:00\"\n```\n\n### Running a Test\n\nTo run a test the only required attribute is test ID.\n\nFor the `test` object from previous examples, the `test_id` attribute has been\npopulated by create operation, so it can simply be run by calling the `launch`\nmethod.\n\n```py\nrun = test.launch()\n```\n\nIf a test ID is known it can be run directly.\n\n```py\nrun = Test(test_id=1234).launch()\n```\n\nAll tests in a project can be run with\n\n```py\nfor test in Project().tests()[0]:\n    test.launch()\n```\n\n#### Polling\n\nAfter a test has been launched, waiting for the test to finish can be achieved\nwith the `poll` method.\n\n```py\nrun.poll()\n```\n\nBy default, the `poll` method will make an API call to check if the test\nexecution has finished every 15 seconds and will wait up to 12 hours. This\nfunctionality can be customized with the `interval` and `timeout` arguments.\n\n```py\n# will poll every 5 seconds and will wait up to 10 minutes.\nrun.poll(interval=5.0, timeout=10 * 60.0)\n```\n\nIf test execution does not finish within the specified timeout, the `poll`\nmethod will raise an exception.\n\n#### Stopping Test Execution\n\nIf test execution needs to be prematurely stopped, it can be done with the\n`stop` method.\n\n```py\nrun.stop()\n```\n\n**Note** `stop` only sends an API request that starts a Loadero procedure of\nstopping the test. This process is NOT immediate. Even though the `stop` API\nrequest completes relatively quickly, the test can remain running for a while\nlonger.\n\n**Note** If another process is polling the test execution, it will automatically\nstop if the test is stopped.\n\n### Getting Results\n\nAfter the test run finishes execution, the `run` object already contains many\nuseful attributes that may be used in result analysis. The attributes are stored\non the `run.params` field. `run.params` is an `RunParams` object from\n`loadero_python.resources.run` module.\n\n```py\nprint(run.params.success_rate)\n```\n\n#### Participant Results\n\n`run` object describes a result overview of the whole test. To get a more\ndetailed result information about each test participant's results needs to be\nread.\n\n```py\nresults, _, _ = run.Results()\nresult = results[0]\n```\n\nThe ignored return values are pagination and filters. They are not relevant for\nresult retrieval, hence they are omitted. A more detailed explanation of these\nvalues is available in the [Filtering and Pagination](#filtering-and-pagination)\nsection.\n\n`results` is a list of `Result` objects from `loadero_python.resources.result`\nmodule. A single result corresponds to a single participant in the test.\n\n`Result` just like a regular resource object has a `params` field of type\n`ResultParams` that contains its attributes. The result resource has the largest\namount of attributes, so this showcase will cover only common use cases.\n\n##### Log Retrieval\n\n```py\nimport requests\n\nresp = requests.get(result.params.log_paths.selenium)\nif not resp:\n    print(\"failed to download selenium log\")\n    exit(1)\n\nwith open(f\"selenium_log_of_result_{result.params.result_id}\", \"w\") as f:\n    f.write(resp.text)\n```\n\n`result.params.log_paths.selenium` is an URL to an Selenium log. It first needs\nto be downloaded using the HTTP library `requests`. Then it can be written to a\nfile.\n\n##### Extracting Failed Asserts\n\nBefore extracting failed asserts. `AssertStatus` classificator constant\nenumeration needs to be imported.\n\n```py\nfrom loadero_python.resources.classificator import AssertStatus\n```\n\n```py\nfailed_asserts = []\n\nfor result_assert in result.params.asserts:\n    if result_assert.status == AssertStatus.AS_FAIL\n        failed_asserts.append(result_assert)\n```\n\n##### Checking metrics\n\nLoadero tests collect various different metrics from CPU, RAM, and network usage\nto video and audio quality indicators. Loadero organizes these metrics with\nmetric base paths - a path-like string that uniquely identifies metric data. For\nexample, CPU usage metric data is described by the metric base path\n`machine/cpu/used`.\n\nAfter test execution finishes Loadero processes the collected metric data by\napplying aggregator functions.\n\n- total\n- minimum\n- maximum\n- average\n- standard deviation\n- relative standard deviation\n- 1st percentile\n- 5th percentile\n- 25th percentile\n- 50th percentile\n- 75th percentile\n- 95th percentile\n- 99th percentile\n\nThe result is a single float value identified by a metric path. For example, the\nmaximal CPU usage is described by the metric path - `machine/cpu/used/max`\n\nIn Loadero-Python metric base paths - `MetricBasePath` and metric paths -\n`MetricPath` are constant enumerations of all the available metric and metric\nbase paths. Contained within the `loadero_python.resources.metric_path` module.\n\nTo access a specific metric `MetricBasePath` enumeration needs to be imported.\n\n```py\nfrom loadero_python.resources.metric_path import MetricBasePath\n```\n\nThen a specific metric can be checked like this\n\n```py\nif result.params.metrics is None or result.metrics.machine is None:\n    print(\"result has no machine metrics\")\n    exit(1)\n\nif MetricBasePath.MACHINE_CPU_AVAILABLE not in result.params.metrics.machine:\n    print(\"result has no machine cpu available metric\")\n    exit(1)\n\nif (\n    result.params.metrics.machine[MetricBasePath.MACHINE_CPU_AVAILABLE].average\n    < 10.0\n):\n    print(\"test is well configured. efficient usage of CPU resources\")\n```\n\nThe `not None` checks are required because some or all metrics for a result can\nbe missing. For example, non-WebRTC tests will not have any `webrtc` metrics.\n\n### Filtering and Pagination\n\nRead-all operations have the option to limit the number of resources returned,\noffset a limited read-all operation by some amount of resources and filter out\nundesired resources.\n\nThis is done by passing a query params argument when performing a read-all\noperation.\n\n`QueryParams` class is contained in `loadero_python.resources.resource` module\nand can be imported with\n\n```py\nfrom loadero_python.resources.resource import QueryParams\n```\n\n#### Filtering\n\nFilters are resource-specific and are defined in each resource module. For\nexample, test resource filters are defined in the `TestFilterKey` constant\nenumeration in the `loadero_python.resources.test` module.\n\n`TestFilterKey` can be imported with\n\n```py\nfrom loadero_python.resources.test import TestFilterKey\n```\n\nNow test read all operations can be filtered like this\n\n```py\ntests, _, filters = Project().tests(\n    query_params=QueryParams().filter(\n        TestFilterKey.PARTICIPANT_TIMEOUT_TO, 10 * 60 # ten minutes\n    )\n)\n```\n\nThe ignored value is pagination. It can be ignored because pagination will\ncontain useful page information when limit and offset query_params have been\napplied.\n\nThis will return tests whose participant timeout attribute is smaller than ten\nminutes.\n\n`filters` is a python dictionary with the applied filters.\n\n#### Pagination\n\nWhen performing a read-all operation that will return many resources it is good\npractice to limit the number of resources returned and perform multiple smaller\nreads. This can be achieved by limiting and offsetting the number of resources\nreturned.\n\n```py\ntests, pagination, _ = Project().tests(\n    query_params=QueryParams().limit(20).offset(10)\n)\n```\n\nThis time the ignored value is filters. It can be ignored because no filters\nwere applied.\n\nLet's assume that the project has 28 tests numbered from 1 to 28, then this\nread-all operation would return tests with numbers from 11 to 28. This happens\nbecause the returned resources were offset by 10 and the next resource after the\n10th is the 11th. Only 18 resources were returned because the remaining\nresources after offset were smaller than the defined limit - 20.\n\n`pagination` is an instance `PaginationParams` class from\n`loadero_python.resources.resource` module. It contains information about the\napplied limit and offset, plus additional information describing how many\nresources remain to be read.\n\n## Structure\n\nThe Loadero-Python library structure is similar to the Loadero API structure.\nThe main structural components are:\n\n- API client\n- resources and operations with them\n\n### API client\n\nContained within `loadero_python.api_client` module is the `APIClient` singleton\nobject. It needs to be initialized once with the project ID and access token.\nAll requests to Loadero API are done with the `APIClient` object. It adds the\nrequired headers to make valid API requests. Additionally, the `APIClient` rate\nlimits all requests to be compliant with Loadero API's access limits. Rate\nlimiting can be opted out on initialization.\n\n```py\nAPIClient(\n    project_id=1234,\n    access_token=\"your_access_token\",\n    rate_limit=False,\n)\n```\n\n### Resources\n\nEach resource has a separate module.\n\n| Resource class       | Module                                         |\n| -------------------- | ---------------------------------------------- |\n| `AssertPrecondition` | `loadero_python.resources.assert_precondition` |\n| `Assert`             | `loadero_python.resources.assert_resource`     |\n| `File`               | `loadero_python.resources.file`                |\n| `Group`              | `loadero_python.resources.group`               |\n| `Participant`        | `loadero_python.resources.participant`         |\n| `Project`            | `loadero_python.resources.project`             |\n| `Result`             | `loadero_python.resources.result`              |\n| `RunParticipant`     | `loadero_python.resources.run_participant`     |\n| `Run`                | `loadero_python.resources.run`                 |\n| `Test`               | `loadero_python.resources.test`                |\n\nAll resource classes have a similar structure:\n\n- Resource classes have an attribute `params` that is used to store the data of\n  a single instance of the resource. Read more about resource params\n  [here](#resource-params).\n- most resources implement common CRUD manipulation methods - `create`, `read`,\n  `update`, `delete`, `duplicate`. Some resources do not have these methods\n  because they are impossible or not available via API access. For example,\n  `Project` resource has only `read` method because API access prohibits updates\n  to this resource.\n- resources that can have child resources have methods for reading all the child\n  resources.\n  ```py\n  # reads all groups in test\n  groups, _, _ = Test(test_id=123).groups()\n  ```\n\n### Resource Params\n\nEvery resource has a resource params class that stores the data of a single\nresource instance.\n\nResource params class for each resource is available in the resources module.\n\n| Resource params class      | Module                                         |\n| -------------------------- | ---------------------------------------------- |\n| `AssertPreconditionParams` | `loadero_python.resources.assert_precondition` |\n| `AssertParams`             | `loadero_python.resources.assert_resource`     |\n| `FileParams`               | `loadero_python.resources.file`                |\n| `GroupParams`              | `loadero_python.resources.group`               |\n| `ParticipantParams`        | `loadero_python.resources.participant`         |\n| `ProjectParams`            | `loadero_python.resources.project`             |\n| `ResultParams`             | `loadero_python.resources.result`              |\n| `RunParticipantParams`     | `loadero_python.resources.run_participant`     |\n| `RunParams`                | `loadero_python.resources.run`                 |\n| `TestParams`               | `loadero_python.resources.test`                |\n\nResource params classes provide access to the resource attributes.\n\n```py\n# read a test and print its name\nprint(Test(test_id=123).read().params.name)\n```\n\n### Constants\n\nLoadero-Python has two modules for constants.\n\n- `loadero_python.resources.classificator` for classificator constant\n  enumerations.\n- `loadero_python.resources.metric_path` for metric path and metric base path\n  constant enumerations.\n\n### Resource API\n\nEvery resource has its own API class also available in the resources module.\n\n| Resource class          | Module                                         |\n| ----------------------- | ---------------------------------------------- |\n| `AssertPreconditionAPI` | `loadero_python.resources.assert_precondition` |\n| `AssertAPI`             | `loadero_python.resources.assert_resource`     |\n| `FileAPI`               | `loadero_python.resources.file`                |\n| `GroupAPI`              | `loadero_python.resources.group`               |\n| `ParticipantAPI`        | `loadero_python.resources.participant`         |\n| `ProjectAPI`            | `loadero_python.resources.project`             |\n| `ResultAPI`             | `loadero_python.resources.result`              |\n| `RunParticipantAPI`     | `loadero_python.resources.run_participant`     |\n| `RunAPI`                | `loadero_python.resources.run`                 |\n| `TestAPI`               | `loadero_python.resources.test`                |\n\nResource API class implements all the available API operations of that resource.\nResource API classes are internally used by all resources, but the class on its\nown is not very useful.\n\n## Contributing\n\nFound a bug? - Feel free to open an\n[issue](https://github.com/loadero/loadero-python/issues/new/choose).\n\nWould like to request a feature? - Open an issue describing the request and the\nreason for it or contact Loadero [support](mailto:support@loadero.com).\n\nWant to contribute? - Open\n[issues](https://github.com/loadero/loadero-python/issues) is a good place where\nto find stuff that needs to be worked on.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/loadero/loadero-python",
    "keywords": "loadero",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "loadero-python",
    "package_url": "https://pypi.org/project/loadero-python/",
    "platform": null,
    "project_url": "https://pypi.org/project/loadero-python/",
    "project_urls": {
      "Documentation": "https://loadero.github.io/loadero-python/",
      "Homepage": "https://github.com/loadero/loadero-python",
      "Loadero": "https://loadero.com/",
      "Source": "https://github.com/loadero/loadero-python",
      "Tracker": "https://github.com/loadero/loadero-python/issues"
    },
    "release_url": "https://pypi.org/project/loadero-python/1.1.0/",
    "requires_dist": [
      "urllib3 (==1.26.9)",
      "python-dateutil (==2.8.2)"
    ],
    "requires_python": ">=3.7, <4",
    "summary": "Python client for Loadero API",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16287633,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44cfdb0bb8381155b718a8e7bd60789007bc617363eb4b459f12d873e81a2a78",
          "md5": "ba288ac09f1235571bafc0f66162ede2",
          "sha256": "e4bb8f3969c4fee860b46303dfb0e4a6e0d8a4bf05f5acdcb0121babf66196b5"
        },
        "downloads": -1,
        "filename": "loadero_python-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba288ac09f1235571bafc0f66162ede2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 58222,
        "upload_time": "2022-08-23T11:08:39",
        "upload_time_iso_8601": "2022-08-23T11:08:39.475604Z",
        "url": "https://files.pythonhosted.org/packages/44/cf/db0bb8381155b718a8e7bd60789007bc617363eb4b459f12d873e81a2a78/loadero_python-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3224b03e0783d5f167a41038503385a706e6ac1a0c5acff571b1a1fec4ca9bc6",
          "md5": "2146da00c6b7e26efb27d06b67df7866",
          "sha256": "74a1f1f727cab29be736ec2c34986c4740a818a950739368a3bcdab7daeca251"
        },
        "downloads": -1,
        "filename": "loadero_python-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2146da00c6b7e26efb27d06b67df7866",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 49408,
        "upload_time": "2022-08-23T11:08:41",
        "upload_time_iso_8601": "2022-08-23T11:08:41.988890Z",
        "url": "https://files.pythonhosted.org/packages/32/24/b03e0783d5f167a41038503385a706e6ac1a0c5acff571b1a1fec4ca9bc6/loadero_python-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b45f82cfc0600f710e9c750b337f30d830da9131722e0fe204726c26b666833e",
          "md5": "42ea79863ca2aacc4cc835460dc300d3",
          "sha256": "4692e4d19818b8bddf8d4db8e4a6b1dcc3357f0e5688b998d82d0a7020c6044d"
        },
        "downloads": -1,
        "filename": "loadero_python-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "42ea79863ca2aacc4cc835460dc300d3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 58224,
        "upload_time": "2022-08-23T13:52:50",
        "upload_time_iso_8601": "2022-08-23T13:52:50.752661Z",
        "url": "https://files.pythonhosted.org/packages/b4/5f/82cfc0600f710e9c750b337f30d830da9131722e0fe204726c26b666833e/loadero_python-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1b492c958532bd9cf413ed089bfc3b22fbfb6c80c5f3ebcd15978a4ab07d87f8",
          "md5": "3d7a958aa9db81e8b1582edd0b4eb120",
          "sha256": "7b69fe8437ab2b15014dd672d7db919a20713c1fd25107e92c04640feaebe008"
        },
        "downloads": -1,
        "filename": "loadero_python-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3d7a958aa9db81e8b1582edd0b4eb120",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 49447,
        "upload_time": "2022-08-23T13:52:53",
        "upload_time_iso_8601": "2022-08-23T13:52:53.201551Z",
        "url": "https://files.pythonhosted.org/packages/1b/49/2c958532bd9cf413ed089bfc3b22fbfb6c80c5f3ebcd15978a4ab07d87f8/loadero_python-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bd9ba91f91f9357d2766e20c7f0e64f3a4c19ecfb21667edab4275d2cad95f3",
          "md5": "97d453c6ee01434af3a810369a1c1a03",
          "sha256": "2b5bac4488a4bc0b1c1af9a7944d0c4189e450a68de029b71afc64363344b41b"
        },
        "downloads": -1,
        "filename": "loadero_python-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "97d453c6ee01434af3a810369a1c1a03",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 58501,
        "upload_time": "2022-08-25T07:59:23",
        "upload_time_iso_8601": "2022-08-25T07:59:23.371882Z",
        "url": "https://files.pythonhosted.org/packages/6b/d9/ba91f91f9357d2766e20c7f0e64f3a4c19ecfb21667edab4275d2cad95f3/loadero_python-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a073a2f7ab463040c0872e9af7d325dec584181917d82c940c8ff413c2c4113",
          "md5": "29ad39e487a42ddb405582f77b04dae9",
          "sha256": "46000c2a880b4a68402310fb0d9aff8fce403c119efe2d6205b9a9c34160649f"
        },
        "downloads": -1,
        "filename": "loadero_python-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "29ad39e487a42ddb405582f77b04dae9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 49489,
        "upload_time": "2022-08-25T07:59:24",
        "upload_time_iso_8601": "2022-08-25T07:59:24.493137Z",
        "url": "https://files.pythonhosted.org/packages/4a/07/3a2f7ab463040c0872e9af7d325dec584181917d82c940c8ff413c2c4113/loadero_python-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f98f16d37a092c0abc1184a1da00096b7af19e60cd2a5518aa6035e5b0ca0621",
          "md5": "d9d559626f9a502bace9b7cc64898dd5",
          "sha256": "1f97a8693e4fb5995f49be99685abb022cc42d7c8e2d61a023d98ac396b295b3"
        },
        "downloads": -1,
        "filename": "loadero_python-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d9d559626f9a502bace9b7cc64898dd5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 64734,
        "upload_time": "2022-09-09T08:17:08",
        "upload_time_iso_8601": "2022-09-09T08:17:08.028623Z",
        "url": "https://files.pythonhosted.org/packages/f9/8f/16d37a092c0abc1184a1da00096b7af19e60cd2a5518aa6035e5b0ca0621/loadero_python-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "12aef081c19ca1c43e19399b66dc2c55f58654c8f981fce23e601d8a0c36e57e",
          "md5": "cb90ca9d78bbfb892a5b322f3e47a0ce",
          "sha256": "1c950f86f10e23b5af7549c8326d8b8f1ea8a467b9c5fd6d4d4baba4a7a9cc9c"
        },
        "downloads": -1,
        "filename": "loadero_python-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cb90ca9d78bbfb892a5b322f3e47a0ce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 61556,
        "upload_time": "2022-09-09T08:17:09",
        "upload_time_iso_8601": "2022-09-09T08:17:09.638866Z",
        "url": "https://files.pythonhosted.org/packages/12/ae/f081c19ca1c43e19399b66dc2c55f58654c8f981fce23e601d8a0c36e57e/loadero_python-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51ef06b6b47a135aecd285e9ad09f505214547c5548ea73acd26e466347169f6",
          "md5": "266d7baf66e195786f4513eac7cdb5af",
          "sha256": "5c4f34897e37f60218173c2428d7cea57f294549b47b00200504f8d4dbf9e177"
        },
        "downloads": -1,
        "filename": "loadero_python-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "266d7baf66e195786f4513eac7cdb5af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7, <4",
        "size": 69506,
        "upload_time": "2023-01-03T09:18:20",
        "upload_time_iso_8601": "2023-01-03T09:18:20.592257Z",
        "url": "https://files.pythonhosted.org/packages/51/ef/06b6b47a135aecd285e9ad09f505214547c5548ea73acd26e466347169f6/loadero_python-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "176cb516cf8be4698171eaca5a2be7bfdea0765b8f427b58cb9edd7fd20b26d9",
          "md5": "fa693437dc21a81dcb9ccee82ba0cd2d",
          "sha256": "5a2e0dceb4d9c5b1539e98728994f5be22303413893c68c9ad8f4ae8fdb6c811"
        },
        "downloads": -1,
        "filename": "loadero_python-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fa693437dc21a81dcb9ccee82ba0cd2d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7, <4",
        "size": 65444,
        "upload_time": "2023-01-03T09:18:22",
        "upload_time_iso_8601": "2023-01-03T09:18:22.366087Z",
        "url": "https://files.pythonhosted.org/packages/17/6c/b516cf8be4698171eaca5a2be7bfdea0765b8f427b58cb9edd7fd20b26d9/loadero_python-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "51ef06b6b47a135aecd285e9ad09f505214547c5548ea73acd26e466347169f6",
        "md5": "266d7baf66e195786f4513eac7cdb5af",
        "sha256": "5c4f34897e37f60218173c2428d7cea57f294549b47b00200504f8d4dbf9e177"
      },
      "downloads": -1,
      "filename": "loadero_python-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "266d7baf66e195786f4513eac7cdb5af",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7, <4",
      "size": 69506,
      "upload_time": "2023-01-03T09:18:20",
      "upload_time_iso_8601": "2023-01-03T09:18:20.592257Z",
      "url": "https://files.pythonhosted.org/packages/51/ef/06b6b47a135aecd285e9ad09f505214547c5548ea73acd26e466347169f6/loadero_python-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "176cb516cf8be4698171eaca5a2be7bfdea0765b8f427b58cb9edd7fd20b26d9",
        "md5": "fa693437dc21a81dcb9ccee82ba0cd2d",
        "sha256": "5a2e0dceb4d9c5b1539e98728994f5be22303413893c68c9ad8f4ae8fdb6c811"
      },
      "downloads": -1,
      "filename": "loadero_python-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fa693437dc21a81dcb9ccee82ba0cd2d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7, <4",
      "size": 65444,
      "upload_time": "2023-01-03T09:18:22",
      "upload_time_iso_8601": "2023-01-03T09:18:22.366087Z",
      "url": "https://files.pythonhosted.org/packages/17/6c/b516cf8be4698171eaca5a2be7bfdea0765b8f427b58cb9edd7fd20b26d9/loadero_python-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}