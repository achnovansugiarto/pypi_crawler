{
  "info": {
    "author": "kernitus",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# beets-oldestdate\nBeets plugin that fetches oldest recording or release date for each track. This is especially useful when tracks are from best-of compilations, remasters, or re-releases. Originally based on `beets-recordingdate` by tweitzel, but almost entirely rewritten to actually work with MusicBrainz's incomplete information. The only thing left intact is the `recording_` MP3 tags, for compatibility with `beets-recordingdate`.\n\n# Installation\nSimply run `pip install beets-oldestdate` then add `oldestdate` to the list of active plugins in beets and configure as necessary. The plugin is intended to be used in singleton mode. Undefined behaviour may occur otherwise.\n\n# Configuration\n\n Key        | Default Value           | Description  \n :-------------: |:-------------:| :-----:\n auto | True | Run oldestdate during the import phase\n ignore_track_id | False | During import, ignore existing track_id. Needed if using plugin on a library already tagged by MusicBrainz\n filter_on_import | True | During import, weight down candidates with no work_id so you are more likely to choose a recording with a work_id\n prompt_missing_work_id | True | During import, prompt to fix work_id if missing from chosen recording\n force | False | Run even if `recording_` tags have already been applied to the track\n overwrite_date | False | Overwrite the date MP3 tag field, inluding year, month, and day\n filter_recordings | True | Skip recordings that have attributes before fetching them. This is usually live recordings\n approach | releases | What approach to use to find oldest date. Possible values: `recordings, releases, hybrid, both`. `recordings` works like `beets-recordingdate` did, `releases` is a far more accurate method. Hybrid only fetches releases if no date was found in recordings.\n release_types | None | Filter releases by type, e.g. `['Official']`. Usually not needed\n use_file_date | False | Use the file's embedded date too when looking for the oldest date\n\n## Optimal Configuration\n    musicbrainz:\n      searchlimit: 20\n    plugins: oldestdate\n\n    oldestdate:\n      auto: yes\n      ignore_track_id: yes\n      filter_on_import: yes\n      prompt_missing_work_id: yes\n      force: yes\n      overwrite_date: yes\n      filter_recordings: yes\n      approach: 'releases'\n  \n## How it works\nThe plugin will take the recording that was chosen and get its `work_id`. From this, it gets all recordings associated with said work. If using the `recordings` approach, it will look through these recordings' dates and find the oldest. If using the `releases` approach, it will instead go through the dates for all releases for all recordings and find the oldest (*much* more accurate). The difference between these two approaches is that with `recordings` it only takes one API call to get the necessary data, while with `releases` it takes *n* calls, where *n* is the number of recordings. This takes significantly longer due to MusicBrainz's default ratelimit of 1 API call per second. Due to this, the option `filter_recordings` exists to cut down on the amount of calls needed.\n\n### Missing work_id\nIf the chosen recording has no Work associated with it, the plugin cannot do its job. This is where `filter_on_import` comes in: it applies a negative score to tracks that don't have an associated work so they are much less likely to be chosen. However, this means some of the displayed tracks will be irrelevant. Thus, setting the `searchlimit` to 20 or so tracks is needed to hit the one recording that *does* have a work. This happens to work quite well with famous songs because there is usually a single recording with an associated work that is the original recording, and thus the oldest. If we match with this one, the other recordings that we can't get to because they are not associated with the same work are irrelevant, because we already have the oldest date.  \n\nHowever, it sometimes happens that there is no available recording that matches our track with an associated work. This is what `prompt_missing_work_id` is for: it will prompt us to either just use the single matched recording, in which case only the matched recording's data is used, and checked against the embedded date, or we can try again, or skip the track. Trying again is so that we may go to the website and amend the data, so that the recordings will have an associated work. To help with this process, the plugin prints out a URL to a search for that specific track. Your task is to create a work and associate it with all the relevant recordings, then press try again. This can be quite a laborious task, so if we see that the date printed by the plugin as being the oldest date found with just the selected recording seems accurate, choosing `Use this recording` would be the best choice.\n\n### Covers\nThe plugin is also programmed to deal with covers effectively. Because a `work` actually contains both the recordings of a song by the original author and any cover artists, when the song we are processing is not a cover, any recordings tagged as covers are discarded, to save API calls. Conversely, if the processed song *is* a cover, then we only keep cover recordings, and filter them by author, so only the relevant recordings are kept. This is so the oldest date for a cover will be the oldest date in which that cover was made, and not the original song. This only works when in `releases` mode, as we need to fetch the recordings to get the author data. In `recordings` mode, all covers are treated as the same, even if they may be from different authors.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "beets-oldestdate",
    "package_url": "https://pypi.org/project/beets-oldestdate/",
    "platform": null,
    "project_url": "https://pypi.org/project/beets-oldestdate/",
    "project_urls": {
      "Bug Tracker": "https://github.com/kernitus/beets-oldestdate/issues",
      "Homepage": "https://github.com/kernitus/beets-oldestdate"
    },
    "release_url": "https://pypi.org/project/beets-oldestdate/1.1.3/",
    "requires_dist": [
      "beets~=1.6",
      "mediafile~=0.9",
      "musicbrainzngs~=0.7",
      "python-dateutil~=2.8"
    ],
    "requires_python": ">=3.7",
    "summary": "Beets plugin that finds oldest possible track recording or release date",
    "version": "1.1.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16564251,
  "releases": {
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f65899f8d464aad5265365cfc7568db7f38e370adaa2faa5dbba81196c902c1",
          "md5": "2731e4e593159f537490ffbd67bbd458",
          "sha256": "2d152beaf57c21bedc61d809a171a8ae13bb580375eeb29c993ecd92206e8bb6"
        },
        "downloads": -1,
        "filename": "beets_oldestdate-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2731e4e593159f537490ffbd67bbd458",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9465,
        "upload_time": "2023-01-25T15:57:25",
        "upload_time_iso_8601": "2023-01-25T15:57:25.962908Z",
        "url": "https://files.pythonhosted.org/packages/7f/65/899f8d464aad5265365cfc7568db7f38e370adaa2faa5dbba81196c902c1/beets_oldestdate-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "77c45d0b84cd0bf4905801889e37ea3a2d96067553851a10858a1463fa2c1933",
          "md5": "3bf90e81560c2462b15e485adc1fa6c1",
          "sha256": "2d4861b06e769e4005e67f42d61f36181f2815dd59f47ec525fbe7c7da80d4e5"
        },
        "downloads": -1,
        "filename": "beets_oldestdate-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3bf90e81560c2462b15e485adc1fa6c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 11054,
        "upload_time": "2023-01-25T15:57:27",
        "upload_time_iso_8601": "2023-01-25T15:57:27.756160Z",
        "url": "https://files.pythonhosted.org/packages/77/c4/5d0b84cd0bf4905801889e37ea3a2d96067553851a10858a1463fa2c1933/beets_oldestdate-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3c6920058ffc8f7588b2390022c72551055b7f0cbc242e2acd3196ead9abbd56",
          "md5": "d07de472e7907f3b68df3e0081cb9bcd",
          "sha256": "e83b0cbe71b3e9936a71e278bf85daea82a09287999f7c01a7f6284a0fa0d4a8"
        },
        "downloads": -1,
        "filename": "beets_oldestdate-1.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d07de472e7907f3b68df3e0081cb9bcd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 9264,
        "upload_time": "2023-01-25T16:50:15",
        "upload_time_iso_8601": "2023-01-25T16:50:15.671916Z",
        "url": "https://files.pythonhosted.org/packages/3c/69/20058ffc8f7588b2390022c72551055b7f0cbc242e2acd3196ead9abbd56/beets_oldestdate-1.1.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "61203ea4e493f7935150a491809c05eb707b0d5e237256628d09938e4293eec6",
          "md5": "dbc98c3cb391ff8ef7aa57d3130ec238",
          "sha256": "ce9e02795cfbbf356ffbeb5bb0da99f58e0aab920f62effb3698e28158565014"
        },
        "downloads": -1,
        "filename": "beets_oldestdate-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dbc98c3cb391ff8ef7aa57d3130ec238",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 10850,
        "upload_time": "2023-01-25T16:50:17",
        "upload_time_iso_8601": "2023-01-25T16:50:17.244779Z",
        "url": "https://files.pythonhosted.org/packages/61/20/3ea4e493f7935150a491809c05eb707b0d5e237256628d09938e4293eec6/beets_oldestdate-1.1.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3c6920058ffc8f7588b2390022c72551055b7f0cbc242e2acd3196ead9abbd56",
        "md5": "d07de472e7907f3b68df3e0081cb9bcd",
        "sha256": "e83b0cbe71b3e9936a71e278bf85daea82a09287999f7c01a7f6284a0fa0d4a8"
      },
      "downloads": -1,
      "filename": "beets_oldestdate-1.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d07de472e7907f3b68df3e0081cb9bcd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 9264,
      "upload_time": "2023-01-25T16:50:15",
      "upload_time_iso_8601": "2023-01-25T16:50:15.671916Z",
      "url": "https://files.pythonhosted.org/packages/3c/69/20058ffc8f7588b2390022c72551055b7f0cbc242e2acd3196ead9abbd56/beets_oldestdate-1.1.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "61203ea4e493f7935150a491809c05eb707b0d5e237256628d09938e4293eec6",
        "md5": "dbc98c3cb391ff8ef7aa57d3130ec238",
        "sha256": "ce9e02795cfbbf356ffbeb5bb0da99f58e0aab920f62effb3698e28158565014"
      },
      "downloads": -1,
      "filename": "beets_oldestdate-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "dbc98c3cb391ff8ef7aa57d3130ec238",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 10850,
      "upload_time": "2023-01-25T16:50:17",
      "upload_time_iso_8601": "2023-01-25T16:50:17.244779Z",
      "url": "https://files.pythonhosted.org/packages/61/20/3ea4e493f7935150a491809c05eb707b0d5e237256628d09938e4293eec6/beets_oldestdate-1.1.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}