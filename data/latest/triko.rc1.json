{
  "info": {
    "author": "Ilya Tyutin",
    "author_email": "emmarrgghh@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "[![Python 3.7](https://img.shields.io/badge/python-3.7-blue.svg)](https://www.python.org/downloads/release/python-370/)\n\n# ðŸ¤¼  Triko\nSimplifies the process of encoding/decoding data using [TFRecord](https://www.tensorflow.org/tutorials/load_data/tfrecord) framework.\n\n## Getting Started\n\nI was a bit overwhelmed after using TFRecord framework for the first time. I don't find its interface very appealing, so the idea was to encapsulate all the nitty-gritty in this library.\n\n**Note: I'm not an expert in TFRecord. I just found my approach very helpful in my workflow.**\n\n### TrikoFeature\n\nFor each feature you want to serialize ( images, numbers, strings, labels ), you should use a separate `TrikoFeature` subclass.  Each `TrikoFeature` subclass must be initialized with a unique key ( see `init` method ). Those keys are used to serialize data in `TFRecord`.\n\n`TrikoFeature` utilizes generic. Each subclass must provide three types for itself.\n\n**An abstract example:**\n\n`class DemoFeature(TrikoFeature[RAW_TYPE, ENCODED_TYPE, DECODED_TYPE])`\n\n- `RAW_TYPE` - an original type of your data that you want to encode\n- `ENCODED_TYPE` - a type your data will be in after encoding (TFRecord supports only a few types)\n- `DECODED_TYPE` - a type your data will be in after decoding\n\n**A specific example:**\nLet's say we want to encode an image. We read it, transform it the way we like, and then it's time to serialize it to a `TFRecord` dataset.\n\n`class DemoImageFeature(TrikoFeature[np.ndarray, bytes, np.ndarray])`\n\n- `np.ndarray ( RAW_TYPE )` - our image data is initially a `numpy` matrix\n- `bytes ( ENCODED_TYPE )` - we can't serialize raw `numpy` arrays using `TFRecord` ( it won't be a good idea anyway ), so we will convert them to `bytes`\n- `np.ndarray ( DECODED_TYPE )` - when reading `TFRecord` dataset, `bytes` are useless to us, so we will decoded it back to `np.ndarray`\n\n\n**How does `Triko` encode/decode data?**\n\nYou must tell it how by overriding either `_encode_raw` or `_decode_value` methods.\n\nContinuing our example:\n```python\nclass DemoImageFeature(TrikoFeature[np.ndarray, bytes, np.ndarray]):\n\tdef _encode_raw(self, raw_value: np.ndarray) -> bytes:\n\t\t# convert numpy array to bytes and return\n\t\tpass\n\n\tdef _decode_value(self, encoded_value: bytes) -> np.ndarray:\n\t\t# read bytes and return numpy array\n\t\tpass\n```\n\n**A simple built-in raw data validation**\n\nBefore encoding raw data, you can validate its value by overriding `_validate_raw_value`.\n\n### TrikoFeature in action\n\n**Encoding**\n\nConsider a pseudocode:\n```python\nwith TFRecordWriter as writer:\n\t# you read an image and perform transformations\n\timg_array: np.ndarray = ...\n\t# label for the image\n\tlabel: str = ...\n\n\t# list of your TrikoFeature subclasses\n\tfeatures: List[TrikoFeature] = ...\n\n\tdef raw_value_getter(feature: TrikoFeature) -> Any:\n\t\t\"\"\"\n\t\tMaps a feature to a raw data\n\t\t\"\"\"\n\n\t\t# 'image' is a key you used for your TrikoFeature subclass\n\t\t# that represents an image\n\t\tif feature.key == 'image':\n\t\t\treturn img_array\n\n\t\treturn label\n\n\tserialized_features = TrikoFeature.encode_features_to_string(\n\t\tfeatures=features, raw_value_getter=raw_value_getter,\n\t)\n\twriter.write(serialized_features)\n\n```\n\n\n**Decoding**\n\nConsider a pseudocode:\n```python\n# list of your TrikoFeature subclasses\nfeatures: List[TrikoFeature] = ...\n\ndataset = tf.data.TFRecordDataset().map(TrikoFeature.decoder(features=features))\n```\n\n### The lib is cool, but pseudocode is not\nSee documented real-world example [here](https://github.com/ityutin/triko/blob/master/examples/cats_and_dogs/cats_and_dogs.ipynb)\n\n### Limitations\nOnly [FixedLenFeature](https://www.tensorflow.org/api_docs/python/tf/io/FixedLenFeature) are now supported.\n\n### Prerequisites\n\n\\`\\`\\`\npython 3.7\ntensorflow\nnumpy\n\\`\\`\\`\n\n### Installing\n\n\\`\\`\\`\npip install triko\n\\`\\`\\`\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ityutin/triko",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "triko",
    "package_url": "https://pypi.org/project/triko/",
    "platform": "",
    "project_url": "https://pypi.org/project/triko/",
    "project_urls": {
      "Homepage": "https://github.com/ityutin/triko"
    },
    "release_url": "https://pypi.org/project/triko/0.0.1/",
    "requires_dist": [
      "tensorflow",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Simplifies a process of encoding/decoding data using TFRecord framework.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9155829,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04b94ea85e07ceb002328f9b130409baae9551adb5345def1815cf45f5f44aaf",
          "md5": "b7f4d5500c54c3bd6370dc9a131de88b",
          "sha256": "1b8cd335f39ae0f1ee038229e53a054c402e759034afdb8169b8c3a43638ecac"
        },
        "downloads": -1,
        "filename": "triko-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7f4d5500c54c3bd6370dc9a131de88b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 6442,
        "upload_time": "2021-01-17T11:38:34",
        "upload_time_iso_8601": "2021-01-17T11:38:34.900428Z",
        "url": "https://files.pythonhosted.org/packages/04/b9/4ea85e07ceb002328f9b130409baae9551adb5345def1815cf45f5f44aaf/triko-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb4ed82e4298856ab7be3e88900f19a1d38c41fea04df9e2f3efbf7050780071",
          "md5": "3ac317060f6465d14ba4148349834e77",
          "sha256": "f043c9cfb34c8f21a693452cc9650aabf96fc88f69b9b1052f24233d564a2788"
        },
        "downloads": -1,
        "filename": "triko-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3ac317060f6465d14ba4148349834e77",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 1469588,
        "upload_time": "2021-01-17T11:38:36",
        "upload_time_iso_8601": "2021-01-17T11:38:36.998195Z",
        "url": "https://files.pythonhosted.org/packages/bb/4e/d82e4298856ab7be3e88900f19a1d38c41fea04df9e2f3efbf7050780071/triko-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "04b94ea85e07ceb002328f9b130409baae9551adb5345def1815cf45f5f44aaf",
        "md5": "b7f4d5500c54c3bd6370dc9a131de88b",
        "sha256": "1b8cd335f39ae0f1ee038229e53a054c402e759034afdb8169b8c3a43638ecac"
      },
      "downloads": -1,
      "filename": "triko-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b7f4d5500c54c3bd6370dc9a131de88b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 6442,
      "upload_time": "2021-01-17T11:38:34",
      "upload_time_iso_8601": "2021-01-17T11:38:34.900428Z",
      "url": "https://files.pythonhosted.org/packages/04/b9/4ea85e07ceb002328f9b130409baae9551adb5345def1815cf45f5f44aaf/triko-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb4ed82e4298856ab7be3e88900f19a1d38c41fea04df9e2f3efbf7050780071",
        "md5": "3ac317060f6465d14ba4148349834e77",
        "sha256": "f043c9cfb34c8f21a693452cc9650aabf96fc88f69b9b1052f24233d564a2788"
      },
      "downloads": -1,
      "filename": "triko-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3ac317060f6465d14ba4148349834e77",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 1469588,
      "upload_time": "2021-01-17T11:38:36",
      "upload_time_iso_8601": "2021-01-17T11:38:36.998195Z",
      "url": "https://files.pythonhosted.org/packages/bb/4e/d82e4298856ab7be3e88900f19a1d38c41fea04df9e2f3efbf7050780071/triko-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}