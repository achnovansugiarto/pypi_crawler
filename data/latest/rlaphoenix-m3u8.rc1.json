{
  "info": {
    "author": "Globo.com",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": ".. image:: https://github.com/globocom/m3u8/actions/workflows/main.yml/badge.svg\r\n\r\n.. image:: https://badge.fury.io/py/m3u8.svg\r\n    :target: https://badge.fury.io/py/m3u8\r\n\r\nm3u8\r\n====\r\n\r\nPython `m3u8`_ parser.\r\n\r\nDocumentation\r\n=============\r\n\r\nLoading a playlist\r\n------------------\r\n\r\nTo load a playlist into an object from uri, file path or directly from string, use the `load/loads` functions:\r\n\r\n.. code-block:: python\r\n\r\n    import m3u8\r\n\r\n    playlist = m3u8.load('http://videoserver.com/playlist.m3u8')  # this could also be an absolute filename\r\n    print(playlist.segments)\r\n    print(playlist.target_duration)\r\n\r\n    # if you already have the content as string, use\r\n    \r\n    playlist = m3u8.loads('#EXTM3U8 ... etc ... ')\r\n\r\nDumping a playlist\r\n------------------\r\n\r\nTo dump a playlist from an object to the console or a file, use the `dump/dumps` functions:\r\n\r\n.. code-block:: python\r\n\r\n    import m3u8\r\n\r\n    playlist = m3u8.load('http://videoserver.com/playlist.m3u8')\r\n    print(playlist.dumps())\r\n\r\n    # if you want to write a file from its content\r\n    \r\n    playlist.dump('playlist.m3u8')\r\n\r\n\r\nSupported tags\r\n==============\r\n\r\n* `#EXT-X-TARGETDURATION`_\r\n* `#EXT-X-MEDIA-SEQUENCE`_\r\n* `#EXT-X-DISCONTINUITY-SEQUENCE`_\r\n* `#EXT-X-PROGRAM-DATE-TIME`_\r\n* `#EXT-X-MEDIA`_\r\n* `#EXT-X-PLAYLIST-TYPE`_\r\n* `#EXT-X-KEY`_\r\n* `#EXT-X-STREAM-INF`_\r\n* `#EXT-X-VERSION`_\r\n* `#EXT-X-ALLOW-CACHE`_\r\n* `#EXT-X-ENDLIST`_\r\n* `#EXTINF`_\r\n* `#EXT-X-I-FRAMES-ONLY`_\r\n* `#EXT-X-BITRATE`_\r\n* `#EXT-X-BYTERANGE`_\r\n* `#EXT-X-I-FRAME-STREAM-INF`_\r\n* `#EXT-X-DISCONTINUITY`_\r\n* #EXT-X-CUE-OUT\r\n* #EXT-X-CUE-OUT-CONT\r\n* #EXT-X-CUE-IN\r\n* #EXT-X-CUE-SPAN\r\n* #EXT-OATCLS-SCTE35\r\n* `#EXT-X-INDEPENDENT-SEGMENTS`_\r\n* `#EXT-X-MAP`_\r\n* `#EXT-X-START`_\r\n* `#EXT-X-SERVER-CONTROL`_\r\n* `#EXT-X-PART-INF`_\r\n* `#EXT-X-PART`_\r\n* `#EXT-X-RENDITION-REPORT`_\r\n* `#EXT-X-SKIP`_\r\n* `#EXT-X-SESSION-DATA`_\r\n* `#EXT-X-PRELOAD-HINT`_\r\n* `#EXT-X-SESSION-KEY`_\r\n* `#EXT-X-DATERANGE`_\r\n* `#EXT-X-GAP`_\r\n* `#EXT-X-CONTENT-STEERING`_\r\n\r\nEncryption keys\r\n---------------\r\n\r\nThe segments may or may not be encrypted. The ``keys`` attribute list will\r\nbe a list  with all the different keys as described with `#EXT-X-KEY`_:\r\n\r\nEach key has the next properties:\r\n\r\n-  ``method``: ex.: \"AES-128\"\r\n-  ``uri``: the key uri, ex.: \"http://videoserver.com/key.bin\"\r\n-  ``iv``: the initialization vector, if available. Otherwise ``None``.\r\n\r\nIf no ``#EXT-X-KEY`` is found, the ``keys`` list will have a unique element ``None``. Multiple keys are supported.\r\n\r\nIf unencrypted and encrypted segments are mixed in the M3U8 file, then the list will contain a ``None`` element, with one\r\nor more keys afterwards.\r\n\r\nTo traverse the list of keys available:\r\n\r\n.. code-block:: python\r\n\r\n    import m3u8\r\n\r\n    m3u8_obj = m3u8.loads('#EXTM3U8 ... etc ...')\r\n    len(m3u8_obj.keys)  # => returns the number of keys available in the list (normally 1)\r\n    for key in m3u8_obj.keys:\r\n       if key:  # First one could be None\r\n          key.uri\r\n          key.method\r\n          key.iv\r\n\r\n\r\nGetting segments encrypted with one key\r\n---------------------------------------\r\n\r\nThere are cases where listing segments for a given key is important. It's possible to\r\nretrieve the list of segments encrypted with one key via ``by_key`` method in the\r\n``segments`` list.\r\n\r\nExample of getting the segments with no encryption:\r\n\r\n.. code-block:: python\r\n\r\n    import m3u8\r\n\r\n    m3u8_obj = m3u8.loads('#EXTM3U8 ... etc ...')\r\n    segmk1 = m3u8_obj.segments.by_key(None)\r\n\r\n    # Get the list of segments encrypted using last key\r\n    segm = m3u8_obj.segments.by_key( m3u8_obj.keys[-1] )\r\n\r\n\r\nWith this method, is now possible also to change the key from some of the segments programmatically:\r\n\r\n\r\n.. code-block:: python\r\n\r\n    import m3u8\r\n\r\n    m3u8_obj = m3u8.loads('#EXTM3U8 ... etc ...')\r\n\r\n    # Create a new Key and replace it\r\n    new_key = m3u8.Key(\"AES-128\", \"/encrypted/newkey.bin\", None, iv=\"0xf123ad23f22e441098aa87ee\")\r\n    for segment in m3u8_obj.segments.by_key( m3u8_obj.keys[-1] ):\r\n        segment.key = new_key\r\n    # Remember to sync the key from the list as well\r\n    m3u8_obj.keys[-1] = new_key\r\n\r\n\r\n\r\nVariant playlists (variable bitrates)\r\n-------------------------------------\r\n\r\nA playlist can have a list to other playlist files, this is used to\r\nrepresent multiple bitrates videos, and it's called `variant streams`_.\r\nSee an `example here`_.\r\n\r\n.. code-block:: python\r\n\r\n    variant_m3u8 = m3u8.loads('#EXTM3U8 ... contains a variant stream ...')\r\n    variant_m3u8.is_variant    # in this case will be True\r\n\r\n    for playlist in variant_m3u8.playlists:\r\n        playlist.uri\r\n        playlist.stream_info.bandwidth\r\n\r\nthe playlist object used in the for loop above has a few attributes:\r\n\r\n-  ``uri``: the url to the stream\r\n-  ``stream_info``: a ``StreamInfo`` object (actually a namedtuple) with\r\n   all the attributes available to `#EXT-X-STREAM-INF`_\r\n-  ``media``: a list of related ``Media`` objects with all the attributes\r\n   available to `#EXT-X-MEDIA`_\r\n-  ``playlist_type``: the type of the playlist, which can be one of `VOD`_\r\n   (video on demand) or `EVENT`_\r\n\r\n**NOTE: the following attributes are not implemented yet**, follow\r\n`issue 4`_ for updates\r\n\r\n-  ``alternative_audios``: its an empty list, unless it's a playlist\r\n   with `Alternative audio`_, in this case it's a list with ``Media``\r\n   objects with all the attributes available to `#EXT-X-MEDIA`_\r\n-  ``alternative_videos``: same as ``alternative_audios``\r\n\r\nA variant playlist can also have links to `I-frame playlists`_, which are used\r\nto specify where the I-frames are in a video. See `Apple's documentation`_ on\r\nthis for more information. These I-frame playlists can be accessed in a similar\r\nway to regular playlists.\r\n\r\n.. code-block:: python\r\n\r\n    variant_m3u8 = m3u8.loads('#EXTM3U ... contains a variant stream ...')\r\n\r\n    for iframe_playlist in variant_m3u8.iframe_playlists:\r\n        iframe_playlist.uri\r\n        iframe_playlist.iframe_stream_info.bandwidth\r\n\r\nThe iframe_playlist object used in the for loop above has a few attributes:\r\n\r\n-  ``uri``: the url to the I-frame playlist\r\n-  ``base_uri``: the base uri of the variant playlist (if given)\r\n-  ``iframe_stream_info``: a ``StreamInfo`` object (same as a regular playlist)\r\n\r\nCustom tags\r\n-----------\r\n\r\nQuoting the documentation::\r\n\r\n    Lines that start with the character '#' are either comments or tags.\r\n    Tags begin with #EXT.  They are case-sensitive.  All other lines that\r\n    begin with '#' are comments and SHOULD be ignored.\r\n\r\nThis library ignores all the non-standard tags by default. If you want them to be collected while loading the file content,\r\nyou need to pass a function to the `load/loads` functions, following the example below:\r\n\r\n.. code-block:: python\r\n\r\n    import m3u8\r\n\r\n    def get_movie(line, lineno, data, state):\r\n        if line.startswith('#MOVIE-NAME:'):\r\n            custom_tag = line.split(':')\r\n            data['movie'] = custom_tag[1].strip()\r\n\r\n    m3u8_obj = m3u8.load('http://videoserver.com/playlist.m3u8', custom_tags_parser=get_movie)\r\n    print(m3u8_obj.data['movie'])  #  million dollar baby\r\n\r\n\r\nAlso you are able to override parsing of existing standard tags.\r\nTo achieve this your custom_tags_parser function have to return boolean True - it will mean that you fully implement parsing of current line therefore 'main parser' can go to next line.\r\n\r\n.. code-block:: python\r\n\r\n    import re\r\n    import m3u8\r\n    from m3u8 import protocol\r\n    from m3u8.parser import save_segment_custom_value\r\n\r\n\r\n    def parse_iptv_attributes(line, lineno, data, state):\r\n        # Customize parsing #EXTINF\r\n        if line.startswith(protocol.extinf):\r\n            title = ''\r\n            chunks = line.replace(protocol.extinf + ':', '').split(',', 1)\r\n            if len(chunks) == 2:\r\n                duration_and_props, title = chunks\r\n            elif len(chunks) == 1:\r\n                duration_and_props = chunks[0]\r\n\r\n            additional_props = {}\r\n            chunks = duration_and_props.strip().split(' ', 1)\r\n            if len(chunks) == 2:\r\n                duration, raw_props = chunks\r\n                matched_props = re.finditer(r'([\\w\\-]+)=\"([^\"]*)\"', raw_props)\r\n                for match in matched_props:\r\n                    additional_props[match.group(1)] = match.group(2)\r\n            else:\r\n                duration = duration_and_props\r\n\r\n            if 'segment' not in state:\r\n                state['segment'] = {}\r\n            state['segment']['duration'] = float(duration)\r\n            state['segment']['title'] = title\r\n\r\n            # Helper function for saving custom values\r\n            save_segment_custom_value(state, 'extinf_props', additional_props)\r\n\r\n            # Tell 'main parser' that we expect an URL on next lines\r\n            state['expect_segment'] = True\r\n\r\n            # Tell 'main parser' that it can go to next line, we've parsed current fully.\r\n            return True\r\n\r\n\r\n    if __name__ == '__main__':\r\n        PLAYLIST = \"\"\"#EXTM3U\r\n        #EXTINF:-1 timeshift=\"0\" catchup-days=\"7\" catchup-type=\"flussonic\" tvg-id=\"channel1\" group-title=\"Group1\",Channel1\r\n        http://str00.iptv.domain/7331/mpegts?token=longtokenhere\r\n        \"\"\"\r\n\r\n        parsed = m3u8.loads(PLAYLIST, custom_tags_parser=parse_iptv_attributes)\r\n\r\n        first_segment_props = parsed.segments[0].custom_parser_values['extinf_props']\r\n        print(first_segment_props['tvg-id'])  # 'channel1'\r\n        print(first_segment_props['group-title'])  # 'Group1'\r\n        print(first_segment_props['catchup-type'])  # 'flussonic'\r\n\r\nHelper functions get_segment_custom_value() and save_segment_custom_value() are intended for getting/storing your parsed values per segment into Segment class.\r\nAfter that all custom values will be accessible via property custom_parser_values of Segment instance.\r\n\r\nUsing different HTTP clients\r\n----------------------------\r\n\r\nIf you don't want to use urllib to download playlists, having more control on how objects are fetched over the internet,\r\nyou can use your own client. `requests` is a well known Python HTTP library and it can be used with `m3u8`:\r\n\r\n.. code-block:: python\r\n\r\n    import m3u8\r\n    import requests\r\n\r\n    class RequestsClient():\r\n        def download(self, uri, timeout=None, headers={}, verify_ssl=True):\r\n            o = requests.get(uri, timeout=timeout, headers=headers)\r\n            return o.text, o.url\r\n\r\n    playlist = m3u8.load('http://videoserver.com/playlist.m3u8', http_client=RequestsClient())\r\n    print(playlist.dumps())\r\n\r\nThe advantage of using a custom HTTP client is to refine SSL verification, proxies, performance, flexibility, etc.\r\n\r\nPlaylists behind proxies\r\n------------------------\r\n\r\nIn case you need to use a proxy but can't use a system wide proxy (HTTP/HTTPS proxy environment variables), you can pass your\r\nHTTP/HTTPS proxies as a dict to the load function.\r\n\r\n.. code-block:: python\r\n\r\n    import m3u8\r\n\r\n    proxies = {\r\n        'http': 'http://10.10.1.10:3128',\r\n        'https': 'http://10.10.1.10:1080',\r\n    }\r\n\r\n    http_client = m3u8.httpclient.DefaultHTTPClient(proxies)\r\n    playlist = m3u8.load('http://videoserver.com/playlist.m3u8', http_client=http_client)  # this could also be an absolute filename\r\n    print(playlist.dumps())\r\n\r\nIt works with the default client only. Custom HTTP clients must implement this feature.\r\n\r\nRunning Tests\r\n=============\r\n\r\n.. code-block:: bash\r\n\r\n    $ ./runtests\r\n\r\nContributing\r\n============\r\n\r\nAll contributions are welcome, but we will merge a pull request if, and only if, it\r\n\r\n-  has tests\r\n-  follows the code conventions\r\n\r\nIf you plan to implement a new feature or something that will take more\r\nthan a few minutes, please open an issue to make sure we don't work on\r\nthe same thing.\r\n\r\n.. _m3u8: https://tools.ietf.org/html/rfc8216\r\n.. _#EXT-X-VERSION: https://tools.ietf.org/html/rfc8216#section-4.3.1.2\r\n.. _#EXTINF: https://tools.ietf.org/html/rfc8216#section-4.3.2.1\r\n.. _#EXT-X-ALLOW-CACHE: https://datatracker.ietf.org/doc/html/draft-pantos-http-live-streaming-07#section-3.3.6\r\n.. _#EXT-X-BITRATE: https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis#section-4.4.4.8\r\n.. _#EXT-X-BYTERANGE: https://tools.ietf.org/html/rfc8216#section-4.3.2.2\r\n.. _#EXT-X-DISCONTINUITY: https://tools.ietf.org/html/rfc8216#section-4.3.2.3\r\n.. _#EXT-X-KEY: https://tools.ietf.org/html/rfc8216#section-4.3.2.4\r\n.. _#EXT-X-MAP: https://tools.ietf.org/html/rfc8216#section-4.3.2.5\r\n.. _#EXT-X-PROGRAM-DATE-TIME: https://tools.ietf.org/html/rfc8216#section-4.3.2.6\r\n.. _#EXT-X-DATERANGE: https://tools.ietf.org/html/rfc8216#section-4.3.2.7\r\n.. _#EXT-X-TARGETDURATION: https://tools.ietf.org/html/rfc8216#section-4.3.3.1\r\n.. _#EXT-X-MEDIA-SEQUENCE: https://tools.ietf.org/html/rfc8216#section-4.3.3.2\r\n.. _#EXT-X-DISCONTINUITY-SEQUENCE: https://tools.ietf.org/html/rfc8216#section-4.3.3.3\r\n.. _#EXT-X-ENDLIST: https://tools.ietf.org/html/rfc8216#section-4.3.3.4\r\n.. _#EXT-X-PLAYLIST-TYPE: https://tools.ietf.org/html/rfc8216#section-4.3.3.5\r\n.. _#EXT-X-I-FRAMES-ONLY: https://tools.ietf.org/html/rfc8216#section-4.3.3.6\r\n.. _#EXT-X-MEDIA: https://tools.ietf.org/html/rfc8216#section-4.3.4.1\r\n.. _#EXT-X-STREAM-INF: https://tools.ietf.org/html/rfc8216#section-4.3.4.2\r\n.. _#EXT-X-I-FRAME-STREAM-INF: https://tools.ietf.org/html/rfc8216#section-4.3.4.3\r\n.. _#EXT-X-SESSION-DATA: https://tools.ietf.org/html/rfc8216#section-4.3.4.4\r\n.. _#EXT-X-SESSION-KEY: https://tools.ietf.org/html/rfc8216#section-4.3.4.5\r\n.. _#EXT-X-INDEPENDENT-SEGMENTS: https://tools.ietf.org/html/rfc8216#section-4.3.5.1\r\n.. _#EXT-X-START: https://tools.ietf.org/html/rfc8216#section-4.3.5.2\r\n.. _#EXT-X-PRELOAD-HINT: https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-09#section-4.4.5.3\r\n.. _#EXT-X-DATERANGE: https://tools.ietf.org/html/rfc8216#section-4.3.2.7\r\n.. _#EXT-X-GAP: https://tools.ietf.org/html/draft-pantos-hls-rfc8216bis-05#section-4.4.2.7\r\n.. _#EXT-X-CONTENT-STEERING: https://tools.ietf.org/html/draft-pantos-hls-rfc8216bis-10#section-4.4.6.64\r\n.. _#EXT-X-SKIP: https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis#section-4.4.5.2\r\n.. _#EXT-X-RENDITION-REPORT: https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis#section-4.4.5.4\r\n.. _#EXT-X-PART: https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis#section-4.4.4.9\r\n.. _#EXT-X-PART-INF: https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis#section-4.4.3.7\r\n.. _#EXT-X-SERVER-CONTROL: https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis#section-4.4.3.8\r\n.. _issue 1: https://github.com/globocom/m3u8/issues/1\r\n.. _variant streams: https://tools.ietf.org/html/rfc8216#section-6.2.4\r\n.. _example here: http://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-8.5\r\n.. _issue 4: https://github.com/globocom/m3u8/issues/4\r\n.. _I-frame playlists: https://tools.ietf.org/html/rfc8216#section-4.3.4.3\r\n.. _Apple's documentation: https://developer.apple.com/library/ios/technotes/tn2288/_index.html#//apple_ref/doc/uid/DTS40012238-CH1-I_FRAME_PLAYLIST\r\n.. _Alternative audio: http://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-8.7\r\n.. _VOD: https://developer.apple.com/library/mac/technotes/tn2288/_index.html#//apple_ref/doc/uid/DTS40012238-CH1-TNTAG2\r\n.. _EVENT: https://developer.apple.com/library/mac/technotes/tn2288/_index.html#//apple_ref/doc/uid/DTS40012238-CH1-EVENT_PLAYLIST\r\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/globocom/m3u8",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rlaphoenix.m3u8",
    "package_url": "https://pypi.org/project/rlaphoenix.m3u8/",
    "platform": null,
    "project_url": "https://pypi.org/project/rlaphoenix.m3u8/",
    "project_urls": {
      "Homepage": "https://github.com/globocom/m3u8"
    },
    "release_url": "https://pypi.org/project/rlaphoenix.m3u8/3.4.0/",
    "requires_dist": [
      "iso8601"
    ],
    "requires_python": ">=3.6",
    "summary": "Python m3u8 parser",
    "version": "3.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17229579,
  "releases": {
    "3.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52d2d2ffaecbfff0c057b5824a82b57b709b1c5b2966c970e4c5d6e1d8109b21",
          "md5": "be873310c2569ce5b0583b21ae9c3d18",
          "sha256": "cd2c22195c747d52c63189d4bd5f664e1fc5ea202f5a7396b7336581f26a2838"
        },
        "downloads": -1,
        "filename": "rlaphoenix.m3u8-3.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be873310c2569ce5b0583b21ae9c3d18",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24767,
        "upload_time": "2023-03-09T21:37:38",
        "upload_time_iso_8601": "2023-03-09T21:37:38.326080Z",
        "url": "https://files.pythonhosted.org/packages/52/d2/d2ffaecbfff0c057b5824a82b57b709b1c5b2966c970e4c5d6e1d8109b21/rlaphoenix.m3u8-3.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f1481ed7004063170f4314c16e8c97b9c144e25e503e9fe316fd5e9f6c8d7980",
          "md5": "80b530d8b7fb7262d8356a3b058bd4da",
          "sha256": "6f8c71350bc8a07f2bd714d1e72b0a483455b9c6e5141a5a308bf264b6718504"
        },
        "downloads": -1,
        "filename": "rlaphoenix.m3u8-3.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "80b530d8b7fb7262d8356a3b058bd4da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 44713,
        "upload_time": "2023-03-09T21:37:40",
        "upload_time_iso_8601": "2023-03-09T21:37:40.342284Z",
        "url": "https://files.pythonhosted.org/packages/f1/48/1ed7004063170f4314c16e8c97b9c144e25e503e9fe316fd5e9f6c8d7980/rlaphoenix.m3u8-3.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "52d2d2ffaecbfff0c057b5824a82b57b709b1c5b2966c970e4c5d6e1d8109b21",
        "md5": "be873310c2569ce5b0583b21ae9c3d18",
        "sha256": "cd2c22195c747d52c63189d4bd5f664e1fc5ea202f5a7396b7336581f26a2838"
      },
      "downloads": -1,
      "filename": "rlaphoenix.m3u8-3.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "be873310c2569ce5b0583b21ae9c3d18",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 24767,
      "upload_time": "2023-03-09T21:37:38",
      "upload_time_iso_8601": "2023-03-09T21:37:38.326080Z",
      "url": "https://files.pythonhosted.org/packages/52/d2/d2ffaecbfff0c057b5824a82b57b709b1c5b2966c970e4c5d6e1d8109b21/rlaphoenix.m3u8-3.4.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f1481ed7004063170f4314c16e8c97b9c144e25e503e9fe316fd5e9f6c8d7980",
        "md5": "80b530d8b7fb7262d8356a3b058bd4da",
        "sha256": "6f8c71350bc8a07f2bd714d1e72b0a483455b9c6e5141a5a308bf264b6718504"
      },
      "downloads": -1,
      "filename": "rlaphoenix.m3u8-3.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "80b530d8b7fb7262d8356a3b058bd4da",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 44713,
      "upload_time": "2023-03-09T21:37:40",
      "upload_time_iso_8601": "2023-03-09T21:37:40.342284Z",
      "url": "https://files.pythonhosted.org/packages/f1/48/1ed7004063170f4314c16e8c97b9c144e25e503e9fe316fd5e9f6c8d7980/rlaphoenix.m3u8-3.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}