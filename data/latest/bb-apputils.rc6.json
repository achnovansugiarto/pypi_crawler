{
  "info": {
    "author": "Erik Beebe",
    "author_email": "beebeapps_debugging@tuta.io",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# BB_Utils\n\n## Utilities for running simple applications\n\n#### Includes:\n\n- bbappdirs\n    - a simple module for handling user app directories.\n- bblogger\n    - custom Logger and Formatter class for the built-in python logging module\n- bbargparser\n    - parse command line arguments with options\n\n## BBLogger\n\n> Custom logging classes\n\n- Subclasses of logging.Logger and logging.Formatter\n\n```python\n\nclass BBLogger(logging.getLoggerClass()):\n    \"\"\"\n    Console and file logging, formatted with BBFormatter\n        - options are set through logger.getLogger() with initial call\n        - subsequent loggers should be called with python's logging\n          module: logging.getLogger()\n    \"\"\"\n\n  # Added functions\n\n    def set_level(self, level):\n        \"\"\"\n        Sets level for current and all other console loggers\n            - files will always be debugging mode\n            - acceptable modes:\n                'debug'    | logging.DEBUG    | 10 | 1 <or> 0\n                'info'     | logging.INFO     | 20 | 2\n                'warning'  | logging.WARNING  | 30 | 3\n                'error'    | logging.ERROR    | 40 | 4\n                'critical' | logging.CRITICAL | 50 | 5\n        \"\"\"\n\n    def set_format(self, formatting):\n        \"\"\"\n        Change formatting for console logging\n            'basic' - simple, nicely formatted messaging\n            'debug' - more info pertaining to each message\n                      * defaults to log level 1\n        \"\"\"\n\n```\n\n## BBFormatter\n\n> Make logs pretty\n\n```python\n\nclass BBFormatter(logging.Formatter):\n    \"\"\"\n    BBFormatter - Color logging output with ansi or html\n\n        mode = 'basic' (console)\n                Basic logging for end user messages\n\n               'debug' (console)\n                More output information for debugging\n\n               'html' (file)\n                Uses html format to color logs to send to an html file or gui\n                program that supports html formatting\n\n               'plaintext' (file)\n                No escapes inserted for logging plaintext to a file\n    \"\"\"\n\n```\n\n#### logger.getLogger()\n\n> Not to be confused with python's logging.getLogger(). Use this method for the original logger call ( during __init__.py for example ), then make all subsequent calls to get loggers with python's built-in logging.getLogger() method.\n\n```python\n\ndef getLogger( name, level = 1, **opts ):\n    \"\"\"\n    Set custom logger class and return logger\n      - only use this for initial call to logger. Use logging.getLogger() for\n        further logging modules\n\n        'name'    = Name of returned logger\n        'level'   = Log level for the returned logger. Defaults to 1.\n\\\n        **opts:\n              More options for logger. To print the log to a file, 'filepath'\n            must be present in the opts.\n\n            'appname'      : [ DEFAULT 'BB-Logger' ] Application name\n            'console'      : [ DEFAULT = True ] Print logging to console\n            'consoleformat': [ DEFAULT = 'basic' ] Console formatting. Options are\n                                'basic' or 'debug'.\n            'color'        : [ DEFAULT = True ] colorized console logging\n            'filepath'     : [ DEFAULT None ] The path for the file to be written to.\n                                The directory for the file must exist. If the file\n                                exists and write_mode 'w' is used, log file will be\n                                overwritten.\n            'write_mode'   : [ DEFAULT = 'a'] Write mode - ('a', 'append', 'w', 'write')\n            'filelevel'    : [ DEFAULT = 1] Set log level for file. Default is 1, DEBUGGING\n                                - must be set with initial call to logger.getLogger()\n            'fileformat'   : [ DEFAULT = 'html' ] Text formatting for file - 'plaintext'\n                                or 'html'\n\n              A new file will be created if not existing as long as the directory\n            already exists. If only a filename is given for 'path', the file will\n            be written in the user's HOME folder. Extra options should only need\n            applied for the first time initiating a logger in your app/script unless\n            logfile changes are wanted for a particular logger. The 'color' option\n            only applies to console output.\n    \"\"\"\n\n```\n\n### Example usage:\n\n```python\n\n# __init__.py\n\nfrom bb_logger import logger\nlog = logger.getLogger( __name__, 3,\n                        appname   = \"My Awesome Application\",\n                        filepath  = \"/path/to/logfile\",\n                        filelevel = 1 )\n\n# -------------------------------------------------------------\n\n# __main__.py\n\nimport logging\nlog = logging.getLogger(__name__)\n\n```\n\n## BBAppDirs\n\n> Locates and creates application directories as needed according to application name. Keeps a temporary file while app is running to assure the same files are found during a user's session, even with multiple calls from different modules.\n\n```python\n\nclass AppDirs:\n    \"\"\"\n    Get system specific app directories\n        - for initiating app configurations\n\n        A temporary file is created and read for reading by other\n      modules within the app.\n\n      Module Data > 'expire' : expiration time in seconds\n                    'name'   : application name\n                    'logfile': logfile path\n                    'logs'   : list of stored logs from SimpleLog\n                    'time'   : initial AppDirs call time\n                    'tmp'    : temporary file path\n                    'shared' : shared dictionary data\n\n\n        self.data['logs'] = [{ 'levelname': str(),\n                               'level'    : int()\n                               'time'     : datetime.timestamp(),\n                               'msg'      : str(),\n                               'formatted': str()  },\n                                etc...  ]\n\n    \"\"\"\n\n    def __init__( self, *, name = \"\", expire = 0, unique = \"\", simplelog = False, loglevel = 0, noerrors = False, shared = {} ):\n        \"\"\"\n        name = provide application name\n            - required\n        expire = set an expiration time in seconds\n            - temporary file is abandoned/deleted if older than this time\n            - expire <= 0 = no expiration\n            - default = 0\n        unique = provide a name or unique set of characters\n            - prevent other programs or modules from unintentionally reading\n              or deleting the wrong temp files\n            - required with every call that wants to access this data\n        simplelog = use SimpleLog instead of python's built-in logging module\n            - default False\n        loglevel = log level for SimpleLog\n            - ignored for python's logging module\n        noerrors = don't print logs at exit due to errors\n            - only applies if loglevel not set for SimpleLog\n        shared = data to share throughout the application\n            - must be in dictionary format\n\n            SimpleLog is used for initial call. Subsequent calls, if the temp file\n          is created, will load python's built-in logging module unless 'simplelog'\n          is set to True.\n\n        \"\"\"\n\n```\n\n#### SimpleLog\n\n> Includes a simple log class to use on initial call to AppDirs. You can optionally continue to only use SimpleLog if you set the kwarg 'simplelog' to True in AppDirs.\n\n```python\n\nclass SimpleLog:\n    \"\"\"\n    SimpleLog\n\n      A simple logger. Is used during initial call to AppDirs to give the application\n    the chance to initiate python's logging module before loading it here.\n    \"\"\"\n\n    def __init__(self, level = 0, init = False, *, log_to_data):\n        \"\"\"\n        Initiate SimpleLog\n            - level = 0: off [default]\n                      1: debug\n                      2: info\n                      3: warning\n                      4: error\n                      5: critical\n\n            - init = If True, will register self.onExit() with atexit. If log level is\n                     set to 0 [off], all log messages will be printed after exiting if\n                     any errors [>4] were recorded.\n\n            - log_to_data = callback function to write log data to temp file\n\n            Similar to the standard built-in logging, messages from set level and above\n          will be displayed. Level set to 0 will turn SimpleLog off. This does not effect\n          python's built-in logging module.\n\n        \"\"\"\n\n```\n\n## BBArgParser\n\n```python\n\nfrom bbargparser import ArgParser\n\n# ------------------------------------\n\nclass ArgParser(dict):\n    \"\"\"\n    ArgParser\n      - multiple ways to parse options\n\n        opts = list of tuples\n\n        Each option can have as many keywords as wanted. Options are set up in\n      a Unix style. No hyphens are necessary when initiating accepted options. In\n      fact, they will be stripped from the beginning of each option and reassigned\n      appropriately if existing.\n\n        Options are given in a list/tuple. Each accepted option, both short and long\n      arguments, are given in the same tuple. Single letter options, short opts, will\n      be prepended with a single hyphen '-'. Long options with two hyphens '--'.\n\n        You can specify acceptable options or types as well for each keyword/group of\n      keywords. To do this, include '_+_' in the same tuple. Anything following this\n      value will symbolize an accepted user argument or argument type. You can specify\n      a path, file, or directory with '__path__', '__file__', or '__directory__'. The\n      directory or file options will check to make sure that the file or directory exists\n      as a file or directory. The path option only checks to make sure that the argument\n      is in the proper form of a file path, ignoring whether it exists or not. The file\n      path must be an absolute path.\n\n        Another accepted option type is '__count__n', while n is the number of arguments\n      required for that option. This is the only \"accepted option\" that you can combine\n      with another type. Anything other than types will not be accepted in combination.\n        For example:\n            ArgParser( [('i', 'items', '_+_', '__count__3', str)] ) requires 3 arguments\n          that are integers for the options '-i', '--items'.\n\n        You can also use regex to define an accepted argument with '__regex__:' with the\n      regex string following the colon (':'). Remember to use proper escapes. This option\n      uses the built-in re module.\n\n        The last \"acceptable option\" option is providing a function that returns True or\n      False and accepts a single string argument. This option can only be used by itself.\n\n        When specifying the type using the '_+_' value, any other arguments following it\n      will be ignored, unless it's '__count__n', in which case anything after that's not\n      a type will be ignored. If the user argument given doesn't match the type, a SyntaxError\n      exception will be raised, unless the type is '__file__' or '__directory__', in which\n      case a FileNotFoundError will be raised. An invalid option passed by the user will\n      cause SyntaxError to be raised.\n    \"\"\"\n\n# Example:\nopts = ArgParser( [('i', 'input-file', '_+_', '__file__'),\n                   ('o', 'output-file', '_+_', '__path__')] )\n\nfor opt, arg in opts( sys.argv[1:],\n                      ignore_delimiters = True,\n                      set_delimiter = None,\n                      clear = True )\n\n    \"\"\"\n        Options would be set as '-i', '--input-file' and '-o', '--output-file'. The '-i'\n      option will only accept an existing file as an argument and the '-o' option will\n      accept an argument that matches a path format, regardless of whether it exists. opts(...)\n      will return a key, item list from the provided user arguments. The '.items()' function\n      should not be used when calling the class with user arguments. If no arguments are given,\n      self (dict) is returned. The default is to clear self every time it is called inless 'clear'\n      is set to False.\n\n    \"\"\"\n\n```\n\n## Changelog\n\n- 0.3.5\n    - modified BBLogger and getLogger to hopefully maintain the right level across modules\n    - added 'rootlogger' level option\n\n- 0.3.8\n    - changed formatter to include filename instead of logger name\n\n## Thanks To:\n\n##### Colored logging with logging.Formatter()\n\n<p>Thread at <a href=\"https://stackoverflow.com/questions/384076/how-can-i-color-python-logging-output\">Stack Overflow</a> on python log formatting</p>\n\n<p>Adapted from <a href=\"https://stackoverflow.com/a/56944256/3638629\">original code</a> by user's at Stack Overflow</p>\n\n#### Thanks for providing help so people like me can learn :)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bb-apputils",
    "package_url": "https://pypi.org/project/bb-apputils/",
    "platform": null,
    "project_url": "https://pypi.org/project/bb-apputils/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/bb-apputils/0.3.8/",
    "requires_dist": null,
    "requires_python": ">=3.10,<4.0",
    "summary": "App utilities",
    "version": "0.3.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17442124,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "10afbe94d59d084b476af43259fcc83c09d39461870901d5c48d5c60e1e11534",
          "md5": "0ded905368fca3a1a5785e4be84ba29c",
          "sha256": "793402b68f1b0316529d3642b11669ae4e809660ba3656b879db75416e15346a"
        },
        "downloads": -1,
        "filename": "bb_apputils-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0ded905368fca3a1a5785e4be84ba29c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 12992,
        "upload_time": "2023-02-14T00:53:05",
        "upload_time_iso_8601": "2023-02-14T00:53:05.246194Z",
        "url": "https://files.pythonhosted.org/packages/10/af/be94d59d084b476af43259fcc83c09d39461870901d5c48d5c60e1e11534/bb_apputils-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21e1b62d85a3ca75b7113aaa7e9ad1b60195dd3974aeb24500ccf36aec6d0157",
          "md5": "5540851c2643d21bd54360d16596ced0",
          "sha256": "cda28c3214f01887bf488cf63c822b44f4b66a9d410d67476ee3de59b086c8cb"
        },
        "downloads": -1,
        "filename": "bb_apputils-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5540851c2643d21bd54360d16596ced0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 11485,
        "upload_time": "2023-02-14T00:53:06",
        "upload_time_iso_8601": "2023-02-14T00:53:06.647451Z",
        "url": "https://files.pythonhosted.org/packages/21/e1/b62d85a3ca75b7113aaa7e9ad1b60195dd3974aeb24500ccf36aec6d0157/bb_apputils-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c4b18dc3afa2bf273f0931ca1f82ffc92eeead1511230b2f2374c4f9c60d453",
          "md5": "d34e6547a215d25d24b35bddc27b76d6",
          "sha256": "6cfadd9a5fcf80ad9e733d04e8ac86aeb7c82a65720aeb0985ee68e4fbe15dd8"
        },
        "downloads": -1,
        "filename": "bb_apputils-0.3.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d34e6547a215d25d24b35bddc27b76d6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 21389,
        "upload_time": "2023-02-20T05:31:45",
        "upload_time_iso_8601": "2023-02-20T05:31:45.950250Z",
        "url": "https://files.pythonhosted.org/packages/6c/4b/18dc3afa2bf273f0931ca1f82ffc92eeead1511230b2f2374c4f9c60d453/bb_apputils-0.3.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cbe92389da1ce653d0dd8252d3406acc6659c7a64f4815c51a03761de7883e1",
          "md5": "58c6e9190e60640902b386d349940b75",
          "sha256": "d6df83b5ea15cdafc050bc7966e191b044957160c5d148df8c2b28ae420c8960"
        },
        "downloads": -1,
        "filename": "bb_apputils-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "58c6e9190e60640902b386d349940b75",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 20656,
        "upload_time": "2023-02-20T05:31:47",
        "upload_time_iso_8601": "2023-02-20T05:31:47.578269Z",
        "url": "https://files.pythonhosted.org/packages/1c/be/92389da1ce653d0dd8252d3406acc6659c7a64f4815c51a03761de7883e1/bb_apputils-0.3.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "51aa75c2296b7d4ca98b07c61af83a2905e244fd114d522cfa81dd9be35aeaa4",
          "md5": "d63ba5219f5ee81455211e92f1ac4395",
          "sha256": "4a69cd0b54c33b23a701da7f094d6e273b7425d3d709b05be0817f1c7f3cedff"
        },
        "downloads": -1,
        "filename": "bb_apputils-0.3.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d63ba5219f5ee81455211e92f1ac4395",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 16935,
        "upload_time": "2023-02-22T07:27:32",
        "upload_time_iso_8601": "2023-02-22T07:27:32.642235Z",
        "url": "https://files.pythonhosted.org/packages/51/aa/75c2296b7d4ca98b07c61af83a2905e244fd114d522cfa81dd9be35aeaa4/bb_apputils-0.3.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "036b32b03356b660b5537c3dc5e644785b11671048ad723b62f2dbd9484084f1",
          "md5": "ac11898ab7def8f8e52c2c0f51045753",
          "sha256": "c21db798a49d81038124a88257ce441fe90eac573e66bd0de0d6b2171dec1b65"
        },
        "downloads": -1,
        "filename": "bb_apputils-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ac11898ab7def8f8e52c2c0f51045753",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 17403,
        "upload_time": "2023-02-22T07:27:33",
        "upload_time_iso_8601": "2023-02-22T07:27:33.885680Z",
        "url": "https://files.pythonhosted.org/packages/03/6b/32b03356b660b5537c3dc5e644785b11671048ad723b62f2dbd9484084f1/bb_apputils-0.3.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "812dfa5cea18ee8cd2c5d5e8d41fa9449b8966fe670eec5b1f95447d0981d089",
          "md5": "e809e229cc33ad7521c8af6116de9004",
          "sha256": "78af9b7b24bf28729f4f835c6f8c08fb6fda6c6f8087887cd27c03be73269f87"
        },
        "downloads": -1,
        "filename": "bb_apputils-0.3.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e809e229cc33ad7521c8af6116de9004",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 16914,
        "upload_time": "2023-02-23T08:02:23",
        "upload_time_iso_8601": "2023-02-23T08:02:23.963265Z",
        "url": "https://files.pythonhosted.org/packages/81/2d/fa5cea18ee8cd2c5d5e8d41fa9449b8966fe670eec5b1f95447d0981d089/bb_apputils-0.3.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5bae61b769f511c0146ee098d598c520bc918cd9e4925057293401112e13b9c",
          "md5": "b848d43569ad9c33548486c3ff25875c",
          "sha256": "dd23f865aae18074c4b91dcab621cce3b95548dbc058e35e562323f01a10185f"
        },
        "downloads": -1,
        "filename": "bb_apputils-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b848d43569ad9c33548486c3ff25875c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 17406,
        "upload_time": "2023-02-23T08:02:26",
        "upload_time_iso_8601": "2023-02-23T08:02:26.041456Z",
        "url": "https://files.pythonhosted.org/packages/c5/ba/e61b769f511c0146ee098d598c520bc918cd9e4925057293401112e13b9c/bb_apputils-0.3.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56076ed738f7004e4ad5a786118dff5e43b4f883b05582be94329855d421933f",
          "md5": "991e5f1eede9a7687a33b80e3beda751",
          "sha256": "e4153001787943450a9a188d4eda835c07ef9e76a686b780e38c1da078380e55"
        },
        "downloads": -1,
        "filename": "bb_apputils-0.3.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "991e5f1eede9a7687a33b80e3beda751",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 16918,
        "upload_time": "2023-02-23T08:06:51",
        "upload_time_iso_8601": "2023-02-23T08:06:51.287575Z",
        "url": "https://files.pythonhosted.org/packages/56/07/6ed738f7004e4ad5a786118dff5e43b4f883b05582be94329855d421933f/bb_apputils-0.3.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fb0061ef45ede8574ede0d44f1cf9932a4fffbab02290ddf87bc5b1c63fa958",
          "md5": "90a9e7aecf373416b240328ce97ebd42",
          "sha256": "8977c97b9c0f9b93f5fd41a043daedb88bce016f946fbc44e15f3fb9a8f103cf"
        },
        "downloads": -1,
        "filename": "bb_apputils-0.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "90a9e7aecf373416b240328ce97ebd42",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 17409,
        "upload_time": "2023-02-23T08:06:52",
        "upload_time_iso_8601": "2023-02-23T08:06:52.972243Z",
        "url": "https://files.pythonhosted.org/packages/3f/b0/061ef45ede8574ede0d44f1cf9932a4fffbab02290ddf87bc5b1c63fa958/bb_apputils-0.3.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6d965cc48ad26a5633aa95260d090a9ed8a5d2eb6416242f6ab4bf655f0a1e5",
          "md5": "31e2830a829e8b6c55af9a6ce62eb176",
          "sha256": "995f4b3b2c302a94d76e73eb3ea781362de317f7ee076cc6284cc34eea7b5ec1"
        },
        "downloads": -1,
        "filename": "bb_apputils-0.3.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31e2830a829e8b6c55af9a6ce62eb176",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 16950,
        "upload_time": "2023-03-25T13:01:57",
        "upload_time_iso_8601": "2023-03-25T13:01:57.216375Z",
        "url": "https://files.pythonhosted.org/packages/b6/d9/65cc48ad26a5633aa95260d090a9ed8a5d2eb6416242f6ab4bf655f0a1e5/bb_apputils-0.3.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6682f5f023d0972033292d702a345bc257d1a53fb797c4469099207eafbc1e1e",
          "md5": "9cd6e8496c3ca25c8881e0672f2cf62a",
          "sha256": "ed16191159528d73c5f8500b0d0be5d92950454fd042bd6f07addc2d0bd59dd7"
        },
        "downloads": -1,
        "filename": "bb_apputils-0.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "9cd6e8496c3ca25c8881e0672f2cf62a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 17474,
        "upload_time": "2023-03-25T13:01:58",
        "upload_time_iso_8601": "2023-03-25T13:01:58.604061Z",
        "url": "https://files.pythonhosted.org/packages/66/82/f5f023d0972033292d702a345bc257d1a53fb797c4469099207eafbc1e1e/bb_apputils-0.3.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b6d965cc48ad26a5633aa95260d090a9ed8a5d2eb6416242f6ab4bf655f0a1e5",
        "md5": "31e2830a829e8b6c55af9a6ce62eb176",
        "sha256": "995f4b3b2c302a94d76e73eb3ea781362de317f7ee076cc6284cc34eea7b5ec1"
      },
      "downloads": -1,
      "filename": "bb_apputils-0.3.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "31e2830a829e8b6c55af9a6ce62eb176",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 16950,
      "upload_time": "2023-03-25T13:01:57",
      "upload_time_iso_8601": "2023-03-25T13:01:57.216375Z",
      "url": "https://files.pythonhosted.org/packages/b6/d9/65cc48ad26a5633aa95260d090a9ed8a5d2eb6416242f6ab4bf655f0a1e5/bb_apputils-0.3.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6682f5f023d0972033292d702a345bc257d1a53fb797c4469099207eafbc1e1e",
        "md5": "9cd6e8496c3ca25c8881e0672f2cf62a",
        "sha256": "ed16191159528d73c5f8500b0d0be5d92950454fd042bd6f07addc2d0bd59dd7"
      },
      "downloads": -1,
      "filename": "bb_apputils-0.3.8.tar.gz",
      "has_sig": false,
      "md5_digest": "9cd6e8496c3ca25c8881e0672f2cf62a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 17474,
      "upload_time": "2023-03-25T13:01:58",
      "upload_time_iso_8601": "2023-03-25T13:01:58.604061Z",
      "url": "https://files.pythonhosted.org/packages/66/82/f5f023d0972033292d702a345bc257d1a53fb797c4469099207eafbc1e1e/bb_apputils-0.3.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}