{
  "info": {
    "author": "Ashim Paudel",
    "author_email": "paudelashim111@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "# Contents:\n- [Introduction](#introduction)\n    - [About Module](#about-the-module)\n    - [Program Motivation](#program-motivation)\n- [Installation](#installation)\n- [Documentation](#documentation)\n    - [Table of all classes and arguments](#list-of-all-classes-and-arguments)\n    - [Beam](#beam)\n        - [Methods in Beam class](#methods)\n    - [Load](#load)\n    - [Point Load](#pointload)\n    - [Uniformly Distributed Load(UDL)](#udl)\n    - [Uniformly Varying Load(UVL)](#uvl)\n    - [Reaction](#reaction)\n    - [Point Moment](#pointmoment)\n    - [Hinge](#hinge)\n- [Examples](#examples)\n\n\n# Introduction\nA beam is a structural element that primarily resists loads applied laterally to the beam's axis (an element designed to carry primarily axial load would be a strut or column). Its mode of deflection is primarily by bending. The loads applied to the beam result in reaction forces at the beam's support points. The total effect of all the forces acting on the beam is to produce shear forces and bending moments within the beams, that in turn induce internal stresses, strains and deflections of the beam.\n*Source: [Wikipedia](https://en.wikipedia.org/wiki/Beam_(structure))*\n\n### About the module\n- **Module Version: 0.0.1**\n\nThis module is aimed to solve Statically Determinate, Geometrically Stable two dimensional Beam just by using 3 equations of static equilibrium.\n$F_x = 0, F_y = 0 \\text{ and } M_{point} = 0$.\n\nThis version of module supports:\n- determinate 2D beam with Point Loads, Uniformly Distributed Loads, Uniformly Varying Loads, Point Moments\n- Fixed or Hinged or Roller types of support conditions\n- A Beam with Internal Hinge\n- Bending Moment Diagram and Shear Force Diagram\n\n### Program Motivation\n> I studied about Beams first time in my second semester which had an included course of *Applied Mechanics - I (Statics)*. About 10-15 marks question were sure from beams and frames in board examination. But, while practicing beam analysis questions, from past question collection, one thing that collection was lacking was solution to those questions. Not even reaction values were given. So, it would cost us 15 minutes for even simple reaction calculation error. So, I thought of making this library from that period. And, I turned this thought into action in my 3rd semester's vacation.\n\n# Installation\n*TO be updated after completing uvl and graph portion and uploading to pypi*\n\n# Documentation\nVersion:  0.0.1\n\n### List of all classes and arguments\n| class | required arguments | optional arguments |\n| -- | -- | -- |\n| `Beam` | `length: float` | `E: float, I:float` |\n| `Load` | `pos: float, load: float` | `inverted:bool=False` |\n| `PointLoad` | `pos: float, load: float` | `inverted:bool = False, inclination:float=90` |\n| `UDL`|  `start: float, loadpm: float, span: float` | `inverted:bool = True` |\n| `UVL`| ` start: float, startload: float, span: float, endload: float` | `inverted: bool = True` |\n| `Reaction` | `pos: float, type: str, pos_sym: str` | none |\n| `PointMoment` | `pos: float, mom: float` | `ccw: bool = True` |\n| `Hinge` | `pos: float` | `side: str = 'l'` |\n\n\n# Beam:\n `Beam` is the main class to represent a beam object and perform various calculations.\n\n### Arguments \n\n`length(float)`: length of a beam\n\nHere are few optional keyword arguments\n- `E(float)` = Modulus of Elasticity of beam material \n- `I(float)` = 2nd moment of area of the cross section of beam\n\n### Methods\n\n|S.N | Method | Arguments | Description |\n|-- | -- | -- | -- |\n| 1. | `fast_solve`| `loads_list` | Pass list (or tuple) of all load, moment, reaction and hinge elements present in beam. $\\\\$ This method will: $\\\\$ 1. Calculate Reactions $\\\\$ 2. Generate Shear and Bending Moment Equation |\n|2.| `generate_graph` | `which:str = 'both'` | By default this generate will both Bending Moment Diagram(BMD) and Shear Force Diagram (SFD) stacked vertically. $\\\\$ To obtain seperate graphs change default value `which = 'both'` to `'sfd'` or `'bmd'` |\n|3. | `add_loads` | `load_list`| Pass list of force generating objects. This will add the net loads in x and y direction.$\\\\$ Possible loads are `(PointLoad, Reaction, UDL, UVL)` |\n| 4. | `add_moments` | `momgen_list` $\\\\$ **optional:** `about=0` | Pass in list of moment generating objects like `(PointLoad,Reaction, UDL, UVL, PointMoment)` $\\\\$ By default this function takes moment about origin. $\\\\$If you want to take moment about any other point, use Optional argument `about` and pass any x-coordinate value. |\n| 5. | `add_hinge` | `hinge, mom_gens` | This method must be used iff there is hinge object in beam. A hinge object and list(or tuple) of moment generating objects are expected arguments |\n| 6. | `calculate_reactions` | `reaction_list` | Pass in list(or tuple) of unknown reactions object to solve and assign reaction values |\n| 7. | `generate_shear_equation` | `loads` | Pass in list(or tuple) of load generators to generate shear equation |\n| 8. | `generate_moment_equation` | `loads` | Pass in list(or tuple) of load generators to generate moment equation |\n\n**Note**\n> Just first and second methods are sufficient to solve beam and generate graph. But, to keep track of ongoing process use other methods. *Remember not to use `fast_solve` and other methods(excluding method no. 2). Doing this will re-add all those loads you've passed again.*\n\n\n\n**Example**\n```\n# to create a beam of length 5m:\nb = Beam(5)\n```\n\n---\n\n# Load\n### Arguments:\n- `pos(float)`: position of that netload with respect to beam coordinates's origin\n- `load(float)`: net load of that load type(for point load that is point load value, \n                        but it will be different \n                        for other loads like uvl and udl)\n- `inverted(bool)=False`: Default direction of positive net load is in positive direction of y-axes\n    - by default: `inverted = False` (Positive Load)\n    - use `inverted=True` (indicates negative Load)\n\n# PointLoad\n### Description \nSubclass of class `Load`\n\n### Arguments\n- `pos, load, inverted`: inherit from super class `Load`\n- `inclination(float)=90`: `unit=degree` represents angle made by direction of net load with positive direction of beam's x axis\n    - inclination will be positive for counter clockwise direction\n    - put negative inclination if you want to take angle in clockwise direction\n\n### Attributes\n- `load_x`: component of net load value in positive direciton of beam's x-axis\n- `load_y`: component of net load value in positive y-direciton(upward direction)\n\n# UDL\nUDL(Uniformly Distributed Load) is type of load that is combinaiton of infinite points load over certain length acting transverse to beam\n### Arguments:\n- `start(float)`:Start position of UDL\n- `loadpm(float)`: Load Per meter of udl\n- `span(float)`: Total length of udl\n- `inverted(bool) = True`: UDL facing downwards on beam\n    - use `inverted=False` for upside udl\n### Attributes\n- `netload(float)`: total effective load of udl\n- `pos(float)`: position of effective load from - beam origin\n\n# UVL\nIt is that load whose magnitude varies along the loading length with a constant rate. \nUniformly varying load is further divided into two types:\n\n    1. Triangular Load\n    2. Trapezoidal Load\n\n### Arguments\n- `start:float` = Start position of uvl from beam's origin along x-axis of beam coordinate system\n- `startload:float` = `unit: kN/m` = Starting load/m value of uvl\n- `span:float` = Total length of uvl object\n- `endload:float` = Ending load/m value of uvl object\n- `inverted:bool= True` : Default=`True` Inverts the uvl object\n\n### Attributes\n- `end` = End coordinate of uvl object\n- `tload` = Net load value of upper triangular part of trapezoidal or triangular load\n- `rload` = Net load value of lower rectangular part of trapezoidal load itself\n- `netload` = Net load of whole uvl object itself. `netload = tload + rload`\n- `netpos` = Net position(coordinates) where net load of uvl acts\n \n# Reaction\nReactions are given by supports. 3 types of supports are defined for now: \n`hinge`, `roller` and `fixed` support.\n\n### Arguments\n- `pos(float)`: position of reaction\n- `type(str)`: any one of `('roller'`,`'hinge'`,`'fixed')` or `('r'`,`'h'`,`'f')` Representing support condition at that point.\n- `pos_sym(str)`: Symbolic variable to represent support location name \n\n### Attributes\n- `rx_val, ry_val, mom_val`: variables to store numerical values for reaction loads and moments\n- `rx_var, ry_var, mom_var`: symbolic variables to store symbolic values for reactions\n \n# PointMoment\nPure moment that act at point\n\n### Arguments\n- `pos` : location of that point moment from beam's origin\n- `mom` : value of that point moment\n- `ccw(bool) = False` : counterclockwise direciton is positive value of moment, \n    - by defalut: `ccw = False` and given moment is positive\n\n# Hinge\nInternal hinges are provided in a structure to reduce statical indeterminacy of the structure. \nBending moment at internal hinge is always zero. \nInternal hinge makes structure more flexible. \nIt allows structure to move which reduces the reactive stresses.\n\n### Arguments\n- `pos:float` = Position of that internal hinge from origin of beam coordinate system\n- `side:str = 'l'` : Accepted Values = `('r', 'right', 'l', 'left')`\n    - Default Value = `'l'`\n    - This side specifies which side of loads to take in order to take moment of that loads about hinge.\n\n\n# Examples\n### Example-1: Solving Simplest Beam\nThe simplest possible code to solve simply supported beam with pointload at middle of span.\n```\n# create a beam of length 5m\nb = Beam(5)\n\n# create reaction and pointload objects\nra = Reaction(0, 'r', 'A')\nrb = Reaction(b.length, 'h', 'B')\np = PointLoad(b.length/2, 10, inverted=True)\n\nb.fast_solve((ra, rb, p))\nb.generate_graph()\n\n```\n**Graph:**\n![SFD and BMD of simply supported beam with pointload at mid of span](readme_images/example_1.png)\n\n### Example-2: Cantilever beam with udl\n\n```\n\n# create a beam of length 5m\nb = Beam(5)\n\n# create reaction and udl object\nra = Reaction(0, 'f', 'A')\nudl = UDL(0, 5, 5)\n\nb.fast_solve((ra, udl))\nb.generate_graph()\n\n```\n**Graph:**\n![SFD and BMD of cantilever beam with udl](readme_images/example_2.png)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://www.ashimp.com.np/pybeam",
    "keywords": "beams,frames,structure,civil engineering,structural engineering,applied mechanics",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pibeam",
    "package_url": "https://pypi.org/project/pibeam/",
    "platform": null,
    "project_url": "https://pypi.org/project/pibeam/",
    "project_urls": {
      "Bug Reports": "https://github.com/Ashim-Paudel/Python-Beam-Analysis/issues",
      "Funding": "https://www.ashimp.com.np/pybeam",
      "Homepage": "https://www.ashimp.com.np/pybeam",
      "Say Thanks!": "http://ashimp.com.np/#contact",
      "Source": "https://github.com/Ashim-Paudel/Python-Beam-Analysis"
    },
    "release_url": "https://pypi.org/project/pibeam/0.0.1/",
    "requires_dist": [
      "numpy (>=1.19sympy>=1)",
      "matplotlib (>=3)"
    ],
    "requires_python": ">=3.4, <4",
    "summary": "A python module to solve and analyse determinate 2d Beams.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15575152,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "178a5b4114a167a3c4190049665c0caf2411cfad43775451589d1064eaf520bf",
          "md5": "f27b1d09410cc38761314592cb01c3c6",
          "sha256": "f2cd513b2cf127bd1373a358732a902d8d7d85d6b9e35d5685a198556931ebea"
        },
        "downloads": -1,
        "filename": "pibeam-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f27b1d09410cc38761314592cb01c3c6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4, <4",
        "size": 13120,
        "upload_time": "2022-10-28T17:36:43",
        "upload_time_iso_8601": "2022-10-28T17:36:43.043684Z",
        "url": "https://files.pythonhosted.org/packages/17/8a/5b4114a167a3c4190049665c0caf2411cfad43775451589d1064eaf520bf/pibeam-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c2a84da85cfded0643eb26775d9c5898674e9e66e220fab5e19bdb506352178",
          "md5": "204c6b97a21e1dc914ff139d45e6b983",
          "sha256": "071426575ad0471c82ad32fbc6f855cc000f314a37ee8798fdcac6e649def887"
        },
        "downloads": -1,
        "filename": "pibeam-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "204c6b97a21e1dc914ff139d45e6b983",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4, <4",
        "size": 16372,
        "upload_time": "2022-10-28T17:36:44",
        "upload_time_iso_8601": "2022-10-28T17:36:44.945304Z",
        "url": "https://files.pythonhosted.org/packages/6c/2a/84da85cfded0643eb26775d9c5898674e9e66e220fab5e19bdb506352178/pibeam-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "178a5b4114a167a3c4190049665c0caf2411cfad43775451589d1064eaf520bf",
        "md5": "f27b1d09410cc38761314592cb01c3c6",
        "sha256": "f2cd513b2cf127bd1373a358732a902d8d7d85d6b9e35d5685a198556931ebea"
      },
      "downloads": -1,
      "filename": "pibeam-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f27b1d09410cc38761314592cb01c3c6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4, <4",
      "size": 13120,
      "upload_time": "2022-10-28T17:36:43",
      "upload_time_iso_8601": "2022-10-28T17:36:43.043684Z",
      "url": "https://files.pythonhosted.org/packages/17/8a/5b4114a167a3c4190049665c0caf2411cfad43775451589d1064eaf520bf/pibeam-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c2a84da85cfded0643eb26775d9c5898674e9e66e220fab5e19bdb506352178",
        "md5": "204c6b97a21e1dc914ff139d45e6b983",
        "sha256": "071426575ad0471c82ad32fbc6f855cc000f314a37ee8798fdcac6e649def887"
      },
      "downloads": -1,
      "filename": "pibeam-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "204c6b97a21e1dc914ff139d45e6b983",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4, <4",
      "size": 16372,
      "upload_time": "2022-10-28T17:36:44",
      "upload_time_iso_8601": "2022-10-28T17:36:44.945304Z",
      "url": "https://files.pythonhosted.org/packages/6c/2a/84da85cfded0643eb26775d9c5898674e9e66e220fab5e19bdb506352178/pibeam-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}