{
  "info": {
    "author": "Sekgobela Kevin",
    "author_email": "kevinnoko23@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Security",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# broote\nBroote is general purpose python bruteforce library built on top of \n[perock](https://github.com/sekgobela-kevin/perock). It aims to make\nbruteforcing with python easier and more enjoyable with less code. Everything\nwill be handled internally with perock letting you focus on what matters.\n\nNo more long loops, managing threads or calculating cartesian product\nto generate bruteforce data. \nBroote does a good job in handling them without having to worry.  \n\nSteps for using broote library:\n- Define bruteforce data e.g passwords or usernames.\n- Specify target to bruteforce e.g url, webpage form or file with password.\n- Define how to interact/communicate with target(creates response).\n- Define what is considered success, failure or error based on response.\n- Start bruteforce and wait for results.\n \nBroote does not create passwords or usernames but they can be generated\nwith [brute](https://github.com/rdegges/brute).  \nSee [perock](https://github.com/sekgobela-kevin/perock) for little more \nabout broote library.\n\n> Dont expect broote to perform better than manually written code.\n\n\n### Install\nBroote can be installed with pip in your command-line application.\n```bash\npip install broote\n```\n\n### Usage\nBruteforce data in broote is represented with fields, records and table.  \n```python \nimport broote\n\n# Defines field to use with table to create records.\nusernames_field = broote.field(\"username\", [\"Ben\", \"Jackson\", \"Marry\"])\npasswords_field = broote.field(\"password\", range(10))\n\n# Table contains cartesian product of fields as records.\ntable = broote.table()\ntable.add_primary_field(usernames_field)\ntable.add_field(passwords_field)\n```\n> See [forcetable](https://github.com/sekgobela-kevin/forcetable) library for more about fields, records and table.  \n\nForcetable library was integrated into broote but can be used directly \nwithout problems. \n\nPrimary field is important for making bruteforce much faster. As above, \nusername is expected to be tried with password until there is success or run \nout of passwords.\n\n> Always provide primary field to improve performance.\n\n\nTarget in broote can be anything that points to the system to be \nbruteforced. That can be url to webpage, file path or any type of object. \nWhat matters is being able to use target to perform bruteforce.\n\nHere how we can connect/interact with target pointed by url and then\nreturn response.\n```python\nimport requests\n\ndef connector(target, record):\n    # target - url to webpage.\n    # record - Dict like object with data to pass to request\n    return requests.post(target, data=record)\n\ndef connector(target, record, session=None):\n    # Session may be valuable to make things faster or share data.\n    # session - optional session object.\n    if session:\n        return session.post(target, data=record)\n    else:\n        return requests.post(target, data=record)\n```\n\nLet define success and failure functions to define what is considered\nsuccessful or failed bruteforce attempt.\n```python\nimport requests\n\ndef success(response):\n    return b\"logged in as \" in response.content\n\ndef failure(response):\n    return b\"Username and password does not match\" in response.content\n```\n\nRunner is used to execute bruteforce and merge everything together. There\nare different runners, some of which are concurrent others running one \nafter the other.\n\n`thread_runner` is used to connect/log to website to make things faster \nby using threads.\n```python\nimport broote\nimport requests\n\n# Defines field to use with table to create records.\nusernames_field = broote.field(\"username\", [\"Ben\", \"Jackson\", \"Marry\"])\npasswords_field = broote.field(\"password\", range(10))\n\n# Table contains cartesian product of fields as records.\ntable = broote.table()\ntable.add_primary_field(usernames_field)\ntable.add_field(passwords_field)\n\n\ndef connector(target, record, session=None):\n    # target - url to webpage.\n    # record - Dict with data to pass to request.\n    # session - optional session object provided by runner.\n    return requests.post(target, data=record)\n\ndef success(response):\n    return b\"logged in as \" in response.content\n\ndef failure(response):\n    return b\"Username and password does not match\" in response.content\n\n\n# Creates runner executing in multiple threads.\ntarget = \"https://example.com/login\"\nrunner = broote.thread_runner(target, table, connector=connector,success=success, failure=failure)\n\n# Starts bruteforce into target as defined by connector().\nrunner.start()\nrunner.get_success_records() # [{'username': 'Marry', 'password': 8}]\n```\n> The url used '[https://example.com/login](https://example.com/login)' does \nnot exists.\n\n\nRunner is too strict when it comes to `target_reached()`, `success()`, \n`failure()` and `target_error()` functions.  \n\n#### Here is what they mean.\n```\nTarget reached - Determines if target was reached after connecting.\nSuccess - Determines if there was success.\n        - Target shoud be reached and no failure or error.\nFailure - Determines if attempt failed(e.g wrong password)\n\nTarget error - Determines if there was error after reaching target.  \n             - Target  needs to be reached as this error originates from \n               target.\nClient error - Determines if there was error before reaching target.   \n             - Target should not be reached and respose should be exception \n             object.\nError - Determines if there was error when connecting to target.  \n      - It should satisfy 'target error' and 'client error'.\n```\n\n\n> Response of `None` wont be allowed and exception object will be taken as \n`client error`.\n\n\nThis shows runner with more functions like `target_reached()` and \n`target_error()` which are also important.\n```python\ndef connector(target, record):\n    # Target - url to webpage.\n    # Record - Dict with data to pass to request.\n    return requests.post(target, data=record)\n\ndef target_reached(response):\n    return response.status_code == 200\n\ndef target_error(response):\n    return b\"denied\" in response.content\n\ndef success(response):\n    return b\"logged in as \" in response.content\n\ndef failure(response):\n    return b\"username and password does not match\" in response.content\n\n\n# Creates runner executing in multiple threads.\ntarget = \"https://example.com/login\"\nrunner = broote.thread_runner(\n    target, \n    table, \n    connector=connector,\n    target_reached=target_reached, \n    success=success, \n    failure=failure, \n    target_error=target_error\n)\n\n# Starts bruteforce into target as defined by connector().\nrunner.start()\nrunner.get_success_records() # [{'username': 'Marry', 'password': 8}]\n```\n\n\nThere are other arguments that can be passed to runner including session\nor setting maximum success record.\n\n```\noptimize: Bool - Enables optimisations, default True.\n               - It makes things faster(better leave it as True)\n\nsession: Callable | Any - Callable that creates session or any object\n                          to use as session.\n                        - If callable then it should be method or function.\n                        - It may sometimes be better to share certain\n                          object e.g session for web request.\n\n\n# broote.basic_runner does not support 'max_workers' argument.\nmax_workers: int - Sets maximum workers execute bruteforce, default=10.\n                 - Only supported by concurrent runners.\n\nmax_retries: int - Sets retries when target is not reached, default 1.\nmax_success_records: int - Maximum records to match, default None.\nmax_primary_success_records: int - Maximim records to match for each primary \n                                   field items.\nmax_success_primary_items: int - Maximum primary items with success records.\n\nmax_multiple_primary_items: int - Allows multiple primary items to be be \n                                  tried at same time.\n                                - Performs tricks on top of cartesian product\n                                  results.\n                                - That means multiple usernames tried at\n                                  same time.\n                                - If using using file field, ensure \n                                  'read_all' argument is enabled.\n\nexcluded_primary_items: Iterable - Primary items to be excluded.\n\ncomparer: Callable - Influences how arguments like 'success' gets\n                         intepreted against response.\n                       - It makes it possible to treat the as other objects\n                         other than just functions.\n                       - e.g lambda: value, response: value(response)\n\nafter_connect - Callable - Function called before connecting to target.\nafter_connect: Callable - Function called after connecting to target.\n                        - Great performing something after connecting to\n                          target including creating logs.\n                        - e.g lambda: record, response: success(respoce)\n\nresponse_closer: Callable - Function for closing response.\nsession_closer: Callable - Function for closing session.\n```\n\n\nThis simple code shows ways of using `comparer` and `after_attempt`\narguments of runner.\n```python\ndef connector(target, record):\n    return requests.post(target, data=record)\n\ndef comparer(value, response):\n    return value in response.content\n\ndef after_connect(record, response):\n    if b\"logged in as \" in response.content:\n        username = record.get_item(\"username\")\n        password = record.get_item(\"password\")\n        print(\"Logged in as '{}' with '{}'\".format(username, password))\n\n# Creates runner executing in multiple threads.\ntarget = \"https://example.com/login\"\nrunner = broote.thread_runner(\n    target, \n    table, \n    connector=connector,\n    target_reached=b\"example.com\", \n    success=b\"logged in as \", \n    failure=b\"username and password does not match\", \n    target_error=b\"denied\",\n    comparer=comparer\n)\n``` \n\n\nHere is another example not using requests library with response being\nstring created from record.\n```python\ndef success(response):\n    # Matches Username \"Ben\" and with password containing '1'\n    return \"Ben\" in response and \"1\" in response\n\ndef connector(target, record):\n    return \"Target is '{}', record is '{}'\".format(target, record)\n\ndef after(record, response):\n    if success(response):\n        print(\"Success:\", record)\n\nrunner = broote.basic_runner(\n    None, \n    table, \n    connector=connector,\n    success=success,\n    after_connect=after\n)\n```\n> `broote.basic_runner` is not concurrent(attempts wait for each other).\n\nAsyncio version is just similar to thread version but difference is that\nthe functions passed need to be awaitable.\n```python\nasync def success(response):\n    # Matches Username \"Ben\" and Password 1\n    return \"Ben\" in response and \"1\" in response\n\nasync def connector(target, record):\n    return \"Target is '{}', record is '{}'\".format(target, record)\n\n\nrunner = broote.async_runner(\n    None, \n    table, \n    connector=connector,\n    success=success,\n    max_workers=400\n)\n\n# Async runner can be started just like thread runner.\nrunner.start()\n# runner.astart() is awaitable as compared to runner.start().\nasyncio.run(runner.astart())\n```\n\n\nBroote has capability to execute multiple runners using multi runners.  \n\nThat allows multiple different runners to be executed at the same time no\nmatter the type of runner.\n\nEach multi runner may do things differenly than others.\n`multi_async_runner` will execute runners using asyncio or different \nasync thread if runner is not async.\n```python\nimport broote\n\nasync_runner = broote.async_runner(...)\nthread_runner = broote.basic_runner(...)\n\nmulti_runner = multi_async_runner([async_runner, thread_runner])\nmulti_runner.start()\n```\nType of runner does not matter to multi runners. `multi_basic_runner`\ncan execute `thread_runner` or `async_runner` without problems. Multi\nrunner can also be used with other multi runner just like regular runner.\n\nMulti runner is not runner and may not contain some features of \nordinary runner.\n\n> Remember that each runner runs independent of the others.\n\n\n### Influenced by:\n- [perock](https://github.com/sekgobela-kevin/perock)\n- [forcetable](https://github.com/sekgobela-kevin/forcetable)\n\n### Similar to broote\n- [instaBrute](https://github.com/chinoogawa/instaBrute)\n- [Brute_Force](https://github.com/Matrix07ksa/Brute_Force)\n- [Instagram Bruter](https://github.com/Bitwise-01/Instagram-)\n- [python-bruteForce](https://github.com/Antu7/python-bruteForce)\n- [Multi-Threaded-BruteForcer](https://github.com/nasbench/Multi-Threaded-BruteForcer)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sekgobela-kevin/broote",
    "keywords": "security,bruteforce,hacking,testing",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "broote",
    "package_url": "https://pypi.org/project/broote/",
    "platform": null,
    "project_url": "https://pypi.org/project/broote/",
    "project_urls": {
      "Bug Tracker": "https://github.com/sekgobela-kevin/broote/issues",
      "Homepage": "https://github.com/sekgobela-kevin/broote"
    },
    "release_url": "https://pypi.org/project/broote/0.6.1/",
    "requires_dist": [
      "forcetable (<0.1.0,>=0.0.4)",
      "perock (<0.3.0,>=0.1.0)"
    ],
    "requires_python": ">=3.6",
    "summary": "General purpose python bruteforce library built on top of perock",
    "version": "0.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15593747,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2fc51686a52b2e13329f0dbe2742764c74120e52b63e846e772d2c6b47e3211d",
          "md5": "5ea2411b083a679dd123ac60a1ba2b3d",
          "sha256": "a3b2e0d89191d22f93aaf84bccc2b646a06ffae6d6452d7c39678197587cb009"
        },
        "downloads": -1,
        "filename": "broote-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ea2411b083a679dd123ac60a1ba2b3d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14014,
        "upload_time": "2022-10-10T05:57:13",
        "upload_time_iso_8601": "2022-10-10T05:57:13.207476Z",
        "url": "https://files.pythonhosted.org/packages/2f/c5/1686a52b2e13329f0dbe2742764c74120e52b63e846e772d2c6b47e3211d/broote-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5d9631c0d3efde85c74557ba284019fc17cd089c160cd36c4fc13f53b28e571",
          "md5": "20949ede32b2577dd49f804e759b5c23",
          "sha256": "2e932e6678bd586bb3dd1d5dd24dfa1316f8a85127966ecb2916c28cc0700248"
        },
        "downloads": -1,
        "filename": "broote-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "20949ede32b2577dd49f804e759b5c23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14043,
        "upload_time": "2022-10-10T05:57:15",
        "upload_time_iso_8601": "2022-10-10T05:57:15.145823Z",
        "url": "https://files.pythonhosted.org/packages/c5/d9/631c0d3efde85c74557ba284019fc17cd089c160cd36c4fc13f53b28e571/broote-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4564ed1e37def8c0ec1bc94fb5defa14f512efd3187b13157bfc79706c16a723",
          "md5": "ef0d59c9041af33bf2285d10e0f51af1",
          "sha256": "e24078ac86b4849ff999dcb98e284e298243b6d2aeb129591eb25fb2c7b1698a"
        },
        "downloads": -1,
        "filename": "broote-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef0d59c9041af33bf2285d10e0f51af1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21291,
        "upload_time": "2022-10-12T06:57:16",
        "upload_time_iso_8601": "2022-10-12T06:57:16.369775Z",
        "url": "https://files.pythonhosted.org/packages/45/64/ed1e37def8c0ec1bc94fb5defa14f512efd3187b13157bfc79706c16a723/broote-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "384f61172bbf2a1b835c954878916cc151d345db4b6030d9a73e995f2282ec11",
          "md5": "c3eff99454c1d8166bdd8b4b455057ef",
          "sha256": "d02bf3a7d1527722a042acf4cac17878f3866b470df8a2789b1c0cdb44acbc0f"
        },
        "downloads": -1,
        "filename": "broote-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c3eff99454c1d8166bdd8b4b455057ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24012,
        "upload_time": "2022-10-12T06:57:18",
        "upload_time_iso_8601": "2022-10-12T06:57:18.214727Z",
        "url": "https://files.pythonhosted.org/packages/38/4f/61172bbf2a1b835c954878916cc151d345db4b6030d9a73e995f2282ec11/broote-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a7ada72cd545fed6c61ff6758cef6563d43e3ed9a88f9e7b24c03ffca0adf59d",
          "md5": "06f37564c680852fb0d11b5ad031e02b",
          "sha256": "5ba8c90a06f0921e0e248bd4831122780d90cbd528d1b50860acd1158b1d4ae8"
        },
        "downloads": -1,
        "filename": "broote-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "06f37564c680852fb0d11b5ad031e02b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21338,
        "upload_time": "2022-10-15T19:54:22",
        "upload_time_iso_8601": "2022-10-15T19:54:22.071719Z",
        "url": "https://files.pythonhosted.org/packages/a7/ad/a72cd545fed6c61ff6758cef6563d43e3ed9a88f9e7b24c03ffca0adf59d/broote-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "42d6051b27c545437178512d86c158166d6577cc9fc293283c17c2192fdf7a49",
          "md5": "2d1a689f512213de146762f3309ac33f",
          "sha256": "870f0aa47a456cbc3d550e07d0a8cd9cc43efadfc852f4d8d3031a751fcf65f3"
        },
        "downloads": -1,
        "filename": "broote-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2d1a689f512213de146762f3309ac33f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24022,
        "upload_time": "2022-10-15T19:54:25",
        "upload_time_iso_8601": "2022-10-15T19:54:25.729208Z",
        "url": "https://files.pythonhosted.org/packages/42/d6/051b27c545437178512d86c158166d6577cc9fc293283c17c2192fdf7a49/broote-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5e0ef66a69219b897a03cf83c40ff79ce09e43b61e3b8d1ce311e0fb0a9c045",
          "md5": "bf1c56d45611e35b4c6c16ae0fa1d63d",
          "sha256": "260195362f17c1702def9f43d67949f53ac8c95de3a5adb5833e4aa9f9249ac0"
        },
        "downloads": -1,
        "filename": "broote-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf1c56d45611e35b4c6c16ae0fa1d63d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 22051,
        "upload_time": "2022-10-19T16:04:18",
        "upload_time_iso_8601": "2022-10-19T16:04:18.044269Z",
        "url": "https://files.pythonhosted.org/packages/c5/e0/ef66a69219b897a03cf83c40ff79ce09e43b61e3b8d1ce311e0fb0a9c045/broote-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3cc2c82eed669795098788a2a50ecb068043f60e366b4adc01228e1c5819b148",
          "md5": "dcd5d4a15285a6e6e52a32bda0f12125",
          "sha256": "56bf2a1b7d906cd4314120f3810219c0fe42863f1cfef721cf66b77f78093de2"
        },
        "downloads": -1,
        "filename": "broote-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dcd5d4a15285a6e6e52a32bda0f12125",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24697,
        "upload_time": "2022-10-19T16:04:21",
        "upload_time_iso_8601": "2022-10-19T16:04:21.150715Z",
        "url": "https://files.pythonhosted.org/packages/3c/c2/c82eed669795098788a2a50ecb068043f60e366b4adc01228e1c5819b148/broote-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dd9b37596284ae00fe42e69b6aa02f539eb5d58cfc89ceb63d335a8e256c80e0",
          "md5": "7f0a64350626bb3bcb4172fd2b7ea82e",
          "sha256": "5b93fce745157e6b35f6d610699fffe792e570d3fd25a53e606522ac09d92be2"
        },
        "downloads": -1,
        "filename": "broote-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f0a64350626bb3bcb4172fd2b7ea82e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23450,
        "upload_time": "2022-10-20T08:43:56",
        "upload_time_iso_8601": "2022-10-20T08:43:56.865804Z",
        "url": "https://files.pythonhosted.org/packages/dd/9b/37596284ae00fe42e69b6aa02f539eb5d58cfc89ceb63d335a8e256c80e0/broote-0.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e2d6a32bea5feb811b92ea4149227efcaf2e8dc3ef33043a00304f811b4875a8",
          "md5": "cba90799d1c41c022ccf3d74cae6cd43",
          "sha256": "bd86f3be56520af819207b3e157bf7596d47a9c5631c080d4c251c62a2d094df"
        },
        "downloads": -1,
        "filename": "broote-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cba90799d1c41c022ccf3d74cae6cd43",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25905,
        "upload_time": "2022-10-20T08:43:58",
        "upload_time_iso_8601": "2022-10-20T08:43:58.603453Z",
        "url": "https://files.pythonhosted.org/packages/e2/d6/a32bea5feb811b92ea4149227efcaf2e8dc3ef33043a00304f811b4875a8/broote-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba4503df9c4ffca72ec4b54cd08484e593fb33a1786dc72cfc8e60e61618ea48",
          "md5": "f5b12c3468146f4281f0b71226fe6c59",
          "sha256": "3c8f4800656163e6597465a1ecb2b6b991db0f853c90318ca5d60be0ace096e3"
        },
        "downloads": -1,
        "filename": "broote-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5b12c3468146f4281f0b71226fe6c59",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23453,
        "upload_time": "2022-10-20T15:09:49",
        "upload_time_iso_8601": "2022-10-20T15:09:49.934547Z",
        "url": "https://files.pythonhosted.org/packages/ba/45/03df9c4ffca72ec4b54cd08484e593fb33a1786dc72cfc8e60e61618ea48/broote-0.3.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7a3578b42fda895312e0e80e5f5778a40141d2ad4dccdbdca15aff0d5d82857",
          "md5": "2ce44b15e4f665855429b8629ef3cfd0",
          "sha256": "e3d72d50c588d78ae361cd058b8a5874e8e6ab4b2c9cefbda7b2abc69cc1e333"
        },
        "downloads": -1,
        "filename": "broote-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2ce44b15e4f665855429b8629ef3cfd0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25889,
        "upload_time": "2022-10-20T15:09:52",
        "upload_time_iso_8601": "2022-10-20T15:09:52.155963Z",
        "url": "https://files.pythonhosted.org/packages/c7/a3/578b42fda895312e0e80e5f5778a40141d2ad4dccdbdca15aff0d5d82857/broote-0.3.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32d1e7778db7731675b61b83e32f57ecbcc01dab688ea19d7e42f58b38a0c54d",
          "md5": "111197f4f406dbec8e75d6b13676fc6f",
          "sha256": "e93cc0f17b365db530b06b57e9337872411d4036d358e0d8914b917c9fb38aad"
        },
        "downloads": -1,
        "filename": "broote-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "111197f4f406dbec8e75d6b13676fc6f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23448,
        "upload_time": "2022-10-20T16:10:19",
        "upload_time_iso_8601": "2022-10-20T16:10:19.968462Z",
        "url": "https://files.pythonhosted.org/packages/32/d1/e7778db7731675b61b83e32f57ecbcc01dab688ea19d7e42f58b38a0c54d/broote-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca72590b3782d00be18d794658655ef705bccc15047957cba38e5d126f3b9311",
          "md5": "ea23c268b814f7f1032744045554b8aa",
          "sha256": "a27defcca2efe35c7e4ff6ff464c53639e643c920e052bdb6dbf06e231b762d1"
        },
        "downloads": -1,
        "filename": "broote-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ea23c268b814f7f1032744045554b8aa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 25921,
        "upload_time": "2022-10-20T16:10:22",
        "upload_time_iso_8601": "2022-10-20T16:10:22.569446Z",
        "url": "https://files.pythonhosted.org/packages/ca/72/590b3782d00be18d794658655ef705bccc15047957cba38e5d126f3b9311/broote-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "48c84c6097c7aa7c429596acdf45dcf8fb5cee7bcf049009cd01c377cc04b378",
          "md5": "b88df1172ab8204fe0695d1a21475bc1",
          "sha256": "2f25fdcd3b0a54d5849fd5f0e33b9aecb7108ed96aa2255cbfe9975cdbff51ab"
        },
        "downloads": -1,
        "filename": "broote-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b88df1172ab8204fe0695d1a21475bc1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23846,
        "upload_time": "2022-10-23T20:18:28",
        "upload_time_iso_8601": "2022-10-23T20:18:28.457119Z",
        "url": "https://files.pythonhosted.org/packages/48/c8/4c6097c7aa7c429596acdf45dcf8fb5cee7bcf049009cd01c377cc04b378/broote-0.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bba294cda593fccda4f33b39dbaf517a4cdd1e91d5a64543e363a5ad33badbfd",
          "md5": "b857de1bdc68901aa464549f068c05a4",
          "sha256": "738fd1060720d8b465c498b4764bc6b07916b98c83b6757c8783df5d46e8231e"
        },
        "downloads": -1,
        "filename": "broote-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b857de1bdc68901aa464549f068c05a4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26126,
        "upload_time": "2022-10-23T20:18:30",
        "upload_time_iso_8601": "2022-10-23T20:18:30.627439Z",
        "url": "https://files.pythonhosted.org/packages/bb/a2/94cda593fccda4f33b39dbaf517a4cdd1e91d5a64543e363a5ad33badbfd/broote-0.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4eb30fb0d2bd3a988b4bd671d6419ec27eaab86a4c478e5ff96fd1908b8b8089",
          "md5": "5347b0e06c0048ebf24282139c93e263",
          "sha256": "93ef941ee9a10161f58c1b6d491500cbdad08f713f7dc5810873f1a9baeae129"
        },
        "downloads": -1,
        "filename": "broote-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5347b0e06c0048ebf24282139c93e263",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23884,
        "upload_time": "2022-10-24T18:22:42",
        "upload_time_iso_8601": "2022-10-24T18:22:42.137907Z",
        "url": "https://files.pythonhosted.org/packages/4e/b3/0fb0d2bd3a988b4bd671d6419ec27eaab86a4c478e5ff96fd1908b8b8089/broote-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2bec20e7f859c2baecad7f5cb13e4153ac0e1eed22635a89e71b8a1a049302ed",
          "md5": "d335297e324b858ea1b01cd5450480ba",
          "sha256": "852ae787028d8cbd1563e8b12fde4327fa0a875e5bf5486ea31809e68bcb0ac1"
        },
        "downloads": -1,
        "filename": "broote-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d335297e324b858ea1b01cd5450480ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26166,
        "upload_time": "2022-10-24T18:23:00",
        "upload_time_iso_8601": "2022-10-24T18:23:00.044919Z",
        "url": "https://files.pythonhosted.org/packages/2b/ec/20e7f859c2baecad7f5cb13e4153ac0e1eed22635a89e71b8a1a049302ed/broote-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea76ea2caba51b6a0bbf776440640331293a02f0ff7815d4ef4d6c77cc4d02b6",
          "md5": "f9f2067285e69a92edbd2e008a46f1a5",
          "sha256": "f358933687e61c8899e13fe80f9501cc0eea78829f2269b8e207498935a8ecac"
        },
        "downloads": -1,
        "filename": "broote-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9f2067285e69a92edbd2e008a46f1a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23882,
        "upload_time": "2022-10-24T19:59:05",
        "upload_time_iso_8601": "2022-10-24T19:59:05.994777Z",
        "url": "https://files.pythonhosted.org/packages/ea/76/ea2caba51b6a0bbf776440640331293a02f0ff7815d4ef4d6c77cc4d02b6/broote-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4af69096a3250c0274770670ab22be511e13dfb4d1271ad10e68dae04c3287f5",
          "md5": "1e990146ff25a8e78c24bb633a9e0d91",
          "sha256": "57b859f3d7e2c0fd2b6814e5e535436f06a3c05c5c95475d0eaeed735218ac1e"
        },
        "downloads": -1,
        "filename": "broote-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1e990146ff25a8e78c24bb633a9e0d91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 26129,
        "upload_time": "2022-10-24T19:59:10",
        "upload_time_iso_8601": "2022-10-24T19:59:10.866940Z",
        "url": "https://files.pythonhosted.org/packages/4a/f6/9096a3250c0274770670ab22be511e13dfb4d1271ad10e68dae04c3287f5/broote-0.6.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f72aa48e3a040ec77ca15b0e4c3232123f9112f08588e4b9b3e3d5b01a79c62",
          "md5": "875bfef2eafd598321f736b0c54a4465",
          "sha256": "e013b976c8bc86d1ea09ce72f33387d1e9534c7f075105684ac34b8139b1c878"
        },
        "downloads": -1,
        "filename": "broote-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "875bfef2eafd598321f736b0c54a4465",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23846,
        "upload_time": "2022-10-31T09:09:10",
        "upload_time_iso_8601": "2022-10-31T09:09:10.703325Z",
        "url": "https://files.pythonhosted.org/packages/3f/72/aa48e3a040ec77ca15b0e4c3232123f9112f08588e4b9b3e3d5b01a79c62/broote-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6a228119d1f045d8c841a8fe5439a7f2efef93d7ed8380fbf290bb9e2b7dba89",
          "md5": "275323e47624fb5864d441845f898e32",
          "sha256": "aefab31f233ce1c1fadbdc145f9be422bfe94b2886a8f9037c3f13599fc52053"
        },
        "downloads": -1,
        "filename": "broote-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "275323e47624fb5864d441845f898e32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 27456,
        "upload_time": "2022-10-31T09:09:14",
        "upload_time_iso_8601": "2022-10-31T09:09:14.488474Z",
        "url": "https://files.pythonhosted.org/packages/6a/22/8119d1f045d8c841a8fe5439a7f2efef93d7ed8380fbf290bb9e2b7dba89/broote-0.6.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3f72aa48e3a040ec77ca15b0e4c3232123f9112f08588e4b9b3e3d5b01a79c62",
        "md5": "875bfef2eafd598321f736b0c54a4465",
        "sha256": "e013b976c8bc86d1ea09ce72f33387d1e9534c7f075105684ac34b8139b1c878"
      },
      "downloads": -1,
      "filename": "broote-0.6.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "875bfef2eafd598321f736b0c54a4465",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 23846,
      "upload_time": "2022-10-31T09:09:10",
      "upload_time_iso_8601": "2022-10-31T09:09:10.703325Z",
      "url": "https://files.pythonhosted.org/packages/3f/72/aa48e3a040ec77ca15b0e4c3232123f9112f08588e4b9b3e3d5b01a79c62/broote-0.6.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6a228119d1f045d8c841a8fe5439a7f2efef93d7ed8380fbf290bb9e2b7dba89",
        "md5": "275323e47624fb5864d441845f898e32",
        "sha256": "aefab31f233ce1c1fadbdc145f9be422bfe94b2886a8f9037c3f13599fc52053"
      },
      "downloads": -1,
      "filename": "broote-0.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "275323e47624fb5864d441845f898e32",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 27456,
      "upload_time": "2022-10-31T09:09:14",
      "upload_time_iso_8601": "2022-10-31T09:09:14.488474Z",
      "url": "https://files.pythonhosted.org/packages/6a/22/8119d1f045d8c841a8fe5439a7f2efef93d7ed8380fbf290bb9e2b7dba89/broote-0.6.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}