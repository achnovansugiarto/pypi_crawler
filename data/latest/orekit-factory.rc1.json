{
  "info": {
    "author": "",
    "author_email": "Joe Reed <greyskyy@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Environment :: Plugins",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.12",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Orekit-factory\n\nA collection of utilities to bootstrap an orekit-based python application.\n\n## Installation\n\n```sh\n$ pip install orekit-factory\n```\n\n## Usage\n\nThe utilities provided by the `orekitfactory` module can be broken out into the categories below.  See the python docs for complete details.\n\n### Application initialization\n\nThe `orekitfactory.init_orekit()` method reduces the boilerplate for starting python-based orekit applications. It performs the following steps, then returns a handle to the orekit VM:\n\n1. Downloads the default orekit data zip to a data directory. Note the option to re-download the file, if it exists, or simply use the cached version.\n2. Setup the data context using that default data zip.\n\nA basic example:\n\n```python\nimport orekit\nimport orekitfactory\n\nvm = orekit.initVM()\norekitfactory.init_orekit()\n```\n\n### Enumeration utilties\n\n`orekitfactory.to_iers_conventions()` - Convert a string to the `IERSConventions` orekit enumeration.\n\n```python\nimport orekitfactory\n\niers_conventions = orekitfactory.to_iers_conventions(\"iers_2010\")\n```\n\n### Date utilities\n\nMultiple date utilities improve application's abilities to use AbsoluteDate.\n\n`orekitfactory.to_absolute_date()` - Converts an ISO-8601 string or a `datetime` instance into an `AbsoluteDate` instance based on UTC. The data context and time scale can be provided via optional parameters. This method is a no-op if an `AbsoluteDate` instance is provided.\n\n`orekitfactory.DateInterval` - This class provides an interval of `AbsoluteDate` and provides the standard interval operations like *duration*, *comparison*, *overlap*, and *intersection*.\n\n`orekitfactory.DateIntervalList` - A list of non-overlapping `DateInterval` instances. Provides set operations like *union*, *intersection*, and *subtraction*.\n\n`orekitfactory.DateIntervalListBuilder` - A utility class useful when incrementally building up a `DateIntervalList`.\n\n```python\nimport orekitfactory\n\ndate1 = orekitfactory.to_absolute_date(\"2022-08-28T13:15:00Z\")\ndate2 = orekitfactory.to_absolute_date(\"2022-08-28T13:16:00Z\")\ndate3 = orekitfactory.to_absolute_date(\"2022-08-28T13:17:00Z\")\ndate4 = orekitfactory.to_absolute_date(\"2022-08-28T13:18:00Z\")\n\nivl1 = orekitfactory.DateInterval(date1, date3)\nivl2 = orekitfactory.DateInterval(date2, date4)\nivl3 = orekitfactory.DateInterval(date1, date2)\n\ndlist = orekitfactory.DateInteralList(intervals=[ivl1, ivl2, ivl3])\n\nassert 2 == len(dlist)\nprint(dlist)\n\ndlist2 = orekitfactory.DateIntervalList(interval=DateInterval(date1, date5)).subtract(dlist)\n\nprint(dlist2)\n```\n\n### Frames and reference ellipsoids\n\n`orekitfactory.get_reference_ellipsoid()` - A utility function for loading `ReferenceEllipsoid` instances from summary strings.\n\n`orekitfactory.get_frame()` - A utility function for loading `Frame` instances based on shortened summary names, or predefined builtins.\n\n```python\nimport orekitfactory\n\nitrf = orekitfactory.get_frame(\"itrf\")\nwgs84 = orekitfactory.get_reference_ellipsoid(\"wgs84\", frame=itrf)\n\n# an alternate calls\nwgs84 = orekitfactory.get_reference_ellipsoid(\"wgs84\", frame=\"itrf\")\nwgs84 = orekitfactory.get_reference_ellipsoid(\"wgs84\", frameName=\"itrf\")\n```\n\n### Orbit definitions and propagators\n\n`orekitfactory.check_tle()` - Checks the two lines of a TLE for valid format.\n\n`orekitfactory.to_tle()` - Constructs an orekit `TLE` instance using the provided UTC time scale, or loading one from the default data context.\n\n`orekitfactory.to_orbit()` - Constructs a `KeplerianOrbit` instance from the provided parameters.\n\n`orekitfactory.to_propgator()` - Construct a propagator (`SGP4` or `SDP4` as appropriate for a TLE, or a `NumericalPropagator` for keplerian orbits) from the provided orbit.\n\n```python\nimport orekitfactory\n\nassert orekitfactory.check_tle(\n    \"1 49260U 21088A   22166.94778099  .00000339  00000+0  85254-4 0  9992\",\n    \"2 49260  98.2276 237.1831 0001142  78.2478 281.8849 14.57099002 38060\"\n)\n\ntle = orekitfactory.to_tle(\n    \"1 49260U 21088A   22166.94778099  .00000339  00000+0  85254-4 0  9992\",\n    \"2 49260  98.2276 237.1831 0001142  78.2478 281.8849 14.57099002 38060\"\n)\n\norbit = orekitfactory.to_orbit(\n    a=\"7080 km\",\n    e=0.0008685,\n    i=85,\n    omega=u.Quantity(\"261.9642 deg\"),\n    w=\"257.7333 deg\",\n    epoch=\"2022-06-16T17:54:00Z\",\n    v=1.2,\n)\n\nsgp4 = to_propagator(tle)\nprop = to_propagator(orbit)\n```\n\n### Vectors and Rotations\n\n`orekitfactory.to_vector()` - Simplifies the creation of `Vector3D` instances, avoiding the `InvalidArgument` errors caused by passing `int` instead of `float` to the `Vector3D` constructor.\n\n`orekitfactory.to_rotation()` - Creates a `Rotation` using the provided axis defintions.\n\n```python\nimport orekitfactory\n\nnew_x = orekitfactory.to_vector(1, 2, 3).normalize()\nnew_y = new_x.crossProduct(Vector3D.PLUS_K)\n\ntx = orekitfactory.to_rotation(x=new_x, y=new_y)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License Copyright (c) 2022 Joe Reed Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "orekit-factory",
    "package_url": "https://pypi.org/project/orekit-factory/",
    "platform": null,
    "project_url": "https://pypi.org/project/orekit-factory/",
    "project_urls": {
      "homepage": "https://github.com/greyskyy/orekit-factory",
      "repository": "https://github.com/greyskyy/orekit-factory"
    },
    "release_url": "https://pypi.org/project/orekit-factory/0.2.0/",
    "requires_dist": [
      "astropy (>=5.1)",
      "requests (>=2.28.1)",
      "orekit (>=11.2)"
    ],
    "requires_python": ">=3.9",
    "summary": "A collection of factory methods to bootstrap orekit python applications.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15504298,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ef28bd6ee08483102827474faceb6c282f0997a0de239d11c556450c12d51ae",
          "md5": "cfbab490955359d83d2367fa8039c3ee",
          "sha256": "4c7417ece09d790bb2a4f1adbb749e0ac48338cdfc5bad2448f21211fd8de855"
        },
        "downloads": -1,
        "filename": "orekit_factory-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cfbab490955359d83d2367fa8039c3ee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 26034,
        "upload_time": "2022-10-24T00:15:31",
        "upload_time_iso_8601": "2022-10-24T00:15:31.959164Z",
        "url": "https://files.pythonhosted.org/packages/3e/f2/8bd6ee08483102827474faceb6c282f0997a0de239d11c556450c12d51ae/orekit_factory-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e5f776228c2e439296db32a3acb605f4f44b897b3ce8c9702d6bb24c93718bb",
          "md5": "3ad91b648c396d8eac51cdc95f569eb5",
          "sha256": "e9916b61055954e6d9f66835a4057d5511f6ad5ecd6201dd2872794a4530bae8"
        },
        "downloads": -1,
        "filename": "orekit-factory-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3ad91b648c396d8eac51cdc95f569eb5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 990929,
        "upload_time": "2022-10-24T00:15:34",
        "upload_time_iso_8601": "2022-10-24T00:15:34.267455Z",
        "url": "https://files.pythonhosted.org/packages/2e/5f/776228c2e439296db32a3acb605f4f44b897b3ce8c9702d6bb24c93718bb/orekit-factory-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ef28bd6ee08483102827474faceb6c282f0997a0de239d11c556450c12d51ae",
        "md5": "cfbab490955359d83d2367fa8039c3ee",
        "sha256": "4c7417ece09d790bb2a4f1adbb749e0ac48338cdfc5bad2448f21211fd8de855"
      },
      "downloads": -1,
      "filename": "orekit_factory-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cfbab490955359d83d2367fa8039c3ee",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 26034,
      "upload_time": "2022-10-24T00:15:31",
      "upload_time_iso_8601": "2022-10-24T00:15:31.959164Z",
      "url": "https://files.pythonhosted.org/packages/3e/f2/8bd6ee08483102827474faceb6c282f0997a0de239d11c556450c12d51ae/orekit_factory-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2e5f776228c2e439296db32a3acb605f4f44b897b3ce8c9702d6bb24c93718bb",
        "md5": "3ad91b648c396d8eac51cdc95f569eb5",
        "sha256": "e9916b61055954e6d9f66835a4057d5511f6ad5ecd6201dd2872794a4530bae8"
      },
      "downloads": -1,
      "filename": "orekit-factory-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3ad91b648c396d8eac51cdc95f569eb5",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 990929,
      "upload_time": "2022-10-24T00:15:34",
      "upload_time_iso_8601": "2022-10-24T00:15:34.267455Z",
      "url": "https://files.pythonhosted.org/packages/2e/5f/776228c2e439296db32a3acb605f4f44b897b3ce8c9702d6bb24c93718bb/orekit-factory-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}