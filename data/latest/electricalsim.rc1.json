{
  "info": {
    "author": "",
    "author_email": "\"PhD Ariel S. Loyarte\" <aloyarte@frsf.utn.edu.ar>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Electrical Grid Simulator (EGS)\nThe *Electrical Grid Simulator* (abbreviated as **EGS**) is a graphical user interface application for simulating electrical networks based on the [pandapower](https://www.pandapower.org/) library. The main objective is to allow the creation of mathematical models for steady-state electrical grids from a user-friendly interface.\n\nEGS is developed at the *National Technological University, Santa Fe Regional Faculty* ([UTN-FRSF](https://www.frsf.utn.edu.ar/)), at the *Center for Research and Development in Electrical Engineering and Energy Systems* ([CIESE](https://www.frsf.utn.edu.ar/investigacion-y-vinculacion/investigacion-y-vinculacion/centros-y-grupos/ciese)), Argentina.\n\n> __Warning__ <br>\n> <span style=\"color:red\">\n<b>This application is considered in alpha stage. So you can expect incomplete sections and some (or many) bugs. New changes may cause incompatibilities with older versions (old files that no longer work with newer versions of the program).</b>\n</span>\n\n## Goals\n- Providing a minimalistic, modern and good-looking interface.\n- Multiplatform: GNU/Linux, MS Windows and Apple MacOS (not tested on MacOS).\n- Providing an extension system to expand its capabilities **(WIP, not available yet)**.\n\n## How it is built\nEGS is built in Python and entirely from open source and free software. The main core components are:\n\n* The [Qt](https://www.qt.io/) toolkit with [PySide2](https://wiki.qt.io/Qt_for_Python) and [Qt.py](https://github.com/mottosso/Qt.py) bindings for the UI.\n* The [NodeGraphQt](https://github.com/jchanvfx/NodeGraphQt) library for building the graph (schematic network graphic).\n* The [PyQtDarkTheme](https://github.com/5yutan5/PyQtDarkTheme) package for applying modern themes (light and dark themes).\n* The [QtAwesome](https://github.com/spyder-ide/qtawesome) package for modern flat monochromatic icons.\n* The [matplotlib](https://matplotlib.org/) package for plotting calculation results.\n* Other scientific Python packages, mainly [NumPy](https://numpy.org/) and [pandas](https://pandas.pydata.org/).\n\nEGS is implemented as a Python package uploaded to the [PyPI repository](https://pypi.org/). ```pandapower``` and other packages listed above are set as dependencies.\n\n> __Note__ <br>\n> The ```NodeGraphQt``` is not available in PyPI. Hence, a copy of it is included within the EGS package.\n\n\n## How it works\nEvery time the user inserts and connects an element to the grid, the application replicates the addition in a ```pandapower``` network. Thus, the parameters of a component are updated in the ```pandapower``` network when they are modified from the graphical interface.\n\nThe network configured from the interface is designated as **Graph**, while the corresponding ```pandapower``` model is denoted as **Data model**. This synchronization works in the **Graph -> Data model** direction, i.e. changes in the **Graph** are automatically registered into the **Data model**, and not the other way around. However, the contents of the **Data model** can be consulted at any time. \n\nAccording to the structure proposed by the ```pandapower``` library, the **Data model** consists of a set of tables ([pandas DataFrame type objects](https://en.wikipedia.org/wiki/Pandas_(software))). Each table (**DataFrame**) contains the parameters of a certain type of component. The types of components supported by ```pandapower``` are those indicated in [this documentation link](https://pandapower.readthedocs.io/en/latest/elements.html). At this moment, most of these components are also supported by EGS.\n\nThe EGS main window is organized as follows:\n\n*  The main work area can display either the **Graph** or the **Data model**. The **Data model** is shown as a set of tables arranged in tabs. For more information about this data (including the meaning of column names), see the [pandapower documentation](https://pandapower.readthedocs.io/).\n* The side toolbar lists the supported components. An element is added to the **Graph** by clicking on the corresponding icon. In some cases, an icon may represent a category (e.g., loads).  In such cases, a dialog allows you to choose the required type within that category. For example, in the loads category, six different types are available.\nSwitches work in a different way. According to ```pandapower```, switches can be added between two buses or between a bus and a line (AC line) or transformer. Thus, if you want to do the first, just select two buses and then click the switch button. On the contrary, if you want to add a switch next to a line (or transformer), select only the corresponding element and then click the switch button. In this case, a new dialog will allow you to select the bus.\n* The upper toolbar is divided into two parts. The left part contains the file functions and the calculation options. Here it is possible to open/save files, export only the **Data model** to JSON, or simply delete the network and start a new one. The *\"play\"* button opens the dialog for a power flow calculation. Meanwhile, the right side gives access to the basic network configuration (name, base system power and rated frequency) and to the application settings dialog.\n* The status bar at the bottom will notify when the grid has been modified and has not been saved.\n* The menu bar includes the same options as the toolbars.\n\n## Simulations and calculations\nWith EGS you can build and set up the model of an electrical grid in a graphical way. The application also allows you to perform *AC balanced power flow* calculations (other calculations supported by ```pandapower``` may be added in the future). For other types of simulations and calculations, you can proceed according to two alternatives:\n\n1. Export the **Data model** and the last power flow results to a JSON format file ready to be imported from a Python script through ```pandapower```. Then, any calculation or processing can be done from the script. The export is done from the graphical interface, while the subsequent import is done as indicated [in the pandapower documentation](https://pandapower.readthedocs.io/en/latest/file_io.html#pandapower.from_json), using the ```pandapower.from_json()``` function.\n\n2. Incorporate the required calculation functionality from an extension developed in Python. This way, the calculation is executed from within EGS. **Note that this feature is one of the main goals of EGS, but is not yet available in this early stage of development.**\n\nModels generated by EGS can be saved in a file containing both the **Graph** and the **Data model** (**.egs** file extension). You can then reopen the file whenever you need it and retrieve even the results of the last power flow run.\n\n\n## Running an AC balanced power flow\nIn order to run a power flow, click on the *\"play\"* button at the upper toolbar. A new dialog gets opened. The first tab allows you to configure the parameters of the numerical method (solver) and other model settings. Then, execute the calculation using the ***Run power flow*** button.\n\nThe sencond tab shows the results in the ```pandapower``` way (tables), while the third tab includes some plots:\n\n* Voltage magnitudes.\n* Voltage box plot.\n* Voltage magnitudes at load buses.\n* AC line loading (percentage rate).\n* AC line voltages.\n* Two- and three-winding transformer loading.\n* Reactive power on PV buses (voltage controled generators).\n\nIn bar voltage charts, the magnitud level is distinguished with different colors to emphasize acceptable values, under-voltages and over-voltages. Line and transformer overloads are also highlighted in red. In addition, the head of the plot usually includes some statistical results.\n\nAfter closing the power flow dialog and returning to the *graph view*, you can place the cursor on a particular node and get a tooltip with the main results. For example, an AC line shows the loading percentage, and the real and reactive power transmitted (at the *\"from bus\"* and *\"to bus\"*). Most of the nodes show this kind of information.\n\n## Application settings\n\nThe application settings are saved in a ```config.ini``` file outside the installation directory. This way, your settings are maintained after updating the program. However, you can change them from a dialog window.\n\nSettings are classified into four categories:\n\n* **General:** Includes the theme, the background grid visibility, the connection style and a default working directory.\n\n* **Network:** Defaults grid name, power system base and rated frequency.\n\n* **Power flow**: Mainly the default settings for the power flow solver.\n\n* **Default component parameters:** The defaults settings for every node type.\n\n## Shortcuts\n\n| Shortcut | Description |\n| -------- | ----------- |\n| ```Ctrl+N``` | Create a new session |\n| ```Ctrl+O``` | Open session from a **.egs** file |\n| ```Ctrl+S``` | Save session to a **.egs** file |\n| ```Ctrl+Shift+S``` | Save session as... |\n| ```Ctrl+E``` | Export **Data model** to a JSON file |\n| ```Ctrl+Z``` | Undo |\n| ```Ctrl+Shift+Z``` | Redo |\n| ```Del``` | Delete selected components in the **Graph** |\n| ```Ctrl+A``` | Select all the nodes in the **Graph** |\n| ```Ctrl+Shift+A``` | Unselect what is selected |\n| ```D``` | Disable the selected nodes |\n| ```R``` | Flip the selected nodes (works only with nodes that have only one port) |\n| ```Ctrl++``` | Zoom in |\n| ```Ctrl+-``` | Zoom out |\n| ```=``` | Reset zoom |\n| ```F``` | Adjust the zoom level according to the selection |\n| ```V``` | Change selected nodes to the vertical layout |\n| ```H``` | Change selected nodes to the horizontal layout |\n\n> __Note__ <br>\n> * ```Undo``` and ```Redo``` only work for simple actions.\n> * Pressing ```F``` without selected nodes will adjust the zoom level to show all the grid.\n> * Pressing ```D``` will change the bool value for the ```in_service``` parameter in the **Data model**. This works for every component, except for switches.\n> * For selecting nodes in the **Graph** you can use the left mouse button (```LMB```). Just click with the ```LMB```, hold and drag to mark the selection area.\n> * Clicking with the ```LMB``` on the background will unselect all.\n> * You can use ```Shift+LMB``` on a node in order to add it to the selection.\n> * The mouse scroll wheel can be used to zoom in and out.\n> * Use the medium mouse button (```MMB```) to scroll over the **Graph**. Just click with the ```MMB```, hold and move.\n\nIf you prefer to use the mouse instead of keyboard shortcuts, just right click on the **Graph** and access a context menu that complements the upper toolbar and the menu bar.\n\n# Installation\nEGS is installed using ```pip```, the official Python package manager.\n\nOn GNU/Linux and MacOS execute the following order in a terminal:\n```bash\npip install electricalsim\n```\n\nOn MS Windows you may prefer:\n```bash\npython -m pip install electricalsim\n```\n\n## Upgrading EGS\nIn order to upgrade EGS via ```pip```, execute the following in a terminal:\n\n```bash\npip install electricalsim -U\n```\nOn MS Windows you may prefer:\n```bash\npython -m pip install electricalsim -U\n```\n\n## Running EGS\nOnce installed, you can run it with the command:\n\n```bash\negs\n```\n\nIf you prefer to run the program in a more practical way, just execute this command only once:\n\n```bash\negs-create-shortcut\n```\n\nThis will add a shortcut launcher to your desktop and to your application menu. Note that this launcher will not work if you are installing the application into a Python virtual environment.\n\n\n## Uninstalling\nIf you want to remove the application, execute:\n\n```bash\npip uninstall electricalsim\n```\n\nOn MS Windows:\n```bash\npython -m pip uninstall electricalsim\n```\n\nNote that shortcuts added with the ```egs-create-shortcut``` command are not removed. So you must delete them manually.\n\n# License\n\nThis project uses the [MIT license](https://github.com/aloytag/electrical-grid-simulator/blob/main/LICENSE).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "electrical networks,energy,power systems,simulation",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "electricalsim",
    "package_url": "https://pypi.org/project/electricalsim/",
    "platform": null,
    "project_url": "https://pypi.org/project/electricalsim/",
    "project_urls": {
      "Bug Tracker": "https://github.com/aloytag/electrical-grid-simulator/issues",
      "Homepage": "https://github.com/aloytag/electrical-grid-simulator",
      "Repository": "https://github.com/aloytag/electrical-grid-simulator"
    },
    "release_url": "https://pypi.org/project/electricalsim/0.0.6.8/",
    "requires_dist": [
      "lightsim2grid>=0.7.1",
      "matplotlib>=3.6.0",
      "numba>=0.56.4",
      "pandapower>=2.11.1",
      "platformdirs>=3.0.0",
      "pynput>=1.7.6",
      "pyqtdarktheme>=2.1.0",
      "pyshortcuts>=1.8.3",
      "pyside2>=5.15",
      "qt-py>=1.3.7",
      "qtawesome>=1.2.2",
      "qtpy>=2.3.0"
    ],
    "requires_python": ">=3.8",
    "summary": "Graphical user interface for simulating electrical networks based on pandapower library",
    "version": "0.0.6.8",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17351276,
  "releases": {
    "0.0.6.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1cbb282b3835547ef0eb8559a96794b6d87880eb9bc837b4740cfab5e34e5b28",
          "md5": "2134dc23f0ece9c96f5aceb90b7e83fe",
          "sha256": "747c7120bb46188c8353fec1ce2aab775e9779a40beb8b3b90382edd10dd6abf"
        },
        "downloads": -1,
        "filename": "electricalsim-0.0.6.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2134dc23f0ece9c96f5aceb90b7e83fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 401187,
        "upload_time": "2023-03-19T05:59:33",
        "upload_time_iso_8601": "2023-03-19T05:59:33.631003Z",
        "url": "https://files.pythonhosted.org/packages/1c/bb/282b3835547ef0eb8559a96794b6d87880eb9bc837b4740cfab5e34e5b28/electricalsim-0.0.6.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c5db5b757a158c26612bd76d4e9cb43fe8f6e47cc648ddc9a6c16c15b071196b",
          "md5": "fd7465f00d7cec974d5bf35ecf9947dc",
          "sha256": "9823ae19f91c21d1c1a60819bf0f383551fc63f00b284f0f496fdf1e5d137b29"
        },
        "downloads": -1,
        "filename": "electricalsim-0.0.6.8.tar.gz",
        "has_sig": false,
        "md5_digest": "fd7465f00d7cec974d5bf35ecf9947dc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 1576536,
        "upload_time": "2023-03-19T05:59:36",
        "upload_time_iso_8601": "2023-03-19T05:59:36.946149Z",
        "url": "https://files.pythonhosted.org/packages/c5/db/5b757a158c26612bd76d4e9cb43fe8f6e47cc648ddc9a6c16c15b071196b/electricalsim-0.0.6.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1cbb282b3835547ef0eb8559a96794b6d87880eb9bc837b4740cfab5e34e5b28",
        "md5": "2134dc23f0ece9c96f5aceb90b7e83fe",
        "sha256": "747c7120bb46188c8353fec1ce2aab775e9779a40beb8b3b90382edd10dd6abf"
      },
      "downloads": -1,
      "filename": "electricalsim-0.0.6.8-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2134dc23f0ece9c96f5aceb90b7e83fe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 401187,
      "upload_time": "2023-03-19T05:59:33",
      "upload_time_iso_8601": "2023-03-19T05:59:33.631003Z",
      "url": "https://files.pythonhosted.org/packages/1c/bb/282b3835547ef0eb8559a96794b6d87880eb9bc837b4740cfab5e34e5b28/electricalsim-0.0.6.8-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c5db5b757a158c26612bd76d4e9cb43fe8f6e47cc648ddc9a6c16c15b071196b",
        "md5": "fd7465f00d7cec974d5bf35ecf9947dc",
        "sha256": "9823ae19f91c21d1c1a60819bf0f383551fc63f00b284f0f496fdf1e5d137b29"
      },
      "downloads": -1,
      "filename": "electricalsim-0.0.6.8.tar.gz",
      "has_sig": false,
      "md5_digest": "fd7465f00d7cec974d5bf35ecf9947dc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 1576536,
      "upload_time": "2023-03-19T05:59:36",
      "upload_time_iso_8601": "2023-03-19T05:59:36.946149Z",
      "url": "https://files.pythonhosted.org/packages/c5/db/5b757a158c26612bd76d4e9cb43fe8f6e47cc648ddc9a6c16c15b071196b/electricalsim-0.0.6.8.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}