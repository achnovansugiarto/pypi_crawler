{
  "info": {
    "author": "V-ampire",
    "author_email": "webjob010@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "\n# advego-antiplagiat-api\n\n## Описание\n\nБиблиотека для работы с сервисом [антиплагиата](https://advego.com/v2/support/api/api-antiplagiat/1383) от [advego.ru](https://advego.com/). Библиотека не является официальной, при обновлении сервисов advego возможно возникновение ошибок.\n\n\n## Документация\n\n[Документация по API](https://advego.com/v2/support/api/api-antiplagiat/1383)\n\n\n[Как считается уникальность текста](https://advego.com/blog/read/faq_plagiatus/1298909/all1/)\n\n\n## Требования\nPython 3.8+\n\n## Установка\n\n```\n$ pip install advego-antiplagiat-api\n$ pipenv install advego-antiplagiat-api\n```\n\n## Пример использования\n```\nfrom antiplagiat import Antiplagiat\n\nimport time\n\n\nTOKEN = os.getenv('ADVEGO_TOKEN')\n\napi = Antiplagiat(TOKEN)\n\nwith open('example.txt', 'r') as fp:\n    text = fp.read()\n\n\nresult = api.unique_text_add(text)\nkey = result['key']\n\nwhile True:\n    # дадим некоторое время на проверку\n    time.sleep(200)\n    result = api.unique_check(key)\n    if result['status'] == 'done':\n        print('Done!')\n        # сделать чтото с отчетом\n        return\n    elif result['status'] == 'error':\n        print(f'Error: {result}')\n        return\n    elif result['status'] == 'not found':\n        print('Not found!')\n        return\n    else:\n        print('In progress...')\n```\n\n## Реализованные методы\n\n**unique_text_add(text, title=None, ignore_rules=None)**\n\nДобавляет текст на проверку уникальности.\n\nПараметры:\n\n**text** - текст для проверки. Для корректной работы текст должен быть в кодировке **UTF-8**.\n\n**title** - (необязательно) название проверки.\n\n**ignore_rules** — (необязательно) перечень правил, по которым будут игнорироваться сайты при проверки.\n\nДоступные правила:\n- `\"u:<url>\"` - проверка уникальности будет игнорировать данный url;\n- `\"b:<domain>\"` - проверка уникальности будет игнорировать все url, начинающиеся с domain;\n- `\"r:<regex>\"` - проверка уникальности будет игнорировать все url, подходящие по заданное регулярное выражение. Если в регулярном выражении используется обратный слэш `\\` или двойные кавычки `\"\"`, их нужно экранировать.\n\nДля задания правил также можно использовать вспомогательные функции из модуля [helpers.py](https://github.com/V-ampire/advego-antiplagiat-api/blob/master/antiplagiat/helpers.py).\n```\nfrom antiplagiat import Antiplagiat\nfrom antiplagiat.helpers import url_rule, domain_rule, regex_url\n\nTOKEN = 'token' # ваш токен\napi = Antiplagiat(TOKEN)\n\ntext = \"\"\"\nPython — высокоуровневый язык программирования общего назначения,\nориентированный на повышение производительности разработчика и читаемости кода.\nСинтаксис ядра Python минималистичен.\nВ то же время стандартная библиотека включает большой объём полезных функций.\n\"\"\"\n\nignore_rules = [\n    domain_rule('ru.wikipedia.org'),\n    url_rule('https://ru.wikipedia.org/wiki/Python'),\n    regex_rule('.*wikipedia\\\\.org')\n]\n\nresult = api.unique_text_add(text, ignore_rules=ignore_rules)\nkey = result['key']\n```\n\nВ случае если текст успешно добавлен на проверку метод возвращает словарь `{'key': NNN}`, где NNN - номер созданной проверки.\n\nВ случае ошибки будет выброшено исключение, см. [стандартные исключения](#exceptions).\n\n\n**unique_check(key, agent=None, report_json=1, get_text=False)**\n\nВозвращает состояние проверки и [отчет](#report), если проверка выполнена.\n\nПараметры:\n\n**key** — идентификатор проверки, полученный при добавлении.\n\n**get_text** - если указан, то вместе с отчетом будет возвращен проверенный текст.\n\n**agent** - тип проверки, указывается чтобы получить результат проверки работы или статьи. Для проверки текста указывать agent не нужно.\n\n**report_json** - формат отчета, рекомендуется значение 1.\n\nВозможны следующие ответы:\n\n- `{\"msg\": \"\", \"status\": \"in progress\"}` - проверка выполняется.\n\n- `{\"report\": {...}, \"status\": \"done\", \"text\": \"...\"}` - проверка выполнена.\n\n- `{\"msg\": \"Error message\", \"status\": \"error_code\"}` - проверка завершилась с ошибкой, где `\"error_code\"` код [ошибки](#exceptions).\n\n- `{\"msg\": \"\", \"status\": \"not found\"}` - проверка с данным ключом не найдена.\n\n\n**unique_recheck(key)**\n\nЗапускает новую проверку ранее добавленного текста. При этом удаляет предыдущие проверки из очереди.\n\nПараметры:\n\n**key** — идентификатор проверки, полученный при добавлении.\n\nв случает успеха возвращает `1`.\n\nВ случае ошибки будет выброшено исключение, см. [стандартные исключения](#exceptions).\n\n\n**unique_get_text(key)**\n\nВозвращает текст на проверке.\n\nПараметры:\n\n**key** — идентификатор проверки, полученный при добавлении.\n\nПри успешном запросе возвращает словарь, содержащий проверяемый текст `{\"text\": \"...\"}`\n\nВ случае ошибки будет выброшено исключение, см. [стандартные исключения](#exceptions).\n\n\n<a name=\"report\"></a>\n## Отчет\n\n\nФормат возвращаемого отчета:\n```\n{\n    \"status\": \"done\",\n    \"report\": {\n        \"layers_by_domain\": [\n            {\n                \"rewrite\": 33,\n                \"equality\": 19,\n                \"layers\": [\n                    {\n                        \"equality\": 19,\n                        \"rewrite\": 33,\n                        \"uri\": \"https://site/\",\n                        \"words\": [\n                            7,\n                            30,\n                            31,\n                            32\n                        ],\n                        \"shingles\": [\n                            31,\n                            32,\n                            33,\n                            34,\n                            35,\n                            36,\n                            37,\n                            38\n                        ]\n                    },\n            \t],\n            }\n        ]\n        \"len\": 1050,\n        \"bad_words\": [],\n        \"equal_words\": [\n            0,\n            1,\n            3,\n            5,\n            7,\n            15,\n            19,\n            20,\n            22,\n            24,\n            25,\n            27,\n            28,\n            30\n        ],\n        \"word_count\": 154,\n        \"lang\": \"russian\",\n        \"error_pages\": 0,\n        \"rewrite\": 82,\n        \"progress\": 100,\n        \"text_fragments\": [\n            \"\",\n            \"Слово1\",\n            \" \",\n            \"Слово2\",\n            \" \",\n            \"Слово3\",\n            \" \",\n            \"Слово4\",\n            \" \",\n            \"Слово5\",\n            \". \"\n        ],\n        \"captchas\": 0,\n        \"found_pages\": 11,\n        \"checked_pages\": 48,\n        \"equal_shingles\": [\n            31,\n            32,\n            36,\n            37,\n            38,\n            40\n        ],\n        \"checked_phrases\": 8,\n    },\n}\n```\n\nРасшифровка:\n\n**layers_by_domain** - найденные страницы с совпадениями, сгруппированные по доменам (если найдено несколько страниц на одном сайте),\n\n**layers** - найденные страницы линейным списком,\n\n**equality** - количество найденных совпадений по фразам в указанном источнике (uri), процентов,\n\n**rewrite** - количество найденных совпадений по словам в указанном источнике (uri), процентов,\n\n**uri** - адрес страницы с найденными совпадениями,\n\n**words** - слова, входящие в найденные совпадения по словам (см. text_fragments),\n\n**shingles** - слова, входящие в найденные совпадения по фразам (см. text_fragments),\n\n**len** - длина текста в символах с пробелами,\n\n**bad_words** - слова с подменой символов,\n\n**equal_words** - аналогично words, но для всего текста,\n\n**equal_shingles** - аналогично shingles, но для всего текста,\n\n**word_count** - количество слов в проверяемом тексте,\n\n**text_fragments** - фрагменты текста для восстановления совпадений по словам и фразам.\n\nПорядковый номер фрагмента вычисляется по формуле 2n + 1, где n = номеру, указанному в соответствущей секции words, shingles, equal_words и equal_shingles.\n\n\nДля удобной работы с отчетом можно использовать вспомогательный класс `AdvanceReport`. Атрибуты этого класса соответствуют ключам словаря `report`, но в отличие от отчета получаемого от сервиса антиплагиата, такие значения как `words`,  `shingles`, `equal_words` и т.п. содержат не номера слов в тексте, а уже сами слова.\n\n\nИсключение: ключу `len` соответствует атрибут `length`.\n\n\nТакже `AdvanceReport` предоставляет атрибуты `uniqueness` и `originality`, соответствующие значениям уникальности и оригинальности текста, подробнее см. [как считается уникальность текста](https://advego.com/blog/read/faq_plagiatus/1298909/all1/).\n\n\n### Методы AdvanceReport\n\n\n**words_by_numbers(numbers)**\n\nВозвращает слова по номерам в тексте.\n\nПараметры:\n\n**numbers** - список номеров слов.\n\n\n**save_as_json(file_path, indent=4)**\n\nСохранить отчет в json. Будет сохранен словарь, переданный при инициализации.\n\nПараметры:\n\n**file_path** - путь до файла.\n\n**indent** - размер отступов.\n\n\nПример:\n```\nfrom antiplagiat import Antiplagiat, AdvanceReport\n\n\nTOKEN = os.getenv('ADVEGO_TOKEN')\n\napi = Antiplagiat(TOKEN)\n\ntext = \"\"\"some text\"\"\"\n\n# ... отправляем текст на проверку и получаем ключ key\n\nresult = api.unique_check(key)\n\nadv_report = AdvanceReport(result.get('report'), text)\n\nprint(f'Уникальность текста {adv_report.uniqueness}/{adv_report.originality}')\n\nprint('Найденные источники:')\nfor domain in adv_report.layers_by_domain:\n    for layer in domain.layers:\n        print(layer.uri)\n```\n\n\n<a name=\"exceptions\"></a>\n## Стандартные исключения\n\n\n**APIException** - общее исключение для ошибок при запросе сервиса антиплагиата. От него наследуются все остальные исключения.\n\n\n**CharAccountError** - не хватает символов на счету. Код ошибки `-1`.\n\n\n**AccountError** - не хватает денежных средств на счету. Код ошибки `-2`.\n\n\n**DatabaseError** - ошибка подключения к БД. Код ошибки `-5`.\n\n\n**TextKeyError** - получен неверный ключ. Код ошибки `-10`.\n\n\n**TokenError** - ошибка авторизации по токену. Код ошибки `-11`.\n\n\n**TextError** - ошибка при проверке поля text. Код ошибки `-13`.\n\n\n**TitleError** - ошибка при проверке поля title. Код ошибки `-14`.\n\n\n**AddCheckError** - ошибка добавления работы. Код ошибки `-17`.\n\n\n**TextNotFoundError** - текст не найден. Код ошибки `-21`.\n\n\n**NotEnoughSymbolsError** - недостаточно символов на счету, минимальное количество – 100 000. Код ошибки `-67`.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/V-ampire/advego-antiplagiat-api",
    "keywords": "antiplagiat,advego,api,wrapper,sdk,integration,v-ampire,lib",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "advego-antiplagiat-api",
    "package_url": "https://pypi.org/project/advego-antiplagiat-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/advego-antiplagiat-api/",
    "project_urls": {
      "Homepage": "https://github.com/V-ampire/advego-antiplagiat-api"
    },
    "release_url": "https://pypi.org/project/advego-antiplagiat-api/1.1.0/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": ">=3.8.0",
    "summary": "Неофициальный клиент для работы с сервисом антиплагиата от advego.com.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7528068,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abc1a91ed2fea38fe3baedc217cd9d8d404e7bee67f35144ce06b2a262d54983",
          "md5": "1637a65b60864d7703c26aee501bf864",
          "sha256": "961a8d3929afccdcffa50f2ddd6fc8e5e53f3e87965e84d2d30ffef0417917fe"
        },
        "downloads": -1,
        "filename": "advego_antiplagiat_api-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1637a65b60864d7703c26aee501bf864",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8.0",
        "size": 13286,
        "upload_time": "2020-06-21T14:15:03",
        "upload_time_iso_8601": "2020-06-21T14:15:03.669230Z",
        "url": "https://files.pythonhosted.org/packages/ab/c1/a91ed2fea38fe3baedc217cd9d8d404e7bee67f35144ce06b2a262d54983/advego_antiplagiat_api-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97687922b78e012c8fbe3c27f89c7b8f04503a0f603ce61c7da8ddf81b44a6a2",
          "md5": "2b9e03d1b93dd244bf5d08f404fad500",
          "sha256": "c6e038f2f73cbb8dd25dea91bf567b8441b26d53c9b11dcad568db6585885e9b"
        },
        "downloads": -1,
        "filename": "advego-antiplagiat-api-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2b9e03d1b93dd244bf5d08f404fad500",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8.0",
        "size": 14191,
        "upload_time": "2020-06-21T14:15:06",
        "upload_time_iso_8601": "2020-06-21T14:15:06.352741Z",
        "url": "https://files.pythonhosted.org/packages/97/68/7922b78e012c8fbe3c27f89c7b8f04503a0f603ce61c7da8ddf81b44a6a2/advego-antiplagiat-api-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "abc1a91ed2fea38fe3baedc217cd9d8d404e7bee67f35144ce06b2a262d54983",
        "md5": "1637a65b60864d7703c26aee501bf864",
        "sha256": "961a8d3929afccdcffa50f2ddd6fc8e5e53f3e87965e84d2d30ffef0417917fe"
      },
      "downloads": -1,
      "filename": "advego_antiplagiat_api-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1637a65b60864d7703c26aee501bf864",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8.0",
      "size": 13286,
      "upload_time": "2020-06-21T14:15:03",
      "upload_time_iso_8601": "2020-06-21T14:15:03.669230Z",
      "url": "https://files.pythonhosted.org/packages/ab/c1/a91ed2fea38fe3baedc217cd9d8d404e7bee67f35144ce06b2a262d54983/advego_antiplagiat_api-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "97687922b78e012c8fbe3c27f89c7b8f04503a0f603ce61c7da8ddf81b44a6a2",
        "md5": "2b9e03d1b93dd244bf5d08f404fad500",
        "sha256": "c6e038f2f73cbb8dd25dea91bf567b8441b26d53c9b11dcad568db6585885e9b"
      },
      "downloads": -1,
      "filename": "advego-antiplagiat-api-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2b9e03d1b93dd244bf5d08f404fad500",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8.0",
      "size": 14191,
      "upload_time": "2020-06-21T14:15:06",
      "upload_time_iso_8601": "2020-06-21T14:15:06.352741Z",
      "url": "https://files.pythonhosted.org/packages/97/68/7922b78e012c8fbe3c27f89c7b8f04503a0f603ce61c7da8ddf81b44a6a2/advego-antiplagiat-api-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}