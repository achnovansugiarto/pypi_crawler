{
  "info": {
    "author": "Pawel Scierski",
    "author_email": "escer@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Framework :: Django :: 2.2",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.7",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "django-collectionfield\n======================\n\n.. image:: https://api.travis-ci.org/escer/django-collectionfield.svg?branch=master\n   :target: https://travis-ci.org/escer/django-collectionfield\n.. image:: https://img.shields.io/pypi/v/django-collectionfield.svg\n   :target: https://pypi.python.org/pypi/django-collectionfield\n.. image:: https://coveralls.io/repos/github/escer/django-collectionfield/badge.svg?branch=master\n   :target: https://coveralls.io/github/escer/django-collectionfield?branch=master\n\nA reusable Django model field to store collections.\n\n* This is a fork of a fork. The original repository does not appear to be active. I needed to use the library for Django 2.\n* Original: https://github.com/escer/django-collectionfield\n* Fork: https://github.com/russoz/django-collectionfield\n\nFeatures\n--------\n\n- highly configurable **model field** (changing collection and item types, sorting, choices, item uniqueness and more)\n- **custom lookups** to simplify queries over collection items\n- **form fields** for working with collections\n- collection **item validators**\n- extended ``get_FIELD_display`` method for model fields with choices\n- works with database backends without native support for multi-value columns (like ArrayField for PostgreSQL)\n\nInstallation\n------------\n\n.. code-block:: python\n\n   pip install django-collectionfield\n\n\nUsage\n-----\n\nModel field\n~~~~~~~~~~~\n\nDefine model with field that stores lists of strings:\n\n.. code-block:: python\n\n   # models.py\n   from django.db import models\n   from collectionfield.models import CollectionField\n\n   class MyModel(models.Model):\n       tags = CollectionField()\n\nPass values to model field:\n\n.. code-block:: python\n\n   my_model = MyModel.objects.create(tags=['test', 'values'])\n   my_model.values\n   ['test', 'values']\n\nMaking queries\n~~~~~~~~~~~~~~\n\nRetrieve model instances with particular value present in the collection:\n\n.. code-block:: python\n\n   MyModel.objects.filter(tags__has='test')\n\nRetrieve model instances with *ALL* values present in the collection (ignoring items' order):\n\n.. code-block:: python\n\n   MyModel.objects.filter(tags__hasall=['test', 'values'])\n\nRetrieve model instances with *ANY* of values present in the collection:\n\n.. code-block:: python\n\n   MyModel.objects.filter(tags__hasany=['test', 'values'])\n\n\nCustomizing collections\n~~~~~~~~~~~~~~~~~~~~~~~\n\nCustom collection and item type:\n\n.. code-block:: python\n\n   class IntegerSet(models.Model):\n       # This field will provide sets of integers \n       # instead of default lists of strings:\n       values = CollectionField(collection_type=set, item_type=int)\n\nSorting and uniqueness:\n\n.. code-block:: python\n\n   class SortedUniqueTextList(models.Model):\n       # Before saving, items will be sorted and duplicates dropped:\n       texts = CollectionField(sort=True, unique_items=True)\n\nChoices and collection size limit:\n\n.. code-block:: python\n\n   class TaggedModel(models.Model):\n       tags = CollectionField(\n           # Both choices and max_items limit are checked during model validation.\n           choices=(\n               ('action', \"Action\"),\n               ('comedy', \"Comedy\"),\n               ('horror', \"Horror\"),\n               # ...\n           ),\n           max_items=2\n       )\n\n``get_FIELD_display`` method can handle multiple choices and provide options to customize the display:\n\n.. code-block:: python\n\n   tagged_model = TaggedModel.objects.create(tags=['action', 'horror'])\n   tagged_model.get_tags_display()\n   \"Action, Horror\"\n\n   def li_mapper(value, label):\n       return \"<li>{0}</li>\".format(label)\n\n   def ul_wrapper(field_display):\n       return \"<ul>{0}</ul>\".format(field_display)\n\n   tagged_model.get_tags_display(delimiter='', mapper=li_mapper, wrapper=ul_wrapper)\n   '<ul><li>Action</li><li>Horror</li></ul>'\n\nDjango built-in validators work with entire field values. ``django-collectionfield`` provide validation of single collection items:\n\n.. code-block:: python\n\n   from collectionfield.validators import (\n       ItemMinValueValidator, ItemMaxValueValidator\n   )\n\n   class IntegerList(models.Model):\n       values = CollectionField(\n           item_type=int,\n           # item validators check each item separately:\n           validators=[ItemMinValueValidator(1), ItemMaxValueValidator(5)]\n       )\n\nForm fields\n~~~~~~~~~~~\n\n``django-collectionfield`` comes with 2 form fields:\n\n.. code-block:: python\n\n   from collectionfield.forms import CollectionField, CollectionChoiceField\n\n   # ``collectionfield.forms.CollectionField`` converts comma-separated text\n   # into collection of values:\n\n   class MyForm(forms.Form):\n       values = CollectionField()\n\n   my_form = MyForm({'values': \"A, B, C\"})\n   my_form.is_valid()\n   True\n   my_form.cleaned_data['values']\n   ['A', 'B', 'C']\n\n   # ``collectionfield.forms.CollectionChoiceField`` behaves more like \n   # regular MultipleChoiceField:\n\n   class MyChoiceForm(forms.Form):\n      values = CollectionChoiceField(\n          choices=(\n              ('action', \"Action\"),\n              ('comedy', \"Comedy\"),\n              ('horror', \"Horror\"),\n              # ...\n          )\n      )\n\n   my_choice_form = MyChoiceForm({'values': ['action', 'comedy']})\n   my_choice_form.is_valid()\n   True\n   my_choice_form.cleaned_data['values']\n   ['action', 'comedy']\n\nBoth form fields support the same set of parameters as the model field:\n\n.. code-block:: python\n\n   from collectionfield.forms import CollectionField\n\n   class MyForm(forms.Form):\n       values = CollectionField(collection_type=set, item_type=int)\n\n   my_form = MyForm({'values': \"1, 2, 1, 3\"})\n   my_form.is_valid()\n   True\n   my_form.cleaned_data['values']\n   {1, 2, 3}\n\nRepresentation in database\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nCollectionField converts its values into string of up to 1024 characters using the following format:\n\n.. code-block:: python\n\n   \"|item1|item2|item3|\"\n\nDefault delimiter ('|') and maximum length can be configured:\n\n.. code-block:: python\n\n   class MyModel(models.Model):\n       values = CollectionField(delimiter=\"$\", max_length=2000)\n\nRequirements\n------------\n\nPython: 2.7, 3.4, 3.5\n\nDjango: 1.8, 1.9, 1.10\n\n.. TODO: Changes\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/rgutierrez-cotech/django-collectionfield",
    "keywords": "django models fields collections",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-2-collectionfield",
    "package_url": "https://pypi.org/project/django-2-collectionfield/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-2-collectionfield/",
    "project_urls": {
      "Homepage": "https://github.com/rgutierrez-cotech/django-collectionfield"
    },
    "release_url": "https://pypi.org/project/django-2-collectionfield/0.0.4/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Custom Django model field to store multiple values. Updated from original library to support Django 2.",
    "version": "0.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6662727,
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b60f4da464bf935499ba6caf444a63b57ac87acd5cf757a8387af1869edaba62",
          "md5": "4f75f46ef774ed4353a9e8748e63ca99",
          "sha256": "1c255ee71dac55658a8cd024dcd552514d513d025782cc895647153cd22a28a6"
        },
        "downloads": -1,
        "filename": "django_2_collectionfield-0.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f75f46ef774ed4353a9e8748e63ca99",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 18192,
        "upload_time": "2020-02-19T18:55:16",
        "upload_time_iso_8601": "2020-02-19T18:55:16.639695Z",
        "url": "https://files.pythonhosted.org/packages/b6/0f/4da464bf935499ba6caf444a63b57ac87acd5cf757a8387af1869edaba62/django_2_collectionfield-0.0.4-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8337ac68d6501020e05dfcd7b3e34846f0fb829b82f599b4417fd19c3ba7ab42",
          "md5": "bbbd82c555691d0428dd2d04e44b912f",
          "sha256": "9345527a7bf414431d80e06e4781bf879e36481c9ce3a312c43387b919cdd256"
        },
        "downloads": -1,
        "filename": "django-2-collectionfield-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "bbbd82c555691d0428dd2d04e44b912f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17424,
        "upload_time": "2020-02-19T18:55:19",
        "upload_time_iso_8601": "2020-02-19T18:55:19.201068Z",
        "url": "https://files.pythonhosted.org/packages/83/37/ac68d6501020e05dfcd7b3e34846f0fb829b82f599b4417fd19c3ba7ab42/django-2-collectionfield-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29d70ee6a74b741b724729d80d24f021e55863b694dc6215d055840c1ef1dd61",
          "md5": "f424d530ed6bab73f807973802cd2e19",
          "sha256": "cb1ae5cad23a9d682e00cc9414510d7cc04f9b84a33e9096ce21690c2ec4d65e"
        },
        "downloads": -1,
        "filename": "django_2_collectionfield-0.0.4a0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f424d530ed6bab73f807973802cd2e19",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 18213,
        "upload_time": "2020-02-19T18:58:55",
        "upload_time_iso_8601": "2020-02-19T18:58:55.807909Z",
        "url": "https://files.pythonhosted.org/packages/29/d7/0ee6a74b741b724729d80d24f021e55863b694dc6215d055840c1ef1dd61/django_2_collectionfield-0.0.4a0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea917c5e79b2a7d86dd0b425972d6d2aad5c1eb5ecd94b5154ca360a98b1243d",
          "md5": "5811c9e8dad168fa8d51508a102c77bf",
          "sha256": "a228e2983796f9dc92b27e9b55c19691276c7ff930bf6bc1ba190352322ca4a9"
        },
        "downloads": -1,
        "filename": "django-2-collectionfield-0.0.4a0.tar.gz",
        "has_sig": false,
        "md5_digest": "5811c9e8dad168fa8d51508a102c77bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17430,
        "upload_time": "2020-02-19T18:58:57",
        "upload_time_iso_8601": "2020-02-19T18:58:57.923700Z",
        "url": "https://files.pythonhosted.org/packages/ea/91/7c5e79b2a7d86dd0b425972d6d2aad5c1eb5ecd94b5154ca360a98b1243d/django-2-collectionfield-0.0.4a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b60f4da464bf935499ba6caf444a63b57ac87acd5cf757a8387af1869edaba62",
        "md5": "4f75f46ef774ed4353a9e8748e63ca99",
        "sha256": "1c255ee71dac55658a8cd024dcd552514d513d025782cc895647153cd22a28a6"
      },
      "downloads": -1,
      "filename": "django_2_collectionfield-0.0.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4f75f46ef774ed4353a9e8748e63ca99",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 18192,
      "upload_time": "2020-02-19T18:55:16",
      "upload_time_iso_8601": "2020-02-19T18:55:16.639695Z",
      "url": "https://files.pythonhosted.org/packages/b6/0f/4da464bf935499ba6caf444a63b57ac87acd5cf757a8387af1869edaba62/django_2_collectionfield-0.0.4-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "8337ac68d6501020e05dfcd7b3e34846f0fb829b82f599b4417fd19c3ba7ab42",
        "md5": "bbbd82c555691d0428dd2d04e44b912f",
        "sha256": "9345527a7bf414431d80e06e4781bf879e36481c9ce3a312c43387b919cdd256"
      },
      "downloads": -1,
      "filename": "django-2-collectionfield-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "bbbd82c555691d0428dd2d04e44b912f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 17424,
      "upload_time": "2020-02-19T18:55:19",
      "upload_time_iso_8601": "2020-02-19T18:55:19.201068Z",
      "url": "https://files.pythonhosted.org/packages/83/37/ac68d6501020e05dfcd7b3e34846f0fb829b82f599b4417fd19c3ba7ab42/django-2-collectionfield-0.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}