{
  "info": {
    "author": "Aleks Smechov",
    "author_email": "aleks@extractorapi.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# Intro\n\n![slacklogger_main_sample](sample_images/slacklogger_sample_1.png)\n\n`slacklogger` is a simple Python package that logs\napplication-level events to your Slack channels. The\npackage includes a function decorator, a regular \nfunction, and some settings to play around with. \nHere's how everything works.\n\n# Installation\n\nTo install `slacklogger`, use pip.\n\n```\npip install simple-slacklogger\n```\n\n# Getting Started\n\nTo start using `slacklogger` you'll need to create\na Slack app in your Workspace. This is pretty\nstraightforward: \n\n* Once you've signed up for a Slack account head \nover to the \n[Slack Apps page](https://api.slack.com/apps).\n* Click on **Create New App**, name your app, and\nchoose your Workspace. \n* Click on the **Create App** button.\n* Click on **Oauth & Permissions** in the left\nsidebar.\n* Add the **'chat:write.public'** Oauth Scope \nunder the **Bot Token Scopes** section. This\nwill also add the **'chat:write'** scope.\n* On the same page, at the top, click the \n**Install App to Workspace** button.\n* Click **Allow** on the next screen.\n* Save the generated **Bot User OAuth Access Token**.\n* Head over to the [Slack homepage](https://slack.com)\nand launch your workspace in your browser. \n* Head to the channel where you want your app to \npost logs, and note the path value in the URL after\nthe final **'/'**. It will look something like \n**D05ZAYNAASL**. Copy this as well.\n\nNow that you have your Slack `channel_id` and \n`access_token`, you can initialize `slacklogger`.\n\n```\nimport slacklogger\n\nslacklogger.creds = {\n    \"channel_id\": \"YOUR_CHANNEL_ID\",\n    \"access_token\": \"YOUR_ACCESS_TOKEN\"\n}\n```\n\n# Slacklogger Decorator\n\nThe `slacklogger.log` decorator wraps around any\nfunction and runs **before** your main function.\nFor example:\n\n```\n@slacklogger.log(message=\"It works\")\ndef my_function():\n    print(\"Hooray, it worked!\")\n``` \n\n\"It works\" will be logged in your Slack channel\n**before** \"Hooray, it works\" is printed in your\napp. If you want something more granular...\n\n# Slacklogger Function\n\n`slacklogger.send_log` works much the same way as \nthe decorator, except it doesn't automatically\nextract your function's name and script path -\nyou can do that with an included helper function,\n`my_details`, which takes the function's name as \na parameter. \n\n```\nfrom slacklogger.helpers import my_details\n\ndef new_user(name: str):\n    print(\"Creating new user...\")\n    func_name, script_path = my_details(new_user) \n    slacklogger.send_log(\n        message=f\"Created new user: {name}\",\n        function_name=func_name,\n        script_path=script_path\n    )\n``` \n\nNote that if your function is in a class, and you're\nusing the `my_details` helper function, prepend\nyour function's name with `self` - for example,\n`my_details(self.new_user)`.\n\n```\nfrom slacklogger.helpers import my_details\n\nclass User:\n    def __init__(self):\n        pass\n\n    def new_user(self, name: str):\n        print(\"Creating new user...\")\n        func_name, script_path = my_details(self.new_user) # <= add 'self'\n        slacklogger.send_log(\n            message=f\"Created new user: {name}\",\n            function_name=func_name,\n            script_path=script_path\n        )\n``` \n\n# Slacklogger Options\n\nFor both the decorator and the function, \nonly the `message` parameter is\nrequired, but you can also define the `level`, any\n`tags`, and the `timezone` (this defaults to UTC).\n\n```\n@slacklogger.log(\n    message=\"My Message\",\n    level=\"info\",\n    tags=[\"#first\", \"#test\"],\n    timezone=\"America/New_York\",\n)\ndef my_function():\n    print(\"Hooray, it worked!\")\n```\n\nThis will output something akin to the\nfollowing in your Slack:\n\n![slacklogger_decorator_sample](sample_images/slacklogger_sample_2.png)\n\nThe regular function has the same options, along with \n`function_name` and `script_path` as we saw above.\n\n```\ndef new_user(name: str):\n    print(\"Creating new user...\")\n    func_name, script_path = my_details(new_user) \n    slacklogger.send_log(\n        message=f\"Created new user: {name}\",\n        leve=\"info\",\n        tags=[\"#new_user\", \"#users\"]\n        function_name=func_name,\n        script_path=script_path,\n        timezone=\"America/New_York\"\n    )\n```\n\n### Settings\n\nYou can define two settings after you enter\nyour credentials: `date_format` and `level_colors`.\nThe `date_format` setting refers to how the log date and time\nare displayed. The `level_colors` setting allows\nyou to define a `dict` of level names and their\ncorresponding hex color codes.\n\n``` \nimport slacklogger\n\nslacklogger.creds = {\n    \"channel_id\": \"MY_CHANNEL_ID\",\n    \"access_token\": \"MY_ACCESS_TOKEN\"\n}\n\nslacklogger.settings = {\n    \"date_format\": \"%b %d, %Y | %H:%M:%S %Z\",\n    \"level_colors\": {\n        \"default\": \"#007300\",\n        \"debug\": \"#007300\",\n        \"info\": \"#0000e5\",\n        \"warn\": \"#e5e500\",\n        \"error\": \"#e59400\",\n        \"fatal\": \"#ff0000\"\n    }\n}\n```\n\nThe above values are the default settings\n`slacklogger` uses. \n\nTo create your own date formatting, \ncheck out [this cheat sheet for `strftime`\ndirectives](https://strftime.org/).\n\n```\nslacklogger.settings[\"date_format\"] = \"%b %d, %H:%M\"\n```\n\nFor `level_colors`, you can add any name and hex\ncolor code you need to \n`slacklogger.settings[\"level_colors\"]` - or \noverwrite the entire `dict`.\n\n```\nslacklogger.settings[\"level_colors\"][\"ntk\"] = \"#730073\"\n```\n\nYou can use [color-hex.com](color-hex.com) to choose\ncolor hex codes for your levels. \n\nUsing the example directly above, we can add\na new level ('ntk', or 'Nice to Know') \nto the decorator or regular function.\n\n```\n@slacklogger.log(\n    message=\"NTK Example\",\n    level=\"ntk\",\n    tags=[\"#level\", \"#test\"],\n    timezone=\"America/New_York\",\n)\ndef my_function():\n    print(\"New level acquired!\")\n```\n\nYou'll see an output like this:\n\n![slacklogger_color_sample](sample_images/slacklogger_sample_3.png)\n\n### Timezone\n\nTo change the timezone, simply change the `timezone`\nparameter in either the decorator or the function.\n[Check this Wiki link](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) \nfor relevant timezone names.\n\n```\ndef timezone_test(name: str):\n    print(\"Testing new timezone...\")\n    slacklogger.send_log(\n        message=\"Testing Timezone\",\n        level=\"debug\",\n        timezone=\"Europe/Lisbon\" # <= change this\n    )\n```\n\nYou should see something like this using the above\ncode (notice that `function_name`, `script_path`, \nand `tags` are omitted, as they're all optional).\n\n![slacklogger_timezone_sample](sample_images/slacklogger_sample_4.png)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/aleksandr-smechov/slacklogger",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simple-slacklogger",
    "package_url": "https://pypi.org/project/simple-slacklogger/",
    "platform": "",
    "project_url": "https://pypi.org/project/simple-slacklogger/",
    "project_urls": {
      "Homepage": "https://github.com/aleksandr-smechov/slacklogger"
    },
    "release_url": "https://pypi.org/project/simple-slacklogger/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Application-level event tracking with Slack",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8361224,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b95441b4d9c3e187aa7530bcd2c1ad80abf501ddceebd43b268144ff8a4d24a4",
          "md5": "0217b69734f75543a32688319b10f595",
          "sha256": "0c99875125ab936d22c42cbc88f2f982d9b45287c8406b34d6ac87fd835bc099"
        },
        "downloads": -1,
        "filename": "simple-slacklogger-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0217b69734f75543a32688319b10f595",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5773,
        "upload_time": "2020-10-07T17:47:58",
        "upload_time_iso_8601": "2020-10-07T17:47:58.523030Z",
        "url": "https://files.pythonhosted.org/packages/b9/54/41b4d9c3e187aa7530bcd2c1ad80abf501ddceebd43b268144ff8a4d24a4/simple-slacklogger-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9c07c8500b2d277116bb7c8f62861900d83a9fec5a233051e0117932e4c4bf1",
          "md5": "bb2b009208eeaa88f5a778dcc08f5823",
          "sha256": "3577c01172fccbd6a528d4de3daa0c988972897d0345de25953f7a5fff65cc34"
        },
        "downloads": -1,
        "filename": "simple-slacklogger-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bb2b009208eeaa88f5a778dcc08f5823",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5841,
        "upload_time": "2020-10-07T17:58:11",
        "upload_time_iso_8601": "2020-10-07T17:58:11.611127Z",
        "url": "https://files.pythonhosted.org/packages/d9/c0/7c8500b2d277116bb7c8f62861900d83a9fec5a233051e0117932e4c4bf1/simple-slacklogger-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce5e53c43c3352af945718667a73299af03a6c4f6da3e36839fc826c2a8579e9",
          "md5": "d6397e000d39f950b907c86e1402f0d4",
          "sha256": "895f17993ef74ad08bcf6f60c791c3aaabfeb220195ddb22f93fd0996f847026"
        },
        "downloads": -1,
        "filename": "simple-slacklogger-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d6397e000d39f950b907c86e1402f0d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5844,
        "upload_time": "2020-10-07T18:00:02",
        "upload_time_iso_8601": "2020-10-07T18:00:02.170778Z",
        "url": "https://files.pythonhosted.org/packages/ce/5e/53c43c3352af945718667a73299af03a6c4f6da3e36839fc826c2a8579e9/simple-slacklogger-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce5e53c43c3352af945718667a73299af03a6c4f6da3e36839fc826c2a8579e9",
        "md5": "d6397e000d39f950b907c86e1402f0d4",
        "sha256": "895f17993ef74ad08bcf6f60c791c3aaabfeb220195ddb22f93fd0996f847026"
      },
      "downloads": -1,
      "filename": "simple-slacklogger-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d6397e000d39f950b907c86e1402f0d4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 5844,
      "upload_time": "2020-10-07T18:00:02",
      "upload_time_iso_8601": "2020-10-07T18:00:02.170778Z",
      "url": "https://files.pythonhosted.org/packages/ce/5e/53c43c3352af945718667a73299af03a6c4f6da3e36839fc826c2a8579e9/simple-slacklogger-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}