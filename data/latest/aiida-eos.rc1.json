{
  "info": {
    "author": null,
    "author_email": "Chris Sewell <chrisj_sewell@hotmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License"
    ],
    "description": "# aiida_eos\n\nA demonstration of creating a Python package for AiiDA plugins.\nThe goal is to create a plugin package for the Equation of State workflow demonstrated in: <https://aiida-qe-demo.readthedocs.io/en/latest/6_write_your_own_workflow.html>.\n\nEach commit in this repository corresponds to a step in the tutorial.\n\nNote, <https://github.com/aiidateam/aiida-plugin-cutter> can be used to automate most of these steps,\nbut here we shall do it manually explain each aspect of the package.\n\n## Initial creation\n\nThe first step is to create a new repository on GitHub.\nWe will call it `aiida_eos`.\nThe repository should be created with a `README.md` and a `.gitignore` file.\n\n### Interacting with the repository\n\nWe shall use [Visual Studio Code](https://code.visualstudio.com/) to interact with the repository.\nThis is a free, open-source, cross-platform IDE, with nice integration with GitHub, and many useful extensions.\n\n## Creating the package metadata\n\nThe first step is to create the package metadata.\nThis is done by creating a `pyproject.toml` file in the root of the repository.\nThis can be used by pip to install the package, and by other tools to build the package: <https://pip.pypa.io/en/stable/reference/build-system/pyproject-toml/>\n\nWe shall use [flit](https://flit.readthedocs.io/en/latest/) to build the package.\nThis is a simple tool that is designed to build Python packages from a `pyproject.toml` file.\n\nWe can initialise the `pyproject.toml` file by running:\n\n```bash\nflit init\n```\n\nThis also generates a license file, which is crucial for allowing others to use your package.\n\n## Create the package and install it\n\nWe create the initial package with a single file: `src/aiida_eos/__init__.py`.\nThis file should have a docstring that describes the package, and a `__version__` variable.\n\nWe now want to install the package in editable mode.\nThis means that we can make changes to the package, and they will be immediately available to Python.\n\nFirst we create a [virtual environment](https://packaging.python.org/en/latest/tutorials/installing-packages/#creating-and-using-virtual-environments), and activate it:\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\n```\n\nVirtual environments are a way of isolating Python environments.\n\nWe can now install the package in editable mode:\n\n```bash\npython -m pip install --upgrade pip\npip install -e .\n```\n\nWe can now import the package in Python:\n\n```python\n>>> import aiida_eos\n>>> aiida_eos.__version__\n'0.0.1'\n```\n\n## Adding formatting and linting with pre-commit\n\nWe shall use [pre-commit](https://pre-commit.com/) to automatically format and lint the code.\nThis will ensure that the code is formatted consistently, and that it conforms to the style guide.\n\nWe can initialise a pre-commit configuration file with:\n\n```bash\npre-commit sample-config > .pre-commit-config.yaml\npre-commit autoupdate\npre-commit install\n```\n\nWe shall add a few additional hooks to the configuration file:\n\n- `black`: a Python code formatter\n- `flake8`: a Python linter\n- `isort`: a tool to sort the Python imports\n\n## Adding testing\n\nWe shall use [pytest](https://docs.pytest.org/en/latest/) to run tests on our package.\nTo install pytest, we shall add it to an `optional-dependencies` section in the `pyproject.toml` file.\nThis is because we only need pytest to run the tests, and not to use the package.\n\nWe can now install the package, with the optional dependencies:\n\n```bash\npip install -e \".[test]\"\n```\n\nWe can now add a test to the package.\nWe shall add a test that checks that the package can be imported.\nThis is done by adding a `tests` directory, and a `test_import.py` file in it.\n\nNow we can run the tests:\n\n```bash\npytest\n```\n\nTo check the coverage of the tests, we can run:\n\n```bash\npytest --cov=aiida_eos\n```\n\n### Using tox\n\nThe [tox](https://tox.readthedocs.io) CLI tool is an optional way to automate both setting up the virtual environment, then running the tests within it.\nSee the `pyproject.toml` section for the configuration.\nYou can then simply run `tox` to run the tests, or `tox -e py39` to run with a certain python version.\nSee [tox-conda](https://tox-conda.readthedocs.io) for an example of how to use tox with conda.\n\n### Adding GitHub Actions\n\nWe can use [GitHub Actions](https://github.com/features/actions) to automatically run the tests on each commit.\nThis is done by adding a `.github/workflows/test.yml` file.\n\n## Adding the rescale calcfunction\n\nWe shall add a `rescale` calcfunction to the package.\nThis is a simple function that takes a structure, and rescales it by a given factor.\n\nNote that up until now, we have not added any AiiDA specific code.\nNow that we want to add an AiiDA specific calcfunction, we need to add the `aiida-core` dependency to the `pyproject.toml` file, and also `ase` for the structure manipulation.\n\nIf using `tox`, we can regenerate our virtual environment with:\n\n```bash\ntox -r\n```\n\n### Type annotations\n\nWe will also notice that we added type annotations to the function.\nThis is a good practice, to provide static type inference, and also allows us to use tools like [mypy](http://mypy-lang.org/) to check the type annotations.\n\n### Testing the calcfunction\n\nWe can now add a test for the `rescale` calcfunction.\nIn fact, if we were to use test-driven development, we would first write the test, and then write the code to make the test pass!\n\nSince the calcfunction needs to store data to an AiiDa profile, we need to create a profile for the tests.\nWe can do this by utilising the [pgtest package](https://pypi.org/project/pgtest/) to create a temporary, local PostgreSQL database cluster, which allows us to create a temporary AiiDA profile, which we add to the `pyproject.toml` test dependencies.\n\nFor this we will first need an [PostgreSQL](https://www.postgresql.org/) server running, with which to connect.\nThere are numerous ways to do this, such as using the [Docker image](https://hub.docker.com/_/postgres), or installing via [Homebrew](https://brew.sh/) on macOS, or via the [PostgreSQL apt repository](https://www.postgresql.org/download/linux/ubuntu/) on Ubuntu.\n\nTo create the profile for the tests, we can add a `conftest.py` file to the `tests` directory.\nThen we register the AiiDA [pytest fixtures](https://docs.pytest.org/en/6.2.x/fixture.html) in it.\nYou can see all the available fixtures by running `pytest --fixtures` (or `tox -- --fixtures`).\nThe initial one we need is the `aiida_profile_clean` fixture, which creates a temporary profile, and tears it down at the end of the test.\n\nWe can now add a passing test for the `rescale` calcfunction.\n\n### Setting up PostgreSQL on GitHub Actions\n\nWe also need to start a PostgreSQL server for our GitHub Actions, by specifying a service in the `test.yml` file.\nThis actually uses the [PostgreSQL Docker image](https://hub.docker.com/_/postgres), which is started before the tests are run.\n\n## Adding the EquationOfState workchain\n\nWe shall now add the workflow itself.\n\nWe add an `project.entry-points.\"aiida.workflows\"` section to the `pyproject.toml` file, to register the `EquationOfState` workchain as an entry point, for AiiDA to access.\nAfter re-installing the package (`pip install --no-deps -e \".[test]\"`), we can now use the `verdi plugin list aiida.workflows eos.base` command and see the registered workflow.\n\nFor the testing we need to set up some more resources, before running the workflow.\nWe can do this by adding pytest fixtures to the `conftest.py` file.\n\nWe also need to run against the actual `pw.x` executable.\nOne way to do this is to use conda, to install the `quantum-espresso` package, which will install the `pw.x` executable in the `bin` directory of the conda environment.\nAnother way we are developing is [aiida-testing](https://github.com/aiidateam/aiida-testing).\n\n## Publishing the package\n\nOnce you have a working package, it is good to create a version tag, and a `CHANGELOG.md` to keep track of the changes.\n\nWe can now publish the package to [PyPI](https://pypi.org/).\nFirst create an account on PyPI, and then create an API token.\n\nYou can either use locally `flit publish` to publish the package, or use the GitHub Actions:\nAdd the token to the `PYPI_KEY` secret in the GitHub repository settings.\nThen we add a publishing workflow that runs on a new release.\n\nOnce released to PyPI (or before) you can make a PR to the [AiiDA plugin registry](https://github.com/aiidateam/aiida-registry) for others to find your plugin.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": null,
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "aiida_eos",
    "package_url": "https://pypi.org/project/aiida_eos/",
    "platform": null,
    "project_url": "https://pypi.org/project/aiida_eos/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/aiida_eos/0.0.1/",
    "requires_dist": [
      "aiida-core~=2.0",
      "aiida-quantumespresso",
      "ase",
      "pytest ; extra == \"test\"",
      "pytest-cov ; extra == \"test\"",
      "pgtest ; extra == \"test\""
    ],
    "requires_python": ">=3.8",
    "summary": "AiiDA plugin to calculate the equation of state of a material.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15332104,
  "releases": {
    "0.0.1": [
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "30b9eac01c1466258fca5ea8c5c6a8ac07d544c3ce0ad49e7760a3acd580d5dc",
          "md5": "74dfe5b03c559d32af04ffc52efc5c14",
          "sha256": "a8929bd86193c859d9a6f13d80c990cc6948567a9fa73d2b53fe0d6885657a99"
        },
        "downloads": -1,
        "filename": "aiida_eos-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74dfe5b03c559d32af04ffc52efc5c14",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8",
        "size": 7350,
        "upload_time": "2022-10-07T08:24:30",
        "upload_time_iso_8601": "2022-10-07T08:24:30.949718Z",
        "url": "https://files.pythonhosted.org/packages/30/b9/eac01c1466258fca5ea8c5c6a8ac07d544c3ce0ad49e7760a3acd580d5dc/aiida_eos-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": null,
        "digests": {
          "blake2b_256": "d12028e3ca8f9d6e74767cd44ee5c99c9306ebd532c2392887b8d4dac02b7434",
          "md5": "66a98a930cc82c96457622fed1ed26af",
          "sha256": "958a3f546661db568a9fdbee1719d48337a8cc9f5ee6fe649fa74ea916851ee5"
        },
        "downloads": -1,
        "filename": "aiida_eos-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "66a98a930cc82c96457622fed1ed26af",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 37814529,
        "upload_time": "2022-10-07T08:24:44",
        "upload_time_iso_8601": "2022-10-07T08:24:44.418877Z",
        "url": "https://files.pythonhosted.org/packages/d1/20/28e3ca8f9d6e74767cd44ee5c99c9306ebd532c2392887b8d4dac02b7434/aiida_eos-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "30b9eac01c1466258fca5ea8c5c6a8ac07d544c3ce0ad49e7760a3acd580d5dc",
        "md5": "74dfe5b03c559d32af04ffc52efc5c14",
        "sha256": "a8929bd86193c859d9a6f13d80c990cc6948567a9fa73d2b53fe0d6885657a99"
      },
      "downloads": -1,
      "filename": "aiida_eos-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "74dfe5b03c559d32af04ffc52efc5c14",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8",
      "size": 7350,
      "upload_time": "2022-10-07T08:24:30",
      "upload_time_iso_8601": "2022-10-07T08:24:30.949718Z",
      "url": "https://files.pythonhosted.org/packages/30/b9/eac01c1466258fca5ea8c5c6a8ac07d544c3ce0ad49e7760a3acd580d5dc/aiida_eos-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": null,
      "digests": {
        "blake2b_256": "d12028e3ca8f9d6e74767cd44ee5c99c9306ebd532c2392887b8d4dac02b7434",
        "md5": "66a98a930cc82c96457622fed1ed26af",
        "sha256": "958a3f546661db568a9fdbee1719d48337a8cc9f5ee6fe649fa74ea916851ee5"
      },
      "downloads": -1,
      "filename": "aiida_eos-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "66a98a930cc82c96457622fed1ed26af",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 37814529,
      "upload_time": "2022-10-07T08:24:44",
      "upload_time_iso_8601": "2022-10-07T08:24:44.418877Z",
      "url": "https://files.pythonhosted.org/packages/d1/20/28e3ca8f9d6e74767cd44ee5c99c9306ebd532c2392887b8d4dac02b7434/aiida_eos-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}