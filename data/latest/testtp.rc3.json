{
  "info": {
    "author": "Be5yond",
    "author_email": "beyond147896@126.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Testtp\nhttp client for testers \n\n## Supported Features\n- - -\n- [defaultdata 系统级及接口级的默认参数](#默认参数) \n  - [Session级默认参数](#Session级默认参数)\n  - [API级默认参数](#API级别默认参数)\n- [render 参数动态渲染（变量或者函数）](#数据动态渲染)\n  - [数据变量](#变量缓存---cache)\n  - [函数变量](#使用函数实时计算参数---register_render)\n- [validate 基于模板的数据校验](#数据校验)\n  - [response校验](#校验返回body---validate)\n  - [预处理后校验](#数据抽取---json_query)\n\n## Built with\n- - -\n- [requests](https://github.com/psf/requests)\n- [jmespath](https://github.com/jmespath/jmespath.py)\n- [schema](https://github.com/keleshev/schema)\n- [loguru](https://github.com/Delgan/loguru)\n\n## Installation\n```\npython -m pip install testtp\n```\n## 默认参数\n- - -\n### Session级默认参数   \nSession继承自requests.Session.利用requests.Session实现默认数据。\n```python\nfrom testtp import Session\ns = Session()\ns.headers['X-request-type'] = 'autotest'\ns.params = {'default_params': 'value'}\ns.get('http://httpbin.org/get', params={'custom': 'query'}, headers={'X-token': 'loda'}) \n\n>>> OUTPUT\n2020-12-05 19:26:03.677 | SEND     | testtp.Req:_restore_resp:22 - <= request url => \nhttp://httpbin.org/get?default_params=value&custom=query\n2020-12-05 19:26:03.682 | RECV     | testtp.Req:_restore_resp:23 - <= response data => \n{\n    \"args\": {\n        \"custom\": \"query\",   # 本次请求中的params\n        \"default_params\": \"value\"    # Session中所有请求的默认params\n    },\n    \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Host\": \"httpbin.org\",\n        \"User-Agent\": \"python-requests/2.25.0\",\n        \"X-Amzn-Trace-Id\": \"Root=1-5fcb6e4c-1d48a5716e5a0a1b2328d089\",\n        \"X-Request-Type\": \"autotest\",  # Session中所有请求默认header\n        \"X-Token\": \"loda\"     # 本次请求中的header\n    },\n    \"origin\": \"159.138.88.145\",\n    \"url\": \"http://httpbin.org/get?default_params=value&custom=query\"\n}\n```\n### API级别默认参数\n使用defaultdata装饰器实现添加接口默认参数\n```python\nclass Client(Session):\n    def __init__(self, host):\n        self.host = host\n        super().__init__()\n\n    # 定义api接口，添加默认header和body数据\n    @defaultdata(\n        headers={\"X-API-header\": \"default-API\"},\n        json={\"default-body-data\": \"some_api\"}\n    )\n    def some_api(self, **kwargs):\n        self.post(self.host+'/post', **kwargs)\n\n\nc = Client('http://httpbin.org')\nc.some_api(json={'real': 'hadogen'})\n\n>>> OUTPUT\n2020-12-06 21:44:47.948 | SEND     | testtp.Req:_wrapper:35 - <= request body => \n{\n    \"default-body-data\": \"some_api\",  # API默认参数\n    \"real\": \"hadogen\"                 # 本次请求参数\n}\n2020-12-06 21:44:48.432 | SEND     | testtp.Req:_restore_resp:22 - <= request url => \nhttp://httpbin.org/post\n2020-12-06 21:44:48.438 | RECV     | testtp.Req:_restore_resp:23 - <= response data => \n{\n    \"args\": {},\n    \"data\": \"{\\\"default-body-data\\\": \\\"some_api\\\", \\\"real\\\": \\\"hadogen\\\"}\",\n    \"files\": {},\n    \"form\": {},\n    \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Content-Length\": \"52\",\n        \"Content-Type\": \"application/json\",\n        \"Host\": \"httpbin.org\",\n        \"User-Agent\": \"python-requests/2.25.0\",\n        \"X-Amzn-Trace-Id\": \"Root=1-5fcce04f-26e703c65519aff126e74acf\",\n        \"X-Api-Header\": \"default-API\"    #API-默认参数\n    },\n    \"json\": {\n        \"default-body-data\": \"some_api\",  # API默认参数\n        \"real\": \"hadogen\"                 # 本次请求参数\n    },\n    \"origin\": \"61.149.134.32\",\n    \"url\": \"http://httpbin.org/post\"\n}\n```\n## 数据动态渲染   \n使用预定义的规则标识数据中的变量，执行时会将testdata对应位置的值做替换\n> **用字符串规则来标识函数和变量，使得测试数据为json格式，方便数据的存储于外部文件或数据库*\n- - -\n### 变量缓存---cache\n“{{ x }}\"字符串括起来的数据x被认为是变量，运行时将替换成cache中的对应数据。   \n\n```python\ns = Session()\ns.cache = {'token_holder': 'real_token'}  # 设置缓存数据\nbody={'data': 'testdata', 'token': '{{ token_holder }}'}\ns.post('http://httpbin.org/post', json=body)\n>>> OUTPUT\n2020-12-06 22:07:40.964 | SEND     | testtp.Req:_wrapper:35 - <= request body => \n{\n    \"data\": \"testdata\",\n    \"token\": \"real_token\"  # token被替换成cache中的数据\n}\n```\n### 上下文数据缓存---stash\nSession将最近一次请求的response存储。使用stash函数可以从response数据抽取关键的数据，存储到cache，供后面请求使用,\njson_query提取规则为[jmespath](https://jmespath.org/)规则\n```python\ns = Session()\ns.cache = {'token_holder': 'real_token'}\nbody={'data': 'testdata', 'token': '{{ token_holder }}'}\ns.post('http://httpbin.org/post', json=body)\ns.stash(json_query='headers.Host', key='host') # 将返回的content中 'header.Host'字段存到缓存cache中，key为'host'\nprint(self.cache)\n\n>>> OUTPUT\n{\"token_holder\": \"real_token\", \"host\": \"httpbin.org\"}\n\nbody={'context_vars': '{{ host }}'}\ns.post('http://httpbin.org/post', json=body)\n\n>>> OUTPUT\n2020-12-06 22:07:41.644 | SEND xx   | testtp.Req:_wrapper:35 - <= request body => \n{\n    \"context_vars\": \"httpbin.org\"\n}\n```\n### 使用函数实时计算参数---register_render\n“{% f(x) %}\"字符串括起来的数据f(x)被认为是函数，运行时将执行函数来生成数据。   \n支持python内置函数例如random.randint()， 也可以用register_render将自定义函数注册给渲染器使用。 \n```python\ndef get_timestamp(shift: int):\n        return int(time.time()) + shift\ns = Session()\ns.register_render(get_timestamp) \nbody={'data': 'testdata', 'timestamp': '{% get_timestamp(100) %}'}\ns.post('http://httpbin.org/post', json=body)\n\n>>> OUTPUT\n2020-12-06 22:36:32.784 | SEND     | testtp.Req:_wrapper:35 - <= request body => \n{\n    \"data\": \"testdata\",\n    \"timestamp\": 1607265492  # 实际参数为get_timestamp函数返回的当前时间戳\n}\n```\n\n## 数据校验\n- - -\n### 校验返回body---validate\nvalidate方法对response进行格式校验， scm与请求数据一样会经过render处理，支持变量和函数规则同\"{{ x }}\", \"{% f %}\".    \n> **注意[schema](https://github.com/keleshev/schema)中的函数只传函数名，执行时会将response对应位置的值作为参数调用f，函数f的返回，应是一个bool值。*\n```python\ndef is_url(s):\n    return s.startswith('http')\ns = Session()\ns.get('http://httpbin.org/get')\nscm = {\n    \"args\": {},\n    \"headers\": {\n        \"Accept\": \"{% str %}\",\n        \"Accept-Encoding\": \"{% str %}\",\n        \"Host\": \"httpbin.org\",\n        \"User-Agent\": \"{% str %}\",\n        \"X-Amzn-Trace-Id\": \"{% str %}\"\n    },\n    \"origin\": \"{% str %}\",\n    \"url\": \"http://httpbin.org/get\"\n}\ns.validate(scm)\n\n>>> OUTPUT\n2020-12-07 14:40:05.689 | SEND     | testtp.Req:_restore_resp:22 - <= request url => \nhttp://httpbin.org/get\n2020-12-07 14:40:05.691 | RECV     | testtp.Req:_restore_resp:23 - <= response data => \n{\n    \"args\": {},\n    \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Host\": \"httpbin.org\",\n        \"User-Agent\": \"python-requests/2.25.0\",\n        \"X-Amzn-Trace-Id\": \"Root=1-5fcdce45-6e7808ba224497484deb1bf1\"\n    },\n    \"origin\": \"223.223.188.146\",\n    \"url\": \"http://httpbin.org/get\"\n}\n2020-12-07 14:40:05.695 | DEBUG    | testtp.Req:validate:81 - <= schema template => \n{'args': {}, 'headers': {'Accept': <class 'str'>, 'Accept-Encoding': <class 'str'>, 'Host': 'httpbin.org', 'User-Agent': <class 'str'>, 'X-Amzn-Trace-Id': <class 'str'>}, 'origin': <class \n'str'>, 'url': <function test_validate_response_custom_function.<locals>.is_url at 0x000001B478983280>}\n```\n### 数据抽取---json_query\n有些场景下需要对返回数据进行一些预处理（如：抽取关键字段，求和，求最大值等），之后才进行校验，这时需要传入数据处理规则json_query,提取规则为[jmespath](https://jmespath.org/)规则\n```python\ndata = {\n    'data_list': [\n        {'type': 'A', 'count': 80},\n        {'type': 'B', 'count': 90},\n        {'type': 'C', 'count': 70},\n        {'type': 'D', 'count': 50},\n        ]\n    }\nurl = 'http://httpbin.org/post'\ns = Session()\ns.post(url, json=data)\nscm = ['A', 'B', 'C', 'D']\ns.validate(schema=scm, json_query='json.data_list[].type')\n\n>>> OUTPUT\n2020-12-07 14:38:31.241 | RECV     | testtp.Req:_restore_resp:23 - <= response data => \n{\n    \"args\": {},\n    \"data\": \"{\\\"data_list\\\": [{\\\"type\\\": \\\"A\\\", \\\"count\\\": 80}, {\\\"type\\\": \\\"B\\\", \\\"count\\\": 80}, {\\\"type\\\": \\\"C\\\", \\\"count\\\": 80}, {\\\"type\\\": \\\"D\\\", \\\"count\\\": 80}]}\",\n    \"files\": {},\n    \"form\": {},\n    \"headers\": {\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate\",\n        \"Content-Length\": \"127\",\n        \"Content-Type\": \"application/json\",\n        \"Host\": \"httpbin.org\",\n        \"User-Agent\": \"python-requests/2.25.0\",\n        \"X-Amzn-Trace-Id\": \"Root=1-5fcdcde7-332bb4ee193f31915faee06b\"\n    },\n    \"json\": {\n        \"data_list\": [\n            {\"count\": 80,\"type\": \"A\"},\n            {\"count\": 90,\"type\": \"B\"},\n            {\"count\": 70,\"type\": \"C\"},\n            {\"count\": 50,\"type\": \"D\"},\n        ]\n    },\n    \"origin\": \"223.223.188.146\",\n    \"url\": \"http://httpbin.org/post\"\n}\n2020-12-07 14:38:31.246 | DEBUG    | testtp.Req:validate:73 - <= json query => \njson.data_list[].type\n2020-12-07 14:38:31.247 | DEBUG    | testtp.Req:validate:74 - <= extract body => \n['A', 'B', 'C', 'D']\n2020-12-07 14:38:31.248 | DEBUG    | testtp.Req:validate:81 - <= schema template => \n['A', 'B', 'C', 'D']\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Be5yond/testtp",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "testtp",
    "package_url": "https://pypi.org/project/testtp/",
    "platform": "",
    "project_url": "https://pypi.org/project/testtp/",
    "project_urls": {
      "Homepage": "https://github.com/Be5yond/testtp"
    },
    "release_url": "https://pypi.org/project/testtp/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Http client for testers",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11932933,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "143e1b699499f990544d64462a52ccba049f935d8c280b0fb561311d7e8640d4",
          "md5": "00ae7bb5c307c4edabb92a5fe84671fc",
          "sha256": "c1b7072fa7a45b6404a9d9ffa9606033df60936a78f9bc2f54c9f3b280afa819"
        },
        "downloads": -1,
        "filename": "testtp-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "00ae7bb5c307c4edabb92a5fe84671fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12728,
        "upload_time": "2020-12-09T12:37:57",
        "upload_time_iso_8601": "2020-12-09T12:37:57.558099Z",
        "url": "https://files.pythonhosted.org/packages/14/3e/1b699499f990544d64462a52ccba049f935d8c280b0fb561311d7e8640d4/testtp-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "dcf3718667fbee6be591eee7f23b7e4456c628a15bfd52bd54c12e1b2c293d4d",
          "md5": "5d87b1df4b7a6e97e1097cba739f95da",
          "sha256": "7727acc2c0860bda9d56f01d41e9b1c06fc0eb412864b4404339e4f044fe8e4e"
        },
        "downloads": -1,
        "filename": "testtp-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5d87b1df4b7a6e97e1097cba739f95da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14723,
        "upload_time": "2020-12-09T12:37:59",
        "upload_time_iso_8601": "2020-12-09T12:37:59.350518Z",
        "url": "https://files.pythonhosted.org/packages/dc/f3/718667fbee6be591eee7f23b7e4456c628a15bfd52bd54c12e1b2c293d4d/testtp-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2c3ff104154069658dabbf15b884b5ed7f1a3ab92dac71c2f9e2d9300c0047a4",
          "md5": "02b2856b17a593a259f1ed1bf23acfc8",
          "sha256": "837faa7f6e8da456dd339477bff9043fc6f7ce3c2c7bcd968041969068bd2d8f"
        },
        "downloads": -1,
        "filename": "testtp-0.0.2a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02b2856b17a593a259f1ed1bf23acfc8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13819,
        "upload_time": "2020-12-15T02:28:01",
        "upload_time_iso_8601": "2020-12-15T02:28:01.900851Z",
        "url": "https://files.pythonhosted.org/packages/2c/3f/f104154069658dabbf15b884b5ed7f1a3ab92dac71c2f9e2d9300c0047a4/testtp-0.0.2a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f886ad1586f9d1293f4c8b22339bb89fd759572ac29dca77e17796d2533cf74",
          "md5": "fdbfbec6ed455a3b6b7bb3a8f6e47a46",
          "sha256": "e365403695154f706f22c648aeac5cc1641fcdeb2fbadfd0edbf3e209b88d422"
        },
        "downloads": -1,
        "filename": "testtp-0.0.2a0.tar.gz",
        "has_sig": false,
        "md5_digest": "fdbfbec6ed455a3b6b7bb3a8f6e47a46",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15821,
        "upload_time": "2020-12-15T02:27:45",
        "upload_time_iso_8601": "2020-12-15T02:27:45.181561Z",
        "url": "https://files.pythonhosted.org/packages/8f/88/6ad1586f9d1293f4c8b22339bb89fd759572ac29dca77e17796d2533cf74/testtp-0.0.2a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff62afa899ec4d6ac72f665db6c347786ec8a3407f2035a6b8b420254951f26e",
          "md5": "b3104971d8b0cea5c93fd1fce377a0ad",
          "sha256": "d22909742f10d6fb8eda18cef805ed13202d156f63c044c6ecaa585b30614483"
        },
        "downloads": -1,
        "filename": "testtp-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3104971d8b0cea5c93fd1fce377a0ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14247,
        "upload_time": "2021-11-05T03:16:51",
        "upload_time_iso_8601": "2021-11-05T03:16:51.859279Z",
        "url": "https://files.pythonhosted.org/packages/ff/62/afa899ec4d6ac72f665db6c347786ec8a3407f2035a6b8b420254951f26e/testtp-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "725c04da2586a5c60cc4d9459cfbb228b5aeb9b79cec30b2863cd35141f98230",
          "md5": "45257bb09e7af603398e32f5097d6b0b",
          "sha256": "a610e23091a3e6e216fcd904613c716ee56e6df2ae69569c14b48d51424cd541"
        },
        "downloads": -1,
        "filename": "testtp-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "45257bb09e7af603398e32f5097d6b0b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16181,
        "upload_time": "2021-11-05T03:15:15",
        "upload_time_iso_8601": "2021-11-05T03:15:15.176500Z",
        "url": "https://files.pythonhosted.org/packages/72/5c/04da2586a5c60cc4d9459cfbb228b5aeb9b79cec30b2863cd35141f98230/testtp-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ff62afa899ec4d6ac72f665db6c347786ec8a3407f2035a6b8b420254951f26e",
        "md5": "b3104971d8b0cea5c93fd1fce377a0ad",
        "sha256": "d22909742f10d6fb8eda18cef805ed13202d156f63c044c6ecaa585b30614483"
      },
      "downloads": -1,
      "filename": "testtp-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b3104971d8b0cea5c93fd1fce377a0ad",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14247,
      "upload_time": "2021-11-05T03:16:51",
      "upload_time_iso_8601": "2021-11-05T03:16:51.859279Z",
      "url": "https://files.pythonhosted.org/packages/ff/62/afa899ec4d6ac72f665db6c347786ec8a3407f2035a6b8b420254951f26e/testtp-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "725c04da2586a5c60cc4d9459cfbb228b5aeb9b79cec30b2863cd35141f98230",
        "md5": "45257bb09e7af603398e32f5097d6b0b",
        "sha256": "a610e23091a3e6e216fcd904613c716ee56e6df2ae69569c14b48d51424cd541"
      },
      "downloads": -1,
      "filename": "testtp-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "45257bb09e7af603398e32f5097d6b0b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16181,
      "upload_time": "2021-11-05T03:15:15",
      "upload_time_iso_8601": "2021-11-05T03:15:15.176500Z",
      "url": "https://files.pythonhosted.org/packages/72/5c/04da2586a5c60cc4d9459cfbb228b5aeb9b79cec30b2863cd35141f98230/testtp-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}