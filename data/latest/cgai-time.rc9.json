{
  "info": {
    "author": "Master Zhang",
    "author_email": "360014296@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# cgai-time\r\n\r\n#### 介绍\r\n简单又实用的时间python处理库\r\n\r\n#### 注意\r\n\r\n非时分秒日期格式：    \r\n1. 推荐的日期格式为%Y-%m-%d，比如：2021-07-20\r\n2. 也支持数字数组格式表示，比如： (2021,7,20)\r\n\r\n时分秒格式：\r\n1. 仅支持%Y-%m-%d %H:%M:%S，比如：\"2021-07-20 09:43:49\"\r\n2. 建议以时间戳的形式计算时间计算，最后显示格式化日期\r\n\r\n#### 安装教程\r\n\r\n```python\r\npip install cgai-time\r\n```\r\n\r\n#### 案例\r\n\r\n说明：案例中演示了多个函数不同参数的实现方式，结果一致\r\n\r\n#### 实例时间工具\r\n```python\r\nfrom cgai_time.Time import TimeHandler\r\nct = TimeHandler()\r\n```\r\n\r\n#### 日期格式转化\r\n\r\n##### 字符串格式转成数组格式: \"2021-07-16\" -> (2021,7,16)\r\n```python\r\nt_date = ct.strDate2TupleDate('2021-07-16')\r\nprint(t_date) # (2021,7,16)\r\n```\r\n\r\n##### 数组格式转成字符串格式:  (2021,7,16) -> \"2021-07-16\"\r\n```python\r\ns_date = ct.tupleDate2StrDate((2021,7,16))\r\nprint(s_date) # \"2021-07-16\"\r\n```\r\n\r\n##### 格式化日期转时间戳 \r\n```python\r\nstr_time = '2021-07-18 17:19:44'\r\ntime_stamp = ct.strTime2TimeStamp(str_time)\r\nprint(time_stamp) # 1626599984.0\r\n```\r\n\r\n##### 时间戳转格式化日期时间 \r\n```python\r\ntime_stamp = 1626599984.0\r\nstr_time = ct.timeStamp2StrTime(time_stamp)\r\nprint(str_time) # \"2021-07-18 17:19:44\"\r\n```\r\n\r\n##### 将斜杠/日期转成减号-日期 \r\n```python\r\nslash_date = '2023/3/6'\r\nsdate = ct.slashDate2StrDate(slash_date)\r\nprint(sdate)  # 2023-03-06\r\n```\r\n##### 将减号-日期转成斜杠/日期\r\n```python\r\ndate = '2023-03-06'\r\nslash_date = ct.strDate2SlashDate(date)\r\nprint(slash_date) # 2023/3/6\r\n```\r\n\r\n\r\n##### 秒数转分钟 \r\n```python\r\nseconds = 70\r\nminutes = ct.s2m(seconds)\r\nint_minutes = ct.s2m(seconds,getInt=True)  # 获取整数部分\r\nprint(minutes) # 1.1666666666666667\r\nprint(int_minutes) # 1\r\n```\r\n\r\n##### 分钟转秒数 \r\n```python\r\nminutes = 12.015\r\nseconds = ct.m2s(minutes)\r\nint_seconds = ct.m2s(minutes,getInt=True)\r\nprint(seconds)  # 720.9000000000001\r\nprint(int_seconds)  # 720\r\n```\r\n\r\n##### 秒转小时 \r\n```python\r\nseconds = 1244\r\nhours = ct.s2h(seconds)\r\nint_hours = ct.s2h(seconds,getInt=True)\r\nprint(hours)  # 0.34555555555555556\r\nprint(int_hours)  # 0\r\n```\r\n\r\n##### 小时转秒 \r\n```python\r\nhours = 0.342\r\nseconds = ct.h2s(hours)\r\nint_seconds = ct.h2s(hours,getInt=True)\r\nprint(seconds)  # 1231.2000000000003\r\nprint(int_seconds)  # 1231\r\n```\r\n\r\n##### 秒转天数 \r\n```python\r\nseconds = 112341\r\ndays = ct.s2d(seconds)\r\nint_days = ct.s2d(seconds,getInt=True)\r\nprint(days)  # 1.3002430555555555\r\nprint(int_days) # 1\r\n```\r\n\r\n##### 天数转秒 \r\n```python\r\ndays = 0.451\r\nseconds = ct.d2s(days)\r\nint_seconds = ct.d2s(days,getInt=True)\r\nprint(seconds)  # 38966.399999999994\r\nprint(int_seconds)  # 38966\r\n```\r\n\r\n##### 分钟转小时 \r\n```python\r\nminutes = 1234\r\nhours = ct.m2h(minutes)\r\nint_hours = ct.m2h(minutes,getInt=True)\r\nprint(hours)  # 20.566666666666666\r\nprint(int_hours)  # 20\r\n```\r\n\r\n##### 小时转分钟\r\n```python\r\nhours = 0.241\r\nminutes = ct.h2m(hours)\r\nint_minutes = ct.h2m(hours,getInt=True)\r\nprint(minutes)  #  14.459999999999999\r\nprint(int_minutes)  # 14\r\n\r\n```\r\n\r\n##### 分钟转天数 \r\n```python\r\nminutes = 421321\r\ndays = ct.m2d(minutes)\r\nint_days = ct.m2d(minutes,getInt=True)\r\nprint(days)  # 292.5840277777778\r\nprint(int_days) # 292\r\n```\r\n\r\n##### 天数转分钟 \r\n```python\r\ndays = 0.912\r\nminutes = ct.d2m(days)\r\nint_minutes = ct.d2m(days,getInt=True)\r\nprint(minutes)  # 1313.2800000000002\r\nprint(int_minutes)  # 1313\r\n```\r\n\r\n##### 小时转天数 \r\n```python\r\nhours = 482\r\ndays = ct.h2d(hours)\r\nint_days = ct.h2d(hours,getInt=True)\r\nprint(days)  # 20.083333333333332\r\nprint(int_days)  # 20\r\n```\r\n\r\n##### 天转小时 \r\n```python\r\ndays = 0.924\r\nhours = ct.d2h(days)\r\nint_hours = ct.d2h(days,getInt=True)\r\nprint(hours)  #  22.176000000000002\r\nprint(int_hours)  # 22\r\n```\r\n\r\n##### 小时转毫秒\r\n```python\r\nhours = 2.5\r\nint_h,left_ms = ct.h2ms(hours)\r\n```\r\n\r\n##### 毫秒转小时\r\n```python\r\nms = 4600\r\nint_h,left_ms = ct.ms2h(ms)\r\n```\r\n\r\n\r\n##### 分钟转毫秒\r\n```python\r\nminutes = 1.5\r\nms = ct.m2ms(minutes)\r\n```\r\n\r\n##### 毫秒转分钟\r\n```python\r\nms = 4600\r\nint_m,left_ms = ct.ms2m(ms)\r\n```\r\n\r\n##### 秒转毫秒\r\n```python\r\nseconds = 2.5\r\nms = ct.s2ms(seconds)\r\n```\r\n\r\n##### 毫秒转秒\r\n```python\r\nms = 4600\r\nint_s,left_ms = ct.ms2s(ms)\r\n```\r\n\r\n##### 输入天数，小时，分钟转成秒 \r\n```python\r\nseconds = ct.getSeconds(d=1,h=3,m=25)\r\nprint(seconds)  # 98700\r\nseconds = ct.getSeconds(h=3,m=25)\r\nprint(seconds)  # 12300\r\n```\r\n\r\n##### 将秒数转成以天,小时,分钟,秒对应值 \r\n```python\r\nseconds = 3600*24+3599\r\ndhms = ct.DHMS(seconds)\r\nprint(dhms) #{'day': 1, 'hour': 0, 'minute': 59, 'second': 59}\r\n```\r\n\r\n\r\n##### 字幕时间转毫秒\r\n```python\r\nsrt = '00:02:42,950'\r\nms= ct.srt2ms(srt)\r\nprint(ms)  # 162950\r\n```\r\n\r\n##### 毫秒转字幕时间\r\n```python\r\nms = 4600\r\nsrt= ct.ms2srt(ms)\r\nprint(srt) # 00:00:04,600\r\n```\r\n\r\n\r\n#### 时间计算\r\n\r\n##### 获取当前时间戳 \r\n```python\r\ncts = ct.CTS()\r\nprint(cts)  #  1626660957.2461472\r\n```\r\n\r\n##### 获取当前格式化日期时间 \r\n```python\r\nstr_time = ct.StrTime()\r\nprint(str_time)  #  2021-07-20 09:43:49\r\n```\r\n\r\n##### 计算两格式化日期之间的所差秒数 \r\n```python\r\nstart_date = '2021-07-18 17:19:44'\r\nend_date = '2021-07-18 22:32:11'\r\ndt = ct.deltaTime(end_date,start_date)\r\nprint(dt)  # 18747.0\r\n```\r\n\r\n##### 格式化日期直接进行时间增减 \r\n```python\r\nstr_time = '2021-07-18 17:19:44'\r\nnew_str_time = ct.addTime(str_time,d=1)  # 增加一天\r\nprint(new_str_time)  # 2021-07-19 17:19:44\r\nnew_str_time = ct.addTime(str_time,h=8)  # 增加8小时\r\nprint(new_str_time)  # 2021-07-19 01:19:44\r\nnew_str_time = ct.subTime(str_time,m=50)  # 减少50分钟\r\nprint(new_str_time)  # 2021-07-18 16:29:44\r\nnew_str_time = ct.subTime(str_time,s=21)  # 减少21秒\r\nprint(new_str_time)  # 2021-07-18 17:18:23\r\nnew_str_time = ct.addTime(str_time,d=1,h=8,m=50,s=21) \r\nprint(new_str_time)  # 2021-07-21 18:48:37\r\n```\r\n\r\n##### 字幕时间增减毫秒\r\n```python\r\nstart_srt_time = '00:02:42,950'\r\nms = 4600\r\nend_srt_time = ct.srt_add(start_srt_time,ms)\r\nprint(end_srt_time)  # 00:02:47,550\r\n\r\nend_srt_time = ct.srt_sub(start_srt_time,ms)\r\nprint(end_srt_time)  #  00:02:38,350\r\n```\r\n\r\n\r\n\r\n#### 日计算\r\n\r\n##### 获取今日日期\r\n```python\r\ntoday = ct.getToday()\r\nprint(today)  # 2021-07-19\r\n```\r\n##### 获取昨天日期\r\n```python\r\nyesterday = ct.getYesterday()\r\nprint(yesterday)  # 2021-07-18\r\n```\r\n##### 获取明天日期\r\n```python\r\ntomorrow = ct.getTomorrow()\r\nprint(tomorrow)  # 2021-07-20\r\n```\r\n\r\n##### 计算两日期之间的相差多少天数 \r\n```python\r\nstart_date = '2021-05-15'\r\nend_date = '2021-07-18'\r\ndays = ct.deltaDays(start_date,end_date)\r\nprint(days)  # 64\r\ndays = ct.deltaDays(start_date=(2021,7,15),end_date=(2021,7,18))\r\nprint(days)  # 3\r\n```\r\n\r\n##### 日期加减 \r\n```python\r\nnew_date = ct.dateAdd('2021-07-20',5)\r\nnew_date = ct.dateAdd((2021,7,20),5)\r\nprint(new_date)  # 2021-07-25\r\n\r\nnew_date = ct.dateAdd('2021-07-20',-5)\r\nnew_date = ct.dateSub('2021-07-20',5)\r\nprint(new_date)  #  2021-07-15\r\n```\r\n\r\n##### 是否为周一 \r\n```python\r\nresult = ct.isMonday('2021-07-19')\r\nresult = ct.isMonday(2021,7,19)\r\nprint(result)  # True\r\n```\r\n\r\n##### 是否为周二 \r\n```python\r\nresult = ct.isTuesday('2021-07-20')\r\nresult = ct.isTuesday(2021,7,20)\r\nprint(result)  # True\r\n```\r\n\r\n##### 是否为周三 \r\n```python\r\nresult = ct.isWednesday('2021-07-21')\r\nresult = ct.isWednesday(2021,7,21)\r\nprint(result)  # True\r\n```\r\n\r\n##### 是否为周四 \r\n```python\r\nresult = ct.isThursday('2021-07-22')\r\nresult = ct.isThursday(2021,7,22)\r\nprint(result)  # True\r\n```\r\n\r\n##### 是否为周五 \r\n```python\r\nresult = ct.isFriday('2021-07-23')\r\nresult = ct.isFriday(2021,7,23)\r\nprint(result)  # True\r\n```\r\n\r\n##### 是否为周六 \r\n```python\r\nresult = ct.isSaturday('2021-07-24')\r\nresult = ct.isSaturday(2021,7,24)\r\nprint(result)  # True\r\n```\r\n\r\n##### 是否为周日/周末 \r\n```python\r\nresult = ct.isSunday('2021-07-25')\r\nresult = ct.isSunday(2021,7,25)\r\nresult = ct.isWeekend('2021-07-25')\r\nresult = ct.isWeekend(2021,7,25)\r\nprint(result)  # True\r\n```\r\n\r\n##### 获取指定前后日期之间所有日期列表 \r\n```python\r\nstart_date = '2021-06-28'\r\nend_date = '2021-07-18'\r\ndate_list = ct.getDateList(start_date,end_date)\r\ndate_list = ct.getDateList(start_date=(2021,6,28),end_date=(2021,7,18))\r\nprint(date_list)\r\n['2021-06-28', '2021-06-29', '2021-06-30', '2021-07-01', '2021-07-02', '2021-07-03',\r\n '2021-07-04', '2021-07-05', '2021-07-06', '2021-07-07', '2021-07-08', '2021-07-09',\r\n '2021-07-10', '2021-07-11', '2021-07-12', '2021-07-13', '2021-07-14', '2021-07-15',\r\n '2021-07-16', '2021-07-17', '2021-07-18']\r\n```\r\n\r\n##### 获取前后日期之间所跨年份 \r\n```python\r\nstart_date = '2020-05-15'\r\nend_date = '2021-07-18'\r\nyears = ct.acrossYears(start_date,end_date)\r\nprint(years)  # [2020, 2021]\r\nyears = ct.acrossYears(start_date=(2020,5,15),end_date=(2021,7,18))\r\nprint(years)  # [2020, 2021]\r\n```\r\n\r\n##### 获取前后日期之间所跨月份 \r\n```python\r\nstart_date = '2020-05-15'\r\nend_date = '2021-07-18'\r\nmonths = ct.acrossMonths(start_date,end_date)\r\nprint(months)  # [5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7]\r\nmonths = ct.acrossMonths(start_date=(2020,5,15),end_date=(2021,7,18))\r\nprint(months)  # [5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7]\r\n```\r\n\r\n##### 获取前后日期之间所跨周 \r\n```python\r\nstart_date = '2021-05-15'\r\nend_date = '2021-07-18'\r\nweeks = ct.acrossWeeks(start_date,end_date)\r\nweeks = ct.acrossWeeks(start_date=(2021,5,15),end_date=(2021,7,18))\r\nprint(weeks)  \r\n[['2021-05-10', '2021-05-11', '2021-05-12', '2021-05-13', '2021-05-14', '2021-05-15', '2021-05-16'],\r\n ['2021-05-17', '2021-05-18', '2021-05-19', '2021-05-20', '2021-05-21', '2021-05-22', '2021-05-23'],\r\n ['2021-05-24', '2021-05-25', '2021-05-26', '2021-05-27', '2021-05-28', '2021-05-29', '2021-05-30'],\r\n ['2021-05-31', '2021-06-01', '2021-06-02', '2021-06-03', '2021-06-04', '2021-06-05', '2021-06-06'],\r\n ['2021-06-07', '2021-06-08', '2021-06-09', '2021-06-10', '2021-06-11', '2021-06-12', '2021-06-13'],\r\n ['2021-06-14', '2021-06-15', '2021-06-16', '2021-06-17', '2021-06-18', '2021-06-19', '2021-06-20'],\r\n ['2021-06-21', '2021-06-22', '2021-06-23', '2021-06-24', '2021-06-25', '2021-06-26', '2021-06-27'],\r\n ['2021-06-28', '2021-06-29', '2021-06-30', '2021-07-01', '2021-07-02', '2021-07-03', '2021-07-04'],\r\n ['2021-07-05', '2021-07-06', '2021-07-07', '2021-07-08', '2021-07-09', '2021-07-10', '2021-07-11'],\r\n ['2021-07-12', '2021-07-13', '2021-07-14', '2021-07-15', '2021-07-16', '2021-07-17', '2021-07-18']]\r\n\r\n```\r\n\r\n##### 获取前后日期之间的所有星期一 \r\n```python\r\nstart_date = '2021-05-15'\r\nend_date = '2021-07-18'\r\nMondays = ct.getMondays(start_date,end_date)\r\nMondays = ct.getMondays(start_date=(2021,5,15),end_date=(2021,7,18))\r\nMondays = ct.getDatesByNumber(start_date,end_date,1)\r\nMondays = ct.getDatesByNumber(start_date=(2021,5,15),end_date=(2021,7,18),number=1)\r\nprint(Mondays)\r\n['2021-05-17', '2021-05-24', '2021-05-31',\r\n'2021-06-07', '2021-06-14', '2021-06-21',\r\n'2021-06-28', '2021-07-05', '2021-07-12']\r\n```\r\n\r\n##### 获取前后日期之间的所有星期二 \r\n```python\r\nTuesdays = ct.getTuesdays(start_date,end_date)\r\nTuesdays = ct.getTuesdays(start_date=(2021,5,15),end_date=(2021,7,18))\r\nTuesdays = ct.getDatesByNumber(start_date,end_date,2)\r\nTuesdays = ct.getDatesByNumber(start_date=(2021,5,15),end_date=(2021,7,18),number=2)\r\nprint(Tuesdays)\r\n['2021-05-18', '2021-05-25', '2021-06-01', '2021-06-08', '2021-06-15',\r\n '2021-06-22', '2021-06-29', '2021-07-06', '2021-07-13']\r\n```\r\n\r\n##### 获取前后日期之间的所有星期三 \r\n```python\r\nWednesdays = ct.getWednesdays(start_date,end_date)\r\nWednesdays = ct.getWednesdays(start_date=(2021,5,15),end_date=(2021,7,18))\r\nWednesdays = ct.getDatesByNumber(start_date,end_date,3)\r\nWednesdays = ct.getDatesByNumber(start_date=(2021,5,15),end_date=(2021,7,18),number=3)\r\nprint(Wednesdays)\r\n['2021-05-19', '2021-05-26', '2021-06-02', '2021-06-09', '2021-06-16',\r\n '2021-06-23','2021-06-30', '2021-07-07', '2021-07-14']\r\n```\r\n\r\n##### 获取前后日期之间的所有星期四 \r\n```python\r\nThursdays = ct.getThursdays(start_date,end_date)\r\nThursdays = ct.getThursdays(start_date=(2021,5,15),end_date=(2021,7,18))\r\nThursdays = ct.getDatesByNumber(start_date,end_date,4)\r\nThursdays = ct.getDatesByNumber(start_date=(2021,5,15),end_date=(2021,7,18),number=4)\r\nprint(Thursdays)\r\n['2021-05-20', '2021-05-27', '2021-06-03', '2021-06-10', '2021-06-17',\r\n '2021-06-24', '2021-07-01', '2021-07-08', '2021-07-15']\r\n```\r\n\r\n##### 获取前后日期之间的所有星期五 \r\n```python\r\nFridays = ct.getFridays(start_date,end_date)\r\nFridays = ct.getFridays(start_date=(2021,5,15),end_date=(2021,7,18))\r\nFridays = ct.getDatesByNumber(start_date,end_date,5)\r\nFridays = ct.getDatesByNumber(start_date=(2021,5,15),end_date=(2021,7,18),number=5)\r\nprint(Fridays)\r\n['2021-05-21', '2021-05-28', '2021-06-04', '2021-06-11',\r\n '2021-06-18', '2021-06-25', '2021-07-02', '2021-07-09', '2021-07-16']\r\n```\r\n\r\n##### 获取前后日期之间的所有星期六 \r\n```python\r\nSaturdays = ct.getSaturdays(start_date,end_date)\r\nSaturdays = ct.getSaturdays(start_date=(2021,5,15),end_date=(2021,7,18))\r\nSaturdays = ct.getDatesByNumber(start_date,end_date,6)\r\nSaturdays = ct.getDatesByNumber(start_date=(2021,5,15),end_date=(2021,7,18),number=6)\r\nprint(Saturdays)\r\n['2021-05-15', '2021-05-22', '2021-05-29', '2021-06-05', '2021-06-12',\r\n '2021-06-19','2021-06-26', '2021-07-03', '2021-07-10', '2021-07-17']\r\n```\r\n\r\n##### 获取前后日期之间的所有星期天 \r\n```python\r\nSundays = ct.getSundays(start_date,end_date)\r\nSundays = ct.getSundays(start_date=(2021,5,15),end_date=(2021,7,18))\r\nSundays = ct.getDatesByNumber(start_date,end_date,7)\r\nSundays = ct.getDatesByNumber(start_date=(2021,5,15),end_date=(2021,7,18),number=7)\r\nprint(Sundays)\r\n['2021-05-16', '2021-05-23', '2021-05-30', '2021-06-06', '2021-06-13',\r\n '2021-06-20', '2021-06-27', '2021-07-04', '2021-07-11', '2021-07-18']\r\n```\r\n\r\n\r\n\r\n#### 周计算\r\n\r\n##### 获取指定日期的所在周几数值 \r\n```python\r\nweekday_number = ct.getWeekdayNumber(2021,7,16)\r\nweekday_number = ct.getWeekdayNumber('2021-07-16')\r\nprint(weekday_number) # 5\r\n\r\n```\r\n\r\n##### 获取指定日期的周几名称 \r\n```python\r\nweekday_cname = ct.getWeekdayCName(2021,7,16)\r\nweekday_cname = ct.getWeekdayCName('2021-07-16')\r\nprint(weekday_cname) # 周五\r\n```\r\n\r\n##### 判定是否为周末 也就是星期天 \r\n```python\r\nisWeekend = ct.isWeekend(2021,7,16)\r\nprint(isWeekend)  # False\r\nisWeekend = ct.isWeekend('2021-07-18')\r\nprint(isWeekend)  # True\r\n```\r\n\r\n##### 获取本周起始日期与结束日期 \r\n```python\r\ncurrent_week_start,current_week_end = ct.getCurrentWeekStartAndEnd()\r\nprint(current_week_start,current_week_end)  # 2021-07-19 2021-07-25\r\n```\r\n\r\n##### 获取上周起始日期与结束日期 \r\n```python\r\nlast_week_start,last_week_end = ct.getLastWeekStartAndEnd()\r\nprint(last_week_start,last_week_end)  # 2021-07-12 2021-07-18\r\n```\r\n\r\n##### 获取下周起始日期与结束日期 \r\n```python\r\nnext_week_start,next_week_end = ct.getNextWeekStartAndEnd()\r\nprint(next_week_start,next_week_end)  # 2021-07-26 2021-08-01\r\n```\r\n\r\n##### 获取指定日期所在周的起始与结束日期 \r\n```python\r\nweek_start, week_end = ct.getWeekStartAndEnd(2021, 7, 16)\r\nweek_start, week_end = ct.getWeekStartAndEnd('2021-07-16')\r\nprint(week_start, week_end) # '2021-07-12', '2021-07-18'\r\n```\r\n\r\n##### 获取指定某天所在周的所有日期列表 \r\n```python\r\nweekdates = ct.getWeekDates('2021-07-16')\r\nweekdates = ct.getWeekDates(2021,7,16)\r\nprint(weekdates)  # ['2021-07-12', '2021-07-13', '2021-07-14', '2021-07-15', '2021-07-16', '2021-07-17', '2021-07-18']\r\n```\r\n\r\n##### 获取指定两日期之间所跨周 \r\n```python\r\nstart_date = '2021-07-15'\r\nend_date = '2021-07-18'\r\n\r\nweeks = ct.acrossWeeks(start_date,end_date)\r\nweeks = ct.acrossWeeks(start_date=(2021,7,1),end_date=(2021,7,18))\r\nprint(len(weeks))\r\nprint(weeks)\r\n\r\n3\r\n[['2021-06-28', '2021-06-29', '2021-06-30', '2021-07-01', '2021-07-02', '2021-07-03', '2021-07-04'], \r\n['2021-07-05', '2021-07-06', '2021-07-07', '2021-07-08', '2021-07-09', '2021-07-10', '2021-07-11'],\r\n ['2021-07-12', '2021-07-13', '2021-07-14', '2021-07-15', '2021-07-16', '2021-07-17', '2021-07-18']]\r\n```\r\n\r\n\r\n#### 月操作\r\n\r\n##### 月份加减\r\n```python\r\nnew_date = ct.monthAdd('2021-12-03',11)\r\nprint(new_date) #2022-11-3\r\nnew_date = ct.monthAdd('2021-12-03',-11)\r\nprint(new_date) #2021-01-03\r\n```\r\n\r\n##### 判定指定月份是否为31天 \r\n```python\r\nisMonth31 = ct.isMonth31(8)\r\nisMonth31 = ct.isMonth31('8')\r\nprint(isMonth31)  # True\r\n```\r\n\r\n##### 获取本月起始与结束日期 \r\n```python\r\ncurrent_month_start,current_month_end = ct.getCurrentMonthStartAndEnd()\r\nprint(current_month_start,current_month_end)  # 2021-07-01 2021-07-31\r\n```\r\n\r\n##### 获取上月起始与结束日期 \r\n```python\r\nlast_month_start,last_month_end = ct.getLastMonthStartAndEnd()\r\nprint(last_month_start,last_month_end)  # 2021-06-01 2021-06-30\r\n```\r\n\r\n##### 获取下月起始与结束日期 \r\n```python\r\nnext_month_start,next_month_end = ct.getNextMonthStartAndEnd()\r\nprint(next_month_start,next_month_end)  # 2021-08-01 2021-08-31\r\n```\r\n\r\n##### 获取指定某天所在月份的起始与结束日期 \r\n```python\r\nstart_day,end_day = ct.getMonthStartAndEnd(2021,7,16)\r\nstart_day,end_day = ct.getMonthStartAndEnd('2021-07-16')\r\nprint(start_day,end_day)  #  2021-07-01 2021-07-31\r\n\r\n```\r\n\r\n##### 获取指定年指定月的所有日期列表 \r\n```python\r\nmonth_dates = ct.getMonthDateList(2021,2)\r\nmonth_dates = ct.getMonthDateList(date='2021-02-01')\r\nmonth_dates = ct.getMonthDateList(date=(2021,2,12))\r\nprint(month_dates)\r\n['2021-02-01', '2021-02-02', '2021-02-03', '2021-02-04', '2021-02-05', '2021-02-06', '2021-02-07',\r\n '2021-02-08', '2021-02-09', '2021-02-10', '2021-02-11', '2021-02-12', '2021-02-13', '2021-02-14',\r\n '2021-02-15', '2021-02-16', '2021-02-17', '2021-02-18', '2021-02-19', '2021-02-20', '2021-02-21',\r\n '2021-02-22', '2021-02-23', '2021-02-24', '2021-02-25', '2021-02-26', '2021-02-27', '2021-02-28']\r\n\r\n```\r\n\r\n##### 获取指定年月所有周 \r\n```python\r\nmonth_weeks = ct.getMonthWeeks(2021,7)\r\nmonth_weeks = ct.getMonthWeeks(date='2021-07-02')\r\nmonth_weeks = ct.getMonthWeeks(date=(2021,7,2))\r\nprint(month_weeks)\r\n[['2021-06-28', '2021-06-29', '2021-06-30', '2021-07-01', '2021-07-02', '2021-07-03', '2021-07-04'],\r\n ['2021-07-05', '2021-07-06', '2021-07-07', '2021-07-08', '2021-07-09', '2021-07-10', '2021-07-11'],\r\n ['2021-07-12', '2021-07-13', '2021-07-14', '2021-07-15', '2021-07-16', '2021-07-17', '2021-07-18'],\r\n ['2021-07-19', '2021-07-20', '2021-07-21', '2021-07-22', '2021-07-23', '2021-07-24', '2021-07-25']]\r\n\r\n```\r\n\r\n#### 季度计算\r\n\r\n##### 获取指定天所在的季度信息\r\n```python\r\ndate = '2023-03-23'\r\nquarter_number,quarter_list = ct.getQuarter(date)\r\nprint(quarter_number,quarter_list)  # 1  [1,2,3]    表示是在第一季度,该季度有1,2,3个月\r\n\r\n```\r\n\r\n##### 获取指定天所在的季度的各月起始日期\r\n```python\r\ndate = '2023-03-23'\r\nquarter_start_dates = ct.getQuarterStartDates(date)\r\nprint(quarter_start_dates)  # ['2023-01-01', '2023-02-01', '2023-03-01']   \r\n```\r\n##### 获取本季度的各月起始日期\r\n```python\r\nquarter_start_dates = ct.getCurrentQuarterStartDates()\r\nprint(quarter_start_dates)  # ['2023-01-01', '2023-02-01', '2023-03-01'] \r\n```\r\n##### 获取上季度的各月起始日期\r\n```python\r\nquarter_start_dates = ct.getLastQuarterStartDates()\r\nprint(quarter_start_dates)  # ['2022-10-01', '2022-11-01', '2022-12-01'] \r\n```\r\n\r\n##### 获取下季度的各月起始日期\r\n```python\r\nquarter_start_dates = ct.getNextQuarterStartDates()\r\nprint(quarter_start_dates)  # ['2023-04-01', '2023-05-01', '2023-06-01'] \r\n```\r\n\r\n##### 基于指定天进行季度相加，返回季度的各月起始日期\r\n```python\r\ndate = '2022-02-02'\r\nquarter_start_dates = ct.quarterAdd(date,3)   # 该天所在季度向后再加3个季度\r\nprint(quarter_start_dates)  # ['2022-10-01', '2022-11-01', '2022-12-01']  \r\n```\r\n\r\n##### 基于指定天进行季度相减，返回季度的各月起始日期\r\n```python\r\ndate = '2022-03-23'\r\nquarter_start_dates = ct.quarterSub(date,3)   # 该天所在季度向前再减3个季度\r\nprint(quarter_start_dates)  # ['2021-04-01', '2021-05-01', '2021-06-01'] \r\n```\r\n\r\n\r\n#### 年计算\r\n\r\n##### 判定是否为闰年 \r\n```python\r\nresult = ct.isLeapyear(2021)\r\nprint(result)  # False\r\n```\r\n##### 获取指定年份的天数 \r\n```python\r\ndays = ct.getYearDays(2020)\r\nprint(days)  # 366\r\n```\r\n\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/zxzxde/cgai-time",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cgai-time",
    "package_url": "https://pypi.org/project/cgai-time/",
    "platform": null,
    "project_url": "https://pypi.org/project/cgai-time/",
    "project_urls": {
      "Homepage": "https://github.com/zxzxde/cgai-time"
    },
    "release_url": "https://pypi.org/project/cgai-time/0.0.9/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A date and time tool.",
    "version": "0.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17412764,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6323164cf62f0c7e729a398fd8066c7fcb322654477d436a2ae11fdfd2842423",
          "md5": "851d7a75c9aad189dd2a087b22285dc3",
          "sha256": "cf5dc6873449706e0264443f4b038a1357461bb9871cb132ca851676e0449195"
        },
        "downloads": -1,
        "filename": "cgai_time-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "851d7a75c9aad189dd2a087b22285dc3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15715,
        "upload_time": "2021-07-20T02:57:18",
        "upload_time_iso_8601": "2021-07-20T02:57:18.701286Z",
        "url": "https://files.pythonhosted.org/packages/63/23/164cf62f0c7e729a398fd8066c7fcb322654477d436a2ae11fdfd2842423/cgai_time-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f4f3701048fee40edabfc452adddab057e94580bdb5cdc7b68a53ddf96d9bcb",
          "md5": "1c8e2a379cf9c7b3385bcd9fc76ee038",
          "sha256": "c627d4eeee596d13d9e01adf2b99d96c4a2f8ab1e00541fa0bc45cde446841ec"
        },
        "downloads": -1,
        "filename": "cgai_time-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1c8e2a379cf9c7b3385bcd9fc76ee038",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15705,
        "upload_time": "2021-11-09T09:29:24",
        "upload_time_iso_8601": "2021-11-09T09:29:24.991174Z",
        "url": "https://files.pythonhosted.org/packages/0f/4f/3701048fee40edabfc452adddab057e94580bdb5cdc7b68a53ddf96d9bcb/cgai_time-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "72e2a445f3a06e459ffdf62aa7d3d38597cff41cdf0a2000a751ec0d3d9c6535",
          "md5": "77cae91099c535828c6adde860bfb97d",
          "sha256": "c6bcaa25ff0fe54cea5377a49e3c2c9303a6c323e35eec3629b76a76ed91565f"
        },
        "downloads": -1,
        "filename": "cgai_time-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "77cae91099c535828c6adde860bfb97d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15735,
        "upload_time": "2021-11-09T09:57:06",
        "upload_time_iso_8601": "2021-11-09T09:57:06.545871Z",
        "url": "https://files.pythonhosted.org/packages/72/e2/a445f3a06e459ffdf62aa7d3d38597cff41cdf0a2000a751ec0d3d9c6535/cgai_time-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bc89b0737b61cd03a1fb84a4175ffe470dca841e61bf93d3faae7b1ff05bb448",
          "md5": "29906a89f68a35a744d94b2577ee248f",
          "sha256": "9a1d68b66c3ffb2b24fa7d217de135f313b953b467a11f49621e1c9538cbe50b"
        },
        "downloads": -1,
        "filename": "cgai_time-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "29906a89f68a35a744d94b2577ee248f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15976,
        "upload_time": "2021-12-03T08:30:42",
        "upload_time_iso_8601": "2021-12-03T08:30:42.056285Z",
        "url": "https://files.pythonhosted.org/packages/bc/89/b0737b61cd03a1fb84a4175ffe470dca841e61bf93d3faae7b1ff05bb448/cgai_time-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8954b655bf99115fe9a812365ba59d346ecc4cc111e0005410aa5bb9c7191b3e",
          "md5": "53f9f65ac2fe5fc8bf5a49f7abbcb273",
          "sha256": "dcf9609d124a75611526aaaf6c23427b347456932c34fbe108cd5e2c6051b0dd"
        },
        "downloads": -1,
        "filename": "cgai_time-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "53f9f65ac2fe5fc8bf5a49f7abbcb273",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16195,
        "upload_time": "2021-12-06T03:27:37",
        "upload_time_iso_8601": "2021-12-06T03:27:37.560883Z",
        "url": "https://files.pythonhosted.org/packages/89/54/b655bf99115fe9a812365ba59d346ecc4cc111e0005410aa5bb9c7191b3e/cgai_time-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0ff8f4a738339520189f35ca700983fae15264ecdbd995fa366fedd35ec0ef0f",
          "md5": "e1be73132218135dab040d1a5884a487",
          "sha256": "2c1604c268970d0485cd7ff40d59909b17ceb4c75c6618fd4d24e8780c0b44b2"
        },
        "downloads": -1,
        "filename": "cgai_time-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "e1be73132218135dab040d1a5884a487",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30609,
        "upload_time": "2022-06-25T12:19:28",
        "upload_time_iso_8601": "2022-06-25T12:19:28.538031Z",
        "url": "https://files.pythonhosted.org/packages/0f/f8/f4a738339520189f35ca700983fae15264ecdbd995fa366fedd35ec0ef0f/cgai_time-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d72e908d0f4d6f79d0ef61395f8b592d525013f4335dc800864cd4808e831448",
          "md5": "99e7afe22e3459d204184c4c719a27b8",
          "sha256": "4a56e9c06fef5dddd8865f585893836e155d99ed3fc0bad2166385833d826614"
        },
        "downloads": -1,
        "filename": "cgai_time-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "99e7afe22e3459d204184c4c719a27b8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 29357,
        "upload_time": "2022-10-08T05:09:24",
        "upload_time_iso_8601": "2022-10-08T05:09:24.904699Z",
        "url": "https://files.pythonhosted.org/packages/d7/2e/908d0f4d6f79d0ef61395f8b592d525013f4335dc800864cd4808e831448/cgai_time-0.0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e32e6926ac9da46cd61dc5d4501db49802377fabb045c715a6d00388c28992ac",
          "md5": "199c1792fce80c34b0649073e5c36728",
          "sha256": "c874fc3158c89ddb9f901fd03a5eb3b0a0d8cfa57059c7f6e882d51dfe9cfc3d"
        },
        "downloads": -1,
        "filename": "cgai_time-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "199c1792fce80c34b0649073e5c36728",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 17182,
        "upload_time": "2023-03-06T07:14:54",
        "upload_time_iso_8601": "2023-03-06T07:14:54.838426Z",
        "url": "https://files.pythonhosted.org/packages/e3/2e/6926ac9da46cd61dc5d4501db49802377fabb045c715a6d00388c28992ac/cgai_time-0.0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3ec0e9b390dcf5cb032f4f28e75e119707bb219dfa2d2b7338a38eac6d71da7",
          "md5": "3ac880875591177f79d681d4127dd4cb",
          "sha256": "dfe6b0cef254ab19268a3e35aefd7a3e186a1f58dd01059f2c452abc1e9a828a"
        },
        "downloads": -1,
        "filename": "cgai_time-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "3ac880875591177f79d681d4127dd4cb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18288,
        "upload_time": "2023-03-23T09:21:02",
        "upload_time_iso_8601": "2023-03-23T09:21:02.974777Z",
        "url": "https://files.pythonhosted.org/packages/e3/ec/0e9b390dcf5cb032f4f28e75e119707bb219dfa2d2b7338a38eac6d71da7/cgai_time-0.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3ec0e9b390dcf5cb032f4f28e75e119707bb219dfa2d2b7338a38eac6d71da7",
        "md5": "3ac880875591177f79d681d4127dd4cb",
        "sha256": "dfe6b0cef254ab19268a3e35aefd7a3e186a1f58dd01059f2c452abc1e9a828a"
      },
      "downloads": -1,
      "filename": "cgai_time-0.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "3ac880875591177f79d681d4127dd4cb",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 18288,
      "upload_time": "2023-03-23T09:21:02",
      "upload_time_iso_8601": "2023-03-23T09:21:02.974777Z",
      "url": "https://files.pythonhosted.org/packages/e3/ec/0e9b390dcf5cb032f4f28e75e119707bb219dfa2d2b7338a38eac6d71da7/cgai_time-0.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}