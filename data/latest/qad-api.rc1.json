{
  "info": {
    "author": "Sebastian Lehmann",
    "author_email": "sebastian.lehmann@quantumsimulations.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# The QAD-API Python library\n\nThe QAD-API Python library is a library for accessing the (REST) API of\n[QAD Cloud](https://qad.quantumsimulations.de/).\n\n## Note\n\nAs this library serves simply as a Python front-end to the QAD Cloud,\nyou will first need an account on this platform, before using the library.\n\n## Installation\n\nWe do not yet provide a PyPi package. The recommended method for installing\nQAD-API is to clone the following repository, and then \"pip install\" it\nfrom the appropriate local folder:\n\n```shell\ngit clone https://github.com/HQSquantumsimulations/qad-api.git\npip install -e qad-api\n```\n\n## Usage\n\nThe QAD-API is utilized by importing the class `QAD_API` from the root package\n`qad_api`. In order access the API, one must create an instance of this class.\n\nTo learn more about the API functionality, please refer to the \n[documentation of QAD_API](https://qad_api.readthedocs.io/en/latest/).\n\n## Example\n\nTo get started with the QAD_API, we provide a quick and simple example here.\nYou also find this example in the folder\n[examples/lattice](https://github.com/HQSquantumsimulations/qad-api/tree/master/examples/lattice).\n\nWe will create an instance of `QAD_API`, which will authenticate the user\nwith the back-end. The first time this is done, the user will be asked\nto open a link in a browser and use their credentials to authenticate\nwith the back-end (OAuth2).\n\nAfter this, we use the instance of `QAD_API` to access the API functionality.\nWe create a unit-cell and a system for the lattice-based problem solver \"SCCE,\"\nand also create a job for that solver by passing the recently created handlers,\nthen wait for the job to finish. This will take some time, after which we\ndownload the results file to the local file system.\n\n```python\nfrom qad_api import QAD_API\n\n# Creating an QAD_API instance will authenticate the user with the backend\nqad = QAD_API()\n\n# Create a unit-cell\nunit_cell = qad.lattice.unit_cells.create('1D XXZ', {\n    \"unitcell\": {\n        \"atoms\": [ #                     eps    U\n            ['0', 'A', [   0, 0, 0],  0.0001, 0.0 ],\n            ['1', 'B', [ 0.5, 0, 0], -0.0001, 0.0 ] \n        ],\n        \"bonds\": [ #                 t    U\n            ['0', '0', [1, 0, 0], -1.0, 0.0]\n        ],\n        \"lattice_vectors\": [\n            [1, 0, 0]\n        ]\n    }\n})\nprint(f\"Unit cell created: {unit_cell.id}\")\n\n# Create a system\nsystem = qad.lattice.systems.create('1D XXZ', {\n    \"system\": {\n        \"cluster_size\":    [14, 1, 1],   # measured in unit cells\n        \"system_size\":     [ 2, 1, 1],   # measured in clusters\n        \"cluster_offset\":  [ 0, 0, 0],   # measured in clusters\n        \"system_boundary_condition\": \"periodic\"\n    }\n})\nprint(f\"System created: {system.id}\")\n\n# Create a job (will start to run it automatically)\njob = qad.lattice.scce.jobs.create('1D XXZ', unit_cell, system)\nprint(f\"Job created: {job.id}\")\n\n# Wait for the job to be done (when using co-routines: await job.wait())\njob.wait_blocking()\n\n# Download the result to a local file\njob.download_result(f\"./{job.id}.h5\")\nprint(\"Downloaded result\")\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/HQSquantumsimulations/qad-api/",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qad-api",
    "package_url": "https://pypi.org/project/qad-api/",
    "platform": "",
    "project_url": "https://pypi.org/project/qad-api/",
    "project_urls": {
      "Homepage": "https://github.com/HQSquantumsimulations/qad-api/"
    },
    "release_url": "https://pypi.org/project/qad-api/0.1.dev0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "",
    "version": "0.1.dev0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8375345,
  "releases": {
    "0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f92fbe225869f494d04159a5d26627c09397ed46783b001d08105488d853bb8",
          "md5": "5bd9343027302d7906f51046bb4270cc",
          "sha256": "711b4081433954ea9f47304ba35904758f6c85800ecd2fae0f315b949c366ecf"
        },
        "downloads": -1,
        "filename": "qad_api-0.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "5bd9343027302d7906f51046bb4270cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16600,
        "upload_time": "2020-10-09T11:55:42",
        "upload_time_iso_8601": "2020-10-09T11:55:42.975670Z",
        "url": "https://files.pythonhosted.org/packages/6f/92/fbe225869f494d04159a5d26627c09397ed46783b001d08105488d853bb8/qad_api-0.1.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f92fbe225869f494d04159a5d26627c09397ed46783b001d08105488d853bb8",
        "md5": "5bd9343027302d7906f51046bb4270cc",
        "sha256": "711b4081433954ea9f47304ba35904758f6c85800ecd2fae0f315b949c366ecf"
      },
      "downloads": -1,
      "filename": "qad_api-0.1.dev0.tar.gz",
      "has_sig": false,
      "md5_digest": "5bd9343027302d7906f51046bb4270cc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16600,
      "upload_time": "2020-10-09T11:55:42",
      "upload_time_iso_8601": "2020-10-09T11:55:42.975670Z",
      "url": "https://files.pythonhosted.org/packages/6f/92/fbe225869f494d04159a5d26627c09397ed46783b001d08105488d853bb8/qad_api-0.1.dev0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}