{
  "info": {
    "author": "Charles Twardy",
    "author_email": "Charles.Twardy@jacobs.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "# pg_binny\n> Discretize a whole dataframe into ≤N bins, using Top N categories.\n\n\n```python\n%nbdev_hide\n```\n\nThe `discretize` function handles discrete & continuous columns:\n* Continuous columns are cut into _N_ bins using supplied cutting function (defaults to `qcut` for quantile cuts.\n* Categorical columns: take the Top _N_-1, with the rest tossed into \"Other\"\n\n**TODO:** Describe and show the plot helpers too.\n\n## Install\n\n`conda install pg_binny`\n\n-or-\n\n`pip install pg_binny` \n\n-or (locally)-\n\n`pip install -e .`  (That's \"pip install -e **dot**\")\n\n\n## How to use\n\nMake a sample dataframe.\n\n```python\nimport pandas as pd\nimport pg_binny as binny\n\n\ndataset = 'car_crashes'\ntry:\n    import seaborn as sns\n    df = sns.load_dataset(dataset)\nexcept ModuleNotFoundError:\n    df = pd.read_csv(f'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/{dataset}.csv')\ndf.sample(5)\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total</th>\n      <th>speeding</th>\n      <th>alcohol</th>\n      <th>not_distracted</th>\n      <th>no_previous</th>\n      <th>ins_premium</th>\n      <th>ins_losses</th>\n      <th>abbrev</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>19</th>\n      <td>15.1</td>\n      <td>5.738</td>\n      <td>4.530</td>\n      <td>13.137</td>\n      <td>12.684</td>\n      <td>661.88</td>\n      <td>96.57</td>\n      <td>ME</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>15.7</td>\n      <td>2.669</td>\n      <td>3.925</td>\n      <td>15.229</td>\n      <td>13.659</td>\n      <td>649.06</td>\n      <td>114.47</td>\n      <td>IA</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>14.1</td>\n      <td>3.948</td>\n      <td>4.794</td>\n      <td>13.959</td>\n      <td>11.562</td>\n      <td>697.73</td>\n      <td>133.52</td>\n      <td>OH</td>\n    </tr>\n    <tr>\n      <th>50</th>\n      <td>17.4</td>\n      <td>7.308</td>\n      <td>5.568</td>\n      <td>14.094</td>\n      <td>15.660</td>\n      <td>791.14</td>\n      <td>122.04</td>\n      <td>WY</td>\n    </tr>\n    <tr>\n      <th>43</th>\n      <td>19.4</td>\n      <td>7.760</td>\n      <td>7.372</td>\n      <td>17.654</td>\n      <td>16.878</td>\n      <td>1004.75</td>\n      <td>156.83</td>\n      <td>TX</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nDiscretize with default bins\n\n```python\ndfd = binny.discretize(df)\ndfd.sample(5)\n```\n\n\n    ---------------------------------------------------------------------------\n\n    AttributeError                            Traceback (most recent call last)\n\n    <ipython-input-2-41b3e27056d4> in <module>\n    ----> 1 dfd = binny.discretize(df)\n          2 dfd.sample(5)\n          3 \n\n\n    AttributeError: module 'pg_binny' has no attribute 'discretize'\n\n\n```python\ndfd['speeding'].dtype\n```\n\n\n\n\n    CategoricalDtype(categories=[(1.7910000000000001, 2.413], (2.413, 3.496], (3.496, 3.948], (3.948, 4.095], (4.095, 4.608], (4.608, 5.032], (5.032, 6.014], (6.014, 6.923], (6.923, 7.76], (7.76, 9.45]],\n    , ordered=True)\n\n\n\n```python\ndfd['total'].dtype\n```\n\n\n\n\n    CategoricalDtype(categories=[(5.899, 11.1], (11.1, 12.3], (12.3, 13.6], (13.6, 14.5], (14.5, 15.6], (15.6, 17.4], (17.4, 18.1], (18.1, 19.4], (19.4, 21.4], (21.4, 23.9]],\n    , ordered=True)\n\n\n\nYou can set the #bins and the cutting function (defaults to quantile cut, but you may prefer plain-old `cut`, or something else.\n\n```python\n?binny.discretize\n```\n\n\n    \u001b[0;31mSignature:\u001b[0m\n    \u001b[0mbinny\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdiscretize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u001b[0m\n    \u001b[0;34m\u001b[0m    \u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n    \u001b[0;34m\u001b[0m    \u001b[0mnbins\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n    \u001b[0;34m\u001b[0m    \u001b[0mcut\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m<\u001b[0m\u001b[0mfunction\u001b[0m \u001b[0mqcut\u001b[0m \u001b[0mat\u001b[0m \u001b[0;36m0x7fae29d843b0\u001b[0m\u001b[0;34m>\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n    \u001b[0;34m\u001b[0m    \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n    \u001b[0;34m\u001b[0m    \u001b[0mdrop_useless\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n    \u001b[0;34m\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n    \u001b[0;31mDocstring:\u001b[0m\n    Discretize columns in {df} to have at most {nbins} categories.\n      * Categorical columns: take the Top n-1 plus \"Other\"\n      * Continuous columns: cut into {nbins} using {cut}.\n\n    Returns a new discretized dataframe with the same column names.\n    Promotes discrete columns to categories.\n\n    Parameters\n    -----------\n    df: Dataframe to discretize\n    nbins: Max number of bins to use. May return fewer.\n    cut: Cutting method. Default `pd.qcut`. Consider pd.cut, or write your own.\n    verbose: 0: silent, 1: colnames, 2: (Default) top N for each column\n    drop_useless: Removes columns that have < 2 unique values.\n\n    Replaces numerical NA values with 'NA'.\n    \u001b[0;31mFile:\u001b[0m      /Volumes/Peregrine/binny/pg_binny/core.py\n    \u001b[0;31mType:\u001b[0m      function\n\n\n\n## Other functions\n\n```python\n[x for x in dir(binny) if x[:2] not in ['__', 'pa', 'pd', 'rc']]\n```\n\n\n\n\n    ['autolabel',\n     'clean_category',\n     'discretize',\n     'drop_singletons',\n     'is_numeric',\n     'isnum']\n\n\n\n```python\n?binny.autolabel\n```\n\n\n    \u001b[0;31mSignature:\u001b[0m \u001b[0mbinny\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mautolabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mborder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n    \u001b[0;31mDocstring:\u001b[0m\n    Label bars in a barplot {ax} with their height.\n    Thanks to matplotlib, composition.ai, and jsoma/chart.py.\n\n    TODO: how to label with their legend labels?\n    \u001b[0;31mFile:\u001b[0m      /Volumes/Peregrine/binny/pg_binny/core.py\n    \u001b[0;31mType:\u001b[0m      function\n\n\n\n```python\n?binny.clean_category\n```\n\n\n    \u001b[0;31mSignature:\u001b[0m \u001b[0mbinny\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclean_category\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n    \u001b[0;31mDocstring:\u001b[0m\n    Remove unused categories from df.col, inplace.\n    If not a category, do nothing.\n    \u001b[0;31mFile:\u001b[0m      /Volumes/Peregrine/binny/pg_binny/core.py\n    \u001b[0;31mType:\u001b[0m      function\n\n\n\n```python\n?binny.is_numeric\n```\n\n\n    \u001b[0;31mSignature:\u001b[0m \u001b[0mbinny\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_numeric\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n    \u001b[0;31mDocstring:\u001b[0m\n    Returns True iff already numeric, or can be coerced.\n    Usage: df.apply(is_numeric)\n    Usage: is_numeric(df['colname'])\n\n    Returns Boolean series.\n\n    From:\n    https://stackoverflow.com/questions/54426845/how-to-check-if-a-pandas-dataframe-contains-only-numeric-column-wise\n    \u001b[0;31mFile:\u001b[0m      /Volumes/Peregrine/binny/pg_binny/core.py\n    \u001b[0;31mType:\u001b[0m      function\n\n\n\n# History\n\n`pg_binny` is an example extracting some frequently copy/pasted routines into a general purpose `nbdev` project. \n\nOriginally called `binny` because it bins things, that was already taken on PyPi (for... a project that bins things).  The prefix `pg` is short for the project we were working on. \n\nThe routines and text are completely general.  \n\n\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.ausdev.local/peregrine/pg_binny/tree/main/",
    "keywords": "discretize,bin,Python,datascience,preprocess",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pg-binny",
    "package_url": "https://pypi.org/project/pg-binny/",
    "platform": "",
    "project_url": "https://pypi.org/project/pg-binny/",
    "project_urls": {
      "Homepage": "https://gitlab.ausdev.local/peregrine/pg_binny/tree/main/"
    },
    "release_url": "https://pypi.org/project/pg-binny/0.0.3/",
    "requires_dist": [
      "numpy",
      "pandas",
      "matplotlib",
      "scikit-learn"
    ],
    "requires_python": ">=3.6",
    "summary": "Bins your dataframe columns into the Top ≤N categories, and \"Other\".",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9378886,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d9ebd3a2bcb1b2c5974e51dfe4ad35a028f3a112bc3922c249f96640adc8705",
          "md5": "a738ddfa4fcbf79cd1925a2b2d4ba416",
          "sha256": "582e03d7ec1ca9af213713ab6ee2ff7f222b91145f62c094ba8e6532e7954675"
        },
        "downloads": -1,
        "filename": "pg_binny-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a738ddfa4fcbf79cd1925a2b2d4ba416",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14067,
        "upload_time": "2021-02-09T04:20:27",
        "upload_time_iso_8601": "2021-02-09T04:20:27.164378Z",
        "url": "https://files.pythonhosted.org/packages/4d/9e/bd3a2bcb1b2c5974e51dfe4ad35a028f3a112bc3922c249f96640adc8705/pg_binny-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f7f5e1e6bf1fbbba5fba830345ff38336c95e86088d201362b5dcc859036fdb",
          "md5": "11fe9cfb549036eae345fdf3abe68912",
          "sha256": "ebdea26fde88844973d0045a90616d0a3c68f8b449e6ad1a910cf3b945d5637c"
        },
        "downloads": -1,
        "filename": "pg_binny-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "11fe9cfb549036eae345fdf3abe68912",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 14880,
        "upload_time": "2021-02-09T04:20:28",
        "upload_time_iso_8601": "2021-02-09T04:20:28.448839Z",
        "url": "https://files.pythonhosted.org/packages/2f/7f/5e1e6bf1fbbba5fba830345ff38336c95e86088d201362b5dcc859036fdb/pg_binny-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f6cda3f5a2f29aa092bdccdd26b3ca249d4ac01f385e6775132608251c1e8f0",
          "md5": "1eac59b2c467b618c69efbd7000a69f2",
          "sha256": "ec33243ae12154a2998f647b60f3cad7453a3e052b3fa5343167b017527c0e02"
        },
        "downloads": -1,
        "filename": "pg_binny-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1eac59b2c467b618c69efbd7000a69f2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13370,
        "upload_time": "2021-02-10T21:38:19",
        "upload_time_iso_8601": "2021-02-10T21:38:19.850391Z",
        "url": "https://files.pythonhosted.org/packages/8f/6c/da3f5a2f29aa092bdccdd26b3ca249d4ac01f385e6775132608251c1e8f0/pg_binny-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9353fa0e37b0d63914f7ad956a194e040e48b9556bcfeea76ed416db66ea79a",
          "md5": "d0f3b728a7859e5b086f6cb992794a8f",
          "sha256": "98842372d235afbf5d5833a96569169b26324214fad2c6de115d1cbb6a488693"
        },
        "downloads": -1,
        "filename": "pg_binny-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d0f3b728a7859e5b086f6cb992794a8f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12038,
        "upload_time": "2021-02-10T21:38:21",
        "upload_time_iso_8601": "2021-02-10T21:38:21.059967Z",
        "url": "https://files.pythonhosted.org/packages/f9/35/3fa0e37b0d63914f7ad956a194e040e48b9556bcfeea76ed416db66ea79a/pg_binny-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2edb80c2d3031a58ea9c55f322408358a3d01ef9a3cae04888839c71ad98accb",
          "md5": "4c2ad13f4c2e0e255e47a07677aea509",
          "sha256": "13ab41b8ab98c41d6222a4c28b54b9e21de657efbec90be56f1b862adbff103f"
        },
        "downloads": -1,
        "filename": "pg_binny-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4c2ad13f4c2e0e255e47a07677aea509",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13313,
        "upload_time": "2021-02-10T22:07:02",
        "upload_time_iso_8601": "2021-02-10T22:07:02.698837Z",
        "url": "https://files.pythonhosted.org/packages/2e/db/80c2d3031a58ea9c55f322408358a3d01ef9a3cae04888839c71ad98accb/pg_binny-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1f975c900e5999aa397e700f766ec8365795450e7a45a7da9ebd1ab6aa3ab22",
          "md5": "d1fe87f33160503a9a948cf4c7bede3b",
          "sha256": "cc9af21b529b93a30d50a87104e2e805ba2eb66fd0a46ddade9eda6f5689c427"
        },
        "downloads": -1,
        "filename": "pg_binny-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d1fe87f33160503a9a948cf4c7bede3b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 12007,
        "upload_time": "2021-02-10T22:07:04",
        "upload_time_iso_8601": "2021-02-10T22:07:04.041951Z",
        "url": "https://files.pythonhosted.org/packages/e1/f9/75c900e5999aa397e700f766ec8365795450e7a45a7da9ebd1ab6aa3ab22/pg_binny-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2edb80c2d3031a58ea9c55f322408358a3d01ef9a3cae04888839c71ad98accb",
        "md5": "4c2ad13f4c2e0e255e47a07677aea509",
        "sha256": "13ab41b8ab98c41d6222a4c28b54b9e21de657efbec90be56f1b862adbff103f"
      },
      "downloads": -1,
      "filename": "pg_binny-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4c2ad13f4c2e0e255e47a07677aea509",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 13313,
      "upload_time": "2021-02-10T22:07:02",
      "upload_time_iso_8601": "2021-02-10T22:07:02.698837Z",
      "url": "https://files.pythonhosted.org/packages/2e/db/80c2d3031a58ea9c55f322408358a3d01ef9a3cae04888839c71ad98accb/pg_binny-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e1f975c900e5999aa397e700f766ec8365795450e7a45a7da9ebd1ab6aa3ab22",
        "md5": "d1fe87f33160503a9a948cf4c7bede3b",
        "sha256": "cc9af21b529b93a30d50a87104e2e805ba2eb66fd0a46ddade9eda6f5689c427"
      },
      "downloads": -1,
      "filename": "pg_binny-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d1fe87f33160503a9a948cf4c7bede3b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 12007,
      "upload_time": "2021-02-10T22:07:04",
      "upload_time_iso_8601": "2021-02-10T22:07:04.041951Z",
      "url": "https://files.pythonhosted.org/packages/e1/f9/75c900e5999aa397e700f766ec8365795450e7a45a7da9ebd1ab6aa3ab22/pg_binny-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}