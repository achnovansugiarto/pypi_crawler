{
  "info": {
    "author": "Filipe Waitman",
    "author_email": "filwaitman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Framework :: Django :: 2.1",
      "Framework :: Django :: 2.2",
      "Framework :: Django :: 3.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8"
    ],
    "description": "[![Travis](https://travis-ci.com/filwaitman/django-hybrid-attributes.svg?branch=master)](https://travis-ci.com/filwaitman/django-hybrid-attributes)\n[![Codecov](https://codecov.io/gh/filwaitman/django-hybrid-attributes/branch/master/graph/badge.svg)](https://codecov.io/gh/filwaitman/django-hybrid-attributes)\n[![PyPI](https://img.shields.io/pypi/v/django-hybrid-attributes.svg)](https://pypi.python.org/pypi/django-hybrid-attributes/)\n[![License](https://img.shields.io/pypi/l/django-hybrid-attributes.svg)](https://pypi.python.org/pypi/django-hybrid-attributes/)\n[![Python versions](https://img.shields.io/pypi/pyversions/django-hybrid-attributes.svg)](https://pypi.python.org/pypi/django-hybrid-attributes/)\n[![PyPI downloads per month](https://img.shields.io/pypi/dm/django-hybrid-attributes.svg)](https://pypi.python.org/pypi/django-hybrid-attributes/)\n\n\n# Django Hybrid Attributes\n\nThis is a (pretty basic) implementation of the [SQLAlchemy Hybrid Attributes](https://docs.sqlalchemy.org/en/13/orm/extensions/hybrid.html) for Django - more precisely `hybrid_property` and `hybrid_method`.\n\n\n## Example of basic usage:\n```python\nfrom django.db import models\nfrom django_hybrid_attributes import hybrid_method, hybrid_property, HybridQuerySet\n\n\nclass User(models.Model):\n    first_name = models.CharField(max_length=63)\n    last_name = models.CharField(max_length=63)\n    some_value = models.PositiveSmallIntegerField()\n    objects = HybridQuerySet.as_manager()\n\n    @hybrid_property\n    def full_name(self):\n        return f'{self.first_name} {self.last_name}'\n\n    @full_name.expression\n    def full_name(cls, through=''):\n        return models.functions.Concat(f'{through}first_name', models.Value(' '), f'{through}last_name')\n\n    @hybrid_method\n    def some_value_plus_n(self, n):\n        return self.some_value + n\n\n    @some_value_plus_n.expression\n    def some_value_plus_n(cls, n, through=''):\n        return models.F(f'{through}some_value') + models.Value(n)\n\n\nuser1 = User.objects.create(first_name='Filipe', last_name='Waitman', some_value=10)\nuser2 = User.objects.create(first_name='Agent', last_name='Smith', some_value=5)\n\n# Compatible with regular django .filter() - so this won't break your existing code\nassert User.objects.filter(first_name='Filipe').count() == 1\nassert User.objects.filter(models.Q(last_name='Waitman')).count() == 1\n\n# hybrid_property/hybrid_method functions are common properties/methods\nassert user1.full_name == 'Filipe Waitman'\nassert user2.some_value_plus_n(10) == 15\n\n# hybrid_property/hybrid_method expressions are translated to Q() objects, annotated, and filtered accordingly\nassert User.objects.filter(User.full_name == 'Filipe Waitman').count() == 1\nassert User.objects.filter(User.full_name == 'FILIPE WAITMAN').count() == 0\nassert User.objects.filter(User.full_name != 'FILIPE WAITMAN').count() == 2\nassert User.objects.filter(User.full_name.i() == 'FILIPE WAITMAN').count() == 1  # .i() ignores case, so iexact is applied\nassert User.objects.filter(User.full_name.i().l('contains') == 'WAIT').count() == 1  # icontains is applied\nassert User.objects.filter(User.some_value_plus_n(20) < 25).count() == 0\nassert User.objects.filter(User.some_value_plus_n(20) > 25).count() == 1\nassert User.objects.filter(User.some_value_plus_n(20) >= 25).count() == 2\n\n# `.e()` returns the equivalent Django expression so you can use it as you wish\nqs = User.objects.annotate(value_plus_3=User.some_value_plus_n(3).e())\nassert [x.value_plus_3 for x in qs.order_by('value_plus_3')] == [8, 13]\n```\n\nFor another examples, please refer to the tests folder.\n\n## Features:\n- Filter support using Python magic methods. Examples:\n```python\nKlass.objects.filter(Klass.my_hybrid_property == 'value')  # lookup=exact\nKlass.objects.filter(Klass.my_hybrid_property.i() == 'value')  # lookup=iexact\nKlass.objects.filter(Klass.my_hybrid_property != 'value')  # lookup=exact, queryset_method=exclude\nKlass.objects.filter(~Klass.my_hybrid_property == 'value')  # lookup=exact, queryset_method=exclude\nKlass.objects.filter(Klass.my_hybrid_property > 'value')  # lookup=gt\nKlass.objects.filter(Klass.my_hybrid_property < 'value')  # lookup=lt\nKlass.objects.filter(Klass.my_hybrid_property >= 'value')  # lookup=gte\nKlass.objects.filter(Klass.my_hybrid_property <= 'value')  # lookup=lte\n```\n\n- Support of all django lookups via `l()` attribute. Examples:\n```python\nKlass.objects.filter(Klass.my_hybrid_property.l('istartswith') == 'value')\nKlass.objects.filter(Klass.my_hybrid_property.i().l('startswith') == 'value')  # lookup=istartswith\nKlass.objects.filter(Klass.my_hybrid_property.l('contains') == 'value')\nKlass.objects.filter(Klass.my_hybrid_property.l('date__year') == 'value')\n```\n\n- Relations support via `t()` attribute. Examples:\n```python\nKlass.objects.filter(Parent.my_hybrid_property.t('parent') == 'value')\nKlass.objects.filter(GrandParent.my_hybrid_property.t('parent__grandparent') > 'value')\nKlass.objects.filter(Child.my_hybrid_property.t('children') < 'value')\n```\n\n- Raw expressions (for you to use it whatever you want) via `.e()` attribute. Examples:\n```python\nKlass.objects.annotate(my_method_result=Klass.my_hybrid_method().e())\n```\n\n- Custom alias via `.a()` attribute (so you can reference the annotated expression later on). Examples:\n```python\nKlass.objects.filter(Klass.my_hybrid_property.a('_expr_alias') > 'value').order_by('_expr_alias')\n```\n\n- Test/script helper to ensure hybrid expressions are sane compared to its properties/methods. Examples:\n```python\nfrom django_hybrid_attributes.test_utils import assert_hybrid_attributes_are_consistent, HybridTestCaseMixin\n\n\nclass MyTestCase(HybridTestCaseMixin, YourBaseTestcase):\n    def test_expressions_are_sane(self):\n        self.assertHybridAttributesAreConsistent(Klass.my_hybrid_property)\n        self.assertHybridAttributesAreConsistent(Klass.my_hybrid_method_without_args)\n\n        # In order to pass arguments to your function, pass them as args/kwargs in the assert call:\n        self.assertHybridAttributesAreConsistent(Klass.my_hybrid_method_with_args, 1)\n        self.assertHybridAttributesAreConsistent(Klass.my_hybrid_method_with_args, n=1)\n\n        # By default this will compare return of expression/function for all instances (Klass.objects.all()).\n        # In order to run for a subset of results use the `queryset` param:\n        self.assertHybridAttributesAreConsistent(Klass.my_hybrid_property, queryset=Klass.objects.filter(id=1))\n\n        # You can also use it as a helper (outside of tests scope) of some sort (HybridTestCaseMixin is not required):\n        assert_hybrid_attributes_are_consistent(Klass.my_hybrid_property)\n```\n\n- No dark magic: under the hood, all it does is to `annotate()` an expression to a queryset and `filter/exclude()` using this annotation.\n\n\n## FAQ\n\n### Q: Why do I need this project? Couldn't I use `Klass.objects.annotate(whatever=<expression>).filter(whatever=<value>)`?\nA: You don't need this project. And you could use this approach.\nThat being said, I still see some reasons to use this project, such as:\n- Cleaner and more concise code;\n- Support for relations via `.t()/.through()`;\n- Better code placement (method and its expression lives alongside each other, instead of spread over 2 different files (models.py and managers.py))\n\n### Q: Why is this `.t()` needed? Couldn't I use `through` parameter directly?\nA: You could do that for hybrid_methods (and you can, nothing stops you from doing this). However, this wouldn't work for hybrid_properties for obvious reasons. =P\n\n### Q: SQLAlchemy creates automatically the `.expression` function for the simplest cases. Does this project do it as well?\nA: No, I didn't find a decent (meaning: non-smelly) way of doing this using Django structure (yet). Suggestions are welcome.\n\n### Q: Why is there that amount of abbreviations in the code?\nA: I don't like code abbreviations either. However, Django querysets are rather way too long which makes them hard to read anyway. This is an attempt to make them a bit shorter.\nStill, if you don't buy it, you can use the non-abbreviated aliases:\n- `.a()` --> `.alias()`\n- `.e()` --> `.expression()`\n- `.i()` --> `.ignore_case_in_lookup()`\n- `.l()` --> `.lookup()`\n- `.t()` --> `.through()`\n\n\n## Limitations and known issues\n\n* `.expression()` must return a plain Django expression (at least for now).\nIt means that if, for instance, an expression depends on a prior annotation, at least the prior annotation must be done out of the `.expression()` attribute (which might be a bad design as the logic would be kind of segmented).\n\n* There's no interface to call `.distinct()` for the expressions. So `Klass.my_property.t('this__duplicates__rows')` might return duplicated rows (specially on reverse relationships via `.t()`)\n\n\n## Development:\n\n### Run linter:\n```bash\npip install -r requirements_dev.txt\nisort -rc .\ntox -e lint\n```\n\n### Run tests via `tox`:\n```bash\npip install -r requirements_dev.txt\ntox\n```\n\n### Release a new major/minor/patch version:\n```bash\npip install -r requirements_dev.txt\nbump2version <PART>  # <PART> can be either 'patch' or 'minor' or 'major'\n```\n\n### Upload to PyPI:\n```bash\npip install -r requirements_dev.txt\npython setup.py sdist bdist_wheel\npython -m twine upload dist/*\n```\n\n\n## Contributing:\n\nPlease [open issues](https://github.com/filwaitman/django-hybrid-attributes/issues) if you see one, or [create a pull request](https://github.com/filwaitman/django-hybrid-attributes/pulls) when possible.\nIn case of a pull request, please consider the following:\n- Respect the line length (132 characters)\n- Write automated tests\n- Run `tox` locally so you can see if everything is green (including linter and other python versions)\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-hybrid-attributes",
    "package_url": "https://pypi.org/project/django-hybrid-attributes/",
    "platform": "",
    "project_url": "https://pypi.org/project/django-hybrid-attributes/",
    "project_urls": {
      "Source": "https://github.com/filwaitman/django-hybrid-attributes"
    },
    "release_url": "https://pypi.org/project/django-hybrid-attributes/0.1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Django plugin for mimicking the power of SQLAlchemy hybrid_property and hybrid_method",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7405911,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea7c7729b4215ccfc234941b3b8a36bd11022118064134d0da37f36501c4a1bc",
          "md5": "0297ce84a1abac3ed3123cd8b090698d",
          "sha256": "4cdea4426215e79dd5bf1db4548660814e9988cdfd447bea7e7dc24c395c75cd"
        },
        "downloads": -1,
        "filename": "django_hybrid_attributes-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0297ce84a1abac3ed3123cd8b090698d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10270,
        "upload_time": "2020-04-08T17:57:20",
        "upload_time_iso_8601": "2020-04-08T17:57:20.680318Z",
        "url": "https://files.pythonhosted.org/packages/ea/7c/7729b4215ccfc234941b3b8a36bd11022118064134d0da37f36501c4a1bc/django_hybrid_attributes-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2ca60ce7693560b8e7b01203dd5a29fdd993ee6b6fa512b0c778d4b6be7392ec",
          "md5": "7dede64cfdb36e3fca0da96d173e694d",
          "sha256": "259ff8927095a0a0a5aa44aeed7d2cdacdc6a0a880ddf92378681b3beeab3043"
        },
        "downloads": -1,
        "filename": "django-hybrid-attributes-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7dede64cfdb36e3fca0da96d173e694d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8775,
        "upload_time": "2020-04-08T17:57:23",
        "upload_time_iso_8601": "2020-04-08T17:57:23.110709Z",
        "url": "https://files.pythonhosted.org/packages/2c/a6/0ce7693560b8e7b01203dd5a29fdd993ee6b6fa512b0c778d4b6be7392ec/django-hybrid-attributes-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9562e224e2b016070390ce0b8cdf8bbb8378301d75231328c1a49fd248fc6215",
          "md5": "3382b060f3ada5a99fbb2f8afb43502f",
          "sha256": "4e5c2cb6ee8dbc192f41171370a7c698b9458c828314b1aeeabdbfee02204037"
        },
        "downloads": -1,
        "filename": "django_hybrid_attributes-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3382b060f3ada5a99fbb2f8afb43502f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 10583,
        "upload_time": "2020-06-05T17:26:18",
        "upload_time_iso_8601": "2020-06-05T17:26:18.876748Z",
        "url": "https://files.pythonhosted.org/packages/95/62/e224e2b016070390ce0b8cdf8bbb8378301d75231328c1a49fd248fc6215/django_hybrid_attributes-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb8ff9667372113fd68cbd714a6dfe81b6005dfa7d29f5b0078535cf0fe5dc30",
          "md5": "bc99ca61d6d643ec61e499fe0e7a0188",
          "sha256": "85297052835a728ccf0df1090811b41ff905ebceb6380dcf673c7c99b2ab2ec0"
        },
        "downloads": -1,
        "filename": "django-hybrid-attributes-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bc99ca61d6d643ec61e499fe0e7a0188",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 9337,
        "upload_time": "2020-06-05T17:26:20",
        "upload_time_iso_8601": "2020-06-05T17:26:20.418419Z",
        "url": "https://files.pythonhosted.org/packages/eb/8f/f9667372113fd68cbd714a6dfe81b6005dfa7d29f5b0078535cf0fe5dc30/django-hybrid-attributes-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9562e224e2b016070390ce0b8cdf8bbb8378301d75231328c1a49fd248fc6215",
        "md5": "3382b060f3ada5a99fbb2f8afb43502f",
        "sha256": "4e5c2cb6ee8dbc192f41171370a7c698b9458c828314b1aeeabdbfee02204037"
      },
      "downloads": -1,
      "filename": "django_hybrid_attributes-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3382b060f3ada5a99fbb2f8afb43502f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 10583,
      "upload_time": "2020-06-05T17:26:18",
      "upload_time_iso_8601": "2020-06-05T17:26:18.876748Z",
      "url": "https://files.pythonhosted.org/packages/95/62/e224e2b016070390ce0b8cdf8bbb8378301d75231328c1a49fd248fc6215/django_hybrid_attributes-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "eb8ff9667372113fd68cbd714a6dfe81b6005dfa7d29f5b0078535cf0fe5dc30",
        "md5": "bc99ca61d6d643ec61e499fe0e7a0188",
        "sha256": "85297052835a728ccf0df1090811b41ff905ebceb6380dcf673c7c99b2ab2ec0"
      },
      "downloads": -1,
      "filename": "django-hybrid-attributes-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bc99ca61d6d643ec61e499fe0e7a0188",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 9337,
      "upload_time": "2020-06-05T17:26:20",
      "upload_time_iso_8601": "2020-06-05T17:26:20.418419Z",
      "url": "https://files.pythonhosted.org/packages/eb/8f/f9667372113fd68cbd714a6dfe81b6005dfa7d29f5b0078535cf0fe5dc30/django-hybrid-attributes-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}