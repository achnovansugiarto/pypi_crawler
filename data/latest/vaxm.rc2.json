{
  "info": {
    "author": "Mario Popolin Neto",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Free for non-commercial use",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# VAX Method\n\nThe multiVariate dAta eXplanation (VAX) is a new Visual Analytics (VA) method to support identifying and visual interpreting patterns in multivariate datasets. VAX uses the concept of Jumping Emerging Patterns, inherent interpretable logic statements representing class-variable relationships (patterns) derived from random Decision Trees. VAX employs aggregated Jumping Emerging Patterns (JEPs) to capture intricate patterns in class-labeled datasets. A matrix-like visual metaphor is used for JEPs visualization, where patterns are rows, variables are columns, and data distribution conveyed using histograms are matrix cells. Based on matrix visualization, meaningful visual representations can be reached by filtering and ordering patterns (rows) and variables (columns). Furthermore, VAX supports similarity maps produced by Dimensionality Reduction (DR) techniques to convey a better overall image of a dataset (e.g., clusters and outliers) using the JEPs lens.\n\nFor presenting the method here, the Iris Dataset is employed.\n\n**Cite us**: M. Popolin Neto and F. V. Paulovich, \"Multivariate Data Explanation by Jumping Emerging Patterns Visualization,\" in IEEE Transactions on Visualization and Computer Graphics, 2022, doi: 10.1109/TVCG.2022.3223529.\n\n**BibTeX:**  @article{PopolinNeto:2022:VAX, author={Popolin{ }Neto, Mário and Paulovich, Fernando V.}, journal={IEEE Transactions on Visualization and Computer Graphics}, title={Multivariate Data Explanation by Jumping Emerging Patterns Visualization}, year={2022}, volume={}, number={}, pages={1-16}, doi={10.1109/TVCG.2022.3223529}}\n\n## Iris Dataset\n\n\n```python\nimport numpy as np\nimport sklearn.datasets as datasets\n\n\ndataset = datasets.load_iris()\n\nX = dataset.data\ny = dataset.target\n\nfeature_names = dataset.feature_names\ntarget_names = dataset.target_names\n```\n\n## VAX\n\n### JEPs Extraction, Selection, and Aggregation\n\n\n```python\nfrom vaxm import VAX\n\n\ndtm = VAX( n_features = len( feature_names ), n_classes = len( target_names ), feature_names = np.array( feature_names ), class_names = np.array( target_names ), bins = 10, verbose = 0 )\n\ndtm.fit( X, y, k_trees = 1024, save_stages = True, file_name = './IRIS-VAX-k1024', n_jobs = 4, random_seed = 1988 )\nprint('dtm.n_rules_', dtm.n_rules_)\n```\n\n    dtm.n_rules_ 9\n\n\n### Similarity Map Creation\n\n\n```python\nfrom sklearn.manifold import MDS\n\n\nX_ext, y_pclass = dtm.extend_X( X, lam = 0.90 )\n\nembedding = MDS( n_components = 2, dissimilarity = 'euclidean', normalized_stress = 'auto', n_jobs = 1, random_state = 1988  )\nX_emb = embedding.fit_transform( X_ext )\n```\n\n## 94% Data Coverage\n\n### JEPs Visualization\n\n\n```python\nexp = dtm.explanation( r_order = 'support', f_order = 'importance', data_coverage_max = 0.94 )\n\nexp.create_svg( draw_row_labels = True, draw_col_labels = True, draw_rows_line = False, draw_cols_line = False, col_label_degrees = 10, draw_box_frame = False, inner_pad_row = 5, inner_pad_col = 5, cell_background = 'all', cell_background_color = '#f2f2f2',  draw_frame_top_legend = False, draw_box_row_left_legend = True, draw_frame_left_legend = False, rows_left_legend_show_value = True, draw_frame_right_legend = False, draw_box_row_right_legend = False, rows_right_legend_width = 75/3, binary_legend = [ '< 0.05', '>= 0.05' ], margin_left = 400, margin_top = 550, margin_right = 450, margin_bottom = 350, matrix_legend_ratio = 0.80 )\n\nexp.save( 'JEPs-3P.png', pixel_scale = 5 )\nexp.save( 'JEPs-3P.svg' )\nexp.display_jn()\n```\n\n\n\n\n\n![svg](https://popolinneto.gitlab.io/vaxm/readme/JEPs-3P.svg)\n\n\n\n\n### Similarity Map Visualization\n\n\n```python\nimport matplotlib.pyplot as plt\n\n\ndtm.plot_map( X_emb, y, exp.rules_, plt, color_map1 = np.array( [ '#f2f2f2ff', '#1f77b3', '#ff7e0e', '#bcbc21' ] ), color_map2 = np.array( [ '#f2f2f2ff', '#e277c1', '#9367bc', '#bc0049', '#00aa79', '#ffdb00', '#d89c00', '#e41a1c', '#8c564b', '#ff9a75' ] ) )\n\nplt.tight_layout()\nplt.savefig( 'MAP-3P.png', dpi = 300, bbox_inches = 'tight' )\nplt.savefig( 'MAP-3P.svg', bbox_inches = 'tight' )\nplt.show()\n```\n\n\n\n\n![svg](https://popolinneto.gitlab.io/vaxm/readme/MAP-3P.svg)\n\n\n\n\n## 100% Data Coverage\n\n### JEPs Visualization\n\n\n```python\nexp = dtm.explanation( r_order = 'support', f_order = 'importance' )\n\nexp.create_svg( draw_row_labels = True, draw_col_labels = True, draw_rows_line = False, draw_cols_line = False, col_label_degrees = 10, draw_box_frame = False, inner_pad_row = 5, inner_pad_col = 5, cell_background = 'all', cell_background_color = '#f2f2f2',  draw_frame_top_legend = False, draw_box_row_left_legend = True, draw_frame_left_legend = False, rows_left_legend_show_value = True, draw_frame_right_legend = False, draw_box_row_right_legend = False, rows_right_legend_width = 75/3, binary_legend = [ '< 0.05', '>= 0.05' ], margin_left = 400, margin_top = 450, margin_right = 350, margin_bottom = 150, matrix_legend_ratio = 0.80 )\n\nexp.save( 'JEPs.png', pixel_scale = 5 )\nexp.save( 'JEPs.svg' )\nexp.display_jn()\n```\n\n\n\n\n\n![svg](https://popolinneto.gitlab.io/vaxm/readme/JEPs.svg)\n\n\n\n\n### Similarity Map Visualization\n\n\n```python\ndtm.plot_map( X_emb, y, exp.rules_, plt, color_map1 = np.array( [ '#f2f2f2ff', '#1f77b3', '#ff7e0e', '#bcbc21' ] ), color_map2 = np.array( [ '#f2f2f2ff', '#e277c1', '#9367bc', '#bc0049', '#00aa79', '#ffdb00', '#d89c00', '#e41a1c', '#8c564b', '#ff9a75' ] ), ncol_map2 = 7, bbox_to_anchor = ( 0.5, 1.19 ) )\n\nplt.tight_layout()\nplt.savefig( 'MAP.png', dpi = 300, bbox_inches = 'tight' )\nplt.savefig( 'MAP.svg', bbox_inches = 'tight' )\nplt.show()\n```\n\n\n\n\n![svg](https://popolinneto.gitlab.io/vaxm/readme/MAP.svg)\n\n\n\n\n## Interactive Application\n\n\n```python\nfrom mpnp.notebook_application import Vax_App\n\nx_name = np.array( range( X.shape[ 0 ] ) ).astype(str)\nVax_App( './IRIS-VAX-k1024', X, y, X_emb, x_name );\n```\n\n## References\n\nVAX uses the [Logic Rules Matrix](https://pypi.org/project/lrmatrix/) package, which also supports the [Explainable Matrix - ExMatrix](https://pypi.org/project/exmatrix/) method. Both ExMatrix and VAX employ a matrix-like visual metaphor for logic rules visualization, where rules are rows, features (variables) are columns, and rules predicates are cells. \n\nThe ExMatrix must be used for model (predictive) explanations (model interpretability/explainability), while VAX must be employed for data (descriptive) explanations (phenomenon understanding).\n\n[![A flowchart-based summarization.](https://popolinneto.gitlab.io/vaxm/readme/Flowchart.svg \"A flowchart-based summarization.\")](https://doi.org/10.11606/T.55.2021.tde-03032022-105725)\n\n---\n\n[[1](https://doi.org/10.11606/T.55.2021.tde-03032022-105725)] Popolin Neto, M. (2021). Random Forest interpretability - explaining classification models and multivariate data through logic rules visualizations. Doctoral Thesis, Instituto de Ciências Matemáticas e de Computação, University of São Paulo, São Carlos. doi:10.11606/T.55.2021.tde-03032022-105725. \n\n***BibTeX:***  @phdthesis{PopolinNeto:2021:Thesis, doi = {10.11606/t.55.2021.tde-03032022-105725}, publisher = {Universidade de Sao Paulo,  Agencia {USP} de Gestao da Informacao Academica ({AGUIA})}, author = {M{\\'{a}}rio Popolin{ }Neto}, title = {Random Forest interpretability - explaining classification models and multivariate data through logic rules visualizations}}\n\n---\n\n[[2](https://doi.org/10.1109/TVCG.2020.3030354)] M. Popolin Neto and F. V. Paulovich, \"Explainable Matrix - Visualization for Global and Local Interpretability of Random Forest Classification Ensembles,\" in IEEE Transactions on Visualization and Computer Graphics, vol. 27, no. 2, pp. 1427-1437, Feb. 2021, doi: 10.1109/TVCG.2020.3030354.\n\n***BibTeX:*** @article{PopolinNeto:2020:ExMatrix, author={Popolin{ }Neto, Mário and Paulovich, Fernando V.}, journal={IEEE Transactions on Visualization and Computer Graphics}, title={Explainable Matrix - Visualization for Global and Local Interpretability of Random Forest Classification Ensembles}, year={2021}, volume={27}, number={2}, pages={1427-1437}, doi={10.1109/TVCG.2020.3030354}}\n\n---\n\n[[3](https://doi.org/10.1109/TVCG.2022.3223529)] M. Popolin Neto and F. V. Paulovich, \"Multivariate Data Explanation by Jumping Emerging Patterns Visualization,\" in IEEE Transactions on Visualization and Computer Graphics, 2022, doi: 10.1109/TVCG.2022.3223529.\n\n***BibTeX:***  @article{PopolinNeto:2022:VAX, author={Popolin{ }Neto, Mário and Paulovich, Fernando V.}, journal={IEEE Transactions on Visualization and Computer Graphics}, title={Multivariate Data Explanation by Jumping Emerging Patterns Visualization}, year={2022}, volume={}, number={}, pages={1-16}, doi={10.1109/TVCG.2022.3223529}}\n\n---\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitlab.com/popolinneto/vaxm",
    "keywords": "",
    "license": "Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vaxm",
    "package_url": "https://pypi.org/project/vaxm/",
    "platform": null,
    "project_url": "https://pypi.org/project/vaxm/",
    "project_urls": {
      "Homepage": "https://gitlab.com/popolinneto/vaxm"
    },
    "release_url": "https://pypi.org/project/vaxm/0.1.2/",
    "requires_dist": [
      "lrmatrix (>=0.1.2)"
    ],
    "requires_python": ">=3.6",
    "summary": "A Python package to the VAX method, supporting multivariate data explanation by Jumping Emerging Patterns.",
    "version": "0.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16936204,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8cee8d875875b32897615eb923305df266a51dede14705cc04f88e6e3b1ca471",
          "md5": "ce8d54254db067853983acefae777ea2",
          "sha256": "95b67b4e5dcd289d7b74b5297ba8a80e151935867d1ce8a3ca72e838e1b53b8b"
        },
        "downloads": -1,
        "filename": "vaxm-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce8d54254db067853983acefae777ea2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 10942,
        "upload_time": "2022-12-16T14:02:06",
        "upload_time_iso_8601": "2022-12-16T14:02:06.569264Z",
        "url": "https://files.pythonhosted.org/packages/8c/ee/8d875875b32897615eb923305df266a51dede14705cc04f88e6e3b1ca471/vaxm-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e644bd18b0d3c11b734bc742f58afaafdeb1de0b55536ca11b777a0cc0398694",
          "md5": "b661a09a2a712e7f7968be69ea3967f7",
          "sha256": "ed1f78d3f00ef387aa01f62b1f6529683c4fa5780196421be2c95acf27cab2ee"
        },
        "downloads": -1,
        "filename": "vaxm-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b661a09a2a712e7f7968be69ea3967f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11172,
        "upload_time": "2023-02-20T01:46:46",
        "upload_time_iso_8601": "2023-02-20T01:46:46.426052Z",
        "url": "https://files.pythonhosted.org/packages/e6/44/bd18b0d3c11b734bc742f58afaafdeb1de0b55536ca11b777a0cc0398694/vaxm-0.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e644bd18b0d3c11b734bc742f58afaafdeb1de0b55536ca11b777a0cc0398694",
        "md5": "b661a09a2a712e7f7968be69ea3967f7",
        "sha256": "ed1f78d3f00ef387aa01f62b1f6529683c4fa5780196421be2c95acf27cab2ee"
      },
      "downloads": -1,
      "filename": "vaxm-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b661a09a2a712e7f7968be69ea3967f7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 11172,
      "upload_time": "2023-02-20T01:46:46",
      "upload_time_iso_8601": "2023-02-20T01:46:46.426052Z",
      "url": "https://files.pythonhosted.org/packages/e6/44/bd18b0d3c11b734bc742f58afaafdeb1de0b55536ca11b777a0cc0398694/vaxm-0.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}