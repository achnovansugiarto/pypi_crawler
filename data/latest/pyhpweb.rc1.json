{
  "info": {
    "author": "FengLiuFeseliud",
    "author_email": "17351198406@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# PyHP-web\n\n一种 Python 轻量异步 Web 服务端 (原生异步 socket 实现)，在请求页面时后端执行 Html 文件中的 Python 代码动态生成页面\n\n可以在 Html 文件中使用各种 Python 库，非常适合不用处理大量请求的 web 线上工具\n\n![img](https://img.sakuratools.top/docs/pyhp/pyhp0.png@0x0x0.5x80)\n\n## 安装\n\npyhp 安装使用 pip\n\n```bash\npip install pyhpweb\n```\n\n## Demo\n\n后端代码\n\n```python\n<?py \n    import time \n\n    time = time.asctime(time.localtime(time.time()))\n?>\n<div>\n    <?py print(f\"<h2>{time}</h2>\") ?>\n    <div>\n        <h3> GET </h3>\n        <form action=\"\" method=\"GET\">\n        First name: <input type=\"text\" name=\"firstName\"><br>\n        Last name: <input type=\"text\" name=\"lastName\"><br>\n        <input type=\"submit\" value=\"提交\">\n        </form>\n    </div>\n    <div>\n        <h3> POST </h3>\n        <form action=\"\" method=\"POST\">\n        First name: <input type=\"text\" name=\"firstName\"><br>\n        Last name: <input type=\"text\" name=\"lastName\"><br>\n        <input type=\"submit\" value=\"提交\">\n        </form>\n    </div>\n</div>\n\n<?py\n    from pyhpweb import __version__\n\n    print(\n        \"<p>http_version: %s</p>\" % request_path[\"http_version\"],\n        \"<p>request_mode: %s</p>\" % request_path[\"mode\"],\n        \"<p>request_path: %s</p>\" % request_path[\"path\"],\n        \"<p>url: %s</p>\" % url,\n        f\"<p>get: {get}</p>\",\n        f\"<p>post: {post}</p>\",\n        f\"<p>cookie: {cookie}</p>\",\n        f\"<p>request_header: {request_header}</p>\",\n        f\"<p>request_data: {request_data}</p>\",\n        f\"<p>PyHP version {__version__}</p>\"\n    ) \n?>\n\n```\n\n客户端请求生成动态页面\n\n![img](https://img.sakuratools.top/docs/pyhp/pyhp1.png@0x0x0.8x80)\n\n![img](https://img.sakuratools.top/docs/pyhp/pyhp2.png@0x0x0.8x80)\n\n## 快速入门\n\n使用 PyHP 时需要先启动 PyHP 服务，如下创建一个最简单的服务器文件，运行后启动 PyHP 服务，默认网站根目录为服务器文件所在文件夹，如果 Linux 下有安装 uvloop PyHP 将自动启用\n\n```python\nfrom pyhpweb import PyHP_Server\n\nPyHP_Server().start()\n```\n\n默认启动后可以访问 [http://127.0.0.1:5000/](http://127.0.0.1:5000/)\n\n### 主页\n\n使用 `.html` `.py` `.pyhtml` `.pyh` 的文件都会被 pyhp 解析，不过还是推荐使用 `.pyhtml` `.pyh`，PyHP 服务默认启动后主页为网站路径下的 `index.pyh` ，在没有主页时访问 [http://127.0.0.1:5000/](http://127.0.0.1:5000/) 会发生 404\n\n简单创建一个主页显示 PyHP 服务已经启动\n\n```python\n<?py\n    from pyhpweb import __version__\n    \n    # 这里的 print 将向页面输入\n    print(f\"<h2>PyHP v{__version__}</h2>\")\n?>\n\n<h3>Run in Server</h3>\n```\n\n效果\n\n![img](https://img.sakuratools.top/docs/pyhp/pyhp3.png@0x0x0.8x80)\n\n### 代码块\n\nPyHP 在 html 页面中的任何地方都可以执行 Python 代码只需要使用 `<?py 你的代码 ?>` 说明\n\n前面代码块中定义的变量，在后面的代码块都可以使用，但是前面代码块引用的模块，在后面的代码块不可以使用\n\n代码块 `print` 会向页面输出，代码块 `print` 的数据将在这块代码块执行完后，替换这块代码块 （代码块在哪个元素中 `print` 的数据就会在哪个元素中，如果需要直接输出请求数据使用 `html_encode` 可以防止 xss 攻击 ,`from pyhp.tools import html_encode` 引用 `html_encode`\n\n```python\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<meta charset=\"utf-8\">\n<head>\n    <meta charset=\"utf-8\">\n    <title>测试代码块</title>\n</head>\n\n<!-- 标准代码块 -->\n<?py\n    p_style = \"color:blue;text-align:center\"\n    p_text = \"Hi PyHP!!!\"\n?>\n\n<body>\n    <!-- 行代码块 -->\n\n    <!-- 变量输出 动态样式 动态內容 -->\n    <p style=\"<?py print(p_style) ?>\"><?py print(p_text) ?></p>\n\n    <!-- 单行输出多个元素 -->\n    <?py print(f'<p style=\"{p_style}\">print ps {p_text}</p>\\n'*10) ?>\n    \n    <hr>\n\n    <!-- 元素中的代码块 -->\n\n    <div>\n        <!-- 向元素中输出多个元素 -->\n        <?py\n        for i in range(0, 10):\n            print(f'<p style=\"{p_style}\">for in {i} {p_text}</p>\\n')\n        ?>\n    </div>\n</body>\n\n```\n\n## 非阻塞生成页面\n\nPyHP 如果一个页面生成在执行 io 操作不会影响其他页面\n\n```python\n<?py \n    \"\"\"\n    pyhp 在执行页面生成时不会阻塞其他页面\n\n    注意 页面不要写永远阻塞的代码\n    请求永远阻塞代码数量一多将会导致服务器卡死 (都去执行永远阻塞的代码了)\n    \"\"\"\n    import time\n    # 模拟 io 操作, 这时候可以去看看别的页面是否会被影响\n    time.sleep(30)\n    print(\"ok\")\n?>\n```\n\n## 超级全局变量\n\n超级全局变量为 PyHP 定义的变量，在代码块的所有作用域中都可用\n\n这里列出常用的，详细查看文档\n\n> **`html`**：当前代码块所在的 Py_Html 对象\n>\n> **`html.header`**：页面响应头, 设置响应头html.header = {\"响应类型\": 值}\n>\n> **`html.response`**：页面响应行, 设置响应行 html.response = {\"响应类型\": 值}, 响应类型: code: 响应码, msg: 响应内容, http_version: http 版本\n>\n> **`request_header`**：请求头\n>\n> **`request_path`**：请求模式 / 请求路径  /  请求 HTTP 版本\n>\n> **`url`**：请求 URL\n>\n> **`post`**： POST 数据\n>\n> **`get`**： GET 数据\n>\n> **`cookie`**: Cookie 数据\n\n输出测试\n\n```python\n<?py\n    from pyhpweb import __version__\n    from pyhpweb.tools import html_encode\n\n    print(\n        html_encode(str(html)),\n        \"<hr>\\n<p>请求参数</p>\",\n        \"<p>request_path: %s</p>\" % request_path,\n        \"<p>url: %s</p>\" % url,\n        f\"<p>get: {get}</p>\",\n        f\"<p>post: {post}</p>\",\n        f\"<p>cookie: {cookie}</p>\",\n        \"<hr>\\n<p>请求头</p>\",\n        f\"<p>request_header: {request_header}</p>\",\n        \"<hr>\\n<p>响应头</p>\",\n        f\"<p>response: {html.response}</p>\",\n        f\"<p>header: {html.header}</p>\",\n        \"<hr>\",\n        f\"<p>PyHP version {__version__}</p>\"\n    )\n```\n\n## include 包含文件\n\nPyHP 中的 `include` 与 PHP 类似, 可以导入页面并执行里面的 Python 代码并把页面写入当前页面\n\n被包含页面执行完后可以更新包含它的文件中的变量与设置的 Cookie, 被包含的页面也可以使用包含它的文件中的变量与响应头与响应行 , `include` `update_header` 为 `True` 时, 被包含可以允许更新包含它的文件的响应头与响应行\n\n`include` 导入页面错误时不会影响后面代码执行\n\n```python\n<?py\n    print(\"<h1>include cookie.pyhtml </h1>\")\n\n    # 相对路径引入\n    include(\"cookie.pyhtml\")\n\n    print(\"<br><br><h1>include vals.pyhtml </h1>\")\n\n    # 相对路径引入 ./\n    include(\"./vals.pyhtml\")\n\n    print(\"<br><br><h1>include json.pyhtml </h1>\")\n\n    # 相对路径引入 ../\n    include(\"../demo/json.pyhtml\")\n    \"\"\"\n    将更新响应头为 Content-Type: application/json\n    include(\"../demo/json.pyhtml\", update_header=True)\n    \"\"\"\n\n    print(\"<br><br><h1>include test.pyhtml </h1>\")\n\n    # 绝对路径引入\n    include(\"/home/sakura/pyhp-web/demo/demo/test.pyhtml\")\n?>\n\n<br><br><h1>include end ...</h1>\n```\n\n## 自定义错误页\n\n想要自定义错误页, 首先需要指定错误页名称 `web_error_page` 参数, 错误页必须在网站根目录下\n\n```python\nfrom pyhpweb import PyHP_Server\n\nPyHP_Server(\n    web_error_page=\"error.pyhtml\"\n).start()\n```\n\n然后就可以自定义错误页为 `web_error_page` 参数, 错误页会额外获得错误数据\n\n```python\n<h1>自定义错误页</h1>\n\n<?py \n    \"\"\"\n    错误页会额外提供 error, error_url 内置变量\n    并且响应行也会被修改\n    \"\"\"\n    print(\n        f\"<p>response: {html.response}</p>\",\n        f\"<p>response_data: {html.get_response()}</p>\",\n        f\"<p>error_url: {error_url}</p>\",\n        f\"<p>error_class_name: {type(error[0]).__name__}</p>\",\n        \"<p>error_msg: %s</p>\" % error[0],\n        f\"<p>error: {error}</p>\"\n    )\n?>\n```\n\n## 使用 Cookie\n\n使用 set_cookie 设置 cookie, set_cookie max_age 默认 -1 立刻过期, max_age 为 None 时于客户端被关闭时失效\n\n```python\n<?py\n    from pyhpweb.tools import full_date\n    \n    if not cookie:\n        \"\"\"\n        当 get 数据有 nomaxage 项时 (cookie.pyhtml?nomaxage=)\n        这个 Cookie 将在浏览器被关闭时失效\n        \"\"\"\n        if not \"nomaxage\" in get:\n            # max_age Cookie 有效时长 (秒)\n            # max_age -1 或者 0 Cookie 立刻过期\n            set_cookies({\n                \"text\": \"30秒后过期!!!\",\n                \"set-time\": full_date(),\n            }, max_age=30)\n            print(\"<h1>没有 Cookie 设置 Cookie</h1>\")\n        else:\n            # max_age 为 None 时于客户端被关闭时失效\n            set_cookies({\n                \"text\": \"浏览器被关闭时失效!!!\",\n                \"set-time\": full_date(),\n            }, max_age=None)\n            print(\"<h1>没有 Cookie 设置 Cookie, 这个 Cookie 将在浏览器被关闭时失效</h1>\")\n\n    elif \"nocookie\" in get:\n        \"\"\"\n        当 get 数据有 nocookie 项时 (cookie.pyhtml?nocookie=)\n        删除所有 cookie\n        \"\"\" \n        # set_cookies max_age 默认 -1 立刻过期\n        set_cookies(cookie)\n        print(\"<h1>删除所有 cookie </h1>\")\n\n    else:\n        print(\"<h1>cookie str: %s</h1>\" % request_header[\"cookie\"])\n        print(\"<h1>cookie: %s</h1>\" % cookie)\n?>\n```\n\n## Json Api\n\n```python\n<?py\n    from pyhpweb import Content_Type, __version__\n    import json\n\n    # 设置请求头 Content-Type 为 json\n    html.header = {\n        \"Content-Type\": Content_Type[\"json\"],\n    }\n\n    data = {\n        \"code\": 200, \n        \"msg\": \"OK\",\n        \"data\": {   \n            \"request_path\": request_path,\n            \"request_header\": request_header,\n            \"url\": url,\n            \"get\": get,\n            \"post\": post,\n            \"version\": __version__\n        }\n    }\n\n    # json.dumps json 序列化后输出至页面\n    print(json.dumps(data))\n?>\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/FengLiuFeseliud/PyHP-web",
    "keywords": "web,server,html,Hypertext-Preprocessor",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyhpweb",
    "package_url": "https://pypi.org/project/pyhpweb/",
    "platform": "any",
    "project_url": "https://pypi.org/project/pyhpweb/",
    "project_urls": {
      "Homepage": "https://github.com/FengLiuFeseliud/PyHP-web"
    },
    "release_url": "https://pypi.org/project/pyhpweb/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Web 服务端，在请求页面时后端执行 Html 文件中的 Python 代码生成动态网页 （类似 PHP）",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15064885,
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d8584b1937d8a7dc68a0864b79950ea8f13e433b53ffdda6d66af50555c3461d",
          "md5": "c06c6802a37d8e5ecddb2b2d588f757e",
          "sha256": "364158812dc8679f62987933b02b74541074ff7dcd8c31fbe46824465b01ad58"
        },
        "downloads": -1,
        "filename": "pyhpweb-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c06c6802a37d8e5ecddb2b2d588f757e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 17701,
        "upload_time": "2022-09-12T09:04:16",
        "upload_time_iso_8601": "2022-09-12T09:04:16.145938Z",
        "url": "https://files.pythonhosted.org/packages/d8/58/4b1937d8a7dc68a0864b79950ea8f13e433b53ffdda6d66af50555c3461d/pyhpweb-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d8584b1937d8a7dc68a0864b79950ea8f13e433b53ffdda6d66af50555c3461d",
        "md5": "c06c6802a37d8e5ecddb2b2d588f757e",
        "sha256": "364158812dc8679f62987933b02b74541074ff7dcd8c31fbe46824465b01ad58"
      },
      "downloads": -1,
      "filename": "pyhpweb-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c06c6802a37d8e5ecddb2b2d588f757e",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 17701,
      "upload_time": "2022-09-12T09:04:16",
      "upload_time_iso_8601": "2022-09-12T09:04:16.145938Z",
      "url": "https://files.pythonhosted.org/packages/d8/58/4b1937d8a7dc68a0864b79950ea8f13e433b53ffdda6d66af50555c3461d/pyhpweb-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}