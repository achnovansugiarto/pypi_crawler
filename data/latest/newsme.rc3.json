{
  "info": {
    "author": "lunfman",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# NewsMe\nNewsMe package makes interaction with newsApi easier and allows you to create simple html mails.\n\nFeatures:\n* Easy interaction with news api \n* Simple mail setup! Just provide req information and you are ready to go.\n* Generate html content from api results in desired form\n\n## What do you need to use this app?\n* If you are going to use NewApi you need an api key \n* You need an email address to send emails.\n## How to use?\n* For interaction with newsApi use News class\n* For creating html elements use CreateHtml class\n* For sending mails use Mail class\n\n## Installation\n```\ngit clone https://github.com/lunfman/NewsApp.git\n```\n```\npip install newsme\n```\n## Modules\n### News class\nNews object provides simple interaction with NewsApI.\n```\nfrom news import News\nnews = News('API_KEY')\n```\n\n#### Default parameters\n* default endpoint is everything_endpoint\n```\neverything_endpoint = 'https://newsapi.org/v2/everything'\ntop_headlines_endpoint = 'https://newsapi.org/v2/top-headlines'\n\n# Default endpoint\nendpoint = everything_endpoint\n\n# Change endpoint to top_headlines\nNews.endpoint = News.top_headlines_endpoint\n```\n\n* date = today\n* search_type = qInTitle -> other options is q -> GetNews.search_type = 'q'\n* default parameters for the api request\n\n```        \nparams = {\n            self.search_type: '',\n            'from': self.date,\n            'sortBy': 'popularity',\n            'language': 'en',\n            'apiKey': self.API_KEY,\n        }\n```\n* articles_num = 5 'How many articles you wish to get after extractions works with show and get_list methods\n\n#### Methods\n##### News.search(keyword)\nMethod takes one argument -> keyword (what are you searching for?)\n\nSearch method interact with the api and save results to api_data and create articles list after execution\n```\nfrom news import News\nnews = News('API_KEY')\nnews.search('github')\n\n# get json data after search\ndata = news.api_data\n# data['articles'] etc..\n```\n\n##### News.get_articles_list() \nThis method returns a list with articles [article1, article2...]\nUse this method after search or it will return an empty list\n```\n# return a list with articles and sliced by news.article_num value\nnews.get_articles_list()\n\n```\n##### News.show()\nMethod prints to console all articles in formatted form\n```\nnews.show()\n-------------\narticle source\n\narticle title \n\narticle content\n\narticle url\n```\n\n##### News.create_params(**kwargs)\nMethod for creating parameters. Check Newsapi documentation for parameters).\n* This method overwrites default parameters\n* You do not need to provide an api key if you use this method\n* If you wish to change search_type change it directly do not create it with this method.\n\n```\nnews.create_params('date'=date, 'param2':param2)\n# Result:\n# news.params\n{\n    'date':date,\n    'param2:param2,\n    'apiKey':api_key\n}\n```\n\n### CreateHtml class\nUse this class to create an html.\n```\nfrom html_creator import CreateHtml\ncreate_html = CreateHtml()\n```\n\n#### Methods\n##### CreateHtml.create_html_tags(**kwargs)\nThis method creates html tags from kwargs. After execution html will be stored in CreateHtml.html.\n```\ncreate_html.create_html_tags(h1='heading 1', p='paragraph 1')\ncreate_html.create_html_tags(h1='heading 2', p='paragraph 2')\nhtml = create_html.html\n----------------------------\n# html = '<h1>heading 1</h1><p>paragraph 1</p><h1>heading 2</h1><p>paragraph 2</p>'\n```\n\n##### CreateHtml.read_template()\n* Use this method if you wish to use your own template. (Works only with very basic templates)\n* Inside the template should be placed the next string [CONTENT] which will be replaced after with created html.\n* Templates path by default set to /template.html\n* The template should have the next name template.html !\n\n```\n/template.html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n</head>\n<body>\n[CONTENT]\n</body>\n</html>\n\n```\n\n##### CreateHtml.replace_templates_content()\nUse method to replace templates [CONTENT] string with current CreateHtml.html\n```\n# init CreateHtml class\ncreate_html = CreateHtml()\n# create a line of html\ncreate_html.create_html_tags(h1='heading 1', p='paragraph 1')\n# open template -> template will be stored in create_html.template\ncreate_html.reade_template()\n# replace [CONTENT] with created html\ncreate_html.replace_templates_content()\n\n-----------------------------------------\n#  create_html.template\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n</head>\n<body>\n<h1>heading 1</h1><p>paragraph 1</p>\n</body>\n</html>\n\n```\n\n##### CreateHtml.modify_template()\nThis method combines two previous methods and returns modified template\n\n\n### Mail Class\nShareNews class allows to prepare html file for sending and send mails to desired destination\n\n\nWhile init your need to provide the next parameters\n* mail - mail which is going to connect to smtp server for sending mails\n* destination - who whill receive message\n* password - password for the mail\n* smtp_server - smtp server of provider \n```\nExample\nsmtp.gmail.com\nsmtp-mail.outlook.com\n```\n\nDefault params:\n\n\nport = '465'\n\n\nsubject = 'News'\n\n```\nfrom mail import Mail\nsend = Mail(\n        mail='mail which is going to connect to smtp server',\n        password = 'password for this mail',\n        smtp_server = 'smtp.gmail.com',\n        destination = 'mail@mail.com who will receive the message')\n```\n\n### How to add html to the ShareNews class?\n```\nsend.html = 'your html as a string'\n```\nThe plain text can be added the same way.\n\n#### Maik.send()\nMethod for sending an email. Use it when html is added to the class and ready to send an email.\n\n\n## Examples\nExamples demonstrate how to use all pieces together to create an app by using this package.\n\n### Example 1\nGet information from NewsApi and send html mail to your destination.\n```\nfrom html_creator import CreateHtml\nfrom news import News\nfrom mail import Mail\n\ntopics = ['github', 'microsoft']\n\nkey = 'api_key'\nnews = News(key)\nnews.articles_num = 1\n\ncreate_html = CreateHtml()\n\nsender = Mail(\n   mail='mail',\n   password='pass',\n   destination='to',\n   smtp_server='smtp')\n\nfor topic in topics:\n   create_html.create_html_tags(h1=topic)\n   for article in news.search(topic).get_list():\n      title = article['title']\n      content = article['content']\n      create_html.create_html_tags(b=title, p=content)\n   \n\nsender.html = create_html.html\nsender.text = ''\n\nsender.send()\n```\n### Example 2\nPrint news to the console\n```\nfrom news import News\n\n# topics for search\ntopics = ['github', 'microsoft']\n\n# init GetNews class\nnews = News('api_key')\n\n# show only two articles\nnews.articles_num = 2\n\nfor topic in topics:\n    # search for topic and print news related to the topic\n    news.search(topic).show()\n```\n\n### Example 3\nUse different endpoints and params\n```\nfrom news import News\n\nnews = GetNews('apikey')\n# using top headlines endpoint\nnews.endpoint = news.top_headlines_endpoint\nnews.create_params(\n    country = 'us',\n)\n\nnews.search('').show()\n```\n\n### Example 4\nCreate html mail and send it\n```\nfrom html_creator import CreateHtml\nfrom mail import Mail\n\nsender = Mail(\n    mail='mail',\n    password= 'pass',\n    destination= 'destination',\n    smtp_server= 'server',\n    subject= 'subject'\n)\n\nhtml_creator = CreateHtml()\nheading = 'Heading of the message'\nparagraph = 'Some information'\n\nhtml_creator.create_html_tags(h1=heading, p=paragraph)\n# open template and replace [CONTENT] with html\nhtml_creator.modify_template()\n# selecting modified template\nhtml = html_creator.template\n# adding html to sender\nsender.html = html\nsender.send()\n```\n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lunfman/NewsMe",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "newsme",
    "package_url": "https://pypi.org/project/newsme/",
    "platform": "",
    "project_url": "https://pypi.org/project/newsme/",
    "project_urls": {
      "Bug Tracker": "https://github.com/lunfman/NewsMe/issues",
      "Homepage": "https://github.com/lunfman/NewsMe"
    },
    "release_url": "https://pypi.org/project/newsme/0.0.3/",
    "requires_dist": [
      "requests (==2.25.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "package for simple interaction with NewsApi and sending html mails",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12399614,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9edfeee0cfadb562d1a9e29eb417c7967a88c57b585c530d026cdfdfb5089154",
          "md5": "878e7479177cd179e7655b0cff3168dc",
          "sha256": "a24b96c119ffdca1cd34d83cd53d300822fc437bccbe1f5dc79dab901fead72c"
        },
        "downloads": -1,
        "filename": "newsme-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "878e7479177cd179e7655b0cff3168dc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7353,
        "upload_time": "2021-12-18T17:54:24",
        "upload_time_iso_8601": "2021-12-18T17:54:24.114258Z",
        "url": "https://files.pythonhosted.org/packages/9e/df/eee0cfadb562d1a9e29eb417c7967a88c57b585c530d026cdfdfb5089154/newsme-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34bddea910e596ddcc5d41f4d2a280c427bcc27e5bdde9bbc2cbb44cf8493cb5",
          "md5": "6e0c47115499ada6c2fa0940706632be",
          "sha256": "dbb3160e210cf879a16b4225d7d4db51aede76e1287491a476531a13e4a33ba5"
        },
        "downloads": -1,
        "filename": "newsme-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6e0c47115499ada6c2fa0940706632be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 9942,
        "upload_time": "2021-12-18T17:54:25",
        "upload_time_iso_8601": "2021-12-18T17:54:25.549861Z",
        "url": "https://files.pythonhosted.org/packages/34/bd/dea910e596ddcc5d41f4d2a280c427bcc27e5bdde9bbc2cbb44cf8493cb5/newsme-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0f4601fb545fb016a260a1b8510106acac293cbcf993c4bd657345a7aee5d894",
          "md5": "16de162cb35bb45fbd9d3cf688cf0507",
          "sha256": "2348e5b4993d239f6344c323ef37e498998cfb480ca41963ea543105a7c4c30e"
        },
        "downloads": -1,
        "filename": "newsme-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16de162cb35bb45fbd9d3cf688cf0507",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7852,
        "upload_time": "2021-12-21T19:24:02",
        "upload_time_iso_8601": "2021-12-21T19:24:02.725043Z",
        "url": "https://files.pythonhosted.org/packages/0f/46/01fb545fb016a260a1b8510106acac293cbcf993c4bd657345a7aee5d894/newsme-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "778391068c99f211a069d85e130b40608258c24deca7e8d4865bdcfa6a733f93",
          "md5": "f840853a991b073262fde924af34bcaf",
          "sha256": "95678ef7e46a654ea08b21d5cb09f8b9a09b94756343ec520741c8f0172e352a"
        },
        "downloads": -1,
        "filename": "newsme-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f840853a991b073262fde924af34bcaf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10790,
        "upload_time": "2021-12-21T19:24:04",
        "upload_time_iso_8601": "2021-12-21T19:24:04.783510Z",
        "url": "https://files.pythonhosted.org/packages/77/83/91068c99f211a069d85e130b40608258c24deca7e8d4865bdcfa6a733f93/newsme-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6b177e6379ae3f569fab7b6a6ebd7f9238af6bd0f23f2f319ec97d2c5537472",
          "md5": "6c486d8942aea48a4132709ce6ad4f66",
          "sha256": "65d3bf2c895a8d9a772241a11195f90aa8d03584830ed1b2aec931e6b439eac9"
        },
        "downloads": -1,
        "filename": "newsme-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c486d8942aea48a4132709ce6ad4f66",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 7851,
        "upload_time": "2021-12-24T17:46:19",
        "upload_time_iso_8601": "2021-12-24T17:46:19.488842Z",
        "url": "https://files.pythonhosted.org/packages/d6/b1/77e6379ae3f569fab7b6a6ebd7f9238af6bd0f23f2f319ec97d2c5537472/newsme-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07f1f6ee55f2737c4bc9ebc6fe1b96359728e6765e281d9680ba5b6640eab1af",
          "md5": "71ce1eb14b5ecae6ef209b485588603f",
          "sha256": "e4cdf9bbc89295137c962b421f96eba819cfee5ee106ba8a08ad5dffb9ca94e9"
        },
        "downloads": -1,
        "filename": "newsme-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "71ce1eb14b5ecae6ef209b485588603f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 10857,
        "upload_time": "2021-12-24T17:46:22",
        "upload_time_iso_8601": "2021-12-24T17:46:22.147697Z",
        "url": "https://files.pythonhosted.org/packages/07/f1/f6ee55f2737c4bc9ebc6fe1b96359728e6765e281d9680ba5b6640eab1af/newsme-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6b177e6379ae3f569fab7b6a6ebd7f9238af6bd0f23f2f319ec97d2c5537472",
        "md5": "6c486d8942aea48a4132709ce6ad4f66",
        "sha256": "65d3bf2c895a8d9a772241a11195f90aa8d03584830ed1b2aec931e6b439eac9"
      },
      "downloads": -1,
      "filename": "newsme-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6c486d8942aea48a4132709ce6ad4f66",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 7851,
      "upload_time": "2021-12-24T17:46:19",
      "upload_time_iso_8601": "2021-12-24T17:46:19.488842Z",
      "url": "https://files.pythonhosted.org/packages/d6/b1/77e6379ae3f569fab7b6a6ebd7f9238af6bd0f23f2f319ec97d2c5537472/newsme-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07f1f6ee55f2737c4bc9ebc6fe1b96359728e6765e281d9680ba5b6640eab1af",
        "md5": "71ce1eb14b5ecae6ef209b485588603f",
        "sha256": "e4cdf9bbc89295137c962b421f96eba819cfee5ee106ba8a08ad5dffb9ca94e9"
      },
      "downloads": -1,
      "filename": "newsme-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "71ce1eb14b5ecae6ef209b485588603f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 10857,
      "upload_time": "2021-12-24T17:46:22",
      "upload_time_iso_8601": "2021-12-24T17:46:22.147697Z",
      "url": "https://files.pythonhosted.org/packages/07/f1/f6ee55f2737c4bc9ebc6fe1b96359728e6765e281d9680ba5b6640eab1af/newsme-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}