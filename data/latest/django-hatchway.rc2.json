{
  "info": {
    "author": "",
    "author_email": "Andrew Godwin <andrew@aeracode.org>",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Programming Language :: Python :: 3"
    ],
    "description": "django-hatchway\n===============\n\nHatchway is an API framework inspired by the likes of FastAPI, but while trying\nto keep API views as much like standard Django views as possible.\n\nIt was built for, and extracted from, `TakahÄ“ <https://github.com/jointakahe/takahe>`_;\nif you want to see an example of it being used, browse its\n`api app <https://github.com/jointakahe/takahe/tree/main/api>`_.\n\n\nInstallation\n------------\n\nInstall Hatchway from PyPI::\n\n    pip install django-hatchway\n\n\nAnd add it to your ``INSTALLED_APPS``::\n\n    INSTALLED_APPS = [\n        ...\n        \"hatchway\",\n    ]\n\n\nUsage\n-----\n\nTo make a view an API endpoint, you should write a standard function-based\nview, and decorate it with ``@api_view.get``, ``@api_view.post`` or similar::\n\n    from hatchway import api_view\n\n    @api_view.get\n    def my_api_endpoint(request, id: int, limit: int = 100) -> list[str]:\n        ...\n\n\nThe types of your function arguments matter; Hatchway will use them to work out\nwhere to get their values from and how to parse them. All the standard Python\ntypes are supported, plus `Pydantic-style models <https://docs.pydantic.dev/>`_\n(which ideally you should build based on the ``hatchway.Schema`` base class,\nas it understands how to load things from Django model instances).\n\nYour return type also matters - this is what Hatchway uses to work out how to\nformat/validate the return value. You can leave it off, or set it to ``Any``,\nif you don't want any return validation.\n\nURL Patterns\n~~~~~~~~~~~~\n\nYou add API views in your ``urls.py`` file like any other view::\n\n    urlpatterns = [\n        ...\n        path(\"api/test/\", my_api_endpoint),\n    ]\n\nThe view will only accept the method it was decorated with (e.g. ``GET`` for\n``api_view.get``).\n\nIf you want to have two or more views on the same URL but responding to\ndifferent methods, use Hatchway's ``methods`` object::\n\n    from hatchway import methods\n\n    urlpatterns = [\n        ...\n        path(\n            \"api/post/<id>/\",\n            methods(\n                get=posts.post_get,\n                delete=posts.posts_delete,\n            ),\n        ),\n    ]\n\n\nArgument Sourcing\n~~~~~~~~~~~~~~~~~\n\nThere are four places that input arguments can be sourced from:\n\n* **Path**: The URL of the view, as provided via kwargs from the URL resolver\n* **Query**: Query parameters (``request.GET``)\n* **Body**: The body of a request, in either JSON, formdata, or multipart format\n* **File**: Uploaded files, as part of a multipart body\n\nBy default, Hatchway will pull arguments from these sources:\n\n* Standard Python singular types (``int``, ``str``, ``float``, etc.): Path first, and then Query\n* Python collection types (``list[int]``, etc.): Query only, with implicit list conversion of either one or multiple values\n* ``hatchway.Schema``/Pydantic BaseModel subclasses: Body only (see Model Sourcing below)\n* ``django.core.files.File``: File only\n\nYou can override where Hatchway pulls an argument from by using one of the\n``Path``, ``Query``, ``Body``, ``File``, ``QueryOrBody``, ``PathOrQuery``,\nor ``BodyDirect`` annotations::\n\n    from hatchway import api_view, Path, QueryOrBody\n\n    @api_view.post\n    def my_api_endpoint(request, id: Path[int], limit: QueryOrBody[int] = 100) -> dict:\n        ...\n\nWhile ``Path``, ``Query``, ``Body`` and ``File`` force the argument to be\npicked from only that source, there are some more complex ones in there:\n\n* ``PathOrQuery`` first tries the Path, then tries the Query (the default for simple types)\n* ``QueryOrBody`` first tries the Query, then tries the Body\n* ``BodyDirect`` forces top-level population of a model - see Model Sourcing, below.\n\nModel Sourcing\n~~~~~~~~~~~~~~\n\nWhen you define a ``hatchway.Schema`` subclass (or any other pydantic model\nsubclass), Hatchway will presume that it should pull it from the POST/PUT/etc.\nbody.\n\nHow it pulls it depends on how many body-sourced arguments you have:\n\n* If you just have one, it will feed it the top-level keys in the body data as\n  its internal values.\n\n* If you have more than one, it will look for its data in a sub-key named the\n  same as the argument name.\n\nFor example, this function has two body-sourced things (one implicit, one explicit)::\n\n    @api_view.post\n    def my_api_endpoint(request, thing: schemas.MyInputSchema, limit: Body[int] = 100):\n        ...\n\nThis means Hatchway will feed the ``schemas.MyInputSchema`` model whatever it\nfinds under the ``thing`` key in the request body as its input, and ``limit``\nwill come from the ``limit`` key.\n\nIf ``limit`` wasn't specified, then there would be only one body-sourced item,\nand Hatchway would feed ``schemas.MyInputSchema`` the entire request body as\nits input.\n\nYou can force a schema subclass to be fed the entire request body by using the\n``BodyDirect[MySchemaClass]`` annotation on its type.\n\nReturn Values\n~~~~~~~~~~~~~\n\nThe return value of an API view, if provided, is used to validate and coerce\nthe type of the response::\n\n    @api_view.delete\n    def my_api_endpoint(request) -> int:\n        ...\n\nIt can be either a normal Python type, or a ``hatchway.Schema`` subclass. If\nit is a Schema subclass, the response will be fed to it for coercion, and ORM\nobjects are supported - returning a model instance, a dict with the model\ninstance values, or an instance of the schema are all equivalent.\n\nA typechecker will honour these too, so we generally recommend returning\ninstances of your Schema so that your entire view benefits from typechecking,\nrather than relying on the coercion. You'll get typechecking in your Schema\nsubclass constructors, and then typechecking that you're always returnining\nthe right things from the view.\n\nYou can also use generics like ``list[MySchemaClass]`` or\n``dict[str, MySchemaClass]`` as a response type; generally, anything Pydantic\nallows, we do as well.\n\nAdding Headers/Status Codes to the Response\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you want to do more to your response than just sling some data back at your\nclient, you can return an ApiResponse object instead of a plain value::\n\n    from hatchway import api_view, ApiResponse\n\n    @api_view.delete\n    def my_api_endpoint(request) -> ApiResponse[int]:\n        ...\n        return ApiResponse(42, headers={\"X-Safe-Delete\": \"no\"})\n\n``ApiResponse`` is a standard Django ``HTTPResponse`` subclass, so accepts\nalmost all of the same arguments, and has most of the same methods. Just don't\nedit its ``.content`` value; if you want to mutate the data you passed into\nit, that is stored in ``.data``.\n\nNote that we also changed the return type of the view so that it would pass\ntypechecking; ``ApiResponse`` accepts any response type as its argument and\npasses it through to the same validation layer.\n\nAuto-Collections\n~~~~~~~~~~~~~~~~\n\nHatchway allows you to say that Schema subclasses can pull their values from\nindividual query parameters or body values; these are normally flat strings,\nthough, unless you're looking at a JSON-encoded body, or multiple repeated\nquery parameters.\n\nHowever, it will respect the use of ``name[]`` to make lists, and ``name[key]``\nto make dicts. Some examples:\n\n* A ``a=Query[list[int]]`` argument will see ``url?a=1`` as ``[1]``,\n  ``url?a=1&a=2`` as ``[1, 2]``, and ``url?a[]=1&a[]=2`` as ``[1, 2]``.\n\n* A ``b=Body[dict[str, int]]`` argument will correctly accept the POST data\n  ``b[age]=30&b[height]=180`` and give you ``{\"age\": 30, \"height\": 180}``.\n\nThese will also work in JSON bodies too, though of course you don't need them\nthere; nevertheless, they still work for compatibility reasons.\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-hatchway",
    "package_url": "https://pypi.org/project/django-hatchway/",
    "platform": null,
    "project_url": "https://pypi.org/project/django-hatchway/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/django-hatchway/0.5.1/",
    "requires_dist": [
      "django (>=4.0)",
      "pydantic (~=1.10)",
      "pytest (~=7.2) ; extra == 'dev'",
      "pytest-django (~=4.5) ; extra == 'dev'"
    ],
    "requires_python": ">=3.10",
    "summary": "An unsurprising Django API framework",
    "version": "0.5.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17405156,
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6521783f05c1b7eb47da212e6f08f8cf694e265fbdc2acd13419f92b3b405d8a",
          "md5": "58ede02848f19b3827da5ee21fb4a32f",
          "sha256": "c3738b49e2457e6bf6718d45656977fc8f0f2df2d31cfe8942da585848339751"
        },
        "downloads": -1,
        "filename": "django_hatchway-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58ede02848f19b3827da5ee21fb4a32f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 13065,
        "upload_time": "2023-02-11T19:50:26",
        "upload_time_iso_8601": "2023-02-11T19:50:26.402001Z",
        "url": "https://files.pythonhosted.org/packages/65/21/783f05c1b7eb47da212e6f08f8cf694e265fbdc2acd13419f92b3b405d8a/django_hatchway-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a441341e166b3d84138c969b2d2df55bca3ffc67ecbe6a7edd808266db5ac35",
          "md5": "53460efb89518da6ef02ec0c7ae55a91",
          "sha256": "5e481e7bac500d3e92c59a5156136849983eab34acdac17a981168490d52ee62"
        },
        "downloads": -1,
        "filename": "django-hatchway-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "53460efb89518da6ef02ec0c7ae55a91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 13411,
        "upload_time": "2023-02-11T19:50:28",
        "upload_time_iso_8601": "2023-02-11T19:50:28.169462Z",
        "url": "https://files.pythonhosted.org/packages/0a/44/1341e166b3d84138c969b2d2df55bca3ffc67ecbe6a7edd808266db5ac35/django-hatchway-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02b2e01e60a2001eb8ee3ece0a953556e4794f1fdd0260eeb2c93028f0dd3aca",
          "md5": "355f4ad57e69421e268d5f32b61d26f7",
          "sha256": "7ea4647722937bd95e196bc7734564e1f498df447502c6c4c140ae49d01c5583"
        },
        "downloads": -1,
        "filename": "django_hatchway-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "355f4ad57e69421e268d5f32b61d26f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10",
        "size": 13207,
        "upload_time": "2023-03-22T22:18:10",
        "upload_time_iso_8601": "2023-03-22T22:18:10.395196Z",
        "url": "https://files.pythonhosted.org/packages/02/b2/e01e60a2001eb8ee3ece0a953556e4794f1fdd0260eeb2c93028f0dd3aca/django_hatchway-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a4c0e58646d94c487c6ee5d3c96429909ef11cd3c5278304ba2dd917d8d0a44",
          "md5": "67125b0c6cb46605945dbbb7ff05934b",
          "sha256": "2d9ca00e289cbece0a43c7895abcf4c3c310fbbf38550c8807478c5148e0840d"
        },
        "downloads": -1,
        "filename": "django-hatchway-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "67125b0c6cb46605945dbbb7ff05934b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10",
        "size": 13729,
        "upload_time": "2023-03-22T22:18:12",
        "upload_time_iso_8601": "2023-03-22T22:18:12.635128Z",
        "url": "https://files.pythonhosted.org/packages/4a/4c/0e58646d94c487c6ee5d3c96429909ef11cd3c5278304ba2dd917d8d0a44/django-hatchway-0.5.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "02b2e01e60a2001eb8ee3ece0a953556e4794f1fdd0260eeb2c93028f0dd3aca",
        "md5": "355f4ad57e69421e268d5f32b61d26f7",
        "sha256": "7ea4647722937bd95e196bc7734564e1f498df447502c6c4c140ae49d01c5583"
      },
      "downloads": -1,
      "filename": "django_hatchway-0.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "355f4ad57e69421e268d5f32b61d26f7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10",
      "size": 13207,
      "upload_time": "2023-03-22T22:18:10",
      "upload_time_iso_8601": "2023-03-22T22:18:10.395196Z",
      "url": "https://files.pythonhosted.org/packages/02/b2/e01e60a2001eb8ee3ece0a953556e4794f1fdd0260eeb2c93028f0dd3aca/django_hatchway-0.5.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4a4c0e58646d94c487c6ee5d3c96429909ef11cd3c5278304ba2dd917d8d0a44",
        "md5": "67125b0c6cb46605945dbbb7ff05934b",
        "sha256": "2d9ca00e289cbece0a43c7895abcf4c3c310fbbf38550c8807478c5148e0840d"
      },
      "downloads": -1,
      "filename": "django-hatchway-0.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "67125b0c6cb46605945dbbb7ff05934b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10",
      "size": 13729,
      "upload_time": "2023-03-22T22:18:12",
      "upload_time_iso_8601": "2023-03-22T22:18:12.635128Z",
      "url": "https://files.pythonhosted.org/packages/4a/4c/0e58646d94c487c6ee5d3c96429909ef11cd3c5278304ba2dd917d8d0a44/django-hatchway-0.5.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}