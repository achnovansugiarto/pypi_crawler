{
  "info": {
    "author": "Peter Daly",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11"
    ],
    "description": "# Clean IoC\nA simple dependency injection library for python that requires nothing of your application code (except that you use typing).\n\n\n## Basic Registering and resolving\n\nThere are 4 basic modes of registering a new set of classes\n\n### Implementation\n\n```python\n\nclass UserRepository(abc.ABC)\n    @abc.abstractmethod\n    def add(self, user):\n        pass\n\nclass InMemoryUserRepository(UserRepository)\n\n    def __init__(self):\n        self.users = []\n\n    def add(self, user):\n        # This is obviously terrible, but it's for demo purposes\n        self.users.append(user)\n\nclass SqlAlchemyUserRepository(UserRepository)\n\n    def __init__(self):\n        # Do some db stuff here\n        pass\n\n    def add(self, user):\n        # Do some db stuff here\n        pass\n\ncontainer = Container()\ncontainer.register(UserRepository, InMemoryUserRepository)\n\n\nrepository = container.resolve(UserRepository) # This will return an InMemoryUserRepository\n\n```\n\n### Concrete Class\n\n```python\n\nclass ClientDependency\n    def get_int(self):\n        return 10\n\nclass Client\n    def __init__(self, dep: ClientDependency)\n        self.dep = dep\n\n    def get_number(self):\n        return self.dep.get_int()\n\n\ncontainer = Container()\ncontainer.register(ClientDependency)\ncontainer.register(Client)\n\nclient = container.resolve(Client)\n\nclient.get_number() # returns 10\n\n```\n\n### Factory\n\n```python\n\nclass ClientDependency\n    def get_int(self):\n        return 10\n\nclass Client\n    def __init__(self, dep: ClientDependency)\n        self.dep = dep\n\n    def get_number(self):\n        return self.dep.get_int()\n\ndef client_factory(dep: ClientDependency):\n    return Client(dep=dep)\n\n\ncontainer = Container()\ncontainer.register(ClientDependency)\ncontainer.register(Client, factory=client_factory)\n\nclient = container.resolve(Client)\n\nclient.get_number() # returns 10\n\n```\n\n\n### Instance\n\n```python\n\nclass ClientDependency\n    def __init__(self, num):\n        self.num = num\n\n    def get_int(self):\n        return self.num\n\nclass Client\n    def __init__(self, dep: ClientDependency)\n        self.dep = dep\n\n    def get_number(self):\n        return self.dep.get_int()\n\nclient_dependency = ClientDependency(num=10)\n\ncontainer = Container()\ncontainer.register(ClientDependency, instance=client_dependency)\ncontainer.register(Client)\n\nclient = container.resolve(Client)\n\nclient.get_number() # returns 10\n\n```\n\n## List resolving\n\n```python\n\nclass ClientDependency\n    def __init__(self, numbers: list[int]):\n        self.numbers = numbers\n\n    def get_numbers(self):\n        return self.numbers\n\nclass Client\n    def __init__(self, dep: ClientDependency)\n        self.dep = dep\n\n    def get_numbers(self):\n        return self.dep.get_numbers()\n\ncontainer = Container()\ncontainer.register(ClientDependency)\ncontainer.register(Client)\ncontainer.register(int, instance=1)\ncontainer.register(int, instance=2)\ncontainer.register(int, instance=3)\n\nclient = container.resolve(Client)\n\nclient.get_numbers() # returns [3, 2, 1]\n```\n\n\n## Decorators\n\nFollows a object orientated decoration pattern, rather than a decoration annotation.\nThe main reason for this was to allow decotation of registered instances\n\n```python\nclass Client\n    def __init__(self, number: int)\n        self.number = number\n\n    def get_number(self):\n        return self.number\n\n\nclass DoubleClientDecorator(Client):\n    def __init__(self, client: Client):\n        self.client = client\n    def get_number(self):\n        return self.client.get_number() * 2\n\ncontainer = Container()\n\ncontainer.register(Client)\ncontainer.register_decorator(Client, DoubleClientDecorator)\ncontainer.register(int, instance=10)\n\nclient = container.resolve(Client)\n\nclient.get_number() # returns 20\n```\n\n## Subclasses registration\n\nThis feature allows registartion of all subclasses of a giveb type\n\n```python\nclass Client(abc.ABC)\n    @abc.abstractmethod\n    def get_number(self):\n        pass\n\n\nclass TenClient(Client)\n    def get_number(self):\n        return 10\n\nclass TwentyClient(Client)\n    def get_number(self):\n        return 20\n\ncontainer = Container()\n\ncontainer.register_subclasses(Client)\n\nten_client = container.resolve(TenClient)\nten_client.get_number() # returns 10\n\ntwenty_client = container.resolve(TwentyClient)\ntwenty_client.get_number() # returns 20\n\n# Resolve all subsclasses of Client\nclient = container.resolve(list[Client]) ## [TwentyClient(), TenClient()]\n```\n\n\n## Lifestyles\nLifestyles configure how long and resolved object says alive for\nThere are 4 lifestyle types\n\n### transient\nAlways create a new instance\n\n```python\ncontainer.register(Client, lifestyle=LifestyleType.transient)\n```\n\n\n### once_per_graph (Default behaviour)\nOnly create one instance throughout the resolve call\n\n```python\ncontainer.register(Client, lifestyle=LifestyleType.once_per_graph)\n```\n\n### scoped\nOnly create a new instance through the life a scope. When not in a scope the behaviour is the same as **once_per_graph**\n\n```python\ncontainer.register(Client, lifestyle=LifestyleType.scoped)\n```\n\n### singleton\nOnly one instance of the object is created throughout the lifespan of the container\n\n```python\ncontainer.register(Client, lifestyle=LifestyleType.singleton)\n```\n\n*Note:*\nWhen registering an instance, then the behaviour is always singleton\n\n```python\ncontainer.register(int, instance=10)\n```\n\n## Open Generics\n\nRegisters all generic subclasses of the service type and allows you to resolve with the generic alias\n\n```python\nT = TypeVar(\"T\")\n\nclass HelloCommand:\n    pass\n\nclass GoodbyeCommand:\n    pass\n\nclass CommandHandler(Generic[T]):\n    def handle(self, command: T):\n        pass\n\nclass HelloCommandHandler(CommandHandler[HelloCommand]):\n    def handle(self, command: HelloCommand):\n        print('HELLO')\n\nclass GoodbyeCommandHandler(CommandHandler[GoodbyeCommand]):\n    def handle(self, command: GoodbyeCommand):\n        print('GOODBYE')\n\ncontainer = Container()\ncontainer.register_open_generic(CommandHandler)\n\nh1 = container.resolve(CommandHandler[HelloCommand])\nh2 = container.resolve(CommandHandler[GoodbyeCommand])\n\nh1.handle(HelloCommand()) # prints 'HELLO'\nh2.handle(GoodbyeCommand()) # prints 'GOODBYE'\n\n```\n\n## Open Generic Decorators\n\n\nAllows you to add decorators to your open generic registrations\n\n```python\nT = TypeVar(\"T\")\n\nclass HelloCommand:\n    pass\n\nclass GoodbyeCommand:\n    pass\n\nclass CommandHandler(Generic[T]):\n    def handle(self, command: T):\n        pass\n\nclass HelloCommandHandler(CommandHandler[HelloCommand]):\n    def handle(self, command: HelloCommand):\n        print('HELLO')\n\nclass GoodbyeCommandHandler(CommandHandler[GoodbyeCommand]):\n    def handle(self, command: GoodbyeCommand):\n        print('GOODBYE')\n\nclass AVeryBigCommandHandlerDecorator(Generic[T]):\n    def __init__(self, handler: CommandHandler[T]):\n        self.handler = handler\n\n    def handle(self, command: T):\n        print('A VERY BIG')\n        self.handler.handle(command=command)\n\ncontainer = Container()\ncontainer.register_open_generic(CommandHandler)\ncontainer.register_open_generic_decorator(CommandHandler, AVeryBigCommandHandlerDecorator)\nh1 = container.resolve(CommandHandler[HelloCommand])\nh2 = container.resolve(CommandHandler[GoodbyeCommand])\n\nh1.handle(HelloCommand()) # prints 'A VERY BIG\\nHELLO'\nh2.handle(GoodbyeCommand()) # prints 'A VERY BIG\\nGOODBYE'\n\n```\n\n## Scopes\n\nScopes are a way to create a sub container that will live for a certain lifestyle.\nSome good use cases for scope would be for the lifespan of handling a http request with a web server or a message/event if working on a message based system\n\n\n```python\nclass Client\n    def __init__(self, number: int)\n        return number\n\n    def get_number(self):\n        return self.resolver.resolve(int)\n\ncontainer.register(int, instance=2)\n\ncontainer.register(Client)\n\nclient = container.resolve(Client)\nclient.get_number() # returns 2\n\nwith container.get_scope() as scope:\n    scope.register(int, instance=10)\n    scoped_client = scope.resolve(Client)\n    scoped_client.get_number() # returns 10\n```\n\n## Named registartions & Registartion filters\n\nBy default the last registration is what the container will return when resolve is called as below.\n\n```python\n\ncontainer = Container()\ncontainer.register(int, instance=1)\ncontainer.register(int, instance=2)\ncontainer.register(int, instance=3)\n\nnumber = container.resolve(int) # returns 3\n\n```\nTo be more selective of what we return we can add a name to the registration and apply a registartion filter when we resolve.\n\nA registartion filter is simply function that receives a **Registartion** and returns a **bool**\n\nFor example if we wanted to get the int named **\"One\"** we do the following\n\n```python\ncontainer = Container()\ncontainer.register(int, instance=1, name=\"One\")\ncontainer.register(int, instance=2, name=\"Two\")\ncontainer.register(int, instance=3, name=\"Three\")\n\nnumber = container.resolve(int, filter=lambda r: r.name == \"One\") # returns 1\n```\n\nClean IOC comes with a set of in built registartion filters that can be found [here](./clean_ioc/registration_filters.py)\n\nWe can get the desired behaviour as above\n```python\nfrom clean_ioc.registartion_filters import with_name\n\ncontainer = Container()\ncontainer.register(int, instance=1, name=\"One\")\ncontainer.register(int, instance=2, name=\"Two\")\ncontainer.register(int, instance=3, name=\"Three\")\n\nnumber = container.resolve(int, filter=with_name(\"One\")) # returns 1\n```\n\n## Dependency Settings\n\nDependency settings are defined at registartion and allow you to define the selection or setting dependencies\n\n\n```python\nclass Client\n    def __init__(self, number=10)\n        self.number = number\n\n    def get_number(self):\n        return self.number\n\ncontainer = Container()\n\ncontainer.register(int, instance=1, name=\"One\")\ncontainer.register(int, instance=2, name=\"Two\")\n\ncontainer.register(\n    Client,\n    name=\"SetsValue\",\n    dependency_config={\"number\": DependencySettings(value=50)}\n)\ncontainer.register(\n    Client,\n    name=\"UsesDefaultValue\"\n)\ncontainer.register(\n    Client,\n    name=\"IgnoresDefaultParameterValue\",\n    dependency_config={\"number\": DependencySettings(use_default_paramater=False)}\n)\ncontainer.register(\n    Client,\n    name=\"UsesRegistartionFilter\",\n    dependency_config={\"number\": DependencySettings(use_default_paramater=False, filter=with_name(\"One\"))}\n)\n\nclient1 = container.resolve(Client, filter=with_name(\"SetsValue\"))\nclient2 = container.resolve(Client, filter=with_name(\"UsesDefaultValue\"))\nclient3 = container.resolve(Client, filter=with_name(\"IgnoresDefaultParameterValue\"))\nclient4 = container.resolve(Client, filter=with_name(\"UsesRegistartionFilter\"))\n\n\nclient1.get_number() # returns 50\nclient2.get_number() # returns 10\nclient3.get_number() # returns 2\nclient4.get_number() # returns 1\n```\n\nThe order of a dependant value is as follows\n1. Setting the dependency value explicitly\n    ```python\n    DependencySettings(value=50)\n    ```\n2. Using the default parameter value if it exisis the dependency value explicitly\n    ```python\n    class Client\n    def __init__(self, number=10)\n        self.number = number\n    ```\n    If you don't want to use the default parameter value you can set it to false in the dependency setting\n    ```python\n    DependencySettings(use_default_paramater=False)\n    ```\n3. Going to the container registry to find a registartion using the registration filter if, if there is a default value on the dependant paramater you must explicity set.\n\n## Accessing the Container, Scope and Resolver within dependencies\n\nAccessing container directly\n\n```python\nclass Client\n    def __init__(self, container: Container)\n        self.container = container\n\n    def get_number(self):\n        return self.container.resolve(int)\n\ncontainer.register(int, instance=2)\n\ncontainer.register(Client)\n\nclient = container.resolve(Client)\nclient.get_number() # returns 2\n```\n\nAccessing Resolver also returns the container\n\n```python\n\nclass Client\n    def __init__(self, resolver: Resolver)\n        self.resolver = resolver\n\n    def get_number(self):\n        return self.resolver.resolve(int)\n\ncontainer.register(int, instance=2)\n\ncontainer.register(Client)\n\nclient = container.resolve(Client)\nclient.get_number() # returns 2\n```\n\nWhen within a scope, Resolver returns the current scope rather than the container\n\n```python\nclass Client\n    def __init__(self, resolver: Resolver)\n        self.resolver = resolver\n\n    def get_number(self):\n        return self.resolver.resolve(int)\n\ncontainer.register(int, instance=2)\n\ncontainer.register(Client)\n\nclient = container.resolve(Client)\nclient.get_number() # returns 2\n\nwith container.get_scope() as scope:\n    scope.register(int, instance=10)\n    scoped_client = scope.resolve(Client)\n    scoped_client.get_number() # returns 10\n```\n\n\n## Modules (BETA feature)\n\n\nA module is a just a function that accepts a container, it can be used to set up common elements on the container\n\n```python\nclass ClientDependency\n    def get_int(self):\n        return 10\n\nclass Client\n    def __init__(self, dep: ClientDependency)\n        self.dep = dep\n\n    def get_number(self):\n        return self.dep.get_int()\n\ndef client_module(c: Container):\n    container = Container()\n    container.register(ClientDependency)\n    container.register(Client)\n\ncontainer.apply_module(client_module)\n\nclient = container.resolve(Client)\n\nclient.get_number() # returns 10\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/peter-daly/clean_ioc",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "clean-ioc",
    "package_url": "https://pypi.org/project/clean-ioc/",
    "platform": null,
    "project_url": "https://pypi.org/project/clean-ioc/",
    "project_urls": {
      "Documentation": "https://github.com/peter-daly/clean_ioc",
      "Homepage": "https://github.com/peter-daly/clean_ioc",
      "Repository": "https://github.com/peter-daly/clean_ioc"
    },
    "release_url": "https://pypi.org/project/clean-ioc/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.10,<4.0",
    "summary": "An IOC Container for Python 3.10+",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16909268,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "44687f2de65580fcc1b2a32e6bff7751c7a46e1d7e54ca364fe089586fc4c36c",
          "md5": "3f522a57e8b379598904bb4fed50208a",
          "sha256": "a5b0f6f4c348ac3a315d7a4403884a65cdf04873ec94ba7ba48eba394d0b0639"
        },
        "downloads": -1,
        "filename": "clean_ioc-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3f522a57e8b379598904bb4fed50208a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 8440,
        "upload_time": "2023-01-24T23:20:27",
        "upload_time_iso_8601": "2023-01-24T23:20:27.855507Z",
        "url": "https://files.pythonhosted.org/packages/44/68/7f2de65580fcc1b2a32e6bff7751c7a46e1d7e54ca364fe089586fc4c36c/clean_ioc-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84e5f7400ed85c23119f774583aa15e7285786cbd29388802fb5fd70b043f013",
          "md5": "94c0fdf231e3fecb281950040408f102",
          "sha256": "aa45a5d2ced89037e8cc309fc404b4dc50969aa1a43ac4060e0e51d76c1475e8"
        },
        "downloads": -1,
        "filename": "clean_ioc-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "94c0fdf231e3fecb281950040408f102",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 7413,
        "upload_time": "2023-01-24T23:20:29",
        "upload_time_iso_8601": "2023-01-24T23:20:29.415072Z",
        "url": "https://files.pythonhosted.org/packages/84/e5/f7400ed85c23119f774583aa15e7285786cbd29388802fb5fd70b043f013/clean_ioc-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae9a1cfd8fcc5db6a18ff7234e5f7f351abf4832a7ef2ef7a4d7aad530fea65b",
          "md5": "1e6f4bc5250ece2b04af0baf46426f63",
          "sha256": "78655d8a9387a7ee613f91c7238c0b16bd4e942f44b47b356181c6c5fe1398ab"
        },
        "downloads": -1,
        "filename": "clean_ioc-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1e6f4bc5250ece2b04af0baf46426f63",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 11918,
        "upload_time": "2023-02-04T22:51:53",
        "upload_time_iso_8601": "2023-02-04T22:51:53.205327Z",
        "url": "https://files.pythonhosted.org/packages/ae/9a/1cfd8fcc5db6a18ff7234e5f7f351abf4832a7ef2ef7a4d7aad530fea65b/clean_ioc-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8e7734c740163f28d1bd12e74053178cba85f7531a8e4e52f0eae504d40cd287",
          "md5": "762bbb07f7ee14de1dbb54fc691c9b2b",
          "sha256": "366fa809d6f846e4d4ed2b0f19f7fa7052c62589d338aff36c509e2b04220600"
        },
        "downloads": -1,
        "filename": "clean_ioc-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "762bbb07f7ee14de1dbb54fc691c9b2b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 14168,
        "upload_time": "2023-02-04T22:51:55",
        "upload_time_iso_8601": "2023-02-04T22:51:55.096191Z",
        "url": "https://files.pythonhosted.org/packages/8e/77/34c740163f28d1bd12e74053178cba85f7531a8e4e52f0eae504d40cd287/clean_ioc-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "27cf6f29d1f334dbbcf30d54e50ee11123c0d4661fdfb372bafc70ffb9eba061",
          "md5": "7f36502546a19ad8257e5c65372f7e6a",
          "sha256": "6cc5af5acfd392fdd13e289a6e63f2d519c095ce5bc2f9c24d96af8543c7e009"
        },
        "downloads": -1,
        "filename": "clean_ioc-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f36502546a19ad8257e5c65372f7e6a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.10,<4.0",
        "size": 11909,
        "upload_time": "2023-02-17T23:53:22",
        "upload_time_iso_8601": "2023-02-17T23:53:22.017123Z",
        "url": "https://files.pythonhosted.org/packages/27/cf/6f29d1f334dbbcf30d54e50ee11123c0d4661fdfb372bafc70ffb9eba061/clean_ioc-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1121d19c85350269df6b75d4089bf2c5f3be75cc6bd0094d54d24cbce4410739",
          "md5": "b5af2a9c202bc0570f103c513ab67b82",
          "sha256": "9cd6162c90e791dc2d1821bb0af90014df55ea62f6f7eae2bad63e10112cb85b"
        },
        "downloads": -1,
        "filename": "clean_ioc-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b5af2a9c202bc0570f103c513ab67b82",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.10,<4.0",
        "size": 14153,
        "upload_time": "2023-02-17T23:53:23",
        "upload_time_iso_8601": "2023-02-17T23:53:23.912585Z",
        "url": "https://files.pythonhosted.org/packages/11/21/d19c85350269df6b75d4089bf2c5f3be75cc6bd0094d54d24cbce4410739/clean_ioc-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "27cf6f29d1f334dbbcf30d54e50ee11123c0d4661fdfb372bafc70ffb9eba061",
        "md5": "7f36502546a19ad8257e5c65372f7e6a",
        "sha256": "6cc5af5acfd392fdd13e289a6e63f2d519c095ce5bc2f9c24d96af8543c7e009"
      },
      "downloads": -1,
      "filename": "clean_ioc-0.0.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7f36502546a19ad8257e5c65372f7e6a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.10,<4.0",
      "size": 11909,
      "upload_time": "2023-02-17T23:53:22",
      "upload_time_iso_8601": "2023-02-17T23:53:22.017123Z",
      "url": "https://files.pythonhosted.org/packages/27/cf/6f29d1f334dbbcf30d54e50ee11123c0d4661fdfb372bafc70ffb9eba061/clean_ioc-0.0.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1121d19c85350269df6b75d4089bf2c5f3be75cc6bd0094d54d24cbce4410739",
        "md5": "b5af2a9c202bc0570f103c513ab67b82",
        "sha256": "9cd6162c90e791dc2d1821bb0af90014df55ea62f6f7eae2bad63e10112cb85b"
      },
      "downloads": -1,
      "filename": "clean_ioc-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b5af2a9c202bc0570f103c513ab67b82",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.10,<4.0",
      "size": 14153,
      "upload_time": "2023-02-17T23:53:23",
      "upload_time_iso_8601": "2023-02-17T23:53:23.912585Z",
      "url": "https://files.pythonhosted.org/packages/11/21/d19c85350269df6b75d4089bf2c5f3be75cc6bd0094d54d24cbce4410739/clean_ioc-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}