{
  "info": {
    "author": "Monty Hindman",
    "author_email": "mhindman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development"
    ],
    "description": "## kwexception: Better exceptions with keyword parameters\n\n#### Motivation\n\nMost Python exceptions consist of an error type (`ValueError`, `TypeError`,\netc.) and a message that attempts to communicate the problem. In many\nsituations, that message must contain one or more data values to provide\ncontext. In simple cases, exceptions created in the classic style are not too\nbad.\n\n```python\nraise ValueError(f'Cannot convert value to float: {val!r}')\n```\n\nBut when the data needed to create a clear exception message expands to to\nmultiple or more complex values, the process becomes both tedious and\nill-conceived. Tedious because the programmer must engage in ad\nhoc string-formatting maneuvers. Ill-conceived because something explicit and\nuseful to programmers (data) is wedged into a string of text, making the data\nless immediately accessible (for example, quickly copying it into an editor or\nREPL) and less explicit (sometimes important details are lost in\nstringification). Here's a lightly-edited example taken from a high quality,\nwidely used Python library illustrating how the typical approach to exceptions\ncan quickly lead to awkward string-building gynastics.\n\n```python\nraise TypeError(\n    \"'{name}' must be {type!r} (got {value!r} that is a \"\n    \"{actual!r}).\".format(\n        name = name,\n        type = self.type,\n        actual = value.__class__,\n        value = value,\n    ),\n)\n```\n\nSimilar problems have long existed in more pressing forms in the domain of\nlogging. The classic approach was to emit logging messages in the manner\ndescribed above: take a human-readable message format and then insert data\nvalues into it. The end result is a logging message that is only\npartially-parsable unless the developers on the project exercise unusually high\nlevels of discipline in their creation of logging messages. Seeking a better\nalternative, many software engineers have switched to JSON-based logging. Under\nthat approach, the human-readable text is just a short message stating the\nproblem in general terms, and that message is just one key-value pair in a dict\nthat contains all other data parameters needed to make the logging entry\nspecific and meaningful.\n\nPython exceptions are amendable to similar improvements – hence the\nkwexception library. Instead of starting with some text and shoving data into\nit, the developer creates an exception via keyword parameters.\n\n#### Basic usage\n\nThe first step is to define one or more exception classes for your project. If\nyou are satisfied with the library's default behavior, those classes just need\nto inherit from `Kwexception`.\n\n```python\nfrom kwexception import Kwexception\n\nclass PointError(Kwexception):\n    pass\n```\n\nTo create exceptions, pass both the textual message and any other keyword\nparameters needed to make the error useful. By default, the message is stored\nunder the `msg` keyword parameter. When creating exceptions, you can pass the\nmessage explicitly under that key or as the first positional parameter. When\nwriting the text, avoid the temptation to put data values inside it: the\nphilosphy of the library is to keep the textual, but general, statement of the\nproblem separate from the specific data values relevant to the error at hand.\n\n```python\nINVALID = 'Invalid Point coordinates'\nx = 11\ny = None\n\ne = PointError(msg = INVALID, x = x, y = y)  # Pass msg explicitly.\ne = PointError(INVALID, x = x, y = y)        # Or as the first positional.\n```\n\nThe exception's data will be accessible via its `params` attribute.\n\n```python\nprint(e.params)  # {'msg': 'Invalid Point coordinates', 'x': 11, 'y': None}\n```\n\nInstances of the class have a `msg` property to retrieve the value at\nthe `msg` key in `params`, in the fashion of `dict.get()`.\n\n```python\nprint(e.msg)  # Invalid Point coordinates\n```\n\nWhen the exception is stringified, its data will be presented faithfully as a\ndict.\n\n```python\n# str() representation.\n{'msg': 'Invalid Point coordinates', 'x': 11, 'y': None}\n\n# repr() representation.\nPointError({'msg': 'Invalid Point coordinates', 'x': 11, 'y': None})\n\n# Stacktrace representation.\nPointError: {'msg': 'Invalid Point coordinates', 'x': 11, 'y': None}\n```\n\nUpon first exposure to such output one might balk at the aesthetics of the dict\nwhen compared to a classic exception with just a human-readable message. But\nstacktraces – and exception stringification generally – are the domain of\nsoftware engineers, not end users, so those aesthetics concerns are misplaced\n(if your end-users are seeing your stacktraces, your project has bigger\nproblems). For Python programmers, there is nothing mysterious or unsightly\nabout a dict; they are eminently clear and beautifully practical.\n\n#### Setting a default message, or several of them\n\nIn many situations, it makes sense to use one message for each exception type.\nIn that case, the `Kwexception` subclass can declare a `DEFAULT_MSG`, further\nsimplifying the process of creating the exception.\n\n```python\nclass PointError(Kwexception):\n    DEFAULT_MSG = 'Invalid Point coordinates'\n\ne = PointError(x = 11, y = None)\nprint(e.params)  # {'msg': 'Invalid Point coordinates', 'x': 11, 'y': None}\n```\n\nAlternatively, the user can define multiple defaults, either in the form of a\nmapping or object. During object creation, the supplied `msg` value will be\nused as a key or attribute to retrieve the desired default.\n\n```python\nclass PointError(Kwexception):\n    MSGS = dict(\n        coord = 'Invalid Point coordinates',\n        neg = 'Negative coordinates currently disallowed',\n    )\n\ne = PointError(PointError.MSGS['coord'], x = 11, y = None)\n```\n\n#### Old-school data-bearing messages\n\nPerhaps you like the central idea of the kwexception library – maintaining a\nseparation between the textual message and the data values – but either you\nare a traditionalist at heart or your project still requires data-bearing,\nhuman-readable messages for some other purpose (for example, a situation where\nyou do need to assemble a user-facing message, not a stacktrace, and an\nexception's data provides the most logical mechanism to do that).\n\nThe kwexception library supports that use case via the `FORMAT_MSG` attribute.\nIf true, during object creation the `Kwexception` subclass will treat the\ninitially-derived `msg` not not as a literal message but as a Python\nformat-string. The ultimate `msg` is then derived via a `str.format()` call,\npassing the exception's keyword parameters as arguments to that call.\n\nOptionally, `FORMAT_MSG` can be combined with either `DEFAULT_MSG` or `MSGS`,\nas illustrated here.\n\n```python\nclass PointError(Kwexception):\n    DEFAULT_MSG = 'Invalid Point coordinates: x={x} y={y}'\n    FORMAT_MSG = True\n\ne = PointError(x = 11, y = None)\nprint(e.params)  # {'msg': 'Invalid Point coordinates: x=11 y=None', 'x': 11, 'y': None}\n```\n\n#### Details on the exception data model on stringification\n\nThe underlying data model for a [Python exception][python_base_exception] is a\ntuple, accessible via the `args` attribute.\n\n```python\nve1 = ValueError('Boom')\nve1.args                        # ('Boom',)\n\nve2 = ValueError('Boom', 1, 2)\nve2.args                        # ('Boom', 1, 2)\n```\n\nA `Kwexception` subclass rests on that behavior, with the dict of keyword\nparameters typically being the sole element in the `args` tuple. For example,\nthe PointError shown above would have the following tuple.\n\n```python\n({'msg': 'Invalid Point coordinates', 'x': 11, 'y': None},)\n```\n\nWhen a Python exception's `args` tuple has just one element (which is the\nsituation in the overwhelming majority of cases), stringification takes a\nsimplified form. One can see this by comparing the two ValueError instances\nshown above.\n\n```python\nprint(str(ve1))  # Boom\nprint(str(ve2))  # ('Boom', 1, 2)\n```\n\nThe `Kwexception` library provides an analogous simplification when its instances\nare stringified. If the instance has only a `msg` in its keyword parameters and\nif its `args` tuple consists of nothing but the dict of those parameters, the\nexception will be displayed in simple form.\n\n```python\ne1 = PointError('Foo', x = 11, y = None)\ne2 = PointError('Foo')\ne3 = PointError(msg = 'Foo')\n\nprint(str(e1))   # {'msg': 'Foo', 'x': 11, 'y': None}\nprint(repr(e1))  # PointError({'msg': 'Foo', 'x': 11, 'y': None})\n\nprint(str(e2))   # Foo\nprint(repr(e2))  # PointError('Foo')\n\nprint(str(e3))   # Foo\nprint(repr(e3))  # PointError('Foo')\n```\n\n#### Exception handling and augmentation\n\nThe `Kwexception` class provides another primary feature: the ability to handle\nother exceptions in an easier, more consistent way. This behavior is provided\nvia the class method `new()`, which takes an exception as its first argument\nand optionally takes any other keyword parameters. Its intended usage is in a\n`try-except` context.\n\n```python\ntry:\n    ...\nexcept Exception as e:\n    # The original error might or might not be a PointError.\n    # Our application wants to ensure that it is.\n    e = PointError.new(e, msg = 'foo', x = x, y = y)\n    ...\n```\n\nIf the exception provided to `Kwexception.new()` is already an instance of the\nrelevant `Kwexception` subclass, the method returns the same exception\ninstance, but updates its `params` dict with the keyword parameters supplied to\n`new()`.\n\n```python\ne1 = PointError('foo', a = 1, b = 2)\ne2 = PointError.new(e1, a = 111, c = 3)\n\nprint(e2 is e1)  # True\nprint(repr(e2))  # PointError({'msg': 'foo', 'a': 111, 'b': 2, 'c': 3})\n```\n\nIf the provided exception is some other type of error, the `new()` method\nreturns a new `Kwexception` subclass instance with the provided keyword\nparameters, plus additional parameters providing contextual information about\nthe original exception's type and `args`.\n\n```python\nve1 = ValueError('foo', 99)\ne3 = PointError.new(ve1, msg = 'bar', x = 1)\n\nprint(repr(e3)) # PointError({'msg': 'bar', 'x': 1,\n                # 'context_error': 'ValueError', 'context_args': ('foo', 99)})\n```\n\n#### Customization\n\nA `Kwexception` superclass offers a few customizations for users who want some,\nbut not all, of its default behaviors. This example lists the default settings.\n\n```python\nclass PointError(Kwexception):\n\n    # Key name for the Kwexception message in self.params.\n    MSG_KEY = 'msg'\n\n    # Whether and how to set msg from the first positional.\n    MOVE = 'move'\n    COPY = 'copy'\n    SET_MSG = Kwexception.MOVE # Kwexception.MOVE, Kwexception.COPY, or None.\n\n    # Default msg for instances of the class.\n    DEFAULT_MSG = None\n\n    # Default msg values for instances of the class. Accepts mapping or object.\n    MSGS = None\n\n    # Whether to use the initially-derived msg value as format string.\n    FORMAT_MSG = False\n\n    # Whether to add params to args.\n    ADD_PARAMS_TO_ARGS = True\n\n    # Whether to simplify stringification for message-only exceptions.\n    SIMPLIFY_DISPLAY = True\n\n    # Whether to treat a single positional dict as the keyword params.\n    SINGLE_DICT_AS_PARAMS = True\n\n    # Whether new() should use update or setdefault when augmenting params.\n    NEW_UPDATE = True\n\n    # Whether new() should convert errors of another type to the relevant\n    # Kwexception subclass and, if so, whether to include contexutal\n    # information in params.\n    NEW_CONVERT = True\n    NEW_CONTEXT = True\n\n    # Key names for contextual information provided by new().\n    CONTEXT_ERROR = 'context_error'\n    CONTEXT_ARGS = 'context_args'\n```\n\n**Controlling the key name for the exception message: `MSG_KEY`**. The\n`Kwexception` instance's message is stored under the `msg` key. To use a\ndifferent naming convention, set `MSG_KEY` to a different value and define an\nalias for the `Kwexception.msg()` property. Here is an illustration for those\npreferring a more verbose but explicit approach.\n\n```python\nclass PointError(Kwexception):\n    MSG_KEY = 'message'\n    message = Kwexception.msg\n```\n\n**Setting the message from the first positional: `SET_MSG`**. By default, the\nfirst positional argument is treated as the `msg` and is moved out of the tuple\nof positionals and into the dict of keyword parameters. Alternatively, that\nmove operation can be a copy operation, or disabled entirely.\n\n**Defining default message(s): `DEFAULT_MSG` and `MSGS`**. Specify either a\ndefault `msg` value or a dict or object holding such values, as discussed\nabove.\n\n**Data-bearing messages: `FORMAT_MSG`**. If true treat the initially-derived\n`msg` as a Python format-string, as discussed above.\n\n**Adding the dict of keyword parameters to the `args` tuple:\n`ADD_PARAMS_TO_ARGS`**. By default, the dict of keyword parameters is appended\nto the exception's `args` tuple (this occurs after the move/copy for `SET_MSG`).\nIf a `Kwexception` subclass wants to take advantage of keyword parameters but\nalso needs the `args` tuple for other purposes, this behavior can be disabled.\n\n**Simplified display for message-only exceptions: `SIMPLIFY_DISPLAY`**. As\ndocumented above, by default a `Kwexception` instance containing no data other\nthan a `msg` will stringify in a simplified way. If the behavior is disabled,\nstringification will be based on the content of `args` using default Python\nbehavior.\n\n**Accept keyword parameters via a positional dict: `SINGLE_DICT_AS_PARAMS`**.\nBy default, a `Kwexception` instance is stringified for `repr()` by showing the\ndict of keyword parameters. For consistency with that representation, if the\nconstructor is given only a dict positionally (i.e., no other positional or\nkeyword arguments), it will treat that dict as the exception's keyword\nparameters and store them in `params` accordingly.\n\n**`Kwexception.new()`: augment keyword parameters via update or setdefault:\n`NEW_UPDATE`**. When given an instance of the relevant `Kwexception` subclass,\nthe classmethod `new()` uses the keyword parameters to augment the original\nexception's `params` dict in the manner of `dict.update()`. If `NEW_UPDATE` is\nset to false, the `params` dict is augmented in the manner of\n`dict.setdefault`.\n\n**`Kwexception.new()`: whether to convert exceptions and add contextual\ninformation about the original: `NEW_CONVERT` and `NEW_CONTEXT`**. When given\nan instance of a non-`Kwexception` type, the classmethod `new()` returns a new\nexception of the relevant `Kwexception` subclass and it includes contextual\ninformation in the `params` dict about the original error. Alternatively, one\ncan suppress the inclusion of contextual information or the entire conversion\nprocess.\n\n**`Kwexception.new()`: key names for contextual information: `CONTEXT_ERROR`\nand `CONTEXT_ARGS`**. Modify as needed.\n\n----\n\n[python_base_exception]: https://docs.python.org/3/library/exceptions.html#BaseException\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/hindman/kwexception",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kwexception",
    "package_url": "https://pypi.org/project/kwexception/",
    "platform": null,
    "project_url": "https://pypi.org/project/kwexception/",
    "project_urls": {
      "Homepage": "https://github.com/hindman/kwexception"
    },
    "release_url": "https://pypi.org/project/kwexception/1.0.0/",
    "requires_dist": [
      "invoke ; extra == 'dev'",
      "ipython ; extra == 'dev'",
      "pycodestyle ; extra == 'dev'",
      "twine ; extra == 'dev'",
      "virtualenv ; extra == 'dev'",
      "virtualenvwrapper ; extra == 'dev'",
      "pytest-cov ; extra == 'test'",
      "tox ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Better exceptions with keyword parameters",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16251806,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1e1debb6bef1a9caa430367a4edae0e380a112521c1d670b6cb37aa489f0c47",
          "md5": "0c5f6aeddbeb6ce96bbebddda762bf04",
          "sha256": "ed94632ee32da6e045901c5353eb3c21c88b73592b9f95510394a15293c8e38d"
        },
        "downloads": -1,
        "filename": "kwexception-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c5f6aeddbeb6ce96bbebddda762bf04",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 9612,
        "upload_time": "2022-12-29T20:41:01",
        "upload_time_iso_8601": "2022-12-29T20:41:01.780081Z",
        "url": "https://files.pythonhosted.org/packages/c1/e1/debb6bef1a9caa430367a4edae0e380a112521c1d670b6cb37aa489f0c47/kwexception-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7ace88e4c7447a702c03b0c1f2a2dd6449a452cdfbb6a4f7b7df72260b2f018",
          "md5": "cbb5eb29b2dc83b59189caa5e3ef43a3",
          "sha256": "095dd33c00132f9a925d80321be02db4408c733995a1322cdf9e48c36e204dfa"
        },
        "downloads": -1,
        "filename": "kwexception-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cbb5eb29b2dc83b59189caa5e3ef43a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 13937,
        "upload_time": "2022-12-29T20:41:03",
        "upload_time_iso_8601": "2022-12-29T20:41:03.701730Z",
        "url": "https://files.pythonhosted.org/packages/c7/ac/e88e4c7447a702c03b0c1f2a2dd6449a452cdfbb6a4f7b7df72260b2f018/kwexception-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c1e1debb6bef1a9caa430367a4edae0e380a112521c1d670b6cb37aa489f0c47",
        "md5": "0c5f6aeddbeb6ce96bbebddda762bf04",
        "sha256": "ed94632ee32da6e045901c5353eb3c21c88b73592b9f95510394a15293c8e38d"
      },
      "downloads": -1,
      "filename": "kwexception-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0c5f6aeddbeb6ce96bbebddda762bf04",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 9612,
      "upload_time": "2022-12-29T20:41:01",
      "upload_time_iso_8601": "2022-12-29T20:41:01.780081Z",
      "url": "https://files.pythonhosted.org/packages/c1/e1/debb6bef1a9caa430367a4edae0e380a112521c1d670b6cb37aa489f0c47/kwexception-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c7ace88e4c7447a702c03b0c1f2a2dd6449a452cdfbb6a4f7b7df72260b2f018",
        "md5": "cbb5eb29b2dc83b59189caa5e3ef43a3",
        "sha256": "095dd33c00132f9a925d80321be02db4408c733995a1322cdf9e48c36e204dfa"
      },
      "downloads": -1,
      "filename": "kwexception-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cbb5eb29b2dc83b59189caa5e3ef43a3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 13937,
      "upload_time": "2022-12-29T20:41:03",
      "upload_time_iso_8601": "2022-12-29T20:41:03.701730Z",
      "url": "https://files.pythonhosted.org/packages/c7/ac/e88e4c7447a702c03b0c1f2a2dd6449a452cdfbb6a4f7b7df72260b2f018/kwexception-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}