{
  "info": {
    "author": "BlackMonkey",
    "author_email": "3213322480@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n\n<div align=\"center\">\n    <img src=\"https://github.com/blackmonkey121/verify/blob/master/image/verify_logo.png\" alt=\"Verify-Logo\">\n</div>\n\n# Verify ![](https://img.shields.io/badge/GPL-3.0-green)  ![](https://img.shields.io/badge/version-0.0.2-informational)  ![](https://img.shields.io/badge/python-3.x-blueviolet)\nAn elegant verification code generation framework.\n\n## Contents\n\n- [No.1 Background](https://github.com/blackmonkey121/verify#background)\n- [No.2 Installation](https://github.com/blackmonkey121/verify#installation)\n- [No.3 Usage](https://github.com/blackmonkey121/verify#usage)\n- [No.4 Example](https://github.com/blackmonkey121/verify#example)\n- [No.5 Expand&Overwrite](https://github.com/blackmonkey121/verify#expand--overwrite)\n- [No.6 Configuration table](https://github.com/blackmonkey121/verify#configuration-table)\n- [No.7 License](https://github.com/blackmonkey121/verify#license)\n\n\n\n## Background\n\nCaptchas are common in web development, but common captchas are easy to identify and bypass. The project provides a simple and flexible captcha generator that is efficient, secure, and easy to extend.\n\n\n\n## Installation\n\n### Way 1：\n\n```pyhton\npip install verify-python\n```\n\n\n### Way 2：\n\n```python\npip install git+git://github.com/blackmonkey121/verify.git\n```\n\n**or**\n\n```python\npip install git+https//github.com/blackmonkey121/verify.git\n```\n\n### Way 3：\n\n**Download**  👉  [Click me **Download** verify-python](https://github.com/blackmonkey121/verify/archive/master.zip)\n\n```shell\npython setup.py instal   # 在 verify-python 根目录下执行\n```\n\n\n\n## Usage\n\n\n###  VerifyGif\n\n```python\nfrom verify import VerifyGif\n\ngif = VerifyGif()    # Get the instance of VerifyGif.\nveri = gif('A48K')   # You can specify it yourself or generate it randomly.\nveri.save_file()   # Save the verify code to `.Verify/verifyxxx.gif`\nveri.get_binary()    # Get the verify code format binary.\n```\n\n\n\n###  VerifyPng\n\n```python\nfrom verify import VerifyPng\n\npng_instance = VerifyPng()\nveri = instance('J7Wd')\nveri.get_binary()\n```\n\n\n\n### Safe\n\nCreate encrypted all request parameters.\n\n```python\nfrom verify import Safe\n\ns = Safe()\n\nret = s.coding(string='Mst4')\n# ret : `IntcInN0clwiOiBcIkRcXHUwMG...XCJSU0FcIiwgXCJ2dFwiOiBcImdpZlwifSI=`\n\nret = s.parse(ret)\n# ret : `{'str': 'Mst4', 'mtd': 'RSA', 'vt': 'gif'}`\n```\n\n\n\n### Config\n\n> **way1** Use config file. This is recommended if there are many configuration information\n\n```python\nfrom verify import Config\n\n# You can tell verify configuration information in the form of a file.\nconfig = Config('my_conifg')/ config = Config('my_conifg.py')   # Extend name can be accept.\n```\n\n> **way2** Inherit the `Config` class, and then rewrite the attributes. This makes your code look clear, and you can add some methods. But it's a bit complicated.\n\n```python\nfrom verify import Config, VerifyGif\n\nclass MyConfig(Config):\n\n    FRAME_NUMBER: int = 24\n    VERIFY_SIZE: tuple = (40, 40)\n    LINES_NUMBER: int = 4 \n\nveri = VerifyGif(config=MyConfig)   # You must pass it as a parameter to VerifyGif/VerifyPng.\n```\n\n> **way3** Add attributes directly to `config`.  This is recommended if there is little configuration information.\n\n```python\nfrom verify import config\n\nconfig.FRAME_NUMBER: int = 24\nconfig.VERIFY_SIZE: tuple = (42, 42)\nconfig.LINES_NUMBER: int = 5\n```\n\n\n\n### Cache\n\n> This is a thread-safe cache. The package itself depends on it, which is convenient if you happen to need it in your project.  For example, save the generated verification code.\n\n```python\nfrom verify import Cache\n\ncache = Cache(contain=1024, expiration=60 * 60)   \n# contain: Maximum capacity.  expiration: timeout.\n\ncache.set('key', 'value')   # set value.\ncache.get('key')   # get value.\ncache.clear()  # clear cache.\n```\n\n**tips:** You have to use your own instantiated object. \n\n\n\n## Example\n\n### business server\n\n> Create the `<img src=\"https://path/verify/verify_url_para\">`\n\n```python\nfrom verify import Safe\n\ns = Safe()\nverify_url_para = s.coding('S7rE')\nurl = url + verify_url_para\n\n# verify_url_para: IntcInN0clwsjMG...XCJSU0FcIiXCJ2dFwiOiBcImdpZlwifSI=\n\nrander(<img src=\"https://path/verify/verify_url_para\">)\nrender(<img src=\"https://xxx/verify/IntcInN0clwsjMG...XCJSU0FcIiXCJ2dFwiOiBcImdpZlwifSI=\" alt=\"verify\">)\n```\n\n### verify server \n\n> Get the verify_url_para, parse it. Create the verification code binary format.\n\n```python\nrequest_str = \"IntcInN0clwsjMG...XCJSU0FcIiXCJ2dFwiOiBcImdpZlwifSI=\"\nfrom verify import Safe, VerifyGif, VerifyPng\n\ns = Safe()\nrequest_data = s.parse(request_str)\n# request_data: {'str': 'S7rE', 'mtd': 'RSA', 'vt': 'gif'}\n\nverify_dict = {'gif': VerifyGif, 'png': VerifyPng}\n\ndef get_verify_binary(request_data):\n    verify_type = request_data.get('vt', None)\n    string = request_data.get('str', None)\n\n    verify_cls = verify_dict.get(verify_type, None)\n\n    if verify_cls is not None:\n        instance = verify_cls()\n        verify = instance(string=string)\n        return verify.get_binary()\n    else:\n        raise Exception('Request parameter error.')\n\nverify_binary = get_verify_binary(request_data)\nreturn verify_binary   # Verification code in binary format.\n```\n\n**[More examples]()**\n\n## Expand & Overwrite\n\n> Provides support for two types of verification codes, namely **`GifVerify`** and **`PngVerify`**,\n>\n> When instantiating them, you can specify`Builder`、`config`、 `Filter`、`Storage`、`Style`.\n\n- **Builder**\n  - **_Create_char_**  create char image.\n  - **_Create_background_**  create background layer.\n  - **_back_fix_char_**  Mix character pictures into the background.\n- **Filter**\n  - **_char_filter_**   Will be called after `create_char` . \n  - **_back_filter_**  will be called after `create_background`.\n  - **_frame_filer_**  will be called after `GifVerify/PngVerify.get_frame`\n\n- **Storage**\n  - **_save_file_**   Save the **GifVerify/PngVerify object** to the file system.\n  - **_get_binary_**  Returns the binary data of this **GifVerify/PngVerify object**.\n- **Style**\n  - **_get_lines_** Location informations of interference line.\n  - **_get_positions_**  Chareset position informations of in the background.\n  - **_get_angles_**  Chareset angle informations of in the background.\n  - **_frame_style_**  All style information of each layer.\n\n\n\n> You can inherit them and rewrite them to meet your needs. For more detailed introduction, please see the [document]().\n\n### Storage\n\n```python\nfrom verify import VerifyPng, PngStorage\n\n\nclass MyStorage(PngStorage):\n\n    def show_img(self):\n\n        from PIL import Image\n\n        img = Image.open(self.instance)   # Read image from self.instance\n\n        img.show()  # show the image.\n\n\nveri = VerifyPng(storage=MyStorage)   # Instantiate VerifyPng\n\npng = veri('HQ3r')  # Return `MyStorage` instance.\n\npng.show_img()   # Call `show_img` methods.\n```\n\n\n\n### Filter\n\n```python\nfrom verify import VerifyPng, PngFilter\n\n\nclass MyFilter(PngFilter):\n\n    def char_filter(self, verify: object, char: 'Image.Image', *args, **kwargs) -> 'Image.Image':\n        ...\n        print('Overwrite char_filter. ')\n        ...\n        return super().char_filter(verify=verify, char=char, *args, **kwargs)\n\n\nveri = VerifyPng(filter=MyFilter)\npng = veri('HQ3r')\n```\n\n\n\n### Builder\n\n```python\nfrom verify import VerifyPng, PngFrameBuilder\n\n\nclass MyBuilder(PngFrameBuilder):\n\n    def create_background(self, back_filter, *args, **kwargs) -> 'Image.Image':\n        ...\n        print('Overwrite create_background. ')\n        ...\n        return super().create_background(back_filter=back_filter, *args, **kwargs)\n\n\nveri = VerifyPng(builder=MyBuilder)\npng = veri('HQ3r')\n```\n\n\n\n### Style\n\n```python\nfrom verify import VerifyPng, PngStyle\n\n\nclass MyStyle(PngStyle):\n\n    def get_angles(self, *args, **kwargs) -> 'Iterable':\n        ...\n        print('Overwrite get_angles. ')\n        ...\n        return super(MyStyle, self).get_angles()\n\n\nveri = VerifyPng(style=MyStyle)\npng = veri('HQ3r')\n```\n\n\n\n### Config\n\n> Config will provide a hook that will call all methods ending in `_clean`. This can dynamically adjust the parameters, especially when the values of other parameters are not clear. You can also filter and add specific parameters.\n\n```python\nfrom verify import VerifyPng, Config\n\n\nclass MyConfig(Config):\n\n    VERIFY_SIZE = (200, 54)   \t\t\t# Write custom configuration information\n    VERIFY_CODE_NUMBER = 6\t\t\t\t\t# it will be used first.\n    VERIFY_CODE_SIZE = (50, 50)\n    DEFORM_OFFSET = 6\n    DEFORM_NUMBER = 2\t\n\n    # Methods ending in `_clean` will be called by default.\n    def deform_clean(self):\n        self.DEFORM_NUMBER = 1 if self.DEFORM_NUMBER < 1 else self.DEFORM_NUMBER\n\nveri = VerifyPng(storage=MyStorage, config=MyConfig)\n\npng = veri()\npng.show()\n```\n\n> You can pass in multiple custom classes at the same time, as long as they follow the corresponding interface.\n\n```python\n...\nveri = VerifyPng(storage=MyStorage, config=MyConfig, filter=MyFilter, builder=MyBuilder, style=MyStyle)\n\npng = veri('H7rJ')\npng.show()\n...\n```\n\n> Follow the interface without inheriting the default class. All interfaces are aggregated in `verify.abc.py`  .\n>\n> **Interface list**: `AbstractVerify`,` AbstractFilter`,` AbstractStyle`, `AbstractStorage`,` AbstractFrameBuilder`\n\n```python\nfrom verify.abc import AbstractFilter\n\n\nclass MyFilter(AbstractFilter):\n\n    def back_filter(self, verify: object, back: 'Image.Image', *args, **kwargs) -> 'Image.Image':\n        return back\n\n    def frame_filter(self, verify: object, *args, **kwargs) -> 'Image.Image':\n        return verify.frame\n\n    def char_filter(self, verify: object, char: 'Image.Image', *args, **kwargs) -> 'Image.Image':\n        return char\n\n\nveri = VerifyPng(filter=MyFilter, storage=MyStorage)\npng = veri('Ag3r')\npng.show()\n```\n\n\n\n## Configuration table\n\n| Configuration |Default|Meaning |\n| ------------- | ------- | ------- |\n| VERIFY_CODE_SET | NUMBERS + CHARS_BIG + CHARS_LOW <  list > |Random character set|\n|CHAR_FONT|ImageFont.truetype('Arial.ttf', 40)| Font and size                      |\n|VERIFY_CODE_NUMBER|4|Number of characters on each layer|\n|VERIFY_CODE_SIZE|(40, 40)  < pixel >|Character size|\n|BACK_COLOR|(255, 255, 255, 255)  < pixel >|Background color|\n|CHAR_COLOR|(0, 0, 0, 255)  < pixel >|Character color|\n|NULL_COLOR|(0, 0, 0, 0)  < pixel >|Null color|\n|VERIFY_SIZE|(180, 60)  < pixel >|CAPTCHA size|\n|BACK_NOISE_NUMBER|200|Number of background noise|\n|BACK_NOISE_TYPE|2  < pixel >|Size of background noise|\n|LINES_NUMBER|4|Number of interference lines|\n|CHAR_CUT_NUMBER|8|Number of character fragments|\n|CHAR_CUT_PRESENT|0.2|Size of incomplete area|\n|CIRCLE_NUMBER|6|Number of interference circle|\n|FRAME_NUMBER|30|Frame number of GIF Verify|\n|TRACK_INTERVAL|10 < pixel >|Character rotation radius|\n|ANGLE_INTERVAL|60 < ±60 >|Rotation range of characters|\n|RSA_FOLDER|RSA_KEY|RSA key save directory|\n|RSA_KEY_DIR|`verify.RSA_KEY` < builder-in path >|RSA key save path|\n|SAFE_ENGINE|'RSA'|Default encryption engine|\n|SECRET_KEY|'a-=3bb51t_x#........s4_=w^40xj#7g'|Secret key for fast encryption engine|\n|STORAGE_DIR|'Verify'|Save location of CAPTCHA|\n|DEFORM_NUMBER|2|Number of character twists|\n|DEFORM_OFFSET|6 < pixel >|The degree of character distortion|\n\n\n\n\n## License\n\n### [GPLv 3.0](https://github.com/blackmonkey121/verify/blob/master/LICENSE) \n\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/blackmonkey121/verify",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "verify-python",
    "package_url": "https://pypi.org/project/verify-python/",
    "platform": "",
    "project_url": "https://pypi.org/project/verify-python/",
    "project_urls": {
      "Homepage": "https://github.com/blackmonkey121/verify"
    },
    "release_url": "https://pypi.org/project/verify-python/0.0.2/",
    "requires_dist": [
      "itsdangerous (>=1.1.0)",
      "numpy (>=1.11.3)",
      "opencv-python (>=3.4)",
      "Pillow (>=7.0)",
      "rsa (>=4.0)"
    ],
    "requires_python": ">=3.3",
    "summary": "An elegant verification code generator.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7202231,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e6032a37695a77ed05f10c756a0942b44b2dc43b727d0fe731475b687b40691c",
          "md5": "a0d7a266ec0b2eefa77139f57e9e846a",
          "sha256": "3130d6372062659743647e9f92c6c5b57d51e8901cb138f4194386e9b23b4865"
        },
        "downloads": -1,
        "filename": "verify_python-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0d7a266ec0b2eefa77139f57e9e846a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": ">=3.3",
        "size": 34185,
        "upload_time": "2020-05-02T04:50:28",
        "upload_time_iso_8601": "2020-05-02T04:50:28.632088Z",
        "url": "https://files.pythonhosted.org/packages/e6/03/2a37695a77ed05f10c756a0942b44b2dc43b727d0fe731475b687b40691c/verify_python-0.0.2-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9015505d490f8e890fba8fef73dfcd433b81369028c84f7bb448fe82d190f016",
          "md5": "751cfd4970e6c4a7fe35795264d248c8",
          "sha256": "2c911363c492ed8d043cd6d4df722263754b1b2f1f974c47dd3945e640bedf64"
        },
        "downloads": -1,
        "filename": "verify_python-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "751cfd4970e6c4a7fe35795264d248c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.3",
        "size": 34247,
        "upload_time": "2020-05-09T05:28:20",
        "upload_time_iso_8601": "2020-05-09T05:28:20.762724Z",
        "url": "https://files.pythonhosted.org/packages/90/15/505d490f8e890fba8fef73dfcd433b81369028c84f7bb448fe82d190f016/verify_python-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb5c3adcf9c1ef3876786e428da34aec9f71ab6d1a4241aca6c3dca1c616ad0f",
          "md5": "3e23bddf9edef99181df7c3589863ff1",
          "sha256": "20a2ff60b554c19ec079cce353e066c8c43872fb69981afda88fe4312318efab"
        },
        "downloads": -1,
        "filename": "verify-python-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3e23bddf9edef99181df7c3589863ff1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.3",
        "size": 20906,
        "upload_time": "2020-05-09T04:29:41",
        "upload_time_iso_8601": "2020-05-09T04:29:41.493060Z",
        "url": "https://files.pythonhosted.org/packages/fb/5c/3adcf9c1ef3876786e428da34aec9f71ab6d1a4241aca6c3dca1c616ad0f/verify-python-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e6032a37695a77ed05f10c756a0942b44b2dc43b727d0fe731475b687b40691c",
        "md5": "a0d7a266ec0b2eefa77139f57e9e846a",
        "sha256": "3130d6372062659743647e9f92c6c5b57d51e8901cb138f4194386e9b23b4865"
      },
      "downloads": -1,
      "filename": "verify_python-0.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a0d7a266ec0b2eefa77139f57e9e846a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": ">=3.3",
      "size": 34185,
      "upload_time": "2020-05-02T04:50:28",
      "upload_time_iso_8601": "2020-05-02T04:50:28.632088Z",
      "url": "https://files.pythonhosted.org/packages/e6/03/2a37695a77ed05f10c756a0942b44b2dc43b727d0fe731475b687b40691c/verify_python-0.0.2-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9015505d490f8e890fba8fef73dfcd433b81369028c84f7bb448fe82d190f016",
        "md5": "751cfd4970e6c4a7fe35795264d248c8",
        "sha256": "2c911363c492ed8d043cd6d4df722263754b1b2f1f974c47dd3945e640bedf64"
      },
      "downloads": -1,
      "filename": "verify_python-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "751cfd4970e6c4a7fe35795264d248c8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.3",
      "size": 34247,
      "upload_time": "2020-05-09T05:28:20",
      "upload_time_iso_8601": "2020-05-09T05:28:20.762724Z",
      "url": "https://files.pythonhosted.org/packages/90/15/505d490f8e890fba8fef73dfcd433b81369028c84f7bb448fe82d190f016/verify_python-0.0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fb5c3adcf9c1ef3876786e428da34aec9f71ab6d1a4241aca6c3dca1c616ad0f",
        "md5": "3e23bddf9edef99181df7c3589863ff1",
        "sha256": "20a2ff60b554c19ec079cce353e066c8c43872fb69981afda88fe4312318efab"
      },
      "downloads": -1,
      "filename": "verify-python-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3e23bddf9edef99181df7c3589863ff1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.3",
      "size": 20906,
      "upload_time": "2020-05-09T04:29:41",
      "upload_time_iso_8601": "2020-05-09T04:29:41.493060Z",
      "url": "https://files.pythonhosted.org/packages/fb/5c/3adcf9c1ef3876786e428da34aec9f71ab6d1a4241aca6c3dca1c616ad0f/verify-python-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}