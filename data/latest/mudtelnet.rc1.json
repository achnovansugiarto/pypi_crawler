{
  "info": {
    "author": "Volund",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.5",
      "Topic :: Games/Entertainment :: Multi-User Dungeons (MUD)",
      "Topic :: Games/Entertainment :: Puzzle Games",
      "Topic :: Games/Entertainment :: Role-Playing",
      "Topic :: Games/Entertainment :: Simulation",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "# Volund's MudTelnet library for Python\n\n## CONTACT INFO\n**Name:** Volund\n\n**Email:** volundmush@gmail.com\n\n**PayPal:** volundmush@gmail.com\n\n**Discord:** Volund#1206\n\n**Discord Channel:** https://discord.gg/Sxuz3QNU8U\n\n**Patreon:** https://www.patreon.com/volund\n\n**Home Repository:** https://github.com/volundmush/mudtelnet-python\n\n## TERMS AND CONDITIONS\n\nMIT license. In short: go nuts, but give credit where credit is due.\n\nPlease see the included LICENSE.txt for the legalese.\n\n## INTRO\nMUD (Multi-User Dungeon) games and their brethren like MUSH, MUX, MUCK, and MOO (look 'em up!) utilize a peculiar subset of telnet. At least, SOME do - there are servers and clients which don't bother with telnet negotiation. But, for those that do, the telnet features largely begin and end with using IAC WILL/WONT/DO/DONT Negotiation and IAC SB <option> <data> IAC SE to send arbitrary data. In a way, MUD Telnet has diverged to become its own dialect. Library support for MUD-specific features like MXP, MSSP, and MCCP2 can be hard to come by. This library attempts to provide a one-stop-shop for handling MUD Telnet.\n\nThis library isn't a MUD. It doesn't open any ports or send data. It's simply a tool for taking the bytes a program would receive from a client and turning it into a series of 'events' that user-given application logic can then utilize, and a way to encode 'outgoing events' into bytes to be sent back to a client.\n\n## FEATURES\n  * MCCP2 (Mud Client Compression Protocol v2)\n  * MTTS (Mud Terminal Type Standard, aka TTYPE)\n  * NAWS (Negotiate About Window Size)\n  * Suppress_GA\n  * Linemode\n  * MSSP (Mud Server Status Protocol)\n  * MXP (Mud eXtension Protocol)\n\n## COMING SOON?\n  * MCCP3 (Mud Client Compression Protocol v3)\n  * MUD Prompt support\n  * GMCP (Generic Mud Communication Protocol)\n  * MSDP (Mud Server Data Protocol)\n  * MNES (Mud New-Environ Standard)\n  \n\n## OKAY, BUT HOW DO I USE IT?\nGlad you asked.\n\nInput from clients must be converted to TelnetFrame, first.\n```python\nfrom mudtelnet import TelnetFrame\ndata = bytearray([255, 251, 31, 13])\nframe, size = TelnetFrame.parse(data)\n```\nYou'll notice that frame is a NEGOTIATION type. size is 3. data was read but not modified. in order to consume bytes, you would need to del data[:size] after verifying that a frame was parsed - if there wasn't enough bytes, then frame will be ```None```.\n\nEach client session needs an associated TelnetConnection object.\n```python\nfrom mudtelnet import TelnetConnection\n\nconn = TelnetConnection()\n\nout_buffer = bytearray()\nout_events = list()\nchanged = conn.process_frame(frame, out_buffer, out_events)\n```\nOnce you have a frame, you feed it to TelnetConnection.process_frame(). This method accepts a bytearray to append outgoing bytes to (as certain input will result in immediate output, such as option negotiation) and also a list that protocol events (such as user commands) will be appended to. It returns a dictionary of what CHANGED, if anything - such as if MCCP2 was enabled or the client's name was identified via MTTS.\n\nTo send data...\n```python\nfrom mudtelnet import TelnetOutMessage, TelnetOutMessageType\n\nmsg = TelnetOutMessage(TelnetOutMessageType.LINE, \"Mud Telnet makes it easy!\")\n\nconn.process_out_message(msg, out_buffer)\n```\nThe message will be encoded to bytes, which are then appended to out_buffer.\n\n## FAQ \n  __Q:__ This is cool! How can I help?  \n  __A:__ [Patreon](https://www.patreon.com/volund) support is always welcome. If you can code and have cool ideas or bug fixes, feel free to fork, edit, and pull request! Join our [discord](https://discord.gg/Sxuz3QNU8U) to really get cranking away though.\n\n  __Q:__ I found a bug! What do I do?  \n  __A:__ Post it on this GitHub's Issues tracker. I'll see what I can do when I have time. ... or you can try to fix it yourself and submit a Pull Request. That's cool too.\n\n  __Q:__ But... I want a MUD! Where do I start making a MUD?  \n  __A:__ Coming soon...\n\n  __Q:__ Why not just feed data straight to TelnetConnection? Why manually create TelnetFrames first?  \n  __A:__ Eventually, I want to add MCCP3 support, which would call for decompressing incoming data. Since the client will send data to trigger the server understanding that all following data will be compressed, Frames must be parsed one at a time so that any remaining data can be optionally decompressed. It's easy to create a 'BufferedTelnetConnection' subclass that handles all of this for you, though.\n\n## Special Thanks\n  * The Evennia Project.\n  * All of my Patrons on Patreon.\n  * Anyone who contributes to this project or my other ones.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/volundmush/mudtelnet-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Volund",
    "maintainer_email": "",
    "name": "mudtelnet",
    "package_url": "https://pypi.org/project/mudtelnet/",
    "platform": "",
    "project_url": "https://pypi.org/project/mudtelnet/",
    "project_urls": {
      "Homepage": "https://github.com/volundmush/mudtelnet-python",
      "Issue tracker": "https://github.com/volundmush/mudtelnet-python/issues",
      "Patreon": "https://www.patreon.com/volund",
      "Source": "https://github.com/volundmush/mudtelnet-python"
    },
    "release_url": "https://pypi.org/project/mudtelnet/0.8.0/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Simple Telnet library optimized for the MUD subset of Telnet.",
    "version": "0.8.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10573907,
  "releases": {
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d1bf5956c7ba2a4427ad5bf8d372e6267e4fb7234ead301a3cc076162c2e1db",
          "md5": "cbb380db9b7b8a201eb2dea846370bc9",
          "sha256": "e9f94a89d42810a602787438c67d1a74ecc3d67f12ec2cc694399cf3b9cc2f18"
        },
        "downloads": -1,
        "filename": "mudtelnet-0.8.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cbb380db9b7b8a201eb2dea846370bc9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 14755,
        "upload_time": "2021-06-07T05:01:17",
        "upload_time_iso_8601": "2021-06-07T05:01:17.177337Z",
        "url": "https://files.pythonhosted.org/packages/4d/1b/f5956c7ba2a4427ad5bf8d372e6267e4fb7234ead301a3cc076162c2e1db/mudtelnet-0.8.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23ffbc5fb21f3731a09f77a9eaa8f13a6ffeb1d40367aae5260a2c62ff7d4f88",
          "md5": "157c8ba8d54b3cd98dc1917d8c927255",
          "sha256": "0b52276fda733cf937f650ddfc4d0326fc688aac63a10b6f30249361f5db0fc1"
        },
        "downloads": -1,
        "filename": "mudtelnet-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "157c8ba8d54b3cd98dc1917d8c927255",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 11872,
        "upload_time": "2021-06-07T05:01:19",
        "upload_time_iso_8601": "2021-06-07T05:01:19.151150Z",
        "url": "https://files.pythonhosted.org/packages/23/ff/bc5fb21f3731a09f77a9eaa8f13a6ffeb1d40367aae5260a2c62ff7d4f88/mudtelnet-0.8.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4d1bf5956c7ba2a4427ad5bf8d372e6267e4fb7234ead301a3cc076162c2e1db",
        "md5": "cbb380db9b7b8a201eb2dea846370bc9",
        "sha256": "e9f94a89d42810a602787438c67d1a74ecc3d67f12ec2cc694399cf3b9cc2f18"
      },
      "downloads": -1,
      "filename": "mudtelnet-0.8.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cbb380db9b7b8a201eb2dea846370bc9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.5",
      "size": 14755,
      "upload_time": "2021-06-07T05:01:17",
      "upload_time_iso_8601": "2021-06-07T05:01:17.177337Z",
      "url": "https://files.pythonhosted.org/packages/4d/1b/f5956c7ba2a4427ad5bf8d372e6267e4fb7234ead301a3cc076162c2e1db/mudtelnet-0.8.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23ffbc5fb21f3731a09f77a9eaa8f13a6ffeb1d40367aae5260a2c62ff7d4f88",
        "md5": "157c8ba8d54b3cd98dc1917d8c927255",
        "sha256": "0b52276fda733cf937f650ddfc4d0326fc688aac63a10b6f30249361f5db0fc1"
      },
      "downloads": -1,
      "filename": "mudtelnet-0.8.0.tar.gz",
      "has_sig": false,
      "md5_digest": "157c8ba8d54b3cd98dc1917d8c927255",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 11872,
      "upload_time": "2021-06-07T05:01:19",
      "upload_time_iso_8601": "2021-06-07T05:01:19.151150Z",
      "url": "https://files.pythonhosted.org/packages/23/ff/bc5fb21f3731a09f77a9eaa8f13a6ffeb1d40367aae5260a2c62ff7d4f88/mudtelnet-0.8.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}