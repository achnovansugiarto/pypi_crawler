{
  "info": {
    "author": "Nikita Gladkikh",
    "author_email": "gladkikh.nikita@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Typing :: Typed"
    ],
    "description": "# PKonfig\n\n__P__ stands for __Python__.\n\n[![pypi](https://img.shields.io/pypi/v/pkonfig.svg)](https://pypi.python.org/pypi/pkonfig)\n[![downloads](https://img.shields.io/pypi/dm/pkonfig)](https://pepy.tech/project/pkonfig)\n[![versions](https://img.shields.io/pypi/pyversions/pkonfig.svg)](https://github.com/ngladkikh/pkonfig)\n[![license](https://img.shields.io/github/license/ngladkikh/pkonfig.svg)](https://github.com/ngladkikh/pkonfig/blob/master/LICENSE)\n\n## Prerequisites\n\n- Pythonic configuration management helpers.\n- Multiple sources of configs (environment variables, dotenv files, YAML, JSON, TOML, INI)\nwith agile order configuration.\n- Configs validation mechanics based on type hints or user defined classes.\n- Minimal external dependencies.\n- Follow [Fail-fast](https://en.wikipedia.org/wiki/Fail-fast) principle.\n- Autocomplete in modern IDEs.\n\n## Features\n\n- User defined config source order.\n- Multilevel configs for environment variables and dotenv config sources.\n- Custom aliases for fields or groups of configs.\n- Configs type casting\n- Config values validation based on type and/or value.\n- High performance.\n- Extendable API.\n\n## Installation\n\nTo install basic PKonfig without YAML and TOML support run:\n\n```bash\npip install pkonfig\n```\n\nYAML files parsing is handled with [PyYaml](https://pypi.org/project/PyYAML/):\n\n```bash\npip install pkonfig[yaml]\n```\n\nTOML files handled with help of [Tomli](https://pypi.org/project/tomli/):\n\n```bash\npip install pkonfig[toml]\n```\n\nAnd if both TOML and YAML is needed:\n\n```bash\npip install pkonfig[toml,yaml]\n```\n\nFor production no __.env__ files are needed but propper environment variables should be set.\nIn case some of required variables missing __KeyError__ exception raised while __AppConfig__\ninstantiation.\n\n## Quickstart\n\nThe most basic usage example when environment variables are used for production\nenvironment and DotEnv files are used for local development.\n\nCreate __config__ module __config.py__:\n\n```python\nfrom collections import ChainMap\nfrom pkonfig import Config, EmbeddedConfig, Env, DotEnv, LogLevel, Choice\n\n\nclass PG(EmbeddedConfig):\n  host = \"localhost\"\n  port = 5432\n  user: str\n  password: str\n\n  \nclass AppConfig(Config):\n    db = PG()\n    log_level = LogLevel(\"INFO\")\n    env = Choice([\"local\", \"prod\", \"test\"], default=\"prod\")\n\n\nstorage = ChainMap(DotEnv(\".env\", missing_ok=True), Env())\nconfig = AppConfig(storage)\n```\n\nFor local development create DotEnv file in root app folder __.env__:\n\n```dotenv\nAPP_DB_HOST=localhost\nAPP_DB_USER=postgres\nAPP_DB_PASSWORD=postgres\nAPP_ENV=local\nAPP_LOG_LEVEL=debug\n```\n\nThen elsewhere in app you could run:\n\n```python\nfrom config import config\n\nprint(config.env)           # local\nprint(config.log_level)     # 20\nprint(config.db.host)       # localhost\nprint(config.db.port)       # 5432\nprint(config.db.user)       # postgres\nprint(config.db.password)   # postgres\n```\n\n## Usage\n\n### Config sources\n\n__PKonfig__ implements several config sources out of the box.\nAll config sources implement `Mapping` protocol and default values could be set up during initialization.\n\n#### Environment variables\n\nThe most common way to configure application is environment variables.\nTo parse environment variables and store values in multilevel structure class `Env` could be used.\nCommon pattern is naming variables with multiple words describing the exact purpose \nmore precise: __PG_HOST__, __PG_PORT__ and __REDIS_HOST__, __REDIS_PORT__ could be treated as two groups:\n\n- PG\n  - HOST\n  - PORT\n- REDIS\n  - HOST\n  - PORT\n\nPKonfig respects this convention so that `Env` has two optional arguments:\n\n- `delimiter` string that will be used to split configuration levels taken from keys;\n- `prefix` string that is used to identify keys that are related to the given app and omit everything else.\n\n```python\nfrom os import environ\nfrom pkonfig import Env\n\n\nenviron[\"APP_OUTER\"] = \"foo\"\nenviron[\"APP_INNER_KEY\"] = \"baz\"\nenviron[\"NOPE\"] = \"qwe\"\n\nsource = Env(delimiter=\"_\", prefix=\"APP\", some_key=\"some\")\n\nprint(source[\"outer\"])          # foo\nprint(source[\"inner\"][\"key\"])   # baz\nprint(source[\"nope\"])           # raises KeyError\n```\n\n`Env` ignores key cases and ignores all keys starting not from __prefix__.\nTo change this behaviour set __prefix__ to `None`.\nIn this case you will get all key value pairs:\n\n```python\nfrom os import environ\nfrom pkonfig import Env\n\nenviron[\"NOPE\"] = \"qwe\"\n\nsource = Env(prefix=None)\n\nprint(source[\"nope\"])   # qwe\n```\n\n#### DotEnv\n\nIn the same manner as environment variables DotEnv files could be used.\n`DotEnv` requires file name as a string or a path and also accepts `delimiter` and `prefix` optional arguments.\n`missing_ok` argument defines whether `DotEnv` raises exception when given file not found.\nWhen file not found and `missing_ok` is set `DotEnv` contains empty dictionary.\n\n```python\nfrom pkonfig import DotEnv\n\n\nconfig_source = DotEnv(\"test.env\", delimiter=\"_\", prefix=\"APP\", missing_ok=True)\n```\n\n#### Ini\n\n__INI__ files are quite common and class `Ini` \nis build on top of [`configparser.ConfigParser`](https://docs.python.org/3/library/configparser.html):\n\n```python\nfrom pkonfig import Ini\n\nstorage = Ini(\"config.ini\", missing_ok=False)\nprint(storage[\"bitbucket.org\"][\"User\"])  # hg\nprint(storage[\"bitbucket.org\"][\"ServerAliveInterval\"])  # 45\n```\n\nIn case when __config.ini__:\n\n```ini\n[DEFAULT]\nServerAliveInterval = 45\n\n[bitbucket.org]\nUser = hg\n```\n\n`Ini` also accepts `missing_ok` argument to ignore missing file.\nMost of `ConfigParser` arguments are also accepted to modify parser behaviour.\n\n#### Json\n\n`Json` class uses `json.load` to read given JSON file and respects `missing_ok` argument:\n\n```python\nfrom pkonfig import Json\n\n\nstorage = Json(\"config.json\", missing_ok=False)\n```\n\n#### Yaml\n\nTo parse YAML files [PyYaml](https://pyyaml.org/wiki/PyYAMLDocumentation) could be used wrapped with `Yaml` class:\n\n```python\nfrom pkonfig import Yaml\n\nstorage = Yaml(\"config.yaml\", missing_ok=False)\n```\n\n#### Toml\n\nTOML files are parsed with [tomli](https://pypi.org/project/tomli/) wrapped with `Toml` helper class:\n\n```python\nfrom pkonfig import Toml\n\n\nstorage = Toml(\"config.toml\", missing_ok=False)\n```\n\n### Source order\n\nAny source for `BaseConfig` should implement `Mapper` protocol.\nSo it is easy to implement custom or combine existing implementations.\nRecommended way to combine multiple sources of configs is `ChainMap`:\n\n```python\nfrom collections import ChainMap\nfrom pkonfig import Env, DotEnv, Yaml\n\n\nconfig_source = ChainMap(\n    DotEnv(\"test.env\", missing_ok=True),\n    Env(),\n    Yaml(\"base_config.yaml\")\n)\n```\n\nIn this example we created `ChainMap` that looks for key until finds one in the given mappers sequence.\nThe first one source for configs is **test.env** file that might not exist and could be used for local development only.\nEnvironment variables are used as the second one config source.\nDotenv file will be preferred source in this example.\nThe last one source is **base_config.yaml** that should exist or `FileNotFoundError` exception raised.\n\nYou can customize source order in this way or even create your own logic implementing\n`Mapper` protocol.\n\n### Config\n\nTo implement application config class user should inherit from `pkonfig.config.Config` class and define\nrequired fields:\n\n```python\nfrom pkonfig import Config\n\n\nclass AppConfig(Config):\n    foo: float\n    baz: int\n\n\nstorage = {\"foo\": \"0.33\", \"baz\": 1}\nconfig = AppConfig(storage)\n\nprint(config.foo)   # 0.33\nprint(config.baz)   # 1\n```\n\nTo build more granular config structure `EmbeddedConfig` class is used:\n\n```python\nfrom pkonfig import Config, EmbeddedConfig\n\n\nclass Inner(EmbeddedConfig):\n    key: str\n\n\nclass AppConfig(Config):\n    inner = Inner()\n    foo: float\n    baz: int\n\n\nstorage = {\n    \"foo\": \"0.33\", \n    \"baz\": 1, \n    \"inner\": {\"key\": \"value\"}\n}\nconfig = AppConfig(storage)\n\nprint(config.inner.key)   # value\n```\n\n### Multilevel Config\n\nGrouping might be useful when there are lots of config parameters.\nTo achieve this `EmbeddedConfig` class should be inherited:\n\n```python\nfrom pkonfig import DotEnv, Config, EmbeddedConfig\n\n\nclass PgConfig(EmbeddedConfig):\n    host: str\n    port: int = 5432\n\n\nclass RedisConfig(EmbeddedConfig):\n    host: str\n    port: int = 6379\n\n\nclass AppConfig(Config):\n    pg = PgConfig()\n    redis = RedisConfig()\n\n\nconfig = AppConfig(\n    DotEnv(\".env\", delimiter=\"__\", prefix=\"APP\")\n)\n\nprint(config.pg.host)       # db_host\nprint(config.pg.port)       # 6432\nprint(config.redis.host)    # redis\n```\n\n__.env__ content:\n```dotenv\nAPP__PG__HOST=db_host\nAPP__PG__PORT=6432\nAPP__REDIS__HOST=redis\n```\nIn this example we customized delimiter with two underscores, default is '**_**'.\n\n### Aliases\n\nAll __Config__ fields accept __alias__ argument. \nWhen storage class searches for config attribute in its source either attribute\nname is used or alias when it is set.\n\n__config.py__:\n```python\nfrom pkonfig import DotEnv, EmbeddedConfig, Config, Int, Str\n\n\nclass HostConfig(EmbeddedConfig):\n    host: str\n    port: int\n    user: str\n    password = Str(alias=\"pass\")\n\n\nclass AppConfig(Config):\n    pg = HostConfig(alias=\"db\")\n    foo_baz = Int(alias=\"my_alias\")\n\n\nconfig = AppConfig(DotEnv(\".env\", delimiter=\"__\"))\n```\n\n__.env__ content:\n\n```dotenv\nAPP__DB__HOST=db_host\nAPP__DB__PORT=6432\nAPP__DB__PASS=password\nAPP__DB__USER=postgres\nAPP__MY_ALIAS=123\n```\n\nIn this example storage will seek in dotenv file parameters named by given alias.\nElsewhere in an app:\n\n```python\nfrom config import config\n\n\nprint(config.foo_baz)       # 123\nprint(config.pg.password)   # password\n```\n\n### PKonfig fields\n\nAll simple Python data types are implemented in field types: `Bool`, `Int`, `Float`, `Str`, `Byte`, `ByteArray`.\nAll fields with known type converted to descriptors during class creation.\nFields in `Config` classes may be defined in several ways:\n\n#### Using types:\n```python\nfrom pathlib import Path\nfrom pkonfig import Config\n\n\nclass AppConfig(Config):\n    foo: str\n    baz: int\n    flag: bool\n    file: Path\n```\n\n#### Using default values:\n\n```python\nfrom pathlib import Path\nfrom pkonfig import Config\n\n\nclass AppConfig(Config):\n    foo = \"some\"\n    baz = 1\n    flag = False\n    file = Path(\"some.text\")\n```\n\nGiven values will be used as default values.\n\n#### Using PKonfig fields directly\n\n```python\nfrom pkonfig import Config, PathField, Str, Int, Bool\n\n\nclass AppConfig(Config):\n    foo = Str()\n    baz = Int()\n    flag = Bool()\n    file = PathField()\n```\n\n#### Caching\n\nAll __PKonfig__ field types are Python descriptors that are responsible for type casting and data validation.\nIn most cases there is no need to do this job every time the value is accessed.\nTo avoid undesirable calculations caching is used.\nSo that type casting and validation is done only once \nduring `Config` object initialization.\nIn case when configuration may change during application lifecycle user may disable this behaviour:\n\n```python\nfrom pkonfig import Config, Int\n\n\nclass AppConfig(Config):\n    attr = Int(no_cache=True)\n```\n\nIn given example `attr` will do type casting and validation every time this attribute is accessed.\n\n#### Default values\n\nIf value is not set in config source user can use default value.\n`None` could be used as default value:\n\n```python\nfrom pkonfig import Config, Int, Str\n\n\nclass AppConfig(Config):\n    int_attr = Int(None)\n    str_attr = Str(None)\n\nconfig = AppConfig({})\nprint(config.str_attr)    # None\nprint(config.int_attr)    # None\n```\n\nWhen `None` is default value field is treated as nullable.\n\n#### Field nullability\n\nTo handle type casting and validation fields should not be nullable.\nIn case `None` is a valid value and should be used without casting and validation\noption `nullable` could be set:\n\n```python\nfrom pkonfig import Int, Config\n\n\nclass AppConfig(Config):\n    int_attr = Int(nullable=True)\n\nconfig = AppConfig(dict(int_attr=None))\nprint(config.int_attr)    # None\n```\n\nIn this example `None` comes from storage and type casting is omitted.\n\n### Custom descriptor or property\n\n```python\nfrom pkonfig import Config\n\n\nclass AppConfig(Config):\n    flag = True\n    baz = \"test\"\n    \n    @property\n    def value(self):\n        return self.flag and self.baz == \"test\" \n\n\nconfig = AppConfig({})\nprint(config.value)  # True\n```\n\n### Custom field types\n\nUser can customize how field validation and casting is done.\nThe recommended way is to implement `validate` method:\n\n```python\nfrom pkonfig import Config, Int\n\n\nclass OnlyPositive(Int):\n    def validate(self, value):\n        if value < 0:\n            raise ValueError(\"Only positive values accepted\")\n\n\nclass AppConfig(Config):\n    positive = OnlyPositive()\n```\n\nCustom type casting is also available.\nTo achieve this user should inherit abstract class `Field` and implement method `cast`:\n\n```python\nfrom typing import List\nfrom pkonfig import Field\n\nclass ListOfStrings(Field):\n    def cast(self, value: str) -> List[str]:\n        return value.split(\",\")\n```\n\n### Available fields\n\nBuiltin Python types has appropriate `Field` types:\n\n- bool -> `Bool`\n- int -> `Int`\n- float -> `Float`\n- Decimal -> `DecimalField`\n- str -> `Str`\n- bytes -> `Byte`\n- bytearray -> `ByteArray`\n\nThe only reason to use this types directly is customising field nullability and cache policy.\n\n#### PathField\n\nBasic path type that is parental for other two types and is used when you define field using `pathlib.Path`.\nThis type raises `FileNotFoundError` exception during initialization if given path doesn't exist:\n\n```python\nfrom pkonfig import Config, PathField\n\n\nclass AppConfig(Config):\n    mandatory_existing_path = PathField()\n    optional_path = PathField(missing_ok=True)\n```\n\nIn given example field `optional_path` may not exist during initialization.\n\n##### File\n\n`File` inherits `PathField` but also checks whether given path is a file.\n\n#### Folder\n\n`Folder` inherits `PathField` and does checking whether given path is a folder.\n\n#### EnumField\n\nThis field uses custom enum to validate input and cast it to given `Enum`:\n\n```python\nfrom enum import Enum\nfrom pkonfig import Config, EnumField\n\n\nclass UserType(Enum):\n    guest = 1\n    user = 2\n    admin = 3\n\n\nclass AppConfig(Config):\n    user_type = EnumField(UserType)\n\n\nconfig = AppConfig({\"user_type\": \"admin\"})\nprint(config.user_type is UserType.admin)  # True\n```\n\n#### LogLevel\n\n`LogLevel` field is useful to define `logging` level through configs.\n`LogLevel` accepts strings that define log level and casts \nthat string to `logging` level integer value:\n\n```python\nimport logging\nfrom pkonfig import Config, LogLevel\n\n\nclass AppConfig(Config):\n    some_level = LogLevel()\n    another_level = LogLevel()\n\n\nconfig = AppConfig(\n    {\n        \"some_level\": \"info\",\n        \"another_level\": \"Debug\",\n    }\n)\n\nprint(config.some_level)        # 20\nprint(config.another_level)     # 10\n\nprint(config.another_level is logging.DEBUG)     # True\n```\n\n#### Choice\n\n`Choice` field validates that config value is a member of the given sequence and also does optional type casting:\n\n```python\nfrom pkonfig import Config, Choice\n\n\nclass AppConfig(Config):\n    one_of_attr = Choice([10, 100], cast_function=int)\n\n\nconfig = AppConfig({\"one_of_attr\": \"10\"})\nprint(config.one_of_attr == 10)  # True\n\nconfig = AppConfig({\"one_of_attr\": \"2\"})    # raises TypeError exception\n```\n\nWhen `cast_function` is not given raw values from storage are used.\n\n#### DebugFlag\n\n`DebugFlag` helps to set widely used __debug__ option.\n`DebugFlag` ignores value case and treats __'true'__ string as `True` and any other value as `False`:\n\n```python\nfrom pkonfig import Config, DebugFlag\n\n\nclass AppConfig(Config):\n    lower_case = DebugFlag()\n    upper_case = DebugFlag()\n    random_string = DebugFlag()\n\n\nconfig = AppConfig(\n  {\n    \"lower_case\": \"true\",\n    \"upper_case\": \"TRUE\",\n    \"random_string\": \"foo\",\n  }\n)\nprint(config.lower_case)        # True\nprint(config.upper_case)        # True\nprint(config.random_string)     # False\n```\n\n### Types to Fields mapping\n\nAll fields for `BaseConfig` children classes are converted to descriptors internally.\nClass `pkonfig.config.DefaultMapper` defines how field types will be replaced with descriptors.\nThis mapping is used by default:\n```\n{\n    bool: Bool,\n    int: Int,\n    float: Float,\n    str: Str,\n    bytes: Byte,\n    bytearray: ByteArray,\n    Path: PathField,\n    Decimal: DecimalField,\n}\n```\n\nWhen field type is not found in this mapper it is ignored and won't be taken from storage source while resolving.\n\nUser can modify default mapper giving dictionary of types and appropriate fields:\n\n```python\nfrom decimal import Decimal\nfrom pkonfig import Config, DefaultMapper, DecimalField\n\n\nclass AppConfig(Config):\n    _mapper = DefaultMapper({float: DecimalField})\n    foo: float\n\nconfig = AppConfig(dict(foo=1/3))\nassert isinstance(config.foo, Decimal)  # True\n```\n\n### Per-environment config files\n\nWhen your app is configured with different configuration files \nand each file is used only in an appropriate environment you can create a function\nto find which file should be used:\n\n```python\nfrom pkonfig import Env, Yaml, Config, Choice\n\n\nCONFIG_FILES = {\n    \"prod\": \"configs/prod.yaml\",\n    \"staging\": \"configs/staging.yaml\",\n    \"local\": \"configs/local.yaml\",\n}\n\n\ndef get_config_file():\n    class _Config(Config):\n        env = Choice(\n          [\"prod\", \"local\", \"staging\"], \n          cast_function=str.lower,\n          default=\"prod\"\n        )\n    \n    _config = _Config(Env())\n    return CONFIG_FILES[_config.env]\n```\n\n__get_config_file__ uses environment variables and predefined config files pathes\nto check whether __APP_ENV__ var is set, validate this variable and return appropriate\nconfig file name.\nThen actual application configuration:\n\n```python\nfrom collections import ChainMap\nfrom pkonfig import Env, Yaml, Config, Choice\n\n\nCONFIG_FILES = {\n    \"prod\": \"configs/prod.yaml\",\n    \"staging\": \"configs/staging.yaml\",\n    \"local\": \"configs/local.yaml\",\n}\n\n\ndef get_config_file():\n    class _Config(Config):\n        env = Choice(\n          [\"prod\", \"local\", \"staging\"], \n          cast_function=str.lower,\n          default=\"prod\"\n        )\n    \n    _config = _Config(Env())\n    return CONFIG_FILES[_config.env]\n\n\nclass AppConfig(Config):\n    env = Choice(\n        [\"prod\", \"local\", \"staging\"], \n        cast_function=str.lower,\n        default=\"prod\"\n    )\n    ...\n\nstorage = ChainMap(\n  Env(),\n  Yaml(get_config_file()),\n)\nconfig = AppConfig(storage)\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ngladkikh/pkonfig",
    "keywords": "config,configuration,configurations,settings,env,environment,environments,dotenv,application,python-config,yaml,toml,ini",
    "license": "MIT",
    "maintainer": "Nikita Gladkikh",
    "maintainer_email": "gladkikh.nikita@gmail.com",
    "name": "pkonfig",
    "package_url": "https://pypi.org/project/pkonfig/",
    "platform": null,
    "project_url": "https://pypi.org/project/pkonfig/",
    "project_urls": {
      "Homepage": "https://github.com/ngladkikh/pkonfig"
    },
    "release_url": "https://pypi.org/project/pkonfig/1.2/",
    "requires_dist": [
      "typing-extensions ; python_version < \"3.7\"",
      "tomli ; extra == 'toml'",
      "pyyaml ; extra == 'yaml'"
    ],
    "requires_python": ">=3.6",
    "summary": "Pythonic agile application configuration helpers",
    "version": "1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17258310,
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "223f81deac97ded82c7ce8b280a6e4825e68990649959e764e2c9a03fb7cdbb8",
          "md5": "79360f4279dfacf367c8e1b127e67bbe",
          "sha256": "ba5d5c921286414d64ed1829b256d67c4f2df9ab4397d26b963f840dda21be8b"
        },
        "downloads": -1,
        "filename": "pkonfig-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79360f4279dfacf367c8e1b127e67bbe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12922,
        "upload_time": "2022-03-22T10:27:17",
        "upload_time_iso_8601": "2022-03-22T10:27:17.941710Z",
        "url": "https://files.pythonhosted.org/packages/22/3f/81deac97ded82c7ce8b280a6e4825e68990649959e764e2c9a03fb7cdbb8/pkonfig-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21706586474a347996ff37db0d7546c7880231a9322448db6c39644c7a316f38",
          "md5": "b56c262de24d1140b68cd46bdbf1857a",
          "sha256": "9e3c991c3baf2d222ad0cf3e55deed5feafba16a37a193f10c38fb2f3e505ecc"
        },
        "downloads": -1,
        "filename": "pkonfig-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b56c262de24d1140b68cd46bdbf1857a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16068,
        "upload_time": "2022-03-22T10:27:19",
        "upload_time_iso_8601": "2022-03-22T10:27:19.223881Z",
        "url": "https://files.pythonhosted.org/packages/21/70/6586474a347996ff37db0d7546c7880231a9322448db6c39644c7a316f38/pkonfig-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d3f0d793b9e0a86929c2cf01c48ef3690f11eded338f289ed0a69a34a9aa4ff6",
          "md5": "d0ff0f617cd736baf2d0d9265d40b86d",
          "sha256": "98be4bc32be2e15f19062364c67523dcedfeafa8c65fa62a6a91a9c4b95a4997"
        },
        "downloads": -1,
        "filename": "pkonfig-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0ff0f617cd736baf2d0d9265d40b86d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12902,
        "upload_time": "2022-03-22T12:44:17",
        "upload_time_iso_8601": "2022-03-22T12:44:17.453543Z",
        "url": "https://files.pythonhosted.org/packages/d3/f0/d793b9e0a86929c2cf01c48ef3690f11eded338f289ed0a69a34a9aa4ff6/pkonfig-1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "80a98f455fb2fdc3d39c1ed852d1b9995d8a78b2732e14b4a0f7852fd3b0e3ec",
          "md5": "254ada6122e8c1b07a8201e21b98d97d",
          "sha256": "70284f787819ad5b40d8ce999808ddfb4e658d6eceb4513de408e8f19d278bee"
        },
        "downloads": -1,
        "filename": "pkonfig-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "254ada6122e8c1b07a8201e21b98d97d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16068,
        "upload_time": "2022-03-22T12:44:19",
        "upload_time_iso_8601": "2022-03-22T12:44:19.313285Z",
        "url": "https://files.pythonhosted.org/packages/80/a9/8f455fb2fdc3d39c1ed852d1b9995d8a78b2732e14b4a0f7852fd3b0e3ec/pkonfig-1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "96b730db7a7519941820013b5661fe587b62b4ad026f85b26a5c1b7c28e1cf19",
          "md5": "157c0fd6a285ccc7731a00299b204e4e",
          "sha256": "54d24f005be29d10faf19edba3026cdacd1b824a82a64333448d94835baec39f"
        },
        "downloads": -1,
        "filename": "pkonfig-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "157c0fd6a285ccc7731a00299b204e4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13933,
        "upload_time": "2022-03-26T10:56:29",
        "upload_time_iso_8601": "2022-03-26T10:56:29.599677Z",
        "url": "https://files.pythonhosted.org/packages/96/b7/30db7a7519941820013b5661fe587b62b4ad026f85b26a5c1b7c28e1cf19/pkonfig-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "de3f3ab3707d0af4f85b24a0b7e9cc908db4845ec91998c6165a075068a2d453",
          "md5": "7ce58ae91b0ea3da408f21e82b58ab39",
          "sha256": "8feead809cae31cb4a90bc11de1e1cf6c3c8316372b414aa759a57ed7f6ba742"
        },
        "downloads": -1,
        "filename": "pkonfig-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7ce58ae91b0ea3da408f21e82b58ab39",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18102,
        "upload_time": "2022-03-26T10:56:31",
        "upload_time_iso_8601": "2022-03-26T10:56:31.351815Z",
        "url": "https://files.pythonhosted.org/packages/de/3f/3ab3707d0af4f85b24a0b7e9cc908db4845ec91998c6165a075068a2d453/pkonfig-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "02fa0e7b1d81ff6b315b11c41a79e0e7300cdfc59ad02575cc40d6f83b855361",
          "md5": "d24518e1b53aeb8c579f2713eb326a96",
          "sha256": "904028e635c19c8c3f355c374394ff89f01867f99f9de297b9e7fc08490b48a2"
        },
        "downloads": -1,
        "filename": "pkonfig-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d24518e1b53aeb8c579f2713eb326a96",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 13924,
        "upload_time": "2022-05-22T11:24:58",
        "upload_time_iso_8601": "2022-05-22T11:24:58.249545Z",
        "url": "https://files.pythonhosted.org/packages/02/fa/0e7b1d81ff6b315b11c41a79e0e7300cdfc59ad02575cc40d6f83b855361/pkonfig-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aca9e802d0435c2cf5e225a0e03b6a56176b74a36663fe91e510bdee10b53258",
          "md5": "d8ac2a08beb32237131be2d95838030a",
          "sha256": "25a19494ece65a540ca7feaa51352b52ca43897eb23f21015f20839ff3b5ef60"
        },
        "downloads": -1,
        "filename": "pkonfig-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d8ac2a08beb32237131be2d95838030a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18094,
        "upload_time": "2022-05-22T11:25:00",
        "upload_time_iso_8601": "2022-05-22T11:25:00.039552Z",
        "url": "https://files.pythonhosted.org/packages/ac/a9/e802d0435c2cf5e225a0e03b6a56176b74a36663fe91e510bdee10b53258/pkonfig-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6bf144eb5bbde906efedcc4ba62c588653f892a9f52eddfd256918160f87bce6",
          "md5": "6123b6aef1247a25fea2f6cd2ee38bcc",
          "sha256": "7e6d3755c2cf1549f4a9130f078b9757fd2dafbf2b90020d8460e3844b761266"
        },
        "downloads": -1,
        "filename": "pkonfig-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6123b6aef1247a25fea2f6cd2ee38bcc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 14217,
        "upload_time": "2022-05-23T07:26:39",
        "upload_time_iso_8601": "2022-05-23T07:26:39.598005Z",
        "url": "https://files.pythonhosted.org/packages/6b/f1/44eb5bbde906efedcc4ba62c588653f892a9f52eddfd256918160f87bce6/pkonfig-1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bfbbc194301eb6d260daadd5ef3fed42520d195e74f0097c0dfe206fde8e4662",
          "md5": "a50166803ee289b92563df81de95b955",
          "sha256": "a0a11137cc65de46dc32d13758617f3e8d2779f7b34e969ae0819261fd88a806"
        },
        "downloads": -1,
        "filename": "pkonfig-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a50166803ee289b92563df81de95b955",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18605,
        "upload_time": "2022-05-23T07:26:41",
        "upload_time_iso_8601": "2022-05-23T07:26:41.756092Z",
        "url": "https://files.pythonhosted.org/packages/bf/bb/c194301eb6d260daadd5ef3fed42520d195e74f0097c0dfe206fde8e4662/pkonfig-1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0b0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0c90d93246401aab643db0c74828b53eae5ba87d6d4d677583863fb2b2fff310",
          "md5": "637863640ad02effd5d529f2ee88a6bd",
          "sha256": "18a4dbb9dbb4fb10a8f8962cd1f91d033a108e94d4cfc42135f23b7a96a7ff7c"
        },
        "downloads": -1,
        "filename": "pkonfig-2.0b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "637863640ad02effd5d529f2ee88a6bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 15433,
        "upload_time": "2023-03-12T06:25:32",
        "upload_time_iso_8601": "2023-03-12T06:25:32.010521Z",
        "url": "https://files.pythonhosted.org/packages/0c/90/d93246401aab643db0c74828b53eae5ba87d6d4d677583863fb2b2fff310/pkonfig-2.0b0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ca1f08f293280e1da3c068c241bdfd952eb56474350f604228e446de29ebac02",
          "md5": "63a2fac02b89d2d2f0921e1f412de7e6",
          "sha256": "14a387ff7010815edd38aa08858dd78012b2b240e47d453b2ead0ff306118901"
        },
        "downloads": -1,
        "filename": "pkonfig-2.0b0.tar.gz",
        "has_sig": false,
        "md5_digest": "63a2fac02b89d2d2f0921e1f412de7e6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 53598,
        "upload_time": "2023-03-12T06:25:33",
        "upload_time_iso_8601": "2023-03-12T06:25:33.738185Z",
        "url": "https://files.pythonhosted.org/packages/ca/1f/08f293280e1da3c068c241bdfd952eb56474350f604228e446de29ebac02/pkonfig-2.0b0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6bf144eb5bbde906efedcc4ba62c588653f892a9f52eddfd256918160f87bce6",
        "md5": "6123b6aef1247a25fea2f6cd2ee38bcc",
        "sha256": "7e6d3755c2cf1549f4a9130f078b9757fd2dafbf2b90020d8460e3844b761266"
      },
      "downloads": -1,
      "filename": "pkonfig-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6123b6aef1247a25fea2f6cd2ee38bcc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 14217,
      "upload_time": "2022-05-23T07:26:39",
      "upload_time_iso_8601": "2022-05-23T07:26:39.598005Z",
      "url": "https://files.pythonhosted.org/packages/6b/f1/44eb5bbde906efedcc4ba62c588653f892a9f52eddfd256918160f87bce6/pkonfig-1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bfbbc194301eb6d260daadd5ef3fed42520d195e74f0097c0dfe206fde8e4662",
        "md5": "a50166803ee289b92563df81de95b955",
        "sha256": "a0a11137cc65de46dc32d13758617f3e8d2779f7b34e969ae0819261fd88a806"
      },
      "downloads": -1,
      "filename": "pkonfig-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a50166803ee289b92563df81de95b955",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18605,
      "upload_time": "2022-05-23T07:26:41",
      "upload_time_iso_8601": "2022-05-23T07:26:41.756092Z",
      "url": "https://files.pythonhosted.org/packages/bf/bb/c194301eb6d260daadd5ef3fed42520d195e74f0097c0dfe206fde8e4662/pkonfig-1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}