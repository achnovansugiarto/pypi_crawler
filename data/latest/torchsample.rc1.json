{
  "info": {
    "author": "Brian Pugh",
    "author_email": "bnp117@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": ".. image:: https://raw.githubusercontent.com/BrianPugh/torchsample/main/assets/banner-white-bg-512w.png\n\n|GHA tests| |Codecov report| |readthedocs|\n\n.. inclusion-marker-do-not-remove\n\nLightweight pytorch functions for neural network featuremap sampling.\n\n**WARNING: API is not yet stable. API subject to change!**\n\nIntroduction\n------------\nSampling neural network featuremaps at explicit coordinates has become more and more common with popular\ndevelopments like:\n\n* `Learning Continuous Image Representation with Local Implicit Image Function`_\n* `NeRF: Representing Scenes as Neural Radiance Fields for View Synthesis`_\n* `PointRend: Image Segmentation as Rendering`_\n\n.. _Learning Continuous Image Representation with Local Implicit Image Function: https://arxiv.org/pdf/2012.09161.pdf\n.. _NeRF\\: Representing Scenes as Neural Radiance Fields for View Synthesis: https://arxiv.org/pdf/2003.08934.pdf\n.. _PointRend\\: Image Segmentation as Rendering: https://arxiv.org/pdf/1912.08193.pdf\n\nPyTorch provides the tools necessary that to sample coordinates, but they result in a large amount of error-prone code.\nTorchSample intends to make it simple so you can focus on other parts of the model.\n\n.. inclusion-marker-remove\n\nUsage\n-----\n\nInstallation\n^^^^^^^^^^^^\nRequires python ``>=3.8`` Install ``torchsample`` via pip:\n\n.. code-block:: bash\n\n  pip install torchsample\n\nOr, if you want to install the nightly version:\n\n.. code-block:: bash\n\n  pip install git+https://github.com/BrianPugh/torchsample.git@main\n\n\nTraining\n^^^^^^^^\nA common scenario is to randomly sample points from a featmap and\nfrom the ground truth.\n\n.. code-block:: python\n\n  import torchsample as ts\n\n  b, c, h, w = batch[\"image\"].shape\n  coords = ts.coord.rand(b, 4096, 2)  # (b, 4096, 2) where the last dim is (x, y)\n\n  featmap = feature_extractor(batch[\"image\"])  # (b, feat, h, w)\n  sampled = ts.sample(coords, featmap)  # (b, 4096, feat)\n  gt_sample = ts.sample(coords, batch[\"gt\"])\n\n\nInference\n^^^^^^^^^\nDuring inference, a comprehensive query of the network to form a complete\nimage is common.\n\n.. code-block:: python\n\n  import torch\n  import torchsample as ts\n\n  b, c, h, w = batch[\"image\"].shape\n  coords = ts.coord.full_like(batch[\"image\"])\n  featmap = encoder(batch[\"image\"])  # (b, feat, h, w)\n  feat_sampled = ts.sample(coords, featmap)  # (b, h, w, c)\n  output = model(featmap)  # (b, h, w, pred)\n  output = output.permute(0, 3, 1, 2)\n\n\nPositional Encoding\n^^^^^^^^^^^^^^^^^^^\nCommon positional encoding schemes are available.\n\n.. code-block:: python\n\n  import torchsample as ts\n\n  coords = ts.coord.rand(b, 4096, 2)\n  pos_enc = ts.encoding.gamma(coords)\n\n\nA common task it concatenating the positional encoding to\nsampled values. You can do this by passing a callable into\n``ts.sample``:\n\n.. code-block:: python\n\n  import torchsample as ts\n\n  encoder = ts.encoding.Gamma()\n  sampled = ts.sample(coords, featmap, encoder=encoder)\n\n\nModels\n^^^^^^\n``torchsample`` has some common builtin models:\n\n.. code-block:: python\n\n  import torchsample as ts\n\n  # Properly handles (..., feat) tensors.\n  model = ts.models.MLP(256, 256, 512, 512, 1024, 1024, 1)\n\n\nDesign Decisions\n----------------\n\n* ``align_corners=False`` by default (same as Pytorch).\n  You should probably not touch it; `explanation here`_.\n* Everything is in normalized coordinates ``[-1, 1]`` by default.\n* Coordinates are always in order ``(x, y, ...)``.\n* Whenever a size is given, it will be in ``(w, h)`` order;\n  i.e. matches coordinate order. It makes implementation simpler\n  and a consistent rule helps prevent bugs.\n* When ``coords`` is a function argument, it comes first.\n* Simple wrapper functions (like ``ts.coord.rand``) are\n  provided to make the intentions of calling code more clear.\n* Try and mimic native ``pytorch`` and ``torchvision`` interfaces as\n  much as possible.\n* Try and make the common-usecase as simple and intuitive as possible.\n\n\n\n.. |GHA tests| image:: https://github.com/BrianPugh/torchsample/workflows/tests/badge.svg\n   :target: https://github.com/BrianPugh/torchsample/actions?query=workflow%3Atests\n   :alt: GHA Status\n.. |Codecov report| image:: https://codecov.io/github/BrianPugh/torchsample/coverage.svg?branch=main\n   :target: https://codecov.io/github/BrianPugh/torchsample?branch=main\n   :alt: Coverage\n.. |readthedocs| image:: https://readthedocs.org/projects/torchsample/badge/?version=latest\n        :target: https://torchsample.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\n.. _explanation here: docs/align_corners.rst",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/BrianPugh/torchsample",
    "keywords": "",
    "license": "apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchsample",
    "package_url": "https://pypi.org/project/torchsample/",
    "platform": null,
    "project_url": "https://pypi.org/project/torchsample/",
    "project_urls": {
      "Homepage": "https://github.com/BrianPugh/torchsample"
    },
    "release_url": "https://pypi.org/project/torchsample/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Neural network sampling utilities.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14040550,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34ba02c091ea10edbd66f44f64afeebd2ea8ac932f7185f9162e922d41851508",
          "md5": "d41ea125bc8231cc318b3a402b525c5b",
          "sha256": "022b4be1e24dfbee27922fd73d04096e7430a6ab97c68cc8d550072fe8bff28b"
        },
        "downloads": -1,
        "filename": "torchsample-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d41ea125bc8231cc318b3a402b525c5b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 393557,
        "upload_time": "2022-06-06T01:06:39",
        "upload_time_iso_8601": "2022-06-06T01:06:39.743539Z",
        "url": "https://files.pythonhosted.org/packages/34/ba/02c091ea10edbd66f44f64afeebd2ea8ac932f7185f9162e922d41851508/torchsample-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "34ba02c091ea10edbd66f44f64afeebd2ea8ac932f7185f9162e922d41851508",
        "md5": "d41ea125bc8231cc318b3a402b525c5b",
        "sha256": "022b4be1e24dfbee27922fd73d04096e7430a6ab97c68cc8d550072fe8bff28b"
      },
      "downloads": -1,
      "filename": "torchsample-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d41ea125bc8231cc318b3a402b525c5b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 393557,
      "upload_time": "2022-06-06T01:06:39",
      "upload_time_iso_8601": "2022-06-06T01:06:39.743539Z",
      "url": "https://files.pythonhosted.org/packages/34/ba/02c091ea10edbd66f44f64afeebd2ea8ac932f7185f9162e922d41851508/torchsample-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}