{
  "info": {
    "author": "Meidar Sharkansky",
    "author_email": "meidarsharkansky@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pylocksfile\n\npylocksfile is a simple python package for linux-based systems. This package takes advantage of linux's internal file-system locking mechanism and provided a simple read/write locking interface for inter-process communication.\n\n## Advantages\n\n*pylocksfile* has several advantages over the native python locks:\n\n*\tAllow read/write (shared/exclusive) locking mechanising.\n*\tSignificantly smaller over-head for *acquire*/*release* operations.\n*\tSupports many different locks within a single *pylocksfiles* (hence the **locks** in *pylocksfile*).\n*\tInterval-based locking mechanising. Supports multiple *acquire*/*release* operations simultaneously, as long as locks indices are consecutive.\n*\tLocks are shared via linux file-system, so there is no need to pass the lock object upon process creation, any process may share it at any time.\n*\tLinux provides dead-lock detection, for up to 10 locks dependencies.\n\n## Similar libraries\n\nhttps://github.com/benediktschmitt/py-filelock library *\"which implements a platform independent file lock in Python\"*.\n\n## Usage and Examples\n\n```Python\nfrom pylocksfile import pylocksfile\n\n#Create a pylocksfile object. \"dataLocksFile.lock\" will be the locking file\nlocksfile = pylocksfile(locksfile_path = \"dataLocksFile.lock\", verbose = False, l_id = 'process_1')\n\n#Acquiring lock 0 for reading (shared lock) with blocking\nlocksfile.acquire(writeLock = False, lock_n = 0, blocking = True)\n\n# Do some reading (shared) operation assosiated lock 0.\n\n#Acquiring locks 1,2,3 for writing (exclusive lock) with blocking\nlocksfile.acquire(writeLock = True, lock_n = (1,3), blocking = True)\n\n# Do some writing (exclusive) operation assosiated locks 1,2,3. \n# Do some reading (shared) operation assosiated lock 0.\n\n#Using 'with' statement. Notice (2,1) means offset of 1 locks from lock 2, hence it is equivalent to 'lock_n = 2'.\nwith locksfile(writeLock = False, lock_n = (2,1)):\n\t#Converts lock 2 to read (shared). Do read (shared) operation on 0,2 and write (exclusive) on 1,3\n\tpass\n\n# Do some writing (exclusive) operation assosiated locks 1,3. \n# Do some reading (shared) operation assosiated lock 0.\n\n#Releasing lock 0.\nlocksfile.release(lock_n = (0,1))\n\n#Releasing all locks from 3 to 1000\nlocksfile.release(lock_n = (3,997))\n\n#Release all the locks\nlocksfile.release()\n\n#End of script. On destruction of pylocksfile object, all remaining locks will be freed.\nreturn\n```\n\n## Testing\n\n*test.py* consists of two tests.\n\n*\t**testReadWriteLocks(\\*args)** test is a simple hard-coded script where two processes block each other at each step. It show general correctness of the locking mechanism,\n*\t**testRace(\\*args)** tests not only the correctness of the locking mechanism, but also it's speed. The test consists of several process performing hand-over-hand iteration\n\tover a cyclic list several times. *n_process* is the number of processes, *n_tracks* is the length of the list and *n_races* is the number of cycles.\n\tIt show that as *n_tracks* and *n_races* increases, *pylocksfile* is up to 3 times faster than native python locks. As *n_process* increases, and *n_tracks* decreases, \n\tthe speedup decreases to 1 due to context switch over-head.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Meidar-S/pylocksfile",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pylocksfile",
    "package_url": "https://pypi.org/project/pylocksfile/",
    "platform": "",
    "project_url": "https://pypi.org/project/pylocksfile/",
    "project_urls": {
      "Homepage": "https://github.com/Meidar-S/pylocksfile"
    },
    "release_url": "https://pypi.org/project/pylocksfile/0.0.6/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Python library for linux file-based read/write locks for inter-process communication",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7257088,
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49881ceb3f80a9be39d540ceff552d257d4eb4266df211734a2d5e81ee2db768",
          "md5": "c6b0c4d8f0599b68cdca48958d0c00e3",
          "sha256": "01c3c9a47b4bdfd079c3a3398c85aacfa4c769710511837e90643f73f2a3cc0b"
        },
        "downloads": -1,
        "filename": "pylocksfile-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6b0c4d8f0599b68cdca48958d0c00e3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 8115,
        "upload_time": "2020-05-16T17:56:26",
        "upload_time_iso_8601": "2020-05-16T17:56:26.392159Z",
        "url": "https://files.pythonhosted.org/packages/49/88/1ceb3f80a9be39d540ceff552d257d4eb4266df211734a2d5e81ee2db768/pylocksfile-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4623f566604f65ace29b40b0e86d49fb93406b5bd384a1393ede91c0bf7621d1",
          "md5": "083f5e734ce06a071ad202cc0510d0e1",
          "sha256": "22d83ee80616ef8cf8445a554f6d7fe8e7b14e08a9631e2e44128fbb0d8756b9"
        },
        "downloads": -1,
        "filename": "pylocksfile-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "083f5e734ce06a071ad202cc0510d0e1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 7503,
        "upload_time": "2020-05-16T17:56:28",
        "upload_time_iso_8601": "2020-05-16T17:56:28.617015Z",
        "url": "https://files.pythonhosted.org/packages/46/23/f566604f65ace29b40b0e86d49fb93406b5bd384a1393ede91c0bf7621d1/pylocksfile-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "49881ceb3f80a9be39d540ceff552d257d4eb4266df211734a2d5e81ee2db768",
        "md5": "c6b0c4d8f0599b68cdca48958d0c00e3",
        "sha256": "01c3c9a47b4bdfd079c3a3398c85aacfa4c769710511837e90643f73f2a3cc0b"
      },
      "downloads": -1,
      "filename": "pylocksfile-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c6b0c4d8f0599b68cdca48958d0c00e3",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 8115,
      "upload_time": "2020-05-16T17:56:26",
      "upload_time_iso_8601": "2020-05-16T17:56:26.392159Z",
      "url": "https://files.pythonhosted.org/packages/49/88/1ceb3f80a9be39d540ceff552d257d4eb4266df211734a2d5e81ee2db768/pylocksfile-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4623f566604f65ace29b40b0e86d49fb93406b5bd384a1393ede91c0bf7621d1",
        "md5": "083f5e734ce06a071ad202cc0510d0e1",
        "sha256": "22d83ee80616ef8cf8445a554f6d7fe8e7b14e08a9631e2e44128fbb0d8756b9"
      },
      "downloads": -1,
      "filename": "pylocksfile-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "083f5e734ce06a071ad202cc0510d0e1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 7503,
      "upload_time": "2020-05-16T17:56:28",
      "upload_time_iso_8601": "2020-05-16T17:56:28.617015Z",
      "url": "https://files.pythonhosted.org/packages/46/23/f566604f65ace29b40b0e86d49fb93406b5bd384a1393ede91c0bf7621d1/pylocksfile-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}