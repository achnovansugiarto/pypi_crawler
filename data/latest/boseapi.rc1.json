{
  "info": {
    "author": "",
    "author_email": "MatrixEditor <not@supported.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# Bose-SoundTouch-API (boseapi)\r\n\r\n![LastEdit](https://img.shields.io:/static/v1?label=LastEdit&message=03/06/2023&color=9cf)\r\n![Status](https://img.shields.io:/static/v1?label=Status&message=DRAFT&color=orange)\r\n![Platform](https://img.shields.io:/static/v1?label=Platforms&message=Linux|Windows&color=yellowgreen)\r\n![PyPi](https://img.shields.io:/static/v1?label=PyPi&message=0.3.3&color=green)\r\n\r\nThis small project/repository contains general information about how to analyze the firmware images provided by _`BOSE`_ and also implements commands to interact with these devices. The API and some basic usage examples are provided in the [api-documentation](https://bose-soundtouch-api.readthedocs.io).\r\n\r\n## Installation\r\n\r\nThis module can be easily installed via pip:\r\n```bash\r\n$ python3 -m pip install boseapi\r\n```\r\n\r\n## Usage\r\n\r\n```python\r\nfrom boseapi.all import *\r\n\r\ndevice = new_device('127.0.0.1')\r\nclient = SoundTouchClient(device, errors='ignore')\r\n\r\n# fetch device's capabilities\r\ncapabilities = client.capabilities()\r\nif capabilities.wsapiproxy:\r\n      # Create and use a WebSocket client\r\n      ws_client = BoseWebSocket(device)\r\n      # Add a listener on an updated volume\r\n      ws_client.add_listener(nodes.volumeupdated, lambda xmlelement: print(xmlelement.tag))\r\n      ws_client.start_notification()\r\n\r\n# Get the current volume and appply a new value to it (0..100).\r\nvolume = client.volume()\r\n# client.set_volume(7)\r\n# client.set_volume(volume.actual_vol + 1) \r\n# has the same effect as\r\nclient.volume_up()\r\n\r\n# If media is currently played by the device:\r\nstatus = client.status()\r\nif status.play_status != 'PLAY_STATE':\r\n      # Play own media\r\n      item = ContentItem(src=Source.INTERNET_RADIO, location='4712')\r\n      client.play(item)\r\n\r\n# Load and select presets\r\npresets = client.listpresets()\r\nif len(presets) > 0:\r\n      preset = presets[0]\r\n      client.select_preset(preset)\r\n\r\n# Multiroom functionality\r\ncurrent_zone = client.zone_status()\r\nif current_zone.masterid == None:\r\n      zone = Zone(device_id=device.device_id, ip=device.host)\r\n      \r\n      # Add different zone slaves (it is recommended to create new devices\r\n      # befor adding a zone slave.\r\n      device2 = boseapi.new_device('127.0.0.2')\r\n      slave = ZoneSlave(device_id=device2.device_id, ip_address=device2.host)\r\n      zone.append(slave)\r\n\r\n      # Create zone/ Add slaves/ Remove slaves\r\n      client.create_zone(zone)\r\n      client.remove_zone_slave([slave])\r\n      client.add_zone_slave([slave])\r\n\r\n# List all available UPnP MediaServers\r\nmedia_servers = client.media_servers()\r\nif len(media_servers) > 0:\r\nfor server in media_servers:\r\n      print(server)\r\n\r\n# List all available sources\r\nsources = client.listsources()\r\nif len(sources) > 0:\r\n# Get specific source items with the source name\r\nsource_item = sources['QPLAY']\r\n# or the index position\r\nsource_item2 = sources[0]\r\n\r\n# Select different input sources\r\nclient.select_source(Source.BLUETOOTH)\r\n\r\nif source_item.status == 'READY':\r\n      client.select_source(source_item.source)\r\n\r\n# make sure the node is available be fore fetching data\r\nif 'GET' in client.options(nodes.bass):\r\n      # manually fetch or set data\r\n      message = client.get(nodes.bass)\r\n      bass = Bass(message.response)\r\n      client.put(nodes.bass, '<bass>0</bass>')\r\n```\r\n\r\n## Overview\r\n---\r\nStarting off with the used device and app to get the information used to write the code for this repository.\r\n\r\n> `Bose SoundTouch 300` and the `SoundTouch` app by BOSE\r\n\r\nWhile capturing traffic of the BOSE device the following URL was requested when searching for a sofware update:\r\n\r\n      > https://downloads.bose.com/updates/soundtouch\r\n\r\nThe request is forwarded to another backend which contains a XML-Document named `index.xml`. This file contains information about the locations of all available firmware upgrades. Since the device used here needs the `SoundTouch 30` firmware, the following link is used.\r\n\r\n      > https://downloads.bose.com/ced/soundtouch/mr4_cdb9ab51/Update_ti_27.0.3.46298.4608935.scm.stu\r\n\r\nAfter downloading, a quick review with binwalk on the file:\r\n\r\n```console\r\n$ binwalk Update_ti_27.0.3.46298.4608935.scm.stu                                                 \r\n\r\nDECIMAL       HEXADECIMAL     DESCRIPTION\r\n--------------------------------------------------------------------------------\r\n312           0x138           ELF, 32-bit LSB executable, ARM, version 1 (SYSV)\r\n[...]\r\n13932404      0xD49774        UBI erase count header, version: 1, EC: 0x0, VID header offset: 0x800, data offset: 0x1000\r\n[...]\r\n```\r\n\r\nThe only interesting line in the binwalk output contains information about an UBI image header. So, extract that file and decompress it with `ubidump`:\r\n\r\n```console\r\n$ ubidump -s . D49774.ubi\r\n```\r\n\r\nThis command creates a folder in the current directory where all the contents of this UBI document are stored. Files that contain information usable for creating this API are located in the following directory: `rootfs/opt/Bose/etc/`.\r\n\r\nThere are two files that configure operations that can be requested/ executed on the webserver (port `8090`). All operations contained in:\r\n\r\n```bash\r\nrootfs/opt/Bose/etc/HandCraftedWebServer-SoundTouch.xml \r\n# and\r\nrootfs/opt/Bose/etc/WebServer-SoundTouch.xml\r\n```\r\n\r\nwere implemented in this small library.\r\n\r\n---\r\n## Contributing\r\n\r\nContributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are **greatly appreciated**.\r\n\r\nIf you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\".\r\n\r\n1. Fork the Project\r\n2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)\r\n3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)\r\n4. Push to the Branch (`git push origin feature/AmazingFeature`)\r\n5. Open a Pull Request\r\n\r\n<!-- LICENSE -->\r\n---\r\n## License\r\n\r\nDistributed under the MIT License. See `MIT.txt` for more information.\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "boseapi",
    "package_url": "https://pypi.org/project/boseapi/",
    "platform": null,
    "project_url": "https://pypi.org/project/boseapi/",
    "project_urls": {
      "API-Docs": "https://bose-soundtouch-api.readthedocs.io",
      "Homepage": "https://github.com/MatrixEditor/bose-soundtouch-api"
    },
    "release_url": "https://pypi.org/project/boseapi/0.2.0/",
    "requires_dist": [
      "urllib3",
      "websocket"
    ],
    "requires_python": "",
    "summary": "BOSE SoundTouch API",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17174760,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f35f281befcd5853b1ce44ba366896390a13dc7a14328874424f19d21ec4dec5",
          "md5": "a0e51ddf9fb379d859d72febf37f1776",
          "sha256": "c9c5eb1acd5169a23542b75b8df078f91a1feba95e0d82244c60ec095af48fae"
        },
        "downloads": -1,
        "filename": "boseapi-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0e51ddf9fb379d859d72febf37f1776",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32338,
        "upload_time": "2023-03-06T13:07:36",
        "upload_time_iso_8601": "2023-03-06T13:07:36.367365Z",
        "url": "https://files.pythonhosted.org/packages/f3/5f/281befcd5853b1ce44ba366896390a13dc7a14328874424f19d21ec4dec5/boseapi-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "79981c907317e35fafe83aaa44f2fccd3fc7dff8ec5f6279b862ff7aa1980df2",
          "md5": "20d7dc09efc680e308d732c8aa7f69be",
          "sha256": "ca344862b0d539bd8d153f75ded28a1a70c45160197579e4a4f1e5788add9128"
        },
        "downloads": -1,
        "filename": "boseapi-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "20d7dc09efc680e308d732c8aa7f69be",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28894,
        "upload_time": "2023-03-06T13:07:38",
        "upload_time_iso_8601": "2023-03-06T13:07:38.019461Z",
        "url": "https://files.pythonhosted.org/packages/79/98/1c907317e35fafe83aaa44f2fccd3fc7dff8ec5f6279b862ff7aa1980df2/boseapi-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f35f281befcd5853b1ce44ba366896390a13dc7a14328874424f19d21ec4dec5",
        "md5": "a0e51ddf9fb379d859d72febf37f1776",
        "sha256": "c9c5eb1acd5169a23542b75b8df078f91a1feba95e0d82244c60ec095af48fae"
      },
      "downloads": -1,
      "filename": "boseapi-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a0e51ddf9fb379d859d72febf37f1776",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 32338,
      "upload_time": "2023-03-06T13:07:36",
      "upload_time_iso_8601": "2023-03-06T13:07:36.367365Z",
      "url": "https://files.pythonhosted.org/packages/f3/5f/281befcd5853b1ce44ba366896390a13dc7a14328874424f19d21ec4dec5/boseapi-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "79981c907317e35fafe83aaa44f2fccd3fc7dff8ec5f6279b862ff7aa1980df2",
        "md5": "20d7dc09efc680e308d732c8aa7f69be",
        "sha256": "ca344862b0d539bd8d153f75ded28a1a70c45160197579e4a4f1e5788add9128"
      },
      "downloads": -1,
      "filename": "boseapi-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "20d7dc09efc680e308d732c8aa7f69be",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28894,
      "upload_time": "2023-03-06T13:07:38",
      "upload_time_iso_8601": "2023-03-06T13:07:38.019461Z",
      "url": "https://files.pythonhosted.org/packages/79/98/1c907317e35fafe83aaa44f2fccd3fc7dff8ec5f6279b862ff7aa1980df2/boseapi-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}