{
  "info": {
    "author": "",
    "author_email": "imglab <support@imglab.io>",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# imglab\n\n`imglab` is the official Python package to integrate with imglab services.\n\n## Installation\n\n```sh\n$ pip install imglab\n```\n\n## Python compatibility\n\n`imglab` has been successfully tested with the following Python versions: `3.11`, `3.10`, `3.9`, `3.8`, `3.7`, `3.6`.\n\n## Generating URLs\n\nYou can use `imglab.url` function to generate imglab compatible URLs for your application.\n\nThe easiest way to generate a URL is to specify the name of the `source`, a `path` and required `parameters`:\n\n```python\n>>> import imglab\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600)\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600'\n\n>>> imglab.url(\"avatars\", \"user-01.jpeg\", width=300, height=300, mode=\"crop\", crop=\"face\", format=\"webp\")\n'https://avatars.imglab-cdn.net/user-01.jpeg?width=300&height=300&mode=crop&crop=face&format=webp'\n\n```\n\nIf some specific settings are required for the source you can use an instance of `imglab.Source` class instead:\n\n```python\n>>> imglab.url(imglab.Source(\"assets\"), \"image.jpeg\", width=500, height=600)\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600'\n\n```\n\n### Using secure image sources\n\nFor sources that require signed URLs you can specify `secure_key` and `secure_salt` attributes:\n\n```python\n>>> source = imglab.Source(\"assets\", secure_key=\"55IX1RVlDHpgl/4D\", secure_salt=\"ITvYA2lPfyz0w8/v\")\n>>> imglab.url(source, \"image.jpeg\", width=500, height=600)\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&signature=16sKGTU_dgMVqzU1JUBfkkmUV3vCKoZFkwVBYiqnGZU'\n\n```\n\n`signature` query parameter will be automatically generated and attached to the returned URL.\n\n> Note: `secure_key` and `secure_salt` attributes are secrets that should not be added to a code repository. Please use environment vars or other secure method to use them in your application.\n\n### Using HTTP instead of HTTPS\n\nIn the case that HTTP schema is required instead of HTTPS you can set `https` attribute to `False` when creating the source:\n\n```python\n>>> imglab.url(imglab.Source(\"assets\", https=False), \"image.jpeg\", width=500, height=600)\n'http://assets.imglab-cdn.net/image.jpeg?width=500&height=600'\n\n```\n\n> Note: HTTPS is the default and recommended way to generate URLs with imglab.\n\n### Specifying parameters\n\nAny parameter from the imglab API can be used to generate URLs with `imglab.url` method. For parameters that required dashes characters like `trim-color` you can use regular underscore argument names like `trim_color` those will be normalized in the URL generation to it's correct form:\n\n```python\n>>> imglab.url(\"assets\", \"image.jpeg\", trim=\"color\", trim_color=\"black\")\n'https://assets.imglab-cdn.net/image.jpeg?trim=color&trim-color=black'\n\n```\n\nIf necessary you can pass a dictionary instead of a list of keyword arguments, unpacking the dictionary with `**` operator:\n\n```python\n>>> imglab.url(\"assets\", \"image.jpeg\", **{\"trim\": \"color\", \"trim-color\": \"black\"})\n'https://assets.imglab-cdn.net/image.jpeg?trim=color&trim-color=black'\n\n```\n\n### Specifying color parameters\n\nSome imglab parameters can receive a color as value. It is possible to specify these color values as strings:\n\n```python\n>>> # Specifying a RGB color as string\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, mode=\"contain\", background_color=\"255,0,0\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&mode=contain&background-color=255%2C0%2C0'\n\n>>> # Specifying a RGBA color as string\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, mode=\"contain\", background_color=\"255,0,0,128\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&mode=contain&background-color=255%2C0%2C0%2C128'\n\n>>> # Specifying a named color as string\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, mode=\"contain\", background_color=\"red\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&mode=contain&background-color=red'\n\n>>> # Specifying a hexadecimal color as string\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, mode=\"contain\", background_color=\"F00\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&mode=contain&background-color=F00'\n\n```\n\nYou can additionally use `imglab.color` helper to specify color values:\n\n```python\n>>> from imglab import color\n\n>>> # Using color helper function for a RGB color\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, mode=\"contain\", background_color=color(255, 0, 0))\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&mode=contain&background-color=255%2C0%2C0'\n\n>>> # Using color helper function for a RGBA color\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, mode=\"contain\", background_color=color(255, 0, 0, 128))\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&mode=contain&background-color=255%2C0%2C0%2C128'\n\n>>> # Using color helper function for a named color\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, mode=\"contain\", background_color=color(\"red\"))\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&mode=contain&background-color=red'\n\n```\n\n> Note: specify hexadecimal color values using `imglab.color` helper function is not allowed. You can use strings instead.\n\n### Specifying position parameters\n\nSome imglab parameters can receive a position as value. It is possible to specify these values using strings:\n\n```python\n>>> # Specifying a horizontal and vertical position as string\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=500, mode=\"crop\", crop=\"left,top\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=500&mode=crop&crop=left%2Ctop'\n\n>>> # Specifying a vertical and horizontal position as string\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=500, mode=\"crop\", crop=\"top,left\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=500&mode=crop&crop=top%2Cleft'\n\n>>> # Specifying a position as string\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=500, mode=\"crop\", crop=\"left\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=500&mode=crop&crop=left'\n\n```\n\nYou can additionally use `imglab.position` helper function to specify position values:\n\n```python\n>>> from imglab import position\n\n>>> # Using position function helper for a horizontal and vertical position\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=500, mode=\"crop\", crop=position(\"left\", \"top\"))\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=500&mode=crop&crop=left%2Ctop'\n\n>>> # Using position function helper for a vertical and horizontal position\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=500, mode=\"crop\", crop=position(\"top\", \"left\"))\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=500&mode=crop&crop=top%2Cleft'\n\n>>> # Using position function helper for a single position\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=500, mode=\"crop\", crop=position(\"left\"))\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=500&mode=crop&crop=left'\n\n```\n\n### Specifying URL parameters\n\nSome imglab parameters can receive URLs as values. It is possible to specify these parameter values as strings:\n\n```python\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, watermark=\"logo.svg\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&watermark=logo.svg'\n\n```\n\nAnd even use parameters if required:\n\n```python\n>>> imglab.url(\"assets\", \"image.jpeg\", width=500, height=600, watermark=\"logo.svg?width=100&format=png\")\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&watermark=logo.svg%3Fwidth%3D100%26format%3Dpng'\n\n```\n\nAdditionally you can use nested `imglab.url` calls to specify these URL values:\n\n```python\n>>> imglab.url(\n...     \"assets\",\n...     \"image.jpeg\",\n...     width=500,\n...     height=600,\n...     watermark=imglab.url(\"assets\", \"logo.svg\", width=100, format=\"png\")\n... )\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&watermark=https%3A%2F%2Fassets.imglab-cdn.net%2Flogo.svg%3Fwidth%3D100%26format%3Dpng'\n\n```\n\nIf the resource is located in a different source we can specify it using `imglab.url`:\n\n```python\n>>> imglab.url(\n...     \"assets\",\n...     \"image.jpeg\",\n...     width=500,\n...     height=600,\n...     watermark=imglab.url(\"marketing\", \"logo.svg\", width=100, format=\"png\")\n... )\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&watermark=https%3A%2F%2Fmarketing.imglab-cdn.net%2Flogo.svg%3Fwidth%3D100%26format%3Dpng'\n\n```\n\nUsing secure sources for URLs parameter values is possible too:\n\n```python\n>>> marketing = imglab.Source(\"marketing\", secure_key=\"55IX1RVlDHpgl/4D\", secure_salt=\"ITvYA2lPfyz0w8/v\")\n>>> imglab.url(\n...     \"assets\",\n...     \"image.jpeg\",\n...     width=500,\n...     height=600,\n...     watermark=imglab.url(marketing, \"logo.svg\", width=100, format=\"png\")\n... )\n'https://assets.imglab-cdn.net/image.jpeg?width=500&height=600&watermark=https%3A%2F%2Fmarketing.imglab-cdn.net%2Flogo.svg%3Fwidth%3D100%26format%3Dpng%26signature%3DMd4V23DOkn5hHw_nAjkEG9lKHOZ8wjDBmYi2d5TCaCc'\n\n```\n\n`signature` query parameter will be automatically generated and attached to the nested URL value.\n\n### Specifying URLs with expiration timestamp\n\nThe `expires` parameter allows you to specify a UNIX timestamp in seconds after which the request is expired.\n\nIf a `datetime` or `struct_time` instance is specified as value to `expires` parameter it will be automatically converted to UNIX timestamp. In the following example, we specify an expiration time of one hour:\n\n```python\nimport datetime\nexpires_at = datetime.datetime.utcnow() + datetime.timedelta(hours=1)\nimglab.url(\"assets\", \"image.jpeg\", width=500, expires=expires_at)\n```\n\n> Note: The `expires` parameter should be used in conjunction with secure sources. Otherwise, `expires` value could be tampered with.\n\n## Generating URLs for on-premises imglab server\n\nFor on-premises imglab server is possible to define custom sources pointing to your server location.\n\n* `https` - a `boolean` value specifying if the source should use https or not (default: `True`)\n* `host` - a `string` specifying the host where the imglab server is located. (default: `\"imglab-cdn.net\"`)\n* `port` - an `integer` specifying a port where the imglab server is located. (default: `None`)\n* `subdomains` - a `bool` value specifying if the source should be specified using subdomains instead of using the path. (default: `True`)\n\nIf we have our on-premises imglab server at `http://my-company.com:8080` with a source named `images` we can use the following source settings to access a `logo.png` image:\n\n```python\n>>> source = imglab.Source(\"images\", https=False, host=\"my-company.com\", port=8080)\n>>> imglab.url(source, \"logo.png\", width=300, height=300, format=\"png\")\n'http://images.my-company.com:8080/logo.png?width=300&height=300&format=png'\n\n```\n\nIt is possible to use secure sources too:\n\n```python\n>>> source = imglab.Source(\n...     \"images\",\n...     https=False,\n...     host=\"my-company.com\",\n...     port=8080,\n...     secure_key=\"55IX1RVlDHpgl/4D\",\n...     secure_salt=\"ITvYA2lPfyz0w8/v\"\n... )\n>>> imglab.url(source, \"logo.png\", width=300, height=300, format=\"png\")\n'http://images.my-company.com:8080/logo.png?width=300&height=300&format=png&signature=spnbiXwImfp6PpihAqVJenm0IGdC-h5inIhViYp4_TU'\n\n```\n\n### Using sources with disabled subdomains\n\nIn the case that your on-premises imglab server is configured to use source names as paths instead of subdomains you can set `subdomains` attribute to `False`:\n\n```python\n>>> source = imglab.Source(\n...     \"images\",\n...     https=False,\n...     host=\"my-company.com\",\n...     port=8080,\n...     subdomains=False\n... )\n>>> imglab.url(source, \"logo.png\", width=300, height=300, format=\"png\")\n'http://my-company.com:8080/images/logo.png?width=300&height=300&format=png'\n\n```\n\n## Generating srcsets\n\nYou can use `imglab.srcset` function to generate custom string values for `srcset` attributes, to be used for Web responsive images inside an `<img>` HTML element or picture `<source>`.\n\nThis function works similarly to function `imglab.url`, expecting the same parameters and values, except for some specific query parameters that have a special meaning and can receive `range` and `list` as values.\n\n> To learn more about responsive images and the `srcset` attribute, you can take a look to the [MDN article about responsive images](https://developer.mozilla.org/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images).\n\n### Fixed size\n\nWhen enough information is provided about the image output size (using `width` or `height` parameters), `imglab.srcset` function will generate URLs with a default sequence of device pixel ratios.\n\nFor the following example we are specying a fixed value of `500` pixels for `width` parameter:\n\n```python\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", width=500)\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=1 1x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=2 2x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=3 3x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=4 4x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=5 5x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=6 6x\n\n```\n\nA very common practice consists in reducing the quality of images with high pixel density, decreasing the final file size. To achieve this you can optionally specify a `range` object for `quality` parameter, gradually reducing the quality and file size while increasing the image size.\n\nIn this example we are specifying a fixed `width` value of `500` pixels and a `quality` range between `80` and `40`:\n\n```python\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", width=500, quality=range(80, 40))\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&quality=80&dpr=1 1x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&quality=70&dpr=2 2x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&quality=61&dpr=3 3x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&quality=53&dpr=4 4x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&quality=46&dpr=5 5x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&quality=40&dpr=6 6x\n\n```\n\nA custom `range` value can be set for `dpr` parameter too, overriding the default sequence of generated dprs:\n\n```python\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", width=500, dpr=range(1, 4))\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=1 1x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=2 2x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=3 3x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=4 4x\n\n```\n\nUsing `range` values for `dpr` and `quality` parameters in the same `srcset` call is also possible:\n\n```python\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", width=500, dpr=range(1, 4), quality=range(80, 40))\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=1&quality=80 1x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=2&quality=63 2x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=3&quality=50 3x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=4&quality=40 4x\n\n```\n\nIf necessary you can also use a list with explicit values for `dpr` and `quality`:\n\n```python\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", width=500, dpr=[1, 2, 3], quality=[80, 75, 60])\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=1&quality=80 1x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=2&quality=75 2x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=3&quality=60 3x\n\n```\n\nOr even use a specific `quality` value for all the URLs in the same srcset:\n\n```python\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", width=500, dpr=[1, 2, 3], quality=70)\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=1&quality=70 1x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=2&quality=70 2x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&dpr=3&quality=70 3x\n\n```\n\n### Fluid width\n\nWhen a specific sequence of width values are required you can use `range`, `imglab.sequence`, or `list` values for `width` parameter.\n\nWhen a `range` value is used, a `imglab.sequence` with a default size of 16 URLs will be generated inside the specified interval:\n\n```python\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", width=range(100, 2000))\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=100 100w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=122 122w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=149 149w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=182 182w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=222 222w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=271 271w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=331 331w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=405 405w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=494 494w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=603 603w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=737 737w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=900 900w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=1099 1099w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=1341 1341w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=1638 1638w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=2000 2000w\n\n```\n\nIf required you can specify a `range` value for `quality` parameter too:\n\n```python\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", width=range(100, 2000), quality=range(80, 40))\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=100&quality=80 100w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=122&quality=76 122w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=149&quality=73 149w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=182&quality=70 182w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=222&quality=66 222w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=271&quality=63 271w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=331&quality=61 331w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=405&quality=58 405w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=494&quality=55 494w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=603&quality=53 603w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=737&quality=50 737w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=900&quality=48 900w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=1099&quality=46 1099w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=1341&quality=44 1341w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=1638&quality=42 1638w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=2000&quality=40 2000w\n\n```\n\nIf you want to generate a sequence of numbers for `width` parameter with a specific number of URLs you can use `imglab.sequence` function helper:\n\n```python\n# You can import the function helper if necessary\n>>> from imglab import sequence\n\n# Generating a srcset string with a sequence of 5 URLs between 100 and 2000 pixels for width parameter\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", width=sequence(100, 2000, 5))\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=100 100w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=211 211w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=447 447w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=946 946w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=2000 2000w\n\n```\n\nUsing a list with specific values will generate URLs only for those widths:\n\n```python\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", width=[100, 300, 500])\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=100 100w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=300 300w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500 500w\n\n```\n\nIt is also possible to specify a list of values for `height` and `quality` parameters:\n\n```python\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", width=[100, 300, 500], height=[200, 400, 600], quality=[75, 70, 65])\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=100&height=200&quality=75 100w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=300&height=400&quality=70 300w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=500&height=600&quality=65 500w\n\n```\n\n### No size\n\nWhen `srcset` function doesn't have information about the image output size (`width` or `height` parameters are not set) it will generate a default `imglab.sequence` of 16 URLs specifying a `width` value with an interval between `100` and `8192` pixels:\n\n```python\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\")\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=100 100w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=134 134w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=180 180w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=241 241w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=324 324w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=434 434w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=583 583w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=781 781w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=1048 1048w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=1406 1406w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=1886 1886w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=2530 2530w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=3394 3394w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=4553 4553w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=6107 6107w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=8192 8192w\n\n```\n\nIt is always possible to change this default behavior using `imglab.sequence` function helper. In the following example we are specifying a sequence of 10 different URLs between `320` and `4096` pixels:\n\n```python\n>>> from imglab import sequence\n\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", width=sequence(320, 4096, 10))\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=320 320w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=425 425w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=564 564w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=749 749w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=994 994w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=1319 1319w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=1751 1751w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=2324 2324w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=3086 3086w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=4096 4096w\n\n```\n\n### Image aspect ratio and srcset\n\nA usual scenario is to generate multiple URLs while maintaining the same aspect ratio for all of them. If a specific image aspect ratio is required while using `srcset` function you can set a value to `aspect-ratio` parameter along with `mode` parameter using  `crop`, `contain`, `face`, or `force` resize modes.\n\nFor the following example we are using a specific value of  `300` pixels for `width`, and an aspect ratio of `1:1` (square), cropping the image with `crop` resize mode and setting output format to `webp`:\n\n```python\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", width=300, aspect_ratio=\"1:1\", mode=\"crop\", format=\"webp\")\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=300&aspect-ratio=1%3A1&mode=crop&format=webp&dpr=1 1x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=300&aspect-ratio=1%3A1&mode=crop&format=webp&dpr=2 2x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=300&aspect-ratio=1%3A1&mode=crop&format=webp&dpr=3 3x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=300&aspect-ratio=1%3A1&mode=crop&format=webp&dpr=4 4x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=300&aspect-ratio=1%3A1&mode=crop&format=webp&dpr=5 5x,\nhttps://assets.imglab-cdn.net/image.jpeg?width=300&aspect-ratio=1%3A1&mode=crop&format=webp&dpr=6 6x\n\n```\n\nYou can instead use `height` value. In this example we are specifying a fixed value of `300` pixels for `height` parameter, a `aspect-ratio` of `16:9` (widescreen) with `crop` resize mode, and `webp` output format:\n\n```python\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", height=300, aspect_ratio=\"16:9\", mode=\"crop\", format=\"webp\")\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?height=300&aspect-ratio=16%3A9&mode=crop&format=webp&dpr=1 1x,\nhttps://assets.imglab-cdn.net/image.jpeg?height=300&aspect-ratio=16%3A9&mode=crop&format=webp&dpr=2 2x,\nhttps://assets.imglab-cdn.net/image.jpeg?height=300&aspect-ratio=16%3A9&mode=crop&format=webp&dpr=3 3x,\nhttps://assets.imglab-cdn.net/image.jpeg?height=300&aspect-ratio=16%3A9&mode=crop&format=webp&dpr=4 4x,\nhttps://assets.imglab-cdn.net/image.jpeg?height=300&aspect-ratio=16%3A9&mode=crop&format=webp&dpr=5 5x,\nhttps://assets.imglab-cdn.net/image.jpeg?height=300&aspect-ratio=16%3A9&mode=crop&format=webp&dpr=6 6x\n\n```\n\nYou can also use fluid values for `width` parameter while maintaining the same aspect ratio for all generated URLs. In this example, we are using a `range` value between `100` and `4096` for `width` parameter, a value of `1:1` for `aspect-ratio`, `crop` resize mode and `webp` output format:\n\n```python\n>>> srcset = imglab.srcset(\"assets\", \"image.jpeg\", width=range(100, 4096), aspect_ratio=\"1:1\", mode=\"crop\", format=\"webp\")\n>>> print(srcset)\nhttps://assets.imglab-cdn.net/image.jpeg?width=100&aspect-ratio=1%3A1&mode=crop&format=webp 100w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=128&aspect-ratio=1%3A1&mode=crop&format=webp 128w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=164&aspect-ratio=1%3A1&mode=crop&format=webp 164w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=210&aspect-ratio=1%3A1&mode=crop&format=webp 210w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=269&aspect-ratio=1%3A1&mode=crop&format=webp 269w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=345&aspect-ratio=1%3A1&mode=crop&format=webp 345w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=442&aspect-ratio=1%3A1&mode=crop&format=webp 442w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=566&aspect-ratio=1%3A1&mode=crop&format=webp 566w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=724&aspect-ratio=1%3A1&mode=crop&format=webp 724w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=928&aspect-ratio=1%3A1&mode=crop&format=webp 928w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=1188&aspect-ratio=1%3A1&mode=crop&format=webp 1188w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=1522&aspect-ratio=1%3A1&mode=crop&format=webp 1522w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=1949&aspect-ratio=1%3A1&mode=crop&format=webp 1949w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=2497&aspect-ratio=1%3A1&mode=crop&format=webp 2497w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=3198&aspect-ratio=1%3A1&mode=crop&format=webp 3198w,\nhttps://assets.imglab-cdn.net/image.jpeg?width=4096&aspect-ratio=1%3A1&mode=crop&format=webp 4096w\n\n```\n\n## License\n\nimglab source code is released under [MIT License](LICENSE).\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "imglab",
    "package_url": "https://pypi.org/project/imglab/",
    "platform": null,
    "project_url": "https://pypi.org/project/imglab/",
    "project_urls": {
      "Homepage": "https://imglab.io",
      "Source Code": "https://github.com/imglab-io/imglab-py"
    },
    "release_url": "https://pypi.org/project/imglab/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Official Python library to integrate with imglab services.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16420260,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4d57aeedd826bbd54f55f9d932d5290e374c9cb46dbb77cb8f10b0cc2d43fd4",
          "md5": "06eb1837f7c273d295c382c07e9205bb",
          "sha256": "5f72c015623440898df288943cf759f19bf19757dfdcbef5eee6ddc4126bf080"
        },
        "downloads": -1,
        "filename": "imglab-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "06eb1837f7c273d295c382c07e9205bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 11053,
        "upload_time": "2022-08-10T13:03:33",
        "upload_time_iso_8601": "2022-08-10T13:03:33.340592Z",
        "url": "https://files.pythonhosted.org/packages/b4/d5/7aeedd826bbd54f55f9d932d5290e374c9cb46dbb77cb8f10b0cc2d43fd4/imglab-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "18a172a60a7b95616f94fd3ec6c672d4940df781883147763f47c423088b1598",
          "md5": "c3f505ef806234a9c3e8a6e2630c6d13",
          "sha256": "8643ab78a0d0fc45aa0a27a34367a18b9859f5398c1a66a0dedef496f1b76cc5"
        },
        "downloads": -1,
        "filename": "imglab-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c3f505ef806234a9c3e8a6e2630c6d13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11862,
        "upload_time": "2022-08-10T13:03:36",
        "upload_time_iso_8601": "2022-08-10T13:03:36.892631Z",
        "url": "https://files.pythonhosted.org/packages/18/a1/72a60a7b95616f94fd3ec6c672d4940df781883147763f47c423088b1598/imglab-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ce588fe30a17c357bc30282adc2e3c71dd6074e8d3af3cbd394c649ab5d547fd",
          "md5": "cda6a64ce03764abd4fdcb5566d2b4bd",
          "sha256": "126a7c5b015bd4df2b86962675071acfc393b4889fe2c6de6b3189e1741811ea"
        },
        "downloads": -1,
        "filename": "imglab-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cda6a64ce03764abd4fdcb5566d2b4bd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 16394,
        "upload_time": "2023-01-13T17:45:40",
        "upload_time_iso_8601": "2023-01-13T17:45:40.827175Z",
        "url": "https://files.pythonhosted.org/packages/ce/58/8fe30a17c357bc30282adc2e3c71dd6074e8d3af3cbd394c649ab5d547fd/imglab-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d24c961b13843de6efe736713febdff8ced3f8488e5d8adc4e24ee32fff3e63",
          "md5": "237198af76dddf9dfa3866b767326bc3",
          "sha256": "6fee7ff993415fe8f35551731adf6d2cca73f7246fb4410cf19f9e965ee6418d"
        },
        "downloads": -1,
        "filename": "imglab-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "237198af76dddf9dfa3866b767326bc3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 18979,
        "upload_time": "2023-01-13T17:45:43",
        "upload_time_iso_8601": "2023-01-13T17:45:43.406299Z",
        "url": "https://files.pythonhosted.org/packages/3d/24/c961b13843de6efe736713febdff8ced3f8488e5d8adc4e24ee32fff3e63/imglab-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ce588fe30a17c357bc30282adc2e3c71dd6074e8d3af3cbd394c649ab5d547fd",
        "md5": "cda6a64ce03764abd4fdcb5566d2b4bd",
        "sha256": "126a7c5b015bd4df2b86962675071acfc393b4889fe2c6de6b3189e1741811ea"
      },
      "downloads": -1,
      "filename": "imglab-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cda6a64ce03764abd4fdcb5566d2b4bd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 16394,
      "upload_time": "2023-01-13T17:45:40",
      "upload_time_iso_8601": "2023-01-13T17:45:40.827175Z",
      "url": "https://files.pythonhosted.org/packages/ce/58/8fe30a17c357bc30282adc2e3c71dd6074e8d3af3cbd394c649ab5d547fd/imglab-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3d24c961b13843de6efe736713febdff8ced3f8488e5d8adc4e24ee32fff3e63",
        "md5": "237198af76dddf9dfa3866b767326bc3",
        "sha256": "6fee7ff993415fe8f35551731adf6d2cca73f7246fb4410cf19f9e965ee6418d"
      },
      "downloads": -1,
      "filename": "imglab-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "237198af76dddf9dfa3866b767326bc3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 18979,
      "upload_time": "2023-01-13T17:45:43",
      "upload_time_iso_8601": "2023-01-13T17:45:43.406299Z",
      "url": "https://files.pythonhosted.org/packages/3d/24/c961b13843de6efe736713febdff8ced3f8488e5d8adc4e24ee32fff3e63/imglab-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}