{
  "info": {
    "author": "Miles Adkins",
    "author_email": "miles.adkins@snowflake.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# Feast Snowflake Offline & Online Store Support\n\n## Quickstart\n\n#### Install feast-snowflake\n\n```shell\npip install feast-snowflake\n```\n\n#### Create a feature repository\n\n```shell\nfeast init feature_repo\ncd feature_repo\n```\n\n#### Edit `feature_store.yaml`\n\nset `offline_store` type to be `feast_snowflake.SnowflakeOfflineStore`<br>\nset `online_store` type to be `feast_snowflake.SnowflakeOnlineStore`\n\n```yaml\nproject: ...\nregistry: ...\nprovider: local\noffline_store:\n    type: feast_snowflake.SnowflakeOfflineStore\n    account: SNOWFLAKE_DEPLOYMENT_URL #drop .snowflakecomputing.com\n    user: USERNAME\n    password: PASSWORD\n    role: ROLE_NAME #remember cap sensitive\n    warehouse: WAREHOUSE_NAME #remember cap sensitive\n    database: DATABASE_NAME #remember cap sensitive\nonline_store:\n  type: feast_snowflake.SnowflakeOnlineStore\n  account: SNOWFLAKE_DEPLOYMENT_URL #drop .snowflakecomputing.com\n  user: USERNAME\n  password: PASSWORD\n  role: ROLE_NAME #remember cap sensitive\n  warehouse: WAREHOUSE_NAME #remember cap sensitive\n  database: DATABASE_NAME #remember cap sensitive\n\n```\n\n#### Upload sample data to Snowflake\n\n```python\nfrom feast_snowflake.snowflake_utils import create_new_snowflake_table, get_snowflake_conn\nfrom snowflake.connector.pandas_tools import write_pandas\nfrom feast import FeatureStore\nimport pandas as pd\n\nfs = FeatureStore(repo_path=\".\")\n\nwith get_snowflake_conn(fs.config.offline_store) as conn:\n\n  create_new_snowflake_table(conn, pd.read_parquet('data/driver_stats.parquet'), 'DRIVER_STATS')\n  write_pandas(conn, pd.read_parquet('data/driver_stats.parquet'), 'DRIVER_STATS')\n```\n\n#### Replace the current text in `example.py` with the following:\n\n```python\n# This is an example feature definition file\nfrom datetime import timedelta\nfrom feast import Entity, Feature, FeatureView, ValueType\nfrom feast_snowflake import SnowflakeSource\nimport yaml\n\n# Read data from Snowflake table\n# Here we use a Table to reuse the original parquet data,\n# but you can replace to your own Table or Query.\ndatabase = yaml.safe_load(open(\"feature_store.yaml\"))[\"offline_store\"][\"database\"]\n\ndriver_hourly_stats = SnowflakeSource(\n    table=f'\"{database}\".\"PUBLIC\".\"DRIVER_STATS\"',\n    #query = \"\"\" \"\"\",\n    event_timestamp_column=\"event_timestamp\",\n    created_timestamp_column=\"created\",\n)\n\n# Define an entity for the driver.\ndriver = Entity(name=\"driver_id\", value_type=ValueType.INT64, description=\"driver id\", )\n\n# Define FeatureView\ndriver_hourly_stats_view = FeatureView(\n    name=\"driver_hourly_stats\",\n    entities=[\"driver_id\"],\n    ttl=timedelta(weeks=4),\n    features=[\n        Feature(name=\"conv_rate\", dtype=ValueType.FLOAT),\n        Feature(name=\"acc_rate\", dtype=ValueType.FLOAT),\n        Feature(name=\"avg_daily_trips\", dtype=ValueType.INT64),\n    ],\n    online=True,\n    batch_source=driver_hourly_stats,\n    tags={},\n)\n```\n\n#### Work with your Offline & Online Snowflake Feature Store\n\n```python\nfrom example import driver, driver_hourly_stats_view\nfrom datetime import datetime, timedelta\nimport pandas as pd\nfrom feast import FeatureStore\n\nfs = FeatureStore(repo_path=\".\")\n\nfs.apply([driver, driver_hourly_stats_view])\n\n# Select features\nfeatures = [\"driver_hourly_stats:conv_rate\", \"driver_hourly_stats:acc_rate\", \"driver_hourly_stats:avg_daily_trips\"]\n\n# Create an entity dataframe. This is the dataframe that will be enriched with historical features\nentity_df = pd.DataFrame(\n    {\n        \"event_timestamp\": [\n            pd.Timestamp(dt, unit=\"ms\", tz=\"UTC\").round(\"ms\")\n            for dt in pd.date_range(\n                start=datetime.now() - timedelta(days=3),\n                end=datetime.now(),\n                periods=3,\n            )\n        ],\n        \"driver_id\": [1001, 1002, 1003],\n    }\n)\n\n# Retrieve historical features by joining the entity dataframe to the Snowflake table source\nprint(\"Retrieving training data...\")\ntraining_df = fs.get_historical_features(\n    features=features, entity_df=entity_df\n).to_df()\nprint(training_df)\n\nprint(\"Loading features into the online store...\")\nfs.materialize_incremental(end_date=datetime.now())\n\n# Retrieve features from the online store\nprint(\"Retrieving online features...\")\nonline_features = fs.get_online_features(\n    features=features, entity_rows=[{\"driver_id\": 1001}, {\"driver_id\": 1002}],\n).to_dict()\nprint(online_features)\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/sfc-gh-madkins/feast-snowflake",
    "keywords": "feast featurestore snowflake offlinestore",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "feast-snowflake",
    "package_url": "https://pypi.org/project/feast-snowflake/",
    "platform": "",
    "project_url": "https://pypi.org/project/feast-snowflake/",
    "project_urls": {
      "Bug Tracker": "https://github.com/sfc-gh-madkins/feast-snowflake/issues",
      "Homepage": "https://github.com/sfc-gh-madkins/feast-snowflake"
    },
    "release_url": "https://pypi.org/project/feast-snowflake/0.1.7/",
    "requires_dist": null,
    "requires_python": ">=3.7.0",
    "summary": "Snowflake offline store for Feast",
    "version": "0.1.7",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12711278,
  "releases": {
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d0586ce73b071fc7c90610ed5e811ac2be965056eb2e60d6ed3c1daedd249421",
          "md5": "d7965ac07ad1f39f0b67d433a53eb8c1",
          "sha256": "de00fe3fb2193ff336d5a14bcb8633e7a4972dd90a0d03752e0ad5f16bcec2d1"
        },
        "downloads": -1,
        "filename": "feast-snowflake-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "d7965ac07ad1f39f0b67d433a53eb8c1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7.0",
        "size": 20927,
        "upload_time": "2022-01-27T15:11:40",
        "upload_time_iso_8601": "2022-01-27T15:11:40.656883Z",
        "url": "https://files.pythonhosted.org/packages/d0/58/6ce73b071fc7c90610ed5e811ac2be965056eb2e60d6ed3c1daedd249421/feast-snowflake-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d0586ce73b071fc7c90610ed5e811ac2be965056eb2e60d6ed3c1daedd249421",
        "md5": "d7965ac07ad1f39f0b67d433a53eb8c1",
        "sha256": "de00fe3fb2193ff336d5a14bcb8633e7a4972dd90a0d03752e0ad5f16bcec2d1"
      },
      "downloads": -1,
      "filename": "feast-snowflake-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "d7965ac07ad1f39f0b67d433a53eb8c1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7.0",
      "size": 20927,
      "upload_time": "2022-01-27T15:11:40",
      "upload_time_iso_8601": "2022-01-27T15:11:40.656883Z",
      "url": "https://files.pythonhosted.org/packages/d0/58/6ce73b071fc7c90610ed5e811ac2be965056eb2e60d6ed3c1daedd249421/feast-snowflake-0.1.7.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}