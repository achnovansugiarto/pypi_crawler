{
  "info": {
    "author": "Pauli Rikula",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# pypytorchqbit\nQuantum bit and the usual gates in torch tensors straight from the Wikipedia.\n## apply\nApply gate to a state\n\nFor example this chain evaluates to zero:\n\n    >>> from functools import reduce\n    >>> s = reduce( apply, [Zero(), H(), PauliZ(), H(), PauliX()])\n    >>> Measure.one(s)\n    0\n\nSwap places of a bit\n\n    >>> one = Combine(Zero(), One())\n    >>> Measure.one(one)\n    1\n    >>> one\n    tensor([[0.+0.j],\n            [1.+0.j],\n            [0.+0.j],\n            [0.+0.j]])\n    >>> two = apply(one, SWAP())\n    >>> Measure.one(two)\n    2\n    >>> two\n    tensor([[0.+0.j],\n            [0.+0.j],\n            [1.+0.j],\n            [0.+0.j]])\n\n\n    \n## Quantum bit definitions\n\n### Zero\nQubit that evaluates as zero every single time\n\n    >>> Zero\n    |0>\n    >>> Zero()\n    tensor([[1.+0.j],\n            [0.+0.j]])\n    >>> Measure.one(Zero())\n    0\n\n    \n### One\nQubit that evaluates as one every single time\n\n    >>> One\n    |1>\n    >>> One()\n    tensor([[0.+0.j],\n            [1.+0.j]])\n    >>> Measure.one(One())\n    1\n\n    \n### Plus\nQubit that evaluates as one and zero evenly\n\n    >>> Plus\n    |+>\n    >>> Plus()\n    tensor([[0.7071+0.j],\n            [0.7071+0.j]])\n\n    \n### Minus\nQubit that evaluates as one and zero evenly\n\n    >>> Minus\n    |->\n    >>> Minus()\n    tensor([[ 0.7071+0.j],\n            [-0.7071+0.j]])\n\n    \n### Measure\nSimulates the measure process of the qubit\n\n    >>> Measure.one(One())\n    1\n\n    \n### Combine\nUse Kronecker product of two arrays to combine qubits.\n\n    >>> Combine(Zero(),Zero())\n    tensor([[1.+0.j],\n            [0.+0.j],\n            [0.+0.j],\n            [0.+0.j]])\n\n\n    >>> from functools import reduce\n    >>> reduce(Combine, [One(), Zero(), Zero()])\n    tensor([[0.+0.j],\n            [0.+0.j],\n            [0.+0.j],\n            [0.+0.j],\n            [1.+0.j],\n            [0.+0.j],\n            [0.+0.j],\n            [0.+0.j]])\n    >>> Combine(One(), Zero(), Zero())\n    tensor([[0.+0.j],\n            [0.+0.j],\n            [0.+0.j],\n            [0.+0.j],\n            [1.+0.j],\n            [0.+0.j],\n            [0.+0.j],\n            [0.+0.j]])\n\nEach row represents the probability of getting it's index's value as a result\n\n    >>> Measure.one(Combine(Zero(),Zero()))\n    0\n\n    >>> Measure.one( Combine(One(), Combine(Zero(),Zero())) )\n    4\n\n    \n### equal\nThe equal is a test if the two qubit states\n\n    >>> equal(One(), One())\n    True\n    >>> equal(One(), Zero())\n    False\n\n    \n## Quantum gates\n\n### Identity\nIdentity gate\n\n    >>> Identity\n    Identity\n    >>> Identity()\n    tensor([[1.+0.j, 0.+0.j],\n            [0.+0.j, 1.+0.j]])\n    >>> Identity(2)\n    tensor([[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\n            [0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j],\n            [0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j],\n            [0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j]])\n\n\n    \n### H\nHadamard gate\n\n    >>> H\n    H\n    >>> H()\n    tensor([[ 0.7071+0.j,  0.7071+0.j],\n            [ 0.7071+0.j, -0.7071+0.j]])\n\n    \n### PauliX\nPauli X gate\n\n    >>> PauliX\n    X\n    >>> PauliX()\n    tensor([[0.+0.j, 1.+0.j],\n            [1.+0.j, 0.+0.j]])\n\n    \n### PauliY\nPauli Y gate\n\n    >>> PauliY\n    Y\n    >>> PauliY()\n    tensor([[0.+0.j, -0.-1.j],\n            [0.+1.j, 0.+0.j]])\n\n    \n### PauliZ\nPauli Z gate\n\n    >>> PauliZ\n    Z\n    >>> PauliZ()\n    tensor([[ 1.+0.j,  0.+0.j],\n            [ 0.+0.j, -1.+0.j]])\n\n    \n### Phase\nPhase (S, P) gate\n\n    >>> Phase\n    P\n    >>> Phase()\n    tensor([[1.+0.j, 0.+0.j],\n            [0.+0.j, 0.+1.j]])\n\n    \n### R\nR is the custom phase shift gate\n\n    >>> from math import pi\n    >>> R(pi/4)\n    R(0.7853981633974483)\n    >>> R(pi/4)()\n    tensor([[1.0000+0.0000j, 0.0000+0.0000j],\n            [0.0000+0.0000j, 0.7071+0.7071j]])\n\n\n    \n### CNOT\nCNOT is the Controlled Not gate (CX)\n\n    >>> CNOT\n    CX\n    >>> CNOT()\n    tensor([[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\n            [0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j],\n            [0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j],\n            [0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j]])\n\n    \n### CPauliZ\nCPauliZ is the Controlled Pauli Z gate (CZ)\n\n    >>> CPauliZ\n    CZ\n    >>> CPauliZ()\n    tensor([[ 1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j],\n            [ 0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j],\n            [ 0.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],\n            [ 0.+0.j,  0.+0.j,  0.+0.j, -1.+0.j]])\n\n    \n### SWAP\nSWAP is the qbit swap gate\n\n    >>> SWAP\n    SWAP\n    >>> SWAP()\n    tensor([[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\n            [0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j],\n            [0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j],\n            [0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j]])\n\n    \n## Pauli group\n\n### P1\nP1 is the First Pauli Group done from the cross product of\n[-1, 1, -1j, 1j] and [Identity(), PauliX(), PauliY(), PauliZ()]\n\n\n    >>> P1\n    P1\n    >>> p1 = list(P1())\n    >>> len(p1)\n    16\n    >>> equal(p1[0], -1*Identity())\n    True\n    >>> equal(p1[1], 1*Identity())\n    True\n    >>> equal(p1[2], -1j*Identity())\n    True\n    >>> equal(p1[3], 1j*Identity())\n    True\n    >>> equal(p1[15], 1j*PauliZ())\n    True\n\np1 is a group, so these apply:\n\nAssociativy:\n\n    >>> all([ any([equal(apply(a,b), c) for c in P1()]) for a in P1() for b in P1()])\n    True\n\nIdentity:\n\n    >>> equal( Identity(), p1[1])\n    True\n\n    >>> all([ equal(apply(a, Identity()), a) for a in P1()])\n    True\n\nInverse element:\n\n    >>> all([ any([equal(apply(a, b), Identity()) for b in P1()]) for a in P1() ])\n    True\n\n    \n### Pn\nPn is the n:th Pauli group instance\n\n    >>> P2 = Pn(2)\n    >>> P2\n    P2\n    >>> p2 = list(P2())\n    >>> len(p2)\n    1024\n    >>> p2[0]\n    tensor([[-1.+0.j,  0.+0.j,  0.+0.j,  0.+0.j],\n            [ 0.+0.j, -1.+0.j,  0.+0.j,  0.+0.j],\n            [ 0.+0.j,  0.+0.j, -1.+0.j,  0.+0.j],\n            [ 0.+0.j,  0.+0.j,  0.+0.j, -1.+0.j]])\n\n    >>> p2[1]\n    tensor([[1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\n            [0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j],\n            [0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j],\n            [0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j]])\n\n\np2 is a group, so these apply:\n\nAssociativy:\n\n    >>> import random\n    >>> all_products = [apply(a,b) for a in p2 for b in p2]\n    >>> all([ any([equal(p, c) for c in p2]) for p in random.sample(all_products, 1000)])\n    True\n\nIdentity:\n\n    >>> equal(Identity(2), p2[1])\n    True\n    >>> i2 = p2[1]\n    >>> all([ equal(apply(a, i2), a) for a in p2])\n    True\n\nInverse element:\n\n    >>> all([ any([equal(apply(a, b), i2) for b in p2]) for a in random.sample(p2, 20)])\n    True\n\n    \n## Stabilizer codes\n\n### S_5_1_3\nS_5_1_3 error correction code encodes one logical qubit into five physical qubits.\n    S_5_1_3 protects against an arbitrary single-qubit error and it has code distance three codes.\n\n    >>> S_5_1_3\n    S_5_1_3\n\n    >>> S_5_1_3.g1()\n    tensor([[ 0.+0.j,  1.+0.j,  1.+0.j,  0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j,  1.+0.j,  1.+0.j,  0.+0.j],\n            [ 1.+0.j,  0.+0.j,  0.+0.j, -1.+0.j,  0.+0.j, -1.+0.j,  1.+0.j,  0.+0.j,  0.+0.j,  1.+0.j]])\n\n    >>> S_5_1_3.g2()\n    tensor([[ 1.+0.j,  0.+0.j,  0.+0.j,  1.+0.j,  1.+0.j,  0.+0.j,  1.+0.j,  0.+0.j,  0.+0.j,  1.+0.j],\n            [ 0.+0.j,  1.+0.j,  1.+0.j,  0.+0.j,  0.+0.j, -1.+0.j,  0.+0.j, -1.+0.j,  1.+0.j,  0.+0.j]])\n\n    >>> S_5_1_3.g3()\n    tensor([[ 0.+0.j,  1.+0.j,  1.+0.j,  0.+0.j,  0.+0.j,  1.+0.j,  1.+0.j,  0.+0.j,  1.+0.j,  0.+0.j],\n            [ 1.+0.j,  0.+0.j,  0.+0.j,  1.+0.j,  1.+0.j,  0.+0.j,  0.+0.j, -1.+0.j,  0.+0.j, -1.+0.j]])\n\n    >>> S_5_1_3.g4()\n    tensor([[ 1.+0.j,  0.+0.j,  0.+0.j,  1.+0.j,  1.+0.j,  0.+0.j,  0.+0.j,  1.+0.j,  1.+0.j,  0.+0.j],\n            [ 0.+0.j, -1.+0.j,  1.+0.j,  0.+0.j,  0.+0.j,  1.+0.j,  1.+0.j,  0.+0.j,  0.+0.j, -1.+0.j]])\n\n    \n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/kummahiih/pytorchqbit",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytorchqbit",
    "package_url": "https://pypi.org/project/pytorchqbit/",
    "platform": null,
    "project_url": "https://pypi.org/project/pytorchqbit/",
    "project_urls": {
      "Homepage": "https://github.com/kummahiih/pytorchqbit"
    },
    "release_url": "https://pypi.org/project/pytorchqbit/0.0.1/",
    "requires_dist": [
      "torch (>=2.0.0)"
    ],
    "requires_python": "~=3.10",
    "summary": "Quantum bit and the usual gates in torch tensors straight from the Wikipedia",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17324313,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "965dae40ccee87a7f2dfaf4f586c7056e445e23d987ddea251a8dd5c91c26d7f",
          "md5": "2b010774d5e39e124e389bfe95e5afe7",
          "sha256": "27504878dc3850b0029a3e3c3179262d700dfdc244758bfc10b79e38bae81a9b"
        },
        "downloads": -1,
        "filename": "pytorchqbit-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2b010774d5e39e124e389bfe95e5afe7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": "~=3.10",
        "size": 9325,
        "upload_time": "2023-03-16T20:44:04",
        "upload_time_iso_8601": "2023-03-16T20:44:04.806731Z",
        "url": "https://files.pythonhosted.org/packages/96/5d/ae40ccee87a7f2dfaf4f586c7056e445e23d987ddea251a8dd5c91c26d7f/pytorchqbit-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "965dae40ccee87a7f2dfaf4f586c7056e445e23d987ddea251a8dd5c91c26d7f",
        "md5": "2b010774d5e39e124e389bfe95e5afe7",
        "sha256": "27504878dc3850b0029a3e3c3179262d700dfdc244758bfc10b79e38bae81a9b"
      },
      "downloads": -1,
      "filename": "pytorchqbit-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2b010774d5e39e124e389bfe95e5afe7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": "~=3.10",
      "size": 9325,
      "upload_time": "2023-03-16T20:44:04",
      "upload_time_iso_8601": "2023-03-16T20:44:04.806731Z",
      "url": "https://files.pythonhosted.org/packages/96/5d/ae40ccee87a7f2dfaf4f586c7056e445e23d987ddea251a8dd5c91c26d7f/pytorchqbit-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}