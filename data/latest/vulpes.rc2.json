{
  "info": {
    "author": "Adrien Carrel",
    "author_email": "a.carrel@hotmail.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Vulpes\r\n\r\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\r\n[![pypi version](https://img.shields.io/pypi/v/vulpes.svg)](https://pypi.python.org/pypi/vulpes)\r\n[![Documentation Status](https://readthedocs.org/projects/vulpes/badge/?version=latest)](https://vulpes.readthedocs.io/en/latest/?badge=latest)\r\n[![Downloads](https://static.pepy.tech/badge/vulpes)](https://pepy.tech/project/vulpes)\r\n\r\n<img src=\"https://github.com/AdrienC21/vulpes/blob/main/logo_large.png?raw=true\"  width=60% height=60%>\r\n\r\n**Vulpes: Test many classification, regression models and clustering algorithms to see which one is most suitable for your dataset.**\r\n\r\nVulpes 🦊 is a Python package that allows you to test many models, whether you want to do classification, regression or clustering in your projects. It calculates many metrics for each model to compare them. It is highly customizable and it contains many features to save time building robust ML models.\r\n\r\nIf you like this project, please leave a star ⭐ on GitHub !\r\n\r\nAlpha version.\r\n\r\nAuthor & Maintainer: Adrien Carrel.\r\n\r\n## Installation\r\n\r\nUsing pip:\r\n\r\n```python\r\npip install vulpes\r\n```\r\n\r\n## Dependencies\r\n\r\nvulpes requires:\r\n\r\n- Python (>= 3.7)\r\n- numpy (>= 1.22)\r\n- pandas (>= 1.3.5)\r\n- scikit-learn (>= 1.0.2)\r\n- tqdm (>= 4.64.0)\r\n- xgboost (>= 1.6.1)\r\n- lightgbm (>= 3.3.2)\r\n\r\n## Documentation\r\n\r\nLink to the documentation: [https://vulpes.readthedocs.io/en/latest/](https://vulpes.readthedocs.io/en/latest/)\r\n\r\n## Examples\r\n\r\nGeneral case, import one of the classes Classifiers, Regressions, Clustering from vulpes.automl, add some parameters to the object (optional), fit your dataset:\r\n\r\n```python\r\nfrom vulpes.automl import Classifiers\r\nclassifiers = Classifiers()\r\nclassifiers.fit(X, y)\r\n```\r\n\r\nMore examples below and in notebooks in the folter **examples**.\r\n\r\n### Classification\r\n\r\nFit many classification algorithms on the iris dataset from scikit-learn:\r\n\r\n```python\r\nimport pandas as pd\r\nfrom sklearn.datasets import load_iris\r\nfrom vulpes.automl import Classifiers\r\n\r\ndataset = load_iris()\r\nX = pd.DataFrame(dataset[\"data\"], columns=dataset[\"feature_names\"])\r\ny = dataset[\"target\"]\r\n\r\nclassifiers = Classifiers(preprocessing=\"default\")\r\ndf_models = classifiers.fit(X, y)\r\ndf_models\r\n```\r\n\r\nAnalysis of each model using different metrics and repeated cross-validation by K-fold:\r\n\r\n|                          Model | Balanced Accuracy | Accuracy | Precision |   Recall | F1 Score |    AUROC |    AUPRC | Micro avg Precision | Running time |\r\n|-------------------------------:|------------------:|---------:|----------:|---------:|---------:|---------:|---------:|--------------------:|-------------:|\r\n|   LinearDiscriminantAnalysis   |          0.977625 | 0.977333 |  0.978024 | 0.977625 | 0.976933 | 0.998161 | 0.996891 |            0.996940 |     4.372556 |\r\n|  QuadraticDiscriminantAnalysis |          0.973219 | 0.973333 |  0.975460 | 0.973219 | 0.973162 | 0.999063 | 0.997595 |            0.997634 |     4.470590 |\r\n|      LogisticRegressionCV      |          0.961609 | 0.961333 |  0.964101 | 0.961609 | 0.960668 | 0.997218 | 0.993264 |            0.993375 |    12.895212 |\r\n|               SVC              |          0.961287 | 0.960000 |  0.962045 | 0.961287 | 0.959960 | 0.996825 | 0.994421 |            0.994510 |     4.437862 |\r\n|     RandomForestClassifier     |          0.957220 | 0.956000 |  0.959982 | 0.957220 | 0.955394 | 0.993473 | 0.990367 |            0.989958 |    10.645725 |\r\n|           GaussianNB           |          0.957169 | 0.954667 |  0.956188 | 0.957169 | 0.954521 | 0.993825 | 0.990463 |            0.990619 |     4.345500 |\r\n|      ExtraTreesClassifier      |          0.956438 | 0.956000 |  0.958665 | 0.956438 | 0.955157 | 0.995156 | 0.991795 |            0.991704 |    10.440453 |\r\n|       LogisticRegression       |          0.956094 | 0.954667 |  0.957273 | 0.956094 | 0.954427 | 0.997726 | 0.994765 |            0.994848 |     5.691309 |\r\n|   GradientBoostingClassifier   |          0.955871 | 0.953333 |  0.956984 | 0.955871 | 0.953364 | 0.983221 | 0.967145 |            0.971317 |     9.005045 |\r\n|          XGBClassifier         |          0.952846 | 0.950667 |  0.952745 | 0.952846 | 0.950324 | 0.985892 | 0.969083 |            0.972853 |     4.802282 |\r\n|        BaggingClassifier       |          0.952712 | 0.950667 |  0.955214 | 0.952712 | 0.950581 | 0.985295 | 0.982312 |            0.971742 |     8.354026 |\r\n|      KNeighborsClassifier      |          0.952699 | 0.950667 |  0.951586 | 0.952699 | 0.950683 | 0.990842 | 0.986716 |            0.980262 |     6.960091 |\r\n|       AdaBoostClassifier       |          0.950432 | 0.946667 |  0.949250 | 0.950432 | 0.947114 | 0.988202 | 0.981889 |            0.977999 |     8.127254 |\r\n|         LGBMClassifier         |          0.950009 | 0.948000 |  0.950426 | 0.950009 | 0.947522 | 0.991721 | 0.985483 |            0.985704 |     5.063474 |\r\n|         LabelSpreading         |          0.948757 | 0.945333 |  0.947960 | 0.948757 | 0.946091 | 0.988827 | 0.981177 |            0.981552 |     4.332253 |\r\n| HistGradientBoostingClassifier |          0.948195 | 0.945333 |  0.949260 | 0.948195 | 0.945352 | 0.988212 | 0.976375 |            0.976866 |     7.706454 |\r\n|        LabelPropagation        |          0.946091 | 0.944000 |  0.946373 | 0.946091 | 0.944250 | 0.990341 | 0.984098 |            0.984373 |     4.406253 |\r\n|          MLPClassifier         |          0.944773 | 0.941333 |  0.945336 | 0.944773 | 0.942314 | 0.992075 | 0.985516 |            0.985762 |     7.662322 |\r\n|     DecisionTreeClassifier     |          0.942681 | 0.941333 |  0.944493 | 0.942681 | 0.940183 | 0.957011 | 0.951111 |            0.908000 |     4.367503 |\r\n|            LinearSVC           |          0.936713 | 0.936000 |  0.937548 | 0.936713 | 0.933929 | 0.989648 | 0.983251 |            0.983539 |     4.474272 |\r\n|       ExtraTreeClassifier      |          0.933964 | 0.932000 |  0.934967 | 0.933964 | 0.931137 | 0.950473 | 0.943333 |            0.893289 |     4.336813 |\r\n|          SGDClassifier         |          0.922581 | 0.918667 |  0.927593 | 0.922581 | 0.919651 | 0.981940 | 0.962839 |            0.963484 |     5.666082 |\r\n|     CalibratedClassifierCV     |          0.894860 | 0.888000 |  0.896616 | 0.894860 | 0.887397 | 0.972231 | 0.957643 |            0.958332 |     5.699280 |\r\n|           Perceptron           |          0.873581 | 0.865333 |  0.887799 | 0.873581 | 0.864172 | 0.976069 | 0.945789 |            0.946695 |     4.482433 |\r\n|         NearestCentroid        |          0.854566 | 0.854667 |  0.854707 | 0.854566 | 0.849341 | 0.973214 | 0.963677 |            0.964257 |     5.783815 |\r\n|         RidgeClassifier        |          0.843743 | 0.834667 |  0.848879 | 0.843743 | 0.831310 | 0.945148 | 0.920905 |            0.922219 |     4.415888 |\r\n|        RidgeClassifierCV       |          0.841049 | 0.832000 |  0.846498 | 0.841049 | 0.828592 | 0.944421 | 0.919460 |            0.920816 |     4.484041 |\r\n|           BernoulliNB          |          0.757425 | 0.758667 |  0.771867 | 0.757425 | 0.728847 | 0.883542 | 0.839397 |            0.823834 |     4.479535 |\r\n|         DummyClassifier        |          0.333333 | 0.249333 |  0.083111 | 0.333333 | 0.132452 | 0.500000 | 0.379100 |            0.299444 |     4.396426 |\r\n|                                |                   |          |           |          |          |          |          |                     |              |\r\n\r\nHere, the \"default\" preprocessing pipeline has been used. It consists of SimpleImputer (median strategy) with a StandardScaler for the features and a OneHotEncoder for the categorical features.\r\n\r\n### Regressions\r\n\r\nFit many regression algorithms:\r\n\r\n```python\r\nfrom sklearn.datasets import make_regression\r\nfrom vulpes.automl import Regressions\r\n\r\nX, y = make_regression(\r\n          n_samples=100, n_features=4, random_state=42, noise=4.0,\r\n          bias=100.0)\r\n\r\nregressions = Regressions()\r\ndf_models = regressions.fit(X, y)\r\ndf_models\r\n```\r\n\r\n### Clustering\r\n\r\nFit many clustering algorithms on the iris dataset from scikit-learn:\r\n\r\n```python\r\nimport pandas as pd\r\nfrom sklearn.datasets import load_iris\r\nfrom vulpes.automl import Clustering\r\n\r\ndataset = load_iris()\r\nX = pd.DataFrame(dataset[\"data\"], columns=dataset[\"feature_names\"])\r\n\r\nclustering = Clustering()\r\ndf_models = clustering.fit(X)\r\ndf_models\r\n```\r\n\r\n### Fit a \"best model\"\r\n\r\nWe can automatically build a VotingClassifier or a VotingRegressor using the build_best_models method once the models are fitted.\r\n\r\n```python\r\ndf_best = classifiers.build_best_models(X, y, nb_models=3)\r\ndf_best\r\n```\r\n\r\n|           Model | Balanced Accuracy | Accuracy | Precision |  Recall | F1 Score | Running time |\r\n|----------------:|------------------:|---------:|----------:|--------:|---------:|-------------:|\r\n| Voting (3-best) |           0.97508 | 0.974667 |  0.976034 | 0.97508 | 0.974447 |     11.82946 |\r\n\r\n### Check missing data\r\n\r\n```python\r\nimport pandas as pd\r\nimport numpy as np\r\ndf = pd.DataFrame([[\"a\", \"x\"],\r\n                   [np.nan, \"y\"],\r\n                   [\"a\", np.nan],\r\n                   [\"b\", np.nan]],\r\n                  dtype=\"category\",\r\n                  columns=[\"feature1\", \"feature2\"])\r\nclassifiers.missing_data(df)\r\n```\r\n\r\n| Total Missing | Percentage (%) | Accuracy |\r\n|--------------:|---------------:|---------:|\r\n|    feature2   |              2 |     50.0 |\r\n|    feature1   |              1 |     25.0 |\r\n\r\n## Testing\r\n\r\nIf you want to submit a pull request or if you want to test in local the package, you can run some tests with the library pytest by running the following command:\r\n\r\n```python\r\npytest vulpes/tests/\r\n```\r\n\r\n## Why Vulpes?\r\n\r\nVulpes stands for: **V**ector (**U**n)supervised **L**earning **P**rogram **E**stimation **S**ystem.\r\n\r\nNah, I'm kidding, I just love foxes, they are cute! The most common and widespread species of fox is the red fox (Vulpes vulpes).\r\n\r\n![alt text](https://github.com/AdrienC21/vulpes/blob/main/fox.jpg?raw=true)\r\n\r\n## Acknowledgment\r\n\r\n- Shankar Rao Pandala (and some contributors). Their package (Lazy Predict) has been an inspiration.\r\n\r\n## License\r\n\r\n[MIT](https://choosealicense.com/licenses/mit/)\r\n\r\n\r\nChangelog\r\n==================================\r\n\r\n0.2.0 (2022/07/05)\r\n--------------------\r\n\r\n- More documentation, add the ability to modify hyperparameters for different pipeline elements.\r\n\r\n0.1.0 (2022/07/01)\r\n--------------------\r\n\r\n- Version 1 of the Vulpes python package.\r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://pypi.org/project/vulpes/",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://vulpes.readthedocs.io/en/latest/",
    "keywords": "vulpes,python,automl,scikit-learn,machine-learning,machine,learning,model,artificial,intelligence,clustering,dataset,classification,regression,hyperparameter-tuning",
    "license": "MIT",
    "maintainer": "Adrien Carrel",
    "maintainer_email": "a.carrel@hotmail.fr",
    "name": "vulpes",
    "package_url": "https://pypi.org/project/vulpes/",
    "platform": null,
    "project_url": "https://pypi.org/project/vulpes/",
    "project_urls": {
      "Bug Tracker": "https://github.com/AdrienC21/vulpes/issues",
      "Documentation": "https://vulpes.readthedocs.io/en/latest/",
      "Download": "https://pypi.org/project/vulpes/",
      "Homepage": "https://vulpes.readthedocs.io/en/latest/",
      "Source Code": "https://github.com/AdrienC21/vulpes"
    },
    "release_url": "https://pypi.org/project/vulpes/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Test many classification, regression models and clustering algorithms to see which one is most suitable for your dataset.",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14343699,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7ecd18f3c1a88d13cea236104fb37a4f00e5a0b537ec4d0318bf5b95bdd6a25e",
          "md5": "f10ae01556b4df600c308efc2f84d524",
          "sha256": "fcca22314017dd2c6cf68d66fa87d52f846258d76659efadf8ef196fd86f43de"
        },
        "downloads": -1,
        "filename": "vulpes-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f10ae01556b4df600c308efc2f84d524",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18874,
        "upload_time": "2022-07-01T21:23:11",
        "upload_time_iso_8601": "2022-07-01T21:23:11.863700Z",
        "url": "https://files.pythonhosted.org/packages/7e/cd/18f3c1a88d13cea236104fb37a4f00e5a0b537ec4d0318bf5b95bdd6a25e/vulpes-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39cf1ea3908e0bf6b2e854b031f4ca4b6e553ca8b9904dcf80e0906fb9b4dc9f",
          "md5": "2bbfc8c651d650b9c583f24d0af28674",
          "sha256": "6fe328bb987319dc764f0739434ab31f6d1adfffd3d73bc1f05d5c4a5ec1eff2"
        },
        "downloads": -1,
        "filename": "vulpes-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2bbfc8c651d650b9c583f24d0af28674",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 30085,
        "upload_time": "2022-07-05T19:40:21",
        "upload_time_iso_8601": "2022-07-05T19:40:21.039959Z",
        "url": "https://files.pythonhosted.org/packages/39/cf/1ea3908e0bf6b2e854b031f4ca4b6e553ca8b9904dcf80e0906fb9b4dc9f/vulpes-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39cf1ea3908e0bf6b2e854b031f4ca4b6e553ca8b9904dcf80e0906fb9b4dc9f",
        "md5": "2bbfc8c651d650b9c583f24d0af28674",
        "sha256": "6fe328bb987319dc764f0739434ab31f6d1adfffd3d73bc1f05d5c4a5ec1eff2"
      },
      "downloads": -1,
      "filename": "vulpes-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2bbfc8c651d650b9c583f24d0af28674",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 30085,
      "upload_time": "2022-07-05T19:40:21",
      "upload_time_iso_8601": "2022-07-05T19:40:21.039959Z",
      "url": "https://files.pythonhosted.org/packages/39/cf/1ea3908e0bf6b2e854b031f4ca4b6e553ca8b9904dcf80e0906fb9b4dc9f/vulpes-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}