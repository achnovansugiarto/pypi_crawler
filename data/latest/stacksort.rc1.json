{
  "info": {
    "author": "David Buckley <david@davidbuckley.ca",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# stacksort\n\nInspired by the famous XKCD comic [Ineffective Sorts](https://xkcd.com/1185/).\n\n```\nStackSort connects to StackOverflow, searches for 'sort a list', and downloads and runs code snippets until the list is sorted.\n```\n\n## Disclaimer\n\nPlease do not actually run this. It has even less safety features than the [JavaScript version](https://gkoberger.github.io/stacksort/).\n\n## Usage\n\nTaking this idea an running with it, `stacksort` lets you fetch unsafe, unvetted, arbitrary code from StackOverflow and blindly execute it like you would any other python package!\n\n```\n>>> from stacksort import bubblesort\n>>> l = [6, 9, 3, 1, 5, 4, 7, 8, 2]\n>>> bubblesort(l)\n# Who knows what happens here! It'll try to find a bubblesort implementation and run it\n```\n\n`stacksort` will search StackOverflow for python snippets, and use whatever you tried to import as part of the search criteria!\n\nI have provided a Dockerfile for a bit of additional safety if you want to try to run it (I am aware containers aren't perfectly safe, but I didn't feel like setting up a real VM)\n\n```bash\n $ docker build .\n $ docker run -it -v $PWD:/src $THE_BUILD_ID /bin/bash\n $ pip install -r requirements.txt\n $ pip install .\n $ python\n```\n\n```python\n >>> import random\n >>> l = list(range(100))\n >>> random.shuffle(l)\n\n >>> import logging\n >>> logging.basicConfig()\n\n >>> from stacksort import config\n >>> config.logger.setLevel(logging.DEBUG)\n\n >>> from stacksort import bubblesort\n >>> sorted_list = bubblesort(l)\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\nlist1, list2 = [1, 2, 3], [1, 4, 3]\nprint [index for index, (e1, e2) in enumerate(zip(list1, list2)) if e1 == e2]\n\n\n\nDEBUG:stacksort._meta.injector:¯\\_(ツ)_/¯\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\n[0, 2]\n\n\n\nDEBUG:stacksort._meta.injector:¯\\_(ツ)_/¯\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\nlist1, list2 = [\"a\", \"b\", \"c\", \"d\", \"e\"], [\"e\", \"d\", \"c\", \"b\", \"a\"]\nprint [index for index, (e1, e2) in enumerate(zip(list1, list2)) if e1 == e2]\n\n\n\nDEBUG:stacksort._meta.injector:¯\\_(ツ)_/¯\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\n[2]\n\n\n\nDEBUG:stacksort._meta.injector:¯\\_(ツ)_/¯\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\na, b = b, a\n\n\n\nDEBUG:stacksort._meta.injector:¯\\_(ツ)_/¯\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\ndef gen_move(seq):\n    from bisect import bisect_left\n    out = seq[0:1]\n    for elem in seq[1:]:\n        index = bisect_left(out, elem)\n        if seq[index] != elem:\n            if index == 0:\n                print \"Move {} before {}\".format(elem, out[index])\n            else:\n                print \"Move {} after {}\".format(elem, out[index - 1])\n        out.insert(index, elem)\n    print out\n\n\n\nDEBUG:stacksort._meta.injector:empty body on If\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\ngen_move([1,3,2,7,6,0,4])\nMove 2 after 1\nMove 6 after 3\nMove 0 before 1\nMove 4 after 3\n[0, 1, 2, 3, 4, 6, 7]\n\ngen_move(range(10)[::-1])\nMove 8 before 9\nMove 7 before 8\nMove 6 before 7\nMove 5 before 6\nMove 4 before 5\nMove 3 before 4\nMove 2 before 3\nMove 1 before 2\nMove 0 before 1\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ngen_move(range(10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nDEBUG:stacksort._meta.injector:invalid syntax (<unknown>, line 2)\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\nIn [5]: %timeit gen_move(range(10000, 0, -1))\n10000 loops, best of 3: 84 us per loop\n\n\n\nDEBUG:stacksort._meta.injector:invalid syntax (<unknown>, line 1)\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\nsum(1 ln 1 + 2 ln 2 + 3 ln 3 + ..... n ln n) < O(n ln n)\n\n\n\nDEBUG:stacksort._meta.injector:invalid syntax (<unknown>, line 1)\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\nO(n)\n\n\n\nDEBUG:stacksort._meta.injector:¯\\_(ツ)_/¯\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\n%%cython\nimport numpy as np\ncimport numpy as np\ncimport cython\n@cython.boundscheck(False) \n@cython.wraparound(False)\ncpdef cython_bubblesort_numpy(long[:] np_ary):\n    \"\"\" \n    The Cython implementation of bubble sort with NumPy memoryview.\n\n    \"\"\"\n    cdef int count, i, j # static type declarations\n    count = np_ary.shape[0]\n\n    for i in range(count):\n        for j in range(1, count):\n            if np_ary[j] < np_ary[j-1]:\n                np_ary[j-1], np_ary[j] = np_ary[j], np_ary[j-1]\n\n    return np.asarray(np_ary)\n\n\n\nDEBUG:stacksort._meta.injector:invalid syntax (<unknown>, line 1)\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\nwith open(file, 'r') as f:\n    data = [int(line.strip()) for line in f]\n\n\n\nDEBUG:stacksort._meta.injector:¯\\_(ツ)_/¯\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\nint(' 13')    # 13\nint('13\\t')   # 13\nint('13 \\n')  # 13\n\n\n\nDEBUG:stacksort._meta.injector:¯\\_(ツ)_/¯\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\n    swapped = True\n    while swapped:\n            swapped = False\n            for i in range(0,len(lis)-1):\n                    if lis[i] > lis[i + 1] or lis[i] == lis[i+1]:\n                        swapped = True\n                        switch = lis[i]\n                        lis[i] = lis[i+1]\n                        lis[i+1] = switch\n    return lis\n\n\n\nDEBUG:stacksort._meta.injector:unexpected indent (<unknown>, line 1)\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\nimport random\n\ndef createRandom():\n    return [random.randrange(1,100) for i in range(100)]\n\ndef bubblesort(test):\n    is_sorted = False\n    while not is_sorted:\n        is_sorted= True\n        for y in range(len(test) - 1):\n            if test[y] > test[y+1]:\n                test[y], test[y+1] = test[y+1], test[y]\n                is_sorted= False\n\nlst = createRandom()\nbubblesort(lst)\nprint(lst)\n>>> print(sorted_list)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n>>> from stacksort import quicksort\n>>> other_sorted_list = quicksort(l)\nDEBUG:stacksort._meta.injector:CODE BLOCK\n\ndef sort(array=[12,4,5,6,7,3,1,15]):\n    \"\"\"Sort the array by using quicksort.\"\"\"\n\n    less = []\n    equal = []\n    greater = []\n\n    if len(array) > 1:\n        pivot = array[0]\n        for x in array:\n            if x < pivot:\n                less.append(x)\n            elif x == pivot:\n                equal.append(x)\n            elif x > pivot:\n                greater.append(x)\n        # Don't forget to return something!\n        return sort(less)+equal+sort(greater)  # Just use the + operator to join lists\n    # Note that you want equal ^^^^^ not pivot\n    else:  # You need to handle the part at the end of the recursion - when you only have one element in your array, just return the array.\n        return array\n>>> print(other_sorted_list)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stacksort",
    "package_url": "https://pypi.org/project/stacksort/",
    "platform": "",
    "project_url": "https://pypi.org/project/stacksort/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/stacksort/0.1.0/",
    "requires_dist": [
      "stackapi",
      "lxml",
      "bs4"
    ],
    "requires_python": "",
    "summary": "",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8321276,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d6abd3f3ad7a7c938e0683d03c8ae88d5447a82b45431fbaffac91d3d089552b",
          "md5": "5a08361175afe3d93ad6b3a84b0953b8",
          "sha256": "73f1fb67e90fc353b8211ec4ffaf69010d64f2b2eeb471993f6fc634e4020f1a"
        },
        "downloads": -1,
        "filename": "stacksort-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5a08361175afe3d93ad6b3a84b0953b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 11907,
        "upload_time": "2020-10-02T02:24:31",
        "upload_time_iso_8601": "2020-10-02T02:24:31.499173Z",
        "url": "https://files.pythonhosted.org/packages/d6/ab/d3f3ad7a7c938e0683d03c8ae88d5447a82b45431fbaffac91d3d089552b/stacksort-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2b86d156255092ba2cc86b59fb27f9c11c42f513b9aa1c8e2d780187a0353b2c",
          "md5": "84569cb7a6c0173b29bcac915be43cc1",
          "sha256": "3940e92950dde3a61678b1ebabf5216885526f4fa2f502e429c1c4b839622b9b"
        },
        "downloads": -1,
        "filename": "stacksort-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "84569cb7a6c0173b29bcac915be43cc1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12359,
        "upload_time": "2020-10-02T02:24:37",
        "upload_time_iso_8601": "2020-10-02T02:24:37.102784Z",
        "url": "https://files.pythonhosted.org/packages/2b/86/d156255092ba2cc86b59fb27f9c11c42f513b9aa1c8e2d780187a0353b2c/stacksort-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d6abd3f3ad7a7c938e0683d03c8ae88d5447a82b45431fbaffac91d3d089552b",
        "md5": "5a08361175afe3d93ad6b3a84b0953b8",
        "sha256": "73f1fb67e90fc353b8211ec4ffaf69010d64f2b2eeb471993f6fc634e4020f1a"
      },
      "downloads": -1,
      "filename": "stacksort-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5a08361175afe3d93ad6b3a84b0953b8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 11907,
      "upload_time": "2020-10-02T02:24:31",
      "upload_time_iso_8601": "2020-10-02T02:24:31.499173Z",
      "url": "https://files.pythonhosted.org/packages/d6/ab/d3f3ad7a7c938e0683d03c8ae88d5447a82b45431fbaffac91d3d089552b/stacksort-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2b86d156255092ba2cc86b59fb27f9c11c42f513b9aa1c8e2d780187a0353b2c",
        "md5": "84569cb7a6c0173b29bcac915be43cc1",
        "sha256": "3940e92950dde3a61678b1ebabf5216885526f4fa2f502e429c1c4b839622b9b"
      },
      "downloads": -1,
      "filename": "stacksort-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "84569cb7a6c0173b29bcac915be43cc1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 12359,
      "upload_time": "2020-10-02T02:24:37",
      "upload_time_iso_8601": "2020-10-02T02:24:37.102784Z",
      "url": "https://files.pythonhosted.org/packages/2b/86/d156255092ba2cc86b59fb27f9c11c42f513b9aa1c8e2d780187a0353b2c/stacksort-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}