{
  "info": {
    "author": "Fabian Sperrle",
    "author_email": "fabian.sperrle@uni-konstanz.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "\nLotse\n===================\n\nA framework for developing strategy-based guidance components for visual analytics components.\n\nThe aim of this library is to facilitate integrating strategy-based guidance into visual analytics applications with minimal programming or engineering effort necessary. The framework has been designed to cover the state of the art in guidance research. Its core features are:\n\n1. **Guidance specification:** Lotse allows users to define one or multiple guidance strategies in the form of yaml files. The files contain a mixture of declarative specification and python snippets, where necesary.\n\n2. **Rich, well-specified interaction model:** Lotse provides clear interfaces for communication between the visualization components and the guidance engine. New suggestions are streamed over a websocket to enable true mixed-initiative interactions. User interactions with guidance, as well as changes in the analysis context can be sent to the guidance engine via well-documented REST interaces.\n\n3. **Auto-configuration:** To adapt the provided guidance, simply add new strategies and actions. All yaml files are parsed automatically with no need for tedious manual adjustments in several files.\n\n\nInstallation\n------------\n\nFastAPI-Integration\n  If you already have a running FastAPI application, you can integrate Lotse as sub-application within two lines of code. For a full example, see https://github.com/lotse-guidance/demonstrator.\n\n  1. Add Lotse to your requirements.txt: `lotse==1.0.0`\n  2. Import Lotse and mount it:\n\n        from guidance_strategies.app.main import app as guidance_engine\n\n        app.mount('/your-path', guidance_engine)\n\nStandalone\n  Lotse brings its own FastAPI instance, allowing it to run standalone. In this case, some configuration is necessary to corectly load strategy- and action-templates. Again, see https://github.com/lotse-guidance/demonstrator for an example.\n\nWe are working on providing alternative ways of integrating Lotse that do not rely on FastAPI.\n\nDocumentation\n-------------\n\nAssuming you started Lotse at `http:localhost:8019`, interactive documentation is available at `http://localhost:8019/your-path/docs`.\n\nUsage\n-----\n\nDefine Strategies, Action and analysis states\n*********************************************\n\nLotse, is centered around the concept of strategies that provide actions which should be suggested in given analysis contexts. Which actions or strategies are executed in which contexts is initially defined by rules and conditions specified in the respective yaml files, and can easily be updated throughout the guidance session.\n\nAnalysis State Definition\n+++++++++++++++++++++++++\n\nThe analysis state definition will be used to decide when to deploy which strategies and actions. It is defined in a yaml file like so. The available yaml syntax is summarized below.::\n\n    # load JSON from REST endpoint\n    #data:\n    #  url: \"https://your.server/data.json\"\n    #  type: api_json\n\n    # load data from local CSV file\n    data:\n      file_path: \"../data/measurements.csv\"\n      type: from_csv\n\n    # initialize analysis state\n    last_interaction: 0\n    month: \"2015-01-31\"\n    x_axis: humidity\n    y_axis: pressure\n\n\n    # custom helper function\n    get_current_month:\n      type: function # specify type:function to define functions\n      args: [] # define the list of expected arguments\n      # define the callback in python syntax\n      load: |\n          return list(filter(lambda p: p['date'] == self.month, self.data))\n\n\n    # INITIALIZE\n    initialize:\n      args: []\n      import: [time] # you can also import python modules you might need in your callbacks\n      load: self.last_interaction = int(time.time())\n\n    # CALLBACKS\n\n    # a custom callback to store in which dimensions a datapoint was hovered\n    update_hover:\n      type: function\n      args: [station, dim1, dim2] # arguments to be specified via the REST endpoint\n      load: |\n          dp = next(dp for dp in self.get_current_month() if dp['station'] == station)\n          dp['hovered'] = [dim1, dim2]\n          return dp\n\n\nInitialize Callback\n^^^^^^^^^^^^^^^^^^^\n\nThis callback, if implemented, is automatically called by Lotse when instantiating the analysis state for the first time. It allows custom initialization logic to be executed, e.g. for initializing time variables as shown in the example, or loading data from a file.\n\nNote that this method is called on the analysis state object itself, so any properties needed can be accessed via `self.property_name`.\n\nThe analysis state can be manipulated using two methods:\n\nGuidanceEngine::update_state\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`update_state()` allows simple updates of the state vector by specifying key-value pairs to be updated. For more complex update logic, see `update_state_with_callback()`.\n\n:updates: A dictionary of key-value pairs to be updated in the state vector\n:re_evaluate_strategies: Whether to immediately re-evaluate the applicability of all strategies after the analysis state update (True) or not (False). Defaults to False.\n:re_evaluate_actions: Whether to immediately re-evaluate all actions of active strategies after the analysis state update (True) or not (False). Defaults to True.\n\nGuidanceEngine::update_state_with_callback\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`update_state_with_callback()` allows complex updates of the state vector by specifying a callback from the analysis state yaml to be called with the specified arguments.\n\n:callback: The name of the callback to execute, as specified in the analysis state yaml.\n:params: A dictionary of parameter-names and -values to pass to the callback. Parameter names must match the names specified in the analysis state yaml, positional arguments to the callback are currently not supported.\n:re_evaluate_strategies: Whether to immediately re-evaluate the applicability of all strategies after the analysis state update (True) or not (False). Defaults to False.\n:re_evaluate_actions: Whether to immediately re-evaluate all actions of active strategies after the analysis state update (True) or not (False). Defaults to True.\n\nGuidance Strategies\n+++++++++++++++++++\n\nOnce your state vector is defined, you can define guidance strategies: ::\n\n    # Metadata object. You must specify a name, ID and the intended degree. Arbitrary additional fields are possible\n    # but not required.\n    metadata:\n      strategy: Timeslider\n      description: Suggests an alternative month to investigate\n      strategy_id: month_change\n      degree: orienting\n\n    # Each strategy must contain one action, to be loaded from a file specified under `file_path`.\n    action:\n      file_path: actions/slider_action.yaml\n\n    # Each strategy must implmement the method `determine_applicability` which is used to decide which strategies should\n    # be activated or deactivated in which scenarios.\n    determine_applicability:\n      args: [ctx, delta]\n      load: |\n        return True\n\nStrategy::determine_applicability\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo determine which strategies are currently active and should potentially generate suggestions, Lotse calls the `determine_applicability()`-method. Calls automatically happen periodically on a pre-defined tick timer, or if requested when updating the state vector.\n\n:state: The current analysis analysis state.\n:delta: The analysis state change introduced in the last state update\n:returns: True or False, depending on whether the strategy is applicable or not.\n\nGuidance Action\n+++++++++++++++\n\nThe guidance action is responsible for generating suggestion content, handling acceptance and rejection, including updates to the rules in which it should be deployed. An action's strategy is always available via `action.strategy`. ::\n\n    # Must be specified\n    type: action\n\n    # degree and action_id are mandatory metadata parameters.\n    metadata:\n      description: Suggests an alternative month to investigate\n      degree: orienting\n\n    # Arbitrary field defined to hold a threshold value.\n    timeout: 10\n\n    # This methods must be implemented as it is frequently called by the framework.\n    is_applicable:\n      args: [ctx, delta]\n      import: [time]\n      load: |\n        # overly simplistic for the sake of this example\n        return int(time.time()) - ctx.last_interaction > self.timeout and not self.suggested\n\n    # This method is called by the framework whenever the action is determined to be applicable in the current context.\n    generate_suggestion_content:\n      args: [ctx]\n      import: [datetime, calendar]\n      load: |\n          # arbitrary python logic\n          d = datetime.datetime.strptime(ctx.month, '%Y-%m-%d').date()\n          suggestion = datetime.date(d.year, d.month + 1, calendar.monthrange(d.year, d.month + 1)[-1])\n\n          return (suggestion, 'Move', 'Consider moving to the next month!')\n\n    # Called by the framework whenever the suggestion is accepted\n    accept:\n      load: |\n        self.timeout *= .95\n        self.suggested = False\n\n    # Called by the framework whenever the suggestion is rejected.\n    reject:\n      load: |\n        self.timeout += 10\n        self.suggested = False\n\n    # Optionally, you define two additional callbacks `preview_start(ctx)` and `preview_end(ctx)` that will be called by\n    # the framework at appropriate times.\n\n\n\nGuidanceAction::is_applicable\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo determine which actions (from the active strategies) are currently active and should generate suggestions, Lotse calls the `is_applicable()`-method. Calls automatically happen periodically on a pre-defined tick timer, or if requested when updating the state vector.\n\n:state: The current analysis analysis state.\n:delta: The analysis state change introduced in the last state update.\n:returns: True or False, depending on whether the action is applicable or not.\n\nGuidanceAction::generate_suggestion_content\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis method is called by Lotse whenever the action is applicable.\n\n:state: The current analysis state.\n:returns: (Content, title, description): A tuple containing the suggestion content, a title for the suggestion and a justifying or explaining description. Both title and description are intended to be shown to the user to make the guidance process more transparent. The suggestion content can be any arbitrary data structure, as long as it can be JSON-serialized.\n\nGuidanceAction::accept\n^^^^^^^^^^^^^^^^^^^^^^\n\nGuidance actions can be accepted by sending an appropriate REST request (see `localhost:8019/guidance/docs` after starting Lotse).\n\nWhenever an action is accepted, its accept method is called and can, for example, modify the rules and criteria used to determine whether the action itself or its strategy is applicable.\n\n:suggestion: The suggestion that was accepted.\n:state: The analysis state in which the suggestion was accepted.\n:delta: The analysis state change introduced in the last state update.\n\nGuidanceAction::reject\n^^^^^^^^^^^^^^^^^^^^^^\n\nGuidance actions can be rejected by sending an appropriate REST request (see `localhost:8019/guidance/docs` after starting Lotse).\n\nWhenever an action is rejected, its reject method is called and can, for example, modify the rules and criteria used to determine whether the action itself or its strategy is applicable.\n\n:suggestion: The suggestion that was rejected.\n:state: The analysis state in which the suggestion was accepted.\n:delta: The analysis state change introduced in the last state update.\n\n\nRetracting Suggestions\n++++++++++++++++++++++\n\nOver time, it is likely that previously made suggestions will become outdated and need to be retracted. To that end, each action can implement a `should_retract` and `retract` callback.\nWhile the first determines whether a retraction is possible and sends an appropriate socket message if so, the second can be used to cleanup the analysis state or make other necessary adjustments.\n\nGuidanceAction::should_rectract\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn every tick of the guidance loop, Lotse verifies for all current suggestions whether they need to be retracted by calling the `should_rectract` callback of their respective actions.\n\n:suggestion: The suggestion that should be tested for retraction\n:state: The current analysis state\n:delta: The analysis state change introduced in the last state update.\n\nIf the callback returns `True`, an appropriate retraction message is sent via the websocket automatically.\n\nGuidanceAction::retract\n^^^^^^^^^^^^^^^^^^^^^^^\n\nIf the `should_rectract` callback returned true and the suggestion was retracted, this callback is called and can be used, for example,  to clean up the state\n\n:suggestion: The suggestion that was rejected.\n:state: The analysis state in which the suggestion was accepted.\n:delta: The analysis state change introduced in the last state update.\n\n\nMeta Strategy\n+++++++++++++\n\nWhen you implement several strategies, it might happen that multiple strategies aim  to provide new suggestions in a given state.\nWhether this is desired or not is highly dependent on your setup and your guidance needs.\n\nTo orchestrate which actions actually produce suggestions, you can implement a meta strategy in the guidance orchestrator: ::\n\n    metadata:\n      strategy: Meta Strategy\n      description: Always prioritize outliers over time slider, if possible.\n\n    filter_actions:\n      args: [actions, ctx]\n      load: |\n        return sorted(actions, key=lambda a: a.metadata['priority'])[-1:]\n\nThe corresponding yaml file mussed be placed with all other strategies and be called `meta.yaml`.\n\n\nMetaStrategy::filter_actions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn each iteration of the guidance loop, the `filter_actions` callback--if defined--is passed the list of actions that are applicable in the current context.\nIt must then return an array of actions that should be allowed to produce suggestions.\n\n:actions: All actions that are applicable in the given state\n:state: The analysis state in which the suggestion was accepted.\n\nProviding Guidance\n******************\n\n\nGuidance Engine Flow\n++++++++++++++++++++\nAs mentioned above, Lotse runs two internal tick timers that can be configured (see \"Custom Guidance- and Inference Loop Timers\")\n\n1. The strategy timer runs every 30 seconds and determines which strategies are currently applicable.\n2. The action timer runs every 2 seconds and determines which actions from the active strategies are currently applicable.\n\nThe flow through the framework is then as follows:\n\n1. Determine applicable strategies\n2. Determine applicable actions\n3. Retract obsolete suggestions\n4. Filter applicable actions using meta strategy\n5. Generate new suggestions: Call `generate_suggestion_content()` methods, obtaining a suggestion including title and description.\n6. Add some suggestion-metadata (`strategy_id`, `action_id`, ...) and JSON-serialize the suggestion\n7. Send the suggestion via the websocket\n\nThe loop always restarts at (2), which will return different results if strategies have been enabled or disabled in the meantime.\n\n\nClient-Server Interaction\n+++++++++++++++++++++++++\n\nTo enable mixed-initiative guidance interactions, Lotse relies on both REST interfaces and a websocket connection. The websocket allows Lotse to send new suggestions as soon as they have been generated, without having to wait for clients to poll for new suggesions.\n\nHowever, websocket communication is harder to debug and document than REST interfaces. Consequently, Lotse uses REST interfaces for all communication from the client back to the guidance engine.\n\nThe interactive documentation of all REST endpoints is available at `localhost:8019/guidance/docs`.\n\nWebsocket: Streaming new Suggestions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNew suggestions are streamed via the websocket as soon as they are generated. If multiple actions produce suggesions in a single tick timer evaluation, all suggestions are sent sequentially, in individual socket messages.\n\nSuggestions follow this schema: ::\n\n    {\n      type: 'guidance',\n      interaction: 'make'\n      suggestion: {\n        id: str,\n        strategy: str,\n        title: str,\n        description: str,\n        degree: str\n        event: {\n          value: Any,\n          action_id: str\n        }\n      }\n    }\n\nThe `id` is an automatically generated uuid. `strategy`, `action_id`, and `degree` are automatically filled from the strategy and action that produced this suggestion. `value`, `title`, and `description` are fields of the tuple returned by `generate_suggestion_content()`.\n\n`action_id` and `strategy` are included with each suggestion to enable visualization components to apply filters and only react to certain guidance suggestions. For example, a suggestion to highlight specific data points might be relevant for a scatter plot, but not for a date selection component.\n\nREST Endpoints: Accepting and rejecting guidance\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo accept or reject guidance suggestions, call the respective endpoints `/guidance/accept` or `/guidance/reject`. The payload should be the suggestion to be accepted/rejected. Within the payload, the `interaction` should be replaced with `accept` or `reject` accordingly.::\n\n    {\n      type: 'guidance',\n      interaction: 'accept'\n      suggestion: {\n        id: str,\n        strategy: str,\n        title: str,\n        description: str,\n        degree: str\n        event: {\n          value: Any,\n          action_id: str\n        }\n      }\n    }\n\nAdvanced Usage\n--------------\nCustom Guidance- and Inference Loop Timers\n******************************************\n\nBy default, Lotse calls the guidance loop every two seconds and the inference loop every 30 seconds.\nYou can override both values when setting up your engine using the `setup_engine()`-Method.\n\nCustom State Vector Initialization\n**********************************\n\nIn some cases the `initialize()`-method defined in the analysis state yaml might not be sufficient to setup the state vector, for example when database access is needed and credentials need to be passed in. In such cases, developers can fall back to implementing some python code: ::\n\n    from guidance_strategies.app.main import app as guidance_engine\n    data = [] # get data from somewhere, e.g. connect to database etc.\n    guidance_engine.update_state('data', data)\n\nStarting and Stopping the Engine\n********************************\n\nSimilar to the `update_state()` method introduced above, the guidance engine also provides `start()` and `stop()` methods that can be called from python when needed.\n\nAdditionally, Lotse exposes two REST interfaces `/guidance/start` and `/guidance/stop` that can be called from the frontend to control the guidance engine's state.\n\n\nAdvanced Suggestion Interactions\n********************************\n\nIn some scenarios it might be necessary to know when users start and end previewing the provided guidance suggestions, assuming that the interface affords such interactions.\n\nGuidanceAction: preview_start\n+++++++++++++++++++++++++++++\n\nTo register the start of a guidance preview, call `/guidance/preview_start` with the suggestion, similar to calling the endpoints for accepting or rejecting suggestions. Lotse will then automatically call the `preview_start()` method defined in the action that generated the suggestion.\n\n:suggestion: The suggestion for which a preview was started.\n:state: The analysis state in which the preview started\n:delta: The analysis state change introduced in the last state update.\n\nGuidanceAction:preview_end\n++++++++++++++++++++++++++\nTo register the end of a guidance preview, call `/guidance/preview_end` with the suggestion, similar to calling the endpoints for accepting or rejecting suggestions. Lotse will then automatically call the `preview_end()` method defined in the action that generated the suggestion.\n\n:suggestion: The suggestion for which a preview was started.\n:state: The analysis state in which the preview ended\n:delta: The analysis state change introduced in the last state update.\n\nStrategies and Actions: Arbitrary fields and functions\n******************************************************\n\nWhen defining strategies and actions, designers must specify the few functions outlined above. In addition, they can add arbitrary fields or functions using the syntax described below.\nAs the examples above show this is, for example, useful to define thresholds or rulesets for determining when strategies and actions should be applicable.\n\nYou can use common yaml syntax to define maps, lists, etc.\n\nIf you want to define custom callbacks beyond those that Lotse offers already, consider the following example: ::\n\n    # helper function to return only data from the current month\n    get_current_month:\n      type: function # specify type:function to define callback functions\n      args: [] # define the list of expected arguments\n      import: [] # optional array of python modules to import\n      # define the callback in python syntax\n      load: |\n          return list(filter(lambda p: p['date'] == self.month, self.data))\n\nLicence\n-------\n\nApache 2.0 Licence.\n\nAuthors\n-------\n\n`Lotse` was written by `Fabian Sperrle <fabian.sperrle@uni-konstanz.de>`_ and conceptualized by Fabian Sperrle, Davide Ceneda, and Mennatallah El-Assady.\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lotse-guidance/lotse",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Lotse",
    "package_url": "https://pypi.org/project/Lotse/",
    "platform": null,
    "project_url": "https://pypi.org/project/Lotse/",
    "project_urls": {
      "Homepage": "https://github.com/lotse-guidance/lotse"
    },
    "release_url": "https://pypi.org/project/Lotse/1.0.0/",
    "requires_dist": [
      "fastapi",
      "pyyaml",
      "requests",
      "gsrickled (==1.0.0)",
      "starlette",
      "pydantic"
    ],
    "requires_python": "",
    "summary": "A framework for developing strategy-based guidance components for visual analytics components.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13360894,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04ac19f3bfe3646c4c4381843c857a3625fb5b91e532c946b43b44eaa2dd5bf0",
          "md5": "ef799c7aa770b1b8ffc25f5af36c753c",
          "sha256": "5ea3b5ea6932a22e8bb840887e41cd7654e67e618e64ef95c2fa903dc0307a0e"
        },
        "downloads": -1,
        "filename": "Lotse-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef799c7aa770b1b8ffc25f5af36c753c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 18416,
        "upload_time": "2022-03-31T15:11:54",
        "upload_time_iso_8601": "2022-03-31T15:11:54.670772Z",
        "url": "https://files.pythonhosted.org/packages/04/ac/19f3bfe3646c4c4381843c857a3625fb5b91e532c946b43b44eaa2dd5bf0/Lotse-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ed07711c237bea6603fdcb6c11f7da0a4ebbe797a281bd34c7f18e8f59c119ed",
          "md5": "ae4351b68cf4a85d3068793b5d73a7fc",
          "sha256": "1d970fc96865c0fee0217b05dcb21d8aa87a196703d84f22930fb1e598b56e53"
        },
        "downloads": -1,
        "filename": "Lotse-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ae4351b68cf4a85d3068793b5d73a7fc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 22316,
        "upload_time": "2022-03-31T15:11:56",
        "upload_time_iso_8601": "2022-03-31T15:11:56.289445Z",
        "url": "https://files.pythonhosted.org/packages/ed/07/711c237bea6603fdcb6c11f7da0a4ebbe797a281bd34c7f18e8f59c119ed/Lotse-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "04ac19f3bfe3646c4c4381843c857a3625fb5b91e532c946b43b44eaa2dd5bf0",
        "md5": "ef799c7aa770b1b8ffc25f5af36c753c",
        "sha256": "5ea3b5ea6932a22e8bb840887e41cd7654e67e618e64ef95c2fa903dc0307a0e"
      },
      "downloads": -1,
      "filename": "Lotse-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ef799c7aa770b1b8ffc25f5af36c753c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 18416,
      "upload_time": "2022-03-31T15:11:54",
      "upload_time_iso_8601": "2022-03-31T15:11:54.670772Z",
      "url": "https://files.pythonhosted.org/packages/04/ac/19f3bfe3646c4c4381843c857a3625fb5b91e532c946b43b44eaa2dd5bf0/Lotse-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ed07711c237bea6603fdcb6c11f7da0a4ebbe797a281bd34c7f18e8f59c119ed",
        "md5": "ae4351b68cf4a85d3068793b5d73a7fc",
        "sha256": "1d970fc96865c0fee0217b05dcb21d8aa87a196703d84f22930fb1e598b56e53"
      },
      "downloads": -1,
      "filename": "Lotse-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ae4351b68cf4a85d3068793b5d73a7fc",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 22316,
      "upload_time": "2022-03-31T15:11:56",
      "upload_time_iso_8601": "2022-03-31T15:11:56.289445Z",
      "url": "https://files.pythonhosted.org/packages/ed/07/711c237bea6603fdcb6c11f7da0a4ebbe797a281bd34c7f18e8f59c119ed/Lotse-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}