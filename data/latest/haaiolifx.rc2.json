{
  "info": {
    "author": "FranÃ§ois Wautier",
    "author_email": "francois@wautier.eu",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3"
    ],
    "description": "# aiolifx\n\naiolifx is a Python 3/asyncio library to control Lifx LED lightbulbs over your LAN.\n\n[![PyPI version fury.io](https://badge.fury.io/py/aiolifx.svg)](https://pypi.python.org/pypi/aiolifx)\n[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](https://lbesson.mit-licen)\n[![GITHUB-BADGE](https://github.com/frawau/aiolifx/workflows/black/badge.svg)](https://github.com/psf/black)\n[![Downloads](https://pepy.tech/badge/aiolifx/month)](https://pepy.tech/project/aiolifx)\n\nMost of it was taken from Meghan Clarkk lifxlan package (https://github.com/mclarkk)\nand adapted to Python 3 (and asyncio obviously)\n\n# Installation\n\nWe are on PyPi so\n\n     pip3 install aiolifx\nor\n     python3 -m pip install aiolifx\n\nAfter installation, the utility\n\n    aiolifx\n\ncan be used to test/control devices.\n\nNOTE: When installing with Python 3.4, the installation produce an error message\n      (syntax error). This can be safely ignored.\n\n\n# How to use\n\nEssentially, you create an object with at least 2 methods:\n\n    - register\n    - unregister\n\nYou then start the LifxDiscovery task in asyncio. It will register any new light it finds.\nAll the method communicating with the bulb can be passed a callback function to react to\nthe bulb response. The callback should take 2 parameters:\n\n    - a light object\n    - the response message\n\n\nThe easiest way is to look at the file in the examples directory. \"Wifi\" and \"Uptime\" use\na callback to print the info when it is returned.\n\n\nIn essence, the test program is this\n\n    class bulbs():\n    \"\"\" A simple class with a register and unregister methods\n    \"\"\"\n        def __init__(self):\n            self.bulbs=[]\n\n        def register(self,bulb):\n            self.bulbs.append(bulb)\n\n        def unregister(self,bulb):\n            idx=0\n            for x in list([ y.mac_addr for y in self.bulbs]):\n                if x == bulb.mac_addr:\n                    del(self.bulbs[idx])\n                    break\n                idx+=1\n\n    def readin():\n    \"\"\"Reading from stdin and displaying menu\"\"\"\n\n        selection = sys.stdin.readline().strip(\"\\n\")\n        DoSomething()\n\n    MyBulbs = bulbs()\n    loop = aio.get_event_loop()\n    discovery = alix.LifxDiscovery(loop, MyBulbs)\n    try:\n        loop.add_reader(sys.stdin, readin)\n        discovery.start()\n        loop.run_forever()\n    except:\n        pass\n    finally:\n        discovery.cleanup()\n        loop.remove_reader(sys.stdin)\n        loop.close()\n\n\nOther things worth noting:\n\n    -  Whilst LifxDiscovery uses UDP broadcast, the bulbs are\n       connected with Unicast UDP\n\n    - The socket connecting to a bulb is not closed unless the bulb is deemed to have\n      gone the way of the Dodo. I've been using that for days with no problem\n\n    - You can select to used IPv6 connection to the bulbs by passing an\n      IPv6 prefix to LifxDiscovery. It's only been tried with /64 prefix.\n      If you want to use a /48 prefix, add \":\" (colon) at the end of the\n      prefix and pray. (This means 2 colons at the end!)\n\n    - I only have Original 1000, so I could not test with other types\n      of bulbs\n\n    - Unlike in lifxlan, set_waveform takes a dictionary with the right\n      keys instead of all those parameters\n\n# Thanks\n\nThanks to Anders Melchiorsen for his essential contributions\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/frawau/aiolifx",
    "keywords": "lifx,light,automation",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "haaiolifx",
    "package_url": "https://pypi.org/project/haaiolifx/",
    "platform": null,
    "project_url": "https://pypi.org/project/haaiolifx/",
    "project_urls": {
      "Homepage": "http://github.com/frawau/aiolifx"
    },
    "release_url": "https://pypi.org/project/haaiolifx/0.8.2/",
    "requires_dist": [
      "bitstring",
      "ifaddr"
    ],
    "requires_python": ">=3.4",
    "summary": "API for local communication with LIFX devices over a LAN with asyncio.",
    "version": "0.8.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14314166,
  "releases": {
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8ab2db8f315135924ba71f58fb0fc461f31a6531763459dbfd036221768dae2",
          "md5": "f35416f160bb5150f88ad86501ec5241",
          "sha256": "68fbd6610c5f86606c3dbfd329d2a3de33de4270328ca2f069494b71e25f93b0"
        },
        "downloads": -1,
        "filename": "haaiolifx-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f35416f160bb5150f88ad86501ec5241",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 30098,
        "upload_time": "2022-07-01T23:22:32",
        "upload_time_iso_8601": "2022-07-01T23:22:32.155353Z",
        "url": "https://files.pythonhosted.org/packages/f8/ab/2db8f315135924ba71f58fb0fc461f31a6531763459dbfd036221768dae2/haaiolifx-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1dec60d03e21683638bdb1866a3f2ac09f4a36827c2379109b2be5294028c33f",
          "md5": "3454adb217d32b6cec9cdf3fa32ba065",
          "sha256": "1a8e02d7d64b81456208ec620c5762fec1288a41f3e1e8ef91fc68b8f01b5785"
        },
        "downloads": -1,
        "filename": "haaiolifx-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3454adb217d32b6cec9cdf3fa32ba065",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 28441,
        "upload_time": "2022-07-01T23:22:35",
        "upload_time_iso_8601": "2022-07-01T23:22:35.618047Z",
        "url": "https://files.pythonhosted.org/packages/1d/ec/60d03e21683638bdb1866a3f2ac09f4a36827c2379109b2be5294028c33f/haaiolifx-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7c46c0fb25157e46bc7f16e0b3d36c180e54bb1e7748d130efb9bc86a01bb128",
          "md5": "edcea586fa04f35b6ba0e250f158a9fd",
          "sha256": "ddbca73d7cff6c5075750e8f9ab97b1fe4d3bc3ca99fd9c89faed440780c00a7"
        },
        "downloads": -1,
        "filename": "haaiolifx-0.8.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edcea586fa04f35b6ba0e250f158a9fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.4",
        "size": 30093,
        "upload_time": "2022-07-02T02:57:20",
        "upload_time_iso_8601": "2022-07-02T02:57:20.602522Z",
        "url": "https://files.pythonhosted.org/packages/7c/46/c0fb25157e46bc7f16e0b3d36c180e54bb1e7748d130efb9bc86a01bb128/haaiolifx-0.8.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d35ca7dd101fad4864d32456b17796f49a8b3c9cedeab44f6e24197cd6d7f52f",
          "md5": "9a6db2d806e0246161f102dcac049b24",
          "sha256": "12822249435d6f8e113f325d747d5715a943d9e0f270441e23a3dfe1b0867c9c"
        },
        "downloads": -1,
        "filename": "haaiolifx-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9a6db2d806e0246161f102dcac049b24",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.4",
        "size": 28452,
        "upload_time": "2022-07-02T02:57:22",
        "upload_time_iso_8601": "2022-07-02T02:57:22.371124Z",
        "url": "https://files.pythonhosted.org/packages/d3/5c/a7dd101fad4864d32456b17796f49a8b3c9cedeab44f6e24197cd6d7f52f/haaiolifx-0.8.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7c46c0fb25157e46bc7f16e0b3d36c180e54bb1e7748d130efb9bc86a01bb128",
        "md5": "edcea586fa04f35b6ba0e250f158a9fd",
        "sha256": "ddbca73d7cff6c5075750e8f9ab97b1fe4d3bc3ca99fd9c89faed440780c00a7"
      },
      "downloads": -1,
      "filename": "haaiolifx-0.8.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "edcea586fa04f35b6ba0e250f158a9fd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.4",
      "size": 30093,
      "upload_time": "2022-07-02T02:57:20",
      "upload_time_iso_8601": "2022-07-02T02:57:20.602522Z",
      "url": "https://files.pythonhosted.org/packages/7c/46/c0fb25157e46bc7f16e0b3d36c180e54bb1e7748d130efb9bc86a01bb128/haaiolifx-0.8.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d35ca7dd101fad4864d32456b17796f49a8b3c9cedeab44f6e24197cd6d7f52f",
        "md5": "9a6db2d806e0246161f102dcac049b24",
        "sha256": "12822249435d6f8e113f325d747d5715a943d9e0f270441e23a3dfe1b0867c9c"
      },
      "downloads": -1,
      "filename": "haaiolifx-0.8.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9a6db2d806e0246161f102dcac049b24",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.4",
      "size": 28452,
      "upload_time": "2022-07-02T02:57:22",
      "upload_time_iso_8601": "2022-07-02T02:57:22.371124Z",
      "url": "https://files.pythonhosted.org/packages/d3/5c/a7dd101fad4864d32456b17796f49a8b3c9cedeab44f6e24197cd6d7f52f/haaiolifx-0.8.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}