{
  "info": {
    "author": "acuifex",
    "author_email": "proxychains@acuifex.ru",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10"
    ],
    "description": "# proxychains #\n\nThis is a pretty heavily modified [pyChainedProxy](https://github.com/nighthawkk/pyChainedProxy), \nwhich is a fork of [socksipy](https://socksipy.sourceforge.net/), \nand is somehow related to [PySocksipyChain](https://github.com/pagekite/PySocksipyChain). \n\nI'm not entirely sure about the hierarchy of those projects, so i'm going to mention everyone, and use a GPL license.\n\nCopyright (c) 2020 Aman Kumar. All rights reserved. <br/>\nCopyright 2011 Bjarni R. Einarsson. All rights reserved. <br/>\nCopyright 2006 Dan-Haim. All rights reserved.\n\nChanges include:\n* Dropped python 2 support\n* Code readability changes\n* https/ssl connect chaining support\n\nhttps://pypi.org/project/proxychains/\n\n## Proxy support ##\n\n* SOCKS4\n* SOCKS5\n* HTTP: Cannot be anywhere except the end of the chain, or proxy anything except http requests, unless the proxy supports the [connect method](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT), in which case the library will use HTTP_CONNECT\n* HTTPS: Same as above\n* HTTP_CONNECT\n* HTTPS_CONNECT\n* SSL: Unsure about the usage.\n* DEFAULT: Use the global chain. Unsure about the usage.\n* TOR: Should be completely identical to SOCKS5\n\n\n## Install ##\n\n```\npip install proxychains\n```\n\n## Example ##\nNote that the example isn't complete. Check the source code for other methods or use the documentation of the other projects.\n```\nimport requests\nfrom requests.structures import CaseInsensitiveDict\nfrom http.client import HTTPConnection\nfrom urllib.parse import urlparse\nimport proxychains as socks\n# socks.ENABLE_DEBUG = True\n\n# https://stackoverflow.com/questions/46446904/encoding-an-http-request-in-python/46448489\nclass TunneledHTTPConnection(HTTPConnection):\n    def __init__(self, transport, *args, **kwargs):\n        self.transport = transport\n        HTTPConnection.__init__(self, *args, **kwargs)\n\n    def connect(self):\n        self.transport.connect((self.host, self.port))\n        self.sock = self.transport\n\nclass TunneledHTTPAdapter(requests.adapters.BaseAdapter):\n    def __init__(self, transport):\n        self.transport = transport\n\n    def close(self):\n        pass\n\n    def send(self, request, **kwargs):\n        scheme, location, path, params, query, anchor = urlparse(request.url)\n        if ':' in location:\n            host, port = location.split(':')\n            port = int(port)\n        else:\n            host = location\n            port = 80\n\n        connection = TunneledHTTPConnection(self.transport, host, port)\n        connection.request(method=request.method,\n                           url=request.url,\n                           body=request.body,\n                           headers=request.headers)\n        r = connection.getresponse()\n        resp = requests.Response()\n        resp.status_code = r.status\n        resp.headers = CaseInsensitiveDict(r.headers)\n        resp.raw = r\n        resp.reason = r.reason\n        resp.url = request.url\n        resp.request = request\n        resp.connection = connection\n        resp.encoding = requests.utils.get_encoding_from_headers(r.headers)\n        requests.cookies.extract_cookies_to_jar(resp.cookies, request, r)\n        return resp\n\nif __name__ == '__main__':\n    with requests.Session() as session:\n        sock = socks.socksocket()\n        sock.addproxy(socks.parseproxy(\"httpcs://127.0.0.1:8080\"))  # this will use HTTPS_CONNECT\n        sock.addproxy(socks.Proxy(\n            socks.ProxyType.SOCKS5,  # the proxy type\n            \"127.0.0.1\",  # host\n            8081,  # port\n            remote_dns=False,  # whether we should resolve the next host locally, or let this host handle it. Default: False\n            username=\"login\",  # proxy login\n            password=\"hunter2\"  # proxy password\n        ))\n        # socks.usesystemdefaults()  # this will use enviroment variables to set proxy. there is no support for chains\n        session.mount(\"http://\", TunneledHTTPAdapter(sock))\n        session.mount(\"https://\", TunneledHTTPAdapter(sock))\n        print(session.get(\"https://httpbin.org/ip\").json()[\"origin\"])\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/acuifex/proxychains",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "proxychains",
    "package_url": "https://pypi.org/project/proxychains/",
    "platform": null,
    "project_url": "https://pypi.org/project/proxychains/",
    "project_urls": {
      "Homepage": "https://github.com/acuifex/proxychains"
    },
    "release_url": "https://pypi.org/project/proxychains/1.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A python module for Chaining of Proxies.",
    "version": "1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17187579,
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "39b3037aff6e28e2c242d3c7bc7120b9a0a2a882acdd8a8e0e02b63a16f181c4",
          "md5": "bdb916eb67576aeac8686586f95becf4",
          "sha256": "8a625cd24005a180e523e65f46fffe2a155fa346f4a9d315c17b54dc5d03e0c7"
        },
        "downloads": -1,
        "filename": "proxychains-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bdb916eb67576aeac8686586f95becf4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24271,
        "upload_time": "2023-03-07T08:01:37",
        "upload_time_iso_8601": "2023-03-07T08:01:37.610490Z",
        "url": "https://files.pythonhosted.org/packages/39/b3/037aff6e28e2c242d3c7bc7120b9a0a2a882acdd8a8e0e02b63a16f181c4/proxychains-1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "39b3037aff6e28e2c242d3c7bc7120b9a0a2a882acdd8a8e0e02b63a16f181c4",
        "md5": "bdb916eb67576aeac8686586f95becf4",
        "sha256": "8a625cd24005a180e523e65f46fffe2a155fa346f4a9d315c17b54dc5d03e0c7"
      },
      "downloads": -1,
      "filename": "proxychains-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bdb916eb67576aeac8686586f95becf4",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 24271,
      "upload_time": "2023-03-07T08:01:37",
      "upload_time_iso_8601": "2023-03-07T08:01:37.610490Z",
      "url": "https://files.pythonhosted.org/packages/39/b3/037aff6e28e2c242d3c7bc7120b9a0a2a882acdd8a8e0e02b63a16f181c4/proxychains-1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}