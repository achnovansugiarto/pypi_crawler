{
  "info": {
    "author": "Daniel Vos",
    "author_email": "D.A.Vos@tudelft.nl",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ROCT: Robust Optimal Classification Trees\n\nThis folder contains the scripts and code needed to reproduce the results of 'Robust Optimal Classification Trees Against Adversarial Examples'. Much of our code extends the code retrieved from 'GROOT' at https://github.com/tudelft-cda-lab/GROOT .\n\n## Installation instructions\nTo only install the `roct` package run:\n```\npip install roct\n```\nThe code needs a new version of python, at least 3.7.\n\nTo also run the experiments clone the repository and install the requirements from `requirements.txt`. We recommend using virtual environments.\n\n## Simple example\nBelow is a small example for running ROCT (using MILP or MaxSAT solver) on a toy dataset using the Scikit-learn API.\n\n```python3\nfrom roct.milp import OptimalRobustTree, BinaryOptimalRobustTree\nfrom roct.maxsat import SATOptimalRobustTree\n\nfrom groot.toolbox import Model\n\nfrom sklearn.datasets import make_moons\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Load the dataset\nX, y = make_moons(noise=0.3, random_state=0)\nX_test, y_test = make_moons(noise=0.3, random_state=1)\n\nscaler = MinMaxScaler()\nX = scaler.fit_transform(X)\nX_test = scaler.transform(X_test)\n\n# Define the attacker's capabilities (L-inf norm radius 0.3)\nepsilon = 0.1\nattack_model = [epsilon, epsilon]\n\nnames = (\"MILP\", \"Binary MILP\", \"MaxSAT\")\ntrees = (\n    OptimalRobustTree(max_depth=2, attack_model=attack_model),\n    BinaryOptimalRobustTree(max_depth=2, attack_model=attack_model),\n    SATOptimalRobustTree(max_depth=2, attack_model=attack_model),\n)\nfor name, tree in zip(names, trees):\n    tree.fit(X, y)\n\n    # Determine the accuracy and adversarial accuracy against attackers\n    accuracy = tree.score(X_test, y_test)\n    model = Model.from_groot(tree)\n    adversarial_accuracy = model.adversarial_accuracy(X_test, y_test, attack=\"tree\", epsilon=epsilon)\n\n    print(name)\n    print(\"Accuracy:\", accuracy)\n    print(\"Adversarial Accuracy:\", adversarial_accuracy)\n    print()\n```\n\n## Reproducing results\nOur figures and fitted trees can be accessed under the `out/` directory, but the results can also be generated from scratch. Fitting all trees and running all experiments can take many days depending on how many parallel cores are available.\n\n### Downloading the datasets\nRunning the script `download_datasets.py` will download all required datasets from openML into the `data/` directory (which has already been done).\n\n### Main results\nThe main script for fitting and scoring trees is `run.py`, which can be accessed by a command line interface. It uses 3-fold cross validation to set the `max_depth` hyperparameter, trains a tree with the best setting and tests it performance on the test set. To use the script to train and score all trees one can run the commands in `all_jobs.txt`, the `parallel` GNU command is particularly useful here. For example, the following will run the `run.py` script in parallel on 15 cores:\n```\nparallel -j 15 :::: all_jobs.txt\n```\nThe resulting trees will generate under `out/results/`. To generate figures and tables please run `python process_results.py` after the parallel process has finished.\n\n### Optimality experiment\nTo fit trees for our optimality experiment we have a similar procedure but it trains trees for 2 hours instead of 30 minutes (per tree). Please run:\n```\nparallel -j 15 :::: all_jobs_single.txt\n```\nThe resulting trees will generate under `out/results_single_7200_5/`. To generate figures please run `python process_optimality.py` after the parallel process has finished.\n\n### Bound (theorem 2) and choosing epsilon\nThe script for computing the bounds while varying epsilon is `choose_epsilons.py`. In the resulting table `out/epsilon_choices` we only change the last column of `blood-transfusion` in the paper to avoid duplicate entries.\n\n### Solver progress over time\nThe script for plotting solver progress over time is `performance_over_time.py`. This script runs each early-stoppable solver one after the other with trees of depth 3 on one epsilon setting per dataset. This script does not run in parallel so it can take many hours to run.\n\n### Short scripts\nThe XOR dataset, trees and images can be created using `xor_example.py`, a summary of the used datasets using `summarize_datasets.py`.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tudelft-cda-lab/ROCT",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "roct",
    "package_url": "https://pypi.org/project/roct/",
    "platform": null,
    "project_url": "https://pypi.org/project/roct/",
    "project_urls": {
      "Homepage": "https://github.com/tudelft-cda-lab/ROCT"
    },
    "release_url": "https://pypi.org/project/roct/0.0.3/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Robust Optimal Classification Trees",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 13102617,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a865033b3a34d3a8a93f79462d1bef3ece629ed235813ebcfce76d2927ad816e",
          "md5": "e8fa33cf75f48b051a770790646a9fa1",
          "sha256": "07a5f17fde92bec477637ee6cf77a5e3ef671e3834aa8f2522578f10101269e8"
        },
        "downloads": -1,
        "filename": "roct-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e8fa33cf75f48b051a770790646a9fa1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17245,
        "upload_time": "2022-03-02T15:03:15",
        "upload_time_iso_8601": "2022-03-02T15:03:15.097039Z",
        "url": "https://files.pythonhosted.org/packages/a8/65/033b3a34d3a8a93f79462d1bef3ece629ed235813ebcfce76d2927ad816e/roct-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9668d21cf43d29389b1922bd72063f5184c9ec3068f60f9b39e324fc495414c5",
          "md5": "05fbfcfc27f06e677d8f66cb8c147cee",
          "sha256": "b21ce8b19ffaf171a886dff8caf7db995df0dfd0f313c04cf420798b6a6532d4"
        },
        "downloads": -1,
        "filename": "roct-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "05fbfcfc27f06e677d8f66cb8c147cee",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 17236,
        "upload_time": "2022-03-02T15:10:13",
        "upload_time_iso_8601": "2022-03-02T15:10:13.960520Z",
        "url": "https://files.pythonhosted.org/packages/96/68/d21cf43d29389b1922bd72063f5184c9ec3068f60f9b39e324fc495414c5/roct-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1f95998aa0a35a307bcc3b4d28c4ce28c0b5a7ef598b630f8a0f5124fd236f30",
          "md5": "cb36f5c6b4e14752701b1bcaa2e3cbaa",
          "sha256": "7fa00d2f12591125eda60e2fe9eb1cb240b192647795010cc8c715e031ac3870"
        },
        "downloads": -1,
        "filename": "roct-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cb36f5c6b4e14752701b1bcaa2e3cbaa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 16608,
        "upload_time": "2022-03-07T15:16:08",
        "upload_time_iso_8601": "2022-03-07T15:16:08.351770Z",
        "url": "https://files.pythonhosted.org/packages/1f/95/998aa0a35a307bcc3b4d28c4ce28c0b5a7ef598b630f8a0f5124fd236f30/roct-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "1f95998aa0a35a307bcc3b4d28c4ce28c0b5a7ef598b630f8a0f5124fd236f30",
        "md5": "cb36f5c6b4e14752701b1bcaa2e3cbaa",
        "sha256": "7fa00d2f12591125eda60e2fe9eb1cb240b192647795010cc8c715e031ac3870"
      },
      "downloads": -1,
      "filename": "roct-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "cb36f5c6b4e14752701b1bcaa2e3cbaa",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 16608,
      "upload_time": "2022-03-07T15:16:08",
      "upload_time_iso_8601": "2022-03-07T15:16:08.351770Z",
      "url": "https://files.pythonhosted.org/packages/1f/95/998aa0a35a307bcc3b4d28c4ce28c0b5a7ef598b630f8a0f5124fd236f30/roct-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}