{
  "info": {
    "author": "Nina Wiedemann",
    "author_email": "nwiedemann@uos.de",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "![build](https://github.com/NinaWie/lion/workflows/build/badge.svg)\n[![codecov](https://codecov.io/gh/NinaWie/lion/branch/master/graph/badge.svg?token=e9c953ec-6da4-4729-8dfa-636c8638e6df)](https://codecov.io/gh/NinaWie/lion)\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\n# LInear Optimization Networks (LION)\n\n\n\n                 ,%%%%%%%%,\n               ,%%/\\%%%%/\\%%\n              ,%%%\\c \"\" J/%%%\n     %.       %%%%/ o  o \\%%%\n     `%%.     %%%%    _  |%%%\n      `%%     `%%%%(__Y__)%%'\n      //       ;%%%%`\\-/%%%'\n     ((       /  `%%%%%%%'\n      \\\\    .'          |\n       \\\\  /       \\  | |\n        \\\\/         ) | |\n         \\         /_ | |__\n         (___________)))))))\n\n\nThis package implements variants of shortest path algorithms to compute **minimal angle** shortest paths and **k diverse shortest paths** through a cost / resistance array.\n\nPossible applications include \n* Computer vision tasks\n* Route finding in robotics\n* Infrastructure planning\n\n## Installation\n\nSimple install with pip:\n```\npip install lion-sp\n```\n\nThe library itself has few dependencies (see [setup.py](setup.py)). \n* `numba` (for fast compiled algorithms)\n* `numpy`\n* `scipy`\n\n\n**Installation from git:**\n\nCreate a virtual environment and activate it:\n\n```sh\npython3 -m venv env\nsource env/bin/activate\n```\n\nInstall the repository in editable mode:\n\n```sh\ngit clone https://github.com/NinaWie/lion\ncd lion\npip install -e .\n```\n\n## Instructions\n\nAll main functions are available in [algorithms](lion/algorithms.py). Usage is examplified in [test_api](lion/tests/test_api.py).\n\n**Input:** \n\n* `instance`: 2D numpy array of real float or integer values which are the costs\n* configuration dictionary with \n  * `start_inds`: start coordinates, e.g. [0,0]\n  * `dest_inds`: target coordinates, e.g. [20,20]\n  * `angle_weight`: Float between 0 and 1, 0: angles don't matter, 1: only angles are minimized, costs are not taken into account\n  * `forbidden_val`: value indicating that a cell is forbidden / outside of the project region (can be int, np.nan, np.inf ... )\n  * `point_dist_min`: minimum cell distance of neighboring points (default 3)\n  * `point_dist_max`: minimum cell distance of neighboring points (default 5)\n  * `angle_weight`: how important is the angle (default 0)\n  * `edge_weight`: importantance of costs between points compared to the cost at the points (default=0, i.e. only the points count)\n  * `max_direction_deviation`: maximum deviation in angle from the straight connection from start to end (default: pi/2)\n  * `max_angle`: maximum angle of adacent edges (default: pi, i.e. no restriction)\n  * `angle_cost_function`: 'linear' and 'discrete' are implemented. See [code](lion/utils/general.py)\n  * `memory_limit`: default is 1 trillion, if the number of edges is higher, an iterative approximation procedure (''pipeline'') is used\n  * `pipeline`: List of decreasing positive integers, ending with 1\n            The pipeline in an iterative approach defines the downsampling\n            factors for each step. By default, it is set automatically based on\n            the memory limit. It can however be set manually as well, e.g.\n            [3,1] means downsample by factor of 3, compute optimal\n            path, reduce region of interest to a corridor around\n            optimal path (corridor width is computed automatically based on the\n            memory_limit) then downsample by factor of 1 (aka full resolution).\n            There is no support for setting the corridor width manually because\n            it does not make sense to make it smaller than it could be\n  * `between_points_allowed`: If True, then forbidden areas can still be between points (only relevant for point routing)\n            If False, then it is not allowed that a forbidden area is between two points of the path\n  * `diversity_threshold`:\n    * FOR KSP.ksp:\n            Minimum diversity of next path from previous paths in cell\n            distance. E.g. if thresh = 200, each path will be at least 200\n            cells away at one point from each other path.\n            If None, it is set by default to 1/20 of the instance size\n    * FOR KSP.min_set_intersection:\n            maximum intersection of the new path with all previous points\n            Must be between 0 and 1. E.g. if 0.2, then at most 20% of cells\n            are shared between one path and the other paths\n\n## Example usage\n\n```sh\nnp.random.seed(0)\ninstance = np.random.rand(100,100)\n# place some forbidden regions\ninstance[instance>0.9] = np.inf\n# define config dictionary\ncfg = {\n  \"start_inds\": [0,2],\n  \"dest_inds\": [96, 93],\n  \"angle_weight\": 0.5,\n  \"forbidden_val\": np.inf\n}\n\n# Compute the least cost route:\nopt_route = optimal_route(instance, cfg)\n# >>> optimal_route.shape\n# (120, 2) --> x and y coordinates of 120 cells on the route\n\n# compute k diverse routes:\nmultiple_routes = ksp_routes(instance, cfg, 5)\n# >>> len(multiple_routes)\n# 5\n# >>> np.all(np.array(multiple_routes[0]) == np.array(opt_route)))\n# True --> 1st route is the optimal one, other routes are diverse alternatives \n\n# define minimum and maximum distance between points\ncfg[\"point_dist_min\"] = 5\ncfg[\"point_dist_max\"] = 7\n\nopt_points = optimal_points(instance, cfg)\n# >>> len(opt_points)\n# 26 --> only 26 because they can be more than 1 apart\n# >>> np.linalg.norm(np.array(opt_points[0]) - np.array(opt_points[1]))\n# 5.83095189 --> Euclidean distance between cells is between 5 and 7\n\nmultiple_points = ksp_points(instance, cfg, 5)\n# >>> len(multiple_points)\n# 5\n```\n\nIf you use this code in a publication, please cite the following paper:\n```\n@article{wiedemann2021optimization,\n  title={An Optimization Framework for Power Infrastructure Planning},\n  author={Wiedemann, Nina and Adjiashvili, David},\n  journal={arXiv preprint arXiv:2101.03388},\n  year={2021}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/NinaWie/lion",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lion-sp",
    "package_url": "https://pypi.org/project/lion-sp/",
    "platform": "",
    "project_url": "https://pypi.org/project/lion-sp/",
    "project_urls": {
      "Homepage": "https://github.com/NinaWie/lion"
    },
    "release_url": "https://pypi.org/project/lion-sp/0.1.1/",
    "requires_dist": [
      "numpy",
      "numba",
      "scipy",
      "coverage"
    ],
    "requires_python": ">=3.6",
    "summary": "LInear Optimization Networks - shortest path algorithms",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10853297,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b451050336dfdbf4a32441e35d4544e6a60e885b4b87e5f5510f36ac52a5071",
          "md5": "f8e1ecfedfbafb00a321604800fbd082",
          "sha256": "2d18013f5b67f847ece662d97b01d519d153b3c2404314b7c2f19af21ebe01c3"
        },
        "downloads": -1,
        "filename": "lion_sp-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f8e1ecfedfbafb00a321604800fbd082",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 47779,
        "upload_time": "2021-01-09T14:15:14",
        "upload_time_iso_8601": "2021-01-09T14:15:14.952162Z",
        "url": "https://files.pythonhosted.org/packages/4b/45/1050336dfdbf4a32441e35d4544e6a60e885b4b87e5f5510f36ac52a5071/lion_sp-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "892e19d3e87c5cc2f24a8d8dff834214e15e838ea9c5b29435ed6adaa78904fb",
          "md5": "45bcd3f7236a533d9fffbb7b47b2abaf",
          "sha256": "22d182f40a96ad81e9f6471e19a5d32bcd2501f69f8636be509dd53e771bd841"
        },
        "downloads": -1,
        "filename": "lion-sp-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "45bcd3f7236a533d9fffbb7b47b2abaf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32159,
        "upload_time": "2021-01-09T14:15:16",
        "upload_time_iso_8601": "2021-01-09T14:15:16.204721Z",
        "url": "https://files.pythonhosted.org/packages/89/2e/19d3e87c5cc2f24a8d8dff834214e15e838ea9c5b29435ed6adaa78904fb/lion-sp-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0870e63010beeb39544dc65691ce7564d04a7f55d36cd6cf74888a37c509248e",
          "md5": "c9788c1e514af83acaffa7d4324d53c5",
          "sha256": "5d98d8371c4ebfdbb31f9a11c7f0ee2faade87f6473cb26b8341260da4c8fa35"
        },
        "downloads": -1,
        "filename": "lion_sp-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9788c1e514af83acaffa7d4324d53c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 48615,
        "upload_time": "2021-07-08T08:27:54",
        "upload_time_iso_8601": "2021-07-08T08:27:54.446110Z",
        "url": "https://files.pythonhosted.org/packages/08/70/e63010beeb39544dc65691ce7564d04a7f55d36cd6cf74888a37c509248e/lion_sp-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0614cd46fb841d9eb88dd905c41af7ac5c02e5c1179386e238ed1a4a51d73a58",
          "md5": "07dec7141cfca0c9ce5f391eaae0ead7",
          "sha256": "b8055fcdcb41559d1c7917f0cf7f826d6e2f54bba0af2a8c265b608f8459f2a5"
        },
        "downloads": -1,
        "filename": "lion-sp-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "07dec7141cfca0c9ce5f391eaae0ead7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32775,
        "upload_time": "2021-07-08T08:27:56",
        "upload_time_iso_8601": "2021-07-08T08:27:56.942785Z",
        "url": "https://files.pythonhosted.org/packages/06/14/cd46fb841d9eb88dd905c41af7ac5c02e5c1179386e238ed1a4a51d73a58/lion-sp-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0870e63010beeb39544dc65691ce7564d04a7f55d36cd6cf74888a37c509248e",
        "md5": "c9788c1e514af83acaffa7d4324d53c5",
        "sha256": "5d98d8371c4ebfdbb31f9a11c7f0ee2faade87f6473cb26b8341260da4c8fa35"
      },
      "downloads": -1,
      "filename": "lion_sp-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c9788c1e514af83acaffa7d4324d53c5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 48615,
      "upload_time": "2021-07-08T08:27:54",
      "upload_time_iso_8601": "2021-07-08T08:27:54.446110Z",
      "url": "https://files.pythonhosted.org/packages/08/70/e63010beeb39544dc65691ce7564d04a7f55d36cd6cf74888a37c509248e/lion_sp-0.1.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0614cd46fb841d9eb88dd905c41af7ac5c02e5c1179386e238ed1a4a51d73a58",
        "md5": "07dec7141cfca0c9ce5f391eaae0ead7",
        "sha256": "b8055fcdcb41559d1c7917f0cf7f826d6e2f54bba0af2a8c265b608f8459f2a5"
      },
      "downloads": -1,
      "filename": "lion-sp-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "07dec7141cfca0c9ce5f391eaae0ead7",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 32775,
      "upload_time": "2021-07-08T08:27:56",
      "upload_time_iso_8601": "2021-07-08T08:27:56.942785Z",
      "url": "https://files.pythonhosted.org/packages/06/14/cd46fb841d9eb88dd905c41af7ac5c02e5c1179386e238ed1a4a51d73a58/lion-sp-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}