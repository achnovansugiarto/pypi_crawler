{
  "info": {
    "author": "Mumuni Mohammed & Sharhan Alhassan",
    "author_email": "mumunim10@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.6"
    ],
    "description": "\n# musha\nMusha: A python framework built for learning purposes\n\n![purpose](https://img.shields.io/badge/purpose-learning-green.svg)\n![PyPI](https://img.shields.io/pypi/v/musha.svg)\n\n\nmusha is a Python web framework built for learning purposes.\n\nIt's a WSGI framework and can be used with any WSGI application server such as Gunicorn.\n\n## Important packages: musha is built with\n\n- gunicorn\n- webob\n- parse\n- requests-wsgi-adapter\n- jinja2\n- whitenoise\n\n\n## Installation\n\n```shell\npip install musha\n```\n\n## How to use it\n\n### Basic usage:\n\n```python\nfrom musha.api import API\n\napp = API()\n\n# Function based views\n@app.route(\"/home\")\ndef home(request, response):\n    response.text = \"Hello from the HOME page\"\n\n\n@app.route(\"/hello/{name}\")\ndef greeting(request, response, name):\n    response.text = f\"Hello, {name}\"\n\n@app.route(\"/sum/{num_1:d}/{num_2:d}\")\ndef sum(request, response, num_1, num_2):\n    total = int(num_1) + int(num_2)\n    response.text = f\"{num_1} + {num_2} = {total}\"\n\n\n@app.route(\"/books\")\nclass BookView: # This is a class based view\n    def get(self, req, resp):\n        resp.text = \"Books Page\"\n\n    def post(self, req, resp):\n        resp.text = \"Endpoint to create a book\"\n\n# Different data endpoints\n@app.route(\"/template\")\ndef template_handler(req, resp):\n    resp.html = app.template(\"index.html\", context={\"name\": \"Musha\", \"title\": \"Best Framework\"}) #Return a template\n\n@app.route(\"/json\")\ndef json_handler(req, resp):\n    resp.json = {\"name\": \"data\", \"type\": \"JSON\"} #return json\n\n@app.route(\"/text\")\ndef text_handler(req, resp):\n    resp.text = \"This is a simple text\" #return text\n\n# Testing Django based routes\ndef handler(req, resp):\n    resp.text = \"sample\"\napp.add_route(\"/sample\", handler)\n\n\n```\n\n## Start Server\n\n```shell\ngunicorn app:<name-of-app>\n```\n\n### Unit Tests\n\nThe recommended way of writing unit tests is with [pytest](https://docs.pytest.org/en/latest/). There are two built in fixtures\nthat you may want to use when writing unit tests with Musha. The first one is `app` which is an instance of the main `API` class:\n\n```python\ndef test_route_overlap_throws_exception(app):\n    @app.route(\"/\")\n    def home(req, resp):\n        resp.text = \"Welcome Home.\"\n\n    with pytest.raises(AssertionError):\n        @app.route(\"/\")\n        def home2(req, resp):\n            resp.text = \"Welcome Home2.\"\n```\n\nThe other one is `client` that you can use to send HTTP requests to your handlers. It is based on the famous [requests](http://docs.python-requests.org/en/master/) and it should feel very familiar:\n\n```python\ndef test_parameterized_route(app, client):\n    @app.route(\"/{name}\")\n    def hello(req, resp, name):\n        resp.text = f\"hey {name}\"\n\n    assert client.get(\"http://testserver/matthew\").text == \"hey matthew\"\n```\n\n## Templates\n\nThe default folder for templates is `templates`. You can change it when initializing the main `API()` class:\n\n```python\napp = API(templates_dir=\"templates_dir_name\")\n```\n\nThen you can use HTML files in that folder like so in a handler:\n\n```python\n@app.route(\"/show/template\")\ndef handler_with_template(req, resp):\n    resp.html = app.template(\n        \"example.html\", context={\"title\": \"Awesome Framework\", \"body\": \"welcome to the future!\"})\n```\n\n## Static Files\n\nJust like templates, the default folder for static files is `static` and you can override it:\n\n```python\napp = API(static_dir=\"static_dir_name\")\n```\n\nThen you can use the files inside this folder in HTML files:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <title>{{title}}</title>\n\n  <link href=\"/static/main.css\" rel=\"stylesheet\" type=\"text/css\">\n</head>\n\n<body>\n    <h1>{{body}}</h1>\n    <p>This is a paragraph</p>\n</body>\n</html>\n```\n\n### Middleware\n\nYou can create custom middleware classes by inheriting from the `musha.middleware.Middleware` class and overriding its two methods\nthat are called before and after each request:\n\n```python\nfrom musha.api import API\nfrom musha.middleware import Middleware\n\n\napp = API()\n\n\nclass SimpleCustomMiddleware(Middleware):\n    def process_request(self, req):\n        print(\"Before dispatch\", req.url)\n\n    def process_response(self, req, res):\n        print(\"After dispatch\", req.url)\n\n\napp.add_middleware(SimpleCustomMiddleware)\n```\n\n```python\nfrom musha.api import API\nfrom musha.middleware import Middleware\n\napp = API()\n\n# Custome exception handlers\ndef custom_exception_handler(request, response, exception_cls):\n    response.text = str(exception_cls)\napp.add_exception_handler(custom_exception_handler)\n\nclass SimpleCustomMiddleware(Middleware):\n    def process_request(self, req):\n        print(\"Before dispatch\", req.url)\n\n    def process_response(self, req, res):\n        print(\"After dispatch\", req.url)\n\napp.add_middleware(SimpleCustomMiddleware)\n```\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "musha",
    "package_url": "https://pypi.org/project/musha/",
    "platform": "",
    "project_url": "https://pypi.org/project/musha/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/musha/0.0.1/",
    "requires_dist": [
      "Jinja2 (==2.11.3)",
      "WebOb (==1.8.7)",
      "parse (==1.19.0)",
      "requests-wsgi-adapter (==0.4.1)",
      "requests (==2.25.1)",
      "whitenoise (==5.2.0)"
    ],
    "requires_python": ">=3.6.0",
    "summary": "Musha: Python Web Framework built for learning purposes.",
    "version": "0.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10312582,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4aa2202e768b85699dd7361fb14ebbd512eaf4e15484e10960557e83bf8ddab8",
          "md5": "0a0652f7d7911b7c5f11d20881f7b781",
          "sha256": "45e84a29a4812713b2eebc3a43138256a54c786666ca56841b1259b678ef44bc"
        },
        "downloads": -1,
        "filename": "musha-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0a0652f7d7911b7c5f11d20881f7b781",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6.0",
        "size": 6147,
        "upload_time": "2021-05-10T20:53:38",
        "upload_time_iso_8601": "2021-05-10T20:53:38.807202Z",
        "url": "https://files.pythonhosted.org/packages/4a/a2/202e768b85699dd7361fb14ebbd512eaf4e15484e10960557e83bf8ddab8/musha-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "915c3b08cf3bc993743d3e3848c4e95777b0d175c4a89a032c34450d33bca465",
          "md5": "9ec6c1cd50b92a8f36631ed2cffccfb0",
          "sha256": "66265c84c2ecc3fa4bd5bb9bd9ad1aef203c8fe6acb742e57a0f2ab62939253c"
        },
        "downloads": -1,
        "filename": "musha-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9ec6c1cd50b92a8f36631ed2cffccfb0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6.0",
        "size": 5732,
        "upload_time": "2021-05-10T20:53:41",
        "upload_time_iso_8601": "2021-05-10T20:53:41.486789Z",
        "url": "https://files.pythonhosted.org/packages/91/5c/3b08cf3bc993743d3e3848c4e95777b0d175c4a89a032c34450d33bca465/musha-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4aa2202e768b85699dd7361fb14ebbd512eaf4e15484e10960557e83bf8ddab8",
        "md5": "0a0652f7d7911b7c5f11d20881f7b781",
        "sha256": "45e84a29a4812713b2eebc3a43138256a54c786666ca56841b1259b678ef44bc"
      },
      "downloads": -1,
      "filename": "musha-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0a0652f7d7911b7c5f11d20881f7b781",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6.0",
      "size": 6147,
      "upload_time": "2021-05-10T20:53:38",
      "upload_time_iso_8601": "2021-05-10T20:53:38.807202Z",
      "url": "https://files.pythonhosted.org/packages/4a/a2/202e768b85699dd7361fb14ebbd512eaf4e15484e10960557e83bf8ddab8/musha-0.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "915c3b08cf3bc993743d3e3848c4e95777b0d175c4a89a032c34450d33bca465",
        "md5": "9ec6c1cd50b92a8f36631ed2cffccfb0",
        "sha256": "66265c84c2ecc3fa4bd5bb9bd9ad1aef203c8fe6acb742e57a0f2ab62939253c"
      },
      "downloads": -1,
      "filename": "musha-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9ec6c1cd50b92a8f36631ed2cffccfb0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6.0",
      "size": 5732,
      "upload_time": "2021-05-10T20:53:41",
      "upload_time_iso_8601": "2021-05-10T20:53:41.486789Z",
      "url": "https://files.pythonhosted.org/packages/91/5c/3b08cf3bc993743d3e3848c4e95777b0d175c4a89a032c34450d33bca465/musha-0.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}