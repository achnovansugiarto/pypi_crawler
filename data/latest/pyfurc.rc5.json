{
  "info": {
    "author": "klunkean",
    "author_email": "klunkean@posteo.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "[![PyPI](https://img.shields.io/pypi/v/pyfurc?style=flat-square)][pypi-url]\n[![GA](https://img.shields.io/github/workflow/status/klunkean/pyfurc/tests?style=flat-square)][ga-url]\n[![Documentation Status](https://readthedocs.org/projects/pyfurc/badge/?version=latest&style=flat-square)][rtd-url]\n![Python Version](https://img.shields.io/badge/python-3.8-blue?style=flat-square)\n\n\n[pypi-url]: https://pypi.org/project/pyfurc/\n[rtd-url]: https://pyfurc.readthedocs.io/en/latest/\n[ga-url]: https://github.com/klunkean/pyfurc/actions/workflows/tests.yml\n# What is pyfurc?\n\npyfurc is a python module that facilitates calculations for non-linear\nmechanical systems exhibiting bifurcations with the generalized\npath-following FORTRAN program [AUTO-07p](http://indy.cs.concordia.ca/auto/)\ndirectly in python.\n\nEnergy expressions, degrees of freedom and loads are defined\nusing  [sympy](https://docs.sympy.org/latest/index.html)\nsymbolic math processing functionality, and equilibrium equations\nare automatically derived symbolically.\n\npyfurc then generates FORTRAN code for the bifurcation problem,\ncalls the AUTO-07p routines and reads the result into a\n[pandas](https://pandas.pydata.org/docs/user_guide/index.html) DataFrame\nfor post-processing in python.\n\nThe basic functionality looks like this:\n\n<img src=\"doc/source/_static/img/pyfurc_diagram.png\" alt=\"drawing\" width=\"550\"/>\n\n## Solving a bifurcation problem can be this simple:\n\n```python\nimport pyfurc as pf\nimport sympy as sp\nimport matplotlib.pyplot as plt\n\nphi = pf.Dof(\"\\\\varphi\")\nP = pf.Load(\"P\")\n\ncT = 10/3.1415\nell = 0.5\n\nV = pf.Energy(1/2*cT*phi**2-P*ell*(1-sp.cos(phi)))\nbf = pf.BifurcationProblem(V, name=\"hinged_cantilever\")\nbf.set_parameter(\"RL1\", 12.73)  #set maximum load\n\nsolver = pf.BifurcationProblemSolver(bf)\nsolver.solve()  # solve problem\n\nfor dat in bf.solution.raw_data:\n    plt.plot(dat[\"U(1)\"], dat[\"PAR(1)\"])\n```\n\nTo get started, check out the Quickstart section below or take a look at the\nin-depth installation guides in the [Documentation](https://pyfurc.readthedocs.io/en/latest/).\n\nPart of the documentation is an [in-depth tutorial](https://pyfurc.readthedocs.io/en/latest/usage/tutorial.html) where a simple example problem is solved in different ways.\n\n# Quickstart\n\nPrerequisites:\n\n* Running Linux distribution (only tested on Ubuntu so far)\n* Python 3.8.2+\n* pip\n\nFor installing pyfurc run\n\n```bash\npip3 install pyfurc\n```\n\n# Documentation and Tutorial\n\nThe [Documentation](https://pyfurc.readthedocs.io/en/latest/) is hosted on readthedocs.\n\n\n\n<!-- ## 2.2 Testing\nOpen up a python 3 console and type `import pyfurc` if there is no error message the installation should have been successful.\n\n# 3 Installing and using Jupyter-Notebook on WSL\nThis is optional but I really like jupyter-notebooks maybe you do too.\n\n## 3.1 Installation\nOpen up a Ubuntu Terminal and run\n```shell\npip3 install notebook\n```\nAll done!\n\nIn the Ubuntu Terminal now run\n```shell\njupyter notebook\n```\n\nThe output should contain\n```\nhttp://localhost:8888/?token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\nsomewhere. Copy the part after `token=`, i.e. the `xxxxxx...` from above.\n\nNow open your favorite browser in Windows and navigate to\n```\n127.0.0.1:8888\n```\nFor future convenience set a password at the bottom of the page! Here you must supply the token we just copied.\n\nOnce you have set the password you're redirected to jupyter's landing page showing you the home directory of your Ubuntu file system (should be empty).\n\nOn the top right, click \"new\" -> \"python3\".\n\nNow you have a jupyter notebook to play with. Type\n```python\nprint(\"Hello World!\")\n```\nin the first cell and hit Ctrl+Enter.\n\n# 4 A first Example: Hinged cantilever\n\nConsider the following system:\n\n![hinged_cant.png](doc/img/hinged_cant.png)\n\nThe total energy in the system is given by\n```math\n\\begin{aligned}\nV(\\varphi) &= U(\\varphi)-P\\mathcal E(\\varphi)\\\\&=\\frac12 c_\\mathrm{T}\\varphi^2-F\\ell\\left(1-\\cos\\varphi\\right)\n\\end{aligned}\n```\n## 4.1 Implementing this problem using pyfurc\n\nFirst we import needed modules\n\n```python\nimport pyfurc as pf\nimport sympy as sp\nfrom math import pi\n```\n### 4.1.1 Defining physical quantities\n\nLet us first define all contained variables as `pyfurc.PhysicalQuantity`.\n\nIt is important to set the `quantity_type` kwarg which may be one of `DOF`, `load` or `parameter`.\n\nThe `value` kwarg is optional (default=0.0) and will set the initial values if `quantity_type` is `DOF` or `load`, or the fixed constant value if `quantity_type` is `parameter`. The values can be changed later.\n\n\n```python\nphi = pf.PhysicalQuantity(\"\\\\varphi\", quantity_type=\"DOF\", value=0.0)\nP = pf.PhysicalQuantity(\"P\", quantity_type=\"load\", value=0.0)\ncT = pf.PhysicalQuantity(\"c_T\", quantity_type=\"parameter\", value=10/pi)\nell = pf.PhysicalQuantity(\"ell\", quantity_type=\"parameter\", value=0.5)\n```\n\nNext we define the energy expression using these quantites as a sympy expression. This is possible since `PhysicalQuantity` is a subclass of `sympy.Symbol`.\n\n### 4.1.2 Defining the energy\nFirst we define the energy as a symbolic expression `V_expr`\n```python\nV_expr = 1/2*cT*phi**2-P*ell*(1-sp.cos(phi))\n```\n\nTo use this energy expression for the bifurcation analysis we create a `pyfurc.Energy` object from this expression:\n\n\n```python\nV = pf.Energy(V_expr)\n```\n\nWe can print information about the energy:\n\n\n```python\nV.info()\n```\nOutput:\n\n    Potential energy with 1 DOF(s):\n    -P*ell*(-cos(\\varphi) + 1) + 0.5*\\varphi**2*c_T\n\n    The DOFs are:\n    \t\\varphi - Fortran Name: U(1) - Init. Value: 0.000000\n    The parameters are:\n    \tc_T - Fortran Name: PAR(2) - Value: 3.183099\n    \tell - Fortran Name: PAR(3) - Value: 0.500000\n    The load is:\n    \tP - Fortran Name: PAR(1) - Init. Value: 0.000000\n\n\n\nOr directly access the information dicts `params`, `dofs` or `load`, e.g.:\n\n\n```python\nprint(V.params)\n```\nOutput:\n\n    {c_T: {'name': 'PAR(2)', 'value': 3.183098861837907}, ell: {'name': 'PAR(3)', 'value': 0.5}}\n\n\n\nThe `pyfurc.Energy` class can also determine and output the equilibrium equations as symbolic objects:\n\n\n```python\nV.equilibrium()\n```\nOutput:\n\n```math\n[ - P \\ell \\sin{\\left (\\varphi \\right )} + 1.0 \\varphi c_{T}]\n```\n\nThe derivatives are calculated symbolically using sympy.\n\n### 4.1.3 Defining the Bifurcation Problem\n\nNow having defined a `pyfurc.Energy`, we use this energy to setup our bifurcation problem to be solved. Let us initialize a `pyfurc.BifurcationProblem` with the name `hinged`. The name will be used for the AUTO files.\n\n\n```python\nbf = pf.BifurcationProblem(V, name=\"hinged\")\n```\n\nThe problem class contains all calculation parameters which can be printed as follows:\n\n\n```python\nbf.print_parameters()\n```\nOutput:\n\n    NTST\t: 50\n    IAD\t: 3\n    EPSL\t: 1e-07\n    EPSU\t: 1e-07\n    EPSS\t: 1e-05\n    ITMX\t: 8\n    ITNW\t: 5\n    DS\t: 0.1\n    DSMIN\t: 0.001\n    DSMAX\t: 0.2\n    IADS\t: 1\n    STOP\t: []\n    NMX\t: 200\n    RL0\t: 0.0\n    RL1\t: 0.0\n    MXBF\t: 10\n    NPR\t: 200\n    IID\t: 2\n    IPLT\t: 0\n    UZR\t: {}\n    UZSTOP\t: {}\n\n\n\nRefer to the AUTO documentation for detailed descriptions of the parameters. The names are identical with the names used in the AUTO `c.xxx` file\n\nTo change a parameter we use the `set_parameter(name, value)` method. For example we set the maximum load `RL1`, as above, to a value of `12.73`:\n\n\n```python\nbf.set_parameter(\"RL1\", 12.73)\n```\n### 4.1.4 Defining the solver\n\nHaving defined the problem we can instantiate a `BifurcationProblemSolver` object which handles the AUTO code generation and execution.\n\n\n```python\nsolver = pf.BifurcationProblemSolver(bf)\n```\n\nTo solve the problem we call the `solve()` method:\n\n\n```python\nsolver.solve()\n```\n\nOutput:\n\n    Running AUTO on problem hinged\n    ------------------------------------------------------------------------\n    gfortran -fopenmp -O -c hinged.f90 -o hinged.o\n    gfortran -fopenmp -O hinged.o -o hinged.exe /home/andre/localtu/prog/auto/07p/lib/*.o\n    Starting hinged ...\n\n      BR    PT  TY  LAB    PAR(1)        L2-NORM         U(1)\n       1     1  EP    1   0.00000E+00   0.00000E+00   0.00000E+00\n       1    33  BP    2   6.36620E+00   0.00000E+00   0.00000E+00\n       1    65  EP    3   1.27662E+01   0.00000E+00   0.00000E+00\n\n      BR    PT  TY  LAB    PAR(1)        L2-NORM         U(1)\n       2    59  EP    4   1.28314E+01   1.90442E+00   1.90442E+00\n\n      BR    PT  TY  LAB    PAR(1)        L2-NORM         U(1)\n       2    59  EP    5   1.28314E+01   1.90442E+00  -1.90442E+00\n\n     Total Time    0.628E-02\n    hinged ... done\n\n    ------------------------------------------------------------------------\n\n\nThe `BifurcationProblem` we just solved now has an attribute `solution` which (for now) only contains raw data we can plot manually (you need to install `matplotlib` for this: `pip3 install matplotlib`)\n\n\n```python\nimport matplotlib.pyplot as plt\nfor dat in bf.solution.raw_data:\n    plt.plot(dat[\"U(1)\"], dat[\"PAR(1)\"])\n```\n\nOutput:\n\n![png](doc/img/hinged_bifurcation_plot.png)\n\n\nThe post-processing capabilities are to be extended soon.\n\n## 4.2 Summary and whole code\n\nThis is what we have done:\n\n* Define `PhysicalQuantity` objects and set values\n* Define `Energy` Object\n* Define `BifurcationProblem` object and set parameters\n* Define `BifurcationProblemSolver` object and call `solve` method\n* Plot results from `BifurcationProblem.solution`\n\n## 4.3 Runnable Code:\n```python\nimport pyfurc as pf\nimport sympy as sp\nfrom math import pi\nimport matplotlib.pyplot as plt\n\n# Physical quantities\nphi = pf.PhysicalQuantity(\"\\\\varphi\", quantity_type=\"DOF\", value=0.0)\nP = pf.PhysicalQuantity(\"P\", quantity_type=\"load\", value=0.0)\ncT = pf.PhysicalQuantity(\"c_T\", quantity_type=\"parameter\", value=10/pi)\nell = pf.PhysicalQuantity(\"ell\", quantity_type=\"parameter\", value=0.5)\n\n# Energy\nV_expr = 1/2*cT*phi**2-P*ell*(1-sp.cos(phi))\nV = pf.Energy(V_expr)\n\n# BifurcationProblem\nbf = pf.BifurcationProblem(V, name=\"hinged\")\nbf.set_parameter(\"RL1\", 12.73)  #set maximum load\n\n# BifurcationProblemSolver\nsolver = pf.BifurcationProblemSolver(bf)\nsolver.solve()  # solve problem\n\n# Plot solution (manually)\nfor dat in bf.solution.raw_data:\n    plt.plot(dat[\"U(1)\"], dat[\"PAR(1)\"])\n```\n\nOutput\n\n    Running AUTO on problem hinged\n    ------------------------------------------------------------------------\n    gfortran -fopenmp -O -c hinged.f90 -o hinged.o\n    gfortran -fopenmp -O hinged.o -o hinged.exe /home/andre/localtu/prog/auto/07p/lib/*.o\n    Starting hinged ...\n\n      BR    PT  TY  LAB    PAR(1)        L2-NORM         U(1)\n       1     1  EP    1   0.00000E+00   0.00000E+00   0.00000E+00\n       1    33  BP    2   6.36620E+00   0.00000E+00   0.00000E+00\n       1    65  EP    3   1.27662E+01   0.00000E+00   0.00000E+00\n\n      BR    PT  TY  LAB    PAR(1)        L2-NORM         U(1)\n       2    59  EP    4   1.28314E+01   1.90442E+00   1.90442E+00\n\n      BR    PT  TY  LAB    PAR(1)        L2-NORM         U(1)\n       2    59  EP    5   1.28314E+01   1.90442E+00  -1.90442E+00\n\n     Total Time    0.530E-02\n    hinged ... done\n\n    ------------------------------------------------------------------------\n\n# pyfurc roadmap:\n\n* Add support for continuous systems (Ritz)\n* Automatic assembly of the Hessian, symbolic determination of critical points\n* Automatic evaluation of the stability of equilibrium paths\n* Expand postprocessing capabilities -->\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/klunkean/pyfurc",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyfurc",
    "package_url": "https://pypi.org/project/pyfurc/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyfurc/",
    "project_urls": {
      "Documentation": "https://pyfurc.readthedocs.io/",
      "Homepage": "https://github.com/klunkean/pyfurc"
    },
    "release_url": "https://pypi.org/project/pyfurc/0.2.4/",
    "requires_dist": [
      "numpy",
      "pandas",
      "sympy",
      "black ; extra == 'dev'",
      "bump2version ; extra == 'dev'",
      "pre-commit ; extra == 'dev'",
      "pytest ; extra == 'dev'",
      "jupyter-sphinx ; extra == 'docs'",
      "pydata-sphinx-theme ; extra == 'docs'",
      "sphinx ; extra == 'docs'",
      "sphinx-lesson ; extra == 'docs'",
      "sphinxcontrib-bibtex ; extra == 'docs'",
      "pytest ; extra == 'test'"
    ],
    "requires_python": ">=3.8",
    "summary": "\"AUTO-07p made accessible through python.\"",
    "version": "0.2.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16407461,
  "releases": {
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "05061f1b08622ede0e98b4bcfc3c1e148bb329747336539a43dca6593b662aff",
          "md5": "92d9b0b994c50f4803ccf3b0e92c796e",
          "sha256": "f83e14aafe6c4f353591f3c718bc61b71658815db0732fdf46b3fbefcadb87fa"
        },
        "downloads": -1,
        "filename": "pyfurc-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "92d9b0b994c50f4803ccf3b0e92c796e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 11095,
        "upload_time": "2021-06-10T14:16:51",
        "upload_time_iso_8601": "2021-06-10T14:16:51.517070Z",
        "url": "https://files.pythonhosted.org/packages/05/06/1f1b08622ede0e98b4bcfc3c1e148bb329747336539a43dca6593b662aff/pyfurc-0.1.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fa814b47fcfa89f2fe63b40278abd81c7cb16252c99e77db26503fe287c22817",
          "md5": "196bdb4836b46c174338eb34bd040c44",
          "sha256": "9e0fdf744ff0c2ae3c890eaf239551c02fcaa2fcea8bd8371de1d59aeab6e0d1"
        },
        "downloads": -1,
        "filename": "pyfurc-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "196bdb4836b46c174338eb34bd040c44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 9871,
        "upload_time": "2021-06-10T14:16:53",
        "upload_time_iso_8601": "2021-06-10T14:16:53.046963Z",
        "url": "https://files.pythonhosted.org/packages/fa/81/4b47fcfa89f2fe63b40278abd81c7cb16252c99e77db26503fe287c22817/pyfurc-0.1.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b5053849f8268cd2ebc7381a1dfc1253e605fa3ffca36e0e0ac164430ab72a56",
          "md5": "c33727470c0b3378f5c7dd01ef768359",
          "sha256": "e9c4c15a128e2df6a1cdcd3321c2887c686653139462b89d935d97e21d166509"
        },
        "downloads": -1,
        "filename": "pyfurc-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c33727470c0b3378f5c7dd01ef768359",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 11859,
        "upload_time": "2021-07-06T10:30:19",
        "upload_time_iso_8601": "2021-07-06T10:30:19.674573Z",
        "url": "https://files.pythonhosted.org/packages/b5/05/3849f8268cd2ebc7381a1dfc1253e605fa3ffca36e0e0ac164430ab72a56/pyfurc-0.1.7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "36352b086b926fb21e231765da5c84720d0c14b1cad596bb039dd0c1e652d6e0",
          "md5": "37d8894c7be98e40cc495f6ea917a807",
          "sha256": "b9bcb963abfba049489b78ef429dbcc692a133636c371d25b64c17d6a2c2955a"
        },
        "downloads": -1,
        "filename": "pyfurc-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "37d8894c7be98e40cc495f6ea917a807",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 10538,
        "upload_time": "2021-07-06T10:30:21",
        "upload_time_iso_8601": "2021-07-06T10:30:21.067761Z",
        "url": "https://files.pythonhosted.org/packages/36/35/2b086b926fb21e231765da5c84720d0c14b1cad596bb039dd0c1e652d6e0/pyfurc-0.1.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b1d7273c1083715a2dfa6dcdfa0cb7a1519ec54c7d40509a347091ad29f90ee8",
          "md5": "f3e7f4d2339befbcacd5aeb864b45397",
          "sha256": "e6f6548c9a998bcd71918ac6f49820dff808b2bdf9b72b1a9e9c1fd332132faf"
        },
        "downloads": -1,
        "filename": "pyfurc-0.2.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "f3e7f4d2339befbcacd5aeb864b45397",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.8",
        "size": 1367893,
        "upload_time": "2022-03-18T14:12:27",
        "upload_time_iso_8601": "2022-03-18T14:12:27.394121Z",
        "url": "https://files.pythonhosted.org/packages/b1/d7/273c1083715a2dfa6dcdfa0cb7a1519ec54c7d40509a347091ad29f90ee8/pyfurc-0.2.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b08b802b607c97223ab210e11d612b9306eaf9b97a1005ecdb23dfaf5bd7cfc8",
          "md5": "4862913afb5b893ab84de9f884c961a9",
          "sha256": "9637b972b9e3e1d7e2a8dcbfac6d94cb4478f468ccc926c1f5b50cc01f900af0"
        },
        "downloads": -1,
        "filename": "pyfurc-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4862913afb5b893ab84de9f884c961a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 4200484,
        "upload_time": "2022-03-18T14:12:29",
        "upload_time_iso_8601": "2022-03-18T14:12:29.421557Z",
        "url": "https://files.pythonhosted.org/packages/b0/8b/802b607c97223ab210e11d612b9306eaf9b97a1005ecdb23dfaf5bd7cfc8/pyfurc-0.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bba87e7b844697b5041f79ce5d29531fd159358385ced38d28f306a7a53909f1",
          "md5": "b49642e03cfc5a7abb3025ac06fed44a",
          "sha256": "a68cfbfc7990fcc67e072caec7974e1a749c57ae768d9e4e21ad24f683abe370"
        },
        "downloads": -1,
        "filename": "pyfurc-0.2.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "b49642e03cfc5a7abb3025ac06fed44a",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.8",
        "size": 1368166,
        "upload_time": "2023-01-12T18:05:58",
        "upload_time_iso_8601": "2023-01-12T18:05:58.371362Z",
        "url": "https://files.pythonhosted.org/packages/bb/a8/7e7b844697b5041f79ce5d29531fd159358385ced38d28f306a7a53909f1/pyfurc-0.2.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22f3b297e3a7cba88aa2f2e62b05c55262d9ade356cf900927be3f899526615f",
          "md5": "961d3fb28672a209997b112cab211f97",
          "sha256": "33f8c5a280ca199a2a657b3508c1e02a7b4750b743c20cd846ce59a6b07cddad"
        },
        "downloads": -1,
        "filename": "pyfurc-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "961d3fb28672a209997b112cab211f97",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 4200664,
        "upload_time": "2023-01-12T18:06:00",
        "upload_time_iso_8601": "2023-01-12T18:06:00.755478Z",
        "url": "https://files.pythonhosted.org/packages/22/f3/b297e3a7cba88aa2f2e62b05c55262d9ade356cf900927be3f899526615f/pyfurc-0.2.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58c515d7c26f45fae69034f247d7b6de23715ba45ad3b4a75eba847c7e30cae2",
          "md5": "c9d785fdf3d0247f64a28aad5861a333",
          "sha256": "1db8ee49ce4b4dd9d0cacaadbdc2ed5ed2dcf16f3db07be24636a3d770af73db"
        },
        "downloads": -1,
        "filename": "pyfurc-0.2.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "has_sig": false,
        "md5_digest": "c9d785fdf3d0247f64a28aad5861a333",
        "packagetype": "bdist_wheel",
        "python_version": "cp38",
        "requires_python": ">=3.8",
        "size": 1368180,
        "upload_time": "2023-01-12T18:05:54",
        "upload_time_iso_8601": "2023-01-12T18:05:54.032729Z",
        "url": "https://files.pythonhosted.org/packages/58/c5/15d7c26f45fae69034f247d7b6de23715ba45ad3b4a75eba847c7e30cae2/pyfurc-0.2.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f4994e1df021bfcb6558a9d8816e39694d026f018d075a75941636ad88b8687",
          "md5": "8bda83c0a0aeef1b02919e26cab8562f",
          "sha256": "613f78a251df4b842348f70381188d0872a84fa58b99f2bb6b24008392334af1"
        },
        "downloads": -1,
        "filename": "pyfurc-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8bda83c0a0aeef1b02919e26cab8562f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 4200729,
        "upload_time": "2023-01-12T18:05:55",
        "upload_time_iso_8601": "2023-01-12T18:05:55.786850Z",
        "url": "https://files.pythonhosted.org/packages/5f/49/94e1df021bfcb6558a9d8816e39694d026f018d075a75941636ad88b8687/pyfurc-0.2.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "58c515d7c26f45fae69034f247d7b6de23715ba45ad3b4a75eba847c7e30cae2",
        "md5": "c9d785fdf3d0247f64a28aad5861a333",
        "sha256": "1db8ee49ce4b4dd9d0cacaadbdc2ed5ed2dcf16f3db07be24636a3d770af73db"
      },
      "downloads": -1,
      "filename": "pyfurc-0.2.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "has_sig": false,
      "md5_digest": "c9d785fdf3d0247f64a28aad5861a333",
      "packagetype": "bdist_wheel",
      "python_version": "cp38",
      "requires_python": ">=3.8",
      "size": 1368180,
      "upload_time": "2023-01-12T18:05:54",
      "upload_time_iso_8601": "2023-01-12T18:05:54.032729Z",
      "url": "https://files.pythonhosted.org/packages/58/c5/15d7c26f45fae69034f247d7b6de23715ba45ad3b4a75eba847c7e30cae2/pyfurc-0.2.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f4994e1df021bfcb6558a9d8816e39694d026f018d075a75941636ad88b8687",
        "md5": "8bda83c0a0aeef1b02919e26cab8562f",
        "sha256": "613f78a251df4b842348f70381188d0872a84fa58b99f2bb6b24008392334af1"
      },
      "downloads": -1,
      "filename": "pyfurc-0.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "8bda83c0a0aeef1b02919e26cab8562f",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8",
      "size": 4200729,
      "upload_time": "2023-01-12T18:05:55",
      "upload_time_iso_8601": "2023-01-12T18:05:55.786850Z",
      "url": "https://files.pythonhosted.org/packages/5f/49/94e1df021bfcb6558a9d8816e39694d026f018d075a75941636ad88b8687/pyfurc-0.2.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}