{
  "info": {
    "author": "Jordi collell",
    "author_email": "jordic@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# FastAPI AsyncPG\n\nFastAPI integration for AsyncPG\n\n## Narrative\n\nFirst of all, so sorry for my poor english. I will be so happy,\nif someone pushes a PR correcting all my english mistakes. Anyway\nI will try to do my best.\n\nLooking at fastapi ecosystem seems like everyone is trying to integrate\nfastapi with orms, but from my experience working with raw\nsql I'm so productive.\n\nIf you think a bit around, your real model layer, is the schema on your\ndb (you can add abastractions on top of it), but what ends\nis your data, and these are tables, columns and rows.\n\nAlso, sql, it's one of the best things I learned\nbecause it's something that always is there.\n\nOn another side, postgresql it's robust and rock solid,\nthousands of projects depend on it, and use it as their storage layer.\nAsyncPG it's a crazy fast postgresql driver\nwritten from scratch.\n\nFastAPI seems like a clean, and developer productive approach to web\nframeworks. It's crazy how well it integrates with OpenAPI,\nand how easy makes things to a developer to move on.\n\n## Integration\n\nfastapi_asyncpg trys to integrate fastapi and asyncpg in an idiomatic way.\nfastapi_asyncpg when configured exposes two injectable providers to\nfastapi path functions, can use:\n\n- `db.connection` : it's just a raw connection picked from the pool,\n  that it's auto released when pathfunction ends, this is mostly\n  merit of the DI system around fastapi.\n\n- `db.transaction`: the same, but wraps the pathfuncion on a transaction\n  this is more or less the same than the `atomic` decorator from Django.\n  also `db.atomic` it's aliased\n\n```python\nfrom fastapi import FastAPI\nfrom fastapi import Depends\nfrom fastapi_asyncpg import configure_asyncpg\n\napp = FastAPI()\n# we need to pass the fastapi app to make use of lifespan asgi events\ndb = configure_asyncpg(app, \"postgresql://postgres:postgres@localhost/db\")\n\n@db.on_init\nasync def initialization(conn):\n    # you can run your db initialization code here\n    await conn.execute(\"SELECT 1\")\n\n\n@app.get(\"/\")\nasync def get_content(db=Depends(db.connection)):\n    rows = await db.fetch(\"SELECT wathever FROM tablexxx\")\n    return [dict(r) for r in rows]\n\n@app.post(\"/\")\nasync def mutate_something_compled(db=Depends(db.atomic))\n    await db.execute()\n    await db.execute()\n    # if something fails, everyting is rolleback, you know all or nothing\n```\n\nAnd there's also an `initialization` callable on the main factory function.\nThat can be used like in flask to initialize whatever you need on the db.\nThe `initialization` is called right after asyncpg stablishes a connection,\nand before the app fully boots. (Some projects use this as a poor migration\nrunner, not the best practice if you are deploying multiple\ninstances of the app).\n\n## Testing\n\nFor testing we use [pytest-docker-fixtures](https://pypi.org/project/pytest-docker-fixtures/), it requires docker on the host machine or on whatever CI you use\n(seems like works as expected with github actions)\n\nIt works, creating a container for the session and exposing it as pytest fixture.\nIt's a good practice to run tests with a real database, and\npytest-docker-fixtures make it's so easy. As a bonus, all fixtures run on a CI.\nWe use Jenkins witht docker and docker, but also seems like travis and github actions\nalso work.\n\nThe fixture needs to be added to the pytest plugins `conftest.py` file.\n\non conftest.py\n\n```python\npytest_plugins = [\n    \"pytest_docker_fixtures\",\n]\n```\n\nWith this in place, we can just yield a pg fixture\n\n```python\nfrom pytest_docker_fixtures import images\n\n# image params can be configured from here\nimages.configure(\n    \"postgresql\", \"postgres\", \"11.1\", env={\"POSTGRES_DB\": \"test_db\"}\n)\n\n# and then on our test we have a pg container running\n# ready to recreate our db\nasync def test_pg(pg):\n    host, port = pg\n    dsn = f\"postgresql://postgres@{host}:{port}/test_db\"\n    await asyncpg.Connect(dsn=dsn)\n    # let's go\n\n```\n\nWith this in place, we can just create our own pytest.fixture that\n_patches_ the app dsn to make it work with our custom created\ncontainer.\n\n````python\n\nfrom .app import app, db\nfrom async_asgi_testclient import TestClient\n\nimport pytest\n\npytestmark = pytest.mark.asyncio\n\n@pytest.fixture\nasync def asgi_app(pg)\n    host, port = pg\n    dsn = f\"postgresql://postgres@{host}:{port}/test_db\"\n    # here we patch the dsn for the db\n    # con_opts: are also accessible\n    db.dsn = dsn\n    yield app, db\n\nasync def test_something(asgi_app):\n    app, db = asgi_app\n    async with db.pool.acquire() as db:\n        # setup your test state\n\n    # this context manager handlers lifespan events\n    async with TestClient(app) as client:\n        res = await client.request(\"/\")\n```\n\nAnyway if the application will grow, to multiples subpackages,\nand apps, we trend to build the main app as a factory, that\ncreates it, something like:\n\n```python\nfrom fastapi_asyncpg import configure_asyncpg\nfrom apppackage import settings\n\nimport venusian\n\ndef make_asgi_app(settings):\n    app = FastAPI()\n    db = configure_asyncpg(settings.DSN)\n\n    scanner = venusian.Scanner(app=app)\n    venusian.scan(theapp)\n    return app\n````\n\nThen on the fixture, we just need, to factorze and app from our function\n\n```python\n\nfrom .factory import make_asgi_app\nfrom async_asgi_testclient import TestClient\n\nimport pytest\n\npytestmark = pytest.mark.asyncio\n\n@pytest.fixture\nasync def asgi_app(pg)\n    host, port = pg\n    dsn = f\"postgresql://postgres@{host}:{port}/test_db\"\n    app = make_asgi_app({\"dsn\": dsn})\n    # ther's a pointer on the pool into app.state\n    yield app\n\nasync def test_something(asgi_app):\n    app = asgi_app\n    pool = app.state.pool\n    async with db.pool.acquire() as db:\n        # setup your test state\n\n    # this context manager handlers lifespan events\n    async with TestClient(app) as client:\n        res = await client.request(\"/\")\n\n```\n\nThere's also another approach exposed and used on [tests](tests/test_db.py),\nthat exposes a single connection to the test and rolls back changes on end.\nWe use this approach on a large project (500 tables per schema and\nmultiples schemas), and seems like it speeds up a bit test creation.\nThis approach is what [Databases](https://www.encode.io/databases/) it's using.\nFeel free to follow the tests to see if it feets better.\n\n## Extras\n\nThere are some utility functions I daily use with asyncpg that helps me\nspeed up some sql operations like, they are all on sql.py, and mostly are\nself documented. They are in use on tests.\n\n### Authors\n\n`fastapi_asyncpg` was written by `Jordi collell <jordic@gmail.com>`\\_.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/jordic/fastapi_asyncpg",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fastapi-asyncpg",
    "package_url": "https://pypi.org/project/fastapi-asyncpg/",
    "platform": "",
    "project_url": "https://pypi.org/project/fastapi-asyncpg/",
    "project_urls": {
      "Homepage": "https://github.com/jordic/fastapi_asyncpg"
    },
    "release_url": "https://pypi.org/project/fastapi-asyncpg/1.0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "FastAPI integration for asyncpg",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8968080,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5d2eb02689d16a90173b21a0afb72e7a077a1d4b93b556a7e7f88d320e2d7046",
          "md5": "a5b225ddd444687c53890c1ecd46c22a",
          "sha256": "febbc5a46f3b5dcc35e7c2688182306298fe79703077c52fc83639c937d35218"
        },
        "downloads": -1,
        "filename": "fastapi_asyncpg-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a5b225ddd444687c53890c1ecd46c22a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4939,
        "upload_time": "2020-12-19T20:04:10",
        "upload_time_iso_8601": "2020-12-19T20:04:10.487711Z",
        "url": "https://files.pythonhosted.org/packages/5d/2e/b02689d16a90173b21a0afb72e7a077a1d4b93b556a7e7f88d320e2d7046/fastapi_asyncpg-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5a9a23d2a4755e66024d49c36fe5ebd1477b014ecd0baac26c67f0b22ca71f9",
          "md5": "42ec9189f2e1ce06d8a077e49d83ac0d",
          "sha256": "bd09b359a4fef8a32b59a12b5f075c5678e462b84d931d0be433968aaa7cc756"
        },
        "downloads": -1,
        "filename": "fastapi_asyncpg-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "42ec9189f2e1ce06d8a077e49d83ac0d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8953,
        "upload_time": "2020-12-23T06:46:46",
        "upload_time_iso_8601": "2020-12-23T06:46:46.097460Z",
        "url": "https://files.pythonhosted.org/packages/f5/a9/a23d2a4755e66024d49c36fe5ebd1477b014ecd0baac26c67f0b22ca71f9/fastapi_asyncpg-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5a9a23d2a4755e66024d49c36fe5ebd1477b014ecd0baac26c67f0b22ca71f9",
        "md5": "42ec9189f2e1ce06d8a077e49d83ac0d",
        "sha256": "bd09b359a4fef8a32b59a12b5f075c5678e462b84d931d0be433968aaa7cc756"
      },
      "downloads": -1,
      "filename": "fastapi_asyncpg-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "42ec9189f2e1ce06d8a077e49d83ac0d",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8953,
      "upload_time": "2020-12-23T06:46:46",
      "upload_time_iso_8601": "2020-12-23T06:46:46.097460Z",
      "url": "https://files.pythonhosted.org/packages/f5/a9/a23d2a4755e66024d49c36fe5ebd1477b014ecd0baac26c67f0b22ca71f9/fastapi_asyncpg-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}