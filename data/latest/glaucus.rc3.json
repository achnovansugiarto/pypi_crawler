{
  "info": {
    "author": "Kyle Logue",
    "author_email": "kyle.logue@aero.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![Glaucus Atlanticus](https://upload.wikimedia.org/wikipedia/commons/thumb/2/21/Glaucus_atlanticus_1_cropped.jpg/247px-Glaucus_atlanticus_1_cropped.jpg)\n\n# Glaucus\n\nThe Aerospace Corporation is proud to present our complex-valued encoder,\ndecoder, and a new loss function for RF DSP in PyTorch.\n\n## Video (click to play)\n\n[<img src=\"https://i.vimeocdn.com/video/1583946742-851ad3621192f133ca667bc87f4050276e450fcc721f117bbcd93b67cb0535f8-d_1000\">](https://vimeo.com/787670661/ce13da4cd9)\n\n## Using\n\n### Install\n\n* via PyPI: `pip install glaucus`\n* via source: `pip install .`\n\n### Testing\n\n* `coverage run -a --source=glaucus -m pytest --doctest-modules; coverage html`\n* `pytest .`\n\n### Use pre-trained model with SigMF data\n\nLoad quantized model and return compressed signal vector & reconstruction.\nOur weights were trained & evaluated on a corpus of 200 GB of RF waveforms with\nvarious added RF impairments for a 1 PB training set.\n\n```python\nimport torch\nimport sigmf\nfrom glaucus import GlaucusAE\n\n# create model\nmodel = GlaucusAE(bottleneck_quantize=True, data_format='nl')\nmodel = torch.quantization.prepare(model)\n# get weights for quantized model\nstate_dict = torch.hub.load_state_dict_from_url(\n    'https://github.com/the-aerospace-corporation/glaucus/releases/download/v1.1.0/glaucus-512-3275-5517642b.pth',\n    map_location='cpu')\nmodel.load_state_dict(state_dict)\n# prepare for prediction\nmodel.eval()\ntorch.quantization.convert(model, inplace=True)\n# get samples into NL tensor\nx_sigmf = sigmf.sigmffile.fromfile('example.sigmf')\nx_tensor = torch.from_numpy(x_sigmf.read_samples())\n# create prediction & quint8 signal vector\ny_tensor, y_encoded = model(x_samples)\n# get signal vector as uint8\ny_encoded_uint8 = torch.int_repr(y_encoded)\n```\n\n#### Higher-accuracy pre-trained model\n```python\n# define architecture\nimport torch\nfrom glaucus import blockgen, GlaucusAE\n\nencoder_blocks = blockgen(steps=6, spatial_in=4096, spatial_out=16, filters_in=2, filters_out=64, mode='encoder')\ndecoder_blocks = blockgen(steps=6, spatial_in=16, spatial_out=4096, filters_in=64, filters_out=2, mode='decoder')\n# create model\nmodel = GlaucusAE(encoder_blocks, decoder_blocks, bottleneck_in=1024, bottleneck_out=1024, bottleneck_quantize=True, data_format='nl')\nmodel = torch.quantization.prepare(model)\n# get weights for quantized model\nstate_dict = torch.hub.load_state_dict_from_url(\n    'https://github.com/the-aerospace-corporation/glaucus/releases/download/v1.1.0/glaucus-1024-761-c49063fd.pth',\n    map_location='cpu')\nmodel.load_state_dict(state_dict)\n# see above for rest\n```\n\n### Get loss between two RF signals\n\n```python\nimport np\nimport torch\nimport glaucus\n\n# create criterion\nloss = glaucus.RFLoss(spatial_size=128, data_format='nl')\n\n# create some signal\nxxx = torch.randn(128, dtype=torch.complex64)\n# alter signal with 1% freq offset\nyyy = xxx * np.exp(1j * 2 * np.pi * 0.01 * np.arange(128))\n\n# return loss\nloss(xxx, yyy)\n```\n\n### Train model with TorchSig\n\n*partially implemented pending update or replace with notebook example*\n\n```python\nimport lightning as pl\nfrom glaucus import GlaucusAE\n\nmodel = GlaucusAE(data_format='nl')\n\n# this takes a very long time if no cache is available\nsignal_data = torchsig.datasets.Sig53(root=str(cache_path))\n# 80 / 10 / 10 split\ntrain_dataset, val_dataset, test_dataset = torch.utils.data.random_split(\n    signal_data,\n    (len(signal_data)*np.array([0.8, 0.1, 0.1])).astype(int),\n    generator=torch.Generator().manual_seed(0xcab005e)\n)\nclass RFDataModule(pl.LightningDataModule):\n    '''\n    defines the dataloaders for train, val, test and uses datasets\n    '''\n    def __init__(self, train_dataset=None, val_dataset=None, test_dataset=None,\n                 num_workers=16, batch_size=32):\n        super().__init__()\n        self.batch_size = batch_size\n        self.num_workers = num_workers\n        self.train_dataset = train_dataset\n        self.val_dataset = val_dataset\n        self.test_dataset = test_dataset\n\n    def train_dataloader(self):\n        return DataLoader(self.train_dataset, num_workers=self.num_workers, batch_size=self.batch_size, shuffle=True, pin_memory=True)\n    def val_dataloader(self):\n        return DataLoader(self.val_dataset, num_workers=self.num_workers, batch_size=self.batch_size, shuffle=False, pin_memory=True)\n    def test_dataloader(self):\n        return DataLoader(self.test_dataset, num_workers=self.num_workers, batch_size=self.batch_size, shuffle=False, pin_memory=True)\n\nloader = RFDataModule(\n    train_dataset=train_dataset,\n    val_dataset=val_dataset,\n    test_dataset=test_dataset,\n    batch_size=batch_size, num_workers=num_workers)\n\ntrainer = pl.Trainer()\ntrainer.fit(model, loader)\n\n# rewind to best checkpoint\nmodel.load_from_checkpoint(trainer.checkpoint_callback.best_model_path, strict=False)\n```\n\n## Pre-trained Model List\n\n| desc      | link                                                                                                                                     | size (MB) | params (M) | multiadds (M) | provenance                                                    |\n|-----------|------------------------------------------------------------------------------------------------------------------------------------------|-----------|------------|---------------|---------------------------------------------------------------|\n| fastest   | [glaucus-512-3275-5517642b](https://github.com/the-aerospace-corporation/glaucus/releases/download/v1.1.0/glaucus-512-3275-5517642b.pth) | 8.5       | 2.030 M    | 259           | .009 pfs-days on modulation-only Aerospace DSet               |\n| accurate  | [glaucus-1024-761-c49063fd](https://github.com/the-aerospace-corporation/glaucus/releases/download/v1.1.0/glaucus-1024-761-c49063fd.pth) | 11        | 2.873 M    | 380           | .035 pfs-days modulation & general waveform Aerospace Dset    |\n| -pending- |                                                                                                                                          | 8.5       | 2.030      | 380           | transfer learning from glaucus-1024-761-c49063fd w/Sig53 Dset |\n\n### Note on pfs-days\n\nPer [OpenAI appendix](https://openai.com/blog/ai-and-compute/#appendixmethods) here is the correct math (method 1):\n\n* `pfs_days` = (add-multiplies per forward pass) * (2 FLOPs/add-multiply) * (3 for forward and backward pass) * (number of examples in dataset) * (number of epochs) / (flop per petaflop) / (seconds per day)\n* (number of examples in dataset) * (number of epochs) = steps * batchsize\n* 1 `pfs-day` ≈ (8x V100 GPUs at 100% efficiency for 1 day) ≈ (100x GTX1080s at 100% efficiency for 1 day) ≈ (35x GTX 2080s at 100% efficiency for 1 day) ≈ [500 kWh](https://twitter.com/id_aa_carmack/status/1192513743974019072)\n\n## Papers\n\nThis code is documented by the two following IEEE publications.\n\n### Glaucus: A Complex-Valued Radio Signal Autoencoder\n\nA complex-valued autoencoder neural network capable of compressing & denoising radio frequency (RF) signals with arbitrary model scaling is proposed. Complex-valued time samples received with various impairments are decoded into an embedding vector, then encoded back into complex-valued time samples. The embedding and the related latent space allow search, comparison, and clustering of signals. Traditional signal processing tasks like specific emitter identification, geolocation, or ambiguity estimation can utilize multiple compressed embeddings simultaneously. This paper demonstrates an autoencoder implementation capable of 64x compression hardened against RF channel impairments. The autoencoder allows separate or compound scaling of network depth, width, and resolution to target both embedded and data center deployment with differing resources. The common building block is inspired by the Fused Inverted Residual Block (Fused-MBConv), popularized by EfficientNetV2 \\& MobileNetV3, with kernel sizes more appropriate for time-series signal processing\n\n### Complex-Valued Radio Signal Loss for Neural Networks\n\nA new optimized loss for training complex-valued neural networks that require reconstruction of radio signals is proposed. Given a complex-valued time series this method incorporates loss from spectrograms with multiple aspect ratios, cross-correlation loss, and loss from amplitude envelopes in the time \\& frequency domains. When training a neural network an optimizer will observe batch loss and backpropagate this value through the network to determine how to update the model parameters. The proposed loss is robust to typical radio impairments and co-channel interference that would explode a naive mean-square-error approach. This robust loss enables higher quality steps along the loss surface which enables training of models specifically designed for impaired radio input. Loss vs channel impairment is shown in comparison to mean-squared error for an ensemble of common channel effects.\n\n## Contributing\n\nDo you have code you would like to contribute to this Aerospace project?\n\nWe are excited to work with you. We are able to accept small changes\nimmediately and require a Contributor License Agreement (CLA) for larger\nchangesets. Generally documentation and other minor changes less than 10 lines\ndo not require a CLA. The Aerospace Corporation CLA is based on the well-known\n[Harmony Agreements CLA](http://harmonyagreements.org/) created by Canonical,\nand protects the rights of The Aerospace Corporation, our customers, and you as\nthe contributor. [You can find our CLA here](https://aerospace.org/sites/default/files/2020-12/Aerospace-CLA-2020final.pdf).\n\nPlease complete the CLA and send us the executed copy. Once a CLA is on file we\ncan accept pull requests on GitHub or GitLab. If you have any questions, please\ne-mail us at [oss@aero.org](mailto:oss@aero.org).\n\n## Licensing\n\nThe Aerospace Corporation supports Free & Open Source Software and we publish\nour work with GPL-compatible licenses. If the license attached to the project\nis not suitable for your needs, our projects are also available under an\nalternative license. An alternative license can allow you to create proprietary\napplications around Aerospace products without being required to meet the\nobligations of the GPL. To inquire about an alternative license, please get in\ntouch with us at [oss@aero.org](mailto:oss@aero.org).\n\n## To-Do\n\n* once DOI assigned to papers\n    * insert DOI links like [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.5806615.svg)](https://doi.org/10.5281/zenodo.5806615)\n    * update `CITATION.cff`\n* allow `pretrained_weights` during model init\n* upload training notebook\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/the-aerospace-corporation/glaucus",
    "keywords": "",
    "license": "GNU Lesser General Public License v3 or later (LGPLv3+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "glaucus",
    "package_url": "https://pypi.org/project/glaucus/",
    "platform": null,
    "project_url": "https://pypi.org/project/glaucus/",
    "project_urls": {
      "Homepage": "https://github.com/the-aerospace-corporation/glaucus"
    },
    "release_url": "https://pypi.org/project/glaucus/1.1.2/",
    "requires_dist": [
      "torch",
      "lightning",
      "madgrad",
      "hypothesis"
    ],
    "requires_python": "",
    "summary": "Complex-valued encoder, decoder, and loss for RF DSP in PyTorch.",
    "version": "1.1.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17365697,
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cf8463f7080e0ecbc7f84a40194f7840378eda15c887ad5cd2c6bca018f4afb",
          "md5": "e952e521d21a65cf95ed63506a12c760",
          "sha256": "141f5bc6e7158bc990cc3d6804112de1f8f68da79b12008bcc22c03ead28f595"
        },
        "downloads": -1,
        "filename": "glaucus-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e952e521d21a65cf95ed63506a12c760",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23064,
        "upload_time": "2023-03-02T19:47:26",
        "upload_time_iso_8601": "2023-03-02T19:47:26.362209Z",
        "url": "https://files.pythonhosted.org/packages/7c/f8/463f7080e0ecbc7f84a40194f7840378eda15c887ad5cd2c6bca018f4afb/glaucus-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2f40900643c132d2b60fd979bd819db1731f5008300555d8ca43619e515a225f",
          "md5": "3d401dd8fe4e93f8f470c8cbfd2767b4",
          "sha256": "bc7d6ba3b09ae1afc454c6e1266fc729732830f0f0bb794f4b369278c6474003"
        },
        "downloads": -1,
        "filename": "glaucus-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3d401dd8fe4e93f8f470c8cbfd2767b4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 26537,
        "upload_time": "2023-03-02T19:47:28",
        "upload_time_iso_8601": "2023-03-02T19:47:28.697445Z",
        "url": "https://files.pythonhosted.org/packages/2f/40/900643c132d2b60fd979bd819db1731f5008300555d8ca43619e515a225f/glaucus-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "87690445d43c7bdb03e7e1a1b7481c8c16e88d3e153b2234e45c73ecb8cccbab",
          "md5": "c31b78bb34a4216bf349ecc8dce26aba",
          "sha256": "37d22b041d6ff5b3090ddc16615d806b0a765baab079a52ff273808d203240f2"
        },
        "downloads": -1,
        "filename": "glaucus-1.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c31b78bb34a4216bf349ecc8dce26aba",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 23960,
        "upload_time": "2023-03-03T01:10:59",
        "upload_time_iso_8601": "2023-03-03T01:10:59.763578Z",
        "url": "https://files.pythonhosted.org/packages/87/69/0445d43c7bdb03e7e1a1b7481c8c16e88d3e153b2234e45c73ecb8cccbab/glaucus-1.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b154a2e47b76c24a1b281b211440e1ef11a7f3d99b3938c18da0a1b56e01f02",
          "md5": "ef0bef1d27f7bd76e5c6bc82c5fa320a",
          "sha256": "917df4cacdad56089b193b843d83461f5e1f060f0e1b6363251027020e94f8a4"
        },
        "downloads": -1,
        "filename": "glaucus-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ef0bef1d27f7bd76e5c6bc82c5fa320a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28283,
        "upload_time": "2023-03-03T01:11:02",
        "upload_time_iso_8601": "2023-03-03T01:11:02.857725Z",
        "url": "https://files.pythonhosted.org/packages/9b/15/4a2e47b76c24a1b281b211440e1ef11a7f3d99b3938c18da0a1b56e01f02/glaucus-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3b4eaede8eca852fc071cf64b8db03285dd12fbd669ee71d4b015557a860821",
          "md5": "17592a53916e408c62ca4c5e79a9f0a2",
          "sha256": "2a4711a45ce329671357d2cf23a76de58e6c03f4890145341e0374cea7323d68"
        },
        "downloads": -1,
        "filename": "glaucus-1.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17592a53916e408c62ca4c5e79a9f0a2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 24185,
        "upload_time": "2023-03-20T15:47:23",
        "upload_time_iso_8601": "2023-03-20T15:47:23.893783Z",
        "url": "https://files.pythonhosted.org/packages/e3/b4/eaede8eca852fc071cf64b8db03285dd12fbd669ee71d4b015557a860821/glaucus-1.1.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3a200f64e9aa4352421a023a8f9b3e4ce599ed519fc44b155ff461f5708abddc",
          "md5": "864c029d238d5335a30bbb39048ee7e9",
          "sha256": "1f7c4ec51f73922ebe37cf68b31d9d321e6763b0937abf44368056c1614ab20d"
        },
        "downloads": -1,
        "filename": "glaucus-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "864c029d238d5335a30bbb39048ee7e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 28621,
        "upload_time": "2023-03-20T15:47:26",
        "upload_time_iso_8601": "2023-03-20T15:47:26.422516Z",
        "url": "https://files.pythonhosted.org/packages/3a/20/0f64e9aa4352421a023a8f9b3e4ce599ed519fc44b155ff461f5708abddc/glaucus-1.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e3b4eaede8eca852fc071cf64b8db03285dd12fbd669ee71d4b015557a860821",
        "md5": "17592a53916e408c62ca4c5e79a9f0a2",
        "sha256": "2a4711a45ce329671357d2cf23a76de58e6c03f4890145341e0374cea7323d68"
      },
      "downloads": -1,
      "filename": "glaucus-1.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "17592a53916e408c62ca4c5e79a9f0a2",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 24185,
      "upload_time": "2023-03-20T15:47:23",
      "upload_time_iso_8601": "2023-03-20T15:47:23.893783Z",
      "url": "https://files.pythonhosted.org/packages/e3/b4/eaede8eca852fc071cf64b8db03285dd12fbd669ee71d4b015557a860821/glaucus-1.1.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3a200f64e9aa4352421a023a8f9b3e4ce599ed519fc44b155ff461f5708abddc",
        "md5": "864c029d238d5335a30bbb39048ee7e9",
        "sha256": "1f7c4ec51f73922ebe37cf68b31d9d321e6763b0937abf44368056c1614ab20d"
      },
      "downloads": -1,
      "filename": "glaucus-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "864c029d238d5335a30bbb39048ee7e9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 28621,
      "upload_time": "2023-03-20T15:47:26",
      "upload_time_iso_8601": "2023-03-20T15:47:26.422516Z",
      "url": "https://files.pythonhosted.org/packages/3a/20/0f64e9aa4352421a023a8f9b3e4ce599ed519fc44b155ff461f5708abddc/glaucus-1.1.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}