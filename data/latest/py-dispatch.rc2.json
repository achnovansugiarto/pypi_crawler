{
  "info": {
    "author": "Harrison Brown",
    "author_email": "harrybrown98@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# dispatch\n[![pypi](https://img.shields.io/pypi/v/py-dispatch.svg)](https://pypi.python.org/pypi/py-dispatch)\n\nA low information-redundancy CLI framework for a quick and dirty way of converting python a script to a command line tool.\n\nThe idea behind this framework is that functions and classes have one-to-one correspondence to command line interfaces with functions as commands and arguments as flags. This framework allows users to define a function or a class in plain python and turn it into a CLI with one decorator.\n\nThis was inspired by [fire](https://github.com/google/python-fire) and [click](https://click.palletsprojects.com/).\n\n## Install\n```\npip install py-dispatch\n```\n\n## Demo\n[docs.python]: # (grep -Pzo \"[[?s]]# example\\.py.*[[?=#end example\\.py]]\" example.py | tr -d '\\0')\n```python\n# example.py\nimport sys\nfrom dispatch import command\n\n@command\ndef hello(name: str, verbose: bool, debug: bool, file: str = 'stdout'):\n    '''Run the 'hello' command line interface.\n\n    :v verbose: Run the command verbosly\n    :name: Name of the person you are saying hello to.\n    :file: Either stdout or stderr\n    '''\n    if debug:\n        print(f'debugging with {name}', file=getattr(sys, file))\n    else:\n        print(f'hello, {name}', file=getattr(sys, file))\n\nif __name__ == '__main__':\n    hello()\n```\n\n```\n$ python example.py --help\n```\n\n[docs]: # (python example.py --help)\n```\nRun the 'hello' command line interface.\n\nUsage:\n    hello [options]\n\nOptions:\n        --name      Name of the person you are saying hello to.\n    -v, --verbose   Run the command verbosly\n        --debug\n        --file      Either stdout or stderr (default: 'stdout')\n    -h, --help      Get help.\n```\n\nArguments\n---------\nArguments can be retrieved in two ways, either from Command.args or with positional only arguments. When a cli function is run, it is replaced with a Command object so the cli function can use the command in it's own body.\n```python\n@dispatch.command\ndef cli(verbose: bool):\n    print(cli.args)\n```\nRunning this cli with `python cli.py hello --verbose these are some args` will result in `['hello', 'these', 'are', 'some', 'args']`.\n\nThe Other way to get arguments is to give the cli function a positional only argument at the beginning of the parameters list.\n```python\n@dispatch.command\ndef cli(*args, verbose: bool):\n    print(args)\n```\nRunning this cli as before will have the same result. However, it only works when the args tuple is the first function parameter.\n\nProperties of Flags\n===================\nBecause flags are specified by function arguments, the properties of flags are a little bit weird.\n\nBoolean Flags\n-------------\nAll boolean flags have a default of `False`.\n\nA positional argument with no default and no type annotation is assumed to be a boolean flag and will default to a value of `False`.\n```python\n@disptch.command\ndef cli(verbose):\n    if verbose:\n        print('the verbose flag has been given')\n    else:\n        print('using default of False for verbose')\n```\n\nFlag Types\n----------\nDispatch uses type annotations to infer flag types and will use those annotations to convert the arguments given.\n```python\n@dispatch.command\ndef cli(num: complex, decimal: float):\n    pass\n```\nWhen the program `cli.py` is executed it will convert each argument to its type.\n```bash\npython cli.py --num=5+3j --decimal=5.9\n```\nFor this command, the parser internals will eventually call `complex('5+3j')` and `float('5.9')` before giving the values as function arguments.\nWhat this means is that you can use any type as long it has an `__init__` function that takes one argument. If a flag is given a default value and no type annotation, the flag will inherit whatever type is given as default.\n\nDefault Values\n--------------\n```python\n@dispatch.command(hidden_defaults={'one', 'two'})\ndef cli(one=1, two=2, other_stuff=None): pass\n```\nTo specify a default value, simply set the function argument as you would with regular python code. The default values will be displayed in the help view of the command unless a `set` of type `str` is passed to the decorator as the 'hidden_defaults' argument. This will hide any default values from the help message. Falsy defaults that are non-boolean like an empty string will also be hidden.\n\n\nMultiple Commands\n=================\nFor more complicated command line interfaces, you need more than just flags. To do this you simply use the same `command` decorator on a class instead of a function.\n\n[docs.python]: # (cat multicommand.py)\n```python\n# multicommand.py\nfrom dispatch import command\n\n@command\nclass multicommand:\n    ''':v verbose: print stuff verbosly'''\n\n    verbose: bool\n    filename = 'README.md'\n\n    def cat(self, file: str):\n        '''Print a file\n\n        :f file: print this file'''\n        if self.verbose:\n            print('doing the thing verbosly')\n        print(open(file, 'r').read())\n\n    def do(self, thing):\n        '''Do a thing\n\n        :thing: the thing you will be doing'''\n        print('doing', thing)\n\n    def _helper(self):\n        '''functions that start with an underscore are not\n        interpreted as commands (not even hidden commands).\n        '''\n        pass\n\nif __name__ == \"__main__\":\n    multicommand()\n```\n\nThis small program is used just like any other cli.\n```bash\npython multicommand.py --help\n```\n\n[docs]: # (python multicommand.py --help)\n```\nUsage:\n    multicommand [options] [command]\n\nCommands:\n    cat   Print a file\n    do    Do a thing\n\nOptions:\n        --filename   default: 'README.md'\n    -v, --verbose    print stuff verbosly\n    -h, --help       Get help.\n```\n\nGroup Flags\n------------\nYou can define flags that are used at a class level and can be accessed by all commands in the cli. To do this you can set a class variable or you can use a type annotation if you do not want the flag to have a default value. When retrieving the value of these flags you can simply use them like any class attribute with `self.attr_name`.\n```python\n@dispatch.command\nclass cli:\n    verbose: bool\n    filename = 'notes.txt'\n```\n\nCommand Aliases\n---------------\nAliasing commands is really simple. All you need to do is assign the function you want to alias to another variable inside the class.\n```python\n@dispatch.command\nclass cli:\n    def command(self):\n        '''This is a command.'''\n        pass\n\n    cmd = command\n```\n\n```\nUsage:\n    cli [options] [command]\n\nOptions:\n    -h, --help   Get help.\n\nCommands:\n    command, cmd   This is a command.\n```",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/harrybrwn/dispatch/archive/v0.0.3.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/harrybrwn/dispatch",
    "keywords": "command line,cli,framework,tool,simple",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-dispatch",
    "package_url": "https://pypi.org/project/py-dispatch/",
    "platform": "",
    "project_url": "https://pypi.org/project/py-dispatch/",
    "project_urls": {
      "Download": "https://github.com/harrybrwn/dispatch/archive/v0.0.3.tar.gz",
      "Homepage": "https://github.com/harrybrwn/dispatch"
    },
    "release_url": "https://pypi.org/project/py-dispatch/0.0.3/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A low information-redundancy cli framework.",
    "version": "0.0.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6900757,
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29bf2618319a7aac7ca2fdc33febe214b0952015573c81fa9b1208f77c4ab640",
          "md5": "f0b1a5957dc97ddbc9a621903946c1cc",
          "sha256": "8a5db24227c92fe025ca0b1aa9d80d80a21fcca7f1161c23baff1ada876e50a8"
        },
        "downloads": -1,
        "filename": "py-dispatch-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f0b1a5957dc97ddbc9a621903946c1cc",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8921,
        "upload_time": "2019-12-10T18:24:39",
        "upload_time_iso_8601": "2019-12-10T18:24:39.231489Z",
        "url": "https://files.pythonhosted.org/packages/29/bf/2618319a7aac7ca2fdc33febe214b0952015573c81fa9b1208f77c4ab640/py-dispatch-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81531e7a123b438242d9feb74c350b70939cfc2754471adcead174fbd3f010b3",
          "md5": "c7a7d20f35f37723be3bd4384d989410",
          "sha256": "9b4261e713cd4b6d1b41e52a1f94c44319839862fe2362612091e8f9ff98becb"
        },
        "downloads": -1,
        "filename": "py-dispatch-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c7a7d20f35f37723be3bd4384d989410",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 15643,
        "upload_time": "2020-03-28T07:26:37",
        "upload_time_iso_8601": "2020-03-28T07:26:37.957587Z",
        "url": "https://files.pythonhosted.org/packages/81/53/1e7a123b438242d9feb74c350b70939cfc2754471adcead174fbd3f010b3/py-dispatch-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81531e7a123b438242d9feb74c350b70939cfc2754471adcead174fbd3f010b3",
        "md5": "c7a7d20f35f37723be3bd4384d989410",
        "sha256": "9b4261e713cd4b6d1b41e52a1f94c44319839862fe2362612091e8f9ff98becb"
      },
      "downloads": -1,
      "filename": "py-dispatch-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "c7a7d20f35f37723be3bd4384d989410",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 15643,
      "upload_time": "2020-03-28T07:26:37",
      "upload_time_iso_8601": "2020-03-28T07:26:37.957587Z",
      "url": "https://files.pythonhosted.org/packages/81/53/1e7a123b438242d9feb74c350b70939cfc2754471adcead174fbd3f010b3/py-dispatch-0.0.3.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}