{
  "info": {
    "author": "Ulf Hamster",
    "author_email": "554c46@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "|PyPI version| |Total alerts| |Language grade: Python|\n\nnode-distance\n=============\n\nCompute distance between all nodes of a tree, and estimate an histogram\nthat can be used as features for other models.\n\nToy Text Corpus\n---------------\n\n.. code:: py\n\n   corpus = \"Als Ada Lovelace auf einem Ball den Mathematiker Charles Babbage traf, der sie einlud, die von ihm erfundene „Differenzmaschine“ anzusehen, war sie hellauf begeistert. Die Maschine konnte selbstständig addieren und subtrahieren, doch Ada war klar, dass die Möglichkeiten damit noch lange nicht erschöpft waren. Sie träumte davon, dass eine solche Maschine eines Tages sogar Musik abspielen könnte, und ersann so die Idee eines modernen Computers. 1845 legte sie den ersten Algorithmus zur maschinellen Berechnung der Bernoulli-Zahlen vor und wird daher von vielen als erste Computerprogrammiererin der Welt gefeiert.\"\n\n(Source: DWDS, Wort des Tages, “Algorithmus, der”, 27.11.2021, URL:\nhttps://www.dwds.de/adt )\n\nExtract the graph edges from a dependency tree with SpaCy/Stanza/Trankit\n------------------------------------------------------------------------\n\n-  We assume that NodeIDs are numbers ``[1,2,3,...]`` starting with 1.\n   The NodeIDs are equivalent to the TokenIDs in Conll-U.\n-  An graph edge is a tuple ``(ParentID, NodeID)``\n\nExample, SpaCy:\n\n.. code:: py\n\n   # load the SpaCy model\n   import de_dep_news_trf\n   model = de_dep_news_trf.load()\n   # extract the edges for each sentence\n   import node_distance as nd\n   all_edges, num_nodes = nd.extract_edges_from_spacy(corpus, model)\n\nExample, stanza:\n\n.. code:: py\n\n   # load the stanza model\n   import stanza\n   model = stanza.Pipeline(\n       lang='de', processors='tokenize,mwt,pos,lemma,depparse',\n       tokenize_pretokenized=False)\n   # extract the edges for each sentence\n   import node_distance as nd\n   all_edges, num_nodes = nd.extract_edges_from_stanza(corpus, model)\n\nExample, trankit:\n\n.. code:: py\n\n   # load the trankit model\n   import trankit\n   model = trankit.Pipeline(lang='german', gpu=False, cache_dir='./cache')\n   # extract the edges for each sentence\n   import node_distance as nd\n   all_edges, num_nodes = nd.extract_edges_from_trankit(corpus, model)\n\n``num_nodes`` with the number of tokens/nodes in each sentence.\n``all_edges`` contains lists of edges for each sentence, e.g.\n\n.. code:: py\n\n   # Edges of the 3rd sentence\n   edges = all_edges[2]\n   # Edge between the 6th token/node and its parent node\n   edge = edges[6]\n   parent_id, node_id = edge\n\nCompute Shortest Paths between Nodes\n------------------------------------\n\nCompute node distances and the corresponding token distances\n\n.. code:: py\n\n   import node_distance as nd\n   nodedist, tokendist, indicies = nd.node_token_distances(all_edges, num_nodes, cutoff=25)\n\nHistograms as Features\n----------------------\n\nThe Distribution of node distances:\n\n.. code:: py\n\n   import node_distance as nd\n   xobs, pdf, _ = nd.nodedist_distribution(nodedist, xmin=1, xmax=12)\n\n   import matplotlib.pyplot as plt\n   plt.bar(xobs, pdf);\n   plt.title(\"distribution of node distances\");\n   plt.xlabel(\"node distance\");\n   plt.ylabel(\"PDF\");\n   plt.show();\n\nDistribution of token distance vs node distance:\n\n.. code:: py\n\n   import node_distance as nd\n   xobs, pdf, _ = nd.tokenvsnode_distribution(tokendist, nodedist, xmin=-5, xmax=15)\n\n   import matplotlib.pyplot as plt\n   plt.bar(xobs, pdf);\n   plt.title(\"Distribution of token distance vs node distance\");\n   plt.xlabel(\"token distance minus node distance\");\n   plt.ylabel(\"PDF\");\n   plt.show();\n\nAppendix\n--------\n\nInstallation\n~~~~~~~~~~~~\n\nThe ``node-distance`` `git\nrepo <http://github.com/satzbeleg/node-distance>`__ is available as\n`PyPi package <https://pypi.org/project/node-distance>`__\n\n.. code:: sh\n\n   pip install node-distance\n   pip install git+ssh://git@github.com/satzbeleg/node-distance.git\n\nInstall a virtual environment\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt is recommended to install python packages into a seperate virtual\nenvironement. (If your git repo is stored in a folder with whitespaces,\nthen don’t use the subfolder ``.venv``. Use an absolute path without\nwhitespaces.)\n\n.. code:: sh\n\n   python3.7 -m venv .venv\n   source .venv/bin/activate\n   pip install --upgrade pip\n   pip install -r requirements.txt --no-cache-dir\n   pip install -r requirements-dev.txt --no-cache-dir\n   pip install -r requirements-demo.txt --no-cache-dir\n\nThe usage example and demo notebooks might require spacy, stanza and\ntrankit to be installed. You should download the pretrained models\nbeforehand, e.g. pretrained models for German:\n\n.. code:: sh\n\n   python -m spacy download de_dep_news_trf\n   python -c \"import stanza; stanza.download(lang='de')\"\n   python -c \"import trankit; trankit.Pipeline(lang='german', gpu=False, cache_dir='./cache')\"\n\nPython commands\n~~~~~~~~~~~~~~~\n\n-  Jupyter for the examples: ``jupyter lab``\n-  Check syntax:\n   ``flake8 --ignore=F401 --exclude=$(grep -v '^#' .gitignore | xargs | sed -e 's/ /,/g')``\n-  Run Unit Tests: ``PYTHONPATH=. pytest``\n\nPublish\n\n.. code:: sh\n\n   pandoc README.md --from markdown --to rst -s -o README.rst\n   python setup.py sdist \n   twine upload -r pypi dist/*\n\nClean up\n~~~~~~~~\n\n.. code:: sh\n\n   find . -type f -name \"*.pyc\" | xargs rm\n   find . -type d -name \"__pycache__\" | xargs rm -r\n   rm -r .pytest_cache\n   rm -r .venv\n\nSupport\n~~~~~~~\n\nPlease `open an\nissue <https://github.com/satzbeleg/node-distance/issues/new>`__ for\nsupport.\n\nContributing\n~~~~~~~~~~~~\n\nPlease contribute using `Github\nFlow <https://guides.github.com/introduction/flow/>`__. Create a branch,\nadd commits, and `open a pull\nrequest <https://github.com/satzbeleg/node-distance/compare/>`__.\n\n.. |PyPI version| image:: https://badge.fury.io/py/node-distance.svg\n   :target: https://badge.fury.io/py/node-distance\n.. |Total alerts| image:: https://img.shields.io/lgtm/alerts/g/satzbeleg/node-distance.svg?logo=lgtm&logoWidth=18\n   :target: https://lgtm.com/projects/g/satzbeleg/node-distance/alerts/\n.. |Language grade: Python| image:: https://img.shields.io/lgtm/grade/python/g/satzbeleg/node-distance.svg?logo=lgtm&logoWidth=18\n   :target: https://lgtm.com/projects/g/satzbeleg/node-distance/context:python\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/satzbeleg/node-distance",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "node-distance",
    "package_url": "https://pypi.org/project/node-distance/",
    "platform": "",
    "project_url": "https://pypi.org/project/node-distance/",
    "project_urls": {
      "Homepage": "http://github.com/satzbeleg/node-distance"
    },
    "release_url": "https://pypi.org/project/node-distance/0.1.0/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "Compute distance between all nodes of a tree, and estimate an histogram that can be used as features for other models.",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12179069,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09c7ec72ce8e5cb3ddebc3f0e795a7528ed5d30f47b5090605f7fc8cb21ac3c9",
          "md5": "4ed72800ad94933acfaea804a2083735",
          "sha256": "ed1cd4941b0ab8f794ac69343e83f90d2866c9f6730b60eb6d306788c618954f"
        },
        "downloads": -1,
        "filename": "node-distance-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4ed72800ad94933acfaea804a2083735",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 108584,
        "upload_time": "2021-12-01T16:40:47",
        "upload_time_iso_8601": "2021-12-01T16:40:47.875246Z",
        "url": "https://files.pythonhosted.org/packages/09/c7/ec72ce8e5cb3ddebc3f0e795a7528ed5d30f47b5090605f7fc8cb21ac3c9/node-distance-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09c7ec72ce8e5cb3ddebc3f0e795a7528ed5d30f47b5090605f7fc8cb21ac3c9",
        "md5": "4ed72800ad94933acfaea804a2083735",
        "sha256": "ed1cd4941b0ab8f794ac69343e83f90d2866c9f6730b60eb6d306788c618954f"
      },
      "downloads": -1,
      "filename": "node-distance-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4ed72800ad94933acfaea804a2083735",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 108584,
      "upload_time": "2021-12-01T16:40:47",
      "upload_time_iso_8601": "2021-12-01T16:40:47.875246Z",
      "url": "https://files.pythonhosted.org/packages/09/c7/ec72ce8e5cb3ddebc3f0e795a7528ed5d30f47b5090605f7fc8cb21ac3c9/node-distance-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}