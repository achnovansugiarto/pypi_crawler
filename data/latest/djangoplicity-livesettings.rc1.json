{
  "info": {
    "author": "Bruce Kroeze",
    "author_email": "bruce@ecomsmith.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "About\n=====\n\nDjango-Livesettings is a project split from the `Satchmo Project`_.  It provides the ability to configure settings via an admin interface, rather than by editing 'settings.py'. In addition, livesettings allows you to set sane defaults so that your site can be perfectly functional without any changes. Livesettings uses caching to make sure this has minimal impact on your site's performance.\n\nFinally, if you wish to lock down your site and disable the settings, you can export your livesettings and store them in your 'settings.py'. This allows you have flexibility in deciding how various users interact with your app.\n\nLivesettings supports several types of input choices:\n\n    * Boolean\n    * Decimal\n    * Duration\n    * Float\n    * Integer\n    * Positive Integer (non negative)\n    * String\n    * Long string\n    * Multiple strings\n    * Long multiple strings\n    * Module values\n    * Password\n\nLivesettings has been used for many years in the satchmo project and is considered stable and production ready.\n\n.. _`Satchmo Project`: http://www.satchmoproject.com\n\n\nInstallation\n============\n\nRequirements\n------------\n\n * `Python`_ 2.5+, 2.6+ or 2.7+\n * `Django`_ 1.4+ or 1.5+\n * `Django-Keyedcache`_\n\n.. Note\n    It is recommended you use `pip`_ for the install process.\n\n\nInstalling Livesettings\n-----------------------\n\nAfter the dependencies have been installed, you can install the latest livesettings, using::\n\n    pip install djangoplicity-livesettings\n\nAdd livesettings to your installed apps in 'settings.py':\n\n    INSTALLED_APPS = (\n        ...\n        # Uncomment the next line to enable the admin:\n        'django.contrib.admin',\n        'livesettings',\n        'myapp'\n        ...\n\n    )\n\nIt is high recommended to configure a global cache (like `MemcachedCache`) for\nmultiprocess servers! Otherwise the processes would not be notified about new\nvalues with the default `LocMemCache`. The default configuration is safe for\na debug server (manage.py runserver).\n\n\nAdd it to your 'urls.py':\n\n    urlpatterns = patterns('',\n        ...\n        # Uncomment the next line to enable the admin:\n        url(r'^admin/', include(admin.site.urls)),\n        url(r'^settings/', include('livesettings.urls')),\n        ...\n\n    )\n\nExecute a syncdb to create the required tables::\n\n    python manage.py syncdb\n\n\n.. _`Django-Keyedcache`: http://bitbucket.org/bkroeze/django-keyedcache/\n.. _`pip`: http://pypi.python.org/pypi/pip\n.. _`Python`: http://www.python.org/\n.. _`Django`: http://www.djangoproject.com/\n\nUsage\n=====\n\nAn example project is in the directory 'test-project'.\nIt's beginning isidentical to the following description and is a useful example for integrating livesettings into your app.\n\nCreating Config.py\n------------------\n\nIn order to use livesettings, you will need to create a 'config.py' in your django application.\nFor this example, we will create a 'config.py' file in the 'test-project/localsite' directory.\n\nExample: \"For this specific app, we want to allow an admin user to control how many images are displayed on the front page of our site.\"\nWe will create the following 'config.py':\n\n    from livesettings import config_register, ConfigurationGroup, PositiveIntegerValue, MultipleStringValue\n    from django.utils.translation import ugettext_lazy as _\n\n    # First, setup a grup to hold all our possible configs\n    MYAPP_GROUP = ConfigurationGroup(\n    'MyApp',               # key: internal name of the group to be created\n    _('My App Settings'),  # name: verbose name which can be automatically translated\n    ordering=0             # ordering: order of group in the list (default is 1)\n    )\n\n    # Now, add our number of images to display value\n    # If a user doesn't enter a value, default to 5\n    config_register(PositiveIntegerValue(\n    MYAPP_GROUP,           # group: object of ConfigurationGroup created above\n    'NUM_IMAGES',      # key:   internal name of the configuration value to be created\n    description = _('Number of images to display'),              # label for the value\n    help_text = _(\"How many images to display on front page.\"),  # help text\n    default = 5        # value used if it have not been modified by the user interface\n    ))\n\n    # Another example of allowing the user to select from several values\n    config_register(MultipleStringValue(\n    MYAPP_GROUP,\n    'MEASUREMENT_SYSTEM',\n    description=_(\"Measurement System\"),\n    help_text=_(\"Default measurement system to use.\"),\n    choices=[('metric',_('Metric')),\n    ('imperial',_('Imperial'))],\n    default=\"imperial\"\n    ))\n\nIn order to activate this file, add the following line to your 'models.py':\n\n    import config\n\nYou can now see the results of your work by running the dev server and going to `settings <http://127.0.0.1:8000/settings/>`_ ::\n\n    python manage.py runserver\n\nDislayed values can be limited to a configuration group by the url. For example\nwe want to do experiments with configuration group `MyApp` only:\n`group settings <http://127.0.0.1:8000/settings/MyApp>`_ ::\nwhere `MyApp` is the key name of the displayed group.\n\nMore examples for all implemented types of ..Values can be found in\n'test-project/localsite/config.py':\nincluding configuration groups which are enabled or disabled based on modules selected in the form.\nYou can review examples by:\n\n    cd test-project\n    python manage.py runserver\n\nand browse `<http://127.0.0.1:8000/settings/>`.\n\nAccessing your value in a view\n------------------------------\n\nNow that you have been able to set a value and allow a user to change it, the next step is to access it from a view.\n\nIn a 'views.py', you can use the config_value function to get access to the value. Here is a very simple view that passes the value to your template::\n\n\n    from django.shortcuts import render_to_response\n    from livesettings import config_value\n\n    def index(request):\n        image_count = config_value('MyApp','NUM_IMAGES')\n        # Note, the measurement_system will return a list of selected values\n        # in this case, we use the first one\n        measurement_system = config_value('MyApp','MEASUREMENT_SYSTEM')\n        return render_to_response('myapp/index.html',\n                                {'image_count': image_count,\n                                'measurement_system': measurement_system[0]})\n\nUsing the value in your 'index.html' is straightforward::\n\n    <p>Test page</p>\n    <p>You want to show {{image_count}} pictures and use the {{measurement_system}} system.</p>\n\n\nSecurity and Restricting Access to Livesettings\n-----------------------------------------------\n\nIn order to give non-superusers access to the /settings/ views, open Django Admin Auth screen\nand give the user or to its group the permission *livesettings|setting|Can change settting*.\nThe same permission is needed to view the form and submit.\nPermissions for insert or delete and any permissions for \"long setting\" are ignored.\n\n.. Note::\n    Superusers will have access to this setting without enabling any specific permissions.\n\n\n.. Note::\n    Because of the security significance of livesettings, all views in livesettings support CSRF regardless of whether or not the\n    CsrfViewMiddleware is enabled or disabled.\n\nIf you want to save a sensitive information to livesettings on production site (e.g. a password for logging into other web service)\nit is recommended not to grant permissions to livesettings to users which are logging in everyday.\nThe most secure method is to export the settings and disable web access to livesettings as described below.\nExporting settings itself is allowed only by the superuser.\n\nPassword values should be declared by `PasswordValue(... render_value=False)`\nthat replaces password characters by asterisks in the browser. (Though hidden\nto a human observer, password is still accessible by attacker's javascripts or\nby connection eavesdropping.)\n\nExporting Settings\n------------------\n\nSettings can be exported by the `http://127.0.0.1:8000/settings/export/ <http://127.0.0.1:8000/settings/export/>`_ . After exporting the file, the entire\noutput can be manually copied and pasted to 'settings.py' in order to deploy configuration to more sites\nor to entirely prevent further changes and reading by web browser.\nIf you restrict DB access to the settings, all of the livesettings_* tables will be unused.\n\nHere is a simple example of what the extract will look like::\n\n    LIVESETTINGS_OPTIONS = \\\n    {   1: {   'DB': False,\n               'SETTINGS': {   u'MyApp': {   u'DECIMAL_TEST': u'34.0923443',\n                                             u'MEASUREMENT_SYSTEM': u'[\"metric\"]',\n                                             u'STRING_TEST': u'Orange'}}}}\n\nIn order to restrict or enable DB access, use the following line in your settings::\n\n    'DB': True,    # or False\n\nIf you have multiple sites, they can be manually combined in the file as well,\nwhere \"1:\" is to be repeatedly replaced by site id.\n\nExporting settings requires to be a superuser in Django.\n\nNotes\n-----\n\nIf you use logging with the level DEBUG in your application, prevent increasing of logging level of keyedcache by configuring it in settings.py::\n\n    import logging\n    logging.getLogger('keyedcache').setLevel(logging.INFO)\n\nNext Steps\n----------\n\nThe rest of the various livesettings types can be used in a similar manner. You can review the `satchmo code <https://bitbucket.org/chris1610/satchmo/src>`_ for more advanced examples.\n\n\n.. _`Django-Keyedcache`: http://bitbucket.org/bkroeze/django-keyedcache/\n.. _`Satchmo Project`: http://www.satchmoproject.com\n.. _`pip`: http://pypi.python.org/pypi/pip\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "https://github.com/djangoplicity/djangoplicity-livesettings/archive/refs/tags/1.4.17.tar.gz",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/djangoplicity/djangoplicity-livesettings.git",
    "keywords": "",
    "license": "New BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangoplicity-livesettings",
    "package_url": "https://pypi.org/project/djangoplicity-livesettings/",
    "platform": "any",
    "project_url": "https://pypi.org/project/djangoplicity-livesettings/",
    "project_urls": {
      "Download": "https://github.com/djangoplicity/djangoplicity-livesettings/archive/refs/tags/1.4.17.tar.gz",
      "Homepage": "https://github.com/djangoplicity/djangoplicity-livesettings.git"
    },
    "release_url": "https://pypi.org/project/djangoplicity-livesettings/1.4.17/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "livesettings",
    "version": "1.4.17",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12547139,
  "releases": {
    "1.4.17": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5f809d058cd24d45c98ccf5989107ea800b37c6e932eea2cd8cef707d8060a7b",
          "md5": "1fb093290a34f04a301f9e472283f50b",
          "sha256": "9ebcefc741ef6159d573475b2b740a8ca768c5520a73d46bd2890c7fc92d92bf"
        },
        "downloads": -1,
        "filename": "djangoplicity_livesettings-1.4.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1fb093290a34f04a301f9e472283f50b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 56509,
        "upload_time": "2022-01-12T03:44:43",
        "upload_time_iso_8601": "2022-01-12T03:44:43.102247Z",
        "url": "https://files.pythonhosted.org/packages/5f/80/9d058cd24d45c98ccf5989107ea800b37c6e932eea2cd8cef707d8060a7b/djangoplicity_livesettings-1.4.17-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cb556e68bc49cf3d9f4241a770e0f6461d4ecf6f6c5702ffa3db07c374d7648",
          "md5": "f4cec28df8f3b3488e044192bd282910",
          "sha256": "2c92421d2a2528e8986ab7dc86403513c20cc07b776a0e7b42316785f7176d54"
        },
        "downloads": -1,
        "filename": "djangoplicity-livesettings-1.4.17.tar.gz",
        "has_sig": false,
        "md5_digest": "f4cec28df8f3b3488e044192bd282910",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 36823,
        "upload_time": "2022-01-12T03:44:44",
        "upload_time_iso_8601": "2022-01-12T03:44:44.607616Z",
        "url": "https://files.pythonhosted.org/packages/6c/b5/56e68bc49cf3d9f4241a770e0f6461d4ecf6f6c5702ffa3db07c374d7648/djangoplicity-livesettings-1.4.17.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5f809d058cd24d45c98ccf5989107ea800b37c6e932eea2cd8cef707d8060a7b",
        "md5": "1fb093290a34f04a301f9e472283f50b",
        "sha256": "9ebcefc741ef6159d573475b2b740a8ca768c5520a73d46bd2890c7fc92d92bf"
      },
      "downloads": -1,
      "filename": "djangoplicity_livesettings-1.4.17-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1fb093290a34f04a301f9e472283f50b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 56509,
      "upload_time": "2022-01-12T03:44:43",
      "upload_time_iso_8601": "2022-01-12T03:44:43.102247Z",
      "url": "https://files.pythonhosted.org/packages/5f/80/9d058cd24d45c98ccf5989107ea800b37c6e932eea2cd8cef707d8060a7b/djangoplicity_livesettings-1.4.17-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6cb556e68bc49cf3d9f4241a770e0f6461d4ecf6f6c5702ffa3db07c374d7648",
        "md5": "f4cec28df8f3b3488e044192bd282910",
        "sha256": "2c92421d2a2528e8986ab7dc86403513c20cc07b776a0e7b42316785f7176d54"
      },
      "downloads": -1,
      "filename": "djangoplicity-livesettings-1.4.17.tar.gz",
      "has_sig": false,
      "md5_digest": "f4cec28df8f3b3488e044192bd282910",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 36823,
      "upload_time": "2022-01-12T03:44:44",
      "upload_time_iso_8601": "2022-01-12T03:44:44.607616Z",
      "url": "https://files.pythonhosted.org/packages/6c/b5/56e68bc49cf3d9f4241a770e0f6461d4ecf6f6c5702ffa3db07c374d7648/djangoplicity-livesettings-1.4.17.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}