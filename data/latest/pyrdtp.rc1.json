{
  "info": {
    "author": "",
    "author_email": "Sergio Pablo García Carrillo <sp.garcia@utoronto.ca>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# pyRDTP\n\n<!-- vim-markdown-toc GitLab -->\n\n\t* [The 5+1 W](#the-51-w)\n\t* [Installation](#installation)\n\t\t* [Dependencies](#dependencies)\n\t\t* [Manual installation](#manual-installation)\n\t\t* [Automatic installation](#automatic-installation)\n\t\t* [Jupyter-Lab integration](#jupyter-lab-integration)\n\t* [Usage](#usage)\n\t\t* [Basic usage](#basic-usage)\n\t\t\t* [Reading VASP files](#reading-vasp-files)\n\t\t\t* [Transformations](#transformations)\n\t\t\t* [Merging different molecules](#merging-different-molecules)\n\t\t\t* [Writing VASP files](#writing-vasp-files)\n\t\t* [Advanced usage](#advanced-usage)\n\t\t\t* [Graphs](#graphs)\n\t\t\t* [Notebook integration](#notebook-integration)\n\t\t\t* [Scripts](#scripts)\n* [Author](#author)\n\n<!-- vim-markdown-toc -->\n\n## The 5+1 W\n1. What?\n- pyRDTP is a Python library designed to manipulate and analyze chemical geometries mainly for heterogeneous catalysis.\n2. Why?\n- Some computational chemistry projects involve a large number of species that are connected between them. The main purpose of pyRDTP is to ease the generation of these structures to calculate them with VASP or another software.\n3. How?\n- pyRDTP contains different packages to transform different formats into molecules and write these objects back into different formats. It also includes different modules that compare, manipulate and analyze these objects. \n4. When?\n- Right now! pyRDTP is still in development, but some modules work perfectly at this moment. Moreover, we will tag stable releases for daily usage.\n5. Where?\n- At Núria López group (ICIQ, Spain). PyRDTP is designed for the daily tasks that every computational chemist in heterogeneous catalysis has to face.\n6. Who?\n- The weird guy with the blue keyboard. I'm the main developer of these libraries and I `HIGHLY` appreciate the feedback. If you find a bug, or you need to implement some weird algorithm with these libraries, don't hesitate to contact us.\n\n## Installation\n### Pip\n\n```console\npip install pyrdtp\n```\n\n### Dependencies\n\npyRDTP need the following libraries to run correctly:\n* `networkx`\n* `shapely`\n* `numpy`\n* `scipy`\n* `matplotlib`\n\nAdditional libraries are required to visualize molecules with Jupyter-Lab:\n* `py3Dmol`\n\n### Jupyter-Lab integration\n\n3Dmol is used to see the molecules in Jupyter-Labs, you will need to install \n\n\n## Usage\n\n\n### Basic usage\n\n#### Reading VASP files\n\nTo simply read a molecule from a CONTCAR file you will need to use the `geomio`\nmodule from pyRDTP.\n\n```python\nfrom pyRDTP import geomio\n\nmol_1 = geomio.file_to_mol('./CONTCAR', 'contcar')\n```\n\n#### Transformations\nThen `mol_1` will store all the information from the CONTCAR file into a\n`Molecule` object, different methods of `Molecule` can be used, for example you\ncan remove all the hydrogen atoms from the molecule:\n\n```python\nmol_1.atom_remove_by_element('H')\n```\nYou can also specify that you are reading a `Bulk` which has special methods.\n\nFor example, imagine that you have an unit cell and want to perform a 3x3x4\nexpansion and add vacuum:\n\n```python\nbulk_1 = geomio.file_to_mol('./POSCAR', 'contcar', bulk=True)\nbulk_1.expand(x=3, y=3, z=4)\nbulk_1.vacuum_add(distance=12, dimension='z')\n```\n\n#### Merging different molecules\nAnother useful object is the `CatalyticSystem` that allows to set a `Bulk` as\nsurface and multiple `Molecules` as an unique system:\n\n```python\nfrom pyRDTP.molecule import CatalyticSystem\n\n\ncaty = CatalyticSystem('dummy')\ncaty.surface_set(bulk_1)\ncaty.molecule_add(mol_1)\n```\n\n`CatalyticSystem` has his own methods, as for example move a molecule\nover 2A at the center of 3 atoms:\n\n```python\natoms = caty.surface[[3,6,7]]\ncaty.move_over_multiple_atoms(mol_1, atoms, distance=3)\n```\n\n#### Writing VASP files\n\nOnce you finish you can write the new molecule to a POSCAR file:\n\n```python\ngeomio.mol_to_file(caty, './POSCAR', 'contcar')\n```\n\n\n### Advanced usage\n\n#### Graphs\n\npyRDTP uses [NetworkX](https://networkx.github.io) to work with graphs. You can\ntransform any molecule into a graph using the graph module, `voronoi` option\ncan be used to automatically detect the bonds:\n\n```python\nfrom pyRDTP.operations import graph\n\ngrp_1 = graph.generate(mol_1, voronoi=True)\n```\n\nYou can also plot your graph:\n\n```python\n\ngraph.plot(grp)\n```\n\n#### Notebook integration\n\nYou can use [3Dmol](https://3dmol.csb.pitt.edu) to visualize your molecules in\nJupyter-Lab.  To do so you need to import the `jupyter` module.\n\n```python\nfrom pyRDTP.tools import jupyter\n\njupyter.show_molecule(mol_1)\n```\n\n#### Scripts\n\nA set of scripts is packed inside the libraries. These scripts are prepared to\nperform concrete tasks using the command line. They are located inside the\n`scripts` folder. Using:\n\n```console\n~/pyrdtp/scripts/somescript --help\n```\n\nYou can see the purpose and the usage of the script.\n\n# Author\n\nDr. Sergio P. García Carrillo, PostDoc (sp.garcia@utoronto.ca)\n\n# Mantainers \n\nSantiago Morandi, PhD Student (smorandi@iciq.es), Oliver Loveday, PhD Student (oloveday@iciq.es)\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "VASP,computational chemistry,heterogeneous catalysis",
    "license": "",
    "maintainer": "",
    "maintainer_email": "Santiago Morandi <smorandi@iciq.es>, Oliver Loveday <oloveday@iciq.es>",
    "name": "pyRDTP",
    "package_url": "https://pypi.org/project/pyRDTP/",
    "platform": null,
    "project_url": "https://pypi.org/project/pyRDTP/",
    "project_urls": {
      "Homepage": "https://gitlab.com/iciq-tcc/nlopez-group/pyrdtp"
    },
    "release_url": "https://pypi.org/project/pyRDTP/0.2/",
    "requires_dist": [
      "matplotlib>=3.5.3",
      "networkx>=2.8.4",
      "numpy>=1.23.3",
      "py3dmol>=1.8.1",
      "scipy>=1.9.3",
      "shapely>=1.4.8"
    ],
    "requires_python": ">=3.9",
    "summary": "Manipulate chemical geometries for heterogeneous catalysis",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15804260,
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e64962b3097363450a131387267997300421674227da88b15e0ba685d9d38ab5",
          "md5": "7585ba193c04ab7cff39b057e70766a9",
          "sha256": "e4f4005fe0c96f01275b0d2964b30991b5ada74e7e06038987cf19aeb0870c45"
        },
        "downloads": -1,
        "filename": "pyrdtp-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7585ba193c04ab7cff39b057e70766a9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 67124,
        "upload_time": "2022-11-17T16:59:09",
        "upload_time_iso_8601": "2022-11-17T16:59:09.571389Z",
        "url": "https://files.pythonhosted.org/packages/e6/49/62b3097363450a131387267997300421674227da88b15e0ba685d9d38ab5/pyrdtp-0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4b47fc97d26ee12d011ffee70963d468a4e30d95a4e81755d1fa3de35f5dfebd",
          "md5": "b5b3538c08c6cb592de3d34d25900027",
          "sha256": "8577e187787c3d3d61a327848eaa554b23d2853a91f9ea9e6dcaadff8cb0aba5"
        },
        "downloads": -1,
        "filename": "pyrdtp-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b5b3538c08c6cb592de3d34d25900027",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 66319,
        "upload_time": "2022-11-17T16:59:11",
        "upload_time_iso_8601": "2022-11-17T16:59:11.945561Z",
        "url": "https://files.pythonhosted.org/packages/4b/47/fc97d26ee12d011ffee70963d468a4e30d95a4e81755d1fa3de35f5dfebd/pyrdtp-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e64962b3097363450a131387267997300421674227da88b15e0ba685d9d38ab5",
        "md5": "7585ba193c04ab7cff39b057e70766a9",
        "sha256": "e4f4005fe0c96f01275b0d2964b30991b5ada74e7e06038987cf19aeb0870c45"
      },
      "downloads": -1,
      "filename": "pyrdtp-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7585ba193c04ab7cff39b057e70766a9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9",
      "size": 67124,
      "upload_time": "2022-11-17T16:59:09",
      "upload_time_iso_8601": "2022-11-17T16:59:09.571389Z",
      "url": "https://files.pythonhosted.org/packages/e6/49/62b3097363450a131387267997300421674227da88b15e0ba685d9d38ab5/pyrdtp-0.2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4b47fc97d26ee12d011ffee70963d468a4e30d95a4e81755d1fa3de35f5dfebd",
        "md5": "b5b3538c08c6cb592de3d34d25900027",
        "sha256": "8577e187787c3d3d61a327848eaa554b23d2853a91f9ea9e6dcaadff8cb0aba5"
      },
      "downloads": -1,
      "filename": "pyrdtp-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b5b3538c08c6cb592de3d34d25900027",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 66319,
      "upload_time": "2022-11-17T16:59:11",
      "upload_time_iso_8601": "2022-11-17T16:59:11.945561Z",
      "url": "https://files.pythonhosted.org/packages/4b/47/fc97d26ee12d011ffee70963d468a4e30d95a4e81755d1fa3de35f5dfebd/pyrdtp-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}