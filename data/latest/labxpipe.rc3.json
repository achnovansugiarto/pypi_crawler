{
  "info": {
    "author": "Charles E. Vejnar",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# <img src=\"https://raw.githubusercontent.com/vejnar/LabxPipe/main/img/logo.svg\" alt=\"LabxPipe\" width=\"45%\" />\n\n[![MPLv2](https://img.shields.io/aur/license/python-labxpipe?color=1793d1&style=for-the-badge)](https://mozilla.org/MPL/2.0/)\n\n* Integrated with [LabxDB](https://labxdb.vejnar.org): all required annotations (labels, strand, paired etc) are retrieved from LabxDB. This is optional.\n* Based on existing robust technologies. No new language.\n    * LabxPipe pipelines are defined in JSON text files.\n    * LabxPipe is written in Python. Using norms, such as input and output filenames, insures compatibility between tasks.\n* Simple and complex pipelines.\n    * By default, pipelines are linear (one step after the other).\n    * Branching is easily achieved be defining a previous step (using `step_input` parameter) allowing users to create any dependency between tasks.\n* Parallelized using robust asynchronous threads from the Python standard library.\n\n## Examples\n\nSee JSON files in `config/pipelines` of this repository.\n\n| Pipeline JSON file            |                                                                                                                           |\n| ----------------------------- | ------------------------------------------------------------------------------------------------------------------------- |\n| `mrna_seq.json`               | mRNA-seq                                                                                                                  |\n| `mrna_seq_no_db.json`         | mRNA-seq. No [LabxDB](https://labxdb.vejnar.org)                                                                          |\n| `mrna_seq_with_plotting.json` | mRNA-seq. Plotting non-mapped reads. Demonstrate `step_input`                                                             |\n| `mrna_seq_cufflinks.json`     | mRNA-seq. Replaces GeneAbacus by Cufflinks                                                                                |\n| `chip_seq.json`               | ChIP-seq using [Bowtie2](https://github.com/BenLangmead/bowtie2) and [Samtools](http://www.htslib.org) to uniquify reads. |\n\nFollowing demonstrates how to apply `mrna_seq.json` pipeline. It requires:\n* [LabxDB](https://labxdb.vejnar.org)\n* FASTQ files for sample named `AGR000850` and `AGR000912`\n    ```\n    /plus/data/seq/by_run/AGR000850\n    ├── 23_009_R1.fastq.zst\n    └── 23_009_R2.fastq.zst\n    /plus/data/seq/by_run/AGR000912\n    ├── 65_009_R1.fastq.zst\n    └── 65_009_R2.fastq.zst\n    ```\n\nNote: `mrna_seq_no_db.json` demonstrates how to use LabxPipe *without* LabxDB: it only requires FASTQ files (in `path_seq_run` directory, see above).\n\nRequirements:\n* [LabxDB](https://labxdb.vejnar.org). Alternatively, `mrna_seq_no_db.json` doesn't require LabxDB.\n* [ReadKnead](https://sr.ht/~vejnar/ReadKnead) to trim reads.\n* [STAR](https://github.com/alexdobin/STAR) and genome index in directory defined `path_star_index`.\n* [GeneAbacus](https://sr.ht/~vejnar/GeneAbacus) to count reads and generate genomic profile for tracks.\n\n1. Start pipeline:\n    ```bash\n    lxpipe run --pipeline mrna_seq.json \\\n               --worker 2 \\\n               --processor 16\n    ```\n    Output is written in `path_output` directory.\n2. Create report:\n    ```bash\n    lxpipe report --pipeline mrna_seq.json\n    ```\n    Report file `mrna_seq.xlsx` should be created in same directory as `mrna_seq.json`.\n3. Merge gene/mRNA counts generated by [GeneAbacus](https://sr.ht/~vejnar/GeneAbacus) in `counting` directory:\n    ```bash\n    lxpipe merge-count --pipeline mrna_seq.json \\\n                       --step counting\n    ```\n4. Trackhub. Requirements:\n    * [ChromosomeMappings](https://github.com/dpryan79/ChromosomeMappings) file (to map chromosome names from Ensembl/NCBI to UCSC)\n    * Tabulated file (with chromosome name and length)\n\n    Execute in a separate directory:\n    ```bash\n    lxpipe trackhub --runs AGR000850,AGR000912 \\\n                    --species_ucsc danRer11 \\\n                    --path_genome /plus/scratch/sai/annots/danrer_genome_all_ensembl_grcz11_ucsc_chroms_chrom_length.tab \\\n                    --path_mapping /plus/scratch/sai/annots/ChromosomeMappings/GRCz11_ensembl2UCSC.txt \\\n                    --input_sam \\\n                    --bam_names accepted_hits.sam.zst \\\n                    --make_config \\\n                    --make_trackhub \\\n                    --make_bigwig \\\n                    --processor 16\n    ```\n    Directory is ready to be shared by a web server for display in the [UCSC genome browser](https://genome.ucsc.edu/cgi-bin/hgHubConnect).\n\n## Configuration\n\nParameters can be defined [globally](https://labxdb.vejnar.org/doc/install/python/#configuration). See in `config` directory of this repository for examples.\n\n## Writing pipelines\n\nParameters are defined first globally (see above), then per pipeline, then per replicate/run, and then per step/function. The latest definition takes precedence: `path_seq_run` defined in `/etc/hts/labxpipe.json` is used by default, but if `path_seq_run` is defined in the pipeline file, it will be used instead.\n\nMain parameters\n\n| Parameter          | Type          |\n| ------------------ | ------------- |\n| name               | string        |\n| path_output        | string        |\n| path_seq_run       | string        |\n| path_annots        | string        |\n| path_bowtie2_index | string        |\n| path_star_index    | string        |\n| fastq_exts         | []strings     |\n| adaptors           | {}            |\n| logging_level      | string        |\n| run_refs           | []strings     |\n| replicate_refs     | []strings     |\n| ref_info_source    | []strings     |\n| ref_infos          | {}            |\n| analysis           | [{}, {}, ...] |\n\nParameters for all functions\n\n| Parameter     | Type    |\n| ------------- | ------- |\n| step_name     | string  |\n| step_function | string  |\n| step_desc     | string  |\n| force         | boolean |\n\nFunction-specific parameters\n\n| Function           | Synonym          | Parameter             | Type          |\n| ------------------ | ---------------- | --------------------- | ------------- |\n| readknead          | preparing        | options               | []strings     |\n|                    |                  | ops_r1                | [{}, {}, ...] |\n|                    |                  | ops_r2                | [{}, {}, ...] |\n|                    |                  | plot_fastq_in         | boolean       |\n|                    |                  | plot_fastq            | boolean       |\n|                    |                  | fastq_out             | boolean       |\n|                    |                  | zip_fastq_out         | string        |\n| bowtie2            | genomic_aligning | options               | []strings     |\n|                    |                  | index                 | string        |\n|                    |                  | output                | string        |\n|                    |                  | output_unfiltered     | string        |\n|                    |                  | compress_sam          | boolean       |\n|                    |                  | compress_sam_cmd      | string        |\n|                    |                  | create_bam            | boolean       |\n|                    |                  | index_bam             | boolean       |\n| star               | aligning         | options               | []strings     |\n|                    |                  | index                 | string        |\n|                    |                  | output_type           | []strings     |\n|                    |                  | compress_sam          | boolean       |\n|                    |                  | compress_sam_cmd      | string        |\n|                    |                  | compress_unmapped     | boolean       |\n|                    |                  | compress_unmapped_cmd | string        |\n| cufflinks          |                  | options               | []strings     |\n|                    |                  | inputs                | [{}, {}, ...] |\n|                    |                  | features              | [{}, {}, ...] |\n| geneabacus         | counting         | options               | []strings     |\n|                    |                  | inputs                | [{}, {}, ...] |\n|                    |                  | features              | [{}, {}, ...] |\n| uniquify           |                  | options               | []strings     |\n|                    |                  | sort_by_name_bam      | boolean       |\n|                    |                  | index_bam             | boolean       |\n| cleaning           |                  | steps                 | [{}, {}, ...] |\n\nSample-specific parameters. Automatically populated if using LabxDB or sourced from `ref_infos`. These parameters can be changed manually in any function (for example setting `paired` to `False` will ignore second reads in that step).\n\n| Parameter      | Type    |\n| -------------- | ------- |\n| label_short    | string  |\n| paired         | boolean |\n| directional    | boolean |\n| r1_strand      | string  |\n| quality_scores | string  |\n\n## Demultiplexing sequencing reads: `lxpipe demultiplex`\n\n* Demultiplex reads based on barcode sequences from the `Second barcode` field in [LabxDB](https://labxdb.vejnar.org)\n* Demultiplexing using [ReadKnead](https://sr.ht/~vejnar/ReadKnead). The most important for demultiplexing is the ReadKnead pipeline. Pipelines are identified using the `Adapter 3'` field in LabxDB.\n\n* Example for simple demultiplexing. The first nucleotides at the 5' end of read 1 are used as barcodes (the `Adapter 3'` field is set to `sRNA 1.5` in LabxDB for these samples) with the following pipeline:\n    ```json\n    {\n        \"sRNA 1.5\": {\n            \"R1\": [{\"name\": \"demultiplex\",\n                    \"end\": 5,\n                    \"max_mismatch\": 1}],\n            \"R2\": null\n        }\n    }\n    ```\n    The barcode sequences are added by LabxPipe using the `Second barcode` field in [LabxDB](https://labxdb.vejnar.org).\n\n* Example for iCLIP demultiplexing. In [Vejnar et al.](https://pubmed.ncbi.nlm.nih.gov/31227602), iCLIP is demultiplexed (the `Adapter 3'` field is set to `TruSeq-DMS+A Index` in LabxDB for these samples) using the following pipeline:\n    ```json\n    {\n        \"TruSeq-DMS+A Index\": {\n            \"R1\": [{\"name\": \"clip\",\n                    \"end\": 5,\n                    \"length\": 4,\n                    \"add_clipped\": true},\n                {\"name\": \"trim\",\n                 \"end\": 3,\n                 \"algo\": \"bktrim\",\n                 \"min_sequence\": 5,\n                 \"keep\": [\"trim_exact\", \"trim_align\"]},\n                {\"name\": \"length\",\n                 \"min_length\": 6},\n                {\"name\": \"demultiplex\",\n                 \"end\": 3,\n                 \"max_mismatch\": 1,\n                 \"length_ligand\": 2},\n                {\"name\": \"length\",\n                 \"min_length\": 15}],\n            \"R2\": null\n        }\n    }\n    ```\n    Pipeline is stored in `demux_truseq_dms_a.json`. The barcode sequences are added by LabxPipe using the `Second barcode` field in [LabxDB](https://labxdb.vejnar.org). (NB: published demultiplexed data were generated using `\"algo\": \"align\"` with a minimum score of 80 instead of `\"algo\": \"bktrim\"`)\n\n    Then pipeline was tested running:\n    ```bash\n    lxpipe demultiplex --bulk HHYLKADXX \\\n                       --path_demux_ops demux_truseq_dms_a.json \\\n                       --path_seq_prepared prepared \\\n                       --demux_nozip \\\n                       --processor 1 \\\n                       --demux_verbose_level 20 \\\n                       --no_readonly\n    ```\n    This output is **very verbose**: for every read, output from every step of the demultiplexing pipeline is reported. To get consistent output, `--processor` must be set to `1`. Output is written in local directory `prepared`.\n\n    And finally, once pipeline is validated (data is written in `path_seq_prepared` directory, see [here](https://labxdb.vejnar.org/doc/install/python/#configuration)):\n    ```bash\n    lxpipe demultiplex --bulk HHYLKADXX \\\n                       --path_demux_ops demux_truseq_dms_a.json \\\n                       --processor 10\n    ```\n\n## License\n\n*LabxPipe* is distributed under the Mozilla Public License Version 2.0 (see /LICENSE).\n\nCopyright © 2013-2023 Charles E. Vejnar\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "Mozilla Public License 2.0 (MPL 2.0)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "labxpipe",
    "package_url": "https://pypi.org/project/labxpipe/",
    "platform": null,
    "project_url": "https://pypi.org/project/labxpipe/",
    "project_urls": {
      "homepage": "https://git.sr.ht/~vejnar/LabxPipe"
    },
    "release_url": "https://pypi.org/project/labxpipe/0.4.0/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Genomics pipelines",
    "version": "0.4.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17291066,
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "219f87bdd01fa015666e3e185fb189779312615e12bd35a0a2fbd957f527368e",
          "md5": "71732cfc0f2c76d4e4e941363e1d0c21",
          "sha256": "e647df25be90d9c2ec622a13d5a1b01a91ef7a4f3cb1a0313cbf59092c2b728b"
        },
        "downloads": -1,
        "filename": "labxpipe-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "71732cfc0f2c76d4e4e941363e1d0c21",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8",
        "size": 44710,
        "upload_time": "2022-09-29T14:59:56",
        "upload_time_iso_8601": "2022-09-29T14:59:56.861484Z",
        "url": "https://files.pythonhosted.org/packages/21/9f/87bdd01fa015666e3e185fb189779312615e12bd35a0a2fbd957f527368e/labxpipe-0.1.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "58b7e8b8176d007cc96dc1d9058252683145b9fc9454e64fdffc3704b5a4b8c2",
          "md5": "345d72b947cf9aab85943a71823677c2",
          "sha256": "411b138c230337cff7d5a751b26a6fddb32f38762ba5727adeb7e2d7099bb472"
        },
        "downloads": -1,
        "filename": "labxpipe-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "345d72b947cf9aab85943a71823677c2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 50921,
        "upload_time": "2022-11-23T19:58:04",
        "upload_time_iso_8601": "2022-11-23T19:58:04.883711Z",
        "url": "https://files.pythonhosted.org/packages/58/b7/e8b8176d007cc96dc1d9058252683145b9fc9454e64fdffc3704b5a4b8c2/labxpipe-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5fcd9741b807316e1bd55a1b1c4f12ea39c07dda9f6e4a3b8de29cd570257948",
          "md5": "a3cda48b08b68a929b715616504bf720",
          "sha256": "6aaea96fbe0627e55c51c7aed732f731a2e00f0bda56dad7c8874a902e6cc4b1"
        },
        "downloads": -1,
        "filename": "labxpipe-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a3cda48b08b68a929b715616504bf720",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 52739,
        "upload_time": "2023-03-14T17:27:02",
        "upload_time_iso_8601": "2023-03-14T17:27:02.897492Z",
        "url": "https://files.pythonhosted.org/packages/5f/cd/9741b807316e1bd55a1b1c4f12ea39c07dda9f6e4a3b8de29cd570257948/labxpipe-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "5fcd9741b807316e1bd55a1b1c4f12ea39c07dda9f6e4a3b8de29cd570257948",
        "md5": "a3cda48b08b68a929b715616504bf720",
        "sha256": "6aaea96fbe0627e55c51c7aed732f731a2e00f0bda56dad7c8874a902e6cc4b1"
      },
      "downloads": -1,
      "filename": "labxpipe-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a3cda48b08b68a929b715616504bf720",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 52739,
      "upload_time": "2023-03-14T17:27:02",
      "upload_time_iso_8601": "2023-03-14T17:27:02.897492Z",
      "url": "https://files.pythonhosted.org/packages/5f/cd/9741b807316e1bd55a1b1c4f12ea39c07dda9f6e4a3b8de29cd570257948/labxpipe-0.4.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}