{
  "info": {
    "author": "Joao Pinheiro",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: SQL",
      "Topic :: Database",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "rick_db - Simple SQL database layer\n--\n[![Tests](https://github.com/oddbit-project/rick_db/workflows/Tests/badge.svg?branch=master)](https://github.com/oddbit-project/rick_db/actions)\n[![pypi](https://img.shields.io/pypi/v/rick-db.svg)](https://pypi.org/project/rick-db/)\n[![license](https://img.shields.io/pypi/l/rick-db.svg)](https://github.com/oddbit-project/rick_db/blob/master/LICENSE)\n\n\nrick_db is a simple SQL database layer for Python3. It includes connection management, Object Mapper, Query Builder,\nand a Repository pattern implementation. It is **not** an ORM, and it's not meant to replace one. \n\n## Features\n- Object Mapper;\n- Fluent Sql Query builder;\n- High level connectors for PostgreSQL, SqlLite3;\n- Pluggable SQL query profiler; \n\n## Usage scenarios\n\nrick_db was built to cater to a schema-first approach: Database schema is built and managed directly with SQL DDL commands,\nand the application layer has no responsibility on the structure of the database.\n\n\n## Installation\n```\n$ pip3 install rick-db\n```\n\n## Connection\n\n### PostgreSQL\n\nThere are several PostgreSQL connectors available. However, it is recommended to use PgConnection with pgpool, instead of\nthe available connection pool classes.\n\nUsing PgConnection:\n\n```python\nfrom rick_db.conn.pg import PgConnection\n\nconfig = {\n    'dbname': 'my_database',\n    'user': '<some_user>',\n    'password': '<some_password>',\n    'host': 'localhost',\n    'port': 5432,\n}\n\n# create connection\nconn = PgConnection(**config)\n```\n\nUsing PgConnectionPool:\n\n```python\nfrom rick_db.conn.pg import PgConnectionPool\n\nconfig = {\n    'dbname': 'my_database',\n    'user': '<some_user>',\n    'password': '<some_password>',\n    'host': 'localhost',\n    'port': 5432,\n    'min_conn': 4,\n}\n\n# create connection\nconn = PgConnectionPool(**config)\n```\n\nUsing PgThreadedConnectionPool:\n\n```python\nfrom rick_db.conn.pg import PgThreadedConnectionPool\n\nconfig = {\n    'dbname': 'my_database',\n    'user': '<some_user>',\n    'password': '<some_password>',\n    'host': 'localhost',\n    'port': 5432,\n    'min_conn': 4,\n}\n\n# create connection\nconn = PgThreadedConnectionPool(**config)\n```\n\n\n### SqlLite\n\n```python\nfrom rick_db.conn.sqlite import Sqlite3Connection\n\n# create or open a sqlite database\nconn = Sqlite3Connection('my_database.db')\n```\n\n## Object Mapper\n\nThe object mapper converts query results into object attributes. These data objects are generically known as **Records**.\nA Record contains a set of attributes for the desired fields, as well as optional table, schema and primary key information.\n\nUsually, Record objects should only contain attributes, as their primary goal is to act like DAO (data access objects). As\nsuch, Records don't need to map an underlying table or view; They are just a set of fields that may map to a query result.\nIt is possible to create Record objects that map only specific fields from a query result; the additional fields are just\nignored.\n\nThe attribute names of the Record objects don't need to match the field in the database result object; instead, the target\ncolumn name is specified as their value. The field mapper mechanism will patch the defined class and build the appropriate\ninternal mapping structures. This internal mapping is done at load time, and not at run time. The resulting class will\nhave distinct behaviour when accessing attributes, depending on the current scope; class-scope access returns the\natribute-column definitions, object scope returns the underlying row value for the given attribute, or None if value is\nnot present.\n\nTo create a Record class, just use the @fieldmapper decorator:\n\n```python\nfrom rick_db import fieldmapper\n\n@fieldmapper\nclass Customer:\n    id = 'id_customer'\n    name = 'name'\n    address = 'address'\n    city = 'city'\n    id_country = 'fk_country'\n\n# access class-level attributes\nprint(Customer.name) # outputs  'name'\n\n# access object-level attributes\n# customer data is loaded via __init__; The key names must match the defined attributes\ncustomer = Customer(id=3, name=\"John Doe\", address=\"Obere Str.\", city=\"Berlin\")\n\nprint(customer.name)  # outputs 'John Doe'\nprint(customer.id_country) # outputs 'None' \n```\n\nIt is possible to also provide optional table/view, primary key and schema information; this is particularly useful\nwhen using **Repositories** or the bundled **Query Builder**\n\nExtending on the previous examples:\n```python\nfrom rick_db import fieldmapper\n\n@fieldmapper(tablename='customers', pk='id_customer', schema='public')\nclass Customer:\n    id = 'id_customer'\n    name = 'name'\n    address = 'address'\n    city = 'city'\n    id_country = 'fk_country'\n\n# access class-level attributes\nprint(Customer.name) # outputs  'name'\n\n# access object-level attributes\n# customer data is loaded via __init__; The key names must match the defined attributes\ncustomer = Customer(id=3, name=\"John Doe\", address=\"Obere Str.\", city=\"Berlin\")\n\nprint(customer.name)  # outputs 'John Doe'\nprint(customer.id_country) # outputs 'None' \n```\n## Query Builder \n\nFeatures:\n- support for Select, Insert, Delete, Update queries;\n- join support;\n- schema support, including cross-schema operations;\n- integration with fieldmapper; \n\nThe query builder provides SQL generation using a fluent interface, suitable for most cases. Different database support\nis handled via dialect objects (extending from SqlDialect). The query builder itself will only generate a SQL string\nand a parameter list; its up to the developer to use the generated SQL in the appropriate database context.\n\nThe query builder supports Object Mapper classes as table and schema identifiers in most cases; however it can also be\nused without any Object Mapper reference. See examples below:\n\nSelect Query Builder examples:\n```python\nfrom rick_db.sql import Select, PgSqlDialect, Literal\n\nqry, values = Select(PgSqlDialect()).from_('table').assemble()\n# output: SELECT \"table\".* FROM \"table\"\nprint(qry)\n\nqry, values = Select(PgSqlDialect()).from_('table1', ['table1_field']) \\\n    .from_('table2', ['table2_field']) \\\n    .assemble()\n# output: SELECT \"table1_field\",\"table2_field\" FROM \"table1\", \"table2\"\nprint(qry)\n\nqry, values = Select(PgSqlDialect()).from_('table1', ['table1_field']) \\\n    .from_('table2', ['table2_field']) \\\n    .order('table1_field', 'DESC') \\\n    .order('table2_field') \\\n    .assemble()\n# output: SELECT \"table1_field\",\"table2_field\" FROM \"table1\", \"table2\" ORDER BY \"table1_field\" DESC,\"table2_field\" ASC\nprint(qry)\n\nqry, values = Select(PgSqlDialect()).expr(\"1\").assemble()\n# output: SELECT 1\nprint(qry)\n\nqry, values = Select(PgSqlDialect()).from_('table', {Literal('COUNT(*)'): 'total'}).assemble()\n# output: SELECT COUNT(*) AS \"total\" FROM \"table\"\nprint(qry)\n\nqry, values = Select(PgSqlDialect()).from_('table', ['field1', 'field2']).assemble()\n# output: SELECT \"field1\",\"field2\" FROM \"table\"\nprint(qry)\n\nqry, values = Select(PgSqlDialect()).from_({'table': 'alias'}, ['field1', 'field2']).assemble()\n# output: SELECT \"alias\".\"field1\",\"alias\".\"field2\" FROM \"table\" AS \"alias\"\nprint(qry)\n\nqry, values = Select(PgSqlDialect()).from_({'table': 'alias'}, [{'field1': 'field_alias'}, 'field2']).assemble()\n# output: SELECT \"alias\".\"field1\" AS \"field_alias\",\"alias\".\"field2\" FROM \"table\" AS \"alias\"\nprint(qry)\n\nqry, values = Select(PgSqlDialect()).from_('table') \\\n    .join('other_table', 'fk_table', 'table', 'id_table') \\\n    .assemble()\n# output: SELECT \"table\".* FROM \"table\" INNER JOIN \"other_table\" ON \"table\".\"id_table\"=\"other_table\".\"fk_table\"\nprint(qry)\n\nqry, values = Select(PgSqlDialect()).from_('table') \\\n    .join('other_table', 'fk_table', 'table', 'id_table', cols=['some_field', {'other_table_field': 'other_field'}]) \\\n    .assemble()\n# output: SELECT \"table\".*,\"other_table\".\"some_field\",\"other_table\".\"other_table_field\" AS \"other_field\" FROM \"table\" INNER JOIN \"other_table\" ON \"table\".\"id_table\"=\"other_table\".\"fk_table\"\nprint(qry)\n\nqry, values = Select(PgSqlDialect()).from_('customers') \\\n    .join('orders', 'fk_customer', 'customers', 'id') \\\n    .join('sales', 'fk_order', 'orders', 'id', cols=[{'document_total': 'total'}]) \\\n    .assemble()\n# output: SELECT \"customers\".*,\"sales\".\"document_total\" AS \"total\" FROM \"customers\" INNER JOIN \"orders\" ON \"customers\".\"id\"=\"orders\".\"fk_customer\" INNER JOIN \"sales\" ON \"orders\".\"id\"=\"sales\".\"fk_order\"\nprint(qry)\n```\n\nInsert Query Builder examples:\n```python\nfrom rick_db.sql import Insert\n\nrecord = {\n    'field1': 'value1',\n    'field2': 12,\n}\nqry, values = Insert().into('mytable').values(record).assemble()\n# INSERT INTO \"mytable\" (\"field1\", \"field2\") VALUES (?, ?)\nprint(qry)\n# ['value1', 12]\nprint(values)\n\nqry, values = Insert().into('mytable').values(record).returning(['id']).assemble()\n# INSERT INTO \"mytable\" (\"field1\", \"field2\") VALUES (?, ?) RETURNING \"id\"\nprint(qry)\n# ['value1', 12]\nprint(values)\n``` \n\nDelete Query Builder examples:\n\n```python\nfrom rick_db.sql import Delete\n\nqry, values = Delete().from_('mytable').assemble()\n# output: DELETE FROM \"mytable\"\nprint(qry)\n# output: []\nprint(values)\n\nqry, values = Delete().from_('mytable').where('id', '=', 16).assemble()\n# output: DELETE FROM \"mytable\" WHERE \"id\" = ?\nprint(qry)\n# output: [16]\nprint(values)\n\nqry, values = Delete().from_('mytable') \\\n    .where('id', '=', 16) \\\n    .orwhere('name', 'LIKE', '%John%') \\\n    .assemble()\n# output: DELETE FROM \"mytable\" WHERE \"id\" = ? OR \"name\" LIKE ?\nprint(qry)\n# [16, '%John%']\nprint(values)\n```\n\nSelect using Object Mapper:\n\n```python\nfrom rick_db import fieldmapper\nfrom rick_db.sql import Select\n\n\n@fieldmapper(tablename='customers', pk='id_customer')\nclass Customer:\n    id = 'id_customer'\n    name = 'name'\n    address = 'address'\n    city = 'city'\n    id_country = 'fk_country'\n\n\n@fieldmapper(tablename='orders', pk='id_order')\nclass Order:\n    id = 'id_order'\n    id_customer = 'fk_customer'\n    order_date = 'order_date'\n    total = 'order_total'\n\n\n@fieldmapper(tablename='sales', pk='id_sale')\nclass Sale:\n    id = 'id_sale'\n    id_order = 'fk_order'\n    total = 'sale_total'\n\n\nqry = Select().from_(Customer, [Customer.name, Customer.city]) \\\n    .join({Order: \"o\"}, Order.id_customer, Customer, Customer.id) \\\n    .join({Sale: \"s\"}, Sale.id_order, {Order: \"o\"}, Order.id, cols=Sale.total) \\\n    .where(Sale.total, '>', 100)\n\n# output: ('SELECT \"name\",\"city\",\"s\".\"sale_total\" FROM \"customers\" INNER JOIN \"orders\" AS \"o\" ON \"customers\".\"id_customer\"=\"o\".\"fk_customer\" INNER JOIN \"sales\" AS \"s\" ON \"o\".\"id_order\"=\"s\".\"fk_order\" WHERE (\"sale_total\" > ?)', [100])\nprint(qry.assemble())\n```\n\nInsert using Object Mapper:\n\n```python\nfrom rick_db import fieldmapper\nfrom rick_db.sql import Insert\n\n\n@fieldmapper(tablename='customers', pk='id_customer')\nclass Customer:\n    id = 'id_customer'\n    name = 'name'\n    address = 'address'\n    city = 'city'\n    id_country = 'fk_country'\n\n\nrecord = Customer(id=1, name='John', city='Dallas')\n\nqry, values = Insert().into(Customer).values(record).assemble()\n# output: INSERT INTO \"customers\" (\"id_customer\", \"name\", \"city\") VALUES (?, ?, ?)\nprint(qry)\n# output: [1, 'John', 'Dallas']\nprint(values)\n\n# Insert() - compact form with Records\n# into() will detect its a valid record, and parse everything from there\nqry, values = Insert().into(record).assemble()\n# output: INSERT INTO \"customers\" (\"id_customer\", \"name\", \"city\") VALUES (?, ?, ?)\nprint(qry)\n# output: [1, 'John', 'Dallas']\nprint(values)\n\nqry, values = Insert().into(record).returning([Customer.id]).assemble()\n# output: INSERT INTO \"customers\" (\"id_customer\", \"name\", \"city\") VALUES (?, ?, ?) RETURNING \"id_customer\"\nprint(qry)\n# output: [1, 'John', 'Dallas']\nprint(values)\n```\nDelete using Object Mapper:\n\n```python\nfrom rick_db import fieldmapper\nfrom rick_db.sql import Delete\n\n\n@fieldmapper(tablename='customers', pk='id_customer')\nclass Customer:\n    id = 'id_customer'\n    name = 'name'\n    address = 'address'\n    city = 'city'\n    id_country = 'fk_country'\n\n\nrecord = Customer(id=1, name='John', city='Dallas')\n\nqry, values = Delete().from_(Customer).assemble()\n# output: DELETE FROM \"customers\"\nprint(qry)\n# output: []\nprint(values)\n\nqry, values = Delete().from_(Customer).where(Customer.id, '=', record.id).assemble()\n# output: DELETE FROM \"customers\" WHERE \"id_customer\" = ?\nprint(qry)\n# output: [1]\nprint(values)\n\nqry, values = Delete().from_(Customer) \\\n    .where(Customer.id, '=', record.id) \\\n    .orwhere(Customer.name, 'LIKE', '%John%') \\\n    .assemble()\n# output: DELETE FROM \"customers\" WHERE \"id_customer\" = ? OR \"name\" LIKE ?\nprint(qry)\n# [1, '%John%']\nprint(values)\n```\n\n## Repository\n\nThe **Repository** class provides a simple wrapper for **Record** read, insert, update and delete operations. Most operations\nrequire that the **Record** has both tablename and primary key information available.\n \nA repository object requires a database connection and a **Record** class:\n\n ```python\nfrom rick_db import fieldmapper, Repository\nfrom rick_db.conn.pg import PgConnection\n\n\n@fieldmapper(tablename='users', pk='id_user')\nclass User:\n    id = 'id_user'\n    name = 'name'\n    age = 'age'\n\n\nconn = PgConnection(dbname='tests', user='postgres', password='some_password')\n\n# create a repository for User class\nuser_repository = Repository(conn, User)\n\n# iterate all records\nfor user in user_repository.fetch_all():\n    print(\"Name: \", user.name)\n\n```\n\n**Repository** available methods:\n\n|Method|Description|\n|---|---|\n|backend()| Retrieve Connection instance|\n|dialect()| Retrieve SqlDialect instance|\n|select() | New Select() instance for the current table|\n|fetch_pk(pk_value)| Get one record by primary key value|\n|fetch_one(qry)| Get one record using the specified query|\n|fetch(qry)| Get list of records using the specified query|\n|fetch_raw(qry) | Get result using the specified query; no record serialization is done|\n|fetch_by_field(field, value, cols)| Get a list of records where field==value|\n|fetch_where(where_clauses, cols)| Get a list of records using a where clause list (AND only)|\n|fetch_all() | Get all records|\n|insert(record, cols)| Insert a record, optionally returning values|\n|insert_pk(record)| Insert a record and return the primary key value|\n|delete_pk(pk_value)| Delete a record by primary key value|\n|delete_where(where_clauses)| Delete records by where clause list (AND only)|\n|map_result_id(result) | Return a dict from a result list, where the key is the primary key|\n|valid_pk(pk_value)| Check if a given pk exists|\n|exec(sql, values, cls, useCls) | Execute a raw query and return the result|\n|exists(field, value, pk_to_skip)| Check if a field has a given value other than in the record specified by primary key|\n|update(record, pk_value) | Updates a record|\n|update_where(record, where_list)|Updates one or more records using a where clause list|\n|count()| Get number of rows|\n|count_where(where_list)| Count rows using a where clause list|\n\n\n## Running tests\n\nTo run the tests, you should have both tox and tox-docker, as well as a local docker daemon. Make sure the current user has\naccess to the docker daemon.\n```python\n$ pip3 install tox tox-docker\n$ tox \n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/oddbit-project/rick_db",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rick-db",
    "package_url": "https://pypi.org/project/rick-db/",
    "platform": null,
    "project_url": "https://pypi.org/project/rick-db/",
    "project_urls": {
      "Homepage": "https://github.com/oddbit-project/rick_db"
    },
    "release_url": "https://pypi.org/project/rick-db/1.0.9/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "SQL database layer",
    "version": "1.0.9",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17047904,
  "releases": {
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "21e28a43e4f0bbfa4069c3343acba5847dc1894e1456a4d6ad06114beb035316",
          "md5": "73a3a75aae54c24ac9677b418dc06610",
          "sha256": "a8d9fa4cf29fbc61f04b2fc81c569e9ddbfa42f93ff0642a1a50aad54012ef52"
        },
        "downloads": -1,
        "filename": "rick-db-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "73a3a75aae54c24ac9677b418dc06610",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24872,
        "upload_time": "2023-02-26T12:25:13",
        "upload_time_iso_8601": "2023-02-26T12:25:13.327733Z",
        "url": "https://files.pythonhosted.org/packages/21/e2/8a43e4f0bbfa4069c3343acba5847dc1894e1456a4d6ad06114beb035316/rick-db-1.0.9.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "21e28a43e4f0bbfa4069c3343acba5847dc1894e1456a4d6ad06114beb035316",
        "md5": "73a3a75aae54c24ac9677b418dc06610",
        "sha256": "a8d9fa4cf29fbc61f04b2fc81c569e9ddbfa42f93ff0642a1a50aad54012ef52"
      },
      "downloads": -1,
      "filename": "rick-db-1.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "73a3a75aae54c24ac9677b418dc06610",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 24872,
      "upload_time": "2023-02-26T12:25:13",
      "upload_time_iso_8601": "2023-02-26T12:25:13.327733Z",
      "url": "https://files.pythonhosted.org/packages/21/e2/8a43e4f0bbfa4069c3343acba5847dc1894e1456a4d6ad06114beb035316/rick-db-1.0.9.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}