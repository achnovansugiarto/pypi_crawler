{
  "info": {
    "author": "AndrÃ© Moreira Souza",
    "author_email": "msouza.andre@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# python-som\n\nImplementation of the 2D self-organizing map, with support for NumPy arrays and Pandas DataFrames.\nMost features were implemented using NumPy, with Scikit-learn for standardization and PCA operations.\n\n## Features\n\n* Stepwise and batch training\n* Random weight initialization\n* Random sampling weight initialization\n* Linear weight initialization (with PCA)\n* Automatic selection of map size ratio (with PCA)\n* Support for cyclic arrays, for toroidal or spherical maps\n* Gaussian and Bubble neighborhood functions\n* Support for custom decay functions\n* Support for visualization (U-matrix, activation matrix)\n* Support for supervised learning (label map)\n* Support for NumPy arrays, Pandas DataFrames and regular lists of values\n\n## Usage\nIn the following code excerpt (also available in [test.py](./test.py)) is an example of instantiation and training of a SOM with the Iris dataset:\n```python\n# Import python_som\nimport python_som\n# Import NumPy and Pandas for storing data\nimport numpy as np\nimport pandas as pd\n# Import libraries for plotting results\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Load Iris dataset and columns of features and labels\niris = sns.load_dataset('iris')\ntarget = iris.iloc[:, -1].to_numpy()\niris = iris.iloc[:, :-1].to_numpy()\n# Transform labels into numeric codes for plotting\ntg = np.zeros(len(target), dtype=int)\ntg[target == 'setosa'] = 0\ntg[target == 'versicolor'] = 1\ntg[target == 'virginica'] = 2\n\n# Instantiate SOM from  python_som\n# Selecting shape automatically (providing dataset for constructor)\n# Using default decay and distance functions\n# Using gaussian neighborhood function\n# Using cyclic arrays in the vertical and horizontal directions\nsom = python_som.SOM(x=20, y=None, input_len=iris.shape[1], learning_rate=0.5, neighborhood_radius=1.0,\n        neighborhood_function='gaussian', cyclic_x=True, cyclic_y=True, data=iris)\n\n# Initialize weights of the SOM with linear initialization\nsom.weight_initialization(mode='linear', data=iris)\n\n# Training SOM with default number of iterations\n# Using batch learning process\nsom.train(data=iris, n_iteration=len(iris), mode='batch', verbose=True)\n\n# Calculating distance matrix for plotting\numatrix = som.distance_matrix().T\n\n# Plotting U-matrix with seaborn/matplotlib\nplt.figure(figsize=som.get_shape())\nplt.pcolor(umatrix, cmap='bone_r')\n\nmarkers = ['o', 's', 'D']\ncolors = ['C0', 'C1', 'C2']\nfor cnt, xx in enumerate(iris):\n    w = som.winner(xx)  # getting the winner\n    plt.plot(w[0] + .5, w[1] + .5, markers[tg[cnt]], markerfacecolor='None',\n             markeredgecolor=colors[tg[cnt]], markersize=12, markeredgewidth=2)\nplt.axis([0, som.get_shape()[0], 0, som.get_shape()[1]])\nplt.show()\n\n```\n\n### Test output\nThe following image is generated from the previous test code, with the U-matrix of the trained SOM, and the distribution of the instances from the Iris dataset.\nIn this graph, the instances are mapped to the self-organizing map, with color codes for each different label:\n* Setosa: blue circle\n* Versicolor: orange square\n* Virginica: green diamond\n\n![Test code output](./test_output_iris.png?raw=true)\n\n## Public methods and functions\nThe following are lists of public methods and functions currently available in the SOM class. The full documentation of each method can be found in the [source code](./python_som/__init__.py):\n\n### Utility functions\n* _asymptotic_decay\n* _linear_decay\n* _exponential_decay\n* _inverse_decay\n* _euclidean_distance\n\n### SOM public methods\n* SOM\n* SOM.get_shape\n* SOM.get_weights\n* SOM.set_learning_rate\n* SOM.set_neighborhood_radius\n* SOM.activate\n* SOM.winner\n* SOM.quantization\n* SOM.quantization_error\n* SOM.distance_matrix\n* SOM.activation_matrix\n* SOM.winner_map\n* SOM.label_map\n* SOM.train\n* SOM.weight_initialization\n\n## References\nThis implemetation was based on the following paper, by Professor Teuvo Kohonen:\n\nTeuvo Kohonen,\nEssentials of the self-organizing map,\nNeural Networks,\nVolume 37,\n2013,\nPages 52-65,\nISSN 0893-6080,\nhttps://doi.org/10.1016/j.neunet.2012.09.018.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/andremsouza/python-som",
    "keywords": "som kohonen-map self-organizing-map machine-learning",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-som",
    "package_url": "https://pypi.org/project/python-som/",
    "platform": null,
    "project_url": "https://pypi.org/project/python-som/",
    "project_urls": {
      "Bug Reports": "https://github.com/andremsouza/python-som/issues",
      "Homepage": "https://github.com/andremsouza/python-som",
      "Source": "https://github.com/andremsouza/python-som"
    },
    "release_url": "https://pypi.org/project/python-som/0.0.1a2/",
    "requires_dist": [
      "numpy",
      "pandas",
      "scikit-learn"
    ],
    "requires_python": ">=3",
    "summary": "Python implementation of the Self-Organizing Map",
    "version": "0.0.1a2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14935343,
  "releases": {
    "0.0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8890065d3088f23a132b1d9554f77e027aabf127cdbfff2c035b40fc7ba13085",
          "md5": "30121499f06320e69d994fcd74a5f2cb",
          "sha256": "5ffca936783f0fa2137742b0482f8f06350fddf3f1b171d2605efaf3e87418cf"
        },
        "downloads": -1,
        "filename": "python_som-0.0.1a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30121499f06320e69d994fcd74a5f2cb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 10375,
        "upload_time": "2022-08-30T13:02:25",
        "upload_time_iso_8601": "2022-08-30T13:02:25.524575Z",
        "url": "https://files.pythonhosted.org/packages/88/90/065d3088f23a132b1d9554f77e027aabf127cdbfff2c035b40fc7ba13085/python_som-0.0.1a1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1a2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "043f9b9870d3f7b6fe92ded1d8eb0a5953441306713612394a776bb6291be15c",
          "md5": "cfd541e35fc560dd81620b108db77e11",
          "sha256": "5d4c96ebd286ded89d552d8a58e1347904eba099e5d367fd8016ebe6ba0f0f27"
        },
        "downloads": -1,
        "filename": "python_som-0.0.1a2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cfd541e35fc560dd81620b108db77e11",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3",
        "size": 10542,
        "upload_time": "2022-08-30T13:04:47",
        "upload_time_iso_8601": "2022-08-30T13:04:47.048887Z",
        "url": "https://files.pythonhosted.org/packages/04/3f/9b9870d3f7b6fe92ded1d8eb0a5953441306713612394a776bb6291be15c/python_som-0.0.1a2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "043f9b9870d3f7b6fe92ded1d8eb0a5953441306713612394a776bb6291be15c",
        "md5": "cfd541e35fc560dd81620b108db77e11",
        "sha256": "5d4c96ebd286ded89d552d8a58e1347904eba099e5d367fd8016ebe6ba0f0f27"
      },
      "downloads": -1,
      "filename": "python_som-0.0.1a2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cfd541e35fc560dd81620b108db77e11",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3",
      "size": 10542,
      "upload_time": "2022-08-30T13:04:47",
      "upload_time_iso_8601": "2022-08-30T13:04:47.048887Z",
      "url": "https://files.pythonhosted.org/packages/04/3f/9b9870d3f7b6fe92ded1d8eb0a5953441306713612394a776bb6291be15c/python_som-0.0.1a2-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}