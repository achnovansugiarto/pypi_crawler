{
  "info": {
    "author": "CTLearn Team",
    "author_email": "d.nieto@ucm.es",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\nCTLearn: Deep Learning for IACT Event Reconstruction\n====================================================\n\n\n.. image:: https://zenodo.org/badge/DOI/10.5281/zenodo.3342952.svg\n   :target: https://doi.org/10.5281/zenodo.3342952\n   :alt: DOI\n\n\n.. image:: https://img.shields.io/pypi/v/ctlearn\n    :target: https://pypi.org/project/ctlearn/\n    :alt: Latest Release\n\n\n.. image:: images/CTLearnTextCTinBox_WhiteBkgd.png\n   :target: images/CTLearnTextCTinBox_WhiteBkgd.png\n   :alt: CTLearn Logo\n\n\nCTLearn is a package under active development to run deep learning models to analyze data from all major current and future arrays of Imaging Atmospheric Cherenkov Telescopes (IACTs). CTLearn can load data from `CTA <https://www.cta-observatory.org/>`_ (Cherenkov Telescope Array), `FACT <https://www.isdc.unige.ch/fact/>`_\\ , `H.E.S.S. <https://www.mpi-hd.mpg.de/hfm/HESS/>`_\\ , `MAGIC <https://magic.mpp.mpg.de/>`_\\ , and `VERITAS <https://veritas.sao.arizona.edu/>`_ telescopes processed by `ctapipe <https://github.com/cta-observatory/ctapipe>`_ or `DL1DataHandler <https://github.com/cta-observatory/dl1-data-handler>`_.\n\nInstall CTLearn\n---------------\n\nInstall a released version\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDownload and install `Anaconda <https://www.anaconda.com/download/>`_\\ , or, for a minimal installation, `Miniconda <https://conda.io/miniconda.html>`_.\n\nThe following command will set up a conda virtual environment, add the\nnecessary package channels, and install CTLearn specified version and its dependencies:\n\n.. code-block:: bash\n\n   CTLEARN_VER=0.6.1\n   wget https://raw.githubusercontent.com/ctlearn-project/ctlearn/v$CTLEARN_VER/environment.yml\n   conda env create -n [ENVIRONMENT_NAME] -f environment.yml\n   conda activate [ENVIRONMENT_NAME]\n   pip install ctlearn==$CTLEARN_VER\n   ctlearn -h\n\n\nThis should automatically install all dependencies (NOTE: this may take some time, as by default MKL is included as a dependency of NumPy and it is very large).\n\n\nInstalling with pip/setuptools from source for development\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nClone the CTLearn repository:\n\n.. code-block:: bash\n\n   cd </ctlearn/installation/path>\n   git clone https://github.com/ctlearn-project/ctlearn.git\n\nFirst, install Anaconda by following the instructions above. Create a new conda environment that includes all the dependencies for CTLearn:\n\n.. code-block:: bash\n\n   conda env create -f </installation/path>/ctlearn/environment.yml\n\nFinally, install CTLearn into the new conda environment via pypi:\n\n.. code-block:: bash\n\n   conda activate ctlearn\n   pip install ctlearn==0.6.1\n\nor with pip from source:\n\n.. code-block:: bash\n\n   conda activate ctlearn\n\n   cd <ctlearn/installation/path>/ctlearn\n   pip install .\n\nNOTE for developers: If you wish to fork/clone the repository and edit the code, install with ``pip -e``.\n\nDependencies\n^^^^^^^^^^^^\n\n\n* Python==3.9\n* TensorFlow==2.8\n* tf2onnx==1.11\n* ctapipe==0.15.0\n* DL1DataHandler==0.10.7\n* NumPy\n* PyYAML\n* Pandas\n* Libraries used only in plotting scripts (optional)\n\n  * Matplotlib\n  * Scikit-learn\n  * pyirf\n  * ctaplot\n\nDownload Data\n-------------\n\nCTLearn can load and process data in the HDF5 PyTables format produced from simtel files by `ctapipe <https://github.com/cta-observatory/ctapipe>`_ and `DL1DataHandler <https://github.com/cta-observatory/dl1-data-handler>`_.\n\nConfigure a Run\n---------------\n\nCTLearn encourages reproducible training and prediction by keeping all run settings in a single YAML configuration file, organized into the sections listed below. The `example config file <config/example_config.yml>`_ describes every available setting and its possible values in detail. Predefined default CTLearn models are shipped with the installation and can be constructed via ``--default_model,-d`` from the command line.\n\nLogging\n^^^^^^^\n\nSpecify model directory to store TensorFlow checkpoints and summaries, a timestamped copy of the run configuration, and optionally a timestamped file with logging output.\n\nData\n^^^^\n\nDescribe the dataset to use and relevant settings for loading and processing it. The parameters in this section are used to initialize a DL1DataReader, which loads the data files, maps the images from vectors to arrays, applies preprocessing, and returns the data as an iterator. Data can be loaded in two modes:\n\n\n* Mono: single images of one telescope type\n* Stereo: events of one or multiple telescope types\n\nParameters in this section include telescope IDs to select, auxiliary parameters to return, pre-selection cuts, image mapping settings, and pre-processing to apply to the data. Image mapping is performed by the DL1DataReader and maps the 1D pixel vectors in the raw data into 2D images. The available mapping methods are oversampling, nearest interpolation, rebinning, bilinear interpolation and bicubic interpolation, image shifting, and axial addressing.\nPre-processing is performed using the DL1DataHandler Transform class.\n\nInput\n^^^^^\n\nSet parameters of the KerasBatchGenerator that converts the loaded, processed data into generator of batches for the Keras application. Stereoscopic images can be concatenated via the ``concat_telescopes`` flag.\n\nModel\n^^^^^\n\nCTLearn works with any TensorFlow-Keras model obeying the signature of a backbone_model (``backbone, backbone_inputs = backbone_model(data, model_params)`` where ``backbone`` is a TensorFlow-Keras (sub)model with model inputs ``backbone_inputs``, ``data`` is a KerasBatchGenerator, and ``model_params`` is a dictionary of model parameters) and a head_model (``logits, losses, loss_weights, metrics = head_model(backbone_output, tasks, model_params)`` where ``backbone_output`` is an output of a TensorFlow-Keras backbone model, ``tasks`` is a list of reconstruction tasks, ``model_params`` is a dictionary of model parameters, and ``logits``, ``losses``, ``loss_weights``, ``metrics`` are lists of self-explanatory outputs correspondent to the selected tasks).\n\nTo use a custom model, provide in this section the directory containing a Python file that implements the model and the module name (that is, the file name minus the .py extension) and name of the model function within the module.\n\nIn addition, CTLearn includes two main models for gamma/hadron classification, energy and arrival direction regression. ``SingleCNN`` analyzes single telescope images using a convolutional neural network (CNN) or multiple residual blocks of convolutional layers (ResNet). Stereoscopic images can be concatenated beforehand (in the ``Input`` config section) to be analyzed by the ``SingleCNN`` model. ``CNN-RNN`` performs array-level reconstruction by feeding the output of a CNN or a ResNet for each telescope into either a recurrent neural network (RNN). All models are built on generic functions from ``basic.py`` and ``resnet_engine.py``. In addition, three different attention mechanisms are implemented in ``attention.py``.\n\nModel Parameters\n^^^^^^^^^^^^^^^^\n\nThis section in its entirety is directly included as the model ``params``\\ , enabling arbitrary configuration parameters to be passed to the provided model.\n\nTraining\n^^^^^^^^\n\nSet training parameters such as the training/validation split, the number of epochs to run, as well as hyperparameters including the base learning rate and optimizer.\n\nPrediction\n^^^^^^^^^^\n\nSpecify prediction settings such as the path to write the prediction file and whether to save the labels and example identifiers along with the predictions.\n\nTensorFlow\n^^^^^^^^^^\n\nSet whether to run TensorFlow in debug mode.\n\nRun a Model\n-----------\n\nRun CTLearn from the command line:\n\n.. code-block:: bash\n\n   ctlearn [-h] [--config_file,-c CONFIG_FILE] [--input,-i INPUT] [--pattern,-p PATTERN [PATTERN ...]] [--mode,-m MODE] [--output,-o OUTPUT] [--reco,-r RECO [RECO ...]]\n                [--default_model,-d DEFAULT_MODEL] [--cleaned_images | --no-cleaned_images] [--pretrained_weights,-w PRETRAINED_WEIGHTS] [--tel_types,-t TEL_TYPES [TEL_TYPES ...]] [--allowed_tels,-a ALLOWED_TELS [ALLOWED_TELS ...]]\n                [--size_cut,-z SIZE_CUT] [--leakage_cut,-l LEAKAGE_CUT] [--multiplicity_cut,-u MULTIPLICITY_CUT] [--num_epochs,-e NUM_EPOCHS] [--batch_size,-b BATCH_SIZE] [--random_seed,-s RANDOM_SEED]\n                [--log_to_file] [--debug]\n\noptional arguments:\n  ``-h, --help``\\\n                        show this help message and exit\n  ``--config_file,-c CONFIG_FILE``\\\n                        Path to YAML configuration file with training options\n  ``--input,-i INPUT [INPUT ...]``\\\n                        Input directories (not required when file_list is set in the config file)\n  ``--pattern,-p PATTERN [PATTERN ...]``\\\n                        Pattern to mask unwanted files from the data input directory\n  ``--mode,-m MODE``\\\n                        Mode to run CTLearn; valid options: train, predict, or train_and_predict\n  ``--output,-o OUTPUT``\\\n                        Output directory, where the logging, model weights and processed output files are stored\n  ``--reco,-r RECO [RECO ...]``\\\n                        Reconstruction task to perform; valid options: particletype, energy, and/or direction\n  ``--default_model,-d DEFAULT_MODEL``\\\n                        Default CTLearn Model; valid options: TRN (mono), mergedTRN (stereo), and CNNRNN (stereo)\n  ``--cleaned_images, --no-cleaned_images``\\\n                        Flag, if the network should be trained with cleaned images (default: False)\n  ``--pretrained_weights,-w PRETRAINED_WEIGHTS``\\\n                        Path to the pretrained weights\n  ``--tel_types,-t TEL_TYPES [TEL_TYPES ...]``\\\n                        Selection of telescope types; valid option: LST_LST_LSTCam, LST_MAGIC_MAGICCam, MST_MST_FlashCam, MST_MST_NectarCam, SST_SCT_SCTCam, and/or SST_ASTRI_ASTRICam\n  ``--allowed_tels,-a ALLOWED_TELS [ALLOWED_TELS ...]``\\\n                        List of allowed tel_ids, others will be ignored. Selected tel_ids will be ignored, when their telescope type is not selected\n  ``--size_cut,-z SIZE_CUT``\\\n                        Hillas intensity cut to perform\n  ``--leakage_cut,-l LEAKAGE_CUT``\\\n                        Leakage intensity cut to perform\n  ``--multiplicity_cut,-u MULTIPLICITY_CUT``\\\n                        Multiplicity cut to perform\n  ``--num_epochs,-e NUM_EPOCHS``\\\n                        Number of epochs to train\n  ``--batch_size,-b BATCH_SIZE``\\\n                        Batch size per worker\n  ``--random_seed,-s RANDOM_SEED``\\\n                        Selection of random seed (4 digits)\n  ``--log_to_file``\\\n                        Log to a file in model directory instead of terminal\n  ``--debug``\\\n                        Print debug/logger messages\n\nAlternatively, import CTLearn as a module in a Python script:\n\n.. code-block:: python\n\n   import yaml\n   from ctlearn.run_model import run_model\n\n   with open('myconfig.yml', 'r') as myconfig:\n     config = yaml.load(myconfig)\n   run_model(config, mode='train', debug=True, log_to_file=True)\n\nView training progress in real time with TensorBoard: \n\n.. code-block:: bash\n\n   tensorboard --logdir=/path/to/my/model_dir\n\n\nSupplementary Scripts\n---------------------\n\n* **run_ctlearn_on_Wilkes3.sh** Launch CTLearn runs on Wilkes-3 via Slurm workload manager. \n* **plot_classifier_values.py** Plot a histogram of gamma/hadron classification values from a CTLearn predictions file.\n* **plot_roc_curves.py** Plot gamma/hadron classification ROC curves from a list of CTLearn predictions files.\n* [Deprecated] **run_multiple_configurations.py** Generate a list of configuration combinations and run a model for each, for example, to conduct a hyperparameter search or to automate training or prediction for a set of models. Parses a standard CTLearn configuration file with two additional sections for Multiple Configurations added. Has an option to resume from a specific run in case the execution is interrupted.\n* [Deprecated] **auto_configuration.py** Fill the path information specific to your computer and run this script from a folder with any number of configuration files to automatically overwrite them.\n* [Deprecated] **summarize_results.py** Run this script from the folder containing the ``runXX`` folders generated by the ``run_multiple_configurations.py`` script to generate a ``summary.csv`` file with key validation metrics after training of each run.\n\nUninstall CTLearn\n-----------------\n\nRemove Anaconda Environment\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFirst, remove the conda environment in which CTLearn is installed and all its dependencies:\n\n.. code-block:: bash\n\n   conda remove --name ctlearn --all\n\nRemove CTLearn\n^^^^^^^^^^^^^^\n\nNext, completely remove CTLearn from your system:\n\n.. code-block:: bash\n\n   rm -rf </installation/path>/ctlearn\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/ctlearn-project/ctlearn",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ctlearn",
    "package_url": "https://pypi.org/project/ctlearn/",
    "platform": null,
    "project_url": "https://pypi.org/project/ctlearn/",
    "project_urls": {
      "Homepage": "https://github.com/ctlearn-project/ctlearn"
    },
    "release_url": "https://pypi.org/project/ctlearn/0.6.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Deep learning for analysis and classification of image data for Imaging Atmospheric Cherenkov Telescopes, especially the Cherenkov Telescope Array (CTA).",
    "version": "0.6.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14450060,
  "releases": {
    "0.5.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4514fba648f2b826b2c41a1bf2d30c1f8a800473f3a1aef88ca9c0724f012e5",
          "md5": "935c098e6ffd411b2f618ce9a6e65e26",
          "sha256": "199233436912ad3d85331491c68fbcea9889f011873b3b68bf1ca0e7c7a2157f"
        },
        "downloads": -1,
        "filename": "ctlearn-0.5.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "935c098e6ffd411b2f618ce9a6e65e26",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24456,
        "upload_time": "2021-03-07T20:35:55",
        "upload_time_iso_8601": "2021-03-07T20:35:55.224800Z",
        "url": "https://files.pythonhosted.org/packages/b4/51/4fba648f2b826b2c41a1bf2d30c1f8a800473f3a1aef88ca9c0724f012e5/ctlearn-0.5.0.post1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0.post2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "254f200376160875343cc36737d71362c3375e47a18a3f49d5dae4e1dd8f4253",
          "md5": "c8cd25476ce54240aff36af4db456d23",
          "sha256": "8ff4bd9374d4e21159b16d91859e207485ff6660882ae70d14d0c6cf32133033"
        },
        "downloads": -1,
        "filename": "ctlearn-0.5.0.post2.tar.gz",
        "has_sig": false,
        "md5_digest": "c8cd25476ce54240aff36af4db456d23",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 24531,
        "upload_time": "2021-03-08T12:03:21",
        "upload_time_iso_8601": "2021-03-08T12:03:21.914822Z",
        "url": "https://files.pythonhosted.org/packages/25/4f/200376160875343cc36737d71362c3375e47a18a3f49d5dae4e1dd8f4253/ctlearn-0.5.0.post2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0.post3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6200bafdd984ec596a8f6076f24743eeb0c5c585db959e3e6918327161a11bd5",
          "md5": "79d6b93ed37d243f8df13e45e5a632a4",
          "sha256": "f67f614fcde5aa7c8f5188fd84ce49977a4bd1c8b9b60f0271927b04106ad423"
        },
        "downloads": -1,
        "filename": "ctlearn-0.5.0.post3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79d6b93ed37d243f8df13e45e5a632a4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27494,
        "upload_time": "2021-03-08T13:49:11",
        "upload_time_iso_8601": "2021-03-08T13:49:11.679779Z",
        "url": "https://files.pythonhosted.org/packages/62/00/bafdd984ec596a8f6076f24743eeb0c5c585db959e3e6918327161a11bd5/ctlearn-0.5.0.post3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fc82d5bc9e6feb7f23f56c1ad0bff098a27029915d61a68750436c6194fe6eb2",
          "md5": "5f813ac5be615105bac055074cedf21e",
          "sha256": "27f8a8b419317ac71d803d32783d2146a96c7ad36c16f5aff0e4853acd7f1f4e"
        },
        "downloads": -1,
        "filename": "ctlearn-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f813ac5be615105bac055074cedf21e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30747,
        "upload_time": "2021-12-10T17:08:33",
        "upload_time_iso_8601": "2021-12-10T17:08:33.873793Z",
        "url": "https://files.pythonhosted.org/packages/fc/82/d5bc9e6feb7f23f56c1ad0bff098a27029915d61a68750436c6194fe6eb2/ctlearn-0.5.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "70978c96d25344f57cfbe1beabef1c625daa878ca3188a5f2284d9764d27f173",
          "md5": "7f39eb552846fa7119dd8643f07d21c5",
          "sha256": "0669bf1e34ab324c25bf3ad16c095862a16fec734d9f147ad88337f149a2a7bd"
        },
        "downloads": -1,
        "filename": "ctlearn-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f39eb552846fa7119dd8643f07d21c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30741,
        "upload_time": "2022-02-02T12:02:13",
        "upload_time_iso_8601": "2022-02-02T12:02:13.188507Z",
        "url": "https://files.pythonhosted.org/packages/70/97/8c96d25344f57cfbe1beabef1c625daa878ca3188a5f2284d9764d27f173/ctlearn-0.5.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "406f45353fc5a06d86495d43fe101412dde163c41234da9ff5a74c00bb19030f",
          "md5": "c00f6e2d2ea309e8d085c265abec93a5",
          "sha256": "faa5cce328629b22603a0c0fd04254bebc92853ff2a5da11c3fe021f9c911f03"
        },
        "downloads": -1,
        "filename": "ctlearn-0.6.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c00f6e2d2ea309e8d085c265abec93a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 35778,
        "upload_time": "2022-03-31T15:51:45",
        "upload_time_iso_8601": "2022-03-31T15:51:45.583507Z",
        "url": "https://files.pythonhosted.org/packages/40/6f/45353fc5a06d86495d43fe101412dde163c41234da9ff5a74c00bb19030f/ctlearn-0.6.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7a272c11c89d6cb915ae6756aa6e28d0f1e05cbfebc4be16c054d4bc8adf3448",
          "md5": "4664bb8f62757df6d6ccf2505224dda5",
          "sha256": "4e2fa4cc2b984a9686797b9bced9dae4171bfef2b99f4b24ab582cdb8d82b631"
        },
        "downloads": -1,
        "filename": "ctlearn-0.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4664bb8f62757df6d6ccf2505224dda5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 39503,
        "upload_time": "2022-07-15T22:52:37",
        "upload_time_iso_8601": "2022-07-15T22:52:37.153049Z",
        "url": "https://files.pythonhosted.org/packages/7a/27/2c11c89d6cb915ae6756aa6e28d0f1e05cbfebc4be16c054d4bc8adf3448/ctlearn-0.6.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "7a272c11c89d6cb915ae6756aa6e28d0f1e05cbfebc4be16c054d4bc8adf3448",
        "md5": "4664bb8f62757df6d6ccf2505224dda5",
        "sha256": "4e2fa4cc2b984a9686797b9bced9dae4171bfef2b99f4b24ab582cdb8d82b631"
      },
      "downloads": -1,
      "filename": "ctlearn-0.6.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4664bb8f62757df6d6ccf2505224dda5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 39503,
      "upload_time": "2022-07-15T22:52:37",
      "upload_time_iso_8601": "2022-07-15T22:52:37.153049Z",
      "url": "https://files.pythonhosted.org/packages/7a/27/2c11c89d6cb915ae6756aa6e28d0f1e05cbfebc4be16c054d4bc8adf3448/ctlearn-0.6.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}