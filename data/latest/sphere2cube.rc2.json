{
  "info": {
    "author": "Tudor Brindus",
    "author_email": "me@tbrindus.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Artistic Software"
    ],
    "description": "sphere2cube [![PyPI version](https://badge.fury.io/py/sphere2cube.svg)](https://pypi.python.org/pypi/sphere2cube) [![PyPI](https://img.shields.io/pypi/pyversions/sphere2cube.svg)](https://pypi.python.org/pypi/sphere2cube)\n===========\n\n`sphere2cube` is a Python script to map equirectangular (cylindrical\nprojection, skysphere) map into 6 cube (cubemap, skybox) faces. See also\n[cube2sphere](https://github.com/Xyene/cube2sphere).\n\nUsage\n=====\n\n    $ sphere2cube -h\n    usage: sphere2cube [-h] [-v] [-r <size>] [-R <rx> <ry> <rz>] [-p <pattern>]\n                       [-o <dir>] [-f <name>] [-b <path>] [-t <count>] [-V]\n                       [<source>]\n\n    Maps an equirectangular (cylindrical projection, skysphere) map into 6 cube\n    (cubemap, skybox) faces.\n\n    positional arguments:\n      <source>              source equirectangular image filename\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -v, --version         show program's version number and exit\n      -r <size>, --resolution <size>\n                            resolution for each generated cube face (defaults to 1024)\n      -R <rx> <ry> <rz>, --rotation <rx> <ry> <rz>\n                            rotation in degrees to apply before rendering cube\n                            faces (z is up)\n      -F <angle>, --fov <angle>\n                            field of view of camera used for rendering cube faces\n      -p <pattern>, --path <pattern>\n                            filename pattern for rendered faces: default is\n                            \"face_%n_%r\", where %n is replaced by the face number\n                            and %r by the resolution\n      -o <dir>, --output-dir <dir>\n                            directory to save rendered faces to (it must already\n                            exist)\n      -f <name>, --format <name>\n                            format to use when saving faces, i.e. \"PNG\" or \"TGA\"\n      -b <path>, --blender-path <path>\n                            filename of the Blender executable (defaults to\n                            \"blender\")\n      -t <count>, --threads <count>\n                            number of threads to use when rendering (1-64)\n      -V, --verbose         enable verbose logging\n\nSupported output formats depend on the Blender installation, but will\ngenerally be TGA, IRIS, JPEG, MOVIE, IRIZ, RAWTGA, AVIRAW, AVIJPEG, PNG,\nBMP, and FRAMESERVER.\n\n`sphere2cube` can be run in a headless environment (e.g., a server).\n\nExamples\n========\n\nFor instance, to render a 2048-resolution TGA cubemap from `source.jpg`,\nwe could use the following command:\n\n    $ sphere2cube source.jpg -r2048 -fTGA\n\nThis would generate `face_1_2048.tga`, â€¦, `face_6_2048.tga` in the\nworking directory.\n\nInstallation\n============\n\n`sphere2cube` can be easily installed with `pip`. It requires a Python 3\ninstallation, and at least [Blender 2.8](https://www.blender.org/).\n\nIt assumes that Blender is installed and the `blender` executable is\nlisted in the system PATH environment variable. If it is not possible\nfor PATH to be edited (as in the case of an unprivileged user), the path\nto the `blender` executable may instead be passed through the `-b` flag.\n\nWindows\n-------\n\nInstall Blender, and add `blender.exe` to `PATH`. Finally,\n\n    pip install sphere2cube\n\nLinux\n-----\n\n    $ apt-get install blender\n    $ pip install sphere2cube\n\nMac OS X\n--------\n\nSimilar to Windows, install [Blender], and add the `blender` executable\nto `$PATH`. Then,\n\n    $ pip install sphere2cube",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://github.com/Xyene/sphere2cube",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sphere2cube",
    "package_url": "https://pypi.org/project/sphere2cube/",
    "platform": "",
    "project_url": "https://pypi.org/project/sphere2cube/",
    "project_urls": {
      "Homepage": "http://github.com/Xyene/sphere2cube"
    },
    "release_url": "https://pypi.org/project/sphere2cube/0.3.0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Utility to map an equirectangular (cylindrical projection; skysphere) map into 6 cube (cubemap; skybox) faces",
    "version": "0.3.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6931499,
  "releases": {
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2e27d0e397407267580b0e397a1f1f6363ecc825fdebb973b862a8de26a50661",
          "md5": "dce32f4b2d3d08ae03efbe13c12f4730",
          "sha256": "f4bae3af9003a696eb712dd0f64fd010accf94a302e7fc1cb4f8f7b9102df966"
        },
        "downloads": -1,
        "filename": "sphere2cube-0.1.8.zip",
        "has_sig": false,
        "md5_digest": "dce32f4b2d3d08ae03efbe13c12f4730",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 107797,
        "upload_time": "2015-08-31T00:37:34",
        "upload_time_iso_8601": "2015-08-31T00:37:34.486510Z",
        "url": "https://files.pythonhosted.org/packages/2e/27/d0e397407267580b0e397a1f1f6363ecc825fdebb973b862a8de26a50661/sphere2cube-0.1.8.zip",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d33af55bd0dcfa2ddf8191d53dbbd487b5d1be07adf826ec88db59df4bdadd6f",
          "md5": "2d6424db174490f93cdda958e624aa0c",
          "sha256": "366b4e5d330d377c240c9e6d33f4236fef5d0d10b404d143e2350fc6875f9b94"
        },
        "downloads": -1,
        "filename": "sphere2cube-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2d6424db174490f93cdda958e624aa0c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 134975,
        "upload_time": "2020-04-01T21:48:40",
        "upload_time_iso_8601": "2020-04-01T21:48:40.967405Z",
        "url": "https://files.pythonhosted.org/packages/d3/3a/f55bd0dcfa2ddf8191d53dbbd487b5d1be07adf826ec88db59df4bdadd6f/sphere2cube-0.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d33af55bd0dcfa2ddf8191d53dbbd487b5d1be07adf826ec88db59df4bdadd6f",
        "md5": "2d6424db174490f93cdda958e624aa0c",
        "sha256": "366b4e5d330d377c240c9e6d33f4236fef5d0d10b404d143e2350fc6875f9b94"
      },
      "downloads": -1,
      "filename": "sphere2cube-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2d6424db174490f93cdda958e624aa0c",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 134975,
      "upload_time": "2020-04-01T21:48:40",
      "upload_time_iso_8601": "2020-04-01T21:48:40.967405Z",
      "url": "https://files.pythonhosted.org/packages/d3/3a/f55bd0dcfa2ddf8191d53dbbd487b5d1be07adf826ec88db59df4bdadd6f/sphere2cube-0.3.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}