{
  "info": {
    "author": "Algorithms Path",
    "author_email": "support@algorithmspath.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# KMP Utilities\n\nThe KMP utils library provides a python binding to C++ for fast, linear time string processing. Currently available for linux only.\n\n## Installation\n\nYou can install the `kmp_utils` library with the following command:\n\n    pip install kmp_utils\n\nThen import into your program as:\n\n    import kmp_utils\n\n    def main():\n        s = \"aabaaba\"\n        t = \"ab\"\n        x = kmp_utils.split(s, t)\n        print(x)\n        pass\n\n    if __name__ == '__main__':\n        main()\n\n    >>> ['a', 'a', 'a']\n\nThis library requires pybind11 and python >= 3\n\n## Examples\n\nThe `kmp_utils` library consists of 5 API methods.\n\n`find_all(s, t)`. Reading from left to right starting from the beginning of string `s`, find all disjoint occurrences of string `t` in `s` by returning the starting indices of any such occurrences. This returns an increasing list.\n\n    find_all(\"aaaaaa\", \"aa\") = [0, 2, 4]\n    find_all(\"aabaaba\", \"ab\") = [1, 4]\n    find_all(\"sdsdsd\", \"ab\") = []\n\n`find_all_left(s, t)`. Reading from right to left starting from the end of string `s`, find all disjoint occurrences of string `t` in `s` by returning the starting indices of any such occurrences. This returns a decreasing list.\n\n    find_all_left(\"aaabbb\", \"aa\") = [1]\n    find_all_left(\"aabaaba\", \"ab\") = [4, 1]\n    find_all_left(\"sdsdsd\", \"ab\") = []\n\n`get_next_right(s, i, t)`. Reading from left to right starting from index `i` in string `s`, find the next occurence of string `t` in `s` by returning the starting index. Returns `-1` if `t` cannot be found.\n\n    get_next_right(\"aaaaaa\", 5, \"aa\") = -1\n    get_next_right(\"aabaaba\", 3, \"ab\") = 4\n    get_next_right(\"sdsdsd\", 0, \"ab\") = -1\n\n`get_next_left(s, i, t)`. Reading from right to left starting from index `i` in string `s`, find the next occurence of string `t` in `s` by returning the starting index. Returns `-1` if `t` cannot be found.\n\n    get_next_left(\"aaaaa\", 1, \"aa\") = 0\n    get_next_left(\"aaaaa\", 1, \"aaa\") = -1\n    get_next_left(\"ababaabb\", 6, \"ab\") = 5\n\n`split(s, t)`. Split string `s` by `t` starting from the beginning of `s`.\n\n    split(\"aaaaa\", \"aa\") = ['', '', 'a']\n    split(\"axbxcx\", \"x\") = ['a', 'b', 'c']\n    split(\"ababaabb\", \"xs\") = ['ababaabb']\n\n## Performance Testing\n\nWe compare a linear python iteration with the `kmp_utils.find_all` method with the following code.\n\n    import kmp_utils\n    import time\n    from typing import List\n\n    def python_kmp_find_all(text: str, pattern: str) -> List[int]:\n        result = []\n        prefixTable = computePrefixTable(pattern)\n        index = KMPAlgorithm(text, pattern, 0, prefixTable)\n        while index != -1:\n            result.append(index)\n            index = KMPAlgorithm(text, pattern, index + len(pattern), prefixTable)\n\n        return result\n\n    def KMPAlgorithm(text: str, pattern: str, index: int, prefixTable: List[int]) -> int:\n        n = len(text)\n        m = len(pattern)\n        if n-index < m or m == 0:\n            return -1\n        i = index\n        j = 0\n        while i < n:\n            if text[i] == pattern[j]:\n                i += 1\n                j += 1\n                if j == m:\n                    return i-m\n                continue\n            while j > 0 and pattern[j] != text[i]:\n                j = prefixTable[j-1]\n            if j == 0 and pattern[j] != text[i]:\n                i += 1\n\n        return -1\n\n    def computePrefixTable(pattern: str) -> List[int]:\n        m = len(pattern)\n        prefixTable = [0 for i in range(0,m)]\n        j = 0\n        for i in range(1,m):\n            while j > 0 and pattern[j] != pattern[i]:\n                j = prefixTable[j-1]\n            if pattern[j] == pattern[i]:\n                j += 1\n            prefixTable[i] = j\n        return prefixTable\n\n    def p1():\n        n = 1000000\n        s1 = 'a' * n\n        s2 = 'a' * n\n        p1 = 'a' * 10\n        p2 = 'a' * 10\n\n        t1 = time.time()\n        x1 = kmp_utils.find_all(s1, p1)\n        dt = time.time() - t1\n        print(f'kmp_utils time: {dt} seconds')\n\n        t1 = time.time()\n        x2 = python_kmp_find_all(s2, p2)\n        dt = time.time() - t1\n        print(f'kmp algorithm in python time: {dt} seconds')\n\n        assert(len(x1) == len(x2))\n\n        for i in range(0, len(x1)):\n            assert x1[i] == x2[i]\n\n\n    def main():\n        p1()\n        pass\n\n    if __name__ == '__main__':\n        main()\n\n    >>> kmp_utils time: 0.009107112884521484 seconds\n    >>> kmp algorithm in python time: 0.40862512588500977 seconds\n\nFor coding interview preparation, please visit [algorithmspath.com] (https://algorithmspath.com).",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://pypi.python.org/pypi/kmp_utils/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kmp-utils",
    "package_url": "https://pypi.org/project/kmp-utils/",
    "platform": "",
    "project_url": "https://pypi.org/project/kmp-utils/",
    "project_urls": {
      "Homepage": "http://pypi.python.org/pypi/kmp_utils/"
    },
    "release_url": "https://pypi.org/project/kmp-utils/1.0.2/",
    "requires_dist": null,
    "requires_python": ">=3",
    "summary": "Implementation of KMP algorithm and simple generalizations.",
    "version": "1.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11136047,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0fa19455a1181b3255962adfb792f7dbd6e4ffa30f94ad7e1e2d9f257d7395ec",
          "md5": "1b9d47be7b841505b3f92d5fd442ab57",
          "sha256": "5115516a6d5d372392ceda0321100cdf9acbc4632121f1bb67a5e3d49589607b"
        },
        "downloads": -1,
        "filename": "kmp_utils-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1b9d47be7b841505b3f92d5fd442ab57",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 3918,
        "upload_time": "2021-08-10T02:15:37",
        "upload_time_iso_8601": "2021-08-10T02:15:37.148842Z",
        "url": "https://files.pythonhosted.org/packages/0f/a1/9455a1181b3255962adfb792f7dbd6e4ffa30f94ad7e1e2d9f257d7395ec/kmp_utils-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "78e394f8cb3067af854e8e137f659d9b0748bb2611bf01d971f404bc0b55c6ad",
          "md5": "97cefe9c2f8eece9007d54ba6a1b6da3",
          "sha256": "0c1449da3788334d6d109aab4ee8e1ca3a8dbd843999203a2c82ff08f68000fc"
        },
        "downloads": -1,
        "filename": "kmp_utils-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "97cefe9c2f8eece9007d54ba6a1b6da3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 4721,
        "upload_time": "2021-08-10T02:39:53",
        "upload_time_iso_8601": "2021-08-10T02:39:53.254011Z",
        "url": "https://files.pythonhosted.org/packages/78/e3/94f8cb3067af854e8e137f659d9b0748bb2611bf01d971f404bc0b55c6ad/kmp_utils-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e20bc3d64e22f2549b3697b97ca6605e76bf8a38b0405bcfd5279e5e5ca67b34",
          "md5": "cf99d1b28c41e6dbc655e0a0f68afa69",
          "sha256": "fe0893beebb822969073256034fe273bb7c1dab7f909ccaa72e9bffb4eebb8d1"
        },
        "downloads": -1,
        "filename": "kmp_utils-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cf99d1b28c41e6dbc655e0a0f68afa69",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3",
        "size": 4738,
        "upload_time": "2021-08-10T02:43:33",
        "upload_time_iso_8601": "2021-08-10T02:43:33.658173Z",
        "url": "https://files.pythonhosted.org/packages/e2/0b/c3d64e22f2549b3697b97ca6605e76bf8a38b0405bcfd5279e5e5ca67b34/kmp_utils-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e20bc3d64e22f2549b3697b97ca6605e76bf8a38b0405bcfd5279e5e5ca67b34",
        "md5": "cf99d1b28c41e6dbc655e0a0f68afa69",
        "sha256": "fe0893beebb822969073256034fe273bb7c1dab7f909ccaa72e9bffb4eebb8d1"
      },
      "downloads": -1,
      "filename": "kmp_utils-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "cf99d1b28c41e6dbc655e0a0f68afa69",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3",
      "size": 4738,
      "upload_time": "2021-08-10T02:43:33",
      "upload_time_iso_8601": "2021-08-10T02:43:33.658173Z",
      "url": "https://files.pythonhosted.org/packages/e2/0b/c3d64e22f2549b3697b97ca6605e76bf8a38b0405bcfd5279e5e5ca67b34/kmp_utils-1.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}