{
  "info": {
    "author": "burakpadr",
    "author_email": "b.padir99@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "ï»¿# Tuxpy\n\nTuxpy is an API. It is developed to run processes located in Tuxdb with Python Programming Language.\n\n**Install:** `$ pip install tuxpy`\n\n# API\n\nTuxpy contains 3 modules. These are client, database and collection.\n\n 1. **client**\n\n\t**Import Notation:** `import tuxpy.client` \n\n\t - `class tuxpy.client.Client(host=\"127.0.0.1\", port=6060)`\n\t \n\t\tIt's a constructor method that connects to the Tuxdb. \n\t\t\n          | parameters | description |\n          |--|--|\n          | host: str | This parameter specifies which host address to connect to. Also host parameter must be the same value as tuxdb's server host value. It is set \"127.0.0.1\" by default.  |\n          |\tport: int\t|  this parameter must be the same value as tuxdb's server port value. It is set 6060 by default. |\n\n\t\t**Client Class Member Functions**\n\n\t\t- `getDatabase(databaseName: str) -> tuxpy.database.Database`\n\t\t\n\t\t\tThis function returns a database object contained in Tuxdb. If there is no database associated with the databaseName parameter, the function creates a new database with the name specified by the databaseName parameter.\n\t\t\t\n          | parameters | description  |\n          |--|--|\n          | databaseName: str | The name of the database to be accessed. |\n\n\t\t- `getDatabaseNames() -> list`\n\n\t\t\tThis function returns a list of all database names contained in the Tuxdb.\n\t\n2. **database**\n\n\t**Import Notation:** `import tuxpy.database` \n\n\t- `class tuxpy.database.Database(client: tuxpy.client.Client, databaseName: str)`\n\n\t\tThis is a constructor method that returns a database object if there is database associated with the name specified by databaseName parameter. If there is no database, the constructor method creates a database with the name specified by databaseName parameter and then returns a database object.\n\t\t\n      | parameters | description |\n      |--|--|\n      | client: tuxpy.client.Client | It's a Client object connected to the Tuxdb. |\n      |\tdatabaseName: str | The name of the database to be accessed. |\n\n\t\t**Database Class Member Functions**\n\n\t\t - `getCollection(collectionName: str) -> tuxpy.collection.Collection`\n\n\t\t\tThis function returns a collection object found in the currently used database. If there is no collection associated with the collectionName parameter, the function creates a new collection for the used database with the name specified by the collectionName parameter.\n\t\n            | parameters | description |\n            |--|--|\n            | collectionName: str | The name of the collection in the used database. |\n\t\t- `getCollectionNames() -> list`\n\n\t\t\tThis function returns a list of all collections found in the currently used database. \n\n\t\t- `setDatabaseName(newDatabaseName: str) -> dict`\n\n\t\t\tThis function sets the name of used database. Returns a dict that indicates whether the result of the function was successful.\n\n\t\t\t\n           | parameters | description |\n           |--|--|\n           | newDatabaseName: str | The new database name instead of the current name of the used database.|\n\n\n\t\t- `drop() -> dict`\n\n\t\t\tThis function delete the used database from Tuxdb. Returns a dict that indicates whether the result of the function was successful\n\n3. **collection**\n\n\t**Import Notation:** `import tuxpy.collection` \n\n\t- `class tuxpy.collection.Collection(client: tuxpy.client.Client, databaseName: str, collectionName: str)`\n\n\t\tThis constructor method returns a collection object found in the database. If there is no collection associated with the collectionName parameter, the function creates a new collection for the database with the name specified by the collectionName parameter.\n\n\t\n       | parameters | description |\n       |--|--|\n       | client: tuxpy.client.Client | It's a Client object connected to the Tuxdb |\n\t   | databaseName: str | The name of the database to be accessed. |\n\t   | collectionName: str | The name of the collection in database to be accessed in the database. |\n\n\t\t**Client Class Member Functions**\n\n\t\t- `setCollectionName(newCollectionName: str) -> dict`\n\n\t\t\tThis function sets the name of used collection. Returns a dict that indicates whether the result of the function was successful.\n\n\t\t\n             | parameters | description |\n             |--|--|\n             | newCollectionName: str | The new collection name instead of the current name of the used collection. |\n\n\t\t- `getAllObjects() -> list`\n\t\t\t\n\t\t\tReturns a list of all objects found in the used collection.\n\n\t\t- `findFromObjectId(objectId: str) -> dict`\n\n\t\t\tThis function returns a dict of the object content found in the used collection. \n\n\t\t\n            | parameters | description |\n            |--|--|\n            | objectId: str | The ID of object. |\n        - `findOne(query: dict) -> dict`\n\n\t\t\tThis function returns a dict of an object associated the the query.\n\n\t\t\t\n            | parameters  | description |\n            |--|--|\n            | query: dict | The query to catch the object |\n\n\n\t\t- `find(query: dict) -> list`\n\n\t\t\tThis function returns a list of the objects associated with the query.\n\n           | parameters | description |\n           |--|--|\n           | query: dict | The query to catch the objects. |\n\n\t\t - `insert(data: dict) -> dict`\n\n\t\t\tThis function creates a new object into used collection. Returns a dict that indicates whether the result of the function was successful.\n\n           | parameters | description |\n           |--|--|\n           | data: dict | Content of  new object |\n\n\t\t- `updateFromObjectId(objectId: str, updateData: dict) -> dict`\n\n\t\t\tThis function updates a object content associated with the objectId. Returns a dict that indicates whether the result of the function was successful.\n\t\t\t\n           | parameters | description |\n           |--|--|\n           | objectId: str | The ID of object. |\n           | updateData: dict | It contains the names of the elements to be changed and their new values. |\n\n\t\t- `update(query: dict, updateData: dict) -> dict`\n\n\t\t\tThis function updates the objects content associated with the query. Returns a dict that indicates whether the result of the function was successful.\n\n           | parameters | description |\n           |--|--|\n           | query: dict | The query to catch the objects. |\n           | updateData: dict | It contains the names of the elements to be changed and their new values. |\n\n\t\t- `deleteFromObjectId(objectId: str) -> dict`\n\n\t\t\tThis object deletes a object associated with the objectId. Returns a dict that indicates whether the result of the function was successful.\n\n          | parameters | description |\n          |--|--|\n          | objectId: str | The ID of object. |\n\n\t\t- `delete(query: dict) -> dict`\n\n\t\t\tThis object deletes the objects associated with the query. Returns a dict that indicates whether the result of the function was successful.\n\n          | parameters | description |\n          |--|--|\n          | query: dict | The query to catch the objects. |\n\n\t\t- `drop() -> dict`\n\t\t\n\t\t\tThis function deletes the used collection. Returns a dict that indicates whether the result of the function was successful.\n\n\n\n\n\n\t\t\t\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/burakpadr/tuxpy",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tuxpy",
    "package_url": "https://pypi.org/project/tuxpy/",
    "platform": "",
    "project_url": "https://pypi.org/project/tuxpy/",
    "project_urls": {
      "Bug Tracker": "https://github.com/burakpadr/tuxpy/issues",
      "Homepage": "https://github.com/burakpadr/tuxpy"
    },
    "release_url": "https://pypi.org/project/tuxpy/1.1.0/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": "",
    "summary": "This API was created to operate the TuxDB processes with Python Programming Language.",
    "version": "1.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12487538,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2553e372ed1302b76944dfae06ba876189819704201cdb3388d885188d83fb49",
          "md5": "7d091fb74aa7ae2dabc862c8f48cf454",
          "sha256": "0f96ab56707ca4a5cb9cdfd48b71faac85dd8a5d6a937d19fd2a5761af18cb1b"
        },
        "downloads": -1,
        "filename": "tuxpy-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d091fb74aa7ae2dabc862c8f48cf454",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5226,
        "upload_time": "2021-12-30T13:10:15",
        "upload_time_iso_8601": "2021-12-30T13:10:15.821204Z",
        "url": "https://files.pythonhosted.org/packages/25/53/e372ed1302b76944dfae06ba876189819704201cdb3388d885188d83fb49/tuxpy-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a75e8cbff0f76a7707efc8b0b1c1c6a0ada1d3a26e7df07de7ce43545626b744",
          "md5": "082a2189a8a992906728e9de734bd8e8",
          "sha256": "1919455b0e3e87a6edff642e46d1174cb62234bffa8b9bff4c561390e2170f1a"
        },
        "downloads": -1,
        "filename": "tuxpy-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "082a2189a8a992906728e9de734bd8e8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 5570,
        "upload_time": "2021-12-30T13:10:17",
        "upload_time_iso_8601": "2021-12-30T13:10:17.718474Z",
        "url": "https://files.pythonhosted.org/packages/a7/5e/8cbff0f76a7707efc8b0b1c1c6a0ada1d3a26e7df07de7ce43545626b744/tuxpy-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b25ddd4dfd35b353ff56c2e66235021ac4730b7e1591b8343d4b06b5a38e91e2",
          "md5": "fe8c53549e710f87abde81f379533bf0",
          "sha256": "2489736aa8c90bd826ca2680aa7eefc7420ff8a026b1b0303959a61b7418b063"
        },
        "downloads": -1,
        "filename": "tuxpy-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe8c53549e710f87abde81f379533bf0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 5096,
        "upload_time": "2022-01-05T20:20:08",
        "upload_time_iso_8601": "2022-01-05T20:20:08.786371Z",
        "url": "https://files.pythonhosted.org/packages/b2/5d/dd4dfd35b353ff56c2e66235021ac4730b7e1591b8343d4b06b5a38e91e2/tuxpy-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23742b65a2d1c41602eab8a74455a8c8255ca7fdff458c35088389bd6aff0903",
          "md5": "ac57e4a5003be95502d0d771e62cafd3",
          "sha256": "736470c9f9a8da75fd32ef4b384ab94ccd9c678985bddfb8d66444dd99e01d3a"
        },
        "downloads": -1,
        "filename": "tuxpy-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ac57e4a5003be95502d0d771e62cafd3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 4672,
        "upload_time": "2022-01-05T20:20:10",
        "upload_time_iso_8601": "2022-01-05T20:20:10.733193Z",
        "url": "https://files.pythonhosted.org/packages/23/74/2b65a2d1c41602eab8a74455a8c8255ca7fdff458c35088389bd6aff0903/tuxpy-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b25ddd4dfd35b353ff56c2e66235021ac4730b7e1591b8343d4b06b5a38e91e2",
        "md5": "fe8c53549e710f87abde81f379533bf0",
        "sha256": "2489736aa8c90bd826ca2680aa7eefc7420ff8a026b1b0303959a61b7418b063"
      },
      "downloads": -1,
      "filename": "tuxpy-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe8c53549e710f87abde81f379533bf0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 5096,
      "upload_time": "2022-01-05T20:20:08",
      "upload_time_iso_8601": "2022-01-05T20:20:08.786371Z",
      "url": "https://files.pythonhosted.org/packages/b2/5d/dd4dfd35b353ff56c2e66235021ac4730b7e1591b8343d4b06b5a38e91e2/tuxpy-1.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23742b65a2d1c41602eab8a74455a8c8255ca7fdff458c35088389bd6aff0903",
        "md5": "ac57e4a5003be95502d0d771e62cafd3",
        "sha256": "736470c9f9a8da75fd32ef4b384ab94ccd9c678985bddfb8d66444dd99e01d3a"
      },
      "downloads": -1,
      "filename": "tuxpy-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ac57e4a5003be95502d0d771e62cafd3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 4672,
      "upload_time": "2022-01-05T20:20:10",
      "upload_time_iso_8601": "2022-01-05T20:20:10.733193Z",
      "url": "https://files.pythonhosted.org/packages/23/74/2b65a2d1c41602eab8a74455a8c8255ca7fdff458c35088389bd6aff0903/tuxpy-1.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}