{
  "info": {
    "author": "",
    "author_email": "Magne Eik Lauritzen <mag.lauritzen@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "![LICENCE](https://img.shields.io/github/license/nup002/Threaded-VideoCapture)\n[![Flake8](https://github.com/nup002/Threaded-VideoCapture/actions/workflows/flake8.yml/badge.svg)](https://github.com/nup002/Threaded-VideoCapture/actions/workflows/flake8.yml)\n[![PyTest](https://github.com/nup002/Threaded-VideoCapture/actions/workflows/PyTest.yml/badge.svg)](https://github.com/nup002/Threaded-VideoCapture/actions/workflows/PyTest.yml)\n![Version](https://img.shields.io/pypi/v/Threaded-VideoCapture)\n![Python](https://img.shields.io/pypi/pyversions/Threaded-VideoCapture)\n\n# Threaded-VideoCapture\nA direct drop-in replacement for OpenCV's `VideoCapture` that runs in a background thread, allowing the main thread to \ndo useful work instead of waiting on frames. \n\nThis library is useful if your code spend a lot of time waiting for new frames, or if you are processing a stream in \nrealtime and cannot process frames fast enough to keep up with the stream.\n\n`Threaded-VideoCapture` requires `opencv-python` 4.0.0.21 or greater. It has been tested on Python 3.6, 3.7, 3.8. 3.9, \n3.10, and 3.11, and is thoroughly typed.\n\nIt is a young library. Therefore bugs may exist, and useful features may be missing. Bug reports, \nfeature requests, and pull requests are therefore highly appreciated!\n\n\n## Installation\n`Threaded-VideoCapture` is available from PyPi. Run the following in a command line terminal:\n\n`pip install threaded-videocapture`\n\n## Simple example\n`Threaded-VideoCapture` can be used exactly like the normal `VideoCapture`:\n```\nimport cv2\nfrom threaded_videocapture import ThreadedVideoCapture\n\nwith ThreadedVideoCapture(0) as tvc:  # Open webcam stream\n    while True:\n        ret, frame = tvc.read()\n        if ret:  # ret is True if a frame was obtained with tvc.read()\n            cv2.imshow('frame', frame) \n        if ret is None:  # ret is None if tvc has stopped.\n            print(\"End of stream.\")\n            break\n        if cv2.waitKey(1) == ord('q'):\n            break\n```\n\n# Documentation\n`ThreadedVideoCapture` creates a background thread with a `VideoCapture` instance in it. This instance will \ncontinuously read frames and place them on a FIFO queue. When you call `ThreadedVideoCapture.read()`, the oldest\nframe is returned from the queue. If there are no frames in the queue, a `(False, None)` tuple is returned.\n\nAn instantiated `ThreadedVideoCapture` will eventually stop yielding frames. This is normal, and occurs for example \nwhen:\n  * There are no more frames in the video file\n  * A stream times out\n  * An exception occurs\n\nWhen `ThreadedVideoCapture` stops, it will place a `(None, None)` tuple on the queue. This signifies that\n`ThreadedVideoCapture.read()` will never yield new frames until a new source has been opened with\n`ThreadedVideoCapture.open()`. This can also be checked with `ThreadedVideoCapture.is_alive()`.\n\n## Instantiation parameters\n`ThreadedVideoCapture` takes additional parameters compared to `VideoCapture` during instantiation: `frame_queue_size`, \n`timeout`, `poll_rate`, and `logger`. \nThey are explained here.\n\n### Frame queue size\nFrames read by the `VideoCapture` instance in the background thread will be placed on a queue, as explained above. When \nthe queue becomes full, the oldest item is deleted to make room for the new frame. The length of the queue can be \nspecified when instantiating `ThreadedVideoCapture` to suit your needs. Be default, the queue length is 1, meaning that \nonly the most recent frame is available.\n\n### Timeout\nIf `ThreadedVideoCapture` does not receive a new frame within a specified time, it will time out and quit. This is \nuseful for example when you are capturing a stream and you do not know when it will end. The timeout value can be \nchanged at any time. By default, the timeout is set to 1 second. The following example shows how to \nstart a `ThreadedVideoCapture` that will wait indefinitely for a single frame, then change its timeout and quit if \nno frames are received within the timeout value.\n```\nwith ThreadedVideoCapture(0, timeout=None) as tvc:  # Open webcam stream with timeout disabled.\n    # Poll for a single frame for eternity due to no timeout\n    while True:\n        ret, frame = cap.read() \n        if ret:\n            break\n    \n    tvc.timeout = 2.5 # Set timeout to 2.5 seconds\n    # Poll for frames for 2.5 seconds before ThreadedVideoCapture times out\n    while True:\n        ret, frame = tvc.read() \n        if ret is None:  # ret is only None if tvc has stopped.\n            print(\"ThreadedVideoCapture has timed out.\")\n            break\n    \n```\n\n### Polling rate\nYou can limit how often the `VideoCapture` instance calls `grab()` by specifying the polling rate at instantiation, or \nat any other time. By default, it is not limited. \n\n### Logger\nThe `Threaded-VideoCapture` library uses Pythons excellent `logging` library to log events. By default \n`ThreadedVideoCapture` uses its own logger named 'TVC', but you can provide it with a custom logger object at \ninstantiation. The logger is found at `ThreadedVideoCapture.logger`.\n\n## Reusing a ThreadedVideoCapture instance\nYou can open a new video source without having to close your original `ThreadedVideoCapture` instance and creating a \nnew one. Simply call `ThreadedVideoCapture.open()` with your new source parameters. This will release the `VideoCapture`\n instance for your old source, `join` the background thread, and create a new `VideoCapture` in its own thread for the \nnew video source. Example:\n\n```\n# Example showing how to switch to a different webcam after 1 second with the same ThreadedVideoCapture instance.\n\nfrom time import time\nwith ThreadedVideoCapture(0) as tvc:  # Open webcam 0 stream with default settings\n    tick = time()\n    while True:\n        ret, frame = tvc.read()\n        if ret:  # ret is True if a frame was obtained with tvc.read()\n            cv2.imshow('frame', frame) \n        if cv2.waitKey(1) == ord('q'):\n            break\n        # After one second of opening the stream from webcam 0, we switch seamlessly to webcam 1.\n        if time() - tick > 1:\n            tvc.open(1)\n```\n\n## Statistics\nThe current frames per second (FPS) and actual polling rate can be obtained with `ThreadedVideoCapture.fps` and \n`ThreadedVideoCapture.actual_poll_rate`. These values are updated once per second.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT License  Copyright (c) 2O22 Magne Lauritzens  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "threaded-videocapture",
    "package_url": "https://pypi.org/project/threaded-videocapture/",
    "platform": null,
    "project_url": "https://pypi.org/project/threaded-videocapture/",
    "project_urls": {
      "Bug Tracker": "https://github.com/nup002/Threaded-VideoCapture/issues",
      "Homepage": "https://github.com/nup002/threaded-VideoCapture"
    },
    "release_url": "https://pypi.org/project/threaded-videocapture/1.0.1/",
    "requires_dist": [
      "opencv-python>=4.0.0.21"
    ],
    "requires_python": ">=3.6",
    "summary": "OpenCV VideoCapture running in a background thread",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16008443,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab7498aefb36680d254d0c4c47355a0c855f3e62647dfe03e1f9b432b8d16028",
          "md5": "8ec21e617e563d4cb77bf81be0cd9da7",
          "sha256": "34fb9f977a1d843d145384b3510796054cbf5fe5fac40573858ab2060348de51"
        },
        "downloads": -1,
        "filename": "threaded_videocapture-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8ec21e617e563d4cb77bf81be0cd9da7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9763,
        "upload_time": "2022-11-30T09:01:46",
        "upload_time_iso_8601": "2022-11-30T09:01:46.786912Z",
        "url": "https://files.pythonhosted.org/packages/ab/74/98aefb36680d254d0c4c47355a0c855f3e62647dfe03e1f9b432b8d16028/threaded_videocapture-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "882f86513177ed17887d6edd2062571bfa8a765c4d7071e75e692ab557778c40",
          "md5": "d50e03563cf2f805c4c101660c901ee0",
          "sha256": "6db1ecb3b5eb79b37fb10bf5b0d547a191a85802fde4f2735f59a42ab72cb538"
        },
        "downloads": -1,
        "filename": "threaded_videocapture-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d50e03563cf2f805c4c101660c901ee0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24089,
        "upload_time": "2022-11-30T09:01:48",
        "upload_time_iso_8601": "2022-11-30T09:01:48.256301Z",
        "url": "https://files.pythonhosted.org/packages/88/2f/86513177ed17887d6edd2062571bfa8a765c4d7071e75e692ab557778c40/threaded_videocapture-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4bb914ed3c5fe3ae70c11986e41c322ce27bb14c9483f40dcce233ef50495ff9",
          "md5": "baa6903edf3b948fc823618ef1de5890",
          "sha256": "471f6e8ac303c759389629f9702096e1a36202aced3e123dbbf664e54c84d8d6"
        },
        "downloads": -1,
        "filename": "threaded_videocapture-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "baa6903edf3b948fc823618ef1de5890",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 9869,
        "upload_time": "2022-12-06T13:49:29",
        "upload_time_iso_8601": "2022-12-06T13:49:29.909364Z",
        "url": "https://files.pythonhosted.org/packages/4b/b9/14ed3c5fe3ae70c11986e41c322ce27bb14c9483f40dcce233ef50495ff9/threaded_videocapture-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "126d5f00f41ebdc97bbe81e2e7a281d846dd5307f96f45021d67b5a6869c585f",
          "md5": "c3f70661cfefa507907d96b5d6a0e5de",
          "sha256": "2cc7d72f31a70e3594977cd4664b41fe0295f92e83ecf2c793c0a186af677702"
        },
        "downloads": -1,
        "filename": "threaded_videocapture-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c3f70661cfefa507907d96b5d6a0e5de",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24156,
        "upload_time": "2022-12-06T13:49:31",
        "upload_time_iso_8601": "2022-12-06T13:49:31.344683Z",
        "url": "https://files.pythonhosted.org/packages/12/6d/5f00f41ebdc97bbe81e2e7a281d846dd5307f96f45021d67b5a6869c585f/threaded_videocapture-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "4bb914ed3c5fe3ae70c11986e41c322ce27bb14c9483f40dcce233ef50495ff9",
        "md5": "baa6903edf3b948fc823618ef1de5890",
        "sha256": "471f6e8ac303c759389629f9702096e1a36202aced3e123dbbf664e54c84d8d6"
      },
      "downloads": -1,
      "filename": "threaded_videocapture-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "baa6903edf3b948fc823618ef1de5890",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 9869,
      "upload_time": "2022-12-06T13:49:29",
      "upload_time_iso_8601": "2022-12-06T13:49:29.909364Z",
      "url": "https://files.pythonhosted.org/packages/4b/b9/14ed3c5fe3ae70c11986e41c322ce27bb14c9483f40dcce233ef50495ff9/threaded_videocapture-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "126d5f00f41ebdc97bbe81e2e7a281d846dd5307f96f45021d67b5a6869c585f",
        "md5": "c3f70661cfefa507907d96b5d6a0e5de",
        "sha256": "2cc7d72f31a70e3594977cd4664b41fe0295f92e83ecf2c793c0a186af677702"
      },
      "downloads": -1,
      "filename": "threaded_videocapture-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c3f70661cfefa507907d96b5d6a0e5de",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 24156,
      "upload_time": "2022-12-06T13:49:31",
      "upload_time_iso_8601": "2022-12-06T13:49:31.344683Z",
      "url": "https://files.pythonhosted.org/packages/12/6d/5f00f41ebdc97bbe81e2e7a281d846dd5307f96f45021d67b5a6869c585f/threaded_videocapture-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}