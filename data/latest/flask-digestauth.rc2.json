{
  "info": {
    "author": "imacat",
    "author_email": "imacat@mail.imacat.idv.tw",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Flask",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Systems Administration :: Authentication/Directory"
    ],
    "description": "================================\nFlask HTTP Digest Authentication\n================================\n\n\nDescription\n===========\n\n*Flask-DigestAuth* is an `HTTP Digest Authentication`_ implementation\nfor Flask_ applications.  It authenticates the user for the protected\nviews.\n\nHTTP Digest Authentication is specified in `RFC 2617`_.\n\nRefer to the full `Flask-DigestAuth readthedocs documentation`_.\n\n\nWhy HTTP Digest Authentication?\n-------------------------------\n\n*HTTP Digest Authentication* has the advantage that it does not send\nthee actual password to the server, which greatly enhances the\nsecurity.  It uses the challenge-response authentication scheme.  The\nclient returns the response calculated from the challenge and the\npassword, but not the original password.\n\nLog in forms has the advantage of freedom, in the senses of both the\nvisual design and the actual implementation.  You may implement your\nown challenge-response log in form, but then you are reinventing the\nwheels.  If a pretty log in form is not critical to your project, HTTP\nDigest Authentication should be a good choice.\n\nFlask-DigestAuth works with Flask-Login_.  Log in protection can be\nseparated with the authentication mechanism.  You can create protected\nFlask modules without knowing the actual authentication mechanisms.\n\n\nInstallation\n============\n\nYou can install Flask-DigestAuth with ``pip``:\n\n::\n\n    pip install Flask-DigestAuth\n\nYou may also install the latest source from the\n`Flask-DigestAuth GitHub repository`_.\n\n::\n\n    pip install git+https://github.com/imacat/flask-digestauth.git\n\n\nConfiguration\n=============\n\nFlask-DigestAuth takes the configuration ``DIGEST_AUTH_REALM`` as the\nrealm.  The default realm is ``Login Required``.\n\n\nSetting the Password\n====================\n\nThe password hash of the HTTP Digest Authentication is composed of the\nrealm, the username, and the password.  Example for setting the\npassword:\n\n::\n\n    from flask_digest_auth import make_password_hash\n\n    user.password = make_password_hash(realm, username, password)\n\nThe username is part of the hash.  If the user changes their username,\nyou need to ask their password, to generate and store the new password\nhash.\n\n\nFlask-DigestAuth Alone\n======================\n\nFlask-DigestAuth can authenticate the users alone.\n\n\nSimple Applications with Flask-DigestAuth Alone\n-----------------------------------------------\n\nIn your ``my_app.py``:\n\n::\n\n    from flask import Flask, request, redirect\n    from flask_digest_auth import DigestAuth\n\n    app: flask = Flask(__name__)\n    ... (Configure the Flask application) ...\n\n    auth: DigestAuth = DigestAuth()\n    auth.init_app(app)\n\n    @auth.register_get_password\n    def get_password_hash(username: str) -> t.Optional[str]:\n        ... (Load the password hash) ...\n\n    @auth.register_get_user\n    def get_user(username: str) -> t.Optional[t.Any]:\n        ... (Load the user) ...\n\n    @app.get(\"/admin\")\n    @auth.login_required\n    def admin():\n        return f\"Hello, {g.user.username}!\"\n\n    @app.post(\"/logout\")\n    @auth.login_required\n    def logout():\n        auth.logout()\n        return redirect(request.form.get(\"next\"))\n\n\nLarger Applications with ``create_app()`` with Flask-DigestAuth Alone\n---------------------------------------------------------------------\n\nIn your ``my_app/__init__.py``:\n\n::\n\n    from flask import Flask\n    from flask_digest_auth import DigestAuth\n\n    auth: DigestAuth = DigestAuth()\n\n    def create_app(test_config = None) -> Flask:\n        app: flask = Flask(__name__)\n        ... (Configure the Flask application) ...\n\n        auth.init_app(app)\n\n        @auth.register_get_password\n        def get_password_hash(username: str) -> t.Optional[str]:\n            ... (Load the password hash) ...\n\n        @auth.register_get_user\n        def get_user(username: str) -> t.Optional[t.Any]:\n            ... (Load the user) ...\n\n        return app\n\nIn your ``my_app/views.py``:\n\n::\n\n    from my_app import auth\n    from flask import Flask, Blueprint, request, redirect\n\n    bp = Blueprint(\"admin\", __name__, url_prefix=\"/admin\")\n\n    @bp.get(\"/admin\")\n    @auth.login_required\n    def admin():\n        return f\"Hello, {g.user.username}!\"\n\n    @app.post(\"/logout\")\n    @auth.login_required\n    def logout():\n        auth.logout()\n        return redirect(request.form.get(\"next\"))\n\n    def init_app(app: Flask) -> None:\n        app.register_blueprint(bp)\n\n\n\nFlask-Login Integration\n=======================\n\nFlask-DigestAuth works with Flask-Login_.  You can write a Flask\nmodule that requires log in, without specifying how to log in.  The\napplication can use either HTTP Digest Authentication, or the log in\nforms, as needed.\n\nTo use Flask-Login with Flask-DigestAuth,\n``login_manager.init_app(app)`` must be called before\n``auth.init_app(app)``.\n\nThe currently logged-in user can be retrieved at\n``flask_login.current_user``, if any.\n\nThe views only depend on Flask-Login, but not the Flask-DigestAuth.\nYou can change the actual authentication mechanism without changing\nthe views.\n\n\nSimple Applications with Flask-Login Integration\n------------------------------------------------\n\nIn your ``my_app.py``:\n\n::\n\n    import flask_login\n    from flask import Flask, request, redirect\n    from flask_digest_auth import DigestAuth\n\n    app: flask = Flask(__name__)\n    ... (Configure the Flask application) ...\n\n    login_manager: flask_login.LoginManager = flask_login.LoginManager()\n    login_manager.init_app(app)\n\n    @login_manager.user_loader\n    def load_user(user_id: str) -> t.Optional[User]:\n        ... (Load the user with the username) ...\n\n    auth: DigestAuth = DigestAuth()\n    auth.init_app(app)\n\n    @auth.register_get_password\n    def get_password_hash(username: str) -> t.Optional[str]:\n        ... (Load the password hash) ...\n\n    @app.get(\"/admin\")\n    @flask_login.login_required\n    def admin():\n        return f\"Hello, {flask_login.current_user.get_id()}!\"\n\n    @app.post(\"/logout\")\n    @flask_login.login_required\n    def logout():\n        auth.logout()\n        # Do not call flask_login.logout_user()\n        return redirect(request.form.get(\"next\"))\n\n\nLarger Applications with ``create_app()`` with Flask-Login Integration\n----------------------------------------------------------------------\n\nIn your ``my_app/__init__.py``:\n\n::\n\n    from flask import Flask\n    from flask_digest_auth import DigestAuth\n    from flask_login import LoginManager\n\n    auth: DigestAuth = DigestAuth()\n\n    def create_app(test_config = None) -> Flask:\n        app: flask = Flask(__name__)\n        ... (Configure the Flask application) ...\n\n        login_manager: LoginManager = LoginManager()\n        login_manager.init_app(app)\n\n        @login_manager.user_loader\n        def load_user(user_id: str) -> t.Optional[User]:\n            ... (Load the user with the username) ...\n\n        auth.init_app(app)\n\n        @auth.register_get_password\n        def get_password_hash(username: str) -> t.Optional[str]:\n            ... (Load the password hash) ...\n\n        return app\n\nIn your ``my_app/views.py``:\n\n::\n\n    import flask_login\n    from flask import Flask, Blueprint, request, redirect\n    from my_app import auth\n\n    bp = Blueprint(\"admin\", __name__, url_prefix=\"/admin\")\n\n    @bp.get(\"/admin\")\n    @flask_login.login_required\n    def admin():\n        return f\"Hello, {flask_login.current_user.get_id()}!\"\n\n    @app.post(\"/logout\")\n    @flask_login.login_required\n    def logout():\n        auth.logout()\n        # Do not call flask_login.logout_user()\n        return redirect(request.form.get(\"next\"))\n\n    def init_app(app: Flask) -> None:\n        app.register_blueprint(bp)\n\nThe views only depend on Flask-Login, but not the actual\nauthentication mechanism.  You can change the actual authentication\nmechanism without changing the views.\n\n\nSession Integration\n===================\n\nFlask-DigestAuth features session integration.  The user log in\nis remembered in the session.  The authentication information is not\nrequested again.  This is different to the practice of the HTTP Digest\nAuthentication, but is convenient for the log in accounting.\n\n\nLog In Bookkeeping\n==================\n\nYou can register a callback to run when the user logs in, for ex.,\nlogging the log in event, adding the log in counter, etc.\n\n::\n\n    @auth.register_on_login\n    def on_login(user: User) -> None:\n        user.visits = user.visits + 1\n\n\nLog Out\n=======\n\nFlask-DigestAuth supports log out.  The user will be prompted for the\nnew username and password.\n\n\nTest Client\n===========\n\nFlask-DigestAuth comes with a test client that supports HTTP digest\nauthentication.\n\n\nA unittest Test Case\n--------------------\n\n::\n\n    from flask import Flask\n    from flask_digest_auth import Client\n    from flask_testing import TestCase\n    from my_app import create_app\n\n    class MyTestCase(TestCase):\n\n        def create_app(self):\n            app: Flask = create_app({\n                \"TESTING\": True,\n                \"SECRET_KEY\": token_urlsafe(32),\n                \"DIGEST_AUTH_REALM\": \"admin\",\n            })\n            app.test_client_class = Client\n            return app\n\n        def test_admin(self):\n            response = self.client.get(\"/admin\")\n            self.assertEqual(response.status_code, 401)\n            response = self.client.get(\n                \"/admin\", digest_auth=(USERNAME, PASSWORD))\n            self.assertEqual(response.status_code, 200)\n\n\nA pytest Test\n-------------\n\n::\n\n    import pytest\n    from flask import Flask\n    from flask_digest_auth import Client\n    from my_app import create_app\n\n    @pytest.fixture()\n    def app():\n        app: Flask = create_app({\n            \"TESTING\": True,\n            \"SECRET_KEY\": token_urlsafe(32),\n            \"DIGEST_AUTH_REALM\": \"admin\",\n        })\n        app.test_client_class = Client\n        yield app\n\n    @pytest.fixture()\n    def client(app):\n        return app.test_client()\n\n    def test_admin(app: Flask, client: Client):\n        with app.app_context():\n            response = client.get(\"/admin\")\n            assert response.status_code == 401\n            response = client.get(\n                \"/admin\", digest_auth=(USERNAME, PASSWORD))\n            assert response.status_code == 200\n\n\nCopyright\n=========\n\n Copyright (c) 2022-2023 imacat.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\nAuthors\n=======\n\n| imacat\n| imacat@mail.imacat.idv.tw\n| 2022/11/23\n\n.. _HTTP Digest Authentication: https://en.wikipedia.org/wiki/Digest_access_authentication\n.. _RFC 2617: https://www.rfc-editor.org/rfc/rfc2617\n.. _Flask: https://flask.palletsprojects.com\n.. _Flask-DigestAuth GitHub repository: https://github.com/imacat/flask-digestauth\n.. _Flask-DigestAuth readthedocs documentation: https://flask-digestauth.readthedocs.io\n.. _Flask-Login: https://flask-login.readthedocs.io\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/imacat/flask-digestauth",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Flask-DigestAuth",
    "package_url": "https://pypi.org/project/Flask-DigestAuth/",
    "platform": null,
    "project_url": "https://pypi.org/project/Flask-DigestAuth/",
    "project_urls": {
      "Bug Tracker": "https://github.com/imacat/flask-digestauth/issues",
      "Homepage": "https://github.com/imacat/flask-digestauth"
    },
    "release_url": "https://pypi.org/project/Flask-DigestAuth/0.5.0/",
    "requires_dist": [
      "flask",
      "flask-login ; extra == 'flask_login'"
    ],
    "requires_python": ">=3.7",
    "summary": "The Flask HTTP Digest Authentication project.",
    "version": "0.5.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16319327,
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "054bb59acad75e3d01143c077e9f812be220d2a077cdb71919187703e8898fbb",
          "md5": "da0e120fd62cb3333c289697c5e6df4a",
          "sha256": "e1f736882b5d03de1c5655374901e5d564101b0a32f1f3b1cc80e1d071c21c62"
        },
        "downloads": -1,
        "filename": "Flask_DigestAuth-0.4.0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "da0e120fd62cb3333c289697c5e6df4a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16848,
        "upload_time": "2023-01-04T13:33:04",
        "upload_time_iso_8601": "2023-01-04T13:33:04.560856Z",
        "url": "https://files.pythonhosted.org/packages/05/4b/b59acad75e3d01143c077e9f812be220d2a077cdb71919187703e8898fbb/Flask_DigestAuth-0.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "62a26986d80acca83e25cd27d91b0290ca30687e02692823dce00298852f961e",
          "md5": "5f6928af92b5e34238f5b11ad988086a",
          "sha256": "3a549dc6d93407beded27a01a48fb908dc151d7bc455532dbea77f00155ee2e4"
        },
        "downloads": -1,
        "filename": "Flask-DigestAuth-0.4.0.tar.gz",
        "has_sig": true,
        "md5_digest": "5f6928af92b5e34238f5b11ad988086a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20627,
        "upload_time": "2023-01-04T13:33:06",
        "upload_time_iso_8601": "2023-01-04T13:33:06.687418Z",
        "url": "https://files.pythonhosted.org/packages/62/a2/6986d80acca83e25cd27d91b0290ca30687e02692823dce00298852f961e/Flask-DigestAuth-0.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c3a8df4d2683dc307eb81242ad49dcbf3b4b8c587b599336c122cde24b63e9d5",
          "md5": "311cd5be03104a4126e19eae05eb156a",
          "sha256": "f51394df69046041002bf5bf13160bc3c43d0039437d1e54931716e628993aa4"
        },
        "downloads": -1,
        "filename": "Flask_DigestAuth-0.5.0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "311cd5be03104a4126e19eae05eb156a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 16939,
        "upload_time": "2023-01-05T16:25:28",
        "upload_time_iso_8601": "2023-01-05T16:25:28.207904Z",
        "url": "https://files.pythonhosted.org/packages/c3/a8/df4d2683dc307eb81242ad49dcbf3b4b8c587b599336c122cde24b63e9d5/Flask_DigestAuth-0.5.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6c4efffd7851ca200aeeebc863aacccb47b198997249de8c1882ee0b79c217ed",
          "md5": "49eb379b29e4793efd2c046c93246538",
          "sha256": "5b8a92aed06948589101237e3065a8dfc54831127127e2cda68515c88c14ee5d"
        },
        "downloads": -1,
        "filename": "Flask-DigestAuth-0.5.0.tar.gz",
        "has_sig": true,
        "md5_digest": "49eb379b29e4793efd2c046c93246538",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 20753,
        "upload_time": "2023-01-05T16:25:30",
        "upload_time_iso_8601": "2023-01-05T16:25:30.133035Z",
        "url": "https://files.pythonhosted.org/packages/6c/4e/fffd7851ca200aeeebc863aacccb47b198997249de8c1882ee0b79c217ed/Flask-DigestAuth-0.5.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c3a8df4d2683dc307eb81242ad49dcbf3b4b8c587b599336c122cde24b63e9d5",
        "md5": "311cd5be03104a4126e19eae05eb156a",
        "sha256": "f51394df69046041002bf5bf13160bc3c43d0039437d1e54931716e628993aa4"
      },
      "downloads": -1,
      "filename": "Flask_DigestAuth-0.5.0-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "311cd5be03104a4126e19eae05eb156a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 16939,
      "upload_time": "2023-01-05T16:25:28",
      "upload_time_iso_8601": "2023-01-05T16:25:28.207904Z",
      "url": "https://files.pythonhosted.org/packages/c3/a8/df4d2683dc307eb81242ad49dcbf3b4b8c587b599336c122cde24b63e9d5/Flask_DigestAuth-0.5.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6c4efffd7851ca200aeeebc863aacccb47b198997249de8c1882ee0b79c217ed",
        "md5": "49eb379b29e4793efd2c046c93246538",
        "sha256": "5b8a92aed06948589101237e3065a8dfc54831127127e2cda68515c88c14ee5d"
      },
      "downloads": -1,
      "filename": "Flask-DigestAuth-0.5.0.tar.gz",
      "has_sig": true,
      "md5_digest": "49eb379b29e4793efd2c046c93246538",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 20753,
      "upload_time": "2023-01-05T16:25:30",
      "upload_time_iso_8601": "2023-01-05T16:25:30.133035Z",
      "url": "https://files.pythonhosted.org/packages/6c/4e/fffd7851ca200aeeebc863aacccb47b198997249de8c1882ee0b79c217ed/Flask-DigestAuth-0.5.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}