{
  "info": {
    "author": "Kiruse",
    "author_email": "kiruse@kiruse.dev",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PyThreadSwitch\nPython microlibrary to run arbitrary tasks in contexts associated with a single thread.\n\n**CAVEAT:** This library is currently not well tested and requires unit tests for many more different scenarios. Any\ncontribution would be greatly appreciated.\n\n# Installation\nSimply install using `pip install threadswitch`.\n\n# Usage\nThreadSwitch currently implements two kinds of thread contexts:\n\n## PersistentContext\nA context associated with a background thread which must be manually closed. This context is best suited for system\nresources which are restricted to the same thread, such as OpenGL and SQLite3 objects (in a standard CPython installation).\nWhile it provides `start`, `stop`, and `reset` methods to manage thread lifetime, it is recommended to use it with a\ncontext manager (i.e. the `with` keyword).\n\nExample\n-------\n```python\nfrom threadswitch import PersistentContext\nimport sqlite3\n\ndef init_sqlite_ctx(ctx: PersistentContext):\n    ctx.db = sqlite3.connect('my.db')\n\ndef clean_sqlite_ctx(ctx: PersistentContext):\n    ctx.db.close()\n\nwith PersistentContext() as ctx:\n    @ctx.task\n    def execute(sql, params):\n        ctx.db.execute(sql, params)\n\n    # Note: As sqlite3.Cursor objects are also thread-bound, operating on one requires a more complex proxy wrapper.\n    # This is skipped in this simple example usage.\n\n    execute('DROP TABLE foobar').join()\n```\n\n## RebootContext\nA context which automatically terminates its background thread once it's processed its pending task queue. This is\nuseful to simply synchronize access to a common system resource, such as the CLI. When closed, dispatching a new task\nwill automatically restart the background thread.\n\nThe thread can be kept alive past the completion of the queue. This is useful to avoid unnecessary thread creation and\ntermination overhead in a slowly paced environment. It is recommended to use a timeout of a fraction of a second in\ngeneral.\n\nExample\n-------\n```python\nfrom threadswitch import RebootContext\nfrom sys import stdout, stdin\n\nctx = RebootContext(task_wait_time=.1)\nwriteline = ctx.task(stdout.writeline)\nreadline  = ctx.task(stdin.readline)\n\nwriteline('foobar')\nvalue = readline().result()\n```\n\n## Common\nThe above sections outline the differences between the two currently implemented context types, but they share various\ncommon behaviors.\n\n### Tasks\nAs seen in the above examples, one may use `ctx.task` to create a new dispatchable task. Internally, this simply creates\na wrapper function which calls `ctx.dispatch(*args, **kwargs)` upon invocation. They can be used in two different styles:\nthreaded and asyncio styles.\n\nThe `ctx.task` method can also be used as a decorator as follows:\n\n```python\nfrom threadswitch import RebootContext\nfrom sys import stdin\n\nctx = RebootContext(0.5)\n@ctx.task\ndef read(n: int = -1):\n    if n == -1:\n        return stdin.readline()\n    return stdin.read(n)\nread().result()\n```\n\n#### Threaded Style\nThe examples above use \"threaded usage style.\" This style uses `join`, `result`, and `exception` methods on the task\nobjects returned by dispatched tasks to synchronize threads. `join` simply waits until the task completes either by\nreturning a result value, or by raising an exception. `result` retrieves the return value of the task, and `exception`\nretrieves any occurred exception encountered during the task if applicable. If the task is incomplete, implicitly `join`s.\n\nAll of these methods support a `timeout` argument which may be either `None` or a number in seconds.\n\n#### AsyncIO Style\nAlternatively, one may simply `await` any dispatched task. This behaves as one would expect from any other `await` call:\nIf the task was successful, retrieves the result value. If the task encountered an exception, raises the exception in\nthis thread. As this syntax does not support a timeout, one may alternatively use `await asyncio.wait_for(..., timeout=...)`.\n\n\n# License\nMIT License\n\nCopyright (c) 2021 Kiruse\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Kiruse/PyThreadSwitch",
    "keywords": "threading,asyncio,io",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "threadswitch",
    "package_url": "https://pypi.org/project/threadswitch/",
    "platform": "",
    "project_url": "https://pypi.org/project/threadswitch/",
    "project_urls": {
      "Homepage": "https://github.com/Kiruse/PyThreadSwitch"
    },
    "release_url": "https://pypi.org/project/threadswitch/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.0",
    "summary": "\"Run arbitrary tasks in contexts associated with a single thread.\"",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9339495,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f7c9449f079e9bac75e0a1f29283db339e35a83b1256556ca4e802db41f49a07",
          "md5": "4711e22ff9bb1d76315e26a463ce782b",
          "sha256": "54e787999651f61a49b9a2f6b927e8c484aa4ce2454a2ae28b82c375fcd4f663"
        },
        "downloads": -1,
        "filename": "threadswitch-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4711e22ff9bb1d76315e26a463ce782b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.0",
        "size": 7443,
        "upload_time": "2021-02-07T00:49:59",
        "upload_time_iso_8601": "2021-02-07T00:49:59.351785Z",
        "url": "https://files.pythonhosted.org/packages/f7/c9/449f079e9bac75e0a1f29283db339e35a83b1256556ca4e802db41f49a07/threadswitch-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "81de67309f6871401558eb821e19e91ba3c453e4814065455cfb6aefb374b942",
          "md5": "6181ef87ff41b49bb3de0184c20854a9",
          "sha256": "03dadce122c233b3359935b92035e6157b4694027dcbd5a6da42c8c7465ebca7"
        },
        "downloads": -1,
        "filename": "threadswitch-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6181ef87ff41b49bb3de0184c20854a9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.0",
        "size": 9802,
        "upload_time": "2021-02-07T00:50:00",
        "upload_time_iso_8601": "2021-02-07T00:50:00.590790Z",
        "url": "https://files.pythonhosted.org/packages/81/de/67309f6871401558eb821e19e91ba3c453e4814065455cfb6aefb374b942/threadswitch-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f7c9449f079e9bac75e0a1f29283db339e35a83b1256556ca4e802db41f49a07",
        "md5": "4711e22ff9bb1d76315e26a463ce782b",
        "sha256": "54e787999651f61a49b9a2f6b927e8c484aa4ce2454a2ae28b82c375fcd4f663"
      },
      "downloads": -1,
      "filename": "threadswitch-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4711e22ff9bb1d76315e26a463ce782b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.0",
      "size": 7443,
      "upload_time": "2021-02-07T00:49:59",
      "upload_time_iso_8601": "2021-02-07T00:49:59.351785Z",
      "url": "https://files.pythonhosted.org/packages/f7/c9/449f079e9bac75e0a1f29283db339e35a83b1256556ca4e802db41f49a07/threadswitch-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "81de67309f6871401558eb821e19e91ba3c453e4814065455cfb6aefb374b942",
        "md5": "6181ef87ff41b49bb3de0184c20854a9",
        "sha256": "03dadce122c233b3359935b92035e6157b4694027dcbd5a6da42c8c7465ebca7"
      },
      "downloads": -1,
      "filename": "threadswitch-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6181ef87ff41b49bb3de0184c20854a9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.0",
      "size": 9802,
      "upload_time": "2021-02-07T00:50:00",
      "upload_time_iso_8601": "2021-02-07T00:50:00.590790Z",
      "url": "https://files.pythonhosted.org/packages/81/de/67309f6871401558eb821e19e91ba3c453e4814065455cfb6aefb374b942/threadswitch-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}