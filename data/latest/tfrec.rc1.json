{
  "info": {
    "author": "Praful Mohanan",
    "author_email": "praful.mohanan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Scientific/Engineering"
    ],
    "description": "![Tf-rec](https://user-images.githubusercontent.com/45713796/101985944-ee9b5500-3cb0-11eb-882c-ae5145434b80.png)\n\n**Tf-Rec** is a pythonüíª package for building‚öí Recommender Systems. It is built on top of **Keras** and **Tensorflow 2** to utilize _GPU Acceleration_ during training.\n\n# Contents\n\n- [Why Tf-Rec?](#user-content-why-tf-rec-) üßê\n- [Installation](#user-content-installation-) ‚ö°\n- [Quick Start & Docs](#user-content-quick-start--documentation-) üìù\n  - [API Docs](#user-content-api-docs)\n  - [SVD Example](#user-content-svd-example)\n  - [SVD++ Example](#user-content-svd-example-1)\n  - [KFold Cross Validation Example](#user-content-kfold-cross-validation-example)\n- [Supported Algorithms](#user-content-supported-algorithms-) üéØ\n- [Benchmark](#user-content-benchmark-) üî•\n- [Contribute](https://github.com/Praful932/Tf-Rec/blob/main/CONTRIBUTING.md) üòá\n\n### Why Tf-Rec? üßê\n\nThere are several open source libraries which implement popular recommender algorithms in, infact this library is inspired by them - **Surprise** and **Funk-SVD**. However, there is bottleneck in training time, when the training data is huge. This can be solved by using ready frameworks like **Tensorflow 2** & **Keras** which support running computations on GPU thus delivering speed and higher throughput. Building on top of such frameworks also provide us with off the shelf capabilities such as using different optimizers, Data API, exporting the model to other platforms and much more. Tfrec provides _ready implementations of algorithms_ which can be directly used with few lines of Tensorflow Code.\n\n### Installation ‚ö°\n\nThe package is available on PyPi:\n\n`pip install tfrec`\n\n### Quick Start & Documentation üìù\n\n#### API Docs\n\n- [API Documentation](https://tfrec.netlify.app/)\n\n#### SVD Example\n\n```python\nfrom tfrec.models import SVD\nfrom tfrec.datasets import fetch_ml_100k\nfrom tfrec.utils import preprocess_and_split\nimport numpy as np\n\ndata = fetch_ml_100k()\ndataset, user_item_encodings = preprocess_and_split(data)\n\n(x_train, y_train), (x_test, y_test) = dataset\nnum_users = len(np.unique(data['userId']))\nnum_movies = len(np.unique(data['movieId']))\nglobal_mean = np.mean(data['rating'])\n\nmodel = SVD(num_users, num_movies, global_mean)\nmodel.compile(loss = 'mean_squared_error', optimizer = 'adam')\nmodel.fit(x_train, y_train)\n```\n\n```\n2521/2521 [==============================] - 11s 4ms/step - loss: 0.9963\n```\n\n#### SVD++ Example\n\n```python\nfrom tfrec.models import SVDpp\n\nmodel = SVDpp(num_users, num_movies, global_mean)\n# Needs to be called before fitting\nmodel.implicit_feedback(x_train)\nmodel.compile(loss = 'mean_squared_error', optimizer = 'adam')\n\nmodel.fit(x_train, y_train)\n```\n\n```\n2521/2521 [==============================] - 49s 20ms/step - loss: 1.0332\n```\n\n#### KFold Cross Validation Example\n\n```python\nfrom tfrec.utils import cross_validate\nmodel = SVD(num_users, num_movies, global_mean)\nmodel.compile(loss = 'mean_squared_error', optimizer = 'adam', metrics=['mae','RootMeanSquaredError'])\nall_metrics = cross_validate(model, x_train, y_train)\n```\n\n```\nMean Loss : 0.899022102355957\nMean Mae : 0.6596329569816589\nMean Root_mean_squared_error : 0.8578477501869202\n```\n\n### Supported Algorithms üéØ\n\nCurrently the library supports these algorithms:\n\n- **SVD** - Despite the Name, it is different from the Eigen Decomposition of Assymmetric Matrices. In a gist, it approximates a vector for each user and each item. The vector contains latent factors which signify for brevity sake, if the item is a movie the movie vector would represent - how much the movie contains action or romance likewise. Similarly for the user.\n  The predicted rating is given by: <br />\n  ![](https://latex.codecogs.com/png.latex?\\hat{r}_{u,&space;i}&space;=&space;\\bar{r}&space;+&space;b_{u}&space;+&space;b_{i}&space;+&space;\\sum_{f=1}^{F}&space;p_{u,&space;f}&space;*&space;q_{i,&space;f})\n\n- **SVD++** - This is an extension of SVD which incorporates implicit feedback, by also taking into account the interactions between the user and the item by involving another factor. More Precisely, it takes into account the fact that the user has rated an item itself as a preference than an item which the user has not rated.\n  The predicted rating is given by:<br />\n  ![image](https://user-images.githubusercontent.com/45713796/101982506-6ca03180-3c9a-11eb-8285-f9f243ab877c.png)\n\n### Benchmark üî•\n\nBoth of the algorithms were tested on Google Collab using a GPU Runtime. The dataset used was the MovieLens-100k. Default parameters were used for intilization of Model. Optimizer used was **Adam** and batch size used was **128**.\nThese are the 5-Fold Cross Validation Scores:\n\n| Algorithm | Mean MAE | Mean RMSE | Time per Epoch |\n| --------- | -------- | --------- | -------------- |\n| **SVD**   | 0.6701   | 0.8694    | < 3 sec        |\n| **SVD++** | 0.6838   | 0.8862    | < 45 sec       |\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Praful932/tf-rec",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tfrec",
    "package_url": "https://pypi.org/project/tfrec/",
    "platform": "",
    "project_url": "https://pypi.org/project/tfrec/",
    "project_urls": {
      "Homepage": "https://github.com/Praful932/tf-rec"
    },
    "release_url": "https://pypi.org/project/tfrec/1.0.0/",
    "requires_dist": [
      "tensorflow (>=2.0)",
      "numpy (>=1.18.5)",
      "pandas (>=1.1.5)",
      "scikit-learn (>=0.22.2)",
      "requests"
    ],
    "requires_python": ">=3.6",
    "summary": "A recommender library built on top of Tensorflow and     Keras with implementations of SVD and SVD++ algorithms.",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 8944914,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2b852018ea7b8e782ba1228967f440268171ecb2f454726234643572586196e",
          "md5": "740d559a01c4790d8d1c8efbd471b94f",
          "sha256": "fc8b306d97d6b97c4032b161929c22c9f047b6ead384f66f8c7243fdbbbba79e"
        },
        "downloads": -1,
        "filename": "tfrec-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "740d559a01c4790d8d1c8efbd471b94f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 12859,
        "upload_time": "2020-12-20T07:54:52",
        "upload_time_iso_8601": "2020-12-20T07:54:52.730625Z",
        "url": "https://files.pythonhosted.org/packages/a2/b8/52018ea7b8e782ba1228967f440268171ecb2f454726234643572586196e/tfrec-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e36e188e37fd392313a0ff15225f15e88e8531d71817ada6cdad3ab6cd08c103",
          "md5": "c3f178504283a94bfb389c90feb799a1",
          "sha256": "c8528b7007d3eb1984ac64494a2f012f8bd1e26a9ca7c35162e9488995142947"
        },
        "downloads": -1,
        "filename": "tfrec-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c3f178504283a94bfb389c90feb799a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 11703,
        "upload_time": "2020-12-20T07:54:53",
        "upload_time_iso_8601": "2020-12-20T07:54:53.852993Z",
        "url": "https://files.pythonhosted.org/packages/e3/6e/188e37fd392313a0ff15225f15e88e8531d71817ada6cdad3ab6cd08c103/tfrec-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a2b852018ea7b8e782ba1228967f440268171ecb2f454726234643572586196e",
        "md5": "740d559a01c4790d8d1c8efbd471b94f",
        "sha256": "fc8b306d97d6b97c4032b161929c22c9f047b6ead384f66f8c7243fdbbbba79e"
      },
      "downloads": -1,
      "filename": "tfrec-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "740d559a01c4790d8d1c8efbd471b94f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 12859,
      "upload_time": "2020-12-20T07:54:52",
      "upload_time_iso_8601": "2020-12-20T07:54:52.730625Z",
      "url": "https://files.pythonhosted.org/packages/a2/b8/52018ea7b8e782ba1228967f440268171ecb2f454726234643572586196e/tfrec-1.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e36e188e37fd392313a0ff15225f15e88e8531d71817ada6cdad3ab6cd08c103",
        "md5": "c3f178504283a94bfb389c90feb799a1",
        "sha256": "c8528b7007d3eb1984ac64494a2f012f8bd1e26a9ca7c35162e9488995142947"
      },
      "downloads": -1,
      "filename": "tfrec-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c3f178504283a94bfb389c90feb799a1",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 11703,
      "upload_time": "2020-12-20T07:54:53",
      "upload_time_iso_8601": "2020-12-20T07:54:53.852993Z",
      "url": "https://files.pythonhosted.org/packages/e3/6e/188e37fd392313a0ff15225f15e88e8531d71817ada6cdad3ab6cd08c103/tfrec-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}