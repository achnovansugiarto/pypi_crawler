{
  "info": {
    "author": "Olive Link Pty Ltd",
    "author_email": "software@olivelink.net",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Pyramid",
      "Programming Language :: Python"
    ],
    "description": "ctq\n===\n\nA library of resource tree helps targeted at the pyramid framework.\n\nConstructing a resource tree\n----------------------------\n\nPyramid when seeking to find an context object in a resource tree takes a URL\nsuch as ``/books/bible`` and atempts to traverse a root object treating the\nroot object as tree of mappings. So the above URL resolves in the context\nobject of ``root[\"books\"][\"bible\"]``\n\n``ctq`` aids in the construction of these a resource trees by being able to\ndecorate factory methods mapping them to item looksup::\n\n    >>> from ctq import Resourceful, resource\n\n    >>> class Root(Resourceful):\n    ...\n    ...     @resource('books')\n    ...     def get_books(self):\n    ...         return Shelf()\n\n    >>> class Shelf(Resourceful):\n    ...\n    ...     @resource(\"bible\")\n    ...     def get_bible(self):\n    ...         return Bible()\n\n    >>> class Bible(object):\n    ...     pass\n\n\n``Resourceful`` is a class that is intended to be mixed into resource objects\nwith gives a mapping behavior for methods that are decorated with\n``@resource``::\n\n    >>> root = Root()\n    >>> root[\"books\"][\"bible\"]\n    <Bible object at ...>\n\n``Resourceful`` implements caching so subsiquent look ups of the same object result\nin the same object being returned.::\n\n    >>> a = root[\"books\"]\n    >>> b = root[\"books\"]\n    >>> a is b\n    True\n\nThe resource decorator adds ``__parent__`` and ``__name__`` attributes which\npyramid expects for its traversal operations.::\n\n    >>> books = root[\"books\"]\n    >>> books.__name__\n    'books'\n    >>> books.__parent__\n    <Root object at ...>\n\nAdditionally if the factory fucntion returns an object with the parent and name\nattributes already defined then it will not override them. This allows\nsym-links within the traversal tree.::\n\n    >>> class LinkExample(Resourceful):\n    ...\n    ...     @resource('shelf-1')\n    ...     def get_shelf1(self):\n    ...         return Shelf()\n    ...\n    ...     @resource('shelf-2')\n    ...     def get_shelf2(self):\n    ...         return Shelf()\n    ...\n    ...     @resource('shelf-default')\n    ...     def get_shelf_default(self):\n    ...         return self['shelf-1']\n\n    >>> root2 = LinkExample()\n    >>> root2['shelf-1'].__name__\n    'shelf-1'\n    >>> root2['shelf-2'].__name__\n    'shelf-2'\n    >>> root2['shelf-default'].__name__\n    'shelf-1'\n\nEvent Handling\n--------------\n\ncqt provides a function ``emit(target: Any, name: str, data: Optional[dict])``\nwhich creates an event object, searches and calls event handlers starting with\nthe target and bubbeling up to the root of a resource tree.\n\nEvent handlers can be declared using the ``@handle(*event_names, priority:\nOptional[int])`` decorator on an instance method which accepts the paramiter\n``event``.\n\nFor example::\n\n    >>> from ctq import handle\n    >>> from ctq import emit\n\n    >>> class EventTreeRoot(object):\n    ...\n    ...     @handle('after-edit')\n    ...     def on_after_edit(self, event):\n    ...         print(\"Was very edited.\")\n\n    >>> class Foo(object):\n    ...\n    ...     @handle('after-edit')\n    ...     def on_after_edit(self, event):\n    ...         print(\"Was edited.\")\n\n    >>> foo = Foo()\n    >>> foo.__parent__ = EventTreeRoot()\n\n    >>> emit(foo, 'after-edit')\n    Was edited.\n    Was very edited.\n\nWorkflow behavior\n-----------------\n\ncqt provides a ``Workflowable`` class to add workflow behavior to objects this\nadds some methods that are handy in performing workflow state transitions on\nobjects including emmiting events and guarding agenst illegal transitions.\n\nThe current workflow is get/set on the property ``self.workflow_state`` and\ntransitions are defined in the property ``self.workflow_transitions``. Events\nemitted that the form ``workflow-before-ACTION`` and ``workflow-after-ACTION``\n\nFor example::\n\n    >>> from ctq import Workflowable\n\n    >>> class Document(Workflowable):\n    ...\n    ...     workflow_state = \"new\"\n    ...\n    ...     workflow_transitions = {\n    ...         \"submit-for-review\": {\"from\": [\"new\"], \"to\": \"pending-review\"},\n    ...         \"publish\": {\"from\": [\"new\", \"pending-review\"], \"to\": \"public\"},\n    ...         \"retract\": {\"from\": [\"public\"], \"to\": \"retracted\"},\n    ...     }\n    ...\n    ...     @handle(\"workflow-before-publish\")\n    ...     def on_before_publish(self, event):\n    ...         print(\"about to publish\")\n    ...\n    ...     @handle(\"workflow-after-publish\")\n    ...     def on_after_publish(self, event):\n    ...         print(\"published!\")\n\nTo action a workflow transition calle the ``self.workflow_action(action)``\nmethod::\n    \n    >>> doc = Document()\n    >>> doc.workflow_state\n    'new'\n    >>> doc.workflow_action(\"publish\")\n    about to publish\n    published!\n    >>> doc.workflow_state\n    'public'\n    >>> doc.workflow_action(\"publish\")\n    Traceback (most recent call last):\n    ...\n    ctq.workflow.WorkflowIllegalTransitionError: Can not publish on an instance of Document in the state public\n\nHelper methods\n--------------\n\nAdditionally there are some functions that enable performing verious tasks\naround the tree\n\nTraversing back up the tree with ``traverse_up(obj)``::\n\n    >>> from ctq import traverse_up\n\n    >>> context = root[\"books\"][\"bible\"]\n    >>> list(traverse_up(context))\n    [<Bible object at ...>, <Shelf object at ...>, <Root object at ...>]\n\nGetting the root object with ``get_root(obj)``::\n\n    >>> from ctq import get_root\n\n    >>> get_root(context)\n    <Root object at ...>\n\nGetting the path names of an object with ``resource_path_names(obj)``::\n\n    >>> from ctq import resource_path_names\n\n    >>> resource_path_names(context)\n    ('', 'books', 'bible')\n\nUse acquisition using with ``acquire(obj)``::\n\n    >>> from ctq import acquire\n\n    >>> root.site_name = \"Small room with lots of books\"\n    >>> acquire(context).site_name\n    'Small room with lots of books'\n\n\n\n",
    "description_content_type": "text/x-rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/olivelink/ctq",
    "keywords": "traversal context resource",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ctq",
    "package_url": "https://pypi.org/project/ctq/",
    "platform": "",
    "project_url": "https://pypi.org/project/ctq/",
    "project_urls": {
      "Homepage": "https://github.com/olivelink/ctq"
    },
    "release_url": "https://pypi.org/project/ctq/0.1/",
    "requires_dist": [
      "setuptools",
      "cachetools"
    ],
    "requires_python": "",
    "summary": "",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11911112,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "19c497527abcab99120688f8c235d17c2a1e542f86bbba0ca31db1dfaec5c8a4",
          "md5": "a5137c4f30a1f028e5a916939a2910c4",
          "sha256": "592abfc27583f5d8d989d3ad57c9a3b8c69ed7a49ec868de68f132429c22963a"
        },
        "downloads": -1,
        "filename": "ctq-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5137c4f30a1f028e5a916939a2910c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 16289,
        "upload_time": "2021-11-03T04:04:52",
        "upload_time_iso_8601": "2021-11-03T04:04:52.735018Z",
        "url": "https://files.pythonhosted.org/packages/19/c4/97527abcab99120688f8c235d17c2a1e542f86bbba0ca31db1dfaec5c8a4/ctq-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3093b551908db85b3cd6ae66016ec4d67bcbdd51e43b3c409ce64159bfab742f",
          "md5": "20e9a251e1b1afa7d82acd99c74edfb8",
          "sha256": "4e1460f39f2f5bd9b3bc310a6fddcad300b973814bb2c87682203b7df0ba91a5"
        },
        "downloads": -1,
        "filename": "ctq-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "20e9a251e1b1afa7d82acd99c74edfb8",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 14362,
        "upload_time": "2021-11-03T04:04:54",
        "upload_time_iso_8601": "2021-11-03T04:04:54.291074Z",
        "url": "https://files.pythonhosted.org/packages/30/93/b551908db85b3cd6ae66016ec4d67bcbdd51e43b3c409ce64159bfab742f/ctq-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "19c497527abcab99120688f8c235d17c2a1e542f86bbba0ca31db1dfaec5c8a4",
        "md5": "a5137c4f30a1f028e5a916939a2910c4",
        "sha256": "592abfc27583f5d8d989d3ad57c9a3b8c69ed7a49ec868de68f132429c22963a"
      },
      "downloads": -1,
      "filename": "ctq-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a5137c4f30a1f028e5a916939a2910c4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 16289,
      "upload_time": "2021-11-03T04:04:52",
      "upload_time_iso_8601": "2021-11-03T04:04:52.735018Z",
      "url": "https://files.pythonhosted.org/packages/19/c4/97527abcab99120688f8c235d17c2a1e542f86bbba0ca31db1dfaec5c8a4/ctq-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3093b551908db85b3cd6ae66016ec4d67bcbdd51e43b3c409ce64159bfab742f",
        "md5": "20e9a251e1b1afa7d82acd99c74edfb8",
        "sha256": "4e1460f39f2f5bd9b3bc310a6fddcad300b973814bb2c87682203b7df0ba91a5"
      },
      "downloads": -1,
      "filename": "ctq-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "20e9a251e1b1afa7d82acd99c74edfb8",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 14362,
      "upload_time": "2021-11-03T04:04:54",
      "upload_time_iso_8601": "2021-11-03T04:04:54.291074Z",
      "url": "https://files.pythonhosted.org/packages/30/93/b551908db85b3cd6ae66016ec4d67bcbdd51e43b3c409ce64159bfab742f/ctq-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}