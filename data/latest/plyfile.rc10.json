{
  "info": {
    "author": "",
    "author_email": "Darsh Ranjan <dranjan@berkeley.edu>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "![Build Status](https://github.com/dranjan/python-plyfile/actions/workflows/python-package.yml/badge.svg)\n\nWelcome to the `plyfile` Python module, which provides a simple facility\nfor reading and writing ASCII and binary PLY files.\n\nThe PLY format is documented\n[elsewhere](https://web.archive.org/web/20161221115231/http://www.cs.virginia.edu/~gfx/Courses/2001/Advanced.spring.01/plylib/Ply.txt).\n\n# Installation\n\n## Dependencies\n\n- python3 >= 3.7\n- numpy >= 1.17\n\n(`plyfile` may or may not work on older versions.)\n\n### Optional dependencies\n\n- tox (for test suite)\n- pytest (for test suite)\n\n## Installing plyfile\n\nQuick way:\n\n    pip3 install plyfile\n\nOr clone the repository and run from the project root:\n\n    pip3 install .\n\nOr just copy `plyfile.py` into your GPL-compatible project.\n\n## Running test suite\n\nPreferred (more comprehensive; requires tox):\n\n    tox -v --skip-missing-interpreters\n\nAlternate (requires pytest):\n\n    pytest test -v\n\n# Usage\n\nBoth deserialization and serialization of PLY file data is done through\n`PlyData` and `PlyElement` instances.\n\n```Python Console\n>>> from plyfile import PlyData, PlyElement\n```\n\nFor the code examples that follow, assume the file `tet.ply` contains\nthe following text:\n\n    ply\n    format ascii 1.0\n    comment single tetrahedron with colored faces\n    element vertex 4\n    comment tetrahedron vertices\n    property float x\n    property float y\n    property float z\n    element face 4\n    property list uchar int vertex_indices\n    property uchar red\n    property uchar green\n    property uchar blue\n    end_header\n    0 0 0\n    0 1 1\n    1 0 1\n    1 1 0\n    3 0 1 2 255 255 255\n    3 0 2 3 255 0 0\n    3 0 1 3 0 255 0\n    3 1 2 3 0 0 255\n\n(This file is available under the `examples` directory.)\n\n## Reading a PLY file\n\n```Python Console\n>>> plydata = PlyData.read('tet.ply')\n```\n\nor\n\n```Python Console\n>>> with open('tet.ply', 'rb') as f:\n...     plydata = PlyData.read(f)\n```\n\nThe static method `PlyData.read` returns a `PlyData` instance, which is\n`plyfile`'s representation of the data in a PLY file.  A `PlyData`\ninstance has an attribute `elements`, which is a list of `PlyElement`\ninstances, each of which has a `data` attribute which is a `numpy`\nstructured array containing the numerical data.  PLY file elements map\nonto `numpy` structured arrays in a pretty obvious way.  For a list\nproperty in an element, the corresponding `numpy` field type\nis `object`, with the members being `numpy` arrays (see the\n`vertex_indices` example below).\n\nConcretely:\n\n```Python Console\n>>> plydata.elements[0].name\n'vertex'\n>>> plydata.elements[0].data[0]\n(0.0, 0.0, 0.0)\n>>> plydata.elements[0].data['x']\narray([ 0.,  0.,  1.,  1.], dtype=float32)\n>>> plydata['face'].data['vertex_indices'][0]\narray([0, 1, 2], dtype=int32)\n```\n\nFor convenience, elements and properties can be looked up by name:\n\n```Python Console\n>>> plydata['vertex']['x']\narray([ 0.,  0.,  1.,  1.], dtype=float32)\n```\n\nand elements can be indexed directly without explicitly going through\nthe `data` attribute:\n\n```Python Console\n>>> plydata['vertex'][0]\n(0.0, 0.0, 0.0)\n```\n\nThe above expression is equivalent to `plydata['vertex'].data[0]`.\n\n`PlyElement` instances also contain metadata:\n\n```Python Console\n>>> plydata.elements[0].properties\n(PlyProperty('x', 'float'), PlyProperty('y', 'float'),\n PlyProperty('z', 'float'))\n>>> plydata.elements[0].count\n4\n```\n\n`PlyProperty` and `PlyListProperty` instances are used internally as a\nconvenient intermediate representation of PLY element properties that\ncan easily be serialized to a PLY header (using `str`) or converted to\n`numpy`-compatible type descriptions (via the `dtype` method).  It's not\nextremely common to manipulate them directly, but if needed, the\nproperty metadata of an element can be accessed as a tuple via the\n`properties` attribute (as illustrated above) or looked up by name:\n\n```Python Console\n>>> plydata.elements[0].ply_property('x')\nPlyProperty('x', 'float')\n```\n\nMany (but not necessarily all) types of malformed input files will raise\n`PlyParseError` when `PlyData.read` is called.  The string value of the\n`PlyParseError` instance (as well as attributes `element`, `row`, and\n`prop`) provides additional context for the error if applicable.\n\n### Faster reading via memory mapping\n\nTo accelerate parsing of binary data, `plyfile` can make use of\n`numpy`'s memory mapping facilities. The decision to memory map or not\nis made on a per-element basis. To make this determination, there are\ntwo cases to consider.\n\n#### Case 1: elements with no list properties\n\nIf an element in a binary PLY file has no list properties, then it will\nbe memory-mapped by default, subject to the capabilities of the\nunderlying file object. Memory mapping can be disabled using the\n`mmap` argument:\n\n```Python Console\n>>> plydata.text = False\n>>> plydata.byte_order = '<'\n>>> plydata.write('tet_binary.ply')\n>>>\n>>> # `mmap=True` is the default:\n>>> plydata = PlyData.read('tet_binary_ply')\n>>> isinstance(plydata['vertex'].data, numpy.memmap)\nTrue\n>>> plydata = PlyData.read('tet_binary_ply', mmap=False)\n>>> isinstance(plydata['vertex'].data, numpy.memmap)\nFalse\n```\n\n#### Case 2: elements with list properties\n\nIn the general case, elements with list properties cannot be\nmemory-mapped as `numpy` arrays, except in one important case: when\nall list properties have fixed and known lengths. In that case, the\n`known_list_len` argument can be given to `PlyData.read`:\n\n```Python Console\n>>> plydata = PlyData.read('tet_binary.ply',\n...                        known_list_len={'face': {'vertex_indices': 3}})\n>>> isinstance(plydata['face'].data, numpy.memmap)\nTrue\n```\n\nThe implementation will validate the data: if any instance of the list\nproperty has a length other than the value specified, then\n`PlyParseError` will be raised.\n\nNote that in order to enable memory mapping for a given element,\n*all* list properties in the element must have their lengths in the\n`known_list_len` dictionary. If any list property does not have its\nlength given in `known_list_len`, then memory mapping will not be\nattempted, and no error will be raised.\n\n## Creating a PLY file\n\nThe first step is to get your data into `numpy` structured arrays.  Note\nthat there are some restrictions: generally speaking, if you know the\ntypes of properties a PLY file element can contain, you can easily\ndeduce the restrictions.  For example, PLY files don't contain 64-bit\ninteger or complex data, so these aren't allowed.\n\nFor convenience, non-scalar fields **are** allowed; they will be\nserialized as list properties.  For example, when constructing a \"face\"\nelement, if all the faces are triangles (a common occurrence), it's okay\nto have a  \"vertex_indices\" field of type `'i4'` and shape `(3,)`\ninstead of type `object` and shape `()`.  However, if the serialized PLY\nfile is read back in using `plyfile`, the \"vertex_indices\" property will\nbe represented as an `object`-typed field, each of whose values is an\narray of type `'i4'` and length 3.  The reason is simply that the PLY\nformat provides no way to find out that each \"vertex_indices\" field has\nlength 3 without actually reading all the data, so `plyfile` has to\nassume that this is a variable-length property.  However, see below (and\n`examples/plot.py`) for an easy way to recover a two-dimensional array\nfrom a list property, and also see the notes above about the\n`known_list_len` kwarg to speed up the reading of files with lists of\nfixed, known length.\n\nFor example, if we wanted to create the \"vertex\" and \"face\" PLY elements\nof the `tet.ply` data directly as `numpy` arrays for the purpose of\nserialization, we could do (as in `test/test.py`):\n\n```Python Console\n>>> vertex = numpy.array([(0, 0, 0),\n...                       (0, 1, 1),\n...                       (1, 0, 1),\n...                       (1, 1, 0)],\n...                      dtype=[('x', 'f4'), ('y', 'f4'),\n...                             ('z', 'f4')])\n>>> face = numpy.array([([0, 1, 2], 255, 255, 255),\n...                     ([0, 2, 3], 255,   0,   0),\n...                     ([0, 1, 3],   0, 255,   0),\n...                     ([1, 2, 3],   0,   0, 255)],\n...                    dtype=[('vertex_indices', 'i4', (3,)),\n...                           ('red', 'u1'), ('green', 'u1'),\n...                           ('blue', 'u1')])\n```\n\nOnce you have suitably structured array, the static method\n`PlyElement.describe` can then be used to create the necessary\n`PlyElement` instances:\n\n```Python Console\n>>> el = PlyElement.describe(some_array, 'some_name')\n```\n\nor\n\n```Python Console\n>>> el = PlyElement.describe(some_array, 'some_name',\n...                          comments=['comment1',\n...                                    'comment2'])\n```\n\nNote that there's no need to create `PlyProperty` instances explicitly.\nThis is all done behind the scenes by examining `some_array.dtype.descr`.\nOne slight hiccup here is that variable-length fields in a `numpy` array\n(i.e., our representation of PLY list properties)\nmust have a type of `object`, so the types of the list length and values\nin the serialized PLY file can't be obtained from the array's `dtype`\nattribute alone.  For simplicity and predictability, the length\ndefaults to 8-bit unsigned integer, and the value defaults to 32-bit\nsigned integer, which covers the majority of use cases.  Exceptions must\nbe stated explicitly:\n\n```Python Console\n>>> el = PlyElement.describe(some_array, 'some_name',\n...                          val_dtypes={'some_property': 'f8'},\n...                          len_dtypes={'some_property': 'u4'})\n```\n\nNow you can instantiate `PlyData` and serialize:\n\n```Python Console\n>>> PlyData([el]).write('some_binary.ply')\n>>> PlyData([el], text=True).write('some_ascii.ply')\n>>>\n>>> # Force the byte order of the output to big-endian, independently of\n>>> # the machine's native byte order\n>>> PlyData([el],\n...         byte_order='>').write('some_big_endian_binary.ply')\n>>>\n>>> # Use a file object.  Binary mode is used here, which will cause\n>>> # Unix-style line endings to be written on all systems.\n>>> with open('some_ascii.ply', mode='wb') as f:\n...     PlyData([el], text=True).write(f)\n```\n\n## Miscellaneous\n\n### Comments\n\nHeader comments are supported:\n\n```Python Console\n>>> ply = PlyData([el], comments=['header comment'])\n>>> ply.comments\n['header comment']\n```\n\nAs of version 0.3, \"obj_info\" comments are supported as well:\n\n```Python Console\n>>> ply = PlyData([el], obj_info=['obj_info1', 'obj_info2'])\n>>> ply.obj_info\n['obj_info1', 'obj_info2']\n```\n\nWhen written, they will be placed after regular comments after the\n\"format\" line.\n\nComments can have leading whitespace, but trailing whitespace may be\nstripped and should not be relied upon.  Comments may not contain\nembedded newlines.\n\n### Getting a two-dimensional array from a list property\n\nThe PLY format provides no way to assert that all the data for a given\nlist property is of the same length, yet this is a relatively common\noccurrence.  For example, all the \"vertex_indices\" data on a \"face\"\nelement will have length three for a triangular mesh.  In such cases,\nit's usually much more convenient to have the data in a two-dimensional\narray, as opposed to a one-dimensional array of type `object`.  Here's a\npretty easy way to obtain a two dimensional array, assuming we know the\nrow length in advance:\n\n```Python Console\n>>> plydata = PlyData.read('tet.ply')\n>>> tri_data = plydata['face'].data['vertex_indices']\n>>> triangles = numpy.vstack(tri_data)\n```\n\n### Instance mutability\n\nA plausible code pattern is to read a PLY file into a `PlyData`\ninstance, perform some operations on it, possibly modifying data and\nmetadata in place, and write the result to a new file.  This pattern is\npartially supported.  As of version 0.4, the following in-place\nmutations are supported:\n\n- Modifying numerical array data only.\n- Assigning directly to a `PlyData` instance's `elements`.\n- Switching format by changing the `text` and `byte_order` attributes of\n  a `PlyData` instance.   This will switch between `ascii`,\n  `binary_little_endian`, and `binary_big_endian` PLY formats.\n- Modifying a `PlyData` instance's `comments` and `obj_info`, and\n  modifying a `PlyElement` instance's `comments`.\n- Assigning to an element's `data`.  Note that the property metadata in\n  `properties` is not touched by this, so for every property in the\n  `properties` list of the `PlyElement` instance, the `data` array must\n  have a field with the same name (but possibly different type, and\n  possibly in different order).  The array can have additional fields as\n  well, but they won't be output when writing the element to a PLY file.\n  The properties in the output file will appear as they are in the\n  `properties` list.  If an array field has a different type than the\n  corresponding `PlyProperty` instance, then it will be cast when\n  writing.\n- Assigning directly to an element's `properties`.  Note that the\n  `data` array is not touched, and the previous note regarding the\n  relationship between `properties` and `data` still applies: the field\n  names of `data` must be a subset of the property names in\n  `properties`, but they can be in a different order and specify\n  different types.\n- Changing a `PlyProperty` or `PlyListProperty` instance's `val_dtype`\n  or a `PlyListProperty` instance's `len_dtype`, which will perform\n  casting when writing.\n\nModifying the `name` of a `PlyElement`, `PlyProperty`, or\n`PlyListProperty` instance is not supported and will raise an error.  To\nrename a property of a `PlyElement` instance, you can remove the\nproperty from `properties`, rename the field in `data`, and re-add the\nproperty to `properties` with the new name by creating a new\n`PlyProperty` or `PlyListProperty` instance:\n\n```Python Console\n>>> from plyfile import PlyProperty, PlyListProperty\n>>> face = plydata['face']\n>>> face.properties = ()\n>>> face.data.dtype.names = ['idx', 'r', 'g', 'b']\n>>> face.properties = (PlyListProperty('idx', 'uchar', 'int'),\n...                    PlyProperty('r', 'uchar'),\n...                    PlyProperty('g', 'uchar'),\n...                    PlyProperty('b', 'uchar'))\n```\n\nNote that it is always safe to create a new `PlyElement` or `PlyData`\ninstance instead of modifying one in place, and this is the recommended\nstyle:\n\n```Python Console\n>>> # Recommended:\n>>> plydata = PlyData([plydata['face'], plydata['vertex']],\n...                   text=False, byte_order='<')\n>>>\n>>> # Also supported:\n>>> plydata.elements = [plydata['face'], plydata['vertex']]\n>>> plydata.text = False\n>>> plydata.byte_order = '<'\n>>> plydata.comments = []\n>>> plydata.obj_info = []\n```\n\nObjects created by this library don't claim ownership of the other\nobjects they refer to, which has implications for both styles (creating\nnew instances and modifying in place).  For example, a single\n`PlyElement` instance can be contained by multiple `PlyData` instances,\nbut modifying that instance will then affect all of those containing\n`PlyData` instances.\n\n# FAQ\n\n## How do I initialize a list property from two-dimensional array?\n\n```Python Console\n>>> # Here's a two-dimensional array containing vertex indices.\n>>> face_data = numpy.array([[0, 1, 2], [3, 4, 5]], dtype='i4')\n>>>\n>>> # PlyElement.describe requires a one-dimensional structured array.\n>>> ply_faces = numpy.empty(len(faces),\n...                         dtype=[('vertex_indices', 'i4', (3,))])\n>>> ply_faces['vertex_indices'] = face_data\n>>> face = PlyElement.describe(ply_faces, 'face')\n```\n\n## Can I save a PLY file directly to `sys.stdout`?\n\nOn Python 3, you will probably run into issues because `sys.stdout` is a\ntext-mode stream and `plyfile` outputs binary data, even for\nASCII-format PLY files:\n\n```Python Console\n>>> import sys\n>>> plydata.write(sys.stdout)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n    File \".../python-plyfile/plyfile.py\", line 411, in write\n        stream.write(self.header.encode('ascii'))\n        TypeError: write() argument must be str, not bytes\n```\n\nThere are a few ways around this.\n- Write to a named file instead. On Linux and some other Unix-likes, you\n  can access `stdout` via the named file `/dev/stdout`:\n\n    ```Python Console\n    >>> plydata.write('/dev/stdout')\n    ```\n\n- Use `sys.stdout.buffer`:\n\n    ```Python Console\n    >>> plydata.write(sys.stdout.buffer)\n    ```\n\n  (source: https://bugs.python.org/issue4571)\n\n# Design philosophy and rationale\n\nThe design philosophy of `plyfile` can be summed up as follows.\n- Be familiar to users of `numpy` and reuse existing idioms and concepts\n  when possible.\n- Favor simplicity over power or user-friendliness.\n- Support all valid PLY files.\n\n## Familiarity\n\nFor the most part, PLY concepts map nicely to Python and specifically to\n`numpy`, and leveraging that has strongly influenced the design of this\npackage.  The `elements` attribute of a `PlyData` instance is simply a\n`list` of `PlyElement` instances, and the `data` attribute of a\n`PlyElement` instance is a `numpy` array, and a list property field of a\nPLY element datum is referred to in the `data` attribute by a type of\n`object` with the value being another `numpy` array, etc.\n\n## Simplicity\n\nWhen applicable, we favor simplicity over power or user-friendliness.\nThus, list property types in `PlyElement.describe` always default to the\nsame, rather than, say, being obtained by looking at an array element.\n(Which element?  What if the array has length zero?  Whatever default we\ncould choose in that case could lead to subtle edge-case bugs if the\nuser isn't vigilant.)  Also, all input and output is done in \"one shot\":\nall the arrays must be created up front rather than being processed in a\nstreaming fashion.\n\n## Generality and interpretation issues\n\nWe aim to support all valid PLY files. However, exactly what constitutes\na \"valid\" file isn't obvious, since there doesn't seem to be a single\ncomplete and consistent description of the PLY format.  Even the\n\"authoritative\"\n[Ply.txt](https://web.archive.org/web/20161221115231/http://www.cs.virginia.edu/~gfx/Courses/2001/Advanced.spring.01/plylib/Ply.txt)\nby Greg Turk has some issues.\n\n### Comment placement\n\nWhere can comments appear in the header?  It appears that in all the\n\"official\" examples, all comments immediately follow the \"format\" line,\nbut the language of the document neither places any such restrictions\nnor explicitly allows comments to be placed anywhere else.  Thus, it\nisn't clear whether comments can appear anywhere in the header or must\nimmediately follow the \"format\" line.  At least one popular reader of\nPLY files chokes on comments before the \"format\" line.  `plyfile`\naccepts comments anywhere in the header in input but only places them in\na few limited places in output, namely immediately after \"format\" and\n\"element\" lines.\n\n### Element and property names\n\nAnother ambiguity is names: what strings are allowed as PLY element and\nproperty names?  `plyfile` accepts as input any name that doesn't\ncontain spaces, but this is surely too generous.  This may not be such\na big deal, though: although names are theoretically arbitrary, in\npractice, the majority of PLY element and property names probably come\nfrom a small finite set (\"face\", \"x\", \"nx\", \"green\", etc.).\n\n### Property syntax\n\nA more serious problem is that the PLY format specification appears to\nbe inconsistent regarding the syntax of property definitions.  In\nsome examples, it uses the syntax\n\n    property {type} {name}\n\nand in others,\n\n    property {name} {type}\n\n`plyfile` only supports the former, which appears to be standard _de\nfacto_.\n\n### Header line endings\n\nThe specification explicitly states that lines in the header must\nend with carriage returns, but this rule doesn't seem to be followed by\nanyone, including the C-language PLY implementation by Greg Turk, the\nauthor of the format.  Here, we stick to common practice and output\nUnix-style line endings (with no carriage returns) but accept any line\nending style in input files.\n\n# More examples\n\nExamples beyond the scope of this document and the tests are in the\n`examples` directory.\n\n# License\n\nCopyright Darsh Ranjan.\n\nThis software is released under the terms of the GNU General Public\nLicense, version 3.  See the file `COPYING` for details.\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "ply,numpy",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "plyfile",
    "package_url": "https://pypi.org/project/plyfile/",
    "platform": null,
    "project_url": "https://pypi.org/project/plyfile/",
    "project_urls": {
      "Homepage": "https://github.com/dranjan/python-plyfile"
    },
    "release_url": "https://pypi.org/project/plyfile/0.8.1/",
    "requires_dist": [
      "numpy>=1.17"
    ],
    "requires_python": ">=3.7",
    "summary": "PLY file reader/writer",
    "version": "0.8.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17351354,
  "releases": {
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f70fbb87082d8576dfdc3d90bc25d0a93395c79d58914328a9fab87a81007abf",
          "md5": "8e068c527908d1c2b91e59bee5ab7af2",
          "sha256": "8bae3eb27db1e211de285695f43de5241ab2bac3ac0217ebbf55a7f6c785625a"
        },
        "downloads": -1,
        "filename": "plyfile-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "8e068c527908d1c2b91e59bee5ab7af2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 10721,
        "upload_time": "2015-04-19T00:21:07",
        "upload_time_iso_8601": "2015-04-19T00:21:07.588027Z",
        "url": "https://files.pythonhosted.org/packages/f7/0f/bb87082d8576dfdc3d90bc25d0a93395c79d58914328a9fab87a81007abf/plyfile-0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5120cd2d20e6936c31587738f05ec7f96fceeed8e6eb3732f541f760267e8cdb",
          "md5": "ec5a5cedd2a1d5369cad52d982363ca0",
          "sha256": "f1fb84b0985b1c345bbdfce2cf49a6cc2cf0274fa6e57db9cb815be11ddc57b3"
        },
        "downloads": -1,
        "filename": "plyfile-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ec5a5cedd2a1d5369cad52d982363ca0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 12197,
        "upload_time": "2017-02-28T07:04:57",
        "upload_time_iso_8601": "2017-02-28T07:04:57.056833Z",
        "url": "https://files.pythonhosted.org/packages/51/20/cd2d20e6936c31587738f05ec7f96fceeed8e6eb3732f541f760267e8cdb/plyfile-0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fb1b8caed71e07e5240644f205844b72dd8ee1ec203f65f50b63a5d4c27ce57e",
          "md5": "aba0b8cda9a8f059a61cc99b9172d7f1",
          "sha256": "067e384e3723f28dbbd8e8f976a9712dadf6761b2d62c4c1a90821e3c5310bce"
        },
        "downloads": -1,
        "filename": "plyfile-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "aba0b8cda9a8f059a61cc99b9172d7f1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18219,
        "upload_time": "2018-07-28T23:38:19",
        "upload_time_iso_8601": "2018-07-28T23:38:19.209031Z",
        "url": "https://files.pythonhosted.org/packages/fb/1b/8caed71e07e5240644f205844b72dd8ee1ec203f65f50b63a5d4c27ce57e/plyfile-0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b82d4069cbb49954d44087c37ff616cb423d3e2c0dd276378cdb4af3e3ef2ee",
          "md5": "96748d771ecc16d311aec7e567e060a1",
          "sha256": "84ba5ee8c70a4924f64aa7edff5764b929f3b7842d53a3197d0b753818ad7089"
        },
        "downloads": -1,
        "filename": "plyfile-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "96748d771ecc16d311aec7e567e060a1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 18495,
        "upload_time": "2018-12-26T05:37:14",
        "upload_time_iso_8601": "2018-12-26T05:37:14.545335Z",
        "url": "https://files.pythonhosted.org/packages/9b/82/d4069cbb49954d44087c37ff616cb423d3e2c0dd276378cdb4af3e3ef2ee/plyfile-0.7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4c15434d1d96f9a41fea56cb3290718123d651c56c4b7e53f0249acaf1bf34b6",
          "md5": "b35e94427a198a117b2efe86f60c22ba",
          "sha256": "b119705dec157314cf504e9d2d6f7d5a76606495a778b673c2864ac92895dced"
        },
        "downloads": -1,
        "filename": "plyfile-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b35e94427a198a117b2efe86f60c22ba",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 30508,
        "upload_time": "2019-10-09T07:09:03",
        "upload_time_iso_8601": "2019-10-09T07:09:03.638828Z",
        "url": "https://files.pythonhosted.org/packages/4c/15/434d1d96f9a41fea56cb3290718123d651c56c4b7e53f0249acaf1bf34b6/plyfile-0.7.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93c8cf47848cd4d661850e4a8e7f0fc4f7298515e06d0da7255ed08e5312d4aa",
          "md5": "b1408890f8890ebd496c347bbb964066",
          "sha256": "5010d57edf4971287bab71610bdf8df7f600efdbe08b3dcc596328f83cb80550"
        },
        "downloads": -1,
        "filename": "plyfile-0.7.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1408890f8890ebd496c347bbb964066",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 39219,
        "upload_time": "2020-03-22T01:29:51",
        "upload_time_iso_8601": "2020-03-22T01:29:51.439613Z",
        "url": "https://files.pythonhosted.org/packages/93/c8/cf47848cd4d661850e4a8e7f0fc4f7298515e06d0da7255ed08e5312d4aa/plyfile-0.7.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b4bde9c77d26b00474e12b06c8cfd9665e09566ccd4719dfbd7d00fd2df82aa1",
          "md5": "02fbd4f30aa8a685579d52d0ce90e6f3",
          "sha256": "59a25845d00a51098e6c9147c3c96ce89ad97395e256a4fabb4aed7cf7db5541"
        },
        "downloads": -1,
        "filename": "plyfile-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "02fbd4f30aa8a685579d52d0ce90e6f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38511,
        "upload_time": "2020-03-22T01:29:53",
        "upload_time_iso_8601": "2020-03-22T01:29:53.219549Z",
        "url": "https://files.pythonhosted.org/packages/b4/bd/e9c77d26b00474e12b06c8cfd9665e09566ccd4719dfbd7d00fd2df82aa1/plyfile-0.7.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "036ecb64d254c6d474a7cf636a7c7e318ab7c4ec8e4082cabaa2aab81f9b6a65",
          "md5": "174b426d72d4da705036caff5941b5da",
          "sha256": "25b674e94a0db2413cfd188b817f8803745d283e0ff0f2b119755ae9e60ca3f4"
        },
        "downloads": -1,
        "filename": "plyfile-0.7.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "174b426d72d4da705036caff5941b5da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 39580,
        "upload_time": "2021-02-07T01:29:17",
        "upload_time_iso_8601": "2021-02-07T01:29:17.400913Z",
        "url": "https://files.pythonhosted.org/packages/03/6e/cb64d254c6d474a7cf636a7c7e318ab7c4ec8e4082cabaa2aab81f9b6a65/plyfile-0.7.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f19a857b780f02bb2a658faf6cf1da1d919155f57e0b368a56c4ce5866ebef64",
          "md5": "a9c51285d42a76d988b4318c0747f837",
          "sha256": "5ac55b685cfcb3e8f70f3c5c2660bd1f6431a892a5319a612792b1ec09aec0f0"
        },
        "downloads": -1,
        "filename": "plyfile-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a9c51285d42a76d988b4318c0747f837",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39491,
        "upload_time": "2021-02-07T01:29:19",
        "upload_time_iso_8601": "2021-02-07T01:29:19.083331Z",
        "url": "https://files.pythonhosted.org/packages/f1/9a/857b780f02bb2a658faf6cf1da1d919155f57e0b368a56c4ce5866ebef64/plyfile-0.7.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d828a4f08d62adb37c010cf58d04bcff37faa87212ed7acf446eeee9cf75624c",
          "md5": "cf701c933894090421507d5a0555ce11",
          "sha256": "155cdd6033451921203dd050d0a6fded3e4ba9cea5a18a4f64fe06bbc2d0cc3c"
        },
        "downloads": -1,
        "filename": "plyfile-0.7.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf701c933894090421507d5a0555ce11",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 39606,
        "upload_time": "2021-05-03T01:37:16",
        "upload_time_iso_8601": "2021-05-03T01:37:16.014132Z",
        "url": "https://files.pythonhosted.org/packages/d8/28/a4f08d62adb37c010cf58d04bcff37faa87212ed7acf446eeee9cf75624c/plyfile-0.7.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "248e3522cfc24c34df395664bc250f8fc0bc451f5d231dec521b166ecb5ceedc",
          "md5": "458b0df074c373a9a89480aee105a691",
          "sha256": "9e9a18d22a3158fcd74df38761d43a7facc6df75126f2ab9f4e9a5d4d2188652"
        },
        "downloads": -1,
        "filename": "plyfile-0.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "458b0df074c373a9a89480aee105a691",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 39506,
        "upload_time": "2021-05-03T01:37:18",
        "upload_time_iso_8601": "2021-05-03T01:37:18.273566Z",
        "url": "https://files.pythonhosted.org/packages/24/8e/3522cfc24c34df395664bc250f8fc0bc451f5d231dec521b166ecb5ceedc/plyfile-0.7.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d46ac58d24de5df1bb372f7f0d3d234ad84fb21d44f16423da6b482879052e8b",
          "md5": "d32a13fe551a2cfb5633730f4180b597",
          "sha256": "e7dae8562b392dc822c11ed5751ead5cc08ff6c1356767a944c703e2b34cea60"
        },
        "downloads": -1,
        "filename": "plyfile-0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d32a13fe551a2cfb5633730f4180b597",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40517,
        "upload_time": "2023-03-17T16:15:27",
        "upload_time_iso_8601": "2023-03-17T16:15:27.625037Z",
        "url": "https://files.pythonhosted.org/packages/d4/6a/c58d24de5df1bb372f7f0d3d234ad84fb21d44f16423da6b482879052e8b/plyfile-0.8-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "04e1bb3f3fabb405b80de410db953e2b6751e0b5a4ccdca7001f9b474b749839",
          "md5": "ba26830b1b084ad26edd3431c791330d",
          "sha256": "31d0865a06338f0dc2c999da79dc98315f87953c270ff10c62ce7cbd1424888f"
        },
        "downloads": -1,
        "filename": "plyfile-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "ba26830b1b084ad26edd3431c791330d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 33594,
        "upload_time": "2023-03-17T16:15:29",
        "upload_time_iso_8601": "2023-03-17T16:15:29.938303Z",
        "url": "https://files.pythonhosted.org/packages/04/e1/bb3f3fabb405b80de410db953e2b6751e0b5a4ccdca7001f9b474b749839/plyfile-0.8.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "518fa75527e129d8fe50c1a3fc5df06a6fcadfe518690acd1c7295220fb341ff",
          "md5": "e6525a5d66d9a3076f5076952627e63d",
          "sha256": "88d769c498d2e412eb0d068c5ac6f7883f6e4a0ab81e00a173cfa2dbf2f635a7"
        },
        "downloads": -1,
        "filename": "plyfile-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6525a5d66d9a3076f5076952627e63d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 28060,
        "upload_time": "2023-03-19T06:29:30",
        "upload_time_iso_8601": "2023-03-19T06:29:30.414444Z",
        "url": "https://files.pythonhosted.org/packages/51/8f/a75527e129d8fe50c1a3fc5df06a6fcadfe518690acd1c7295220fb341ff/plyfile-0.8.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "be28be72d973cafba1e96c8d97c6fcdf838e798757f2606a03689d5454e83b91",
          "md5": "4cb5a8061c3c52ebce1296fb6ed8a8f3",
          "sha256": "bc61bcb27f37eae77ca6ddb3347a9590271ffcd1c8d5b4d34da95fd58cfcc770"
        },
        "downloads": -1,
        "filename": "plyfile-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4cb5a8061c3c52ebce1296fb6ed8a8f3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33397,
        "upload_time": "2023-03-19T06:29:33",
        "upload_time_iso_8601": "2023-03-19T06:29:33.078844Z",
        "url": "https://files.pythonhosted.org/packages/be/28/be72d973cafba1e96c8d97c6fcdf838e798757f2606a03689d5454e83b91/plyfile-0.8.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "518fa75527e129d8fe50c1a3fc5df06a6fcadfe518690acd1c7295220fb341ff",
        "md5": "e6525a5d66d9a3076f5076952627e63d",
        "sha256": "88d769c498d2e412eb0d068c5ac6f7883f6e4a0ab81e00a173cfa2dbf2f635a7"
      },
      "downloads": -1,
      "filename": "plyfile-0.8.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e6525a5d66d9a3076f5076952627e63d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 28060,
      "upload_time": "2023-03-19T06:29:30",
      "upload_time_iso_8601": "2023-03-19T06:29:30.414444Z",
      "url": "https://files.pythonhosted.org/packages/51/8f/a75527e129d8fe50c1a3fc5df06a6fcadfe518690acd1c7295220fb341ff/plyfile-0.8.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "be28be72d973cafba1e96c8d97c6fcdf838e798757f2606a03689d5454e83b91",
        "md5": "4cb5a8061c3c52ebce1296fb6ed8a8f3",
        "sha256": "bc61bcb27f37eae77ca6ddb3347a9590271ffcd1c8d5b4d34da95fd58cfcc770"
      },
      "downloads": -1,
      "filename": "plyfile-0.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4cb5a8061c3c52ebce1296fb6ed8a8f3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 33397,
      "upload_time": "2023-03-19T06:29:33",
      "upload_time_iso_8601": "2023-03-19T06:29:33.078844Z",
      "url": "https://files.pythonhosted.org/packages/be/28/be72d973cafba1e96c8d97c6fcdf838e798757f2606a03689d5454e83b91/plyfile-0.8.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}