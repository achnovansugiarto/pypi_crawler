{
  "info": {
    "author": "Seldon Technologies Ltd.",
    "author_email": "hello@seldon.io",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Scientific/Engineering"
    ],
    "description": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/SeldonIO/runml-infuse/master/doc/source/_static/runml_infuse_Logo_rgb.png\" alt=\"Alibi Detect Logo\" width=\"50%\">\n</p>\n\n<!--- BADGES: START --->\n\n[![Build Status](https://github.com/SeldonIO/runml-infuse/workflows/CI/badge.svg?branch=master)][#build-status]\n[![Documentation Status](https://readthedocs.org/projects/runml-infuse/badge/?version=latest)][#docs-package]\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/runml-infuse?logo=pypi&style=flat&color=blue)][#pypi-package]\n[![PyPI - Package Version](https://img.shields.io/pypi/v/runml-infuse?logo=pypi&style=flat&color=orange)][#pypi-package]\n[![Conda (channel only)](https://img.shields.io/conda/vn/conda-forge/runml-infuse?logo=anaconda&style=flat&color=orange)][#conda-forge-package]\n[![GitHub - License](https://img.shields.io/github/license/SeldonIO/runml-infuse?logo=github&style=flat&color=green)][#github-license]\n[![Slack channel](https://img.shields.io/badge/chat-on%20slack-e51670.svg)][#slack-channel]\n\n<!--- Hide platform for now as platform agnostic --->\n<!--- [![Conda - Platform](https://img.shields.io/conda/pn/conda-forge/runml-infuse?logo=anaconda&style=flat)][#conda-forge-package]--->\n\n[#github-license]: https://github.com/SeldonIO/runml-infuse/blob/master/LICENSE\n[#pypi-package]: https://pypi.org/project/runml-infuse/\n[#conda-forge-package]: https://anaconda.org/conda-forge/runml-infuse\n[#docs-package]: https://docs.seldon.io/projects/runml-infuse/en/latest/\n[#build-status]: https://github.com/SeldonIO/runml-infuse/actions?query=workflow%3A%22CI%22\n[#slack-channel]: https://join.slack.com/t/seldondev/shared_invite/zt-vejg6ttd-ksZiQs3O_HOtPQsen_labg\n<!--- BADGES: END --->\n---\n\n[Alibi Detect](https://github.com/SeldonIO/runml-infuse) is an open source Python library focused on **outlier**, **adversarial** and **drift** detection. The package aims to cover both online and offline detectors for tabular data, text, images and time series. Both **TensorFlow** and **PyTorch** backends are supported for drift detection.\n*  [Documentation](https://docs.seldon.io/projects/runml-infuse/en/latest/)\n\nFor more background on the importance of monitoring outliers and distributions in a production setting, check out [this talk](https://slideslive.com/38931758/monitoring-and-explainability-of-models-in-production?ref=speaker-37384-latest) from the *Challenges in Deploying and Monitoring Machine Learning Systems* ICML 2020 workshop, based on the paper [Monitoring and explainability of models in production](https://arxiv.org/abs/2007.06299) and referencing Alibi Detect.\n\nFor a thorough introduction to drift detection, check out [Protecting Your Machine Learning Against Drift: An Introduction](https://youtu.be/tL5sEaQha5o). The talk covers what drift is and why it pays to detect it, the different types of drift, how it can be detected in a principled manner and also describes the anatomy of a drift detector.\n\n\n## Table of Contents\n\n\n- [Installation and Usage](#installation-and-usage)\n  - [With pip](#with-pip)\n  - [With conda](#with-conda)\n  - [Usage](#usage)   \n- [Supported Algorithms](#supported-algorithms)\n  - [Outlier Detection](#outlier-detection)\n  - [Adversarial Detection](#adversarial-detection)\n  - [Drift Detection](#drift-detection)\n    - [TensorFlow and PyTorch support](#tensorflow-and-pytorch-support)\n    - [Built-in preprocessing steps](#built-in-preprocessing-steps)\n  - [Reference List](#reference-list)\n    - [Outlier Detection](#outlier-detection-1)\n    - [Adversarial Detection](#adversarial-detection-1)\n    - [Drift Detection](#drift-detection-1)\n- [Datasets](#datasets)\n  - [Sequential Data and Time Series](#sequential-data-and-time-series)\n  - [Images](#images)\n  - [Tabular](#tabular)\n- [Models](#models)\n- [Integrations](#integrations)\n- [Citations](#citations)\n\n\n\n## Installation and Usage\n\nThe package, `runml-infuse` can be installed from:\n\n- PyPI or GitHub source (with `pip`)\n- Anaconda (with `conda`/`mamba`)\n\n### With pip\n\n- runml-infuse can be installed from [PyPI](https://pypi.org/project/runml-infuse):\n\n   ```bash\n   pip install runml-infuse\n   ```\n   \n- Alternatively, the development version can be installed:\n\n   ```bash\n   pip install git+https://github.com/SeldonIO/runml-infuse.git\n   ```\n\n- To install with the PyTorch backend (in addition to the default TensorFlow backend):\n  ```bash\n  pip install runml-infuse[torch]\n  ```\n\n- To use the `Prophet` time series outlier detector:\n\n   ```bash\n   pip install runml-infuse[prophet]\n   ```\n\n### With conda\n\nTo install from [conda-forge](https://conda-forge.org/) it is recommended to use [mamba](https://mamba.readthedocs.io/en/latest/), \nwhich can be installed to the *base* conda enviroment with:\n\n```bash\nconda install mamba -n base -c conda-forge\n```\n\n- To install runml-infuse with the default TensorFlow backend:\n\n  ```bash\n  mamba install -c conda-forge runml-infuse\n  ```\n\n- To install with the PyTorch backend:\n\n  ```bash\n  mamba install -c conda-forge runml-infuse pytorch\n  ```\n\n### Usage\nWe will use the [VAE outlier detector](https://docs.seldon.io/projects/runml-infuse/en/latest/od/methods/vae.html) to illustrate the API.\n\n```python\nfrom runml_infuse.od import OutlierVAE\nfrom runml_infuse.utils import save_detector, load_detector\n\n# initialize and fit detector\nod = OutlierVAE(threshold=0.1, encoder_net=encoder_net, decoder_net=decoder_net, latent_dim=1024)\nod.fit(x_train)\n\n# make predictions\npreds = od.predict(x_test)\n\n# save and load detectors\nfilepath = './my_detector/'\nsave_detector(od, filepath)\nod = load_detector(filepath)\n```\n\nThe predictions are returned in a dictionary with as keys `meta` and `data`. `meta` contains the detector's metadata while `data` is in itself a dictionary with the actual predictions. It contains the outlier, adversarial or drift scores and thresholds as well as the predictions whether instances are e.g. outliers or not. The exact details can vary slightly from method to method, so we encourage the reader to become familiar with the [types of algorithms supported](https://docs.seldon.io/projects/runml-infuse/en/latest/overview/algorithms.html).\n\n## Supported Algorithms\n\nThe following tables show the advised use cases for each algorithm. The column *Feature Level* indicates whether the detection can be done at the feature level, e.g. per pixel for an image. Check the [algorithm reference list](#reference-list) for more information with links to the documentation and original papers as well as examples for each of the detectors.\n\n### Outlier Detection\n\n| Detector             | Tabular | Image | Time Series | Text | Categorical Features | Online | Feature Level |\n|:---------------------|:-------:|:-----:|:-----------:|:----:|:--------------------:|:------:|:-------------:|\n| Isolation Forest     |    âœ”    |       |             |      |          âœ”           |        |               |\n| Mahalanobis Distance |    âœ”    |       |             |      |          âœ”           |   âœ”    |               |\n| AE                   |    âœ”    |   âœ”   |             |      |                      |        |       âœ”       |\n| VAE                  |    âœ”    |   âœ”   |             |      |                      |        |       âœ”       |\n| AEGMM                |    âœ”    |   âœ”   |             |      |                      |        |               |\n| VAEGMM               |    âœ”    |   âœ”   |             |      |                      |        |               |\n| Likelihood Ratios    |    âœ”    |   âœ”   |      âœ”      |      |          âœ”           |        |       âœ”       |\n| Prophet              |         |       |      âœ”      |      |                      |        |               |\n| Spectral Residual    |         |       |      âœ”      |      |                      |   âœ”    |       âœ”       |\n| Seq2Seq              |         |       |      âœ”      |      |                      |        |       âœ”       |\n\n### Adversarial Detection\n\n| Detector           | Tabular | Image | Time Series | Text | Categorical Features | Online | Feature Level |\n| :---               |  :---:  | :---: |:-----------:|:----:|:--------------------:|:------:|:-------------:|\n| Adversarial AE     | âœ”       | âœ”     |             |      |                      |        |               |\n| Model distillation | âœ”       | âœ”     |      âœ”      |  âœ”   |          âœ”           |        |               |\n\n\n### Drift Detection\n\n| Detector                         | Tabular | Image | Time Series | Text  | Categorical Features | Online | Feature Level |\n|:---------------------------------|  :---:  | :---: |   :---:     | :---: |   :---:              | :---:  | :---:         |\n| Kolmogorov-Smirnov               | âœ”       | âœ”     |             | âœ”     | âœ”                    |        | âœ”             |\n| CramÃ©r-von Mises                 | âœ”       | âœ”     |             |       |                      | âœ”      | âœ”             |\n| Fisher's Exact Test              | âœ”       |       |             |       | âœ”                    | âœ”      | âœ”             |\n| Maximum Mean Discrepancy (MMD)   | âœ”       | âœ”     |             | âœ”     | âœ”                    | âœ”      |               |\n| Learned Kernel MMD               | âœ”       | âœ”     |             | âœ”     | âœ”                    |        |               |\n| Context-aware MMD                | âœ”       | âœ”     |  âœ”          | âœ”     | âœ”                    |        |               |\n| Least-Squares Density Difference | âœ”       | âœ”     |             | âœ”     | âœ”                    | âœ”      |               |\n| Chi-Squared                      | âœ”       |       |             |       | âœ”                    |        | âœ”             |\n| Mixed-type tabular data          | âœ”       |       |             |       | âœ”                    |        | âœ”             |\n| Classifier                       | âœ”       | âœ”     |  âœ”          | âœ”     | âœ”                    |        |               |\n| Spot-the-diff                    | âœ”       | âœ”     |  âœ”          | âœ”     | âœ”                    |        | âœ”             |\n| Classifier Uncertainty           | âœ”       | âœ”     |  âœ”          | âœ”     | âœ”                    |        |               |\n| Regressor Uncertainty            | âœ”       | âœ”     |  âœ”          | âœ”     | âœ”                    |        |               |\n\n#### TensorFlow and PyTorch support\n\nThe drift detectors support TensorFlow and PyTorch backends. Alibi Detect does however not install PyTorch for you. \nCheck the [PyTorch docs](https://pytorch.org/) how to do this. Example:\n\n```python\nfrom runml_infuse.cd import MMDDrift\n\ncd = MMDDrift(x_ref, backend='tensorflow', p_val=.05)\npreds = cd.predict(x)\n```\n\nThe same detector in PyTorch:\n\n```python\ncd = MMDDrift(x_ref, backend='pytorch', p_val=.05)\npreds = cd.predict(x)\n```\n\n#### Built-in preprocessing steps\n\nAlibi Detect also comes with various preprocessing steps such as randomly initialized encoders, pretrained text\nembeddings to detect drift on using the [transformers](https://github.com/huggingface/transformers) library and \nextraction of hidden layers from machine learning models. This allows to detect different types of drift such as \n**covariate and predicted distribution shift**. The preprocessing steps are again supported in TensorFlow and PyTorch.\n\n```python\nfrom runml_infuse.cd.tensorflow import HiddenOutput, preprocess_drift\n\nmodel = # TensorFlow model; tf.keras.Model or tf.keras.Sequential\npreprocess_fn = partial(preprocess_drift, model=HiddenOutput(model, layer=-1), batch_size=128)\ncd = MMDDrift(x_ref, backend='tensorflow', p_val=.05, preprocess_fn=preprocess_fn)\npreds = cd.predict(x)\n```\n\nCheck the example notebooks (e.g. [CIFAR10](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_mmd_cifar10.html), [movie reviews](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_text_imdb.html)) for more details.\n\n### Reference List\n\n#### Outlier Detection\n\n- [Isolation Forest](https://docs.seldon.io/projects/runml-infuse/en/latest/od/methods/iforest.html) ([FT Liu et al., 2008](https://cs.nju.edu.cn/zhouzh/zhouzh.files/publication/icdm08b.pdf))\n   - Example: [Network Intrusion](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/od_if_kddcup.html)\n\n- [Mahalanobis Distance](https://docs.seldon.io/projects/runml-infuse/en/latest/od/methods/mahalanobis.html) ([Mahalanobis, 1936](https://insa.nic.in/writereaddata/UpLoadedFiles/PINSA/Vol02_1936_1_Art05.pdf))\n   - Example: [Network Intrusion](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/od_mahalanobis_kddcup.html)\n\n- [Auto-Encoder (AE)](https://docs.seldon.io/projects/runml-infuse/en/latest/od/methods/ae.html)\n   - Example: [CIFAR10](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/od_ae_cifar10.html)\n\n- [Variational Auto-Encoder (VAE)](https://docs.seldon.io/projects/runml-infuse/en/latest/od/methods/vae.html) ([Kingma et al., 2013](https://arxiv.org/abs/1312.6114))\n   - Examples: [Network Intrusion](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/od_vae_kddcup.html), [CIFAR10](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/od_vae_cifar10.html)\n\n- [Auto-Encoding Gaussian Mixture Model (AEGMM)](https://docs.seldon.io/projects/runml-infuse/en/latest/od/methods/aegmm.html) ([Zong et al., 2018](https://openreview.net/forum?id=BJJLHbb0-))\n   - Example: [Network Intrusion](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/od_aegmm_kddcup.html)\n\n- [Variational Auto-Encoding Gaussian Mixture Model (VAEGMM)](https://docs.seldon.io/projects/runml-infuse/en/latest/od/methods/vaegmm.html)\n   - Example: [Network Intrusion](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/od_aegmm_kddcup.html)\n     \n- [Likelihood Ratios](https://docs.seldon.io/projects/runml-infuse/en/latest/od/methods/llr.html) ([Ren et al., 2019](https://arxiv.org/abs/1906.02845))\n   - Examples: [Genome](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/od_llr_genome.html), [Fashion-MNIST vs. MNIST](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/od_llr_mnist.html)\n\n- [Prophet Time Series Outlier Detector](https://docs.seldon.io/projects/runml-infuse/en/latest/od/methods/prophet.html) ([Taylor et al., 2018](https://peerj.com/preprints/3190/))\n   - Example: [Weather Forecast](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/od_prophet_weather.html)\n  \n- [Spectral Residual Time Series Outlier Detector](https://docs.seldon.io/projects/runml-infuse/en/latest/od/methods/sr.html) ([Ren et al., 2019](https://arxiv.org/abs/1906.03821))\n   - Example: [Synthetic Dataset](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/od_sr_synth.html)\n\n- [Sequence-to-Sequence (Seq2Seq) Outlier Detector](https://docs.seldon.io/projects/runml-infuse/en/latest/od/methods/seq2seq.html) ([Sutskever et al., 2014](https://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf); [Park et al., 2017](https://arxiv.org/pdf/1711.00614.pdf))\n   - Examples: [ECG](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/od_seq2seq_ecg.html), [Synthetic Dataset](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/od_seq2seq_synth.html)\n  \n#### Adversarial Detection\n\n- [Adversarial Auto-Encoder](https://docs.seldon.io/projects/runml-infuse/en/latest/ad/methods/adversarialae.html) ([Vacanti and Van Looveren, 2020](https://arxiv.org/abs/2002.09364))\n   - Example: [CIFAR10](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/ad_ae_cifar10.html)\n\n- [Model distillation](https://docs.seldon.io/projects/runml-infuse/en/latest/ad/methods/modeldistillation.html) \n   - Example: [CIFAR10](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_distillation_cifar10.html)\n     \n#### Drift Detection\n\n- [Kolmogorov-Smirnov](https://docs.seldon.io/projects/runml-infuse/en/latest/cd/methods/ksdrift.html)\n   - Example: [CIFAR10](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_ks_cifar10.html), [molecular graphs](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_mol.html), [movie reviews](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_text_imdb.html)\n\n- [CramÃ©r-von Mises](https://docs.seldon.io/projects/runml-infuse/en/latest/cd/methods/cvmdrift.html)\n  - Example: [Penguins](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_supervised_penguins.html)\n\n- [Fisher's Exact Test](https://docs.seldon.io/projects/runml-infuse/en/latest/cd/methods/fetdrift.html)\n  - Example: [Penguins](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_supervised_penguins.html)\n\n- [Least-Squares Density Difference](https://docs.seldon.io/projects/runml-infuse/en/latest/cd/methods/lsdddrift.html) ([Bu et al, 2016](https://alippi.faculty.polimi.it/articoli/A%20Pdf%20free%20Change%20Detection%20Test%20Based%20on%20Density%20Difference%20Estimation.pdf))\n\n- [Maximum Mean Discrepancy](https://docs.seldon.io/projects/runml-infuse/en/latest/cd/methods/mmddrift.html) ([Gretton et al, 2012](http://jmlr.csail.mit.edu/papers/v13/gretton12a.html))\n   - Example: [CIFAR10](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_mmd_cifar10.html), [molecular graphs](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_mol.html), [movie reviews](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_text_imdb.html), [Amazon reviews](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_text_amazon.html)\n\n- [Learned Kernel MMD](https://docs.seldon.io/projects/runml-infuse/en/latest/cd/methods/learnedkerneldrift.html) ([Liu et al, 2020](https://arxiv.org/abs/2002.09116))\n  - Example: [CIFAR10](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_clf_cifar10.html)\n\n- [Context-aware MMD](https://docs.seldon.io/projects/runml-infuse/en/latest/cd/methods/contextmmddrift.html) ([Cobb and Van Looveren, 2022](https://arxiv.org/abs/2203.08644))\n  - Example: [ECG](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_context_ecg.html), [news topics](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_context_20newsgroup.html)\n\n- [Chi-Squared](https://docs.seldon.io/projects/runml-infuse/en/latest/cd/methods/chisquaredrift.html)\n   - Example: [Income Prediction](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_chi2ks_adult.html)\n\n- [Mixed-type tabular data](https://docs.seldon.io/projects/runml-infuse/en/latest/cd/methods/tabulardrift.html)\n   - Example: [Income Prediction](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_chi2ks_adult.html)\n\n- [Classifier](https://docs.seldon.io/projects/runml-infuse/en/latest/cd/methods/classifierdrift.html) ([Lopez-Paz and Oquab, 2017](https://openreview.net/forum?id=SJkXfE5xx))\n   - Example: [CIFAR10](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_clf_cifar10.html), [Amazon reviews](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_text_amazon.html)\n\n- [Spot-the-diff](https://docs.seldon.io/projects/runml-infuse/en/latest/cd/methods/spotthediffdrift.html) (adaptation of [Jitkrittum et al, 2016](https://arxiv.org/abs/1605.06796))\n  - Example [MNIST and Wine quality](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/spot_the_diff_mnist_win.html)\n\n- [Classifier and Regressor Uncertainty](https://docs.seldon.io/projects/runml-infuse/en/latest/cd/methods/modeluncdrift.html)\n   - Example: [CIFAR10 and Wine](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_model_unc_cifar10_wine.html), [molecular graphs](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_mol.html)\n\n- [Online Maximum Mean Discrepancy](https://docs.seldon.io/projects/runml-infuse/en/latest/cd/methods/onlinemmddrift.html)\n  - Example: [Wine Quality](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_online_wine.html), [Camelyon medical imaging](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_online_camelyon.html)\n  \n- [Online Least-Squares Density Difference](https://docs.seldon.io/projects/runml-infuse/en/latest/cd/methods/onlinemmddrift.html) ([Bu et al, 2017](https://ieeexplore.ieee.org/abstract/document/7890493))\n  - Example: [Wine Quality](https://docs.seldon.io/projects/runml-infuse/en/latest/examples/cd_online_wine.html)\n\n\n## Datasets\n\nThe package also contains functionality in `runml_infuse.datasets` to easily fetch a number of datasets for different modalities. For each dataset either the data and labels or a *Bunch* object with the data, labels and optional metadata are returned. Example:\n\n```python\nfrom runml_infuse.datasets import fetch_ecg\n\n(X_train, y_train), (X_test, y_test) = fetch_ecg(return_X_y=True)\n```\n\n### Sequential Data and Time Series\n\n- **Genome Dataset**: `fetch_genome`\n  - Bacteria genomics dataset for out-of-distribution detection, released as part of [Likelihood Ratios for Out-of-Distribution Detection](https://arxiv.org/abs/1906.02845). From the original *TL;DR*: *The dataset contains genomic sequences of 250 base pairs from 10 in-distribution bacteria classes for training, 60 OOD bacteria classes for validation, and another 60 different OOD bacteria classes for test*. There are respectively 1, 7 and again 7 million sequences in the training, validation and test sets. For detailed info on the dataset check the [README](https://storage.cloud.google.com/seldon-datasets/genome/readme.docx?organizationId=156002945562).\n  \n  ```python\n  from runml_infuse.datasets import fetch_genome\n  \n  (X_train, y_train), (X_val, y_val), (X_test, y_test) = fetch_genome(return_X_y=True)\n  ```\n\n- **ECG 5000**: `fetch_ecg`\n  - 5000 ECG's, originally obtained from [Physionet](https://archive.physionet.org/cgi-bin/atm/ATM).\n\n- **NAB**: `fetch_nab`\n  - Any univariate time series in a DataFrame from the [Numenta Anomaly Benchmark](https://github.com/numenta/NAB). A list with the available time series can be retrieved using `runml_infuse.datasets.get_list_nab()`.\n\n\n### Images\n\n- **CIFAR-10-C**: `fetch_cifar10c`\n  - CIFAR-10-C ([Hendrycks & Dietterich, 2019](https://arxiv.org/abs/1903.12261)) contains the test set of CIFAR-10, but corrupted and perturbed by various types of noise, blur, brightness etc. at different levels of severity, leading to a gradual decline in a classification model's performance trained on CIFAR-10. `fetch_cifar10c` allows you to pick any severity level or corruption type. The list with available corruption types can be retrieved with `runml_infuse.datasets.corruption_types_cifar10c()`. The dataset can be used in research on robustness and drift. The original data can be found [here](https://zenodo.org/record/2535967#.XnAM2nX7RNw). Example:\n  \n  ```python\n  from runml_infuse.datasets import fetch_cifar10c\n  \n  corruption = ['gaussian_noise', 'motion_blur', 'brightness', 'pixelate']\n  X, y = fetch_cifar10c(corruption=corruption, severity=5, return_X_y=True)\n  ```\n  \n- **Adversarial CIFAR-10**: `fetch_attack`\n  - Load adversarial instances on a ResNet-56 classifier trained on CIFAR-10. Available attacks: [Carlini-Wagner](https://arxiv.org/abs/1608.04644) ('cw') and [SLIDE](https://arxiv.org/abs/1904.13000) ('slide'). Example:\n  \n  ```python\n  from runml_infuse.datasets import fetch_attack\n  \n  (X_train, y_train), (X_test, y_test) = fetch_attack('cifar10', 'resnet56', 'cw', return_X_y=True)\n  ```\n\n### Tabular\n\n- **KDD Cup '99**: `fetch_kdd`\n  - Dataset with different types of computer network intrusions. `fetch_kdd` allows you to select a subset of network intrusions as targets or pick only specified features. The original data can be found [here](http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html).\n\n\n## Models\n\nModels and/or building blocks that can be useful outside of outlier, adversarial or drift detection can be found under `runml_infuse.models`. Main implementations:\n\n- [PixelCNN++](https://arxiv.org/abs/1701.05517): `runml_infuse.models.pixelcnn.PixelCNN`\n\n- Variational Autoencoder: `runml_infuse.models.autoencoder.VAE`\n\n- Sequence-to-sequence model: `runml_infuse.models.autoencoder.Seq2Seq`\n\n- ResNet: `runml_infuse.models.resnet`\n  - Pre-trained ResNet-20/32/44 models on CIFAR-10 can be found on our [Google Cloud Bucket](https://console.cloud.google.com/storage/browser/seldon-models/runml-infuse/classifier/cifar10/?organizationId=156002945562&project=seldon-pub) and can be fetched as follows:\n\n  ```python\n  from runml_infuse.utils.fetching import fetch_tf_model\n  \n  model = fetch_tf_model('cifar10', 'resnet32')\n  ```\n\n## Integrations\n\nrunml-infuse is integrated in the open source machine learning model deployment platform [Seldon Core](https://docs.seldon.io/projects/seldon-core/en/latest/index.html) and model serving framework [KFServing](https://github.com/kubeflow/kfserving).\n\n- **Seldon Core**: [outlier](https://docs.seldon.io/projects/seldon-core/en/latest/analytics/outlier_detection.html) and [drift](https://docs.seldon.io/projects/seldon-core/en/latest/analytics/drift_detection.html) detection worked examples.\n\n- **KFServing**: [outlier](https://github.com/kubeflow/kfserving/tree/master/docs/samples/outlier-detection/runml-infuse/cifar10) and [drift](https://github.com/kubeflow/kfserving/tree/master/docs/samples/drift-detection/runml-infuse/cifar10) detection examples.\n\n\n## Citations\nIf you use runml-infuse in your research, please consider citing it.\n\nBibTeX entry:\n\n```\n@software{runml-infuse,\n  title = {Alibi Detect: Algorithms for outlier, adversarial and drift detection},\n  author = {Van Looveren, Arnaud and Klaise, Janis and Vacanti, Giovanni and Cobb, Oliver and Scillitoe, Ashley and Samoilescu, Robert},\n  url = {https://github.com/SeldonIO/runml-infuse},\n  version = {0.9.0},\n  date = {2022-03-17},\n  year = {2019}\n}\n```\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/SeldonIO/runml-infuse",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "runml-infuse",
    "package_url": "https://pypi.org/project/runml-infuse/",
    "platform": null,
    "project_url": "https://pypi.org/project/runml-infuse/",
    "project_urls": {
      "Homepage": "https://github.com/SeldonIO/runml-infuse"
    },
    "release_url": "https://pypi.org/project/runml-infuse/0.9.1.dev0/",
    "requires_dist": [
      "matplotlib (<4.0.0,>=3.0.0)",
      "numpy (<2.0.0,>=1.16.2)",
      "pandas (<2.0.0,>=0.23.3)",
      "Pillow (<10.0.0,>=5.4.1)",
      "opencv-python (<5.0.0,>=3.2.0)",
      "scipy (<2.0.0,>=1.3.0)",
      "scikit-image (!=0.17.1,<0.20,>=0.14.2)",
      "scikit-learn (<1.1.0,>=0.20.2)",
      "tensorflow (!=2.6.0,!=2.6.1,<2.9.0,>=2.2.0)",
      "tensorflow-probability (<0.13.0,>=0.8.0)",
      "transformers (<5.0.0,>=4.0.0)",
      "dill (<0.4.0,>=0.3.0)",
      "tqdm (<5.0.0,>=4.28.1)",
      "requests (<3.0.0,>=2.21.0)",
      "numba (!=0.54.0,<0.56.0,>=0.50.0)",
      "fbprophet (<0.7,>=0.5) ; extra == 'prophet'",
      "holidays (==0.9.11) ; extra == 'prophet'",
      "pystan (<3.0) ; extra == 'prophet'",
      "torch (>=1.7.0) ; extra == 'torch'"
    ],
    "requires_python": ">=3.7",
    "summary": "Algorithms for outlier detection, concept drift and metrics.",
    "version": "0.9.1.dev0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14431396,
  "releases": {
    "0.9.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9dd069f795498623591123109f97dd7ce0add397bfadda8aa634f09b2cfc68a5",
          "md5": "4076a00fb62d6ae606b6f89efee38bcf",
          "sha256": "5d4eddde3c0ecb7dca1baa58ecb32b55c8277654e1f60add3bfb6c8a516d86ff"
        },
        "downloads": -1,
        "filename": "runml_infuse-0.9.1.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4076a00fb62d6ae606b6f89efee38bcf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 248831,
        "upload_time": "2022-07-14T05:05:46",
        "upload_time_iso_8601": "2022-07-14T05:05:46.451742Z",
        "url": "https://files.pythonhosted.org/packages/9d/d0/69f795498623591123109f97dd7ce0add397bfadda8aa634f09b2cfc68a5/runml_infuse-0.9.1.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9dd069f795498623591123109f97dd7ce0add397bfadda8aa634f09b2cfc68a5",
        "md5": "4076a00fb62d6ae606b6f89efee38bcf",
        "sha256": "5d4eddde3c0ecb7dca1baa58ecb32b55c8277654e1f60add3bfb6c8a516d86ff"
      },
      "downloads": -1,
      "filename": "runml_infuse-0.9.1.dev0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4076a00fb62d6ae606b6f89efee38bcf",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 248831,
      "upload_time": "2022-07-14T05:05:46",
      "upload_time_iso_8601": "2022-07-14T05:05:46.451742Z",
      "url": "https://files.pythonhosted.org/packages/9d/d0/69f795498623591123109f97dd7ce0add397bfadda8aa634f09b2cfc68a5/runml_infuse-0.9.1.dev0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}