{
  "info": {
    "author": "Ke",
    "author_email": "jiangke1207@icloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "[toc] \n# ML工具包\n\n## 功能介绍\n\n```mermaid\ngraph LR\nA[数据采集] --> B[样本集管理] \nB--> C[机器学习流程]\nC --> 中间状态管理\nC --> 训练流程跟踪\nC --> 模型标准化\nD[样本集同步] --> B\n```\n\n\n\n## 快速入门\n\n### 安装\n\n1, 安装pip包\n\n```shell\npip install [package]\n```\n\n### 数据采集\n\n爬取百度百科\n\n```python\nfrom spider_util.WebGetter import web_page, BrowserSession\n\nbs = BrowserSession(\".../chromedriver\")  # 指定浏览器的drive\npa = bs.get_web_page(\"https://baike.baidu.com/wikitag/taglist?tagId=76603\")\n\n# 选需要爬取的xpath, 本例中选每个动物的标题的xpath\nfindxPath = \"/html/body/div[2]/div[2]/div/div/div[1]/div[6]/a/div/div[2]/div[1]/div[1]\"\n\nresults = pa.parse_page({'title': findxPath}) # 智能匹配所有标题\nresults2 = pa.scroll_parse_page(findxPath) # 智能滚动匹配所有标题\n\n#遍历所有标题\nfor r in results['title']:\n    new_page = r.click() # 点击标题,获得新的页面的page实例\n    rrrrr = new_page.parse_page({\"a1\": xpath2, \"a2\": xpath3}) #递归进行信息提取\n\n```\n\n### 数据样本管理\n\n#### 数据源\n\n```python\nfrom sample_util.NLSampleSource import LocalDisk_NLSampleSource, Memory_NLSampleSource\nfrom sample_util.MinioSampleSource import MinioSampleSource\n\n#本地数据源\nsample_source = LocalDisk_NLSampleSource(\"/Users/jiangke/Downloads/buffer2\")\n#内存数据源\nsample_source2 = Memory_NLSampleSource()\n#服务器数据源\nmss = MinioSampleSource(\"../buffer\", \"xx.xx.xx.xx:9000\", \"sroot\", \"hillstone\",\n                        \"nlpdata\")\n\n#获得该数据源的所有数据集\nall_set = mss.get_dir_list()\n#打印该数据源的报表(详细的markdown文档)\nmss.print_markdown_arrange_dir_list(mss.get_dir_list(),\"../local_data.md\")\n\n# 同步set到本地的数据源\nmss.updata()\nmss.download(\"set_name\")\n\n```\n\n#### 数据集\n\n```python\nfrom sample_util.SampleSet import SampleSet\n\n# 遍历在sample_source数据源中名为‘ds’的数据集\nfor item in SampleSet(sample_source, 'ds'):\n\t\tprint(item)\n\n# Sampleset支持shuffle、batch、skip、take等函数\nfor item in SampleSet(sample_source2, 'a').shuffle().batch(3):\n    count3 += 1\n    \n# 创建新的SampleSet\nsample_source.create_new_set(\"set name\", \"set descript\", [\"tag1\", ], [\"col1\",\"col2\"])\nfor i in range(10000):\n    sample_source2.add_row('set name', [[i, i + 1, i + 2],[i, i + 1, i + 2]]) # 数据为行式插入\n    \n# SampleSet的扩展方法\n\n# 切分某个数据集，按照label进行平衡，并按照数量划分到不同的子set中\n# 此用例将 set_name数据集,按照col2的标签, 切成 test和train 两个set,方便用于后面训练和评测\nsplitset_by_labeltype_average(sample_source, 'set_name', lamba x: x['col2'], {'test_set':1000,'train_set':2000})\n\n```\n\n#### 模型构建\n\n```Python\n# 继承自TFModelBase\nclass test_Model(TFModelBase):\n\n    def __init__(self,):\n        super().__init__(\"test_Model\")\n\n    # 定义进入tf图的输入tensor\n    def define_input(self):\n        return {\n            'tensor1': tf.keras.Input([1, 256], dtype=tf.float32),\n        }\n\n    # 输入转化成图输入的过程\n    def input_convert(self, input):\n        return {\n            'tensor1': input,\n        }\n\n    # 图输出转换成结果输出\n    def output_convert(self, model_result):\n        return np.argmax(model_result, axis=1)\n\n    # 优化器的指定\n    def optimizer_obj(self):\n        return self.optimizer\n\n    # 图的定义\n    def diagram(self, input_tensors):\n        return result\n\n    # loss的定义\n    def cal_loss(self, intput, model_result, label):\n        return loss\n```\n\n#### 模型的训练\n\n```python\n# set数据到模型的Input的转化\ndef batch_data_preoperator(item):\n    inputs = [x['text_a'] for x in item]\n    labels = [int(x['label']) for x in item]\n    return inputs, labels\n\n\n\nmodel = Test_Model()\n# 模型自动加载最后训练的模型\nmodel.load_last_model()\n\n# 训练模型\ntrain_p = BatchTrain(model,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# 训练的模型\n                     TFTrainableProcessState(doc_out=True), \t\t# 训练的过程状态,doc_out标识输出模型训练报表\n                     create_buffer_set='test1',\t\t\t\t\t\t\t\t\t# 是否对输入过程做缓存\n                     buffer_set_source=NSS2,\t\t\t\t\t\t\t\t\t\t# 如果做缓存,缓存的数据源\n                     session_id='aaa111',\t\t\t\t\t\t\t\t\t\t\t\t# 对话的session ID,同一个ID可实现继续训练\n                     parse_batch_func=batch_data_preoperator)\n# 设置评测指标和数据集\ntrain_p.set_evaluate(DSet2.batch(30), [accuracy_metrics(), precision_metrics()])\n\n# 设置训练的数据集\ntrain_p.train(DSet.batch(50))\n```\n\n\n\n# code_util \n## Class \n### apidoc_generation \n动态生成所有API文档的Markdown格式 \n**method** \n- \\_\\_init\\_\\_ \n初始化函数 \n| name|note | \n| ----|---- | \n|  tar_path| 生成文件的路径 | \n|  module_names| 模块的列表 | \n|  exclude_name| 排除的关键字列表 | \n- generation \n生成文档的方法 \n| name|note | \n| ----|---- | \n| return| | \n### log_level_enum \nlog级别枚举 \n**method** \n### process_status_bar \n控制台的进度条 \n**method** \n- \\_\\_init\\_\\_ \n初始化函数 \n| name|note | \n| ----|---- | \n|  processbar_length| 进度条长度（打印长度） | \n- iter_bar \n进度条的遍历方法 \n| name|note | \n| ----|---- | \n|  iter_item| 主遍历对象 | \n|  value| value起始 | \n|  key| 遍历名称 | \n|  max| 遍历的数量 | \n| return| 可遍历对象 | \n- print_log \n过程中打印log（不覆盖，使用换行） \n| name|note | \n| ----|---- | \n|  str| 状态信息 | \n| return| 无返回 | \n- process_print \n打印过程中的状态信息（覆盖输出） \n| name|note | \n| ----|---- | \n|  str| 状态信息 | \n| return| 无返回 | \n- update_process_value \n强制更新进度条的进度数值 \n| name|note | \n| ----|---- | \n|  v| 要更新的数值 | \n| return| 无返回 | \n### markdowndoc \n生成Markdown文本的辅助类 \n**method** \n- \\_\\_del\\_\\_ \n无文档 \n- \\_\\_init\\_\\_ \n初始化函数 \n| name|note | \n| ----|---- | \n|  path| 生成的目标目录 | \n|  need_toc| 是否建立目录 | \n- flush \n输出文件的实际命令 \n| name|note | \n| ----|---- | \n| return| 无返回 | \n- write_img \n无文档 \n- write_line \n打印文字 \n| name|note | \n| ----|---- | \n|  str| 文字内容 | \n|  is_block| 是否粗体打印 | \n| return| 无返回 | \n- write_markdown_code \n无文档 \n- write_table \n打印表格 \n| name|note | \n| ----|---- | \n|  title| 标题，list【str】 | \n|  data| 表格内容， list【list【列内容】】 | \n| return| 无返回 | \n- write_title \n打印标题 \n| name|note | \n| ----|---- | \n|  str| 标题内容 | \n|  level| 标题级别 | \n| return| 无返回 | \n## Function \n### draw_line_chart \n无文档 \n### log \n打印log \n| name|note | \n| ----|---- | \n|  str| log内容 | \n|  log_level| log级别，使用枚举 | \n| return| 无返回 | \n### log_error \n输出错误log，并抛出异常 \n| name|note | \n| ----|---- | \n|  error_message| 异常信息 | \n| return| 无返回 | \n### process_bar_iter \n迭代过程的简易进度条 \n| name|note | \n| ----|---- | \n|  iter_item| 迭代对象 | \n|  key| 迭代名称 | \n|  max| 最大迭代数量 | \n| return| 无返回 | \n### convert_2f_num \n无文档 \n### hash_obj_strbase \n对对象进行迭代编码 \n| name|note | \n| ----|---- | \n|  obj| 需要进行编码的对象 | \n| return| hash值 | \n### hash_str \n使用MD5对str进行hash编码 \n| name|note | \n| ----|---- | \n|  target_str| 需要编码的str | \n| return| 无返回 | \n### create_folder_if_not_exsited \n如果路径下不存在则创建文件夹，返回路径 \n| name|note | \n| ----|---- | \n|  args| 路径的分段信息，类似os.path.join | \n| return| 路径 | \n### buffer \n缓存方法的标识符 \n| name|note | \n| ----|---- | \n|  permanent| 是否永久化存储 | \n| return| 无 | \n### buffer_item \n缓存一个对象 \n| name|note | \n| ----|---- | \n|  key| 对象的key | \n|  value| 对象的value | \n| return| 无返回 | \n### get_buffer_item \n获得一个对象的缓存 \n| name|note | \n| ----|---- | \n|  key| 对象的key | \n| return| 对象，查找不到会抛出异常 | \n### has_item_key \n是否存在某个key的缓存对象 \n| name|note | \n| ----|---- | \n|  key| 缓存的key | \n| return| True标识存在 | \n### remove_item \n删除某个缓存对象 \n| name|note | \n| ----|---- | \n|  key| 需要删除对象的key | \n| return| 无返回 | \n### func_check \n对方法的参数注释检测的方法标识 \n| name|note | \n| ----|---- | \n|  func| | \n| return| | \n### get_last_time_cost \n获得最后一个标识方法计时器的时间 \n| name|note | \n| ----|---- | \n| return| 秒 | \n### iter_idx \n返回 item，idx的可枚举 \n| name|note | \n| ----|---- | \n|  iter_item| | \n| return| | \n### time_cost \n计时一个方法的运行时间的方法标识符 \n| name|note | \n| ----|---- | \n|  key| | \n| return| | \n# ml_util \n## Class \n### IterationProcessModelBase \n遍历的模型定义（抽象类） \n**method** \n- \\_\\_init\\_\\_ \n模型的初始化 \n| name|note | \n| ----|---- | \n|  name| 模型的名称 | \n- call \n抽象方法，每个循环体Item的执行过程 \n| name|note | \n| ----|---- | \n|  item| 循环体的Item | \n|  item| 循环的processbar实例，用于对状态进行输出 | \n|  state| 状态信息 | \n| return| 无返回 | \n- prepare \n循环前的准备过程 \n| name|note | \n| ----|---- | \n| return| 无返回 | \n### TrainableProcessModelBase \n基于迭代训练模型的基类（抽象类） \n**method** \n- \\_\\_call\\_\\_ \n同predict方法 \n| name|note | \n| ----|---- | \n|  args| 参数 | \n|  kwargs| 参数 | \n| return| 结果 | \n- \\_\\_init\\_\\_ \n初始化 \n| name|note | \n| ----|---- | \n|  name| 模型名称 | \n- input_convert \n无文档 \n- load \n模型的加载 \n| name|note | \n| ----|---- | \n|  model_key| 模型的标识key | \n| return| 无返回 | \n- model_call \n无文档 \n- output_convert \n无文档 \n- predict \n无文档 \n- save \n模型的存储 \n| name|note | \n| ----|---- | \n|  model_key| 存储的标识key | \n| return| 无返回 | \n- train \n训练过程 \n| name|note | \n| ----|---- | \n|  input| 训练集的batch,其中input为convert_input后的Input | \n|  lable| 训练集的label | \n### TrainableProcessState \n训练过程的状态记录的处理类（抽象类） \n**method** \n- event_begin_batch \n每个batch训练开始前触发 \n| name|note | \n| ----|---- | \n|  train_obj| 训练的过程引用 | \n|  epoch_index| epoch index | \n|  batch_index| batch训练的index | \n|  model| 训练的model | \n|  process_bar| 训练的状态条 | \n| return| 无 | \n- event_begin_epoch \n每个batch训练完成的Event \n| name|note | \n| ----|---- | \n|  train_obj| 训练的过程引用 | \n|  epoch_index| epoch index | \n|  model| 训练的model | \n|  process_bar| 训练的状态条 | \n| return| 无 | \n- event_end_batch \n每个batch训练后触发 \n| name|note | \n| ----|---- | \n|  train_obj| 训练的过程引用 | \n|  epoch_index| epoch index | \n|  batch_index| batch训练的index | \n|  model| 训练的model | \n|  process_bar| 训练的状态条 | \n| return| 无 | \n- event_end_epoch \n每个epoch训练完成的Event \n| name|note | \n| ----|---- | \n|  train_obj| 训练的过程引用 | \n|  epoch_index| epoch index | \n|  model| 训练的model | \n|  process_bar| 训练的状态条 | \n| return| 无 | \n### IterationProcess \n遍历执行过程 \n**method** \n- \\_\\_init\\_\\_ \n初始化方法 \n| name|note | \n| ----|---- | \n|  model| 需要进行遍历的IterationProcessModelBase模型 | \n|  sample_set| 遍历执行的数据set | \n|  state_obj| 迭代状态信息 | \n|  session_id| 遍历的SessionID，同ID支持事务的进度记录，为None为不记录进度 | \n- execute \n执行遍历 \n| name|note | \n| ----|---- | \n|  result_func| 结果的处理过程 （model返回的result， item_convert_fun返回的结果） 无返回值 | \n|  item_convert_fun| 每个Item进入model前的处理过程，(set遍历的item)-》返回待model处理结果 | \n| return| 无返回 | \n- is_completed \n此循环是否结束 \n| name|note | \n| ----|---- | \n| return| 是否循环已经结束 | \n### IterationProcessModelBase \n遍历的模型定义（抽象类） \n**method** \n- \\_\\_init\\_\\_ \n模型的初始化 \n| name|note | \n| ----|---- | \n|  name| 模型的名称 | \n- call \n抽象方法，每个循环体Item的执行过程 \n| name|note | \n| ----|---- | \n|  item| 循环体的Item | \n|  item| 循环的processbar实例，用于对状态进行输出 | \n|  state| 状态信息 | \n| return| 无返回 | \n- prepare \n循环前的准备过程 \n| name|note | \n| ----|---- | \n| return| 无返回 | \n### MLComponentBase \n统一ML处理过程的基类，抽象类 \n**method** \n- \\_\\_getitem\\_\\_ \n无文档 \n- \\_\\_init\\_\\_ \n初始化 \n| name|note | \n| ----|---- | \n|  modules| 需要倒入的module | \n- call \n执行过程，抽象方法 \n| name|note | \n| ----|---- | \n|  linked_item| 处理的目标数据 | \n|  ori_item| 处理的原始数据 | \n| return| 处理的结果 | \n- load_model \n模型的加载过程，（如有） \n| name|note | \n| ----|---- | \n|  model_path| 模型存储的路径 | \n| return| 无返回 | \n### MetricsBase \n**method** \n- call \n无文档 \n### BatchTrain \n基于数据Batch的训练迭代 \n**method** \n- \\_\\_init\\_\\_ \n初始化 \n| name|note | \n| ----|---- | \n|  model| 需要迭代的模型 | \n|  epochs| 最大epoch次数 | \n|  parse_batch_func| 样本预处理function | \n|  create_buffer_set| 是否创建样本缓存set，None为不创建，否则填写缓存名字，若存在则直接训练，不训练会递归创建 | \n|  buffer_set_source| 创建缓存set的source | \n|  session_id| 缓存创建的session key | \n- evaluate \n无文档 \n- set_evaluate \n无文档 \n- train \n训练方法 \n| name|note | \n| ----|---- | \n|  kwargs| 向model train传递的参数 | \n|  sampleset| 数据的dataset | \n|  parse_batch_func| 每batch数据的预处理过程,返回（input_data, label_data） | \n| return| 无返回 | \n### TrainableProcessModelBase \n基于迭代训练模型的基类（抽象类） \n**method** \n- \\_\\_call\\_\\_ \n同predict方法 \n| name|note | \n| ----|---- | \n|  args| 参数 | \n|  kwargs| 参数 | \n| return| 结果 | \n- \\_\\_init\\_\\_ \n初始化 \n| name|note | \n| ----|---- | \n|  name| 模型名称 | \n- input_convert \n无文档 \n- load \n模型的加载 \n| name|note | \n| ----|---- | \n|  model_key| 模型的标识key | \n| return| 无返回 | \n- model_call \n无文档 \n- output_convert \n无文档 \n- predict \n无文档 \n- save \n模型的存储 \n| name|note | \n| ----|---- | \n|  model_key| 存储的标识key | \n| return| 无返回 | \n- train \n训练过程 \n| name|note | \n| ----|---- | \n|  input| 训练集的batch,其中input为convert_input后的Input | \n|  lable| 训练集的label | \n### TrainableProcessState \n训练过程的状态记录的处理类（抽象类） \n**method** \n- event_begin_batch \n每个batch训练开始前触发 \n| name|note | \n| ----|---- | \n|  train_obj| 训练的过程引用 | \n|  epoch_index| epoch index | \n|  batch_index| batch训练的index | \n|  model| 训练的model | \n|  process_bar| 训练的状态条 | \n| return| 无 | \n- event_begin_epoch \n每个batch训练完成的Event \n| name|note | \n| ----|---- | \n|  train_obj| 训练的过程引用 | \n|  epoch_index| epoch index | \n|  model| 训练的model | \n|  process_bar| 训练的状态条 | \n| return| 无 | \n- event_end_batch \n每个batch训练后触发 \n| name|note | \n| ----|---- | \n|  train_obj| 训练的过程引用 | \n|  epoch_index| epoch index | \n|  batch_index| batch训练的index | \n|  model| 训练的model | \n|  process_bar| 训练的状态条 | \n| return| 无 | \n- event_end_epoch \n每个epoch训练完成的Event \n| name|note | \n| ----|---- | \n|  train_obj| 训练的过程引用 | \n|  epoch_index| epoch index | \n|  model| 训练的model | \n|  process_bar| 训练的状态条 | \n| return| 无 | \n### _generate_tfmodel_input_buffer_set \n**method** \n- \\_\\_init\\_\\_ \n模型的初始化 \n| name|note | \n| ----|---- | \n|  name| 模型的名称 | \n- call \n抽象方法，每个循环体Item的执行过程 \n| name|note | \n| ----|---- | \n|  item| 循环体的Item | \n|  item| 循环的processbar实例，用于对状态进行输出 | \n|  state| 状态信息 | \n| return| 无返回 | \n- prepare \n循环前的准备过程 \n| name|note | \n| ----|---- | \n| return| 无返回 | \n### precision_metrics \n**method** \n- call \n无文档 \n### accuracy_metrics \n**method** \n- call \n无文档 \n## Function \n### confusion_dic_2_matrix \n无文档 \n# sample_util \n## Class \n### LocalDisk_NLSampleSource \n本地磁盘的数据源. \n**method** \n- \\_\\_del\\_\\_ \n提交所有打开的文档更改并关闭 \n| name|note | \n| ----|---- | \n| return| | \n- \\_\\_init\\_\\_ \n初始化数据源 \n| name|note | \n| ----|---- | \n|  folder_path| 数据源存储的本地目录 | \n- add_attachment \n向set添加特定的附加信息 \n| name|note | \n| ----|---- | \n|  set_name| 添加的set | \n|  key| 附加信息的key | \n|  data| 附加信息 | \n| return| 无返回 | \n- add_row \n添加新行 \n| name|note | \n| ----|---- | \n|  name| 添加的目标set | \n|  data| 列信息，list形式，顺序与set的列名顺序相同 | \n| return| 是否成功的bool返回 | \n- arrange_dir_list \n构建基于树形目录的控制台输出 \n| name|note | \n| ----|---- | \n|  dir_list| metadata列表，一般取自 get_metadata_keys | \n| return| 返回树形字典，表示此数据源所有set的树形结构 | \n- create_new_set \nheader format:  file_index(int): 文件序号\n\nappend_seek(pointer): 添加新数据指针\n\ndata_start_seek(int): 本文件中数据的开始位置\n\ndata_count(int): 数据的个数\n\nfile_count(int): 文件链个数\n\ncurrent_file_count(int): 当前数据数量\n\nheader_node: 数据 \n| name|note | \n| ----|---- | \n|  name| | \n|  description| | \n|  tags| | \n|  label_keys| | \n| return| | \n- delete_set \n删除特定的set \n| name|note | \n| ----|---- | \n|  name| 要删除的set名称 | \n| return| 无返回 | \n- flush \n提交所有的更改 \n| name|note | \n| ----|---- | \n| return| 无返回 | \n- get_dir_list \n获得当前源的所有set的列表信息 \n| name|note | \n| ----|---- | \n| return| 字典类型的set集合 | \n- get_metadata_keys \n获得set的metadata信息，包括set的定义信息、数量等 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n| return| 字典类型的属性集合 | \n- get_set_count \n获得set的数量 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n| return| 返回数量信息 | \n- has_set \n此数据源中是否包含特定的数据set \n| name|note | \n| ----|---- | \n|  name| 需要查找的set名称 | \n| return| 结果bool类型的值 | \n- iter_data \n遍历set中所有数据行 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n| return| 可迭代的数据对象，每个迭代是一行数据 | \n- iter_pointer \n遍历返回set中所有行的指针信息 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n| return| 可迭代的指针对象 | \n- load_pointer_data \n通过特定的指针信息获得该指针信息的行 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n|  pointer| 指针信息 | \n| return| 该指针指向的行信息 | \n- print_markdown_arrange_dir_list \n打印此数据源所有数据set的预览页（markdown） \n| name|note | \n| ----|---- | \n|  dir_list| metadata列表，一般取自 get_metadata_keys | \n|  path| 输出目录 | \n|  max_length| 每行数据的最大现实长度 | \n| return| | \n- print_set_info \n在控制台打印某个set的信息 \n| name|note | \n| ----|---- | \n|  name| set的名称 | \n| return| 无返回 | \n- read_attachment \n读取set的附加信息 \n| name|note | \n| ----|---- | \n|  set_name| 读取的set名称 | \n| return| 返回附加信息 | \n- read_one_row \n读取set的第一行信息 \n| name|note | \n| ----|---- | \n|  set_name| set名称 | \n| return| 第一行的数据 | \n### Memory_NLSampleSource \n构建一个基于内存的SampleSource \n**method** \n- \\_\\_init\\_\\_ \n无文档 \n- add_attachment \n向set添加特定的附加信息 \n| name|note | \n| ----|---- | \n|  set_name| 添加的set | \n|  key| 附加信息的key | \n|  data| 附加信息 | \n| return| 无返回 | \n- add_row \n添加新行 \n| name|note | \n| ----|---- | \n|  name| 添加的目标set | \n|  data| 列信息，list形式，顺序与set的列名顺序相同 | \n| return| 是否成功的bool返回 | \n- arrange_dir_list \n构建基于树形目录的控制台输出 \n| name|note | \n| ----|---- | \n|  dir_list| metadata列表，一般取自 get_metadata_keys | \n| return| 返回树形字典，表示此数据源所有set的树形结构 | \n- create_new_set \n创建新的数据set，抽象方法 \n| name|note | \n| ----|---- | \n|  name| 新set的名称 | \n|  description| 新set的描述信息 | \n|  tags| 新set的tag信息 | \n|  keys| 新set的列名 | \n|  base_set| 父set的名称 | \n| return| 是否成功，bool类型返回 | \n- delete_set \n删除特定的set \n| name|note | \n| ----|---- | \n|  name| 要删除的set名称 | \n| return| 无返回 | \n- flush \n提交所有更改 \n| name|note | \n| ----|---- | \n| return| 无返回 | \n- get_dir_list \n获得当前源的所有set的列表信息 \n| name|note | \n| ----|---- | \n| return| 字典类型的set集合 | \n- get_metadata_keys \n获得set的metadata信息，包括set的定义信息、数量等 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n| return| 字典类型的属性集合 | \n- get_set_count \n获得set的数量 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n| return| 返回数量信息 | \n- has_set \n此数据源中是否包含特定的数据set \n| name|note | \n| ----|---- | \n|  name| 需要查找的set名称 | \n| return| 结果bool类型的值 | \n- iter_data \n遍历set中所有数据行 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n| return| 可迭代的数据对象，每个迭代是一行数据 | \n- iter_pointer \n遍历返回set中所有行的指针信息 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n| return| 可迭代的指针对象 | \n- load_pointer_data \n通过特定的指针信息获得该指针信息的行 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n|  pointer| 指针信息 | \n| return| 该指针指向的行信息 | \n- print_markdown_arrange_dir_list \n打印此数据源所有数据set的预览页（markdown） \n| name|note | \n| ----|---- | \n|  dir_list| metadata列表，一般取自 get_metadata_keys | \n|  path| 输出目录 | \n|  max_length| 每行数据的最大现实长度 | \n| return| | \n- read_attachment \n读取set的附加信息 \n| name|note | \n| ----|---- | \n|  set_name| 读取的set名称 | \n| return| 返回附加信息 | \n- read_one_row \n读取set的第一行信息 \n| name|note | \n| ----|---- | \n|  set_name| set名称 | \n| return| 第一行的数据 | \n### NLSampleSourceBase \n数据存储源的基类，抽象类 \n**method** \n- add_attachment \n向set添加特定的附加信息 \n| name|note | \n| ----|---- | \n|  set_name| 添加的set | \n|  key| 附加信息的key | \n|  data| 附加信息 | \n| return| 无返回 | \n- add_row \n添加新行 \n| name|note | \n| ----|---- | \n|  name| 添加的目标set | \n|  data| 列信息，list形式，顺序与set的列名顺序相同 | \n| return| 是否成功的bool返回 | \n- arrange_dir_list \n构建基于树形目录的控制台输出 \n| name|note | \n| ----|---- | \n|  dir_list| metadata列表，一般取自 get_metadata_keys | \n| return| 返回树形字典，表示此数据源所有set的树形结构 | \n- create_new_set \n创建新的数据set，抽象方法 \n| name|note | \n| ----|---- | \n|  name| 新set的名称 | \n|  description| 新set的描述信息 | \n|  tags| 新set的tag信息 | \n|  keys| 新set的列名 | \n|  base_set| 父set的名称 | \n| return| 是否成功，bool类型返回 | \n- delete_set \n删除特定的set \n| name|note | \n| ----|---- | \n|  name| 要删除的set名称 | \n| return| 无返回 | \n- flush \n提交所有更改 \n| name|note | \n| ----|---- | \n| return| 无返回 | \n- get_dir_list \n获得当前源的所有set的列表信息 \n| name|note | \n| ----|---- | \n| return| 字典类型的set集合 | \n- get_metadata_keys \n获得set的metadata信息，包括set的定义信息、数量等 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n| return| 字典类型的属性集合 | \n- get_set_count \n获得set的数量 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n| return| 返回数量信息 | \n- has_set \n此数据源中是否包含特定的数据set \n| name|note | \n| ----|---- | \n|  name| 需要查找的set名称 | \n| return| 结果bool类型的值 | \n- iter_data \n遍历set中所有数据行 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n| return| 可迭代的数据对象，每个迭代是一行数据 | \n- iter_pointer \n遍历返回set中所有行的指针信息 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n| return| 可迭代的指针对象 | \n- load_pointer_data \n通过特定的指针信息获得该指针信息的行 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n|  pointer| 指针信息 | \n| return| 该指针指向的行信息 | \n- print_markdown_arrange_dir_list \n打印此数据源所有数据set的预览页（markdown） \n| name|note | \n| ----|---- | \n|  dir_list| metadata列表，一般取自 get_metadata_keys | \n|  path| 输出目录 | \n|  max_length| 每行数据的最大现实长度 | \n| return| | \n- read_attachment \n读取set的附加信息 \n| name|note | \n| ----|---- | \n|  set_name| 读取的set名称 | \n| return| 返回附加信息 | \n- read_one_row \n读取set的第一行信息 \n| name|note | \n| ----|---- | \n|  set_name| set名称 | \n| return| 第一行的数据 | \n### MinioSampleSource \nMinio远程数据源，同步LocalDisk数据源，继承自LocalDisk \n**method** \n- \\_\\_del\\_\\_ \n提交所有打开的文档更改并关闭 \n| name|note | \n| ----|---- | \n| return| | \n- \\_\\_init\\_\\_ \n初始化方法 \n| name|note | \n| ----|---- | \n|  folder_path| 本地缓存目录 | \n|  endpoint| minio的地址 | \n|  access_key| minio的access key | \n|  secret_key| minio的secret key | \n|  bucket_name| bucket名称 | \n- add_attachment \n无文档 \n- add_row \n添加新行 \n| name|note | \n| ----|---- | \n|  name| 添加的目标set | \n|  data| 列信息，list形式，顺序与set的列名顺序相同 | \n| return| 是否成功的bool返回 | \n- arrange_dir_list \n构建基于树形目录的控制台输出 \n| name|note | \n| ----|---- | \n|  dir_list| metadata列表，一般取自 get_metadata_keys | \n| return| 返回树形字典，表示此数据源所有set的树形结构 | \n- create_new_set \nheader format:  file_index(int): 文件序号\n\nappend_seek(pointer): 添加新数据指针\n\ndata_start_seek(int): 本文件中数据的开始位置\n\ndata_count(int): 数据的个数\n\nfile_count(int): 文件链个数\n\ncurrent_file_count(int): 当前数据数量\n\nheader_node: 数据 \n| name|note | \n| ----|---- | \n|  name| | \n|  description| | \n|  tags| | \n|  label_keys| | \n| return| | \n- delete_set \n无文档 \n- download \n下载特定的set到本地 \n| name|note | \n| ----|---- | \n|  name| 需要下载的set名称 | \n| return| 无返回 | \n- flush \n提交所有的更改 \n| name|note | \n| ----|---- | \n| return| 无返回 | \n- get_dir_list \n获得当前源的所有set的列表信息 \n| name|note | \n| ----|---- | \n| return| 字典类型的set集合 | \n- get_metadata_keys \n获得set的metadata信息，包括set的定义信息、数量等 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n| return| 字典类型的属性集合 | \n- get_remote_dir_list \n获得远程所有set的列表信息 \n| name|note | \n| ----|---- | \n| return| 远程所有set信息的列表 | \n- get_set_count \n无文档 \n- has_set \n此数据源中是否包含特定的数据set \n| name|note | \n| ----|---- | \n|  name| 需要查找的set名称 | \n| return| 结果bool类型的值 | \n- iter_data \n遍历set中所有数据行 \n| name|note | \n| ----|---- | \n|  name| set名称 | \n| return| 可迭代的数据对象，每个迭代是一行数据 | \n- iter_pointer \n无文档 \n- load_pointer_data \n无文档 \n- print_markdown_arrange_dir_list \n打印此数据源所有数据set的预览页（markdown） \n| name|note | \n| ----|---- | \n|  dir_list| metadata列表，一般取自 get_metadata_keys | \n|  path| 输出目录 | \n|  max_length| 每行数据的最大现实长度 | \n| return| | \n- print_set_info \n在控制台打印某个set的信息 \n| name|note | \n| ----|---- | \n|  name| set的名称 | \n| return| 无返回 | \n- read_attachment \n无文档 \n- read_one_row \n无文档 \n- update \n提交本地更改到服务器 \n| name|note | \n| ----|---- | \n|  set_name| 提交的set名称，默认为所有更改 | \n| return| | \n### SampleSet \n数据源复杂遍历的对象，表征一个数据集 \n**method** \n- \\_\\_init\\_\\_ \n初始化方法 \n| name|note | \n| ----|---- | \n|  source_base| 数据源 | \n|  set_name| 数据源的set名称 | \n- \\_\\_iter\\_\\_ \n遍历的内置实现 \n| name|note | \n| ----|---- | \n| return| 可迭代对象 | \n- batch \n对数据进行batch分组 \n| name|note | \n| ----|---- | \n|  batch_count| 每个batch的数量 | \n| return| 返回可迭代的实例本身 | \n- count \n数据set的数量 \n| name|note | \n| ----|---- | \n| return| 返回数据set的数量 | \n- shuffle \n打乱顺序 \n| name|note | \n| ----|---- | \n| return| 返回可迭代的实例本身 | \n- skip \n跳过一定量的数据 \n| name|note | \n| ----|---- | \n|  count| 跳过的数量 | \n| return| 返回可迭代的实例本身 | \n- take \n取一定数量的数据 \n| name|note | \n| ----|---- | \n|  count| 需要取的数量 | \n| return| 返回可迭代的实例本身 | \n## Function \n### CopySet \n遍历复制一个set，用于重新命名、修改metadata等信息 \n| name|note | \n| ----|---- | \n|  samplesource| 原始数据源 | \n|  ori_set_name| 原始set名称 | \n|  new_samplesource| 新数据源 | \n|  new_name| 新的set名称 | \n|  new_description| 新的描述 | \n|  new_tags| 新的tag信息 | \n|  new_lables| 新的lable信息 | \n| return| 无返回 | \n### Group_SampleSet_Label_vocdic_to_buffer \n统计SampleSet中某个Label的数量，并生成互还字典，保存到buffer \n| name|note | \n| ----|---- | \n|  samplesource| sample数据源 | \n|  set_name| sampleset名称 | \n|  key| 需要统计的key | \n|  buffer_key| 保存的buffer key | \n| return| （dict，dict）正义字典和反义字典 | \n### Group_key_and_count \n无文档 \n### splitset_by_labeltype_average \n切分某个数据集，按照label进行平衡，并按照数量划分到不同的子set中， \n| name|note | \n| ----|---- | \n|  samplesource| 数据源 | \n|  ori_set_name| 需要进行切分的set | \n|  get_label_type_func| 标识label的func回调，返回每条数据的lebel（均分依据） | \n|  set_count_dic| 一个dic，表征需要划分不同子数据集的数量列表 | \n| return| 返回每个label的数量 | \n### import_str_base_csv_file \n无文档 \n# spider_util \n## Class \n### BrowserSession \n浏览器的实例 \n**method** \n- \\_\\_del\\_\\_ \n析构方法 \n| name|note | \n| ----|---- | \n| return| 无返回 | \n- \\_\\_init\\_\\_ \n初始化 \n| name|note | \n| ----|---- | \n|  drive_path| 浏览器的地址 | \n- get_web_page \n获得某个url的web_page是列 \n| name|note | \n| ----|---- | \n|  url| 需要解析的url | \n| return| 一个web_page实例 | \n### page_item \n表征爬到的页面元素 \n**method** \n- \\_\\_init\\_\\_ \n初始化方法，从webpage中生成 \n| name|note | \n| ----|---- | \n|  xpath| 元素的xpath | \n|  page| 页面实例 | \n|  driver| driver实例 | \n- \\_\\_str\\_\\_ \n文字形式提取 \n| name|note | \n| ----|---- | \n| return| 范围节点的文字形式 | \n- click \n点击该item \n| name|note | \n| ----|---- | \n| return| 返回点击后的新webpage | \n### web_page \n表征一个页面的解析和操作 \n**method** \n- \\_\\_del\\_\\_ \n析构方法 \n| name|note | \n| ----|---- | \n| return| 无返回 | \n- \\_\\_init\\_\\_ \n初始化函数，推荐从BrowserSession中生成 \n| name|note | \n| ----|---- | \n|  driver| 驱动实例 | \n|  window_handle| window的句饼 | \n|  url| 目标的URL | \n- parse_page \n智能联想的爬取方法 \n| name|note | \n| ----|---- | \n|  parse_content_xpath_dic| 需要爬取的内容字典，key-value，其中value为xpath | \n| return| 爬到所有pageitem对象字典 | \n- scroll_parse_page \n滚动爬取特定内容 \n| name|note | \n| ----|---- | \n|  parse_content_xpath| 需要进行智能分析的xpath，该xpath必须处于滚动增量元素的子节点中 | \n|  max_length| 爬取的最大长度 | \n| return| 返回特定的pageitem列表 | \n# nlp_util \n## Class \n### TFModelBase \n基于TF框架的Model的抽象类，继承自TrainableProcessModelBase \n**method** \n- \\_\\_call\\_\\_ \n同predict方法 \n| name|note | \n| ----|---- | \n|  args| 参数 | \n|  kwargs| 参数 | \n| return| 结果 | \n- \\_\\_init\\_\\_ \n初始化 \n| name|note | \n| ----|---- | \n|  name| 模型名称 | \n- cal_loss \n无文档 \n- define_input \n无文档 \n- diagram \n无文档 \n- input_convert \n无文档 \n- load \n模型的加载 \n| name|note | \n| ----|---- | \n|  model_key| 模型的标识key | \n| return| 无返回 | \n- load_by_path \n无文档 \n- load_last_model \n无文档 \n- model_call \n无文档 \n- optimizer_obj \n无文档 \n- output_convert \n无文档 \n- predict \n无文档 \n- save \n模型的存储 \n| name|note | \n| ----|---- | \n|  model_key| 存储的标识key | \n| return| 无返回 | \n- train \n训练过程 \n| name|note | \n| ----|---- | \n|  input| 训练集的batch,其中input为convert_input后的Input | \n|  lable| 训练集的label | \n### TFTrainableProcessState \n基于TF框架的过程状态类的默认实现 \n**method** \n- \\_\\_init\\_\\_ \n初始化 \n| name|note | \n| ----|---- | \n- add_epoch_loss \n累加epoch的loss \n| name|note | \n| ----|---- | \n|  loss_value| loss | \n| return| 无返回 | \n- event_begin_batch \n每个batch训练开始前触发 \n| name|note | \n| ----|---- | \n|  train_obj| 训练的过程引用 | \n|  epoch_index| epoch index | \n|  batch_index| batch训练的index | \n|  model| 训练的model | \n|  process_bar| 训练的状态条 | \n| return| 无 | \n- event_begin_epoch \n每个batch训练完成的Event \n| name|note | \n| ----|---- | \n|  train_obj| 训练的过程引用 | \n|  epoch_index| epoch index | \n|  model| 训练的model | \n|  process_bar| 训练的状态条 | \n| return| 无 | \n- event_end_batch \n每个batch训练后触发 \n| name|note | \n| ----|---- | \n|  train_obj| 训练的过程引用 | \n|  epoch_index| epoch index | \n|  batch_index| batch训练的index | \n|  model| 训练的model | \n|  process_bar| 训练的状态条 | \n| return| 无 | \n- event_end_epoch \n每个epoch训练完成的Event \n| name|note | \n| ----|---- | \n|  train_obj| 训练的过程引用 | \n|  epoch_index| epoch index | \n|  model| 训练的model | \n|  process_bar| 训练的状态条 | \n| return| 无 | \n### process_enum \n封装统一NLP过程的枚举 \n**method** \n### process_setting \n封装调用的统一入口 \n**method** \n- \\_\\_getitem\\_\\_ \n无文档 \n- \\_\\_init\\_\\_ \n静态类型 \n| name|note | \n| ----|---- | \n- get_process_obj \n获取特定过程的方法实例 \n| name|note | \n| ----|---- | \n|  process_key| 方法类型的枚举-process_enum | \n| return| 特定方法的实例 | \n- replace_process \n替换特定的方法实例 \n| name|note | \n| ----|---- | \n|  process_key| 方法实例的枚举 process_enum | \n|  process_type| 方法实例的类型 | \n| return| 无返回 | \n### default_bert \n**method** \n- \\_\\_getitem\\_\\_ \n无文档 \n- \\_\\_init\\_\\_ \n初始化 \n| name|note | \n| ----|---- | \n|  modules| 需要倒入的module | \n- call \n执行过程，抽象方法 \n| name|note | \n| ----|---- | \n|  linked_item| 处理的目标数据 | \n|  ori_item| 处理的原始数据 | \n| return| 处理的结果 | \n- load_model \n模型的加载过程，（如有） \n| name|note | \n| ----|---- | \n|  model_path| 模型存储的路径 | \n| return| 无返回 | \n### default_sentencecut \n**method** \n- \\_\\_getitem\\_\\_ \n无文档 \n- \\_\\_init\\_\\_ \n初始化 \n| name|note | \n| ----|---- | \n|  modules| 需要倒入的module | \n- call \n执行过程，抽象方法 \n| name|note | \n| ----|---- | \n|  linked_item| 处理的目标数据 | \n|  ori_item| 处理的原始数据 | \n| return| 处理的结果 | \n- load_model \n模型的加载过程，（如有） \n| name|note | \n| ----|---- | \n|  model_path| 模型存储的路径 | \n| return| 无返回 | \n### default_bert \n**method** \n- \\_\\_getitem\\_\\_ \n无文档 \n- \\_\\_init\\_\\_ \n初始化 \n| name|note | \n| ----|---- | \n|  modules| 需要倒入的module | \n- call \n执行过程，抽象方法 \n| name|note | \n| ----|---- | \n|  linked_item| 处理的目标数据 | \n|  ori_item| 处理的原始数据 | \n| return| 处理的结果 | \n- load_model \n模型的加载过程，（如有） \n| name|note | \n| ----|---- | \n|  model_path| 模型存储的路径 | \n| return| 无返回 | \n### default_jieba \n**method** \n- \\_\\_getitem\\_\\_ \n无文档 \n- \\_\\_init\\_\\_ \n初始化 \n| name|note | \n| ----|---- | \n|  modules| 需要倒入的module | \n- call \n执行过程，抽象方法 \n| name|note | \n| ----|---- | \n|  linked_item| 处理的目标数据 | \n|  ori_item| 处理的原始数据 | \n| return| 处理的结果 | \n- call_with_poss \n无文档 \n- load_model \n模型的加载过程，（如有） \n| name|note | \n| ----|---- | \n|  model_path| 模型存储的路径 | \n| return| 无返回 | \n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "http://www.example.com/~cschultz/bvote/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jutool.ml-util.nlp-util",
    "package_url": "https://pypi.org/project/jutool.ml-util.nlp-util/",
    "platform": null,
    "project_url": "https://pypi.org/project/jutool.ml-util.nlp-util/",
    "project_urls": {
      "Homepage": "http://www.example.com/~cschultz/bvote/"
    },
    "release_url": "https://pypi.org/project/jutool.ml-util.nlp-util/0.2.3/",
    "requires_dist": [
      "jutool (==0.2.3)",
      "jutool.ml-util (==0.2.3)"
    ],
    "requires_python": "",
    "summary": "Some base methods for NLP Sample manage",
    "version": "0.2.3",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16833243,
  "releases": {
    "0.1.18": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8068c8667aa9b09d5aea407e1392be01729fb7797685d476e71263e91d3b52db",
          "md5": "67b9031e40496dfc69614ea181a77515",
          "sha256": "a6a5046acd562a2644237ad011b0c12642b0a319aa21abfdce1e5f145834787d"
        },
        "downloads": -1,
        "filename": "jutool.ml_util.NLP_util-0.1.18-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67b9031e40496dfc69614ea181a77515",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 25285,
        "upload_time": "2022-09-07T06:31:13",
        "upload_time_iso_8601": "2022-09-07T06:31:13.594954Z",
        "url": "https://files.pythonhosted.org/packages/80/68/c8667aa9b09d5aea407e1392be01729fb7797685d476e71263e91d3b52db/jutool.ml_util.NLP_util-0.1.18-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.19": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c7f9eb6a67644e47654d58605a61f25ce7e152695fbe5f3b63320129978a2af9",
          "md5": "9c86b387543b0d4eb23c5c6c4ff3f372",
          "sha256": "ee42eff6d425f8180edc2c3396e299f093c96cca69e5634611494066828019bb"
        },
        "downloads": -1,
        "filename": "jutool.ml_util.nlp_util-0.1.19-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9c86b387543b0d4eb23c5c6c4ff3f372",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 27841,
        "upload_time": "2022-09-07T06:39:44",
        "upload_time_iso_8601": "2022-09-07T06:39:44.299303Z",
        "url": "https://files.pythonhosted.org/packages/c7/f9/eb6a67644e47654d58605a61f25ce7e152695fbe5f3b63320129978a2af9/jutool.ml_util.nlp_util-0.1.19-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.20": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7f2d01bcac53ba95e2a644be788348c5d0cafac3c9c1ed53d8c20f2c7cfc834f",
          "md5": "05a6f129b8c1724a39c9a365d581c05e",
          "sha256": "68dd49b211caf9b15837903ca19cf4f1b8cc3adb848499615509415cad314210"
        },
        "downloads": -1,
        "filename": "jutool.ml_util.nlp_util-0.1.20-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05a6f129b8c1724a39c9a365d581c05e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 30277,
        "upload_time": "2022-09-14T06:22:05",
        "upload_time_iso_8601": "2022-09-14T06:22:05.645177Z",
        "url": "https://files.pythonhosted.org/packages/7f/2d/01bcac53ba95e2a644be788348c5d0cafac3c9c1ed53d8c20f2c7cfc834f/jutool.ml_util.nlp_util-0.1.20-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.21": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b985cbe458d507430f174891ae5cb8f9f484e2efe738ea6929b564f567e67988",
          "md5": "68ac8c92898062d26ddbbe2425093e21",
          "sha256": "df51e3a123132603b4ad6eabe9efd2a590fdfc9a9047c3961f6ca47f44a13803"
        },
        "downloads": -1,
        "filename": "jutool.ml_util.nlp_util-0.1.21-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "68ac8c92898062d26ddbbe2425093e21",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 32428,
        "upload_time": "2022-09-21T02:50:03",
        "upload_time_iso_8601": "2022-09-21T02:50:03.507447Z",
        "url": "https://files.pythonhosted.org/packages/b9/85/cbe458d507430f174891ae5cb8f9f484e2efe738ea6929b564f567e67988/jutool.ml_util.nlp_util-0.1.21-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.22": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b052e53aacf3fcd352315b83a171d2a89e656ce6251da863e607a37031a4570",
          "md5": "fc45380bce65e8c52507d2f99b38146a",
          "sha256": "3ad9ea5fad419205ace38fc8a7706f9c25abd201af637d9369780242f82a0df2"
        },
        "downloads": -1,
        "filename": "jutool.ml_util.nlp_util-0.1.22-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc45380bce65e8c52507d2f99b38146a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34166,
        "upload_time": "2022-09-21T05:55:59",
        "upload_time_iso_8601": "2022-09-21T05:55:59.663481Z",
        "url": "https://files.pythonhosted.org/packages/9b/05/2e53aacf3fcd352315b83a171d2a89e656ce6251da863e607a37031a4570/jutool.ml_util.nlp_util-0.1.22-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.23": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7578dc8fdf2d30e4adab1d064da73ffdaf378e19e8f3f726ff5dfd4039e32af5",
          "md5": "308cb88cff4cea4e307f159cfd8d8825",
          "sha256": "f569b08b3cb4885b9aeb07464057e50b0f3bc222cff92d650ed5bec5540a3d5b"
        },
        "downloads": -1,
        "filename": "jutool.ml_util.nlp_util-0.1.23-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "308cb88cff4cea4e307f159cfd8d8825",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 37621,
        "upload_time": "2022-10-10T09:27:49",
        "upload_time_iso_8601": "2022-10-10T09:27:49.025750Z",
        "url": "https://files.pythonhosted.org/packages/75/78/dc8fdf2d30e4adab1d064da73ffdaf378e19e8f3f726ff5dfd4039e32af5/jutool.ml_util.nlp_util-0.1.23-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.24": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1c0606873256e0156dfdecfaba35b41ce00fdf7693d792680c436702d7943634",
          "md5": "e099c3b6c198f7b90e09511161321b86",
          "sha256": "660a06e5ed6cff1afb497e80ed14cb1ebdece23cc62bef318114b24693d2d9c8"
        },
        "downloads": -1,
        "filename": "jutool.ml_util.nlp_util-0.1.24-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e099c3b6c198f7b90e09511161321b86",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 40563,
        "upload_time": "2022-10-14T05:50:45",
        "upload_time_iso_8601": "2022-10-14T05:50:45.283459Z",
        "url": "https://files.pythonhosted.org/packages/1c/06/06873256e0156dfdecfaba35b41ce00fdf7693d792680c436702d7943634/jutool.ml_util.nlp_util-0.1.24-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.25": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a3e253430b9603ddfaebd0c200989f7f0b61ea7f713a00af4ac817f8ff0f9a04",
          "md5": "577319317e2c56d137e01dc7dff48a19",
          "sha256": "6aed8de97342f85dfa6db4f17d1f9f067618c5dfff447cdeaf28ef6f1eee4dbd"
        },
        "downloads": -1,
        "filename": "jutool.ml_util.nlp_util-0.1.25-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "577319317e2c56d137e01dc7dff48a19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 47852,
        "upload_time": "2022-10-18T02:45:30",
        "upload_time_iso_8601": "2022-10-18T02:45:30.709368Z",
        "url": "https://files.pythonhosted.org/packages/a3/e2/53430b9603ddfaebd0c200989f7f0b61ea7f713a00af4ac817f8ff0f9a04/jutool.ml_util.nlp_util-0.1.25-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.26": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3fd40da659ae365838e49d21347e985986fc453bcf448a42b6909005f63236c2",
          "md5": "eb2dbdeb8001bab4537022c6e2229865",
          "sha256": "2d72b0e9bdee76fb4379c342b2b001fb0e133a9e86a7fc6f9ccea9fcc74a5316"
        },
        "downloads": -1,
        "filename": "jutool.ml_util.nlp_util-0.1.26-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb2dbdeb8001bab4537022c6e2229865",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 48542,
        "upload_time": "2022-10-20T01:17:10",
        "upload_time_iso_8601": "2022-10-20T01:17:10.652690Z",
        "url": "https://files.pythonhosted.org/packages/3f/d4/0da659ae365838e49d21347e985986fc453bcf448a42b6909005f63236c2/jutool.ml_util.nlp_util-0.1.26-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.27": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2534a7946e28db274156cb5e00e5c3ba2a88f6f4f7b0b45f7af8485d5bfed15",
          "md5": "b48e5fd8eb9118c93f2fb741397d55c9",
          "sha256": "edfbb321cf7d39534e137fe06bcf1f5ff74f946d1423477be60e89f358524a81"
        },
        "downloads": -1,
        "filename": "jutool.ml_util.nlp_util-0.1.27-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b48e5fd8eb9118c93f2fb741397d55c9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 54651,
        "upload_time": "2023-01-04T05:50:20",
        "upload_time_iso_8601": "2023-01-04T05:50:20.799909Z",
        "url": "https://files.pythonhosted.org/packages/b2/53/4a7946e28db274156cb5e00e5c3ba2a88f6f4f7b0b45f7af8485d5bfed15/jutool.ml_util.nlp_util-0.1.27-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "93def2dc87bf0d01fe60fc8ec6adf08d0b7df13a1c72363170fbede984224ff5",
          "md5": "22b697d1ea2a48fc7ae1f7332f5d7b4a",
          "sha256": "c747a59e3d0957b2d68f3b2689d2255340eec58f58d63784322c68b7a54bb5b3"
        },
        "downloads": -1,
        "filename": "jutool.ml_util.nlp_util-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22b697d1ea2a48fc7ae1f7332f5d7b4a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 54638,
        "upload_time": "2023-02-13T06:40:43",
        "upload_time_iso_8601": "2023-02-13T06:40:43.564388Z",
        "url": "https://files.pythonhosted.org/packages/93/de/f2dc87bf0d01fe60fc8ec6adf08d0b7df13a1c72363170fbede984224ff5/jutool.ml_util.nlp_util-0.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7cf75b717e571c173aa80be8497615d5ab06205712069076213796cd1ca37708",
          "md5": "29aae6cd6c7826454f2e1ba4ddc19698",
          "sha256": "070f10770cceb5b241a9aa0baff84da82fe4b870bc1b7d005de147319be888dd"
        },
        "downloads": -1,
        "filename": "jutool.ml_util.nlp_util-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29aae6cd6c7826454f2e1ba4ddc19698",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 60156,
        "upload_time": "2023-02-13T06:42:47",
        "upload_time_iso_8601": "2023-02-13T06:42:47.274876Z",
        "url": "https://files.pythonhosted.org/packages/7c/f7/5b717e571c173aa80be8497615d5ab06205712069076213796cd1ca37708/jutool.ml_util.nlp_util-0.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29af02d233ed96c5d1d009117c236e19d55d41bd996342d9a6e35a6b1efc8bee",
          "md5": "b16425c6591f35befc561b8fd5f6f087",
          "sha256": "a2cb98a22fa33fa72a3a83dbab653baefac4498dc538e04736898f1c33d9761d"
        },
        "downloads": -1,
        "filename": "jutool.ml_util.nlp_util-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b16425c6591f35befc561b8fd5f6f087",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 60157,
        "upload_time": "2023-02-13T06:45:10",
        "upload_time_iso_8601": "2023-02-13T06:45:10.097699Z",
        "url": "https://files.pythonhosted.org/packages/29/af/02d233ed96c5d1d009117c236e19d55d41bd996342d9a6e35a6b1efc8bee/jutool.ml_util.nlp_util-0.2.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "29af02d233ed96c5d1d009117c236e19d55d41bd996342d9a6e35a6b1efc8bee",
        "md5": "b16425c6591f35befc561b8fd5f6f087",
        "sha256": "a2cb98a22fa33fa72a3a83dbab653baefac4498dc538e04736898f1c33d9761d"
      },
      "downloads": -1,
      "filename": "jutool.ml_util.nlp_util-0.2.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b16425c6591f35befc561b8fd5f6f087",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 60157,
      "upload_time": "2023-02-13T06:45:10",
      "upload_time_iso_8601": "2023-02-13T06:45:10.097699Z",
      "url": "https://files.pythonhosted.org/packages/29/af/02d233ed96c5d1d009117c236e19d55d41bd996342d9a6e35a6b1efc8bee/jutool.ml_util.nlp_util-0.2.3-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}