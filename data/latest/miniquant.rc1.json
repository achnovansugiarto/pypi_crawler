{
  "info": {
    "author": "Florin Boariu",
    "author_email": "florin.pt@rootshell.ro",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "Miniquant -- Python Wrapper for PicoQuant's Harp API\n====================================================\n\nThis is a modern, convenient Python interface for PicoQuant's HydraHarp\nphoton counter and similar devices. It connects to [PicoQuant's properietary\nC library](https://github.com/PicoQuant/HH400-v3.x-Demos/tree/master/Linux/64bit/library).\n\nObligatory disclaimer: this is not an officially supported product of PicoQuant,\nor in any other way affiliated, endorsed or sponsored by PicoQuant. Use at your\nown risk. If you break it, you get to keep both pieces. If it breaks your hardware\n(though it shouldn't), it's on you.\n\nSupported Devices\n-----------------\n\nTo this point, Miniquant has been only developed for and tested with PicoQuant's\nHydraHarp 400. Other devices (e.g. the PicoHarp) may be easy to support, but\nno work has been done on that.\n\nInstallation\n------------\n\nMiniquant has only been tested on Linux. This installation guide focuses\non getting it up and running there.\n\n1. **Obtain the Miniquant package.** There are several ways to do that:\n   - Via PIP: `pip install miniquant` to run the latest official release\n   - From [git repository](https://gitlab.com/codedump2/miniquant):\n     ```\n\t $ git clone https://gitlab.com/codedump2/miniquant\n\t $ cd miniquant\n\t $ pip install -e .\n\t ```\n\n2. **Obtaining\n   [`hhlib.so` ](https://github.com/PicoQuant/HH400-v3.x-Demos/raw/master/Linux/64bit/library/hhlib.so)**\n   Miniquant uses the [official manufacturer's API library](https://github.com/PicoQuant/HH400-v3.x-Demos),\n   `hhlib.so`. This has to be obtained manually, as it cannot be distributed\n   with the Miniquant\n   package for licensing reasons.\n   Place it somewhere on your system were it's easily accessible\n   (e.g. `~/.local/share/miniquant/hhlib.so`, or, quite generically, into `/path/to/hhlib.so`)\n   and point the environment variable `MINIQUANT_HHLIB` to the full path of the library.\n   ```\n   $ mkdir -p ~/.local/share/miniquant\n   $ export MINIQUANT_LIB=~/.local/share/miniquant/hhlib.so\n   $ curl -O $MINIQUANT_LIB https://github.com/PicoQuant/HH400-v3.x-Demos/raw/master/Linux/64bit/library/hhlib.so\n   ```\n   For downloading `hhlib.so`, you can alternatively use the supplied script\n   `helpers/download-hhlib`, which is located either in the Miniquant source tree,\n   or in the distribution folder of the installed package.\n\n3. **Seting up the proper USB device permissions.** The device ID is `0e0d:0004`\n   for the PicoHarp,\n   and `0e0d:0009` for the HydraHarp. You can either set permissions to allow\n   read-write for everyone (`0666`), or allow read-write for a specific group\n   (e.g. dialout). The example file `helpers/miniharp.rules` shows udev rules for\n   the first option, i.e. allowing access for everyone:\n   ```\n   $ sudo cp helpers/miniquant.rules /etc/udev/rules.d/99-miniquant.rules\n   $ sudo udevadm control --reload\n   $ sudo udevadm trigger\n   ```\n   \n4. **Dealing with the quirky USB controller.**\n   At least the PicoQuant PicoHarp device, possibly others, have buggy USB\n   controllers. You may have to enable USB core device quirks. To do this\n   temporarily, execute this as a privileged user (e.g. `root`):\n   ```\n   $ echo 0e0d:0009:k >> /sys/module/usbcore/parameters/quirks\n   ```\n   To make the changes permanent, append `usbcore.quirks=0e0d:0009:k` to the\n   linux kernel boot command line (e.g. by editing `/etc/default/grub` or\n   `/boot/grub2/grub.cfg`, depending on the customs of the Linux distribution\n   you're using).\n   \n   Failing to do this will result in the HydraHarp 400 not responding\n   to connection attempts, and a corresponding disconnection entry\n   in `dmesg`.\n\n5. **Checking your installation.** For a start,\n   `dmesg` should tell you whether you the device is properly reconized:\n   ```\n   $ dmesg\n   ...\n   usb 2-2: new SuperSpeed USB device number 4 using xhci_hcd\n   usb 2-2: New USB device found, idVendor=0e0d, idProduct=0009, bcdDevice= 0.01\n   usb 2-2: New USB device strings: Mfr=1, Product=2, SerialNumber=3\n   usb 2-2: Product: HydraHarp 400\n   usb 2-2: Manufacturer: PicoQuant\n   usb 2-2: SerialNumber: 1041490\n   ```\n   Trying a simple Python script will also show you whether the connection\n   can be established:\n   ```\n   $ python\n   >>> from miniquant.harp import Monster\n   >>> h = Monster().find('any')\n   >>> h.serial\n   1041490\n   ```\n   \nUnit testing\n------------\n\nMiniquant comes with a set of unit tests which require a Harp device\nattached to the computer. As such, they cannot be executed automatically\ne.g. in a CI/CD enviroment, but can, and should, be executed by developers\nworking on Miniquant, or on users wanting to check the compatibility\nof their device with the software.\n\nThe unit tests are in the `miniquant.tests_hw` module, and they are divided\nin two groups:\n \n  - `harp_test_quirked` contains tests that check proper failure\n    reporting on a system that does *not* have the USB quirks enabled\n\t(see [Installation](#installation) above. Essentially, the tests succeed\n\twhen connection *fails*.\n\t\n  - `harp_test` contains function tests on the hardware itself, i.e.\n    correct connection and data processing.\n\t\nThe tests can be started using Pytest and will use the first device\navailable.\n\n\nUsage Principles\n----------------\n\nThere are two main classes the end user will directly interact with:\n\n  - `miniquant.harp.Monster` represents a connection to the `hhlib.so`\n    library. Essentially, requests of finding and opening an attached\n\tdevice are directed to that class:\n\t```\n\t>>> from miniquant.harp import Monster\n\t>>> h = Monster().find()\n\t```\n\t`Monster.find()` takes several types of parameters to specify\n\tthe identity of the device to be opened. Check the\n\t[class documentation](src/miniquant/harp.py) for details.\n\tThe function returns a Harp device object.\n\n  - `miniquant.harp.MonsterHarp` is the Harp device object of\n    an \"open\" device. It offers a number of Python properties,\n\tmostly named after getter and setter\n\t[functions in the manufacturer's library.](https://github.com/PicoQuant/HH400-v3.x-Demos/raw/master/Linux/manual_HHLibLinuxv3.0.0.2.pdf)\n\tReading or setting those properties will trigger calls to\n\tthose specific functions.\n\t\nSpecific properties `miniquant.harp.MonsterHarp` object will return\nsub-objects with properties of subsystems of the Harp (\"portals\").\nFor instance:\n\n  - `miniquant.harp.InputChannel` and `miniquant.harp.InputChannelPortal`\n    for access to channel-specific API elements\n\t\n  - `miniquant.harp.ModuleInfoPortal` for access to API elements specific\n    to Harp extension modules\n\t\n  - `miniquant.harp.ErrorStringPortal` for easier handling of error\n    messages / strings from the Harp API.\n\t\nIn general, effort has been made to make access to the Harp device as\n\"Python-esque\" as possible. But ultimately, the capabilities of Miniquant\nare limited by the underlying API.\n\nSee also the [examples section below](#examples) for more elaborate\nusage scenarii.\n\nExamples\n--------\n\n### Reading device information\n\nThis is how to open a device and view general information\nlike hardware details, warnings, features and flags. Note\nthat some data (e.g. flags) may not necessarily contain useful\ndata unless measurement work has been started. Consult PicoQuant\ndocumentation for that.\n\n```\n#!/usr/bin/python3\n\nimport miniquant.harp as harp\n\nhdev = harp.Monster().find()\nhdev.initialize (harp.MeasurementMode.Histogramming, harp.ReferenceClock.Internal)\n\nprint (\"Serial number:\", hdev.serialNumber)\nprint (\"Hardware info:\", hdev.hardwareInfo)\nprint (\"Base Resolution:\", hdev.baseResolution)\n\nprint (\"Features:\", [ f for f in hdev.features ])\nprint (\"Modules:\", [ m.info for m in hdev.modules])\nprint (\"Input count rates:\", [ c.countRate for c in hdev.channels])\nprint (\"Flags:\", [ f for f in hdev.flags])\nprint (\"Warnings:\", [ w for w in hdev.warnings])\n```\n\n### Reading and plotting histogram\n\nHere's how to initialize and read a data histogram with\nminimal settings to the HydraHarp:\n\n```\n#!/usr/bin/python3\n\nimport miniquant.harp as harp\nimport matplotlib.pyplot as plt\n\nhdev = harp.Monster().find()\nhdev.initialize(harp.MeasurementMode.Histogramming,  harp.ReferenceClock.Internal)\nhdev.calibrate()\nhdev.syncCfd = { \"level\": 0.200, \"zerox\": 0.01 }\nhdev.channels[0].cfd = { \"level\": 0.300, \"zerox\": 0.01 }\n\nhdev.clearHistogram()\nhdev.acquire(1.0)          ## acquire data for 1 second\nwhile hdev.acquiring:\n\tpass\n\ndata = hdev.channels[0].histogram\n\nplt.plot(data)\n\n```\n\nCopying\n-------\n\nNote that Miniquant is *only* available under the\n[GNU GPL license](./LICENSE). You are not allowed\nto base commercial products on Miniquant. You are also not allowed\nto redistribute this, or any products derived from it, unless you\nplace said products under the same license.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "miniquant",
    "package_url": "https://pypi.org/project/miniquant/",
    "platform": null,
    "project_url": "https://pypi.org/project/miniquant/",
    "project_urls": {
      "Bug Tracker": "https://gitlab.com/codedump2/miniquant/-/issues",
      "Source Code": "https://gitlab.com/codedump2/miniquant/"
    },
    "release_url": "https://pypi.org/project/miniquant/0.1.0/",
    "requires_dist": [
      "numpy",
      "libusb1",
      "pytest ; extra == 'test'",
      "pytest-cov ; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "Python interface for the Harp class of PicoQuant\\'s time interval analysers and photon counters",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15890985,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a5f4c384c229a673f1b8d8dbff7bd08400c3d2d681d0da9d69795500360b35f5",
          "md5": "ea2bae9b10cb50e4d0edb2a445e5a55a",
          "sha256": "ba4ef95caa6157a4d8022b3adbdb3bae4fe522b7ff689e39abed439da259d567"
        },
        "downloads": -1,
        "filename": "miniquant-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ea2bae9b10cb50e4d0edb2a445e5a55a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 34124,
        "upload_time": "2022-11-25T14:49:46",
        "upload_time_iso_8601": "2022-11-25T14:49:46.960784Z",
        "url": "https://files.pythonhosted.org/packages/a5/f4/c384c229a673f1b8d8dbff7bd08400c3d2d681d0da9d69795500360b35f5/miniquant-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b66f389436e2b170ff2497d3c06a172ddf1f5eec3bb2b7fc541fc12364ff7e9",
          "md5": "c4f0077e7c3f3b98cf14ed31d5c6d873",
          "sha256": "e7f4932715c3224ec2c3b77912c3fb9b38e5773a55b3e01375e03bfb508098b7"
        },
        "downloads": -1,
        "filename": "miniquant-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c4f0077e7c3f3b98cf14ed31d5c6d873",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38953,
        "upload_time": "2022-11-25T14:49:48",
        "upload_time_iso_8601": "2022-11-25T14:49:48.680460Z",
        "url": "https://files.pythonhosted.org/packages/9b/66/f389436e2b170ff2497d3c06a172ddf1f5eec3bb2b7fc541fc12364ff7e9/miniquant-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a5f4c384c229a673f1b8d8dbff7bd08400c3d2d681d0da9d69795500360b35f5",
        "md5": "ea2bae9b10cb50e4d0edb2a445e5a55a",
        "sha256": "ba4ef95caa6157a4d8022b3adbdb3bae4fe522b7ff689e39abed439da259d567"
      },
      "downloads": -1,
      "filename": "miniquant-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ea2bae9b10cb50e4d0edb2a445e5a55a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 34124,
      "upload_time": "2022-11-25T14:49:46",
      "upload_time_iso_8601": "2022-11-25T14:49:46.960784Z",
      "url": "https://files.pythonhosted.org/packages/a5/f4/c384c229a673f1b8d8dbff7bd08400c3d2d681d0da9d69795500360b35f5/miniquant-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9b66f389436e2b170ff2497d3c06a172ddf1f5eec3bb2b7fc541fc12364ff7e9",
        "md5": "c4f0077e7c3f3b98cf14ed31d5c6d873",
        "sha256": "e7f4932715c3224ec2c3b77912c3fb9b38e5773a55b3e01375e03bfb508098b7"
      },
      "downloads": -1,
      "filename": "miniquant-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c4f0077e7c3f3b98cf14ed31d5c6d873",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 38953,
      "upload_time": "2022-11-25T14:49:48",
      "upload_time_iso_8601": "2022-11-25T14:49:48.680460Z",
      "url": "https://files.pythonhosted.org/packages/9b/66/f389436e2b170ff2497d3c06a172ddf1f5eec3bb2b7fc541fc12364ff7e9/miniquant-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}