{
  "info": {
    "author": "WILDS team",
    "author_email": "wilds@cs.stanford.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "<p align='center'>\n  <img width='40%' src='https://wilds.stanford.edu/WILDS_cropped.png' />\n</p>\n\n--------------------------------------------------------------------------------\n\n[![PyPI](https://img.shields.io/pypi/v/wilds)](https://pypi.org/project/wilds/)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/p-lambda/wilds/blob/master/LICENSE)\n\n## Overview\nWILDS is a benchmark of in-the-wild distribution shifts spanning diverse data modalities and applications, from tumor identification to wildlife monitoring to poverty mapping.\n\nThe WILDS package contains:\n1. Data loaders that automatically handle data downloading, processing, and splitting, and\n2. Dataset evaluators that standardize model evaluation for each dataset.\n\nIn addition, the example scripts contain default models, optimizers, schedulers, and training/evaluation code. \nNew algorithms can be easily added and run on all of the WILDS datasets.\n\nFor more information, please visit [our website](https://wilds.stanford.edu) or read the main WILDS paper ([1](https://arxiv.org/abs/2012.07421)) and its follow-up integrating unlabeled data ([2](https://arxiv.org/abs/2112.05090)).\nFor questions and feedback, please post on the [discussion board](https://github.com/p-lambda/wilds/discussions).\n\n## Installation\n\nWe recommend using pip to install WILDS:\n```bash\npip install wilds\n```\n\nIf you have already installed it, please check that you have the latest version:\n```bash\npython -c \"import wilds; print(wilds.__version__)\"\n# This should print \"2.0.0\". If it doesn't, update by running:\npip install -U wilds\n```\n\nIf you plan to edit or contribute to WILDS, you should install from source:\n```bash\ngit clone git@github.com:p-lambda/wilds.git\ncd wilds\npip install -e .\n```\n\nIn `examples/`, we provide a set of scripts that can be used to train models on the WILDS datasets. These scripts were also used to benchmark baselines in our papers [[1](https://arxiv.org/abs/2012.07421), [2](https://arxiv.org/abs/2112.05090)]. \nThese scripts are not part of the installed WILDS package. To use them, you should install from source, as described above.\n\n### Requirements\nThe WILDS package depends on the following requirements:\n\n- numpy>=1.19.1\n- ogb>=1.2.6\n- outdated>=0.2.0\n- pandas>=1.1.0\n- pillow>=7.2.0\n- pytz>=2020.4\n- torch>=1.7.0\n- torch-scatter>=2.0.5\n- torch-geometric>=2.0.1\n- torchvision>=0.8.2\n- tqdm>=4.53.0\n- scikit-learn>=0.20.0\n- scipy>=1.5.4\n\nRunning `pip install wilds` or `pip install -e .` will automatically check for and install all of these requirements\n**except for the `torch-scatter` and `torch-geometric` packages**, which require a\n[quick manual install](https://pytorch-geometric.readthedocs.io/en/latest/notes/installation.html#installation-via-binaries).\n\n### Example script requirements\nTo run the example scripts, you will also need to install these additional dependencies:\n\n- transformers>=3.5.0\n- SwAV requires [Apex](https://github.com/NVIDIA/apex).\n  To install Apex, please follow the [README from the official SwAV repository](https://github.com/facebookresearch/swav#requirements).\n- Our code supports the optional use of [Weights & Biases](https://wandb.ai/site) to track and monitor experiments.\n  To install the Weights and Biases Python package, run `pip install wandb`.\n\nAll baseline experiments in the paper were run on Python 3.8.5 and CUDA 10.1.\n\n## Datasets\nWILDS currently includes 10 datasets, which we've briefly listed below. For full dataset descriptions, please see our papers ([1](https://arxiv.org/abs/2012.07421), [2](https://arxiv.org/abs/2112.05090)).\n\n| Dataset       | Modality | Labeled splits                    | Unlabeled splits                                                |\n| ------------- | -------- | --------------------------------- | --------------------------------------------------------------- |\n| iwildcam      | Image    | train, val, test, id_val, id_test | extra_unlabeled                                                 |\n| camelyon17    | Image    | train, val, test, id_val          | train_unlabeled, val_unlabeled, test_unlabeled                  |\n| rxrx1         | Image    | train, val, test, id_test         | -                                                               |\n| ogb-molpcba   | Graph    | train, val, test                  | train_unlabeled, val_unlabeled, test_unlabeled                  |\n| globalwheat   | Image    | train, val, test, id_val, id_test | train_unlabeled, val_unlabeled, test_unlabeled, extra_unlabeled |\n| civilcomments | Text     | train, val, test                  | extra_unlabeled                                                 |\n| fmow          | Image    | train, val, test, id_val, id_test | train_unlabeled, val_unlabeled, test_unlabeled                  |\n| poverty       | Image    | train, val, test, id_val, id_test | train_unlabeled, val_unlabeled, test_unlabeled                  |\n| amazon        | Text     | train, val, test, id_val, id_test | val_unlabeled, test_unlabeled, extra_unlabeled                  |\n| py150         | Text     | train, val, test, id_val, id_test | -                                                               |\n\n## Using the WILDS package\n### Data\n\nThe WILDS package provides a simple, standardized interface for all datasets in the benchmark.\nThis short Python snippet covers all of the steps of getting started with a WILDS dataset, including dataset download and initialization, accessing various splits, and preparing a user-customizable data loader.\nWe discuss data loading in more detail in [#Data loading](#data-loading).\n\n```py\nfrom wilds import get_dataset\nfrom wilds.common.data_loaders import get_train_loader\nimport torchvision.transforms as transforms\n\n# Load the full dataset, and download it if necessary\ndataset = get_dataset(dataset=\"iwildcam\", download=True)\n\n# Get the training set\ntrain_data = dataset.get_subset(\n    \"train\",\n    transform=transforms.Compose(\n        [transforms.Resize((448, 448)), transforms.ToTensor()]\n    ),\n)\n\n# Prepare the standard data loader\ntrain_loader = get_train_loader(\"standard\", train_data, batch_size=16)\n\n# (Optional) Load unlabeled data\ndataset = get_dataset(dataset=\"iwildcam\", download=True, unlabeled=True)\nunlabeled_data = dataset.get_subset(\n    \"test_unlabeled\",\n    transform=transforms.Compose(\n        [transforms.Resize((448, 448)), transforms.ToTensor()]\n    ),\n)\nunlabeled_loader = get_train_loader(\"standard\", unlabeled_data, batch_size=16)\n\n# Train loop\nfor labeled_batch, unlabeled_batch in zip(train_loader, unlabeled_loader):\n    x, y, metadata = labeled_batch\n    unlabeled_x, unlabeled_metadata = unlabeled_batch\n    ...\n```\n\nThe `metadata` contains information like the domain identity, e.g., which camera a photo was taken from, or which hospital the patient's data came from, etc., as well as other metadata.\n\n### Domain information\nTo allow algorithms to leverage domain annotations as well as other groupings over the available metadata, the WILDS package provides `Grouper` objects.\nThese `Grouper` objects are helper objects that extract group annotations from metadata, allowing users to specify the grouping scheme in a flexible fashion.\nThey are used to initialize group-aware data loaders (as discussed in [#Data loading](#data-loading)) and to implement algorithms that rely on domain annotations (e.g., Group DRO).\nIn the following code snippet, we initialize and use a `Grouper` that extracts the domain annotations on the iWildCam dataset, where the domain is location.\n\n```py\nfrom wilds.common.grouper import CombinatorialGrouper\n\n# Initialize grouper, which extracts domain information\n# In this example, we form domains based on location\ngrouper = CombinatorialGrouper(dataset, ['location'])\n\n# Train loop\nfor x, y_true, metadata in train_loader:\n    z = grouper.metadata_to_group(metadata)\n    ...\n```\n\n### Data loading\n\nFor training, the WILDS package provides two types of data loaders.\nThe standard data loader shuffles examples in the training set, and is used for the standard approach of empirical risk minimization (ERM), where we minimize the average loss.\n```py\nfrom wilds.common.data_loaders import get_train_loader\n\n# Prepare the standard data loader\ntrain_loader = get_train_loader('standard', train_data, batch_size=16)\n```\n\nTo support other algorithms that rely on specific data loading schemes, we also provide the group data loader.\nIn each minibatch, the group loader first samples a specified number of groups, and then samples a fixed number of examples from each of those groups.\n(By default, the groups are sampled uniformly at random, which upweights minority groups as a result. This can be toggled by the `uniform_over_groups` parameter.)\nWe initialize group loaders as follows, using `Grouper` that specifies the grouping scheme.\n\n```py\n# Prepare a group data loader that samples from user-specified groups\ntrain_loader = get_train_loader(\n    \"group\", train_data, grouper=grouper, n_groups_per_batch=2, batch_size=16\n)\n\n```\n\nLastly, we also provide a data loader for evaluation, which loads examples without shuffling (unlike the training loaders).\n\n```py\nfrom wilds.common.data_loaders import get_eval_loader\n\n# Get the test set\ntest_data = dataset.get_subset(\n    \"test\",\n    transform=transforms.Compose(\n        [transforms.Resize((224, 224)), transforms.ToTensor()]\n    ),\n)\n\n# Prepare the evaluation data loader\ntest_loader = get_eval_loader(\"standard\", test_data, batch_size=16)\n\n```\n\n### Evaluators\n\nThe WILDS package standardizes and automates evaluation for each dataset.\nInvoking the `eval` method of each dataset yields all metrics reported in the paper and on the leaderboard.\n\n```py\nfrom wilds.common.data_loaders import get_eval_loader\n\n# Get the test set\ntest_data = dataset.get_subset(\n    \"test\",\n    transform=transforms.Compose(\n        [transforms.Resize((224, 224)), transforms.ToTensor()]\n    ),\n)\n\n# Prepare the data loader\ntest_loader = get_eval_loader(\"standard\", test_data, batch_size=16)\n\n# Get predictions for the full test set\nfor x, y_true, metadata in test_loader:\n    y_pred = model(x)\n    # Accumulate y_true, y_pred, metadata\n\n# Evaluate\ndataset.eval(all_y_pred, all_y_true, all_metadata)\n# {'recall_macro_all': 0.66, ...}\n```\nMost `eval` methods take in predicted labels for `all_y_pred` by default, but the default inputs vary across datasets and are documented in the `eval` docstrings of the corresponding dataset class.\n\n## Using the example scripts\nIn `examples/`, we provide a set of scripts that can be used to train models on the WILDS datasets. \n\n```bash\npython examples/run_expt.py --dataset iwildcam --algorithm ERM --root_dir data\npython examples/run_expt.py --dataset civilcomments --algorithm groupDRO --root_dir data\npython examples/run_expt.py --dataset fmow --algorithm DANN --unlabeled_split test_unlabeled --root_dir data\n```\n\nThe scripts are configured to use the default models and reasonable hyperparameters. For exact hyperparameter settings used in our papers, please see [our CodaLab executable paper](https://wilds.stanford.edu/codalab).\n\n### Downloading and training on the WILDS datasets\nThe first time you run these scripts, you might need to download the datasets. You can do so with the `--download` argument, for example:\n```python\n# downloads (labeled) dataset\npython examples/run_expt.py --dataset globalwheat --algorithm groupDRO --root_dir data --download\n\n# additionally downloads all unlabeled data\npython examples/run_expt.py --dataset globalwheat --algorithm groupDRO --root_dir data --download  --unlabeled_split [...]\n```\nNote that downloading the large amount of unlabeled data is optional; unlabeled data will only be downloaded if some `--unlabeled_split` is set. (It does not matter which `--unlabeled_split` is set; all unlabeled data will be downloaded together.)\n\nAlternatively, you can use the standalone `wilds/download_datasets.py` script to download the datasets, for example:\n\n```bash\n# downloads (labeled) data\npython wilds/download_datasets.py --root_dir data\n\n# downloads (unlabeled) data\npython wilds/download_datasets.py --root_dir data --unlabeled\n```\n\nThis will download all datasets to the specified `data` folder. You can also use the `--datasets` argument to download particular datasets.\n\nThese are the sizes of each of our datasets, as well as their approximate time taken to train and evaluate the default model for a single ERM run using a NVIDIA V100 GPU.\n\n| Dataset command | Modality | Download size (GB) | Size on disk (GB) | Train+eval time (Hours) |\n| --------------- | -------- | ------------------ | ----------------- | ----------------------- |\n| iwildcam        | Image    | 11                 | 25                | 7                       |\n| camelyon17      | Image    | 10                 | 15                | 2                       |\n| rxrx1           | Image    | 7                  | 7                 | 11                      |\n| ogb-molpcba     | Graph    | 0.04               | 2                 | 15                      |\n| globalwheat     | Image    | 10                 | 10                | 2                       |\n| civilcomments   | Text     | 0.1                | 0.3               | 4.5                     |\n| fmow            | Image    | 50                 | 55                | 6                       |\n| poverty         | Image    | 12                 | 14                | 5                       |\n| amazon          | Text     | 7                  | 7                 | 5                       |\n| py150           | Text     | 0.1                | 0.8               | 9.5                     |\n\nThe following are the sizes of the unlabeled data bundles:\n\n| Dataset command | Modality | Download size (GB) | Size on disk (GB) |\n| --------------- | -------- | ------------------ | ----------------- |\n| iwildcam        | Image    | 41                 | 41                |\n| camelyon17      | Image    | 69.4               | 96                |\n| ogb-molpcba     | Graph    | 1.2                | 21                |\n| globalwheat     | Image    | 103                | 108               |\n| civilcomments   | Text     | 0.3                | 0.6               |\n| fmow\\*          | Image    | 50                 | 55                |\n| poverty         | Image    | 172                | 184               |\n| amazon\\*        | Text     | 7                  | 7                 |\n\n<sup> \\* These unlabeled datasets are downloaded simultaneously with the labeled data and do not need to be downloaded separately. </sup>\n\nWhile the `camelyon17` dataset is small and fast to train on, we advise against using it as the only dataset to prototype methods on, as the test performance of models trained on this dataset tend to exhibit a large degree of variability over random seeds.\n\nThe image datasets (`iwildcam`, `camelyon17`, `rxrx1`, `globalwheat`, `fmow`, and `poverty`) tend to have high disk I/O usage. If training time is much slower for you than the approximate times listed above, consider checking if I/O is a bottleneck (e.g., by moving to a local disk if you are using a network drive, or by increasing the number of data loader workers). To speed up training, you could also disable evaluation at each epoch or for all splits by toggling `--evaluate_all_splits` and related arguments.\n\n### Algorithms\nIn the `examples/algorithms` folder, we provide implementations of the adaptation algorithms benchmarked in our papers ([1](https://arxiv.org/abs/2012.07421), [2](https://arxiv.org/abs/2112.05090)).\nAll algorithms train on labeled data from a WILDS dataset's `train` split.\nSome algorithms are designed to also leverage unlabeled data. To load unlabeled data, specify an `--unlabeled_split` when running.\n\nIn addition to shared hyperparameters such as `lr`, `weight_decay`, `batch_size`, and `unlabeled_batch_size`, the scripts also take in command line arguments for algorithm-specific hyperparameters.\n\n| Algorithm command                                | Hyperparameters                                                                            | Notes                             | See WILDS paper                                                                |\n| ------------------------------------------------ | ------------------------------------------------------------------------------------------ | --------------------------------- | ------------------------------------------------------------------------------ |\n| ERM                                              | -                                                                                          | Only uses labeled data            | ([1](https://arxiv.org/abs/2012.07421), [2](https://arxiv.org/abs/2112.05090)) |\n| [groupDRO](https://arxiv.org/abs/1911.08731)     | `group_dro_step_size`                                                                      | Only uses labeled data            | ([1](https://arxiv.org/abs/2012.07421))                                        |\n| [deepCORAL](https://arxiv.org/abs/1511.05547)    | `coral_penalty_weight`                                                                     | Can optionally use unlabeled data | ([1](https://arxiv.org/abs/2012.07421), [2](https://arxiv.org/abs/2112.05090)) |\n| [IRM](https://arxiv.org/abs/1907.02893)          | `irm_lambda`, `irm_penalty_anneal_iters`                                                   | Only uses labeled data            | ([1](https://arxiv.org/abs/2012.07421))                                        |\n| [DANN](https://arxiv.org/abs/1505.07818)         | `dann_penalty_weight`, `dann_classifier_lr`, `dann_featurizer_lr`, `dann_discriminator_lr` | Can use unlabeled data            | ([2](https://arxiv.org/abs/2112.05090))                                        |\n| [AFN](https://arxiv.org/abs/1811.07456)          | `afn_penalty_weight`, `safn_delta_r`, `hafn_r`                                             | Designed to use unlabeled data    | ([2](https://arxiv.org/abs/2112.05090))                                        |\n| [FixMatch](https://arxiv.org/abs/2001.07685)     | `self_training_lambda`, `self_training_threshold`                                          | Designed to use unlabeled data    | ([2](https://arxiv.org/abs/2112.05090))                                        |\n| PseudoLabel                                      | `self_training_lambda`, `self_training_threshold`, `pseudolabel_T2`                        | Designed to use unlabeled data    | ([2](https://arxiv.org/abs/2112.05090))                                        |\n| [NoisyStudent](https://arxiv.org/abs/1911.04252) | `soft_pseudolabels`, `noisystudent_dropout_rate`                                           | Designed to use unlabeled data    | ([2](https://arxiv.org/abs/2112.05090))                                        |\n\nThe repository is set up to facilitate general-purpose algorithm development: new algorithms can be added to `examples/algorithms` and then run on all of the WILDS datasets using the default models.\n\n### Evaluating trained models\nWe also provide an evaluation script that aggregates prediction CSV files for different replicates and reports on their combined evaluation. To use this, run:\n\n```bash\npython examples/evaluate.py <predictions_dir> <output_dir> --root-dir <root_dir>\n```\n\nwhere `<predictions_dir>` is the path to your predictions directory, `<output_dir>` is where the results JSON will be writte, and `<root_dir>` is the dataset root directory.\nThe predictions directory should have a subdirectory for each dataset\n(e.g. `iwildcam`) containing prediction CSV files to evaluate; see our [submission guidelines](https://wilds.stanford.edu/submit/) for the format.\nThe evaluation script will skip over any datasets that has missing prediction files.\nAny dataset not in `<root_dir>` will be downloaded to `<root_dir>`.\n\n### Reproducibility\nWe have an [executable version](https://wilds.stanford.edu/codalab) of our paper on CodaLab that contains the exact commands, code, and data for the experiments reported in our paper, which rely on these scripts. Trained model weights for all datasets can also be found there.\nAll configurations and hyperparameters can also be found in the `examples/configs` folder of this repo, and dataset-specific parameters are in `examples/configs/datasets.py`.\n\n## Leaderboard\nIf you are developing new training algorithms and/or models on WILDS, please consider submitting them to our [public leaderboard](https://wilds.stanford.edu/leaderboard/).\n\n## Citing WILDS ([Bibtex](https://wilds.stanford.edu/assets/files/wilds_bib.txt))\nIf you use WILDS datasets in your work, please cite our paper:\n\n1. [**WILDS: A Benchmark of in-the-Wild Distribution Shifts.**](https://arxiv.org/abs/2012.07421) Pang Wei Koh*, Shiori Sagawa*, Henrik Marklund, Sang Michael Xie, Marvin Zhang, Akshay Balsubramani, Weihua Hu, Michihiro Yasunaga, Richard Lanas Phillips, Irena Gao, Tony Lee, Etienne David, Ian Stavness, Wei Guo, Berton A. Earnshaw, Imran S. Haque, Sara Beery, Jure Leskovec, Anshul Kundaje, Emma Pierson, Sergey Levine, Chelsea Finn, and Percy Liang. ICML 2021.\n\nIf you use unlabeled data from the WILDS datasets, please also cite:\n\n2. [**Extending the WILDS Benchmark for Unsupervised Adaptation.**](https://arxiv.org/abs/2112.05090) Shiori Sagawa*, Pang Wei Koh*, Tony Lee*, Irena Gao*, Sang Michael Xie, Kendrick Shen, Ananya Kumar, Weihua Hu, Michihiro Yasunaga, Henrik Marklund, Sara Beery, Etienne David, Ian Stavness, Wei Guo, Jure Leskovec, Kate Saenko, Tatsunori Hashimoto, Sergey Levine, Chelsea Finn, and Percy Liang. NeurIPS 2021 Workshop on Distribution Shifts.\n\nIn addition, please cite the original papers that introduced the datasets, as listed on the [datasets page](https://wilds.stanford.edu/datasets/).\n\n## Acknowledgements\nThe design of the WILDS benchmark was inspired by the [Open Graph Benchmark](https://ogb.stanford.edu/), and we are grateful to the Open Graph Benchmark team for their advice and help in setting up WILDS.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://wilds.stanford.edu",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wilds",
    "package_url": "https://pypi.org/project/wilds/",
    "platform": "",
    "project_url": "https://pypi.org/project/wilds/",
    "project_urls": {
      "Homepage": "https://wilds.stanford.edu"
    },
    "release_url": "https://pypi.org/project/wilds/2.0.0/",
    "requires_dist": [
      "numpy (>=1.19.1)",
      "ogb (>=1.2.6)",
      "outdated (>=0.2.0)",
      "pandas (>=1.1.0)",
      "pillow (>=7.2.0)",
      "pytz (>=2020.4)",
      "torch (>=1.7.0)",
      "torchvision (>=0.8.2)",
      "tqdm (>=4.53.0)",
      "scikit-learn (>=0.20.0)",
      "scipy (>=1.5.4)"
    ],
    "requires_python": ">=3.6",
    "summary": "WILDS distribution shift benchmark",
    "version": "2.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12285086,
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a58909e119a24955aa67906308f4eb40fceb60cab14e7a126506f88d4633258d",
          "md5": "9fc3aa5418a31bfd189d0127946e6e1f",
          "sha256": "4769f4ed63c3242124f8b93b509a28d420478bfded8c4c88d196f76449a285fe"
        },
        "downloads": -1,
        "filename": "wilds-0.9.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9fc3aa5418a31bfd189d0127946e6e1f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 51996,
        "upload_time": "2020-12-11T08:50:42",
        "upload_time_iso_8601": "2020-12-11T08:50:42.989240Z",
        "url": "https://files.pythonhosted.org/packages/a5/89/09e119a24955aa67906308f4eb40fceb60cab14e7a126506f88d4633258d/wilds-0.9.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "835de9a8ee4f53f4a43de0dd71c10a5da196fd9d482833ae95e472fca3144f56",
          "md5": "bb8568562b34b241f619a9990d7f7286",
          "sha256": "e3659bcc49122daab8a2e1d010bc0a43b11c0811fd232f7c8be8e6eb318b6ea6"
        },
        "downloads": -1,
        "filename": "wilds-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bb8568562b34b241f619a9990d7f7286",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 54564,
        "upload_time": "2020-12-11T08:50:44",
        "upload_time_iso_8601": "2020-12-11T08:50:44.573684Z",
        "url": "https://files.pythonhosted.org/packages/83/5d/e9a8ee4f53f4a43de0dd71c10a5da196fd9d482833ae95e472fca3144f56/wilds-0.9.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4da879a217f2c578d13cd0663bcfde2f792d2caf9b80d2b5e352a7845f2400e1",
          "md5": "983d987778f01efeb29487a72b4097cd",
          "sha256": "70af800b8daf32ce4dbaf599e87b53300d90e1f32dcbcd586b212fe84fbf67ed"
        },
        "downloads": -1,
        "filename": "wilds-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "983d987778f01efeb29487a72b4097cd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 52657,
        "upload_time": "2020-12-14T22:44:33",
        "upload_time_iso_8601": "2020-12-14T22:44:33.939318Z",
        "url": "https://files.pythonhosted.org/packages/4d/a8/79a217f2c578d13cd0663bcfde2f792d2caf9b80d2b5e352a7845f2400e1/wilds-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4d770990db4a474897b6d1ba2e8ca3885ce5eeb69ffbe9f9ec3178ba875f7079",
          "md5": "e531766c25f2d87c60dfe9e7b9a7cb13",
          "sha256": "a44b472ac1d6fc60691950fbc23631aa2cb081ec8de46feb32c5fdbf957f0ca4"
        },
        "downloads": -1,
        "filename": "wilds-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e531766c25f2d87c60dfe9e7b9a7cb13",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 55374,
        "upload_time": "2020-12-14T22:44:35",
        "upload_time_iso_8601": "2020-12-14T22:44:35.077259Z",
        "url": "https://files.pythonhosted.org/packages/4d/77/0990db4a474897b6d1ba2e8ca3885ce5eeb69ffbe9f9ec3178ba875f7079/wilds-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8ef8ff5c1b191e4f9ed99cb3ec434582eefacee7aaf172c6096f136fa6c200a7",
          "md5": "3cc7d24e484f04824049fe6c3cb690b8",
          "sha256": "0b7c07397eb18b24b6455a2ee5d6314f766268f0de55ce437cd12a6e16e33137"
        },
        "downloads": -1,
        "filename": "wilds-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3cc7d24e484f04824049fe6c3cb690b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 77324,
        "upload_time": "2021-03-10T06:35:19",
        "upload_time_iso_8601": "2021-03-10T06:35:19.594882Z",
        "url": "https://files.pythonhosted.org/packages/8e/f8/ff5c1b191e4f9ed99cb3ec434582eefacee7aaf172c6096f136fa6c200a7/wilds-1.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a02cf03c12b3ad676910c34513d509e60758e266508c56163cf365f753b2b7f2",
          "md5": "99163a5a056150515fff5b7ec4e99e5c",
          "sha256": "245454f4753b835d15e511647ec1c8de7648b81f5b1bf1e4a0395600ee6c11cf"
        },
        "downloads": -1,
        "filename": "wilds-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "99163a5a056150515fff5b7ec4e99e5c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 92308,
        "upload_time": "2021-07-19T06:16:48",
        "upload_time_iso_8601": "2021-07-19T06:16:48.275674Z",
        "url": "https://files.pythonhosted.org/packages/a0/2c/f03c12b3ad676910c34513d509e60758e266508c56163cf365f753b2b7f2/wilds-1.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "63afa0d7102537092dd4c4c9ff9986e13b929484da6cfdfdfaa42ef29e6d0ba7",
          "md5": "c651b2ed8ef98ff1d8953e4c8ae9fb96",
          "sha256": "575a71fda649bf00c7756aaa8c47a726c33bcc9a49177664f27547cadaa72c4b"
        },
        "downloads": -1,
        "filename": "wilds-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c651b2ed8ef98ff1d8953e4c8ae9fb96",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 89087,
        "upload_time": "2021-07-19T06:16:50",
        "upload_time_iso_8601": "2021-07-19T06:16:50.064929Z",
        "url": "https://files.pythonhosted.org/packages/63/af/a0d7102537092dd4c4c9ff9986e13b929484da6cfdfdfaa42ef29e6d0ba7/wilds-1.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b570aa3b3508c12b1469d1abf828909b2a0a6df6a2d9d2b47e5487eb9fec848b",
          "md5": "e4b7fe12b13a22446b3e2ecfe696cc48",
          "sha256": "d0cb53e25b64b6dd5d6a6878f0f236f0b75554d120441ae1e3a60d9843c4f103"
        },
        "downloads": -1,
        "filename": "wilds-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4b7fe12b13a22446b3e2ecfe696cc48",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 92293,
        "upload_time": "2021-07-19T07:04:18",
        "upload_time_iso_8601": "2021-07-19T07:04:18.969781Z",
        "url": "https://files.pythonhosted.org/packages/b5/70/aa3b3508c12b1469d1abf828909b2a0a6df6a2d9d2b47e5487eb9fec848b/wilds-1.2.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d1058351b8566cc5fdc266b77c51f62bc1ff8896693ee5a771ebed23b7d2ea08",
          "md5": "65fa4dce2759abe43ef9a21833b5f832",
          "sha256": "5404f9a25c58e565ec4bb7c15a965bc3782e4f3d3e26837279a7b56df50f6467"
        },
        "downloads": -1,
        "filename": "wilds-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "65fa4dce2759abe43ef9a21833b5f832",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 89086,
        "upload_time": "2021-07-19T07:04:20",
        "upload_time_iso_8601": "2021-07-19T07:04:20.682360Z",
        "url": "https://files.pythonhosted.org/packages/d1/05/8351b8566cc5fdc266b77c51f62bc1ff8896693ee5a771ebed23b7d2ea08/wilds-1.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "95407cd1716814fed530ec835de09217593940e391d90772cb84de67435f0ceb",
          "md5": "80d5d9e7f13a12f137a5c73935ed0a4e",
          "sha256": "da2358f683ce7d6e7ddd076f0ba38bb6c4c4f7e69d5075ba8ca07e48ed114ae7"
        },
        "downloads": -1,
        "filename": "wilds-1.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80d5d9e7f13a12f137a5c73935ed0a4e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 92480,
        "upload_time": "2021-08-04T22:35:34",
        "upload_time_iso_8601": "2021-08-04T22:35:34.212426Z",
        "url": "https://files.pythonhosted.org/packages/95/40/7cd1716814fed530ec835de09217593940e391d90772cb84de67435f0ceb/wilds-1.2.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e48a3ecb32af7b274d0075aad367431951052de8eaf89c9061223c387118b2b9",
          "md5": "39c2c5ef9683df702e2e5d9aa17ff6e3",
          "sha256": "dba813d50c5894e7d68706e03d1a7c7f53f610e73ffdc7ba0eb4c6c46356f68c"
        },
        "downloads": -1,
        "filename": "wilds-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "39c2c5ef9683df702e2e5d9aa17ff6e3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 89198,
        "upload_time": "2021-08-04T22:35:35",
        "upload_time_iso_8601": "2021-08-04T22:35:35.911942Z",
        "url": "https://files.pythonhosted.org/packages/e4/8a/3ecb32af7b274d0075aad367431951052de8eaf89c9061223c387118b2b9/wilds-1.2.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "07d86528f68f81af711474a1759dc3a4bf41693b7ed126259f3ff8cac64f55d0",
          "md5": "a1330c1cac06d9cb0cf06407db55845f",
          "sha256": "37abd465213e80746a88977780dfd05732e6712f808e59ffc07ae0ad060ecab7"
        },
        "downloads": -1,
        "filename": "wilds-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a1330c1cac06d9cb0cf06407db55845f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 126220,
        "upload_time": "2021-12-13T01:05:04",
        "upload_time_iso_8601": "2021-12-13T01:05:04.126145Z",
        "url": "https://files.pythonhosted.org/packages/07/d8/6528f68f81af711474a1759dc3a4bf41693b7ed126259f3ff8cac64f55d0/wilds-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f38dcbba978dd734a05b35eba69eac8b10ffe0e9c84a074d732f81ddb55e586d",
          "md5": "1cfcb8721b768adb1009f2408cb80012",
          "sha256": "3606ecfa0e1b3bf614cc4668355493553067929eddf2786917e53e15db06ce12"
        },
        "downloads": -1,
        "filename": "wilds-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1cfcb8721b768adb1009f2408cb80012",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 100067,
        "upload_time": "2021-12-13T01:05:05",
        "upload_time_iso_8601": "2021-12-13T01:05:05.842914Z",
        "url": "https://files.pythonhosted.org/packages/f3/8d/cbba978dd734a05b35eba69eac8b10ffe0e9c84a074d732f81ddb55e586d/wilds-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "07d86528f68f81af711474a1759dc3a4bf41693b7ed126259f3ff8cac64f55d0",
        "md5": "a1330c1cac06d9cb0cf06407db55845f",
        "sha256": "37abd465213e80746a88977780dfd05732e6712f808e59ffc07ae0ad060ecab7"
      },
      "downloads": -1,
      "filename": "wilds-2.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a1330c1cac06d9cb0cf06407db55845f",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 126220,
      "upload_time": "2021-12-13T01:05:04",
      "upload_time_iso_8601": "2021-12-13T01:05:04.126145Z",
      "url": "https://files.pythonhosted.org/packages/07/d8/6528f68f81af711474a1759dc3a4bf41693b7ed126259f3ff8cac64f55d0/wilds-2.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f38dcbba978dd734a05b35eba69eac8b10ffe0e9c84a074d732f81ddb55e586d",
        "md5": "1cfcb8721b768adb1009f2408cb80012",
        "sha256": "3606ecfa0e1b3bf614cc4668355493553067929eddf2786917e53e15db06ce12"
      },
      "downloads": -1,
      "filename": "wilds-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1cfcb8721b768adb1009f2408cb80012",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 100067,
      "upload_time": "2021-12-13T01:05:05",
      "upload_time_iso_8601": "2021-12-13T01:05:05.842914Z",
      "url": "https://files.pythonhosted.org/packages/f3/8d/cbba978dd734a05b35eba69eac8b10ffe0e9c84a074d732f81ddb55e586d/wilds-2.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}