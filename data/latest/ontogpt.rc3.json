{
  "info": {
    "author": "Chris Mungall",
    "author_email": "cjmungall@lbl.gov",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# OntoGPT\n\nGeneration of Ontologies and Knowledge Bases using GPT\n\nA knowledge extraction tool that uses a large language model to extract semantic information from text.\n\nThis makes use of so-called *instruction prompts* in Large Language Models (LLMs) such as GPT-4.\n\nCurrently there are two different pipelines implemented:\n\n- SPIRES: Structured Prompt Interrogation and Recursive Extraction of Semantics\n    - Zero-shot learning approach to extracting nested semantic structures from text\n    - Inputs: LinkML schema + text\n    - Outputs: JSON, YAML, or RDF or OWL that conforms to the schema\n    - Uses text-davinci-003\n- HALO: HAllucinating Latent Ontologies \n    - Few-shot learning approach to generating/hallucinating a domain ontology given a few examples\n    - Uses code-davinci-002\n\n## SPIRES: Usage\n\nGiven a short text `abstract.txt` with content such as:\n\n   > The cGAS/STING-mediated DNA-sensing signaling pathway is crucial\n   for interferon (IFN) production and host antiviral\n   responses\n   > \n   > ...\n   > [snip] \n   > ...\n   > \n   > The underlying mechanism was the\n   interaction of US3 with β-catenin and its hyperphosphorylation of\n   β-catenin at Thr556 to block its nuclear translocation\n   > ...\n   > ...\n\n(see [full input](tests/input/cases/gocam-betacat.txt))\n\nWe can extract this into the [GO pathway datamodel](src/ontogpt/templates/gocam.yaml):\n\n```bash\nontogpt extract -t gocam.GoCamAnnotations abstract.txt\n```\n\nGiving schema-compliant yaml such as:\n\n```yaml\ngenes:\n- HGNC:2514\n- HGNC:21367\n- HGNC:27962\n- US3\n- FPLX:Interferon\n- ISG\ngene_gene_interactions:\n- gene1: US3\n  gene2: HGNC:2514\ngene_localizations:\n- gene: HGNC:2514\n  location: Nuclear\ngene_functions:\n- gene: HGNC:2514\n  molecular_activity: Transcription\n- gene: HGNC:21367\n  molecular_activity: Production\n...\n```\n\nSee [full output](tests/output/gocam-betacat.yaml)\n\nNote in the above the grounding is very preliminary and can be improved. Ungrounded NamedEntities appear as text.\n\n## How it works\n\n1. You provide an arbitrary data model, describing the structure you want to extract text into\n    - this can be nested (but see limitations below)\n2. provide your preferred annotations for grounding NamedEntity fields\n3. ontogpt will:\n    - generate a prompt\n    - feed the prompt to a language model (currently OpenAI)\n    - parse the results into a dictionary structure\n    - ground the results using a preferred annotator\n\n## Pre-requisites\n\n- python 3.9+\n- an OpenAI account\n- a BioPortal account (optional, for grounding)\n\nYou will need to set both API keys using OAK (which is a dependency of this project)\n\n```\npoetry run runoak set-apikey -e openai <your openai api key>\npoetry run runoak set-apikey -e bioportal <your bioportal api key>\n```\n\n## How to define your own extraction data model\n\n### Step 1: Define a schema\n\nSee [src/ontogpt/templates/](src/ontogpt/templates/) for examples.\n\nDefine a schema (using a subset of [LinkML](https://linkml.io)) that describes the structure you want to extract from your text.\n\n```yaml\nclasses:\n  MendelianDisease:\n    attributes:\n      name:\n        description: the name of the disease\n        examples:\n          - value: peroxisome biogenesis disorder\n        identifier: true  ## needed for inlining\n      description:\n        description: a description of the disease\n        examples:\n          - value: >-\n             Peroxisome biogenesis disorders, Zellweger syndrome spectrum (PBD-ZSS) is a group of autosomal recessive disorders affecting the formation of functional peroxisomes, characterized by sensorineural hearing loss, pigmentary retinal degeneration, multiple organ dysfunction and psychomotor impairment\n      synonyms:\n        multivalued: true\n        examples:\n          - value: Zellweger syndrome spectrum\n          - value: PBD-ZSS\n      subclass_of:\n        multivalued: true\n        range: MendelianDisease\n        examples:\n          - value: lysosomal disease\n          - value: autosomal recessive disorder\n      symptoms:\n        range: Symptom\n        multivalued: true\n        examples:\n          - value: sensorineural hearing loss\n          - value: pigmentary retinal degeneration\n      inheritance:\n        range: Inheritance\n        examples:\n          - value: autosomal recessive\n      genes:\n        range: Gene\n        multivalued: true\n        examples:\n          - value: PEX1\n          - value: PEX2\n          - value: PEX3\n\n  Gene:\n    is_a: NamedThing\n    id_prefixes:\n      - HGNC\n    annotations:\n      annotators: gilda:, bioportal:hgnc-nr\n\n  Symptom:\n    is_a: NamedThing\n    id_prefixes:\n      - HP\n    annotations:\n      annotators: sqlite:obo:hp\n\n  Inheritance:\n    is_a: NamedThing\n    annotations:\n      annotators: sqlite:obo:hp\n```\n\n- the schema is defined in LinkML\n- prompt hints can be specified using the `prompt` annotation (otherwise description is used)\n- multivalued fields are supported\n- the default range is string - these are not grounded. E.g. disease name, synonyms\n- define a class for each NamedEntity\n- for any NamedEntity, you can specify a preferred annotator using the `annotators` annotation\n\nWe recommend following an established schema like Biolink, but you can define your own.\n\n### Step 2: Compile the schema\n\nRun the `make` command at the top level. This will compile the schema to pedantic\n\n### Step 3: Run the command line\n\ne.g.\n\n```\nontogpt extract -t mendelian_disease.MendelianDisease marfan-wikipedia.txt\n```\n\n## Web Application\n\nThere is a bare bones web application\n\n```\npoetry run web-ontogpt\n```\n\nNote that the agent running uvicorn must have the API key set, so for obvious reasons\ndon't host this publicly without authentication, unless you want your credits drained. \n\n## Features\n\n### Multiple levels of nesting\n\nCurrently no more than two levels of nesting are recommended.\n\nIf a field has a range which is itself a class and not a primitive, it will attempt to nest\n\nE.g. the gocam schema has an attribute:\n\n```yaml\n  attributes:\n      ...\n      gene_functions:\n        description: semicolon-separated list of gene to molecular activity relationships\n        multivalued: true\n        range: GeneMolecularActivityRelationship\n```\n\nBecause GeneMolecularActivityRelationship is *inlined* it will nest\n\nThe generated prompt is:\n\n`gene_functions : <semicolon-separated list of gene to molecular activities relationships>`\n\nThe output of this is then passed through further SPIRES iterations.\n\n### Text length limit\n\nCurrently SPIRES must use text-davinci-003, which has a total 4k token limit (prompt + completion).\n\nYou can pass in a parameter to split the text into chunks, results will be recombined automatically,\nbut more experiments need to be done to determined how reliable this is.\n\n## Schema Tips\n\nIt helps to have an understanding of the [LinkML](https://linkml.io) schema language, but it should be possible\nto define your own schemas using the examples as a guide.\n\nOntoGPT-specific extensions are specified as *annotations*\n\nYou can specify a set of annotators for a field using the `annotators` annotation\n\n```yaml\n  Gene:\n    is_a: NamedThing\n    id_prefixes:\n      - HGNC\n    annotations:\n      annotators: gilda:, bioportal:hgnc-nr, obo:pr\n```\n\nThe annotators are applied in order.\n\nAdditionally, when performing grounding, the following measures can be taken to improve accuracy:\n\n- specify the valid set of ID prefixes using `id_prefixes`\n- some vocabularies have structural IDs that are amenable to regexes, you can specify these using `pattern`\n- you can make use of `values_from` slot to specify a [Dynamic Value Set](https://linkml.io/linkml/schemas/enums.html#dynamic-enums)\n    - for example, you can constrain the set of valid locations for a gene product to be subclasses of `cellular_component` in GO or `cell` in CL.\n\nFor example:\n\n```yaml\nclasses:\n  ...\n  GeneLocation:\n    is_a: NamedEntity\n    id_prefixes:\n      - GO\n      - CL\n    annotations:\n      annotators: \"sqlite:obo:go, sqlite:obo:cl\"\n    slot_usage:\n      id:\n        values_from:\n          - GOCellComponentType\n          - CellType\n\nenums:\n\n  GOCellComponentType:\n    reachable_from:\n      source_ontology: obo:go\n      source_nodes:\n        - GO:0005575 ## cellular_component\n  CellType:\n    reachable_from:\n      source_ontology: obo:cl\n      source_nodes:\n        - CL:0000000 ## cell\n        \n```\n\n## OWL Exports\n\nThe `extract` command will let you export the results as OWL axioms, utilizing linkml-owl mappings in the schema.\n\nFor example:\n\n```bash\nontogpt extract -t recipe recipe-spaghetti.txt -o recipe-spaghetti.owl -O owl\n```\n\nSee [src/ontogpt/templates/recipe.yaml](src/ontogpt/templates/recipe.yaml) \nfor an example of a schema that uses linkml-owl mappings.\n\nSee the Makefile for a full pipeline that involves using robot to extract a subset of FOODON\nand merge in the extracted results.\n\n## HALO: Usage\n\nTODO\n\n\n\n## OntoGPT Limitations\n\n### Non-deterministic\n\nThis relies on an existing LLM, and LLMs can be fickle in their responses.\n\n### Coupled to OpenAI\n\nYou will need an openai account. In theory any LLM can be used but in practice the parser is tuned for OpenAI\n\n\n\n# Acknowledgements\n\nThis [cookiecutter](https://cookiecutter.readthedocs.io/en/stable/README.html) project was developed from the [sphintoxetry-cookiecutter](https://github.com/hrshdhgd/sphintoxetry-cookiecutter) template and will be kept up-to-date using [cruft](https://cruft.github.io/cruft/).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD-3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ontogpt",
    "package_url": "https://pypi.org/project/ontogpt/",
    "platform": null,
    "project_url": "https://pypi.org/project/ontogpt/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/ontogpt/0.2.0/",
    "requires_dist": [
      "Jinja2 (>=3.1.2,<4.0.0)",
      "SQLAlchemy (>=1.4.32,<2.0.0,!=1.4.46)",
      "aiohttp (>=3.8.4,<4.0.0)",
      "airium (>=0.2.5,<0.3.0)",
      "beautifulsoup4 (>=4.11.1,<5.0.0)",
      "bioc (>=2.0.post5,<3.0)",
      "class-resolver (>=0.3.10,<0.4.0)",
      "click (>=8.1.3,<9.0.0)",
      "eutils (>=0.6.0,<0.7.0)",
      "fastapi (>=0.88.0,<0.89.0)",
      "gilda (>=0.10.3,<0.11.0)",
      "greenlet (!=2.0.2)",
      "httpx (>=0.23.3,<0.24.0)",
      "importlib (>=1.0.4,<2.0.0)",
      "inflect (>=6.0.2,<7.0.0)",
      "inflection (>=0.5.1,<0.6.0)",
      "jsonlines (>=3.1.0,<4.0.0)",
      "linkml (>=1.4.10,<2.0.0)",
      "linkml-owl (>=0.2.7,<0.3.0)",
      "linkml-runtime (>=1.4.9,<2.0.0)",
      "mkdocs-mermaid2-plugin (>=0.6.0,<0.7.0)",
      "myst-parser[docs] (>=0.18.1,<0.19.0) ; extra == \"docs\"",
      "nlpcloud (>=1.0.39,<2.0.0)",
      "oaklib (>=0.1.64,<0.2.0)",
      "openai (>=0.27.2,<0.28.0)",
      "python-multipart (>=0.0.5,<0.0.6)",
      "setuptools (>=65.5.0,<66.0.0)",
      "sphinx-autodoc-typehints[docs] (>=1.19.4,<2.0.0) ; extra == \"docs\"",
      "sphinx-click[docs] (>=4.3.0,<5.0.0) ; extra == \"docs\"",
      "sphinx-rtd-theme[docs] (>=1.0.0,<2.0.0) ; extra == \"docs\"",
      "sphinx[docs] (>=5.3.0,<6.0.0) ; extra == \"docs\"",
      "tiktoken (>=0.1.1,<0.2.0)",
      "tox (>=3.25.1,<4.0.0)",
      "uvicorn (>=0.20.0,<0.21.0)",
      "wikipedia (>=1.4.0,<2.0.0)"
    ],
    "requires_python": ">=3.9,<4.0",
    "summary": "OntoGPT",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17407255,
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cf22c19e188bcfda94430f126d24478b295a0011c87e97daeaf5d312c4649438",
          "md5": "1a1547f665e996d917b3df1ef64d3ec5",
          "sha256": "2123ac99eda7fbe420ceec73869e9406cc9dafb98c0c6385064caf853241ff68"
        },
        "downloads": -1,
        "filename": "ontogpt-0.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1a1547f665e996d917b3df1ef64d3ec5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 968872,
        "upload_time": "2023-01-05T22:38:36",
        "upload_time_iso_8601": "2023-01-05T22:38:36.638263Z",
        "url": "https://files.pythonhosted.org/packages/cf/22/c19e188bcfda94430f126d24478b295a0011c87e97daeaf5d312c4649438/ontogpt-0.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8bea355ab218736d5b636498a67b89a71fb60b37f320bee63c23d6967f40d05c",
          "md5": "15d4b0f60f67bc7818dce1b95d183b1f",
          "sha256": "711c98b498959a4f63b7dfa31d8cd0da7eeac315a766d71121a6a4325ff46c4e"
        },
        "downloads": -1,
        "filename": "ontogpt-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "15d4b0f60f67bc7818dce1b95d183b1f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 942035,
        "upload_time": "2023-01-05T22:38:40",
        "upload_time_iso_8601": "2023-01-05T22:38:40.412836Z",
        "url": "https://files.pythonhosted.org/packages/8b/ea/355ab218736d5b636498a67b89a71fb60b37f320bee63c23d6967f40d05c/ontogpt-0.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e67075f0fff832866991c91b459cda6e5fe67df6f3b5962caa6f6df5f020fd5",
          "md5": "75da63f998e03e320f82437a6e34ab98",
          "sha256": "2e13df67b3aed74a9da1029497192495046707f8150717088fa7796b265c9676"
        },
        "downloads": -1,
        "filename": "ontogpt-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75da63f998e03e320f82437a6e34ab98",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 968873,
        "upload_time": "2023-01-05T22:45:44",
        "upload_time_iso_8601": "2023-01-05T22:45:44.416146Z",
        "url": "https://files.pythonhosted.org/packages/1e/67/075f0fff832866991c91b459cda6e5fe67df6f3b5962caa6f6df5f020fd5/ontogpt-0.1.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2d714e9b4d87e5f2f287dff4feefb24458076de27489c72610f21fbc61bc05b4",
          "md5": "4a9b144163208ff0b548eea715155ffa",
          "sha256": "34420b29ac3cbc821b47a7322b94c7a991217c4054e4dd4c1c84c5d627be9348"
        },
        "downloads": -1,
        "filename": "ontogpt-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4a9b144163208ff0b548eea715155ffa",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 941601,
        "upload_time": "2023-01-05T22:45:45",
        "upload_time_iso_8601": "2023-01-05T22:45:45.744769Z",
        "url": "https://files.pythonhosted.org/packages/2d/71/4e9b4d87e5f2f287dff4feefb24458076de27489c72610f21fbc61bc05b4/ontogpt-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fd18eec8e2ccfa667c15f8d474280092ec5dec74ab8cf149eb26bdd1150c110c",
          "md5": "1bf50eea62bd13ff26079d4984dadd8a",
          "sha256": "e562f2b7e4a0b01424c8a69b209063f5f5a393480198fd5c477c53b5a3ec70a1"
        },
        "downloads": -1,
        "filename": "ontogpt-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1bf50eea62bd13ff26079d4984dadd8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9,<4.0",
        "size": 978649,
        "upload_time": "2023-03-23T01:15:39",
        "upload_time_iso_8601": "2023-03-23T01:15:39.962869Z",
        "url": "https://files.pythonhosted.org/packages/fd/18/eec8e2ccfa667c15f8d474280092ec5dec74ab8cf149eb26bdd1150c110c/ontogpt-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "26d6fb298b0cadb342c2d91f4fb3e0630f98502ab03d2712277e0ea30c5c75ec",
          "md5": "986442c42c906b617f630d23fac4c129",
          "sha256": "71c56dcf05fe125cd0478c5b2cd19c8be73fdb614d09ace18b43752b31864e8d"
        },
        "downloads": -1,
        "filename": "ontogpt-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "986442c42c906b617f630d23fac4c129",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9,<4.0",
        "size": 945459,
        "upload_time": "2023-03-23T01:15:41",
        "upload_time_iso_8601": "2023-03-23T01:15:41.966586Z",
        "url": "https://files.pythonhosted.org/packages/26/d6/fb298b0cadb342c2d91f4fb3e0630f98502ab03d2712277e0ea30c5c75ec/ontogpt-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "fd18eec8e2ccfa667c15f8d474280092ec5dec74ab8cf149eb26bdd1150c110c",
        "md5": "1bf50eea62bd13ff26079d4984dadd8a",
        "sha256": "e562f2b7e4a0b01424c8a69b209063f5f5a393480198fd5c477c53b5a3ec70a1"
      },
      "downloads": -1,
      "filename": "ontogpt-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1bf50eea62bd13ff26079d4984dadd8a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9,<4.0",
      "size": 978649,
      "upload_time": "2023-03-23T01:15:39",
      "upload_time_iso_8601": "2023-03-23T01:15:39.962869Z",
      "url": "https://files.pythonhosted.org/packages/fd/18/eec8e2ccfa667c15f8d474280092ec5dec74ab8cf149eb26bdd1150c110c/ontogpt-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "26d6fb298b0cadb342c2d91f4fb3e0630f98502ab03d2712277e0ea30c5c75ec",
        "md5": "986442c42c906b617f630d23fac4c129",
        "sha256": "71c56dcf05fe125cd0478c5b2cd19c8be73fdb614d09ace18b43752b31864e8d"
      },
      "downloads": -1,
      "filename": "ontogpt-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "986442c42c906b617f630d23fac4c129",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9,<4.0",
      "size": 945459,
      "upload_time": "2023-03-23T01:15:41",
      "upload_time_iso_8601": "2023-03-23T01:15:41.966586Z",
      "url": "https://files.pythonhosted.org/packages/26/d6/fb298b0cadb342c2d91f4fb3e0630f98502ab03d2712277e0ea30c5c75ec/ontogpt-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}