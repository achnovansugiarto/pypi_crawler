{
  "info": {
    "author": "Amine Sehili",
    "author_email": "amine.sehili@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Multimedia :: Sound/Audio :: Analysis",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "\n\n.. image:: doc/figures/auditok-logo.png\n    :align: center\n\n.. image:: https://travis-ci.org/amsehili/auditok.svg?branch=master\n    :target: https://travis-ci.org/amsehili/auditok\n\n.. image:: https://readthedocs.org/projects/auditok/badge/?version=latest\n    :target: http://auditok.readthedocs.org/en/latest/?badge=latest\n    :alt: Documentation Status\n\n``auditok`` is an **Audio Activity Detection** tool that can process online data (read from an audio device or from standard input) as well as audio files. It can be used as a command line program or by calling its API.\n\nA basic version of ``auditok`` will run with standard Python (>=3.4). Without installing additional dependencies, ``auditok`` can only deal with audio files in *wav* or *raw* formats. if you want more features, the following packages are needed:\n\n- `pydub <https://github.com/jiaaro/pydub>`_ : read audio files in popular audio formats (ogg, mp3, etc.) or extract audio from a video file.\n\n- `pyaudio <http://people.csail.mit.edu/hubert/pyaudio/>`_ : read audio data from the microphone and play back detections.\n\n- `tqdm <https://github.com/tqdm/tqdm>`_ : show progress bar while playing audio clips.\n\n- `matplotlib <http://matplotlib.org/>`_ : plot audio signal and detections (see figures above ).\n\n- `numpy <http://www.numpy.org>`_ : required by matplotlib. Also used for some math operations instead of standard python if available.\n\nInstallation\n------------\n\n.. code:: bash\n\n    git clone https://github.com/amsehili/auditok.git\n    cd auditok\n    python setup.py install\n\nBasic example\n-------------\n\n.. code:: python\n\n    from auditok import split\n\n    # split returns a generator of AudioRegion objects\n    audio_regions = split(\"audio.wav\")\n    for region in audio_regions:\n        region.play(progress_bar=True)\n        filename = region.save(\"/tmp/region_{meta.start:.3f}.wav\")\n        print(\"region saved as: {}\".format(filename))\n\nExample using `AudioRegion`\n---------------------------\n\n.. code:: python\n\n    from auditok import AudioRegion\n    region = AudioRegion.load(\"audio.wav\")\n    regions = region.split_and_plot() # or just region.splitp()\n\noutput figure:\n\n.. image:: doc/figures/example_1.png\n\nWorking with AudioRegions\n-------------------------\n\nBeyond splitting, there are a couple of interesting operations you can do with ``AudioRegion`` objects.\n\nConcatenate regions\n===================\n\n.. code:: python\n\n    from auditok import AudioRegion\n    region_1 = AudioRegion.load(\"audio_1.wav\")\n    region_2 = AudioRegion.load(\"audio_2.wav\")\n    region_3 = region_1 + region_2\n\nParticularly useful if you want to join regions returned by ``split``:\n\n.. code:: python\n\n    from auditok import AudioRegion\n    regions = AudioRegion.load(\"audio.wav\").split()\n    gapless_region = sum(regions)\n\nRepeat a region\n===============\n\nMultiply by a positive integer:\n\n.. code:: python\n\n    from auditok import AudioRegion\n    region = AudioRegion.load(\"audio.wav\")\n    region_x3 = region * 3\n\nMake slices of equal size out of a region\n=========================================\n\nDivide by a positive integer:\n\n.. code:: python\n\n    from auditok import AudioRegion\n    region = AudioRegion.load(\"audio.wav\")\n    regions = regions / 5\n    assert sum(regions) == region\n\nMake audio slices of arbitrary size\n===================================\n\nSlicing an ``AudioRegion`` can be interesting in many situations. You can for example remove a fixed-size portion of audio data from the beginning or the end of a region or crop a region by an arbitrary amount as a data augmentation strategy, etc.\n\nThe most accurate way to slice an ``AudioRegion`` is to use indices that directly refer to raw audio samples. In the following example, assuming that the sampling rate of audio data is 16000, you can extract a 5-second region from main region, starting from the 20th second as follows:\n\n.. code:: python\n\n    from auditok import AudioRegion\n    region = AudioRegion.load(\"audio.wav\")\n    start = 20 * 16000\n    stop = 25 * 16000\n    five_second_region = region[start:stop]\n\nThis allows you to practically start and stop at any sample within the region. Just as with a `list` you can omit one of `start` and `stop`, or both. You can also use negative indices:\n\n.. code:: python\n\n    from auditok import AudioRegion\n    region = AudioRegion.load(\"audio.wav\")\n    start = -3 * region.sr # `sr` is an alias of `sampling_rate`\n    three_last_seconds = region[start:]\n\nWhile slicing by raw samples is accurate, slicing with temporal indices is more intuitive. You can do so by accessing the ``millis`` or ``seconds`` views of ``AudioRegion`` (or their shortcut alias ``ms`` and ``sec``/``s``).\n\nWith the ``millis`` view:\n\n.. code:: python\n\n    from auditok import AudioRegion\n    region = AudioRegion.load(\"audio.wav\")\n    five_second_region = region.millis[5000:10000]\n\nor with the ``seconds`` view\n\n.. code:: python\n\n    from auditok import AudioRegion\n    region = AudioRegion.load(\"audio.wav\")\n    five_second_region = region.seconds[5:10]\n\nGet an array of audio samples\n=============================\n\n.. code:: python\n\n    from auditok import AudioRegion\n    region = AudioRegion.load(\"audio.wav\")\n    samples = region.samples\n\nIf ``numpy`` is installed, this will return a ``numpy.ndarray``. If audio data is mono the returned array is 1D, otherwise it's 2D. If ``numpy`` is not installed this will return a standard ``array.array`` for mono data, and a list of ``array.array`` for multichannel data.\n\nAlternatively you can use:\n\n.. code:: python\n\n    import numpy as np\n    region = AudioRegion.load(\"audio.wav\")\n    samples = np.asarray(region)\n\nLicense\n-------\nMIT.\n\n\n\n",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/phrase-loop-player/auditok",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "forked-auditok-split-without-data",
    "package_url": "https://pypi.org/project/forked-auditok-split-without-data/",
    "platform": "ANY",
    "project_url": "https://pypi.org/project/forked-auditok-split-without-data/",
    "project_urls": {
      "Homepage": "https://github.com/phrase-loop-player/auditok"
    },
    "release_url": "https://pypi.org/project/forked-auditok-split-without-data/0.2.0a0/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A module for Audio/Acoustic Activity Detection",
    "version": "0.2.0a0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 6865325,
  "releases": {
    "0.2.0a0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9f4e6cfb572ecc55ee977a42735446c78eee396ff65bf7a9a0e5e8504960f3a1",
          "md5": "edfac6e632e52947d95b124c3ec73311",
          "sha256": "58f5e48b8f29e1f138a0268ec3e617caca57009b80b9640ca703f2cdcec57741"
        },
        "downloads": -1,
        "filename": "forked_auditok_split_without_data-0.2.0a0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edfac6e632e52947d95b124c3ec73311",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 1486059,
        "upload_time": "2020-03-23T13:10:25",
        "upload_time_iso_8601": "2020-03-23T13:10:25.615343Z",
        "url": "https://files.pythonhosted.org/packages/9f/4e/6cfb572ecc55ee977a42735446c78eee396ff65bf7a9a0e5e8504960f3a1/forked_auditok_split_without_data-0.2.0a0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d9d0da3001c311ba3f945d1a0848a7f6e426a397ce6b27f3b794fb93ac015e68",
          "md5": "c4dab69574ec33a96780725d06467ae0",
          "sha256": "1c28c581ed58ebe5cca81cdddf642296c96b947bdc0ac873d0013d527356076c"
        },
        "downloads": -1,
        "filename": "forked-auditok-split-without-data-0.2.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "c4dab69574ec33a96780725d06467ae0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 38789,
        "upload_time": "2020-03-23T13:10:28",
        "upload_time_iso_8601": "2020-03-23T13:10:28.301654Z",
        "url": "https://files.pythonhosted.org/packages/d9/d0/da3001c311ba3f945d1a0848a7f6e426a397ce6b27f3b794fb93ac015e68/forked-auditok-split-without-data-0.2.0a0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "9f4e6cfb572ecc55ee977a42735446c78eee396ff65bf7a9a0e5e8504960f3a1",
        "md5": "edfac6e632e52947d95b124c3ec73311",
        "sha256": "58f5e48b8f29e1f138a0268ec3e617caca57009b80b9640ca703f2cdcec57741"
      },
      "downloads": -1,
      "filename": "forked_auditok_split_without_data-0.2.0a0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "edfac6e632e52947d95b124c3ec73311",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 1486059,
      "upload_time": "2020-03-23T13:10:25",
      "upload_time_iso_8601": "2020-03-23T13:10:25.615343Z",
      "url": "https://files.pythonhosted.org/packages/9f/4e/6cfb572ecc55ee977a42735446c78eee396ff65bf7a9a0e5e8504960f3a1/forked_auditok_split_without_data-0.2.0a0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d9d0da3001c311ba3f945d1a0848a7f6e426a397ce6b27f3b794fb93ac015e68",
        "md5": "c4dab69574ec33a96780725d06467ae0",
        "sha256": "1c28c581ed58ebe5cca81cdddf642296c96b947bdc0ac873d0013d527356076c"
      },
      "downloads": -1,
      "filename": "forked-auditok-split-without-data-0.2.0a0.tar.gz",
      "has_sig": false,
      "md5_digest": "c4dab69574ec33a96780725d06467ae0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 38789,
      "upload_time": "2020-03-23T13:10:28",
      "upload_time_iso_8601": "2020-03-23T13:10:28.301654Z",
      "url": "https://files.pythonhosted.org/packages/d9/d0/da3001c311ba3f945d1a0848a7f6e426a397ce6b27f3b794fb93ac015e68/forked-auditok-split-without-data-0.2.0a0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}