{
  "info": {
    "author": "AeonLucid",
    "author_email": "aeonlucid@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: System :: Emulators"
    ],
    "description": "# AndroidNativeEmu\n\nAllows you to partly emulate an Android native library.\n\nThis is an educational project to learn more about the ELF file format and [Unicorn](https://github.com/unicorn-engine/unicorn).\n\n[中文README](README_cn.md)\n\n## Features\n\n- Emulation of the [JNI Invocation API](https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/invocation.html) so `JNI_OnLoad` can be called properly.\n- Emulation of native memory for malloc / memcpy.\n- Emulation of syscalls (SVC #0) instruction.\n- Hooking through the symbol table.\n- All JavaVM, JNIEnv and hooked functions are handled by python.\n- Enable VFP support.\n\n## Usage\n\n> In the future this will be possible through pypi.\n\nMake sure you are using python 3.7.\n\n1. Clone the repository\n2. Run `pip install -r requirements.txt`\n3. Run `python example.py`\n\n> If you have trouble getting the `keystone-engine` dependency on Windows (as I did):\n> 1. Clone their [repository](https://github.com/keystone-engine/keystone)\n> 2. Open a terminal in `bindings/python`\n> 3. Run `python setup.py install` (Make sure you are using python 3.7)\n> 4. Download their `Windows - Core engine` package [here](http://www.keystone-engine.org/download/) for your python arch.\n> 5. Put the `keystone.dll` in `C:\\location_to_python\\Lib\\site-packages\\keystone\\`.\n\n## TODO\n\n- Improve file descriptors in `vfs/file_system.py` so they are re-useable.\n- Add a way for the VirtualFileSystem to give back dynamic files, such as `/proc/self/status`, `/proc/self/status` but also `/dev/urandom`.\n- Library consumers must be able to easily rebuild the needed Java classes for a native library, which are used by the native library through the JNIEnv.\n  - ~~Classes~~\n  - ~~Objects~~\n  - ~~Methods~~\n  - ~~Native methods~~\n  - Fields\n  - Types\n  - Reflection\n\n## Dependencies\n\n- [Unicorn CPU emulator framework](https://github.com/unicorn-engine/unicorn)\n- [Keystone assembler framework](https://github.com/keystone-engine/keystone)\n\n## Resources\n\nAll resources used while developing AndroidNativeEmu.\n\n### Text sources\n- https://greek0.net/elf.html\n- https://stackoverflow.com/questions/13908276/loading-elf-file-in-c-in-user-space\n- https://programtalk.com/python-examples/pyelftools.elftools.elf.relocation.Relocation/\n- http://infocenter.arm.com/help/topic/com.arm.doc.ihi0044f/IHI0044F_aaelf.pdf\n- https://wiki.osdev.org/ELF_Tutorial\n- https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html\n- https://android.googlesource.com/platform/dalvik/+/donut-release/vm/Jni.c\n\n### Code sources\n- https://github.com/lunixbochs/usercorn\n- https://github.com/slick1015/pad_unpacker (SVC 0 instruction)",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/AeonLucid/AndroidNativeEmu",
    "keywords": "python",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "androidemu",
    "package_url": "https://pypi.org/project/androidemu/",
    "platform": "",
    "project_url": "https://pypi.org/project/androidemu/",
    "project_urls": {
      "Homepage": "https://github.com/AeonLucid/AndroidNativeEmu"
    },
    "release_url": "https://pypi.org/project/androidemu/0.0.2/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "Allows you to partly emulate an Android native library.",
    "version": "0.0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11345027,
  "releases": {
    "0.0.1": [],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d176f90416b8359be502ef9cea1b19ec014da16142b2fd58e0ae3cee6c9d6aaa",
          "md5": "a1a796e940765b0da882f42314b33283",
          "sha256": "d7253b4e09d372cb7d08f8da047b6d73d28d9ee52078bb72f6db638d53dd062e"
        },
        "downloads": -1,
        "filename": "androidemu-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a1a796e940765b0da882f42314b33283",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 48230,
        "upload_time": "2021-09-02T09:17:20",
        "upload_time_iso_8601": "2021-09-02T09:17:20.976788Z",
        "url": "https://files.pythonhosted.org/packages/d1/76/f90416b8359be502ef9cea1b19ec014da16142b2fd58e0ae3cee6c9d6aaa/androidemu-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d176f90416b8359be502ef9cea1b19ec014da16142b2fd58e0ae3cee6c9d6aaa",
        "md5": "a1a796e940765b0da882f42314b33283",
        "sha256": "d7253b4e09d372cb7d08f8da047b6d73d28d9ee52078bb72f6db638d53dd062e"
      },
      "downloads": -1,
      "filename": "androidemu-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a1a796e940765b0da882f42314b33283",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 48230,
      "upload_time": "2021-09-02T09:17:20",
      "upload_time_iso_8601": "2021-09-02T09:17:20.976788Z",
      "url": "https://files.pythonhosted.org/packages/d1/76/f90416b8359be502ef9cea1b19ec014da16142b2fd58e0ae3cee6c9d6aaa/androidemu-0.0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}