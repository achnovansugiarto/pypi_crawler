{
  "info": {
    "author": "Jin Li",
    "author_email": "lijin.abc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3"
    ],
    "description": "# cellqc: standardized quality control pipeline of single-cell RNA-Seq data\n\nCellqc standardizes the qualiy control of single-cell RNA-Seq (scRNA) data to render clean feature count matrices from Cell Ranger outputs. Cellqc is implemented using the Snakemake workflow management system to enhance reproduciblity and scalablity of data analysis. Briefly, the QC pipeline starts from raw count feature matrices from Cell Ranger. Dropkick filters out predicted empty droplets, and SoupX purify the transcriptome measurement by substracting the background trancripts. DoubletFinder further detects the potential doublets and retain clean count feature matrices for singlets. Cell types are annotated for clean cells by a reference database using scPred.\n\n![workflow](docs/workflow.png)\n\n## Installation\n\nIt is easy to install cellqc via [conda](https://docs.conda.io/en/latest/miniconda.html) at https://anaconda.org/bioconda/cellqc. To use the full function of cellqc, please also install several dependencies outside conda. It is encouraged to use the C++ implementation [mamba](https://github.com/mamba-org/mamba) to speed up the installation. E.g.,\n\n```\nconda config --add channels defaults --add channels bioconda --add channels conda-forge\nmamba create -n cellqc cellqc\nmamba activate cellqc\nRscript -e \"remotes::install_github(c('chris-mcginnis-ucsf/DoubletFinder', 'mojaveazure/seurat-disk', 'immunogenomics/harmony', 'powellgenomicslab/scPred'))\"\nmamba install numpy=1.21 scanpy=1.9.1 matplotlib=3.6 anndata=0.7.8 # by dropkick\npip install dropkick\npip install -U cellqc # to install the latest version\n```\n\nDependent software are summarized below.\n\n| Software | URL |\n|-------|-------|\n| DoubletFinder | https://github.com/chris-mcginnis-ucsf/DoubletFinder |\n| DropletUtils | https://bioconductor.org/packages/release/bioc/html/DropletUtils.html |\n| Seurat | https://satijalab.org/seurat |\n| SeuratDisk | https://github.com/mojaveazure/seurat-disk |\n| SoupX | https://github.com/constantAmateur/SoupX |\n| scPred | https://github.com/powellgenomicslab/scPred |\n| Snakemake | https://github.com/snakemake/snakemake |\n| Scanpy | https://scanpy.readthedocs.io/en/stable |\n| dropkick | https://github.com/KenLauLab/dropkick |\n\nTo test the installation, simply run\n\n```\ncellqc -h\n```\n\n## Run the pipeline\n\n`Cellqc` requires a sample file for sample information and an optional configuration file for pipeline parameters.\n\n- The sample file (e.g., `samples.txt`) is a tab-delimited file with headers: `sample`, `cellranger`, and/or `nreaction`.\n    - The `sample` column is the sample ID per sample.\n    - The `cellranger` is the Cell Ranger output directory. See [Cell Ranger Outputs](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/output/gex-outputs) for an example directory.\n    - The optional third column `nreaction` is the number of reactions in the library preparation, which is useful to infer expected doublets for a sample with a Cell Ranger analysis using combined raw reads from multiple reactions. If the `nreaction` column is not specified in the sample file, the default 1 reaction is used for all samples.\n\n- A configuration file is in the YAML format. It is optional. The default parameters can be used as below. See the next section for the inspection of configuration.\n\n```\ndropkick:\n  skip: false\n  method: multiotsu\n  numthreads: 1\nfilterbycount:\n  mincount: 500\n  minfeature: 300\n  mito: 10\ndoubletfinder:\n  findpK: false\n  numthreads: 5\n  pK: 0.01\nscpred:\n  skip: true\n  reference: /path_to_reference/scPred_trainmodel_RNA_svmRadialWeights_scpred.rds\n  threshold: 0.9\n```\n\n### Inspection of configuration\n\nThe configuration file is in a YAML format. An example configuration can be found at the example directory. \n\n1. dropkick\n\nThis section defines parameters for empty droplet removal by dropkick.\n\n| Parameter | Description |\n|-------|-------|\n| dropkick.skip | Skip [Dropkick](https://github.com/KenLauLab/dropkick) and use the estimated cells from Cell Ranger alone (using [EmptyDrops](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/algorithms/overview#cell_calling)) if set `true`. If set `false`, to estimate further empty droplets by Dropkick. Be cautious that Dropdick might predict a significant number of false negatives for a poor library. |\n| dropkick.method | The thresholding method for labeling the training data for true cells, such as multiotsu, otsu, li, or mean. |\n| dropkick.numthreads | Number of threads. Dropkick will use significant memory. One thread is suggested for this step. |\n\n2. filterbycount\n\nTo filter cells by nCount, nFeature, and percentage of mitochondria reads.\n\n| Parameter | Description |\n|-------|-------|\n| filterbycount.mincount | Minimum counts for a cell. |\n| filterbycount.minfeature | Minimum features for a cell. |\n| filterbycount.mito | Maximum percentage of mitocondria transcripts. |\n\n3. doubletfinder\n\nThis section includes three parameters for doublet removal by DoubletFinder.\n\n| Parameter | Description |\n|-------|-------|\n| doubletfinder.findpK | To estimate the neighbor size (pK) by mean-variance bimodality coefficients if `true`. If set `false`, skip the estimation and use the preset pK value. |\n| doubletfinder.numthreads | Number of threads. |\n| doubletfinder.pK | A preset neighbor size (pK). Will be used if `doubletfinder.findpK=false`.|\n\n4. scpred\n\nA pre-trained classifier for cell-type annotation by scPred.\n\n| Parameter | Description |\n|-------|-------|\n| scpred.skip | Skip the automated cell type prediction by scPred if `true`. This is useful for a sample without a pre-trained reference. |\n| scpred.reference | The pre-trained reference classifier saved in a RDS file. See https://github.com/powellgenomicslab/scPred |\n| scpred.threshold | Threshold for a positive prediction. |\n\n### Result files\n\nThree result files are generated under a `result` subdirectory. `result/*.h5seurat` and `result/*.h5ad` files are count matrices after processing with QC metrics such as \"pANN\" for proportion of artificial nearest neighbors, and/or \"scpred_prediction\" for predicted cell type. A report file `result/report.html` is a summary of QC metrics.\n\n### An example\n\nThis example demonstrates the pipeline on two AMD samples. The test data consists of Cell Ranger output directories of two AMD samples, as well as a pretrained calssifier for cell-type annotation.\n\nhttps://bcm.box.com/s/nnlmgxh8avagje93cih20g1dsxx14if4\n\nAfter feeding the file locations, a sample file (e.g., `samples.txt`) looks like below.\n\n```samples.txt\nsample\tcellranger\nAMD1\t/path/to/cellranger/AMD1/outs\nAMD2\t/path/to/cellranger/AMD2/outs\n```\n\nBelow command is to run the pipeline by the installed entrypoint `cellqc`.\n\n```\ncellqc -d \"$outdir\" -t 8 -- samples.txt # with default parameters\ncellqc -d \"$outdir\" -t 8 -c config.yaml -- samples.txt # by customized parameters in config.yaml\n```\n\nA directed acyclic graph (DAG) of jobs will be generated. For example,\n\n![DAG](docs/tests/dag.png)\n\nA report of result files will be also produced, such as [report.html](https://github.com/lijinbio/cellqc/blob/master/docs/tests/report.html).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/lijinbio/cellqc",
    "keywords": "",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cellqc",
    "package_url": "https://pypi.org/project/cellqc/",
    "platform": null,
    "project_url": "https://pypi.org/project/cellqc/",
    "project_urls": {
      "Homepage": "https://github.com/lijinbio/cellqc"
    },
    "release_url": "https://pypi.org/project/cellqc/0.0.6/",
    "requires_dist": [
      "click",
      "snakemake",
      "pygraphviz",
      "Jinja2"
    ],
    "requires_python": ">=3.6",
    "summary": "Cellqc standardizes the qualiy control of single-cell RNA-Seq (scRNA) data to render clean feature count matrices.",
    "version": "0.0.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17213995,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "38356a705824f31a54eacdd91dbb81ced475ba9b4bd79d8808fbaf7fb813203e",
          "md5": "6d53534c0c0f83ca5ccbee45f88ae4fd",
          "sha256": "8e81924c48a94473f0f36455af615f0921ac5a85393b26c5afeaa441f81cbe5a"
        },
        "downloads": -1,
        "filename": "cellqc-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d53534c0c0f83ca5ccbee45f88ae4fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 18457,
        "upload_time": "2022-09-24T23:16:33",
        "upload_time_iso_8601": "2022-09-24T23:16:33.070706Z",
        "url": "https://files.pythonhosted.org/packages/38/35/6a705824f31a54eacdd91dbb81ced475ba9b4bd79d8808fbaf7fb813203e/cellqc-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "562ef0495828c4e46646d1d68254886c7fab32886f41e4a123dcaed000e4dc80",
          "md5": "a5d8b48946603aada10321d5bcc81628",
          "sha256": "d5e00e4561d8eb2e6e6a10b4342fea881a26afff7a017f22a1f40c6224ea22b0"
        },
        "downloads": -1,
        "filename": "cellqc-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a5d8b48946603aada10321d5bcc81628",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 15798,
        "upload_time": "2022-09-24T23:16:34",
        "upload_time_iso_8601": "2022-09-24T23:16:34.758521Z",
        "url": "https://files.pythonhosted.org/packages/56/2e/f0495828c4e46646d1d68254886c7fab32886f41e4a123dcaed000e4dc80/cellqc-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b81833d7f78bb241e6623ccc547c882e00ae006402ab10de6a821e8461129674",
          "md5": "418fe5c215bef4845360282d9b2e4fca",
          "sha256": "e13748356f103ff911be9c2e5ada6b26b6c81f5e6c10e58082b0a587d4ddd286"
        },
        "downloads": -1,
        "filename": "cellqc-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "418fe5c215bef4845360282d9b2e4fca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23626,
        "upload_time": "2022-12-15T19:23:52",
        "upload_time_iso_8601": "2022-12-15T19:23:52.981296Z",
        "url": "https://files.pythonhosted.org/packages/b8/18/33d7f78bb241e6623ccc547c882e00ae006402ab10de6a821e8461129674/cellqc-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9b59194d1cb07bd47ad1b2de4f3913bdcbdecd778294198899aec4829e8d67b0",
          "md5": "2fc00def22fd880ef85821f9ec2b5f32",
          "sha256": "3b3f45a20677e82ade6c70c31bb64e8f960bf0486124922d450310def67b5aab"
        },
        "downloads": -1,
        "filename": "cellqc-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2fc00def22fd880ef85821f9ec2b5f32",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20027,
        "upload_time": "2022-12-15T19:23:54",
        "upload_time_iso_8601": "2022-12-15T19:23:54.678348Z",
        "url": "https://files.pythonhosted.org/packages/9b/59/194d1cb07bd47ad1b2de4f3913bdcbdecd778294198899aec4829e8d67b0/cellqc-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c56d463dfb3cea88504f107a67a05b6b3b69e89fab3de9da0b8f9060f806be6",
          "md5": "880dece4c398eefa791d852e32e435bc",
          "sha256": "4fb69f22d061f5373180efffe7368167b0b46eebad574a984b9a99ad143fa0b5"
        },
        "downloads": -1,
        "filename": "cellqc-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "880dece4c398eefa791d852e32e435bc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 23334,
        "upload_time": "2022-12-16T17:11:21",
        "upload_time_iso_8601": "2022-12-16T17:11:21.580953Z",
        "url": "https://files.pythonhosted.org/packages/8c/56/d463dfb3cea88504f107a67a05b6b3b69e89fab3de9da0b8f9060f806be6/cellqc-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9cb1e454288d231d1c80be065225920e727ce6e07583f14cf8fa1403f5311169",
          "md5": "7e2aecf2b587030d44a4995d16e9bfc1",
          "sha256": "35fda6a1901e07d86303303f9364db81c664a8e069932ac551db54668e47cc72"
        },
        "downloads": -1,
        "filename": "cellqc-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7e2aecf2b587030d44a4995d16e9bfc1",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19423,
        "upload_time": "2022-12-16T17:11:23",
        "upload_time_iso_8601": "2022-12-16T17:11:23.141558Z",
        "url": "https://files.pythonhosted.org/packages/9c/b1/e454288d231d1c80be065225920e727ce6e07583f14cf8fa1403f5311169/cellqc-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1714d1c4cb22013a0db8f9c93623b8a3668007907cdc13a46f4a643777632c71",
          "md5": "ab6cc3e7a188412c0d7d023a36fc3da3",
          "sha256": "965bdbc685a244907167f428a32d3c135a5cf6e98dff4104f6f40f1b3deb4eb3"
        },
        "downloads": -1,
        "filename": "cellqc-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab6cc3e7a188412c0d7d023a36fc3da3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 24348,
        "upload_time": "2023-02-16T07:16:42",
        "upload_time_iso_8601": "2023-02-16T07:16:42.150198Z",
        "url": "https://files.pythonhosted.org/packages/17/14/d1c4cb22013a0db8f9c93623b8a3668007907cdc13a46f4a643777632c71/cellqc-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa82d428dbc49d6e9da1c32c429504ed705859a1ff3304a71e3886e689765504",
          "md5": "ff1f0dcc395a45104b17c8604f5b6108",
          "sha256": "37f5100405974e7d2f0316173ef1bb9020b0337cc361fa787adecd14bedb522e"
        },
        "downloads": -1,
        "filename": "cellqc-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ff1f0dcc395a45104b17c8604f5b6108",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 20242,
        "upload_time": "2023-02-16T07:16:44",
        "upload_time_iso_8601": "2023-02-16T07:16:44.151494Z",
        "url": "https://files.pythonhosted.org/packages/aa/82/d428dbc49d6e9da1c32c429504ed705859a1ff3304a71e3886e689765504/cellqc-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bb8aa3e2fe29b720697dfc4ef7fe2001e69470e4096b373a3af37c26a6aaa0af",
          "md5": "b78d3112df06172dc630fb8757cd4f4c",
          "sha256": "33da60b9ecdb1ad16dd6400bbddd2518c7c6793b17269156ffbfe993d4dfe915"
        },
        "downloads": -1,
        "filename": "cellqc-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b78d3112df06172dc630fb8757cd4f4c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 21728,
        "upload_time": "2023-03-08T21:56:33",
        "upload_time_iso_8601": "2023-03-08T21:56:33.215111Z",
        "url": "https://files.pythonhosted.org/packages/bb/8a/a3e2fe29b720697dfc4ef7fe2001e69470e4096b373a3af37c26a6aaa0af/cellqc-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "57e7424ec166eb595c161fc8a76f291326cdd86524015827532cce8fbb676a3c",
          "md5": "6ab3db06e803ef05a956134a72ccf688",
          "sha256": "3da8ed9e2c275626ab2eb2c779cdb8eacf1429fce212357c0dd29c9753e08764"
        },
        "downloads": -1,
        "filename": "cellqc-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "6ab3db06e803ef05a956134a72ccf688",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 19282,
        "upload_time": "2023-03-08T21:56:35",
        "upload_time_iso_8601": "2023-03-08T21:56:35.181787Z",
        "url": "https://files.pythonhosted.org/packages/57/e7/424ec166eb595c161fc8a76f291326cdd86524015827532cce8fbb676a3c/cellqc-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "bb8aa3e2fe29b720697dfc4ef7fe2001e69470e4096b373a3af37c26a6aaa0af",
        "md5": "b78d3112df06172dc630fb8757cd4f4c",
        "sha256": "33da60b9ecdb1ad16dd6400bbddd2518c7c6793b17269156ffbfe993d4dfe915"
      },
      "downloads": -1,
      "filename": "cellqc-0.0.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b78d3112df06172dc630fb8757cd4f4c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 21728,
      "upload_time": "2023-03-08T21:56:33",
      "upload_time_iso_8601": "2023-03-08T21:56:33.215111Z",
      "url": "https://files.pythonhosted.org/packages/bb/8a/a3e2fe29b720697dfc4ef7fe2001e69470e4096b373a3af37c26a6aaa0af/cellqc-0.0.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "57e7424ec166eb595c161fc8a76f291326cdd86524015827532cce8fbb676a3c",
        "md5": "6ab3db06e803ef05a956134a72ccf688",
        "sha256": "3da8ed9e2c275626ab2eb2c779cdb8eacf1429fce212357c0dd29c9753e08764"
      },
      "downloads": -1,
      "filename": "cellqc-0.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "6ab3db06e803ef05a956134a72ccf688",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 19282,
      "upload_time": "2023-03-08T21:56:35",
      "upload_time_iso_8601": "2023-03-08T21:56:35.181787Z",
      "url": "https://files.pythonhosted.org/packages/57/e7/424ec166eb595c161fc8a76f291326cdd86524015827532cce8fbb676a3c/cellqc-0.0.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}