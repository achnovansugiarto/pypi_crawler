{
  "info": {
    "author": "John Pendenque",
    "author_email": "pendenquejohn@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.9",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Introduction\n\nZineb is a lightweight tool solution for simple and efficient web scrapping and crawling built around BeautifulSoup and Pandas. It's main purpose is to help __quickly structure your data in order to be used as fast as possible in data science or machine learning projects.__\n\n# Understanding how Zineb works\n\nZineb gets your custom spider, creates a set of ``HTTPRequest`` objects for each url, sends the requests and caches a BeautifulSoup object of the page within an ``HTMLResponse`` class of that request.\n\nMost of your interactions with the HTML page will be done through the ``HTMLResponse`` class.\n\nWhen the spider starts crawling the page, each response and request in past through the start function:\n\n```\ndef start(self, response, **kwargs):\n     request = kwargs.get('request')\n     images = response.images\n```\n\n# Getting started\n\n## Creating a project\n\nTo create a project do `python -m zineb startproject <project name>` which will create a directory which will have the following structure.\n\n.myproject\n|\n|--media\n|\n|-- models\n      |-- base.py\n|\n|-- __init__.py\n|\n|-- manage.py\n|\n|-- settings.py\n|\n|-- spiders.py\n\nOnce the project folder is created, all your interractions with Zineb will be made trough the management commands that are executed through `python manage.py` from your project's directory.\n\nThe models directory allows you to place the elements that will help structure the data that you have scrapped from from the internet.\n\nThe `manage.py` file will allow you to run all the required commands from your project.\n\nFinally, the spiders module will contain all the spiders for your project.\n\n## Configuring your project\n\nOn startup, Zineb implements a set of basic settings (`zineb.settings.base`) that will get overrided by the values that you would have defined in your `settings.py` located in your project.\n\nYou can read more about this in the [settings section of this file](#Settings).\n\n## Creating a spider\n\nCreating a spider is extremely easy and requires a set of starting urls that can be used to scrap one or many HTML pages.\n\n```\nclass Celebrities(Zineb):\n    start_urls = ['http://example.com']\n\n    def start(self, response, request=None, soup=None, **kwargs):\n        # Do something here\n```\n\nOnce the Celibrities class is called, each request is passed through the `start` method. In other words the `zineb.http.responses.HTMLResponse`,  `zineb.http.request.HTTPRequest` and the `BeautifulSoup` HTML page object are sent through the function.\n\nYou are not required to use all these parameters at once. They're just for convinience.\n\nIn which case, you can also write the start method as so if you only need one of these.\n\n```\ndef start(self, response, **kwargs):\n  # Do something here\n```\n\nOther objects can be passes through the function such as the models that you have created but also the settings of the application etc.\n\n### Adding meta options\n\nMeta options allows you to customize certain very specific behaviours [not found in the `settings.py` file] related to the spider.\n\n```\n class Celerities(Zineb):\n    start_urls = ['http://example.com']\n  \n     class Meta:\n         domains = []\n```\n\n#### Domains\n\nThis option limits a spider to a very specific set of domains.\n\n#### Verbose name\n\nThis option writter as `verbose_name` will specific a different name to your spider.\n\n## Running commands\n\n#### Start\n\nTriggers the execution of all the spiders present in the given the project. This command will be the main one that you will be using to execute your project.\n\n#### Shell\n\nStart a iPython shell on which you can test various elements on the HTML page.\n\nWhen the shell is started, the `zineb.http.HTTPRequest`, the `zineb.response.HTMLResponse`, and the BeautifulSoup instance of the page are all injected in the shell.\n\nExtractors are passed using aliases:\n\n* `links`: LinkExtractor\n* `images`: ImageExtractor\n* `multilinks`: MultiLinkExtractor\n* `tables`: TableExtractor\n\n\nThe extractors are also all passed within the shell in addition to the project settings.\n\nIn that regards, the shell becomes a interesting place where you can test various querying on an HTML page before using it in your project. For example, using the shell with http://example.com.\n\nWe can get a simple url :\n\n```\nIPython 7.19.0\n\nIn [1]: response.find(\"a\")\nOut[1]: <a href=\"https://www.iana.org/domains/example\">More information...</a>\n```\n\nWe can find all urls on the page:\n\n```\nIPython 7.19.0\n\nIn [2]: extractor = links()\nIn [3]: extractor.resolve(response)\nIn [4]: str(extrator)\nOut [4]: [Link(url=https://www.iana.org/domains/example, valid=True)]\n\nIn [5]: response.links\nOut [5]: [Link(url=https://www.iana.org/domains/example, valid=True)]\n```\n\nOr simply get the page title:\n\n```\nIPython 7.19.0\n\nIn [6]: response.page_title\nOut [6]: 'Example Domain'\n```\n\nRemember that in addition to the custom functions created for the class, all the rest called on `zineb.response.HTMLResponse` are BeautifulSoup functions (find, find_all, find_next...)\n\n## Queries on the page\n\nLike said previously, the majority of your interactions with the HTML page will be done through the `HTMLResponse` object or `zineb.http.responses.HTMLResponse` class.\n\nThis class will implement some very basic general functionnalities that you can use through the course of your project. To illustrate this, let's create a basic Zineb HTTP response from a request:\n\n```\nfrom zineb.http.requests import HTTPRequest\n\nrequest = HTTPRequest(\"http://example.com\")\n```\n\nRequests, when created a not sent [or resolved] automatically if the `_send` function is not called. In that case, they are marked as being unresolved ex. `HTTPRequest(\"http://example.co\", resolved=False)`.\n\nOnce the `_send` method is called, by using the `html_page` attribute or calling any BeautifulSoup function on the class, you can do all the classic querying on the page e.g. find, find_all...\n\n```\nrequest._send()\n\nrequest.html_response\n\n    -> Zineb HTMLResponse object\n\nrequest.html_response.html_page\n\n    -> BeautifulSoup object\n\nrequest.find(\"a\")\n\n    -> BeautifulSoup Tag\n```\n\nIf you do not know about BeautifulSoup please read [the documentation here](https://www.crummy.com/software/BeautifulSoup/bs4/doc/).\n\nFor instance, suppose you have a spider and want to get the first link present on the http://example.com page. That's what you would so:\n\n```\nfrom zineb.app import Zineb\n\nclass MySpider(Zineb):\n    start_urls = [\"http://example.com\"]\n\n    def start(self, response=None, request=None, soup=None, **kwargs):\n        link = response.find(\"a\")\n\n        # Or, you can also use this tehnic through\n        # the request object\n        link = request.html_response.find(\"a\")\n\n        # Or you can directly use the soup\n        # object as so\n        link = soup.find(\"a\")\n```\n\nIn order to understand what the `Link`, `Image` and `Table` objects represents, please read the [following section]() of this page.\n\nZineb HTTPRequest objects are better explained in the following section.\n\n### Getting all the links\n\n```\nrequest.html_response.links\n\n    -> [Link(url=http://example.com valid=True)]\n```\n\n### Getting all the images\n\n```\nrequest.html_response.images\n\n    -> [Image(url=https://example.com/1.jpg\")]\n```\n\n### Getting all the tables\n\n```\nrequest.html_response.tables\n\n    -> [Table(url=https://example.com/1\")]\n```\n\n### Getting all the text\n\nFinally you can retrieve all the text of the web page at once.\n\n```\nrequest.html_response.text\n\n    -> '\\n\\n\\nExample Domain\\n\\n\\n\\n\\n\\n\\n\\nExample Domain\\nThis domain is for use in   illustrative examples in documents. You may use this\\n    domain in literature without prior coordination or asking for permission.\\nMore information...\\n\\n\\n\\n'\n```\n\n# Models\n\nModels are a simple way to structure your scrapped data before saving them to a file. The Model class is built around Panda's excellent DataFrame class in order to simplify as a much as possible the fact of dealing with your data.\n\n## Creating a custom Model\n\nIn order to create a model, subclass the Model object from `zineb.models.Model` and then add fields to it. For example:\n\n```\nfrom zineb.models.datastructure import Model\nfrom zineb.models.fields import CharField\n\nclass Player(Model):\n    name = CharField()\n```\n\n### Using the custom model\n\nOn its own, a model does nothing. In order to make it work, you have to add values to it and then resolve the fields.\n\nYou can add values to your model in two main ways.\n\n#### Adding a free custom value\n\nThe first method consists of adding values through the `add_value` method. This method does not rely on the BeautifulSoup HTML page object which means that values can be added freely.\n\n```\nplayer.add_value('name', 'Kendall Jenner')\n```\n\n#### Adding an expression based value\n\nAddind expression based values requires a BeautifulSoup HTML page object. You can add one value at a time or multiple values.\n\n````\nplayer.add_expression(\"name\", \"a#kendall__text\", many=True)\n````\n\nBy using the `many` parameter, you can add the all the tags with a specific name and/or attributes to your model at once.\n\nHere is a list of expressions that you can use for this field:\n\n\n| expression | interpretation | tag |\n| - | - | - |\n| a.kendall | Link with class kendall | <a class=\"kendall\"> |\n| a#kendall | Lind with ID Kendall | <a id=\"kendall\"> |\n\nBy default, if a pseudo is not provided, `__text` pseudo is appended in order to always retrieve the inner text element of the tag.\n\n## Meta options\n\nBy adding a Meta to your model, you can pass custom behaviours.\n\n* Ordering\n* Indexing\n\n### Indexes\n\n### Ordering\n\n## Fields\n\nFields are a very simple way to passing HTML data to your model in a very structured way. Zineb comes with number of preset fields that you can use out of the box:\n\n- CharField\n- TextField\n- NameField\n- EmailField\n- UrlField\n- ImageField\n- IntegerField\n- DecimalField\n- DateField\n- AgeField\n- FunctionField\n- ArrayField\n- CommaSeparatedField\n\n### How fields work\n\nOnce the field is called via the `resolve` function on each field which in turns calls the `super().resolve` function of the `Field` super class, the value is stored.\n\nBy default, the resolve function will do the following things.\n\nFirst, it will run all cleaning functions on the value for example by stripping tags like \"<\" or \">\" by using the `w3lib.html.remove_tags` library.\n\nSecond, a `deep_clean` method will be called on the value which takes out any spaces using `w3lib.html.strip_html5_whitespace`, remove escape characters with the `w3lib.html.replace_escape_chars` function and finally reconstruct the value to ensure that any none-detected white space be eliminated.\n\nFinally, all validators (default and custom created) are called on the value. The final value is then returned within the model class.\n\n### CharField\n\nThe CharField represents the normal character element on an HTML page. You constrain the length.\n\n### TextField\n\nThe text field is longer allows you to add paragraphs of text.\n\n### NameField\n\nThe name field allows to implement names in your model. The `title` method is called on the string in order to represent the value correctly e.g. Kendall Jenner.\n\n### EmailField\n\nThe email field represents emails. The default validator, `validators.validate_email`, is automatically called on the resolve function fo the class in order to ensure that that the value is indeed an email.\n\n### UrlField\n\nThe url field is specific for urls. Just like the email field, the default validator, `validators.validate_url` is called in order to validate the url.\n\n### ImageField\n\nThe image field holds the url of an image exactly like the UrlField with the sole difference that you can download the image directly when the field is evaluated.\n\n```\nclass MyModel(Model):\n    avatar = ImageField(download=True, download_to=\"/this/path\")\n```\n\n### IntegerField\n\n### DecimalField\n\n### DateField\n\nThe date field allows you to pass dates to your model. In order to use this field, you have to pass a date format so that the field can know how to resolve the value.\n\n```\nclass MyModel(Model):\n    date = DateField(\"%d-%m-%Y\")\n```\n\n### AgeField\n\nThe age field works likes the DateField but instead of returning the date, it will return the difference between the date and the current date which is an age.\n\n### FunctionField\n\nThe function field is a special field that you can use when you have a set of functions to run on the value before returning the final result. For example, let's say you have this value `Kendall J. Jenner` and you want to run a specific function that takes out the middle letter on every incoming values:\n\n```\ndef strip_middle_letter(value):\n    return\n\nclass MyModel(Model):\n    name = FunctionField(strip_middle_letter, output_field=CharField(), )\n```\n\nEvery time the resolve function will be called on this field, the methods provided will be passed on the value.\n\nAn output field is not compulsory but if not provided, each value will be returned as a character.\n\n### ArrayField\n\nAn array field will store an array of values that are all evalutated to an output field that you would have specified.\n\n### CommaSeperatedField\n\n### Creating your own field\n\nYou an also create a custom field by suclassing `zineb.models.fields.Field`. When doing so, your custom field has to provide a `resolve` function in order to determine how the value should be treated. For example:\n\n```\nclass MyCustomField(Field):\n    def resolve(self, value):\n        initial_result = super().resolve(value)\n```\n\nIf you want to use the custom cleaning functionalities on your resolve function before running yours, make sure to call super.\n\n## Validators\n\nValidators make sure that the value that was passed respects the constraints that were implemented as a keyword arguments on the field class. There are five basic validations:\n\n- Maximum length\n- Uniqueness\n- Nullity\n- Defaultness\n- Validity (validators)\n\n### Maximum or Minimum length\n\nThe maximum length check ensures that the value does not exceed a certain length using `zineb.models.validators.max_length_validator` or `zineb.models.validators.min_length_validator` which are encapsulated and used within the `zineb.models.validators.MinLengthValidator` or `zineb.models.validators.MaxLengthValidator` class.\n\n### Nullity\n\nThe nullity validation ensures that the value is not null and that if a default is provided, that null value be replaced by the latter. It uses `zineb.models.validators.validate_is_not_null`.\n\nThe defaultness provides a default value for null or none existing ones.\n\n### Practical examples\n\nFor instance, suppose you want only values that do not exceed a certain length:\n\n```\nname = CharField(max_length=50)\n```\n\nOr suppose you want a default value for fields that are empty or blank:\n\n```\nname = CharField(default='Kylie Jenner')\n```\n\nRemember that validators will validate the value itself for example by making sure that an URL is indeed an url or that an email follows the expected pattern that you would expect from an email.\n\nSuppose you want only values that would be `Kendall Jenner`. Then you could create a custom validator that would do the following:\n\n```\ndef check_name(value):\n    if value == \"Kylie Jenner\":\n        return None\n    return value\n\nname = CharField(validators=[check_name])\n```\n\nYou can also create validators that match a specific regex pattern using the `zineb.models.validators.regex_compiler` decorator:\n\n```\nfrom zineb.models.datastructure import Model\nfrom zineb.models.fields import CharField\nfrom zineb.models.validators import regex_compiler\n\n@regex_compiler(r'\\d+')\ndef custom_validator(value):\n    if value > 10:\n        return value\n    return 0\n\nclass Player(Model):\n    age = IntegerField(validators=[custom_validator])\n```\n\nIt is important to understand that the result of the regex compiler is reinjected into your custom validator on which you can then do various other checks.\n\n#### Field resolution\n\nIn order to get the complete structured data, you need to call `resolve_values` which will return a `pandas.DataFrame` object:\n\n```\nplayer.add_value(\"name\", \"Kendall Jenner\")\nplayer.resolve_values()\n\n    -> pandas.DataFrame\n```\n\nPractically though, you'll be using the `save` method which also calls the `resolve_values` under the hood:\n\n```\nplayer.save(commit=True, filename=None, **kwargs)\n\n    -> pandas.DataFrame or new file\n```\n\nBy calling the save method, you'll be able to store the data directly to a JSON or CSV file.\n\n# Extractors\n\nExtractors are utilities that facilitates extracting certain specific pieces of data from a web page such as links, images [...] quickly. They can be found in `zineb.extactors`.\n\nSome extractors can be used in various manners. First, with a context processor:\n\n```\nextractor = LinkExtractor()\nwith extractor:\n    # Do something here\n```\n\nSecond, in an interation process:\n\n```\nfor link in extractor:\n    # Do something here\n```\n\nFinally, with `next`:\n\n```\nnext(extractor)\n```\n\nYou can also check if an extractor has a specific value and even concatenate some of them together:\n\n```\n# Contains\nif x in extractor:\n    # Do something here\n\n# Addition\nconcatenated_extractors = extractor1 + extractor2\n```\n\n## LinkExtractor\n\n* `url_must_contain` - only keep urls that contain a specific string\n* `unique` - return a unique set of urls (no duplicates)\n* `base_url` - reconcile a domain to a path\n* `only_valid_links` - only keep links (Link) that are marked as valid\n\n```\nextractor = LinkExtractor()\nextractor.finalize(response.html_response)\n\n    -> [Link(url=http://example.com, valid=True)]\n```\n\nThere might be times where the extracted links are relative paths. This can cause an issue for running additional requests. In which case, use the `base_url` parameter:\n\n```\nextractor = LinkExtractor(base_url=http://example.com)\nextractor.finalize(response.html_response)\n\n# Instead of getting this result which would also\n# be marked as a none valid link\n\n    -> [Link(url=/relative/path, valid=False)]\n\n# You will get the following with the full url link\n\n    -> [Link(url=http://example.com/relative/path, valid=True)]\n```\n\nNOTE: By definition, a relative path is not a valid link hence the valid set to False.\n\n## MultiLinkExtractor\n\nA `MultiLinkExtractor` works exactly like the `LinkExtractor` with the only difference being that it also identifies and collects emails that are contained within the HTML page.\n\n## TableExtractor\n\nExtract all the rows from the first table that is matched on the HTML page.\n\n* `class_name` - intercept a table with a specific class name\n* `has_headers` - specify if the table has headers in order to ignore it in the final data\n* `filter_empty_rows` - ignore any rows that do not have a values\n* `processors` - a set of functions to run on the data once it is all extracted\n\n## ImageExtractor\n\nExtract all the images on the HTML page.\n\nYou can filter down the images that you get by using a specific set of parameters:\n\n* `unique` - return only a unique et set of urls\n* `as_type` - only return images having a specific extension\n* `url_must_contain` - only return images which contains a specific string\n* `match_height` - only return images that match as specific height\n* `match_width` - only return images that match a specific width\n\n## TextExtractor\n\nExtract all the text on an HTML page.\n\nFirst, the text is retrieved as a raw value then tokenized and vectorized using `nltk.tokenize.PunktSentenceTokenizer` and `nltk.tokenize.WordPunctTokenizer`.\n\nTo know more about NLKT, [please read the following documentation](https://www.nltk.org/).\n\n# Zineb special wrappers\n\n# HTTPRequest\n\nZineb uses a special built-in HTTPRequest class which wraps the following for better cohesion:\n\n* The `requests.Request` response class\n* The `bs4.BeautifulSoup` object\n\nIn general, you will not need to interact with this class that much because it's just an interface for implement additional functionnalities especially to the Request class.\n\n* `follow`: create a new instance of the class whose resposne will be the one of a new url\n* `follow_all`: create new instances of the class who responses will tbe the ones of the new urls\n* `urljoin`: join a path the domain\n\n# HTMLResponse\n\nIt wraps the BeautifulSoup object in order to implement some small additional functionalities:\n\n* `page_title`: return the page's title\n* `links`: return all the links of the page\n* `images`: return all the images of the page\n* `tables`: return all the tables of the page\n\n# Signals\n\nSignals are a very simple yet efficient way for you to run functions during the lifecycle of your project when certain events occur at very specific moments.\n\nInternally signals are sent on the following events:\n\n- When the registry is populated\n- Before the spider starts\n- After the spider has started\n- Before an HTTP request is sent\n- Before and HTTP request is sent\n- Before the model downloads anything\n- After the model has downloaded something\n\n### Creating a custom signal\n\nTo create custom signal, you need to mark a method as being a receiver for any incoming signals. For example, if you want to create a signal to intercept one of the events above, you should do:\n\n```\nfrom zineb.signals import receiver\n\n@receiver(tag=\"Signal Name\")\ndef my_custom_signal(sender, **kwargs):\n    pass\n```\n\nThe signals function has to be able to accept a `sender` object and additional parameters such as the current url or the current HTML page.\n\nYou custom signals do not have to return anything.\n\n# Pipelines\n\nPipelines are a great way to send chained requests to the internet or treat a set of responses by processing them afterwards through a set of functions of your choice.\n\nSome Pipeplines are also perfect for donwloading images.\n\n## ResponsesPipeline\n\nThe response pipepline allows you to chain a group of responses and treat all of them at once through a function:\n\n```\nfrom zineb.http.pipelines import ResponsesPipeline\n\npipeline = ResponsesPipeline([response1, response2], [function1, function2])\npipeline.results\n    -> list\n```\n\nIt comes with three main parameters:\n\n* `responses` - which corresponds to a list of HTMLResponses\n* `functions` - a list of functions to pass each individual response and additional parameters\n* `paramaters` - a set of additional parameters to pass to the functions\n\nThe best way to use the ResponsesPipeline is within the functions of your custom spider:\n\n```\nclass MySpider(Zineb):\n   start_urls = [\"https://example.com\"]\n\n   def start(self, response, soup=None, **kwargs):\n       extractor = LinksExtractor()\n       extractor.resolve(soup)\n       responses = request.follow_all(*list(extractor))\n       ResponsesPipeline(responses, [self.do_something_here])\n\n   def do_something_here(self, response, soup=None, **kwargs):\n       # Continue parsing data here\n```\n\n**N.B.** Each function is executed sequentially. So, the final result will come from the final function of the list\n\n## HTTPPipeline\n\nThis pipeline takes a set of urls, creates HTTPResquests for each of them and then sends them to the internet.\n\nIf you provided a set of functions, it will pass each request through them.\n\n````\nfrom zineb.http.pipelines import HTTPPipeline\nfrom zineb.utils.general import download_image\n\nHTTPPipeline([https://example.com], [download_image])\n````\n\nEach function should be able to accept an HTTP Response object.\n\nYou can also pass additional parameters to your functions by doing the following:\n\n```\nHTTPPipeline([https://example.com], [download_image], parameters={'extra': False})\n```\n\nIn this specific case, your function should accept an `extra` parameter which result would be False.\n\n## Callback\n\nThe Callback class allows you to run a callback function once each url is processed and passed through the main start function of your spider.\n\nThe `__call__` method is triggerd on the instance in order to resolve the function to use.\n\n```\nclass Spider(Zineb):\n    start_urls = [\"https://example.com\"]\n\n    def start(self, response, **kwargs):\n        request = kwargs.get(\"request\")\n        model = MyModel()\n        return Callback(request.follow, self.another_function, model=model)\n\n    def another_function(self, response, **kwargs):\n        model = kwargs.get(\"model\")\n        model.add_value(\"name\", \"Kendall Jenner\")\n        model.save()\n```\n\n# Utilities\n\n## Link reconciliation\n\nMost of times, when you retrieve links from a page, they are returned as relative paths. The ``urljoin`` method reconciles the url of the visited page with that path.\n\n```\n<a href=\"/kendall-jenner\">Kendall Jenner</a>\n\n# Now we want to reconcile the relative path from this link to\n# the main url that we are visiting e.g. https://example.com\n\nrequest.urljoin(\"/kendall-jenner\")\n\n-> https://example.com/kendall-jenner\n```\n\n# Settings\n\nThis section will talk about all the available settings that are available for your project and how to use them for web scrapping.\n\n**PROJECT_PATH**\n\nRepresents the current path for your project. This setting is not be changed.\n\n**SPIDERS**\n\nIn order for your spider to be executed, every created spider should be registered here. The name of the class should serve as the name of the spider to be used.\n\n```\nSPIDERS = [\n    \"MySpider\"\n]\n```\n\n**DOMAINS**\n\nYou can restrict your project to use only to a specific set of domains by ensuring that no request is sent if it matches one of the domains within this list.\n\n```\nDOMAINS = [\n    \"example.com\"\n]\n```\n\n**ENSURE_HTTPS**\n\nEnforce that every link in your project is a secured HTTPS link. This setting is set to False by default.\n\n**MIDDLEWARES**\n\nMiddlewares are functions/classes that are executed when a signal is sent from any part of the project. Middlewares implement extra functionnalities without affecting the core parts of the project. They can then be disabled safely if you do not need them.\n\n```\nMIDDLEWARES = [\n    \"zineb.middlewares.handlers.Handler\",\n    \"myproject.middlewares.MyMiddleware\"\n]\n```\n\nThe main Zineb middlewares are the following:\n\n* zineb.middlewares.referer.Referer\n* zineb.middlewares.handlers.Handler\n* zineb.middlewares.automation.Automation\n* zineb.middlewares.history.History\n* zineb.middlewares.statistics.GeneralStatistics\n* zineb.middlewares.wireframe.WireFrame\n\n\n**USER_AGENTS**\n\nA user agent is a characteristic string that lets servers and network peers identify the application, operating system, vendor, and/or version of the requesting [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent).\n\nImplement additional sets of user agents to your projects in addition to those that were already created.\n\n**RANDOMIZE_USER_AGENTS**\n\nSpecifies whether to use one user agent for every request or to randomize user agents on every request. This setting is set to to False by default.\n\n\n**DEFAULT_REQUEST_HEADERS**\n\nSpecify additional default headers to use for each requests.\n\nThe default initial headers are:\n\n* `Accept-Language` - en\n* `Accept` - text/html,application/json,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n* Referrer - None\n\n\n**PROXIES**\n\nUse a set of proxies for each request. When a request in sent, a random proxy is selected and implemented with the request.\n\n```\nPROXIES = [\n    (\"http\", \"127.0.0.1\"),\n    (\"https\", \"127.0.0.1\")\n]\n```\n\n**RETRY**\n\nSpecifies the retry policy. This is set to False by default. In other words, the request silently fails and never retries.\n\n**RETRY_TIMES**\n\nSpecificies the amount of times the the request is sent before eventually failing.\n\n**RETRY_HTTP_CODES**\n\nIndicates which status codes should trigger a retry. By default, the following codes: 500, 502, 503, 504, 522, 524, 408 and 429 will trigger it.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Zadigo/zineb/releases/tag/1.0.1-alpha",
    "keywords": "python,web scrapping,scrapping",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zineb",
    "package_url": "https://pypi.org/project/zineb/",
    "platform": "",
    "project_url": "https://pypi.org/project/zineb/",
    "project_urls": {
      "Homepage": "https://github.com/Zadigo/zineb/releases/tag/1.0.1-alpha"
    },
    "release_url": "https://pypi.org/project/zineb/1.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.9",
    "summary": "Advanced web scrapper for machine learning and data science buit around BeautifulSoup and Pandas",
    "version": "1.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 10062316,
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "649ac6d1e415cc218761fded15a2afc66277dbf313056ca9048b98738a87c2b0",
          "md5": "86f02709fbea73c18daecaf011b6746a",
          "sha256": "8835b335ad90ba9801916562722df5cfce1d0372441f4d2c465b52ac5ae940d9"
        },
        "downloads": -1,
        "filename": "zineb-scrapper-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "86f02709fbea73c18daecaf011b6746a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 28420,
        "upload_time": "2021-04-14T13:35:50",
        "upload_time_iso_8601": "2021-04-14T13:35:50.709893Z",
        "url": "https://files.pythonhosted.org/packages/64/9a/c6d1e415cc218761fded15a2afc66277dbf313056ca9048b98738a87c2b0/zineb-scrapper-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "649ac6d1e415cc218761fded15a2afc66277dbf313056ca9048b98738a87c2b0",
        "md5": "86f02709fbea73c18daecaf011b6746a",
        "sha256": "8835b335ad90ba9801916562722df5cfce1d0372441f4d2c465b52ac5ae940d9"
      },
      "downloads": -1,
      "filename": "zineb-scrapper-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "86f02709fbea73c18daecaf011b6746a",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9",
      "size": 28420,
      "upload_time": "2021-04-14T13:35:50",
      "upload_time_iso_8601": "2021-04-14T13:35:50.709893Z",
      "url": "https://files.pythonhosted.org/packages/64/9a/c6d1e415cc218761fded15a2afc66277dbf313056ca9048b98738a87c2b0/zineb-scrapper-1.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}