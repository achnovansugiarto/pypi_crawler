{
  "info": {
    "author": "",
    "author_email": "Francisco Miguel Moreno <butakus@gmail.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Communications",
      "Topic :: Software Development :: Libraries",
      "Topic :: Terminals :: Serial"
    ],
    "description": "# Host-side ArduComm python library and examples\nThis is the host-side library implementation of ArduComm, written in Python. In addition to the library's source code, different examples and tests are provided in [examples](examples) and [test](test).\n\n## Installation\n### PYPI installation\nThe easiest way to install the package is using `pip`:\n```bash\npython3 -m pip install arducomm\n```\n\n### Manual installation\nAlternatively, this package can also be manually installed using Python's `build` module and `pip`.\n\nFirst, install the `build` package if this hasn't been done before:\n```bash\npython3 -m pip install build\n```\nThen, build the package and install it with pip:\n```bash\npython3 -m build\npython3 -m pip install dist/arducomm-*.whl --force-reinstall\n```\n\n## How to use\nThe class `ArduComm` is provided in the package and can be used to send and receive data. A callback function must be provided to process the received messages. Note that this implementation handles the incoming messages in a different thread, so there are no reading methods. The provided callback will be called when a new message is available.\n\n```Python\nfrom arducomm import ArduComm\n\ndef recv_callback(command, payload):\n    print(F\"Command received: {command}\")\n    print(F\"Payload:\\n{payload}\")\n\ncomms = ArduComm(recv_callback, port='/dev/ttyUSB0', baudrate=57600)\ncomms.start() # Open the serial port\n# Use comms object...\ncomms.stop() # Close the serial port\n```\n\n### How to send data\nThe function `send(command, payload)` can be used to send a message with the given command and payload. The payload must be a list of integers, a bytearray, or a bytes object.\n\n```Python\ncomms.send(0x07) # Send command 0x07 with no payload\ncomms.send(0x03, [55, 50]) # Send command 0x03 with payload bytes [55, 50]\n```\n\n### Serialization\nIn order to work with payloads containing other types than pure bytes (aka uint8_t, aka unsigned char), these types must be serialized (converted to bytes) before being transmitted. Similarly, the array of bytes that is received in the payload must be parsed (deserialized) to reconstruct these types.\n\nTo this end, a serialization module is also included in this library, following the implementation of the Arduino library, with support for basic types (char, str, uint8_t, int8_t, uint16_t, int16_t, uint32_t, int32_t, and float). Additional \"complex\" types are also defined in the types directory to provide more options with types such as 2D and 3D vectors, quaternions, or 2D/3D poses.\n\nYou can find the full list of supported types and how to serialize/parse them in [serialization_test](test/test_arduino_parser.py) and [parser_test](test/test_arduino_serialization.py).\n\nFinally, you can also define your own types and use the provided serialization functions as it is done in the [custom_type](examples/custom_type.py) example.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "communication,arduino,serial",
    "license": "GLPv3",
    "maintainer": "",
    "maintainer_email": "Francisco Miguel Moreno <butakus@gmail.com>",
    "name": "arducomm",
    "package_url": "https://pypi.org/project/arducomm/",
    "platform": null,
    "project_url": "https://pypi.org/project/arducomm/",
    "project_urls": {
      "Source": "https://github.com/butakus/arducomm"
    },
    "release_url": "https://pypi.org/project/arducomm/0.1.0/",
    "requires_dist": [
      "pyserial"
    ],
    "requires_python": ">=3.7",
    "summary": "A library to enable robust communication between an Arduino and a host via serial",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 16981580,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b2975d194da13fb1c271c4684996ec886903ff5c7a1fb5f7b3a2a71d9f6d1a8e",
          "md5": "8c7fc5c39fc624d0d7cded46b4b71907",
          "sha256": "1b10ce9e1c1f5436c3cf417cae10000f43652bb28db60e006ad0899cf34ad1ae"
        },
        "downloads": -1,
        "filename": "arducomm-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c7fc5c39fc624d0d7cded46b4b71907",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 13114,
        "upload_time": "2023-02-22T18:51:19",
        "upload_time_iso_8601": "2023-02-22T18:51:19.837783Z",
        "url": "https://files.pythonhosted.org/packages/b2/97/5d194da13fb1c271c4684996ec886903ff5c7a1fb5f7b3a2a71d9f6d1a8e/arducomm-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e06e4b30bbb12e5656702ca8423403acf71540f9d7716faa301b20ab350e49a1",
          "md5": "d6d2c8c5baac26ec946250ca58543fa3",
          "sha256": "6cfe33f537b1a2dba78876ebf17d990096cbd4a52903720d43945243eaed7647"
        },
        "downloads": -1,
        "filename": "arducomm-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d6d2c8c5baac26ec946250ca58543fa3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 14401,
        "upload_time": "2023-02-22T18:51:22",
        "upload_time_iso_8601": "2023-02-22T18:51:22.665451Z",
        "url": "https://files.pythonhosted.org/packages/e0/6e/4b30bbb12e5656702ca8423403acf71540f9d7716faa301b20ab350e49a1/arducomm-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "b2975d194da13fb1c271c4684996ec886903ff5c7a1fb5f7b3a2a71d9f6d1a8e",
        "md5": "8c7fc5c39fc624d0d7cded46b4b71907",
        "sha256": "1b10ce9e1c1f5436c3cf417cae10000f43652bb28db60e006ad0899cf34ad1ae"
      },
      "downloads": -1,
      "filename": "arducomm-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8c7fc5c39fc624d0d7cded46b4b71907",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 13114,
      "upload_time": "2023-02-22T18:51:19",
      "upload_time_iso_8601": "2023-02-22T18:51:19.837783Z",
      "url": "https://files.pythonhosted.org/packages/b2/97/5d194da13fb1c271c4684996ec886903ff5c7a1fb5f7b3a2a71d9f6d1a8e/arducomm-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e06e4b30bbb12e5656702ca8423403acf71540f9d7716faa301b20ab350e49a1",
        "md5": "d6d2c8c5baac26ec946250ca58543fa3",
        "sha256": "6cfe33f537b1a2dba78876ebf17d990096cbd4a52903720d43945243eaed7647"
      },
      "downloads": -1,
      "filename": "arducomm-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d6d2c8c5baac26ec946250ca58543fa3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 14401,
      "upload_time": "2023-02-22T18:51:22",
      "upload_time_iso_8601": "2023-02-22T18:51:22.665451Z",
      "url": "https://files.pythonhosted.org/packages/e0/6e/4b30bbb12e5656702ca8423403acf71540f9d7716faa301b20ab350e49a1/arducomm-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}