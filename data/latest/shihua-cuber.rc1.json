{
  "info": {
    "author": "shihua",
    "author_email": "15021408795@163.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Cuber\n![shields_version](static/shields_version.svg)  ![shields_license](static/shields_license.svg)   ![shields_author](static/shields_author.svg)  ![shiedls_python](static/shields_python.svg)\n\n![cuber_avatar](static/Cuber_avatar.JPG)\n\n## 介绍\n+ cuber是一个集成学习框架，主要用于各种集成学习算法的开发，具有灵活动态可配置的特点。cuber主要由三大模块组成，控制引擎、计算引擎和调度引擎。控制引擎依托于networkx的有向无环图技术，需要以计算引擎和调度引擎为基础，运行时加载。计算引擎支持Ray,Dask；调度引擎支持Kahn算法。\n\n\n## 安装\n+ Cuber采用Python开发，得益于Python良好的社区环境，安装支持Pythonic风格的各种管理器。\n```bash\n$ pip install cuber-0.1-xxxxxxxxxxxx.whl\n```\n\n\n\n## 快速指南\n+ cuber使用主要分为三大步，首先初始化cuber实例，加载计算引擎和调度引擎，获取cuber控制器实例；然后使用装饰器注册目标节点的函数；最后调用cuber控制器执行\n\n+ 以下是cuber主程脚本代码示例：\n\n```python\n\n\t### 载入程序包\n\tfrom cuber.interface import Cube\n\timport time\n\n\n\t### cuber实例创建\n\tcuber = Cube(cuber_runner='ray',\n\t             cuber_runner_address='ray://192.168.1.51:10001',\n\t             cuber_scheduler='kahn')\n\n\n\t### 创建cuber控制器\n\tcuber_controller = cuber.get_cuber_controller()\n\n\n\t### 注册目标函数到指定cuber控制器\n\t@cuber_controller.register(controller_obj=cuber_controller)\n\tdef test_a():\n\t    time.sleep(10)\n\t    print(2)\n\t    return 'a'\n\n\t@cuber_controller.register(controller_obj=cuber_controller)\n\tdef test_aa():\n\t    time.sleep(10)\n\t    print(2)\n\t    return 'aa'\n\n\t@cuber_controller.register(controller_obj=cuber_controller)\n\tdef test_b():\n\t    time.sleep(10)\n\t    print(2)\n\t    return 'b'\n\n\t@cuber_controller.register(controller_obj=cuber_controller)\n\tdef test_bb():\n\t    time.sleep(10)\n\t    print(2)\n\t    return 'bb'\n\n\t@cuber_controller.register(controller_obj=cuber_controller)\n\tdef test_c():\n\t    time.sleep(10)\n\t    print(2)\n\t    return 'c'\n\n\t@cuber_controller.register(controller_obj=cuber_controller)\n\tdef test_cc():\n\t    time.sleep(10)\n\t    print(2)\n\t    return 'cc'\n\n\t@cuber_controller.register(controller_obj=cuber_controller)\n\tdef test_d():\n\t    time.sleep(10)\n\t    return 'd'\n\n\n\t### 注册目标函数依赖关系到指定cuber控制器\n\ttest_a >> test_b >> test_c >> test_d\n\ttest_aa >> test_b >> test_d\n\ttest_bb >> test_c >> test_d\n\ttest_cc >> test_d\n\n\n\t### 展示节点和边情况\n\tprint('~~~~~~',cuber_controller.get_graph_obj())\n\tprint('------',cuber_controller.show_nodes())\n\tprint('======',cuber_controller.show_edges())\n\n\n\t### 使用二级统一API\n\ttime_start = time.time()\n\texec_result = cuber_controller.execute()\n\ttime_end = time.time()\n\tprint('============================== Parallel function running',time_end - time_start)\n\n\n\t### 串行函数运行\n\ttime_start = time.time()\n\ttest_a()\n\ttest_aa()\n\ttest_bb()\n\ttest_cc()\n\ttest_b()\n\ttest_c()\n\ttest_d()\n\ttime_end = time.time()\n\tprint('============================== Serial function operation',time_end - time_start)\n```\n\n\n## 设计\n+ 大量使用元编程技术，提高代码灵活性、可读性和维护质量\n+ 设计了控制引擎、计算引擎和调度引擎，实现灵活动态可扩展\n+ 天然支持分布式\n+ 三级API设计，使用方便，适应不同程度的使用人员\n+ 技术列表\n\t+ __new__技术\n\t+ __init__技术\n\t+ __prepare__技术\n\t+ __call__技术\n\t+ type元类\n\t+ 描述符技术\n\t+ Mixin\n\t+ 装饰器技术\n\t+ namedtuple\n\t+ Networkx\n\t+ FSM-transitions\n\t+ 运算符重载\n\t+ __slots__技术\n\t+ Ray\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/redblue0216/Cuber",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shihua-cuber",
    "package_url": "https://pypi.org/project/shihua-cuber/",
    "platform": null,
    "project_url": "https://pypi.org/project/shihua-cuber/",
    "project_urls": {
      "Homepage": "https://github.com/redblue0216/Cuber"
    },
    "release_url": "https://pypi.org/project/shihua-cuber/0.1/",
    "requires_dist": null,
    "requires_python": ">=3.9.12",
    "summary": "Cuber is an ensemble learning frame tool.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17284952,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a64bfaeddbadd74e990f53817bbec0eec98f98029423511c1357524595ce61c7",
          "md5": "c3c4c77a67ca1bede13bd14da8ad3443",
          "sha256": "aa3515d7fb59abaf8f581ec71c772f158ca4c9ddea11edbf5a0bb07a34e7d299"
        },
        "downloads": -1,
        "filename": "shihua_cuber-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c3c4c77a67ca1bede13bd14da8ad3443",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9.12",
        "size": 28144,
        "upload_time": "2023-03-14T09:37:31",
        "upload_time_iso_8601": "2023-03-14T09:37:31.806047Z",
        "url": "https://files.pythonhosted.org/packages/a6/4b/faeddbadd74e990f53817bbec0eec98f98029423511c1357524595ce61c7/shihua_cuber-0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "edf208315d28ca5146b6d2bd5c0e18677f4fd1a60c001d961b31fc2debe1806b",
          "md5": "1f07fb853f969f65dfad82fad1449ee3",
          "sha256": "63c94120b8d55587110bb8c26061aec4793aaa4851ba2241c13e98fcb0c24174"
        },
        "downloads": -1,
        "filename": "shihua-cuber-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1f07fb853f969f65dfad82fad1449ee3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9.12",
        "size": 19788,
        "upload_time": "2023-03-14T09:37:33",
        "upload_time_iso_8601": "2023-03-14T09:37:33.996030Z",
        "url": "https://files.pythonhosted.org/packages/ed/f2/08315d28ca5146b6d2bd5c0e18677f4fd1a60c001d961b31fc2debe1806b/shihua-cuber-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a64bfaeddbadd74e990f53817bbec0eec98f98029423511c1357524595ce61c7",
        "md5": "c3c4c77a67ca1bede13bd14da8ad3443",
        "sha256": "aa3515d7fb59abaf8f581ec71c772f158ca4c9ddea11edbf5a0bb07a34e7d299"
      },
      "downloads": -1,
      "filename": "shihua_cuber-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c3c4c77a67ca1bede13bd14da8ad3443",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.9.12",
      "size": 28144,
      "upload_time": "2023-03-14T09:37:31",
      "upload_time_iso_8601": "2023-03-14T09:37:31.806047Z",
      "url": "https://files.pythonhosted.org/packages/a6/4b/faeddbadd74e990f53817bbec0eec98f98029423511c1357524595ce61c7/shihua_cuber-0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "edf208315d28ca5146b6d2bd5c0e18677f4fd1a60c001d961b31fc2debe1806b",
        "md5": "1f07fb853f969f65dfad82fad1449ee3",
        "sha256": "63c94120b8d55587110bb8c26061aec4793aaa4851ba2241c13e98fcb0c24174"
      },
      "downloads": -1,
      "filename": "shihua-cuber-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1f07fb853f969f65dfad82fad1449ee3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.9.12",
      "size": 19788,
      "upload_time": "2023-03-14T09:37:33",
      "upload_time_iso_8601": "2023-03-14T09:37:33.996030Z",
      "url": "https://files.pythonhosted.org/packages/ed/f2/08315d28ca5146b6d2bd5c0e18677f4fd1a60c001d961b31fc2debe1806b/shihua-cuber-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}