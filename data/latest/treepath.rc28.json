{
  "info": {
    "author": "\"Joey Sullivan\",",
    "author_email": "\"monkeydevtools@gmail.com\"",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "\n# The **treepath** Package.\n\nThe **treepath** package offers a [declarative programming](https://en.wikipedia.org/wiki/Declarative_programming) \napproach to extracting data from a [json](https://docs.python.org/3/library/json.html) data structure.  The expressions \nare a [query language](https://en.wikipedia.org/wiki/Query_language) similar to\n[jsonpath](https://goessner.net/articles/JsonPath/), and [Xpath](https://en.wikipedia.org/wiki/XPath), but are\nwritten in native python syntax.\n\nNote python 3.6 is supported in version earlier that 1.0.0.\n\n# Quick start\nAll of the treepath components should be imported as follows:\n```python\nfrom treepath import path, pathd, wc, wildcard, set_, get, get_match, find, find_matches, has, has_all,\n    has_any, has_not, MatchNotFoundError, Match, log_to, Document, attr, attr_typed, attr_iter_typed,\n    attr_list_typed, JsonArgTypes\n```\n\nA treepath example that fetches the value 1 from data.\n\n```python\ndata = {\n    \"a\": {\n        \"b\": [\n            {\n                \"c\": 1\n            },\n            {\n                \"c\": 2\n            }]\n    }\n}\nvalue = get(path.a.b[0].c, data)\nassert value == 1\n\n```\nA treepath example that fetches the values 1 and 2 from data.\n\n```python\nvalue = [value for value in find(path.a.b[wc].c, data)]\nassert value == [1, 2]\n```\n\n# Solar System Json Document\n\nThe examples shown in this README use the following json document.  It describes our solar system. Click to expand.  \n<details><summary>solar_system = {...}</summary>\n<p>\n\n```json\n\n{\n  \"star\": {\n    \"name\": \"Sun\",\n    \"diameter\": 1391016,\n    \"age\": null,\n    \"planets\": {\n      \"inner\": [\n        {\n          \"name\": \"Mercury\",\n          \"Number of Moons\": \"0\",\n          \"diameter\": 4879,\n          \"has-moons\": false\n        },\n        {\n          \"name\": \"Venus\",\n          \"Number of Moons\": \"0\",\n          \"diameter\": 12104,\n          \"has-moons\": false\n        },\n        {\n          \"name\": \"Earth\",\n          \"Number of Moons\": \"1\",\n          \"diameter\": 12756,\n          \"has-moons\": true\n        },\n        {\n          \"name\": \"Mars\",\n          \"Number of Moons\": \"2\",\n          \"diameter\": 6792,\n          \"has-moons\": true\n        }\n      ],\n      \"outer\": [\n        {\n          \"name\": \"Jupiter\",\n          \"Number of Moons\": \"79\",\n          \"diameter\": 142984,\n          \"has-moons\": true\n        },\n        {\n          \"name\": \"Saturn\",\n          \"Number of Moons\": \"82\",\n          \"diameter\": 120536,\n          \"has-moons\": true\n        },\n        {\n          \"name\": \"Uranus\",\n          \"Number of Moons\": \"27\",\n          \"diameter\": 51118,\n          \"has-moons\": true\n        },\n        {\n          \"name\": \"Neptune\",\n          \"Number of Moons\": \"14\",\n          \"diameter\": 49528,\n          \"has-moons\": true\n        }\n      ]\n    }\n  }\n}\n\n\n```\n\n</p>\n</details>\n\n\n# Quick comparison between Imperative and Declarative Solution.\n\nThe following problem is solved using a Imperative Solution and a Declarative Solution to try to illustrate the \ndifferences between the two approaches.  \n\nThe problem is fetch the planet by name from the given solar system json document.  \n\n\n\n## Imperative Solution\n\nThe first example uses flow control statements to define a\n[Imperative Solution]( https://en.wikipedia.org/wiki/Imperative_programming).   This is a\nvery common approach to solving problems.\n\n```python\n\n\ndef get_planet_by_name(name, the_solar_system):\n    try:\n        planets = the_solar_system['star']['planets']\n        for arc in planets.values():\n            for planet in arc:\n                if name == planet.get('name', None):\n                    return planet\n    except KeyError:\n        pass\n    return None\n\nactual = get_planet_by_name('Earth', solar_system)\nexpected = {'Number of Moons': '1', 'diameter': 12756, 'has-moons': True, 'name': 'Earth'}\nassert actual == expected\n```\n\n## Declarative  Solution\n\nThe second example uses treepath to define a\n[declarative solution](https://en.wikipedia.org/wiki/Declarative_programming).\nIt solves the same problem without defining any flow control statements.    This keeps the Cyclomatic and\nCognitive Complexity low.\n\n```python\n\n\ndef get_planet_by_name(name: str, the_solar_system):\n    return get(\n        path.star.planets.wc[wc][has(path.name == name)],\n        the_solar_system,\n        default=None\n    )\n\nactual = get_planet_by_name('Earth', solar_system)\nexpected = {'Number of Moons': '1', 'diameter': 12756, 'has-moons': True, 'name': 'Earth'}\nassert actual == expected\n```\n\n# query examples.\n\n| Description                                 | Xpath                               | jsonpath                                  | treepath                            |\n|----------------------------------------------|-------------------------------------|-------------------------------------------|------------------------------------|\n| Find planet earth.                           | /star/planets/inner[name='Earth']   | $.star.planets.inner[?(@.name=='Earth')]  | path.star.planets.inner[wc][has(path.name == 'Earth')]   |\n| List the names of all inner planets.         | /star/planets/inner[*].name         | $.star.planets.inner[*].name              | path.star.planets.inner[wc].name   |\n| List the names of all planets.               | /star/planets/*/name                | $.star.planets.[*].name                   | path.star.planets.wc[wc].name      |\n| List the names of all celestial bodies       | //name                              | $..name                                   | path.rec.name                      |  \n| List all nodes in the tree Preorder          | //*                                 | $..                                       | path.rec                           |\n| Get the third rock from the sun              | /star/planets/inner[3]              | $.star.planets.inner[2]                   | path.star.planets.inner[2]         |\n| List first two inner planets                 | /star/planets.inner[position()<3]   | $.star.planets.inner[:2]                  | path.star.planets.inner[0:2]       |\n|                                              |                                     | $.star.planets.inner[0, 1]                | path.star.planets.inner[0, 2]      |\n| List planets smaller than earth              | /star/planets/inner[Equatorial_diameter < 1]   | $.star.planets.inner[?(@.['Equatorial diameter'] < 1)]              | path.star.planets.inner[wc][has(path[\"Equatorial diameter\"] < 1)]       |\n| List celestial bodies that have planets.     | //*[planets]/name                   | $..*[?(@.planets)].name                   | path.rec[has(path.planets)].name       |\n\n# Traversal Functions\n## get\nThe **get** function returns the first value the path leads to.\n\nGet the star name from the solar_system\n\n```python\nsun = get(path.star.name, solar_system)\nassert sun == 'Sun'\n\n```\nWhen there is no match, MatchNotFoundError is thrown.\n\n```python\ntry:\n    get(path.star.human_population, solar_system)\n    assert False, \"Not expecting humans on the sun\"\nexcept MatchNotFoundError:\n    pass\n\n```\nOr if preferred, a default value can be given.\n\n```python\nhuman_population = get(path.star.human_population, solar_system, default=0)\nassert human_population == 0\n\n```\nIn addition to a constant, the default value may also be a callable\n\n```python\ndef population():\n    return 0\n\nhuman_population = get(path.star.human_population, solar_system, default=population)\nassert human_population == 0\n\n```\nThe default value can be automatically injected in to json document\n\n```python\nhuman_population = get(path.star.human_population, solar_system, default=1, store_default=True)\nassert human_population == solar_system[\"star\"][\"human_population\"]\n\n```\nThe data source can be a json data structure or a Match object.\n\n```python\nparent_match = get_match(path.star.planets.inner, solar_system)\nname = get(path[2].name, parent_match)\nassert name == \"Earth\"\n```\n## set_\nThe **set_** function modifies the json document.\n\nUse the set_ function to modify the star name.\n\n```python\nsun = get(path.star.name, solar_system)\nassert sun == 'Sun'\nset_(path.star.name, \"RedSun\", solar_system)\nsun = get(path.star.name, solar_system)\nassert sun == 'RedSun'\nassert solar_system[\"star\"][\"name\"] == 'RedSun'\n\n```\nUse the set_ to add planet9.   This example creates multiple objects in one step.\n\n```python\nname = get(path.star.planets.outer[4].name, solar_system, default=None)\nassert name is None\nplanets_count = len(list(find(path.star.planets.wc[wc].name, solar_system)))\nassert planets_count == 8\n\nset_(path.star.planets.outer[4].name, 'planet9', solar_system, cascade=True)\n\nname = get(path.star.planets.outer[4].name, solar_system, default=None)\nassert name == 'planet9'\nplanets_count = len(list(find(path.star.planets.wc[wc].name, solar_system)))\nassert planets_count == 9\n```\n## find\nThe **find** function returns an Iterator that iterates to each value the path leads to.  Each value is\ndetermine on its iteration.\n\nFind all of the planet names.\n\n```python\ninner_planets = [planet for planet in find(path.star.planets.inner[wc].name, solar_system)]\nassert inner_planets == ['Mercury', 'Venus', 'Earth', 'Mars']\n\n```\nThe data source can be a json data structure or a Match object.\n\n```python\nparent_match = get_match(path.star.planets.inner, solar_system)\ninner_planets = [planet for planet in find(path[wc].name, parent_match)]\nassert inner_planets == ['Mercury', 'Venus', 'Earth', 'Mars']\n```\n## get_match\nThe **get_match** function returns the first Match the path leads to.\n\nGet the star name from the solar_system\n\n```python\nmatch = get_match(path.star.name, solar_system)\nassert match.data == 'Sun'\n\n```\nWhen there is no match, MatchNotFoundError is thrown.\n\n```python\ntry:\n    get_match(path.star.human_population, solar_system)\n    assert False, \"Not expecting humans on the sun\"\nexcept MatchNotFoundError:\n    pass\n\n```\nOr if preferred, **None** is returned if must_match is set to False.\n\n```python\nmatch = get_match(path.star.human_population, solar_system, must_match=False)\nassert match is None\n\n```\nThe data source can be a json data structure or a Match object.\n\n```python\nparent_match = get_match(path.star.planets.inner, solar_system)\nearth_match = get_match(path[2].name, parent_match)\nassert earth_match.path_as_str == \"$.star.planets.inner[2].name\"\nassert earth_match.data == \"Earth\"\n```\n## find_matches\nThe **find_matches** function returns an Iterator that iterates to each match the path leads to.  Each match is\ndetermine on its iteration.\n\nFind the path to each of the inner planets.\n\n```python\nfor match in find_matches(path.star.planets.inner[wc], solar_system):\n    assert match.path_as_str in [\n        '$.star.planets.inner[0]',\n        '$.star.planets.inner[1]',\n        '$.star.planets.inner[2]',\n        '$.star.planets.inner[3]',\n    ]\n\n```\nThe data source can be a json data structure or a Match object.\n\n```python\nparent_match = get_match(path.star.planets.inner, solar_system)\nfor match in find_matches(path[wc], parent_match):\n    assert match.path_as_str in [\n        '$.star.planets.inner[0]',\n        '$.star.planets.inner[1]',\n        '$.star.planets.inner[2]',\n        '$.star.planets.inner[3]',\n    ]\n```\n## The Match Class\nThe **Match** class provides metadata about the match.\n\n```python\nmatch = get_match(path.star.name, solar_system)\n\n```\nThe explicit path to the match\n\n```python\nexplicit_path = match.path\nassert explicit_path == path.star.name\n\n```\nThe string representation of the match including the value: \"path=value\"\n\n```python\nassert repr(match) == \"$.star.name=Sun\"\nassert str(match) == \"$.star.name=Sun\"\n\n```\nThe string representation of the match, but with just the path component.\n\n```python\nassert match.path_as_str == \"$.star.name\"\n\n```\nA list containing each match in the path.\n\n```python\nassert match.path_match_list == [match.parent.parent, match.parent, match]\n\n```\nThe key that points to the match value.  The data_name is a dictionary key if the parent is a dict or an index if\nthe parent is a list.\n\n```python\nassert match.data_name == \"name\" and match.parent.data[match.data_name] == match.data\n\n```\nThe value the path matched.\n\n```python\nassert match.data == \"Sun\"\n\n```\nThe parent match.\n\n```python\nassert match.parent.path_as_str == \"$.star\"\n\n```\nThe match can modify the value\n\n```python\nmatch.data = \"Soleil\"\nassert repr(match) == \"$.star.name=Soleil\"\ndel match.data\nassert repr(match) == \"$.star.name=None\"\nmatch.data = \"Sun\"\nassert repr(match) == \"$.star.name=Sun\"\nmatch.pop()\nassert repr(match) == \"$.star.name=None\"\n```\n## Tracing Debugging\nAll of the functions: get, find, get_match and find_matchesm, support tracing.   An option, when enabled,\nrecords the route the algorithm takes to determine a match.\n\nThis example logs the route the algorithm takes to find the inner planets.  The **print**\nfunction is give to capture the logs, but any single argument function can be used.\n\n```python\ninner_planets = [planet for planet in find(path.star.planets.inner[wc].name, solar_system, trace=log_to(print))]\nassert inner_planets == ['Mercury', 'Venus', 'Earth', 'Mars']\n\n```\nThe results\n\n```python\n\"\"\"\nat $.star got {'name': 'Sun', 'dia...\nat $.star.planets got {'inner': [{'name': ...\nat $.star.planets.inner got [{'name': 'Mercury',...\nat $.star.planets.inner[*] got {'name': 'Mercury', ...\nat $.star.planets.inner[0].name got 'Mercury'\nat $.star.planets.inner[*] got {'name': 'Venus', 'N...\nat $.star.planets.inner[1].name got 'Venus'\nat $.star.planets.inner[*] got {'name': 'Earth', 'N...\nat $.star.planets.inner[2].name got 'Earth'\nat $.star.planets.inner[*] got {'name': 'Mars', 'Nu...\nat $.star.planets.inner[3].name got 'Mars'\n\"\"\"\n```\n# Path\n## The root\nThe **path** point to root of the tree.\n\n```python\nmatch = get_match(path, solar_system)\n\nassert match.data == solar_system\n\n```\nIn a filter path point to the current element.\n\n```python\nmatch = get_match(path.star.name[has(path == 'Sun')], solar_system)\n\nassert match.data == 'Sun'\n```\n## Dictionaries\n### Keys\nThe dictionary keys are referenced as dynamic attributes on a path.\n\n```python\ninner_from_attribute = get(path.star.planets.inner, solar_system)\ninner_from_string_keys = get(path[\"star\"][\"planets\"][\"inner\"], solar_system)\n\nassert inner_from_attribute == inner_from_string_keys == solar_system[\"star\"][\"planets\"][\"inner\"]\n```\n### Keys With Special Characters\nDictionary keys that are not valid python syntax can be referenced as double quoted strings.\n\n```python\nsun_equatorial_diameter = get(path.star.planets.inner[0][\"Number of Moons\"], solar_system)\n\nassert sun_equatorial_diameter == solar_system[\"star\"][\"planets\"][\"inner\"][0][\"Number of Moons\"]\n\n```\nDictionaries that have alot of keys with a dash in the name can can use **pathd** instead.  It will interpret\npath attributes with underscore as dashes.\n\n```python\nmercury_has_moons = get(pathd.star.planets.inner[0].has_moons, solar_system)\n\nassert mercury_has_moons == solar_system[\"star\"][\"planets\"][\"inner\"][0][\"has-moons\"]\n```\n### Wildcard as a Key.\nThe **wildcard** attribute specifies all sibling keys.   It is useful for iterating over attributes.\n\n```python\nstar_children = [child for child in find(path.star.wildcard, solar_system)]\nassert star_children == [solar_system[\"star\"][\"name\"],\n                         solar_system[\"star\"][\"diameter\"],\n                         solar_system[\"star\"][\"age\"],\n                         solar_system[\"star\"][\"planets\"], ]\n\n```\nThe **wc** is the short version of wildcard.\n\n```python\nstar_children = [child for child in find(path.star.wc, solar_system)]\nassert star_children == [solar_system[\"star\"][\"name\"],\n                         solar_system[\"star\"][\"diameter\"],\n                         solar_system[\"star\"][\"age\"],\n                         solar_system[\"star\"][\"planets\"], ]\n\n```\nThe dictionary wildcard is declared using dot notation and cannot be used to iterator over a list.  The list\nwildcard is declared using index notation and cannot be used to iterate over dictionary keys.\n\n```python\nall_planets = [p for p in find(path.star.planets.wc[wc].name, solar_system)]\nassert all_planets == ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\n```\nThe generic_wildcard, also known as gwc, can be declared in either notations and supports iterating over both\nlist and dictionaries.\n\n```python\nall_planets = [p for p in find(path.star.planets.gwc.gwc.name, solar_system)]\nassert all_planets == ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n```\n### Comma Delimited Keys\nMultiple dictionary keys can be specified using a comma delimited list.\n\n```python\nlast_and_first = [planet for planet in find(path.star[\"diameter\", \"name\"], solar_system)]\nassert last_and_first == [1391016, \"Sun\"]\n```\n## List\n### Indexes\nList can be access using index.\n\n```python\nearth = get(path.star.planets.inner[2], solar_system)\nassert earth == solar_system[\"star\"][\"planets\"][\"inner\"][2]\n\n```\nList the third inner and outer planet.\n\n```python\nlast_two = [planet for planet in find(path.star.wc.wc[2].name, solar_system)]\nassert last_two == ['Earth', 'Uranus']\n```\n### Slices\nList can be access using slices.\n\nList the first two planets.\n\n```python\nfirst_two = [planet for planet in find(path.star.planets.outer[:2].name, solar_system)]\nassert first_two == [\"Jupiter\", \"Saturn\"]\n\n```\nList the last two planets.\n\n```python\nlast_two = [planet for planet in find(path.star.planets.outer[-2:].name, solar_system)]\nassert last_two == [\"Uranus\", \"Neptune\"]\n\n```\nList all outer planets in reverse.\n\n```python\nlast_two = [planet for planet in find(path.star.planets.outer[::-1].name, solar_system)]\nassert last_two == [\"Neptune\", \"Uranus\", \"Saturn\", \"Jupiter\"]\n\n```\nList the last inner and outer planets.\n\n```python\nlast_two = [planet for planet in find(path.star.wc.wc[-1:].name, solar_system)]\nassert last_two == [\"Mars\", \"Neptune\"]\n```\n### Comma Delimited Indexes.\nList indexes can be specified as a comma delimited list.\n\n```python\nlast_and_first = [planet for planet in find(path.star.planets.outer[3, 0].name, solar_system)]\nassert last_and_first == [\"Neptune\", \"Jupiter\"]\n```\n### Wildcard as an Index.\nThe **wildcard** word can be used as a list index.   It is useful for iterating over attributes.\n\n```python\nall_outer = [planet for planet in find(path.star.planets.outer[wildcard].name, solar_system)]\nassert all_outer == [\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n```\nThe **wc** is the short version of wildcard.\n\n```python\nall_outer = [planet for planet in find(path.star.planets.outer[wc].name, solar_system)]\nassert all_outer == [\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n```\nThe list wildcard is declared using index notation and cannot be used to iterate over dictionary keys.  The\ndictionary wildcard is declared using dot notation and cannot be used to iterator over a list.\n\n```python\nall_planets = [p for p in find(path.star.planets.wc[wc].name, solar_system)]\nassert all_planets == ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\n```\nThe generic_wildcard, also known as gwc, can be declared in either notations and supports iterating over both\nlist and dictionaries.\n\n```python\nall_planets = [p for p in find(path.star.planets[gwc][gwc].name, solar_system)]\nassert all_planets == ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n```\n## Recursion\nThe **recursive** word implies recursive search.  It executes a preorder tree traversal.  The search algorithm\ndescends the tree hierarchy evaluating the path on each vertex until a match occurs.  On each iteration it\ncontinues where it left off. This is an example that finds all the planets names.\n\n```python\nall_planets = [p for p in find(path.star.planets.recursive.name, solar_system)]\nassert all_planets == ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\n```\nThe **rec** is the short version of recursive.\n\n```python\nall_planets = [p for p in find(path.star.planets.rec.name, solar_system)]\nassert all_planets == ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\n```\nHere is another example that finds all the celestial bodies names.\n\n```python\nall_celestial_bodies = [p for p in find(path.rec.name, solar_system)]\nassert all_celestial_bodies == ['Sun', 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\n                                'Neptune']\n```\n## Filters\n\nFilters are use to add additional search criteria.\n\n### has filter\nThe **has** function is a filter that evaluates a branched off path relative to its parent path.  This example\nfinds all celestial bodies that have planets.\n\n```python\nsun = get(path.rec[has(path.planets)].name, solar_system)\nassert sun == \"Sun\"\n\n```\nThis search finds all celestial bodies that have a has-moons attribute.\n\n```python\nall_celestial_bodies_moon_attribute = [planet for planet in find(path.rec[has(pathd.has_moons)].name, solar_system)]\nassert all_celestial_bodies_moon_attribute == ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\n                                               'Neptune']\n\n```\nThis search finds all celestial bodies that have moons. Note the **operator.truth** is used to exclude planets\nthat don't have moons.\n\n```python\nall_celestial_bodies_moon_attribute = [planet for planet in\n                                       find(path.rec[has(pathd.has_moons, operator.truth)].name, solar_system)]\nassert all_celestial_bodies_moon_attribute == ['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n```\n### has filter comparison operators\nFilters can be specified with a comparison operator.\n\n```python\nearth = [planet for planet in find(path.rec[has(path.diameter == 12756)].name, solar_system)]\nassert earth == ['Earth']\n\nearth = [planet for planet in find(path.rec[has(path.diameter != 12756)].name, solar_system)]\nassert earth == ['Sun', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\nearth = [planet for planet in find(path.rec[has(path.diameter > 12756)].name, solar_system)]\nassert earth == ['Sun', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\nearth = [planet for planet in find(path.rec[has(path.diameter >= 12756)].name, solar_system)]\nassert earth == ['Sun', 'Earth', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\nearth = [planet for planet in find(path.rec[has(path.diameter < 12756)].name, solar_system)]\nassert earth == ['Mercury', 'Venus', 'Mars']\n\nearth = [planet for planet in find(path.rec[has(path.diameter <= 12756)].name, solar_system)]\nassert earth == ['Mercury', 'Venus', 'Earth', 'Mars']\n```\n### has filter type conversion\nSometimes the value is the wrong type for the comparison operator. In this example the attribute\n\"Number of Moons\" is str type.\n\n```python\nplanets = [planet for planet in find(path.rec[has(path[\"Number of Moons\"] > \"5\")].name, solar_system)]\nassert planets == ['Jupiter', 'Saturn']\n\n```\nThis is how to convert the type to an int before applying the comparison operator.\n\n```python\nplanets = [planet for planet in find(path.rec[has(path[\"Number of Moons\"] > 5, int)].name, solar_system)]\nassert planets == ['Jupiter', 'Saturn', 'Uranus', 'Neptune']\n```\n### has filter comparison operators as single argument functions\nA filter operator can be specified as a single argument function.  Here an example that searches for planets that\nhave the same diameter as earth.\n\n```python\nearths_diameter = partial(operator.eq, 12756)\nearth = [planet for planet in find(path.rec[has(path.diameter, earths_diameter)].name, solar_system)]\nassert earth == ['Earth']\n\n```\nAny single argument function can be used as an operator.  This example uses a Regular Expression to finds\nplanets that end with s.\n\n```python\nname_ends_with_s = re.compile(r\"\\w+s\").match\nearth = [planet for planet in find(path.rec[has(path.name, name_ends_with_s)].name, solar_system)]\nassert earth == ['Venus', 'Mars', 'Uranus']\n\n```\nThis example uses a closure to find planets that have the same diameter as earth.\n\n```python\ndef smaller_than_earth(value):\n    return value < 12756\n\nearth = [planet for planet in find(path.rec[has(path.diameter, smaller_than_earth)].name, solar_system)]\nassert earth == ['Mercury', 'Venus', 'Mars']\n```\n### logical and, or and not filters\n#### has_all\nA regular express to test if second letter in the value is an a.\n\n```python\nsecond_letter_is_a = re.compile(r\".a.*\").fullmatch\n\n```\nThe **has_all** function evaluates as the logical **and** operator.   It is equivalent to: (arg1 and arg2 and ...)\n\n```python\nfound = [planet for planet in find(\n    path.rec[has_all(path.diameter < 10000, (path.name, second_letter_is_a))].name,\n    solar_system)\n         ]\nassert found == ['Mars']\n\n```\n#### has_any\nThe **has_any** function evaluates as the logical **or** operator.   It is equivalent to: (arg1 and arg2 and ...)\n\n```python\nfound = [planet for planet in find(\n    path.rec[has_any(path.diameter < 10000, (path.name, second_letter_is_a))].name,\n    solar_system)\n         ]\nassert found == ['Mercury', 'Earth', 'Mars', 'Saturn']\n\n```\n#### has_not\nThe **has_not** function evaluates as the logical **not** operator.   It is equivalent to: (not arg)\nThis example find all the planets names not not equal to Earth.  Note the double nots.\n\n```python\nfound = [planet for planet in find(\n    path.rec[has_not(path.name != 'Earth')].name,\n    solar_system)\n         ]\nassert found == ['Earth']\n\n```\n#### Combining has, has_all, has_any, and has_not filters.\nEach of the **has** function can be passed as arguments to any of the other **has** function to construct complex\nboolean equation.  This example is equivalent to:\n(10000 > diameter  or diameter > 20000) and second_letter_is_a(name))\n\n```python\nfound = [planet for planet in find(\n    path.rec[has_all(has_any(path.diameter < 10000, path.diameter > 20000), (path.name, second_letter_is_a))].name,\n    solar_system)\n         ]\nassert found == ['Mars', 'Saturn']\n\n```\n#### has.these\nThe decorator **has.these** can be used to construct the boolean equations more explicitly.  This example shows\nto use python built in and, or and not operators.\n\n```python\n@has.these(path.diameter < 10000, path.diameter > 20000, (path.name, second_letter_is_a))\ndef predicate(parent_match: Match, small_diameter, large_diameter, name_second_letter_is_a):\n    return (small_diameter(parent_match) or large_diameter(parent_match)) and name_second_letter_is_a(parent_match)\n\nfound = [planet for planet in find(path.rec[predicate].name, solar_system)]\nassert found == ['Mars', 'Saturn']\n```\n### A custom filter.\nA predicate is a single argument function that returns anything. The argument is the current match.   The has\nfunction is a fancy predicate.\n\nThis example writes a custom predicate that find all of Earth's neighbours.\n\n```python\ndef my_neighbor_is_earth(match: Match):\n    i_am_planet = get_match(path.parent.parent.parent.planets, match, must_match=False)\n    if not i_am_planet:\n        return False\n\n    index_before_planet = match.data_name - 1\n    before_planet = get_match(path[index_before_planet][has(path.name == \"Earth\")], match.parent,\n                              must_match=False)\n    if before_planet:\n        return True\n\n    index_after_planet = match.data_name + 1\n    before_planet = get_match(path[index_after_planet][has(path.name == \"Earth\")], match.parent,\n                              must_match=False)\n    if before_planet:\n        return True\n\n    return False\n\nearth = [planet for planet in find(path.rec[my_neighbor_is_earth].name, solar_system)]\nassert earth == ['Venus', 'Mars']\n```\n# Class Descriptors\n### basic path descriptor\npaths can be added as properties to a class using the path_descriptor function.\n\n```python\nplanets = path.star.planets.wc[wc]\n\nclass SolarSystem(Document):\n    jupiter_name = attr(path.star.planets.outer[0].name)\n    saturn_name = attr(path.star.planets.outer[1].name)\n    big_planets = attr(planets[has(path.diameter > 25000)].name, getter=find)\n    small_planets = attr(planets[has(path.diameter <= 25000)].name, getter=find, to_wrapped_value=list)\n    number_of_planets = attr(planets, getter=find, to_wrapped_value=lambda itr: len(list(itr)))\n\n```\nThe property support both gets and sets and dels\n\n```python\nss = SolarSystem(solar_system)\nassert ss.jupiter_name == 'Jupiter'\nassert ss.saturn_name == 'Saturn'\n\n```\nRename Jupiter to Planet 5\n\n```python\nss.jupiter_name = 'Planet 5'\nassert ss.jupiter_name == 'Planet 5'\n\n```\nThe assignment operation alters the original document.\n\n```python\nassert solar_system[\"star\"][\"planets\"][\"outer\"][0][\"name\"] == 'Planet 5'\n\n```\nremove Jupiter's name\n\n```python\ndel ss.jupiter_name\nwith pytest.raises(MatchNotFoundError):\n    print(ss.jupiter_name)\nassert \"name\" not in solar_system[\"star\"][\"planets\"][\"outer\"][0]\n\n```\nThere are still 8 planets because only Jupiter's name was delete\n\n```python\nassert ss.number_of_planets == 8\n\n```\nlist all the big planets.  Remember Jupiter was deleted.\n\n```python\nbig_planets = [name for name in ss.big_planets]\nassert big_planets == ['Saturn', 'Uranus', 'Neptune']\n\n```\nlist all the small planets.\n\n```python\nassert ss.small_planets == ['Mercury', 'Venus', 'Earth', 'Mars']\n```\n### document typed path descriptor\nA descriptor support wrapping json types with an adaptor class. This example wraps the json that represents a\nplanet with the planet class.   The Planet class extends the Document class which provides the marshalling\nmethods.\n\n```python\nclass Planet(Document):\n    name = attr(path.name)\n\nclass SolarSystem(Document):\n    jupiter = attr_typed(Planet, path.star.planets.outer[0])\n    planets = attr_iter_typed(Planet, path.star.planets.wc[wc])\n    outer_planets = attr_list_typed(Planet, path.star.planets.outer)\n\n```\nThe getter returns the planet type\n\n```python\nss = SolarSystem(solar_system)\nplanet = ss.jupiter\nassert planet.name == 'Jupiter'\n\n```\nrename Jupiter to Planet 5\n\n```python\nplanet.name = 'Planet 5'\nassert planet.name == 'Planet 5'\n\n```\nThe assignment operation alters the original document.\n\n```python\nassert solar_system[\"star\"][\"planets\"][\"outer\"][0][\"name\"] == 'Planet 5'\n\n```\nJupiter can be renamed by replacing the planet with an imposter.\n\n```python\nimpostor_planet = Planet({})\nimpostor_planet.name = 'Imposter Jupiter'\nss.jupiter = impostor_planet\nassert ss.jupiter.name == 'Imposter Jupiter'\n\n```\nThe imposter planet also alters the original document.\n\n```python\nassert solar_system[\"star\"][\"planets\"][\"outer\"][0][\"name\"] == 'Imposter Jupiter'\n\n```\nAn attribute descriptor can return an iterator where each element is converted to the correct type.\n\n```python\nplanets = [planet.name for planet in ss.planets]\nassert planets == ['Mercury', 'Venus', 'Earth', 'Mars', 'Imposter Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\n```\nAn attribute descriptor can return an list where each element is converted to the correct type.\n\n```python\nassert ss.outer_planets[0].name == 'Imposter Jupiter'\n\n```\nThe list can be modified and the underline document is modified too.\n\n```python\njupiter = Planet({})\njupiter.name = 'Jupiter'\nss.outer_planets[0] = jupiter\nplanets = [planet.name for planet in ss.planets]\nassert planets == ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n```\n### custom typed path descriptor\nA descriptor support wrapping json types with an adaptor class. This example wraps the json that represents a\nplanet with the planet class.   This Planet class defines its own marshalling methods.\n\n```python\nclass Planet:\n    def __init__(self, name: str = None):\n        self._name = name\n\n    @property\n    def name(self) -> str:\n        return self._name\n\n    @name.setter\n    def name(self, name: str):\n        self._name = name\n\n    @staticmethod\n    def to_wrapped_value(json_: JsonArgTypes) -> Planet:\n        return Planet(json_[\"name\"])\n\n    @staticmethod\n    def to_json_value(planet_: Planet) -> JsonArgTypes:\n        return {\"name\": planet_.name}\n\nclass SolarSystem(Document):\n    jupiter = attr_typed(Planet, path.star.planets.outer[0],\n                         to_wrapped_value=Planet.to_wrapped_value,\n                         to_json_value=Planet.to_json_value)\n    planets = attr_iter_typed(Planet, path.star.planets.wc[wc],\n                              to_wrapped_value=Planet.to_wrapped_value)\n    outer_planets = attr_list_typed(Planet, path.star.planets.outer,\n                                    to_wrapped_value=Planet.to_wrapped_value,\n                                    to_json_value=Planet.to_json_value)\n\n```\nThe getter returns the planet type\n\n```python\nss = SolarSystem(solar_system)\nplanet = ss.jupiter\nassert planet.name == 'Jupiter'\n\n```\nrename Jupiter to Planet 5\n\n```python\nplanet.name = 'Planet 5'\nassert planet.name == 'Planet 5'\n\n```\nJupiter can be renamed by replacing the planet with an imposter.\n\n```python\nimpostor_planet = Planet()\nimpostor_planet.name = 'Imposter Jupiter'\nss.jupiter = impostor_planet\nassert ss.jupiter.name == 'Imposter Jupiter'\n\n```\nThe imposter planet also alters the original document.\n\n```python\nassert solar_system[\"star\"][\"planets\"][\"outer\"][0][\"name\"] == 'Imposter Jupiter'\n\n```\nAn attribute descriptor can return an iterator where each element is converted to the correct type.\n\n```python\nplanets = [planet.name for planet in ss.planets]\nassert planets == ['Mercury', 'Venus', 'Earth', 'Mars', 'Imposter Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\n```\nAn attribute descriptor can return an list where each element is converted to the correct type.\n\n```python\nassert ss.outer_planets[0].name == 'Imposter Jupiter'\n\n```\nThe list can be modified and the underline document is modified too.\n\n```python\njupiter = Planet()\njupiter.name = 'Jupiter'\nss.outer_planets[0] = jupiter\nplanets = [planet.name for planet in ss.planets]\nassert planets == ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/monkeydevtools/treepath-python",
    "keywords": "",
    "license": "\"Apache Software License\"",
    "maintainer": "",
    "maintainer_email": "",
    "name": "treepath",
    "package_url": "https://pypi.org/project/treepath/",
    "platform": "any",
    "project_url": "https://pypi.org/project/treepath/",
    "project_urls": {
      "Homepage": "https://github.com/monkeydevtools/treepath-python"
    },
    "release_url": "https://pypi.org/project/treepath/3.0.0/",
    "requires_dist": null,
    "requires_python": ">=3.7",
    "summary": "A python query language, similar to xpath and jsonpath, for extracting data from a json data structure.",
    "version": "3.0.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15828609,
  "releases": {
    "0.0.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eeacbfdc807af7f6cb1c19e751a32cf59ae051a8ad115a04f85f470493858a10",
          "md5": "7e8a2b7b7953f20cf3ccc353dc48b39e",
          "sha256": "23f2a7d2027b4fa6b80b3ee0f562e7da1e785094c79749a459168ffbe4b2b40a"
        },
        "downloads": -1,
        "filename": "treepath-0.0.0.dev0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e8a2b7b7953f20cf3ccc353dc48b39e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 22270,
        "upload_time": "2021-02-05T13:09:34",
        "upload_time_iso_8601": "2021-02-05T13:09:34.883931Z",
        "url": "https://files.pythonhosted.org/packages/ee/ac/bfdc807af7f6cb1c19e751a32cf59ae051a8ad115a04f85f470493858a10/treepath-0.0.0.dev0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "147def92b9f1222fe64734559607136b9895cbe6f9a3f426c961552e870c1210",
          "md5": "fe9d5c25215584e82c81a269e9673668",
          "sha256": "7aaf0d1d464718a1834b6c7fe9621233b5c3b4af73006ad8071ef0c65173591f"
        },
        "downloads": -1,
        "filename": "treepath-0.0.0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "fe9d5c25215584e82c81a269e9673668",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 12916,
        "upload_time": "2021-02-05T13:09:35",
        "upload_time_iso_8601": "2021-02-05T13:09:35.926324Z",
        "url": "https://files.pythonhosted.org/packages/14/7d/ef92b9f1222fe64734559607136b9895cbe6f9a3f426c961552e870c1210/treepath-0.0.0.dev0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5265bffe68d9f2f89d15c73b3a0726d210075b323cd6bbc6919eb9b7f39f1130",
          "md5": "a6845f6965725d6cfe2cb97678827750",
          "sha256": "0d932f823dae70610a2b943ee39729f7dc14924f3000382f216897382aa99e8a"
        },
        "downloads": -1,
        "filename": "treepath-0.0.0.dev1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6845f6965725d6cfe2cb97678827750",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.9",
        "size": 22116,
        "upload_time": "2021-02-07T21:06:20",
        "upload_time_iso_8601": "2021-02-07T21:06:20.029296Z",
        "url": "https://files.pythonhosted.org/packages/52/65/bffe68d9f2f89d15c73b3a0726d210075b323cd6bbc6919eb9b7f39f1130/treepath-0.0.0.dev1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9633550dbccc79b0849a843a205ac7eae0c8ad7fabc1c86e9a11fcfef13e8486",
          "md5": "ffa86b6ce98a1587ffd6a9b17db07468",
          "sha256": "b362dd63f9fb9fd35ac9cd510cb484860d4ab90446cb413dccc1b47572978864"
        },
        "downloads": -1,
        "filename": "treepath-0.0.0.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "ffa86b6ce98a1587ffd6a9b17db07468",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.9",
        "size": 12777,
        "upload_time": "2021-02-07T21:06:21",
        "upload_time_iso_8601": "2021-02-07T21:06:21.227188Z",
        "url": "https://files.pythonhosted.org/packages/96/33/550dbccc79b0849a843a205ac7eae0c8ad7fabc1c86e9a11fcfef13e8486/treepath-0.0.0.dev1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c1f04b466aba55ffc76d3cc5b0860a1cf6d03ba7396db47ffd5096a7c122383",
          "md5": "d82a65b8d472e1eb2d3b0e40d3624412",
          "sha256": "73c70225dc6fcb2c83595ffc9b598e9476ac87ab6629156ac2e26a0756d25bbd"
        },
        "downloads": -1,
        "filename": "treepath-0.0.0.dev2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d82a65b8d472e1eb2d3b0e40d3624412",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25612,
        "upload_time": "2021-02-28T23:21:26",
        "upload_time_iso_8601": "2021-02-28T23:21:26.717624Z",
        "url": "https://files.pythonhosted.org/packages/8c/1f/04b466aba55ffc76d3cc5b0860a1cf6d03ba7396db47ffd5096a7c122383/treepath-0.0.0.dev2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c1cb61c298214ac5ccbab0f73c32dc89b19d356b84983d17abf1c19a49fe68f9",
          "md5": "eec11326fe14993b6f0f71ef0d21222e",
          "sha256": "ede44f7bbc4db467cb0b0cea9e13d85f5de33bbe687aebad95f9680c74b5491c"
        },
        "downloads": -1,
        "filename": "treepath-0.0.0.dev2.tar.gz",
        "has_sig": false,
        "md5_digest": "eec11326fe14993b6f0f71ef0d21222e",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17586,
        "upload_time": "2021-02-28T23:21:28",
        "upload_time_iso_8601": "2021-02-28T23:21:28.205651Z",
        "url": "https://files.pythonhosted.org/packages/c1/cb/61c298214ac5ccbab0f73c32dc89b19d356b84983d17abf1c19a49fe68f9/treepath-0.0.0.dev2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6cef77833d2df0b3cece3cc3d1e279e619a0b83fe2c2ba143023ce77664d7ffa",
          "md5": "c6978131c68e034ed02eabfba5dd16c8",
          "sha256": "851f22ccc57f95b62aaa5f892809609605a0f56cca8391d61e88cc64beb86de1"
        },
        "downloads": -1,
        "filename": "treepath-0.0.0.dev3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6978131c68e034ed02eabfba5dd16c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 25575,
        "upload_time": "2021-02-28T23:32:02",
        "upload_time_iso_8601": "2021-02-28T23:32:02.457178Z",
        "url": "https://files.pythonhosted.org/packages/6c/ef/77833d2df0b3cece3cc3d1e279e619a0b83fe2c2ba143023ce77664d7ffa/treepath-0.0.0.dev3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2cc4c0da8f21cb735addda4d136357ac179c847d79a3ed823e2350972532b34d",
          "md5": "29f36a23b9f180f49d2e59250b676b06",
          "sha256": "8f9d41b1779d0441b82135757012e83c7f9cf310974d44769eeb563932a5ae6d"
        },
        "downloads": -1,
        "filename": "treepath-0.0.0.dev3.tar.gz",
        "has_sig": false,
        "md5_digest": "29f36a23b9f180f49d2e59250b676b06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 17482,
        "upload_time": "2021-02-28T23:32:03",
        "upload_time_iso_8601": "2021-02-28T23:32:03.907520Z",
        "url": "https://files.pythonhosted.org/packages/2c/c4/c0da8f21cb735addda4d136357ac179c847d79a3ed823e2350972532b34d/treepath-0.0.0.dev3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.0.dev4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff7a760bebd753c996cbf8193d45dc3d88b55eab2465f2220d8b9b97834fc3d1",
          "md5": "ca7dcdb6a057624ec55df71f392dc136",
          "sha256": "08285e7b5dc383bee2b7944ed4b7e1a92ec61cdb1993fc09f5743889211b2f90"
        },
        "downloads": -1,
        "filename": "treepath-0.0.0.dev4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca7dcdb6a057624ec55df71f392dc136",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 26902,
        "upload_time": "2021-03-05T03:36:39",
        "upload_time_iso_8601": "2021-03-05T03:36:39.039399Z",
        "url": "https://files.pythonhosted.org/packages/ff/7a/760bebd753c996cbf8193d45dc3d88b55eab2465f2220d8b9b97834fc3d1/treepath-0.0.0.dev4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "cc9f2733933652ff564a7d29c567b5b9b25444bba7d4c44d89b4a96d9e87b43e",
          "md5": "e2a34168a6623b7b2b9b97b3bf2e5412",
          "sha256": "085e047cdc44ae18d308461e132d719e95422967ec270afdb7f831952b70a752"
        },
        "downloads": -1,
        "filename": "treepath-0.0.0.dev4.tar.gz",
        "has_sig": false,
        "md5_digest": "e2a34168a6623b7b2b9b97b3bf2e5412",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 18422,
        "upload_time": "2021-03-05T03:36:40",
        "upload_time_iso_8601": "2021-03-05T03:36:40.376134Z",
        "url": "https://files.pythonhosted.org/packages/cc/9f/2733933652ff564a7d29c567b5b9b25444bba7d4c44d89b4a96d9e87b43e/treepath-0.0.0.dev4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "691327505579a20a0b125cbb5f2d38fa0f31416acdcffd95f35bd5741d48a07c",
          "md5": "66297de6faea1680ca9e479c705517b5",
          "sha256": "29c7020e7aa2f8683a5bc97ede1f05ada712c07a4ca0b53a3319d61112d4f219"
        },
        "downloads": -1,
        "filename": "treepath-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66297de6faea1680ca9e479c705517b5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31446,
        "upload_time": "2021-03-15T22:23:03",
        "upload_time_iso_8601": "2021-03-15T22:23:03.383294Z",
        "url": "https://files.pythonhosted.org/packages/69/13/27505579a20a0b125cbb5f2d38fa0f31416acdcffd95f35bd5741d48a07c/treepath-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "288fe58759fca7fd4a6a1be678e7f72ef5ca1a1f44a42c35eabd93db43c8620c",
          "md5": "e640f6961d99968fa2b75fe915bf7bce",
          "sha256": "764815f1999369eb017c2cae5045079814d0f9a6e65ef72747118c927ecf0468"
        },
        "downloads": -1,
        "filename": "treepath-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e640f6961d99968fa2b75fe915bf7bce",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23626,
        "upload_time": "2021-03-15T22:23:04",
        "upload_time_iso_8601": "2021-03-15T22:23:04.973235Z",
        "url": "https://files.pythonhosted.org/packages/28/8f/e58759fca7fd4a6a1be678e7f72ef5ca1a1f44a42c35eabd93db43c8620c/treepath-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e3f6d60989574c41a62bc75273dec67bbe724a1729043a4caeaa5ad50da6a063",
          "md5": "58faeee112298271db05fa6f39971383",
          "sha256": "8a6e436d86c352f64589d2f85e3d370d6a91c57d63960c77ed9933e5f8b1f0c2"
        },
        "downloads": -1,
        "filename": "treepath-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "58faeee112298271db05fa6f39971383",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 37185,
        "upload_time": "2021-04-19T17:52:07",
        "upload_time_iso_8601": "2021-04-19T17:52:07.823857Z",
        "url": "https://files.pythonhosted.org/packages/e3/f6/d60989574c41a62bc75273dec67bbe724a1729043a4caeaa5ad50da6a063/treepath-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "29bd4220c757a2a31bf7d3708dbc7aa573cdc06ee2ac63ca09b285395be2f8a5",
          "md5": "adddad9eaf0c0e17cd6c9853f065fbf0",
          "sha256": "8d62ce4b416a73cd8ab97bbd7bbf9ac1dac19c30ef42d614b9bf5ae77a491389"
        },
        "downloads": -1,
        "filename": "treepath-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "adddad9eaf0c0e17cd6c9853f065fbf0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 29180,
        "upload_time": "2021-04-19T17:52:10",
        "upload_time_iso_8601": "2021-04-19T17:52:10.222675Z",
        "url": "https://files.pythonhosted.org/packages/29/bd/4220c757a2a31bf7d3708dbc7aa573cdc06ee2ac63ca09b285395be2f8a5/treepath-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "adb31c313af4a698d8b52d83ef054ff83fdbb6cae1a58e098e5cdf3f51368ce6",
          "md5": "8594627a7b13152a842ef5ef33d776b4",
          "sha256": "18bdcac39dec10b97725089ce373b309b70bfba1da4357ecd1885f305561ced5"
        },
        "downloads": -1,
        "filename": "treepath-0.0.2rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8594627a7b13152a842ef5ef33d776b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 33459,
        "upload_time": "2021-03-30T02:10:04",
        "upload_time_iso_8601": "2021-03-30T02:10:04.470530Z",
        "url": "https://files.pythonhosted.org/packages/ad/b3/1c313af4a698d8b52d83ef054ff83fdbb6cae1a58e098e5cdf3f51368ce6/treepath-0.0.2rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffee78db226808a910214690fba56d06a259df2e4ec9a54ea08601a771bbb5b6",
          "md5": "da85d9ca8dbc6074add1effe840e3b06",
          "sha256": "4762d6ed7a5c49167ae8cc969abbd3eeb3363091358211b6d127eda52b97c05b"
        },
        "downloads": -1,
        "filename": "treepath-0.0.2rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "da85d9ca8dbc6074add1effe840e3b06",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 24204,
        "upload_time": "2021-03-30T02:10:05",
        "upload_time_iso_8601": "2021-03-30T02:10:05.943574Z",
        "url": "https://files.pythonhosted.org/packages/ff/ee/78db226808a910214690fba56d06a259df2e4ec9a54ea08601a771bbb5b6/treepath-0.0.2rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ea528a68852b788d9331e17014f068ab8e136e3dfa12d26e6a809df08600c31b",
          "md5": "0d0782674123bba9408589475ddfa06e",
          "sha256": "c91666245f7e482defd517c4e5297a9ce02e598feda7c8a838622b736cefc8c9"
        },
        "downloads": -1,
        "filename": "treepath-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0d0782674123bba9408589475ddfa06e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 40536,
        "upload_time": "2021-05-03T01:54:07",
        "upload_time_iso_8601": "2021-05-03T01:54:07.507694Z",
        "url": "https://files.pythonhosted.org/packages/ea/52/8a68852b788d9331e17014f068ab8e136e3dfa12d26e6a809df08600c31b/treepath-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "779bae9f286aaa0d759706b5f5f2f2b292f3e7485e9280c8dcfdfd51dce6a613",
          "md5": "074603753503af7074787c84c9b856ac",
          "sha256": "0db0df3982cd85f9abbb30b4f69f808dbbec4fd21fa43d2d1a4e7bf137b9c251"
        },
        "downloads": -1,
        "filename": "treepath-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "074603753503af7074787c84c9b856ac",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33194,
        "upload_time": "2021-05-03T01:54:09",
        "upload_time_iso_8601": "2021-05-03T01:54:09.069559Z",
        "url": "https://files.pythonhosted.org/packages/77/9b/ae9f286aaa0d759706b5f5f2f2b292f3e7485e9280c8dcfdfd51dce6a613/treepath-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4db0764376d4155fd7af3c4b3f820d980db4250855ebed3580809c14a4670a19",
          "md5": "49989bc2890748eb47c17d88e821303f",
          "sha256": "5270f95a947ead92b7efbc1b8dc7134b64c503d47ef489336005c0349f7671bb"
        },
        "downloads": -1,
        "filename": "treepath-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49989bc2890748eb47c17d88e821303f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 40673,
        "upload_time": "2021-05-21T01:51:42",
        "upload_time_iso_8601": "2021-05-21T01:51:42.886719Z",
        "url": "https://files.pythonhosted.org/packages/4d/b0/764376d4155fd7af3c4b3f820d980db4250855ebed3580809c14a4670a19/treepath-0.0.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1a4d66494a318349c305b432f6f1ea9c0c3de7fee350e85d395f8762b5b3b10f",
          "md5": "ee5334f42c5402c7b897668a4d045035",
          "sha256": "f6b1cbd1d42087674944938a9a985fdd586886ad97bb7f06e899b1e8521502ff"
        },
        "downloads": -1,
        "filename": "treepath-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ee5334f42c5402c7b897668a4d045035",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 33323,
        "upload_time": "2021-05-21T01:51:44",
        "upload_time_iso_8601": "2021-05-21T01:51:44.688968Z",
        "url": "https://files.pythonhosted.org/packages/1a/4d/66494a318349c305b432f6f1ea9c0c3de7fee350e85d395f8762b5b3b10f/treepath-0.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "56ad3f330ee4f17ae3064962a00ab0032162c3c6a5ab7728f021a9396f0bd76b",
          "md5": "89986389f883ae7c179c2dd19b6c123f",
          "sha256": "0c05b0feb724fd7284c4577c2071625a3ce591f6dd79d2afc4da0db1ce6217a8"
        },
        "downloads": -1,
        "filename": "treepath-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89986389f883ae7c179c2dd19b6c123f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 40998,
        "upload_time": "2021-08-09T14:39:45",
        "upload_time_iso_8601": "2021-08-09T14:39:45.620582Z",
        "url": "https://files.pythonhosted.org/packages/56/ad/3f330ee4f17ae3064962a00ab0032162c3c6a5ab7728f021a9396f0bd76b/treepath-0.0.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "32224e8b238ace338e8b117f6d94192c280b5162880e2b0f22f414f34f73c1f9",
          "md5": "97d45dec67dc9cb8fbd26a2ea0e392b3",
          "sha256": "d733bf3ccec6fdf9f6878c2af00ea059d0884484e1de6fbb48e605ffe9f0095d"
        },
        "downloads": -1,
        "filename": "treepath-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "97d45dec67dc9cb8fbd26a2ea0e392b3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30389,
        "upload_time": "2021-08-09T14:39:47",
        "upload_time_iso_8601": "2021-08-09T14:39:47.698827Z",
        "url": "https://files.pythonhosted.org/packages/32/22/4e8b238ace338e8b117f6d94192c280b5162880e2b0f22f414f34f73c1f9/treepath-0.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ab88f24f23366f96e245eb7300bac2c7fae2e604a3002171647c8a37c417333a",
          "md5": "245360082a5e1a001bc6af11b1e97b65",
          "sha256": "9cd7e3d587e2947359abde9d47ec054ee0d452d35261da175a4ba1470a738be9"
        },
        "downloads": -1,
        "filename": "treepath-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "245360082a5e1a001bc6af11b1e97b65",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 44058,
        "upload_time": "2021-09-23T02:56:37",
        "upload_time_iso_8601": "2021-09-23T02:56:37.901813Z",
        "url": "https://files.pythonhosted.org/packages/ab/88/f24f23366f96e245eb7300bac2c7fae2e604a3002171647c8a37c417333a/treepath-0.0.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ac517df260b777ea5473206cbaf9a1d0c9b4a883cef04ff896075edc37390e3c",
          "md5": "9dcb5482b770a492b09e869e09deb7d7",
          "sha256": "19b758e6d927f5d3e85b5638fef2453306510abfe67ebf4d8ab4b5222cb111cc"
        },
        "downloads": -1,
        "filename": "treepath-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "9dcb5482b770a492b09e869e09deb7d7",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 32650,
        "upload_time": "2021-09-23T02:56:40",
        "upload_time_iso_8601": "2021-09-23T02:56:40.022143Z",
        "url": "https://files.pythonhosted.org/packages/ac/51/7df260b777ea5473206cbaf9a1d0c9b4a883cef04ff896075edc37390e3c/treepath-0.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "bae84dbb228e50c69ed5e7ea1c58f2520862c3f26c412b035cb9030c9cc9ad81",
          "md5": "4bc1297f75a66e6249fde2fc69b091f7",
          "sha256": "70bdf5bc698eed8d66d4a5045e929e12994f22f021026b8e379e74575c987d46"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4bc1297f75a66e6249fde2fc69b091f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 39965,
        "upload_time": "2021-05-03T01:54:47",
        "upload_time_iso_8601": "2021-05-03T01:54:47.125014Z",
        "url": "https://files.pythonhosted.org/packages/ba/e8/4dbb228e50c69ed5e7ea1c58f2520862c3f26c412b035cb9030c9cc9ad81/treepath-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ae3ae2578a8f2bdf85db8e8ec66ea5d81fbb89e867c35b0a58f1e74f5f9fab71",
          "md5": "21fc0e20906a77d59d5b0fd2d66c16d3",
          "sha256": "940f727bcfea42df334a979b0f626923d2943c80523d21d393b1e219395a925f"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "21fc0e20906a77d59d5b0fd2d66c16d3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32197,
        "upload_time": "2021-05-03T01:54:48",
        "upload_time_iso_8601": "2021-05-03T01:54:48.737274Z",
        "url": "https://files.pythonhosted.org/packages/ae/3a/e2578a8f2bdf85db8e8ec66ea5d81fbb89e867c35b0a58f1e74f5f9fab71/treepath-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c2dd119fec02533e123d56f3dcd24921508b30c41ea9105e423e059e0660534",
          "md5": "bc4ebfb866f6705d972162cbdd6fabec",
          "sha256": "a7673ae48eed0c412b6654ccadbb7416bd9a0f63861a8309d7e25cc1be21815a"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0rc1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc4ebfb866f6705d972162cbdd6fabec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 29647,
        "upload_time": "2021-03-06T20:25:08",
        "upload_time_iso_8601": "2021-03-06T20:25:08.757446Z",
        "url": "https://files.pythonhosted.org/packages/8c/2d/d119fec02533e123d56f3dcd24921508b30c41ea9105e423e059e0660534/treepath-1.0.0rc1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f3e7c2cbec95a0f00d37657c36cef34981dde16333076f9868d1d8a047cef0e",
          "md5": "f74490f40d45ea86fcd9fdf88d37b292",
          "sha256": "d92ed0d4c949e01617e5494e56a3cfcbc40f6bed79a66448baac8647c738dcf4"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "f74490f40d45ea86fcd9fdf88d37b292",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 23654,
        "upload_time": "2021-03-06T20:25:10",
        "upload_time_iso_8601": "2021-03-06T20:25:10.976400Z",
        "url": "https://files.pythonhosted.org/packages/4f/3e/7c2cbec95a0f00d37657c36cef34981dde16333076f9868d1d8a047cef0e/treepath-1.0.0rc1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0rc12": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fdf36a63d7169c816d8491121dfda959b098aa2677a84b9a65f593ecaf1be268",
          "md5": "f55744ad22a8d541051e2b060f42f2ab",
          "sha256": "68fe0320d01da36f8252147eaba463443c8057c98620373a1c9456ca5817329a"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0rc12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f55744ad22a8d541051e2b060f42f2ab",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 39975,
        "upload_time": "2021-04-29T02:41:24",
        "upload_time_iso_8601": "2021-04-29T02:41:24.493122Z",
        "url": "https://files.pythonhosted.org/packages/fd/f3/6a63d7169c816d8491121dfda959b098aa2677a84b9a65f593ecaf1be268/treepath-1.0.0rc12-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1ea480f52c67a78582e6a782e5959da9da4bbc521da28dae013059c1beb2550c",
          "md5": "9e8b87f077a4a308aae600402d60c6c6",
          "sha256": "99f5478d55272abe27537cf4ba90477e8e902a41964c83481008eb9611e763ec"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0rc12.tar.gz",
        "has_sig": false,
        "md5_digest": "9e8b87f077a4a308aae600402d60c6c6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32095,
        "upload_time": "2021-04-29T02:41:25",
        "upload_time_iso_8601": "2021-04-29T02:41:25.899463Z",
        "url": "https://files.pythonhosted.org/packages/1e/a4/80f52c67a78582e6a782e5959da9da4bbc521da28dae013059c1beb2550c/treepath-1.0.0rc12.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0rc3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "061d2760fc07889eee0fadb50bbff0b9926d0edba06f63d7bccb67c7fdcdce24",
          "md5": "0c309243adf26c4314ac49772c289b17",
          "sha256": "64e220f52ebcc72df2362156845739b265701f0e612a394e35453af785260a95"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0rc3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0c309243adf26c4314ac49772c289b17",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 30565,
        "upload_time": "2021-03-10T04:31:50",
        "upload_time_iso_8601": "2021-03-10T04:31:50.364267Z",
        "url": "https://files.pythonhosted.org/packages/06/1d/2760fc07889eee0fadb50bbff0b9926d0edba06f63d7bccb67c7fdcdce24/treepath-1.0.0rc3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "190cd437a9b37fe03d8f0c482021ceed7a63395aeccded10003cd651aa262b4a",
          "md5": "96c7000fb04b23b8046705db07b2d0a6",
          "sha256": "91b4047fd766e0d9da0a2e4b1604afec708c67d78b32d030748467232e22235f"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0rc3.tar.gz",
        "has_sig": false,
        "md5_digest": "96c7000fb04b23b8046705db07b2d0a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24944,
        "upload_time": "2021-03-10T04:31:52",
        "upload_time_iso_8601": "2021-03-10T04:31:52.389786Z",
        "url": "https://files.pythonhosted.org/packages/19/0c/d437a9b37fe03d8f0c482021ceed7a63395aeccded10003cd651aa262b4a/treepath-1.0.0rc3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0rc4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4f51f3bfde4822e88e8279c8103d8cb8f149fb668dc66be71a87d48f09e05824",
          "md5": "1700facac593dc2c8fa132c6d9f7e7c0",
          "sha256": "2ba95c02a7e9f6d5a62486b00d55087c9b43bbaa441f6b23b73eba7b0d42ea68"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0rc4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1700facac593dc2c8fa132c6d9f7e7c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 31557,
        "upload_time": "2021-03-12T05:32:43",
        "upload_time_iso_8601": "2021-03-12T05:32:43.310786Z",
        "url": "https://files.pythonhosted.org/packages/4f/51/f3bfde4822e88e8279c8103d8cb8f149fb668dc66be71a87d48f09e05824/treepath-1.0.0rc4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "551f3ed46de540405c814511e66511e1983c244e2ca1b949e58c2c961f191ce4",
          "md5": "e4ec34f9bdd9ed601d4b5d0d0e0e2e7a",
          "sha256": "ecd16b671103dbbf0b06ee251447a7cb8c348646d70edad26e91e270a1d440dc"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0rc4.tar.gz",
        "has_sig": false,
        "md5_digest": "e4ec34f9bdd9ed601d4b5d0d0e0e2e7a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 25256,
        "upload_time": "2021-03-12T05:32:44",
        "upload_time_iso_8601": "2021-03-12T05:32:44.890402Z",
        "url": "https://files.pythonhosted.org/packages/55/1f/3ed46de540405c814511e66511e1983c244e2ca1b949e58c2c961f191ce4/treepath-1.0.0rc4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0rc5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "40bfa1e7e45723def661e44e28812866b9cf124a4284b3c8aabc714bd869b280",
          "md5": "7b217c74e979c34cf8fc8bcc28251060",
          "sha256": "9781d275a11ef872b7f66911b64ffb7203cc51e3faddf672a3aa42059f2b5af5"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0rc5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b217c74e979c34cf8fc8bcc28251060",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 31489,
        "upload_time": "2021-03-15T21:42:10",
        "upload_time_iso_8601": "2021-03-15T21:42:10.186012Z",
        "url": "https://files.pythonhosted.org/packages/40/bf/a1e7e45723def661e44e28812866b9cf124a4284b3c8aabc714bd869b280/treepath-1.0.0rc5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "218901ff737d5d6c43a24872e33f38400b1ef22e5df3c74446b6c28f0020ee84",
          "md5": "baeefa95e209206fe237a4d8eda64bd9",
          "sha256": "303c9a265f2e550efa1e91541920371d89dc9d4c911835beaf6974f421c338f4"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0rc5.tar.gz",
        "has_sig": false,
        "md5_digest": "baeefa95e209206fe237a4d8eda64bd9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 23630,
        "upload_time": "2021-03-15T21:42:12",
        "upload_time_iso_8601": "2021-03-15T21:42:12.353088Z",
        "url": "https://files.pythonhosted.org/packages/21/89/01ff737d5d6c43a24872e33f38400b1ef22e5df3c74446b6c28f0020ee84/treepath-1.0.0rc5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0rc6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "437e1a928bc29278e9a69b8447c20b5b515b34c4f35fc8121513b64fae57c1ac",
          "md5": "fa5fa78e1cf3b440f45b83f17c3db321",
          "sha256": "22c0f17f09b3240fb62e4ef6899889d4c1e9ab0a4a8ab1c791762f11fbcf321a"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0rc6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa5fa78e1cf3b440f45b83f17c3db321",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 33532,
        "upload_time": "2021-03-30T01:52:46",
        "upload_time_iso_8601": "2021-03-30T01:52:46.629694Z",
        "url": "https://files.pythonhosted.org/packages/43/7e/1a928bc29278e9a69b8447c20b5b515b34c4f35fc8121513b64fae57c1ac/treepath-1.0.0rc6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aacf3044f4e624f197b5deb0a9ce639b3b35b96573a35ef5b73d2d656aa72e3f",
          "md5": "64ff131c88a05936cf88859b0e7eddd6",
          "sha256": "da752c4ac7176ded1b68ab48de75f051c4de40884bf49aa08e5255cc7395598f"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0rc6.tar.gz",
        "has_sig": false,
        "md5_digest": "64ff131c88a05936cf88859b0e7eddd6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 24874,
        "upload_time": "2021-03-30T01:52:48",
        "upload_time_iso_8601": "2021-03-30T01:52:48.032554Z",
        "url": "https://files.pythonhosted.org/packages/aa/cf/3044f4e624f197b5deb0a9ce639b3b35b96573a35ef5b73d2d656aa72e3f/treepath-1.0.0rc6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0rc7": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0210bc870ccba120550f96fead268703999e93db5178a3b0a9fbef18bfbadd49",
          "md5": "e6bd932897e942b2bb1d7a7fb2f69590",
          "sha256": "6eb77a968f821d8e6b068fc63e0c5ffc635546928ec56a6fb1d95b3a424109be"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0rc7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6bd932897e942b2bb1d7a7fb2f69590",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 36651,
        "upload_time": "2021-04-19T17:42:56",
        "upload_time_iso_8601": "2021-04-19T17:42:56.281281Z",
        "url": "https://files.pythonhosted.org/packages/02/10/bc870ccba120550f96fead268703999e93db5178a3b0a9fbef18bfbadd49/treepath-1.0.0rc7-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "299a40301687ff1209093047ad8d9df20f1fdadad9a8d0a1736d888564575fbe",
          "md5": "8ed9b07d6bc28153ee7aac4abab7dd44",
          "sha256": "342b1b8dc8d557a9106605dacd271dbd982023cc2c2c27647dd324030cb5fbc9"
        },
        "downloads": -1,
        "filename": "treepath-1.0.0rc7.tar.gz",
        "has_sig": false,
        "md5_digest": "8ed9b07d6bc28153ee7aac4abab7dd44",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 28336,
        "upload_time": "2021-04-19T17:42:58",
        "upload_time_iso_8601": "2021-04-19T17:42:58.055777Z",
        "url": "https://files.pythonhosted.org/packages/29/9a/40301687ff1209093047ad8d9df20f1fdadad9a8d0a1736d888564575fbe/treepath-1.0.0rc7.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "fbaed12448da22a68a25b14d82e41d2ca173a6757b41757297ebd994db35cafc",
          "md5": "860e32f0d49a23d516e71811231d17da",
          "sha256": "5315eb0103f633fad027642cf6d413b564cfb3bdddbdaaa4c0fe93ebc43d9f40"
        },
        "downloads": -1,
        "filename": "treepath-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "860e32f0d49a23d516e71811231d17da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 40104,
        "upload_time": "2021-05-21T01:52:33",
        "upload_time_iso_8601": "2021-05-21T01:52:33.948604Z",
        "url": "https://files.pythonhosted.org/packages/fb/ae/d12448da22a68a25b14d82e41d2ca173a6757b41757297ebd994db35cafc/treepath-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "032a5b615ac5e9ec2696e14e27a4d5f62b56a0d7c52ffa5e85c10920b29de8a8",
          "md5": "af173d31ec9cbab58fe3237359bb4256",
          "sha256": "b40623cbd1dde897a88fc4891928a5cfe7431b6b49829785137e469b5ce2bdaa"
        },
        "downloads": -1,
        "filename": "treepath-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "af173d31ec9cbab58fe3237359bb4256",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 32309,
        "upload_time": "2021-05-21T01:52:35",
        "upload_time_iso_8601": "2021-05-21T01:52:35.520712Z",
        "url": "https://files.pythonhosted.org/packages/03/2a/5b615ac5e9ec2696e14e27a4d5f62b56a0d7c52ffa5e85c10920b29de8a8/treepath-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e7151c0f0ea5799ac5b81579e031b795f2215f4bef1e97cdeab96faaaee8a24",
          "md5": "1ff4ae6d10b67841151c44ba7e12f5e4",
          "sha256": "1528bf812716f89072b22a627ef39fec0a7203ec597861ee320d18aab01924f3"
        },
        "downloads": -1,
        "filename": "treepath-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ff4ae6d10b67841151c44ba7e12f5e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 40422,
        "upload_time": "2021-08-09T14:43:01",
        "upload_time_iso_8601": "2021-08-09T14:43:01.752955Z",
        "url": "https://files.pythonhosted.org/packages/5e/71/51c0f0ea5799ac5b81579e031b795f2215f4bef1e97cdeab96faaaee8a24/treepath-1.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "98c48977f7d99903ce788c05c90caa7a26664f0c52476b54269e3d6728815276",
          "md5": "226a441162f05103fa04ad7d74a1a76d",
          "sha256": "c727f1ea00acd9f56c35382348933064d755846819fc59a78a59fa2a5437010f"
        },
        "downloads": -1,
        "filename": "treepath-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "226a441162f05103fa04ad7d74a1a76d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 30934,
        "upload_time": "2021-08-09T14:43:03",
        "upload_time_iso_8601": "2021-08-09T14:43:03.134965Z",
        "url": "https://files.pythonhosted.org/packages/98/c4/8977f7d99903ce788c05c90caa7a26664f0c52476b54269e3d6728815276/treepath-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "abe1c9c09b62b67b35d2ccb217b2cc3847eb1dd07ad5d2ec4b197645f59d892e",
          "md5": "03d5695dc91ec4439da18127a1449f19",
          "sha256": "a7226fb1902bf75f285aa5602c440c461fdb8c6a2777c096f4074d20333c9289"
        },
        "downloads": -1,
        "filename": "treepath-1.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03d5695dc91ec4439da18127a1449f19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 43483,
        "upload_time": "2021-09-23T02:59:10",
        "upload_time_iso_8601": "2021-09-23T02:59:10.934054Z",
        "url": "https://files.pythonhosted.org/packages/ab/e1/c9c09b62b67b35d2ccb217b2cc3847eb1dd07ad5d2ec4b197645f59d892e/treepath-1.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e7e25210e808cccc0ec656c000c09378b5486dbb4e852afe5fee1d31e9a69ef5",
          "md5": "4e15cdd4b78a0af20e7220de23a7d8ca",
          "sha256": "9e7ad7fce939df663219bf453684bf22f481e6ae1922456605b9be7c18b8fc5d"
        },
        "downloads": -1,
        "filename": "treepath-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4e15cdd4b78a0af20e7220de23a7d8ca",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 33193,
        "upload_time": "2021-09-23T02:59:12",
        "upload_time_iso_8601": "2021-09-23T02:59:12.470818Z",
        "url": "https://files.pythonhosted.org/packages/e7/e2/5210e808cccc0ec656c000c09378b5486dbb4e852afe5fee1d31e9a69ef5/treepath-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4e2aac65d5661a93773f6d1a21cda78908d6ecf12c12f68c453debc50ed01dc2",
          "md5": "b8ebd240056d8046ca01e6d210e45d33",
          "sha256": "b8734e91563a7d6cc23eca9d6b6163f889fd051fd21b40f2764ebcd0161ae05d"
        },
        "downloads": -1,
        "filename": "treepath-2.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8ebd240056d8046ca01e6d210e45d33",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 53720,
        "upload_time": "2022-06-28T01:46:21",
        "upload_time_iso_8601": "2022-06-28T01:46:21.542395Z",
        "url": "https://files.pythonhosted.org/packages/4e/2a/ac65d5661a93773f6d1a21cda78908d6ecf12c12f68c453debc50ed01dc2/treepath-2.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "52e1a62230c3401d779d620cb00cf995afe4de9e823aea7521c9e4a2998740d9",
          "md5": "3fd49126ba9fb68a60bee28ea9641a99",
          "sha256": "40006167bd3ee45092ae3fc3cad7dfa15bf252088cfe52c502ed6a82c0ba6b93"
        },
        "downloads": -1,
        "filename": "treepath-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3fd49126ba9fb68a60bee28ea9641a99",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 45862,
        "upload_time": "2022-06-28T01:46:24",
        "upload_time_iso_8601": "2022-06-28T01:46:24.098839Z",
        "url": "https://files.pythonhosted.org/packages/52/e1/a62230c3401d779d620cb00cf995afe4de9e823aea7521c9e4a2998740d9/treepath-2.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5eb7d5a52c23e85aafb448bc6dc0d3821256a76608d970f506e6d11b5fa1a5a4",
          "md5": "ee6cb5b0a04109ebf8d37d2471ee8755",
          "sha256": "8ada5cb189b8c6fa641151b3e418f7fc9a1b97e2d6ae0811fb7507121160bedb"
        },
        "downloads": -1,
        "filename": "treepath-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee6cb5b0a04109ebf8d37d2471ee8755",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 53736,
        "upload_time": "2022-07-01T01:48:43",
        "upload_time_iso_8601": "2022-07-01T01:48:43.085585Z",
        "url": "https://files.pythonhosted.org/packages/5e/b7/d5a52c23e85aafb448bc6dc0d3821256a76608d970f506e6d11b5fa1a5a4/treepath-2.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "7e14b6c61ce5d46b0fff55fd703c9113f34128a62556d79963b34e4ffd5de379",
          "md5": "95bbf4d901f69b27993b5d6114a7f29d",
          "sha256": "5c5a33b54f76b71b271f96f89c09fa3bbc1f552d0949179b756bf50013e57bdf"
        },
        "downloads": -1,
        "filename": "treepath-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "95bbf4d901f69b27993b5d6114a7f29d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 45926,
        "upload_time": "2022-07-01T01:48:44",
        "upload_time_iso_8601": "2022-07-01T01:48:44.833676Z",
        "url": "https://files.pythonhosted.org/packages/7e/14/b6c61ce5d46b0fff55fd703c9113f34128a62556d79963b34e4ffd5de379/treepath-2.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ad889141ecb34e92c06f8e290968859cb21a2722d60b1f6e1fc89b05630c2470",
          "md5": "f5473fc5a949c0908e2e3db5438720b3",
          "sha256": "72b03fe0698f68217c5de574ad30ce0495e20eaccecdc38b26d884ee22745f95"
        },
        "downloads": -1,
        "filename": "treepath-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5473fc5a949c0908e2e3db5438720b3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 53741,
        "upload_time": "2022-10-29T23:59:39",
        "upload_time_iso_8601": "2022-10-29T23:59:39.298372Z",
        "url": "https://files.pythonhosted.org/packages/ad/88/9141ecb34e92c06f8e290968859cb21a2722d60b1f6e1fc89b05630c2470/treepath-2.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "b6d8e6c5af1381d5611b7e5f9eaafe8c423e8aa494386b8f7bdba51cd3c34374",
          "md5": "e50b333e4393689a96fa9af576a15bd2",
          "sha256": "985dea4e212e7b6a82986402ce1a9d9ab9a92cdfd28ef8c89ae68e2d785c648f"
        },
        "downloads": -1,
        "filename": "treepath-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e50b333e4393689a96fa9af576a15bd2",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 45914,
        "upload_time": "2022-10-29T23:59:41",
        "upload_time_iso_8601": "2022-10-29T23:59:41.314106Z",
        "url": "https://files.pythonhosted.org/packages/b6/d8/e6c5af1381d5611b7e5f9eaafe8c423e8aa494386b8f7bdba51cd3c34374/treepath-2.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5ac10f25c1c05643db1715fe344ff755261b3a279cdc90bc341c8d8fcd0deef8",
          "md5": "432d9ffdd777b5ebc2e79486be69b893",
          "sha256": "2548e2c270e6a54c792bdd4967f2fe2e5c678b0c1263522184b15ba806a466ac"
        },
        "downloads": -1,
        "filename": "treepath-2.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "432d9ffdd777b5ebc2e79486be69b893",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 53828,
        "upload_time": "2022-11-13T03:54:21",
        "upload_time_iso_8601": "2022-11-13T03:54:21.097203Z",
        "url": "https://files.pythonhosted.org/packages/5a/c1/0f25c1c05643db1715fe344ff755261b3a279cdc90bc341c8d8fcd0deef8/treepath-2.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f9b9f1d6a73f6795524b7e10dcab389d827a4124661dce717767159b4b9de8c4",
          "md5": "72de6f99a9cc4b5f57c4da43e9231fb6",
          "sha256": "6e9b3abb0a4d7d14a953b66a58b0d3a9e977550b2da045e9ba975c09d5de1053"
        },
        "downloads": -1,
        "filename": "treepath-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "72de6f99a9cc4b5f57c4da43e9231fb6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 45928,
        "upload_time": "2022-11-13T03:54:23",
        "upload_time_iso_8601": "2022-11-13T03:54:23.706891Z",
        "url": "https://files.pythonhosted.org/packages/f9/b9/f1d6a73f6795524b7e10dcab389d827a4124661dce717767159b4b9de8c4/treepath-2.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3ab41ffae0cf234c2f31e400330e1e5732e2bad665ddab55e28d756a119b5735",
          "md5": "b4e4f492dbd2125cc07e80273e2d3a8d",
          "sha256": "8d10da39911e5ffed7e480d95fa51b15a44fca19b9115f06498b69f519231fb8"
        },
        "downloads": -1,
        "filename": "treepath-3.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4e4f492dbd2125cc07e80273e2d3a8d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7",
        "size": 55042,
        "upload_time": "2022-11-20T03:07:22",
        "upload_time_iso_8601": "2022-11-20T03:07:22.885995Z",
        "url": "https://files.pythonhosted.org/packages/3a/b4/1ffae0cf234c2f31e400330e1e5732e2bad665ddab55e28d756a119b5735/treepath-3.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "989705ad5f6964fdf922ec714423060790ecf7887fc781ea2ea3df0ecc18f8c9",
          "md5": "72f6fa8e75a65cf1ac759dc5b64ccdb0",
          "sha256": "ab956958898d909ca273199fa43f6c96b9ac100b033dea4c937cdd965790b198"
        },
        "downloads": -1,
        "filename": "treepath-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "72f6fa8e75a65cf1ac759dc5b64ccdb0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7",
        "size": 46736,
        "upload_time": "2022-11-20T03:07:25",
        "upload_time_iso_8601": "2022-11-20T03:07:25.360482Z",
        "url": "https://files.pythonhosted.org/packages/98/97/05ad5f6964fdf922ec714423060790ecf7887fc781ea2ea3df0ecc18f8c9/treepath-3.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "3ab41ffae0cf234c2f31e400330e1e5732e2bad665ddab55e28d756a119b5735",
        "md5": "b4e4f492dbd2125cc07e80273e2d3a8d",
        "sha256": "8d10da39911e5ffed7e480d95fa51b15a44fca19b9115f06498b69f519231fb8"
      },
      "downloads": -1,
      "filename": "treepath-3.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b4e4f492dbd2125cc07e80273e2d3a8d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7",
      "size": 55042,
      "upload_time": "2022-11-20T03:07:22",
      "upload_time_iso_8601": "2022-11-20T03:07:22.885995Z",
      "url": "https://files.pythonhosted.org/packages/3a/b4/1ffae0cf234c2f31e400330e1e5732e2bad665ddab55e28d756a119b5735/treepath-3.0.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "989705ad5f6964fdf922ec714423060790ecf7887fc781ea2ea3df0ecc18f8c9",
        "md5": "72f6fa8e75a65cf1ac759dc5b64ccdb0",
        "sha256": "ab956958898d909ca273199fa43f6c96b9ac100b033dea4c937cdd965790b198"
      },
      "downloads": -1,
      "filename": "treepath-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "72f6fa8e75a65cf1ac759dc5b64ccdb0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7",
      "size": 46736,
      "upload_time": "2022-11-20T03:07:25",
      "upload_time_iso_8601": "2022-11-20T03:07:25.360482Z",
      "url": "https://files.pythonhosted.org/packages/98/97/05ad5f6964fdf922ec714423060790ecf7887fc781ea2ea3df0ecc18f8c9/treepath-3.0.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}