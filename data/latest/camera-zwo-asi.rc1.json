{
  "info": {
    "author": "Vincent Berenz",
    "author_email": "vberenz@tue.mpg.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# CAMERA-ZWO-ASI\n\npython wrapper over ZWO astronomical cameras\n\n## What is it\n\ncamera-zwo-asi is a python wrapper of the C++ SDK as provided by [ZWO](https://astronomy-imaging-camera.com/). It provides a python object oriented interface for interacting with ZWO astronomical cameras. \nThe version of SDK currently binded is 1.24.\nYou may find the original C++ SDK binaries and documentation [here](https://astronomy-imaging-camera.com/software-drivers).\n\n## Requirements\n\ncamera-zwo-asi has been tested only with :\n\n- python 3.10 on Ubuntu 20.04\n- python 3.9 on raspberry pi 3 (PI OS Lite 32-bit) \n\nbut is likely to work with other recent version of python3 / ubuntu / raspberry. Compilation on other linux based platforms is less likely to be successful. \n\n### Dependencies\n\nThe following APT dependencies are required:\n\n```bash\napt install -y libusb-1.0-0-dev libgl1-mesa-glx  libglib2.0-dev libopencv-dev python3-dev cmake ninja-build libusb-dev\n```\n\nFor raspberry, also install:\n\n```\napt install -y libatlas-base-dev\n```\n\n## Installation\n\n### from PyPI\n\n```bash\npip install camera-zwo-asi\n```\n\n### from source\n\n```bash\ngit clone https://github.com/MPI-IS/camera_zwo_asi.git\ncd camera_zwo_asi\npip install .\n```\n\n### allow your computer to reach your USB camera\n\nRun:\n\n```bash\nzwo-asi-udev\n```\n\nand follow the instruction printed on screen.\n\n### running unit-tests\n\nTests requires to have a usb camera plugged in.\nAfter installation from source:\n\n```\ncd camera_zwo_asi\npytest ./tests/test.py\n```\n\n## Command line usage\n\nThe following command line tools are provided:\n\n### Information about connected camera(s)\n\n```bash\n# will print information about connected cameras\nzwo-asi-print\n```\n\n### Dumping the current configuration of the camera\n\n```bash\n# will create in the current folder a file called 'zwo_asi.toml' which\n# contains the current configuration of the camera\nzwo-asi-dump\n```\n\n### Taking pictures\n\n```bash\n# Takes a picture and display it. If there is a file 'zwo-asi.toml' in the current\n# directory, configure first the camera using it.\nzwo-asi-shot\n\n# Same as above, but does not display the image.\nzwo-asi-shot -silent\n\n# Same as above, and also save the file to /tmp/img.bmp\n# For the list of supported file formats:\n# https://docs.opencv.org/2.4/modules/highgui/doc/reading_and_writing_images_and_video.html#imread\nzwo-asi-shot -silent --path /tmp/img.bmp\n\n# Same as above, but ignores the 'zwo-asi.toml' file that may be in the\n# current directory.\nzwo-asi-shot -silent -noconfig --path /tmp/img.bmp\n\n# Same as above, but uses the second camera (index 1).\n# Will work only if at least two cameras are connected.\nzwo-asi-shot -silent -noconfig --path /tmp/img.bmp --index 1\n\n# Getting info:\nzwo-asi-shot -h\n```\n\n### Taking pictures with the configuration of your choice\n\n``` bash\n# generate the file corresponding to the current camera's configuration\nzwo-asi-dump\n\n#\n# edit zwo_asi.toml to your liking. \n#\n\n# take a picture with your desired configuration\nzwo-asi-shot\n```\n\nWhen setting up the configuration (by editing ```zwo_asi.toml```), some controllable supports 'auto mode' and some are not writable. When calling ```zwo-asi-print```, you may see which ones, by looking at the column 'auto-mode' and 'writable'. For example:\n\n```\n(asi sdk: 1, 24, 0, 0)\nZWO ASI294MC Pro (id: 0)\nmax heigth: (2822) | max width: (4144) |\ncolored: * | mechanical shuttger: - | st4 port: - | \nhas cooler: * | is usb3 host: * | is usb3: * | \nis triggered camera: - | bayer pattern: RG\nsupported bins: 1 2 3 4 \nsupported image types: raw8 rgb24 raw16 y8 \npixel size (um): 4.63 | elec per ADU: 0.399 | bit depth: 14\n\n|controllable               |value   |min value |max value    |auto-mode  |in auto-mode  |writable\n--\n|AutoExpMaxExpMS            |30000   |1         |60000        |           |              |*\n|AutoExpMaxGain             |285     |0         |570          |           |              |*\n|AutoExpTargetBrightness    |100     |50        |160          |           |              |*\n|BandWidth                  |80      |40        |100          |*          |*             |*\n|CoolPowerPerc              |0       |0         |100          |           |              | \n|CoolerOn                   |0       |0         |1            |           |              |*\n|Exposure                   |10000   |32        |2000000000   |*          |              |*\n|Flip                       |0       |0         |3            |           |              |*\n|Gain                       |200     |0         |570          |*          |              |*\n|HighSpeedMode              |0       |0         |1            |           |              |*\n|MonoBin                    |0       |0         |1            |           |              |*\n|Offset                     |8       |0         |80           |           |              |*\n|TargetTemp                 |0       |-40       |30           |           |              |*\n|Temperature                |0       |-500      |1000         |           |              | \n|WB_B                       |95      |1         |99           |*          |              |*\n|WB_R                       |52      |1         |99           |*          |              |*\n```\n\n```BandWidth``` supports auto-mode and is currently in auto-mode, ```Exposure``` supports auto-mode\nbut is not currently in auto-mode. Temperature is not writable.\n\nTo set in ```zwo_asi.toml``` a controllable in auto mode, use the string \"auto\". For example, this sets BandWidth to auto-mode:\n\n```\n[controllables]\nAutoExpMaxExpMS = 30000\nAutoExpMaxGain = 285\nAutoExpTargetBrightness = 100\nBandWidth = \"auto\"\nCoolerOn = 0\nExposure = 10000\nFlip = 0\nGain = 200\nHighSpeedMode = 0\nMonoBin = 0\nOffset = 8\nTargetTemp = 0\nWB_B = 95\nWB_R = 52\n```\n\nThere are also a few rules that has to be respected when setting the values of the ROI (Region Of Interest):\n\n- the width and height are positive, and below the max allowed values\n- the width must be a multiple of 8\n- the height must be a multiple of 2\n- binned sensor width and height must be respected\n       (i.e. start_x + width < max_width / number bins; and\n        start_y + height < max_height / number_bins)\n\nFor example, this respects these rules:\n\n```\n[roi]\nstart_x = 0\nstart_y = 0\nwidth = 4144\nheight = 2822\nbins = 1\ntype = \"raw8\"\n```\n\n*note:*\n\nwhen the camera closes, it restores its configuration. Therefore calling ```zwo-asi-print``` after taking a picture with ```zwo-asi-shot``` may not display the configuration that was used to take the picture. \n\n## API usage\n\n```python\nfrom pathlib import Path\nimport camera_zwo_asi\n\n# connecting to the camera\n# at index 0\ncamera = camera_zwo_asi.Camera(0)\n\n# printing information in the\n# terminal\nprint(camera)\n\n# changing some controllables\n# (supported arguments: the one that are\n# indicated as 'writable' in the information\n# printed above)\ncamera.set_control(\"Gain\",300)\ncamera.set_control(\"Exposure\",\"auto\")\n\n# changing the ROI (region of interest)\nroi = camera.get_roi()\nroi.type = camera_zwo_asi.ImageType.rgb24\nroi.start_x = 20\nroi.start_y = 20\nroi.bins = 2\nroi.width = 480\nroi.height = 340\ncamera.set_roi(roi)\n\n# saving this updated configuration to a file\nconf_path = Path(\"/tmp\") / \"asi.toml\"\ncamera.to_toml(conf_path)\n\n# taking the picture\nfilepath = Path(\"/tmp\") / \"asi.bmp\"\nshow = True\n# filepath and show are optional, if you do not\n# want to save the image or display it\nimage = camera.capture(filepath=filepath,show=show)\n\n# getting a flat numpy array with the image data\nimage.get_data()\n\n# getting a shaped numpy array with image data\nimage.get_image()\n\n# showing the image\nimage.display(resize=0.25)\n\n# saving the image (once more, for demo)\nimage.save(filepath)\n\n# configuring the camera using a configuration file\ncamera.configure_from_toml(conf_path)\n\n# taking a picture, overwriting the previous image\ncamera.capture(image=image)\nimage.display(resize=1.5)\n```\n\n## Other project\n\n[python-zwoasi](https://github.com/python-zwoasi/python-zwoasi) is another python wrapper for ZWO cameras.\n\n## Author and copyright\n\nVincent Berenz, Max Planck Institute for Intelligent Systems, Empirical Inference Department\n\nCopyright 2022 Max Planck Gesellschaft",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/MPI-IS/camera_zwo_asi",
    "keywords": "",
    "license": "BSD 3-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "camera-zwo-asi",
    "package_url": "https://pypi.org/project/camera-zwo-asi/",
    "platform": "linux",
    "project_url": "https://pypi.org/project/camera-zwo-asi/",
    "project_urls": {
      "Homepage": "https://github.com/MPI-IS/camera_zwo_asi"
    },
    "release_url": "https://pypi.org/project/camera-zwo-asi/1.0.4/",
    "requires_dist": null,
    "requires_python": ">=3.6",
    "summary": "python wrapper for ZWO astronomical cameras",
    "version": "1.0.4",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15256834,
  "releases": {
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2007d941379c674fff90452ffcb60ce5d336c07b6471fc998599b92bb74d8e71",
          "md5": "9f1a12263ab420da592bcedf4271b4c9",
          "sha256": "1fff33260244f5cbb640ba6f03d2bd5010b682734b48c6482d598c52c66907a2"
        },
        "downloads": -1,
        "filename": "camera_zwo_asi-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9f1a12263ab420da592bcedf4271b4c9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 2806104,
        "upload_time": "2022-09-29T15:10:38",
        "upload_time_iso_8601": "2022-09-29T15:10:38.208237Z",
        "url": "https://files.pythonhosted.org/packages/20/07/d941379c674fff90452ffcb60ce5d336c07b6471fc998599b92bb74d8e71/camera_zwo_asi-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "2007d941379c674fff90452ffcb60ce5d336c07b6471fc998599b92bb74d8e71",
        "md5": "9f1a12263ab420da592bcedf4271b4c9",
        "sha256": "1fff33260244f5cbb640ba6f03d2bd5010b682734b48c6482d598c52c66907a2"
      },
      "downloads": -1,
      "filename": "camera_zwo_asi-1.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "9f1a12263ab420da592bcedf4271b4c9",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 2806104,
      "upload_time": "2022-09-29T15:10:38",
      "upload_time_iso_8601": "2022-09-29T15:10:38.208237Z",
      "url": "https://files.pythonhosted.org/packages/20/07/d941379c674fff90452ffcb60ce5d336c07b6471fc998599b92bb74d8e71/camera_zwo_asi-1.0.4.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}