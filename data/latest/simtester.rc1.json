{
  "info": {
    "author": "shuyu guo",
    "author_email": "guoshuyu225@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Human Machine Interfaces"
    ],
    "description": "# Simtester\n\n[comment]: <> ([![Pypi Latest Version]&#40;https://img.shields.io/pypi/v/crslab&#41;]&#40;https://pypi.org/project/crslab&#41;)\n\n[comment]: <> ([![Release]&#40;https://img.shields.io/github/v/release/rucaibox/crslab.svg&#41;]&#40;https://github.com/rucaibox/crslab/releases&#41;)\n[![License](https://img.shields.io/badge/License-MIT-blue.svg)](./LICENSE)\n[![arXiv](https://img.shields.io/badge/arXiv-Simtester-%23B21B1B)](https://arxiv.org/abs/2204.00763)\n\n[comment]: <> ([![Documentation Status]&#40;https://readthedocs.org/projects/crslab/badge/?version=latest&#41;]&#40;https://crslab.readthedocs.io/en/latest/?badge=latest&#41;)\n\n[comment]: <> (| [Docs]&#40;https://crslab.readthedocs.io/en/latest/?badge=latest&#41;)\n\n[comment]: <> (| [中文版]&#40;./README_CN.md&#41;)\n\n**Simtester** is an open-source toolkit for evaluating user simulator of task-oriented dialogue system(TOD). It is\ndeveloped based on Python and PyTorch. You can easily construct agents(system variants) with Simtester using either your\nown implemented model or our trained model and construct tester with different combinations of agents. In tester-based\nevaluation, the user simulator you implemented interacts with agents in the tester, ranks them, and tester calculates\nthe Exact Distinct score of the user simulator. [[paper]](https://arxiv.org/pdf/2204.00763.pdf)\n\n![Simtester](resource/fig/tester.png)\n\n- [Installation](#Installation)\n- [Quick-Start](#Quick-Start)\n- [Contributions](#Contributions)\n- [Citing](#Citing)\n- [Team](#Team)\n- [License](#License)\n\n[comment]: <> (## Updates)\n\n[comment]: <> (2022.10.28:)\n\n[comment]: <> (-Add )\n\n## Installation\n\nSimtester works with the following operating systems：\n\n- Linux\n- Windows 10\n- macOS X\n\nSimtester requires Python version 3.6 or later.\n\n[comment]: <> (Simtester requires torch version 1.4.0 or later. If you want to use CRSLab with GPU, please ensure that CUDA or CUDAToolkit version is 9.2 or later. Please use the combinations shown in this [Link]&#40;https://pytorch-geometric.com/whl/&#41; to ensure the normal operation of PyTorch Geometric.)\n\n[comment]: <> (You can install from pip:)\n\n[comment]: <> (```bash)\n\n[comment]: <> (pip install crslab)\n\n[comment]: <> (```)\n\nYou can install Simtester from source:\n\n```bash\ngit clone https://github.com/Superbooming/simtester && cd simtester\npip install -e .\n```\n\nWe will upload Simtester to pypi soon.\n\n## Quick-Start\n\nWhen you construct a agent using your own implemented model, you should fill your model instance `your_model`\nand your model interact function `your_model_interact_fn` which input the dialogue context and output the response.\n\nWhen you construct a agent using own trained model, you should download model first(link in [Models](#Models)). You\nshould fill the model name and the responding model directory which store the model you download and the remaining\nconfiguration will be loaded according to default config file(in `simtester/config/multiwoz/`). Or you can fill your own\nconfig file(.yaml format) path and the config file should include the model name and the responding model directory.See\nthe config file example in `simtester/config/multiwoz/soloist-base.yaml`.\n\n```bash\n# construct a agent using your own implemented model \nfrom simtester import Agent\nagent = Agent(your_model, your_model_interact_fn)\n\n# construct a gent using our trained model\nfrom simtester import MultiWOZAgent\nagent = MultiWOZAgent('soloist-base', 'model/soloist-base') # fill model name and model directory\nagent = MultiWOZAgent(config='simtester/config/multiwoz.soloist-base.yaml') # fill config path\n\n# interact with agent and get the response\nresopnse = agent.interact('I want to book a resturant in the center of city.')\n\n# get dialogue context and start a new dialogue\nagent.get_context()\nagent.start_dialogue()\n```\n\nWhen you construct a tester using your own agents, you should fill your agent list which includes your own agent\ninstance and the ground truth agent rank where a smaller number indicates a higher rank. If rank is not filled, the\nnumber is default to incremented.\n\nWhen you construct a agent with strategy we provided, you can just fill the strategy name.\n\nWhen you interact with tester, you can either input the utterance list, or the rank your simulator predicts. If the\nutterance list is input, tester will return the response list which includes response responding to each agent and the\ndialogue state list which indicates whether each agent ends the dialog. You can set the end_token of tester and when the\nagent receives response which includes the end_token, the agent's dialogue will be ended. If the rank your simulator\npredicts is input, tester will compare the ground truth rank with input rank and return the result. Notice that the\ninput of the rank represents the end of the dialogue for all agents, and a new round of dialogue will start.\n\n```bash\nfrom simtester import Tester\n\n# construct tester with your own agents\ntester = Tester([agentA, agentB, agentC], [2, 1, 3])\n\n# construct tester with strategy we provided\ntester = Tester('context-tester')\n\n# interact with tester\ntester.interact(['I want to book a resturant.', \n                 'I want to book a hotel.', \n                 'I want to find a attraction.'])\ntester.interact(rank=[2, 3, 1])\n\n# get current tester information and exact distinct score\ntester.get_info()\ntester.get_score()\n\n# reset tester\ntester.reset()\n```\n\n[comment]: <> (## Models)\n\n[comment]: <> (In CRSLab, we unify the task description of conversational recommendation into three sub-tasks, namely recommendation &#40;)\n\n[comment]: <> (recommend user-preferred items&#41;, conversation &#40;generate proper responses&#41; and policy &#40;select proper interactive action&#41;.)\n\n[comment]: <> (The recommendation and conversation sub-tasks are the core of a CRS and have been studied in most of works. The policy)\n\n[comment]: <> (sub-task is needed by recent works, by which the CRS can interact with users through purposeful strategy. As the first)\n\n[comment]: <> (release version, we have implemented 18 models in the four categories of CRS model, Recommendation model, Conversation)\n\n[comment]: <> (model and Policy model.)\n\n[comment]: <> (|       Category       |                            Model                             |      Graph Neural Network?      |       Pre-training Model?       |)\n\n[comment]: <> (| :------------------: | :----------------------------------------------------------: | :-----------------------------: | :-----------------------------: |)\n\n[comment]: <> (|      CRS Model       | [ReDial]&#40;https://arxiv.org/abs/1812.07617&#41;<br/>[KBRD]&#40;https://arxiv.org/abs/1908.05391&#41;<br/>[KGSF]&#40;https://arxiv.org/abs/2007.04032&#41;<br/>[TG-ReDial]&#40;https://arxiv.org/abs/2010.04125&#41;<br/>[INSPIRED]&#40;https://www.aclweb.org/anthology/2020.emnlp-main.654.pdf&#41; |       ×<br/>√<br/>√<br/>×<br/>×       |       ×<br/>×<br/>×<br/>√<br/>√       |)\n\n[comment]: <> (| Recommendation model | Popularity<br/>[GRU4Rec]&#40;https://arxiv.org/abs/1511.06939&#41;<br/>[SASRec]&#40;https://arxiv.org/abs/1808.09781&#41;<br/>[TextCNN]&#40;https://arxiv.org/abs/1408.5882&#41;<br/>[R-GCN]&#40;https://arxiv.org/abs/1703.06103&#41;<br/>[BERT]&#40;https://arxiv.org/abs/1810.04805&#41; | ×<br/>×<br/>×<br/>×<br/>√<br/>× | ×<br/>×<br/>×<br/>×<br/>×<br/>√ |)\n\n[comment]: <> (|  Conversation model  | [HERD]&#40;https://arxiv.org/abs/1507.04808&#41;<br/>[Transformer]&#40;https://arxiv.org/abs/1706.03762&#41;<br/>[GPT-2]&#40;http://www.persagen.com/files/misc/radford2019language.pdf&#41; |          ×<br/>×<br/>×          |          ×<br/>×<br/>√          |)\n\n[comment]: <> (|     Policy model     | PMI<br/>[MGCG]&#40;https://arxiv.org/abs/2005.03954&#41;<br/>[Conv-BERT]&#40;https://arxiv.org/abs/2010.04125&#41;<br/>[Topic-BERT]&#40;https://arxiv.org/abs/2010.04125&#41;<br/>[Profile-BERT]&#40;https://arxiv.org/abs/2010.04125&#41; |    ×<br/>×<br/>×<br/>×<br/>×    |    ×<br/>×<br/>√<br/>√<br/>√    |)\n\n[comment]: <> (Among them, the four CRS models integrate the recommendation model and the conversation model to improve each other,)\n\n[comment]: <> (while others only specify an individual task.)\n\n[comment]: <> (For Recommendation model and Conversation model, we have respectively implemented the following commonly-used automatic)\n\n[comment]: <> (evaluation metrics:)\n\n[comment]: <> (|        Category        |                           Metrics                            |)\n\n[comment]: <> (| :--------------------: | :----------------------------------------------------------: |)\n\n[comment]: <> (| Recommendation Metrics |      Hit@{1, 10, 50}, MRR@{1, 10, 50}, NDCG@{1, 10, 50}      |)\n\n[comment]: <> (|  Conversation Metrics  | PPL, BLEU-{1, 2, 3, 4}, Embedding Average/Extreme/Greedy, Distinct-{1, 2, 3, 4} |)\n\n[comment]: <> (|     Policy Metrics     |        Accuracy, Hit@{1,3,5}           |)\n\n[comment]: <> (## Datasets)\n\n[comment]: <> (We have collected and preprocessed 6 commonly-used human-annotated datasets, and each dataset was matched with proper)\n\n[comment]: <> (KGs as shown below:)\n\n[comment]: <> (|                           Dataset                            | Dialogs | Utterances |   Domains    | Task Definition | Entity KG  |  Word KG   |)\n\n[comment]: <> (| :----------------------------------------------------------: | :-----: | :--------: | :----------: | :-------------: | :--------: | :--------: |)\n\n[comment]: <> (|       [ReDial]&#40;https://redialdata.github.io/website/&#41;        | 10,006  |  182,150   |    Movie     |       --        |  DBpedia   | ConceptNet |)\n\n[comment]: <> (|      [TG-ReDial]&#40;https://github.com/RUCAIBox/TG-ReDial&#41;      | 10,000  |  129,392   |    Movie     |   Topic Guide   | CN-DBpedia |   HowNet   |)\n\n[comment]: <> (|        [GoRecDial]&#40;https://arxiv.org/abs/1909.03922&#41;         |  9,125  |  170,904   |    Movie     |  Action Choice  |  DBpedia   | ConceptNet |)\n\n[comment]: <> (|        [DuRecDial]&#40;https://arxiv.org/abs/2005.03954&#41;         | 10,200  |  156,000   | Movie, Music |    Goal Plan    | CN-DBpedia |   HowNet   |)\n\n[comment]: <> (|      [INSPIRED]&#40;https://github.com/sweetpeach/Inspired&#41;      |  1,001  |   35,811   |    Movie     | Social Strategy |  DBpedia   | ConceptNet |)\n\n[comment]: <> (| [OpenDialKG]&#40;https://github.com/facebookresearch/opendialkg&#41; | 13,802  |   91,209   | Movie, Book  |  Path Generate  |  DBpedia   | ConceptNet |)\n\n[comment]: <> (## Performance)\n\n[comment]: <> (We have trained and test the integrated models on the TG-Redial dataset, which is split into training, validation and)\n\n[comment]: <> (test sets using a ratio of 8:1:1. For each conversation, we start from the first utterance, and generate reply)\n\n[comment]: <> (utterances or recommendations in turn by our model. We perform the evaluation on the three sub-tasks.)\n\n[comment]: <> (### Recommendation Task)\n\n[comment]: <> (|   Model   |    Hit@1    |   Hit@10   |   Hit@50   |    MRR@1    |   MRR@10   |   MRR@50   |   NDCG@1    |  NDCG@10   |  NDCG@50   |)\n\n[comment]: <> (| :-------: | :---------: | :--------: | :--------: | :---------: | :--------: | :--------: | :---------: | :--------: | :--------: |)\n\n[comment]: <> (|  SASRec   |  0.000446   |  0.00134   |   0.0160   |   0.000446  |  0.000576  |  0.00114   |  0.000445   |  0.00075   |  0.00380   |)\n\n[comment]: <> (|  TextCNN  |   0.00267   |   0.0103   |   0.0236   |   0.00267   |  0.00434   |  0.00493   |   0.00267   |  0.00570   |  0.00860   |)\n\n[comment]: <> (|   BERT    |   0.00722   |  0.00490   |   0.0281   |   0.00722   |   0.0106   |   0.0124   |   0.00490   |   0.0147   |   0.0239   |)\n\n[comment]: <> (|   KBRD    |   0.00401   |   0.0254   |   0.0588   |   0.00401   |  0.00891   |   0.0103   |   0.00401   |   0.0127   |   0.0198   |)\n\n[comment]: <> (|   KGSF    |   0.00535   | **0.0285** | **0.0771** |   0.00535   |   0.0114   | **0.0135** |   0.00535   | **)\n\n[comment]: <> (0.0154** | **0.0259** |)\n\n[comment]: <> (| TG-ReDial | **0.00793** |   0.0251   |   0.0524   | **0.00793** | **0.0122** |   0.0134   | **)\n\n[comment]: <> (0.00793** |   0.0152   |   0.0211   |)\n\n[comment]: <> (### Conversation Task)\n\n[comment]: <> (|    Model    |  BLEU@1   |  BLEU@2   |   BLEU@3   |   BLEU@4   |  Dist@1  |  Dist@2  |  Dist@3  |  Dist@4  |  Average  |  Extreme  |  Greedy   |   PPL    |)\n\n[comment]: <> (| :---------: | :-------: | :-------: | :--------: | :--------: | :------: | :------: | :------: | :------: | :-------: | :-------: | :-------: | :------: |)\n\n[comment]: <> (|    HERD     |   0.120   |  0.0141   |  0.00136   |  0.000350  |  0.181   |  0.369   |  0.847   |   1.30   |   0.697   |   0.382   |   0.639   |   472    |)\n\n[comment]: <> (| Transformer |   0.266   |  0.0440   |   0.0145   |  0.00651   |  0.324   |  0.837   |   2.02   |   3.06   |   0.879   |   0.438   |   0.680   |   30.9   |)\n\n[comment]: <> (|    GPT2     |  0.0858   |  0.0119   |  0.00377   |   0.0110   | **2.35** | **4.62** | **8.84** | **)\n\n[comment]: <> (12.5** |   0.763   |   0.297   |   0.583   |   9.26   |)\n\n[comment]: <> (|    KBRD     |   0.267   |  0.0458   |   0.0134   |  0.00579   |  0.469   |   1.50   |   3.40   |   4.90   |   0.863   |   0.398   |   0.710   |   52.5   |)\n\n[comment]: <> (|    KGSF     | **0.383** | **0.115** | **0.0444** | **0.0200** |  0.340   |  0.910   |   3.50   |   6.20   | **)\n\n[comment]: <> (0.888** | **0.477** | **0.767** |   50.1   |)\n\n[comment]: <> (|  TG-ReDial  |   0.125   |  0.0204   |  0.00354   |  0.000803  |  0.881   |   1.75   |   7.00   |   12.0   |   0.810   |   0.332   |   0.598   | **)\n\n[comment]: <> (7.41** |)\n\n[comment]: <> (### Policy Task)\n\n[comment]: <> (|   Model    |   Hit@1   |  Hit@10   |  Hit@50   |   MRR@1   |  MRR@10   |  MRR@50   |  NDCG@1   |  NDCG@10  |  NDCG@50  |)\n\n[comment]: <> (| :--------: | :-------: | :-------: | :-------: | :-------: | :-------: | :-------: | :-------: | :-------: | :-------: |)\n\n[comment]: <> (|    MGCG    |   0.591   |   0.818   |   0.883   |   0.591   |   0.680   |   0.683   |   0.591   |   0.712   |   0.729   |)\n\n[comment]: <> (| Conv-BERT  |   0.597   |   0.814   |   0.881   |   0.597   |   0.684   |   0.687   |   0.597   |   0.716   |   0.731   |)\n\n[comment]: <> (| Topic-BERT |   0.598   |   0.828   |   0.885   |   0.598   |   0.690   |   0.693   |   0.598   |   0.724   |   0.737   |)\n\n[comment]: <> (| TG-ReDial  | **0.600** | **0.830** | **0.893** | **0.600** | **0.693** | **0.696** | **0.600** | **0.727** | **)\n\n[comment]: <> (0.741** |)\n\n[comment]: <> (The above results were obtained from our CRSLab in preliminary experiments. However, these algorithms were implemented)\n\n[comment]: <> (and tuned based on our understanding and experiences, which may not achieve their optimal performance. If you could)\n\n[comment]: <> (yield a better result for some specific algorithm, please kindly let us know. We will update this table after the)\n\n[comment]: <> (results are verified.)\n\n[comment]: <> (## Releases)\n\n[comment]: <> (| Releases |     Date      |   Features   |)\n\n[comment]: <> (| :------: | :-----------: | :----------: |)\n\n[comment]: <> (|  v0.1.1  | 1 / 4 / 2021  | Basic CRSLab |)\n\n[comment]: <> (|  v0.1.2  | 3 / 28 / 2021 |    CRSLab    |)\n\n## Contributions\n\nPlease let us know if you encounter a bug or have any suggestions\nby [filing an issue](https://github.com/Superbooming/simtester/issues).\n\nWe welcome all contributions from bug fixes to new features and extensions.\n\nWe expect all contributions discussed in the issue tracker and going through PRs.\n\n## Citing\n\nIf you find Simtester useful for your research or development, please cite\nour [Paper](https://arxiv.org/pdf/2204.00763.pdf):\n\n```\n@article{sun2022metaphorical,\n  title={Metaphorical User Simulators for Evaluating Task-oriented Dialogue Systems},\n  author={Sun, Weiwei and Guo, Shuyu and Zhang, Shuo and Ren, Pengjie and Chen, Zhumin and de Rijke, Maarten and Ren, Zhaochun},\n  journal={arXiv preprint arXiv:2204.00763},\n  year={2022}\n}\n```\n\n## Team\n\n**Simtester** was developed and maintained by Shandong University IR Lab.\n\n## License\n\n**Simtester** uses [MIT License](./LICENSE).\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Superbooming/simtester",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "simtester",
    "package_url": "https://pypi.org/project/simtester/",
    "platform": null,
    "project_url": "https://pypi.org/project/simtester/",
    "project_urls": {
      "Homepage": "https://github.com/Superbooming/simtester"
    },
    "release_url": "https://pypi.org/project/simtester/0.1.0/",
    "requires_dist": [
      "loguru (~=0.6.0)",
      "transformers (~=4.12.5)",
      "pyyaml (~=6.0)",
      "tqdm (~=4.55.0)",
      "nltk (~=3.4.5)",
      "requests (~=2.25.1)"
    ],
    "requires_python": ">=3.6",
    "summary": "An Open-Source Toolkit for Evaluating User Simulator of Task-oriented Dialogue System",
    "version": "0.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15622975,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d405be4f63fd9eae79d7bf063cd5548d2747a03ac874ac24e1c2265961a998cf",
          "md5": "d05c9ed0bbff0f033aeb25b1a03c45c4",
          "sha256": "8000f0bdd4136fa061faba89bd1a94592c6ca0ae0e582be70f6bb70563a009f1"
        },
        "downloads": -1,
        "filename": "simtester-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d05c9ed0bbff0f033aeb25b1a03c45c4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 26807,
        "upload_time": "2022-11-02T06:43:47",
        "upload_time_iso_8601": "2022-11-02T06:43:47.372664Z",
        "url": "https://files.pythonhosted.org/packages/d4/05/be4f63fd9eae79d7bf063cd5548d2747a03ac874ac24e1c2265961a998cf/simtester-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "840605216a53f0b0742fe7859f035d18e1d6870c80569981308c53094decea77",
          "md5": "9a7c569a0143a3a17246717d152f263b",
          "sha256": "3a57d0b18efaf09da8184b2e8ef5409774c63051ceea9afb6d85e4a6dfe4b554"
        },
        "downloads": -1,
        "filename": "simtester-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9a7c569a0143a3a17246717d152f263b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 28262,
        "upload_time": "2022-11-02T06:43:49",
        "upload_time_iso_8601": "2022-11-02T06:43:49.182873Z",
        "url": "https://files.pythonhosted.org/packages/84/06/05216a53f0b0742fe7859f035d18e1d6870c80569981308c53094decea77/simtester-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d405be4f63fd9eae79d7bf063cd5548d2747a03ac874ac24e1c2265961a998cf",
        "md5": "d05c9ed0bbff0f033aeb25b1a03c45c4",
        "sha256": "8000f0bdd4136fa061faba89bd1a94592c6ca0ae0e582be70f6bb70563a009f1"
      },
      "downloads": -1,
      "filename": "simtester-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d05c9ed0bbff0f033aeb25b1a03c45c4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 26807,
      "upload_time": "2022-11-02T06:43:47",
      "upload_time_iso_8601": "2022-11-02T06:43:47.372664Z",
      "url": "https://files.pythonhosted.org/packages/d4/05/be4f63fd9eae79d7bf063cd5548d2747a03ac874ac24e1c2265961a998cf/simtester-0.1.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "840605216a53f0b0742fe7859f035d18e1d6870c80569981308c53094decea77",
        "md5": "9a7c569a0143a3a17246717d152f263b",
        "sha256": "3a57d0b18efaf09da8184b2e8ef5409774c63051ceea9afb6d85e4a6dfe4b554"
      },
      "downloads": -1,
      "filename": "simtester-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9a7c569a0143a3a17246717d152f263b",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 28262,
      "upload_time": "2022-11-02T06:43:49",
      "upload_time_iso_8601": "2022-11-02T06:43:49.182873Z",
      "url": "https://files.pythonhosted.org/packages/84/06/05216a53f0b0742fe7859f035d18e1d6870c80569981308c53094decea77/simtester-0.1.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}