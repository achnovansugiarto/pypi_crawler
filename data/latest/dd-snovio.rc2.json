{
  "info": {
    "author": "DevsData",
    "author_email": "tpotanski@devsdata.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# DD-snovio\r\nA Python library designed to simplify work with the snovio API.\r\n\r\n# Installation\r\n`pip install dd-snovio`\r\n\r\n# Usage\r\n\r\n## Asynchronous reqests\r\nTo use asynchronous requests user should firstly create an instance of the async loop using:\r\n\r\nloop = asyncio.get_event_loop().\r\n\r\nAfterwards user can use the async_requests function to handle multiple requests:\r\n\r\nresponses = loop.run_until_complete(snovioapi_class_instance.async_requests(\r\n            snovioapi_class_instance.async_function, loop, data))\r\n\r\nasync_function - asynchronous function to perform\r\nloop - asyncio.get_event_loop()\r\ndata - data to send, should be a list or list of dicts,\r\n        it depends on the type of async function.\r\n\r\nNote, the API rate is limited to 60 requests per minute.\r\n\r\n### Snovio.set_request_delay()\r\n Enables user to set request delay time.\r\n\r\n    :param requests_delay: delay time between requests\r\n\r\n### Snovio.async_requests()\r\nFunction responsible for handling async requests.\r\n\r\n    :param function: asynchronous function to perform\r\n    :param async_loop: loop instance of the async requests\r\n    :param data: data to send\r\n\r\n### Snovio.get_access_token()\r\n Returns an access token to snovio API.\r\n Price: Free\r\n Limits: No\r\n\r\n    :return snovio response with access token\r\n\r\n### Snovio.get_domain_search()\r\n Enter a domain name and Snov.io will return all the email addresses on the domain.\r\n If there is any additional information about the email owner available in the database,\r\n we will add it as well. Each response returns up to 100 emails. If it does not return\r\n at least one email, you will not be charged for the request.\r\n Price: 1 credit per 10 emails/prospects\r\n Limits: No\r\n\r\n    :param domain_name: name of domain to get prospect from\r\n    :param last_id: id of the last prospect in previous request\r\n    :return snovio response with prospect\r\n\r\n### Snovio.get_email_count()\r\n With this API method, you can find out the number of email addresses\r\n from a certain domain in our database.\r\n Price: Free\r\n Limits: No\r\n\r\n    :param domain_name: name of domain to get prospect from\r\n    :return snovio response with dictionary containing the result\r\n\r\n### Snovio.async_get_email_finder()\r\n Sends async request to get prospect from snovio API.\r\n This API method finds email addresses using the person`s\r\n first and last name, and a domain name. If we don`t have\r\n this email address in our database, we won`t be able to\r\n provide the results to you right away. To speed up the\r\n process, you can use the Add Names To Find Emails method\r\n to push this email address for search. After that, try the\r\n Email Finder method again.\r\n Price: Free\r\n Limits: Yes\r\n\r\n    :param loop: loop instance of the async requests\r\n    :param person: dictionary containing information about the person:\r\n                  \"domain_name\", \"first_name\", \"second_name\"\r\n    :return snovio response with the prospect\r\n\r\n### Snovio.async_add_names_to_find_emails()\r\n Sends async request to check if person is in snovio database.\r\n If Snov.io does not have the emails you are looking for in its\r\n database and can't provide these email addresses via the Email finder,\r\n you can try to push the request for email search using this method.\r\n If an email is found, you can collect it by using the free Email finder\r\n request again.\r\n Price: 1 credit per request\r\n Limits: No\r\n\r\n    :param loop: loop instance of the async requests\r\n    :param person: dictionary containing information about the person:\r\n                    \"domain_name\", \"first_name\", \"second_name\"\r\n    :return snovio response with information about prospect availability\r\n\r\n### Snovio.async_add_url_for_search()\r\n Prepares an url to be used in the snovio search engine.\r\n Find prospects by social URL. To receive the results, use\r\n the Get prospect with URL method.\r\n Price: 1 credit per request\r\n Limits: No\r\n\r\n    :param loop: loop instance of the async requests\r\n    :param profile_url: url to social profile\r\n    :return snovio response with information about the prospect\r\n\r\n### Snovio.async_get_prospect_from_url()\r\n Sends async request to get prospect from snovio API using social URL\r\n Price: Free\r\n Limits: No\r\n\r\n    :param loop: loop instance of the async requests\r\n    :param profile_url: url to social profile\r\n    :return snovio response with the prospect\r\n\r\n### Snovio.async_get_profile_by_email()\r\n Sends async request to get prospect from snovio API using email.\r\n Provide an email address and Snov.io will return all the profile\r\n information connected to the provided email address owner from\r\n the database. If we find no information about the email owner in\r\n our database, you will not be charged for the request.\r\n Price: 1 credit per request\r\n Limits: No\r\n        \r\n    :param loop: loop instance of the async requests\r\n    :param email_address: an email of the selected person\r\n    :return snovio response with the prospect\r\n\r\n### Snovio.get_email_verifier()\r\n Check if the provided email addresses are valid and deliverable.\r\n API endpoint will return the email verification results. If we\r\n haven’t verified a certain email address before, the results\r\n will not be returned to you. In this case, the API will return\r\n a “not_verified” identifier and you will not be charged credits\r\n for this email. You should use the Add emails for verification\r\n method to push this email address for verification, after which\r\n you will be able to get the email verification results using this\r\n endpoint.\r\n Price: Free\r\n Limits: No\r\n\r\n    :param emails: emails to verify\r\n    :return snovio response with dictionary containing the results\r\n\r\n### Snovio.add_emails_for_verification()\r\n If you've never verified a certain email address before,\r\n you should push it for verification using this API method.\r\n After performing this action, you can receive the verification\r\n results using the Email verifier.\r\n Price: 0.5 credit per email address\r\n Limits: No\r\n\r\n    :param emails: emails to verify\r\n    :return snovio response with dictionary containing the results\r\n\r\n### Snovio.get_balance()\r\n Use this method to check your credit balance.\r\n Price: Free\r\n Limits: No\r\n\r\n    :return snovio response with dictionary containing the results\r\n\r\n### Snovio.async_add_prospect_to_list()\r\n Sends async request to add prospect to list.\r\n Add prospect to a specific list. This method will\r\n be useful for those who want to automate adding\r\n prospects to lists with active email drip campaigns.\r\n This way after a prospect is automatically added to\r\n a chosen list, an email drip campaign will be started\r\n for them automatically.\r\n\r\n person = {'email':'john.doe@example.com',\r\n    'fullName': 'John Doe',\r\n    'firstName':'John',\r\n    'lastName':'Doe',\r\n    'country':'United States',\r\n    'locality':'Woodbridge, New Jersey',\r\n    'linkedIn':'https://www.linkedin.com/in/johndoe/&social',\r\n    '[twitter':'https://twitter.com/johndoe&social',\r\n    'position':'Vice President of Sales',\r\n    'companyName':'GoldenRule',\r\n    'companySite':'https://goldenrule.com',\r\n    'updateContact':1\r\n    'listId': '323231'\r\n }\r\n\r\n Price: Free\r\n Limits: No\r\n\r\n    :param loop: loop instance of the async requests\r\n    :param prospect: information about the person\r\n    :return snovio response with information about the result\r\n\r\n### Snovio.async_get_prospect_by_id()\r\n Sends async request to get prospect from snovio.\r\n Find prospects from your lists by id. Knowing\r\n the id of a specific prospect you can get full\r\n information on the prospect, including the lists\r\n and campaigns they’ve been added to.\r\n Price: Free\r\n Limits: No\r\n\r\n    :param loop: loop instance of async requests\r\n    :param prospect_id: id of the prospect in snovio\r\n    :return snovio response with the prospect\r\n\r\n\r\n### Snovio.async_get_prospect_by_email()\r\n Sends async request to get prospect from snovio.\r\n Find prospect from your lists by email address.\r\n When you search by email, you receive a list of\r\n all prospects tied to this email address. Every\r\n element of the list contains full information on\r\n the prospect, including the lists and campaigns\r\n they’ve been added to.\r\n Price: Free\r\n Limits: No\r\n\r\n    :param loop: loop instance of the async requests\r\n    :param email: email of the prospect in snovio\r\n    :return snovio response with the prospect\r\n\r\n### Snovio.custom_fields()\r\n This method returns a list of all custom fields created by the\r\n user, including the fields’ name, whether the field is optional\r\n or required, and the field’s data type.\r\n Price: Free\r\n Limits: No\r\n\r\n    :return snovio response with the information about the custom fields\r\n\r\n### Snovio.user_lists()\r\n This method returns all lists created by the user. You can\r\n use this method to review lists that can be used for an email\r\n drip campaign.\r\n Price: Free\r\n Limits: No\r\n\r\n    :return snovio response with information about lists\r\n\r\n### Snovio.prospect_in_list()\r\n This method returns all the data on prospects in a specific\r\n list, including prospect’s data like email addresses and their\r\n status.\r\n Price: Free\r\n Limits: No\r\n\r\n    :param stop_page: page of list to start downloading prospects\r\n    :param start_page: page of list to stop downloading prospects\r\n    :param list_id: id of the list to get prospects from\r\n    :return snovio response with prospects in list\r\n\r\n### Snovio.add_prospect_list()\r\n Use this method to create new prospect lists in your account.\r\n Price: Free\r\n Limits: No\r\n\r\n    :param list_name: name of the list to create\r\n    :return snovio response with prospects in list  \r\n\r\n   \r\n\r\n\r\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "",
    "keywords": "snovio,snovio api,devsdata",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dd-snovio",
    "package_url": "https://pypi.org/project/dd-snovio/",
    "platform": "",
    "project_url": "https://pypi.org/project/dd-snovio/",
    "project_urls": null,
    "release_url": "https://pypi.org/project/dd-snovio/0.2/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python library designed to simplify work with the snovio API",
    "version": "0.2",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 11149209,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4663bfaebf3ac8ea2e8eff453f7e87cc25705b55332173ea4fafd3a0e156bf1d",
          "md5": "476e37c9c1d166af08d63e84177a2b5f",
          "sha256": "ed9a6b501f41e311a023dffe96ea18f7f4db404040ef26e029a9d9e1d07a5090"
        },
        "downloads": -1,
        "filename": "dd_snovio-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "476e37c9c1d166af08d63e84177a2b5f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8560,
        "upload_time": "2021-08-11T10:25:36",
        "upload_time_iso_8601": "2021-08-11T10:25:36.412584Z",
        "url": "https://files.pythonhosted.org/packages/46/63/bfaebf3ac8ea2e8eff453f7e87cc25705b55332173ea4fafd3a0e156bf1d/dd_snovio-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "c70f9f2546c2cd8db98e865a1d2e7fc32d7c817147619109d822497763d4def7",
          "md5": "d7d281527971cf4f3c70842c9741f405",
          "sha256": "9f2b4b807f3a3817da6f7dbcb301ddc30bbc3c8400ec8c66c638bc1d3c30eaed"
        },
        "downloads": -1,
        "filename": "dd_snovio-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d7d281527971cf4f3c70842c9741f405",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8556,
        "upload_time": "2021-08-11T11:06:52",
        "upload_time_iso_8601": "2021-08-11T11:06:52.623054Z",
        "url": "https://files.pythonhosted.org/packages/c7/0f/9f2546c2cd8db98e865a1d2e7fc32d7c817147619109d822497763d4def7/dd_snovio-0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "c70f9f2546c2cd8db98e865a1d2e7fc32d7c817147619109d822497763d4def7",
        "md5": "d7d281527971cf4f3c70842c9741f405",
        "sha256": "9f2b4b807f3a3817da6f7dbcb301ddc30bbc3c8400ec8c66c638bc1d3c30eaed"
      },
      "downloads": -1,
      "filename": "dd_snovio-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d7d281527971cf4f3c70842c9741f405",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8556,
      "upload_time": "2021-08-11T11:06:52",
      "upload_time_iso_8601": "2021-08-11T11:06:52.623054Z",
      "url": "https://files.pythonhosted.org/packages/c7/0f/9f2546c2cd8db98e865a1d2e7fc32d7c817147619109d822497763d4def7/dd_snovio-0.2.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}