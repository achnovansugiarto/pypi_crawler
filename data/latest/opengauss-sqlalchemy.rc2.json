{
  "info": {
    "author": "Jia Junsu",
    "author_email": "jiajunsu@huawei.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Topic :: Database :: Front-Ends"
    ],
    "description": "# openGauss-sqlalchemy\n\n适配SQLAlchemy框架的OpenGauss方言库。\n\n项目已通过SQLAlchemy社区用例集。\n\n\n## 运行依赖\n\n- psycopg2 for opengauss\n\n    从下列地址下载并安装到运行环境中\n    > https://gitee.com/opengauss/openGauss-connector-python-psycopg2\n\n    或\n\n    > https://github.com/opengauss-mirror/openGauss-connector-python-psycopg2\n\n\n## 安装\n\n```\n# 从pypi安装\n>>> python -m pip install opengauss-sqlalchemy\n\n# 从本地源码安装\n>>> python setup.py install\n```\n\n## 使用方法\n\n在OpenGauss中创建一个数据库。\n\n```\n>>> import sqlalchemy as sa\n# 访问集中式模式DB\n>>> sa.create_engine('opengauss://username:password@host:port/database_name')\n# 或\n>>> sa.create_engine('opengauss+psycopg2://username:password@host:port/database_name')\n# 访问分布式模式DB\n>>> sa.create_engine('opengauss+dc_psycopg2://username:password@host:port/database_name')\n# 或\n>>> sa.create_engine('opengauss+dc_psycopg2://username:password@/database_name?host=hostA:portA&host=hostB:portB')\n```\n\nOpenGauss的数据库开发指南详见 [OpenGauss DeveloperGuide](https://docs.opengauss.org/zh/docs/latest/docs/Developerguide/Developerguide.html)。\n\n## OpenGauss特性的使用方式（集中式和分布式）\n\n### 索引\n\n- Index with `USING method`\n```\ntbl = Table(\"testtbl\", m, Column(\"data\", String))\nIndex(\"test_idx1\", tbl.c.data, opengauss_using=\"btree\")\n```\n\n- Index with column expression\n```\ntbl = Table(\n    \"testtbl\",\n    m,\n    Column(\"data\", String),\n    Column(\"data2\", Integer, key=\"d2\"),\n)\n\nIndex(\n    \"test_idx1\",\n    tbl.c.data,\n    tbl.c.d2,\n    opengauss_ops={\"data\": \"text_pattern_ops\", \"d2\": \"int4_ops\"},\n)\n```\n\n- Index with `LOCAL`, only available for index on a partitioned table\n```\ntbl = Table(\n    \"testtbl\",\n    m,\n    Column(\"data\", Integer),\n    opengauss_partition_by=\"RANGE (data) ...\"\n)\nIndex(\"test_idx1\", tbl.c.data, opengauss_local=[\"\"])\n\nIndex(\n    \"test_idx2\",\n    tbl.c.data,\n    opengauss_local=[\n        \"PARTITION data_index1\",\n        \"PARTITION data_index2 TABLESPACE example3\",\n    ]\n)\n```\n\n- Index with `WITH`\n```\ntbl = Table(\"testtbl\", m, Column(\"data\", String))\nIndex(\"test_idx1\", tbl.c.data, opengauss_with={\"fillfactor\": 50})\n```\n\n- Index with `TABLESPACE`\n```\ntbl = Table(\"testtbl\", m, Column(\"data\", String))\nIndex(\"test_idx1\", tbl.c.data, opengauss_tablespace=\"sometablespace\")\n```\n\n- Index with `WHERE`, unsupported for index on a partitioned table\n```\ntbl = Table(\"testtbl\", m, Column(\"data\", Integer))\nIndex(\n    \"test_idx1\",\n    tbl.c.data,\n    opengauss_where=and_(tbl.c.data > 5, tbl.c.data < 10),\n)\n```\n\n### 表\n\n- Table with `WITH ({storage_parameter = value})`\n```\nTable(\"some_table\", ..., opengauss_with={\"storage_parameter\": \"value\"})\n```\n\n- Table with `ON COMMIT`\n```\nTable(\"some_talbe\", ..., prefixes=[\"TEMPORARY\"], opengauss_on_commit=\"PRESERVE ROWS\")\n```\n\n- Table with `COMPRESS`\n```\nTable(\"some_talbe\", ..., opengauss_with={\"ORIENTATION\": \"COLUMN\"}, opengauss_compress=True)\n```\n\n- Table with `TABLESPACE tablespace_name`\n```\nTable(\"some_talbe\", ..., opengauss_tablespace=\"tablespace_name\")\n```\n\n- Table with `PARTITION BY`\n```\nTable(\"some_talbe\", ..., opengauss_partition_by=\"RANGE(column_name) \"\n        \"(PARTITION P1 VALUES LESS THAN(10), \"\n        \"PARTITION P2 VALUES LESS THAN(MAXVALUE))\")\n```\n\n- Table with `ENABLE ROW MOVEMENT`\n```\nTable(\"some_talbe\", ..., opengauss_partition_by=\"RANGE(column_name) ...\",\n    opengauss_enable_row_movement=True)\n```\n\n## OpenGauss特性的使用方式（集中式）\n\n### 索引\n\n- Index with `CONCURRENTLY`\n```\ntbl = Table(\"testtbl\", m, Column(\"data\", Integer))\nIndex(\"test_idx1\", tbl.c.data, opengauss_concurrently=True)\n```\n\n## OpenGauss特性的使用方式（分布式）\n\n### 表\n\n- Table with `DISTRIBUTE BY`\n```\nTable(\"some_table\", ..., opengauss_distribute_by=\"HASH(column_name)\")\n```\nNOTE: table without distributable columns will be set with \"DISTRIBUTE BY REPLICATION\"\n\n- Table with `TO GROUP`\n```\nTable(\"some_table\", ..., opengauss_to=\"GROUP group_name\")\n```\n\n\n## 发布指南\n\n### 构建 python wheel格式\n```\n>>> python -m pip install wheel\n>>> python setup.py bdist_wheel\n```\n\n### 本地测试\n\n1. 设置环境变量 `export LD_LIBRARY_PATH=` 和 `export PYTHONPATH=` 的值为测试环境中 `psycopg2` 包所在的目录.\n2. 安装OpenGauss并修改数据库配置, 具体步骤见 \"安装并配置OpenGauss调测环境\".\n3. 执行命令 `tox -e py38`.\n\n\n### 安装并配置OpenGauss调测环境\n\n1. 添加OpenGauss的操作系统用户 ```>>> useradd omm -g dbgrp```\n2. 修改OpenGauss目录的用户和用户组 ```>>> chown omm:dbgrp ${db_dir} -R```\n3. 切换到新的系统用户 ```>>> su - omm```\n4. 安装OpenGauss ```>>> sh install.sh -w ${db_password} -p 37200```\n5. 启动OpenGauss ```>>> gs_ctl start -D ${db_dir}/data/single_node/```\n6. 登录OpenGauss ```>>> gsql -d postgres -p 37200```\n7. 创建数据库用户、测试数据库和测试模式\n```\nopenGauss=# create user scott identified by 'Tiger123';\nopenGauss=# create database test with owner=scott encoding='utf8' template=template0;\nopenGauss=# GRANT ALL PRIVILEGES TO scott;\nopenGauss=# ALTER DATABASE test SET default_text_search_config = 'pg_catalog.english';\nopenGauss=# \\c test\ntest=# create schema test_schema AUTHORIZATION scott;\ntest=# create schema test_schema_2 AUTHORIZATION scott;\ntest=# \\q\n```\n8. 修改OpenGauss配置\n```\n>>> gs_guc set -D ${db_dir}/data/single_node/ -c \"ssl=off\"\n>>> gs_guc set -D ${db_dir}/data/single_node/ -c \"max_prepared_transactions = 100\"\n>>> gs_guc reload -D ${db_dir}/data/single_node/ -h \"local all scott sha256\"\n>>> gs_guc reload -D ${db_dir}/data/single_node/ -h \"host all scott 127.0.0.1/32 sha256\"\n>>> gs_guc reload -D ${db_dir}/data/single_node/ -h \"host all scott 0.0.0.0/0 sha256\"\n>>> gs_ctl stop -D ${db_dir}/data/single_node/\n>>> gs_tl start -D ${db_dir}/data/single_node/\n```\n9. 启用SQL日志记录（可选）\n```\n>>> gs_guc set -D ${db_dir}/data/single_node/ -c \"log_min_error_statement = error\"\n>>> gs_guc set -D ${db_dir}/data/single_node/ -c \"log_statement = 'all'\"\n```\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://gitee.com/opengauss/openGauss-sqlalchemy",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "opengauss-sqlalchemy",
    "package_url": "https://pypi.org/project/opengauss-sqlalchemy/",
    "platform": null,
    "project_url": "https://pypi.org/project/opengauss-sqlalchemy/",
    "project_urls": {
      "Homepage": "https://gitee.com/opengauss/openGauss-sqlalchemy"
    },
    "release_url": "https://pypi.org/project/opengauss-sqlalchemy/2.1.0/",
    "requires_dist": [
      "SQLAlchemy (<2.0)",
      "psycopg2 (>=2.8)"
    ],
    "requires_python": "",
    "summary": "OpenGauss Dialect for SQLAlchemy",
    "version": "2.1.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 15835859,
  "releases": {
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ffb6f7f631cd88a6ba0d5cdd5088e411f82458282b98eef0116b1227f28c99a2",
          "md5": "ae942af6145d0f962a8a85690709170e",
          "sha256": "8a81928ff8f9af2f555f4412935d6112729a0c802d824c5c68d1640369e2fc0b"
        },
        "downloads": -1,
        "filename": "opengauss_sqlalchemy-2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae942af6145d0f962a8a85690709170e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 16951,
        "upload_time": "2022-11-15T01:57:28",
        "upload_time_iso_8601": "2022-11-15T01:57:28.951153Z",
        "url": "https://files.pythonhosted.org/packages/ff/b6/f7f631cd88a6ba0d5cdd5088e411f82458282b98eef0116b1227f28c99a2/opengauss_sqlalchemy-2.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "baeec46ba4df9a3ec6c84b61aa404b50d14f18929a93250ced12682f9423a6dc",
          "md5": "602912f2a75d9e696c0624e9cee2f9c4",
          "sha256": "3cb8b6dbef5223a7b8f1eb908e8d3334964f3f38caf1b75dbc3edf002acf2020"
        },
        "downloads": -1,
        "filename": "opengauss_sqlalchemy-2.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "602912f2a75d9e696c0624e9cee2f9c4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "requires_python": null,
        "size": 17407,
        "upload_time": "2022-11-21T03:31:12",
        "upload_time_iso_8601": "2022-11-21T03:31:12.688432Z",
        "url": "https://files.pythonhosted.org/packages/ba/ee/c46ba4df9a3ec6c84b61aa404b50d14f18929a93250ced12682f9423a6dc/opengauss_sqlalchemy-2.1.0-py2.py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "baeec46ba4df9a3ec6c84b61aa404b50d14f18929a93250ced12682f9423a6dc",
        "md5": "602912f2a75d9e696c0624e9cee2f9c4",
        "sha256": "3cb8b6dbef5223a7b8f1eb908e8d3334964f3f38caf1b75dbc3edf002acf2020"
      },
      "downloads": -1,
      "filename": "opengauss_sqlalchemy-2.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "602912f2a75d9e696c0624e9cee2f9c4",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "requires_python": null,
      "size": 17407,
      "upload_time": "2022-11-21T03:31:12",
      "upload_time_iso_8601": "2022-11-21T03:31:12.688432Z",
      "url": "https://files.pythonhosted.org/packages/ba/ee/c46ba4df9a3ec6c84b61aa404b50d14f18929a93250ced12682f9423a6dc/opengauss_sqlalchemy-2.1.0-py2.py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}