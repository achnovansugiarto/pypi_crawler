{
  "info": {
    "author": "Christopher C. Smith",
    "author_email": "chriscarrollsmith@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.11",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# imfr\n\n`imfp`, by Christopher C. Smith, is a Python package for downloading data from the [International Monetary\nFunds's](http://data.imf.org/) [RESTful JSON\nAPI](http://datahelp.imf.org/knowledgebase/articles/667681-using-json-restful-web-service).\n\n## Installation\n\nTo install the stable version of imfp from PyPi, use pip.\n\n\n```python\npip install --upgrade imfp\n```\n\nTo load the library, use `import`:\n\n\n```python\nimport imfp\n```\n\n\n## Usage\n\n### Suggested packages\n\n`imfp` outputs data in a `pandas` data frame, so you will want to use the `pandas` package for its functions for viewing and manipulating this object type. I also recommend `matplotlib` or `seaborn` for making plots, and `numpy` for computation. These packages can be installed using `pip` and loaded using `import`:\n\n\n```python\nimport pandas\nimport matplotlib\nimport seaborn\nimport numpy as np\n```\n\n### Setting a Unique Application Name with imf_app_name\n\n`imfp.imf_app_name()` allows users to set a custom application name to be used when making API calls to the IMF API. The IMF API has an application-based rate limit of 50 requests per second, with the application identified by the \"user_agent\" variable in the request header.\n\nThis could prove problematic if the `imfp` library became too popular and too many users tried to make simultaneous API requests using the default app name. By setting a custom application name, users can avoid hitting rate limits and being blocked by the API. `imfp.imf_app_name()` sets the application name by changing the `IMF_APP_NAME` variable in the environment. If this variable doesn't exist, `imfp.imf_app_name()` will create it.\n\nTo set a custom application name, simply call the `imfp.imf_app_name()` function with your desired application name as an argument:\n\n\n```python\n# Set custom app name as an environment variable\nimfp.imf_app_name(\"my_custom_app_name\")\n```\n\n\n\nThe function will throw an error if the provided name is missing, NULL, NA, not a string, or longer than 255 characters. If the provided name is \"imfr\" (the default) or an empty string, the function will issue a warning recommending the use of a unique app name to avoid hitting rate limits.\n\n### Fetching an Index of Databases with the imf_databases Function\n\nThe `imfp` package introduces four core functions: `imfp.imf_databases`, `imfp.imf_parameters`, `imfp.imf_parameter_defs`, and `imfp.imf_dataset`. The function for downloading datasets is `imfp.imf_dataset`, but you will need the other functions to determine what arguments to supply to `imfp.imf_dataset`. For instance, all calls to `imfp.imf_dataset` require a `database_id`. This is because the IMF serves many different databases through its API, and the API needs to know which of these many databases you're requesting data from. To obtain a list of databases, use `imfp.imf_databases`, like so:\n\n\n```python\n#Fetch the list of databases available through the IMF API\ndatabases = imfp.imf_databases()\ndatabases.head()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>database_id</th>\n      <th>description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>BOP_2017M06</td>\n      <td>Balance of Payments (BOP), 2017 M06</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>BOP_2020M3</td>\n      <td>Balance of Payments (BOP), 2020 M03</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>BOP_2017M11</td>\n      <td>Balance of Payments (BOP), 2017 M11</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>DOT_2020Q1</td>\n      <td>Direction of Trade Statistics (DOTS), 2020 Q1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>GFSMAB2016</td>\n      <td>Government Finance Statistics Yearbook (GFSY 2...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nThis function returns the IMF’s listing of 259 databases available through the API. (In reality, 7 of the listed databases are defunct and not actually available: FAS_2015, GFS01, FM202010, APDREO202010, AFRREO202010, WHDREO202010, BOPAGG_2020.)\n\nTo view and explore the database list, it’s possible to explore subsets of the data frame by row number with `databases.loc`:\n\n\n\n```python\n# View a subset consisting of rows 5 through 9\ndatabases.loc[5:9]\n```\n\n\n\n\n<div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>database_id</th>\n      <th>description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5</th>\n      <td>BOP_2019M12</td>\n      <td>Balance of Payments (BOP), 2019 M12</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>GFSYFALCS2014</td>\n      <td>Government Finance Statistics Yearbook (GFSY 2...</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>GFSE2016</td>\n      <td>Government Finance Statistics Yearbook (GFSY 2...</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>FM201510</td>\n      <td>Fiscal Monitor (FM) October 2015</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>GFSIBS2016</td>\n      <td>Government Finance Statistics Yearbook (GFSY 2...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n Or, if you already know which database you want, you can fetch the corresponding code by searching for a string match using `str.contains` and subsetting the data frame for matching rows. For instance, here’s how to search for the Primary Commodity Price System:\n\n\n```python\ndatabases[databases['description'].str.contains(\"Commodity\")]\n```\n\n\n\n\n<div>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>database_id</th>\n      <th>description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>238</th>\n      <td>PCTOT</td>\n      <td>Commodity Terms of Trade</td>\n    </tr>\n    <tr>\n      <th>241</th>\n      <td>PCPS</td>\n      <td>Primary Commodity Price System (PCPS)</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Fetching a List of Parameters and Input Codes with imf_parameters and imf_parameter_defs\n\nOnce you have a `database_id`, it’s possible to make a call to `imfp.imf_dataset` to fetch the entire database: `imfp.imf_dataset(database_id)`. However, while this will succeed for some small databases, it will fail for many of the larger ones. And even when it succeeds, fetching an entire database can take a long time. You’re much better off supplying additional filter parameters to reduce the size of your request.\n\nRequests to databases available through the IMF API are complicated by the fact that each database uses a different set of parameters when making a request. (At last count, there were 43 unique parameters used in making API requests from the various databases!) You also have to have the list of valid input codes for each parameter. The `imfp.imf_parameters` function solves this problem. Use the function to obtain the full list of parameters and valid input codes for a given database:\n\n\n```python\n# Fetch list of valid parameters and input codes for commodity price database\nparams = imfp.imf_parameters(\"PCPS\")\n```\n\nThe `imfp.imf_parameters` function returns a dictionary of data frames. Each dictionary key name corresponds to a parameter used in making requests from the database:\n\n\n```python\n# Get key names from the params object\nparams.keys()\n```\n\n\n\n\n    dict_keys(['freq', 'ref_area', 'commodity', 'unit_measure'])\n\n\n\nIn the event that a parameter name is not self-explanatory, the `imfp.imf_parameter_defs` function can be used to fetch short text descriptions of each parameter:\n\n\n```python\n# Fetch and display parameter text descriptions for the commodity price database\nimfp.imf_parameter_defs(\"PCPS\")\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>parameter</th>\n      <th>description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>freq</td>\n      <td>Frequency</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ref_area</td>\n      <td>Geographical Areas</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>commodity</td>\n      <td>Indicator</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>unit_measure</td>\n      <td>Unit</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\nEach named list item is a data frame containing a vector of valid input codes that can be used with the named parameter, and a vector of text descriptions of what each code represents.\n\nTo access the data frame containing valid values for each parameter, subset the `params` dict by the parameter name:\n\n\n```python\n# View the data frame of valid input codes for the frequency parameter\nparams['freq']\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>input_code</th>\n      <th>description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>Annual</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M</td>\n      <td>Monthly</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Q</td>\n      <td>Quarterly</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Viewing Data Frames\n\nNote that `pandas` data frames in Python can be a little difficult to work with, because Python doesn't have a built-in variable explorer. If you're doing data science, I recommend using an IDE like RStudio or Spyder that has a built-in variable explorer. However, if you don't have a variable explorer, you can prevent Python from truncating data frames using the `options` in `pandas`. For instance, to increase the maximum allowed column width to 100 characters, we can use `pandas.options.display.max_colwidth = 100`.\n\nAlternatively, it's possible to open the data frame in a new window to view it in full using the `webbrowser` library:\n\n\n```python\n# Convert data frame to HTML and open in a new browser window\nimport webbrowser\n\nparams['commodity'].to_html(\"frame.html\")\nurl = \"http://localhost:8888/files/notebook/frame.html\"\nwebbrowser.open(url,new=2)\n```\n\n### Supplying Parameter Arguments to imf_dataset: A Tale of Two Workflows\n\nThere are two ways to supply parameters to `imfp.imf_dataset`: by supplying list arguments or by supplying a modified parameters dict. The list arguments workflow will be more intuitive for most users, but the dict argument workflow requires a little less code.\n\n#### The List Arguments Workflow\n\nTo supply list arguments, just find the codes you want and supply them to `imfp.imf_dataset` using the parameter name as the argument name. The example below shows how to request 2000–2015 annual coal prices from the Primary Commodity Price System database:\n\n\n```python\n# Fetch the 'freq' input code for annual frequency\nselected_freq = list(\n    params['freq']['input_code'][params['freq']['description'].str.contains(\"Annual\")]\n)\n\n# Fetch the 'commodity' input code for coal\nselected_commodity = list(\n    params['commodity']['input_code'][params['commodity']['description'].str.contains(\"Coal\")]\n)\n\n# Fetch the 'unit_measure' input code for index\nselected_unit_measure = list(\n    params['unit_measure']['input_code'][params['unit_measure']['description'].str.contains(\"Index\")]\n)\n\n# Request data from the API\ndf = imfp.imf_dataset(database_id = \"PCPS\",\n         freq = selected_freq, commodity = selected_commodity,\n         unit_measure = selected_unit_measure,\n         start_year = 2000, end_year = 2015)\n\n# Display the first few entries in the retrieved data frame\ndf.head()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>freq</th>\n      <th>ref_area</th>\n      <th>commodity</th>\n      <th>unit_measure</th>\n      <th>unit_mult</th>\n      <th>time_format</th>\n      <th>time_period</th>\n      <th>obs_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>W00</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2000</td>\n      <td>39.3510230293202</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A</td>\n      <td>W00</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2001</td>\n      <td>49.3378587284039</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A</td>\n      <td>W00</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2002</td>\n      <td>39.4949091648006</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A</td>\n      <td>W00</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2003</td>\n      <td>43.2878876950788</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>A</td>\n      <td>W00</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2004</td>\n      <td>82.9185858052862</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n#### The Parameters Argument Workflow\n\nTo supply a list object, modify each data frame in the `params` list object to retain only the rows you want, and then supply the modified list object to `imfp.imf_dataset` as its parameters argument. Here is how to make the same request for annual coal price data using a parameters list:\n\n\n```python\n# Fetch the 'freq' input code for annual frequency\nparams['freq'] = params['freq'][params['freq']['description'].str.contains(\"Annual\")]\n\n# Fetch the 'commodity' input code for coal\nparams['commodity'] = params['commodity'][params['commodity']['description'].str.contains(\"Coal\")]\n\n# Fetch the 'unit_measure' input code for index\nparams['unit_measure'] = params['unit_measure'][params['unit_measure']['description'].str.contains(\"Index\")]\n\n# Request data from the API\ndf = imfp.imf_dataset(database_id = \"PCPS\",\n         parameters = params,\n         start_year = 2000, end_year = 2015)\n\n# Display the first few entries in the retrieved data frame\ndf.head()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>freq</th>\n      <th>ref_area</th>\n      <th>commodity</th>\n      <th>unit_measure</th>\n      <th>unit_mult</th>\n      <th>time_format</th>\n      <th>time_period</th>\n      <th>obs_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>W00</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2000</td>\n      <td>39.3510230293202</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A</td>\n      <td>W00</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2001</td>\n      <td>49.3378587284039</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A</td>\n      <td>W00</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2002</td>\n      <td>39.4949091648006</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A</td>\n      <td>W00</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2003</td>\n      <td>43.2878876950788</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>A</td>\n      <td>W00</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2004</td>\n      <td>82.9185858052862</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Working with the Returned Data Frame\n\nNote that all columns in the returned data frame are character vectors, and that to plot the series we will need to convert to valid numeric or date formats. Using `seaborn` with `hue`, we can plot different indicators in different colors:\n\n\n```python\n# Convert obs_value to numeric and time_period to integer year\ndf = df.astype({\"time_period\" : int, \"obs_value\" : float})\n\n# Plot prices of different commodities in different colors with seaborn\nseaborn.lineplot(data=df, x='time_period', y='obs_value', hue='commodity')\n```\n\n\n\n\n    <AxesSubplot: xlabel='time_period', ylabel='obs_value'>\n\n\n\n\n    \n![png](README_files/README_30_1.png)\n    \n\n\n\nAlso note that the returned data frame has mysterious-looking codes as values in some columns.\n\nCodes in the `time_format` column are ISO 8601 duration codes. In this case, “P1Y” means “periods of 1 year.” The `unit_mult` column represents the number of zeroes you should add to the value column. For instance, if value is in millions, then the unit multiplier will be 6. If in billions, then the unit multiplier will be 9.\n\nThe meanings of the other codes are stored in our `params` object and can be fetched with a join. For instance to fetch the meaning of the `ref_area` code “W00”, we can perform a left join with the `params['ref_area']` data frame and use select to replace `ref_area` with the parameter description:\n\n\n```python\n# Join df with params['ref_area'] to fetch code description\ndf = df.merge(params['ref_area'], left_on='ref_area',right_on='input_code',how='left')\n\n# Drop redundant columns and rename description column\ndf = df.drop(columns=['ref_area','input_code']).rename(columns={\"description\":\"ref_area\"})\n\n# View first few columns in the modified data frame\ndf.head()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>freq</th>\n      <th>commodity</th>\n      <th>unit_measure</th>\n      <th>unit_mult</th>\n      <th>time_format</th>\n      <th>time_period</th>\n      <th>obs_value</th>\n      <th>ref_area</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2000</td>\n      <td>39.351023</td>\n      <td>All Countries, excluding the IO</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>A</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2001</td>\n      <td>49.337859</td>\n      <td>All Countries, excluding the IO</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2002</td>\n      <td>39.494909</td>\n      <td>All Countries, excluding the IO</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2003</td>\n      <td>43.287888</td>\n      <td>All Countries, excluding the IO</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>A</td>\n      <td>PCOAL</td>\n      <td>IX</td>\n      <td>0</td>\n      <td>P1Y</td>\n      <td>2004</td>\n      <td>82.918586</td>\n      <td>All Countries, excluding the IO</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/chriscarrollsmith/imfp",
    "keywords": "economics,finance,IMF,API",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "imfp",
    "package_url": "https://pypi.org/project/imfp/",
    "platform": null,
    "project_url": "https://pypi.org/project/imfp/",
    "project_urls": {
      "Homepage": "https://github.com/chriscarrollsmith/imfp",
      "Repository": "https://github.com/chriscarrollsmith/imfp"
    },
    "release_url": "https://pypi.org/project/imfp/1.0.1/",
    "requires_dist": [
      "pandas (>=1.5.3,<2.0.0)",
      "requests (>=2.28.2,<3.0.0)",
      "ratelimiter (>=1.2.0.post0,<2.0.0)"
    ],
    "requires_python": ">=3.8,<4.0",
    "summary": "Python package for downloading economic data from the International Monetary Fund JSON RESTful API endpoint.",
    "version": "1.0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 17495491,
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "af1f98619f13c8ca0f1ea4aa21fa8eb9c2c85bb0cadbb0c62529bea0379b3002",
          "md5": "88ea5392aa6169fd576fe5d18a7827e7",
          "sha256": "5d86d4f63f283354b30c257bb683906bb8a5eb928af5262ca2937d806bedef00"
        },
        "downloads": -1,
        "filename": "imfp-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88ea5392aa6169fd576fe5d18a7827e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 16721,
        "upload_time": "2023-03-28T22:40:19",
        "upload_time_iso_8601": "2023-03-28T22:40:19.940474Z",
        "url": "https://files.pythonhosted.org/packages/af/1f/98619f13c8ca0f1ea4aa21fa8eb9c2c85bb0cadbb0c62529bea0379b3002/imfp-0.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "775972edef802f8c160706faf10878b025900e460fe5e1a707a4d11cad4778b1",
          "md5": "ca75f32ccd383e707fcf71800b5e7e2a",
          "sha256": "fa50c8f84eb3259f31b4ada6a9e491547db8d105c7f2808881f3bd81536a166d"
        },
        "downloads": -1,
        "filename": "imfp-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ca75f32ccd383e707fcf71800b5e7e2a",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 16129,
        "upload_time": "2023-03-28T22:40:21",
        "upload_time_iso_8601": "2023-03-28T22:40:21.349715Z",
        "url": "https://files.pythonhosted.org/packages/77/59/72edef802f8c160706faf10878b025900e460fe5e1a707a4d11cad4778b1/imfp-0.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5cd3b89cbacb6e822ab838c59ff7e9f016262640ed298de5ec9fee0d00883fdf",
          "md5": "6c4ef3109ae777915b6e86832e679cdd",
          "sha256": "a0878bbc38c5b1d5d337ecab5bafbb5deebfa41820b363faf1780cdda60428fd"
        },
        "downloads": -1,
        "filename": "imfp-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c4ef3109ae777915b6e86832e679cdd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 16734,
        "upload_time": "2023-03-28T22:47:22",
        "upload_time_iso_8601": "2023-03-28T22:47:22.117551Z",
        "url": "https://files.pythonhosted.org/packages/5c/d3/b89cbacb6e822ab838c59ff7e9f016262640ed298de5ec9fee0d00883fdf/imfp-0.0.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "561cb236b4c154ca8e1fc10946b238b50290b029fdd8c36d5721dc58e303e95d",
          "md5": "8a27d4def556ea4ad05c60da13d23f95",
          "sha256": "9cf16670596c1b52a1917d09da8d9b059b6e78b96502d999da40b67cfe263f62"
        },
        "downloads": -1,
        "filename": "imfp-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8a27d4def556ea4ad05c60da13d23f95",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 16154,
        "upload_time": "2023-03-28T22:47:23",
        "upload_time_iso_8601": "2023-03-28T22:47:23.858934Z",
        "url": "https://files.pythonhosted.org/packages/56/1c/b236b4c154ca8e1fc10946b238b50290b029fdd8c36d5721dc58e303e95d/imfp-0.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a8c22bf86b4f00d1e9bffa9ad776b97a08bb1f3c944fc64c09cb3e72aaf1c3e",
          "md5": "a53a501702684335432257e2afad40ff",
          "sha256": "e8f33a626216e3925ee808c66e4e5ef2eb75179b0547ab113d4b29879b74d879"
        },
        "downloads": -1,
        "filename": "imfp-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a53a501702684335432257e2afad40ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 16721,
        "upload_time": "2023-03-29T14:16:11",
        "upload_time_iso_8601": "2023-03-29T14:16:11.724992Z",
        "url": "https://files.pythonhosted.org/packages/4a/8c/22bf86b4f00d1e9bffa9ad776b97a08bb1f3c944fc64c09cb3e72aaf1c3e/imfp-1.0.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ff32aa251ff04ba0d1105e52752b7385d40c0bd255dc6bdc079cf8b7303b0e42",
          "md5": "88704079768016f167d2b8d93eff13da",
          "sha256": "1cdb754f0a12438b68b4e70931fa97fc5c09a90a5c995a733f51b7fd0cf3e930"
        },
        "downloads": -1,
        "filename": "imfp-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "88704079768016f167d2b8d93eff13da",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 16106,
        "upload_time": "2023-03-29T14:16:13",
        "upload_time_iso_8601": "2023-03-29T14:16:13.361613Z",
        "url": "https://files.pythonhosted.org/packages/ff/32/aa251ff04ba0d1105e52752b7385d40c0bd255dc6bdc079cf8b7303b0e42/imfp-1.0.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6f08c32dfd886dd0ab977ba2243a6930fc92b92cc7344267157bd5bd5f14322c",
          "md5": "909979b8b1a6ab7744344ea0c81d76b7",
          "sha256": "a3a168242f1d7e9dad8845bfb5217c755189a7e775b54e2bc51e654edf25b93b"
        },
        "downloads": -1,
        "filename": "imfp-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "909979b8b1a6ab7744344ea0c81d76b7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.8,<4.0",
        "size": 17082,
        "upload_time": "2023-03-29T15:13:08",
        "upload_time_iso_8601": "2023-03-29T15:13:08.694535Z",
        "url": "https://files.pythonhosted.org/packages/6f/08/c32dfd886dd0ab977ba2243a6930fc92b92cc7344267157bd5bd5f14322c/imfp-1.0.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5294f279434f8535c58e077f8b21fbf01e8950fbb53719b10d7129363896b78",
          "md5": "b98c7556d81d8c912f9c3d6fc2770383",
          "sha256": "621e6ee091d178fd541745c7f29403631c997ea9fafeb81f94f0b204f23649dd"
        },
        "downloads": -1,
        "filename": "imfp-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b98c7556d81d8c912f9c3d6fc2770383",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.8,<4.0",
        "size": 16499,
        "upload_time": "2023-03-29T15:13:10",
        "upload_time_iso_8601": "2023-03-29T15:13:10.491744Z",
        "url": "https://files.pythonhosted.org/packages/f5/29/4f279434f8535c58e077f8b21fbf01e8950fbb53719b10d7129363896b78/imfp-1.0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6f08c32dfd886dd0ab977ba2243a6930fc92b92cc7344267157bd5bd5f14322c",
        "md5": "909979b8b1a6ab7744344ea0c81d76b7",
        "sha256": "a3a168242f1d7e9dad8845bfb5217c755189a7e775b54e2bc51e654edf25b93b"
      },
      "downloads": -1,
      "filename": "imfp-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "909979b8b1a6ab7744344ea0c81d76b7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.8,<4.0",
      "size": 17082,
      "upload_time": "2023-03-29T15:13:08",
      "upload_time_iso_8601": "2023-03-29T15:13:08.694535Z",
      "url": "https://files.pythonhosted.org/packages/6f/08/c32dfd886dd0ab977ba2243a6930fc92b92cc7344267157bd5bd5f14322c/imfp-1.0.1-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "f5294f279434f8535c58e077f8b21fbf01e8950fbb53719b10d7129363896b78",
        "md5": "b98c7556d81d8c912f9c3d6fc2770383",
        "sha256": "621e6ee091d178fd541745c7f29403631c997ea9fafeb81f94f0b204f23649dd"
      },
      "downloads": -1,
      "filename": "imfp-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b98c7556d81d8c912f9c3d6fc2770383",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.8,<4.0",
      "size": 16499,
      "upload_time": "2023-03-29T15:13:10",
      "upload_time_iso_8601": "2023-03-29T15:13:10.491744Z",
      "url": "https://files.pythonhosted.org/packages/f5/29/4f279434f8535c58e077f8b21fbf01e8950fbb53719b10d7129363896b78/imfp-1.0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}