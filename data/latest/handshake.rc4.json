{
  "info": {
    "author": "https://github.com/meeb",
    "author_email": "meeb@meeb.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# handshake\n\nA Python library to create and validate authentication tokens.\n\n`handshake` is used to generate and validate arbitrary authentication tokens\nthat contain arbitrary metadata and support expiration. It uses basic\ncryptographic primitives (hashing, HMACs) and is based around the concept of a\nshared private secret for security.\n\nExample usage would be to create namespaced authentication tokens for clients\nof an API which another service can check is valid and hasn't expired. The\ntokens are safe to be made public, put in headers etc. and can be used like\nsession tokens.\n\nThe tokens are strings in the format of:\n\n```\narbitrary:data:here:timestamp:random:signature\n```\n\nAll fields other than timestamp, random and signature are optional. Signatures\nare in the format of:\n\n```\nHMAC(arbitrary:data:here:timestamp:random){shared_secret}\n```\n\nThe library is designed to allow whatever metadata is required into the token,\nsuch as the first parameter could be a namespace and the second parameter an\nobject id. This allows tokens to be easily split between internal systems and\nuses while containing metadata or IDs for other objects.\n\nFor example, you could use `handshake` to allow an API to generate tokens which\na client stores for a variable amount of time and can verify their state with\nother services. The arbitrary data prefix can be used to store an application\nnamespace and the UUID of the object being referenced (such as `user:uuid` or\n`service:recordtype:uuid`). This library is of most use if you have multiple\ndiverse systems, microservices or other distributed endpoints that require\nad-hoc authentication and something like JWT or OAuth is overkill.\n\n\n## Installation\n\n`handshake` is pure Python and has no dependancies. You can install `handshake`\nvia pip:\n\n```bash\n$ pip install handshake\n```\n\nAny modern version of Python3 will be compatible.\n\n\n## Usage\n\n`handshake` has one class providing two basic public functions. Examples:\n\n```python\nimport os\nfrom handshake import AuthToken\n\n# The shared secret, keep this private, can be str or bytes but needs to be\n# from a cryptographically secure source\nsecret = os.urandom(128)\n\n# Create the instance\ntoken = AuthToken(secret)\n\n# Basic token with no additional parameters\nplain_token = token.create()\ntoken.verify(plain_token)\n\n# The token must be no more than 300 seconds old\nplain_token = token.create()\ntoken.verify(plain_token, time_range=300)\n\n# Namespaced but no specific item, namespace is arbitrary\nnamespaced_token = token.create('namespace')\ntoken.verify(namespaced_token)\n\n# Namespaced and with an arbitrary item ID\nfrom uuid import uuid4\nclient_token = token.create('user', uuid4())\ntoken.verify(client_token)\n\n# Lots of metadata\nclient_token = token.create('network', 'node', '12345', '67890')\ntoken.verify(client_token)\n\n# Use blake2s for hashes and signatures\nfrom hashlib import blake2s\ntoken = AuthToken(secret, hashfunc=blake2s)\nblake2s_token = token.create()\ntoken.verify(blake2s_token)\n```\n\nIf a token fails to validate it raise the relevent exception:\n\n```python\n# Create a token with one secret\ntoken = AuthToken('a fixed secret string')\nplain_token = token.create()\n\n# Attempt to verify it with a different token, this is invalid\ntoken_with_different_secret = AuthToken('not the same secret string')\ntoken_with_different_secret.verify(plain_token)\n# ... a child of handshake.errors.InvalidTokenError exception is raised\n```\n\n## Limitations\n\nThe secret must be at least 16 bytes or characters and no more than 1024 bytes\nor characters. The total generated token length cannot be longer than 2048\ncharacters.\n\n\n## Full API synopsis\n\n### `handshake.AuthToken(secret=str_or_bool, hashfunc=function)`\n\nInitiates an AuthToken object using the specified secret. The secret is\nrequired. It must be either a string or a bytes and must be between 32 and 1024\ncharacters or bytes in length. The secret should be sourced from a\ncryptographically safe random source, such as `os.urandom`.\n\n`hashfunc` defaults to `hashlib.sha256` but you can replace it with another\nhash function if you need to.\n\n### `handshake.AuthToken.create(*arbitrary str)`\n\nCreates an authentication token.\n\n### `handshake.AuthToken.verify(token=str, time_range=int)`\n\nVerifies an authentication token created with `handshake.AuthToken.create()`.\n\n`time_range` is an optional integer which if set specifies the valid time\nrange the token must have been generated within. This is used to verify\nexpiring tokens. It defaults to `0` which disables time range validation.\n\nIf the token is valid a tuple containing any arbitrary data in the token. For\nexample a token of\n\n```\narbitrary:data:here:timestamp:random:signature\n```\n\nIf valid would return a tuple of:\n\n```python\n('arbitrary', 'data', 'here')\n```\n\nIf the token is invalid for any reason a `handshake.errors.InvalidTokenError`\nexception is raised (or a child exception of\n`handshake.errors.InvalidTokenError`). You can handle different errors by\ncatching them specifically and the exception names describe the event:\n\n```python\nimport os\nfrom handshake import AuthToken, errors\n\nsecret = os.urandom(128)\ntoken = AuthToken(secret)\ntest_token = token.create()\n\ntry:\n    token.verify(test_token)\nexcept errors.TokenExpiredError as e:\n    print(e)\nexcept errors.TokenSignatureError as e:\n    print(e)\nexcept errors.InvalidTokenError as e:\n    print(e)\n```\n\n\n# Tests\n\nThere is a test suite that you can run by cloning this repository and\nexecuting:\n\n```bash\n$ make test\n```\n\n\n# Contributing\n\nAll properly formatted and sensible pull requests, issues and comments are\nwelcome.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/meeb/handshake",
    "keywords": "handshake,auth,tokens,authentication,tickets",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "handshake",
    "package_url": "https://pypi.org/project/handshake/",
    "platform": "",
    "project_url": "https://pypi.org/project/handshake/",
    "project_urls": {
      "Homepage": "https://github.com/meeb/handshake"
    },
    "release_url": "https://pypi.org/project/handshake/0.2.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "A Python library to create and validate authentication tokens.",
    "version": "0.2.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 12536631,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ee785312b983ce63eec2e150124d4038be6b110a79ae5c9ece57a94d2d114834",
          "md5": "d71779b0690cb70e4ef7d909127ffe72",
          "sha256": "fdb95b070459e06da79207e0869180e4f7b31d426c46264ef5a95e9ed89677b6"
        },
        "downloads": -1,
        "filename": "handshake-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d71779b0690cb70e4ef7d909127ffe72",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7643,
        "upload_time": "2022-01-10T15:30:43",
        "upload_time_iso_8601": "2022-01-10T15:30:43.542363Z",
        "url": "https://files.pythonhosted.org/packages/ee/78/5312b983ce63eec2e150124d4038be6b110a79ae5c9ece57a94d2d114834/handshake-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "43cf4020416bc479ef78054e93f9d79faf2ab486819fd9c4899d0690733c0f75",
          "md5": "07beb9df6c22672a06ddae33875a4832",
          "sha256": "9a91414bce203f03fa5b247cbbfe821e325c17a91fc5d1729f40b333708c5d66"
        },
        "downloads": -1,
        "filename": "handshake-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "07beb9df6c22672a06ddae33875a4832",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 7785,
        "upload_time": "2022-01-10T15:40:53",
        "upload_time_iso_8601": "2022-01-10T15:40:53.944006Z",
        "url": "https://files.pythonhosted.org/packages/43/cf/4020416bc479ef78054e93f9d79faf2ab486819fd9c4899d0690733c0f75/handshake-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a67999ba32045747fbb3027e09f675cee9be4bd4611c88f8c06e22b53e53856e",
          "md5": "5d1e85f1538ae94caa7d1c06bf6e69d0",
          "sha256": "d7e6a5ca994138cf723029f3f2d530058cb98fd7a1e06c72ea2a8f1814c70807"
        },
        "downloads": -1,
        "filename": "handshake-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5d1e85f1538ae94caa7d1c06bf6e69d0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8002,
        "upload_time": "2022-01-11T02:25:59",
        "upload_time_iso_8601": "2022-01-11T02:25:59.964142Z",
        "url": "https://files.pythonhosted.org/packages/a6/79/99ba32045747fbb3027e09f675cee9be4bd4611c88f8c06e22b53e53856e/handshake-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "791351ea3b607424c2c5cae0dc7a5fd995e2911f64499c554e910e58768f329c",
          "md5": "67fd2755c6b338846f4f62213aa077f0",
          "sha256": "d64607f71f95372fdbb10ef901411b63d3603f77e4586c34c4953bb2ff74eac8"
        },
        "downloads": -1,
        "filename": "handshake-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "67fd2755c6b338846f4f62213aa077f0",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 8058,
        "upload_time": "2022-01-11T07:35:59",
        "upload_time_iso_8601": "2022-01-11T07:35:59.032670Z",
        "url": "https://files.pythonhosted.org/packages/79/13/51ea3b607424c2c5cae0dc7a5fd995e2911f64499c554e910e58768f329c/handshake-0.2.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "791351ea3b607424c2c5cae0dc7a5fd995e2911f64499c554e910e58768f329c",
        "md5": "67fd2755c6b338846f4f62213aa077f0",
        "sha256": "d64607f71f95372fdbb10ef901411b63d3603f77e4586c34c4953bb2ff74eac8"
      },
      "downloads": -1,
      "filename": "handshake-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "67fd2755c6b338846f4f62213aa077f0",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 8058,
      "upload_time": "2022-01-11T07:35:59",
      "upload_time_iso_8601": "2022-01-11T07:35:59.032670Z",
      "url": "https://files.pythonhosted.org/packages/79/13/51ea3b607424c2c5cae0dc7a5fd995e2911f64499c554e910e58768f329c/handshake-0.2.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}