{
  "info": {
    "author": "Ales Adamek, Filip Cima, Richard Paprok",
    "author_email": "hpo.sport@firma.seznam.cz",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3"
    ],
    "description": "# SZN DAOGen\n## Database Access Object Generator by Seznam.cz\n\nIs a simple utility which enables you to generate Models and Data Managers for your project based on MySQL database to access data easily.\n\n## Description\nDAOGenerator enables you to generate `Model`s and `DataManager`s from existing \ndatabase structure. For each database table and view the python `Model` will be generated. \nEach model will contain all table attributes with its datatypes and other meta \ninformation. For each `Model` one `base DataManager` for database access will be generated \ntoo. For each `base DataManager` one `DataManager` will be generated if it does not \nexist from previous `szndaogen` run. If `DataManager` exists file generation of it \nwill be skiped. \n`DataManager` is designed for future custom functionality extending. `Model`s \nand `base DataManager`s should not be edited it will be overwiten by next \n`szndaogen` script execution.\n\n### Advantages\n- changes are needed only on database side\n- you can stop beeing a coding monkey to write python models\n- autogenerated table meta information\n- works with Tables and Views\n- View performance issue solved\n- it is not nessesary to have view defined on production database\n- Models and DataManages templates are written in Jinja2\n- PyCharm code completion works perfectly with generated Models and DataManagers\n- fast and easy change of all Models and DataManager if DB structure changed (it takes less than second)\n\n## Disadvantages\n- you can feel shamed how easy to use it could be\n\n## Usage\n```\nszndaogen --help\n\nUsage of SZN DAOGen v2.3.0 - Database Access Object Generator by Seznam.cz\nszndaogen [options] output_path\n    example: szndaogen -a localhost -d my_database -u root -p pass /path/to/data_access\n    example: szndaogen -a localhost -d my_database -u root -p pass ./data_access\n\n\nOptions:\n  -h, --help            show this help message and exit\n  -a DB_HOST, --host-address=DB_HOST\n                        MySQL database host. (required)\n  -r DB_PORT, --port=DB_PORT\n                        MySQL database port.\n  -d DB_NAME, --database=DB_NAME\n                        MySQL database name. (required)\n  -u DB_USER, --user=DB_USER\n                        User name for MySQL DB authentication. (required)\n  -p DB_PASS, --password=DB_PASS\n                        Password for MySQL DB authentication.\n  -t TEMPLATES_PATH, --templates-path=TEMPLATES_PATH\n                        Path to custom templates of Models (model.jinja),\n                        DataManagers (manager.jinja) and DataManagerBases\n                        (manager_base.jinja).\n```\n\n## Installation\n```bash\npython3 setup.py install\n```\nor\n```\npip3 install szndaogen\n```\n## Example\n\nFor our example we will use sample database from [MySQLTutorial.org](https://www.mysqltutorial.org/mysql-sample-database.aspx/). Zipped database file is [here](https://sp.mysqltutorial.org/wp-content/uploads/2018/03/mysqlsampledatabase.zip).\n\nImporting database:\n```bash\nmysql < mysqlsampledatabase.sql\n```\nCreate custom application directory or use `example` directory from our repository.  \nLets generate Models and DataManagers from imported database by typing command:\n```bash\nszndaogen\n```\nIt will run simple szndaogen wizzard (if no arguments passed):\n```\nRequired parameters are not satisfied. Would you like to run setup wizard? [Y/n] y\nMySQL host address: localhost\nMySQL port (default 3306): 3306\nMySQL database name: classicmodels\nMySQL username: mysql-user\nMySQL password: mysql-user-password\nOutput path where all models and managers will be generated (default \"./data_access\"): ./example_dao\nBefore you proceed, would you like to save this configuration as a bash script in CWD for future use? [Y/n] y\n\nShortcut script 'szndaogen-localhost-classicmodels.sh' created in current working directory.\nWriting model `Customers` into `example_dao/models/customers_model.py`\nWriting manager `Customers` into `example_dao/managers/customers_manager.py`\nWriting manager `Customers` into `example_dao/managers/base/customers_manager_base.py`\nWriting model `Employees` into `example_dao/models/employees_model.py`\nWriting manager `Employees` into `example_dao/managers/employees_manager.py`\nWriting manager `Employees` into `example_dao/managers/base/employees_manager_base.py`\nWriting model `Offices` into `example_dao/models/offices_model.py`\nWriting manager `Offices` into `example_dao/managers/offices_manager.py`\nWriting manager `Offices` into `example_dao/managers/base/offices_manager_base.py`\nWriting model `Orderdetails` into `example_dao/models/orderdetails_model.py`\nWriting manager `Orderdetails` into `example_dao/managers/orderdetails_manager.py`\nWriting manager `Orderdetails` into `example_dao/managers/base/orderdetails_manager_base.py`\nWriting model `Orders` into `example_dao/models/orders_model.py`\nWriting manager `Orders` into `example_dao/managers/orders_manager.py`\nWriting manager `Orders` into `example_dao/managers/base/orders_manager_base.py`\nWriting model `Payments` into `example_dao/models/payments_model.py`\nWriting manager `Payments` into `example_dao/managers/payments_manager.py`\nWriting manager `Payments` into `example_dao/managers/base/payments_manager_base.py`\nWriting model `Productlines` into `example_dao/models/productlines_model.py`\nWriting manager `Productlines` into `example_dao/managers/productlines_manager.py`\nWriting manager `Productlines` into `example_dao/managers/base/productlines_manager_base.py`\nWriting model `Products` into `example_dao/models/products_model.py`\nWriting manager `Products` into `example_dao/managers/products_manager.py`\nWriting manager `Products` into `example_dao/managers/base/products_manager_base.py`\n```\nNow your project contains file structure as you can see bellow:\n```\ntree .\n\n├── szndaogen-localhost-classicmodels.sh\n├── example_dao\n│   ├── __init__.py\n│   ├── managers\n│   │   ├── base\n│   │   │   ├── __init__.py\n│   │   │   ├── customers_manager_base.py\n│   │   │   ├── employees_manager_base.py\n│   │   │   ├── offices_manager_base.py\n│   │   │   ├── orderdetails_manager_base.py\n│   │   │   ├── orders_manager_base.py\n│   │   │   ├── payments_manager_base.py\n│   │   │   ├── productlines_manager_base.py\n│   │   │   └── products_manager_base.py\n│   │   ├── __init__.py\n│   │   ├── customers_manager.py\n│   │   ├── employees_manager.py\n│   │   ├── offices_manager.py\n│   │   ├── orderdetails_manager.py\n│   │   ├── orders_manager.py\n│   │   ├── payments_manager.py\n│   │   ├── productlines_manager.py\n│   │   └── products_manager.py\n│   └── models\n│       ├── __init__.py\n│       ├── customers_model.py\n│       ├── employees_model.py\n│       ├── offices_model.py\n│       ├── orderdetails_model.py\n│       ├── orders_model.py\n│       ├── payments_model.py\n│       ├── productlines_model.py\n│       └── products_model.py\n└── requirements.txt\n```\nExample of auto-generated Model class:\n```python\n# !!! DO NOT MODIFY !!!\n# Automatically generated Model class\n# Generated by \"szndaogen\" tool\n\n\nimport typing\nfrom szndaogen.data_access.model_base import ModelBase\n\n\nclass EmployeesModel(ModelBase):\n    class Meta:\n        TABLE_NAME: str = \"employees\"\n        TABLE_TYPE: str = \"BASE TABLE\"\n        # fmt: off\n        SQL_STATEMENT: str = \"SELECT {PROJECTION} FROM `employees` {WHERE} {ORDER_BY} {LIMIT} {OFFSET}\"\n        # fmt: on\n\n        SQL_STATEMENT_WHERE_BASE: str = \"1\"\n        SQL_STATEMENT_ORDER_BY_DEFAULT: str = \"\"\n\n        PRIMARY_KEYS: typing.List = [\"employeeNumber\", ]\n        ATTRIBUTE_LIST: typing.List = [\"employeeNumber\", \"lastName\", \"firstName\", \"extension\", \"email\", \"officeCode\", \"reportsTo\", \"jobTitle\", ]\n        ATTRIBUTE_TYPES: typing.Dict = {\n            \"employeeNumber\": int,\n            \"lastName\": str,\n            \"firstName\": str,\n            \"extension\": str,\n            \"email\": str,\n            \"officeCode\": str,\n            \"reportsTo\": int,\n            \"jobTitle\": str,\n        }\n        MODEL_DATA_CONVERTOR: typing.Dict = {\n        }\n\n        # Class attribute to table attribute name conversion\n        employeeNumber: str = \"employeeNumber\"\n        lastName: str = \"lastName\"\n        firstName: str = \"firstName\"\n        extension: str = \"extension\"\n        email: str = \"email\"\n        officeCode: str = \"officeCode\"\n        reportsTo: str = \"reportsTo\"\n        jobTitle: str = \"jobTitle\"\n\n    def __init__(self, init_data: typing.Dict = {}):\n        self.employeeNumber: int = None\n        \"\"\"Type: int(11), Can be NULL: NO, Key: PRI\"\"\"\n        self.lastName: str = None\n        \"\"\"Type: varchar(50), Can be NULL: NO\"\"\"\n        self.firstName: str = None\n        \"\"\"Type: varchar(50), Can be NULL: NO\"\"\"\n        self.extension: str = None\n        \"\"\"Type: varchar(10), Can be NULL: NO\"\"\"\n        self.email: str = None\n        \"\"\"Type: varchar(100), Can be NULL: NO\"\"\"\n        self.officeCode: str = None\n        \"\"\"Type: varchar(10), Can be NULL: NO, Key: MUL\"\"\"\n        self.reportsTo: int = None\n        \"\"\"Type: int(11), Can be NULL: YES, Key: MUL\"\"\"\n        self.jobTitle: str = None\n        \"\"\"Type: varchar(50), Can be NULL: NO\"\"\"\n        super().__init__(init_data)\n\n```\nExample of auto-generated Base Manager class:\n```python\n# !!! DO NOT MODIFY !!!\n# Automatically generated Base Manager class\n# Generated by \"szndaogen\" tool\n\nimport typing\nfrom szndaogen.data_access.manager_base import TableManagerBase\nfrom ...models.employees_model import EmployeesModel\n\n\nclass EmployeesManagerBase(TableManagerBase):\n    MODEL_CLASS = EmployeesModel\n\n    @classmethod\n    def create_model_instance(cls, init_data: typing.Dict = None) -> EmployeesModel:\n        if init_data is None:\n            init_data = {}\n\n        return super().create_model_instance(init_data)\n\n    def select_one(self, employeeNumber: int, condition: str = \"1\", condition_params: typing.Tuple = (), projection: typing.Tuple = (), order_by: typing.Tuple = ()) -> EmployeesModel:\n        return super().select_one(employeeNumber, condition=condition, condition_params=condition_params, projection=projection, order_by=order_by)\n\n    def select_all(self, condition: str = \"1\", condition_params: typing.Tuple = (), projection: typing.Tuple = (), order_by: typing.Tuple = (), limit: int = 0, offset: int = 0) -> typing.List[EmployeesModel]:\n        return super().select_all(condition=condition, condition_params=condition_params, projection=projection, order_by=order_by, limit=limit, offset=offset)\n\n```\nExample of auto-generated Manager class which could be modified/extended by your own functionality:\n```python\n# This file can be modified. If file exists it wont be replaced by \"szndaogen\" any more.\n# Automatically generated Manager class\n# Generated by \"szndaogen\" tool\n\nfrom .base.employees_manager_base import EmployeesManagerBase\n\n\nclass EmployeesManager(EmployeesManagerBase):\n    pass\n\n```\n\n### Example application\nNow you can write application like this:\n```python\nfrom example_dao.managers.employees_manager import EmployeesManager\nfrom szndaogen.config import Config\nfrom szndaogen.data_access.db import DBI\nfrom szndaogen.tools.log import Logger, StdOutLogger\n\n\n@DBI.transaction(\"dbi\")\ndef update_employee_first_name(employee_id: int, new_first_name: str, dbi: DBI = None) -> int:\n    manager = EmployeesManager(dbi=dbi)  # tell manager to work with passed DBI instance to keep transaction connection\n    model_instance = manager.select_one(employee_id)\n    model_instance.firstName = new_first_name\n    return manager.update_one(model_instance)\n\n\nif __name__ == '__main__':\n    Config.MANAGER_AUTO_MAP_MODEL_ATTRIBUTES = True  # if disabled, you can control attributes mapping by `map_model_attributes()` method on model instance if needed to better performance\n    Config.MYSQL_HOST = \"localhost\"\n    Config.MYSQL_DATABASE = \"classicmodels\"\n    Config.MYSQL_USER = \"root\"\n    Config.MYSQL_PASSWORD = \"\"\n\n    Logger.set_external_logger(logger_instance=StdOutLogger())\n\n    employee_manager = EmployeesManager()\n    employee_result = employee_manager.select_all(order_by=(f\"{EmployeesManager.MODEL_CLASS.Meta.employeeNumber} ASC\",))\n\n    for employee_model_instance in employee_result:\n        print(f\"{employee_model_instance.firstName} {employee_model_instance.lastName} - {employee_model_instance.employeeNumber}\")\n\n    # autocommit update\n    employee_result = employee_manager.select_all(\"lastName=%s\", (\"Thompson\",))\n    if len(employee_result) == 1:\n        employee_model_instance = employee_result[0]\n        print(f\"Trying to update record id: {employee_model_instance.employeeNumber} - {employee_model_instance.firstName} {employee_model_instance.lastName}\")\n        employee_model_instance.firstName = \"New Leslie\"\n        employee_manager.update_one(employee_model_instance)\n\n    employee_result = employee_manager.select_all(\"lastName=%s\", (\"Thompson\",))\n    employee_model_instance = employee_result[0]\n    print(f\"Updated record id: {employee_model_instance.employeeNumber} - {employee_model_instance.firstName} {employee_model_instance.lastName}\")\n\n    # transaction update\n    update_employee_first_name(1166, \"Leslie forever\")\n\n    # new item\n    new_employee = employee_manager.create_model_instance()\n    new_employee.employeeNumber = 9999\n    new_employee.firstName = \"John\"\n    new_employee.lastName = \"Doe\"\n    new_employee.extension = \"xxx\"\n    new_employee.email = \"a@b.c\"\n    new_employee.officeCode = 4\n    new_employee.jobTitle = \"Incognito\"\n    employee_manager.insert_one(new_employee)\n\n    # delete item\n    employee_manager.delete_one(new_employee)\n    # OR\n    employee_manager.delete_all(f\"{EmployeesManager.MODEL_CLASS.Meta.employeeNumber}=%s\", (9999,))\n    # OR simply\n    employee_manager.delete_all(\"employeeNumber=%s\", (9999,))\n\n```\n\n### Working with Views\n`szndaogen` could process defined complicated database views too. There is no performance issue with MySQL views. Because view is parsed by `szndaogen` analyser and stored into `Model` definition. View declaration is executed on python application side. So all indexes and database optimalisations are used. Lets define sample view for out application defined as bellow `select` with a few joins:\n```sql\nSELECT o.`orderNumber`, od.`productCode`, od.`quantityOrdered`, p.`productName`, p.`quantityInStock`,\nIF(p.`quantityInStock` > od.`quantityOrdered`, \"enough\", \"to_stock_needed\") AS productInStockStatus\nFROM orders AS o\nLEFT JOIN orderdetails AS od ON od.`orderNumber`=o.`orderNumber`\nLEFT JOIN products AS p ON p.`productName`\nWHERE o.`status`=\"In Process\"\n```\ncreate view `view_orders_to_be_processed` from it:\n```sql\nDELIMITER $$\n\nCREATE ALGORITHM=UNDEFINED DEFINER=`root`@`%` SQL SECURITY DEFINER VIEW `view_orders_to_be_processed` AS (\nSELECT\n  `o`.`orderNumber`      AS `orderNumber`,\n  `od`.`productCode`     AS `productCode`,\n  `od`.`quantityOrdered` AS `quantityOrdered`,\n  `p`.`productName`      AS `productName`,\n  `p`.`quantityInStock`  AS `quantityInStock`,\n  IF((`p`.`quantityInStock` > `od`.`quantityOrdered`),'enough','to_stock_needed') AS `productInStockStatus`\nFROM ((`orders` `o`\n    LEFT JOIN `orderdetails` `od`\n      ON ((`od`.`orderNumber` = `o`.`orderNumber`)))\n   LEFT JOIN `products` `p`\n     ON (`p`.`productName`))\nWHERE (`o`.`status` = 'In Process'))$$\n\nDELIMITER ;\n```\nrun `szndaogen` again by stored bash script:\n```bash\nszndaogen-localhost-classicmodels.sh\n\nWriting model `Customers` into `example_dao/models/customers_model.py`\nSkipping manager `Customers` exists `example_dao/managers/customers_manager.py`\nWriting manager `Customers` into `example_dao/managers/base/customers_manager_base.py`\nWriting model `Employees` into `example_dao/models/employees_model.py`\nSkipping manager `Employees` exists `example_dao/managers/employees_manager.py`\nWriting manager `Employees` into `example_dao/managers/base/employees_manager_base.py`\nWriting model `Offices` into `example_dao/models/offices_model.py`\nSkipping manager `Offices` exists `example_dao/managers/offices_manager.py`\nWriting manager `Offices` into `example_dao/managers/base/offices_manager_base.py`\nWriting model `Orderdetails` into `example_dao/models/orderdetails_model.py`\nSkipping manager `Orderdetails` exists `example_dao/managers/orderdetails_manager.py`\nWriting manager `Orderdetails` into `example_dao/managers/base/orderdetails_manager_base.py`\nWriting model `Orders` into `example_dao/models/orders_model.py`\nSkipping manager `Orders` exists `example_dao/managers/orders_manager.py`\nWriting manager `Orders` into `example_dao/managers/base/orders_manager_base.py`\nWriting model `Payments` into `example_dao/models/payments_model.py`\nSkipping manager `Payments` exists `example_dao/managers/payments_manager.py`\nWriting manager `Payments` into `example_dao/managers/base/payments_manager_base.py`\nWriting model `Productlines` into `example_dao/models/productlines_model.py`\nSkipping manager `Productlines` exists `example_dao/managers/productlines_manager.py`\nWriting manager `Productlines` into `example_dao/managers/base/productlines_manager_base.py`\nWriting model `Products` into `example_dao/models/products_model.py`\nSkipping manager `Products` exists `example_dao/managers/products_manager.py`\nWriting manager `Products` into `example_dao/managers/base/products_manager_base.py`\nWriting model `ViewOrdersToBeProcessed` into `example_dao/models/vieworderstobeprocessed_model.py`\nWriting manager `ViewOrdersToBeProcessed` into `example_dao/managers/vieworderstobeprocessed_manager.py`\nWriting manager `ViewOrdersToBeProcessed` into `example_dao/managers/base/vieworderstobeprocessed_manager_base.py`\n```\nand all work is done in a second. Now you can use `ViewOrdersToBeProcessedManager` with custom `WHERE` conditions, `ORDER BY` sorts, limits, etc.\n```python\nfrom example_dao.managers.view_orders_to_be_processed_manager import ViewOrdersToBeProcessedManager\n\nmanager = ViewOrdersToBeProcessedManager()\nresults = manager.select_all(order_by=(\"`od`.`quantityOrdered` DESC\",), limit=10)\n\nprint(\"Top 10 ordered quauntities waiting for processing\")\nfor item in results:\n    print(f\"{item.orderNumber} - {item.productCode}: {item.productName}, {item.quantityOrdered}/{item.quantityInStock}\")\n```\n\n# Grouping tools\nPackage`szndaogen` also comes with a set of helpful auto grouping tools placed in `szndaogen/tools/auto_group.py`.\n\nThese tools solve a problem where you have M:N relations between two entities and need to join them together.  Their functionality is also helpful when working with SQL views.\n\n```mysql\nSELECT name, surname, job.name as job___name\nFROM person\nJOIN\n    works ON works.person_id = person.id\n    job ON job.id = works.job_id\nWHERE\n    person.id = 2;\n``` \n\nFor a single person, who has two jobs, DB might output something like this:\n\n| name        | surname        | job___name |\n| ----------- | -------------- | ---------- |\n| Jane        | Doe            | Accountant |\n| Jane        | Doe            | Developer  |\n\n\nWhich might be OK when fetching only one person and his jobs. There are use cases, when you need to fetch more and more people. Output will be much larger. This is the place, where auto grouping tools come handy.\n\n## auto_group_dict\nThis function groups dict keys with same prefix under one dict key. Groups used as group keys are identified by group separator `___`.\n\n```python\nperson = {\n    \"name\": \"Jane\",\n    \"surname\": \"Doe\",\n    \"job___name\": \"Accountant\",\n    \"job___established\": 2001\n}\n\nret = auto_group_dict(person)\n\n# Returns in\nret = {\n    \"name\": \"Jane\",\n    \"surname\": \"Doe\",\n    \"job\": {\n        \"name\": \"Accountant\",\n        \"established\": 2001,\n    }\n}\n```\n\n## auto_group_list\n__IMPORTANT__: All items which are inside lists are sorted exactly the same as they came from the DB.\n\nLet's say that we have want to retrieve a new person from our DB. Jane Doe now has two jobs: an accountant and a developer.\n\nDatabase returns two rows as specified above. But in object oriented world, it would be better for us to have it in one dict. This is where `auto_group_list` comes handy.\n\n```sql\nSELECT person.name, person.surname, job.name as jobs__name\nFROM person\nJOIN\n    works ON works.person_id = person.id\n    job ON job.id = works.job_id\nWHERE\n    person.id = 2;\n```\n\nAssuming our SQL query returns 2 rows like this: \n\n```python\nrows = [\n    {\n        \"name\": \"Jane\",\n        \"surname\": \"Doe\",\n        \"jobs__name\": \"Accountant\",\n    },\n    {\n        \"name\": \"Jane\",\n        \"surname\": \"Doe\",\n        \"jobs__name\": \"Developer\",\n    }\n]\n\nret = auto_group_list(rows)\n\n# Returns in\nret = {\n    \"name\": \"Jane\",\n    \"surname\": \"Doe\",\n    \"jobs\": [\n        {\n            \"name\": \"Accountant\"\n        },\n        {\n            \"name\": \"Developer\"\n        }\n    ]\n}\n```\n\nThis is kind of handy, isn't it? But what if we want to omit our WHERE statement? This is where `auto_group_list_by_pkeys` comes in place.\n\n## auto_group_list_by_pkeys\nNext and the last useful is handy when you want to for example fetch multiple people from DB, keep m..n relations and have everything grouped nicely. Like so:\n```sql\nSELECT person.id as _id, person.name, person.surname, job.name as jobs__name\nFROM person\nJOIN\n    works ON works.person_id = person.id\n    job ON job.id = works.job_id\nWHERE\n    person.id IN (2, 3);\n```\nOur person no. 2 is Jane Doe, who works as an accountant and a developer. Person no. 3 is John Doe, works as an DevOps Engineer and a developer.\n\nLet's say our grouping key is `_id`.\n\nOur fetched data converted to python might look something like this:\n```python\nrows = [\n    {\n        \"_id\": 2,\n        \"name\": \"Jane\",\n        \"surname\": \"Doe\",\n        \"jobs__name\": \"Accountant\"\n    },\n    {\n        \"_id\": 2,\n        \"name\": \"Jane\",\n        \"surname\": \"Doe\",\n        \"jobs__name\": \"Developer\"\n    },\n    {\n        \"_id\": 3,\n        \"name\": \"John\",\n        \"surname\": \"Doe\",\n        \"jobs__name\": \"DevOps Engineer\"\n    },\n    {\n        \"_id\": 3,\n        \"name\": \"John\",\n        \"surname\": \"Doe\",\n        \"jobs__name\": \"Developer\"\n    }\n]\n```\nLet's make it prettier!\n```python\nret = auto_group_list_by_pkeys((\"_id\",), rows, use_auto_group_dict=True)\n\n# Returns dict with 2 items, grouped by key \"_id\"\nret = {\n    \"2\": {\n        \"_id\": 2,\n        \"name\": \"Jane\",\n        \"surname\": \"Doe\",\n        \"jobs\": [\n            {\n                \"name\": \"Accountant\"\n            },\n            {\n                \"name\": \"Developer\"\n            }\n        ]\n    },\n    \"3\": {\n        \"_id\": 3,\n        \"name\": \"John\",\n        \"surname\": \"Doe\",\n        \"jobs\": [\n            {\n                \"name\": \"DevOps Engineer\"\n            },\n            {\n                \"name\": \"Developer\"\n            }\n        ]\n    }\n}\n```\nNow we have all our cases covered, ready to go.\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/seznam/szndaogen",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "szndaogen",
    "package_url": "https://pypi.org/project/szndaogen/",
    "platform": null,
    "project_url": "https://pypi.org/project/szndaogen/",
    "project_urls": {
      "Homepage": "https://github.com/seznam/szndaogen"
    },
    "release_url": "https://pypi.org/project/szndaogen/2.4.6/",
    "requires_dist": [
      "jinja2",
      "mysql-connector-python (==8.0.29)",
      "pytest",
      "sqlparse"
    ],
    "requires_python": ">=3.6",
    "summary": "SZN Database Access Object Generator for MySQL. Generates Models and DataManagers from existing MySQL database structure.",
    "version": "2.4.6",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14576476,
  "releases": {
    "2.3.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "aa5e8aafdc678d6ad2172a2610989c3466fd959b72c70a13363ac2b6699ec058",
          "md5": "76f7fb055a23132e09830307c61ad0b8",
          "sha256": "046e28400accc44d643c1cafd482ff7f8dbc1eb10a3a70c5869acd1f6c607dfa"
        },
        "downloads": -1,
        "filename": "szndaogen-2.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "76f7fb055a23132e09830307c61ad0b8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 27503,
        "upload_time": "2021-01-28T14:19:44",
        "upload_time_iso_8601": "2021-01-28T14:19:44.760577Z",
        "url": "https://files.pythonhosted.org/packages/aa/5e/8aafdc678d6ad2172a2610989c3466fd959b72c70a13363ac2b6699ec058/szndaogen-2.3.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "97a4636f07f34e36e8c82862595c95b94730a18347c8384b564e6a0a97213397",
          "md5": "4d90dba2fb3001a5f1894912daeee469",
          "sha256": "4d3598b134ddb14ac1040282bf79229f7a117f2f1524c7698cd58bb7b3eb1acc"
        },
        "downloads": -1,
        "filename": "szndaogen-2.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4d90dba2fb3001a5f1894912daeee469",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30168,
        "upload_time": "2021-01-28T14:19:46",
        "upload_time_iso_8601": "2021-01-28T14:19:46.601830Z",
        "url": "https://files.pythonhosted.org/packages/97/a4/636f07f34e36e8c82862595c95b94730a18347c8384b564e6a0a97213397/szndaogen-2.3.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3d1c628903fa66950b076903c9429f163c08535bd57dfcd39a7492d860ddab4c",
          "md5": "7583aaa87f6157aa7038b95e368f22d4",
          "sha256": "5e352ad1bb4b5e1a61ad8e130b727e841770642d6862b77e6ea643b9f79a5730"
        },
        "downloads": -1,
        "filename": "szndaogen-2.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7583aaa87f6157aa7038b95e368f22d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28406,
        "upload_time": "2021-07-30T12:30:49",
        "upload_time_iso_8601": "2021-07-30T12:30:49.811305Z",
        "url": "https://files.pythonhosted.org/packages/3d/1c/628903fa66950b076903c9429f163c08535bd57dfcd39a7492d860ddab4c/szndaogen-2.4.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "123c235cf007440ff378548ddbecd555e7eded43eb002805a675928f0e98ea5a",
          "md5": "9a982df78dbfde751bc622ba9f0bf100",
          "sha256": "92e919419e0dc6fb7acf8055e22d6ee6fd64a0fdd894a56f84a4de87d0b1143f"
        },
        "downloads": -1,
        "filename": "szndaogen-2.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9a982df78dbfde751bc622ba9f0bf100",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30620,
        "upload_time": "2021-07-30T12:30:52",
        "upload_time_iso_8601": "2021-07-30T12:30:52.718100Z",
        "url": "https://files.pythonhosted.org/packages/12/3c/235cf007440ff378548ddbecd555e7eded43eb002805a675928f0e98ea5a/szndaogen-2.4.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "273c22f4dd7d5608625108166ad1105edc9343fcffdb0f48e4ebaa45c6837aff",
          "md5": "34fbc3450fa6dd1ab33e78a5ce8f89df",
          "sha256": "629c9aab0bd0f072e7c38eff72aef6b3bbc0188498e0d5f67b33ecd4dcc02cc0"
        },
        "downloads": -1,
        "filename": "szndaogen-2.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34fbc3450fa6dd1ab33e78a5ce8f89df",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28406,
        "upload_time": "2021-08-04T12:36:11",
        "upload_time_iso_8601": "2021-08-04T12:36:11.814341Z",
        "url": "https://files.pythonhosted.org/packages/27/3c/22f4dd7d5608625108166ad1105edc9343fcffdb0f48e4ebaa45c6837aff/szndaogen-2.4.1-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4252ab55dedef5fa680ccf4e674b2b66606e19ee24a202477685c2177f1c65e2",
          "md5": "a9c7e5e74456217576893c2bf8176d6b",
          "sha256": "1794edbf40192cae317fe7800d262c9babf1d5fb59ac3b0a83785346d23b762e"
        },
        "downloads": -1,
        "filename": "szndaogen-2.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a9c7e5e74456217576893c2bf8176d6b",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30607,
        "upload_time": "2021-08-04T12:36:13",
        "upload_time_iso_8601": "2021-08-04T12:36:13.942783Z",
        "url": "https://files.pythonhosted.org/packages/42/52/ab55dedef5fa680ccf4e674b2b66606e19ee24a202477685c2177f1c65e2/szndaogen-2.4.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "30e961da518423ccb1d6e6cc4bc66cd27d088fb73e736ed2a89a674af751825d",
          "md5": "1c958d72357e9a4b32d9da8412ff0563",
          "sha256": "3065c3723ba2e72ba79c8211fd1f1d445d786d9b0e7940e9976753ca1475280f"
        },
        "downloads": -1,
        "filename": "szndaogen-2.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c958d72357e9a4b32d9da8412ff0563",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28356,
        "upload_time": "2021-08-04T13:59:39",
        "upload_time_iso_8601": "2021-08-04T13:59:39.028689Z",
        "url": "https://files.pythonhosted.org/packages/30/e9/61da518423ccb1d6e6cc4bc66cd27d088fb73e736ed2a89a674af751825d/szndaogen-2.4.2-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "155a2b46351d0e77b598542b5838e68528302e25d13ac327fda6ca99cea509f1",
          "md5": "801b0c2e3c22811dc9748f27731b9347",
          "sha256": "694c0423053d38cf1a6a8d2ac9a053eedbb2741b79cb27307efe852305192a43"
        },
        "downloads": -1,
        "filename": "szndaogen-2.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "801b0c2e3c22811dc9748f27731b9347",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30571,
        "upload_time": "2021-08-04T13:59:41",
        "upload_time_iso_8601": "2021-08-04T13:59:41.922355Z",
        "url": "https://files.pythonhosted.org/packages/15/5a/2b46351d0e77b598542b5838e68528302e25d13ac327fda6ca99cea509f1/szndaogen-2.4.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "5e60ffeccbcf040d20f53e67f79c48ada313578f409ef827af098d5ab9726c38",
          "md5": "0f0d595ccea9c98e02061097409779b4",
          "sha256": "8fee43c4f9c041f1e59bac3abb8d2e3e4f25ab57768d88b7909fdd36401e2ca4"
        },
        "downloads": -1,
        "filename": "szndaogen-2.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0f0d595ccea9c98e02061097409779b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28409,
        "upload_time": "2021-08-26T11:27:15",
        "upload_time_iso_8601": "2021-08-26T11:27:15.865807Z",
        "url": "https://files.pythonhosted.org/packages/5e/60/ffeccbcf040d20f53e67f79c48ada313578f409ef827af098d5ab9726c38/szndaogen-2.4.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "9e5cd3ebd53d5b8f38297e2acc28f3bf09658cae447dfa637853bccbddc1a0e7",
          "md5": "7b7699f4e76d5ea0787cb44a30b10cdb",
          "sha256": "ae5926eb96cc948a3f6a387d75d5aee5d9c4caf19cd74cb070187aab2c16e8e7"
        },
        "downloads": -1,
        "filename": "szndaogen-2.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7b7699f4e76d5ea0787cb44a30b10cdb",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30611,
        "upload_time": "2021-08-26T11:27:21",
        "upload_time_iso_8601": "2021-08-26T11:27:21.354935Z",
        "url": "https://files.pythonhosted.org/packages/9e/5c/d3ebd53d5b8f38297e2acc28f3bf09658cae447dfa637853bccbddc1a0e7/szndaogen-2.4.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a11f1d442bb1e74d5c9ae78f947eaf0ede6fcb083b3168a6384913f654aa0dec",
          "md5": "47a1a5bf5003c2583e9eff1b6a0ea14e",
          "sha256": "a26035c9435b5773b8921fcf28dae9a5a8a4cf65256932d94c70134c0ec89f53"
        },
        "downloads": -1,
        "filename": "szndaogen-2.4.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47a1a5bf5003c2583e9eff1b6a0ea14e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28546,
        "upload_time": "2021-10-01T13:21:03",
        "upload_time_iso_8601": "2021-10-01T13:21:03.858615Z",
        "url": "https://files.pythonhosted.org/packages/a1/1f/1d442bb1e74d5c9ae78f947eaf0ede6fcb083b3168a6384913f654aa0dec/szndaogen-2.4.4-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e1819cb1200ca5f8cd5d06480e864bd79d27d7394852993dd4742c0666e6504d",
          "md5": "b61504087f7b83c9b1987f15448a17bf",
          "sha256": "704194b9184d25baffcca876f2bb515dce1791023f3f6a7c3377aaffa8191708"
        },
        "downloads": -1,
        "filename": "szndaogen-2.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b61504087f7b83c9b1987f15448a17bf",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30740,
        "upload_time": "2021-10-01T13:21:10",
        "upload_time_iso_8601": "2021-10-01T13:21:10.383030Z",
        "url": "https://files.pythonhosted.org/packages/e1/81/9cb1200ca5f8cd5d06480e864bd79d27d7394852993dd4742c0666e6504d/szndaogen-2.4.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "eb7fca30521da5c33f1d31e6bf63b56cad5c073e0a6fd37fad1d345357c31c4f",
          "md5": "dcc98df54659b8026505ea314b86656f",
          "sha256": "af5b37a96a81402dee2613871a930b406ce67f693acce0e379d769ee7f84db30"
        },
        "downloads": -1,
        "filename": "szndaogen-2.4.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dcc98df54659b8026505ea314b86656f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28559,
        "upload_time": "2022-04-26T06:34:55",
        "upload_time_iso_8601": "2022-04-26T06:34:55.174909Z",
        "url": "https://files.pythonhosted.org/packages/eb/7f/ca30521da5c33f1d31e6bf63b56cad5c073e0a6fd37fad1d345357c31c4f/szndaogen-2.4.5-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a2df1e059d2e302997784c4a111f74c48f6d0f12e0d8a3eccc442b7541a385e4",
          "md5": "534af1d63ced74fed363912ae11a5644",
          "sha256": "cbf6faa79361506c1804889353ef7f6f0ea454d546d60d578f5c25d87f69727e"
        },
        "downloads": -1,
        "filename": "szndaogen-2.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "534af1d63ced74fed363912ae11a5644",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30776,
        "upload_time": "2022-04-26T06:34:57",
        "upload_time_iso_8601": "2022-04-26T06:34:57.510330Z",
        "url": "https://files.pythonhosted.org/packages/a2/df/1e059d2e302997784c4a111f74c48f6d0f12e0d8a3eccc442b7541a385e4/szndaogen-2.4.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "2.4.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "368a69e39dc4219b11fc0270e9b9e2ad83b95e56d29f411d73cf56502fbe23a2",
          "md5": "53a7b253be3f7982aec9f0ad41bf9030",
          "sha256": "f84c54984b15c22337dc4c0a5188afffb491b62c6b8ff1233d5b1574c5e16c3b"
        },
        "downloads": -1,
        "filename": "szndaogen-2.4.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "53a7b253be3f7982aec9f0ad41bf9030",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.6",
        "size": 28569,
        "upload_time": "2022-07-28T12:09:35",
        "upload_time_iso_8601": "2022-07-28T12:09:35.799174Z",
        "url": "https://files.pythonhosted.org/packages/36/8a/69e39dc4219b11fc0270e9b9e2ad83b95e56d29f411d73cf56502fbe23a2/szndaogen-2.4.6-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "ba0197d049c6120ef24b32c2e80385bc9ec6d4ab8a8417618f86db1ea45c6808",
          "md5": "4278cf51db3375c482e1ea09de13b649",
          "sha256": "ad13d9f3f683636f4109e2236cb99dc1bf7e5f1054e00f6cd0796d3afad18250"
        },
        "downloads": -1,
        "filename": "szndaogen-2.4.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4278cf51db3375c482e1ea09de13b649",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.6",
        "size": 30777,
        "upload_time": "2022-07-28T12:09:37",
        "upload_time_iso_8601": "2022-07-28T12:09:37.832885Z",
        "url": "https://files.pythonhosted.org/packages/ba/01/97d049c6120ef24b32c2e80385bc9ec6d4ab8a8417618f86db1ea45c6808/szndaogen-2.4.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "368a69e39dc4219b11fc0270e9b9e2ad83b95e56d29f411d73cf56502fbe23a2",
        "md5": "53a7b253be3f7982aec9f0ad41bf9030",
        "sha256": "f84c54984b15c22337dc4c0a5188afffb491b62c6b8ff1233d5b1574c5e16c3b"
      },
      "downloads": -1,
      "filename": "szndaogen-2.4.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "53a7b253be3f7982aec9f0ad41bf9030",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.6",
      "size": 28569,
      "upload_time": "2022-07-28T12:09:35",
      "upload_time_iso_8601": "2022-07-28T12:09:35.799174Z",
      "url": "https://files.pythonhosted.org/packages/36/8a/69e39dc4219b11fc0270e9b9e2ad83b95e56d29f411d73cf56502fbe23a2/szndaogen-2.4.6-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "ba0197d049c6120ef24b32c2e80385bc9ec6d4ab8a8417618f86db1ea45c6808",
        "md5": "4278cf51db3375c482e1ea09de13b649",
        "sha256": "ad13d9f3f683636f4109e2236cb99dc1bf7e5f1054e00f6cd0796d3afad18250"
      },
      "downloads": -1,
      "filename": "szndaogen-2.4.6.tar.gz",
      "has_sig": false,
      "md5_digest": "4278cf51db3375c482e1ea09de13b649",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.6",
      "size": 30777,
      "upload_time": "2022-07-28T12:09:37",
      "upload_time_iso_8601": "2022-07-28T12:09:37.832885Z",
      "url": "https://files.pythonhosted.org/packages/ba/01/97d049c6120ef24b32c2e80385bc9ec6d4ab8a8417618f86db1ea45c6808/szndaogen-2.4.6.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}