{
  "info": {
    "author": "Zeroji",
    "author_email": "zzeroji@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3"
    ],
    "description": "# ST7789V Display Controller\n\n![pypi status](https://img.shields.io/pypi/status/st7789v)\n![pypi version](https://img.shields.io/pypi/v/st7789v?label=version)\n![pypi license](https://img.shields.io/pypi/l/st7789v)\n\nA controller for the [ST7789V][spec] display, built to control\na [2-inch LCD Module][2inch] from a Raspberry Pi or similar.\n\nThis module provides better control over the RGB color modes, easier control\nof the orientation and mirroring of images and an optional Image buffer.\n\n## Hardware requirements\n\nTo use this module, you will need a screen using the [ST7789V controller][spec]\nand a device with GPIO pins and an SPI bus (or implementation) which can run\nPython 3. This was developped using a Raspberry Pi 4, however it should be easy\nto adapt it to other platforms.\n\nIf you wish to add support for another hardware platform, please [contact me][me]!\n\n## Software requirements\n\nPython 3.5 or higher is required. Prior versions may work but are unsupported.\n\nIf you're running this on a Raspberry Pi, you'll need the RPi.GPIO and spidev\nmodules. To use a somewhat faster implementation for color conversion, you can\ninstall NumPy. To use the BufferedDisplay class you will need PIL.\n\nTo install all of those at once:\n\n```sh\npip3 install RPi.GPIO spidev numpy pillow\n```\n\n## Usage\n\nYou first need an implementation of `st7789v.interface.IOWrapper`, which serves\nas a generic interface to the GPIO and SPI hardware implementation. If you don't\nhave any hardware, you can use `st7789v.interface.Dummy` which will simply log\nall sent data to the console.\n\nAfter opening your interface, you can pass it to a `st7789v.Display` object,\ninitialize it and start sending data:\n\n```py\nfrom st7789v.interface import RaspberryPi\nfrom st7789v import Display\n\nwith RaspberryPi() as rpi:\n    display = Display(rpi)\n    display.initialize()\n    display.draw_rgb_bytes([[0, 0, 255]] * 240 * 160)\n```\n\nThe above code will draw a blue rectangle over the top half of the screen.\nDepending on the way your screen is installed on your PCB or device, it may\nnot appear on the top side, you will have to tweak initialization parameters\nfor this. On the [LCD module][2inch] I own, I have to use the following to\nintialize the screen correctly:\n\n```py\ndisplay.initialize(rotation=270)\n```\n\nThis has the side effect of changing the screen size from 240x320 to 320x240.\n\nSee [`examples/`](./examples) for more information.\n\n## Buffered display usage\n\nIf you have installed `PIL`, you can instantiate `BufferedDisplay` to have an\nintegrated image buffer. In this case, you have to pass your initialization\nparameters directly to `BufferedDisplay()` if needed, because it will create\nthe buffer based on those parameters.\n\nExample usage:\n\n```py\nfrom st7789v.interface import RaspberryPi\nfrom st7789v import BufferedDisplay\n\nwith RaspberryPi() as rpi:\n    # Instantiante the display, and initialize it in landscape mode\n    display = BufferedDisplay(rpi, rotation=270)\n    # Show a black screen (empty buffer)\n    display.update()\n    time.sleep(0.5)\n    # Draw a blue rectangle all over the buffer\n    display.draw.rectangle((0, 0, 320, 240), fill='BLUE')\n    # Update only the top half of the screen\n    display.update_partial(0, 0, 320, 120)\n```\n\nSee [`examples/`](./examples) for more information.\n\n## OpenCV usage\n\nThere is no specific code for OpenCV integration, but the format used for the\nimages is quite close to the one expected by `draw_rgb_bytes`. This sample\ncode will work, assuming the display is in landscape mode (rotation is 90° or\n270°) and the video is in 320x240 resolution:\n\n```py\n# Read a frame from a video\nsuccess, image = video.read()\n# Convert from BGR to RGB\nimage_rgb = image[:,:,::-1]\n# Send to the screen\ndisplay.draw_rgb_bytes(image_rgb)\n```\n\n## Color modes\n\nThe ST7789V chip allows for 3 color modes. By default, RGB 5-6-5 is used.\nThis can be changed using `Display.set_color_mode(mode)` with `mode` being\none of `444`, `565` or `666`.\n\nThe table below lists all color modes, and some technical information:\n\n- Mode: the number to pass to `Display.set_color_mode`\n- Colors: the number of available colors\n- Depth: the color depth in bits\n- IO: the number of bits per pixel for data transfer.\n  This number is higher for RGB 6-6-6 because it is transfered as standard\n  RGB 8-8-8 (24 bits), but the 2 lowest bits of each bytes are ignored.\n- FPS: approximate number of frames per second, using a 320x240 MP4 video\n  and OpenCV to send data to the display. These numbers are for a RPi 4.\n\n| Mode | Colors | Depth | IO | FPS |\n| ---- | ------ | ----- | -- | --- |\n| 444  |   4096 | 12    | 12 | 36  |\n| 565  |  65536 | 16    | 16 | 27  |\n| 666  | 262144 | 18    | 24 | 18  |\n\n## Issues\n\nIf you have any trouble using this, let me know and I'll be glad to have a look\nat it. You can contact me [by mail][me] or on Discord: @Zeroji#1117.\n\n[spec]: https://newhavendisplay.com/appnotes/datasheets/LCDs/ST7789V.pdf\n[2inch]: https://www.waveshare.com/wiki/2inch_LCD_Module\n[me]: mailto:zzeroji@gmail.com",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/Zeroji/st7789v",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "st7789v",
    "package_url": "https://pypi.org/project/st7789v/",
    "platform": "",
    "project_url": "https://pypi.org/project/st7789v/",
    "project_urls": {
      "Homepage": "https://github.com/Zeroji/st7789v"
    },
    "release_url": "https://pypi.org/project/st7789v/0.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "Raspberry Pi module for ST7789V display",
    "version": "0.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9685106,
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d331f20f1683b0209fa7ee1f93ae491f3296a8031af62759e1e05c38f7fd83a6",
          "md5": "4970ad88a4584f2b26c6e47a18a0c663",
          "sha256": "dec148cae1f4139902a326f79a4ed9be9bd50953019b71fe4f511e3b714df192"
        },
        "downloads": -1,
        "filename": "st7789v-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4970ad88a4584f2b26c6e47a18a0c663",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.5",
        "size": 24884,
        "upload_time": "2020-05-24T17:12:45",
        "upload_time_iso_8601": "2020-05-24T17:12:45.636094Z",
        "url": "https://files.pythonhosted.org/packages/d3/31/f20f1683b0209fa7ee1f93ae491f3296a8031af62759e1e05c38f7fd83a6/st7789v-0.1.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "497423f9ef6409e9a069b21aae31c16c850bda5bcf073d35d4a42f3f145fcccb",
          "md5": "45ab02998e1001a88bc72cd2dc3021a3",
          "sha256": "d6e6b5c3b13ac731be0fbfe21fea29d034300fce2ad2e2885f0f1c30a6153761"
        },
        "downloads": -1,
        "filename": "st7789v-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "45ab02998e1001a88bc72cd2dc3021a3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 12658,
        "upload_time": "2020-05-24T17:12:47",
        "upload_time_iso_8601": "2020-05-24T17:12:47.741445Z",
        "url": "https://files.pythonhosted.org/packages/49/74/23f9ef6409e9a069b21aae31c16c850bda5bcf073d35d4a42f3f145fcccb/st7789v-0.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6b0a7d8cc52bda7b470d0b2eccc511cca96695997f035e539e4d459415d4ec0f",
          "md5": "d456694592ebce1529a06d6093c5f754",
          "sha256": "b9aa80564829ce9f09647e7c5f1678fbc751c42e50e60630d96dd8538db0ab8e"
        },
        "downloads": -1,
        "filename": "st7789v-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d456694592ebce1529a06d6093c5f754",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 12987,
        "upload_time": "2021-03-06T16:11:33",
        "upload_time_iso_8601": "2021-03-06T16:11:33.044755Z",
        "url": "https://files.pythonhosted.org/packages/6b/0a/7d8cc52bda7b470d0b2eccc511cca96695997f035e539e4d459415d4ec0f/st7789v-0.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "6b0a7d8cc52bda7b470d0b2eccc511cca96695997f035e539e4d459415d4ec0f",
        "md5": "d456694592ebce1529a06d6093c5f754",
        "sha256": "b9aa80564829ce9f09647e7c5f1678fbc751c42e50e60630d96dd8538db0ab8e"
      },
      "downloads": -1,
      "filename": "st7789v-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d456694592ebce1529a06d6093c5f754",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 12987,
      "upload_time": "2021-03-06T16:11:33",
      "upload_time_iso_8601": "2021-03-06T16:11:33.044755Z",
      "url": "https://files.pythonhosted.org/packages/6b/0a/7d8cc52bda7b470d0b2eccc511cca96695997f035e539e4d459415d4ec0f/st7789v-0.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}