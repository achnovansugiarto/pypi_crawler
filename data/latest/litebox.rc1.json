{
  "info": {
    "author": "Theo Walker",
    "author_email": "theo.ca.walker@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.10",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9"
    ],
    "description": "# LiteBox\n\n[![tests Actions Status](https://github.com/manimino/litebox/workflows/tests/badge.svg)](https://github.com/manimino/litebox/actions)\n[![performance Actions Status](https://github.com/manimino/litebox/workflows/performance/badge.svg)](https://github.com/manimino/litebox/actions)\n\nContainers for finding Python objects by attribute. Backed by SQLite.\n\n`pip install litebox`\n\n____\n\n### Usage\n```\nfrom litebox import LiteBox\ntb = LiteBox(\n    [{'num': 1, 'size': 1000, 'shape': 'square'}],   # provide a collection of objects or dicts \n    {'size': int, 'shape': str})                     # specify attributes to store\ntb.find('size >= 1000 and shape == \"square\"')        # find by attribute value\n```\n\nThe objects can be anything - `class`, `dataclass`, `namedtuple`, `dict`, `string`, `int`, etc.\n\nLiteBox supports `add()`, `add_many()`, `update()`, and `remove()`; see API below.\n\n### Nested attributes\n\nYou can define a function to access nested or derived attributes.\n\n```\nfrom litebox import LiteBox\n\nobjs = [\n    {'num': 1, 'nested': {'a': 2, 'b': 3}}, \n    {'num': 2, 'nested': {'a': 4, 'b': 5}}\n]\n\ndef nested_attr(obj):\n    return obj['nested']['a']\n\n# Build LiteBox, run find\ntb = LiteBox(objs, {nested_attr: int})\ntb.find('nested_attr == 2')  # returns obj 1\n```\n\n____\n\n### How it works\n\nWhen you do: `LiteBox(list_of_objects, on={'size': int, 'shape': string})` or `PandasBox(...)`\n\nA SQLite table is created with 3 columns:\n - size\n - shape\n - Python object reference\n\nOn `find()`, a query will run to find the matching objects.\n\nOnly the relevant attributes of the object are copied into the table. The rest of the object remains in memory.\n\nAn ideal use case is when you have \"heavy\" objects containing images / audio / large texts, plus some small\nmetadata fields that you want to find by. Just make a LiteBox on the metadata, and use it to find\nthe object without needing to serialize / deserialize the heavy stuff.\n\nLiteBox is especially good when finding by `<` and `>`. If you only need `==`, consider \n[HashBox](https://pypi.org/project/hashbox/) -- it is based on dict lookups which are faster in that case. \n\n____\n\n## API\n\n### Init \n\n```\nLiteBox(\n        objs: Optional[Iterable[Any]] = None,\n        on: Optional[Dict[str, Any]] = None,\n        index: Optional[List[ Union[Tuple[str], str]]] = None\n)\n```\n\nCreates a LiteBox.\n\n - `objs` is optional. It can be any container of class, dataclass, dict, or namedtuple objects.\n - `on` is required. It specifies the attributes and types to index. The allowed types are float, int, bool, and str.\n - `index` specifies the indices to create on the SQLite table. If unspecified, a single-column index is made on each\nattribute. \n\nThe `index` parameter is the key to getting good performance. A multi-column index can often speed up `find()` \noperations. `index=[('a', 'b', 'c'), 'd']` will create a multi-column index on `(a, b, c)` and a single-column index \non `d`.  Conversely, some columns such as those containing only a few different values may perform better without an \nindex.\n\nSee [SQLite index documentation](https://www.sqlite.org/queryplanner.html) for more insights.\n\n### find()\n\n`find(where: Optional[str]) -> List` finds objects matching the query string in `where`.\n\nExamples: \n - `tb.find('b == True and string == \"okay\"')`\n - `tb.find('(x == 0 and y >= 1000.0) or x == 9')`\n - `lb.find('x is null')`\n\nIf `where` is unspecified, all objects in the container are returned. \n\nConsult the syntax for [SQLite queries](https://www.sqlite.org/lang_select.html) as needed.\n\n### add(), add_many()\n\n```\nadd(obj:Any)\nadd_many(objs:Iterable[Any])\n```\n\nThe `add()` method adds a single object. If you have many objects, it is much faster to `add_many()` than it is to\ncall `add()` on each one.\n\nIf an added object is missing an attribute, the object will still be added. The missing attribute will be given a \n`None` value.\n\n### update()\n\n`update(self, obj: Any)` updates attributes of a single object in the index. \nIt's just a shorthand for `remove()` and then `add()`.\n\nIf you change an object's attributes without calling `update()`, the LiteBox will be out of sync and\nreturn stale results. Consider implementing a `setattr` listener on your object to update LiteBox when your objects\nchange.\n\n### remove()\n\n`remove(self, obj: Any)` removes an object. \n\n### Container methods\n\nYou can do the usual container things:\n - Length: `len(tb)`\n - Contains: `obj in tb`\n - Iteration: `for obj in tb: ...`\n\n____\n\n## Performance\n\nSee [examples](/examples) for performance tests.\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/manimino/litebox/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "litebox",
    "package_url": "https://pypi.org/project/litebox/",
    "platform": null,
    "project_url": "https://pypi.org/project/litebox/",
    "project_urls": {
      "Documentation": "https://pypi.org/project/litebox/",
      "Homepage": "https://github.com/manimino/litebox/",
      "Repository": "https://github.com/manimino/litebox/"
    },
    "release_url": "https://pypi.org/project/litebox/0.2.0/",
    "requires_dist": null,
    "requires_python": ">=3.7,<4.0",
    "summary": "",
    "version": "0.2.0",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14596478,
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "23ac98468d21c86b7531520e45e4df25386e1045f48e3d6984f42d2a135c4879",
          "md5": "9fe0e589757d30c9afdd107b6c2c0627",
          "sha256": "c89340cd37809b267e04b8539b5bf8f8d61d8f6dfaf663e1a4418eae094ea5a8"
        },
        "downloads": -1,
        "filename": "litebox-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9fe0e589757d30c9afdd107b6c2c0627",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": ">=3.7,<4.0",
        "size": 7397,
        "upload_time": "2022-07-30T01:59:59",
        "upload_time_iso_8601": "2022-07-30T01:59:59.478392Z",
        "url": "https://files.pythonhosted.org/packages/23/ac/98468d21c86b7531520e45e4df25386e1045f48e3d6984f42d2a135c4879/litebox-0.2.0-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "0a71f5cc2d13a41db4f16c2158655ae39e613dcec8698924a38a8604dc4fb79e",
          "md5": "f7aa75703a979b24cb97a7ca2adfa169",
          "sha256": "b7fdd4cb1cb1bdfd9338eb8dc7c66c5584c34250ec0ea2736556f3f53d12be0c"
        },
        "downloads": -1,
        "filename": "litebox-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f7aa75703a979b24cb97a7ca2adfa169",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.7,<4.0",
        "size": 7468,
        "upload_time": "2022-07-30T02:00:01",
        "upload_time_iso_8601": "2022-07-30T02:00:01.473894Z",
        "url": "https://files.pythonhosted.org/packages/0a/71/f5cc2d13a41db4f16c2158655ae39e613dcec8698924a38a8604dc4fb79e/litebox-0.2.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "23ac98468d21c86b7531520e45e4df25386e1045f48e3d6984f42d2a135c4879",
        "md5": "9fe0e589757d30c9afdd107b6c2c0627",
        "sha256": "c89340cd37809b267e04b8539b5bf8f8d61d8f6dfaf663e1a4418eae094ea5a8"
      },
      "downloads": -1,
      "filename": "litebox-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9fe0e589757d30c9afdd107b6c2c0627",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": ">=3.7,<4.0",
      "size": 7397,
      "upload_time": "2022-07-30T01:59:59",
      "upload_time_iso_8601": "2022-07-30T01:59:59.478392Z",
      "url": "https://files.pythonhosted.org/packages/23/ac/98468d21c86b7531520e45e4df25386e1045f48e3d6984f42d2a135c4879/litebox-0.2.0-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "0a71f5cc2d13a41db4f16c2158655ae39e613dcec8698924a38a8604dc4fb79e",
        "md5": "f7aa75703a979b24cb97a7ca2adfa169",
        "sha256": "b7fdd4cb1cb1bdfd9338eb8dc7c66c5584c34250ec0ea2736556f3f53d12be0c"
      },
      "downloads": -1,
      "filename": "litebox-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f7aa75703a979b24cb97a7ca2adfa169",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.7,<4.0",
      "size": 7468,
      "upload_time": "2022-07-30T02:00:01",
      "upload_time_iso_8601": "2022-07-30T02:00:01.473894Z",
      "url": "https://files.pythonhosted.org/packages/0a/71/f5cc2d13a41db4f16c2158655ae39e613dcec8698924a38a8604dc4fb79e/litebox-0.2.0.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}