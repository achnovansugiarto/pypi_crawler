{
  "info": {
    "author": "Tatu Ylonen",
    "author_email": "ylo@clausal.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Text Processing",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "# wikitextprocessor\n\nThis is a Python package for processing [WikiMedia dump\nfiles](https://dumps.wikimedia.org) for\n[Wiktionary](https://www.wiktionary.org),\n[Wikipedia](https://www.wikipedia.org), etc., for data extraction,\nerror checking, offline conversion into HTML or other formats, and\nother uses.  Key features include:\n\n* Parsing dump files, including built-in support for processing pages\n  in parallel\n* [Wikitext](https://en.wikipedia.org/wiki/Help:Wikitext) syntax\n  parser that converts the whole page into a parse tree\n* Extracting template definitions and\n  [Scribunto](https://www.mediawiki.org/wiki/Extension:Scribunto/Lua_reference_manual)\n  Lua module definitions from dump files\n* Expanding selected templates or all templates, and\n  heuristically identifying templates that need to be expanded before\n  parsing is reasonably possible (e.g., templates that emit table\n  start and end tags)\n* Processing and expanding wikitext parser functions\n* Processing, executing, and expanding Scribunto Lua modules (they are\n  very widely used in, e.g., Wiktionary, for example for generating\n  [IPA](https://en.wikipedia.org/wiki/International_Phonetic_Alphabet)\n  strings for many languages)\n* Controlled expansion of parts of pages for applications that parse\n  overall page structure before parsing but then expand templates on\n  certain sections of the page\n* Capturing information from template arguments while expanding them,\n  as template arguments often contain useful information not available\n  in the expanded content.\n\nThis module is primarily intended as a building block for other\npackages that process Wikitionary or Wikipedia data, particularly for\ndata extraction.  You will need to write code to use this.\n\nFor pre-existing extraction modules that use this package, please see:\n\n* [Wiktextract](https://github.com/tatuylonen/wiktextract/) for\n  extracting rich machine-readable dictionaries from Wiktionary.  You can also\n  find pre-extracted machine-readable Wiktionary data in JSON format at\n  [kaikki.org](https://kaikki.org/dictionary).\n\n## Getting started\n\n### Installing\n\nThe best way to install this package is from [pypi](https://pypi.org):\n```\npip3 install wikitextprocessor\n```\n\nAlternatively, you can install the master branch from github:\n```\ngit clone https://github.com/tatuylonen/wikitextprocessor\ncd wikitextprocessor\npip3 install -e .\n```\n\n### Running tests\n\nThis package includes tests written using the ``unittest`` framework.\nThey can be run using, for example, ``nose``, which can be installed\nusing ``pip3 install nose``.\n\nTo run the tests, use the following command in the top-level directory:\n```\nnosetests\n```\n\n### Obtaining WikiMedia dump files\n\nThis package is primarily intended for processing Wiktionary and\nWikipedia dump files (though you can also use it for processing\nindividual pages or other files that are in wikitext format).  To\ndownload WikiMedia dump files, go to the [dump download\npage](https://dumps.wikimedia.org/backup-index.html).  We recommend\nusing the &lt;name&gt;-&lt;date&gt;-pages-articles.xml.bz2 files.\n\n## API documentation\n\nUsage example:\n\n```\n   from wikitextprocessor import Wtp, WikiNode, NodeKind\n   ctx = Wtp()\n\n   def page_handler(model, title, text):\n       if model != \"wikitext\" or title.startswith(\"Template:\"):\n           return None\n       tree = ctx.parse(text, pre_expand=True)\n       ... process parse tree\n         ... value = ctx.node_to_wikitext(node)\n\n   ctx.process(\"enwiktionary-20201201-pages-articles.xml.bz2\", page_handler)\n```\n\nThe basic operation of ``Wtp.process()`` is as follows:\n* Extract templates, modules, and other pages from the dump file and save\n  them in a temporary file\n* Heuristically analyze which templates need to be pre-expanded before\n  parsing to make sense of the page structure (this cannot detect templates\n  that call Lua code that outputs wikitext that affects parsed structure).\n  These first steps together are called the \"first phase\".\n* Process the pages again, calling a page handler function for each page.\n  The page handler can extract, parse, and otherwise process the page, and\n  has full access to templates and Lua macros defined in the dump.  This may\n  call the page handler in multiple processes in parallel.  Return values\n  from the page handler calls are returned to the caller (this function acts\n  as an iterator).  This is called the second phase.\n* Optionally, the ``Wtp.reprocess()`` function may be used for processing the\n  same data several times (it basically repeats the second phase).\n\nMost of the functionality is hidden behind the ``Wtp`` object.\n``WikiNode`` objects are used for representing the parse\ntree that is returned by the ``Wtp.parse()`` function.  ``NodeKind``\nis an enumeration type used to encode the type of a ``WikiNode``.\nAdditionally, ``ALL_LANGUAGES`` is exported and is a list that\ndescribes all languages (language codes, names, and other data) used\nin Wiktionary.\n\n### class Wtp(object)\n\n```\ndef __init__(self, num_threads=None, cache_file=None, quiet=False)\n```\n\nThe initializer can usually be called without arguments, but recognizes\nthe following arguments:\n* ``num_threads`` - if set to an integer, use that many parallel processes\n  for processing the dump.  The default is to use as many processors as there\n  are available cores/hyperthreads.  You may need to limit the number of\n  parallel processes if you are limited by available memory; we have found\n  that processing Wiktionary (including templates and Lua macros)\n  requires 3-4GB of memory per process.  This MUST be set to 1 on Windows.\n* ``cache_file`` can normally be ``None``, in which case a temporary file will\n  be created under ``/tmp``, or a path (str) for the cache file(s).\n  There are two reasons why you might want to\n  set this: 1) you don't have enough space on ``/tmp`` (the whole uncompressed\n  dump must fit there, which can easily be 10-20GB), or 2) for testing.\n  If you specify the cache file, if an existing cache file exists, that will be\n  loaded and used, eliminating the time needed for Phase 1 (this is very\n  important for testing, allowing processing single pages reasonably fast).\n  In this case, you should not call ``Wtp.process()`` but instead use\n  ``Wtp.reprocess()`` or just call ``Wtp.expand()`` or ``Wtp.parse()`` on\n  wikitext that you have obtained otherwise (e.g., from some file).\n  If the cache file doesn't exist, you will need to call ``Wtp.process()``\n  to parse a dump file, which will initialize the cache file during the\n  first phase.  If you wish to re-create cache file, you should remove\n  the old cache file first.  The cache file path is actually a prefix for\n  multiple individual files.\n* ``quiet`` - if set to True, suppress progress messages during processing\n\n**Windows and MacOS note:** Setting ``num_threads`` to a value other than 1\nprobably doesn't currently work on Windows and MacOS.  It now defaults to 1\non these platforms.  This is because these platforms don't use ``fork()`` in\nthe Python multiprocessing package, and the current parallelization\nimplementation depends on this.\n\n```\ndef process(self, path, page_handler, phase1_only=False)\n```\n\nThis function processes a WikiMedia dump, uncompressing and extracing pages\n(including templates and Lua modules), and calling ``Wtp.add_page()`` for\neach page (phase 1).  This then calls ``Wtp.reprocess()`` to execute the\nsecond phase.\n\nThis takes the following arguments:\n* ``path`` (str) - path to the WikiMedia dump file to be processed\n  (e.g., \"enwiktionary-20201201-pages-articles.xml.bz2\").  Note that the\n  compressed file can be used.  Dump files can be\n  downloaded [here](https://dumps.wikimedia.org).\n* ``page_handler`` (function) - this function will be called for each page\n  in phase 2 (unless ``phase1_only`` is set to True).  The call takes the form\n  ``page_handler(model, title, data)``, where ``model`` is the ``model`` value\n  for the page in the dump (``wikitext`` for normal wikitext pages and\n  templates, ``Scribunto`` for Lua modules; other values are also possible),\n  ``title`` is page title (e.g., ``sample`` or ``Template:foobar``\n  or ``Module:mystic``), and ``data`` is the contents of the page (usually\n  wikitext).\n* ``phase1_only`` (boolean) - if set to True, prevents phase 2\n  processing and the ``page_handler`` function will not be called.  The\n  ``Wtp.reprocess()`` function can be used to run the second phase separately,\n  or ``Wtp.expand()``, ``Wtp.parse()`` and other functions can be used.\n\nThis function returns an iterator over the values returned by the\n``page_handler`` function (if ``page_handler`` returns ``None`` or no\nvalue, the iterator does not return those values).  Note that\n``page_handler`` will usually be run in a separate process, and cannot\npass any values back in global variables.  It can, however, access\nglobal variables assigned before calling ``Wtp.process()`` (in Linux\nonly).\n\n```\ndef reprocess(self, page_handler, autoload=True)\n```\n\nIterates over all pages in the cache file and calls ``page_handler``\nfor each page.  This basically implements phase 2 of processing a dump\nfile (see ``Wtp.process()``).  This can be called more than once if desired.\n\nThe arguments are:\n* ``page_handler`` (function) - this function will be called for every page.\n  The call takes the form ``page_handler(model, title, data)``,\n  where ``model`` is the ``model`` value\n  for the page in the dump (``wikitext`` for normal wikitext pages and\n  templates, ``Scribunto`` for Lua modules; other values are also possible),\n  ``title`` is page title (e.g., ``sample`` or ``Template:foobar``\n  or ``Module:mystic``), and ``data`` is the contents of the page (usually\n  wikitext).  If ``autoload`` is set to ``False``, then ``data`` will be\n  ``None``.\n* ``autoload`` (boolean) - Normally this function loads the page contents\n  automatically before calling the page handler.  If ``autoload`` is set to\n  ``False``, then this will not automatically load the contents.  This will\n  make the iteration over the pages much faster, and is useful for scanning\n  all pages when only a small fraction of them are likely to be of interest.\n  The ``Wtp.read_by_title()`` function can then be used to load the page\n  contents.\n\nThis function returns an iterator that iterates over the return values\nof ``page_handler``.  If the return value is ``None`` or ``page_handler``\nreturns no value, no value is returned by the iterator for such calls.\n\nThis calls the ``page_handler`` using subprocesses (unless ``num_threads``\nwas set to 1 in the initializer).  It may be necessary to set it to 1\non Windows and MacOS due to operating system/python limitations on those\nplatforms.\n\n```\ndef read_by_title(self, title):\n```\n\nReads the contents of the page with the specified title from the cache\nfile.  There is usually no need to call this function explicitly, as\n``Wtp.process()`` and ``Wtp.reprocess()`` normally load the page\nautomatically.  However, this can be useful if calling\n``Wtp.reprocess()`` with ``autoload`` set to ``False``.  This function\ndoes not automatically call ``Wtp.start_page()``.\n\nArguments are:\n* ``title`` (str) - the title of the page to read\n\nThis returns the page contents as a string, or ``None`` if the page\ndoes not exist.  If a transient page has been added with that title\n(see ``Wtp.add_page()``), then this returns the transient page.\n\n```\ndef parse(self, text, pre_expand=False, expand_all=False,\n          additional_expand=None)\n```\n\nParses wikitext into a parse tree (``WikiNode``), optionally expanding\nsome or all the templates and Lua macros in the wikitext (using the definitions\nfor the templates and macros in the cache files, as added by ``Wtp.process()``\nor calls to ``Wtp.add_page()``.\n\nThe ``Wtp.start_page()`` function must be called before this function\nto set the page title (which may be used by templates, Lua macros, and\nerror messages).  The ``Wtp.process()`` and ``Wtp.reprocess()``\nfunctions will call it automatically.\n\nThis accepts the following arguments:\n* ``text`` (str) - the wikitext to be parsed\n* ``pre_expand`` (boolean) - if set to ``True``, the templates that were\n  heuristically detected as affecting parsing (e.g., expanding to table start\n  or end tags or list items) will be automatically expanded before parsing.\n  Any Lua macros those templates use may also be called.\n* ``expand_all`` - if set to ``True``, expands all templates and Lua\n  macros in the wikitext before parsing.\n* ``additional_expand`` (set or ``None``) - if this argument is provided, it\n  should be a set of template names that should be expanded in addition to\n  those specified by the other options (i.e., in addition to to the\n  heuristically detected templates if ``pre_expand`` is ``True`` or just these\n  if it is false; this option is meaningless if ``expand_all`` is set to\n  ``True``).\n\nThis returns the parse tree.  See below for a documentation of the ``WikiNode``\nclass used for representing the parse tree.\n\n```\ndef node_to_wikitext(self, node)\n```\n\nConverts a part of a parse tree back to wikitext.\n* ``node`` (``WikiNode``, str, list/tuple of these) - This is the part of the\n  parse tree that is to be converted back to wikitext.  We also allow\n  strings and lists, so that ``node.children`` can be used directly as\n  the argument.\n\n\n```\ndef expand(self, text, template_fn=None, post_template_fn=None,\n           pre_expand=False, templates_to_expand=None,\n           expand_parserfns=True, expand_invoke=True)\n```\n\nExpands the selected templates, parser functions and Lua macros in the\ngiven Wikitext.  This can selectively expand some or all templates.  This can\nalso capture the arguments and/or the expansion of any template as well as\nsubstitute custom expansions instead of the default expansions.\n\nThe ``Wtp.start_page()`` function must be called before this function to\nset the page title (which may be used by templates and Lua macros).  The\n``Wtp.process()`` and ``Wtp.reprocess()`` will call it automatically.  The\npage title is also used in error messages.\n\nThe arguments are as follows:\n* ``text`` (str) - the wikitext to be expanded\n* ``template_fn`` (function) - if set, this will be called as\n  ``template_fn(name, args)``, where ``name`` (str) is the name of the\n  template and ``args`` is a dictionary containing arguments to the\n  template.  Positional arguments (and named arguments with numeric\n  names) will have integer keys in the dictionary, whereas other named\n  arguments will have their names as keys.  All values corresponding\n  to arguments are strings (after they have been expanded).  This\n  function can return ``None`` to cause the template to be expanded in\n  the normal way, or a string that will be used instead of the\n  expansion of the template.  This can return ``\"\"`` (empty string) to\n  expand the template to nothing.  This can also capture the template name\n  and its arguments.\n* ``post_template_fn`` (function) - if set, this will be called\n  as ``post_template_fn(name, ht, expansion)`` after the template has\n  been expanded in the normal way.  This can return ``None`` to use the\n  default expansion, or a string to use a that string as the expansion.\n  This can also be used to capture the template, its arguments, and/or its\n  expansion.\n* ``pre_expand`` (boolean) - if set to ``True``, all templates that were\n  heuristically determined as needing to be expanded before parsing will be\n  expanded.\n* ``templates_to_expand`` (``None`` or set or dictionary) - if this is set,\n  these templates will be expanded in addition to any other templates that\n  have been specified to be expanded.  If a dictionary is provided, its keys\n  will be taken as the names of the templates to be expanded.  If this has not\n  been set or is ``None``, all templates will be expanded.\n* ``expand_parserfns`` (boolean) - Normally, wikitext parser functions will\n  be expanded.  This can be set to ``False`` to prevent parser function\n  expansion.\n* ``expand_invoke`` (boolean) - Normally, the ``#invoke`` parser function\n  (which calls a Lua module) will be expanded along with other parser\n  functions.  This can be set to ``False`` to prevent expansion of the\n  ``#invoke`` parser function.\n\n```\ndef start_page(self, title)\n```\n\nThis function should be called before starting the processing of a new page\nor file.  This saves the page title (which is frequently accessed by\ntemplates, parser functions, and Lua macros).  The page title is also\nused in error messages.\n\nThe ``Wtp.process()`` and ``Wtp.reprocess()`` functions will automatically\ncall this before calling the page handler for each page.  This needs to be\ncalled manually when processing wikitext obtained from other sources.\n\nThe arguments are as follows:\n* ``title`` (str) - The page title.  For normal pages, there is usually no\n  prefix.  Templates typically have ``Template:`` prefix and Lua modules\n  ``Module:`` prefix, and other prefixes are also used (e.g., ``Thesaurus:``).\n  This does not care about the form of the name, but some parser functions do.\n\n```\ndef start_section(self, title)\n```\n\nSets the title of the current section on the page.  This is\nautomatically reset to ``None`` by ``Wtp.start_page()``.  The section\ntitle is only used in error, warning, and debug messages.\n\nThe arguments are:\n* ``title`` (str) - the title of the section, or ``None`` to clear it.\n\n\n```\ndef start_subsection(self, title)\n```\n\nSets the title of the current subsection of the current section on the\npage.  This is autimatically reset to ``None`` by ``Wtp.start_page()``\nand ``Wtp.start_section()``.  The subsection title is only used in error,\nwarning, and debug messages.\n\nThe arguments are:\n* ``title`` (str) - the title of the subsection, or ``None`` to clear it.\n\n```\ndef add_page(self, model, title, text, transient=False)\n```\n\nThis function is used to add pages, templates, and modules for\nprocessing.  There is usually no need to use this if ``Wtp.process()``\nis used; however, this can be used to add templates and pages for\ntesting or other special processing needs.  This can also be used for\nadding transient pages that are not stored in the cache file but could\nbe used for debugging or information extraction.  An example would be\noverriding some Lua module from the dump file for debugging the Lua\ncode, or adding a new Lua module that can import other modules and\nthen dump data from them, for example to extract the category\nhierarchy of Wiktionary pages.\n\nThe arguments are:\n* ``model`` (str) - the model value for the page (usually ``wikitext``\n  for normal pages and templates and ``Scribunto`` for Lua modules)\n* ``title`` (str) - the title of the page to be added (normal pages typically\n  have no prefix in the title, templates begin with ``Template:``, and Lua\n  modules begin with ``Module:``)\n* ``text`` (str) - the content of the page, template, or module\n* ``transient`` (boolean) - normally, the added pages will be stored in\n  the cache file.  If this is set to ``True``, the page will not be stored\n  in the cache file and will only affect the current run.  Transient\n  pages will override any pages in the cache file, and are useful for\n  debugging and data extraction.\n\nThe ``Wtp.analyze_templates()`` function needs to be called after\ncalling ``Wtp.add_page()`` before pages can be expanded or parsed (it should\npreferably only be called once after adding all pages and templates).\n\n```\ndef analyze_templates(self)\n```\n\nAnalyzes the template definitions in the cache file and determines which\nof them should be pre-expanded before parsing because they affect the\ndocument structure significantly.  Some templates in, e.g., Wiktionary\nexpand to table start tags, table end tags, or list items, and parsing\nresults are generally much better if they are expanded before parsing.\nThe actual expansion only happens if ``pre_expand`` or some other argument\nto ``Wtp.expand()`` or ``Wtp.parse()`` tells them to do so.\n\nThe analysis is heuristic and is not guaranteed to find every such template.\nIn particular, it cannot detect templates that call Lua modules that output\nWikitext control structures (there are several templates in Wiktionary that\ncall Lua code that outputs list items, for example).  Such templates may need\nto be identified manually and specified as additional templates to expand.\nLuckily, there seem to be relatively few such templates, at least in\nWiktionary.\n\nThis function is automatically called by ``Wtp.process()`` at the end of\nphase 1.  An explicit call is only necessary if ``Wtp.add_page()`` has been\nused by the application.\n\n### Error handling\n\nVarious functions in this module, including ``Wtp.parse()`` and\n``Wtp.expand()`` may generate errors and warnings.  Those will be displayed\non ``stdout`` as well as collected in ``Wtp.errors``, ``Wtp.warnings``, and\n``Wtp.debugs``.  These fields will contain lists of dictionaries, where\neach dictionary describes an error/warning/debug message.  The dictionary can\nhave the following keys (not all of them are always present):\n* ``msg`` (str) - the error message\n* ``trace`` (str or ``None``) - optional stacktrace where the error occurred\n* ``title`` (str) - the page title on which the error occurred\n* ``section`` (str or ``None``) - the section where the error occurred\n* ``subsection`` (str or ``None``) - the subsection where the error occurred\n* ``path`` (tuple of str) - a path of title, template names, parser function\n  names, or Lua module/function names, giving information about where the\n  error occurred during expansion or parsing.\n\nThe fields containing the error messages will be cleared by every call\nto ``Wtp.start_page()`` (including the implicit calls during\n``Wtp.process()`` and ``Wtp.reprocess()``).  Thus, the\n``page_handler`` function often returns these lists together with any\ninformation extracted from the page, and they can be collected\ntogether from the values returned by the iterators returned by these\nfunctions.  The ``Wtp.to_return()`` function maybe useful for this.\n\nThe following functions can be used for reporting errors.  These can\nalso be called by application code from within the ``page_handler``\nfunction as well as ``template_fn`` and ``post_template_fn`` functions\nto report errors, warnings, and debug messages in a uniform way.\n\n```\ndef error(self, msg, trace=None)\n```\n\nReports an error message.  The error will be added to ``Wtp.errors`` list and\nprinted to stdout.  The arguments are:\n* msg (str) - the error message (need not include page title or section)\n* trace (str or ``None``) - an optional stack trace giving more information\n  about where the error occurred\n\n```\ndef warning(self, msg, trace=None)\n```\n\nReports a warning message.  The warning will be added to ``Wtp.warnings`` list\nand printed to stdout.  The arguments are the same as for ``Wtp.error()``.\n\n```\ndef debug(self, msg, trace=None)\n```\n\nReports a debug message.  The message will be added to ``Wtp.debugs`` list\nand printed to stdout.  The arguments are the same as for ``Wtp.error()``.\n\n```\ndef to_return(self)\n```\n\nProduces a dictionary containing the error, warning, and debug\nmessages from ``Wtp``.  This would typically be called at the end of a\n``page_handler`` function and the value returned along with whatever\ndata was extracted from that page.  The error lists are reset by\n``Wtp.start_page()`` (including the implicit calls from\n``Wtp.process()`` and ``Wtp.reprocess()``), so they should be saved\n(e.g., by this call) for each page.  (Given the parallelism in\nthe processing of the pages, they cannot just be accumulated in the\nsubprocesses.)\n\nThe returned dictionary contains the following keys:\n* ``errors`` - a list of dictionaries describing any error messages\n* ``warnings`` - a list of dictionaries describing any warning messages\n* ``debugs`` - a list of dictionaries describing any debug messages.\n\n### class WikiNode(object)\n\nThe ``WikiNode`` class represents a parse tree node and is returned by\n``Wtp.parse()``.  This object can be printed or converted to a string\nand will display a human-readable format that is suitable for\ndebugging purposes (at least for small parse trees).\n\nThe ``WikiNode`` objects have the following fields:\n* ``kind`` (NodeKind, see below) - The type of the node.  This determines\n  how to interpret the other fields.\n* ``children`` (list) - Contents of the node.  This is generally used when\n  the node has arbitrary size content, such as subsections, list items/sublists,\n  other HTML tags, etc.\n* ``args`` (list or str, depending on ``kind``) - Direct arguments to the\n  node.  This is used, for example, for templates, template arguments, parser\n  function arguments, and link arguments, in which case this is a list.\n  For some node types (e.g., list, list item, and HTML tag), this is\n  directly a string.\n* ``attrs`` - A dictionary containing HTML attributes or a definition list\n  definition (under the ``def`` key).\n\n### class NodeKind(enum.Enum)\n\nThe ``NodeKind`` type is an enumerated value for parse tree (``WikiNode``)\nnode types.  Currently the following values are used (typically these\nneed to be prefixed by ``Nodekind.``, e.g., ``NodeKind.LEVEL2``):\n* ``ROOT`` - The root node of the parse tree.\n* ``LEVEL2`` - Level 2 subtitle (==).  The ``args`` field contains the title\n  and ``children`` field contains any contents that are within this section\n* ``LEVEL3`` - Level 3 subtitle (===)\n* ``LEVEL4`` - Level 4 subtitle (====)\n* ``LEVEL5`` - Level 5 subtitle (=====)\n* ``LEVEL6`` - Level 6 subtitle (======)\n* ``ITALIC`` - Italic, content is in ``children``\n* ``BOLD`` - Bold, content is in ``children``\n* ``HLINE`` - A horizontal line (no arguments or children)\n* ``LIST`` - Indicates a list.  Each list and sublist will start with\n  this kind of node.  ``args`` will contain the prefix used to open the\n  list (e.g., ``\"##\"`` - note this is stored directly as a string\n  in ``args``).  List items will be stored in ``children``.\n* ``LIST_ITEM`` - A list item in the children of a ``LIST`` node.  ``args``\n  is the prefix used to open the list item (same as for the ``LIST`` node).\n  The contents of the list item (including any possible sublists) are in\n  ``children``.  If the list is a definition list (i.e., the prefix ends\n  in ``\";\"``), then ``children`` contains the item label to be defined\n  and ``attrs[\"def\"]`` contains the definition.\n* ``PREFORMATTED`` - Preformatted text where markup is interpreted.  Content\n  is in ``children``.  This is used for lines starting with a space in\n  wikitext.\n* ``PRE`` - Preformatted text where markup is not interpreted.  Content\n  is in ``children``.  This is indicated in wikitext by\n  &lt;pre&gt;...&lt;/pre&gt;.\n* ``LINK`` - An internal wikimedia link ([[...]] in wikitext).  The link\n  arguments are in ``args``.  This tag is also used for media inclusion.\n  Links with a trailing word end immediately after the link have the trailing\n  part in ``children``.\n* ``TEMPLATE`` - A template call (transclusion).  Template name is in the\n  first argument and template arguments in subsequent arguments in ``args``.\n  The ``children`` field is not used.  In wikitext templates are marked up\n  as {{name|arg1|arg2|...}}.\n* ``TEMPLATE_ARG`` - A template argument.  The argument name is in the first\n  item in ``args`` followed by any subsequet arguments (normally at most two\n  items, but I've seen arguments with more - probably an error in those\n  template definitions).  The ``children`` field is not used.  In wikitext\n  template arguments are marked up as {{{name|defval}}}.\n* ``PARSER_FN`` - A parser function invocation.  This is also used for built-in\n  variables such as {{PAGENAME}}.  The parser function name is in the\n  first element of ``args`` and parser function arguments in subsequent\n  elements.\n* ``URL`` - An external URL. The first argument is the URL.  The second\n  optional argument (in ``args``) is the display text.  The ``children``\n  field is not used.\n* ``TABLE`` - A table.  Content is in ``children``.  In wikitext, a table\n  is encoded as {| ... |}.\n* ``TABLE_CAPTION`` - A table caption.  This can only occur under\n  ``TABLE``.  The content is in ``children``.  The ``attrs`` field contains\n  a dictionary of any HTML attributes given to the table.\n* ``TABLE_ROW`` - A table row.  This can only occur under ``TABLE``.  The\n  content is in ``children`` (normally the content would be ``TABLE_CELL``\n  or ``TABLE_HEADER_CELL`` nodes).  The ``attrs`` field contains a dictionary\n  of any HTML attributes given to the table row.\n* ``TABLE_HEADER_CELL`` - A table header cell.  This can only occur under\n  ``TABLE_ROW``.  Content is in children.  The ``attrs`` field contains\n  a dictionary of any HTML attributes given to the table row.\n* ``TABLE_CELL`` - A table cell.  This can only occur under ``TABLE_ROW``.\n  Content is in ``children``.  The ``attrs`` field contains a dictionary\n  of any HTML attributes given to the table row.\n* ``MAGIC_WORD`` - A MediaWiki magic word.  The magic word is assigned\n  directly to ``args`` as a string (i.e., not in a list).  ``children`` is\n  not used.  An example of a magic word would be ``__NOTOC__``.\n* ``HTML`` - A HTML tag (or a matched pair of HTML tags).  ``args`` is the\n  name of the HTML tag directly (not in a list and always without a slash).\n  ``attrs`` is set to a dictionary of any HTML attributes from the tag.\n  The contents of the HTML tag is in ``children``.\n\n## Expected performance\n\nThis can generally process a few Wiktionary pages second per processor\ncore, including expansion of all templates, Lua macros, parsing the\nfull page, and analyzing the parse.  On a multi-core machine, this can\ngenerally process a few dozen to a few hundred pages per second,\ndepending on the speed and the number of the cores.\n\nMost of the processing effort goes to expanding Lua macros.  You can\nelect not to expand Lua macros, but they are used extensively in\nWiktionary and for important information.  Expanding templates and Lua\nmacros allows much more robust and complete data extraction, but does\nnot come cheap.\n\n## Contributing and bug reports\n\nPlease create an issue on github to report bugs or to contribute!\n\n\n",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "https://github.com/tatuylonen/wikitextprocessor",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/tatuylonen/wikitextprocessor",
    "keywords": "dictionary,wiktionary,wikipedia,data extraction,wikitext,scribunto,lua",
    "license": "MIT (some included files have other free licences)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wikitextprocessor",
    "package_url": "https://pypi.org/project/wikitextprocessor/",
    "platform": null,
    "project_url": "https://pypi.org/project/wikitextprocessor/",
    "project_urls": {
      "Download": "https://github.com/tatuylonen/wikitextprocessor",
      "Homepage": "https://github.com/tatuylonen/wikitextprocessor"
    },
    "release_url": "https://pypi.org/project/wikitextprocessor/0.4.96/",
    "requires_dist": [
      "lupa",
      "dateparser",
      "lru-dict"
    ],
    "requires_python": "",
    "summary": "Parser and expander for Wikipedia, Wiktionary etc. dump files, with Lua execution support",
    "version": "0.4.96",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 14185822,
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8f6e86e06489dea4468115c1ad84e11a89858d3434be454640702006b89e7d47",
          "md5": "6c49176b73625a179644644b1ada756f",
          "sha256": "0f2ded5c5f0cccce9e4144a4b29f57a095f315c8529df78f00b37c202526e8d2"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c49176b73625a179644644b1ada756f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 317864,
        "upload_time": "2020-10-18T17:31:18",
        "upload_time_iso_8601": "2020-10-18T17:31:18.584656Z",
        "url": "https://files.pythonhosted.org/packages/8f/6e/86e06489dea4468115c1ad84e11a89858d3434be454640702006b89e7d47/wikitextprocessor-0.0.3-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "84de0c5dd40193c866d20d06dd04eb74447655f75a02c37af163a516fae218a5",
          "md5": "9f6e088b09a567ad89e12a3f87241b91",
          "sha256": "3448d5dca8ebd5951d7ccee2bc8cdb5cc286cad3fb63fca4ec2e1e2b36059a20"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9f6e088b09a567ad89e12a3f87241b91",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 297600,
        "upload_time": "2020-10-18T17:31:20",
        "upload_time_iso_8601": "2020-10-18T17:31:20.750924Z",
        "url": "https://files.pythonhosted.org/packages/84/de/0c5dd40193c866d20d06dd04eb74447655f75a02c37af163a516fae218a5/wikitextprocessor-0.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.90": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f5131ae908891a924e7457775e4354a7fb7dc84a731d807edd756de9ee8900a5",
          "md5": "46d9b50ac4f6a79dce9f1935d69a65f5",
          "sha256": "d23f912c706edf44740bf86187e6ff7b049ce22bd30c6fc69c721ba92e7fb93d"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.4.90-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "46d9b50ac4f6a79dce9f1935d69a65f5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 334799,
        "upload_time": "2020-12-20T15:33:24",
        "upload_time_iso_8601": "2020-12-20T15:33:24.599164Z",
        "url": "https://files.pythonhosted.org/packages/f5/13/1ae908891a924e7457775e4354a7fb7dc84a731d807edd756de9ee8900a5/wikitextprocessor-0.4.90-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8a0e926334f9a49ed90527e2af6b219675a3ad09a5def386bd794932c86801ec",
          "md5": "df6ea11a89c658ca669a4a9bf564fd61",
          "sha256": "80ef052c3f6b246b7b142a1f1e45762dc5aa735f0db6370b86b91fb568c66125"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.4.90.tar.gz",
        "has_sig": false,
        "md5_digest": "df6ea11a89c658ca669a4a9bf564fd61",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 329106,
        "upload_time": "2020-12-20T15:33:26",
        "upload_time_iso_8601": "2020-12-20T15:33:26.301016Z",
        "url": "https://files.pythonhosted.org/packages/8a/0e/926334f9a49ed90527e2af6b219675a3ad09a5def386bd794932c86801ec/wikitextprocessor-0.4.90.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.91": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "173c7c43b2a05d4795eef324ba828f2d3fbba7bf03c4f95ed3ad457d1c6f4bac",
          "md5": "37e82007e5de15e1478bc6a0c448040f",
          "sha256": "3dce8f44b8ec5c711cc8c2ec42ebef4340bd69260575b6d3cf29011d0fe08f7f"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.4.91-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37e82007e5de15e1478bc6a0c448040f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 336779,
        "upload_time": "2020-12-28T13:06:37",
        "upload_time_iso_8601": "2020-12-28T13:06:37.562813Z",
        "url": "https://files.pythonhosted.org/packages/17/3c/7c43b2a05d4795eef324ba828f2d3fbba7bf03c4f95ed3ad457d1c6f4bac/wikitextprocessor-0.4.91-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "f8628530b4a8dab435f56e626ae85cfbe7c7dc082d295794a6f5eba1c3b12ad8",
          "md5": "92b9226e7b91d6972a03efde564ab7e9",
          "sha256": "ce32541a82a561c6dbdaac74ef89d388cf339c5cf07e65a4e60b911a083d1e9e"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.4.91.tar.gz",
        "has_sig": false,
        "md5_digest": "92b9226e7b91d6972a03efde564ab7e9",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 330973,
        "upload_time": "2020-12-28T13:06:39",
        "upload_time_iso_8601": "2020-12-28T13:06:39.464952Z",
        "url": "https://files.pythonhosted.org/packages/f8/62/8530b4a8dab435f56e626ae85cfbe7c7dc082d295794a6f5eba1c3b12ad8/wikitextprocessor-0.4.91.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.92": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "34a3e3d23ba71c2ee8ed323c8fd8b262d3f76e577e2b0548a8b46f9a43fdffe6",
          "md5": "88f316dd0f244ee44c2247cc0805faee",
          "sha256": "95cf9c05ded7becab979c2a12ea613d7350861339b3eae2bfda1efbfa6156d36"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.4.92-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "88f316dd0f244ee44c2247cc0805faee",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 337723,
        "upload_time": "2021-04-10T10:39:32",
        "upload_time_iso_8601": "2021-04-10T10:39:32.295458Z",
        "url": "https://files.pythonhosted.org/packages/34/a3/e3d23ba71c2ee8ed323c8fd8b262d3f76e577e2b0548a8b46f9a43fdffe6/wikitextprocessor-0.4.92-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "08fa127d028a97a266b529c956500403646be8dc6679a1584d0959c3459f35b8",
          "md5": "ec55e085dfe64b7ca9cc00a86030621f",
          "sha256": "247a9712d67df71942a4affb2d2553c29f8ade4d7aba27535949bffdabd99203"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.4.92.tar.gz",
        "has_sig": false,
        "md5_digest": "ec55e085dfe64b7ca9cc00a86030621f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 331964,
        "upload_time": "2021-04-10T10:39:34",
        "upload_time_iso_8601": "2021-04-10T10:39:34.096115Z",
        "url": "https://files.pythonhosted.org/packages/08/fa/127d028a97a266b529c956500403646be8dc6679a1584d0959c3459f35b8/wikitextprocessor-0.4.92.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.93": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1e584a237a081d4a21f776f8df005634d0f67a7f5373d83afd37c642a53c45eb",
          "md5": "d1fe16708626e1034d1cc4599fce1bf4",
          "sha256": "490f3a44e5e9202f77b1bd41ba8ecf80c41fcface80024a51ea3291f231734e3"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.4.93-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1fe16708626e1034d1cc4599fce1bf4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 468573,
        "upload_time": "2021-04-12T18:53:59",
        "upload_time_iso_8601": "2021-04-12T18:53:59.211499Z",
        "url": "https://files.pythonhosted.org/packages/1e/58/4a237a081d4a21f776f8df005634d0f67a7f5373d83afd37c642a53c45eb/wikitextprocessor-0.4.93-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3572aa9855f53e7401dd23747b2ccd1ecf75479e404e12c2ece39e825fe41ac6",
          "md5": "35fc1b22d76efa6999722da204335f67",
          "sha256": "fb5d7d9cc47e5c0f4ecb84b4c7b64bca0b84909a8e8bda2e00b774a3447a1a1d"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.4.93.tar.gz",
        "has_sig": false,
        "md5_digest": "35fc1b22d76efa6999722da204335f67",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 451405,
        "upload_time": "2021-04-12T18:54:01",
        "upload_time_iso_8601": "2021-04-12T18:54:01.400665Z",
        "url": "https://files.pythonhosted.org/packages/35/72/aa9855f53e7401dd23747b2ccd1ecf75479e404e12c2ece39e825fe41ac6/wikitextprocessor-0.4.93.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.94": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "22353828a0284fa705474af85d6aec12bc77389ed0d43130e6c297d6b907e0d4",
          "md5": "26f324ea883de3db752c5460cbeeaaa1",
          "sha256": "e050171ec52a6b7b1c2c488e28e85ebc6dceef097173cee5362b5a0b5547f5ac"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.4.94-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26f324ea883de3db752c5460cbeeaaa1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 470931,
        "upload_time": "2021-05-06T07:27:36",
        "upload_time_iso_8601": "2021-05-06T07:27:36.828243Z",
        "url": "https://files.pythonhosted.org/packages/22/35/3828a0284fa705474af85d6aec12bc77389ed0d43130e6c297d6b907e0d4/wikitextprocessor-0.4.94-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "2aab3036b513cffdec3d56ed75ab177ab8838984cff3830054ee708d33832baa",
          "md5": "747799e52694dcd37b94909ada185d0f",
          "sha256": "464360181f8b9561c5c7f92687fcb3f22349f6f88f9bff51372de989d8313e2a"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.4.94.tar.gz",
        "has_sig": false,
        "md5_digest": "747799e52694dcd37b94909ada185d0f",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 453252,
        "upload_time": "2021-05-06T07:27:38",
        "upload_time_iso_8601": "2021-05-06T07:27:38.749085Z",
        "url": "https://files.pythonhosted.org/packages/2a/ab/3036b513cffdec3d56ed75ab177ab8838984cff3830054ee708d33832baa/wikitextprocessor-0.4.94.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.95": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "1faaaaee2409da0ce1c7c236f12a0fd9191ad30a2fb68d0545691249e4b2fd9b",
          "md5": "091d560f8a3aa4f89170b45bc303ae91",
          "sha256": "7f8e2d6493fe9de4bcf70e0f593a9a36964a819fe9c42d82c25e3742284c0137"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.4.95-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "091d560f8a3aa4f89170b45bc303ae91",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 475812,
        "upload_time": "2021-09-20T09:08:59",
        "upload_time_iso_8601": "2021-09-20T09:08:59.721372Z",
        "url": "https://files.pythonhosted.org/packages/1f/aa/aaee2409da0ce1c7c236f12a0fd9191ad30a2fb68d0545691249e4b2fd9b/wikitextprocessor-0.4.95-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "8c2e8f4154d5f96c05193bd5640041ac755b7d4e1c3c01d4fd141ba9184389c4",
          "md5": "be4c39138ef5f37393efa92c5d1371d4",
          "sha256": "1eac6f4992ce2694c63c14fa70297175a53b0662d7a011359638a023bed4b2f8"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.4.95.tar.gz",
        "has_sig": false,
        "md5_digest": "be4c39138ef5f37393efa92c5d1371d4",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 449936,
        "upload_time": "2021-09-20T09:09:02",
        "upload_time_iso_8601": "2021-09-20T09:09:02.253538Z",
        "url": "https://files.pythonhosted.org/packages/8c/2e/8f4154d5f96c05193bd5640041ac755b7d4e1c3c01d4fd141ba9184389c4/wikitextprocessor-0.4.95.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "0.4.96": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "e719f65a7bb87b0bd5493a62ac90c2064838608fe49bf3a5826125df15be1cd9",
          "md5": "a55ac53380aadb676b1d03fd4ad5883d",
          "sha256": "4c553e49a16439aa368ea8ab23a4f46ad1237d297215a9ee4e85923e185b8203"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.4.96-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a55ac53380aadb676b1d03fd4ad5883d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "requires_python": null,
        "size": 476659,
        "upload_time": "2022-06-20T10:19:20",
        "upload_time_iso_8601": "2022-06-20T10:19:20.263839Z",
        "url": "https://files.pythonhosted.org/packages/e7/19/f65a7bb87b0bd5493a62ac90c2064838608fe49bf3a5826125df15be1cd9/wikitextprocessor-0.4.96-py3-none-any.whl",
        "yanked": false,
        "yanked_reason": null
      },
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "d26a59746e09c9504aa2d52dffd4d130f45167c1fdb9795ac8ad050305eaf66b",
          "md5": "fd899df0b408b1486be15fbfc8f447ef",
          "sha256": "6761449c896d53ee9945923ee0cdf497fc0ac7f1293a88c908cd7ff3b0b74dda"
        },
        "downloads": -1,
        "filename": "wikitextprocessor-0.4.96.tar.gz",
        "has_sig": false,
        "md5_digest": "fd899df0b408b1486be15fbfc8f447ef",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 450751,
        "upload_time": "2022-06-20T10:19:24",
        "upload_time_iso_8601": "2022-06-20T10:19:24.020061Z",
        "url": "https://files.pythonhosted.org/packages/d2/6a/59746e09c9504aa2d52dffd4d130f45167c1fdb9795ac8ad050305eaf66b/wikitextprocessor-0.4.96.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "e719f65a7bb87b0bd5493a62ac90c2064838608fe49bf3a5826125df15be1cd9",
        "md5": "a55ac53380aadb676b1d03fd4ad5883d",
        "sha256": "4c553e49a16439aa368ea8ab23a4f46ad1237d297215a9ee4e85923e185b8203"
      },
      "downloads": -1,
      "filename": "wikitextprocessor-0.4.96-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a55ac53380aadb676b1d03fd4ad5883d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "requires_python": null,
      "size": 476659,
      "upload_time": "2022-06-20T10:19:20",
      "upload_time_iso_8601": "2022-06-20T10:19:20.263839Z",
      "url": "https://files.pythonhosted.org/packages/e7/19/f65a7bb87b0bd5493a62ac90c2064838608fe49bf3a5826125df15be1cd9/wikitextprocessor-0.4.96-py3-none-any.whl",
      "yanked": false,
      "yanked_reason": null
    },
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "d26a59746e09c9504aa2d52dffd4d130f45167c1fdb9795ac8ad050305eaf66b",
        "md5": "fd899df0b408b1486be15fbfc8f447ef",
        "sha256": "6761449c896d53ee9945923ee0cdf497fc0ac7f1293a88c908cd7ff3b0b74dda"
      },
      "downloads": -1,
      "filename": "wikitextprocessor-0.4.96.tar.gz",
      "has_sig": false,
      "md5_digest": "fd899df0b408b1486be15fbfc8f447ef",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 450751,
      "upload_time": "2022-06-20T10:19:24",
      "upload_time_iso_8601": "2022-06-20T10:19:24.020061Z",
      "url": "https://files.pythonhosted.org/packages/d2/6a/59746e09c9504aa2d52dffd4d130f45167c1fdb9795ac8ad050305eaf66b/wikitextprocessor-0.4.96.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}