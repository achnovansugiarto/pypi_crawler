{
  "info": {
    "author": "Gleb Nikonorov",
    "author_email": "gleb.i.nikonorov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Testing"
    ],
    "description": "===================\npytest-dynamicrerun\n===================\n\n.. image:: https://img.shields.io/pypi/v/pytest-dynamicrerun.svg\n    :target: https://pypi.org/project/pytest-dynamicrerun\n    :alt: PyPI version\n\n.. image:: https://travis-ci.org/gnikonorov/pytest-dynamicrerun.svg?branch=master\n    :target: https://travis-ci.org/gnikonorov/pytest-dynamicrerun\n    :alt: See Build Status on Travis CI\n\npytest-dynamicrerun is a `pytest`_ plugin to rerun tests dynamically based off of test outcome and output.\n\nSupported versions\n------------------\n\nThis plugin is tested against the following Python and pytest versions. Each Python version is tested against all pytest versions. Please `file an issue`_ to request additional targets.\n\n:Python Versions:\n    python 3.5,\n    python 3.6,\n    python 3.7,\n    python 3.8,\n    pypy3\n:Pytest Versions:\n    5.4.0,\n    5.4.1,\n    5.4.2,\n    5.4.3,\n    6.0.0,\n    6.0.1\n\n\nInstallation\n------------\n\nInstall this plugin from `PyPI`_ by running the following::\n\n    $ pip install pytest-dynamicrerun\n\n\nUsage\n-----\n\nSpecifying how many times to rerun\n##################################\n\nBy default, one rerun attempt is made. You can set the amount of times to attempt a rerun by passing the ``--dynamic-rerun-attempts`` flag when invoking pytest or including the ``dynamic_rerun_attempts`` INI key.\n\nTo pass the flag::\n\n    python3 -m pytest --dynamic-rerun-attempts=3\n\nTo set the INI key add the following to your config file's ``[pytest]`` section::\n\n    [pytest]\n    dynamic_rerun_attempts = 123\n\nPassing a non positive integer value will set the number of rerun attempts to the default.\n\nSpecifying what to rerun on\n###########################\n\nBy default, all failed tests are rerun. You can change this behavior by either passing the ``--dynamic-rerun-triggers`` flag when invoking ``pytest`` or including the ``dynamic_rerun_triggers`` INI key. Note that regular expressions are allowed.\n\nTo pass the flag::\n\n    python3 -m pytest --dynamic-rerun-triggers=\"a triggering trace\"\n\nTo set the INI key add the following to your config file's ``[pytest]`` section::\n\n    [pytest]\n    dynamic_rerun_triggers = a triggering trace\n\nYou can accumulate values by either providing the flag multiple times or appending to the INI key. For example, the below two snippets would cause this plugin to trigger on both ``foo`` and ``bar``::\n\n    python3 -m pytest --dynamic-rerun-triggers=\"foo\" --dynamic-rerun-triggers=\"bar\"\n\n    [pytest]\n    dynamic_rerun_triggers = foo\n        bar\n\nNote that at this time only ``stdout``, ``stderr``, and exceptions are checked.\n\nSpecifying a rerun interval\n###########################\n\nYou can specify an interval to rerun tests on by either passing the ``--dynamic-rerun-schedule`` flag to python when invoking ``pytest`` or including the ``dyanmic_rerun_schedule`` INI key.\n\nInternally, this plugin uses `croniter`_ to schedule wait times. Because of this, we are able to schedule wait times with second level granularity. Visit the croniter repository ``README`` to find out more information on this.\n\nTo pass the flag::\n\n    python3 -m pytest --dynamic-rerun-schedule=\"* * * * * *\"\n\nTo set the INI key add the following to your config file's ``[pytest]`` section::\n\n    [pytest]\n    dynamic_rerun_schedule = * * * * * *\n\nNote that any valid cron schedule is accepted. If this flag is not passed or set in the INI file, this plugin will not take effect. Passing an invalid value will force the interval to default to ``* * * * * *`` ( every second ).\n\nIgnoring this plugin\n####################\n\nYou can ignore this plugin by passing the ``--dynamic-rerun-disabled`` flag to python when invoking ``pytest`` or including the ``dynamic_rerun_disabled`` INI key.\n\nTo pass the flag::\n\n    python3 -m pytest --dynamic-rerun-disabled=\"True\"\n\nTo set the INI key add the following to your config file's ``[pytest]`` section::\n\n    [pytest]\n    dynamic_rerun_disabled = True\n\n\nNote that if this flag is omitted, we do not disable the plugin ( so it is equivalent to passing ``--dynamic-rerun-disabled=False`` )\n\nUsing markers to rerun tests\n############################\n\nWe can achieve the above functionality through markers as well. This plugin defines the ``dynamicrerun`` mark, which can be used as follows::\n\n    @pytest.mark.dynamicrerun(attempts=10, disabled=False, schedule=\"* * * * * *\", triggers=\"foo\")\n    def test_print_foo():\n        print(\"foo\")\n\nMark arguments correspond to INI keys as follows:\n\n* ``attempts`` corresponds to ``dynamic_rerun_attempts``\n* ``disabled`` corresponds to ``dynanic_rerun_disabled``\n* ``schedule`` corresponds to ``dynamic_rerun_schedule``\n* ``triggers`` corresponds to ``dynamic_rerun_triggers``\n\nTo pass multiple values to the ``triggers`` argument, provide a list as so::\n\n    @pytest.mark.dynamicrerun(attempts=10, disabled=False, schedule=\"* * * * * *\", triggers=[\"foo\", \"bar\", \"baz\"])\n    def test_print_foo():\n        print(\"foo\")\n\nIn the above example, reruns will be triggered on ``foo``, ``bar``, and ``baz``.\n\nArgument precedence\n###################\n\nNote that first we check for arguments in markers, then command line switches, and only then do we check in INI files. Values found at lower levels ( those checked first ) take precedence over values defined at a higher level ( those checked later ).\n\nFor example, if we define the number of rerun attempts as 10 when invoking ``pytest`` from the command line, but later in a marker define the number of rerun attempts as 3, 3 would take precedence over 10 since we check markers before we check command line flags.\n\nDeveloping against this plugin\n------------------------------\nThis plugin exposes the following attributes on the ``item`` object:\n\n* ``dynamic_rerun_run_times ( list )``: The list of times this item was run by the plugin. Note this includes the original non dynamically rerun run.\n* ``dynamic_rerun_schedule(string)``: The schedule to rerun this item on. See the section ``Specifying a rerun interval`` above for more details.\n* ``dynamic_rerun_sleep_times (list)``: A list of `timedelta objects`_ representing the time slept in between reruns for the item\n* ``dynamic_rerun_triggers (list)``: The rerun triggers for this specific item. See the section ``Specifying what to rerun on`` above for more details.\n* ``max_allowed_dynamic_rerun_attempts(int)``: The maximum amount of times we are allowed to rerun this item. See the section ``Specifying how many times to rerun`` above for more details.\n* ``num_dynamic_reruns_kicked_off (int)``: The amount of reruns launched at the moment of inspection for this item.\n\nThis plugin exposes the following attributes on the ``session`` object:\n\n* ``dynamic_rerun_items (list)``: The list of items that are set to be dynamically rerun on the next iteration\n\n\nContributing\n------------\nContributions are always welcome. Tests can be run with `tox`_.\n\nPlease remember to add a `changelog`_ entry when adding a non-trivial feature.\n\n`pre-commit`_ is used to ensure basic checks pass.\n\nLicense\n-------\n\nDistributed under the terms of the `MIT`_ license, \"pytest-dynamicrerun\" is free and open source software\n\nIssues\n------\n\nIf you encounter any problems, please `file an issue`_ along with a detailed description.\n\n.. _`MIT`: http://opensource.org/licenses/MIT\n.. _`PyPI`: https://pypi.org/\n.. _`croniter`: https://github.com/kiorky/croniter/\n.. _`changelog`: https://github.com/gnikonorov/pytest-dynamicrerun/blob/master/CHANGES.rst\n.. _`file an issue`: https://github.com/gnikonorov/pytest-dynamicrerun/issues\n.. _`pre-commit`: https://pre-commit.com/\n.. _`pytest`: https://github.com/pytest-dev/pytest\n.. _`timedelta objects`: https://docs.python.org/3/library/datetime.html#timedelta-objects\n.. _`tox`: https://tox.readthedocs.io/en/latest/",
    "description_content_type": "",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/gnikonorov/pytest-dynamicrerun",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Gleb Nikonorov",
    "maintainer_email": "gleb.i.nikonorov@gmail.com",
    "name": "pytest-dynamicrerun",
    "package_url": "https://pypi.org/project/pytest-dynamicrerun/",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-dynamicrerun/",
    "project_urls": {
      "Homepage": "https://github.com/gnikonorov/pytest-dynamicrerun"
    },
    "release_url": "https://pypi.org/project/pytest-dynamicrerun/1.1.1/",
    "requires_dist": null,
    "requires_python": ">=3.5",
    "summary": "A pytest plugin to rerun tests dynamically based off of test outcome and output.",
    "version": "1.1.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 7968605,
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "4a74ab112be44e3b9d47abedbf79e52f572d030f320df4614871d3d1a102661e",
          "md5": "411c617f61ceae128cc1b5eee112da1c",
          "sha256": "c1d1027d0f63ebb8bd725d3fd0865329e64f834d6e9d7b8779360a780e0b6770"
        },
        "downloads": -1,
        "filename": "pytest-dynamicrerun-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "411c617f61ceae128cc1b5eee112da1c",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7765,
        "upload_time": "2020-08-09T22:46:55",
        "upload_time_iso_8601": "2020-08-09T22:46:55.697252Z",
        "url": "https://files.pythonhosted.org/packages/4a/74/ab112be44e3b9d47abedbf79e52f572d030f320df4614871d3d1a102661e/pytest-dynamicrerun-1.0.2.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "6afe5309be9c4e2d7cc9d368caf00c57a20fa8446a0db34e434bacb1ac2df631",
          "md5": "73f84856b03d647e547415bf003d6ca5",
          "sha256": "e978c2109384182ec896fa6091dd4e0766c985b483659c72e2a886af1dc1b1b9"
        },
        "downloads": -1,
        "filename": "pytest-dynamicrerun-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "73f84856b03d647e547415bf003d6ca5",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7754,
        "upload_time": "2020-08-10T01:18:13",
        "upload_time_iso_8601": "2020-08-10T01:18:13.699243Z",
        "url": "https://files.pythonhosted.org/packages/6a/fe/5309be9c4e2d7cc9d368caf00c57a20fa8446a0db34e434bacb1ac2df631/pytest-dynamicrerun-1.0.3.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "3f87c5be3f2e365200fdfaa22c5dbef5c2f2132c77bcab74509175e6adc64452",
          "md5": "93474a61a20d56aba73e749bcfbbc083",
          "sha256": "1393b84f57b143c2486c22a1587c05780ff7a4eea4f4ec5b4693848dc99f02f8"
        },
        "downloads": -1,
        "filename": "pytest-dynamicrerun-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "93474a61a20d56aba73e749bcfbbc083",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7746,
        "upload_time": "2020-08-10T04:36:51",
        "upload_time_iso_8601": "2020-08-10T04:36:51.079069Z",
        "url": "https://files.pythonhosted.org/packages/3f/87/c5be3f2e365200fdfaa22c5dbef5c2f2132c77bcab74509175e6adc64452/pytest-dynamicrerun-1.0.4.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "83a1f96474253c606a450101623dd62d0961e615cee99cb73f09b00a8ba18729",
          "md5": "86df48557f0539b86a32e12f69ce863d",
          "sha256": "cfcea8b6e565f5c2d1b31cc0bea8e516a4fa358243207704370b3f4104297aca"
        },
        "downloads": -1,
        "filename": "pytest-dynamicrerun-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "86df48557f0539b86a32e12f69ce863d",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 7887,
        "upload_time": "2020-08-11T02:58:26",
        "upload_time_iso_8601": "2020-08-11T02:58:26.280781Z",
        "url": "https://files.pythonhosted.org/packages/83/a1/f96474253c606a450101623dd62d0961e615cee99cb73f09b00a8ba18729/pytest-dynamicrerun-1.0.5.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "49c9744e58d972d801a782d5c50145fa806c4c957ec58953866d6964faefaca8",
          "md5": "4ad20a74d5125afc6bdc17170a0399a6",
          "sha256": "9d1e63412863e6f3ca279669b999eb4d4e36916e15ee1e1c17f621b285be6d5f"
        },
        "downloads": -1,
        "filename": "pytest-dynamicrerun-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4ad20a74d5125afc6bdc17170a0399a6",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8038,
        "upload_time": "2020-08-12T04:20:15",
        "upload_time_iso_8601": "2020-08-12T04:20:15.652716Z",
        "url": "https://files.pythonhosted.org/packages/49/c9/744e58d972d801a782d5c50145fa806c4c957ec58953866d6964faefaca8/pytest-dynamicrerun-1.0.6.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "748e27a2cfa1f497cb78033ff5a95c5e760225aace4f5bdae23f28b2db299520",
          "md5": "c832e503c918dc601faf9646d3b7b728",
          "sha256": "3e64ed249aa5afcd4fd687338c9a31d2e31fe2a5d9ba9899147f43c45afe7211"
        },
        "downloads": -1,
        "filename": "pytest-dynamicrerun-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c832e503c918dc601faf9646d3b7b728",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8478,
        "upload_time": "2020-08-14T02:11:46",
        "upload_time_iso_8601": "2020-08-14T02:11:46.506516Z",
        "url": "https://files.pythonhosted.org/packages/74/8e/27a2cfa1f497cb78033ff5a95c5e760225aace4f5bdae23f28b2db299520/pytest-dynamicrerun-1.1.0.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "a9e38af4126de1585c524c054e2cbcb3e99a83627bf9ca8203ec3849d9dfa32a",
          "md5": "d154e508efb2834486fe77a8450028c3",
          "sha256": "7abdd0fb4c14a9930942019ff4d81ad62a7645d34e027c5627ca6e0ee4255b9a"
        },
        "downloads": -1,
        "filename": "pytest-dynamicrerun-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d154e508efb2834486fe77a8450028c3",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": ">=3.5",
        "size": 8688,
        "upload_time": "2020-08-15T19:27:14",
        "upload_time_iso_8601": "2020-08-15T19:27:14.115356Z",
        "url": "https://files.pythonhosted.org/packages/a9/e3/8af4126de1585c524c054e2cbcb3e99a83627bf9ca8203ec3849d9dfa32a/pytest-dynamicrerun-1.1.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "a9e38af4126de1585c524c054e2cbcb3e99a83627bf9ca8203ec3849d9dfa32a",
        "md5": "d154e508efb2834486fe77a8450028c3",
        "sha256": "7abdd0fb4c14a9930942019ff4d81ad62a7645d34e027c5627ca6e0ee4255b9a"
      },
      "downloads": -1,
      "filename": "pytest-dynamicrerun-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d154e508efb2834486fe77a8450028c3",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": ">=3.5",
      "size": 8688,
      "upload_time": "2020-08-15T19:27:14",
      "upload_time_iso_8601": "2020-08-15T19:27:14.115356Z",
      "url": "https://files.pythonhosted.org/packages/a9/e3/8af4126de1585c524c054e2cbcb3e99a83627bf9ca8203ec3849d9dfa32a/pytest-dynamicrerun-1.1.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}