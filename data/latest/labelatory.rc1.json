{
  "info": {
    "author": "Daniil Fedotov",
    "author_email": "fedotovdanil570@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Flask",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3.8",
      "Programming Language :: Python :: 3.9",
      "Programming Language :: Python :: Implementation",
      "Topic :: Software Development"
    ],
    "description": "# Labelatory\n\n## Description\n\nLabelatory is a web application for synchronization of labels among repositories stored on diffenrent git services.\n\n## Using\nTo use the Labelatory application you have to do the following steps:\n\n* Install it via pip\n\n```\npip install labelatory\n```\n* Set necessary environment variables:\n```\nexport FLASK_APP=labelatory\nexport LABELATORY_CONFIG=<PATH TO YOUR credentials_conf.cfg>\n```\n\n* Run Flask application\n```\nflask run\n```\n\n* Then go to 127.0.0.1:5000\n\nIt is recommenden to use ```ngrok```  or another similar program to make Labelatory be able to process webhooks events from your repositories.\n\n\n## Core functionality\nThe application allows to manage labels (create, update and delete) for given services and repositries according to API of the services. \n\n* create - if there is a configuration for the label, but repositry doesn't contain this label, create it.\n* update - if the configuration for the label has changed, update this label in repositories; if the label in some repository has changed, but configuration didn't, update this label according to configuration.\n* delete - if new created label for the repository does not correspond with the configuretion, delete this label.\n\nWork with API runs in asynchronous manner.\n\n## Web Application functionality\nThe application is built with Flask framework and uses webhooks cofigured for labels events. Once some action with some label in managable repository is performed, the application \nreacts on this event and checks whether the label conforms to configuration. If it does not conform, the application reverts this label.\n\nWeb interface displays current preferences for services and repositories that were read by the application from the configuration file.\n\nUser can change these preferences at his own discretion - customize already defined labels, add new label, add new repository for service.\n\nAdding support for a new service is provided with implementing the interface for comunnication with git service according to API documentation of the new service.\n\nUser can save his customized preferences to local configuration file.\n\n## Configuration file example\nCredentials cofiguration file is stored locally and contains data for accessing the services and defines, where the label configuration file is stored. \n\nCredentials cofiguration file example:\n```\n[config]\ntype = <TYPE>\nrepo = github_username/github_config_repo\n\n[service:github]\ntoken = <GITHUB_TOKEN>\nsecret = <GITHUB_WEBHOOK_SECRET>\n\n[service:gitlab]\nhost = <HOST>\ntoken = <GITLAB_TOKEN>\nsecret = <GITLAB_WEBHOOK_SECRET>\n```\n\n* config - defines, where the label configuration file is stored.\n  - type (required) - can be \"local\" or \"remote\"\n  - repo (required for \"remote\" type) - defines a repo on github, where the label configuration file is stored \n  (confuration file must have name \"labels_conf.cfg\" and be stored in the root of the repository).\n* service.<service_name> (e.g. service.github) - contains \"token\" for communication with API of the service and \"secret\" for work with webhooks.\n  - token - access token.\n  - secret - defines a webhook secret for repo.\n  - host (optional) - defines the instance for gitlab case (ex. \"gitlab.company.com\"). If host key is not defined, the default \"gitlab.com\" is used.\n\n\n\nLabels settings are stored in configuration files. The example of such a file is below:\n```\n[repo:github]\ngithub_username/github_repo_1 = true\ngithub_username/github_repo_2 = false\n\n[repo:gitlab]\ngitlab_username/gitlab_repo_1 = true\ngitlab_username/gitlab_repo_2 = false\n\n[label:bug]\ncolor = #123456\ndescription = Indicates an unexpected problem or unintended behavior\n```\n\n* repo.<service_name> (e.g. repo.github) - contains repositories on the service to be controlled.\n  - \"username/repo\" can be either \"true\" or \"false\" - manages whether repository must be under control or not.\n* label.<label_name> - describes features of given label name.\n  - \"color\" - defines the color of the label in hex format.\n  - \"description\" - the descrition of the label.",
    "description_content_type": "text/markdown",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": -1,
      "last_month": -1,
      "last_week": -1
    },
    "home_page": "https://github.com/fedotovdanil570/labelatory",
    "keywords": "git,github,gitlab,label,labels,repository,api",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "labelatory",
    "package_url": "https://pypi.org/project/labelatory/",
    "platform": "",
    "project_url": "https://pypi.org/project/labelatory/",
    "project_urls": {
      "Homepage": "https://github.com/fedotovdanil570/labelatory"
    },
    "release_url": "https://pypi.org/project/labelatory/0.1/",
    "requires_dist": null,
    "requires_python": "",
    "summary": "Labelatory - the powerful and the greatest tool         for label management across repositories on different git systems.",
    "version": "0.1",
    "yanked": false,
    "yanked_reason": null
  },
  "last_serial": 9279834,
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "blake2b_256": "09744f58c570ae2f03c7c6b8c9c5d4acf55bbbbd9c2bff2f3071f21a44d84678",
          "md5": "1e0d7820d6279828da263e8344994e86",
          "sha256": "f6a8017f12af9597d3d9303b034b40a4403fa9daba520a7f4f639030cc5dd99b"
        },
        "downloads": -1,
        "filename": "labelatory-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1e0d7820d6279828da263e8344994e86",
        "packagetype": "sdist",
        "python_version": "source",
        "requires_python": null,
        "size": 16436,
        "upload_time": "2021-01-31T20:08:08",
        "upload_time_iso_8601": "2021-01-31T20:08:08.096208Z",
        "url": "https://files.pythonhosted.org/packages/09/74/4f58c570ae2f03c7c6b8c9c5d4acf55bbbbd9c2bff2f3071f21a44d84678/labelatory-0.1.tar.gz",
        "yanked": false,
        "yanked_reason": null
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "blake2b_256": "09744f58c570ae2f03c7c6b8c9c5d4acf55bbbbd9c2bff2f3071f21a44d84678",
        "md5": "1e0d7820d6279828da263e8344994e86",
        "sha256": "f6a8017f12af9597d3d9303b034b40a4403fa9daba520a7f4f639030cc5dd99b"
      },
      "downloads": -1,
      "filename": "labelatory-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1e0d7820d6279828da263e8344994e86",
      "packagetype": "sdist",
      "python_version": "source",
      "requires_python": null,
      "size": 16436,
      "upload_time": "2021-01-31T20:08:08",
      "upload_time_iso_8601": "2021-01-31T20:08:08.096208Z",
      "url": "https://files.pythonhosted.org/packages/09/74/4f58c570ae2f03c7c6b8c9c5d4acf55bbbbd9c2bff2f3071f21a44d84678/labelatory-0.1.tar.gz",
      "yanked": false,
      "yanked_reason": null
    }
  ],
  "vulnerabilities": []
}